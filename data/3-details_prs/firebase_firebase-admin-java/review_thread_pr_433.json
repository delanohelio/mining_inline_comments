{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4MDY2MTQ3", "number": 433, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxODo0NjozOFrOEEzptA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxOTowNTowN1rOEE0AUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDc2MDIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxODo0NjozOFrOGiqUOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMjozODoyOFrOGjTQFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5ODA3NQ==", "bodyText": "Let's spell out OpenID Connect", "url": "https://github.com/firebase/firebase-admin-java/pull/433#discussion_r438998075", "createdAt": "2020-06-11T18:46:38Z", "author": {"login": "kevinthecheung"}, "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "diffHunk": "@@ -945,6 +939,543 @@ protected String execute() throws FirebaseAuthException {\n     };\n   }\n \n+  /**\n+   * Creates a new OIDC Auth provider config with the attributes contained in the specified", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1e49e3501d879cb42eb755190be8ba07a749206"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY2ODc1Ng==", "bodyText": "Done.", "url": "https://github.com/firebase/firebase-admin-java/pull/433#discussion_r439668756", "createdAt": "2020-06-12T22:38:28Z", "author": {"login": "micahstairs"}, "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "diffHunk": "@@ -945,6 +939,543 @@ protected String execute() throws FirebaseAuthException {\n     };\n   }\n \n+  /**\n+   * Creates a new OIDC Auth provider config with the attributes contained in the specified", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5ODA3NQ=="}, "originalCommit": {"oid": "e1e49e3501d879cb42eb755190be8ba07a749206"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDc2NjkwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxODo0ODozM1rOGiqYVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMjozODozNVrOGjTQKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5OTEyNw==", "bodyText": "Gets the OpenID Connect auth provider config corresponding to the specified provider ID.", "url": "https://github.com/firebase/firebase-admin-java/pull/433#discussion_r438999127", "createdAt": "2020-06-11T18:48:33Z", "author": {"login": "kevinthecheung"}, "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "diffHunk": "@@ -945,6 +939,543 @@ protected String execute() throws FirebaseAuthException {\n     };\n   }\n \n+  /**\n+   * Creates a new OIDC Auth provider config with the attributes contained in the specified\n+   * {@link OidcProviderConfig.CreateRequest}.\n+   *\n+   * @param request A non-null {@link OidcProviderConfig.CreateRequest} instance.\n+   * @return An {@link OidcProviderConfig} instance corresponding to the newly created provider\n+   *     config.\n+   * @throws NullPointerException if the provided request is null.\n+   * @throws IllegalArgumentException If the provider ID string is null or empty, or is not\n+   *     prefixed with 'oidc.'.\n+   * @throws FirebaseAuthException if an error occurs while creating the provider config.\n+   */\n+  public OidcProviderConfig createOidcProviderConfig(\n+      @NonNull OidcProviderConfig.CreateRequest request) throws FirebaseAuthException {\n+    return createOidcProviderConfigOp(request).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #createOidcProviderConfig} but performs the operation asynchronously.\n+   *\n+   * @param request A non-null {@link OidcProviderConfig.CreateRequest} instance.\n+   * @return An {@code ApiFuture} which will complete successfully with a {@link OidcProviderConfig}\n+   *     instance corresponding to the newly created provider config. If an error occurs while\n+   *     creating the provider config, the future throws a {@link FirebaseAuthException}.\n+   * @throws NullPointerException if the provided request is null.\n+   * @throws IllegalArgumentException If the provider ID string is null or empty, or is not\n+   *     prefixed with 'oidc.'.\n+   */\n+  public ApiFuture<OidcProviderConfig> createOidcProviderConfigAsync(\n+      @NonNull OidcProviderConfig.CreateRequest request) {\n+    return createOidcProviderConfigOp(request).callAsync(firebaseApp);\n+  }\n+\n+  private CallableOperation<OidcProviderConfig, FirebaseAuthException>\n+      createOidcProviderConfigOp(final OidcProviderConfig.CreateRequest request) {\n+    checkNotDestroyed();\n+    checkNotNull(request, \"Create request must not be null.\");\n+    OidcProviderConfig.checkOidcProviderId(request.getProviderId());\n+    final FirebaseUserManager userManager = getUserManager();\n+    return new CallableOperation<OidcProviderConfig, FirebaseAuthException>() {\n+      @Override\n+      protected OidcProviderConfig execute() throws FirebaseAuthException {\n+        return userManager.createOidcProviderConfig(request);\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Updates an existing OIDC Auth provider config with the attributes contained in the specified\n+   * {@link OidcProviderConfig.UpdateRequest}.\n+   *\n+   * @param request A non-null {@link OidcProviderConfig.UpdateRequest} instance.\n+   * @return A {@link OidcProviderConfig} instance corresponding to the updated provider config.\n+   * @throws NullPointerException if the provided update request is null.\n+   * @throws IllegalArgumentException If the provided update request is invalid.\n+   * @throws FirebaseAuthException if an error occurs while updating the provider config.\n+   */\n+  public OidcProviderConfig updateOidcProviderConfig(\n+      @NonNull OidcProviderConfig.UpdateRequest request) throws FirebaseAuthException {\n+    return updateOidcProviderConfigOp(request).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #updateOidcProviderConfig} but performs the operation asynchronously.\n+   *\n+   * @param request A non-null {@link OidcProviderConfig.UpdateRequest} instance.\n+   * @return An {@code ApiFuture} which will complete successfully with a {@link OidcProviderConfig}\n+   *     instance corresponding to the updated provider config. If an error occurs while updating\n+   *     the provider config, the future throws a {@link FirebaseAuthException}.\n+   * @throws NullPointerException if the provided update request is null.\n+   * @throws IllegalArgumentException If the provided update request is invalid.\n+   */\n+  public ApiFuture<OidcProviderConfig> updateOidcProviderConfigAsync(\n+      @NonNull OidcProviderConfig.UpdateRequest request) {\n+    return updateOidcProviderConfigOp(request).callAsync(firebaseApp);\n+  }\n+\n+  private CallableOperation<OidcProviderConfig, FirebaseAuthException> updateOidcProviderConfigOp(\n+      final OidcProviderConfig.UpdateRequest request) {\n+    checkNotDestroyed();\n+    checkNotNull(request, \"Update request must not be null.\");\n+    checkArgument(!request.getProperties().isEmpty(),\n+        \"Update request must have at least one property set.\");\n+    final FirebaseUserManager userManager = getUserManager();\n+    return new CallableOperation<OidcProviderConfig, FirebaseAuthException>() {\n+      @Override\n+      protected OidcProviderConfig execute() throws FirebaseAuthException {\n+        return userManager.updateOidcProviderConfig(request);\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Gets the provider OIDC Auth config corresponding to the specified provider ID.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1e49e3501d879cb42eb755190be8ba07a749206"}, "originalPosition": 244}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY2ODc3OQ==", "bodyText": "Done.", "url": "https://github.com/firebase/firebase-admin-java/pull/433#discussion_r439668779", "createdAt": "2020-06-12T22:38:35Z", "author": {"login": "micahstairs"}, "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "diffHunk": "@@ -945,6 +939,543 @@ protected String execute() throws FirebaseAuthException {\n     };\n   }\n \n+  /**\n+   * Creates a new OIDC Auth provider config with the attributes contained in the specified\n+   * {@link OidcProviderConfig.CreateRequest}.\n+   *\n+   * @param request A non-null {@link OidcProviderConfig.CreateRequest} instance.\n+   * @return An {@link OidcProviderConfig} instance corresponding to the newly created provider\n+   *     config.\n+   * @throws NullPointerException if the provided request is null.\n+   * @throws IllegalArgumentException If the provider ID string is null or empty, or is not\n+   *     prefixed with 'oidc.'.\n+   * @throws FirebaseAuthException if an error occurs while creating the provider config.\n+   */\n+  public OidcProviderConfig createOidcProviderConfig(\n+      @NonNull OidcProviderConfig.CreateRequest request) throws FirebaseAuthException {\n+    return createOidcProviderConfigOp(request).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #createOidcProviderConfig} but performs the operation asynchronously.\n+   *\n+   * @param request A non-null {@link OidcProviderConfig.CreateRequest} instance.\n+   * @return An {@code ApiFuture} which will complete successfully with a {@link OidcProviderConfig}\n+   *     instance corresponding to the newly created provider config. If an error occurs while\n+   *     creating the provider config, the future throws a {@link FirebaseAuthException}.\n+   * @throws NullPointerException if the provided request is null.\n+   * @throws IllegalArgumentException If the provider ID string is null or empty, or is not\n+   *     prefixed with 'oidc.'.\n+   */\n+  public ApiFuture<OidcProviderConfig> createOidcProviderConfigAsync(\n+      @NonNull OidcProviderConfig.CreateRequest request) {\n+    return createOidcProviderConfigOp(request).callAsync(firebaseApp);\n+  }\n+\n+  private CallableOperation<OidcProviderConfig, FirebaseAuthException>\n+      createOidcProviderConfigOp(final OidcProviderConfig.CreateRequest request) {\n+    checkNotDestroyed();\n+    checkNotNull(request, \"Create request must not be null.\");\n+    OidcProviderConfig.checkOidcProviderId(request.getProviderId());\n+    final FirebaseUserManager userManager = getUserManager();\n+    return new CallableOperation<OidcProviderConfig, FirebaseAuthException>() {\n+      @Override\n+      protected OidcProviderConfig execute() throws FirebaseAuthException {\n+        return userManager.createOidcProviderConfig(request);\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Updates an existing OIDC Auth provider config with the attributes contained in the specified\n+   * {@link OidcProviderConfig.UpdateRequest}.\n+   *\n+   * @param request A non-null {@link OidcProviderConfig.UpdateRequest} instance.\n+   * @return A {@link OidcProviderConfig} instance corresponding to the updated provider config.\n+   * @throws NullPointerException if the provided update request is null.\n+   * @throws IllegalArgumentException If the provided update request is invalid.\n+   * @throws FirebaseAuthException if an error occurs while updating the provider config.\n+   */\n+  public OidcProviderConfig updateOidcProviderConfig(\n+      @NonNull OidcProviderConfig.UpdateRequest request) throws FirebaseAuthException {\n+    return updateOidcProviderConfigOp(request).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #updateOidcProviderConfig} but performs the operation asynchronously.\n+   *\n+   * @param request A non-null {@link OidcProviderConfig.UpdateRequest} instance.\n+   * @return An {@code ApiFuture} which will complete successfully with a {@link OidcProviderConfig}\n+   *     instance corresponding to the updated provider config. If an error occurs while updating\n+   *     the provider config, the future throws a {@link FirebaseAuthException}.\n+   * @throws NullPointerException if the provided update request is null.\n+   * @throws IllegalArgumentException If the provided update request is invalid.\n+   */\n+  public ApiFuture<OidcProviderConfig> updateOidcProviderConfigAsync(\n+      @NonNull OidcProviderConfig.UpdateRequest request) {\n+    return updateOidcProviderConfigOp(request).callAsync(firebaseApp);\n+  }\n+\n+  private CallableOperation<OidcProviderConfig, FirebaseAuthException> updateOidcProviderConfigOp(\n+      final OidcProviderConfig.UpdateRequest request) {\n+    checkNotDestroyed();\n+    checkNotNull(request, \"Update request must not be null.\");\n+    checkArgument(!request.getProperties().isEmpty(),\n+        \"Update request must have at least one property set.\");\n+    final FirebaseUserManager userManager = getUserManager();\n+    return new CallableOperation<OidcProviderConfig, FirebaseAuthException>() {\n+      @Override\n+      protected OidcProviderConfig execute() throws FirebaseAuthException {\n+        return userManager.updateOidcProviderConfig(request);\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Gets the provider OIDC Auth config corresponding to the specified provider ID.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5OTEyNw=="}, "originalCommit": {"oid": "e1e49e3501d879cb42eb755190be8ba07a749206"}, "originalPosition": 244}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDc2ODU2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxODo0OTowN1rOGiqZcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMjozODo0NlrOGjTQVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5OTQxMA==", "bodyText": "will be -> is", "url": "https://github.com/firebase/firebase-admin-java/pull/433#discussion_r438999410", "createdAt": "2020-06-11T18:49:07Z", "author": {"login": "kevinthecheung"}, "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "diffHunk": "@@ -945,6 +939,543 @@ protected String execute() throws FirebaseAuthException {\n     };\n   }\n \n+  /**\n+   * Creates a new OIDC Auth provider config with the attributes contained in the specified\n+   * {@link OidcProviderConfig.CreateRequest}.\n+   *\n+   * @param request A non-null {@link OidcProviderConfig.CreateRequest} instance.\n+   * @return An {@link OidcProviderConfig} instance corresponding to the newly created provider\n+   *     config.\n+   * @throws NullPointerException if the provided request is null.\n+   * @throws IllegalArgumentException If the provider ID string is null or empty, or is not\n+   *     prefixed with 'oidc.'.\n+   * @throws FirebaseAuthException if an error occurs while creating the provider config.\n+   */\n+  public OidcProviderConfig createOidcProviderConfig(\n+      @NonNull OidcProviderConfig.CreateRequest request) throws FirebaseAuthException {\n+    return createOidcProviderConfigOp(request).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #createOidcProviderConfig} but performs the operation asynchronously.\n+   *\n+   * @param request A non-null {@link OidcProviderConfig.CreateRequest} instance.\n+   * @return An {@code ApiFuture} which will complete successfully with a {@link OidcProviderConfig}\n+   *     instance corresponding to the newly created provider config. If an error occurs while\n+   *     creating the provider config, the future throws a {@link FirebaseAuthException}.\n+   * @throws NullPointerException if the provided request is null.\n+   * @throws IllegalArgumentException If the provider ID string is null or empty, or is not\n+   *     prefixed with 'oidc.'.\n+   */\n+  public ApiFuture<OidcProviderConfig> createOidcProviderConfigAsync(\n+      @NonNull OidcProviderConfig.CreateRequest request) {\n+    return createOidcProviderConfigOp(request).callAsync(firebaseApp);\n+  }\n+\n+  private CallableOperation<OidcProviderConfig, FirebaseAuthException>\n+      createOidcProviderConfigOp(final OidcProviderConfig.CreateRequest request) {\n+    checkNotDestroyed();\n+    checkNotNull(request, \"Create request must not be null.\");\n+    OidcProviderConfig.checkOidcProviderId(request.getProviderId());\n+    final FirebaseUserManager userManager = getUserManager();\n+    return new CallableOperation<OidcProviderConfig, FirebaseAuthException>() {\n+      @Override\n+      protected OidcProviderConfig execute() throws FirebaseAuthException {\n+        return userManager.createOidcProviderConfig(request);\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Updates an existing OIDC Auth provider config with the attributes contained in the specified\n+   * {@link OidcProviderConfig.UpdateRequest}.\n+   *\n+   * @param request A non-null {@link OidcProviderConfig.UpdateRequest} instance.\n+   * @return A {@link OidcProviderConfig} instance corresponding to the updated provider config.\n+   * @throws NullPointerException if the provided update request is null.\n+   * @throws IllegalArgumentException If the provided update request is invalid.\n+   * @throws FirebaseAuthException if an error occurs while updating the provider config.\n+   */\n+  public OidcProviderConfig updateOidcProviderConfig(\n+      @NonNull OidcProviderConfig.UpdateRequest request) throws FirebaseAuthException {\n+    return updateOidcProviderConfigOp(request).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #updateOidcProviderConfig} but performs the operation asynchronously.\n+   *\n+   * @param request A non-null {@link OidcProviderConfig.UpdateRequest} instance.\n+   * @return An {@code ApiFuture} which will complete successfully with a {@link OidcProviderConfig}\n+   *     instance corresponding to the updated provider config. If an error occurs while updating\n+   *     the provider config, the future throws a {@link FirebaseAuthException}.\n+   * @throws NullPointerException if the provided update request is null.\n+   * @throws IllegalArgumentException If the provided update request is invalid.\n+   */\n+  public ApiFuture<OidcProviderConfig> updateOidcProviderConfigAsync(\n+      @NonNull OidcProviderConfig.UpdateRequest request) {\n+    return updateOidcProviderConfigOp(request).callAsync(firebaseApp);\n+  }\n+\n+  private CallableOperation<OidcProviderConfig, FirebaseAuthException> updateOidcProviderConfigOp(\n+      final OidcProviderConfig.UpdateRequest request) {\n+    checkNotDestroyed();\n+    checkNotNull(request, \"Update request must not be null.\");\n+    checkArgument(!request.getProperties().isEmpty(),\n+        \"Update request must have at least one property set.\");\n+    final FirebaseUserManager userManager = getUserManager();\n+    return new CallableOperation<OidcProviderConfig, FirebaseAuthException>() {\n+      @Override\n+      protected OidcProviderConfig execute() throws FirebaseAuthException {\n+        return userManager.updateOidcProviderConfig(request);\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Gets the provider OIDC Auth config corresponding to the specified provider ID.\n+   *\n+   * @param providerId A provider ID string.\n+   * @return An {@link OidcProviderConfig} instance.\n+   * @throws IllegalArgumentException If the provider ID string is null or empty, or is not prefixed\n+   *     with 'oidc'.\n+   * @throws FirebaseAuthException If an error occurs while retrieving the provider config.\n+   */\n+  public OidcProviderConfig getOidcProviderConfig(@NonNull String providerId)\n+      throws FirebaseAuthException {\n+    return getOidcProviderConfigOp(providerId).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #getOidcProviderConfig(String)} but performs the operation asynchronously.\n+   * Page size will be limited to 100 provider configs.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1e49e3501d879cb42eb755190be8ba07a749206"}, "originalPosition": 259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY2ODgyMQ==", "bodyText": "Done.", "url": "https://github.com/firebase/firebase-admin-java/pull/433#discussion_r439668821", "createdAt": "2020-06-12T22:38:46Z", "author": {"login": "micahstairs"}, "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "diffHunk": "@@ -945,6 +939,543 @@ protected String execute() throws FirebaseAuthException {\n     };\n   }\n \n+  /**\n+   * Creates a new OIDC Auth provider config with the attributes contained in the specified\n+   * {@link OidcProviderConfig.CreateRequest}.\n+   *\n+   * @param request A non-null {@link OidcProviderConfig.CreateRequest} instance.\n+   * @return An {@link OidcProviderConfig} instance corresponding to the newly created provider\n+   *     config.\n+   * @throws NullPointerException if the provided request is null.\n+   * @throws IllegalArgumentException If the provider ID string is null or empty, or is not\n+   *     prefixed with 'oidc.'.\n+   * @throws FirebaseAuthException if an error occurs while creating the provider config.\n+   */\n+  public OidcProviderConfig createOidcProviderConfig(\n+      @NonNull OidcProviderConfig.CreateRequest request) throws FirebaseAuthException {\n+    return createOidcProviderConfigOp(request).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #createOidcProviderConfig} but performs the operation asynchronously.\n+   *\n+   * @param request A non-null {@link OidcProviderConfig.CreateRequest} instance.\n+   * @return An {@code ApiFuture} which will complete successfully with a {@link OidcProviderConfig}\n+   *     instance corresponding to the newly created provider config. If an error occurs while\n+   *     creating the provider config, the future throws a {@link FirebaseAuthException}.\n+   * @throws NullPointerException if the provided request is null.\n+   * @throws IllegalArgumentException If the provider ID string is null or empty, or is not\n+   *     prefixed with 'oidc.'.\n+   */\n+  public ApiFuture<OidcProviderConfig> createOidcProviderConfigAsync(\n+      @NonNull OidcProviderConfig.CreateRequest request) {\n+    return createOidcProviderConfigOp(request).callAsync(firebaseApp);\n+  }\n+\n+  private CallableOperation<OidcProviderConfig, FirebaseAuthException>\n+      createOidcProviderConfigOp(final OidcProviderConfig.CreateRequest request) {\n+    checkNotDestroyed();\n+    checkNotNull(request, \"Create request must not be null.\");\n+    OidcProviderConfig.checkOidcProviderId(request.getProviderId());\n+    final FirebaseUserManager userManager = getUserManager();\n+    return new CallableOperation<OidcProviderConfig, FirebaseAuthException>() {\n+      @Override\n+      protected OidcProviderConfig execute() throws FirebaseAuthException {\n+        return userManager.createOidcProviderConfig(request);\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Updates an existing OIDC Auth provider config with the attributes contained in the specified\n+   * {@link OidcProviderConfig.UpdateRequest}.\n+   *\n+   * @param request A non-null {@link OidcProviderConfig.UpdateRequest} instance.\n+   * @return A {@link OidcProviderConfig} instance corresponding to the updated provider config.\n+   * @throws NullPointerException if the provided update request is null.\n+   * @throws IllegalArgumentException If the provided update request is invalid.\n+   * @throws FirebaseAuthException if an error occurs while updating the provider config.\n+   */\n+  public OidcProviderConfig updateOidcProviderConfig(\n+      @NonNull OidcProviderConfig.UpdateRequest request) throws FirebaseAuthException {\n+    return updateOidcProviderConfigOp(request).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #updateOidcProviderConfig} but performs the operation asynchronously.\n+   *\n+   * @param request A non-null {@link OidcProviderConfig.UpdateRequest} instance.\n+   * @return An {@code ApiFuture} which will complete successfully with a {@link OidcProviderConfig}\n+   *     instance corresponding to the updated provider config. If an error occurs while updating\n+   *     the provider config, the future throws a {@link FirebaseAuthException}.\n+   * @throws NullPointerException if the provided update request is null.\n+   * @throws IllegalArgumentException If the provided update request is invalid.\n+   */\n+  public ApiFuture<OidcProviderConfig> updateOidcProviderConfigAsync(\n+      @NonNull OidcProviderConfig.UpdateRequest request) {\n+    return updateOidcProviderConfigOp(request).callAsync(firebaseApp);\n+  }\n+\n+  private CallableOperation<OidcProviderConfig, FirebaseAuthException> updateOidcProviderConfigOp(\n+      final OidcProviderConfig.UpdateRequest request) {\n+    checkNotDestroyed();\n+    checkNotNull(request, \"Update request must not be null.\");\n+    checkArgument(!request.getProperties().isEmpty(),\n+        \"Update request must have at least one property set.\");\n+    final FirebaseUserManager userManager = getUserManager();\n+    return new CallableOperation<OidcProviderConfig, FirebaseAuthException>() {\n+      @Override\n+      protected OidcProviderConfig execute() throws FirebaseAuthException {\n+        return userManager.updateOidcProviderConfig(request);\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Gets the provider OIDC Auth config corresponding to the specified provider ID.\n+   *\n+   * @param providerId A provider ID string.\n+   * @return An {@link OidcProviderConfig} instance.\n+   * @throws IllegalArgumentException If the provider ID string is null or empty, or is not prefixed\n+   *     with 'oidc'.\n+   * @throws FirebaseAuthException If an error occurs while retrieving the provider config.\n+   */\n+  public OidcProviderConfig getOidcProviderConfig(@NonNull String providerId)\n+      throws FirebaseAuthException {\n+    return getOidcProviderConfigOp(providerId).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #getOidcProviderConfig(String)} but performs the operation asynchronously.\n+   * Page size will be limited to 100 provider configs.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5OTQxMA=="}, "originalCommit": {"oid": "e1e49e3501d879cb42eb755190be8ba07a749206"}, "originalPosition": 259}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDgwNDk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxOTowMDo0MFrOGiqxOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMjozODo0MVrOGjTQQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAwNTQ5Ng==", "bodyText": "auth provider", "url": "https://github.com/firebase/firebase-admin-java/pull/433#discussion_r439005496", "createdAt": "2020-06-11T19:00:40Z", "author": {"login": "kevinthecheung"}, "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "diffHunk": "@@ -945,6 +939,543 @@ protected String execute() throws FirebaseAuthException {\n     };\n   }\n \n+  /**\n+   * Creates a new OIDC Auth provider config with the attributes contained in the specified\n+   * {@link OidcProviderConfig.CreateRequest}.\n+   *\n+   * @param request A non-null {@link OidcProviderConfig.CreateRequest} instance.\n+   * @return An {@link OidcProviderConfig} instance corresponding to the newly created provider\n+   *     config.\n+   * @throws NullPointerException if the provided request is null.\n+   * @throws IllegalArgumentException If the provider ID string is null or empty, or is not\n+   *     prefixed with 'oidc.'.\n+   * @throws FirebaseAuthException if an error occurs while creating the provider config.\n+   */\n+  public OidcProviderConfig createOidcProviderConfig(\n+      @NonNull OidcProviderConfig.CreateRequest request) throws FirebaseAuthException {\n+    return createOidcProviderConfigOp(request).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #createOidcProviderConfig} but performs the operation asynchronously.\n+   *\n+   * @param request A non-null {@link OidcProviderConfig.CreateRequest} instance.\n+   * @return An {@code ApiFuture} which will complete successfully with a {@link OidcProviderConfig}\n+   *     instance corresponding to the newly created provider config. If an error occurs while\n+   *     creating the provider config, the future throws a {@link FirebaseAuthException}.\n+   * @throws NullPointerException if the provided request is null.\n+   * @throws IllegalArgumentException If the provider ID string is null or empty, or is not\n+   *     prefixed with 'oidc.'.\n+   */\n+  public ApiFuture<OidcProviderConfig> createOidcProviderConfigAsync(\n+      @NonNull OidcProviderConfig.CreateRequest request) {\n+    return createOidcProviderConfigOp(request).callAsync(firebaseApp);\n+  }\n+\n+  private CallableOperation<OidcProviderConfig, FirebaseAuthException>\n+      createOidcProviderConfigOp(final OidcProviderConfig.CreateRequest request) {\n+    checkNotDestroyed();\n+    checkNotNull(request, \"Create request must not be null.\");\n+    OidcProviderConfig.checkOidcProviderId(request.getProviderId());\n+    final FirebaseUserManager userManager = getUserManager();\n+    return new CallableOperation<OidcProviderConfig, FirebaseAuthException>() {\n+      @Override\n+      protected OidcProviderConfig execute() throws FirebaseAuthException {\n+        return userManager.createOidcProviderConfig(request);\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Updates an existing OIDC Auth provider config with the attributes contained in the specified\n+   * {@link OidcProviderConfig.UpdateRequest}.\n+   *\n+   * @param request A non-null {@link OidcProviderConfig.UpdateRequest} instance.\n+   * @return A {@link OidcProviderConfig} instance corresponding to the updated provider config.\n+   * @throws NullPointerException if the provided update request is null.\n+   * @throws IllegalArgumentException If the provided update request is invalid.\n+   * @throws FirebaseAuthException if an error occurs while updating the provider config.\n+   */\n+  public OidcProviderConfig updateOidcProviderConfig(\n+      @NonNull OidcProviderConfig.UpdateRequest request) throws FirebaseAuthException {\n+    return updateOidcProviderConfigOp(request).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #updateOidcProviderConfig} but performs the operation asynchronously.\n+   *\n+   * @param request A non-null {@link OidcProviderConfig.UpdateRequest} instance.\n+   * @return An {@code ApiFuture} which will complete successfully with a {@link OidcProviderConfig}\n+   *     instance corresponding to the updated provider config. If an error occurs while updating\n+   *     the provider config, the future throws a {@link FirebaseAuthException}.\n+   * @throws NullPointerException if the provided update request is null.\n+   * @throws IllegalArgumentException If the provided update request is invalid.\n+   */\n+  public ApiFuture<OidcProviderConfig> updateOidcProviderConfigAsync(\n+      @NonNull OidcProviderConfig.UpdateRequest request) {\n+    return updateOidcProviderConfigOp(request).callAsync(firebaseApp);\n+  }\n+\n+  private CallableOperation<OidcProviderConfig, FirebaseAuthException> updateOidcProviderConfigOp(\n+      final OidcProviderConfig.UpdateRequest request) {\n+    checkNotDestroyed();\n+    checkNotNull(request, \"Update request must not be null.\");\n+    checkArgument(!request.getProperties().isEmpty(),\n+        \"Update request must have at least one property set.\");\n+    final FirebaseUserManager userManager = getUserManager();\n+    return new CallableOperation<OidcProviderConfig, FirebaseAuthException>() {\n+      @Override\n+      protected OidcProviderConfig execute() throws FirebaseAuthException {\n+        return userManager.updateOidcProviderConfig(request);\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Gets the provider OIDC Auth config corresponding to the specified provider ID.\n+   *\n+   * @param providerId A provider ID string.\n+   * @return An {@link OidcProviderConfig} instance.\n+   * @throws IllegalArgumentException If the provider ID string is null or empty, or is not prefixed\n+   *     with 'oidc'.\n+   * @throws FirebaseAuthException If an error occurs while retrieving the provider config.\n+   */\n+  public OidcProviderConfig getOidcProviderConfig(@NonNull String providerId)\n+      throws FirebaseAuthException {\n+    return getOidcProviderConfigOp(providerId).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #getOidcProviderConfig(String)} but performs the operation asynchronously.\n+   * Page size will be limited to 100 provider configs.\n+   *\n+   * @param providerId A provider ID string.\n+   * @return An {@code ApiFuture} which will complete successfully with an\n+   *     {@link OidcProviderConfig} instance. If an error occurs while retrieving the provider\n+   *     config or if the specified provider ID does not exist, the future throws a\n+   *     {@link FirebaseAuthException}.\n+   * @throws IllegalArgumentException If the provider ID string is null or empty, or is not\n+   *     prefixed with 'oidc.'.\n+   */\n+  public ApiFuture<OidcProviderConfig> getOidcProviderConfigAsync(@NonNull String providerId) {\n+    return getOidcProviderConfigOp(providerId).callAsync(firebaseApp);\n+  }\n+\n+  private CallableOperation<OidcProviderConfig, FirebaseAuthException>\n+      getOidcProviderConfigOp(final String providerId) {\n+    checkNotDestroyed();\n+    OidcProviderConfig.checkOidcProviderId(providerId);\n+    final FirebaseUserManager userManager = getUserManager();\n+    return new CallableOperation<OidcProviderConfig, FirebaseAuthException>() {\n+      @Override\n+      protected OidcProviderConfig execute() throws FirebaseAuthException {\n+        return userManager.getOidcProviderConfig(providerId);\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Gets a page of OIDC Auth provider configs starting from the specified {@code pageToken}. Page\n+   * size will be limited to 100 provider configs.\n+   *\n+   * @param pageToken A non-empty page token string, or null to retrieve the first page of provider\n+   *     configs.\n+   * @return A {@link ListProviderConfigsPage} instance.\n+   * @throws IllegalArgumentException If the specified page token is empty\n+   * @throws FirebaseAuthException If an error occurs while retrieving provider config data.\n+   */\n+  public ListProviderConfigsPage<OidcProviderConfig> listOidcProviderConfigs(\n+        @Nullable String pageToken) throws FirebaseAuthException {\n+    int maxResults = FirebaseUserManager.MAX_LIST_PROVIDER_CONFIGS_RESULTS;\n+    return listOidcProviderConfigsOp(pageToken, maxResults).call();\n+  }\n+\n+  /**\n+   * Gets a page of OIDC Auth provider configs starting from the specified {@code pageToken}.\n+   *\n+   * @param pageToken A non-empty page token string, or null to retrieve the first page of provider\n+   *     configs.\n+   * @param maxResults Maximum number of provider configs to include in the returned page. This may\n+   *     not exceed 100.\n+   * @return A {@link ListProviderConfigsPage} instance.\n+   * @throws IllegalArgumentException If the specified page token is empty, or max results value is\n+   *     invalid.\n+   * @throws FirebaseAuthException If an error occurs while retrieving provider config data.\n+   */\n+  public ListProviderConfigsPage<OidcProviderConfig> listOidcProviderConfigs(\n+        @Nullable String pageToken, int maxResults) throws FirebaseAuthException {\n+    return listOidcProviderConfigsOp(pageToken, maxResults).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #listOidcProviderConfigs(String)} but performs the operation asynchronously.\n+   * Page size will be limited to 100 provider configs.\n+   *\n+   * @param pageToken A non-empty page token string, or null to retrieve the first page of provider\n+   *     configs.\n+   * @return An {@code ApiFuture} which will complete successfully with a\n+   *     {@link ListProviderConfigsPage} instance. If an error occurs while retrieving provider\n+   *     config data, the future throws an exception.\n+   * @throws IllegalArgumentException If the specified page token is empty.\n+   */\n+  public ApiFuture<ListProviderConfigsPage<OidcProviderConfig>> listOidcProviderConfigsAsync(\n+      @Nullable String pageToken) {\n+    int maxResults = FirebaseUserManager.MAX_LIST_PROVIDER_CONFIGS_RESULTS;\n+    return listOidcProviderConfigsAsync(pageToken, maxResults);\n+  }\n+\n+  /**\n+   * Similar to {@link #listOidcProviderConfigs(String, int)} but performs the operation\n+   * asynchronously.\n+   *\n+   * @param pageToken A non-empty page token string, or null to retrieve the first page of provider\n+   *     configs.\n+   * @param maxResults Maximum number of provider configs to include in the returned page. This may\n+   *     not exceed 100.\n+   * @return An {@code ApiFuture} which will complete successfully with a\n+   *     {@link ListProviderConfigsPage} instance. If an error occurs while retrieving provider\n+   *     config data, the future throws an exception.\n+   * @throws IllegalArgumentException If the specified page token is empty, or max results value is\n+   *     invalid.\n+   */\n+  public ApiFuture<ListProviderConfigsPage<OidcProviderConfig>> listOidcProviderConfigsAsync(\n+      @Nullable String pageToken,\n+      int maxResults) {\n+    return listOidcProviderConfigsOp(pageToken, maxResults).callAsync(firebaseApp);\n+  }\n+\n+  private CallableOperation<ListProviderConfigsPage<OidcProviderConfig>, FirebaseAuthException>\n+      listOidcProviderConfigsOp(@Nullable final String pageToken, final int maxResults) {\n+    checkNotDestroyed();\n+    final FirebaseUserManager userManager = getUserManager();\n+    final DefaultOidcProviderConfigSource source = new DefaultOidcProviderConfigSource(userManager);\n+    final ListProviderConfigsPage.Factory<OidcProviderConfig> factory =\n+        new ListProviderConfigsPage.Factory<OidcProviderConfig>(source, maxResults, pageToken);\n+    return\n+      new CallableOperation<ListProviderConfigsPage<OidcProviderConfig>, FirebaseAuthException>() {\n+        @Override\n+        protected ListProviderConfigsPage<OidcProviderConfig> execute()\n+            throws FirebaseAuthException {\n+          return factory.create();\n+        }\n+    };\n+  }\n+\n+  /**\n+   * Deletes the OIDC Auth provider config identified by the specified provider ID.\n+   *\n+   * @param providerId A provider ID string.\n+   * @throws IllegalArgumentException If the provider ID string is null or empty, or is not prefixed\n+   *     with 'oidc'.\n+   * @throws FirebaseAuthException If an error occurs while deleting the provider config.\n+   */\n+  public void deleteOidcProviderConfig(@NonNull String providerId) throws FirebaseAuthException {\n+    deleteOidcProviderConfigOp(providerId).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #deleteOidcProviderConfig} but performs the operation asynchronously.\n+   *\n+   * @param providerId A provider ID string.\n+   * @return An {@code ApiFuture} which will complete successfully when the specified provider\n+   *     config has been deleted. If an error occurs while deleting the provider config, the future\n+   *     throws a {@link FirebaseAuthException}.\n+   * @throws IllegalArgumentException If the provider ID string is null or empty, or is not prefixed\n+   *     with \"oidc.\".\n+   */\n+  public ApiFuture<Void> deleteOidcProviderConfigAsync(String providerId) {\n+    return deleteOidcProviderConfigOp(providerId).callAsync(firebaseApp);\n+  }\n+\n+  private CallableOperation<Void, FirebaseAuthException> deleteOidcProviderConfigOp(\n+      final String providerId) {\n+    checkNotDestroyed();\n+    OidcProviderConfig.checkOidcProviderId(providerId);\n+    final FirebaseUserManager userManager = getUserManager();\n+    return new CallableOperation<Void, FirebaseAuthException>() {\n+      @Override\n+      protected Void execute() throws FirebaseAuthException {\n+        userManager.deleteOidcProviderConfig(providerId);\n+        return null;\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Creates a new SAML Auth provider config with the attributes contained in the specified\n+   * {@link SamlProviderConfig.CreateRequest}.\n+   *\n+   * @param request A non-null {@link SamlProviderConfig.CreateRequest} instance.\n+   * @return An {@link SamlProviderConfig} instance corresponding to the newly created provider\n+   *     config.\n+   * @throws NullPointerException if the provided request is null.\n+   * @throws IllegalArgumentException If the provider ID string is null or empty, or is not prefixed\n+   *     with 'saml'.\n+   * @throws FirebaseAuthException if an error occurs while creating the provider config.\n+   */\n+  public SamlProviderConfig createSamlProviderConfig(\n+      @NonNull SamlProviderConfig.CreateRequest request) throws FirebaseAuthException {\n+    return createSamlProviderConfigOp(request).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #createSamlProviderConfig} but performs the operation asynchronously.\n+   *\n+   * @param request A non-null {@link SamlProviderConfig.CreateRequest} instance.\n+   * @return An {@code ApiFuture} which will complete successfully with a {@link SamlProviderConfig}\n+   *     instance corresponding to the newly created provider config. If an error occurs while\n+   *     creating the provider config, the future throws a {@link FirebaseAuthException}.\n+   * @throws NullPointerException if the provided request is null.\n+   * @throws IllegalArgumentException If the provider ID string is null or empty, or is not prefixed\n+   *     with 'saml'.\n+   */\n+  public ApiFuture<SamlProviderConfig> createSamlProviderConfigAsync(\n+      @NonNull SamlProviderConfig.CreateRequest request) {\n+    return createSamlProviderConfigOp(request).callAsync(firebaseApp);\n+  }\n+\n+  private CallableOperation<SamlProviderConfig, FirebaseAuthException>\n+      createSamlProviderConfigOp(final SamlProviderConfig.CreateRequest request) {\n+    checkNotDestroyed();\n+    checkNotNull(request, \"Create request must not be null.\");\n+    SamlProviderConfig.checkSamlProviderId(request.getProviderId());\n+    final FirebaseUserManager userManager = getUserManager();\n+    return new CallableOperation<SamlProviderConfig, FirebaseAuthException>() {\n+      @Override\n+      protected SamlProviderConfig execute() throws FirebaseAuthException {\n+        return userManager.createSamlProviderConfig(request);\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Updates an existing SAML Auth provider config with the attributes contained in the specified\n+   * {@link SamlProviderConfig.UpdateRequest}.\n+   *\n+   * @param request A non-null {@link SamlProviderConfig.UpdateRequest} instance.\n+   * @return A {@link SamlProviderConfig} instance corresponding to the updated provider config.\n+   * @throws NullPointerException if the provided update request is null.\n+   * @throws IllegalArgumentException If the provided update request is invalid.\n+   * @throws FirebaseAuthException if an error occurs while updating the provider config.\n+   */\n+  public SamlProviderConfig updateSamlProviderConfig(\n+      @NonNull SamlProviderConfig.UpdateRequest request) throws FirebaseAuthException {\n+    return updateSamlProviderConfigOp(request).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #updateSamlProviderConfig} but performs the operation asynchronously.\n+   *\n+   * @param request A non-null {@link SamlProviderConfig.UpdateRequest} instance.\n+   * @return An {@code ApiFuture} which will complete successfully with a {@link SamlProviderConfig}\n+   *     instance corresponding to the updated provider config. If an error occurs while updating\n+   *     the provider config, the future throws a {@link FirebaseAuthException}.\n+   * @throws NullPointerException if the provided update request is null.\n+   * @throws IllegalArgumentException If the provided update request is invalid.\n+   */\n+  public ApiFuture<SamlProviderConfig> updateSamlProviderConfigAsync(\n+      @NonNull SamlProviderConfig.UpdateRequest request) {\n+    return updateSamlProviderConfigOp(request).callAsync(firebaseApp);\n+  }\n+\n+  private CallableOperation<SamlProviderConfig, FirebaseAuthException> updateSamlProviderConfigOp(\n+      final SamlProviderConfig.UpdateRequest request) {\n+    checkNotDestroyed();\n+    checkNotNull(request, \"Update request must not be null.\");\n+    checkArgument(!request.getProperties().isEmpty(),\n+        \"Update request must have at least one property set.\");\n+    final FirebaseUserManager userManager = getUserManager();\n+    return new CallableOperation<SamlProviderConfig, FirebaseAuthException>() {\n+      @Override\n+      protected SamlProviderConfig execute() throws FirebaseAuthException {\n+        return userManager.updateSamlProviderConfig(request);\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Gets the SAML provider Auth config corresponding to the specified provider ID.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1e49e3501d879cb42eb755190be8ba07a749206"}, "originalPosition": 506}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY2ODgwMQ==", "bodyText": "Done.", "url": "https://github.com/firebase/firebase-admin-java/pull/433#discussion_r439668801", "createdAt": "2020-06-12T22:38:41Z", "author": {"login": "micahstairs"}, "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "diffHunk": "@@ -945,6 +939,543 @@ protected String execute() throws FirebaseAuthException {\n     };\n   }\n \n+  /**\n+   * Creates a new OIDC Auth provider config with the attributes contained in the specified\n+   * {@link OidcProviderConfig.CreateRequest}.\n+   *\n+   * @param request A non-null {@link OidcProviderConfig.CreateRequest} instance.\n+   * @return An {@link OidcProviderConfig} instance corresponding to the newly created provider\n+   *     config.\n+   * @throws NullPointerException if the provided request is null.\n+   * @throws IllegalArgumentException If the provider ID string is null or empty, or is not\n+   *     prefixed with 'oidc.'.\n+   * @throws FirebaseAuthException if an error occurs while creating the provider config.\n+   */\n+  public OidcProviderConfig createOidcProviderConfig(\n+      @NonNull OidcProviderConfig.CreateRequest request) throws FirebaseAuthException {\n+    return createOidcProviderConfigOp(request).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #createOidcProviderConfig} but performs the operation asynchronously.\n+   *\n+   * @param request A non-null {@link OidcProviderConfig.CreateRequest} instance.\n+   * @return An {@code ApiFuture} which will complete successfully with a {@link OidcProviderConfig}\n+   *     instance corresponding to the newly created provider config. If an error occurs while\n+   *     creating the provider config, the future throws a {@link FirebaseAuthException}.\n+   * @throws NullPointerException if the provided request is null.\n+   * @throws IllegalArgumentException If the provider ID string is null or empty, or is not\n+   *     prefixed with 'oidc.'.\n+   */\n+  public ApiFuture<OidcProviderConfig> createOidcProviderConfigAsync(\n+      @NonNull OidcProviderConfig.CreateRequest request) {\n+    return createOidcProviderConfigOp(request).callAsync(firebaseApp);\n+  }\n+\n+  private CallableOperation<OidcProviderConfig, FirebaseAuthException>\n+      createOidcProviderConfigOp(final OidcProviderConfig.CreateRequest request) {\n+    checkNotDestroyed();\n+    checkNotNull(request, \"Create request must not be null.\");\n+    OidcProviderConfig.checkOidcProviderId(request.getProviderId());\n+    final FirebaseUserManager userManager = getUserManager();\n+    return new CallableOperation<OidcProviderConfig, FirebaseAuthException>() {\n+      @Override\n+      protected OidcProviderConfig execute() throws FirebaseAuthException {\n+        return userManager.createOidcProviderConfig(request);\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Updates an existing OIDC Auth provider config with the attributes contained in the specified\n+   * {@link OidcProviderConfig.UpdateRequest}.\n+   *\n+   * @param request A non-null {@link OidcProviderConfig.UpdateRequest} instance.\n+   * @return A {@link OidcProviderConfig} instance corresponding to the updated provider config.\n+   * @throws NullPointerException if the provided update request is null.\n+   * @throws IllegalArgumentException If the provided update request is invalid.\n+   * @throws FirebaseAuthException if an error occurs while updating the provider config.\n+   */\n+  public OidcProviderConfig updateOidcProviderConfig(\n+      @NonNull OidcProviderConfig.UpdateRequest request) throws FirebaseAuthException {\n+    return updateOidcProviderConfigOp(request).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #updateOidcProviderConfig} but performs the operation asynchronously.\n+   *\n+   * @param request A non-null {@link OidcProviderConfig.UpdateRequest} instance.\n+   * @return An {@code ApiFuture} which will complete successfully with a {@link OidcProviderConfig}\n+   *     instance corresponding to the updated provider config. If an error occurs while updating\n+   *     the provider config, the future throws a {@link FirebaseAuthException}.\n+   * @throws NullPointerException if the provided update request is null.\n+   * @throws IllegalArgumentException If the provided update request is invalid.\n+   */\n+  public ApiFuture<OidcProviderConfig> updateOidcProviderConfigAsync(\n+      @NonNull OidcProviderConfig.UpdateRequest request) {\n+    return updateOidcProviderConfigOp(request).callAsync(firebaseApp);\n+  }\n+\n+  private CallableOperation<OidcProviderConfig, FirebaseAuthException> updateOidcProviderConfigOp(\n+      final OidcProviderConfig.UpdateRequest request) {\n+    checkNotDestroyed();\n+    checkNotNull(request, \"Update request must not be null.\");\n+    checkArgument(!request.getProperties().isEmpty(),\n+        \"Update request must have at least one property set.\");\n+    final FirebaseUserManager userManager = getUserManager();\n+    return new CallableOperation<OidcProviderConfig, FirebaseAuthException>() {\n+      @Override\n+      protected OidcProviderConfig execute() throws FirebaseAuthException {\n+        return userManager.updateOidcProviderConfig(request);\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Gets the provider OIDC Auth config corresponding to the specified provider ID.\n+   *\n+   * @param providerId A provider ID string.\n+   * @return An {@link OidcProviderConfig} instance.\n+   * @throws IllegalArgumentException If the provider ID string is null or empty, or is not prefixed\n+   *     with 'oidc'.\n+   * @throws FirebaseAuthException If an error occurs while retrieving the provider config.\n+   */\n+  public OidcProviderConfig getOidcProviderConfig(@NonNull String providerId)\n+      throws FirebaseAuthException {\n+    return getOidcProviderConfigOp(providerId).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #getOidcProviderConfig(String)} but performs the operation asynchronously.\n+   * Page size will be limited to 100 provider configs.\n+   *\n+   * @param providerId A provider ID string.\n+   * @return An {@code ApiFuture} which will complete successfully with an\n+   *     {@link OidcProviderConfig} instance. If an error occurs while retrieving the provider\n+   *     config or if the specified provider ID does not exist, the future throws a\n+   *     {@link FirebaseAuthException}.\n+   * @throws IllegalArgumentException If the provider ID string is null or empty, or is not\n+   *     prefixed with 'oidc.'.\n+   */\n+  public ApiFuture<OidcProviderConfig> getOidcProviderConfigAsync(@NonNull String providerId) {\n+    return getOidcProviderConfigOp(providerId).callAsync(firebaseApp);\n+  }\n+\n+  private CallableOperation<OidcProviderConfig, FirebaseAuthException>\n+      getOidcProviderConfigOp(final String providerId) {\n+    checkNotDestroyed();\n+    OidcProviderConfig.checkOidcProviderId(providerId);\n+    final FirebaseUserManager userManager = getUserManager();\n+    return new CallableOperation<OidcProviderConfig, FirebaseAuthException>() {\n+      @Override\n+      protected OidcProviderConfig execute() throws FirebaseAuthException {\n+        return userManager.getOidcProviderConfig(providerId);\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Gets a page of OIDC Auth provider configs starting from the specified {@code pageToken}. Page\n+   * size will be limited to 100 provider configs.\n+   *\n+   * @param pageToken A non-empty page token string, or null to retrieve the first page of provider\n+   *     configs.\n+   * @return A {@link ListProviderConfigsPage} instance.\n+   * @throws IllegalArgumentException If the specified page token is empty\n+   * @throws FirebaseAuthException If an error occurs while retrieving provider config data.\n+   */\n+  public ListProviderConfigsPage<OidcProviderConfig> listOidcProviderConfigs(\n+        @Nullable String pageToken) throws FirebaseAuthException {\n+    int maxResults = FirebaseUserManager.MAX_LIST_PROVIDER_CONFIGS_RESULTS;\n+    return listOidcProviderConfigsOp(pageToken, maxResults).call();\n+  }\n+\n+  /**\n+   * Gets a page of OIDC Auth provider configs starting from the specified {@code pageToken}.\n+   *\n+   * @param pageToken A non-empty page token string, or null to retrieve the first page of provider\n+   *     configs.\n+   * @param maxResults Maximum number of provider configs to include in the returned page. This may\n+   *     not exceed 100.\n+   * @return A {@link ListProviderConfigsPage} instance.\n+   * @throws IllegalArgumentException If the specified page token is empty, or max results value is\n+   *     invalid.\n+   * @throws FirebaseAuthException If an error occurs while retrieving provider config data.\n+   */\n+  public ListProviderConfigsPage<OidcProviderConfig> listOidcProviderConfigs(\n+        @Nullable String pageToken, int maxResults) throws FirebaseAuthException {\n+    return listOidcProviderConfigsOp(pageToken, maxResults).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #listOidcProviderConfigs(String)} but performs the operation asynchronously.\n+   * Page size will be limited to 100 provider configs.\n+   *\n+   * @param pageToken A non-empty page token string, or null to retrieve the first page of provider\n+   *     configs.\n+   * @return An {@code ApiFuture} which will complete successfully with a\n+   *     {@link ListProviderConfigsPage} instance. If an error occurs while retrieving provider\n+   *     config data, the future throws an exception.\n+   * @throws IllegalArgumentException If the specified page token is empty.\n+   */\n+  public ApiFuture<ListProviderConfigsPage<OidcProviderConfig>> listOidcProviderConfigsAsync(\n+      @Nullable String pageToken) {\n+    int maxResults = FirebaseUserManager.MAX_LIST_PROVIDER_CONFIGS_RESULTS;\n+    return listOidcProviderConfigsAsync(pageToken, maxResults);\n+  }\n+\n+  /**\n+   * Similar to {@link #listOidcProviderConfigs(String, int)} but performs the operation\n+   * asynchronously.\n+   *\n+   * @param pageToken A non-empty page token string, or null to retrieve the first page of provider\n+   *     configs.\n+   * @param maxResults Maximum number of provider configs to include in the returned page. This may\n+   *     not exceed 100.\n+   * @return An {@code ApiFuture} which will complete successfully with a\n+   *     {@link ListProviderConfigsPage} instance. If an error occurs while retrieving provider\n+   *     config data, the future throws an exception.\n+   * @throws IllegalArgumentException If the specified page token is empty, or max results value is\n+   *     invalid.\n+   */\n+  public ApiFuture<ListProviderConfigsPage<OidcProviderConfig>> listOidcProviderConfigsAsync(\n+      @Nullable String pageToken,\n+      int maxResults) {\n+    return listOidcProviderConfigsOp(pageToken, maxResults).callAsync(firebaseApp);\n+  }\n+\n+  private CallableOperation<ListProviderConfigsPage<OidcProviderConfig>, FirebaseAuthException>\n+      listOidcProviderConfigsOp(@Nullable final String pageToken, final int maxResults) {\n+    checkNotDestroyed();\n+    final FirebaseUserManager userManager = getUserManager();\n+    final DefaultOidcProviderConfigSource source = new DefaultOidcProviderConfigSource(userManager);\n+    final ListProviderConfigsPage.Factory<OidcProviderConfig> factory =\n+        new ListProviderConfigsPage.Factory<OidcProviderConfig>(source, maxResults, pageToken);\n+    return\n+      new CallableOperation<ListProviderConfigsPage<OidcProviderConfig>, FirebaseAuthException>() {\n+        @Override\n+        protected ListProviderConfigsPage<OidcProviderConfig> execute()\n+            throws FirebaseAuthException {\n+          return factory.create();\n+        }\n+    };\n+  }\n+\n+  /**\n+   * Deletes the OIDC Auth provider config identified by the specified provider ID.\n+   *\n+   * @param providerId A provider ID string.\n+   * @throws IllegalArgumentException If the provider ID string is null or empty, or is not prefixed\n+   *     with 'oidc'.\n+   * @throws FirebaseAuthException If an error occurs while deleting the provider config.\n+   */\n+  public void deleteOidcProviderConfig(@NonNull String providerId) throws FirebaseAuthException {\n+    deleteOidcProviderConfigOp(providerId).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #deleteOidcProviderConfig} but performs the operation asynchronously.\n+   *\n+   * @param providerId A provider ID string.\n+   * @return An {@code ApiFuture} which will complete successfully when the specified provider\n+   *     config has been deleted. If an error occurs while deleting the provider config, the future\n+   *     throws a {@link FirebaseAuthException}.\n+   * @throws IllegalArgumentException If the provider ID string is null or empty, or is not prefixed\n+   *     with \"oidc.\".\n+   */\n+  public ApiFuture<Void> deleteOidcProviderConfigAsync(String providerId) {\n+    return deleteOidcProviderConfigOp(providerId).callAsync(firebaseApp);\n+  }\n+\n+  private CallableOperation<Void, FirebaseAuthException> deleteOidcProviderConfigOp(\n+      final String providerId) {\n+    checkNotDestroyed();\n+    OidcProviderConfig.checkOidcProviderId(providerId);\n+    final FirebaseUserManager userManager = getUserManager();\n+    return new CallableOperation<Void, FirebaseAuthException>() {\n+      @Override\n+      protected Void execute() throws FirebaseAuthException {\n+        userManager.deleteOidcProviderConfig(providerId);\n+        return null;\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Creates a new SAML Auth provider config with the attributes contained in the specified\n+   * {@link SamlProviderConfig.CreateRequest}.\n+   *\n+   * @param request A non-null {@link SamlProviderConfig.CreateRequest} instance.\n+   * @return An {@link SamlProviderConfig} instance corresponding to the newly created provider\n+   *     config.\n+   * @throws NullPointerException if the provided request is null.\n+   * @throws IllegalArgumentException If the provider ID string is null or empty, or is not prefixed\n+   *     with 'saml'.\n+   * @throws FirebaseAuthException if an error occurs while creating the provider config.\n+   */\n+  public SamlProviderConfig createSamlProviderConfig(\n+      @NonNull SamlProviderConfig.CreateRequest request) throws FirebaseAuthException {\n+    return createSamlProviderConfigOp(request).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #createSamlProviderConfig} but performs the operation asynchronously.\n+   *\n+   * @param request A non-null {@link SamlProviderConfig.CreateRequest} instance.\n+   * @return An {@code ApiFuture} which will complete successfully with a {@link SamlProviderConfig}\n+   *     instance corresponding to the newly created provider config. If an error occurs while\n+   *     creating the provider config, the future throws a {@link FirebaseAuthException}.\n+   * @throws NullPointerException if the provided request is null.\n+   * @throws IllegalArgumentException If the provider ID string is null or empty, or is not prefixed\n+   *     with 'saml'.\n+   */\n+  public ApiFuture<SamlProviderConfig> createSamlProviderConfigAsync(\n+      @NonNull SamlProviderConfig.CreateRequest request) {\n+    return createSamlProviderConfigOp(request).callAsync(firebaseApp);\n+  }\n+\n+  private CallableOperation<SamlProviderConfig, FirebaseAuthException>\n+      createSamlProviderConfigOp(final SamlProviderConfig.CreateRequest request) {\n+    checkNotDestroyed();\n+    checkNotNull(request, \"Create request must not be null.\");\n+    SamlProviderConfig.checkSamlProviderId(request.getProviderId());\n+    final FirebaseUserManager userManager = getUserManager();\n+    return new CallableOperation<SamlProviderConfig, FirebaseAuthException>() {\n+      @Override\n+      protected SamlProviderConfig execute() throws FirebaseAuthException {\n+        return userManager.createSamlProviderConfig(request);\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Updates an existing SAML Auth provider config with the attributes contained in the specified\n+   * {@link SamlProviderConfig.UpdateRequest}.\n+   *\n+   * @param request A non-null {@link SamlProviderConfig.UpdateRequest} instance.\n+   * @return A {@link SamlProviderConfig} instance corresponding to the updated provider config.\n+   * @throws NullPointerException if the provided update request is null.\n+   * @throws IllegalArgumentException If the provided update request is invalid.\n+   * @throws FirebaseAuthException if an error occurs while updating the provider config.\n+   */\n+  public SamlProviderConfig updateSamlProviderConfig(\n+      @NonNull SamlProviderConfig.UpdateRequest request) throws FirebaseAuthException {\n+    return updateSamlProviderConfigOp(request).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #updateSamlProviderConfig} but performs the operation asynchronously.\n+   *\n+   * @param request A non-null {@link SamlProviderConfig.UpdateRequest} instance.\n+   * @return An {@code ApiFuture} which will complete successfully with a {@link SamlProviderConfig}\n+   *     instance corresponding to the updated provider config. If an error occurs while updating\n+   *     the provider config, the future throws a {@link FirebaseAuthException}.\n+   * @throws NullPointerException if the provided update request is null.\n+   * @throws IllegalArgumentException If the provided update request is invalid.\n+   */\n+  public ApiFuture<SamlProviderConfig> updateSamlProviderConfigAsync(\n+      @NonNull SamlProviderConfig.UpdateRequest request) {\n+    return updateSamlProviderConfigOp(request).callAsync(firebaseApp);\n+  }\n+\n+  private CallableOperation<SamlProviderConfig, FirebaseAuthException> updateSamlProviderConfigOp(\n+      final SamlProviderConfig.UpdateRequest request) {\n+    checkNotDestroyed();\n+    checkNotNull(request, \"Update request must not be null.\");\n+    checkArgument(!request.getProperties().isEmpty(),\n+        \"Update request must have at least one property set.\");\n+    final FirebaseUserManager userManager = getUserManager();\n+    return new CallableOperation<SamlProviderConfig, FirebaseAuthException>() {\n+      @Override\n+      protected SamlProviderConfig execute() throws FirebaseAuthException {\n+        return userManager.updateSamlProviderConfig(request);\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Gets the SAML provider Auth config corresponding to the specified provider ID.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAwNTQ5Ng=="}, "originalCommit": {"oid": "e1e49e3501d879cb42eb755190be8ba07a749206"}, "originalPosition": 506}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDgxODEwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/firebase/auth/OidcProviderConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxOTowNTowN1rOGiq55A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMjozODo1MlrOGjTQZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAwNzcxNg==", "bodyText": "to save the updated config", "url": "https://github.com/firebase/firebase-admin-java/pull/433#discussion_r439007716", "createdAt": "2020-06-11T19:05:07Z", "author": {"login": "kevinthecheung"}, "path": "src/main/java/com/google/firebase/auth/OidcProviderConfig.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.api.client.util.Key;\n+import com.google.common.base.Strings;\n+import com.google.firebase.auth.ProviderConfig.AbstractCreateRequest;\n+import com.google.firebase.auth.ProviderConfig.AbstractUpdateRequest;\n+\n+/**\n+ * Contains metadata associated with an OIDC Auth provider.\n+ *\n+ * <p>Instances of this class are immutable and thread safe.\n+ */\n+public final class OidcProviderConfig extends ProviderConfig {\n+\n+  @Key(\"clientId\")\n+  private String clientId;\n+\n+  @Key(\"issuer\")\n+  private String issuer;\n+\n+  public String getClientId() {\n+    return clientId;\n+  }\n+\n+  public String getIssuer() {\n+    return issuer;\n+  }\n+\n+  /**\n+   * Returns a new {@link UpdateRequest}, which can be used to update the attributes of this\n+   * provider config.\n+   *\n+   * @return A non-null {@link UpdateRequest} instance.\n+   */\n+  public UpdateRequest updateRequest() {\n+    return new UpdateRequest(getProviderId());\n+  }\n+\n+  static void checkOidcProviderId(String providerId) {\n+    checkArgument(!Strings.isNullOrEmpty(providerId), \"Provider ID must not be null or empty.\");\n+    checkArgument(providerId.startsWith(\"oidc.\"),\n+        \"Invalid OIDC provider ID (must be prefixed with 'oidc.'): \" + providerId);\n+  }\n+\n+  /**\n+   * A specification class for creating a new OIDC Auth provider.\n+   *\n+   * <p>Set the initial attributes of the new provider by calling various setter methods available\n+   * in this class.\n+   */\n+  public static final class CreateRequest extends AbstractCreateRequest<CreateRequest> {\n+\n+    /**\n+     * Creates a new {@link CreateRequest}, which can be used to create a new OIDC Auth provider.\n+     *\n+     * <p>The returned object should be passed to\n+     * {@link AbstractFirebaseAuth#createOidcProviderConfig(CreateRequest)} to register the provider\n+     * information persistently.\n+     */\n+    public CreateRequest() { }\n+\n+    /**\n+     * Sets the ID for the new provider.\n+     *\n+     * @param providerId A non-null, non-empty provider ID string.\n+     * @throws IllegalArgumentException If the provider ID is null or empty, or is not prefixed with\n+     *     'oidc.'.\n+     */\n+    @Override\n+    public CreateRequest setProviderId(String providerId) {\n+      checkOidcProviderId(providerId);\n+      return super.setProviderId(providerId);\n+    }\n+\n+    /**\n+     * Sets the client ID for the new provider.\n+     *\n+     * @param clientId A non-null, non-empty client ID string.\n+     * @throws IllegalArgumentException If the client ID is null or empty.\n+     */\n+    public CreateRequest setClientId(String clientId) {\n+      checkArgument(!Strings.isNullOrEmpty(clientId), \"Client ID must not be null or empty.\");\n+      properties.put(\"clientId\", clientId);\n+      return this;\n+    }\n+\n+    /**\n+     * Sets the issuer for the new provider.\n+     *\n+     * @param issuer A non-null, non-empty issuer URL string.\n+     * @throws IllegalArgumentException If the issuer URL is null or empty, or if the format is\n+     *     invalid.\n+     */\n+    public CreateRequest setIssuer(String issuer) {\n+      checkArgument(!Strings.isNullOrEmpty(issuer), \"Issuer must not be null or empty.\");\n+      assertValidUrl(issuer);\n+      properties.put(\"issuer\", issuer);\n+      return this;\n+    }\n+\n+    CreateRequest getThis() {\n+      return this;\n+    }\n+  }\n+\n+  /**\n+   * A specification class for updating an existing OIDC Auth provider.\n+   *\n+   * <p>An instance of this class can be obtained via a {@link OidcProviderConfig} object, or from\n+   * a provider ID string. Specify the changes to be made to the provider config by calling the\n+   * various setter methods available in this class.\n+   */\n+  public static final class UpdateRequest extends AbstractUpdateRequest<UpdateRequest> {\n+\n+    /**\n+     * Creates a new {@link UpdateRequest}, which can be used to updates an existing OIDC Auth\n+     * provider.\n+     *\n+     * <p>The returned object should be passed to\n+     * {@link AbstractFirebaseAuth#updateOidcProviderConfig(CreateRequest)} to update the provider", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1e49e3501d879cb42eb755190be8ba07a749206"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY2ODgzOA==", "bodyText": "Done.", "url": "https://github.com/firebase/firebase-admin-java/pull/433#discussion_r439668838", "createdAt": "2020-06-12T22:38:52Z", "author": {"login": "micahstairs"}, "path": "src/main/java/com/google/firebase/auth/OidcProviderConfig.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.api.client.util.Key;\n+import com.google.common.base.Strings;\n+import com.google.firebase.auth.ProviderConfig.AbstractCreateRequest;\n+import com.google.firebase.auth.ProviderConfig.AbstractUpdateRequest;\n+\n+/**\n+ * Contains metadata associated with an OIDC Auth provider.\n+ *\n+ * <p>Instances of this class are immutable and thread safe.\n+ */\n+public final class OidcProviderConfig extends ProviderConfig {\n+\n+  @Key(\"clientId\")\n+  private String clientId;\n+\n+  @Key(\"issuer\")\n+  private String issuer;\n+\n+  public String getClientId() {\n+    return clientId;\n+  }\n+\n+  public String getIssuer() {\n+    return issuer;\n+  }\n+\n+  /**\n+   * Returns a new {@link UpdateRequest}, which can be used to update the attributes of this\n+   * provider config.\n+   *\n+   * @return A non-null {@link UpdateRequest} instance.\n+   */\n+  public UpdateRequest updateRequest() {\n+    return new UpdateRequest(getProviderId());\n+  }\n+\n+  static void checkOidcProviderId(String providerId) {\n+    checkArgument(!Strings.isNullOrEmpty(providerId), \"Provider ID must not be null or empty.\");\n+    checkArgument(providerId.startsWith(\"oidc.\"),\n+        \"Invalid OIDC provider ID (must be prefixed with 'oidc.'): \" + providerId);\n+  }\n+\n+  /**\n+   * A specification class for creating a new OIDC Auth provider.\n+   *\n+   * <p>Set the initial attributes of the new provider by calling various setter methods available\n+   * in this class.\n+   */\n+  public static final class CreateRequest extends AbstractCreateRequest<CreateRequest> {\n+\n+    /**\n+     * Creates a new {@link CreateRequest}, which can be used to create a new OIDC Auth provider.\n+     *\n+     * <p>The returned object should be passed to\n+     * {@link AbstractFirebaseAuth#createOidcProviderConfig(CreateRequest)} to register the provider\n+     * information persistently.\n+     */\n+    public CreateRequest() { }\n+\n+    /**\n+     * Sets the ID for the new provider.\n+     *\n+     * @param providerId A non-null, non-empty provider ID string.\n+     * @throws IllegalArgumentException If the provider ID is null or empty, or is not prefixed with\n+     *     'oidc.'.\n+     */\n+    @Override\n+    public CreateRequest setProviderId(String providerId) {\n+      checkOidcProviderId(providerId);\n+      return super.setProviderId(providerId);\n+    }\n+\n+    /**\n+     * Sets the client ID for the new provider.\n+     *\n+     * @param clientId A non-null, non-empty client ID string.\n+     * @throws IllegalArgumentException If the client ID is null or empty.\n+     */\n+    public CreateRequest setClientId(String clientId) {\n+      checkArgument(!Strings.isNullOrEmpty(clientId), \"Client ID must not be null or empty.\");\n+      properties.put(\"clientId\", clientId);\n+      return this;\n+    }\n+\n+    /**\n+     * Sets the issuer for the new provider.\n+     *\n+     * @param issuer A non-null, non-empty issuer URL string.\n+     * @throws IllegalArgumentException If the issuer URL is null or empty, or if the format is\n+     *     invalid.\n+     */\n+    public CreateRequest setIssuer(String issuer) {\n+      checkArgument(!Strings.isNullOrEmpty(issuer), \"Issuer must not be null or empty.\");\n+      assertValidUrl(issuer);\n+      properties.put(\"issuer\", issuer);\n+      return this;\n+    }\n+\n+    CreateRequest getThis() {\n+      return this;\n+    }\n+  }\n+\n+  /**\n+   * A specification class for updating an existing OIDC Auth provider.\n+   *\n+   * <p>An instance of this class can be obtained via a {@link OidcProviderConfig} object, or from\n+   * a provider ID string. Specify the changes to be made to the provider config by calling the\n+   * various setter methods available in this class.\n+   */\n+  public static final class UpdateRequest extends AbstractUpdateRequest<UpdateRequest> {\n+\n+    /**\n+     * Creates a new {@link UpdateRequest}, which can be used to updates an existing OIDC Auth\n+     * provider.\n+     *\n+     * <p>The returned object should be passed to\n+     * {@link AbstractFirebaseAuth#updateOidcProviderConfig(CreateRequest)} to update the provider", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAwNzcxNg=="}, "originalCommit": {"oid": "e1e49e3501d879cb42eb755190be8ba07a749206"}, "originalPosition": 138}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1606, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}