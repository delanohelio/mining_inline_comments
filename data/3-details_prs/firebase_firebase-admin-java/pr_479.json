{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzMzgzMzQ2", "number": 479, "title": "Add parameters to Remote Config template", "bodyText": "Introduce Response Types and Public Types\nImplement toResponseType() and toPublicType()\nAdd parameters to RemoteConfigTemplate\nAdd unit tests\n\nRelated Issue: #446", "createdAt": "2020-09-25T21:37:03Z", "url": "https://github.com/firebase/firebase-admin-java/pull/479", "merged": true, "mergeCommit": {"oid": "150b121b2ca8187b119bb2e3c3807d8f50385f5e"}, "closed": true, "closedAt": "2020-10-02T18:35:41Z", "author": {"login": "lahirumaramba"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdNYXQ7gBqjM4MTYwMzA5MDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdOZMW7AH2gAyNDkzMzgzMzQ2OmE0ZThhNDI4OGEyYTU2MGRhYWM1MTY1ZTA5YjRhODE2YWQxY2I1ODU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9638f55a9d10ca98bc6eea23de4819822d2be3cb", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/9638f55a9d10ca98bc6eea23de4819822d2be3cb", "committedDate": "2020-09-25T21:35:35Z", "message": "Add parameters to template"}, "afterCommit": {"oid": "d6a9b6b31f47cbb9cb3a56b05978c68ebdfba05d", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/d6a9b6b31f47cbb9cb3a56b05978c68ebdfba05d", "committedDate": "2020-09-28T19:01:07Z", "message": "Add parameters to template"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d6a9b6b31f47cbb9cb3a56b05978c68ebdfba05d", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/d6a9b6b31f47cbb9cb3a56b05978c68ebdfba05d", "committedDate": "2020-09-28T19:01:07Z", "message": "Add parameters to template"}, "afterCommit": {"oid": "5e0dc254a6b02c55be520412ad9e695e710a9dc0", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/5e0dc254a6b02c55be520412ad9e695e710a9dc0", "committedDate": "2020-09-28T19:03:55Z", "message": "Add parameters to template"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5e0dc254a6b02c55be520412ad9e695e710a9dc0", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/5e0dc254a6b02c55be520412ad9e695e710a9dc0", "committedDate": "2020-09-28T19:03:55Z", "message": "Add parameters to template"}, "afterCommit": {"oid": "b5878b32e4e23a415cbed2e16b853f80103d7f67", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/b5878b32e4e23a415cbed2e16b853f80103d7f67", "committedDate": "2020-09-28T19:06:10Z", "message": "Add parameters to template"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa23a4dd9eb52da53d08301dca42f7e2124f083d", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/fa23a4dd9eb52da53d08301dca42f7e2124f083d", "committedDate": "2020-09-28T19:08:20Z", "message": "Add parameters to template"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b5878b32e4e23a415cbed2e16b853f80103d7f67", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/b5878b32e4e23a415cbed2e16b853f80103d7f67", "committedDate": "2020-09-28T19:06:10Z", "message": "Add parameters to template"}, "afterCommit": {"oid": "fa23a4dd9eb52da53d08301dca42f7e2124f083d", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/fa23a4dd9eb52da53d08301dca42f7e2124f083d", "committedDate": "2020-09-28T19:08:20Z", "message": "Add parameters to template"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83c69db20943d3a9a121b10121de8aded3d1c06f", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/83c69db20943d3a9a121b10121de8aded3d1c06f", "committedDate": "2020-09-28T20:42:46Z", "message": "Fix no op in conditional values"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1480b24691fdc6079c13fb0919bd2b9b5be39a45", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/1480b24691fdc6079c13fb0919bd2b9b5be39a45", "committedDate": "2020-09-28T20:12:38Z", "message": "Fix no op in conditional values"}, "afterCommit": {"oid": "83c69db20943d3a9a121b10121de8aded3d1c06f", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/83c69db20943d3a9a121b10121de8aded3d1c06f", "committedDate": "2020-09-28T20:42:46Z", "message": "Fix no op in conditional values"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c001c94d0f451d8e0e7e02517689ec1e225fe206", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/c001c94d0f451d8e0e7e02517689ec1e225fe206", "committedDate": "2020-09-28T21:31:34Z", "message": "Fix empty conditional values"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "625f514beb0d09b6a6d333ab1484726204a8f7cd", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/625f514beb0d09b6a6d333ab1484726204a8f7cd", "committedDate": "2020-09-29T17:48:27Z", "message": "Introduce public and response types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ce6806ba11a2e9a46af600efa438639217355e6", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/6ce6806ba11a2e9a46af600efa438639217355e6", "committedDate": "2020-09-29T17:52:03Z", "message": "Cleanup unused imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dcb38566a8384a30fb509049b4ec92ee19b1920c", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/dcb38566a8384a30fb509049b4ec92ee19b1920c", "committedDate": "2020-09-29T18:08:01Z", "message": "Init defaultValue in RemoteConfigParameter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NzYzMDY3", "url": "https://github.com/firebase/firebase-admin-java/pull/479#pullrequestreview-498763067", "createdAt": "2020-09-29T18:24:49Z", "commit": {"oid": "dcb38566a8384a30fb509049b4ec92ee19b1920c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODoyNDo0OVrOHZ7WtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODo0MTowN1rOHZ76bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk0ODkxNg==", "bodyText": "Add javadocs to all public APIs.", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r496948916", "createdAt": "2020-09-29T18:24:49Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/ExplicitParameterValue.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.ParameterValueResponse;\n+\n+public final class ExplicitParameterValue extends RemoteConfigParameterValue {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcb38566a8384a30fb509049b4ec92ee19b1920c"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1MDE0Mw==", "bodyText": "toRemoteConfigTemplate()\nIn our chats I used toPublicType() and toResponseType() as placeholders. Use the typical Java conventions to name these methodds.", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r496950143", "createdAt": "2020-09-29T18:26:47Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImpl.java", "diffHunk": "@@ -94,8 +95,9 @@ public RemoteConfigTemplate getTemplate() throws FirebaseRemoteConfigException {\n     HttpRequestInfo request = HttpRequestInfo.buildGetRequest(remoteConfigUrl)\n             .addAllHeaders(COMMON_HEADERS);\n     IncomingHttpResponse response = httpClient.send(request);\n-    RemoteConfigTemplate parsed = httpClient.parse(response, RemoteConfigTemplate.class);\n-    return parsed.setETag(getETag(response));\n+    TemplateResponse templateResponse = httpClient.parse(response, TemplateResponse.class);\n+    RemoteConfigTemplate template = templateResponse.toPublicType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcb38566a8384a30fb509049b4ec92ee19b1920c"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1MDM1Mw==", "bodyText": "No need for this. It's always true.", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r496950353", "createdAt": "2020-09-29T18:27:12Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/InAppDefaultValue.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.ParameterValueResponse;\n+\n+public final class InAppDefaultValue extends RemoteConfigParameterValue {\n+\n+  private final boolean inAppDefaultValue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcb38566a8384a30fb509049b4ec92ee19b1920c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1MDkzNQ==", "bodyText": "Why this default value?", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r496950935", "createdAt": "2020-09-29T18:28:11Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/RemoteConfigParameter.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.ParameterResponse;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.ParameterValueResponse;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public final class RemoteConfigParameter {\n+\n+  private RemoteConfigParameterValue defaultValue;\n+  private String description;\n+  private Map<String, RemoteConfigParameterValue> conditionalValues;\n+\n+  public RemoteConfigParameter() {\n+    conditionalValues = new HashMap<>();\n+    defaultValue = ExplicitParameterValue.of(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcb38566a8384a30fb509049b4ec92ee19b1920c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1MTEyMA==", "bodyText": "toParameterResponse()", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r496951120", "createdAt": "2020-09-29T18:28:31Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/RemoteConfigParameter.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.ParameterResponse;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.ParameterValueResponse;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public final class RemoteConfigParameter {\n+\n+  private RemoteConfigParameterValue defaultValue;\n+  private String description;\n+  private Map<String, RemoteConfigParameterValue> conditionalValues;\n+\n+  public RemoteConfigParameter() {\n+    conditionalValues = new HashMap<>();\n+    defaultValue = ExplicitParameterValue.of(\"\");\n+  }\n+\n+  public RemoteConfigParameterValue getDefaultValue() {\n+    return defaultValue;\n+  }\n+\n+  public String getDescription() {\n+    return description;\n+  }\n+\n+  public Map<String, RemoteConfigParameterValue> getConditionalValues() {\n+    return conditionalValues;\n+  }\n+\n+  public RemoteConfigParameter setDefaultValue(RemoteConfigParameterValue value) {\n+    defaultValue = value;\n+    return this;\n+  }\n+\n+  public RemoteConfigParameter setDescription(String description) {\n+    this.description = description;\n+    return this;\n+  }\n+\n+  public RemoteConfigParameter setConditionalValues(\n+          Map<String, RemoteConfigParameterValue> conditionalValues) {\n+    this.conditionalValues = conditionalValues;\n+    return this;\n+  }\n+\n+  ParameterResponse toResponseType() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcb38566a8384a30fb509049b4ec92ee19b1920c"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1Mjk0Mw==", "bodyText": "toRemoteConfigTemplate", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r496952943", "createdAt": "2020-09-29T18:31:46Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/internal/TemplateResponse.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig.internal;\n+\n+import com.google.api.client.util.Key;\n+import com.google.firebase.remoteconfig.ExplicitParameterValue;\n+import com.google.firebase.remoteconfig.InAppDefaultValue;\n+import com.google.firebase.remoteconfig.RemoteConfigParameter;\n+import com.google.firebase.remoteconfig.RemoteConfigParameterValue;\n+import com.google.firebase.remoteconfig.RemoteConfigTemplate;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public final class TemplateResponse {\n+\n+  @Key(\"parameters\")\n+  private Map<String, ParameterResponse> parameters;\n+\n+  public TemplateResponse() {\n+    parameters = Collections.emptyMap();\n+  }\n+\n+  public TemplateResponse(Map<String, ParameterResponse> parameters) {\n+    this.parameters = parameters;\n+  }\n+\n+  public RemoteConfigTemplate toPublicType() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcb38566a8384a30fb509049b4ec92ee19b1920c"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1MzMxMA==", "bodyText": "toRemoteConfigParameter", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r496953310", "createdAt": "2020-09-29T18:32:27Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/internal/TemplateResponse.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig.internal;\n+\n+import com.google.api.client.util.Key;\n+import com.google.firebase.remoteconfig.ExplicitParameterValue;\n+import com.google.firebase.remoteconfig.InAppDefaultValue;\n+import com.google.firebase.remoteconfig.RemoteConfigParameter;\n+import com.google.firebase.remoteconfig.RemoteConfigParameterValue;\n+import com.google.firebase.remoteconfig.RemoteConfigTemplate;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public final class TemplateResponse {\n+\n+  @Key(\"parameters\")\n+  private Map<String, ParameterResponse> parameters;\n+\n+  public TemplateResponse() {\n+    parameters = Collections.emptyMap();\n+  }\n+\n+  public TemplateResponse(Map<String, ParameterResponse> parameters) {\n+    this.parameters = parameters;\n+  }\n+\n+  public RemoteConfigTemplate toPublicType() {\n+    Map<String, RemoteConfigParameter> parameterPublicTypes = new HashMap<>();\n+    for (Map.Entry<String, ParameterResponse> entry : parameters.entrySet()) {\n+      parameterPublicTypes.put(entry.getKey(), entry.getValue().toPublicType());\n+    }\n+    return new RemoteConfigTemplate().setParameters(parameterPublicTypes);\n+  }\n+\n+  public static final class ParameterResponse {\n+\n+    @Key(\"defaultValue\")\n+    private ParameterValueResponse defaultValue;\n+\n+    @Key(\"description\")\n+    private String description;\n+\n+    @Key(\"conditionalValues\")\n+    private Map<String, ParameterValueResponse> conditionalValues;\n+\n+    public ParameterResponse() {\n+      conditionalValues = Collections.emptyMap();\n+    }\n+\n+    public ParameterResponse(ParameterValueResponse defaultValue, String description,\n+                             Map<String, ParameterValueResponse> conditionalValues) {\n+      this.defaultValue = defaultValue;\n+      this.description = description;\n+      this.conditionalValues = conditionalValues;\n+    }\n+\n+    public RemoteConfigParameter toPublicType() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcb38566a8384a30fb509049b4ec92ee19b1920c"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1MzY1Mw==", "bodyText": "toRemoteConfigParameterValue", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r496953653", "createdAt": "2020-09-29T18:33:06Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/internal/TemplateResponse.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig.internal;\n+\n+import com.google.api.client.util.Key;\n+import com.google.firebase.remoteconfig.ExplicitParameterValue;\n+import com.google.firebase.remoteconfig.InAppDefaultValue;\n+import com.google.firebase.remoteconfig.RemoteConfigParameter;\n+import com.google.firebase.remoteconfig.RemoteConfigParameterValue;\n+import com.google.firebase.remoteconfig.RemoteConfigTemplate;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public final class TemplateResponse {\n+\n+  @Key(\"parameters\")\n+  private Map<String, ParameterResponse> parameters;\n+\n+  public TemplateResponse() {\n+    parameters = Collections.emptyMap();\n+  }\n+\n+  public TemplateResponse(Map<String, ParameterResponse> parameters) {\n+    this.parameters = parameters;\n+  }\n+\n+  public RemoteConfigTemplate toPublicType() {\n+    Map<String, RemoteConfigParameter> parameterPublicTypes = new HashMap<>();\n+    for (Map.Entry<String, ParameterResponse> entry : parameters.entrySet()) {\n+      parameterPublicTypes.put(entry.getKey(), entry.getValue().toPublicType());\n+    }\n+    return new RemoteConfigTemplate().setParameters(parameterPublicTypes);\n+  }\n+\n+  public static final class ParameterResponse {\n+\n+    @Key(\"defaultValue\")\n+    private ParameterValueResponse defaultValue;\n+\n+    @Key(\"description\")\n+    private String description;\n+\n+    @Key(\"conditionalValues\")\n+    private Map<String, ParameterValueResponse> conditionalValues;\n+\n+    public ParameterResponse() {\n+      conditionalValues = Collections.emptyMap();\n+    }\n+\n+    public ParameterResponse(ParameterValueResponse defaultValue, String description,\n+                             Map<String, ParameterValueResponse> conditionalValues) {\n+      this.defaultValue = defaultValue;\n+      this.description = description;\n+      this.conditionalValues = conditionalValues;\n+    }\n+\n+    public RemoteConfigParameter toPublicType() {\n+      Map<String, RemoteConfigParameterValue> conditionalPublicValues = new HashMap<>();\n+      for (Map.Entry<String, ParameterValueResponse> entry : conditionalValues.entrySet()) {\n+        conditionalPublicValues.put(entry.getKey(), entry.getValue().toPublicType());\n+      }\n+      return new RemoteConfigParameter().setDefaultValue(defaultValue.toPublicType())\n+              .setDescription(description).setConditionalValues(conditionalPublicValues);\n+    }\n+  }\n+\n+  public static final class ParameterValueResponse {\n+\n+    @Key(\"value\")\n+    private String value;\n+\n+    @Key(\"useInAppDefault\")\n+    private Boolean inAppDefaultValue;\n+\n+    public ParameterValueResponse() {\n+    }\n+\n+    private ParameterValueResponse(String value, Boolean inAppDefaultValue) {\n+      this.value = value;\n+      this.inAppDefaultValue = inAppDefaultValue;\n+    }\n+\n+    public static ParameterValueResponse ofValue(String value) {\n+      return new ParameterValueResponse(value, null);\n+    }\n+\n+    public static ParameterValueResponse ofInAppDefaultValue() {\n+      return new ParameterValueResponse(null, true);\n+    }\n+\n+    public RemoteConfigParameterValue toPublicType() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcb38566a8384a30fb509049b4ec92ee19b1920c"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1NjMwMg==", "bodyText": "Probably best to load this from a resource file.", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r496956302", "createdAt": "2020-09-29T18:38:06Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java", "diffHunk": "@@ -63,7 +63,33 @@\n           404, ErrorCode.NOT_FOUND,\n           500, ErrorCode.INTERNAL);\n \n-  private static final String MOCK_TEMPLATE_RESPONSE = \"{\\\"conditions\\\": [], \\\"parameters\\\": {}}\";\n+  private static final String MOCK_TEMPLATE_RESPONSE = \"{\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcb38566a8384a30fb509049b4ec92ee19b1920c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1Njk0MQ==", "bodyText": "This should probably be a separate test case.", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r496956941", "createdAt": "2020-09-29T18:39:18Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java", "diffHunk": "@@ -86,6 +112,26 @@ public void testGetTemplate() throws Exception {\n     RemoteConfigTemplate template = client.getTemplate();\n \n     assertEquals(TEST_ETAG, template.getETag());\n+    Map<String, RemoteConfigParameter> parameters = template.getParameters();\n+    assertEquals(2, parameters.size());\n+    assertTrue(parameters.containsKey(\"welcome_message_text\"));\n+    assertTrue(parameters.containsKey(\"header_text\"));\n+    Map<String, RemoteConfigParameterValue> conditionalValues = parameters\n+            .get(\"welcome_message_text\").getConditionalValues();\n+    assertEquals(1, conditionalValues.size());\n+    assertTrue(conditionalValues.containsKey(\"ios_en\"));\n+    ExplicitParameterValue value = (ExplicitParameterValue) conditionalValues.get(\"ios_en\");\n+    assertEquals(\"welcome to app en\", value.getValue());\n+    checkGetRequestHeader(interceptor.getLastRequest());\n+\n+    // Check empty template", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcb38566a8384a30fb509049b4ec92ee19b1920c"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1ODA2Mw==", "bodyText": "Also assert for defaultValues and descriptions", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r496958063", "createdAt": "2020-09-29T18:41:07Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java", "diffHunk": "@@ -86,6 +112,26 @@ public void testGetTemplate() throws Exception {\n     RemoteConfigTemplate template = client.getTemplate();\n \n     assertEquals(TEST_ETAG, template.getETag());\n+    Map<String, RemoteConfigParameter> parameters = template.getParameters();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcb38566a8384a30fb509049b4ec92ee19b1920c"}, "originalPosition": 39}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b48cf0e37a34234e0962b251112dc6533242cbe1", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/b48cf0e37a34234e0962b251112dc6533242cbe1", "committedDate": "2020-09-30T19:18:06Z", "message": "Add javadocs and other PR fixes"}, "afterCommit": {"oid": "0dcf08e8300bec53236c6c1c196fb269b248737e", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/0dcf08e8300bec53236c6c1c196fb269b248737e", "committedDate": "2020-09-30T19:19:42Z", "message": "Add javadocs and other PR fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f5d2c791c3a9645a40b32fcfe04aab74aaf1ef7", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/0f5d2c791c3a9645a40b32fcfe04aab74aaf1ef7", "committedDate": "2020-09-30T19:23:49Z", "message": "Add javadocs and other PR fixes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0dcf08e8300bec53236c6c1c196fb269b248737e", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/0dcf08e8300bec53236c6c1c196fb269b248737e", "committedDate": "2020-09-30T19:19:42Z", "message": "Add javadocs and other PR fixes"}, "afterCommit": {"oid": "0f5d2c791c3a9645a40b32fcfe04aab74aaf1ef7", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/0f5d2c791c3a9645a40b32fcfe04aab74aaf1ef7", "committedDate": "2020-09-30T19:23:49Z", "message": "Add javadocs and other PR fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5NzQ1MDQ2", "url": "https://github.com/firebase/firebase-admin-java/pull/479#pullrequestreview-499745046", "createdAt": "2020-09-30T19:27:55Z", "commit": {"oid": "0f5d2c791c3a9645a40b32fcfe04aab74aaf1ef7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxOToyNzo1NVrOHasLwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxOTozNTo0M1rOHascHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc0ODkyOQ==", "bodyText": "I feel like both these should remain null until explicitly set. It's ok to let the backend choose default values for these as necessary.", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r497748929", "createdAt": "2020-09-30T19:27:55Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/RemoteConfigParameter.java", "diffHunk": "@@ -22,51 +22,99 @@\n import java.util.HashMap;\n import java.util.Map;\n \n+/**\n+ * Represents a Remote Config parameter that can be included in a {@link RemoteConfigTemplate}.\n+ * At minimum, a default value or a conditional value must be present for the\n+ * parameter to have any effect.\n+ */\n public final class RemoteConfigParameter {\n \n   private RemoteConfigParameterValue defaultValue;\n   private String description;\n   private Map<String, RemoteConfigParameterValue> conditionalValues;\n \n+  /**\n+   * Creates a new {@link RemoteConfigParameter}.\n+   */\n   public RemoteConfigParameter() {\n     conditionalValues = new HashMap<>();\n-    defaultValue = ExplicitParameterValue.of(\"\");\n+    defaultValue = RemoteConfigParameterValue.of(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f5d2c791c3a9645a40b32fcfe04aab74aaf1ef7"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc1MzExNw==", "bodyText": "Also assert on header_text which has an in app default value param.", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r497753117", "createdAt": "2020-09-30T19:35:43Z", "author": {"login": "hiranya911"}, "path": "src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java", "diffHunk": "@@ -116,19 +91,26 @@ public void testGetTemplate() throws Exception {\n     assertEquals(2, parameters.size());\n     assertTrue(parameters.containsKey(\"welcome_message_text\"));\n     assertTrue(parameters.containsKey(\"header_text\"));\n-    Map<String, RemoteConfigParameterValue> conditionalValues = parameters\n-            .get(\"welcome_message_text\").getConditionalValues();\n+    RemoteConfigParameter parameter = parameters.get(\"welcome_message_text\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f5d2c791c3a9645a40b32fcfe04aab74aaf1ef7"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5Nzc1MjAw", "url": "https://github.com/firebase/firebase-admin-java/pull/479#pullrequestreview-499775200", "createdAt": "2020-09-30T20:12:20Z", "commit": {"oid": "0f5d2c791c3a9645a40b32fcfe04aab74aaf1ef7"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMDoxMjoyMFrOHatnCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMDozMTowN1rOHauNaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc3MjI5Nw==", "bodyText": "This is interesting . . . you mean this gets all the possible values, including the one actually assigned -- for a particular client instance? -- in the top position in the map?", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r497772297", "createdAt": "2020-09-30T20:12:20Z", "author": {"login": "egilmorez"}, "path": "src/main/java/com/google/firebase/remoteconfig/RemoteConfigParameter.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.ParameterResponse;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.ParameterValueResponse;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Represents a Remote Config parameter that can be included in a {@link RemoteConfigTemplate}.\n+ * At minimum, a default value or a conditional value must be present for the\n+ * parameter to have any effect.\n+ */\n+public final class RemoteConfigParameter {\n+\n+  private RemoteConfigParameterValue defaultValue;\n+  private String description;\n+  private Map<String, RemoteConfigParameterValue> conditionalValues;\n+\n+  /**\n+   * Creates a new {@link RemoteConfigParameter}.\n+   */\n+  public RemoteConfigParameter() {\n+    conditionalValues = new HashMap<>();\n+    defaultValue = RemoteConfigParameterValue.of(\"\");\n+  }\n+\n+  /**\n+   * Gets the default value of the parameter.\n+   *\n+   * @return A {@link RemoteConfigParameterValue} instance.\n+   */\n+  public RemoteConfigParameterValue getDefaultValue() {\n+    return defaultValue;\n+  }\n+\n+  /**\n+   * Gets the description of the parameter.\n+   *\n+   * @return The {@link String} description of the parameter.\n+   */\n+  public String getDescription() {\n+    return description;\n+  }\n+\n+  /**\n+   * Gets the conditional values of the parameter.\n+   * The condition name of the highest priority (the one listed first in the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f5d2c791c3a9645a40b32fcfe04aab74aaf1ef7"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc3MjkwMA==", "bodyText": "Does the developer actually set the value?  Or does our backend logic?", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r497772900", "createdAt": "2020-09-30T20:13:31Z", "author": {"login": "egilmorez"}, "path": "src/main/java/com/google/firebase/remoteconfig/RemoteConfigParameter.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.ParameterResponse;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.ParameterValueResponse;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Represents a Remote Config parameter that can be included in a {@link RemoteConfigTemplate}.\n+ * At minimum, a default value or a conditional value must be present for the\n+ * parameter to have any effect.\n+ */\n+public final class RemoteConfigParameter {\n+\n+  private RemoteConfigParameterValue defaultValue;\n+  private String description;\n+  private Map<String, RemoteConfigParameterValue> conditionalValues;\n+\n+  /**\n+   * Creates a new {@link RemoteConfigParameter}.\n+   */\n+  public RemoteConfigParameter() {\n+    conditionalValues = new HashMap<>();\n+    defaultValue = RemoteConfigParameterValue.of(\"\");\n+  }\n+\n+  /**\n+   * Gets the default value of the parameter.\n+   *\n+   * @return A {@link RemoteConfigParameterValue} instance.\n+   */\n+  public RemoteConfigParameterValue getDefaultValue() {\n+    return defaultValue;\n+  }\n+\n+  /**\n+   * Gets the description of the parameter.\n+   *\n+   * @return The {@link String} description of the parameter.\n+   */\n+  public String getDescription() {\n+    return description;\n+  }\n+\n+  /**\n+   * Gets the conditional values of the parameter.\n+   * The condition name of the highest priority (the one listed first in the\n+   * {@link RemoteConfigTemplate}'s conditions list) determines the value of this parameter.\n+   *\n+   * @return A map of conditional values.\n+   */\n+  public Map<String, RemoteConfigParameterValue> getConditionalValues() {\n+    return conditionalValues;\n+  }\n+\n+  /**\n+   * Sets the default value of the parameter.\n+   * This is the value to set the parameter to, when none of the named conditions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f5d2c791c3a9645a40b32fcfe04aab74aaf1ef7"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc3MzkyOQ==", "bodyText": "Again this is maybe just my own confusion, but -- I can see how a developer might want to automate the setting of a list of conditional values.  But isn't the actual value sort of set at runtime, after evaluating the conditions?", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r497773929", "createdAt": "2020-09-30T20:15:32Z", "author": {"login": "egilmorez"}, "path": "src/main/java/com/google/firebase/remoteconfig/RemoteConfigParameter.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.ParameterResponse;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.ParameterValueResponse;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Represents a Remote Config parameter that can be included in a {@link RemoteConfigTemplate}.\n+ * At minimum, a default value or a conditional value must be present for the\n+ * parameter to have any effect.\n+ */\n+public final class RemoteConfigParameter {\n+\n+  private RemoteConfigParameterValue defaultValue;\n+  private String description;\n+  private Map<String, RemoteConfigParameterValue> conditionalValues;\n+\n+  /**\n+   * Creates a new {@link RemoteConfigParameter}.\n+   */\n+  public RemoteConfigParameter() {\n+    conditionalValues = new HashMap<>();\n+    defaultValue = RemoteConfigParameterValue.of(\"\");\n+  }\n+\n+  /**\n+   * Gets the default value of the parameter.\n+   *\n+   * @return A {@link RemoteConfigParameterValue} instance.\n+   */\n+  public RemoteConfigParameterValue getDefaultValue() {\n+    return defaultValue;\n+  }\n+\n+  /**\n+   * Gets the description of the parameter.\n+   *\n+   * @return The {@link String} description of the parameter.\n+   */\n+  public String getDescription() {\n+    return description;\n+  }\n+\n+  /**\n+   * Gets the conditional values of the parameter.\n+   * The condition name of the highest priority (the one listed first in the\n+   * {@link RemoteConfigTemplate}'s conditions list) determines the value of this parameter.\n+   *\n+   * @return A map of conditional values.\n+   */\n+  public Map<String, RemoteConfigParameterValue> getConditionalValues() {\n+    return conditionalValues;\n+  }\n+\n+  /**\n+   * Sets the default value of the parameter.\n+   * This is the value to set the parameter to, when none of the named conditions\n+   * evaluate to true.\n+   *\n+   * @param value An {@link RemoteConfigParameterValue} instance.\n+   * @return This {@link RemoteConfigParameter}.\n+   */\n+  public RemoteConfigParameter setDefaultValue(RemoteConfigParameterValue value) {\n+    defaultValue = value;\n+    return this;\n+  }\n+\n+  /**\n+   * Sets the description of the parameter.\n+   * Should not be over 100 characters and may contain any Unicode characters.\n+   *\n+   * @param description The description of the parameter.\n+   * @return This {@link RemoteConfigParameter}.\n+   */\n+  public RemoteConfigParameter setDescription(String description) {\n+    this.description = description;\n+    return this;\n+  }\n+\n+  /**\n+   * Sets the conditional values of the parameter.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f5d2c791c3a9645a40b32fcfe04aab74aaf1ef7"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc3NjYyNQ==", "bodyText": "Suggest removing the hyphen between app and default.", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r497776625", "createdAt": "2020-09-30T20:20:40Z", "author": {"login": "egilmorez"}, "path": "src/main/java/com/google/firebase/remoteconfig/RemoteConfigParameterValue.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.ParameterValueResponse;\n+\n+/**\n+ * Represents a Remote Config parameter value that can be used in a {@link RemoteConfigTemplate}.\n+ */\n+public abstract class RemoteConfigParameterValue {\n+\n+  /**\n+   * Creates a new {@link RemoteConfigParameterValue.Explicit} instance with the given value.\n+   *\n+   * @param value The value of the {@link RemoteConfigParameterValue.Explicit}.\n+   * @return A {@link RemoteConfigParameterValue.Explicit} instance.\n+   */\n+  public static Explicit of(String value) {\n+    return new Explicit(value);\n+  }\n+\n+  /**\n+   * Creates a new {@link RemoteConfigParameterValue.InAppDefault} instance.\n+   *\n+   * @return A {@link RemoteConfigParameterValue.InAppDefault} instance.\n+   */\n+  public static InAppDefault inAppDefault() {\n+    return new InAppDefault();\n+  }\n+\n+  abstract ParameterValueResponse toParameterValueResponse();\n+\n+  /**\n+   * Represents an explicit Remote Config parameter value with a {@link String} value that the\n+   * parameter is set to.\n+   */\n+  public static final class Explicit extends RemoteConfigParameterValue {\n+\n+    private final String value;\n+\n+    private Explicit(String value) {\n+      this.value = value;\n+    }\n+\n+    /**\n+     * Gets the value of {@link RemoteConfigParameterValue.Explicit}.\n+     *\n+     * @return The {@link String} value.\n+     */\n+    public String getValue() {\n+      return this.value;\n+    }\n+\n+    @Override\n+    ParameterValueResponse toParameterValueResponse() {\n+      return ParameterValueResponse.ofValue(this.value);\n+    }\n+  }\n+\n+  /**\n+   * Represents an in-app-default parameter value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f5d2c791c3a9645a40b32fcfe04aab74aaf1ef7"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc4MjEyMQ==", "bodyText": "I wonder if we should spell out \"Data Transfer Object\" -- that's what this is, right?  :)\nI searched and couldn't immediately find a single other instance of \"DTO\" in docs/reference/", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r497782121", "createdAt": "2020-09-30T20:31:07Z", "author": {"login": "egilmorez"}, "path": "src/main/java/com/google/firebase/remoteconfig/internal/TemplateResponse.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig.internal;\n+\n+import com.google.api.client.util.Key;\n+import com.google.firebase.remoteconfig.RemoteConfigParameter;\n+import com.google.firebase.remoteconfig.RemoteConfigParameterValue;\n+import com.google.firebase.remoteconfig.RemoteConfigTemplate;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * The DTO for parsing Remote Config template responses from the Remote Config service.\n+ **/\n+public final class TemplateResponse {\n+\n+  @Key(\"parameters\")\n+  private Map<String, ParameterResponse> parameters;\n+\n+  public TemplateResponse() {\n+    parameters = Collections.emptyMap();\n+  }\n+\n+  public TemplateResponse(Map<String, ParameterResponse> parameters) {\n+    this.parameters = parameters;\n+  }\n+\n+  public RemoteConfigTemplate toRemoteConfigTemplate() {\n+    Map<String, RemoteConfigParameter> parameterPublicTypes = new HashMap<>();\n+    for (Map.Entry<String, ParameterResponse> entry : parameters.entrySet()) {\n+      parameterPublicTypes.put(entry.getKey(), entry.getValue().toRemoteConfigParameter());\n+    }\n+    return new RemoteConfigTemplate().setParameters(parameterPublicTypes);\n+  }\n+\n+  /**\n+   * The DTO for parsing Remote Config parameter responses from the Remote Config service.\n+   **/\n+  public static final class ParameterResponse {\n+\n+    @Key(\"defaultValue\")\n+    private ParameterValueResponse defaultValue;\n+\n+    @Key(\"description\")\n+    private String description;\n+\n+    @Key(\"conditionalValues\")\n+    private Map<String, ParameterValueResponse> conditionalValues;\n+\n+    public ParameterResponse() {\n+      conditionalValues = Collections.emptyMap();\n+    }\n+\n+    public ParameterResponse(ParameterValueResponse defaultValue, String description,\n+                             Map<String, ParameterValueResponse> conditionalValues) {\n+      this.defaultValue = defaultValue;\n+      this.description = description;\n+      this.conditionalValues = conditionalValues;\n+    }\n+\n+    public RemoteConfigParameter toRemoteConfigParameter() {\n+      Map<String, RemoteConfigParameterValue> conditionalPublicValues = new HashMap<>();\n+      for (Map.Entry<String, ParameterValueResponse> entry : conditionalValues.entrySet()) {\n+        conditionalPublicValues\n+                .put(entry.getKey(), entry.getValue().toRemoteConfigParameterValue());\n+      }\n+      return new RemoteConfigParameter()\n+              .setDefaultValue(defaultValue.toRemoteConfigParameterValue())\n+              .setDescription(description).setConditionalValues(conditionalPublicValues);\n+    }\n+  }\n+\n+  /**\n+   * The DTO for parsing Remote Config parameter value responses from the Remote Config service.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f5d2c791c3a9645a40b32fcfe04aab74aaf1ef7"}, "originalPosition": 90}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a8062901aac3bd84604c84b6f7513d251473764", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/9a8062901aac3bd84604c84b6f7513d251473764", "committedDate": "2020-10-01T17:22:51Z", "message": "Fix javadocs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66ec860113d9ef70b234d344400278a3de9d32ca", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/66ec860113d9ef70b234d344400278a3de9d32ca", "committedDate": "2020-10-01T17:40:26Z", "message": "PR fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNTc4NDUx", "url": "https://github.com/firebase/firebase-admin-java/pull/479#pullrequestreview-500578451", "createdAt": "2020-10-01T17:42:32Z", "commit": {"oid": "66ec860113d9ef70b234d344400278a3de9d32ca"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8aaebef4c8575492027c8441da6301dbd14560ca", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/8aaebef4c8575492027c8441da6301dbd14560ca", "committedDate": "2020-10-01T22:07:33Z", "message": "Made all collections non-null"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNzU4MTA5", "url": "https://github.com/firebase/firebase-admin-java/pull/479#pullrequestreview-500758109", "createdAt": "2020-10-01T22:23:38Z", "commit": {"oid": "8aaebef4c8575492027c8441da6301dbd14560ca"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMjoyMzozOVrOHbckWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMjoyNToyOVrOHbcmeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0MTY1OQ==", "bodyText": "Nit: One setter per line", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r498541659", "createdAt": "2020-10-01T22:23:39Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/internal/TemplateResponse.java", "diffHunk": "@@ -80,14 +90,17 @@ public RemoteConfigParameter toRemoteConfigParameter() {\n         conditionalPublicValues\n                 .put(entry.getKey(), entry.getValue().toRemoteConfigParameterValue());\n       }\n+      RemoteConfigParameterValue remoteConfigParameterValue =\n+              (defaultValue == null) ? null : defaultValue.toRemoteConfigParameterValue();\n       return new RemoteConfigParameter()\n-              .setDefaultValue(defaultValue.toRemoteConfigParameterValue())\n+              .setDefaultValue(remoteConfigParameterValue)\n               .setDescription(description).setConditionalValues(conditionalPublicValues);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8aaebef4c8575492027c8441da6301dbd14560ca"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0MjIwMQ==", "bodyText": "Probably redundant at this level.", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r498542201", "createdAt": "2020-10-01T22:25:29Z", "author": {"login": "hiranya911"}, "path": "src/main/java/com/google/firebase/remoteconfig/internal/TemplateResponse.java", "diffHunk": "@@ -67,8 +75,10 @@ public ParameterResponse() {\n       conditionalValues = Collections.emptyMap();\n     }\n \n-    public ParameterResponse(ParameterValueResponse defaultValue, String description,\n-                             Map<String, ParameterValueResponse> conditionalValues) {\n+    public ParameterResponse(@Nullable ParameterValueResponse defaultValue,\n+                             @Nullable String description,\n+                             @NonNull Map<String, ParameterValueResponse> conditionalValues) {\n+      checkNotNull(conditionalValues, \"conditional values must not be null.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8aaebef4c8575492027c8441da6301dbd14560ca"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4e8a4288a2a560daac5165e09b4a816ad1cb585", "author": {"user": {"login": "lahirumaramba", "name": "Lahiru Maramba"}}, "url": "https://github.com/firebase/firebase-admin-java/commit/a4e8a4288a2a560daac5165e09b4a816ad1cb585", "committedDate": "2020-10-01T22:33:18Z", "message": "One setter per line"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2763, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}