{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3MTMyMjkx", "number": 1162, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQyMDozMTo0NVrODavWOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQyMDo0MjoxOVrODavYGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MzY1MzA2OnYy", "diffSide": "RIGHT", "path": "elide-core/src/test/java/com/yahoo/elide/jsonapi/JsonApiTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQyMDozMTo0NVrOFh1thQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwMzowNDoxNVrOFh3TbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAyNzMzMw==", "bodyText": "What's this for?", "url": "https://github.com/yahoo/elide/pull/1162#discussion_r371027333", "createdAt": "2020-01-26T20:31:45Z", "author": {"login": "aklish"}, "path": "elide-core/src/test/java/com/yahoo/elide/jsonapi/JsonApiTest.java", "diffHunk": "@@ -326,5 +339,21 @@ public void readListWithMeta() throws IOException {\n         assertEquals(attributes.get(\"firstName\"), \"bob\");\n         assertEquals(data.getRelationships().get(\"children\").getData().getSingleValue().getId(), \"2\");\n         assertNull(included);\n+        checkEquality(jsonApiDocument);\n+    }\n+\n+    private void checkEquality(JsonApiDocument doc1) {\n+        JsonApiDocument doc2;\n+        try {\n+            String json = mapper.writeJsonApiDocument(doc1);\n+            doc2 = mapper.readJsonApiDocument(json);\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+        if (doc2.getData() == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "208acf4639b3e7bd071a5e6a410f05d9c32f3d65"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA1MzQyMQ==", "bodyText": "See #1163.  Moved there.", "url": "https://github.com/yahoo/elide/pull/1162#discussion_r371053421", "createdAt": "2020-01-27T03:04:15Z", "author": {"login": "wcekan"}, "path": "elide-core/src/test/java/com/yahoo/elide/jsonapi/JsonApiTest.java", "diffHunk": "@@ -326,5 +339,21 @@ public void readListWithMeta() throws IOException {\n         assertEquals(attributes.get(\"firstName\"), \"bob\");\n         assertEquals(data.getRelationships().get(\"children\").getData().getSingleValue().getId(), \"2\");\n         assertNull(included);\n+        checkEquality(jsonApiDocument);\n+    }\n+\n+    private void checkEquality(JsonApiDocument doc1) {\n+        JsonApiDocument doc2;\n+        try {\n+            String json = mapper.writeJsonApiDocument(doc1);\n+            doc2 = mapper.readJsonApiDocument(json);\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+        if (doc2.getData() == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAyNzMzMw=="}, "originalCommit": {"oid": "208acf4639b3e7bd071a5e6a410f05d9c32f3d65"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MzY1NTkyOnYy", "diffSide": "RIGHT", "path": "elide-core/src/test/java/com/yahoo/elide/core/PersistentResourceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQyMDozODowMVrOFh1u8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwMzowNzozN1rOFh3Uvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAyNzY5OA==", "bodyText": "This is not a test.  Why use assert here?", "url": "https://github.com/yahoo/elide/pull/1162#discussion_r371027698", "createdAt": "2020-01-26T20:38:01Z", "author": {"login": "aklish"}, "path": "elide-core/src/test/java/com/yahoo/elide/core/PersistentResourceTest.java", "diffHunk": "@@ -110,6 +117,7 @@ public PersistentResourceTest() {\n         badUserScope = new RequestScope(null, null, mock(DataStoreTransaction.class),\n                 new User(-1), null, elideSettings);\n         reset(goodUserScope.getTransaction());\n+        assertFalse(goodUserScope.isUseFilterExpressions());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "208acf4639b3e7bd071a5e6a410f05d9c32f3d65"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA1Mzc1OA==", "bodyText": "Why is this not a test?  Will move.", "url": "https://github.com/yahoo/elide/pull/1162#discussion_r371053758", "createdAt": "2020-01-27T03:07:37Z", "author": {"login": "wcekan"}, "path": "elide-core/src/test/java/com/yahoo/elide/core/PersistentResourceTest.java", "diffHunk": "@@ -110,6 +117,7 @@ public PersistentResourceTest() {\n         badUserScope = new RequestScope(null, null, mock(DataStoreTransaction.class),\n                 new User(-1), null, elideSettings);\n         reset(goodUserScope.getTransaction());\n+        assertFalse(goodUserScope.isUseFilterExpressions());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAyNzY5OA=="}, "originalCommit": {"oid": "208acf4639b3e7bd071a5e6a410f05d9c32f3d65"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MzY1NjY1OnYy", "diffSide": "RIGHT", "path": "elide-core/src/test/java/com/yahoo/elide/core/PersistentResourceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQyMDozOTo0MlrOFh1vTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwMzozNTo0MVrOFh3fxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAyNzc4OA==", "bodyText": "Does the code actually nest patch scopes like this?  I thought patch was the parent scope - but child scopes were always normal request scopes.", "url": "https://github.com/yahoo/elide/pull/1162#discussion_r371027788", "createdAt": "2020-01-26T20:39:42Z", "author": {"login": "aklish"}, "path": "elide-core/src/test/java/com/yahoo/elide/core/PersistentResourceTest.java", "diffHunk": "@@ -2167,6 +2176,57 @@ public void testRelationChangeSpecType() {\n             assertTrue(model.updateRelation(\"child\", null));\n     }\n \n+    @Test\n+    public void testPatchRequestScope() {\n+        DataStoreTransaction tx = mock(DataStoreTransaction.class);\n+        PatchRequestScope parentScope =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "208acf4639b3e7bd071a5e6a410f05d9c32f3d65"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA1NjU4Mw==", "bodyText": "Yes, they are nested.  A new wrapper is generated for each operation in the patch extension.  That is what this tests.  See\nhttps://github.com/yahoo/elide/blob/master/elide-core/src/main/java/com/yahoo/elide/extensions/JsonApiPatch.java#L65", "url": "https://github.com/yahoo/elide/pull/1162#discussion_r371056583", "createdAt": "2020-01-27T03:35:41Z", "author": {"login": "wcekan"}, "path": "elide-core/src/test/java/com/yahoo/elide/core/PersistentResourceTest.java", "diffHunk": "@@ -2167,6 +2176,57 @@ public void testRelationChangeSpecType() {\n             assertTrue(model.updateRelation(\"child\", null));\n     }\n \n+    @Test\n+    public void testPatchRequestScope() {\n+        DataStoreTransaction tx = mock(DataStoreTransaction.class);\n+        PatchRequestScope parentScope =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAyNzc4OA=="}, "originalCommit": {"oid": "208acf4639b3e7bd071a5e6a410f05d9c32f3d65"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MzY1Nzg2OnYy", "diffSide": "RIGHT", "path": "elide-core/src/test/java/com/yahoo/elide/core/LifeCycleTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQyMDo0MjoxOVrOFh1v1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwMzowOTowN1rOFh3VgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAyNzkyNw==", "bodyText": "Do we want to leave this log level on?", "url": "https://github.com/yahoo/elide/pull/1162#discussion_r371027927", "createdAt": "2020-01-26T20:42:19Z", "author": {"login": "aklish"}, "path": "elide-core/src/test/java/com/yahoo/elide/core/LifeCycleTest.java", "diffHunk": "@@ -115,22 +127,21 @@ public TestEntityDictionary(Map<String, Class<? extends Check>> checks) {\n         dictionary.bindEntity(Author.class);\n         dictionary.bindEntity(Publisher.class);\n         dictionary.bindEntity(Editor.class);\n-        dictionary.bindTrigger(Book.class, OnCreatePostCommit.class, callback);\n-        dictionary.bindTrigger(Book.class, OnCreatePreCommit.class, callback);\n-        dictionary.bindTrigger(Book.class, OnCreatePreSecurity.class, callback);\n-        dictionary.bindTrigger(Book.class, OnReadPostCommit.class, callback);\n-        dictionary.bindTrigger(Book.class, OnReadPreCommit.class, callback);\n-        dictionary.bindTrigger(Book.class, OnReadPreSecurity.class, callback);\n-        dictionary.bindTrigger(Book.class, OnDeletePostCommit.class, callback);\n-        dictionary.bindTrigger(Book.class, OnDeletePreCommit.class, callback);\n-        dictionary.bindTrigger(Book.class, OnDeletePreSecurity.class, callback);\n-        dictionary.bindTrigger(Book.class, OnUpdatePostCommit.class, \"title\", callback);\n-        dictionary.bindTrigger(Book.class, OnUpdatePreCommit.class, \"title\", callback);\n-        dictionary.bindTrigger(Book.class, OnUpdatePreSecurity.class, \"title\", callback);\n+        ImmutableList.of(\n+                OnCreatePostCommit.class, OnCreatePreCommit.class, OnCreatePreSecurity.class,\n+                OnReadPostCommit.class, OnReadPreCommit.class, OnReadPreSecurity.class,\n+                OnDeletePostCommit.class, OnDeletePreCommit.class, OnDeletePreSecurity.class)\n+                .stream().forEach(cls -> dictionary.bindTrigger(Book.class, cls, callback));\n+        ImmutableList.of(\n+                OnUpdatePostCommit.class, OnUpdatePreCommit.class, OnUpdatePreSecurity.class)\n+                .stream().forEach(cls -> dictionary.bindTrigger(Book.class, cls, \"title\", callback));\n         dictionary.bindTrigger(Book.class, OnUpdatePreCommit.class, onUpdateDeferredCallback, true);\n         dictionary.bindTrigger(Book.class, OnUpdatePreSecurity.class, onUpdateImmediateCallback, true);\n         dictionary.bindTrigger(Book.class, OnUpdatePostCommit.class, onUpdatePostCommitCallback, true);\n         dictionary.bindTrigger(Author.class, OnUpdatePostCommit.class, onUpdatePostCommitAuthor, true);\n+        // enable trace\n+        Logger rootLogger = (Logger) LoggerFactory.getILoggerFactory().getLogger(Logger.ROOT_LOGGER_NAME);\n+        rootLogger.setLevel(Level.TRACE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "208acf4639b3e7bd071a5e6a410f05d9c32f3d65"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA1Mzk1Mw==", "bodyText": "Yes, otherwise we are not testing logging works without throwing exceptions.\nOtherwise you need to duplicate all these same tests except with logging on.", "url": "https://github.com/yahoo/elide/pull/1162#discussion_r371053953", "createdAt": "2020-01-27T03:09:07Z", "author": {"login": "wcekan"}, "path": "elide-core/src/test/java/com/yahoo/elide/core/LifeCycleTest.java", "diffHunk": "@@ -115,22 +127,21 @@ public TestEntityDictionary(Map<String, Class<? extends Check>> checks) {\n         dictionary.bindEntity(Author.class);\n         dictionary.bindEntity(Publisher.class);\n         dictionary.bindEntity(Editor.class);\n-        dictionary.bindTrigger(Book.class, OnCreatePostCommit.class, callback);\n-        dictionary.bindTrigger(Book.class, OnCreatePreCommit.class, callback);\n-        dictionary.bindTrigger(Book.class, OnCreatePreSecurity.class, callback);\n-        dictionary.bindTrigger(Book.class, OnReadPostCommit.class, callback);\n-        dictionary.bindTrigger(Book.class, OnReadPreCommit.class, callback);\n-        dictionary.bindTrigger(Book.class, OnReadPreSecurity.class, callback);\n-        dictionary.bindTrigger(Book.class, OnDeletePostCommit.class, callback);\n-        dictionary.bindTrigger(Book.class, OnDeletePreCommit.class, callback);\n-        dictionary.bindTrigger(Book.class, OnDeletePreSecurity.class, callback);\n-        dictionary.bindTrigger(Book.class, OnUpdatePostCommit.class, \"title\", callback);\n-        dictionary.bindTrigger(Book.class, OnUpdatePreCommit.class, \"title\", callback);\n-        dictionary.bindTrigger(Book.class, OnUpdatePreSecurity.class, \"title\", callback);\n+        ImmutableList.of(\n+                OnCreatePostCommit.class, OnCreatePreCommit.class, OnCreatePreSecurity.class,\n+                OnReadPostCommit.class, OnReadPreCommit.class, OnReadPreSecurity.class,\n+                OnDeletePostCommit.class, OnDeletePreCommit.class, OnDeletePreSecurity.class)\n+                .stream().forEach(cls -> dictionary.bindTrigger(Book.class, cls, callback));\n+        ImmutableList.of(\n+                OnUpdatePostCommit.class, OnUpdatePreCommit.class, OnUpdatePreSecurity.class)\n+                .stream().forEach(cls -> dictionary.bindTrigger(Book.class, cls, \"title\", callback));\n         dictionary.bindTrigger(Book.class, OnUpdatePreCommit.class, onUpdateDeferredCallback, true);\n         dictionary.bindTrigger(Book.class, OnUpdatePreSecurity.class, onUpdateImmediateCallback, true);\n         dictionary.bindTrigger(Book.class, OnUpdatePostCommit.class, onUpdatePostCommitCallback, true);\n         dictionary.bindTrigger(Author.class, OnUpdatePostCommit.class, onUpdatePostCommitAuthor, true);\n+        // enable trace\n+        Logger rootLogger = (Logger) LoggerFactory.getILoggerFactory().getLogger(Logger.ROOT_LOGGER_NAME);\n+        rootLogger.setLevel(Level.TRACE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAyNzkyNw=="}, "originalCommit": {"oid": "208acf4639b3e7bd071a5e6a410f05d9c32f3d65"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1048, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}