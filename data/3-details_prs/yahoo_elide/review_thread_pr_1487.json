{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1NjE5NzQ2", "number": 1487, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDoyMToyN1rOEW81Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxOTowNDo1MVrOEaqt3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTAwODE0OnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDoyMToyN1rOG-ecdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDoyMToyN1rOG-ecdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE2MzcwMw==", "bodyText": "This function should be merged with the one above.  We can change the name to explain and remove the other function.  This will require a few other changes as well.", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r468163703", "createdAt": "2020-08-10T20:21:27Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java", "diffHunk": "@@ -200,4 +201,14 @@ public Table getTable(String classAlias) {\n      * @return SQL string corresponding to the given query\n      */\n     public abstract String explain(Query query);\n+\n+    /**\n+     * Builds the specified {@link Query} against a specific persistent storage, which understand the provided\n+     * {@link Query}.\n+     *\n+     * @param query The query customized for a particular persistent storage or storage client\n+     * @return query string\n+     */\n+    public abstract List<String> showQueries(Query query);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c611aad0de02a9466368be524fbb95bde38c049"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTAxNjM5OnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDoyNDowNFrOG-ehcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDoyNDowNFrOG-ehcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE2NDk3OQ==", "bodyText": "All of these classes need the copyright statement added and also javadoc at the class level so the linter doesn't complain.", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r468164979", "createdAt": "2020-08-10T20:24:04Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java", "diffHunk": "@@ -0,0 +1,9 @@\n+package com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c611aad0de02a9466368be524fbb95bde38c049"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTAzMTE1OnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/PrestoShowQueriesTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDoyODo1NFrOG-eqww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjoxMTowMVrOG-hiyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE2NzM2Mw==", "bodyText": "No asterisk imports.  I wonder if the checkstyle is not enabled on this code?  It ought to be.", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r468167363", "createdAt": "2020-08-10T20:28:54Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/PrestoShowQueriesTest.java", "diffHunk": "@@ -0,0 +1,309 @@\n+package com.yahoo.elide.datastores.aggregation.queryengines.sql;\n+\n+import com.yahoo.elide.core.filter.FilterPredicate;\n+import com.yahoo.elide.core.filter.expression.AndFilterExpression;\n+import com.yahoo.elide.core.filter.expression.OrFilterExpression;\n+import com.yahoo.elide.datastores.aggregation.framework.SQLUnitTest;\n+import com.yahoo.elide.datastores.aggregation.metadata.models.Table;\n+import com.yahoo.elide.datastores.aggregation.query.Query;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.SQLDialectFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c611aad0de02a9466368be524fbb95bde38c049"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE5OTU4MA==", "bodyText": "Yeah, I don't think codacy complained about this one. Do new files need to be added to a config to get checked?", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r468199580", "createdAt": "2020-08-10T21:35:41Z", "author": {"login": "HarveyC3"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/PrestoShowQueriesTest.java", "diffHunk": "@@ -0,0 +1,309 @@\n+package com.yahoo.elide.datastores.aggregation.queryengines.sql;\n+\n+import com.yahoo.elide.core.filter.FilterPredicate;\n+import com.yahoo.elide.core.filter.expression.AndFilterExpression;\n+import com.yahoo.elide.core.filter.expression.OrFilterExpression;\n+import com.yahoo.elide.datastores.aggregation.framework.SQLUnitTest;\n+import com.yahoo.elide.datastores.aggregation.metadata.models.Table;\n+import com.yahoo.elide.datastores.aggregation.query.Query;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.SQLDialectFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE2NzM2Mw=="}, "originalCommit": {"oid": "1c611aad0de02a9466368be524fbb95bde38c049"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIxNDQ3Mg==", "bodyText": "Not codacy - but checkstyle.  All the elide repos have a checkstyle plugin that gets run during the compile phase.  The build should fail if there is a problem.", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r468214472", "createdAt": "2020-08-10T22:11:01Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/PrestoShowQueriesTest.java", "diffHunk": "@@ -0,0 +1,309 @@\n+package com.yahoo.elide.datastores.aggregation.queryengines.sql;\n+\n+import com.yahoo.elide.core.filter.FilterPredicate;\n+import com.yahoo.elide.core.filter.expression.AndFilterExpression;\n+import com.yahoo.elide.core.filter.expression.OrFilterExpression;\n+import com.yahoo.elide.datastores.aggregation.framework.SQLUnitTest;\n+import com.yahoo.elide.datastores.aggregation.metadata.models.Table;\n+import com.yahoo.elide.datastores.aggregation.query.Query;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.SQLDialectFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE2NzM2Mw=="}, "originalCommit": {"oid": "1c611aad0de02a9466368be524fbb95bde38c049"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTA4MTM5OnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDo0NTowMlrOG-fJ_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjoxNzowNlrOG-hrnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE3NTM1OA==", "bodyText": "Instead of having a static method and map that binds these values to their respective queries - the enumeration itself can have arguments for each value.  I would make a QueryProvider (function that takes no arguments and returns a query) as the argument to each enumeration value.", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r468175358", "createdAt": "2020-08-10T20:45:02Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java", "diffHunk": "@@ -62,7 +76,31 @@\n \n     protected QueryEngine.Transaction transaction;\n \n-    public static void init() {\n+    // Standard set of test queries used in dialect tests\n+    protected enum TestQueryName {\n+        WHERE_METRICS_ONLY,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c611aad0de02a9466368be524fbb95bde38c049"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwOTQ5Mg==", "bodyText": "Do you mean something like this:\nprotected enum TestQuery {\n    WHERE_METRICS_ONLY {\n        public Query QueryProvider() { return QueryBuilder....build(); }\n     }\n     ...\n     public Query QueryProvider();\n}", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r468209492", "createdAt": "2020-08-10T21:58:38Z", "author": {"login": "HarveyC3"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java", "diffHunk": "@@ -62,7 +76,31 @@\n \n     protected QueryEngine.Transaction transaction;\n \n-    public static void init() {\n+    // Standard set of test queries used in dialect tests\n+    protected enum TestQueryName {\n+        WHERE_METRICS_ONLY,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE3NTM1OA=="}, "originalCommit": {"oid": "1c611aad0de02a9466368be524fbb95bde38c049"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIxNjczMw==", "bodyText": "Similar idea.  I was thinking something like:\nprotected enum TestQuery {\n    WHERE_METRICS_ONLY( () -> { return QueryBuilder....build(); }),\n     ...\n\n    private Provider<Query> queryProvider;\n}", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r468216733", "createdAt": "2020-08-10T22:17:06Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java", "diffHunk": "@@ -62,7 +76,31 @@\n \n     protected QueryEngine.Transaction transaction;\n \n-    public static void init() {\n+    // Standard set of test queries used in dialect tests\n+    protected enum TestQueryName {\n+        WHERE_METRICS_ONLY,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE3NTM1OA=="}, "originalCommit": {"oid": "1c611aad0de02a9466368be524fbb95bde38c049"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTE3Njg2OnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMToxNjowMVrOG-gE2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjoxMjoxNFrOG-hkoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE5MDQyNQ==", "bodyText": "What about pagination offset and limit?", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r468190425", "createdAt": "2020-08-10T21:16:01Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java", "diffHunk": "@@ -62,7 +76,31 @@\n \n     protected QueryEngine.Transaction transaction;\n \n-    public static void init() {\n+    // Standard set of test queries used in dialect tests\n+    protected enum TestQueryName {\n+        WHERE_METRICS_ONLY,\n+        WHERE_DIMS_ONLY,\n+        WHERE_METRICS_AND_DIMS,\n+        WHERE_METRICS_OR_DIMS,\n+        WHERE_METRICS_AGGREGATION,\n+        HAVING_METRICS_ONLY,\n+        HAVING_DIMS_ONLY,\n+        HAVING_METRICS_AND_DIMS,\n+        HAVING_METRICS_OR_DIMS,\n+        PAGINATION_TOTAL,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c611aad0de02a9466368be524fbb95bde38c049"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwMTk2Nw==", "bodyText": "how should the queries differ for those?", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r468201967", "createdAt": "2020-08-10T21:41:14Z", "author": {"login": "HarveyC3"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java", "diffHunk": "@@ -62,7 +76,31 @@\n \n     protected QueryEngine.Transaction transaction;\n \n-    public static void init() {\n+    // Standard set of test queries used in dialect tests\n+    protected enum TestQueryName {\n+        WHERE_METRICS_ONLY,\n+        WHERE_DIMS_ONLY,\n+        WHERE_METRICS_AND_DIMS,\n+        WHERE_METRICS_OR_DIMS,\n+        WHERE_METRICS_AGGREGATION,\n+        HAVING_METRICS_ONLY,\n+        HAVING_DIMS_ONLY,\n+        HAVING_METRICS_AND_DIMS,\n+        HAVING_METRICS_OR_DIMS,\n+        PAGINATION_TOTAL,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE5MDQyNQ=="}, "originalCommit": {"oid": "1c611aad0de02a9466368be524fbb95bde38c049"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIxNDk0NQ==", "bodyText": "There are three things you can ask for pagination:\n\ntotals - total number of rows\noffset - starting row\nlimit - number of rows returned in the response.\n\nEach dialect will have a different way of paginating offset and limit.", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r468214945", "createdAt": "2020-08-10T22:12:14Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java", "diffHunk": "@@ -62,7 +76,31 @@\n \n     protected QueryEngine.Transaction transaction;\n \n-    public static void init() {\n+    // Standard set of test queries used in dialect tests\n+    protected enum TestQueryName {\n+        WHERE_METRICS_ONLY,\n+        WHERE_DIMS_ONLY,\n+        WHERE_METRICS_AND_DIMS,\n+        WHERE_METRICS_OR_DIMS,\n+        WHERE_METRICS_AGGREGATION,\n+        HAVING_METRICS_ONLY,\n+        HAVING_DIMS_ONLY,\n+        HAVING_METRICS_AND_DIMS,\n+        HAVING_METRICS_OR_DIMS,\n+        PAGINATION_TOTAL,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE5MDQyNQ=="}, "originalCommit": {"oid": "1c611aad0de02a9466368be524fbb95bde38c049"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTE5Mjg0OnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMToyMDo1N1rOG-gN_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMTo1MToyNVrOG_0HpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE5Mjc2Nw==", "bodyText": "Not sure what this means.  the group by is in the select isn't it?", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r468192767", "createdAt": "2020-08-10T21:20:57Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java", "diffHunk": "@@ -62,7 +76,31 @@\n \n     protected QueryEngine.Transaction transaction;\n \n-    public static void init() {\n+    // Standard set of test queries used in dialect tests\n+    protected enum TestQueryName {\n+        WHERE_METRICS_ONLY,\n+        WHERE_DIMS_ONLY,\n+        WHERE_METRICS_AND_DIMS,\n+        WHERE_METRICS_OR_DIMS,\n+        WHERE_METRICS_AGGREGATION,\n+        HAVING_METRICS_ONLY,\n+        HAVING_DIMS_ONLY,\n+        HAVING_METRICS_AND_DIMS,\n+        HAVING_METRICS_OR_DIMS,\n+        PAGINATION_TOTAL,\n+        SORT_METRIC_ASC,\n+        SORT_METRIC_DESC,\n+        SORT_DIM_DESC,\n+        SORT_METRIC_AND_DIM_DESC,\n+        SUBQUERY,\n+        GROUP_BY_DIMENSION_NOT_IN_SELECT,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c611aad0de02a9466368be524fbb95bde38c049"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwMjg2Mw==", "bodyText": "The intent is to have a field in the GROUP BY that's not part of the SELECT. I'll double check what's going wrong with this one.", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r468202863", "createdAt": "2020-08-10T21:43:29Z", "author": {"login": "HarveyC3"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java", "diffHunk": "@@ -62,7 +76,31 @@\n \n     protected QueryEngine.Transaction transaction;\n \n-    public static void init() {\n+    // Standard set of test queries used in dialect tests\n+    protected enum TestQueryName {\n+        WHERE_METRICS_ONLY,\n+        WHERE_DIMS_ONLY,\n+        WHERE_METRICS_AND_DIMS,\n+        WHERE_METRICS_OR_DIMS,\n+        WHERE_METRICS_AGGREGATION,\n+        HAVING_METRICS_ONLY,\n+        HAVING_DIMS_ONLY,\n+        HAVING_METRICS_AND_DIMS,\n+        HAVING_METRICS_OR_DIMS,\n+        PAGINATION_TOTAL,\n+        SORT_METRIC_ASC,\n+        SORT_METRIC_DESC,\n+        SORT_DIM_DESC,\n+        SORT_METRIC_AND_DIM_DESC,\n+        SUBQUERY,\n+        GROUP_BY_DIMENSION_NOT_IN_SELECT,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE5Mjc2Nw=="}, "originalCommit": {"oid": "1c611aad0de02a9466368be524fbb95bde38c049"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIxNTA2MQ==", "bodyText": "I think it is part of the select though.", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r468215061", "createdAt": "2020-08-10T22:12:33Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java", "diffHunk": "@@ -62,7 +76,31 @@\n \n     protected QueryEngine.Transaction transaction;\n \n-    public static void init() {\n+    // Standard set of test queries used in dialect tests\n+    protected enum TestQueryName {\n+        WHERE_METRICS_ONLY,\n+        WHERE_DIMS_ONLY,\n+        WHERE_METRICS_AND_DIMS,\n+        WHERE_METRICS_OR_DIMS,\n+        WHERE_METRICS_AGGREGATION,\n+        HAVING_METRICS_ONLY,\n+        HAVING_DIMS_ONLY,\n+        HAVING_METRICS_AND_DIMS,\n+        HAVING_METRICS_OR_DIMS,\n+        PAGINATION_TOTAL,\n+        SORT_METRIC_ASC,\n+        SORT_METRIC_DESC,\n+        SORT_DIM_DESC,\n+        SORT_METRIC_AND_DIM_DESC,\n+        SUBQUERY,\n+        GROUP_BY_DIMENSION_NOT_IN_SELECT,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE5Mjc2Nw=="}, "originalCommit": {"oid": "1c611aad0de02a9466368be524fbb95bde38c049"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2NzM5Nw==", "bodyText": "I changed this from GROUP BY to ORDER BY, which doesn't push the field into the SELECT.", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r469567397", "createdAt": "2020-08-12T21:51:25Z", "author": {"login": "HarveyC3"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java", "diffHunk": "@@ -62,7 +76,31 @@\n \n     protected QueryEngine.Transaction transaction;\n \n-    public static void init() {\n+    // Standard set of test queries used in dialect tests\n+    protected enum TestQueryName {\n+        WHERE_METRICS_ONLY,\n+        WHERE_DIMS_ONLY,\n+        WHERE_METRICS_AND_DIMS,\n+        WHERE_METRICS_OR_DIMS,\n+        WHERE_METRICS_AGGREGATION,\n+        HAVING_METRICS_ONLY,\n+        HAVING_DIMS_ONLY,\n+        HAVING_METRICS_AND_DIMS,\n+        HAVING_METRICS_OR_DIMS,\n+        PAGINATION_TOTAL,\n+        SORT_METRIC_ASC,\n+        SORT_METRIC_DESC,\n+        SORT_DIM_DESC,\n+        SORT_METRIC_AND_DIM_DESC,\n+        SUBQUERY,\n+        GROUP_BY_DIMENSION_NOT_IN_SELECT,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE5Mjc2Nw=="}, "originalCommit": {"oid": "1c611aad0de02a9466368be524fbb95bde38c049"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTE5NzA3OnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMToyMjoyOFrOG-gQng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMToyMjoyOFrOG-gQng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE5MzQzOA==", "bodyText": "I think we ought to add a few tests for time dimensions - time dimensions in WHERE, time dimensions in HAVING, and time dimensions in GROUP BY", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r468193438", "createdAt": "2020-08-10T21:22:28Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java", "diffHunk": "@@ -62,7 +76,31 @@\n \n     protected QueryEngine.Transaction transaction;\n \n-    public static void init() {\n+    // Standard set of test queries used in dialect tests\n+    protected enum TestQueryName {\n+        WHERE_METRICS_ONLY,\n+        WHERE_DIMS_ONLY,\n+        WHERE_METRICS_AND_DIMS,\n+        WHERE_METRICS_OR_DIMS,\n+        WHERE_METRICS_AGGREGATION,\n+        HAVING_METRICS_ONLY,\n+        HAVING_DIMS_ONLY,\n+        HAVING_METRICS_AND_DIMS,\n+        HAVING_METRICS_OR_DIMS,\n+        PAGINATION_TOTAL,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c611aad0de02a9466368be524fbb95bde38c049"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTIwMjg0OnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMToyNDoyNlrOG-gUEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjoxMzowNVrOG-hl3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE5NDMyMQ==", "bodyText": "It would be good to break out most of these feature tests by table and by subquery.  By features, I mean:\nWHERE\nHAVING\nTIME Dimensions\nPAGINATION\nSORTING", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r468194321", "createdAt": "2020-08-10T21:24:26Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java", "diffHunk": "@@ -62,7 +76,31 @@\n \n     protected QueryEngine.Transaction transaction;\n \n-    public static void init() {\n+    // Standard set of test queries used in dialect tests\n+    protected enum TestQueryName {\n+        WHERE_METRICS_ONLY,\n+        WHERE_DIMS_ONLY,\n+        WHERE_METRICS_AND_DIMS,\n+        WHERE_METRICS_OR_DIMS,\n+        WHERE_METRICS_AGGREGATION,\n+        HAVING_METRICS_ONLY,\n+        HAVING_DIMS_ONLY,\n+        HAVING_METRICS_AND_DIMS,\n+        HAVING_METRICS_OR_DIMS,\n+        PAGINATION_TOTAL,\n+        SORT_METRIC_ASC,\n+        SORT_METRIC_DESC,\n+        SORT_DIM_DESC,\n+        SORT_METRIC_AND_DIM_DESC,\n+        SUBQUERY,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c611aad0de02a9466368be524fbb95bde38c049"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwNDIwNg==", "bodyText": "Is your ask to create two versions of the existing tests - 1 for table and 1 for subquery? Or just to update the names to clearly show whether they're table or subquery tests?", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r468204206", "createdAt": "2020-08-10T21:46:37Z", "author": {"login": "HarveyC3"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java", "diffHunk": "@@ -62,7 +76,31 @@\n \n     protected QueryEngine.Transaction transaction;\n \n-    public static void init() {\n+    // Standard set of test queries used in dialect tests\n+    protected enum TestQueryName {\n+        WHERE_METRICS_ONLY,\n+        WHERE_DIMS_ONLY,\n+        WHERE_METRICS_AND_DIMS,\n+        WHERE_METRICS_OR_DIMS,\n+        WHERE_METRICS_AGGREGATION,\n+        HAVING_METRICS_ONLY,\n+        HAVING_DIMS_ONLY,\n+        HAVING_METRICS_AND_DIMS,\n+        HAVING_METRICS_OR_DIMS,\n+        PAGINATION_TOTAL,\n+        SORT_METRIC_ASC,\n+        SORT_METRIC_DESC,\n+        SORT_DIM_DESC,\n+        SORT_METRIC_AND_DIM_DESC,\n+        SUBQUERY,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE5NDMyMQ=="}, "originalCommit": {"oid": "1c611aad0de02a9466368be524fbb95bde38c049"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIxNTI2MQ==", "bodyText": "The former - I think we should test most features for both tables and subqueries.", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r468215261", "createdAt": "2020-08-10T22:13:05Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java", "diffHunk": "@@ -62,7 +76,31 @@\n \n     protected QueryEngine.Transaction transaction;\n \n-    public static void init() {\n+    // Standard set of test queries used in dialect tests\n+    protected enum TestQueryName {\n+        WHERE_METRICS_ONLY,\n+        WHERE_DIMS_ONLY,\n+        WHERE_METRICS_AND_DIMS,\n+        WHERE_METRICS_OR_DIMS,\n+        WHERE_METRICS_AGGREGATION,\n+        HAVING_METRICS_ONLY,\n+        HAVING_DIMS_ONLY,\n+        HAVING_METRICS_AND_DIMS,\n+        HAVING_METRICS_OR_DIMS,\n+        PAGINATION_TOTAL,\n+        SORT_METRIC_ASC,\n+        SORT_METRIC_DESC,\n+        SORT_DIM_DESC,\n+        SORT_METRIC_AND_DIM_DESC,\n+        SUBQUERY,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE5NDMyMQ=="}, "originalCommit": {"oid": "1c611aad0de02a9466368be524fbb95bde38c049"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzAyNzQwOnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDoyODoxOFrOHDKD_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDoyODoxOFrOHDKD_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA3MjYzOA==", "bodyText": "I would make a new static method for parsing filter expressions that throws an Illegal State or Argument exception.  Codacy doesn't like runtime exceptions.", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r473072638", "createdAt": "2020-08-19T14:28:18Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java", "diffHunk": "@@ -62,7 +83,225 @@\n \n     protected QueryEngine.Transaction transaction;\n \n-    public static void init() {\n+    // Standard set of test queries used in dialect tests\n+    protected enum TestQuery {\n+        WHERE_METRICS_ONLY (() -> {\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScoreNoAgg\")))\n+                    .metric(invoke(playerStatsTable.getMetric(\"lowScore\")))\n+                    .whereFilter(new FilterPredicate(\n+                            new Path(PlayerStats.class, dictionary, \"highScoreNoAgg\"),\n+                            Operator.GT,\n+                            Arrays.asList(9000)))\n+                    .build();\n+        }),\n+        WHERE_DIMS_ONLY (() -> {\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .whereFilter(new FilterPredicate(\n+                            new Path(PlayerStats.class, dictionary, \"overallRating\"),\n+                            Operator.NOTNULL,\n+                            new ArrayList<Object>()))\n+                    .build();\n+        }),\n+        WHERE_METRICS_AND_DIMS (() -> {\n+            FilterPredicate ratingFilter = new FilterPredicate(\n+                    new Path(PlayerStats.class, dictionary, \"overallRating\"),\n+                    Operator.NOTNULL, new ArrayList<Object>());\n+            FilterPredicate highScoreFilter = new FilterPredicate(\n+                    new Path(PlayerStats.class, dictionary, \"highScore\"),\n+                    Operator.GT,\n+                    Arrays.asList(9000));\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .whereFilter(new AndFilterExpression(ratingFilter, highScoreFilter))\n+                    .build();\n+        }),\n+        WHERE_METRICS_OR_DIMS (() -> {\n+            FilterPredicate ratingFilter = new FilterPredicate(\n+                    new Path(PlayerStats.class, dictionary, \"overallRating\"),\n+                    Operator.NOTNULL, new ArrayList<Object>());\n+            FilterPredicate highScoreFilter = new FilterPredicate(\n+                    new Path(PlayerStats.class, dictionary, \"highScore\"),\n+                    Operator.GT,\n+                    Arrays.asList(9000));\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .whereFilter(new OrFilterExpression(ratingFilter, highScoreFilter))\n+                    .build();\n+        }),\n+        WHERE_METRICS_AGGREGATION (() -> {\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n+                    .metric(invoke(playerStatsTable.getMetric(\"lowScore\")))\n+                    .whereFilter(new FilterPredicate(\n+                            new Path(PlayerStats.class, dictionary, \"highScore\"),\n+                            Operator.GT,\n+                            Arrays.asList(9000)))\n+                    .build();\n+        }),\n+        HAVING_METRICS_ONLY (() -> {\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScoreNoAgg\")))\n+                    .metric(invoke(playerStatsTable.getMetric(\"lowScore\")))\n+                    .havingFilter(new FilterPredicate(\n+                            new Path(PlayerStats.class, dictionary, \"highScoreNoAgg\"),\n+                            Operator.GT,\n+                            Arrays.asList(9000)))\n+                    .build();\n+        }),\n+        HAVING_DIMS_ONLY (() -> {\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .havingFilter(new FilterPredicate(\n+                            new Path(PlayerStats.class, dictionary, \"overallRating\"),\n+                            Operator.NOTNULL,\n+                            new ArrayList<Object>()))\n+                    .build();\n+        }),\n+        HAVING_METRICS_AND_DIMS (() -> {\n+            FilterPredicate ratingFilter = new FilterPredicate(\n+                    new Path(PlayerStats.class, dictionary, \"overallRating\"),\n+                    Operator.NOTNULL, new ArrayList<Object>());\n+            FilterPredicate highScoreFilter = new FilterPredicate(\n+                    new Path(PlayerStats.class, dictionary, \"highScore\"),\n+                    Operator.GT,\n+                    Arrays.asList(9000));\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .havingFilter(new AndFilterExpression(ratingFilter, highScoreFilter))\n+                    .build();\n+        }),\n+        HAVING_METRICS_OR_DIMS (() -> {\n+            FilterPredicate ratingFilter = new FilterPredicate(\n+                    new Path(PlayerStats.class, dictionary, \"overallRating\"),\n+                    Operator.NOTNULL, new ArrayList<Object>());\n+            FilterPredicate highScoreFilter = new FilterPredicate(\n+                    new Path(PlayerStats.class, dictionary, \"highScore\"),\n+                    Operator.GT,\n+                    Arrays.asList(9000));\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .havingFilter(new OrFilterExpression(ratingFilter, highScoreFilter))\n+                    .build();\n+        }),\n+        PAGINATION_TOTAL (() -> {\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"lowScore\")))\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .timeDimension(toProjection(playerStatsTable.getTimeDimension(\"recordedDate\"), TimeGrain.DAY))\n+                    .pagination(new ImmutablePagination(0, 1, false, true))\n+                    .build();\n+        }),\n+        SORT_METRIC_ASC (() -> {\n+            Map<String, Sorting.SortOrder> sortMap = new TreeMap<>();\n+            sortMap.put(\"highScoreNoAgg\", Sorting.SortOrder.asc);\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScoreNoAgg\")))\n+                    .sorting(new SortingImpl(sortMap, PlayerStats.class, dictionary))\n+                    .build();\n+        }),\n+        SORT_METRIC_DESC (() -> {\n+            Map<String, Sorting.SortOrder> sortMap = new TreeMap<>();\n+            sortMap.put(\"highScoreNoAgg\", Sorting.SortOrder.desc);\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScoreNoAgg\")))\n+                    .sorting(new SortingImpl(sortMap, PlayerStats.class, dictionary))\n+                    .build();\n+        }),\n+        SORT_DIM_DESC (() -> {\n+            Map<String, Sorting.SortOrder> sortMap = new TreeMap<>();\n+            sortMap.put(\"overallRating\", Sorting.SortOrder.desc);\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .sorting(new SortingImpl(sortMap, PlayerStats.class, dictionary))\n+                    .build();\n+        }),\n+        SORT_METRIC_AND_DIM_DESC (() -> {\n+            Map<String, Sorting.SortOrder> sortMap = new TreeMap<>();\n+            sortMap.put(\"highScore\", Sorting.SortOrder.desc);\n+            sortMap.put(\"overallRating\", Sorting.SortOrder.desc);\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .sorting(new SortingImpl(sortMap, PlayerStats.class, dictionary))\n+                    .build();\n+        }),\n+        SUBQUERY (() -> {\n+            Table playerStatsViewTable = engine.getTable(\"playerStatsView\");\n+            return Query.builder()\n+                    .table(playerStatsViewTable)\n+                    .metric(invoke(playerStatsViewTable.getMetric(\"highScore\")))\n+                    .build();\n+        }),\n+        ORDER_BY_DIMENSION_NOT_IN_SELECT (() -> {\n+            Map<String, Sorting.SortOrder> sortMap = new TreeMap<>();\n+            sortMap.put(\"overallRating\", Sorting.SortOrder.desc);\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n+                    .sorting(new SortingImpl(sortMap, PlayerStats.class, dictionary))\n+                    .build();\n+        }),\n+        COMPLICATED (() -> {\n+            // Sorting\n+            Map<String, Sorting.SortOrder> sortMap = new TreeMap<>();\n+            sortMap.put(\"highScoreNoAgg\", Sorting.SortOrder.desc);\n+            // WHERE filter\n+            FilterPredicate predicate = new FilterPredicate(\n+                    new Path(PlayerStats.class, dictionary, \"highScoreNoAgg\"),\n+                    Operator.GT,\n+                    Arrays.asList(9000));\n+            try {\n+                return Query.builder()\n+                        .table(playerStatsTable)\n+                        .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n+                        .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                        .timeDimension(toProjection(playerStatsTable.getTimeDimension(\"recordedDate\"), TimeGrain.DAY))\n+                        .pagination(new ImmutablePagination(0, 1, false, true))\n+                        .sorting(new SortingImpl(sortMap, PlayerStats.class, dictionary))\n+                        .whereFilter(predicate)\n+                        // force a join to look up countryIsoCode\n+                        .havingFilter(filterParser.parseFilterExpression(\"countryIsoCode==USA\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75694576e6dc72914350ade3f9c6dfea75b997e0"}, "originalPosition": 256}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Mzk4MzAwOnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialect.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxOTowNDo1MVrOHEPUJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxOTowNDo1MVrOHEPUJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIwNzI3MA==", "bodyText": "We should have comments for the interface methods", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r474207270", "createdAt": "2020-08-20T19:04:51Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialect.java", "diffHunk": "@@ -0,0 +1,16 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects;\n+\n+/**\n+ * Interface for SQL Dialects used to customize SQL queries for specific persistent storage.\n+ */\n+public interface SQLDialect {\n+\n+    String getDialectType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75694576e6dc72914350ade3f9c6dfea75b997e0"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 945, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}