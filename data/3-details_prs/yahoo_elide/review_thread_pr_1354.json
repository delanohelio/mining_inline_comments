{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0ODkxNDA5", "number": 1354, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzowNToyNVrOEA-F1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNjoyNjowM1rOED9oDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDUyNzU2OnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/verify/DynamicConfigVerifier.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzowNToyNVrOGclCxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzowNToyNVrOGclCxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyMDIzMQ==", "bodyText": "Please refer \n  \n    \n      elide/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java\n    \n    \n         Line 64\n      in\n      ece0742\n    \n    \n    \n    \n\n        \n          \n           Options options = prepareOptions(); \n        \n    \n  \n\n. We want to use Options class.", "url": "https://github.com/yahoo/elide/pull/1354#discussion_r432620231", "createdAt": "2020-05-29T17:05:25Z", "author": {"login": "moizarafat"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/verify/DynamicConfigVerifier.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.verify;\n+\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n+import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.BufferedInputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.security.InvalidKeyException;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.PublicKey;\n+import java.security.Signature;\n+import java.security.SignatureException;\n+import java.security.cert.Certificate;\n+import java.util.Base64;\n+\n+@Slf4j\n+public class DynamicConfigVerifier {\n+\n+    /**\n+     * Main Methode to Verify Signature of Model Tar file.\n+     * @param args : expects 3 arguments.\n+     * @throws IllegalStateException\n+     */\n+    public static void main(String[] args) {\n+        if (args == null || args.length != 3) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f9357ce2b19408972d776058df36aa202cd2a85"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDUyODk0OnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/verify/DynamicConfigVerifier.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzowNTo1MlrOGclDrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzowNTo1MlrOGclDrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyMDQ2Mw==", "bodyText": "Please refer \n  \n    \n      elide/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java\n    \n    \n         Line 270\n      in\n      ece0742\n    \n    \n    \n    \n\n        \n          \n           private static void printHelp(Options options) { \n        \n    \n  \n\n to use HelpFormatter.", "url": "https://github.com/yahoo/elide/pull/1354#discussion_r432620463", "createdAt": "2020-05-29T17:05:52Z", "author": {"login": "moizarafat"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/verify/DynamicConfigVerifier.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.verify;\n+\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n+import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.BufferedInputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.security.InvalidKeyException;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.PublicKey;\n+import java.security.Signature;\n+import java.security.SignatureException;\n+import java.security.cert.Certificate;\n+import java.util.Base64;\n+\n+@Slf4j\n+public class DynamicConfigVerifier {\n+\n+    /**\n+     * Main Methode to Verify Signature of Model Tar file.\n+     * @param args : expects 3 arguments.\n+     * @throws IllegalStateException\n+     */\n+    public static void main(String[] args) {\n+        if (args == null || args.length != 3) {\n+            usage();\n+            throw new IllegalStateException(\"No Arguments provided!\");\n+        }\n+        String modelTarFile = args[0];\n+        String signatureFile = args[1];\n+        String publicKeyName = args[2];\n+\n+        if (verify(tarContents(modelTarFile), signatureFile, getPublicKey(publicKeyName))) {\n+            log.info(\"Successfully Validated \" + modelTarFile);\n+        }\n+        else {\n+            log.error(\"Could not verify \" + modelTarFile + \" with details provided\");\n+        }\n+    }\n+\n+    private static PublicKey getPublicKey(String keyName) {\n+        PublicKey publicKey = null;\n+        try {\n+            KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n+            Certificate cert = keyStore.getCertificate(keyName);\n+            publicKey = cert.getPublicKey();\n+        } catch (KeyStoreException e) {\n+            log.error(e.getMessage());\n+            throw new IllegalArgumentException(\"Key \" + keyName + \" is not availabe in keystore\");\n+        }\n+        return publicKey;\n+    }\n+\n+    /**\n+     * Verify signature of tar.gz.\n+     * @param fileList\n+     * @param signature\n+     * @param publicKey\n+     * @return whether the file can be verified by given key & signature.\n+     * @throws Exception\n+     */\n+    public static boolean verify(String fileList, String signature, PublicKey publicKey) {\n+        Signature publicSignature;\n+        try {\n+            publicSignature = Signature.getInstance(\"SHA256withRSA\");\n+            publicSignature.initVerify(publicKey);\n+            publicSignature.update(fileList.getBytes(StandardCharsets.UTF_8));\n+            byte[] signatureBytes = Base64.getDecoder().decode(signature);\n+            return publicSignature.verify(signatureBytes);\n+        } catch (NoSuchAlgorithmException e) {\n+            log.error(e.getMessage());\n+        } catch (InvalidKeyException e) {\n+            log.error(e.getMessage());\n+        } catch (SignatureException e) {\n+            log.error(e.getMessage());\n+        }\n+        return false;\n+    }\n+\n+    private static String tarContents(String archiveFile) {\n+        StringBuffer sb = new StringBuffer();\n+        try (TarArchiveInputStream archive = new TarArchiveInputStream(\n+                new GzipCompressorInputStream(new BufferedInputStream(new FileInputStream(archiveFile))))) {\n+            TarArchiveEntry entry;\n+            while ((entry = archive.getNextTarEntry()) != null) {\n+                sb.append(entry.getName());\n+            }\n+        } catch (IOException e) {\n+            log.error(e.getMessage());\n+            throw new IllegalArgumentException(\"archiveFile \" + archiveFile + \" is not available\");\n+        }\n+        return sb.toString();\n+    }\n+\n+    private static void usage() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f9357ce2b19408972d776058df36aa202cd2a85"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDUzNDExOnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/verify/DynamicConfigVerifier.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzowNjo1MlrOGclGzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzowNjo1MlrOGclGzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyMTI2Mg==", "bodyText": "Lets not catch the exception and just let the original exception propagate unto main.", "url": "https://github.com/yahoo/elide/pull/1354#discussion_r432621262", "createdAt": "2020-05-29T17:06:52Z", "author": {"login": "moizarafat"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/verify/DynamicConfigVerifier.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.verify;\n+\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n+import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.BufferedInputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.security.InvalidKeyException;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.PublicKey;\n+import java.security.Signature;\n+import java.security.SignatureException;\n+import java.security.cert.Certificate;\n+import java.util.Base64;\n+\n+@Slf4j\n+public class DynamicConfigVerifier {\n+\n+    /**\n+     * Main Methode to Verify Signature of Model Tar file.\n+     * @param args : expects 3 arguments.\n+     * @throws IllegalStateException\n+     */\n+    public static void main(String[] args) {\n+        if (args == null || args.length != 3) {\n+            usage();\n+            throw new IllegalStateException(\"No Arguments provided!\");\n+        }\n+        String modelTarFile = args[0];\n+        String signatureFile = args[1];\n+        String publicKeyName = args[2];\n+\n+        if (verify(tarContents(modelTarFile), signatureFile, getPublicKey(publicKeyName))) {\n+            log.info(\"Successfully Validated \" + modelTarFile);\n+        }\n+        else {\n+            log.error(\"Could not verify \" + modelTarFile + \" with details provided\");\n+        }\n+    }\n+\n+    private static PublicKey getPublicKey(String keyName) {\n+        PublicKey publicKey = null;\n+        try {\n+            KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n+            Certificate cert = keyStore.getCertificate(keyName);\n+            publicKey = cert.getPublicKey();\n+        } catch (KeyStoreException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f9357ce2b19408972d776058df36aa202cd2a85"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDU0MTczOnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/verify/DynamicConfigVerifier.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzowODoxM1rOGclLVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzowODoxM1rOGclLVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyMjQyMg==", "bodyText": "same, let the exceptions propagate back as is.", "url": "https://github.com/yahoo/elide/pull/1354#discussion_r432622422", "createdAt": "2020-05-29T17:08:13Z", "author": {"login": "moizarafat"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/verify/DynamicConfigVerifier.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.verify;\n+\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n+import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.BufferedInputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.security.InvalidKeyException;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.PublicKey;\n+import java.security.Signature;\n+import java.security.SignatureException;\n+import java.security.cert.Certificate;\n+import java.util.Base64;\n+\n+@Slf4j\n+public class DynamicConfigVerifier {\n+\n+    /**\n+     * Main Methode to Verify Signature of Model Tar file.\n+     * @param args : expects 3 arguments.\n+     * @throws IllegalStateException\n+     */\n+    public static void main(String[] args) {\n+        if (args == null || args.length != 3) {\n+            usage();\n+            throw new IllegalStateException(\"No Arguments provided!\");\n+        }\n+        String modelTarFile = args[0];\n+        String signatureFile = args[1];\n+        String publicKeyName = args[2];\n+\n+        if (verify(tarContents(modelTarFile), signatureFile, getPublicKey(publicKeyName))) {\n+            log.info(\"Successfully Validated \" + modelTarFile);\n+        }\n+        else {\n+            log.error(\"Could not verify \" + modelTarFile + \" with details provided\");\n+        }\n+    }\n+\n+    private static PublicKey getPublicKey(String keyName) {\n+        PublicKey publicKey = null;\n+        try {\n+            KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n+            Certificate cert = keyStore.getCertificate(keyName);\n+            publicKey = cert.getPublicKey();\n+        } catch (KeyStoreException e) {\n+            log.error(e.getMessage());\n+            throw new IllegalArgumentException(\"Key \" + keyName + \" is not availabe in keystore\");\n+        }\n+        return publicKey;\n+    }\n+\n+    /**\n+     * Verify signature of tar.gz.\n+     * @param fileList\n+     * @param signature\n+     * @param publicKey\n+     * @return whether the file can be verified by given key & signature.\n+     * @throws Exception\n+     */\n+    public static boolean verify(String fileList, String signature, PublicKey publicKey) {\n+        Signature publicSignature;\n+        try {\n+            publicSignature = Signature.getInstance(\"SHA256withRSA\");\n+            publicSignature.initVerify(publicKey);\n+            publicSignature.update(fileList.getBytes(StandardCharsets.UTF_8));\n+            byte[] signatureBytes = Base64.getDecoder().decode(signature);\n+            return publicSignature.verify(signatureBytes);\n+        } catch (NoSuchAlgorithmException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f9357ce2b19408972d776058df36aa202cd2a85"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDU0Mjg4OnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/verify/DynamicConfigVerifier.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzowODozMlrOGclMJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzowODozMlrOGclMJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyMjYzMQ==", "bodyText": "Let exception propagate as is.", "url": "https://github.com/yahoo/elide/pull/1354#discussion_r432622631", "createdAt": "2020-05-29T17:08:32Z", "author": {"login": "moizarafat"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/verify/DynamicConfigVerifier.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.verify;\n+\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n+import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.BufferedInputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.security.InvalidKeyException;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.PublicKey;\n+import java.security.Signature;\n+import java.security.SignatureException;\n+import java.security.cert.Certificate;\n+import java.util.Base64;\n+\n+@Slf4j\n+public class DynamicConfigVerifier {\n+\n+    /**\n+     * Main Methode to Verify Signature of Model Tar file.\n+     * @param args : expects 3 arguments.\n+     * @throws IllegalStateException\n+     */\n+    public static void main(String[] args) {\n+        if (args == null || args.length != 3) {\n+            usage();\n+            throw new IllegalStateException(\"No Arguments provided!\");\n+        }\n+        String modelTarFile = args[0];\n+        String signatureFile = args[1];\n+        String publicKeyName = args[2];\n+\n+        if (verify(tarContents(modelTarFile), signatureFile, getPublicKey(publicKeyName))) {\n+            log.info(\"Successfully Validated \" + modelTarFile);\n+        }\n+        else {\n+            log.error(\"Could not verify \" + modelTarFile + \" with details provided\");\n+        }\n+    }\n+\n+    private static PublicKey getPublicKey(String keyName) {\n+        PublicKey publicKey = null;\n+        try {\n+            KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n+            Certificate cert = keyStore.getCertificate(keyName);\n+            publicKey = cert.getPublicKey();\n+        } catch (KeyStoreException e) {\n+            log.error(e.getMessage());\n+            throw new IllegalArgumentException(\"Key \" + keyName + \" is not availabe in keystore\");\n+        }\n+        return publicKey;\n+    }\n+\n+    /**\n+     * Verify signature of tar.gz.\n+     * @param fileList\n+     * @param signature\n+     * @param publicKey\n+     * @return whether the file can be verified by given key & signature.\n+     * @throws Exception\n+     */\n+    public static boolean verify(String fileList, String signature, PublicKey publicKey) {\n+        Signature publicSignature;\n+        try {\n+            publicSignature = Signature.getInstance(\"SHA256withRSA\");\n+            publicSignature.initVerify(publicKey);\n+            publicSignature.update(fileList.getBytes(StandardCharsets.UTF_8));\n+            byte[] signatureBytes = Base64.getDecoder().decode(signature);\n+            return publicSignature.verify(signatureBytes);\n+        } catch (NoSuchAlgorithmException e) {\n+            log.error(e.getMessage());\n+        } catch (InvalidKeyException e) {\n+            log.error(e.getMessage());\n+        } catch (SignatureException e) {\n+            log.error(e.getMessage());\n+        }\n+        return false;\n+    }\n+\n+    private static String tarContents(String archiveFile) {\n+        StringBuffer sb = new StringBuffer();\n+        try (TarArchiveInputStream archive = new TarArchiveInputStream(\n+                new GzipCompressorInputStream(new BufferedInputStream(new FileInputStream(archiveFile))))) {\n+            TarArchiveEntry entry;\n+            while ((entry = archive.getNextTarEntry()) != null) {\n+                sb.append(entry.getName());\n+            }\n+        } catch (IOException e) {\n+            log.error(e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f9357ce2b19408972d776058df36aa202cd2a85"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDU0NjM1OnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/test/java/com/yahoo/elide/contrib/dynamicconfighelpers/verify/DynamicConfigVerifiesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzowOTozMlrOGclOVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzowOTozMlrOGclOVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyMzE5MA==", "bodyText": "Since this method is used by all test cases, we can annotate with @BeforeEach instead of calling setup from the individual tests.", "url": "https://github.com/yahoo/elide/pull/1354#discussion_r432623190", "createdAt": "2020-05-29T17:09:32Z", "author": {"login": "moizarafat"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/test/java/com/yahoo/elide/contrib/dynamicconfighelpers/verify/DynamicConfigVerifiesTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.verify;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.PrivateKey;\n+import java.security.SecureRandom;\n+import java.security.Signature;\n+import java.util.Base64;\n+\n+public class DynamicConfigVerifiesTest {\n+\n+    private KeyPair kp;\n+    private String signature;\n+\n+    private static KeyPair generateKeyPair() throws Exception {\n+        KeyPairGenerator generator = KeyPairGenerator.getInstance(\"RSA\");\n+        generator.initialize(2048, new SecureRandom());\n+        KeyPair pair = generator.generateKeyPair();\n+        return pair;\n+    }\n+\n+    private static String sign(String data, PrivateKey privateKey) throws Exception {\n+        Signature privateSignature = Signature.getInstance(\"SHA256withRSA\");\n+        privateSignature.initSign(privateKey);\n+        privateSignature.update(data.getBytes(StandardCharsets.UTF_8));\n+\n+        byte[] signature = privateSignature.sign();\n+\n+        return Base64.getEncoder().encodeToString(signature);\n+    }\n+\n+    private void setup() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f9357ce2b19408972d776058df36aa202cd2a85"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDU0Njk5OnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/test/java/com/yahoo/elide/contrib/dynamicconfighelpers/verify/DynamicConfigVerifiesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzowOTo0M1rOGclOvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzowOTo0M1rOGclOvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyMzI5Mw==", "bodyText": "this is same as setup method.", "url": "https://github.com/yahoo/elide/pull/1354#discussion_r432623293", "createdAt": "2020-05-29T17:09:43Z", "author": {"login": "moizarafat"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/test/java/com/yahoo/elide/contrib/dynamicconfighelpers/verify/DynamicConfigVerifiesTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.verify;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.PrivateKey;\n+import java.security.SecureRandom;\n+import java.security.Signature;\n+import java.util.Base64;\n+\n+public class DynamicConfigVerifiesTest {\n+\n+    private KeyPair kp;\n+    private String signature;\n+\n+    private static KeyPair generateKeyPair() throws Exception {\n+        KeyPairGenerator generator = KeyPairGenerator.getInstance(\"RSA\");\n+        generator.initialize(2048, new SecureRandom());\n+        KeyPair pair = generator.generateKeyPair();\n+        return pair;\n+    }\n+\n+    private static String sign(String data, PrivateKey privateKey) throws Exception {\n+        Signature privateSignature = Signature.getInstance(\"SHA256withRSA\");\n+        privateSignature.initSign(privateKey);\n+        privateSignature.update(data.getBytes(StandardCharsets.UTF_8));\n+\n+        byte[] signature = privateSignature.sign();\n+\n+        return Base64.getEncoder().encodeToString(signature);\n+    }\n+\n+    private void setup() throws Exception {\n+        kp = generateKeyPair();\n+        signature = sign(\"testing-signature\", kp.getPrivate());\n+    }\n+\n+    @Test\n+    public void testValidSignature() throws Exception {\n+        setup();\n+        assertTrue(DynamicConfigVerifier.verify(\"testing-signature\", signature, kp.getPublic()));\n+    }\n+\n+    @Test\n+    public void testInvalidSignature() throws Exception {\n+        setup();\n+        assertFalse(DynamicConfigVerifier.verify(\"invalid-signature\", signature, kp.getPublic()));\n+    }\n+\n+    @Test\n+    public void testFileSignature() throws Exception {\n+        kp = generateKeyPair();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f9357ce2b19408972d776058df36aa202cd2a85"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDU1NDQ3OnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/verify/DynamicConfigVerifier.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzoxMjoxN1rOGclTkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzoxMjoxN1rOGclTkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyNDUzMQ==", "bodyText": "readTarFile will be a better name here. tarContents sounds like we are trying to generate a tar.", "url": "https://github.com/yahoo/elide/pull/1354#discussion_r432624531", "createdAt": "2020-05-29T17:12:17Z", "author": {"login": "moizarafat"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/verify/DynamicConfigVerifier.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.verify;\n+\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n+import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.BufferedInputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.security.InvalidKeyException;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.PublicKey;\n+import java.security.Signature;\n+import java.security.SignatureException;\n+import java.security.cert.Certificate;\n+import java.util.Base64;\n+\n+@Slf4j\n+public class DynamicConfigVerifier {\n+\n+    /**\n+     * Main Methode to Verify Signature of Model Tar file.\n+     * @param args : expects 3 arguments.\n+     * @throws IllegalStateException\n+     */\n+    public static void main(String[] args) {\n+        if (args == null || args.length != 3) {\n+            usage();\n+            throw new IllegalStateException(\"No Arguments provided!\");\n+        }\n+        String modelTarFile = args[0];\n+        String signatureFile = args[1];\n+        String publicKeyName = args[2];\n+\n+        if (verify(tarContents(modelTarFile), signatureFile, getPublicKey(publicKeyName))) {\n+            log.info(\"Successfully Validated \" + modelTarFile);\n+        }\n+        else {\n+            log.error(\"Could not verify \" + modelTarFile + \" with details provided\");\n+        }\n+    }\n+\n+    private static PublicKey getPublicKey(String keyName) {\n+        PublicKey publicKey = null;\n+        try {\n+            KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n+            Certificate cert = keyStore.getCertificate(keyName);\n+            publicKey = cert.getPublicKey();\n+        } catch (KeyStoreException e) {\n+            log.error(e.getMessage());\n+            throw new IllegalArgumentException(\"Key \" + keyName + \" is not availabe in keystore\");\n+        }\n+        return publicKey;\n+    }\n+\n+    /**\n+     * Verify signature of tar.gz.\n+     * @param fileList\n+     * @param signature\n+     * @param publicKey\n+     * @return whether the file can be verified by given key & signature.\n+     * @throws Exception\n+     */\n+    public static boolean verify(String fileList, String signature, PublicKey publicKey) {\n+        Signature publicSignature;\n+        try {\n+            publicSignature = Signature.getInstance(\"SHA256withRSA\");\n+            publicSignature.initVerify(publicKey);\n+            publicSignature.update(fileList.getBytes(StandardCharsets.UTF_8));\n+            byte[] signatureBytes = Base64.getDecoder().decode(signature);\n+            return publicSignature.verify(signatureBytes);\n+        } catch (NoSuchAlgorithmException e) {\n+            log.error(e.getMessage());\n+        } catch (InvalidKeyException e) {\n+            log.error(e.getMessage());\n+        } catch (SignatureException e) {\n+            log.error(e.getMessage());\n+        }\n+        return false;\n+    }\n+\n+    private static String tarContents(String archiveFile) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f9357ce2b19408972d776058df36aa202cd2a85"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDU2NTEyOnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/verify/DynamicConfigVerifier.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzoxNTo1MVrOGclajg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzoxNTo1MVrOGclajg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyNjMxOA==", "bodyText": "list the exceptions instead of generic exception.", "url": "https://github.com/yahoo/elide/pull/1354#discussion_r432626318", "createdAt": "2020-05-29T17:15:51Z", "author": {"login": "moizarafat"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/verify/DynamicConfigVerifier.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.verify;\n+\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n+import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.BufferedInputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.security.InvalidKeyException;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.PublicKey;\n+import java.security.Signature;\n+import java.security.SignatureException;\n+import java.security.cert.Certificate;\n+import java.util.Base64;\n+\n+@Slf4j\n+public class DynamicConfigVerifier {\n+\n+    /**\n+     * Main Methode to Verify Signature of Model Tar file.\n+     * @param args : expects 3 arguments.\n+     * @throws IllegalStateException\n+     */\n+    public static void main(String[] args) {\n+        if (args == null || args.length != 3) {\n+            usage();\n+            throw new IllegalStateException(\"No Arguments provided!\");\n+        }\n+        String modelTarFile = args[0];\n+        String signatureFile = args[1];\n+        String publicKeyName = args[2];\n+\n+        if (verify(tarContents(modelTarFile), signatureFile, getPublicKey(publicKeyName))) {\n+            log.info(\"Successfully Validated \" + modelTarFile);\n+        }\n+        else {\n+            log.error(\"Could not verify \" + modelTarFile + \" with details provided\");\n+        }\n+    }\n+\n+    private static PublicKey getPublicKey(String keyName) {\n+        PublicKey publicKey = null;\n+        try {\n+            KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n+            Certificate cert = keyStore.getCertificate(keyName);\n+            publicKey = cert.getPublicKey();\n+        } catch (KeyStoreException e) {\n+            log.error(e.getMessage());\n+            throw new IllegalArgumentException(\"Key \" + keyName + \" is not availabe in keystore\");\n+        }\n+        return publicKey;\n+    }\n+\n+    /**\n+     * Verify signature of tar.gz.\n+     * @param fileList\n+     * @param signature\n+     * @param publicKey\n+     * @return whether the file can be verified by given key & signature.\n+     * @throws Exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f9357ce2b19408972d776058df36aa202cd2a85"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjkzMzQ1OnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/test/java/com/yahoo/elide/contrib/dynamicconfighelpers/verify/DynamicConfigVerifiesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNDoyOTowNFrOGd0c-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNDoyOTowNFrOGd0c-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkyMTI3NQ==", "bodyText": "Arguments is spelled incorrectly in this class a few times.", "url": "https://github.com/yahoo/elide/pull/1354#discussion_r433921275", "createdAt": "2020-06-02T14:29:04Z", "author": {"login": "moizarafat"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/test/java/com/yahoo/elide/contrib/dynamicconfighelpers/verify/DynamicConfigVerifiesTest.java", "diffHunk": "@@ -40,28 +45,47 @@ private static String sign(String data, PrivateKey privateKey) throws Exception\n         return Base64.getEncoder().encodeToString(signature);\n     }\n \n-    private void setup() throws Exception {\n+    @BeforeAll\n+    public static void setup() throws Exception {\n         kp = generateKeyPair();\n-        signature = sign(\"testing-signature\", kp.getPrivate());\n+        signature = sign(\"testing-signature5\", kp.getPrivate());\n     }\n \n     @Test\n     public void testValidSignature() throws Exception {\n-        setup();\n-        assertTrue(DynamicConfigVerifier.verify(\"testing-signature\", signature, kp.getPublic()));\n+        assertTrue(DynamicConfigVerifier.verify(\"testing-signature\", 5, signature, kp.getPublic()));\n     }\n \n     @Test\n     public void testInvalidSignature() throws Exception {\n-        setup();\n-        assertFalse(DynamicConfigVerifier.verify(\"invalid-signature\", signature, kp.getPublic()));\n+        assertFalse(DynamicConfigVerifier.verify(\"invalid-signature\", 5, signature, kp.getPublic()));\n     }\n \n     @Test\n-    public void testFileSignature() throws Exception {\n-        kp = generateKeyPair();\n-        signature = sign(\"testing-signature\", kp.getPrivate());\n+    public void testHelpArgumnents() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45ed1c58ee31f4aeb51c15b2a653cacba0760c81"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDUwOTYyOnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMToxMzoxOFrOGeEKgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMToxMzoxOFrOGeEKgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE3ODY4OQ==", "bodyText": "indentation is off here.", "url": "https://github.com/yahoo/elide/pull/1354#discussion_r434178689", "createdAt": "2020-06-02T21:13:18Z", "author": {"login": "moizarafat"}, "path": "elide-contrib/elide-dynamic-config-helpers/pom.xml", "diffHunk": "@@ -76,7 +77,12 @@\n             <version>${commons-io.version}</version>\n         </dependency>\n         <dependency>\n-            <groupId>org.slf4j</groupId>\n+            <groupId>org.apache.commons</groupId>\n+            <artifactId>commons-compress</artifactId>\n+            <version>${commons-compress.version}</version>\n+        </dependency>\n+        <dependency>\n+        <groupId>org.slf4j</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e80cffbb26f3044b7b0cb05e5f890253b888b5aa"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODg5OTgyOnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/verify/DynamicConfigVerifier.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMjoxNDowMlrOGevaeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMjoxNDowMlrOGevaeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg4NzI5MA==", "bodyText": "Java doc comment explaining what this is for", "url": "https://github.com/yahoo/elide/pull/1354#discussion_r434887290", "createdAt": "2020-06-03T22:14:02Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/verify/DynamicConfigVerifier.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.verify;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.MissingOptionException;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n+import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;\n+import org.apache.commons.io.FileUtils;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.BufferedInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.security.InvalidKeyException;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.PublicKey;\n+import java.security.Signature;\n+import java.security.SignatureException;\n+import java.security.cert.Certificate;\n+import java.util.Base64;\n+\n+@Slf4j\n+public class DynamicConfigVerifier {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e6d3d8cc3a2c0a6a5c9382b3aa6046773bd735"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODkwNjAzOnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/verify/DynamicConfigVerifier.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMjoxNjoxN1rOGeveIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMjoxNjoxN1rOGeveIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg4ODIyNA==", "bodyText": "This seems to be only verifying the names of the files but not the file contents.  Am I reading this correct?   If so - we'll need to verify the contents as well.", "url": "https://github.com/yahoo/elide/pull/1354#discussion_r434888224", "createdAt": "2020-06-03T22:16:17Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/verify/DynamicConfigVerifier.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.verify;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.MissingOptionException;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n+import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;\n+import org.apache.commons.io.FileUtils;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.BufferedInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.security.InvalidKeyException;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.PublicKey;\n+import java.security.Signature;\n+import java.security.SignatureException;\n+import java.security.cert.Certificate;\n+import java.util.Base64;\n+\n+@Slf4j\n+public class DynamicConfigVerifier {\n+\n+    /**\n+     * Main Method to Verify Signature of Model Tar file.\n+     * @param args : expects 3 arguments.\n+     * @throws ParseException\n+     * @throws IOException\n+     * @throws KeyStoreException\n+     * @throws FileNotFoundException\n+     * @throws SignatureException\n+     * @throws NoSuchAlgorithmException\n+     * @throws InvalidKeyException\n+     *\n+     */\n+    public static void main(String[] args) throws ParseException, InvalidKeyException, NoSuchAlgorithmException,\n+    SignatureException, FileNotFoundException, KeyStoreException, IOException {\n+\n+        Options options = prepareOptions();\n+        CommandLine cli = new DefaultParser().parse(options, args);\n+\n+        if (cli.hasOption(\"help\")) {\n+            printHelp(options);\n+            return;\n+        }\n+        if (!cli.hasOption(\"tarFile\") || !cli.hasOption(\"signatureFile\") || !cli.hasOption(\"publicKeyName\")) {\n+            printHelp(options);\n+            throw new MissingOptionException(\"Missing required option\");\n+        }\n+\n+        String modelTarFile = cli.getOptionValue(\"tarFile\");\n+        String signatureFile = cli.getOptionValue(\"signatureFile\");\n+        String publicKeyName = cli.getOptionValue(\"publicKeyName\");\n+        long tarFileSize = getFileSize(modelTarFile);\n+\n+        if (verify(readTarContents(modelTarFile), tarFileSize,\n+                signatureFile, getPublicKey(publicKeyName))) {\n+            log.info(\"Successfully Validated \" + modelTarFile);\n+        }\n+        else {\n+            log.error(\"Could not verify \" + modelTarFile + \" with details provided\");\n+        }\n+    }\n+\n+    /**\n+     * Verify signature of tar.gz.\n+     * @param fileList : list of files\n+     * @param sizeOfFile : size of tar file\n+     * @param signature : file containing signature\n+     * @param publicKey : public key name\n+     * @return whether the file can be verified by given key and signature\n+     * @throws NoSuchAlgorithmException\n+     * @throws InvalidKeyException\n+     * @throws SignatureException\n+     */\n+    public static boolean verify(String fileList, long sizeOfFile, String signature, PublicKey publicKey)\n+            throws NoSuchAlgorithmException, InvalidKeyException, SignatureException {\n+\n+        Signature publicSignature;\n+\n+        publicSignature = Signature.getInstance(\"SHA256withRSA\");\n+        publicSignature.initVerify(publicKey);\n+        publicSignature.update((fileList + sizeOfFile).getBytes(StandardCharsets.UTF_8));\n+        byte[] signatureBytes = Base64.getDecoder().decode(signature);\n+        return publicSignature.verify(signatureBytes);\n+    }\n+\n+    /**\n+     * Get tar file size.\n+     * @param modelTarFile\n+     * @return size of tar file\n+     */\n+    private static long getFileSize(String modelTarFile) {\n+        return FileUtils.sizeOf(new File(modelTarFile));\n+    }\n+\n+    /**\n+     * Retrieve public key from Key Store.\n+     * @param keyName : name of the public key\n+     * @return publickey\n+     */\n+    private static PublicKey getPublicKey(String keyName) throws KeyStoreException {\n+        PublicKey publicKey = null;\n+        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n+        Certificate cert = keyStore.getCertificate(keyName);\n+        publicKey = cert.getPublicKey();\n+        return publicKey;\n+    }\n+\n+    private static String readTarContents(String archiveFile) throws FileNotFoundException, IOException {\n+        StringBuffer sb = new StringBuffer();\n+        TarArchiveInputStream archive = new TarArchiveInputStream(\n+                new GzipCompressorInputStream(new BufferedInputStream(new FileInputStream(archiveFile))));\n+        TarArchiveEntry entry;\n+        while ((entry = archive.getNextTarEntry()) != null) {\n+            sb.append(entry.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e6d3d8cc3a2c0a6a5c9382b3aa6046773bd735"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODkxMTU2OnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/verify/DynamicConfigVerifier.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMjoxODoyN1rOGevhdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMDoyMzo1NlrOGg0rGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg4OTA3OA==", "bodyText": "We'll want a way to programmatically do this as well as run this from the command line.", "url": "https://github.com/yahoo/elide/pull/1354#discussion_r434889078", "createdAt": "2020-06-03T22:18:27Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/verify/DynamicConfigVerifier.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.verify;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.MissingOptionException;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n+import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;\n+import org.apache.commons.io.FileUtils;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.BufferedInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.security.InvalidKeyException;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.PublicKey;\n+import java.security.Signature;\n+import java.security.SignatureException;\n+import java.security.cert.Certificate;\n+import java.util.Base64;\n+\n+@Slf4j\n+public class DynamicConfigVerifier {\n+\n+    /**\n+     * Main Method to Verify Signature of Model Tar file.\n+     * @param args : expects 3 arguments.\n+     * @throws ParseException\n+     * @throws IOException\n+     * @throws KeyStoreException\n+     * @throws FileNotFoundException\n+     * @throws SignatureException\n+     * @throws NoSuchAlgorithmException\n+     * @throws InvalidKeyException\n+     *\n+     */\n+    public static void main(String[] args) throws ParseException, InvalidKeyException, NoSuchAlgorithmException,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e6d3d8cc3a2c0a6a5c9382b3aa6046773bd735"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3MDYxNg==", "bodyText": "public static boolean verify(String fileContent, String signature, PublicKey publicKey) throws NoSuchAlgorithmException, InvalidKeyException, SignatureException {\nverify function can be called programmatically to verify the tar signature", "url": "https://github.com/yahoo/elide/pull/1354#discussion_r437070616", "createdAt": "2020-06-09T00:23:56Z", "author": {"login": "AvaniMakwana"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/verify/DynamicConfigVerifier.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.verify;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.MissingOptionException;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n+import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;\n+import org.apache.commons.io.FileUtils;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.BufferedInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.security.InvalidKeyException;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.PublicKey;\n+import java.security.Signature;\n+import java.security.SignatureException;\n+import java.security.cert.Certificate;\n+import java.util.Base64;\n+\n+@Slf4j\n+public class DynamicConfigVerifier {\n+\n+    /**\n+     * Main Method to Verify Signature of Model Tar file.\n+     * @param args : expects 3 arguments.\n+     * @throws ParseException\n+     * @throws IOException\n+     * @throws KeyStoreException\n+     * @throws FileNotFoundException\n+     * @throws SignatureException\n+     * @throws NoSuchAlgorithmException\n+     * @throws InvalidKeyException\n+     *\n+     */\n+    public static void main(String[] args) throws ParseException, InvalidKeyException, NoSuchAlgorithmException,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg4OTA3OA=="}, "originalCommit": {"oid": "e6e6d3d8cc3a2c0a6a5c9382b3aa6046773bd735"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTg5OTU4OnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/verify/DynamicConfigVerifier.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNjoyNDowMVrOGhSjGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNjoyNDowMVrOGhSjGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2MDA5MA==", "bodyText": "You should set the exit status on failure to something that will cause this to abort shell scripts.", "url": "https://github.com/yahoo/elide/pull/1354#discussion_r437560090", "createdAt": "2020-06-09T16:24:01Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/verify/DynamicConfigVerifier.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.verify;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.MissingOptionException;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n+import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;\n+import org.apache.commons.io.FileUtils;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.BufferedInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.security.InvalidKeyException;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.PublicKey;\n+import java.security.Signature;\n+import java.security.SignatureException;\n+import java.security.cert.Certificate;\n+import java.util.Base64;\n+\n+/**\n+ * Util class to Verify model tar.gz file's RSA signature with available public key in key store.\n+ */\n+@Slf4j\n+public class DynamicConfigVerifier {\n+\n+    /**\n+     * Main Method to Verify Signature of Model Tar file.\n+     * @param args : expects 3 arguments.\n+     * @throws ParseException\n+     * @throws IOException\n+     * @throws KeyStoreException\n+     * @throws FileNotFoundException\n+     * @throws SignatureException\n+     * @throws NoSuchAlgorithmException\n+     * @throws InvalidKeyException\n+     * @throws MissingOptionException\n+     */\n+    public static void main(String[] args) throws ParseException, InvalidKeyException, NoSuchAlgorithmException,\n+            SignatureException, FileNotFoundException, KeyStoreException, IOException {\n+\n+        Options options = prepareOptions();\n+        CommandLine cli = new DefaultParser().parse(options, args);\n+\n+        if (cli.hasOption(\"help\")) {\n+            printHelp(options);\n+            return;\n+        }\n+        if (!cli.hasOption(\"tarFile\") || !cli.hasOption(\"signatureFile\") || !cli.hasOption(\"publicKeyName\")) {\n+            printHelp(options);\n+            throw new MissingOptionException(\"Missing required option\");\n+        }\n+\n+        String modelTarFile = cli.getOptionValue(\"tarFile\");\n+        String signatureFile = cli.getOptionValue(\"signatureFile\");\n+        String publicKeyName = cli.getOptionValue(\"publicKeyName\");\n+\n+        if (verify(readTarContents(modelTarFile), signatureFile, getPublicKey(publicKeyName))) {\n+            log.info(\"Successfully Validated \" + modelTarFile);\n+        }\n+        else {\n+            log.error(\"Could not verify \" + modelTarFile + \" with details provided\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64685aedf257eb8bd7f77cc80d2784a97f3a2b16"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTkwODYxOnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/test/java/com/yahoo/elide/contrib/dynamicconfighelpers/verify/DynamicConfigVerifiesTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNjoyNjowM1rOGhSokg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNjoyNjowM1rOGhSokg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2MTQ5MA==", "bodyText": "We need to add a test that creates a gzipped tarball, signs it, and then verifies your functions can do the reverse and verify the signature.", "url": "https://github.com/yahoo/elide/pull/1354#discussion_r437561490", "createdAt": "2020-06-09T16:26:03Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/test/java/com/yahoo/elide/contrib/dynamicconfighelpers/verify/DynamicConfigVerifiesTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.verify;\n+\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import org.apache.commons.cli.MissingArgumentException;\n+import org.apache.commons.cli.MissingOptionException;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.PrivateKey;\n+import java.security.SecureRandom;\n+import java.security.Signature;\n+import java.util.Base64;\n+\n+public class DynamicConfigVerifiesTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64685aedf257eb8bd7f77cc80d2784a97f3a2b16"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 984, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}