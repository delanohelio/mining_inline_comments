{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwMjQ0NzE0", "number": 1584, "title": "Async model Spec Changes ", "bodyText": "Resolves #1272\nDescription\ni) Changes to Async Model to support splitting into 2 models:\nAsyncQuery: Regular Async Query Requests\nTableExport: Table Export Async Requests (To Be Added in a separate PR)\nii) Combined the Hooks into single class.\niii) Use of ThreadLocal for maintaining thread state instead of transient field in AsyncAPI.\niv) Class Name and Comments updated to reflect model names.\nHow Has This Been Tested?\nExisting Test case pass\nLicense\nI confirm that this contribution is made under an Apache 2.0 license and that I have the authority necessary to make this contribution on behalf of its copyright owner.", "createdAt": "2020-10-08T23:14:46Z", "url": "https://github.com/yahoo/elide/pull/1584", "merged": true, "mergeCommit": {"oid": "773ffa284a4fdf2adac8eaed6ad8903092a43602"}, "closed": true, "closedAt": "2020-10-26T16:13:29Z", "author": {"login": "moizarafat"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdQ8nX4ABqjM4NjE3Nzc2NjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWWveQAFqTUxNjk0MjkyMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0f76e1fb4a1618c0dfb2d075ae5f1860e9be8af2", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/0f76e1fb4a1618c0dfb2d075ae5f1860e9be8af2", "committedDate": "2020-10-09T19:47:22Z", "message": "Remove commented code"}, "afterCommit": {"oid": "efff002dddfa81cfbe5a7fd721bf89138833e7c2", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/efff002dddfa81cfbe5a7fd721bf89138833e7c2", "committedDate": "2020-10-09T20:57:01Z", "message": "Redesign"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "21cde2effb3a58d75d7dfe2f5d6c315d5283e2a2", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/21cde2effb3a58d75d7dfe2f5d6c315d5283e2a2", "committedDate": "2020-10-09T23:06:12Z", "message": "Refactor"}, "afterCommit": {"oid": "36783dd2fe5ff20c50e0dbe86cd7e2d6b1ba6b75", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/36783dd2fe5ff20c50e0dbe86cd7e2d6b1ba6b75", "committedDate": "2020-10-09T23:22:25Z", "message": "Redesign"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "36783dd2fe5ff20c50e0dbe86cd7e2d6b1ba6b75", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/36783dd2fe5ff20c50e0dbe86cd7e2d6b1ba6b75", "committedDate": "2020-10-09T23:22:25Z", "message": "Redesign"}, "afterCommit": {"oid": "69ae2d6af33009923bea0e304ea5ffe637a4225e", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/69ae2d6af33009923bea0e304ea5ffe637a4225e", "committedDate": "2020-10-09T23:27:02Z", "message": "Redesign"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "69ae2d6af33009923bea0e304ea5ffe637a4225e", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/69ae2d6af33009923bea0e304ea5ffe637a4225e", "committedDate": "2020-10-09T23:27:02Z", "message": "Redesign"}, "afterCommit": {"oid": "be914fd4c46b0f3e5f757382de27733ac1fad521", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/be914fd4c46b0f3e5f757382de27733ac1fad521", "committedDate": "2020-10-10T00:44:56Z", "message": "Redesign"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2OTM1MTE1", "url": "https://github.com/yahoo/elide/pull/1584#pullrequestreview-506935115", "createdAt": "2020-10-12T21:41:13Z", "commit": {"oid": "be914fd4c46b0f3e5f757382de27733ac1fad521"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMTo0MToxNFrOHgOMRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMjowMzo1N1rOHgOsEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU0ODk5OA==", "bodyText": "Since we have so many other UUID fields, we probably don't need a separate natural key field.", "url": "https://github.com/yahoo/elide/pull/1584#discussion_r503548998", "createdAt": "2020-10-12T21:41:14Z", "author": {"login": "aklish"}, "path": "elide-async/src/main/java/com/yahoo/elide/async/models/AsyncAPI.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.models;\n+\n+import com.yahoo.elide.annotation.ComputedAttribute;\n+import com.yahoo.elide.annotation.CreatePermission;\n+import com.yahoo.elide.annotation.Exclude;\n+import com.yahoo.elide.annotation.UpdatePermission;\n+import com.yahoo.elide.async.service.AsyncAPIUpdateThread;\n+import com.yahoo.elide.async.service.AsyncExecutorService;\n+import com.yahoo.elide.security.User;\n+\n+import org.apache.http.NoHttpResponseException;\n+\n+import lombok.Data;\n+\n+import java.net.URISyntaxException;\n+import java.util.Date;\n+import java.util.UUID;\n+\n+import javax.persistence.Column;\n+import javax.persistence.DiscriminatorColumn;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.PreUpdate;\n+import javax.persistence.Transient;\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.Pattern;\n+\n+/**\n+ * Base Model Class for Async Query.\n+ */\n+@Entity\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n+@DiscriminatorColumn\n+@Data\n+public abstract class AsyncAPI implements PrincipalOwned {\n+    @Id\n+    @Column(columnDefinition = \"varchar(36)\")\n+    @Pattern(regexp = \"^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\",\n+    message = \"id not of pattern UUID\")\n+    private String id = UUID.randomUUID().toString(); //Provided by client or generated if missing on create.\n+\n+    protected String query;  //JSON-API PATH or GraphQL payload.\n+\n+    protected QueryType queryType; //GRAPHQL, JSONAPI\n+\n+    @Exclude\n+    @Column(columnDefinition = \"varchar(36)\")\n+    protected String requestId = UUID.randomUUID().toString();\n+\n+    @CreatePermission(expression = \"Prefab.Role.None\")\n+    private String principalName;\n+\n+    @UpdatePermission(expression = \"(Principal is Admin OR Principal is Owner) AND value is Cancelled\")\n+    @CreatePermission(expression = \"value is Queued\")\n+    @Enumerated(EnumType.STRING)\n+    private QueryStatus status = QueryStatus.QUEUED;\n+\n+    private Date createdOn = new Date();\n+\n+    private Date updatedOn = new Date();\n+\n+    @Transient\n+    @Max(10)\n+    @ComputedAttribute\n+    private Integer asyncAfterSeconds = 10;\n+\n+    @Exclude\n+    protected String naturalKey = UUID.randomUUID().toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be914fd4c46b0f3e5f757382de27733ac1fad521"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU1MDQ2Ng==", "bodyText": "Why do we need two cleaners?   Can't we have just one?", "url": "https://github.com/yahoo/elide/pull/1584#discussion_r503550466", "createdAt": "2020-10-12T21:45:06Z", "author": {"login": "aklish"}, "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncCleanerService.java", "diffHunk": "@@ -37,8 +38,10 @@ private AsyncCleanerService(Elide elide, Integer maxRunTimeSeconds, Integer quer\n \n         // Setting up query cleaner that marks long running query as TIMEDOUT.\n         ScheduledExecutorService cleaner = Executors.newSingleThreadScheduledExecutor();\n-        AsyncQueryCleanerThread cleanUpTask = new AsyncQueryCleanerThread(queryRunTimeThresholdMinutes, elide,\n-            queryCleanupDays, asyncQueryDao, new DateUtil());\n+        AsyncQueryCleanerThread<AsyncQuery> cleanUpTask = new AsyncQueryCleanerThread<AsyncQuery>(\n+                queryRunTimeThresholdMinutes, elide, queryCleanupDays, asyncQueryDao, new DateUtil(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be914fd4c46b0f3e5f757382de27733ac1fad521"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU1MDc4Nw==", "bodyText": "This T type can be more specific.", "url": "https://github.com/yahoo/elide/pull/1584#discussion_r503550787", "createdAt": "2020-10-12T21:46:03Z", "author": {"login": "aklish"}, "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCancelThread.java", "diffHunk": "@@ -40,15 +40,17 @@\n /**\n  * Runnable thread for cancelling AsyncQuery transactions\n  * beyond the max run time or if it has status CANCELLED.\n+ * @param <T> AsyncQueryBase Type Implementation.\n  */\n @Slf4j\n @Data\n @AllArgsConstructor\n-public class AsyncQueryCancelThread implements Runnable {\n+public class AsyncQueryCancelThread<T extends AsyncAPI> implements Runnable {\n \n     private int maxRunTimeSeconds;\n     private Elide elide;\n     private AsyncQueryDAO asyncQueryDao;\n+    private Class<T> typeParameterClass;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be914fd4c46b0f3e5f757382de27733ac1fad521"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU1MTU3Ng==", "bodyText": "T can be more specific here.", "url": "https://github.com/yahoo/elide/pull/1584#discussion_r503551576", "createdAt": "2020-10-12T21:48:17Z", "author": {"login": "aklish"}, "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java", "diffHunk": "@@ -29,17 +29,19 @@\n  * Runnable thread for updating AsyncQueryThread status.\n  * beyond the max run time and if not terminated by interrupt process\n  * due to app/host crash or restart.\n+ * @param <T> AsyncQueryBase Type Implementation.\n  */\n @Slf4j\n @Data\n @AllArgsConstructor\n-public class AsyncQueryCleanerThread implements Runnable {\n+public class AsyncQueryCleanerThread<T extends AsyncAPI> implements Runnable {\n \n     private int maxRunTimeMinutes;\n     private Elide elide;\n     private int queryCleanupDays;\n     private AsyncQueryDAO asyncQueryDao;\n     private DateUtil dateUtil = new DateUtil();\n+    private Class<T> typeParameterClass;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be914fd4c46b0f3e5f757382de27733ac1fad521"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU1NDMwMA==", "bodyText": "This doesn't seem to be called anywhere.", "url": "https://github.com/yahoo/elide/pull/1584#discussion_r503554300", "createdAt": "2020-10-12T21:55:43Z", "author": {"login": "aklish"}, "path": "elide-async/src/main/java/com/yahoo/elide/async/models/AsyncAPI.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.models;\n+\n+import com.yahoo.elide.annotation.ComputedAttribute;\n+import com.yahoo.elide.annotation.CreatePermission;\n+import com.yahoo.elide.annotation.Exclude;\n+import com.yahoo.elide.annotation.UpdatePermission;\n+import com.yahoo.elide.async.service.AsyncAPIUpdateThread;\n+import com.yahoo.elide.async.service.AsyncExecutorService;\n+import com.yahoo.elide.security.User;\n+\n+import org.apache.http.NoHttpResponseException;\n+\n+import lombok.Data;\n+\n+import java.net.URISyntaxException;\n+import java.util.Date;\n+import java.util.UUID;\n+\n+import javax.persistence.Column;\n+import javax.persistence.DiscriminatorColumn;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.PreUpdate;\n+import javax.persistence.Transient;\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.Pattern;\n+\n+/**\n+ * Base Model Class for Async Query.\n+ */\n+@Entity\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n+@DiscriminatorColumn\n+@Data\n+public abstract class AsyncAPI implements PrincipalOwned {\n+    @Id\n+    @Column(columnDefinition = \"varchar(36)\")\n+    @Pattern(regexp = \"^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\",\n+    message = \"id not of pattern UUID\")\n+    private String id = UUID.randomUUID().toString(); //Provided by client or generated if missing on create.\n+\n+    protected String query;  //JSON-API PATH or GraphQL payload.\n+\n+    protected QueryType queryType; //GRAPHQL, JSONAPI\n+\n+    @Exclude\n+    @Column(columnDefinition = \"varchar(36)\")\n+    protected String requestId = UUID.randomUUID().toString();\n+\n+    @CreatePermission(expression = \"Prefab.Role.None\")\n+    private String principalName;\n+\n+    @UpdatePermission(expression = \"(Principal is Admin OR Principal is Owner) AND value is Cancelled\")\n+    @CreatePermission(expression = \"value is Queued\")\n+    @Enumerated(EnumType.STRING)\n+    private QueryStatus status = QueryStatus.QUEUED;\n+\n+    private Date createdOn = new Date();\n+\n+    private Date updatedOn = new Date();\n+\n+    @Transient\n+    @Max(10)\n+    @ComputedAttribute\n+    private Integer asyncAfterSeconds = 10;\n+\n+    @Exclude\n+    protected String naturalKey = UUID.randomUUID().toString();\n+\n+    @Transient\n+    private AsyncAPIUpdateThread queryUpdateWorker = null;\n+\n+    @Override\n+    public String getPrincipalName() {\n+        return principalName;\n+    }\n+\n+    /**\n+     * Set Async API Result.\n+     * @param result Base Result Object to persist.\n+     */\n+    public abstract void setResult(AsyncAPIResult result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be914fd4c46b0f3e5f757382de27733ac1fad521"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU1NjI1NA==", "bodyText": "nitpick but we parse the query URL twice - once for the path and once for the headers.  We could combine these in a single parse.", "url": "https://github.com/yahoo/elide/pull/1584#discussion_r503556254", "createdAt": "2020-10-12T22:01:07Z", "author": {"login": "aklish"}, "path": "elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQuery.java", "diffHunk": "@@ -41,48 +43,93 @@\n @UpdatePermission(expression = \"Prefab.Role.None\")\n @DeletePermission(expression = \"Prefab.Role.None\")\n @Data\n-public class AsyncQuery extends AsyncBase implements PrincipalOwned {\n-    @Id\n-    @Column(columnDefinition = \"varchar(36)\")\n-    @Pattern(regexp = \"^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\",\n-    message = \"id not of pattern UUID\")\n-    private String id = UUID.randomUUID().toString(); //Provided by client or generated if missing on create.\n-\n-    private String query;  //JSON-API PATH or GraphQL payload.\n-\n-    private QueryType queryType; //GRAPHQL, JSONAPI\n-\n-    private ResultFormatType resultFormatType = ResultFormatType.JSONAPI;\n+@Slf4j\n+public class AsyncQuery extends AsyncAPI {\n+    @Embedded\n+    private AsyncQueryResult result;\n \n-    @Transient\n-    @Max(10)\n-    @ComputedAttribute\n-    private Integer asyncAfterSeconds = 10;\n+    @Override\n+    public void setResult(AsyncAPIResult result) {\n+        this.result = (AsyncQueryResult) result;\n+    }\n \n-    @Exclude\n-    @Column(columnDefinition = \"varchar(36)\")\n-    private String requestId = UUID.randomUUID().toString();\n+    @Override\n+    public AsyncAPIResult executeRequest(AsyncExecutorService service, User user, String apiVersion)\n+            throws URISyntaxException, NoHttpResponseException {\n+        ElideResponse response = null;\n+        log.debug(\"AsyncQuery Object from request: {}\", this);\n+        if (queryType.equals(QueryType.JSONAPI_V1_0)) {\n+            response = executeJsonApiRequest(service.getElide(), user, apiVersion);\n+        } else if (queryType.equals(QueryType.GRAPHQL_V1_0)) {\n+            response = executeGraphqlRequest(service.getRunners(), user, apiVersion);\n+        }\n+        nullResponseCheck(response);\n+\n+        AsyncQueryResult queryResult = new AsyncQueryResult();\n+        queryResult.setHttpStatus(response.getResponseCode());\n+        queryResult.setCompletedOn(new Date());\n+        queryResult.setResponseBody(response.getBody());\n+        queryResult.setContentLength(response.getBody().length());\n+        //TODO Add recordcount to queryResultObj\n+        return queryResult;\n+    }\n \n-    @UpdatePermission(expression = \"(Principal is Admin OR Principal is Owner) AND value is Cancelled\")\n-    @CreatePermission(expression = \"value is Queued\")\n-    @Enumerated(EnumType.STRING)\n-    private QueryStatus status = QueryStatus.QUEUED;\n+    /**\n+     * This method parses the url and gets the query params.\n+     * And adds them into a MultivaluedMap to be used by underlying Elide.get method\n+     * @param query query from the Async request\n+     * @throws URISyntaxException URISyntaxException from malformed or incorrect URI\n+     * @return MultivaluedMap with query parameters\n+     */\n+    private MultivaluedMap<String, String> getQueryParams(String query) throws URISyntaxException {\n+        URIBuilder uri;\n+        uri = new URIBuilder(query);\n+        MultivaluedMap<String, String> queryParams = new MultivaluedHashMap<String, String>();\n+        for (NameValuePair queryParam : uri.getQueryParams()) {\n+            queryParams.add(queryParam.getName(), queryParam.getValue());\n+        }\n+        return queryParams;\n+    }\n \n-    @Enumerated(EnumType.STRING)\n-    @NotNull\n-    private ResultType resultType = ResultType.EMBEDDED; //EMBEDDED, DOWNLOAD\n+    /**\n+     * This method parses the url and gets the query params.\n+     * And retrieves path to be used by underlying Elide.get method\n+     * @param query query from the Async request\n+     * @throws URISyntaxException URISyntaxException from malformed or incorrect URI\n+     * @return Path extracted from URI\n+     */\n+    private String getPath(String query) throws URISyntaxException {\n+        URIBuilder uri;\n+        uri = new URIBuilder(query);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be914fd4c46b0f3e5f757382de27733ac1fad521"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU1NzEzNg==", "bodyText": "We could make this non-abstract and expose it also as an Elide entity.  Benefits include:\n\nBeing able to see all the queries in one place\nWe can consolidate cleaners and cancel threads because they can query the base class (instead of the subclass).", "url": "https://github.com/yahoo/elide/pull/1584#discussion_r503557136", "createdAt": "2020-10-12T22:03:57Z", "author": {"login": "aklish"}, "path": "elide-async/src/main/java/com/yahoo/elide/async/models/AsyncAPI.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.models;\n+\n+import com.yahoo.elide.annotation.ComputedAttribute;\n+import com.yahoo.elide.annotation.CreatePermission;\n+import com.yahoo.elide.annotation.Exclude;\n+import com.yahoo.elide.annotation.UpdatePermission;\n+import com.yahoo.elide.async.service.AsyncAPIUpdateThread;\n+import com.yahoo.elide.async.service.AsyncExecutorService;\n+import com.yahoo.elide.security.User;\n+\n+import org.apache.http.NoHttpResponseException;\n+\n+import lombok.Data;\n+\n+import java.net.URISyntaxException;\n+import java.util.Date;\n+import java.util.UUID;\n+\n+import javax.persistence.Column;\n+import javax.persistence.DiscriminatorColumn;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.PreUpdate;\n+import javax.persistence.Transient;\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.Pattern;\n+\n+/**\n+ * Base Model Class for Async Query.\n+ */\n+@Entity\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n+@DiscriminatorColumn\n+@Data\n+public abstract class AsyncAPI implements PrincipalOwned {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be914fd4c46b0f3e5f757382de27733ac1fad521"}, "originalPosition": 44}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8448107a4f450d7a67204d83f38150964c87aac8", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/8448107a4f450d7a67204d83f38150964c87aac8", "committedDate": "2020-10-14T17:11:49Z", "message": "Review comments"}, "afterCommit": {"oid": "131a6811b23024d27270640d3001af3f2e9eff12", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/131a6811b23024d27270640d3001af3f2e9eff12", "committedDate": "2020-10-14T18:25:33Z", "message": "Review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "131a6811b23024d27270640d3001af3f2e9eff12", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/131a6811b23024d27270640d3001af3f2e9eff12", "committedDate": "2020-10-14T18:25:33Z", "message": "Review comments"}, "afterCommit": {"oid": "c0fe5a34065380eff3dc92b0e515b7667355bedd", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/c0fe5a34065380eff3dc92b0e515b7667355bedd", "committedDate": "2020-10-14T19:11:37Z", "message": "Review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c0fe5a34065380eff3dc92b0e515b7667355bedd", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/c0fe5a34065380eff3dc92b0e515b7667355bedd", "committedDate": "2020-10-14T19:11:37Z", "message": "Review comments"}, "afterCommit": {"oid": "db533aed230d927557034340a90094d356d136cf", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/db533aed230d927557034340a90094d356d136cf", "committedDate": "2020-10-14T19:45:04Z", "message": "Review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5NjU1NDA2", "url": "https://github.com/yahoo/elide/pull/1584#pullrequestreview-509655406", "createdAt": "2020-10-15T18:25:09Z", "commit": {"oid": "db533aed230d927557034340a90094d356d136cf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxODoyNTowOVrOHiUtjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxODozMzoxMVrOHiU_nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc1Mjk3NQ==", "bodyText": "Let's sync with Jon and agree on the names for these models.", "url": "https://github.com/yahoo/elide/pull/1584#discussion_r505752975", "createdAt": "2020-10-15T18:25:09Z", "author": {"login": "aklish"}, "path": "elide-async/src/main/java/com/yahoo/elide/async/models/AsyncAPI.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.models;\n+\n+import com.yahoo.elide.annotation.ComputedAttribute;\n+import com.yahoo.elide.annotation.CreatePermission;\n+import com.yahoo.elide.annotation.Exclude;\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.annotation.UpdatePermission;\n+import com.yahoo.elide.async.service.AsyncAPIUpdateThread;\n+import com.yahoo.elide.async.service.AsyncExecutorService;\n+import com.yahoo.elide.security.User;\n+\n+import org.apache.http.NoHttpResponseException;\n+\n+import lombok.Data;\n+\n+import java.net.URISyntaxException;\n+import java.util.Date;\n+import java.util.UUID;\n+\n+import javax.persistence.Column;\n+import javax.persistence.DiscriminatorColumn;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.PreUpdate;\n+import javax.persistence.Transient;\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.Pattern;\n+\n+/**\n+ * Base Model Class for Async Query.\n+ */\n+@Entity\n+@Include(type = \"asyncAPI\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db533aed230d927557034340a90094d356d136cf"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc1NzU5Ng==", "bodyText": "Add CreatePermission(NONE), DeletePermission(NONE) at the class level here.", "url": "https://github.com/yahoo/elide/pull/1584#discussion_r505757596", "createdAt": "2020-10-15T18:33:11Z", "author": {"login": "aklish"}, "path": "elide-async/src/main/java/com/yahoo/elide/async/models/AsyncAPI.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.models;\n+\n+import com.yahoo.elide.annotation.ComputedAttribute;\n+import com.yahoo.elide.annotation.CreatePermission;\n+import com.yahoo.elide.annotation.Exclude;\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.annotation.UpdatePermission;\n+import com.yahoo.elide.async.service.AsyncAPIUpdateThread;\n+import com.yahoo.elide.async.service.AsyncExecutorService;\n+import com.yahoo.elide.security.User;\n+\n+import org.apache.http.NoHttpResponseException;\n+\n+import lombok.Data;\n+\n+import java.net.URISyntaxException;\n+import java.util.Date;\n+import java.util.UUID;\n+\n+import javax.persistence.Column;\n+import javax.persistence.DiscriminatorColumn;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.PreUpdate;\n+import javax.persistence.Transient;\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.Pattern;\n+\n+/**\n+ * Base Model Class for Async Query.\n+ */\n+@Entity\n+@Include(type = \"asyncAPI\")\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n+@DiscriminatorColumn\n+@Data\n+public class AsyncAPI implements PrincipalOwned {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db533aed230d927557034340a90094d356d136cf"}, "originalPosition": 46}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e8a049975bc1e6d2008b66fcc36a938d7b12488c", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/e8a049975bc1e6d2008b66fcc36a938d7b12488c", "committedDate": "2020-10-21T18:36:03Z", "message": "Clean up and reusablity"}, "afterCommit": {"oid": "33aba24a47e856fff03b3db1d3e83dfcfcba15b8", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/33aba24a47e856fff03b3db1d3e83dfcfcba15b8", "committedDate": "2020-10-21T18:43:04Z", "message": "Clean up and reusablity"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fc279e6f54c597ba381e569aabb632c6a4715c98", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/fc279e6f54c597ba381e569aabb632c6a4715c98", "committedDate": "2020-10-21T19:33:28Z", "message": "Clean up and reusability"}, "afterCommit": {"oid": "7d2f3e37c33b85c2df8cb432206600b184c60af3", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/7d2f3e37c33b85c2df8cb432206600b184c60af3", "committedDate": "2020-10-21T19:36:10Z", "message": "Clean up and reusablity"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7d2f3e37c33b85c2df8cb432206600b184c60af3", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/7d2f3e37c33b85c2df8cb432206600b184c60af3", "committedDate": "2020-10-21T19:36:10Z", "message": "Clean up and reusablity"}, "afterCommit": {"oid": "407e1e11689e645cec41175ce4350235f99c88d9", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/407e1e11689e645cec41175ce4350235f99c88d9", "committedDate": "2020-10-21T20:20:01Z", "message": "Clean up and reusablity"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzMTczNzg1", "url": "https://github.com/yahoo/elide/pull/1584#pullrequestreview-513173785", "createdAt": "2020-10-20T22:13:16Z", "commit": {"oid": "c55e6102d0ad13fc8602c120499e780045d1e532"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMjoxMzoxNlrOHlTD4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMTo0NDowM1rOHmHMEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg3MTY1MQ==", "bodyText": "I wonder if we can move this logic outside the model and instead have it in a lifecycle hook.", "url": "https://github.com/yahoo/elide/pull/1584#discussion_r508871651", "createdAt": "2020-10-20T22:13:16Z", "author": {"login": "aklish"}, "path": "elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQuery.java", "diffHunk": "@@ -41,48 +43,89 @@\n @UpdatePermission(expression = \"Prefab.Role.None\")\n @DeletePermission(expression = \"Prefab.Role.None\")\n @Data\n-public class AsyncQuery extends AsyncBase implements PrincipalOwned {\n-    @Id\n-    @Column(columnDefinition = \"varchar(36)\")\n-    @Pattern(regexp = \"^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\",\n-    message = \"id not of pattern UUID\")\n-    private String id = UUID.randomUUID().toString(); //Provided by client or generated if missing on create.\n-\n-    private String query;  //JSON-API PATH or GraphQL payload.\n-\n-    private QueryType queryType; //GRAPHQL, JSONAPI\n-\n-    private ResultFormatType resultFormatType = ResultFormatType.JSONAPI;\n-\n-    @Transient\n-    @Max(10)\n-    @ComputedAttribute\n-    private Integer asyncAfterSeconds = 10;\n+@Slf4j\n+public class AsyncQuery extends AsyncAPI {\n+    @Embedded\n+    private AsyncQueryResult result;\n \n-    @Exclude\n-    @Column(columnDefinition = \"varchar(36)\")\n-    private String requestId = UUID.randomUUID().toString();\n+    @Override\n+    public void setResult(AsyncAPIResult result) {\n+        this.result = (AsyncQueryResult) result;\n+    }\n \n-    @UpdatePermission(expression = \"(Principal is Admin OR Principal is Owner) AND value is Cancelled\")\n-    @CreatePermission(expression = \"value is Queued\")\n-    @Enumerated(EnumType.STRING)\n-    private QueryStatus status = QueryStatus.QUEUED;\n+    @Override\n+    public AsyncAPIResult executeRequest(AsyncExecutorService service, User user, String apiVersion)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c55e6102d0ad13fc8602c120499e780045d1e532"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY5Mzg0OQ==", "bodyText": "Should the first param be AsyncAPI type?", "url": "https://github.com/yahoo/elide/pull/1584#discussion_r509693849", "createdAt": "2020-10-21T21:02:28Z", "author": {"login": "aklish"}, "path": "elide-async/src/main/java/com/yahoo/elide/async/hooks/AsyncHook.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.hooks;\n+\n+import com.yahoo.elide.async.models.AsyncAPI;\n+import com.yahoo.elide.async.models.AsyncAPIResult;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.service.AsyncExecutorService;\n+import com.yahoo.elide.security.RequestScope;\n+\n+import lombok.Data;\n+\n+import java.security.Principal;\n+import java.util.concurrent.Callable;\n+\n+/**\n+ * Async Hook methods.\n+ */\n+@Data\n+public abstract class AsyncHook {\n+    private AsyncExecutorService asyncExecutorService;\n+\n+    public AsyncHook() { };\n+\n+    public AsyncHook(AsyncExecutorService asyncExecutorService) {\n+        this.asyncExecutorService = asyncExecutorService;\n+    }\n+\n+    /**\n+     * Call the completeQuery process in AsyncExecutorService.\n+     * @param query AsyncAPI object to complete.\n+     * @param requestScope RequestScope object.\n+     */\n+    protected void completeAsync(AsyncAPI query, RequestScope requestScope) {\n+        asyncExecutorService.completeQuery(query, requestScope.getUser(), requestScope.getApiVersion());\n+    }\n+\n+    /**\n+     * Call the executeQuery process on AsyncExecutorService.\n+     * @param query AsyncAPI object to complete.\n+     * @param callable CallableThread instance.\n+     */\n+    protected void executeAsync(AsyncAPI query, Callable<AsyncAPIResult> callable) {\n+        asyncExecutorService.executeQuery(query, callable);\n+    }\n+\n+    /**\n+     * Update Principal Name.\n+     * @param query AsyncAPI object to complete.\n+     * @param requestScope RequestScope object.\n+     */\n+    protected void updatePrincipalName(AsyncQuery query, RequestScope requestScope) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "407e1e11689e645cec41175ce4350235f99c88d9"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY5NjkyMw==", "bodyText": "I wonder if we should consolidate these three hooks into a single class.  A single hook can be called with different operation and phase arguments.  It might be more readable to have all the hook logic in one place.", "url": "https://github.com/yahoo/elide/pull/1584#discussion_r509696923", "createdAt": "2020-10-21T21:06:45Z", "author": {"login": "aklish"}, "path": "elide-async/src/main/java/com/yahoo/elide/async/hooks/UpdateQueryPrincipalNameHook.java", "diffHunk": "@@ -11,17 +11,13 @@\n import com.yahoo.elide.security.ChangeSpec;\n import com.yahoo.elide.security.RequestScope;\n \n-import java.security.Principal;\n import java.util.Optional;\n \n-public class UpdatePrincipalNameHook implements LifeCycleHook<AsyncQuery> {\n+public class UpdateQueryPrincipalNameHook extends AsyncHook implements LifeCycleHook<AsyncQuery> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "407e1e11689e645cec41175ce4350235f99c88d9"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY5ODQwOA==", "bodyText": "You could make this method abstract instead of calling another method with the same signature.", "url": "https://github.com/yahoo/elide/pull/1584#discussion_r509698408", "createdAt": "2020-10-21T21:08:30Z", "author": {"login": "aklish"}, "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncAPIThread.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import com.yahoo.elide.async.models.AsyncAPIResult;\n+\n+import org.apache.http.NoHttpResponseException;\n+\n+import lombok.Data;\n+\n+import java.net.URISyntaxException;\n+import java.util.concurrent.Callable;\n+\n+/**\n+ * Callable thread for executing the query provided in AsyncQuery and TableExport.\n+ * It will also update the query status and result object at different\n+ * stages of execution.\n+ */\n+@Data\n+public abstract class AsyncAPIThread implements Callable<AsyncAPIResult> {\n+\n+    @Override\n+    public AsyncAPIResult call() throws NoHttpResponseException, URISyntaxException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "407e1e11689e645cec41175ce4350235f99c88d9"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcwMTA5Mg==", "bodyText": "Is this class will be common for both AsyncQuery and TableExport - we need to name all the common classes with the same convention - AsyncAPI or AsyncBase or something along those lines.", "url": "https://github.com/yahoo/elide/pull/1584#discussion_r509701092", "createdAt": "2020-10-21T21:12:17Z", "author": {"login": "aklish"}, "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCancelThread.java", "diffHunk": "@@ -8,6 +8,7 @@\n import static com.yahoo.elide.core.EntityDictionary.NO_VERSION;\n \n import com.yahoo.elide.Elide;\n+import com.yahoo.elide.async.models.AsyncAPI;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "407e1e11689e645cec41175ce4350235f99c88d9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcwMTIzMw==", "bodyText": "Same comment on the class name here.", "url": "https://github.com/yahoo/elide/pull/1584#discussion_r509701233", "createdAt": "2020-10-21T21:12:32Z", "author": {"login": "aklish"}, "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java", "diffHunk": "@@ -6,6 +6,7 @@\n package com.yahoo.elide.async.service;\n \n import com.yahoo.elide.Elide;\n+import com.yahoo.elide.async.models.AsyncAPI;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "407e1e11689e645cec41175ce4350235f99c88d9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcwMjE4Nw==", "bodyText": "I would collapse this into the above processQuery method.", "url": "https://github.com/yahoo/elide/pull/1584#discussion_r509702187", "createdAt": "2020-10-21T21:13:38Z", "author": {"login": "aklish"}, "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java", "diffHunk": "@@ -17,91 +18,76 @@\n import org.apache.http.NoHttpResponseException;\n import org.apache.http.client.utils.URIBuilder;\n \n-import lombok.Data;\n import lombok.extern.slf4j.Slf4j;\n \n import java.net.URISyntaxException;\n import java.util.Date;\n+import java.util.Map;\n import java.util.UUID;\n-import java.util.concurrent.Callable;\n \n import javax.ws.rs.core.MultivaluedHashMap;\n import javax.ws.rs.core.MultivaluedMap;\n \n /**\n- * Callable thread for executing the query provided in Async Query.\n- * It will also update the query status and result object at different\n- * stages of execution.\n+ * AsyncQuery implementation of AsyncAPIThread.\n  */\n @Slf4j\n-@Data\n-\n-public class AsyncQueryThread implements Callable<AsyncQueryResult> {\n-\n-    private AsyncQuery queryObj;\n-    private AsyncQueryResult queryResultObj;\n+public class AsyncQueryThread extends AsyncAPIThread {\n+    private AsyncAPI queryObj;\n     private User user;\n-    private Elide elide;\n-    private final QueryRunner runner;\n-    private AsyncQueryDAO asyncQueryDao;\n+    private AsyncExecutorService service;\n     private String apiVersion;\n \n-    @Override\n-    public AsyncQueryResult call() throws NoHttpResponseException, URISyntaxException {\n-         return processQuery();\n-    }\n-\n-    public AsyncQueryThread(AsyncQuery queryObj, User user, Elide elide, QueryRunner runner,\n-            AsyncQueryDAO asyncQueryDao, String apiVersion) {\n+    public AsyncQueryThread(AsyncAPI queryObj, User user, AsyncExecutorService service, String apiVersion) {\n         this.queryObj = queryObj;\n         this.user = user;\n-        this.elide = elide;\n-        this.runner = runner;\n-        this.asyncQueryDao = asyncQueryDao;\n+        this.service = service;\n         this.apiVersion = apiVersion;\n     }\n \n-   /**\n-    * This is the main method which processes the Async Query request, executes the query and updates\n-    * values for AsyncQuery and AsyncQueryResult models accordingly.\n-    * @return AsyncQueryResult AsyncQueryResult\n-    * @throws URISyntaxException URISyntaxException\n-    * @throws NoHttpResponseException NoHttpResponseException\n-    */\n-    protected AsyncQueryResult processQuery() throws URISyntaxException, NoHttpResponseException {\n-        UUID requestId = UUID.fromString(queryObj.getRequestId());\n+    @Override\n+    protected AsyncAPIResult processQuery() throws URISyntaxException, NoHttpResponseException {\n+        AsyncAPIResult queryResultBaseObj = executeRequest();\n+\n+        return queryResultBaseObj;\n+    }\n \n+    /**\n+     * Execute Async Request.\n+     * @param service AsyncExecutorService Instance.\n+     * @param user Elide User.\n+     * @param apiVersion Api Version.\n+     * @return Base Result Object.\n+     * @throws URISyntaxException URISyntaxException\n+     * @throws NoHttpResponseException NoHttpResponseException\n+     */\n+    private AsyncAPIResult executeRequest()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "407e1e11689e645cec41175ce4350235f99c88d9"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcwMzA0Nw==", "bodyText": "typo in variable name.", "url": "https://github.com/yahoo/elide/pull/1584#discussion_r509703047", "createdAt": "2020-10-21T21:14:34Z", "author": {"login": "aklish"}, "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java", "diffHunk": "@@ -112,30 +98,33 @@ else if (queryObj.getQueryType().equals(QueryType.GRAPHQL_V1_0)) {\n     /**\n      * This method parses the url and gets the query params.\n      * And retrieves path to be used by underlying Elide.get method\n-     * @param query query from the Async request\n+     * @param uri URIBuilder instance\n      * @throws URISyntaxException URISyntaxException from malformed or incorrect URI\n      * @return Path extracted from URI\n      */\n-    protected String getPath(String query) throws URISyntaxException {\n-        URIBuilder uri;\n-        uri = new URIBuilder(query);\n+    private String getPath(URIBuilder uri) {\n         return uri.getPath();\n     }\n \n-    private ElideResponse executeJsonApiRequest(AsyncQuery queryObj, UUID requestId) throws URISyntaxException {\n-        MultivaluedMap<String, String> queryParams = getQueryParams(queryObj.getQuery());\n+    private ElideResponse executeJsonApiRequest(Elide elide, User user, String apiVersion) throws URISyntaxException {\n+        UUID requestUUId = UUID.fromString(queryObj.getRequestId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "407e1e11689e645cec41175ce4350235f99c88d9"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcwNDYzNA==", "bodyText": "Any reason we moved this logic (requestUUId assignment) inside each executeX method?", "url": "https://github.com/yahoo/elide/pull/1584#discussion_r509704634", "createdAt": "2020-10-21T21:16:20Z", "author": {"login": "aklish"}, "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java", "diffHunk": "@@ -112,30 +98,33 @@ else if (queryObj.getQueryType().equals(QueryType.GRAPHQL_V1_0)) {\n     /**\n      * This method parses the url and gets the query params.\n      * And retrieves path to be used by underlying Elide.get method\n-     * @param query query from the Async request\n+     * @param uri URIBuilder instance\n      * @throws URISyntaxException URISyntaxException from malformed or incorrect URI\n      * @return Path extracted from URI\n      */\n-    protected String getPath(String query) throws URISyntaxException {\n-        URIBuilder uri;\n-        uri = new URIBuilder(query);\n+    private String getPath(URIBuilder uri) {\n         return uri.getPath();\n     }\n \n-    private ElideResponse executeJsonApiRequest(AsyncQuery queryObj, UUID requestId) throws URISyntaxException {\n-        MultivaluedMap<String, String> queryParams = getQueryParams(queryObj.getQuery());\n+    private ElideResponse executeJsonApiRequest(Elide elide, User user, String apiVersion) throws URISyntaxException {\n+        UUID requestUUId = UUID.fromString(queryObj.getRequestId());\n+        URIBuilder uri = new URIBuilder(queryObj.getQuery());\n+        MultivaluedMap<String, String> queryParams = getQueryParams(uri);\n         log.debug(\"Extracted QueryParams from AsyncQuery Object: {}\", queryParams);\n \n         //TODO - we need to add the baseUrlEndpoint to the queryObject.\n-        ElideResponse response = elide.get(\"\", getPath(queryObj.getQuery()), queryParams, user, apiVersion, requestId);\n+        ElideResponse response = elide.get(\"\", getPath(uri), queryParams, user, apiVersion, requestUUId);\n         log.debug(\"JSONAPI_V1_0 getResponseCode: {}, JSONAPI_V1_0 getBody: {}\",\n                 response.getResponseCode(), response.getBody());\n         return response;\n     }\n \n-    private ElideResponse executeGraphqlRequest(AsyncQuery queryObj, UUID requestId) throws URISyntaxException {\n+    private ElideResponse executeGraphqlRequest(Map<String, QueryRunner> runners, User user, String apiVersion)\n+            throws URISyntaxException {\n+        UUID requestUUId = UUID.fromString(queryObj.getRequestId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "407e1e11689e645cec41175ce4350235f99c88d9"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcyNTcxNA==", "bodyText": "I think with the new design, we should be able to remove this from the model - and tie it together elsewhere.", "url": "https://github.com/yahoo/elide/pull/1584#discussion_r509725714", "createdAt": "2020-10-21T21:44:03Z", "author": {"login": "aklish"}, "path": "elide-async/src/main/java/com/yahoo/elide/async/models/AsyncAPI.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.models;\n+\n+import com.yahoo.elide.annotation.ComputedAttribute;\n+import com.yahoo.elide.annotation.CreatePermission;\n+import com.yahoo.elide.annotation.Exclude;\n+import com.yahoo.elide.annotation.UpdatePermission;\n+import com.yahoo.elide.async.service.AsyncAPIUpdateThread;\n+\n+import lombok.Data;\n+\n+import java.util.Date;\n+import java.util.UUID;\n+\n+import javax.persistence.Column;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.Id;\n+import javax.persistence.MappedSuperclass;\n+import javax.persistence.PreUpdate;\n+import javax.persistence.Transient;\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.Pattern;\n+\n+/**\n+ * Base Model Class for Async Query.\n+ */\n+@MappedSuperclass\n+@Data\n+public abstract class AsyncAPI implements PrincipalOwned {\n+    @Id\n+    @Column(columnDefinition = \"varchar(36)\")\n+    @Pattern(regexp = \"^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\",\n+    message = \"id not of pattern UUID\")\n+    private String id = UUID.randomUUID().toString(); //Provided by client or generated if missing on create.\n+\n+    protected String query;  //JSON-API PATH or GraphQL payload.\n+\n+    protected QueryType queryType; //GRAPHQL, JSONAPI\n+\n+    @Exclude\n+    @Column(columnDefinition = \"varchar(36)\")\n+    protected String requestId = UUID.randomUUID().toString();\n+\n+    @CreatePermission(expression = \"Prefab.Role.None\")\n+    private String principalName;\n+\n+    @UpdatePermission(expression = \"(Principal is Admin OR Principal is Owner) AND value is Cancelled\")\n+    @CreatePermission(expression = \"value is Queued\")\n+    @Enumerated(EnumType.STRING)\n+    private QueryStatus status = QueryStatus.QUEUED;\n+\n+    private Date createdOn = new Date();\n+\n+    private Date updatedOn = new Date();\n+\n+    @Transient\n+    @Max(10)\n+    @ComputedAttribute\n+    private Integer asyncAfterSeconds = 10;\n+\n+    @Transient\n+    private AsyncAPIUpdateThread queryUpdateWorker = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "407e1e11689e645cec41175ce4350235f99c88d9"}, "originalPosition": 67}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e351ee595adaed1dedb7e3daa73c08d74f2bc3f9", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/e351ee595adaed1dedb7e3daa73c08d74f2bc3f9", "committedDate": "2020-10-22T14:30:17Z", "message": "Redesign"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac485bb4c8c8cb6edd2bac8f1f481b34e74f57ca", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/ac485bb4c8c8cb6edd2bac8f1f481b34e74f57ca", "committedDate": "2020-10-22T14:30:17Z", "message": "Review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd6d7bc3bdf5975a1909469721c6c9bdcfdd8bd8", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/bd6d7bc3bdf5975a1909469721c6c9bdcfdd8bd8", "committedDate": "2020-10-22T14:30:17Z", "message": "Revert Entity for AsyncAPI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b04e15d750f2fb8bedaf6d58b02fbb2bcee426f", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/4b04e15d750f2fb8bedaf6d58b02fbb2bcee426f", "committedDate": "2020-10-22T14:31:40Z", "message": "Clean up and reusablity"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "407e1e11689e645cec41175ce4350235f99c88d9", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/407e1e11689e645cec41175ce4350235f99c88d9", "committedDate": "2020-10-21T20:20:01Z", "message": "Clean up and reusablity"}, "afterCommit": {"oid": "256ef55b72d1884ae085fbc0cf5defe75b2507bd", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/256ef55b72d1884ae085fbc0cf5defe75b2507bd", "committedDate": "2020-10-22T18:46:25Z", "message": "Review comments, Combining Hooks, ThreadLocal for UpdateThread Status"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "256ef55b72d1884ae085fbc0cf5defe75b2507bd", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/256ef55b72d1884ae085fbc0cf5defe75b2507bd", "committedDate": "2020-10-22T18:46:25Z", "message": "Review comments, Combining Hooks, ThreadLocal for UpdateThread Status"}, "afterCommit": {"oid": "980af4279695a524a482a04c72ee397f2b6a586e", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/980af4279695a524a482a04c72ee397f2b6a586e", "committedDate": "2020-10-22T19:02:51Z", "message": "Review comments, Combining Hooks, ThreadLocal for UpdateThread Status"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "980af4279695a524a482a04c72ee397f2b6a586e", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/980af4279695a524a482a04c72ee397f2b6a586e", "committedDate": "2020-10-22T19:02:51Z", "message": "Review comments, Combining Hooks, ThreadLocal for UpdateThread Status"}, "afterCommit": {"oid": "64a3efc10291b8bb1ba5852e069106da9a582809", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/64a3efc10291b8bb1ba5852e069106da9a582809", "committedDate": "2020-10-22T19:06:14Z", "message": "Review comments, Combining Hooks, ThreadLocal for UpdateThread Status"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e530cf5b18e59575b41d357e1e0e67bc0e724dc", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/8e530cf5b18e59575b41d357e1e0e67bc0e724dc", "committedDate": "2020-10-22T19:24:39Z", "message": "Review comments, Combining Hooks, ThreadLocal for UpdateThread Status"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "64a3efc10291b8bb1ba5852e069106da9a582809", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/64a3efc10291b8bb1ba5852e069106da9a582809", "committedDate": "2020-10-22T19:06:14Z", "message": "Review comments, Combining Hooks, ThreadLocal for UpdateThread Status"}, "afterCommit": {"oid": "8e530cf5b18e59575b41d357e1e0e67bc0e724dc", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/8e530cf5b18e59575b41d357e1e0e67bc0e724dc", "committedDate": "2020-10-22T19:24:39Z", "message": "Review comments, Combining Hooks, ThreadLocal for UpdateThread Status"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MDgyNDg5", "url": "https://github.com/yahoo/elide/pull/1584#pullrequestreview-515082489", "createdAt": "2020-10-22T20:12:21Z", "commit": {"oid": "8e530cf5b18e59575b41d357e1e0e67bc0e724dc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDoxMjoyMVrOHmyFrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDoyNzoyMFrOHmyksw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyODU5MQ==", "bodyText": "I think this should implement LifeCycleHook to create a \"Is A\" relationship here.", "url": "https://github.com/yahoo/elide/pull/1584#discussion_r510428591", "createdAt": "2020-10-22T20:12:21Z", "author": {"login": "aklish"}, "path": "elide-async/src/main/java/com/yahoo/elide/async/hooks/AsyncAPIHook.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.hooks;\n+\n+import static com.yahoo.elide.annotation.LifeCycleHookBinding.Operation.CREATE;\n+import static com.yahoo.elide.annotation.LifeCycleHookBinding.Operation.READ;\n+import static com.yahoo.elide.annotation.LifeCycleHookBinding.TransactionPhase.POSTCOMMIT;\n+import static com.yahoo.elide.annotation.LifeCycleHookBinding.TransactionPhase.PRESECURITY;\n+\n+import com.yahoo.elide.annotation.LifeCycleHookBinding;\n+import com.yahoo.elide.async.models.AsyncAPI;\n+import com.yahoo.elide.async.models.AsyncAPIResult;\n+import com.yahoo.elide.async.models.QueryStatus;\n+import com.yahoo.elide.async.service.AsyncAPIThread;\n+import com.yahoo.elide.async.service.AsyncExecutorService;\n+import com.yahoo.elide.core.exceptions.InvalidOperationException;\n+import com.yahoo.elide.security.RequestScope;\n+\n+import lombok.Data;\n+\n+import java.security.Principal;\n+import java.util.concurrent.Callable;\n+\n+/**\n+ * AsyncAPI Base Hook methods.\n+ */\n+@Data\n+public abstract class AsyncAPIHook {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e530cf5b18e59575b41d357e1e0e67bc0e724dc"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyOTE3NQ==", "bodyText": "Can we remove this?", "url": "https://github.com/yahoo/elide/pull/1584#discussion_r510429175", "createdAt": "2020-10-22T20:13:26Z", "author": {"login": "aklish"}, "path": "elide-async/src/main/java/com/yahoo/elide/async/hooks/AsyncAPIHook.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.hooks;\n+\n+import static com.yahoo.elide.annotation.LifeCycleHookBinding.Operation.CREATE;\n+import static com.yahoo.elide.annotation.LifeCycleHookBinding.Operation.READ;\n+import static com.yahoo.elide.annotation.LifeCycleHookBinding.TransactionPhase.POSTCOMMIT;\n+import static com.yahoo.elide.annotation.LifeCycleHookBinding.TransactionPhase.PRESECURITY;\n+\n+import com.yahoo.elide.annotation.LifeCycleHookBinding;\n+import com.yahoo.elide.async.models.AsyncAPI;\n+import com.yahoo.elide.async.models.AsyncAPIResult;\n+import com.yahoo.elide.async.models.QueryStatus;\n+import com.yahoo.elide.async.service.AsyncAPIThread;\n+import com.yahoo.elide.async.service.AsyncExecutorService;\n+import com.yahoo.elide.core.exceptions.InvalidOperationException;\n+import com.yahoo.elide.security.RequestScope;\n+\n+import lombok.Data;\n+\n+import java.security.Principal;\n+import java.util.concurrent.Callable;\n+\n+/**\n+ * AsyncAPI Base Hook methods.\n+ */\n+@Data\n+public abstract class AsyncAPIHook {\n+    private AsyncExecutorService asyncExecutorService;\n+\n+    public AsyncAPIHook() { };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e530cf5b18e59575b41d357e1e0e67bc0e724dc"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyOTI2OQ==", "bodyText": "Mark final.", "url": "https://github.com/yahoo/elide/pull/1584#discussion_r510429269", "createdAt": "2020-10-22T20:13:33Z", "author": {"login": "aklish"}, "path": "elide-async/src/main/java/com/yahoo/elide/async/hooks/AsyncAPIHook.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.hooks;\n+\n+import static com.yahoo.elide.annotation.LifeCycleHookBinding.Operation.CREATE;\n+import static com.yahoo.elide.annotation.LifeCycleHookBinding.Operation.READ;\n+import static com.yahoo.elide.annotation.LifeCycleHookBinding.TransactionPhase.POSTCOMMIT;\n+import static com.yahoo.elide.annotation.LifeCycleHookBinding.TransactionPhase.PRESECURITY;\n+\n+import com.yahoo.elide.annotation.LifeCycleHookBinding;\n+import com.yahoo.elide.async.models.AsyncAPI;\n+import com.yahoo.elide.async.models.AsyncAPIResult;\n+import com.yahoo.elide.async.models.QueryStatus;\n+import com.yahoo.elide.async.service.AsyncAPIThread;\n+import com.yahoo.elide.async.service.AsyncExecutorService;\n+import com.yahoo.elide.core.exceptions.InvalidOperationException;\n+import com.yahoo.elide.security.RequestScope;\n+\n+import lombok.Data;\n+\n+import java.security.Principal;\n+import java.util.concurrent.Callable;\n+\n+/**\n+ * AsyncAPI Base Hook methods.\n+ */\n+@Data\n+public abstract class AsyncAPIHook {\n+    private AsyncExecutorService asyncExecutorService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e530cf5b18e59575b41d357e1e0e67bc0e724dc"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzMDY5OQ==", "bodyText": "If the phase is not presecurity or post commit, this will do nothing - but I think it ought to throw the exception below.\nI would restructure this a bit like:\nif (op is READ and PRESECURITY) {\n   return ...\n} else if (op is CREATE) {\n   if (phase is POSTCOMMIT) {\n       return ...\n   } else if (phase is PRESECURITY) {\n       return ...\n   }\n}\nthrow exception", "url": "https://github.com/yahoo/elide/pull/1584#discussion_r510430699", "createdAt": "2020-10-22T20:16:11Z", "author": {"login": "aklish"}, "path": "elide-async/src/main/java/com/yahoo/elide/async/hooks/AsyncAPIHook.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.hooks;\n+\n+import static com.yahoo.elide.annotation.LifeCycleHookBinding.Operation.CREATE;\n+import static com.yahoo.elide.annotation.LifeCycleHookBinding.Operation.READ;\n+import static com.yahoo.elide.annotation.LifeCycleHookBinding.TransactionPhase.POSTCOMMIT;\n+import static com.yahoo.elide.annotation.LifeCycleHookBinding.TransactionPhase.PRESECURITY;\n+\n+import com.yahoo.elide.annotation.LifeCycleHookBinding;\n+import com.yahoo.elide.async.models.AsyncAPI;\n+import com.yahoo.elide.async.models.AsyncAPIResult;\n+import com.yahoo.elide.async.models.QueryStatus;\n+import com.yahoo.elide.async.service.AsyncAPIThread;\n+import com.yahoo.elide.async.service.AsyncExecutorService;\n+import com.yahoo.elide.core.exceptions.InvalidOperationException;\n+import com.yahoo.elide.security.RequestScope;\n+\n+import lombok.Data;\n+\n+import java.security.Principal;\n+import java.util.concurrent.Callable;\n+\n+/**\n+ * AsyncAPI Base Hook methods.\n+ */\n+@Data\n+public abstract class AsyncAPIHook {\n+    private AsyncExecutorService asyncExecutorService;\n+\n+    public AsyncAPIHook() { };\n+\n+    public AsyncAPIHook(AsyncExecutorService asyncExecutorService) {\n+        this.asyncExecutorService = asyncExecutorService;\n+    }\n+\n+    /**\n+     * Validate the Query Options before executing.\n+     * @param query AsyncAPI type object.\n+     * @param requestScope RequestScope object.\n+     */\n+    public abstract void validateOptions(AsyncAPI query, RequestScope requestScope);\n+\n+    /**\n+     * Execute the Hook.\n+     * @param query AsyncAPI type object.\n+     * @param requestScope RequestScope object.\n+     * @param queryWorker Thread to execute.\n+     * @throws InvalidOperationException InvalidOperationException\n+     */\n+    protected void executeHook(LifeCycleHookBinding.Operation operation, LifeCycleHookBinding.TransactionPhase phase,\n+            AsyncAPI query, RequestScope requestScope, AsyncAPIThread queryWorker) {\n+        if (operation.equals(READ) && phase.equals(PRESECURITY)) {\n+            validateOptions(query, requestScope);\n+            executeAsync(query, queryWorker);\n+        } else if (operation.equals(CREATE)) {\n+            if (phase.equals(POSTCOMMIT)) {\n+                completeAsync(query, requestScope);\n+            } else if (phase.equals(PRESECURITY)) {\n+                updatePrincipalName(query, requestScope);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e530cf5b18e59575b41d357e1e0e67bc0e724dc"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzMjI5NA==", "bodyText": "It looks like this can be created by the client.  We probably want to prohibit that.", "url": "https://github.com/yahoo/elide/pull/1584#discussion_r510432294", "createdAt": "2020-10-22T20:19:12Z", "author": {"login": "aklish"}, "path": "elide-async/src/main/java/com/yahoo/elide/async/models/AsyncAPI.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.models;\n+\n+import com.yahoo.elide.annotation.ComputedAttribute;\n+import com.yahoo.elide.annotation.CreatePermission;\n+import com.yahoo.elide.annotation.Exclude;\n+import com.yahoo.elide.annotation.UpdatePermission;\n+\n+import lombok.Data;\n+\n+import java.util.Date;\n+import java.util.UUID;\n+\n+import javax.persistence.Column;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.Id;\n+import javax.persistence.MappedSuperclass;\n+import javax.persistence.PreUpdate;\n+import javax.persistence.Transient;\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.Pattern;\n+\n+/**\n+ * Base Model Class for Async Query.\n+ */\n+@MappedSuperclass\n+@Data\n+public abstract class AsyncAPI implements PrincipalOwned {\n+    @Id\n+    @Column(columnDefinition = \"varchar(36)\")\n+    @Pattern(regexp = \"^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\",\n+    message = \"id not of pattern UUID\")\n+    private String id = UUID.randomUUID().toString(); //Provided by client or generated if missing on create.\n+\n+    protected String query;  //JSON-API PATH or GraphQL payload.\n+\n+    protected QueryType queryType; //GRAPHQL, JSONAPI\n+\n+    @Exclude\n+    @Column(columnDefinition = \"varchar(36)\")\n+    protected String requestId = UUID.randomUUID().toString();\n+\n+    @CreatePermission(expression = \"Prefab.Role.None\")\n+    private String principalName;\n+\n+    @UpdatePermission(expression = \"(Principal is Admin OR Principal is Owner) AND value is Cancelled\")\n+    @CreatePermission(expression = \"value is Queued\")\n+    @Enumerated(EnumType.STRING)\n+    private QueryStatus status = QueryStatus.QUEUED;\n+\n+    private Date createdOn = new Date();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e530cf5b18e59575b41d357e1e0e67bc0e724dc"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzMjc2NA==", "bodyText": "I think you can remove this because of lombok.", "url": "https://github.com/yahoo/elide/pull/1584#discussion_r510432764", "createdAt": "2020-10-22T20:20:07Z", "author": {"login": "aklish"}, "path": "elide-async/src/main/java/com/yahoo/elide/async/models/AsyncAPI.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.models;\n+\n+import com.yahoo.elide.annotation.ComputedAttribute;\n+import com.yahoo.elide.annotation.CreatePermission;\n+import com.yahoo.elide.annotation.Exclude;\n+import com.yahoo.elide.annotation.UpdatePermission;\n+\n+import lombok.Data;\n+\n+import java.util.Date;\n+import java.util.UUID;\n+\n+import javax.persistence.Column;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.Id;\n+import javax.persistence.MappedSuperclass;\n+import javax.persistence.PreUpdate;\n+import javax.persistence.Transient;\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.Pattern;\n+\n+/**\n+ * Base Model Class for Async Query.\n+ */\n+@MappedSuperclass\n+@Data\n+public abstract class AsyncAPI implements PrincipalOwned {\n+    @Id\n+    @Column(columnDefinition = \"varchar(36)\")\n+    @Pattern(regexp = \"^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\",\n+    message = \"id not of pattern UUID\")\n+    private String id = UUID.randomUUID().toString(); //Provided by client or generated if missing on create.\n+\n+    protected String query;  //JSON-API PATH or GraphQL payload.\n+\n+    protected QueryType queryType; //GRAPHQL, JSONAPI\n+\n+    @Exclude\n+    @Column(columnDefinition = \"varchar(36)\")\n+    protected String requestId = UUID.randomUUID().toString();\n+\n+    @CreatePermission(expression = \"Prefab.Role.None\")\n+    private String principalName;\n+\n+    @UpdatePermission(expression = \"(Principal is Admin OR Principal is Owner) AND value is Cancelled\")\n+    @CreatePermission(expression = \"value is Queued\")\n+    @Enumerated(EnumType.STRING)\n+    private QueryStatus status = QueryStatus.QUEUED;\n+\n+    private Date createdOn = new Date();\n+\n+    private Date updatedOn = new Date();\n+\n+    @Transient\n+    @Max(10)\n+    @ComputedAttribute\n+    private Integer asyncAfterSeconds = 10;\n+\n+    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e530cf5b18e59575b41d357e1e0e67bc0e724dc"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzNDA3Mg==", "bodyText": "This is an abstract class with no members and only a single method that implements an existing interface.  Do we need this separate class?", "url": "https://github.com/yahoo/elide/pull/1584#discussion_r510434072", "createdAt": "2020-10-22T20:22:30Z", "author": {"login": "aklish"}, "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncAPIThread.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import com.yahoo.elide.async.models.AsyncAPIResult;\n+\n+import org.apache.http.NoHttpResponseException;\n+\n+import lombok.Data;\n+\n+import java.net.URISyntaxException;\n+import java.util.concurrent.Callable;\n+\n+/**\n+ * Callable thread for executing the query provided in AsyncQuery and TableExport.\n+ * It will also update the query status and result object at different\n+ * stages of execution.\n+ */\n+@Data\n+public abstract class AsyncAPIThread implements Callable<AsyncAPIResult> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e530cf5b18e59575b41d357e1e0e67bc0e724dc"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzNTgxOA==", "bodyText": "It won't be safe to use null/not-null here to signify anything.  After the first threadlocal is initialized by a timeout, it will be non-null forever thereafter.", "url": "https://github.com/yahoo/elide/pull/1584#discussion_r510435818", "createdAt": "2020-10-22T20:25:54Z", "author": {"login": "aklish"}, "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncExecutorService.java", "diffHunk": "@@ -133,10 +127,12 @@ public void executeQuery(AsyncQuery queryObj, User user, String apiVersion) {\n      * @param user User\n      * @param apiVersion API Version\n      */\n-    public void completeQuery(AsyncQuery query, User user, String apiVersion) {\n-        if (query.getQueryUpdateWorker() != null) {\n+    public void completeQuery(AsyncAPI query, User user, String apiVersion) {\n+        AsyncAPIUpdateThread queryUpdateWorker = futureTask.get();\n+        if (queryUpdateWorker != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e530cf5b18e59575b41d357e1e0e67bc0e724dc"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzNjUzMQ==", "bodyText": "This could be missed because of an exception - and then Elide will remain in an invalid state.\nInstead of using null/non-null - you'll need to keep track of something inside the threadlocal itself.", "url": "https://github.com/yahoo/elide/pull/1584#discussion_r510436531", "createdAt": "2020-10-22T20:27:20Z", "author": {"login": "aklish"}, "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncExecutorService.java", "diffHunk": "@@ -133,10 +127,12 @@ public void executeQuery(AsyncQuery queryObj, User user, String apiVersion) {\n      * @param user User\n      * @param apiVersion API Version\n      */\n-    public void completeQuery(AsyncQuery query, User user, String apiVersion) {\n-        if (query.getQueryUpdateWorker() != null) {\n+    public void completeQuery(AsyncAPI query, User user, String apiVersion) {\n+        AsyncAPIUpdateThread queryUpdateWorker = futureTask.get();\n+        if (queryUpdateWorker != null) {\n             log.debug(\"Task has not completed\");\n-            updater.execute(query.getQueryUpdateWorker());\n+            updater.execute(queryUpdateWorker);\n+            futureTask.remove();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e530cf5b18e59575b41d357e1e0e67bc0e724dc"}, "originalPosition": 108}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7d23760d8520c1bb69e5087b1a48f4237930425b", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/7d23760d8520c1bb69e5087b1a48f4237930425b", "committedDate": "2020-10-22T23:43:20Z", "message": "Review Comments Pt3"}, "afterCommit": {"oid": "c8a472768dfe65c919041834628b39cc38ff420d", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/c8a472768dfe65c919041834628b39cc38ff420d", "committedDate": "2020-10-22T23:47:53Z", "message": "Review Comments Pt3"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c8a472768dfe65c919041834628b39cc38ff420d", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/c8a472768dfe65c919041834628b39cc38ff420d", "committedDate": "2020-10-22T23:47:53Z", "message": "Review Comments Pt3"}, "afterCommit": {"oid": "fee32d6f8ce5303f9771c70895e7d292f0c3df54", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/fee32d6f8ce5303f9771c70895e7d292f0c3df54", "committedDate": "2020-10-23T14:13:45Z", "message": "Review Comments Pt3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5bce86147c9faf6e95a3c7a1c6e9623432d058d", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/c5bce86147c9faf6e95a3c7a1c6e9623432d058d", "committedDate": "2020-10-23T15:09:35Z", "message": "Review Comments Pt3"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fee32d6f8ce5303f9771c70895e7d292f0c3df54", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/fee32d6f8ce5303f9771c70895e7d292f0c3df54", "committedDate": "2020-10-23T14:13:45Z", "message": "Review Comments Pt3"}, "afterCommit": {"oid": "c5bce86147c9faf6e95a3c7a1c6e9623432d058d", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/c5bce86147c9faf6e95a3c7a1c6e9623432d058d", "committedDate": "2020-10-23T15:09:35Z", "message": "Review Comments Pt3"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1OTg0MjAz", "url": "https://github.com/yahoo/elide/pull/1584#pullrequestreview-515984203", "createdAt": "2020-10-23T20:16:28Z", "commit": {"oid": "c5bce86147c9faf6e95a3c7a1c6e9623432d058d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMDoxNjoyOVrOHndOug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMDoxNjoyOVrOHndOug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTEzNTQxOA==", "bodyText": "Maybe make this private and non-static if you can.", "url": "https://github.com/yahoo/elide/pull/1584#discussion_r511135418", "createdAt": "2020-10-23T20:16:29Z", "author": {"login": "aklish"}, "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncExecutorService.java", "diffHunk": "@@ -45,12 +47,23 @@\n     private ExecutorService executor;\n     private ExecutorService updater;\n     private int maxRunTime;\n-    private AsyncQueryDAO asyncQueryDao;\n+    private AsyncAPIDAO asyncAPIDao;\n     private static AsyncExecutorService asyncExecutorService = null;\n     private ResultStorageEngine resultStorageEngine;\n+    private ThreadLocal<AsyncAPIResultFuture> asyncResultFutureThreadLocal = new ThreadLocal<>();\n+\n+    /**\n+     * A Future with Synchronous Execution Complete Flag.\n+     */\n+    @Data\n+    @Builder\n+    public static class AsyncAPIResultFuture {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5bce86147c9faf6e95a3c7a1c6e9623432d058d"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac0dc6bdb9f7e081381e4ca9940ed809cb4a0fcb", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/ac0dc6bdb9f7e081381e4ca9940ed809cb4a0fcb", "committedDate": "2020-10-24T00:55:52Z", "message": "Review Comments Pt4"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2OTQyOTIx", "url": "https://github.com/yahoo/elide/pull/1584#pullrequestreview-516942921", "createdAt": "2020-10-26T16:13:20Z", "commit": {"oid": "ac0dc6bdb9f7e081381e4ca9940ed809cb4a0fcb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 725, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}