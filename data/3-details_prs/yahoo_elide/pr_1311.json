{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1MDAxOTQ1", "number": 1311, "title": "Elide Async Feature Unit and Integration Tests", "bodyText": "Elide Async Feature Unit and Integration Tests\nCo-authored-by: moizarafat\nRelated pull requests:\nOld PR (Closed since we did a merge instead of rebase) : #1245\nMain code elide-async changes for Elide-Async: #1203\nDescription\nThese changes add the Integration and unit tests for the Async Module. Here is a summary of the tests\n\nTests and validations for a JSONAPI query to the Async API\nTests and validations  for a GRAPHQL query to the Async API\nTests and validations for bad requests to the Async API\nTests for making a Async request to a model to which the user does not have permissions\n\nFurther additional basic tests have been added to test for Async Module for Elide-Standalone and Elide-Spring.\nAlso this includes the change Fixing legacy Hibernate entity manager store (so it doesn't recycle the entity manager): #1307\nHow Has This Been Tested?\nTests performed using integration and unit tests against all datastores.\nLicense\nI confirm that this contribution is made under an Apache 2.0 license and that I have the authority necessary to make this contribution on behalf of its copyright owner.", "createdAt": "2020-05-08T01:46:57Z", "url": "https://github.com/yahoo/elide/pull/1311", "merged": true, "mergeCommit": {"oid": "39767cd67949b326a502f84dd645fc0fba7d6d56"}, "closed": true, "closedAt": "2020-05-11T16:38:18Z", "author": {"login": "Abhino"}, "timelineItems": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcdxzTKAH2gAyNDE1MDAxOTQ1OjYwZjEyMDdhODkxNDgzNWY5NGJhYzBkMTM5MTJjOGM1NTQ5YWFjMWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcgSZ0WgFqTQwOTM0MTE1Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "60f1207a8914835f94bac0d13912c8c5549aac1c", "author": {"user": {"login": "Abhino", "name": "Abhinav Vijaykumar"}}, "url": "https://github.com/yahoo/elide/commit/60f1207a8914835f94bac0d13912c8c5549aac1c", "committedDate": "2020-05-03T21:31:16Z", "message": "Added integration,unit test setup for Async Module with few tests\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70d4d6b8bab32b03f695d042da88f3b182fd8e3b", "author": {"user": {"login": "Abhino", "name": "Abhinav Vijaykumar"}}, "url": "https://github.com/yahoo/elide/commit/70d4d6b8bab32b03f695d042da88f3b182fd8e3b", "committedDate": "2020-05-03T21:31:16Z", "message": "Adding Licence headers, Sample entity and working Async test for POST,GET\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0604f61400005daa410d0a0a7c657790a72fe79", "author": {"user": {"login": "Abhino", "name": "Abhinav Vijaykumar"}}, "url": "https://github.com/yahoo/elide/commit/e0604f61400005daa410d0a0a7c657790a72fe79", "committedDate": "2020-05-03T21:31:16Z", "message": "Adding additional integration tests\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28d4a01a4636964a4a09cfec3490c3644966e7d3", "author": {"user": {"login": "Abhino", "name": "Abhinav Vijaykumar"}}, "url": "https://github.com/yahoo/elide/commit/28d4a01a4636964a4a09cfec3490c3644966e7d3", "committedDate": "2020-05-03T21:31:16Z", "message": "Adding remaining integration tests and updating javadocs\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3ea206b87ce6fe5b022a54928dc86dda99c2c19", "author": {"user": {"login": "Abhino", "name": "Abhinav Vijaykumar"}}, "url": "https://github.com/yahoo/elide/commit/a3ea206b87ce6fe5b022a54928dc86dda99c2c19", "committedDate": "2020-05-03T21:31:16Z", "message": "Adding all unit tests\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23cdfc9aae1fcfc7fe71d1b671ca91d1d8ab00f1", "author": {"user": {"login": "Abhino", "name": "Abhinav Vijaykumar"}}, "url": "https://github.com/yahoo/elide/commit/23cdfc9aae1fcfc7fe71d1b671ca91d1d8ab00f1", "committedDate": "2020-05-03T21:31:16Z", "message": "Updating tests to work with Singleton changes\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5798bd02a5a3fbdfbdec702a2fd6633a2acf8b65", "author": {"user": {"login": "Abhino", "name": "Abhinav Vijaykumar"}}, "url": "https://github.com/yahoo/elide/commit/5798bd02a5a3fbdfbdec702a2fd6633a2acf8b65", "committedDate": "2020-05-03T21:31:16Z", "message": "Modifying tests to work with singleton logic\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4ce733199ffd0d76406ec682256d33c1d91cc54", "author": {"user": {"login": "Abhino", "name": "Abhinav Vijaykumar"}}, "url": "https://github.com/yahoo/elide/commit/c4ce733199ffd0d76406ec682256d33c1d91cc54", "committedDate": "2020-05-03T21:31:16Z", "message": "Resolving some codacy errors\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0cc1ac23f6ec10a2b06a72ec26d6b0526d500bc2", "author": {"user": {"login": "Abhino", "name": "Abhinav Vijaykumar"}}, "url": "https://github.com/yahoo/elide/commit/0cc1ac23f6ec10a2b06a72ec26d6b0526d500bc2", "committedDate": "2020-05-03T21:31:16Z", "message": "Adding DSL for GraphQL and addressing review comments\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56c0a890358b190d4c4ba86d460a411ea7a4907d", "author": {"user": {"login": "Abhino", "name": "Abhinav Vijaykumar"}}, "url": "https://github.com/yahoo/elide/commit/56c0a890358b190d4c4ba86d460a411ea7a4907d", "committedDate": "2020-05-03T21:31:16Z", "message": "Fixing unit tests and checkstyle errors\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6aad71edfb7abe341c5756510ae8174419eee100", "author": {"user": {"login": "Abhino", "name": "Abhinav Vijaykumar"}}, "url": "https://github.com/yahoo/elide/commit/6aad71edfb7abe341c5756510ae8174419eee100", "committedDate": "2020-05-03T21:32:19Z", "message": "Moving tests to new format\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b0fe5a89db588e95e22a9cdacce7c9b1fd9199d", "author": {"user": {"login": "Abhino", "name": "Abhinav Vijaykumar"}}, "url": "https://github.com/yahoo/elide/commit/2b0fe5a89db588e95e22a9cdacce7c9b1fd9199d", "committedDate": "2020-05-03T21:32:19Z", "message": "Fixing session not closed error and checkstyle errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97b04c9aa17834f8018fb116707d9e0582fed122", "author": {"user": {"login": "Abhino", "name": "Abhinav Vijaykumar"}}, "url": "https://github.com/yahoo/elide/commit/97b04c9aa17834f8018fb116707d9e0582fed122", "committedDate": "2020-05-03T21:32:19Z", "message": "Fixing imports\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "954ab4f2dff8440fb11cf1b6ecfd599f8ba033f9", "author": {"user": {"login": "Abhino", "name": "Abhinav Vijaykumar"}}, "url": "https://github.com/yahoo/elide/commit/954ab4f2dff8440fb11cf1b6ecfd599f8ba033f9", "committedDate": "2020-05-03T21:32:19Z", "message": "Removing unused method and updating harness\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b6fbadd98b282d0c64fae849a1ab29702ed2643", "author": {"user": {"login": "Abhino", "name": "Abhinav Vijaykumar"}}, "url": "https://github.com/yahoo/elide/commit/7b6fbadd98b282d0c64fae849a1ab29702ed2643", "committedDate": "2020-05-03T22:18:41Z", "message": "Updating unit tests\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a84e82cf45cdcf9e2c480494cadeec1646060bf0", "author": {"user": {"login": "Abhino", "name": "Abhinav Vijaykumar"}}, "url": "https://github.com/yahoo/elide/commit/a84e82cf45cdcf9e2c480494cadeec1646060bf0", "committedDate": "2020-05-05T14:29:28Z", "message": "Updating ResourceConfig for AsyncTest\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b2259b062a2dfa2deff42eecf1054631202c4ad", "author": {"user": {"login": "Abhino", "name": "Abhinav Vijaykumar"}}, "url": "https://github.com/yahoo/elide/commit/4b2259b062a2dfa2deff42eecf1054631202c4ad", "committedDate": "2020-05-05T17:54:52Z", "message": "Moving logic for resource config to new test binder\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "861c94ce7d300e9adcc382eba831c4c302d128bf", "author": {"user": {"login": "Abhino", "name": "Abhinav Vijaykumar"}}, "url": "https://github.com/yahoo/elide/commit/861c94ce7d300e9adcc382eba831c4c302d128bf", "committedDate": "2020-05-05T21:00:34Z", "message": "Adding bindFactory logic for async services\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0acef859e90dc2713fc91c25f4d01ee7734428df", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/0acef859e90dc2713fc91c25f4d01ee7734428df", "committedDate": "2020-05-06T00:35:25Z", "message": "Fixing IT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "633e15035f00b5ec069d163afbe89e8947c5ed89", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/633e15035f00b5ec069d163afbe89e8947c5ed89", "committedDate": "2020-05-06T00:36:22Z", "message": "Fixing IT\n\nCo-authored-by: Abhino <abhino@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3c946cd30780d10a8af988298ab0da43f165c89", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/b3c946cd30780d10a8af988298ab0da43f165c89", "committedDate": "2020-05-06T00:36:44Z", "message": "Merge branch 'elide-async-tests' of github.com:yahoo/elide into elide-async-tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "360550bd02a1a8114039c1fef88306e24a6f2526", "author": {"user": {"login": "Abhino", "name": "Abhinav Vijaykumar"}}, "url": "https://github.com/yahoo/elide/commit/360550bd02a1a8114039c1fef88306e24a6f2526", "committedDate": "2020-05-06T15:06:32Z", "message": "Adding Remaining integration tests\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd7306922b5833ca8a86fc1e6f58a76ac7f4774b", "author": {"user": {"login": "Abhino", "name": "Abhinav Vijaykumar"}}, "url": "https://github.com/yahoo/elide/commit/bd7306922b5833ca8a86fc1e6f58a76ac7f4774b", "committedDate": "2020-05-06T20:37:22Z", "message": "Consolidating filter logic for integration tests\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e8f6227cfb9de31bc9836fcd4601cff5e86011a", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/8e8f6227cfb9de31bc9836fcd4601cff5e86011a", "committedDate": "2020-05-07T19:54:53Z", "message": "Fixing legacy Hibernate entity manager store (so it doesn't recycle the entity manager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b10e8a56dd46892db0c1089533de7c1201a7d93", "author": {"user": {"login": "Abhino", "name": "Abhinav Vijaykumar"}}, "url": "https://github.com/yahoo/elide/commit/5b10e8a56dd46892db0c1089533de7c1201a7d93", "committedDate": "2020-05-07T20:02:20Z", "message": "Merge pull request #1307 from yahoo/FixHibernateEntityManagerStore\n\nFix hibernate entity manager store threading issue."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80103a7a4f1359aa9fc1582f6a09e9312c9dcbfe", "author": {"user": {"login": "Abhino", "name": "Abhinav Vijaykumar"}}, "url": "https://github.com/yahoo/elide/commit/80103a7a4f1359aa9fc1582f6a09e9312c9dcbfe", "committedDate": "2020-05-07T20:29:11Z", "message": "Adding additional integration tests for Standalone and Spring boot\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73c332b70bfacc2f937ba4b3e8a43043845060b6", "author": {"user": {"login": "Abhino", "name": "Abhinav Vijaykumar"}}, "url": "https://github.com/yahoo/elide/commit/73c332b70bfacc2f937ba4b3e8a43043845060b6", "committedDate": "2020-05-08T02:19:26Z", "message": "Fixing codacy errors\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NTQ4ODk3", "url": "https://github.com/yahoo/elide/pull/1311#pullrequestreview-408548897", "createdAt": "2020-05-08T21:52:24Z", "commit": {"oid": "73c332b70bfacc2f937ba4b3e8a43043845060b6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMTo1MjoyNFrOGS004A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMjoyMDoyNlrOGS1Wtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM5MzA1Ng==", "bodyText": "Remove versions and use the parent pom's dependency management for junit.", "url": "https://github.com/yahoo/elide/pull/1311#discussion_r422393056", "createdAt": "2020-05-08T21:52:24Z", "author": {"login": "aklish"}, "path": "elide-async/pom.xml", "diffHunk": "@@ -53,24 +53,68 @@\n             <artifactId>elide-graphql</artifactId>\n             <version>5.0.0-pr9-SNAPSHOT</version>\n         </dependency>\n+\n         <dependency>\n             <groupId>javax.persistence</groupId>\n             <artifactId>javax.persistence-api</artifactId>\n             <version>2.2</version>\n             <scope>provided</scope>\n         </dependency>\n+\n         <dependency>\n             <groupId>org.apache.httpcomponents</groupId>\n             <artifactId>httpclient</artifactId>\n             <version>4.5.3</version>\n         </dependency>\n+\n+        <!-- Test -->\n+        <!-- JUnit -->\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter-api</artifactId>\n+            <version>${junit.version}</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73c332b70bfacc2f937ba4b3e8a43043845060b6"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM5MzI2OQ==", "bodyText": "This version is out of sync with the rest of elide.", "url": "https://github.com/yahoo/elide/pull/1311#discussion_r422393269", "createdAt": "2020-05-08T21:52:59Z", "author": {"login": "aklish"}, "path": "elide-async/pom.xml", "diffHunk": "@@ -53,24 +53,68 @@\n             <artifactId>elide-graphql</artifactId>\n             <version>5.0.0-pr9-SNAPSHOT</version>\n         </dependency>\n+\n         <dependency>\n             <groupId>javax.persistence</groupId>\n             <artifactId>javax.persistence-api</artifactId>\n             <version>2.2</version>\n             <scope>provided</scope>\n         </dependency>\n+\n         <dependency>\n             <groupId>org.apache.httpcomponents</groupId>\n             <artifactId>httpclient</artifactId>\n             <version>4.5.3</version>\n         </dependency>\n+\n+        <!-- Test -->\n+        <!-- JUnit -->\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter-api</artifactId>\n+            <version>${junit.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter-params</artifactId>\n+            <version>${junit.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter-engine</artifactId>\n+            <version>${junit.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+\n+        <!-- H2 -->\n+        <dependency>\n+            <groupId>com.h2database</groupId>\n+            <artifactId>h2</artifactId>\n+            <version>1.4.197</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73c332b70bfacc2f937ba4b3e8a43043845060b6"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM5NDA1OA==", "bodyText": "1024 is pretty tiny.   We might want to make the type LONGTEXT or at least TEXT.", "url": "https://github.com/yahoo/elide/pull/1311#discussion_r422394058", "createdAt": "2020-05-08T21:55:30Z", "author": {"login": "aklish"}, "path": "elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQueryResult.java", "diffHunk": "@@ -38,6 +38,7 @@\n \n     private Integer contentLength;\n \n+    @Column(columnDefinition = \"varchar(1024)\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73c332b70bfacc2f937ba4b3e8a43043845060b6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM5NDM5Mg==", "bodyText": "Rather than make a getter here - it is cleaner to add another constructor where the cleaner can be provided (by your test in this case).", "url": "https://github.com/yahoo/elide/pull/1311#discussion_r422394392", "createdAt": "2020-05-08T21:56:27Z", "author": {"login": "aklish"}, "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncCleanerService.java", "diffHunk": "@@ -15,21 +16,23 @@\n import java.util.concurrent.TimeUnit;\n \n import javax.inject.Inject;\n-\n /**\n  * Service to execute Async queries.\n  * It will schedule task to track long running queries and kills them.\n  * It will also schedule task to update orphan query statuses\n  * after host/app crash or restart.\n  */\n @Slf4j\n+@Getter\n public class AsyncCleanerService {\n \n     private final int defaultCleanupDelayMinutes = 360;\n     private final int maxCleanupInitialDelayMinutes = 100;\n \n     private static AsyncCleanerService asyncCleanerService = null;\n \n+    private ScheduledExecutorService cleaner;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73c332b70bfacc2f937ba4b3e8a43043845060b6"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM5NTY5Ng==", "bodyText": "Normally, we don't mock the dictionary or the elide settings.  Is there a reason you can't just create a dictionary here and use it?", "url": "https://github.com/yahoo/elide/pull/1311#discussion_r422395696", "createdAt": "2020-05-08T22:00:25Z", "author": {"login": "aklish"}, "path": "elide-async/src/test/java/com/yahoo/elide/async/service/AsyncExecutorServiceTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.ElideSettings;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.AsyncQueryResult;\n+import com.yahoo.elide.async.models.QueryStatus;\n+import com.yahoo.elide.core.EntityDictionary;\n+import com.yahoo.elide.jsonapi.JsonApiMapper;\n+import com.yahoo.elide.security.User;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+public class AsyncExecutorServiceTest {\n+\n+    private AsyncExecutorService service;\n+    private Elide elide;\n+    private AsyncQueryDAO asyncQueryDao;\n+\n+    @BeforeAll\n+    public void setupMocks() {\n+        elide = mock(Elide.class);\n+        asyncQueryDao = mock(DefaultAsyncQueryDAO.class);\n+        ElideSettings elideSettings = mock(ElideSettings.class);\n+        EntityDictionary dictionary = mock(EntityDictionary.class);\n+        JsonApiMapper mapper = mock(JsonApiMapper.class);\n+        ObjectMapper objectMapper = mock(ObjectMapper.class);\n+        Set<Class<?>> boundclasses = new HashSet<Class<?>>();\n+        boundclasses.add(AsyncQuery.class);\n+        boundclasses.add(AsyncQueryResult.class);\n+\n+        Set<String> apiCollection = new HashSet<String>();\n+        apiCollection.add(\"v1\");\n+\n+        when(elide.getElideSettings()).thenReturn(elideSettings);\n+        when(elideSettings.getDictionary()).thenReturn(dictionary);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73c332b70bfacc2f937ba4b3e8a43043845060b6"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM5NjY1OA==", "bodyText": "Given that the interrupt thread will be removed/rewritten, you can just delete the tests for now.", "url": "https://github.com/yahoo/elide/pull/1311#discussion_r422396658", "createdAt": "2020-05-08T22:03:31Z", "author": {"login": "aklish"}, "path": "elide-async/src/test/java/com/yahoo/elide/async/service/AsyncQueryInterruptThreadTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyLong;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.QueryStatus;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.Date;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+public class AsyncQueryInterruptThreadTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73c332b70bfacc2f937ba4b3e8a43043845060b6"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM5NzczMQ==", "bodyText": "In practice, this doesn't happen.  What does happen is that the queryRunner might throw an exception.  We should mock and test that scenario.", "url": "https://github.com/yahoo/elide/pull/1311#discussion_r422397731", "createdAt": "2020-05-08T22:07:03Z", "author": {"login": "aklish"}, "path": "elide-async/src/test/java/com/yahoo/elide/async/service/AsyncQueryThreadTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.ElideResponse;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.QueryStatus;\n+import com.yahoo.elide.async.models.QueryType;\n+import com.yahoo.elide.graphql.QueryRunner;\n+import com.yahoo.elide.security.User;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+public class AsyncQueryThreadTest {\n+\n+    private AsyncQueryThread queryThread;\n+    private User user;\n+    private Elide elide;\n+    private QueryRunner runner;\n+    private AsyncQuery queryObj;\n+    private AsyncQueryDAO asyncQueryDao;\n+\n+    @BeforeEach\n+    public void setupMocks() {\n+        user = mock(User.class);\n+        elide = mock(Elide.class);\n+        runner = mock(QueryRunner.class);\n+        queryObj = mock(AsyncQuery.class);\n+        asyncQueryDao = mock(DefaultAsyncQueryDAO.class);\n+        queryThread = new AsyncQueryThread(queryObj, user, elide, runner, asyncQueryDao, \"v1\");\n+    }\n+\n+    @Test\n+    public void testAsyncQueryCleanerThreadSet() {\n+        assertEquals(queryObj, queryThread.getQueryObj());\n+        assertEquals(user, queryThread.getUser());\n+        assertEquals(elide, queryThread.getElide());\n+        assertEquals(runner, queryThread.getRunner());\n+        assertEquals(asyncQueryDao, queryThread.getAsyncQueryDao());\n+    }\n+\n+    @Test\n+    public void testProcessQueryJsonApi() {\n+        String query = \"/group?sort=commonName&fields%5Bgroup%5D=commonName,description\";\n+        ElideResponse response = mock(ElideResponse.class);\n+\n+        when(queryObj.getQuery()).thenReturn(query);\n+        when(queryObj.getQueryType()).thenReturn(QueryType.JSONAPI_V1_0);\n+        when(elide.get(anyString(), any(), any(), anyString())).thenReturn(response);\n+        when(response.getResponseCode()).thenReturn(200);\n+        when(response.getBody()).thenReturn(\"ResponseBody\");\n+\n+        queryThread.processQuery();\n+\n+        verify(asyncQueryDao, times(1)).updateStatus(queryObj, QueryStatus.PROCESSING);\n+        verify(asyncQueryDao, times(1)).updateStatus(queryObj, QueryStatus.COMPLETE);\n+        verify(asyncQueryDao, times(1)).createAsyncQueryResult(anyInt(), anyString(), any(), any());\n+    }\n+\n+    @Test\n+    public void testProcessQueryGraphQl() {\n+        String query = \"{\\\"query\\\":\\\"{ group { edges { node { name commonName description } } } }\\\",\\\"variables\\\":null}\";\n+        ElideResponse response = mock(ElideResponse.class);\n+\n+        when(queryObj.getQuery()).thenReturn(query);\n+        when(queryObj.getQueryType()).thenReturn(QueryType.GRAPHQL_V1_0);\n+        when(runner.run(query, user)).thenReturn(response);\n+        when(response.getResponseCode()).thenReturn(200);\n+        when(response.getBody()).thenReturn(\"ResponseBody\");\n+\n+        queryThread.processQuery();\n+\n+        verify(asyncQueryDao, times(1)).updateStatus(queryObj, QueryStatus.PROCESSING);\n+        verify(asyncQueryDao, times(1)).updateStatus(queryObj, QueryStatus.COMPLETE);\n+        verify(asyncQueryDao, times(1)).createAsyncQueryResult(anyInt(), anyString(), any(), any());\n+    }\n+\n+    @Test\n+    public void testProcessQueryNoResponse() {\n+        String query = \"{\\\"query\\\":\\\"{ group { edges { node { name commonName description } } } }\\\",\\\"variables\\\":null}\";\n+\n+        when(queryObj.getQuery()).thenReturn(query);\n+        when(queryObj.getQueryType()).thenReturn(QueryType.GRAPHQL_V1_0);\n+        when(runner.run(query, user)).thenReturn(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73c332b70bfacc2f937ba4b3e8a43043845060b6"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM5ODc0Mg==", "bodyText": "Why does the datastore depend on async?", "url": "https://github.com/yahoo/elide/pull/1311#discussion_r422398742", "createdAt": "2020-05-08T22:10:31Z", "author": {"login": "aklish"}, "path": "elide-datastore/pom.xml", "diffHunk": "@@ -100,7 +100,11 @@\n             <groupId>org.junit.jupiter</groupId>\n             <artifactId>junit-jupiter-engine</artifactId>\n         </dependency>\n-\n+        <dependency>\n+            <groupId>com.yahoo.elide</groupId>\n+            <artifactId>elide-async</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73c332b70bfacc2f937ba4b3e8a43043845060b6"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM5OTIzNw==", "bodyText": "Why do we skip in memory?  As a best practice, I always put the reason so that we can remove these over time.  What doesn't work in memory?", "url": "https://github.com/yahoo/elide/pull/1311#discussion_r422399237", "createdAt": "2020-05-08T22:12:15Z", "author": {"login": "aklish"}, "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java", "diffHunk": "@@ -0,0 +1,541 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.integration.tests;\n+\n+import static com.yahoo.elide.Elide.JSONAPI_CONTENT_TYPE;\n+import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.document;\n+import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.field;\n+import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.selections;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.attr;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.attributes;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.data;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.datum;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.id;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.resource;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.type;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.hamcrest.CoreMatchers.nullValue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import com.yahoo.elide.async.integration.tests.framework.AsyncIntegrationTestApplicationResourceConfig;\n+import com.yahoo.elide.contrib.testhelpers.jsonapi.elements.Resource;\n+import com.yahoo.elide.core.HttpStatus;\n+import com.yahoo.elide.initialization.IntegrationTest;\n+import com.yahoo.elide.resources.JsonApiEndpoint;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+\n+import io.restassured.response.Response;\n+\n+import javax.ws.rs.core.MediaType;\n+\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+public class AsyncIT extends IntegrationTest {\n+\n+    public AsyncIT() {\n+        super(AsyncIntegrationTestApplicationResourceConfig.class, JsonApiEndpoint.class.getPackage().getName());\n+    }\n+\n+    private static final Resource ENDERS_GAME = resource(\n+            type(\"book\"),\n+            attributes(\n+                    attr(\"title\", \"Ender's Game\"),\n+                    attr(\"genre\", \"Science Fiction\"),\n+                    attr(\"language\", \"English\")\n+            )\n+    );\n+\n+    private static final Resource GAME_OF_THRONES = resource(\n+            type(\"book\"),\n+            attributes(\n+                    attr(\"title\", \"Song of Ice and Fire\"),\n+                    attr(\"genre\", \"Mythology Fiction\"),\n+                    attr(\"language\", \"English\")\n+            )\n+    );\n+\n+    private static final Resource FOR_WHOM_THE_BELL_TOLLS = resource(\n+            type(\"book\"),\n+            attributes(\n+                    attr(\"title\", \"For Whom the Bell Tolls\"),\n+                    attr(\"genre\", \"Literary Fiction\"),\n+                    attr(\"language\", \"English\")\n+            )\n+    );\n+\n+    /**\n+     * Creates test data for all tests.\n+     */\n+    @BeforeEach\n+    public void init() {\n+        //Create Book: Ender's Game\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .accept(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        datum(ENDERS_GAME).toJSON()\n+                )\n+                .post(\"/book\")\n+                .then()\n+                .statusCode(HttpStatus.SC_CREATED);\n+\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .accept(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        datum(GAME_OF_THRONES).toJSON()\n+                )\n+                .post(\"/book\")\n+                .then()\n+                .statusCode(HttpStatus.SC_CREATED);\n+\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .accept(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        datum(FOR_WHOM_THE_BELL_TOLLS).toJSON()\n+                )\n+                .post(\"/book\")\n+                .then()\n+                .statusCode(HttpStatus.SC_CREATED);\n+\n+    }\n+\n+    /**\n+     * Various tests for a JSONAPI query as a Async Request.\n+     */\n+    @Test\n+    @Tag(\"skipInMemory\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73c332b70bfacc2f937ba4b3e8a43043845060b6"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQwMDE1OQ==", "bodyText": "How does the test fail if this loop finishes without going to COMPLETE?", "url": "https://github.com/yahoo/elide/pull/1311#discussion_r422400159", "createdAt": "2020-05-08T22:15:10Z", "author": {"login": "aklish"}, "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java", "diffHunk": "@@ -0,0 +1,541 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.integration.tests;\n+\n+import static com.yahoo.elide.Elide.JSONAPI_CONTENT_TYPE;\n+import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.document;\n+import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.field;\n+import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.selections;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.attr;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.attributes;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.data;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.datum;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.id;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.resource;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.type;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.hamcrest.CoreMatchers.nullValue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import com.yahoo.elide.async.integration.tests.framework.AsyncIntegrationTestApplicationResourceConfig;\n+import com.yahoo.elide.contrib.testhelpers.jsonapi.elements.Resource;\n+import com.yahoo.elide.core.HttpStatus;\n+import com.yahoo.elide.initialization.IntegrationTest;\n+import com.yahoo.elide.resources.JsonApiEndpoint;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+\n+import io.restassured.response.Response;\n+\n+import javax.ws.rs.core.MediaType;\n+\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+public class AsyncIT extends IntegrationTest {\n+\n+    public AsyncIT() {\n+        super(AsyncIntegrationTestApplicationResourceConfig.class, JsonApiEndpoint.class.getPackage().getName());\n+    }\n+\n+    private static final Resource ENDERS_GAME = resource(\n+            type(\"book\"),\n+            attributes(\n+                    attr(\"title\", \"Ender's Game\"),\n+                    attr(\"genre\", \"Science Fiction\"),\n+                    attr(\"language\", \"English\")\n+            )\n+    );\n+\n+    private static final Resource GAME_OF_THRONES = resource(\n+            type(\"book\"),\n+            attributes(\n+                    attr(\"title\", \"Song of Ice and Fire\"),\n+                    attr(\"genre\", \"Mythology Fiction\"),\n+                    attr(\"language\", \"English\")\n+            )\n+    );\n+\n+    private static final Resource FOR_WHOM_THE_BELL_TOLLS = resource(\n+            type(\"book\"),\n+            attributes(\n+                    attr(\"title\", \"For Whom the Bell Tolls\"),\n+                    attr(\"genre\", \"Literary Fiction\"),\n+                    attr(\"language\", \"English\")\n+            )\n+    );\n+\n+    /**\n+     * Creates test data for all tests.\n+     */\n+    @BeforeEach\n+    public void init() {\n+        //Create Book: Ender's Game\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .accept(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        datum(ENDERS_GAME).toJSON()\n+                )\n+                .post(\"/book\")\n+                .then()\n+                .statusCode(HttpStatus.SC_CREATED);\n+\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .accept(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        datum(GAME_OF_THRONES).toJSON()\n+                )\n+                .post(\"/book\")\n+                .then()\n+                .statusCode(HttpStatus.SC_CREATED);\n+\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .accept(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        datum(FOR_WHOM_THE_BELL_TOLLS).toJSON()\n+                )\n+                .post(\"/book\")\n+                .then()\n+                .statusCode(HttpStatus.SC_CREATED);\n+\n+    }\n+\n+    /**\n+     * Various tests for a JSONAPI query as a Async Request.\n+     */\n+    @Test\n+    @Tag(\"skipInMemory\")\n+    public void jsonApiRequestTests() throws InterruptedException {\n+\n+        //Create Async Request\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        data(\n+                                resource(\n+                                        type(\"asyncQuery\"),\n+                                        id(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"),\n+                                        attributes(\n+                                                attr(\"query\", \"/book?sort=genre&fields%5Bbook%5D=title\"),\n+                                                attr(\"queryType\", \"JSONAPI_V1_0\"),\n+                                                attr(\"status\", \"QUEUED\")\n+                                        )\n+                                )\n+                        ).toJSON())\n+                .when()\n+                .post(\"/asyncQuery\")\n+                .then()\n+                .statusCode(org.apache.http.HttpStatus.SC_CREATED);\n+\n+        int i = 0;\n+        while (i < 1000) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73c332b70bfacc2f937ba4b3e8a43043845060b6"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQwMDIzNQ==", "bodyText": "Same comment - why do we do this?", "url": "https://github.com/yahoo/elide/pull/1311#discussion_r422400235", "createdAt": "2020-05-08T22:15:27Z", "author": {"login": "aklish"}, "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java", "diffHunk": "@@ -0,0 +1,541 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.integration.tests;\n+\n+import static com.yahoo.elide.Elide.JSONAPI_CONTENT_TYPE;\n+import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.document;\n+import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.field;\n+import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.selections;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.attr;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.attributes;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.data;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.datum;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.id;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.resource;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.type;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.hamcrest.CoreMatchers.nullValue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import com.yahoo.elide.async.integration.tests.framework.AsyncIntegrationTestApplicationResourceConfig;\n+import com.yahoo.elide.contrib.testhelpers.jsonapi.elements.Resource;\n+import com.yahoo.elide.core.HttpStatus;\n+import com.yahoo.elide.initialization.IntegrationTest;\n+import com.yahoo.elide.resources.JsonApiEndpoint;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+\n+import io.restassured.response.Response;\n+\n+import javax.ws.rs.core.MediaType;\n+\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+public class AsyncIT extends IntegrationTest {\n+\n+    public AsyncIT() {\n+        super(AsyncIntegrationTestApplicationResourceConfig.class, JsonApiEndpoint.class.getPackage().getName());\n+    }\n+\n+    private static final Resource ENDERS_GAME = resource(\n+            type(\"book\"),\n+            attributes(\n+                    attr(\"title\", \"Ender's Game\"),\n+                    attr(\"genre\", \"Science Fiction\"),\n+                    attr(\"language\", \"English\")\n+            )\n+    );\n+\n+    private static final Resource GAME_OF_THRONES = resource(\n+            type(\"book\"),\n+            attributes(\n+                    attr(\"title\", \"Song of Ice and Fire\"),\n+                    attr(\"genre\", \"Mythology Fiction\"),\n+                    attr(\"language\", \"English\")\n+            )\n+    );\n+\n+    private static final Resource FOR_WHOM_THE_BELL_TOLLS = resource(\n+            type(\"book\"),\n+            attributes(\n+                    attr(\"title\", \"For Whom the Bell Tolls\"),\n+                    attr(\"genre\", \"Literary Fiction\"),\n+                    attr(\"language\", \"English\")\n+            )\n+    );\n+\n+    /**\n+     * Creates test data for all tests.\n+     */\n+    @BeforeEach\n+    public void init() {\n+        //Create Book: Ender's Game\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .accept(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        datum(ENDERS_GAME).toJSON()\n+                )\n+                .post(\"/book\")\n+                .then()\n+                .statusCode(HttpStatus.SC_CREATED);\n+\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .accept(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        datum(GAME_OF_THRONES).toJSON()\n+                )\n+                .post(\"/book\")\n+                .then()\n+                .statusCode(HttpStatus.SC_CREATED);\n+\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .accept(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        datum(FOR_WHOM_THE_BELL_TOLLS).toJSON()\n+                )\n+                .post(\"/book\")\n+                .then()\n+                .statusCode(HttpStatus.SC_CREATED);\n+\n+    }\n+\n+    /**\n+     * Various tests for a JSONAPI query as a Async Request.\n+     */\n+    @Test\n+    @Tag(\"skipInMemory\")\n+    public void jsonApiRequestTests() throws InterruptedException {\n+\n+        //Create Async Request\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        data(\n+                                resource(\n+                                        type(\"asyncQuery\"),\n+                                        id(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"),\n+                                        attributes(\n+                                                attr(\"query\", \"/book?sort=genre&fields%5Bbook%5D=title\"),\n+                                                attr(\"queryType\", \"JSONAPI_V1_0\"),\n+                                                attr(\"status\", \"QUEUED\")\n+                                        )\n+                                )\n+                        ).toJSON())\n+                .when()\n+                .post(\"/asyncQuery\")\n+                .then()\n+                .statusCode(org.apache.http.HttpStatus.SC_CREATED);\n+\n+        int i = 0;\n+        while (i < 1000) {\n+            Thread.sleep(10);\n+            Response response = given()\n+                    .accept(\"application/vnd.api+json\")\n+                    .get(\"/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\");\n+\n+            // If Async Query is created and completed\n+            if (response.jsonPath().getString(\"data.attributes.status\").equals(\"COMPLETE\")) {\n+\n+                // Validate AsyncQuery Response\n+                response\n+                        .then()\n+                        .statusCode(HttpStatus.SC_OK)\n+                        .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n+                        .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                        .body(\"data.attributes.queryType\", equalTo(\"JSONAPI_V1_0\"))\n+                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n+                        .body(\"data.relationships.result.data.type\", equalTo(\"asyncQueryResult\"))\n+                        .body(\"data.relationships.result.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+\n+                // Validate AsyncQueryResult Response\n+                given()\n+                        .accept(\"application/vnd.api+json\")\n+                        .get(\"/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d/result\")\n+                        .then()\n+                        .statusCode(HttpStatus.SC_OK)\n+                        .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n+                        .body(\"data.type\", equalTo(\"asyncQueryResult\"))\n+                        .body(\"data.attributes.contentLength\", notNullValue())\n+                        .body(\"data.attributes.responseBody\", equalTo(\"{\\\"data\\\":\"\n+                                + \"[{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"3\\\",\\\"attributes\\\":{\\\"title\\\":\\\"For Whom the Bell Tolls\\\"}}\"\n+                                + \",{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"2\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Song of Ice and Fire\\\"}},\"\n+                                + \"{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"1\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Ender's Game\\\"}}]}\"))\n+                        .body(\"data.attributes.status\", equalTo(200))\n+                        .body(\"data.relationships.query.data.type\", equalTo(\"asyncQuery\"))\n+                        .body(\"data.relationships.query.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+\n+                // Validate GraphQL Response\n+                String responseGraphQL = given()\n+                        .contentType(MediaType.APPLICATION_JSON)\n+                        .accept(MediaType.APPLICATION_JSON)\n+                        .body(\"{\\\"query\\\":\\\"{ asyncQuery(ids: [\\\\\\\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\\\\\\\"]) \"\n+                                + \"{ edges { node { id queryType status result \"\n+                                + \"{ edges { node { id responseBody status} } } } } } }\\\",\"\n+                                + \"\\\"variables\\\":null}\")\n+                        .post(\"/graphQL\")\n+                        .asString();\n+\n+                String expectedResponse = document(\n+                        selections(\n+                                field(\n+                                        \"asyncQuery\",\n+                                        selections(\n+                                                field(\"id\", \"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"),\n+                                                field(\"queryType\", \"JSONAPI_V1_0\"),\n+                                                field(\"status\", \"COMPLETE\"),\n+                                                field(\"result\",\n+                                                        selections(\n+                                                                field(\"id\", \"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"),\n+                                                                field(\"responseBody\", \"{\\\\\\\"data\\\\\\\":\"\n+                                                                        + \"[{\\\\\\\"type\\\\\\\":\\\\\\\"book\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"3\\\\\\\",\\\\\\\"attributes\\\\\\\":{\\\\\\\"title\\\\\\\":\\\\\\\"For Whom the Bell Tolls\\\\\\\"}}\"\n+                                                                        + \",{\\\\\\\"type\\\\\\\":\\\\\\\"book\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"attributes\\\\\\\":{\\\\\\\"title\\\\\\\":\\\\\\\"Song of Ice and Fire\\\\\\\"}},\"\n+                                                                        + \"{\\\\\\\"type\\\\\\\":\\\\\\\"book\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"attributes\\\\\\\":{\\\\\\\"title\\\\\\\":\\\\\\\"Ender's Game\\\\\\\"}}]}\"),\n+                                                                field(\"status\", 200)\n+                                                        ))\n+                                        )\n+                                )\n+                        )\n+                ).toResponse();\n+\n+                assertEquals(expectedResponse, responseGraphQL);\n+                break;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Various tests for a GRAPHQL query as a Async Request.\n+     */\n+    @Test\n+    @Tag(\"skipInMemory\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73c332b70bfacc2f937ba4b3e8a43043845060b6"}, "originalPosition": 221}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQwMTcxOA==", "bodyText": "I don't think we need setters here for testing.  Let's remove.", "url": "https://github.com/yahoo/elide/pull/1311#discussion_r422401718", "createdAt": "2020-05-08T22:20:26Z", "author": {"login": "aklish"}, "path": "elide-async/src/main/java/com/yahoo/elide/async/service/DefaultAsyncQueryDAO.java", "diffHunk": "@@ -38,10 +39,13 @@\n  */\n @Singleton\n @Slf4j\n+@Getter\n public class DefaultAsyncQueryDAO implements AsyncQueryDAO {\n \n     @Setter private Elide elide;\n     @Setter private DataStore dataStore;\n+    @Setter private EntityDictionary dictionary;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73c332b70bfacc2f937ba4b3e8a43043845060b6"}, "originalPosition": 17}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "432ef5dda9b5630ab3a65a81e4aefb1ddafc9dee", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/432ef5dda9b5630ab3a65a81e4aefb1ddafc9dee", "committedDate": "2020-05-11T05:37:45Z", "message": "Review Comments"}, "afterCommit": {"oid": "1b1164574e1ad2d9b942acf1bc125b345ff1c41d", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/1b1164574e1ad2d9b942acf1bc125b345ff1c41d", "committedDate": "2020-05-11T14:55:03Z", "message": "Review Comments\n\nCo-authored-by: abhino <abhino@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5MzEwOTc4", "url": "https://github.com/yahoo/elide/pull/1311#pullrequestreview-409310978", "createdAt": "2020-05-11T16:00:27Z", "commit": {"oid": "2a00d5ff5a3bebbdcd96de60380d0f05ea6ac873"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNjowMDoyN1rOGTiz_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNjowMDoyN1rOGTiz_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE0NjQ5Mg==", "bodyText": "Add fail here outside the loop.", "url": "https://github.com/yahoo/elide/pull/1311#discussion_r423146492", "createdAt": "2020-05-11T16:00:27Z", "author": {"login": "aklish"}, "path": "elide-standalone/src/test/java/example/ElideStandaloneTest.java", "diffHunk": "@@ -189,5 +235,104 @@ public void testSwaggerEndpoint() throws Exception {\n                 .then()\n                 .statusCode(200);\n     }\n+\n+    @Test\n+    public void testAsyncApiEndpoint() throws InterruptedException {\n+        //Create Async Request\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        data(\n+                                resource(\n+                                        type(\"asyncQuery\"),\n+                                        id(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"),\n+                                        attributes(\n+                                                attr(\"query\", \"/post\"),\n+                                                attr(\"queryType\", \"JSONAPI_V1_0\"),\n+                                                attr(\"status\", \"QUEUED\")\n+                                        )\n+                                )\n+                        ).toJSON())\n+                .when()\n+                .post(\"/api/v1/asyncQuery\").asString();\n+\n+        int i = 0;\n+        while (i < 1000) {\n+            Thread.sleep(10);\n+            Response response = given()\n+                    .accept(\"application/vnd.api+json\")\n+                    .get(\"/api/v1/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\");\n+\n+            // If Async Query is created and completed\n+            if (response.jsonPath().getString(\"data.attributes.status\").equals(\"COMPLETE\")) {\n+\n+                // Validate AsyncQuery Response\n+                response\n+                        .then()\n+                        .statusCode(com.yahoo.elide.core.HttpStatus.SC_OK)\n+                        .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n+                        .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                        .body(\"data.attributes.queryType\", equalTo(\"JSONAPI_V1_0\"))\n+                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n+                        .body(\"data.relationships.result.data.type\", equalTo(\"asyncQueryResult\"))\n+                        .body(\"data.relationships.result.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+\n+                // Validate AsyncQueryResult Response\n+                given()\n+                        .accept(\"application/vnd.api+json\")\n+                        .get(\"/api/v1/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d/result\")\n+                        .then()\n+                        .statusCode(com.yahoo.elide.core.HttpStatus.SC_OK)\n+                        .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n+                        .body(\"data.type\", equalTo(\"asyncQueryResult\"))\n+                        .body(\"data.attributes.contentLength\", notNullValue())\n+                        .body(\"data.attributes.responseBody\", equalTo(\"{\\\"data\\\":\"\n+                                + \"[{\\\"type\\\":\\\"post\\\",\\\"id\\\":\\\"2\\\",\"\n+                                + \"\\\"attributes\\\":{\\\"abusiveContent\\\":false,\"\n+                                + \"\\\"content\\\":\\\"This is my first post. woot.\\\",\"\n+                                + \"\\\"date\\\":\\\"2019-01-01T00:00Z\\\"}}]}\"))\n+                        .body(\"data.attributes.status\", equalTo(200))\n+                        .body(\"data.relationships.query.data.type\", equalTo(\"asyncQuery\"))\n+                        .body(\"data.relationships.query.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+\n+                // Validate GraphQL Response\n+                String responseGraphQL = given()\n+                        .contentType(MediaType.APPLICATION_JSON)\n+                        .accept(MediaType.APPLICATION_JSON)\n+                        .body(\"{\\\"query\\\":\\\"{ asyncQuery(ids: [\\\\\\\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\\\\\\\"]) \"\n+                                + \"{ edges { node { id queryType status result \"\n+                                + \"{ edges { node { id responseBody status} } } } } } }\\\",\"\n+                                + \"\\\"variables\\\":null}\")\n+                        .post(\"/graphql/api/v1/\")\n+                        .asString();\n+\n+                String expectedResponse = document(\n+                        selections(\n+                                field(\n+                                        \"asyncQuery\",\n+                                        selections(\n+                                                field(\"id\", \"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"),\n+                                                field(\"queryType\", \"JSONAPI_V1_0\"),\n+                                                field(\"status\", \"COMPLETE\"),\n+                                                field(\"result\",\n+                                                        selections(\n+                                                                field(\"id\", \"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"),\n+                                                                field(\"responseBody\", \"{\\\\\\\"data\\\\\\\":\"\n+                                                                        + \"[{\\\\\\\"type\\\\\\\":\\\\\\\"post\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"2\\\\\\\",\"\n+                                                                        + \"\\\\\\\"attributes\\\\\\\":{\\\\\\\"abusiveContent\\\\\\\":false,\"\n+                                                                        + \"\\\\\\\"content\\\\\\\":\\\\\\\"This is my first post. woot.\\\\\\\"\"\n+                                                                        + \",\\\\\\\"date\\\\\\\":\\\\\\\"2019-01-01T00:00Z\\\\\\\"}}]}\"),\n+                                                                field(\"status\", 200)\n+                                                        ))\n+                                        )\n+                                )\n+                        )\n+                ).toResponse();\n+\n+                assertEquals(expectedResponse, responseGraphQL);\n+                break;\n+            }\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a00d5ff5a3bebbdcd96de60380d0f05ea6ac873"}, "originalPosition": 187}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e68aff144b9ce58cd9a5b5ff337fde07105d227", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/3e68aff144b9ce58cd9a5b5ff337fde07105d227", "committedDate": "2020-05-11T16:13:03Z", "message": "Review Comments\n\nCo-authored-by: abhino <abhino@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2a00d5ff5a3bebbdcd96de60380d0f05ea6ac873", "author": {"user": {"login": "Abhino", "name": "Abhinav Vijaykumar"}}, "url": "https://github.com/yahoo/elide/commit/2a00d5ff5a3bebbdcd96de60380d0f05ea6ac873", "committedDate": "2020-05-11T14:57:25Z", "message": "Merge branch 'elide-async-tests' of github.com:yahoo/elide into elide-async-tests"}, "afterCommit": {"oid": "3e68aff144b9ce58cd9a5b5ff337fde07105d227", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/3e68aff144b9ce58cd9a5b5ff337fde07105d227", "committedDate": "2020-05-11T16:13:03Z", "message": "Review Comments\n\nCo-authored-by: abhino <abhino@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5MzQxMTU2", "url": "https://github.com/yahoo/elide/pull/1311#pullrequestreview-409341156", "createdAt": "2020-05-11T16:38:09Z", "commit": {"oid": "3e68aff144b9ce58cd9a5b5ff337fde07105d227"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 926, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}