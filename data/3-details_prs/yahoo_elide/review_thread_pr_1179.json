{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxNjIzMDE5", "number": 1179, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNzo0MjoxOFrODe5hLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODowMzoyN1rODe59lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzI2MjU1OnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNzo0MjoxOFrOFoSotw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNzo0MjoxOFrOFoSotw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc5MjY5NQ==", "bodyText": "We need to remove all concept of Class<?> with the QueryEngine and metadata classes so that Fili can leverage this as well.", "url": "https://github.com/yahoo/elide/pull/1179#discussion_r377792695", "createdAt": "2020-02-11T17:42:18Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java", "diffHunk": "@@ -51,7 +60,31 @@\n  * <p>\n  * This is a {@link java.util.function functional interface} whose functional method is {@link #executeQuery(Query)}.\n  */\n-public interface QueryEngine {\n+public abstract class QueryEngine {\n+    @Getter\n+    private final MetaDataStore metaDataStore;\n+\n+    @Getter\n+    private final EntityDictionary metadataDictionary;\n+\n+    @Getter\n+    private final Map<Class<?>, Table> tables;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbad4f49a8ca84db32c6d082780a1ad30070dd39"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzI2NTU4OnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNzo0MzowOVrOFoSqlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNzo0MzowOVrOFoSqlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc5MzE3NQ==", "bodyText": "Same comment - we need to use table names - not classes for mapping.", "url": "https://github.com/yahoo/elide/pull/1179#discussion_r377793175", "createdAt": "2020-02-11T17:43:09Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java", "diffHunk": "@@ -61,12 +94,14 @@\n      *\n      * @return query results\n      */\n-    Iterable<Object> executeQuery(Query query);\n+    public abstract Iterable<Object> executeQuery(Query query);\n \n     /**\n      * Returns the schema for a given entity class.\n      * @param entityClass The class to map to a schema.\n      * @return The schema that represents the provided entity.\n      */\n-    Table getTable(Class<?> entityClass);\n+    public Table getTable(Class<?> entityClass) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbad4f49a8ca84db32c6d082780a1ad30070dd39"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzMxNzM1OnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/metadata/SQLMetric.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNzo1ODowMlrOFoTKUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMDoyNzoyMlrOFoX6ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgwMTI5OA==", "bodyText": "Should this return MetricFunction?", "url": "https://github.com/yahoo/elide/pull/1179#discussion_r377801298", "createdAt": "2020-02-11T17:58:02Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/metadata/SQLMetric.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.queryengines.sql.metadata;\n+\n+import com.yahoo.elide.core.EntityDictionary;\n+import com.yahoo.elide.datastores.aggregation.metadata.models.FunctionArgument;\n+import com.yahoo.elide.datastores.aggregation.metadata.models.Metric;\n+import com.yahoo.elide.datastores.aggregation.metadata.models.MetricFunction;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.metric.SQLMetricFunction;\n+\n+import java.util.Set;\n+\n+/**\n+ * SQLMetric would contain {@link SQLMetricFunction} instead of {@link MetricFunction}.\n+ */\n+public class SQLMetric extends Metric {\n+    public SQLMetric(Class<?> tableClass, String fieldName, EntityDictionary dictionary) {\n+        super(tableClass, fieldName, dictionary);\n+    }\n+\n+    @Override\n+    protected SQLMetricFunction constructMetricFunction(String id,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbad4f49a8ca84db32c6d082780a1ad30070dd39"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg3OTIzNQ==", "bodyText": "I think this is fine.", "url": "https://github.com/yahoo/elide/pull/1179#discussion_r377879235", "createdAt": "2020-02-11T20:27:22Z", "author": {"login": "hellohanchen"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/metadata/SQLMetric.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.queryengines.sql.metadata;\n+\n+import com.yahoo.elide.core.EntityDictionary;\n+import com.yahoo.elide.datastores.aggregation.metadata.models.FunctionArgument;\n+import com.yahoo.elide.datastores.aggregation.metadata.models.Metric;\n+import com.yahoo.elide.datastores.aggregation.metadata.models.MetricFunction;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.metric.SQLMetricFunction;\n+\n+import java.util.Set;\n+\n+/**\n+ * SQLMetric would contain {@link SQLMetricFunction} instead of {@link MetricFunction}.\n+ */\n+public class SQLMetric extends Metric {\n+    public SQLMetric(Class<?> tableClass, String fieldName, EntityDictionary dictionary) {\n+        super(tableClass, fieldName, dictionary);\n+    }\n+\n+    @Override\n+    protected SQLMetricFunction constructMetricFunction(String id,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgwMTI5OA=="}, "originalCommit": {"oid": "dbad4f49a8ca84db32c6d082780a1ad30070dd39"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzMyMDI0OnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/metadata/SQLTable.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNzo1ODo1N1rOFoTMPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMDoyNzoyNVrOFoX60w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgwMTc4OQ==", "bodyText": "Should the override methods return the base type?  Like Metric here?", "url": "https://github.com/yahoo/elide/pull/1179#discussion_r377801789", "createdAt": "2020-02-11T17:58:57Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/metadata/SQLTable.java", "diffHunk": "@@ -5,47 +5,39 @@\n  */\n package com.yahoo.elide.datastores.aggregation.queryengines.sql.metadata;\n \n-import static com.yahoo.elide.datastores.aggregation.metadata.MetaDataStore.isMetricField;\n-\n import com.yahoo.elide.core.EntityDictionary;\n-import com.yahoo.elide.datastores.aggregation.metadata.models.Column;\n import com.yahoo.elide.datastores.aggregation.metadata.models.Table;\n \n import lombok.Data;\n import lombok.EqualsAndHashCode;\n \n-import java.util.Map;\n-import java.util.function.Function;\n-import java.util.stream.Collectors;\n-\n /**\n  * SQL extension of {@link Table} which also contains sql column meta data.\n  */\n @EqualsAndHashCode(callSuper = true)\n @Data\n public class SQLTable extends Table {\n-    private Map<String, SQLColumn> sqlColumns;\n-\n     public SQLTable(Class<?> cls, EntityDictionary dictionary) {\n         super(cls, dictionary);\n-        this.sqlColumns = resolveSQLDimensions(cls, dictionary);\n     }\n \n-    /**\n-     * Resolve all sql columns of a table.\n-     *\n-     * @param cls table class\n-     * @param dictionary dictionary contains the table class\n-     * @return all resolved sql column metadata\n-     */\n-    public static Map<String, SQLColumn> resolveSQLDimensions(Class<?> cls, EntityDictionary dictionary) {\n-        return dictionary.getAllFields(cls).stream()\n-                .filter(field -> Column.getDataType(cls, field, dictionary) != null)\n-                .filter(field -> !isMetricField(dictionary, cls, field))\n-                .collect(Collectors.toMap(Function.identity(), field -> new SQLColumn(cls, field, dictionary)));\n+    public final SQLColumn getSQLColumn(String fieldName) {\n+        SQLDimension dimension = getColumn(SQLDimension.class, fieldName);\n+        return dimension == null ? getColumn(SQLTimeDimension.class, fieldName) : dimension;\n+    }\n+\n+    @Override\n+    protected SQLMetric constructMetric(Class<?> cls, String fieldName, EntityDictionary dictionary) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbad4f49a8ca84db32c6d082780a1ad30070dd39"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg3OTI1MQ==", "bodyText": "I think this is fine.", "url": "https://github.com/yahoo/elide/pull/1179#discussion_r377879251", "createdAt": "2020-02-11T20:27:25Z", "author": {"login": "hellohanchen"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/metadata/SQLTable.java", "diffHunk": "@@ -5,47 +5,39 @@\n  */\n package com.yahoo.elide.datastores.aggregation.queryengines.sql.metadata;\n \n-import static com.yahoo.elide.datastores.aggregation.metadata.MetaDataStore.isMetricField;\n-\n import com.yahoo.elide.core.EntityDictionary;\n-import com.yahoo.elide.datastores.aggregation.metadata.models.Column;\n import com.yahoo.elide.datastores.aggregation.metadata.models.Table;\n \n import lombok.Data;\n import lombok.EqualsAndHashCode;\n \n-import java.util.Map;\n-import java.util.function.Function;\n-import java.util.stream.Collectors;\n-\n /**\n  * SQL extension of {@link Table} which also contains sql column meta data.\n  */\n @EqualsAndHashCode(callSuper = true)\n @Data\n public class SQLTable extends Table {\n-    private Map<String, SQLColumn> sqlColumns;\n-\n     public SQLTable(Class<?> cls, EntityDictionary dictionary) {\n         super(cls, dictionary);\n-        this.sqlColumns = resolveSQLDimensions(cls, dictionary);\n     }\n \n-    /**\n-     * Resolve all sql columns of a table.\n-     *\n-     * @param cls table class\n-     * @param dictionary dictionary contains the table class\n-     * @return all resolved sql column metadata\n-     */\n-    public static Map<String, SQLColumn> resolveSQLDimensions(Class<?> cls, EntityDictionary dictionary) {\n-        return dictionary.getAllFields(cls).stream()\n-                .filter(field -> Column.getDataType(cls, field, dictionary) != null)\n-                .filter(field -> !isMetricField(dictionary, cls, field))\n-                .collect(Collectors.toMap(Function.identity(), field -> new SQLColumn(cls, field, dictionary)));\n+    public final SQLColumn getSQLColumn(String fieldName) {\n+        SQLDimension dimension = getColumn(SQLDimension.class, fieldName);\n+        return dimension == null ? getColumn(SQLTimeDimension.class, fieldName) : dimension;\n+    }\n+\n+    @Override\n+    protected SQLMetric constructMetric(Class<?> cls, String fieldName, EntityDictionary dictionary) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgwMTc4OQ=="}, "originalCommit": {"oid": "dbad4f49a8ca84db32c6d082780a1ad30070dd39"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzMzNTI1OnYy", "diffSide": "LEFT", "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODowMzoyN1rOFoTV-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODowMzoyN1rOFoTV-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgwNDI4Mw==", "bodyText": "We should provide a bean that allows users to override the QueryEngine bean that is used.", "url": "https://github.com/yahoo/elide/pull/1179#discussion_r377804283", "createdAt": "2020-02-11T18:03:27Z", "author": {"login": "aklish"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java", "diffHunk": "@@ -135,15 +136,4 @@ public Swagger buildSwagger(EntityDictionary dictionary, ElideConfigProperties s\n \n         return swagger;\n     }\n-\n-    /**\n-     * Configure the QueryEngineFactory that the Aggregation Data Store uses.\n-     * @param entityManagerFactory Needed by the SQLQueryEngine\n-     * @return a SQLQueryEngineFactory\n-     */\n-    @Bean\n-    @ConditionalOnMissingBean\n-    public QueryEngineFactory buildQueryEngineFactory(EntityManagerFactory entityManagerFactory) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbad4f49a8ca84db32c6d082780a1ad30070dd39"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1056, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}