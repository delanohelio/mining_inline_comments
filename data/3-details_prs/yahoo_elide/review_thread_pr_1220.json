{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwNjAyMjM3", "number": 1220, "reviewThreads": {"totalCount": 39, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxODo1Mzo0M1rODrWpJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMDoxMTowMlrOD5-kZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Nzg2MzQwOnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/security.hbs", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxODo1Mzo0M1rOF7pwLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxODo1Mzo0M1rOF7pwLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA5NDM4MQ==", "bodyText": "Role checks should be generated from roles rather than rules.  Rules we are skipping for first phase.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r398094381", "createdAt": "2020-03-25T18:53:43Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/security.hbs", "diffHunk": "@@ -0,0 +1,22 @@\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import java.security.Principal;\n+import java.util.Optional;\n+import com.yahoo.elide.annotation.SecurityCheck;\n+import com.yahoo.elide.security.checks.prefab.Role.RoleMemberCheck;\n+\n+/**\n+ * Operation Checks on the Async Query and Result objects.\n+ */\n+public class AsyncQueryOperationChecks {\n+\n+{{#each rules}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89060707ae67ab6d4459e870daf5d6f15e34890b"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Nzg2ODYzOnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxODo1NTowN1rOF7pzeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMTo1OToxOFrOF7v-VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA5NTIyNg==", "bodyText": "We also need to be able to generate FromSQL annotation as well.  It will be one or the other (FromTable or FromSQL).", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r398095226", "createdAt": "2020-03-25T18:55:07Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+import com.yahoo.elide.datastores.aggregation.annotation.DimensionFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.Join;\n+import com.yahoo.elide.datastores.aggregation.annotation.JoinTo;\n+import com.yahoo.elide.datastores.aggregation.annotation.Temporal;\n+import com.yahoo.elide.datastores.aggregation.annotation.TimeGrainDefinition;\n+import com.yahoo.elide.datastores.aggregation.metadata.enums.TimeGrain;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+import lombok.Data;\n+\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Id;\n+import javax.persistence.Entity;\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Include(rootLevel = true)\n+@Cardinality(size = CardinalitySize.{{#toUpperCase cardinality}}{{/toUpperCase}})\n+@EqualsAndHashCode\n+@ToString\n+@Entity\n+@Data\n+{{#if table}}@FromTable(name = \"{{table}}\"){{/if}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89060707ae67ab6d4459e870daf5d6f15e34890b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE5NjMwOQ==", "bodyText": "We also need to handle extends here as well - it can be any of these options.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r398196309", "createdAt": "2020-03-25T21:59:18Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+import com.yahoo.elide.datastores.aggregation.annotation.DimensionFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.Join;\n+import com.yahoo.elide.datastores.aggregation.annotation.JoinTo;\n+import com.yahoo.elide.datastores.aggregation.annotation.Temporal;\n+import com.yahoo.elide.datastores.aggregation.annotation.TimeGrainDefinition;\n+import com.yahoo.elide.datastores.aggregation.metadata.enums.TimeGrain;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+import lombok.Data;\n+\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Id;\n+import javax.persistence.Entity;\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Include(rootLevel = true)\n+@Cardinality(size = CardinalitySize.{{#toUpperCase cardinality}}{{/toUpperCase}})\n+@EqualsAndHashCode\n+@ToString\n+@Entity\n+@Data\n+{{#if table}}@FromTable(name = \"{{table}}\"){{/if}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA5NTIyNg=="}, "originalCommit": {"oid": "89060707ae67ab6d4459e870daf5d6f15e34890b"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Nzg3MjEzOnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxODo1NjowMVrOF7p1oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjowMDoxNlrOF7v_7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA5NTc3Ng==", "bodyText": "Each Dimension and Metric will need an annotation (DimensionFormula and MetricFormula) respectively.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r398095776", "createdAt": "2020-03-25T18:56:01Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+import com.yahoo.elide.datastores.aggregation.annotation.DimensionFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.Join;\n+import com.yahoo.elide.datastores.aggregation.annotation.JoinTo;\n+import com.yahoo.elide.datastores.aggregation.annotation.Temporal;\n+import com.yahoo.elide.datastores.aggregation.annotation.TimeGrainDefinition;\n+import com.yahoo.elide.datastores.aggregation.metadata.enums.TimeGrain;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+import lombok.Data;\n+\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Id;\n+import javax.persistence.Entity;\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Include(rootLevel = true)\n+@Cardinality(size = CardinalitySize.{{#toUpperCase cardinality}}{{/toUpperCase}})\n+@EqualsAndHashCode\n+@ToString\n+@Entity\n+@Data\n+{{#if table}}@FromTable(name = \"{{table}}\"){{/if}}\n+public class {{#capitalizeFirstLetter name}}{{/capitalizeFirstLetter}} {\n+\n+    @Id\n+    private String name;\n+\n+{{#each dimensions}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89060707ae67ab6d4459e870daf5d6f15e34890b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODExMjIyNw==", "bodyText": "The definition should go inside the formula", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r398112227", "createdAt": "2020-03-25T19:24:25Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+import com.yahoo.elide.datastores.aggregation.annotation.DimensionFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.Join;\n+import com.yahoo.elide.datastores.aggregation.annotation.JoinTo;\n+import com.yahoo.elide.datastores.aggregation.annotation.Temporal;\n+import com.yahoo.elide.datastores.aggregation.annotation.TimeGrainDefinition;\n+import com.yahoo.elide.datastores.aggregation.metadata.enums.TimeGrain;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+import lombok.Data;\n+\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Id;\n+import javax.persistence.Entity;\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Include(rootLevel = true)\n+@Cardinality(size = CardinalitySize.{{#toUpperCase cardinality}}{{/toUpperCase}})\n+@EqualsAndHashCode\n+@ToString\n+@Entity\n+@Data\n+{{#if table}}@FromTable(name = \"{{table}}\"){{/if}}\n+public class {{#capitalizeFirstLetter name}}{{/capitalizeFirstLetter}} {\n+\n+    @Id\n+    private String name;\n+\n+{{#each dimensions}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA5NTc3Ng=="}, "originalCommit": {"oid": "89060707ae67ab6d4459e870daf5d6f15e34890b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODExMjc4NA==", "bodyText": "We are missing @ReadPermission annotation.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r398112784", "createdAt": "2020-03-25T19:25:21Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+import com.yahoo.elide.datastores.aggregation.annotation.DimensionFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.Join;\n+import com.yahoo.elide.datastores.aggregation.annotation.JoinTo;\n+import com.yahoo.elide.datastores.aggregation.annotation.Temporal;\n+import com.yahoo.elide.datastores.aggregation.annotation.TimeGrainDefinition;\n+import com.yahoo.elide.datastores.aggregation.metadata.enums.TimeGrain;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+import lombok.Data;\n+\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Id;\n+import javax.persistence.Entity;\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Include(rootLevel = true)\n+@Cardinality(size = CardinalitySize.{{#toUpperCase cardinality}}{{/toUpperCase}})\n+@EqualsAndHashCode\n+@ToString\n+@Entity\n+@Data\n+{{#if table}}@FromTable(name = \"{{table}}\"){{/if}}\n+public class {{#capitalizeFirstLetter name}}{{/capitalizeFirstLetter}} {\n+\n+    @Id\n+    private String name;\n+\n+{{#each dimensions}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA5NTc3Ng=="}, "originalCommit": {"oid": "89060707ae67ab6d4459e870daf5d6f15e34890b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE5NjcxNg==", "bodyText": "Each dimension is missing the @Meta annotation.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r398196716", "createdAt": "2020-03-25T22:00:16Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+import com.yahoo.elide.datastores.aggregation.annotation.DimensionFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.Join;\n+import com.yahoo.elide.datastores.aggregation.annotation.JoinTo;\n+import com.yahoo.elide.datastores.aggregation.annotation.Temporal;\n+import com.yahoo.elide.datastores.aggregation.annotation.TimeGrainDefinition;\n+import com.yahoo.elide.datastores.aggregation.metadata.enums.TimeGrain;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+import lombok.Data;\n+\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Id;\n+import javax.persistence.Entity;\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Include(rootLevel = true)\n+@Cardinality(size = CardinalitySize.{{#toUpperCase cardinality}}{{/toUpperCase}})\n+@EqualsAndHashCode\n+@ToString\n+@Entity\n+@Data\n+{{#if table}}@FromTable(name = \"{{table}}\"){{/if}}\n+public class {{#capitalizeFirstLetter name}}{{/capitalizeFirstLetter}} {\n+\n+    @Id\n+    private String name;\n+\n+{{#each dimensions}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA5NTc3Ng=="}, "originalCommit": {"oid": "89060707ae67ab6d4459e870daf5d6f15e34890b"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Nzg4MTEzOnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxODo1ODozMVrOF7p7Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxODo1ODozMVrOF7p7Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA5NzIzOA==", "bodyText": "We shouldn't need to generate getter and setter methods.  These can be removed (they are implied by @Data).", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r398097238", "createdAt": "2020-03-25T18:58:31Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+import com.yahoo.elide.datastores.aggregation.annotation.DimensionFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.Join;\n+import com.yahoo.elide.datastores.aggregation.annotation.JoinTo;\n+import com.yahoo.elide.datastores.aggregation.annotation.Temporal;\n+import com.yahoo.elide.datastores.aggregation.annotation.TimeGrainDefinition;\n+import com.yahoo.elide.datastores.aggregation.metadata.enums.TimeGrain;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+import lombok.Data;\n+\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Id;\n+import javax.persistence.Entity;\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Include(rootLevel = true)\n+@Cardinality(size = CardinalitySize.{{#toUpperCase cardinality}}{{/toUpperCase}})\n+@EqualsAndHashCode\n+@ToString\n+@Entity\n+@Data\n+{{#if table}}@FromTable(name = \"{{table}}\"){{/if}}\n+public class {{#capitalizeFirstLetter name}}{{/capitalizeFirstLetter}} {\n+\n+    @Id\n+    private String name;\n+\n+{{#each dimensions}}\n+    private {{#getDimensionType this}}{{/getDimensionType}} {{name}};\n+{{/each}}\n+\n+{{#each joins}}\n+    private {{#capitalizeFirstLetter to}}{{/capitalizeFirstLetter}} {{ name }};\n+ {{/each}}\n+\n+{{#each dimensions}}\n+{{!--  --}}\n+{{#ifDimTypeMatches this \"TIME\"}}\n+    @Temporal(grains = {\n+    {{#each grains}}\n+            @TimeGrainDefinition(grain = TimeGrain.{{grain}}, expression = \"{{sql}}\"){{#if @last}}{{else}}, {{/if}}\n+    {{/each}}\n+    }, timeZone = \"UTC\")\n+\n+    {{#generateDimGetterMethod this}}{{/generateDimGetterMethod}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89060707ae67ab6d4459e870daf5d6f15e34890b"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODUxMDI4OnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjowMTo0NFrOF7wCfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjowMTo0NFrOF7wCfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE5NzM3NA==", "bodyText": "We generally shouldn't need getter & setter methods anywhere in the generated class files.  We should put all the annotations on the fields.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r398197374", "createdAt": "2020-03-25T22:01:44Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+import com.yahoo.elide.datastores.aggregation.annotation.DimensionFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.Join;\n+import com.yahoo.elide.datastores.aggregation.annotation.JoinTo;\n+import com.yahoo.elide.datastores.aggregation.annotation.Temporal;\n+import com.yahoo.elide.datastores.aggregation.annotation.TimeGrainDefinition;\n+import com.yahoo.elide.datastores.aggregation.metadata.enums.TimeGrain;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+import lombok.Data;\n+\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Id;\n+import javax.persistence.Entity;\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Include(rootLevel = true)\n+@Cardinality(size = CardinalitySize.{{#toUpperCase cardinality}}{{/toUpperCase}})\n+@EqualsAndHashCode\n+@ToString\n+@Entity\n+@Data\n+{{#if table}}@FromTable(name = \"{{table}}\"){{/if}}\n+public class {{#capitalizeFirstLetter name}}{{/capitalizeFirstLetter}} {\n+\n+    @Id\n+    private String name;\n+\n+{{#each dimensions}}\n+    private {{#getDimensionType this}}{{/getDimensionType}} {{name}};\n+{{/each}}\n+\n+{{#each joins}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89060707ae67ab6d4459e870daf5d6f15e34890b"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODUzODUzOnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjoxMjoxNFrOF7wUaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjoxMjoxNFrOF7wUaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwMTk2MA==", "bodyText": "So the join type is either toOne or toMany.  What is generated above is correct for toOne.  We are not correctly handling the toMany case.\nFor toMany - this will be a collection (Set) of the type.  For example, (book.authors) would have a Set<Author> objects instead of just Author.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r398201960", "createdAt": "2020-03-25T22:12:14Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+import com.yahoo.elide.datastores.aggregation.annotation.DimensionFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.Join;\n+import com.yahoo.elide.datastores.aggregation.annotation.JoinTo;\n+import com.yahoo.elide.datastores.aggregation.annotation.Temporal;\n+import com.yahoo.elide.datastores.aggregation.annotation.TimeGrainDefinition;\n+import com.yahoo.elide.datastores.aggregation.metadata.enums.TimeGrain;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+import lombok.Data;\n+\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Id;\n+import javax.persistence.Entity;\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Include(rootLevel = true)\n+@Cardinality(size = CardinalitySize.{{#toUpperCase cardinality}}{{/toUpperCase}})\n+@EqualsAndHashCode\n+@ToString\n+@Entity\n+@Data\n+{{#if table}}@FromTable(name = \"{{table}}\"){{/if}}\n+public class {{#capitalizeFirstLetter name}}{{/capitalizeFirstLetter}} {\n+\n+    @Id\n+    private String name;\n+\n+{{#each dimensions}}\n+    private {{#getDimensionType this}}{{/getDimensionType}} {{name}};\n+{{/each}}\n+\n+{{#each joins}}\n+    private {{#capitalizeFirstLetter to}}{{/capitalizeFirstLetter}} {{ name }};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89060707ae67ab6d4459e870daf5d6f15e34890b"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODU0MTk5OnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/handlebars/HandlebarsHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjoxMzozNFrOF7wWnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjoxMzozNFrOF7wWnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwMjUyNA==", "bodyText": "Why not just dimDataType.equals(typeToMatch)?", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r398202524", "createdAt": "2020-03-25T22:13:34Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/handlebars/HandlebarsHelper.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.parser.handlebars;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Dimension;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Join;\n+\n+import com.github.jknack.handlebars.Options;\n+\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Helper class for handlebar template hydration.\n+ */\n+public class HandlebarsHelper {\n+\n+    private static final String EMPTY_STRING = \"\";\n+    private static final String UNDERSCORE = \"_\";\n+    private static final String STRING = \"String\";\n+    private static final String DATE = \"Date\";\n+    private static final String DOUBLE = \"Double\";\n+    private static final String LONG = \"Long\";\n+    private static final String BOOLEAN = \"Boolean\";\n+    private static final String SPACE = \" \";\n+    private static final String FOUR_SPACES = \"    \";\n+    private static final String EIGHT_SPACES = FOUR_SPACES + FOUR_SPACES;\n+    private static final String NEWLINE = \"\\n\";\n+    private static final String WHITESPACE_REGEX = \"\\\\s+\";\n+\n+    /**\n+     * Capitalize first letter of the string.\n+     * @param str string to capitalize first letter\n+     * @return string with first letter capitalized\n+     */\n+    public String capitalizeFirstLetter(String str) {\n+\n+        return (str == null || str.length() == 0) ? str : str.substring(0, 1).toUpperCase(Locale.ENGLISH)\n+                + str.substring(1);\n+    }\n+\n+    /**\n+     * Transform string to upper case.\n+     * @param obj Object representation of the string\n+     * @return string converted to upper case\n+     */\n+    public String toUpperCase(Object obj) {\n+\n+        return (obj == null) ? EMPTY_STRING : obj.toString().toUpperCase(Locale.ENGLISH);\n+    }\n+\n+    /**\n+     * Transform string to lower case.\n+     * @param obj Object representation of the string\n+     * @return string converted to lower case\n+     */\n+    public String toLowerCase(Object obj) {\n+\n+        return (obj == null) ? EMPTY_STRING : obj.toString().toLowerCase(Locale.ENGLISH);\n+    }\n+\n+    /**\n+     * If template matches a string.\n+     * @param str String representation of the template\n+     * @param options options object with string to match\n+     * @return template if matched\n+     * @throws IOException IOException\n+     */\n+    public CharSequence ifContains(String str, Options options) throws IOException {\n+\n+        String toMatch = options.param(0, null);\n+        return options.isFalsy(contains(str, toMatch)) ? options.inverse() : options.fn();\n+    }\n+\n+    /**\n+     * If type of dimension matches passed value.\n+     * @param dim Elide dimension object\n+     * @param options options object with type/string to match\n+     * @return template if matched\n+     * @throws IOException IOException\n+     */\n+    public CharSequence ifDimTypeMatches(Dimension dim, Options options) throws IOException {\n+\n+        String dimDataType = dim.getType().toString();\n+        String typeToMatch = options.param(0, null);\n+        boolean result = new EqualsBuilder().append(dimDataType, typeToMatch).isEquals();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89060707ae67ab6d4459e870daf5d6f15e34890b"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODU0MzE0OnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/handlebars/HandlebarsHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjoxMzo1OFrOF7wXUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjoxMzo1OFrOF7wXUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwMjcwNQ==", "bodyText": "BigDecimal.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r398202705", "createdAt": "2020-03-25T22:13:58Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/handlebars/HandlebarsHelper.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.parser.handlebars;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Dimension;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Join;\n+\n+import com.github.jknack.handlebars.Options;\n+\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Helper class for handlebar template hydration.\n+ */\n+public class HandlebarsHelper {\n+\n+    private static final String EMPTY_STRING = \"\";\n+    private static final String UNDERSCORE = \"_\";\n+    private static final String STRING = \"String\";\n+    private static final String DATE = \"Date\";\n+    private static final String DOUBLE = \"Double\";\n+    private static final String LONG = \"Long\";\n+    private static final String BOOLEAN = \"Boolean\";\n+    private static final String SPACE = \" \";\n+    private static final String FOUR_SPACES = \"    \";\n+    private static final String EIGHT_SPACES = FOUR_SPACES + FOUR_SPACES;\n+    private static final String NEWLINE = \"\\n\";\n+    private static final String WHITESPACE_REGEX = \"\\\\s+\";\n+\n+    /**\n+     * Capitalize first letter of the string.\n+     * @param str string to capitalize first letter\n+     * @return string with first letter capitalized\n+     */\n+    public String capitalizeFirstLetter(String str) {\n+\n+        return (str == null || str.length() == 0) ? str : str.substring(0, 1).toUpperCase(Locale.ENGLISH)\n+                + str.substring(1);\n+    }\n+\n+    /**\n+     * Transform string to upper case.\n+     * @param obj Object representation of the string\n+     * @return string converted to upper case\n+     */\n+    public String toUpperCase(Object obj) {\n+\n+        return (obj == null) ? EMPTY_STRING : obj.toString().toUpperCase(Locale.ENGLISH);\n+    }\n+\n+    /**\n+     * Transform string to lower case.\n+     * @param obj Object representation of the string\n+     * @return string converted to lower case\n+     */\n+    public String toLowerCase(Object obj) {\n+\n+        return (obj == null) ? EMPTY_STRING : obj.toString().toLowerCase(Locale.ENGLISH);\n+    }\n+\n+    /**\n+     * If template matches a string.\n+     * @param str String representation of the template\n+     * @param options options object with string to match\n+     * @return template if matched\n+     * @throws IOException IOException\n+     */\n+    public CharSequence ifContains(String str, Options options) throws IOException {\n+\n+        String toMatch = options.param(0, null);\n+        return options.isFalsy(contains(str, toMatch)) ? options.inverse() : options.fn();\n+    }\n+\n+    /**\n+     * If type of dimension matches passed value.\n+     * @param dim Elide dimension object\n+     * @param options options object with type/string to match\n+     * @return template if matched\n+     * @throws IOException IOException\n+     */\n+    public CharSequence ifDimTypeMatches(Dimension dim, Options options) throws IOException {\n+\n+        String dimDataType = dim.getType().toString();\n+        String typeToMatch = options.param(0, null);\n+        boolean result = new EqualsBuilder().append(dimDataType, typeToMatch).isEquals();\n+        return result ? options.fn() : options.inverse();\n+    }\n+\n+    /**\n+     * If string contains passed value.\n+     * @param str String to be searched\n+     * @param search pattern to search\n+     * @return true/false if matched\n+     */\n+    public boolean contains(String str, String search) {\n+\n+        return (str == null || str.indexOf(search) < 0);\n+    }\n+\n+    /**\n+     * Generate setter method.\n+     * @param type Type of the field\n+     * @param fieldName Field Name\n+     * @return setter method\n+     */\n+    public String generateSetterMethod(String type, String fieldName) {\n+\n+        return \"public void set\" + capitalizeFirstLetter(fieldName) + \"(\" + type + SPACE + fieldName + \") {\" + NEWLINE\n+                        + EIGHT_SPACES + \"this.\" + fieldName + \" = \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    /**\n+     * Generate setter method for Dimension Type.\n+     * @param dim Dimension Object\n+     * @return setter method\n+     */\n+    public String generateDimSetterMethod(Dimension dim) {\n+\n+        String type = getDimensionType(dim);\n+        String fieldName = dim.getName();\n+        return \"public void set\" + capitalizeFirstLetter(fieldName) + \"(\" + type + SPACE + fieldName + \") {\" + NEWLINE\n+                        + EIGHT_SPACES + \"this.\" + fieldName + \" = \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    /**\n+     * Generate setter method for Join Type.\n+     * @param join Join Object\n+     * @return setter method\n+     */\n+    public String generateJoinSetterMethod(Join join) {\n+\n+        String type = capitalizeFirstLetter(join.getTo());\n+        String fieldName = join.getName();\n+        return \"public void set\" + capitalizeFirstLetter(fieldName) + \"(\" + type + SPACE + fieldName + \") {\" + NEWLINE\n+                        + EIGHT_SPACES + \"this.\" + fieldName + \" = \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    /**\n+     * Generate getter method.\n+     * @param type Type of the field\n+     * @param fieldName field Name\n+     * @return getter method\n+     */\n+    public String generateGetterMethod(String type, String fieldName) {\n+\n+        return \"public \" + type + \" get\" + capitalizeFirstLetter(fieldName) + \"() {\" + NEWLINE + EIGHT_SPACES\n+                        + \"return \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    /**\n+     * Generate getter method for Dimension type.\n+     * @param dim Dimension Object\n+     * @return getter method\n+     */\n+    public String generateDimGetterMethod(Dimension dim) {\n+\n+        String type = getDimensionType(dim);\n+        String fieldName = dim.getName();\n+        return \"public \" + type + \" get\" + capitalizeFirstLetter(fieldName) + \"() {\" + NEWLINE + EIGHT_SPACES\n+                        + \"return \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    /**\n+     * Generate getter method for Join type.\n+     * @param join Join Object\n+     * @return getter method\n+     */\n+    public String generateJoinGetterMethod(Join join) {\n+\n+        String type = capitalizeFirstLetter(join.getTo());\n+        String fieldName = join.getName();\n+        return \"public \" + type + \" get\" + capitalizeFirstLetter(fieldName) + \"() {\" + NEWLINE + EIGHT_SPACES\n+                        + \"return \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    // Security.java helper methods\n+    /**\n+     * Get the Class Name for Security.\n+     * @param name Name of the security rule\n+     * @return Capitalize First Letter of Each Word and remove spaces\n+     */\n+    public String getClassSuffix(String name) {\n+\n+        String[] nameSplit = name.trim().split(WHITESPACE_REGEX);\n+        return String.join(EMPTY_STRING,\n+                Arrays.asList(nameSplit).stream().map(str -> capitalizeFirstLetter(str)).collect(Collectors.toList()));\n+    }\n+\n+    /**\n+     * Get Variable Name for Security rule.\n+     * @param name Name of the security rule\n+     * @return Change each word to upper case and replace spaces with underscore\n+     */\n+    public String getVarName(String name) {\n+\n+        String[] nameSplit = name.trim().split(WHITESPACE_REGEX);\n+        return String.join(UNDERSCORE,\n+                Arrays.asList(nameSplit).stream().map(str -> toUpperCase(str)).collect(Collectors.toList()));\n+    }\n+\n+    /**\n+     * Get Name of the security role from security rule.\n+     * @param name Name of the security rule\n+     * @return Last word in lower case\n+     */\n+    public String getRoleName(String name) {\n+\n+        String[] nameSplit = name.trim().split(WHITESPACE_REGEX);\n+        return toLowerCase(nameSplit[nameSplit.length - 1]);\n+    }\n+\n+    /**\n+     * Get java type name corresponding to the dimension type.\n+     * @param dim Dimension Object\n+     * @return The corresponding java type name\n+     */\n+    public String getDimensionType(Dimension dim) {\n+\n+        switch (dim.getType()) {\n+            case BOOLEAN:\n+                return BOOLEAN;\n+            case COORDINATE:\n+                return STRING;\n+            case INTEGER:\n+                return LONG;\n+            case TEXT:\n+                return STRING;\n+            case TIME:\n+                return DATE;\n+            case DECIMAL:\n+                return DOUBLE;\n+            case MONEY:\n+                return DOUBLE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89060707ae67ab6d4459e870daf5d6f15e34890b"}, "originalPosition": 241}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODU0MzkxOnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/handlebars/HandlebarsHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjoxNDoxMFrOF7wXvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjoxNDoxMFrOF7wXvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwMjgxNQ==", "bodyText": "BigDecimal.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r398202815", "createdAt": "2020-03-25T22:14:10Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/handlebars/HandlebarsHelper.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.parser.handlebars;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Dimension;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Join;\n+\n+import com.github.jknack.handlebars.Options;\n+\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Helper class for handlebar template hydration.\n+ */\n+public class HandlebarsHelper {\n+\n+    private static final String EMPTY_STRING = \"\";\n+    private static final String UNDERSCORE = \"_\";\n+    private static final String STRING = \"String\";\n+    private static final String DATE = \"Date\";\n+    private static final String DOUBLE = \"Double\";\n+    private static final String LONG = \"Long\";\n+    private static final String BOOLEAN = \"Boolean\";\n+    private static final String SPACE = \" \";\n+    private static final String FOUR_SPACES = \"    \";\n+    private static final String EIGHT_SPACES = FOUR_SPACES + FOUR_SPACES;\n+    private static final String NEWLINE = \"\\n\";\n+    private static final String WHITESPACE_REGEX = \"\\\\s+\";\n+\n+    /**\n+     * Capitalize first letter of the string.\n+     * @param str string to capitalize first letter\n+     * @return string with first letter capitalized\n+     */\n+    public String capitalizeFirstLetter(String str) {\n+\n+        return (str == null || str.length() == 0) ? str : str.substring(0, 1).toUpperCase(Locale.ENGLISH)\n+                + str.substring(1);\n+    }\n+\n+    /**\n+     * Transform string to upper case.\n+     * @param obj Object representation of the string\n+     * @return string converted to upper case\n+     */\n+    public String toUpperCase(Object obj) {\n+\n+        return (obj == null) ? EMPTY_STRING : obj.toString().toUpperCase(Locale.ENGLISH);\n+    }\n+\n+    /**\n+     * Transform string to lower case.\n+     * @param obj Object representation of the string\n+     * @return string converted to lower case\n+     */\n+    public String toLowerCase(Object obj) {\n+\n+        return (obj == null) ? EMPTY_STRING : obj.toString().toLowerCase(Locale.ENGLISH);\n+    }\n+\n+    /**\n+     * If template matches a string.\n+     * @param str String representation of the template\n+     * @param options options object with string to match\n+     * @return template if matched\n+     * @throws IOException IOException\n+     */\n+    public CharSequence ifContains(String str, Options options) throws IOException {\n+\n+        String toMatch = options.param(0, null);\n+        return options.isFalsy(contains(str, toMatch)) ? options.inverse() : options.fn();\n+    }\n+\n+    /**\n+     * If type of dimension matches passed value.\n+     * @param dim Elide dimension object\n+     * @param options options object with type/string to match\n+     * @return template if matched\n+     * @throws IOException IOException\n+     */\n+    public CharSequence ifDimTypeMatches(Dimension dim, Options options) throws IOException {\n+\n+        String dimDataType = dim.getType().toString();\n+        String typeToMatch = options.param(0, null);\n+        boolean result = new EqualsBuilder().append(dimDataType, typeToMatch).isEquals();\n+        return result ? options.fn() : options.inverse();\n+    }\n+\n+    /**\n+     * If string contains passed value.\n+     * @param str String to be searched\n+     * @param search pattern to search\n+     * @return true/false if matched\n+     */\n+    public boolean contains(String str, String search) {\n+\n+        return (str == null || str.indexOf(search) < 0);\n+    }\n+\n+    /**\n+     * Generate setter method.\n+     * @param type Type of the field\n+     * @param fieldName Field Name\n+     * @return setter method\n+     */\n+    public String generateSetterMethod(String type, String fieldName) {\n+\n+        return \"public void set\" + capitalizeFirstLetter(fieldName) + \"(\" + type + SPACE + fieldName + \") {\" + NEWLINE\n+                        + EIGHT_SPACES + \"this.\" + fieldName + \" = \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    /**\n+     * Generate setter method for Dimension Type.\n+     * @param dim Dimension Object\n+     * @return setter method\n+     */\n+    public String generateDimSetterMethod(Dimension dim) {\n+\n+        String type = getDimensionType(dim);\n+        String fieldName = dim.getName();\n+        return \"public void set\" + capitalizeFirstLetter(fieldName) + \"(\" + type + SPACE + fieldName + \") {\" + NEWLINE\n+                        + EIGHT_SPACES + \"this.\" + fieldName + \" = \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    /**\n+     * Generate setter method for Join Type.\n+     * @param join Join Object\n+     * @return setter method\n+     */\n+    public String generateJoinSetterMethod(Join join) {\n+\n+        String type = capitalizeFirstLetter(join.getTo());\n+        String fieldName = join.getName();\n+        return \"public void set\" + capitalizeFirstLetter(fieldName) + \"(\" + type + SPACE + fieldName + \") {\" + NEWLINE\n+                        + EIGHT_SPACES + \"this.\" + fieldName + \" = \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    /**\n+     * Generate getter method.\n+     * @param type Type of the field\n+     * @param fieldName field Name\n+     * @return getter method\n+     */\n+    public String generateGetterMethod(String type, String fieldName) {\n+\n+        return \"public \" + type + \" get\" + capitalizeFirstLetter(fieldName) + \"() {\" + NEWLINE + EIGHT_SPACES\n+                        + \"return \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    /**\n+     * Generate getter method for Dimension type.\n+     * @param dim Dimension Object\n+     * @return getter method\n+     */\n+    public String generateDimGetterMethod(Dimension dim) {\n+\n+        String type = getDimensionType(dim);\n+        String fieldName = dim.getName();\n+        return \"public \" + type + \" get\" + capitalizeFirstLetter(fieldName) + \"() {\" + NEWLINE + EIGHT_SPACES\n+                        + \"return \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    /**\n+     * Generate getter method for Join type.\n+     * @param join Join Object\n+     * @return getter method\n+     */\n+    public String generateJoinGetterMethod(Join join) {\n+\n+        String type = capitalizeFirstLetter(join.getTo());\n+        String fieldName = join.getName();\n+        return \"public \" + type + \" get\" + capitalizeFirstLetter(fieldName) + \"() {\" + NEWLINE + EIGHT_SPACES\n+                        + \"return \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    // Security.java helper methods\n+    /**\n+     * Get the Class Name for Security.\n+     * @param name Name of the security rule\n+     * @return Capitalize First Letter of Each Word and remove spaces\n+     */\n+    public String getClassSuffix(String name) {\n+\n+        String[] nameSplit = name.trim().split(WHITESPACE_REGEX);\n+        return String.join(EMPTY_STRING,\n+                Arrays.asList(nameSplit).stream().map(str -> capitalizeFirstLetter(str)).collect(Collectors.toList()));\n+    }\n+\n+    /**\n+     * Get Variable Name for Security rule.\n+     * @param name Name of the security rule\n+     * @return Change each word to upper case and replace spaces with underscore\n+     */\n+    public String getVarName(String name) {\n+\n+        String[] nameSplit = name.trim().split(WHITESPACE_REGEX);\n+        return String.join(UNDERSCORE,\n+                Arrays.asList(nameSplit).stream().map(str -> toUpperCase(str)).collect(Collectors.toList()));\n+    }\n+\n+    /**\n+     * Get Name of the security role from security rule.\n+     * @param name Name of the security rule\n+     * @return Last word in lower case\n+     */\n+    public String getRoleName(String name) {\n+\n+        String[] nameSplit = name.trim().split(WHITESPACE_REGEX);\n+        return toLowerCase(nameSplit[nameSplit.length - 1]);\n+    }\n+\n+    /**\n+     * Get java type name corresponding to the dimension type.\n+     * @param dim Dimension Object\n+     * @return The corresponding java type name\n+     */\n+    public String getDimensionType(Dimension dim) {\n+\n+        switch (dim.getType()) {\n+            case BOOLEAN:\n+                return BOOLEAN;\n+            case COORDINATE:\n+                return STRING;\n+            case INTEGER:\n+                return LONG;\n+            case TEXT:\n+                return STRING;\n+            case TIME:\n+                return DATE;\n+            case DECIMAL:\n+                return DOUBLE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89060707ae67ab6d4459e870daf5d6f15e34890b"}, "originalPosition": 239}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODU1MDQ1OnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/handlebars/HandlebarsHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjoxNjozNVrOF7wcBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjoxNjozNVrOF7wcBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwMzkxMQ==", "bodyText": "The role name should not be extracted from the Rules - but rather the Roles.  As such, we don't need to parse text like \"Principal is ADMIN\".", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r398203911", "createdAt": "2020-03-25T22:16:35Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/handlebars/HandlebarsHelper.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.parser.handlebars;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Dimension;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Join;\n+\n+import com.github.jknack.handlebars.Options;\n+\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Helper class for handlebar template hydration.\n+ */\n+public class HandlebarsHelper {\n+\n+    private static final String EMPTY_STRING = \"\";\n+    private static final String UNDERSCORE = \"_\";\n+    private static final String STRING = \"String\";\n+    private static final String DATE = \"Date\";\n+    private static final String DOUBLE = \"Double\";\n+    private static final String LONG = \"Long\";\n+    private static final String BOOLEAN = \"Boolean\";\n+    private static final String SPACE = \" \";\n+    private static final String FOUR_SPACES = \"    \";\n+    private static final String EIGHT_SPACES = FOUR_SPACES + FOUR_SPACES;\n+    private static final String NEWLINE = \"\\n\";\n+    private static final String WHITESPACE_REGEX = \"\\\\s+\";\n+\n+    /**\n+     * Capitalize first letter of the string.\n+     * @param str string to capitalize first letter\n+     * @return string with first letter capitalized\n+     */\n+    public String capitalizeFirstLetter(String str) {\n+\n+        return (str == null || str.length() == 0) ? str : str.substring(0, 1).toUpperCase(Locale.ENGLISH)\n+                + str.substring(1);\n+    }\n+\n+    /**\n+     * Transform string to upper case.\n+     * @param obj Object representation of the string\n+     * @return string converted to upper case\n+     */\n+    public String toUpperCase(Object obj) {\n+\n+        return (obj == null) ? EMPTY_STRING : obj.toString().toUpperCase(Locale.ENGLISH);\n+    }\n+\n+    /**\n+     * Transform string to lower case.\n+     * @param obj Object representation of the string\n+     * @return string converted to lower case\n+     */\n+    public String toLowerCase(Object obj) {\n+\n+        return (obj == null) ? EMPTY_STRING : obj.toString().toLowerCase(Locale.ENGLISH);\n+    }\n+\n+    /**\n+     * If template matches a string.\n+     * @param str String representation of the template\n+     * @param options options object with string to match\n+     * @return template if matched\n+     * @throws IOException IOException\n+     */\n+    public CharSequence ifContains(String str, Options options) throws IOException {\n+\n+        String toMatch = options.param(0, null);\n+        return options.isFalsy(contains(str, toMatch)) ? options.inverse() : options.fn();\n+    }\n+\n+    /**\n+     * If type of dimension matches passed value.\n+     * @param dim Elide dimension object\n+     * @param options options object with type/string to match\n+     * @return template if matched\n+     * @throws IOException IOException\n+     */\n+    public CharSequence ifDimTypeMatches(Dimension dim, Options options) throws IOException {\n+\n+        String dimDataType = dim.getType().toString();\n+        String typeToMatch = options.param(0, null);\n+        boolean result = new EqualsBuilder().append(dimDataType, typeToMatch).isEquals();\n+        return result ? options.fn() : options.inverse();\n+    }\n+\n+    /**\n+     * If string contains passed value.\n+     * @param str String to be searched\n+     * @param search pattern to search\n+     * @return true/false if matched\n+     */\n+    public boolean contains(String str, String search) {\n+\n+        return (str == null || str.indexOf(search) < 0);\n+    }\n+\n+    /**\n+     * Generate setter method.\n+     * @param type Type of the field\n+     * @param fieldName Field Name\n+     * @return setter method\n+     */\n+    public String generateSetterMethod(String type, String fieldName) {\n+\n+        return \"public void set\" + capitalizeFirstLetter(fieldName) + \"(\" + type + SPACE + fieldName + \") {\" + NEWLINE\n+                        + EIGHT_SPACES + \"this.\" + fieldName + \" = \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    /**\n+     * Generate setter method for Dimension Type.\n+     * @param dim Dimension Object\n+     * @return setter method\n+     */\n+    public String generateDimSetterMethod(Dimension dim) {\n+\n+        String type = getDimensionType(dim);\n+        String fieldName = dim.getName();\n+        return \"public void set\" + capitalizeFirstLetter(fieldName) + \"(\" + type + SPACE + fieldName + \") {\" + NEWLINE\n+                        + EIGHT_SPACES + \"this.\" + fieldName + \" = \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    /**\n+     * Generate setter method for Join Type.\n+     * @param join Join Object\n+     * @return setter method\n+     */\n+    public String generateJoinSetterMethod(Join join) {\n+\n+        String type = capitalizeFirstLetter(join.getTo());\n+        String fieldName = join.getName();\n+        return \"public void set\" + capitalizeFirstLetter(fieldName) + \"(\" + type + SPACE + fieldName + \") {\" + NEWLINE\n+                        + EIGHT_SPACES + \"this.\" + fieldName + \" = \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    /**\n+     * Generate getter method.\n+     * @param type Type of the field\n+     * @param fieldName field Name\n+     * @return getter method\n+     */\n+    public String generateGetterMethod(String type, String fieldName) {\n+\n+        return \"public \" + type + \" get\" + capitalizeFirstLetter(fieldName) + \"() {\" + NEWLINE + EIGHT_SPACES\n+                        + \"return \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    /**\n+     * Generate getter method for Dimension type.\n+     * @param dim Dimension Object\n+     * @return getter method\n+     */\n+    public String generateDimGetterMethod(Dimension dim) {\n+\n+        String type = getDimensionType(dim);\n+        String fieldName = dim.getName();\n+        return \"public \" + type + \" get\" + capitalizeFirstLetter(fieldName) + \"() {\" + NEWLINE + EIGHT_SPACES\n+                        + \"return \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    /**\n+     * Generate getter method for Join type.\n+     * @param join Join Object\n+     * @return getter method\n+     */\n+    public String generateJoinGetterMethod(Join join) {\n+\n+        String type = capitalizeFirstLetter(join.getTo());\n+        String fieldName = join.getName();\n+        return \"public \" + type + \" get\" + capitalizeFirstLetter(fieldName) + \"() {\" + NEWLINE + EIGHT_SPACES\n+                        + \"return \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    // Security.java helper methods\n+    /**\n+     * Get the Class Name for Security.\n+     * @param name Name of the security rule\n+     * @return Capitalize First Letter of Each Word and remove spaces\n+     */\n+    public String getClassSuffix(String name) {\n+\n+        String[] nameSplit = name.trim().split(WHITESPACE_REGEX);\n+        return String.join(EMPTY_STRING,\n+                Arrays.asList(nameSplit).stream().map(str -> capitalizeFirstLetter(str)).collect(Collectors.toList()));\n+    }\n+\n+    /**\n+     * Get Variable Name for Security rule.\n+     * @param name Name of the security rule\n+     * @return Change each word to upper case and replace spaces with underscore\n+     */\n+    public String getVarName(String name) {\n+\n+        String[] nameSplit = name.trim().split(WHITESPACE_REGEX);\n+        return String.join(UNDERSCORE,\n+                Arrays.asList(nameSplit).stream().map(str -> toUpperCase(str)).collect(Collectors.toList()));\n+    }\n+\n+    /**\n+     * Get Name of the security role from security rule.\n+     * @param name Name of the security rule\n+     * @return Last word in lower case\n+     */\n+    public String getRoleName(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89060707ae67ab6d4459e870daf5d6f15e34890b"}, "originalPosition": 214}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODU1NTQ3OnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjoxODozNVrOF7wfSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjoxODozNVrOF7wfSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwNDc0Nw==", "bodyText": "I don't think you need to worry about JoinTo annotation.  You can just use the new DimensionFormula annotation.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r398204747", "createdAt": "2020-03-25T22:18:35Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+import com.yahoo.elide.datastores.aggregation.annotation.DimensionFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.Join;\n+import com.yahoo.elide.datastores.aggregation.annotation.JoinTo;\n+import com.yahoo.elide.datastores.aggregation.annotation.Temporal;\n+import com.yahoo.elide.datastores.aggregation.annotation.TimeGrainDefinition;\n+import com.yahoo.elide.datastores.aggregation.metadata.enums.TimeGrain;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+import lombok.Data;\n+\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Id;\n+import javax.persistence.Entity;\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Include(rootLevel = true)\n+@Cardinality(size = CardinalitySize.{{#toUpperCase cardinality}}{{/toUpperCase}})\n+@EqualsAndHashCode\n+@ToString\n+@Entity\n+@Data\n+{{#if table}}@FromTable(name = \"{{table}}\"){{/if}}\n+public class {{#capitalizeFirstLetter name}}{{/capitalizeFirstLetter}} {\n+\n+    @Id\n+    private String name;\n+\n+{{#each dimensions}}\n+    private {{#getDimensionType this}}{{/getDimensionType}} {{name}};\n+{{/each}}\n+\n+{{#each joins}}\n+    private {{#capitalizeFirstLetter to}}{{/capitalizeFirstLetter}} {{ name }};\n+ {{/each}}\n+\n+{{#each dimensions}}\n+{{!--  --}}\n+{{#ifDimTypeMatches this \"TIME\"}}\n+    @Temporal(grains = {\n+    {{#each grains}}\n+            @TimeGrainDefinition(grain = TimeGrain.{{grain}}, expression = \"{{sql}}\"){{#if @last}}{{else}}, {{/if}}\n+    {{/each}}\n+    }, timeZone = \"UTC\")\n+\n+    {{#generateDimGetterMethod this}}{{/generateDimGetterMethod}}\n+\n+    {{#generateDimSetterMethod this}}{{/generateDimSetterMethod}}\n+\n+{{!--  --}}\n+{{else}}\n+    {{#ifContains definition \".\"}}\n+        @JoinTo(path = \"{{definition}}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89060707ae67ab6d4459e870daf5d6f15e34890b"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODU1ODk1OnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjoxOTo1M1rOF7whfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjoxOTo1M1rOF7whfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwNTMxMA==", "bodyText": "This annotation should be placed on the field.   We can remove getter/setter.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r398205310", "createdAt": "2020-03-25T22:19:53Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+import com.yahoo.elide.datastores.aggregation.annotation.DimensionFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.Join;\n+import com.yahoo.elide.datastores.aggregation.annotation.JoinTo;\n+import com.yahoo.elide.datastores.aggregation.annotation.Temporal;\n+import com.yahoo.elide.datastores.aggregation.annotation.TimeGrainDefinition;\n+import com.yahoo.elide.datastores.aggregation.metadata.enums.TimeGrain;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+import lombok.Data;\n+\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Id;\n+import javax.persistence.Entity;\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Include(rootLevel = true)\n+@Cardinality(size = CardinalitySize.{{#toUpperCase cardinality}}{{/toUpperCase}})\n+@EqualsAndHashCode\n+@ToString\n+@Entity\n+@Data\n+{{#if table}}@FromTable(name = \"{{table}}\"){{/if}}\n+public class {{#capitalizeFirstLetter name}}{{/capitalizeFirstLetter}} {\n+\n+    @Id\n+    private String name;\n+\n+{{#each dimensions}}\n+    private {{#getDimensionType this}}{{/getDimensionType}} {{name}};\n+{{/each}}\n+\n+{{#each joins}}\n+    private {{#capitalizeFirstLetter to}}{{/capitalizeFirstLetter}} {{ name }};\n+ {{/each}}\n+\n+{{#each dimensions}}\n+{{!--  --}}\n+{{#ifDimTypeMatches this \"TIME\"}}\n+    @Temporal(grains = {\n+    {{#each grains}}\n+            @TimeGrainDefinition(grain = TimeGrain.{{grain}}, expression = \"{{sql}}\"){{#if @last}}{{else}}, {{/if}}\n+    {{/each}}\n+    }, timeZone = \"UTC\")\n+\n+    {{#generateDimGetterMethod this}}{{/generateDimGetterMethod}}\n+\n+    {{#generateDimSetterMethod this}}{{/generateDimSetterMethod}}\n+\n+{{!--  --}}\n+{{else}}\n+    {{#ifContains definition \".\"}}\n+        @JoinTo(path = \"{{definition}}\")\n+        @Column(updatable = false, insertable = false)\n+        {{#generateDimGetterMethod this}}{{/generateDimGetterMethod}}\n+\n+        {{#generateDimSetterMethod this}}{{/generateDimSetterMethod}}\n+    {{!--  --}}\n+    {{else}}\n+        @DimensionFormula(\"{{definition}}\")\n+        {{#generateDimGetterMethod this}}{{/generateDimGetterMethod}}\n+    {{!--  --}}\n+    {{/ifContains}}\n+{{/ifDimTypeMatches}}\n+{{/each}}\n+\n+{{#each joins}}\n+    @Join(\"{{ definition }}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89060707ae67ab6d4459e870daf5d6f15e34890b"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODU1OTMzOnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjoyMDowNFrOF7whuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjoyMDowNFrOF7whuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwNTM2OQ==", "bodyText": "This annotation can be placed on the field.  We can remove getter/setter.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r398205369", "createdAt": "2020-03-25T22:20:04Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+import com.yahoo.elide.datastores.aggregation.annotation.DimensionFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.Join;\n+import com.yahoo.elide.datastores.aggregation.annotation.JoinTo;\n+import com.yahoo.elide.datastores.aggregation.annotation.Temporal;\n+import com.yahoo.elide.datastores.aggregation.annotation.TimeGrainDefinition;\n+import com.yahoo.elide.datastores.aggregation.metadata.enums.TimeGrain;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+import lombok.Data;\n+\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Id;\n+import javax.persistence.Entity;\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Include(rootLevel = true)\n+@Cardinality(size = CardinalitySize.{{#toUpperCase cardinality}}{{/toUpperCase}})\n+@EqualsAndHashCode\n+@ToString\n+@Entity\n+@Data\n+{{#if table}}@FromTable(name = \"{{table}}\"){{/if}}\n+public class {{#capitalizeFirstLetter name}}{{/capitalizeFirstLetter}} {\n+\n+    @Id\n+    private String name;\n+\n+{{#each dimensions}}\n+    private {{#getDimensionType this}}{{/getDimensionType}} {{name}};\n+{{/each}}\n+\n+{{#each joins}}\n+    private {{#capitalizeFirstLetter to}}{{/capitalizeFirstLetter}} {{ name }};\n+ {{/each}}\n+\n+{{#each dimensions}}\n+{{!--  --}}\n+{{#ifDimTypeMatches this \"TIME\"}}\n+    @Temporal(grains = {\n+    {{#each grains}}\n+            @TimeGrainDefinition(grain = TimeGrain.{{grain}}, expression = \"{{sql}}\"){{#if @last}}{{else}}, {{/if}}\n+    {{/each}}\n+    }, timeZone = \"UTC\")\n+\n+    {{#generateDimGetterMethod this}}{{/generateDimGetterMethod}}\n+\n+    {{#generateDimSetterMethod this}}{{/generateDimSetterMethod}}\n+\n+{{!--  --}}\n+{{else}}\n+    {{#ifContains definition \".\"}}\n+        @JoinTo(path = \"{{definition}}\")\n+        @Column(updatable = false, insertable = false)\n+        {{#generateDimGetterMethod this}}{{/generateDimGetterMethod}}\n+\n+        {{#generateDimSetterMethod this}}{{/generateDimSetterMethod}}\n+    {{!--  --}}\n+    {{else}}\n+        @DimensionFormula(\"{{definition}}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89060707ae67ab6d4459e870daf5d6f15e34890b"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODU3MDUxOnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/handlebars/HandlebarsHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjoyMzo1MFrOF7woQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjoyMzo1MFrOF7woQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwNzA0Mw==", "bodyText": "This logic feels inverted to me.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r398207043", "createdAt": "2020-03-25T22:23:50Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/handlebars/HandlebarsHelper.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.parser.handlebars;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Dimension;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Join;\n+\n+import com.github.jknack.handlebars.Options;\n+\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Helper class for handlebar template hydration.\n+ */\n+public class HandlebarsHelper {\n+\n+    private static final String EMPTY_STRING = \"\";\n+    private static final String UNDERSCORE = \"_\";\n+    private static final String STRING = \"String\";\n+    private static final String DATE = \"Date\";\n+    private static final String DOUBLE = \"Double\";\n+    private static final String LONG = \"Long\";\n+    private static final String BOOLEAN = \"Boolean\";\n+    private static final String SPACE = \" \";\n+    private static final String FOUR_SPACES = \"    \";\n+    private static final String EIGHT_SPACES = FOUR_SPACES + FOUR_SPACES;\n+    private static final String NEWLINE = \"\\n\";\n+    private static final String WHITESPACE_REGEX = \"\\\\s+\";\n+\n+    /**\n+     * Capitalize first letter of the string.\n+     * @param str string to capitalize first letter\n+     * @return string with first letter capitalized\n+     */\n+    public String capitalizeFirstLetter(String str) {\n+\n+        return (str == null || str.length() == 0) ? str : str.substring(0, 1).toUpperCase(Locale.ENGLISH)\n+                + str.substring(1);\n+    }\n+\n+    /**\n+     * Transform string to upper case.\n+     * @param obj Object representation of the string\n+     * @return string converted to upper case\n+     */\n+    public String toUpperCase(Object obj) {\n+\n+        return (obj == null) ? EMPTY_STRING : obj.toString().toUpperCase(Locale.ENGLISH);\n+    }\n+\n+    /**\n+     * Transform string to lower case.\n+     * @param obj Object representation of the string\n+     * @return string converted to lower case\n+     */\n+    public String toLowerCase(Object obj) {\n+\n+        return (obj == null) ? EMPTY_STRING : obj.toString().toLowerCase(Locale.ENGLISH);\n+    }\n+\n+    /**\n+     * If template matches a string.\n+     * @param str String representation of the template\n+     * @param options options object with string to match\n+     * @return template if matched\n+     * @throws IOException IOException\n+     */\n+    public CharSequence ifContains(String str, Options options) throws IOException {\n+\n+        String toMatch = options.param(0, null);\n+        return options.isFalsy(contains(str, toMatch)) ? options.inverse() : options.fn();\n+    }\n+\n+    /**\n+     * If type of dimension matches passed value.\n+     * @param dim Elide dimension object\n+     * @param options options object with type/string to match\n+     * @return template if matched\n+     * @throws IOException IOException\n+     */\n+    public CharSequence ifDimTypeMatches(Dimension dim, Options options) throws IOException {\n+\n+        String dimDataType = dim.getType().toString();\n+        String typeToMatch = options.param(0, null);\n+        boolean result = new EqualsBuilder().append(dimDataType, typeToMatch).isEquals();\n+        return result ? options.fn() : options.inverse();\n+    }\n+\n+    /**\n+     * If string contains passed value.\n+     * @param str String to be searched\n+     * @param search pattern to search\n+     * @return true/false if matched\n+     */\n+    public boolean contains(String str, String search) {\n+\n+        return (str == null || str.indexOf(search) < 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89060707ae67ab6d4459e870daf5d6f15e34890b"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODU3MDkzOnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/handlebars/HandlebarsHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjoyNDowM1rOF7wokg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjoyNDowM1rOF7wokg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwNzEyMg==", "bodyText": "We can remove all the generate getter and setter methods.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r398207122", "createdAt": "2020-03-25T22:24:03Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/handlebars/HandlebarsHelper.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.parser.handlebars;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Dimension;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Join;\n+\n+import com.github.jknack.handlebars.Options;\n+\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Helper class for handlebar template hydration.\n+ */\n+public class HandlebarsHelper {\n+\n+    private static final String EMPTY_STRING = \"\";\n+    private static final String UNDERSCORE = \"_\";\n+    private static final String STRING = \"String\";\n+    private static final String DATE = \"Date\";\n+    private static final String DOUBLE = \"Double\";\n+    private static final String LONG = \"Long\";\n+    private static final String BOOLEAN = \"Boolean\";\n+    private static final String SPACE = \" \";\n+    private static final String FOUR_SPACES = \"    \";\n+    private static final String EIGHT_SPACES = FOUR_SPACES + FOUR_SPACES;\n+    private static final String NEWLINE = \"\\n\";\n+    private static final String WHITESPACE_REGEX = \"\\\\s+\";\n+\n+    /**\n+     * Capitalize first letter of the string.\n+     * @param str string to capitalize first letter\n+     * @return string with first letter capitalized\n+     */\n+    public String capitalizeFirstLetter(String str) {\n+\n+        return (str == null || str.length() == 0) ? str : str.substring(0, 1).toUpperCase(Locale.ENGLISH)\n+                + str.substring(1);\n+    }\n+\n+    /**\n+     * Transform string to upper case.\n+     * @param obj Object representation of the string\n+     * @return string converted to upper case\n+     */\n+    public String toUpperCase(Object obj) {\n+\n+        return (obj == null) ? EMPTY_STRING : obj.toString().toUpperCase(Locale.ENGLISH);\n+    }\n+\n+    /**\n+     * Transform string to lower case.\n+     * @param obj Object representation of the string\n+     * @return string converted to lower case\n+     */\n+    public String toLowerCase(Object obj) {\n+\n+        return (obj == null) ? EMPTY_STRING : obj.toString().toLowerCase(Locale.ENGLISH);\n+    }\n+\n+    /**\n+     * If template matches a string.\n+     * @param str String representation of the template\n+     * @param options options object with string to match\n+     * @return template if matched\n+     * @throws IOException IOException\n+     */\n+    public CharSequence ifContains(String str, Options options) throws IOException {\n+\n+        String toMatch = options.param(0, null);\n+        return options.isFalsy(contains(str, toMatch)) ? options.inverse() : options.fn();\n+    }\n+\n+    /**\n+     * If type of dimension matches passed value.\n+     * @param dim Elide dimension object\n+     * @param options options object with type/string to match\n+     * @return template if matched\n+     * @throws IOException IOException\n+     */\n+    public CharSequence ifDimTypeMatches(Dimension dim, Options options) throws IOException {\n+\n+        String dimDataType = dim.getType().toString();\n+        String typeToMatch = options.param(0, null);\n+        boolean result = new EqualsBuilder().append(dimDataType, typeToMatch).isEquals();\n+        return result ? options.fn() : options.inverse();\n+    }\n+\n+    /**\n+     * If string contains passed value.\n+     * @param str String to be searched\n+     * @param search pattern to search\n+     * @return true/false if matched\n+     */\n+    public boolean contains(String str, String search) {\n+\n+        return (str == null || str.indexOf(search) < 0);\n+    }\n+\n+    /**\n+     * Generate setter method.\n+     * @param type Type of the field\n+     * @param fieldName Field Name\n+     * @return setter method\n+     */\n+    public String generateSetterMethod(String type, String fieldName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89060707ae67ab6d4459e870daf5d6f15e34890b"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODU3MzYxOnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/handlebars/HandlebarsHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjoyNTowM1rOF7wqHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjoyNTowM1rOF7wqHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwNzUxNg==", "bodyText": "All the security helpers can probably be removed since they are parsing the rules and not the roles.  Rules is phase 2.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r398207516", "createdAt": "2020-03-25T22:25:03Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/handlebars/HandlebarsHelper.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.parser.handlebars;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Dimension;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Join;\n+\n+import com.github.jknack.handlebars.Options;\n+\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Helper class for handlebar template hydration.\n+ */\n+public class HandlebarsHelper {\n+\n+    private static final String EMPTY_STRING = \"\";\n+    private static final String UNDERSCORE = \"_\";\n+    private static final String STRING = \"String\";\n+    private static final String DATE = \"Date\";\n+    private static final String DOUBLE = \"Double\";\n+    private static final String LONG = \"Long\";\n+    private static final String BOOLEAN = \"Boolean\";\n+    private static final String SPACE = \" \";\n+    private static final String FOUR_SPACES = \"    \";\n+    private static final String EIGHT_SPACES = FOUR_SPACES + FOUR_SPACES;\n+    private static final String NEWLINE = \"\\n\";\n+    private static final String WHITESPACE_REGEX = \"\\\\s+\";\n+\n+    /**\n+     * Capitalize first letter of the string.\n+     * @param str string to capitalize first letter\n+     * @return string with first letter capitalized\n+     */\n+    public String capitalizeFirstLetter(String str) {\n+\n+        return (str == null || str.length() == 0) ? str : str.substring(0, 1).toUpperCase(Locale.ENGLISH)\n+                + str.substring(1);\n+    }\n+\n+    /**\n+     * Transform string to upper case.\n+     * @param obj Object representation of the string\n+     * @return string converted to upper case\n+     */\n+    public String toUpperCase(Object obj) {\n+\n+        return (obj == null) ? EMPTY_STRING : obj.toString().toUpperCase(Locale.ENGLISH);\n+    }\n+\n+    /**\n+     * Transform string to lower case.\n+     * @param obj Object representation of the string\n+     * @return string converted to lower case\n+     */\n+    public String toLowerCase(Object obj) {\n+\n+        return (obj == null) ? EMPTY_STRING : obj.toString().toLowerCase(Locale.ENGLISH);\n+    }\n+\n+    /**\n+     * If template matches a string.\n+     * @param str String representation of the template\n+     * @param options options object with string to match\n+     * @return template if matched\n+     * @throws IOException IOException\n+     */\n+    public CharSequence ifContains(String str, Options options) throws IOException {\n+\n+        String toMatch = options.param(0, null);\n+        return options.isFalsy(contains(str, toMatch)) ? options.inverse() : options.fn();\n+    }\n+\n+    /**\n+     * If type of dimension matches passed value.\n+     * @param dim Elide dimension object\n+     * @param options options object with type/string to match\n+     * @return template if matched\n+     * @throws IOException IOException\n+     */\n+    public CharSequence ifDimTypeMatches(Dimension dim, Options options) throws IOException {\n+\n+        String dimDataType = dim.getType().toString();\n+        String typeToMatch = options.param(0, null);\n+        boolean result = new EqualsBuilder().append(dimDataType, typeToMatch).isEquals();\n+        return result ? options.fn() : options.inverse();\n+    }\n+\n+    /**\n+     * If string contains passed value.\n+     * @param str String to be searched\n+     * @param search pattern to search\n+     * @return true/false if matched\n+     */\n+    public boolean contains(String str, String search) {\n+\n+        return (str == null || str.indexOf(search) < 0);\n+    }\n+\n+    /**\n+     * Generate setter method.\n+     * @param type Type of the field\n+     * @param fieldName Field Name\n+     * @return setter method\n+     */\n+    public String generateSetterMethod(String type, String fieldName) {\n+\n+        return \"public void set\" + capitalizeFirstLetter(fieldName) + \"(\" + type + SPACE + fieldName + \") {\" + NEWLINE\n+                        + EIGHT_SPACES + \"this.\" + fieldName + \" = \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    /**\n+     * Generate setter method for Dimension Type.\n+     * @param dim Dimension Object\n+     * @return setter method\n+     */\n+    public String generateDimSetterMethod(Dimension dim) {\n+\n+        String type = getDimensionType(dim);\n+        String fieldName = dim.getName();\n+        return \"public void set\" + capitalizeFirstLetter(fieldName) + \"(\" + type + SPACE + fieldName + \") {\" + NEWLINE\n+                        + EIGHT_SPACES + \"this.\" + fieldName + \" = \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    /**\n+     * Generate setter method for Join Type.\n+     * @param join Join Object\n+     * @return setter method\n+     */\n+    public String generateJoinSetterMethod(Join join) {\n+\n+        String type = capitalizeFirstLetter(join.getTo());\n+        String fieldName = join.getName();\n+        return \"public void set\" + capitalizeFirstLetter(fieldName) + \"(\" + type + SPACE + fieldName + \") {\" + NEWLINE\n+                        + EIGHT_SPACES + \"this.\" + fieldName + \" = \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    /**\n+     * Generate getter method.\n+     * @param type Type of the field\n+     * @param fieldName field Name\n+     * @return getter method\n+     */\n+    public String generateGetterMethod(String type, String fieldName) {\n+\n+        return \"public \" + type + \" get\" + capitalizeFirstLetter(fieldName) + \"() {\" + NEWLINE + EIGHT_SPACES\n+                        + \"return \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    /**\n+     * Generate getter method for Dimension type.\n+     * @param dim Dimension Object\n+     * @return getter method\n+     */\n+    public String generateDimGetterMethod(Dimension dim) {\n+\n+        String type = getDimensionType(dim);\n+        String fieldName = dim.getName();\n+        return \"public \" + type + \" get\" + capitalizeFirstLetter(fieldName) + \"() {\" + NEWLINE + EIGHT_SPACES\n+                        + \"return \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    /**\n+     * Generate getter method for Join type.\n+     * @param join Join Object\n+     * @return getter method\n+     */\n+    public String generateJoinGetterMethod(Join join) {\n+\n+        String type = capitalizeFirstLetter(join.getTo());\n+        String fieldName = join.getName();\n+        return \"public \" + type + \" get\" + capitalizeFirstLetter(fieldName) + \"() {\" + NEWLINE + EIGHT_SPACES\n+                        + \"return \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    // Security.java helper methods\n+    /**\n+     * Get the Class Name for Security.\n+     * @param name Name of the security rule\n+     * @return Capitalize First Letter of Each Word and remove spaces\n+     */\n+    public String getClassSuffix(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89060707ae67ab6d4459e870daf5d6f15e34890b"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODU3NzE5OnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/handlebars/HandlebarsHydrator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjoyNjozNlrOF7wsbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjoyNjozNlrOF7wsbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwODExMQ==", "bodyText": "ElideTable needs a better class name since it is really a configuration object and not a singular table.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r398208111", "createdAt": "2020-03-25T22:26:36Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/handlebars/HandlebarsHydrator.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.parser.handlebars;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideSecurity;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideTable;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Table;\n+import com.github.jknack.handlebars.Context;\n+import com.github.jknack.handlebars.EscapingStrategy;\n+import com.github.jknack.handlebars.EscapingStrategy.Hbs;\n+import com.github.jknack.handlebars.Handlebars;\n+import com.github.jknack.handlebars.Template;\n+import com.github.jknack.handlebars.helper.ConditionalHelpers;\n+import com.github.jknack.handlebars.io.ClassPathTemplateLoader;\n+import com.github.jknack.handlebars.io.TemplateLoader;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Class for handlebars hydration.\n+ */\n+public class HandlebarsHydrator {\n+\n+    public static final EscapingStrategy MY_ESCAPING_STRATEGY = new Hbs(new String[][]{\n+        {\"<\", \"&lt;\" },\n+        {\">\", \"&gt;\" },\n+        {\"\\\"\", \"&quot;\" },\n+        {\"`\", \"&#x60;\" },\n+        {\"&\", \"&amp;\" }\n+    });\n+\n+    /**\n+     * Method to hydrate the Table template.\n+     * @param table ElideTable object\n+     * @return table java class list\n+     * @throws IOException IOException\n+     */\n+    public List<String> hydrateTableTemplate(ElideTable table) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89060707ae67ab6d4459e870daf5d6f15e34890b"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODU4MTU5OnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/handlebars/HandlebarsHydrator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjoyODoxN1rOF7wvNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjoyODoxN1rOF7wvNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwODgyMA==", "bodyText": "Rename ElideSecurity to ElideSecurityConfig", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r398208820", "createdAt": "2020-03-25T22:28:17Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/handlebars/HandlebarsHydrator.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.parser.handlebars;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideSecurity;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideTable;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Table;\n+import com.github.jknack.handlebars.Context;\n+import com.github.jknack.handlebars.EscapingStrategy;\n+import com.github.jknack.handlebars.EscapingStrategy.Hbs;\n+import com.github.jknack.handlebars.Handlebars;\n+import com.github.jknack.handlebars.Template;\n+import com.github.jknack.handlebars.helper.ConditionalHelpers;\n+import com.github.jknack.handlebars.io.ClassPathTemplateLoader;\n+import com.github.jknack.handlebars.io.TemplateLoader;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Class for handlebars hydration.\n+ */\n+public class HandlebarsHydrator {\n+\n+    public static final EscapingStrategy MY_ESCAPING_STRATEGY = new Hbs(new String[][]{\n+        {\"<\", \"&lt;\" },\n+        {\">\", \"&gt;\" },\n+        {\"\\\"\", \"&quot;\" },\n+        {\"`\", \"&#x60;\" },\n+        {\"&\", \"&amp;\" }\n+    });\n+\n+    /**\n+     * Method to hydrate the Table template.\n+     * @param table ElideTable object\n+     * @return table java class list\n+     * @throws IOException IOException\n+     */\n+    public List<String> hydrateTableTemplate(ElideTable table) throws IOException {\n+\n+        List<String> tableClassStringList = new ArrayList<>();\n+\n+        TemplateLoader loader = new ClassPathTemplateLoader(\"/templates\");\n+        Handlebars handlebars = new Handlebars(loader).with(MY_ESCAPING_STRATEGY);\n+        handlebars.registerHelpers(ConditionalHelpers.class);\n+        handlebars.registerHelpers(new HandlebarsHelper());\n+        Template template = handlebars.compile(\"table\");\n+\n+        for (Table t : table.getTables()) {\n+            tableClassStringList.add(template.apply(t));\n+        }\n+\n+        return tableClassStringList;\n+    }\n+\n+    /**\n+     * Method to replace variables in hjson config.\n+     * @param config hjson config string\n+     * @param replacements Map of variable key value pairs\n+     * @return hjson config string with variables replaced\n+     * @throws IOException IOException\n+     */\n+    public String hydrateConfigTemplate(String config, Map<String, Object> replacements) throws IOException {\n+\n+        Context context = Context.newBuilder(replacements).build();\n+        Handlebars handlebars = new Handlebars();\n+        Template template = handlebars.compileInline(config);\n+\n+        return template.apply(context);\n+    }\n+\n+    /**\n+     * Method to return the List of Class Names hydrated.\n+     * @param table ElideTable object\n+     * @return table java class name list\n+     * @throws IOException IOException\n+     */\n+    public List<String> getTableClassNames(ElideTable table) throws IOException {\n+\n+        List<String> tableClassStringNameList = new ArrayList<>();\n+\n+        HandlebarsHelper helper = new HandlebarsHelper();\n+\n+        for (Table t : table.getTables()) {\n+            tableClassStringNameList.add(helper.capitalizeFirstLetter(t.getName()));\n+        }\n+\n+        return tableClassStringNameList;\n+    }\n+\n+    /**\n+     * Method to hydrate the Security template.\n+     * @param security ElideSecurity Object\n+     * @return security java class string\n+     * @throws IOException IOException\n+     */\n+    public String hydrateSecurityTemplate(ElideSecurity security) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89060707ae67ab6d4459e870daf5d6f15e34890b"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODU4NzEzOnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/handlebars/HandlebarsHydrator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjoyOTo1NlrOF7wyeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjoyOTo1NlrOF7wyeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwOTY1Nw==", "bodyText": "Its hard to say if these method signatures are the right ones without seeing the calling code.  I'm confused why this is returning a list of Strings for example and not a Map.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r398209657", "createdAt": "2020-03-25T22:29:56Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/handlebars/HandlebarsHydrator.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.parser.handlebars;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideSecurity;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideTable;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Table;\n+import com.github.jknack.handlebars.Context;\n+import com.github.jknack.handlebars.EscapingStrategy;\n+import com.github.jknack.handlebars.EscapingStrategy.Hbs;\n+import com.github.jknack.handlebars.Handlebars;\n+import com.github.jknack.handlebars.Template;\n+import com.github.jknack.handlebars.helper.ConditionalHelpers;\n+import com.github.jknack.handlebars.io.ClassPathTemplateLoader;\n+import com.github.jknack.handlebars.io.TemplateLoader;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Class for handlebars hydration.\n+ */\n+public class HandlebarsHydrator {\n+\n+    public static final EscapingStrategy MY_ESCAPING_STRATEGY = new Hbs(new String[][]{\n+        {\"<\", \"&lt;\" },\n+        {\">\", \"&gt;\" },\n+        {\"\\\"\", \"&quot;\" },\n+        {\"`\", \"&#x60;\" },\n+        {\"&\", \"&amp;\" }\n+    });\n+\n+    /**\n+     * Method to hydrate the Table template.\n+     * @param table ElideTable object\n+     * @return table java class list\n+     * @throws IOException IOException\n+     */\n+    public List<String> hydrateTableTemplate(ElideTable table) throws IOException {\n+\n+        List<String> tableClassStringList = new ArrayList<>();\n+\n+        TemplateLoader loader = new ClassPathTemplateLoader(\"/templates\");\n+        Handlebars handlebars = new Handlebars(loader).with(MY_ESCAPING_STRATEGY);\n+        handlebars.registerHelpers(ConditionalHelpers.class);\n+        handlebars.registerHelpers(new HandlebarsHelper());\n+        Template template = handlebars.compile(\"table\");\n+\n+        for (Table t : table.getTables()) {\n+            tableClassStringList.add(template.apply(t));\n+        }\n+\n+        return tableClassStringList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89060707ae67ab6d4459e870daf5d6f15e34890b"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODU0NzMwOnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/security.hbs", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMzo0NTowMFrOF-sDUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMzo0NTowMFrOF-sDUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI3Nzc3Nw==", "bodyText": "Optional is not used. Please remove", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r401277777", "createdAt": "2020-03-31T23:45:00Z", "author": {"login": "moizarafat"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/security.hbs", "diffHunk": "@@ -0,0 +1,19 @@\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import java.security.Principal;\n+import java.util.Optional;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21ff790f9be5f4a9e99e2e37cda439b31a5f2936"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODczNzU1OnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/security.hbs", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMTozMDo1NVrOF-tzkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMTozNDo1MFrOF-t3bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMwNjUxNA==", "bodyText": "We need to remove the top level DynamicConfigOperationChecks and instead move PrincipalIs Classes as the top level class. For ex. the class should be generated as\n\nimport com.yahoo.elide.annotation.SecurityCheck;\nimport com.yahoo.elide.security.checks.prefab.Role.RoleMemberCheck;\n\n@SecurityCheck(DynamicConfigOperationChecksPrincipalIsAdmin.PRINCIPAL_IS_ADMIN)\npublic class DynamicConfigOperationChecksPrincipalIsAdmin extends RoleMemberCheck {\n\n\tpublic static final String PRINCIPAL_IS_ADMIN = \"Principal is Admin\";\n\n\tpublic DynamicConfigOperationChecksPrincipalIsAdmin() {\n\t\tsuper(\"admin\"); \n\n\t}\n}", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r401306514", "createdAt": "2020-04-01T01:30:55Z", "author": {"login": "moizarafat"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/security.hbs", "diffHunk": "@@ -0,0 +1,19 @@\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import java.security.Principal;\n+import java.util.Optional;\n+import com.yahoo.elide.annotation.SecurityCheck;\n+import com.yahoo.elide.security.checks.prefab.Role.RoleMemberCheck;\n+\n+public class DynamicConfigOperationChecks {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21ff790f9be5f4a9e99e2e37cda439b31a5f2936"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMwNzUwMw==", "bodyText": "We should return each roles as separate java class back to the caller program. This is to assist during the inmemory compile as we will not be able to parse the top level class to get the individual security class.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r401307503", "createdAt": "2020-04-01T01:34:50Z", "author": {"login": "moizarafat"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/security.hbs", "diffHunk": "@@ -0,0 +1,19 @@\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import java.security.Principal;\n+import java.util.Optional;\n+import com.yahoo.elide.annotation.SecurityCheck;\n+import com.yahoo.elide.security.checks.prefab.Role.RoleMemberCheck;\n+\n+public class DynamicConfigOperationChecks {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMwNjUxNA=="}, "originalCommit": {"oid": "21ff790f9be5f4a9e99e2e37cda439b31a5f2936"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODc0NjA5OnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/handlebars/HandlebarsHydrator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMTozNjoyNFrOF-t42g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMTozNjoyNFrOF-t42g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMwNzg2Ng==", "bodyText": "As mentioned in the other comment, this should return multiple classes by looping the individual entries in roles. So this class should also return a map like hydrateTableTemplate.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r401307866", "createdAt": "2020-04-01T01:36:24Z", "author": {"login": "moizarafat"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/handlebars/HandlebarsHydrator.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.parser.handlebars;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideSecurity;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideTable;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Table;\n+import com.github.jknack.handlebars.Context;\n+import com.github.jknack.handlebars.EscapingStrategy;\n+import com.github.jknack.handlebars.EscapingStrategy.Hbs;\n+import com.github.jknack.handlebars.Handlebars;\n+import com.github.jknack.handlebars.Template;\n+import com.github.jknack.handlebars.helper.ConditionalHelpers;\n+import com.github.jknack.handlebars.io.ClassPathTemplateLoader;\n+import com.github.jknack.handlebars.io.TemplateLoader;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Class for handlebars hydration.\n+ */\n+public class HandlebarsHydrator {\n+\n+    public static final EscapingStrategy MY_ESCAPING_STRATEGY = new Hbs(new String[][]{\n+        {\"<\", \"&lt;\" },\n+        {\">\", \"&gt;\" },\n+        {\"\\\"\", \"&quot;\" },\n+        {\"`\", \"&#x60;\" },\n+        {\"&\", \"&amp;\" }\n+    });\n+\n+    /**\n+     * Method to hydrate the Table template.\n+     * @param table ElideTable object\n+     * @return map with key as table java class name and value as table java class definition\n+     * @throws IOException IOException\n+     */\n+    public Map<String, String> hydrateTableTemplate(ElideTable table) throws IOException {\n+\n+        Map<String, String> tableClasses = new HashMap<>();\n+\n+        TemplateLoader loader = new ClassPathTemplateLoader(\"/templates\");\n+        Handlebars handlebars = new Handlebars(loader).with(MY_ESCAPING_STRATEGY);\n+        HandlebarsHelper helper = new HandlebarsHelper();\n+        handlebars.registerHelpers(ConditionalHelpers.class);\n+        handlebars.registerHelpers(helper);\n+        Template template = handlebars.compile(\"table\");\n+\n+        for (Table t : table.getTables()) {\n+            tableClasses.put(helper.capitalizeFirstLetter(t.getName()), template.apply(t));\n+        }\n+\n+        return tableClasses;\n+    }\n+\n+    /**\n+     * Method to replace variables in hjson config.\n+     * @param config hjson config string\n+     * @param replacements Map of variable key value pairs\n+     * @return hjson config string with variables replaced\n+     * @throws IOException IOException\n+     */\n+    public String hydrateConfigTemplate(String config, Map<String, Object> replacements) throws IOException {\n+\n+        Context context = Context.newBuilder(replacements).build();\n+        Handlebars handlebars = new Handlebars();\n+        Template template = handlebars.compileInline(config);\n+\n+        return template.apply(context);\n+    }\n+\n+    /**\n+     * Method to hydrate the Security template.\n+     * @param security ElideSecurity Object\n+     * @return security java class string\n+     * @throws IOException IOException\n+     */\n+    public String hydrateSecurityTemplate(ElideSecurity security) throws IOException {\n+\n+        TemplateLoader loader = new ClassPathTemplateLoader(\"/templates\");\n+        Handlebars handlebars = new Handlebars(loader).with(MY_ESCAPING_STRATEGY);\n+        handlebars.registerHelpers(ConditionalHelpers.class);\n+        handlebars.registerHelpers(new HandlebarsHelper());\n+        Template template = handlebars.compile(\"security\");\n+\n+        return template.apply(security);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21ff790f9be5f4a9e99e2e37cda439b31a5f2936"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjI1NjUwOnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/ElideConfigParser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMDo0MTowMFrOGAtbcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzo1ODoyMlrOGHXxRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5NzQ4OA==", "bodyText": "We should call populatePojo method by passing util.resolveVariables(tableJson, this.variables) as an argument and move the logic related to populating tables.addAll(table.getTables()); into populatePojo", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r403397488", "createdAt": "2020-04-04T00:41:00Z", "author": {"login": "moizarafat"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/ElideConfigParser.java", "diffHunk": "@@ -72,12 +72,14 @@ private void parse(String localConfigPath) throws Exception {\n \n         //security\n         String securityJson = util.getJsonConfig(localConfigPath, DynamicConfigHelpersUtil.SCHEMA_TYPE_SECURITY).get(0);\n-        populatePojo(securityJson, DynamicConfigHelpersUtil.SCHEMA_TYPE_SECURITY);\n+        populatePojo(util.resolveVariables(securityJson, this.variables),\n+                DynamicConfigHelpersUtil.SCHEMA_TYPE_SECURITY);\n \n         //table\n         Set<Table> tables = new HashSet<>();\n         for (String tableJson : util.getJsonConfig(localConfigPath, DynamicConfigHelpersUtil.SCHEMA_TYPE_TABLE)) {\n-            ElideTableConfig table = (ElideTableConfig) parseJsonConfig(tableJson,\n+            ElideTableConfig table = (ElideTableConfig) parseJsonConfig(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "694435c3244bbaa5b1170c553a35e01ce49c01a2"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM4MjY2Mw==", "bodyText": "resolved in #1210", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r410382663", "createdAt": "2020-04-17T17:58:22Z", "author": {"login": "AvaniMakwana"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/ElideConfigParser.java", "diffHunk": "@@ -72,12 +72,14 @@ private void parse(String localConfigPath) throws Exception {\n \n         //security\n         String securityJson = util.getJsonConfig(localConfigPath, DynamicConfigHelpersUtil.SCHEMA_TYPE_SECURITY).get(0);\n-        populatePojo(securityJson, DynamicConfigHelpersUtil.SCHEMA_TYPE_SECURITY);\n+        populatePojo(util.resolveVariables(securityJson, this.variables),\n+                DynamicConfigHelpersUtil.SCHEMA_TYPE_SECURITY);\n \n         //table\n         Set<Table> tables = new HashSet<>();\n         for (String tableJson : util.getJsonConfig(localConfigPath, DynamicConfigHelpersUtil.SCHEMA_TYPE_TABLE)) {\n-            ElideTableConfig table = (ElideTableConfig) parseJsonConfig(tableJson,\n+            ElideTableConfig table = (ElideTableConfig) parseJsonConfig(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5NzQ4OA=="}, "originalCommit": {"oid": "694435c3244bbaa5b1170c553a35e01ce49c01a2"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjI1NzEwOnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/test/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/ElideConfigParserTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMDo0MTozN1rOGAtbzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzo1ODoxNVrOGHXxDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5NzU4Mg==", "bodyText": "Is this intended?", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r403397582", "createdAt": "2020-04-04T00:41:37Z", "author": {"login": "moizarafat"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/test/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/ElideConfigParserTest.java", "diffHunk": "@@ -41,13 +42,15 @@ public void testValidateVariablePath() throws Exception {\n             assertEquals(t.getMeasures().get(0).getName() , t.getMeasures().get(0).getDescription());\n             assertEquals(\"MAX(score)\", t.getMeasures().get(0).getDefinition());\n             assertEquals(Table.Cardinality.LARGE, t.getCardinality());\n+            // test hydration, variable substitution\n+            assertEquals(Type.INTEGER, t.getMeasures().get(0).getType());\n         }\n     }\n \n     @Test\n     public void testNullConfig() {\n         try {\n-            testClass.parseConfigPath(null);\n+//            testClass.parseConfigPath(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "694435c3244bbaa5b1170c553a35e01ce49c01a2"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM4MjYwNQ==", "bodyText": "resolved in #1210", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r410382605", "createdAt": "2020-04-17T17:58:15Z", "author": {"login": "AvaniMakwana"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/test/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/ElideConfigParserTest.java", "diffHunk": "@@ -41,13 +42,15 @@ public void testValidateVariablePath() throws Exception {\n             assertEquals(t.getMeasures().get(0).getName() , t.getMeasures().get(0).getDescription());\n             assertEquals(\"MAX(score)\", t.getMeasures().get(0).getDefinition());\n             assertEquals(Table.Cardinality.LARGE, t.getCardinality());\n+            // test hydration, variable substitution\n+            assertEquals(Type.INTEGER, t.getMeasures().get(0).getType());\n         }\n     }\n \n     @Test\n     public void testNullConfig() {\n         try {\n-            testClass.parseConfigPath(null);\n+//            testClass.parseConfigPath(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5NzU4Mg=="}, "originalCommit": {"oid": "694435c3244bbaa5b1170c553a35e01ce49c01a2"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMDMwNzk1OnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNjo1ODo0N1rOGEtLOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNjo1ODo0N1rOGEtLOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU4NzY0Mw==", "bodyText": "change name to Id", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r407587643", "createdAt": "2020-04-13T16:58:47Z", "author": {"login": "moizarafat"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "diffHunk": "@@ -0,0 +1,81 @@\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+import com.yahoo.elide.datastores.aggregation.annotation.DimensionFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.MetricFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.Join;\n+import com.yahoo.elide.datastores.aggregation.annotation.Meta;\n+import com.yahoo.elide.datastores.aggregation.annotation.Temporal;\n+import com.yahoo.elide.datastores.aggregation.annotation.TimeGrainDefinition;\n+import com.yahoo.elide.datastores.aggregation.metadata.enums.TimeGrain;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromSubquery;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+import lombok.Data;\n+\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Id;\n+import javax.persistence.Entity;\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Include(rootLevel = true)\n+@Cardinality(size = CardinalitySize.{{#toUpperCase cardinality}}{{/toUpperCase}})\n+@EqualsAndHashCode\n+@ToString\n+@Entity\n+@Data\n+{{#if table}}@FromTable(name = \"{{#if schema}}{{schema}}.{{/if}}{{table}}\"){{/if}}\n+{{#if sql}}@FromSubquery(sql = \"{{sql}}\"){{/if}}\n+{{#if readAccess}}@ReadPermission(expression = \"{{readAccess}}\"){{/if}}\n+{{#if description}}@Meta(description = \"{{description}}\"){{/if}}\n+public class {{#capitalizeFirstLetter name}}{{/capitalizeFirstLetter}} {{#if extend}}extends {{#capitalizeFirstLetter extend}}{{/capitalizeFirstLetter}}{{/if}}{\n+\n+    @Id\n+    private String name;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1016e14d984d06ecc34d0c3cd819baab523ca24"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMDMwOTEyOnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNjo1OTowMVrOGEtL6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNjo1OTowMVrOGEtL6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU4NzgxOA==", "bodyText": "remove @entity annotation here.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r407587818", "createdAt": "2020-04-13T16:59:01Z", "author": {"login": "moizarafat"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "diffHunk": "@@ -0,0 +1,81 @@\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+import com.yahoo.elide.datastores.aggregation.annotation.DimensionFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.MetricFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.Join;\n+import com.yahoo.elide.datastores.aggregation.annotation.Meta;\n+import com.yahoo.elide.datastores.aggregation.annotation.Temporal;\n+import com.yahoo.elide.datastores.aggregation.annotation.TimeGrainDefinition;\n+import com.yahoo.elide.datastores.aggregation.metadata.enums.TimeGrain;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromSubquery;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+import lombok.Data;\n+\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Id;\n+import javax.persistence.Entity;\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Include(rootLevel = true)\n+@Cardinality(size = CardinalitySize.{{#toUpperCase cardinality}}{{/toUpperCase}})\n+@EqualsAndHashCode\n+@ToString\n+@Entity", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1016e14d984d06ecc34d0c3cd819baab523ca24"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDAxMTc4OnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxODowMzozNlrOGGxHUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxODowMzozNlrOGGxHUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc0OTMzMA==", "bodyText": "When Hidden is true we need to use Exclude Annotation. https://elide.io/pages/guide/15-annotations.html#annotation-Exclude", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r409749330", "createdAt": "2020-04-16T18:03:36Z", "author": {"login": "moizarafat"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "diffHunk": "@@ -0,0 +1,81 @@\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+import com.yahoo.elide.datastores.aggregation.annotation.DimensionFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.MetricFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.Join;\n+import com.yahoo.elide.datastores.aggregation.annotation.Meta;\n+import com.yahoo.elide.datastores.aggregation.annotation.Temporal;\n+import com.yahoo.elide.datastores.aggregation.annotation.TimeGrainDefinition;\n+import com.yahoo.elide.datastores.aggregation.metadata.enums.TimeGrain;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromSubquery;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+import lombok.Data;\n+\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Id;\n+import javax.persistence.Entity;\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Include(rootLevel = true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1016e14d984d06ecc34d0c3cd819baab523ca24"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDAyMzQ1OnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxODowNjo1N1rOGGxOnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxODowNjo1N1rOGGxOnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc1MTE5Nw==", "bodyText": "Include logic for exclude.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r409751197", "createdAt": "2020-04-16T18:06:57Z", "author": {"login": "moizarafat"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "diffHunk": "@@ -0,0 +1,81 @@\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+import com.yahoo.elide.datastores.aggregation.annotation.DimensionFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.MetricFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.Join;\n+import com.yahoo.elide.datastores.aggregation.annotation.Meta;\n+import com.yahoo.elide.datastores.aggregation.annotation.Temporal;\n+import com.yahoo.elide.datastores.aggregation.annotation.TimeGrainDefinition;\n+import com.yahoo.elide.datastores.aggregation.metadata.enums.TimeGrain;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromSubquery;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+import lombok.Data;\n+\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Id;\n+import javax.persistence.Entity;\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Include(rootLevel = true)\n+@Cardinality(size = CardinalitySize.{{#toUpperCase cardinality}}{{/toUpperCase}})\n+@EqualsAndHashCode\n+@ToString\n+@Entity\n+@Data\n+{{#if table}}@FromTable(name = \"{{#if schema}}{{schema}}.{{/if}}{{table}}\"){{/if}}\n+{{#if sql}}@FromSubquery(sql = \"{{sql}}\"){{/if}}\n+{{#if readAccess}}@ReadPermission(expression = \"{{readAccess}}\"){{/if}}\n+{{#if description}}@Meta(description = \"{{description}}\"){{/if}}\n+public class {{#capitalizeFirstLetter name}}{{/capitalizeFirstLetter}} {{#if extend}}extends {{#capitalizeFirstLetter extend}}{{/capitalizeFirstLetter}}{{/if}}{\n+\n+    @Id\n+    private String name;\n+\n+{{#each dimensions}}\n+\n+{{#ifTypeMatches type \"TIME\"}}\n+    @Temporal(grains = {\n+    {{#each grains}}\n+            @TimeGrainDefinition(grain = TimeGrain.{{grain}}, expression = \"{{sql}}\"){{#if @last}}{{else}}, {{/if}}\n+    {{/each}}\n+    }, timeZone = \"UTC\")\n+{{/ifTypeMatches}}\n+\n+    {{#if readAccess}}@ReadPermission(expression = \"{{readAccess}}\"){{/if}}\n+    {{#if description}}@Meta(description = \"{{description}}\"){{/if}}\n+    @DimensionFormula(\"{{definition}}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1016e14d984d06ecc34d0c3cd819baab523ca24"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDAyMzgzOnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxODowNzowNFrOGGxO3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxODowNzowNFrOGGxO3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc1MTI2MA==", "bodyText": "Include logic for exclude.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r409751260", "createdAt": "2020-04-16T18:07:04Z", "author": {"login": "moizarafat"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "diffHunk": "@@ -0,0 +1,81 @@\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+import com.yahoo.elide.datastores.aggregation.annotation.DimensionFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.MetricFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.Join;\n+import com.yahoo.elide.datastores.aggregation.annotation.Meta;\n+import com.yahoo.elide.datastores.aggregation.annotation.Temporal;\n+import com.yahoo.elide.datastores.aggregation.annotation.TimeGrainDefinition;\n+import com.yahoo.elide.datastores.aggregation.metadata.enums.TimeGrain;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromSubquery;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+import lombok.Data;\n+\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Id;\n+import javax.persistence.Entity;\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Include(rootLevel = true)\n+@Cardinality(size = CardinalitySize.{{#toUpperCase cardinality}}{{/toUpperCase}})\n+@EqualsAndHashCode\n+@ToString\n+@Entity\n+@Data\n+{{#if table}}@FromTable(name = \"{{#if schema}}{{schema}}.{{/if}}{{table}}\"){{/if}}\n+{{#if sql}}@FromSubquery(sql = \"{{sql}}\"){{/if}}\n+{{#if readAccess}}@ReadPermission(expression = \"{{readAccess}}\"){{/if}}\n+{{#if description}}@Meta(description = \"{{description}}\"){{/if}}\n+public class {{#capitalizeFirstLetter name}}{{/capitalizeFirstLetter}} {{#if extend}}extends {{#capitalizeFirstLetter extend}}{{/capitalizeFirstLetter}}{{/if}}{\n+\n+    @Id\n+    private String name;\n+\n+{{#each dimensions}}\n+\n+{{#ifTypeMatches type \"TIME\"}}\n+    @Temporal(grains = {\n+    {{#each grains}}\n+            @TimeGrainDefinition(grain = TimeGrain.{{grain}}, expression = \"{{sql}}\"){{#if @last}}{{else}}, {{/if}}\n+    {{/each}}\n+    }, timeZone = \"UTC\")\n+{{/ifTypeMatches}}\n+\n+    {{#if readAccess}}@ReadPermission(expression = \"{{readAccess}}\"){{/if}}\n+    {{#if description}}@Meta(description = \"{{description}}\"){{/if}}\n+    @DimensionFormula(\"{{definition}}\")\n+    private {{#getJavaType type}}{{/getJavaType}} {{name}};\n+\n+{{/each}}\n+\n+\n+{{#each joins}}\n+\n+    @Join(\"{{ definition }}\")\n+{{#ifTypeMatches type \"toMany\"}}\n+    private Set<{{#capitalizeFirstLetter to}}{{/capitalizeFirstLetter}}> {{name}};\n+{{else}}\n+    private {{#capitalizeFirstLetter to}}{{/capitalizeFirstLetter}} {{name}};\n+{{/ifTypeMatches}}\n+\n+{{/each}}\n+\n+{{#each measures}}\n+\n+    @MetricFormula(\"{{definition}}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1016e14d984d06ecc34d0c3cd819baab523ca24"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzA3NzEwOnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/security.hbs", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODoyMzozMFrOGIhuhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDoyMToyOFrOGImDsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU5NDM3NQ==", "bodyText": "Copyright", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r411594375", "createdAt": "2020-04-20T18:23:30Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/security.hbs", "diffHunk": "@@ -0,0 +1,13 @@\n+package com.yahoo.elide.contrib.dynamicconfig.model;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d04fde754be854f9b00691496945a8e2c448945"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY2NTMyOA==", "bodyText": "Added.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r411665328", "createdAt": "2020-04-20T20:21:28Z", "author": {"login": "rishi-aga"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/security.hbs", "diffHunk": "@@ -0,0 +1,13 @@\n+package com.yahoo.elide.contrib.dynamicconfig.model;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU5NDM3NQ=="}, "originalCommit": {"oid": "3d04fde754be854f9b00691496945a8e2c448945"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzA5NzY1OnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/handlebars/HandlebarsHelper.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODoyODozMFrOGIh67A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMToyMjoxNFrOGKMaJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU5NzU0OA==", "bodyText": "Maybe call capitalizeFirstLetter here.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r411597548", "createdAt": "2020-04-20T18:28:30Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/handlebars/HandlebarsHelper.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.parser.handlebars;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Type;\n+import com.github.jknack.handlebars.Options;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Helper class for handlebar template hydration.\n+ */\n+public class HandlebarsHelper {\n+\n+    private static final String EMPTY_STRING = \"\";\n+    private static final String STRING = \"String\";\n+    private static final String DATE = \"Date\";\n+    private static final String BIGDECIMAL = \"BigDecimal\";\n+    private static final String LONG = \"Long\";\n+    private static final String BOOLEAN = \"Boolean\";\n+    private static final String WHITESPACE_REGEX = \"\\\\s+\";\n+\n+    /**\n+     * Capitalize first letter of the string.\n+     * @param str string to capitalize first letter\n+     * @return string with first letter capitalized\n+     */\n+    public String capitalizeFirstLetter(String str) {\n+\n+        return (str == null || str.length() == 0) ? str : str.substring(0, 1).toUpperCase(Locale.ENGLISH)\n+                + str.substring(1);\n+    }\n+\n+    /**\n+     * Transform string to capitalize first letter of each word and remove spaces.\n+     * @param str String to be transformed\n+     * @return Capitalize First Letter of Each Word and remove spaces\n+     */\n+    public String firstCharOnlyToUpper(String str) {\n+\n+        return (str == null || str.length() == 0) ? str\n+                : String.join(EMPTY_STRING, Arrays.asList(str.trim().split(WHITESPACE_REGEX)).stream().map(\n+                        s -> s.substring(0, 1).toUpperCase(Locale.ENGLISH) + s.substring(1).toLowerCase(Locale.ENGLISH))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d04fde754be854f9b00691496945a8e2c448945"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY2NTE5OA==", "bodyText": "capitalizeFirstLetter is to change first character to uppercase and keep others as is.\nfirstCharOnlyToUpper is to change first character of each word to uppercase, change other\ncharacters to lower case and remove spaces. Renaming method name  to \"titleCaseRemoveSpaces\"\nAlso changing definition to \"s -> toUpperCase(s.substring(0, 1)) + toLowerCase(s.substring(1)))\" ,", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r411665198", "createdAt": "2020-04-20T20:21:15Z", "author": {"login": "rishi-aga"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/handlebars/HandlebarsHelper.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.parser.handlebars;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Type;\n+import com.github.jknack.handlebars.Options;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Helper class for handlebar template hydration.\n+ */\n+public class HandlebarsHelper {\n+\n+    private static final String EMPTY_STRING = \"\";\n+    private static final String STRING = \"String\";\n+    private static final String DATE = \"Date\";\n+    private static final String BIGDECIMAL = \"BigDecimal\";\n+    private static final String LONG = \"Long\";\n+    private static final String BOOLEAN = \"Boolean\";\n+    private static final String WHITESPACE_REGEX = \"\\\\s+\";\n+\n+    /**\n+     * Capitalize first letter of the string.\n+     * @param str string to capitalize first letter\n+     * @return string with first letter capitalized\n+     */\n+    public String capitalizeFirstLetter(String str) {\n+\n+        return (str == null || str.length() == 0) ? str : str.substring(0, 1).toUpperCase(Locale.ENGLISH)\n+                + str.substring(1);\n+    }\n+\n+    /**\n+     * Transform string to capitalize first letter of each word and remove spaces.\n+     * @param str String to be transformed\n+     * @return Capitalize First Letter of Each Word and remove spaces\n+     */\n+    public String firstCharOnlyToUpper(String str) {\n+\n+        return (str == null || str.length() == 0) ? str\n+                : String.join(EMPTY_STRING, Arrays.asList(str.trim().split(WHITESPACE_REGEX)).stream().map(\n+                        s -> s.substring(0, 1).toUpperCase(Locale.ENGLISH) + s.substring(1).toLowerCase(Locale.ENGLISH))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU5NzU0OA=="}, "originalCommit": {"oid": "3d04fde754be854f9b00691496945a8e2c448945"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM0MjI0NQ==", "bodyText": "Calling capitalizeFirstLetter will run substring again even for 1 character passed to it, so we decided to skip that call.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r413342245", "createdAt": "2020-04-22T21:22:14Z", "author": {"login": "moizarafat"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/handlebars/HandlebarsHelper.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.parser.handlebars;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Type;\n+import com.github.jknack.handlebars.Options;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Helper class for handlebar template hydration.\n+ */\n+public class HandlebarsHelper {\n+\n+    private static final String EMPTY_STRING = \"\";\n+    private static final String STRING = \"String\";\n+    private static final String DATE = \"Date\";\n+    private static final String BIGDECIMAL = \"BigDecimal\";\n+    private static final String LONG = \"Long\";\n+    private static final String BOOLEAN = \"Boolean\";\n+    private static final String WHITESPACE_REGEX = \"\\\\s+\";\n+\n+    /**\n+     * Capitalize first letter of the string.\n+     * @param str string to capitalize first letter\n+     * @return string with first letter capitalized\n+     */\n+    public String capitalizeFirstLetter(String str) {\n+\n+        return (str == null || str.length() == 0) ? str : str.substring(0, 1).toUpperCase(Locale.ENGLISH)\n+                + str.substring(1);\n+    }\n+\n+    /**\n+     * Transform string to capitalize first letter of each word and remove spaces.\n+     * @param str String to be transformed\n+     * @return Capitalize First Letter of Each Word and remove spaces\n+     */\n+    public String firstCharOnlyToUpper(String str) {\n+\n+        return (str == null || str.length() == 0) ? str\n+                : String.join(EMPTY_STRING, Arrays.asList(str.trim().split(WHITESPACE_REGEX)).stream().map(\n+                        s -> s.substring(0, 1).toUpperCase(Locale.ENGLISH) + s.substring(1).toLowerCase(Locale.ENGLISH))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU5NzU0OA=="}, "originalCommit": {"oid": "3d04fde754be854f9b00691496945a8e2c448945"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzMxOTkyOnYy", "diffSide": "RIGHT", "path": "suppressions.xml", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOToyNDoxM1rOGIj_hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDo0Mjo1NVrOGO5nfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYzMTQ5Mw==", "bodyText": "There's no fix for any of these?  Paranoids don't like unbounded security supressions.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r411631493", "createdAt": "2020-04-20T19:24:13Z", "author": {"login": "aklish"}, "path": "suppressions.xml", "diffHunk": "@@ -3,4 +3,25 @@\n    <suppress until=\"2021-01-01Z\">\n       <cve>CVE-2018-1258</cve>\n    </suppress>\n+   <suppress until=\"2019-12-01Z\">\n+       <notes><![CDATA[file name: jackson-databind-2.9.9.3.jar]]></notes>\n+       <gav regex=\"true\">^com\\.fasterxml\\.jackson\\.core:jackson-databind.*$</gav>\n+       <cve>CVE-2019-16335</cve>\n+       <cve>CVE-2019-14540</cve>\n+   </suppress>\n+   <suppress>\n+       <notes><![CDATA[file name: handlebars-4.1.2.jar: handlebars-v4.0.4.js]]></notes>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d04fde754be854f9b00691496945a8e2c448945"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMzMTc3OQ==", "bodyText": "there has been no version released since Oct 2018. https://mvnrepository.com/artifact/com.github.jknack/handlebars . Its a open issue on their github page recently.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r413331779", "createdAt": "2020-04-22T21:04:32Z", "author": {"login": "moizarafat"}, "path": "suppressions.xml", "diffHunk": "@@ -3,4 +3,25 @@\n    <suppress until=\"2021-01-01Z\">\n       <cve>CVE-2018-1258</cve>\n    </suppress>\n+   <suppress until=\"2019-12-01Z\">\n+       <notes><![CDATA[file name: jackson-databind-2.9.9.3.jar]]></notes>\n+       <gav regex=\"true\">^com\\.fasterxml\\.jackson\\.core:jackson-databind.*$</gav>\n+       <cve>CVE-2019-16335</cve>\n+       <cve>CVE-2019-14540</cve>\n+   </suppress>\n+   <suppress>\n+       <notes><![CDATA[file name: handlebars-4.1.2.jar: handlebars-v4.0.4.js]]></notes>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYzMTQ5Mw=="}, "originalCommit": {"oid": "3d04fde754be854f9b00691496945a8e2c448945"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIxNDY5Ng==", "bodyText": "There is a new release of handlebars 4.2.0 for this issue. we will switch to that and verify", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r416214696", "createdAt": "2020-04-27T23:20:49Z", "author": {"login": "moizarafat"}, "path": "suppressions.xml", "diffHunk": "@@ -3,4 +3,25 @@\n    <suppress until=\"2021-01-01Z\">\n       <cve>CVE-2018-1258</cve>\n    </suppress>\n+   <suppress until=\"2019-12-01Z\">\n+       <notes><![CDATA[file name: jackson-databind-2.9.9.3.jar]]></notes>\n+       <gav regex=\"true\">^com\\.fasterxml\\.jackson\\.core:jackson-databind.*$</gav>\n+       <cve>CVE-2019-16335</cve>\n+       <cve>CVE-2019-14540</cve>\n+   </suppress>\n+   <suppress>\n+       <notes><![CDATA[file name: handlebars-4.1.2.jar: handlebars-v4.0.4.js]]></notes>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYzMTQ5Mw=="}, "originalCommit": {"oid": "3d04fde754be854f9b00691496945a8e2c448945"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI3NzI0Nw==", "bodyText": "Any update on this?", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r418277247", "createdAt": "2020-04-30T20:42:55Z", "author": {"login": "aklish"}, "path": "suppressions.xml", "diffHunk": "@@ -3,4 +3,25 @@\n    <suppress until=\"2021-01-01Z\">\n       <cve>CVE-2018-1258</cve>\n    </suppress>\n+   <suppress until=\"2019-12-01Z\">\n+       <notes><![CDATA[file name: jackson-databind-2.9.9.3.jar]]></notes>\n+       <gav regex=\"true\">^com\\.fasterxml\\.jackson\\.core:jackson-databind.*$</gav>\n+       <cve>CVE-2019-16335</cve>\n+       <cve>CVE-2019-14540</cve>\n+   </suppress>\n+   <suppress>\n+       <notes><![CDATA[file name: handlebars-4.1.2.jar: handlebars-v4.0.4.js]]></notes>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYzMTQ5Mw=="}, "originalCommit": {"oid": "3d04fde754be854f9b00691496945a8e2c448945"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MjUxOTI1OnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/ElideConfigParser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNToyODoyN1rOGKuO6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMzo1MjoxNlrOGM8fgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg5NjQyNQ==", "bodyText": "util.resolveVariables should also be called in populateTablesPojo.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r413896425", "createdAt": "2020-04-23T15:28:27Z", "author": {"login": "moizarafat"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/ElideConfigParser.java", "diffHunk": "@@ -56,7 +56,8 @@ private void parse(String localConfigPath) throws Exception {\n \n         //security\n         String securityJson = util.getJsonConfig(localConfigPath, DynamicConfigHelpersUtil.SCHEMA_TYPE_SECURITY).get(0);\n-        populatePojo(securityJson, DynamicConfigHelpersUtil.SCHEMA_TYPE_SECURITY);\n+        populatePojo(util.resolveVariables(securityJson, this.variables),\n+                DynamicConfigHelpersUtil.SCHEMA_TYPE_SECURITY);\n \n         //table\n         populateTablesPojo(util.getJsonConfig(localConfigPath, DynamicConfigHelpersUtil.SCHEMA_TYPE_TABLE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36cc01d6976ce0f511e47babd3b5b2e313b2138"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIyNzIwMA==", "bodyText": "populateTablesPojo method is calling util.resolveVariables", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r416227200", "createdAt": "2020-04-27T23:52:16Z", "author": {"login": "rishi-aga"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/ElideConfigParser.java", "diffHunk": "@@ -56,7 +56,8 @@ private void parse(String localConfigPath) throws Exception {\n \n         //security\n         String securityJson = util.getJsonConfig(localConfigPath, DynamicConfigHelpersUtil.SCHEMA_TYPE_SECURITY).get(0);\n-        populatePojo(securityJson, DynamicConfigHelpersUtil.SCHEMA_TYPE_SECURITY);\n+        populatePojo(util.resolveVariables(securityJson, this.variables),\n+                DynamicConfigHelpersUtil.SCHEMA_TYPE_SECURITY);\n \n         //table\n         populateTablesPojo(util.getJsonConfig(localConfigPath, DynamicConfigHelpersUtil.SCHEMA_TYPE_TABLE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg5NjQyNQ=="}, "originalCommit": {"oid": "e36cc01d6976ce0f511e47babd3b5b2e313b2138"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjU2ODMxOnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDo0NToxMlrOGO5rug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDo0NToxMlrOGO5rug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI3ODMzMA==", "bodyText": "Whenever the parent pom defines a version in the dependency management section, we should not redefine it here.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r418278330", "createdAt": "2020-04-30T20:45:12Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/pom.xml", "diffHunk": "@@ -48,10 +48,18 @@\n         <slf4j-api.version>1.7.26</slf4j-api.version>\n         <jsonschema2pojo-core.version>1.0.2</jsonschema2pojo-core.version>\n         <lombok.version>1.18.10</lombok.version>\n+        <handlebars.version>4.2.0</handlebars.version>\n         <json-schema-validator.version>2.2.12</json-schema-validator.version>\n+        <junit.jupiter.version>5.6.0</junit.jupiter.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ef27c868ea147fbc5aabb744bcdc9b5e49a6047"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjU3MjM4OnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/ElideConfigParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDo0NjoyN1rOGO5uSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDo0NjoyN1rOGO5uSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI3ODk4NQ==", "bodyText": "Don't print stack traces.  Instead use SLF4J to log them.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r418278985", "createdAt": "2020-04-30T20:46:27Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/ElideConfigParser.java", "diffHunk": "@@ -39,50 +39,51 @@\n      */\n     public void parseConfigPath(String localFilePath) {\n         try {\n-      if (util.isNullOrEmpty(localFilePath)) {\n-    throw new NullPointerException(\"Config path is null\");\n-      }\n-      parse(localFilePath);\n+            if (util.isNullOrEmpty(localFilePath)) {\n+                throw new NullPointerException(\"Config path is null\");\n+            }\n+            parse(localFilePath);\n         } catch (Exception e) {\n-      e.printStackTrace();\n-      log.error(e.getMessage());\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ef27c868ea147fbc5aabb744bcdc9b5e49a6047"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjU3NzIwOnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/ElideConfigParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDo0ODowNlrOGO5xZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDo0ODowNlrOGO5xZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI3OTc4MQ==", "bodyText": "Methods should not throw Exception.  They should be specific about the exceptions they throw.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r418279781", "createdAt": "2020-04-30T20:48:06Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/ElideConfigParser.java", "diffHunk": "@@ -39,50 +39,51 @@\n      */\n     public void parseConfigPath(String localFilePath) {\n         try {\n-      if (util.isNullOrEmpty(localFilePath)) {\n-    throw new NullPointerException(\"Config path is null\");\n-      }\n-      parse(localFilePath);\n+            if (util.isNullOrEmpty(localFilePath)) {\n+                throw new NullPointerException(\"Config path is null\");\n+            }\n+            parse(localFilePath);\n         } catch (Exception e) {\n-      e.printStackTrace();\n-      log.error(e.getMessage());\n+            e.printStackTrace();\n+            log.error(e.getMessage());\n         }\n     }\n \n     private void parse(String localConfigPath) throws Exception {\n-        //variables\n+        // variables", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ef27c868ea147fbc5aabb744bcdc9b5e49a6047"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDc0NTA5OnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNjowNDoyOFrOGPN2XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNjowNDoyOFrOGPN2XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYwODczMg==", "bodyText": "Any dependency defined in the parent pom dependency management should not set explicit versions.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r418608732", "createdAt": "2020-05-01T16:04:28Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/pom.xml", "diffHunk": "@@ -131,6 +131,29 @@\n             <version>${junit.platform.version}</version>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>com.github.jknack</groupId>\n+            <artifactId>handlebars</artifactId>\n+            <version>${handlebars.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter-api</artifactId>\n+            <version>${junit.jupiter.version}</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b09b47accba6615d8c865b64f01cbe02520f6adc"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDc2NDUzOnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNjoxMToxNFrOGPOCaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMDo0ODozM1rOGQRmGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYxMTgxNw==", "bodyText": "Can this be part of an else statement with respect to {{#if table}}", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r418611817", "createdAt": "2020-05-01T16:11:14Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.annotation.Exclude;\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+import com.yahoo.elide.datastores.aggregation.annotation.DimensionFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.MetricFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.Join;\n+import com.yahoo.elide.datastores.aggregation.annotation.Meta;\n+import com.yahoo.elide.datastores.aggregation.annotation.Temporal;\n+import com.yahoo.elide.datastores.aggregation.annotation.TimeGrainDefinition;\n+import com.yahoo.elide.datastores.aggregation.metadata.enums.TimeGrain;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromSubquery;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+import lombok.Data;\n+\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Id;\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Cardinality(size = CardinalitySize.{{#toUpperCase cardinality}}{{/toUpperCase}})\n+@EqualsAndHashCode\n+@ToString\n+@Data\n+{{#if table}}@FromTable(name = \"{{#if schema}}{{schema}}.{{/if}}{{table}}\"){{/if}}\n+{{#if sql}}@FromSubquery(sql = \"{{sql}}\"){{/if}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b09b47accba6615d8c865b64f01cbe02520f6adc"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY2MTM0OQ==", "bodyText": "As per schema it should be one of {table, sql, extend} so both table and sql can be undefined", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r419661349", "createdAt": "2020-05-04T19:05:11Z", "author": {"login": "rishi-aga"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.annotation.Exclude;\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+import com.yahoo.elide.datastores.aggregation.annotation.DimensionFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.MetricFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.Join;\n+import com.yahoo.elide.datastores.aggregation.annotation.Meta;\n+import com.yahoo.elide.datastores.aggregation.annotation.Temporal;\n+import com.yahoo.elide.datastores.aggregation.annotation.TimeGrainDefinition;\n+import com.yahoo.elide.datastores.aggregation.metadata.enums.TimeGrain;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromSubquery;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+import lombok.Data;\n+\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Id;\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Cardinality(size = CardinalitySize.{{#toUpperCase cardinality}}{{/toUpperCase}})\n+@EqualsAndHashCode\n+@ToString\n+@Data\n+{{#if table}}@FromTable(name = \"{{#if schema}}{{schema}}.{{/if}}{{table}}\"){{/if}}\n+{{#if sql}}@FromSubquery(sql = \"{{sql}}\"){{/if}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYxMTgxNw=="}, "originalCommit": {"oid": "b09b47accba6615d8c865b64f01cbe02520f6adc"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcxODY4Mw==", "bodyText": "changed to use if-else for table and sql", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r419718683", "createdAt": "2020-05-04T20:48:33Z", "author": {"login": "rishi-aga"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.annotation.Exclude;\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+import com.yahoo.elide.datastores.aggregation.annotation.DimensionFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.MetricFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.Join;\n+import com.yahoo.elide.datastores.aggregation.annotation.Meta;\n+import com.yahoo.elide.datastores.aggregation.annotation.Temporal;\n+import com.yahoo.elide.datastores.aggregation.annotation.TimeGrainDefinition;\n+import com.yahoo.elide.datastores.aggregation.metadata.enums.TimeGrain;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromSubquery;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+import lombok.Data;\n+\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Id;\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Cardinality(size = CardinalitySize.{{#toUpperCase cardinality}}{{/toUpperCase}})\n+@EqualsAndHashCode\n+@ToString\n+@Data\n+{{#if table}}@FromTable(name = \"{{#if schema}}{{schema}}.{{/if}}{{table}}\"){{/if}}\n+{{#if sql}}@FromSubquery(sql = \"{{sql}}\"){{/if}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYxMTgxNw=="}, "originalCommit": {"oid": "b09b47accba6615d8c865b64f01cbe02520f6adc"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTIwNTQ4OnYy", "diffSide": "LEFT", "path": "elide-contrib/elide-dynamic-config-helpers/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMDoxMTowMlrOGRjmig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMDo0ODowN1rOGRk0Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA2MjI4Mg==", "bodyText": "Can you remove the version variables above as well?", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r421062282", "createdAt": "2020-05-06T20:11:02Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/pom.xml", "diffHunk": "@@ -100,16 +100,6 @@\n             <artifactId>hjson</artifactId>\n             <version>${hjson.version}</version>\n         </dependency>\n-        <dependency>\n-            <groupId>org.junit.jupiter</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7d2652207416e46a5d51da296c08fd92bd98063"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA4MjE5MQ==", "bodyText": "Removed.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r421082191", "createdAt": "2020-05-06T20:48:07Z", "author": {"login": "rishi-aga"}, "path": "elide-contrib/elide-dynamic-config-helpers/pom.xml", "diffHunk": "@@ -100,16 +100,6 @@\n             <artifactId>hjson</artifactId>\n             <version>${hjson.version}</version>\n         </dependency>\n-        <dependency>\n-            <groupId>org.junit.jupiter</groupId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA2MjI4Mg=="}, "originalCommit": {"oid": "b7d2652207416e46a5d51da296c08fd92bd98063"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1077, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}