{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2NTU1ODQ5", "number": 1519, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODowMTozOFrOEfBQ6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoxMTowOFrOEfBc6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTYyMDI0OnYy", "diffSide": "RIGHT", "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/dialect/RSQLFilterDialect.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODowMTozOFrOHLCKyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODowMTozOFrOHLCKyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzMTkxNQ==", "bodyText": "Looks good, but we should add all the insensitive operators here as well (PREFIXI, INFIXI, etc)", "url": "https://github.com/yahoo/elide/pull/1519#discussion_r481331915", "createdAt": "2020-09-01T18:01:38Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/dialect/RSQLFilterDialect.java", "diffHunk": "@@ -59,6 +60,8 @@\n     private static final String SINGLE_PARAMETER_ONLY = \"There can only be a single filter query parameter\";\n     private static final String INVALID_QUERY_PARAMETER = \"Invalid query parameter: \";\n     private static final Pattern TYPED_FILTER_PATTERN = Pattern.compile(\"filter\\\\[([^\\\\]]+)\\\\]\");\n+    private static final ComparisonOperator INI = new ComparisonOperator(\"=ini=\", true);\n+    private static final ComparisonOperator NOT_INI = new ComparisonOperator(\"=outi=\", true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "709a5b27e09d28e52e03d392444daf423927bf4f"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTYyMjkwOnYy", "diffSide": "RIGHT", "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/dialect/RSQLFilterDialect.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODowMjozMlrOHLCMpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODowMjozMlrOHLCMpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzMjM4OA==", "bodyText": "Let's make these else if statements.", "url": "https://github.com/yahoo/elide/pull/1519#discussion_r481332388", "createdAt": "2020-09-01T18:02:32Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/dialect/RSQLFilterDialect.java", "diffHunk": "@@ -343,10 +348,16 @@ public FilterExpression visit(ComparisonNode node, Class entityType) {\n                     .collect(Collectors.toList());\n \n             if (op.equals(RSQLOperators.EQUAL) || op.equals(RSQLOperators.IN)) {\n-                return equalityExpression(arguments.get(0), path, values);\n+                return equalityExpression(arguments.get(0), path, values, true);\n+            }\n+            if (op.equals(INI)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "709a5b27e09d28e52e03d392444daf423927bf4f"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTY1MDk3OnYy", "diffSide": "RIGHT", "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/dialect/RSQLFilterDialect.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoxMTowOFrOHLCevg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoxMTowOFrOHLCevg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzNzAyMg==", "bodyText": "I believe we need to add explicit conditions for INFIXI, PREFIX, etc.", "url": "https://github.com/yahoo/elide/pull/1519#discussion_r481337022", "createdAt": "2020-09-01T18:11:08Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/dialect/RSQLFilterDialect.java", "diffHunk": "@@ -343,10 +348,16 @@ public FilterExpression visit(ComparisonNode node, Class entityType) {\n                     .collect(Collectors.toList());\n \n             if (op.equals(RSQLOperators.EQUAL) || op.equals(RSQLOperators.IN)) {\n-                return equalityExpression(arguments.get(0), path, values);\n+                return equalityExpression(arguments.get(0), path, values, true);\n+            }\n+            if (op.equals(INI)) {\n+                return equalityExpression(arguments.get(0), path, values, false);\n             }\n             if (op.equals(RSQLOperators.NOT_EQUAL) || op.equals(RSQLOperators.NOT_IN)) {\n-                return new NotFilterExpression(equalityExpression(arguments.get(0), path, values));\n+                return new NotFilterExpression(equalityExpression(arguments.get(0), path, values, true));\n+            }\n+            if (op.equals(NOT_INI)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "709a5b27e09d28e52e03d392444daf423927bf4f"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 956, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}