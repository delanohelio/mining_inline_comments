{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4OTU3NTAw", "number": 1280, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxOToyNDo0OFrOD2K1kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxOToyNDo0OFrOD2K1kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MTI3MjQ5OnYy", "diffSide": "RIGHT", "path": "elide-core/src/test/java/com/yahoo/elide/core/LifeCycleTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxOToyNDo0OFrOGL5VtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxOToyNDo0OFrOGL5VtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTEyNjk2NA==", "bodyText": "This will require #1278 for a proper error", "url": "https://github.com/yahoo/elide/pull/1280#discussion_r415126964", "createdAt": "2020-04-25T19:24:48Z", "author": {"login": "wcekan"}, "path": "elide-core/src/test/java/com/yahoo/elide/core/LifeCycleTest.java", "diffHunk": "@@ -664,6 +665,183 @@ public void testElidePatchFailure() throws Exception {\n         verify(tx).close();\n     }\n \n+    @Test\n+    public void testElidePatchExtensionCreate() throws Exception {\n+        DataStore store = mock(DataStore.class);\n+        DataStoreTransaction tx = mock(DataStoreTransaction.class);\n+        FieldTestModel mockModel = mock(FieldTestModel.class);\n+\n+        Elide elide = getElide(store, dictionary, MOCK_AUDIT_LOGGER);\n+\n+        String body = \"[{\\\"op\\\": \\\"add\\\",\\\"path\\\": \\\"/testModel\\\",\\\"value\\\":{\"\n+                + \"\\\"type\\\":\\\"testModel\\\",\\\"id\\\":\\\"1\\\",\\\"attributes\\\": {\\\"field\\\":\\\"Foo\\\"}}}]\";\n+\n+        when(store.beginTransaction()).thenReturn(tx);\n+        when(tx.createNewObject(FieldTestModel.class)).thenReturn(mockModel);\n+\n+        String contentType = JSONAPI_CONTENT_TYPE_WITH_JSON_PATCH_EXTENSION;\n+        ElideResponse response = elide.patch(contentType, contentType, \"/\", body, null);\n+        assertEquals(HttpStatus.SC_OK, response.getResponseCode());\n+\n+        verify(mockModel, times(1)).classCallback(eq(READ), eq(PRESECURITY));\n+        verify(mockModel, times(1)).classCallback(eq(READ), eq(PRECOMMIT));\n+        verify(mockModel, times(1)).classCallback(eq(READ), eq(POSTCOMMIT));\n+        verify(mockModel, times(1)).classCallback(eq(CREATE), eq(PRESECURITY));\n+        verify(mockModel, times(1)).classCallback(eq(CREATE), eq(PRECOMMIT));\n+        verify(mockModel, times(1)).classCallback(eq(CREATE), eq(POSTCOMMIT));\n+        verify(mockModel, never()).classCallback(eq(UPDATE), any());\n+        verify(mockModel, never()).classCallback(eq(DELETE), any());\n+\n+        verify(mockModel, times(2)).classAllFieldsCallback(any(), any());\n+        verify(mockModel, times(2)).classAllFieldsCallback(eq(CREATE), eq(PRECOMMIT));\n+\n+        verify(mockModel, times(1)).attributeCallback(eq(READ), eq(PRESECURITY), any());\n+        verify(mockModel, times(1)).attributeCallback(eq(READ), eq(PRECOMMIT), any());\n+        verify(mockModel, times(1)).attributeCallback(eq(READ), eq(POSTCOMMIT), any());\n+        verify(mockModel, times(1)).attributeCallback(eq(CREATE), eq(PRESECURITY), any());\n+        verify(mockModel, times(1)).attributeCallback(eq(CREATE), eq(PRECOMMIT), any());\n+        verify(mockModel, times(1)).attributeCallback(eq(CREATE), eq(POSTCOMMIT), any());\n+        verify(mockModel, never()).attributeCallback(eq(UPDATE), any(), any());\n+        verify(mockModel, never()).attributeCallback(eq(DELETE), any(), any());\n+\n+        verify(mockModel, times(1)).relationCallback(eq(READ), eq(PRESECURITY), any());\n+        verify(mockModel, times(1)).relationCallback(eq(READ), eq(PRECOMMIT), any());\n+        verify(mockModel, times(1)).relationCallback(eq(READ), eq(POSTCOMMIT), any());\n+        verify(mockModel, times(1)).relationCallback(eq(CREATE), eq(PRESECURITY), any());\n+        verify(mockModel, times(1)).relationCallback(eq(CREATE), eq(PRECOMMIT), any());\n+        verify(mockModel, times(1)).relationCallback(eq(CREATE), eq(POSTCOMMIT), any());\n+        verify(mockModel, never()).relationCallback(eq(UPDATE), any(), any());\n+        verify(mockModel, never()).relationCallback(eq(DELETE), any(), any());\n+\n+        verify(tx).preCommit();\n+        verify(tx, times(1)).createObject(eq(mockModel), isA(RequestScope.class));\n+        verify(tx).flush(isA(RequestScope.class));\n+        verify(tx).commit(isA(RequestScope.class));\n+        verify(tx).close();\n+    }\n+\n+    @Test\n+    public void failElidePatchExtensionCreate() throws Exception {\n+        DataStore store = mock(DataStore.class);\n+        DataStoreTransaction tx = mock(DataStoreTransaction.class);\n+        FieldTestModel mockModel = mock(FieldTestModel.class);\n+\n+        Elide elide = getElide(store, dictionary, MOCK_AUDIT_LOGGER);\n+\n+        String body = \"[{\\\"op\\\": \\\"add\\\",\\\"path\\\": \\\"/testModel\\\",\\\"value\\\":{\"\n+                + \"\\\"type\\\":\\\"testModel\\\",\\\"attributes\\\": {\\\"field\\\":\\\"Foo\\\"}}}]\";\n+\n+        when(store.beginTransaction()).thenReturn(tx);\n+        when(tx.createNewObject(FieldTestModel.class)).thenReturn(mockModel);\n+\n+        String contentType = JSONAPI_CONTENT_TYPE_WITH_JSON_PATCH_EXTENSION;\n+        ElideResponse response = elide.patch(contentType, contentType, \"/\", body, null);\n+        assertEquals(HttpStatus.SC_BAD_REQUEST, response.getResponseCode());\n+        assertTrue(response.getBody().startsWith(\n+                \"[{\\\"errors\\\":[{\\\"detail\\\":\\\"Invalid value: Resource(type=testModel, id=null, attributes={field=null}, relationships={models=com.yahoo.elide.jsonapi.models.Relationship@\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54d88920dc631eae3b02cb1943ec9e0104c94333"}, "originalPosition": 96}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1023, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}