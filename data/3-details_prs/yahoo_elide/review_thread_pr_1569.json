{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3MTU1MTE5", "number": 1569, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwMTowNDoyN1rOEqIycg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjoyMzo1OFrOEqZHsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNjE5NjM0OnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/security.hbs", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwMTowNDoyN1rOHcLaSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjoyMTowMFrOHckgYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTMwOTEzMA==", "bodyText": "Does Handlebar allow to chain functions? would something like this work\n<%#replaceSpace<%#toUpperCase this%><%/toUpperCase%>%><%/replaceSpace%>", "url": "https://github.com/yahoo/elide/pull/1569#discussion_r499309130", "createdAt": "2020-10-05T01:04:27Z", "author": {"login": "moizarafat"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/security.hbs", "diffHunk": "@@ -8,10 +8,10 @@ package dynamicconfig.models;\n import com.yahoo.elide.annotation.SecurityCheck;\n import com.yahoo.elide.security.checks.prefab.Role.RoleMemberCheck;\n \n-@SecurityCheck(DynamicConfigOperationChecksPrincipalIs<%#titleCaseRemoveSpaces this%><%/titleCaseRemoveSpaces%>.PRINCIPAL_IS_<%#toUpperCase this%><%/toUpperCase%>)\n+@SecurityCheck(DynamicConfigOperationChecksPrincipalIs<%#titleCaseRemoveSpaces this%><%/titleCaseRemoveSpaces%>.PRINCIPAL_IS_<%#toUpperCaseReplaceSpace this%><%/toUpperCaseReplaceSpace%>)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc1d90e13b2bbca8fcdbca27071c0e7bbd9bc601"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYwNzgwOQ==", "bodyText": "I gave it a try but doesn't seem to working.", "url": "https://github.com/yahoo/elide/pull/1569#discussion_r499607809", "createdAt": "2020-10-05T13:42:23Z", "author": {"login": "rishi-aga"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/security.hbs", "diffHunk": "@@ -8,10 +8,10 @@ package dynamicconfig.models;\n import com.yahoo.elide.annotation.SecurityCheck;\n import com.yahoo.elide.security.checks.prefab.Role.RoleMemberCheck;\n \n-@SecurityCheck(DynamicConfigOperationChecksPrincipalIs<%#titleCaseRemoveSpaces this%><%/titleCaseRemoveSpaces%>.PRINCIPAL_IS_<%#toUpperCase this%><%/toUpperCase%>)\n+@SecurityCheck(DynamicConfigOperationChecksPrincipalIs<%#titleCaseRemoveSpaces this%><%/titleCaseRemoveSpaces%>.PRINCIPAL_IS_<%#toUpperCaseReplaceSpace this%><%/toUpperCaseReplaceSpace%>)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTMwOTEzMA=="}, "originalCommit": {"oid": "dc1d90e13b2bbca8fcdbca27071c0e7bbd9bc601"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyMDI4OA==", "bodyText": "okie.", "url": "https://github.com/yahoo/elide/pull/1569#discussion_r499720288", "createdAt": "2020-10-05T16:21:00Z", "author": {"login": "moizarafat"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/security.hbs", "diffHunk": "@@ -8,10 +8,10 @@ package dynamicconfig.models;\n import com.yahoo.elide.annotation.SecurityCheck;\n import com.yahoo.elide.security.checks.prefab.Role.RoleMemberCheck;\n \n-@SecurityCheck(DynamicConfigOperationChecksPrincipalIs<%#titleCaseRemoveSpaces this%><%/titleCaseRemoveSpaces%>.PRINCIPAL_IS_<%#toUpperCase this%><%/toUpperCase%>)\n+@SecurityCheck(DynamicConfigOperationChecksPrincipalIs<%#titleCaseRemoveSpaces this%><%/titleCaseRemoveSpaces%>.PRINCIPAL_IS_<%#toUpperCaseReplaceSpace this%><%/toUpperCaseReplaceSpace%>)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTMwOTEzMA=="}, "originalCommit": {"oid": "dc1d90e13b2bbca8fcdbca27071c0e7bbd9bc601"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODgzMDM4OnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/integration/AggregationDataStoreDynamicSecurityIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjoxMzozNVrOHckNrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjoyODozOFrOHckyXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxNTUwMA==", "bodyText": "Typo - Hjson instead of hjosn", "url": "https://github.com/yahoo/elide/pull/1569#discussion_r499715500", "createdAt": "2020-10-05T16:13:35Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/integration/AggregationDataStoreDynamicSecurityIT.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.integration;\n+\n+import static com.yahoo.elide.core.EntityDictionary.NO_VERSION;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.ElideResponse;\n+import com.yahoo.elide.ElideSettingsBuilder;\n+import com.yahoo.elide.annotation.SecurityCheck;\n+import com.yahoo.elide.audit.TestAuditLogger;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.compile.ElideDynamicEntityCompiler;\n+import com.yahoo.elide.core.EntityDictionary;\n+import com.yahoo.elide.core.HttpStatus;\n+import com.yahoo.elide.core.datastore.test.DataStoreTestHarness;\n+import com.yahoo.elide.datastores.aggregation.framework.AggregationDataStoreTestHarness;\n+import com.yahoo.elide.initialization.IntegrationTest;\n+import com.yahoo.elide.resources.SecurityContextUser;\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.File;\n+import java.security.Principal;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.Persistence;\n+import javax.sql.DataSource;\n+import javax.ws.rs.core.MultivaluedHashMap;\n+import javax.ws.rs.core.MultivaluedMap;\n+import javax.ws.rs.core.SecurityContext;\n+\n+/**\n+ * Integration tests for Dynamic Configs with Security hjson.\n+ */\n+public class AggregationDataStoreDynamicSecurityIT extends IntegrationTest {\n+\n+    private final ElideDynamicEntityCompiler compiler =\n+                    AggregationDataStoreIntegrationTest.getCompiler(\"src/test/resources/configs_with_security_hjson\");\n+\n+    @Override\n+    protected DataStoreTestHarness createHarness() {\n+\n+        HikariConfig config = new HikariConfig(File.separator + \"jpah2db.properties\");\n+        DataSource defaultDataSource = new HikariDataSource(config);\n+        String defaultDialect = \"h2\";\n+        ConnectionDetails defaultConnectionDetails = new ConnectionDetails(defaultDataSource, defaultDialect);\n+\n+        Properties prop = new Properties();\n+        prop.put(\"javax.persistence.jdbc.driver\", config.getDriverClassName());\n+        prop.put(\"javax.persistence.jdbc.url\", config.getJdbcUrl());\n+        EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"aggregationStore\", prop);\n+\n+        Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n+        // Add connection details fetched from hjson\n+        connectionDetailsMap.putAll(compiler.getConnectionDetailsMap());\n+\n+        return new AggregationDataStoreTestHarness(emf, defaultConnectionDetails, connectionDetailsMap, compiler);\n+    }\n+\n+    @Test\n+    public void testSecurityHjosnWithAggregationModel() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2c3a5fedf9586d51c2d28405d94b4ddc83e96ad"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyNDg5Mg==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/yahoo/elide/pull/1569#discussion_r499724892", "createdAt": "2020-10-05T16:28:38Z", "author": {"login": "rishi-aga"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/integration/AggregationDataStoreDynamicSecurityIT.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.integration;\n+\n+import static com.yahoo.elide.core.EntityDictionary.NO_VERSION;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.ElideResponse;\n+import com.yahoo.elide.ElideSettingsBuilder;\n+import com.yahoo.elide.annotation.SecurityCheck;\n+import com.yahoo.elide.audit.TestAuditLogger;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.compile.ElideDynamicEntityCompiler;\n+import com.yahoo.elide.core.EntityDictionary;\n+import com.yahoo.elide.core.HttpStatus;\n+import com.yahoo.elide.core.datastore.test.DataStoreTestHarness;\n+import com.yahoo.elide.datastores.aggregation.framework.AggregationDataStoreTestHarness;\n+import com.yahoo.elide.initialization.IntegrationTest;\n+import com.yahoo.elide.resources.SecurityContextUser;\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.File;\n+import java.security.Principal;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.Persistence;\n+import javax.sql.DataSource;\n+import javax.ws.rs.core.MultivaluedHashMap;\n+import javax.ws.rs.core.MultivaluedMap;\n+import javax.ws.rs.core.SecurityContext;\n+\n+/**\n+ * Integration tests for Dynamic Configs with Security hjson.\n+ */\n+public class AggregationDataStoreDynamicSecurityIT extends IntegrationTest {\n+\n+    private final ElideDynamicEntityCompiler compiler =\n+                    AggregationDataStoreIntegrationTest.getCompiler(\"src/test/resources/configs_with_security_hjson\");\n+\n+    @Override\n+    protected DataStoreTestHarness createHarness() {\n+\n+        HikariConfig config = new HikariConfig(File.separator + \"jpah2db.properties\");\n+        DataSource defaultDataSource = new HikariDataSource(config);\n+        String defaultDialect = \"h2\";\n+        ConnectionDetails defaultConnectionDetails = new ConnectionDetails(defaultDataSource, defaultDialect);\n+\n+        Properties prop = new Properties();\n+        prop.put(\"javax.persistence.jdbc.driver\", config.getDriverClassName());\n+        prop.put(\"javax.persistence.jdbc.url\", config.getJdbcUrl());\n+        EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"aggregationStore\", prop);\n+\n+        Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n+        // Add connection details fetched from hjson\n+        connectionDetailsMap.putAll(compiler.getConnectionDetailsMap());\n+\n+        return new AggregationDataStoreTestHarness(emf, defaultConnectionDetails, connectionDetailsMap, compiler);\n+    }\n+\n+    @Test\n+    public void testSecurityHjosnWithAggregationModel() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxNTUwMA=="}, "originalCommit": {"oid": "d2c3a5fedf9586d51c2d28405d94b4ddc83e96ad"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODg3MjE3OnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/integration/AggregationDataStoreDynamicSecurityIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjoyMzo1OVrOHcknXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjoyMzo1OVrOHcknXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyMjA3Nw==", "bodyText": "Rather than testing at a lower level, you could look at TestAuthFilter and how it is used.  It might make sense to extend that in some way with a mock that can be controlled in the tests themselves.  Then you could also use Rest Assured here for more readable tests.", "url": "https://github.com/yahoo/elide/pull/1569#discussion_r499722077", "createdAt": "2020-10-05T16:23:59Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/integration/AggregationDataStoreDynamicSecurityIT.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.integration;\n+\n+import static com.yahoo.elide.core.EntityDictionary.NO_VERSION;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.ElideResponse;\n+import com.yahoo.elide.ElideSettingsBuilder;\n+import com.yahoo.elide.annotation.SecurityCheck;\n+import com.yahoo.elide.audit.TestAuditLogger;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.compile.ElideDynamicEntityCompiler;\n+import com.yahoo.elide.core.EntityDictionary;\n+import com.yahoo.elide.core.HttpStatus;\n+import com.yahoo.elide.core.datastore.test.DataStoreTestHarness;\n+import com.yahoo.elide.datastores.aggregation.framework.AggregationDataStoreTestHarness;\n+import com.yahoo.elide.initialization.IntegrationTest;\n+import com.yahoo.elide.resources.SecurityContextUser;\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.File;\n+import java.security.Principal;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.Persistence;\n+import javax.sql.DataSource;\n+import javax.ws.rs.core.MultivaluedHashMap;\n+import javax.ws.rs.core.MultivaluedMap;\n+import javax.ws.rs.core.SecurityContext;\n+\n+/**\n+ * Integration tests for Dynamic Configs with Security hjson.\n+ */\n+public class AggregationDataStoreDynamicSecurityIT extends IntegrationTest {\n+\n+    private final ElideDynamicEntityCompiler compiler =\n+                    AggregationDataStoreIntegrationTest.getCompiler(\"src/test/resources/configs_with_security_hjson\");\n+\n+    @Override\n+    protected DataStoreTestHarness createHarness() {\n+\n+        HikariConfig config = new HikariConfig(File.separator + \"jpah2db.properties\");\n+        DataSource defaultDataSource = new HikariDataSource(config);\n+        String defaultDialect = \"h2\";\n+        ConnectionDetails defaultConnectionDetails = new ConnectionDetails(defaultDataSource, defaultDialect);\n+\n+        Properties prop = new Properties();\n+        prop.put(\"javax.persistence.jdbc.driver\", config.getDriverClassName());\n+        prop.put(\"javax.persistence.jdbc.url\", config.getJdbcUrl());\n+        EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"aggregationStore\", prop);\n+\n+        Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n+        // Add connection details fetched from hjson\n+        connectionDetailsMap.putAll(compiler.getConnectionDetailsMap());\n+\n+        return new AggregationDataStoreTestHarness(emf, defaultConnectionDetails, connectionDetailsMap, compiler);\n+    }\n+\n+    @Test\n+    public void testSecurityHjosnWithAggregationModel() throws Exception {\n+\n+        SecurityContextUser operator = new SecurityContextUser(new SecurityContext() {\n+            @Override\n+            public boolean isUserInRole(String role) {\n+                switch (role) {\n+                    case \"admin\":\n+                        return false;\n+                    case \"operator\":\n+                        return true;\n+                    case \"guest user\":\n+                        return true;\n+                    default:\n+                        return false;\n+                }\n+            }\n+\n+            @Override\n+            public boolean isSecure() {\n+                return false;\n+            }\n+\n+            @Override\n+            public Principal getUserPrincipal() {\n+                return () -> \"1\";\n+            }\n+\n+            @Override\n+            public String getAuthenticationScheme() {\n+                return null;\n+            }\n+        });\n+\n+        SecurityContextUser admin = new SecurityContextUser(new SecurityContext() {\n+            @Override\n+            public boolean isUserInRole(String role) {\n+                switch (role) {\n+                    case \"admin\":\n+                        return true;\n+                    case \"operator\":\n+                        return true;\n+                    case \"guest user\":\n+                        return true;\n+                    default:\n+                        return false;\n+                }\n+            }\n+\n+            @Override\n+            public boolean isSecure() {\n+                return false;\n+            }\n+\n+            @Override\n+            public Principal getUserPrincipal() {\n+                return () -> \"1\";\n+            }\n+\n+            @Override\n+            public String getAuthenticationScheme() {\n+                return null;\n+            }\n+        });\n+\n+        EntityDictionary dictionary = new EntityDictionary(new HashMap<>());\n+        dictionary.addSecurityChecks(compiler.findAnnotatedClasses(SecurityCheck.class));\n+\n+        Elide elide = new Elide(new ElideSettingsBuilder(dataStore)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2c3a5fedf9586d51c2d28405d94b4ddc83e96ad"}, "originalPosition": 138}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 978, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}