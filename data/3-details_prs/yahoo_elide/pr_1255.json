{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MzY5OTMw", "number": 1255, "title": "in memory compilation integrated with dynamic config helpers", "bodyText": "Authored-by: Ayeswarya\nOne of the multiple PRs that will resolve #1178\nDescription\nIn-memory compiler, custom class loader for spring/hibernate to know where to look for class files.\nIntegrate the utilities developed above to first convert Variables.hjson etc to POJO and then resolve Tables Handlebar HJSON and then resolve it to POJO.\nResolve the Model Handlebar java classes using the POJOs generated in step above.\nResolve the Security Handlebar java classes using the POJOs generated from security.hjson.\nMotivation and Context\nPlease refer #1178\nHow Has This Been Tested?\nUnit tests included.\nTested the new feature with elide-spring-boot-example\nLicense\nI confirm that this contribution is made under an Apache 2.0 license and that I have the authority necessary to make this contribution on behalf of its copyright owner.", "createdAt": "2020-04-03T20:25:34Z", "url": "https://github.com/yahoo/elide/pull/1255", "merged": true, "mergeCommit": {"oid": "d4af48c33ca663f032bfa3cd27f3429901e3d6e4"}, "closed": true, "closedAt": "2020-05-15T17:58:00Z", "author": {"login": "ayeswarya"}, "timelineItems": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcU9K0yABqjMyMDQ5MzkxMzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABchlILOAFqTQxMjgxNzkzMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "778c04a2ba1431fdc619439564b56d91178b9d55", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/778c04a2ba1431fdc619439564b56d91178b9d55", "committedDate": "2020-04-06T11:26:37Z", "message": "Merge branch 'elide-5.x-dynamic-config-integration' of github.com:yahoo/elide into elide-5.x-dynamic-config-integration"}, "afterCommit": {"oid": "45ef3146dfe632a5691d2f2ec1c89c632de63901", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/45ef3146dfe632a5691d2f2ec1c89c632de63901", "committedDate": "2020-04-06T11:25:41Z", "message": "FromTable and FromSubQuery Logic"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMjUxOTg5", "url": "https://github.com/yahoo/elide/pull/1255#pullrequestreview-392251989", "createdAt": "2020-04-13T16:19:13Z", "commit": {"oid": "32ee59713155d435420784383323b88b88962b88"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNjoxOToxM1rOGEr2fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNjoxOToxM1rOGEr2fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU2NTk0OQ==", "bodyText": "you can still have it as <%measure_type%>. This way the original test case where this value is replaced from the value in variables.hjson is still valid.", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r407565949", "createdAt": "2020-04-13T16:19:13Z", "author": {"login": "moizarafat"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/test/resources/models/tables/table2.hjson", "diffHunk": "@@ -20,15 +20,15 @@\n         measures : [\n             {\n             name : highScore\n-            type : \"{{measure_type}}\"\n+            type : \"INTEGER\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32ee59713155d435420784383323b88b88962b88"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMjU0OTE3", "url": "https://github.com/yahoo/elide/pull/1255#pullrequestreview-392254917", "createdAt": "2020-04-13T16:23:49Z", "commit": {"oid": "32ee59713155d435420784383323b88b88962b88"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNjoyMzo0OVrOGEr_6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNjoyMzo0OVrOGEr_6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU2ODM2MA==", "bodyText": "Lets move the value hibernate.hbm2ddl.auto to a static final var", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r407568360", "createdAt": "2020-04-13T16:23:49Z", "author": {"login": "moizarafat"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideDynamicConfiguration.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.spring.config;\n+\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromSubquery;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+import com.yahoo.elide.spring.dynamic.compile.ElideDynamicEntityCompiler;\n+import com.yahoo.elide.spring.dynamic.compile.ElideDynamicPersistenceUnit;\n+import com.yahoo.elide.utils.ClassScanner;\n+\n+import org.hibernate.cfg.AvailableSettings;\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n+import org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties;\n+import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n+import org.springframework.orm.jpa.persistenceunit.PersistenceUnitManager;\n+import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.spi.PersistenceUnitInfo;\n+import javax.sql.DataSource;\n+\n+/**\n+ * Dynamic Configuration For Elide Services. Override any of the beans (by\n+ * defining your own) and setting flags to disable in properties to change the\n+ * default behavior.\n+ */\n+\n+@Slf4j\n+@Configuration\n+@EnableConfigurationProperties(ElideConfigProperties.class)\n+@ConditionalOnExpression(\"${elide.dynamic-config.enabled:false}\")\n+public class ElideDynamicConfiguration {\n+\n+    @Bean\n+    public LocalContainerEntityManagerFactoryBean entityManagerFactory (EntityManagerFactoryBuilder builder,\n+            DataSource source, JpaProperties jpaProperties, HibernateProperties hibernateProperties,\n+            ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler, ElideConfigProperties configProperties) {\n+\n+        try {\n+\n+            //Map for Persistent Unit properties\n+            Map<String, Object> puiPropertyMap = new HashMap<>();\n+\n+            //Bind entity classes from classpath to Persistence Unit\n+            ArrayList<Class> bindClasses = new ArrayList<>();\n+            bindClasses.addAll(ClassScanner.getAnnotatedClasses(Entity.class));\n+\n+            //Bind FromTable/FromSubSelect classes from classpath to Persistence Unit\n+            bindClasses.addAll(ClassScanner.getAnnotatedClasses(FromTable.class));\n+            bindClasses.addAll(ClassScanner.getAnnotatedClasses(FromSubquery.class));\n+\n+            //Map of JPA Properties to be be passed to EntityManager\n+            Map<String, String> jpaPropMap = jpaProperties.getProperties();\n+            String hibernateGetDDLAuto = hibernateProperties.getDdlAuto();\n+\n+            //Set the relevant property in JPA corresponding to Hibernate Property Value\n+            if (jpaPropMap.get(\"hibernate.hbm2ddl.auto\") == null && hibernateGetDDLAuto != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32ee59713155d435420784383323b88b88962b88"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMjU2NjMy", "url": "https://github.com/yahoo/elide/pull/1255#pullrequestreview-392256632", "createdAt": "2020-04-13T16:26:23Z", "commit": {"oid": "32ee59713155d435420784383323b88b88962b88"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNjoyNjoyM1rOGEsFWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNjoyNjoyM1rOGEsFWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU2OTc1NA==", "bodyText": "Since this statement is common for all test cases, we can move it up at class level.", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r407569754", "createdAt": "2020-04-13T16:26:23Z", "author": {"login": "moizarafat"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/test/java/com/yahoo/elide/spring/tests/DynamicConfigTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.spring.tests;\n+\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.attr;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.attributes;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.data;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.datum;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.id;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.resource;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.type;\n+import static io.restassured.RestAssured.given;\n+import static io.restassured.RestAssured.when;\n+import static org.hamcrest.CoreMatchers.hasItems;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+\n+import com.yahoo.elide.core.HttpStatus;\n+import com.yahoo.elide.spring.controllers.JsonApiController;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.test.context.jdbc.Sql;\n+import org.springframework.test.context.jdbc.SqlMergeMode;\n+\n+/**\n+ * Example functional test.\n+ */\n+\n+public class DynamicConfigTest extends IntegrationTest {\n+    /**\n+     * This test demonstrates an example test using the JSON-API DSL.\n+     * @throws InterruptedException\n+     */\n+\n+    @SqlMergeMode(SqlMergeMode.MergeMode.MERGE)\n+    @Sql(executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD,\n+            statements = \"INSERT INTO PlayerStats (name,countryId,createdOn) VALUES\\n\"\n+                    + \"\\t\\t('SerenaWilliams','1','2000-10-01');\"\n+                    + \"INSERT INTO PlayerCountry (id,isoCode) VALUES\\n\"\n+                    + \"\\t\\t('1','USA');\")\n+    @Sql(executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD,\n+            statements = \"DELETE FROM PlayerStats; DELETE FROM PlayerCountry;\")\n+    @Test\n+    public void jsonApiGetTestView() throws InterruptedException {\n+        when()\n+                .get(\"/json/PlayerStatsView\")\n+                .then()\n+                .body(equalTo(\n+                        data(\n+                                resource(\n+                                        type(\"PlayerStatsView\"),\n+                                        id(\"0\"),\n+                                        attributes(\n+                                                attr(\"countryCode\", \"USA\"),\n+                                                attr(\"createdOn\", \"2000-10-01T04:00Z\"),\n+                                                attr(\"highScore\", null),\n+                                                attr(\"name\", \"SerenaWilliams\")\n+                                        )\n+                                )\n+                        ).toJSON())\n+                )\n+                .statusCode(HttpStatus.SC_OK);\n+    }\n+    @SqlMergeMode(SqlMergeMode.MergeMode.MERGE)\n+    @Sql(executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD,\n+            statements = \"INSERT INTO PlayerStats (name,countryId,createdOn) VALUES\\n\"\n+                    + \"\\t\\t('SerenaWilliams','1','2000-10-01');\"\n+                    + \"INSERT INTO PlayerCountry (id,isoCode) VALUES\\n\"\n+                    + \"\\t\\t('1','USA');\")\n+    @Sql(executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD,\n+            statements = \"DELETE FROM PlayerStats; DELETE FROM PlayerCountry;\")\n+    @Test\n+    public void jsonApiPostTestView() {\n+        given()\n+                .contentType(JsonApiController.JSON_API_CONTENT_TYPE)\n+                .body(\n+                        datum(\n+                                resource(\n+                                        type(\"playerStats\"),\n+                                        id(\"SaniaMirza\"),\n+                                        attributes(\n+                                                attr(\"countryId\", \"1\"),\n+                                                attr(\"createdOn\", \"2002-03-01T04:00Z\"),\n+                                                attr(\"highScore\", null)\n+                                        )\n+                                )\n+                        )\n+                )\n+                .when()\n+                .post(\"/json/playerStats\")\n+                .then()\n+                .body(equalTo(datum(\n+                        resource(\n+                                type(\"playerStats\"),\n+                                id(\"SaniaMirza\"),\n+                                attributes(\n+                                        attr(\"countryId\", \"1\"),\n+                                        attr(\"createdOn\", \"2002-03-01T04:00Z\"),\n+                                        attr(\"highScore\", null)\n+                                )\n+                        )\n+                ).toJSON()))\n+                .statusCode(HttpStatus.SC_CREATED);\n+    }\n+    @SqlMergeMode(SqlMergeMode.MergeMode.MERGE)\n+    @Sql(executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD,\n+            statements = \"INSERT INTO PlayerStats (name,countryId,createdOn) VALUES\\n\"\n+                    + \"\\t\\t('SaniaMirza','2','2000-10-01');\"\n+                    + \"INSERT INTO PlayerStats (name,countryId,createdOn) VALUES\\n\"\n+                    + \"\\t\\t('SerenaWilliams','1','2000-10-01');\"\n+                    + \"INSERT INTO PlayerCountry (id,isoCode) VALUES\\n\"\n+                    + \"\\t\\t('2','IND');\"\n+                    + \"INSERT INTO PlayerCountry (id,isoCode) VALUES\\n\"\n+                    + \"\\t\\t('1','USA');\")\n+    @Sql(executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32ee59713155d435420784383323b88b88962b88"}, "originalPosition": 117}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMjU2Nzk3", "url": "https://github.com/yahoo/elide/pull/1255#pullrequestreview-392256797", "createdAt": "2020-04-13T16:26:38Z", "commit": {"oid": "32ee59713155d435420784383323b88b88962b88"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNjoyNjozOFrOGEsF4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNjoyNjozOFrOGEsF4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU2OTg4OA==", "bodyText": "Since this statement is common for all test cases, we can move it up at class level.", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r407569888", "createdAt": "2020-04-13T16:26:38Z", "author": {"login": "moizarafat"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/test/java/com/yahoo/elide/spring/tests/DynamicConfigTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.spring.tests;\n+\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.attr;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.attributes;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.data;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.datum;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.id;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.resource;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.type;\n+import static io.restassured.RestAssured.given;\n+import static io.restassured.RestAssured.when;\n+import static org.hamcrest.CoreMatchers.hasItems;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+\n+import com.yahoo.elide.core.HttpStatus;\n+import com.yahoo.elide.spring.controllers.JsonApiController;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.test.context.jdbc.Sql;\n+import org.springframework.test.context.jdbc.SqlMergeMode;\n+\n+/**\n+ * Example functional test.\n+ */\n+\n+public class DynamicConfigTest extends IntegrationTest {\n+    /**\n+     * This test demonstrates an example test using the JSON-API DSL.\n+     * @throws InterruptedException\n+     */\n+\n+    @SqlMergeMode(SqlMergeMode.MergeMode.MERGE)\n+    @Sql(executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD,\n+            statements = \"INSERT INTO PlayerStats (name,countryId,createdOn) VALUES\\n\"\n+                    + \"\\t\\t('SerenaWilliams','1','2000-10-01');\"\n+                    + \"INSERT INTO PlayerCountry (id,isoCode) VALUES\\n\"\n+                    + \"\\t\\t('1','USA');\")\n+    @Sql(executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD,\n+            statements = \"DELETE FROM PlayerStats; DELETE FROM PlayerCountry;\")\n+    @Test\n+    public void jsonApiGetTestView() throws InterruptedException {\n+        when()\n+                .get(\"/json/PlayerStatsView\")\n+                .then()\n+                .body(equalTo(\n+                        data(\n+                                resource(\n+                                        type(\"PlayerStatsView\"),\n+                                        id(\"0\"),\n+                                        attributes(\n+                                                attr(\"countryCode\", \"USA\"),\n+                                                attr(\"createdOn\", \"2000-10-01T04:00Z\"),\n+                                                attr(\"highScore\", null),\n+                                                attr(\"name\", \"SerenaWilliams\")\n+                                        )\n+                                )\n+                        ).toJSON())\n+                )\n+                .statusCode(HttpStatus.SC_OK);\n+    }\n+    @SqlMergeMode(SqlMergeMode.MergeMode.MERGE)\n+    @Sql(executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD,\n+            statements = \"INSERT INTO PlayerStats (name,countryId,createdOn) VALUES\\n\"\n+                    + \"\\t\\t('SerenaWilliams','1','2000-10-01');\"\n+                    + \"INSERT INTO PlayerCountry (id,isoCode) VALUES\\n\"\n+                    + \"\\t\\t('1','USA');\")\n+    @Sql(executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD,\n+            statements = \"DELETE FROM PlayerStats; DELETE FROM PlayerCountry;\")\n+    @Test\n+    public void jsonApiPostTestView() {\n+        given()\n+                .contentType(JsonApiController.JSON_API_CONTENT_TYPE)\n+                .body(\n+                        datum(\n+                                resource(\n+                                        type(\"playerStats\"),\n+                                        id(\"SaniaMirza\"),\n+                                        attributes(\n+                                                attr(\"countryId\", \"1\"),\n+                                                attr(\"createdOn\", \"2002-03-01T04:00Z\"),\n+                                                attr(\"highScore\", null)\n+                                        )\n+                                )\n+                        )\n+                )\n+                .when()\n+                .post(\"/json/playerStats\")\n+                .then()\n+                .body(equalTo(datum(\n+                        resource(\n+                                type(\"playerStats\"),\n+                                id(\"SaniaMirza\"),\n+                                attributes(\n+                                        attr(\"countryId\", \"1\"),\n+                                        attr(\"createdOn\", \"2002-03-01T04:00Z\"),\n+                                        attr(\"highScore\", null)\n+                                )\n+                        )\n+                ).toJSON()))\n+                .statusCode(HttpStatus.SC_CREATED);\n+    }\n+    @SqlMergeMode(SqlMergeMode.MergeMode.MERGE)\n+    @Sql(executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD,\n+            statements = \"INSERT INTO PlayerStats (name,countryId,createdOn) VALUES\\n\"\n+                    + \"\\t\\t('SaniaMirza','2','2000-10-01');\"\n+                    + \"INSERT INTO PlayerStats (name,countryId,createdOn) VALUES\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32ee59713155d435420784383323b88b88962b88"}, "originalPosition": 111}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMjU2ODcz", "url": "https://github.com/yahoo/elide/pull/1255#pullrequestreview-392256873", "createdAt": "2020-04-13T16:26:44Z", "commit": {"oid": "32ee59713155d435420784383323b88b88962b88"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNjoyNjo0NFrOGEsGHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNjoyNjo0NFrOGEsGHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU2OTk0OA==", "bodyText": "Since this statement is common for all test cases, we can move it up at class level.", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r407569948", "createdAt": "2020-04-13T16:26:44Z", "author": {"login": "moizarafat"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/test/java/com/yahoo/elide/spring/tests/DynamicConfigTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.spring.tests;\n+\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.attr;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.attributes;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.data;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.datum;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.id;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.resource;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.type;\n+import static io.restassured.RestAssured.given;\n+import static io.restassured.RestAssured.when;\n+import static org.hamcrest.CoreMatchers.hasItems;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+\n+import com.yahoo.elide.core.HttpStatus;\n+import com.yahoo.elide.spring.controllers.JsonApiController;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.test.context.jdbc.Sql;\n+import org.springframework.test.context.jdbc.SqlMergeMode;\n+\n+/**\n+ * Example functional test.\n+ */\n+\n+public class DynamicConfigTest extends IntegrationTest {\n+    /**\n+     * This test demonstrates an example test using the JSON-API DSL.\n+     * @throws InterruptedException\n+     */\n+\n+    @SqlMergeMode(SqlMergeMode.MergeMode.MERGE)\n+    @Sql(executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD,\n+            statements = \"INSERT INTO PlayerStats (name,countryId,createdOn) VALUES\\n\"\n+                    + \"\\t\\t('SerenaWilliams','1','2000-10-01');\"\n+                    + \"INSERT INTO PlayerCountry (id,isoCode) VALUES\\n\"\n+                    + \"\\t\\t('1','USA');\")\n+    @Sql(executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD,\n+            statements = \"DELETE FROM PlayerStats; DELETE FROM PlayerCountry;\")\n+    @Test\n+    public void jsonApiGetTestView() throws InterruptedException {\n+        when()\n+                .get(\"/json/PlayerStatsView\")\n+                .then()\n+                .body(equalTo(\n+                        data(\n+                                resource(\n+                                        type(\"PlayerStatsView\"),\n+                                        id(\"0\"),\n+                                        attributes(\n+                                                attr(\"countryCode\", \"USA\"),\n+                                                attr(\"createdOn\", \"2000-10-01T04:00Z\"),\n+                                                attr(\"highScore\", null),\n+                                                attr(\"name\", \"SerenaWilliams\")\n+                                        )\n+                                )\n+                        ).toJSON())\n+                )\n+                .statusCode(HttpStatus.SC_OK);\n+    }\n+    @SqlMergeMode(SqlMergeMode.MergeMode.MERGE)\n+    @Sql(executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD,\n+            statements = \"INSERT INTO PlayerStats (name,countryId,createdOn) VALUES\\n\"\n+                    + \"\\t\\t('SerenaWilliams','1','2000-10-01');\"\n+                    + \"INSERT INTO PlayerCountry (id,isoCode) VALUES\\n\"\n+                    + \"\\t\\t('1','USA');\")\n+    @Sql(executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD,\n+            statements = \"DELETE FROM PlayerStats; DELETE FROM PlayerCountry;\")\n+    @Test\n+    public void jsonApiPostTestView() {\n+        given()\n+                .contentType(JsonApiController.JSON_API_CONTENT_TYPE)\n+                .body(\n+                        datum(\n+                                resource(\n+                                        type(\"playerStats\"),\n+                                        id(\"SaniaMirza\"),\n+                                        attributes(\n+                                                attr(\"countryId\", \"1\"),\n+                                                attr(\"createdOn\", \"2002-03-01T04:00Z\"),\n+                                                attr(\"highScore\", null)\n+                                        )\n+                                )\n+                        )\n+                )\n+                .when()\n+                .post(\"/json/playerStats\")\n+                .then()\n+                .body(equalTo(datum(\n+                        resource(\n+                                type(\"playerStats\"),\n+                                id(\"SaniaMirza\"),\n+                                attributes(\n+                                        attr(\"countryId\", \"1\"),\n+                                        attr(\"createdOn\", \"2002-03-01T04:00Z\"),\n+                                        attr(\"highScore\", null)\n+                                )\n+                        )\n+                ).toJSON()))\n+                .statusCode(HttpStatus.SC_CREATED);\n+    }\n+    @SqlMergeMode(SqlMergeMode.MergeMode.MERGE)\n+    @Sql(executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD,\n+            statements = \"INSERT INTO PlayerStats (name,countryId,createdOn) VALUES\\n\"\n+                    + \"\\t\\t('SaniaMirza','2','2000-10-01');\"\n+                    + \"INSERT INTO PlayerStats (name,countryId,createdOn) VALUES\\n\"\n+                    + \"\\t\\t('SerenaWilliams','1','2000-10-01');\"\n+                    + \"INSERT INTO PlayerCountry (id,isoCode) VALUES\\n\"\n+                    + \"\\t\\t('2','IND');\"\n+                    + \"INSERT INTO PlayerCountry (id,isoCode) VALUES\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32ee59713155d435420784383323b88b88962b88"}, "originalPosition": 115}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMjU3MjI2", "url": "https://github.com/yahoo/elide/pull/1255#pullrequestreview-392257226", "createdAt": "2020-04-13T16:27:16Z", "commit": {"oid": "32ee59713155d435420784383323b88b88962b88"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNjoyNzoxNlrOGEsHXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNjoyNzoxNlrOGEsHXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU3MDI2OQ==", "bodyText": "Please remove extra line.", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r407570269", "createdAt": "2020-04-13T16:27:16Z", "author": {"login": "moizarafat"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/test/java/com/yahoo/elide/spring/tests/IntegrationTest.java", "diffHunk": "@@ -10,6 +10,7 @@\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.boot.web.server.LocalServerPort;\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32ee59713155d435420784383323b88b88962b88"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMjcyMzkw", "url": "https://github.com/yahoo/elide/pull/1255#pullrequestreview-392272390", "createdAt": "2020-04-13T16:50:22Z", "commit": {"oid": "32ee59713155d435420784383323b88b88962b88"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNjo1MDoyMlrOGEs5LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNjo1MDoyMlrOGEs5LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU4MzAyMQ==", "bodyText": "Please add Javadoc for the class.", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r407583021", "createdAt": "2020-04-13T16:50:22Z", "author": {"login": "moizarafat"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/dynamic/compile/ElideDynamicInMemoryClassLoader.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.spring.dynamic.compile;\n+\n+import com.google.common.collect.Sets;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.Set;\n+\n+@Slf4j\n+@Data\n+@AllArgsConstructor\n+public class ElideDynamicInMemoryClassLoader extends ClassLoader {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32ee59713155d435420784383323b88b88962b88"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMjcyNDU5", "url": "https://github.com/yahoo/elide/pull/1255#pullrequestreview-392272459", "createdAt": "2020-04-13T16:50:30Z", "commit": {"oid": "32ee59713155d435420784383323b88b88962b88"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNjo1MDozMFrOGEs5YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNjo1MDozMFrOGEs5YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU4MzA3Mg==", "bodyText": "Please add Javadoc for the class.", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r407583072", "createdAt": "2020-04-13T16:50:30Z", "author": {"login": "moizarafat"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/dynamic/compile/ElideDynamicPersistenceUnit.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.spring.dynamic.compile;\n+\n+import lombok.Data;\n+\n+import java.net.URL;\n+import java.util.List;\n+import java.util.Properties;\n+\n+import javax.persistence.SharedCacheMode;\n+import javax.persistence.ValidationMode;\n+import javax.persistence.spi.ClassTransformer;\n+import javax.persistence.spi.PersistenceUnitInfo;\n+import javax.persistence.spi.PersistenceUnitTransactionType;\n+import javax.sql.DataSource;\n+\n+@Data\n+public class ElideDynamicPersistenceUnit implements PersistenceUnitInfo {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32ee59713155d435420784383323b88b88962b88"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMjcyNjAy", "url": "https://github.com/yahoo/elide/pull/1255#pullrequestreview-392272602", "createdAt": "2020-04-13T16:50:41Z", "commit": {"oid": "32ee59713155d435420784383323b88b88962b88"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNjo1MDo0MlrOGEs50A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNjo1MDo0MlrOGEs50A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU4MzE4NA==", "bodyText": "Please add Javadoc for the class.", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r407583184", "createdAt": "2020-04-13T16:50:42Z", "author": {"login": "moizarafat"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/dynamic/compile/ElideDynamicEntityCompiler.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.spring.dynamic.compile;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideSecurityConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideTableConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.parser.ElideConfigParser;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.parser.handlebars.HandlebarsHydrator;\n+import com.google.common.collect.Sets;\n+\n+import org.mdkt.compiler.InMemoryJavaCompiler;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+@Slf4j\n+public class ElideDynamicEntityCompiler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32ee59713155d435420784383323b88b88962b88"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMjczMjUw", "url": "https://github.com/yahoo/elide/pull/1255#pullrequestreview-392273250", "createdAt": "2020-04-13T16:51:39Z", "commit": {"oid": "32ee59713155d435420784383323b88b88962b88"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNjo1MTozOVrOGEs7xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNjo1MTozOVrOGEs7xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU4MzY4NQ==", "bodyText": "Please add Javadoc for the method.", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r407583685", "createdAt": "2020-04-13T16:51:39Z", "author": {"login": "moizarafat"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideDynamicConfiguration.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.spring.config;\n+\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromSubquery;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+import com.yahoo.elide.spring.dynamic.compile.ElideDynamicEntityCompiler;\n+import com.yahoo.elide.spring.dynamic.compile.ElideDynamicPersistenceUnit;\n+import com.yahoo.elide.utils.ClassScanner;\n+\n+import org.hibernate.cfg.AvailableSettings;\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n+import org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties;\n+import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n+import org.springframework.orm.jpa.persistenceunit.PersistenceUnitManager;\n+import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.spi.PersistenceUnitInfo;\n+import javax.sql.DataSource;\n+\n+/**\n+ * Dynamic Configuration For Elide Services. Override any of the beans (by\n+ * defining your own) and setting flags to disable in properties to change the\n+ * default behavior.\n+ */\n+\n+@Slf4j\n+@Configuration\n+@EnableConfigurationProperties(ElideConfigProperties.class)\n+@ConditionalOnExpression(\"${elide.dynamic-config.enabled:false}\")\n+public class ElideDynamicConfiguration {\n+\n+    @Bean\n+    public LocalContainerEntityManagerFactoryBean entityManagerFactory (EntityManagerFactoryBuilder builder,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32ee59713155d435420784383323b88b88962b88"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2NDk5NDQ3", "url": "https://github.com/yahoo/elide/pull/1255#pullrequestreview-396499447", "createdAt": "2020-04-20T14:20:09Z", "commit": {"oid": "2d6436d07b3818aa897f401a7f8cd9a9b6e97440"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDoyMDowOVrOGIW7eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDo0ODozNFrOGIYTWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQxNzQ2Ng==", "bodyText": "There are a lot of hibernate properties we will likely want to preserve beyond just the DDL_AUTO - batch settings, fetch modes, connection pool settings, etc.  Can we just take the entire map of hibernate properties and use them all?", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r411417466", "createdAt": "2020-04-20T14:20:09Z", "author": {"login": "aklish"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideDynamicConfiguration.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.spring.config;\n+\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromSubquery;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+import com.yahoo.elide.spring.dynamic.compile.ElideDynamicEntityCompiler;\n+import com.yahoo.elide.spring.dynamic.compile.ElideDynamicPersistenceUnit;\n+import com.yahoo.elide.utils.ClassScanner;\n+\n+import org.hibernate.cfg.AvailableSettings;\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n+import org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties;\n+import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n+import org.springframework.orm.jpa.persistenceunit.PersistenceUnitManager;\n+import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.spi.PersistenceUnitInfo;\n+import javax.sql.DataSource;\n+\n+/**\n+ * Dynamic Configuration For Elide Services. Override any of the beans (by\n+ * defining your own) and setting flags to disable in properties to change the\n+ * default behavior.\n+ */\n+\n+@Slf4j\n+@Configuration\n+@EnableConfigurationProperties(ElideConfigProperties.class)\n+@ConditionalOnExpression(\"${elide.dynamic-config.enabled:false}\")\n+public class ElideDynamicConfiguration {\n+\n+    public static final String HIBERNATE_DDL_AUTO = \"hibernate.hbm2ddl.auto\";\n+\n+    /**\n+     * Configure factory bean to create EntityManagerFactory for Dynamic Configuration.\n+     * @param source :DataSource for JPA\n+     * @param jpaProperties : JPA Config Properties\n+     * @param hibernateProperties : Hibernate Config Properties\n+     * @param dynamicCompiler : ElideDynamicEntityCompiler\n+     * @return LocalContainerEntityManagerFactoryBean bean\n+     */\n+    @Bean\n+    public LocalContainerEntityManagerFactoryBean entityManagerFactory (\n+            DataSource source,\n+            JpaProperties jpaProperties,\n+            HibernateProperties hibernateProperties,\n+            ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler) {\n+\n+        try {\n+\n+            //Map for Persistent Unit properties\n+            Map<String, Object> puiPropertyMap = new HashMap<>();\n+\n+            //Bind entity classes from classpath to Persistence Unit\n+            ArrayList<Class> bindClasses = new ArrayList<>();\n+            bindClasses.addAll(ClassScanner.getAnnotatedClasses(Entity.class));\n+\n+            //Bind FromTable/FromSubSelect classes from classpath to Persistence Unit\n+            bindClasses.addAll(ClassScanner.getAnnotatedClasses(FromTable.class));\n+            bindClasses.addAll(ClassScanner.getAnnotatedClasses(FromSubquery.class));\n+\n+            //Map of JPA Properties to be be passed to EntityManager\n+            Map<String, String> jpaPropMap = jpaProperties.getProperties();\n+            String hibernateGetDDLAuto = hibernateProperties.getDdlAuto();\n+\n+            //Set the relevant property in JPA corresponding to Hibernate Property Value\n+            if (jpaPropMap.get(HIBERNATE_DDL_AUTO) == null && hibernateGetDDLAuto != null) {\n+               jpaPropMap.put(HIBERNATE_DDL_AUTO, hibernateGetDDLAuto);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d6436d07b3818aa897f401a7f8cd9a9b6e97440"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQxOTEyOA==", "bodyText": "Does this overwrite the previous or extend it?", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r411419128", "createdAt": "2020-04-20T14:22:10Z", "author": {"login": "aklish"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideDynamicConfiguration.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.spring.config;\n+\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromSubquery;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+import com.yahoo.elide.spring.dynamic.compile.ElideDynamicEntityCompiler;\n+import com.yahoo.elide.spring.dynamic.compile.ElideDynamicPersistenceUnit;\n+import com.yahoo.elide.utils.ClassScanner;\n+\n+import org.hibernate.cfg.AvailableSettings;\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n+import org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties;\n+import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n+import org.springframework.orm.jpa.persistenceunit.PersistenceUnitManager;\n+import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.spi.PersistenceUnitInfo;\n+import javax.sql.DataSource;\n+\n+/**\n+ * Dynamic Configuration For Elide Services. Override any of the beans (by\n+ * defining your own) and setting flags to disable in properties to change the\n+ * default behavior.\n+ */\n+\n+@Slf4j\n+@Configuration\n+@EnableConfigurationProperties(ElideConfigProperties.class)\n+@ConditionalOnExpression(\"${elide.dynamic-config.enabled:false}\")\n+public class ElideDynamicConfiguration {\n+\n+    public static final String HIBERNATE_DDL_AUTO = \"hibernate.hbm2ddl.auto\";\n+\n+    /**\n+     * Configure factory bean to create EntityManagerFactory for Dynamic Configuration.\n+     * @param source :DataSource for JPA\n+     * @param jpaProperties : JPA Config Properties\n+     * @param hibernateProperties : Hibernate Config Properties\n+     * @param dynamicCompiler : ElideDynamicEntityCompiler\n+     * @return LocalContainerEntityManagerFactoryBean bean\n+     */\n+    @Bean\n+    public LocalContainerEntityManagerFactoryBean entityManagerFactory (\n+            DataSource source,\n+            JpaProperties jpaProperties,\n+            HibernateProperties hibernateProperties,\n+            ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler) {\n+\n+        try {\n+\n+            //Map for Persistent Unit properties\n+            Map<String, Object> puiPropertyMap = new HashMap<>();\n+\n+            //Bind entity classes from classpath to Persistence Unit\n+            ArrayList<Class> bindClasses = new ArrayList<>();\n+            bindClasses.addAll(ClassScanner.getAnnotatedClasses(Entity.class));\n+\n+            //Bind FromTable/FromSubSelect classes from classpath to Persistence Unit\n+            bindClasses.addAll(ClassScanner.getAnnotatedClasses(FromTable.class));\n+            bindClasses.addAll(ClassScanner.getAnnotatedClasses(FromSubquery.class));\n+\n+            //Map of JPA Properties to be be passed to EntityManager\n+            Map<String, String> jpaPropMap = jpaProperties.getProperties();\n+            String hibernateGetDDLAuto = hibernateProperties.getDdlAuto();\n+\n+            //Set the relevant property in JPA corresponding to Hibernate Property Value\n+            if (jpaPropMap.get(HIBERNATE_DDL_AUTO) == null && hibernateGetDDLAuto != null) {\n+               jpaPropMap.put(HIBERNATE_DDL_AUTO, hibernateGetDDLAuto);\n+             }\n+\n+            ElideDynamicEntityCompiler compiler = dynamicCompiler.getIfAvailable();\n+\n+            Collection<ClassLoader> classLoaders = new ArrayList<>();\n+            classLoaders.add(compiler.getClassLoader());\n+\n+            //Add dynamic classes to Pui Map\n+            puiPropertyMap.put(AvailableSettings.CLASSLOADERS, classLoaders);\n+            //Add classpath entity model classes to Pui Map\n+            puiPropertyMap.put(AvailableSettings.LOADED_CLASSES, bindClasses);\n+\n+            //pui properties from pui map\n+            Properties puiProps = new Properties();\n+            puiProps.putAll(puiPropertyMap);\n+\n+            //Create Elide dynamic Persistence Unit\n+            ElideDynamicPersistenceUnit elideDynamicPersistenceUnit =\n+                    new ElideDynamicPersistenceUnit(\"dynamic\", compiler.classNames, puiProps,\n+                    compiler.getClassLoader());\n+            elideDynamicPersistenceUnit.setNonJtaDataSource(source);\n+            elideDynamicPersistenceUnit.setJtaDataSource(source);\n+\n+            HibernateJpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();\n+            vendorAdapter.setShowSql(jpaProperties.isShowSql());\n+            vendorAdapter.setGenerateDdl(jpaProperties.isGenerateDdl());\n+            if (jpaProperties.getDatabase() != null) {\n+                vendorAdapter.setDatabase(jpaProperties.getDatabase());\n+            }\n+            if (jpaProperties.getDatabasePlatform() != null) {\n+                vendorAdapter.setDatabasePlatform(jpaProperties.getDatabasePlatform());\n+            }\n+\n+            LocalContainerEntityManagerFactoryBean bean = new LocalContainerEntityManagerFactoryBean();\n+            bean.setJpaVendorAdapter(vendorAdapter);\n+\n+            //Add JPA Properties from Application.yaml\n+            bean.setJpaPropertyMap(jpaPropMap);\n+\n+            //Add Classes\n+            bean.setJpaPropertyMap(puiPropertyMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d6436d07b3818aa897f401a7f8cd9a9b6e97440"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyMDA1Nw==", "bodyText": "Two things - let's not catch Exception here (it is too broad).  Also, if there is an error, we'll want to bring down the service.  Let the exceptions propagate.", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r411420057", "createdAt": "2020-04-20T14:23:19Z", "author": {"login": "aklish"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideDynamicConfiguration.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.spring.config;\n+\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromSubquery;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+import com.yahoo.elide.spring.dynamic.compile.ElideDynamicEntityCompiler;\n+import com.yahoo.elide.spring.dynamic.compile.ElideDynamicPersistenceUnit;\n+import com.yahoo.elide.utils.ClassScanner;\n+\n+import org.hibernate.cfg.AvailableSettings;\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n+import org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties;\n+import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n+import org.springframework.orm.jpa.persistenceunit.PersistenceUnitManager;\n+import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.spi.PersistenceUnitInfo;\n+import javax.sql.DataSource;\n+\n+/**\n+ * Dynamic Configuration For Elide Services. Override any of the beans (by\n+ * defining your own) and setting flags to disable in properties to change the\n+ * default behavior.\n+ */\n+\n+@Slf4j\n+@Configuration\n+@EnableConfigurationProperties(ElideConfigProperties.class)\n+@ConditionalOnExpression(\"${elide.dynamic-config.enabled:false}\")\n+public class ElideDynamicConfiguration {\n+\n+    public static final String HIBERNATE_DDL_AUTO = \"hibernate.hbm2ddl.auto\";\n+\n+    /**\n+     * Configure factory bean to create EntityManagerFactory for Dynamic Configuration.\n+     * @param source :DataSource for JPA\n+     * @param jpaProperties : JPA Config Properties\n+     * @param hibernateProperties : Hibernate Config Properties\n+     * @param dynamicCompiler : ElideDynamicEntityCompiler\n+     * @return LocalContainerEntityManagerFactoryBean bean\n+     */\n+    @Bean\n+    public LocalContainerEntityManagerFactoryBean entityManagerFactory (\n+            DataSource source,\n+            JpaProperties jpaProperties,\n+            HibernateProperties hibernateProperties,\n+            ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler) {\n+\n+        try {\n+\n+            //Map for Persistent Unit properties\n+            Map<String, Object> puiPropertyMap = new HashMap<>();\n+\n+            //Bind entity classes from classpath to Persistence Unit\n+            ArrayList<Class> bindClasses = new ArrayList<>();\n+            bindClasses.addAll(ClassScanner.getAnnotatedClasses(Entity.class));\n+\n+            //Bind FromTable/FromSubSelect classes from classpath to Persistence Unit\n+            bindClasses.addAll(ClassScanner.getAnnotatedClasses(FromTable.class));\n+            bindClasses.addAll(ClassScanner.getAnnotatedClasses(FromSubquery.class));\n+\n+            //Map of JPA Properties to be be passed to EntityManager\n+            Map<String, String> jpaPropMap = jpaProperties.getProperties();\n+            String hibernateGetDDLAuto = hibernateProperties.getDdlAuto();\n+\n+            //Set the relevant property in JPA corresponding to Hibernate Property Value\n+            if (jpaPropMap.get(HIBERNATE_DDL_AUTO) == null && hibernateGetDDLAuto != null) {\n+               jpaPropMap.put(HIBERNATE_DDL_AUTO, hibernateGetDDLAuto);\n+             }\n+\n+            ElideDynamicEntityCompiler compiler = dynamicCompiler.getIfAvailable();\n+\n+            Collection<ClassLoader> classLoaders = new ArrayList<>();\n+            classLoaders.add(compiler.getClassLoader());\n+\n+            //Add dynamic classes to Pui Map\n+            puiPropertyMap.put(AvailableSettings.CLASSLOADERS, classLoaders);\n+            //Add classpath entity model classes to Pui Map\n+            puiPropertyMap.put(AvailableSettings.LOADED_CLASSES, bindClasses);\n+\n+            //pui properties from pui map\n+            Properties puiProps = new Properties();\n+            puiProps.putAll(puiPropertyMap);\n+\n+            //Create Elide dynamic Persistence Unit\n+            ElideDynamicPersistenceUnit elideDynamicPersistenceUnit =\n+                    new ElideDynamicPersistenceUnit(\"dynamic\", compiler.classNames, puiProps,\n+                    compiler.getClassLoader());\n+            elideDynamicPersistenceUnit.setNonJtaDataSource(source);\n+            elideDynamicPersistenceUnit.setJtaDataSource(source);\n+\n+            HibernateJpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();\n+            vendorAdapter.setShowSql(jpaProperties.isShowSql());\n+            vendorAdapter.setGenerateDdl(jpaProperties.isGenerateDdl());\n+            if (jpaProperties.getDatabase() != null) {\n+                vendorAdapter.setDatabase(jpaProperties.getDatabase());\n+            }\n+            if (jpaProperties.getDatabasePlatform() != null) {\n+                vendorAdapter.setDatabasePlatform(jpaProperties.getDatabasePlatform());\n+            }\n+\n+            LocalContainerEntityManagerFactoryBean bean = new LocalContainerEntityManagerFactoryBean();\n+            bean.setJpaVendorAdapter(vendorAdapter);\n+\n+            //Add JPA Properties from Application.yaml\n+            bean.setJpaPropertyMap(jpaPropMap);\n+\n+            //Add Classes\n+            bean.setJpaPropertyMap(puiPropertyMap);\n+\n+            bean.setPersistenceUnitManager(new PersistenceUnitManager() {\n+                @Override\n+                public PersistenceUnitInfo obtainDefaultPersistenceUnitInfo() throws IllegalStateException {\n+                    return elideDynamicPersistenceUnit;\n+                }\n+\n+                @Override\n+                public PersistenceUnitInfo obtainPersistenceUnitInfo(String persistenceUnitName)\n+                        throws IllegalArgumentException, IllegalStateException {\n+                    return elideDynamicPersistenceUnit;\n+                }\n+            });\n+\n+            return bean;\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d6436d07b3818aa897f401a7f8cd9a9b6e97440"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyNjkwNQ==", "bodyText": "Would be nice if this was done in the constructor somehow (along with the other entities that are being populated).", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r411426905", "createdAt": "2020-04-20T14:31:58Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java", "diffHunk": "@@ -79,6 +79,19 @@ public void populateEntityDictionary(EntityDictionary dictionary) {\n                 .forEach(cls -> dictionary.bindEntity(cls, Collections.singleton(Join.class)));\n     }\n \n+    /**\n+     * Bind dynamic compiled classes to dictionary.\n+     * @param dynamicCompiledClasses Dynamically compiled classes\n+     */\n+    public void populateEntityDictionary(Set<Class<?>> dynamicCompiledClasses) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d6436d07b3818aa897f401a7f8cd9a9b6e97440"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyNzI4NA==", "bodyText": "optional to true", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r411427284", "createdAt": "2020-04-20T14:32:27Z", "author": {"login": "aklish"}, "path": "elide-spring/elide-spring-boot-autoconfigure/pom.xml", "diffHunk": "@@ -149,11 +149,28 @@\n             <version>${spring.boot.version}</version>\n             <optional>true</optional>\n         </dependency>\n+        <dependency>\n+            <groupId>org.mdkt.compiler</groupId>\n+            <artifactId>InMemoryJavaCompiler</artifactId>\n+            <version>1.3.0</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d6436d07b3818aa897f401a7f8cd9a9b6e97440"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyNzQxOA==", "bodyText": "Spacing.", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r411427418", "createdAt": "2020-04-20T14:32:39Z", "author": {"login": "aklish"}, "path": "elide-spring/elide-spring-boot-autoconfigure/pom.xml", "diffHunk": "@@ -149,11 +149,28 @@\n             <version>${spring.boot.version}</version>\n             <optional>true</optional>\n         </dependency>\n+        <dependency>\n+            <groupId>org.mdkt.compiler</groupId>\n+            <artifactId>InMemoryJavaCompiler</artifactId>\n+            <version>1.3.0</version>\n+        </dependency>\n \n+        <dependency>\n+            <groupId>com.yahoo.elide</groupId>\n+            <artifactId>elide-dynamic-config-helpers</artifactId>\n+            <version>5.0.0-pr7-SNAPSHOT</version>\n+            <optional>true</optional>\n+        </dependency>\n \n         <!-- Test Dependencies -->\n \n         <!-- YAML for spring config -->\n+                <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d6436d07b3818aa897f401a7f8cd9a9b6e97440"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyNzgyOA==", "bodyText": "optional true", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r411427828", "createdAt": "2020-04-20T14:33:08Z", "author": {"login": "aklish"}, "path": "elide-spring/elide-spring-boot-autoconfigure/pom.xml", "diffHunk": "@@ -149,11 +149,28 @@\n             <version>${spring.boot.version}</version>\n             <optional>true</optional>\n         </dependency>\n+        <dependency>\n+            <groupId>org.mdkt.compiler</groupId>\n+            <artifactId>InMemoryJavaCompiler</artifactId>\n+            <version>1.3.0</version>\n+        </dependency>\n \n+        <dependency>\n+            <groupId>com.yahoo.elide</groupId>\n+            <artifactId>elide-dynamic-config-helpers</artifactId>\n+            <version>5.0.0-pr7-SNAPSHOT</version>\n+            <optional>true</optional>\n+        </dependency>\n \n         <!-- Test Dependencies -->\n \n         <!-- YAML for spring config -->\n+                <dependency>\n+            <groupId>javax.persistence</groupId>\n+            <artifactId>javax.persistence-api</artifactId>\n+            <version>2.2</version>\n+            <scope>provided</scope>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d6436d07b3818aa897f401a7f8cd9a9b6e97440"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyODA4OQ==", "bodyText": "How does this conflict?", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r411428089", "createdAt": "2020-04-20T14:33:29Z", "author": {"login": "aklish"}, "path": "elide-spring/elide-spring-boot-autoconfigure/pom.xml", "diffHunk": "@@ -173,6 +190,12 @@\n             <artifactId>spring-boot-starter-test</artifactId>\n             <version>${spring.boot.version}</version>\n             <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>com.vaadin.external.google</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d6436d07b3818aa897f401a7f8cd9a9b6e97440"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyODgyOQ==", "bodyText": "Don't print stack traces - log the exception.  Also - don't catch Exception.  Just let it propagate.", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r411428829", "createdAt": "2020-04-20T14:34:25Z", "author": {"login": "aklish"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java", "diffHunk": "@@ -40,8 +49,32 @@\n  */\n @Configuration\n @EnableConfigurationProperties(ElideConfigProperties.class)\n+@Slf4j\n public class ElideAutoConfiguration {\n \n+    /**\n+     * Creates a entity compiler for compiling dynamic config classes.\n+     * @param settings\n+     * @return An instance of ElideDynamicEntityCompiler\n+     */\n+    @Bean\n+    @ConditionalOnMissingBean\n+    public ElideDynamicEntityCompiler buildElideDynamicEntityCompiler(ElideConfigProperties settings) {\n+\n+        ElideDynamicEntityCompiler compiler = null;\n+\n+        if (settings.getDynamicConfig().isEnabled()) {\n+            compiler = new ElideDynamicEntityCompiler(settings.getDynamicConfig().getPath());\n+            try {\n+                compiler.compile(settings.getDynamicConfig().getPath());\n+            } catch (Exception e) {\n+                e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d6436d07b3818aa897f401a7f8cd9a9b6e97440"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzMjcxOA==", "bodyText": "Pass the compiler to the MetaDataStore constructor and initialize the internal dictionary in the constructor instead of doing this initialization here.", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r411432718", "createdAt": "2020-04-20T14:39:29Z", "author": {"login": "aklish"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java", "diffHunk": "@@ -90,32 +127,66 @@ public void inject(Object entity) {\n                 });\n \n         dictionary.scanForSecurityChecks();\n+\n+        if (settings.getDynamicConfig().isEnabled()) {\n+            ElideDynamicEntityCompiler compiler = dynamicCompiler.getIfAvailable();\n+            Set<Class<?>> annotatedClass = findAnnotatedClasses(compiler, SecurityCheck.class);\n+            dictionary.addSecurityChecks(annotatedClass);\n+        }\n+\n         return dictionary;\n     }\n \n     /**\n      * Create a QueryEngine instance for aggregation data store to use.\n      * @param entityManagerFactory The JPA factory which creates entity managers.\n+     * @param dynamicCompiler An instance of objectprovider for ElideDynamicEntityCompiler.\n+     * @param settings Elide configuration settings.\n      * @return An instance of a QueryEngine\n+     * @throws ClassNotFoundException\n      */\n     @Bean\n     @ConditionalOnMissingBean\n-    public QueryEngine buildQueryEngine(EntityManagerFactory entityManagerFactory) {\n+    public QueryEngine buildQueryEngine(EntityManagerFactory entityManagerFactory,\n+            ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler, ElideConfigProperties settings)\n+            throws ClassNotFoundException {\n+\n         MetaDataStore metaDataStore = new MetaDataStore();\n \n+        if (settings.getDynamicConfig().isEnabled()) {\n+            ElideDynamicEntityCompiler compiler = dynamicCompiler.getIfAvailable();\n+            Set<Class<?>> annotatedClass = findAnnotatedClasses(compiler, FromTable.class);\n+            annotatedClass.addAll(findAnnotatedClasses(compiler, FromSubquery.class));\n+            metaDataStore.populateEntityDictionary(annotatedClass);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d6436d07b3818aa897f401a7f8cd9a9b6e97440"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzNDYwMA==", "bodyText": "make plural", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r411434600", "createdAt": "2020-04-20T14:41:44Z", "author": {"login": "aklish"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java", "diffHunk": "@@ -125,6 +196,29 @@ public DataStore buildDataStore(EntityManagerFactory entityManagerFactory, Query\n         return new MultiplexManager(jpaDataStore, queryEngine.getMetaDataStore(), aggregationDataStore);\n     }\n \n+    /**\n+     * Find classes with a particular annotation from dynamic compiler.\n+     * @param compiler An instance of ElideDynamicEntityCompiler.\n+     * @param annotationClass Annotation to search for.\n+     * @return Set of Classes matching the annotation.\n+     * @throws ClassNotFoundException\n+     */\n+    private Set<Class<?>> findAnnotatedClasses(ElideDynamicEntityCompiler compiler, Class annotationClass)\n+            throws ClassNotFoundException {\n+\n+        Set<Class<?>> annotatedClass = new HashSet<Class<?>>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d6436d07b3818aa897f401a7f8cd9a9b6e97440"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzNTk1Nw==", "bodyText": "This is a copy of another class in Elide.  Let's move it to a common place (probably JPA data store) - and have both pull from it.", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r411435957", "createdAt": "2020-04-20T14:43:30Z", "author": {"login": "aklish"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/dynamic/compile/ElideDynamicPersistenceUnit.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.spring.dynamic.compile;\n+\n+import lombok.Data;\n+\n+import java.net.URL;\n+import java.util.List;\n+import java.util.Properties;\n+\n+import javax.persistence.SharedCacheMode;\n+import javax.persistence.ValidationMode;\n+import javax.persistence.spi.ClassTransformer;\n+import javax.persistence.spi.PersistenceUnitInfo;\n+import javax.persistence.spi.PersistenceUnitTransactionType;\n+import javax.sql.DataSource;\n+\n+/**\n+ * Persistent Unit implementation for Dynamic Configuration.\n+ */\n+@Data\n+public class ElideDynamicPersistenceUnit implements PersistenceUnitInfo {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d6436d07b3818aa897f401a7f8cd9a9b6e97440"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzNjk5OA==", "bodyText": "What handles the variable substitution for the variables.hjson?", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r411436998", "createdAt": "2020-04-20T14:44:52Z", "author": {"login": "aklish"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/dynamic/compile/ElideDynamicEntityCompiler.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.spring.dynamic.compile;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideSecurityConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideTableConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.parser.ElideConfigParser;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.parser.handlebars.HandlebarsHydrator;\n+import com.google.common.collect.Sets;\n+\n+import org.mdkt.compiler.InMemoryJavaCompiler;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+/**\n+ * Compiles dynamic model pojos generated from hjson files.\n+ *\n+ */\n+@Slf4j\n+public class ElideDynamicEntityCompiler {\n+\n+    public static ArrayList<String> classNames = new ArrayList<String>();\n+\n+    public static final String PACKAGE_NAME = \"com.yahoo.elide.contrib.dynamicconfig.model.\";\n+    private Map<String, Class<?>> compiledObjects;\n+\n+    private InMemoryJavaCompiler compiler = InMemoryJavaCompiler.newInstance();\n+\n+    private Map<String, String> tableClasses = new HashMap<String, String>();\n+    private Map<String, String> securityClasses = new HashMap<String, String>();\n+\n+    /**\n+     * Parse dynamic config path.\n+     * @param path : Dynamic config hjsons root location\n+     */\n+    public ElideDynamicEntityCompiler(String path) {\n+\n+        ElideTableConfig tableConfig = new ElideTableConfig();\n+        ElideSecurityConfig securityConfig = new ElideSecurityConfig();\n+        ElideConfigParser elideConfigParser = new ElideConfigParser();\n+        HandlebarsHydrator hydrator = new HandlebarsHydrator();\n+\n+        try {\n+\n+            elideConfigParser.parseConfigPath(path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d6436d07b3818aa897f401a7f8cd9a9b6e97440"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzNzc0NQ==", "bodyText": "Let NPE propagate.", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r411437745", "createdAt": "2020-04-20T14:45:52Z", "author": {"login": "aklish"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/dynamic/compile/ElideDynamicEntityCompiler.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.spring.dynamic.compile;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideSecurityConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideTableConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.parser.ElideConfigParser;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.parser.handlebars.HandlebarsHydrator;\n+import com.google.common.collect.Sets;\n+\n+import org.mdkt.compiler.InMemoryJavaCompiler;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+/**\n+ * Compiles dynamic model pojos generated from hjson files.\n+ *\n+ */\n+@Slf4j\n+public class ElideDynamicEntityCompiler {\n+\n+    public static ArrayList<String> classNames = new ArrayList<String>();\n+\n+    public static final String PACKAGE_NAME = \"com.yahoo.elide.contrib.dynamicconfig.model.\";\n+    private Map<String, Class<?>> compiledObjects;\n+\n+    private InMemoryJavaCompiler compiler = InMemoryJavaCompiler.newInstance();\n+\n+    private Map<String, String> tableClasses = new HashMap<String, String>();\n+    private Map<String, String> securityClasses = new HashMap<String, String>();\n+\n+    /**\n+     * Parse dynamic config path.\n+     * @param path : Dynamic config hjsons root location\n+     */\n+    public ElideDynamicEntityCompiler(String path) {\n+\n+        ElideTableConfig tableConfig = new ElideTableConfig();\n+        ElideSecurityConfig securityConfig = new ElideSecurityConfig();\n+        ElideConfigParser elideConfigParser = new ElideConfigParser();\n+        HandlebarsHydrator hydrator = new HandlebarsHydrator();\n+\n+        try {\n+\n+            elideConfigParser.parseConfigPath(path);\n+            tableConfig = elideConfigParser.getElideTableConfig();\n+            securityConfig = elideConfigParser.getElideSecurityConfig();\n+            tableClasses = hydrator.hydrateTableTemplate(tableConfig);\n+            securityClasses = hydrator.hydrateSecurityTemplate(securityConfig);\n+\n+            for (Entry<String, String> entry : tableClasses.entrySet()) {\n+                classNames.add(PACKAGE_NAME + entry.getKey());\n+            }\n+\n+            for (Entry<String, String> entry : securityClasses.entrySet()) {\n+                classNames.add(PACKAGE_NAME + entry.getKey());\n+            }\n+\n+            compiler.useParentClassLoader(\n+                    new ElideDynamicInMemoryClassLoader(ClassLoader.getSystemClassLoader(),\n+                            Sets.newHashSet(classNames)));\n+\n+        } catch (NullPointerException | IOException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d6436d07b3818aa897f401a7f8cd9a9b6e97440"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzODkwMQ==", "bodyText": "Path is unused.", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r411438901", "createdAt": "2020-04-20T14:47:18Z", "author": {"login": "aklish"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/dynamic/compile/ElideDynamicEntityCompiler.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.spring.dynamic.compile;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideSecurityConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideTableConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.parser.ElideConfigParser;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.parser.handlebars.HandlebarsHydrator;\n+import com.google.common.collect.Sets;\n+\n+import org.mdkt.compiler.InMemoryJavaCompiler;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+/**\n+ * Compiles dynamic model pojos generated from hjson files.\n+ *\n+ */\n+@Slf4j\n+public class ElideDynamicEntityCompiler {\n+\n+    public static ArrayList<String> classNames = new ArrayList<String>();\n+\n+    public static final String PACKAGE_NAME = \"com.yahoo.elide.contrib.dynamicconfig.model.\";\n+    private Map<String, Class<?>> compiledObjects;\n+\n+    private InMemoryJavaCompiler compiler = InMemoryJavaCompiler.newInstance();\n+\n+    private Map<String, String> tableClasses = new HashMap<String, String>();\n+    private Map<String, String> securityClasses = new HashMap<String, String>();\n+\n+    /**\n+     * Parse dynamic config path.\n+     * @param path : Dynamic config hjsons root location\n+     */\n+    public ElideDynamicEntityCompiler(String path) {\n+\n+        ElideTableConfig tableConfig = new ElideTableConfig();\n+        ElideSecurityConfig securityConfig = new ElideSecurityConfig();\n+        ElideConfigParser elideConfigParser = new ElideConfigParser();\n+        HandlebarsHydrator hydrator = new HandlebarsHydrator();\n+\n+        try {\n+\n+            elideConfigParser.parseConfigPath(path);\n+            tableConfig = elideConfigParser.getElideTableConfig();\n+            securityConfig = elideConfigParser.getElideSecurityConfig();\n+            tableClasses = hydrator.hydrateTableTemplate(tableConfig);\n+            securityClasses = hydrator.hydrateSecurityTemplate(securityConfig);\n+\n+            for (Entry<String, String> entry : tableClasses.entrySet()) {\n+                classNames.add(PACKAGE_NAME + entry.getKey());\n+            }\n+\n+            for (Entry<String, String> entry : securityClasses.entrySet()) {\n+                classNames.add(PACKAGE_NAME + entry.getKey());\n+            }\n+\n+            compiler.useParentClassLoader(\n+                    new ElideDynamicInMemoryClassLoader(ClassLoader.getSystemClassLoader(),\n+                            Sets.newHashSet(classNames)));\n+\n+        } catch (NullPointerException | IOException e) {\n+            log.error(\"Unable to read Dynamic Configuration \" + e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Compile table and security model pojos.\n+     * @param path: Dynamic config hjsons root location\n+     */\n+    public void compile(String path) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d6436d07b3818aa897f401a7f8cd9a9b6e97440"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzOTk2MA==", "bodyText": "What is the purpose of this public setter method that overrides the constructor initialization?  Can we remove it?", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r411439960", "createdAt": "2020-04-20T14:48:34Z", "author": {"login": "aklish"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/dynamic/compile/ElideDynamicInMemoryClassLoader.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.spring.dynamic.compile;\n+\n+import com.google.common.collect.Sets;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.Set;\n+\n+/**\n+ * ClassLoader for dynamic configuration.\n+ */\n+@Slf4j\n+@Data\n+@AllArgsConstructor\n+public class ElideDynamicInMemoryClassLoader extends ClassLoader {\n+\n+    private Set<String> classNames = Sets.newHashSet();\n+\n+    public ElideDynamicInMemoryClassLoader(ClassLoader parent, Set<String> classNames) {\n+        super(parent);\n+        setClassNames(classNames);\n+    }\n+\n+    public void setClassNames(Set<String> classNames) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d6436d07b3818aa897f401a7f8cd9a9b6e97440"}, "originalPosition": 32}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cc579ef2795b196b0779970235bd943d40c8a1cd", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/cc579ef2795b196b0779970235bd943d40c8a1cd", "committedDate": "2020-04-28T15:25:42Z", "message": "Review Comments resolution"}, "afterCommit": {"oid": "8320245f56ce9db1d375ace4d1a2870eb34eb91b", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/8320245f56ce9db1d375ace4d1a2870eb34eb91b", "committedDate": "2020-04-30T23:35:52Z", "message": "Review Comments resolution"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MjUwNzI4", "url": "https://github.com/yahoo/elide/pull/1255#pullrequestreview-404250728", "createdAt": "2020-05-01T16:17:37Z", "commit": {"oid": "4329dd1bfa1ed0aeed74050b19e7893725258034"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNjoxNzozN1rOGPONHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNjo0MToxNlrOGPO1lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYxNDU1OQ==", "bodyText": "Optional=true is really meant for autoconfigure packages - not a core elide package.", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r418614559", "createdAt": "2020-05-01T16:17:37Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/pom.xml", "diffHunk": "@@ -115,6 +112,18 @@\n             <artifactId>handlebars</artifactId>\n             <version>${handlebars.version}</version>\n         </dependency>\n+        <dependency>\n+            <groupId>org.mdkt.compiler</groupId>\n+            <artifactId>InMemoryJavaCompiler</artifactId>\n+            <version>${mdkt.compiler.version}</version>\n+            <optional>true</optional>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4329dd1bfa1ed0aeed74050b19e7893725258034"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYxODE0Mg==", "bodyText": "Prefixing the models with \"com.yahoo.elide\" will prohibit API versioning in Elide 5 (all elide prefixed models are not versioned).  We'll need to find another package name for the dynamic models.", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r418618142", "createdAt": "2020-05-01T16:26:03Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.compile;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideSecurityConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideTableConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.parser.ElideConfigParser;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.parser.handlebars.HandlebarsHydrator;\n+\n+import com.google.common.collect.Sets;\n+\n+import org.mdkt.compiler.InMemoryJavaCompiler;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+\n+/**\n+ * Compiles dynamic model pojos generated from hjson files.\n+ *\n+ */\n+@Slf4j\n+public class ElideDynamicEntityCompiler {\n+\n+    public static ArrayList<String> classNames = new ArrayList<String>();\n+\n+    public static final String PACKAGE_NAME = \"com.yahoo.elide.contrib.dynamicconfig.model.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4329dd1bfa1ed0aeed74050b19e7893725258034"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYxOTU1Nw==", "bodyText": "Remove optional = true.", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r418619557", "createdAt": "2020-05-01T16:29:08Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/pom.xml", "diffHunk": "@@ -65,6 +65,14 @@\n             <artifactId>elide-datastore-multiplex</artifactId>\n             <version>5.0.0-pr7-SNAPSHOT</version>\n         </dependency>\n+        \n+        <dependency>\n+            <groupId>com.yahoo.elide</groupId>\n+            <artifactId>elide-dynamic-config-helpers</artifactId>\n+            <version>5.0.0-pr7-SNAPSHOT</version>\n+            <optional>true</optional>\n+        </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4329dd1bfa1ed0aeed74050b19e7893725258034"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyMDY0NQ==", "bodyText": "Why can't we copy all of the properties from hibernateProperties instead of setting explicit ones.  THere are dozens of hibernate properties that might be set.", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r418620645", "createdAt": "2020-05-01T16:31:33Z", "author": {"login": "aklish"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideDynamicConfiguration.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.spring.config;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.compile.ElideDynamicEntityCompiler;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromSubquery;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+import com.yahoo.elide.datastores.jpa.PersistenceUnitInfoImpl;\n+import com.yahoo.elide.utils.ClassScanner;\n+\n+import org.hibernate.cfg.AvailableSettings;\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n+import org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties;\n+import org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties.Naming;\n+import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n+import org.springframework.orm.jpa.persistenceunit.PersistenceUnitManager;\n+import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.spi.PersistenceUnitInfo;\n+import javax.sql.DataSource;\n+\n+/**\n+ * Dynamic Configuration For Elide Services. Override any of the beans (by\n+ * defining your own) and setting flags to disable in properties to change the\n+ * default behavior.\n+ */\n+\n+@Slf4j\n+@Configuration\n+@EnableConfigurationProperties(ElideConfigProperties.class)\n+@ConditionalOnExpression(\"${elide.dynamic-config.enabled:false}\")\n+public class ElideDynamicConfiguration {\n+\n+    public static final String HIBERNATE_DDL_AUTO = \"hibernate.hbm2ddl.auto\";\n+    public static final String HIBERNATE_PHYSICAL_NAMING = \"hibernate.physical_naming_strategy\";\n+    public static final String HIBERNATE_IMPLICIT_NAMING = \"hibernate.implicit_naming_strategy\";\n+    public static final String HIBERNATE_ID_GEN_MAPPING = \"hibernate.use-new-id-generator-mappings\";\n+\n+    /**\n+     * Configure factory bean to create EntityManagerFactory for Dynamic Configuration.\n+     * @param source :DataSource for JPA\n+     * @param jpaProperties : JPA Config Properties\n+     * @param hibernateProperties : Hibernate Config Properties\n+     * @param dynamicCompiler : ElideDynamicEntityCompiler\n+     * @return LocalContainerEntityManagerFactoryBean bean\n+     */\n+    @Bean\n+    public LocalContainerEntityManagerFactoryBean entityManagerFactory (\n+            DataSource source,\n+            JpaProperties jpaProperties,\n+            HibernateProperties hibernateProperties,\n+            ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler) {\n+\n+            //Map for Persistent Unit properties\n+            Map<String, Object> puiPropertyMap = new HashMap<>();\n+\n+            //Bind entity classes from classpath to Persistence Unit\n+            ArrayList<Class> bindClasses = new ArrayList<>();\n+            bindClasses.addAll(ClassScanner.getAnnotatedClasses(Entity.class));\n+\n+            //Bind FromTable/FromSubSelect classes from classpath to Persistence Unit\n+            bindClasses.addAll(ClassScanner.getAnnotatedClasses(FromTable.class));\n+            bindClasses.addAll(ClassScanner.getAnnotatedClasses(FromSubquery.class));\n+\n+            //Map of JPA Properties to be be passed to EntityManager\n+            Map<String, String> jpaPropMap = jpaProperties.getProperties();\n+\n+            String hibernateGetDDLAuto = hibernateProperties.getDdlAuto();\n+            Naming hibernateGetNaming =  hibernateProperties.getNaming();\n+            String hibernateImplicitStrategy = hibernateGetNaming.getImplicitStrategy();\n+            String hibernatePhysicalStrategy = hibernateGetNaming.getPhysicalStrategy();\n+            Boolean hibernateGetIdenGen = hibernateProperties.isUseNewIdGeneratorMappings();\n+\n+            //Set the relevant property in JPA corresponding to Hibernate Property Value\n+            hibernateJPAPropertyOverride(jpaPropMap, HIBERNATE_DDL_AUTO, hibernateGetDDLAuto);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4329dd1bfa1ed0aeed74050b19e7893725258034"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyMTM2NQ==", "bodyText": "FromTable and FromSubquery are not JPA Entities - why are we binding them to the Persistent Unit?", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r418621365", "createdAt": "2020-05-01T16:33:17Z", "author": {"login": "aklish"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideDynamicConfiguration.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.spring.config;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.compile.ElideDynamicEntityCompiler;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromSubquery;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+import com.yahoo.elide.datastores.jpa.PersistenceUnitInfoImpl;\n+import com.yahoo.elide.utils.ClassScanner;\n+\n+import org.hibernate.cfg.AvailableSettings;\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n+import org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties;\n+import org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties.Naming;\n+import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n+import org.springframework.orm.jpa.persistenceunit.PersistenceUnitManager;\n+import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.spi.PersistenceUnitInfo;\n+import javax.sql.DataSource;\n+\n+/**\n+ * Dynamic Configuration For Elide Services. Override any of the beans (by\n+ * defining your own) and setting flags to disable in properties to change the\n+ * default behavior.\n+ */\n+\n+@Slf4j\n+@Configuration\n+@EnableConfigurationProperties(ElideConfigProperties.class)\n+@ConditionalOnExpression(\"${elide.dynamic-config.enabled:false}\")\n+public class ElideDynamicConfiguration {\n+\n+    public static final String HIBERNATE_DDL_AUTO = \"hibernate.hbm2ddl.auto\";\n+    public static final String HIBERNATE_PHYSICAL_NAMING = \"hibernate.physical_naming_strategy\";\n+    public static final String HIBERNATE_IMPLICIT_NAMING = \"hibernate.implicit_naming_strategy\";\n+    public static final String HIBERNATE_ID_GEN_MAPPING = \"hibernate.use-new-id-generator-mappings\";\n+\n+    /**\n+     * Configure factory bean to create EntityManagerFactory for Dynamic Configuration.\n+     * @param source :DataSource for JPA\n+     * @param jpaProperties : JPA Config Properties\n+     * @param hibernateProperties : Hibernate Config Properties\n+     * @param dynamicCompiler : ElideDynamicEntityCompiler\n+     * @return LocalContainerEntityManagerFactoryBean bean\n+     */\n+    @Bean\n+    public LocalContainerEntityManagerFactoryBean entityManagerFactory (\n+            DataSource source,\n+            JpaProperties jpaProperties,\n+            HibernateProperties hibernateProperties,\n+            ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler) {\n+\n+            //Map for Persistent Unit properties\n+            Map<String, Object> puiPropertyMap = new HashMap<>();\n+\n+            //Bind entity classes from classpath to Persistence Unit\n+            ArrayList<Class> bindClasses = new ArrayList<>();\n+            bindClasses.addAll(ClassScanner.getAnnotatedClasses(Entity.class));\n+\n+            //Bind FromTable/FromSubSelect classes from classpath to Persistence Unit\n+            bindClasses.addAll(ClassScanner.getAnnotatedClasses(FromTable.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4329dd1bfa1ed0aeed74050b19e7893725258034"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyMzAwMA==", "bodyText": "Fact tables in the AggregationDataStore are never entities (because Elide manages the SQL).  JPA shouldn't know about them.  Look at the similar class in AggregationDataStore.", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r418623000", "createdAt": "2020-05-01T16:36:51Z", "author": {"login": "aklish"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/test/java/com/yahoo/elide/contrib/dynamicconfig/model/PlayerStats.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import com.yahoo.elide.annotation.DeletePermission;\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.annotation.UpdatePermission;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+\n+\n+import java.util.Date;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Include(rootLevel = true , type = \"playerStats\")\n+@Cardinality(size = CardinalitySize.LARGE)\n+@EqualsAndHashCode\n+@ToString\n+@Data\n+@Entity", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4329dd1bfa1ed0aeed74050b19e7893725258034"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyMzczNg==", "bodyText": "elide-example-models was a place to put common classes that are referenced in multiple maven sub-modules.  Rather than redefine these entities here - can we move Player stats and related models to elide-example-models?  That said, I don't want this to cascade into a ton of work - so let's discuss if this looks complicated.", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r418623736", "createdAt": "2020-05-01T16:38:27Z", "author": {"login": "aklish"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/test/java/com/yahoo/elide/contrib/dynamicconfig/model/PlayerStats.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import com.yahoo.elide.annotation.DeletePermission;\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.annotation.UpdatePermission;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+\n+\n+import java.util.Date;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Include(rootLevel = true , type = \"playerStats\")\n+@Cardinality(size = CardinalitySize.LARGE)\n+@EqualsAndHashCode\n+@ToString\n+@Data\n+@Entity\n+@ReadPermission(expression = \"Prefab.Role.All\")\n+@UpdatePermission(expression = \"Prefab.Role.None\")\n+@DeletePermission(expression = \"Prefab.Role.None\")\n+public class PlayerStats {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4329dd1bfa1ed0aeed74050b19e7893725258034"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyNDc1MQ==", "bodyText": "Now that I think about it, why do we need this class at all?  Since we are testing dynamic classes - not static ones.", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r418624751", "createdAt": "2020-05-01T16:40:54Z", "author": {"login": "aklish"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/test/java/com/yahoo/elide/contrib/dynamicconfig/model/PlayerStats.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import com.yahoo.elide.annotation.DeletePermission;\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.annotation.UpdatePermission;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+\n+\n+import java.util.Date;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Include(rootLevel = true , type = \"playerStats\")\n+@Cardinality(size = CardinalitySize.LARGE)\n+@EqualsAndHashCode\n+@ToString\n+@Data\n+@Entity\n+@ReadPermission(expression = \"Prefab.Role.All\")\n+@UpdatePermission(expression = \"Prefab.Role.None\")\n+@DeletePermission(expression = \"Prefab.Role.None\")\n+public class PlayerStats {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4329dd1bfa1ed0aeed74050b19e7893725258034"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyNDkxOA==", "bodyText": "Why do we need a static class when we are testing dynamic class loading?", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r418624918", "createdAt": "2020-05-01T16:41:16Z", "author": {"login": "aklish"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/test/java/com/yahoo/elide/contrib/dynamicconfig/model/PlayerCountry.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import com.yahoo.elide.annotation.DeletePermission;\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.annotation.UpdatePermission;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Include(rootLevel = true,  type = \"playerCountry\")\n+@Cardinality(size = CardinalitySize.SMALL)\n+@EqualsAndHashCode\n+@ToString\n+@Data\n+@Entity\n+@ReadPermission(expression = \"Prefab.Role.All\")\n+@UpdatePermission(expression = \"Prefab.Role.None\")\n+@DeletePermission(expression = \"Prefab.Role.None\")\n+\n+public class PlayerCountry {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4329dd1bfa1ed0aeed74050b19e7893725258034"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1MDM1NDQ2", "url": "https://github.com/yahoo/elide/pull/1255#pullrequestreview-405035446", "createdAt": "2020-05-04T14:22:57Z", "commit": {"oid": "4329dd1bfa1ed0aeed74050b19e7893725258034"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDoyMjo1OFrOGQCsKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDoyMjo1OFrOGQCsKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ3NDQ3Mw==", "bodyText": "for type=, instead of capitalizeFirstLetter let's use a new method lowerCaseFirstLetter so that its consistent with how we do when it's not dynamic config i.e. camelCase", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r419474473", "createdAt": "2020-05-04T14:22:58Z", "author": {"login": "moizarafat"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "diffHunk": "@@ -31,57 +33,57 @@ import javax.persistence.Id;\n /**\n  * A root level entity for testing AggregationDataStore.\n  */\n-@Cardinality(size = CardinalitySize.{{#toUpperCase cardinality}}{{/toUpperCase}})\n+@Cardinality(size = CardinalitySize.<%#toUpperCase cardinality%><%/toUpperCase%>)\n @EqualsAndHashCode\n @ToString\n @Data\n-{{#if table}}@FromTable(name = \"{{#if schema}}{{schema}}.{{/if}}{{table}}\"){{/if}}\n-{{#if sql}}@FromSubquery(sql = \"{{sql}}\"){{/if}}\n-{{#if readAccess}}@ReadPermission(expression = \"{{readAccess}}\"){{/if}}\n-{{#if description}}@Meta(description = \"{{description}}\"){{/if}}\n-{{#if hidden}}@Exclude{{else}}@Include(rootLevel = true){{/if}}\n-public class {{#capitalizeFirstLetter name}}{{/capitalizeFirstLetter}} {{#if extend}}extends {{#capitalizeFirstLetter extend}}{{/capitalizeFirstLetter}}{{/if}}{\n+<%#if table%>@FromTable(name = \"<%#if schema%><%schema%>.<%/if%><%table%>\")<%/if%>\n+<%#if sql%>@FromSubquery(sql = \"<%sql%>\")<%/if%>\n+<%#if readAccess%>@ReadPermission(expression = \"<%readAccess%>\")<%/if%>\n+<%#if description%>@Meta(description = \"<%description%>\")<%/if%>\n+<%#if hidden%>@Exclude<%else%>@Include(rootLevel = true, type = \"<%#capitalizeFirstLetter name%><%/capitalizeFirstLetter%>\")<%/if%>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4329dd1bfa1ed0aeed74050b19e7893725258034"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af6750ab2a2ec990b3aa6304922127033e59be49", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/af6750ab2a2ec990b3aa6304922127033e59be49", "committedDate": "2020-05-14T00:02:07Z", "message": "Rebase against 5.x\n\nCo-authored-by: Ayeswarya <ayeswarya.anandan@verizonmedia.com>\nCo-authored-by: AvaniMakwana <Avani.makwana@outlook.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6377d71918dcf4a331a40b41291ed24ada5e785", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/f6377d71918dcf4a331a40b41291ed24ada5e785", "committedDate": "2020-05-14T00:17:31Z", "message": "pom fix\n\nCo-authored-by: Ayeswarya <ayeswarya.anandan@verizonmedia.com>\nCo-authored-by: AvaniMakwana <Avani.makwana@outlook.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c058e29d011d76d6aa4ea26c4b4cf67abbfc51ef", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/c058e29d011d76d6aa4ea26c4b4cf67abbfc51ef", "committedDate": "2020-05-14T01:01:08Z", "message": "pom fix\n\nCo-authored-by: Ayeswarya <ayeswarya.anandan@verizonmedia.com>\nCo-authored-by: AvaniMakwana <Avani.makwana@outlook.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5220cccf0f6eb03b15230f13cc5395a3195e9526", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/5220cccf0f6eb03b15230f13cc5395a3195e9526", "committedDate": "2020-05-14T02:12:49Z", "message": "Merging 1220\n\nCo-authored-by: rishi-aga <rishi.aga123@gmail.com>\nCo-authored-by: AvaniMakwana <Avani.makwana@outlook.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "272c6f67a3164aefb658b2f66b0dbc1cd3a5e86a", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/272c6f67a3164aefb658b2f66b0dbc1cd3a5e86a", "committedDate": "2020-05-14T03:44:00Z", "message": "Spring Boot Changes\n\nCo-authored-by: Ayeswarya <ayeswarya.anandan@verizonmedia.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bef6ba907e98b914985ff1936a16d6f0c364f518", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/bef6ba907e98b914985ff1936a16d6f0c364f518", "committedDate": "2020-05-14T04:22:06Z", "message": "Spring Boot Changes\n\nCo-authored-by: Ayeswarya <ayeswarya.anandan@verizonmedia.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64890957fffdee6f8d983f448f4f9e52692a0a02", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/64890957fffdee6f8d983f448f4f9e52692a0a02", "committedDate": "2020-05-14T04:40:56Z", "message": "Spring Boot Changes\n\nCo-authored-by: Ayeswarya <ayeswarya.anandan@verizonmedia.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9a3590f75dc1ff1cf3e24eea9b0bf445e8f3af32", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/9a3590f75dc1ff1cf3e24eea9b0bf445e8f3af32", "committedDate": "2020-05-13T05:01:25Z", "message": "Review Comments"}, "afterCommit": {"oid": "64890957fffdee6f8d983f448f4f9e52692a0a02", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/64890957fffdee6f8d983f448f4f9e52692a0a02", "committedDate": "2020-05-14T04:40:56Z", "message": "Spring Boot Changes\n\nCo-authored-by: Ayeswarya <ayeswarya.anandan@verizonmedia.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cee9218c1ed93fec1b8ec2f150ca08aa1d048a8d", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/cee9218c1ed93fec1b8ec2f150ca08aa1d048a8d", "committedDate": "2020-05-14T05:43:11Z", "message": "Review Comments\n\nCo-authored-by: Ayeswarya <ayeswarya.anandan@verizonmedia.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eec6ec049d7d35bfbc25d86b0d343145b368de83", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/eec6ec049d7d35bfbc25d86b0d343145b368de83", "committedDate": "2020-05-14T16:19:31Z", "message": "Update DynamicConfigTest.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMTcyOTU2", "url": "https://github.com/yahoo/elide/pull/1255#pullrequestreview-412172956", "createdAt": "2020-05-14T20:48:43Z", "commit": {"oid": "eec6ec049d7d35bfbc25d86b0d343145b368de83"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMDo0ODo0M1rOGVtphA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMTozMDowNVrOGVu7cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQyMTE4OA==", "bodyText": "Can be rewritten as:\nreturn findAnnotatedClasses(annotationClass)\n       .stream\n       .map(Class::getName)\n       .collect(Collectors.toList());", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r425421188", "createdAt": "2020-05-14T20:48:43Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.compile;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideSecurityConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideTableConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.parser.ElideConfigParser;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.parser.handlebars.HandlebarsHydrator;\n+\n+import com.google.common.collect.Sets;\n+\n+import org.mdkt.compiler.InMemoryJavaCompiler;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+\n+/**\n+ * Compiles dynamic model pojos generated from hjson files.\n+ *\n+ */\n+@Slf4j\n+public class ElideDynamicEntityCompiler {\n+\n+    public static ArrayList<String> classNames = new ArrayList<String>();\n+\n+    public static final String PACKAGE_NAME = \"dynamicconfig.models.\";\n+    private Map<String, Class<?>> compiledObjects;\n+\n+    private InMemoryJavaCompiler compiler = InMemoryJavaCompiler.newInstance().ignoreWarnings();\n+\n+    private Map<String, String> tableClasses = new HashMap<String, String>();\n+    private Map<String, String> securityClasses = new HashMap<String, String>();\n+\n+    /**\n+     * Parse dynamic config path.\n+     * @param path : Dynamic config hjsons root location\n+     * @throws IOException IOException thrown\n+     */\n+    public ElideDynamicEntityCompiler(String path) throws IOException {\n+\n+        ElideTableConfig tableConfig = new ElideTableConfig();\n+        ElideSecurityConfig securityConfig = new ElideSecurityConfig();\n+        ElideConfigParser elideConfigParser = new ElideConfigParser(path);\n+        HandlebarsHydrator hydrator = new HandlebarsHydrator();\n+\n+        tableConfig = elideConfigParser.getElideTableConfig();\n+        securityConfig = elideConfigParser.getElideSecurityConfig();\n+        tableClasses = hydrator.hydrateTableTemplate(tableConfig);\n+        securityClasses = hydrator.hydrateSecurityTemplate(securityConfig);\n+\n+        for (Entry<String, String> entry : tableClasses.entrySet()) {\n+            classNames.add(PACKAGE_NAME + entry.getKey());\n+        }\n+\n+        for (Entry<String, String> entry : securityClasses.entrySet()) {\n+            classNames.add(PACKAGE_NAME + entry.getKey());\n+        }\n+\n+        compiler.useParentClassLoader(\n+                new ElideDynamicInMemoryClassLoader(ClassLoader.getSystemClassLoader(),\n+                        Sets.newHashSet(classNames)));\n+    }\n+\n+    /**\n+     * Compile table and security model pojos.\n+     * @throws Exception\n+     */\n+    public void compile() throws Exception {\n+\n+        for (Map.Entry<String, String> tablePojo : tableClasses.entrySet()) {\n+            log.debug(\"key: \" + tablePojo.getKey() + \", value: \" + tablePojo.getValue());\n+            compiler.addSource(PACKAGE_NAME + tablePojo.getKey(), tablePojo.getValue());\n+        }\n+\n+        for (Map.Entry<String, String> secPojo : securityClasses.entrySet()) {\n+            log.debug(\"key: \" + secPojo.getKey() + \", value: \" + secPojo.getValue());\n+            compiler.addSource(PACKAGE_NAME + secPojo.getKey(), secPojo.getValue());\n+        }\n+\n+        try {\n+            compiledObjects = compiler.compileAll();\n+        } catch (Exception e) {\n+            log.error(\"Unable to compile dynamic classes in memory \");\n+        }\n+\n+    }\n+\n+    /**\n+     * Get Inmemorycompiler's classloader.\n+     * @return ClassLoader\n+     */\n+    public ClassLoader getClassLoader() {\n+        return compiler.getClassloader();\n+    }\n+\n+    /**\n+     * Get the class from compiled class lists.\n+     * @param name name of the class\n+     * @return Class\n+     */\n+    public Class<?> getCompiled(String name) {\n+        return compiledObjects.get(name);\n+    }\n+\n+    /**\n+     * Find classes with a particular annotation from dynamic compiler.\n+     * @param annotationClass Annotation to search for.\n+     * @return Set of Classes matching the annotation.\n+     * @throws ClassNotFoundException\n+     */\n+    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n+    public Set<Class<?>> findAnnotatedClasses(Class annotationClass)\n+            throws ClassNotFoundException {\n+\n+        Set<Class<?>> annotatedClasses = new HashSet<Class<?>>();\n+        ArrayList<String> dynamicClasses = classNames;\n+\n+        for (String dynamicClass : dynamicClasses) {\n+            Class<?> classz = getClassLoader().loadClass(dynamicClass);\n+            if (classz.getAnnotation(annotationClass) != null) {\n+                annotatedClasses.add(classz);\n+            }\n+        }\n+\n+        return annotatedClasses;\n+    }\n+\n+    /**\n+     * Find classes with a particular annotation from dynamic compiler.\n+     * @param annotationClass Annotation to search for.\n+     * @return Set of Classes matching the annotation.\n+     * @throws ClassNotFoundException\n+     */\n+    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n+    public List<String> findAnnotatedClassNames(Class annotationClass)\n+            throws ClassNotFoundException {\n+\n+        List<String> annotatedClasses = new ArrayList<String>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eec6ec049d7d35bfbc25d86b0d343145b368de83"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQyMjY2Mg==", "bodyText": "Is there any reason not to compile now in the constructor as well so compiledObjects is fully initialized?", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r425422662", "createdAt": "2020-05-14T20:51:35Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.compile;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideSecurityConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideTableConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.parser.ElideConfigParser;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.parser.handlebars.HandlebarsHydrator;\n+\n+import com.google.common.collect.Sets;\n+\n+import org.mdkt.compiler.InMemoryJavaCompiler;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+\n+/**\n+ * Compiles dynamic model pojos generated from hjson files.\n+ *\n+ */\n+@Slf4j\n+public class ElideDynamicEntityCompiler {\n+\n+    public static ArrayList<String> classNames = new ArrayList<String>();\n+\n+    public static final String PACKAGE_NAME = \"dynamicconfig.models.\";\n+    private Map<String, Class<?>> compiledObjects;\n+\n+    private InMemoryJavaCompiler compiler = InMemoryJavaCompiler.newInstance().ignoreWarnings();\n+\n+    private Map<String, String> tableClasses = new HashMap<String, String>();\n+    private Map<String, String> securityClasses = new HashMap<String, String>();\n+\n+    /**\n+     * Parse dynamic config path.\n+     * @param path : Dynamic config hjsons root location\n+     * @throws IOException IOException thrown\n+     */\n+    public ElideDynamicEntityCompiler(String path) throws IOException {\n+\n+        ElideTableConfig tableConfig = new ElideTableConfig();\n+        ElideSecurityConfig securityConfig = new ElideSecurityConfig();\n+        ElideConfigParser elideConfigParser = new ElideConfigParser(path);\n+        HandlebarsHydrator hydrator = new HandlebarsHydrator();\n+\n+        tableConfig = elideConfigParser.getElideTableConfig();\n+        securityConfig = elideConfigParser.getElideSecurityConfig();\n+        tableClasses = hydrator.hydrateTableTemplate(tableConfig);\n+        securityClasses = hydrator.hydrateSecurityTemplate(securityConfig);\n+\n+        for (Entry<String, String> entry : tableClasses.entrySet()) {\n+            classNames.add(PACKAGE_NAME + entry.getKey());\n+        }\n+\n+        for (Entry<String, String> entry : securityClasses.entrySet()) {\n+            classNames.add(PACKAGE_NAME + entry.getKey());\n+        }\n+\n+        compiler.useParentClassLoader(\n+                new ElideDynamicInMemoryClassLoader(ClassLoader.getSystemClassLoader(),\n+                        Sets.newHashSet(classNames)));\n+    }\n+\n+    /**\n+     * Compile table and security model pojos.\n+     * @throws Exception\n+     */\n+    public void compile() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eec6ec049d7d35bfbc25d86b0d343145b368de83"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQyNDkzMg==", "bodyText": "Instead of loading the classes here, why. not just iterate over compiledObjects.values()", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r425424932", "createdAt": "2020-05-14T20:55:47Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.compile;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideSecurityConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideTableConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.parser.ElideConfigParser;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.parser.handlebars.HandlebarsHydrator;\n+\n+import com.google.common.collect.Sets;\n+\n+import org.mdkt.compiler.InMemoryJavaCompiler;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+\n+/**\n+ * Compiles dynamic model pojos generated from hjson files.\n+ *\n+ */\n+@Slf4j\n+public class ElideDynamicEntityCompiler {\n+\n+    public static ArrayList<String> classNames = new ArrayList<String>();\n+\n+    public static final String PACKAGE_NAME = \"dynamicconfig.models.\";\n+    private Map<String, Class<?>> compiledObjects;\n+\n+    private InMemoryJavaCompiler compiler = InMemoryJavaCompiler.newInstance().ignoreWarnings();\n+\n+    private Map<String, String> tableClasses = new HashMap<String, String>();\n+    private Map<String, String> securityClasses = new HashMap<String, String>();\n+\n+    /**\n+     * Parse dynamic config path.\n+     * @param path : Dynamic config hjsons root location\n+     * @throws IOException IOException thrown\n+     */\n+    public ElideDynamicEntityCompiler(String path) throws IOException {\n+\n+        ElideTableConfig tableConfig = new ElideTableConfig();\n+        ElideSecurityConfig securityConfig = new ElideSecurityConfig();\n+        ElideConfigParser elideConfigParser = new ElideConfigParser(path);\n+        HandlebarsHydrator hydrator = new HandlebarsHydrator();\n+\n+        tableConfig = elideConfigParser.getElideTableConfig();\n+        securityConfig = elideConfigParser.getElideSecurityConfig();\n+        tableClasses = hydrator.hydrateTableTemplate(tableConfig);\n+        securityClasses = hydrator.hydrateSecurityTemplate(securityConfig);\n+\n+        for (Entry<String, String> entry : tableClasses.entrySet()) {\n+            classNames.add(PACKAGE_NAME + entry.getKey());\n+        }\n+\n+        for (Entry<String, String> entry : securityClasses.entrySet()) {\n+            classNames.add(PACKAGE_NAME + entry.getKey());\n+        }\n+\n+        compiler.useParentClassLoader(\n+                new ElideDynamicInMemoryClassLoader(ClassLoader.getSystemClassLoader(),\n+                        Sets.newHashSet(classNames)));\n+    }\n+\n+    /**\n+     * Compile table and security model pojos.\n+     * @throws Exception\n+     */\n+    public void compile() throws Exception {\n+\n+        for (Map.Entry<String, String> tablePojo : tableClasses.entrySet()) {\n+            log.debug(\"key: \" + tablePojo.getKey() + \", value: \" + tablePojo.getValue());\n+            compiler.addSource(PACKAGE_NAME + tablePojo.getKey(), tablePojo.getValue());\n+        }\n+\n+        for (Map.Entry<String, String> secPojo : securityClasses.entrySet()) {\n+            log.debug(\"key: \" + secPojo.getKey() + \", value: \" + secPojo.getValue());\n+            compiler.addSource(PACKAGE_NAME + secPojo.getKey(), secPojo.getValue());\n+        }\n+\n+        try {\n+            compiledObjects = compiler.compileAll();\n+        } catch (Exception e) {\n+            log.error(\"Unable to compile dynamic classes in memory \");\n+        }\n+\n+    }\n+\n+    /**\n+     * Get Inmemorycompiler's classloader.\n+     * @return ClassLoader\n+     */\n+    public ClassLoader getClassLoader() {\n+        return compiler.getClassloader();\n+    }\n+\n+    /**\n+     * Get the class from compiled class lists.\n+     * @param name name of the class\n+     * @return Class\n+     */\n+    public Class<?> getCompiled(String name) {\n+        return compiledObjects.get(name);\n+    }\n+\n+    /**\n+     * Find classes with a particular annotation from dynamic compiler.\n+     * @param annotationClass Annotation to search for.\n+     * @return Set of Classes matching the annotation.\n+     * @throws ClassNotFoundException\n+     */\n+    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n+    public Set<Class<?>> findAnnotatedClasses(Class annotationClass)\n+            throws ClassNotFoundException {\n+\n+        Set<Class<?>> annotatedClasses = new HashSet<Class<?>>();\n+        ArrayList<String> dynamicClasses = classNames;\n+\n+        for (String dynamicClass : dynamicClasses) {\n+            Class<?> classz = getClassLoader().loadClass(dynamicClass);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eec6ec049d7d35bfbc25d86b0d343145b368de83"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQzMjI0Mw==", "bodyText": "Javadoc param is missing.  This will cause a warning in the build.", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r425432243", "createdAt": "2020-05-14T21:09:50Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/EntityDictionary.java", "diffHunk": "@@ -1256,7 +1256,21 @@ public void scanForSecurityChecks() {\n         // /elide-spring-boot-autoconfigure/src/main/java/org/illyasviel/elide\n         // /spring/boot/autoconfigure/ElideAutoConfiguration.java\n \n-        for (Class<?> cls : ClassScanner.getAnnotatedClasses(SecurityCheck.class)) {\n+        Set<Class<?>> classes = ClassScanner.getAnnotatedClasses(SecurityCheck.class);\n+\n+        addSecurityChecks(classes);\n+    }\n+\n+    /**\n+     * Add security checks and bind them to the dictionary.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eec6ec049d7d35bfbc25d86b0d343145b368de83"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQzNzU4Mg==", "bodyText": "dynamicConfig is not a controller - so why are we using ControllerProperties to configure it?", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r425437582", "createdAt": "2020-05-14T21:20:47Z", "author": {"login": "aklish"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideConfigProperties.java", "diffHunk": "@@ -36,6 +36,11 @@\n      */\n     private AsyncProperties async;\n \n+    /**\n+     * Settings for the Dynamic Configuration.\n+     */\n+    private ControllerProperties dynamicConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eec6ec049d7d35bfbc25d86b0d343145b368de83"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQzODkzNQ==", "bodyText": "SInce this is defined at the table level, you don't need to define it for each field.", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r425438935", "createdAt": "2020-05-14T21:23:32Z", "author": {"login": "aklish"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/test/resources/models/tables/playerStats.hjson", "diffHunk": "@@ -0,0 +1,56 @@\n+{\n+    tables: [{\n+        name: PlayerStats\n+        table: PlayerStats\n+        description:\n+        '''\n+        A long description\n+        '''\n+        cardinality : large\n+        readAccess : Prefab.Role.All\n+        joins: [\n+            {\n+                name: playerCountry\n+                to: PlayerCountry\n+                type: toOne\n+                definition: '%join.id = %from.countryId'\n+            }\n+        ]\n+        measures : [\n+            {\n+            name : highScore\n+            type : INTEGER\n+            definition: 'MAX(highScore)'\n+            readAccess : Prefab.Role.All\n+            }\n+        ]\n+        dimensions : [\n+            {\n+                name : name\n+                type : TEXT\n+                readAccess : Prefab.Role.All", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eec6ec049d7d35bfbc25d86b0d343145b368de83"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ0MDgwOA==", "bodyText": "This is redundant and can be removed.", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r425440808", "createdAt": "2020-05-14T21:27:11Z", "author": {"login": "aklish"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/test/resources/models/tables/playerCountry.hjson", "diffHunk": "@@ -0,0 +1,20 @@\n+{\n+    tables: [{\n+        name: PlayerCountry\n+        table: PlayerCountry\n+        description:\n+        '''\n+        A long description\n+        '''\n+        cardinality : small\n+        readAccess : Prefab.Role.All\n+        dimensions : [\n+            {\n+                name : isoCode\n+                type : TEXT\n+                readAccess : Prefab.Role.All", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eec6ec049d7d35bfbc25d86b0d343145b368de83"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ0MjE2Mg==", "bodyText": "If we turn off dynamic-config - will Elide autoconfigure work as expected with its normal EntityManagerFactory configuration?", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r425442162", "createdAt": "2020-05-14T21:30:05Z", "author": {"login": "aklish"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideDynamicConfiguration.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.spring.config;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.compile.ElideDynamicEntityCompiler;\n+import com.yahoo.elide.datastores.jpa.PersistenceUnitInfoImpl;\n+import com.yahoo.elide.utils.ClassScanner;\n+\n+import org.hibernate.cfg.AvailableSettings;\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n+import org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties;\n+import org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties.Naming;\n+import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n+import org.springframework.orm.jpa.persistenceunit.PersistenceUnitManager;\n+import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.spi.PersistenceUnitInfo;\n+import javax.sql.DataSource;\n+\n+/**\n+ * Dynamic Configuration For Elide Services. Override any of the beans (by\n+ * defining your own) and setting flags to disable in properties to change the\n+ * default behavior.\n+ */\n+\n+@Slf4j\n+@Configuration\n+@EnableConfigurationProperties(ElideConfigProperties.class)\n+@ConditionalOnExpression(\"${elide.dynamic-config.enabled:false}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eec6ec049d7d35bfbc25d86b0d343145b368de83"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e82788799888246188547c54cab88282c5d51e89", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/e82788799888246188547c54cab88282c5d51e89", "committedDate": "2020-05-15T05:28:04Z", "message": "Review Comments\n\nCo-authored-by: Ayeswarya <ayeswarya.anandan@verizonmedia.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e8000f925f77d615b465365f0fd2f6f8041d239c", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/e8000f925f77d615b465365f0fd2f6f8041d239c", "committedDate": "2020-05-15T05:21:49Z", "message": "Review Comments\n\nCo-authored-by: Ayeswarya <ayeswarya.anandan@verizonmedia.com>"}, "afterCommit": {"oid": "e82788799888246188547c54cab88282c5d51e89", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/e82788799888246188547c54cab88282c5d51e89", "committedDate": "2020-05-15T05:28:04Z", "message": "Review Comments\n\nCo-authored-by: Ayeswarya <ayeswarya.anandan@verizonmedia.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyODE3OTMw", "url": "https://github.com/yahoo/elide/pull/1255#pullrequestreview-412817930", "createdAt": "2020-05-15T17:01:00Z", "commit": {"oid": "e82788799888246188547c54cab88282c5d51e89"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 676, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}