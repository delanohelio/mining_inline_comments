{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5NzE1MzIw", "number": 1127, "title": "Fix sorting and ambiguous join issue", "bodyText": "This is a rebased and updated version of #1085\nSolved #1053 #1024 #1023\n\nFix sorting on aggregation field, which should use aggregation function in ORDER BY clause\nFix ambiguous join, now joining to two different dimensions with same type is allowed\n\nDescription\n\nAdd new data structure JoinTrieNode to hold join path elements\nUpdate SQLQueryConstructor to build join clause from JoinTireNode\nNow all fields use field name to navigate through join path, for example foo.bar1.baz and foo.bar2.baz would be foo_bar1.baz and foo_bar2.baz, so that bar1 and bar2 would not be ambiguous.\nUpdate SQLQueryEngine.generateColumnReference() method, this method would be used for generating SQL column reference in all places to ensure all column references follow the same rule so that there would not be ambiguity.\n\nHow Has This Been Tested?\nAggregationDataStoreIntegrationTest is updated with a new test case.\nLicense\nI confirm that this contribution is made under an Apache 2.0 license and that I have the authority necessary to make this contribution on behalf of its copyright owner.", "createdAt": "2020-01-06T21:11:02Z", "url": "https://github.com/yahoo/elide/pull/1127", "merged": true, "mergeCommit": {"oid": "6de9499569653fbe3ca18d06d42334da448da21a"}, "closed": true, "closedAt": "2020-01-10T20:19:41Z", "author": {"login": "hellohanchen"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb3u4TtAH2gAyMzU5NzE1MzIwOjc1ZmIwMmNjOTc0ZDFlODIzYjQ2NDk0Y2Y3N2VmNzc1MGQ1MzMzMGE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb5EcaaAFqTM0MTQwMDkxOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "75fb02cc974d1e823b46494cf77ef7750d53330a", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/75fb02cc974d1e823b46494cf77ef7750d53330a", "committedDate": "2020-01-06T16:37:54Z", "message": "Added sorting on aggregated metric based on latest elide-5.x"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c5760bbf45ea446822a4e6d5da256bcddf33735", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/6c5760bbf45ea446822a4e6d5da256bcddf33735", "committedDate": "2020-01-06T21:05:30Z", "message": "Fix ambiguity problem"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e29d4136fdb2bf379900a51466847cf8b4154e1", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/0e29d4136fdb2bf379900a51466847cf8b4154e1", "committedDate": "2020-01-07T15:52:07Z", "message": "update comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d74a853db5086ed944c099771370080df54a89c3", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/d74a853db5086ed944c099771370080df54a89c3", "committedDate": "2020-01-07T16:20:14Z", "message": "fix codacy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a9857cfae96dedfa9a263ff7b4120dcbe21c11f", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/1a9857cfae96dedfa9a263ff7b4120dcbe21c11f", "committedDate": "2020-01-07T20:17:32Z", "message": "refactor generateColumnReference"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84dfe53341f49df68f0af7de661c2d84338b0c5d", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/84dfe53341f49df68f0af7de661c2d84338b0c5d", "committedDate": "2020-01-07T20:23:25Z", "message": "update comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5NDk0ODg5", "url": "https://github.com/yahoo/elide/pull/1127#pullrequestreview-339494889", "createdAt": "2020-01-07T20:42:38Z", "commit": {"oid": "84dfe53341f49df68f0af7de661c2d84338b0c5d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QyMDo0MjozOFrOFbFO2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QyMjoyMDoyMlrOFbHkow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk0MTU5Mg==", "bodyText": "Let's add a unit test class (JoinTrieNodeTest) to get test coverage to a high percentage.", "url": "https://github.com/yahoo/elide/pull/1127#discussion_r363941592", "createdAt": "2020-01-07T20:42:38Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/utils/JoinTrieNode.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2019, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.utils;\n+\n+import com.yahoo.elide.core.EntityDictionary;\n+import com.yahoo.elide.core.Path;\n+\n+import lombok.Data;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * This is a structure for storing and de-duplicating elide join paths.\n+ * Basically, it is a Trie which uses relationship field names to navigate through the path.\n+ */\n+@Data\n+public class JoinTrieNode {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84dfe53341f49df68f0af7de661c2d84338b0c5d"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk0MzU0NA==", "bodyText": "The set of all fields should be contained within the query itself.  Instead of passing this in as an argument, the QueryValidator can build the list of all the fields from the query.", "url": "https://github.com/yahoo/elide/pull/1127#discussion_r363943544", "createdAt": "2020-01-07T20:47:35Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryValidator.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2019, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation;\n+\n+import com.yahoo.elide.core.EntityDictionary;\n+import com.yahoo.elide.core.Path;\n+import com.yahoo.elide.core.exceptions.InvalidOperationException;\n+import com.yahoo.elide.core.filter.FilterPredicate;\n+import com.yahoo.elide.core.filter.expression.AndFilterExpression;\n+import com.yahoo.elide.core.filter.expression.FilterExpression;\n+import com.yahoo.elide.core.filter.expression.NotFilterExpression;\n+import com.yahoo.elide.core.filter.expression.OrFilterExpression;\n+import com.yahoo.elide.core.sort.Sorting;\n+import com.yahoo.elide.datastores.aggregation.metadata.metric.MetricFunctionInvocation;\n+import com.yahoo.elide.datastores.aggregation.metadata.models.AnalyticView;\n+import com.yahoo.elide.datastores.aggregation.query.ColumnProjection;\n+import com.yahoo.elide.datastores.aggregation.query.Query;\n+import org.apache.commons.collections.CollectionUtils;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+public class QueryValidator {\n+\n+    private Query query;\n+    private Set<String> allFields;\n+    private EntityDictionary dictionary;\n+    private Class<?> type;\n+    private AnalyticView queriedTable;\n+    private List<MetricFunctionInvocation> metrics;\n+    private Set<ColumnProjection> dimensionProjections;\n+\n+    public QueryValidator(Query query, Set<String> allFields, EntityDictionary dictionary, Class<?> type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84dfe53341f49df68f0af7de661c2d84338b0c5d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk0MzY5Mw==", "bodyText": "Same comment applies to the type argument.", "url": "https://github.com/yahoo/elide/pull/1127#discussion_r363943693", "createdAt": "2020-01-07T20:48:01Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryValidator.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2019, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation;\n+\n+import com.yahoo.elide.core.EntityDictionary;\n+import com.yahoo.elide.core.Path;\n+import com.yahoo.elide.core.exceptions.InvalidOperationException;\n+import com.yahoo.elide.core.filter.FilterPredicate;\n+import com.yahoo.elide.core.filter.expression.AndFilterExpression;\n+import com.yahoo.elide.core.filter.expression.FilterExpression;\n+import com.yahoo.elide.core.filter.expression.NotFilterExpression;\n+import com.yahoo.elide.core.filter.expression.OrFilterExpression;\n+import com.yahoo.elide.core.sort.Sorting;\n+import com.yahoo.elide.datastores.aggregation.metadata.metric.MetricFunctionInvocation;\n+import com.yahoo.elide.datastores.aggregation.metadata.models.AnalyticView;\n+import com.yahoo.elide.datastores.aggregation.query.ColumnProjection;\n+import com.yahoo.elide.datastores.aggregation.query.Query;\n+import org.apache.commons.collections.CollectionUtils;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+public class QueryValidator {\n+\n+    private Query query;\n+    private Set<String> allFields;\n+    private EntityDictionary dictionary;\n+    private Class<?> type;\n+    private AnalyticView queriedTable;\n+    private List<MetricFunctionInvocation> metrics;\n+    private Set<ColumnProjection> dimensionProjections;\n+\n+    public QueryValidator(Query query, Set<String> allFields, EntityDictionary dictionary, Class<?> type) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk0MzU0NA=="}, "originalCommit": {"oid": "84dfe53341f49df68f0af7de661c2d84338b0c5d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk0NTY2OQ==", "bodyText": "I think we should try to make the errors friendly to a client of Elide - so we should remove things like \"classes\".\nLet's rephrase in terms of what is wrong with the API request.", "url": "https://github.com/yahoo/elide/pull/1127#discussion_r363945669", "createdAt": "2020-01-07T20:53:12Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryValidator.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2019, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation;\n+\n+import com.yahoo.elide.core.EntityDictionary;\n+import com.yahoo.elide.core.Path;\n+import com.yahoo.elide.core.exceptions.InvalidOperationException;\n+import com.yahoo.elide.core.filter.FilterPredicate;\n+import com.yahoo.elide.core.filter.expression.AndFilterExpression;\n+import com.yahoo.elide.core.filter.expression.FilterExpression;\n+import com.yahoo.elide.core.filter.expression.NotFilterExpression;\n+import com.yahoo.elide.core.filter.expression.OrFilterExpression;\n+import com.yahoo.elide.core.sort.Sorting;\n+import com.yahoo.elide.datastores.aggregation.metadata.metric.MetricFunctionInvocation;\n+import com.yahoo.elide.datastores.aggregation.metadata.models.AnalyticView;\n+import com.yahoo.elide.datastores.aggregation.query.ColumnProjection;\n+import com.yahoo.elide.datastores.aggregation.query.Query;\n+import org.apache.commons.collections.CollectionUtils;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+public class QueryValidator {\n+\n+    private Query query;\n+    private Set<String> allFields;\n+    private EntityDictionary dictionary;\n+    private Class<?> type;\n+    private AnalyticView queriedTable;\n+    private List<MetricFunctionInvocation> metrics;\n+    private Set<ColumnProjection> dimensionProjections;\n+\n+    public QueryValidator(Query query, Set<String> allFields, EntityDictionary dictionary, Class<?> type) {\n+        this.query = query;\n+        this.allFields = allFields;\n+        this.dictionary = dictionary;\n+        this.type = type;\n+        this.queriedTable = query.getAnalyticView();\n+        this.metrics = query.getMetrics();\n+        this.dimensionProjections = query.getDimensions();\n+    }\n+\n+    /**\n+     * Method that handles all checks to make sure query is valid before we attempt to execute the query.\n+     */\n+    public void validate() {\n+        FilterExpression havingClause = query.getHavingFilter();\n+        validateHavingClause(havingClause);\n+        validateSorting();\n+        validateMetricFunction();\n+    }\n+\n+    /**\n+     * Checks to make sure at least one metric is being aggregated on.\n+     */\n+    private void validateMetricFunction() {\n+        if (CollectionUtils.isEmpty(metrics)) {\n+            throw new InvalidOperationException(\"Must provide at least one metric in query\");\n+        }\n+    }\n+\n+    /**\n+     * Validate the having clause before execution. Having clause is not as flexible as where clause,\n+     * the fields in having clause must be either or these two:\n+     * 1. A grouped by dimension in this query\n+     * 2. An aggregated metric in this query\n+     *\n+     * All grouped by dimensions are defined in the entity bean, so the last entity class of a filter path\n+     * must match entity class of the query.\n+     *\n+     * @param havingClause having clause generated from this query\n+     */\n+    private void validateHavingClause(FilterExpression havingClause) {\n+        // TODO: support having clause for alias\n+        if (havingClause instanceof FilterPredicate) {\n+            Path path = ((FilterPredicate) havingClause).getPath();\n+            Path.PathElement last = path.lastElement().get();\n+            Class<?> cls = last.getType();\n+            String fieldName = last.getFieldName();\n+\n+            if (cls != queriedTable.getCls()) {\n+                throw new InvalidOperationException(\n+                        String.format(\n+                                \"Classes don't match when try filtering on %s in having clause of %s.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84dfe53341f49df68f0af7de661c2d84338b0c5d"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk0NjI2OA==", "bodyText": "Let's create a Unit Test class (QueryValidatorTest) for this class and verify all of the corner cases.", "url": "https://github.com/yahoo/elide/pull/1127#discussion_r363946268", "createdAt": "2020-01-07T20:54:45Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryValidator.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2019, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation;\n+\n+import com.yahoo.elide.core.EntityDictionary;\n+import com.yahoo.elide.core.Path;\n+import com.yahoo.elide.core.exceptions.InvalidOperationException;\n+import com.yahoo.elide.core.filter.FilterPredicate;\n+import com.yahoo.elide.core.filter.expression.AndFilterExpression;\n+import com.yahoo.elide.core.filter.expression.FilterExpression;\n+import com.yahoo.elide.core.filter.expression.NotFilterExpression;\n+import com.yahoo.elide.core.filter.expression.OrFilterExpression;\n+import com.yahoo.elide.core.sort.Sorting;\n+import com.yahoo.elide.datastores.aggregation.metadata.metric.MetricFunctionInvocation;\n+import com.yahoo.elide.datastores.aggregation.metadata.models.AnalyticView;\n+import com.yahoo.elide.datastores.aggregation.query.ColumnProjection;\n+import com.yahoo.elide.datastores.aggregation.query.Query;\n+import org.apache.commons.collections.CollectionUtils;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+public class QueryValidator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84dfe53341f49df68f0af7de661c2d84338b0c5d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk0ODQ1Ng==", "bodyText": "I\"m not sure about the model.\nA player isn't tied to another player directly.  They are tied together through a match or game.", "url": "https://github.com/yahoo/elide/pull/1127#discussion_r363948456", "createdAt": "2020-01-07T21:00:14Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/example/Player.java", "diffHunk": "@@ -31,4 +32,8 @@\n \n     @FriendlyName\n     private String name;\n+\n+    @OneToOne\n+    @JoinColumn(name = \"opponent_id\")\n+    private Player opponent;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84dfe53341f49df68f0af7de661c2d84338b0c5d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk1MzAxMA==", "bodyText": "I think we ought to break this up into two functions.  The trie data structure ought to have a function for streaming the contents or something.\nThis function can take the result of that and build the join strings.", "url": "https://github.com/yahoo/elide/pull/1127#discussion_r363953010", "createdAt": "2020-01-07T21:12:14Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryConstructor.java", "diffHunk": "@@ -203,42 +208,74 @@ private String constructProjectionWithReference(SQLQueryTemplate template, SQLAn\n     }\n \n     /**\n-     * Given one component of the path taken to reach a particular field, extracts any table\n-     * joins that are required to perform the traversal to the field.\n+     * Build full join clause for all join paths in a {@link JoinTrieNode}.\n+     *\n+     * @param root root node which type is the queried table class\n+     * @return built join clause that contains all needed relationship dimension joins for this query.\n+     */\n+    private String extractJoin(JoinTrieNode root) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84dfe53341f49df68f0af7de661c2d84338b0c5d"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk1NDI2NQ==", "bodyText": "Logic to construct the alias name should ideally be centralized to a single place.", "url": "https://github.com/yahoo/elide/pull/1127#discussion_r363954265", "createdAt": "2020-01-07T21:15:40Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryConstructor.java", "diffHunk": "@@ -203,42 +208,74 @@ private String constructProjectionWithReference(SQLQueryTemplate template, SQLAn\n     }\n \n     /**\n-     * Given one component of the path taken to reach a particular field, extracts any table\n-     * joins that are required to perform the traversal to the field.\n+     * Build full join clause for all join paths in a {@link JoinTrieNode}.\n+     *\n+     * @param root root node which type is the queried table class\n+     * @return built join clause that contains all needed relationship dimension joins for this query.\n+     */\n+    private String extractJoin(JoinTrieNode root) {\n+        // parentAlias-JoinTrieNode pairs queue\n+        Queue<Pair<String, JoinTrieNode>> todo = new ArrayDeque<>();\n+\n+        todo.add(new Pair<>(getClassAlias(root.getType()), root));\n+        List<String> joinClauses = new ArrayList<>();\n+\n+        while (!todo.isEmpty()) {\n+            Pair<String, JoinTrieNode> current = todo.remove();\n+            String parentAlias = current.getKey();\n+            JoinTrieNode parent = current.getValue();\n+            Map<String, JoinTrieNode> fields = parent.getFields();\n+\n+            fields.forEach((name, child) -> {\n+                joinClauses.add(extractJoin(parent.getType(), parentAlias, child.getType(), name));\n+\n+                if (child.getFields().size() > 0) {\n+                    todo.add(new Pair<>(parentAlias + \"_\" + name, child));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84dfe53341f49df68f0af7de661c2d84338b0c5d"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk1OTc5NQ==", "bodyText": "We should avoid spreading out the logic to generate aliases.", "url": "https://github.com/yahoo/elide/pull/1127#discussion_r363959795", "createdAt": "2020-01-07T21:29:30Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java", "diffHunk": "@@ -252,4 +277,24 @@ private SQLQuery toPageTotalSQL(SQLQuery sql) {\n     public static String getClassAlias(Class<?> entityClass) {\n         return FilterPredicate.getTypeAlias(entityClass);\n     }\n+\n+    /**\n+     * Generate alias for represent the join path.\n+     * The path would start with the class alias of the first element, and then each field would append \"_fieldName\" to\n+     * the result.\n+     * The last element would not be included as that's not a part of the join path.\n+     *\n+     * @param path path that represents a relationship chain\n+     * @return join path alias, i.e. <code>foo.bar.baz</code> would be <code>foo_bar</code>\n+     */\n+    public static String getJoinPathAlias(Path path) {\n+        List<Path.PathElement> elements = path.getPathElements();\n+        StringBuilder result = new StringBuilder(getClassAlias(elements.get(0).getType()));\n+\n+        for (int i = 0; i < elements.size() - 1; i++) {\n+            result.append(\"_\").append(elements.get(i).getFieldName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84dfe53341f49df68f0af7de661c2d84338b0c5d"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk2MDA3NQ==", "bodyText": "I believe this used to live in a single place in Elide.", "url": "https://github.com/yahoo/elide/pull/1127#discussion_r363960075", "createdAt": "2020-01-07T21:30:11Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java", "diffHunk": "@@ -252,4 +277,24 @@ private SQLQuery toPageTotalSQL(SQLQuery sql) {\n     public static String getClassAlias(Class<?> entityClass) {\n         return FilterPredicate.getTypeAlias(entityClass);\n     }\n+\n+    /**\n+     * Generate alias for represent the join path.\n+     * The path would start with the class alias of the first element, and then each field would append \"_fieldName\" to\n+     * the result.\n+     * The last element would not be included as that's not a part of the join path.\n+     *\n+     * @param path path that represents a relationship chain\n+     * @return join path alias, i.e. <code>foo.bar.baz</code> would be <code>foo_bar</code>\n+     */\n+    public static String getJoinPathAlias(Path path) {\n+        List<Path.PathElement> elements = path.getPathElements();\n+        StringBuilder result = new StringBuilder(getClassAlias(elements.get(0).getType()));\n+\n+        for (int i = 0; i < elements.size() - 1; i++) {\n+            result.append(\"_\").append(elements.get(i).getFieldName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk1OTc5NQ=="}, "originalCommit": {"oid": "84dfe53341f49df68f0af7de661c2d84338b0c5d"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk3OTkzOQ==", "bodyText": "What is this trying to test?", "url": "https://github.com/yahoo/elide/pull/1127#discussion_r363979939", "createdAt": "2020-01-07T22:20:22Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreIntegrationTest.java", "diffHunk": "@@ -502,10 +506,298 @@ public void timeGrainAggregationTest() throws Exception {\n                                 \"playerStats\",\n                                 selections(\n                                         field(\"highScore\", 2412),\n-                                        field(\"recordedDate\", \"2019-07-01T00:00Z\")\n+                                        field(\n+                                                \"country\",\n+                                                selections(\n+                                                        field(\"name\", \"United States\")\n+                                                )\n+                                        )\n+                                ),\n+                                selections(\n+                                        field(\"highScore\", 1000),\n+                                        field(\n+                                                \"country\",\n+                                                selections(\n+                                                        field(\"name\", \"Hong Kong\")\n+                                                )\n+                                        )\n+                                )\n+                        )\n+                )\n+        ).toResponse();\n+\n+        runQueryWithExpectedResult(graphQLRequest, expected);\n+    }\n+\n+    @Test\n+    public void nestedDimensionNotInQuerySortingTest() throws Exception {\n+        String graphQLRequest = document(\n+                selection(\n+                        field(\n+                                \"playerStats\",\n+                                arguments(\n+                                        argument(\"sort\", \"\\\"-country.name,lowScore\\\"\")\n+                                ),\n+                                selections(\n+                                        field(\"lowScore\")\n+                                )\n+                        )\n+                )\n+        ).toQuery();\n+\n+        String expected = \"\\\"Exception while fetching data (/playerStats) : Invalid operation: 'Can't sort on country as it is not present in query'\\\"\";\n+\n+        runQueryWithExpectedError(graphQLRequest, expected);\n+    }\n+\n+    @Test\n+    public void sortingOnIdTest() throws Exception {\n+        String graphQLRequest = document(\n+                selection(\n+                        field(\n+                                \"playerStats\",\n+                                arguments(\n+                                        argument(\"sort\", \"\\\"id\\\"\")\n+                                ),\n+                                selections(\n+                                        field(\"lowScore\"),\n+                                        field(\"id\")\n+                                )\n+                        )\n+                )\n+        ).toQuery();\n+\n+        String expected = \"\\\"Exception while fetching data (/playerStats) : Invalid operation: 'Sorting on id field is not permitted'\\\"\";\n+\n+        runQueryWithExpectedError(graphQLRequest, expected);\n+    }\n+\n+    @Test\n+    public void multipleColumnsSortingTest() throws Exception {\n+        String graphQLRequest = document(\n+                selection(\n+                        field(\n+                                \"playerStats\",\n+                                arguments(\n+                                        argument(\"sort\", \"\\\"overallRating,player.name\\\"\")\n+                                ),\n+                                selections(\n+                                        field(\"overallRating\"),\n+                                        field(\"lowScore\"),\n+                                        field(\n+                                                \"player\",\n+                                                selections(\n+                                                        field(\"name\")\n+                                                )\n+                                        )\n+                                )\n+                        )\n+                )\n+        ).toQuery();\n+\n+        String expected = document(\n+                selections(\n+                        field(\n+                                \"playerStats\",\n+                                selections(\n+                                        field(\"overallRating\", \"Good\"),\n+                                        field(\"lowScore\", 72),\n+                                        field(\n+                                                \"player\",\n+                                                selections(\n+                                                        field(\"name\", \"Han\")\n+                                                )\n+                                        )\n+                                ),\n+                                selections(\n+                                        field(\"overallRating\", \"Good\"),\n+                                        field(\"lowScore\", 35),\n+                                        field(\n+                                                \"player\",\n+                                                selections(\n+                                                        field(\"name\", \"Jon Doe\")\n+                                                )\n+                                        )\n+                                ),\n+                                selections(\n+                                        field(\"overallRating\", \"Great\"),\n+                                        field(\"lowScore\", 241),\n+                                        field(\n+                                                \"player\",\n+                                                selections(\n+                                                        field(\"name\", \"Jane Doe\")\n+                                                )\n+                                        )\n                                 )\n                         )\n-                )).toResponse();\n+                )\n+        ).toResponse();\n+\n+        runQueryWithExpectedResult(graphQLRequest, expected);\n+    }\n+\n+    @Test\n+    public void sortingOnMetricNotInQueryTest() throws Exception {\n+        String graphQLRequest = document(\n+                selection(\n+                        field(\n+                                \"playerStats\",\n+                                arguments(\n+                                        argument(\"sort\", \"\\\"highScore\\\"\")\n+                                ),\n+                                selections(\n+                                        field(\"lowScore\"),\n+                                        field(\n+                                                \"country\",\n+                                                selections(\n+                                                        field(\"name\")\n+                                                )\n+                                        )\n+                                )\n+                        )\n+                )\n+        ).toQuery();\n+\n+        String expected = \"\\\"Exception while fetching data (/playerStats) : Invalid operation: 'Can't sort on highScore as it is not present in query'\\\"\";\n+\n+        runQueryWithExpectedError(graphQLRequest, expected);\n+    }\n+\n+    @Test\n+    public void noMetricQueryTest() throws Exception {\n+        String graphQLRequest = document(\n+                selection(\n+                        field(\n+                                \"playerStats\",\n+                                selections(\n+                                        field(\n+                                                \"country\",\n+                                                selections(\n+                                                        field(\"name\")\n+                                                )\n+                                        )\n+                                )\n+                        )\n+                )\n+        ).toQuery();\n+\n+        String expected = \"\\\"Exception while fetching data (/playerStats) : Invalid operation: 'Must provide at least one metric in query'\\\"\";\n+\n+        runQueryWithExpectedError(graphQLRequest, expected);\n+    }\n+\n+    @Test\n+    public void sortingMultipleLevelNesting() throws Exception {\n+        String graphQLRequest = document(\n+                selection(\n+                        field(\n+                                \"playerStats\",\n+                                arguments(\n+                                        argument(\"sort\", \"\\\"country.continent.name\\\"\")\n+                                ),\n+                                selections(\n+                                        field(\"lowScore\"),\n+                                        field(\n+                                                \"country\",\n+                                                selections(\n+                                                        field(\"name\"),\n+                                                        field(\n+                                                                \"continent\",\n+                                                                selections(\n+                                                                        field(\"name\")\n+                                                                )\n+                                                        )\n+                                                )\n+                                        )\n+                                )\n+                        )\n+                )\n+        ).toQuery();\n+\n+        String expected = \"\\\"Exception while fetching data (/playerStats) : Currently sorting on double nested fields is not supported\\\"\";\n+\n+        runQueryWithExpectedError(graphQLRequest, expected);\n+    }\n+\n+    @Test\n+    public void ambiguousFieldTest() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84dfe53341f49df68f0af7de661c2d84338b0c5d"}, "originalPosition": 323}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e6577d3575b10eadf902a215adc6b5576a9a626", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/3e6577d3575b10eadf902a215adc6b5576a9a626", "committedDate": "2020-01-08T16:50:47Z", "message": "address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2098cf8c16357a5af495bcc3223dd9b7c5427fe4", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/2098cf8c16357a5af495bcc3223dd9b7c5427fe4", "committedDate": "2020-01-08T17:07:44Z", "message": "test cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwMTYxODQ0", "url": "https://github.com/yahoo/elide/pull/1127#pullrequestreview-340161844", "createdAt": "2020-01-08T21:38:57Z", "commit": {"oid": "3e6577d3575b10eadf902a215adc6b5576a9a626"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMTozODo1N1rOFbkoXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMTozODo1N1rOFbkoXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ1NjAyOA==", "bodyText": "This is still duplicating alias generation with the original Elide Code in FilterPredicate.  I think we should refactor so alias generation happens once across the board.", "url": "https://github.com/yahoo/elide/pull/1127#discussion_r364456028", "createdAt": "2020-01-08T21:38:57Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java", "diffHunk": "@@ -289,12 +289,23 @@ public static String getClassAlias(Class<?> entityClass) {\n      */\n     public static String getJoinPathAlias(Path path) {\n         List<Path.PathElement> elements = path.getPathElements();\n-        StringBuilder result = new StringBuilder(getClassAlias(elements.get(0).getType()));\n+        String result = getClassAlias(elements.get(0).getType());\n \n         for (int i = 0; i < elements.size() - 1; i++) {\n-            result.append(\"_\").append(elements.get(i).getFieldName());\n+            result = appendAlias(result, elements.get(i).getFieldName());\n         }\n \n-        return result.toString();\n+        return result;\n+    }\n+\n+    /**\n+     * Append a new field to a parent alias to get new alias.\n+     *\n+     * @param parentAlias parent path alias\n+     * @param fieldName field name\n+     * @return alias for the field\n+     */\n+    public static String appendAlias(String parentAlias, String fieldName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e6577d3575b10eadf902a215adc6b5576a9a626"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0599106c202e765fc71363b90791bd492f88904", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/e0599106c202e765fc71363b90791bd492f88904", "committedDate": "2020-01-08T22:06:56Z", "message": "update unittest"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwMTg0MzQz", "url": "https://github.com/yahoo/elide/pull/1127#pullrequestreview-340184343", "createdAt": "2020-01-08T22:23:43Z", "commit": {"oid": "2098cf8c16357a5af495bcc3223dd9b7c5427fe4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMjoyMzo0M1rOFblsBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMjoyMzo0M1rOFblsBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ3MzM0OA==", "bodyText": "I think this function should take no functional arguments, and instead just return a list or a stream of Paths.", "url": "https://github.com/yahoo/elide/pull/1127#discussion_r364473348", "createdAt": "2020-01-08T22:23:43Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/utils/JoinTrieNode.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2019, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.utils;\n+\n+import com.yahoo.elide.core.EntityDictionary;\n+import com.yahoo.elide.core.Path;\n+\n+import javafx.util.Pair;\n+import lombok.Data;\n+\n+import java.util.ArrayDeque;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Queue;\n+import java.util.Set;\n+import java.util.function.BiFunction;\n+\n+/**\n+ * This is a structure for storing and de-duplicating elide join paths.\n+ * Basically, it is a Trie which uses relationship field names to navigate through the path.\n+ */\n+@Data\n+public class JoinTrieNode {\n+    private final Class<?> type;\n+    private final Map<String, JoinTrieNode> fields = new HashMap<>();\n+\n+    public JoinTrieNode(Class<?> type) {\n+        this.type = type;\n+    }\n+\n+    public void addPaths(Set<Path> paths, EntityDictionary dictionary) {\n+        paths.forEach(path -> addPath(path, dictionary));\n+    }\n+\n+    /**\n+     * Add all path elements into this Trie, starting from the root.\n+     *\n+     * @param path full Elide join path, i.e. <code>foo.bar.baz</code>\n+     * @param dictionary dictionary to use.\n+     */\n+    public void addPath(Path path, EntityDictionary dictionary) {\n+        JoinTrieNode node = this;\n+\n+        for (Path.PathElement pathElement : path.getPathElements()) {\n+            Class<?> entityClass = pathElement.getType();\n+            String fieldName = pathElement.getFieldName();\n+\n+            if (!dictionary.isRelation(entityClass, fieldName)) {\n+                break;\n+            }\n+\n+            if (!fields.containsKey(fieldName)) {\n+                node.addField(fieldName, new JoinTrieNode(pathElement.getFieldType()));\n+\n+            }\n+\n+            node = fields.get(fieldName);\n+        }\n+    }\n+\n+    /**\n+     * Attach a field to this node.\n+     *\n+     * @param fieldName field name\n+     * @param node field node\n+     */\n+    private void addField(String fieldName, JoinTrieNode node) {\n+        fields.put(fieldName, node);\n+    }\n+\n+    /**\n+     * Traverse this Trie and project the result into a list in level-first-order.\n+     * This previous result-node pair would be carried through the traversal.\n+     *\n+     * @param generator function that generate new results from previous result-node pair and new trie field\n+     * @param traverser function that carry previous result for next level traversal\n+     * @param identity initial result value\n+     * @param <T> type of each individual result\n+     * @return resulted projected in a list in level-first-order.\n+     */\n+    public <T> List<T> levelOrderedTraverse(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2098cf8c16357a5af495bcc3223dd9b7c5427fe4"}, "originalPosition": 86}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b26bf257fc856b382aeeea40785da37f890b0c93", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/b26bf257fc856b382aeeea40785da37f890b0c93", "committedDate": "2020-01-08T23:00:34Z", "message": "fix elide core alias"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0dc607286ae6dc5437f9b8942bd3ec0d2bd0779d", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/0dc607286ae6dc5437f9b8942bd3ec0d2bd0779d", "committedDate": "2020-01-09T16:43:12Z", "message": "QueryValidatorTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c0503f01a3d39ca689277d947f5516a5035dcc8", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/5c0503f01a3d39ca689277d947f5516a5035dcc8", "committedDate": "2020-01-09T18:16:52Z", "message": "EntityProjectionTranslatorTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "221ff8ad785389fc72b7bf671bb857bc9f8a0379", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/221ff8ad785389fc72b7bf671bb857bc9f8a0379", "committedDate": "2020-01-09T21:51:23Z", "message": "go joinFragment approach"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c05c595cfa0c87eddd79c7383e86afb53112a621", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/c05c595cfa0c87eddd79c7383e86afb53112a621", "committedDate": "2020-01-09T22:55:12Z", "message": "delete jointrienode"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxNDAwOTE4", "url": "https://github.com/yahoo/elide/pull/1127#pullrequestreview-341400918", "createdAt": "2020-01-10T20:19:16Z", "commit": {"oid": "c05c595cfa0c87eddd79c7383e86afb53112a621"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 678, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}