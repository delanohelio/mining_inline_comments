{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzODIxMTcw", "number": 1236, "title": "Enforce ReadPermission for filter joins", "bodyText": "Description\nEnforce ReadPermission for filter joins.\nClean up duplicated filter expression builder in RequestScope.getLoadFilterExpression\nMotivation and Context\nRestricts filter join access to fields that pass ReadPermission.\nHow Has This Been Tested?\nBuild tests.  Added additional Integration test.\nTested locally with end product.\nLicense\nI confirm that this contribution is made under an Apache 2.0 license and that I have the authority necessary to make this contribution on behalf of its copyright owner.", "createdAt": "2020-03-25T20:50:40Z", "url": "https://github.com/yahoo/elide/pull/1236", "merged": true, "mergeCommit": {"oid": "7239e47eca00226550300e5e67cdabbf12145ef0"}, "closed": true, "closedAt": "2020-03-26T15:56:04Z", "author": {"login": "wcekan"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcRHit3gH2gAyMzkzODIxMTcwOmI3NjQ3ZGQxM2E0YjUwMmExZDNlYjkyNDIxNmM2YmQ2N2RlNWQwZWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRc8aBgFqTM4MjA2MTQ4Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b7647dd13a4b502a1d3eb924216c6bd67de5d0ef", "author": {"user": {"login": "wcekan", "name": "William Cekan"}}, "url": "https://github.com/yahoo/elide/commit/b7647dd13a4b502a1d3eb924216c6bd67de5d0ef", "committedDate": "2020-03-25T13:30:03Z", "message": "Enforce Read Permissions on Join Filter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "354297ee574a2da59a32216d208f2a764c00f5f7", "author": {"user": {"login": "wcekan", "name": "William Cekan"}}, "url": "https://github.com/yahoo/elide/commit/354297ee574a2da59a32216d208f2a764c00f5f7", "committedDate": "2020-03-25T20:33:37Z", "message": "move filterexpression into filter method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a985f0f9c448aabe70bc904337096399de4576dc", "author": {"user": {"login": "wcekan", "name": "William Cekan"}}, "url": "https://github.com/yahoo/elide/commit/a985f0f9c448aabe70bc904337096399de4576dc", "committedDate": "2020-03-25T20:50:54Z", "message": "Merge branch 'master' into enforce_join_filter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxNTQ4Mzgx", "url": "https://github.com/yahoo/elide/pull/1236#pullrequestreview-381548381", "createdAt": "2020-03-25T21:25:27Z", "commit": {"oid": "a985f0f9c448aabe70bc904337096399de4576dc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMToyNToyN1rOF7u8yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMTo0MjoxMlrOF7veLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE3OTUzMA==", "bodyText": "should be left || right.", "url": "https://github.com/yahoo/elide/pull/1236#discussion_r398179530", "createdAt": "2020-03-25T21:25:27Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/EnforceJoinFilterExpressionVisitor.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.core;\n+\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.core.exceptions.ForbiddenAccessException;\n+import com.yahoo.elide.core.filter.FilterPredicate;\n+import com.yahoo.elide.core.filter.expression.AndFilterExpression;\n+import com.yahoo.elide.core.filter.expression.FilterExpressionVisitor;\n+import com.yahoo.elide.core.filter.expression.NotFilterExpression;\n+import com.yahoo.elide.core.filter.expression.OrFilterExpression;\n+\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.Spliterators;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * Enforce read permission on filter join\n+ */\n+public class EnforceJoinFilterExpressionVisitor implements FilterExpressionVisitor<Boolean> {\n+    private PersistentResource<?> resource;\n+\n+    public EnforceJoinFilterExpressionVisitor(PersistentResource<?> resource) {\n+        this.resource = resource;\n+    }\n+\n+    /**\n+     * Enforce ReadPermission on provided query filter\n+     *\n+     * @return true if allowed, false if rejected\n+     */\n+    @Override\n+    public Boolean visitPredicate(FilterPredicate filterPredicate) {\n+        RequestScope requestScope = resource.getRequestScope();\n+        Set<PersistentResource> val = Collections.singleton(resource);\n+        for (Path.PathElement pathElement : filterPredicate.getPath().getPathElements()) {\n+            Class<?> entityClass = pathElement.getType();\n+            String fieldName = pathElement.getFieldName();\n+\n+            if (\"this\".equals(fieldName)) {\n+                continue;\n+            }\n+\n+            try {\n+                val = val.stream()\n+                        .filter(Objects::nonNull)\n+                        .flatMap(x -> getValueChecked(x, fieldName, requestScope))\n+                        .filter(Objects::nonNull)\n+                        .collect(Collectors.toSet());\n+            } catch (IllegalArgumentException e) {\n+                // Not a persistent resource\n+            } catch (ForbiddenAccessException e) {\n+                return false;\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+    private Stream<PersistentResource> getValueChecked(PersistentResource<?> resource, String fieldName,\n+            RequestScope requestScope) {\n+        // checkFieldAwareReadPermissions\n+        requestScope.getPermissionExecutor().checkSpecificFieldPermissions(resource, null, ReadPermission.class,\n+                fieldName);\n+        Object obj = PersistentResource.getValue(resource.getObject(), fieldName, requestScope);\n+        PersistentResourceSet persistentResourceSet;\n+        if (obj instanceof Iterable) {\n+            persistentResourceSet = new PersistentResourceSet(resource, (Iterable) obj, requestScope);\n+        } else if (obj != null) {\n+            persistentResourceSet = new PersistentResourceSet(resource, Collections.singleton(obj), requestScope);\n+        } else {\n+            return Stream.empty();\n+        }\n+\n+        return StreamSupport.stream(Spliterators.spliteratorUnknownSize(persistentResourceSet.iterator(), 0), false);\n+    }\n+\n+    @Override\n+    public Boolean visitAndExpression(AndFilterExpression expression) {\n+        Boolean left = expression.getLeft().accept(this);\n+        Boolean right = expression.getRight().accept(this);\n+        // neither rejected\n+        return left && right;\n+    }\n+\n+    @Override\n+    public Boolean visitOrExpression(OrFilterExpression expression) {\n+        Boolean left = expression.getLeft().accept(this);\n+        Boolean right = expression.getRight().accept(this);\n+        // neither rejected\n+        return left && right;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a985f0f9c448aabe70bc904337096399de4576dc"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE3OTgyMg==", "bodyText": "We need to negate the value of the accept.", "url": "https://github.com/yahoo/elide/pull/1236#discussion_r398179822", "createdAt": "2020-03-25T21:25:53Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/EnforceJoinFilterExpressionVisitor.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.core;\n+\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.core.exceptions.ForbiddenAccessException;\n+import com.yahoo.elide.core.filter.FilterPredicate;\n+import com.yahoo.elide.core.filter.expression.AndFilterExpression;\n+import com.yahoo.elide.core.filter.expression.FilterExpressionVisitor;\n+import com.yahoo.elide.core.filter.expression.NotFilterExpression;\n+import com.yahoo.elide.core.filter.expression.OrFilterExpression;\n+\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.Spliterators;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * Enforce read permission on filter join\n+ */\n+public class EnforceJoinFilterExpressionVisitor implements FilterExpressionVisitor<Boolean> {\n+    private PersistentResource<?> resource;\n+\n+    public EnforceJoinFilterExpressionVisitor(PersistentResource<?> resource) {\n+        this.resource = resource;\n+    }\n+\n+    /**\n+     * Enforce ReadPermission on provided query filter\n+     *\n+     * @return true if allowed, false if rejected\n+     */\n+    @Override\n+    public Boolean visitPredicate(FilterPredicate filterPredicate) {\n+        RequestScope requestScope = resource.getRequestScope();\n+        Set<PersistentResource> val = Collections.singleton(resource);\n+        for (Path.PathElement pathElement : filterPredicate.getPath().getPathElements()) {\n+            Class<?> entityClass = pathElement.getType();\n+            String fieldName = pathElement.getFieldName();\n+\n+            if (\"this\".equals(fieldName)) {\n+                continue;\n+            }\n+\n+            try {\n+                val = val.stream()\n+                        .filter(Objects::nonNull)\n+                        .flatMap(x -> getValueChecked(x, fieldName, requestScope))\n+                        .filter(Objects::nonNull)\n+                        .collect(Collectors.toSet());\n+            } catch (IllegalArgumentException e) {\n+                // Not a persistent resource\n+            } catch (ForbiddenAccessException e) {\n+                return false;\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+    private Stream<PersistentResource> getValueChecked(PersistentResource<?> resource, String fieldName,\n+            RequestScope requestScope) {\n+        // checkFieldAwareReadPermissions\n+        requestScope.getPermissionExecutor().checkSpecificFieldPermissions(resource, null, ReadPermission.class,\n+                fieldName);\n+        Object obj = PersistentResource.getValue(resource.getObject(), fieldName, requestScope);\n+        PersistentResourceSet persistentResourceSet;\n+        if (obj instanceof Iterable) {\n+            persistentResourceSet = new PersistentResourceSet(resource, (Iterable) obj, requestScope);\n+        } else if (obj != null) {\n+            persistentResourceSet = new PersistentResourceSet(resource, Collections.singleton(obj), requestScope);\n+        } else {\n+            return Stream.empty();\n+        }\n+\n+        return StreamSupport.stream(Spliterators.spliteratorUnknownSize(persistentResourceSet.iterator(), 0), false);\n+    }\n+\n+    @Override\n+    public Boolean visitAndExpression(AndFilterExpression expression) {\n+        Boolean left = expression.getLeft().accept(this);\n+        Boolean right = expression.getRight().accept(this);\n+        // neither rejected\n+        return left && right;\n+    }\n+\n+    @Override\n+    public Boolean visitOrExpression(OrFilterExpression expression) {\n+        Boolean left = expression.getLeft().accept(this);\n+        Boolean right = expression.getRight().accept(this);\n+        // neither rejected\n+        return left && right;\n+    }\n+\n+    @Override\n+    public Boolean visitNotExpression(NotFilterExpression expression) {\n+        // check rejected\n+        return expression.getNegated().accept(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a985f0f9c448aabe70bc904337096399de4576dc"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4MDUwNA==", "bodyText": "Maybe a better name would be VerifyFieldAccessFilterExpressionVisitor", "url": "https://github.com/yahoo/elide/pull/1236#discussion_r398180504", "createdAt": "2020-03-25T21:27:19Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/EnforceJoinFilterExpressionVisitor.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.core;\n+\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.core.exceptions.ForbiddenAccessException;\n+import com.yahoo.elide.core.filter.FilterPredicate;\n+import com.yahoo.elide.core.filter.expression.AndFilterExpression;\n+import com.yahoo.elide.core.filter.expression.FilterExpressionVisitor;\n+import com.yahoo.elide.core.filter.expression.NotFilterExpression;\n+import com.yahoo.elide.core.filter.expression.OrFilterExpression;\n+\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.Spliterators;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * Enforce read permission on filter join\n+ */\n+public class EnforceJoinFilterExpressionVisitor implements FilterExpressionVisitor<Boolean> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a985f0f9c448aabe70bc904337096399de4576dc"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4NjU4MA==", "bodyText": "Update the javadoc above.", "url": "https://github.com/yahoo/elide/pull/1236#discussion_r398186580", "createdAt": "2020-03-25T21:39:12Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/PersistentResource.java", "diffHunk": "@@ -1557,7 +1558,8 @@ protected void addInverseRelation(String relationName, Object inverseObj) {\n      * @return Filtered set of resources\n      */\n     protected static Set<PersistentResource> filter(Class<? extends Annotation> permission,\n-                                                    Set<PersistentResource> resources) {\n+            Optional<FilterExpression> filter,\n+            Set<PersistentResource> resources) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a985f0f9c448aabe70bc904337096399de4576dc"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4Nzc0NA==", "bodyText": "Why does this give a bad request but the above tests returns an empty data?  I suspect the RSQL filter is formatted incorrectly.", "url": "https://github.com/yahoo/elide/pull/1236#discussion_r398187744", "createdAt": "2020-03-25T21:41:34Z", "author": {"login": "aklish"}, "path": "elide-integration-tests/src/test/java/com/yahoo/elide/tests/FilterIT.java", "diffHunk": "@@ -1362,6 +1362,21 @@ void testFailFilterAuthorBookByChapter() throws IOException {\n         assertNotNull(result.get(\"errors\"));\n     }\n \n+    @Test\n+    void testFailFilterBookByAuthorAddress() throws IOException {\n+        /* Test default */\n+        JsonNode result = getAsNode(\"book?filter[book.authors.homeAddress]=main&include=authors\");\n+        JsonNode data = result.get(\"data\");\n+        assertEquals(0, data.size(), result.toString());\n+\n+        /* Test RSQL */\n+        result = getAsNode(\n+                String.format(\"book?filter[book]=authors.homeAddress=='main'\", hemingwayId),\n+                HttpStatus.SC_BAD_REQUEST);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a985f0f9c448aabe70bc904337096399de4576dc"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4ODA3Nw==", "bodyText": "Can we add a Unit test for this class to test the different visitor methods?", "url": "https://github.com/yahoo/elide/pull/1236#discussion_r398188077", "createdAt": "2020-03-25T21:42:12Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/EnforceJoinFilterExpressionVisitor.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.core;\n+\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.core.exceptions.ForbiddenAccessException;\n+import com.yahoo.elide.core.filter.FilterPredicate;\n+import com.yahoo.elide.core.filter.expression.AndFilterExpression;\n+import com.yahoo.elide.core.filter.expression.FilterExpressionVisitor;\n+import com.yahoo.elide.core.filter.expression.NotFilterExpression;\n+import com.yahoo.elide.core.filter.expression.OrFilterExpression;\n+\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.Spliterators;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * Enforce read permission on filter join\n+ */\n+public class EnforceJoinFilterExpressionVisitor implements FilterExpressionVisitor<Boolean> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a985f0f9c448aabe70bc904337096399de4576dc"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c22884f2f80b84fb2ffd3948604f204bf33b69d", "author": {"user": {"login": "wcekan", "name": "William Cekan"}}, "url": "https://github.com/yahoo/elide/commit/1c22884f2f80b84fb2ffd3948604f204bf33b69d", "committedDate": "2020-03-25T23:38:31Z", "message": "respond to comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5d0a8b13ec911f7791701e07e85c84e6cd9d7238", "author": {"user": {"login": "wcekan", "name": "William Cekan"}}, "url": "https://github.com/yahoo/elide/commit/5d0a8b13ec911f7791701e07e85c84e6cd9d7238", "committedDate": "2020-03-25T23:16:04Z", "message": "respond to comments"}, "afterCommit": {"oid": "1c22884f2f80b84fb2ffd3948604f204bf33b69d", "author": {"user": {"login": "wcekan", "name": "William Cekan"}}, "url": "https://github.com/yahoo/elide/commit/1c22884f2f80b84fb2ffd3948604f204bf33b69d", "committedDate": "2020-03-25T23:38:31Z", "message": "respond to comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "deb6448b48c20415c4bedc574d5260bc990ca659", "author": {"user": {"login": "wcekan", "name": "William Cekan"}}, "url": "https://github.com/yahoo/elide/commit/deb6448b48c20415c4bedc574d5260bc990ca659", "committedDate": "2020-03-26T00:01:42Z", "message": "codacy suggestions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3a3ab839a8e1ec6adec53d5fa186e367e2360c1f", "author": {"user": {"login": "wcekan", "name": "William Cekan"}}, "url": "https://github.com/yahoo/elide/commit/3a3ab839a8e1ec6adec53d5fa186e367e2360c1f", "committedDate": "2020-03-25T23:57:00Z", "message": "codacy suggestions"}, "afterCommit": {"oid": "deb6448b48c20415c4bedc574d5260bc990ca659", "author": {"user": {"login": "wcekan", "name": "William Cekan"}}, "url": "https://github.com/yahoo/elide/commit/deb6448b48c20415c4bedc574d5260bc990ca659", "committedDate": "2020-03-26T00:01:42Z", "message": "codacy suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2dbe0fd4a2f03d47be3cf3e6f25cf937f6cf433c", "author": {"user": {"login": "wcekan", "name": "William Cekan"}}, "url": "https://github.com/yahoo/elide/commit/2dbe0fd4a2f03d47be3cf3e6f25cf937f6cf433c", "committedDate": "2020-03-26T05:12:02Z", "message": "shortcut optimization"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4d7dec7bb423446c127ff5b9cdd90b7b656bf526", "author": {"user": {"login": "wcekan", "name": "William Cekan"}}, "url": "https://github.com/yahoo/elide/commit/4d7dec7bb423446c127ff5b9cdd90b7b656bf526", "committedDate": "2020-03-26T04:54:52Z", "message": "shortcut optimization"}, "afterCommit": {"oid": "2dbe0fd4a2f03d47be3cf3e6f25cf937f6cf433c", "author": {"user": {"login": "wcekan", "name": "William Cekan"}}, "url": "https://github.com/yahoo/elide/commit/2dbe0fd4a2f03d47be3cf3e6f25cf937f6cf433c", "committedDate": "2020-03-26T05:12:02Z", "message": "shortcut optimization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "273c702d30fd84e7135726a7543761604a0a6f1c", "author": {"user": {"login": "wcekan", "name": "William Cekan"}}, "url": "https://github.com/yahoo/elide/commit/273c702d30fd84e7135726a7543761604a0a6f1c", "committedDate": "2020-03-26T13:10:03Z", "message": "update comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyMDYxNDg3", "url": "https://github.com/yahoo/elide/pull/1236#pullrequestreview-382061487", "createdAt": "2020-03-26T14:26:07Z", "commit": {"oid": "273c702d30fd84e7135726a7543761604a0a6f1c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 666, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}