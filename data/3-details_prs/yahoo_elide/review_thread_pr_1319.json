{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3MDMwOTc2", "number": 1319, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxOTowMDozNVrOD8MqTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNjozODowM1rOEFH2HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDQ4NTkxOnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxOTowMDozNVrOGU_doQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxOTowMDozNVrOGU_doQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2NDQ4MQ==", "bodyText": "Ideally, I think this is where the cache ought to be queried for entries.  This would allow the same cache to be used for multiple engines (Fili, SQL, etc).  I think the cache key generation logic itself could be common as well.  The key could be derived from the Query object itself (rather than the generated SQL) plus data freshness key (which the query engine could surface).", "url": "https://github.com/yahoo/elide/pull/1319#discussion_r424664481", "createdAt": "2020-05-13T19:00:35Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java", "diffHunk": "@@ -53,7 +53,7 @@ public void createObject(Object entity, RequestScope scope) {\n     @Override\n     public Iterable<Object> loadObjects(EntityProjection entityProjection, RequestScope scope) {\n         Query query = buildQuery(entityProjection, scope);\n-        return queryEngine.executeQuery(query, true);\n+        return queryEngine.executeQuery(query);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "671b0e1da42ac92fe17eeef5146a49fa4edb7244"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDQ5NDY4OnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxOTowMzoxMFrOGU_jRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxOTowMzoxMFrOGU_jRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2NTkyNQ==", "bodyText": "TableVersion as a string would be more flexible.", "url": "https://github.com/yahoo/elide/pull/1319#discussion_r424665925", "createdAt": "2020-05-13T19:03:10Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java", "diffHunk": "@@ -177,6 +184,56 @@ public MetricProjection constructMetricProjection(Metric metric,\n         }\n     }\n \n+    private long getPageTotal(Query query, SQLQuery sql, EntityManager entityManager, int tableVersion) {\n+        String paginationSQL = toPageTotalSQL(sql).toString();\n+\n+        // check cache first\n+        String paginationCacheKey = null;\n+        if (cache != null && !query.isBypassingCache()) {\n+            paginationCacheKey = tableVersion + \" \" + paginationSQL;\n+            Object pageTotalResult = cache.get(paginationCacheKey);\n+            if (pageTotalResult != null) {\n+                return (Long) pageTotalResult;\n+            }\n+        }\n+\n+        javax.persistence.Query pageTotalQuery =\n+                entityManager.createNativeQuery(paginationSQL)\n+                        .setHint(QueryHints.HINT_READONLY, true);\n+\n+        //Supply the query parameters to the query\n+        supplyFilterQueryParameters(query, pageTotalQuery);\n+\n+        //Run the Pagination query and log the time spent.\n+        long total = new TimedFunction<>(\n+                () -> CoerceUtil.coerce(pageTotalQuery.getSingleResult(), Long.class),\n+                \"Running Query: \" + paginationSQL\n+        ).get();\n+\n+        if (paginationCacheKey != null) {\n+            cache.put(paginationCacheKey, total);\n+        }\n+        return total;\n+    }\n+\n+    private int getTableVersion(EntityManager entityManager, Query query) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "671b0e1da42ac92fe17eeef5146a49fa4edb7244"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDQ5NTIxOnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/annotation/VersionQuery.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxOTowMzoyMVrOGU_joQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxOTowMzoyMVrOGU_joQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2NjAxNw==", "bodyText": "2020", "url": "https://github.com/yahoo/elide/pull/1319#discussion_r424666017", "createdAt": "2020-05-13T19:03:21Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/annotation/VersionQuery.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright 2019, Yahoo Inc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "671b0e1da42ac92fe17eeef5146a49fa4edb7244"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNzk2ODc2OnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNjoxMDoxNVrOGjJn3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNjoxMDoxNVrOGjJn3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUxMTAwNw==", "bodyText": "I think we'll need some Javadoc here so the linter won't warn.", "url": "https://github.com/yahoo/elide/pull/1319#discussion_r439511007", "createdAt": "2020-06-12T16:10:15Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java", "diffHunk": "@@ -156,14 +151,32 @@ private void populateMetaData(MetaDataStore metaDataStore) {\n                 .forEach(metaDataStore::addTable);\n     }\n \n+    public interface Transaction extends AutoCloseable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa3c852a1932c79a384683e3359db79a0b2f4f7c"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNzk3NDc5OnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNjoxMToyMVrOGjJrbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxOTozODoyMFrOGjPmfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUxMTkxNw==", "bodyText": "Same.  Also we are adding a cancel method in another PR.  Do see these as the same thing?  For cancel, the expectation is the method is thread safe.  If we consolidate them - we'll need the same comment here.", "url": "https://github.com/yahoo/elide/pull/1319#discussion_r439511917", "createdAt": "2020-06-12T16:11:21Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java", "diffHunk": "@@ -156,14 +151,32 @@ private void populateMetaData(MetaDataStore metaDataStore) {\n                 .forEach(metaDataStore::addTable);\n     }\n \n+    public interface Transaction extends AutoCloseable {\n+        @Override\n+        void close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa3c852a1932c79a384683e3359db79a0b2f4f7c"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYwODk1OA==", "bodyText": "I assume if cancel() is called on a AggregationDataStoreTransaction that it ends the whole transaction, not just any pending calls such as loadObjects? (There won't be a use case for aborting loadObjects but still being able to use the same AggregationDataStoreTransaction after.)", "url": "https://github.com/yahoo/elide/pull/1319#discussion_r439608958", "createdAt": "2020-06-12T19:38:20Z", "author": {"login": "john-karp"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java", "diffHunk": "@@ -156,14 +151,32 @@ private void populateMetaData(MetaDataStore metaDataStore) {\n                 .forEach(metaDataStore::addTable);\n     }\n \n+    public interface Transaction extends AutoCloseable {\n+        @Override\n+        void close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUxMTkxNw=="}, "originalCommit": {"oid": "aa3c852a1932c79a384683e3359db79a0b2f4f7c"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNzk4MTkxOnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNjoxMjo0OFrOGjJv1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNjoxMjo0OFrOGjJv1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUxMzA0Nw==", "bodyText": "You might want to mention that if one is not available, returns null which disables caching.", "url": "https://github.com/yahoo/elide/pull/1319#discussion_r439513047", "createdAt": "2020-06-12T16:12:48Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java", "diffHunk": "@@ -156,14 +151,32 @@ private void populateMetaData(MetaDataStore metaDataStore) {\n                 .forEach(metaDataStore::addTable);\n     }\n \n+    public interface Transaction extends AutoCloseable {\n+        @Override\n+        void close();\n+    }\n+\n+    public abstract Transaction beginTransaction();\n+\n     /**\n      * Executes the specified {@link Query} against a specific persistent storage, which understand the provided\n      * {@link Query}. Results may be taken from a cache, if configured.\n      *\n      * @param query The query customized for a particular persistent storage or storage client\n+     * @param transaction\n      * @return query results\n      */\n-    public abstract QueryResult executeQuery(Query query);\n+    public abstract QueryResult executeQuery(Query query, Transaction transaction);\n+\n+    /**\n+     * Get a serial number or other token indicating the version of the data in the table.\n+     * No particular semantics are required, though it must change if the data changes.\n+     * If one is not available, returns null.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa3c852a1932c79a384683e3359db79a0b2f4f7c"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODA2ODc2OnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNjozODowM1rOGjKm6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo1MDozM1rOGjMwHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUyNzE0Ng==", "bodyText": "Does this test execution depend on the prior test executing first?  I think we should make each test stand on its own.", "url": "https://github.com/yahoo/elide/pull/1319#discussion_r439527146", "createdAt": "2020-06-12T16:38:03Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+\n+package com.yahoo.elide.datastores.aggregation;\n+\n+import static com.yahoo.elide.request.Pagination.DEFAULT_PAGE_LIMIT;\n+import static com.yahoo.elide.request.Pagination.MAX_PAGE_LIMIT;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.when;\n+\n+import com.yahoo.elide.core.RequestScope;\n+import com.yahoo.elide.core.pagination.PaginationImpl;\n+import com.yahoo.elide.datastores.aggregation.example.PlayerStats;\n+import com.yahoo.elide.datastores.aggregation.framework.SQLUnitTest;\n+import com.yahoo.elide.datastores.aggregation.query.Cache;\n+import com.yahoo.elide.datastores.aggregation.query.Query;\n+import com.yahoo.elide.datastores.aggregation.query.QueryKeyExtractor;\n+import com.yahoo.elide.datastores.aggregation.query.QueryResult;\n+import com.yahoo.elide.request.EntityProjection;\n+import com.yahoo.elide.request.Pagination;\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import java.util.Collections;\n+\n+@ExtendWith(MockitoExtension.class)\n+class AggregationDataStoreTransactionTest extends SQLUnitTest {\n+\n+    @Mock private QueryEngine queryEngine;\n+    @Mock private QueryEngine.Transaction qeTransaction;\n+    @Mock private RequestScope scope;\n+    @Mock private Cache cache;\n+\n+    private Query query = Query.builder().table(playerStatsTable).build();\n+    private final String queryKey = QueryKeyExtractor.extractKey(query);\n+    private static final Iterable<Object> DATA = Collections.singletonList(\"xyzzy\");\n+\n+    // inject our own query instead of using buildQuery impl\n+    private class MyAggregationDataStoreTransaction extends AggregationDataStoreTransaction {\n+\n+        public MyAggregationDataStoreTransaction(QueryEngine queryEngine, Cache cache) {\n+            super(queryEngine, cache);\n+        }\n+\n+        @Override\n+        protected Query buildQuery(EntityProjection entityProjection, RequestScope scope) {\n+            return query;\n+        }\n+    }\n+\n+    @BeforeAll\n+    public static void beforeAllTests() {\n+        SQLUnitTest.init();\n+    }\n+\n+    @BeforeEach\n+    public void setUp() {\n+        when(queryEngine.beginTransaction()).thenReturn(qeTransaction);\n+    }\n+\n+    @Test\n+    void loadObjectsPopulatesCache() {\n+        QueryResult queryResult = QueryResult.builder().data(DATA).build();\n+        when(queryEngine.getTableVersion(playerStatsTable, qeTransaction)).thenReturn(\"foo\");\n+        when(queryEngine.executeQuery(query, qeTransaction)).thenReturn(queryResult);\n+        AggregationDataStoreTransaction transaction = new MyAggregationDataStoreTransaction(queryEngine, cache);\n+        EntityProjection entityProjection = EntityProjection.builder().type(PlayerStats.class).build();\n+\n+        assertEquals(DATA, transaction.loadObjects(entityProjection, scope));\n+\n+        String cacheKey = \"foo;\" + queryKey;\n+        Mockito.verify(cache).get(cacheKey);\n+        Mockito.verify(cache).put(cacheKey, queryResult);\n+        Mockito.verifyNoMoreInteractions(cache);\n+    }\n+\n+    @Test\n+    void loadObjectsUsesCache() {\n+        QueryResult queryResult = QueryResult.builder().data(DATA).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa3c852a1932c79a384683e3359db79a0b2f4f7c"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2MjI2OA==", "bodyText": "No, the fields annotated with @Mock, such as the cache, get reset for each test, and the rest of the fields used in the tests are immutable. So loadObjectsUsesCache is inserting a cache entry before this test with when(cache.get(anyString())).thenReturn(queryResult);.", "url": "https://github.com/yahoo/elide/pull/1319#discussion_r439562268", "createdAt": "2020-06-12T17:50:33Z", "author": {"login": "john-karp"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+\n+package com.yahoo.elide.datastores.aggregation;\n+\n+import static com.yahoo.elide.request.Pagination.DEFAULT_PAGE_LIMIT;\n+import static com.yahoo.elide.request.Pagination.MAX_PAGE_LIMIT;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.when;\n+\n+import com.yahoo.elide.core.RequestScope;\n+import com.yahoo.elide.core.pagination.PaginationImpl;\n+import com.yahoo.elide.datastores.aggregation.example.PlayerStats;\n+import com.yahoo.elide.datastores.aggregation.framework.SQLUnitTest;\n+import com.yahoo.elide.datastores.aggregation.query.Cache;\n+import com.yahoo.elide.datastores.aggregation.query.Query;\n+import com.yahoo.elide.datastores.aggregation.query.QueryKeyExtractor;\n+import com.yahoo.elide.datastores.aggregation.query.QueryResult;\n+import com.yahoo.elide.request.EntityProjection;\n+import com.yahoo.elide.request.Pagination;\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import java.util.Collections;\n+\n+@ExtendWith(MockitoExtension.class)\n+class AggregationDataStoreTransactionTest extends SQLUnitTest {\n+\n+    @Mock private QueryEngine queryEngine;\n+    @Mock private QueryEngine.Transaction qeTransaction;\n+    @Mock private RequestScope scope;\n+    @Mock private Cache cache;\n+\n+    private Query query = Query.builder().table(playerStatsTable).build();\n+    private final String queryKey = QueryKeyExtractor.extractKey(query);\n+    private static final Iterable<Object> DATA = Collections.singletonList(\"xyzzy\");\n+\n+    // inject our own query instead of using buildQuery impl\n+    private class MyAggregationDataStoreTransaction extends AggregationDataStoreTransaction {\n+\n+        public MyAggregationDataStoreTransaction(QueryEngine queryEngine, Cache cache) {\n+            super(queryEngine, cache);\n+        }\n+\n+        @Override\n+        protected Query buildQuery(EntityProjection entityProjection, RequestScope scope) {\n+            return query;\n+        }\n+    }\n+\n+    @BeforeAll\n+    public static void beforeAllTests() {\n+        SQLUnitTest.init();\n+    }\n+\n+    @BeforeEach\n+    public void setUp() {\n+        when(queryEngine.beginTransaction()).thenReturn(qeTransaction);\n+    }\n+\n+    @Test\n+    void loadObjectsPopulatesCache() {\n+        QueryResult queryResult = QueryResult.builder().data(DATA).build();\n+        when(queryEngine.getTableVersion(playerStatsTable, qeTransaction)).thenReturn(\"foo\");\n+        when(queryEngine.executeQuery(query, qeTransaction)).thenReturn(queryResult);\n+        AggregationDataStoreTransaction transaction = new MyAggregationDataStoreTransaction(queryEngine, cache);\n+        EntityProjection entityProjection = EntityProjection.builder().type(PlayerStats.class).build();\n+\n+        assertEquals(DATA, transaction.loadObjects(entityProjection, scope));\n+\n+        String cacheKey = \"foo;\" + queryKey;\n+        Mockito.verify(cache).get(cacheKey);\n+        Mockito.verify(cache).put(cacheKey, queryResult);\n+        Mockito.verifyNoMoreInteractions(cache);\n+    }\n+\n+    @Test\n+    void loadObjectsUsesCache() {\n+        QueryResult queryResult = QueryResult.builder().data(DATA).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUyNzE0Ng=="}, "originalCommit": {"oid": "aa3c852a1932c79a384683e3359db79a0b2f4f7c"}, "originalPosition": 91}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1041, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}