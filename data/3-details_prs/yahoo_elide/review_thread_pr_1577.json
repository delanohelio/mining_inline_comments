{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5MjMxOTY3", "number": 1577, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDozNDo0NFrOErNc0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNjozMzo1MlrOErshPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzQ0NTkyOnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/models/Table.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDozNDo0NFrOHd2gCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDozNzoyNlrOHd2oww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA2MzY5MQ==", "bodyText": "we dont need version in ID anymore", "url": "https://github.com/yahoo/elide/pull/1577#discussion_r501063691", "createdAt": "2020-10-07T14:34:44Z", "author": {"login": "moizarafat"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/models/Table.java", "diffHunk": "@@ -105,7 +105,12 @@ public Table(Class<?> cls, EntityDictionary dictionary) {\n             dbConnectionName = ((FromSubquery) annotation).dbConnectionName();\n         }\n \n-        this.id = new TableId(this.name, this.version, dbConnectionName);\n+        if (this.version != null && ! this.version.isEmpty()) {\n+            this.id = this.name + \".\" + this.version;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baa3e5cc994d4966e665c71e9c596f8582a51c17"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA2NTkyMw==", "bodyText": "yes. that require changes to Metadatstore o/w tests fail, will update after testing Metadatastore changes.", "url": "https://github.com/yahoo/elide/pull/1577#discussion_r501065923", "createdAt": "2020-10-07T14:37:26Z", "author": {"login": "rishi-aga"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/models/Table.java", "diffHunk": "@@ -105,7 +105,12 @@ public Table(Class<?> cls, EntityDictionary dictionary) {\n             dbConnectionName = ((FromSubquery) annotation).dbConnectionName();\n         }\n \n-        this.id = new TableId(this.name, this.version, dbConnectionName);\n+        if (this.version != null && ! this.version.isEmpty()) {\n+            this.id = this.name + \".\" + this.version;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA2MzY5MQ=="}, "originalCommit": {"oid": "baa3e5cc994d4966e665c71e9c596f8582a51c17"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjM3OTgyOnYy", "diffSide": "RIGHT", "path": "elide-core/src/main/java/com/yahoo/elide/core/datastore/inmemory/HashMapDataStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNTo1NjowMFrOHelZ6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzo1NDozMFrOHep-WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgzMjE3MQ==", "bodyText": "Instead of opening this up publicly, what if we add a method to add something to the storage instead?", "url": "https://github.com/yahoo/elide/pull/1577#discussion_r501832171", "createdAt": "2020-10-08T15:56:00Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/datastore/inmemory/HashMapDataStore.java", "diffHunk": "@@ -78,6 +78,10 @@ public DataStore getDataStore() {\n         return this;\n     }\n \n+    public Map<Class<?>, Map<String, Object>> getStorage() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb8c7a5e47056dc6e7a76d200f439aea82ee6b8d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkwNzAzMg==", "bodyText": "updated.", "url": "https://github.com/yahoo/elide/pull/1577#discussion_r501907032", "createdAt": "2020-10-08T17:54:30Z", "author": {"login": "rishi-aga"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/datastore/inmemory/HashMapDataStore.java", "diffHunk": "@@ -78,6 +78,10 @@ public DataStore getDataStore() {\n         return this;\n     }\n \n+    public Map<Class<?>, Map<String, Object>> getStorage() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgzMjE3MQ=="}, "originalCommit": {"oid": "cb8c7a5e47056dc6e7a76d200f439aea82ee6b8d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjM5MjMwOnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/integration/MetaDataStoreIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNTo1ODo1M1rOHelh7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzo1NDoxNVrOHep9uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgzNDIyMA==", "bodyText": "I don't think we want to throw a 500 error here.  This should be some kind of 4XX.", "url": "https://github.com/yahoo/elide/pull/1577#discussion_r501834220", "createdAt": "2020-10-08T15:58:53Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/integration/MetaDataStoreIntegrationTest.java", "diffHunk": "@@ -216,15 +213,43 @@ public void metricMetaDataTest() {\n                 .body(\"data.attributes.valueType\",  equalTo(\"DECIMAL\"))\n                 .body(\"data.attributes.columnType\",  equalTo(\"FORMULA\"))\n                 .body(\"data.attributes.expression\",  equalTo(\"({{timeSpent}} / (CASE WHEN SUM({{game_rounds}}) = 0 THEN 1 ELSE {{sessions}} END))\"))\n-                .body(\"data.relationships.table.data.id\", equalTo(getTableId(\"videoGame\", \"\", \"mycon\")));\n+                .body(\"data.relationships.table.data.id\", equalTo(\"videoGame\"));\n \n     }\n \n-    private String getTableId(String name, String version, String dbConnectionName) {\n-        return new TableId(name, version, dbConnectionName).toString();\n-    }\n+    @Test\n+    public void versioningTest() {\n+\n+        given()\n+                .accept(\"application/vnd.api+json\")\n+                .get(\"/table\")\n+                .then()\n+                .statusCode(HttpStatus.SC_OK)\n+                .body(\"data\", hasSize(greaterThan(30)));\n+\n+        given()\n+                .header(\"ApiVersion\", \"\")\n+                .accept(\"application/vnd.api+json\")\n+                .get(\"/table\")\n+                .then()\n+                .statusCode(HttpStatus.SC_OK)\n+                .body(\"data\", hasSize(greaterThan(30)));\n+\n+        given()\n+                .header(\"ApiVersion\", \"1.0\")\n+                .accept(\"application/vnd.api+json\")\n+                .get(\"/table\")\n+                .then()\n+                .statusCode(HttpStatus.SC_OK)\n+                .body(\"data\", hasSize(1))\n+                .body(\"data.attributes.name\", hasItem(\"book\"))\n+                .body(\"data.attributes.dbConnectionName\", hasItem(\"\"));\n \n-    private String getTableId(String name) {\n-        return getTableId(name, \"\", \"\");\n+        given()\n+                .header(\"ApiVersion\", \"2.0\")\n+                .accept(\"application/vnd.api+json\")\n+                .get(\"/table\")\n+                .then()\n+                .statusCode(HttpStatus.SC_INTERNAL_SERVER_ERROR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb8c7a5e47056dc6e7a76d200f439aea82ee6b8d"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkwNjg3Mw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/yahoo/elide/pull/1577#discussion_r501906873", "createdAt": "2020-10-08T17:54:15Z", "author": {"login": "rishi-aga"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/integration/MetaDataStoreIntegrationTest.java", "diffHunk": "@@ -216,15 +213,43 @@ public void metricMetaDataTest() {\n                 .body(\"data.attributes.valueType\",  equalTo(\"DECIMAL\"))\n                 .body(\"data.attributes.columnType\",  equalTo(\"FORMULA\"))\n                 .body(\"data.attributes.expression\",  equalTo(\"({{timeSpent}} / (CASE WHEN SUM({{game_rounds}}) = 0 THEN 1 ELSE {{sessions}} END))\"))\n-                .body(\"data.relationships.table.data.id\", equalTo(getTableId(\"videoGame\", \"\", \"mycon\")));\n+                .body(\"data.relationships.table.data.id\", equalTo(\"videoGame\"));\n \n     }\n \n-    private String getTableId(String name, String version, String dbConnectionName) {\n-        return new TableId(name, version, dbConnectionName).toString();\n-    }\n+    @Test\n+    public void versioningTest() {\n+\n+        given()\n+                .accept(\"application/vnd.api+json\")\n+                .get(\"/table\")\n+                .then()\n+                .statusCode(HttpStatus.SC_OK)\n+                .body(\"data\", hasSize(greaterThan(30)));\n+\n+        given()\n+                .header(\"ApiVersion\", \"\")\n+                .accept(\"application/vnd.api+json\")\n+                .get(\"/table\")\n+                .then()\n+                .statusCode(HttpStatus.SC_OK)\n+                .body(\"data\", hasSize(greaterThan(30)));\n+\n+        given()\n+                .header(\"ApiVersion\", \"1.0\")\n+                .accept(\"application/vnd.api+json\")\n+                .get(\"/table\")\n+                .then()\n+                .statusCode(HttpStatus.SC_OK)\n+                .body(\"data\", hasSize(1))\n+                .body(\"data.attributes.name\", hasItem(\"book\"))\n+                .body(\"data.attributes.dbConnectionName\", hasItem(\"\"));\n \n-    private String getTableId(String name) {\n-        return getTableId(name, \"\", \"\");\n+        given()\n+                .header(\"ApiVersion\", \"2.0\")\n+                .accept(\"application/vnd.api+json\")\n+                .get(\"/table\")\n+                .then()\n+                .statusCode(HttpStatus.SC_INTERNAL_SERVER_ERROR);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgzNDIyMA=="}, "originalCommit": {"oid": "cb8c7a5e47056dc6e7a76d200f439aea82ee6b8d"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjQyMjE3OnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStoreTransaction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNjowNjowMVrOHel0dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzo1NDowMVrOHep9NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgzODk2Ng==", "bodyText": "Maybe throw a 403 error (HttpStatusException) for some of these that relate to client requests.", "url": "https://github.com/yahoo/elide/pull/1577#discussion_r501838966", "createdAt": "2020-10-08T16:06:01Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStoreTransaction.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.metadata;\n+\n+import com.yahoo.elide.core.DataStoreTransaction;\n+import com.yahoo.elide.core.RequestScope;\n+import com.yahoo.elide.core.datastore.inmemory.HashMapDataStore;\n+import com.yahoo.elide.core.filter.expression.FilterExpression;\n+\n+import com.yahoo.elide.request.EntityProjection;\n+import com.yahoo.elide.request.Relationship;\n+import com.yahoo.elide.request.Sorting;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.Map;\n+\n+/**\n+ * MetaDataStore transaction handler.\n+ */\n+public class MetaDataStoreTransaction implements DataStoreTransaction {\n+    private final Map<String, HashMapDataStore> hashMapDataStores;\n+\n+    public MetaDataStoreTransaction(Map<String, HashMapDataStore> hashMapDataStores) {\n+        this.hashMapDataStores = hashMapDataStores;\n+    }\n+\n+    @Override\n+    public void flush(RequestScope requestScope) {\n+        // Do nothing\n+    }\n+\n+    @Override\n+    public void save(Object object, RequestScope requestScope) {\n+        // Do nothing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "758e48626127abcfb944bf0c74c20eefc3609cfa"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkwNjc0MQ==", "bodyText": "throwing InvalidOperationException for save and delete.", "url": "https://github.com/yahoo/elide/pull/1577#discussion_r501906741", "createdAt": "2020-10-08T17:54:01Z", "author": {"login": "rishi-aga"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStoreTransaction.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.metadata;\n+\n+import com.yahoo.elide.core.DataStoreTransaction;\n+import com.yahoo.elide.core.RequestScope;\n+import com.yahoo.elide.core.datastore.inmemory.HashMapDataStore;\n+import com.yahoo.elide.core.filter.expression.FilterExpression;\n+\n+import com.yahoo.elide.request.EntityProjection;\n+import com.yahoo.elide.request.Relationship;\n+import com.yahoo.elide.request.Sorting;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.Map;\n+\n+/**\n+ * MetaDataStore transaction handler.\n+ */\n+public class MetaDataStoreTransaction implements DataStoreTransaction {\n+    private final Map<String, HashMapDataStore> hashMapDataStores;\n+\n+    public MetaDataStoreTransaction(Map<String, HashMapDataStore> hashMapDataStores) {\n+        this.hashMapDataStores = hashMapDataStores;\n+    }\n+\n+    @Override\n+    public void flush(RequestScope requestScope) {\n+        // Do nothing\n+    }\n+\n+    @Override\n+    public void save(Object object, RequestScope requestScope) {\n+        // Do nothing", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgzODk2Ng=="}, "originalCommit": {"oid": "758e48626127abcfb944bf0c74c20eefc3609cfa"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjQzMjMzOnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNjowODoxNlrOHel6wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzo1Mzo0MFrOHep8RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg0MDU3Ng==", "bodyText": "HttpStatusException throw some 4XX error.", "url": "https://github.com/yahoo/elide/pull/1577#discussion_r501840576", "createdAt": "2020-10-08T16:08:16Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java", "diffHunk": "@@ -35,22 +37,47 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.function.Function;\n import java.util.stream.Collectors;\n \n /**\n  * MetaDataStore is a in-memory data store that manage data models for an {@link AggregationDataStore}.\n  */\n-public class MetaDataStore extends HashMapDataStore {\n+public class MetaDataStore implements DataStore {\n     private static final Package META_DATA_PACKAGE = Table.class.getPackage();\n \n     private static final List<Class<? extends Annotation>> METADATA_STORE_ANNOTATIONS =\n             Arrays.asList(FromTable.class, FromSubquery.class, Subselect.class, javax.persistence.Table.class);\n \n+    public static final Function<String, HashMapDataStore> ERROR_OUT = new Function<String, HashMapDataStore>() {\n+        @Override\n+        public HashMapDataStore apply(String key) {\n+            throw new IllegalStateException(\"API version \" + key + \" not found\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "758e48626127abcfb944bf0c74c20eefc3609cfa"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkwNjUwMA==", "bodyText": "changed to BadRequestException", "url": "https://github.com/yahoo/elide/pull/1577#discussion_r501906500", "createdAt": "2020-10-08T17:53:40Z", "author": {"login": "rishi-aga"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java", "diffHunk": "@@ -35,22 +37,47 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.function.Function;\n import java.util.stream.Collectors;\n \n /**\n  * MetaDataStore is a in-memory data store that manage data models for an {@link AggregationDataStore}.\n  */\n-public class MetaDataStore extends HashMapDataStore {\n+public class MetaDataStore implements DataStore {\n     private static final Package META_DATA_PACKAGE = Table.class.getPackage();\n \n     private static final List<Class<? extends Annotation>> METADATA_STORE_ANNOTATIONS =\n             Arrays.asList(FromTable.class, FromSubquery.class, Subselect.class, javax.persistence.Table.class);\n \n+    public static final Function<String, HashMapDataStore> ERROR_OUT = new Function<String, HashMapDataStore>() {\n+        @Override\n+        public HashMapDataStore apply(String key) {\n+            throw new IllegalStateException(\"API version \" + key + \" not found\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg0MDU3Ng=="}, "originalCommit": {"oid": "758e48626127abcfb944bf0c74c20eefc3609cfa"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjQ2NTQ0OnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNjoxNjoyMVrOHemPUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzo1MzowMlrOHep6kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg0NTg0MA==", "bodyText": "This would throw an internal error (as it doesn't relate to the client request, but rather the setup of the server).", "url": "https://github.com/yahoo/elide/pull/1577#discussion_r501845840", "createdAt": "2020-10-08T16:16:21Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java", "diffHunk": "@@ -100,8 +131,10 @@ public void populateEntityDictionary(EntityDictionary dictionary) {\n      * @param table table metadata\n      */\n     public void addTable(Table table) {\n-        tables.put(dictionary.getEntityClass(table.getName(), table.getVersion()), table);\n-        addMetaData(table);\n+        String version = table.getVersion();\n+        EntityDictionary dictionary = hashMapDataStores.computeIfAbsent(version, ERROR_OUT).getDictionary();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "758e48626127abcfb944bf0c74c20eefc3609cfa"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkwNjA2NA==", "bodyText": "changed to InternalServerErrorException .", "url": "https://github.com/yahoo/elide/pull/1577#discussion_r501906064", "createdAt": "2020-10-08T17:53:02Z", "author": {"login": "rishi-aga"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java", "diffHunk": "@@ -100,8 +131,10 @@ public void populateEntityDictionary(EntityDictionary dictionary) {\n      * @param table table metadata\n      */\n     public void addTable(Table table) {\n-        tables.put(dictionary.getEntityClass(table.getName(), table.getVersion()), table);\n-        addMetaData(table);\n+        String version = table.getVersion();\n+        EntityDictionary dictionary = hashMapDataStores.computeIfAbsent(version, ERROR_OUT).getDictionary();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg0NTg0MA=="}, "originalCommit": {"oid": "758e48626127abcfb944bf0c74c20eefc3609cfa"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjQ3ODkyOnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNjoxOToyOVrOHemXeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzo1MjoyN1rOHep5HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg0NzkyOQ==", "bodyText": "Instead of exposing the data storage, I wonder if it would be cleaner to add a method to add something to the storage.", "url": "https://github.com/yahoo/elide/pull/1577#discussion_r501847929", "createdAt": "2020-10-08T16:19:29Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java", "diffHunk": "@@ -158,35 +192,39 @@ private void addColumn(Column column) {\n      *\n      * @param metricFunction metric function metadata\n      */\n-    private void addMetricFunction(MetricFunction metricFunction) {\n-        addMetaData(metricFunction);\n-        metricFunction.getArguments().forEach(this::addFunctionArgument);\n+    private void addMetricFunction(MetricFunction metricFunction, String version) {\n+        addMetaData(metricFunction, version);\n+        metricFunction.getArguments().forEach(arg -> addFunctionArgument(arg, version));\n     }\n \n     /**\n      * Add a function argument metadata object.\n      *\n      * @param functionArgument function argument metadata\n      */\n-    private void addFunctionArgument(FunctionArgument functionArgument) {\n-        addMetaData(functionArgument);\n+    private void addFunctionArgument(FunctionArgument functionArgument, String version) {\n+        addMetaData(functionArgument, version);\n     }\n \n     /**\n      * Add a time dimension grain metadata object.\n      *\n      * @param timeDimensionGrain time dimension grain metadata\n      */\n-    private void addTimeDimensionGrain(TimeDimensionGrain timeDimensionGrain) {\n-        addMetaData(timeDimensionGrain);\n+    private void addTimeDimensionGrain(TimeDimensionGrain timeDimensionGrain, String version) {\n+        addMetaData(timeDimensionGrain, version);\n     }\n \n     /**\n      * Add a meta data object into this data store, check for duplication.\n      *\n      * @param object a meta data object\n      */\n-    private void addMetaData(Object object) {\n+    private void addMetaData(Object object, String version) {\n+\n+        HashMapDataStore hashMapDataStore = hashMapDataStores.computeIfAbsent(version, ERROR_OUT);\n+        EntityDictionary dictionary = hashMapDataStore.getDictionary();\n+        Map<Class<?>, Map<String, Object>> dataStore = hashMapDataStore.getStorage();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "758e48626127abcfb944bf0c74c20eefc3609cfa"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkwNTY5Mw==", "bodyText": "updated.", "url": "https://github.com/yahoo/elide/pull/1577#discussion_r501905693", "createdAt": "2020-10-08T17:52:27Z", "author": {"login": "rishi-aga"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java", "diffHunk": "@@ -158,35 +192,39 @@ private void addColumn(Column column) {\n      *\n      * @param metricFunction metric function metadata\n      */\n-    private void addMetricFunction(MetricFunction metricFunction) {\n-        addMetaData(metricFunction);\n-        metricFunction.getArguments().forEach(this::addFunctionArgument);\n+    private void addMetricFunction(MetricFunction metricFunction, String version) {\n+        addMetaData(metricFunction, version);\n+        metricFunction.getArguments().forEach(arg -> addFunctionArgument(arg, version));\n     }\n \n     /**\n      * Add a function argument metadata object.\n      *\n      * @param functionArgument function argument metadata\n      */\n-    private void addFunctionArgument(FunctionArgument functionArgument) {\n-        addMetaData(functionArgument);\n+    private void addFunctionArgument(FunctionArgument functionArgument, String version) {\n+        addMetaData(functionArgument, version);\n     }\n \n     /**\n      * Add a time dimension grain metadata object.\n      *\n      * @param timeDimensionGrain time dimension grain metadata\n      */\n-    private void addTimeDimensionGrain(TimeDimensionGrain timeDimensionGrain) {\n-        addMetaData(timeDimensionGrain);\n+    private void addTimeDimensionGrain(TimeDimensionGrain timeDimensionGrain, String version) {\n+        addMetaData(timeDimensionGrain, version);\n     }\n \n     /**\n      * Add a meta data object into this data store, check for duplication.\n      *\n      * @param object a meta data object\n      */\n-    private void addMetaData(Object object) {\n+    private void addMetaData(Object object, String version) {\n+\n+        HashMapDataStore hashMapDataStore = hashMapDataStores.computeIfAbsent(version, ERROR_OUT);\n+        EntityDictionary dictionary = hashMapDataStore.getDictionary();\n+        Map<Class<?>, Map<String, Object>> dataStore = hashMapDataStore.getStorage();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg0NzkyOQ=="}, "originalCommit": {"oid": "758e48626127abcfb944bf0c74c20eefc3609cfa"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjUzNjI5OnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNjozMzo1MlrOHem7bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzo1MjoxMFrOHep4XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg1NzEzNQ==", "bodyText": "I don't think we need this.  This appears to be unused.", "url": "https://github.com/yahoo/elide/pull/1577#discussion_r501857135", "createdAt": "2020-10-08T16:33:52Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java", "diffHunk": "@@ -35,22 +37,47 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.function.Function;\n import java.util.stream.Collectors;\n \n /**\n  * MetaDataStore is a in-memory data store that manage data models for an {@link AggregationDataStore}.\n  */\n-public class MetaDataStore extends HashMapDataStore {\n+public class MetaDataStore implements DataStore {\n     private static final Package META_DATA_PACKAGE = Table.class.getPackage();\n \n     private static final List<Class<? extends Annotation>> METADATA_STORE_ANNOTATIONS =\n             Arrays.asList(FromTable.class, FromSubquery.class, Subselect.class, javax.persistence.Table.class);\n \n+    public static final Function<String, HashMapDataStore> ERROR_OUT = new Function<String, HashMapDataStore>() {\n+        @Override\n+        public HashMapDataStore apply(String key) {\n+            throw new IllegalStateException(\"API version \" + key + \" not found\");\n+        }\n+    };\n+\n+    private static final Function<String, HashMapDataStore> SETUP_NEW = new Function<String, HashMapDataStore>() {\n+        @Override\n+        public HashMapDataStore apply(String key) {\n+            HashMapDataStore hashMapDataStore = new HashMapDataStore(META_DATA_PACKAGE);\n+            EntityDictionary dictionary = new EntityDictionary(new HashMap<>());\n+            ClassScanner.getAllClasses(META_DATA_PACKAGE.getName()).forEach(dictionary::bindEntity);\n+            hashMapDataStore.populateEntityDictionary(dictionary);\n+            return hashMapDataStore;\n+        }\n+    };\n+\n     @Getter\n     private final Set<Class<?>> modelsToBind;\n \n     private Map<Class<?>, Table> tables = new HashMap<>();\n \n+    @Getter\n+    private EntityDictionary dictionary = new EntityDictionary(new HashMap<>());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "758e48626127abcfb944bf0c74c20eefc3609cfa"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkwNTUwMQ==", "bodyText": "Its used in QueryEngine, ColumnVisitor etc. Renamed it to metadataDictionary to make it clear.", "url": "https://github.com/yahoo/elide/pull/1577#discussion_r501905501", "createdAt": "2020-10-08T17:52:10Z", "author": {"login": "rishi-aga"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java", "diffHunk": "@@ -35,22 +37,47 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.function.Function;\n import java.util.stream.Collectors;\n \n /**\n  * MetaDataStore is a in-memory data store that manage data models for an {@link AggregationDataStore}.\n  */\n-public class MetaDataStore extends HashMapDataStore {\n+public class MetaDataStore implements DataStore {\n     private static final Package META_DATA_PACKAGE = Table.class.getPackage();\n \n     private static final List<Class<? extends Annotation>> METADATA_STORE_ANNOTATIONS =\n             Arrays.asList(FromTable.class, FromSubquery.class, Subselect.class, javax.persistence.Table.class);\n \n+    public static final Function<String, HashMapDataStore> ERROR_OUT = new Function<String, HashMapDataStore>() {\n+        @Override\n+        public HashMapDataStore apply(String key) {\n+            throw new IllegalStateException(\"API version \" + key + \" not found\");\n+        }\n+    };\n+\n+    private static final Function<String, HashMapDataStore> SETUP_NEW = new Function<String, HashMapDataStore>() {\n+        @Override\n+        public HashMapDataStore apply(String key) {\n+            HashMapDataStore hashMapDataStore = new HashMapDataStore(META_DATA_PACKAGE);\n+            EntityDictionary dictionary = new EntityDictionary(new HashMap<>());\n+            ClassScanner.getAllClasses(META_DATA_PACKAGE.getName()).forEach(dictionary::bindEntity);\n+            hashMapDataStore.populateEntityDictionary(dictionary);\n+            return hashMapDataStore;\n+        }\n+    };\n+\n     @Getter\n     private final Set<Class<?>> modelsToBind;\n \n     private Map<Class<?>, Table> tables = new HashMap<>();\n \n+    @Getter\n+    private EntityDictionary dictionary = new EntityDictionary(new HashMap<>());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg1NzEzNQ=="}, "originalCommit": {"oid": "758e48626127abcfb944bf0c74c20eefc3609cfa"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 885, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}