{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0ODc5MjY5", "number": 1353, "title": "Carbon 167 Async Enhancements Embeddable", "bodyText": "Resolves # (if appropriate)\nDescription\n) Update the id field to be generated in the prepersist stage.\nii) Add new fields requestId, asyncAfterSeconds. if asyncAfterSeconds is not provided default should be 10 and max is 10.\niii) Add a new Enum ResultType. Will only support EMBEDDED for now.\niv) Update the AsyncResult Model to include ResultType. and update the Query Processing logic to set it.\nv) Change AsyncResult from Entity to Embeddable. In AsyncQuery result's annotation should change to Embeddable.\nvi) Update AsyncExecutorService to remove InterruptThread and logic. Instead wait on the future for the number of seconds provided in asyncAfterSeconds (future.get())\nCatch and ignore the timeout exception after the time has passed.\nvii) Updates to Unit Test, IT test, Standalone, Spring Boot to incorporate these changes.\nMotivation and Context\nBA UI Integration\nHow Has This Been Tested?\nTested in Spring boot Example\nLicense\nI confirm that this contribution is made under an Apache 2.0 license and that I have the authority necessary to make this contribution on behalf of its copyright owner.", "createdAt": "2020-05-29T04:35:12Z", "url": "https://github.com/yahoo/elide/pull/1353", "merged": true, "mergeCommit": {"oid": "c74e629c19fde960662b4a5a7c945f74207728d6"}, "closed": true, "closedAt": "2020-06-25T21:56:27Z", "author": {"login": "ayeswarya"}, "timelineItems": {"totalCount": 53, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcl0xK3gH2gAyNDI0ODc5MjY5OjFiMzU0NmJkZWVlYTYwMWIwOTMwNTU2ZGJiZGEwYzg0MDY3YjNlNjc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcu17MEgFqTQzNzg4NzEzOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1b3546bdeeea601b0930556dbbda0c84067b3e67", "author": {"user": {"login": "ayeswarya", "name": null}}, "url": "https://github.com/yahoo/elide/commit/1b3546bdeeea601b0930556dbbda0c84067b3e67", "committedDate": "2020-05-28T21:30:03Z", "message": "changes from old branch for async enhancements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "050ad734035ba9aa73757e286c4932e0be175bc2", "author": {"user": {"login": "ayeswarya", "name": null}}, "url": "https://github.com/yahoo/elide/commit/050ad734035ba9aa73757e286c4932e0be175bc2", "committedDate": "2020-05-29T04:31:35Z", "message": "remove dependencies and column annotation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "561bb9dd2dbe1b66ef95e1433a69c6a35e026a50", "author": {"user": {"login": "ayeswarya", "name": null}}, "url": "https://github.com/yahoo/elide/commit/561bb9dd2dbe1b66ef95e1433a69c6a35e026a50", "committedDate": "2020-05-29T14:26:38Z", "message": "pr11"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMDU1ODU3", "url": "https://github.com/yahoo/elide/pull/1353#pullrequestreview-421055857", "createdAt": "2020-05-29T15:24:30Z", "commit": {"oid": "561bb9dd2dbe1b66ef95e1433a69c6a35e026a50"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNToyNDozMFrOGchauA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNToyNDozMFrOGchauA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU2MDgyNA==", "bodyText": "you can remove the commented column.", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r432560824", "createdAt": "2020-05-29T15:24:30Z", "author": {"login": "moizarafat"}, "path": "elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQueryResult.java", "diffHunk": "@@ -5,46 +5,32 @@\n  */\n package com.yahoo.elide.async.models;\n \n-import com.yahoo.elide.annotation.CreatePermission;\n-import com.yahoo.elide.annotation.DeletePermission;\n-import com.yahoo.elide.annotation.Exclude;\n-import com.yahoo.elide.annotation.Include;\n-import com.yahoo.elide.annotation.ReadPermission;\n-import com.yahoo.elide.annotation.UpdatePermission;\n-\n import lombok.Data;\n \n-import javax.persistence.Column;\n-import javax.persistence.Entity;\n-import javax.persistence.Id;\n-import javax.persistence.OneToOne;\n+import java.util.Date;\n+\n+//import javax.persistence.Column;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "561bb9dd2dbe1b66ef95e1433a69c6a35e026a50"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2932aef3ccb7b4e71ad23f07d18d693a744cc7f", "author": {"user": {"login": "ayeswarya", "name": null}}, "url": "https://github.com/yahoo/elide/commit/d2932aef3ccb7b4e71ad23f07d18d693a744cc7f", "committedDate": "2020-05-29T17:20:16Z", "message": "remove commented line"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "122245b3604668b58005f43d73193f6a9bda26d9", "author": {"user": {"login": "ayeswarya", "name": null}}, "url": "https://github.com/yahoo/elide/commit/122245b3604668b58005f43d73193f6a9bda26d9", "committedDate": "2020-05-29T20:30:15Z", "message": "gs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxOTg3MTU4", "url": "https://github.com/yahoo/elide/pull/1353#pullrequestreview-421987158", "createdAt": "2020-06-01T16:18:39Z", "commit": {"oid": "122245b3604668b58005f43d73193f6a9bda26d9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNjoxODozOVrOGdRG-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNjozNjozOVrOGdRu6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM0MjIwMA==", "bodyText": "What is this dependency for?", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r433342200", "createdAt": "2020-06-01T16:18:39Z", "author": {"login": "aklish"}, "path": "elide-async/pom.xml", "diffHunk": "@@ -101,6 +101,18 @@\n             <artifactId>mockito-core</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>org.hibernate.validator</groupId>\n+            <artifactId>hibernate-validator</artifactId>\n+            <version>6.0.2.Final</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>javax.el</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "122245b3604668b58005f43d73193f6a9bda26d9"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM0ODE1MQ==", "bodyText": "Is there a reason we didn't use the DSL?", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r433348151", "createdAt": "2020-06-01T16:28:54Z", "author": {"login": "aklish"}, "path": "elide-standalone/src/test/java/example/ElideStandaloneTest.java", "diffHunk": "@@ -298,62 +291,33 @@ public void testAsyncApiEndpoint() throws InterruptedException {\n                         .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n                         .body(\"data.type\", equalTo(\"asyncQuery\"))\n                         .body(\"data.attributes.queryType\", equalTo(\"JSONAPI_V1_0\"))\n-                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n-                        .body(\"data.relationships.result.data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.relationships.result.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"));\n \n                 // Validate AsyncQueryResult Response\n                 given()\n                         .accept(\"application/vnd.api+json\")\n-                        .get(\"/api/v1/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d/result\")\n+                        .get(\"/api/v1/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\")\n                         .then()\n                         .statusCode(com.yahoo.elide.core.HttpStatus.SC_OK)\n                         .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n-                        .body(\"data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.attributes.contentLength\", notNullValue())\n-                        .body(\"data.attributes.responseBody\", equalTo(\"{\\\"data\\\":\"\n-                                + \"[{\\\"type\\\":\\\"post\\\",\\\"id\\\":\\\"2\\\",\"\n-                                + \"\\\"attributes\\\":{\\\"abusiveContent\\\":false,\"\n-                                + \"\\\"content\\\":\\\"This is my first post. woot.\\\",\"\n-                                + \"\\\"date\\\":\\\"2019-01-01T00:00Z\\\"}}]}\"))\n-                        .body(\"data.attributes.status\", equalTo(200))\n-                        .body(\"data.relationships.query.data.type\", equalTo(\"asyncQuery\"))\n-                        .body(\"data.relationships.query.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+                        .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                        .body(\"data.attributes.result.contentLength\", notNullValue())\n+                        .body(\"data.attributes.result.responseBody\", equalTo(\"{\\\"data\\\":\"\n+                                + \"[{\\\"type\\\":\\\"post\\\",\\\"id\\\":\\\"2\\\",\\\"attributes\\\":{\\\"abusiveContent\\\":false,\"\n+                                + \"\\\"content\\\":\\\"This is my first post. woot.\\\",\\\"date\\\":\\\"2019-01-01T00:00Z\\\"}}]}\"));\n \n                 // Validate GraphQL Response\n                 String responseGraphQL = given()\n                         .contentType(MediaType.APPLICATION_JSON)\n                         .accept(MediaType.APPLICATION_JSON)\n                         .body(\"{\\\"query\\\":\\\"{ asyncQuery(ids: [\\\\\\\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\\\\\\\"]) \"\n                                 + \"{ edges { node { id queryType status result \"\n-                                + \"{ edges { node { id responseBody status} } } } } } }\\\",\"\n+                                + \"{ responseBody httpStatus resultType contentLength } } } } }\\\",\"\n                                 + \"\\\"variables\\\":null}\")\n                         .post(\"/graphql/api/v1/\")\n                         .asString();\n \n-                String expectedResponse = document(\n-                        selections(\n-                                field(\n-                                        \"asyncQuery\",\n-                                        selections(\n-                                                field(\"id\", \"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"),\n-                                                field(\"queryType\", \"JSONAPI_V1_0\"),\n-                                                field(\"status\", \"COMPLETE\"),\n-                                                field(\"result\",\n-                                                        selections(\n-                                                                field(\"id\", \"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"),\n-                                                                field(\"responseBody\", \"{\\\\\\\"data\\\\\\\":\"\n-                                                                        + \"[{\\\\\\\"type\\\\\\\":\\\\\\\"post\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"2\\\\\\\",\"\n-                                                                        + \"\\\\\\\"attributes\\\\\\\":{\\\\\\\"abusiveContent\\\\\\\":false,\"\n-                                                                        + \"\\\\\\\"content\\\\\\\":\\\\\\\"This is my first post. woot.\\\\\\\"\"\n-                                                                        + \",\\\\\\\"date\\\\\\\":\\\\\\\"2019-01-01T00:00Z\\\\\\\"}}]}\"),\n-                                                                field(\"status\", 200)\n-                                                        ))\n-                                        )\n-                                )\n-                        )\n-                ).toResponse();\n-\n+                String expectedResponse = \"{\\\"data\\\":{\\\"asyncQuery\\\":{\\\"edges\\\":[{\\\"node\\\":{\\\"id\\\":\\\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\\\",\\\"queryType\\\":\\\"JSONAPI_V1_0\\\",\\\"status\\\":\\\"COMPLETE\\\",\\\"result\\\":{\\\"responseBody\\\":\\\"{\\\\\\\"data\\\\\\\":[{\\\\\\\"type\\\\\\\":\\\\\\\"post\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"attributes\\\\\\\":{\\\\\\\"abusiveContent\\\\\\\":false,\\\\\\\"content\\\\\\\":\\\\\\\"This is my first post. woot.\\\\\\\",\\\\\\\"date\\\\\\\":\\\\\\\"2019-01-01T00:00Z\\\\\\\"}}]}\\\",\\\"httpStatus\\\":200,\\\"resultType\\\":\\\"EMBEDDED\\\",\\\"contentLength\\\":141}}}]}}}\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "122245b3604668b58005f43d73193f6a9bda26d9"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM0ODk1Mg==", "bodyText": "Any reason we didn't use the DSL here?", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r433348952", "createdAt": "2020-06-01T16:30:21Z", "author": {"login": "aklish"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/AsyncTest.java", "diffHunk": "@@ -82,59 +81,34 @@ public void testAsyncApiEndpoint() throws InterruptedException {\n                         .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n                         .body(\"data.type\", equalTo(\"asyncQuery\"))\n                         .body(\"data.attributes.queryType\", equalTo(\"JSONAPI_V1_0\"))\n-                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n-                        .body(\"data.relationships.result.data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.relationships.result.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"));\n \n                 // Validate AsyncQueryResult Response\n                 given()\n                         .accept(\"application/vnd.api+json\")\n-                        .get(\"/json/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d/result\")\n+                        .get(\"/json/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\")\n                         .then()\n                         .statusCode(HttpStatus.SC_OK)\n                         .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n-                        .body(\"data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.attributes.contentLength\", notNullValue())\n-                        .body(\"data.attributes.responseBody\", equalTo(\"{\\\"data\\\":\"\n+                        .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                        .body(\"data.attributes.result.contentLength\", notNullValue())\n+                        .body(\"data.attributes.result.responseBody\", equalTo(\"{\\\"data\\\":\"\n                                 + \"[{\\\"type\\\":\\\"group\\\",\\\"id\\\":\\\"com.example.repository\\\",\\\"attributes\\\":\"\n                                 + \"{\\\"commonName\\\":\\\"Example Repository\\\",\\\"deprecated\\\":false,\\\"description\\\":\\\"The code for this project\\\"},\"\n-                                + \"\\\"relationships\\\":{\\\"products\\\":{\\\"data\\\":[]}}}]}\"))\n-                        .body(\"data.attributes.status\", equalTo(200))\n-                        .body(\"data.relationships.query.data.type\", equalTo(\"asyncQuery\"))\n-                        .body(\"data.relationships.query.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+                                + \"\\\"relationships\\\":{\\\"products\\\":{\\\"data\\\":[]}}}]}\"));\n \n                 // Validate GraphQL Response\n                 String responseGraphQL = given()\n                         .contentType(MediaType.APPLICATION_JSON)\n                         .accept(MediaType.APPLICATION_JSON)\n                         .body(\"{\\\"query\\\":\\\"{ asyncQuery(ids: [\\\\\\\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\\\\\\\"]) \"\n                                 + \"{ edges { node { id queryType status result \"\n-                                + \"{ edges { node { id responseBody status} } } } } } }\\\",\"\n-                                + \"\\\"variables\\\":null}\")\n+                                + \"{ responseBody httpStatus resultType contentLength } } } } }\\\",\"\n+                                + \"\\\"variables\\\":null }\")\n                         .post(\"/graphql\")\n                         .asString();\n \n-                String expectedResponse = document(\n-                        selections(\n-                                field(\n-                                        \"asyncQuery\",\n-                                        selections(\n-                                                field(\"id\", \"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"),\n-                                                field(\"queryType\", \"JSONAPI_V1_0\"),\n-                                                field(\"status\", \"COMPLETE\"),\n-                                                field(\"result\",\n-                                                        selections(\n-                                                                field(\"id\", \"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"),\n-                                                                field(\"responseBody\", \"{\\\\\\\"data\\\\\\\":\"\n-                                                                        + \"[{\\\\\\\"type\\\\\\\":\\\\\\\"group\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"com.example.repository\\\\\\\",\"\n-                                                                        + \"\\\\\\\"attributes\\\\\\\":{\\\\\\\"commonName\\\\\\\":\\\\\\\"Example Repository\\\\\\\",\\\\\\\"deprecated\\\\\\\":false,\\\\\\\"description\\\\\\\":\\\\\\\"The code for this project\\\\\\\"}\"\n-                                                                        + \",\\\\\\\"relationships\\\\\\\":{\\\\\\\"products\\\\\\\":{\\\\\\\"data\\\\\\\":[]}}}]}\"),\n-                                                                field(\"status\", 200)\n-                                                        ))\n-                                        )\n-                                )\n-                        )\n-                ).toResponse();\n+                String expectedResponse = \"{\\\"data\\\":{\\\"asyncQuery\\\":{\\\"edges\\\":[{\\\"node\\\":{\\\"id\\\":\\\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\\\",\\\"queryType\\\":\\\"JSONAPI_V1_0\\\",\\\"status\\\":\\\"COMPLETE\\\",\\\"result\\\":{\\\"responseBody\\\":\\\"{\\\\\\\"data\\\\\\\":[{\\\\\\\"type\\\\\\\":\\\\\\\"group\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"com.example.repository\\\\\\\",\\\\\\\"attributes\\\\\\\":{\\\\\\\"commonName\\\\\\\":\\\\\\\"Example Repository\\\\\\\",\\\\\\\"deprecated\\\\\\\":false,\\\\\\\"description\\\\\\\":\\\\\\\"The code for this project\\\\\\\"},\\\\\\\"relationships\\\\\\\":{\\\\\\\"products\\\\\\\":{\\\\\\\"data\\\\\\\":[]}}}]}\\\",\\\"httpStatus\\\":200,\\\"resultType\\\":\\\"EMBEDDED\\\",\\\"contentLength\\\":208}}}]}}}\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "122245b3604668b58005f43d73193f6a9bda26d9"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM1MDcxMw==", "bodyText": "Can we use the DSL here?", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r433350713", "createdAt": "2020-06-01T16:33:35Z", "author": {"login": "aklish"}, "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java", "diffHunk": "@@ -153,59 +154,40 @@ public void jsonApiRequestTests() throws InterruptedException {\n                         .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n                         .body(\"data.type\", equalTo(\"asyncQuery\"))\n                         .body(\"data.attributes.queryType\", equalTo(\"JSONAPI_V1_0\"))\n-                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n-                        .body(\"data.relationships.result.data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.relationships.result.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"));\n \n                 // Validate AsyncQueryResult Response\n                 given()\n                         .accept(\"application/vnd.api+json\")\n-                        .get(\"/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d/result\")\n+                        .get(\"/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\")\n                         .then()\n                         .statusCode(HttpStatus.SC_OK)\n                         .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n-                        .body(\"data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.attributes.contentLength\", notNullValue())\n-                        .body(\"data.attributes.responseBody\", equalTo(\"{\\\"data\\\":\"\n+                        .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                        .body(\"data.attributes.result.contentLength\", notNullValue())\n+                        .body(\"data.attributes.result.responseBody\", equalTo(\"{\\\"data\\\":\"\n                                 + \"[{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"3\\\",\\\"attributes\\\":{\\\"title\\\":\\\"For Whom the Bell Tolls\\\"}}\"\n                                 + \",{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"2\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Song of Ice and Fire\\\"}},\"\n                                 + \"{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"1\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Ender's Game\\\"}}]}\"))\n-                        .body(\"data.attributes.status\", equalTo(200))\n-                        .body(\"data.relationships.query.data.type\", equalTo(\"asyncQuery\"))\n-                        .body(\"data.relationships.query.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+                        .body(\"data.attributes.result.httpStatus\", equalTo(200))\n+                        .body(\"data.attributes.result.resultType\", equalTo(ResultType.EMBEDDED.toString()));\n \n                 // Validate GraphQL Response\n                 String responseGraphQL = given()\n                         .contentType(MediaType.APPLICATION_JSON)\n                         .accept(MediaType.APPLICATION_JSON)\n                         .body(\"{\\\"query\\\":\\\"{ asyncQuery(ids: [\\\\\\\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\\\\\\\"]) \"\n                                 + \"{ edges { node { id queryType status result \"\n-                                + \"{ edges { node { id responseBody status} } } } } } }\\\",\"\n+                                + \"{ responseBody httpStatus resultType contentLength } } } } }\\\",\"\n                                 + \"\\\"variables\\\":null}\")\n                         .post(\"/graphQL\")\n                         .asString();\n \n-                String expectedResponse = document(\n-                        selections(\n-                                field(\n-                                        \"asyncQuery\",\n-                                        selections(\n-                                                field(\"id\", \"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"),\n-                                                field(\"queryType\", \"JSONAPI_V1_0\"),\n-                                                field(\"status\", \"COMPLETE\"),\n-                                                field(\"result\",\n-                                                        selections(\n-                                                                field(\"id\", \"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"),\n-                                                                field(\"responseBody\", \"{\\\\\\\"data\\\\\\\":\"\n-                                                                        + \"[{\\\\\\\"type\\\\\\\":\\\\\\\"book\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"3\\\\\\\",\\\\\\\"attributes\\\\\\\":{\\\\\\\"title\\\\\\\":\\\\\\\"For Whom the Bell Tolls\\\\\\\"}}\"\n-                                                                        + \",{\\\\\\\"type\\\\\\\":\\\\\\\"book\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"attributes\\\\\\\":{\\\\\\\"title\\\\\\\":\\\\\\\"Song of Ice and Fire\\\\\\\"}},\"\n-                                                                        + \"{\\\\\\\"type\\\\\\\":\\\\\\\"book\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"attributes\\\\\\\":{\\\\\\\"title\\\\\\\":\\\\\\\"Ender's Game\\\\\\\"}}]}\"),\n-                                                                field(\"status\", 200)\n-                                                        ))\n-                                        )\n-                                )\n-                        )\n-                ).toResponse();\n+                String expectedResponse = \"{\\\"data\\\":{\\\"asyncQuery\\\":{\\\"edges\\\":[{\\\"node\\\":{\\\"id\\\":\\\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\\\",\\\"queryType\\\":\\\"JSONAPI_V1_0\\\",\\\"status\\\":\\\"COMPLETE\\\",\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "122245b3604668b58005f43d73193f6a9bda26d9"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM1MTEwOQ==", "bodyText": "Same comment.", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r433351109", "createdAt": "2020-06-01T16:34:16Z", "author": {"login": "aklish"}, "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java", "diffHunk": "@@ -259,58 +244,40 @@ public void graphQLRequestTests() throws InterruptedException {\n                         .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263c\"))\n                         .body(\"data.type\", equalTo(\"asyncQuery\"))\n                         .body(\"data.attributes.queryType\", equalTo(\"GRAPHQL_V1_0\"))\n-                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n-                        .body(\"data.relationships.result.data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.relationships.result.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263c\"));\n+                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"));\n \n                 // Validate AsyncQueryResult Response\n                 given()\n                         .accept(\"application/vnd.api+json\")\n-                        .get(\"/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263c/result\")\n+                        .get(\"/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263c\")\n                         .then()\n                         .statusCode(HttpStatus.SC_OK)\n                         .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263c\"))\n-                        .body(\"data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.attributes.contentLength\", notNullValue())\n-                        .body(\"data.attributes.responseBody\", equalTo(\"{\\\"data\\\":{\\\"book\\\":{\\\"edges\\\":\"\n+                        .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                        .body(\"data.attributes.result.contentLength\", notNullValue())\n+                        .body(\"data.attributes.result.responseBody\", equalTo(\"{\\\"data\\\":{\\\"book\\\":{\\\"edges\\\":\"\n                                 + \"[{\\\"node\\\":{\\\"id\\\":\\\"1\\\",\\\"title\\\":\\\"Ender's Game\\\"}},\"\n                                 + \"{\\\"node\\\":{\\\"id\\\":\\\"2\\\",\\\"title\\\":\\\"Song of Ice and Fire\\\"}},\"\n                                 + \"{\\\"node\\\":{\\\"id\\\":\\\"3\\\",\\\"title\\\":\\\"For Whom the Bell Tolls\\\"}}]}}}\"))\n-                        .body(\"data.attributes.status\", equalTo(200))\n-                        .body(\"data.relationships.query.data.type\", equalTo(\"asyncQuery\"))\n-                        .body(\"data.relationships.query.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263c\"));\n+                        .body(\"data.attributes.result.httpStatus\", equalTo(200))\n+                        .body(\"data.attributes.result.resultType\", equalTo(ResultType.EMBEDDED.toString())).toString();\n \n+                // Validate GraphQL Response\n                 String responseGraphQL = given()\n                         .contentType(MediaType.APPLICATION_JSON)\n                         .accept(MediaType.APPLICATION_JSON)\n                         .body(\"{\\\"query\\\":\\\"{ asyncQuery(ids: [\\\\\\\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263c\\\\\\\"]) \"\n                                 + \"{ edges { node { id queryType status result \"\n-                                + \"{ edges { node { id responseBody status} } } } } } }\\\"\"\n-                                + \",\\\"variables\\\":null}\")\n+                                + \"{ responseBody httpStatus resultType contentLength } } } } }\\\",\"\n+                                + \"\\\"variables\\\":null}\")\n                         .post(\"/graphQL\")\n                         .asString();\n \n-                String expectedResponse = document(\n-                        selections(\n-                                field(\n-                                        \"asyncQuery\",\n-                                        selections(\n-                                                field(\"id\", \"ba31ca4e-ed8f-4be0-a0f3-12088fa9263c\"),\n-                                                field(\"queryType\", \"GRAPHQL_V1_0\"),\n-                                                field(\"status\", \"COMPLETE\"),\n-                                                field(\"result\",\n-                                                        selections(\n-                                                                field(\"id\", \"ba31ca4e-ed8f-4be0-a0f3-12088fa9263c\"),\n-                                                                field(\"responseBody\", \"{\\\\\\\"data\\\\\\\":{\\\\\\\"book\\\\\\\":{\\\\\\\"edges\\\\\\\":\"\n-                                                                        + \"[{\\\\\\\"node\\\\\\\":{\\\\\\\"id\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"title\\\\\\\":\\\\\\\"Ender's Game\\\\\\\"}},\"\n-                                                                        + \"{\\\\\\\"node\\\\\\\":{\\\\\\\"id\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"title\\\\\\\":\\\\\\\"Song of Ice and Fire\\\\\\\"}},\"\n-                                                                        + \"{\\\\\\\"node\\\\\\\":{\\\\\\\"id\\\\\\\":\\\\\\\"3\\\\\\\",\\\\\\\"title\\\\\\\":\\\\\\\"For Whom the Bell Tolls\\\\\\\"}}]}}}\"),\n-                                                                field(\"status\", 200)\n-                                                        ))\n-                                        )\n-                                )\n-                        )\n-                ).toResponse();\n+                String expectedResponse = \"{\\\"data\\\":{\\\"asyncQuery\\\":{\\\"edges\\\":[{\\\"node\\\":{\\\"id\\\":\\\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263c\\\",\\\"queryType\\\":\\\"GRAPHQL_V1_0\\\",\\\"status\\\":\\\"COMPLETE\\\",\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "122245b3604668b58005f43d73193f6a9bda26d9"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM1MjQyNw==", "bodyText": "I think we should restructure these tests into two kinds:\n\nOne that sets asyncAfter to 0 - and does the traditional async loop below.\nOne that sets asyncAfter to 10 - and then checks the immediate returned object (it should contain the completed result).", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r433352427", "createdAt": "2020-06-01T16:36:39Z", "author": {"login": "aklish"}, "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java", "diffHunk": "@@ -127,7 +126,9 @@ public void jsonApiRequestTests() throws InterruptedException {\n                                         attributes(\n                                                 attr(\"query\", \"/book?sort=genre&fields%5Bbook%5D=title\"),\n                                                 attr(\"queryType\", \"JSONAPI_V1_0\"),\n-                                                attr(\"status\", \"QUEUED\")\n+                                                attr(\"status\", \"QUEUED\"),\n+                                                attr(\"requestId\", \"1001\"),\n+                                                attr(\"asyncAfterSeconds\", \"10\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "122245b3604668b58005f43d73193f6a9bda26d9"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e263d92311ed9c8c881bd5549c3697d874f52acf", "author": {"user": {"login": "ayeswarya", "name": null}}, "url": "https://github.com/yahoo/elide/commit/e263d92311ed9c8c881bd5549c3697d874f52acf", "committedDate": "2020-06-02T03:54:09Z", "message": "async after test scenarios per review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3303abaa2d97afe274a36e74cce3a1fab3a27926", "author": {"user": {"login": "ayeswarya", "name": null}}, "url": "https://github.com/yahoo/elide/commit/3303abaa2d97afe274a36e74cce3a1fab3a27926", "committedDate": "2020-06-02T15:26:50Z", "message": "reduce redundancy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c133fb2c28c86e7f6dd91ae7e857c4e3137787a8", "author": {"user": {"login": "ayeswarya", "name": null}}, "url": "https://github.com/yahoo/elide/commit/c133fb2c28c86e7f6dd91ae7e857c4e3137787a8", "committedDate": "2020-06-03T20:55:31Z", "message": "changes to async query execution"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6879ffe890bbab6a29beda6d8306730b43a2c86f", "author": {"user": {"login": "ayeswarya", "name": null}}, "url": "https://github.com/yahoo/elide/commit/6879ffe890bbab6a29beda6d8306730b43a2c86f", "committedDate": "2020-06-03T21:31:54Z", "message": "review tweaks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe6d27366c50a6ff1c609d1d75974fe335e7cf14", "author": {"user": {"login": "ayeswarya", "name": null}}, "url": "https://github.com/yahoo/elide/commit/fe6d27366c50a6ff1c609d1d75974fe335e7cf14", "committedDate": "2020-06-03T21:44:15Z", "message": "remove unused method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NTY4NTM0", "url": "https://github.com/yahoo/elide/pull/1353#pullrequestreview-424568534", "createdAt": "2020-06-04T15:28:37Z", "commit": {"oid": "fe6d27366c50a6ff1c609d1d75974fe335e7cf14"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNToyODozN1rOGfLhjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNTozMzoxOVrOGfLulQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0Nzg1NA==", "bodyText": "Since complete is always set to COMPLETE, maybe we can just remove this extra variable.", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r435347854", "createdAt": "2020-06-04T15:28:37Z", "author": {"login": "aklish"}, "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryDAO.java", "diffHunk": "@@ -18,19 +18,21 @@\n \n     /**\n      * This method updates the QueryStatus for AsyncQuery for given QueryStatus.\n-     * @param asyncQuery The AsyncQuery Object to be updated\n+     * @param asyncQueryId The AsyncQuery Object to be updated\n      * @param status Status from Enum QueryStatus\n      * @return AsyncQuery Updated AsyncQuery Object\n      */\n-    public AsyncQuery updateStatus(AsyncQuery asyncQuery, QueryStatus status);\n+    public AsyncQuery updateStatus(String asyncQueryId, QueryStatus status);\n \n     /**\n      * This method persists the model for AsyncQueryResult, AsyncQuery object and establishes the relationship.\n      * @param asyncQueryResult AsyncQueryResult to be associated with the AsyncQuery object\n-     * @param asyncQuery AsyncQuery object\n+     * @param asyncQueryId String\n+     * @param complete\n      * @return AsyncQuery Object\n      */\n-    public AsyncQuery updateAsyncQueryResult(AsyncQueryResult asyncQueryResult, AsyncQuery asyncQuery);\n+    public AsyncQuery updateAsyncQueryResult(AsyncQueryResult asyncQueryResult,\n+            String asyncQueryId, QueryStatus complete);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe6d27366c50a6ff1c609d1d75974fe335e7cf14"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0OTkyNQ==", "bodyText": "It doesn't look like this test tests anything.", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r435349925", "createdAt": "2020-06-04T15:31:34Z", "author": {"login": "aklish"}, "path": "elide-async/src/test/java/com/yahoo/elide/async/service/AsyncQueryThreadTest.java", "diffHunk": "@@ -53,7 +57,7 @@ public void testAsyncQueryCleanerThreadSet() {\n     }\n \n     @Test\n-    public void testProcessQueryJsonApi() {\n+    public void testProcessQueryJsonApi() throws NoHttpResponseException, URISyntaxException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe6d27366c50a6ff1c609d1d75974fe335e7cf14"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM1MDM0Nw==", "bodyText": "Shouldn't we test the status is TIMEDOUT?", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r435350347", "createdAt": "2020-06-04T15:32:11Z", "author": {"login": "aklish"}, "path": "elide-async/src/test/java/com/yahoo/elide/async/service/AsyncExecutorServiceTest.java", "diffHunk": "@@ -90,8 +90,7 @@ public void testFutureTimeoutException() throws InterruptedException, ExecutionE\n          service.executeQuery(queryObj, testUser, NO_VERSION);\n          Future<?> task = mock(Future.class);\n          when(task.get(anyLong(), any(TimeUnit.class))).thenThrow(TimeoutException.class);\n-         verify(asyncQueryDao, times(0)).updateStatus(queryObj, QueryStatus.QUEUED);\n-         verify(asyncQueryDao, times(1)).updateStatus(queryObj, QueryStatus.PROCESSING);\n+         verify(asyncQueryDao, times(0)).updateStatus(queryObj.getId(), QueryStatus.QUEUED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe6d27366c50a6ff1c609d1d75974fe335e7cf14"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM1MDYwMA==", "bodyText": "What is the goal of this test?", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r435350600", "createdAt": "2020-06-04T15:32:32Z", "author": {"login": "aklish"}, "path": "elide-async/src/test/java/com/yahoo/elide/async/service/AsyncExecutorServiceTest.java", "diffHunk": "@@ -80,7 +80,7 @@ public void testAsyncExecutorServiceSet() {\n     public void testExecuteQuery() {\n \n         service.executeQuery(queryObj, testUser, NO_VERSION);\n-        verify(asyncQueryDao, times(0)).updateStatus(queryObj, QueryStatus.QUEUED);\n+        verify(asyncQueryDao, times(0)).updateStatus(queryObj.getId(), QueryStatus.QUEUED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe6d27366c50a6ff1c609d1d75974fe335e7cf14"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM1MDk5MA==", "bodyText": "This test isn't testing anything.", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r435350990", "createdAt": "2020-06-04T15:33:02Z", "author": {"login": "aklish"}, "path": "elide-async/src/test/java/com/yahoo/elide/async/service/AsyncQueryThreadTest.java", "diffHunk": "@@ -63,15 +67,10 @@ public void testProcessQueryJsonApi() {\n         when(response.getResponseCode()).thenReturn(200);\n         when(response.getBody()).thenReturn(\"ResponseBody\");\n \n-        queryThread.processQuery();\n-\n-        verify(asyncQueryDao, times(1)).updateStatus(queryObj, QueryStatus.PROCESSING);\n-        verify(asyncQueryDao, times(1)).updateStatus(queryObj, QueryStatus.COMPLETE);\n-        verify(asyncQueryDao, times(1)).updateAsyncQueryResult(any(), any());\n     }\n \n     @Test\n-    public void testProcessQueryGraphQl() {\n+    public void testProcessQueryGraphQl() throws NoHttpResponseException, URISyntaxException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe6d27366c50a6ff1c609d1d75974fe335e7cf14"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM1MTE4OQ==", "bodyText": "This test isn't testing anything.", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r435351189", "createdAt": "2020-06-04T15:33:19Z", "author": {"login": "aklish"}, "path": "elide-async/src/test/java/com/yahoo/elide/async/service/AsyncQueryThreadTest.java", "diffHunk": "@@ -81,24 +80,17 @@ public void testProcessQueryGraphQl() {\n         when(response.getResponseCode()).thenReturn(200);\n         when(response.getBody()).thenReturn(\"ResponseBody\");\n \n-        queryThread.processQuery();\n-\n-        verify(asyncQueryDao, times(1)).updateStatus(queryObj, QueryStatus.PROCESSING);\n-        verify(asyncQueryDao, times(1)).updateStatus(queryObj, QueryStatus.COMPLETE);\n-        verify(asyncQueryDao, times(1)).updateAsyncQueryResult(any(), any());\n     }\n \n     @Test\n-    public void testProcessQueryException() {\n+    public void testProcessQueryException() throws NoHttpResponseException, URISyntaxException {\n         String query = \"{\\\"query\\\":\\\"{ group { edges { node { name commonName description } } } }\\\",\\\"variables\\\":null}\";\n \n         when(queryObj.getQuery()).thenReturn(query);\n         when(queryObj.getQueryType()).thenReturn(QueryType.GRAPHQL_V1_0);\n         when(runner.run(query, user)).thenThrow(RuntimeException.class);\n \n         queryThread.processQuery();\n-        verify(asyncQueryDao, times(0)).updateStatus(queryObj, QueryStatus.QUEUED);\n-        verify(asyncQueryDao, times(1)).updateStatus(queryObj, QueryStatus.PROCESSING);\n-        verify(asyncQueryDao, times(1)).updateStatus(queryObj, QueryStatus.FAILURE);\n+        verify(asyncQueryDao, times(0)).updateStatus(queryObj.getId(), QueryStatus.QUEUED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe6d27366c50a6ff1c609d1d75974fe335e7cf14"}, "originalPosition": 64}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b895d7a508beeefc5e9e3a775d03f0be723b991", "author": {"user": {"login": "ayeswarya", "name": null}}, "url": "https://github.com/yahoo/elide/commit/4b895d7a508beeefc5e9e3a775d03f0be723b991", "committedDate": "2020-06-06T19:42:06Z", "message": "Test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a136859ab2bc36715fa824c43284b73bc322965", "author": {"user": {"login": "ayeswarya", "name": null}}, "url": "https://github.com/yahoo/elide/commit/6a136859ab2bc36715fa824c43284b73bc322965", "committedDate": "2020-06-08T05:42:32Z", "message": "integration test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc48457e8f69fa8039bf3b6f3b26e01f182d2cbd", "author": {"user": {"login": "ayeswarya", "name": null}}, "url": "https://github.com/yahoo/elide/commit/fc48457e8f69fa8039bf3b6f3b26e01f182d2cbd", "committedDate": "2020-06-08T05:44:37Z", "message": "exception name"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NDY2MTYz", "url": "https://github.com/yahoo/elide/pull/1353#pullrequestreview-427466163", "createdAt": "2020-06-09T19:16:04Z", "commit": {"oid": "fc48457e8f69fa8039bf3b6f3b26e01f182d2cbd"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxOToxNjowNFrOGhYrMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxOToyNzoxNVrOGhZCTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY2MDQ2NA==", "bodyText": "log debug instead of info.", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r437660464", "createdAt": "2020-06-09T19:16:04Z", "author": {"login": "aklish"}, "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncExecutorService.java", "diffHunk": "@@ -115,9 +115,24 @@ public void executeQuery(AsyncQuery queryObj, User user, String apiVersion) {\n             queryObj.setStatus(QueryStatus.FAILURE);\n         } catch (TimeoutException e) {\n             log.error(\"TimeoutException: {}\", e);\n-            AsyncQueryUpdateThread queryUpdateWorker = new AsyncQueryUpdateThread(elide,\n-                    task, queryObj, asyncQueryDao);\n-             interruptor.execute(queryUpdateWorker);\n+            if (task.isDone()) {\n+                log.info(\"task is done.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc48457e8f69fa8039bf3b6f3b26e01f182d2cbd"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY2MDU2NQ==", "bodyText": "log debug.", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r437660565", "createdAt": "2020-06-09T19:16:15Z", "author": {"login": "aklish"}, "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncExecutorService.java", "diffHunk": "@@ -115,9 +115,24 @@ public void executeQuery(AsyncQuery queryObj, User user, String apiVersion) {\n             queryObj.setStatus(QueryStatus.FAILURE);\n         } catch (TimeoutException e) {\n             log.error(\"TimeoutException: {}\", e);\n-            AsyncQueryUpdateThread queryUpdateWorker = new AsyncQueryUpdateThread(elide,\n-                    task, queryObj, asyncQueryDao);\n-             interruptor.execute(queryUpdateWorker);\n+            if (task.isDone()) {\n+                log.info(\"task is done.\");\n+                try {\n+                    queryObj.setResult(task.get());\n+                    queryObj.setStatus(QueryStatus.COMPLETE);\n+                } catch (InterruptedException e1) {\n+                    log.error(\"InterruptedException: {}\", e);\n+                    queryObj.setStatus(QueryStatus.FAILURE);\n+                } catch (ExecutionException e1) {\n+                    log.error(\"ExecutionException: {}\", e);\n+                    queryObj.setStatus(QueryStatus.FAILURE);\n+                }\n+            } else {\n+                log.info(\"task is not done yet.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc48457e8f69fa8039bf3b6f3b26e01f182d2cbd"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY2NTI2Mw==", "bodyText": "Should we also verify\nverify(asyncQueryDao, times(1)).updateAsyncQueryResult(queryResultObj, query.getId());", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r437665263", "createdAt": "2020-06-09T19:25:11Z", "author": {"login": "aklish"}, "path": "elide-async/src/test/java/com/yahoo/elide/async/service/AsyncExecutorServiceTest.java", "diffHunk": "@@ -72,25 +66,33 @@ public void testAsyncExecutorServiceSet() {\n         assertNotNull(service.getRunners());\n         assertEquals(60, service.getMaxRunTime());\n         assertNotNull(service.getExecutor());\n-        assertNotNull(service.getInterruptor());\n+        assertNotNull(service.getUpdater());\n         assertEquals(asyncQueryDao, service.getAsyncQueryDao());\n     }\n \n+    //Test for regular query execution before asyncAfterSeconds expires\n     @Test\n-    public void testExecuteQuery() {\n+    public void testExecuteQuery() throws ExecutionException, TimeoutException, InterruptedException {\n \n-        service.executeQuery(queryObj, testUser, NO_VERSION);\n-        verify(asyncQueryDao, times(0)).updateStatus(queryObj.getId(), QueryStatus.QUEUED);\n+       when(queryObj.getAsyncAfterSeconds()).thenReturn(10);\n+       service.executeQuery(queryObj, testUser, NO_VERSION);\n+       verify(queryObj, times(1)).setStatus(QueryStatus.PROCESSING);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc48457e8f69fa8039bf3b6f3b26e01f182d2cbd"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY2NTY5MA==", "bodyText": "Should we also verify\nverify(queryObj, times(1)).setStatus(QueryStatus.PROCESSING);\nverify(queryObj, times(1)).setStatus(QueryStatus.COMPLETE);", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r437665690", "createdAt": "2020-06-09T19:25:59Z", "author": {"login": "aklish"}, "path": "elide-async/src/test/java/com/yahoo/elide/async/service/AsyncExecutorServiceTest.java", "diffHunk": "@@ -72,25 +66,33 @@ public void testAsyncExecutorServiceSet() {\n         assertNotNull(service.getRunners());\n         assertEquals(60, service.getMaxRunTime());\n         assertNotNull(service.getExecutor());\n-        assertNotNull(service.getInterruptor());\n+        assertNotNull(service.getUpdater());\n         assertEquals(asyncQueryDao, service.getAsyncQueryDao());\n     }\n \n+    //Test for regular query execution before asyncAfterSeconds expires\n     @Test\n-    public void testExecuteQuery() {\n+    public void testExecuteQuery() throws ExecutionException, TimeoutException, InterruptedException {\n \n-        service.executeQuery(queryObj, testUser, NO_VERSION);\n-        verify(asyncQueryDao, times(0)).updateStatus(queryObj.getId(), QueryStatus.QUEUED);\n+       when(queryObj.getAsyncAfterSeconds()).thenReturn(10);\n+       service.executeQuery(queryObj, testUser, NO_VERSION);\n+       verify(queryObj, times(1)).setStatus(QueryStatus.PROCESSING);\n+       verify(queryObj, times(1)).setStatus(QueryStatus.COMPLETE);\n \n     }\n \n+\n+    //Test for TimeoutException after asyncAfterSeconds\n     @Test\n-    public void testFutureTimeoutException() throws InterruptedException, ExecutionException, TimeoutException {\n-         when(queryObj.getAsyncAfterSeconds()).thenReturn(1);\n-         service.executeQuery(queryObj, testUser, NO_VERSION);\n-         Future<?> task = mock(Future.class);\n-         when(task.get(anyLong(), any(TimeUnit.class))).thenThrow(TimeoutException.class);\n-         verify(asyncQueryDao, times(0)).updateStatus(queryObj.getId(), QueryStatus.QUEUED);\n+    public void testAsyncAfterExecuteQuery() throws InterruptedException {\n+\n+        AsyncQuery query = new AsyncQuery();\n+        query.setAsyncAfterSeconds(0);\n+        String id = \"edc4a871-dff2-4054-804e-d80075cf827d\";\n+        query.setId(id);\n+        User user = new User(null);\n+        service.executeQuery(query, user, NO_VERSION);\n+        verify(asyncQueryDao, times(1)).updateAsyncQueryResult(queryResultObj, query.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc48457e8f69fa8039bf3b6f3b26e01f182d2cbd"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY2NjM4MQ==", "bodyText": "It looked like your unit tests were verifying null was returned when a runtime exception was thrown.  However, we don't handle null here.", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r437666381", "createdAt": "2020-06-09T19:27:15Z", "author": {"login": "aklish"}, "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncExecutorService.java", "diffHunk": "@@ -85,17 +90,50 @@ public synchronized static AsyncExecutorService getInstance() {\n      * Execute Query asynchronously.\n      * @param queryObj Query Object\n      * @param user User\n+     * @param apiVersion API Version\n      */\n     public void executeQuery(AsyncQuery queryObj, User user, String apiVersion) {\n+\n         QueryRunner runner = runners.get(apiVersion);\n         if (runner == null) {\n             throw new InvalidOperationException(\"Invalid API Version\");\n         }\n-\n         AsyncQueryThread queryWorker = new AsyncQueryThread(queryObj, user, elide, runner, asyncQueryDao, apiVersion);\n \n-        AsyncQueryInterruptThread queryInterruptWorker = new AsyncQueryInterruptThread(elide,\n-               executor.submit(queryWorker), queryObj, new Date(), maxRunTime, asyncQueryDao);\n-        interruptor.execute(queryInterruptWorker);\n+        Future<AsyncQueryResult> task = executor.submit(queryWorker);\n+\n+        try {\n+            queryObj.setStatus(QueryStatus.PROCESSING);\n+            AsyncQueryResult queryResultObj = task.get(queryObj.getAsyncAfterSeconds(), TimeUnit.SECONDS);\n+            queryObj.setResult(queryResultObj);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc48457e8f69fa8039bf3b6f3b26e01f182d2cbd"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NDc2OTI0", "url": "https://github.com/yahoo/elide/pull/1353#pullrequestreview-427476924", "createdAt": "2020-06-09T19:31:43Z", "commit": {"oid": "fc48457e8f69fa8039bf3b6f3b26e01f182d2cbd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxOTozMTo0NFrOGhZLSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxOTozMTo0NFrOGhZLSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY2ODY4MQ==", "bodyText": "We should have tests for the response body here.", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r437668681", "createdAt": "2020-06-09T19:31:44Z", "author": {"login": "aklish"}, "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java", "diffHunk": "@@ -127,7 +167,9 @@ public void jsonApiRequestTests() throws InterruptedException {\n                                         attributes(\n                                                 attr(\"query\", \"/book?sort=genre&fields%5Bbook%5D=title\"),\n                                                 attr(\"queryType\", \"JSONAPI_V1_0\"),\n-                                                attr(\"status\", \"QUEUED\")\n+                                                attr(\"status\", \"QUEUED\"),\n+                                                attr(\"requestId\", \"1001\"),\n+                                                attr(\"asyncAfterSeconds\", \"0\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc48457e8f69fa8039bf3b6f3b26e01f182d2cbd"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NDg1MDQy", "url": "https://github.com/yahoo/elide/pull/1353#pullrequestreview-427485042", "createdAt": "2020-06-09T19:43:38Z", "commit": {"oid": "fc48457e8f69fa8039bf3b6f3b26e01f182d2cbd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxOTo0MzozOFrOGhZj5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxOTo0MzozOFrOGhZj5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY3NDk4MQ==", "bodyText": "This doesn't match the prior test structure - where async after for 10 seconds does not require a subsequent for loop to test again and again.  Also - where is the test for 0 second async after.  Also, for 0 seconds, we should test the immediate response body.", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r437674981", "createdAt": "2020-06-09T19:43:38Z", "author": {"login": "aklish"}, "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java", "diffHunk": "@@ -233,7 +257,9 @@ public void graphQLRequestTests() throws InterruptedException {\n                                         attributes(\n                                                 attr(\"query\", \"{\\\"query\\\":\\\"{ book { edges { node { id title } } } }\\\",\\\"variables\\\":null}\"),\n                                                 attr(\"queryType\", \"GRAPHQL_V1_0\"),\n-                                                attr(\"status\", \"QUEUED\")\n+                                                attr(\"status\", \"QUEUED\"),\n+                                                attr(\"requestId\", \"1001\"),\n+                                                attr(\"asyncAfterSeconds\", \"10\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc48457e8f69fa8039bf3b6f3b26e01f182d2cbd"}, "originalPosition": 168}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fae7d87056397b744fdb5b40400cd32591e26994", "author": {"user": {"login": "ayeswarya", "name": null}}, "url": "https://github.com/yahoo/elide/commit/fae7d87056397b744fdb5b40400cd32591e26994", "committedDate": "2020-06-11T19:15:53Z", "message": "commit hook and async it tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f52ccf8530650bc21d00bd0b95977eb4eca52b30", "author": {"user": {"login": "ayeswarya", "name": null}}, "url": "https://github.com/yahoo/elide/commit/f52ccf8530650bc21d00bd0b95977eb4eca52b30", "committedDate": "2020-06-15T03:39:01Z", "message": "Async Happy Path tests and new delay datastore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24dbf890a7f58f944bc2b85a0c45fdf2bd17e6d2", "author": {"user": {"login": "ayeswarya", "name": null}}, "url": "https://github.com/yahoo/elide/commit/24dbf890a7f58f944bc2b85a0c45fdf2bd17e6d2", "committedDate": "2020-06-15T14:21:25Z", "message": "extend IntegrationTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2873532944ac6d3961f6437720eec39008e4171a", "author": {"user": {"login": "ayeswarya", "name": null}}, "url": "https://github.com/yahoo/elide/commit/2873532944ac6d3961f6437720eec39008e4171a", "committedDate": "2020-06-15T14:28:43Z", "message": "Merge branch 'elide-5.x' into CARBON-167-Embeddable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24f937881cba02942f4773ec6dc8677c655bfe58", "author": {"user": {"login": "ayeswarya", "name": null}}, "url": "https://github.com/yahoo/elide/commit/24f937881cba02942f4773ec6dc8677c655bfe58", "committedDate": "2020-06-15T15:11:24Z", "message": "checkstyle fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4565c9970ff6624e5941964bfddc3c154069c366", "author": {"user": {"login": "ayeswarya", "name": null}}, "url": "https://github.com/yahoo/elide/commit/4565c9970ff6624e5941964bfddc3c154069c366", "committedDate": "2020-06-15T15:59:15Z", "message": "transient update query worker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4f7d39adbbf42ee709728bc5c88c06c99195aa8", "author": {"user": {"login": "ayeswarya", "name": null}}, "url": "https://github.com/yahoo/elide/commit/a4f7d39adbbf42ee709728bc5c88c06c99195aa8", "committedDate": "2020-06-15T19:23:43Z", "message": "exception catch change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58071a32147d171592dd30b3389cd7ed21dbfc1a", "author": {"user": {"login": "ayeswarya", "name": null}}, "url": "https://github.com/yahoo/elide/commit/58071a32147d171592dd30b3389cd7ed21dbfc1a", "committedDate": "2020-06-16T04:36:49Z", "message": "unit test and comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a034c9260cb6ab7ef6ac58c7fa2a56d7c8726737", "author": {"user": {"login": "ayeswarya", "name": null}}, "url": "https://github.com/yahoo/elide/commit/a034c9260cb6ab7ef6ac58c7fa2a56d7c8726737", "committedDate": "2020-06-16T14:56:20Z", "message": "codacy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74c1f7fa757f5c0f11f12c95e08ca90dfe47bde7", "author": {"user": {"login": "ayeswarya", "name": null}}, "url": "https://github.com/yahoo/elide/commit/74c1f7fa757f5c0f11f12c95e08ca90dfe47bde7", "committedDate": "2020-06-16T15:21:43Z", "message": "codacy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5a1bd727fa5986ee079f38b9eb54d15e50c6eb8", "author": {"user": {"login": "ayeswarya", "name": null}}, "url": "https://github.com/yahoo/elide/commit/f5a1bd727fa5986ee079f38b9eb54d15e50c6eb8", "committedDate": "2020-06-17T21:56:05Z", "message": "remove imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2dd100f8e64c149622cac6c51d7fe8c585d63c83", "author": {"user": {"login": "ayeswarya", "name": null}}, "url": "https://github.com/yahoo/elide/commit/2dd100f8e64c149622cac6c51d7fe8c585d63c83", "committedDate": "2020-06-18T16:16:10Z", "message": "add to remove"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f66ef5af66fc2cf35fabac6c7b4e619f2ed1ebd", "author": {"user": {"login": "ayeswarya", "name": null}}, "url": "https://github.com/yahoo/elide/commit/6f66ef5af66fc2cf35fabac6c7b4e619f2ed1ebd", "committedDate": "2020-06-18T16:17:43Z", "message": "remove interrupt thread"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "180f6b09d5033ad3384d27a1baf1c62f069b69a7", "author": {"user": {"login": "ayeswarya", "name": null}}, "url": "https://github.com/yahoo/elide/commit/180f6b09d5033ad3384d27a1baf1c62f069b69a7", "committedDate": "2020-06-18T16:33:02Z", "message": "interrrupt thread"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13d06fecb795d18d4dcdf26f59af286e0f83f2ec", "author": {"user": {"login": "ayeswarya", "name": null}}, "url": "https://github.com/yahoo/elide/commit/13d06fecb795d18d4dcdf26f59af286e0f83f2ec", "committedDate": "2020-06-18T16:36:10Z", "message": "delete interrupt thread"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e92309e21a95a3cb7099535c9bd4e3635da7015f", "author": {"user": {"login": "ayeswarya", "name": null}}, "url": "https://github.com/yahoo/elide/commit/e92309e21a95a3cb7099535c9bd4e3635da7015f", "committedDate": "2020-06-18T16:39:08Z", "message": " add back interrupt thread"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MTc4Mzgx", "url": "https://github.com/yahoo/elide/pull/1353#pullrequestreview-434178381", "createdAt": "2020-06-19T15:47:13Z", "commit": {"oid": "e92309e21a95a3cb7099535c9bd4e3635da7015f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNTo0NzoxM1rOGmZaNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNjoyMToyOFrOGmaeGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkxNTM4MA==", "bodyText": "Javadoc on the class or the linter will complain.", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r442915380", "createdAt": "2020-06-19T15:47:13Z", "author": {"login": "aklish"}, "path": "elide-async/src/main/java/com/yahoo/elide/async/hooks/CompleteQueryHook.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.hooks;\n+\n+import com.yahoo.elide.annotation.LifeCycleHookBinding;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.service.AsyncExecutorService;\n+import com.yahoo.elide.functions.LifeCycleHook;\n+import com.yahoo.elide.security.ChangeSpec;\n+import com.yahoo.elide.security.RequestScope;\n+\n+import java.util.Optional;\n+\n+public class CompleteQueryHook implements LifeCycleHook<AsyncQuery> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e92309e21a95a3cb7099535c9bd4e3635da7015f"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkxNjIwMA==", "bodyText": "Why do we compare with \"string\"?", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r442916200", "createdAt": "2020-06-19T15:48:51Z", "author": {"login": "aklish"}, "path": "elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQuery.java", "diffHunk": "@@ -36,25 +41,38 @@\n     @Id\n     @Column(columnDefinition = \"varchar(36)\")\n     @Pattern(regexp = \"^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\",\n-            message = \"id not of pattern UUID\")\n-    private String id; //Provided.\n+    message = \"id not of pattern UUID\")\n+    private String id; //Provided by client or generated if missing on create.\n \n     private String query;  //JSON-API PATH or GraphQL payload.\n \n     private QueryType queryType; //GRAPHQL, JSONAPI\n \n+    @Transient\n+    @Max(10)\n+    @ComputedAttribute\n+    private Integer asyncAfterSeconds = 10;\n+\n+    private String requestId; //Client provided\n+\n     @UpdatePermission(expression = \"Principal is Owner AND value is Cancelled\")\n     private QueryStatus status;\n \n-    @OneToOne(mappedBy = \"query\", cascade = CascadeType.REMOVE)\n+    @Embedded\n     private AsyncQueryResult result;\n \n     @Exclude\n     private String principalName;\n \n+    @Transient\n+    private AsyncQueryUpdateThread queryUpdateWorker = null;\n+\n     @PrePersist\n     public void prePersistStatus() {\n         status = QueryStatus.QUEUED;\n+        if (id == null || id.isEmpty() || id.equalsIgnoreCase(\"string\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e92309e21a95a3cb7099535c9bd4e3635da7015f"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkxODExMw==", "bodyText": "Log debug - not info.", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r442918113", "createdAt": "2020-06-19T15:52:27Z", "author": {"login": "aklish"}, "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncExecutorService.java", "diffHunk": "@@ -88,15 +92,45 @@ public synchronized static AsyncExecutorService getInstance() {\n      * @param apiVersion api version\n      */\n     public void executeQuery(AsyncQuery queryObj, User user, String apiVersion) {\n+\n         QueryRunner runner = runners.get(apiVersion);\n         if (runner == null) {\n             throw new InvalidOperationException(\"Invalid API Version\");\n         }\n-\n         AsyncQueryThread queryWorker = new AsyncQueryThread(queryObj, user, elide, runner, asyncQueryDao, apiVersion);\n+        Future<AsyncQueryResult> task = executor.submit(queryWorker);\n+        try {\n+            queryObj.setStatus(QueryStatus.PROCESSING);\n+            AsyncQueryResult queryResultObj = task.get(queryObj.getAsyncAfterSeconds(), TimeUnit.SECONDS);\n+            queryObj.setResult(queryResultObj);\n+            queryObj.setStatus(QueryStatus.COMPLETE);\n+        } catch (InterruptedException e) {\n+            log.error(\"InterruptedException: {}\", e);\n+            queryObj.setStatus(QueryStatus.FAILURE);\n+        } catch (ExecutionException e) {\n+            log.error(\"ExecutionException: {}\", e);\n+            queryObj.setStatus(QueryStatus.FAILURE);\n+        } catch (TimeoutException e) {\n+            log.error(\"TimeoutException: {}\", e);\n+            queryObj.setQueryUpdateWorker(new AsyncQueryUpdateThread(elide, task, queryObj, asyncQueryDao));\n+        } catch (Exception e) {\n+            log.error(\"Exception: {}\", e);\n+            queryObj.setStatus(QueryStatus.FAILURE);\n+        }\n \n-        AsyncQueryInterruptThread queryInterruptWorker = new AsyncQueryInterruptThread(elide,\n-               executor.submit(queryWorker), queryObj, new Date(), maxRunTime, asyncQueryDao);\n-        interruptor.execute(queryInterruptWorker);\n+    }\n+    /**\n+     * Complete Query asynchronously.\n+     * @param query AsyncQuery\n+     * @param user User\n+     * @param apiVersion API Version\n+     */\n+    public void completeQuery(AsyncQuery query, User user, String apiVersion) {\n+        if (query.getQueryUpdateWorker() != null) {\n+            log.info(\"Task has not completed\");\n+            updater.execute(query.getQueryUpdateWorker());\n+        } else {\n+            log.info(\"Task has completed\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e92309e21a95a3cb7099535c9bd4e3635da7015f"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkxODU0NQ==", "bodyText": "Is this class still used?  Can we remove it?", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r442918545", "createdAt": "2020-06-19T15:53:14Z", "author": {"login": "aklish"}, "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryInterruptThread.java", "diffHunk": "@@ -47,9 +47,8 @@ public void run() {\n     protected void interruptQuery() {\n         try {\n             long interruptTimeMillies = calculateTimeOut(maxRunTimeMinutes, submittedOn);\n-\n+            log.debug(\"Waiting on the future with the given timeout for {}\", interruptTimeMillies);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e92309e21a95a3cb7099535c9bd4e3635da7015f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkyNjEzNg==", "bodyText": "THere is no reason to make these mocks global - they can just be created in each test function.", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r442926136", "createdAt": "2020-06-19T16:06:54Z", "author": {"login": "aklish"}, "path": "elide-async/src/test/java/com/yahoo/elide/async/service/AsyncExecutorServiceTest.java", "diffHunk": "@@ -27,29 +31,38 @@\n \n import java.util.HashMap;\n import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n \n @TestInstance(TestInstance.Lifecycle.PER_CLASS)\n public class AsyncExecutorServiceTest {\n \n     private AsyncExecutorService service;\n     private Elide elide;\n     private AsyncQueryDAO asyncQueryDao;\n+    private AsyncQuery queryObj1;\n+    private AsyncQuery queryObj2;\n+    private AsyncQuery queryObj3;\n+    private User testUser;\n+    private AsyncQueryUpdateThread asyncQueryUpdateThread;\n \n     @BeforeAll\n-    public void setupMocks() {\n+    public void setupMockElide() {\n         HashMapDataStore inMemoryStore = new HashMapDataStore(AsyncQuery.class.getPackage());\n         Map<String, Class<? extends Check>> checkMappings = new HashMap<>();\n \n         elide = new Elide(\n                 new ElideSettingsBuilder(inMemoryStore)\n                         .withEntityDictionary(new EntityDictionary(checkMappings))\n                         .build());\n-\n         asyncQueryDao = mock(DefaultAsyncQueryDAO.class);\n-\n+        queryObj1 = mock(AsyncQuery.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e92309e21a95a3cb7099535c9bd4e3635da7015f"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkyODIzNw==", "bodyText": "This class can just extend TransactionWrapper and remove a lot of boilerplate.", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r442928237", "createdAt": "2020-06-19T16:11:17Z", "author": {"login": "aklish"}, "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncDelayStoreTransaction.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+\n+package com.yahoo.elide.async.integration.tests;\n+\n+import com.yahoo.elide.core.DataStoreTransaction;\n+import com.yahoo.elide.core.DataStoreTransactionImplementation;\n+import com.yahoo.elide.core.RequestScope;\n+import com.yahoo.elide.request.EntityProjection;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+/**\n+ * Data Store Transaction that wraps another transaction and provides delay for testing Async queries.\n+ */\n+@Slf4j\n+public class AsyncDelayStoreTransaction extends DataStoreTransactionImplementation implements DataStoreTransaction {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e92309e21a95a3cb7099535c9bd4e3635da7015f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkyODc5MQ==", "bodyText": "Maybe make this a constructor parameter.  Also, instead of looking for specific types - why don't you have some other. mechanism to trigger the sleep (like a toggle function to turn it on or off)?", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r442928791", "createdAt": "2020-06-19T16:12:31Z", "author": {"login": "aklish"}, "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncDelayStoreTransaction.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+\n+package com.yahoo.elide.async.integration.tests;\n+\n+import com.yahoo.elide.core.DataStoreTransaction;\n+import com.yahoo.elide.core.DataStoreTransactionImplementation;\n+import com.yahoo.elide.core.RequestScope;\n+import com.yahoo.elide.request.EntityProjection;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+/**\n+ * Data Store Transaction that wraps another transaction and provides delay for testing Async queries.\n+ */\n+@Slf4j\n+public class AsyncDelayStoreTransaction extends DataStoreTransactionImplementation implements DataStoreTransaction {\n+\n+    private final DataStoreTransaction tx;\n+\n+    public AsyncDelayStoreTransaction(DataStoreTransaction tx) {\n+            this.tx = tx;\n+    }\n+    @Override\n+    public void close() throws IOException {\n+        tx.close();\n+    }\n+\n+    @Override\n+    public void save(Object entity, RequestScope scope) {\n+        tx.save(entity, scope);\n+\n+    }\n+\n+    @Override\n+    public void delete(Object entity, RequestScope scope) {\n+        tx.delete(entity, scope);\n+    }\n+\n+    @Override\n+    public void flush(RequestScope scope) {\n+        tx.flush(scope);\n+    }\n+\n+    @Override\n+    public void commit(RequestScope scope) {\n+        tx.commit(scope);\n+    }\n+\n+    @Override\n+    public void createObject(Object entity, RequestScope scope) {\n+        tx.createObject(entity, scope);\n+    }\n+    @Override\n+    public Iterable<Object> loadObjects(EntityProjection entityProjection, RequestScope scope) {\n+        try {\n+            log.debug(\"LoadObjects Sleep for delay test\");\n+            if (entityProjection.getType().toString().trim().equals(\"class example.Book\")) {\n+                Thread.sleep(5000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e92309e21a95a3cb7099535c9bd4e3635da7015f"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkyOTE4NA==", "bodyText": "What calls this?", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r442929184", "createdAt": "2020-06-19T16:13:25Z", "author": {"login": "aklish"}, "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java", "diffHunk": "@@ -72,6 +72,15 @@ public AsyncIT() {\n         super(AsyncIntegrationTestApplicationResourceConfig.class, JsonApiEndpoint.class.getPackage().getName());\n     }\n \n+    /**\n+     * Returns an initialized data store.\n+     *\n+     * @return an initialized data store.\n+     */\n+    public static DataStore getDataStore() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e92309e21a95a3cb7099535c9bd4e3635da7015f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkyOTYyMg==", "bodyText": "No need to issue another query here - combine the response body checking with body assertions above.", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r442929622", "createdAt": "2020-06-19T16:14:26Z", "author": {"login": "aklish"}, "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java", "diffHunk": "@@ -111,7 +120,149 @@ public void init() {\n     }\n \n     /**\n-     * Various tests for a JSONAPI query as a Async Request.\n+     * Various tests for a JSONAPI query as a Async Request with asyncAfterSeconds value set to 3.\n+     * Happy Path Test Scenario 1\n+     * @throws InterruptedException\n+     */\n+    @Test\n+    public void jsonApiHappyPath1() throws InterruptedException {\n+\n+        //Create Async Request\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        data(\n+                                resource(\n+                                        type(\"asyncQuery\"),\n+                                        id(\"edc4a871-dff2-4054-804e-d80075cf830e\"),\n+                                        attributes(\n+                                                attr(\"query\", \"/book?sort=genre&fields%5Bbook%5D=title\"),\n+                                                attr(\"queryType\", \"JSONAPI_V1_0\"),\n+                                                attr(\"status\", \"QUEUED\"),\n+                                                attr(\"requestId\", \"1001\"),\n+                                                attr(\"asyncAfterSeconds\", \"3\")\n+                                        )\n+                                )\n+                        ).toJSON())\n+                .when()\n+                .post(\"/asyncQuery\")\n+                .then()\n+                .statusCode(org.apache.http.HttpStatus.SC_CREATED)\n+                .body(\"data.id\", equalTo(\"edc4a871-dff2-4054-804e-d80075cf830e\"))\n+                .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                .body(\"data.attributes.status\", equalTo(\"PROCESSING\"))\n+                .body(\"data.attributes.result.contentLength\", nullValue())\n+                .body(\"data.attributes.result.responseBody\", nullValue())\n+                .body(\"data.attributes.result.httpStatus\", nullValue())\n+                .body(\"data.attributes.result.resultType\", nullValue());\n+\n+        int i = 0;\n+        while (i < 1000) {\n+            Thread.sleep(10);\n+            Response response = given()\n+                    .accept(\"application/vnd.api+json\")\n+                    .get(\"/asyncQuery/edc4a871-dff2-4054-804e-d80075cf830e\");\n+\n+            // If Async Query is created and completed\n+            if (response.jsonPath().getString(\"data.attributes.status\").equals(\"COMPLETE\")) {\n+\n+                // Validate AsyncQuery Response\n+                response\n+                        .then()\n+                        .statusCode(HttpStatus.SC_OK)\n+                        .body(\"data.id\", equalTo(\"edc4a871-dff2-4054-804e-d80075cf830e\"))\n+                        .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                        .body(\"data.attributes.queryType\", equalTo(\"JSONAPI_V1_0\"))\n+                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"));\n+\n+                // Validate AsyncQueryResult Response\n+                given()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e92309e21a95a3cb7099535c9bd4e3635da7015f"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkyOTgzMA==", "bodyText": "This should be a separate test.", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r442929830", "createdAt": "2020-06-19T16:14:57Z", "author": {"login": "aklish"}, "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java", "diffHunk": "@@ -111,7 +120,149 @@ public void init() {\n     }\n \n     /**\n-     * Various tests for a JSONAPI query as a Async Request.\n+     * Various tests for a JSONAPI query as a Async Request with asyncAfterSeconds value set to 3.\n+     * Happy Path Test Scenario 1\n+     * @throws InterruptedException\n+     */\n+    @Test\n+    public void jsonApiHappyPath1() throws InterruptedException {\n+\n+        //Create Async Request\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        data(\n+                                resource(\n+                                        type(\"asyncQuery\"),\n+                                        id(\"edc4a871-dff2-4054-804e-d80075cf830e\"),\n+                                        attributes(\n+                                                attr(\"query\", \"/book?sort=genre&fields%5Bbook%5D=title\"),\n+                                                attr(\"queryType\", \"JSONAPI_V1_0\"),\n+                                                attr(\"status\", \"QUEUED\"),\n+                                                attr(\"requestId\", \"1001\"),\n+                                                attr(\"asyncAfterSeconds\", \"3\")\n+                                        )\n+                                )\n+                        ).toJSON())\n+                .when()\n+                .post(\"/asyncQuery\")\n+                .then()\n+                .statusCode(org.apache.http.HttpStatus.SC_CREATED)\n+                .body(\"data.id\", equalTo(\"edc4a871-dff2-4054-804e-d80075cf830e\"))\n+                .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                .body(\"data.attributes.status\", equalTo(\"PROCESSING\"))\n+                .body(\"data.attributes.result.contentLength\", nullValue())\n+                .body(\"data.attributes.result.responseBody\", nullValue())\n+                .body(\"data.attributes.result.httpStatus\", nullValue())\n+                .body(\"data.attributes.result.resultType\", nullValue());\n+\n+        int i = 0;\n+        while (i < 1000) {\n+            Thread.sleep(10);\n+            Response response = given()\n+                    .accept(\"application/vnd.api+json\")\n+                    .get(\"/asyncQuery/edc4a871-dff2-4054-804e-d80075cf830e\");\n+\n+            // If Async Query is created and completed\n+            if (response.jsonPath().getString(\"data.attributes.status\").equals(\"COMPLETE\")) {\n+\n+                // Validate AsyncQuery Response\n+                response\n+                        .then()\n+                        .statusCode(HttpStatus.SC_OK)\n+                        .body(\"data.id\", equalTo(\"edc4a871-dff2-4054-804e-d80075cf830e\"))\n+                        .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                        .body(\"data.attributes.queryType\", equalTo(\"JSONAPI_V1_0\"))\n+                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"));\n+\n+                // Validate AsyncQueryResult Response\n+                given()\n+                        .accept(\"application/vnd.api+json\")\n+                        .get(\"/asyncQuery/edc4a871-dff2-4054-804e-d80075cf830e\")\n+                        .then()\n+                        .statusCode(HttpStatus.SC_OK)\n+                        .body(\"data.id\", equalTo(\"edc4a871-dff2-4054-804e-d80075cf830e\"))\n+                        .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                        .body(\"data.attributes.result.contentLength\", notNullValue())\n+                        .body(\"data.attributes.result.responseBody\", equalTo(\"{\\\"data\\\":\"\n+                                + \"[{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"3\\\",\\\"attributes\\\":{\\\"title\\\":\\\"For Whom the Bell Tolls\\\"}}\"\n+                                + \",{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"2\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Song of Ice and Fire\\\"}},\"\n+                                + \"{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"1\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Ender's Game\\\"}}]}\"))\n+                        .body(\"data.attributes.result.httpStatus\", equalTo(200))\n+                        .body(\"data.attributes.result.resultType\", equalTo(ResultType.EMBEDDED.toString()));\n+\n+                // Validate GraphQL Response\n+                String responseGraphQL = given()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e92309e21a95a3cb7099535c9bd4e3635da7015f"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkzMDIwNg==", "bodyText": "There is no need to issue a separate request here. Combine these body validations with the ones above.", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r442930206", "createdAt": "2020-06-19T16:15:49Z", "author": {"login": "aklish"}, "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java", "diffHunk": "@@ -153,59 +313,180 @@ public void jsonApiRequestTests() throws InterruptedException {\n                         .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n                         .body(\"data.type\", equalTo(\"asyncQuery\"))\n                         .body(\"data.attributes.queryType\", equalTo(\"JSONAPI_V1_0\"))\n-                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n-                        .body(\"data.relationships.result.data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.relationships.result.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e92309e21a95a3cb7099535c9bd4e3635da7015f"}, "originalPosition": 228}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkzMDM0MQ==", "bodyText": "Make GraphQL a separate test.", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r442930341", "createdAt": "2020-06-19T16:16:09Z", "author": {"login": "aklish"}, "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java", "diffHunk": "@@ -153,59 +313,180 @@ public void jsonApiRequestTests() throws InterruptedException {\n                         .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n                         .body(\"data.type\", equalTo(\"asyncQuery\"))\n                         .body(\"data.attributes.queryType\", equalTo(\"JSONAPI_V1_0\"))\n-                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n-                        .body(\"data.relationships.result.data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.relationships.result.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"));\n \n                 // Validate AsyncQueryResult Response\n                 given()\n                         .accept(\"application/vnd.api+json\")\n-                        .get(\"/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d/result\")\n+                        .get(\"/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\")\n                         .then()\n                         .statusCode(HttpStatus.SC_OK)\n                         .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n-                        .body(\"data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.attributes.contentLength\", notNullValue())\n-                        .body(\"data.attributes.responseBody\", equalTo(\"{\\\"data\\\":\"\n+                        .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                        .body(\"data.attributes.result.contentLength\", notNullValue())\n+                        .body(\"data.attributes.result.responseBody\", equalTo(\"{\\\"data\\\":\"\n                                 + \"[{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"3\\\",\\\"attributes\\\":{\\\"title\\\":\\\"For Whom the Bell Tolls\\\"}}\"\n                                 + \",{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"2\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Song of Ice and Fire\\\"}},\"\n                                 + \"{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"1\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Ender's Game\\\"}}]}\"))\n-                        .body(\"data.attributes.status\", equalTo(200))\n-                        .body(\"data.relationships.query.data.type\", equalTo(\"asyncQuery\"))\n-                        .body(\"data.relationships.query.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+                        .body(\"data.attributes.result.httpStatus\", equalTo(200))\n+                        .body(\"data.attributes.result.resultType\", equalTo(ResultType.EMBEDDED.toString()));\n \n                 // Validate GraphQL Response\n                 String responseGraphQL = given()\n                         .contentType(MediaType.APPLICATION_JSON)\n                         .accept(MediaType.APPLICATION_JSON)\n                         .body(\"{\\\"query\\\":\\\"{ asyncQuery(ids: [\\\\\\\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\\\\\\\"]) \"\n                                 + \"{ edges { node { id queryType status result \"\n-                                + \"{ edges { node { id responseBody status} } } } } } }\\\",\"\n+                                + \"{ responseBody httpStatus resultType contentLength } } } } }\\\",\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e92309e21a95a3cb7099535c9bd4e3635da7015f"}, "originalPosition": 260}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkzMDc1Ng==", "bodyText": "I don't understand the validate GraphQL response here.  Why are we doing this for each test?", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r442930756", "createdAt": "2020-06-19T16:17:04Z", "author": {"login": "aklish"}, "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java", "diffHunk": "@@ -153,59 +313,180 @@ public void jsonApiRequestTests() throws InterruptedException {\n                         .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n                         .body(\"data.type\", equalTo(\"asyncQuery\"))\n                         .body(\"data.attributes.queryType\", equalTo(\"JSONAPI_V1_0\"))\n-                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n-                        .body(\"data.relationships.result.data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.relationships.result.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"));\n \n                 // Validate AsyncQueryResult Response\n                 given()\n                         .accept(\"application/vnd.api+json\")\n-                        .get(\"/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d/result\")\n+                        .get(\"/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\")\n                         .then()\n                         .statusCode(HttpStatus.SC_OK)\n                         .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n-                        .body(\"data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.attributes.contentLength\", notNullValue())\n-                        .body(\"data.attributes.responseBody\", equalTo(\"{\\\"data\\\":\"\n+                        .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                        .body(\"data.attributes.result.contentLength\", notNullValue())\n+                        .body(\"data.attributes.result.responseBody\", equalTo(\"{\\\"data\\\":\"\n                                 + \"[{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"3\\\",\\\"attributes\\\":{\\\"title\\\":\\\"For Whom the Bell Tolls\\\"}}\"\n                                 + \",{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"2\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Song of Ice and Fire\\\"}},\"\n                                 + \"{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"1\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Ender's Game\\\"}}]}\"))\n-                        .body(\"data.attributes.status\", equalTo(200))\n-                        .body(\"data.relationships.query.data.type\", equalTo(\"asyncQuery\"))\n-                        .body(\"data.relationships.query.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+                        .body(\"data.attributes.result.httpStatus\", equalTo(200))\n+                        .body(\"data.attributes.result.resultType\", equalTo(ResultType.EMBEDDED.toString()));\n \n                 // Validate GraphQL Response\n                 String responseGraphQL = given()\n                         .contentType(MediaType.APPLICATION_JSON)\n                         .accept(MediaType.APPLICATION_JSON)\n                         .body(\"{\\\"query\\\":\\\"{ asyncQuery(ids: [\\\\\\\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\\\\\\\"]) \"\n                                 + \"{ edges { node { id queryType status result \"\n-                                + \"{ edges { node { id responseBody status} } } } } } }\\\",\"\n+                                + \"{ responseBody httpStatus resultType contentLength } } } } }\\\",\"\n                                 + \"\\\"variables\\\":null}\")\n                         .post(\"/graphQL\")\n                         .asString();\n \n-                String expectedResponse = document(\n-                        selections(\n-                                field(\n-                                        \"asyncQuery\",\n-                                        selections(\n-                                                field(\"id\", \"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"),\n-                                                field(\"queryType\", \"JSONAPI_V1_0\"),\n-                                                field(\"status\", \"COMPLETE\"),\n-                                                field(\"result\",\n-                                                        selections(\n-                                                                field(\"id\", \"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"),\n-                                                                field(\"responseBody\", \"{\\\\\\\"data\\\\\\\":\"\n-                                                                        + \"[{\\\\\\\"type\\\\\\\":\\\\\\\"book\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"3\\\\\\\",\\\\\\\"attributes\\\\\\\":{\\\\\\\"title\\\\\\\":\\\\\\\"For Whom the Bell Tolls\\\\\\\"}}\"\n-                                                                        + \",{\\\\\\\"type\\\\\\\":\\\\\\\"book\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"attributes\\\\\\\":{\\\\\\\"title\\\\\\\":\\\\\\\"Song of Ice and Fire\\\\\\\"}},\"\n-                                                                        + \"{\\\\\\\"type\\\\\\\":\\\\\\\"book\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"attributes\\\\\\\":{\\\\\\\"title\\\\\\\":\\\\\\\"Ender's Game\\\\\\\"}}]}\"),\n-                                                                field(\"status\", 200)\n-                                                        ))\n+                String expectedResponse = \"{\\\"data\\\":{\\\"asyncQuery\\\":{\\\"edges\\\":[{\\\"node\\\":{\\\"id\\\":\\\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\\\",\\\"queryType\\\":\\\"JSONAPI_V1_0\\\",\\\"status\\\":\\\"COMPLETE\\\",\"\n+                        + \"\\\"result\\\":{\\\"responseBody\\\":\\\"{\\\\\\\"data\\\\\\\":[{\\\\\\\"type\\\\\\\":\\\\\\\"book\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"3\\\\\\\",\\\\\\\"attributes\\\\\\\":{\\\\\\\"title\\\\\\\":\\\\\\\"For Whom the Bell Tolls\\\\\\\"}},\"\n+                        + \"{\\\\\\\"type\\\\\\\":\\\\\\\"book\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"attributes\\\\\\\":{\\\\\\\"title\\\\\\\":\\\\\\\"Song of Ice and Fire\\\\\\\"}},\"\n+                        + \"{\\\\\\\"type\\\\\\\":\\\\\\\"book\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"attributes\\\\\\\":{\\\\\\\"title\\\\\\\":\\\\\\\"Ender's Game\\\\\\\"}}]}\\\",\"\n+                        + \"\\\"httpStatus\\\":200,\\\"resultType\\\":\\\"EMBEDDED\\\",\\\"contentLength\\\":218}}}]}}}\";\n+\n+                assertEquals(expectedResponse, responseGraphQL);\n+                break;\n+            }\n+            i++;\n+\n+            if (i == 1000) {\n+                fail(\"Async Query not completed.\");\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Test for a JSONAPI query as a Async Request with asyncAfterSeconds value set to 10.\n+     * @throws InterruptedException\n+     */\n+    @Test\n+    public void jsonApiRequestAsyncAfterTests() throws InterruptedException {\n+\n+        //Create Async Request\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        data(\n+                                resource(\n+                                        type(\"asyncQuery\"),\n+                                        id(\"edc4a871-dff2-4054-804e-d80075cf827d\"),\n+                                        attributes(\n+                                                attr(\"query\", \"/book?sort=genre&fields%5Bbook%5D=title\"),\n+                                                attr(\"queryType\", \"JSONAPI_V1_0\"),\n+                                                attr(\"status\", \"QUEUED\"),\n+                                                attr(\"requestId\", \"1001\"),\n+                                                attr(\"asyncAfterSeconds\", \"10\")\n+                                        )\n+                                )\n+                        ).toJSON())\n+                .when()\n+                .post(\"/asyncQuery\")\n+                .then()\n+                .statusCode(org.apache.http.HttpStatus.SC_CREATED)\n+                .body(\"data.id\", equalTo(\"edc4a871-dff2-4054-804e-d80075cf827d\"))\n+                .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n+                .body(\"data.attributes.result.contentLength\", notNullValue())\n+                .body(\"data.attributes.result.responseBody\", equalTo(\"{\\\"data\\\":\"\n+                        + \"[{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"3\\\",\\\"attributes\\\":{\\\"title\\\":\\\"For Whom the Bell Tolls\\\"}}\"\n+                        + \",{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"2\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Song of Ice and Fire\\\"}},\"\n+                        + \"{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"1\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Ender's Game\\\"}}]}\"))\n+                .body(\"data.attributes.result.httpStatus\", equalTo(200))\n+                .body(\"data.attributes.result.resultType\", equalTo(ResultType.EMBEDDED.toString()));\n+    }\n+\n+    /**\n+     * Test for a GraphQL query as a Async Request with asyncAfterSeconds value set to 3.\n+     * Happy Path Test Scenario 1\n+     * @throws InterruptedException\n+     */\n+    @Test\n+    public void graphQLHappyPath1() throws InterruptedException {\n+\n+        //Create Async Request\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        data(\n+                                resource(\n+                                        type(\"asyncQuery\"),\n+                                        id(\"edc4a871-dff2-4054-804e-d80075cf828e\"),\n+                                        attributes(\n+                                                attr(\"query\", \"{\\\"query\\\":\\\"{ book { edges { node { id title } } } }\\\",\\\"variables\\\":null}\"),\n+                                                attr(\"queryType\", \"GRAPHQL_V1_0\"),\n+                                                attr(\"status\", \"QUEUED\"),\n+                                                attr(\"requestId\", \"1001\"),\n+                                                attr(\"asyncAfterSeconds\", \"3\")\n                                         )\n                                 )\n-                        )\n-                ).toResponse();\n+                        ).toJSON())\n+                .when()\n+                .post(\"/asyncQuery\")\n+                .then()\n+                .statusCode(org.apache.http.HttpStatus.SC_CREATED)\n+                .body(\"data.id\", equalTo(\"edc4a871-dff2-4054-804e-d80075cf828e\"))\n+                .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                .body(\"data.attributes.status\", equalTo(\"PROCESSING\"))\n+                .body(\"data.attributes.result.contentLength\", nullValue())\n+                .body(\"data.attributes.result.responseBody\", nullValue())\n+                .body(\"data.attributes.result.httpStatus\", nullValue())\n+                .body(\"data.attributes.result.resultType\", nullValue());\n+\n+        int i = 0;\n+        while (i < 1000) {\n+            Thread.sleep(10);\n+            Response response = given()\n+                    .accept(\"application/vnd.api+json\")\n+                    .get(\"/asyncQuery/edc4a871-dff2-4054-804e-d80075cf828e\");\n+\n+            // If Async Query is created and completed then validate results\n+            if (response.jsonPath().getString(\"data.attributes.status\").equals(\"COMPLETE\")) {\n+\n+                // Validate AsyncQuery Response\n+                response\n+                        .then()\n+                        .statusCode(HttpStatus.SC_OK)\n+                        .body(\"data.id\", equalTo(\"edc4a871-dff2-4054-804e-d80075cf828e\"))\n+                        .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                        .body(\"data.attributes.queryType\", equalTo(\"GRAPHQL_V1_0\"))\n+                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"));\n+\n+                // Validate AsyncQueryResult Response\n+                given()\n+                        .accept(\"application/vnd.api+json\")\n+                        .get(\"/asyncQuery/edc4a871-dff2-4054-804e-d80075cf828e\")\n+                        .then()\n+                        .statusCode(HttpStatus.SC_OK)\n+                        .body(\"data.id\", equalTo(\"edc4a871-dff2-4054-804e-d80075cf828e\"))\n+                        .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                        .body(\"data.attributes.result.contentLength\", notNullValue())\n+                        .body(\"data.attributes.result.responseBody\", equalTo(\"{\\\"data\\\":{\\\"book\\\":{\\\"edges\\\":\"\n+                                + \"[{\\\"node\\\":{\\\"id\\\":\\\"1\\\",\\\"title\\\":\\\"Ender's Game\\\"}},\"\n+                                + \"{\\\"node\\\":{\\\"id\\\":\\\"2\\\",\\\"title\\\":\\\"Song of Ice and Fire\\\"}},\"\n+                                + \"{\\\"node\\\":{\\\"id\\\":\\\"3\\\",\\\"title\\\":\\\"For Whom the Bell Tolls\\\"}}]}}}\"))\n+                        .body(\"data.attributes.result.httpStatus\", equalTo(200))\n+                        .body(\"data.attributes.result.resultType\", equalTo(ResultType.EMBEDDED.toString())).toString();\n+\n+                // Validate GraphQL Response", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e92309e21a95a3cb7099535c9bd4e3635da7015f"}, "originalPosition": 413}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkzMTE0OQ==", "bodyText": "How is this test different than the last one for 7 seconds?", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r442931149", "createdAt": "2020-06-19T16:17:55Z", "author": {"login": "aklish"}, "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java", "diffHunk": "@@ -217,9 +498,91 @@ public void jsonApiRequestTests() throws InterruptedException {\n             }\n         }\n     }\n+    /**\n+     * Test for a GraphQL query as a Async Request with asyncAfterSeconds value set to 7.\n+     * Happy Path Test Scenario 2\n+     * @throws InterruptedException\n+     */\n+    @Test\n+    public void graphQLHappyPath2() throws InterruptedException {\n \n+        //Create Async Request\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        data(\n+                                resource(\n+                                        type(\"asyncQuery\"),\n+                                        id(\"edc4a871-dff2-4054-804e-d80075cf829e\"),\n+                                        attributes(\n+                                                attr(\"query\", \"{\\\"query\\\":\\\"{ book { edges { node { id title } } } }\\\",\\\"variables\\\":null}\"),\n+                                                attr(\"queryType\", \"GRAPHQL_V1_0\"),\n+                                                attr(\"status\", \"QUEUED\"),\n+                                                attr(\"requestId\", \"1001\"),\n+                                                attr(\"asyncAfterSeconds\", \"7\")\n+                                        )\n+                                )\n+                        ).toJSON())\n+                .when()\n+                .post(\"/asyncQuery\")\n+                .then()\n+                .statusCode(org.apache.http.HttpStatus.SC_CREATED)\n+                .body(\"data.id\", equalTo(\"edc4a871-dff2-4054-804e-d80075cf829e\"))\n+                .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n+                .body(\"data.attributes.result.contentLength\", notNullValue())\n+                .body(\"data.attributes.result.responseBody\", equalTo(\"{\\\"data\\\":{\\\"book\\\":{\\\"edges\\\":\"\n+                        + \"[{\\\"node\\\":{\\\"id\\\":\\\"1\\\",\\\"title\\\":\\\"Ender's Game\\\"}},\"\n+                        + \"{\\\"node\\\":{\\\"id\\\":\\\"2\\\",\\\"title\\\":\\\"Song of Ice and Fire\\\"}},\"\n+                        + \"{\\\"node\\\":{\\\"id\\\":\\\"3\\\",\\\"title\\\":\\\"For Whom the Bell Tolls\\\"}}]}}}\"))\n+                .body(\"data.attributes.result.httpStatus\", equalTo(200))\n+                .body(\"data.attributes.result.resultType\", equalTo(ResultType.EMBEDDED.toString())).toString();\n+\n+    }\n     /**\n-     * Various tests for a GRAPHQL query as a Async Request.\n+     * Test for a GraphQL query as a Async Request with asyncAfterSeconds value set to 10.\n+     * @throws InterruptedException\n+     */\n+    @Test\n+    public void graphQLRequestAsyncAfterTests() throws InterruptedException {\n+\n+        //Create Async Request\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        data(\n+                                resource(\n+                                        type(\"asyncQuery\"),\n+                                        id(\"edc4a871-dff2-4054-804e-d80075cf827e\"),\n+                                        attributes(\n+                                                attr(\"query\", \"{\\\"query\\\":\\\"{ book { edges { node { id title } } } }\\\",\\\"variables\\\":null}\"),\n+                                                attr(\"queryType\", \"GRAPHQL_V1_0\"),\n+                                                attr(\"status\", \"QUEUED\"),\n+                                                attr(\"requestId\", \"1001\"),\n+                                                attr(\"asyncAfterSeconds\", \"10\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e92309e21a95a3cb7099535c9bd4e3635da7015f"}, "originalPosition": 498}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkzMjExOQ==", "bodyText": "There is no need to issue a separate request here.", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r442932119", "createdAt": "2020-06-19T16:20:04Z", "author": {"login": "aklish"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/AsyncTest.java", "diffHunk": "@@ -82,59 +81,34 @@ public void testAsyncApiEndpoint() throws InterruptedException {\n                         .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n                         .body(\"data.type\", equalTo(\"asyncQuery\"))\n                         .body(\"data.attributes.queryType\", equalTo(\"JSONAPI_V1_0\"))\n-                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n-                        .body(\"data.relationships.result.data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.relationships.result.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"));\n \n                 // Validate AsyncQueryResult Response\n                 given()\n                         .accept(\"application/vnd.api+json\")\n-                        .get(\"/json/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d/result\")\n+                        .get(\"/json/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e92309e21a95a3cb7099535c9bd4e3635da7015f"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkzMjM1OA==", "bodyText": "This should be broken into a separate test.", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r442932358", "createdAt": "2020-06-19T16:20:39Z", "author": {"login": "aklish"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/AsyncTest.java", "diffHunk": "@@ -82,59 +81,34 @@ public void testAsyncApiEndpoint() throws InterruptedException {\n                         .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n                         .body(\"data.type\", equalTo(\"asyncQuery\"))\n                         .body(\"data.attributes.queryType\", equalTo(\"JSONAPI_V1_0\"))\n-                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n-                        .body(\"data.relationships.result.data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.relationships.result.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"));\n \n                 // Validate AsyncQueryResult Response\n                 given()\n                         .accept(\"application/vnd.api+json\")\n-                        .get(\"/json/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d/result\")\n+                        .get(\"/json/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\")\n                         .then()\n                         .statusCode(HttpStatus.SC_OK)\n                         .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n-                        .body(\"data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.attributes.contentLength\", notNullValue())\n-                        .body(\"data.attributes.responseBody\", equalTo(\"{\\\"data\\\":\"\n+                        .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                        .body(\"data.attributes.result.contentLength\", notNullValue())\n+                        .body(\"data.attributes.result.responseBody\", equalTo(\"{\\\"data\\\":\"\n                                 + \"[{\\\"type\\\":\\\"group\\\",\\\"id\\\":\\\"com.example.repository\\\",\\\"attributes\\\":\"\n                                 + \"{\\\"commonName\\\":\\\"Example Repository\\\",\\\"deprecated\\\":false,\\\"description\\\":\\\"The code for this project\\\"},\"\n-                                + \"\\\"relationships\\\":{\\\"products\\\":{\\\"data\\\":[]}}}]}\"))\n-                        .body(\"data.attributes.status\", equalTo(200))\n-                        .body(\"data.relationships.query.data.type\", equalTo(\"asyncQuery\"))\n-                        .body(\"data.relationships.query.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+                                + \"\\\"relationships\\\":{\\\"products\\\":{\\\"data\\\":[]}}}]}\"));\n \n                 // Validate GraphQL Response\n                 String responseGraphQL = given()\n                         .contentType(MediaType.APPLICATION_JSON)\n                         .accept(MediaType.APPLICATION_JSON)\n                         .body(\"{\\\"query\\\":\\\"{ asyncQuery(ids: [\\\\\\\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\\\\\\\"]) \"\n                                 + \"{ edges { node { id queryType status result \"\n-                                + \"{ edges { node { id responseBody status} } } } } } }\\\",\"\n-                                + \"\\\"variables\\\":null}\")\n+                                + \"{ responseBody httpStatus resultType contentLength } } } } }\\\",\"\n+                                + \"\\\"variables\\\":null }\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e92309e21a95a3cb7099535c9bd4e3635da7015f"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkzMjY1MQ==", "bodyText": "There is no reason to issue a second request here.", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r442932651", "createdAt": "2020-06-19T16:21:13Z", "author": {"login": "aklish"}, "path": "elide-standalone/src/test/java/example/ElideStandaloneTest.java", "diffHunk": "@@ -298,62 +291,33 @@ public void testAsyncApiEndpoint() throws InterruptedException {\n                         .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n                         .body(\"data.type\", equalTo(\"asyncQuery\"))\n                         .body(\"data.attributes.queryType\", equalTo(\"JSONAPI_V1_0\"))\n-                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n-                        .body(\"data.relationships.result.data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.relationships.result.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"));\n \n                 // Validate AsyncQueryResult Response\n                 given()\n                         .accept(\"application/vnd.api+json\")\n-                        .get(\"/api/v1/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d/result\")\n+                        .get(\"/api/v1/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e92309e21a95a3cb7099535c9bd4e3635da7015f"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkzMjc2Mg==", "bodyText": "Validating GraphQL should be a separate test.", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r442932762", "createdAt": "2020-06-19T16:21:28Z", "author": {"login": "aklish"}, "path": "elide-standalone/src/test/java/example/ElideStandaloneTest.java", "diffHunk": "@@ -298,62 +291,33 @@ public void testAsyncApiEndpoint() throws InterruptedException {\n                         .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n                         .body(\"data.type\", equalTo(\"asyncQuery\"))\n                         .body(\"data.attributes.queryType\", equalTo(\"JSONAPI_V1_0\"))\n-                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n-                        .body(\"data.relationships.result.data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.relationships.result.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"));\n \n                 // Validate AsyncQueryResult Response\n                 given()\n                         .accept(\"application/vnd.api+json\")\n-                        .get(\"/api/v1/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d/result\")\n+                        .get(\"/api/v1/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\")\n                         .then()\n                         .statusCode(com.yahoo.elide.core.HttpStatus.SC_OK)\n                         .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n-                        .body(\"data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.attributes.contentLength\", notNullValue())\n-                        .body(\"data.attributes.responseBody\", equalTo(\"{\\\"data\\\":\"\n-                                + \"[{\\\"type\\\":\\\"post\\\",\\\"id\\\":\\\"2\\\",\"\n-                                + \"\\\"attributes\\\":{\\\"abusiveContent\\\":false,\"\n-                                + \"\\\"content\\\":\\\"This is my first post. woot.\\\",\"\n-                                + \"\\\"date\\\":\\\"2019-01-01T00:00Z\\\"}}]}\"))\n-                        .body(\"data.attributes.status\", equalTo(200))\n-                        .body(\"data.relationships.query.data.type\", equalTo(\"asyncQuery\"))\n-                        .body(\"data.relationships.query.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+                        .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                        .body(\"data.attributes.result.contentLength\", notNullValue())\n+                        .body(\"data.attributes.result.responseBody\", equalTo(\"{\\\"data\\\":\"\n+                                + \"[{\\\"type\\\":\\\"post\\\",\\\"id\\\":\\\"2\\\",\\\"attributes\\\":{\\\"abusiveContent\\\":false,\"\n+                                + \"\\\"content\\\":\\\"This is my first post. woot.\\\",\\\"date\\\":\\\"2019-01-01T00:00Z\\\"}}]}\"));\n \n                 // Validate GraphQL Response\n                 String responseGraphQL = given()\n                         .contentType(MediaType.APPLICATION_JSON)\n                         .accept(MediaType.APPLICATION_JSON)\n                         .body(\"{\\\"query\\\":\\\"{ asyncQuery(ids: [\\\\\\\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\\\\\\\"]) \"\n                                 + \"{ edges { node { id queryType status result \"\n-                                + \"{ edges { node { id responseBody status} } } } } } }\\\",\"\n+                                + \"{ responseBody httpStatus resultType contentLength } } } } }\\\",\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e92309e21a95a3cb7099535c9bd4e3635da7015f"}, "originalPosition": 98}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4f942313a0d7ba67cdd0e6ec46371126e6b8673", "author": {"user": {"login": "ayeswarya", "name": null}}, "url": "https://github.com/yahoo/elide/commit/d4f942313a0d7ba67cdd0e6ec46371126e6b8673", "committedDate": "2020-06-23T05:32:30Z", "message": "Review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f2cf0f6293e4935011d48635bb39f4198b0e0c3c", "author": {"user": {"login": "ayeswarya", "name": null}}, "url": "https://github.com/yahoo/elide/commit/f2cf0f6293e4935011d48635bb39f4198b0e0c3c", "committedDate": "2020-06-23T13:25:03Z", "message": "edit log message"}, "afterCommit": {"oid": "d4f942313a0d7ba67cdd0e6ec46371126e6b8673", "author": {"user": {"login": "ayeswarya", "name": null}}, "url": "https://github.com/yahoo/elide/commit/d4f942313a0d7ba67cdd0e6ec46371126e6b8673", "committedDate": "2020-06-23T05:32:30Z", "message": "Review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e57df913949ed63471537ed64d4dbe63612d34a3", "author": {"user": {"login": "ayeswarya", "name": null}}, "url": "https://github.com/yahoo/elide/commit/e57df913949ed63471537ed64d4dbe63612d34a3", "committedDate": "2020-06-23T14:43:50Z", "message": "add interrupt"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8175e2483db8fcabf5bc394144024d80fa7bcfb", "author": {"user": {"login": "ayeswarya", "name": null}}, "url": "https://github.com/yahoo/elide/commit/e8175e2483db8fcabf5bc394144024d80fa7bcfb", "committedDate": "2020-06-23T14:44:50Z", "message": "remove interrupt"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84188949db3580a15ac315d67494428bb24bce00", "author": {"user": {"login": "ayeswarya", "name": null}}, "url": "https://github.com/yahoo/elide/commit/84188949db3580a15ac315d67494428bb24bce00", "committedDate": "2020-06-23T14:54:34Z", "message": "include interrupt thread to overcome merge conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8d20922e60105a722df6133d014cab410f413a6", "author": {"user": {"login": "ayeswarya", "name": null}}, "url": "https://github.com/yahoo/elide/commit/c8d20922e60105a722df6133d014cab410f413a6", "committedDate": "2020-06-23T15:00:47Z", "message": "Merge branch 'elide-5.x' of github.com:yahoo/elide into CARBON-167-Embeddable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "295bb2db4e1510b7fcfce43f1911b1738536c0ac", "author": {"user": {"login": "ayeswarya", "name": null}}, "url": "https://github.com/yahoo/elide/commit/295bb2db4e1510b7fcfce43f1911b1738536c0ac", "committedDate": "2020-06-23T15:21:10Z", "message": "merge 5.x"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44f25c8e3d95be214ccddfdfee83ab7790784354", "author": {"user": {"login": "ayeswarya", "name": null}}, "url": "https://github.com/yahoo/elide/commit/44f25c8e3d95be214ccddfdfee83ab7790784354", "committedDate": "2020-06-23T17:28:06Z", "message": "test changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a2111c39060a2f19d984e923dfbd65e153ab38e", "author": {"user": {"login": "ayeswarya", "name": null}}, "url": "https://github.com/yahoo/elide/commit/8a2111c39060a2f19d984e923dfbd65e153ab38e", "committedDate": "2020-06-23T18:44:11Z", "message": "remove asyncinterruptthread"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MTA1MzA2", "url": "https://github.com/yahoo/elide/pull/1353#pullrequestreview-436105306", "createdAt": "2020-06-23T19:51:46Z", "commit": {"oid": "8a2111c39060a2f19d984e923dfbd65e153ab38e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxOTo1MTo0NlrOGn4OPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMDozNDo1MFrOGn5jqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ2ODc5OA==", "bodyText": "YOu could probably combine this test with the test for 3 seconds by writing a common function and passing it some arguments (like the sleep time).", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r444468798", "createdAt": "2020-06-23T19:51:46Z", "author": {"login": "aklish"}, "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java", "diffHunk": "@@ -150,64 +172,280 @@ public void jsonApiRequestTests() throws InterruptedException {\n                 response\n                         .then()\n                         .statusCode(HttpStatus.SC_OK)\n-                        .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n+                        .body(\"data.id\", equalTo(\"edc4a871-dff2-4054-804e-d80075cf830e\"))\n                         .body(\"data.type\", equalTo(\"asyncQuery\"))\n                         .body(\"data.attributes.queryType\", equalTo(\"JSONAPI_V1_0\"))\n                         .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n-                        .body(\"data.relationships.result.data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.relationships.result.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+                        .body(\"data.attributes.result.contentLength\", notNullValue())\n+                        .body(\"data.attributes.result.responseBody\", equalTo(\"{\\\"data\\\":\"\n+                                + \"[{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"3\\\",\\\"attributes\\\":{\\\"title\\\":\\\"For Whom the Bell Tolls\\\"}}\"\n+                                + \",{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"2\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Song of Ice and Fire\\\"}},\"\n+                                + \"{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"1\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Ender's Game\\\"}}]}\"))\n+                        .body(\"data.attributes.result.httpStatus\", equalTo(200))\n+                        .body(\"data.attributes.result.resultType\", equalTo(ResultType.EMBEDDED.toString()));\n+\n+\n+                break;\n+            }\n+            i++;\n+\n+            if (i == 1000) {\n+                fail(\"Async Query not completed.\");\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Various tests for a JSONAPI query as a Async Request with asyncAfterSeconds value set to 7.\n+     * Happy Path Test Scenario 2\n+     * @throws InterruptedException\n+     */\n+    @Test\n+    public void jsonApiHappyPath2() throws InterruptedException {\n+\n+        AsyncDelayStoreTransaction.sleep = true;\n+\n+        //Create Async Request\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        data(\n+                                resource(\n+                                        type(\"asyncQuery\"),\n+                                        id(\"edc4a871-dff2-4054-804e-d80075cf831f\"),\n+                                        attributes(\n+                                                attr(\"query\", \"/book?sort=genre&fields%5Bbook%5D=title\"),\n+                                                attr(\"queryType\", \"JSONAPI_V1_0\"),\n+                                                attr(\"status\", \"QUEUED\"),\n+                                                attr(\"requestId\", \"1001\"),\n+                                                attr(\"asyncAfterSeconds\", \"7\")\n+                                        )\n+                                )\n+                        ).toJSON())\n+                .when()\n+                .post(\"/asyncQuery\")\n+                .then()\n+                .statusCode(org.apache.http.HttpStatus.SC_CREATED)\n+                .body(\"data.id\", equalTo(\"edc4a871-dff2-4054-804e-d80075cf831f\"))\n+                .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n+                .body(\"data.attributes.result.contentLength\", notNullValue())\n+                .body(\"data.attributes.result.responseBody\", equalTo(\"{\\\"data\\\":\"\n+                        + \"[{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"3\\\",\\\"attributes\\\":{\\\"title\\\":\\\"For Whom the Bell Tolls\\\"}}\"\n+                        + \",{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"2\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Song of Ice and Fire\\\"}},\"\n+                        + \"{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"1\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Ender's Game\\\"}}]}\"))\n+                .body(\"data.attributes.result.httpStatus\", equalTo(200))\n+                .body(\"data.attributes.result.resultType\", equalTo(ResultType.EMBEDDED.toString()));\n+\n+        AsyncDelayStoreTransaction.sleep = false;\n+    }\n \n-                // Validate AsyncQueryResult Response\n-                given()\n-                        .accept(\"application/vnd.api+json\")\n-                        .get(\"/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d/result\")\n+    /**\n+     * Various tests for a JSONAPI query as a Async Request with asyncAfterSeconds value set to 0.\n+     * @throws InterruptedException\n+     */\n+    @Test\n+    public void jsonApiRequestTests() throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a2111c39060a2f19d984e923dfbd65e153ab38e"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ2OTE5MA==", "bodyText": "I feel like this test is basically the same as the 7 second one - we can remove this one I think.", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r444469190", "createdAt": "2020-06-23T19:52:30Z", "author": {"login": "aklish"}, "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java", "diffHunk": "@@ -150,64 +172,280 @@ public void jsonApiRequestTests() throws InterruptedException {\n                 response\n                         .then()\n                         .statusCode(HttpStatus.SC_OK)\n-                        .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n+                        .body(\"data.id\", equalTo(\"edc4a871-dff2-4054-804e-d80075cf830e\"))\n                         .body(\"data.type\", equalTo(\"asyncQuery\"))\n                         .body(\"data.attributes.queryType\", equalTo(\"JSONAPI_V1_0\"))\n                         .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n-                        .body(\"data.relationships.result.data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.relationships.result.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+                        .body(\"data.attributes.result.contentLength\", notNullValue())\n+                        .body(\"data.attributes.result.responseBody\", equalTo(\"{\\\"data\\\":\"\n+                                + \"[{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"3\\\",\\\"attributes\\\":{\\\"title\\\":\\\"For Whom the Bell Tolls\\\"}}\"\n+                                + \",{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"2\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Song of Ice and Fire\\\"}},\"\n+                                + \"{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"1\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Ender's Game\\\"}}]}\"))\n+                        .body(\"data.attributes.result.httpStatus\", equalTo(200))\n+                        .body(\"data.attributes.result.resultType\", equalTo(ResultType.EMBEDDED.toString()));\n+\n+\n+                break;\n+            }\n+            i++;\n+\n+            if (i == 1000) {\n+                fail(\"Async Query not completed.\");\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Various tests for a JSONAPI query as a Async Request with asyncAfterSeconds value set to 7.\n+     * Happy Path Test Scenario 2\n+     * @throws InterruptedException\n+     */\n+    @Test\n+    public void jsonApiHappyPath2() throws InterruptedException {\n+\n+        AsyncDelayStoreTransaction.sleep = true;\n+\n+        //Create Async Request\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        data(\n+                                resource(\n+                                        type(\"asyncQuery\"),\n+                                        id(\"edc4a871-dff2-4054-804e-d80075cf831f\"),\n+                                        attributes(\n+                                                attr(\"query\", \"/book?sort=genre&fields%5Bbook%5D=title\"),\n+                                                attr(\"queryType\", \"JSONAPI_V1_0\"),\n+                                                attr(\"status\", \"QUEUED\"),\n+                                                attr(\"requestId\", \"1001\"),\n+                                                attr(\"asyncAfterSeconds\", \"7\")\n+                                        )\n+                                )\n+                        ).toJSON())\n+                .when()\n+                .post(\"/asyncQuery\")\n+                .then()\n+                .statusCode(org.apache.http.HttpStatus.SC_CREATED)\n+                .body(\"data.id\", equalTo(\"edc4a871-dff2-4054-804e-d80075cf831f\"))\n+                .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n+                .body(\"data.attributes.result.contentLength\", notNullValue())\n+                .body(\"data.attributes.result.responseBody\", equalTo(\"{\\\"data\\\":\"\n+                        + \"[{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"3\\\",\\\"attributes\\\":{\\\"title\\\":\\\"For Whom the Bell Tolls\\\"}}\"\n+                        + \",{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"2\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Song of Ice and Fire\\\"}},\"\n+                        + \"{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"1\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Ender's Game\\\"}}]}\"))\n+                .body(\"data.attributes.result.httpStatus\", equalTo(200))\n+                .body(\"data.attributes.result.resultType\", equalTo(ResultType.EMBEDDED.toString()));\n+\n+        AsyncDelayStoreTransaction.sleep = false;\n+    }\n \n-                // Validate AsyncQueryResult Response\n-                given()\n-                        .accept(\"application/vnd.api+json\")\n-                        .get(\"/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d/result\")\n+    /**\n+     * Various tests for a JSONAPI query as a Async Request with asyncAfterSeconds value set to 0.\n+     * @throws InterruptedException\n+     */\n+    @Test\n+    public void jsonApiRequestTests() throws InterruptedException {\n+\n+        AsyncDelayStoreTransaction.sleep = true;\n+        //Create Async Request\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        data(\n+                                resource(\n+                                        type(\"asyncQuery\"),\n+                                        id(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"),\n+                                        attributes(\n+                                                attr(\"query\", \"/book?sort=genre&fields%5Bbook%5D=title\"),\n+                                                attr(\"queryType\", \"JSONAPI_V1_0\"),\n+                                                attr(\"status\", \"QUEUED\"),\n+                                                attr(\"requestId\", \"1001\"),\n+                                                attr(\"asyncAfterSeconds\", \"0\")\n+                                        )\n+                                )\n+                        ).toJSON())\n+                .when()\n+                .post(\"/asyncQuery\")\n+                .then()\n+                .statusCode(org.apache.http.HttpStatus.SC_CREATED)\n+                .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n+                .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                .body(\"data.attributes.status\", equalTo(\"PROCESSING\"))\n+                .body(\"data.attributes.result.contentLength\", nullValue())\n+                .body(\"data.attributes.result.responseBody\", nullValue())\n+                .body(\"data.attributes.result.httpStatus\", nullValue())\n+                .body(\"data.attributes.result.resultType\", nullValue());\n+\n+        AsyncDelayStoreTransaction.sleep = false;\n+        int i = 0;\n+        while (i < 1000) {\n+            Thread.sleep(10);\n+            Response response = given()\n+                    .accept(\"application/vnd.api+json\")\n+                    .get(\"/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\");\n+\n+            // If Async Query is created and completed\n+            if (response.jsonPath().getString(\"data.attributes.status\").equals(\"COMPLETE\")) {\n+\n+                // Validate AsyncQuery Response\n+                response\n                         .then()\n                         .statusCode(HttpStatus.SC_OK)\n                         .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n-                        .body(\"data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.attributes.contentLength\", notNullValue())\n-                        .body(\"data.attributes.responseBody\", equalTo(\"{\\\"data\\\":\"\n+                        .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                        .body(\"data.attributes.queryType\", equalTo(\"JSONAPI_V1_0\"))\n+                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n+                        .body(\"data.attributes.result.contentLength\", notNullValue())\n+                        .body(\"data.attributes.result.responseBody\", equalTo(\"{\\\"data\\\":\"\n                                 + \"[{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"3\\\",\\\"attributes\\\":{\\\"title\\\":\\\"For Whom the Bell Tolls\\\"}}\"\n                                 + \",{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"2\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Song of Ice and Fire\\\"}},\"\n                                 + \"{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"1\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Ender's Game\\\"}}]}\"))\n-                        .body(\"data.attributes.status\", equalTo(200))\n-                        .body(\"data.relationships.query.data.type\", equalTo(\"asyncQuery\"))\n-                        .body(\"data.relationships.query.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+                        .body(\"data.attributes.result.httpStatus\", equalTo(200))\n+                        .body(\"data.attributes.result.resultType\", equalTo(ResultType.EMBEDDED.toString()));\n+                break;\n+            }\n+            i++;\n \n+            if (i == 1000) {\n+                fail(\"Async Query not completed.\");\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Test JSON Api Async Query Response.\n+     * @throws InterruptedException\n+     */\n+    @Test\n+    public void jsonApiAsyncQyeryResponse() throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a2111c39060a2f19d984e923dfbd65e153ab38e"}, "originalPosition": 257}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ2OTQ2OA==", "bodyText": "Why don't we create this with GraphQL instead of JSON-API?", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r444469468", "createdAt": "2020-06-23T19:53:06Z", "author": {"login": "aklish"}, "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java", "diffHunk": "@@ -150,64 +172,280 @@ public void jsonApiRequestTests() throws InterruptedException {\n                 response\n                         .then()\n                         .statusCode(HttpStatus.SC_OK)\n-                        .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n+                        .body(\"data.id\", equalTo(\"edc4a871-dff2-4054-804e-d80075cf830e\"))\n                         .body(\"data.type\", equalTo(\"asyncQuery\"))\n                         .body(\"data.attributes.queryType\", equalTo(\"JSONAPI_V1_0\"))\n                         .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n-                        .body(\"data.relationships.result.data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.relationships.result.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+                        .body(\"data.attributes.result.contentLength\", notNullValue())\n+                        .body(\"data.attributes.result.responseBody\", equalTo(\"{\\\"data\\\":\"\n+                                + \"[{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"3\\\",\\\"attributes\\\":{\\\"title\\\":\\\"For Whom the Bell Tolls\\\"}}\"\n+                                + \",{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"2\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Song of Ice and Fire\\\"}},\"\n+                                + \"{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"1\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Ender's Game\\\"}}]}\"))\n+                        .body(\"data.attributes.result.httpStatus\", equalTo(200))\n+                        .body(\"data.attributes.result.resultType\", equalTo(ResultType.EMBEDDED.toString()));\n+\n+\n+                break;\n+            }\n+            i++;\n+\n+            if (i == 1000) {\n+                fail(\"Async Query not completed.\");\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Various tests for a JSONAPI query as a Async Request with asyncAfterSeconds value set to 7.\n+     * Happy Path Test Scenario 2\n+     * @throws InterruptedException\n+     */\n+    @Test\n+    public void jsonApiHappyPath2() throws InterruptedException {\n+\n+        AsyncDelayStoreTransaction.sleep = true;\n+\n+        //Create Async Request\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        data(\n+                                resource(\n+                                        type(\"asyncQuery\"),\n+                                        id(\"edc4a871-dff2-4054-804e-d80075cf831f\"),\n+                                        attributes(\n+                                                attr(\"query\", \"/book?sort=genre&fields%5Bbook%5D=title\"),\n+                                                attr(\"queryType\", \"JSONAPI_V1_0\"),\n+                                                attr(\"status\", \"QUEUED\"),\n+                                                attr(\"requestId\", \"1001\"),\n+                                                attr(\"asyncAfterSeconds\", \"7\")\n+                                        )\n+                                )\n+                        ).toJSON())\n+                .when()\n+                .post(\"/asyncQuery\")\n+                .then()\n+                .statusCode(org.apache.http.HttpStatus.SC_CREATED)\n+                .body(\"data.id\", equalTo(\"edc4a871-dff2-4054-804e-d80075cf831f\"))\n+                .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n+                .body(\"data.attributes.result.contentLength\", notNullValue())\n+                .body(\"data.attributes.result.responseBody\", equalTo(\"{\\\"data\\\":\"\n+                        + \"[{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"3\\\",\\\"attributes\\\":{\\\"title\\\":\\\"For Whom the Bell Tolls\\\"}}\"\n+                        + \",{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"2\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Song of Ice and Fire\\\"}},\"\n+                        + \"{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"1\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Ender's Game\\\"}}]}\"))\n+                .body(\"data.attributes.result.httpStatus\", equalTo(200))\n+                .body(\"data.attributes.result.resultType\", equalTo(ResultType.EMBEDDED.toString()));\n+\n+        AsyncDelayStoreTransaction.sleep = false;\n+    }\n \n-                // Validate AsyncQueryResult Response\n-                given()\n-                        .accept(\"application/vnd.api+json\")\n-                        .get(\"/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d/result\")\n+    /**\n+     * Various tests for a JSONAPI query as a Async Request with asyncAfterSeconds value set to 0.\n+     * @throws InterruptedException\n+     */\n+    @Test\n+    public void jsonApiRequestTests() throws InterruptedException {\n+\n+        AsyncDelayStoreTransaction.sleep = true;\n+        //Create Async Request\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        data(\n+                                resource(\n+                                        type(\"asyncQuery\"),\n+                                        id(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"),\n+                                        attributes(\n+                                                attr(\"query\", \"/book?sort=genre&fields%5Bbook%5D=title\"),\n+                                                attr(\"queryType\", \"JSONAPI_V1_0\"),\n+                                                attr(\"status\", \"QUEUED\"),\n+                                                attr(\"requestId\", \"1001\"),\n+                                                attr(\"asyncAfterSeconds\", \"0\")\n+                                        )\n+                                )\n+                        ).toJSON())\n+                .when()\n+                .post(\"/asyncQuery\")\n+                .then()\n+                .statusCode(org.apache.http.HttpStatus.SC_CREATED)\n+                .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n+                .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                .body(\"data.attributes.status\", equalTo(\"PROCESSING\"))\n+                .body(\"data.attributes.result.contentLength\", nullValue())\n+                .body(\"data.attributes.result.responseBody\", nullValue())\n+                .body(\"data.attributes.result.httpStatus\", nullValue())\n+                .body(\"data.attributes.result.resultType\", nullValue());\n+\n+        AsyncDelayStoreTransaction.sleep = false;\n+        int i = 0;\n+        while (i < 1000) {\n+            Thread.sleep(10);\n+            Response response = given()\n+                    .accept(\"application/vnd.api+json\")\n+                    .get(\"/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\");\n+\n+            // If Async Query is created and completed\n+            if (response.jsonPath().getString(\"data.attributes.status\").equals(\"COMPLETE\")) {\n+\n+                // Validate AsyncQuery Response\n+                response\n                         .then()\n                         .statusCode(HttpStatus.SC_OK)\n                         .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n-                        .body(\"data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.attributes.contentLength\", notNullValue())\n-                        .body(\"data.attributes.responseBody\", equalTo(\"{\\\"data\\\":\"\n+                        .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                        .body(\"data.attributes.queryType\", equalTo(\"JSONAPI_V1_0\"))\n+                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n+                        .body(\"data.attributes.result.contentLength\", notNullValue())\n+                        .body(\"data.attributes.result.responseBody\", equalTo(\"{\\\"data\\\":\"\n                                 + \"[{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"3\\\",\\\"attributes\\\":{\\\"title\\\":\\\"For Whom the Bell Tolls\\\"}}\"\n                                 + \",{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"2\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Song of Ice and Fire\\\"}},\"\n                                 + \"{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"1\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Ender's Game\\\"}}]}\"))\n-                        .body(\"data.attributes.status\", equalTo(200))\n-                        .body(\"data.relationships.query.data.type\", equalTo(\"asyncQuery\"))\n-                        .body(\"data.relationships.query.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+                        .body(\"data.attributes.result.httpStatus\", equalTo(200))\n+                        .body(\"data.attributes.result.resultType\", equalTo(ResultType.EMBEDDED.toString()));\n+                break;\n+            }\n+            i++;\n \n+            if (i == 1000) {\n+                fail(\"Async Query not completed.\");\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Test JSON Api Async Query Response.\n+     * @throws InterruptedException\n+     */\n+    @Test\n+    public void jsonApiAsyncQyeryResponse() throws InterruptedException {\n+\n+        //Create Async Request\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        data(\n+                                resource(\n+                                        type(\"asyncQuery\"),\n+                                        id(\"ba31ca4e-ed8f-4be0-a0f3-12088ea9265d\"),\n+                                        attributes(\n+                                                attr(\"query\", \"/book?sort=genre&fields%5Bbook%5D=title\"),\n+                                                attr(\"queryType\", \"JSONAPI_V1_0\"),\n+                                                attr(\"status\", \"QUEUED\"),\n+                                                attr(\"requestId\", \"1001\"),\n+                                                attr(\"asyncAfterSeconds\", \"10\")\n+                                        )\n+                                )\n+                        ).toJSON())\n+                .when()\n+                .post(\"/asyncQuery\")\n+                .then()\n+                .statusCode(org.apache.http.HttpStatus.SC_CREATED);\n+\n+        int i = 0;\n+        while (i < 1000) {\n+            Thread.sleep(10);\n+            Response response = given()\n+                    .accept(\"application/vnd.api+json\")\n+                    .get(\"/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088ea9265d\");\n+\n+            // If Async Query is created and completed\n+            if (response.jsonPath().getString(\"data.attributes.status\").equals(\"COMPLETE\")) {\n                 // Validate GraphQL Response\n                 String responseGraphQL = given()\n                         .contentType(MediaType.APPLICATION_JSON)\n                         .accept(MediaType.APPLICATION_JSON)\n-                        .body(\"{\\\"query\\\":\\\"{ asyncQuery(ids: [\\\\\\\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\\\\\\\"]) \"\n+                        .body(\"{\\\"query\\\":\\\"{ asyncQuery(ids: [\\\\\\\"ba31ca4e-ed8f-4be0-a0f3-12088ea9265d\\\\\\\"]) \"\n                                 + \"{ edges { node { id queryType status result \"\n-                                + \"{ edges { node { id responseBody status} } } } } } }\\\",\"\n+                                + \"{ responseBody httpStatus resultType contentLength } } } } }\\\",\"\n                                 + \"\\\"variables\\\":null}\")\n                         .post(\"/graphQL\")\n                         .asString();\n+                String expectedResponse = \"{\\\"data\\\":{\\\"asyncQuery\\\":{\\\"edges\\\":[{\\\"node\\\":{\\\"id\\\":\\\"ba31ca4e-ed8f-4be0-a0f3-12088ea9265d\\\",\\\"queryType\\\":\\\"JSONAPI_V1_0\\\",\\\"status\\\":\\\"COMPLETE\\\",\"\n+                        + \"\\\"result\\\":{\\\"responseBody\\\":\\\"{\\\\\\\"data\\\\\\\":[{\\\\\\\"type\\\\\\\":\\\\\\\"book\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"3\\\\\\\",\\\\\\\"attributes\\\\\\\":{\\\\\\\"title\\\\\\\":\\\\\\\"For Whom the Bell Tolls\\\\\\\"}},\"\n+                        + \"{\\\\\\\"type\\\\\\\":\\\\\\\"book\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"attributes\\\\\\\":{\\\\\\\"title\\\\\\\":\\\\\\\"Song of Ice and Fire\\\\\\\"}},\"\n+                        + \"{\\\\\\\"type\\\\\\\":\\\\\\\"book\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"attributes\\\\\\\":{\\\\\\\"title\\\\\\\":\\\\\\\"Ender's Game\\\\\\\"}}]}\\\",\"\n+                        + \"\\\"httpStatus\\\":200,\\\"resultType\\\":\\\"EMBEDDED\\\",\\\"contentLength\\\":218}}}]}}}\";\n+                assertEquals(expectedResponse, responseGraphQL);\n+                break;\n+            }\n+            i++;\n+\n+            if (i == 1000) {\n+                fail(\"Async Query not completed.\");\n+            }\n+        }\n+\n+    }\n+\n+\n+    /**\n+     * Test for a GraphQL query as a Async Request with asyncAfterSeconds value set to 3.\n+     * Happy Path Test Scenario 1\n+     * @throws InterruptedException\n+     */\n+    @Test\n+    public void graphQLHappyPath1() throws InterruptedException {\n+\n+        AsyncDelayStoreTransaction.sleep = true;\n \n-                String expectedResponse = document(\n-                        selections(\n-                                field(\n-                                        \"asyncQuery\",\n-                                        selections(\n-                                                field(\"id\", \"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"),\n-                                                field(\"queryType\", \"JSONAPI_V1_0\"),\n-                                                field(\"status\", \"COMPLETE\"),\n-                                                field(\"result\",\n-                                                        selections(\n-                                                                field(\"id\", \"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"),\n-                                                                field(\"responseBody\", \"{\\\\\\\"data\\\\\\\":\"\n-                                                                        + \"[{\\\\\\\"type\\\\\\\":\\\\\\\"book\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"3\\\\\\\",\\\\\\\"attributes\\\\\\\":{\\\\\\\"title\\\\\\\":\\\\\\\"For Whom the Bell Tolls\\\\\\\"}}\"\n-                                                                        + \",{\\\\\\\"type\\\\\\\":\\\\\\\"book\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"attributes\\\\\\\":{\\\\\\\"title\\\\\\\":\\\\\\\"Song of Ice and Fire\\\\\\\"}},\"\n-                                                                        + \"{\\\\\\\"type\\\\\\\":\\\\\\\"book\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"attributes\\\\\\\":{\\\\\\\"title\\\\\\\":\\\\\\\"Ender's Game\\\\\\\"}}]}\"),\n-                                                                field(\"status\", 200)\n-                                                        ))\n+        //Create Async Request\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a2111c39060a2f19d984e923dfbd65e153ab38e"}, "originalPosition": 349}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ4NzM2MA==", "bodyText": "Its probably not worth mocking objects like beans - as they really don't have any behavior - they are just POJOs.  The tests will be less brittle if you initialize a query object for each test.", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r444487360", "createdAt": "2020-06-23T20:28:11Z", "author": {"login": "aklish"}, "path": "elide-async/src/test/java/com/yahoo/elide/async/service/AsyncExecutorServiceTest.java", "diffHunk": "@@ -58,17 +64,50 @@ public void testAsyncExecutorServiceSet() {\n         assertNotNull(service.getRunners());\n         assertEquals(60, service.getMaxRunTime());\n         assertNotNull(service.getExecutor());\n-        assertNotNull(service.getInterruptor());\n+        assertNotNull(service.getUpdater());\n         assertEquals(asyncQueryDao, service.getAsyncQueryDao());\n     }\n \n+    //Test for executor hook execution\n     @Test\n-    public void testExecuteQuery() {\n-        AsyncQuery queryObj = mock(AsyncQuery.class);\n-        User testUser = mock(User.class);\n+    public void testExecuteQueryFail() throws ExecutionException, TimeoutException, InterruptedException {\n+\n+       AsyncQuery queryObj = mock(AsyncQuery.class);\n+       when(queryObj.getAsyncAfterSeconds()).thenReturn(10);\n+       service.executeQuery(queryObj, testUser, NO_VERSION);\n+       verify(queryObj, times(1)).setStatus(QueryStatus.PROCESSING);\n+       verify(queryObj, times(1)).setStatus(QueryStatus.FAILURE);\n+    }\n \n+    //Test for executor hook execution\n+    @Test\n+    public void testExecuteQueryComplete() throws InterruptedException {\n+\n+        AsyncQuery queryObj = mock(AsyncQuery.class);\n+        String query = \"/group?sort=commonName&fields%5Bgroup%5D=commonName,description\";\n+        String id = \"edc4a871-dff2-4054-804e-d80075cf827d\";\n+        ElideResponse response = mock(ElideResponse.class);\n+        when(queryObj.getQuery()).thenReturn(query);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a2111c39060a2f19d984e923dfbd65e153ab38e"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ4ODM3Nw==", "bodyText": "I don't understand why we are mocking the response here (or anywhere else).  It looks like this is dead code.  I would remove it.", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r444488377", "createdAt": "2020-06-23T20:30:20Z", "author": {"login": "aklish"}, "path": "elide-async/src/test/java/com/yahoo/elide/async/service/AsyncExecutorServiceTest.java", "diffHunk": "@@ -58,17 +64,50 @@ public void testAsyncExecutorServiceSet() {\n         assertNotNull(service.getRunners());\n         assertEquals(60, service.getMaxRunTime());\n         assertNotNull(service.getExecutor());\n-        assertNotNull(service.getInterruptor());\n+        assertNotNull(service.getUpdater());\n         assertEquals(asyncQueryDao, service.getAsyncQueryDao());\n     }\n \n+    //Test for executor hook execution\n     @Test\n-    public void testExecuteQuery() {\n-        AsyncQuery queryObj = mock(AsyncQuery.class);\n-        User testUser = mock(User.class);\n+    public void testExecuteQueryFail() throws ExecutionException, TimeoutException, InterruptedException {\n+\n+       AsyncQuery queryObj = mock(AsyncQuery.class);\n+       when(queryObj.getAsyncAfterSeconds()).thenReturn(10);\n+       service.executeQuery(queryObj, testUser, NO_VERSION);\n+       verify(queryObj, times(1)).setStatus(QueryStatus.PROCESSING);\n+       verify(queryObj, times(1)).setStatus(QueryStatus.FAILURE);\n+    }\n \n+    //Test for executor hook execution\n+    @Test\n+    public void testExecuteQueryComplete() throws InterruptedException {\n+\n+        AsyncQuery queryObj = mock(AsyncQuery.class);\n+        String query = \"/group?sort=commonName&fields%5Bgroup%5D=commonName,description\";\n+        String id = \"edc4a871-dff2-4054-804e-d80075cf827d\";\n+        ElideResponse response = mock(ElideResponse.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a2111c39060a2f19d984e923dfbd65e153ab38e"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ4OTc2MQ==", "bodyText": "What about the final state of the query?", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r444489761", "createdAt": "2020-06-23T20:32:58Z", "author": {"login": "aklish"}, "path": "elide-async/src/test/java/com/yahoo/elide/async/service/AsyncExecutorServiceTest.java", "diffHunk": "@@ -58,17 +64,50 @@ public void testAsyncExecutorServiceSet() {\n         assertNotNull(service.getRunners());\n         assertEquals(60, service.getMaxRunTime());\n         assertNotNull(service.getExecutor());\n-        assertNotNull(service.getInterruptor());\n+        assertNotNull(service.getUpdater());\n         assertEquals(asyncQueryDao, service.getAsyncQueryDao());\n     }\n \n+    //Test for executor hook execution\n     @Test\n-    public void testExecuteQuery() {\n-        AsyncQuery queryObj = mock(AsyncQuery.class);\n-        User testUser = mock(User.class);\n+    public void testExecuteQueryFail() throws ExecutionException, TimeoutException, InterruptedException {\n+\n+       AsyncQuery queryObj = mock(AsyncQuery.class);\n+       when(queryObj.getAsyncAfterSeconds()).thenReturn(10);\n+       service.executeQuery(queryObj, testUser, NO_VERSION);\n+       verify(queryObj, times(1)).setStatus(QueryStatus.PROCESSING);\n+       verify(queryObj, times(1)).setStatus(QueryStatus.FAILURE);\n+    }\n \n+    //Test for executor hook execution\n+    @Test\n+    public void testExecuteQueryComplete() throws InterruptedException {\n+\n+        AsyncQuery queryObj = mock(AsyncQuery.class);\n+        String query = \"/group?sort=commonName&fields%5Bgroup%5D=commonName,description\";\n+        String id = \"edc4a871-dff2-4054-804e-d80075cf827d\";\n+        ElideResponse response = mock(ElideResponse.class);\n+        when(queryObj.getQuery()).thenReturn(query);\n+        when(queryObj.getId()).thenReturn(id);\n+        when(queryObj.getQueryType()).thenReturn(QueryType.JSONAPI_V1_0);\n+        when(response.getResponseCode()).thenReturn(200);\n+        when(response.getBody()).thenReturn(\"ResponseBody\");\n+        when(queryObj.getAsyncAfterSeconds()).thenReturn(10);\n         service.executeQuery(queryObj, testUser, NO_VERSION);\n+        verify(queryObj, times(1)).setStatus(QueryStatus.PROCESSING);\n+        verify(queryObj, times(1)).setStatus(QueryStatus.COMPLETE);\n+    }\n \n-        verify(asyncQueryDao, times(0)).updateStatus(queryObj, QueryStatus.QUEUED);\n+    //Test for complete hook execution\n+    @Test\n+    public void testCompleteQuery() throws InterruptedException {\n+\n+        AsyncQuery queryObj = mock(AsyncQuery.class);\n+        when(queryObj.getAsyncAfterSeconds()).thenReturn(0);\n+        when(queryObj.getQueryUpdateWorker()).thenReturn(asyncQueryUpdateThread);\n+        service.executeQuery(queryObj, testUser, NO_VERSION);\n+        service.completeQuery(queryObj, testUser, NO_VERSION);\n+        verify(queryObj, times(1)).setStatus(QueryStatus.PROCESSING);\n+        verify(queryObj, times(2)).getQueryUpdateWorker();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a2111c39060a2f19d984e923dfbd65e153ab38e"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ5MDA3MA==", "bodyText": "Don't mock queryObj", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r444490070", "createdAt": "2020-06-23T20:33:35Z", "author": {"login": "aklish"}, "path": "elide-async/src/test/java/com/yahoo/elide/async/service/AsyncQueryThreadTest.java", "diffHunk": "@@ -54,66 +57,40 @@ public void testAsyncQueryCleanerThreadSet() {\n     }\n \n     @Test\n-    public void testProcessQueryJsonApi() {\n+    public void testProcessQueryJsonApi() throws NoHttpResponseException, URISyntaxException {\n         String query = \"/group?sort=commonName&fields%5Bgroup%5D=commonName,description\";\n+        String id = \"edc4a871-dff2-4054-804e-d80075cf827d\";\n         ElideResponse response = mock(ElideResponse.class);\n \n         when(queryObj.getQuery()).thenReturn(query);\n+        when(queryObj.getId()).thenReturn(id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a2111c39060a2f19d984e923dfbd65e153ab38e"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ5MDY2Ng==", "bodyText": "Don't mock reponse - just create and use a response object (another POJO)", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r444490666", "createdAt": "2020-06-23T20:34:50Z", "author": {"login": "aklish"}, "path": "elide-async/src/test/java/com/yahoo/elide/async/service/AsyncQueryThreadTest.java", "diffHunk": "@@ -54,66 +57,40 @@ public void testAsyncQueryCleanerThreadSet() {\n     }\n \n     @Test\n-    public void testProcessQueryJsonApi() {\n+    public void testProcessQueryJsonApi() throws NoHttpResponseException, URISyntaxException {\n         String query = \"/group?sort=commonName&fields%5Bgroup%5D=commonName,description\";\n+        String id = \"edc4a871-dff2-4054-804e-d80075cf827d\";\n         ElideResponse response = mock(ElideResponse.class);\n \n         when(queryObj.getQuery()).thenReturn(query);\n+        when(queryObj.getId()).thenReturn(id);\n         when(queryObj.getQueryType()).thenReturn(QueryType.JSONAPI_V1_0);\n         when(elide.get(anyString(), any(), any(), anyString())).thenReturn(response);\n         when(response.getResponseCode()).thenReturn(200);\n         when(response.getBody()).thenReturn(\"ResponseBody\");\n \n-        queryThread.processQuery();\n+        queryResultObj = queryThread.processQuery();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a2111c39060a2f19d984e923dfbd65e153ab38e"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2293c8799763540fdab17e9da96b8b8d523725b5", "author": {"user": {"login": "ayeswarya", "name": null}}, "url": "https://github.com/yahoo/elide/commit/2293c8799763540fdab17e9da96b8b8d523725b5", "committedDate": "2020-06-24T17:28:21Z", "message": "graphql tests and remove mocking for queryObj"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9a3f70175b53fae26572d2b72dabbaa215cb1df", "author": {"user": {"login": "ayeswarya", "name": null}}, "url": "https://github.com/yahoo/elide/commit/c9a3f70175b53fae26572d2b72dabbaa215cb1df", "committedDate": "2020-06-25T18:52:38Z", "message": "dsl generation of queries for happy path graphql tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NzgzODkw", "url": "https://github.com/yahoo/elide/pull/1353#pullrequestreview-437783890", "createdAt": "2020-06-25T19:11:41Z", "commit": {"oid": "c9a3f70175b53fae26572d2b72dabbaa215cb1df"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxOToxMTo0MVrOGpITWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxOToyMDozOFrOGpIlcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc4MDgyNw==", "bodyText": "Can we remove the commented out code?", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r445780827", "createdAt": "2020-06-25T19:11:41Z", "author": {"login": "aklish"}, "path": "elide-async/src/test/java/com/yahoo/elide/async/service/AsyncQueryThreadTest.java", "diffHunk": "@@ -28,11 +28,11 @@\n \n public class AsyncQueryThreadTest {\n \n-    private AsyncQueryThread queryThread;\n+    //private AsyncQueryThread queryThread;\n     private User user;\n     private Elide elide;\n     private QueryRunner runner;\n-    private AsyncQuery queryObj;\n+    //private AsyncQuery queryObj;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9a3f70175b53fae26572d2b72dabbaa215cb1df"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc4NDYwMw==", "bodyText": "Let's move this logic to a new class EnumFieldSerializer", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r445784603", "createdAt": "2020-06-25T19:18:59Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-test-helpers/src/main/java/com/yahoo/elide/contrib/testhelpers/graphql/VariableFieldSerializer.java", "diffHunk": "@@ -50,12 +50,17 @@\n public class VariableFieldSerializer extends JsonSerializer<String> {\n \n     private static final String VARIABLE_SIGN = \"$\";\n+    private static final String ENUM_SIGN = \"#\";\n \n     @Override\n     public void serialize(String value, JsonGenerator gen, SerializerProvider serializers) throws IOException {\n+\n         if (value.startsWith(VARIABLE_SIGN)) {\n             // this is a variable\n             gen.writeRawValue(value);\n+        } else if (value.startsWith(ENUM_SIGN)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9a3f70175b53fae26572d2b72dabbaa215cb1df"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc4NTQ1Ng==", "bodyText": "This code duplicates a lot of the code in IntegrationTest.  Can it just extend it instead so we are only change a tiny bit?", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r445785456", "createdAt": "2020-06-25T19:20:38Z", "author": {"login": "aklish"}, "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIntegrationTest.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright 2019, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.integration.tests;\n+\n+import static io.restassured.RestAssured.get;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import com.yahoo.elide.async.integration.tests.framework.AsyncIntegrationTestApplicationResourceConfig;\n+import com.yahoo.elide.core.DataStore;\n+import com.yahoo.elide.core.EntityDictionary;\n+import com.yahoo.elide.core.HttpStatus;\n+import com.yahoo.elide.core.datastore.test.DataStoreTestHarness;\n+import com.yahoo.elide.initialization.InMemoryDataStoreHarness;\n+import com.yahoo.elide.jsonapi.JsonApiMapper;\n+import com.yahoo.elide.jsonapi.models.JsonApiDocument;\n+import com.yahoo.elide.resources.JsonApiEndpoint;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.servlet.ServletContextHandler;\n+import org.eclipse.jetty.servlet.ServletHolder;\n+import org.glassfish.jersey.server.ResourceConfig;\n+import org.glassfish.jersey.servlet.ServletContainer;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.TestInstance;\n+\n+import io.restassured.RestAssured;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+\n+/**\n+ * Async Integration test initializer.  Tests are intended to run sequentially (so they don't stomp on each other's data).\n+ */\n+@Slf4j\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+public abstract class AsyncIntegrationTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9a3f70175b53fae26572d2b72dabbaa215cb1df"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3Nzk3OTU3", "url": "https://github.com/yahoo/elide/pull/1353#pullrequestreview-437797957", "createdAt": "2020-06-25T19:32:55Z", "commit": {"oid": "c9a3f70175b53fae26572d2b72dabbaa215cb1df"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxOTozMjo1NVrOGpI9Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxOTozNDo1OVrOGpJBIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc5MTU0Nw==", "bodyText": "Let's consolidate this request with the next request (there is no need to separate out the status call from the other bits).", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r445791547", "createdAt": "2020-06-25T19:32:55Z", "author": {"login": "aklish"}, "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java", "diffHunk": "@@ -219,98 +214,134 @@ public void jsonApiRequestTests() throws InterruptedException {\n     }\n \n     /**\n-     * Various tests for a GRAPHQL query as a Async Request.\n+     * Various tests for a JSONAPI query as a Async Request with asyncAfterSeconds value set to 7.\n+     * Happy Path Test Scenario 2\n+     * @throws InterruptedException\n      */\n     @Test\n-    public void graphQLRequestTests() throws InterruptedException {\n+    public void jsonApiHappyPath2() throws InterruptedException {\n+\n+        AsyncDelayStoreTransaction.sleep = true;\n+\n+        //Create Async Request\n         given()\n                 .contentType(JSONAPI_CONTENT_TYPE)\n                 .body(\n                         data(\n                                 resource(\n                                         type(\"asyncQuery\"),\n-                                        id(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263c\"),\n+                                        id(\"edc4a871-dff2-4054-804e-d80075cf831f\"),\n                                         attributes(\n-                                                attr(\"query\", \"{\\\"query\\\":\\\"{ book { edges { node { id title } } } }\\\",\\\"variables\\\":null}\"),\n-                                                attr(\"queryType\", \"GRAPHQL_V1_0\"),\n-                                                attr(\"status\", \"QUEUED\")\n+                                                attr(\"query\", \"/book?sort=genre&fields%5Bbook%5D=title\"),\n+                                                attr(\"queryType\", \"JSONAPI_V1_0\"),\n+                                                attr(\"status\", \"QUEUED\"),\n+                                                attr(\"requestId\", \"1001\"),\n+                                                attr(\"asyncAfterSeconds\", \"7\")\n                                         )\n                                 )\n                         ).toJSON())\n                 .when()\n                 .post(\"/asyncQuery\")\n                 .then()\n-                .statusCode(org.apache.http.HttpStatus.SC_CREATED);\n+                .statusCode(org.apache.http.HttpStatus.SC_CREATED)\n+                .body(\"data.id\", equalTo(\"edc4a871-dff2-4054-804e-d80075cf831f\"))\n+                .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n+                .body(\"data.attributes.result.contentLength\", notNullValue())\n+                .body(\"data.attributes.result.responseBody\", equalTo(\"{\\\"data\\\":\"\n+                        + \"[{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"3\\\",\\\"attributes\\\":{\\\"title\\\":\\\"For Whom the Bell Tolls\\\"}}\"\n+                        + \",{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"2\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Song of Ice and Fire\\\"}},\"\n+                        + \"{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"1\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Ender's Game\\\"}}]}\"))\n+                .body(\"data.attributes.result.httpStatus\", equalTo(200))\n+                .body(\"data.attributes.result.resultType\", equalTo(ResultType.EMBEDDED.toString()));\n+\n+        AsyncDelayStoreTransaction.sleep = false;\n+    }\n \n+    /**\n+     * Test for a GraphQL query as a Async Request with asyncAfterSeconds value set to 0.\n+     * Happy Path Test Scenario 1\n+     * @throws InterruptedException\n+     */\n+    @Test\n+    public void graphQLHappyPath1() throws InterruptedException {\n+\n+        AsyncDelayStoreTransaction.sleep = true;\n+        AsyncQuery queryObj = new AsyncQuery();\n+         queryObj.setId(\"edc4a871-dff2-4054-804e-d80075cf828e\");\n+         queryObj.setAsyncAfterSeconds(0);\n+         queryObj.setQueryType(\"#GRAPHQL_V1_0\");\n+         queryObj.setStatus(\"#QUEUED\");\n+         queryObj.setQuery(\"{\\\"query\\\":\\\"{ book { edges { node { id title } } } }\\\",\\\"variables\\\":null}\");\n+         String graphQLRequest = document(\n+                 mutation(\n+                         selection(\n+                                 field(\n+                                         \"asyncQuery\",\n+                                         arguments(\n+                                                 argument(\"op\", \"UPSERT\"),\n+                                                 argument(\"data\", queryObj, UNQUOTED_VALUE)\n+                                         ),\n+                                         selections(\n+                                                 field(\"id\"),\n+                                                 field(\"query\"),\n+                                                 field(\"queryType\"),\n+                                                 field(\"status\")\n+                                         )\n+                                 )\n+                         )\n+                 )\n+         ).toQuery();\n+\n+         JsonNode graphQLJsonNode = toJsonNode(graphQLRequest, null);\n+         given()\n+         .contentType(MediaType.APPLICATION_JSON)\n+         .accept(MediaType.APPLICATION_JSON)\n+         .body(graphQLJsonNode)\n+         .post(\"/graphQL\")\n+         .then()\n+         .statusCode(org.apache.http.HttpStatus.SC_OK);\n+\n+        AsyncDelayStoreTransaction.sleep = false;\n         int i = 0;\n         while (i < 1000) {\n             Thread.sleep(10);\n-            Response response = given()\n-                    .accept(\"application/vnd.api+json\")\n-                    .get(\"/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263c\");\n-\n-            // If Async Query is created and completed then validate results\n-            if (response.jsonPath().getString(\"data.attributes.status\").equals(\"COMPLETE\")) {\n-\n-                // Validate AsyncQuery Response\n-                response\n-                        .then()\n-                        .statusCode(HttpStatus.SC_OK)\n-                        .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263c\"))\n-                        .body(\"data.type\", equalTo(\"asyncQuery\"))\n-                        .body(\"data.attributes.queryType\", equalTo(\"GRAPHQL_V1_0\"))\n-                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n-                        .body(\"data.relationships.result.data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.relationships.result.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263c\"));\n-\n-                // Validate AsyncQueryResult Response\n-                given()\n-                        .accept(\"application/vnd.api+json\")\n-                        .get(\"/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263c/result\")\n-                        .then()\n-                        .statusCode(HttpStatus.SC_OK)\n-                        .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263c\"))\n-                        .body(\"data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.attributes.contentLength\", notNullValue())\n-                        .body(\"data.attributes.responseBody\", equalTo(\"{\\\"data\\\":{\\\"book\\\":{\\\"edges\\\":\"\n-                                + \"[{\\\"node\\\":{\\\"id\\\":\\\"1\\\",\\\"title\\\":\\\"Ender's Game\\\"}},\"\n-                                + \"{\\\"node\\\":{\\\"id\\\":\\\"2\\\",\\\"title\\\":\\\"Song of Ice and Fire\\\"}},\"\n-                                + \"{\\\"node\\\":{\\\"id\\\":\\\"3\\\",\\\"title\\\":\\\"For Whom the Bell Tolls\\\"}}]}}}\"))\n-                        .body(\"data.attributes.status\", equalTo(200))\n-                        .body(\"data.relationships.query.data.type\", equalTo(\"asyncQuery\"))\n-                        .body(\"data.relationships.query.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263c\"));\n-\n+            String graphQLStatus = document(\n+                    selection(\n+                            field(\n+                                    \"asyncQuery\",\n+                                    arguments(\n+                                            argument(\"ids\", \"\\\"edc4a871-dff2-4054-804e-d80075cf828e\\\"\")\n+                                    ),\n+                                    selections(\n+                                            field(\"status\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9a3f70175b53fae26572d2b72dabbaa215cb1df"}, "originalPosition": 359}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc5MjU0Ng==", "bodyText": "Spacing is off here.", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r445792546", "createdAt": "2020-06-25T19:34:59Z", "author": {"login": "aklish"}, "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java", "diffHunk": "@@ -322,9 +353,73 @@ public void graphQLRequestTests() throws InterruptedException {\n             }\n         }\n     }\n+    /**\n+     * Test for a GraphQL query as a Async Request with asyncAfterSeconds value set to 7.\n+     * Happy Path Test Scenario 2\n+     * @throws InterruptedException\n+     */\n+    @Test\n+    public void graphQLHappyPath2() throws InterruptedException {\n+\n+        AsyncDelayStoreTransaction.sleep = true;\n+        AsyncQuery queryObj = new AsyncQuery();\n+         queryObj.setId(\"edc4a871-dff2-4054-804e-d80075cf829e\");\n+         queryObj.setAsyncAfterSeconds(7);\n+         queryObj.setQueryType(\"#GRAPHQL_V1_0\");\n+         queryObj.setStatus(\"#QUEUED\");\n+         queryObj.setQuery(\"{\\\"query\\\":\\\"{ book { edges { node { id title } } } }\\\",\\\"variables\\\":null}\");\n+         String graphQLRequest = document(\n+                 mutation(\n+                         selection(\n+                                 field(\n+                                         \"asyncQuery\",\n+                                         arguments(\n+                                                 argument(\"op\", \"UPSERT\"),\n+                                                 argument(\"data\", queryObj, UNQUOTED_VALUE)\n+                                         ),\n+                                         selections(\n+                                                 field(\"id\"),\n+                                                 field(\"query\"),\n+                                                 field(\"queryType\"),\n+                                                 field(\"status\")\n+                                         )\n+                                 )\n+                         )\n+                 )\n+         ).toQuery();\n+\n+         JsonNode graphQLJsonNode = toJsonNode(graphQLRequest, null);\n+         given()\n+         .contentType(MediaType.APPLICATION_JSON)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9a3f70175b53fae26572d2b72dabbaa215cb1df"}, "originalPosition": 455}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f72af27046e44318b7789818dd18f8d22713d0db", "author": {"user": {"login": "ayeswarya", "name": null}}, "url": "https://github.com/yahoo/elide/commit/f72af27046e44318b7789818dd18f8d22713d0db", "committedDate": "2020-06-25T20:57:01Z", "message": "review changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9d576d0fd9b2d5d388afeec3423518bbaa5c69c", "author": {"user": {"login": "ayeswarya", "name": null}}, "url": "https://github.com/yahoo/elide/commit/f9d576d0fd9b2d5d388afeec3423518bbaa5c69c", "committedDate": "2020-06-25T21:51:04Z", "message": "move sleep delay flag to aftereach method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3ODg3MTM4", "url": "https://github.com/yahoo/elide/pull/1353#pullrequestreview-437887138", "createdAt": "2020-06-25T21:56:13Z", "commit": {"oid": "f9d576d0fd9b2d5d388afeec3423518bbaa5c69c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 852, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}