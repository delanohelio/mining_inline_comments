{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNjAzODAz", "number": 1208, "reviewThreads": {"totalCount": 39, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMjoxNzo0M1rODkcb0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxODoyMToyOFrODq6ocw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTQxMjAyOnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/models/LabelResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMjoxNzo0M1rOFwxXig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMjoxNzo0M1rOFwxXig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY4NDgxMA==", "bodyText": "Adding JoinPath here exposes the implementation as part of the interface.  The interface should be simple with the minimum amount of data needed.", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r386684810", "createdAt": "2020-03-02T22:17:43Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/models/LabelResolver.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.metadata.models;\n+\n+import com.yahoo.elide.core.EntityDictionary;\n+import com.yahoo.elide.core.Path;\n+import com.yahoo.elide.datastores.aggregation.core.JoinPath;\n+import com.yahoo.elide.datastores.aggregation.metadata.MetaDataStore;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * LabelResolver is an interface for resolving column into some type of \"labels\" such as column reference, join\n+ * path and so on. It uses Depth-First-Search approach to traverse join path vertically. The resolved results would\n+ * be stored for quick access.\n+ */\n+public interface LabelResolver {\n+    /**\n+     * Resolve a label for a join path. This method need to be implemented for each column.\n+     *\n+     * @param fromPath path to be resolved\n+     * @param toResolve paths that are pending resolving\n+     * @param resolved resolved paths\n+     * @param generator generator to construct labels\n+     * @param metaDataStore meta data store\n+     * @param <T> label value type\n+     * @return resolved label\n+     */\n+    <T> T resolveLabel(JoinPath fromPath,\n+                       Set<JoinPath> toResolve,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8ee284aef392068cf27defcadd6e82a5ed1daf4"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzUzNDU5OnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/LabelResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjowMjoyMlrOFx_RiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjowMjoyMlrOFx_RiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk2MTIyNQ==", "bodyText": "Typo?  toResolve?", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r387961225", "createdAt": "2020-03-04T22:02:22Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/LabelResolver.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.metadata;\n+\n+import com.yahoo.elide.datastores.aggregation.core.JoinPath;\n+import com.yahoo.elide.datastores.aggregation.metadata.models.Column;\n+\n+import java.util.Collections;\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * LabelResolver is an interface for resolving column into some type of \"labels\" such as column reference, join\n+ * path and so on. It uses Depth-First-Search approach to traverse join path vertically. The resolved results would\n+ * be stored for quick access.\n+ */\n+public abstract class LabelResolver {\n+    private final Column roResolve;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74c058d7419b2d2ecc2d112d6aa6e9a68025d119"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzU5MjYwOnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjoyMjoyM1rOFx_1Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjoyMjoyM1rOFx_1Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk3MDM2Nw==", "bodyText": "There should be a default constructor which does the class Scan and another constructor which allows a set of classes to be provided.", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r387970367", "createdAt": "2020-03-04T22:22:23Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java", "diffHunk": "@@ -26,7 +29,7 @@ public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory\n \n     @Override\n     public DataStore getDataStore() {\n-        MetaDataStore metaDataStore = new MetaDataStore();\n+        MetaDataStore metaDataStore = new MetaDataStore(ClassScanner.getAnnotatedClasses(METADATA_STORE_ANNOTATIONS));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74c058d7419b2d2ecc2d112d6aa6e9a68025d119"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzU5MzYxOnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjoyMjo0MVrOFx_12Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjoyMjo0MVrOFx_12Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk3MDUyMQ==", "bodyText": "There should be a default constructor which does the class Scan and another constructor which allows a set of classes to be provided.", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r387970521", "createdAt": "2020-03-04T22:22:41Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java", "diffHunk": "@@ -28,26 +29,30 @@\n import lombok.Getter;\n \n import java.lang.annotation.Annotation;\n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n \n /**\n  * MetaDataStore is a in-memory data store that manage data models for an {@link AggregationDataStore}.\n  */\n-public class MetaDataStore extends HashMapDataStore {\n+public class MetaDataStore extends HashMapDataStore implements LabelStore {\n     private static final Package META_DATA_PACKAGE = Table.class.getPackage();\n+    private static final Pattern REFERENCE_PARENTHESES = Pattern.compile(\"\\\\{\\\\{(.+?)}}\");\n \n-    private static final List<Class<? extends Annotation>> METADATA_STORE_ANNOTATIONS =\n+    public static final List<Class<? extends Annotation>> METADATA_STORE_ANNOTATIONS =\n             Arrays.asList(FromTable.class, FromSubquery.class, Subselect.class, javax.persistence.Table.class);\n \n     @Getter\n     private final Set<Class<?>> modelsToBind;\n \n-    public MetaDataStore() {\n+    public MetaDataStore(Set<Class<?>> modelsToBind) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74c058d7419b2d2ecc2d112d6aa6e9a68025d119"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzYwMzQ1OnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjoyNjoyMVrOFx_78g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMDo0MToyMlrOFyjZTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk3MjA4Mg==", "bodyText": "Do you need to escape the closing curly braces as well?", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r387972082", "createdAt": "2020-03-04T22:26:21Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java", "diffHunk": "@@ -28,26 +29,30 @@\n import lombok.Getter;\n \n import java.lang.annotation.Annotation;\n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n \n /**\n  * MetaDataStore is a in-memory data store that manage data models for an {@link AggregationDataStore}.\n  */\n-public class MetaDataStore extends HashMapDataStore {\n+public class MetaDataStore extends HashMapDataStore implements LabelStore {\n     private static final Package META_DATA_PACKAGE = Table.class.getPackage();\n+    private static final Pattern REFERENCE_PARENTHESES = Pattern.compile(\"\\\\{\\\\{(.+?)}}\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74c058d7419b2d2ecc2d112d6aa6e9a68025d119"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU1MzAzNw==", "bodyText": "Intellij is complaining about that.", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r388553037", "createdAt": "2020-03-05T20:41:22Z", "author": {"login": "hellohanchen"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java", "diffHunk": "@@ -28,26 +29,30 @@\n import lombok.Getter;\n \n import java.lang.annotation.Annotation;\n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n \n /**\n  * MetaDataStore is a in-memory data store that manage data models for an {@link AggregationDataStore}.\n  */\n-public class MetaDataStore extends HashMapDataStore {\n+public class MetaDataStore extends HashMapDataStore implements LabelStore {\n     private static final Package META_DATA_PACKAGE = Table.class.getPackage();\n+    private static final Pattern REFERENCE_PARENTHESES = Pattern.compile(\"\\\\{\\\\{(.+?)}}\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk3MjA4Mg=="}, "originalCommit": {"oid": "74c058d7419b2d2ecc2d112d6aa6e9a68025d119"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzYwNzcwOnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjoyNzo0NlrOFx_-eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjoyNzo0NlrOFx_-eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk3MjcyOQ==", "bodyText": "Maybe this should be moved to column?", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r387972729", "createdAt": "2020-03-04T22:27:46Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java", "diffHunk": "@@ -171,6 +184,45 @@ public static boolean isTableJoin(Class<?> cls, String fieldName, EntityDictiona\n         return dictionary.getAttributeOrRelationAnnotation(cls, Join.class, fieldName) != null;\n     }\n \n+    /**\n+     * Construct a column name as meta data\n+     *\n+     * @param tableClass table class\n+     * @param fieldName field name\n+     * @param dictionary entity dictionary to use\n+     * @return <code>tableAlias.fieldName</code>\n+     */\n+    public static String constructColumnName(Class<?> tableClass, String fieldName, EntityDictionary dictionary) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74c058d7419b2d2ecc2d112d6aa6e9a68025d119"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzYyMDE4OnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjozMjozM1rOFyAGZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMDo0MzoxN1rOFyjcvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk3NDc1OA==", "bodyText": "Is there any reason not to do this in the constructor of the MetadataStore?", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r387974758", "createdAt": "2020-03-04T22:32:33Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java", "diffHunk": "@@ -190,4 +242,27 @@ public void resolveSourceColumn() {\n                 })\n         );\n     }\n+\n+    @Override\n+    public LabelResolver getLabelResolver(Path path) {\n+        Path.PathElement last = path.lastElement().get();\n+\n+        return ((Table) dataStore.get(Table.class).get(dictionary.getJsonAliasFor(last.getType())))\n+                .getColumnMap()\n+                .get(last.getFieldName())\n+                .getLabelResolver();\n+    }\n+\n+    /**\n+     * Resolve all column references in all tables.\n+     */\n+    public void resolveReference() {\n+        getMetaData(Table.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74c058d7419b2d2ecc2d112d6aa6e9a68025d119"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk3NzUxMA==", "bodyText": "I don't understand what resolveReference is trying to do in general beyond the validation.", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r387977510", "createdAt": "2020-03-04T22:39:26Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java", "diffHunk": "@@ -190,4 +242,27 @@ public void resolveSourceColumn() {\n                 })\n         );\n     }\n+\n+    @Override\n+    public LabelResolver getLabelResolver(Path path) {\n+        Path.PathElement last = path.lastElement().get();\n+\n+        return ((Table) dataStore.get(Table.class).get(dictionary.getJsonAliasFor(last.getType())))\n+                .getColumnMap()\n+                .get(last.getFieldName())\n+                .getLabelResolver();\n+    }\n+\n+    /**\n+     * Resolve all column references in all tables.\n+     */\n+    public void resolveReference() {\n+        getMetaData(Table.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk3NDc1OA=="}, "originalCommit": {"oid": "74c058d7419b2d2ecc2d112d6aa6e9a68025d119"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU1MzkxOQ==", "bodyText": "The references are generated and stored", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r388553919", "createdAt": "2020-03-05T20:43:17Z", "author": {"login": "hellohanchen"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java", "diffHunk": "@@ -190,4 +242,27 @@ public void resolveSourceColumn() {\n                 })\n         );\n     }\n+\n+    @Override\n+    public LabelResolver getLabelResolver(Path path) {\n+        Path.PathElement last = path.lastElement().get();\n+\n+        return ((Table) dataStore.get(Table.class).get(dictionary.getJsonAliasFor(last.getType())))\n+                .getColumnMap()\n+                .get(last.getFieldName())\n+                .getLabelResolver();\n+    }\n+\n+    /**\n+     * Resolve all column references in all tables.\n+     */\n+    public void resolveReference() {\n+        getMetaData(Table.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk3NDc1OA=="}, "originalCommit": {"oid": "74c058d7419b2d2ecc2d112d6aa6e9a68025d119"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzYzMTkzOnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjozNzoxMVrOFyANxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjozNzoxMVrOFyANxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk3NjY0NA==", "bodyText": "I'm not sure why the QueryEngine needs to populate the metadata store.  The metadata store already knows (in its constructor) everything that needs to be resolved.  I feel like all of this logic belongs there.", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r387976644", "createdAt": "2020-03-04T22:37:11Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java", "diffHunk": "@@ -112,6 +112,7 @@ private void populateMetaData(MetaDataStore metaDataStore) {\n                 .map(model -> constructTable(model, metadataDictionary))\n                 .forEach(metaDataStore::addTable);\n \n+        metaDataStore.resolveReference();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74c058d7419b2d2ecc2d112d6aa6e9a68025d119"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzY0OTgxOnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/core/JoinPath.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjo0NDoyN1rOFyAZGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjo0NDoyN1rOFyAZGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk3OTU0NA==", "bodyText": "We should add some unit tests for these functions.", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r387979544", "createdAt": "2020-03-04T22:44:27Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/core/JoinPath.java", "diffHunk": "@@ -23,4 +34,36 @@ protected boolean needNavigation(Class<?> entityClass, String fieldName, EntityD\n         return dictionary.isRelation(entityClass, fieldName)\n                 || MetaDataStore.isTableJoin(entityClass, fieldName, dictionary);\n     }\n+\n+    /**\n+     * Extend this path with a dotSeparatedPath.\n+     *\n+     * @param dictionary entity dictionary\n+     * @param dotSeparatedPath path e.g. \"bar.baz\", starting for the end of current path\n+     * @return extended path\n+     */\n+    public JoinPath extend(EntityDictionary dictionary, String dotSeparatedPath) {\n+        JoinPath extension = new JoinPath(lastElement().get().getType(), dictionary, dotSeparatedPath);\n+\n+        // append new path after original path\n+        JoinPath extended = extendJoinPath(this, extension);\n+\n+        return new JoinPath(extended);\n+    }\n+\n+    /**\n+     * Append an extension path to an original path, the last element of original path should be the same as the\n+     * first element of extension path.\n+     *\n+     * @param path original path, e.g. <code>[A.B]/[B.C]</code>\n+     * @param extension extension path, e.g. <code>[B.C]/[C.D]</code>\n+     * @param <P> path extension\n+     * @return extended path <code>[A.B]/[B.C]/[C.D]</code>\n+     */\n+    public static <P extends Path> JoinPath extendJoinPath(Path path, P extension) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74c058d7419b2d2ecc2d112d6aa6e9a68025d119"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDA0OTkzOnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/LabelResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNTozNzozNlrOFy9G-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNTozNzozNlrOFy9G-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk3NDMyOQ==", "bodyText": "Rather than special case this, it might be simpler if physical references had resolvers that just return the column name.", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r388974329", "createdAt": "2020-03-06T15:37:36Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/LabelResolver.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.metadata;\n+\n+import static com.yahoo.elide.datastores.aggregation.core.JoinPath.extendJoinPath;\n+import static com.yahoo.elide.datastores.aggregation.metadata.MetaDataStore.isPhysicalReference;\n+import static com.yahoo.elide.datastores.aggregation.metadata.MetaDataStore.resolveFormulaReferences;\n+import static com.yahoo.elide.datastores.aggregation.metadata.MetaDataStore.toFormulaReference;\n+import static com.yahoo.elide.utils.TypeHelper.extendTypeAlias;\n+import static com.yahoo.elide.utils.TypeHelper.getFieldAlias;\n+\n+import com.yahoo.elide.datastores.aggregation.annotation.MetricFormula;\n+import com.yahoo.elide.datastores.aggregation.core.JoinPath;\n+import com.yahoo.elide.datastores.aggregation.metadata.models.Column;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.DimensionFormula;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.JoinTo;\n+\n+import java.util.Collections;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * LabelResolver is an interface for resolving column into some type of \"labels\" such as column reference, join\n+ * path and so on. It uses Depth-First-Search approach to traverse join path vertically. The resolved results would\n+ * be stored for quick access.\n+ */\n+public abstract class LabelResolver {\n+    private final Column toResolve;\n+\n+    protected LabelResolver(Column toResolve) {\n+        this.toResolve = toResolve;\n+    }\n+\n+    /**\n+     * Resolve label for this column\n+     *\n+     * @param labelStore source-of-truth store\n+     * @param tableAlias label prefix to the table that contains this column\n+     * @return resolved label\n+     */\n+    public abstract String resolveLabel(LabelStore labelStore, String tableAlias);\n+\n+    /**\n+     * Get all joins needs for this column\n+     *\n+     * @param labelStore source-of-truth store\n+     * @param from root join path to this column\n+     * @return full join paths\n+     */\n+    public Set<JoinPath> resolveJoinPaths(LabelStore labelStore, JoinPath from) {\n+        return Collections.singleton(from);\n+    }\n+\n+    /**\n+     * Get all other resolvers that this resolver would involve when resolving label.\n+     *\n+     * @param labelStore table stores all resolvers\n+     * @return dependency resolvers\n+     */\n+    protected Set<LabelResolver> getDependencyResolvers(LabelStore labelStore) {\n+        return Collections.emptySet();\n+    }\n+\n+    /**\n+     * Check whether this resolver would cause reference loop\n+     *\n+     * @param metaDataStore meta data store\n+     */\n+    public void checkResolverLoop(MetaDataStore metaDataStore) {\n+        this.checkResolverLoop(new LinkedHashSet<>(), metaDataStore);\n+    }\n+\n+    /**\n+     * Check whether this resolver would cause reference loop\n+     *\n+     * @param visited visited label resolvers\n+     * @param metaDataStore meta data store\n+     */\n+    private void checkResolverLoop(LinkedHashSet<LabelResolver> visited, MetaDataStore metaDataStore) {\n+        if (visited.contains(this)) {\n+            throw new IllegalArgumentException(referenceLoopMessage(visited, this));\n+        } else {\n+            visited.add(this);\n+            this.getDependencyResolvers(metaDataStore)\n+                    .forEach(resolver -> resolver.checkResolverLoop(visited, metaDataStore));\n+            visited.remove(this);\n+        }\n+    }\n+\n+    /**\n+     * Construct reference loop message.\n+     */\n+    private static String referenceLoopMessage(LinkedHashSet<LabelResolver> visited, LabelResolver loop) {\n+        return \"Formula reference loop found: \"\n+                + visited.stream()\n+                        .map(labelResolver -> labelResolver.toResolve.getId())\n+                        .collect(Collectors.joining(\"->\"))\n+                + \"->\" + loop.toResolve.getId();\n+    }\n+\n+    /**\n+     * Get a {@link DimensionFormula} or {@link MetricFormula} reference resolver.\n+     *\n+     * @param column column that this resolver is built for\n+     * @param tableClass table class\n+     * @param expression formula expression contains physical column, logical column and {@link JoinTo} paths\n+     * @return a resolver\n+     */\n+    public static LabelResolver getFormulaResolver(Column column, Class<?> tableClass, String expression) {\n+        // dimension references are deduplicated\n+        List<String> references =\n+                resolveFormulaReferences(expression).stream().distinct().collect(Collectors.toList());\n+\n+        return new LabelResolver(column) {\n+            @Override\n+            public Set<JoinPath> resolveJoinPaths(LabelStore labelStore, JoinPath from) {\n+                return references.stream()\n+                        .map(reference -> {\n+                            // physical columns don't have dependency resolvers\n+                            if (isPhysicalReference(tableClass, reference, labelStore.getDictionary())) {\n+                                return Stream.<JoinPath>empty();\n+                            }\n+\n+                            JoinPath to = getJoinToPath(labelStore, reference);\n+\n+                            return labelStore.getLabelResolver(to)\n+                                    .resolveJoinPaths(labelStore, extendJoinPath(from, to)).stream();\n+                        })\n+                        .reduce(Stream.empty(), Stream::concat)\n+                        .collect(Collectors.toSet());\n+            }\n+\n+            @Override\n+            public Set<LabelResolver> getDependencyResolvers(LabelStore labelStore) {\n+                return references.stream()\n+                        .map(reference -> {\n+                            // physical columns don't have dependency resolvers\n+                            return isPhysicalReference(tableClass, reference, labelStore.getDictionary())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "169e790e78a2d99da4b3a147bf4d176c8658f5b2"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDA3NzkyOnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/models/Column.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNTo0NToyMlrOFy9YSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNTo0NToyMlrOFy9YSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk3ODc2Mw==", "bodyText": "I wonder if we should move all the LabelResolver stuff to SQLColumn, SQLMetric, and SQLDimension.  Its not clear to me that we want to pollute the base metadata with this.\nI realize we may eventually want to expose a Metric/Dimension Formula to the UI - but that's about the only thing that seems like it properly belongs with the base metadata.", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r388978763", "createdAt": "2020-03-06T15:45:22Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/models/Column.java", "diffHunk": "@@ -103,4 +133,27 @@ public Path getSourcePath(EntityDictionary metadataDictionary) {\n \n         return new Path(Collections.singletonList(new Path.PathElement(tableCls, columnCls, getName())));\n     }\n+\n+    /**\n+     * Construct a label resolver for this column.\n+     *\n+     * @return a label resolver\n+     */\n+    protected LabelResolver constructLabelResolver(EntityDictionary dictionary) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "169e790e78a2d99da4b3a147bf4d176c8658f5b2"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDI4MjA3OnYy", "diffSide": "RIGHT", "path": "elide-core/src/main/java/com/yahoo/elide/utils/TypeHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNjozOTozNFrOFy_YHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNjozOTozNFrOFy_YHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAxMTQ4Ng==", "bodyText": "Let's make sure we have unit tests for all these functions.", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r389011486", "createdAt": "2020-03-06T16:39:34Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/utils/TypeHelper.java", "diffHunk": "@@ -32,6 +32,23 @@ public static boolean isPrimitiveNumberType(Class<?> type) {\n         return PRIMITIVE_NUMBER_TYPES.contains(type);\n     }\n \n+    /**\n+     * Extend an type alias to the final type of an extension path\n+     *\n+     * @param alias type alias to be extended, e.g. <code>a_b</code>\n+     * @param extension path extension from aliased type, e.g. <code>[b.c]/[c.d]</code>\n+     * @return extended type alias, e.g. <code>a_b_c</code>\n+     */\n+    public static String extendTypeAlias(String alias, Path extension) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "169e790e78a2d99da4b3a147bf4d176c8658f5b2"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDI5MTkxOnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/LabelResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNjo0MTozMlrOFy_daA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNjo0MTozMlrOFy_daA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAxMjg0MA==", "bodyText": "This could resolve to the column name by default - so everything can have a label resolver and we don't have to special case physical columns.", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r389012840", "createdAt": "2020-03-06T16:41:32Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/LabelResolver.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.metadata;\n+\n+import static com.yahoo.elide.datastores.aggregation.core.JoinPath.extendJoinPath;\n+import static com.yahoo.elide.datastores.aggregation.metadata.MetaDataStore.isPhysicalReference;\n+import static com.yahoo.elide.datastores.aggregation.metadata.MetaDataStore.resolveFormulaReferences;\n+import static com.yahoo.elide.datastores.aggregation.metadata.MetaDataStore.toFormulaReference;\n+import static com.yahoo.elide.utils.TypeHelper.extendTypeAlias;\n+import static com.yahoo.elide.utils.TypeHelper.getFieldAlias;\n+\n+import com.yahoo.elide.datastores.aggregation.annotation.MetricFormula;\n+import com.yahoo.elide.datastores.aggregation.core.JoinPath;\n+import com.yahoo.elide.datastores.aggregation.metadata.models.Column;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.DimensionFormula;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.JoinTo;\n+\n+import java.util.Collections;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * LabelResolver is an interface for resolving column into some type of \"labels\" such as column reference, join\n+ * path and so on. It uses Depth-First-Search approach to traverse join path vertically. The resolved results would\n+ * be stored for quick access.\n+ */\n+public abstract class LabelResolver {\n+    private final Column toResolve;\n+\n+    protected LabelResolver(Column toResolve) {\n+        this.toResolve = toResolve;\n+    }\n+\n+    /**\n+     * Resolve label for this column\n+     *\n+     * @param labelStore source-of-truth store\n+     * @param tableAlias label prefix to the table that contains this column\n+     * @return resolved label\n+     */\n+    public abstract String resolveLabel(LabelStore labelStore, String tableAlias);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "169e790e78a2d99da4b3a147bf4d176c8658f5b2"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDMyMzY5OnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNjo0OTozNVrOFy_wHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNjo0OTozNVrOFy_wHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAxNzYzMA==", "bodyText": "This function probably belongs with the LabelStore", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r389017630", "createdAt": "2020-03-06T16:49:35Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java", "diffHunk": "@@ -190,4 +239,40 @@ public void resolveSourceColumn() {\n                 })\n         );\n     }\n+\n+    @Override\n+    public LabelResolver getLabelResolver(Path path) {\n+        Path.PathElement last = path.lastElement().get();\n+\n+        return ((Table) dataStore.get(Table.class).get(dictionary.getJsonAliasFor(last.getType())))\n+                .getColumnMap()\n+                .get(last.getFieldName())\n+                .getLabelResolver();\n+    }\n+\n+    /**\n+     * Resolve all column references in all tables.\n+     */\n+    public void resolveLabel() {\n+        getMetaData(Table.class)\n+                .forEach(table -> table.getColumns()\n+                        .forEach(column -> column.getLabelResolver().checkResolverLoop(this)));\n+\n+        getMetaData(Table.class)\n+                .forEach(table -> table.getColumns()\n+                        .forEach(column -> column.resolveLabel(this)));\n+    }\n+\n+    /**\n+     * Check whether a reference is not defined in the logical meta data table, which means it is physical.\n+     *\n+     * @param tableClass table class\n+     * @param reference reference\n+     * @param dictionary meta data dictionary\n+     * @return True if the reference is to a physical column\n+     */\n+    public static boolean isPhysicalReference(Class<?> tableClass, String reference, EntityDictionary dictionary) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "169e790e78a2d99da4b3a147bf4d176c8658f5b2"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDM0MjkyOnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/LabelResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNjo1NTowMVrOFy_8Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNjo1NTowMVrOFy_8Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAyMDY5NA==", "bodyText": "Use flatmap instead", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r389020694", "createdAt": "2020-03-06T16:55:01Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/LabelResolver.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.metadata;\n+\n+import static com.yahoo.elide.datastores.aggregation.core.JoinPath.extendJoinPath;\n+import static com.yahoo.elide.datastores.aggregation.metadata.MetaDataStore.isPhysicalReference;\n+import static com.yahoo.elide.datastores.aggregation.metadata.MetaDataStore.resolveFormulaReferences;\n+import static com.yahoo.elide.datastores.aggregation.metadata.MetaDataStore.toFormulaReference;\n+import static com.yahoo.elide.utils.TypeHelper.extendTypeAlias;\n+import static com.yahoo.elide.utils.TypeHelper.getFieldAlias;\n+\n+import com.yahoo.elide.datastores.aggregation.annotation.MetricFormula;\n+import com.yahoo.elide.datastores.aggregation.core.JoinPath;\n+import com.yahoo.elide.datastores.aggregation.metadata.models.Column;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.DimensionFormula;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.JoinTo;\n+\n+import java.util.Collections;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * LabelResolver is an interface for resolving column into some type of \"labels\" such as column reference, join\n+ * path and so on. It uses Depth-First-Search approach to traverse join path vertically. The resolved results would\n+ * be stored for quick access.\n+ */\n+public abstract class LabelResolver {\n+    private final Column toResolve;\n+\n+    protected LabelResolver(Column toResolve) {\n+        this.toResolve = toResolve;\n+    }\n+\n+    /**\n+     * Resolve label for this column\n+     *\n+     * @param labelStore source-of-truth store\n+     * @param tableAlias label prefix to the table that contains this column\n+     * @return resolved label\n+     */\n+    public abstract String resolveLabel(LabelStore labelStore, String tableAlias);\n+\n+    /**\n+     * Get all joins needs for this column\n+     *\n+     * @param labelStore source-of-truth store\n+     * @param from root join path to this column\n+     * @return full join paths\n+     */\n+    public Set<JoinPath> resolveJoinPaths(LabelStore labelStore, JoinPath from) {\n+        return Collections.singleton(from);\n+    }\n+\n+    /**\n+     * Get all other resolvers that this resolver would involve when resolving label.\n+     *\n+     * @param labelStore table stores all resolvers\n+     * @return dependency resolvers\n+     */\n+    protected Set<LabelResolver> getDependencyResolvers(LabelStore labelStore) {\n+        return Collections.emptySet();\n+    }\n+\n+    /**\n+     * Check whether this resolver would cause reference loop\n+     *\n+     * @param metaDataStore meta data store\n+     */\n+    public void checkResolverLoop(MetaDataStore metaDataStore) {\n+        this.checkResolverLoop(new LinkedHashSet<>(), metaDataStore);\n+    }\n+\n+    /**\n+     * Check whether this resolver would cause reference loop\n+     *\n+     * @param visited visited label resolvers\n+     * @param metaDataStore meta data store\n+     */\n+    private void checkResolverLoop(LinkedHashSet<LabelResolver> visited, MetaDataStore metaDataStore) {\n+        if (visited.contains(this)) {\n+            throw new IllegalArgumentException(referenceLoopMessage(visited, this));\n+        } else {\n+            visited.add(this);\n+            this.getDependencyResolvers(metaDataStore)\n+                    .forEach(resolver -> resolver.checkResolverLoop(visited, metaDataStore));\n+            visited.remove(this);\n+        }\n+    }\n+\n+    /**\n+     * Construct reference loop message.\n+     */\n+    private static String referenceLoopMessage(LinkedHashSet<LabelResolver> visited, LabelResolver loop) {\n+        return \"Formula reference loop found: \"\n+                + visited.stream()\n+                        .map(labelResolver -> labelResolver.toResolve.getId())\n+                        .collect(Collectors.joining(\"->\"))\n+                + \"->\" + loop.toResolve.getId();\n+    }\n+\n+    /**\n+     * Get a {@link DimensionFormula} or {@link MetricFormula} reference resolver.\n+     *\n+     * @param column column that this resolver is built for\n+     * @param tableClass table class\n+     * @param expression formula expression contains physical column, logical column and {@link JoinTo} paths\n+     * @return a resolver\n+     */\n+    public static LabelResolver getFormulaResolver(Column column, Class<?> tableClass, String expression) {\n+        // dimension references are deduplicated\n+        List<String> references =\n+                resolveFormulaReferences(expression).stream().distinct().collect(Collectors.toList());\n+\n+        return new LabelResolver(column) {\n+            @Override\n+            public Set<JoinPath> resolveJoinPaths(LabelStore labelStore, JoinPath from) {\n+                return references.stream()\n+                        .map(reference -> {\n+                            // physical columns don't have dependency resolvers\n+                            if (isPhysicalReference(tableClass, reference, labelStore.getDictionary())) {\n+                                return Stream.<JoinPath>empty();\n+                            }\n+\n+                            JoinPath to = getJoinToPath(labelStore, reference);\n+\n+                            return labelStore.getLabelResolver(to)\n+                                    .resolveJoinPaths(labelStore, extendJoinPath(from, to)).stream();\n+                        })\n+                        .reduce(Stream.empty(), Stream::concat)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "169e790e78a2d99da4b3a147bf4d176c8658f5b2"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDM2MDI3OnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/LabelStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNjo1ODo0OVrOFzAHHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNjo1ODo0OVrOFzAHHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAyMzUxNg==", "bodyText": "Rather than returning an entity dictionary, I wonder if the LabelStore should have the methods that require the entity dictionary.", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r389023516", "createdAt": "2020-03-06T16:58:49Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/LabelStore.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.metadata;\n+\n+import com.yahoo.elide.core.EntityDictionary;\n+import com.yahoo.elide.core.Path;\n+import com.yahoo.elide.datastores.aggregation.core.JoinPath;\n+\n+import java.util.Set;\n+\n+/**\n+ * LabelStore stores all label resolvers for all columns. It uses {@link JoinPath} as reference to each field.\n+ */\n+public interface LabelStore {\n+    /**\n+     * Get a dictionary with model definitions.\n+     *\n+     * @return dictionary\n+     */\n+    EntityDictionary getDictionary();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "169e790e78a2d99da4b3a147bf4d176c8658f5b2"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDM3MTA0OnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzowMDoyMVrOFzAOUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzowMDoyMVrOFzAOUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAyNTM2Mg==", "bodyText": "I don't think MetaDataStore should be resolving labels.", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r389025362", "createdAt": "2020-03-06T17:00:21Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java", "diffHunk": "@@ -28,18 +29,22 @@\n import lombok.Getter;\n \n import java.lang.annotation.Annotation;\n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n \n /**\n  * MetaDataStore is a in-memory data store that manage data models for an {@link AggregationDataStore}.\n  */\n-public class MetaDataStore extends HashMapDataStore {\n+public class MetaDataStore extends HashMapDataStore implements LabelStore {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "169e790e78a2d99da4b3a147bf4d176c8658f5b2"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDM3NzY5OnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzowMTo1M1rOFzASnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzowMTo1M1rOFzASnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAyNjQ2Mw==", "bodyText": "Move to LabelStore", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r389026463", "createdAt": "2020-03-06T17:01:53Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java", "diffHunk": "@@ -171,6 +193,33 @@ public static boolean isTableJoin(Class<?> cls, String fieldName, EntityDictiona\n         return dictionary.getAttributeOrRelationAnnotation(cls, Join.class, fieldName) != null;\n     }\n \n+    /**\n+     * Use regex to get all references from a formula expression.\n+     *\n+     * @param formula formula expression\n+     * @return references appear in the formula.\n+     */\n+    public static List<String> resolveFormulaReferences(String formula) {\n+        Matcher matcher = REFERENCE_PARENTHESES.matcher(formula);\n+        List<String> references = new ArrayList<>();\n+\n+        while (matcher.find()) {\n+            references.add(matcher.group(1));\n+        }\n+\n+        return references;\n+    }\n+\n+    /**\n+     * Convert a resolved formula reference back to a reference presented in formula format.\n+     *\n+     * @param reference referenced field\n+     * @return formula reference, <code>{{reference}}</code>\n+     */\n+    public static String toFormulaReference(String reference) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "169e790e78a2d99da4b3a147bf4d176c8658f5b2"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDM3NzkzOnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzowMTo1OVrOFzASzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzowMTo1OVrOFzASzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAyNjUwOA==", "bodyText": "Move to label Store", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r389026508", "createdAt": "2020-03-06T17:01:59Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java", "diffHunk": "@@ -171,6 +193,33 @@ public static boolean isTableJoin(Class<?> cls, String fieldName, EntityDictiona\n         return dictionary.getAttributeOrRelationAnnotation(cls, Join.class, fieldName) != null;\n     }\n \n+    /**\n+     * Use regex to get all references from a formula expression.\n+     *\n+     * @param formula formula expression\n+     * @return references appear in the formula.\n+     */\n+    public static List<String> resolveFormulaReferences(String formula) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "169e790e78a2d99da4b3a147bf4d176c8658f5b2"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDQyOTc0OnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/models/Metric.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzoxODoxM1rOFzAzVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzoxODoxM1rOFzAzVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAzNDgzOQ==", "bodyText": "I think it is clearer to just call the constructor directly.  I would remove this function.", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r389034839", "createdAt": "2020-03-06T17:18:13Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/models/Metric.java", "diffHunk": "@@ -45,27 +53,146 @@ public Metric(Table table, String fieldName, EntityDictionary dictionary) {\n                 Meta.class,\n                 fieldName);\n \n+        if (aggregation != null) {\n+            this.metricFunction = resolveAggregation(tableClass, fieldName, aggregation, meta, dictionary);\n+        } else {\n+            MetricFormula formula = dictionary.getAttributeOrRelationAnnotation(\n+                    tableClass,\n+                    MetricFormula.class,\n+                    fieldName);\n+\n+            if (formula != null) {\n+                this.metricFunction = constructMetricFunction(\n+                        constructColumnName(tableClass, fieldName, dictionary) + \"[\" + fieldName + \"]\",\n+                        meta == null ? null : meta.longName(),\n+                        meta == null ? null : meta.description(),\n+                        formula.value(),\n+                        new HashSet<>());\n+\n+            } else {\n+                throw new IllegalArgumentException(\"Trying to construct metric field \"\n+                        + getId() + \" without @MetricAggregation and @MetricFormula.\");\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Resolve aggregation function from {@link MetricAggregation} annotation.\n+     *\n+     * @param tableClass table class\n+     * @param fieldName metric field name\n+     * @param aggregation aggregation annotation on the field\n+     * @param meta meta annotation on the field\n+     * @param dictionary dictionary with entity information\n+     * @return resolved metric function instance\n+     */\n+    private static MetricFunction resolveAggregation(Class<?> tableClass,\n+                                                     String fieldName,\n+                                                     MetricAggregation aggregation,\n+                                                     Meta meta,\n+                                                     EntityDictionary dictionary) {\n+        String columnName = constructColumnName(tableClass, fieldName, dictionary);\n         try {\n-            this.metricFunction = metric.function().newInstance();\n-            metricFunction.setName(getId() + \"[\" + metricFunction.getName() + \"]\");\n-            metricFunction.setExpression(String.format(\n-                    metricFunction.getExpression(),\n-                    dictionary.getAnnotatedColumnName(tableClass, fieldName)));\n+            MetricFunction metricFunction = aggregation.function().newInstance();\n+            metricFunction.setName(columnName + \"[\" + metricFunction.getName() + \"]\");\n \n             if (meta != null) {\n                 metricFunction.setLongName(meta.longName());\n                 metricFunction.setDescription(meta.description());\n             }\n+\n+            return metricFunction;\n         } catch (InstantiationException | IllegalAccessException e) {\n-            throw new IllegalArgumentException(\"Can't initialize function for metric \" + getId());\n+            throw new IllegalArgumentException(\"Can't initialize function for metric \" + columnName);\n         }\n     }\n \n+    /**\n+     * Dynamically construct a metric function\n+     *\n+     * @param id metric function id\n+     * @param longName meta long name\n+     * @param description meta description\n+     * @param expression expression string\n+     * @param arguments function arguments\n+     * @return a metric function instance\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "169e790e78a2d99da4b3a147bf4d176c8658f5b2"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDQ0MjIwOnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/models/Metric.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzoyMjoxOFrOFzA7Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzoyMjoxOFrOFzA7Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAzNjgzNA==", "bodyText": "I would move all this to SQLMetric", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r389036834", "createdAt": "2020-03-06T17:22:18Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/models/Metric.java", "diffHunk": "@@ -45,27 +53,146 @@ public Metric(Table table, String fieldName, EntityDictionary dictionary) {\n                 Meta.class,\n                 fieldName);\n \n+        if (aggregation != null) {\n+            this.metricFunction = resolveAggregation(tableClass, fieldName, aggregation, meta, dictionary);\n+        } else {\n+            MetricFormula formula = dictionary.getAttributeOrRelationAnnotation(\n+                    tableClass,\n+                    MetricFormula.class,\n+                    fieldName);\n+\n+            if (formula != null) {\n+                this.metricFunction = constructMetricFunction(\n+                        constructColumnName(tableClass, fieldName, dictionary) + \"[\" + fieldName + \"]\",\n+                        meta == null ? null : meta.longName(),\n+                        meta == null ? null : meta.description(),\n+                        formula.value(),\n+                        new HashSet<>());\n+\n+            } else {\n+                throw new IllegalArgumentException(\"Trying to construct metric field \"\n+                        + getId() + \" without @MetricAggregation and @MetricFormula.\");\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Resolve aggregation function from {@link MetricAggregation} annotation.\n+     *\n+     * @param tableClass table class\n+     * @param fieldName metric field name\n+     * @param aggregation aggregation annotation on the field\n+     * @param meta meta annotation on the field\n+     * @param dictionary dictionary with entity information\n+     * @return resolved metric function instance\n+     */\n+    private static MetricFunction resolveAggregation(Class<?> tableClass,\n+                                                     String fieldName,\n+                                                     MetricAggregation aggregation,\n+                                                     Meta meta,\n+                                                     EntityDictionary dictionary) {\n+        String columnName = constructColumnName(tableClass, fieldName, dictionary);\n         try {\n-            this.metricFunction = metric.function().newInstance();\n-            metricFunction.setName(getId() + \"[\" + metricFunction.getName() + \"]\");\n-            metricFunction.setExpression(String.format(\n-                    metricFunction.getExpression(),\n-                    dictionary.getAnnotatedColumnName(tableClass, fieldName)));\n+            MetricFunction metricFunction = aggregation.function().newInstance();\n+            metricFunction.setName(columnName + \"[\" + metricFunction.getName() + \"]\");\n \n             if (meta != null) {\n                 metricFunction.setLongName(meta.longName());\n                 metricFunction.setDescription(meta.description());\n             }\n+\n+            return metricFunction;\n         } catch (InstantiationException | IllegalAccessException e) {\n-            throw new IllegalArgumentException(\"Can't initialize function for metric \" + getId());\n+            throw new IllegalArgumentException(\"Can't initialize function for metric \" + columnName);\n         }\n     }\n \n+    /**\n+     * Dynamically construct a metric function\n+     *\n+     * @param id metric function id\n+     * @param longName meta long name\n+     * @param description meta description\n+     * @param expression expression string\n+     * @param arguments function arguments\n+     * @return a metric function instance\n+     */\n     protected MetricFunction constructMetricFunction(String id,\n                                                      String longName,\n                                                      String description,\n                                                      String expression,\n                                                      Set<FunctionArgument> arguments) {\n         return new MetricFunction(id, longName, description, expression, arguments);\n     }\n+\n+    @Override\n+    protected LabelResolver constructLabelResolver(EntityDictionary dictionary) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "169e790e78a2d99da4b3a147bf4d176c8658f5b2"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDQ1MzczOnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryConstructor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzoyNTo0NFrOFzBCHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzoyNTo0NFrOFzBCHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAzODYyMw==", "bodyText": "flatmap", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r389038623", "createdAt": "2020-03-06T17:25:44Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryConstructor.java", "diffHunk": "@@ -395,11 +398,12 @@ private Path expandJoinToPath(Path path) {\n      * @param table queried table\n      * @return A set of path elements that capture a relationship traversal.\n      */\n-    private Set<Path> extractJoinPaths(Set<ColumnProjection> groupByDimensions,\n+    private Set<JoinPath> extractJoinPaths(Set<ColumnProjection> groupByDimensions,\n                                        SQLTable table) {\n         return resolveSQLColumns(groupByDimensions, table).stream()\n-                .filter((dim) -> dim.getJoinPath() != null)\n-                .map(SQLColumn::getJoinPath)\n+                .map(SQLColumn::getJoinPaths)\n+                .map(Collection::stream)\n+                .reduce(Stream.empty(), (s1, s2) -> Streams.concat(s1, s2))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "169e790e78a2d99da4b3a147bf4d176c8658f5b2"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDQ3NjEyOnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/metadata/SQLColumn.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzozMjozOFrOFzBQDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzozMjozOFrOFzBQDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA0MjE5MQ==", "bodyText": "The code is harder to understand when we wrap constructors in one line functions.   I would remove these.", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r389042191", "createdAt": "2020-03-06T17:32:38Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/metadata/SQLColumn.java", "diffHunk": "@@ -5,18 +5,131 @@\n  */\n package com.yahoo.elide.datastores.aggregation.queryengines.sql.metadata;\n \n+import static com.yahoo.elide.datastores.aggregation.core.JoinPath.extendJoinPath;\n+import static com.yahoo.elide.utils.TypeHelper.extendTypeAlias;\n+import static com.yahoo.elide.utils.TypeHelper.getFieldAlias;\n+\n+import com.yahoo.elide.core.EntityDictionary;\n import com.yahoo.elide.datastores.aggregation.core.JoinPath;\n-import com.yahoo.elide.datastores.aggregation.metadata.models.Table;\n+import com.yahoo.elide.datastores.aggregation.metadata.LabelResolver;\n+import com.yahoo.elide.datastores.aggregation.metadata.LabelStore;\n+import com.yahoo.elide.datastores.aggregation.metadata.models.Column;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.SQLQueryEngine;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.DimensionFormula;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.JoinTo;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n \n /**\n- * Column with physical SQL information like reference and join to path.\n+ * SQLColumn is a wrapper for {@link Column} that contains physical information for {@link SQLQueryEngine}.\n  */\n public interface SQLColumn {\n-    Table getTable();\n-\n-    String getName();\n+    /**\n+     * Get wrapped column\n+     *\n+     * @return column\n+     */\n+    Column getColumn();\n \n+    /**\n+     * Get full sql reference\n+     *\n+     * @return physical reference\n+     */\n     String getReference();\n \n-    JoinPath getJoinPath();\n+    /**\n+     * Get join paths needed for this column\n+     *\n+     * @return all join paths to this column\n+     */\n+    List<JoinPath> getJoinPaths();\n+\n+    /**\n+     * SQL Column would resolve references in {@link DimensionFormula} when constructing physical reference.\n+     *\n+     * @return {@link LabelResolver} for sql columns\n+     */\n+    default LabelResolver constructSQLColumnLabelResolver(EntityDictionary dictionary) {\n+        Class<?> tableClass = dictionary.getEntityClass(getColumn().getTable().getId());\n+        String fieldName = getColumn().getName();\n+\n+        DimensionFormula formula = dictionary.getAttributeOrRelationAnnotation(\n+                tableClass, DimensionFormula.class, fieldName);\n+\n+        if (formula == null) {\n+            JoinTo joinTo = dictionary.getAttributeOrRelationAnnotation(tableClass, JoinTo.class, fieldName);\n+\n+            return joinTo == null || joinTo.path().equals(\"\")\n+                    ? getLogicalColumnResolver(tableClass, fieldName)\n+                    : getJoinToResolver(tableClass, joinTo);\n+        } else {\n+            return getFormulaResolver(tableClass, formula);\n+        }\n+    }\n+\n+    /**\n+     * Get a logical column reference resolver\n+     *\n+     * @param tableClass table class\n+     * @param fieldName field name\n+     * @return a resolver\n+     */\n+    default LabelResolver getLogicalColumnResolver(Class<?> tableClass, String fieldName) {\n+        return new LabelResolver(getColumn()) {\n+            @Override\n+            public String resolveLabel(LabelStore labelStore, String tableAlias) {\n+                return getFieldAlias(\n+                        tableAlias,\n+                        labelStore.getDictionary().getAnnotatedColumnName(tableClass, fieldName));\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Get a {@link JoinTo} reference resolver.\n+     *\n+     * @param tableClass table class\n+     * @param joinTo join to path\n+     * @return a resolver\n+     */\n+    default LabelResolver getJoinToResolver(Class<?> tableClass, JoinTo joinTo) {\n+        return new LabelResolver(getColumn()) {\n+            @Override\n+            public Set<JoinPath> resolveJoinPaths(LabelStore labelStore, JoinPath from) {\n+                JoinPath to = getJoinToPath(labelStore);\n+\n+                return labelStore.getLabelResolver(to).resolveJoinPaths(labelStore, extendJoinPath(from, to));\n+            }\n+\n+            @Override\n+            public Set<LabelResolver> getDependencyResolvers(LabelStore labelStore) {\n+                return Collections.singleton(labelStore.getLabelResolver(getJoinToPath(labelStore)));\n+            }\n+\n+            @Override\n+            public String resolveLabel(LabelStore labelStore, String tableAlias) {\n+                JoinPath joinToPath = getJoinToPath(labelStore);\n+\n+                return labelStore.resolveLabel(joinToPath, extendTypeAlias(tableAlias, joinToPath));\n+            }\n+\n+            private JoinPath getJoinToPath(LabelStore labelStore) {\n+                return new JoinPath(tableClass, labelStore.getDictionary(), joinTo.path());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "169e790e78a2d99da4b3a147bf4d176c8658f5b2"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDQ3OTg0OnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/metadata/SQLColumn.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzozMzo0OFrOFzBSbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzozMzo0OFrOFzBSbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA0Mjc5Nw==", "bodyText": "I assume we can collapse this if we move Column level logic from column to SQLColumn", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r389042797", "createdAt": "2020-03-06T17:33:48Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/metadata/SQLColumn.java", "diffHunk": "@@ -5,18 +5,131 @@\n  */\n package com.yahoo.elide.datastores.aggregation.queryengines.sql.metadata;\n \n+import static com.yahoo.elide.datastores.aggregation.core.JoinPath.extendJoinPath;\n+import static com.yahoo.elide.utils.TypeHelper.extendTypeAlias;\n+import static com.yahoo.elide.utils.TypeHelper.getFieldAlias;\n+\n+import com.yahoo.elide.core.EntityDictionary;\n import com.yahoo.elide.datastores.aggregation.core.JoinPath;\n-import com.yahoo.elide.datastores.aggregation.metadata.models.Table;\n+import com.yahoo.elide.datastores.aggregation.metadata.LabelResolver;\n+import com.yahoo.elide.datastores.aggregation.metadata.LabelStore;\n+import com.yahoo.elide.datastores.aggregation.metadata.models.Column;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.SQLQueryEngine;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.DimensionFormula;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.JoinTo;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n \n /**\n- * Column with physical SQL information like reference and join to path.\n+ * SQLColumn is a wrapper for {@link Column} that contains physical information for {@link SQLQueryEngine}.\n  */\n public interface SQLColumn {\n-    Table getTable();\n-\n-    String getName();\n+    /**\n+     * Get wrapped column\n+     *\n+     * @return column\n+     */\n+    Column getColumn();\n \n+    /**\n+     * Get full sql reference\n+     *\n+     * @return physical reference\n+     */\n     String getReference();\n \n-    JoinPath getJoinPath();\n+    /**\n+     * Get join paths needed for this column\n+     *\n+     * @return all join paths to this column\n+     */\n+    List<JoinPath> getJoinPaths();\n+\n+    /**\n+     * SQL Column would resolve references in {@link DimensionFormula} when constructing physical reference.\n+     *\n+     * @return {@link LabelResolver} for sql columns\n+     */\n+    default LabelResolver constructSQLColumnLabelResolver(EntityDictionary dictionary) {\n+        Class<?> tableClass = dictionary.getEntityClass(getColumn().getTable().getId());\n+        String fieldName = getColumn().getName();\n+\n+        DimensionFormula formula = dictionary.getAttributeOrRelationAnnotation(\n+                tableClass, DimensionFormula.class, fieldName);\n+\n+        if (formula == null) {\n+            JoinTo joinTo = dictionary.getAttributeOrRelationAnnotation(tableClass, JoinTo.class, fieldName);\n+\n+            return joinTo == null || joinTo.path().equals(\"\")\n+                    ? getLogicalColumnResolver(tableClass, fieldName)\n+                    : getJoinToResolver(tableClass, joinTo);\n+        } else {\n+            return getFormulaResolver(tableClass, formula);\n+        }\n+    }\n+\n+    /**\n+     * Get a logical column reference resolver\n+     *\n+     * @param tableClass table class\n+     * @param fieldName field name\n+     * @return a resolver\n+     */\n+    default LabelResolver getLogicalColumnResolver(Class<?> tableClass, String fieldName) {\n+        return new LabelResolver(getColumn()) {\n+            @Override\n+            public String resolveLabel(LabelStore labelStore, String tableAlias) {\n+                return getFieldAlias(\n+                        tableAlias,\n+                        labelStore.getDictionary().getAnnotatedColumnName(tableClass, fieldName));\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Get a {@link JoinTo} reference resolver.\n+     *\n+     * @param tableClass table class\n+     * @param joinTo join to path\n+     * @return a resolver\n+     */\n+    default LabelResolver getJoinToResolver(Class<?> tableClass, JoinTo joinTo) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "169e790e78a2d99da4b3a147bf4d176c8658f5b2"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDUwMzQwOnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/metadata/SQLDimension.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzo0MDowOFrOFzBgPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzo0MDowOFrOFzBgPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA0NjMzNQ==", "bodyText": "I believe sourcePath and sourceColumn are going away - based on our last discussion.", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r389046335", "createdAt": "2020-03-06T17:40:08Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/metadata/SQLDimension.java", "diffHunk": "@@ -5,51 +5,59 @@\n  */\n package com.yahoo.elide.datastores.aggregation.queryengines.sql.metadata;\n \n-import static com.yahoo.elide.datastores.aggregation.queryengines.sql.SQLQueryEngine.generateColumnReference;\n import static com.yahoo.elide.datastores.aggregation.queryengines.sql.SQLQueryEngine.getClassAlias;\n \n import com.yahoo.elide.core.EntityDictionary;\n import com.yahoo.elide.core.Path;\n import com.yahoo.elide.datastores.aggregation.core.JoinPath;\n+import com.yahoo.elide.datastores.aggregation.metadata.LabelResolver;\n+import com.yahoo.elide.datastores.aggregation.metadata.LabelStore;\n+import com.yahoo.elide.datastores.aggregation.metadata.models.Column;\n import com.yahoo.elide.datastores.aggregation.metadata.models.Dimension;\n import com.yahoo.elide.datastores.aggregation.metadata.models.Table;\n-import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.JoinTo;\n \n import lombok.Getter;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+\n /**\n  * SQLDimension are dimension columns with extra physical information.\n  */\n public class SQLDimension extends Dimension implements SQLColumn {\n     @Getter\n-    private final String reference;\n-\n-    @Getter\n-    private final JoinPath joinPath;\n+    private String reference;\n \n     @Getter\n-    private EntityDictionary metadataDictionary;\n+    private List<JoinPath> joinPaths = new ArrayList<>();\n \n     public SQLDimension(Table table, String fieldName, EntityDictionary dictionary) {\n         super(table, fieldName, dictionary);\n-        Class<?> tableClass = dictionary.getEntityClass(table.getId());\n+    }\n+\n+    @Override\n+    public Path getSourcePath(EntityDictionary metadataDictionary) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "169e790e78a2d99da4b3a147bf4d176c8658f5b2"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDUxMjU3OnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/metadata/SQLDimension.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzo0Mjo0MVrOFzBlpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzo0Mjo0MVrOFzBlpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA0NzcxNg==", "bodyText": "I'm wondering if it would be simpler to resolve the reference field at query time - rather than this approach of doing it up front.  Let's discuss.", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r389047716", "createdAt": "2020-03-06T17:42:41Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/metadata/SQLDimension.java", "diffHunk": "@@ -5,51 +5,59 @@\n  */\n package com.yahoo.elide.datastores.aggregation.queryengines.sql.metadata;\n \n-import static com.yahoo.elide.datastores.aggregation.queryengines.sql.SQLQueryEngine.generateColumnReference;\n import static com.yahoo.elide.datastores.aggregation.queryengines.sql.SQLQueryEngine.getClassAlias;\n \n import com.yahoo.elide.core.EntityDictionary;\n import com.yahoo.elide.core.Path;\n import com.yahoo.elide.datastores.aggregation.core.JoinPath;\n+import com.yahoo.elide.datastores.aggregation.metadata.LabelResolver;\n+import com.yahoo.elide.datastores.aggregation.metadata.LabelStore;\n+import com.yahoo.elide.datastores.aggregation.metadata.models.Column;\n import com.yahoo.elide.datastores.aggregation.metadata.models.Dimension;\n import com.yahoo.elide.datastores.aggregation.metadata.models.Table;\n-import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.JoinTo;\n \n import lombok.Getter;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+\n /**\n  * SQLDimension are dimension columns with extra physical information.\n  */\n public class SQLDimension extends Dimension implements SQLColumn {\n     @Getter\n-    private final String reference;\n-\n-    @Getter\n-    private final JoinPath joinPath;\n+    private String reference;\n \n     @Getter\n-    private EntityDictionary metadataDictionary;\n+    private List<JoinPath> joinPaths = new ArrayList<>();\n \n     public SQLDimension(Table table, String fieldName, EntityDictionary dictionary) {\n         super(table, fieldName, dictionary);\n-        Class<?> tableClass = dictionary.getEntityClass(table.getId());\n+    }\n+\n+    @Override\n+    public Path getSourcePath(EntityDictionary metadataDictionary) {\n+        // As we are using DFS for resolving reference, the first resolved reference would be the deepest source\n+        return joinPaths.isEmpty() ? super.getSourcePath(metadataDictionary) : joinPaths.get(0);\n+    }\n \n-        JoinTo joinTo = dictionary.getAttributeOrRelationAnnotation(tableClass, JoinTo.class, fieldName);\n+    @Override\n+    public void resolveLabel(LabelStore labelStore) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "169e790e78a2d99da4b3a147bf4d176c8658f5b2"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDU0MjU2OnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/LabelStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzo1MjoyNFrOFzB4Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzo1MjoyNFrOFzB4Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA1MjUxNA==", "bodyText": "Using Path here is unnatural.  If you look at the code, we only use the Class (Table) and field to actually store and lookup the resolvers.   There is a lot of code that has to lookup the resolver - and that code is creating these paths again and again.   Looking up by Path I think is confusing - because the actual lookup keys are obfuscated by the Path data structure.", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r389052514", "createdAt": "2020-03-06T17:52:24Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/LabelStore.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.metadata;\n+\n+import com.yahoo.elide.core.EntityDictionary;\n+import com.yahoo.elide.core.Path;\n+import com.yahoo.elide.datastores.aggregation.core.JoinPath;\n+\n+import java.util.Set;\n+\n+/**\n+ * LabelStore stores all label resolvers for all columns. It uses {@link JoinPath} as reference to each field.\n+ */\n+public interface LabelStore {\n+    /**\n+     * Get a dictionary with model definitions.\n+     *\n+     * @return dictionary\n+     */\n+    EntityDictionary getDictionary();\n+\n+    /**\n+     * Get the label resolver for a path\n+     *\n+     * @param path path to a logical field\n+     * @return a label resolver\n+     */\n+    LabelResolver getLabelResolver(Path path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "169e790e78a2d99da4b3a147bf4d176c8658f5b2"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDU0NTQxOnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/metadata/SQLTimeDimension.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzo1MzoyN1rOFzB6JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzo1MzoyN1rOFzB6JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA1Mjk2NQ==", "bodyText": "Let's remove all the sourcePath and sourceColumn code for now.", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r389052965", "createdAt": "2020-03-06T17:53:27Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/metadata/SQLTimeDimension.java", "diffHunk": "@@ -5,51 +5,58 @@\n  */\n package com.yahoo.elide.datastores.aggregation.queryengines.sql.metadata;\n \n-import static com.yahoo.elide.datastores.aggregation.queryengines.sql.SQLQueryEngine.generateColumnReference;\n import static com.yahoo.elide.datastores.aggregation.queryengines.sql.SQLQueryEngine.getClassAlias;\n \n import com.yahoo.elide.core.EntityDictionary;\n import com.yahoo.elide.core.Path;\n import com.yahoo.elide.datastores.aggregation.core.JoinPath;\n+import com.yahoo.elide.datastores.aggregation.metadata.LabelResolver;\n+import com.yahoo.elide.datastores.aggregation.metadata.LabelStore;\n+import com.yahoo.elide.datastores.aggregation.metadata.models.Column;\n import com.yahoo.elide.datastores.aggregation.metadata.models.Table;\n import com.yahoo.elide.datastores.aggregation.metadata.models.TimeDimension;\n-import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.JoinTo;\n \n import lombok.Getter;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+\n /**\n  * SQLTimeDimension are time dimension columns with extra physical information.\n  */\n public class SQLTimeDimension extends TimeDimension implements SQLColumn {\n     @Getter\n-    private final String reference;\n-\n-    @Getter\n-    private final JoinPath joinPath;\n+    private String reference;\n \n     @Getter\n-    private EntityDictionary metadataDictionary;\n+    private List<JoinPath> joinPaths = new ArrayList<>();\n \n     public SQLTimeDimension(Table table, String fieldName, EntityDictionary dictionary) {\n         super(table, fieldName, dictionary);\n-        Class<?> tableClass = dictionary.getEntityClass(table.getId());\n+    }\n+\n+    @Override\n+    public Path getSourcePath(EntityDictionary metadataDictionary) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "169e790e78a2d99da4b3a147bf4d176c8658f5b2"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDQwNDkxOnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/metadata/SQLReferenceResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxOTozNzo0M1rOF0eI7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxOTozNzo0M1rOF0eI7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU2NDA3OA==", "bodyText": "We are still using the old LabelResolver name in a few places.  This is one.", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r390564078", "createdAt": "2020-03-10T19:37:43Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/metadata/SQLReferenceResolver.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.queryengines.sql.metadata;\n+\n+import com.yahoo.elide.datastores.aggregation.core.JoinPath;\n+import com.yahoo.elide.datastores.aggregation.metadata.models.Column;\n+\n+import java.util.Collections;\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * LabelResolver is an interface for resolving column into some type of \"labels\" such as column reference, join", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f63ae24b2db6be54187fe0120cbcc8a20802b2b"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDQwNTU5OnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/metadata/SQLReferenceResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxOTozODowMFrOF0eJaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxOTozODowMFrOF0eJaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU2NDIwMQ==", "bodyText": "Maybe call it referenceResolver", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r390564201", "createdAt": "2020-03-10T19:38:00Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/metadata/SQLReferenceResolver.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.queryengines.sql.metadata;\n+\n+import com.yahoo.elide.datastores.aggregation.core.JoinPath;\n+import com.yahoo.elide.datastores.aggregation.metadata.models.Column;\n+\n+import java.util.Collections;\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * LabelResolver is an interface for resolving column into some type of \"labels\" such as column reference, join\n+ * path and so on. It uses Depth-First-Search approach to traverse join path vertically. The resolved results would\n+ * be stored for quick access.\n+ */\n+public abstract class SQLReferenceResolver {\n+    private final Column toResolve;\n+\n+    protected SQLReferenceResolver(Column toResolve) {\n+        this.toResolve = toResolve;\n+    }\n+\n+    /**\n+     * Resolve label for this column\n+     *\n+     * @param referenceTable source-of-truth store\n+     * @param tableAlias label prefix to the table that contains this column\n+     * @return resolved label\n+     */\n+    public abstract String resolveReference(SQLReferenceTable referenceTable, String tableAlias);\n+\n+    /**\n+     * Get all joins needs for this column\n+     *\n+     * @param referenceTable source-of-truth store\n+     * @param from root join path to this column\n+     * @return full join paths\n+     */\n+    public Set<JoinPath> resolveJoinPaths(SQLReferenceTable referenceTable, JoinPath from) {\n+        return Collections.singleton(from);\n+    }\n+\n+    /**\n+     * Get all other resolvers that this resolver would involve when resolving label.\n+     *\n+     * @param referenceTable table stores all resolvers\n+     * @return dependency resolvers\n+     */\n+    protected Set<SQLReferenceResolver> getDependencyResolvers(SQLReferenceTable referenceTable) {\n+        return Collections.emptySet();\n+    }\n+\n+    /**\n+     * Check whether this resolver would cause reference loop\n+     *\n+     * @param referenceTable table stores all SQL reference resolvers\n+     */\n+    public void checkResolverLoop(SQLReferenceTable referenceTable) {\n+        this.checkResolverLoop(new LinkedHashSet<>(), referenceTable);\n+    }\n+\n+    /**\n+     * Check whether this resolver would cause reference loop\n+     *\n+     * @param visited visited label resolvers\n+     * @param referenceTable table stores all SQL reference resolvers\n+     */\n+    private void checkResolverLoop(LinkedHashSet<SQLReferenceResolver> visited, SQLReferenceTable referenceTable) {\n+        if (visited.contains(this)) {\n+            throw new IllegalArgumentException(referenceLoopMessage(visited, this));\n+        } else {\n+            visited.add(this);\n+            this.getDependencyResolvers(referenceTable)\n+                    .forEach(resolver -> resolver.checkResolverLoop(visited, referenceTable));\n+            visited.remove(this);\n+        }\n+    }\n+\n+    /**\n+     * Construct reference loop message.\n+     */\n+    private static String referenceLoopMessage(LinkedHashSet<SQLReferenceResolver> visited, SQLReferenceResolver loop) {\n+        return \"Formula reference loop found: \"\n+                + visited.stream()\n+                        .map(labelResolver -> labelResolver.toResolve.getId())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f63ae24b2db6be54187fe0120cbcc8a20802b2b"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDQxMjkxOnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/metadata/SQLReferenceResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxOTo0MDoxN1rOF0eOAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxOTo0MDoxN1rOF0eOAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU2NTM3Nw==", "bodyText": "Maybe rename as getDependentResolvers.", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r390565377", "createdAt": "2020-03-10T19:40:17Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/metadata/SQLReferenceResolver.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.queryengines.sql.metadata;\n+\n+import com.yahoo.elide.datastores.aggregation.core.JoinPath;\n+import com.yahoo.elide.datastores.aggregation.metadata.models.Column;\n+\n+import java.util.Collections;\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * LabelResolver is an interface for resolving column into some type of \"labels\" such as column reference, join\n+ * path and so on. It uses Depth-First-Search approach to traverse join path vertically. The resolved results would\n+ * be stored for quick access.\n+ */\n+public abstract class SQLReferenceResolver {\n+    private final Column toResolve;\n+\n+    protected SQLReferenceResolver(Column toResolve) {\n+        this.toResolve = toResolve;\n+    }\n+\n+    /**\n+     * Resolve label for this column\n+     *\n+     * @param referenceTable source-of-truth store\n+     * @param tableAlias label prefix to the table that contains this column\n+     * @return resolved label\n+     */\n+    public abstract String resolveReference(SQLReferenceTable referenceTable, String tableAlias);\n+\n+    /**\n+     * Get all joins needs for this column\n+     *\n+     * @param referenceTable source-of-truth store\n+     * @param from root join path to this column\n+     * @return full join paths\n+     */\n+    public Set<JoinPath> resolveJoinPaths(SQLReferenceTable referenceTable, JoinPath from) {\n+        return Collections.singleton(from);\n+    }\n+\n+    /**\n+     * Get all other resolvers that this resolver would involve when resolving label.\n+     *\n+     * @param referenceTable table stores all resolvers\n+     * @return dependency resolvers\n+     */\n+    protected Set<SQLReferenceResolver> getDependencyResolvers(SQLReferenceTable referenceTable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f63ae24b2db6be54187fe0120cbcc8a20802b2b"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjYwMjk5OnYy", "diffSide": "RIGHT", "path": "elide-core/src/main/java/com/yahoo/elide/utils/coerce/CoerceUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTo0NTo0NlrOF62m8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxOTo0Mzo1NVrOF7AWag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI1NjQzMw==", "bodyText": "Is there any reason we just don't use class.newInstance here?", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r397256433", "createdAt": "2020-03-24T15:45:46Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/utils/coerce/CoerceUtil.java", "diffHunk": "@@ -49,6 +51,12 @@\n     public static <T> T coerce(Object value, Class<T> cls) {\n         initializeCurrentClassLoaderIfNecessary();\n \n+        // null value of number type would be converted to 0, as 'null' would cause exception for primitive\n+        // number classes\n+        if (value == null && isNumberType(cls)) {\n+            return (T) Array.get(Array.newInstance(cls, 1), 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72eeb14b33a4b7b5654849f9ad30bb15808b73ea"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQxNjA0Mg==", "bodyText": "class.newInstance() wouldn't work for primitive number types.", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r397416042", "createdAt": "2020-03-24T19:43:55Z", "author": {"login": "hellohanchen"}, "path": "elide-core/src/main/java/com/yahoo/elide/utils/coerce/CoerceUtil.java", "diffHunk": "@@ -49,6 +51,12 @@\n     public static <T> T coerce(Object value, Class<T> cls) {\n         initializeCurrentClassLoaderIfNecessary();\n \n+        // null value of number type would be converted to 0, as 'null' would cause exception for primitive\n+        // number classes\n+        if (value == null && isNumberType(cls)) {\n+            return (T) Array.get(Array.newInstance(cls, 1), 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI1NjQzMw=="}, "originalCommit": {"oid": "72eeb14b33a4b7b5654849f9ad30bb15808b73ea"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjYyMTMxOnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/core/JoinPath.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTo0OToyMFrOF62yjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxOTo1NjoyMVrOF7AxJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI1OTQwNw==", "bodyText": "Maybe we should add a Precondition that the last element of path is equal to the first element of the extension.", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r397259407", "createdAt": "2020-03-24T15:49:20Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/core/JoinPath.java", "diffHunk": "@@ -23,4 +34,31 @@ protected boolean needNavigation(Class<?> entityClass, String fieldName, EntityD\n         return dictionary.isRelation(entityClass, fieldName)\n                 || MetaDataStore.isTableJoin(entityClass, fieldName, dictionary);\n     }\n+\n+    /**\n+     * Extend this path with a extension dot separated path\n+     *\n+     * @param extensionPath extension path append to this join path\n+     * @param dictionary dictionary\n+     * @return expended join path e.g. <code>[A.B]/[B.C] + C.D = [A.B]/[B.C]/[C.D]</code>\n+     */\n+    public JoinPath extend(String extensionPath, EntityDictionary dictionary) {\n+        return extendJoinPath(this, new JoinPath(lastElement().get().getType(), dictionary, extensionPath));\n+    }\n+\n+    /**\n+     * Append an extension path to an original path, the last element of original path should be the same as the\n+     * first element of extension path.\n+     *\n+     * @param path original path, e.g. <code>[A.B]/[B.C]</code>\n+     * @param extension extension path, e.g. <code>[B.C]/[C.D]</code>\n+     * @param <P> path extension\n+     * @return extended path <code>[A.B]/[B.C]/[C.D]</code>\n+     */\n+    private static <P extends Path> JoinPath extendJoinPath(Path path, P extension) {\n+        List<Path.PathElement> toExtend = new ArrayList<>(path.getPathElements());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72eeb14b33a4b7b5654849f9ad30bb15808b73ea"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQyMjg4NA==", "bodyText": "This is a private static method, we don't need to check it here.", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r397422884", "createdAt": "2020-03-24T19:56:21Z", "author": {"login": "hellohanchen"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/core/JoinPath.java", "diffHunk": "@@ -23,4 +34,31 @@ protected boolean needNavigation(Class<?> entityClass, String fieldName, EntityD\n         return dictionary.isRelation(entityClass, fieldName)\n                 || MetaDataStore.isTableJoin(entityClass, fieldName, dictionary);\n     }\n+\n+    /**\n+     * Extend this path with a extension dot separated path\n+     *\n+     * @param extensionPath extension path append to this join path\n+     * @param dictionary dictionary\n+     * @return expended join path e.g. <code>[A.B]/[B.C] + C.D = [A.B]/[B.C]/[C.D]</code>\n+     */\n+    public JoinPath extend(String extensionPath, EntityDictionary dictionary) {\n+        return extendJoinPath(this, new JoinPath(lastElement().get().getType(), dictionary, extensionPath));\n+    }\n+\n+    /**\n+     * Append an extension path to an original path, the last element of original path should be the same as the\n+     * first element of extension path.\n+     *\n+     * @param path original path, e.g. <code>[A.B]/[B.C]</code>\n+     * @param extension extension path, e.g. <code>[B.C]/[C.D]</code>\n+     * @param <P> path extension\n+     * @return extended path <code>[A.B]/[B.C]/[C.D]</code>\n+     */\n+    private static <P extends Path> JoinPath extendJoinPath(Path path, P extension) {\n+        List<Path.PathElement> toExtend = new ArrayList<>(path.getPathElements());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI1OTQwNw=="}, "originalCommit": {"oid": "72eeb14b33a4b7b5654849f9ad30bb15808b73ea"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjY2NTk3OnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/FormulaValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTo1ODoyM1rOF63PYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxOTo1MzozOFrOF7AreQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI2Njc4NA==", "bodyText": "Do we need to check here if visited already contains the dimension?", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r397266784", "createdAt": "2020-03-24T15:58:23Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/FormulaValidator.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.metadata;\n+\n+import com.yahoo.elide.datastores.aggregation.annotation.DimensionFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.JoinTo;\n+import com.yahoo.elide.datastores.aggregation.annotation.MetricFormula;\n+import com.yahoo.elide.datastores.aggregation.core.JoinPath;\n+import com.yahoo.elide.datastores.aggregation.metadata.models.Column;\n+import com.yahoo.elide.datastores.aggregation.metadata.models.Dimension;\n+import com.yahoo.elide.datastores.aggregation.metadata.models.Metric;\n+\n+import java.util.LinkedHashSet;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * FormulaValidator check whether a column defined with {@link JoinTo}, {@link MetricFormula} or\n+ * {@link DimensionFormula} has reference loop. If so, throw out exception.\n+ */\n+public class FormulaValidator extends ColumnVisitor<Void> {\n+    private final LinkedHashSet<Column> visited = new LinkedHashSet<>();\n+\n+    public FormulaValidator(MetaDataStore metaDataStore) {\n+        super(metaDataStore);\n+    }\n+\n+    /**\n+     * For a FIELD column, don't need to check anything.\n+     *\n+     * @param metric a FIELD metric\n+     * @return null\n+     */\n+    @Override\n+    protected Void visitFieldMetric(Metric metric) {\n+        return null;\n+    }\n+\n+    @Override\n+    protected Void visitFormulaMetric(Metric metric) {\n+        return visitFormulaColumn(metric);\n+    }\n+\n+    /**\n+     * For a FIELD column, don't need to check anything.\n+     *\n+     * @param dimension a FIELD dimension\n+     * @return null\n+     */\n+    @Override\n+    protected Void visitFieldDimension(Dimension dimension) {\n+        return null;\n+    }\n+\n+    @Override\n+    protected Void visitFormulaDimension(Dimension dimension) {\n+        return visitFormulaColumn(dimension);\n+    }\n+\n+    /**\n+     * For a reference dimension column. We mark the column as visited and visit the source column.\n+     *\n+     * @param dimension dimension defined with {@link JoinTo}\n+     * @return null\n+     */\n+    @Override\n+    protected Void visitReferenceDimension(Dimension dimension) {\n+        Class<?> tableClass = dictionary.getEntityClass(dimension.getTable().getId());\n+\n+        JoinPath joinToPath = new JoinPath(\n+                tableClass,\n+                dictionary,\n+                dictionary.getAttributeOrRelationAnnotation(tableClass, JoinTo.class, dimension.getName()).path());\n+\n+        visited.add(dimension);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72eeb14b33a4b7b5654849f9ad30bb15808b73ea"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQyMTQzMw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r397421433", "createdAt": "2020-03-24T19:53:38Z", "author": {"login": "hellohanchen"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/FormulaValidator.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.metadata;\n+\n+import com.yahoo.elide.datastores.aggregation.annotation.DimensionFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.JoinTo;\n+import com.yahoo.elide.datastores.aggregation.annotation.MetricFormula;\n+import com.yahoo.elide.datastores.aggregation.core.JoinPath;\n+import com.yahoo.elide.datastores.aggregation.metadata.models.Column;\n+import com.yahoo.elide.datastores.aggregation.metadata.models.Dimension;\n+import com.yahoo.elide.datastores.aggregation.metadata.models.Metric;\n+\n+import java.util.LinkedHashSet;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * FormulaValidator check whether a column defined with {@link JoinTo}, {@link MetricFormula} or\n+ * {@link DimensionFormula} has reference loop. If so, throw out exception.\n+ */\n+public class FormulaValidator extends ColumnVisitor<Void> {\n+    private final LinkedHashSet<Column> visited = new LinkedHashSet<>();\n+\n+    public FormulaValidator(MetaDataStore metaDataStore) {\n+        super(metaDataStore);\n+    }\n+\n+    /**\n+     * For a FIELD column, don't need to check anything.\n+     *\n+     * @param metric a FIELD metric\n+     * @return null\n+     */\n+    @Override\n+    protected Void visitFieldMetric(Metric metric) {\n+        return null;\n+    }\n+\n+    @Override\n+    protected Void visitFormulaMetric(Metric metric) {\n+        return visitFormulaColumn(metric);\n+    }\n+\n+    /**\n+     * For a FIELD column, don't need to check anything.\n+     *\n+     * @param dimension a FIELD dimension\n+     * @return null\n+     */\n+    @Override\n+    protected Void visitFieldDimension(Dimension dimension) {\n+        return null;\n+    }\n+\n+    @Override\n+    protected Void visitFormulaDimension(Dimension dimension) {\n+        return visitFormulaColumn(dimension);\n+    }\n+\n+    /**\n+     * For a reference dimension column. We mark the column as visited and visit the source column.\n+     *\n+     * @param dimension dimension defined with {@link JoinTo}\n+     * @return null\n+     */\n+    @Override\n+    protected Void visitReferenceDimension(Dimension dimension) {\n+        Class<?> tableClass = dictionary.getEntityClass(dimension.getTable().getId());\n+\n+        JoinPath joinToPath = new JoinPath(\n+                tableClass,\n+                dictionary,\n+                dictionary.getAttributeOrRelationAnnotation(tableClass, JoinTo.class, dimension.getName()).path());\n+\n+        visited.add(dimension);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI2Njc4NA=="}, "originalCommit": {"oid": "72eeb14b33a4b7b5654849f9ad30bb15808b73ea"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Mjc1MzIzOnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/metadata/SQLReferenceTable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjoxNzowOVrOF64JBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxOTo1OTo1N1rOF7A5HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI4MTU0MQ==", "bodyText": "Given this has state, should we create a new one for each column?", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r397281541", "createdAt": "2020-03-24T16:17:09Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/metadata/SQLReferenceTable.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.queryengines.sql.metadata;\n+\n+import static com.yahoo.elide.datastores.aggregation.queryengines.sql.SQLQueryEngine.getClassAlias;\n+\n+import com.yahoo.elide.core.EntityDictionary;\n+import com.yahoo.elide.core.Path;\n+import com.yahoo.elide.datastores.aggregation.core.JoinPath;\n+import com.yahoo.elide.datastores.aggregation.metadata.FormulaValidator;\n+import com.yahoo.elide.datastores.aggregation.metadata.MetaDataStore;\n+import com.yahoo.elide.datastores.aggregation.metadata.models.Metric;\n+import com.yahoo.elide.datastores.aggregation.metadata.models.Table;\n+\n+import lombok.Getter;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * LabelStore stores all label resolvers, resolved physical reference, resolved join paths for all columns.\n+ */\n+public class SQLReferenceTable {\n+    private final MetaDataStore metaDataStore;\n+\n+    @Getter\n+    private final EntityDictionary dictionary;\n+\n+    private final Map<Class<?>, Map<String, String>> resolvedReferences = new HashMap<>();\n+    private final Map<Class<?>, Map<String, Set<JoinPath>>> resolvedJoinPaths = new HashMap<>();\n+\n+    public SQLReferenceTable(MetaDataStore metaDataStore) {\n+        this.metaDataStore = metaDataStore;\n+        this.dictionary = this.metaDataStore.getDictionary();\n+\n+        metaDataStore.getMetaData(Table.class).forEach(this::resolveAndStoreAllReferencesAndJoins);\n+    }\n+\n+    /**\n+     * Get the resolved physical SQL reference for a field from storage\n+     *\n+     * @param table table class\n+     * @param fieldName field name\n+     * @return resolved reference\n+     */\n+    public String getResolvedReference(Table table, String fieldName) {\n+        return resolvedReferences.get(dictionary.getEntityClass(table.getId())).get(fieldName);\n+    }\n+\n+    /**\n+     * Get the resolved physical SQL reference for a field from storage\n+     *\n+     * @param table table class\n+     * @param fieldName field name\n+     * @return resolved reference\n+     */\n+    public Set<JoinPath> getResolvedJoinPaths(Table table, String fieldName) {\n+        return resolvedJoinPaths.get(dictionary.getEntityClass(table.getId())).get(fieldName);\n+    }\n+\n+    /**\n+     * Resolve all references and joins for a table and store them in this reference table.\n+     *\n+     * @param table meta data table\n+     */\n+    private void resolveAndStoreAllReferencesAndJoins(Table table) {\n+        Class<?> tableClass = dictionary.getEntityClass(table.getId());\n+        if (!resolvedReferences.containsKey(tableClass)) {\n+            resolvedReferences.put(tableClass, new HashMap<>());\n+        }\n+        if (!resolvedJoinPaths.containsKey(tableClass)) {\n+            resolvedJoinPaths.put(tableClass, new HashMap<>());\n+        }\n+\n+        FormulaValidator validator = new FormulaValidator(metaDataStore);\n+        SQLJoinVisitor joinVisitor = new SQLJoinVisitor(metaDataStore);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72eeb14b33a4b7b5654849f9ad30bb15808b73ea"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQyNDkyNA==", "bodyText": "The state would be cleared automatically based on the code logic.", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r397424924", "createdAt": "2020-03-24T19:59:57Z", "author": {"login": "hellohanchen"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/metadata/SQLReferenceTable.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.queryengines.sql.metadata;\n+\n+import static com.yahoo.elide.datastores.aggregation.queryengines.sql.SQLQueryEngine.getClassAlias;\n+\n+import com.yahoo.elide.core.EntityDictionary;\n+import com.yahoo.elide.core.Path;\n+import com.yahoo.elide.datastores.aggregation.core.JoinPath;\n+import com.yahoo.elide.datastores.aggregation.metadata.FormulaValidator;\n+import com.yahoo.elide.datastores.aggregation.metadata.MetaDataStore;\n+import com.yahoo.elide.datastores.aggregation.metadata.models.Metric;\n+import com.yahoo.elide.datastores.aggregation.metadata.models.Table;\n+\n+import lombok.Getter;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * LabelStore stores all label resolvers, resolved physical reference, resolved join paths for all columns.\n+ */\n+public class SQLReferenceTable {\n+    private final MetaDataStore metaDataStore;\n+\n+    @Getter\n+    private final EntityDictionary dictionary;\n+\n+    private final Map<Class<?>, Map<String, String>> resolvedReferences = new HashMap<>();\n+    private final Map<Class<?>, Map<String, Set<JoinPath>>> resolvedJoinPaths = new HashMap<>();\n+\n+    public SQLReferenceTable(MetaDataStore metaDataStore) {\n+        this.metaDataStore = metaDataStore;\n+        this.dictionary = this.metaDataStore.getDictionary();\n+\n+        metaDataStore.getMetaData(Table.class).forEach(this::resolveAndStoreAllReferencesAndJoins);\n+    }\n+\n+    /**\n+     * Get the resolved physical SQL reference for a field from storage\n+     *\n+     * @param table table class\n+     * @param fieldName field name\n+     * @return resolved reference\n+     */\n+    public String getResolvedReference(Table table, String fieldName) {\n+        return resolvedReferences.get(dictionary.getEntityClass(table.getId())).get(fieldName);\n+    }\n+\n+    /**\n+     * Get the resolved physical SQL reference for a field from storage\n+     *\n+     * @param table table class\n+     * @param fieldName field name\n+     * @return resolved reference\n+     */\n+    public Set<JoinPath> getResolvedJoinPaths(Table table, String fieldName) {\n+        return resolvedJoinPaths.get(dictionary.getEntityClass(table.getId())).get(fieldName);\n+    }\n+\n+    /**\n+     * Resolve all references and joins for a table and store them in this reference table.\n+     *\n+     * @param table meta data table\n+     */\n+    private void resolveAndStoreAllReferencesAndJoins(Table table) {\n+        Class<?> tableClass = dictionary.getEntityClass(table.getId());\n+        if (!resolvedReferences.containsKey(tableClass)) {\n+            resolvedReferences.put(tableClass, new HashMap<>());\n+        }\n+        if (!resolvedJoinPaths.containsKey(tableClass)) {\n+            resolvedJoinPaths.put(tableClass, new HashMap<>());\n+        }\n+\n+        FormulaValidator validator = new FormulaValidator(metaDataStore);\n+        SQLJoinVisitor joinVisitor = new SQLJoinVisitor(metaDataStore);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI4MTU0MQ=="}, "originalCommit": {"oid": "72eeb14b33a4b7b5654849f9ad30bb15808b73ea"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Mjc2Mjc3OnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/metadata/SQLReferenceTable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjoxOToxM1rOF64Pcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDowMDoyM1rOF7A6BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI4MzE4Nw==", "bodyText": "This looks unused.", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r397283187", "createdAt": "2020-03-24T16:19:13Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/metadata/SQLReferenceTable.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.queryengines.sql.metadata;\n+\n+import static com.yahoo.elide.datastores.aggregation.queryengines.sql.SQLQueryEngine.getClassAlias;\n+\n+import com.yahoo.elide.core.EntityDictionary;\n+import com.yahoo.elide.core.Path;\n+import com.yahoo.elide.datastores.aggregation.core.JoinPath;\n+import com.yahoo.elide.datastores.aggregation.metadata.FormulaValidator;\n+import com.yahoo.elide.datastores.aggregation.metadata.MetaDataStore;\n+import com.yahoo.elide.datastores.aggregation.metadata.models.Metric;\n+import com.yahoo.elide.datastores.aggregation.metadata.models.Table;\n+\n+import lombok.Getter;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * LabelStore stores all label resolvers, resolved physical reference, resolved join paths for all columns.\n+ */\n+public class SQLReferenceTable {\n+    private final MetaDataStore metaDataStore;\n+\n+    @Getter\n+    private final EntityDictionary dictionary;\n+\n+    private final Map<Class<?>, Map<String, String>> resolvedReferences = new HashMap<>();\n+    private final Map<Class<?>, Map<String, Set<JoinPath>>> resolvedJoinPaths = new HashMap<>();\n+\n+    public SQLReferenceTable(MetaDataStore metaDataStore) {\n+        this.metaDataStore = metaDataStore;\n+        this.dictionary = this.metaDataStore.getDictionary();\n+\n+        metaDataStore.getMetaData(Table.class).forEach(this::resolveAndStoreAllReferencesAndJoins);\n+    }\n+\n+    /**\n+     * Get the resolved physical SQL reference for a field from storage\n+     *\n+     * @param table table class\n+     * @param fieldName field name\n+     * @return resolved reference\n+     */\n+    public String getResolvedReference(Table table, String fieldName) {\n+        return resolvedReferences.get(dictionary.getEntityClass(table.getId())).get(fieldName);\n+    }\n+\n+    /**\n+     * Get the resolved physical SQL reference for a field from storage\n+     *\n+     * @param table table class\n+     * @param fieldName field name\n+     * @return resolved reference\n+     */\n+    public Set<JoinPath> getResolvedJoinPaths(Table table, String fieldName) {\n+        return resolvedJoinPaths.get(dictionary.getEntityClass(table.getId())).get(fieldName);\n+    }\n+\n+    /**\n+     * Resolve all references and joins for a table and store them in this reference table.\n+     *\n+     * @param table meta data table\n+     */\n+    private void resolveAndStoreAllReferencesAndJoins(Table table) {\n+        Class<?> tableClass = dictionary.getEntityClass(table.getId());\n+        if (!resolvedReferences.containsKey(tableClass)) {\n+            resolvedReferences.put(tableClass, new HashMap<>());\n+        }\n+        if (!resolvedJoinPaths.containsKey(tableClass)) {\n+            resolvedJoinPaths.put(tableClass, new HashMap<>());\n+        }\n+\n+        FormulaValidator validator = new FormulaValidator(metaDataStore);\n+        SQLJoinVisitor joinVisitor = new SQLJoinVisitor(metaDataStore);\n+\n+        table.getColumns().forEach(column -> {\n+            // validate that there is no reference loop\n+            validator.visitColumn(column);\n+\n+            String fieldName = column.getName();\n+\n+            resolvedReferences.get(tableClass).put(\n+                    fieldName,\n+                    new SQLReferenceVisitor(metaDataStore, getClassAlias(tableClass)).visitColumn(column));\n+\n+            resolvedJoinPaths.get(tableClass).put(fieldName, joinVisitor.visitColumn(column));\n+\n+            if (column instanceof Metric) {\n+                ((Metric) column).getMetricFunction().setExpression(getResolvedReference(table, fieldName));\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Get physical reference for a path.\n+     *\n+     * @param path path to a field\n+     * @param tableAlias table alias as prefix\n+     * @return resolved physical reference\n+     */\n+    public String resolveReference(Path path, String tableAlias) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72eeb14b33a4b7b5654849f9ad30bb15808b73ea"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQyNTE1Ng==", "bodyText": "Used in SQLQueryConstructor.", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r397425156", "createdAt": "2020-03-24T20:00:23Z", "author": {"login": "hellohanchen"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/metadata/SQLReferenceTable.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.queryengines.sql.metadata;\n+\n+import static com.yahoo.elide.datastores.aggregation.queryengines.sql.SQLQueryEngine.getClassAlias;\n+\n+import com.yahoo.elide.core.EntityDictionary;\n+import com.yahoo.elide.core.Path;\n+import com.yahoo.elide.datastores.aggregation.core.JoinPath;\n+import com.yahoo.elide.datastores.aggregation.metadata.FormulaValidator;\n+import com.yahoo.elide.datastores.aggregation.metadata.MetaDataStore;\n+import com.yahoo.elide.datastores.aggregation.metadata.models.Metric;\n+import com.yahoo.elide.datastores.aggregation.metadata.models.Table;\n+\n+import lombok.Getter;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * LabelStore stores all label resolvers, resolved physical reference, resolved join paths for all columns.\n+ */\n+public class SQLReferenceTable {\n+    private final MetaDataStore metaDataStore;\n+\n+    @Getter\n+    private final EntityDictionary dictionary;\n+\n+    private final Map<Class<?>, Map<String, String>> resolvedReferences = new HashMap<>();\n+    private final Map<Class<?>, Map<String, Set<JoinPath>>> resolvedJoinPaths = new HashMap<>();\n+\n+    public SQLReferenceTable(MetaDataStore metaDataStore) {\n+        this.metaDataStore = metaDataStore;\n+        this.dictionary = this.metaDataStore.getDictionary();\n+\n+        metaDataStore.getMetaData(Table.class).forEach(this::resolveAndStoreAllReferencesAndJoins);\n+    }\n+\n+    /**\n+     * Get the resolved physical SQL reference for a field from storage\n+     *\n+     * @param table table class\n+     * @param fieldName field name\n+     * @return resolved reference\n+     */\n+    public String getResolvedReference(Table table, String fieldName) {\n+        return resolvedReferences.get(dictionary.getEntityClass(table.getId())).get(fieldName);\n+    }\n+\n+    /**\n+     * Get the resolved physical SQL reference for a field from storage\n+     *\n+     * @param table table class\n+     * @param fieldName field name\n+     * @return resolved reference\n+     */\n+    public Set<JoinPath> getResolvedJoinPaths(Table table, String fieldName) {\n+        return resolvedJoinPaths.get(dictionary.getEntityClass(table.getId())).get(fieldName);\n+    }\n+\n+    /**\n+     * Resolve all references and joins for a table and store them in this reference table.\n+     *\n+     * @param table meta data table\n+     */\n+    private void resolveAndStoreAllReferencesAndJoins(Table table) {\n+        Class<?> tableClass = dictionary.getEntityClass(table.getId());\n+        if (!resolvedReferences.containsKey(tableClass)) {\n+            resolvedReferences.put(tableClass, new HashMap<>());\n+        }\n+        if (!resolvedJoinPaths.containsKey(tableClass)) {\n+            resolvedJoinPaths.put(tableClass, new HashMap<>());\n+        }\n+\n+        FormulaValidator validator = new FormulaValidator(metaDataStore);\n+        SQLJoinVisitor joinVisitor = new SQLJoinVisitor(metaDataStore);\n+\n+        table.getColumns().forEach(column -> {\n+            // validate that there is no reference loop\n+            validator.visitColumn(column);\n+\n+            String fieldName = column.getName();\n+\n+            resolvedReferences.get(tableClass).put(\n+                    fieldName,\n+                    new SQLReferenceVisitor(metaDataStore, getClassAlias(tableClass)).visitColumn(column));\n+\n+            resolvedJoinPaths.get(tableClass).put(fieldName, joinVisitor.visitColumn(column));\n+\n+            if (column instanceof Metric) {\n+                ((Metric) column).getMetricFunction().setExpression(getResolvedReference(table, fieldName));\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Get physical reference for a path.\n+     *\n+     * @param path path to a field\n+     * @param tableAlias table alias as prefix\n+     * @return resolved physical reference\n+     */\n+    public String resolveReference(Path path, String tableAlias) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI4MzE4Nw=="}, "originalCommit": {"oid": "72eeb14b33a4b7b5654849f9ad30bb15808b73ea"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzE1MDg2OnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/query/SQLQueryConstructor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzo0ODozOFrOF68L9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzo0ODozOFrOF68L9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0NzgyOA==", "bodyText": "Instead of special casing this in the query constructor, I think this might be cleaner if TimeDImension was something that can be visited in the visitor itself.  Let's discuss and see if this is possible", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r397347828", "createdAt": "2020-03-24T17:48:38Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/query/SQLQueryConstructor.java", "diffHunk": "@@ -418,13 +420,33 @@ private String translateFilterExpression(FilterExpression expression,\n     }\n \n     /**\n-     * Converts a filter predicate into a SQL WHERE/HAVING clause column reference.\n+     * Converts a path into a SQL WHERE/HAVING clause column reference.\n      *\n-     * @param predicate The predicate to convert\n+     * @param path path to a field\n+     * @param template query template\n+     * @param table Elide logical table this query is querying\n      * @return A SQL fragment that references a database column\n      */\n-    private String generatePredicateReference(FilterPredicate predicate) {\n-        return generateColumnReference(predicate.getPath(), dictionary);\n+    private String generatePredicatePathReference(Path path, SQLQueryTemplate template, Table table) {\n+        // if the predicate is for a time dimension, it needs to be projected in the query with specified time grain\n+        if (path.getPathElements().size() == 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72eeb14b33a4b7b5654849f9ad30bb15808b73ea"}, "originalPosition": 250}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzI1ODIyOnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/query/SQLQueryConstructor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxODoxNzoxNFrOF69SpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDowOTozNVrOF7BMZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2NTkyNA==", "bodyText": "use flatmap", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r397365924", "createdAt": "2020-03-24T18:17:14Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/query/SQLQueryConstructor.java", "diffHunk": "@@ -381,25 +382,26 @@ private Path expandJoinToPath(Path path) {\n      * @param sortClauses The list of sort columns and their sort order (ascending or descending).\n      * @return A set of path elements that capture a relationship traversal.\n      */\n-    private Set<Path> extractJoinPaths(Map<Path, Sorting.SortOrder> sortClauses) {\n+    private Set<JoinPath> extractJoinPaths(Map<Path, Sorting.SortOrder> sortClauses) {\n         return sortClauses.keySet().stream()\n-                .map(this::expandJoinToPath)\n+                .map(this::extendToJoinToPath)\n                 .collect(Collectors.toCollection(LinkedHashSet::new));\n     }\n \n     /**\n      * Given the set of group by dimensions, extract any entity relationship traversals that require joins.\n-     * This method takes in a {@link SQLTable} because the sql join path meta data is stored in it.\n+     * This method takes in a {@link Table} because the sql join path meta data is stored in it.\n      *\n      * @param groupByDimensions The list of dimensions we are grouping on.\n      * @param table queried table\n      * @return A set of path elements that capture a relationship traversal.\n      */\n-    private Set<Path> extractJoinPaths(Set<ColumnProjection> groupByDimensions,\n-                                       SQLTable table) {\n-        return resolveSQLColumns(groupByDimensions, table).stream()\n-                .filter((dim) -> dim.getJoinPath() != null)\n-                .map(SQLColumn::getJoinPath)\n+    private Set<JoinPath> extractJoinPaths(Set<ColumnProjection> groupByDimensions,\n+                                           Table table) {\n+        return resolveProjectedDimensions(groupByDimensions, table).stream()\n+                .map(column -> referenceTable.getResolvedJoinPaths(table, column.getName()))\n+                .map(Collection::stream)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72eeb14b33a4b7b5654849f9ad30bb15808b73ea"}, "originalPosition": 228}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQyOTg2MQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r397429861", "createdAt": "2020-03-24T20:09:35Z", "author": {"login": "hellohanchen"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/query/SQLQueryConstructor.java", "diffHunk": "@@ -381,25 +382,26 @@ private Path expandJoinToPath(Path path) {\n      * @param sortClauses The list of sort columns and their sort order (ascending or descending).\n      * @return A set of path elements that capture a relationship traversal.\n      */\n-    private Set<Path> extractJoinPaths(Map<Path, Sorting.SortOrder> sortClauses) {\n+    private Set<JoinPath> extractJoinPaths(Map<Path, Sorting.SortOrder> sortClauses) {\n         return sortClauses.keySet().stream()\n-                .map(this::expandJoinToPath)\n+                .map(this::extendToJoinToPath)\n                 .collect(Collectors.toCollection(LinkedHashSet::new));\n     }\n \n     /**\n      * Given the set of group by dimensions, extract any entity relationship traversals that require joins.\n-     * This method takes in a {@link SQLTable} because the sql join path meta data is stored in it.\n+     * This method takes in a {@link Table} because the sql join path meta data is stored in it.\n      *\n      * @param groupByDimensions The list of dimensions we are grouping on.\n      * @param table queried table\n      * @return A set of path elements that capture a relationship traversal.\n      */\n-    private Set<Path> extractJoinPaths(Set<ColumnProjection> groupByDimensions,\n-                                       SQLTable table) {\n-        return resolveSQLColumns(groupByDimensions, table).stream()\n-                .filter((dim) -> dim.getJoinPath() != null)\n-                .map(SQLColumn::getJoinPath)\n+    private Set<JoinPath> extractJoinPaths(Set<ColumnProjection> groupByDimensions,\n+                                           Table table) {\n+        return resolveProjectedDimensions(groupByDimensions, table).stream()\n+                .map(column -> referenceTable.getResolvedJoinPaths(table, column.getName()))\n+                .map(Collection::stream)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2NTkyNA=="}, "originalCommit": {"oid": "72eeb14b33a4b7b5654849f9ad30bb15808b73ea"}, "originalPosition": 228}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzI3NDExOnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/annotation/DimensionReference.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxODoyMToyOFrOF69c6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDoxMDo0NFrOF7BOlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2ODU1NQ==", "bodyText": "Where is this used?", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r397368555", "createdAt": "2020-03-24T18:21:28Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/annotation/DimensionReference.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.annotation;\n+\n+import com.yahoo.elide.annotation.Include;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.Setter;\n+import lombok.ToString;\n+\n+import javax.persistence.Column;\n+\n+@Include(rootLevel = true)\n+@Cardinality(size = CardinalitySize.LARGE)\n+@EqualsAndHashCode\n+@ToString\n+public class DimensionReference {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72eeb14b33a4b7b5654849f9ad30bb15808b73ea"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2ODY4Mg==", "bodyText": "I don't see a dimension reference here.", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r397368682", "createdAt": "2020-03-24T18:21:40Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/annotation/DimensionReference.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.annotation;\n+\n+import com.yahoo.elide.annotation.Include;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.Setter;\n+import lombok.ToString;\n+\n+import javax.persistence.Column;\n+\n+@Include(rootLevel = true)\n+@Cardinality(size = CardinalitySize.LARGE)\n+@EqualsAndHashCode\n+@ToString\n+public class DimensionReference {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2ODU1NQ=="}, "originalCommit": {"oid": "72eeb14b33a4b7b5654849f9ad30bb15808b73ea"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQzMDQyMg==", "bodyText": "Removed. \ud83d\udc4d", "url": "https://github.com/yahoo/elide/pull/1208#discussion_r397430422", "createdAt": "2020-03-24T20:10:44Z", "author": {"login": "hellohanchen"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/annotation/DimensionReference.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.annotation;\n+\n+import com.yahoo.elide.annotation.Include;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.Setter;\n+import lombok.ToString;\n+\n+import javax.persistence.Column;\n+\n+@Include(rootLevel = true)\n+@Cardinality(size = CardinalitySize.LARGE)\n+@EqualsAndHashCode\n+@ToString\n+public class DimensionReference {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2ODU1NQ=="}, "originalCommit": {"oid": "72eeb14b33a4b7b5654849f9ad30bb15808b73ea"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1074, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}