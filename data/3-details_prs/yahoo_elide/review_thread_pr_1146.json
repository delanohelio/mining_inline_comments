{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0NDgxNzQ5", "number": 1146, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQwMToxNzoxMVrODZBVcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNDowMjozOVrODbci2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTYyODY0OnYy", "diffSide": "RIGHT", "path": "elide-core/src/main/java/com/yahoo/elide/audit/AuditLogger.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQwMToxNzoxMVrOFfMskA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQwMToxNzoxMVrOFfMskA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI1ODE5Mg==", "bodyText": "@aklish Currently, our audit logger uses requestScope to access the transaction in order to save audit record information to the database.  Is there another way then to access request scope?", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r368258192", "createdAt": "2020-01-19T01:17:11Z", "author": {"login": "wcekan"}, "path": "elide-core/src/main/java/com/yahoo/elide/audit/AuditLogger.java", "diffHunk": "@@ -27,7 +25,7 @@ public void log(LogMessage message) {\n         messages.get().add(message);\n     }\n \n-    public abstract void commit(RequestScope requestScope) throws IOException;\n+    public abstract void commit() throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e1b957d3983049b877ccf777d52bab4db3bf00f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMDk4NDY4OnYy", "diffSide": "RIGHT", "path": "elide-core/src/main/java/com/yahoo/elide/audit/LogMessageImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMzowMjowN1rOFi7ViA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxOToxNjozMFrOFkVRfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2ODA3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2015, Yahoo Inc.\n          \n          \n            \n             * Copyright 2020, Yahoo Inc.", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r372168072", "createdAt": "2020-01-29T03:02:07Z", "author": {"login": "jkusa"}, "path": "elide-core/src/main/java/com/yahoo/elide/audit/LogMessageImpl.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 2015, Yahoo Inc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e1b957d3983049b877ccf777d52bab4db3bf00f"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY0MTU5Nw==", "bodyText": "changed", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r373641597", "createdAt": "2020-01-31T19:16:30Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/audit/LogMessageImpl.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 2015, Yahoo Inc.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2ODA3Mg=="}, "originalCommit": {"oid": "1e1b957d3983049b877ccf777d52bab4db3bf00f"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMDk4NzM2OnYy", "diffSide": "RIGHT", "path": "elide-core/src/main/java/com/yahoo/elide/audit/LogMessage.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMzowMzozMlrOFi7W8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxOToxODowMlrOFkVT6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2ODQzMw==", "bodyText": "What is an operation code in this context?", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r372168433", "createdAt": "2020-01-29T03:03:32Z", "author": {"login": "jkusa"}, "path": "elide-core/src/main/java/com/yahoo/elide/audit/LogMessage.java", "diffHunk": "@@ -1,202 +1,54 @@\n /*\n- * Copyright 2015, Yahoo Inc.\n+ * Copyright 2019, Yahoo Inc.\n  * Licensed under the Apache License, Version 2.0\n  * See LICENSE file in project root for terms.\n  */\n+\n package com.yahoo.elide.audit;\n \n-import com.yahoo.elide.annotation.Audit;\n-import com.yahoo.elide.core.PersistentResource;\n-import com.yahoo.elide.core.RequestScope;\n-import com.yahoo.elide.core.ResourceLineage;\n import com.yahoo.elide.security.ChangeSpec;\n-\n+import com.yahoo.elide.security.PersistentResource;\n import com.yahoo.elide.security.User;\n-import de.odysseus.el.ExpressionFactoryImpl;\n-import de.odysseus.el.util.SimpleContext;\n \n-import java.text.MessageFormat;\n-import java.util.List;\n import java.util.Optional;\n-import java.util.stream.Collectors;\n-\n-import javax.el.ELException;\n-import javax.el.ExpressionFactory;\n-import javax.el.PropertyNotFoundException;\n-import javax.el.ValueExpression;\n \n /**\n- * An audit log message that can be logged to a logger.\n+ * Elide audit entity for a CRUD action.\n  */\n-public class LogMessage {\n-    //Supposedly this is thread safe.\n-    private static final ExpressionFactory EXPRESSION_FACTORY = new ExpressionFactoryImpl();\n-    private static final String[] EMPTY_STRING_ARRAY = new String[0];\n-\n-    private final String template;\n-    private final PersistentResource record;\n-    private final String[] expressions;\n-    private final int operationCode;\n-    private final Optional<ChangeSpec> changeSpec;\n+public interface LogMessage {\n \n     /**\n-     * Construct a log message that does not involve any templating.\n-     * @param template - The unsubstituted text that will be logged.\n-     * @param code - The operation code of the auditable action.\n+     * Gets message.\n+     *\n+     * @return the message\n      */\n-    public LogMessage(String template, int code) {\n-        this(template, null, EMPTY_STRING_ARRAY, code, Optional.empty());\n-    }\n+    public String getMessage();\n \n     /**\n-     * Construct a log message from an Audit annotation and the record that was updated in some way.\n-     * @param audit - The annotation containing the type of operation (UPDATE, DELETE, CREATE)\n-     * @param record - The modified record\n-     * @param changeSpec - Change spec of modified elements (if logging object change). empty otherwise\n-     * @throws InvalidSyntaxException if the Audit annotation has invalid syntax.\n+     * Gets operation code.\n+     *\n+     * @return the operation code\n      */\n-    public LogMessage(Audit audit, PersistentResource record, Optional<ChangeSpec> changeSpec)\n-            throws InvalidSyntaxException {\n-        this(audit.logStatement(), record, audit.logExpressions(), audit.operation(), changeSpec);\n-    }\n+    public int getOperationCode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e1b957d3983049b877ccf777d52bab4db3bf00f"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU3ODk2Ng==", "bodyText": "The original audit design allowed for all log messages to have an audit code.  Most audit systems have something like this (in addition to a log message).", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r372578966", "createdAt": "2020-01-29T19:15:51Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/audit/LogMessage.java", "diffHunk": "@@ -1,202 +1,54 @@\n /*\n- * Copyright 2015, Yahoo Inc.\n+ * Copyright 2019, Yahoo Inc.\n  * Licensed under the Apache License, Version 2.0\n  * See LICENSE file in project root for terms.\n  */\n+\n package com.yahoo.elide.audit;\n \n-import com.yahoo.elide.annotation.Audit;\n-import com.yahoo.elide.core.PersistentResource;\n-import com.yahoo.elide.core.RequestScope;\n-import com.yahoo.elide.core.ResourceLineage;\n import com.yahoo.elide.security.ChangeSpec;\n-\n+import com.yahoo.elide.security.PersistentResource;\n import com.yahoo.elide.security.User;\n-import de.odysseus.el.ExpressionFactoryImpl;\n-import de.odysseus.el.util.SimpleContext;\n \n-import java.text.MessageFormat;\n-import java.util.List;\n import java.util.Optional;\n-import java.util.stream.Collectors;\n-\n-import javax.el.ELException;\n-import javax.el.ExpressionFactory;\n-import javax.el.PropertyNotFoundException;\n-import javax.el.ValueExpression;\n \n /**\n- * An audit log message that can be logged to a logger.\n+ * Elide audit entity for a CRUD action.\n  */\n-public class LogMessage {\n-    //Supposedly this is thread safe.\n-    private static final ExpressionFactory EXPRESSION_FACTORY = new ExpressionFactoryImpl();\n-    private static final String[] EMPTY_STRING_ARRAY = new String[0];\n-\n-    private final String template;\n-    private final PersistentResource record;\n-    private final String[] expressions;\n-    private final int operationCode;\n-    private final Optional<ChangeSpec> changeSpec;\n+public interface LogMessage {\n \n     /**\n-     * Construct a log message that does not involve any templating.\n-     * @param template - The unsubstituted text that will be logged.\n-     * @param code - The operation code of the auditable action.\n+     * Gets message.\n+     *\n+     * @return the message\n      */\n-    public LogMessage(String template, int code) {\n-        this(template, null, EMPTY_STRING_ARRAY, code, Optional.empty());\n-    }\n+    public String getMessage();\n \n     /**\n-     * Construct a log message from an Audit annotation and the record that was updated in some way.\n-     * @param audit - The annotation containing the type of operation (UPDATE, DELETE, CREATE)\n-     * @param record - The modified record\n-     * @param changeSpec - Change spec of modified elements (if logging object change). empty otherwise\n-     * @throws InvalidSyntaxException if the Audit annotation has invalid syntax.\n+     * Gets operation code.\n+     *\n+     * @return the operation code\n      */\n-    public LogMessage(Audit audit, PersistentResource record, Optional<ChangeSpec> changeSpec)\n-            throws InvalidSyntaxException {\n-        this(audit.logStatement(), record, audit.logExpressions(), audit.operation(), changeSpec);\n-    }\n+    public int getOperationCode();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2ODQzMw=="}, "originalCommit": {"oid": "1e1b957d3983049b877ccf777d52bab4db3bf00f"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5MDE1NA==", "bodyText": "This is a generic value correct? Can we mention that in the javadocs?", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r372590154", "createdAt": "2020-01-29T19:38:19Z", "author": {"login": "jkusa"}, "path": "elide-core/src/main/java/com/yahoo/elide/audit/LogMessage.java", "diffHunk": "@@ -1,202 +1,54 @@\n /*\n- * Copyright 2015, Yahoo Inc.\n+ * Copyright 2019, Yahoo Inc.\n  * Licensed under the Apache License, Version 2.0\n  * See LICENSE file in project root for terms.\n  */\n+\n package com.yahoo.elide.audit;\n \n-import com.yahoo.elide.annotation.Audit;\n-import com.yahoo.elide.core.PersistentResource;\n-import com.yahoo.elide.core.RequestScope;\n-import com.yahoo.elide.core.ResourceLineage;\n import com.yahoo.elide.security.ChangeSpec;\n-\n+import com.yahoo.elide.security.PersistentResource;\n import com.yahoo.elide.security.User;\n-import de.odysseus.el.ExpressionFactoryImpl;\n-import de.odysseus.el.util.SimpleContext;\n \n-import java.text.MessageFormat;\n-import java.util.List;\n import java.util.Optional;\n-import java.util.stream.Collectors;\n-\n-import javax.el.ELException;\n-import javax.el.ExpressionFactory;\n-import javax.el.PropertyNotFoundException;\n-import javax.el.ValueExpression;\n \n /**\n- * An audit log message that can be logged to a logger.\n+ * Elide audit entity for a CRUD action.\n  */\n-public class LogMessage {\n-    //Supposedly this is thread safe.\n-    private static final ExpressionFactory EXPRESSION_FACTORY = new ExpressionFactoryImpl();\n-    private static final String[] EMPTY_STRING_ARRAY = new String[0];\n-\n-    private final String template;\n-    private final PersistentResource record;\n-    private final String[] expressions;\n-    private final int operationCode;\n-    private final Optional<ChangeSpec> changeSpec;\n+public interface LogMessage {\n \n     /**\n-     * Construct a log message that does not involve any templating.\n-     * @param template - The unsubstituted text that will be logged.\n-     * @param code - The operation code of the auditable action.\n+     * Gets message.\n+     *\n+     * @return the message\n      */\n-    public LogMessage(String template, int code) {\n-        this(template, null, EMPTY_STRING_ARRAY, code, Optional.empty());\n-    }\n+    public String getMessage();\n \n     /**\n-     * Construct a log message from an Audit annotation and the record that was updated in some way.\n-     * @param audit - The annotation containing the type of operation (UPDATE, DELETE, CREATE)\n-     * @param record - The modified record\n-     * @param changeSpec - Change spec of modified elements (if logging object change). empty otherwise\n-     * @throws InvalidSyntaxException if the Audit annotation has invalid syntax.\n+     * Gets operation code.\n+     *\n+     * @return the operation code\n      */\n-    public LogMessage(Audit audit, PersistentResource record, Optional<ChangeSpec> changeSpec)\n-            throws InvalidSyntaxException {\n-        this(audit.logStatement(), record, audit.logExpressions(), audit.operation(), changeSpec);\n-    }\n+    public int getOperationCode();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2ODQzMw=="}, "originalCommit": {"oid": "1e1b957d3983049b877ccf777d52bab4db3bf00f"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY0MjIxNw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r373642217", "createdAt": "2020-01-31T19:18:02Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/audit/LogMessage.java", "diffHunk": "@@ -1,202 +1,54 @@\n /*\n- * Copyright 2015, Yahoo Inc.\n+ * Copyright 2019, Yahoo Inc.\n  * Licensed under the Apache License, Version 2.0\n  * See LICENSE file in project root for terms.\n  */\n+\n package com.yahoo.elide.audit;\n \n-import com.yahoo.elide.annotation.Audit;\n-import com.yahoo.elide.core.PersistentResource;\n-import com.yahoo.elide.core.RequestScope;\n-import com.yahoo.elide.core.ResourceLineage;\n import com.yahoo.elide.security.ChangeSpec;\n-\n+import com.yahoo.elide.security.PersistentResource;\n import com.yahoo.elide.security.User;\n-import de.odysseus.el.ExpressionFactoryImpl;\n-import de.odysseus.el.util.SimpleContext;\n \n-import java.text.MessageFormat;\n-import java.util.List;\n import java.util.Optional;\n-import java.util.stream.Collectors;\n-\n-import javax.el.ELException;\n-import javax.el.ExpressionFactory;\n-import javax.el.PropertyNotFoundException;\n-import javax.el.ValueExpression;\n \n /**\n- * An audit log message that can be logged to a logger.\n+ * Elide audit entity for a CRUD action.\n  */\n-public class LogMessage {\n-    //Supposedly this is thread safe.\n-    private static final ExpressionFactory EXPRESSION_FACTORY = new ExpressionFactoryImpl();\n-    private static final String[] EMPTY_STRING_ARRAY = new String[0];\n-\n-    private final String template;\n-    private final PersistentResource record;\n-    private final String[] expressions;\n-    private final int operationCode;\n-    private final Optional<ChangeSpec> changeSpec;\n+public interface LogMessage {\n \n     /**\n-     * Construct a log message that does not involve any templating.\n-     * @param template - The unsubstituted text that will be logged.\n-     * @param code - The operation code of the auditable action.\n+     * Gets message.\n+     *\n+     * @return the message\n      */\n-    public LogMessage(String template, int code) {\n-        this(template, null, EMPTY_STRING_ARRAY, code, Optional.empty());\n-    }\n+    public String getMessage();\n \n     /**\n-     * Construct a log message from an Audit annotation and the record that was updated in some way.\n-     * @param audit - The annotation containing the type of operation (UPDATE, DELETE, CREATE)\n-     * @param record - The modified record\n-     * @param changeSpec - Change spec of modified elements (if logging object change). empty otherwise\n-     * @throws InvalidSyntaxException if the Audit annotation has invalid syntax.\n+     * Gets operation code.\n+     *\n+     * @return the operation code\n      */\n-    public LogMessage(Audit audit, PersistentResource record, Optional<ChangeSpec> changeSpec)\n-            throws InvalidSyntaxException {\n-        this(audit.logStatement(), record, audit.logExpressions(), audit.operation(), changeSpec);\n-    }\n+    public int getOperationCode();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2ODQzMw=="}, "originalCommit": {"oid": "1e1b957d3983049b877ccf777d52bab4db3bf00f"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTAwMzkxOnYy", "diffSide": "RIGHT", "path": "elide-core/src/test/java/com/yahoo/elide/audit/LogMessageTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMzoxNDo0MlrOFi7geA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOToyMzo1N1rOFjUqTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3MDg3Mg==", "bodyText": "Can we rename the file to LogMessageImplTest.java?", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r372170872", "createdAt": "2020-01-29T03:14:42Z", "author": {"login": "jkusa"}, "path": "elide-core/src/test/java/com/yahoo/elide/audit/LogMessageTest.java", "diffHunk": "@@ -73,15 +73,15 @@ public String getName() {\n     @Test\n     public void verifyOpaqueUserExpressions() {\n         final String[] expressions = { \"${opaqueUser.name}\", \"${opaqueUser.name}\" };\n-        final LogMessage message = new LogMessage(\"{0} {1}\", childRecord, expressions, 1, Optional.empty());\n+        final LogMessageImpl message = new LogMessageImpl(\"{0} {1}\", childRecord, expressions, 1, Optional.empty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e1b957d3983049b877ccf777d52bab4db3bf00f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU4Mjk5MQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r372582991", "createdAt": "2020-01-29T19:23:57Z", "author": {"login": "aklish"}, "path": "elide-core/src/test/java/com/yahoo/elide/audit/LogMessageTest.java", "diffHunk": "@@ -73,15 +73,15 @@ public String getName() {\n     @Test\n     public void verifyOpaqueUserExpressions() {\n         final String[] expressions = { \"${opaqueUser.name}\", \"${opaqueUser.name}\" };\n-        final LogMessage message = new LogMessage(\"{0} {1}\", childRecord, expressions, 1, Optional.empty());\n+        final LogMessageImpl message = new LogMessageImpl(\"{0} {1}\", childRecord, expressions, 1, Optional.empty());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3MDg3Mg=="}, "originalCommit": {"oid": "1e1b957d3983049b877ccf777d52bab4db3bf00f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTAwODI3OnYy", "diffSide": "RIGHT", "path": "elide-core/src/main/java/com/yahoo/elide/core/PersistentResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMzoxODoyNFrOFi7jFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOToxNzoxNFrOFjUdag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3MTU0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            LogMessageImpl message = new LogMessageImpl(annotation, this, Optional.of(changeSpec));\n          \n          \n            \n                            LogMessage message = new LogMessageImpl(annotation, this, Optional.of(changeSpec));", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r372171540", "createdAt": "2020-01-29T03:18:24Z", "author": {"login": "jkusa"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/PersistentResource.java", "diffHunk": "@@ -1768,7 +1768,7 @@ protected void auditField(final ChangeSpec changeSpec) {\n         }\n         for (Audit annotation : annotations) {\n             if (annotation.action().length == 1 && annotation.action()[0] == Audit.Action.UPDATE) {\n-                LogMessage message = new LogMessage(annotation, this, Optional.of(changeSpec));\n+                LogMessageImpl message = new LogMessageImpl(annotation, this, Optional.of(changeSpec));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e1b957d3983049b877ccf777d52bab4db3bf00f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU3OTY5MA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r372579690", "createdAt": "2020-01-29T19:17:14Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/PersistentResource.java", "diffHunk": "@@ -1768,7 +1768,7 @@ protected void auditField(final ChangeSpec changeSpec) {\n         }\n         for (Audit annotation : annotations) {\n             if (annotation.action().length == 1 && annotation.action()[0] == Audit.Action.UPDATE) {\n-                LogMessage message = new LogMessage(annotation, this, Optional.of(changeSpec));\n+                LogMessageImpl message = new LogMessageImpl(annotation, this, Optional.of(changeSpec));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3MTU0MA=="}, "originalCommit": {"oid": "1e1b957d3983049b877ccf777d52bab4db3bf00f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTAwOTU0OnYy", "diffSide": "RIGHT", "path": "elide-core/src/main/java/com/yahoo/elide/core/PersistentResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMzoxOTozNFrOFi7j2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxOToxODozMVrOFkVUwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3MTczOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                LogMessageImpl message = new LogMessageImpl(annotation, this, Optional.ofNullable(changeSpec));\n          \n          \n            \n                                LogMessage message = new LogMessageImpl(annotation, this, Optional.ofNullable(changeSpec));", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r372171738", "createdAt": "2020-01-29T03:19:34Z", "author": {"login": "jkusa"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/PersistentResource.java", "diffHunk": "@@ -1791,7 +1791,7 @@ protected void auditClass(Audit.Action action, ChangeSpec changeSpec) {\n         for (Audit annotation : annotations) {\n             for (Audit.Action auditAction : annotation.action()) {\n                 if (auditAction == action) { // compare object reference\n-                    LogMessage message = new LogMessage(annotation, this, Optional.ofNullable(changeSpec));\n+                    LogMessageImpl message = new LogMessageImpl(annotation, this, Optional.ofNullable(changeSpec));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e1b957d3983049b877ccf777d52bab4db3bf00f"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY0MjQzNA==", "bodyText": "Already changed", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r373642434", "createdAt": "2020-01-31T19:18:31Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/PersistentResource.java", "diffHunk": "@@ -1791,7 +1791,7 @@ protected void auditClass(Audit.Action action, ChangeSpec changeSpec) {\n         for (Audit annotation : annotations) {\n             for (Audit.Action auditAction : annotation.action()) {\n                 if (auditAction == action) { // compare object reference\n-                    LogMessage message = new LogMessage(annotation, this, Optional.ofNullable(changeSpec));\n+                    LogMessageImpl message = new LogMessageImpl(annotation, this, Optional.ofNullable(changeSpec));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3MTczOA=="}, "originalCommit": {"oid": "1e1b957d3983049b877ccf777d52bab4db3bf00f"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTAzMDIyOnYy", "diffSide": "RIGHT", "path": "elide-core/src/main/java/com/yahoo/elide/jsonapi/EntityProjectionMaker.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMzozNzoyMVrOFi7wEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxOTo0NToxNVrOFkWCTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3NDg2Ng==", "bodyText": "Could this be simplified with:\nSorting sorting = SortingImpl.parseQueryParams(scope.getQueryParams().get(), entityClass, dictionary);", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r372174866", "createdAt": "2020-01-29T03:37:21Z", "author": {"login": "jkusa"}, "path": "elide-core/src/main/java/com/yahoo/elide/jsonapi/EntityProjectionMaker.java", "diffHunk": "@@ -136,11 +138,16 @@ public EntityProjection parseInclude(Class<?> entityClass) {\n             Class<?> entityClass = getEntityClass(parentClass, entityName);\n             FilterExpression filter = scope.getExpressionForRelation(parentClass, entityName).orElse(null);\n \n+            Sorting sorting = SortingImpl.getDefaultEmptyInstance();\n+            if (scope.getQueryParams().isPresent()) {\n+                sorting = SortingImpl.parseQueryParams(scope.getQueryParams().get(), entityClass, dictionary);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9393a211380076634f6765f96c377651ad8a004"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU4MjA3Ng==", "bodyText": "That doesn't cover the case where there are no query params.   I believe the code is as simple as can be.", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r372582076", "createdAt": "2020-01-29T19:22:07Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/jsonapi/EntityProjectionMaker.java", "diffHunk": "@@ -136,11 +138,16 @@ public EntityProjection parseInclude(Class<?> entityClass) {\n             Class<?> entityClass = getEntityClass(parentClass, entityName);\n             FilterExpression filter = scope.getExpressionForRelation(parentClass, entityName).orElse(null);\n \n+            Sorting sorting = SortingImpl.getDefaultEmptyInstance();\n+            if (scope.getQueryParams().isPresent()) {\n+                sorting = SortingImpl.parseQueryParams(scope.getQueryParams().get(), entityClass, dictionary);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3NDg2Ng=="}, "originalCommit": {"oid": "a9393a211380076634f6765f96c377651ad8a004"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5MjUxOA==", "bodyText": "Can this cover that case:\n\n  \n    \n      elide/elide-core/src/main/java/com/yahoo/elide/core/sort/SortingImpl.java\n    \n    \n         Line 152\n      in\n      eb37bef\n    \n    \n    \n    \n\n        \n          \n           return sortingRules.isEmpty() ? DEFAULT_EMPTY_INSTANCE : new SortingImpl(sortingRules, type, dictionary);", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r372592518", "createdAt": "2020-01-29T19:42:55Z", "author": {"login": "jkusa"}, "path": "elide-core/src/main/java/com/yahoo/elide/jsonapi/EntityProjectionMaker.java", "diffHunk": "@@ -136,11 +138,16 @@ public EntityProjection parseInclude(Class<?> entityClass) {\n             Class<?> entityClass = getEntityClass(parentClass, entityName);\n             FilterExpression filter = scope.getExpressionForRelation(parentClass, entityName).orElse(null);\n \n+            Sorting sorting = SortingImpl.getDefaultEmptyInstance();\n+            if (scope.getQueryParams().isPresent()) {\n+                sorting = SortingImpl.parseQueryParams(scope.getQueryParams().get(), entityClass, dictionary);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3NDg2Ng=="}, "originalCommit": {"oid": "a9393a211380076634f6765f96c377651ad8a004"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY1NDA5Mg==", "bodyText": "Check out the new refactor.", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r373654092", "createdAt": "2020-01-31T19:45:15Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/jsonapi/EntityProjectionMaker.java", "diffHunk": "@@ -136,11 +138,16 @@ public EntityProjection parseInclude(Class<?> entityClass) {\n             Class<?> entityClass = getEntityClass(parentClass, entityName);\n             FilterExpression filter = scope.getExpressionForRelation(parentClass, entityName).orElse(null);\n \n+            Sorting sorting = SortingImpl.getDefaultEmptyInstance();\n+            if (scope.getQueryParams().isPresent()) {\n+                sorting = SortingImpl.parseQueryParams(scope.getQueryParams().get(), entityClass, dictionary);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3NDg2Ng=="}, "originalCommit": {"oid": "a9393a211380076634f6765f96c377651ad8a004"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTAzMjcwOnYy", "diffSide": "RIGHT", "path": "elide-core/src/main/java/com/yahoo/elide/core/sort/SortingImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMzozOTo0MFrOFi7xnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOToxODo0OVrOFjUgWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3NTI2MQ==", "bodyText": "Do we need this? Can simply return null in parseSortRules?", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r372175261", "createdAt": "2020-01-29T03:39:40Z", "author": {"login": "jkusa"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/sort/SortingImpl.java", "diffHunk": "@@ -25,25 +27,29 @@\n  */\n @ToString\n @EqualsAndHashCode\n-public class Sorting {\n-\n-    /**\n-     * Denotes the intended sort type from json-api field.\n-     */\n-    public enum SortOrder { asc, desc }\n+public class SortingImpl implements Sorting {\n \n     private final Map<String, SortOrder> sortRules = new LinkedHashMap<>();\n-    private static final Sorting DEFAULT_EMPTY_INSTANCE = null;\n+    private static final SortingImpl DEFAULT_EMPTY_INSTANCE = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9393a211380076634f6765f96c377651ad8a004"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU4MDQ0Mg==", "bodyText": "This makes sorting consistent with pagination and allows us to introduce a default Sort annotation similar to what we have for Pagination in the future.", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r372580442", "createdAt": "2020-01-29T19:18:49Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/sort/SortingImpl.java", "diffHunk": "@@ -25,25 +27,29 @@\n  */\n @ToString\n @EqualsAndHashCode\n-public class Sorting {\n-\n-    /**\n-     * Denotes the intended sort type from json-api field.\n-     */\n-    public enum SortOrder { asc, desc }\n+public class SortingImpl implements Sorting {\n \n     private final Map<String, SortOrder> sortRules = new LinkedHashMap<>();\n-    private static final Sorting DEFAULT_EMPTY_INSTANCE = null;\n+    private static final SortingImpl DEFAULT_EMPTY_INSTANCE = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3NTI2MQ=="}, "originalCommit": {"oid": "a9393a211380076634f6765f96c377651ad8a004"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTAzMjk0OnYy", "diffSide": "RIGHT", "path": "elide-core/src/main/java/com/yahoo/elide/jsonapi/EntityProjectionMaker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMzozOTo1NVrOFi7xzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOToyMjoxNFrOFjUm7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3NTMwOA==", "bodyText": "Same here?", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r372175308", "createdAt": "2020-01-29T03:39:55Z", "author": {"login": "jkusa"}, "path": "elide-core/src/main/java/com/yahoo/elide/jsonapi/EntityProjectionMaker.java", "diffHunk": "@@ -261,11 +268,16 @@ public EntityProjection visitIncludePath(Path path) {\n                 filter = scope.getExpressionForRelation(parentClass, collectionNameText).orElse(null);\n             }\n \n+            Sorting sorting = SortingImpl.getDefaultEmptyInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9393a211380076634f6765f96c377651ad8a004"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU4MjEyNg==", "bodyText": "See above.", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r372582126", "createdAt": "2020-01-29T19:22:14Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/jsonapi/EntityProjectionMaker.java", "diffHunk": "@@ -261,11 +268,16 @@ public EntityProjection visitIncludePath(Path path) {\n                 filter = scope.getExpressionForRelation(parentClass, collectionNameText).orElse(null);\n             }\n \n+            Sorting sorting = SortingImpl.getDefaultEmptyInstance();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3NTMwOA=="}, "originalCommit": {"oid": "a9393a211380076634f6765f96c377651ad8a004"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTAzODM4OnYy", "diffSide": "RIGHT", "path": "elide-core/src/main/java/com/yahoo/elide/request/Sorting.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMzo0NDoxM1rOFi70xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOToyMzoyNlrOFjUpUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3NjA2OQ==", "bodyText": "Would this be better named isEmpty()", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r372176069", "createdAt": "2020-01-29T03:44:13Z", "author": {"login": "jkusa"}, "path": "elide-core/src/main/java/com/yahoo/elide/request/Sorting.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2019, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+\n+package com.yahoo.elide.request;\n+\n+import com.yahoo.elide.core.Path;\n+\n+import java.util.Map;\n+\n+/**\n+ * Represents a client request to sort a collection.\n+ */\n+public interface Sorting {\n+\n+   /**\n+    * Denotes the intended sort direction (ascending or descending).\n+    */\n+    public enum SortOrder { asc, desc }\n+\n+    /**\n+     * Return an ordered map of paths and their sort order.\n+     * @param <T> The type to sort.\n+     * @return An ordered map of paths and their sort order.\n+     */\n+    public <T> Map<Path, SortOrder> getSortingPaths();\n+\n+    /**\n+     * Get the type of the collection to sort.\n+     * @return the collection type.\n+     */\n+    public Class<?> getType();\n+\n+    /**\n+     * Is this sorting the default instance (not present).\n+     * @return true if sorting wasn't requested.  False otherwise.\n+     */\n+    public boolean isDefaultInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9393a211380076634f6765f96c377651ad8a004"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU4MjczNw==", "bodyText": "Default may not equal empty in the future.", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r372582737", "createdAt": "2020-01-29T19:23:26Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/request/Sorting.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2019, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+\n+package com.yahoo.elide.request;\n+\n+import com.yahoo.elide.core.Path;\n+\n+import java.util.Map;\n+\n+/**\n+ * Represents a client request to sort a collection.\n+ */\n+public interface Sorting {\n+\n+   /**\n+    * Denotes the intended sort direction (ascending or descending).\n+    */\n+    public enum SortOrder { asc, desc }\n+\n+    /**\n+     * Return an ordered map of paths and their sort order.\n+     * @param <T> The type to sort.\n+     * @return An ordered map of paths and their sort order.\n+     */\n+    public <T> Map<Path, SortOrder> getSortingPaths();\n+\n+    /**\n+     * Get the type of the collection to sort.\n+     * @return the collection type.\n+     */\n+    public Class<?> getType();\n+\n+    /**\n+     * Is this sorting the default instance (not present).\n+     * @return true if sorting wasn't requested.  False otherwise.\n+     */\n+    public boolean isDefaultInstance();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3NjA2OQ=="}, "originalCommit": {"oid": "a9393a211380076634f6765f96c377651ad8a004"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTA0OTcwOnYy", "diffSide": "RIGHT", "path": "elide-core/src/main/java/com/yahoo/elide/ElideSettingsBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMzo1NDoyM1rOFi77fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOToxNDo1NFrOFjUY1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3Nzc5MQ==", "bodyText": "Should these constants be defined in the interface?", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r372177791", "createdAt": "2020-01-29T03:54:23Z", "author": {"login": "jkusa"}, "path": "elide-core/src/main/java/com/yahoo/elide/ElideSettingsBuilder.java", "diffHunk": "@@ -45,8 +45,8 @@\n     private List<JoinFilterDialect> joinFilterDialects;\n     private List<SubqueryFilterDialect> subqueryFilterDialects;\n     private Map<Class, Serde> serdes;\n-    private int defaultMaxPageSize = Pagination.MAX_PAGE_LIMIT;\n-    private int defaultPageSize = Pagination.DEFAULT_PAGE_LIMIT;\n+    private int defaultMaxPageSize = PaginationImpl.MAX_PAGE_LIMIT;\n+    private int defaultPageSize = PaginationImpl.DEFAULT_PAGE_LIMIT;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a5cd76820a17af6f95fa699ae9813f0d7c4235"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU3ODUxOA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r372578518", "createdAt": "2020-01-29T19:14:54Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/ElideSettingsBuilder.java", "diffHunk": "@@ -45,8 +45,8 @@\n     private List<JoinFilterDialect> joinFilterDialects;\n     private List<SubqueryFilterDialect> subqueryFilterDialects;\n     private Map<Class, Serde> serdes;\n-    private int defaultMaxPageSize = Pagination.MAX_PAGE_LIMIT;\n-    private int defaultPageSize = Pagination.DEFAULT_PAGE_LIMIT;\n+    private int defaultMaxPageSize = PaginationImpl.MAX_PAGE_LIMIT;\n+    private int defaultPageSize = PaginationImpl.DEFAULT_PAGE_LIMIT;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3Nzc5MQ=="}, "originalCommit": {"oid": "16a5cd76820a17af6f95fa699ae9813f0d7c4235"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTA1NjM0OnYy", "diffSide": "RIGHT", "path": "elide-core/src/main/java/com/yahoo/elide/request/Pagination.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNDowMDo1MlrOFi7_mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNDowMDo1MlrOFi7_mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3ODg0MQ==", "bodyText": "isEmpty? hasNone?", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r372178841", "createdAt": "2020-01-29T04:00:52Z", "author": {"login": "jkusa"}, "path": "elide-core/src/main/java/com/yahoo/elide/request/Pagination.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2019, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+\n+package com.yahoo.elide.request;\n+\n+/**\n+ * Represents a client request to paginate a collection.\n+ */\n+public interface Pagination {\n+    /**\n+     * Get the page offset.\n+     * @return record offset.\n+     */\n+    int getOffset();\n+\n+    /**\n+     * Get the page limit.\n+     * @return record limit.\n+     */\n+    int getLimit();\n+\n+    /**\n+     * Whether or not to fetch the collection size or not.\n+     * @return true if the client wants the total size of the collection.\n+     */\n+    boolean returnPageTotals();\n+\n+    /**\n+     * Get the total size of the collection\n+     * @return total record count.\n+     */\n+    long getPageTotals();\n+\n+    /**\n+     * Set the total size of the collection.\n+     * @param pageTotals the total size.\n+     */\n+    void setPageTotals(long pageTotals);\n+\n+    /**\n+     * Is this the default instance (not present).\n+     * @return true if pagination wasn't requested.  False otherwise.\n+     */\n+    public boolean isDefaultInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a5cd76820a17af6f95fa699ae9813f0d7c4235"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTA1ODE3OnYy", "diffSide": "RIGHT", "path": "elide-core/src/test/java/com/yahoo/elide/core/PaginationLogicTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNDowMjozOVrOFi8Aww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOToyNDoyN1rOFjUrWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3OTEzOQ==", "bodyText": "Should we rename the file to PaginationImplTest.java", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r372179139", "createdAt": "2020-01-29T04:02:39Z", "author": {"login": "jkusa"}, "path": "elide-core/src/test/java/com/yahoo/elide/core/PaginationLogicTest.java", "diffHunk": "@@ -14,7 +14,7 @@\n import com.yahoo.elide.ElideSettingsBuilder;\n import com.yahoo.elide.annotation.Paginate;\n import com.yahoo.elide.core.exceptions.InvalidValueException;\n-import com.yahoo.elide.core.pagination.Pagination;\n+import com.yahoo.elide.core.pagination.PaginationImpl;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a5cd76820a17af6f95fa699ae9813f0d7c4235"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU4MzI1Ng==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r372583256", "createdAt": "2020-01-29T19:24:27Z", "author": {"login": "aklish"}, "path": "elide-core/src/test/java/com/yahoo/elide/core/PaginationLogicTest.java", "diffHunk": "@@ -14,7 +14,7 @@\n import com.yahoo.elide.ElideSettingsBuilder;\n import com.yahoo.elide.annotation.Paginate;\n import com.yahoo.elide.core.exceptions.InvalidValueException;\n-import com.yahoo.elide.core.pagination.Pagination;\n+import com.yahoo.elide.core.pagination.PaginationImpl;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3OTEzOQ=="}, "originalCommit": {"oid": "16a5cd76820a17af6f95fa699ae9813f0d7c4235"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1097, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}