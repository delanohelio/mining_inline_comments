{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1NjQwMDc5", "number": 1565, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxODozMzo1NlrOEpJ60A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxODo1Nzo1N1rOEpKb4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNTg5NTg0OnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxODozMzo1NlrOHaqX5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxODozNjowMlrOHaqccg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzcxOTI2OQ==", "bodyText": "Should we throw an error here?", "url": "https://github.com/yahoo/elide/pull/1565#discussion_r497719269", "createdAt": "2020-09-30T18:33:56Z", "author": {"login": "moizarafat"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "diffHunk": "@@ -117,13 +117,78 @@ public void readAndValidateConfigs() throws IOException {\n         this.setDbVariables(readVariableConfig(Config.DBVARIABLE));\n         this.elideSQLDBConfig.setDbconfigs(readDbConfig());\n         this.elideTableConfig.setTables(readTableConfig());\n+        populateInheritanceHierarchy();\n         validateRequiredConfigsProvided();\n         validateNameUniqueness(this.elideSQLDBConfig.getDbconfigs());\n         validateNameUniqueness(this.elideTableConfig.getTables());\n         validateSqlInTableConfig(this.elideTableConfig);\n         validateJoinedTablesDBConnectionName(this.elideTableConfig);\n     }\n \n+    private void populateInheritanceHierarchy() {\n+        for (Table table : this.elideTableConfig.getTables()) {\n+            Set<Table> parentTables = getParents(table);\n+            if (parentTables.size() > 0) {\n+//                table.setInheritanceHierarchy(parentTables);\n+                flagMeasuresToOverride(table, parentTables);\n+                flagDimensionsToOverride(table, parentTables);\n+            }\n+        }\n+    }\n+\n+    private void flagMeasuresToOverride(Table table, Set<Table> parentTables) {\n+        Set<String> parentClassMeasures = new HashSet<>();\n+        parentTables.forEach(obj -> {\n+            obj.getMeasures().forEach(measure -> {\n+                parentClassMeasures.add(measure.getName());\n+            });\n+        });\n+\n+        for (Measure measure : table.getMeasures()) {\n+            if (parentClassMeasures.contains(measure.getName())) {\n+                measure.setOverride(true);\n+            }\n+        }\n+    }\n+\n+    private void flagDimensionsToOverride(Table table, Set<Table> parentTables) {\n+        Set<String> parentClassDimensions = new HashSet<>();\n+        parentTables.forEach(obj -> {\n+            obj.getDimensions().forEach(dimension -> {\n+                parentClassDimensions.add(dimension.getName());\n+            });\n+        });\n+\n+        for (Dimension dimension : table.getDimensions()) {\n+            if (parentClassDimensions.contains(dimension.getName())) {\n+                dimension.setOverride(true);\n+            }\n+        }\n+    }\n+\n+    private Set<Table> getParents(Table table) {\n+        Set<Table> parentTables = new HashSet<>();\n+        while (table != null && !table.getExtend().equals(\"\")) {\n+            Table parent = getTableByName(table.getExtend());\n+            parentTables.add(parent);\n+            table = parent;\n+        }\n+        return parentTables;\n+    }\n+\n+    private Table getTableByName(String tableName) {\n+        for (Table table : this.elideTableConfig.getTables()) {\n+            if (table.getName().equals(tableName)) {\n+                return table;\n+            }\n+            else {\n+                log.warn(\"Table \" + tableName + \" is not defined in Dynamic Config.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "387c0556cb527e091c2dd55a43e3b73f773a7aa8"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzcyMDQzNA==", "bodyText": "else where we call this method, we should have a null check on the return value.", "url": "https://github.com/yahoo/elide/pull/1565#discussion_r497720434", "createdAt": "2020-09-30T18:36:02Z", "author": {"login": "moizarafat"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "diffHunk": "@@ -117,13 +117,78 @@ public void readAndValidateConfigs() throws IOException {\n         this.setDbVariables(readVariableConfig(Config.DBVARIABLE));\n         this.elideSQLDBConfig.setDbconfigs(readDbConfig());\n         this.elideTableConfig.setTables(readTableConfig());\n+        populateInheritanceHierarchy();\n         validateRequiredConfigsProvided();\n         validateNameUniqueness(this.elideSQLDBConfig.getDbconfigs());\n         validateNameUniqueness(this.elideTableConfig.getTables());\n         validateSqlInTableConfig(this.elideTableConfig);\n         validateJoinedTablesDBConnectionName(this.elideTableConfig);\n     }\n \n+    private void populateInheritanceHierarchy() {\n+        for (Table table : this.elideTableConfig.getTables()) {\n+            Set<Table> parentTables = getParents(table);\n+            if (parentTables.size() > 0) {\n+//                table.setInheritanceHierarchy(parentTables);\n+                flagMeasuresToOverride(table, parentTables);\n+                flagDimensionsToOverride(table, parentTables);\n+            }\n+        }\n+    }\n+\n+    private void flagMeasuresToOverride(Table table, Set<Table> parentTables) {\n+        Set<String> parentClassMeasures = new HashSet<>();\n+        parentTables.forEach(obj -> {\n+            obj.getMeasures().forEach(measure -> {\n+                parentClassMeasures.add(measure.getName());\n+            });\n+        });\n+\n+        for (Measure measure : table.getMeasures()) {\n+            if (parentClassMeasures.contains(measure.getName())) {\n+                measure.setOverride(true);\n+            }\n+        }\n+    }\n+\n+    private void flagDimensionsToOverride(Table table, Set<Table> parentTables) {\n+        Set<String> parentClassDimensions = new HashSet<>();\n+        parentTables.forEach(obj -> {\n+            obj.getDimensions().forEach(dimension -> {\n+                parentClassDimensions.add(dimension.getName());\n+            });\n+        });\n+\n+        for (Dimension dimension : table.getDimensions()) {\n+            if (parentClassDimensions.contains(dimension.getName())) {\n+                dimension.setOverride(true);\n+            }\n+        }\n+    }\n+\n+    private Set<Table> getParents(Table table) {\n+        Set<Table> parentTables = new HashSet<>();\n+        while (table != null && !table.getExtend().equals(\"\")) {\n+            Table parent = getTableByName(table.getExtend());\n+            parentTables.add(parent);\n+            table = parent;\n+        }\n+        return parentTables;\n+    }\n+\n+    private Table getTableByName(String tableName) {\n+        for (Table table : this.elideTableConfig.getTables()) {\n+            if (table.getName().equals(tableName)) {\n+                return table;\n+            }\n+            else {\n+                log.warn(\"Table \" + tableName + \" is not defined in Dynamic Config.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzcxOTI2OQ=="}, "originalCommit": {"oid": "387c0556cb527e091c2dd55a43e3b73f773a7aa8"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNTg5ODMyOnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxODozNDo0MVrOHaqZhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxODozNDo0MVrOHaqZhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzcxOTY4NQ==", "bodyText": "Remove commented code.", "url": "https://github.com/yahoo/elide/pull/1565#discussion_r497719685", "createdAt": "2020-09-30T18:34:41Z", "author": {"login": "moizarafat"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "diffHunk": "@@ -117,13 +117,78 @@ public void readAndValidateConfigs() throws IOException {\n         this.setDbVariables(readVariableConfig(Config.DBVARIABLE));\n         this.elideSQLDBConfig.setDbconfigs(readDbConfig());\n         this.elideTableConfig.setTables(readTableConfig());\n+        populateInheritanceHierarchy();\n         validateRequiredConfigsProvided();\n         validateNameUniqueness(this.elideSQLDBConfig.getDbconfigs());\n         validateNameUniqueness(this.elideTableConfig.getTables());\n         validateSqlInTableConfig(this.elideTableConfig);\n         validateJoinedTablesDBConnectionName(this.elideTableConfig);\n     }\n \n+    private void populateInheritanceHierarchy() {\n+        for (Table table : this.elideTableConfig.getTables()) {\n+            Set<Table> parentTables = getParents(table);\n+            if (parentTables.size() > 0) {\n+//                table.setInheritanceHierarchy(parentTables);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "387c0556cb527e091c2dd55a43e3b73f773a7aa8"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNTk3OTY4OnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/test/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/handlebars/HandlebarsHydratorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxODo1Nzo0M1rOHarLuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxODo1Nzo0M1rOHarLuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzczMjUzOQ==", "bodyText": "I believe this will be reverted back", "url": "https://github.com/yahoo/elide/pull/1565#discussion_r497732539", "createdAt": "2020-09-30T18:57:43Z", "author": {"login": "moizarafat"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/test/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/handlebars/HandlebarsHydratorTest.java", "diffHunk": "@@ -307,10 +307,14 @@\n     private HandlebarsHydrator hydrator;\n \n     @BeforeAll\n-    public void setup() throws IOException {\n+    public void setup() {\n         hydrator = new HandlebarsHydrator();\n         testClass = new DynamicConfigValidator(CONFIG_PATH);\n-        testClass.readAndValidateConfigs();\n+        try {\n+            testClass.readAndValidateConfigs();\n+        } catch (IOException e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "387c0556cb527e091c2dd55a43e3b73f773a7aa8"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNTk4MDQ5OnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/test/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/handlebars/HandlebarsHydratorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxODo1Nzo1N1rOHarMUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxODo1Nzo1N1rOHarMUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzczMjY4OA==", "bodyText": "remove commented code.", "url": "https://github.com/yahoo/elide/pull/1565#discussion_r497732688", "createdAt": "2020-09-30T18:57:57Z", "author": {"login": "moizarafat"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/test/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/handlebars/HandlebarsHydratorTest.java", "diffHunk": "@@ -332,6 +336,15 @@ public void testTableHydration() throws IOException {\n         assertEquals(VALID_TABLE_CLASS, tableClasses.get(VALID_TABLE_JAVA_NAME));\n     }\n \n+    @Test\n+    public void testChildTableHydration() throws IOException {\n+\n+        Map<String, String> tableClasses = hydrator.hydrateTableTemplate(testClass.getElideTableConfig());\n+\n+        assertTrue(tableClasses.keySet().contains(\"PlayerStatsChild\"));\n+//        assertEquals(VALID_TABLE_CLASS, tableClasses.get(\"PlayerStatsChild\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "387c0556cb527e091c2dd55a43e3b73f773a7aa8"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 975, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}