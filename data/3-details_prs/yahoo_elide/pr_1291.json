{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5NzI0NzM1", "number": 1291, "title": "Issue 1197 add memberof operator", "bodyText": "Resolves #1197\nDescription\nAdd the member of operation for only Element Collection attributes for root entity or toOne relationship entity.\nfilter[book]=awards=hasmember='Booker Prize'\nfilter[book]=publisher.phoneNumbers=hasmember='999-999-9999'\nEnables to filter on collection attribute\nLicense\nI confirm that this contribution is made under an Apache 2.0 license and that I have the authority necessary to make this contribution on behalf of its copyright owner.", "createdAt": "2020-04-27T20:19:52Z", "url": "https://github.com/yahoo/elide/pull/1291", "merged": true, "mergeCommit": {"oid": "21a8332e352ae5626b9d106fbf41007092ecc630"}, "closed": true, "closedAt": "2020-05-08T18:21:17Z", "author": {"login": "Chandrasekar-Rajasekar"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcb2BWRgFqTQwMTMxODk3Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcfV3OuAFqTQwODQyMTI1Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMzE4OTcy", "url": "https://github.com/yahoo/elide/pull/1291#pullrequestreview-401318972", "createdAt": "2020-04-27T20:55:23Z", "commit": {"oid": "f9833baed7c4cf4f0259f6b380a6360d5b027f7c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMDo1NToyM1rOGM3R5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMToxODowMlrOGM4HVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE0MTc5OQ==", "bodyText": "There is a method in Path to get the last element.", "url": "https://github.com/yahoo/elide/pull/1291#discussion_r416141799", "createdAt": "2020-04-27T20:55:23Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/FilterPredicate.java", "diffHunk": "@@ -59,6 +59,12 @@ public static boolean toManyInPathExceptLastPathElement(EntityDictionary diction\n                 .anyMatch(RelationshipType::isToMany);\n     }\n \n+    public static boolean checkLastPathElementType(EntityDictionary dictionary, Path path, Class<?> clz) {\n+        int pathLength = path.getPathElements().size();\n+        PathElement lastPathElement = path.getPathElements().get(pathLength - 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9833baed7c4cf4f0259f6b380a6360d5b027f7c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE0NDQ0NA==", "bodyText": "Check out in the same file:\n    public static boolean toManyInPath(EntityDictionary dictionary, Path path) {\n        return path.getPathElements().stream()\n                .map(element -> dictionary.getRelationshipType(element.getType(), element.getFieldName()))\n                .anyMatch(RelationshipType::isToMany);\n    }\n\n    public static boolean toManyInPathExceptLastPathElement(EntityDictionary dictionary, Path path) {\n        int pathLength = path.getPathElements().size();\n        return path.getPathElements().stream()\n                .limit(pathLength - 1)\n                .map(element -> dictionary.getRelationshipType(element.getType(), element.getFieldName()))\n                .anyMatch(RelationshipType::isToMany);\n    }\nLet's add a method that looks like one of these (toManyInLastPathElement):", "url": "https://github.com/yahoo/elide/pull/1291#discussion_r416144444", "createdAt": "2020-04-27T20:59:27Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/FilterPredicate.java", "diffHunk": "@@ -59,6 +59,12 @@ public static boolean toManyInPathExceptLastPathElement(EntityDictionary diction\n                 .anyMatch(RelationshipType::isToMany);\n     }\n \n+    public static boolean checkLastPathElementType(EntityDictionary dictionary, Path path, Class<?> clz) {\n+        int pathLength = path.getPathElements().size();\n+        PathElement lastPathElement = path.getPathElements().get(pathLength - 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE0MTc5OQ=="}, "originalCommit": {"oid": "f9833baed7c4cf4f0259f6b380a6360d5b027f7c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE0OTcyMg==", "bodyText": "coerce into val.getClass().  We probably want to support lists of numbers too.", "url": "https://github.com/yahoo/elide/pull/1291#discussion_r416149722", "createdAt": "2020-04-27T21:07:55Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/Operator.java", "diffHunk": "@@ -350,6 +366,25 @@ public static Operator fromString(final String string) {\n         };\n     }\n \n+    private static <T> Predicate<T> hasMember(String field, List<Object> values, RequestScope requestScope) {\n+        return (T entity) -> {\n+            if (values.size() != 1) {\n+                throw new InvalidPredicateException(\"HasMember can only take one argument\");\n+            }\n+            Object val = getFieldValue(entity, field, requestScope);\n+            String filterStr = CoerceUtil.coerce(values.get(0), String.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9833baed7c4cf4f0259f6b380a6360d5b027f7c"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1MDgyMg==", "bodyText": "This check seems redundant with the validation logic below.  Do we also need this check?", "url": "https://github.com/yahoo/elide/pull/1291#discussion_r416150822", "createdAt": "2020-04-27T21:09:52Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/dialect/DefaultFilterDialect.java", "diffHunk": "@@ -111,12 +112,19 @@ public FilterExpression parseGlobalExpression(String path, MultivaluedMap<String\n                 throw new ParseException(String.format(\"Invalid predicate: %s\", filterPredicate));\n             }\n \n+            if ((filterPredicate.getOperator().equals(Operator.HASMEMBER)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9833baed7c4cf4f0259f6b380a6360d5b027f7c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1Mjk0Ng==", "bodyText": "Can we remove the local variable here?", "url": "https://github.com/yahoo/elide/pull/1291#discussion_r416152946", "createdAt": "2020-04-27T21:13:29Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-hibernate/src/main/java/com/yahoo/elide/core/filter/FilterTranslator.java", "diffHunk": "@@ -170,6 +172,21 @@\n             return String.format(\"%s IS NOT EMPTY\", columnAlias);\n         });\n \n+        operatorGenerators.put(HASMEMBER, (columnAlias, params) -> {\n+            Preconditions.checkArgument(params.size() == 1);\n+            String x =  String.format(\"%s MEMBER OF %s\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9833baed7c4cf4f0259f6b380a6360d5b027f7c"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1MzM0NQ==", "bodyText": "In Elide 5 - we make tags for stores (rather than features).", "url": "https://github.com/yahoo/elide/pull/1291#discussion_r416153345", "createdAt": "2020-04-27T21:14:12Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-hibernate3/pom.xml", "diffHunk": "@@ -40,7 +40,7 @@\n \n     <properties>\n         <dataStoreHarness>com.yahoo.elide.datastores.hibernate3.HibernateDataStoreHarness</dataStoreHarness>\n-        <excludeTags>emptyOnAttributeCollection</excludeTags>\n+        <excludeTags>emptyOnAttributeCollection,memberOfOperation</excludeTags>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9833baed7c4cf4f0259f6b380a6360d5b027f7c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1NTQ3OQ==", "bodyText": "There is a much cleaner way to do these comparisons with hamcrest Matchers.  There are some good examples in PaginationIT.", "url": "https://github.com/yahoo/elide/pull/1291#discussion_r416155479", "createdAt": "2020-04-27T21:18:02Z", "author": {"login": "aklish"}, "path": "elide-integration-tests/src/test/java/com/yahoo/elide/tests/FilterIT.java", "diffHunk": "@@ -1654,6 +1655,146 @@ void testExceptionOnEmptyOperator() throws IOException {\n \n     }\n \n+    @Test\n+    @Tag(\"memberOfOperation\")\n+    void testMemberOfOnAttributes() throws IOException {\n+        JsonNode result;\n+        String filterString = \"Booker Prize\";\n+        Set<JsonNode> awardBook = new HashSet<>();\n+        Set<JsonNode> nullNedAwardBook = new HashSet<>();\n+\n+\n+        // * Filter On Root Entity *\n+        for (JsonNode book : books.get(\"data\")) {\n+            Iterator<JsonNode> awards = book.get(\"attributes\").get(\"awards\").elements();\n+            while (awards.hasNext()) {\n+                if (awards.next().asText().equals(filterString)) {\n+                    awardBook.add(book.get(\"id\"));\n+                    break;\n+                }\n+            }\n+        }\n+        // Test Default filter type on Root Entity\n+        result = getAsNode(String.format(\"/book?filter[book.awards][hasmember]=%s\", filterString));\n+        assertEquals(awardBook.size(), result.get(\"data\").size());\n+        for (JsonNode book : result.get(\"data\")) {\n+            assertTrue(awardBook.contains(book.get(\"id\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9833baed7c4cf4f0259f6b380a6360d5b027f7c"}, "originalPosition": 35}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f9833baed7c4cf4f0259f6b380a6360d5b027f7c", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/f9833baed7c4cf4f0259f6b380a6360d5b027f7c", "committedDate": "2020-04-27T20:14:02Z", "message": "Allow memberof operation for only attributes and collection types"}, "afterCommit": {"oid": "c9b92444fd95a5f214154e98f311d73dbad6250c", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/c9b92444fd95a5f214154e98f311d73dbad6250c", "committedDate": "2020-04-27T22:11:59Z", "message": "Allow memberof operation for only attributes and collection types"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzODcwNzQ3", "url": "https://github.com/yahoo/elide/pull/1291#pullrequestreview-403870747", "createdAt": "2020-04-30T20:55:40Z", "commit": {"oid": "3403e4c865c0912cb8a40265e8b4ba64991df703"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDo1NTo0MVrOGO6AIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMTowMDo0MlrOGO6Ktw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI4MzU1Mw==", "bodyText": "Can we rename this method to something more specific about what it's checking?\nHow about isLastPathElementAssignableFrom", "url": "https://github.com/yahoo/elide/pull/1291#discussion_r418283553", "createdAt": "2020-04-30T20:55:41Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/FilterPredicate.java", "diffHunk": "@@ -59,6 +59,15 @@ public static boolean toManyInPathExceptLastPathElement(EntityDictionary diction\n                 .anyMatch(RelationshipType::isToMany);\n     }\n \n+    public static boolean checkLastPathElementType(EntityDictionary dictionary, Path path, Class<?> clz) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3403e4c865c0912cb8a40265e8b4ba64991df703"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI4NjI2Mw==", "bodyText": "You are right, we'll need to iterate over it.\nAnother alternative is to convert field into a Path object in Elide.  That will do all the type conversion for you.", "url": "https://github.com/yahoo/elide/pull/1291#discussion_r418286263", "createdAt": "2020-04-30T21:00:42Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/Operator.java", "diffHunk": "@@ -350,6 +366,25 @@ public static Operator fromString(final String string) {\n         };\n     }\n \n+    private static <T> Predicate<T> hasMember(String field, List<Object> values, RequestScope requestScope) {\n+        return (T entity) -> {\n+            if (values.size() != 1) {\n+                throw new InvalidPredicateException(\"HasMember can only take one argument\");\n+            }\n+            Object val = getFieldValue(entity, field, requestScope);\n+            String filterStr = CoerceUtil.coerce(values.get(0), String.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE0OTcyMg=="}, "originalCommit": {"oid": "f9833baed7c4cf4f0259f6b380a6360d5b027f7c"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MzkzODYw", "url": "https://github.com/yahoo/elide/pull/1291#pullrequestreview-404393860", "createdAt": "2020-05-01T20:50:12Z", "commit": {"oid": "3b60f953353aa8480a30cac56d90bf168d063ee5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMDo1MDoxMlrOGPVYJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMDo1MDoxMlrOGPVYJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODczMjA3MA==", "bodyText": "We still need to fix the coercion.", "url": "https://github.com/yahoo/elide/pull/1291#discussion_r418732070", "createdAt": "2020-05-01T20:50:12Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/Operator.java", "diffHunk": "@@ -350,6 +367,25 @@ public static Operator fromString(final String string) {\n         };\n     }\n \n+    private static <T> Predicate<T> hasMember(Path fieldPath, List<Object> values, RequestScope requestScope) {\n+        return (T entity) -> {\n+            if (values.size() != 1) {\n+                throw new InvalidPredicateException(\"HasMember can only take one argument\");\n+            }\n+            Object val = getFieldValue(entity, fieldPath, requestScope);\n+            String filterStr = CoerceUtil.coerce(values.get(0), String.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b60f953353aa8480a30cac56d90bf168d063ee5"}, "originalPosition": 355}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1Mjc2OTE1", "url": "https://github.com/yahoo/elide/pull/1291#pullrequestreview-405276915", "createdAt": "2020-05-04T19:20:56Z", "commit": {"oid": "8262b3da49cb7ac869f456b94c84e6090269fd21"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxOToyMDo1NlrOGQOo6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxOToyMDo1NlrOGQOo6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY3MDI1MA==", "bodyText": "Can we also add error tests for book.authors and book.publisher?", "url": "https://github.com/yahoo/elide/pull/1291#discussion_r419670250", "createdAt": "2020-05-04T19:20:56Z", "author": {"login": "aklish"}, "path": "elide-integration-tests/src/test/java/com/yahoo/elide/tests/FilterIT.java", "diffHunk": "@@ -1668,6 +1674,156 @@ void testExceptionOnEmptyOperator() throws IOException {\n \n     }\n \n+    @Test\n+    @Tag(\"excludeOnHibernate3\")\n+    void testMemberOfOnAttributes() throws IOException {\n+        String filterString = \"Booker Prize\";\n+        Set<String> awardBook = new HashSet<>();\n+        Set<String> nullNedAwardBook = new HashSet<>();\n+\n+\n+        // * Filter On Root Entity *\n+        for (JsonNode book : books.get(\"data\")) {\n+            Iterator<JsonNode> awards = book.get(\"attributes\").get(\"awards\").elements();\n+            while (awards.hasNext()) {\n+                if (awards.next().asText().equals(filterString)) {\n+                    awardBook.add(book.get(\"id\").asText());\n+                    break;\n+                }\n+            }\n+        }\n+        // Test Default filter type on Root Entity\n+        when()\n+                .get(String.format(\"/book?filter[book.awards][hasmember]=%s\", filterString))\n+                .then()\n+                .body(\"data\", hasSize(awardBook.size()),\n+                        \"data.id\", contains(awardBook.toArray())\n+                );\n+\n+\n+        // Test RSQL type filter on Root Entity\n+        when()\n+                .get(String.format(\"/book?filter[book]=awards=hasmember=\\\"%s\\\"\", filterString))\n+                .then()\n+                .body(\"data\", hasSize(awardBook.size()),\n+                        \"data.id\", contains(awardBook.toArray())\n+                );\n+\n+\n+        // * Filter On Non Root Entity *\n+        for (JsonNode book : nullNedBooks.get(\"data\")) {\n+            Iterator<JsonNode> awards = book.get(\"attributes\").get(\"awards\").elements();\n+            while (awards.hasNext()) {\n+                if (awards.next().asText().equals(filterString)) {\n+                    nullNedAwardBook.add(book.get(\"id\").asText());\n+                    break;\n+                }\n+            }\n+        }\n+//        // Test Default filter type on NonRoot Entity\n+//        when()\n+//                .get(String.format(\"/author/%s/books?filter[book.awards][hasmember]=%s\", nullNedId, filterString))\n+//                .then()\n+//                .body(\"data\", hasSize(nullNedAwardBook.size()),\n+//                        \"data.id\", contains(nullNedAwardBook.toArray())\n+//                );\n+//\n+//\n+//\n+//        // Test RSQL type filter on NonRoot Entity\n+//        when()\n+//                .get(String.format(\"/author/%s/books?filter[book]=awards=hasmember=\\\"%s\\\"\", nullNedId, filterString))\n+//                .then()\n+//                .body(\"data\", hasSize(nullNedAwardBook.size()),\n+//                        \"data.id\", contains(nullNedAwardBook.toArray())\n+//                );\n+    }\n+\n+    @Test\n+    @Tag(\"excludeOnHibernate3\")\n+    void testMemberOfOnRelationships() throws IOException {\n+        String phoneNumber = \"987-654-3210\";\n+        Set<String> publisherBook = new HashSet<>();\n+\n+\n+        // * Filter On Root Entity *\n+        for (JsonNode book : books.get(\"data\")) {\n+            int publisherId = book.get(\"relationships\").get(\"publisher\").get(\"data\").get(\"id\").asInt();\n+            if (publisherId == 1) {\n+                publisherBook.add(book.get(\"id\").asText());\n+                break;\n+            }\n+        }\n+        // Test Default filter type on Root Entity\n+        when()\n+                .get(String.format(\"/book?filter[book.publisher.phoneNumbers][hasmember]=%s\", phoneNumber))\n+                .then()\n+                .body(\"data\", hasSize(publisherBook.size()),\n+                        \"data.id\", contains(publisherBook.toArray())\n+                );\n+\n+        // Test RSQL type filter on Root Entity\n+        when()\n+                .get(String.format(\"/book?filter[book]=publisher.phoneNumbers=hasmember=\\\"%s\\\"\", phoneNumber))\n+                .then()\n+                .body(\"data\", hasSize(publisherBook.size()),\n+                        \"data.id\", contains(publisherBook.toArray())\n+                );\n+\n+    }\n+\n+    @Test\n+    @Tag(\"excludeOnHibernate3\")\n+    void testExceptionOnMemberOfOperator() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8262b3da49cb7ac869f456b94c84e6090269fd21"}, "originalPosition": 142}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ec37984a60ec9cb46f2e47df6af95aad887509c", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/3ec37984a60ec9cb46f2e47df6af95aad887509c", "committedDate": "2020-05-07T19:19:32Z", "message": "Hasmember operation added for attribute collection"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c04f620f7ce82a876650fb44d894ec8d07feb5a", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/7c04f620f7ce82a876650fb44d894ec8d07feb5a", "committedDate": "2020-05-07T19:19:32Z", "message": "Allow memberof operation for only attributes and collection types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80d22b78686e239dca0e205ee82917b1928cb21d", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/80d22b78686e239dca0e205ee82917b1928cb21d", "committedDate": "2020-05-07T19:19:32Z", "message": "make tags to datastore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f81daa3479bd09fd8612d72e8cd9d177f14ffcfc", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/f81daa3479bd09fd8612d72e8cd9d177f14ffcfc", "committedDate": "2020-05-07T19:19:32Z", "message": "Add exclude tags to test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e7bb79b982e7b84706af0b83eacafc2fbc11fba", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/9e7bb79b982e7b84706af0b83eacafc2fbc11fba", "committedDate": "2020-05-07T19:19:32Z", "message": "import error fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22cb18170753dfb2954e1ba3896706e6b4debf6b", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/22cb18170753dfb2954e1ba3896706e6b4debf6b", "committedDate": "2020-05-07T19:22:00Z", "message": "Refactor Operator.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f7975312ee7fff886e432d5fbc3e2cfd61856e7", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/4f7975312ee7fff886e432d5fbc3e2cfd61856e7", "committedDate": "2020-05-07T19:22:01Z", "message": "refactor OperatorTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91ed767a2de8ce8712e92819fef1cac2fa87e735", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/91ed767a2de8ce8712e92819fef1cac2fa87e735", "committedDate": "2020-05-07T19:22:01Z", "message": "member of accepts all type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bdfc04d9fc1be477d294815617ff03b94ede9a2d", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/bdfc04d9fc1be477d294815617ff03b94ede9a2d", "committedDate": "2020-05-07T19:22:01Z", "message": "Add extra test case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3913423ddd3ccf2b3eee728e4f178f0cbf98e3d6", "author": {"user": {"login": "aklish", "name": "Aaron Klish"}}, "url": "https://github.com/yahoo/elide/commit/3913423ddd3ccf2b3eee728e4f178f0cbf98e3d6", "committedDate": "2020-05-07T19:22:01Z", "message": "Update FilterIT.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6925755b4b9e067f5f8d4efa66dd1eed0cc181b", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/e6925755b4b9e067f5f8d4efa66dd1eed0cc181b", "committedDate": "2020-05-07T19:22:01Z", "message": "Add unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7bb1fe746404437372e96c0977d1bef4a1092466", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/7bb1fe746404437372e96c0977d1bef4a1092466", "committedDate": "2020-05-07T19:22:01Z", "message": "unit test for filter dialect"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43ced021e114a1d8d4686fab6963aa593c8d6040", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/43ced021e114a1d8d4686fab6963aa593c8d6040", "committedDate": "2020-05-07T19:22:01Z", "message": "new unist test for member of filter translator"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7257fa06d85fd4b547709cc95515bd6aec7e16b3", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/7257fa06d85fd4b547709cc95515bd6aec7e16b3", "committedDate": "2020-05-07T18:47:43Z", "message": "new unist test for member of filter translator"}, "afterCommit": {"oid": "43ced021e114a1d8d4686fab6963aa593c8d6040", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/43ced021e114a1d8d4686fab6963aa593c8d6040", "committedDate": "2020-05-07T19:22:01Z", "message": "new unist test for member of filter translator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de2151baf3ed9d3c4d32fa43929c26be59c6a031", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/de2151baf3ed9d3c4d32fa43929c26be59c6a031", "committedDate": "2020-05-07T19:52:33Z", "message": "compilation fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "707fd9f6ee28b015c78ace13b394c34105c6b020", "author": {"user": {"login": "aklish", "name": "Aaron Klish"}}, "url": "https://github.com/yahoo/elide/commit/707fd9f6ee28b015c78ace13b394c34105c6b020", "committedDate": "2020-05-07T20:25:51Z", "message": "Merge branch 'master' into ISSUE-1197_add_memberof_operator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68ebef9005634f1f5a20ef62562e1b7517e05e85", "author": {"user": {"login": "aklish", "name": "Aaron Klish"}}, "url": "https://github.com/yahoo/elide/commit/68ebef9005634f1f5a20ef62562e1b7517e05e85", "committedDate": "2020-05-07T23:46:33Z", "message": "Update pom.xml\n\nUpdated CVSS limit to 7 to unblock release."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4206477eed3c49b874bc6e332554fd9a5b4739c3", "author": {"user": {"login": "Chandrasekar-Rajasekar", "name": null}}, "url": "https://github.com/yahoo/elide/commit/4206477eed3c49b874bc6e332554fd9a5b4739c3", "committedDate": "2020-05-08T02:41:52Z", "message": "Merge branch 'master' into ISSUE-1197_add_memberof_operator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4dccc0cacfbfcdb57ad73bcc8f79f385db9241f", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/c4dccc0cacfbfcdb57ad73bcc8f79f385db9241f", "committedDate": "2020-05-08T17:48:10Z", "message": "Bug fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b31c5aca2d327cad0eace2fca477d929e5624c36", "author": {"user": {"login": "Chandrasekar-Rajasekar", "name": null}}, "url": "https://github.com/yahoo/elide/commit/b31c5aca2d327cad0eace2fca477d929e5624c36", "committedDate": "2020-05-08T17:54:57Z", "message": "Merge branch 'master' into ISSUE-1197_add_memberof_operator"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NDIxMjUz", "url": "https://github.com/yahoo/elide/pull/1291#pullrequestreview-408421253", "createdAt": "2020-05-08T18:06:04Z", "commit": {"oid": "b31c5aca2d327cad0eace2fca477d929e5624c36"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 913, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}