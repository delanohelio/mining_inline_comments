{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNDIzMzMy", "number": 1131, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNjo1MToyMVrODYPgUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNzoyNDoxMFrODYQKMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NzQ2NDQ5OnYy", "diffSide": "RIGHT", "path": "elide-core/src/main/java/com/yahoo/elide/utils/coerce/CoerceUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNjo1MToyMVrOFd_NBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo1MDoyMVrOFeTmIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk4ODU0OQ==", "bodyText": "Maybe wrap in an immutable map.", "url": "https://github.com/yahoo/elide/pull/1131#discussion_r366988549", "createdAt": "2020-01-15T16:51:21Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/utils/coerce/CoerceUtil.java", "diffHunk": "@@ -78,6 +78,10 @@\n         return (Serde<S, T>) SERDES.getOrDefault(targetType, null);\n     }\n \n+    public static Map<Class<?>, Serde<?, ?>> getSerdes() {\n+        return SERDES;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05def52f25ef4f6a39b5989b22be9319c449bde9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyMjY1Nw==", "bodyText": "Sure", "url": "https://github.com/yahoo/elide/pull/1131#discussion_r367322657", "createdAt": "2020-01-16T09:50:21Z", "author": {"login": "murtuza-ranapur"}, "path": "elide-core/src/main/java/com/yahoo/elide/utils/coerce/CoerceUtil.java", "diffHunk": "@@ -78,6 +78,10 @@\n         return (Serde<S, T>) SERDES.getOrDefault(targetType, null);\n     }\n \n+    public static Map<Class<?>, Serde<?, ?>> getSerdes() {\n+        return SERDES;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk4ODU0OQ=="}, "originalCommit": {"oid": "05def52f25ef4f6a39b5989b22be9319c449bde9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NzUyNjUxOnYy", "diffSide": "RIGHT", "path": "elide-core/src/main/java/com/yahoo/elide/Elide.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNzowOTo1NVrOFd_z8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMzowNjo1MFrOFeYseQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk5ODUxMg==", "bodyText": "I refactored this a bit by:\n\nUsing a different member of ClassScanner (see other comment in this PR).\nLinking the methods together to reduce some duplication between them.\n\n    private void registerCustomSerde() {\n        Set<Class<?>> classes = ClassScanner.getAnnotatedClasses(ElideTypeConverter.class);\n\n        for (Class<?> clazz : classes) {\n            if (!Serde.class.isAssignableFrom(clazz)) {\n                log.warn(\"Skipping Serde registration (not a Serde!): {}\", clazz);\n                continue;\n            }\n            Serde serde;\n            try {\n                serde = (Serde) clazz.newInstance();\n            } catch (InstantiationException | IllegalAccessException e) {\n                String errorMsg = String.format(\"Error while registering custom Serde: %s\", e.getLocalizedMessage());\n                log.error(errorMsg);\n                throw new UnableToAddSerdeException(errorMsg);\n            }\n            ElideTypeConverter converter = clazz.getAnnotation(ElideTypeConverter.class);\n            Class baseType = converter.type();\n            List<Class<?>> allTypes = Arrays.asList(converter.subTypes());\n            allTypes.add(baseType);\n\n            for (Class type : allTypes) {\n                if (!baseType.isAssignableFrom(type)) {\n                    throw new IllegalArgumentException(\"Mention type \" + type\n                            + \" not subtype of \" + baseType);\n                }\n                log.info(\"Registering serde for type : {}\", type);\n                CoerceUtil.register(type, serde);\n                registerCustomSerdeInObjectMapper(type, serde, converter.name());\n            }\n        }\n    }\n    private void registerCustomSerdeInObjectMapper(Class<?> type, Serde serde, String name) {\n        ObjectMapper objectMapper = mapper.getObjectMapper();\n        objectMapper.registerModule(new SimpleModule(name)\n            .addSerializer(type, new JsonSerializer<Object>() {\n                @Override\n                public void serialize(Object obj, JsonGenerator jsonGenerator, SerializerProvider serializerProvider)\n                        throws IOException, JsonProcessingException {\n                    jsonGenerator.writeObject(serde.serialize(obj));\n                }\n            }));\n    }", "url": "https://github.com/yahoo/elide/pull/1131#discussion_r366998512", "createdAt": "2020-01-15T17:09:55Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/Elide.java", "diffHunk": "@@ -77,6 +92,69 @@ public Elide(ElideSettings elideSettings) {\n         elideSettings.getSerdes().forEach((targetType, serde) -> {\n             CoerceUtil.register(targetType, serde);\n         });\n+\n+        registerCustomSerde();\n+        registerCustomSerdeInObjectMapper();\n+    }\n+\n+    private void registerCustomSerde() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05def52f25ef4f6a39b5989b22be9319c449bde9"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQwNjIwMQ==", "bodyText": "Replaced my code with yours, made some minor changes here and there. Thanks! for the lesson on short circuit though :)", "url": "https://github.com/yahoo/elide/pull/1131#discussion_r367406201", "createdAt": "2020-01-16T13:06:50Z", "author": {"login": "murtuza-ranapur"}, "path": "elide-core/src/main/java/com/yahoo/elide/Elide.java", "diffHunk": "@@ -77,6 +92,69 @@ public Elide(ElideSettings elideSettings) {\n         elideSettings.getSerdes().forEach((targetType, serde) -> {\n             CoerceUtil.register(targetType, serde);\n         });\n+\n+        registerCustomSerde();\n+        registerCustomSerdeInObjectMapper();\n+    }\n+\n+    private void registerCustomSerde() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk5ODUxMg=="}, "originalCommit": {"oid": "05def52f25ef4f6a39b5989b22be9319c449bde9"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NzU2OTAyOnYy", "diffSide": "RIGHT", "path": "elide-core/src/main/java/com/yahoo/elide/utils/ClassScanner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNzoyMzoyMVrOFeAObw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo1Mzo1NFrOFeTtIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwNTI5NQ==", "bodyText": "This method leaks ClassInfo.  We don't want ClassGraph concepts to leak into core Elide.  I would just use getAnnotatedClasses instead.", "url": "https://github.com/yahoo/elide/pull/1131#discussion_r367005295", "createdAt": "2020-01-15T17:23:21Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/utils/ClassScanner.java", "diffHunk": "@@ -57,6 +58,18 @@\n         }\n     }\n \n+    /**\n+     * Scans all classes accessible from the context class loader which belong to the current class loader.\n+     *\n+     * @param annotation  Annotation to search\n+     * @return The classeInfos\n+     */\n+    static public List<ClassInfo> getAnnotatedClassInfos(Class<? extends Annotation> annotation) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05def52f25ef4f6a39b5989b22be9319c449bde9"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyNDQ0OA==", "bodyText": "It slipped through. Its not used anywhere. Will simply remove it.", "url": "https://github.com/yahoo/elide/pull/1131#discussion_r367324448", "createdAt": "2020-01-16T09:53:54Z", "author": {"login": "murtuza-ranapur"}, "path": "elide-core/src/main/java/com/yahoo/elide/utils/ClassScanner.java", "diffHunk": "@@ -57,6 +58,18 @@\n         }\n     }\n \n+    /**\n+     * Scans all classes accessible from the context class loader which belong to the current class loader.\n+     *\n+     * @param annotation  Annotation to search\n+     * @return The classeInfos\n+     */\n+    static public List<ClassInfo> getAnnotatedClassInfos(Class<? extends Annotation> annotation) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwNTI5NQ=="}, "originalCommit": {"oid": "05def52f25ef4f6a39b5989b22be9319c449bde9"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NzU3MTY4OnYy", "diffSide": "RIGHT", "path": "elide-core/src/main/java/com/yahoo/elide/utils/coerce/converters/ElideTypeConvertor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNzoyNDoxMFrOFeAQMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMzowODozN1rOFeYvcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwNTc0Nw==", "bodyText": "I think the correct spelling is converter", "url": "https://github.com/yahoo/elide/pull/1131#discussion_r367005747", "createdAt": "2020-01-15T17:24:10Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/utils/coerce/converters/ElideTypeConvertor.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.utils.coerce.converters;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(ElementType.TYPE)\n+public @interface ElideTypeConvertor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05def52f25ef4f6a39b5989b22be9319c449bde9"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQwNjk2MA==", "bodyText": "Noted, will correct the typo.", "url": "https://github.com/yahoo/elide/pull/1131#discussion_r367406960", "createdAt": "2020-01-16T13:08:37Z", "author": {"login": "murtuza-ranapur"}, "path": "elide-core/src/main/java/com/yahoo/elide/utils/coerce/converters/ElideTypeConvertor.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.utils.coerce.converters;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(ElementType.TYPE)\n+public @interface ElideTypeConvertor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwNTc0Nw=="}, "originalCommit": {"oid": "05def52f25ef4f6a39b5989b22be9319c449bde9"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1094, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}