{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4NTM0MDU5", "number": 1655, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNDozOToxNlrOE3QaxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxOToxNDowMFrOE4T3RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2Mzc2MTMyOnYy", "diffSide": "RIGHT", "path": "elide-model-config/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNDozOToxNlrOHwfo2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNDozOToxNlrOHwfo2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYxMjA1Nw==", "bodyText": "Adding all fields here, do we need to somehow ensure its a dimension ?", "url": "https://github.com/yahoo/elide/pull/1655#discussion_r520612057", "createdAt": "2020-11-10T14:39:16Z", "author": {"login": "rishi-aga"}, "path": "elide-model-config/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java", "diffHunk": "@@ -83,11 +85,35 @@\n             String className = cls.getSimpleName();\n             String pkgName = cls.getPackage().getName();\n             map.put(new ModelMapKey(modelName, modelVersion),\n-                            new ModelMapValue(className, prepareImport(pkgName, className)));\n+                    new ModelMapValue(className, prepareImport(pkgName, className), getFieldNames(cls)));\n         });\n \n         return Collections.unmodifiableMap(map);\n     }\n+\n+    private static Set<String> getFieldNames(Class<?> cls) {\n+        Set<String> fieldNames = new HashSet<String>();\n+        getAllFieldNames(cls, fieldNames);\n+        return fieldNames;\n+    }\n+\n+    private static void getAllFieldNames(Class<?> cls, Set<String> fieldNames) {\n+\n+        if (cls == Object.class) {\n+            return;\n+        }\n+\n+        getAllFieldNames(cls.getSuperclass(), fieldNames);\n+\n+        fieldNames.addAll(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf4cc71118d5c15a33b4aba3bde797ba350064fd"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDQyODY0OnYy", "diffSide": "RIGHT", "path": "elide-model-config/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNjo1NzoyOVrOHwmLgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxOTowNzo0N1rOHyJnLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcxOTIzMw==", "bodyText": "This is duplicating logic in EntityDictionary/EntityBinding but not correctly.  The more logic we add here, the more I think we need to leverage a private EntityDictionary rather than duplicate the logic.", "url": "https://github.com/yahoo/elide/pull/1655#discussion_r520719233", "createdAt": "2020-11-10T16:57:29Z", "author": {"login": "aklish"}, "path": "elide-model-config/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java", "diffHunk": "@@ -83,11 +85,35 @@\n             String className = cls.getSimpleName();\n             String pkgName = cls.getPackage().getName();\n             map.put(new ModelMapKey(modelName, modelVersion),\n-                            new ModelMapValue(className, prepareImport(pkgName, className)));\n+                    new ModelMapValue(className, prepareImport(pkgName, className), getFieldNames(cls)));\n         });\n \n         return Collections.unmodifiableMap(map);\n     }\n+\n+    private static Set<String> getFieldNames(Class<?> cls) {\n+        Set<String> fieldNames = new HashSet<String>();\n+        getAllFieldNames(cls, fieldNames);\n+        return fieldNames;\n+    }\n+\n+    private static void getAllFieldNames(Class<?> cls, Set<String> fieldNames) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf4cc71118d5c15a33b4aba3bde797ba350064fd"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM0ODMzMg==", "bodyText": "created private EntityDictionary.", "url": "https://github.com/yahoo/elide/pull/1655#discussion_r522348332", "createdAt": "2020-11-12T19:07:47Z", "author": {"login": "rishi-aga"}, "path": "elide-model-config/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java", "diffHunk": "@@ -83,11 +85,35 @@\n             String className = cls.getSimpleName();\n             String pkgName = cls.getPackage().getName();\n             map.put(new ModelMapKey(modelName, modelVersion),\n-                            new ModelMapValue(className, prepareImport(pkgName, className)));\n+                    new ModelMapValue(className, prepareImport(pkgName, className), getFieldNames(cls)));\n         });\n \n         return Collections.unmodifiableMap(map);\n     }\n+\n+    private static Set<String> getFieldNames(Class<?> cls) {\n+        Set<String> fieldNames = new HashSet<String>();\n+        getAllFieldNames(cls, fieldNames);\n+        return fieldNames;\n+    }\n+\n+    private static void getAllFieldNames(Class<?> cls, Set<String> fieldNames) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcxOTIzMw=="}, "originalCommit": {"oid": "bf4cc71118d5c15a33b4aba3bde797ba350064fd"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDQzMTAzOnYy", "diffSide": "RIGHT", "path": "elide-model-config/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNjo1ODowMlrOHwmNFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNjo1ODowMlrOHwmNFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcxOTYzOQ==", "bodyText": "Elide \"fields\" can either be methods or attributes.  The logic is a bit complicated and we don't want to duplicate it.", "url": "https://github.com/yahoo/elide/pull/1655#discussion_r520719639", "createdAt": "2020-11-10T16:58:02Z", "author": {"login": "aklish"}, "path": "elide-model-config/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java", "diffHunk": "@@ -83,11 +85,35 @@\n             String className = cls.getSimpleName();\n             String pkgName = cls.getPackage().getName();\n             map.put(new ModelMapKey(modelName, modelVersion),\n-                            new ModelMapValue(className, prepareImport(pkgName, className)));\n+                    new ModelMapValue(className, prepareImport(pkgName, className), getFieldNames(cls)));\n         });\n \n         return Collections.unmodifiableMap(map);\n     }\n+\n+    private static Set<String> getFieldNames(Class<?> cls) {\n+        Set<String> fieldNames = new HashSet<String>();\n+        getAllFieldNames(cls, fieldNames);\n+        return fieldNames;\n+    }\n+\n+    private static void getAllFieldNames(Class<?> cls, Set<String> fieldNames) {\n+\n+        if (cls == Object.class) {\n+            return;\n+        }\n+\n+        getAllFieldNames(cls.getSuperclass(), fieldNames);\n+\n+        fieldNames.addAll(\n+            Arrays.stream(cls.getDeclaredFields())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf4cc71118d5c15a33b4aba3bde797ba350064fd"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NDc2NDkyOnYy", "diffSide": "RIGHT", "path": "elide-model-config/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxOTowNDoxN1rOHyJd7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNTo0NDo1NVrOH0EvHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM0NTk2NQ==", "bodyText": "Is there a reason these functions need to be static?", "url": "https://github.com/yahoo/elide/pull/1655#discussion_r522345965", "createdAt": "2020-11-12T19:04:17Z", "author": {"login": "aklish"}, "path": "elide-model-config/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java", "diffHunk": "@@ -271,4 +277,16 @@ public static String getStaticModelClassImport(String modelName, String modelVer\n         ModelMapValue value = STATIC_MODEL_DETAILS.get(new ModelMapKey(modelName, modelVersion));\n         return value != null ? value.getClassImport() : defaultValue;\n     }\n+\n+    /**\n+     * Checks if field exists in referenced static model.\n+     * @param modelName model name.\n+     * @param modelVersion model version.\n+     * @param fieldName field name to check.\n+     * @return true if model has the field defined else false\n+     */\n+    public static boolean staticModelContainsField(String modelName, String modelVersion, String fieldName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c998aac9286fdea8d029ada15071976989fd9af9"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2NTU5Nw==", "bodyText": "defined as static so that it can be used for both DynamicConfigValidator and HandlebarsHydrator easily.", "url": "https://github.com/yahoo/elide/pull/1655#discussion_r524365597", "createdAt": "2020-11-16T15:44:55Z", "author": {"login": "rishi-aga"}, "path": "elide-model-config/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java", "diffHunk": "@@ -271,4 +277,16 @@ public static String getStaticModelClassImport(String modelName, String modelVer\n         ModelMapValue value = STATIC_MODEL_DETAILS.get(new ModelMapKey(modelName, modelVersion));\n         return value != null ? value.getClassImport() : defaultValue;\n     }\n+\n+    /**\n+     * Checks if field exists in referenced static model.\n+     * @param modelName model name.\n+     * @param modelVersion model version.\n+     * @param fieldName field name to check.\n+     * @return true if model has the field defined else false\n+     */\n+    public static boolean staticModelContainsField(String modelName, String modelVersion, String fieldName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM0NTk2NQ=="}, "originalCommit": {"oid": "c998aac9286fdea8d029ada15071976989fd9af9"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NDgwODU3OnYy", "diffSide": "RIGHT", "path": "elide-model-config/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxOToxMzowMlrOHyJ3AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNTo0Mjo0MlrOH0EoBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM1MjM4NQ==", "bodyText": "I wonder if it would be clearer if some of these methods were moved to ElideTableConfig.", "url": "https://github.com/yahoo/elide/pull/1655#discussion_r522352385", "createdAt": "2020-11-12T19:13:02Z", "author": {"login": "aklish"}, "path": "elide-model-config/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "diffHunk": "@@ -343,16 +337,77 @@ private static void validateConfigForMissingVariables(String config, Map<String,\n     private static boolean validateTableConfig(ElideTableConfig elideTableConfig) {\n         for (Table table : elideTableConfig.getTables()) {\n             validateSql(table.getSql());\n-            table.getDimensions().forEach(dim -> validateSql(dim.getDefinition()));\n+            table.getDimensions().forEach(dim -> {\n+                validateSql(dim.getDefinition());\n+                validateTableSource(elideTableConfig, dim.getTableSource());\n+            });\n             table.getMeasures().forEach(measure -> validateSql(measure.getDefinition()));\n             table.getJoins().forEach(join -> validateJoin(join, elideTableConfig));\n         }\n+\n         return true;\n     }\n \n+    private static void validateTableSource(ElideTableConfig elideTableConfig, String tableSource) {\n+        if (isNullOrEmpty(tableSource)) {\n+            return; // Nothing to validate\n+        }\n+\n+        String[] split = tableSource.split(\"\\\\.\");\n+        if (split.length != 2) {\n+            throw new IllegalStateException(\"Invalid tableSource: \" + tableSource\n+                            + \". tableSource must be in format: modelName.columnName\");\n+        }\n+        String modelName = split[0];\n+        String fieldName = split[1];\n+\n+        if (!staticModelContainsField(modelName, NO_VERSION, fieldName)\n+                        && !dynamicModelContainsField(elideTableConfig, modelName, fieldName)) {\n+            throw new IllegalStateException(\"Invalid tableSource : \" + tableSource + \" . Either model : \" + modelName\n+                            + \" is undefined or field : \" + fieldName + \" is undefined for this model.\");\n+        }\n+    }\n+\n+    private static boolean dynamicModelContainsField(ElideTableConfig elideTableConfig, String modelName,\n+                    String fieldName) {\n+        if (getNames(elideTableConfig.getTables()).contains(modelName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a110a796620ea22fa5a51c916cf10dcf980b172"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2Mzc4MQ==", "bodyText": "updated.", "url": "https://github.com/yahoo/elide/pull/1655#discussion_r524363781", "createdAt": "2020-11-16T15:42:42Z", "author": {"login": "rishi-aga"}, "path": "elide-model-config/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "diffHunk": "@@ -343,16 +337,77 @@ private static void validateConfigForMissingVariables(String config, Map<String,\n     private static boolean validateTableConfig(ElideTableConfig elideTableConfig) {\n         for (Table table : elideTableConfig.getTables()) {\n             validateSql(table.getSql());\n-            table.getDimensions().forEach(dim -> validateSql(dim.getDefinition()));\n+            table.getDimensions().forEach(dim -> {\n+                validateSql(dim.getDefinition());\n+                validateTableSource(elideTableConfig, dim.getTableSource());\n+            });\n             table.getMeasures().forEach(measure -> validateSql(measure.getDefinition()));\n             table.getJoins().forEach(join -> validateJoin(join, elideTableConfig));\n         }\n+\n         return true;\n     }\n \n+    private static void validateTableSource(ElideTableConfig elideTableConfig, String tableSource) {\n+        if (isNullOrEmpty(tableSource)) {\n+            return; // Nothing to validate\n+        }\n+\n+        String[] split = tableSource.split(\"\\\\.\");\n+        if (split.length != 2) {\n+            throw new IllegalStateException(\"Invalid tableSource: \" + tableSource\n+                            + \". tableSource must be in format: modelName.columnName\");\n+        }\n+        String modelName = split[0];\n+        String fieldName = split[1];\n+\n+        if (!staticModelContainsField(modelName, NO_VERSION, fieldName)\n+                        && !dynamicModelContainsField(elideTableConfig, modelName, fieldName)) {\n+            throw new IllegalStateException(\"Invalid tableSource : \" + tableSource + \" . Either model : \" + modelName\n+                            + \" is undefined or field : \" + fieldName + \" is undefined for this model.\");\n+        }\n+    }\n+\n+    private static boolean dynamicModelContainsField(ElideTableConfig elideTableConfig, String modelName,\n+                    String fieldName) {\n+        if (getNames(elideTableConfig.getTables()).contains(modelName)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM1MjM4NQ=="}, "originalCommit": {"oid": "6a110a796620ea22fa5a51c916cf10dcf980b172"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NDgxMDM3OnYy", "diffSide": "RIGHT", "path": "elide-model-config/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxOToxMzozNFrOHyJ4JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNTo0MjoyNVrOH0EnMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM1MjY3Ng==", "bodyText": "We should break these errors out to help the developer.", "url": "https://github.com/yahoo/elide/pull/1655#discussion_r522352676", "createdAt": "2020-11-12T19:13:34Z", "author": {"login": "aklish"}, "path": "elide-model-config/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "diffHunk": "@@ -343,16 +337,77 @@ private static void validateConfigForMissingVariables(String config, Map<String,\n     private static boolean validateTableConfig(ElideTableConfig elideTableConfig) {\n         for (Table table : elideTableConfig.getTables()) {\n             validateSql(table.getSql());\n-            table.getDimensions().forEach(dim -> validateSql(dim.getDefinition()));\n+            table.getDimensions().forEach(dim -> {\n+                validateSql(dim.getDefinition());\n+                validateTableSource(elideTableConfig, dim.getTableSource());\n+            });\n             table.getMeasures().forEach(measure -> validateSql(measure.getDefinition()));\n             table.getJoins().forEach(join -> validateJoin(join, elideTableConfig));\n         }\n+\n         return true;\n     }\n \n+    private static void validateTableSource(ElideTableConfig elideTableConfig, String tableSource) {\n+        if (isNullOrEmpty(tableSource)) {\n+            return; // Nothing to validate\n+        }\n+\n+        String[] split = tableSource.split(\"\\\\.\");\n+        if (split.length != 2) {\n+            throw new IllegalStateException(\"Invalid tableSource: \" + tableSource\n+                            + \". tableSource must be in format: modelName.columnName\");\n+        }\n+        String modelName = split[0];\n+        String fieldName = split[1];\n+\n+        if (!staticModelContainsField(modelName, NO_VERSION, fieldName)\n+                        && !dynamicModelContainsField(elideTableConfig, modelName, fieldName)) {\n+            throw new IllegalStateException(\"Invalid tableSource : \" + tableSource + \" . Either model : \" + modelName\n+                            + \" is undefined or field : \" + fieldName + \" is undefined for this model.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a110a796620ea22fa5a51c916cf10dcf980b172"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2MzU3MQ==", "bodyText": "sure.", "url": "https://github.com/yahoo/elide/pull/1655#discussion_r524363571", "createdAt": "2020-11-16T15:42:25Z", "author": {"login": "rishi-aga"}, "path": "elide-model-config/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "diffHunk": "@@ -343,16 +337,77 @@ private static void validateConfigForMissingVariables(String config, Map<String,\n     private static boolean validateTableConfig(ElideTableConfig elideTableConfig) {\n         for (Table table : elideTableConfig.getTables()) {\n             validateSql(table.getSql());\n-            table.getDimensions().forEach(dim -> validateSql(dim.getDefinition()));\n+            table.getDimensions().forEach(dim -> {\n+                validateSql(dim.getDefinition());\n+                validateTableSource(elideTableConfig, dim.getTableSource());\n+            });\n             table.getMeasures().forEach(measure -> validateSql(measure.getDefinition()));\n             table.getJoins().forEach(join -> validateJoin(join, elideTableConfig));\n         }\n+\n         return true;\n     }\n \n+    private static void validateTableSource(ElideTableConfig elideTableConfig, String tableSource) {\n+        if (isNullOrEmpty(tableSource)) {\n+            return; // Nothing to validate\n+        }\n+\n+        String[] split = tableSource.split(\"\\\\.\");\n+        if (split.length != 2) {\n+            throw new IllegalStateException(\"Invalid tableSource: \" + tableSource\n+                            + \". tableSource must be in format: modelName.columnName\");\n+        }\n+        String modelName = split[0];\n+        String fieldName = split[1];\n+\n+        if (!staticModelContainsField(modelName, NO_VERSION, fieldName)\n+                        && !dynamicModelContainsField(elideTableConfig, modelName, fieldName)) {\n+            throw new IllegalStateException(\"Invalid tableSource : \" + tableSource + \" . Either model : \" + modelName\n+                            + \" is undefined or field : \" + fieldName + \" is undefined for this model.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM1MjY3Ng=="}, "originalCommit": {"oid": "6a110a796620ea22fa5a51c916cf10dcf980b172"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NDgxMTU3OnYy", "diffSide": "RIGHT", "path": "elide-model-config/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxOToxNDowMFrOHyJ4-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNTo0MjozMVrOH0Endg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM1Mjg5MQ==", "bodyText": "Seems like another function that could be moved to ElideTableConfig?", "url": "https://github.com/yahoo/elide/pull/1655#discussion_r522352891", "createdAt": "2020-11-12T19:14:00Z", "author": {"login": "aklish"}, "path": "elide-model-config/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "diffHunk": "@@ -185,21 +180,20 @@ private void flagDimensionsToOverride(Table table, Set<Table> parentTables) {\n         Table current = table;\n \n         while (current != null && current.getExtend() != null && !current.getExtend().equals(\"\")) {\n-            Table parent = getTableByName(current.getExtend().trim());\n+            Table parent = getTableByName(this.elideTableConfig, current.getExtend().trim());\n             parentTables.add(parent);\n             current = parent;\n         }\n         return parentTables;\n     }\n \n-    private Table getTableByName(String tableName) {\n-        Table tableByName = this.elideTableConfig.getTables().stream().filter(\n-                table -> table.getName().equals(tableName)).findFirst().orElse(null);\n-\n-        if (tableByName != null) {\n-            return tableByName;\n-        }\n-        throw new IllegalStateException(\"Table \" + tableName + \" is not defined in Dynamic Config.\");\n+    private static Table getTableByName(ElideTableConfig elideTableConfig, String tableName) {\n+        return elideTableConfig.getTables()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a110a796620ea22fa5a51c916cf10dcf980b172"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2MzYzOA==", "bodyText": "updated.", "url": "https://github.com/yahoo/elide/pull/1655#discussion_r524363638", "createdAt": "2020-11-16T15:42:31Z", "author": {"login": "rishi-aga"}, "path": "elide-model-config/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "diffHunk": "@@ -185,21 +180,20 @@ private void flagDimensionsToOverride(Table table, Set<Table> parentTables) {\n         Table current = table;\n \n         while (current != null && current.getExtend() != null && !current.getExtend().equals(\"\")) {\n-            Table parent = getTableByName(current.getExtend().trim());\n+            Table parent = getTableByName(this.elideTableConfig, current.getExtend().trim());\n             parentTables.add(parent);\n             current = parent;\n         }\n         return parentTables;\n     }\n \n-    private Table getTableByName(String tableName) {\n-        Table tableByName = this.elideTableConfig.getTables().stream().filter(\n-                table -> table.getName().equals(tableName)).findFirst().orElse(null);\n-\n-        if (tableByName != null) {\n-            return tableByName;\n-        }\n-        throw new IllegalStateException(\"Table \" + tableName + \" is not defined in Dynamic Config.\");\n+    private static Table getTableByName(ElideTableConfig elideTableConfig, String tableName) {\n+        return elideTableConfig.getTables()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM1Mjg5MQ=="}, "originalCommit": {"oid": "6a110a796620ea22fa5a51c916cf10dcf980b172"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 922, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}