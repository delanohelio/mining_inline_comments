{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3NDMyMzIx", "number": 1693, "title": "Optionally compile hjson configs while running CLI", "bodyText": "Validate readAccess attribute provided for dynamic models.\nOptionally compile hjson configs while running CLI.\nHow Has This Been Tested?\nExisting tests pass.\nLicense\nI confirm that this contribution is made under an Apache 2.0 license and that I have the authority necessary to make this contribution on behalf of its copyright owner.", "createdAt": "2020-11-25T13:06:00Z", "url": "https://github.com/yahoo/elide/pull/1693", "merged": true, "mergeCommit": {"oid": "ae1f63945f0374cc5f74178ceee79801d852d38b"}, "closed": true, "closedAt": "2020-12-07T16:51:13Z", "author": {"login": "rishi-aga"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdf-P1lABqjQwMzgwNDczMjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdj4dAWgFqTU0NjMzODczNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "57d362ff236135bbbaebafce9497a7ae908cbf9d", "author": {"user": {"login": "rishi-aga", "name": null}}, "url": "https://github.com/yahoo/elide/commit/57d362ff236135bbbaebafce9497a7ae908cbf9d", "committedDate": "2020-11-25T13:03:41Z", "message": "Optionally compile hjson configs wwhile running CLI"}, "afterCommit": {"oid": "e4f6b910b6f5281824508fd97deff12421e30dfa", "author": {"user": {"login": "rishi-aga", "name": null}}, "url": "https://github.com/yahoo/elide/commit/e4f6b910b6f5281824508fd97deff12421e30dfa", "committedDate": "2020-11-25T13:20:08Z", "message": "Optionally compile hjson configs wwhile running CLI"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e4f6b910b6f5281824508fd97deff12421e30dfa", "author": {"user": {"login": "rishi-aga", "name": null}}, "url": "https://github.com/yahoo/elide/commit/e4f6b910b6f5281824508fd97deff12421e30dfa", "committedDate": "2020-11-25T13:20:08Z", "message": "Optionally compile hjson configs wwhile running CLI"}, "afterCommit": {"oid": "7bb999b8d74b073a4539ed4f8c470fde485079cc", "author": {"user": {"login": "rishi-aga", "name": null}}, "url": "https://github.com/yahoo/elide/commit/7bb999b8d74b073a4539ed4f8c470fde485079cc", "committedDate": "2020-11-25T13:38:32Z", "message": "Optionally compile hjson configs wwhile running CLI"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NTE1MzY0", "url": "https://github.com/yahoo/elide/pull/1693#pullrequestreview-538515364", "createdAt": "2020-11-25T13:54:43Z", "commit": {"oid": "7bb999b8d74b073a4539ed4f8c470fde485079cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMzo1NDo0M1rOH50dMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMzo1NDo0M1rOH50dMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM5MDMyMw==", "bodyText": "added getClassName method for this at end.", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r530390323", "createdAt": "2020-11-25T13:54:43Z", "author": {"login": "rishi-aga"}, "path": "elide-model-config/src/main/java/com/yahoo/elide/modelconfig/compile/ElideDynamicEntityCompiler.java", "diffHunk": "@@ -5,89 +5,30 @@\n  */\n package com.yahoo.elide.modelconfig.compile;\n \n-import com.yahoo.elide.annotation.Include;\n-import com.yahoo.elide.core.dictionary.EntityDictionary;\n-import com.yahoo.elide.core.utils.ClassScanner;\n import com.yahoo.elide.modelconfig.DBPasswordExtractor;\n import com.yahoo.elide.modelconfig.DynamicConfigHelpers;\n import com.yahoo.elide.modelconfig.model.DBConfig;\n-import com.yahoo.elide.modelconfig.model.ElideDBConfig;\n-import com.yahoo.elide.modelconfig.model.ElideSecurityConfig;\n-import com.yahoo.elide.modelconfig.model.ElideTableConfig;\n-import com.yahoo.elide.modelconfig.parser.handlebars.HandlebarsHydrator;\n import com.yahoo.elide.modelconfig.validator.DynamicConfigValidator;\n-import com.zaxxer.hikari.HikariConfig;\n-import com.zaxxer.hikari.HikariDataSource;\n import org.apache.commons.lang3.StringUtils;\n-import lombok.Data;\n import lombok.Getter;\n-import lombok.extern.slf4j.Slf4j;\n \n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n-import java.util.Map.Entry;\n import java.util.Set;\n import java.util.stream.Collectors;\n-import javax.sql.DataSource;\n \n /**\n  * Compiles dynamic model pojos generated from hjson files.\n  */\n-@Slf4j\n public class ElideDynamicEntityCompiler {\n \n-    public static ArrayList<String> classNames = new ArrayList<String>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bb999b8d74b073a4539ed4f8c470fde485079cc"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NTE2ODM4", "url": "https://github.com/yahoo/elide/pull/1693#pullrequestreview-538516838", "createdAt": "2020-11-25T13:56:20Z", "commit": {"oid": "7bb999b8d74b073a4539ed4f8c470fde485079cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMzo1NjoyMFrOH50hnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMzo1NjoyMFrOH50hnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM5MTQ1NQ==", "bodyText": "unused method, so removed.", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r530391455", "createdAt": "2020-11-25T13:56:20Z", "author": {"login": "rishi-aga"}, "path": "elide-model-config/src/main/java/com/yahoo/elide/modelconfig/compile/ElideDynamicEntityCompiler.java", "diffHunk": "@@ -189,15 +72,6 @@ public ClassLoader getClassLoader() {\n         return compiler.getClassloader();\n     }\n \n-    /**\n-     * Get the class from compiled class lists.\n-     * @param name name of the class\n-     * @return Class\n-     */\n-    public Class<?> getCompiled(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bb999b8d74b073a4539ed4f8c470fde485079cc"}, "originalPosition": 186}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4Njk1MjM5", "url": "https://github.com/yahoo/elide/pull/1693#pullrequestreview-538695239", "createdAt": "2020-11-25T17:00:08Z", "commit": {"oid": "7bb999b8d74b073a4539ed4f8c470fde485079cc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzowMDowOVrOH58eqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzowNjo1NVrOH58usA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyMTc2OA==", "bodyText": "What is the use case for this constructor?", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r530521768", "createdAt": "2020-11-25T17:00:09Z", "author": {"login": "aklish"}, "path": "elide-model-config/src/main/java/com/yahoo/elide/modelconfig/parser/handlebars/HandlebarsHydrator.java", "diffHunk": "@@ -36,6 +37,23 @@\n         {\"\\n\", \" \" }\n     });\n \n+    private final Handlebars handlebars;\n+    private final HandlebarsHelper helper;\n+\n+    public HandlebarsHydrator(StaticModelsDetails staticModelDetails) {\n+        TemplateLoader loader = new ClassPathTemplateLoader(\"/templates\");\n+        this.helper = new HandlebarsHelper(staticModelDetails);\n+        this.handlebars = new Handlebars(loader).with(MY_ESCAPING_STRATEGY);\n+        this.handlebars.registerHelpers(ConditionalHelpers.class);\n+        this.handlebars.registerHelper(AssignHelper.NAME, AssignHelper.INSTANCE);\n+        this.handlebars.registerHelpers(helper);\n+    }\n+\n+    public HandlebarsHydrator() {\n+        this.handlebars = new Handlebars();\n+        this.helper = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bb999b8d74b073a4539ed4f8c470fde485079cc"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyMjM5OQ==", "bodyText": "It looks like this is not accessed outside this class.", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r530522399", "createdAt": "2020-11-25T17:01:07Z", "author": {"login": "aklish"}, "path": "elide-model-config/src/main/java/com/yahoo/elide/modelconfig/parser/handlebars/HandlebarsHelper.java", "diffHunk": "@@ -24,7 +25,7 @@\n  */\n public class HandlebarsHelper {\n \n-    private static final String EMPTY_STRING = \"\";\n+    public static final String EMPTY_STRING = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bb999b8d74b073a4539ed4f8c470fde485079cc"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyNTUxNA==", "bodyText": "This looks confusing.  Why do we expect this to fail since the directory is valid?", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r530525514", "createdAt": "2020-11-25T17:06:17Z", "author": {"login": "aklish"}, "path": "elide-model-config/src/test/java/com/yahoo/elide/modelconfig/validator/DynamicConfigValidatorTest.java", "diffHunk": "@@ -91,18 +91,60 @@ public void testMissingArgumentValue() throws Exception {\n     public void testMissingConfigDir() throws Exception {\n         String error = tapSystemErr(() -> {\n             int exitStatus = catchSystemExit(() ->\n-                    DynamicConfigValidator.main(new String[] { \"--configDir\", \"src/test/resources/validator/missing\" }));\n+                    DynamicConfigValidator.main(new String[] { \"--configDir\", \"src/test/resources/validator/missing\", \"--nocompile\" }));\n             assertEquals(2, exitStatus);\n         });\n \n         assertTrue(error.contains(\"config path does not exist\"));\n     }\n \n+    @Test\n+    public void testValidConfigDir() throws Exception {\n+        tapSystemErr(() -> {\n+            int exitStatus = catchSystemExit(() ->\n+                    DynamicConfigValidator.main(new String[] { \"--configDir\", \"src/test/resources/validator/valid\", \"--nocompile\" }));\n+            assertEquals(0, exitStatus);\n+        });\n+\n+        tapSystemErr(() -> {\n+            int exitStatus = catchSystemExit(() ->\n+                    DynamicConfigValidator.main(new String[] { \"--configDir\", \"src/test/resources/validator/valid\", \"--nomodelcompile\", \"--nodbcompile\" }));\n+            assertEquals(0, exitStatus);\n+        });\n+    }\n+\n+    @Test\n+    public void testValidConfigDirWithCompile() throws Exception {\n+        String error = tapSystemErr(() -> {\n+            int exitStatus = catchSystemExit(() ->\n+                    DynamicConfigValidator.main(new String[] { \"--configDir\", \"src/test/resources/validator/valid\" }));\n+            assertEquals(2, exitStatus);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bb999b8d74b073a4539ed4f8c470fde485079cc"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyNTg3Mg==", "bodyText": "What is the use case for compiling models but not compiling db configs?", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r530525872", "createdAt": "2020-11-25T17:06:55Z", "author": {"login": "aklish"}, "path": "elide-model-config/src/main/java/com/yahoo/elide/modelconfig/validator/DynamicConfigValidator.java", "diffHunk": "@@ -122,13 +158,36 @@ public static void main(String[] args) {\n \n             DynamicConfigValidator dynamicConfigValidator = new DynamicConfigValidator(configDir);\n             dynamicConfigValidator.readAndValidateConfigs();\n+            System.out.println(\"Configs Validation Passed!\");\n+\n+            if (cli.hasOption(\"nocompile\")) {\n+                System.out.println(\"Skipped compilation for both Model and DB configs\");\n+                System.exit(0);\n+            }\n+\n+            if (cli.hasOption(\"nomodelcompile\")) {\n+                System.out.println(\"Skipped compilation for Model configs\");\n+            } else {\n+                System.out.println(\"Compiling Model configs (Use '--nomodelcompile' to skip this step).\");\n+                dynamicConfigValidator.hydrateAndCompileModelConfigs();\n+                System.out.println(\"Model Configs Compilation Passed!\");\n+            }\n+\n+            if (cli.hasOption(\"nodbcompile\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bb999b8d74b073a4539ed4f8c470fde485079cc"}, "originalPosition": 127}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8ad68ce2d7cd33c0cb611f3ef2f0988fd7a27c7a", "author": {"user": {"login": "rishi-aga", "name": null}}, "url": "https://github.com/yahoo/elide/commit/8ad68ce2d7cd33c0cb611f3ef2f0988fd7a27c7a", "committedDate": "2020-11-30T16:02:11Z", "message": "Refactor creation of dynamic datasource."}, "afterCommit": {"oid": "ae44c230ceca6197d2b5355684fce7f719758717", "author": {"user": {"login": "rishi-aga", "name": null}}, "url": "https://github.com/yahoo/elide/commit/ae44c230ceca6197d2b5355684fce7f719758717", "committedDate": "2020-11-30T16:58:43Z", "message": "Refactor creation of dynamic datasource."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ae44c230ceca6197d2b5355684fce7f719758717", "author": {"user": {"login": "rishi-aga", "name": null}}, "url": "https://github.com/yahoo/elide/commit/ae44c230ceca6197d2b5355684fce7f719758717", "committedDate": "2020-11-30T16:58:43Z", "message": "Refactor creation of dynamic datasource."}, "afterCommit": {"oid": "bde9b9b3fd8840f67f17a808726249d6cb9d3160", "author": {"user": {"login": "rishi-aga", "name": null}}, "url": "https://github.com/yahoo/elide/commit/bde9b9b3fd8840f67f17a808726249d6cb9d3160", "committedDate": "2020-11-30T17:04:20Z", "message": "Refactor creation of dynamic datasource."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxMTE1NDEy", "url": "https://github.com/yahoo/elide/pull/1693#pullrequestreview-541115412", "createdAt": "2020-11-30T17:07:57Z", "commit": {"oid": "bde9b9b3fd8840f67f17a808726249d6cb9d3160"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzowNzo1N1rOH8E6TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzowNzo1N1rOH8E6TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc1NzA2OQ==", "bodyText": "Hikari doesn't support DATABASE_TO_LOWER property. Earlier if block was not getting executed as we were trying to compare class name with dialect type.", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r532757069", "createdAt": "2020-11-30T17:07:57Z", "author": {"login": "rishi-aga"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java", "diffHunk": "@@ -385,11 +385,11 @@ public static void init(String sqlDialect) {\n         playerStatsTable = (SQLTable) metaDataStore.getTable(\"playerStats\", NO_VERSION);\n     }\n \n-    private static String getCompatabilityMode(String dialect) {\n-        if (dialect.equals(SQLDialectFactory.getMySQLDialect().getDialectType())) {\n-            return \"MODE=MySQL;DATABASE_TO_LOWER=TRUE\";\n-        } else if (dialect.equals(SQLDialectFactory.getPostgresDialect().getDialectType())) {\n-            return \"MODE=PostgreSQL;DATABASE_TO_LOWER=TRUE\";\n+    private static String getCompatabilityMode(String dialectType) {\n+        if (dialectType.equals(SQLDialectFactory.getMySQLDialect().getDialectType())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bde9b9b3fd8840f67f17a808726249d6cb9d3160"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxMTIyMDQ4", "url": "https://github.com/yahoo/elide/pull/1693#pullrequestreview-541122048", "createdAt": "2020-11-30T17:15:22Z", "commit": {"oid": "bde9b9b3fd8840f67f17a808726249d6cb9d3160"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzoxNToyMlrOH8FOkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzoxNToyMlrOH8FOkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc2MjI1OA==", "bodyText": "test cases were getting stuck if there is an error so updated these.", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r532762258", "createdAt": "2020-11-30T17:15:22Z", "author": {"login": "rishi-aga"}, "path": "elide-model-config/src/test/java/com/yahoo/elide/modelconfig/validator/DynamicConfigValidatorTest.java", "diffHunk": "@@ -37,9 +36,18 @@ public void testValidInheritanceConfig() throws Exception {\n     }\n \n     @Test\n-    public void testHelpArgumnents() {\n-        assertDoesNotThrow(() -> DynamicConfigValidator.main(new String[] { \"-h\" }));\n-        assertDoesNotThrow(() -> DynamicConfigValidator.main(new String[] { \"--help\" }));\n+    public void testHelpArgumnents() throws Exception {\n+        tapSystemErr(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bde9b9b3fd8840f67f17a808726249d6cb9d3160"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMTI5NjAx", "url": "https://github.com/yahoo/elide/pull/1693#pullrequestreview-542129601", "createdAt": "2020-12-01T17:23:30Z", "commit": {"oid": "3b170b997370842e31e76f527bed668f3171e811"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNzoyMzozMFrOH83q7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNzoyODoxM1rOH833RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU4ODcxNw==", "bodyText": "Check out PermissionExpressionVisitor.\nWe should create a visitor to extract the check strings from the expression ParseTree rather than trying to manipulate the tree directly as we do here.", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r533588717", "createdAt": "2020-12-01T17:23:30Z", "author": {"login": "aklish"}, "path": "elide-model-config/src/main/java/com/yahoo/elide/modelconfig/validator/DynamicConfigValidator.java", "diffHunk": "@@ -371,23 +455,73 @@ private static boolean validateTableConfig(ElideTableConfig elideTableConfig) {\n             table.getDimensions().forEach(dim -> {\n                 validateFieldNameUniqueness(tableFields, dim.getName(), table.getName());\n                 validateSql(dim.getDefinition());\n-                validateTableSource(elideTableConfig, dim.getTableSource());\n+                validateTableSource(dim.getTableSource());\n+                extractChecksFromExpr(dim.getReadAccess(), extractedChecks);\n             });\n \n             table.getMeasures().forEach(measure -> {\n                 validateFieldNameUniqueness(tableFields, measure.getName(), table.getName());\n                 validateSql(measure.getDefinition());\n+                extractChecksFromExpr(measure.getReadAccess(), extractedChecks);\n             });\n \n             table.getJoins().forEach(join -> {\n                 validateFieldNameUniqueness(tableFields, join.getName(), table.getName());\n-                validateJoin(join, elideTableConfig);\n+                validateJoin(join);\n             });\n+\n+            extractChecksFromExpr(table.getReadAccess(), extractedChecks);\n+            validateChecks(extractedChecks);\n         }\n \n         return true;\n     }\n \n+    private void validateChecks(Set<String> checks) {\n+\n+        if (checks.isEmpty()) {\n+            return; // Nothing to validate\n+        }\n+\n+        Set<String> staticChecks = dictionary.getCheckMappings().keySet();\n+\n+        List<String> undefinedChecks = checks\n+                        .stream()\n+                        .filter(check -> !(elideSecurityConfig.hasCheckDefined(check) || staticChecks.contains(check)))\n+                        .collect(Collectors.toList());\n+\n+        if (!undefinedChecks.isEmpty()) {\n+            throw new IllegalStateException(\"Found undefined security checks: \" + undefinedChecks);\n+        }\n+    }\n+\n+    private static void extractChecksFromExpr(String readAccess, Set<String> extractedChecks) {\n+\n+        if (!isNullOrEmpty(readAccess)) {\n+            ParseTree root = EntityPermissions.parseExpression(readAccess);\n+            extractChecksFromTree(root, extractedChecks);\n+        }\n+    }\n+\n+    private static void extractChecksFromTree(ParseTree root, Set<String> extractedChecks) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b170b997370842e31e76f527bed668f3171e811"}, "originalPosition": 275}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU5MTg3Ng==", "bodyText": "I\"m not sure how friendly this is to expect HJSON configuration to type in \"Principal is\" for each of the defined roles.  We should discuss this.", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r533591876", "createdAt": "2020-12-01T17:28:13Z", "author": {"login": "aklish"}, "path": "elide-model-config/src/test/resources/validator/valid/models/tables/player_stats.hjson", "diffHunk": "@@ -14,7 +14,7 @@\n       category: Table Category\n       cardinality : lARge\n       hidden : false\n-      readAccess : A user is admin or is a player in the game\n+      readAccess : (Principal is user AND Principal is member) OR (Principal is admin AND NOT Principal is guest)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b170b997370842e31e76f527bed668f3171e811"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzMTg5NjQ5", "url": "https://github.com/yahoo/elide/pull/1693#pullrequestreview-543189649", "createdAt": "2020-12-02T19:57:54Z", "commit": {"oid": "a17e09ee3b2122c5261e0efd8619e18aff2a1d7c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxOTo1Nzo1NFrOH9r05Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxOTo1Nzo1NFrOH9r05Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ0MzIzNw==", "bodyText": "Replacing . with $ sign so that dynamic compiler doesn't complain about file and class name.", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r534443237", "createdAt": "2020-12-02T19:57:54Z", "author": {"login": "rishi-aga"}, "path": "elide-model-config/src/main/java/com/yahoo/elide/modelconfig/parser/handlebars/HandlebarsHelper.java", "diffHunk": "@@ -98,12 +84,17 @@ public String toUpperCase(Object obj) {\n     }\n \n     /**\n-     * Transform string to upper case and replace space with underscore.\n-     * @param obj Object representation of the string\n-     * @return string converted to upper case and spaces replaced\n+     * Capitalize first letter, replace space with underscore and dot with euro sign.\n+     * @param obj Object representation of the string.\n+     * @param toUpperCase Change case to upper for converted string.\n+     * @return converted string.\n      */\n-    public String toUpperCaseReplaceSpace(Object obj) {\n-        return toUpperCase(obj).replace(SPACE, UNDERSCORE);\n+    public String createSecurityIdenitfier(Object obj, boolean toUpperCase) {\n+        String id = capitalizeFirstLetter(obj.toString()).replace(SPACE, UNDERSCORE).replace(DOT, DOLLAR_SIGN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a17e09ee3b2122c5261e0efd8619e18aff2a1d7c"}, "originalPosition": 58}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b14f0154ee678e2ff80e9f84794883335f9f0c1e", "author": {"user": {"login": "rishi-aga", "name": null}}, "url": "https://github.com/yahoo/elide/commit/b14f0154ee678e2ff80e9f84794883335f9f0c1e", "committedDate": "2020-12-02T20:03:16Z", "message": "Fix Test"}, "afterCommit": {"oid": "b2f8578511534657e1a2cea2a9b7b94797e92d8d", "author": {"user": {"login": "rishi-aga", "name": null}}, "url": "https://github.com/yahoo/elide/commit/b2f8578511534657e1a2cea2a9b7b94797e92d8d", "committedDate": "2020-12-02T20:11:51Z", "message": "Fix Test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzMjMyMzM1", "url": "https://github.com/yahoo/elide/pull/1693#pullrequestreview-543232335", "createdAt": "2020-12-02T21:00:02Z", "commit": {"oid": "b2f8578511534657e1a2cea2a9b7b94797e92d8d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMTowMDowMlrOH9t78g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMTowNjozNlrOH9uJyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ3NzgxMA==", "bodyText": "The visitor doesn't have to return an expression.  The visitor can construct anything really.  I thought you might construct a Set<String> of permission rules - that then could be iterated over and validated against the roles or existing security checks.", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r534477810", "createdAt": "2020-12-02T21:00:02Z", "author": {"login": "aklish"}, "path": "elide-model-config/src/main/java/com/yahoo/elide/modelconfig/validator/PermissionExpressionVisitor.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.modelconfig.validator;\n+\n+import com.yahoo.elide.core.security.permissions.expressions.AndExpression;\n+import com.yahoo.elide.core.security.permissions.expressions.Expression;\n+import com.yahoo.elide.core.security.permissions.expressions.NotExpression;\n+import com.yahoo.elide.core.security.permissions.expressions.OrExpression;\n+import com.yahoo.elide.generated.parsers.ExpressionBaseVisitor;\n+import com.yahoo.elide.generated.parsers.ExpressionParser;\n+\n+import lombok.AllArgsConstructor;\n+\n+import java.util.function.Function;\n+\n+/**\n+ * Expression Visitor.\n+ */\n+@AllArgsConstructor\n+public class PermissionExpressionVisitor extends ExpressionBaseVisitor<Expression> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2f8578511534657e1a2cea2a9b7b94797e92d8d"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ4MTM1Mw==", "bodyText": "This is probably not safe to evaluate checks like this.  Checks can do all kinds of crazy things (since they are developer provided code).\nYou can instead:\n\nHave the visitor extract a list/set of check names.\nLookup the check name either in the list of roles in the security.hjson file or check the dictionary (getCheckMappings)", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r534481353", "createdAt": "2020-12-02T21:06:36Z", "author": {"login": "aklish"}, "path": "elide-model-config/src/main/java/com/yahoo/elide/modelconfig/validator/DynamicConfigValidator.java", "diffHunk": "@@ -373,23 +470,34 @@ private static boolean validateTableConfig(ElideTableConfig elideTableConfig) {\n             table.getDimensions().forEach(dim -> {\n                 validateFieldNameUniqueness(tableFields, dim.getName(), table.getName());\n                 validateSql(dim.getDefinition());\n-                validateTableSource(elideTableConfig, dim.getTableSource());\n+                validateTableSource(dim.getTableSource());\n+                validateCheckExpr(dim.getReadAccess(), visitor);\n             });\n \n             table.getMeasures().forEach(measure -> {\n                 validateFieldNameUniqueness(tableFields, measure.getName(), table.getName());\n                 validateSql(measure.getDefinition());\n+                validateCheckExpr(measure.getReadAccess(), visitor);\n             });\n \n             table.getJoins().forEach(join -> {\n                 validateFieldNameUniqueness(tableFields, join.getName(), table.getName());\n-                validateJoin(join, elideTableConfig);\n+                validateJoin(join);\n             });\n+\n+            validateCheckExpr(table.getReadAccess(), visitor);\n         }\n \n         return true;\n     }\n \n+    private void validateCheckExpr(String readAccess, PermissionExpressionVisitor visitor) {\n+        if (!isNullOrEmpty(readAccess)) {\n+            ParseTree root = EntityPermissions.parseExpression(readAccess);\n+            visitor.visit(root).evaluate(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2f8578511534657e1a2cea2a9b7b94797e92d8d"}, "originalPosition": 272}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1NjAwMjIy", "url": "https://github.com/yahoo/elide/pull/1693#pullrequestreview-545600222", "createdAt": "2020-12-05T16:44:34Z", "commit": {"oid": "141cadf8f520f9fa448942e557d419648b2bfdea"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxNjo0NDozNFrOH_87Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxNzoyMzoyMlrOH_9SrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjgyMDU2Ng==", "bodyText": "Shouldn't this be automatically scanned and discovered? Do we need to add it here?", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r536820566", "createdAt": "2020-12-05T16:44:34Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/integration/AggregationDataStoreIntegrationTest.java", "diffHunk": "@@ -86,6 +91,7 @@ protected void configure() {\n \n                     try {\n                         dictionary.addSecurityChecks(COMPILER.findAnnotatedClasses(SecurityCheck.class));\n+                        dictionary.addSecurityChecks(Collections.singleton(OperatorCheck.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "141cadf8f520f9fa448942e557d419648b2bfdea"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjgyMzAxMA==", "bodyText": "Typo in function name.", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r536823010", "createdAt": "2020-12-05T17:00:38Z", "author": {"login": "aklish"}, "path": "elide-model-config/src/main/java/com/yahoo/elide/modelconfig/parser/handlebars/HandlebarsHelper.java", "diffHunk": "@@ -91,12 +84,17 @@ public String toUpperCase(Object obj) {\n     }\n \n     /**\n-     * Transform string to upper case and replace space with underscore.\n-     * @param obj Object representation of the string\n-     * @return string converted to upper case and spaces replaced\n+     * Capitalize first letter, replace space with underscore and dot with euro sign.\n+     * @param obj Object representation of the string.\n+     * @param toUpperCase Change case to upper for converted string.\n+     * @return converted string.\n      */\n-    public String toUpperCaseReplaceSpace(Object obj) {\n-        return toUpperCase(obj).replace(SPACE, UNDERSCORE);\n+    public String createSecurityIdenitfier(Object obj, boolean toUpperCase) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "141cadf8f520f9fa448942e557d419648b2bfdea"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjgyMzEyMA==", "bodyText": "Seems like it is safer to only have one fully initialized constructor.  Why not just use the same one throughout (even if config template doesn't need the static info)?", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r536823120", "createdAt": "2020-12-05T17:01:31Z", "author": {"login": "aklish"}, "path": "elide-model-config/src/main/java/com/yahoo/elide/modelconfig/parser/handlebars/HandlebarsHydrator.java", "diffHunk": "@@ -36,6 +37,23 @@\n         {\"\\n\", \" \" }\n     });\n \n+    private final Handlebars handlebars;\n+    private final HandlebarsHelper helper;\n+\n+    public HandlebarsHydrator(StaticModelsDetails staticModelDetails) {\n+        TemplateLoader loader = new ClassPathTemplateLoader(\"/templates\");\n+        this.helper = new HandlebarsHelper(staticModelDetails);\n+        this.handlebars = new Handlebars(loader).with(MY_ESCAPING_STRATEGY);\n+        this.handlebars.registerHelpers(ConditionalHelpers.class);\n+        this.handlebars.registerHelper(AssignHelper.NAME, AssignHelper.INSTANCE);\n+        this.handlebars.registerHelpers(helper);\n+    }\n+\n+    public HandlebarsHydrator() {\n+        this.handlebars = new Handlebars();\n+        this.helper = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyMTc2OA=="}, "originalCommit": {"oid": "7bb999b8d74b073a4539ed4f8c470fde485079cc"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjgyNDYyMQ==", "bodyText": "What calls this method?  Why does elide compiler have a singleton method here?", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r536824621", "createdAt": "2020-12-05T17:11:22Z", "author": {"login": "aklish"}, "path": "elide-model-config/src/main/java/com/yahoo/elide/modelconfig/validator/DynamicConfigValidator.java", "diffHunk": "@@ -133,21 +179,57 @@ public static void main(String[] args) {\n      */\n     public void readAndValidateConfigs() throws IOException {\n         this.loadConfigMap();\n-        this.setModelVariables(readVariableConfig(Config.MODELVARIABLE));\n-        this.setElideSecurityConfig(readSecurityConfig());\n-        validateRoleInSecurityConfig(this.elideSecurityConfig);\n-        this.setDbVariables(readVariableConfig(Config.DBVARIABLE));\n+        this.modelVariables = readVariableConfig(Config.MODELVARIABLE);\n+        this.elideSecurityConfig = readSecurityConfig();\n+        validateSecurityConfig();\n+        this.dbVariables = readVariableConfig(Config.DBVARIABLE);\n         this.elideSQLDBConfig.setDbconfigs(readDbConfig());\n         this.elideTableConfig.setTables(readTableConfig());\n         validateRequiredConfigsProvided();\n         validateNameUniqueness(this.elideSQLDBConfig.getDbconfigs());\n         validateNameUniqueness(this.elideTableConfig.getTables());\n         validateInheritance(this.elideTableConfig);\n         populateInheritance(this.elideTableConfig);\n-        validateTableConfig(this.elideTableConfig);\n+        validateTableConfig();\n         validateJoinedTablesDBConnectionName(this.elideTableConfig);\n     }\n \n+    public void hydrateAndCompileModelConfigs() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "141cadf8f520f9fa448942e557d419648b2bfdea"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjgyNDg0Mw==", "bodyText": "Seems like this belongs elsewhere (like maybe in the compiler constructor).", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r536824843", "createdAt": "2020-12-05T17:12:29Z", "author": {"login": "aklish"}, "path": "elide-model-config/src/main/java/com/yahoo/elide/modelconfig/validator/DynamicConfigValidator.java", "diffHunk": "@@ -133,21 +179,57 @@ public static void main(String[] args) {\n      */\n     public void readAndValidateConfigs() throws IOException {\n         this.loadConfigMap();\n-        this.setModelVariables(readVariableConfig(Config.MODELVARIABLE));\n-        this.setElideSecurityConfig(readSecurityConfig());\n-        validateRoleInSecurityConfig(this.elideSecurityConfig);\n-        this.setDbVariables(readVariableConfig(Config.DBVARIABLE));\n+        this.modelVariables = readVariableConfig(Config.MODELVARIABLE);\n+        this.elideSecurityConfig = readSecurityConfig();\n+        validateSecurityConfig();\n+        this.dbVariables = readVariableConfig(Config.DBVARIABLE);\n         this.elideSQLDBConfig.setDbconfigs(readDbConfig());\n         this.elideTableConfig.setTables(readTableConfig());\n         validateRequiredConfigsProvided();\n         validateNameUniqueness(this.elideSQLDBConfig.getDbconfigs());\n         validateNameUniqueness(this.elideTableConfig.getTables());\n         validateInheritance(this.elideTableConfig);\n         populateInheritance(this.elideTableConfig);\n-        validateTableConfig(this.elideTableConfig);\n+        validateTableConfig();\n         validateJoinedTablesDBConnectionName(this.elideTableConfig);\n     }\n \n+    public void hydrateAndCompileModelConfigs() throws Exception {\n+        hydrateAndCompileModelConfigs(ElideDynamicInMemoryCompiler.newInstance().ignoreWarnings());\n+    }\n+\n+    public void hydrateAndCompileModelConfigs(ElideDynamicInMemoryCompiler compiler) throws Exception {\n+        HandlebarsHydrator hydrator = new HandlebarsHydrator(staticModelDetails);\n+        Map<String, String> tableClasses = hydrator.hydrateTableTemplate(this.elideTableConfig);\n+        Map<String, String> securityClasses = hydrator.hydrateSecurityTemplate(this.elideSecurityConfig);\n+\n+        compiler.useParentClassLoader(getClass().getClassLoader());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "141cadf8f520f9fa448942e557d419648b2bfdea"}, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjgyNjU0MA==", "bodyText": "I want to talk about this test.  I'm a bit confused here about prefab.role.all.  Are we trying to define this is a role or reference the \"Prefab.Role.All\" that exists as prefabricated security role?\nI assume the former, but I'm not sure what the goal of this is.  This looks like something nobody should ever try to do.", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r536826540", "createdAt": "2020-12-05T17:23:22Z", "author": {"login": "aklish"}, "path": "elide-model-config/src/test/resources/validator/duplicate_security_role/models/security.hjson", "diffHunk": "@@ -0,0 +1,6 @@\n+{\n+    roles:  [\n+        Admin User\n+        prefab.role.all", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "141cadf8f520f9fa448942e557d419648b2bfdea"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95d270b9e3464842282b76657cc9b6d359eec5f1", "author": {"user": {"login": "rishi-aga", "name": null}}, "url": "https://github.com/yahoo/elide/commit/95d270b9e3464842282b76657cc9b6d359eec5f1", "committedDate": "2020-12-05T19:18:25Z", "message": "Validate readAccess attribute provided for dynamic models"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1166b1c58397a8c8a173a0dd604db47eb190014c", "author": {"user": {"login": "rishi-aga", "name": null}}, "url": "https://github.com/yahoo/elide/commit/1166b1c58397a8c8a173a0dd604db47eb190014c", "committedDate": "2020-12-05T19:18:25Z", "message": "Optionally compile hjson configs wwhile running CLI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a8ab9f0dc9418c30d4b7a94531a0b4a05e4381e", "author": {"user": {"login": "rishi-aga", "name": null}}, "url": "https://github.com/yahoo/elide/commit/3a8ab9f0dc9418c30d4b7a94531a0b4a05e4381e", "committedDate": "2020-12-05T19:18:26Z", "message": "Refactor creation of dynamic datasource."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24237c82dc27d2f2cdc11dd8b04406073b3c4a9f", "author": {"user": {"login": "rishi-aga", "name": null}}, "url": "https://github.com/yahoo/elide/commit/24237c82dc27d2f2cdc11dd8b04406073b3c4a9f", "committedDate": "2020-12-05T19:18:26Z", "message": "Bind to dictionary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a5fcb3f81e2319ddf1528d5d0136f8484796434", "author": {"user": {"login": "rishi-aga", "name": null}}, "url": "https://github.com/yahoo/elide/commit/0a5fcb3f81e2319ddf1528d5d0136f8484796434", "committedDate": "2020-12-05T19:18:26Z", "message": "Remove 'Principal Is' references"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46cc5273d76836eb056dd74891271f326f53b860", "author": {"user": {"login": "rishi-aga", "name": null}}, "url": "https://github.com/yahoo/elide/commit/46cc5273d76836eb056dd74891271f326f53b860", "committedDate": "2020-12-05T19:18:26Z", "message": "Add Permission expression visitor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94e914c44e5d17480df4e7f114df922514dbed18", "author": {"user": {"login": "rishi-aga", "name": null}}, "url": "https://github.com/yahoo/elide/commit/94e914c44e5d17480df4e7f114df922514dbed18", "committedDate": "2020-12-05T19:18:26Z", "message": "Fix Test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "466e354041e9262d4fab5e61fc3f1b810918a64d", "author": {"user": {"login": "rishi-aga", "name": null}}, "url": "https://github.com/yahoo/elide/commit/466e354041e9262d4fab5e61fc3f1b810918a64d", "committedDate": "2020-12-05T19:18:26Z", "message": "Review Comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71410ba83091b06970e509eb61d0e851344519d3", "author": {"user": {"login": "rishi-aga", "name": null}}, "url": "https://github.com/yahoo/elide/commit/71410ba83091b06970e509eb61d0e851344519d3", "committedDate": "2020-12-05T19:18:26Z", "message": "Review Comments 2nd pass"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6d12ddf57f2df4737a83c9031cd92ece910e807", "author": {"user": {"login": "rishi-aga", "name": null}}, "url": "https://github.com/yahoo/elide/commit/f6d12ddf57f2df4737a83c9031cd92ece910e807", "committedDate": "2020-12-05T19:18:26Z", "message": "Remove singleton method from Elide Compiler"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0cc4f019dbb910873fcfbe1899f22e6c5f118862", "author": {"user": {"login": "rishi-aga", "name": null}}, "url": "https://github.com/yahoo/elide/commit/0cc4f019dbb910873fcfbe1899f22e6c5f118862", "committedDate": "2020-12-05T19:18:03Z", "message": "Remove singleton method from Elide Compiler"}, "afterCommit": {"oid": "f6d12ddf57f2df4737a83c9031cd92ece910e807", "author": {"user": {"login": "rishi-aga", "name": null}}, "url": "https://github.com/yahoo/elide/commit/f6d12ddf57f2df4737a83c9031cd92ece910e807", "committedDate": "2020-12-05T19:18:26Z", "message": "Remove singleton method from Elide Compiler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0042b155753d68c64af797e4b4068152d06de910", "author": {"user": {"login": "rishi-aga", "name": null}}, "url": "https://github.com/yahoo/elide/commit/0042b155753d68c64af797e4b4068152d06de910", "committedDate": "2020-12-07T16:26:20Z", "message": "Fix build errors due to CVE-2020-25638"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2MzM4NzM1", "url": "https://github.com/yahoo/elide/pull/1693#pullrequestreview-546338735", "createdAt": "2020-12-07T16:50:57Z", "commit": {"oid": "0042b155753d68c64af797e4b4068152d06de910"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 701, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}