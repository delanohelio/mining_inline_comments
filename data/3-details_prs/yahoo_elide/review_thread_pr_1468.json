{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3MzgzMzQ1", "number": 1468, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMToyOTozNFrOETAAKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNjowMzoxN1rOETUo5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MzU4NDQyOnYy", "diffSide": "RIGHT", "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideDynamicConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMToyOTozNFrOG4flxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMToyOTozNFrOG4flxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg5MTAxMg==", "bodyText": "Remove commented code.", "url": "https://github.com/yahoo/elide/pull/1468#discussion_r461891012", "createdAt": "2020-07-28T21:29:34Z", "author": {"login": "moizarafat"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideDynamicConfiguration.java", "diffHunk": "@@ -44,7 +44,8 @@\n @Slf4j\n @Configuration\n @EnableConfigurationProperties(ElideConfigProperties.class)\n-@ConditionalOnExpression(\"${elide.dynamic-config.enabled:false}\")\n+//@ConditionalOnExpression(\"${elide.dynamic-config.enabled}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0506887baef1d083c370f1fd33e3ad7b422e7d09"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MzU4ODA2OnYy", "diffSide": "RIGHT", "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideConfigProperties.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMTozMDo0MFrOG4fn_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMTozOTo1OVrOG4f4XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg5MTU4MA==", "bodyText": "Instead of reusing ControllerProperties, we should create a new properties file.", "url": "https://github.com/yahoo/elide/pull/1468#discussion_r461891580", "createdAt": "2020-07-28T21:30:40Z", "author": {"login": "moizarafat"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideConfigProperties.java", "diffHunk": "@@ -43,6 +43,11 @@\n      */\n     private DynamicConfigProperties dynamicConfig;\n \n+    /**\n+     * Settings for the Aggregation Store.\n+     */\n+    private ControllerProperties aggregationStore;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0506887baef1d083c370f1fd33e3ad7b422e7d09"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg5NTc3Mw==", "bodyText": "Sure.", "url": "https://github.com/yahoo/elide/pull/1468#discussion_r461895773", "createdAt": "2020-07-28T21:39:59Z", "author": {"login": "rishi-aga"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideConfigProperties.java", "diffHunk": "@@ -43,6 +43,11 @@\n      */\n     private DynamicConfigProperties dynamicConfig;\n \n+    /**\n+     * Settings for the Aggregation Store.\n+     */\n+    private ControllerProperties aggregationStore;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg5MTU4MA=="}, "originalCommit": {"oid": "0506887baef1d083c370f1fd33e3ad7b422e7d09"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDI1NzE1OnYy", "diffSide": "RIGHT", "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMTo1NToyN1rOG4lwCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTowMDoyNFrOG48r0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk5MTk0Ng==", "bodyText": "you can just return jpaDataStore", "url": "https://github.com/yahoo/elide/pull/1468#discussion_r461991946", "createdAt": "2020-07-29T01:55:27Z", "author": {"login": "moizarafat"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java", "diffHunk": "@@ -185,29 +191,35 @@ public QueryEngine buildQueryEngine(EntityManagerFactory entityManagerFactory,\n     @ConditionalOnMissingBean\n     @DependsOn({\"buildQueryLogger\"})\n     public DataStore buildDataStore(EntityManagerFactory entityManagerFactory,\n-                                    QueryEngine queryEngine,\n+                                    ObjectProvider<QueryEngine> queryEngine,\n                                     ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler,\n                                     ElideConfigProperties settings,\n                                     @Autowired(required = false) Cache cache,\n                                     @Autowired(required = false) QueryLogger querylogger)\n             throws ClassNotFoundException {\n-        AggregationDataStore.AggregationDataStoreBuilder aggregationDataStoreBuilder = AggregationDataStore.builder()\n-                .queryEngine(queryEngine);\n-        if (isDynamicConfigEnabled(settings)) {\n-            ElideDynamicEntityCompiler compiler = dynamicCompiler.getIfAvailable();\n-            Set<Class<?>> annotatedClass = compiler.findAnnotatedClasses(FromTable.class);\n-            annotatedClass.addAll(compiler.findAnnotatedClasses(FromSubquery.class));\n-            aggregationDataStoreBuilder.dynamicCompiledClasses(annotatedClass);\n-        }\n-        aggregationDataStoreBuilder.cache(cache);\n-        aggregationDataStoreBuilder.queryLogger(querylogger);\n-        AggregationDataStore aggregationDataStore = aggregationDataStoreBuilder.build();\n \n         JpaDataStore jpaDataStore = new JpaDataStore(entityManagerFactory::createEntityManager,\n                                                      (em) -> { return new NonJtaTransaction(em, txCancel); });\n \n-        // meta data store needs to be put at first to populate meta data models\n-        return new MultiplexManager(jpaDataStore, queryEngine.getMetaDataStore(), aggregationDataStore);\n+        if (isAggregationStoreEnabled(settings)) {\n+            AggregationDataStore.AggregationDataStoreBuilder aggregationDataStoreBuilder =\n+                            AggregationDataStore.builder().queryEngine(queryEngine.getIfAvailable());\n+            if (isDynamicConfigEnabled(settings)) {\n+                ElideDynamicEntityCompiler compiler = dynamicCompiler.getIfAvailable();\n+                Set<Class<?>> annotatedClass = compiler.findAnnotatedClasses(FromTable.class);\n+                annotatedClass.addAll(compiler.findAnnotatedClasses(FromSubquery.class));\n+                aggregationDataStoreBuilder.dynamicCompiledClasses(annotatedClass);\n+            }\n+            aggregationDataStoreBuilder.cache(cache);\n+            aggregationDataStoreBuilder.queryLogger(querylogger);\n+            AggregationDataStore aggregationDataStore = aggregationDataStoreBuilder.build();\n+\n+            // meta data store needs to be put at first to populate meta data models\n+            return new MultiplexManager(jpaDataStore, queryEngine.getIfAvailable().getMetaDataStore(),\n+                            aggregationDataStore);\n+        }\n+\n+        return new MultiplexManager(jpaDataStore);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d57168846e3decdfc9de64d2eec76037d272d34"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2NzY5Ng==", "bodyText": "sure.", "url": "https://github.com/yahoo/elide/pull/1468#discussion_r462367696", "createdAt": "2020-07-29T15:00:24Z", "author": {"login": "rishi-aga"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java", "diffHunk": "@@ -185,29 +191,35 @@ public QueryEngine buildQueryEngine(EntityManagerFactory entityManagerFactory,\n     @ConditionalOnMissingBean\n     @DependsOn({\"buildQueryLogger\"})\n     public DataStore buildDataStore(EntityManagerFactory entityManagerFactory,\n-                                    QueryEngine queryEngine,\n+                                    ObjectProvider<QueryEngine> queryEngine,\n                                     ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler,\n                                     ElideConfigProperties settings,\n                                     @Autowired(required = false) Cache cache,\n                                     @Autowired(required = false) QueryLogger querylogger)\n             throws ClassNotFoundException {\n-        AggregationDataStore.AggregationDataStoreBuilder aggregationDataStoreBuilder = AggregationDataStore.builder()\n-                .queryEngine(queryEngine);\n-        if (isDynamicConfigEnabled(settings)) {\n-            ElideDynamicEntityCompiler compiler = dynamicCompiler.getIfAvailable();\n-            Set<Class<?>> annotatedClass = compiler.findAnnotatedClasses(FromTable.class);\n-            annotatedClass.addAll(compiler.findAnnotatedClasses(FromSubquery.class));\n-            aggregationDataStoreBuilder.dynamicCompiledClasses(annotatedClass);\n-        }\n-        aggregationDataStoreBuilder.cache(cache);\n-        aggregationDataStoreBuilder.queryLogger(querylogger);\n-        AggregationDataStore aggregationDataStore = aggregationDataStoreBuilder.build();\n \n         JpaDataStore jpaDataStore = new JpaDataStore(entityManagerFactory::createEntityManager,\n                                                      (em) -> { return new NonJtaTransaction(em, txCancel); });\n \n-        // meta data store needs to be put at first to populate meta data models\n-        return new MultiplexManager(jpaDataStore, queryEngine.getMetaDataStore(), aggregationDataStore);\n+        if (isAggregationStoreEnabled(settings)) {\n+            AggregationDataStore.AggregationDataStoreBuilder aggregationDataStoreBuilder =\n+                            AggregationDataStore.builder().queryEngine(queryEngine.getIfAvailable());\n+            if (isDynamicConfigEnabled(settings)) {\n+                ElideDynamicEntityCompiler compiler = dynamicCompiler.getIfAvailable();\n+                Set<Class<?>> annotatedClass = compiler.findAnnotatedClasses(FromTable.class);\n+                annotatedClass.addAll(compiler.findAnnotatedClasses(FromSubquery.class));\n+                aggregationDataStoreBuilder.dynamicCompiledClasses(annotatedClass);\n+            }\n+            aggregationDataStoreBuilder.cache(cache);\n+            aggregationDataStoreBuilder.queryLogger(querylogger);\n+            AggregationDataStore aggregationDataStore = aggregationDataStoreBuilder.build();\n+\n+            // meta data store needs to be put at first to populate meta data models\n+            return new MultiplexManager(jpaDataStore, queryEngine.getIfAvailable().getMetaDataStore(),\n+                            aggregationDataStore);\n+        }\n+\n+        return new MultiplexManager(jpaDataStore);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk5MTk0Ng=="}, "originalCommit": {"oid": "2d57168846e3decdfc9de64d2eec76037d272d34"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDI5NjE1OnYy", "diffSide": "RIGHT", "path": "elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/DisableAggStoreControllerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMjoxNTo1NFrOG4mF1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMjoxNTo1NFrOG4mF1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk5NzUyNA==", "bodyText": "2020", "url": "https://github.com/yahoo/elide/pull/1468#discussion_r461997524", "createdAt": "2020-07-29T02:15:54Z", "author": {"login": "moizarafat"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/DisableAggStoreControllerTest.java", "diffHunk": "@@ -0,0 +1,418 @@\n+/*\n+ * Copyright 2019, Yahoo Inc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d57168846e3decdfc9de64d2eec76037d272d34"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDI5OTAyOnYy", "diffSide": "RIGHT", "path": "elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/DisableAggStoreControllerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMjoxNzoxMlrOG4mHXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTowMjo0MFrOG48ybw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk5NzkxOQ==", "bodyText": "Since this class is exact replica of ControllerTest with few minor differences. I suggest we have ControllerBaseTest class with all the common test cases and ControllerTest and DisableAggStoreControllerTest will both inherit this class and add any unique test cases. This would keep making updates to test cases easier.", "url": "https://github.com/yahoo/elide/pull/1468#discussion_r461997919", "createdAt": "2020-07-29T02:17:12Z", "author": {"login": "moizarafat"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/DisableAggStoreControllerTest.java", "diffHunk": "@@ -0,0 +1,418 @@\n+/*\n+ * Copyright 2019, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package example.tests;\n+\n+import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.argument;\n+import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.arguments;\n+import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.field;\n+import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.query;\n+import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.selection;\n+import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.selections;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.attr;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.attributes;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.data;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.datum;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.id;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.linkage;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.patchOperation;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.patchSet;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.relation;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.relationships;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.resource;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.type;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.elements.PatchOperationType.add;\n+import static io.restassured.RestAssured.given;\n+import static io.restassured.RestAssured.when;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+import com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL;\n+import com.yahoo.elide.core.HttpStatus;\n+import com.yahoo.elide.spring.controllers.JsonApiController;\n+import example.models.jpa.ArtifactGroup;\n+\n+import org.junit.jupiter.api.Test;\n+import org.springframework.test.context.jdbc.Sql;\n+import org.springframework.test.context.jdbc.SqlMergeMode;\n+\n+import java.io.IOException;\n+import javax.ws.rs.core.MediaType;\n+\n+/**\n+ * Example functional test.\n+ */\n+@SqlMergeMode(SqlMergeMode.MergeMode.MERGE)\n+@Sql(executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD,\n+        statements = \"INSERT INTO ArtifactGroup (name, commonName, description, deprecated) VALUES\\n\"\n+                + \"\\t\\t('com.example.repository','Example Repository','The code for this project', false);\")\n+@Sql(executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD,\n+        statements = \"DELETE FROM ArtifactVersion; DELETE FROM ArtifactProduct; DELETE FROM ArtifactGroup;\")\n+public class DisableAggStoreControllerTest extends DisableAggStoreIntegrationTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d57168846e3decdfc9de64d2eec76037d272d34"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2OTM5MQ==", "bodyText": "changed to DisableAggStoreControllerTest inheriting and overriding from ControllerTest. I can pass profile in sub class so removing DisableAggStoreIntegrationTest.", "url": "https://github.com/yahoo/elide/pull/1468#discussion_r462369391", "createdAt": "2020-07-29T15:02:40Z", "author": {"login": "rishi-aga"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/DisableAggStoreControllerTest.java", "diffHunk": "@@ -0,0 +1,418 @@\n+/*\n+ * Copyright 2019, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package example.tests;\n+\n+import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.argument;\n+import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.arguments;\n+import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.field;\n+import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.query;\n+import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.selection;\n+import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.selections;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.attr;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.attributes;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.data;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.datum;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.id;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.linkage;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.patchOperation;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.patchSet;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.relation;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.relationships;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.resource;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.type;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.elements.PatchOperationType.add;\n+import static io.restassured.RestAssured.given;\n+import static io.restassured.RestAssured.when;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+import com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL;\n+import com.yahoo.elide.core.HttpStatus;\n+import com.yahoo.elide.spring.controllers.JsonApiController;\n+import example.models.jpa.ArtifactGroup;\n+\n+import org.junit.jupiter.api.Test;\n+import org.springframework.test.context.jdbc.Sql;\n+import org.springframework.test.context.jdbc.SqlMergeMode;\n+\n+import java.io.IOException;\n+import javax.ws.rs.core.MediaType;\n+\n+/**\n+ * Example functional test.\n+ */\n+@SqlMergeMode(SqlMergeMode.MergeMode.MERGE)\n+@Sql(executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD,\n+        statements = \"INSERT INTO ArtifactGroup (name, commonName, description, deprecated) VALUES\\n\"\n+                + \"\\t\\t('com.example.repository','Example Repository','The code for this project', false);\")\n+@Sql(executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD,\n+        statements = \"DELETE FROM ArtifactVersion; DELETE FROM ArtifactProduct; DELETE FROM ArtifactGroup;\")\n+public class DisableAggStoreControllerTest extends DisableAggStoreIntegrationTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk5NzkxOQ=="}, "originalCommit": {"oid": "2d57168846e3decdfc9de64d2eec76037d272d34"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDMwNDk5OnYy", "diffSide": "RIGHT", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMjoyMDozN1rOG4mK0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTowMzowM1rOG48zcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk5ODgwMg==", "bodyText": "you can just return jpaDataStore", "url": "https://github.com/yahoo/elide/pull/1468#discussion_r461998802", "createdAt": "2020-07-29T02:20:37Z", "author": {"login": "moizarafat"}, "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "diffHunk": "@@ -400,13 +409,19 @@ default Cache getQueryCache() {\n      * @param entityManagerFactory EntityManagerFactory object.\n      * @return EntityDictionary object initialized.\n      */\n-    default DataStore getDataStore(MetaDataStore metaDataStore, AggregationDataStore aggregationDataStore,\n-            EntityManagerFactory entityManagerFactory) {\n+    default DataStore getDataStore(Optional<MetaDataStore> metaDataStore,\n+            Optional<AggregationDataStore> aggregationDataStore, EntityManagerFactory entityManagerFactory) {\n         DataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n                 (em) -> { return new NonJtaTransaction(em, TXCANCEL); });\n \n-        DataStore dataStore = new MultiplexManager(jpaDataStore, metaDataStore, aggregationDataStore);\n+        DataStore dataStore = null;\n+\n+        if (enableAggregationDataStore()) {\n+            dataStore = new MultiplexManager(jpaDataStore, metaDataStore.get(), aggregationDataStore.get());\n+        } else {\n+            dataStore = new MultiplexManager(jpaDataStore);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d57168846e3decdfc9de64d2eec76037d272d34"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2OTY1MQ==", "bodyText": "sure.", "url": "https://github.com/yahoo/elide/pull/1468#discussion_r462369651", "createdAt": "2020-07-29T15:03:03Z", "author": {"login": "rishi-aga"}, "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "diffHunk": "@@ -400,13 +409,19 @@ default Cache getQueryCache() {\n      * @param entityManagerFactory EntityManagerFactory object.\n      * @return EntityDictionary object initialized.\n      */\n-    default DataStore getDataStore(MetaDataStore metaDataStore, AggregationDataStore aggregationDataStore,\n-            EntityManagerFactory entityManagerFactory) {\n+    default DataStore getDataStore(Optional<MetaDataStore> metaDataStore,\n+            Optional<AggregationDataStore> aggregationDataStore, EntityManagerFactory entityManagerFactory) {\n         DataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n                 (em) -> { return new NonJtaTransaction(em, TXCANCEL); });\n \n-        DataStore dataStore = new MultiplexManager(jpaDataStore, metaDataStore, aggregationDataStore);\n+        DataStore dataStore = null;\n+\n+        if (enableAggregationDataStore()) {\n+            dataStore = new MultiplexManager(jpaDataStore, metaDataStore.get(), aggregationDataStore.get());\n+        } else {\n+            dataStore = new MultiplexManager(jpaDataStore);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk5ODgwMg=="}, "originalCommit": {"oid": "2d57168846e3decdfc9de64d2eec76037d272d34"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDMxMDA5OnYy", "diffSide": "RIGHT", "path": "elide-standalone/src/test/java/example/ElideStandaloneDisableAggregationDataStoreTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMjoyMzo0NFrOG4mNsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTowMzo1NVrOG4818g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk5OTUzOQ==", "bodyText": "Can this extend ElideStandaloneTest as is ? and just override init and swaggerDocumentTest cases?", "url": "https://github.com/yahoo/elide/pull/1468#discussion_r461999539", "createdAt": "2020-07-29T02:23:44Z", "author": {"login": "moizarafat"}, "path": "elide-standalone/src/test/java/example/ElideStandaloneDisableAggregationDataStoreTest.java", "diffHunk": "@@ -0,0 +1,296 @@\n+/*\n+ * Copyright 2018, Oath Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package example;\n+\n+import static com.yahoo.elide.Elide.JSONAPI_CONTENT_TYPE;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.attr;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.attributes;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.data;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.datum;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.id;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.resource;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.type;\n+import static io.restassured.RestAssured.given;\n+import static io.restassured.RestAssured.when;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.hamcrest.Matchers.hasKey;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import com.yahoo.elide.async.service.AsyncQueryDAO;\n+import com.yahoo.elide.standalone.ElideStandalone;\n+import com.yahoo.elide.standalone.config.ElideStandaloneSettings;\n+import example.models.Post;\n+import org.apache.http.HttpStatus;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+\n+import io.restassured.response.Response;\n+\n+import java.util.Properties;\n+\n+import javax.ws.rs.core.MediaType;\n+\n+/**\n+ * Tests ElideStandalone starts and works.\n+ */\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+public class ElideStandaloneDisableAggregationDataStoreTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d57168846e3decdfc9de64d2eec76037d272d34"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM3MDI5MA==", "bodyText": "Updated. Had to override testJsonAPIPost also.", "url": "https://github.com/yahoo/elide/pull/1468#discussion_r462370290", "createdAt": "2020-07-29T15:03:55Z", "author": {"login": "rishi-aga"}, "path": "elide-standalone/src/test/java/example/ElideStandaloneDisableAggregationDataStoreTest.java", "diffHunk": "@@ -0,0 +1,296 @@\n+/*\n+ * Copyright 2018, Oath Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package example;\n+\n+import static com.yahoo.elide.Elide.JSONAPI_CONTENT_TYPE;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.attr;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.attributes;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.data;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.datum;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.id;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.resource;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.type;\n+import static io.restassured.RestAssured.given;\n+import static io.restassured.RestAssured.when;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.hamcrest.Matchers.hasKey;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import com.yahoo.elide.async.service.AsyncQueryDAO;\n+import com.yahoo.elide.standalone.ElideStandalone;\n+import com.yahoo.elide.standalone.config.ElideStandaloneSettings;\n+import example.models.Post;\n+import org.apache.http.HttpStatus;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+\n+import io.restassured.response.Response;\n+\n+import java.util.Properties;\n+\n+import javax.ws.rs.core.MediaType;\n+\n+/**\n+ * Tests ElideStandalone starts and works.\n+ */\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+public class ElideStandaloneDisableAggregationDataStoreTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk5OTUzOQ=="}, "originalCommit": {"oid": "2d57168846e3decdfc9de64d2eec76037d272d34"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjkyNTk1OnYy", "diffSide": "RIGHT", "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTo1NDoyM1rOG4_FGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODoyNTozNlrOG5Ex-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwNjkzOQ==", "bodyText": "What is the benefit of changing the bean argument from a QueryEngine to a function which returns a QueryEngine?", "url": "https://github.com/yahoo/elide/pull/1468#discussion_r462406939", "createdAt": "2020-07-29T15:54:23Z", "author": {"login": "aklish"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java", "diffHunk": "@@ -185,29 +191,35 @@ public QueryEngine buildQueryEngine(EntityManagerFactory entityManagerFactory,\n     @ConditionalOnMissingBean\n     @DependsOn({\"buildQueryLogger\"})\n     public DataStore buildDataStore(EntityManagerFactory entityManagerFactory,\n-                                    QueryEngine queryEngine,\n+                                    ObjectProvider<QueryEngine> queryEngine,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ffbcb7d565fe9cda1e2949ea1a5febb88401db"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwODE0NA==", "bodyText": "This method seems to have two mechanisms for optional bean arguments (required = false) and the ObjectProvider.  I think the former might be the \"Spring way\"", "url": "https://github.com/yahoo/elide/pull/1468#discussion_r462408144", "createdAt": "2020-07-29T15:56:04Z", "author": {"login": "aklish"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java", "diffHunk": "@@ -185,29 +191,35 @@ public QueryEngine buildQueryEngine(EntityManagerFactory entityManagerFactory,\n     @ConditionalOnMissingBean\n     @DependsOn({\"buildQueryLogger\"})\n     public DataStore buildDataStore(EntityManagerFactory entityManagerFactory,\n-                                    QueryEngine queryEngine,\n+                                    ObjectProvider<QueryEngine> queryEngine,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwNjkzOQ=="}, "originalCommit": {"oid": "78ffbcb7d565fe9cda1e2949ea1a5febb88401db"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwMDM0NA==", "bodyText": "QueryEngine bean is not created if aggregation store is disabled, so its optional now.\nReplaced ObjectProvider with (required = false) for both queryEngine and compiler to make it consistent.", "url": "https://github.com/yahoo/elide/pull/1468#discussion_r462500344", "createdAt": "2020-07-29T18:25:36Z", "author": {"login": "rishi-aga"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java", "diffHunk": "@@ -185,29 +191,35 @@ public QueryEngine buildQueryEngine(EntityManagerFactory entityManagerFactory,\n     @ConditionalOnMissingBean\n     @DependsOn({\"buildQueryLogger\"})\n     public DataStore buildDataStore(EntityManagerFactory entityManagerFactory,\n-                                    QueryEngine queryEngine,\n+                                    ObjectProvider<QueryEngine> queryEngine,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwNjkzOQ=="}, "originalCommit": {"oid": "78ffbcb7d565fe9cda1e2949ea1a5febb88401db"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4Njk0MDkzOnYy", "diffSide": "RIGHT", "path": "elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/DisableAggStoreAsyncTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTo1Nzo0NVrOG4_Oxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNjowOToxMVrOG4_tcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwOTQxNA==", "bodyText": "Was this intended to have tests?", "url": "https://github.com/yahoo/elide/pull/1468#discussion_r462409414", "createdAt": "2020-07-29T15:57:45Z", "author": {"login": "aklish"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/DisableAggStoreAsyncTest.java", "diffHunk": "@@ -0,0 +1,16 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package example.tests;\n+\n+import org.springframework.test.context.ActiveProfiles;\n+\n+/**\n+ * Executes Async tests with Aggregation Store disabled.\n+ */\n+@ActiveProfiles(\"disableAggStore\")\n+public class DisableAggStoreAsyncTest extends AsyncTest {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ffbcb7d565fe9cda1e2949ea1a5febb88401db"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQxNzI2NA==", "bodyText": "No. Ensures existing async tests pass with aggregation store disabled.", "url": "https://github.com/yahoo/elide/pull/1468#discussion_r462417264", "createdAt": "2020-07-29T16:09:11Z", "author": {"login": "rishi-aga"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/DisableAggStoreAsyncTest.java", "diffHunk": "@@ -0,0 +1,16 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package example.tests;\n+\n+import org.springframework.test.context.ActiveProfiles;\n+\n+/**\n+ * Executes Async tests with Aggregation Store disabled.\n+ */\n+@ActiveProfiles(\"disableAggStore\")\n+public class DisableAggStoreAsyncTest extends AsyncTest {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwOTQxNA=="}, "originalCommit": {"oid": "78ffbcb7d565fe9cda1e2949ea1a5febb88401db"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4Njk2NTUwOnYy", "diffSide": "RIGHT", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNjowMzoxN1rOG4_eKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNzoyOTowNlrOG5s30g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQxMzM1Mw==", "bodyText": "If the enableAggregationDataStore is enabled, but the aggregation store or metadata store is not provided, we need a good way to alert the user to their configuration error.\nInstead of using so many optionals, I'm wondering if we should provide different getDataStore methods with different required parameters (that we use Precondition to check are non-null).  Elide can call the right one depending on what is enabled/disabled.", "url": "https://github.com/yahoo/elide/pull/1468#discussion_r462413353", "createdAt": "2020-07-29T16:03:17Z", "author": {"login": "aklish"}, "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "diffHunk": "@@ -400,35 +409,41 @@ default Cache getQueryCache() {\n      * @param entityManagerFactory EntityManagerFactory object.\n      * @return EntityDictionary object initialized.\n      */\n-    default DataStore getDataStore(MetaDataStore metaDataStore, AggregationDataStore aggregationDataStore,\n-            EntityManagerFactory entityManagerFactory) {\n+    default DataStore getDataStore(Optional<MetaDataStore> metaDataStore,\n+            Optional<AggregationDataStore> aggregationDataStore, EntityManagerFactory entityManagerFactory) {\n         DataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n                 (em) -> { return new NonJtaTransaction(em, TXCANCEL); });\n \n-        DataStore dataStore = new MultiplexManager(jpaDataStore, metaDataStore, aggregationDataStore);\n-\n-        return dataStore;\n+        return (enableAggregationDataStore())\n+                        ? new MultiplexManager(jpaDataStore, metaDataStore.get(), aggregationDataStore.get())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ffbcb7d565fe9cda1e2949ea1a5febb88401db"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU2MjYxOA==", "bodyText": "overloaded getDataStore method to avoid Optionals", "url": "https://github.com/yahoo/elide/pull/1468#discussion_r462562618", "createdAt": "2020-07-29T20:17:29Z", "author": {"login": "rishi-aga"}, "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "diffHunk": "@@ -400,35 +409,41 @@ default Cache getQueryCache() {\n      * @param entityManagerFactory EntityManagerFactory object.\n      * @return EntityDictionary object initialized.\n      */\n-    default DataStore getDataStore(MetaDataStore metaDataStore, AggregationDataStore aggregationDataStore,\n-            EntityManagerFactory entityManagerFactory) {\n+    default DataStore getDataStore(Optional<MetaDataStore> metaDataStore,\n+            Optional<AggregationDataStore> aggregationDataStore, EntityManagerFactory entityManagerFactory) {\n         DataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n                 (em) -> { return new NonJtaTransaction(em, TXCANCEL); });\n \n-        DataStore dataStore = new MultiplexManager(jpaDataStore, metaDataStore, aggregationDataStore);\n-\n-        return dataStore;\n+        return (enableAggregationDataStore())\n+                        ? new MultiplexManager(jpaDataStore, metaDataStore.get(), aggregationDataStore.get())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQxMzM1Mw=="}, "originalCommit": {"oid": "78ffbcb7d565fe9cda1e2949ea1a5febb88401db"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE1NzIwMg==", "bodyText": "Added null check for metadata store and aggregation store. Without these checks also application was failing to start by giving NPE during queryEngine.init and populateEntityDictionary methods.", "url": "https://github.com/yahoo/elide/pull/1468#discussion_r463157202", "createdAt": "2020-07-30T17:29:06Z", "author": {"login": "rishi-aga"}, "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "diffHunk": "@@ -400,35 +409,41 @@ default Cache getQueryCache() {\n      * @param entityManagerFactory EntityManagerFactory object.\n      * @return EntityDictionary object initialized.\n      */\n-    default DataStore getDataStore(MetaDataStore metaDataStore, AggregationDataStore aggregationDataStore,\n-            EntityManagerFactory entityManagerFactory) {\n+    default DataStore getDataStore(Optional<MetaDataStore> metaDataStore,\n+            Optional<AggregationDataStore> aggregationDataStore, EntityManagerFactory entityManagerFactory) {\n         DataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n                 (em) -> { return new NonJtaTransaction(em, TXCANCEL); });\n \n-        DataStore dataStore = new MultiplexManager(jpaDataStore, metaDataStore, aggregationDataStore);\n-\n-        return dataStore;\n+        return (enableAggregationDataStore())\n+                        ? new MultiplexManager(jpaDataStore, metaDataStore.get(), aggregationDataStore.get())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQxMzM1Mw=="}, "originalCommit": {"oid": "78ffbcb7d565fe9cda1e2949ea1a5febb88401db"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 939, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}