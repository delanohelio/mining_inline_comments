{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxNjIzMDE5", "number": 1179, "title": "metadata refactor", "bodyText": "Update construction of Metadata models to allow more extension.\nDescription\n\nRemove AnalyticView, now Table would represent both AnalyticView and Table.\nNow QueryEngine is responsible for constructing Table. QueryEngine would populate MetaDataStore after all Tables are constructed.\n\nRemove QueryEngineFactory as that is not needed.\nMetaDataStore would not construct Table itself.\n\n\nNow Table is responsible for constructing Metric, Dimension, TimeDimension if using constructor.\n\nAdd SQLMetric, SQLDimension, SQLTimeDimension as SQL extension of metadata models.\nUpdate SQLColumn to be an interface.\n\n\n\nHow Has This Been Tested?\nAll unit tests and integration tests still pass.\nLicense\nI confirm that this contribution is made under an Apache 2.0 license and that I have the authority necessary to make this contribution on behalf of its copyright owner.", "createdAt": "2020-02-05T22:45:30Z", "url": "https://github.com/yahoo/elide/pull/1179", "merged": true, "mergeCommit": {"oid": "d21a42ed7c1904f7ba2f7ddc8d3b72f92c1b0ca6"}, "closed": true, "closedAt": "2020-02-11T21:26:29Z", "author": {"login": "hellohanchen"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBeDTbAH2gAyMzcxNjIzMDE5OjNmYjIxYWY2M2JmMGJlNDc0ZTQ1ZjJhYmQ5MDQ2YmIxMWNkYzY4Mjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDYLQIAFqTM1Njk4ODg0MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3fb21af63bf0be474e45f2abd9046bb11cdc6829", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/3fb21af63bf0be474e45f2abd9046bb11cdc6829", "committedDate": "2020-02-05T22:40:46Z", "message": "metadata refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11420dc0af6c9dfc01aa09ac6dd38d97c6136bef", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/11420dc0af6c9dfc01aa09ac6dd38d97c6136bef", "committedDate": "2020-02-10T19:40:08Z", "message": "merge table and analyticView"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c281fdf3743aeb44623a73ad80696344c238d04b", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/c281fdf3743aeb44623a73ad80696344c238d04b", "committedDate": "2020-02-10T20:22:21Z", "message": "fix reflection package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7cecc1aad0d583d8dfe2bfb6c0b6484f7ce9ddb", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/b7cecc1aad0d583d8dfe2bfb6c0b6484f7ce9ddb", "committedDate": "2020-02-10T21:55:55Z", "message": "Make Table constrcut its own columns"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbad4f49a8ca84db32c6d082780a1ad30070dd39", "author": {"user": {"login": "hellohanchen", "name": "Han Chen"}}, "url": "https://github.com/yahoo/elide/commit/dbad4f49a8ca84db32c6d082780a1ad30070dd39", "committedDate": "2020-02-10T22:02:21Z", "message": "Merge branch 'elide-5.x' into elide-metadata-refactor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2ODYwMjk4", "url": "https://github.com/yahoo/elide/pull/1179#pullrequestreview-356860298", "createdAt": "2020-02-11T17:42:18Z", "commit": {"oid": "dbad4f49a8ca84db32c6d082780a1ad30070dd39"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNzo0MjoxOFrOFoSotw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODowMzoyN1rOFoTV-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc5MjY5NQ==", "bodyText": "We need to remove all concept of Class<?> with the QueryEngine and metadata classes so that Fili can leverage this as well.", "url": "https://github.com/yahoo/elide/pull/1179#discussion_r377792695", "createdAt": "2020-02-11T17:42:18Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java", "diffHunk": "@@ -51,7 +60,31 @@\n  * <p>\n  * This is a {@link java.util.function functional interface} whose functional method is {@link #executeQuery(Query)}.\n  */\n-public interface QueryEngine {\n+public abstract class QueryEngine {\n+    @Getter\n+    private final MetaDataStore metaDataStore;\n+\n+    @Getter\n+    private final EntityDictionary metadataDictionary;\n+\n+    @Getter\n+    private final Map<Class<?>, Table> tables;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbad4f49a8ca84db32c6d082780a1ad30070dd39"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc5MzE3NQ==", "bodyText": "Same comment - we need to use table names - not classes for mapping.", "url": "https://github.com/yahoo/elide/pull/1179#discussion_r377793175", "createdAt": "2020-02-11T17:43:09Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java", "diffHunk": "@@ -61,12 +94,14 @@\n      *\n      * @return query results\n      */\n-    Iterable<Object> executeQuery(Query query);\n+    public abstract Iterable<Object> executeQuery(Query query);\n \n     /**\n      * Returns the schema for a given entity class.\n      * @param entityClass The class to map to a schema.\n      * @return The schema that represents the provided entity.\n      */\n-    Table getTable(Class<?> entityClass);\n+    public Table getTable(Class<?> entityClass) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbad4f49a8ca84db32c6d082780a1ad30070dd39"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgwMTI5OA==", "bodyText": "Should this return MetricFunction?", "url": "https://github.com/yahoo/elide/pull/1179#discussion_r377801298", "createdAt": "2020-02-11T17:58:02Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/metadata/SQLMetric.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.queryengines.sql.metadata;\n+\n+import com.yahoo.elide.core.EntityDictionary;\n+import com.yahoo.elide.datastores.aggregation.metadata.models.FunctionArgument;\n+import com.yahoo.elide.datastores.aggregation.metadata.models.Metric;\n+import com.yahoo.elide.datastores.aggregation.metadata.models.MetricFunction;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.metric.SQLMetricFunction;\n+\n+import java.util.Set;\n+\n+/**\n+ * SQLMetric would contain {@link SQLMetricFunction} instead of {@link MetricFunction}.\n+ */\n+public class SQLMetric extends Metric {\n+    public SQLMetric(Class<?> tableClass, String fieldName, EntityDictionary dictionary) {\n+        super(tableClass, fieldName, dictionary);\n+    }\n+\n+    @Override\n+    protected SQLMetricFunction constructMetricFunction(String id,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbad4f49a8ca84db32c6d082780a1ad30070dd39"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgwMTc4OQ==", "bodyText": "Should the override methods return the base type?  Like Metric here?", "url": "https://github.com/yahoo/elide/pull/1179#discussion_r377801789", "createdAt": "2020-02-11T17:58:57Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/metadata/SQLTable.java", "diffHunk": "@@ -5,47 +5,39 @@\n  */\n package com.yahoo.elide.datastores.aggregation.queryengines.sql.metadata;\n \n-import static com.yahoo.elide.datastores.aggregation.metadata.MetaDataStore.isMetricField;\n-\n import com.yahoo.elide.core.EntityDictionary;\n-import com.yahoo.elide.datastores.aggregation.metadata.models.Column;\n import com.yahoo.elide.datastores.aggregation.metadata.models.Table;\n \n import lombok.Data;\n import lombok.EqualsAndHashCode;\n \n-import java.util.Map;\n-import java.util.function.Function;\n-import java.util.stream.Collectors;\n-\n /**\n  * SQL extension of {@link Table} which also contains sql column meta data.\n  */\n @EqualsAndHashCode(callSuper = true)\n @Data\n public class SQLTable extends Table {\n-    private Map<String, SQLColumn> sqlColumns;\n-\n     public SQLTable(Class<?> cls, EntityDictionary dictionary) {\n         super(cls, dictionary);\n-        this.sqlColumns = resolveSQLDimensions(cls, dictionary);\n     }\n \n-    /**\n-     * Resolve all sql columns of a table.\n-     *\n-     * @param cls table class\n-     * @param dictionary dictionary contains the table class\n-     * @return all resolved sql column metadata\n-     */\n-    public static Map<String, SQLColumn> resolveSQLDimensions(Class<?> cls, EntityDictionary dictionary) {\n-        return dictionary.getAllFields(cls).stream()\n-                .filter(field -> Column.getDataType(cls, field, dictionary) != null)\n-                .filter(field -> !isMetricField(dictionary, cls, field))\n-                .collect(Collectors.toMap(Function.identity(), field -> new SQLColumn(cls, field, dictionary)));\n+    public final SQLColumn getSQLColumn(String fieldName) {\n+        SQLDimension dimension = getColumn(SQLDimension.class, fieldName);\n+        return dimension == null ? getColumn(SQLTimeDimension.class, fieldName) : dimension;\n+    }\n+\n+    @Override\n+    protected SQLMetric constructMetric(Class<?> cls, String fieldName, EntityDictionary dictionary) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbad4f49a8ca84db32c6d082780a1ad30070dd39"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgwNDI4Mw==", "bodyText": "We should provide a bean that allows users to override the QueryEngine bean that is used.", "url": "https://github.com/yahoo/elide/pull/1179#discussion_r377804283", "createdAt": "2020-02-11T18:03:27Z", "author": {"login": "aklish"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java", "diffHunk": "@@ -135,15 +136,4 @@ public Swagger buildSwagger(EntityDictionary dictionary, ElideConfigProperties s\n \n         return swagger;\n     }\n-\n-    /**\n-     * Configure the QueryEngineFactory that the Aggregation Data Store uses.\n-     * @param entityManagerFactory Needed by the SQLQueryEngine\n-     * @return a SQLQueryEngineFactory\n-     */\n-    @Bean\n-    @ConditionalOnMissingBean\n-    public QueryEngineFactory buildQueryEngineFactory(EntityManagerFactory entityManagerFactory) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbad4f49a8ca84db32c6d082780a1ad30070dd39"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dcfec5c0f87283cf5c6082d6eb8cded8865c24dc", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/dcfec5c0f87283cf5c6082d6eb8cded8865c24dc", "committedDate": "2020-02-11T20:39:35Z", "message": "table json type alias"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7b5e2e05a1fbec27c52081bf9f36fa7132a68d0", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/c7b5e2e05a1fbec27c52081bf9f36fa7132a68d0", "committedDate": "2020-02-11T20:45:16Z", "message": "add comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2OTg4ODQw", "url": "https://github.com/yahoo/elide/pull/1179#pullrequestreview-356988840", "createdAt": "2020-02-11T20:57:53Z", "commit": {"oid": "c7b5e2e05a1fbec27c52081bf9f36fa7132a68d0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 634, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}