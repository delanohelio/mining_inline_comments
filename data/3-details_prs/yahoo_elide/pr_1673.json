{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzMzg4Nzcx", "number": 1673, "title": "bypasscache", "bodyText": "Resolves # (if appropriate)\nDescription\n\n\n\nProvide bypasscache option\nMotivation and Context\n\nWe want users to be able to enable and disable caching using headers.\nHow Has This Been Tested?\n\n\n\nTesting in elide spring with new modified tests.\nScreenshots (if appropriate):\nLicense\nI confirm that this contribution is made under an Apache 2.0 license and that I have the authority necessary to make this contribution on behalf of its copyright owner.", "createdAt": "2020-11-18T18:28:41Z", "url": "https://github.com/yahoo/elide/pull/1673", "merged": true, "mergeCommit": {"oid": "fddc9b87a5db2209a1e9358157bd47c0ae5fdf2a"}, "closed": true, "closedAt": "2020-12-02T17:18:59Z", "author": {"login": "ayeswarya"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABddxQYmgH2gAyNTIzMzg4NzcxOjMxMjA4MjliZTRmZDcyNWUzNWQ3ZmMzMWQ3OTA3MjljOWU2M2MxMGU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdiR2oTgFqTU0MzA2MzcxMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3120829be4fd725e35d7fc31d790729c9e63c10e", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/3120829be4fd725e35d7fc31d790729c9e63c10e", "committedDate": "2020-11-18T17:04:17Z", "message": "cheery pick 1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b95124680a0e7516909cd40f003c63688504a23b", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/b95124680a0e7516909cd40f003c63688504a23b", "committedDate": "2020-11-18T17:07:33Z", "message": "cherrypick 2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40195c698d5af40abea02eacbbdf05a8b8d9de67", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/40195c698d5af40abea02eacbbdf05a8b8d9de67", "committedDate": "2020-11-18T17:07:56Z", "message": "remove prints"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a97bef916025ac40f5017c29e6e6a1b13e2aa55f", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/a97bef916025ac40f5017c29e6e6a1b13e2aa55f", "committedDate": "2020-11-18T17:08:16Z", "message": "change var name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c745ade795fcb0ebd8b4f894f15d0cfa05fff93e", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/c745ade795fcb0ebd8b4f894f15d0cfa05fff93e", "committedDate": "2020-11-18T17:27:16Z", "message": "review changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzODAyODk1", "url": "https://github.com/yahoo/elide/pull/1673#pullrequestreview-533802895", "createdAt": "2020-11-18T19:28:44Z", "commit": {"oid": "c745ade795fcb0ebd8b4f894f15d0cfa05fff93e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxOToyODo0NFrOH1-n0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxOToyODo0NFrOH1-n0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM2MjU3OA==", "bodyText": "bypassCache instead of bypassingCache", "url": "https://github.com/yahoo/elide/pull/1673#discussion_r526362578", "createdAt": "2020-11-18T19:28:44Z", "author": {"login": "moizarafat"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/EntityProjectionTranslatorTest.java", "diffHunk": "@@ -38,10 +42,13 @@\n                     .name(\"overallRating\")\n                     .build())\n             .build();\n+    protected static MultivaluedMap<String, String> requestHeaders = new MultivaluedHashMap<String, String>();\n+    protected static Optional<MultivaluedMap<String, String>> requestHeaderOptional = Optional.ofNullable(requestHeaders);\n \n     @BeforeAll\n     public static void init() {\n         SQLUnitTest.init();\n+        requestHeaders.add(\"bypassingCache\", \"true\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c745ade795fcb0ebd8b4f894f15d0cfa05fff93e"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzNzg5OTM2", "url": "https://github.com/yahoo/elide/pull/1673#pullrequestreview-533789936", "createdAt": "2020-11-18T19:11:58Z", "commit": {"oid": "c745ade795fcb0ebd8b4f894f15d0cfa05fff93e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxOToxMTo1OFrOH19_nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxOTozNzoxNlrOH1-8-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM1MjI4Nw==", "bodyText": "Can we remove these CARBON-371 comments?", "url": "https://github.com/yahoo/elide/pull/1673#discussion_r526352287", "createdAt": "2020-11-18T19:11:58Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/Elide.java", "diffHunk": "@@ -215,17 +233,36 @@ public ElideResponse post(String baseUrlEndPoint, String path, String jsonApiDoc\n     public ElideResponse post(String baseUrlEndPoint, String path, String jsonApiDocument,\n                               MultivaluedMap<String, String> queryParams,\n                               User opaqueUser, String apiVersion, UUID requestId) {\n+        return post(baseUrlEndPoint, path, jsonApiDocument, queryParams, null, opaqueUser, apiVersion, requestId);\n+    }\n+\n+    /**\n+     * Handle POST.\n+     *\n+     * @param baseUrlEndPoint base URL with prefix endpoint\n+     * @param path the path\n+     * @param jsonApiDocument the json api document\n+     * @param queryParams the query params\n+     * @param requestHeaders the request headers\n+     * @param opaqueUser the opaque user\n+     * @param apiVersion the API version\n+     * @param requestId the request ID\n+     * @return Elide response object\n+     */\n+    public ElideResponse post(String baseUrlEndPoint, String path, String jsonApiDocument,\n+                              MultivaluedMap<String, String> queryParams, MultivaluedMap<String, String> requestHeaders,\n+                              User opaqueUser, String apiVersion, UUID requestId) {\n         return handleRequest(false, opaqueUser, dataStore::beginTransaction, requestId, (tx, user) -> {\n             JsonApiDocument jsonApiDoc = mapper.readJsonApiDocument(jsonApiDocument);\n             RequestScope requestScope = new RequestScope(baseUrlEndPoint, path, apiVersion,\n-                    jsonApiDoc, tx, user, queryParams, requestId, elideSettings);\n+                    jsonApiDoc, tx, user, queryParams, requestHeaders, requestId, elideSettings);\n             requestScope.setEntityProjection(new EntityProjectionMaker(elideSettings.getDictionary(),\n                     requestScope).parsePath(path));\n             BaseVisitor visitor = new PostVisitor(requestScope);\n             return visit(path, requestScope, visitor);\n         });\n     }\n-\n+    //CARBON-371", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c745ade795fcb0ebd8b4f894f15d0cfa05fff93e"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM1NjA5NQ==", "bodyText": "Remove the comment.", "url": "https://github.com/yahoo/elide/pull/1673#discussion_r526356095", "createdAt": "2020-11-18T19:18:20Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java", "diffHunk": "@@ -125,12 +125,13 @@ Query buildQuery(EntityProjection entityProjection, RequestScope scope) {\n         Table table = metaDataStore.getTable(\n                 scope.getDictionary().getJsonAliasFor(entityProjection.getType()),\n                 scope.getApiVersion());\n-\n         EntityProjectionTranslator translator = new EntityProjectionTranslator(\n                 queryEngine,\n                 table,\n                 entityProjection,\n-                scope.getDictionary());\n+                scope.getDictionary(),\n+                scope.getRequestHeaders());\n+      //CARBON-371", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c745ade795fcb0ebd8b4f894f15d0cfa05fff93e"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM1NzE5MQ==", "bodyText": "If bypassCache is null, shouldn't this be \"false\" instead of \"true\"?  Also, rather than parse the boolean, I would look for \"true\" and set it or otherwise it should always just be false (regardless of the value).", "url": "https://github.com/yahoo/elide/pull/1673#discussion_r526357191", "createdAt": "2020-11-18T19:20:03Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/EntityProjectionTranslator.java", "diffHunk": "@@ -46,13 +49,20 @@\n     private FilterExpression whereFilter;\n     private FilterExpression havingFilter;\n     private EntityDictionary dictionary;\n+    private Boolean bypassCache;\n+\n \n     public EntityProjectionTranslator(QueryEngine engine, Table table,\n-                                      EntityProjection entityProjection, EntityDictionary dictionary) {\n+                                      EntityProjection entityProjection, EntityDictionary dictionary,\n+                                      Optional<MultivaluedMap<String, String>> requestHeaders) {\n         this.engine = engine;\n         this.queriedTable = table;\n         this.entityProjection = entityProjection;\n         this.dictionary = dictionary;\n+        String bypassCache = (requestHeaders.isPresent() && requestHeaders.get().get(\"bypasscache\") != null)\n+                             ? requestHeaders.get().get(\"bypasscache\").get(0) : null;\n+        String safebypassCache = bypassCache == null ? \"true\" : bypassCache;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c745ade795fcb0ebd8b4f894f15d0cfa05fff93e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM1OTk1MQ==", "bodyText": "I'm not sure we want this particular Map class (which is a JAX-RS dependency) to be required outside elide-core.   We may want RequestScope to keep the headers private and instead have a public method to ask for a particular header.", "url": "https://github.com/yahoo/elide/pull/1673#discussion_r526359951", "createdAt": "2020-11-18T19:24:29Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/EntityProjectionTranslator.java", "diffHunk": "@@ -28,10 +28,13 @@\n import java.util.LinkedHashSet;\n import java.util.List;\n import java.util.Objects;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.function.Function;\n import java.util.stream.Collectors;\n \n+import javax.ws.rs.core.MultivaluedMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c745ade795fcb0ebd8b4f894f15d0cfa05fff93e"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM2MTM2NQ==", "bodyText": "Rather than redefine these methods twice, let's put them in a common class (HeaderUtils) or something like that.", "url": "https://github.com/yahoo/elide/pull/1673#discussion_r526361365", "createdAt": "2020-11-18T19:26:41Z", "author": {"login": "aklish"}, "path": "elide-graphql/src/main/java/com/yahoo/elide/graphql/GraphQLEndpoint.java", "diffHunk": "@@ -64,20 +68,43 @@ public GraphQLEndpoint(@Named(\"elide\") Elide elide) {\n     @Consumes(MediaType.APPLICATION_JSON)\n     public Response post(\n             @Context UriInfo uriInfo,\n-            @HeaderParam(\"ApiVersion\") String apiVersion,\n+            @Context HttpHeaders headers,\n             @Context SecurityContext securityContext,\n             String graphQLDocument) {\n \n-        String safeApiVersion = apiVersion == null ? NO_VERSION : apiVersion;\n+        String apiVersion = resolveApiVersion(headers);\n+        MultivaluedMap<String, String> requestHeaders = removeAuthHeaders(headers);\n         User user = new SecurityContextUser(securityContext);\n-        QueryRunner runner = runners.getOrDefault(safeApiVersion, null);\n+        QueryRunner runner = runners.getOrDefault(apiVersion, null);\n \n         ElideResponse response;\n         if (runner == null) {\n             response = buildErrorResponse(elide, new InvalidOperationException(\"Invalid API Version\"), false);\n         } else {\n-            response = runner.run(uriInfo.getBaseUri().toString(), graphQLDocument, user);\n+            response = runner.run(uriInfo.getBaseUri().toString(),\n+                                  graphQLDocument, user, UUID.randomUUID(), requestHeaders);\n         }\n         return Response.status(response.getResponseCode()).entity(response.getBody()).build();\n     }\n+\n+    private String resolveApiVersion(HttpHeaders headers) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c745ade795fcb0ebd8b4f894f15d0cfa05fff93e"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM2MTUyMw==", "bodyText": "remove.", "url": "https://github.com/yahoo/elide/pull/1673#discussion_r526361523", "createdAt": "2020-11-18T19:26:57Z", "author": {"login": "aklish"}, "path": "elide-graphql/src/main/java/com/yahoo/elide/graphql/GraphQLRequestScope.java", "diffHunk": "@@ -33,17 +34,20 @@ public GraphQLRequestScope(\n             String apiVersion,\n             ElideSettings elideSettings,\n             GraphQLProjectionInfo projectionInfo,\n-            UUID requestId\n+            UUID requestId,\n+            MultivaluedMap<String, String> requestHeaders\n     ) {\n         // TODO: We're going to break out the two request scopes. `RequestScope` should become an interface and\n         // we should have a GraphQLRequestScope and a JSONAPIRequestScope.\n         // TODO: What should mutate multiple entity value be? There is a problem with this setting in practice.\n         // Namely, we don't filter or paginate in the data store.\n         super(baseUrlEndpoint, \"/\", apiVersion, null, transaction, user,\n-                new MultivaluedHashMap<>(), requestId, elideSettings);\n+                new MultivaluedHashMap<>(), requestHeaders, requestId, elideSettings);\n         this.projectionInfo = projectionInfo;\n \n         // Entity Projection is retrieved from projectionInfo.\n         this.setEntityProjection(null);\n     }\n+    //CARBON-371", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c745ade795fcb0ebd8b4f894f15d0cfa05fff93e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM2MTYxMw==", "bodyText": "Remove", "url": "https://github.com/yahoo/elide/pull/1673#discussion_r526361613", "createdAt": "2020-11-18T19:27:04Z", "author": {"login": "aklish"}, "path": "elide-graphql/src/main/java/com/yahoo/elide/graphql/QueryRunner.java", "diffHunk": "@@ -84,7 +85,7 @@ public QueryRunner(Elide elide, String apiVersion) {\n         module.addSerializer(GraphQLError.class, errorSerializer);\n         elide.getElideSettings().getMapper().getObjectMapper().registerModule(module);\n     }\n-\n+    //CARBON-371", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c745ade795fcb0ebd8b4f894f15d0cfa05fff93e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM2MjMyNg==", "bodyText": "We don't want to duplicate all of this logic.", "url": "https://github.com/yahoo/elide/pull/1673#discussion_r526362326", "createdAt": "2020-11-18T19:28:18Z", "author": {"login": "aklish"}, "path": "elide-graphql/src/main/java/com/yahoo/elide/graphql/QueryRunner.java", "diffHunk": "@@ -176,6 +177,68 @@ public ElideResponse run(String baseUrlEndPoint, String graphQLDocument, User us\n         return executeRequest.apply(topLevel);\n     }\n \n+    /**\n+     * Execute a GraphQL query and return the response.\n+     * @param graphQLDocument The graphQL document (wrapped in JSON payload).\n+     * @param user The user who issued the query.\n+     * @param requestId the Request ID.\n+     * @return The response.\n+     */\n+    public ElideResponse run(String baseUrlEndPoint, String graphQLDocument, User user, UUID requestId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c745ade795fcb0ebd8b4f894f15d0cfa05fff93e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM2MjQzNA==", "bodyText": "We don't want to duplicate all of this logic.", "url": "https://github.com/yahoo/elide/pull/1673#discussion_r526362434", "createdAt": "2020-11-18T19:28:31Z", "author": {"login": "aklish"}, "path": "elide-graphql/src/main/java/com/yahoo/elide/graphql/QueryRunner.java", "diffHunk": "@@ -348,6 +411,131 @@ public String toString() {\n         }\n     }\n \n+    private ElideResponse executeGraphQLRequest(String baseUrlEndPoint, ObjectMapper mapper, User principal,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c745ade795fcb0ebd8b4f894f15d0cfa05fff93e"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM2NTgyOQ==", "bodyText": "It doesn't look like we remove auth headers here.", "url": "https://github.com/yahoo/elide/pull/1673#discussion_r526365829", "createdAt": "2020-11-18T19:34:00Z", "author": {"login": "aklish"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/controllers/JsonApiController.java", "diffHunk": "@@ -72,7 +72,8 @@ public JsonApiController(Elide elide, ElideConfigProperties settings) {\n             @Override\n             public ResponseEntity<String> call() throws Exception {\n                 ElideResponse response = elide.get(baseUrl, pathname,\n-                        new MultivaluedHashMap<>(allRequestParams), user, apiVersion);\n+                        new MultivaluedHashMap<>(allRequestParams), new MultivaluedHashMap<>(requestHeaders),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c745ade795fcb0ebd8b4f894f15d0cfa05fff93e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM2NjY4Nw==", "bodyText": "We should make a copy of the requestHeaders map (and return it) rather than modify the input map.", "url": "https://github.com/yahoo/elide/pull/1673#discussion_r526366687", "createdAt": "2020-11-18T19:35:15Z", "author": {"login": "aklish"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/controllers/Utils.java", "diffHunk": "@@ -10,9 +10,21 @@\n \n import java.util.Map;\n \n+import javax.ws.rs.core.HttpHeaders;\n+\n public class Utils {\n     public static String getApiVersion(Map<String, String> requestHeaders) {\n         return requestHeaders.getOrDefault(\"ApiVersion\",\n                 requestHeaders.getOrDefault(\"apiversion\", NO_VERSION));  //For tomcat\n     }\n+\n+    public static Map<String, String> removeAuthHeaders(Map<String, String> requestHeaders) {\n+        if (requestHeaders.get(HttpHeaders.AUTHORIZATION) != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c745ade795fcb0ebd8b4f894f15d0cfa05fff93e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM2Nzk5NA==", "bodyText": "This test is the same as the prior.  Maybe we should look at the cache metrics for something different between the tests?", "url": "https://github.com/yahoo/elide/pull/1673#discussion_r526367994", "createdAt": "2020-11-18T19:37:16Z", "author": {"login": "aklish"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/AggregationStoreTest.java", "diffHunk": "@@ -35,24 +41,60 @@\n                     + \"\\t\\t(1,100,'Foo'),\"\n                     + \"\\t\\t(2,150,'Bar');\"\n     })\n-    public void jsonApiGetTest(@Autowired MeterRegistry metrics) {\n-        when()\n-                .get(\"/json/stats?fields[stats]=measure\")\n-                .then()\n-                .body(equalTo(\n-                        data(\n-                                resource(\n-                                        type(\"stats\"),\n-                                        id(\"0\"),\n-                                        attributes(\n-                                                attr(\"measure\", 250)\n-                                        )\n+    public void jsonApiGetTestNoCache(@Autowired MeterRegistry metrics) {\n+\n+        Map<String, String> requestHeaders = new HashMap<>();\n+        requestHeaders.put(\"bypassCache\", \"true\");\n+\n+        given().headers(requestHeaders)\n+        .get(\"/json/stats?fields[stats]=measure\")\n+        .then()\n+        .body(equalTo(\n+                data(\n+                        resource(\n+                                type(\"stats\"),\n+                                id(\"0\"),\n+                                attributes(\n+                                        attr(\"measure\", 250)\n                                 )\n-                        ).toJSON())\n-                )\n-                .statusCode(HttpStatus.SC_OK);\n+                        )\n+                ).toJSON())\n+        )\n+        .statusCode(HttpStatus.SC_OK);\n+        assertFalse(metrics\n+                .get(\"cache.gets\")\n+                .tags(\"cache\", \"elideQueryCache\", \"result\", \"miss\")\n+                .functionCounter().count() > 0);\n+    }\n+\n+    @Test\n+    @Sql(statements = {\n+            \"DROP TABLE Stats IF EXISTS;\",\n+            \"CREATE TABLE Stats(id int, measure int, dimension VARCHAR(255));\",\n+            \"INSERT INTO Stats (id, measure, dimension) VALUES\\n\"\n+                    + \"\\t\\t(1,100,'Foo'),\"\n+                    + \"\\t\\t(2,150,'Bar');\"\n+    })\n+    public void jsonApiGetTestWithCache(@Autowired MeterRegistry metrics) {\n \n-        // query cache was active and publishing metrics\n+        Map<String, String> requestHeaders = new HashMap<>();\n+        requestHeaders.put(\"bypassCache\", \"false\");\n+\n+        given().headers(requestHeaders)\n+        .get(\"/json/stats?fields[stats]=measure\")\n+        .then()\n+        .body(equalTo(\n+                data(\n+                        resource(\n+                                type(\"stats\"),\n+                                id(\"0\"),\n+                                attributes(\n+                                        attr(\"measure\", 250)\n+                                )\n+                        )\n+                ).toJSON())\n+        )\n+        .statusCode(HttpStatus.SC_OK);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c745ade795fcb0ebd8b4f894f15d0cfa05fff93e"}, "originalPosition": 99}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08e1157f16f0c5d1bf004a657091b029b5740298", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/08e1157f16f0c5d1bf004a657091b029b5740298", "committedDate": "2020-11-19T18:43:01Z", "message": "review changes:"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9bae7e1a351e04ac3ec163993cc48222cc871bc7", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/9bae7e1a351e04ac3ec163993cc48222cc871bc7", "committedDate": "2020-11-19T20:52:08Z", "message": "remove multivaluedmap from aggregation code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02931b2ea1a604bc041af67d1569cd5b2874058c", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/02931b2ea1a604bc041af67d1569cd5b2874058c", "committedDate": "2020-11-19T22:00:16Z", "message": "merge"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1NjAxOTAx", "url": "https://github.com/yahoo/elide/pull/1673#pullrequestreview-535601901", "createdAt": "2020-11-20T16:52:59Z", "commit": {"oid": "02931b2ea1a604bc041af67d1569cd5b2874058c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNjo1Mjo1OVrOH3X1gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNzowNjozMlrOH3Ya3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgyNDI1Ng==", "bodyText": "Add @Override", "url": "https://github.com/yahoo/elide/pull/1673#discussion_r527824256", "createdAt": "2020-11-20T16:52:59Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/RequestScope.java", "diffHunk": "@@ -514,4 +522,11 @@ private void registerPreSecurityObservers() {\n                         LifeCycleHookBinding.Operation.DELETE,\n                         LifeCycleHookBinding.TransactionPhase.PRESECURITY, true));\n     }\n+\n+    public String getRequestHeaderByName(String headerName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02931b2ea1a604bc041af67d1569cd5b2874058c"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgyOTMxMg==", "bodyText": "It looks like spacing of these comments is all messed up.", "url": "https://github.com/yahoo/elide/pull/1673#discussion_r527829312", "createdAt": "2020-11-20T16:59:06Z", "author": {"login": "aklish"}, "path": "elide-graphql/src/main/java/com/yahoo/elide/graphql/QueryRunner.java", "diffHunk": "@@ -212,37 +226,33 @@ public static String extractOperation(JsonNode jsonDocument) {\n     }\n \n     private ElideResponse executeGraphQLRequest(String baseUrlEndPoint, ObjectMapper mapper, User principal,\n-                                                String graphQLDocument, JsonNode jsonDocument, UUID requestId) {\n+                                                String graphQLDocument, JsonNode jsonDocument, UUID requestId,\n+                                                MultivaluedMap<String, String> requestHeaders) {\n         boolean isVerbose = false;\n         try (DataStoreTransaction tx = elide.getDataStore().beginTransaction()) {\n             elide.getTransactionRegistry().addRunningTransaction(requestId, tx);\n             if (!jsonDocument.has(QUERY)) {\n-                return ElideResponse.builder()\n-                        .responseCode(HttpStatus.SC_BAD_REQUEST)\n-                        .body(\"A `query` key is required.\")\n-                        .build();\n+                return ElideResponse.builder().responseCode(HttpStatus.SC_BAD_REQUEST)\n+                        .body(\"A `query` key is required.\").build();\n             }\n             String query = extractQuery(jsonDocument);\n \n-            // get variables from request for constructing entityProjections\n+// get variables from request for constructing entityProjections\n             Map<String, Object> variables = extractVariables(mapper, jsonDocument);\n \n-            //TODO - get API version.\n-            GraphQLProjectionInfo projectionInfo =\n-                    new GraphQLEntityProjectionMaker(elide.getElideSettings(), variables, apiVersion).make(query);\n-            GraphQLRequestScope requestScope =\n-                    new GraphQLRequestScope(baseUrlEndPoint, tx, principal, apiVersion,\n-                            elide.getElideSettings(), projectionInfo, requestId);\n+//TODO - get API version.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02931b2ea1a604bc041af67d1569cd5b2874058c"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgyOTU4Mw==", "bodyText": "I think something is off in your environment?", "url": "https://github.com/yahoo/elide/pull/1673#discussion_r527829583", "createdAt": "2020-11-20T16:59:32Z", "author": {"login": "aklish"}, "path": "elide-graphql/src/main/java/com/yahoo/elide/graphql/QueryRunner.java", "diffHunk": "@@ -212,37 +226,33 @@ public static String extractOperation(JsonNode jsonDocument) {\n     }\n \n     private ElideResponse executeGraphQLRequest(String baseUrlEndPoint, ObjectMapper mapper, User principal,\n-                                                String graphQLDocument, JsonNode jsonDocument, UUID requestId) {\n+                                                String graphQLDocument, JsonNode jsonDocument, UUID requestId,\n+                                                MultivaluedMap<String, String> requestHeaders) {\n         boolean isVerbose = false;\n         try (DataStoreTransaction tx = elide.getDataStore().beginTransaction()) {\n             elide.getTransactionRegistry().addRunningTransaction(requestId, tx);\n             if (!jsonDocument.has(QUERY)) {\n-                return ElideResponse.builder()\n-                        .responseCode(HttpStatus.SC_BAD_REQUEST)\n-                        .body(\"A `query` key is required.\")\n-                        .build();\n+                return ElideResponse.builder().responseCode(HttpStatus.SC_BAD_REQUEST)\n+                        .body(\"A `query` key is required.\").build();\n             }\n             String query = extractQuery(jsonDocument);\n \n-            // get variables from request for constructing entityProjections\n+// get variables from request for constructing entityProjections\n             Map<String, Object> variables = extractVariables(mapper, jsonDocument);\n \n-            //TODO - get API version.\n-            GraphQLProjectionInfo projectionInfo =\n-                    new GraphQLEntityProjectionMaker(elide.getElideSettings(), variables, apiVersion).make(query);\n-            GraphQLRequestScope requestScope =\n-                    new GraphQLRequestScope(baseUrlEndPoint, tx, principal, apiVersion,\n-                            elide.getElideSettings(), projectionInfo, requestId);\n+//TODO - get API version.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgyOTMxMg=="}, "originalCommit": {"oid": "02931b2ea1a604bc041af67d1569cd5b2874058c"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgzMzgyMw==", "bodyText": "We can commonize this logic with HeaderUtils.\nSpring has a class called HttpHeaders and JaXRS has a class called MultivalueMap.  Both extends Map<String, List<String>> .\nWe can commonize removing auth headers and the like by using the Java standard.\nThis means requestScope should probably have a Map<String, List> instead of a Multivalued map.", "url": "https://github.com/yahoo/elide/pull/1673#discussion_r527833823", "createdAt": "2020-11-20T17:06:32Z", "author": {"login": "aklish"}, "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/controllers/Utils.java", "diffHunk": "@@ -8,11 +8,25 @@\n \n import static com.yahoo.elide.core.dictionary.EntityDictionary.NO_VERSION;\n \n+import java.util.HashMap;\n import java.util.Map;\n \n+import javax.ws.rs.core.HttpHeaders;\n+\n public class Utils {\n     public static String getApiVersion(Map<String, String> requestHeaders) {\n         return requestHeaders.getOrDefault(\"ApiVersion\",\n                 requestHeaders.getOrDefault(\"apiversion\", NO_VERSION));  //For tomcat\n     }\n+\n+    public static Map<String, String> removeAuthHeaders(Map<String, String> requestHeaders) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02931b2ea1a604bc041af67d1569cd5b2874058c"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb655d523f2bddb49bfcfdd0b1e406bc473e3709", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/bb655d523f2bddb49bfcfdd0b1e406bc473e3709", "committedDate": "2020-12-01T16:32:15Z", "message": "review fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2aae50c52a49e38e0f7799de9eea5175f45c8d6e", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/2aae50c52a49e38e0f7799de9eea5175f45c8d6e", "committedDate": "2020-12-01T17:11:11Z", "message": "copy map"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aeca755db70592114c15ef0d04cb359adfddcd3a", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/aeca755db70592114c15ef0d04cb359adfddcd3a", "committedDate": "2020-12-01T17:30:38Z", "message": "Merge branch 'elide-5.x' of github.com:yahoo/elide into CARBON-371"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0c6a9c4ee0c5b594825ded98c7d92c79b1d9834", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/b0c6a9c4ee0c5b594825ded98c7d92c79b1d9834", "committedDate": "2020-12-01T18:53:29Z", "message": "test change from different pr"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91a9f4f7576cbadd1f7431b1316efe06fcebc810", "author": {"user": {"login": "ayeswarya", "name": null}}, "url": "https://github.com/yahoo/elide/commit/91a9f4f7576cbadd1f7431b1316efe06fcebc810", "committedDate": "2020-12-01T19:08:12Z", "message": "Merge branch 'elide-5.x' into cARBON-371"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMjIzNDk5", "url": "https://github.com/yahoo/elide/pull/1673#pullrequestreview-542223499", "createdAt": "2020-12-01T19:24:32Z", "commit": {"oid": "91a9f4f7576cbadd1f7431b1316efe06fcebc810"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxOToyNDozMlrOH88Sjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxOTozODoyNlrOH88x_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY2NDM5OQ==", "bodyText": "We shouldn't catch a NPE.  We should prevent it from happening.  What is resulting in an NPE?", "url": "https://github.com/yahoo/elide/pull/1673#discussion_r533664399", "createdAt": "2020-12-01T19:24:32Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/utils/HeaderUtils.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+\n+package com.yahoo.elide.utils;\n+\n+import static com.yahoo.elide.core.dictionary.EntityDictionary.NO_VERSION;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.ws.rs.core.HttpHeaders;\n+\n+\n+/**\n+ * Utility class which modifies request headers\n+ */\n+public class HeaderUtils {\n+\n+    /**\n+     * Resolve value of api version from request headers\n+     * @param headers HttpHeaders\n+     * @return apiVersion\n+     */\n+\n+     public static String resolveApiVersion(Map<String, List<String>> headers) {\n+         String apiVersion = NO_VERSION;\n+         if (headers != null && headers.get(\"ApiVersion\") != null) {\n+             apiVersion = headers.get(\"ApiVersion\").get(0);\n+         }\n+         return apiVersion;\n+     }\n+    /**\n+     * Remove Authorization and Proxy Authorization headers from request headers\n+     * @param headers HttpHeaders\n+     * @return requestHeaders\n+     */\n+     public static Map<String, List<String>> removeAuthHeaders(Map<String, List<String>> headers) {\n+         try {\n+             Map<String, List<String>> requestHeaders = new HashMap<String, List<String>>(headers);\n+             if (requestHeaders.get(HttpHeaders.AUTHORIZATION) != null) {\n+                 requestHeaders.remove(HttpHeaders.AUTHORIZATION);\n+             }\n+             if (requestHeaders.get(\"Proxy-Authorization\") != null) {\n+                 requestHeaders.remove(\"Proxy-Authorization\");\n+             }\n+             return requestHeaders;\n+         } catch (NullPointerException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91a9f4f7576cbadd1f7431b1316efe06fcebc810"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY2NjE5Mg==", "bodyText": "If this is what is causing the NPE, instead of passing null, we can create an empty HashMap here.", "url": "https://github.com/yahoo/elide/pull/1673#discussion_r533666192", "createdAt": "2020-12-01T19:27:36Z", "author": {"login": "aklish"}, "path": "elide-async/src/main/java/com/yahoo/elide/async/export/TableExporter.java", "diffHunk": "@@ -65,8 +65,8 @@ public TableExporter(Elide elide, String apiVersion, User user, GraphQLParser gr\n                 projection = graphQLParser.parse(query);\n                 //TODO - we need to add the baseUrlEndpoint to the queryObject.\n                 //TODO - Can we have projectionInfo as null?\n-                requestScope = new GraphQLRequestScope(\"\", tx, user, apiVersion, elide.getElideSettings(), null,\n-                        requestId);\n+                requestScope = new GraphQLRequestScope(\"\", tx, user, apiVersion, elide.getElideSettings(),\n+                        null, requestId, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91a9f4f7576cbadd1f7431b1316efe06fcebc810"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY2NjI4Ng==", "bodyText": "Same comment.", "url": "https://github.com/yahoo/elide/pull/1673#discussion_r533666286", "createdAt": "2020-12-01T19:27:44Z", "author": {"login": "aklish"}, "path": "elide-async/src/main/java/com/yahoo/elide/async/service/dao/DefaultAsyncAPIDAO.java", "diffHunk": "@@ -167,7 +167,7 @@ protected Object executeInTransaction(DataStore dataStore, Transactional action)\n             JsonApiDocument jsonApiDoc = new JsonApiDocument();\n             MultivaluedMap<String, String> queryParams = new MultivaluedHashMap<String, String>();\n             RequestScope scope = new RequestScope(\"\", \"query\", NO_VERSION, jsonApiDoc,\n-                    tx, null, queryParams, UUID.randomUUID(), elideSettings);\n+                    tx, null, queryParams, null, UUID.randomUUID(), elideSettings);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91a9f4f7576cbadd1f7431b1316efe06fcebc810"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY2NjM1Mw==", "bodyText": "Same comment.", "url": "https://github.com/yahoo/elide/pull/1673#discussion_r533666353", "createdAt": "2020-12-01T19:27:52Z", "author": {"login": "aklish"}, "path": "elide-async/src/main/java/com/yahoo/elide/async/service/thread/AsyncAPICancelThread.java", "diffHunk": "@@ -108,7 +108,7 @@ public void run() {\n                        JsonApiDocument jsonApiDoc = new JsonApiDocument();\n                        MultivaluedMap<String, String> queryParams = new MultivaluedHashMap<String, String>();\n                        RequestScope scope = new RequestScope(\"\", \"query\", NO_VERSION, jsonApiDoc,\n-                               runningTransaction, null, queryParams,\n+                               runningTransaction, null, queryParams, null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91a9f4f7576cbadd1f7431b1316efe06fcebc810"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY2NjQ1NQ==", "bodyText": "Same comment.", "url": "https://github.com/yahoo/elide/pull/1673#discussion_r533666455", "createdAt": "2020-12-01T19:28:02Z", "author": {"login": "aklish"}, "path": "elide-async/src/test/java/com/yahoo/elide/async/export/TableExporterTest.java", "diffHunk": "@@ -92,7 +92,7 @@ public void testExporterJsonAPI() {\n     private void dataPrep() throws IOException {\n         AsyncQuery temp = new AsyncQuery();\n         DataStoreTransaction tx = dataStore.beginTransaction();\n-        RequestScope scope = new RequestScope(null, null, NO_VERSION, null, tx, user, null, UUID.randomUUID(), elide.getElideSettings());\n+        RequestScope scope = new RequestScope(null, null, NO_VERSION, null, tx, user, null, null, UUID.randomUUID(), elide.getElideSettings());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91a9f4f7576cbadd1f7431b1316efe06fcebc810"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY2NjU4Ng==", "bodyText": "empty hashmap.", "url": "https://github.com/yahoo/elide/pull/1673#discussion_r533666586", "createdAt": "2020-12-01T19:28:16Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/Elide.java", "diffHunk": "@@ -171,10 +173,28 @@ public ElideResponse get(String baseUrlEndPoint, String path, MultivaluedMap<Str\n      */\n     public ElideResponse get(String baseUrlEndPoint, String path, MultivaluedMap<String, String> queryParams,\n                              User opaqueUser, String apiVersion, UUID requestId) {\n+        return get(baseUrlEndPoint, path, queryParams, null, opaqueUser, apiVersion, requestId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91a9f4f7576cbadd1f7431b1316efe06fcebc810"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY2Njc1Mw==", "bodyText": "empty hashmap.", "url": "https://github.com/yahoo/elide/pull/1673#discussion_r533666753", "createdAt": "2020-12-01T19:28:35Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/Elide.java", "diffHunk": "@@ -212,10 +232,29 @@ public ElideResponse post(String baseUrlEndPoint, String path, String jsonApiDoc\n     public ElideResponse post(String baseUrlEndPoint, String path, String jsonApiDocument,\n                               MultivaluedMap<String, String> queryParams,\n                               User opaqueUser, String apiVersion, UUID requestId) {\n+        return post(baseUrlEndPoint, path, jsonApiDocument, queryParams, null, opaqueUser, apiVersion, requestId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91a9f4f7576cbadd1f7431b1316efe06fcebc810"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY2Njg5Mg==", "bodyText": "empty hashmap.", "url": "https://github.com/yahoo/elide/pull/1673#discussion_r533666892", "createdAt": "2020-12-01T19:28:49Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/Elide.java", "diffHunk": "@@ -260,6 +299,30 @@ public ElideResponse patch(String baseUrlEndPoint, String contentType, String ac\n                                String path, String jsonApiDocument, MultivaluedMap<String, String> queryParams,\n                                User opaqueUser, String apiVersion, UUID requestId) {\n \n+        return patch(baseUrlEndPoint, contentType, accept, path, jsonApiDocument, queryParams,\n+                null, opaqueUser, apiVersion, requestId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91a9f4f7576cbadd1f7431b1316efe06fcebc810"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY2NzAxMw==", "bodyText": "empty hashmap.", "url": "https://github.com/yahoo/elide/pull/1673#discussion_r533667013", "createdAt": "2020-12-01T19:29:01Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/Elide.java", "diffHunk": "@@ -319,12 +382,32 @@ public ElideResponse delete(String baseUrlEndPoint, String path, String jsonApiD\n     public ElideResponse delete(String baseUrlEndPoint, String path, String jsonApiDocument,\n                                 MultivaluedMap<String, String> queryParams,\n                                 User opaqueUser, String apiVersion, UUID requestId) {\n+        return delete(baseUrlEndPoint, path, jsonApiDocument, queryParams, null, opaqueUser, apiVersion, requestId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91a9f4f7576cbadd1f7431b1316efe06fcebc810"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY2NzYyNw==", "bodyText": "I don't see the Override annotation.", "url": "https://github.com/yahoo/elide/pull/1673#discussion_r533667627", "createdAt": "2020-12-01T19:30:00Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/RequestScope.java", "diffHunk": "@@ -514,4 +521,12 @@ private void registerPreSecurityObservers() {\n                         LifeCycleHookBinding.Operation.DELETE,\n                         LifeCycleHookBinding.TransactionPhase.PRESECURITY, true));\n     }\n+\n+    public String getRequestHeaderByName(String headerName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91a9f4f7576cbadd1f7431b1316efe06fcebc810"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY2NzgzOQ==", "bodyText": "empty hashmap.", "url": "https://github.com/yahoo/elide/pull/1673#discussion_r533667839", "createdAt": "2020-12-01T19:30:18Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/jsonapi/extensions/PatchRequestScope.java", "diffHunk": "@@ -47,6 +47,7 @@ public PatchRequestScope(\n                 transaction,\n                 user,\n                 (MultivaluedMap<String, String>) null,\n+                (MultivaluedMap<String, String>) null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91a9f4f7576cbadd1f7431b1316efe06fcebc810"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY3MDI0NA==", "bodyText": "Let's make this a boolean argument.", "url": "https://github.com/yahoo/elide/pull/1673#discussion_r533670244", "createdAt": "2020-12-01T19:34:31Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/EntityProjectionTranslator.java", "diffHunk": "@@ -46,13 +46,17 @@\n     private FilterExpression whereFilter;\n     private FilterExpression havingFilter;\n     private EntityDictionary dictionary;\n+    private Boolean bypassCache;\n+\n \n     public EntityProjectionTranslator(QueryEngine engine, Table table,\n-                                      EntityProjection entityProjection, EntityDictionary dictionary) {\n+                                      EntityProjection entityProjection, EntityDictionary dictionary,\n+                                      String bypassCache) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91a9f4f7576cbadd1f7431b1316efe06fcebc810"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY3MDQ4MA==", "bodyText": "This should move into the calling code.  It is a strange contract to accept a string header here.", "url": "https://github.com/yahoo/elide/pull/1673#discussion_r533670480", "createdAt": "2020-12-01T19:34:52Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/EntityProjectionTranslator.java", "diffHunk": "@@ -46,13 +46,17 @@\n     private FilterExpression whereFilter;\n     private FilterExpression havingFilter;\n     private EntityDictionary dictionary;\n+    private Boolean bypassCache;\n+\n \n     public EntityProjectionTranslator(QueryEngine engine, Table table,\n-                                      EntityProjection entityProjection, EntityDictionary dictionary) {\n+                                      EntityProjection entityProjection, EntityDictionary dictionary,\n+                                      String bypassCache) {\n         this.engine = engine;\n         this.queriedTable = table;\n         this.entityProjection = entityProjection;\n         this.dictionary = dictionary;\n+        this.bypassCache  = (bypassCache != null && bypassCache.equals(\"true\")) ? true : false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91a9f4f7576cbadd1f7431b1316efe06fcebc810"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY3MjQ0NQ==", "bodyText": "This is resolved now in elide-5.x.  You can just rebase your PR to pick up the fix.", "url": "https://github.com/yahoo/elide/pull/1673#discussion_r533672445", "createdAt": "2020-12-01T19:38:26Z", "author": {"login": "aklish"}, "path": "elide-model-config/src/test/java/com/yahoo/elide/modelconfig/validator/DynamicConfigValidatorTest.java", "diffHunk": "@@ -140,8 +140,7 @@ public void testInheritanceCycle() throws Exception {\n             assertEquals(2, exitStatus);\n         });\n \n-        assertTrue(error.contains(\"Inheriting from table\"));\n-        assertTrue(error.contains(\"creates an illegal cyclic dependency.\"));\n+        assert (\"Inheriting from table 'A' creates an illegal cyclic dependency.\\n\".equals(error) || \"Inheriting from table 'B' creates an illegal cyclic dependency.\\n\".equals(error));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91a9f4f7576cbadd1f7431b1316efe06fcebc810"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "657ae1b0836f0bb600eebbdb08d1473272a7e54a", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/657ae1b0836f0bb600eebbdb08d1473272a7e54a", "committedDate": "2020-12-01T21:26:37Z", "message": "review fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9aa3b59c8835a15c908d80b0814daf4d1fb8e046", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/9aa3b59c8835a15c908d80b0814daf4d1fb8e046", "committedDate": "2020-12-01T21:28:55Z", "message": "rebase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6ef59d096912d11fb407a2e3448da91ba793b02", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/a6ef59d096912d11fb407a2e3448da91ba793b02", "committedDate": "2020-12-01T21:53:34Z", "message": "merge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21a34fea872dcdc4a387e21420600074db85aca5", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/21a34fea872dcdc4a387e21420600074db85aca5", "committedDate": "2020-12-02T15:05:33Z", "message": "empty maps"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3479cecd2876921ced01ccbc38009b27eed48986", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/3479cecd2876921ced01ccbc38009b27eed48986", "committedDate": "2020-12-02T15:33:53Z", "message": "checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzMDYzNzEz", "url": "https://github.com/yahoo/elide/pull/1673#pullrequestreview-543063713", "createdAt": "2020-12-02T17:18:43Z", "commit": {"oid": "3479cecd2876921ced01ccbc38009b27eed48986"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 687, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}