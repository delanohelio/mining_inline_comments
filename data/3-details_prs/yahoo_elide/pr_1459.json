{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1NDA5ODgx", "number": 1459, "title": "Rebased fetch for included relations", "bodyText": "Description\nThe HQL query builder was adding fetch join for all to one relations. This PR changes the behavior to fetch them only when they are explicitly requested in the entity projection.\nMotivation and Context\nThe Fetch join for relations that are not requested are not necessary.\nHow Has This Been Tested?\nThe Unit tests are updated to test for the new behavior\nLicense\nI confirm that this contribution is made under an Apache 2.0 license and that I have the authority necessary to make this contribution on behalf of its copyright owner.\nThis PR replaces #1400. I am creating this since I was having difficulty rebasing.", "createdAt": "2020-07-22T23:46:45Z", "url": "https://github.com/yahoo/elide/pull/1459", "merged": true, "mergeCommit": {"oid": "a024e5351531b2b0af27d90b09946f603ffff549"}, "closed": true, "closedAt": "2020-08-21T15:37:35Z", "author": {"login": "suriyasundar92"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc31lrBAFqTQ1NDQxMjE4Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc_0C-9AH2gAyNDU1NDA5ODgxOjY4N2M4OGRkMGE2MzhjYWMxYmZhZGNmOTVjMzczM2NhNDNkYjgxZTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NDEyMTg3", "url": "https://github.com/yahoo/elide/pull/1459#pullrequestreview-454412187", "createdAt": "2020-07-23T18:57:37Z", "commit": {"oid": "02bacc3cb2bb1860cb257cfbb4cdd1164f1eea6b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODo1NzozN1rOG2Xj5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDozNzoyOVrOG2ashw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MjMxMA==", "bodyText": "I don't think you need the entityClass if you also have the projection (The projection should have the class as well).", "url": "https://github.com/yahoo/elide/pull/1459#discussion_r459662310", "createdAt": "2020-07-23T18:57:37Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-hibernate/src/main/java/com/yahoo/elide/core/hibernate/hql/RootCollectionFetchQueryBuilder.java", "diffHunk": "@@ -24,10 +25,10 @@\n \n     private Class<?> entityClass;\n \n-    public RootCollectionFetchQueryBuilder(Class<?> entityClass,\n+    public RootCollectionFetchQueryBuilder(EntityProjection entityProjection, Class<?> entityClass,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02bacc3cb2bb1860cb257cfbb4cdd1164f1eea6b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MzA1NQ==", "bodyText": "Remove entityClass.", "url": "https://github.com/yahoo/elide/pull/1459#discussion_r459663055", "createdAt": "2020-07-23T18:59:05Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-hibernate/src/main/java/com/yahoo/elide/core/hibernate/hql/RootCollectionPageTotalsQueryBuilder.java", "diffHunk": "@@ -27,23 +25,14 @@\n \n     private Class<?> entityClass;\n \n-    public RootCollectionPageTotalsQueryBuilder(Class<?> entityClass,\n+    public RootCollectionPageTotalsQueryBuilder(EntityProjection entityProjection,\n+                                                Class<?> entityClass,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02bacc3cb2bb1860cb257cfbb4cdd1164f1eea6b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3MTc3OQ==", "bodyText": "There is a bit of duplication between fields inside the relationship and fields inside the entityProjection.\nNot a huge deal, but I think we ought to refactor the Relationship interface in AbstractHQLQueryBuilder by:\n\nremove getChildren (its never used).\nadd a method to return the projection.\ngetChildType should have a default implementation that sources this data from the new method in 2.", "url": "https://github.com/yahoo/elide/pull/1459#discussion_r459671779", "createdAt": "2020-07-23T19:15:39Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-hibernate/src/main/java/com/yahoo/elide/core/hibernate/hql/SubCollectionFetchQueryBuilder.java", "diffHunk": "@@ -24,10 +25,11 @@\n \n     private final Relationship relationship;\n \n-    public SubCollectionFetchQueryBuilder(Relationship relationship,\n+    public SubCollectionFetchQueryBuilder(EntityProjection entityProjection,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02bacc3cb2bb1860cb257cfbb4cdd1164f1eea6b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3MzI3NA==", "bodyText": "We can remove entityClass (as it is already contained in the new entity projection parameter)", "url": "https://github.com/yahoo/elide/pull/1459#discussion_r459673274", "createdAt": "2020-07-23T19:18:36Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/AbstractJpaTransaction.java", "diffHunk": "@@ -270,13 +267,13 @@ public Object getRelation(\n      * @param <T>              The type of entity\n      * @return The total row count.\n      */\n-    private <T> Long getTotalRecords(Class<T> entityClass,\n+    private <T> Long getTotalRecords(EntityProjection entityProjection, Class<T> entityClass,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02bacc3cb2bb1860cb257cfbb4cdd1164f1eea6b"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3MzYzMQ==", "bodyText": "We can remove entityClass parameter.", "url": "https://github.com/yahoo/elide/pull/1459#discussion_r459673631", "createdAt": "2020-07-23T19:19:17Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-hibernate5/src/main/java/com/yahoo/elide/datastores/hibernate5/HibernateTransaction.java", "diffHunk": "@@ -252,13 +250,13 @@ public Object getRelation(\n      * @param <T> The type of entity\n      * @return The total row count.\n      */\n-    private <T> Long getTotalRecords(Class<T> entityClass,\n+    private <T> Long getTotalRecords(EntityProjection entityProjection, Class<T> entityClass,\n                                      Optional<FilterExpression> filterExpression,\n                                      EntityDictionary dictionary) {\n \n \n         QueryWrapper query = (QueryWrapper)\n-                new RootCollectionPageTotalsQueryBuilder(entityClass, dictionary, sessionWrapper)\n+                new RootCollectionPageTotalsQueryBuilder(entityProjection, entityClass, dictionary, sessionWrapper)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02bacc3cb2bb1860cb257cfbb4cdd1164f1eea6b"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3Mzc1NQ==", "bodyText": "We can remove entityClass parameter.", "url": "https://github.com/yahoo/elide/pull/1459#discussion_r459673755", "createdAt": "2020-07-23T19:19:30Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-hibernate5/src/main/java/com/yahoo/elide/datastores/hibernate5/HibernateTransaction.java", "diffHunk": "@@ -252,13 +250,13 @@ public Object getRelation(\n      * @param <T> The type of entity\n      * @return The total row count.\n      */\n-    private <T> Long getTotalRecords(Class<T> entityClass,\n+    private <T> Long getTotalRecords(EntityProjection entityProjection, Class<T> entityClass,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02bacc3cb2bb1860cb257cfbb4cdd1164f1eea6b"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3NDg1Mw==", "bodyText": "We can remove the entityClass param.", "url": "https://github.com/yahoo/elide/pull/1459#discussion_r459674853", "createdAt": "2020-07-23T19:21:22Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-hibernate3/src/main/java/com/yahoo/elide/datastores/hibernate3/HibernateTransaction.java", "diffHunk": "@@ -245,31 +246,35 @@ public Object getRelation(\n      * @param <T> The type of entity\n      * @return The total row count.\n      */\n-    private <T> Long getTotalRecords(Class<T> entityClass,\n+    private <T> Long getTotalRecords(EntityProjection entityProjection,\n+                                     Class<T> entityClass,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02bacc3cb2bb1860cb257cfbb4cdd1164f1eea6b"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3NTA1OA==", "bodyText": "We can remove the entityClass param.", "url": "https://github.com/yahoo/elide/pull/1459#discussion_r459675058", "createdAt": "2020-07-23T19:21:44Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-hibernate3/src/main/java/com/yahoo/elide/datastores/hibernate3/HibernateTransaction.java", "diffHunk": "@@ -163,18 +164,16 @@ public Object loadObject(EntityProjection projection,\n         Class<?> entityClass = projection.getType();\n         Pagination pagination = projection.getPagination();\n         FilterExpression filterExpression = projection.getFilterExpression();\n-        Sorting sorting = projection.getSorting();\n \n         if (pagination != null && pagination.returnPageTotals()) {\n-            pagination.setPageTotals(getTotalRecords(entityClass,\n+            pagination.setPageTotals(getTotalRecords(projection, entityClass,\n                     Optional.ofNullable(filterExpression), scope.getDictionary()));\n         }\n \n         final QueryWrapper query =\n-                (QueryWrapper) new RootCollectionFetchQueryBuilder(entityClass, scope.getDictionary(), sessionWrapper)\n+                (QueryWrapper) new RootCollectionFetchQueryBuilder(projection, entityClass,\n+                        scope.getDictionary(), sessionWrapper)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02bacc3cb2bb1860cb257cfbb4cdd1164f1eea6b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3NzI0MQ==", "bodyText": "Technically, the entity projection should have the filter clause too.", "url": "https://github.com/yahoo/elide/pull/1459#discussion_r459677241", "createdAt": "2020-07-23T19:25:49Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-hibernate/src/test/java/com/yahoo/elide/datastores/hibernate/hql/SubCollectionPageTotalsQueryBuilderTest.java", "diffHunk": "@@ -132,8 +189,10 @@ public void testSubCollectionPageTotalsWithJoinFilter() {\n                 new Path(publisherNamePath),\n                 \"Pub1\");\n \n+        EntityProjection entityProjection = EntityProjection.builder().type(Book.class).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02bacc3cb2bb1860cb257cfbb4cdd1164f1eea6b"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcxMTkxNw==", "bodyText": "Setting and resetting the mock this way (including the old code) seems fairly hacky.\nI suggest we initialize this class with a mock entity projection.  Let's add a @BeforeEach or AfterEach annotation which resets the mocks.\nEach method will have to setup the projection the way that. makes the most sense.", "url": "https://github.com/yahoo/elide/pull/1459#discussion_r459711917", "createdAt": "2020-07-23T20:33:59Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-hibernate/src/test/java/com/yahoo/elide/datastores/hibernate/hql/AbstractHQLQueryBuilderTest.java", "diffHunk": "@@ -179,20 +190,20 @@ public void testSettingQueryParams() {\n     public void testSettingQueryPagination() {\n         Query query = mock(Query.class);\n \n-        Optional<Pagination> previousPagination = pagination;\n-\n         PaginationImpl paginationMock = mock(PaginationImpl.class);\n         when(paginationMock.getLimit()).thenReturn(10);\n         when(paginationMock.getOffset()).thenReturn(50);\n \n-        pagination = Optional.of(paginationMock);\n+        EntityProjection previousEntityProjection = entityProjection;\n+        entityProjection = mock(EntityProjection.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02bacc3cb2bb1860cb257cfbb4cdd1164f1eea6b"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcxMjExMw==", "bodyText": "Do we need a method for this?", "url": "https://github.com/yahoo/elide/pull/1459#discussion_r459712113", "createdAt": "2020-07-23T20:34:22Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-hibernate/src/test/java/com/yahoo/elide/datastores/hibernate/hql/AbstractHQLQueryBuilderTest.java", "diffHunk": "@@ -54,15 +55,21 @@\n     private static final String DEF = \"DEF\";\n     private static final String NAME = \"name\";\n \n+\n     public AbstractHQLQueryBuilderTest() {\n-        super(new EntityDictionary(new HashMap<>()), new TestSessionWrapper());\n+        super(getMockEntityProjection(), new EntityDictionary(new HashMap<>()), new TestSessionWrapper());\n         dictionary.bindEntity(Author.class);\n         dictionary.bindEntity(Book.class);\n         dictionary.bindEntity(Chapter.class);\n         dictionary.bindEntity(Publisher.class);\n         dictionary.bindEntity(Left.class);\n     }\n \n+    private static  EntityProjection getMockEntityProjection() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02bacc3cb2bb1860cb257cfbb4cdd1164f1eea6b"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcxMzY3MQ==", "bodyText": "The entity projection includes the Filter as well (not just the sorting and the pagination)", "url": "https://github.com/yahoo/elide/pull/1459#discussion_r459713671", "createdAt": "2020-07-23T20:37:29Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-hibernate/src/main/java/com/yahoo/elide/core/hibernate/hql/AbstractHQLQueryBuilder.java", "diffHunk": "@@ -88,16 +86,6 @@ public AbstractHQLQueryBuilder withPossibleFilterExpression(Optional<FilterExpre\n         return this;\n     }\n \n-    public AbstractHQLQueryBuilder withPossibleSorting(final Optional<Sorting> possibleSorting) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02bacc3cb2bb1860cb257cfbb4cdd1164f1eea6b"}, "originalPosition": 40}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "02bacc3cb2bb1860cb257cfbb4cdd1164f1eea6b", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/02bacc3cb2bb1860cb257cfbb4cdd1164f1eea6b", "committedDate": "2020-07-22T19:52:10Z", "message": "Addressing comments"}, "afterCommit": {"oid": "0db34723da81bd09818b7b57eda150197c318cba", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/0db34723da81bd09818b7b57eda150197c318cba", "committedDate": "2020-08-12T16:12:06Z", "message": "Adding fetch joins only when required"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37710dc6829b8043ad92fb1d9f8a4e4b2acc32c2", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/37710dc6829b8043ad92fb1d9f8a4e4b2acc32c2", "committedDate": "2020-08-13T04:45:59Z", "message": "Adding fetch joins only when required"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0db34723da81bd09818b7b57eda150197c318cba", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/0db34723da81bd09818b7b57eda150197c318cba", "committedDate": "2020-08-12T16:12:06Z", "message": "Adding fetch joins only when required"}, "afterCommit": {"oid": "37710dc6829b8043ad92fb1d9f8a4e4b2acc32c2", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/37710dc6829b8043ad92fb1d9f8a4e4b2acc32c2", "committedDate": "2020-08-13T04:45:59Z", "message": "Adding fetch joins only when required"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3Njk1OTk3", "url": "https://github.com/yahoo/elide/pull/1459#pullrequestreview-467695997", "createdAt": "2020-08-14T16:05:55Z", "commit": {"oid": "37710dc6829b8043ad92fb1d9f8a4e4b2acc32c2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjowNTo1NVrOHA6SOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjowNzoyNVrOHA6VEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcxNjk4NQ==", "bodyText": "This method should get the entityProjection from the relationship - so there is no parameter duplication", "url": "https://github.com/yahoo/elide/pull/1459#discussion_r470716985", "createdAt": "2020-08-14T16:05:55Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-hibernate/src/main/java/com/yahoo/elide/core/hibernate/hql/SubCollectionFetchQueryBuilder.java", "diffHunk": "@@ -24,10 +26,11 @@\n \n     private final Relationship relationship;\n \n-    public SubCollectionFetchQueryBuilder(Relationship relationship,\n+    public SubCollectionFetchQueryBuilder(EntityProjection entityProjection,\n+                                          Relationship relationship,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37710dc6829b8043ad92fb1d9f8a4e4b2acc32c2"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcxNzcxNQ==", "bodyText": "Same comment here.  getTotalRecords should only really need the relationship.", "url": "https://github.com/yahoo/elide/pull/1459#discussion_r470717715", "createdAt": "2020-08-14T16:07:25Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-hibernate5/src/main/java/com/yahoo/elide/datastores/hibernate5/HibernateTransaction.java", "diffHunk": "@@ -223,26 +218,23 @@ public Object getRelation(\n                     return val;\n                 }\n \n-                Class<?> relationClass = dictionary.getParameterizedType(entity, relation.getName());\n-\n                 RelationshipImpl relationship = new RelationshipImpl(\n                         dictionary.lookupEntityClass(entity.getClass()),\n-                        relationClass,\n-                        relation.getName(),\n                         entity,\n-                        filteredVal);\n+                        relation\n+                );\n \n                 if (pagination != null && pagination.returnPageTotals()) {\n-                    pagination.setPageTotals(getTotalRecords(relationship,\n-                            Optional.ofNullable(filterExpression), scope.getDictionary()));\n+                    pagination.setPageTotals(getTotalRecords(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37710dc6829b8043ad92fb1d9f8a4e4b2acc32c2"}, "originalPosition": 72}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca6b1b71b43a460049e8a1e1b5ce17b3e9adf3cb", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/ca6b1b71b43a460049e8a1e1b5ce17b3e9adf3cb", "committedDate": "2020-08-16T14:39:17Z", "message": "Addressing comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "687c88dd0a638cac1bfadcf95c3733ca43db81e2", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/687c88dd0a638cac1bfadcf95c3733ca43db81e2", "committedDate": "2020-08-17T15:21:38Z", "message": "Remove unused argument"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 781, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}