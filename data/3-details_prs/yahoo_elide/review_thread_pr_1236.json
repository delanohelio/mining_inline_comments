{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzODIxMTcw", "number": 1236, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMToyNToyN1rODrZ5eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMTo0MjoxMlrODraO-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODM5NjczOnYy", "diffSide": "RIGHT", "path": "elide-core/src/main/java/com/yahoo/elide/core/EnforceJoinFilterExpressionVisitor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMToyNToyN1rOF7u8yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMTo0Mzo0MFrOF7vhGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE3OTUzMA==", "bodyText": "should be left || right.", "url": "https://github.com/yahoo/elide/pull/1236#discussion_r398179530", "createdAt": "2020-03-25T21:25:27Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/EnforceJoinFilterExpressionVisitor.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.core;\n+\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.core.exceptions.ForbiddenAccessException;\n+import com.yahoo.elide.core.filter.FilterPredicate;\n+import com.yahoo.elide.core.filter.expression.AndFilterExpression;\n+import com.yahoo.elide.core.filter.expression.FilterExpressionVisitor;\n+import com.yahoo.elide.core.filter.expression.NotFilterExpression;\n+import com.yahoo.elide.core.filter.expression.OrFilterExpression;\n+\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.Spliterators;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * Enforce read permission on filter join\n+ */\n+public class EnforceJoinFilterExpressionVisitor implements FilterExpressionVisitor<Boolean> {\n+    private PersistentResource<?> resource;\n+\n+    public EnforceJoinFilterExpressionVisitor(PersistentResource<?> resource) {\n+        this.resource = resource;\n+    }\n+\n+    /**\n+     * Enforce ReadPermission on provided query filter\n+     *\n+     * @return true if allowed, false if rejected\n+     */\n+    @Override\n+    public Boolean visitPredicate(FilterPredicate filterPredicate) {\n+        RequestScope requestScope = resource.getRequestScope();\n+        Set<PersistentResource> val = Collections.singleton(resource);\n+        for (Path.PathElement pathElement : filterPredicate.getPath().getPathElements()) {\n+            Class<?> entityClass = pathElement.getType();\n+            String fieldName = pathElement.getFieldName();\n+\n+            if (\"this\".equals(fieldName)) {\n+                continue;\n+            }\n+\n+            try {\n+                val = val.stream()\n+                        .filter(Objects::nonNull)\n+                        .flatMap(x -> getValueChecked(x, fieldName, requestScope))\n+                        .filter(Objects::nonNull)\n+                        .collect(Collectors.toSet());\n+            } catch (IllegalArgumentException e) {\n+                // Not a persistent resource\n+            } catch (ForbiddenAccessException e) {\n+                return false;\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+    private Stream<PersistentResource> getValueChecked(PersistentResource<?> resource, String fieldName,\n+            RequestScope requestScope) {\n+        // checkFieldAwareReadPermissions\n+        requestScope.getPermissionExecutor().checkSpecificFieldPermissions(resource, null, ReadPermission.class,\n+                fieldName);\n+        Object obj = PersistentResource.getValue(resource.getObject(), fieldName, requestScope);\n+        PersistentResourceSet persistentResourceSet;\n+        if (obj instanceof Iterable) {\n+            persistentResourceSet = new PersistentResourceSet(resource, (Iterable) obj, requestScope);\n+        } else if (obj != null) {\n+            persistentResourceSet = new PersistentResourceSet(resource, Collections.singleton(obj), requestScope);\n+        } else {\n+            return Stream.empty();\n+        }\n+\n+        return StreamSupport.stream(Spliterators.spliteratorUnknownSize(persistentResourceSet.iterator(), 0), false);\n+    }\n+\n+    @Override\n+    public Boolean visitAndExpression(AndFilterExpression expression) {\n+        Boolean left = expression.getLeft().accept(this);\n+        Boolean right = expression.getRight().accept(this);\n+        // neither rejected\n+        return left && right;\n+    }\n+\n+    @Override\n+    public Boolean visitOrExpression(OrFilterExpression expression) {\n+        Boolean left = expression.getLeft().accept(this);\n+        Boolean right = expression.getRight().accept(this);\n+        // neither rejected\n+        return left && right;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a985f0f9c448aabe70bc904337096399de4576dc"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4ODgyNQ==", "bodyText": "No. true is valid, false is rejected.  If either is rejected, we want false.", "url": "https://github.com/yahoo/elide/pull/1236#discussion_r398188825", "createdAt": "2020-03-25T21:43:40Z", "author": {"login": "wcekan"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/EnforceJoinFilterExpressionVisitor.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.core;\n+\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.core.exceptions.ForbiddenAccessException;\n+import com.yahoo.elide.core.filter.FilterPredicate;\n+import com.yahoo.elide.core.filter.expression.AndFilterExpression;\n+import com.yahoo.elide.core.filter.expression.FilterExpressionVisitor;\n+import com.yahoo.elide.core.filter.expression.NotFilterExpression;\n+import com.yahoo.elide.core.filter.expression.OrFilterExpression;\n+\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.Spliterators;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * Enforce read permission on filter join\n+ */\n+public class EnforceJoinFilterExpressionVisitor implements FilterExpressionVisitor<Boolean> {\n+    private PersistentResource<?> resource;\n+\n+    public EnforceJoinFilterExpressionVisitor(PersistentResource<?> resource) {\n+        this.resource = resource;\n+    }\n+\n+    /**\n+     * Enforce ReadPermission on provided query filter\n+     *\n+     * @return true if allowed, false if rejected\n+     */\n+    @Override\n+    public Boolean visitPredicate(FilterPredicate filterPredicate) {\n+        RequestScope requestScope = resource.getRequestScope();\n+        Set<PersistentResource> val = Collections.singleton(resource);\n+        for (Path.PathElement pathElement : filterPredicate.getPath().getPathElements()) {\n+            Class<?> entityClass = pathElement.getType();\n+            String fieldName = pathElement.getFieldName();\n+\n+            if (\"this\".equals(fieldName)) {\n+                continue;\n+            }\n+\n+            try {\n+                val = val.stream()\n+                        .filter(Objects::nonNull)\n+                        .flatMap(x -> getValueChecked(x, fieldName, requestScope))\n+                        .filter(Objects::nonNull)\n+                        .collect(Collectors.toSet());\n+            } catch (IllegalArgumentException e) {\n+                // Not a persistent resource\n+            } catch (ForbiddenAccessException e) {\n+                return false;\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+    private Stream<PersistentResource> getValueChecked(PersistentResource<?> resource, String fieldName,\n+            RequestScope requestScope) {\n+        // checkFieldAwareReadPermissions\n+        requestScope.getPermissionExecutor().checkSpecificFieldPermissions(resource, null, ReadPermission.class,\n+                fieldName);\n+        Object obj = PersistentResource.getValue(resource.getObject(), fieldName, requestScope);\n+        PersistentResourceSet persistentResourceSet;\n+        if (obj instanceof Iterable) {\n+            persistentResourceSet = new PersistentResourceSet(resource, (Iterable) obj, requestScope);\n+        } else if (obj != null) {\n+            persistentResourceSet = new PersistentResourceSet(resource, Collections.singleton(obj), requestScope);\n+        } else {\n+            return Stream.empty();\n+        }\n+\n+        return StreamSupport.stream(Spliterators.spliteratorUnknownSize(persistentResourceSet.iterator(), 0), false);\n+    }\n+\n+    @Override\n+    public Boolean visitAndExpression(AndFilterExpression expression) {\n+        Boolean left = expression.getLeft().accept(this);\n+        Boolean right = expression.getRight().accept(this);\n+        // neither rejected\n+        return left && right;\n+    }\n+\n+    @Override\n+    public Boolean visitOrExpression(OrFilterExpression expression) {\n+        Boolean left = expression.getLeft().accept(this);\n+        Boolean right = expression.getRight().accept(this);\n+        // neither rejected\n+        return left && right;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE3OTUzMA=="}, "originalCommit": {"oid": "a985f0f9c448aabe70bc904337096399de4576dc"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODM5ODg0OnYy", "diffSide": "RIGHT", "path": "elide-core/src/main/java/com/yahoo/elide/core/EnforceJoinFilterExpressionVisitor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMToyNTo1M1rOF7u97g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjowNjoyOFrOF7wKmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE3OTgyMg==", "bodyText": "We need to negate the value of the accept.", "url": "https://github.com/yahoo/elide/pull/1236#discussion_r398179822", "createdAt": "2020-03-25T21:25:53Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/EnforceJoinFilterExpressionVisitor.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.core;\n+\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.core.exceptions.ForbiddenAccessException;\n+import com.yahoo.elide.core.filter.FilterPredicate;\n+import com.yahoo.elide.core.filter.expression.AndFilterExpression;\n+import com.yahoo.elide.core.filter.expression.FilterExpressionVisitor;\n+import com.yahoo.elide.core.filter.expression.NotFilterExpression;\n+import com.yahoo.elide.core.filter.expression.OrFilterExpression;\n+\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.Spliterators;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * Enforce read permission on filter join\n+ */\n+public class EnforceJoinFilterExpressionVisitor implements FilterExpressionVisitor<Boolean> {\n+    private PersistentResource<?> resource;\n+\n+    public EnforceJoinFilterExpressionVisitor(PersistentResource<?> resource) {\n+        this.resource = resource;\n+    }\n+\n+    /**\n+     * Enforce ReadPermission on provided query filter\n+     *\n+     * @return true if allowed, false if rejected\n+     */\n+    @Override\n+    public Boolean visitPredicate(FilterPredicate filterPredicate) {\n+        RequestScope requestScope = resource.getRequestScope();\n+        Set<PersistentResource> val = Collections.singleton(resource);\n+        for (Path.PathElement pathElement : filterPredicate.getPath().getPathElements()) {\n+            Class<?> entityClass = pathElement.getType();\n+            String fieldName = pathElement.getFieldName();\n+\n+            if (\"this\".equals(fieldName)) {\n+                continue;\n+            }\n+\n+            try {\n+                val = val.stream()\n+                        .filter(Objects::nonNull)\n+                        .flatMap(x -> getValueChecked(x, fieldName, requestScope))\n+                        .filter(Objects::nonNull)\n+                        .collect(Collectors.toSet());\n+            } catch (IllegalArgumentException e) {\n+                // Not a persistent resource\n+            } catch (ForbiddenAccessException e) {\n+                return false;\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+    private Stream<PersistentResource> getValueChecked(PersistentResource<?> resource, String fieldName,\n+            RequestScope requestScope) {\n+        // checkFieldAwareReadPermissions\n+        requestScope.getPermissionExecutor().checkSpecificFieldPermissions(resource, null, ReadPermission.class,\n+                fieldName);\n+        Object obj = PersistentResource.getValue(resource.getObject(), fieldName, requestScope);\n+        PersistentResourceSet persistentResourceSet;\n+        if (obj instanceof Iterable) {\n+            persistentResourceSet = new PersistentResourceSet(resource, (Iterable) obj, requestScope);\n+        } else if (obj != null) {\n+            persistentResourceSet = new PersistentResourceSet(resource, Collections.singleton(obj), requestScope);\n+        } else {\n+            return Stream.empty();\n+        }\n+\n+        return StreamSupport.stream(Spliterators.spliteratorUnknownSize(persistentResourceSet.iterator(), 0), false);\n+    }\n+\n+    @Override\n+    public Boolean visitAndExpression(AndFilterExpression expression) {\n+        Boolean left = expression.getLeft().accept(this);\n+        Boolean right = expression.getRight().accept(this);\n+        // neither rejected\n+        return left && right;\n+    }\n+\n+    @Override\n+    public Boolean visitOrExpression(OrFilterExpression expression) {\n+        Boolean left = expression.getLeft().accept(this);\n+        Boolean right = expression.getRight().accept(this);\n+        // neither rejected\n+        return left && right;\n+    }\n+\n+    @Override\n+    public Boolean visitNotExpression(NotFilterExpression expression) {\n+        // check rejected\n+        return expression.getNegated().accept(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a985f0f9c448aabe70bc904337096399de4576dc"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE5OTQ0OQ==", "bodyText": "No.  We are not negating allowed or rejected.\nbook.authors.homeAddress[NOT]='main' should still be rejected.", "url": "https://github.com/yahoo/elide/pull/1236#discussion_r398199449", "createdAt": "2020-03-25T22:06:28Z", "author": {"login": "wcekan"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/EnforceJoinFilterExpressionVisitor.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.core;\n+\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.core.exceptions.ForbiddenAccessException;\n+import com.yahoo.elide.core.filter.FilterPredicate;\n+import com.yahoo.elide.core.filter.expression.AndFilterExpression;\n+import com.yahoo.elide.core.filter.expression.FilterExpressionVisitor;\n+import com.yahoo.elide.core.filter.expression.NotFilterExpression;\n+import com.yahoo.elide.core.filter.expression.OrFilterExpression;\n+\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.Spliterators;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * Enforce read permission on filter join\n+ */\n+public class EnforceJoinFilterExpressionVisitor implements FilterExpressionVisitor<Boolean> {\n+    private PersistentResource<?> resource;\n+\n+    public EnforceJoinFilterExpressionVisitor(PersistentResource<?> resource) {\n+        this.resource = resource;\n+    }\n+\n+    /**\n+     * Enforce ReadPermission on provided query filter\n+     *\n+     * @return true if allowed, false if rejected\n+     */\n+    @Override\n+    public Boolean visitPredicate(FilterPredicate filterPredicate) {\n+        RequestScope requestScope = resource.getRequestScope();\n+        Set<PersistentResource> val = Collections.singleton(resource);\n+        for (Path.PathElement pathElement : filterPredicate.getPath().getPathElements()) {\n+            Class<?> entityClass = pathElement.getType();\n+            String fieldName = pathElement.getFieldName();\n+\n+            if (\"this\".equals(fieldName)) {\n+                continue;\n+            }\n+\n+            try {\n+                val = val.stream()\n+                        .filter(Objects::nonNull)\n+                        .flatMap(x -> getValueChecked(x, fieldName, requestScope))\n+                        .filter(Objects::nonNull)\n+                        .collect(Collectors.toSet());\n+            } catch (IllegalArgumentException e) {\n+                // Not a persistent resource\n+            } catch (ForbiddenAccessException e) {\n+                return false;\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+    private Stream<PersistentResource> getValueChecked(PersistentResource<?> resource, String fieldName,\n+            RequestScope requestScope) {\n+        // checkFieldAwareReadPermissions\n+        requestScope.getPermissionExecutor().checkSpecificFieldPermissions(resource, null, ReadPermission.class,\n+                fieldName);\n+        Object obj = PersistentResource.getValue(resource.getObject(), fieldName, requestScope);\n+        PersistentResourceSet persistentResourceSet;\n+        if (obj instanceof Iterable) {\n+            persistentResourceSet = new PersistentResourceSet(resource, (Iterable) obj, requestScope);\n+        } else if (obj != null) {\n+            persistentResourceSet = new PersistentResourceSet(resource, Collections.singleton(obj), requestScope);\n+        } else {\n+            return Stream.empty();\n+        }\n+\n+        return StreamSupport.stream(Spliterators.spliteratorUnknownSize(persistentResourceSet.iterator(), 0), false);\n+    }\n+\n+    @Override\n+    public Boolean visitAndExpression(AndFilterExpression expression) {\n+        Boolean left = expression.getLeft().accept(this);\n+        Boolean right = expression.getRight().accept(this);\n+        // neither rejected\n+        return left && right;\n+    }\n+\n+    @Override\n+    public Boolean visitOrExpression(OrFilterExpression expression) {\n+        Boolean left = expression.getLeft().accept(this);\n+        Boolean right = expression.getRight().accept(this);\n+        // neither rejected\n+        return left && right;\n+    }\n+\n+    @Override\n+    public Boolean visitNotExpression(NotFilterExpression expression) {\n+        // check rejected\n+        return expression.getNegated().accept(this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE3OTgyMg=="}, "originalCommit": {"oid": "a985f0f9c448aabe70bc904337096399de4576dc"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODQwMzM3OnYy", "diffSide": "RIGHT", "path": "elide-core/src/main/java/com/yahoo/elide/core/EnforceJoinFilterExpressionVisitor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMToyNzoxOVrOF7vAmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjowNzowNFrOF7wLsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4MDUwNA==", "bodyText": "Maybe a better name would be VerifyFieldAccessFilterExpressionVisitor", "url": "https://github.com/yahoo/elide/pull/1236#discussion_r398180504", "createdAt": "2020-03-25T21:27:19Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/EnforceJoinFilterExpressionVisitor.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.core;\n+\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.core.exceptions.ForbiddenAccessException;\n+import com.yahoo.elide.core.filter.FilterPredicate;\n+import com.yahoo.elide.core.filter.expression.AndFilterExpression;\n+import com.yahoo.elide.core.filter.expression.FilterExpressionVisitor;\n+import com.yahoo.elide.core.filter.expression.NotFilterExpression;\n+import com.yahoo.elide.core.filter.expression.OrFilterExpression;\n+\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.Spliterators;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * Enforce read permission on filter join\n+ */\n+public class EnforceJoinFilterExpressionVisitor implements FilterExpressionVisitor<Boolean> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a985f0f9c448aabe70bc904337096399de4576dc"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE5OTczMA==", "bodyText": "sure.", "url": "https://github.com/yahoo/elide/pull/1236#discussion_r398199730", "createdAt": "2020-03-25T22:07:04Z", "author": {"login": "wcekan"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/EnforceJoinFilterExpressionVisitor.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.core;\n+\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.core.exceptions.ForbiddenAccessException;\n+import com.yahoo.elide.core.filter.FilterPredicate;\n+import com.yahoo.elide.core.filter.expression.AndFilterExpression;\n+import com.yahoo.elide.core.filter.expression.FilterExpressionVisitor;\n+import com.yahoo.elide.core.filter.expression.NotFilterExpression;\n+import com.yahoo.elide.core.filter.expression.OrFilterExpression;\n+\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.Spliterators;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * Enforce read permission on filter join\n+ */\n+public class EnforceJoinFilterExpressionVisitor implements FilterExpressionVisitor<Boolean> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4MDUwNA=="}, "originalCommit": {"oid": "a985f0f9c448aabe70bc904337096399de4576dc"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODQ0Mjg4OnYy", "diffSide": "RIGHT", "path": "elide-core/src/main/java/com/yahoo/elide/core/PersistentResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMTozOToxMlrOF7vYVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMzo0Njo0M1rOF7ygdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4NjU4MA==", "bodyText": "Update the javadoc above.", "url": "https://github.com/yahoo/elide/pull/1236#discussion_r398186580", "createdAt": "2020-03-25T21:39:12Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/PersistentResource.java", "diffHunk": "@@ -1557,7 +1558,8 @@ protected void addInverseRelation(String relationName, Object inverseObj) {\n      * @return Filtered set of resources\n      */\n     protected static Set<PersistentResource> filter(Class<? extends Annotation> permission,\n-                                                    Set<PersistentResource> resources) {\n+            Optional<FilterExpression> filter,\n+            Set<PersistentResource> resources) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a985f0f9c448aabe70bc904337096399de4576dc"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIzNzgxNQ==", "bodyText": "done.", "url": "https://github.com/yahoo/elide/pull/1236#discussion_r398237815", "createdAt": "2020-03-25T23:46:43Z", "author": {"login": "wcekan"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/PersistentResource.java", "diffHunk": "@@ -1557,7 +1558,8 @@ protected void addInverseRelation(String relationName, Object inverseObj) {\n      * @return Filtered set of resources\n      */\n     protected static Set<PersistentResource> filter(Class<? extends Annotation> permission,\n-                                                    Set<PersistentResource> resources) {\n+            Optional<FilterExpression> filter,\n+            Set<PersistentResource> resources) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4NjU4MA=="}, "originalCommit": {"oid": "a985f0f9c448aabe70bc904337096399de4576dc"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODQ0OTg5OnYy", "diffSide": "RIGHT", "path": "elide-integration-tests/src/test/java/com/yahoo/elide/tests/FilterIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMTo0MTozNFrOF7vc4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjowNzo0NFrOF7wMsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4Nzc0NA==", "bodyText": "Why does this give a bad request but the above tests returns an empty data?  I suspect the RSQL filter is formatted incorrectly.", "url": "https://github.com/yahoo/elide/pull/1236#discussion_r398187744", "createdAt": "2020-03-25T21:41:34Z", "author": {"login": "aklish"}, "path": "elide-integration-tests/src/test/java/com/yahoo/elide/tests/FilterIT.java", "diffHunk": "@@ -1362,6 +1362,21 @@ void testFailFilterAuthorBookByChapter() throws IOException {\n         assertNotNull(result.get(\"errors\"));\n     }\n \n+    @Test\n+    void testFailFilterBookByAuthorAddress() throws IOException {\n+        /* Test default */\n+        JsonNode result = getAsNode(\"book?filter[book.authors.homeAddress]=main&include=authors\");\n+        JsonNode data = result.get(\"data\");\n+        assertEquals(0, data.size(), result.toString());\n+\n+        /* Test RSQL */\n+        result = getAsNode(\n+                String.format(\"book?filter[book]=authors.homeAddress=='main'\", hemingwayId),\n+                HttpStatus.SC_BAD_REQUEST);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a985f0f9c448aabe70bc904337096399de4576dc"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE5OTk4Nw==", "bodyText": "Bad merge.  Will fix that.", "url": "https://github.com/yahoo/elide/pull/1236#discussion_r398199987", "createdAt": "2020-03-25T22:07:44Z", "author": {"login": "wcekan"}, "path": "elide-integration-tests/src/test/java/com/yahoo/elide/tests/FilterIT.java", "diffHunk": "@@ -1362,6 +1362,21 @@ void testFailFilterAuthorBookByChapter() throws IOException {\n         assertNotNull(result.get(\"errors\"));\n     }\n \n+    @Test\n+    void testFailFilterBookByAuthorAddress() throws IOException {\n+        /* Test default */\n+        JsonNode result = getAsNode(\"book?filter[book.authors.homeAddress]=main&include=authors\");\n+        JsonNode data = result.get(\"data\");\n+        assertEquals(0, data.size(), result.toString());\n+\n+        /* Test RSQL */\n+        result = getAsNode(\n+                String.format(\"book?filter[book]=authors.homeAddress=='main'\", hemingwayId),\n+                HttpStatus.SC_BAD_REQUEST);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4Nzc0NA=="}, "originalCommit": {"oid": "a985f0f9c448aabe70bc904337096399de4576dc"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODQ1MTc2OnYy", "diffSide": "RIGHT", "path": "elide-core/src/main/java/com/yahoo/elide/core/EnforceJoinFilterExpressionVisitor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMTo0MjoxMlrOF7veLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjowNzo1OVrOF7wNLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4ODA3Nw==", "bodyText": "Can we add a Unit test for this class to test the different visitor methods?", "url": "https://github.com/yahoo/elide/pull/1236#discussion_r398188077", "createdAt": "2020-03-25T21:42:12Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/EnforceJoinFilterExpressionVisitor.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.core;\n+\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.core.exceptions.ForbiddenAccessException;\n+import com.yahoo.elide.core.filter.FilterPredicate;\n+import com.yahoo.elide.core.filter.expression.AndFilterExpression;\n+import com.yahoo.elide.core.filter.expression.FilterExpressionVisitor;\n+import com.yahoo.elide.core.filter.expression.NotFilterExpression;\n+import com.yahoo.elide.core.filter.expression.OrFilterExpression;\n+\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.Spliterators;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * Enforce read permission on filter join\n+ */\n+public class EnforceJoinFilterExpressionVisitor implements FilterExpressionVisitor<Boolean> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a985f0f9c448aabe70bc904337096399de4576dc"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwMDEwOA==", "bodyText": "Can try.", "url": "https://github.com/yahoo/elide/pull/1236#discussion_r398200108", "createdAt": "2020-03-25T22:07:59Z", "author": {"login": "wcekan"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/EnforceJoinFilterExpressionVisitor.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.core;\n+\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.core.exceptions.ForbiddenAccessException;\n+import com.yahoo.elide.core.filter.FilterPredicate;\n+import com.yahoo.elide.core.filter.expression.AndFilterExpression;\n+import com.yahoo.elide.core.filter.expression.FilterExpressionVisitor;\n+import com.yahoo.elide.core.filter.expression.NotFilterExpression;\n+import com.yahoo.elide.core.filter.expression.OrFilterExpression;\n+\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.Spliterators;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * Enforce read permission on filter join\n+ */\n+public class EnforceJoinFilterExpressionVisitor implements FilterExpressionVisitor<Boolean> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4ODA3Nw=="}, "originalCommit": {"oid": "a985f0f9c448aabe70bc904337096399de4576dc"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1082, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}