{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUxNDk2NDY2", "number": 1448, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMjoxODo1NFrOEPsKUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTowOToxN1rOERnekQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODg3NjMzOnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMjoxODo1NFrOGzil8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDozNDozOFrOG1Iw-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY5NzMzMA==", "bodyText": "Why not just set the logger in the constructor?", "url": "https://github.com/yahoo/elide/pull/1448#discussion_r456697330", "createdAt": "2020-07-17T22:18:54Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java", "diffHunk": "@@ -74,6 +76,11 @@ public void populateEntityDictionary(EntityDictionary dictionary) {\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-        return new AggregationDataStoreTransaction(queryEngine, cache);\n+        return new AggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n+    }\n+\n+    public AggregationDataStore setupCustomQueryLogger(QueryLogger logger) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab4b03a37aed5df33c34cc0444a8f613db76fef3"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcwNDM5Mw==", "bodyText": "For navi or any other external application to instantiate their own querylogger, this function can be used to update the default QueryLogger from Noop to their custom querylogger.", "url": "https://github.com/yahoo/elide/pull/1448#discussion_r456704393", "createdAt": "2020-07-17T22:46:42Z", "author": {"login": "dvarshney1"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java", "diffHunk": "@@ -74,6 +76,11 @@ public void populateEntityDictionary(EntityDictionary dictionary) {\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-        return new AggregationDataStoreTransaction(queryEngine, cache);\n+        return new AggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n+    }\n+\n+    public AggregationDataStore setupCustomQueryLogger(QueryLogger logger) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY5NzMzMA=="}, "originalCommit": {"oid": "ab4b03a37aed5df33c34cc0444a8f613db76fef3"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM3MTMyMg==", "bodyText": "That should happen in the constructor though - not a set function.  Ideally, most stuff should be immutable.", "url": "https://github.com/yahoo/elide/pull/1448#discussion_r458371322", "createdAt": "2020-07-21T20:34:38Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java", "diffHunk": "@@ -74,6 +76,11 @@ public void populateEntityDictionary(EntityDictionary dictionary) {\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-        return new AggregationDataStoreTransaction(queryEngine, cache);\n+        return new AggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n+    }\n+\n+    public AggregationDataStore setupCustomQueryLogger(QueryLogger logger) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY5NzMzMA=="}, "originalCommit": {"oid": "ab4b03a37aed5df33c34cc0444a8f613db76fef3"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODg3OTU1OnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMjoyMDozMFrOGzinsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMToxMTo1N1rOG0fcgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY5Nzc3Nw==", "bodyText": "There are enums with the HTTP status codes (Like HttpStatus).", "url": "https://github.com/yahoo/elide/pull/1448#discussion_r456697777", "createdAt": "2020-07-17T22:20:30Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java", "diffHunk": "@@ -61,27 +70,41 @@ public void createObject(Object entity, RequestScope scope) {\n \n     @Override\n     public Iterable<Object> loadObjects(EntityProjection entityProjection, RequestScope scope) {\n-        Query query = buildQuery(entityProjection, scope);\n         QueryResult result = null;\n-\n+        QueryResponse response = null;\n         String cacheKey = null;\n-        if (cache != null && !query.isBypassingCache()) {\n-            String tableVersion = queryEngine.getTableVersion(query.getTable(), queryEngineTransaction);\n-            if (tableVersion != null) {\n-                cacheKey = tableVersion + ';' + QueryKeyExtractor.extractKey(query);\n-                result = cache.get(cacheKey);\n+        try {\n+            aggregationAcceptQuery(scope);\n+            Query query = buildQuery(entityProjection, scope);\n+            if (cache != null && !query.isBypassingCache()) {\n+                String tableVersion = queryEngine.getTableVersion(query.getTable(), queryEngineTransaction);\n+                if (tableVersion != null) {\n+                    cacheKey = tableVersion + ';' + QueryKeyExtractor.extractKey(query);\n+                    result = cache.get(cacheKey);\n+                }\n             }\n-        }\n-        if (result == null) {\n-            result = queryEngine.executeQuery(query, queryEngineTransaction);\n-            if (cacheKey != null) {\n-                cache.put(cacheKey, result);\n+            aggregationProcessQuery(result, entityProjection.getType().getName(),\n+                    query, scope);\n+            if (result == null) {\n+                result = queryEngine.executeQuery(query, queryEngineTransaction);\n+                if (cacheKey != null) {\n+                    cache.put(cacheKey, result);\n+                }\n             }\n+            if (entityProjection.getPagination() != null && entityProjection.getPagination().returnPageTotals()) {\n+                entityProjection.getPagination().setPageTotals(result.getPageTotals());\n+            }\n+            response = new QueryResponse(200, result.getData(), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab4b03a37aed5df33c34cc0444a8f613db76fef3"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY5NDMzNw==", "bodyText": "Resolved in latest commit", "url": "https://github.com/yahoo/elide/pull/1448#discussion_r457694337", "createdAt": "2020-07-20T21:11:57Z", "author": {"login": "dvarshney1"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java", "diffHunk": "@@ -61,27 +70,41 @@ public void createObject(Object entity, RequestScope scope) {\n \n     @Override\n     public Iterable<Object> loadObjects(EntityProjection entityProjection, RequestScope scope) {\n-        Query query = buildQuery(entityProjection, scope);\n         QueryResult result = null;\n-\n+        QueryResponse response = null;\n         String cacheKey = null;\n-        if (cache != null && !query.isBypassingCache()) {\n-            String tableVersion = queryEngine.getTableVersion(query.getTable(), queryEngineTransaction);\n-            if (tableVersion != null) {\n-                cacheKey = tableVersion + ';' + QueryKeyExtractor.extractKey(query);\n-                result = cache.get(cacheKey);\n+        try {\n+            aggregationAcceptQuery(scope);\n+            Query query = buildQuery(entityProjection, scope);\n+            if (cache != null && !query.isBypassingCache()) {\n+                String tableVersion = queryEngine.getTableVersion(query.getTable(), queryEngineTransaction);\n+                if (tableVersion != null) {\n+                    cacheKey = tableVersion + ';' + QueryKeyExtractor.extractKey(query);\n+                    result = cache.get(cacheKey);\n+                }\n             }\n-        }\n-        if (result == null) {\n-            result = queryEngine.executeQuery(query, queryEngineTransaction);\n-            if (cacheKey != null) {\n-                cache.put(cacheKey, result);\n+            aggregationProcessQuery(result, entityProjection.getType().getName(),\n+                    query, scope);\n+            if (result == null) {\n+                result = queryEngine.executeQuery(query, queryEngineTransaction);\n+                if (cacheKey != null) {\n+                    cache.put(cacheKey, result);\n+                }\n             }\n+            if (entityProjection.getPagination() != null && entityProjection.getPagination().returnPageTotals()) {\n+                entityProjection.getPagination().setPageTotals(result.getPageTotals());\n+            }\n+            response = new QueryResponse(200, result.getData(), null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY5Nzc3Nw=="}, "originalCommit": {"oid": "ab4b03a37aed5df33c34cc0444a8f613db76fef3"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODg4MTg2OnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMjoyMTo0MVrOGzipAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMToxMTozNFrOG0fbyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY5ODExMw==", "bodyText": "Not all query engines are SQL query engines.  QueryEngine cannot have a dependency on anything related to SQL.", "url": "https://github.com/yahoo/elide/pull/1448#discussion_r456698113", "createdAt": "2020-07-17T22:21:41Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java", "diffHunk": "@@ -193,4 +194,12 @@ private void populateMetaData(MetaDataStore metaDataStore) {\n     public Table getTable(String classAlias) {\n         return tables.get(classAlias);\n     }\n+\n+    /**\n+     * Translates the client query into SQL.\n+     *\n+     * @param query the client query.\n+     * @return the SQL query.\n+     */\n+    public abstract SQLQuery toSQL(Query query);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab4b03a37aed5df33c34cc0444a8f613db76fef3"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY5ODMwMg==", "bodyText": "Instead, make this method:\npublic abstract String explain(Query query);", "url": "https://github.com/yahoo/elide/pull/1448#discussion_r456698302", "createdAt": "2020-07-17T22:22:23Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java", "diffHunk": "@@ -193,4 +194,12 @@ private void populateMetaData(MetaDataStore metaDataStore) {\n     public Table getTable(String classAlias) {\n         return tables.get(classAlias);\n     }\n+\n+    /**\n+     * Translates the client query into SQL.\n+     *\n+     * @param query the client query.\n+     * @return the SQL query.\n+     */\n+    public abstract SQLQuery toSQL(Query query);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY5ODExMw=="}, "originalCommit": {"oid": "ab4b03a37aed5df33c34cc0444a8f613db76fef3"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY5NDE1NQ==", "bodyText": "Resolved in latest commit", "url": "https://github.com/yahoo/elide/pull/1448#discussion_r457694155", "createdAt": "2020-07-20T21:11:34Z", "author": {"login": "dvarshney1"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java", "diffHunk": "@@ -193,4 +194,12 @@ private void populateMetaData(MetaDataStore metaDataStore) {\n     public Table getTable(String classAlias) {\n         return tables.get(classAlias);\n     }\n+\n+    /**\n+     * Translates the client query into SQL.\n+     *\n+     * @param query the client query.\n+     * @return the SQL query.\n+     */\n+    public abstract SQLQuery toSQL(Query query);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY5ODExMw=="}, "originalCommit": {"oid": "ab4b03a37aed5df33c34cc0444a8f613db76fef3"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODg4NjcwOnYy", "diffSide": "RIGHT", "path": "elide-core/src/main/java/com/yahoo/elide/core/QueryLogger.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMjoyNDo0MlrOGzirzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDo0MjoyOFrOG1JA4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY5ODgyOQ==", "bodyText": "I don't think this is ever invoked.", "url": "https://github.com/yahoo/elide/pull/1448#discussion_r456698829", "createdAt": "2020-07-17T22:24:42Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/QueryLogger.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.core;\n+\n+import java.security.Principal;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+/**\n+ * Query Logger Interface for Elide\n+ */\n+public interface QueryLogger {\n+\n+    /**\n+     * Accepts the incoming GraphQL query and notes the start time for the query\n+     * @param queryId The RequestScope requestId.\n+     * @param user The Principal user\n+     * @param headers Http Request Headers\n+     * @param apiVer API Version\n+     * @param apiQuery QueryString of the requested URL request\n+     */\n+    void acceptQuery(UUID queryId, Principal user, Map<String, String> headers,\n+                     String apiVer, String apiQuery);\n+\n+    /**\n+     * Accepts the incoming JSON API query and notes the start time for the query\n+     * @param queryId The RequestScope requestId.\n+     * @param user The Principal user\n+     * @param headers Http Request Headers\n+     * @param apiVer API Version\n+     * @param queryParams QueryParams for the incoming JSON API query\n+     * @param path The apiQuery endpoint path for the incoming query\n+     */\n+    void acceptQuery(UUID queryId, Principal user, Map<String, String> headers, String apiVer,\n+                     Optional<MultivaluedMap<String, String>> queryParams, String path);\n+\n+    /**\n+     * Processes and logs all the queries from QueryDetail\n+     * @param queryId The RequestScope requestId.\n+     * @param qd The QueryDetail Object\n+     */\n+    void processQuery(UUID queryId, QueryDetail qd);\n+\n+    /**\n+     * Cancels all queries currently running for a particular requestId\n+     * @param queryId The RequestScope requestId.\n+     */\n+    void cancelQuery(UUID queryId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab4b03a37aed5df33c34cc0444a8f613db76fef3"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzOTQxNQ==", "bodyText": "This is a member function of the QueryLogger class as indicated in the docs. Yep, you are right, this is never invoked.", "url": "https://github.com/yahoo/elide/pull/1448#discussion_r457539415", "createdAt": "2020-07-20T16:28:14Z", "author": {"login": "dvarshney1"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/QueryLogger.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.core;\n+\n+import java.security.Principal;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+/**\n+ * Query Logger Interface for Elide\n+ */\n+public interface QueryLogger {\n+\n+    /**\n+     * Accepts the incoming GraphQL query and notes the start time for the query\n+     * @param queryId The RequestScope requestId.\n+     * @param user The Principal user\n+     * @param headers Http Request Headers\n+     * @param apiVer API Version\n+     * @param apiQuery QueryString of the requested URL request\n+     */\n+    void acceptQuery(UUID queryId, Principal user, Map<String, String> headers,\n+                     String apiVer, String apiQuery);\n+\n+    /**\n+     * Accepts the incoming JSON API query and notes the start time for the query\n+     * @param queryId The RequestScope requestId.\n+     * @param user The Principal user\n+     * @param headers Http Request Headers\n+     * @param apiVer API Version\n+     * @param queryParams QueryParams for the incoming JSON API query\n+     * @param path The apiQuery endpoint path for the incoming query\n+     */\n+    void acceptQuery(UUID queryId, Principal user, Map<String, String> headers, String apiVer,\n+                     Optional<MultivaluedMap<String, String>> queryParams, String path);\n+\n+    /**\n+     * Processes and logs all the queries from QueryDetail\n+     * @param queryId The RequestScope requestId.\n+     * @param qd The QueryDetail Object\n+     */\n+    void processQuery(UUID queryId, QueryDetail qd);\n+\n+    /**\n+     * Cancels all queries currently running for a particular requestId\n+     * @param queryId The RequestScope requestId.\n+     */\n+    void cancelQuery(UUID queryId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY5ODgyOQ=="}, "originalCommit": {"oid": "ab4b03a37aed5df33c34cc0444a8f613db76fef3"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM3NTM5Mg==", "bodyText": "So I think we should call this function from transaction.cancel.  In order for that to work, we probably need to change the contract of the DataStoreTransaction.cancel to include the RequestScope.", "url": "https://github.com/yahoo/elide/pull/1448#discussion_r458375392", "createdAt": "2020-07-21T20:42:28Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/QueryLogger.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.core;\n+\n+import java.security.Principal;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+/**\n+ * Query Logger Interface for Elide\n+ */\n+public interface QueryLogger {\n+\n+    /**\n+     * Accepts the incoming GraphQL query and notes the start time for the query\n+     * @param queryId The RequestScope requestId.\n+     * @param user The Principal user\n+     * @param headers Http Request Headers\n+     * @param apiVer API Version\n+     * @param apiQuery QueryString of the requested URL request\n+     */\n+    void acceptQuery(UUID queryId, Principal user, Map<String, String> headers,\n+                     String apiVer, String apiQuery);\n+\n+    /**\n+     * Accepts the incoming JSON API query and notes the start time for the query\n+     * @param queryId The RequestScope requestId.\n+     * @param user The Principal user\n+     * @param headers Http Request Headers\n+     * @param apiVer API Version\n+     * @param queryParams QueryParams for the incoming JSON API query\n+     * @param path The apiQuery endpoint path for the incoming query\n+     */\n+    void acceptQuery(UUID queryId, Principal user, Map<String, String> headers, String apiVer,\n+                     Optional<MultivaluedMap<String, String>> queryParams, String path);\n+\n+    /**\n+     * Processes and logs all the queries from QueryDetail\n+     * @param queryId The RequestScope requestId.\n+     * @param qd The QueryDetail Object\n+     */\n+    void processQuery(UUID queryId, QueryDetail qd);\n+\n+    /**\n+     * Cancels all queries currently running for a particular requestId\n+     * @param queryId The RequestScope requestId.\n+     */\n+    void cancelQuery(UUID queryId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY5ODgyOQ=="}, "originalCommit": {"oid": "ab4b03a37aed5df33c34cc0444a8f613db76fef3"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODg5MzQ5OnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMjoyODozM1rOGzivvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMToxMjoxNlrOG0fdJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY5OTgzOQ==", "bodyText": "I think I might try to collapse these three functions into the main logic.  A few reasons:\n\nSingle line functions are often not necessary.\nThe isCached logic is tied to code outside the function - so this can't really be reused (the purpose of a function).\nSome of the variables seem like they might be common across the functions.", "url": "https://github.com/yahoo/elide/pull/1448#discussion_r456699839", "createdAt": "2020-07-17T22:28:33Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java", "diffHunk": "@@ -104,4 +127,20 @@ Query buildQuery(EntityProjection entityProjection, RequestScope scope) {\n     public void cancel() {\n         queryEngineTransaction.cancel();\n     }\n+\n+    private void aggregationCompleteQuery(RequestScope scope, QueryResponse response) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab4b03a37aed5df33c34cc0444a8f613db76fef3"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY5NDUwMQ==", "bodyText": "Resolved in latest commit", "url": "https://github.com/yahoo/elide/pull/1448#discussion_r457694501", "createdAt": "2020-07-20T21:12:16Z", "author": {"login": "dvarshney1"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java", "diffHunk": "@@ -104,4 +127,20 @@ Query buildQuery(EntityProjection entityProjection, RequestScope scope) {\n     public void cancel() {\n         queryEngineTransaction.cancel();\n     }\n+\n+    private void aggregationCompleteQuery(RequestScope scope, QueryResponse response) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY5OTgzOQ=="}, "originalCommit": {"oid": "ab4b03a37aed5df33c34cc0444a8f613db76fef3"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODg5NDgwOnYy", "diffSide": "RIGHT", "path": "elide-core/src/main/java/com/yahoo/elide/core/QueryDetail.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMjoyOToyNVrOGziwhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMjozMDoxNVrOGzixnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcwMDAzOQ==", "bodyText": "Instead of modelName - what if we changed this to the query itself (of type Query).", "url": "https://github.com/yahoo/elide/pull/1448#discussion_r456700039", "createdAt": "2020-07-17T22:29:25Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/QueryDetail.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.core;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.Value;\n+\n+/**\n+ * QueryDetail implementation class. Stores the model name (root entity class) and\n+ * the queryText that the underlying datastore will eventually run\n+ */\n+@Value\n+@AllArgsConstructor\n+@NoArgsConstructor(force = true)\n+public class QueryDetail {\n+    @Getter private String modelName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab4b03a37aed5df33c34cc0444a8f613db76fef3"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcwMDMxOQ==", "bodyText": "On second thought, It might be cleaner if we just made these arguments to the processQuery function.  QueryDetail is missing some fields (like the requestId) - which makes me think they all either need to come together - or we should keep them as separate arguments.", "url": "https://github.com/yahoo/elide/pull/1448#discussion_r456700319", "createdAt": "2020-07-17T22:30:15Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/QueryDetail.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.core;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.Value;\n+\n+/**\n+ * QueryDetail implementation class. Stores the model name (root entity class) and\n+ * the queryText that the underlying datastore will eventually run\n+ */\n+@Value\n+@AllArgsConstructor\n+@NoArgsConstructor(force = true)\n+public class QueryDetail {\n+    @Getter private String modelName;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcwMDAzOQ=="}, "originalCommit": {"oid": "ab4b03a37aed5df33c34cc0444a8f613db76fef3"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDM4ODM3OnYy", "diffSide": "RIGHT", "path": "elide-core/src/main/java/com/yahoo/elide/core/QueryLogger.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDozOTo1N1rOG1I8AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDozOTo1N1rOG1I8AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM3NDE0NA==", "bodyText": "Let's remove the QueryDetail class - and instead pass the Query object here along with queryText and isCached flags.", "url": "https://github.com/yahoo/elide/pull/1448#discussion_r458374144", "createdAt": "2020-07-21T20:39:57Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/QueryLogger.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.core;\n+\n+import java.security.Principal;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+/**\n+ * Query Logger Interface for Elide\n+ */\n+public interface QueryLogger {\n+\n+    /**\n+     * Accepts the incoming GraphQL query and notes the start time for the query\n+     * @param queryId The RequestScope requestId.\n+     * @param user The Principal user\n+     * @param headers Http Request Headers\n+     * @param apiVer API Version\n+     * @param apiQuery QueryString of the requested URL request\n+     */\n+    void acceptQuery(UUID queryId, Principal user, Map<String, String> headers,\n+                     String apiVer, String apiQuery);\n+\n+    /**\n+     * Accepts the incoming JSON API query and notes the start time for the query\n+     * @param queryId The RequestScope requestId.\n+     * @param user The Principal user\n+     * @param headers Http Request Headers\n+     * @param apiVer API Version\n+     * @param queryParams QueryParams for the incoming JSON API query\n+     * @param path The apiQuery endpoint path for the incoming query\n+     */\n+    void acceptQuery(UUID queryId, Principal user, Map<String, String> headers, String apiVer,\n+                     Optional<MultivaluedMap<String, String>> queryParams, String path);\n+\n+    /**\n+     * Processes and logs all the queries from QueryDetail\n+     * @param queryId The RequestScope requestId.\n+     * @param qd The QueryDetail Object\n+     */\n+    void processQuery(UUID queryId, QueryDetail qd);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61b44dbd637321637c7acb79ad4d854e7ecab262"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTAyMjc1OnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/core/QueryLogger.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMTo0Mzo0MVrOG11UUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMTo0Mzo0MVrOG11UUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEwMTI2Ng==", "bodyText": "We should mention that this method must be thread safe.", "url": "https://github.com/yahoo/elide/pull/1448#discussion_r459101266", "createdAt": "2020-07-22T21:43:41Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/core/QueryLogger.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.core;\n+\n+import com.yahoo.elide.datastores.aggregation.query.Query;\n+\n+import java.security.Principal;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+/**\n+ * Query Logger Interface for Elide\n+ */\n+public interface QueryLogger {\n+\n+    /**\n+     * Accepts the incoming GraphQL query and notes the start time for the query\n+     * @param queryId The RequestScope requestId.\n+     * @param user The Principal user\n+     * @param headers Http Request Headers\n+     * @param apiVer API Version\n+     * @param apiQuery QueryString of the requested URL request\n+     */\n+    void acceptQuery(UUID queryId, Principal user, Map<String, String> headers,\n+                     String apiVer, String apiQuery);\n+\n+    /**\n+     * Accepts the incoming JSON API query and notes the start time for the query\n+     * @param queryId The RequestScope requestId.\n+     * @param user The Principal user\n+     * @param headers Http Request Headers\n+     * @param apiVer API Version\n+     * @param queryParams QueryParams for the incoming JSON API query\n+     * @param path The apiQuery endpoint path for the incoming query\n+     */\n+    void acceptQuery(UUID queryId, Principal user, Map<String, String> headers, String apiVer,\n+                     Optional<MultivaluedMap<String, String>> queryParams, String path);\n+\n+    /**\n+     * Processes and logs all the queries from QueryDetail\n+     * @param queryId The RequestScope requestId.\n+     * @param query The underlying Query\n+     * @param apiQuery The output querytext\n+     * @param isCached Whether the result came from a cache or not\n+     */\n+    void processQuery(UUID queryId, Query query, String apiQuery, boolean isCached);\n+\n+    /**\n+     * Cancels all queries currently running for a particular requestId\n+     * @param queryId The RequestScope requestId.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94aaf6dcbd95278fd5b0b003ab49af8d9d33b152"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTAyOTU5OnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/core/QueryLogger.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMTo0NTo1OVrOG11YeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMTo1ODoxM1rOG11tTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEwMjMyOA==", "bodyText": "Do we need both of these acceptQuery methods or can we just have the one below?", "url": "https://github.com/yahoo/elide/pull/1448#discussion_r459102328", "createdAt": "2020-07-22T21:45:59Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/core/QueryLogger.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.core;\n+\n+import com.yahoo.elide.datastores.aggregation.query.Query;\n+\n+import java.security.Principal;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+/**\n+ * Query Logger Interface for Elide\n+ */\n+public interface QueryLogger {\n+\n+    /**\n+     * Accepts the incoming GraphQL query and notes the start time for the query\n+     * @param queryId The RequestScope requestId.\n+     * @param user The Principal user\n+     * @param headers Http Request Headers\n+     * @param apiVer API Version\n+     * @param apiQuery QueryString of the requested URL request\n+     */\n+    void acceptQuery(UUID queryId, Principal user, Map<String, String> headers,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94aaf6dcbd95278fd5b0b003ab49af8d9d33b152"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEwNzY2MQ==", "bodyText": "We can just have the one below. Do not need the other one since Querylogger no longer lives in Elide. Will update this", "url": "https://github.com/yahoo/elide/pull/1448#discussion_r459107661", "createdAt": "2020-07-22T21:58:13Z", "author": {"login": "dvarshney1"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/core/QueryLogger.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.core;\n+\n+import com.yahoo.elide.datastores.aggregation.query.Query;\n+\n+import java.security.Principal;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+/**\n+ * Query Logger Interface for Elide\n+ */\n+public interface QueryLogger {\n+\n+    /**\n+     * Accepts the incoming GraphQL query and notes the start time for the query\n+     * @param queryId The RequestScope requestId.\n+     * @param user The Principal user\n+     * @param headers Http Request Headers\n+     * @param apiVer API Version\n+     * @param apiQuery QueryString of the requested URL request\n+     */\n+    void acceptQuery(UUID queryId, Principal user, Map<String, String> headers,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEwMjMyOA=="}, "originalCommit": {"oid": "94aaf6dcbd95278fd5b0b003ab49af8d9d33b152"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTAzMzAwOnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/core/QueryLogger.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMTo0NzoxMFrOG11akQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMTo0NzoxMFrOG11akQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEwMjg2NQ==", "bodyText": "I'm wondering if it would be more powerful to log the elide User object here instead of the Principal.  The user has some additional bits (like the role support).", "url": "https://github.com/yahoo/elide/pull/1448#discussion_r459102865", "createdAt": "2020-07-22T21:47:10Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/core/QueryLogger.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.core;\n+\n+import com.yahoo.elide.datastores.aggregation.query.Query;\n+\n+import java.security.Principal;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+/**\n+ * Query Logger Interface for Elide\n+ */\n+public interface QueryLogger {\n+\n+    /**\n+     * Accepts the incoming GraphQL query and notes the start time for the query\n+     * @param queryId The RequestScope requestId.\n+     * @param user The Principal user\n+     * @param headers Http Request Headers\n+     * @param apiVer API Version\n+     * @param apiQuery QueryString of the requested URL request\n+     */\n+    void acceptQuery(UUID queryId, Principal user, Map<String, String> headers,\n+                     String apiVer, String apiQuery);\n+\n+    /**\n+     * Accepts the incoming JSON API query and notes the start time for the query\n+     * @param queryId The RequestScope requestId.\n+     * @param user The Principal user\n+     * @param headers Http Request Headers\n+     * @param apiVer API Version\n+     * @param queryParams QueryParams for the incoming JSON API query\n+     * @param path The apiQuery endpoint path for the incoming query\n+     */\n+    void acceptQuery(UUID queryId, Principal user, Map<String, String> headers, String apiVer,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94aaf6dcbd95278fd5b0b003ab49af8d9d33b152"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTAzMzkyOnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/core/QueryResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMTo0NzozNlrOG11bOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMjowMTozOVrOG11ytg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEwMzAzNA==", "bodyText": "?", "url": "https://github.com/yahoo/elide/pull/1448#discussion_r459103034", "createdAt": "2020-07-22T21:47:36Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/core/QueryResponse.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.core;\n+//live inside aggregation ds", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94aaf6dcbd95278fd5b0b003ab49af8d9d33b152"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEwOTA0Ng==", "bodyText": "Sorry about this. Modified", "url": "https://github.com/yahoo/elide/pull/1448#discussion_r459109046", "createdAt": "2020-07-22T22:01:39Z", "author": {"login": "dvarshney1"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/core/QueryResponse.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.core;\n+//live inside aggregation ds", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEwMzAzNA=="}, "originalCommit": {"oid": "94aaf6dcbd95278fd5b0b003ab49af8d9d33b152"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTA0NTExOnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMTo1MToxM1rOG11h1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMTo1MToxM1rOG11h1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEwNDcyNw==", "bodyText": "I feel like we should have one test for query logging failures (where an exception is thrown).  Also, we should have one test for cancelation.", "url": "https://github.com/yahoo/elide/pull/1448#discussion_r459104727", "createdAt": "2020-07-22T21:51:13Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java", "diffHunk": "@@ -50,8 +54,8 @@\n     // inject our own query instead of using buildQuery impl\n     private class MyAggregationDataStoreTransaction extends AggregationDataStoreTransaction {\n \n-        public MyAggregationDataStoreTransaction(QueryEngine queryEngine, Cache cache) {\n-            super(queryEngine, cache);\n+        public MyAggregationDataStoreTransaction(QueryEngine queryEngine, Cache cache, QueryLogger queryLogger) {\n+            super(queryEngine, cache, queryLogger);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94aaf6dcbd95278fd5b0b003ab49af8d9d33b152"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTA3OTcxOnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTowOTowMFrOG2bqCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTo1Mzo1OFrOG2c4mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcyOTQxOQ==", "bodyText": "I don't think we need this variable.", "url": "https://github.com/yahoo/elide/pull/1448#discussion_r459729419", "createdAt": "2020-07-23T21:09:00Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java", "diffHunk": "@@ -222,4 +224,47 @@ public void loadObjectsBypassCache() {\n         Mockito.verify(queryLogger, times(1)).completeQuery(\n                 Mockito.eq(scope.getRequestId()), any());\n     }\n+\n+    @Test\n+    public void loadObjectsExceptionThrownTest() throws Exception {\n+        Mockito.reset(queryLogger);\n+        Object result = null;\n+        try {\n+            query = Query.builder().table(playerStatsTable).bypassingCache(true).build();\n+            SQLQuery myQuery = SQLQuery.builder().clientQuery(query)\n+                    .fromClause(query.getTable().getName())\n+                    .projectionClause(\" \").build();\n+\n+            when(queryEngine.executeQuery(query, qeTransaction)).thenReturn(null);\n+            when(queryEngine.explain(query)).thenReturn(myQuery.toString());\n+            AggregationDataStoreTransaction transaction =\n+                    new MyAggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n+            EntityProjection entityProjection = EntityProjection.builder().type(PlayerStats.class).build();\n+\n+            transaction.loadObjects(entityProjection, scope);\n+\n+        } catch (Exception e) {\n+                result = e.getMessage();\n+        } finally {\n+            Object finalResult = result;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700497ca510017d5c0dfcf3be7b2e26ee789d106"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0OTUzMQ==", "bodyText": "The local variable that we are referencing from inside the lambda expression should be final. That is why we have this. Otherwise, we can also check for Mockito.verify() from inside the catch block. We will not need to have the finalResult local variable then.", "url": "https://github.com/yahoo/elide/pull/1448#discussion_r459749531", "createdAt": "2020-07-23T21:53:58Z", "author": {"login": "dvarshney1"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java", "diffHunk": "@@ -222,4 +224,47 @@ public void loadObjectsBypassCache() {\n         Mockito.verify(queryLogger, times(1)).completeQuery(\n                 Mockito.eq(scope.getRequestId()), any());\n     }\n+\n+    @Test\n+    public void loadObjectsExceptionThrownTest() throws Exception {\n+        Mockito.reset(queryLogger);\n+        Object result = null;\n+        try {\n+            query = Query.builder().table(playerStatsTable).bypassingCache(true).build();\n+            SQLQuery myQuery = SQLQuery.builder().clientQuery(query)\n+                    .fromClause(query.getTable().getName())\n+                    .projectionClause(\" \").build();\n+\n+            when(queryEngine.executeQuery(query, qeTransaction)).thenReturn(null);\n+            when(queryEngine.explain(query)).thenReturn(myQuery.toString());\n+            AggregationDataStoreTransaction transaction =\n+                    new MyAggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n+            EntityProjection entityProjection = EntityProjection.builder().type(PlayerStats.class).build();\n+\n+            transaction.loadObjects(entityProjection, scope);\n+\n+        } catch (Exception e) {\n+                result = e.getMessage();\n+        } finally {\n+            Object finalResult = result;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcyOTQxOQ=="}, "originalCommit": {"oid": "700497ca510017d5c0dfcf3be7b2e26ee789d106"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTA4MDQ5OnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTowOToxN1rOG2bqiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTowOToxN1rOG2bqiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcyOTU0NQ==", "bodyText": "We can do this without the finally block.", "url": "https://github.com/yahoo/elide/pull/1448#discussion_r459729545", "createdAt": "2020-07-23T21:09:17Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java", "diffHunk": "@@ -222,4 +224,47 @@ public void loadObjectsBypassCache() {\n         Mockito.verify(queryLogger, times(1)).completeQuery(\n                 Mockito.eq(scope.getRequestId()), any());\n     }\n+\n+    @Test\n+    public void loadObjectsExceptionThrownTest() throws Exception {\n+        Mockito.reset(queryLogger);\n+        Object result = null;\n+        try {\n+            query = Query.builder().table(playerStatsTable).bypassingCache(true).build();\n+            SQLQuery myQuery = SQLQuery.builder().clientQuery(query)\n+                    .fromClause(query.getTable().getName())\n+                    .projectionClause(\" \").build();\n+\n+            when(queryEngine.executeQuery(query, qeTransaction)).thenReturn(null);\n+            when(queryEngine.explain(query)).thenReturn(myQuery.toString());\n+            AggregationDataStoreTransaction transaction =\n+                    new MyAggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n+            EntityProjection entityProjection = EntityProjection.builder().type(PlayerStats.class).build();\n+\n+            transaction.loadObjects(entityProjection, scope);\n+\n+        } catch (Exception e) {\n+                result = e.getMessage();\n+        } finally {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700497ca510017d5c0dfcf3be7b2e26ee789d106"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1014, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}