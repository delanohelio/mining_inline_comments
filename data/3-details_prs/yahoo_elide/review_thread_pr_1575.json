{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3OTM4OTE1", "number": 1575, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOToyMjo1MVrOEqc0Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxODoyNzoxNFrOEv68PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTQ3NzU5OnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/test/resources/validator/missing_configs/models/tables/table2.hjson.bkp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOToyMjo1MlrOHcqjnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNDozMzo1OVrOHkRyyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgxOTQyMw==", "bodyText": "should we remove this bkp file?", "url": "https://github.com/yahoo/elide/pull/1575#discussion_r499819423", "createdAt": "2020-10-05T19:22:52Z", "author": {"login": "moizarafat"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/test/resources/validator/missing_configs/models/tables/table2.hjson.bkp", "diffHunk": "@@ -14,7 +14,7 @@\n                 name: playerCountry\n                 to: country\n                 type: toOne\n-                definition: '${to}.id = ${from}.country_id'\n+                definition: '%join.id = %from.country_id'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd7d53683cc7703592853dc6aa670673e7d16e88"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgwMjMxMg==", "bodyText": "removed.", "url": "https://github.com/yahoo/elide/pull/1575#discussion_r507802312", "createdAt": "2020-10-19T14:33:59Z", "author": {"login": "rishi-aga"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/test/resources/validator/missing_configs/models/tables/table2.hjson.bkp", "diffHunk": "@@ -14,7 +14,7 @@\n                 name: playerCountry\n                 to: country\n                 type: toOne\n-                definition: '${to}.id = ${from}.country_id'\n+                definition: '%join.id = %from.country_id'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgxOTQyMw=="}, "originalCommit": {"oid": "cd7d53683cc7703592853dc6aa670673e7d16e88"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MTQzMjU1OnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/query/QueryTranslator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjo0MTowNFrOHkXmVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjo0MTowNFrOHkXmVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg5NzQyOQ==", "bodyText": "This works a little different than how other references are resolved.  The SQLReferenceVisitor is normally called at service start and all the references are saved off in the SQLReferenceTable.  From that point onward, only lookups happen in the reference table.\nIs there any reason we can't follow the same approach here?", "url": "https://github.com/yahoo/elide/pull/1575#discussion_r507897429", "createdAt": "2020-10-19T16:41:04Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/query/QueryTranslator.java", "diffHunk": "@@ -268,14 +270,29 @@ private String extractJoinClause(Class<?> fromClass,\n                         dictionary.getAnnotatedColumnName(\n                                 joinClass,\n                                 dictionary.getIdFieldName(joinClass)))\n-                : extractJoinExpression(join.value(), fromAlias, joinAlias);\n+                : getJoinClause(fromClass, fromAlias, joinClass, joinAlias, join.value());\n \n         return String.format(\"LEFT JOIN %s AS %s ON %s\",\n                 joinSource,\n                 joinAlias,\n                 joinClause);\n     }\n \n+    /**\n+     * Resolve references to construct a join ON clause.\n+     *\n+     * @param fromClass parent class\n+     * @param fromAlias parent alias\n+     * @param joinClass join class\n+     * @param joinAlias join alias\n+     * @param expr unresolved ON clause\n+     * @return string resolved ON clause\n+     */\n+    private String getJoinClause(Class<?> fromClass, String fromAlias, Class<?> joinClass, String joinAlias,\n+                    String expr) {\n+        SQLReferenceVisitor visitor = new SQLReferenceVisitor(referenceTable.getMetaDataStore(), fromAlias);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40dfb5343b9cd8aa63980e4db26debdb6c1f1502"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4Njc4NjAzOnYy", "diffSide": "RIGHT", "path": "elide-core/src/main/java/com/yahoo/elide/core/Path.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxODoxMjo0NVrOHlK41g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxODo1NzoyM1rOHlMr9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODczNzc1MA==", "bodyText": "Make this protected.", "url": "https://github.com/yahoo/elide/pull/1575#discussion_r508737750", "createdAt": "2020-10-20T18:12:45Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/Path.java", "diffHunk": "@@ -58,6 +58,9 @@ public PathElement(Class type, Class fieldType, String fieldName) {\n         }\n     }\n \n+    public Path() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5eff935503fa924d1bd6b23747f1008f27a64914"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc2NzIyMg==", "bodyText": "updated.", "url": "https://github.com/yahoo/elide/pull/1575#discussion_r508767222", "createdAt": "2020-10-20T18:57:23Z", "author": {"login": "rishi-aga"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/Path.java", "diffHunk": "@@ -58,6 +58,9 @@ public PathElement(Class type, Class fieldType, String fieldName) {\n         }\n     }\n \n+    public Path() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODczNzc1MA=="}, "originalCommit": {"oid": "5eff935503fa924d1bd6b23747f1008f27a64914"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NjgxOTIwOnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/core/JoinPath.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxODoyMToxNFrOHlLNwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxODo1NzoxN1rOHlMrsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc0MzEwNQ==", "bodyText": "Since we don't know the field type, we could make it Object.class.", "url": "https://github.com/yahoo/elide/pull/1575#discussion_r508743105", "createdAt": "2020-10-20T18:21:14Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/core/JoinPath.java", "diffHunk": "@@ -61,4 +63,43 @@ public JoinPath extend(String extensionPath, EntityDictionary dictionary) {\n         toExtend.addAll(extension.getPathElements());\n         return new JoinPath(toExtend);\n     }\n+\n+    /**\n+     * Resolve a dot separated path into list of path elements.\n+     *\n+     * @param entityClass root class e.g. \"foo\"\n+     * @param dictionary dictionary\n+     * @param dotSeparatedPath path e.g. \"bar.baz\"\n+     * @return list of path elements e.g. [\"foo.bar\", \"bar.baz\"]\n+     */\n+    private List<PathElement> resolvePathElements(Class<?> entityClass,\n+                                                  EntityDictionary dictionary,\n+                                                  String dotSeparatedPath) {\n+        List<PathElement> elements = new ArrayList<>();\n+        String[] fieldNames = dotSeparatedPath.split(\"\\\\.\");\n+\n+        Class<?> currentClass = entityClass;\n+        for (String fieldName : fieldNames) {\n+            if (needNavigation(currentClass, fieldName, dictionary)) {\n+                Class<?> joinClass = dictionary.getParameterizedType(currentClass, fieldName);\n+                elements.add(new PathElement(currentClass, joinClass, fieldName));\n+                currentClass = joinClass;\n+            } else {\n+                elements.add(resolvePathAttribute(currentClass, dictionary, fieldName));\n+            }\n+        }\n+\n+        return ImmutableList.copyOf(elements);\n+    }\n+\n+    private PathElement resolvePathAttribute(Class<?> entityClass,\n+                                             EntityDictionary dictionary,\n+                                             String fieldName) {\n+        Class<?> attributeClass = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5eff935503fa924d1bd6b23747f1008f27a64914"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc2NzE1Mg==", "bodyText": "updated.", "url": "https://github.com/yahoo/elide/pull/1575#discussion_r508767152", "createdAt": "2020-10-20T18:57:17Z", "author": {"login": "rishi-aga"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/core/JoinPath.java", "diffHunk": "@@ -61,4 +63,43 @@ public JoinPath extend(String extensionPath, EntityDictionary dictionary) {\n         toExtend.addAll(extension.getPathElements());\n         return new JoinPath(toExtend);\n     }\n+\n+    /**\n+     * Resolve a dot separated path into list of path elements.\n+     *\n+     * @param entityClass root class e.g. \"foo\"\n+     * @param dictionary dictionary\n+     * @param dotSeparatedPath path e.g. \"bar.baz\"\n+     * @return list of path elements e.g. [\"foo.bar\", \"bar.baz\"]\n+     */\n+    private List<PathElement> resolvePathElements(Class<?> entityClass,\n+                                                  EntityDictionary dictionary,\n+                                                  String dotSeparatedPath) {\n+        List<PathElement> elements = new ArrayList<>();\n+        String[] fieldNames = dotSeparatedPath.split(\"\\\\.\");\n+\n+        Class<?> currentClass = entityClass;\n+        for (String fieldName : fieldNames) {\n+            if (needNavigation(currentClass, fieldName, dictionary)) {\n+                Class<?> joinClass = dictionary.getParameterizedType(currentClass, fieldName);\n+                elements.add(new PathElement(currentClass, joinClass, fieldName));\n+                currentClass = joinClass;\n+            } else {\n+                elements.add(resolvePathAttribute(currentClass, dictionary, fieldName));\n+            }\n+        }\n+\n+        return ImmutableList.copyOf(elements);\n+    }\n+\n+    private PathElement resolvePathAttribute(Class<?> entityClass,\n+                                             EntityDictionary dictionary,\n+                                             String fieldName) {\n+        Class<?> attributeClass = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc0MzEwNQ=="}, "originalCommit": {"oid": "5eff935503fa924d1bd6b23747f1008f27a64914"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4Njg0MjIwOnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/metadata/SQLReferenceVisitor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxODoyNzoxNFrOHlLcAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNjoxMjo0NlrOHl0erg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc0Njc1Mg==", "bodyText": "Should this be private?", "url": "https://github.com/yahoo/elide/pull/1575#discussion_r508746752", "createdAt": "2020-10-20T18:27:14Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/metadata/SQLReferenceVisitor.java", "diffHunk": "@@ -81,16 +81,25 @@ protected String visitFormulaDimension(ColumnProjection dimension) {\n      * @return\n      */\n     private String visitFormulaColumn(ColumnProjection column) {\n-        Queryable source  = column.getSource();\n+        return resolveReferences(column.getSource(), column.getExpression(), column.getName());\n+    }\n \n-        String expr = column.getExpression();\n+    /**\n+     * Resolve references.\n+     *\n+     * @param source\n+     * @param expr expression with unresolved references\n+     * @param logicalName logical column name\n+     * @return expression with resolved references\n+     */\n+    public String resolveReferences(Queryable source, String expr, String logicalName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5eff935503fa924d1bd6b23747f1008f27a64914"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc2NzA4MA==", "bodyText": "No, Its called from QueryTranslator's getJoinClause method", "url": "https://github.com/yahoo/elide/pull/1575#discussion_r508767080", "createdAt": "2020-10-20T18:57:08Z", "author": {"login": "rishi-aga"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/metadata/SQLReferenceVisitor.java", "diffHunk": "@@ -81,16 +81,25 @@ protected String visitFormulaDimension(ColumnProjection dimension) {\n      * @return\n      */\n     private String visitFormulaColumn(ColumnProjection column) {\n-        Queryable source  = column.getSource();\n+        return resolveReferences(column.getSource(), column.getExpression(), column.getName());\n+    }\n \n-        String expr = column.getExpression();\n+    /**\n+     * Resolve references.\n+     *\n+     * @param source\n+     * @param expr expression with unresolved references\n+     * @param logicalName logical column name\n+     * @return expression with resolved references\n+     */\n+    public String resolveReferences(Queryable source, String expr, String logicalName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc0Njc1Mg=="}, "originalCommit": {"oid": "5eff935503fa924d1bd6b23747f1008f27a64914"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQxOTE4Mg==", "bodyText": "I'd prefer is this class was kept private to the construction of the SQLReferenceTable.", "url": "https://github.com/yahoo/elide/pull/1575#discussion_r509419182", "createdAt": "2020-10-21T16:12:46Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/metadata/SQLReferenceVisitor.java", "diffHunk": "@@ -81,16 +81,25 @@ protected String visitFormulaDimension(ColumnProjection dimension) {\n      * @return\n      */\n     private String visitFormulaColumn(ColumnProjection column) {\n-        Queryable source  = column.getSource();\n+        return resolveReferences(column.getSource(), column.getExpression(), column.getName());\n+    }\n \n-        String expr = column.getExpression();\n+    /**\n+     * Resolve references.\n+     *\n+     * @param source\n+     * @param expr expression with unresolved references\n+     * @param logicalName logical column name\n+     * @return expression with resolved references\n+     */\n+    public String resolveReferences(Queryable source, String expr, String logicalName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc0Njc1Mg=="}, "originalCommit": {"oid": "5eff935503fa924d1bd6b23747f1008f27a64914"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 882, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}