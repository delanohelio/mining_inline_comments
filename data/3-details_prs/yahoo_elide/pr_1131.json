{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNDIzMzMy", "number": 1131, "title": "Adds a registry based mechanism for registering Custom GraphQL scalars ", "bodyText": "Resolves #1128\nDescription\n\nAdds Support for java.time.OffsetDateTime\nAdds new annotation, using which users can add support for new GraphQL Scalar types\n\nMotivation and Context\nCurrently there is no mechanism in place using which user can register new GraphQL scalars with Elide Engine. This PR suggests a Annotation and Auto Discovery based approach to solve this issue. To auto discover use of ClassGraph Library has been made.\nHow Has This Been Tested?\nJunit test cases for the same has been written\nLicense\nI confirm that this contribution is made under an Apache 2.0 license and that I have the authority necessary to make this contribution on behalf of its copyright owner.", "createdAt": "2020-01-10T12:13:21Z", "url": "https://github.com/yahoo/elide/pull/1131", "merged": true, "mergeCommit": {"oid": "cd2a159d6958b11d0ee107370fca2dcc5b3175dc"}, "closed": true, "closedAt": "2020-01-16T17:11:59Z", "author": {"login": "murtuza-ranapur"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb4pupmgH2gAyMzYxNDIzMzMyOmQwYmMzOTg5ZTUxMTM0ZDRiZWFiNzg3NWRmODA4YzAwZjlhZjUyMzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb69U4MgFqTM0NDA3NjU2Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d0bc3989e51134d4beab7875df808c00f9af5230", "author": {"user": {"login": "murtuza-ranapur", "name": "Murtuza Ranapur"}}, "url": "https://github.com/yahoo/elide/commit/d0bc3989e51134d4beab7875df808c00f9af5230", "committedDate": "2020-01-09T13:11:45Z", "message": "Added support for OffsetDateTimeScalar scalar and refactored GraphQLConversionUtils implementation to support runtime detection and registration of GraphQl Scalars"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb0154c600f3c6ec488dabc83e5dde9e9da68ce5", "author": {"user": {"login": "murtuza-ranapur", "name": "Murtuza Ranapur"}}, "url": "https://github.com/yahoo/elide/commit/eb0154c600f3c6ec488dabc83e5dde9e9da68ce5", "committedDate": "2020-01-10T09:18:40Z", "message": "Added ElideCoercing Interface which has method to allow implementations to return Serde for a given Scalar\nAdded usesSerdeOfType field in ElideScalarType annotation to give user flexibility to specify Type for which Serde is written"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06c3c2a7779553dcb68a2ad2dec8e29d1fc98af4", "author": {"user": {"login": "murtuza-ranapur", "name": "Murtuza Ranapur"}}, "url": "https://github.com/yahoo/elide/commit/06c3c2a7779553dcb68a2ad2dec8e29d1fc98af4", "committedDate": "2020-01-10T11:47:53Z", "message": "Adding test cases for OffsetDateTime scalar and GraphQLConversionUtils"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a47a5d38deff2fdec70245511b4506c660c79f1", "author": {"user": {"login": "murtuza-ranapur", "name": "Murtuza Ranapur"}}, "url": "https://github.com/yahoo/elide/commit/7a47a5d38deff2fdec70245511b4506c660c79f1", "committedDate": "2020-01-10T12:02:13Z", "message": "Applied style check suggestion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acf24b255699d03e05bcb0ae00dd8788948b35e2", "author": {"user": {"login": "murtuza-ranapur", "name": "Murtuza Ranapur"}}, "url": "https://github.com/yahoo/elide/commit/acf24b255699d03e05bcb0ae00dd8788948b35e2", "committedDate": "2020-01-10T13:14:20Z", "message": "Applied Codacy suggestion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4075cb9d11f4c077364836594f6df3c6d0abe828", "author": {"user": {"login": "aklish", "name": "Aaron Klish"}}, "url": "https://github.com/yahoo/elide/commit/4075cb9d11f4c077364836594f6df3c6d0abe828", "committedDate": "2020-01-10T20:02:48Z", "message": "Update OffsetDateTimeSerde.java\n\nFixing checkstyles."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9dc2861ad80457770fbe18066fb01d94564a9694", "author": {"user": {"login": "aklish", "name": "Aaron Klish"}}, "url": "https://github.com/yahoo/elide/commit/9dc2861ad80457770fbe18066fb01d94564a9694", "committedDate": "2020-01-10T21:02:02Z", "message": "Merge branch 'master' into elide-graphq;-scalar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05def52f25ef4f6a39b5989b22be9319c449bde9", "author": {"user": {"login": "murtuza-ranapur", "name": "Murtuza Ranapur"}}, "url": "https://github.com/yahoo/elide/commit/05def52f25ef4f6a39b5989b22be9319c449bde9", "committedDate": "2020-01-15T08:19:07Z", "message": "Elide Annotaion now supports subtypes\nElide Annotaion now registers Serde instead of ElideCoercing\nAuto-scan happens on Elide initialization"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMzY3ODk5", "url": "https://github.com/yahoo/elide/pull/1131#pullrequestreview-343367899", "createdAt": "2020-01-15T16:51:21Z", "commit": {"oid": "05def52f25ef4f6a39b5989b22be9319c449bde9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNjo1MToyMVrOFd_NBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNzoyNDoxMFrOFeAQMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk4ODU0OQ==", "bodyText": "Maybe wrap in an immutable map.", "url": "https://github.com/yahoo/elide/pull/1131#discussion_r366988549", "createdAt": "2020-01-15T16:51:21Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/utils/coerce/CoerceUtil.java", "diffHunk": "@@ -78,6 +78,10 @@\n         return (Serde<S, T>) SERDES.getOrDefault(targetType, null);\n     }\n \n+    public static Map<Class<?>, Serde<?, ?>> getSerdes() {\n+        return SERDES;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05def52f25ef4f6a39b5989b22be9319c449bde9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk5ODUxMg==", "bodyText": "I refactored this a bit by:\n\nUsing a different member of ClassScanner (see other comment in this PR).\nLinking the methods together to reduce some duplication between them.\n\n    private void registerCustomSerde() {\n        Set<Class<?>> classes = ClassScanner.getAnnotatedClasses(ElideTypeConverter.class);\n\n        for (Class<?> clazz : classes) {\n            if (!Serde.class.isAssignableFrom(clazz)) {\n                log.warn(\"Skipping Serde registration (not a Serde!): {}\", clazz);\n                continue;\n            }\n            Serde serde;\n            try {\n                serde = (Serde) clazz.newInstance();\n            } catch (InstantiationException | IllegalAccessException e) {\n                String errorMsg = String.format(\"Error while registering custom Serde: %s\", e.getLocalizedMessage());\n                log.error(errorMsg);\n                throw new UnableToAddSerdeException(errorMsg);\n            }\n            ElideTypeConverter converter = clazz.getAnnotation(ElideTypeConverter.class);\n            Class baseType = converter.type();\n            List<Class<?>> allTypes = Arrays.asList(converter.subTypes());\n            allTypes.add(baseType);\n\n            for (Class type : allTypes) {\n                if (!baseType.isAssignableFrom(type)) {\n                    throw new IllegalArgumentException(\"Mention type \" + type\n                            + \" not subtype of \" + baseType);\n                }\n                log.info(\"Registering serde for type : {}\", type);\n                CoerceUtil.register(type, serde);\n                registerCustomSerdeInObjectMapper(type, serde, converter.name());\n            }\n        }\n    }\n    private void registerCustomSerdeInObjectMapper(Class<?> type, Serde serde, String name) {\n        ObjectMapper objectMapper = mapper.getObjectMapper();\n        objectMapper.registerModule(new SimpleModule(name)\n            .addSerializer(type, new JsonSerializer<Object>() {\n                @Override\n                public void serialize(Object obj, JsonGenerator jsonGenerator, SerializerProvider serializerProvider)\n                        throws IOException, JsonProcessingException {\n                    jsonGenerator.writeObject(serde.serialize(obj));\n                }\n            }));\n    }", "url": "https://github.com/yahoo/elide/pull/1131#discussion_r366998512", "createdAt": "2020-01-15T17:09:55Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/Elide.java", "diffHunk": "@@ -77,6 +92,69 @@ public Elide(ElideSettings elideSettings) {\n         elideSettings.getSerdes().forEach((targetType, serde) -> {\n             CoerceUtil.register(targetType, serde);\n         });\n+\n+        registerCustomSerde();\n+        registerCustomSerdeInObjectMapper();\n+    }\n+\n+    private void registerCustomSerde() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05def52f25ef4f6a39b5989b22be9319c449bde9"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwNTI5NQ==", "bodyText": "This method leaks ClassInfo.  We don't want ClassGraph concepts to leak into core Elide.  I would just use getAnnotatedClasses instead.", "url": "https://github.com/yahoo/elide/pull/1131#discussion_r367005295", "createdAt": "2020-01-15T17:23:21Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/utils/ClassScanner.java", "diffHunk": "@@ -57,6 +58,18 @@\n         }\n     }\n \n+    /**\n+     * Scans all classes accessible from the context class loader which belong to the current class loader.\n+     *\n+     * @param annotation  Annotation to search\n+     * @return The classeInfos\n+     */\n+    static public List<ClassInfo> getAnnotatedClassInfos(Class<? extends Annotation> annotation) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05def52f25ef4f6a39b5989b22be9319c449bde9"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwNTc0Nw==", "bodyText": "I think the correct spelling is converter", "url": "https://github.com/yahoo/elide/pull/1131#discussion_r367005747", "createdAt": "2020-01-15T17:24:10Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/utils/coerce/converters/ElideTypeConvertor.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.utils.coerce.converters;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(ElementType.TYPE)\n+public @interface ElideTypeConvertor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05def52f25ef4f6a39b5989b22be9319c449bde9"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "414623518082af7c2f02ab1cd515642610b9e8ca", "author": {"user": {"login": "murtuza-ranapur", "name": "Murtuza Ranapur"}}, "url": "https://github.com/yahoo/elide/commit/414623518082af7c2f02ab1cd515642610b9e8ca", "committedDate": "2020-01-16T13:21:22Z", "message": "Applied PR Review Suggestions\n\n1. Fixed typos\n2. Removed unused method from ClassScanner\n3. Added suggested refactored Serde scanning code\n4. CoerceUtil now returns Immutable Serde map"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0MDEwMzU0", "url": "https://github.com/yahoo/elide/pull/1131#pullrequestreview-344010354", "createdAt": "2020-01-16T15:44:02Z", "commit": {"oid": "414623518082af7c2f02ab1cd515642610b9e8ca"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd871a0624f7b056f6e6ae7bd8897d9979110c47", "author": {"user": {"login": "aklish", "name": "Aaron Klish"}}, "url": "https://github.com/yahoo/elide/commit/fd871a0624f7b056f6e6ae7bd8897d9979110c47", "committedDate": "2020-01-16T15:48:31Z", "message": "Fixing checkstyle (extra space)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0MDc2NTY3", "url": "https://github.com/yahoo/elide/pull/1131#pullrequestreview-344076567", "createdAt": "2020-01-16T17:09:33Z", "commit": {"oid": "fd871a0624f7b056f6e6ae7bd8897d9979110c47"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 680, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}