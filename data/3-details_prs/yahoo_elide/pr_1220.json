{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwNjAyMjM3", "number": 1220, "title": "Elide 5.x dynamic config handlebars hydration", "bodyText": "Authored-by: rishi-aga\nOne of the multiple PRs that will resolve #1178 (if appropriate)\nDescription\nHydrate the HandleBar Template for Table/Security with hjson parameters.\nMotivation and Context\nPlease refer #1178\nHow Has This Been Tested?\nUnit tests have been included.\nLicense\nI confirm that this contribution is made under an Apache 2.0 license and that I have the authority necessary to make this contribution on behalf of its copyright owner.", "createdAt": "2020-03-18T18:37:47Z", "url": "https://github.com/yahoo/elide/pull/1220", "merged": true, "mergeCommit": {"oid": "a763af33288a9d5b5fb6f03acbb700bb0cbe88ee"}, "closed": true, "closedAt": "2020-05-14T02:50:44Z", "author": {"login": "moizarafat"}, "timelineItems": {"totalCount": 67, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQ-V9NABqjMxNjIyNjk1NDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABchDx0lgH2gAyMzkwNjAyMjM3OjNjMGExNGU2YjY3ZmNlYmM4Yzk2ZWQ0MmI2MGJjNzcxNDU0NzIzMzI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d264477727f10bbea2dbb883403f28768bb0f39a", "author": {"user": {"login": "rishi-aga", "name": null}}, "url": "https://github.com/yahoo/elide/commit/d264477727f10bbea2dbb883403f28768bb0f39a", "committedDate": "2020-03-24T19:43:28Z", "message": "Methods to hydrate security and config templates"}, "afterCommit": {"oid": "4d058f281142420054a77d348b6ba01955ab5292", "author": {"user": {"login": "rishi-aga", "name": null}}, "url": "https://github.com/yahoo/elide/commit/4d058f281142420054a77d348b6ba01955ab5292", "committedDate": "2020-03-25T02:46:35Z", "message": "Methods to hydrate security and config templates"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4d058f281142420054a77d348b6ba01955ab5292", "author": {"user": {"login": "rishi-aga", "name": null}}, "url": "https://github.com/yahoo/elide/commit/4d058f281142420054a77d348b6ba01955ab5292", "committedDate": "2020-03-25T02:46:35Z", "message": "Methods to hydrate security and config templates"}, "afterCommit": {"oid": "5f3fc54e299233b5660bbfbc78e0a45c7c79df6d", "author": {"user": {"login": "rishi-aga", "name": null}}, "url": "https://github.com/yahoo/elide/commit/5f3fc54e299233b5660bbfbc78e0a45c7c79df6d", "committedDate": "2020-03-25T02:50:45Z", "message": "Methods to hydrate security and config templates"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5f3fc54e299233b5660bbfbc78e0a45c7c79df6d", "author": {"user": {"login": "rishi-aga", "name": null}}, "url": "https://github.com/yahoo/elide/commit/5f3fc54e299233b5660bbfbc78e0a45c7c79df6d", "committedDate": "2020-03-25T02:50:45Z", "message": "Methods to hydrate security and config templates"}, "afterCommit": {"oid": "c58a789dc6fb8bc8963f731bfb092d24f7f7de21", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/c58a789dc6fb8bc8963f731bfb092d24f7f7de21", "committedDate": "2020-03-25T14:13:55Z", "message": "JavaDocs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxNDQ0NTk5", "url": "https://github.com/yahoo/elide/pull/1220#pullrequestreview-381444599", "createdAt": "2020-03-25T18:53:43Z", "commit": {"oid": "89060707ae67ab6d4459e870daf5d6f15e34890b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxODo1Mzo0M1rOF7pwLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjoyOTo1NlrOF7wyeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA5NDM4MQ==", "bodyText": "Role checks should be generated from roles rather than rules.  Rules we are skipping for first phase.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r398094381", "createdAt": "2020-03-25T18:53:43Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/security.hbs", "diffHunk": "@@ -0,0 +1,22 @@\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import java.security.Principal;\n+import java.util.Optional;\n+import com.yahoo.elide.annotation.SecurityCheck;\n+import com.yahoo.elide.security.checks.prefab.Role.RoleMemberCheck;\n+\n+/**\n+ * Operation Checks on the Async Query and Result objects.\n+ */\n+public class AsyncQueryOperationChecks {\n+\n+{{#each rules}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89060707ae67ab6d4459e870daf5d6f15e34890b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA5NTIyNg==", "bodyText": "We also need to be able to generate FromSQL annotation as well.  It will be one or the other (FromTable or FromSQL).", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r398095226", "createdAt": "2020-03-25T18:55:07Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+import com.yahoo.elide.datastores.aggregation.annotation.DimensionFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.Join;\n+import com.yahoo.elide.datastores.aggregation.annotation.JoinTo;\n+import com.yahoo.elide.datastores.aggregation.annotation.Temporal;\n+import com.yahoo.elide.datastores.aggregation.annotation.TimeGrainDefinition;\n+import com.yahoo.elide.datastores.aggregation.metadata.enums.TimeGrain;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+import lombok.Data;\n+\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Id;\n+import javax.persistence.Entity;\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Include(rootLevel = true)\n+@Cardinality(size = CardinalitySize.{{#toUpperCase cardinality}}{{/toUpperCase}})\n+@EqualsAndHashCode\n+@ToString\n+@Entity\n+@Data\n+{{#if table}}@FromTable(name = \"{{table}}\"){{/if}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89060707ae67ab6d4459e870daf5d6f15e34890b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA5NTc3Ng==", "bodyText": "Each Dimension and Metric will need an annotation (DimensionFormula and MetricFormula) respectively.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r398095776", "createdAt": "2020-03-25T18:56:01Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+import com.yahoo.elide.datastores.aggregation.annotation.DimensionFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.Join;\n+import com.yahoo.elide.datastores.aggregation.annotation.JoinTo;\n+import com.yahoo.elide.datastores.aggregation.annotation.Temporal;\n+import com.yahoo.elide.datastores.aggregation.annotation.TimeGrainDefinition;\n+import com.yahoo.elide.datastores.aggregation.metadata.enums.TimeGrain;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+import lombok.Data;\n+\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Id;\n+import javax.persistence.Entity;\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Include(rootLevel = true)\n+@Cardinality(size = CardinalitySize.{{#toUpperCase cardinality}}{{/toUpperCase}})\n+@EqualsAndHashCode\n+@ToString\n+@Entity\n+@Data\n+{{#if table}}@FromTable(name = \"{{table}}\"){{/if}}\n+public class {{#capitalizeFirstLetter name}}{{/capitalizeFirstLetter}} {\n+\n+    @Id\n+    private String name;\n+\n+{{#each dimensions}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89060707ae67ab6d4459e870daf5d6f15e34890b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA5NzIzOA==", "bodyText": "We shouldn't need to generate getter and setter methods.  These can be removed (they are implied by @Data).", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r398097238", "createdAt": "2020-03-25T18:58:31Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+import com.yahoo.elide.datastores.aggregation.annotation.DimensionFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.Join;\n+import com.yahoo.elide.datastores.aggregation.annotation.JoinTo;\n+import com.yahoo.elide.datastores.aggregation.annotation.Temporal;\n+import com.yahoo.elide.datastores.aggregation.annotation.TimeGrainDefinition;\n+import com.yahoo.elide.datastores.aggregation.metadata.enums.TimeGrain;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+import lombok.Data;\n+\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Id;\n+import javax.persistence.Entity;\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Include(rootLevel = true)\n+@Cardinality(size = CardinalitySize.{{#toUpperCase cardinality}}{{/toUpperCase}})\n+@EqualsAndHashCode\n+@ToString\n+@Entity\n+@Data\n+{{#if table}}@FromTable(name = \"{{table}}\"){{/if}}\n+public class {{#capitalizeFirstLetter name}}{{/capitalizeFirstLetter}} {\n+\n+    @Id\n+    private String name;\n+\n+{{#each dimensions}}\n+    private {{#getDimensionType this}}{{/getDimensionType}} {{name}};\n+{{/each}}\n+\n+{{#each joins}}\n+    private {{#capitalizeFirstLetter to}}{{/capitalizeFirstLetter}} {{ name }};\n+ {{/each}}\n+\n+{{#each dimensions}}\n+{{!--  --}}\n+{{#ifDimTypeMatches this \"TIME\"}}\n+    @Temporal(grains = {\n+    {{#each grains}}\n+            @TimeGrainDefinition(grain = TimeGrain.{{grain}}, expression = \"{{sql}}\"){{#if @last}}{{else}}, {{/if}}\n+    {{/each}}\n+    }, timeZone = \"UTC\")\n+\n+    {{#generateDimGetterMethod this}}{{/generateDimGetterMethod}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89060707ae67ab6d4459e870daf5d6f15e34890b"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODExMjIyNw==", "bodyText": "The definition should go inside the formula", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r398112227", "createdAt": "2020-03-25T19:24:25Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+import com.yahoo.elide.datastores.aggregation.annotation.DimensionFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.Join;\n+import com.yahoo.elide.datastores.aggregation.annotation.JoinTo;\n+import com.yahoo.elide.datastores.aggregation.annotation.Temporal;\n+import com.yahoo.elide.datastores.aggregation.annotation.TimeGrainDefinition;\n+import com.yahoo.elide.datastores.aggregation.metadata.enums.TimeGrain;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+import lombok.Data;\n+\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Id;\n+import javax.persistence.Entity;\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Include(rootLevel = true)\n+@Cardinality(size = CardinalitySize.{{#toUpperCase cardinality}}{{/toUpperCase}})\n+@EqualsAndHashCode\n+@ToString\n+@Entity\n+@Data\n+{{#if table}}@FromTable(name = \"{{table}}\"){{/if}}\n+public class {{#capitalizeFirstLetter name}}{{/capitalizeFirstLetter}} {\n+\n+    @Id\n+    private String name;\n+\n+{{#each dimensions}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA5NTc3Ng=="}, "originalCommit": {"oid": "89060707ae67ab6d4459e870daf5d6f15e34890b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODExMjc4NA==", "bodyText": "We are missing @ReadPermission annotation.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r398112784", "createdAt": "2020-03-25T19:25:21Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+import com.yahoo.elide.datastores.aggregation.annotation.DimensionFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.Join;\n+import com.yahoo.elide.datastores.aggregation.annotation.JoinTo;\n+import com.yahoo.elide.datastores.aggregation.annotation.Temporal;\n+import com.yahoo.elide.datastores.aggregation.annotation.TimeGrainDefinition;\n+import com.yahoo.elide.datastores.aggregation.metadata.enums.TimeGrain;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+import lombok.Data;\n+\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Id;\n+import javax.persistence.Entity;\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Include(rootLevel = true)\n+@Cardinality(size = CardinalitySize.{{#toUpperCase cardinality}}{{/toUpperCase}})\n+@EqualsAndHashCode\n+@ToString\n+@Entity\n+@Data\n+{{#if table}}@FromTable(name = \"{{table}}\"){{/if}}\n+public class {{#capitalizeFirstLetter name}}{{/capitalizeFirstLetter}} {\n+\n+    @Id\n+    private String name;\n+\n+{{#each dimensions}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA5NTc3Ng=="}, "originalCommit": {"oid": "89060707ae67ab6d4459e870daf5d6f15e34890b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE5NjMwOQ==", "bodyText": "We also need to handle extends here as well - it can be any of these options.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r398196309", "createdAt": "2020-03-25T21:59:18Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+import com.yahoo.elide.datastores.aggregation.annotation.DimensionFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.Join;\n+import com.yahoo.elide.datastores.aggregation.annotation.JoinTo;\n+import com.yahoo.elide.datastores.aggregation.annotation.Temporal;\n+import com.yahoo.elide.datastores.aggregation.annotation.TimeGrainDefinition;\n+import com.yahoo.elide.datastores.aggregation.metadata.enums.TimeGrain;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+import lombok.Data;\n+\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Id;\n+import javax.persistence.Entity;\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Include(rootLevel = true)\n+@Cardinality(size = CardinalitySize.{{#toUpperCase cardinality}}{{/toUpperCase}})\n+@EqualsAndHashCode\n+@ToString\n+@Entity\n+@Data\n+{{#if table}}@FromTable(name = \"{{table}}\"){{/if}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA5NTIyNg=="}, "originalCommit": {"oid": "89060707ae67ab6d4459e870daf5d6f15e34890b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE5NjcxNg==", "bodyText": "Each dimension is missing the @Meta annotation.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r398196716", "createdAt": "2020-03-25T22:00:16Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+import com.yahoo.elide.datastores.aggregation.annotation.DimensionFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.Join;\n+import com.yahoo.elide.datastores.aggregation.annotation.JoinTo;\n+import com.yahoo.elide.datastores.aggregation.annotation.Temporal;\n+import com.yahoo.elide.datastores.aggregation.annotation.TimeGrainDefinition;\n+import com.yahoo.elide.datastores.aggregation.metadata.enums.TimeGrain;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+import lombok.Data;\n+\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Id;\n+import javax.persistence.Entity;\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Include(rootLevel = true)\n+@Cardinality(size = CardinalitySize.{{#toUpperCase cardinality}}{{/toUpperCase}})\n+@EqualsAndHashCode\n+@ToString\n+@Entity\n+@Data\n+{{#if table}}@FromTable(name = \"{{table}}\"){{/if}}\n+public class {{#capitalizeFirstLetter name}}{{/capitalizeFirstLetter}} {\n+\n+    @Id\n+    private String name;\n+\n+{{#each dimensions}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA5NTc3Ng=="}, "originalCommit": {"oid": "89060707ae67ab6d4459e870daf5d6f15e34890b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE5NzM3NA==", "bodyText": "We generally shouldn't need getter & setter methods anywhere in the generated class files.  We should put all the annotations on the fields.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r398197374", "createdAt": "2020-03-25T22:01:44Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+import com.yahoo.elide.datastores.aggregation.annotation.DimensionFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.Join;\n+import com.yahoo.elide.datastores.aggregation.annotation.JoinTo;\n+import com.yahoo.elide.datastores.aggregation.annotation.Temporal;\n+import com.yahoo.elide.datastores.aggregation.annotation.TimeGrainDefinition;\n+import com.yahoo.elide.datastores.aggregation.metadata.enums.TimeGrain;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+import lombok.Data;\n+\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Id;\n+import javax.persistence.Entity;\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Include(rootLevel = true)\n+@Cardinality(size = CardinalitySize.{{#toUpperCase cardinality}}{{/toUpperCase}})\n+@EqualsAndHashCode\n+@ToString\n+@Entity\n+@Data\n+{{#if table}}@FromTable(name = \"{{table}}\"){{/if}}\n+public class {{#capitalizeFirstLetter name}}{{/capitalizeFirstLetter}} {\n+\n+    @Id\n+    private String name;\n+\n+{{#each dimensions}}\n+    private {{#getDimensionType this}}{{/getDimensionType}} {{name}};\n+{{/each}}\n+\n+{{#each joins}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89060707ae67ab6d4459e870daf5d6f15e34890b"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwMTk2MA==", "bodyText": "So the join type is either toOne or toMany.  What is generated above is correct for toOne.  We are not correctly handling the toMany case.\nFor toMany - this will be a collection (Set) of the type.  For example, (book.authors) would have a Set<Author> objects instead of just Author.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r398201960", "createdAt": "2020-03-25T22:12:14Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+import com.yahoo.elide.datastores.aggregation.annotation.DimensionFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.Join;\n+import com.yahoo.elide.datastores.aggregation.annotation.JoinTo;\n+import com.yahoo.elide.datastores.aggregation.annotation.Temporal;\n+import com.yahoo.elide.datastores.aggregation.annotation.TimeGrainDefinition;\n+import com.yahoo.elide.datastores.aggregation.metadata.enums.TimeGrain;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+import lombok.Data;\n+\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Id;\n+import javax.persistence.Entity;\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Include(rootLevel = true)\n+@Cardinality(size = CardinalitySize.{{#toUpperCase cardinality}}{{/toUpperCase}})\n+@EqualsAndHashCode\n+@ToString\n+@Entity\n+@Data\n+{{#if table}}@FromTable(name = \"{{table}}\"){{/if}}\n+public class {{#capitalizeFirstLetter name}}{{/capitalizeFirstLetter}} {\n+\n+    @Id\n+    private String name;\n+\n+{{#each dimensions}}\n+    private {{#getDimensionType this}}{{/getDimensionType}} {{name}};\n+{{/each}}\n+\n+{{#each joins}}\n+    private {{#capitalizeFirstLetter to}}{{/capitalizeFirstLetter}} {{ name }};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89060707ae67ab6d4459e870daf5d6f15e34890b"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwMjUyNA==", "bodyText": "Why not just dimDataType.equals(typeToMatch)?", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r398202524", "createdAt": "2020-03-25T22:13:34Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/handlebars/HandlebarsHelper.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.parser.handlebars;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Dimension;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Join;\n+\n+import com.github.jknack.handlebars.Options;\n+\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Helper class for handlebar template hydration.\n+ */\n+public class HandlebarsHelper {\n+\n+    private static final String EMPTY_STRING = \"\";\n+    private static final String UNDERSCORE = \"_\";\n+    private static final String STRING = \"String\";\n+    private static final String DATE = \"Date\";\n+    private static final String DOUBLE = \"Double\";\n+    private static final String LONG = \"Long\";\n+    private static final String BOOLEAN = \"Boolean\";\n+    private static final String SPACE = \" \";\n+    private static final String FOUR_SPACES = \"    \";\n+    private static final String EIGHT_SPACES = FOUR_SPACES + FOUR_SPACES;\n+    private static final String NEWLINE = \"\\n\";\n+    private static final String WHITESPACE_REGEX = \"\\\\s+\";\n+\n+    /**\n+     * Capitalize first letter of the string.\n+     * @param str string to capitalize first letter\n+     * @return string with first letter capitalized\n+     */\n+    public String capitalizeFirstLetter(String str) {\n+\n+        return (str == null || str.length() == 0) ? str : str.substring(0, 1).toUpperCase(Locale.ENGLISH)\n+                + str.substring(1);\n+    }\n+\n+    /**\n+     * Transform string to upper case.\n+     * @param obj Object representation of the string\n+     * @return string converted to upper case\n+     */\n+    public String toUpperCase(Object obj) {\n+\n+        return (obj == null) ? EMPTY_STRING : obj.toString().toUpperCase(Locale.ENGLISH);\n+    }\n+\n+    /**\n+     * Transform string to lower case.\n+     * @param obj Object representation of the string\n+     * @return string converted to lower case\n+     */\n+    public String toLowerCase(Object obj) {\n+\n+        return (obj == null) ? EMPTY_STRING : obj.toString().toLowerCase(Locale.ENGLISH);\n+    }\n+\n+    /**\n+     * If template matches a string.\n+     * @param str String representation of the template\n+     * @param options options object with string to match\n+     * @return template if matched\n+     * @throws IOException IOException\n+     */\n+    public CharSequence ifContains(String str, Options options) throws IOException {\n+\n+        String toMatch = options.param(0, null);\n+        return options.isFalsy(contains(str, toMatch)) ? options.inverse() : options.fn();\n+    }\n+\n+    /**\n+     * If type of dimension matches passed value.\n+     * @param dim Elide dimension object\n+     * @param options options object with type/string to match\n+     * @return template if matched\n+     * @throws IOException IOException\n+     */\n+    public CharSequence ifDimTypeMatches(Dimension dim, Options options) throws IOException {\n+\n+        String dimDataType = dim.getType().toString();\n+        String typeToMatch = options.param(0, null);\n+        boolean result = new EqualsBuilder().append(dimDataType, typeToMatch).isEquals();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89060707ae67ab6d4459e870daf5d6f15e34890b"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwMjcwNQ==", "bodyText": "BigDecimal.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r398202705", "createdAt": "2020-03-25T22:13:58Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/handlebars/HandlebarsHelper.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.parser.handlebars;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Dimension;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Join;\n+\n+import com.github.jknack.handlebars.Options;\n+\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Helper class for handlebar template hydration.\n+ */\n+public class HandlebarsHelper {\n+\n+    private static final String EMPTY_STRING = \"\";\n+    private static final String UNDERSCORE = \"_\";\n+    private static final String STRING = \"String\";\n+    private static final String DATE = \"Date\";\n+    private static final String DOUBLE = \"Double\";\n+    private static final String LONG = \"Long\";\n+    private static final String BOOLEAN = \"Boolean\";\n+    private static final String SPACE = \" \";\n+    private static final String FOUR_SPACES = \"    \";\n+    private static final String EIGHT_SPACES = FOUR_SPACES + FOUR_SPACES;\n+    private static final String NEWLINE = \"\\n\";\n+    private static final String WHITESPACE_REGEX = \"\\\\s+\";\n+\n+    /**\n+     * Capitalize first letter of the string.\n+     * @param str string to capitalize first letter\n+     * @return string with first letter capitalized\n+     */\n+    public String capitalizeFirstLetter(String str) {\n+\n+        return (str == null || str.length() == 0) ? str : str.substring(0, 1).toUpperCase(Locale.ENGLISH)\n+                + str.substring(1);\n+    }\n+\n+    /**\n+     * Transform string to upper case.\n+     * @param obj Object representation of the string\n+     * @return string converted to upper case\n+     */\n+    public String toUpperCase(Object obj) {\n+\n+        return (obj == null) ? EMPTY_STRING : obj.toString().toUpperCase(Locale.ENGLISH);\n+    }\n+\n+    /**\n+     * Transform string to lower case.\n+     * @param obj Object representation of the string\n+     * @return string converted to lower case\n+     */\n+    public String toLowerCase(Object obj) {\n+\n+        return (obj == null) ? EMPTY_STRING : obj.toString().toLowerCase(Locale.ENGLISH);\n+    }\n+\n+    /**\n+     * If template matches a string.\n+     * @param str String representation of the template\n+     * @param options options object with string to match\n+     * @return template if matched\n+     * @throws IOException IOException\n+     */\n+    public CharSequence ifContains(String str, Options options) throws IOException {\n+\n+        String toMatch = options.param(0, null);\n+        return options.isFalsy(contains(str, toMatch)) ? options.inverse() : options.fn();\n+    }\n+\n+    /**\n+     * If type of dimension matches passed value.\n+     * @param dim Elide dimension object\n+     * @param options options object with type/string to match\n+     * @return template if matched\n+     * @throws IOException IOException\n+     */\n+    public CharSequence ifDimTypeMatches(Dimension dim, Options options) throws IOException {\n+\n+        String dimDataType = dim.getType().toString();\n+        String typeToMatch = options.param(0, null);\n+        boolean result = new EqualsBuilder().append(dimDataType, typeToMatch).isEquals();\n+        return result ? options.fn() : options.inverse();\n+    }\n+\n+    /**\n+     * If string contains passed value.\n+     * @param str String to be searched\n+     * @param search pattern to search\n+     * @return true/false if matched\n+     */\n+    public boolean contains(String str, String search) {\n+\n+        return (str == null || str.indexOf(search) < 0);\n+    }\n+\n+    /**\n+     * Generate setter method.\n+     * @param type Type of the field\n+     * @param fieldName Field Name\n+     * @return setter method\n+     */\n+    public String generateSetterMethod(String type, String fieldName) {\n+\n+        return \"public void set\" + capitalizeFirstLetter(fieldName) + \"(\" + type + SPACE + fieldName + \") {\" + NEWLINE\n+                        + EIGHT_SPACES + \"this.\" + fieldName + \" = \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    /**\n+     * Generate setter method for Dimension Type.\n+     * @param dim Dimension Object\n+     * @return setter method\n+     */\n+    public String generateDimSetterMethod(Dimension dim) {\n+\n+        String type = getDimensionType(dim);\n+        String fieldName = dim.getName();\n+        return \"public void set\" + capitalizeFirstLetter(fieldName) + \"(\" + type + SPACE + fieldName + \") {\" + NEWLINE\n+                        + EIGHT_SPACES + \"this.\" + fieldName + \" = \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    /**\n+     * Generate setter method for Join Type.\n+     * @param join Join Object\n+     * @return setter method\n+     */\n+    public String generateJoinSetterMethod(Join join) {\n+\n+        String type = capitalizeFirstLetter(join.getTo());\n+        String fieldName = join.getName();\n+        return \"public void set\" + capitalizeFirstLetter(fieldName) + \"(\" + type + SPACE + fieldName + \") {\" + NEWLINE\n+                        + EIGHT_SPACES + \"this.\" + fieldName + \" = \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    /**\n+     * Generate getter method.\n+     * @param type Type of the field\n+     * @param fieldName field Name\n+     * @return getter method\n+     */\n+    public String generateGetterMethod(String type, String fieldName) {\n+\n+        return \"public \" + type + \" get\" + capitalizeFirstLetter(fieldName) + \"() {\" + NEWLINE + EIGHT_SPACES\n+                        + \"return \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    /**\n+     * Generate getter method for Dimension type.\n+     * @param dim Dimension Object\n+     * @return getter method\n+     */\n+    public String generateDimGetterMethod(Dimension dim) {\n+\n+        String type = getDimensionType(dim);\n+        String fieldName = dim.getName();\n+        return \"public \" + type + \" get\" + capitalizeFirstLetter(fieldName) + \"() {\" + NEWLINE + EIGHT_SPACES\n+                        + \"return \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    /**\n+     * Generate getter method for Join type.\n+     * @param join Join Object\n+     * @return getter method\n+     */\n+    public String generateJoinGetterMethod(Join join) {\n+\n+        String type = capitalizeFirstLetter(join.getTo());\n+        String fieldName = join.getName();\n+        return \"public \" + type + \" get\" + capitalizeFirstLetter(fieldName) + \"() {\" + NEWLINE + EIGHT_SPACES\n+                        + \"return \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    // Security.java helper methods\n+    /**\n+     * Get the Class Name for Security.\n+     * @param name Name of the security rule\n+     * @return Capitalize First Letter of Each Word and remove spaces\n+     */\n+    public String getClassSuffix(String name) {\n+\n+        String[] nameSplit = name.trim().split(WHITESPACE_REGEX);\n+        return String.join(EMPTY_STRING,\n+                Arrays.asList(nameSplit).stream().map(str -> capitalizeFirstLetter(str)).collect(Collectors.toList()));\n+    }\n+\n+    /**\n+     * Get Variable Name for Security rule.\n+     * @param name Name of the security rule\n+     * @return Change each word to upper case and replace spaces with underscore\n+     */\n+    public String getVarName(String name) {\n+\n+        String[] nameSplit = name.trim().split(WHITESPACE_REGEX);\n+        return String.join(UNDERSCORE,\n+                Arrays.asList(nameSplit).stream().map(str -> toUpperCase(str)).collect(Collectors.toList()));\n+    }\n+\n+    /**\n+     * Get Name of the security role from security rule.\n+     * @param name Name of the security rule\n+     * @return Last word in lower case\n+     */\n+    public String getRoleName(String name) {\n+\n+        String[] nameSplit = name.trim().split(WHITESPACE_REGEX);\n+        return toLowerCase(nameSplit[nameSplit.length - 1]);\n+    }\n+\n+    /**\n+     * Get java type name corresponding to the dimension type.\n+     * @param dim Dimension Object\n+     * @return The corresponding java type name\n+     */\n+    public String getDimensionType(Dimension dim) {\n+\n+        switch (dim.getType()) {\n+            case BOOLEAN:\n+                return BOOLEAN;\n+            case COORDINATE:\n+                return STRING;\n+            case INTEGER:\n+                return LONG;\n+            case TEXT:\n+                return STRING;\n+            case TIME:\n+                return DATE;\n+            case DECIMAL:\n+                return DOUBLE;\n+            case MONEY:\n+                return DOUBLE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89060707ae67ab6d4459e870daf5d6f15e34890b"}, "originalPosition": 241}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwMjgxNQ==", "bodyText": "BigDecimal.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r398202815", "createdAt": "2020-03-25T22:14:10Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/handlebars/HandlebarsHelper.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.parser.handlebars;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Dimension;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Join;\n+\n+import com.github.jknack.handlebars.Options;\n+\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Helper class for handlebar template hydration.\n+ */\n+public class HandlebarsHelper {\n+\n+    private static final String EMPTY_STRING = \"\";\n+    private static final String UNDERSCORE = \"_\";\n+    private static final String STRING = \"String\";\n+    private static final String DATE = \"Date\";\n+    private static final String DOUBLE = \"Double\";\n+    private static final String LONG = \"Long\";\n+    private static final String BOOLEAN = \"Boolean\";\n+    private static final String SPACE = \" \";\n+    private static final String FOUR_SPACES = \"    \";\n+    private static final String EIGHT_SPACES = FOUR_SPACES + FOUR_SPACES;\n+    private static final String NEWLINE = \"\\n\";\n+    private static final String WHITESPACE_REGEX = \"\\\\s+\";\n+\n+    /**\n+     * Capitalize first letter of the string.\n+     * @param str string to capitalize first letter\n+     * @return string with first letter capitalized\n+     */\n+    public String capitalizeFirstLetter(String str) {\n+\n+        return (str == null || str.length() == 0) ? str : str.substring(0, 1).toUpperCase(Locale.ENGLISH)\n+                + str.substring(1);\n+    }\n+\n+    /**\n+     * Transform string to upper case.\n+     * @param obj Object representation of the string\n+     * @return string converted to upper case\n+     */\n+    public String toUpperCase(Object obj) {\n+\n+        return (obj == null) ? EMPTY_STRING : obj.toString().toUpperCase(Locale.ENGLISH);\n+    }\n+\n+    /**\n+     * Transform string to lower case.\n+     * @param obj Object representation of the string\n+     * @return string converted to lower case\n+     */\n+    public String toLowerCase(Object obj) {\n+\n+        return (obj == null) ? EMPTY_STRING : obj.toString().toLowerCase(Locale.ENGLISH);\n+    }\n+\n+    /**\n+     * If template matches a string.\n+     * @param str String representation of the template\n+     * @param options options object with string to match\n+     * @return template if matched\n+     * @throws IOException IOException\n+     */\n+    public CharSequence ifContains(String str, Options options) throws IOException {\n+\n+        String toMatch = options.param(0, null);\n+        return options.isFalsy(contains(str, toMatch)) ? options.inverse() : options.fn();\n+    }\n+\n+    /**\n+     * If type of dimension matches passed value.\n+     * @param dim Elide dimension object\n+     * @param options options object with type/string to match\n+     * @return template if matched\n+     * @throws IOException IOException\n+     */\n+    public CharSequence ifDimTypeMatches(Dimension dim, Options options) throws IOException {\n+\n+        String dimDataType = dim.getType().toString();\n+        String typeToMatch = options.param(0, null);\n+        boolean result = new EqualsBuilder().append(dimDataType, typeToMatch).isEquals();\n+        return result ? options.fn() : options.inverse();\n+    }\n+\n+    /**\n+     * If string contains passed value.\n+     * @param str String to be searched\n+     * @param search pattern to search\n+     * @return true/false if matched\n+     */\n+    public boolean contains(String str, String search) {\n+\n+        return (str == null || str.indexOf(search) < 0);\n+    }\n+\n+    /**\n+     * Generate setter method.\n+     * @param type Type of the field\n+     * @param fieldName Field Name\n+     * @return setter method\n+     */\n+    public String generateSetterMethod(String type, String fieldName) {\n+\n+        return \"public void set\" + capitalizeFirstLetter(fieldName) + \"(\" + type + SPACE + fieldName + \") {\" + NEWLINE\n+                        + EIGHT_SPACES + \"this.\" + fieldName + \" = \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    /**\n+     * Generate setter method for Dimension Type.\n+     * @param dim Dimension Object\n+     * @return setter method\n+     */\n+    public String generateDimSetterMethod(Dimension dim) {\n+\n+        String type = getDimensionType(dim);\n+        String fieldName = dim.getName();\n+        return \"public void set\" + capitalizeFirstLetter(fieldName) + \"(\" + type + SPACE + fieldName + \") {\" + NEWLINE\n+                        + EIGHT_SPACES + \"this.\" + fieldName + \" = \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    /**\n+     * Generate setter method for Join Type.\n+     * @param join Join Object\n+     * @return setter method\n+     */\n+    public String generateJoinSetterMethod(Join join) {\n+\n+        String type = capitalizeFirstLetter(join.getTo());\n+        String fieldName = join.getName();\n+        return \"public void set\" + capitalizeFirstLetter(fieldName) + \"(\" + type + SPACE + fieldName + \") {\" + NEWLINE\n+                        + EIGHT_SPACES + \"this.\" + fieldName + \" = \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    /**\n+     * Generate getter method.\n+     * @param type Type of the field\n+     * @param fieldName field Name\n+     * @return getter method\n+     */\n+    public String generateGetterMethod(String type, String fieldName) {\n+\n+        return \"public \" + type + \" get\" + capitalizeFirstLetter(fieldName) + \"() {\" + NEWLINE + EIGHT_SPACES\n+                        + \"return \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    /**\n+     * Generate getter method for Dimension type.\n+     * @param dim Dimension Object\n+     * @return getter method\n+     */\n+    public String generateDimGetterMethod(Dimension dim) {\n+\n+        String type = getDimensionType(dim);\n+        String fieldName = dim.getName();\n+        return \"public \" + type + \" get\" + capitalizeFirstLetter(fieldName) + \"() {\" + NEWLINE + EIGHT_SPACES\n+                        + \"return \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    /**\n+     * Generate getter method for Join type.\n+     * @param join Join Object\n+     * @return getter method\n+     */\n+    public String generateJoinGetterMethod(Join join) {\n+\n+        String type = capitalizeFirstLetter(join.getTo());\n+        String fieldName = join.getName();\n+        return \"public \" + type + \" get\" + capitalizeFirstLetter(fieldName) + \"() {\" + NEWLINE + EIGHT_SPACES\n+                        + \"return \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    // Security.java helper methods\n+    /**\n+     * Get the Class Name for Security.\n+     * @param name Name of the security rule\n+     * @return Capitalize First Letter of Each Word and remove spaces\n+     */\n+    public String getClassSuffix(String name) {\n+\n+        String[] nameSplit = name.trim().split(WHITESPACE_REGEX);\n+        return String.join(EMPTY_STRING,\n+                Arrays.asList(nameSplit).stream().map(str -> capitalizeFirstLetter(str)).collect(Collectors.toList()));\n+    }\n+\n+    /**\n+     * Get Variable Name for Security rule.\n+     * @param name Name of the security rule\n+     * @return Change each word to upper case and replace spaces with underscore\n+     */\n+    public String getVarName(String name) {\n+\n+        String[] nameSplit = name.trim().split(WHITESPACE_REGEX);\n+        return String.join(UNDERSCORE,\n+                Arrays.asList(nameSplit).stream().map(str -> toUpperCase(str)).collect(Collectors.toList()));\n+    }\n+\n+    /**\n+     * Get Name of the security role from security rule.\n+     * @param name Name of the security rule\n+     * @return Last word in lower case\n+     */\n+    public String getRoleName(String name) {\n+\n+        String[] nameSplit = name.trim().split(WHITESPACE_REGEX);\n+        return toLowerCase(nameSplit[nameSplit.length - 1]);\n+    }\n+\n+    /**\n+     * Get java type name corresponding to the dimension type.\n+     * @param dim Dimension Object\n+     * @return The corresponding java type name\n+     */\n+    public String getDimensionType(Dimension dim) {\n+\n+        switch (dim.getType()) {\n+            case BOOLEAN:\n+                return BOOLEAN;\n+            case COORDINATE:\n+                return STRING;\n+            case INTEGER:\n+                return LONG;\n+            case TEXT:\n+                return STRING;\n+            case TIME:\n+                return DATE;\n+            case DECIMAL:\n+                return DOUBLE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89060707ae67ab6d4459e870daf5d6f15e34890b"}, "originalPosition": 239}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwMzkxMQ==", "bodyText": "The role name should not be extracted from the Rules - but rather the Roles.  As such, we don't need to parse text like \"Principal is ADMIN\".", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r398203911", "createdAt": "2020-03-25T22:16:35Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/handlebars/HandlebarsHelper.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.parser.handlebars;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Dimension;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Join;\n+\n+import com.github.jknack.handlebars.Options;\n+\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Helper class for handlebar template hydration.\n+ */\n+public class HandlebarsHelper {\n+\n+    private static final String EMPTY_STRING = \"\";\n+    private static final String UNDERSCORE = \"_\";\n+    private static final String STRING = \"String\";\n+    private static final String DATE = \"Date\";\n+    private static final String DOUBLE = \"Double\";\n+    private static final String LONG = \"Long\";\n+    private static final String BOOLEAN = \"Boolean\";\n+    private static final String SPACE = \" \";\n+    private static final String FOUR_SPACES = \"    \";\n+    private static final String EIGHT_SPACES = FOUR_SPACES + FOUR_SPACES;\n+    private static final String NEWLINE = \"\\n\";\n+    private static final String WHITESPACE_REGEX = \"\\\\s+\";\n+\n+    /**\n+     * Capitalize first letter of the string.\n+     * @param str string to capitalize first letter\n+     * @return string with first letter capitalized\n+     */\n+    public String capitalizeFirstLetter(String str) {\n+\n+        return (str == null || str.length() == 0) ? str : str.substring(0, 1).toUpperCase(Locale.ENGLISH)\n+                + str.substring(1);\n+    }\n+\n+    /**\n+     * Transform string to upper case.\n+     * @param obj Object representation of the string\n+     * @return string converted to upper case\n+     */\n+    public String toUpperCase(Object obj) {\n+\n+        return (obj == null) ? EMPTY_STRING : obj.toString().toUpperCase(Locale.ENGLISH);\n+    }\n+\n+    /**\n+     * Transform string to lower case.\n+     * @param obj Object representation of the string\n+     * @return string converted to lower case\n+     */\n+    public String toLowerCase(Object obj) {\n+\n+        return (obj == null) ? EMPTY_STRING : obj.toString().toLowerCase(Locale.ENGLISH);\n+    }\n+\n+    /**\n+     * If template matches a string.\n+     * @param str String representation of the template\n+     * @param options options object with string to match\n+     * @return template if matched\n+     * @throws IOException IOException\n+     */\n+    public CharSequence ifContains(String str, Options options) throws IOException {\n+\n+        String toMatch = options.param(0, null);\n+        return options.isFalsy(contains(str, toMatch)) ? options.inverse() : options.fn();\n+    }\n+\n+    /**\n+     * If type of dimension matches passed value.\n+     * @param dim Elide dimension object\n+     * @param options options object with type/string to match\n+     * @return template if matched\n+     * @throws IOException IOException\n+     */\n+    public CharSequence ifDimTypeMatches(Dimension dim, Options options) throws IOException {\n+\n+        String dimDataType = dim.getType().toString();\n+        String typeToMatch = options.param(0, null);\n+        boolean result = new EqualsBuilder().append(dimDataType, typeToMatch).isEquals();\n+        return result ? options.fn() : options.inverse();\n+    }\n+\n+    /**\n+     * If string contains passed value.\n+     * @param str String to be searched\n+     * @param search pattern to search\n+     * @return true/false if matched\n+     */\n+    public boolean contains(String str, String search) {\n+\n+        return (str == null || str.indexOf(search) < 0);\n+    }\n+\n+    /**\n+     * Generate setter method.\n+     * @param type Type of the field\n+     * @param fieldName Field Name\n+     * @return setter method\n+     */\n+    public String generateSetterMethod(String type, String fieldName) {\n+\n+        return \"public void set\" + capitalizeFirstLetter(fieldName) + \"(\" + type + SPACE + fieldName + \") {\" + NEWLINE\n+                        + EIGHT_SPACES + \"this.\" + fieldName + \" = \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    /**\n+     * Generate setter method for Dimension Type.\n+     * @param dim Dimension Object\n+     * @return setter method\n+     */\n+    public String generateDimSetterMethod(Dimension dim) {\n+\n+        String type = getDimensionType(dim);\n+        String fieldName = dim.getName();\n+        return \"public void set\" + capitalizeFirstLetter(fieldName) + \"(\" + type + SPACE + fieldName + \") {\" + NEWLINE\n+                        + EIGHT_SPACES + \"this.\" + fieldName + \" = \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    /**\n+     * Generate setter method for Join Type.\n+     * @param join Join Object\n+     * @return setter method\n+     */\n+    public String generateJoinSetterMethod(Join join) {\n+\n+        String type = capitalizeFirstLetter(join.getTo());\n+        String fieldName = join.getName();\n+        return \"public void set\" + capitalizeFirstLetter(fieldName) + \"(\" + type + SPACE + fieldName + \") {\" + NEWLINE\n+                        + EIGHT_SPACES + \"this.\" + fieldName + \" = \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    /**\n+     * Generate getter method.\n+     * @param type Type of the field\n+     * @param fieldName field Name\n+     * @return getter method\n+     */\n+    public String generateGetterMethod(String type, String fieldName) {\n+\n+        return \"public \" + type + \" get\" + capitalizeFirstLetter(fieldName) + \"() {\" + NEWLINE + EIGHT_SPACES\n+                        + \"return \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    /**\n+     * Generate getter method for Dimension type.\n+     * @param dim Dimension Object\n+     * @return getter method\n+     */\n+    public String generateDimGetterMethod(Dimension dim) {\n+\n+        String type = getDimensionType(dim);\n+        String fieldName = dim.getName();\n+        return \"public \" + type + \" get\" + capitalizeFirstLetter(fieldName) + \"() {\" + NEWLINE + EIGHT_SPACES\n+                        + \"return \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    /**\n+     * Generate getter method for Join type.\n+     * @param join Join Object\n+     * @return getter method\n+     */\n+    public String generateJoinGetterMethod(Join join) {\n+\n+        String type = capitalizeFirstLetter(join.getTo());\n+        String fieldName = join.getName();\n+        return \"public \" + type + \" get\" + capitalizeFirstLetter(fieldName) + \"() {\" + NEWLINE + EIGHT_SPACES\n+                        + \"return \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    // Security.java helper methods\n+    /**\n+     * Get the Class Name for Security.\n+     * @param name Name of the security rule\n+     * @return Capitalize First Letter of Each Word and remove spaces\n+     */\n+    public String getClassSuffix(String name) {\n+\n+        String[] nameSplit = name.trim().split(WHITESPACE_REGEX);\n+        return String.join(EMPTY_STRING,\n+                Arrays.asList(nameSplit).stream().map(str -> capitalizeFirstLetter(str)).collect(Collectors.toList()));\n+    }\n+\n+    /**\n+     * Get Variable Name for Security rule.\n+     * @param name Name of the security rule\n+     * @return Change each word to upper case and replace spaces with underscore\n+     */\n+    public String getVarName(String name) {\n+\n+        String[] nameSplit = name.trim().split(WHITESPACE_REGEX);\n+        return String.join(UNDERSCORE,\n+                Arrays.asList(nameSplit).stream().map(str -> toUpperCase(str)).collect(Collectors.toList()));\n+    }\n+\n+    /**\n+     * Get Name of the security role from security rule.\n+     * @param name Name of the security rule\n+     * @return Last word in lower case\n+     */\n+    public String getRoleName(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89060707ae67ab6d4459e870daf5d6f15e34890b"}, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwNDc0Nw==", "bodyText": "I don't think you need to worry about JoinTo annotation.  You can just use the new DimensionFormula annotation.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r398204747", "createdAt": "2020-03-25T22:18:35Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+import com.yahoo.elide.datastores.aggregation.annotation.DimensionFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.Join;\n+import com.yahoo.elide.datastores.aggregation.annotation.JoinTo;\n+import com.yahoo.elide.datastores.aggregation.annotation.Temporal;\n+import com.yahoo.elide.datastores.aggregation.annotation.TimeGrainDefinition;\n+import com.yahoo.elide.datastores.aggregation.metadata.enums.TimeGrain;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+import lombok.Data;\n+\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Id;\n+import javax.persistence.Entity;\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Include(rootLevel = true)\n+@Cardinality(size = CardinalitySize.{{#toUpperCase cardinality}}{{/toUpperCase}})\n+@EqualsAndHashCode\n+@ToString\n+@Entity\n+@Data\n+{{#if table}}@FromTable(name = \"{{table}}\"){{/if}}\n+public class {{#capitalizeFirstLetter name}}{{/capitalizeFirstLetter}} {\n+\n+    @Id\n+    private String name;\n+\n+{{#each dimensions}}\n+    private {{#getDimensionType this}}{{/getDimensionType}} {{name}};\n+{{/each}}\n+\n+{{#each joins}}\n+    private {{#capitalizeFirstLetter to}}{{/capitalizeFirstLetter}} {{ name }};\n+ {{/each}}\n+\n+{{#each dimensions}}\n+{{!--  --}}\n+{{#ifDimTypeMatches this \"TIME\"}}\n+    @Temporal(grains = {\n+    {{#each grains}}\n+            @TimeGrainDefinition(grain = TimeGrain.{{grain}}, expression = \"{{sql}}\"){{#if @last}}{{else}}, {{/if}}\n+    {{/each}}\n+    }, timeZone = \"UTC\")\n+\n+    {{#generateDimGetterMethod this}}{{/generateDimGetterMethod}}\n+\n+    {{#generateDimSetterMethod this}}{{/generateDimSetterMethod}}\n+\n+{{!--  --}}\n+{{else}}\n+    {{#ifContains definition \".\"}}\n+        @JoinTo(path = \"{{definition}}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89060707ae67ab6d4459e870daf5d6f15e34890b"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwNTMxMA==", "bodyText": "This annotation should be placed on the field.   We can remove getter/setter.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r398205310", "createdAt": "2020-03-25T22:19:53Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+import com.yahoo.elide.datastores.aggregation.annotation.DimensionFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.Join;\n+import com.yahoo.elide.datastores.aggregation.annotation.JoinTo;\n+import com.yahoo.elide.datastores.aggregation.annotation.Temporal;\n+import com.yahoo.elide.datastores.aggregation.annotation.TimeGrainDefinition;\n+import com.yahoo.elide.datastores.aggregation.metadata.enums.TimeGrain;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+import lombok.Data;\n+\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Id;\n+import javax.persistence.Entity;\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Include(rootLevel = true)\n+@Cardinality(size = CardinalitySize.{{#toUpperCase cardinality}}{{/toUpperCase}})\n+@EqualsAndHashCode\n+@ToString\n+@Entity\n+@Data\n+{{#if table}}@FromTable(name = \"{{table}}\"){{/if}}\n+public class {{#capitalizeFirstLetter name}}{{/capitalizeFirstLetter}} {\n+\n+    @Id\n+    private String name;\n+\n+{{#each dimensions}}\n+    private {{#getDimensionType this}}{{/getDimensionType}} {{name}};\n+{{/each}}\n+\n+{{#each joins}}\n+    private {{#capitalizeFirstLetter to}}{{/capitalizeFirstLetter}} {{ name }};\n+ {{/each}}\n+\n+{{#each dimensions}}\n+{{!--  --}}\n+{{#ifDimTypeMatches this \"TIME\"}}\n+    @Temporal(grains = {\n+    {{#each grains}}\n+            @TimeGrainDefinition(grain = TimeGrain.{{grain}}, expression = \"{{sql}}\"){{#if @last}}{{else}}, {{/if}}\n+    {{/each}}\n+    }, timeZone = \"UTC\")\n+\n+    {{#generateDimGetterMethod this}}{{/generateDimGetterMethod}}\n+\n+    {{#generateDimSetterMethod this}}{{/generateDimSetterMethod}}\n+\n+{{!--  --}}\n+{{else}}\n+    {{#ifContains definition \".\"}}\n+        @JoinTo(path = \"{{definition}}\")\n+        @Column(updatable = false, insertable = false)\n+        {{#generateDimGetterMethod this}}{{/generateDimGetterMethod}}\n+\n+        {{#generateDimSetterMethod this}}{{/generateDimSetterMethod}}\n+    {{!--  --}}\n+    {{else}}\n+        @DimensionFormula(\"{{definition}}\")\n+        {{#generateDimGetterMethod this}}{{/generateDimGetterMethod}}\n+    {{!--  --}}\n+    {{/ifContains}}\n+{{/ifDimTypeMatches}}\n+{{/each}}\n+\n+{{#each joins}}\n+    @Join(\"{{ definition }}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89060707ae67ab6d4459e870daf5d6f15e34890b"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwNTM2OQ==", "bodyText": "This annotation can be placed on the field.  We can remove getter/setter.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r398205369", "createdAt": "2020-03-25T22:20:04Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+import com.yahoo.elide.datastores.aggregation.annotation.DimensionFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.Join;\n+import com.yahoo.elide.datastores.aggregation.annotation.JoinTo;\n+import com.yahoo.elide.datastores.aggregation.annotation.Temporal;\n+import com.yahoo.elide.datastores.aggregation.annotation.TimeGrainDefinition;\n+import com.yahoo.elide.datastores.aggregation.metadata.enums.TimeGrain;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+import lombok.Data;\n+\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Id;\n+import javax.persistence.Entity;\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Include(rootLevel = true)\n+@Cardinality(size = CardinalitySize.{{#toUpperCase cardinality}}{{/toUpperCase}})\n+@EqualsAndHashCode\n+@ToString\n+@Entity\n+@Data\n+{{#if table}}@FromTable(name = \"{{table}}\"){{/if}}\n+public class {{#capitalizeFirstLetter name}}{{/capitalizeFirstLetter}} {\n+\n+    @Id\n+    private String name;\n+\n+{{#each dimensions}}\n+    private {{#getDimensionType this}}{{/getDimensionType}} {{name}};\n+{{/each}}\n+\n+{{#each joins}}\n+    private {{#capitalizeFirstLetter to}}{{/capitalizeFirstLetter}} {{ name }};\n+ {{/each}}\n+\n+{{#each dimensions}}\n+{{!--  --}}\n+{{#ifDimTypeMatches this \"TIME\"}}\n+    @Temporal(grains = {\n+    {{#each grains}}\n+            @TimeGrainDefinition(grain = TimeGrain.{{grain}}, expression = \"{{sql}}\"){{#if @last}}{{else}}, {{/if}}\n+    {{/each}}\n+    }, timeZone = \"UTC\")\n+\n+    {{#generateDimGetterMethod this}}{{/generateDimGetterMethod}}\n+\n+    {{#generateDimSetterMethod this}}{{/generateDimSetterMethod}}\n+\n+{{!--  --}}\n+{{else}}\n+    {{#ifContains definition \".\"}}\n+        @JoinTo(path = \"{{definition}}\")\n+        @Column(updatable = false, insertable = false)\n+        {{#generateDimGetterMethod this}}{{/generateDimGetterMethod}}\n+\n+        {{#generateDimSetterMethod this}}{{/generateDimSetterMethod}}\n+    {{!--  --}}\n+    {{else}}\n+        @DimensionFormula(\"{{definition}}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89060707ae67ab6d4459e870daf5d6f15e34890b"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwNzA0Mw==", "bodyText": "This logic feels inverted to me.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r398207043", "createdAt": "2020-03-25T22:23:50Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/handlebars/HandlebarsHelper.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.parser.handlebars;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Dimension;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Join;\n+\n+import com.github.jknack.handlebars.Options;\n+\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Helper class for handlebar template hydration.\n+ */\n+public class HandlebarsHelper {\n+\n+    private static final String EMPTY_STRING = \"\";\n+    private static final String UNDERSCORE = \"_\";\n+    private static final String STRING = \"String\";\n+    private static final String DATE = \"Date\";\n+    private static final String DOUBLE = \"Double\";\n+    private static final String LONG = \"Long\";\n+    private static final String BOOLEAN = \"Boolean\";\n+    private static final String SPACE = \" \";\n+    private static final String FOUR_SPACES = \"    \";\n+    private static final String EIGHT_SPACES = FOUR_SPACES + FOUR_SPACES;\n+    private static final String NEWLINE = \"\\n\";\n+    private static final String WHITESPACE_REGEX = \"\\\\s+\";\n+\n+    /**\n+     * Capitalize first letter of the string.\n+     * @param str string to capitalize first letter\n+     * @return string with first letter capitalized\n+     */\n+    public String capitalizeFirstLetter(String str) {\n+\n+        return (str == null || str.length() == 0) ? str : str.substring(0, 1).toUpperCase(Locale.ENGLISH)\n+                + str.substring(1);\n+    }\n+\n+    /**\n+     * Transform string to upper case.\n+     * @param obj Object representation of the string\n+     * @return string converted to upper case\n+     */\n+    public String toUpperCase(Object obj) {\n+\n+        return (obj == null) ? EMPTY_STRING : obj.toString().toUpperCase(Locale.ENGLISH);\n+    }\n+\n+    /**\n+     * Transform string to lower case.\n+     * @param obj Object representation of the string\n+     * @return string converted to lower case\n+     */\n+    public String toLowerCase(Object obj) {\n+\n+        return (obj == null) ? EMPTY_STRING : obj.toString().toLowerCase(Locale.ENGLISH);\n+    }\n+\n+    /**\n+     * If template matches a string.\n+     * @param str String representation of the template\n+     * @param options options object with string to match\n+     * @return template if matched\n+     * @throws IOException IOException\n+     */\n+    public CharSequence ifContains(String str, Options options) throws IOException {\n+\n+        String toMatch = options.param(0, null);\n+        return options.isFalsy(contains(str, toMatch)) ? options.inverse() : options.fn();\n+    }\n+\n+    /**\n+     * If type of dimension matches passed value.\n+     * @param dim Elide dimension object\n+     * @param options options object with type/string to match\n+     * @return template if matched\n+     * @throws IOException IOException\n+     */\n+    public CharSequence ifDimTypeMatches(Dimension dim, Options options) throws IOException {\n+\n+        String dimDataType = dim.getType().toString();\n+        String typeToMatch = options.param(0, null);\n+        boolean result = new EqualsBuilder().append(dimDataType, typeToMatch).isEquals();\n+        return result ? options.fn() : options.inverse();\n+    }\n+\n+    /**\n+     * If string contains passed value.\n+     * @param str String to be searched\n+     * @param search pattern to search\n+     * @return true/false if matched\n+     */\n+    public boolean contains(String str, String search) {\n+\n+        return (str == null || str.indexOf(search) < 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89060707ae67ab6d4459e870daf5d6f15e34890b"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwNzEyMg==", "bodyText": "We can remove all the generate getter and setter methods.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r398207122", "createdAt": "2020-03-25T22:24:03Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/handlebars/HandlebarsHelper.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.parser.handlebars;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Dimension;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Join;\n+\n+import com.github.jknack.handlebars.Options;\n+\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Helper class for handlebar template hydration.\n+ */\n+public class HandlebarsHelper {\n+\n+    private static final String EMPTY_STRING = \"\";\n+    private static final String UNDERSCORE = \"_\";\n+    private static final String STRING = \"String\";\n+    private static final String DATE = \"Date\";\n+    private static final String DOUBLE = \"Double\";\n+    private static final String LONG = \"Long\";\n+    private static final String BOOLEAN = \"Boolean\";\n+    private static final String SPACE = \" \";\n+    private static final String FOUR_SPACES = \"    \";\n+    private static final String EIGHT_SPACES = FOUR_SPACES + FOUR_SPACES;\n+    private static final String NEWLINE = \"\\n\";\n+    private static final String WHITESPACE_REGEX = \"\\\\s+\";\n+\n+    /**\n+     * Capitalize first letter of the string.\n+     * @param str string to capitalize first letter\n+     * @return string with first letter capitalized\n+     */\n+    public String capitalizeFirstLetter(String str) {\n+\n+        return (str == null || str.length() == 0) ? str : str.substring(0, 1).toUpperCase(Locale.ENGLISH)\n+                + str.substring(1);\n+    }\n+\n+    /**\n+     * Transform string to upper case.\n+     * @param obj Object representation of the string\n+     * @return string converted to upper case\n+     */\n+    public String toUpperCase(Object obj) {\n+\n+        return (obj == null) ? EMPTY_STRING : obj.toString().toUpperCase(Locale.ENGLISH);\n+    }\n+\n+    /**\n+     * Transform string to lower case.\n+     * @param obj Object representation of the string\n+     * @return string converted to lower case\n+     */\n+    public String toLowerCase(Object obj) {\n+\n+        return (obj == null) ? EMPTY_STRING : obj.toString().toLowerCase(Locale.ENGLISH);\n+    }\n+\n+    /**\n+     * If template matches a string.\n+     * @param str String representation of the template\n+     * @param options options object with string to match\n+     * @return template if matched\n+     * @throws IOException IOException\n+     */\n+    public CharSequence ifContains(String str, Options options) throws IOException {\n+\n+        String toMatch = options.param(0, null);\n+        return options.isFalsy(contains(str, toMatch)) ? options.inverse() : options.fn();\n+    }\n+\n+    /**\n+     * If type of dimension matches passed value.\n+     * @param dim Elide dimension object\n+     * @param options options object with type/string to match\n+     * @return template if matched\n+     * @throws IOException IOException\n+     */\n+    public CharSequence ifDimTypeMatches(Dimension dim, Options options) throws IOException {\n+\n+        String dimDataType = dim.getType().toString();\n+        String typeToMatch = options.param(0, null);\n+        boolean result = new EqualsBuilder().append(dimDataType, typeToMatch).isEquals();\n+        return result ? options.fn() : options.inverse();\n+    }\n+\n+    /**\n+     * If string contains passed value.\n+     * @param str String to be searched\n+     * @param search pattern to search\n+     * @return true/false if matched\n+     */\n+    public boolean contains(String str, String search) {\n+\n+        return (str == null || str.indexOf(search) < 0);\n+    }\n+\n+    /**\n+     * Generate setter method.\n+     * @param type Type of the field\n+     * @param fieldName Field Name\n+     * @return setter method\n+     */\n+    public String generateSetterMethod(String type, String fieldName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89060707ae67ab6d4459e870daf5d6f15e34890b"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwNzUxNg==", "bodyText": "All the security helpers can probably be removed since they are parsing the rules and not the roles.  Rules is phase 2.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r398207516", "createdAt": "2020-03-25T22:25:03Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/handlebars/HandlebarsHelper.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.parser.handlebars;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Dimension;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Join;\n+\n+import com.github.jknack.handlebars.Options;\n+\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Helper class for handlebar template hydration.\n+ */\n+public class HandlebarsHelper {\n+\n+    private static final String EMPTY_STRING = \"\";\n+    private static final String UNDERSCORE = \"_\";\n+    private static final String STRING = \"String\";\n+    private static final String DATE = \"Date\";\n+    private static final String DOUBLE = \"Double\";\n+    private static final String LONG = \"Long\";\n+    private static final String BOOLEAN = \"Boolean\";\n+    private static final String SPACE = \" \";\n+    private static final String FOUR_SPACES = \"    \";\n+    private static final String EIGHT_SPACES = FOUR_SPACES + FOUR_SPACES;\n+    private static final String NEWLINE = \"\\n\";\n+    private static final String WHITESPACE_REGEX = \"\\\\s+\";\n+\n+    /**\n+     * Capitalize first letter of the string.\n+     * @param str string to capitalize first letter\n+     * @return string with first letter capitalized\n+     */\n+    public String capitalizeFirstLetter(String str) {\n+\n+        return (str == null || str.length() == 0) ? str : str.substring(0, 1).toUpperCase(Locale.ENGLISH)\n+                + str.substring(1);\n+    }\n+\n+    /**\n+     * Transform string to upper case.\n+     * @param obj Object representation of the string\n+     * @return string converted to upper case\n+     */\n+    public String toUpperCase(Object obj) {\n+\n+        return (obj == null) ? EMPTY_STRING : obj.toString().toUpperCase(Locale.ENGLISH);\n+    }\n+\n+    /**\n+     * Transform string to lower case.\n+     * @param obj Object representation of the string\n+     * @return string converted to lower case\n+     */\n+    public String toLowerCase(Object obj) {\n+\n+        return (obj == null) ? EMPTY_STRING : obj.toString().toLowerCase(Locale.ENGLISH);\n+    }\n+\n+    /**\n+     * If template matches a string.\n+     * @param str String representation of the template\n+     * @param options options object with string to match\n+     * @return template if matched\n+     * @throws IOException IOException\n+     */\n+    public CharSequence ifContains(String str, Options options) throws IOException {\n+\n+        String toMatch = options.param(0, null);\n+        return options.isFalsy(contains(str, toMatch)) ? options.inverse() : options.fn();\n+    }\n+\n+    /**\n+     * If type of dimension matches passed value.\n+     * @param dim Elide dimension object\n+     * @param options options object with type/string to match\n+     * @return template if matched\n+     * @throws IOException IOException\n+     */\n+    public CharSequence ifDimTypeMatches(Dimension dim, Options options) throws IOException {\n+\n+        String dimDataType = dim.getType().toString();\n+        String typeToMatch = options.param(0, null);\n+        boolean result = new EqualsBuilder().append(dimDataType, typeToMatch).isEquals();\n+        return result ? options.fn() : options.inverse();\n+    }\n+\n+    /**\n+     * If string contains passed value.\n+     * @param str String to be searched\n+     * @param search pattern to search\n+     * @return true/false if matched\n+     */\n+    public boolean contains(String str, String search) {\n+\n+        return (str == null || str.indexOf(search) < 0);\n+    }\n+\n+    /**\n+     * Generate setter method.\n+     * @param type Type of the field\n+     * @param fieldName Field Name\n+     * @return setter method\n+     */\n+    public String generateSetterMethod(String type, String fieldName) {\n+\n+        return \"public void set\" + capitalizeFirstLetter(fieldName) + \"(\" + type + SPACE + fieldName + \") {\" + NEWLINE\n+                        + EIGHT_SPACES + \"this.\" + fieldName + \" = \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    /**\n+     * Generate setter method for Dimension Type.\n+     * @param dim Dimension Object\n+     * @return setter method\n+     */\n+    public String generateDimSetterMethod(Dimension dim) {\n+\n+        String type = getDimensionType(dim);\n+        String fieldName = dim.getName();\n+        return \"public void set\" + capitalizeFirstLetter(fieldName) + \"(\" + type + SPACE + fieldName + \") {\" + NEWLINE\n+                        + EIGHT_SPACES + \"this.\" + fieldName + \" = \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    /**\n+     * Generate setter method for Join Type.\n+     * @param join Join Object\n+     * @return setter method\n+     */\n+    public String generateJoinSetterMethod(Join join) {\n+\n+        String type = capitalizeFirstLetter(join.getTo());\n+        String fieldName = join.getName();\n+        return \"public void set\" + capitalizeFirstLetter(fieldName) + \"(\" + type + SPACE + fieldName + \") {\" + NEWLINE\n+                        + EIGHT_SPACES + \"this.\" + fieldName + \" = \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    /**\n+     * Generate getter method.\n+     * @param type Type of the field\n+     * @param fieldName field Name\n+     * @return getter method\n+     */\n+    public String generateGetterMethod(String type, String fieldName) {\n+\n+        return \"public \" + type + \" get\" + capitalizeFirstLetter(fieldName) + \"() {\" + NEWLINE + EIGHT_SPACES\n+                        + \"return \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    /**\n+     * Generate getter method for Dimension type.\n+     * @param dim Dimension Object\n+     * @return getter method\n+     */\n+    public String generateDimGetterMethod(Dimension dim) {\n+\n+        String type = getDimensionType(dim);\n+        String fieldName = dim.getName();\n+        return \"public \" + type + \" get\" + capitalizeFirstLetter(fieldName) + \"() {\" + NEWLINE + EIGHT_SPACES\n+                        + \"return \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    /**\n+     * Generate getter method for Join type.\n+     * @param join Join Object\n+     * @return getter method\n+     */\n+    public String generateJoinGetterMethod(Join join) {\n+\n+        String type = capitalizeFirstLetter(join.getTo());\n+        String fieldName = join.getName();\n+        return \"public \" + type + \" get\" + capitalizeFirstLetter(fieldName) + \"() {\" + NEWLINE + EIGHT_SPACES\n+                        + \"return \" + fieldName + \";\" + NEWLINE + FOUR_SPACES + \"}\";\n+    }\n+\n+    // Security.java helper methods\n+    /**\n+     * Get the Class Name for Security.\n+     * @param name Name of the security rule\n+     * @return Capitalize First Letter of Each Word and remove spaces\n+     */\n+    public String getClassSuffix(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89060707ae67ab6d4459e870daf5d6f15e34890b"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwODExMQ==", "bodyText": "ElideTable needs a better class name since it is really a configuration object and not a singular table.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r398208111", "createdAt": "2020-03-25T22:26:36Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/handlebars/HandlebarsHydrator.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.parser.handlebars;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideSecurity;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideTable;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Table;\n+import com.github.jknack.handlebars.Context;\n+import com.github.jknack.handlebars.EscapingStrategy;\n+import com.github.jknack.handlebars.EscapingStrategy.Hbs;\n+import com.github.jknack.handlebars.Handlebars;\n+import com.github.jknack.handlebars.Template;\n+import com.github.jknack.handlebars.helper.ConditionalHelpers;\n+import com.github.jknack.handlebars.io.ClassPathTemplateLoader;\n+import com.github.jknack.handlebars.io.TemplateLoader;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Class for handlebars hydration.\n+ */\n+public class HandlebarsHydrator {\n+\n+    public static final EscapingStrategy MY_ESCAPING_STRATEGY = new Hbs(new String[][]{\n+        {\"<\", \"&lt;\" },\n+        {\">\", \"&gt;\" },\n+        {\"\\\"\", \"&quot;\" },\n+        {\"`\", \"&#x60;\" },\n+        {\"&\", \"&amp;\" }\n+    });\n+\n+    /**\n+     * Method to hydrate the Table template.\n+     * @param table ElideTable object\n+     * @return table java class list\n+     * @throws IOException IOException\n+     */\n+    public List<String> hydrateTableTemplate(ElideTable table) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89060707ae67ab6d4459e870daf5d6f15e34890b"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwODgyMA==", "bodyText": "Rename ElideSecurity to ElideSecurityConfig", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r398208820", "createdAt": "2020-03-25T22:28:17Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/handlebars/HandlebarsHydrator.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.parser.handlebars;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideSecurity;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideTable;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Table;\n+import com.github.jknack.handlebars.Context;\n+import com.github.jknack.handlebars.EscapingStrategy;\n+import com.github.jknack.handlebars.EscapingStrategy.Hbs;\n+import com.github.jknack.handlebars.Handlebars;\n+import com.github.jknack.handlebars.Template;\n+import com.github.jknack.handlebars.helper.ConditionalHelpers;\n+import com.github.jknack.handlebars.io.ClassPathTemplateLoader;\n+import com.github.jknack.handlebars.io.TemplateLoader;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Class for handlebars hydration.\n+ */\n+public class HandlebarsHydrator {\n+\n+    public static final EscapingStrategy MY_ESCAPING_STRATEGY = new Hbs(new String[][]{\n+        {\"<\", \"&lt;\" },\n+        {\">\", \"&gt;\" },\n+        {\"\\\"\", \"&quot;\" },\n+        {\"`\", \"&#x60;\" },\n+        {\"&\", \"&amp;\" }\n+    });\n+\n+    /**\n+     * Method to hydrate the Table template.\n+     * @param table ElideTable object\n+     * @return table java class list\n+     * @throws IOException IOException\n+     */\n+    public List<String> hydrateTableTemplate(ElideTable table) throws IOException {\n+\n+        List<String> tableClassStringList = new ArrayList<>();\n+\n+        TemplateLoader loader = new ClassPathTemplateLoader(\"/templates\");\n+        Handlebars handlebars = new Handlebars(loader).with(MY_ESCAPING_STRATEGY);\n+        handlebars.registerHelpers(ConditionalHelpers.class);\n+        handlebars.registerHelpers(new HandlebarsHelper());\n+        Template template = handlebars.compile(\"table\");\n+\n+        for (Table t : table.getTables()) {\n+            tableClassStringList.add(template.apply(t));\n+        }\n+\n+        return tableClassStringList;\n+    }\n+\n+    /**\n+     * Method to replace variables in hjson config.\n+     * @param config hjson config string\n+     * @param replacements Map of variable key value pairs\n+     * @return hjson config string with variables replaced\n+     * @throws IOException IOException\n+     */\n+    public String hydrateConfigTemplate(String config, Map<String, Object> replacements) throws IOException {\n+\n+        Context context = Context.newBuilder(replacements).build();\n+        Handlebars handlebars = new Handlebars();\n+        Template template = handlebars.compileInline(config);\n+\n+        return template.apply(context);\n+    }\n+\n+    /**\n+     * Method to return the List of Class Names hydrated.\n+     * @param table ElideTable object\n+     * @return table java class name list\n+     * @throws IOException IOException\n+     */\n+    public List<String> getTableClassNames(ElideTable table) throws IOException {\n+\n+        List<String> tableClassStringNameList = new ArrayList<>();\n+\n+        HandlebarsHelper helper = new HandlebarsHelper();\n+\n+        for (Table t : table.getTables()) {\n+            tableClassStringNameList.add(helper.capitalizeFirstLetter(t.getName()));\n+        }\n+\n+        return tableClassStringNameList;\n+    }\n+\n+    /**\n+     * Method to hydrate the Security template.\n+     * @param security ElideSecurity Object\n+     * @return security java class string\n+     * @throws IOException IOException\n+     */\n+    public String hydrateSecurityTemplate(ElideSecurity security) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89060707ae67ab6d4459e870daf5d6f15e34890b"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwOTY1Nw==", "bodyText": "Its hard to say if these method signatures are the right ones without seeing the calling code.  I'm confused why this is returning a list of Strings for example and not a Map.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r398209657", "createdAt": "2020-03-25T22:29:56Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/handlebars/HandlebarsHydrator.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.parser.handlebars;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideSecurity;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideTable;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Table;\n+import com.github.jknack.handlebars.Context;\n+import com.github.jknack.handlebars.EscapingStrategy;\n+import com.github.jknack.handlebars.EscapingStrategy.Hbs;\n+import com.github.jknack.handlebars.Handlebars;\n+import com.github.jknack.handlebars.Template;\n+import com.github.jknack.handlebars.helper.ConditionalHelpers;\n+import com.github.jknack.handlebars.io.ClassPathTemplateLoader;\n+import com.github.jknack.handlebars.io.TemplateLoader;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Class for handlebars hydration.\n+ */\n+public class HandlebarsHydrator {\n+\n+    public static final EscapingStrategy MY_ESCAPING_STRATEGY = new Hbs(new String[][]{\n+        {\"<\", \"&lt;\" },\n+        {\">\", \"&gt;\" },\n+        {\"\\\"\", \"&quot;\" },\n+        {\"`\", \"&#x60;\" },\n+        {\"&\", \"&amp;\" }\n+    });\n+\n+    /**\n+     * Method to hydrate the Table template.\n+     * @param table ElideTable object\n+     * @return table java class list\n+     * @throws IOException IOException\n+     */\n+    public List<String> hydrateTableTemplate(ElideTable table) throws IOException {\n+\n+        List<String> tableClassStringList = new ArrayList<>();\n+\n+        TemplateLoader loader = new ClassPathTemplateLoader(\"/templates\");\n+        Handlebars handlebars = new Handlebars(loader).with(MY_ESCAPING_STRATEGY);\n+        handlebars.registerHelpers(ConditionalHelpers.class);\n+        handlebars.registerHelpers(new HandlebarsHelper());\n+        Template template = handlebars.compile(\"table\");\n+\n+        for (Table t : table.getTables()) {\n+            tableClassStringList.add(template.apply(t));\n+        }\n+\n+        return tableClassStringList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89060707ae67ab6d4459e870daf5d6f15e34890b"}, "originalPosition": 58}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3bb0f335db5b5a85e2f39365a3bb7bb2e73fd9cd", "author": {"user": {"login": "rishi-aga", "name": null}}, "url": "https://github.com/yahoo/elide/commit/3bb0f335db5b5a85e2f39365a3bb7bb2e73fd9cd", "committedDate": "2020-03-27T14:11:39Z", "message": "Add import for FromSubquery"}, "afterCommit": {"oid": "e41f9e615abe0c37cee07314093651aeba912180", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/e41f9e615abe0c37cee07314093651aeba912180", "committedDate": "2020-03-25T14:18:07Z", "message": "Pom updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b70800f98d2057f1d7ab8e19ea7e510fdc4fe955", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/b70800f98d2057f1d7ab8e19ea7e510fdc4fe955", "committedDate": "2020-03-27T19:41:01Z", "message": "Adding Handlebar template hydration logic\n\nCo-authored-by: rishi-aga <rishi.aga123@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c82eb44d43e4c8d26ae5102062b98bddbd65d43", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/0c82eb44d43e4c8d26ae5102062b98bddbd65d43", "committedDate": "2020-03-27T19:41:01Z", "message": "Adding Handlebar template hydration logic\n\nCo-authored-by: rishi-aga <rishi.aga123@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "486a37ea95b9d2aef6ece9b61ef558d412eda814", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/486a37ea95b9d2aef6ece9b61ef558d412eda814", "committedDate": "2020-03-27T19:41:01Z", "message": "Refactoring.\n\nCo-authored-by: rishi-aga <rishi.aga123@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94acfdd3e79b078ebc75161a38464d41e2c31d23", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/94acfdd3e79b078ebc75161a38464d41e2c31d23", "committedDate": "2020-03-27T19:41:01Z", "message": "Template updates.\n\nCo-authored-by: rishi-aga <rishi.aga123@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89b21e5dbc07d27c45b0377946c44257b1bff9d2", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/89b21e5dbc07d27c45b0377946c44257b1bff9d2", "committedDate": "2020-03-27T19:41:01Z", "message": "Update the return type\n\nCo-authored-by: rishi-aga <rishi.aga123@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15a744ee3ad35788c853064ef6086f683be071a2", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/15a744ee3ad35788c853064ef6086f683be071a2", "committedDate": "2020-03-27T19:41:01Z", "message": "method to return class Name list.\n\nCo-authored-by: rishi-aga <rishi.aga123@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef92afb562d6e37e3b26feeefb8042087cdf1d07", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/ef92afb562d6e37e3b26feeefb8042087cdf1d07", "committedDate": "2020-03-27T19:41:01Z", "message": "method to return class Name list.\n\nCo-authored-by: rishi-aga <rishi.aga123@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9b4a8b976695bc5538e3e8cd60ec464fca0043d", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/a9b4a8b976695bc5538e3e8cd60ec464fca0043d", "committedDate": "2020-03-27T19:41:01Z", "message": "method to return class Name list.\n\nCo-authored-by: rishi-aga <rishi.aga123@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2479564bda1e7da2fab443e32027254d4e0fd39f", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/2479564bda1e7da2fab443e32027254d4e0fd39f", "committedDate": "2020-03-27T19:41:01Z", "message": "Adding @Entity"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05cf8fdced62272feee455c2de7db94c5d46e2b3", "author": {"user": {"login": "rishi-aga", "name": null}}, "url": "https://github.com/yahoo/elide/commit/05cf8fdced62272feee455c2de7db94c5d46e2b3", "committedDate": "2020-03-27T19:41:01Z", "message": "Methods to hydrate security and config templates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45d7a76c2e9ddd43d622d04e9509d11c76abe558", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/45d7a76c2e9ddd43d622d04e9509d11c76abe558", "committedDate": "2020-03-27T19:41:01Z", "message": "JavaDocs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10c6327e1e086f494934341706a92862deef3c54", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/10c6327e1e086f494934341706a92862deef3c54", "committedDate": "2020-03-27T19:41:01Z", "message": "Pom updates"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e41f9e615abe0c37cee07314093651aeba912180", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/e41f9e615abe0c37cee07314093651aeba912180", "committedDate": "2020-03-25T14:18:07Z", "message": "Pom updates"}, "afterCommit": {"oid": "10c6327e1e086f494934341706a92862deef3c54", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/10c6327e1e086f494934341706a92862deef3c54", "committedDate": "2020-03-27T19:41:01Z", "message": "Pom updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8000f604235ac46f9bb4a5b3690a8f7dd15903a5", "author": {"user": {"login": "rishi-aga", "name": null}}, "url": "https://github.com/yahoo/elide/commit/8000f604235ac46f9bb4a5b3690a8f7dd15903a5", "committedDate": "2020-03-27T20:59:49Z", "message": "Review Comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "636cff97778c9bcbd00487cdce0b5f36c865517d", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/636cff97778c9bcbd00487cdce0b5f36c865517d", "committedDate": "2020-03-27T22:13:19Z", "message": "Add prefix for Security Role"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21ff790f9be5f4a9e99e2e37cda439b31a5f2936", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/21ff790f9be5f4a9e99e2e37cda439b31a5f2936", "committedDate": "2020-03-30T20:31:14Z", "message": "Merge branch 'elide-5.x-dynamic-config' into elide-5.x-dynamic-config-handlebars"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MTc4MjU1", "url": "https://github.com/yahoo/elide/pull/1220#pullrequestreview-385178255", "createdAt": "2020-03-31T23:45:00Z", "commit": {"oid": "21ff790f9be5f4a9e99e2e37cda439b31a5f2936"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMzo0NTowMFrOF-sDUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMzo0NTowMFrOF-sDUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI3Nzc3Nw==", "bodyText": "Optional is not used. Please remove", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r401277777", "createdAt": "2020-03-31T23:45:00Z", "author": {"login": "moizarafat"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/security.hbs", "diffHunk": "@@ -0,0 +1,19 @@\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import java.security.Principal;\n+import java.util.Optional;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21ff790f9be5f4a9e99e2e37cda439b31a5f2936"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MjEwODI5", "url": "https://github.com/yahoo/elide/pull/1220#pullrequestreview-385210829", "createdAt": "2020-04-01T01:30:54Z", "commit": {"oid": "21ff790f9be5f4a9e99e2e37cda439b31a5f2936"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMTozMDo1NVrOF-tzkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMTozMDo1NVrOF-tzkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMwNjUxNA==", "bodyText": "We need to remove the top level DynamicConfigOperationChecks and instead move PrincipalIs Classes as the top level class. For ex. the class should be generated as\n\nimport com.yahoo.elide.annotation.SecurityCheck;\nimport com.yahoo.elide.security.checks.prefab.Role.RoleMemberCheck;\n\n@SecurityCheck(DynamicConfigOperationChecksPrincipalIsAdmin.PRINCIPAL_IS_ADMIN)\npublic class DynamicConfigOperationChecksPrincipalIsAdmin extends RoleMemberCheck {\n\n\tpublic static final String PRINCIPAL_IS_ADMIN = \"Principal is Admin\";\n\n\tpublic DynamicConfigOperationChecksPrincipalIsAdmin() {\n\t\tsuper(\"admin\"); \n\n\t}\n}", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r401306514", "createdAt": "2020-04-01T01:30:55Z", "author": {"login": "moizarafat"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/security.hbs", "diffHunk": "@@ -0,0 +1,19 @@\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import java.security.Principal;\n+import java.util.Optional;\n+import com.yahoo.elide.annotation.SecurityCheck;\n+import com.yahoo.elide.security.checks.prefab.Role.RoleMemberCheck;\n+\n+public class DynamicConfigOperationChecks {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21ff790f9be5f4a9e99e2e37cda439b31a5f2936"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MjEyNDE4", "url": "https://github.com/yahoo/elide/pull/1220#pullrequestreview-385212418", "createdAt": "2020-04-01T01:36:24Z", "commit": {"oid": "21ff790f9be5f4a9e99e2e37cda439b31a5f2936"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMTozNjoyNFrOF-t42g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMTozNjoyNFrOF-t42g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMwNzg2Ng==", "bodyText": "As mentioned in the other comment, this should return multiple classes by looping the individual entries in roles. So this class should also return a map like hydrateTableTemplate.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r401307866", "createdAt": "2020-04-01T01:36:24Z", "author": {"login": "moizarafat"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/handlebars/HandlebarsHydrator.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.parser.handlebars;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideSecurity;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideTable;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Table;\n+import com.github.jknack.handlebars.Context;\n+import com.github.jknack.handlebars.EscapingStrategy;\n+import com.github.jknack.handlebars.EscapingStrategy.Hbs;\n+import com.github.jknack.handlebars.Handlebars;\n+import com.github.jknack.handlebars.Template;\n+import com.github.jknack.handlebars.helper.ConditionalHelpers;\n+import com.github.jknack.handlebars.io.ClassPathTemplateLoader;\n+import com.github.jknack.handlebars.io.TemplateLoader;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Class for handlebars hydration.\n+ */\n+public class HandlebarsHydrator {\n+\n+    public static final EscapingStrategy MY_ESCAPING_STRATEGY = new Hbs(new String[][]{\n+        {\"<\", \"&lt;\" },\n+        {\">\", \"&gt;\" },\n+        {\"\\\"\", \"&quot;\" },\n+        {\"`\", \"&#x60;\" },\n+        {\"&\", \"&amp;\" }\n+    });\n+\n+    /**\n+     * Method to hydrate the Table template.\n+     * @param table ElideTable object\n+     * @return map with key as table java class name and value as table java class definition\n+     * @throws IOException IOException\n+     */\n+    public Map<String, String> hydrateTableTemplate(ElideTable table) throws IOException {\n+\n+        Map<String, String> tableClasses = new HashMap<>();\n+\n+        TemplateLoader loader = new ClassPathTemplateLoader(\"/templates\");\n+        Handlebars handlebars = new Handlebars(loader).with(MY_ESCAPING_STRATEGY);\n+        HandlebarsHelper helper = new HandlebarsHelper();\n+        handlebars.registerHelpers(ConditionalHelpers.class);\n+        handlebars.registerHelpers(helper);\n+        Template template = handlebars.compile(\"table\");\n+\n+        for (Table t : table.getTables()) {\n+            tableClasses.put(helper.capitalizeFirstLetter(t.getName()), template.apply(t));\n+        }\n+\n+        return tableClasses;\n+    }\n+\n+    /**\n+     * Method to replace variables in hjson config.\n+     * @param config hjson config string\n+     * @param replacements Map of variable key value pairs\n+     * @return hjson config string with variables replaced\n+     * @throws IOException IOException\n+     */\n+    public String hydrateConfigTemplate(String config, Map<String, Object> replacements) throws IOException {\n+\n+        Context context = Context.newBuilder(replacements).build();\n+        Handlebars handlebars = new Handlebars();\n+        Template template = handlebars.compileInline(config);\n+\n+        return template.apply(context);\n+    }\n+\n+    /**\n+     * Method to hydrate the Security template.\n+     * @param security ElideSecurity Object\n+     * @return security java class string\n+     * @throws IOException IOException\n+     */\n+    public String hydrateSecurityTemplate(ElideSecurity security) throws IOException {\n+\n+        TemplateLoader loader = new ClassPathTemplateLoader(\"/templates\");\n+        Handlebars handlebars = new Handlebars(loader).with(MY_ESCAPING_STRATEGY);\n+        handlebars.registerHelpers(ConditionalHelpers.class);\n+        handlebars.registerHelpers(new HandlebarsHelper());\n+        Template template = handlebars.compile(\"security\");\n+\n+        return template.apply(security);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21ff790f9be5f4a9e99e2e37cda439b31a5f2936"}, "originalPosition": 91}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1df5396477847581c244e59cb84f3efa249101d2", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/1df5396477847581c244e59cb84f3efa249101d2", "committedDate": "2020-04-01T15:29:46Z", "message": "Merge branch 'elide-5.x-dynamic-config' into elide-5.x-dynamic-config-handlebars"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39651fdbfdd2ff3bf1c47007885fcc33135699e1", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/39651fdbfdd2ff3bf1c47007885fcc33135699e1", "committedDate": "2020-04-01T15:33:43Z", "message": "Fix class names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1015e470523481c24db0bf0dcac9d38fe67512d2", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/1015e470523481c24db0bf0dcac9d38fe67512d2", "committedDate": "2020-04-01T15:40:32Z", "message": "Review Comments for returning Security classes as Map"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e00d0b25871443e04057f279861e1926fcae1e2a", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/e00d0b25871443e04057f279861e1926fcae1e2a", "committedDate": "2020-04-01T15:44:25Z", "message": "Merge branch 'elide-5.x-dynamic-config-handlebars' of github.com:yahoo/elide into elide-5.x-dynamic-config-handlebars"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec1cacf7cf1d3f8381b7704ba422a3a351b5d140", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/ec1cacf7cf1d3f8381b7704ba422a3a351b5d140", "committedDate": "2020-04-01T16:08:34Z", "message": "Use getter methods for ElideConfigParser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e61393c2e6710dcaf160d9fb3f09769b13851231", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/e61393c2e6710dcaf160d9fb3f09769b13851231", "committedDate": "2020-04-01T20:27:26Z", "message": "merge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "694435c3244bbaa5b1170c553a35e01ce49c01a2", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/694435c3244bbaa5b1170c553a35e01ce49c01a2", "committedDate": "2020-04-03T05:15:41Z", "message": "variable substitution/hydration"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NjQ2ODYx", "url": "https://github.com/yahoo/elide/pull/1220#pullrequestreview-387646861", "createdAt": "2020-04-04T00:41:00Z", "commit": {"oid": "694435c3244bbaa5b1170c553a35e01ce49c01a2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMDo0MTowMFrOGAtbcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMDo0MTowMFrOGAtbcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5NzQ4OA==", "bodyText": "We should call populatePojo method by passing util.resolveVariables(tableJson, this.variables) as an argument and move the logic related to populating tables.addAll(table.getTables()); into populatePojo", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r403397488", "createdAt": "2020-04-04T00:41:00Z", "author": {"login": "moizarafat"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/ElideConfigParser.java", "diffHunk": "@@ -72,12 +72,14 @@ private void parse(String localConfigPath) throws Exception {\n \n         //security\n         String securityJson = util.getJsonConfig(localConfigPath, DynamicConfigHelpersUtil.SCHEMA_TYPE_SECURITY).get(0);\n-        populatePojo(securityJson, DynamicConfigHelpersUtil.SCHEMA_TYPE_SECURITY);\n+        populatePojo(util.resolveVariables(securityJson, this.variables),\n+                DynamicConfigHelpersUtil.SCHEMA_TYPE_SECURITY);\n \n         //table\n         Set<Table> tables = new HashSet<>();\n         for (String tableJson : util.getJsonConfig(localConfigPath, DynamicConfigHelpersUtil.SCHEMA_TYPE_TABLE)) {\n-            ElideTableConfig table = (ElideTableConfig) parseJsonConfig(tableJson,\n+            ElideTableConfig table = (ElideTableConfig) parseJsonConfig(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "694435c3244bbaa5b1170c553a35e01ce49c01a2"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NjQ2OTUx", "url": "https://github.com/yahoo/elide/pull/1220#pullrequestreview-387646951", "createdAt": "2020-04-04T00:41:37Z", "commit": {"oid": "694435c3244bbaa5b1170c553a35e01ce49c01a2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMDo0MTozN1rOGAtbzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMDo0MTozN1rOGAtbzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5NzU4Mg==", "bodyText": "Is this intended?", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r403397582", "createdAt": "2020-04-04T00:41:37Z", "author": {"login": "moizarafat"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/test/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/ElideConfigParserTest.java", "diffHunk": "@@ -41,13 +42,15 @@ public void testValidateVariablePath() throws Exception {\n             assertEquals(t.getMeasures().get(0).getName() , t.getMeasures().get(0).getDescription());\n             assertEquals(\"MAX(score)\", t.getMeasures().get(0).getDefinition());\n             assertEquals(Table.Cardinality.LARGE, t.getCardinality());\n+            // test hydration, variable substitution\n+            assertEquals(Type.INTEGER, t.getMeasures().get(0).getType());\n         }\n     }\n \n     @Test\n     public void testNullConfig() {\n         try {\n-            testClass.parseConfigPath(null);\n+//            testClass.parseConfigPath(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "694435c3244bbaa5b1170c553a35e01ce49c01a2"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1016e14d984d06ecc34d0c3cd819baab523ca24", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/c1016e14d984d06ecc34d0c3cd819baab523ca24", "committedDate": "2020-04-04T23:46:16Z", "message": "Merge branch 'elide-5.x-dynamic-config' into elide-5.x-dynamic-config-handlebars"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMjc4MDQ5", "url": "https://github.com/yahoo/elide/pull/1220#pullrequestreview-392278049", "createdAt": "2020-04-13T16:58:47Z", "commit": {"oid": "c1016e14d984d06ecc34d0c3cd819baab523ca24"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNjo1ODo0N1rOGEtLOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNjo1ODo0N1rOGEtLOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU4NzY0Mw==", "bodyText": "change name to Id", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r407587643", "createdAt": "2020-04-13T16:58:47Z", "author": {"login": "moizarafat"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "diffHunk": "@@ -0,0 +1,81 @@\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+import com.yahoo.elide.datastores.aggregation.annotation.DimensionFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.MetricFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.Join;\n+import com.yahoo.elide.datastores.aggregation.annotation.Meta;\n+import com.yahoo.elide.datastores.aggregation.annotation.Temporal;\n+import com.yahoo.elide.datastores.aggregation.annotation.TimeGrainDefinition;\n+import com.yahoo.elide.datastores.aggregation.metadata.enums.TimeGrain;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromSubquery;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+import lombok.Data;\n+\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Id;\n+import javax.persistence.Entity;\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Include(rootLevel = true)\n+@Cardinality(size = CardinalitySize.{{#toUpperCase cardinality}}{{/toUpperCase}})\n+@EqualsAndHashCode\n+@ToString\n+@Entity\n+@Data\n+{{#if table}}@FromTable(name = \"{{#if schema}}{{schema}}.{{/if}}{{table}}\"){{/if}}\n+{{#if sql}}@FromSubquery(sql = \"{{sql}}\"){{/if}}\n+{{#if readAccess}}@ReadPermission(expression = \"{{readAccess}}\"){{/if}}\n+{{#if description}}@Meta(description = \"{{description}}\"){{/if}}\n+public class {{#capitalizeFirstLetter name}}{{/capitalizeFirstLetter}} {{#if extend}}extends {{#capitalizeFirstLetter extend}}{{/capitalizeFirstLetter}}{{/if}}{\n+\n+    @Id\n+    private String name;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1016e14d984d06ecc34d0c3cd819baab523ca24"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMjc4MjIw", "url": "https://github.com/yahoo/elide/pull/1220#pullrequestreview-392278220", "createdAt": "2020-04-13T16:59:01Z", "commit": {"oid": "c1016e14d984d06ecc34d0c3cd819baab523ca24"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNjo1OTowMVrOGEtL6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNjo1OTowMVrOGEtL6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU4NzgxOA==", "bodyText": "remove @entity annotation here.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r407587818", "createdAt": "2020-04-13T16:59:01Z", "author": {"login": "moizarafat"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "diffHunk": "@@ -0,0 +1,81 @@\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+import com.yahoo.elide.datastores.aggregation.annotation.DimensionFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.MetricFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.Join;\n+import com.yahoo.elide.datastores.aggregation.annotation.Meta;\n+import com.yahoo.elide.datastores.aggregation.annotation.Temporal;\n+import com.yahoo.elide.datastores.aggregation.annotation.TimeGrainDefinition;\n+import com.yahoo.elide.datastores.aggregation.metadata.enums.TimeGrain;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromSubquery;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+import lombok.Data;\n+\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Id;\n+import javax.persistence.Entity;\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Include(rootLevel = true)\n+@Cardinality(size = CardinalitySize.{{#toUpperCase cardinality}}{{/toUpperCase}})\n+@EqualsAndHashCode\n+@ToString\n+@Entity", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1016e14d984d06ecc34d0c3cd819baab523ca24"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0ODc2MzA3", "url": "https://github.com/yahoo/elide/pull/1220#pullrequestreview-394876307", "createdAt": "2020-04-16T18:03:36Z", "commit": {"oid": "c1016e14d984d06ecc34d0c3cd819baab523ca24"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxODowMzozNlrOGGxHUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxODowMzozNlrOGGxHUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc0OTMzMA==", "bodyText": "When Hidden is true we need to use Exclude Annotation. https://elide.io/pages/guide/15-annotations.html#annotation-Exclude", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r409749330", "createdAt": "2020-04-16T18:03:36Z", "author": {"login": "moizarafat"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "diffHunk": "@@ -0,0 +1,81 @@\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+import com.yahoo.elide.datastores.aggregation.annotation.DimensionFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.MetricFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.Join;\n+import com.yahoo.elide.datastores.aggregation.annotation.Meta;\n+import com.yahoo.elide.datastores.aggregation.annotation.Temporal;\n+import com.yahoo.elide.datastores.aggregation.annotation.TimeGrainDefinition;\n+import com.yahoo.elide.datastores.aggregation.metadata.enums.TimeGrain;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromSubquery;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+import lombok.Data;\n+\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Id;\n+import javax.persistence.Entity;\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Include(rootLevel = true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1016e14d984d06ecc34d0c3cd819baab523ca24"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0ODc4Njg2", "url": "https://github.com/yahoo/elide/pull/1220#pullrequestreview-394878686", "createdAt": "2020-04-16T18:06:57Z", "commit": {"oid": "c1016e14d984d06ecc34d0c3cd819baab523ca24"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxODowNjo1N1rOGGxOnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxODowNjo1N1rOGGxOnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc1MTE5Nw==", "bodyText": "Include logic for exclude.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r409751197", "createdAt": "2020-04-16T18:06:57Z", "author": {"login": "moizarafat"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "diffHunk": "@@ -0,0 +1,81 @@\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+import com.yahoo.elide.datastores.aggregation.annotation.DimensionFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.MetricFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.Join;\n+import com.yahoo.elide.datastores.aggregation.annotation.Meta;\n+import com.yahoo.elide.datastores.aggregation.annotation.Temporal;\n+import com.yahoo.elide.datastores.aggregation.annotation.TimeGrainDefinition;\n+import com.yahoo.elide.datastores.aggregation.metadata.enums.TimeGrain;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromSubquery;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+import lombok.Data;\n+\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Id;\n+import javax.persistence.Entity;\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Include(rootLevel = true)\n+@Cardinality(size = CardinalitySize.{{#toUpperCase cardinality}}{{/toUpperCase}})\n+@EqualsAndHashCode\n+@ToString\n+@Entity\n+@Data\n+{{#if table}}@FromTable(name = \"{{#if schema}}{{schema}}.{{/if}}{{table}}\"){{/if}}\n+{{#if sql}}@FromSubquery(sql = \"{{sql}}\"){{/if}}\n+{{#if readAccess}}@ReadPermission(expression = \"{{readAccess}}\"){{/if}}\n+{{#if description}}@Meta(description = \"{{description}}\"){{/if}}\n+public class {{#capitalizeFirstLetter name}}{{/capitalizeFirstLetter}} {{#if extend}}extends {{#capitalizeFirstLetter extend}}{{/capitalizeFirstLetter}}{{/if}}{\n+\n+    @Id\n+    private String name;\n+\n+{{#each dimensions}}\n+\n+{{#ifTypeMatches type \"TIME\"}}\n+    @Temporal(grains = {\n+    {{#each grains}}\n+            @TimeGrainDefinition(grain = TimeGrain.{{grain}}, expression = \"{{sql}}\"){{#if @last}}{{else}}, {{/if}}\n+    {{/each}}\n+    }, timeZone = \"UTC\")\n+{{/ifTypeMatches}}\n+\n+    {{#if readAccess}}@ReadPermission(expression = \"{{readAccess}}\"){{/if}}\n+    {{#if description}}@Meta(description = \"{{description}}\"){{/if}}\n+    @DimensionFormula(\"{{definition}}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1016e14d984d06ecc34d0c3cd819baab523ca24"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0ODc4Nzgx", "url": "https://github.com/yahoo/elide/pull/1220#pullrequestreview-394878781", "createdAt": "2020-04-16T18:07:04Z", "commit": {"oid": "c1016e14d984d06ecc34d0c3cd819baab523ca24"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxODowNzowNFrOGGxO3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxODowNzowNFrOGGxO3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc1MTI2MA==", "bodyText": "Include logic for exclude.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r409751260", "createdAt": "2020-04-16T18:07:04Z", "author": {"login": "moizarafat"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "diffHunk": "@@ -0,0 +1,81 @@\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+import com.yahoo.elide.datastores.aggregation.annotation.DimensionFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.MetricFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.Join;\n+import com.yahoo.elide.datastores.aggregation.annotation.Meta;\n+import com.yahoo.elide.datastores.aggregation.annotation.Temporal;\n+import com.yahoo.elide.datastores.aggregation.annotation.TimeGrainDefinition;\n+import com.yahoo.elide.datastores.aggregation.metadata.enums.TimeGrain;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromSubquery;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+import lombok.Data;\n+\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Id;\n+import javax.persistence.Entity;\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Include(rootLevel = true)\n+@Cardinality(size = CardinalitySize.{{#toUpperCase cardinality}}{{/toUpperCase}})\n+@EqualsAndHashCode\n+@ToString\n+@Entity\n+@Data\n+{{#if table}}@FromTable(name = \"{{#if schema}}{{schema}}.{{/if}}{{table}}\"){{/if}}\n+{{#if sql}}@FromSubquery(sql = \"{{sql}}\"){{/if}}\n+{{#if readAccess}}@ReadPermission(expression = \"{{readAccess}}\"){{/if}}\n+{{#if description}}@Meta(description = \"{{description}}\"){{/if}}\n+public class {{#capitalizeFirstLetter name}}{{/capitalizeFirstLetter}} {{#if extend}}extends {{#capitalizeFirstLetter extend}}{{/capitalizeFirstLetter}}{{/if}}{\n+\n+    @Id\n+    private String name;\n+\n+{{#each dimensions}}\n+\n+{{#ifTypeMatches type \"TIME\"}}\n+    @Temporal(grains = {\n+    {{#each grains}}\n+            @TimeGrainDefinition(grain = TimeGrain.{{grain}}, expression = \"{{sql}}\"){{#if @last}}{{else}}, {{/if}}\n+    {{/each}}\n+    }, timeZone = \"UTC\")\n+{{/ifTypeMatches}}\n+\n+    {{#if readAccess}}@ReadPermission(expression = \"{{readAccess}}\"){{/if}}\n+    {{#if description}}@Meta(description = \"{{description}}\"){{/if}}\n+    @DimensionFormula(\"{{definition}}\")\n+    private {{#getJavaType type}}{{/getJavaType}} {{name}};\n+\n+{{/each}}\n+\n+\n+{{#each joins}}\n+\n+    @Join(\"{{ definition }}\")\n+{{#ifTypeMatches type \"toMany\"}}\n+    private Set<{{#capitalizeFirstLetter to}}{{/capitalizeFirstLetter}}> {{name}};\n+{{else}}\n+    private {{#capitalizeFirstLetter to}}{{/capitalizeFirstLetter}} {{name}};\n+{{/ifTypeMatches}}\n+\n+{{/each}}\n+\n+{{#each measures}}\n+\n+    @MetricFormula(\"{{definition}}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1016e14d984d06ecc34d0c3cd819baab523ca24"}, "originalPosition": 75}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "224cabea9c3e66c74171f280f06c98aa7931f72c", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/224cabea9c3e66c74171f280f06c98aa7931f72c", "committedDate": "2020-04-17T15:40:25Z", "message": "Review Comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d04fde754be854f9b00691496945a8e2c448945", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/3d04fde754be854f9b00691496945a8e2c448945", "committedDate": "2020-04-17T15:54:16Z", "message": "Review Comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2NzAyNTcw", "url": "https://github.com/yahoo/elide/pull/1220#pullrequestreview-396702570", "createdAt": "2020-04-20T18:23:30Z", "commit": {"oid": "3d04fde754be854f9b00691496945a8e2c448945"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODoyMzozMFrOGIhuhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOToyNDoxM1rOGIj_hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU5NDM3NQ==", "bodyText": "Copyright", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r411594375", "createdAt": "2020-04-20T18:23:30Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/security.hbs", "diffHunk": "@@ -0,0 +1,13 @@\n+package com.yahoo.elide.contrib.dynamicconfig.model;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d04fde754be854f9b00691496945a8e2c448945"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU5NzU0OA==", "bodyText": "Maybe call capitalizeFirstLetter here.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r411597548", "createdAt": "2020-04-20T18:28:30Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/handlebars/HandlebarsHelper.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.parser.handlebars;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Type;\n+import com.github.jknack.handlebars.Options;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Helper class for handlebar template hydration.\n+ */\n+public class HandlebarsHelper {\n+\n+    private static final String EMPTY_STRING = \"\";\n+    private static final String STRING = \"String\";\n+    private static final String DATE = \"Date\";\n+    private static final String BIGDECIMAL = \"BigDecimal\";\n+    private static final String LONG = \"Long\";\n+    private static final String BOOLEAN = \"Boolean\";\n+    private static final String WHITESPACE_REGEX = \"\\\\s+\";\n+\n+    /**\n+     * Capitalize first letter of the string.\n+     * @param str string to capitalize first letter\n+     * @return string with first letter capitalized\n+     */\n+    public String capitalizeFirstLetter(String str) {\n+\n+        return (str == null || str.length() == 0) ? str : str.substring(0, 1).toUpperCase(Locale.ENGLISH)\n+                + str.substring(1);\n+    }\n+\n+    /**\n+     * Transform string to capitalize first letter of each word and remove spaces.\n+     * @param str String to be transformed\n+     * @return Capitalize First Letter of Each Word and remove spaces\n+     */\n+    public String firstCharOnlyToUpper(String str) {\n+\n+        return (str == null || str.length() == 0) ? str\n+                : String.join(EMPTY_STRING, Arrays.asList(str.trim().split(WHITESPACE_REGEX)).stream().map(\n+                        s -> s.substring(0, 1).toUpperCase(Locale.ENGLISH) + s.substring(1).toLowerCase(Locale.ENGLISH))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d04fde754be854f9b00691496945a8e2c448945"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYzMTQ5Mw==", "bodyText": "There's no fix for any of these?  Paranoids don't like unbounded security supressions.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r411631493", "createdAt": "2020-04-20T19:24:13Z", "author": {"login": "aklish"}, "path": "suppressions.xml", "diffHunk": "@@ -3,4 +3,25 @@\n    <suppress until=\"2021-01-01Z\">\n       <cve>CVE-2018-1258</cve>\n    </suppress>\n+   <suppress until=\"2019-12-01Z\">\n+       <notes><![CDATA[file name: jackson-databind-2.9.9.3.jar]]></notes>\n+       <gav regex=\"true\">^com\\.fasterxml\\.jackson\\.core:jackson-databind.*$</gav>\n+       <cve>CVE-2019-16335</cve>\n+       <cve>CVE-2019-14540</cve>\n+   </suppress>\n+   <suppress>\n+       <notes><![CDATA[file name: handlebars-4.1.2.jar: handlebars-v4.0.4.js]]></notes>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d04fde754be854f9b00691496945a8e2c448945"}, "originalPosition": 11}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a71fab0f6c2062d95fb283228b436916039ca370", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/a71fab0f6c2062d95fb283228b436916039ca370", "committedDate": "2020-04-20T20:21:41Z", "message": "Review Comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e36cc01d6976ce0f511e47babd3b5b2e313b2138", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/e36cc01d6976ce0f511e47babd3b5b2e313b2138", "committedDate": "2020-04-22T19:32:17Z", "message": "Merge with Dynamic Config Branch"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MjE2NTM5", "url": "https://github.com/yahoo/elide/pull/1220#pullrequestreview-399216539", "createdAt": "2020-04-23T15:28:27Z", "commit": {"oid": "e36cc01d6976ce0f511e47babd3b5b2e313b2138"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNToyODoyN1rOGKuO6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNToyODoyN1rOGKuO6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg5NjQyNQ==", "bodyText": "util.resolveVariables should also be called in populateTablesPojo.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r413896425", "createdAt": "2020-04-23T15:28:27Z", "author": {"login": "moizarafat"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/ElideConfigParser.java", "diffHunk": "@@ -56,7 +56,8 @@ private void parse(String localConfigPath) throws Exception {\n \n         //security\n         String securityJson = util.getJsonConfig(localConfigPath, DynamicConfigHelpersUtil.SCHEMA_TYPE_SECURITY).get(0);\n-        populatePojo(securityJson, DynamicConfigHelpersUtil.SCHEMA_TYPE_SECURITY);\n+        populatePojo(util.resolveVariables(securityJson, this.variables),\n+                DynamicConfigHelpersUtil.SCHEMA_TYPE_SECURITY);\n \n         //table\n         populateTablesPojo(util.getJsonConfig(localConfigPath, DynamicConfigHelpersUtil.SCHEMA_TYPE_TABLE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36cc01d6976ce0f511e47babd3b5b2e313b2138"}, "originalPosition": 9}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39da827dda5536874d670e0b16765e2ddf3afbc9", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/39da827dda5536874d670e0b16765e2ddf3afbc9", "committedDate": "2020-04-23T17:51:19Z", "message": "Fix test cases after rebase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bda83724b973f59653a2224e91da9230ecb73f92", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/bda83724b973f59653a2224e91da9230ecb73f92", "committedDate": "2020-04-23T18:44:02Z", "message": "Streamlining test case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ef27c868ea147fbc5aabb744bcdc9b5e49a6047", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/3ef27c868ea147fbc5aabb744bcdc9b5e49a6047", "committedDate": "2020-04-27T23:55:02Z", "message": "Review comments and handlebars version"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzODU1MzE0", "url": "https://github.com/yahoo/elide/pull/1220#pullrequestreview-403855314", "createdAt": "2020-04-30T20:31:21Z", "commit": {"oid": "3d04fde754be854f9b00691496945a8e2c448945"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDo0Mjo1NVrOGO5nfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDo0Mjo1NVrOGO5nfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI3NzI0Nw==", "bodyText": "Any update on this?", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r418277247", "createdAt": "2020-04-30T20:42:55Z", "author": {"login": "aklish"}, "path": "suppressions.xml", "diffHunk": "@@ -3,4 +3,25 @@\n    <suppress until=\"2021-01-01Z\">\n       <cve>CVE-2018-1258</cve>\n    </suppress>\n+   <suppress until=\"2019-12-01Z\">\n+       <notes><![CDATA[file name: jackson-databind-2.9.9.3.jar]]></notes>\n+       <gav regex=\"true\">^com\\.fasterxml\\.jackson\\.core:jackson-databind.*$</gav>\n+       <cve>CVE-2019-16335</cve>\n+       <cve>CVE-2019-14540</cve>\n+   </suppress>\n+   <suppress>\n+       <notes><![CDATA[file name: handlebars-4.1.2.jar: handlebars-v4.0.4.js]]></notes>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYzMTQ5Mw=="}, "originalCommit": {"oid": "3d04fde754be854f9b00691496945a8e2c448945"}, "originalPosition": 11}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c84f7586bc7dc0367f692758df32af69b22f680", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/4c84f7586bc7dc0367f692758df32af69b22f680", "committedDate": "2020-04-30T22:45:33Z", "message": "merge conflicts resolution"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e45089a2af1accbd62d87f2e9659d9899840e0a9", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/e45089a2af1accbd62d87f2e9659d9899840e0a9", "committedDate": "2020-04-30T22:56:06Z", "message": "Merge errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b09b47accba6615d8c865b64f01cbe02520f6adc", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/b09b47accba6615d8c865b64f01cbe02520f6adc", "committedDate": "2020-04-30T23:14:19Z", "message": "Merge errors"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzODY0MjYy", "url": "https://github.com/yahoo/elide/pull/1220#pullrequestreview-403864262", "createdAt": "2020-04-30T20:45:12Z", "commit": {"oid": "3ef27c868ea147fbc5aabb744bcdc9b5e49a6047"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDo0NToxMlrOGO5rug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNjoxMToxNFrOGPOCaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI3ODMzMA==", "bodyText": "Whenever the parent pom defines a version in the dependency management section, we should not redefine it here.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r418278330", "createdAt": "2020-04-30T20:45:12Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/pom.xml", "diffHunk": "@@ -48,10 +48,18 @@\n         <slf4j-api.version>1.7.26</slf4j-api.version>\n         <jsonschema2pojo-core.version>1.0.2</jsonschema2pojo-core.version>\n         <lombok.version>1.18.10</lombok.version>\n+        <handlebars.version>4.2.0</handlebars.version>\n         <json-schema-validator.version>2.2.12</json-schema-validator.version>\n+        <junit.jupiter.version>5.6.0</junit.jupiter.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ef27c868ea147fbc5aabb744bcdc9b5e49a6047"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI3ODk4NQ==", "bodyText": "Don't print stack traces.  Instead use SLF4J to log them.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r418278985", "createdAt": "2020-04-30T20:46:27Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/ElideConfigParser.java", "diffHunk": "@@ -39,50 +39,51 @@\n      */\n     public void parseConfigPath(String localFilePath) {\n         try {\n-      if (util.isNullOrEmpty(localFilePath)) {\n-    throw new NullPointerException(\"Config path is null\");\n-      }\n-      parse(localFilePath);\n+            if (util.isNullOrEmpty(localFilePath)) {\n+                throw new NullPointerException(\"Config path is null\");\n+            }\n+            parse(localFilePath);\n         } catch (Exception e) {\n-      e.printStackTrace();\n-      log.error(e.getMessage());\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ef27c868ea147fbc5aabb744bcdc9b5e49a6047"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI3OTc4MQ==", "bodyText": "Methods should not throw Exception.  They should be specific about the exceptions they throw.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r418279781", "createdAt": "2020-04-30T20:48:06Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/parser/ElideConfigParser.java", "diffHunk": "@@ -39,50 +39,51 @@\n      */\n     public void parseConfigPath(String localFilePath) {\n         try {\n-      if (util.isNullOrEmpty(localFilePath)) {\n-    throw new NullPointerException(\"Config path is null\");\n-      }\n-      parse(localFilePath);\n+            if (util.isNullOrEmpty(localFilePath)) {\n+                throw new NullPointerException(\"Config path is null\");\n+            }\n+            parse(localFilePath);\n         } catch (Exception e) {\n-      e.printStackTrace();\n-      log.error(e.getMessage());\n+            e.printStackTrace();\n+            log.error(e.getMessage());\n         }\n     }\n \n     private void parse(String localConfigPath) throws Exception {\n-        //variables\n+        // variables", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ef27c868ea147fbc5aabb744bcdc9b5e49a6047"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYwODczMg==", "bodyText": "Any dependency defined in the parent pom dependency management should not set explicit versions.", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r418608732", "createdAt": "2020-05-01T16:04:28Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/pom.xml", "diffHunk": "@@ -131,6 +131,29 @@\n             <version>${junit.platform.version}</version>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>com.github.jknack</groupId>\n+            <artifactId>handlebars</artifactId>\n+            <version>${handlebars.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter-api</artifactId>\n+            <version>${junit.jupiter.version}</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b09b47accba6615d8c865b64f01cbe02520f6adc"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYxMTgxNw==", "bodyText": "Can this be part of an else statement with respect to {{#if table}}", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r418611817", "createdAt": "2020-05-01T16:11:14Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/table.hbs", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.annotation.Exclude;\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+import com.yahoo.elide.datastores.aggregation.annotation.DimensionFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.MetricFormula;\n+import com.yahoo.elide.datastores.aggregation.annotation.Join;\n+import com.yahoo.elide.datastores.aggregation.annotation.Meta;\n+import com.yahoo.elide.datastores.aggregation.annotation.Temporal;\n+import com.yahoo.elide.datastores.aggregation.annotation.TimeGrainDefinition;\n+import com.yahoo.elide.datastores.aggregation.metadata.enums.TimeGrain;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromSubquery;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+import lombok.Data;\n+\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Id;\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Cardinality(size = CardinalitySize.{{#toUpperCase cardinality}}{{/toUpperCase}})\n+@EqualsAndHashCode\n+@ToString\n+@Data\n+{{#if table}}@FromTable(name = \"{{#if schema}}{{schema}}.{{/if}}{{table}}\"){{/if}}\n+{{#if sql}}@FromSubquery(sql = \"{{sql}}\"){{/if}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b09b47accba6615d8c865b64f01cbe02520f6adc"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed4b3ff33c19974f371b6f90bb4b30a669ee2fbb", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/ed4b3ff33c19974f371b6f90bb4b30a669ee2fbb", "committedDate": "2020-05-04T20:29:04Z", "message": "Remove Duplicate entries in POM"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7775d8da96dadc88074aab9b1d2a26fc5a83a37b", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/7775d8da96dadc88074aab9b1d2a26fc5a83a37b", "committedDate": "2020-05-04T20:25:44Z", "message": "Remove Duplicate entries in POM"}, "afterCommit": {"oid": "ed4b3ff33c19974f371b6f90bb4b30a669ee2fbb", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/ed4b3ff33c19974f371b6f90bb4b30a669ee2fbb", "committedDate": "2020-05-04T20:29:04Z", "message": "Remove Duplicate entries in POM"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7d2652207416e46a5d51da296c08fd92bd98063", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/b7d2652207416e46a5d51da296c08fd92bd98063", "committedDate": "2020-05-04T20:46:42Z", "message": "Use if-else for table and sql source"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2OTUwMzYw", "url": "https://github.com/yahoo/elide/pull/1220#pullrequestreview-406950360", "createdAt": "2020-05-06T20:11:02Z", "commit": {"oid": "b7d2652207416e46a5d51da296c08fd92bd98063"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMDoxMTowMlrOGRjmig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMDoxMTowMlrOGRjmig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA2MjI4Mg==", "bodyText": "Can you remove the version variables above as well?", "url": "https://github.com/yahoo/elide/pull/1220#discussion_r421062282", "createdAt": "2020-05-06T20:11:02Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/pom.xml", "diffHunk": "@@ -100,16 +100,6 @@\n             <artifactId>hjson</artifactId>\n             <version>${hjson.version}</version>\n         </dependency>\n-        <dependency>\n-            <groupId>org.junit.jupiter</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7d2652207416e46a5d51da296c08fd92bd98063"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b22ce39b20ea5b3e6c21b49079ca5dffcf83d3e", "author": {"user": {"login": "rishi-aga", "name": null}}, "url": "https://github.com/yahoo/elide/commit/5b22ce39b20ea5b3e6c21b49079ca5dffcf83d3e", "committedDate": "2020-05-06T20:47:09Z", "message": "Remove unused properties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e78fa68cdea35f14a48d9b7c7feba3b952c60f26", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/e78fa68cdea35f14a48d9b7c7feba3b952c60f26", "committedDate": "2020-05-11T05:49:58Z", "message": "Merge branch 'elide-5.x-dynamic-config' into elide-5.x-dynamic-config-handlebars"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NDkwMzA5", "url": "https://github.com/yahoo/elide/pull/1220#pullrequestreview-409490309", "createdAt": "2020-05-11T20:05:44Z", "commit": {"oid": "e78fa68cdea35f14a48d9b7c7feba3b952c60f26"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "971fab98b310024c421312c0e1f2f5eb2ee539c6", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/971fab98b310024c421312c0e1f2f5eb2ee539c6", "committedDate": "2020-05-13T04:22:56Z", "message": "Update DynamicConfigHelpers.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8dddc89cc901ca7bb3df6131661aec2966529f6", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/f8dddc89cc901ca7bb3df6131661aec2966529f6", "committedDate": "2020-05-13T04:23:47Z", "message": "Update ElideConfigParser.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70f8f1ca22fe03b2e702d361e6cfb694db5d16e0", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/70f8f1ca22fe03b2e702d361e6cfb694db5d16e0", "committedDate": "2020-05-13T04:43:38Z", "message": "Review Comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2097065c69eac2eda20fe8e4acf240413fbe71c", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/a2097065c69eac2eda20fe8e4acf240413fbe71c", "committedDate": "2020-05-14T01:42:03Z", "message": "Merge branch 'elide-5.x-dynamic-config' into elide-5.x-dynamic-config-handlebars"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b19a573cf8e52884da2a09a1398406e74d278644", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/b19a573cf8e52884da2a09a1398406e74d278644", "committedDate": "2020-05-14T02:08:13Z", "message": "Update DynamicConfigHelpersTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4db405249fe2b939058c3681f09eef545947d7f6", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/4db405249fe2b939058c3681f09eef545947d7f6", "committedDate": "2020-05-14T02:08:49Z", "message": "Update DynamicConfigHelpers.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c0a14e6b67fcebc8c96ed42b60bc77145472332", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/3c0a14e6b67fcebc8c96ed42b60bc77145472332", "committedDate": "2020-05-14T02:09:43Z", "message": "Update DynamicConfigHelpers.java"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 661, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}