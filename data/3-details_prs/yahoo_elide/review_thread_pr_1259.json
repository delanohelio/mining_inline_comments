{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxOTYzMjkw", "number": 1259, "reviewThreads": {"totalCount": 39, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzo1Nzo1NFrOD0xcqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMDozMjo0MlrOD-vZ_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NjYyNjk3OnYy", "diffSide": "RIGHT", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzo1Nzo1NFrOGJ368w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzo1Nzo1NFrOGJ368w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAwNjU3OQ==", "bodyText": "This line should be inside the if block at L-68, otherwise even when the dynamic config is disabled it will try to generate the Config POJOs.", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r413006579", "createdAt": "2020-04-22T13:57:54Z", "author": {"login": "moizarafat"}, "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java", "diffHunk": "@@ -53,28 +64,61 @@ public static EntityManagerFactory getEntityManagerFactory(String modelPackageNa\n             options.put(\"javax.persistence.jdbc.password\", \"elide123\");\n         }\n \n-        PersistenceUnitInfo persistenceUnitInfo = new PersistenceUnitInfoImpl(\"elide-stand-alone\",\n-                combineModelEntities(modelPackageName, includeAsyncModel), options);\n+        dynamicEntityCompiler = new ElideDynamicEntityCompiler(dynamicConfigPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57a7f2d7baa15219e3f815e0f2125b5ccd6c5c58"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2Njc5NDEwOnYy", "diffSide": "RIGHT", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNDoyOToxOVrOGJ5h3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNDoyOToxOVrOGJ5h3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAzMjkyNg==", "bodyText": "These 3 sets of classes should not be binded to ElideDynamicEntityCompiler.bindClasses as they are not compiled through dynamic compiler. These 3 set of classes should be put in options as AvailableSettings.LOADED_CLASSES, <ClassScanner Scanned classes>  . Refer \n  \n    \n      elide/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideDynamicConfiguration.java\n    \n    \n         Line 97\n      in\n      2d6436d\n    \n    \n    \n    \n\n        \n          \n           puiPropertyMap.put(AvailableSettings.LOADED_CLASSES, bindClasses);", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r413032926", "createdAt": "2020-04-22T14:29:19Z", "author": {"login": "moizarafat"}, "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java", "diffHunk": "@@ -53,28 +64,61 @@ public static EntityManagerFactory getEntityManagerFactory(String modelPackageNa\n             options.put(\"javax.persistence.jdbc.password\", \"elide123\");\n         }\n \n-        PersistenceUnitInfo persistenceUnitInfo = new PersistenceUnitInfoImpl(\"elide-stand-alone\",\n-                combineModelEntities(modelPackageName, includeAsyncModel), options);\n+        dynamicEntityCompiler = new ElideDynamicEntityCompiler(dynamicConfigPath);\n+        if (includeDynamicModel) {\n+            dynamicEntityCompiler.compile();\n+            Collection<ClassLoader> classLoaders = new ArrayList<>();\n+            classLoaders.add(dynamicEntityCompiler.getClassLoader());\n+            options.put(AvailableSettings.CLASSLOADERS, classLoaders);\n+        }\n+        PersistenceUnitInfo persistenceUnitInfo = null;\n+        try {\n+\n+            ElideDynamicEntityCompiler.bindClasses = new HashSet<>();\n+            // add dynamic generated classes\n+            ElideDynamicEntityCompiler.bindClasses.addAll(populateBindClasses(dynamicEntityCompiler, Entity.class));\n+            ElideDynamicEntityCompiler.bindClasses.addAll(populateBindClasses(dynamicEntityCompiler, FromTable.class));\n+            ElideDynamicEntityCompiler.bindClasses.addAll(populateBindClasses(dynamicEntityCompiler,\n+                    FromSubquery.class));\n+            // add classes\n+            ElideDynamicEntityCompiler.bindClasses.addAll(ClassScanner.getAnnotatedClasses(Entity.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57a7f2d7baa15219e3f815e0f2125b5ccd6c5c58"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzIyODI0OnYy", "diffSide": "RIGHT", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNTo0ODo1MFrOGJ9paA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNTo0ODo1MFrOGJ9paA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzEwMDM5Mg==", "bodyText": "We should probably not catch the exception and let the error propagate.", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r413100392", "createdAt": "2020-04-22T15:48:50Z", "author": {"login": "moizarafat"}, "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java", "diffHunk": "@@ -53,28 +64,61 @@ public static EntityManagerFactory getEntityManagerFactory(String modelPackageNa\n             options.put(\"javax.persistence.jdbc.password\", \"elide123\");\n         }\n \n-        PersistenceUnitInfo persistenceUnitInfo = new PersistenceUnitInfoImpl(\"elide-stand-alone\",\n-                combineModelEntities(modelPackageName, includeAsyncModel), options);\n+        dynamicEntityCompiler = new ElideDynamicEntityCompiler(dynamicConfigPath);\n+        if (includeDynamicModel) {\n+            dynamicEntityCompiler.compile();\n+            Collection<ClassLoader> classLoaders = new ArrayList<>();\n+            classLoaders.add(dynamicEntityCompiler.getClassLoader());\n+            options.put(AvailableSettings.CLASSLOADERS, classLoaders);\n+        }\n+        PersistenceUnitInfo persistenceUnitInfo = null;\n+        try {\n+\n+            ElideDynamicEntityCompiler.bindClasses = new HashSet<>();\n+            // add dynamic generated classes\n+            ElideDynamicEntityCompiler.bindClasses.addAll(populateBindClasses(dynamicEntityCompiler, Entity.class));\n+            ElideDynamicEntityCompiler.bindClasses.addAll(populateBindClasses(dynamicEntityCompiler, FromTable.class));\n+            ElideDynamicEntityCompiler.bindClasses.addAll(populateBindClasses(dynamicEntityCompiler,\n+                    FromSubquery.class));\n+            // add classes\n+            ElideDynamicEntityCompiler.bindClasses.addAll(ClassScanner.getAnnotatedClasses(Entity.class));\n+            ElideDynamicEntityCompiler.bindClasses.addAll(ClassScanner.getAnnotatedClasses(FromTable.class));\n+            ElideDynamicEntityCompiler.bindClasses.addAll(ClassScanner.getAnnotatedClasses(FromSubquery.class));\n+\n+            persistenceUnitInfo = new PersistenceUnitInfoImpl(\"elide-stand-alone\",\n+                    combineModelEntities(dynamicEntityCompiler, modelPackageName,\n+                            includeAsyncModel, includeDynamicModel),\n+                    options,\n+                    dynamicEntityCompiler.getClassLoader());\n \n+        } catch (ClassNotFoundException e) {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57a7f2d7baa15219e3f815e0f2125b5ccd6c5c58"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzI3MDg3OnYy", "diffSide": "RIGHT", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNTo1NzowMVrOGJ-CuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNTo1NzowMVrOGJ-CuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzEwNjg3Mw==", "bodyText": "We dont need to do loadClass.getClass. Only loadClass is needed.", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r413106873", "createdAt": "2020-04-22T15:57:01Z", "author": {"login": "moizarafat"}, "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java", "diffHunk": "@@ -89,4 +133,39 @@ public static EntityManagerFactory getEntityManagerFactory(String modelPackageNa\n                 .map(Class::getName)\n                 .collect(Collectors.toList());\n     }\n+\n+    /**\n+     * Find classes with a particular annotation from dynamic compiler.\n+     * @param compiler An instance of ElideDynamicEntityCompiler.\n+     * @param annotationClass Annotation to search for.\n+     * @return Set of Classes matching the annotation.\n+     * @throws ClassNotFoundException\n+     */\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    public static List<String> findAnnotatedClasses(ElideDynamicEntityCompiler compiler, Class annotationClass)\n+            throws ClassNotFoundException {\n+        List<String> annotatedClass = new ArrayList<String>();\n+        List<String> dynamicClasses = ElideDynamicEntityCompiler.classNames;\n+        for (String dynamicClass : dynamicClasses) {\n+            Class<?> classz = compiler.getClassLoader().loadClass(dynamicClass);\n+            if (classz.getAnnotation(annotationClass) != null) {\n+                annotatedClass.add(classz.getName());\n+            }\n+        }\n+        return annotatedClass;\n+    }\n+\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    public static Set<Class> populateBindClasses(ElideDynamicEntityCompiler compiler,\n+            Class annotationClass) throws ClassNotFoundException {\n+        Set<Class> bindClasses = new HashSet<>();\n+        List<String> dynamicClasses = ElideDynamicEntityCompiler.classNames;\n+        for (String dynamicClass : dynamicClasses) {\n+            Class<?> bindClass = compiler.getClassLoader().loadClass(dynamicClass).getClass();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57a7f2d7baa15219e3f815e0f2125b5ccd6c5c58"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzI5MjAwOnYy", "diffSide": "RIGHT", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNjowMTowOFrOGJ-PWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNjowMTowOFrOGJ-PWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzExMDEwNQ==", "bodyText": "annotatedClasses instead of annotatedClass", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r413110105", "createdAt": "2020-04-22T16:01:08Z", "author": {"login": "moizarafat"}, "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java", "diffHunk": "@@ -89,4 +133,39 @@ public static EntityManagerFactory getEntityManagerFactory(String modelPackageNa\n                 .map(Class::getName)\n                 .collect(Collectors.toList());\n     }\n+\n+    /**\n+     * Find classes with a particular annotation from dynamic compiler.\n+     * @param compiler An instance of ElideDynamicEntityCompiler.\n+     * @param annotationClass Annotation to search for.\n+     * @return Set of Classes matching the annotation.\n+     * @throws ClassNotFoundException\n+     */\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    public static List<String> findAnnotatedClasses(ElideDynamicEntityCompiler compiler, Class annotationClass)\n+            throws ClassNotFoundException {\n+        List<String> annotatedClass = new ArrayList<String>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57a7f2d7baa15219e3f815e0f2125b5ccd6c5c58"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzM3ODg1OnYy", "diffSide": "RIGHT", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNjoxODo1NFrOGJ_D2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNjoxODo1NFrOGJ_D2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzEyMzU0NA==", "bodyText": "This is already defined as static in Util. We should reuse from there.", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r413123544", "createdAt": "2020-04-22T16:18:54Z", "author": {"login": "moizarafat"}, "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java", "diffHunk": "@@ -49,24 +51,36 @@\n \n     private static MetricRegistry metricRegistry = null;\n     private static HealthCheckRegistry healthCheckRegistry = null;\n+    private ElideDynamicEntityCompiler dynamicEntityCompiler = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57a7f2d7baa15219e3f815e0f2125b5ccd6c5c58"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzQwMzczOnYy", "diffSide": "RIGHT", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNjoyNDowMFrOGJ_S9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNjoyNDowMFrOGJ_S9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzEyNzQxMw==", "bodyText": "This piece of code is duplicated between Util.getEntityManager and here. Instead this could be a separate method in Util like initialize dynamic compiler which takes a boolean argument derived from enableDynamicModelConfig . And based on the boolean value and if dynamicEntityCompiler is null, dynamicEntityCompiler will be initialized and classes compiled.", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r413127413", "createdAt": "2020-04-22T16:24:00Z", "author": {"login": "moizarafat"}, "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java", "diffHunk": "@@ -49,24 +51,36 @@\n \n     private static MetricRegistry metricRegistry = null;\n     private static HealthCheckRegistry healthCheckRegistry = null;\n+    private ElideDynamicEntityCompiler dynamicEntityCompiler = null;\n \n     /**\n-     * Constructor\n+     * Constructor.\n      *\n-     * @param injector Injection instance for application\n+     * @param injector Injection instance for application.\n      */\n     @Inject\n     public ElideResourceConfig(ServiceLocator injector, @Context ServletContext servletContext) {\n         this.injector = injector;\n \n         settings = (ElideStandaloneSettings) servletContext.getAttribute(ELIDE_STANDALONE_SETTINGS_ATTR);\n \n+        dynamicEntityCompiler = new ElideDynamicEntityCompiler(settings.getDynamicConfigPath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57a7f2d7baa15219e3f815e0f2125b5ccd6c5c58"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzQzNzIyOnYy", "diffSide": "RIGHT", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNjozMDo1OFrOGJ_nqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNjozMDo1OFrOGJ_nqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzEzMjcxMg==", "bodyText": "lets have a singular name instead of with spaces. Just \"dynamic\" instead of \"dynamic model\";", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r413132712", "createdAt": "2020-04-22T16:30:58Z", "author": {"login": "moizarafat"}, "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java", "diffHunk": "@@ -110,27 +124,45 @@ protected void configure() {\n \n         // Bind swaggers to given endpoint\n         register(new org.glassfish.hk2.utilities.binding.AbstractBinder() {\n+            @SuppressWarnings(\"rawtypes\")\n             @Override\n             protected void configure() {\n                 Map<String, Swagger> swaggerDocs = settings.enableSwagger();\n                 if (!swaggerDocs.isEmpty()) {\n                     // Include the async models in swagger docs\n-                    if(settings.enableAsync()) {\n-                        EntityDictionary dictionary = new EntityDictionary(new HashMap());\n+                    if (settings.enableAsync()) {\n+                        EntityDictionary dictionary = new EntityDictionary(new HashMap<>());\n                         dictionary.bindEntity(AsyncQuery.class);\n                         dictionary.bindEntity(AsyncQueryResult.class);\n-                         \n+\n                         Info info = new Info().title(\"Async Service\").version(\"1.0\");\n \n                         SwaggerBuilder builder = new SwaggerBuilder(dictionary, info);\n-                        \n+\n                         //Default value of getJsonApiPathSpec() ends with /* at the end. need to remove.\n                         String asyncBasePath = settings.getJsonApiPathSpec().replaceAll(\"/\\\\*\", \"\");\n \n                         Swagger swagger = builder.build().basePath(asyncBasePath);\n \n                         swaggerDocs.put(\"async\", swagger);\n                     }\n+                    // bind dynamic models\n+                    if (settings.enableDynamicModelConfig()) {\n+                        EntityDictionary dictionary = new EntityDictionary(new HashMap<>());\n+                        for (Class entity : dynamicEntityCompiler.getBindClasses()) {\n+                            dictionary.bindEntity(entity);\n+                        }\n+\n+                        Info info = new Info().title(\"Dynamic models Service\").version(\"1.0\");\n+                        SwaggerBuilder builder = new SwaggerBuilder(dictionary, info);\n+\n+                        //Default value of getJsonApiPathSpec() ends with /* at the end. need to remove.\n+                        String dynamicBasePath = settings.getJsonApiPathSpec().replaceAll(\"/\\\\*\", \"\");\n+\n+                        Swagger swagger = builder.build().basePath(dynamicBasePath);\n+\n+                        swaggerDocs.put(\"dynamic model\", swagger);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57a7f2d7baa15219e3f815e0f2125b5ccd6c5c58"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzQ0MTUyOnYy", "diffSide": "RIGHT", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNjozMTo0N1rOGJ_qQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNjozMTo0N1rOGJ_qQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzEzMzM3Ng==", "bodyText": "Since this is logic is same between both blocks, we can get it out in a separate common variable.", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r413133376", "createdAt": "2020-04-22T16:31:47Z", "author": {"login": "moizarafat"}, "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java", "diffHunk": "@@ -110,27 +124,45 @@ protected void configure() {\n \n         // Bind swaggers to given endpoint\n         register(new org.glassfish.hk2.utilities.binding.AbstractBinder() {\n+            @SuppressWarnings(\"rawtypes\")\n             @Override\n             protected void configure() {\n                 Map<String, Swagger> swaggerDocs = settings.enableSwagger();\n                 if (!swaggerDocs.isEmpty()) {\n                     // Include the async models in swagger docs\n-                    if(settings.enableAsync()) {\n-                        EntityDictionary dictionary = new EntityDictionary(new HashMap());\n+                    if (settings.enableAsync()) {\n+                        EntityDictionary dictionary = new EntityDictionary(new HashMap<>());\n                         dictionary.bindEntity(AsyncQuery.class);\n                         dictionary.bindEntity(AsyncQueryResult.class);\n-                         \n+\n                         Info info = new Info().title(\"Async Service\").version(\"1.0\");\n \n                         SwaggerBuilder builder = new SwaggerBuilder(dictionary, info);\n-                        \n+\n                         //Default value of getJsonApiPathSpec() ends with /* at the end. need to remove.\n                         String asyncBasePath = settings.getJsonApiPathSpec().replaceAll(\"/\\\\*\", \"\");\n \n                         Swagger swagger = builder.build().basePath(asyncBasePath);\n \n                         swaggerDocs.put(\"async\", swagger);\n                     }\n+                    // bind dynamic models\n+                    if (settings.enableDynamicModelConfig()) {\n+                        EntityDictionary dictionary = new EntityDictionary(new HashMap<>());\n+                        for (Class entity : dynamicEntityCompiler.getBindClasses()) {\n+                            dictionary.bindEntity(entity);\n+                        }\n+\n+                        Info info = new Info().title(\"Dynamic models Service\").version(\"1.0\");\n+                        SwaggerBuilder builder = new SwaggerBuilder(dictionary, info);\n+\n+                        //Default value of getJsonApiPathSpec() ends with /* at the end. need to remove.\n+                        String dynamicBasePath = settings.getJsonApiPathSpec().replaceAll(\"/\\\\*\", \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57a7f2d7baa15219e3f815e0f2125b5ccd6c5c58"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzY0NTc1OnYy", "diffSide": "RIGHT", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/dynamic/config/ElideDynamicEntityCompiler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNzoxMjo0MlrOGKBkSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNzoxMjo0MlrOGKBkSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE2NDYxOQ==", "bodyText": "This method is not used anywhere. we should remove it.", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r413164619", "createdAt": "2020-04-22T17:12:42Z", "author": {"login": "moizarafat"}, "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/dynamic/config/ElideDynamicEntityCompiler.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.standalone.dynamic.config;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideSecurityConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideTableConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.parser.ElideConfigParser;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.parser.handlebars.HandlebarsHydrator;\n+\n+import com.google.common.collect.Sets;\n+import org.mdkt.compiler.InMemoryJavaCompiler;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+\n+/**\n+ * Elide Dynamic entity compiler.\n+ */\n+@Slf4j\n+public class ElideDynamicEntityCompiler {\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    public static Set<Class> bindClasses;\n+    public static final String PACKAGE_NAME = \"com.yahoo.elide.contrib.dynamicconfig.model.\";\n+    public static List<String> classNames = new ArrayList<String>();\n+\n+    private static InMemoryJavaCompiler inMemoryJavaCompiler = InMemoryJavaCompiler.newInstance();\n+    private static ElideConfigParser elideConfigParser = new ElideConfigParser();\n+    private static Map<String, Class<?>> compiledObjects;\n+\n+    private Map<String, String> tableClasses = new HashMap<String, String>();\n+    private Map<String, String> securityClasses = new HashMap<String, String>();\n+\n+    /**\n+     * generate java classes from dynamic config.\n+     * @param path to hjson config\n+     */\n+    public ElideDynamicEntityCompiler(String path) {\n+        try {\n+            elideConfigParser.parseConfigPath(path);\n+\n+            ElideTableConfig tableConfig = elideConfigParser.getElideTableConfig();\n+            ElideSecurityConfig securityConfig = elideConfigParser.getElideSecurityConfig();\n+            HandlebarsHydrator handlebarHydrator = new HandlebarsHydrator();\n+\n+            tableClasses = handlebarHydrator.hydrateTableTemplate(tableConfig);\n+            securityClasses = handlebarHydrator.hydrateSecurityTemplate(securityConfig);\n+\n+            for (Entry<String, String> entry : tableClasses.entrySet()) {\n+                classNames.add(PACKAGE_NAME + entry.getKey());\n+            }\n+\n+            for (Entry<String, String> entry : securityClasses.entrySet()) {\n+                classNames.add(PACKAGE_NAME + entry.getKey());\n+            }\n+\n+            inMemoryJavaCompiler.useParentClassLoader(\n+                    new ElideDynamicInMemoryClassLoader(ClassLoader.getSystemClassLoader(),\n+                            Sets.newHashSet(classNames)));\n+\n+        } catch (Exception e) {\n+            log.error(\"Unable to read Dynamic Configuration \" + e.getMessage());\n+        }\n+\n+    }\n+\n+    /**\n+     * compile dynamic classes in-memory.\n+     */\n+    public void compile() {\n+\n+        try {\n+            for (Map.Entry<String, String> tablePojo : tableClasses.entrySet()) {\n+                log.info(\"key: \" + PACKAGE_NAME + tablePojo.getKey() + \", value: \" + tablePojo.getValue());\n+                inMemoryJavaCompiler.addSource(PACKAGE_NAME + tablePojo.getKey(), tablePojo.getValue());\n+            }\n+\n+            for (Map.Entry<String, String> secPojo : securityClasses.entrySet()) {\n+                log.info(\"key: \" + PACKAGE_NAME +  secPojo.getKey() + \", value: \" + secPojo.getValue());\n+                inMemoryJavaCompiler.addSource(PACKAGE_NAME + secPojo.getKey(), secPojo.getValue());\n+            }\n+            compiledObjects = inMemoryJavaCompiler.compileAll();\n+        } catch (Exception e) {\n+            log.error(\"Unable to compile dynamic classes\");\n+        }\n+    }\n+\n+    /**\n+     * getter for classLoader.\n+     * @return ClassLoader\n+     */\n+    public ClassLoader getClassLoader() {\n+        return inMemoryJavaCompiler.getClassloader();\n+    }\n+\n+    /**\n+     * getter for compiled dynamic class.\n+     * @param name - class name\n+     * @return compiled class\n+     */\n+    public Class<?> getCompiled(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57a7f2d7baa15219e3f815e0f2125b5ccd6c5c58"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzY1NTI5OnYy", "diffSide": "RIGHT", "path": "elide-standalone/src/test/java/com/yahoo/elide/standalone/ElideStandaloneTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNzoxNDozN1rOGKBpzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNzoxNDozN1rOGKBpzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE2NjAzMQ==", "bodyText": "Please check the spring PR. I think we were able to successfully add it there. I think it should be like this 2020-01-01T00:00Z", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r413166031", "createdAt": "2020-04-22T17:14:37Z", "author": {"login": "moizarafat"}, "path": "elide-standalone/src/test/java/com/yahoo/elide/standalone/ElideStandaloneTest.java", "diffHunk": "@@ -89,79 +102,122 @@ public void shutdown() throws Exception {\n         elide.stop();\n     }\n \n+    @Test\n+    public void testJsonAPIPlayer() {\n+        given()\n+        .contentType(JSONAPI_CONTENT_TYPE)\n+        .accept(JSONAPI_CONTENT_TYPE)\n+        .body(\n+                datum(\n+                        resource(\n+                                type(\"player\"),\n+                                id(\"ready-player-1\"),\n+                                attributes(\n+                                        attr(\"name\", \"player1\"),\n+                                        attr(\"countryCode\", \"USA\"),\n+                                        attr(\"playerCountry\", \"USA\"),\n+                                        attr(\"highScore\", 100)\n+                                        //                        attr(\"createdOn\", \"2020-01-01\"); still need to be tested with date", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57a7f2d7baa15219e3f815e0f2125b5ccd6c5c58"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MDA4ODI0OnYy", "diffSide": "RIGHT", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNTo0NjozMlrOGKXnjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNTo0NjozMlrOGKXnjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUyNTkwMA==", "bodyText": "We can rename this to findAnnotatedClasses.", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r413525900", "createdAt": "2020-04-23T05:46:32Z", "author": {"login": "moizarafat"}, "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java", "diffHunk": "@@ -89,4 +133,39 @@ public static EntityManagerFactory getEntityManagerFactory(String modelPackageNa\n                 .map(Class::getName)\n                 .collect(Collectors.toList());\n     }\n+\n+    /**\n+     * Find classes with a particular annotation from dynamic compiler.\n+     * @param compiler An instance of ElideDynamicEntityCompiler.\n+     * @param annotationClass Annotation to search for.\n+     * @return Set of Classes matching the annotation.\n+     * @throws ClassNotFoundException\n+     */\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    public static List<String> findAnnotatedClasses(ElideDynamicEntityCompiler compiler, Class annotationClass)\n+            throws ClassNotFoundException {\n+        List<String> annotatedClass = new ArrayList<String>();\n+        List<String> dynamicClasses = ElideDynamicEntityCompiler.classNames;\n+        for (String dynamicClass : dynamicClasses) {\n+            Class<?> classz = compiler.getClassLoader().loadClass(dynamicClass);\n+            if (classz.getAnnotation(annotationClass) != null) {\n+                annotatedClass.add(classz.getName());\n+            }\n+        }\n+        return annotatedClass;\n+    }\n+\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    public static Set<Class> populateBindClasses(ElideDynamicEntityCompiler compiler,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57a7f2d7baa15219e3f815e0f2125b5ccd6c5c58"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MDA5ODEwOnYy", "diffSide": "RIGHT", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNTo1MDoyN1rOGKXtDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNTo1MDoyN1rOGKXtDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUyNzMxMQ==", "bodyText": "We need to add classes of type FromTable, FromSubQuery", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r413527311", "createdAt": "2020-04-23T05:50:27Z", "author": {"login": "moizarafat"}, "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java", "diffHunk": "@@ -53,28 +64,61 @@ public static EntityManagerFactory getEntityManagerFactory(String modelPackageNa\n             options.put(\"javax.persistence.jdbc.password\", \"elide123\");\n         }\n \n-        PersistenceUnitInfo persistenceUnitInfo = new PersistenceUnitInfoImpl(\"elide-stand-alone\",\n-                combineModelEntities(modelPackageName, includeAsyncModel), options);\n+        dynamicEntityCompiler = new ElideDynamicEntityCompiler(dynamicConfigPath);\n+        if (includeDynamicModel) {\n+            dynamicEntityCompiler.compile();\n+            Collection<ClassLoader> classLoaders = new ArrayList<>();\n+            classLoaders.add(dynamicEntityCompiler.getClassLoader());\n+            options.put(AvailableSettings.CLASSLOADERS, classLoaders);\n+        }\n+        PersistenceUnitInfo persistenceUnitInfo = null;\n+        try {\n+\n+            ElideDynamicEntityCompiler.bindClasses = new HashSet<>();\n+            // add dynamic generated classes\n+            ElideDynamicEntityCompiler.bindClasses.addAll(populateBindClasses(dynamicEntityCompiler, Entity.class));\n+            ElideDynamicEntityCompiler.bindClasses.addAll(populateBindClasses(dynamicEntityCompiler, FromTable.class));\n+            ElideDynamicEntityCompiler.bindClasses.addAll(populateBindClasses(dynamicEntityCompiler,\n+                    FromSubquery.class));\n+            // add classes\n+            ElideDynamicEntityCompiler.bindClasses.addAll(ClassScanner.getAnnotatedClasses(Entity.class));\n+            ElideDynamicEntityCompiler.bindClasses.addAll(ClassScanner.getAnnotatedClasses(FromTable.class));\n+            ElideDynamicEntityCompiler.bindClasses.addAll(ClassScanner.getAnnotatedClasses(FromSubquery.class));\n+\n+            persistenceUnitInfo = new PersistenceUnitInfoImpl(\"elide-stand-alone\",\n+                    combineModelEntities(dynamicEntityCompiler, modelPackageName,\n+                            includeAsyncModel, includeDynamicModel),\n+                    options,\n+                    dynamicEntityCompiler.getClassLoader());\n \n+        } catch (ClassNotFoundException e) {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();\n+        }\n         return new EntityManagerFactoryBuilderImpl(\n-                new PersistenceUnitInfoDescriptor(persistenceUnitInfo), new HashMap<>())\n+                new PersistenceUnitInfoDescriptor(persistenceUnitInfo), new HashMap<>(),\n+                dynamicEntityCompiler.getClassLoader())\n                 .build();\n     }\n \n     /**\n-     * Combine the model entities with Async model.\n+     * Combine the model entities with Async  and Dynamic models.\n      *\n      * @param modelPackageName Package name\n      * @param includeAsyncModel Include Async model package Name\n+     * @param includeDynamicModel Include Dynamic model package Name\n      * @return All entities combined from both package.\n+     * @throws ClassNotFoundException\n      */\n-    public static List<String> combineModelEntities(String modelPackageName, boolean includeAsyncModel) {\n-\n+    public static List<String> combineModelEntities(ElideDynamicEntityCompiler compiler, String modelPackageName,\n+            boolean includeAsyncModel, boolean includeDynamicModel) throws ClassNotFoundException {\n         List<String> modelEntities = getAllEntities(modelPackageName);\n-\n         if (includeAsyncModel) {\n             modelEntities.addAll(getAllEntities(AsyncQuery.class.getPackage().getName()));\n         }\n+        if (includeDynamicModel) {\n+            modelEntities.addAll(findAnnotatedClasses(compiler, Entity.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57a7f2d7baa15219e3f815e0f2125b5ccd6c5c58"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MDEwMTIyOnYy", "diffSide": "RIGHT", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNTo1MToxNVrOGKXukw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNTo1MToxNVrOGKXukw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUyNzY5OQ==", "bodyText": "we can call this findAnnotatedClassNames.", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r413527699", "createdAt": "2020-04-23T05:51:15Z", "author": {"login": "moizarafat"}, "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java", "diffHunk": "@@ -89,4 +133,39 @@ public static EntityManagerFactory getEntityManagerFactory(String modelPackageNa\n                 .map(Class::getName)\n                 .collect(Collectors.toList());\n     }\n+\n+    /**\n+     * Find classes with a particular annotation from dynamic compiler.\n+     * @param compiler An instance of ElideDynamicEntityCompiler.\n+     * @param annotationClass Annotation to search for.\n+     * @return Set of Classes matching the annotation.\n+     * @throws ClassNotFoundException\n+     */\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    public static List<String> findAnnotatedClasses(ElideDynamicEntityCompiler compiler, Class annotationClass)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57a7f2d7baa15219e3f815e0f2125b5ccd6c5c58"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTk3NTUyOnYy", "diffSide": "RIGHT", "path": "elide-standalone/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDowNzo0NVrOGTrfTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDowNzo0NVrOGTrfTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4ODY1Mg==", "bodyText": "Remove optional=true", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r423288652", "createdAt": "2020-05-11T20:07:45Z", "author": {"login": "aklish"}, "path": "elide-standalone/pom.xml", "diffHunk": "@@ -78,6 +83,12 @@\n             <artifactId>elide-async</artifactId>\n             <version>5.0.0-pr7-SNAPSHOT</version>\n         </dependency>\n+        <dependency>\n+            <groupId>com.yahoo.elide</groupId>\n+            <artifactId>elide-dynamic-config-helpers</artifactId>\n+            <version>5.0.0-pr7-SNAPSHOT</version>\n+            <optional>true</optional>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9e13c0fb35ba5853035d9b7ac7dd0b01e0f0c43"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjAwODk3OnYy", "diffSide": "RIGHT", "path": "elide-standalone/src/test/java/com/yahoo/elide/standalone/ElideStandaloneTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDoxNzo1N1rOGTrz5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDoxNzo1N1rOGTrz5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5MzkyNw==", "bodyText": "I'm confused by this test.  In all the other places, player stats is an aggregation model - not something you can create - but only something you can run analytic queries against.  I would expect the aggregation store test would look like a GET query against this model.", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r423293927", "createdAt": "2020-05-11T20:17:57Z", "author": {"login": "aklish"}, "path": "elide-standalone/src/test/java/com/yahoo/elide/standalone/ElideStandaloneTest.java", "diffHunk": "@@ -89,6 +104,30 @@ public void shutdown() throws Exception {\n         elide.stop();\n     }\n \n+    @Test\n+    public void testJsonAPIPlayerStats() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9e13c0fb35ba5853035d9b7ac7dd0b01e0f0c43"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjAxMTUxOnYy", "diffSide": "RIGHT", "path": "elide-standalone/src/test/java/com/yahoo/elide/standalone/ElideStandaloneTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDoxODo0N1rOGTr1iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDoxODo0N1rOGTr1iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5NDM0NQ==", "bodyText": "I don't understand why we are testing create here.  In fact, I would expect create to fail - not succeed.", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r423294345", "createdAt": "2020-05-11T20:18:47Z", "author": {"login": "aklish"}, "path": "elide-standalone/src/test/java/com/yahoo/elide/standalone/ElideStandaloneTest.java", "diffHunk": "@@ -139,29 +178,88 @@ public void testForbiddenJsonAPIPost() {\n     @Test\n     public void testMetricsServlet() throws Exception {\n         given()\n-                .when()\n-                .get(\"/stats/metrics\")\n-                .then()\n-                .statusCode(200)\n-                .body(\"meters\", hasKey(\"com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\"));\n+            .when()\n+            .get(\"/stats/metrics\")\n+            .then()\n+            .statusCode(200)\n+            .body(\"meters\", hasKey(\"com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\"));\n     }\n \n     @Test\n     public void testHealthCheckServlet() throws Exception {\n-            given()\n-                .when()\n-                .get(\"/stats/healthcheck\")\n-                .then()\n-                .statusCode(501); //Returns 'Not Implemented' if there are no Health Checks Registered\n+        given()\n+            .when()\n+            .get(\"/stats/healthcheck\")\n+            .then()\n+            .statusCode(501); //Returns 'Not Implemented' if there are no Health Checks Registered\n     }\n \n     @Test\n     public void testSwaggerEndpoint() throws Exception {\n         given()\n-                .when()\n-                .get(\"/swagger/doc/test\")\n-                .then()\n-                .statusCode(200);\n+            .when()\n+            .get(\"/swagger/doc/test\")\n+            .then()\n+            .statusCode(200);\n+    }\n+\n+    @Test\n+    public void testAggregationTableEndpoint() throws Exception {\n+        given()\n+           .when()\n+           .get(\"/api/v1/table\")\n+           .then()\n+           .statusCode(200);\n+    }\n+\n+    @Test\n+    public void testTimeDimensionEndpoint() throws Exception {\n+        given()\n+            .when()\n+            .get(\"/api/v1/timeDimension\")\n+            .then()\n+            .statusCode(200);\n+    }\n+\n+    @Test\n+    public void testPlayerEndpoint() throws Exception {\n+        given()\n+            .when()\n+            .get(\"/api/v1/Player\")\n+            .then()\n+            .statusCode(200);\n     }\n-}\n \n+    @Test\n+    public void testJsonApiGetPlayer() {\n+        //Prep with data load\n+        given()\n+            .contentType(JSONAPI_CONTENT_TYPE)\n+            .accept(JSONAPI_CONTENT_TYPE)\n+            .body(\n+                datum(\n+                    resource(\n+                        type(\"playerStats\"),\n+                        id(\"ready-player-2\"),\n+                        attributes(\n+                            attr(\"countryId\", \"1\"),\n+                            attr(\"score\", 100),\n+                            attr(\"createdOn\", \"2020-01-01T00:00Z\")\n+                        )\n+                    )\n+                )\n+            )\n+            .post(\"/api/v1/playerStats\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9e13c0fb35ba5853035d9b7ac7dd0b01e0f0c43"}, "originalPosition": 184}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjAxNTE2OnYy", "diffSide": "RIGHT", "path": "elide-standalone/src/test/java/com/yahoo/elide/standalone/ElideStandaloneTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDoxOTozOVrOGTr3sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDoxOTozOVrOGTr3sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5NDg5Ng==", "bodyText": "This test looks duplicated with the one earlier - and is listed as GET (even though it does a POST).  I'm not sure what we are trying to test here.", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r423294896", "createdAt": "2020-05-11T20:19:39Z", "author": {"login": "aklish"}, "path": "elide-standalone/src/test/java/com/yahoo/elide/standalone/ElideStandaloneTest.java", "diffHunk": "@@ -139,29 +178,88 @@ public void testForbiddenJsonAPIPost() {\n     @Test\n     public void testMetricsServlet() throws Exception {\n         given()\n-                .when()\n-                .get(\"/stats/metrics\")\n-                .then()\n-                .statusCode(200)\n-                .body(\"meters\", hasKey(\"com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\"));\n+            .when()\n+            .get(\"/stats/metrics\")\n+            .then()\n+            .statusCode(200)\n+            .body(\"meters\", hasKey(\"com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\"));\n     }\n \n     @Test\n     public void testHealthCheckServlet() throws Exception {\n-            given()\n-                .when()\n-                .get(\"/stats/healthcheck\")\n-                .then()\n-                .statusCode(501); //Returns 'Not Implemented' if there are no Health Checks Registered\n+        given()\n+            .when()\n+            .get(\"/stats/healthcheck\")\n+            .then()\n+            .statusCode(501); //Returns 'Not Implemented' if there are no Health Checks Registered\n     }\n \n     @Test\n     public void testSwaggerEndpoint() throws Exception {\n         given()\n-                .when()\n-                .get(\"/swagger/doc/test\")\n-                .then()\n-                .statusCode(200);\n+            .when()\n+            .get(\"/swagger/doc/test\")\n+            .then()\n+            .statusCode(200);\n+    }\n+\n+    @Test\n+    public void testAggregationTableEndpoint() throws Exception {\n+        given()\n+           .when()\n+           .get(\"/api/v1/table\")\n+           .then()\n+           .statusCode(200);\n+    }\n+\n+    @Test\n+    public void testTimeDimensionEndpoint() throws Exception {\n+        given()\n+            .when()\n+            .get(\"/api/v1/timeDimension\")\n+            .then()\n+            .statusCode(200);\n+    }\n+\n+    @Test\n+    public void testPlayerEndpoint() throws Exception {\n+        given()\n+            .when()\n+            .get(\"/api/v1/Player\")\n+            .then()\n+            .statusCode(200);\n     }\n-}\n \n+    @Test\n+    public void testJsonApiGetPlayer() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9e13c0fb35ba5853035d9b7ac7dd0b01e0f0c43"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjAxNjM3OnYy", "diffSide": "RIGHT", "path": "elide-standalone/src/test/resources/models/variables.hjson", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDoxOTo1OVrOGTr4bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDoxOTo1OVrOGTr4bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5NTA4Nw==", "bodyText": "Do we even need this file?", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r423295087", "createdAt": "2020-05-11T20:19:59Z", "author": {"login": "aklish"}, "path": "elide-standalone/src/test/resources/models/variables.hjson", "diffHunk": "@@ -0,0 +1,5 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9e13c0fb35ba5853035d9b7ac7dd0b01e0f0c43"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjAyMDM4OnYy", "diffSide": "RIGHT", "path": "elide-standalone/src/test/resources/models/security.hjson", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDoyMToxM1rOGTr68w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDoyMToxM1rOGTr68w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5NTczMQ==", "bodyText": "We should only include the minimum config needed to support the tests.  Given that we don't test security, we can exclude this file.", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r423295731", "createdAt": "2020-05-11T20:21:13Z", "author": {"login": "aklish"}, "path": "elide-standalone/src/test/resources/models/security.hjson", "diffHunk": "@@ -0,0 +1,18 @@\n+{\n+    roles : [\n+        admin", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9e13c0fb35ba5853035d9b7ac7dd0b01e0f0c43"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjAyNDg0OnYy", "diffSide": "RIGHT", "path": "elide-standalone/src/test/java/com/yahoo/elide/standalone/models/PlayerStats.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDoyMjo0NFrOGTr95Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDoyMjo0NFrOGTr95Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5NjQ4NQ==", "bodyText": "Instead of java config - can we do an HJSON config here?", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r423296485", "createdAt": "2020-05-11T20:22:44Z", "author": {"login": "aklish"}, "path": "elide-standalone/src/test/java/com/yahoo/elide/standalone/models/PlayerStats.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+\n+package com.yahoo.elide.standalone.models;\n+\n+import com.yahoo.elide.annotation.DeletePermission;\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.annotation.UpdatePermission;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+\n+import java.util.Date;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Include(rootLevel = true , type = \"playerStats\")\n+@Cardinality(size = CardinalitySize.LARGE)\n+@EqualsAndHashCode\n+@ToString\n+@Data\n+@Entity\n+@ReadPermission(expression = \"Prefab.Role.All\")\n+@UpdatePermission(expression = \"Prefab.Role.None\")\n+@DeletePermission(expression = \"Prefab.Role.None\")\n+public class PlayerStats {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9e13c0fb35ba5853035d9b7ac7dd0b01e0f0c43"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjAyNzcyOnYy", "diffSide": "RIGHT", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDoyMzozOVrOGTr_xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDoyMzozOVrOGTr_xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5Njk2Nw==", "bodyText": "Use File.Separator - not \"/\"", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r423296967", "createdAt": "2020-05-11T20:23:39Z", "author": {"login": "aklish"}, "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "diffHunk": "@@ -167,7 +203,24 @@ default boolean enableJSONAPI() {\n     default boolean enableGraphQL() {\n         return true;\n     }\n-    \n+\n+    /**\n+     * Enable the support for Dynamic Model Configuration. If false, the feature will be disabled.\n+     *\n+     * @return Default: False\n+     */\n+    default boolean enableDynamicModelConfig() {\n+        return false;\n+    }\n+\n+    /**\n+     * Base path to Hjson dynamic model configurations.\n+     * @return Default: /models/\n+     */\n+    default String getDynamicConfigPath() {\n+        return \"/models/\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9e13c0fb35ba5853035d9b7ac7dd0b01e0f0c43"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjAzMTI5OnYy", "diffSide": "RIGHT", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDoyNDo1MFrOGTsCMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDoyNDo1MFrOGTsCMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5NzU4NQ==", "bodyText": "What Exception are we expecting here?  In general, Exception should almost never be thrown or caught (except in tests and uncaught exception handlers).", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r423297585", "createdAt": "2020-05-11T20:24:50Z", "author": {"login": "aklish"}, "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "diffHunk": "@@ -60,14 +68,9 @@\n      *\n      * @param injector Service locator for web service for dependency injection.\n      * @return Configured ElideSettings object.\n+     * @throws Exception Exception thrown.\n      */\n-    default ElideSettings getElideSettings(ServiceLocator injector) {\n-        EntityManagerFactory entityManagerFactory = Util.getEntityManagerFactory(getModelPackageName(),\n-                enableAsync(), getDatabaseProperties());\n-        DataStore dataStore = new JpaDataStore(\n-                () -> { return entityManagerFactory.createEntityManager(); },\n-                (em -> { return new NonJtaTransaction(em); }));\n-\n+    default ElideSettings getElideSettings(ServiceLocator injector) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9e13c0fb35ba5853035d9b7ac7dd0b01e0f0c43"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjA0NDA5OnYy", "diffSide": "RIGHT", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDoyODoyOFrOGTsKOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDoyODoyOFrOGTsKOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5OTY0MQ==", "bodyText": "The initialization of standalone needs to be broken up into different pieces - similar to the Elide spring beans.\nThere should be a configuration for getting the DataStore.  This function should not be creating and managing stores - but just setting up the ElideSettings object.  Let's break this apart so it is more extensible by someone - and simpler to grock.", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r423299641", "createdAt": "2020-05-11T20:28:28Z", "author": {"login": "aklish"}, "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "diffHunk": "@@ -83,6 +86,39 @@ public void inject(Object entity) {\n \n         dictionary.scanForSecurityChecks();\n \n+        EntityManagerFactory entityManagerFactory = Util.getEntityManagerFactory(getModelPackageName(),\n+                enableAsync(), enableDynamicModelConfig(), getDynamicConfigPath(), getDatabaseProperties());\n+\n+        MetaDataStore metaDataStore = null;\n+\n+        if (enableDynamicModelConfig()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9e13c0fb35ba5853035d9b7ac7dd0b01e0f0c43"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjA1MDUyOnYy", "diffSide": "RIGHT", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDozMDoxOVrOGTsOPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDozMDoxOVrOGTsOPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMwMDY3MQ==", "bodyText": "We should avoid static variables like this - They are hard to test.  This should be created during initialization and passed into constructors as needed.", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r423300671", "createdAt": "2020-05-11T20:30:19Z", "author": {"login": "aklish"}, "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java", "diffHunk": "@@ -24,8 +32,10 @@\n  */\n public class Util {\n \n-    public static EntityManagerFactory getEntityManagerFactory(String modelPackageName, boolean includeAsyncModel, \n-            Properties options) {\n+    public static ElideDynamicEntityCompiler dynamicEntityCompiler;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9e13c0fb35ba5853035d9b7ac7dd0b01e0f0c43"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjA1NDQ5OnYy", "diffSide": "RIGHT", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDozMToyNlrOGTsQ2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDozMToyNlrOGTsQ2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMwMTMzOQ==", "bodyText": "Remove static initialization functions - this suggests we should be using a constructor somewhere else instead.", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r423301339", "createdAt": "2020-05-11T20:31:26Z", "author": {"login": "aklish"}, "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java", "diffHunk": "@@ -51,30 +61,66 @@ public static EntityManagerFactory getEntityManagerFactory(String modelPackageNa\n             options.put(\"javax.persistence.jdbc.url\", \"jdbc:mysql://localhost/elide?serverTimezone=UTC\");\n             options.put(\"javax.persistence.jdbc.user\", \"elide\");\n             options.put(\"javax.persistence.jdbc.password\", \"elide123\");\n+\n+            //Bind entity classes from classpath to Persistence Unit\n+            ArrayList<Class> loadedClasses = new ArrayList<>();\n+            loadedClasses.addAll(ClassScanner.getAnnotatedClasses(Entity.class));\n+\n+            options.put(AvailableSettings.LOADED_CLASSES, loadedClasses);\n         }\n \n-        PersistenceUnitInfo persistenceUnitInfo = new PersistenceUnitInfoImpl(\"elide-stand-alone\",\n-                combineModelEntities(modelPackageName, includeAsyncModel), options);\n+        PersistenceUnitInfo persistenceUnitInfo = null;\n+\n+        if (includeDynamicModel) {\n+            initDynamicConfig(dynamicConfigPath);\n+            Collection<ClassLoader> classLoaders = new ArrayList<>();\n+            classLoaders.add(dynamicEntityCompiler.getClassLoader());\n+            options.put(AvailableSettings.CLASSLOADERS, classLoaders);\n \n-        return new EntityManagerFactoryBuilderImpl(\n-                new PersistenceUnitInfoDescriptor(persistenceUnitInfo), new HashMap<>())\n-                .build();\n+            persistenceUnitInfo = new PersistenceUnitInfoImpl(\"elide-stand-alone\",\n+                    combineModelEntities(dynamicEntityCompiler, modelPackageName,\n+                            includeAsyncModel, includeDynamicModel),\n+                    options, dynamicEntityCompiler.getClassLoader());\n+\n+            return new EntityManagerFactoryBuilderImpl(\n+                    new PersistenceUnitInfoDescriptor(persistenceUnitInfo), new HashMap<>(),\n+                    dynamicEntityCompiler.getClassLoader())\n+                    .build();\n+        } else {\n+            persistenceUnitInfo = new PersistenceUnitInfoImpl(\"elide-stand-alone\",\n+                    combineModelEntities(dynamicEntityCompiler, modelPackageName,\n+                            includeAsyncModel, includeDynamicModel),\n+                    options);\n+            return new EntityManagerFactoryBuilderImpl(\n+                    new PersistenceUnitInfoDescriptor(persistenceUnitInfo), new HashMap<>())\n+                    .build();\n+        }\n+    }\n+\n+    public static void initDynamicConfig(String dynamicConfigPath) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9e13c0fb35ba5853035d9b7ac7dd0b01e0f0c43"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjE3NzMyOnYy", "diffSide": "RIGHT", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMTowOTo1MVrOGTtfhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMTowOTo1MVrOGTtfhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyMTQ3Nw==", "bodyText": "Maybe this can be a non-static method on the compiler (to return the list of classes that it manages).", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r423321477", "createdAt": "2020-05-11T21:09:51Z", "author": {"login": "aklish"}, "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java", "diffHunk": "@@ -89,4 +135,39 @@ public static EntityManagerFactory getEntityManagerFactory(String modelPackageNa\n                 .map(Class::getName)\n                 .collect(Collectors.toList());\n     }\n+\n+    /**\n+     * Find classes with a particular annotation from dynamic compiler.\n+     * @param compiler An instance of ElideDynamicEntityCompiler.\n+     * @param annotationClass Annotation to search for.\n+     * @return Set of Classes matching the annotation.\n+     * @throws ClassNotFoundException ClassNameNotFound in compiler\n+     */\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    public static List<String> findAnnotatedClassNames(ElideDynamicEntityCompiler compiler, Class annotationClass)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9e13c0fb35ba5853035d9b7ac7dd0b01e0f0c43"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjE4Njg0OnYy", "diffSide": "RIGHT", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMToxMjo1N1rOGTtlig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMToxMjo1N1rOGTtlig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyMzAxOA==", "bodyText": "Instead of includingDynamicModel - maybe have an Optional<DynamicEntityCompiler>", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r423323018", "createdAt": "2020-05-11T21:12:57Z", "author": {"login": "aklish"}, "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java", "diffHunk": "@@ -24,8 +32,10 @@\n  */\n public class Util {\n \n-    public static EntityManagerFactory getEntityManagerFactory(String modelPackageName, boolean includeAsyncModel, \n-            Properties options) {\n+    public static ElideDynamicEntityCompiler dynamicEntityCompiler;\n+\n+    public static EntityManagerFactory getEntityManagerFactory(String modelPackageName, boolean includeAsyncModel,\n+            boolean includeDynamicModel, String dynamicConfigPath, Properties options) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9e13c0fb35ba5853035d9b7ac7dd0b01e0f0c43"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjE5NDI3OnYy", "diffSide": "RIGHT", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMToxNToxNVrOGTtqBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMToxNToxNVrOGTtqBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyNDE2Ng==", "bodyText": "Instead of creating the PersistentUnitInfoImpl in the if/else - this can be simplified by just setting the classloader and list of packages to include in the if/else - and then using those to create the PersistentUnitInfo outside the control block.", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r423324166", "createdAt": "2020-05-11T21:15:15Z", "author": {"login": "aklish"}, "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java", "diffHunk": "@@ -51,30 +61,66 @@ public static EntityManagerFactory getEntityManagerFactory(String modelPackageNa\n             options.put(\"javax.persistence.jdbc.url\", \"jdbc:mysql://localhost/elide?serverTimezone=UTC\");\n             options.put(\"javax.persistence.jdbc.user\", \"elide\");\n             options.put(\"javax.persistence.jdbc.password\", \"elide123\");\n+\n+            //Bind entity classes from classpath to Persistence Unit\n+            ArrayList<Class> loadedClasses = new ArrayList<>();\n+            loadedClasses.addAll(ClassScanner.getAnnotatedClasses(Entity.class));\n+\n+            options.put(AvailableSettings.LOADED_CLASSES, loadedClasses);\n         }\n \n-        PersistenceUnitInfo persistenceUnitInfo = new PersistenceUnitInfoImpl(\"elide-stand-alone\",\n-                combineModelEntities(modelPackageName, includeAsyncModel), options);\n+        PersistenceUnitInfo persistenceUnitInfo = null;\n+\n+        if (includeDynamicModel) {\n+            initDynamicConfig(dynamicConfigPath);\n+            Collection<ClassLoader> classLoaders = new ArrayList<>();\n+            classLoaders.add(dynamicEntityCompiler.getClassLoader());\n+            options.put(AvailableSettings.CLASSLOADERS, classLoaders);\n \n-        return new EntityManagerFactoryBuilderImpl(\n-                new PersistenceUnitInfoDescriptor(persistenceUnitInfo), new HashMap<>())\n-                .build();\n+            persistenceUnitInfo = new PersistenceUnitInfoImpl(\"elide-stand-alone\",\n+                    combineModelEntities(dynamicEntityCompiler, modelPackageName,\n+                            includeAsyncModel, includeDynamicModel),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9e13c0fb35ba5853035d9b7ac7dd0b01e0f0c43"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjE5ODc4OnYy", "diffSide": "RIGHT", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMToxNjoyNlrOGTtsiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMToxNjoyNlrOGTtsiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyNDgwOA==", "bodyText": "Elide 5 now interprets the version set in the Swagger document.  If the non-elide models don't have this version - they vanish.\nDon't set a version.", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r423324808", "createdAt": "2020-05-11T21:16:26Z", "author": {"login": "aklish"}, "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java", "diffHunk": "@@ -173,4 +204,15 @@ public static HealthCheckRegistry getHealthCheckRegistry() {\n \n         return healthCheckRegistry;\n     }\n+\n+    private Swagger setupSwagger(EntityDictionary dictionary, String path, String title) {\n+        Info info = new Info().title(title).version(\"1.0\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9e13c0fb35ba5853035d9b7ac7dd0b01e0f0c43"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjIwMjY4OnYy", "diffSide": "RIGHT", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMToxNzo0N1rOGTtvMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMToxNzo0N1rOGTtvMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyNTQ5MQ==", "bodyText": "We can at least log the class name since we are swallowing the exception.", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r423325491", "createdAt": "2020-05-11T21:17:47Z", "author": {"login": "aklish"}, "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java", "diffHunk": "@@ -110,27 +134,34 @@ protected void configure() {\n \n         // Bind swaggers to given endpoint\n         register(new org.glassfish.hk2.utilities.binding.AbstractBinder() {\n+            @SuppressWarnings(\"rawtypes\")\n             @Override\n             protected void configure() {\n                 Map<String, Swagger> swaggerDocs = settings.enableSwagger();\n                 if (!swaggerDocs.isEmpty()) {\n                     // Include the async models in swagger docs\n-                    if(settings.enableAsync()) {\n-                        EntityDictionary dictionary = new EntityDictionary(new HashMap());\n+                    if (settings.enableAsync()) {\n+                        EntityDictionary dictionary = new EntityDictionary(new HashMap<>());\n                         dictionary.bindEntity(AsyncQuery.class);\n                         dictionary.bindEntity(AsyncQueryResult.class);\n-                         \n-                        Info info = new Info().title(\"Async Service\").version(\"1.0\");\n-\n-                        SwaggerBuilder builder = new SwaggerBuilder(dictionary, info);\n-                        \n-                        //Default value of getJsonApiPathSpec() ends with /* at the end. need to remove.\n-                        String asyncBasePath = settings.getJsonApiPathSpec().replaceAll(\"/\\\\*\", \"\");\n-\n-                        Swagger swagger = builder.build().basePath(asyncBasePath);\n-\n+                        Swagger swagger = setupSwagger(dictionary, settings.getJsonApiPathSpec(), \"Async Service\");\n                         swaggerDocs.put(\"async\", swagger);\n                     }\n+                    // bind dynamic models\n+                    if (settings.enableDynamicModelConfig()) {\n+                        EntityDictionary dictionary = new EntityDictionary(new HashMap<>());\n+                        try {\n+                            for (Class entity : Util.dynamicEntityCompiler.findAnnotatedClasses(Entity.class)) {\n+                                dictionary.bindEntity(entity);\n+                            }\n+                        } catch (ClassNotFoundException e) {\n+                            log.error(\"error while binding class\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9e13c0fb35ba5853035d9b7ac7dd0b01e0f0c43"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjIwODY4OnYy", "diffSide": "RIGHT", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMToxOTozNlrOGTtyzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMToxOTozNlrOGTtyzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyNjQxNQ==", "bodyText": "The swagger builder doesn't need a separate dictionary to only build a subset of models.  YOu can provide it the list of classes to load.  That's the recommended approach.  Let's follow that.", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r423326415", "createdAt": "2020-05-11T21:19:36Z", "author": {"login": "aklish"}, "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java", "diffHunk": "@@ -110,27 +134,34 @@ protected void configure() {\n \n         // Bind swaggers to given endpoint\n         register(new org.glassfish.hk2.utilities.binding.AbstractBinder() {\n+            @SuppressWarnings(\"rawtypes\")\n             @Override\n             protected void configure() {\n                 Map<String, Swagger> swaggerDocs = settings.enableSwagger();\n                 if (!swaggerDocs.isEmpty()) {\n                     // Include the async models in swagger docs\n-                    if(settings.enableAsync()) {\n-                        EntityDictionary dictionary = new EntityDictionary(new HashMap());\n+                    if (settings.enableAsync()) {\n+                        EntityDictionary dictionary = new EntityDictionary(new HashMap<>());\n                         dictionary.bindEntity(AsyncQuery.class);\n                         dictionary.bindEntity(AsyncQueryResult.class);\n-                         \n-                        Info info = new Info().title(\"Async Service\").version(\"1.0\");\n-\n-                        SwaggerBuilder builder = new SwaggerBuilder(dictionary, info);\n-                        \n-                        //Default value of getJsonApiPathSpec() ends with /* at the end. need to remove.\n-                        String asyncBasePath = settings.getJsonApiPathSpec().replaceAll(\"/\\\\*\", \"\");\n-\n-                        Swagger swagger = builder.build().basePath(asyncBasePath);\n-\n+                        Swagger swagger = setupSwagger(dictionary, settings.getJsonApiPathSpec(), \"Async Service\");\n                         swaggerDocs.put(\"async\", swagger);\n                     }\n+                    // bind dynamic models\n+                    if (settings.enableDynamicModelConfig()) {\n+                        EntityDictionary dictionary = new EntityDictionary(new HashMap<>());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9e13c0fb35ba5853035d9b7ac7dd0b01e0f0c43"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjIxMTgyOnYy", "diffSide": "RIGHT", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMToyMDozNFrOGTt0vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMzoxNDo0NFrOGT0jaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyNjkwOA==", "bodyText": "What exception are we catching here an why?", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r423326908", "createdAt": "2020-05-11T21:20:34Z", "author": {"login": "aklish"}, "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java", "diffHunk": "@@ -51,30 +53,52 @@\n     private static HealthCheckRegistry healthCheckRegistry = null;\n \n     /**\n-     * Constructor\n+     * Constructor.\n      *\n-     * @param injector Injection instance for application\n+     * @param injector Injection instance for application.\n+     * @param servletContext servlet context instance.\n      */\n     @Inject\n     public ElideResourceConfig(ServiceLocator injector, @Context ServletContext servletContext) {\n         this.injector = injector;\n \n         settings = (ElideStandaloneSettings) servletContext.getAttribute(ELIDE_STANDALONE_SETTINGS_ATTR);\n \n+        if (settings.enableDynamicModelConfig()) {\n+            try {\n+                Util.initDynamicConfig(settings.getDynamicConfigPath());\n+            } catch (Exception e) {\n+                log.error(\"error in resource config\" + e.getMessage());\n+                throw new IllegalStateException(e);\n+            }\n+        }\n+\n         // Bind things that should be injectable to the Settings class\n         register(new AbstractBinder() {\n             @Override\n             protected void configure() {\n-                bind(Util.combineModelEntities(settings.getModelPackageName(), settings.enableAsync())).to(Set.class)\n-                        .named(\"elideAllModels\");\n+                try {\n+                    bind(Util.combineModelEntities(Util.dynamicEntityCompiler,\n+                            settings.getModelPackageName(), settings.enableAsync(),\n+                            settings.enableDynamicModelConfig())).to(Set.class).named(\"elideAllModels\");\n+                } catch (ClassNotFoundException e) {\n+                    log.error(\"error in resource config\" + e.getMessage());\n+                    throw new IllegalStateException(e);\n+                }\n             }\n         });\n \n         // Bind to injector\n         register(new AbstractBinder() {\n             @Override\n             protected void configure() {\n-                ElideSettings elideSettings = settings.getElideSettings(injector);\n+                ElideSettings elideSettings = null;\n+                try {\n+                    elideSettings = settings.getElideSettings(injector);\n+                } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9e13c0fb35ba5853035d9b7ac7dd0b01e0f0c43"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQzNzE2Mw==", "bodyText": "The DynamicEntityompiler compile method throws an Exception so this was catching and throwing that. Have updated DynamicCompiler to catch it and throw a run time exception now instead of compile time.", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r423437163", "createdAt": "2020-05-12T03:14:44Z", "author": {"login": "moizarafat"}, "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java", "diffHunk": "@@ -51,30 +53,52 @@\n     private static HealthCheckRegistry healthCheckRegistry = null;\n \n     /**\n-     * Constructor\n+     * Constructor.\n      *\n-     * @param injector Injection instance for application\n+     * @param injector Injection instance for application.\n+     * @param servletContext servlet context instance.\n      */\n     @Inject\n     public ElideResourceConfig(ServiceLocator injector, @Context ServletContext servletContext) {\n         this.injector = injector;\n \n         settings = (ElideStandaloneSettings) servletContext.getAttribute(ELIDE_STANDALONE_SETTINGS_ATTR);\n \n+        if (settings.enableDynamicModelConfig()) {\n+            try {\n+                Util.initDynamicConfig(settings.getDynamicConfigPath());\n+            } catch (Exception e) {\n+                log.error(\"error in resource config\" + e.getMessage());\n+                throw new IllegalStateException(e);\n+            }\n+        }\n+\n         // Bind things that should be injectable to the Settings class\n         register(new AbstractBinder() {\n             @Override\n             protected void configure() {\n-                bind(Util.combineModelEntities(settings.getModelPackageName(), settings.enableAsync())).to(Set.class)\n-                        .named(\"elideAllModels\");\n+                try {\n+                    bind(Util.combineModelEntities(Util.dynamicEntityCompiler,\n+                            settings.getModelPackageName(), settings.enableAsync(),\n+                            settings.enableDynamicModelConfig())).to(Set.class).named(\"elideAllModels\");\n+                } catch (ClassNotFoundException e) {\n+                    log.error(\"error in resource config\" + e.getMessage());\n+                    throw new IllegalStateException(e);\n+                }\n             }\n         });\n \n         // Bind to injector\n         register(new AbstractBinder() {\n             @Override\n             protected void configure() {\n-                ElideSettings elideSettings = settings.getElideSettings(injector);\n+                ElideSettings elideSettings = null;\n+                try {\n+                    elideSettings = settings.getElideSettings(injector);\n+                } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyNjkwOA=="}, "originalCommit": {"oid": "f9e13c0fb35ba5853035d9b7ac7dd0b01e0f0c43"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjIxNDgyOnYy", "diffSide": "RIGHT", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMToyMTozOFrOGTt2rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMzoxNTowM1rOGT0jzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyNzQwNg==", "bodyText": "What exception are we catching here and why.  We need to be very careful about catching exception - in general - not advised.", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r423327406", "createdAt": "2020-05-11T21:21:38Z", "author": {"login": "aklish"}, "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java", "diffHunk": "@@ -51,30 +53,52 @@\n     private static HealthCheckRegistry healthCheckRegistry = null;\n \n     /**\n-     * Constructor\n+     * Constructor.\n      *\n-     * @param injector Injection instance for application\n+     * @param injector Injection instance for application.\n+     * @param servletContext servlet context instance.\n      */\n     @Inject\n     public ElideResourceConfig(ServiceLocator injector, @Context ServletContext servletContext) {\n         this.injector = injector;\n \n         settings = (ElideStandaloneSettings) servletContext.getAttribute(ELIDE_STANDALONE_SETTINGS_ATTR);\n \n+        if (settings.enableDynamicModelConfig()) {\n+            try {\n+                Util.initDynamicConfig(settings.getDynamicConfigPath());\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9e13c0fb35ba5853035d9b7ac7dd0b01e0f0c43"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQzNzI2Mw==", "bodyText": "The DynamicEntityompiler compile method throws an Exception so this was catching and throwing that. Have updated DynamicCompiler to catch it and throw a run time exception now instead of compile time.", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r423437263", "createdAt": "2020-05-12T03:15:03Z", "author": {"login": "moizarafat"}, "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java", "diffHunk": "@@ -51,30 +53,52 @@\n     private static HealthCheckRegistry healthCheckRegistry = null;\n \n     /**\n-     * Constructor\n+     * Constructor.\n      *\n-     * @param injector Injection instance for application\n+     * @param injector Injection instance for application.\n+     * @param servletContext servlet context instance.\n      */\n     @Inject\n     public ElideResourceConfig(ServiceLocator injector, @Context ServletContext servletContext) {\n         this.injector = injector;\n \n         settings = (ElideStandaloneSettings) servletContext.getAttribute(ELIDE_STANDALONE_SETTINGS_ATTR);\n \n+        if (settings.enableDynamicModelConfig()) {\n+            try {\n+                Util.initDynamicConfig(settings.getDynamicConfigPath());\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyNzQwNg=="}, "originalCommit": {"oid": "f9e13c0fb35ba5853035d9b7ac7dd0b01e0f0c43"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTA5MjM5OnYy", "diffSide": "RIGHT", "path": "elide-standalone/src/test/resources/models/tables/PostView.hjson", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMDoxMzo0NVrOGZBR8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMDoxMzo0NVrOGZBR8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg4ODU2Mw==", "bodyText": "Redundant readAccess.", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r428888563", "createdAt": "2020-05-21T20:13:45Z", "author": {"login": "aklish"}, "path": "elide-standalone/src/test/resources/models/tables/PostView.hjson", "diffHunk": "@@ -0,0 +1,20 @@\n+{\n+    tables: [{\n+        name: PostView\n+        table: Post\n+        description:\n+        '''\n+        A long description\n+        '''\n+        cardinality : large\n+        readAccess : Prefab.Role.All\n+        dimensions : [\n+            {\n+                name : content\n+                type : TEXT\n+                readAccess : Prefab.Role.All", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9ebd6d31c02955083273b0177eef4accc0c208f"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTA5ODg2OnYy", "diffSide": "RIGHT", "path": "elide-standalone/src/test/java/example/ElideStandaloneTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMDoxNTo1NVrOGZBWHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMDoxNTo1NVrOGZBWHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg4OTYzMA==", "bodyText": "You can combine this test with the one below in a single request (test the body and the status code).", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r428889630", "createdAt": "2020-05-21T20:15:55Z", "author": {"login": "aklish"}, "path": "elide-standalone/src/test/java/example/ElideStandaloneTest.java", "diffHunk": "@@ -159,6 +162,20 @@ public void testJsonAPIPost() {\n             .then()\n             .statusCode(HttpStatus.SC_CREATED)\n             .extract().body().asString();\n+\n+        // Test the Dynamic Generated Analytical Model is accessible\n+        given()\n+            .when()\n+            .get(\"/api/v1/postView\")\n+            .then()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9ebd6d31c02955083273b0177eef4accc0c208f"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTEyNDQyOnYy", "diffSide": "RIGHT", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMDoyNDozNlrOGZBmpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMDoyNDozNlrOGZBmpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg5Mzg2Mw==", "bodyText": "This should take the MetadataStore instead of the SQLQueryEngine as an argument.", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r428893863", "createdAt": "2020-05-21T20:24:36Z", "author": {"login": "aklish"}, "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "diffHunk": "@@ -286,11 +339,150 @@ default void updateServletContextHandler(ServletContextHandler servletContextHan\n     }\n \n     /**\n-     * Gets the audit logger for elide\n+     * Gets the audit logger for elide.\n      *\n      * @return Default: Slf4jLogger\n      */\n     default AuditLogger getAuditLogger() {\n         return new Slf4jLogger();\n     }\n+\n+    /**\n+     * Gets the dynamic compiler for elide.\n+     *\n+     * @return Optional ElideDynamicEntityCompiler\n+     */\n+    default Optional<ElideDynamicEntityCompiler> getDynamicCompiler() {\n+        ElideDynamicEntityCompiler dynamicEntityCompiler = null;\n+\n+        if (enableDynamicModelConfig()) {\n+            try {\n+                dynamicEntityCompiler = new ElideDynamicEntityCompiler(getDynamicConfigPath());\n+            } catch (Exception e) { // thrown by in memory compiler\n+                throw new IllegalStateException(e);\n+            }\n+        }\n+\n+        return Optional.ofNullable(dynamicEntityCompiler);\n+    }\n+\n+    /**\n+     * Gets the DataStore for elide.\n+     * @param queryEngine query engine object.\n+     * @param aggregationDataStore AggregationDataStore object.\n+     * @param entityManagerFactory EntityManagerFactory object.\n+     * @return EntityDictionary object initialized.\n+     */\n+    default DataStore getDataStore(SQLQueryEngine queryEngine, AggregationDataStore aggregationDataStore,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9ebd6d31c02955083273b0177eef4accc0c208f"}, "originalPosition": 241}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTEzNDg1OnYy", "diffSide": "RIGHT", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMDoyNzo0M1rOGZBtdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMDoyNzo0M1rOGZBtdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg5NTYwNw==", "bodyText": "INstead of binding this to the SQLQueryEngine - can we just bind it to QueryEngine?", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r428895607", "createdAt": "2020-05-21T20:27:43Z", "author": {"login": "aklish"}, "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "diffHunk": "@@ -286,11 +339,150 @@ default void updateServletContextHandler(ServletContextHandler servletContextHan\n     }\n \n     /**\n-     * Gets the audit logger for elide\n+     * Gets the audit logger for elide.\n      *\n      * @return Default: Slf4jLogger\n      */\n     default AuditLogger getAuditLogger() {\n         return new Slf4jLogger();\n     }\n+\n+    /**\n+     * Gets the dynamic compiler for elide.\n+     *\n+     * @return Optional ElideDynamicEntityCompiler\n+     */\n+    default Optional<ElideDynamicEntityCompiler> getDynamicCompiler() {\n+        ElideDynamicEntityCompiler dynamicEntityCompiler = null;\n+\n+        if (enableDynamicModelConfig()) {\n+            try {\n+                dynamicEntityCompiler = new ElideDynamicEntityCompiler(getDynamicConfigPath());\n+            } catch (Exception e) { // thrown by in memory compiler\n+                throw new IllegalStateException(e);\n+            }\n+        }\n+\n+        return Optional.ofNullable(dynamicEntityCompiler);\n+    }\n+\n+    /**\n+     * Gets the DataStore for elide.\n+     * @param queryEngine query engine object.\n+     * @param aggregationDataStore AggregationDataStore object.\n+     * @param entityManagerFactory EntityManagerFactory object.\n+     * @return EntityDictionary object initialized.\n+     */\n+    default DataStore getDataStore(SQLQueryEngine queryEngine, AggregationDataStore aggregationDataStore,\n+            EntityManagerFactory entityManagerFactory) {\n+\n+        DataStore jpaDataStore = new JpaDataStore(\n+                () -> { return entityManagerFactory.createEntityManager(); },\n+                (em -> { return new NonJtaTransaction(em); }));\n+\n+        DataStore dataStore = new MultiplexManager(jpaDataStore, queryEngine.getMetaDataStore(), aggregationDataStore);\n+\n+        return dataStore;\n+    }\n+\n+    /**\n+     * Gets the AggregationDataStore for elide.\n+     * @param queryEngine query engine object.\n+     * @param optionalCompiler optional dynamic compiler object.\n+     * @return AggregationDataStore object initialized.\n+     */\n+    default AggregationDataStore getAggregationDataStore(SQLQueryEngine queryEngine,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9ebd6d31c02955083273b0177eef4accc0c208f"}, "originalPosition": 259}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTE1MDA0OnYy", "diffSide": "RIGHT", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMDozMjo0MlrOGZB3Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMDozMjo0MlrOGZB3Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg5ODA5MQ==", "bodyText": "You shouldn't have to call settings.getSQLQueryEngine twice here.", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r428898091", "createdAt": "2020-05-21T20:32:42Z", "author": {"login": "aklish"}, "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java", "diffHunk": "@@ -58,47 +59,62 @@\n     private static HealthCheckRegistry healthCheckRegistry = null;\n \n     /**\n-     * Constructor\n+     * Constructor.\n      *\n-     * @param injector Injection instance for application\n+     * @param injector Injection instance for application.\n+     * @param servletContext servlet context instance.\n      */\n     @Inject\n     public ElideResourceConfig(ServiceLocator injector, @Context ServletContext servletContext) {\n         this.injector = injector;\n \n         settings = (ElideStandaloneSettings) servletContext.getAttribute(ELIDE_STANDALONE_SETTINGS_ATTR);\n \n+        Optional<ElideDynamicEntityCompiler> optionalCompiler = settings.getDynamicCompiler();\n+\n         // Bind things that should be injectable to the Settings class\n         register(new AbstractBinder() {\n             @Override\n             protected void configure() {\n-                bind(Util.combineModelEntities(settings.getModelPackageName(), settings.enableAsync())).to(Set.class)\n-                        .named(\"elideAllModels\");\n+                bind(Util.combineModelEntities(optionalCompiler, settings.getModelPackageName(),\n+                        settings.enableAsync())).to(Set.class).named(\"elideAllModels\");\n             }\n         });\n \n         // Bind to injector\n         register(new AbstractBinder() {\n             @Override\n             protected void configure() {\n-                ElideSettings elideSettings = settings.getElideSettings(injector);\n+                EntityManagerFactory entityManagerFactory = Util.getEntityManagerFactory(settings.getModelPackageName(),\n+                        settings.enableAsync(), optionalCompiler, settings.getDatabaseProperties());\n+\n+                EntityDictionary dictionary = settings.getEntityDictionary(injector, optionalCompiler);\n+\n+                MetaDataStore metaDataStore = settings.getMetaDataStore(optionalCompiler);\n+\n+                SQLQueryEngine queryEngine = settings.getSQLQueryEngine(metaDataStore, entityManagerFactory);\n+\n+                DataStore dataStore = settings.getDataStore(\n+                        settings.getSQLQueryEngine(metaDataStore, entityManagerFactory),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9ebd6d31c02955083273b0177eef4accc0c208f"}, "originalPosition": 94}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1018, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}