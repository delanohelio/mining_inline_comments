{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0Mzc1NTAw", "number": 1239, "title": "ColumnProjection Refactor", "bodyText": "Try to come out with a solution to dynamically generate expression for column projections.\nDescription\nUnify the concepts of MetricFunctionInvocation and ColumnProjection.\nHow Has This Been Tested?\nTests passed.\nScreenshots (if appropriate):\nLicense\nI confirm that this contribution is made under an Apache 2.0 license and that I have the authority necessary to make this contribution on behalf of its copyright owner.", "createdAt": "2020-03-26T19:30:24Z", "url": "https://github.com/yahoo/elide/pull/1239", "merged": true, "mergeCommit": {"oid": "83f026e11e4a18d0820748e6687d17c909ac8c5e"}, "closed": true, "closedAt": "2020-04-15T16:42:39Z", "author": {"login": "hellohanchen"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcRhPKAgH2gAyMzk0Mzc1NTAwOjNkYmI1NTU5OGNiMTNmMDE4Y2VjYWE0NTdiZmFmNGZmMzQ4ZGNmMzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcX64dPAFqTM5Mzk1MDU1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3dbb55598cb13f018cecaa457bfaf4ff348dcf31", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/3dbb55598cb13f018cecaa457bfaf4ff348dcf31", "committedDate": "2020-03-26T19:26:13Z", "message": "unify projections"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0df1d658611d8b3049bd82b2a79bb88f7ff14a46", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/0df1d658611d8b3049bd82b2a79bb88f7ff14a46", "committedDate": "2020-03-26T19:39:59Z", "message": "remove getFunction()"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyMzcyMzI4", "url": "https://github.com/yahoo/elide/pull/1239#pullrequestreview-382372328", "createdAt": "2020-03-26T20:03:31Z", "commit": {"oid": "0df1d658611d8b3049bd82b2a79bb88f7ff14a46"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMDowMzozMlrOF8YRmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMjoxODoxMVrOF8ciWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg1NjYwMQ==", "bodyText": "return this instead?  DO we need this function?", "url": "https://github.com/yahoo/elide/pull/1239#discussion_r398856601", "createdAt": "2020-03-26T20:03:32Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/query/TimeDimensionProjection.java", "diffHunk": "@@ -55,16 +47,17 @@ default Column getColumn() {\n      * @return a new projection\n      */\n     default TimeDimensionProjection toTimeGrain(TimeGrain newGrain) {\n-        if (getTimeDimension().getSupportedGrains().stream()\n+        if (getColumn().getSupportedGrains().stream()\n                 .noneMatch(supportedGrain -> supportedGrain.getGrain().equals(newGrain))) {\n-            throw new InvalidValueException(getTimeDimension().getId() + \" doesn't support grain \" + newGrain);\n+            throw new InvalidValueException(getColumn().getId() + \" doesn't support grain \" + newGrain);\n         }\n \n         TimeDimensionProjection projection = this;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0df1d658611d8b3049bd82b2a79bb88f7ff14a46"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkyNjQyNg==", "bodyText": "We could probably use generics here.", "url": "https://github.com/yahoo/elide/pull/1239#discussion_r398926426", "createdAt": "2020-03-26T22:18:11Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/query/MetricProjection.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2019, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.query;\n+\n+import com.yahoo.elide.datastores.aggregation.metadata.models.Metric;\n+\n+/**\n+ * Represents a projected metric column as an alias in a query.\n+ */\n+public interface MetricProjection extends ColumnProjection {\n+    /**\n+     * Get the projected metric.\n+     *\n+     * @return metric column\n+     */\n+    @Override\n+    Metric getColumn();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0df1d658611d8b3049bd82b2a79bb88f7ff14a46"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ee5b3166257eb2d495bce5c0cb76d5ea473f148", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/6ee5b3166257eb2d495bce5c0cb76d5ea473f148", "committedDate": "2020-03-27T15:58:55Z", "message": "add table into query template"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzOTUwNTUy", "url": "https://github.com/yahoo/elide/pull/1239#pullrequestreview-393950552", "createdAt": "2020-04-15T16:42:30Z", "commit": {"oid": "6ee5b3166257eb2d495bce5c0cb76d5ea473f148"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 667, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}