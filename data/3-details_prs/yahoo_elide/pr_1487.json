{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1NjE5NzQ2", "number": 1487, "title": "Add SQLDialect implementations and tests.", "bodyText": "Resolves #CARBON-149\nCo-authored-by: Daniel Mikhail https://github.com/mikhaidn\nDescription\nAdds a new SQLDialect interface and simple implementations for H2, Hive and Presto.\nAdds a showQueries() function to QueryEngine which is used to unit test the dialects.\nFixes SQLQueryEngine.toPageTotalSQL() to include HAVING clause\nMotivation and Context\nThis change is needed to lay the foundation for Hive and Presto datastore support.\nHow Has This Been Tested?\nThese changes have been tested via the included unit tests. The expected Hive and Presto queries were verified by manually execution in live Hive and Presto environments.\nScreenshots (if appropriate):\nN/A\nLicense\nI confirm that this contribution is made under an Apache 2.0 license and that I have the authority necessary to make this contribution on behalf of its copyright owner.", "createdAt": "2020-08-10T16:58:35Z", "url": "https://github.com/yahoo/elide/pull/1487", "merged": true, "mergeCommit": {"oid": "9a9fce7216f457fe97abc7f621bc415e68136331"}, "closed": true, "closedAt": "2020-08-21T21:27:27Z", "author": {"login": "HarveyC3"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc9pC1cAFqTQ2NDU1OTg4MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdBLrACgFqTQ3MjgyODI3MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0NTU5ODgw", "url": "https://github.com/yahoo/elide/pull/1487#pullrequestreview-464559880", "createdAt": "2020-08-10T20:21:26Z", "commit": {"oid": "1c611aad0de02a9466368be524fbb95bde38c049"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDoyMToyN1rOG-ecdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMToyNDoyNlrOG-gUEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE2MzcwMw==", "bodyText": "This function should be merged with the one above.  We can change the name to explain and remove the other function.  This will require a few other changes as well.", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r468163703", "createdAt": "2020-08-10T20:21:27Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java", "diffHunk": "@@ -200,4 +201,14 @@ public Table getTable(String classAlias) {\n      * @return SQL string corresponding to the given query\n      */\n     public abstract String explain(Query query);\n+\n+    /**\n+     * Builds the specified {@link Query} against a specific persistent storage, which understand the provided\n+     * {@link Query}.\n+     *\n+     * @param query The query customized for a particular persistent storage or storage client\n+     * @return query string\n+     */\n+    public abstract List<String> showQueries(Query query);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c611aad0de02a9466368be524fbb95bde38c049"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE2NDk3OQ==", "bodyText": "All of these classes need the copyright statement added and also javadoc at the class level so the linter doesn't complain.", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r468164979", "createdAt": "2020-08-10T20:24:04Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java", "diffHunk": "@@ -0,0 +1,9 @@\n+package com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c611aad0de02a9466368be524fbb95bde38c049"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE2NzM2Mw==", "bodyText": "No asterisk imports.  I wonder if the checkstyle is not enabled on this code?  It ought to be.", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r468167363", "createdAt": "2020-08-10T20:28:54Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/PrestoShowQueriesTest.java", "diffHunk": "@@ -0,0 +1,309 @@\n+package com.yahoo.elide.datastores.aggregation.queryengines.sql;\n+\n+import com.yahoo.elide.core.filter.FilterPredicate;\n+import com.yahoo.elide.core.filter.expression.AndFilterExpression;\n+import com.yahoo.elide.core.filter.expression.OrFilterExpression;\n+import com.yahoo.elide.datastores.aggregation.framework.SQLUnitTest;\n+import com.yahoo.elide.datastores.aggregation.metadata.models.Table;\n+import com.yahoo.elide.datastores.aggregation.query.Query;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.SQLDialectFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c611aad0de02a9466368be524fbb95bde38c049"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE3NTM1OA==", "bodyText": "Instead of having a static method and map that binds these values to their respective queries - the enumeration itself can have arguments for each value.  I would make a QueryProvider (function that takes no arguments and returns a query) as the argument to each enumeration value.", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r468175358", "createdAt": "2020-08-10T20:45:02Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java", "diffHunk": "@@ -62,7 +76,31 @@\n \n     protected QueryEngine.Transaction transaction;\n \n-    public static void init() {\n+    // Standard set of test queries used in dialect tests\n+    protected enum TestQueryName {\n+        WHERE_METRICS_ONLY,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c611aad0de02a9466368be524fbb95bde38c049"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE5MDQyNQ==", "bodyText": "What about pagination offset and limit?", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r468190425", "createdAt": "2020-08-10T21:16:01Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java", "diffHunk": "@@ -62,7 +76,31 @@\n \n     protected QueryEngine.Transaction transaction;\n \n-    public static void init() {\n+    // Standard set of test queries used in dialect tests\n+    protected enum TestQueryName {\n+        WHERE_METRICS_ONLY,\n+        WHERE_DIMS_ONLY,\n+        WHERE_METRICS_AND_DIMS,\n+        WHERE_METRICS_OR_DIMS,\n+        WHERE_METRICS_AGGREGATION,\n+        HAVING_METRICS_ONLY,\n+        HAVING_DIMS_ONLY,\n+        HAVING_METRICS_AND_DIMS,\n+        HAVING_METRICS_OR_DIMS,\n+        PAGINATION_TOTAL,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c611aad0de02a9466368be524fbb95bde38c049"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE5Mjc2Nw==", "bodyText": "Not sure what this means.  the group by is in the select isn't it?", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r468192767", "createdAt": "2020-08-10T21:20:57Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java", "diffHunk": "@@ -62,7 +76,31 @@\n \n     protected QueryEngine.Transaction transaction;\n \n-    public static void init() {\n+    // Standard set of test queries used in dialect tests\n+    protected enum TestQueryName {\n+        WHERE_METRICS_ONLY,\n+        WHERE_DIMS_ONLY,\n+        WHERE_METRICS_AND_DIMS,\n+        WHERE_METRICS_OR_DIMS,\n+        WHERE_METRICS_AGGREGATION,\n+        HAVING_METRICS_ONLY,\n+        HAVING_DIMS_ONLY,\n+        HAVING_METRICS_AND_DIMS,\n+        HAVING_METRICS_OR_DIMS,\n+        PAGINATION_TOTAL,\n+        SORT_METRIC_ASC,\n+        SORT_METRIC_DESC,\n+        SORT_DIM_DESC,\n+        SORT_METRIC_AND_DIM_DESC,\n+        SUBQUERY,\n+        GROUP_BY_DIMENSION_NOT_IN_SELECT,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c611aad0de02a9466368be524fbb95bde38c049"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE5MzQzOA==", "bodyText": "I think we ought to add a few tests for time dimensions - time dimensions in WHERE, time dimensions in HAVING, and time dimensions in GROUP BY", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r468193438", "createdAt": "2020-08-10T21:22:28Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java", "diffHunk": "@@ -62,7 +76,31 @@\n \n     protected QueryEngine.Transaction transaction;\n \n-    public static void init() {\n+    // Standard set of test queries used in dialect tests\n+    protected enum TestQueryName {\n+        WHERE_METRICS_ONLY,\n+        WHERE_DIMS_ONLY,\n+        WHERE_METRICS_AND_DIMS,\n+        WHERE_METRICS_OR_DIMS,\n+        WHERE_METRICS_AGGREGATION,\n+        HAVING_METRICS_ONLY,\n+        HAVING_DIMS_ONLY,\n+        HAVING_METRICS_AND_DIMS,\n+        HAVING_METRICS_OR_DIMS,\n+        PAGINATION_TOTAL,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c611aad0de02a9466368be524fbb95bde38c049"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE5NDMyMQ==", "bodyText": "It would be good to break out most of these feature tests by table and by subquery.  By features, I mean:\nWHERE\nHAVING\nTIME Dimensions\nPAGINATION\nSORTING", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r468194321", "createdAt": "2020-08-10T21:24:26Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java", "diffHunk": "@@ -62,7 +76,31 @@\n \n     protected QueryEngine.Transaction transaction;\n \n-    public static void init() {\n+    // Standard set of test queries used in dialect tests\n+    protected enum TestQueryName {\n+        WHERE_METRICS_ONLY,\n+        WHERE_DIMS_ONLY,\n+        WHERE_METRICS_AND_DIMS,\n+        WHERE_METRICS_OR_DIMS,\n+        WHERE_METRICS_AGGREGATION,\n+        HAVING_METRICS_ONLY,\n+        HAVING_DIMS_ONLY,\n+        HAVING_METRICS_AND_DIMS,\n+        HAVING_METRICS_OR_DIMS,\n+        PAGINATION_TOTAL,\n+        SORT_METRIC_ASC,\n+        SORT_METRIC_DESC,\n+        SORT_DIM_DESC,\n+        SORT_METRIC_AND_DIM_DESC,\n+        SUBQUERY,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c611aad0de02a9466368be524fbb95bde38c049"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8312841079c41f9485625109db19458c3fb00c9d", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/8312841079c41f9485625109db19458c3fb00c9d", "committedDate": "2020-08-13T21:04:42Z", "message": "Add SQLDialect implementations and tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a02bbb25eaf329dc79b81eccbd87c92c7fcd39ea", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/a02bbb25eaf329dc79b81eccbd87c92c7fcd39ea", "committedDate": "2020-08-13T21:04:42Z", "message": "Cleanup based on codacy feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "763f3ad133a7919f1723b71083a3bb1e5cf26539", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/763f3ad133a7919f1723b71083a3bb1e5cf26539", "committedDate": "2020-08-13T21:04:42Z", "message": "fix * import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b9c3bf41b64b32e2593b908f8a4f6b44761ebcd", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/6b9c3bf41b64b32e2593b908f8a4f6b44761ebcd", "committedDate": "2020-08-13T21:04:42Z", "message": "Merge showQueries() into explain()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7eaac789a20b652b6281921827a7da418570da71", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/7eaac789a20b652b6281921827a7da418570da71", "committedDate": "2020-08-13T21:04:42Z", "message": "Add copyright statements and class javadoc entries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55a481db9409ee59162772ac179fc3132f971490", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/55a481db9409ee59162772ac179fc3132f971490", "committedDate": "2020-08-13T21:04:42Z", "message": "Remove * import in PrestoExplainQueryTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "395ee7101ad46e383058ef8e67e39e680d86fcf3", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/395ee7101ad46e383058ef8e67e39e680d86fcf3", "committedDate": "2020-08-13T21:04:42Z", "message": "Rework TestQuery enum.\nChange GROUP_BY_NOT_IN_SELECT to ORDER_BY_NOT_IN_SELECT."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80b8c09756aefa2090d0ae3110e1a210ea1239dd", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/80b8c09756aefa2090d0ae3110e1a210ea1239dd", "committedDate": "2020-08-13T21:04:42Z", "message": "Fix checkstyle errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "462e8aec1f690a68f428c4ea47a804380e8a8369", "author": {"user": {"login": "aklish", "name": "Aaron Klish"}}, "url": "https://github.com/yahoo/elide/commit/462e8aec1f690a68f428c4ea47a804380e8a8369", "committedDate": "2020-08-13T21:21:05Z", "message": "Update QueryEngine.java"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6c59046a1d15a1fb5a2355452495e9ba938807d3", "author": {"user": {"login": "aklish", "name": "Aaron Klish"}}, "url": "https://github.com/yahoo/elide/commit/6c59046a1d15a1fb5a2355452495e9ba938807d3", "committedDate": "2020-08-13T14:28:33Z", "message": "Update QueryEngine.java"}, "afterCommit": {"oid": "462e8aec1f690a68f428c4ea47a804380e8a8369", "author": {"user": {"login": "aklish", "name": "Aaron Klish"}}, "url": "https://github.com/yahoo/elide/commit/462e8aec1f690a68f428c4ea47a804380e8a8369", "committedDate": "2020-08-13T21:21:05Z", "message": "Update QueryEngine.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75694576e6dc72914350ade3f9c6dfea75b997e0", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/75694576e6dc72914350ade3f9c6dfea75b997e0", "committedDate": "2020-08-17T15:56:55Z", "message": "Add setHighScoreNoAgg() in PlayerStats.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNTE1MjY0", "url": "https://github.com/yahoo/elide/pull/1487#pullrequestreview-470515264", "createdAt": "2020-08-19T14:28:17Z", "commit": {"oid": "75694576e6dc72914350ade3f9c6dfea75b997e0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDoyODoxOFrOHDKD_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxOTowNDo1MVrOHEPUJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA3MjYzOA==", "bodyText": "I would make a new static method for parsing filter expressions that throws an Illegal State or Argument exception.  Codacy doesn't like runtime exceptions.", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r473072638", "createdAt": "2020-08-19T14:28:18Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java", "diffHunk": "@@ -62,7 +83,225 @@\n \n     protected QueryEngine.Transaction transaction;\n \n-    public static void init() {\n+    // Standard set of test queries used in dialect tests\n+    protected enum TestQuery {\n+        WHERE_METRICS_ONLY (() -> {\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScoreNoAgg\")))\n+                    .metric(invoke(playerStatsTable.getMetric(\"lowScore\")))\n+                    .whereFilter(new FilterPredicate(\n+                            new Path(PlayerStats.class, dictionary, \"highScoreNoAgg\"),\n+                            Operator.GT,\n+                            Arrays.asList(9000)))\n+                    .build();\n+        }),\n+        WHERE_DIMS_ONLY (() -> {\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .whereFilter(new FilterPredicate(\n+                            new Path(PlayerStats.class, dictionary, \"overallRating\"),\n+                            Operator.NOTNULL,\n+                            new ArrayList<Object>()))\n+                    .build();\n+        }),\n+        WHERE_METRICS_AND_DIMS (() -> {\n+            FilterPredicate ratingFilter = new FilterPredicate(\n+                    new Path(PlayerStats.class, dictionary, \"overallRating\"),\n+                    Operator.NOTNULL, new ArrayList<Object>());\n+            FilterPredicate highScoreFilter = new FilterPredicate(\n+                    new Path(PlayerStats.class, dictionary, \"highScore\"),\n+                    Operator.GT,\n+                    Arrays.asList(9000));\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .whereFilter(new AndFilterExpression(ratingFilter, highScoreFilter))\n+                    .build();\n+        }),\n+        WHERE_METRICS_OR_DIMS (() -> {\n+            FilterPredicate ratingFilter = new FilterPredicate(\n+                    new Path(PlayerStats.class, dictionary, \"overallRating\"),\n+                    Operator.NOTNULL, new ArrayList<Object>());\n+            FilterPredicate highScoreFilter = new FilterPredicate(\n+                    new Path(PlayerStats.class, dictionary, \"highScore\"),\n+                    Operator.GT,\n+                    Arrays.asList(9000));\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .whereFilter(new OrFilterExpression(ratingFilter, highScoreFilter))\n+                    .build();\n+        }),\n+        WHERE_METRICS_AGGREGATION (() -> {\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n+                    .metric(invoke(playerStatsTable.getMetric(\"lowScore\")))\n+                    .whereFilter(new FilterPredicate(\n+                            new Path(PlayerStats.class, dictionary, \"highScore\"),\n+                            Operator.GT,\n+                            Arrays.asList(9000)))\n+                    .build();\n+        }),\n+        HAVING_METRICS_ONLY (() -> {\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScoreNoAgg\")))\n+                    .metric(invoke(playerStatsTable.getMetric(\"lowScore\")))\n+                    .havingFilter(new FilterPredicate(\n+                            new Path(PlayerStats.class, dictionary, \"highScoreNoAgg\"),\n+                            Operator.GT,\n+                            Arrays.asList(9000)))\n+                    .build();\n+        }),\n+        HAVING_DIMS_ONLY (() -> {\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .havingFilter(new FilterPredicate(\n+                            new Path(PlayerStats.class, dictionary, \"overallRating\"),\n+                            Operator.NOTNULL,\n+                            new ArrayList<Object>()))\n+                    .build();\n+        }),\n+        HAVING_METRICS_AND_DIMS (() -> {\n+            FilterPredicate ratingFilter = new FilterPredicate(\n+                    new Path(PlayerStats.class, dictionary, \"overallRating\"),\n+                    Operator.NOTNULL, new ArrayList<Object>());\n+            FilterPredicate highScoreFilter = new FilterPredicate(\n+                    new Path(PlayerStats.class, dictionary, \"highScore\"),\n+                    Operator.GT,\n+                    Arrays.asList(9000));\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .havingFilter(new AndFilterExpression(ratingFilter, highScoreFilter))\n+                    .build();\n+        }),\n+        HAVING_METRICS_OR_DIMS (() -> {\n+            FilterPredicate ratingFilter = new FilterPredicate(\n+                    new Path(PlayerStats.class, dictionary, \"overallRating\"),\n+                    Operator.NOTNULL, new ArrayList<Object>());\n+            FilterPredicate highScoreFilter = new FilterPredicate(\n+                    new Path(PlayerStats.class, dictionary, \"highScore\"),\n+                    Operator.GT,\n+                    Arrays.asList(9000));\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .havingFilter(new OrFilterExpression(ratingFilter, highScoreFilter))\n+                    .build();\n+        }),\n+        PAGINATION_TOTAL (() -> {\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"lowScore\")))\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .timeDimension(toProjection(playerStatsTable.getTimeDimension(\"recordedDate\"), TimeGrain.DAY))\n+                    .pagination(new ImmutablePagination(0, 1, false, true))\n+                    .build();\n+        }),\n+        SORT_METRIC_ASC (() -> {\n+            Map<String, Sorting.SortOrder> sortMap = new TreeMap<>();\n+            sortMap.put(\"highScoreNoAgg\", Sorting.SortOrder.asc);\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScoreNoAgg\")))\n+                    .sorting(new SortingImpl(sortMap, PlayerStats.class, dictionary))\n+                    .build();\n+        }),\n+        SORT_METRIC_DESC (() -> {\n+            Map<String, Sorting.SortOrder> sortMap = new TreeMap<>();\n+            sortMap.put(\"highScoreNoAgg\", Sorting.SortOrder.desc);\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScoreNoAgg\")))\n+                    .sorting(new SortingImpl(sortMap, PlayerStats.class, dictionary))\n+                    .build();\n+        }),\n+        SORT_DIM_DESC (() -> {\n+            Map<String, Sorting.SortOrder> sortMap = new TreeMap<>();\n+            sortMap.put(\"overallRating\", Sorting.SortOrder.desc);\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .sorting(new SortingImpl(sortMap, PlayerStats.class, dictionary))\n+                    .build();\n+        }),\n+        SORT_METRIC_AND_DIM_DESC (() -> {\n+            Map<String, Sorting.SortOrder> sortMap = new TreeMap<>();\n+            sortMap.put(\"highScore\", Sorting.SortOrder.desc);\n+            sortMap.put(\"overallRating\", Sorting.SortOrder.desc);\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .sorting(new SortingImpl(sortMap, PlayerStats.class, dictionary))\n+                    .build();\n+        }),\n+        SUBQUERY (() -> {\n+            Table playerStatsViewTable = engine.getTable(\"playerStatsView\");\n+            return Query.builder()\n+                    .table(playerStatsViewTable)\n+                    .metric(invoke(playerStatsViewTable.getMetric(\"highScore\")))\n+                    .build();\n+        }),\n+        ORDER_BY_DIMENSION_NOT_IN_SELECT (() -> {\n+            Map<String, Sorting.SortOrder> sortMap = new TreeMap<>();\n+            sortMap.put(\"overallRating\", Sorting.SortOrder.desc);\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n+                    .sorting(new SortingImpl(sortMap, PlayerStats.class, dictionary))\n+                    .build();\n+        }),\n+        COMPLICATED (() -> {\n+            // Sorting\n+            Map<String, Sorting.SortOrder> sortMap = new TreeMap<>();\n+            sortMap.put(\"highScoreNoAgg\", Sorting.SortOrder.desc);\n+            // WHERE filter\n+            FilterPredicate predicate = new FilterPredicate(\n+                    new Path(PlayerStats.class, dictionary, \"highScoreNoAgg\"),\n+                    Operator.GT,\n+                    Arrays.asList(9000));\n+            try {\n+                return Query.builder()\n+                        .table(playerStatsTable)\n+                        .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n+                        .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                        .timeDimension(toProjection(playerStatsTable.getTimeDimension(\"recordedDate\"), TimeGrain.DAY))\n+                        .pagination(new ImmutablePagination(0, 1, false, true))\n+                        .sorting(new SortingImpl(sortMap, PlayerStats.class, dictionary))\n+                        .whereFilter(predicate)\n+                        // force a join to look up countryIsoCode\n+                        .havingFilter(filterParser.parseFilterExpression(\"countryIsoCode==USA\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75694576e6dc72914350ade3f9c6dfea75b997e0"}, "originalPosition": 256}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIwNzI3MA==", "bodyText": "We should have comments for the interface methods", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r474207270", "createdAt": "2020-08-20T19:04:51Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialect.java", "diffHunk": "@@ -0,0 +1,16 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects;\n+\n+/**\n+ * Interface for SQL Dialects used to customize SQL queries for specific persistent storage.\n+ */\n+public interface SQLDialect {\n+\n+    String getDialectType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75694576e6dc72914350ade3f9c6dfea75b997e0"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c67bc4eb6528e75befda6214c9b2f5736d266b0", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/0c67bc4eb6528e75befda6214c9b2f5736d266b0", "committedDate": "2020-08-21T16:01:26Z", "message": "Add method comments to SQLDialect. Don't throw RuntimeException in SQLUnitTest."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyODI4Mjcx", "url": "https://github.com/yahoo/elide/pull/1487#pullrequestreview-472828271", "createdAt": "2020-08-21T21:27:05Z", "commit": {"oid": "0c67bc4eb6528e75befda6214c9b2f5736d266b0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 794, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}