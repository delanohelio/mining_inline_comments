{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0MjQ1NDI4", "number": 1594, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMDozMzoyNFrOEuKcEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMDozMzoyNFrOEuKcEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2ODQwOTc2OnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/query/QueryPlanTranslator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMDozMzoyNFrOHiZASg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMDozMzoyNFrOHiZASg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTgyMzMwNg==", "bodyText": "This could be written as if (!invoked)", "url": "https://github.com/yahoo/elide/pull/1594#discussion_r505823306", "createdAt": "2020-10-15T20:33:24Z", "author": {"login": "moizarafat"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/query/QueryPlanTranslator.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+\n+package com.yahoo.elide.datastores.aggregation.queryengines.sql.query;\n+\n+import static com.yahoo.elide.datastores.aggregation.query.QueryPlan.nestColumnProjection;\n+import static com.yahoo.elide.datastores.aggregation.query.QueryPlan.withSource;\n+\n+import com.yahoo.elide.datastores.aggregation.query.ColumnProjection;\n+import com.yahoo.elide.datastores.aggregation.query.Query;\n+import com.yahoo.elide.datastores.aggregation.query.QueryVisitor;\n+import com.yahoo.elide.datastores.aggregation.query.Queryable;\n+import com.yahoo.elide.datastores.aggregation.query.TimeDimensionProjection;\n+import com.google.common.collect.Streams;\n+\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Translates a merged query plan and a client query into query that can be executed.\n+ *\n+ * Column projection expressions originating from the query plan are left untouched.\n+ * Column projection expressions originating from the client query are nested for outer queries.\n+ */\n+public class QueryPlanTranslator implements QueryVisitor<Query.QueryBuilder> {\n+\n+    private Query clientQuery;\n+\n+    //Whether or not this visitor has been invoked yet.\n+    private boolean invoked = false;\n+\n+    public QueryPlanTranslator(Query clientQuery) {\n+        this.clientQuery = clientQuery;\n+    }\n+\n+    @Override\n+    public Query.QueryBuilder visitQuery(Query query) {\n+        throw new UnsupportedOperationException(\"Visitor does not visit queries\");\n+    }\n+\n+    @Override\n+    public Query.QueryBuilder visitQueryable(Queryable plan) {\n+        if (invoked == false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2bd82c1036549256de7b8f1ad555a3fb146d296"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 896, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}