{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUxNDk2NDY2", "number": 1448, "title": "Aggregation DataStore QueryLogger Implementation", "bodyText": "Description\nThis pull request added the Aggregation datastore querylogger implementation for Elide:\nNew Files that are added:\nQueryDetail.java -> A public java class which contains information about the data model name and the underlying querytext that is being executed by the datastore\nQueryLogger.java -> An interface file that contains methods acceptQuery, processQuery, cancelQuery, completeQuery\nNoopQueryLogger.java -> The default implementation for the QueryLogger. Does Nothing, returns directly\nQueryResponse.java -> Class holding information about the query response that is to be surfaced to the user\nMajor changes were also made to the following files to incorporate the change:\nAggregationDataStoreTransaction.java -> loadObject() function is updated to include these necessary changes\nAggregationDataStore.java -> QueryLogger has been added as another member variable\nMotivation and Context\nThis change will help in basic queryLogging for projects that use AggregationDataStore for Elide underneath. This change can help users know the amount of time their query is taking in executing, the response code they are getting etc.\nHow Has This Been Tested?\nRegression Testing was done to see if all the test cases till passed after adding these test cases.\nAggregationDataStoreTransactionTest.java was updated to test for the new changes that are made to the loadObjects(0 function, specifically seeing that the queryLogger functions are called appropriately\nLicense\nI confirm that this contribution is made under an Apache 2.0 license and that I have the authority necessary to make this contribution on behalf of its copyright owner.", "createdAt": "2020-07-17T22:07:27Z", "url": "https://github.com/yahoo/elide/pull/1448", "merged": true, "mergeCommit": {"oid": "9c5a5245ef29e9eb409255ead42f509f1c709ba9"}, "closed": true, "closedAt": "2020-07-24T15:57:15Z", "author": {"login": "dvarshney1"}, "timelineItems": {"totalCount": 55, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclvajIgH2gAyNDUxNDk2NDY2OmYwZDA5MzE5ODljOWY5YTBhZjZhZGI1NzllMTJmZGI0OWI5YjA3ZWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc4GKkegFqTQ1NTAwMjQ3OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f0d0931989c9f9a0af6adb579e12fdb49b9b07eb", "author": {"user": {"login": "QubitPi", "name": "Jack"}}, "url": "https://github.com/yahoo/elide/commit/f0d0931989c9f9a0af6adb579e12fdb49b9b07eb", "committedDate": "2020-05-28T15:15:49Z", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708\nauthor Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700\ncommitter Aaron Klish <klish@verizonmedia.com> 1589583449 -0500\n\nCreate AggregationDataStore module (#845)\n\n* Create AggregationDataStore module\n\n* Address Aaron's comments\n\n* Fix build failure\n\nAggregationDataStore: Schema (#846)\n\n* AggregationDataStore: Static Attribute Aggregation\n\n* Address comments\n\n* Implement TimeDimension and all its supporting components\n\n* refactor\n\n* Address comments from @aklish\n\n* Address comments from @aklish && Tests & Javadoc\n\n* Address comments from @aklish\n\n* Address comments from @aklish and @hellohanchen\n\n* Address comments from Aaron\n\n* ToMany is not supported\n\n* Address comments from Aaron\n\nDefine QueryEngine Contract (#867)\n\nFixed rebase on master\n\nSQL Query Engine  (#878)\n\n* AggregationDataStore: Schema (#846)\n\n* AggregationDataStore: Static Attribute Aggregation\n\n* Address comments\n\n* Implement TimeDimension and all its supporting components\n\n* refactor\n\n* Address comments from @aklish\n\n* Address comments from @aklish && Tests & Javadoc\n\n* Address comments from @aklish\n\n* Address comments from @aklish and @hellohanchen\n\n* Address comments from Aaron\n\n* ToMany is not supported\n\n* Address comments from Aaron\n\nAdded calcite as a dependency.  Merged in changes for QueryEngine interface\n\nFixed checkstyle issues\n\nAdded basic H2 DB test harness\n\nStarted breaking out projections\n\nMoved getValue and setValue from PersistentResource to EntityDictionary\n\nAdded basic logic to hydrate entities\n\nAdded FromTable and FromSubquery annotations.  Add explicit exclusion of entity relationship hydration\n\nMinor cleanup\n\nRefactored HQLFilterOperation to take an alias generator\n\nAdded test support for RSQL filter generation. Some cleanup\n\nAdded basic support for WHERE clause filtering on the fact table\n\nAdded working test for subquery SQL\n\nAdded basic join logic for filters\n\nAdded a test with a subquery and a filter join\n\nRefactored Schema classes and Query to support metric aggregation SQL expansion\n\nAdded group by support\n\nAdded logic for ID generation\n\nAdded sorting logic and test\n\nAdded pagination support and testing\n\nAll column references use proper name now for SQL\n\nRemoved calcite as a query engine\n\nRefactored HQLFilterOperation so it can be used for Having and Where clause generaiton\n\nAdded HAVING clause support\n\nChanged Query to take schema instead of entityClass\n\nFirst pass at cleanup\n\nFixed checkstyles\n\nCleanup\n\nCleanup\n\nAdded a complex SQL expression test and fixed bugs\n\nFixed merge issues.  Added another test.  Added better logging\n\nFixed bug in pagination SQL generation\n\n* Build is working\n\n* Inspection rework\n\nAdd EntityProjection plumbing (#949)\n\n* AggregationDataStore: Schema (#846)\n\n* AggregationDataStore: Static Attribute Aggregation\n\n* Address comments\n\n* Implement TimeDimension and all its supporting components\n\n* refactor\n\n* Address comments from @aklish\n\n* Address comments from @aklish && Tests & Javadoc\n\n* Address comments from @aklish\n\n* Address comments from @aklish and @hellohanchen\n\n* Address comments from Aaron\n\n* ToMany is not supported\n\n* Address comments from Aaron\n\n* Initial sketch\n\nPersistentResourceTest now passes\n\nLifeCycleTest tests now pass\n\nMore API changes for data store transaction.  Also fixed createObject in persistent resource to take the correct projection\n\nStarted to refactor tests\n\nIncludedProcessorTest refactored\n\nRefactored LifeCycleTest\n\nStarted refactor on PersistentResourceTest\n\nMore refactoring.  Fixed a bug in Resource.toPersistentResource\n\nOnly one test failing in PersistentResourceTest\n\nPersistentResourceTests now pass\n\nUpdateOnCreateTests now pass\n\nAdded skeleton for translating JSON-API URL path into an EntityProjection\n\nBasic EntityProjectionMaker almost complete\n\nAdded ability to merge entity projections by relationship\n\nAdded first test for EntityProjectionMaker\n\nNon-working veresion (but clean)\n\nTests now pass\n\nAll EntityProjectioNMaker tests pass\n\nElide-Core now builds\n\nAdded handling of sparse attributes and relationships\n\nExpanding attributes for included entities\n\nFixed a number of bugs found in IT tests\n\nFixed some of the EntityProjectionMaker tests\n\nFixed unit tests\n\nMade temporary modifications to exclude GraphQL (Build now passes)\n\nAdded sparse field unit tests for EntityProjectionMaker\n\n* Fixed build issues after rebase\n\n* Removed duplicated Schema class from rebase\n\n* Entity projection with aliases (#963)\n\n* Hacked up PersistentResource with new design\n\n* Core now compiles (and tests can run\n\n* EntityProjectionMaker tests pass\n\n* Build now passes (major cleanup still needed\n\n* Wire in entity projection4 json api (#964)\n\n* Fixed DataStore API.  Fixed a lot of the core unit tests\n\n* Checkstyles and more fixes\n\n* Hibernate 5 Tests Pass\n\n* Full build passes\n\n* Wire in entity projection4 json api (#965)\n\n* Initial concept.  No testing changed.\n\n* Core compiles and EntityProjectionMaker tests (original ones) now pass\n\n* Minor edits to TestRequestScope\n\n* Full build passes now\n\n* removed entity dictionary from entity projection\n\n* Pre-inspection cleanup\n\n* minor inspection fixup\n\nHydrate Relationship (#987)\n\n* AggregationDataStore: Schema (#846)\n\n* AggregationDataStore: Static Attribute Aggregation\n\n* Address comments\n\n* Implement TimeDimension and all its supporting components\n\n* refactor\n\n* Address comments from @aklish\n\n* Address comments from @aklish && Tests & Javadoc\n\n* Address comments from @aklish\n\n* Address comments from @aklish and @hellohanchen\n\n* Address comments from Aaron\n\n* ToMany is not supported\n\n* Address comments from Aaron\n\n* Added basic H2 DB test harness\n\n* Started breaking out projections\n\n* Moved getValue and setValue from PersistentResource to EntityDictionary\n\n* Added basic logic to hydrate entities\n\n* Added FromTable and FromSubquery annotations.  Add explicit exclusion of entity relationship hydration\n\n* Refactored HQLFilterOperation to take an alias generator\n\n* Added test support for RSQL filter generation. Some cleanup\n\n* Added basic support for WHERE clause filtering on the fact table\n\n* Added working test for subquery SQL\n\n* Added basic join logic for filters\n\n* Added a test with a subquery and a filter join\n\n* Refactored Schema classes and Query to support metric aggregation SQL expansion\n\n* Added group by support\n\n* Added logic for ID generation\n\n* Added sorting logic and test\n\n* Added pagination support and testing\n\n* All column references use proper name now for SQL\n\n* Removed calcite as a query engine\n\n* Refactored HQLFilterOperation so it can be used for Having and Where clause generaiton\n\n* Added HAVING clause support\n\n* Changed Query to take schema instead of entityClass\n\n* First pass at cleanup\n\n* Fixed checkstyles\n\n* Cleanup\n\n* Hydrate Relationship\n\n* Cleanup\n\n* Added a complex SQL expression test and fixed bugs\n\n* Fixed merge issues.  Added another test.  Added better logging\n\n* Self-review\n\n* Self-review\n\n* Self-review\n\n* Self-review\n\n* Self-review\n\n* Address comments from @aklish\n\n* Refactor EntityHydrator (#893)\n\n* rebase\n\n* keep Jiaqi's changes\n\n* fix id\n\n* fix maven verify\n\n* Remove HQLFilterOperation\n\n* fix dictionary\n\n* fix SqlEngineTest\n\n* remove unused part\n\n* make codacy happy\n\n* should use getParametrizedType\n\n* address comments\n\nImplement GraphQLEntityProjectionMaker (#986)\n\n* AggregationDataStore: Schema (#846)\n\n* AggregationDataStore: Static Attribute Aggregation\n\n* Address comments\n\n* Implement TimeDimension and all its supporting components\n\n* refactor\n\n* Address comments from @aklish\n\n* Address comments from @aklish && Tests & Javadoc\n\n* Address comments from @aklish\n\n* Address comments from @aklish and @hellohanchen\n\n* Address comments from Aaron\n\n* ToMany is not supported\n\n* Address comments from Aaron\n\n* Initial sketch\n\nPersistentResourceTest now passes\n\nLifeCycleTest tests now pass\n\nMore API changes for data store transaction.  Also fixed createObject in persistent resource to take the correct projection\n\nStarted to refactor tests\n\nIncludedProcessorTest refactored\n\nRefactored LifeCycleTest\n\nStarted refactor on PersistentResourceTest\n\nMore refactoring.  Fixed a bug in Resource.toPersistentResource\n\nOnly one test failing in PersistentResourceTest\n\nPersistentResourceTests now pass\n\nUpdateOnCreateTests now pass\n\nAdded skeleton for translating JSON-API URL path into an EntityProjection\n\nBasic EntityProjectionMaker almost complete\n\nAdded ability to merge entity projections by relationship\n\nAdded first test for EntityProjectionMaker\n\nNon-working veresion (but clean)\n\nTests now pass\n\nAll EntityProjectioNMaker tests pass\n\nElide-Core now builds\n\nAdded handling of sparse attributes and relationships\n\nExpanding attributes for included entities\n\nFixed a number of bugs found in IT tests\n\nFixed some of the EntityProjectionMaker tests\n\nFixed unit tests\n\nMade temporary modifications to exclude GraphQL (Build now passes)\n\nAdded sparse field unit tests for EntityProjectionMaker\n\n* Fixed build issues after rebase\n\n* GraphQL projection maker using document\n\n* Argument handling and fragment check\n\n* Add comments\n\n* Add fragment resolver\n\n* fix typo\n\n* break code into more methods\n\n* remove pagination and sorting\n\n* Removed duplicated Schema class from rebase\n\n* re-arrange keywords\n\n* Address comment\n\n* Add arguments for attribute fields\n\n* Handle arguments\n\n* support partial query, update edges/node logic\n\n* Entity projection with aliases\n\n* Entity projection with aliases (#963)\n\n* Hacked up PersistentResource with new design\n\n* Core now compiles (and tests can run\n\n* EntityProjectionMaker tests pass\n\n* Build now passes (major cleanup still needed\n\n* fix create relationship object using entity\n\n* Add tests passed\n\n* code clean up\n\n* refactor fatcher, fix test cases\n\n* rename keywords\n\n* rebase branch (#12)\n\n* rebased\n\n* Graphql projection refactor (#13)\n\n* fix fragment resolver\n\n* Fix variable resolver\n\n* Wire in entity projection4 json api (#964)\n\n* Fixed DataStore API.  Fixed a lot of the core unit tests\n\n* Checkstyles and more fixes\n\n* Hibernate 5 Tests Pass\n\n* Full build passes\n\n* Wire in entity projection4 json api (#965)\n\n* Initial concept.  No testing changed.\n\n* Core compiles and EntityProjectionMaker tests (original ones) now pass\n\n* Minor edits to TestRequestScope\n\n* Full build passes now\n\n* removed entity dictionary from entity projection\n\n* Pre-inspection cleanup\n\n* minor inspection fixup\n\n* rebase\n\n* Rebased on AggregationDataStore\n\n* clean up extra new lines\n\n* address comments\n\n* Builder pattern\n\n* update comments\n\n* remove projection in entity\n\n* fix jackson\n\n* Hydrate Relationship (#987) (#15)\n\n* Address some codecy comments\n\n* Add comment for partial query\n\n* Reenable tests\n\n* Address comments, refactor alias\n\n* Add test for alias\n\n* swapped test case\n\n* fix get type\n\nAdded AggregationDataStore Code (#991)\n\n* Adding testing for aggregation data store\n\n* Debugging integration tests\n\n* Continuing testing work\n\n* AggregationDataStore\n\n* AggregationDataStore testing\n\n* Added more tests\n\n* Aggregation Data Store\n\n* Cleaned up testing code\n\n* Cleaned up code, fixed helper for AggregationDataStore\n\n* end\n\n* Fixed checkstyle, other minor fixes\n\n* fixed comment\n\n* Minor fixes\n\n* Fixed id type issue, added exception for queries with no metrics\n\nFixed build (#993)\n\nMaking TimeDimension an interface (#992)\n\n[maven-release-plugin] prepare release 5.0.0-pr1\n\n[maven-release-plugin] prepare for next development iteration\n\nRenamed graphQL file to match test (#1002)\n\n[maven-release-plugin] prepare release 5.0.0-pr2\n\n[maven-release-plugin] prepare for next development iteration\n\nAdd JoinTo annotation (#1006)\n\n* Added JoinTo Annotation\n\n* Added working test\n\n* Added TODO comment for next PR\n\n* Added TODO comment for next PR\n\n* Added Sorting and Filtering support for JoinTo Columns\n\n* Fixed IT tests for Aggregation Data Store\n\n* Moved entityManager creation to happen separately for each query (#1008)\n\n* Moved entityManager creation to happen separately for each query\n\n* Closing EntityManager after each query\n\n* Inspection rework\n\nColumn annotation (#1017)\n\n* Solved column issue and added QueryEngineFactory\n\n* Caching query engine in AggregationDataStore\n\n* Fixed column description\n\n* Update SQLQueryEngine.java (#1019)\n\n* Add SQLMetrix, rearrange packages (#1020)\n\n* Add SQLMetrix, rearrange packages\n\n* address comment\n\nManager transacton manually (#1021)\n\n* Manager transacton manually\n\n* Add readonly\n\nHydrate GraphQL Schema with parameterized attributes (#1018)\n\n* GraphQL schema expose expected argument name and its type for each attribute\n\n* Change empty arguments to unmodifable set\n\nAggregationStore: Add multiple time grain definitions to schema (#1022)\n\n* Fixed checkstyle warnings and errors.  Separated the Query dimension interface from the Schema dimension interface\n\n* Added skeleton code to convert entity projection arguments into time grains\n\n* Cleanup\n\n* Class renames per inspection comments\n\n* Inspection comments\n\nRefactor time dimension logic (#1028)\n\n* Manager transacton manually\n\n* Add readonly\n\n* some rework\n\n* use getTimeDimension()\n\n* change exception\n\nISSUE-1026 Add support for @Subselect (#1038)\n\n* Manager transacton manually\n\n* Add readonly\n\n* some rework\n\n* use getTimeDimension()\n\n* change exception\n\n* ISSUE-1026 Add support for @Subselect\n\n* Address comments\n\nISSUE-1027 Support join for having clause (#1039)\n\n* Manager transacton manually\n\n* Add readonly\n\n* some rework\n\n* use getTimeDimension()\n\n* change exception\n\n* ISSUE-1027 Support join for having clause\n\nfunction name fixed to enableISO8601Dates (#1052)\n\nSupport for multiple queries at root is added (#1044)\n\n* Support for multiple queries at root is added\n\n* Added test with alias\n\n* comments resolved\n\nAdd time grain to GraphQL schema (#1042)\n\n* Added basic plumbing to push attributes from the entity projection down to the QueryEngine\n\n* Added logic to expand SQL time expression in SQLQueryEngine\n\n* Added SQLQueryEngine tests\n\n* Added IT tests\n\n* The AggregationStore now adds graphql parameters for parameterized columns\n\n* Minor refactor\n\n* Inspection rework\n\n* Minor fix\n\nSupport multiple query of same entity with different alias (#1055)\n\n* Support multiple query of same entity with different alias\n\n* add static method to generate keyname for GraphQLProjectionInfo projections\n\n* Remove aliasPartialQuerySameAttribute\n\nMetadataStore Models (#1068)\n\n* Manager transacton manually\n\n* Add readonly\n\n* some rework\n\n* use getTimeDimension()\n\n* change exception\n\n* Metadatastore models\n\n* Address comments\n\n* address comments\n\n* move root\n\n* fix style check\n\nSQLQueryTemplate Model (#1073)\n\n* SQLQueryTemplate\n\n* SQLTables\n\n* refactor\n\n* update sql dimension projection\n\n* update sql dimension projection\n\n* clean up dimension projection\n\n* refactor sql components\n\n* aggregatable field rework\n\n* add comments\n\n* rearrange packages\n\n* Add dimension projection back\n\n* fix checkstyle\n\n* Add dictionary\n\n* Simplify MetricFunction and SQLQueryTemplate\n\n* Address comments\n\nIntegrate Metadata Model and SQLQueryTemplate Model (#1083)\n\n* Integrate Metadata Model and SQLQueryTemplate Model\n\n* remove AggregationDictionary and AggregationManager\n\n* Add timezone\n\n* Can only query analyticView\n\nFixed issues with rebase\n\nAdd auto configuration for aggregation store (#1087)\n\n* Added autoconfiguration for QueryEngineFactory\n\n* Unified class scanning.  Started cleaning up datastores so they only register the entities they manage\n\n* Full build passes\n\n* Minor cleanup\n\n* Minor refactoring\n\n* Added EntityManagerFactory bean configuratino\n\n* Refactored class scanning for Elide standalone\n\n* Updated spring boot starter pom\n\n* Removed @Entity from all metadata models.  Started cleaning up entity dictionary entity registration\n\n* Broken implementation.  Just checking in so I can revert if needed.\n\n* All tests pass\n\n* Added unit tests\n\n* Minor cleanup\n\n* One more fix\n\n* Fixed broken tests\n\n* Added package include support back\n\n* Class scanning for annotations ignores inherited\n\n* Added a test based on inspection comments\n\n* Inspection comment fix\n\n* Changed initalization of MetadataStore\n\n* More inspection rework\n\n* Turned back on OWASP scanning\n\n* More rework\n\nremove @Inherited (#1092)\n\nSupport Non JPA Entity in AggregationDataStore (#1051)\n\n* Create AggregationDataStore module (#845)\n\n* Create AggregationDataStore module\n\n* Address Aaron's comments\n\n* Fix build failure\n\nAggregationDataStore: Schema (#846)\n\n* AggregationDataStore: Static Attribute Aggregation\n\n* Address comments\n\n* Implement TimeDimension and all its supporting components\n\n* refactor\n\n* Address comments from @aklish\n\n* Address comments from @aklish && Tests & Javadoc\n\n* Address comments from @aklish\n\n* Address comments from @aklish and @hellohanchen\n\n* Address comments from Aaron\n\n* ToMany is not supported\n\n* Address comments from Aaron\n\nDefine QueryEngine Contract (#867)\n\nFixed rebase on master\n\nSQL Query Engine  (#878)\n\n* AggregationDataStore: Schema (#846)\n\n* AggregationDataStore: Static Attribute Aggregation\n\n* Address comments\n\n* Implement TimeDimension and all its supporting components\n\n* refactor\n\n* Address comments from @aklish\n\n* Address comments from @aklish && Tests & Javadoc\n\n* Address comments from @aklish\n\n* Address comments from @aklish and @hellohanchen\n\n* Address comments from Aaron\n\n* ToMany is not supported\n\n* Address comments from Aaron\n\nAdded calcite as a dependency.  Merged in changes for QueryEngine interface\n\nFixed checkstyle issues\n\nAdded basic H2 DB test harness\n\nStarted breaking out projections\n\nMoved getValue and setValue from PersistentResource to EntityDictionary\n\nAdded basic logic to hydrate entities\n\nAdded FromTable and FromSubquery annotations.  Add explicit exclusion of entity relationship hydration\n\nMinor cleanup\n\nRefactored HQLFilterOperation to take an alias generator\n\nAdded test support for RSQL filter generation. Some cleanup\n\nAdded basic support for WHERE clause filtering on the fact table\n\nAdded working test for subquery SQL\n\nAdded basic join logic for filters\n\nAdded a test with a subquery and a filter join\n\nRefactored Schema classes and Query to support metric aggregation SQL expansion\n\nAdded group by support\n\nAdded logic for ID generation\n\nAdded sorting logic and test\n\nAdded pagination support and testing\n\nAll column references use proper name now for SQL\n\nRemoved calcite as a query engine\n\nRefactored HQLFilterOperation so it can be used for Having and Where clause generaiton\n\nAdded HAVING clause support\n\nChanged Query to take schema instead of entityClass\n\nFirst pass at cleanup\n\nFixed checkstyles\n\nCleanup\n\nCleanup\n\nAdded a complex SQL expression test and fixed bugs\n\nFixed merge issues.  Added another test.  Added better logging\n\nFixed bug in pagination SQL generation\n\n* Build is working\n\n* Inspection rework\n\nAdd EntityProjection plumbing (#949)\n\n* AggregationDataStore: Schema (#846)\n\n* AggregationDataStore: Static Attribute Aggregation\n\n* Address comments\n\n* Implement TimeDimension and all its supporting components\n\n* refactor\n\n* Address comments from @aklish\n\n* Address comments from @aklish && Tests & Javadoc\n\n* Address comments from @aklish\n\n* Address comments from @aklish and @hellohanchen\n\n* Address comments from Aaron\n\n* ToMany is not supported\n\n* Address comments from Aaron\n\n* Initial sketch\n\nPersistentResourceTest now passes\n\nLifeCycleTest tests now pass\n\nMore API changes for data store transaction.  Also fixed createObject in persistent resource to take the correct projection\n\nStarted to refactor tests\n\nIncludedProcessorTest refactored\n\nRefactored LifeCycleTest\n\nStarted refactor on PersistentResourceTest\n\nMore refactoring.  Fixed a bug in Resource.toPersistentResource\n\nOnly one test failing in PersistentResourceTest\n\nPersistentResourceTests now pass\n\nUpdateOnCreateTests now pass\n\nAdded skeleton for translating JSON-API URL path into an EntityProjection\n\nBasic EntityProjectionMaker almost complete\n\nAdded ability to merge entity projections by relationship\n\nAdded first test for EntityProjectionMaker\n\nNon-working veresion (but clean)\n\nTests now pass\n\nAll EntityProjectioNMaker tests pass\n\nElide-Core now builds\n\nAdded handling of sparse attributes and relationships\n\nExpanding attributes for included entities\n\nFixed a number of bugs found in IT tests\n\nFixed some of the EntityProjectionMaker tests\n\nFixed unit tests\n\nMade temporary modifications to exclude GraphQL (Build now passes)\n\nAdded sparse field unit tests for EntityProjectionMaker\n\n* Fixed build issues after rebase\n\n* Removed duplicated Schema class from rebase\n\n* Entity projection with aliases (#963)\n\n* Hacked up PersistentResource with new design\n\n* Core now compiles (and tests can run\n\n* EntityProjectionMaker tests pass\n\n* Build now passes (major cleanup still needed\n\n* Wire in entity projection4 json api (#964)\n\n* Fixed DataStore API.  Fixed a lot of the core unit tests\n\n* Checkstyles and more fixes\n\n* Hibernate 5 Tests Pass\n\n* Full build passes\n\n* Wire in entity projection4 json api (#965)\n\n* Initial concept.  No testing changed.\n\n* Core compiles and EntityProjectionMaker tests (original ones) now pass\n\n* Minor edits to TestRequestScope\n\n* Full build passes now\n\n* removed entity dictionary from entity projection\n\n* Pre-inspection cleanup\n\n* minor inspection fixup\n\nHydrate Relationship (#987)\n\n* AggregationDataStore: Schema (#846)\n\n* AggregationDataStore: Static Attribute Aggregation\n\n* Address comments\n\n* Implement TimeDimension and all its supporting components\n\n* refactor\n\n* Address comments from @aklish\n\n* Address comments from @aklish && Tests & Javadoc\n\n* Address comments from @aklish\n\n* Address comments from @aklish and @hellohanchen\n\n* Address comments from Aaron\n\n* ToMany is not supported\n\n* Address comments from Aaron\n\n* Added basic H2 DB test harness\n\n* Started breaking out projections\n\n* Moved getValue and setValue from PersistentResource to EntityDictionary\n\n* Added basic logic to hydrate entities\n\n* Added FromTable and FromSubquery annotations.  Add explicit exclusion of entity relationship hydration\n\n* Refactored HQLFilterOperation to take an alias generator\n\n* Added test support for RSQL filter generation. Some cleanup\n\n* Added basic support for WHERE clause filtering on the fact table\n\n* Added working test for subquery SQL\n\n* Added basic join logic for filters\n\n* Added a test with a subquery and a filter join\n\n* Refactored Schema classes and Query to support metric aggregation SQL expansion\n\n* Added group by support\n\n* Added logic for ID generation\n\n* Added sorting logic and test\n\n* Added pagination support and testing\n\n* All column references use proper name now for SQL\n\n* Removed calcite as a query engine\n\n* Refactored HQLFilterOperation so it can be used for Having and Where clause generaiton\n\n* Added HAVING clause support\n\n* Changed Query to take schema instead of entityClass\n\n* First pass at cleanup\n\n* Fixed checkstyles\n\n* Cleanup\n\n* Hydrate Relationship\n\n* Cleanup\n\n* Added a complex SQL expression test and fixed bugs\n\n* Fixed merge issues.  Added another test.  Added better logging\n\n* Self-review\n\n* Self-review\n\n* Self-review\n\n* Self-review\n\n* Self-review\n\n* Address comments from @aklish\n\n* Refactor EntityHydrator (#893)\n\n* rebase\n\n* keep Jiaqi's changes\n\n* fix id\n\n* fix maven verify\n\n* Remove HQLFilterOperation\n\n* fix dictionary\n\n* fix SqlEngineTest\n\n* remove unused part\n\n* make codacy happy\n\n* should use getParametrizedType\n\n* address comments\n\nImplement GraphQLEntityProjectionMaker (#986)\n\n* AggregationDataStore: Schema (#846)\n\n* AggregationDataStore: Static Attribute Aggregation\n\n* Address comments\n\n* Implement TimeDimension and all its supporting components\n\n* refactor\n\n* Address comments from @aklish\n\n* Address comments from @aklish && Tests & Javadoc\n\n* Address comments from @aklish\n\n* Address comments from @aklish and @hellohanchen\n\n* Address comments from Aaron\n\n* ToMany is not supported\n\n* Address comments from Aaron\n\n* Initial sketch\n\nPersistentResourceTest now passes\n\nLifeCycleTest tests now pass\n\nMore API changes for data store transaction.  Also fixed createObject in persistent resource to take the correct projection\n\nStarted to refactor tests\n\nIncludedProcessorTest refactored\n\nRefactored LifeCycleTest\n\nStarted refactor on PersistentResourceTest\n\nMore refactoring.  Fixed a bug in Resource.toPersistentResource\n\nOnly one test failing in PersistentResourceTest\n\nPersistentResourceTests now pass\n\nUpdateOnCreateTests now pass\n\nAdded skeleton for translating JSON-API URL path into an EntityProjection\n\nBasic EntityProjectionMaker almost complete\n\nAdded ability to merge entity projections by relationship\n\nAdded first test for EntityProjectionMaker\n\nNon-working veresion (but clean)\n\nTests now pass\n\nAll EntityProjectioNMaker tests pass\n\nElide-Core now builds\n\nAdded handling of sparse attributes and relationships\n\nExpanding attributes for included entities\n\nFixed a number of bugs found in IT tests\n\nFixed some of the EntityProjectionMaker tests\n\nFixed unit tests\n\nMade temporary modifications to exclude GraphQL (Build now passes)\n\nAdded sparse field unit tests for EntityProjectionMaker\n\n* Fixed build issues after rebase\n\n* GraphQL projection maker using document\n\n* Argument handling and fragment check\n\n* Add comments\n\n* Add fragment resolver\n\n* fix typo\n\n* break code into more methods\n\n* remove pagination and sorting\n\n* Removed duplicated Schema class from rebase\n\n* re-arrange keywords\n\n* Address comment\n\n* Add arguments for attribute fields\n\n* Handle arguments\n\n* support partial query, update edges/node logic\n\n* Entity projection with aliases\n\n* Entity projection with aliases (#963)\n\n* Hacked up PersistentResource with new design\n\n* Core now compiles (and tests can run\n\n* EntityProjectionMaker tests pass\n\n* Build now passes (major cleanup still needed\n\n* fix create relationship object using entity\n\n* Add tests passed\n\n* code clean up\n\n* refactor fatcher, fix test cases\n\n* rename keywords\n\n* rebase branch (#12)\n\n* rebased\n\n* Graphql projection refactor (#13)\n\n* fix fragment resolver\n\n* Fix variable resolver\n\n* Wire in entity projection4 json api (#964)\n\n* Fixed DataStore API.  Fixed a lot of the core unit tests\n\n* Checkstyles and more fixes\n\n* Hibernate 5 Tests Pass\n\n* Full build passes\n\n* Wire in entity projection4 json api (#965)\n\n* Initial concept.  No testing changed.\n\n* Core compiles and EntityProjectionMaker tests (original ones) now pass\n\n* Minor edits to TestRequestScope\n\n* Full build passes now\n\n* removed entity dictionary from entity projection\n\n* Pre-inspection cleanup\n\n* minor inspection fixup\n\n* rebase\n\n* Rebased on AggregationDataStore\n\n* clean up extra new lines\n\n* address comments\n\n* Builder pattern\n\n* update comments\n\n* remove projection in entity\n\n* fix jackson\n\n* Hydrate Relationship (#987) (#15)\n\n* Address some codecy comments\n\n* Add comment for partial query\n\n* Reenable tests\n\n* Address comments, refactor alias\n\n* Add test for alias\n\n* swapped test case\n\n* fix get type\n\nAdded AggregationDataStore Code (#991)\n\n* Adding testing for aggregation data store\n\n* Debugging integration tests\n\n* Continuing testing work\n\n* AggregationDataStore\n\n* AggregationDataStore testing\n\n* Added more tests\n\n* Aggregation Data Store\n\n* Cleaned up testing code\n\n* Cleaned up code, fixed helper for AggregationDataStore\n\n* end\n\n* Fixed checkstyle, other minor fixes\n\n* fixed comment\n\n* Minor fixes\n\n* Fixed id type issue, added exception for queries with no metrics\n\nFixed build (#993)\n\nMaking TimeDimension an interface (#992)\n\n* [maven-release-plugin] prepare release 5.0.0-pr1\n\n* [maven-release-plugin] prepare for next development iteration\n\n* Renamed graphQL file to match test (#1002)\n\n* [maven-release-plugin] prepare release 5.0.0-pr2\n\n* [maven-release-plugin] prepare for next development iteration\n\n* Add JoinTo annotation (#1006)\n\n* Added JoinTo Annotation\n\n* Added working test\n\n* Added TODO comment for next PR\n\n* Added TODO comment for next PR\n\n* Added Sorting and Filtering support for JoinTo Columns\n\n* Fixed IT tests for Aggregation Data Store\n\n* Moved entityManager creation to happen separately for each query (#1008)\n\n* Moved entityManager creation to happen separately for each query\n\n* Closing EntityManager after each query\n\n* Inspection rework\n\n* Column annotation (#1017)\n\n* Solved column issue and added QueryEngineFactory\n\n* Caching query engine in AggregationDataStore\n\n* Fixed column description\n\n* Update SQLQueryEngine.java (#1019)\n\n* Add SQLMetrix, rearrange packages (#1020)\n\n* Add SQLMetrix, rearrange packages\n\n* address comment\n\n* Manager transacton manually\n\n* Add readonly\n\n* Manager transacton manually (#1021)\n\n* Manager transacton manually\n\n* Add readonly\n\n* Hydrate GraphQL Schema with parameterized attributes (#1018)\n\n* GraphQL schema expose expected argument name and its type for each attribute\n\n* Change empty arguments to unmodifable set\n\n* AggregationStore: Add multiple time grain definitions to schema (#1022)\n\n* Fixed checkstyle warnings and errors.  Separated the Query dimension interface from the Schema dimension interface\n\n* Added skeleton code to convert entity projection arguments into time grains\n\n* Cleanup\n\n* Class renames per inspection comments\n\n* Inspection comments\n\n* some rework\n\n* use getTimeDimension()\n\n* change exception\n\n* Refactor time dimension logic (#1028)\n\n* Manager transacton manually\n\n* Add readonly\n\n* some rework\n\n* use getTimeDimension()\n\n* change exception\n\n* ISSUE-1026 Add support for @Subselect (#1038)\n\n* Manager transacton manually\n\n* Add readonly\n\n* some rework\n\n* use getTimeDimension()\n\n* change exception\n\n* ISSUE-1026 Add support for @Subselect\n\n* Address comments\n\n* ISSUE-1027 Support join for having clause (#1039)\n\n* Manager transacton manually\n\n* Add readonly\n\n* some rework\n\n* use getTimeDimension()\n\n* change exception\n\n* ISSUE-1027 Support join for having clause\n\n* View Design\n\n* Add tests and cleanup\n\n* rename annotation\n\n* function name fixed to enableISO8601Dates (#1052)\n\n* fix bugs\n\n* Support for multiple queries at root is added (#1044)\n\n* Support for multiple queries at root is added\n\n* Added test with alias\n\n* comments resolved\n\n* merge annotations\n\n* don't group by view relationship\n\n* Add time grain to GraphQL schema (#1042)\n\n* Added basic plumbing to push attributes from the entity projection down to the QueryEngine\n\n* Added logic to expand SQL time expression in SQLQueryEngine\n\n* Added SQLQueryEngine tests\n\n* Added IT tests\n\n* The AggregationStore now adds graphql parameters for parameterized columns\n\n* Minor refactor\n\n* Inspection rework\n\n* Minor fix\n\n* Support multiple query of same entity with different alias (#1055)\n\n* Support multiple query of same entity with different alias\n\n* add static method to generate keyname for GraphQLProjectionInfo projections\n\n* Remove aliasPartialQuerySameAttribute\n\n* MetadataStore Models (#1068)\n\n* Manager transacton manually\n\n* Add readonly\n\n* some rework\n\n* use getTimeDimension()\n\n* change exception\n\n* Metadatastore models\n\n* Address comments\n\n* address comments\n\n* move root\n\n* fix style check\n\n* SQLQueryTemplate Model (#1073)\n\n* SQLQueryTemplate\n\n* SQLTables\n\n* refactor\n\n* update sql dimension projection\n\n* update sql dimension projection\n\n* clean up dimension projection\n\n* refactor sql components\n\n* aggregatable field rework\n\n* add comments\n\n* rearrange packages\n\n* Add dimension projection back\n\n* fix checkstyle\n\n* Add dictionary\n\n* Simplify MetricFunction and SQLQueryTemplate\n\n* Address comments\n\n* Integrate Metadata Model and SQLQueryTemplate Model (#1083)\n\n* Integrate Metadata Model and SQLQueryTemplate Model\n\n* remove AggregationDictionary and AggregationManager\n\n* Add timezone\n\n* Can only query analyticView\n\n* integrate view with aggregation and metadata\n\n* remove includeField\n\n* remove @view\n\n* Use NonEntityDictionary\n\n* remove id\n\n* revert access changes\n\n* fix JPA entity check\n\n* remove @Entity from analyticViews\n\n* use table name as relationship type id\n\n* revert NonEntitydictinoary\n\n* tiny rework\n\n* Integration tests\n\n* Add jsonapi ittest\n\n* aggregation data store doesn't manage jpa entities\n\n* address comments\n\nfix integration dependencies (#1093)\n\n[maven-release-plugin] prepare release 5.0.0-pr3\n\n[maven-release-plugin] prepare for next development iteration\n\nFixed elide standalone pom from rebase\n\nFixed minor bug in rebase\n\nFixed rebase\n\nImproving class scanning performance for MetadataStore (#1117)\n\nEnable elide5 travis builds (#1129)\n\n* Move repeated @Sql annotations to class level (#1119)\n\n* Turning on travis builds with code coverage for Elide 5.x\n\n* Fixing security issue in spring-boot-web\n\nCo-authored-by: Brutus5000 <Brutus5000@gmx.net>\n\nFix sorting and ambiguous join issue (#1127)\n\n* Added sorting on aggregated metric based on latest elide-5.x\n\n* Fix ambiguity problem\n\n* update comments\n\n* fix codacy\n\n* refactor generateColumnReference\n\n* update comment\n\n* address comments\n\n* test cleanup\n\n* update unittest\n\n* fix elide core alias\n\n* QueryValidatorTest\n\n* EntityProjectionTranslatorTest\n\n* go joinFragment approach\n\n* delete jointrienode\n\nSupport no metric query (#1137)\n\n[maven-release-plugin] prepare release 5.0.0-pr4\n\n[maven-release-plugin] prepare for next development iteration\n\nCheck dependency injection (#1138)\n\n* Move repeated @Sql annotations to class level (#1119)\n\n* Fixing OWASP security warning for Tomcat dependency in Spring Web (#1132)\n\n* Adding support for dependency injection of Checks.  Added test injection classes\n\n* Unit tests pass\n\n* Tests pass\n\n* Removed Initializer Concept\n\nCo-authored-by: Brutus5000 <Brutus5000@gmx.net>\n\nFix travis log length (#1140)\n\n* Move repeated @Sql annotations to class level (#1119)\n\n* Fixing OWASP security warning for Tomcat dependency in Spring Web (#1132)\n\n* Removed unnecessary request/response logging (to shorten travis logs)\n\n* Address inspection comments\n\n* Address inspection comments\n\n* Address inspection comments\n\n* Removed logging of graphQL model building to shorten length\n\n* Fixed compilation error\n\nCo-authored-by: Brutus5000 <Brutus5000@gmx.net>\n\n[maven-release-plugin] prepare release 5.0.0-pr5\n\n[maven-release-plugin] prepare for next development iteration\n\nRefactoring Elide Security Checks (#1144)\n\nRemoved UpdateOnCreate.  Refactored AuditLogger, Pagination, & Sorting (#1146)\n\n* Removed UpdateOnCreate.  Refactored AuditLogger\n\n* Refactored Sorting\n\n* Refactored Pagination\n\n* Refactored Pagination\n\n* Pagination refactor builds and tests pass\n\n* Codacy fixes\n\n* Inspection rework\n\n* Fixes build\n\n* More inspection rework\n\n* Fix build\n\nRefactor share permission (#1154)\n\n* Refactored Sorting\n\n* Refactored Pagination\n\n* Refactored Pagination\n\n* Pagination refactor builds and tests pass\n\n* Codacy fixes\n\n* Refactored SharePermission to NonTransferable\n\n* Fixed build\n\n* Fixed startup bug\n\n* Fixed codacy and inspection comments\n\n* Update elide-core/src/main/java/com/yahoo/elide/core/EntityDictionary.java\n\nCo-Authored-By: Jon Kilroy <jkilroy@gmail.com>\n\n* Inspection rework\n\nCo-authored-by: Jon Kilroy <jkilroy@gmail.com>\n\nmetadata refactor (#1179)\n\n* metadata refactor\n\n* merge table and analyticView\n\n* fix reflection package\n\n* Make Table constrcut its own columns\n\n* table json type alias\n\n* add comment\n\n@Join and JoinPath\n\nadd comment\n\nhide non-jpd entities in grpahql\n\nhide joins\n\nrefactor hidden\n\nremove ant\n\nremove relationshp, update model (#1186)\n\nRebased on master\n\n[maven-release-plugin] prepare release 5.0.0-pr6\n\n[maven-release-plugin] prepare for next development iteration\n\nsourceColumn (#1196)\n\n* sourceColumn\n\n* address comment\n\n* change to sourcePath\n\nCleaning up ElideSettings\n\nAdded more test fixes\n\nFixed a number of broken tests\n\nBuild completes\n\nFixed JSON-API Patch Response\n\nFixed GraphQL errors.  Added better errors for Forbidden Access Exception.\n\nMinor fix\n\nAdded setId to EntityDictionary\n\nInitial version\n\nAll test pass except for spring\n\nBuild passes\n\nAdding checkstyle comments for classes\n\nInspection comments\n\nFixed checkstyle issues\n\nChange the way types are named in the GraphQL schema (#1215)\n\n* name utils\n\n* ready for review\n\n* fix: AggregationDataStoreIntegrationTest#testGraphQLSchema\n\nLabel Resolver for Dimension Formula (#1208)\n\n* sql expression to dimension formula\n\n* Metric formula\n\n* Add unit tests\n\n* refacot formula references\n\n* fix comment\n\n* fix comment\n\n* resolve physical column\n\n* refactor dimensionFormula\n\n* cleanup\n\n* label resolver\n\n* cleanup\n\n* refactor\n\n* cleanup\n\n* move code\n\n* labelStore\n\n* labelStore 2\n\n* remove generator\n\n* refactor metric formula\n\n* address comments\n\n* move symbol table into sql query engine\n\n* remove sourceColumn\n\n* update reference expression\n\n* visitor design\n\n* add comments\n\n* add unit join path test\n\n* fix timeDimensionProjection\n\n* fix null value number\n\n* address comments\n\n* fix codacy\n\nCo-authored-by: hchen04 <han.chen@oath.com>\n\nFixing broken javadoc\n\nColumnProjection Refactor (#1239)\n\n* unify projections\n\n* remove getFunction()\n\n* add table into query template\n\nCo-authored-by: hchen04 <han.chen@oath.com>\n\nRefactored metric SQL expansion to occur dynamically at query time ra\u2026 (#1270)\n\n* Refactored metric SQL expansion to occur dynamically at query time rather than statically during service initialization\n\n* Update elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/query/SQLMetricProjection.java\n\nCo-Authored-By: Jon Kilroy <jkilroy@gmail.com>\n\nCo-authored-by: Aaron Klish <klish@verizonmedia.com>\nCo-authored-by: Jon Kilroy <jkilroy@gmail.com>\n\nRemove path logic from aggregation store (#1271)\n\n* Extended query validation to ensure where clause and sorting clauses don't traverse relationships\n\n* Added error check for relationship traversal for Having clauses\n\n* Hacked up logic to remove reference Table resolve references that take a path\n\n* Minor refactoring\n\n* Removed logic to extend join path\n\n* Refactored column projections to use generics\n\n* Removed reference functions from MetricProjection base class\n\n* Refactored so that all SQL generation is done inside the ColumnProjection\n\n* Refactored so all projection happens through projections\n\n* Refactored column projection creation\n\n* Removed unnecessary code\n\n* Added templateQuery to arguments required to generate SQL in column projections\n\n* Fixed codacy issues\n\nCo-authored-by: Aaron Klish <klish@verizonmedia.com>\n\nAdded InMemoryStore to list of datastores that run IT tests (#1225)\n\nCo-authored-by: Aaron Klish <klish@verizonmedia.com>\n\nAdding TimeDimensions to Table (#1273)\n\nElide 5.x async (#1203)\n\n* Adding Async Entity Models\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Adding async module and fixing parent pom version\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Adding async service classes, security and cleanup services\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Adding Copyright License Header to Async module classes\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Using new request scope for datastore transactions\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Remove thread sleep used in testing\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Fixing based on code quality review from codacy\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Fixing additional issues based on code quality review from codacy\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Adding getter for AsyncQueryResult\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Reformatting.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Adding mappedBy.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Fixing several review comments - pom, lombok, thread exec\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Fixing codacity errors\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Moving all the DB ORM logic to a utility class for Async\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Remove dependency on number of hosts, delete permission, separate method for interrupttime calculation\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Variable Naming convention.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Variable Naming convention.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Removing unwanted params.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Making cleaner a separate service.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Remove unwanted params.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Remove unwanted tabs.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Updating order of modules.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Adding cleanup sql.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Adding delete logic.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Adding query result retention.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Resolving build error.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Changing AsyncDbUtil to use Functional Interface\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Removing sleep\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Adding functional interface logic for executeInTransaction\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Adding debug statements for AsyncDbUtil\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Codacity errors, exception handling\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Adding Async Entity Models\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Adding async module and fixing parent pom version\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Adding async service classes, security and cleanup services\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Adding Copyright License Header to Async module classes\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Using new request scope for datastore transactions\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Remove thread sleep used in testing\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Fixing based on code quality review from codacy\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Fixing additional issues based on code quality review from codacy\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Adding getter for AsyncQueryResult\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Reformatting.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Adding mappedBy.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Fixing several review comments - pom, lombok, thread exec\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Fixing codacity errors\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Moving all the DB ORM logic to a utility class for Async\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Remove dependency on number of hosts, delete permission, separate method for interrupttime calculation\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Variable Naming convention.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Variable Naming convention.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Removing unwanted params.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Making cleaner a separate service.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Remove unwanted params.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Remove unwanted tabs.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Updating order of modules.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Adding cleanup sql.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Adding delete logic.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Adding query result retention.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Resolving build error.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Changing AsyncDbUtil to use Functional Interface\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Removing sleep\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Adding functional interface logic for executeInTransaction\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Adding debug statements for AsyncDbUtil\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Codacity errors, exception handling\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Rebased with elide-5.x and changed User principal logic\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Rebase\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Changing CleanerThread to use ExecuteInTransaction\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Removing unused imports\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Delete Method changes\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Overriding hashCode and equals\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Overriding hashCode and equals\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Removing unused method\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Changing response logic for AsyncQuery\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Adding return to delete method\n\n* Resolving Review Comments\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Resolve some review comments\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Changing the DAO contract and updating references to DAO\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Removing singletons and extra constructors, simplyfing logic\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Adding default constructor and setters for DefaultDAO\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Fixing codacy error\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Changing Base to use correct obj\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Fixing review comments\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Resolving review comments\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Review comments\n\nCo-authored-by: Abhino <Abhino@gmail.com>\n\n* Elide 5.x elide-async integration in elide-standalone (#1205)\n\n* Integrating elide-async.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Default enableAsync to False.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Default enableAsync to False.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Integrating elide-async.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Default enableAsync to False.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Default enableAsync to False.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Resolving review comments.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Resolving review comments.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Removing unwanted params.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Binding Cleaner service.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\nBinding Cleaner service.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Adding query result retention.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Integrating elide-async.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Default enableAsync to False.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Default enableAsync to False.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Integrating elide-async.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Resolving review comments.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Resolving review comments.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Removing unwanted params.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Binding Cleaner service.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\nBinding Cleaner service.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Adding query result retention.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Making AsyncQueryDAO configurable\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Making AsyncQueryDAO configurable\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Review comments\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Review comments\n\nCo-authored-by: abhino <abhino@gmail.com>\n\n* Changing call to DefaultAsyncQueryDAO\n\n* Review comments\n\nCo-authored-by: Abhino <Abhino@gmail.com>\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Elide 5.x elide-async integration in elide-spring (#1204)\n\n* Integrating elide-async.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\nIntegrating elide-async.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Removing unwanted params.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Binding Cleaner service.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Adding query result retention.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Adding DAO configuration\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Checkstyle error\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Review comments\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Review comments\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Review comments\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Codacy Error\n\nCo-authored-by: Abhino <Abhino@gmail.com>\n\n* Changing include type to asyncQuery to avoid conflict\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Sync\n\nCo-authored-by: Abhino <Abhino@gmail.com>\n\n* Singleton for Cleaner Service\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Singleton for Cleaner Service\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Singleton for Cleaner Service\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Singleton for Executor Service\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Sync with Standalone Value\n\n* Changes to change UUID columns type as varchar(36)\n\n* Review Comments\n\n* Review Comments\n\n* Fix review comments\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Updating per review comments\n\n* Remove unused import\n\n* Removing status change to Queued\n\n* removing unused import\n\n* prepersist for status\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\nCo-authored-by: avijay <abhinav.vijaykumar@verizonmedia.com>\nCo-authored-by: moiz arafat <moiz.arafat@oath.com>\nCo-authored-by: Moiz Arafat <4307621+moizarafat@users.noreply.github.com>\nCo-authored-by: moizarafat <moiz.arafat@verizonmedia.com>\n\nSimplify life cycle hooks (#1224)\n\n* Initial version\n\n* Finished code.  Starting to flesh out tests\n\n* Elide core compiles\n\n* Removed CRUDEvent.CrudAction\n\n* Added new test structure for LifeCycleTest\n\n* Fixed bug in Persistent Resource where relationship reads did not tigger a lifecycle event\n\n* Added several LifeCycle Tests\n\n* Added create test for persistent resource\n\n* Added Elide Persistent Resource Update Test\n\n* Added update with change spec test\n\n* Added Relationship Edit test\n\n* Added relationship test\n\n* Fixed checkstyle and compilation errors\n\n* Added remove from collection test\n\n* Added exception tests\n\n* Added delete test\n\n* Added read test\n\n* Fixed checkstyles\n\n* Elide core builds and tests pass\n\n* Fixed graphQL tests\n\n* Full build now passes\n\n* Removed old life cycle annotations\n\n* Minor cleanup\n\n* Fixed codacy issues\n\n* Update README.md\n\nCo-Authored-By: Jon Kilroy <jkilroy@gmail.com>\n\nCo-authored-by: Aaron Klish <klish@verizonmedia.com>\nCo-authored-by: Jon Kilroy <jkilroy@gmail.com>\n\nFixed elide-5.x build\n\nFixed rebase issues\n\nTurning off retireJS for dependency check\n\nBetter errors for missing IDs in Patch Extension Request. (#1278) (#1281)\n\n* Better errors for missing IDs in Patch Extension Request. (#1278)\n\n* Return a better error when handling invalid patch extension requests that are missing IDs\n\n* Added tests\n\nCo-authored-by: Aaron Klish <klish@verizonmedia.com>\n\n* Expect encoded response as array\n\nCo-authored-by: Aaron Klish <aklish@gmail.com>\nCo-authored-by: Aaron Klish <klish@verizonmedia.com>\nCo-authored-by: wcekan <wcekan@verizonmedia.com>\n\n[maven-release-plugin] prepare release 5.0.0-pr8\n\n[maven-release-plugin] prepare for next development iteration\n\nPatch Extension Lifecycle tests (#1280)\n\n* Patch Extension Lifecycle tests\n\n* Missing check\n\n* Update error body\n\nCo-authored-by: wcekan <wcekan@verizonmedia.com>\n\nAdd version support (#1295)\n\n* Initial non working version\n\n* More changes\n\n* Build passes\n\n* Expanded version param outside entity dictionary\n\n* Plumbed API version up through RequestScope\n\n* Plumbed API version up to controllers and endpoints\n\n* All code minus async written and working\n\n* Code complete\n\n* Build passes\n\n* All tests are passing\n\n* Changed aggregation store Table id to include version.  Metadata will now surface table versions\n\n* Added a swagger IT test with API versions\n\n* Replace empty version string with constant.  Fixed a few bugs in JSON-API parser\n\n* Added graphql type introspection test\n\n* Added graphql type introspection test\n\n* Added spring controller test.  Fixed issue with version header parsing\n\n* Added spring controller test for graphql\n\n* Added swagger controller tests\n\n* Added more happy path versioned tests\n\n* Fixed bug in GraphQLIT\n\n* Added graphQL test for invalid API version\n\n* ADded invalid API version graphql controller test\n\n* Fixed checkstyles\n\n* Added standalone and patch extension tests\n\n* Fixed build errors and codacy errors\n\nCo-authored-by: Aaron Klish <klish@verizonmedia.com>\n\nMigrated spring controllers to use async (#1296)\n\nCo-authored-by: Aaron Klish <klish@verizonmedia.com>\n\nfixes for Async Models lifecycle hooks failing (#1294)\n\n* elide standalone fixes for lifecycle hooks failing\n\n* Manual Binding of lifecycle hooks\n\n* Manual binding of lifecycle in elide spring\n\n* Refactor\n\n* Review Comments\n\n* elide standalone fixes for lifecycle hooks failing\n\n* Manual Binding of lifecycle hooks\n\n* Manual binding of lifecycle in elide spring\n\n* Refactor\n\n* Review Comments\n\n* Rebase with 5.x\n\nCo-authored-by: moiz arafat <moiz.arafat@oath.com>\n\nImplement equals/hashCode and immutability where needed (#1297)\n\n* ColumnProjection must implement equals/hashCode\n\n* Use @Value for SQLTimeDimensionProjection\n\n* Use @Value for Argument\n\n* Use @Value for TimeDimensionGrain\n\n* Use @Value for TimeDimension\n\n* Make Column/Metric immutable\n\n* Table can be immutable\n\n* Use @Value to simplify Query\n\nChanges elide to only inject models annotated with @Inject (#1299)\n\n* Changes elide to only inject models annotated with @Inject\n\n* Codacy fix\n\nCo-authored-by: Aaron Klish <klish@verizonmedia.com>\n\nEnhancemnents to Aggregation Store (#1300)\n\nCo-authored-by: moiz arafat <moiz.arafat@oath.com>\n\nQueryEngine result cache (#1279)\n\n* Add QueryEngine cache API\n\n* Remove outdated javadoc text\n\nElide Async Feature Unit and Integration Tests (#1311)\n\n* Added integration,unit test setup for Async Module with few tests\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Adding Licence headers, Sample entity and working Async test for POST,GET\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Adding additional integration tests\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Adding remaining integration tests and updating javadocs\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Adding all unit tests\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Updating tests to work with Singleton changes\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Modifying tests to work with singleton logic\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Resolving some codacy errors\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Adding DSL for GraphQL and addressing review comments\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Fixing unit tests and checkstyle errors\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Moving tests to new format\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Fixing session not closed error and checkstyle errors\n\n* Fixing imports\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Removing unused method and updating harness\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Updating unit tests\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Updating ResourceConfig for AsyncTest\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Moving logic for resource config to new test binder\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Adding bindFactory logic for async services\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Fixing IT\n\n* Fixing IT\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\n* Adding Remaining integration tests\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Consolidating filter logic for integration tests\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Fixing legacy Hibernate entity manager store (so it doesn't recycle the entity manager\n\n* Adding additional integration tests for Standalone and Spring boot\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Fixing codacy errors\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\n\n* Review Comments\n\nCo-authored-by: abhino <abhino@gmail.com>\n\nCo-authored-by: avijay <abhinav.vijaykumar@verizonmedia.com>\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>\nCo-authored-by: moiz arafat <moiz.arafat@oath.com>\nCo-authored-by: Aaron Klish <klish@verizonmedia.com>\n\nin memory compilation integrated with dynamic config helpers (#1255)\n\n* Rebase against 5.x\n\nCo-authored-by: Ayeswarya <ayeswarya.anandan@verizonmedia.com>\nCo-authored-by: AvaniMakwana <Avani.makwana@outlook.com>\n\n* pom fix\n\nCo-authored-by: Ayeswarya <ayeswarya.anandan@verizonmedia.com>\nCo-authored-by: AvaniMakwana <Avani.makwana@outlook.com>\n\n* pom fix\n\nCo-authored-by: Ayeswarya <ayeswarya.anandan@verizonmedia.com>\nCo-authored-by: AvaniMakwana <Avani.makwana@outlook.com>\n\n* Merging 1220\n\nCo-authored-by: rishi-aga <rishi.aga123@gmail.com>\nCo-authored-by: AvaniMakwana <Avani.makwana@outlook.com>\n\n* Spring Boot Changes\n\nCo-authored-by: Ayeswarya <ayeswarya.anandan@verizonmedia.com>\n\n* Spring Boot Changes\n\nCo-authored-by: Ayeswarya <ayeswarya.anandan@verizonmedia.com>\n\n* Spring Boot Changes\n\nCo-authored-by: Ayeswarya <ayeswarya.anandan@verizonmedia.com>\n\n* Review Comments\n\nCo-authored-by: Ayeswarya <ayeswarya.anandan@verizonmedia.com>\n\n* Update DynamicConfigTest.java\n\n* Review Comments\n\nCo-authored-by: Ayeswarya <ayeswarya.anandan@verizonmedia.com>\n\nCo-authored-by: moiz arafat <moiz.arafat@verizonmedia.com>\nCo-authored-by: AvaniMakwana <Avani.makwana@outlook.com>\nCo-authored-by: rishi-aga <rishi.aga123@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8cdd9ddf50a779e9d25e5d67e353bc0c556219bc", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/8cdd9ddf50a779e9d25e5d67e353bc0c556219bc", "committedDate": "2020-05-28T15:16:33Z", "message": "Fixed issues with rebase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5a44fce2a886e78a0ea2b33931221f1cbc7a716", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/c5a44fce2a886e78a0ea2b33931221f1cbc7a716", "committedDate": "2020-05-28T15:16:34Z", "message": "Finished rebase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0bf0b1ea91fa43b1df3d413d95f0d6a90542e38f", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/0bf0b1ea91fa43b1df3d413d95f0d6a90542e38f", "committedDate": "2020-05-28T15:16:34Z", "message": "Async ID change from UUID to String and Dynamic Config FIx (#1325)\n\n* Async UUID to String, Dynamic Config NPE\r\n\r\n* Update DefaultAsyncQueryDAOTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "315d254cab16013ae00f187bb567407279b4baca", "author": {"user": {"login": "ramshakr", "name": null}}, "url": "https://github.com/yahoo/elide/commit/315d254cab16013ae00f187bb567407279b4baca", "committedDate": "2020-05-28T15:16:34Z", "message": "TANDS-19093-transactionRegistry-interface (#1332)\n\n* TANDS-19093-transactionRegistry-interface\r\n\r\n* TANDS-19093-transactionRegistry-interface\r\n\r\n* TANDS-19093-transactionRegistry-interface\r\n\r\n* TANDS-19093-fixing-bugs\r\n\r\n* TANDS-19093-fixing-bugs\r\n\r\n* TANDS-19093-fixing-bugs\r\n\r\n* TANDS-19093-fixing-bugs\r\n\r\nCo-authored-by: Ramsha Rao <ramsha.rao@verizonmedia.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8990160b81e523ada9d958230768e2411c4bd196", "author": {"user": {"login": "AshishAg24", "name": "Ashish Aggarwal"}}, "url": "https://github.com/yahoo/elide/commit/8990160b81e523ada9d958230768e2411c4bd196", "committedDate": "2020-05-28T15:16:34Z", "message": "add requestId (#1331)\n\nCo-authored-by: aaggarwal <ashish.aggarwal@oath.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39f9c660338614458ed7991752ef9335ad7194ee", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/39f9c660338614458ed7991752ef9335ad7194ee", "committedDate": "2020-05-28T15:16:34Z", "message": "[maven-release-plugin] prepare release 5.0.0-pr9"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cec7d1e7a7837baefe9d1f1161e495765e350f05", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/cec7d1e7a7837baefe9d1f1161e495765e350f05", "committedDate": "2020-05-28T15:16:34Z", "message": "[maven-release-plugin] prepare for next development iteration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04049117fa4c69cd3dd74e2b78f83470fd8098fc", "author": {"user": {"login": "john-karp", "name": "John Karp"}}, "url": "https://github.com/yahoo/elide/commit/04049117fa4c69cd3dd74e2b78f83470fd8098fc", "committedDate": "2020-05-28T15:16:34Z", "message": "Introduce QueryResult class for QueryEngine caching (#1333)\n\n* Make QueryEngine cache bypass flag part of Query\r\n\r\n* Forming the cache key is not free, so don't a use stub cache\r\n\r\n* Add QueryResult class\r\n\r\n* Add pageTotals to QueryResult\r\n\r\n* Pass page totals through QueryResult instead of Pagination\r\n\r\n* Codacy doesn't know @Value makes fields private"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f9f56a18028cdd6987a92d56cec8a0d573bed44", "author": {"user": {"login": "Chandrasekar-Rajasekar", "name": null}}, "url": "https://github.com/yahoo/elide/commit/2f9f56a18028cdd6987a92d56cec8a0d573bed44", "committedDate": "2020-05-28T15:16:34Z", "message": "remove missing javadoc warnings (#1337)\n\nCo-authored-by: Chandrasekar Rajasekar <chandrasekar.rajasekar@oath.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c18fabf0d8dad05960dfad293b5f346a7e1d43a4", "author": {"user": {"login": "AvaniMakwana", "name": "Avani Makwana"}}, "url": "https://github.com/yahoo/elide/commit/c18fabf0d8dad05960dfad293b5f346a7e1d43a4", "committedDate": "2020-05-28T15:16:57Z", "message": "Elide 5.x dynamic config standalone (#1259)\n\n* Fix method call, Swagger Doc Update\r\n\r\nCo-authored-by: AvaniMakwana <Avani.makwana@outlook.com>\r\n\r\n* Swagger doc update\r\n\r\nCo-authored-by: AvaniMakwana <Avani.makwana@outlook.com>\r\n\r\n* update pom.xml\r\n\r\nCo-authored-by: AvaniMakwana <Avani.makwana@outlook.com>\r\n\r\n* update pom.xml\r\n\r\nCo-authored-by: AvaniMakwana <Avani.makwana@outlook.com>\r\n\r\n* review comments\r\n\r\nCo-authored-by: AvaniMakwana <Avani.makwana@outlook.com>\r\n\r\n* Update ElideStandaloneSettings.java\r\n\r\n* Update pom.xml\r\n\r\n* Update pom.xml\r\n\r\nCo-authored-by: moiz arafat <moiz.arafat@verizonmedia.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10b118a24ea1b8d5fde48c765efb34bc1293b7fb", "author": {"user": {"login": "Rkr1992", "name": null}}, "url": "https://github.com/yahoo/elide/commit/10b118a24ea1b8d5fde48c765efb34bc1293b7fb", "committedDate": "2020-05-28T15:16:57Z", "message": "addTransaction-removeTransaction (#1338)\n\n* TANDS-19169\r\n\r\n* TANDS-19169\r\n\r\n* TANDS-19169\r\n\r\n* TANDS-19169\r\n\r\n* TANDS-19169\r\n\r\n* TANDS-19169\r\n\r\n* TANDS-19169\r\n\r\n* TANDS-19169\r\n\r\n* TANDS-19169\r\n\r\n* TANDS-19169\r\n\r\n* TANDS-19169\r\n\r\n* TANDS-19169\r\n\r\n* TANDS-19169\r\n\r\n* TANDS-19169\r\n\r\n* TANDS-19169\r\n\r\n* TANDS-19169\r\n\r\n* TANDS-19169\r\n\r\n* TANDS-19169\r\n\r\n* TANDS-19169\r\n\r\n* TANDS-19169\r\n\r\n* TANDS-19169\r\n\r\n* TANDS-19169\r\n\r\n* TANDS-19169-changing-CVSS-score\r\n\r\n* addTransaction-removeTransaction\r\n\r\n* addTransaction-removeTransaction\r\n\r\n* addTransaction-removeTransaction\r\n\r\n* addTransaction-removeTransaction\r\n\r\n* addTransaction-removeTransaction\r\n\r\n* addressing-comments\r\n\r\n* addressing-comments\r\n\r\n* addressing-comments\r\n\r\n* addressing-comments\r\n\r\n* addressing-comments\r\n\r\n* addressing-comments\r\n\r\n* addressing-comments\r\n\r\n* addressing-comments\r\n\r\n* addressing-comments\r\n\r\n* making DataStore an abstract class\r\n\r\n* making DataStore an abstract class\r\n\r\n* fixing bugs\r\n\r\n* fixing bugs\r\n\r\n* fixing bugs\r\n\r\n* fixing bugs\r\n\r\n* fixing bugs\r\n\r\n* fixing bugs\r\n\r\n* fixing bugs\r\n\r\n* fixing bugs\r\n\r\n* fixing bugs\r\n\r\n* fixing bugs\r\n\r\n* fixing bugs\r\n\r\n* fixing bugs\r\n\r\n* adding-transaction-id to transaction implementations\r\n\r\n* adding-transaction-id to transaction implementations\r\n\r\n* adding-transaction-id to transaction implementations\r\n\r\n* adding-transaction-id to transaction implementations\r\n\r\n* fixing bugs\r\n\r\n* fixing bugs\r\n\r\n* fixing bugs\r\n\r\n* fixing bugs\r\n\r\n* fixing bugs\r\n\r\n* fixing bugs\r\n\r\n* fixing bugs\r\n\r\n* fixing bugs\r\n\r\n* fixing bugs\r\n\r\n* fixing bugs\r\n\r\n* addressing comments\r\n\r\n* addressing comments\r\n\r\n* addressing comments\r\n\r\n* fixing bugs\r\n\r\nCo-authored-by: Ramsha Rao <ramsha.rao@verizonmedia.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aaf621f72654b4b953b8f0773c86c8bdaaf7b594", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/aaf621f72654b4b953b8f0773c86c8bdaaf7b594", "committedDate": "2020-05-28T15:40:05Z", "message": "Fixed rebase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4623bcd634406d7828736f4fa8a09e89e8a7fff", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/d4623bcd634406d7828736f4fa8a09e89e8a7fff", "committedDate": "2020-05-28T15:41:04Z", "message": "Removed old elide example modules"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2abbf68533160dae026a0c967c1b3502e0fc2fa0", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/2abbf68533160dae026a0c967c1b3502e0fc2fa0", "committedDate": "2020-05-28T15:55:17Z", "message": "[maven-release-plugin] prepare release 5.0.0-pr10"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3dc187c561ff40a74e4eb9c8fc6346ac9a75f91f", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/3dc187c561ff40a74e4eb9c8fc6346ac9a75f91f", "committedDate": "2020-05-28T15:55:40Z", "message": "[maven-release-plugin] prepare for next development iteration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0ef023dec0d66ec0cab651e075167cfe833811f", "author": {"user": {"login": "rishi-aga", "name": null}}, "url": "https://github.com/yahoo/elide/commit/f0ef023dec0d66ec0cab651e075167cfe833811f", "committedDate": "2020-06-01T16:15:41Z", "message": "Validation for Model Configs (#1306)\n\n* Dynamic Config Validator\r\n\r\nCo-authored-by: rishi-aga <rishi.aga123@gmail.com>\r\n\r\n* Review Comments\r\n\r\n* Review Comments\r\n\r\n* Use DynamicConfigValidator instead of ElideConfigParser\r\n\r\nCo-authored-by: moiz arafat <moiz.arafat@verizonmedia.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46f83b0dc04df42e06f5b6a7f52c13d0e2dee449", "author": {"user": {"login": "Chandrasekar-Rajasekar", "name": null}}, "url": "https://github.com/yahoo/elide/commit/46f83b0dc04df42e06f5b6a7f52c13d0e2dee449", "committedDate": "2020-06-03T22:11:14Z", "message": "add explicit join (#1364)\n\nCo-authored-by: Chandrasekar Rajasekar <chandrasekar.rajasekar@oath.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2853ad4d2d9fa2b9576626ab7a71c8d935a20394", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/2853ad4d2d9fa2b9576626ab7a71c8d935a20394", "committedDate": "2020-06-04T15:06:59Z", "message": "Fixes - Honor Doc Version in SwaggerController and Use ISO8601Dates Serde Format in Date Formatting  (#1336)\n\n* misc_fixes\r\n\r\n* review comments\r\n\r\n* Review Comments\r\n\r\n* DyFixes\r\n\r\n* DyFixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2094833eccf4eac51ce423e11f2769381d10242", "author": {"user": {"login": "AvaniMakwana", "name": "Avani Makwana"}}, "url": "https://github.com/yahoo/elide/commit/f2094833eccf4eac51ce423e11f2769381d10242", "committedDate": "2020-06-10T15:53:43Z", "message": "Elide dynamic config model verification (#1354)\n\n* sign & Verify model\r\n\r\n* review comments\r\n\r\n* typo fix\r\n\r\n* indent fix\r\n\r\n* review comment\r\n\r\n* additional testcases\r\n\r\n* revert system exit\r\n\r\n* fix codacy\r\n\r\n* add return\r\n\r\n* add system exit\r\n\r\nCo-authored-by: amakwana <avani.makwana@oath.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af132fd2a73af3f18661db78eca514f8d3038ecf", "author": {"user": {"login": "john-karp", "name": "John Karp"}}, "url": "https://github.com/yahoo/elide/commit/af132fd2a73af3f18661db78eca514f8d3038ecf", "committedDate": "2020-06-12T21:53:17Z", "message": "Add caching support to SQLQueryEngine (#1319)\n\n* Support caching in SQLQueryEngine\r\n\r\n* Allow SQLUnitTest.init to set cache\r\n\r\n* Add SQLQueryEngine cache unit tests\r\n\r\n* Declare query dimensions / metrics non-null\r\n\r\n* Handle table version as String\r\n\r\n* Polish QueryKeyExtractor\r\n\r\n* Add QueryKeyExtractor UTs\r\n\r\n* Manage QueryEngine.Transaction in AggregationDataStoreTransaction\r\n\r\n* Fix UTs\r\n\r\n* Fix assertEquals in existing UT\r\n\r\n* Move caching to AggregationDataStoreTransaction\r\n\r\n* Change getTableVersion to take table argument\r\n\r\n* Address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df7926f2eacd0c636ec775808aa97cee500c7dec", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/df7926f2eacd0c636ec775808aa97cee500c7dec", "committedDate": "2020-06-16T16:23:58Z", "message": "Miscellanous fix (#1371)\n\n* Debug\r\n\r\n* Update DefaultAsyncQueryDAO.java\r\n\r\n* Update DefaultAsyncQueryDAO.java\r\n\r\n* Throw exception instead\r\n\r\n* Update AsyncQueryInterruptThread.java\r\n\r\n* Update pom.xml\r\n\r\n* Unit test case update\r\n\r\n* Update DefaultAsyncQueryDAO.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff86c56fde9064e1719ea35660fd04c42c949662", "author": {"user": {"login": "Rkr1992", "name": null}}, "url": "https://github.com/yahoo/elide/commit/ff86c56fde9064e1719ea35660fd04c42c949662", "committedDate": "2020-06-17T16:26:09Z", "message": "implement cancel function (#1367)\n\n* implement cancel function\r\n\r\n* addressing comments\r\n\r\n* addressing comments\r\n\r\n* Future implementation\r\n\r\n* Future implementation\r\n\r\n* Future implementation\r\n\r\n* Future implementation\r\n\r\n* Future implementation\r\n\r\n* adding Future Task\r\n\r\n* adding Future Task\r\n\r\n* adding Future Task\r\n\r\n* fixing future implementation\r\n\r\n* fixing future implementation\r\n\r\n* fixing future implementation\r\n\r\n* fixing future implementation\r\n\r\n* fixing future implementation\r\n\r\n* fixing issues\r\n\r\n* fixing issues\r\n\r\n* fixing issues\r\n\r\n* fixing issues\r\n\r\n* fixing issues\r\n\r\n* fixing issues\r\n\r\n* fixing issues\r\n\r\n* fixing issues\r\n\r\n* fixing issues\r\n\r\n* fixing issues\r\n\r\n* fixing issues\r\n\r\n* fixing issues\r\n\r\n* fixing issues\r\n\r\n* fixing issues\r\n\r\n* fixing issues\r\n\r\n* fixing issues\r\n\r\n* fixing issues\r\n\r\n* fixing issues\r\n\r\n* fixing issues\r\n\r\n* fixing issues\r\n\r\n* fixing issues\r\n\r\n* fixing issues\r\n\r\n* fixing issues\r\n\r\n* fixing bugs\r\n\r\n* fixing issues\r\n\r\n* fixing issues\r\n\r\n* fixing issues\r\n\r\n* fixing issues\r\n\r\n* fixing bugs\r\n\r\n* fixing bugs\r\n\r\n* fixing bugs\r\n\r\n* fixing bugs\r\n\r\n* fixing bugs\r\n\r\n* fixing bugs\r\n\r\n* fixing bugs\r\n\r\n* fixing bugs\r\n\r\n* ExecutionException\r\n\r\n* fixing issues\r\n\r\n* aggregation changes\r\n\r\n* aggregation changes\r\n\r\n* aggregation changes\r\n\r\n* fixing bugs\r\n\r\n* fixing bugs\r\n\r\n* fixing bugs\r\n\r\n* rebasing\r\n\r\n* adddressing comments\r\n\r\n* adddressing comments\r\n\r\n* addressing comments\r\n\r\n* addressing comments\r\n\r\nCo-authored-by: Ramsha Rao <ramsha.rao@verizonmedia.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5da1616f92275e7893a57965107d8e077ca87768", "author": {"user": {"login": "john-karp", "name": "John Karp"}}, "url": "https://github.com/yahoo/elide/commit/5da1616f92275e7893a57965107d8e077ca87768", "committedDate": "2020-06-17T19:08:31Z", "message": "Enable query caching by default (#1378)\n\n* Create new cache package\r\n\r\n* Add caffeine cache based impl\r\n\r\n* Configure Caffeine cache by default\r\n\r\n* Publish cache metrics under Spring/micrometer\r\n\r\n* Lint\r\n\r\n* Fix javadoc\r\n\r\n* Rename max cache size for clarity\r\n\r\n* Update ElideAutoConfiguration.java\r\n\r\nCo-authored-by: Aaron Klish <aklish@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa4b3e82601adc3bff677382940d547c59465aa4", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/aa4b3e82601adc3bff677382940d547c59465aa4", "committedDate": "2020-06-19T15:43:46Z", "message": "Multiplex Transaction Lazy Initialize and Dynamic Config fixes (#1383)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f948ba42b041367868f07dc00e762e5bd36df68", "author": {"user": {"login": "ayeswarya", "name": null}}, "url": "https://github.com/yahoo/elide/commit/5f948ba42b041367868f07dc00e762e5bd36df68", "committedDate": "2020-06-19T20:40:06Z", "message": "CARBON-212 TimeZone Serde (#1386)\n\n* serde code\r\n\r\n* default val\r\n\r\n* timezone serde tests\r\n\r\n* refactor\r\n\r\n* review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40ed701d0f0e64d5ece915222b925e17782425df", "author": {"user": {"login": "john-karp", "name": "John Karp"}}, "url": "https://github.com/yahoo/elide/commit/40ed701d0f0e64d5ece915222b925e17782425df", "committedDate": "2020-06-23T18:25:39Z", "message": "Fixes for query cache spring integration (#1381)\n\n* Test that query cache is active and publishing metrics\r\n\r\n* Update README.md with new property\r\n\r\n* Align columns\r\n\r\n* Allow injected Cache to be null\r\n\r\n* Fix typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df72df0430254e8c90ecdbf2e63a1167aa094bec", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/df72df0430254e8c90ecdbf2e63a1167aa094bec", "committedDate": "2020-06-23T21:22:39Z", "message": "[maven-release-plugin] prepare release 5.0.0-pr11"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "600444a4870bea384dffe8c0964673594ecd4293", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/600444a4870bea384dffe8c0964673594ecd4293", "committedDate": "2020-06-23T21:22:59Z", "message": "[maven-release-plugin] prepare for next development iteration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "761e0e90185a685da609f9e582fea627af01bcd6", "author": {"user": {"login": "jkusa", "name": "Jon Kilroy"}}, "url": "https://github.com/yahoo/elide/commit/761e0e90185a685da609f9e582fea627af01bcd6", "committedDate": "2020-06-24T22:03:31Z", "message": "Update: Remove slf4j-simple dependency (#1402)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8878db5078785d3502668466208b0a6d0da19914", "author": {"user": {"login": "jkusa", "name": "Jon Kilroy"}}, "url": "https://github.com/yahoo/elide/commit/8878db5078785d3502668466208b0a6d0da19914", "committedDate": "2020-06-24T22:03:58Z", "message": "Fix: Check for null super in `getInheritedTypes` (#1401)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c74e629c19fde960662b4a5a7c945f74207728d6", "author": {"user": {"login": "ayeswarya", "name": null}}, "url": "https://github.com/yahoo/elide/commit/c74e629c19fde960662b4a5a7c945f74207728d6", "committedDate": "2020-06-25T21:56:26Z", "message": "Carbon 167 Async Enhancements Embeddable (#1353)\n\n* changes from old branch for async enhancements\r\n\r\n* remove dependencies and column annotation\r\n\r\n* pr11\r\n\r\n* remove commented line\r\n\r\n* gs\r\n\r\n* async after test scenarios per review comments\r\n\r\n* reduce redundancy\r\n\r\n* changes to async query execution\r\n\r\n* review tweaks\r\n\r\n* remove unused method\r\n\r\n* Test cases\r\n\r\n* integration test\r\n\r\n* exception name\r\n\r\n* commit hook and async it tests\r\n\r\n* Async Happy Path tests and new delay datastore\r\n\r\n* extend IntegrationTest\r\n\r\n* checkstyle fix\r\n\r\n* transient update query worker\r\n\r\n* exception catch change\r\n\r\n* unit test and comments\r\n\r\n* codacy\r\n\r\n* codacy\r\n\r\n* remove imports\r\n\r\n* add to remove\r\n\r\n* remove interrupt thread\r\n\r\n* interrrupt thread\r\n\r\n* delete interrupt thread\r\n\r\n* add back interrupt thread\r\n\r\n* Review comments\r\n\r\n* add interrupt\r\n\r\n* remove interrupt\r\n\r\n* include interrupt thread to overcome merge conflict\r\n\r\n* merge 5.x\r\n\r\n* test changes\r\n\r\n* remove asyncinterruptthread\r\n\r\n* graphql tests and remove mocking for queryObj\r\n\r\n* dsl generation of queries for happy path graphql tests\r\n\r\n* review changes\r\n\r\n* move sleep delay flag to aftereach method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24c97b63760cc3caee09be7f8db07301c572fae2", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/24c97b63760cc3caee09be7f8db07301c572fae2", "committedDate": "2020-06-25T22:15:57Z", "message": "[maven-release-plugin] prepare release 5.0.0-pr12"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4901c6f07e57aa179c5afd640c9c67e90a8cdaf", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/d4901c6f07e57aa179c5afd640c9c67e90a8cdaf", "committedDate": "2020-06-25T22:16:14Z", "message": "[maven-release-plugin] prepare for next development iteration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae8444a8b561969b746ba8d44e3ce04ea6ed43c7", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/ae8444a8b561969b746ba8d44e3ce04ea6ed43c7", "committedDate": "2020-07-02T15:07:19Z", "message": "Async change to use onReadPreSecurity Hook (#1409)\n\n* Fix for graphql async\r\n\r\n* Aysnc ReadPreSecurity Hook\r\n\r\n* Review comments\r\n\r\n* Review comments\r\n\r\n* Review comments\r\n\r\n* fix for NPE\r\n\r\n* checkstyle fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a9af0463a45e828cc7d8fc4231c21733c26b3fb", "author": {"user": {"login": "ayeswarya", "name": null}}, "url": "https://github.com/yahoo/elide/commit/4a9af0463a45e828cc7d8fc4231c21733c26b3fb", "committedDate": "2020-07-02T15:11:08Z", "message": "Carbon 213 - Add Category to table and columns (#1407)\n\n* add category to aggregate\r\n\r\n* initial working code\r\n\r\n* refactor testcases:\r\n\r\n* test table category\r\n\r\n* remove category for metric function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f9d946559d2800d56f0696e2946c10e6b30868f", "author": {"user": {"login": "aklish", "name": "Aaron Klish"}}, "url": "https://github.com/yahoo/elide/commit/6f9d946559d2800d56f0696e2946c10e6b30868f", "committedDate": "2020-07-02T20:05:53Z", "message": "Added tests for GraphQL Fragment Regression (#1414)\n\nCo-authored-by: Aaron Klish <klish@verizonmedia.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7f666492246a529b3c2816371b149dddb0df030", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/b7f666492246a529b3c2816371b149dddb0df030", "committedDate": "2020-07-02T20:24:23Z", "message": "[maven-release-plugin] prepare release 5.0.0-pr13"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7ba85a05153f50f3ad42c52f66c895fa382315e", "author": {"user": null}, "url": "https://github.com/yahoo/elide/commit/a7ba85a05153f50f3ad42c52f66c895fa382315e", "committedDate": "2020-07-02T20:24:39Z", "message": "[maven-release-plugin] prepare for next development iteration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d8d9446bafdc7047b283e3a0d64525f7d158222", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/1d8d9446bafdc7047b283e3a0d64525f7d158222", "committedDate": "2020-07-08T14:24:33Z", "message": "Elide 5.x - Async Tests, Break loop when fail (#1422)\n\n* Loop Break when query fails\r\n\r\n* adding assert fail\r\n\r\n* Removing queued\r\n\r\n* Import fix\r\n\r\n* Tomcat version fix\r\n\r\n* Assert import\r\n\r\n* Error message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99bef6f242f340421535d897632b8b80f1e1f4d2", "author": {"user": {"login": "moizarafat", "name": "Moiz Arafat"}}, "url": "https://github.com/yahoo/elide/commit/99bef6f242f340421535d897632b8b80f1e1f4d2", "committedDate": "2020-07-08T19:59:15Z", "message": "Elide 5.x Async Create Permission Fix (#1425)\n\n* NCreate Permission Check on AsyncQuery\r\n\r\n* Create Permission Check on AsyncQuery\r\n\r\n* Updating test case\r\n\r\n* Cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70ab71e8f07e11161fecd6c77687bede370bb95f", "author": {"user": {"login": "aklish", "name": "Aaron Klish"}}, "url": "https://github.com/yahoo/elide/commit/70ab71e8f07e11161fecd6c77687bede370bb95f", "committedDate": "2020-07-08T22:26:47Z", "message": "Elide 5- Unify request ids (#1423)\n\n* Unified request ID for elide 5\r\n\r\n* Fixing issues\r\n\r\n* Fixed some tests\r\n\r\n* Fixed build\r\n\r\n* Removed Data Store Transaction changes for request ID\r\n\r\n* Inspection rework\r\n\r\nCo-authored-by: Aaron Klish <klish@verizonmedia.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cf0e22d90594132baf9b57c8141cb409b2dda37", "author": {"user": {"login": "dvarshney1", "name": "Daksh Varshney"}}, "url": "https://github.com/yahoo/elide/commit/7cf0e22d90594132baf9b57c8141cb409b2dda37", "committedDate": "2020-07-10T14:26:14Z", "message": "Merge Conflicts Elide-5.x fixed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf3351f6cd521e667f2b504fd4214e6486fff156", "author": {"user": {"login": "dvarshney1", "name": "Daksh Varshney"}}, "url": "https://github.com/yahoo/elide/commit/bf3351f6cd521e667f2b504fd4214e6486fff156", "committedDate": "2020-07-16T16:57:09Z", "message": "Basic Implementation Ready"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e01af91856bafb19ef7fdc5cf3f61cc9557e2aa", "author": {"user": {"login": "dvarshney1", "name": "Daksh Varshney"}}, "url": "https://github.com/yahoo/elide/commit/9e01af91856bafb19ef7fdc5cf3f61cc9557e2aa", "committedDate": "2020-07-16T18:20:01Z", "message": "Tests Updated"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab4b03a37aed5df33c34cc0444a8f613db76fef3", "author": {"user": {"login": "dvarshney1", "name": "Daksh Varshney"}}, "url": "https://github.com/yahoo/elide/commit/ab4b03a37aed5df33c34cc0444a8f613db76fef3", "committedDate": "2020-07-17T22:00:48Z", "message": "AggregationDS Query Logger Implemented"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwOTgzOTgw", "url": "https://github.com/yahoo/elide/pull/1448#pullrequestreview-450983980", "createdAt": "2020-07-17T22:18:54Z", "commit": {"oid": "ab4b03a37aed5df33c34cc0444a8f613db76fef3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMjoxODo1NFrOGzil8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMjozMDoxNVrOGzixnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY5NzMzMA==", "bodyText": "Why not just set the logger in the constructor?", "url": "https://github.com/yahoo/elide/pull/1448#discussion_r456697330", "createdAt": "2020-07-17T22:18:54Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java", "diffHunk": "@@ -74,6 +76,11 @@ public void populateEntityDictionary(EntityDictionary dictionary) {\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-        return new AggregationDataStoreTransaction(queryEngine, cache);\n+        return new AggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n+    }\n+\n+    public AggregationDataStore setupCustomQueryLogger(QueryLogger logger) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab4b03a37aed5df33c34cc0444a8f613db76fef3"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY5Nzc3Nw==", "bodyText": "There are enums with the HTTP status codes (Like HttpStatus).", "url": "https://github.com/yahoo/elide/pull/1448#discussion_r456697777", "createdAt": "2020-07-17T22:20:30Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java", "diffHunk": "@@ -61,27 +70,41 @@ public void createObject(Object entity, RequestScope scope) {\n \n     @Override\n     public Iterable<Object> loadObjects(EntityProjection entityProjection, RequestScope scope) {\n-        Query query = buildQuery(entityProjection, scope);\n         QueryResult result = null;\n-\n+        QueryResponse response = null;\n         String cacheKey = null;\n-        if (cache != null && !query.isBypassingCache()) {\n-            String tableVersion = queryEngine.getTableVersion(query.getTable(), queryEngineTransaction);\n-            if (tableVersion != null) {\n-                cacheKey = tableVersion + ';' + QueryKeyExtractor.extractKey(query);\n-                result = cache.get(cacheKey);\n+        try {\n+            aggregationAcceptQuery(scope);\n+            Query query = buildQuery(entityProjection, scope);\n+            if (cache != null && !query.isBypassingCache()) {\n+                String tableVersion = queryEngine.getTableVersion(query.getTable(), queryEngineTransaction);\n+                if (tableVersion != null) {\n+                    cacheKey = tableVersion + ';' + QueryKeyExtractor.extractKey(query);\n+                    result = cache.get(cacheKey);\n+                }\n             }\n-        }\n-        if (result == null) {\n-            result = queryEngine.executeQuery(query, queryEngineTransaction);\n-            if (cacheKey != null) {\n-                cache.put(cacheKey, result);\n+            aggregationProcessQuery(result, entityProjection.getType().getName(),\n+                    query, scope);\n+            if (result == null) {\n+                result = queryEngine.executeQuery(query, queryEngineTransaction);\n+                if (cacheKey != null) {\n+                    cache.put(cacheKey, result);\n+                }\n             }\n+            if (entityProjection.getPagination() != null && entityProjection.getPagination().returnPageTotals()) {\n+                entityProjection.getPagination().setPageTotals(result.getPageTotals());\n+            }\n+            response = new QueryResponse(200, result.getData(), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab4b03a37aed5df33c34cc0444a8f613db76fef3"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY5ODExMw==", "bodyText": "Not all query engines are SQL query engines.  QueryEngine cannot have a dependency on anything related to SQL.", "url": "https://github.com/yahoo/elide/pull/1448#discussion_r456698113", "createdAt": "2020-07-17T22:21:41Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java", "diffHunk": "@@ -193,4 +194,12 @@ private void populateMetaData(MetaDataStore metaDataStore) {\n     public Table getTable(String classAlias) {\n         return tables.get(classAlias);\n     }\n+\n+    /**\n+     * Translates the client query into SQL.\n+     *\n+     * @param query the client query.\n+     * @return the SQL query.\n+     */\n+    public abstract SQLQuery toSQL(Query query);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab4b03a37aed5df33c34cc0444a8f613db76fef3"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY5ODMwMg==", "bodyText": "Instead, make this method:\npublic abstract String explain(Query query);", "url": "https://github.com/yahoo/elide/pull/1448#discussion_r456698302", "createdAt": "2020-07-17T22:22:23Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java", "diffHunk": "@@ -193,4 +194,12 @@ private void populateMetaData(MetaDataStore metaDataStore) {\n     public Table getTable(String classAlias) {\n         return tables.get(classAlias);\n     }\n+\n+    /**\n+     * Translates the client query into SQL.\n+     *\n+     * @param query the client query.\n+     * @return the SQL query.\n+     */\n+    public abstract SQLQuery toSQL(Query query);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY5ODExMw=="}, "originalCommit": {"oid": "ab4b03a37aed5df33c34cc0444a8f613db76fef3"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY5ODgyOQ==", "bodyText": "I don't think this is ever invoked.", "url": "https://github.com/yahoo/elide/pull/1448#discussion_r456698829", "createdAt": "2020-07-17T22:24:42Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/QueryLogger.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.core;\n+\n+import java.security.Principal;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+/**\n+ * Query Logger Interface for Elide\n+ */\n+public interface QueryLogger {\n+\n+    /**\n+     * Accepts the incoming GraphQL query and notes the start time for the query\n+     * @param queryId The RequestScope requestId.\n+     * @param user The Principal user\n+     * @param headers Http Request Headers\n+     * @param apiVer API Version\n+     * @param apiQuery QueryString of the requested URL request\n+     */\n+    void acceptQuery(UUID queryId, Principal user, Map<String, String> headers,\n+                     String apiVer, String apiQuery);\n+\n+    /**\n+     * Accepts the incoming JSON API query and notes the start time for the query\n+     * @param queryId The RequestScope requestId.\n+     * @param user The Principal user\n+     * @param headers Http Request Headers\n+     * @param apiVer API Version\n+     * @param queryParams QueryParams for the incoming JSON API query\n+     * @param path The apiQuery endpoint path for the incoming query\n+     */\n+    void acceptQuery(UUID queryId, Principal user, Map<String, String> headers, String apiVer,\n+                     Optional<MultivaluedMap<String, String>> queryParams, String path);\n+\n+    /**\n+     * Processes and logs all the queries from QueryDetail\n+     * @param queryId The RequestScope requestId.\n+     * @param qd The QueryDetail Object\n+     */\n+    void processQuery(UUID queryId, QueryDetail qd);\n+\n+    /**\n+     * Cancels all queries currently running for a particular requestId\n+     * @param queryId The RequestScope requestId.\n+     */\n+    void cancelQuery(UUID queryId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab4b03a37aed5df33c34cc0444a8f613db76fef3"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY5OTgzOQ==", "bodyText": "I think I might try to collapse these three functions into the main logic.  A few reasons:\n\nSingle line functions are often not necessary.\nThe isCached logic is tied to code outside the function - so this can't really be reused (the purpose of a function).\nSome of the variables seem like they might be common across the functions.", "url": "https://github.com/yahoo/elide/pull/1448#discussion_r456699839", "createdAt": "2020-07-17T22:28:33Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java", "diffHunk": "@@ -104,4 +127,20 @@ Query buildQuery(EntityProjection entityProjection, RequestScope scope) {\n     public void cancel() {\n         queryEngineTransaction.cancel();\n     }\n+\n+    private void aggregationCompleteQuery(RequestScope scope, QueryResponse response) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab4b03a37aed5df33c34cc0444a8f613db76fef3"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcwMDAzOQ==", "bodyText": "Instead of modelName - what if we changed this to the query itself (of type Query).", "url": "https://github.com/yahoo/elide/pull/1448#discussion_r456700039", "createdAt": "2020-07-17T22:29:25Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/QueryDetail.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.core;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.Value;\n+\n+/**\n+ * QueryDetail implementation class. Stores the model name (root entity class) and\n+ * the queryText that the underlying datastore will eventually run\n+ */\n+@Value\n+@AllArgsConstructor\n+@NoArgsConstructor(force = true)\n+public class QueryDetail {\n+    @Getter private String modelName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab4b03a37aed5df33c34cc0444a8f613db76fef3"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcwMDMxOQ==", "bodyText": "On second thought, It might be cleaner if we just made these arguments to the processQuery function.  QueryDetail is missing some fields (like the requestId) - which makes me think they all either need to come together - or we should keep them as separate arguments.", "url": "https://github.com/yahoo/elide/pull/1448#discussion_r456700319", "createdAt": "2020-07-17T22:30:15Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/QueryDetail.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.core;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.Value;\n+\n+/**\n+ * QueryDetail implementation class. Stores the model name (root entity class) and\n+ * the queryText that the underlying datastore will eventually run\n+ */\n+@Value\n+@AllArgsConstructor\n+@NoArgsConstructor(force = true)\n+public class QueryDetail {\n+    @Getter private String modelName;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcwMDAzOQ=="}, "originalCommit": {"oid": "ab4b03a37aed5df33c34cc0444a8f613db76fef3"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61b44dbd637321637c7acb79ad4d854e7ecab262", "author": {"user": {"login": "dvarshney1", "name": "Daksh Varshney"}}, "url": "https://github.com/yahoo/elide/commit/61b44dbd637321637c7acb79ad4d854e7ecab262", "committedDate": "2020-07-20T21:00:11Z", "message": "First set of reviews fixed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyODExODc3", "url": "https://github.com/yahoo/elide/pull/1448#pullrequestreview-452811877", "createdAt": "2020-07-21T20:39:57Z", "commit": {"oid": "61b44dbd637321637c7acb79ad4d854e7ecab262"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDozOTo1N1rOG1I8AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDo0MjoyOFrOG1JA4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM3NDE0NA==", "bodyText": "Let's remove the QueryDetail class - and instead pass the Query object here along with queryText and isCached flags.", "url": "https://github.com/yahoo/elide/pull/1448#discussion_r458374144", "createdAt": "2020-07-21T20:39:57Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/QueryLogger.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.core;\n+\n+import java.security.Principal;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+/**\n+ * Query Logger Interface for Elide\n+ */\n+public interface QueryLogger {\n+\n+    /**\n+     * Accepts the incoming GraphQL query and notes the start time for the query\n+     * @param queryId The RequestScope requestId.\n+     * @param user The Principal user\n+     * @param headers Http Request Headers\n+     * @param apiVer API Version\n+     * @param apiQuery QueryString of the requested URL request\n+     */\n+    void acceptQuery(UUID queryId, Principal user, Map<String, String> headers,\n+                     String apiVer, String apiQuery);\n+\n+    /**\n+     * Accepts the incoming JSON API query and notes the start time for the query\n+     * @param queryId The RequestScope requestId.\n+     * @param user The Principal user\n+     * @param headers Http Request Headers\n+     * @param apiVer API Version\n+     * @param queryParams QueryParams for the incoming JSON API query\n+     * @param path The apiQuery endpoint path for the incoming query\n+     */\n+    void acceptQuery(UUID queryId, Principal user, Map<String, String> headers, String apiVer,\n+                     Optional<MultivaluedMap<String, String>> queryParams, String path);\n+\n+    /**\n+     * Processes and logs all the queries from QueryDetail\n+     * @param queryId The RequestScope requestId.\n+     * @param qd The QueryDetail Object\n+     */\n+    void processQuery(UUID queryId, QueryDetail qd);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61b44dbd637321637c7acb79ad4d854e7ecab262"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM3NTM5Mg==", "bodyText": "So I think we should call this function from transaction.cancel.  In order for that to work, we probably need to change the contract of the DataStoreTransaction.cancel to include the RequestScope.", "url": "https://github.com/yahoo/elide/pull/1448#discussion_r458375392", "createdAt": "2020-07-21T20:42:28Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/QueryLogger.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.core;\n+\n+import java.security.Principal;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+/**\n+ * Query Logger Interface for Elide\n+ */\n+public interface QueryLogger {\n+\n+    /**\n+     * Accepts the incoming GraphQL query and notes the start time for the query\n+     * @param queryId The RequestScope requestId.\n+     * @param user The Principal user\n+     * @param headers Http Request Headers\n+     * @param apiVer API Version\n+     * @param apiQuery QueryString of the requested URL request\n+     */\n+    void acceptQuery(UUID queryId, Principal user, Map<String, String> headers,\n+                     String apiVer, String apiQuery);\n+\n+    /**\n+     * Accepts the incoming JSON API query and notes the start time for the query\n+     * @param queryId The RequestScope requestId.\n+     * @param user The Principal user\n+     * @param headers Http Request Headers\n+     * @param apiVer API Version\n+     * @param queryParams QueryParams for the incoming JSON API query\n+     * @param path The apiQuery endpoint path for the incoming query\n+     */\n+    void acceptQuery(UUID queryId, Principal user, Map<String, String> headers, String apiVer,\n+                     Optional<MultivaluedMap<String, String>> queryParams, String path);\n+\n+    /**\n+     * Processes and logs all the queries from QueryDetail\n+     * @param queryId The RequestScope requestId.\n+     * @param qd The QueryDetail Object\n+     */\n+    void processQuery(UUID queryId, QueryDetail qd);\n+\n+    /**\n+     * Cancels all queries currently running for a particular requestId\n+     * @param queryId The RequestScope requestId.\n+     */\n+    void cancelQuery(UUID queryId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY5ODgyOQ=="}, "originalCommit": {"oid": "ab4b03a37aed5df33c34cc0444a8f613db76fef3"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94aaf6dcbd95278fd5b0b003ab49af8d9d33b152", "author": {"user": {"login": "dvarshney1", "name": "Daksh Varshney"}}, "url": "https://github.com/yahoo/elide/commit/94aaf6dcbd95278fd5b0b003ab49af8d9d33b152", "committedDate": "2020-07-22T20:08:41Z", "message": "Second Set of Reviews Fixed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNzA3Mjg2", "url": "https://github.com/yahoo/elide/pull/1448#pullrequestreview-453707286", "createdAt": "2020-07-22T21:43:41Z", "commit": {"oid": "94aaf6dcbd95278fd5b0b003ab49af8d9d33b152"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMTo0Mzo0MVrOG11UUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMTo1MToxM1rOG11h1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEwMTI2Ng==", "bodyText": "We should mention that this method must be thread safe.", "url": "https://github.com/yahoo/elide/pull/1448#discussion_r459101266", "createdAt": "2020-07-22T21:43:41Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/core/QueryLogger.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.core;\n+\n+import com.yahoo.elide.datastores.aggregation.query.Query;\n+\n+import java.security.Principal;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+/**\n+ * Query Logger Interface for Elide\n+ */\n+public interface QueryLogger {\n+\n+    /**\n+     * Accepts the incoming GraphQL query and notes the start time for the query\n+     * @param queryId The RequestScope requestId.\n+     * @param user The Principal user\n+     * @param headers Http Request Headers\n+     * @param apiVer API Version\n+     * @param apiQuery QueryString of the requested URL request\n+     */\n+    void acceptQuery(UUID queryId, Principal user, Map<String, String> headers,\n+                     String apiVer, String apiQuery);\n+\n+    /**\n+     * Accepts the incoming JSON API query and notes the start time for the query\n+     * @param queryId The RequestScope requestId.\n+     * @param user The Principal user\n+     * @param headers Http Request Headers\n+     * @param apiVer API Version\n+     * @param queryParams QueryParams for the incoming JSON API query\n+     * @param path The apiQuery endpoint path for the incoming query\n+     */\n+    void acceptQuery(UUID queryId, Principal user, Map<String, String> headers, String apiVer,\n+                     Optional<MultivaluedMap<String, String>> queryParams, String path);\n+\n+    /**\n+     * Processes and logs all the queries from QueryDetail\n+     * @param queryId The RequestScope requestId.\n+     * @param query The underlying Query\n+     * @param apiQuery The output querytext\n+     * @param isCached Whether the result came from a cache or not\n+     */\n+    void processQuery(UUID queryId, Query query, String apiQuery, boolean isCached);\n+\n+    /**\n+     * Cancels all queries currently running for a particular requestId\n+     * @param queryId The RequestScope requestId.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94aaf6dcbd95278fd5b0b003ab49af8d9d33b152"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEwMjMyOA==", "bodyText": "Do we need both of these acceptQuery methods or can we just have the one below?", "url": "https://github.com/yahoo/elide/pull/1448#discussion_r459102328", "createdAt": "2020-07-22T21:45:59Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/core/QueryLogger.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.core;\n+\n+import com.yahoo.elide.datastores.aggregation.query.Query;\n+\n+import java.security.Principal;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+/**\n+ * Query Logger Interface for Elide\n+ */\n+public interface QueryLogger {\n+\n+    /**\n+     * Accepts the incoming GraphQL query and notes the start time for the query\n+     * @param queryId The RequestScope requestId.\n+     * @param user The Principal user\n+     * @param headers Http Request Headers\n+     * @param apiVer API Version\n+     * @param apiQuery QueryString of the requested URL request\n+     */\n+    void acceptQuery(UUID queryId, Principal user, Map<String, String> headers,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94aaf6dcbd95278fd5b0b003ab49af8d9d33b152"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEwMjg2NQ==", "bodyText": "I'm wondering if it would be more powerful to log the elide User object here instead of the Principal.  The user has some additional bits (like the role support).", "url": "https://github.com/yahoo/elide/pull/1448#discussion_r459102865", "createdAt": "2020-07-22T21:47:10Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/core/QueryLogger.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.core;\n+\n+import com.yahoo.elide.datastores.aggregation.query.Query;\n+\n+import java.security.Principal;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+/**\n+ * Query Logger Interface for Elide\n+ */\n+public interface QueryLogger {\n+\n+    /**\n+     * Accepts the incoming GraphQL query and notes the start time for the query\n+     * @param queryId The RequestScope requestId.\n+     * @param user The Principal user\n+     * @param headers Http Request Headers\n+     * @param apiVer API Version\n+     * @param apiQuery QueryString of the requested URL request\n+     */\n+    void acceptQuery(UUID queryId, Principal user, Map<String, String> headers,\n+                     String apiVer, String apiQuery);\n+\n+    /**\n+     * Accepts the incoming JSON API query and notes the start time for the query\n+     * @param queryId The RequestScope requestId.\n+     * @param user The Principal user\n+     * @param headers Http Request Headers\n+     * @param apiVer API Version\n+     * @param queryParams QueryParams for the incoming JSON API query\n+     * @param path The apiQuery endpoint path for the incoming query\n+     */\n+    void acceptQuery(UUID queryId, Principal user, Map<String, String> headers, String apiVer,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94aaf6dcbd95278fd5b0b003ab49af8d9d33b152"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEwMzAzNA==", "bodyText": "?", "url": "https://github.com/yahoo/elide/pull/1448#discussion_r459103034", "createdAt": "2020-07-22T21:47:36Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/core/QueryResponse.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.core;\n+//live inside aggregation ds", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94aaf6dcbd95278fd5b0b003ab49af8d9d33b152"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEwNDcyNw==", "bodyText": "I feel like we should have one test for query logging failures (where an exception is thrown).  Also, we should have one test for cancelation.", "url": "https://github.com/yahoo/elide/pull/1448#discussion_r459104727", "createdAt": "2020-07-22T21:51:13Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java", "diffHunk": "@@ -50,8 +54,8 @@\n     // inject our own query instead of using buildQuery impl\n     private class MyAggregationDataStoreTransaction extends AggregationDataStoreTransaction {\n \n-        public MyAggregationDataStoreTransaction(QueryEngine queryEngine, Cache cache) {\n-            super(queryEngine, cache);\n+        public MyAggregationDataStoreTransaction(QueryEngine queryEngine, Cache cache, QueryLogger queryLogger) {\n+            super(queryEngine, cache, queryLogger);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94aaf6dcbd95278fd5b0b003ab49af8d9d33b152"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "700497ca510017d5c0dfcf3be7b2e26ee789d106", "author": {"user": {"login": "dvarshney1", "name": "Daksh Varshney"}}, "url": "https://github.com/yahoo/elide/commit/700497ca510017d5c0dfcf3be7b2e26ee789d106", "committedDate": "2020-07-23T15:57:06Z", "message": "Thirs Set of Reviews Fixed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NDk2ODc3", "url": "https://github.com/yahoo/elide/pull/1448#pullrequestreview-454496877", "createdAt": "2020-07-23T21:09:00Z", "commit": {"oid": "700497ca510017d5c0dfcf3be7b2e26ee789d106"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTowOTowMFrOG2bqCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTowOToxN1rOG2bqiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcyOTQxOQ==", "bodyText": "I don't think we need this variable.", "url": "https://github.com/yahoo/elide/pull/1448#discussion_r459729419", "createdAt": "2020-07-23T21:09:00Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java", "diffHunk": "@@ -222,4 +224,47 @@ public void loadObjectsBypassCache() {\n         Mockito.verify(queryLogger, times(1)).completeQuery(\n                 Mockito.eq(scope.getRequestId()), any());\n     }\n+\n+    @Test\n+    public void loadObjectsExceptionThrownTest() throws Exception {\n+        Mockito.reset(queryLogger);\n+        Object result = null;\n+        try {\n+            query = Query.builder().table(playerStatsTable).bypassingCache(true).build();\n+            SQLQuery myQuery = SQLQuery.builder().clientQuery(query)\n+                    .fromClause(query.getTable().getName())\n+                    .projectionClause(\" \").build();\n+\n+            when(queryEngine.executeQuery(query, qeTransaction)).thenReturn(null);\n+            when(queryEngine.explain(query)).thenReturn(myQuery.toString());\n+            AggregationDataStoreTransaction transaction =\n+                    new MyAggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n+            EntityProjection entityProjection = EntityProjection.builder().type(PlayerStats.class).build();\n+\n+            transaction.loadObjects(entityProjection, scope);\n+\n+        } catch (Exception e) {\n+                result = e.getMessage();\n+        } finally {\n+            Object finalResult = result;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700497ca510017d5c0dfcf3be7b2e26ee789d106"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcyOTU0NQ==", "bodyText": "We can do this without the finally block.", "url": "https://github.com/yahoo/elide/pull/1448#discussion_r459729545", "createdAt": "2020-07-23T21:09:17Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java", "diffHunk": "@@ -222,4 +224,47 @@ public void loadObjectsBypassCache() {\n         Mockito.verify(queryLogger, times(1)).completeQuery(\n                 Mockito.eq(scope.getRequestId()), any());\n     }\n+\n+    @Test\n+    public void loadObjectsExceptionThrownTest() throws Exception {\n+        Mockito.reset(queryLogger);\n+        Object result = null;\n+        try {\n+            query = Query.builder().table(playerStatsTable).bypassingCache(true).build();\n+            SQLQuery myQuery = SQLQuery.builder().clientQuery(query)\n+                    .fromClause(query.getTable().getName())\n+                    .projectionClause(\" \").build();\n+\n+            when(queryEngine.executeQuery(query, qeTransaction)).thenReturn(null);\n+            when(queryEngine.explain(query)).thenReturn(myQuery.toString());\n+            AggregationDataStoreTransaction transaction =\n+                    new MyAggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n+            EntityProjection entityProjection = EntityProjection.builder().type(PlayerStats.class).build();\n+\n+            transaction.loadObjects(entityProjection, scope);\n+\n+        } catch (Exception e) {\n+                result = e.getMessage();\n+        } finally {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700497ca510017d5c0dfcf3be7b2e26ee789d106"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8ab236e8bef1517b35f4279dd29dad7d9c541d8", "author": {"user": {"login": "dvarshney1", "name": "Daksh Varshney"}}, "url": "https://github.com/yahoo/elide/commit/a8ab236e8bef1517b35f4279dd29dad7d9c541d8", "committedDate": "2020-07-24T14:01:56Z", "message": "Fourth Set of Reviews Fixed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MDAyNDc5", "url": "https://github.com/yahoo/elide/pull/1448#pullrequestreview-455002479", "createdAt": "2020-07-24T15:56:49Z", "commit": {"oid": "a8ab236e8bef1517b35f4279dd29dad7d9c541d8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 899, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}