{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5MTk4NzQ2", "number": 1176, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDo0NzoxNVrODcDiXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxNzowMTo0M1rODgKuyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzQ0NjcwOnYy", "diffSide": "RIGHT", "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/dialect/RSQLFilterDialect.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDo0NzoxNVrOFj5Z7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDo0NzoxNVrOFj5Z7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4NTAwNQ==", "bodyText": "copy pasted =isnull=. here should be =isempty=", "url": "https://github.com/yahoo/elide/pull/1176#discussion_r373185005", "createdAt": "2020-01-30T20:47:15Z", "author": {"login": "PatRolland"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/dialect/RSQLFilterDialect.java", "diffHunk": "@@ -368,5 +377,25 @@ private FilterExpression buildIsNullOperator(Path path, List<String> arguments)\n                 throw new RSQLParseException(String.format(\"Invalid value for operator =isnull= '%s'\", arg));\n             }\n         }\n+\n+        /**\n+         * Returns Predicate for '=isempty=' case depending on its arguments.\n+         * <p>\n+         * NOTE: Filter Expression builder specially for '=isnull=' case.\n+         *\n+         * @return\n+         */\n+        private FilterExpression buildIsEmptyOperator(Path path, List<String> arguments) {\n+            String arg = arguments.get(0);\n+            try {\n+                boolean wantsEmpty = CoerceUtil.coerce(arg, boolean.class);\n+                if (wantsEmpty) {\n+                    return new IsEmptyPredicate(path);\n+                }\n+                return new NotEmptyPredicate(path);\n+            } catch (InvalidValueException ignored) {\n+                throw new RSQLParseException(String.format(\"Invalid value for operator =isnull= '%s'\", arg));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a546e686fc8ab527818a60a3aef231f5fddfcac6"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzQ2NzU5OnYy", "diffSide": "RIGHT", "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/Operator.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDo1NTowN1rOFj5nKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNTo1ODo0NFrOFk2gSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4ODM5NA==", "bodyText": "i feel like only collection and map should be handled here", "url": "https://github.com/yahoo/elide/pull/1176#discussion_r373188394", "createdAt": "2020-01-30T20:55:07Z", "author": {"login": "PatRolland"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/Operator.java", "diffHunk": "@@ -316,6 +334,24 @@ public static Operator fromString(final String string) {\n         return (T entity) -> false;\n     }\n \n+    private static <T> Predicate<T> isEmpty(String field, RequestScope requestScope) {\n+        return (T entity) -> {\n+            Object val = getFieldValue(entity, field, requestScope);\n+            if (val == null) { return true; }\n+            if (val instanceof String) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a546e686fc8ab527818a60a3aef231f5fddfcac6"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIwNDI3Mw==", "bodyText": "So the string \"\" is not considered empty?", "url": "https://github.com/yahoo/elide/pull/1176#discussion_r373204273", "createdAt": "2020-01-30T21:31:31Z", "author": {"login": "Chandrasekar-Rajasekar"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/Operator.java", "diffHunk": "@@ -316,6 +334,24 @@ public static Operator fromString(final String string) {\n         return (T entity) -> false;\n     }\n \n+    private static <T> Predicate<T> isEmpty(String field, RequestScope requestScope) {\n+        return (T entity) -> {\n+            Object val = getFieldValue(entity, field, requestScope);\n+            if (val == null) { return true; }\n+            if (val instanceof String) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4ODM5NA=="}, "originalCommit": {"oid": "a546e686fc8ab527818a60a3aef231f5fddfcac6"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI3MTk3Nw==", "bodyText": "So we generate JPQL queries based on IS EMPTY and IS NOT EMPTY.  I'm not sure those will work on Strings when we push this to the datastore.\nI'm inclined to think the JPQL queries will blow up if we try this on Strings in the DB.  Either remove the String case - or we need to add explicit tests to see that they work as expected.", "url": "https://github.com/yahoo/elide/pull/1176#discussion_r373271977", "createdAt": "2020-01-31T00:57:26Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/Operator.java", "diffHunk": "@@ -316,6 +334,24 @@ public static Operator fromString(final String string) {\n         return (T entity) -> false;\n     }\n \n+    private static <T> Predicate<T> isEmpty(String field, RequestScope requestScope) {\n+        return (T entity) -> {\n+            Object val = getFieldValue(entity, field, requestScope);\n+            if (val == null) { return true; }\n+            if (val instanceof String) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4ODM5NA=="}, "originalCommit": {"oid": "a546e686fc8ab527818a60a3aef231f5fddfcac6"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE4NjA1Nw==", "bodyText": "@Chandrasekar-Rajasekar Let's remove the string case.", "url": "https://github.com/yahoo/elide/pull/1176#discussion_r374186057", "createdAt": "2020-02-03T15:58:44Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/Operator.java", "diffHunk": "@@ -316,6 +334,24 @@ public static Operator fromString(final String string) {\n         return (T entity) -> false;\n     }\n \n+    private static <T> Predicate<T> isEmpty(String field, RequestScope requestScope) {\n+        return (T entity) -> {\n+            Object val = getFieldValue(entity, field, requestScope);\n+            if (val == null) { return true; }\n+            if (val instanceof String) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4ODM5NA=="}, "originalCommit": {"oid": "a546e686fc8ab527818a60a3aef231f5fddfcac6"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzQ2OTk2OnYy", "diffSide": "RIGHT", "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/Operator.java", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDo1NjowMFrOFj5orw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxOToyMTo1NlrOFpgedQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4ODc4Mw==", "bodyText": "null and empty do not represent the same state imo", "url": "https://github.com/yahoo/elide/pull/1176#discussion_r373188783", "createdAt": "2020-01-30T20:56:00Z", "author": {"login": "PatRolland"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/Operator.java", "diffHunk": "@@ -316,6 +334,24 @@ public static Operator fromString(final String string) {\n         return (T entity) -> false;\n     }\n \n+    private static <T> Predicate<T> isEmpty(String field, RequestScope requestScope) {\n+        return (T entity) -> {\n+            Object val = getFieldValue(entity, field, requestScope);\n+            if (val == null) { return true; }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a546e686fc8ab527818a60a3aef231f5fddfcac6"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIwMzg0MQ==", "bodyText": "For in memory stores, we'll need to check if the field is null OR if the collection is empty. This is the requirement given in the issue.", "url": "https://github.com/yahoo/elide/pull/1176#discussion_r373203841", "createdAt": "2020-01-30T21:30:23Z", "author": {"login": "Chandrasekar-Rajasekar"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/Operator.java", "diffHunk": "@@ -316,6 +334,24 @@ public static Operator fromString(final String string) {\n         return (T entity) -> false;\n     }\n \n+    private static <T> Predicate<T> isEmpty(String field, RequestScope requestScope) {\n+        return (T entity) -> {\n+            Object val = getFieldValue(entity, field, requestScope);\n+            if (val == null) { return true; }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4ODc4Mw=="}, "originalCommit": {"oid": "a546e686fc8ab527818a60a3aef231f5fddfcac6"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI3MTY0Ng==", "bodyText": "I agree - they are not the same thing.  But I think you could interpret this either way.", "url": "https://github.com/yahoo/elide/pull/1176#discussion_r373271646", "createdAt": "2020-01-31T00:55:59Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/Operator.java", "diffHunk": "@@ -316,6 +334,24 @@ public static Operator fromString(final String string) {\n         return (T entity) -> false;\n     }\n \n+    private static <T> Predicate<T> isEmpty(String field, RequestScope requestScope) {\n+        return (T entity) -> {\n+            Object val = getFieldValue(entity, field, requestScope);\n+            if (val == null) { return true; }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4ODc4Mw=="}, "originalCommit": {"oid": "a546e686fc8ab527818a60a3aef231f5fddfcac6"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYyMzEwMQ==", "bodyText": "if you look at it in a db table way, a column referring to children might be null or have a value with no associations .\nconsider 3 tables\nTableA(a_id), TableB(b_id) and TableAB(ab_id, a_id, b_id).\nYou might end up with a row in TableAB such as ab_id = 1, a_id = 1 and b_id = null thus representing an empty collection.\nYou migth also end up having no row in TableAB thus representing a null collection.\nI'm not sure if this is a concept worth representing in the =isempty= filter but that is how I can represent the distinction here.", "url": "https://github.com/yahoo/elide/pull/1176#discussion_r373623101", "createdAt": "2020-01-31T18:33:57Z", "author": {"login": "PatRolland"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/Operator.java", "diffHunk": "@@ -316,6 +334,24 @@ public static Operator fromString(final String string) {\n         return (T entity) -> false;\n     }\n \n+    private static <T> Predicate<T> isEmpty(String field, RequestScope requestScope) {\n+        return (T entity) -> {\n+            Object val = getFieldValue(entity, field, requestScope);\n+            if (val == null) { return true; }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4ODc4Mw=="}, "originalCommit": {"oid": "a546e686fc8ab527818a60a3aef231f5fddfcac6"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE4NTg5Ng==", "bodyText": "@jkusa Any thoughts on this one?", "url": "https://github.com/yahoo/elide/pull/1176#discussion_r374185896", "createdAt": "2020-02-03T15:58:29Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/Operator.java", "diffHunk": "@@ -316,6 +334,24 @@ public static Operator fromString(final String string) {\n         return (T entity) -> false;\n     }\n \n+    private static <T> Predicate<T> isEmpty(String field, RequestScope requestScope) {\n+        return (T entity) -> {\n+            Object val = getFieldValue(entity, field, requestScope);\n+            if (val == null) { return true; }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4ODc4Mw=="}, "originalCommit": {"oid": "a546e686fc8ab527818a60a3aef231f5fddfcac6"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM2MTU0NQ==", "bodyText": "We'll run a test and see what JPQL does.  The in-memory result should match the JPQL result.", "url": "https://github.com/yahoo/elide/pull/1176#discussion_r374361545", "createdAt": "2020-02-03T21:51:34Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/Operator.java", "diffHunk": "@@ -316,6 +334,24 @@ public static Operator fromString(final String string) {\n         return (T entity) -> false;\n     }\n \n+    private static <T> Predicate<T> isEmpty(String field, RequestScope requestScope) {\n+        return (T entity) -> {\n+            Object val = getFieldValue(entity, field, requestScope);\n+            if (val == null) { return true; }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4ODc4Mw=="}, "originalCommit": {"oid": "a546e686fc8ab527818a60a3aef231f5fddfcac6"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ2MDI3NQ==", "bodyText": "Makes sense. Is there a way where I could make the distinction between an absence of association between and an empty one then? I feel like is isNull and isEmpty operators would clash in some way.", "url": "https://github.com/yahoo/elide/pull/1176#discussion_r376460275", "createdAt": "2020-02-07T15:44:09Z", "author": {"login": "PatRolland"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/Operator.java", "diffHunk": "@@ -316,6 +334,24 @@ public static Operator fromString(final String string) {\n         return (T entity) -> false;\n     }\n \n+    private static <T> Predicate<T> isEmpty(String field, RequestScope requestScope) {\n+        return (T entity) -> {\n+            Object val = getFieldValue(entity, field, requestScope);\n+            if (val == null) { return true; }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4ODc4Mw=="}, "originalCommit": {"oid": "a546e686fc8ab527818a60a3aef231f5fddfcac6"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg0MTY3Ng==", "bodyText": "@PatRolland - Not quite following", "url": "https://github.com/yahoo/elide/pull/1176#discussion_r377841676", "createdAt": "2020-02-11T19:13:07Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/Operator.java", "diffHunk": "@@ -316,6 +334,24 @@ public static Operator fromString(final String string) {\n         return (T entity) -> false;\n     }\n \n+    private static <T> Predicate<T> isEmpty(String field, RequestScope requestScope) {\n+        return (T entity) -> {\n+            Object val = getFieldValue(entity, field, requestScope);\n+            if (val == null) { return true; }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4ODc4Mw=="}, "originalCommit": {"oid": "a546e686fc8ab527818a60a3aef231f5fddfcac6"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA2ODAyMQ==", "bodyText": "Doesn't matter I'm being picky \ud83d\ude04", "url": "https://github.com/yahoo/elide/pull/1176#discussion_r379068021", "createdAt": "2020-02-13T19:21:56Z", "author": {"login": "PatRolland"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/Operator.java", "diffHunk": "@@ -316,6 +334,24 @@ public static Operator fromString(final String string) {\n         return (T entity) -> false;\n     }\n \n+    private static <T> Predicate<T> isEmpty(String field, RequestScope requestScope) {\n+        return (T entity) -> {\n+            Object val = getFieldValue(entity, field, requestScope);\n+            if (val == null) { return true; }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4ODc4Mw=="}, "originalCommit": {"oid": "a546e686fc8ab527818a60a3aef231f5fddfcac6"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjY4NDcyOnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-hibernate5/pom.xml", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjo0Nzo1MFrOFmJ2jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxODowODo0NlrOFmlB8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU1MTYyOQ==", "bodyText": "Looks like the fix for querying attribute collection on EMPTY operator is fixed in version 5.4.11. We are using 5.4.2.Final.\nOne option is we use where size(book.awards) = 0 as suggested in below link.\nOr we could continue using Empty operator and change the version to 5.4.11 when it gets released.\nhttps://hibernate.atlassian.net/browse/HHH-6686?attachmentOrder=asc&oldIssueView=true\nhttp://hibernate.org/orm/releases/5.4/", "url": "https://github.com/yahoo/elide/pull/1176#discussion_r375551629", "createdAt": "2020-02-05T22:47:50Z", "author": {"login": "Chandrasekar-Rajasekar"}, "path": "elide-datastore/elide-datastore-hibernate5/pom.xml", "diffHunk": "@@ -37,6 +37,10 @@\n         <url>https://github.com/yahoo/elide.git</url>\n         <tag>HEAD</tag>\n     </scm>\n+    <properties>\n+        <excludeTags>emptyOnAttributeCollection</excludeTags>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab1ba8ee8325d5e41c95a2edec297b6e7fdb4833"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkzNzA0OQ==", "bodyText": "We can update Hibernate version on this branch as well.", "url": "https://github.com/yahoo/elide/pull/1176#discussion_r375937049", "createdAt": "2020-02-06T16:21:35Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-hibernate5/pom.xml", "diffHunk": "@@ -37,6 +37,10 @@\n         <url>https://github.com/yahoo/elide.git</url>\n         <tag>HEAD</tag>\n     </scm>\n+    <properties>\n+        <excludeTags>emptyOnAttributeCollection</excludeTags>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU1MTYyOQ=="}, "originalCommit": {"oid": "ab1ba8ee8325d5e41c95a2edec297b6e7fdb4833"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk5NjkxNA==", "bodyText": "It is not released yet http://hibernate.org/orm/releases/5.4/", "url": "https://github.com/yahoo/elide/pull/1176#discussion_r375996914", "createdAt": "2020-02-06T18:08:46Z", "author": {"login": "Chandrasekar-Rajasekar"}, "path": "elide-datastore/elide-datastore-hibernate5/pom.xml", "diffHunk": "@@ -37,6 +37,10 @@\n         <url>https://github.com/yahoo/elide.git</url>\n         <tag>HEAD</tag>\n     </scm>\n+    <properties>\n+        <excludeTags>emptyOnAttributeCollection</excludeTags>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU1MTYyOQ=="}, "originalCommit": {"oid": "ab1ba8ee8325d5e41c95a2edec297b6e7fdb4833"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MDU2ODQyOnYy", "diffSide": "RIGHT", "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/IsEmptyPredicate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxNzowMTo0M1rOFqPxnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxNzowMTo0M1rOFqPxnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg0Mjk3Mw==", "bodyText": "typo", "url": "https://github.com/yahoo/elide/pull/1176#discussion_r379842973", "createdAt": "2020-02-15T17:01:43Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/IsEmptyPredicate.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright 2019, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.core.filter;\n+\n+import com.yahoo.elide.core.Path;\n+\n+import java.util.Collections;\n+\n+/**\n+ * Is EMopty Predicate Class.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d827e846479045cdf9237bc841d5b00ccf8baa45"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1054, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}