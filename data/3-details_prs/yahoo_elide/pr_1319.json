{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3MDMwOTc2", "number": 1319, "title": "Add caching support to SQLQueryEngine", "bodyText": "Description\nAdds support for a query result cache to AggregationDataStore (moved from QueryEngine). A new table annotation @VersionQuery is added to allow the user to specify a SQL query that will return a table-data-version number for that table, presumably something along the lines of a row-count query or last-modification-time query. This version is then included in the cache key, so that when the data changes, QueryEngine will not return any stale data. If a table does not have that annotation, cached data is always returned, no matter the age.\nMotivation and Context\nAPI support for QueryEngine caching was added in #1297. However no implementations were provided. This PR adds an implementation for SQLQueryEngine.\nHow Has This Been Tested?\nNew unit tests added.\nLicense\nI confirm that this contribution is made under an Apache 2.0 license and that I have the authority necessary to make this contribution on behalf of its copyright owner.", "createdAt": "2020-05-12T23:41:31Z", "url": "https://github.com/yahoo/elide/pull/1319", "merged": true, "mergeCommit": {"oid": "af132fd2a73af3f18661db78eca514f8d3038ecf"}, "closed": true, "closedAt": "2020-06-12T21:53:18Z", "author": {"login": "john-karp"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcg7ea0gBqjMzMzI5MDc3Nzk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqp2wWgFqTQzMDA1MDUzMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "af24f0cd7a947424efbb3bef0b86cce15a31e4c6", "author": {"user": {"login": "john-karp", "name": "John Karp"}}, "url": "https://github.com/yahoo/elide/commit/af24f0cd7a947424efbb3bef0b86cce15a31e4c6", "committedDate": "2020-05-12T22:47:25Z", "message": "Add SQLQueryEngine cache unit tests"}, "afterCommit": {"oid": "671b0e1da42ac92fe17eeef5146a49fa4edb7244", "author": {"user": {"login": "john-karp", "name": "John Karp"}}, "url": "https://github.com/yahoo/elide/commit/671b0e1da42ac92fe17eeef5146a49fa4edb7244", "committedDate": "2020-05-13T16:28:57Z", "message": "Add SQLQueryEngine cache unit tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMjE0MTI5", "url": "https://github.com/yahoo/elide/pull/1319#pullrequestreview-411214129", "createdAt": "2020-05-13T19:00:35Z", "commit": {"oid": "671b0e1da42ac92fe17eeef5146a49fa4edb7244"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxOTowMDozNVrOGU_doQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxOTowMzoyMVrOGU_joQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2NDQ4MQ==", "bodyText": "Ideally, I think this is where the cache ought to be queried for entries.  This would allow the same cache to be used for multiple engines (Fili, SQL, etc).  I think the cache key generation logic itself could be common as well.  The key could be derived from the Query object itself (rather than the generated SQL) plus data freshness key (which the query engine could surface).", "url": "https://github.com/yahoo/elide/pull/1319#discussion_r424664481", "createdAt": "2020-05-13T19:00:35Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java", "diffHunk": "@@ -53,7 +53,7 @@ public void createObject(Object entity, RequestScope scope) {\n     @Override\n     public Iterable<Object> loadObjects(EntityProjection entityProjection, RequestScope scope) {\n         Query query = buildQuery(entityProjection, scope);\n-        return queryEngine.executeQuery(query, true);\n+        return queryEngine.executeQuery(query);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "671b0e1da42ac92fe17eeef5146a49fa4edb7244"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2NTkyNQ==", "bodyText": "TableVersion as a string would be more flexible.", "url": "https://github.com/yahoo/elide/pull/1319#discussion_r424665925", "createdAt": "2020-05-13T19:03:10Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java", "diffHunk": "@@ -177,6 +184,56 @@ public MetricProjection constructMetricProjection(Metric metric,\n         }\n     }\n \n+    private long getPageTotal(Query query, SQLQuery sql, EntityManager entityManager, int tableVersion) {\n+        String paginationSQL = toPageTotalSQL(sql).toString();\n+\n+        // check cache first\n+        String paginationCacheKey = null;\n+        if (cache != null && !query.isBypassingCache()) {\n+            paginationCacheKey = tableVersion + \" \" + paginationSQL;\n+            Object pageTotalResult = cache.get(paginationCacheKey);\n+            if (pageTotalResult != null) {\n+                return (Long) pageTotalResult;\n+            }\n+        }\n+\n+        javax.persistence.Query pageTotalQuery =\n+                entityManager.createNativeQuery(paginationSQL)\n+                        .setHint(QueryHints.HINT_READONLY, true);\n+\n+        //Supply the query parameters to the query\n+        supplyFilterQueryParameters(query, pageTotalQuery);\n+\n+        //Run the Pagination query and log the time spent.\n+        long total = new TimedFunction<>(\n+                () -> CoerceUtil.coerce(pageTotalQuery.getSingleResult(), Long.class),\n+                \"Running Query: \" + paginationSQL\n+        ).get();\n+\n+        if (paginationCacheKey != null) {\n+            cache.put(paginationCacheKey, total);\n+        }\n+        return total;\n+    }\n+\n+    private int getTableVersion(EntityManager entityManager, Query query) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "671b0e1da42ac92fe17eeef5146a49fa4edb7244"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2NjAxNw==", "bodyText": "2020", "url": "https://github.com/yahoo/elide/pull/1319#discussion_r424666017", "createdAt": "2020-05-13T19:03:21Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/annotation/VersionQuery.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright 2019, Yahoo Inc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "671b0e1da42ac92fe17eeef5146a49fa4edb7244"}, "originalPosition": 2}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "671b0e1da42ac92fe17eeef5146a49fa4edb7244", "author": {"user": {"login": "john-karp", "name": "John Karp"}}, "url": "https://github.com/yahoo/elide/commit/671b0e1da42ac92fe17eeef5146a49fa4edb7244", "committedDate": "2020-05-13T16:28:57Z", "message": "Add SQLQueryEngine cache unit tests"}, "afterCommit": {"oid": "e1b377837311dcf5092bd7a1df135995289ebbd2", "author": {"user": {"login": "john-karp", "name": "John Karp"}}, "url": "https://github.com/yahoo/elide/commit/e1b377837311dcf5092bd7a1df135995289ebbd2", "committedDate": "2020-05-20T23:10:48Z", "message": "Add SQLQueryEngine cache unit tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e1b377837311dcf5092bd7a1df135995289ebbd2", "author": {"user": {"login": "john-karp", "name": "John Karp"}}, "url": "https://github.com/yahoo/elide/commit/e1b377837311dcf5092bd7a1df135995289ebbd2", "committedDate": "2020-05-20T23:10:48Z", "message": "Add SQLQueryEngine cache unit tests"}, "afterCommit": {"oid": "ca834a3bb8c910b77c8ebba053628c15fd84ddbc", "author": {"user": {"login": "john-karp", "name": "John Karp"}}, "url": "https://github.com/yahoo/elide/commit/ca834a3bb8c910b77c8ebba053628c15fd84ddbc", "committedDate": "2020-05-26T17:23:26Z", "message": "Declare query dimensions / metrics non-null"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ca834a3bb8c910b77c8ebba053628c15fd84ddbc", "author": {"user": {"login": "john-karp", "name": "John Karp"}}, "url": "https://github.com/yahoo/elide/commit/ca834a3bb8c910b77c8ebba053628c15fd84ddbc", "committedDate": "2020-05-26T17:23:26Z", "message": "Declare query dimensions / metrics non-null"}, "afterCommit": {"oid": "b1ad3eacd4d9a451a498fc7328b6ab14ed48b1df", "author": {"user": {"login": "john-karp", "name": "John Karp"}}, "url": "https://github.com/yahoo/elide/commit/b1ad3eacd4d9a451a498fc7328b6ab14ed48b1df", "committedDate": "2020-05-26T17:25:46Z", "message": "Declare query dimensions / metrics non-null"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43fe07875808278e23a4d7394bb8a7ecf00777a4", "author": {"user": {"login": "john-karp", "name": "John Karp"}}, "url": "https://github.com/yahoo/elide/commit/43fe07875808278e23a4d7394bb8a7ecf00777a4", "committedDate": "2020-06-05T00:30:27Z", "message": "Support caching in SQLQueryEngine"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30536fa403489202094f30bf8032ff97bc892963", "author": {"user": {"login": "john-karp", "name": "John Karp"}}, "url": "https://github.com/yahoo/elide/commit/30536fa403489202094f30bf8032ff97bc892963", "committedDate": "2020-06-05T00:30:27Z", "message": "Allow SQLUnitTest.init to set cache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f83c3ae2445f5f80e5deb7ee561283ab82c12e6d", "author": {"user": {"login": "john-karp", "name": "John Karp"}}, "url": "https://github.com/yahoo/elide/commit/f83c3ae2445f5f80e5deb7ee561283ab82c12e6d", "committedDate": "2020-06-05T00:30:27Z", "message": "Add SQLQueryEngine cache unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0a519458664445cd90d6fdb3f25216e3def5273", "author": {"user": {"login": "john-karp", "name": "John Karp"}}, "url": "https://github.com/yahoo/elide/commit/a0a519458664445cd90d6fdb3f25216e3def5273", "committedDate": "2020-06-05T00:30:27Z", "message": "Declare query dimensions / metrics non-null"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d058b68b8e8f61a9e6d350a231d0121e130ad48f", "author": {"user": {"login": "john-karp", "name": "John Karp"}}, "url": "https://github.com/yahoo/elide/commit/d058b68b8e8f61a9e6d350a231d0121e130ad48f", "committedDate": "2020-06-05T00:30:27Z", "message": "Handle table version as String"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5bbde3fd6281a256379f8db71a44854375429ce", "author": {"user": {"login": "john-karp", "name": "John Karp"}}, "url": "https://github.com/yahoo/elide/commit/e5bbde3fd6281a256379f8db71a44854375429ce", "committedDate": "2020-06-05T00:30:27Z", "message": "Polish QueryKeyExtractor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92c684650eb57b8d9fd26098703f77f392425cdc", "author": {"user": {"login": "john-karp", "name": "John Karp"}}, "url": "https://github.com/yahoo/elide/commit/92c684650eb57b8d9fd26098703f77f392425cdc", "committedDate": "2020-06-05T00:30:27Z", "message": "Add QueryKeyExtractor UTs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6e7de902110d8f887e0ab29a7c2ce8c88280694f", "author": {"user": {"login": "john-karp", "name": "John Karp"}}, "url": "https://github.com/yahoo/elide/commit/6e7de902110d8f887e0ab29a7c2ce8c88280694f", "committedDate": "2020-05-27T17:25:15Z", "message": "Add QueryKeyExtractor UTs"}, "afterCommit": {"oid": "b335876a0d77375095c11405e6c430d78df9f503", "author": {"user": {"login": "john-karp", "name": "John Karp"}}, "url": "https://github.com/yahoo/elide/commit/b335876a0d77375095c11405e6c430d78df9f503", "committedDate": "2020-06-05T00:31:49Z", "message": "Manage QueryEngine.Transaction in AggregationDataStoreTransaction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02793dd214e2aa305502b02dbefc3274f9839670", "author": {"user": {"login": "john-karp", "name": "John Karp"}}, "url": "https://github.com/yahoo/elide/commit/02793dd214e2aa305502b02dbefc3274f9839670", "committedDate": "2020-06-08T21:06:00Z", "message": "Manage QueryEngine.Transaction in AggregationDataStoreTransaction"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b335876a0d77375095c11405e6c430d78df9f503", "author": {"user": {"login": "john-karp", "name": "John Karp"}}, "url": "https://github.com/yahoo/elide/commit/b335876a0d77375095c11405e6c430d78df9f503", "committedDate": "2020-06-05T00:31:49Z", "message": "Manage QueryEngine.Transaction in AggregationDataStoreTransaction"}, "afterCommit": {"oid": "02793dd214e2aa305502b02dbefc3274f9839670", "author": {"user": {"login": "john-karp", "name": "John Karp"}}, "url": "https://github.com/yahoo/elide/commit/02793dd214e2aa305502b02dbefc3274f9839670", "committedDate": "2020-06-08T21:06:00Z", "message": "Manage QueryEngine.Transaction in AggregationDataStoreTransaction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e149baba7ff14065e4a73dbdb46bb38b1fb09912", "author": {"user": {"login": "john-karp", "name": "John Karp"}}, "url": "https://github.com/yahoo/elide/commit/e149baba7ff14065e4a73dbdb46bb38b1fb09912", "committedDate": "2020-06-09T21:51:37Z", "message": "Fix UTs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "caf7ce2dc06efc30ae0240d16ea5fae3caf67e1d", "author": {"user": {"login": "john-karp", "name": "John Karp"}}, "url": "https://github.com/yahoo/elide/commit/caf7ce2dc06efc30ae0240d16ea5fae3caf67e1d", "committedDate": "2020-06-09T21:52:52Z", "message": "Fix assertEquals in existing UT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "972bb1916af7fa6e8c2db57f60093576545d0d47", "author": {"user": {"login": "john-karp", "name": "John Karp"}}, "url": "https://github.com/yahoo/elide/commit/972bb1916af7fa6e8c2db57f60093576545d0d47", "committedDate": "2020-06-11T18:56:21Z", "message": "Move caching to AggregationDataStoreTransaction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa3c852a1932c79a384683e3359db79a0b2f4f7c", "author": {"user": {"login": "john-karp", "name": "John Karp"}}, "url": "https://github.com/yahoo/elide/commit/aa3c852a1932c79a384683e3359db79a0b2f4f7c", "committedDate": "2020-06-11T19:46:50Z", "message": "Change getTableVersion to take table argument"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5ODY3ODgx", "url": "https://github.com/yahoo/elide/pull/1319#pullrequestreview-429867881", "createdAt": "2020-06-12T16:10:15Z", "commit": {"oid": "aa3c852a1932c79a384683e3359db79a0b2f4f7c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNjoxMDoxNVrOGjJn3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNjozODowM1rOGjKm6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUxMTAwNw==", "bodyText": "I think we'll need some Javadoc here so the linter won't warn.", "url": "https://github.com/yahoo/elide/pull/1319#discussion_r439511007", "createdAt": "2020-06-12T16:10:15Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java", "diffHunk": "@@ -156,14 +151,32 @@ private void populateMetaData(MetaDataStore metaDataStore) {\n                 .forEach(metaDataStore::addTable);\n     }\n \n+    public interface Transaction extends AutoCloseable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa3c852a1932c79a384683e3359db79a0b2f4f7c"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUxMTkxNw==", "bodyText": "Same.  Also we are adding a cancel method in another PR.  Do see these as the same thing?  For cancel, the expectation is the method is thread safe.  If we consolidate them - we'll need the same comment here.", "url": "https://github.com/yahoo/elide/pull/1319#discussion_r439511917", "createdAt": "2020-06-12T16:11:21Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java", "diffHunk": "@@ -156,14 +151,32 @@ private void populateMetaData(MetaDataStore metaDataStore) {\n                 .forEach(metaDataStore::addTable);\n     }\n \n+    public interface Transaction extends AutoCloseable {\n+        @Override\n+        void close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa3c852a1932c79a384683e3359db79a0b2f4f7c"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUxMzA0Nw==", "bodyText": "You might want to mention that if one is not available, returns null which disables caching.", "url": "https://github.com/yahoo/elide/pull/1319#discussion_r439513047", "createdAt": "2020-06-12T16:12:48Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java", "diffHunk": "@@ -156,14 +151,32 @@ private void populateMetaData(MetaDataStore metaDataStore) {\n                 .forEach(metaDataStore::addTable);\n     }\n \n+    public interface Transaction extends AutoCloseable {\n+        @Override\n+        void close();\n+    }\n+\n+    public abstract Transaction beginTransaction();\n+\n     /**\n      * Executes the specified {@link Query} against a specific persistent storage, which understand the provided\n      * {@link Query}. Results may be taken from a cache, if configured.\n      *\n      * @param query The query customized for a particular persistent storage or storage client\n+     * @param transaction\n      * @return query results\n      */\n-    public abstract QueryResult executeQuery(Query query);\n+    public abstract QueryResult executeQuery(Query query, Transaction transaction);\n+\n+    /**\n+     * Get a serial number or other token indicating the version of the data in the table.\n+     * No particular semantics are required, though it must change if the data changes.\n+     * If one is not available, returns null.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa3c852a1932c79a384683e3359db79a0b2f4f7c"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUyNzE0Ng==", "bodyText": "Does this test execution depend on the prior test executing first?  I think we should make each test stand on its own.", "url": "https://github.com/yahoo/elide/pull/1319#discussion_r439527146", "createdAt": "2020-06-12T16:38:03Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+\n+package com.yahoo.elide.datastores.aggregation;\n+\n+import static com.yahoo.elide.request.Pagination.DEFAULT_PAGE_LIMIT;\n+import static com.yahoo.elide.request.Pagination.MAX_PAGE_LIMIT;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.when;\n+\n+import com.yahoo.elide.core.RequestScope;\n+import com.yahoo.elide.core.pagination.PaginationImpl;\n+import com.yahoo.elide.datastores.aggregation.example.PlayerStats;\n+import com.yahoo.elide.datastores.aggregation.framework.SQLUnitTest;\n+import com.yahoo.elide.datastores.aggregation.query.Cache;\n+import com.yahoo.elide.datastores.aggregation.query.Query;\n+import com.yahoo.elide.datastores.aggregation.query.QueryKeyExtractor;\n+import com.yahoo.elide.datastores.aggregation.query.QueryResult;\n+import com.yahoo.elide.request.EntityProjection;\n+import com.yahoo.elide.request.Pagination;\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import java.util.Collections;\n+\n+@ExtendWith(MockitoExtension.class)\n+class AggregationDataStoreTransactionTest extends SQLUnitTest {\n+\n+    @Mock private QueryEngine queryEngine;\n+    @Mock private QueryEngine.Transaction qeTransaction;\n+    @Mock private RequestScope scope;\n+    @Mock private Cache cache;\n+\n+    private Query query = Query.builder().table(playerStatsTable).build();\n+    private final String queryKey = QueryKeyExtractor.extractKey(query);\n+    private static final Iterable<Object> DATA = Collections.singletonList(\"xyzzy\");\n+\n+    // inject our own query instead of using buildQuery impl\n+    private class MyAggregationDataStoreTransaction extends AggregationDataStoreTransaction {\n+\n+        public MyAggregationDataStoreTransaction(QueryEngine queryEngine, Cache cache) {\n+            super(queryEngine, cache);\n+        }\n+\n+        @Override\n+        protected Query buildQuery(EntityProjection entityProjection, RequestScope scope) {\n+            return query;\n+        }\n+    }\n+\n+    @BeforeAll\n+    public static void beforeAllTests() {\n+        SQLUnitTest.init();\n+    }\n+\n+    @BeforeEach\n+    public void setUp() {\n+        when(queryEngine.beginTransaction()).thenReturn(qeTransaction);\n+    }\n+\n+    @Test\n+    void loadObjectsPopulatesCache() {\n+        QueryResult queryResult = QueryResult.builder().data(DATA).build();\n+        when(queryEngine.getTableVersion(playerStatsTable, qeTransaction)).thenReturn(\"foo\");\n+        when(queryEngine.executeQuery(query, qeTransaction)).thenReturn(queryResult);\n+        AggregationDataStoreTransaction transaction = new MyAggregationDataStoreTransaction(queryEngine, cache);\n+        EntityProjection entityProjection = EntityProjection.builder().type(PlayerStats.class).build();\n+\n+        assertEquals(DATA, transaction.loadObjects(entityProjection, scope));\n+\n+        String cacheKey = \"foo;\" + queryKey;\n+        Mockito.verify(cache).get(cacheKey);\n+        Mockito.verify(cache).put(cacheKey, queryResult);\n+        Mockito.verifyNoMoreInteractions(cache);\n+    }\n+\n+    @Test\n+    void loadObjectsUsesCache() {\n+        QueryResult queryResult = QueryResult.builder().data(DATA).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa3c852a1932c79a384683e3359db79a0b2f4f7c"}, "originalPosition": 91}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "559c960e3b99ed75ad8322b464017fa2d1ffd272", "author": {"user": {"login": "john-karp", "name": "John Karp"}}, "url": "https://github.com/yahoo/elide/commit/559c960e3b99ed75ad8322b464017fa2d1ffd272", "committedDate": "2020-06-12T18:01:14Z", "message": "Address review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMDUwNTMz", "url": "https://github.com/yahoo/elide/pull/1319#pullrequestreview-430050533", "createdAt": "2020-06-12T21:36:49Z", "commit": {"oid": "559c960e3b99ed75ad8322b464017fa2d1ffd272"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 928, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}