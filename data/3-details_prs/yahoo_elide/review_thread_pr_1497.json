{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2MTIyMjE2", "number": 1497, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDoxNToyOFrOEXXbFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMjowODozOVrOEcw-BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTM2NDY5OnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/annotation/FromTable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDoxNToyOFrOG_HoNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDoxNToyOFrOG_HoNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzODQ1NA==", "bodyText": "Please add a TODO comment here for the remaining work done in next PR.", "url": "https://github.com/yahoo/elide/pull/1497#discussion_r468838454", "createdAt": "2020-08-11T20:15:28Z", "author": {"login": "moizarafat"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/annotation/FromTable.java", "diffHunk": "@@ -25,4 +25,10 @@\n      * @return The table or view name.\n      */\n     String name();\n+\n+    /**\n+     * DB Connection Name for this table\n+     * @return String DB Connection Name\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c09baf3777f462dd8a13bc935d75c088746cbe2f"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTM3NTUwOnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDoxODo1OFrOG_Hu-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjo1NDo0OFrOHA7y8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg0MDE4NA==", "bodyText": "Not sure what is best - a single variables.hjson file for everything - or we have two separate like this structure.  Also, I wouldn't worry about non-sql right now - let's simplify this and just support sql.", "url": "https://github.com/yahoo/elide/pull/1497#discussion_r468840184", "createdAt": "2020-08-11T20:18:58Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/README.md", "diffHunk": "@@ -6,17 +6,28 @@ To build and run:\n ```text\n 1. mvn clean install\n 2. Execute Jar File :\n-   a) java -cp elide-contrib/elide-dynamic-config-helpers/target/elide-dynamic-config-*-jar-with-dependencies.jar com.yahoo.elide.contrib.dynamicconfighelpers.validator.DynamicConfigValidator --configDir <Path for Model Configs Directory>\n+   a) java -cp elide-contrib/elide-dynamic-config-helpers/target/elide-dynamic-config-*-jar-with-dependencies.jar com.yahoo.elide.contrib.dynamicconfighelpers.validator.DynamicConfigValidator --configDir <Path for Config Directory>\n    b) java -cp elide-contrib/elide-dynamic-config-helpers/target/elide-dynamic-config-*-jar-with-dependencies.jar com.yahoo.elide.contrib.dynamicconfighelpers.validator.DynamicConfigValidator --help\n ```\n-Expected Model Configs Directory Structure:\n+Expected Configs Directory Structure:\n ```text\n-\u251c\u2500\u2500 MODEL_CONFIG_DIR/\n-\u2502   \u251c\u2500\u2500 tables\n-\u2502   \u2502   \u251c\u2500\u2500 table1.hjson\n-\u2502   \u2502   \u251c\u2500\u2500 table2.hjson\n-\u2502   \u2502   \u251c\u2500\u2500 ...\n-\u2502   \u2502   \u251c\u2500\u2500 tableN.hjson\n-\u2502   \u251c\u2500\u2500 security.hjson (optional)\n-\u2502   \u251c\u2500\u2500 variables.hjson (optional)\n+\u251c\u2500\u2500 CONFIG_DIR/\n+\u2502   \u251c\u2500\u2500 models\n+\u2502   \u2502   \u251c\u2500\u2500 tables\n+\u2502   \u2502   \u2502   \u251c\u2500\u2500 table1.hjson\n+\u2502   \u2502   \u2502   \u251c\u2500\u2500 table2.hjson\n+\u2502   \u2502   \u2502   \u251c\u2500\u2500 ...\n+\u2502   \u2502   \u2502   \u251c\u2500\u2500 tableN.hjson\n+\u2502   \u2502   \u251c\u2500\u2500 security.hjson (optional)\n+\u2502   \u2502   \u251c\u2500\u2500 variables.hjson (optional)\n+\u2502   \u251c\u2500\u2500 db\n+\u2502   \u2502   \u251c\u2500\u2500 sql (optional)\n+\u2502   \u2502   \u2502   \u251c\u2500\u2500 db1.hjson\n+\u2502   \u2502   \u2502   \u251c\u2500\u2500 ...\n+\u2502   \u2502   \u2502   \u251c\u2500\u2500 dbN.hjson\n+\u2502   \u2502   \u251c\u2500\u2500 nonsql (optional)\n+\u2502   \u2502   \u2502   \u251c\u2500\u2500 db1.hjson\n+\u2502   \u2502   \u2502   \u251c\u2500\u2500 ...\n+\u2502   \u2502   \u2502   \u251c\u2500\u2500 dbN.hjson\n+\u2502   \u2502   \u251c\u2500\u2500 variables.hjson (optional)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c09baf3777f462dd8a13bc935d75c088746cbe2f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc0MTc0NQ==", "bodyText": "Removed non-sql.", "url": "https://github.com/yahoo/elide/pull/1497#discussion_r470741745", "createdAt": "2020-08-14T16:54:48Z", "author": {"login": "rishi-aga"}, "path": "elide-contrib/elide-dynamic-config-helpers/README.md", "diffHunk": "@@ -6,17 +6,28 @@ To build and run:\n ```text\n 1. mvn clean install\n 2. Execute Jar File :\n-   a) java -cp elide-contrib/elide-dynamic-config-helpers/target/elide-dynamic-config-*-jar-with-dependencies.jar com.yahoo.elide.contrib.dynamicconfighelpers.validator.DynamicConfigValidator --configDir <Path for Model Configs Directory>\n+   a) java -cp elide-contrib/elide-dynamic-config-helpers/target/elide-dynamic-config-*-jar-with-dependencies.jar com.yahoo.elide.contrib.dynamicconfighelpers.validator.DynamicConfigValidator --configDir <Path for Config Directory>\n    b) java -cp elide-contrib/elide-dynamic-config-helpers/target/elide-dynamic-config-*-jar-with-dependencies.jar com.yahoo.elide.contrib.dynamicconfighelpers.validator.DynamicConfigValidator --help\n ```\n-Expected Model Configs Directory Structure:\n+Expected Configs Directory Structure:\n ```text\n-\u251c\u2500\u2500 MODEL_CONFIG_DIR/\n-\u2502   \u251c\u2500\u2500 tables\n-\u2502   \u2502   \u251c\u2500\u2500 table1.hjson\n-\u2502   \u2502   \u251c\u2500\u2500 table2.hjson\n-\u2502   \u2502   \u251c\u2500\u2500 ...\n-\u2502   \u2502   \u251c\u2500\u2500 tableN.hjson\n-\u2502   \u251c\u2500\u2500 security.hjson (optional)\n-\u2502   \u251c\u2500\u2500 variables.hjson (optional)\n+\u251c\u2500\u2500 CONFIG_DIR/\n+\u2502   \u251c\u2500\u2500 models\n+\u2502   \u2502   \u251c\u2500\u2500 tables\n+\u2502   \u2502   \u2502   \u251c\u2500\u2500 table1.hjson\n+\u2502   \u2502   \u2502   \u251c\u2500\u2500 table2.hjson\n+\u2502   \u2502   \u2502   \u251c\u2500\u2500 ...\n+\u2502   \u2502   \u2502   \u251c\u2500\u2500 tableN.hjson\n+\u2502   \u2502   \u251c\u2500\u2500 security.hjson (optional)\n+\u2502   \u2502   \u251c\u2500\u2500 variables.hjson (optional)\n+\u2502   \u251c\u2500\u2500 db\n+\u2502   \u2502   \u251c\u2500\u2500 sql (optional)\n+\u2502   \u2502   \u2502   \u251c\u2500\u2500 db1.hjson\n+\u2502   \u2502   \u2502   \u251c\u2500\u2500 ...\n+\u2502   \u2502   \u2502   \u251c\u2500\u2500 dbN.hjson\n+\u2502   \u2502   \u251c\u2500\u2500 nonsql (optional)\n+\u2502   \u2502   \u2502   \u251c\u2500\u2500 db1.hjson\n+\u2502   \u2502   \u2502   \u251c\u2500\u2500 ...\n+\u2502   \u2502   \u2502   \u251c\u2500\u2500 dbN.hjson\n+\u2502   \u2502   \u251c\u2500\u2500 variables.hjson (optional)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg0MDE4NA=="}, "originalCommit": {"oid": "c09baf3777f462dd8a13bc935d75c088746cbe2f"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODIzODgzOnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/pom.xml", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOTo1NDo1NVrOHAbWxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNzowOToyOFrOHA8PGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIxMDI0NA==", "bodyText": "What is the purpose of creating an uber-jar here?", "url": "https://github.com/yahoo/elide/pull/1497#discussion_r470210244", "createdAt": "2020-08-13T19:54:55Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/pom.xml", "diffHunk": "@@ -172,6 +172,23 @@\n                     <target>1.8</target>\n                 </configuration>\n             </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-assembly-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <phase>package</phase>\n+                        <goals>\n+                            <goal>single</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+                <configuration>\n+                    <descriptorRefs>\n+                        <descriptorRef>jar-with-dependencies</descriptorRef>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4e95e311293ad88547fe01b33d5c5da1cbb2e64"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIxMDQ3NA==", "bodyText": "We generally don't want to publish uber jars - as they create downstream problems.", "url": "https://github.com/yahoo/elide/pull/1497#discussion_r470210474", "createdAt": "2020-08-13T19:55:12Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/pom.xml", "diffHunk": "@@ -172,6 +172,23 @@\n                     <target>1.8</target>\n                 </configuration>\n             </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-assembly-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <phase>package</phase>\n+                        <goals>\n+                            <goal>single</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+                <configuration>\n+                    <descriptorRefs>\n+                        <descriptorRef>jar-with-dependencies</descriptorRef>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIxMDI0NA=="}, "originalCommit": {"oid": "e4e95e311293ad88547fe01b33d5c5da1cbb2e64"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc0ODk1NA==", "bodyText": "Removed. I added it as it was there earlier and can be used for validating configs locally using jar-with-dependencies.", "url": "https://github.com/yahoo/elide/pull/1497#discussion_r470748954", "createdAt": "2020-08-14T17:09:28Z", "author": {"login": "rishi-aga"}, "path": "elide-contrib/elide-dynamic-config-helpers/pom.xml", "diffHunk": "@@ -172,6 +172,23 @@\n                     <target>1.8</target>\n                 </configuration>\n             </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-assembly-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <phase>package</phase>\n+                        <goals>\n+                            <goal>single</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+                <configuration>\n+                    <descriptorRefs>\n+                        <descriptorRef>jar-with-dependencies</descriptorRef>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIxMDI0NA=="}, "originalCommit": {"oid": "e4e95e311293ad88547fe01b33d5c5da1cbb2e64"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODI0Njg1OnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/annotation/FromSubquery.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOTo1NzowNlrOHAbbeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjo0Njo1MFrOHA7jRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIxMTQ0OA==", "bodyText": "Why is called type here and dbConnection name in the other annotation?  Can we be consistent?", "url": "https://github.com/yahoo/elide/pull/1497#discussion_r470211448", "createdAt": "2020-08-13T19:57:06Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/annotation/FromSubquery.java", "diffHunk": "@@ -25,4 +25,11 @@\n      * @return The SQL subquery.\n      */\n     String sql();\n+\n+    /**\n+     * DB Connection Name for this query\n+     * @return String DB Connection Name\n+     */\n+    // TO DO\n+    String type() default \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4e95e311293ad88547fe01b33d5c5da1cbb2e64"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDczNzczMg==", "bodyText": "Typo, fixed.", "url": "https://github.com/yahoo/elide/pull/1497#discussion_r470737732", "createdAt": "2020-08-14T16:46:50Z", "author": {"login": "rishi-aga"}, "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/annotation/FromSubquery.java", "diffHunk": "@@ -25,4 +25,11 @@\n      * @return The SQL subquery.\n      */\n     String sql();\n+\n+    /**\n+     * DB Connection Name for this query\n+     * @return String DB Connection Name\n+     */\n+    // TO DO\n+    String type() default \"\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIxMTQ0OA=="}, "originalCommit": {"oid": "e4e95e311293ad88547fe01b33d5c5da1cbb2e64"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODQyODc5OnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/model/ElideNonSQLDBConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMDo0ODowMFrOHAdHNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjo0NzoxMFrOHA7j4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIzOTAzMA==", "bodyText": "I don't think we need to define this now.", "url": "https://github.com/yahoo/elide/pull/1497#discussion_r470239030", "createdAt": "2020-08-13T20:48:00Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/model/ElideNonSQLDBConfig.java", "diffHunk": "@@ -0,0 +1,13 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.model;\n+\n+/**\n+ * Elide SQL DB POJO.\n+ */\n+public class ElideNonSQLDBConfig extends ElideDBConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4e95e311293ad88547fe01b33d5c5da1cbb2e64"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDczNzg5MA==", "bodyText": "Deleted", "url": "https://github.com/yahoo/elide/pull/1497#discussion_r470737890", "createdAt": "2020-08-14T16:47:10Z", "author": {"login": "rishi-aga"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/model/ElideNonSQLDBConfig.java", "diffHunk": "@@ -0,0 +1,13 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.model;\n+\n+/**\n+ * Elide SQL DB POJO.\n+ */\n+public class ElideNonSQLDBConfig extends ElideDBConfig {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIzOTAzMA=="}, "originalCommit": {"oid": "e4e95e311293ad88547fe01b33d5c5da1cbb2e64"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTE3Mzk0OnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDozMzowM1rOHA219w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjo0NzozNVrOHA7kwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY2MDU5OQ==", "bodyText": "Should this be Config.VARIABLE.getConfigPath?", "url": "https://github.com/yahoo/elide/pull/1497#discussion_r470660599", "createdAt": "2020-08-14T14:33:03Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "diffHunk": "@@ -118,59 +132,108 @@ public void readAndValidateConfigs() throws IOException {\n     private void loadConfigMap() throws IOException {\n         PathMatchingResourcePatternResolver resolver = new PathMatchingResourcePatternResolver(\n                 this.getClass().getClassLoader());\n-        Resource[] modelResources = resolver.getResources(this.configDir);\n-        for (Resource resource : modelResources) {\n-            this.resourceMap.put(resource.getFilename(), resource);\n+        if (resolver.getResources(this.configDir).length == 0) {\n+            throw new IllegalStateException(this.configDir + \" : config path does not exist\");\n+        }\n+        int configDirURILength = resolver.getResources(this.configDir)[0].getURI().toString().length();\n+\n+        Resource[] hjsonResources = resolver.getResources(this.configDir + HJSON_EXTN);\n+        for (Resource resource : hjsonResources) {\n+            this.resourceMap.put(resource.getURI().toString().substring(configDirURILength), resource);\n         }\n     }\n \n     /**\n      * Read variable file config.\n-     * @return boolean true if variable config file exists else false\n-     * @throws IOException\n+     * @return Map<String, Object> A map containing all the variables if variable config exists else empty map\n      */\n-    private void readVariableConfig() throws IOException {\n-        String key = Config.VARIABLE.getConfigPath();\n-        if (this.resourceMap.containsKey(key)) {\n-            String content = IOUtils.toString(this.resourceMap.get(key).getInputStream(), StandardCharsets.UTF_8);\n-            this.setVariables(DynamicConfigHelpers.stringToVariablesPojo(content));\n-            this.resourceMap.remove(Config.VARIABLE.getConfigPath());\n-        }\n+    private Map<String, Object> readVariableConfig(Config config) {\n+\n+        return this.resourceMap\n+                        .entrySet()\n+                        .stream()\n+                        .filter(entry -> entry.getKey().startsWith(config.getConfigPath()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4e95e311293ad88547fe01b33d5c5da1cbb2e64"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDczODExNA==", "bodyText": "No, Config.MODELVARIABLE / Config.DBVARIABLE are passed as parameter to this method.", "url": "https://github.com/yahoo/elide/pull/1497#discussion_r470738114", "createdAt": "2020-08-14T16:47:35Z", "author": {"login": "rishi-aga"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "diffHunk": "@@ -118,59 +132,108 @@ public void readAndValidateConfigs() throws IOException {\n     private void loadConfigMap() throws IOException {\n         PathMatchingResourcePatternResolver resolver = new PathMatchingResourcePatternResolver(\n                 this.getClass().getClassLoader());\n-        Resource[] modelResources = resolver.getResources(this.configDir);\n-        for (Resource resource : modelResources) {\n-            this.resourceMap.put(resource.getFilename(), resource);\n+        if (resolver.getResources(this.configDir).length == 0) {\n+            throw new IllegalStateException(this.configDir + \" : config path does not exist\");\n+        }\n+        int configDirURILength = resolver.getResources(this.configDir)[0].getURI().toString().length();\n+\n+        Resource[] hjsonResources = resolver.getResources(this.configDir + HJSON_EXTN);\n+        for (Resource resource : hjsonResources) {\n+            this.resourceMap.put(resource.getURI().toString().substring(configDirURILength), resource);\n         }\n     }\n \n     /**\n      * Read variable file config.\n-     * @return boolean true if variable config file exists else false\n-     * @throws IOException\n+     * @return Map<String, Object> A map containing all the variables if variable config exists else empty map\n      */\n-    private void readVariableConfig() throws IOException {\n-        String key = Config.VARIABLE.getConfigPath();\n-        if (this.resourceMap.containsKey(key)) {\n-            String content = IOUtils.toString(this.resourceMap.get(key).getInputStream(), StandardCharsets.UTF_8);\n-            this.setVariables(DynamicConfigHelpers.stringToVariablesPojo(content));\n-            this.resourceMap.remove(Config.VARIABLE.getConfigPath());\n-        }\n+    private Map<String, Object> readVariableConfig(Config config) {\n+\n+        return this.resourceMap\n+                        .entrySet()\n+                        .stream()\n+                        .filter(entry -> entry.getKey().startsWith(config.getConfigPath()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY2MDU5OQ=="}, "originalCommit": {"oid": "e4e95e311293ad88547fe01b33d5c5da1cbb2e64"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTE3ODM1OnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDozNDoxOVrOHA24wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjo0ODozMVrOHA7mfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY2MTMxMg==", "bodyText": "Again - can we use the static as before for the filter here?", "url": "https://github.com/yahoo/elide/pull/1497#discussion_r470661312", "createdAt": "2020-08-14T14:34:19Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "diffHunk": "@@ -118,59 +132,108 @@ public void readAndValidateConfigs() throws IOException {\n     private void loadConfigMap() throws IOException {\n         PathMatchingResourcePatternResolver resolver = new PathMatchingResourcePatternResolver(\n                 this.getClass().getClassLoader());\n-        Resource[] modelResources = resolver.getResources(this.configDir);\n-        for (Resource resource : modelResources) {\n-            this.resourceMap.put(resource.getFilename(), resource);\n+        if (resolver.getResources(this.configDir).length == 0) {\n+            throw new IllegalStateException(this.configDir + \" : config path does not exist\");\n+        }\n+        int configDirURILength = resolver.getResources(this.configDir)[0].getURI().toString().length();\n+\n+        Resource[] hjsonResources = resolver.getResources(this.configDir + HJSON_EXTN);\n+        for (Resource resource : hjsonResources) {\n+            this.resourceMap.put(resource.getURI().toString().substring(configDirURILength), resource);\n         }\n     }\n \n     /**\n      * Read variable file config.\n-     * @return boolean true if variable config file exists else false\n-     * @throws IOException\n+     * @return Map<String, Object> A map containing all the variables if variable config exists else empty map\n      */\n-    private void readVariableConfig() throws IOException {\n-        String key = Config.VARIABLE.getConfigPath();\n-        if (this.resourceMap.containsKey(key)) {\n-            String content = IOUtils.toString(this.resourceMap.get(key).getInputStream(), StandardCharsets.UTF_8);\n-            this.setVariables(DynamicConfigHelpers.stringToVariablesPojo(content));\n-            this.resourceMap.remove(Config.VARIABLE.getConfigPath());\n-        }\n+    private Map<String, Object> readVariableConfig(Config config) {\n+\n+        return this.resourceMap\n+                        .entrySet()\n+                        .stream()\n+                        .filter(entry -> entry.getKey().startsWith(config.getConfigPath()))\n+                        .map(entry -> {\n+                            try {\n+                                String content = IOUtils.toString(entry.getValue().getInputStream(), UTF_8);\n+                                return DynamicConfigHelpers.stringToVariablesPojo(content);\n+                            } catch (IOException e) {\n+                                throw new IllegalStateException(e);\n+                            }\n+                        })\n+                        .findFirst()\n+                        .orElse(new HashMap<>());\n     }\n \n     /**\n-     * Read security config file and checks for any missing Handlebar variables.\n-     * @return boolean true if security config file exists else false\n-     * @throws IOException\n+     * Read and validates security config file.\n      */\n-    private void readSecurityConfig() throws IOException {\n-        String key = Config.SECURITY.getConfigPath();\n-        if (this.resourceMap.containsKey(key)) {\n-            String content = IOUtils.toString(this.resourceMap.get(key).getInputStream(), StandardCharsets.UTF_8);\n-            validateConfigForMissingVariables(content, this.variables);\n-            this.setElideSecurityConfig(DynamicConfigHelpers.stringToElideSecurityPojo(content, this.variables));\n-            validateRoleInSecurityConfig(this.getElideSecurityConfig());\n-            this.resourceMap.remove(Config.SECURITY.getConfigPath());\n-        }\n+    private ElideSecurityConfig readSecurityConfig() {\n+\n+        return this.resourceMap\n+                        .entrySet()\n+                        .stream()\n+                        .filter(entry -> entry.getKey().startsWith(Config.SECURITY.getConfigPath()))\n+                        .map(entry -> {\n+                            try {\n+                                String content = IOUtils.toString(entry.getValue().getInputStream(), UTF_8);\n+                                validateConfigForMissingVariables(content, this.modelVariables);\n+                                return DynamicConfigHelpers.stringToElideSecurityPojo(content, this.modelVariables);\n+                            } catch (IOException e) {\n+                                throw new IllegalStateException(e);\n+                            }\n+                        })\n+                        .findAny()\n+                        .orElse(new ElideSecurityConfig());\n     }\n \n     /**\n-     * Read table config files and checks for any missing Handlebar variables.\n-     * @throws IOException\n+     * Read and validates db config files.\n+     * @return Set<DBConfig> Set of SQL DB Configs\n      */\n-    private void readTableConfig() throws IOException {\n-        Set<Table> tables = new HashSet<>();\n-        if (this.resourceMap.isEmpty()) {\n-            throw new IllegalStateException(\"No Table configs found at: \" + this.configDir);\n-        }\n-        for (Entry<String, Resource> entry : this.resourceMap.entrySet()) {\n-            String content = IOUtils.toString(entry.getValue().getInputStream(), StandardCharsets.UTF_8);\n-            validateConfigForMissingVariables(content, this.variables);\n-            ElideTableConfig table = DynamicConfigHelpers.stringToElideTablePojo(content, this.variables);\n-            tables.addAll(table.getTables());\n+    private Set<DBConfig> readDbConfig(Config config) {\n+\n+        return this.resourceMap\n+                        .entrySet()\n+                        .stream()\n+                        .filter(entry -> entry.getKey().startsWith(config.getConfigPath())).map(entry -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4e95e311293ad88547fe01b33d5c5da1cbb2e64"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDczODU1Ng==", "bodyText": "Changed to Config.SQLDBConfig.getConfigPath() as removing NonSql", "url": "https://github.com/yahoo/elide/pull/1497#discussion_r470738556", "createdAt": "2020-08-14T16:48:31Z", "author": {"login": "rishi-aga"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "diffHunk": "@@ -118,59 +132,108 @@ public void readAndValidateConfigs() throws IOException {\n     private void loadConfigMap() throws IOException {\n         PathMatchingResourcePatternResolver resolver = new PathMatchingResourcePatternResolver(\n                 this.getClass().getClassLoader());\n-        Resource[] modelResources = resolver.getResources(this.configDir);\n-        for (Resource resource : modelResources) {\n-            this.resourceMap.put(resource.getFilename(), resource);\n+        if (resolver.getResources(this.configDir).length == 0) {\n+            throw new IllegalStateException(this.configDir + \" : config path does not exist\");\n+        }\n+        int configDirURILength = resolver.getResources(this.configDir)[0].getURI().toString().length();\n+\n+        Resource[] hjsonResources = resolver.getResources(this.configDir + HJSON_EXTN);\n+        for (Resource resource : hjsonResources) {\n+            this.resourceMap.put(resource.getURI().toString().substring(configDirURILength), resource);\n         }\n     }\n \n     /**\n      * Read variable file config.\n-     * @return boolean true if variable config file exists else false\n-     * @throws IOException\n+     * @return Map<String, Object> A map containing all the variables if variable config exists else empty map\n      */\n-    private void readVariableConfig() throws IOException {\n-        String key = Config.VARIABLE.getConfigPath();\n-        if (this.resourceMap.containsKey(key)) {\n-            String content = IOUtils.toString(this.resourceMap.get(key).getInputStream(), StandardCharsets.UTF_8);\n-            this.setVariables(DynamicConfigHelpers.stringToVariablesPojo(content));\n-            this.resourceMap.remove(Config.VARIABLE.getConfigPath());\n-        }\n+    private Map<String, Object> readVariableConfig(Config config) {\n+\n+        return this.resourceMap\n+                        .entrySet()\n+                        .stream()\n+                        .filter(entry -> entry.getKey().startsWith(config.getConfigPath()))\n+                        .map(entry -> {\n+                            try {\n+                                String content = IOUtils.toString(entry.getValue().getInputStream(), UTF_8);\n+                                return DynamicConfigHelpers.stringToVariablesPojo(content);\n+                            } catch (IOException e) {\n+                                throw new IllegalStateException(e);\n+                            }\n+                        })\n+                        .findFirst()\n+                        .orElse(new HashMap<>());\n     }\n \n     /**\n-     * Read security config file and checks for any missing Handlebar variables.\n-     * @return boolean true if security config file exists else false\n-     * @throws IOException\n+     * Read and validates security config file.\n      */\n-    private void readSecurityConfig() throws IOException {\n-        String key = Config.SECURITY.getConfigPath();\n-        if (this.resourceMap.containsKey(key)) {\n-            String content = IOUtils.toString(this.resourceMap.get(key).getInputStream(), StandardCharsets.UTF_8);\n-            validateConfigForMissingVariables(content, this.variables);\n-            this.setElideSecurityConfig(DynamicConfigHelpers.stringToElideSecurityPojo(content, this.variables));\n-            validateRoleInSecurityConfig(this.getElideSecurityConfig());\n-            this.resourceMap.remove(Config.SECURITY.getConfigPath());\n-        }\n+    private ElideSecurityConfig readSecurityConfig() {\n+\n+        return this.resourceMap\n+                        .entrySet()\n+                        .stream()\n+                        .filter(entry -> entry.getKey().startsWith(Config.SECURITY.getConfigPath()))\n+                        .map(entry -> {\n+                            try {\n+                                String content = IOUtils.toString(entry.getValue().getInputStream(), UTF_8);\n+                                validateConfigForMissingVariables(content, this.modelVariables);\n+                                return DynamicConfigHelpers.stringToElideSecurityPojo(content, this.modelVariables);\n+                            } catch (IOException e) {\n+                                throw new IllegalStateException(e);\n+                            }\n+                        })\n+                        .findAny()\n+                        .orElse(new ElideSecurityConfig());\n     }\n \n     /**\n-     * Read table config files and checks for any missing Handlebar variables.\n-     * @throws IOException\n+     * Read and validates db config files.\n+     * @return Set<DBConfig> Set of SQL DB Configs\n      */\n-    private void readTableConfig() throws IOException {\n-        Set<Table> tables = new HashSet<>();\n-        if (this.resourceMap.isEmpty()) {\n-            throw new IllegalStateException(\"No Table configs found at: \" + this.configDir);\n-        }\n-        for (Entry<String, Resource> entry : this.resourceMap.entrySet()) {\n-            String content = IOUtils.toString(entry.getValue().getInputStream(), StandardCharsets.UTF_8);\n-            validateConfigForMissingVariables(content, this.variables);\n-            ElideTableConfig table = DynamicConfigHelpers.stringToElideTablePojo(content, this.variables);\n-            tables.addAll(table.getTables());\n+    private Set<DBConfig> readDbConfig(Config config) {\n+\n+        return this.resourceMap\n+                        .entrySet()\n+                        .stream()\n+                        .filter(entry -> entry.getKey().startsWith(config.getConfigPath())).map(entry -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY2MTMxMg=="}, "originalCommit": {"oid": "e4e95e311293ad88547fe01b33d5c5da1cbb2e64"}, "originalPosition": 200}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTE4MTAwOnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDozNDo1NVrOHA26Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjo1MDoxMlrOHA7qFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY2MTY4Nw==", "bodyText": "map should go on its own line separate from filter.", "url": "https://github.com/yahoo/elide/pull/1497#discussion_r470661687", "createdAt": "2020-08-14T14:34:55Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "diffHunk": "@@ -118,59 +132,108 @@ public void readAndValidateConfigs() throws IOException {\n     private void loadConfigMap() throws IOException {\n         PathMatchingResourcePatternResolver resolver = new PathMatchingResourcePatternResolver(\n                 this.getClass().getClassLoader());\n-        Resource[] modelResources = resolver.getResources(this.configDir);\n-        for (Resource resource : modelResources) {\n-            this.resourceMap.put(resource.getFilename(), resource);\n+        if (resolver.getResources(this.configDir).length == 0) {\n+            throw new IllegalStateException(this.configDir + \" : config path does not exist\");\n+        }\n+        int configDirURILength = resolver.getResources(this.configDir)[0].getURI().toString().length();\n+\n+        Resource[] hjsonResources = resolver.getResources(this.configDir + HJSON_EXTN);\n+        for (Resource resource : hjsonResources) {\n+            this.resourceMap.put(resource.getURI().toString().substring(configDirURILength), resource);\n         }\n     }\n \n     /**\n      * Read variable file config.\n-     * @return boolean true if variable config file exists else false\n-     * @throws IOException\n+     * @return Map<String, Object> A map containing all the variables if variable config exists else empty map\n      */\n-    private void readVariableConfig() throws IOException {\n-        String key = Config.VARIABLE.getConfigPath();\n-        if (this.resourceMap.containsKey(key)) {\n-            String content = IOUtils.toString(this.resourceMap.get(key).getInputStream(), StandardCharsets.UTF_8);\n-            this.setVariables(DynamicConfigHelpers.stringToVariablesPojo(content));\n-            this.resourceMap.remove(Config.VARIABLE.getConfigPath());\n-        }\n+    private Map<String, Object> readVariableConfig(Config config) {\n+\n+        return this.resourceMap\n+                        .entrySet()\n+                        .stream()\n+                        .filter(entry -> entry.getKey().startsWith(config.getConfigPath()))\n+                        .map(entry -> {\n+                            try {\n+                                String content = IOUtils.toString(entry.getValue().getInputStream(), UTF_8);\n+                                return DynamicConfigHelpers.stringToVariablesPojo(content);\n+                            } catch (IOException e) {\n+                                throw new IllegalStateException(e);\n+                            }\n+                        })\n+                        .findFirst()\n+                        .orElse(new HashMap<>());\n     }\n \n     /**\n-     * Read security config file and checks for any missing Handlebar variables.\n-     * @return boolean true if security config file exists else false\n-     * @throws IOException\n+     * Read and validates security config file.\n      */\n-    private void readSecurityConfig() throws IOException {\n-        String key = Config.SECURITY.getConfigPath();\n-        if (this.resourceMap.containsKey(key)) {\n-            String content = IOUtils.toString(this.resourceMap.get(key).getInputStream(), StandardCharsets.UTF_8);\n-            validateConfigForMissingVariables(content, this.variables);\n-            this.setElideSecurityConfig(DynamicConfigHelpers.stringToElideSecurityPojo(content, this.variables));\n-            validateRoleInSecurityConfig(this.getElideSecurityConfig());\n-            this.resourceMap.remove(Config.SECURITY.getConfigPath());\n-        }\n+    private ElideSecurityConfig readSecurityConfig() {\n+\n+        return this.resourceMap\n+                        .entrySet()\n+                        .stream()\n+                        .filter(entry -> entry.getKey().startsWith(Config.SECURITY.getConfigPath()))\n+                        .map(entry -> {\n+                            try {\n+                                String content = IOUtils.toString(entry.getValue().getInputStream(), UTF_8);\n+                                validateConfigForMissingVariables(content, this.modelVariables);\n+                                return DynamicConfigHelpers.stringToElideSecurityPojo(content, this.modelVariables);\n+                            } catch (IOException e) {\n+                                throw new IllegalStateException(e);\n+                            }\n+                        })\n+                        .findAny()\n+                        .orElse(new ElideSecurityConfig());\n     }\n \n     /**\n-     * Read table config files and checks for any missing Handlebar variables.\n-     * @throws IOException\n+     * Read and validates db config files.\n+     * @return Set<DBConfig> Set of SQL DB Configs\n      */\n-    private void readTableConfig() throws IOException {\n-        Set<Table> tables = new HashSet<>();\n-        if (this.resourceMap.isEmpty()) {\n-            throw new IllegalStateException(\"No Table configs found at: \" + this.configDir);\n-        }\n-        for (Entry<String, Resource> entry : this.resourceMap.entrySet()) {\n-            String content = IOUtils.toString(entry.getValue().getInputStream(), StandardCharsets.UTF_8);\n-            validateConfigForMissingVariables(content, this.variables);\n-            ElideTableConfig table = DynamicConfigHelpers.stringToElideTablePojo(content, this.variables);\n-            tables.addAll(table.getTables());\n+    private Set<DBConfig> readDbConfig(Config config) {\n+\n+        return this.resourceMap\n+                        .entrySet()\n+                        .stream()\n+                        .filter(entry -> entry.getKey().startsWith(config.getConfigPath())).map(entry -> {\n+                            try {\n+                                String content = IOUtils.toString(entry.getValue().getInputStream(), UTF_8);\n+                                validateConfigForMissingVariables(content, this.dbVariables);\n+                                return DynamicConfigHelpers.stringToElideDBConfigPojo(content, this.dbVariables);\n+                            } catch (IOException e) {\n+                                throw new IllegalStateException(e);\n+                            }\n+                        })\n+                        .flatMap(dbconfig -> dbconfig.getDbconfigs().stream())\n+                        .collect(Collectors.toSet());\n+    }\n+\n+    /**\n+     * Read and validates table config files.\n+     */\n+    private Set<Table> readTableConfig() {\n+\n+        Set<Table> tables = this.resourceMap\n+                        .entrySet()\n+                        .stream()\n+                        .filter(entry -> entry.getKey().startsWith(Config.TABLE.getConfigPath())).map(entry -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4e95e311293ad88547fe01b33d5c5da1cbb2e64"}, "originalPosition": 221}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDczOTQ3Nw==", "bodyText": "updated", "url": "https://github.com/yahoo/elide/pull/1497#discussion_r470739477", "createdAt": "2020-08-14T16:50:12Z", "author": {"login": "rishi-aga"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "diffHunk": "@@ -118,59 +132,108 @@ public void readAndValidateConfigs() throws IOException {\n     private void loadConfigMap() throws IOException {\n         PathMatchingResourcePatternResolver resolver = new PathMatchingResourcePatternResolver(\n                 this.getClass().getClassLoader());\n-        Resource[] modelResources = resolver.getResources(this.configDir);\n-        for (Resource resource : modelResources) {\n-            this.resourceMap.put(resource.getFilename(), resource);\n+        if (resolver.getResources(this.configDir).length == 0) {\n+            throw new IllegalStateException(this.configDir + \" : config path does not exist\");\n+        }\n+        int configDirURILength = resolver.getResources(this.configDir)[0].getURI().toString().length();\n+\n+        Resource[] hjsonResources = resolver.getResources(this.configDir + HJSON_EXTN);\n+        for (Resource resource : hjsonResources) {\n+            this.resourceMap.put(resource.getURI().toString().substring(configDirURILength), resource);\n         }\n     }\n \n     /**\n      * Read variable file config.\n-     * @return boolean true if variable config file exists else false\n-     * @throws IOException\n+     * @return Map<String, Object> A map containing all the variables if variable config exists else empty map\n      */\n-    private void readVariableConfig() throws IOException {\n-        String key = Config.VARIABLE.getConfigPath();\n-        if (this.resourceMap.containsKey(key)) {\n-            String content = IOUtils.toString(this.resourceMap.get(key).getInputStream(), StandardCharsets.UTF_8);\n-            this.setVariables(DynamicConfigHelpers.stringToVariablesPojo(content));\n-            this.resourceMap.remove(Config.VARIABLE.getConfigPath());\n-        }\n+    private Map<String, Object> readVariableConfig(Config config) {\n+\n+        return this.resourceMap\n+                        .entrySet()\n+                        .stream()\n+                        .filter(entry -> entry.getKey().startsWith(config.getConfigPath()))\n+                        .map(entry -> {\n+                            try {\n+                                String content = IOUtils.toString(entry.getValue().getInputStream(), UTF_8);\n+                                return DynamicConfigHelpers.stringToVariablesPojo(content);\n+                            } catch (IOException e) {\n+                                throw new IllegalStateException(e);\n+                            }\n+                        })\n+                        .findFirst()\n+                        .orElse(new HashMap<>());\n     }\n \n     /**\n-     * Read security config file and checks for any missing Handlebar variables.\n-     * @return boolean true if security config file exists else false\n-     * @throws IOException\n+     * Read and validates security config file.\n      */\n-    private void readSecurityConfig() throws IOException {\n-        String key = Config.SECURITY.getConfigPath();\n-        if (this.resourceMap.containsKey(key)) {\n-            String content = IOUtils.toString(this.resourceMap.get(key).getInputStream(), StandardCharsets.UTF_8);\n-            validateConfigForMissingVariables(content, this.variables);\n-            this.setElideSecurityConfig(DynamicConfigHelpers.stringToElideSecurityPojo(content, this.variables));\n-            validateRoleInSecurityConfig(this.getElideSecurityConfig());\n-            this.resourceMap.remove(Config.SECURITY.getConfigPath());\n-        }\n+    private ElideSecurityConfig readSecurityConfig() {\n+\n+        return this.resourceMap\n+                        .entrySet()\n+                        .stream()\n+                        .filter(entry -> entry.getKey().startsWith(Config.SECURITY.getConfigPath()))\n+                        .map(entry -> {\n+                            try {\n+                                String content = IOUtils.toString(entry.getValue().getInputStream(), UTF_8);\n+                                validateConfigForMissingVariables(content, this.modelVariables);\n+                                return DynamicConfigHelpers.stringToElideSecurityPojo(content, this.modelVariables);\n+                            } catch (IOException e) {\n+                                throw new IllegalStateException(e);\n+                            }\n+                        })\n+                        .findAny()\n+                        .orElse(new ElideSecurityConfig());\n     }\n \n     /**\n-     * Read table config files and checks for any missing Handlebar variables.\n-     * @throws IOException\n+     * Read and validates db config files.\n+     * @return Set<DBConfig> Set of SQL DB Configs\n      */\n-    private void readTableConfig() throws IOException {\n-        Set<Table> tables = new HashSet<>();\n-        if (this.resourceMap.isEmpty()) {\n-            throw new IllegalStateException(\"No Table configs found at: \" + this.configDir);\n-        }\n-        for (Entry<String, Resource> entry : this.resourceMap.entrySet()) {\n-            String content = IOUtils.toString(entry.getValue().getInputStream(), StandardCharsets.UTF_8);\n-            validateConfigForMissingVariables(content, this.variables);\n-            ElideTableConfig table = DynamicConfigHelpers.stringToElideTablePojo(content, this.variables);\n-            tables.addAll(table.getTables());\n+    private Set<DBConfig> readDbConfig(Config config) {\n+\n+        return this.resourceMap\n+                        .entrySet()\n+                        .stream()\n+                        .filter(entry -> entry.getKey().startsWith(config.getConfigPath())).map(entry -> {\n+                            try {\n+                                String content = IOUtils.toString(entry.getValue().getInputStream(), UTF_8);\n+                                validateConfigForMissingVariables(content, this.dbVariables);\n+                                return DynamicConfigHelpers.stringToElideDBConfigPojo(content, this.dbVariables);\n+                            } catch (IOException e) {\n+                                throw new IllegalStateException(e);\n+                            }\n+                        })\n+                        .flatMap(dbconfig -> dbconfig.getDbconfigs().stream())\n+                        .collect(Collectors.toSet());\n+    }\n+\n+    /**\n+     * Read and validates table config files.\n+     */\n+    private Set<Table> readTableConfig() {\n+\n+        Set<Table> tables = this.resourceMap\n+                        .entrySet()\n+                        .stream()\n+                        .filter(entry -> entry.getKey().startsWith(Config.TABLE.getConfigPath())).map(entry -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY2MTY4Nw=="}, "originalCommit": {"oid": "e4e95e311293ad88547fe01b33d5c5da1cbb2e64"}, "originalPosition": 221}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTE4MTg4OnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDozNToxMVrOHA26zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjo1MDoxNlrOHA7qTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY2MTgzNw==", "bodyText": "map should go on its own line separate from filter.", "url": "https://github.com/yahoo/elide/pull/1497#discussion_r470661837", "createdAt": "2020-08-14T14:35:11Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "diffHunk": "@@ -118,59 +132,108 @@ public void readAndValidateConfigs() throws IOException {\n     private void loadConfigMap() throws IOException {\n         PathMatchingResourcePatternResolver resolver = new PathMatchingResourcePatternResolver(\n                 this.getClass().getClassLoader());\n-        Resource[] modelResources = resolver.getResources(this.configDir);\n-        for (Resource resource : modelResources) {\n-            this.resourceMap.put(resource.getFilename(), resource);\n+        if (resolver.getResources(this.configDir).length == 0) {\n+            throw new IllegalStateException(this.configDir + \" : config path does not exist\");\n+        }\n+        int configDirURILength = resolver.getResources(this.configDir)[0].getURI().toString().length();\n+\n+        Resource[] hjsonResources = resolver.getResources(this.configDir + HJSON_EXTN);\n+        for (Resource resource : hjsonResources) {\n+            this.resourceMap.put(resource.getURI().toString().substring(configDirURILength), resource);\n         }\n     }\n \n     /**\n      * Read variable file config.\n-     * @return boolean true if variable config file exists else false\n-     * @throws IOException\n+     * @return Map<String, Object> A map containing all the variables if variable config exists else empty map\n      */\n-    private void readVariableConfig() throws IOException {\n-        String key = Config.VARIABLE.getConfigPath();\n-        if (this.resourceMap.containsKey(key)) {\n-            String content = IOUtils.toString(this.resourceMap.get(key).getInputStream(), StandardCharsets.UTF_8);\n-            this.setVariables(DynamicConfigHelpers.stringToVariablesPojo(content));\n-            this.resourceMap.remove(Config.VARIABLE.getConfigPath());\n-        }\n+    private Map<String, Object> readVariableConfig(Config config) {\n+\n+        return this.resourceMap\n+                        .entrySet()\n+                        .stream()\n+                        .filter(entry -> entry.getKey().startsWith(config.getConfigPath()))\n+                        .map(entry -> {\n+                            try {\n+                                String content = IOUtils.toString(entry.getValue().getInputStream(), UTF_8);\n+                                return DynamicConfigHelpers.stringToVariablesPojo(content);\n+                            } catch (IOException e) {\n+                                throw new IllegalStateException(e);\n+                            }\n+                        })\n+                        .findFirst()\n+                        .orElse(new HashMap<>());\n     }\n \n     /**\n-     * Read security config file and checks for any missing Handlebar variables.\n-     * @return boolean true if security config file exists else false\n-     * @throws IOException\n+     * Read and validates security config file.\n      */\n-    private void readSecurityConfig() throws IOException {\n-        String key = Config.SECURITY.getConfigPath();\n-        if (this.resourceMap.containsKey(key)) {\n-            String content = IOUtils.toString(this.resourceMap.get(key).getInputStream(), StandardCharsets.UTF_8);\n-            validateConfigForMissingVariables(content, this.variables);\n-            this.setElideSecurityConfig(DynamicConfigHelpers.stringToElideSecurityPojo(content, this.variables));\n-            validateRoleInSecurityConfig(this.getElideSecurityConfig());\n-            this.resourceMap.remove(Config.SECURITY.getConfigPath());\n-        }\n+    private ElideSecurityConfig readSecurityConfig() {\n+\n+        return this.resourceMap\n+                        .entrySet()\n+                        .stream()\n+                        .filter(entry -> entry.getKey().startsWith(Config.SECURITY.getConfigPath()))\n+                        .map(entry -> {\n+                            try {\n+                                String content = IOUtils.toString(entry.getValue().getInputStream(), UTF_8);\n+                                validateConfigForMissingVariables(content, this.modelVariables);\n+                                return DynamicConfigHelpers.stringToElideSecurityPojo(content, this.modelVariables);\n+                            } catch (IOException e) {\n+                                throw new IllegalStateException(e);\n+                            }\n+                        })\n+                        .findAny()\n+                        .orElse(new ElideSecurityConfig());\n     }\n \n     /**\n-     * Read table config files and checks for any missing Handlebar variables.\n-     * @throws IOException\n+     * Read and validates db config files.\n+     * @return Set<DBConfig> Set of SQL DB Configs\n      */\n-    private void readTableConfig() throws IOException {\n-        Set<Table> tables = new HashSet<>();\n-        if (this.resourceMap.isEmpty()) {\n-            throw new IllegalStateException(\"No Table configs found at: \" + this.configDir);\n-        }\n-        for (Entry<String, Resource> entry : this.resourceMap.entrySet()) {\n-            String content = IOUtils.toString(entry.getValue().getInputStream(), StandardCharsets.UTF_8);\n-            validateConfigForMissingVariables(content, this.variables);\n-            ElideTableConfig table = DynamicConfigHelpers.stringToElideTablePojo(content, this.variables);\n-            tables.addAll(table.getTables());\n+    private Set<DBConfig> readDbConfig(Config config) {\n+\n+        return this.resourceMap\n+                        .entrySet()\n+                        .stream()\n+                        .filter(entry -> entry.getKey().startsWith(config.getConfigPath())).map(entry -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4e95e311293ad88547fe01b33d5c5da1cbb2e64"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDczOTUzMg==", "bodyText": "updated", "url": "https://github.com/yahoo/elide/pull/1497#discussion_r470739532", "createdAt": "2020-08-14T16:50:16Z", "author": {"login": "rishi-aga"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "diffHunk": "@@ -118,59 +132,108 @@ public void readAndValidateConfigs() throws IOException {\n     private void loadConfigMap() throws IOException {\n         PathMatchingResourcePatternResolver resolver = new PathMatchingResourcePatternResolver(\n                 this.getClass().getClassLoader());\n-        Resource[] modelResources = resolver.getResources(this.configDir);\n-        for (Resource resource : modelResources) {\n-            this.resourceMap.put(resource.getFilename(), resource);\n+        if (resolver.getResources(this.configDir).length == 0) {\n+            throw new IllegalStateException(this.configDir + \" : config path does not exist\");\n+        }\n+        int configDirURILength = resolver.getResources(this.configDir)[0].getURI().toString().length();\n+\n+        Resource[] hjsonResources = resolver.getResources(this.configDir + HJSON_EXTN);\n+        for (Resource resource : hjsonResources) {\n+            this.resourceMap.put(resource.getURI().toString().substring(configDirURILength), resource);\n         }\n     }\n \n     /**\n      * Read variable file config.\n-     * @return boolean true if variable config file exists else false\n-     * @throws IOException\n+     * @return Map<String, Object> A map containing all the variables if variable config exists else empty map\n      */\n-    private void readVariableConfig() throws IOException {\n-        String key = Config.VARIABLE.getConfigPath();\n-        if (this.resourceMap.containsKey(key)) {\n-            String content = IOUtils.toString(this.resourceMap.get(key).getInputStream(), StandardCharsets.UTF_8);\n-            this.setVariables(DynamicConfigHelpers.stringToVariablesPojo(content));\n-            this.resourceMap.remove(Config.VARIABLE.getConfigPath());\n-        }\n+    private Map<String, Object> readVariableConfig(Config config) {\n+\n+        return this.resourceMap\n+                        .entrySet()\n+                        .stream()\n+                        .filter(entry -> entry.getKey().startsWith(config.getConfigPath()))\n+                        .map(entry -> {\n+                            try {\n+                                String content = IOUtils.toString(entry.getValue().getInputStream(), UTF_8);\n+                                return DynamicConfigHelpers.stringToVariablesPojo(content);\n+                            } catch (IOException e) {\n+                                throw new IllegalStateException(e);\n+                            }\n+                        })\n+                        .findFirst()\n+                        .orElse(new HashMap<>());\n     }\n \n     /**\n-     * Read security config file and checks for any missing Handlebar variables.\n-     * @return boolean true if security config file exists else false\n-     * @throws IOException\n+     * Read and validates security config file.\n      */\n-    private void readSecurityConfig() throws IOException {\n-        String key = Config.SECURITY.getConfigPath();\n-        if (this.resourceMap.containsKey(key)) {\n-            String content = IOUtils.toString(this.resourceMap.get(key).getInputStream(), StandardCharsets.UTF_8);\n-            validateConfigForMissingVariables(content, this.variables);\n-            this.setElideSecurityConfig(DynamicConfigHelpers.stringToElideSecurityPojo(content, this.variables));\n-            validateRoleInSecurityConfig(this.getElideSecurityConfig());\n-            this.resourceMap.remove(Config.SECURITY.getConfigPath());\n-        }\n+    private ElideSecurityConfig readSecurityConfig() {\n+\n+        return this.resourceMap\n+                        .entrySet()\n+                        .stream()\n+                        .filter(entry -> entry.getKey().startsWith(Config.SECURITY.getConfigPath()))\n+                        .map(entry -> {\n+                            try {\n+                                String content = IOUtils.toString(entry.getValue().getInputStream(), UTF_8);\n+                                validateConfigForMissingVariables(content, this.modelVariables);\n+                                return DynamicConfigHelpers.stringToElideSecurityPojo(content, this.modelVariables);\n+                            } catch (IOException e) {\n+                                throw new IllegalStateException(e);\n+                            }\n+                        })\n+                        .findAny()\n+                        .orElse(new ElideSecurityConfig());\n     }\n \n     /**\n-     * Read table config files and checks for any missing Handlebar variables.\n-     * @throws IOException\n+     * Read and validates db config files.\n+     * @return Set<DBConfig> Set of SQL DB Configs\n      */\n-    private void readTableConfig() throws IOException {\n-        Set<Table> tables = new HashSet<>();\n-        if (this.resourceMap.isEmpty()) {\n-            throw new IllegalStateException(\"No Table configs found at: \" + this.configDir);\n-        }\n-        for (Entry<String, Resource> entry : this.resourceMap.entrySet()) {\n-            String content = IOUtils.toString(entry.getValue().getInputStream(), StandardCharsets.UTF_8);\n-            validateConfigForMissingVariables(content, this.variables);\n-            ElideTableConfig table = DynamicConfigHelpers.stringToElideTablePojo(content, this.variables);\n-            tables.addAll(table.getTables());\n+    private Set<DBConfig> readDbConfig(Config config) {\n+\n+        return this.resourceMap\n+                        .entrySet()\n+                        .stream()\n+                        .filter(entry -> entry.getKey().startsWith(config.getConfigPath())).map(entry -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY2MTgzNw=="}, "originalCommit": {"oid": "e4e95e311293ad88547fe01b33d5c5da1cbb2e64"}, "originalPosition": 200}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTIyMDk5OnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDo0MzozMFrOHA3RBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNzoxMzoxMFrOHA8Wnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY2NzUyNQ==", "bodyText": "Is it possible for DbConnectionName to be null?  I wonder if we should invert this comparison here.", "url": "https://github.com/yahoo/elide/pull/1497#discussion_r470667525", "createdAt": "2020-08-14T14:43:30Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "diffHunk": "@@ -211,6 +274,68 @@ private static boolean validateSqlInTableConfig(ElideTableConfig elideTableConfi\n         return true;\n     }\n \n+    /**\n+     * Validates join clause does not refer to a Table which is not in the same DBConnection.\n+     * If joined table is not part of dynamic configuration, then ignore\n+     */\n+    private static void validateJoinedTablesDBConnectionName(ElideTableConfig elideTableConfig) {\n+\n+        for (Table table : elideTableConfig.getTables()) {\n+            if (!table.getJoins().isEmpty()) {\n+\n+                Set<String> joinedTables = table.getJoins()\n+                        .stream()\n+                        .map(join -> join.getTo().toLowerCase(Locale.ENGLISH))\n+                        .collect(Collectors.toSet());\n+\n+                Set<String> connections = elideTableConfig.getTables()\n+                        .stream()\n+                        .filter(t -> joinedTables.contains(t.getName().toLowerCase(Locale.ENGLISH)))\n+                        .map(t -> t.getDbConnectionName())\n+                        .collect(Collectors.toSet());\n+\n+                if (connections.size() > 1 || (connections.size() == 1\n+                                && !table.getDbConnectionName().equals(connections.iterator().next()))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4e95e311293ad88547fe01b33d5c5da1cbb2e64"}, "originalPosition": 268}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc1MDg3OQ==", "bodyText": "DbConnectionName  can not be null as Table schema doesn't allow and default value is Blank(\"\").", "url": "https://github.com/yahoo/elide/pull/1497#discussion_r470750879", "createdAt": "2020-08-14T17:13:10Z", "author": {"login": "rishi-aga"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "diffHunk": "@@ -211,6 +274,68 @@ private static boolean validateSqlInTableConfig(ElideTableConfig elideTableConfi\n         return true;\n     }\n \n+    /**\n+     * Validates join clause does not refer to a Table which is not in the same DBConnection.\n+     * If joined table is not part of dynamic configuration, then ignore\n+     */\n+    private static void validateJoinedTablesDBConnectionName(ElideTableConfig elideTableConfig) {\n+\n+        for (Table table : elideTableConfig.getTables()) {\n+            if (!table.getJoins().isEmpty()) {\n+\n+                Set<String> joinedTables = table.getJoins()\n+                        .stream()\n+                        .map(join -> join.getTo().toLowerCase(Locale.ENGLISH))\n+                        .collect(Collectors.toSet());\n+\n+                Set<String> connections = elideTableConfig.getTables()\n+                        .stream()\n+                        .filter(t -> joinedTables.contains(t.getName().toLowerCase(Locale.ENGLISH)))\n+                        .map(t -> t.getDbConnectionName())\n+                        .collect(Collectors.toSet());\n+\n+                if (connections.size() > 1 || (connections.size() == 1\n+                                && !table.getDbConnectionName().equals(connections.iterator().next()))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY2NzUyNQ=="}, "originalCommit": {"oid": "e4e95e311293ad88547fe01b33d5c5da1cbb2e64"}, "originalPosition": 268}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTI0Mzc3OnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDo0NjoxMFrOHA3c0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjo1MDoyOVrOHA7qww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY3MDU0Ng==", "bodyText": "Do we have unit tests for this function?", "url": "https://github.com/yahoo/elide/pull/1497#discussion_r470670546", "createdAt": "2020-08-14T14:46:10Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "diffHunk": "@@ -296,8 +429,10 @@ private static void printHelp(Options options) {\n      * @return Path to model dir\n      */\n     private String formatClassPath(String filePath) {\n-        if (filePath.indexOf(RESOURCES) > -1) {\n-            return filePath.substring(filePath.indexOf(RESOURCES) + RESOURCE_LENGTH);\n+        if (filePath.indexOf(RESOURCES + File.separator) > -1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4e95e311293ad88547fe01b33d5c5da1cbb2e64"}, "originalPosition": 349}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDczOTY1MQ==", "bodyText": "Added.", "url": "https://github.com/yahoo/elide/pull/1497#discussion_r470739651", "createdAt": "2020-08-14T16:50:29Z", "author": {"login": "rishi-aga"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "diffHunk": "@@ -296,8 +429,10 @@ private static void printHelp(Options options) {\n      * @return Path to model dir\n      */\n     private String formatClassPath(String filePath) {\n-        if (filePath.indexOf(RESOURCES) > -1) {\n-            return filePath.substring(filePath.indexOf(RESOURCES) + RESOURCE_LENGTH);\n+        if (filePath.indexOf(RESOURCES + File.separator) > -1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY3MDU0Ng=="}, "originalCommit": {"oid": "e4e95e311293ad88547fe01b33d5c5da1cbb2e64"}, "originalPosition": 349}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTk3ODkyOnYy", "diffSide": "RIGHT", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMjowODozOVrOHHfbFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNToyMToxOVrOHIVY0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYxNjkxNw==", "bodyText": "Maybe Table and DB should both leverage a common interface (Named or something) and use it to get the name without casting here.  This function could take a set of Named instead of a set of objects.", "url": "https://github.com/yahoo/elide/pull/1497#discussion_r477616917", "createdAt": "2020-08-26T22:08:39Z", "author": {"login": "aklish"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "diffHunk": "@@ -211,6 +274,51 @@ private static boolean validateSqlInTableConfig(ElideTableConfig elideTableConfi\n         return true;\n     }\n \n+    /**\n+     * Validates join clause does not refer to a Table which is not in the same DBConnection.\n+     * If joined table is not part of dynamic configuration, then ignore\n+     */\n+    private static void validateJoinedTablesDBConnectionName(ElideTableConfig elideTableConfig) {\n+\n+        for (Table table : elideTableConfig.getTables()) {\n+            if (!table.getJoins().isEmpty()) {\n+\n+                Set<String> joinedTables = table.getJoins()\n+                        .stream()\n+                        .map(join -> join.getTo().toLowerCase(Locale.ENGLISH))\n+                        .collect(Collectors.toSet());\n+\n+                Set<String> connections = elideTableConfig.getTables()\n+                        .stream()\n+                        .filter(t -> joinedTables.contains(t.getName().toLowerCase(Locale.ENGLISH)))\n+                        .map(t -> t.getDbConnectionName())\n+                        .collect(Collectors.toSet());\n+\n+                if (connections.size() > 1 || (connections.size() == 1\n+                                && !table.getDbConnectionName().equals(connections.iterator().next()))) {\n+                    throw new IllegalStateException(\"DBConnection name mismatch between table: \" + table.getName()\n+                                    + \" and tables in its Join Clause.\");\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Validates table (or db connection) name is unique across all the dynamic table (or db connection) configs.\n+     */\n+    private void validateNameUniqueness(Set<? extends Object> configs) {\n+\n+        Set<String> names = new HashSet<>();\n+\n+        configs.forEach(obj -> {\n+            if (obj instanceof Table && !names.add(((Table) obj).getName().toLowerCase(Locale.ENGLISH))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff9b3cf7f751f522d062a1971127b47ea6e10a50"}, "originalPosition": 284}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODUwMTA3NA==", "bodyText": "Updated", "url": "https://github.com/yahoo/elide/pull/1497#discussion_r478501074", "createdAt": "2020-08-27T15:21:19Z", "author": {"login": "rishi-aga"}, "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "diffHunk": "@@ -211,6 +274,51 @@ private static boolean validateSqlInTableConfig(ElideTableConfig elideTableConfi\n         return true;\n     }\n \n+    /**\n+     * Validates join clause does not refer to a Table which is not in the same DBConnection.\n+     * If joined table is not part of dynamic configuration, then ignore\n+     */\n+    private static void validateJoinedTablesDBConnectionName(ElideTableConfig elideTableConfig) {\n+\n+        for (Table table : elideTableConfig.getTables()) {\n+            if (!table.getJoins().isEmpty()) {\n+\n+                Set<String> joinedTables = table.getJoins()\n+                        .stream()\n+                        .map(join -> join.getTo().toLowerCase(Locale.ENGLISH))\n+                        .collect(Collectors.toSet());\n+\n+                Set<String> connections = elideTableConfig.getTables()\n+                        .stream()\n+                        .filter(t -> joinedTables.contains(t.getName().toLowerCase(Locale.ENGLISH)))\n+                        .map(t -> t.getDbConnectionName())\n+                        .collect(Collectors.toSet());\n+\n+                if (connections.size() > 1 || (connections.size() == 1\n+                                && !table.getDbConnectionName().equals(connections.iterator().next()))) {\n+                    throw new IllegalStateException(\"DBConnection name mismatch between table: \" + table.getName()\n+                                    + \" and tables in its Join Clause.\");\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Validates table (or db connection) name is unique across all the dynamic table (or db connection) configs.\n+     */\n+    private void validateNameUniqueness(Set<? extends Object> configs) {\n+\n+        Set<String> names = new HashSet<>();\n+\n+        configs.forEach(obj -> {\n+            if (obj instanceof Table && !names.add(((Table) obj).getName().toLowerCase(Locale.ENGLISH))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYxNjkxNw=="}, "originalCommit": {"oid": "ff9b3cf7f751f522d062a1971127b47ea6e10a50"}, "originalPosition": 284}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 947, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}