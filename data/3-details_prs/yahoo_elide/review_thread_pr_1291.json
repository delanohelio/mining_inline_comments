{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5NzI0NzM1", "number": 1291, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMDo1NToyM1rOD25ISw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxOToyMDo1NlrOD5IT8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODg1NzA3OnYy", "diffSide": "RIGHT", "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/FilterPredicate.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMDo1NToyM1rOGM3R5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMDo1OToyN1rOGM3cPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE0MTc5OQ==", "bodyText": "There is a method in Path to get the last element.", "url": "https://github.com/yahoo/elide/pull/1291#discussion_r416141799", "createdAt": "2020-04-27T20:55:23Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/FilterPredicate.java", "diffHunk": "@@ -59,6 +59,12 @@ public static boolean toManyInPathExceptLastPathElement(EntityDictionary diction\n                 .anyMatch(RelationshipType::isToMany);\n     }\n \n+    public static boolean checkLastPathElementType(EntityDictionary dictionary, Path path, Class<?> clz) {\n+        int pathLength = path.getPathElements().size();\n+        PathElement lastPathElement = path.getPathElements().get(pathLength - 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9833baed7c4cf4f0259f6b380a6360d5b027f7c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE0NDQ0NA==", "bodyText": "Check out in the same file:\n    public static boolean toManyInPath(EntityDictionary dictionary, Path path) {\n        return path.getPathElements().stream()\n                .map(element -> dictionary.getRelationshipType(element.getType(), element.getFieldName()))\n                .anyMatch(RelationshipType::isToMany);\n    }\n\n    public static boolean toManyInPathExceptLastPathElement(EntityDictionary dictionary, Path path) {\n        int pathLength = path.getPathElements().size();\n        return path.getPathElements().stream()\n                .limit(pathLength - 1)\n                .map(element -> dictionary.getRelationshipType(element.getType(), element.getFieldName()))\n                .anyMatch(RelationshipType::isToMany);\n    }\nLet's add a method that looks like one of these (toManyInLastPathElement):", "url": "https://github.com/yahoo/elide/pull/1291#discussion_r416144444", "createdAt": "2020-04-27T20:59:27Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/FilterPredicate.java", "diffHunk": "@@ -59,6 +59,12 @@ public static boolean toManyInPathExceptLastPathElement(EntityDictionary diction\n                 .anyMatch(RelationshipType::isToMany);\n     }\n \n+    public static boolean checkLastPathElementType(EntityDictionary dictionary, Path path, Class<?> clz) {\n+        int pathLength = path.getPathElements().size();\n+        PathElement lastPathElement = path.getPathElements().get(pathLength - 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE0MTc5OQ=="}, "originalCommit": {"oid": "f9833baed7c4cf4f0259f6b380a6360d5b027f7c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODkwOTY4OnYy", "diffSide": "RIGHT", "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/Operator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMTowNzo1NVrOGM3w2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMTowMDo0MlrOGO6Ktw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE0OTcyMg==", "bodyText": "coerce into val.getClass().  We probably want to support lists of numbers too.", "url": "https://github.com/yahoo/elide/pull/1291#discussion_r416149722", "createdAt": "2020-04-27T21:07:55Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/Operator.java", "diffHunk": "@@ -350,6 +366,25 @@ public static Operator fromString(final String string) {\n         };\n     }\n \n+    private static <T> Predicate<T> hasMember(String field, List<Object> values, RequestScope requestScope) {\n+        return (T entity) -> {\n+            if (values.size() != 1) {\n+                throw new InvalidPredicateException(\"HasMember can only take one argument\");\n+            }\n+            Object val = getFieldValue(entity, field, requestScope);\n+            String filterStr = CoerceUtil.coerce(values.get(0), String.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9833baed7c4cf4f0259f6b380a6360d5b027f7c"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkwNjUxMw==", "bodyText": "Object val will be an instance of Collection. To get the parameterized type of collection, I think we need to iterate over the path and get paremeterizedType from entityDict. I am not sure how to get parameterized type from Collection object", "url": "https://github.com/yahoo/elide/pull/1291#discussion_r416906513", "createdAt": "2020-04-28T20:37:56Z", "author": {"login": "Chandrasekar-Rajasekar"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/Operator.java", "diffHunk": "@@ -350,6 +366,25 @@ public static Operator fromString(final String string) {\n         };\n     }\n \n+    private static <T> Predicate<T> hasMember(String field, List<Object> values, RequestScope requestScope) {\n+        return (T entity) -> {\n+            if (values.size() != 1) {\n+                throw new InvalidPredicateException(\"HasMember can only take one argument\");\n+            }\n+            Object val = getFieldValue(entity, field, requestScope);\n+            String filterStr = CoerceUtil.coerce(values.get(0), String.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE0OTcyMg=="}, "originalCommit": {"oid": "f9833baed7c4cf4f0259f6b380a6360d5b027f7c"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI4NjI2Mw==", "bodyText": "You are right, we'll need to iterate over it.\nAnother alternative is to convert field into a Path object in Elide.  That will do all the type conversion for you.", "url": "https://github.com/yahoo/elide/pull/1291#discussion_r418286263", "createdAt": "2020-04-30T21:00:42Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/Operator.java", "diffHunk": "@@ -350,6 +366,25 @@ public static Operator fromString(final String string) {\n         };\n     }\n \n+    private static <T> Predicate<T> hasMember(String field, List<Object> values, RequestScope requestScope) {\n+        return (T entity) -> {\n+            if (values.size() != 1) {\n+                throw new InvalidPredicateException(\"HasMember can only take one argument\");\n+            }\n+            Object val = getFieldValue(entity, field, requestScope);\n+            String filterStr = CoerceUtil.coerce(values.get(0), String.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE0OTcyMg=="}, "originalCommit": {"oid": "f9833baed7c4cf4f0259f6b380a6360d5b027f7c"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODkxNzI1OnYy", "diffSide": "RIGHT", "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/dialect/DefaultFilterDialect.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMTowOTo1MlrOGM31Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMTo0NDoyM1rOGM5CcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1MDgyMg==", "bodyText": "This check seems redundant with the validation logic below.  Do we also need this check?", "url": "https://github.com/yahoo/elide/pull/1291#discussion_r416150822", "createdAt": "2020-04-27T21:09:52Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/dialect/DefaultFilterDialect.java", "diffHunk": "@@ -111,12 +112,19 @@ public FilterExpression parseGlobalExpression(String path, MultivaluedMap<String\n                 throw new ParseException(String.format(\"Invalid predicate: %s\", filterPredicate));\n             }\n \n+            if ((filterPredicate.getOperator().equals(Operator.HASMEMBER)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9833baed7c4cf4f0259f6b380a6360d5b027f7c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE3MDYwOQ==", "bodyText": "This check is for Global Filter. The validation logic below is for the typed filter. Previously we did not have toMany relationship check for global filter. So I decided to include only Iscollection check for global filter.\nWithout this check in global filter, we allow filter expr like book?filter=title=hasmember='1' to pass through and jpql rejects these statement.", "url": "https://github.com/yahoo/elide/pull/1291#discussion_r416170609", "createdAt": "2020-04-27T21:44:23Z", "author": {"login": "Chandrasekar-Rajasekar"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/dialect/DefaultFilterDialect.java", "diffHunk": "@@ -111,12 +112,19 @@ public FilterExpression parseGlobalExpression(String path, MultivaluedMap<String\n                 throw new ParseException(String.format(\"Invalid predicate: %s\", filterPredicate));\n             }\n \n+            if ((filterPredicate.getOperator().equals(Operator.HASMEMBER)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1MDgyMg=="}, "originalCommit": {"oid": "f9833baed7c4cf4f0259f6b380a6360d5b027f7c"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODkzMTkyOnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-hibernate/src/main/java/com/yahoo/elide/core/filter/FilterTranslator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMToxMzoyOVrOGM39cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMToxMzoyOVrOGM39cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1Mjk0Ng==", "bodyText": "Can we remove the local variable here?", "url": "https://github.com/yahoo/elide/pull/1291#discussion_r416152946", "createdAt": "2020-04-27T21:13:29Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-hibernate/src/main/java/com/yahoo/elide/core/filter/FilterTranslator.java", "diffHunk": "@@ -170,6 +172,21 @@\n             return String.format(\"%s IS NOT EMPTY\", columnAlias);\n         });\n \n+        operatorGenerators.put(HASMEMBER, (columnAlias, params) -> {\n+            Preconditions.checkArgument(params.size() == 1);\n+            String x =  String.format(\"%s MEMBER OF %s\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9833baed7c4cf4f0259f6b380a6360d5b027f7c"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODkzNDUxOnYy", "diffSide": "RIGHT", "path": "elide-datastore/elide-datastore-hibernate3/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMToxNDoxMlrOGM3_AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMToxNDoxMlrOGM3_AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1MzM0NQ==", "bodyText": "In Elide 5 - we make tags for stores (rather than features).", "url": "https://github.com/yahoo/elide/pull/1291#discussion_r416153345", "createdAt": "2020-04-27T21:14:12Z", "author": {"login": "aklish"}, "path": "elide-datastore/elide-datastore-hibernate3/pom.xml", "diffHunk": "@@ -40,7 +40,7 @@\n \n     <properties>\n         <dataStoreHarness>com.yahoo.elide.datastores.hibernate3.HibernateDataStoreHarness</dataStoreHarness>\n-        <excludeTags>emptyOnAttributeCollection</excludeTags>\n+        <excludeTags>emptyOnAttributeCollection,memberOfOperation</excludeTags>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9833baed7c4cf4f0259f6b380a6360d5b027f7c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODk0ODcxOnYy", "diffSide": "RIGHT", "path": "elide-integration-tests/src/test/java/com/yahoo/elide/tests/FilterIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMToxODowMlrOGM4HVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMToxODowMlrOGM4HVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1NTQ3OQ==", "bodyText": "There is a much cleaner way to do these comparisons with hamcrest Matchers.  There are some good examples in PaginationIT.", "url": "https://github.com/yahoo/elide/pull/1291#discussion_r416155479", "createdAt": "2020-04-27T21:18:02Z", "author": {"login": "aklish"}, "path": "elide-integration-tests/src/test/java/com/yahoo/elide/tests/FilterIT.java", "diffHunk": "@@ -1654,6 +1655,146 @@ void testExceptionOnEmptyOperator() throws IOException {\n \n     }\n \n+    @Test\n+    @Tag(\"memberOfOperation\")\n+    void testMemberOfOnAttributes() throws IOException {\n+        JsonNode result;\n+        String filterString = \"Booker Prize\";\n+        Set<JsonNode> awardBook = new HashSet<>();\n+        Set<JsonNode> nullNedAwardBook = new HashSet<>();\n+\n+\n+        // * Filter On Root Entity *\n+        for (JsonNode book : books.get(\"data\")) {\n+            Iterator<JsonNode> awards = book.get(\"attributes\").get(\"awards\").elements();\n+            while (awards.hasNext()) {\n+                if (awards.next().asText().equals(filterString)) {\n+                    awardBook.add(book.get(\"id\"));\n+                    break;\n+                }\n+            }\n+        }\n+        // Test Default filter type on Root Entity\n+        result = getAsNode(String.format(\"/book?filter[book.awards][hasmember]=%s\", filterString));\n+        assertEquals(awardBook.size(), result.get(\"data\").size());\n+        for (JsonNode book : result.get(\"data\")) {\n+            assertTrue(awardBook.contains(book.get(\"id\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9833baed7c4cf4f0259f6b380a6360d5b027f7c"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjYwMTY0OnYy", "diffSide": "RIGHT", "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/FilterPredicate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDo1NTo0MVrOGO6AIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDo1NTo0MVrOGO6AIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI4MzU1Mw==", "bodyText": "Can we rename this method to something more specific about what it's checking?\nHow about isLastPathElementAssignableFrom", "url": "https://github.com/yahoo/elide/pull/1291#discussion_r418283553", "createdAt": "2020-04-30T20:55:41Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/FilterPredicate.java", "diffHunk": "@@ -59,6 +59,15 @@ public static boolean toManyInPathExceptLastPathElement(EntityDictionary diction\n                 .anyMatch(RelationshipType::isToMany);\n     }\n \n+    public static boolean checkLastPathElementType(EntityDictionary dictionary, Path path, Class<?> clz) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3403e4c865c0912cb8a40265e8b4ba64991df703"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTUxNDkyOnYy", "diffSide": "RIGHT", "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/Operator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMDo1MDoxMlrOGPVYJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMDo1MDoxMlrOGPVYJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODczMjA3MA==", "bodyText": "We still need to fix the coercion.", "url": "https://github.com/yahoo/elide/pull/1291#discussion_r418732070", "createdAt": "2020-05-01T20:50:12Z", "author": {"login": "aklish"}, "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/Operator.java", "diffHunk": "@@ -350,6 +367,25 @@ public static Operator fromString(final String string) {\n         };\n     }\n \n+    private static <T> Predicate<T> hasMember(Path fieldPath, List<Object> values, RequestScope requestScope) {\n+        return (T entity) -> {\n+            if (values.size() != 1) {\n+                throw new InvalidPredicateException(\"HasMember can only take one argument\");\n+            }\n+            Object val = getFieldValue(entity, fieldPath, requestScope);\n+            String filterStr = CoerceUtil.coerce(values.get(0), String.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b60f953353aa8480a30cac56d90bf168d063ee5"}, "originalPosition": 355}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjMxNjAxOnYy", "diffSide": "RIGHT", "path": "elide-integration-tests/src/test/java/com/yahoo/elide/tests/FilterIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxOToyMDo1NlrOGQOo6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxOToyMDo1NlrOGQOo6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY3MDI1MA==", "bodyText": "Can we also add error tests for book.authors and book.publisher?", "url": "https://github.com/yahoo/elide/pull/1291#discussion_r419670250", "createdAt": "2020-05-04T19:20:56Z", "author": {"login": "aklish"}, "path": "elide-integration-tests/src/test/java/com/yahoo/elide/tests/FilterIT.java", "diffHunk": "@@ -1668,6 +1674,156 @@ void testExceptionOnEmptyOperator() throws IOException {\n \n     }\n \n+    @Test\n+    @Tag(\"excludeOnHibernate3\")\n+    void testMemberOfOnAttributes() throws IOException {\n+        String filterString = \"Booker Prize\";\n+        Set<String> awardBook = new HashSet<>();\n+        Set<String> nullNedAwardBook = new HashSet<>();\n+\n+\n+        // * Filter On Root Entity *\n+        for (JsonNode book : books.get(\"data\")) {\n+            Iterator<JsonNode> awards = book.get(\"attributes\").get(\"awards\").elements();\n+            while (awards.hasNext()) {\n+                if (awards.next().asText().equals(filterString)) {\n+                    awardBook.add(book.get(\"id\").asText());\n+                    break;\n+                }\n+            }\n+        }\n+        // Test Default filter type on Root Entity\n+        when()\n+                .get(String.format(\"/book?filter[book.awards][hasmember]=%s\", filterString))\n+                .then()\n+                .body(\"data\", hasSize(awardBook.size()),\n+                        \"data.id\", contains(awardBook.toArray())\n+                );\n+\n+\n+        // Test RSQL type filter on Root Entity\n+        when()\n+                .get(String.format(\"/book?filter[book]=awards=hasmember=\\\"%s\\\"\", filterString))\n+                .then()\n+                .body(\"data\", hasSize(awardBook.size()),\n+                        \"data.id\", contains(awardBook.toArray())\n+                );\n+\n+\n+        // * Filter On Non Root Entity *\n+        for (JsonNode book : nullNedBooks.get(\"data\")) {\n+            Iterator<JsonNode> awards = book.get(\"attributes\").get(\"awards\").elements();\n+            while (awards.hasNext()) {\n+                if (awards.next().asText().equals(filterString)) {\n+                    nullNedAwardBook.add(book.get(\"id\").asText());\n+                    break;\n+                }\n+            }\n+        }\n+//        // Test Default filter type on NonRoot Entity\n+//        when()\n+//                .get(String.format(\"/author/%s/books?filter[book.awards][hasmember]=%s\", nullNedId, filterString))\n+//                .then()\n+//                .body(\"data\", hasSize(nullNedAwardBook.size()),\n+//                        \"data.id\", contains(nullNedAwardBook.toArray())\n+//                );\n+//\n+//\n+//\n+//        // Test RSQL type filter on NonRoot Entity\n+//        when()\n+//                .get(String.format(\"/author/%s/books?filter[book]=awards=hasmember=\\\"%s\\\"\", nullNedId, filterString))\n+//                .then()\n+//                .body(\"data\", hasSize(nullNedAwardBook.size()),\n+//                        \"data.id\", contains(nullNedAwardBook.toArray())\n+//                );\n+    }\n+\n+    @Test\n+    @Tag(\"excludeOnHibernate3\")\n+    void testMemberOfOnRelationships() throws IOException {\n+        String phoneNumber = \"987-654-3210\";\n+        Set<String> publisherBook = new HashSet<>();\n+\n+\n+        // * Filter On Root Entity *\n+        for (JsonNode book : books.get(\"data\")) {\n+            int publisherId = book.get(\"relationships\").get(\"publisher\").get(\"data\").get(\"id\").asInt();\n+            if (publisherId == 1) {\n+                publisherBook.add(book.get(\"id\").asText());\n+                break;\n+            }\n+        }\n+        // Test Default filter type on Root Entity\n+        when()\n+                .get(String.format(\"/book?filter[book.publisher.phoneNumbers][hasmember]=%s\", phoneNumber))\n+                .then()\n+                .body(\"data\", hasSize(publisherBook.size()),\n+                        \"data.id\", contains(publisherBook.toArray())\n+                );\n+\n+        // Test RSQL type filter on Root Entity\n+        when()\n+                .get(String.format(\"/book?filter[book]=publisher.phoneNumbers=hasmember=\\\"%s\\\"\", phoneNumber))\n+                .then()\n+                .body(\"data\", hasSize(publisherBook.size()),\n+                        \"data.id\", contains(publisherBook.toArray())\n+                );\n+\n+    }\n+\n+    @Test\n+    @Tag(\"excludeOnHibernate3\")\n+    void testExceptionOnMemberOfOperator() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8262b3da49cb7ac869f456b94c84e6090269fd21"}, "originalPosition": 142}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1027, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}