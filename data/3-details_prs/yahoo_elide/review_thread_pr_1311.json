{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1MDAxOTQ1", "number": 1311, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMTo1MjoyNFrOD6ytkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNjowMDoyN1rOD7TYbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTc0ODY2OnYy", "diffSide": "RIGHT", "path": "elide-async/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMTo1MjoyNFrOGS004A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMTo1MjoyNFrOGS004A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM5MzA1Ng==", "bodyText": "Remove versions and use the parent pom's dependency management for junit.", "url": "https://github.com/yahoo/elide/pull/1311#discussion_r422393056", "createdAt": "2020-05-08T21:52:24Z", "author": {"login": "aklish"}, "path": "elide-async/pom.xml", "diffHunk": "@@ -53,24 +53,68 @@\n             <artifactId>elide-graphql</artifactId>\n             <version>5.0.0-pr9-SNAPSHOT</version>\n         </dependency>\n+\n         <dependency>\n             <groupId>javax.persistence</groupId>\n             <artifactId>javax.persistence-api</artifactId>\n             <version>2.2</version>\n             <scope>provided</scope>\n         </dependency>\n+\n         <dependency>\n             <groupId>org.apache.httpcomponents</groupId>\n             <artifactId>httpclient</artifactId>\n             <version>4.5.3</version>\n         </dependency>\n+\n+        <!-- Test -->\n+        <!-- JUnit -->\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter-api</artifactId>\n+            <version>${junit.version}</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73c332b70bfacc2f937ba4b3e8a43043845060b6"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTc1MDE0OnYy", "diffSide": "RIGHT", "path": "elide-async/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMTo1Mjo1OVrOGS01tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMTo1Mjo1OVrOGS01tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM5MzI2OQ==", "bodyText": "This version is out of sync with the rest of elide.", "url": "https://github.com/yahoo/elide/pull/1311#discussion_r422393269", "createdAt": "2020-05-08T21:52:59Z", "author": {"login": "aklish"}, "path": "elide-async/pom.xml", "diffHunk": "@@ -53,24 +53,68 @@\n             <artifactId>elide-graphql</artifactId>\n             <version>5.0.0-pr9-SNAPSHOT</version>\n         </dependency>\n+\n         <dependency>\n             <groupId>javax.persistence</groupId>\n             <artifactId>javax.persistence-api</artifactId>\n             <version>2.2</version>\n             <scope>provided</scope>\n         </dependency>\n+\n         <dependency>\n             <groupId>org.apache.httpcomponents</groupId>\n             <artifactId>httpclient</artifactId>\n             <version>4.5.3</version>\n         </dependency>\n+\n+        <!-- Test -->\n+        <!-- JUnit -->\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter-api</artifactId>\n+            <version>${junit.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter-params</artifactId>\n+            <version>${junit.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter-engine</artifactId>\n+            <version>${junit.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+\n+        <!-- H2 -->\n+        <dependency>\n+            <groupId>com.h2database</groupId>\n+            <artifactId>h2</artifactId>\n+            <version>1.4.197</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73c332b70bfacc2f937ba4b3e8a43043845060b6"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTc1NTI1OnYy", "diffSide": "RIGHT", "path": "elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQueryResult.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMTo1NTozMFrOGS04yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMTo1NTozMFrOGS04yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM5NDA1OA==", "bodyText": "1024 is pretty tiny.   We might want to make the type LONGTEXT or at least TEXT.", "url": "https://github.com/yahoo/elide/pull/1311#discussion_r422394058", "createdAt": "2020-05-08T21:55:30Z", "author": {"login": "aklish"}, "path": "elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQueryResult.java", "diffHunk": "@@ -38,6 +38,7 @@\n \n     private Integer contentLength;\n \n+    @Column(columnDefinition = \"varchar(1024)\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73c332b70bfacc2f937ba4b3e8a43043845060b6"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTc1NzQzOnYy", "diffSide": "RIGHT", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncCleanerService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMTo1NjoyN1rOGS06GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMTo1NjoyN1rOGS06GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM5NDM5Mg==", "bodyText": "Rather than make a getter here - it is cleaner to add another constructor where the cleaner can be provided (by your test in this case).", "url": "https://github.com/yahoo/elide/pull/1311#discussion_r422394392", "createdAt": "2020-05-08T21:56:27Z", "author": {"login": "aklish"}, "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncCleanerService.java", "diffHunk": "@@ -15,21 +16,23 @@\n import java.util.concurrent.TimeUnit;\n \n import javax.inject.Inject;\n-\n /**\n  * Service to execute Async queries.\n  * It will schedule task to track long running queries and kills them.\n  * It will also schedule task to update orphan query statuses\n  * after host/app crash or restart.\n  */\n @Slf4j\n+@Getter\n public class AsyncCleanerService {\n \n     private final int defaultCleanupDelayMinutes = 360;\n     private final int maxCleanupInitialDelayMinutes = 100;\n \n     private static AsyncCleanerService asyncCleanerService = null;\n \n+    private ScheduledExecutorService cleaner;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73c332b70bfacc2f937ba4b3e8a43043845060b6"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTc2NTc1OnYy", "diffSide": "RIGHT", "path": "elide-async/src/test/java/com/yahoo/elide/async/service/AsyncExecutorServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMjowMDoyNVrOGS0_MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMjowMDoyNVrOGS0_MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM5NTY5Ng==", "bodyText": "Normally, we don't mock the dictionary or the elide settings.  Is there a reason you can't just create a dictionary here and use it?", "url": "https://github.com/yahoo/elide/pull/1311#discussion_r422395696", "createdAt": "2020-05-08T22:00:25Z", "author": {"login": "aklish"}, "path": "elide-async/src/test/java/com/yahoo/elide/async/service/AsyncExecutorServiceTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.ElideSettings;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.AsyncQueryResult;\n+import com.yahoo.elide.async.models.QueryStatus;\n+import com.yahoo.elide.core.EntityDictionary;\n+import com.yahoo.elide.jsonapi.JsonApiMapper;\n+import com.yahoo.elide.security.User;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+public class AsyncExecutorServiceTest {\n+\n+    private AsyncExecutorService service;\n+    private Elide elide;\n+    private AsyncQueryDAO asyncQueryDao;\n+\n+    @BeforeAll\n+    public void setupMocks() {\n+        elide = mock(Elide.class);\n+        asyncQueryDao = mock(DefaultAsyncQueryDAO.class);\n+        ElideSettings elideSettings = mock(ElideSettings.class);\n+        EntityDictionary dictionary = mock(EntityDictionary.class);\n+        JsonApiMapper mapper = mock(JsonApiMapper.class);\n+        ObjectMapper objectMapper = mock(ObjectMapper.class);\n+        Set<Class<?>> boundclasses = new HashSet<Class<?>>();\n+        boundclasses.add(AsyncQuery.class);\n+        boundclasses.add(AsyncQueryResult.class);\n+\n+        Set<String> apiCollection = new HashSet<String>();\n+        apiCollection.add(\"v1\");\n+\n+        when(elide.getElideSettings()).thenReturn(elideSettings);\n+        when(elideSettings.getDictionary()).thenReturn(dictionary);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73c332b70bfacc2f937ba4b3e8a43043845060b6"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTc3MjMyOnYy", "diffSide": "RIGHT", "path": "elide-async/src/test/java/com/yahoo/elide/async/service/AsyncQueryInterruptThreadTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMjowMzozMVrOGS1C8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMjowMzozMVrOGS1C8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM5NjY1OA==", "bodyText": "Given that the interrupt thread will be removed/rewritten, you can just delete the tests for now.", "url": "https://github.com/yahoo/elide/pull/1311#discussion_r422396658", "createdAt": "2020-05-08T22:03:31Z", "author": {"login": "aklish"}, "path": "elide-async/src/test/java/com/yahoo/elide/async/service/AsyncQueryInterruptThreadTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyLong;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.QueryStatus;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.Date;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+public class AsyncQueryInterruptThreadTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73c332b70bfacc2f937ba4b3e8a43043845060b6"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTc3OTIwOnYy", "diffSide": "RIGHT", "path": "elide-async/src/test/java/com/yahoo/elide/async/service/AsyncQueryThreadTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMjowNzowM1rOGS1HIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMjowNzowM1rOGS1HIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM5NzczMQ==", "bodyText": "In practice, this doesn't happen.  What does happen is that the queryRunner might throw an exception.  We should mock and test that scenario.", "url": "https://github.com/yahoo/elide/pull/1311#discussion_r422397731", "createdAt": "2020-05-08T22:07:03Z", "author": {"login": "aklish"}, "path": "elide-async/src/test/java/com/yahoo/elide/async/service/AsyncQueryThreadTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.ElideResponse;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.QueryStatus;\n+import com.yahoo.elide.async.models.QueryType;\n+import com.yahoo.elide.graphql.QueryRunner;\n+import com.yahoo.elide.security.User;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+public class AsyncQueryThreadTest {\n+\n+    private AsyncQueryThread queryThread;\n+    private User user;\n+    private Elide elide;\n+    private QueryRunner runner;\n+    private AsyncQuery queryObj;\n+    private AsyncQueryDAO asyncQueryDao;\n+\n+    @BeforeEach\n+    public void setupMocks() {\n+        user = mock(User.class);\n+        elide = mock(Elide.class);\n+        runner = mock(QueryRunner.class);\n+        queryObj = mock(AsyncQuery.class);\n+        asyncQueryDao = mock(DefaultAsyncQueryDAO.class);\n+        queryThread = new AsyncQueryThread(queryObj, user, elide, runner, asyncQueryDao, \"v1\");\n+    }\n+\n+    @Test\n+    public void testAsyncQueryCleanerThreadSet() {\n+        assertEquals(queryObj, queryThread.getQueryObj());\n+        assertEquals(user, queryThread.getUser());\n+        assertEquals(elide, queryThread.getElide());\n+        assertEquals(runner, queryThread.getRunner());\n+        assertEquals(asyncQueryDao, queryThread.getAsyncQueryDao());\n+    }\n+\n+    @Test\n+    public void testProcessQueryJsonApi() {\n+        String query = \"/group?sort=commonName&fields%5Bgroup%5D=commonName,description\";\n+        ElideResponse response = mock(ElideResponse.class);\n+\n+        when(queryObj.getQuery()).thenReturn(query);\n+        when(queryObj.getQueryType()).thenReturn(QueryType.JSONAPI_V1_0);\n+        when(elide.get(anyString(), any(), any(), anyString())).thenReturn(response);\n+        when(response.getResponseCode()).thenReturn(200);\n+        when(response.getBody()).thenReturn(\"ResponseBody\");\n+\n+        queryThread.processQuery();\n+\n+        verify(asyncQueryDao, times(1)).updateStatus(queryObj, QueryStatus.PROCESSING);\n+        verify(asyncQueryDao, times(1)).updateStatus(queryObj, QueryStatus.COMPLETE);\n+        verify(asyncQueryDao, times(1)).createAsyncQueryResult(anyInt(), anyString(), any(), any());\n+    }\n+\n+    @Test\n+    public void testProcessQueryGraphQl() {\n+        String query = \"{\\\"query\\\":\\\"{ group { edges { node { name commonName description } } } }\\\",\\\"variables\\\":null}\";\n+        ElideResponse response = mock(ElideResponse.class);\n+\n+        when(queryObj.getQuery()).thenReturn(query);\n+        when(queryObj.getQueryType()).thenReturn(QueryType.GRAPHQL_V1_0);\n+        when(runner.run(query, user)).thenReturn(response);\n+        when(response.getResponseCode()).thenReturn(200);\n+        when(response.getBody()).thenReturn(\"ResponseBody\");\n+\n+        queryThread.processQuery();\n+\n+        verify(asyncQueryDao, times(1)).updateStatus(queryObj, QueryStatus.PROCESSING);\n+        verify(asyncQueryDao, times(1)).updateStatus(queryObj, QueryStatus.COMPLETE);\n+        verify(asyncQueryDao, times(1)).createAsyncQueryResult(anyInt(), anyString(), any(), any());\n+    }\n+\n+    @Test\n+    public void testProcessQueryNoResponse() {\n+        String query = \"{\\\"query\\\":\\\"{ group { edges { node { name commonName description } } } }\\\",\\\"variables\\\":null}\";\n+\n+        when(queryObj.getQuery()).thenReturn(query);\n+        when(queryObj.getQueryType()).thenReturn(QueryType.GRAPHQL_V1_0);\n+        when(runner.run(query, user)).thenReturn(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73c332b70bfacc2f937ba4b3e8a43043845060b6"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTc4NTQwOnYy", "diffSide": "RIGHT", "path": "elide-datastore/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMjoxMDozMVrOGS1LFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMjoxMDozMVrOGS1LFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM5ODc0Mg==", "bodyText": "Why does the datastore depend on async?", "url": "https://github.com/yahoo/elide/pull/1311#discussion_r422398742", "createdAt": "2020-05-08T22:10:31Z", "author": {"login": "aklish"}, "path": "elide-datastore/pom.xml", "diffHunk": "@@ -100,7 +100,11 @@\n             <groupId>org.junit.jupiter</groupId>\n             <artifactId>junit-jupiter-engine</artifactId>\n         </dependency>\n-\n+        <dependency>\n+            <groupId>com.yahoo.elide</groupId>\n+            <artifactId>elide-async</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73c332b70bfacc2f937ba4b3e8a43043845060b6"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTc4ODYyOnYy", "diffSide": "RIGHT", "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMjoxMjoxNVrOGS1NBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMjoxMjoxNVrOGS1NBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM5OTIzNw==", "bodyText": "Why do we skip in memory?  As a best practice, I always put the reason so that we can remove these over time.  What doesn't work in memory?", "url": "https://github.com/yahoo/elide/pull/1311#discussion_r422399237", "createdAt": "2020-05-08T22:12:15Z", "author": {"login": "aklish"}, "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java", "diffHunk": "@@ -0,0 +1,541 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.integration.tests;\n+\n+import static com.yahoo.elide.Elide.JSONAPI_CONTENT_TYPE;\n+import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.document;\n+import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.field;\n+import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.selections;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.attr;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.attributes;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.data;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.datum;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.id;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.resource;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.type;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.hamcrest.CoreMatchers.nullValue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import com.yahoo.elide.async.integration.tests.framework.AsyncIntegrationTestApplicationResourceConfig;\n+import com.yahoo.elide.contrib.testhelpers.jsonapi.elements.Resource;\n+import com.yahoo.elide.core.HttpStatus;\n+import com.yahoo.elide.initialization.IntegrationTest;\n+import com.yahoo.elide.resources.JsonApiEndpoint;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+\n+import io.restassured.response.Response;\n+\n+import javax.ws.rs.core.MediaType;\n+\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+public class AsyncIT extends IntegrationTest {\n+\n+    public AsyncIT() {\n+        super(AsyncIntegrationTestApplicationResourceConfig.class, JsonApiEndpoint.class.getPackage().getName());\n+    }\n+\n+    private static final Resource ENDERS_GAME = resource(\n+            type(\"book\"),\n+            attributes(\n+                    attr(\"title\", \"Ender's Game\"),\n+                    attr(\"genre\", \"Science Fiction\"),\n+                    attr(\"language\", \"English\")\n+            )\n+    );\n+\n+    private static final Resource GAME_OF_THRONES = resource(\n+            type(\"book\"),\n+            attributes(\n+                    attr(\"title\", \"Song of Ice and Fire\"),\n+                    attr(\"genre\", \"Mythology Fiction\"),\n+                    attr(\"language\", \"English\")\n+            )\n+    );\n+\n+    private static final Resource FOR_WHOM_THE_BELL_TOLLS = resource(\n+            type(\"book\"),\n+            attributes(\n+                    attr(\"title\", \"For Whom the Bell Tolls\"),\n+                    attr(\"genre\", \"Literary Fiction\"),\n+                    attr(\"language\", \"English\")\n+            )\n+    );\n+\n+    /**\n+     * Creates test data for all tests.\n+     */\n+    @BeforeEach\n+    public void init() {\n+        //Create Book: Ender's Game\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .accept(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        datum(ENDERS_GAME).toJSON()\n+                )\n+                .post(\"/book\")\n+                .then()\n+                .statusCode(HttpStatus.SC_CREATED);\n+\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .accept(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        datum(GAME_OF_THRONES).toJSON()\n+                )\n+                .post(\"/book\")\n+                .then()\n+                .statusCode(HttpStatus.SC_CREATED);\n+\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .accept(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        datum(FOR_WHOM_THE_BELL_TOLLS).toJSON()\n+                )\n+                .post(\"/book\")\n+                .then()\n+                .statusCode(HttpStatus.SC_CREATED);\n+\n+    }\n+\n+    /**\n+     * Various tests for a JSONAPI query as a Async Request.\n+     */\n+    @Test\n+    @Tag(\"skipInMemory\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73c332b70bfacc2f937ba4b3e8a43043845060b6"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTc5NDg4OnYy", "diffSide": "RIGHT", "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMjoxNToxMFrOGS1Qnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMjoxNToxMFrOGS1Qnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQwMDE1OQ==", "bodyText": "How does the test fail if this loop finishes without going to COMPLETE?", "url": "https://github.com/yahoo/elide/pull/1311#discussion_r422400159", "createdAt": "2020-05-08T22:15:10Z", "author": {"login": "aklish"}, "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java", "diffHunk": "@@ -0,0 +1,541 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.integration.tests;\n+\n+import static com.yahoo.elide.Elide.JSONAPI_CONTENT_TYPE;\n+import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.document;\n+import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.field;\n+import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.selections;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.attr;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.attributes;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.data;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.datum;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.id;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.resource;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.type;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.hamcrest.CoreMatchers.nullValue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import com.yahoo.elide.async.integration.tests.framework.AsyncIntegrationTestApplicationResourceConfig;\n+import com.yahoo.elide.contrib.testhelpers.jsonapi.elements.Resource;\n+import com.yahoo.elide.core.HttpStatus;\n+import com.yahoo.elide.initialization.IntegrationTest;\n+import com.yahoo.elide.resources.JsonApiEndpoint;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+\n+import io.restassured.response.Response;\n+\n+import javax.ws.rs.core.MediaType;\n+\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+public class AsyncIT extends IntegrationTest {\n+\n+    public AsyncIT() {\n+        super(AsyncIntegrationTestApplicationResourceConfig.class, JsonApiEndpoint.class.getPackage().getName());\n+    }\n+\n+    private static final Resource ENDERS_GAME = resource(\n+            type(\"book\"),\n+            attributes(\n+                    attr(\"title\", \"Ender's Game\"),\n+                    attr(\"genre\", \"Science Fiction\"),\n+                    attr(\"language\", \"English\")\n+            )\n+    );\n+\n+    private static final Resource GAME_OF_THRONES = resource(\n+            type(\"book\"),\n+            attributes(\n+                    attr(\"title\", \"Song of Ice and Fire\"),\n+                    attr(\"genre\", \"Mythology Fiction\"),\n+                    attr(\"language\", \"English\")\n+            )\n+    );\n+\n+    private static final Resource FOR_WHOM_THE_BELL_TOLLS = resource(\n+            type(\"book\"),\n+            attributes(\n+                    attr(\"title\", \"For Whom the Bell Tolls\"),\n+                    attr(\"genre\", \"Literary Fiction\"),\n+                    attr(\"language\", \"English\")\n+            )\n+    );\n+\n+    /**\n+     * Creates test data for all tests.\n+     */\n+    @BeforeEach\n+    public void init() {\n+        //Create Book: Ender's Game\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .accept(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        datum(ENDERS_GAME).toJSON()\n+                )\n+                .post(\"/book\")\n+                .then()\n+                .statusCode(HttpStatus.SC_CREATED);\n+\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .accept(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        datum(GAME_OF_THRONES).toJSON()\n+                )\n+                .post(\"/book\")\n+                .then()\n+                .statusCode(HttpStatus.SC_CREATED);\n+\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .accept(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        datum(FOR_WHOM_THE_BELL_TOLLS).toJSON()\n+                )\n+                .post(\"/book\")\n+                .then()\n+                .statusCode(HttpStatus.SC_CREATED);\n+\n+    }\n+\n+    /**\n+     * Various tests for a JSONAPI query as a Async Request.\n+     */\n+    @Test\n+    @Tag(\"skipInMemory\")\n+    public void jsonApiRequestTests() throws InterruptedException {\n+\n+        //Create Async Request\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        data(\n+                                resource(\n+                                        type(\"asyncQuery\"),\n+                                        id(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"),\n+                                        attributes(\n+                                                attr(\"query\", \"/book?sort=genre&fields%5Bbook%5D=title\"),\n+                                                attr(\"queryType\", \"JSONAPI_V1_0\"),\n+                                                attr(\"status\", \"QUEUED\")\n+                                        )\n+                                )\n+                        ).toJSON())\n+                .when()\n+                .post(\"/asyncQuery\")\n+                .then()\n+                .statusCode(org.apache.http.HttpStatus.SC_CREATED);\n+\n+        int i = 0;\n+        while (i < 1000) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73c332b70bfacc2f937ba4b3e8a43043845060b6"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTc5NTI1OnYy", "diffSide": "RIGHT", "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMjoxNToyN1rOGS1Q6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMjoxNToyN1rOGS1Q6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQwMDIzNQ==", "bodyText": "Same comment - why do we do this?", "url": "https://github.com/yahoo/elide/pull/1311#discussion_r422400235", "createdAt": "2020-05-08T22:15:27Z", "author": {"login": "aklish"}, "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java", "diffHunk": "@@ -0,0 +1,541 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.integration.tests;\n+\n+import static com.yahoo.elide.Elide.JSONAPI_CONTENT_TYPE;\n+import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.document;\n+import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.field;\n+import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.selections;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.attr;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.attributes;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.data;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.datum;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.id;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.resource;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.type;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.hamcrest.CoreMatchers.nullValue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import com.yahoo.elide.async.integration.tests.framework.AsyncIntegrationTestApplicationResourceConfig;\n+import com.yahoo.elide.contrib.testhelpers.jsonapi.elements.Resource;\n+import com.yahoo.elide.core.HttpStatus;\n+import com.yahoo.elide.initialization.IntegrationTest;\n+import com.yahoo.elide.resources.JsonApiEndpoint;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+\n+import io.restassured.response.Response;\n+\n+import javax.ws.rs.core.MediaType;\n+\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+public class AsyncIT extends IntegrationTest {\n+\n+    public AsyncIT() {\n+        super(AsyncIntegrationTestApplicationResourceConfig.class, JsonApiEndpoint.class.getPackage().getName());\n+    }\n+\n+    private static final Resource ENDERS_GAME = resource(\n+            type(\"book\"),\n+            attributes(\n+                    attr(\"title\", \"Ender's Game\"),\n+                    attr(\"genre\", \"Science Fiction\"),\n+                    attr(\"language\", \"English\")\n+            )\n+    );\n+\n+    private static final Resource GAME_OF_THRONES = resource(\n+            type(\"book\"),\n+            attributes(\n+                    attr(\"title\", \"Song of Ice and Fire\"),\n+                    attr(\"genre\", \"Mythology Fiction\"),\n+                    attr(\"language\", \"English\")\n+            )\n+    );\n+\n+    private static final Resource FOR_WHOM_THE_BELL_TOLLS = resource(\n+            type(\"book\"),\n+            attributes(\n+                    attr(\"title\", \"For Whom the Bell Tolls\"),\n+                    attr(\"genre\", \"Literary Fiction\"),\n+                    attr(\"language\", \"English\")\n+            )\n+    );\n+\n+    /**\n+     * Creates test data for all tests.\n+     */\n+    @BeforeEach\n+    public void init() {\n+        //Create Book: Ender's Game\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .accept(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        datum(ENDERS_GAME).toJSON()\n+                )\n+                .post(\"/book\")\n+                .then()\n+                .statusCode(HttpStatus.SC_CREATED);\n+\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .accept(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        datum(GAME_OF_THRONES).toJSON()\n+                )\n+                .post(\"/book\")\n+                .then()\n+                .statusCode(HttpStatus.SC_CREATED);\n+\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .accept(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        datum(FOR_WHOM_THE_BELL_TOLLS).toJSON()\n+                )\n+                .post(\"/book\")\n+                .then()\n+                .statusCode(HttpStatus.SC_CREATED);\n+\n+    }\n+\n+    /**\n+     * Various tests for a JSONAPI query as a Async Request.\n+     */\n+    @Test\n+    @Tag(\"skipInMemory\")\n+    public void jsonApiRequestTests() throws InterruptedException {\n+\n+        //Create Async Request\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        data(\n+                                resource(\n+                                        type(\"asyncQuery\"),\n+                                        id(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"),\n+                                        attributes(\n+                                                attr(\"query\", \"/book?sort=genre&fields%5Bbook%5D=title\"),\n+                                                attr(\"queryType\", \"JSONAPI_V1_0\"),\n+                                                attr(\"status\", \"QUEUED\")\n+                                        )\n+                                )\n+                        ).toJSON())\n+                .when()\n+                .post(\"/asyncQuery\")\n+                .then()\n+                .statusCode(org.apache.http.HttpStatus.SC_CREATED);\n+\n+        int i = 0;\n+        while (i < 1000) {\n+            Thread.sleep(10);\n+            Response response = given()\n+                    .accept(\"application/vnd.api+json\")\n+                    .get(\"/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\");\n+\n+            // If Async Query is created and completed\n+            if (response.jsonPath().getString(\"data.attributes.status\").equals(\"COMPLETE\")) {\n+\n+                // Validate AsyncQuery Response\n+                response\n+                        .then()\n+                        .statusCode(HttpStatus.SC_OK)\n+                        .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n+                        .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                        .body(\"data.attributes.queryType\", equalTo(\"JSONAPI_V1_0\"))\n+                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n+                        .body(\"data.relationships.result.data.type\", equalTo(\"asyncQueryResult\"))\n+                        .body(\"data.relationships.result.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+\n+                // Validate AsyncQueryResult Response\n+                given()\n+                        .accept(\"application/vnd.api+json\")\n+                        .get(\"/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d/result\")\n+                        .then()\n+                        .statusCode(HttpStatus.SC_OK)\n+                        .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n+                        .body(\"data.type\", equalTo(\"asyncQueryResult\"))\n+                        .body(\"data.attributes.contentLength\", notNullValue())\n+                        .body(\"data.attributes.responseBody\", equalTo(\"{\\\"data\\\":\"\n+                                + \"[{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"3\\\",\\\"attributes\\\":{\\\"title\\\":\\\"For Whom the Bell Tolls\\\"}}\"\n+                                + \",{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"2\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Song of Ice and Fire\\\"}},\"\n+                                + \"{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"1\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Ender's Game\\\"}}]}\"))\n+                        .body(\"data.attributes.status\", equalTo(200))\n+                        .body(\"data.relationships.query.data.type\", equalTo(\"asyncQuery\"))\n+                        .body(\"data.relationships.query.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+\n+                // Validate GraphQL Response\n+                String responseGraphQL = given()\n+                        .contentType(MediaType.APPLICATION_JSON)\n+                        .accept(MediaType.APPLICATION_JSON)\n+                        .body(\"{\\\"query\\\":\\\"{ asyncQuery(ids: [\\\\\\\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\\\\\\\"]) \"\n+                                + \"{ edges { node { id queryType status result \"\n+                                + \"{ edges { node { id responseBody status} } } } } } }\\\",\"\n+                                + \"\\\"variables\\\":null}\")\n+                        .post(\"/graphQL\")\n+                        .asString();\n+\n+                String expectedResponse = document(\n+                        selections(\n+                                field(\n+                                        \"asyncQuery\",\n+                                        selections(\n+                                                field(\"id\", \"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"),\n+                                                field(\"queryType\", \"JSONAPI_V1_0\"),\n+                                                field(\"status\", \"COMPLETE\"),\n+                                                field(\"result\",\n+                                                        selections(\n+                                                                field(\"id\", \"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"),\n+                                                                field(\"responseBody\", \"{\\\\\\\"data\\\\\\\":\"\n+                                                                        + \"[{\\\\\\\"type\\\\\\\":\\\\\\\"book\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"3\\\\\\\",\\\\\\\"attributes\\\\\\\":{\\\\\\\"title\\\\\\\":\\\\\\\"For Whom the Bell Tolls\\\\\\\"}}\"\n+                                                                        + \",{\\\\\\\"type\\\\\\\":\\\\\\\"book\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"attributes\\\\\\\":{\\\\\\\"title\\\\\\\":\\\\\\\"Song of Ice and Fire\\\\\\\"}},\"\n+                                                                        + \"{\\\\\\\"type\\\\\\\":\\\\\\\"book\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"attributes\\\\\\\":{\\\\\\\"title\\\\\\\":\\\\\\\"Ender's Game\\\\\\\"}}]}\"),\n+                                                                field(\"status\", 200)\n+                                                        ))\n+                                        )\n+                                )\n+                        )\n+                ).toResponse();\n+\n+                assertEquals(expectedResponse, responseGraphQL);\n+                break;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Various tests for a GRAPHQL query as a Async Request.\n+     */\n+    @Test\n+    @Tag(\"skipInMemory\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73c332b70bfacc2f937ba4b3e8a43043845060b6"}, "originalPosition": 221}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTgwNTMxOnYy", "diffSide": "RIGHT", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/DefaultAsyncQueryDAO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMjoyMDoyNlrOGS1Wtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMjoyMDoyNlrOGS1Wtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQwMTcxOA==", "bodyText": "I don't think we need setters here for testing.  Let's remove.", "url": "https://github.com/yahoo/elide/pull/1311#discussion_r422401718", "createdAt": "2020-05-08T22:20:26Z", "author": {"login": "aklish"}, "path": "elide-async/src/main/java/com/yahoo/elide/async/service/DefaultAsyncQueryDAO.java", "diffHunk": "@@ -38,10 +39,13 @@\n  */\n @Singleton\n @Slf4j\n+@Getter\n public class DefaultAsyncQueryDAO implements AsyncQueryDAO {\n \n     @Setter private Elide elide;\n     @Setter private DataStore dataStore;\n+    @Setter private EntityDictionary dictionary;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73c332b70bfacc2f937ba4b3e8a43043845060b6"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTEwMTI2OnYy", "diffSide": "RIGHT", "path": "elide-standalone/src/test/java/example/ElideStandaloneTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNjowMDoyN1rOGTiz_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNjowMDoyN1rOGTiz_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE0NjQ5Mg==", "bodyText": "Add fail here outside the loop.", "url": "https://github.com/yahoo/elide/pull/1311#discussion_r423146492", "createdAt": "2020-05-11T16:00:27Z", "author": {"login": "aklish"}, "path": "elide-standalone/src/test/java/example/ElideStandaloneTest.java", "diffHunk": "@@ -189,5 +235,104 @@ public void testSwaggerEndpoint() throws Exception {\n                 .then()\n                 .statusCode(200);\n     }\n+\n+    @Test\n+    public void testAsyncApiEndpoint() throws InterruptedException {\n+        //Create Async Request\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        data(\n+                                resource(\n+                                        type(\"asyncQuery\"),\n+                                        id(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"),\n+                                        attributes(\n+                                                attr(\"query\", \"/post\"),\n+                                                attr(\"queryType\", \"JSONAPI_V1_0\"),\n+                                                attr(\"status\", \"QUEUED\")\n+                                        )\n+                                )\n+                        ).toJSON())\n+                .when()\n+                .post(\"/api/v1/asyncQuery\").asString();\n+\n+        int i = 0;\n+        while (i < 1000) {\n+            Thread.sleep(10);\n+            Response response = given()\n+                    .accept(\"application/vnd.api+json\")\n+                    .get(\"/api/v1/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\");\n+\n+            // If Async Query is created and completed\n+            if (response.jsonPath().getString(\"data.attributes.status\").equals(\"COMPLETE\")) {\n+\n+                // Validate AsyncQuery Response\n+                response\n+                        .then()\n+                        .statusCode(com.yahoo.elide.core.HttpStatus.SC_OK)\n+                        .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n+                        .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                        .body(\"data.attributes.queryType\", equalTo(\"JSONAPI_V1_0\"))\n+                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n+                        .body(\"data.relationships.result.data.type\", equalTo(\"asyncQueryResult\"))\n+                        .body(\"data.relationships.result.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+\n+                // Validate AsyncQueryResult Response\n+                given()\n+                        .accept(\"application/vnd.api+json\")\n+                        .get(\"/api/v1/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d/result\")\n+                        .then()\n+                        .statusCode(com.yahoo.elide.core.HttpStatus.SC_OK)\n+                        .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n+                        .body(\"data.type\", equalTo(\"asyncQueryResult\"))\n+                        .body(\"data.attributes.contentLength\", notNullValue())\n+                        .body(\"data.attributes.responseBody\", equalTo(\"{\\\"data\\\":\"\n+                                + \"[{\\\"type\\\":\\\"post\\\",\\\"id\\\":\\\"2\\\",\"\n+                                + \"\\\"attributes\\\":{\\\"abusiveContent\\\":false,\"\n+                                + \"\\\"content\\\":\\\"This is my first post. woot.\\\",\"\n+                                + \"\\\"date\\\":\\\"2019-01-01T00:00Z\\\"}}]}\"))\n+                        .body(\"data.attributes.status\", equalTo(200))\n+                        .body(\"data.relationships.query.data.type\", equalTo(\"asyncQuery\"))\n+                        .body(\"data.relationships.query.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+\n+                // Validate GraphQL Response\n+                String responseGraphQL = given()\n+                        .contentType(MediaType.APPLICATION_JSON)\n+                        .accept(MediaType.APPLICATION_JSON)\n+                        .body(\"{\\\"query\\\":\\\"{ asyncQuery(ids: [\\\\\\\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\\\\\\\"]) \"\n+                                + \"{ edges { node { id queryType status result \"\n+                                + \"{ edges { node { id responseBody status} } } } } } }\\\",\"\n+                                + \"\\\"variables\\\":null}\")\n+                        .post(\"/graphql/api/v1/\")\n+                        .asString();\n+\n+                String expectedResponse = document(\n+                        selections(\n+                                field(\n+                                        \"asyncQuery\",\n+                                        selections(\n+                                                field(\"id\", \"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"),\n+                                                field(\"queryType\", \"JSONAPI_V1_0\"),\n+                                                field(\"status\", \"COMPLETE\"),\n+                                                field(\"result\",\n+                                                        selections(\n+                                                                field(\"id\", \"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"),\n+                                                                field(\"responseBody\", \"{\\\\\\\"data\\\\\\\":\"\n+                                                                        + \"[{\\\\\\\"type\\\\\\\":\\\\\\\"post\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"2\\\\\\\",\"\n+                                                                        + \"\\\\\\\"attributes\\\\\\\":{\\\\\\\"abusiveContent\\\\\\\":false,\"\n+                                                                        + \"\\\\\\\"content\\\\\\\":\\\\\\\"This is my first post. woot.\\\\\\\"\"\n+                                                                        + \",\\\\\\\"date\\\\\\\":\\\\\\\"2019-01-01T00:00Z\\\\\\\"}}]}\"),\n+                                                                field(\"status\", 200)\n+                                                        ))\n+                                        )\n+                                )\n+                        )\n+                ).toResponse();\n+\n+                assertEquals(expectedResponse, responseGraphQL);\n+                break;\n+            }\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a00d5ff5a3bebbdcd96de60380d0f05ea6ac873"}, "originalPosition": 187}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1039, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}