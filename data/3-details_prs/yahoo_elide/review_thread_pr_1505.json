{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4MzkyMTY5", "number": 1505, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxNzo1MDoyMVrOEY0yVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMjoxNzozMVrOEcRn9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDY2MTMzOnYy", "diffSide": "RIGHT", "path": "elide-core/src/test/java/example/TestCheckMappings.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxNzo1MDoyMVrOHBUFsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxNzo1MDoyMVrOHBUFsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEzOTc2MQ==", "bodyText": "We can remove this line as Prefab.Role.None is added by default.", "url": "https://github.com/yahoo/elide/pull/1505#discussion_r471139761", "createdAt": "2020-08-16T17:50:21Z", "author": {"login": "moizarafat"}, "path": "elide-core/src/test/java/example/TestCheckMappings.java", "diffHunk": "@@ -23,7 +23,7 @@\n     public static final ImmutableMap<String, Class<? extends Check>> MAPPINGS =\n             ImmutableMap.<String, Class<? extends Check>>builder()\n                     .put(\"allow all\", Role.ALL.class)\n-                    .put(\"deny all\", Role.NONE.class)\n+                    .put(\"Prefab.Role.None\", Role.NONE.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d347eb290c4890f5d706ea7799db61968289b118"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzY1MjczOnYy", "diffSide": "RIGHT", "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTo0NToyNFrOHEyRtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjowMTowM1rOHEyyJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc4MDA4NQ==", "bodyText": "Why did this change?", "url": "https://github.com/yahoo/elide/pull/1505#discussion_r474780085", "createdAt": "2020-08-21T15:45:24Z", "author": {"login": "aklish"}, "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java", "diffHunk": "@@ -735,7 +735,7 @@ public String getAuthenticationScheme() {\n \n         // Principal without Admin Role\n         response = elide.get(baseUrl, \"/asyncQuery/\" + id, new MultivaluedHashMap<>(), securityContextNonAdminUser, NO_VERSION);\n-        assertEquals(HttpStatus.SC_FORBIDDEN, response.getResponseCode());\n+        assertEquals(HttpStatus.SC_NOT_FOUND, response.getResponseCode());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66ba9a4d107a85d1112e1f135c41241330bd92c0"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc4ODM5MQ==", "bodyText": "thats because FilterExpressionCheck is just filtering to return only the results which match that criteria. And if nothing is found it returns Not_found.", "url": "https://github.com/yahoo/elide/pull/1505#discussion_r474788391", "createdAt": "2020-08-21T16:01:03Z", "author": {"login": "moizarafat"}, "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java", "diffHunk": "@@ -735,7 +735,7 @@ public String getAuthenticationScheme() {\n \n         // Principal without Admin Role\n         response = elide.get(baseUrl, \"/asyncQuery/\" + id, new MultivaluedHashMap<>(), securityContextNonAdminUser, NO_VERSION);\n-        assertEquals(HttpStatus.SC_FORBIDDEN, response.getResponseCode());\n+        assertEquals(HttpStatus.SC_NOT_FOUND, response.getResponseCode());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc4MDA4NQ=="}, "originalCommit": {"oid": "66ba9a4d107a85d1112e1f135c41241330bd92c0"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDg0MzQyOnYy", "diffSide": "RIGHT", "path": "elide-spring/elide-spring-boot-autoconfigure/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMjoxNzozMVrOHGtFyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMjoxNzozMVrOHGtFyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc5MjI2Nw==", "bodyText": "I think this degrades the readability of this.  I'd revert to the old documentation.", "url": "https://github.com/yahoo/elide/pull/1505#discussion_r476792267", "createdAt": "2020-08-25T22:17:31Z", "author": {"login": "aklish"}, "path": "elide-spring/elide-spring-boot-autoconfigure/README.md", "diffHunk": "@@ -44,7 +44,7 @@ A typical override would add some checks and life cycle hooks.  *This is likely\n     public EntityDictionary buildDictionary(AutowireCapableBeanFactory beanFactory) {\n         HashMap<String, Class<? extends Check>> checkMappings = new HashMap<>();\n         checkMappings.put(\"allow all\", Role.ALL.class);\n-        checkMappings.put(\"deny all\", Role.NONE.class);\n+        checkMappings.put(\"Prefab.Role.None\", Role.NONE.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66ba9a4d107a85d1112e1f135c41241330bd92c0"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 951, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}