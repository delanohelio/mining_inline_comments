{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0MzY3MzIx", "number": 1305, "title": "GraphQL Many-to-many filter Bug Fix", "bodyText": "Resolves - Could not find any related issues\nDescription\nThe GraphQL interface has a bug related to filtering values through a many-to-many relationship. An example of a broken filter would be books.title==\"1984\" on a request for the author object from the UT and integration test model. The books set in the author entity is a many-to-many relationship to the book entity. The filter fails to parse due to type errors since the MultipleFilterDialect. parseTypedExpression method does not properly handle parsing the nested types.\nThe solution is to attempt to parse with the MultipleFilterDialect.parseGlobalExpression similar to the existing solution in the JsonAPI interface in RequestScope.\nMotivation and Context\nThis bug unnecessarily limits how our UI can query the GraphQL endpoint.\nHow Has This Been Tested?\nI have added multiple integration tests in this PR to ensure that different filters work with this change. All existing test continue to pass unchanged.\nScreenshots (if appropriate):\nLicense\nI confirm that this contribution is made under an Apache 2.0 license and that I have the authority necessary to make this contribution on behalf of its copyright owner.", "createdAt": "2020-05-06T22:33:05Z", "url": "https://github.com/yahoo/elide/pull/1305", "merged": true, "mergeCommit": {"oid": "04394a077ac3d23d3192cf66c325d4ad85a9d292"}, "closed": true, "closedAt": "2020-05-07T15:42:17Z", "author": {"login": "codingwhatever"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcevU3EAH2gAyNDE0MzY3MzIxOjdhZjViZDk1MGQ0MDk2YjVhNWIwMTE4NDZjY2I1M2U1ZjkwNzViODE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABce_NDMgFqTQwNzYwMDExMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7af5bd950d4096b5a5b011846ccb53e5f9075b81", "author": {"user": {"login": "codingwhatever", "name": "Sam Groth"}}, "url": "https://github.com/yahoo/elide/commit/7af5bd950d4096b5a5b011846ccb53e5f9075b81", "committedDate": "2020-05-06T21:12:08Z", "message": "Adding many-to-many filter support for graphql with single test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2ee0f4b8a06b1e8c9575bf3891aa3f3592a6096", "author": {"user": {"login": "codingwhatever", "name": "Sam Groth"}}, "url": "https://github.com/yahoo/elide/commit/b2ee0f4b8a06b1e8c9575bf3891aa3f3592a6096", "committedDate": "2020-05-06T21:43:12Z", "message": "Adding more many-to-many graphql tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "004bba25b5fdf967731e1ceed1592785d31afd50", "author": {"user": {"login": "codingwhatever", "name": "Sam Groth"}}, "url": "https://github.com/yahoo/elide/commit/004bba25b5fdf967731e1ceed1592785d31afd50", "committedDate": "2020-05-06T22:05:45Z", "message": "Error logging + spacing cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cfd79b8a9efd998a1d8f0c458f4b4bfa3dcccc41", "author": {"user": {"login": "codingwhatever", "name": "Sam Groth"}}, "url": "https://github.com/yahoo/elide/commit/cfd79b8a9efd998a1d8f0c458f4b4bfa3dcccc41", "committedDate": "2020-05-06T22:42:49Z", "message": "Reorder imports"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MTQ4OTcx", "url": "https://github.com/yahoo/elide/pull/1305#pullrequestreview-407148971", "createdAt": "2020-05-07T04:58:24Z", "commit": {"oid": "cfd79b8a9efd998a1d8f0c458f4b4bfa3dcccc41"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNDo1ODoyNVrOGRuawA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNDo1ODoyNVrOGRuawA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzOTQ4OA==", "bodyText": "Unnecessary initialization.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String errorMessage = \"\";\n          \n          \n            \n                        String errorMessage;", "url": "https://github.com/yahoo/elide/pull/1305#discussion_r421239488", "createdAt": "2020-05-07T04:58:25Z", "author": {"login": "wcekan"}, "path": "elide-graphql/src/main/java/com/yahoo/elide/graphql/PersistentResourceFetcher.java", "diffHunk": "@@ -563,22 +562,38 @@ private ConnectionContainer replaceObjects(Environment context) {\n         return sort.map(Sorting::parseSortRule);\n     }\n \n+    private MultivaluedHashMap<String, String> getQueryParams(Optional<String> typeName, String filterStr) {\n+        return new MultivaluedHashMap<String, String>() {\n+            {\n+                String filterKey = \"filter\";\n+                if (typeName.isPresent()) {\n+                    filterKey += \"[\" + typeName + \"]\";\n+                }\n+                put(filterKey, Arrays.asList(filterStr));\n+            }\n+        };\n+    }\n+\n     private Optional<FilterExpression> buildFilter(String typeName,\n                                                    Optional<String> filter,\n                                                    RequestScope requestScope) {\n         // TODO: Refactor FilterDialect interfaces to accept string or List<String> instead of (or in addition to?)\n         // query params.\n         return filter.map(filterStr -> {\n-            MultivaluedMap<String, String> queryParams = new MultivaluedHashMap<String, String>() {\n-                {\n-                    put(\"filter[\" + typeName + \"]\", Arrays.asList(filterStr));\n-                }\n-            };\n+            String errorMessage = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfd79b8a9efd998a1d8f0c458f4b4bfa3dcccc41"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MTQ5MjM5", "url": "https://github.com/yahoo/elide/pull/1305#pullrequestreview-407149239", "createdAt": "2020-05-07T04:59:19Z", "commit": {"oid": "cfd79b8a9efd998a1d8f0c458f4b4bfa3dcccc41"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNDo1OToxOVrOGRub1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNDo1OToxOVrOGRub1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzOTc2Nw==", "bodyText": "@aklish will this conflict with #1304?", "url": "https://github.com/yahoo/elide/pull/1305#discussion_r421239767", "createdAt": "2020-05-07T04:59:19Z", "author": {"login": "wcekan"}, "path": "elide-graphql/src/main/java/com/yahoo/elide/graphql/PersistentResourceFetcher.java", "diffHunk": "@@ -563,22 +562,38 @@ private ConnectionContainer replaceObjects(Environment context) {\n         return sort.map(Sorting::parseSortRule);\n     }\n \n+    private MultivaluedHashMap<String, String> getQueryParams(Optional<String> typeName, String filterStr) {\n+        return new MultivaluedHashMap<String, String>() {\n+            {\n+                String filterKey = \"filter\";\n+                if (typeName.isPresent()) {\n+                    filterKey += \"[\" + typeName + \"]\";\n+                }\n+                put(filterKey, Arrays.asList(filterStr));\n+            }\n+        };\n+    }\n+\n     private Optional<FilterExpression> buildFilter(String typeName,\n                                                    Optional<String> filter,\n                                                    RequestScope requestScope) {\n         // TODO: Refactor FilterDialect interfaces to accept string or List<String> instead of (or in addition to?)\n         // query params.\n         return filter.map(filterStr -> {\n-            MultivaluedMap<String, String> queryParams = new MultivaluedHashMap<String, String>() {\n-                {\n-                    put(\"filter[\" + typeName + \"]\", Arrays.asList(filterStr));\n-                }\n-            };\n+            String errorMessage = \"\";\n+            try {\n+                return requestScope.getFilterDialect()\n+                        .parseGlobalExpression(typeName, getQueryParams(Optional.empty(), filterStr));\n+            } catch (ParseException e) {\n+                errorMessage = e.getMessage();\n+            }\n+\n             try {\n-                return requestScope.getFilterDialect().parseTypedExpression(typeName, queryParams).get(typeName);\n+                return requestScope.getFilterDialect()\n+                        .parseTypedExpression(typeName, getQueryParams(Optional.of(typeName), filterStr))\n+                        .get(typeName);\n             } catch (ParseException e) {\n-                log.debug(\"Filter parse exception caught\", e);\n-                throw new InvalidPredicateException(\"Could not parse filter for type: \" + typeName);\n+                throw new InvalidPredicateException(errorMessage + \"\\n\" + e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfd79b8a9efd998a1d8f0c458f4b4bfa3dcccc41"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NjAwMTEw", "url": "https://github.com/yahoo/elide/pull/1305#pullrequestreview-407600110", "createdAt": "2020-05-07T15:42:05Z", "commit": {"oid": "cfd79b8a9efd998a1d8f0c458f4b4bfa3dcccc41"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 919, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}