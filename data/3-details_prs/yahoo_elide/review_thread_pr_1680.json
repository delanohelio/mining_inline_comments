{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0NTQwNDQ3", "number": 1680, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMjoyNzowOFrOE7u4yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMjoyNzowOFrOE7u4yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMDY5NjQzOnYy", "diffSide": "RIGHT", "path": "elide-model-config/src/main/java/com/yahoo/elide/modelconfig/validator/DynamicConfigValidator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMjoyNzowOFrOH3izgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMjoyNzowOFrOH3izgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAwMzk3MA==", "bodyText": "Might be nice to write some unit tests for these functions.", "url": "https://github.com/yahoo/elide/pull/1680#discussion_r528003970", "createdAt": "2020-11-20T22:27:08Z", "author": {"login": "aklish"}, "path": "elide-model-config/src/main/java/com/yahoo/elide/modelconfig/validator/DynamicConfigValidator.java", "diffHunk": "@@ -137,32 +140,63 @@ public void readAndValidateConfigs() throws IOException {\n         validateRequiredConfigsProvided();\n         validateNameUniqueness(this.elideSQLDBConfig.getDbconfigs());\n         validateNameUniqueness(this.elideTableConfig.getTables());\n+        populateInheritance(this.elideTableConfig);\n         validateTableConfig(this.elideTableConfig);\n         validateJoinedTablesDBConnectionName(this.elideTableConfig);\n-        populateInheritanceHierarchy(this.elideTableConfig);\n     }\n \n-    private static void populateInheritanceHierarchy(ElideTableConfig elideTableConfig) {\n+    private void populateInheritance(ElideTableConfig elideTableConfig) {\n         for (Table table : elideTableConfig.getTables()) {\n-\n             if (table.hasParent()) {\n-                Table parent = table.getParent(elideTableConfig);\n-\n-                table.getMeasures().forEach(measure -> {\n-                    if (parent.hasField(elideTableConfig, measure.getName())) {\n-                        measure.setOverride(true);\n-                    }\n-                });\n-\n-                table.getDimensions().forEach(dimension -> {\n-                    if (parent.hasField(elideTableConfig, dimension.getName())) {\n-                        dimension.setOverride(true);\n-                    }\n-                });\n+                Map<String, Measure> measures = getInheritedMeasures(table, new HashMap<String, Measure>());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60be3695193f40fd8c2c6f2a6d2c6a169ddc8bd8"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 867, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}