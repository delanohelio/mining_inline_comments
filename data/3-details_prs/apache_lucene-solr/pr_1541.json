{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0NDk0MTM5", "number": 1541, "title": "RegExp - add case insensitive matching option", "bodyText": "Relates to Jira issue 9386\nAdded a new CASE_INSENSITIVE option to the existing flags.\nThe RegExp class is a little strange because instances represent either the parser or the parsed objects it nests in a tree. The flags field is only relevant to the root parser and was left blank in all parsed nodes. This PR's changes require that the flags int is propagated to all nodes so that they can see if it includes the case insensitive option (all other bits in the flag represent parsing options so there was no need to propagate before).", "createdAt": "2020-05-28T13:40:59Z", "url": "https://github.com/apache/lucene-solr/pull/1541", "merged": true, "mergeCommit": {"oid": "887fe4c83d4114c6238265ca7f05aa491525af9d"}, "closed": true, "closedAt": "2020-07-08T15:08:13Z", "author": {"login": "markharwood"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcluyuTgFqTQyMDE2OTU3OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcy7kH2gBqjM1MjU1OTMzMzI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwMTY5NTc5", "url": "https://github.com/apache/lucene-solr/pull/1541#pullrequestreview-420169579", "createdAt": "2020-05-28T14:28:01Z", "commit": {"oid": "f67a783b8eaf685c27a3b46c97ed2679ce0b9370"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNDoyODowMVrOGb3ugA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNDoyOTo0N1rOGb31qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg3Nzc2MA==", "bodyText": "Should it be new RegExp(regexPattern, RegExp.ALL | RegExp.CASE_INSENSITIVE) ?", "url": "https://github.com/apache/lucene-solr/pull/1541#discussion_r431877760", "createdAt": "2020-05-28T14:28:01Z", "author": {"login": "jimczi"}, "path": "lucene/core/src/test/org/apache/lucene/util/automaton/TestRegExp.java", "diffHunk": "@@ -215,11 +238,13 @@ protected String checkRandomExpression(String docValue) {\n \n     String regexPattern = result.toString();\n     // Assert our randomly generated regex actually matches the provided raw input using java's expression matcher\n-    Pattern pattern = Pattern.compile(regexPattern);\n+    Pattern pattern = caseSensitiveQuery ? Pattern.compile(regexPattern): \n+                                           Pattern.compile(regexPattern, Pattern.CASE_INSENSITIVE); \n+                                             ;\n     Matcher matcher = pattern.matcher(docValue);\n     assertTrue(\"Java regex \" + regexPattern + \" did not match doc value \" + docValue, matcher.matches());\n \n-    RegExp regex = new RegExp(regexPattern);\n+    RegExp regex = caseSensitiveQuery ? new RegExp(regexPattern) : new RegExp(regexPattern, RegExp.CASE_INSENSITIVE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f67a783b8eaf685c27a3b46c97ed2679ce0b9370"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg3ODU4OA==", "bodyText": "should use randomization ?", "url": "https://github.com/apache/lucene-solr/pull/1541#discussion_r431878588", "createdAt": "2020-05-28T14:28:51Z", "author": {"login": "jimczi"}, "path": "lucene/core/src/test/org/apache/lucene/util/automaton/TestRegExp.java", "diffHunk": "@@ -88,10 +88,14 @@ public void testRepeatWithEmptyLanguage() throws Exception {\n     assertTrue(a.toString().length() > 0);\n   }\n   \n+  \n+  boolean caseSensitiveQuery = true;\n+  \n   public void testCoreJavaParity() {\n     // Generate random doc values and random regular expressions\n     // and check for same matching behaviour as Java's Pattern class.\n     for (int i = 0; i < 1000; i++) {\n+      caseSensitiveQuery = true;      ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f67a783b8eaf685c27a3b46c97ed2679ce0b9370"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg3OTU5NA==", "bodyText": "Maybe add a ALL_AND_CASE_INSENSITIVE ?", "url": "https://github.com/apache/lucene-solr/pull/1541#discussion_r431879594", "createdAt": "2020-05-28T14:29:47Z", "author": {"login": "jimczi"}, "path": "lucene/core/src/java/org/apache/lucene/util/automaton/RegExp.java", "diffHunk": "@@ -437,9 +437,15 @@\n   public static final int INTERVAL = 0x0020;\n   \n   /**\n-   * Syntax flag, enables all optional regexp syntax.\n+   * Allows case insensitive matching.\n    */\n-  public static final int ALL = 0xffff;\n+  public static final int CASE_INSENSITIVE = 0x0040;  \n+  \n+  /**\n+   * Syntax flag, enables all optional regexp syntax\n+   * but preserves default setting of case sensitive matching. \n+   */\n+  public static final int ALL = 0xffff ^ CASE_INSENSITIVE ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f67a783b8eaf685c27a3b46c97ed2679ce0b9370"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwMTgxNTg3", "url": "https://github.com/apache/lucene-solr/pull/1541#pullrequestreview-420181587", "createdAt": "2020-05-28T14:40:00Z", "commit": {"oid": "f67a783b8eaf685c27a3b46c97ed2679ce0b9370"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c8ba8a65370e900a8fc9a967d708f7208ba43582", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/apache/lucene-solr/commit/c8ba8a65370e900a8fc9a967d708f7208ba43582", "committedDate": "2020-06-05T08:58:38Z", "message": "Revert irrelevant javadoc change"}, "afterCommit": {"oid": "a0358840359960501e98090d33ef116650622a27", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/apache/lucene-solr/commit/a0358840359960501e98090d33ef116650622a27", "committedDate": "2020-06-09T14:49:09Z", "message": "Revert irrelevant javadoc change"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a0358840359960501e98090d33ef116650622a27", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/apache/lucene-solr/commit/a0358840359960501e98090d33ef116650622a27", "committedDate": "2020-06-09T14:49:09Z", "message": "Revert irrelevant javadoc change"}, "afterCommit": {"oid": "7bc5c1da21029f2945d2c9bd5d91c818f8dab803", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/apache/lucene-solr/commit/7bc5c1da21029f2945d2c9bd5d91c818f8dab803", "committedDate": "2020-06-10T08:38:45Z", "message": "Revert irrelevant javadoc change"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7bc5c1da21029f2945d2c9bd5d91c818f8dab803", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/apache/lucene-solr/commit/7bc5c1da21029f2945d2c9bd5d91c818f8dab803", "committedDate": "2020-06-10T08:38:45Z", "message": "Revert irrelevant javadoc change"}, "afterCommit": {"oid": "def0f8e75595617f8527e9b305ea59279e2e7a8f", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/apache/lucene-solr/commit/def0f8e75595617f8527e9b305ea59279e2e7a8f", "committedDate": "2020-06-16T13:00:59Z", "message": "Revert irrelevant javadoc change"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNTY2MzQ1", "url": "https://github.com/apache/lucene-solr/pull/1541#pullrequestreview-431566345", "createdAt": "2020-06-16T14:30:17Z", "commit": {"oid": "def0f8e75595617f8527e9b305ea59279e2e7a8f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDozMDoxOFrOGkeLOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNjo1ODo1MFrOGkkv9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg5NjMxNQ==", "bodyText": "In order not to have a combinatorial explosion of the number of ctors, I think we could consider dropping this one: I think it's fine to require users to provide flags if they also want to configure case sensitivity?", "url": "https://github.com/apache/lucene-solr/pull/1541#discussion_r440896315", "createdAt": "2020-06-16T14:30:18Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/RegexpQuery.java", "diffHunk": "@@ -68,6 +68,19 @@ public RegexpQuery(Term term) {\n     this(term, RegExp.ALL);\n   }\n   \n+  /**\n+   * Constructs a query for terms matching <code>term</code>.\n+   * <p>\n+   * By default, all regular expression features are enabled.\n+   * </p>\n+   * \n+   * @param term regular expression.\n+   * @param caseSensitive set to false for case insensitive matching \n+   */\n+  public RegexpQuery(Term term, boolean caseSensitive) {\n+    this(term, RegExp.ALL, caseSensitive);\n+  }  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def0f8e75595617f8527e9b305ea59279e2e7a8f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkwMDI4NA==", "bodyText": "same here, maybe it's fine to require passing syntax flags when you want to configure case sensitivity?", "url": "https://github.com/apache/lucene-solr/pull/1541#discussion_r440900284", "createdAt": "2020-06-16T14:35:22Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/util/automaton/RegExp.java", "diffHunk": "@@ -489,6 +497,19 @@ public RegExp(String s) throws IllegalArgumentException {\n     this(s, ALL);\n   }\n   \n+  /**\n+   * Constructs new <code>RegExp</code> from a string. Same as\n+   * <code>RegExp(s, ALL)</code>.\n+   * \n+   * @param s regexp string\n+   * @param caseSensitive case sensitive matching\n+   * @exception IllegalArgumentException if an error occurred while parsing the\n+   *              regular expression\n+   */\n+  public RegExp(String s, boolean caseSensitive) throws IllegalArgumentException {\n+    this(s, ALL, caseSensitive);\n+  }  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def0f8e75595617f8527e9b305ea59279e2e7a8f"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkwNDgxMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  flags = syntax_flags  | UNICODE_CASE_INSENSITIVE;\n          \n          \n            \n                  flags = syntax_flags | UNICODE_CASE_INSENSITIVE;", "url": "https://github.com/apache/lucene-solr/pull/1541#discussion_r440904811", "createdAt": "2020-06-16T14:41:09Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/util/automaton/RegExp.java", "diffHunk": "@@ -499,10 +520,30 @@ public RegExp(String s) throws IllegalArgumentException {\n    *              regular expression\n    */\n   public RegExp(String s, int syntax_flags) throws IllegalArgumentException {\n+    this(s, syntax_flags, true);\n+  }\n+  /**\n+   * Constructs new <code>RegExp</code> from a string.\n+   * \n+   * @param s regexp string\n+   * @param syntax_flags boolean 'or' of optional syntax constructs to be\n+   *          enabled\n+   * @param caseSensitive case sensitive matching\n+   * @exception IllegalArgumentException if an error occurred while parsing the\n+   *              regular expression\n+   */\n+  public RegExp(String s, int syntax_flags, boolean caseSensitive) throws IllegalArgumentException {    \n     originalString = s;\n-    flags = syntax_flags;\n+    // Trim any bits unrelated to syntax flags\n+    syntax_flags  = syntax_flags & 0xff;\n+    if (caseSensitive) {\n+      flags = syntax_flags;\n+    } else {      \n+      // Add in the case-insensitive setting\n+      flags = syntax_flags  | UNICODE_CASE_INSENSITIVE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def0f8e75595617f8527e9b305ea59279e2e7a8f"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAwMjY5NQ==", "bodyText": "I think that this is incorrect as there is no 1:1 mapping between lowercase and uppercase letters, for instance \u03c2 and \u03c3 both have \u03a3 as their uppercase variant. And if someone uses \u03a3 in their regexes, \u03c2 wouldn't match as toLowerCase(\u03a3) returns \u03c3.\nShould we make this only about ASCII for now, like Java's Pattern class? https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/util/regex/Pattern.html#CASE_INSENSITIVE We could add support for full Unicode later but this doesn't look like a low hanging fruit to me?", "url": "https://github.com/apache/lucene-solr/pull/1541#discussion_r441002695", "createdAt": "2020-06-16T16:56:43Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/util/automaton/RegExp.java", "diffHunk": "@@ -743,6 +792,30 @@ private Automaton toAutomatonInternal(Map<String,Automaton> automata,\n     }\n     return a;\n   }\n+  private Automaton toCaseInsensitiveChar(int codepoint, int maxDeterminizedStates) {\n+    Automaton case1 = Automata.makeChar(codepoint);\n+    int altCase = Character.isLowerCase(codepoint) ? Character.toUpperCase(codepoint) : Character.toLowerCase(codepoint);\n+    Automaton result;\n+    if (altCase != codepoint) {\n+      result = Operations.union(case1, Automata.makeChar(altCase));\n+      result = MinimizationOperations.minimize(result, maxDeterminizedStates);          \n+    } else {\n+      result = case1;                      \n+    }          \n+    return result;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def0f8e75595617f8527e9b305ea59279e2e7a8f"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAwNDAyMw==", "bodyText": "I'd rather like a regular for loop, this is a bit abusing lambdas to my taste. :)", "url": "https://github.com/apache/lucene-solr/pull/1541#discussion_r441004023", "createdAt": "2020-06-16T16:58:50Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/util/automaton/RegExp.java", "diffHunk": "@@ -743,6 +792,30 @@ private Automaton toAutomatonInternal(Map<String,Automaton> automata,\n     }\n     return a;\n   }\n+  private Automaton toCaseInsensitiveChar(int codepoint, int maxDeterminizedStates) {\n+    Automaton case1 = Automata.makeChar(codepoint);\n+    int altCase = Character.isLowerCase(codepoint) ? Character.toUpperCase(codepoint) : Character.toLowerCase(codepoint);\n+    Automaton result;\n+    if (altCase != codepoint) {\n+      result = Operations.union(case1, Automata.makeChar(altCase));\n+      result = MinimizationOperations.minimize(result, maxDeterminizedStates);          \n+    } else {\n+      result = case1;                      \n+    }          \n+    return result;\n+  }\n+  \n+  private Automaton toCaseInsensitiveString(int maxDeterminizedStates) {\n+    List<Automaton> list = new ArrayList<>();\n+    s.codePoints().forEach(\n+        p -> {\n+          list.add(toCaseInsensitiveChar(p, maxDeterminizedStates));\n+        }\n+    );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def0f8e75595617f8527e9b305ea59279e2e7a8f"}, "originalPosition": 180}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4762f6db33cca1337fb489be35fb8da9068ceec9", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/apache/lucene-solr/commit/4762f6db33cca1337fb489be35fb8da9068ceec9", "committedDate": "2020-06-24T11:30:37Z", "message": "Remove superfluous constructor"}, "afterCommit": {"oid": "990c3d08a2dd39061e0564974cb6eab85bb76924", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/apache/lucene-solr/commit/990c3d08a2dd39061e0564974cb6eab85bb76924", "committedDate": "2020-06-24T11:37:08Z", "message": "Remove superfluous constructor"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "990c3d08a2dd39061e0564974cb6eab85bb76924", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/apache/lucene-solr/commit/990c3d08a2dd39061e0564974cb6eab85bb76924", "committedDate": "2020-06-24T11:37:08Z", "message": "Remove superfluous constructor"}, "afterCommit": {"oid": "750d61278f017722485d618334c1e49d854e5849", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/apache/lucene-solr/commit/750d61278f017722485d618334c1e49d854e5849", "committedDate": "2020-06-24T16:30:24Z", "message": "Remove superfluous constructor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3Mzg1NDM4", "url": "https://github.com/apache/lucene-solr/pull/1541#pullrequestreview-437385438", "createdAt": "2020-06-25T10:59:53Z", "commit": {"oid": "750d61278f017722485d618334c1e49d854e5849"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMDo1OTo1M1rOGo1txg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMDo1OTo1M1rOGo1txg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ3NjI5NA==", "bodyText": "Let's call it CASE_INSENSITIVE since we want to leave the door for another flag that would control if unicode should be handled fully ?", "url": "https://github.com/apache/lucene-solr/pull/1541#discussion_r445476294", "createdAt": "2020-06-25T10:59:53Z", "author": {"login": "jimczi"}, "path": "lucene/core/src/java/org/apache/lucene/util/automaton/RegExp.java", "diffHunk": "@@ -439,12 +441,19 @@\n   /**\n    * Syntax flag, enables all optional regexp syntax.\n    */\n-  public static final int ALL = 0xffff;\n-  \n+  public static final int ALL = 0xff;\n+      \n   /**\n    * Syntax flag, enables no optional regexp syntax.\n    */\n   public static final int NONE = 0x0000;\n+  \n+  //-----  Matching flags ( > 0xff )  ------\n+  \n+  /**\n+   * Allows case insensitive matching of ASCII characters.\n+   */\n+  public static final int ASCII_CASE_INSENSITIVE = 0x0100;    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "750d61278f017722485d618334c1e49d854e5849"}, "originalPosition": 34}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "750d61278f017722485d618334c1e49d854e5849", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/apache/lucene-solr/commit/750d61278f017722485d618334c1e49d854e5849", "committedDate": "2020-06-24T16:30:24Z", "message": "Remove superfluous constructor"}, "afterCommit": {"oid": "ef958843f355e5508b7d6466df3057e86584096e", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/apache/lucene-solr/commit/ef958843f355e5508b7d6466df3057e86584096e", "committedDate": "2020-07-06T08:45:29Z", "message": "Remove superfluous constructor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzOTc5OTc0", "url": "https://github.com/apache/lucene-solr/pull/1541#pullrequestreview-443979974", "createdAt": "2020-07-07T15:01:24Z", "commit": {"oid": "ef958843f355e5508b7d6466df3057e86584096e"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNTowNDo0OFrOGuC77Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNToxNzo0NVrOGuDg2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkzNTc4OQ==", "bodyText": "I don't think we need to maintain bw compat for this, is there any test that fails if you remove this line?", "url": "https://github.com/apache/lucene-solr/pull/1541#discussion_r450935789", "createdAt": "2020-07-07T15:04:48Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/util/automaton/RegExp.java", "diffHunk": "@@ -499,10 +508,29 @@ public RegExp(String s) throws IllegalArgumentException {\n    *              regular expression\n    */\n   public RegExp(String s, int syntax_flags) throws IllegalArgumentException {\n+    this(s, syntax_flags, 0);\n+  }\n+  /**\n+   * Constructs new <code>RegExp</code> from a string.\n+   * \n+   * @param s regexp string\n+   * @param syntax_flags boolean 'or' of optional syntax constructs to be\n+   *          enabled\n+   * @param match_flags boolean 'or' of match behavior options such as case insensitivity\n+   * @exception IllegalArgumentException if an error occurred while parsing the\n+   *              regular expression\n+   */\n+  public RegExp(String s, int syntax_flags, int match_flags) throws IllegalArgumentException {    \n+    // (for BWC reasons we don't validate invalid bits, just trim instead)\n+    syntax_flags  = syntax_flags & 0xff;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef958843f355e5508b7d6466df3057e86584096e"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk0NDcxNg==", "bodyText": "In my opinion, all constructors should always take parameters in the same order. The current longest constructor does RegexpQuery(Term term, int syntaxFlags, AutomatonProvider provider, int maxDeterminizedStates), so I think that this one should be RegexpQuery(Term term, int syntaxFlags, int matchFlags, AutomatonProvider provider, int maxDeterminizedStates).", "url": "https://github.com/apache/lucene-solr/pull/1541#discussion_r450944716", "createdAt": "2020-07-07T15:17:01Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/RegexpQuery.java", "diffHunk": "@@ -96,16 +96,46 @@ public RegexpQuery(Term term, int flags, int maxDeterminizedStates) {\n    * Constructs a query for terms matching <code>term</code>.\n    * \n    * @param term regular expression.\n-   * @param flags optional RegExp features from {@link RegExp}\n+   * @param maxDeterminizedStates maximum number of states that compiling the\n+   * @param syntax_flags optional RegExp syntax features from {@link RegExp}\n+   *  automaton for the regexp can result in.  Set higher to allow more complex\n+   *  queries and lower to prevent memory exhaustion.\n+   * @param match_flags boolean 'or' of match behavior options such as case insensitivity\n+   */\n+  public RegexpQuery(Term term,  int maxDeterminizedStates, int syntax_flags, int match_flags) {\n+    this(term, defaultProvider, maxDeterminizedStates, syntax_flags, match_flags);\n+  }\n+  \n+  /**\n+   * Constructs a query for terms matching <code>term</code>.\n+   * \n+   * @param term regular expression.\n+   * @param syntax_flags optional RegExp features from {@link RegExp}\n    * @param provider custom AutomatonProvider for named automata\n    * @param maxDeterminizedStates maximum number of states that compiling the\n    *  automaton for the regexp can result in.  Set higher to allow more complex\n    *  queries and lower to prevent memory exhaustion.\n    */\n-  public RegexpQuery(Term term, int flags, AutomatonProvider provider,\n+  public RegexpQuery(Term term, int syntax_flags, AutomatonProvider provider,\n       int maxDeterminizedStates) {\n+    this(term, provider, maxDeterminizedStates, syntax_flags, 0);\n+  }\n+  \n+  /**\n+   * Constructs a query for terms matching <code>term</code>.\n+   * \n+   * @param term regular expression.\n+   * @param syntax_flags optional RegExp features from {@link RegExp}\n+   * @param provider custom AutomatonProvider for named automata\n+   * @param maxDeterminizedStates maximum number of states that compiling the\n+   *  automaton for the regexp can result in.  Set higher to allow more complex\n+   *  queries and lower to prevent memory exhaustion.\n+   * @param match_flags boolean 'or' of match behavior options such as case insensitivity\n+   */\n+  public RegexpQuery(Term term, AutomatonProvider provider,\n+      int maxDeterminizedStates, int syntax_flags, int match_flags) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef958843f355e5508b7d6466df3057e86584096e"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk0NTI0Mg==", "bodyText": "I'd keep maxDeterminizedStates last so that all constructors take parameters in the same order.", "url": "https://github.com/apache/lucene-solr/pull/1541#discussion_r450945242", "createdAt": "2020-07-07T15:17:45Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/RegexpQuery.java", "diffHunk": "@@ -96,16 +96,46 @@ public RegexpQuery(Term term, int flags, int maxDeterminizedStates) {\n    * Constructs a query for terms matching <code>term</code>.\n    * \n    * @param term regular expression.\n-   * @param flags optional RegExp features from {@link RegExp}\n+   * @param maxDeterminizedStates maximum number of states that compiling the\n+   * @param syntax_flags optional RegExp syntax features from {@link RegExp}\n+   *  automaton for the regexp can result in.  Set higher to allow more complex\n+   *  queries and lower to prevent memory exhaustion.\n+   * @param match_flags boolean 'or' of match behavior options such as case insensitivity\n+   */\n+  public RegexpQuery(Term term,  int maxDeterminizedStates, int syntax_flags, int match_flags) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef958843f355e5508b7d6466df3057e86584096e"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0ODI2ODY3", "url": "https://github.com/apache/lucene-solr/pull/1541#pullrequestreview-444826867", "createdAt": "2020-07-08T14:32:01Z", "commit": {"oid": "e2fae15f891210a31b94645477b464ff8aaae58d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bcaac7ff79d7dd8689b458d3c36399c9b5edc4d", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/apache/lucene-solr/commit/5bcaac7ff79d7dd8689b458d3c36399c9b5edc4d", "committedDate": "2020-07-08T14:45:31Z", "message": "Added case insensitive search option"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07f94036ede9993492e5350b8197e997ea921251", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/apache/lucene-solr/commit/07f94036ede9993492e5350b8197e997ea921251", "committedDate": "2020-07-08T14:45:31Z", "message": "Addressing review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16c198a5654c76641c2e0c114906cac72f3bd6c4", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/apache/lucene-solr/commit/16c198a5654c76641c2e0c114906cac72f3bd6c4", "committedDate": "2020-07-08T14:45:31Z", "message": "Changed case sensitive flag to a boolean in constructors."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fce454a0305554ddacb28291af17f46649a9443a", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/apache/lucene-solr/commit/fce454a0305554ddacb28291af17f46649a9443a", "committedDate": "2020-07-08T14:45:31Z", "message": "Reduced visibility of case insensitive flag as a non-user-facing flag"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0857aadd2e4a4f95a81ba8f906b47b522e777de4", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/apache/lucene-solr/commit/0857aadd2e4a4f95a81ba8f906b47b522e777de4", "committedDate": "2020-07-08T14:45:31Z", "message": "Expose case sensitivity options in RegExpQuery"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "678a572a8b9894274a92ea1c4a1719ff09b140d6", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/apache/lucene-solr/commit/678a572a8b9894274a92ea1c4a1719ff09b140d6", "committedDate": "2020-07-08T14:45:31Z", "message": "Revert irrelevant javadoc change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb1bf20ce818baf2dd2924d6f931c7569c8c477e", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/apache/lucene-solr/commit/bb1bf20ce818baf2dd2924d6f931c7569c8c477e", "committedDate": "2020-07-08T14:45:31Z", "message": "Addressed review comments - ASCII-only case changes, reduce num constructors and for loop tweak"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fff3712b293a4987ae7eec15b063cac019e988ee", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/apache/lucene-solr/commit/fff3712b293a4987ae7eec15b063cac019e988ee", "committedDate": "2020-07-08T14:45:31Z", "message": "Changed case sensitivity options to be a bit mask rather than a simple boolean to allow for future developments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52788bc735234b61f917d31a627d521829cd8c03", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/apache/lucene-solr/commit/52788bc735234b61f917d31a627d521829cd8c03", "committedDate": "2020-07-08T14:45:31Z", "message": "Remove superfluous constructor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4424fead3684b5e317ce8f10336de491e9f744e", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/apache/lucene-solr/commit/e4424fead3684b5e317ce8f10336de491e9f744e", "committedDate": "2020-07-08T14:45:31Z", "message": "Addressed review comments (thanks @jpountz !)\nReordered constructor args and added arg validation."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e2fae15f891210a31b94645477b464ff8aaae58d", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/apache/lucene-solr/commit/e2fae15f891210a31b94645477b464ff8aaae58d", "committedDate": "2020-07-08T14:25:02Z", "message": "Addressed review comments (thanks @jpountz !)\nReordered constructor args and added arg validation."}, "afterCommit": {"oid": "e4424fead3684b5e317ce8f10336de491e9f744e", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/apache/lucene-solr/commit/e4424fead3684b5e317ce8f10336de491e9f744e", "committedDate": "2020-07-08T14:45:31Z", "message": "Addressed review comments (thanks @jpountz !)\nReordered constructor args and added arg validation."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2558, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}