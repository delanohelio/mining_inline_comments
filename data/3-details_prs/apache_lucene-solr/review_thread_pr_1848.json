{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyNjUxNzY1", "number": 1848, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDoxMjoyNlrOEhmrgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNDoxNjozMVrOEhsehg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjcyMTkzOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDoxMjoyNlrOHPAfBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDoxMjoyNlrOHPAfBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ5ODYzMA==", "bodyText": "Don't need the = false -- it is java's default already.", "url": "https://github.com/apache/lucene-solr/pull/1848#discussion_r485498630", "createdAt": "2020-09-09T10:12:26Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain.java", "diffHunk": "@@ -73,21 +78,38 @@\n   // Holds fields seen in each document\n   private PerField[] fields = new PerField[1];\n   private final InfoStream infoStream;\n-\n-  DefaultIndexingChain(DocumentsWriterPerThread docWriter) {\n-    this.docWriter = docWriter;\n-    this.fieldInfos = docWriter.getFieldInfosBuilder();\n-    this.infoStream = docWriter.getIndexWriterConfig().getInfoStream();\n+  private final ByteBlockPool.Allocator byteBlockAllocator;\n+  private final LiveIndexWriterConfig indexWriterConfig;\n+  private final int indexCreatedVersionMajor;\n+  private final Consumer<Throwable> abortingExceptionConsumer;\n+  private boolean hasHitAbortingException = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2edb8e9d837609b9a608e24fe40a7a7f5dd6be9"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjcyOTg0OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDoxNDozOFrOHPAjzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNzoxMzo1MFrOHRGqvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ5OTg1Mw==", "bodyText": "This was moved from DWPT?\nAhh, no, we forked it from there, ok.", "url": "https://github.com/apache/lucene-solr/pull/1848#discussion_r485499853", "createdAt": "2020-09-09T10:14:38Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain.java", "diffHunk": "@@ -73,21 +78,38 @@\n   // Holds fields seen in each document\n   private PerField[] fields = new PerField[1];\n   private final InfoStream infoStream;\n-\n-  DefaultIndexingChain(DocumentsWriterPerThread docWriter) {\n-    this.docWriter = docWriter;\n-    this.fieldInfos = docWriter.getFieldInfosBuilder();\n-    this.infoStream = docWriter.getIndexWriterConfig().getInfoStream();\n+  private final ByteBlockPool.Allocator byteBlockAllocator;\n+  private final LiveIndexWriterConfig indexWriterConfig;\n+  private final int indexCreatedVersionMajor;\n+  private final Consumer<Throwable> abortingExceptionConsumer;\n+  private boolean hasHitAbortingException = false;\n+\n+  DefaultIndexingChain(int indexCreatedVersionMajor, SegmentInfo segmentInfo, Directory directory, FieldInfos.Builder fieldInfos, LiveIndexWriterConfig indexWriterConfig,\n+                       Consumer<Throwable> abortingExceptionConsumer) {\n+    this.indexCreatedVersionMajor = indexCreatedVersionMajor;\n+    byteBlockAllocator = new ByteBlockPool.DirectTrackingAllocator(bytesUsed);\n+    IntBlockPool.Allocator intBlockAllocator = new IntBlockAllocator(bytesUsed);\n+    this.indexWriterConfig = indexWriterConfig;\n+    assert segmentInfo.getIndexSort() == indexWriterConfig.getIndexSort();\n+    this.fieldInfos = fieldInfos;\n+    this.infoStream = indexWriterConfig.getInfoStream();\n+    this.abortingExceptionConsumer = abortingExceptionConsumer;\n \n     final TermsHash termVectorsWriter;\n-    if (docWriter.getSegmentInfo().getIndexSort() == null) {\n-      storedFieldsConsumer = new StoredFieldsConsumer(docWriter.codec, docWriter.directory, docWriter.getSegmentInfo());\n-      termVectorsWriter = new TermVectorsConsumer(docWriter);\n+    if (segmentInfo.getIndexSort() == null) {\n+      storedFieldsConsumer = new StoredFieldsConsumer(indexWriterConfig.getCodec(), directory, segmentInfo);\n+      termVectorsWriter = new TermVectorsConsumer(intBlockAllocator, byteBlockAllocator, directory, segmentInfo, indexWriterConfig.getCodec());\n     } else {\n-      storedFieldsConsumer = new SortingStoredFieldsConsumer(docWriter.codec, docWriter.directory, docWriter.getSegmentInfo());\n-      termVectorsWriter = new SortingTermVectorsConsumer(docWriter);\n+      storedFieldsConsumer = new SortingStoredFieldsConsumer(indexWriterConfig.getCodec(), directory, segmentInfo);\n+      termVectorsWriter = new SortingTermVectorsConsumer(intBlockAllocator, byteBlockAllocator, directory, segmentInfo, indexWriterConfig.getCodec());\n     }\n-    termsHash = new FreqProxTermsWriter(docWriter, bytesUsed, termVectorsWriter);\n+    termsHash = new FreqProxTermsWriter(intBlockAllocator, byteBlockAllocator, bytesUsed, termVectorsWriter);\n+  }\n+\n+  private void onAbortingException(Throwable th) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2edb8e9d837609b9a608e24fe40a7a7f5dd6be9"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY5NzA4NA==", "bodyText": "yeah I just tried to not repeat the assignment of hasHitAbortingException", "url": "https://github.com/apache/lucene-solr/pull/1848#discussion_r487697084", "createdAt": "2020-09-14T07:13:50Z", "author": {"login": "s1monw"}, "path": "lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain.java", "diffHunk": "@@ -73,21 +78,38 @@\n   // Holds fields seen in each document\n   private PerField[] fields = new PerField[1];\n   private final InfoStream infoStream;\n-\n-  DefaultIndexingChain(DocumentsWriterPerThread docWriter) {\n-    this.docWriter = docWriter;\n-    this.fieldInfos = docWriter.getFieldInfosBuilder();\n-    this.infoStream = docWriter.getIndexWriterConfig().getInfoStream();\n+  private final ByteBlockPool.Allocator byteBlockAllocator;\n+  private final LiveIndexWriterConfig indexWriterConfig;\n+  private final int indexCreatedVersionMajor;\n+  private final Consumer<Throwable> abortingExceptionConsumer;\n+  private boolean hasHitAbortingException = false;\n+\n+  DefaultIndexingChain(int indexCreatedVersionMajor, SegmentInfo segmentInfo, Directory directory, FieldInfos.Builder fieldInfos, LiveIndexWriterConfig indexWriterConfig,\n+                       Consumer<Throwable> abortingExceptionConsumer) {\n+    this.indexCreatedVersionMajor = indexCreatedVersionMajor;\n+    byteBlockAllocator = new ByteBlockPool.DirectTrackingAllocator(bytesUsed);\n+    IntBlockPool.Allocator intBlockAllocator = new IntBlockAllocator(bytesUsed);\n+    this.indexWriterConfig = indexWriterConfig;\n+    assert segmentInfo.getIndexSort() == indexWriterConfig.getIndexSort();\n+    this.fieldInfos = fieldInfos;\n+    this.infoStream = indexWriterConfig.getInfoStream();\n+    this.abortingExceptionConsumer = abortingExceptionConsumer;\n \n     final TermsHash termVectorsWriter;\n-    if (docWriter.getSegmentInfo().getIndexSort() == null) {\n-      storedFieldsConsumer = new StoredFieldsConsumer(docWriter.codec, docWriter.directory, docWriter.getSegmentInfo());\n-      termVectorsWriter = new TermVectorsConsumer(docWriter);\n+    if (segmentInfo.getIndexSort() == null) {\n+      storedFieldsConsumer = new StoredFieldsConsumer(indexWriterConfig.getCodec(), directory, segmentInfo);\n+      termVectorsWriter = new TermVectorsConsumer(intBlockAllocator, byteBlockAllocator, directory, segmentInfo, indexWriterConfig.getCodec());\n     } else {\n-      storedFieldsConsumer = new SortingStoredFieldsConsumer(docWriter.codec, docWriter.directory, docWriter.getSegmentInfo());\n-      termVectorsWriter = new SortingTermVectorsConsumer(docWriter);\n+      storedFieldsConsumer = new SortingStoredFieldsConsumer(indexWriterConfig.getCodec(), directory, segmentInfo);\n+      termVectorsWriter = new SortingTermVectorsConsumer(intBlockAllocator, byteBlockAllocator, directory, segmentInfo, indexWriterConfig.getCodec());\n     }\n-    termsHash = new FreqProxTermsWriter(docWriter, bytesUsed, termVectorsWriter);\n+    termsHash = new FreqProxTermsWriter(intBlockAllocator, byteBlockAllocator, bytesUsed, termVectorsWriter);\n+  }\n+\n+  private void onAbortingException(Throwable th) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ5OTg1Mw=="}, "originalCommit": {"oid": "d2edb8e9d837609b9a608e24fe40a7a7f5dd6be9"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzY1MzMzOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNDoxMjo0MVrOHPJZnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNDoxMjo0MVrOHPJZnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY0NDcwMQ==", "bodyText": "Maybe remove this stale comment :)  FieldCache is long gone!", "url": "https://github.com/apache/lucene-solr/pull/1848#discussion_r485644701", "createdAt": "2020-09-09T14:12:41Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -272,7 +273,9 @@ static int getActualMaxDocs() {\n    * and a message is printed to infoStream, if set (see {@link\n    * IndexWriterConfig#setInfoStream(InfoStream)}).\n    */\n-  public final static int MAX_TERM_LENGTH = DocumentsWriterPerThread.MAX_TERM_LENGTH_UTF8;\n+  // if you increase this, you must fix field cache impl for\n+  // getTerms/getTermsIndex requires <= 32768", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2edb8e9d837609b9a608e24fe40a7a7f5dd6be9"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzY3MTc0OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNDoxNjozMVrOHPJlDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNDoxNjozMVrOHPJlDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY0NzYzMQ==", "bodyText": "Ooh good catch (char[] vs byte[]).", "url": "https://github.com/apache/lucene-solr/pull/1848#discussion_r485647631", "createdAt": "2020-09-09T14:16:31Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.java", "diffHunk": "@@ -1533,7 +1533,7 @@ public void testWickedLongTerm() throws IOException {\n     Directory dir = newDirectory();\n     RandomIndexWriter w = new RandomIndexWriter(random(), dir, new StringSplitAnalyzer());\n \n-    char[] chars = new char[DocumentsWriterPerThread.MAX_TERM_LENGTH_UTF8];\n+    char[] chars = new char[IndexWriter.MAX_TERM_LENGTH];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2edb8e9d837609b9a608e24fe40a7a7f5dd6be9"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1206, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}