{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2NDgzMTcz", "number": 2065, "title": "SOLR-14977 :  ContainerPlugins should be configurable", "bodyText": "", "createdAt": "2020-11-06T04:17:29Z", "url": "https://github.com/apache/lucene-solr/pull/2065", "merged": true, "mergeCommit": {"oid": "73d5e7ae77d8953cb9be35a7cbcebe3a516dd04a"}, "closed": true, "closedAt": "2020-11-16T13:19:51Z", "author": {"login": "noblepaul"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZvFZ5gH2gAyNTE2NDgzMTczOmI1OWUyOWQ5MGY1ODViOGE4ZjJlZThkM2RmZDJhMzZjYTk2OGQwNzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABddETS0AH2gAyNTE2NDgzMTczOmNmOGQxZjAxZTgyNDdhNzU1NzYyNTgyZjE5MDU2ODY1NTMwMzk0OTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b59e29d90f585b8a8f2ee8d3dfd2a36ca968d075", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/b59e29d90f585b8a8f2ee8d3dfd2a36ca968d075", "committedDate": "2020-11-06T04:16:47Z", "message": "SOLR-14977 :  ContainerPlugins should be configurable"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1NzAzNzM0", "url": "https://github.com/apache/lucene-solr/pull/2065#pullrequestreview-525703734", "createdAt": "2020-11-08T04:33:24Z", "commit": {"oid": "b59e29d90f585b8a8f2ee8d3dfd2a36ca968d075"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQwNDozMzoyNFrOHvM0fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQwNDozNzozMlrOHvM1oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI1NTE2Ng==", "bodyText": "This is super fragile and fails if we have Widget implements ConfigurablePlugin<WidgetInfo> and then NewerWidget extends Widget", "url": "https://github.com/apache/lucene-solr/pull/2065#discussion_r519255166", "createdAt": "2020-11-08T04:33:24Z", "author": {"login": "madrob"}, "path": "solr/core/src/java/org/apache/solr/api/ContainerPluginsRegistry.java", "diffHunk": "@@ -372,9 +396,27 @@ public void init() throws Exception {\n         holders.add(new ApiHolder((AnnotatedApi) api));\n       }\n     }\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private Class getConfigObj(Object o) {\n+      Type[] interfaces = o.getClass().getGenericInterfaces();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b59e29d90f585b8a8f2ee8d3dfd2a36ca968d075"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI1NTIwNw==", "bodyText": "At the very least, don't suppress raw types here.", "url": "https://github.com/apache/lucene-solr/pull/2065#discussion_r519255207", "createdAt": "2020-11-08T04:33:49Z", "author": {"login": "madrob"}, "path": "solr/core/src/java/org/apache/solr/api/ContainerPluginsRegistry.java", "diffHunk": "@@ -372,9 +396,27 @@ public void init() throws Exception {\n         holders.add(new ApiHolder((AnnotatedApi) api));\n       }\n     }\n+\n+    @SuppressWarnings(\"rawtypes\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b59e29d90f585b8a8f2ee8d3dfd2a36ca968d075"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI1NTQ0Ng==", "bodyText": "Does T need to extend PluginMeta as you do in the unit test or no?", "url": "https://github.com/apache/lucene-solr/pull/2065#discussion_r519255446", "createdAt": "2020-11-08T04:37:11Z", "author": {"login": "madrob"}, "path": "solr/core/src/java/org/apache/solr/api/ConfigurablePlugin.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.api;\n+\n+/**Implement this interface if your plugin needs to accept some configuration\n+ * \n+ * @param <T> the configuration Object type\n+ */\n+public interface ConfigurablePlugin<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b59e29d90f585b8a8f2ee8d3dfd2a36ca968d075"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI1NTQ1Ng==", "bodyText": "Is this a security risk? Why do we need this?", "url": "https://github.com/apache/lucene-solr/pull/2065#discussion_r519255456", "createdAt": "2020-11-08T04:37:32Z", "author": {"login": "madrob"}, "path": "solr/core/src/java/org/apache/solr/api/ContainerPluginsRegistry.java", "diffHunk": "@@ -69,7 +72,8 @@\n public class ContainerPluginsRegistry implements ClusterPropertiesListener, MapWriter, Closeable {\n   private static final Logger log = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n \n-  private final ObjectMapper mapper = SolrJacksonAnnotationInspector.createObjectMapper();\n+  private static final ObjectMapper mapper = SolrJacksonAnnotationInspector.createObjectMapper()\n+      .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b59e29d90f585b8a8f2ee8d3dfd2a36ca968d075"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df7840dee5894dd819fbd552f1cbe002729e6dd5", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/df7840dee5894dd819fbd552f1cbe002729e6dd5", "committedDate": "2020-11-08T22:35:41Z", "message": "support super classes implementing COnfigurablePlugin<T>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e1a164dad555c726c9d1b09ff553b186ce5e12d", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/1e1a164dad555c726c9d1b09ff553b186ce5e12d", "committedDate": "2020-11-08T23:58:48Z", "message": "more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "196d610783315930963558963eedfdc1ca1df252", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/196d610783315930963558963eedfdc1ca1df252", "committedDate": "2020-11-09T00:44:34Z", "message": "cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3MDk4ODgy", "url": "https://github.com/apache/lucene-solr/pull/2065#pullrequestreview-527098882", "createdAt": "2020-11-10T11:15:27Z", "commit": {"oid": "196d610783315930963558963eedfdc1ca1df252"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMToxNToyOFrOHwX0DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMToyMzoxNVrOHwYFiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ4Mzg1Mw==", "bodyText": "Maybe configure(T cfg)? the current name looks awkward.", "url": "https://github.com/apache/lucene-solr/pull/2065#discussion_r520483853", "createdAt": "2020-11-10T11:15:28Z", "author": {"login": "sigram"}, "path": "solr/core/src/java/org/apache/solr/api/ConfigurablePlugin.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.api;\n+\n+/**Implement this interface if your plugin needs to accept some configuration\n+ * \n+ * @param <T> the configuration Object type\n+ */\n+public interface ConfigurablePlugin<T> {\n+\n+  /**This is invoked soon after the Object is initialized\n+   * \n+   * @param cfg value deserialized from JSON\n+   */\n+  void initConfig(T cfg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "196d610783315930963558963eedfdc1ca1df252"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ4NTMzNQ==", "bodyText": "ObjectMapper is a relatively heavy object, we should not create new instances in every class that needs it - maybe put a common instance somewhere in Utils?", "url": "https://github.com/apache/lucene-solr/pull/2065#discussion_r520485335", "createdAt": "2020-11-10T11:17:58Z", "author": {"login": "sigram"}, "path": "solr/core/src/java/org/apache/solr/api/AnnotatedApi.java", "diffHunk": "@@ -222,7 +223,8 @@ public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n     final String command;\n     final MethodHandle method;\n     final Object obj;\n-    ObjectMapper mapper = SolrJacksonAnnotationInspector.createObjectMapper();\n+    ObjectMapper mapper = SolrJacksonAnnotationInspector.createObjectMapper()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "196d610783315930963558963eedfdc1ca1df252"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ4NjM0NA==", "bodyText": "Does PluginMeta still need a separate pathPrefix? I think this could become a config property.", "url": "https://github.com/apache/lucene-solr/pull/2065#discussion_r520486344", "createdAt": "2020-11-10T11:19:43Z", "author": {"login": "sigram"}, "path": "solr/core/src/java/org/apache/solr/api/ContainerPluginsRegistry.java", "diffHunk": "@@ -114,6 +118,16 @@ public synchronized ApiInfo getPlugin(String name) {\n     return currentPlugins.get(name);\n   }\n \n+  static class PluginMetaHolder {\n+    private final Map<String, Object> original;\n+    private final PluginMeta meta;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "196d610783315930963558963eedfdc1ca1df252"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ4NjYxNg==", "bodyText": "Whitespace.", "url": "https://github.com/apache/lucene-solr/pull/2065#discussion_r520486616", "createdAt": "2020-11-10T11:20:13Z", "author": {"login": "sigram"}, "path": "solr/core/src/java/org/apache/solr/api/ContainerPluginsRegistry.java", "diffHunk": "@@ -349,7 +365,7 @@ public ApiInfo(PluginMeta info, List<String> errs) {\n       }\n     }\n \n-    @SuppressWarnings({\"rawtypes\"})\n+    @SuppressWarnings({\"rawtypes\",\"unchecked\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "196d610783315930963558963eedfdc1ca1df252"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ4NjcwNw==", "bodyText": "Whitespace.", "url": "https://github.com/apache/lucene-solr/pull/2065#discussion_r520486707", "createdAt": "2020-11-10T11:20:22Z", "author": {"login": "sigram"}, "path": "solr/core/src/java/org/apache/solr/api/ContainerPluginsRegistry.java", "diffHunk": "@@ -360,6 +376,14 @@ public void init() throws Exception {\n       } else {\n         throw new RuntimeException(\"Must have a no-arg constructor or CoreContainer constructor \");\n       }\n+      if (instance instanceof ConfigurablePlugin) {\n+        Class c = getConfigClass((ConfigurablePlugin<?>) instance);\n+        if(c != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "196d610783315930963558963eedfdc1ca1df252"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ4ODMzMQ==", "bodyText": "This example may be confusing because in general case configuration classes don't have to subclass PluginMeta. I propose removing this subclassing here to make it clear that's the case.", "url": "https://github.com/apache/lucene-solr/pull/2065#discussion_r520488331", "createdAt": "2020-11-10T11:23:15Z", "author": {"login": "sigram"}, "path": "solr/core/src/test/org/apache/solr/handler/TestContainerPlugin.java", "diffHunk": "@@ -312,6 +340,45 @@ public void testApiFromPackage() throws Exception {\n     }\n   }\n \n+  public static class CC1 extends CC {\n+\n+  }\n+  public static class CC2 extends CC1 {\n+\n+  }\n+  public static class CC implements ConfigurablePlugin<CConfig> {\n+    private CConfig cfg;\n+\n+\n+\n+    @Override\n+    public void initConfig(CConfig cfg) {\n+      this.cfg = cfg;\n+\n+    }\n+\n+    @EndPoint(method = GET,\n+        path = \"/hello/plugin\",\n+        permission = PermissionNameProvider.Name.READ_PERM)\n+    public void m2(SolrQueryRequest req, SolrQueryResponse rsp) {\n+      rsp.add(\"config\", cfg);\n+    }\n+\n+  }\n+\n+  public static class CConfig extends PluginMeta {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "196d610783315930963558963eedfdc1ca1df252"}, "originalPosition": 222}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7983a765c883014ad47d7a1735d7d337047846e", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/b7983a765c883014ad47d7a1735d7d337047846e", "committedDate": "2020-11-10T23:58:27Z", "message": "incorporating several review feedbacks. Added more tests. Changed the config object type"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4MTI1ODgy", "url": "https://github.com/apache/lucene-solr/pull/2065#pullrequestreview-528125882", "createdAt": "2020-11-11T12:25:26Z", "commit": {"oid": "b7983a765c883014ad47d7a1735d7d337047846e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMjoyNToyN1rOHxK-yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMjoyNToyN1rOHxK-yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMyMjE4NA==", "bodyText": "I don't understand this change. Do all config beans have to implement ReflectMapWriter?\nIf that's the case, and all config beans have to implement ReflectMapWriter then that's what the generic type in ConfigurablePlugin should use. If not then this test is misleading again because it suggests you have to implement additional interfaces to have a usable config bean.", "url": "https://github.com/apache/lucene-solr/pull/2065#discussion_r521322184", "createdAt": "2020-11-11T12:25:27Z", "author": {"login": "sigram"}, "path": "solr/core/src/test/org/apache/solr/handler/TestContainerPlugin.java", "diffHunk": "@@ -366,7 +381,7 @@ public void m2(SolrQueryRequest req, SolrQueryResponse rsp) {\n \n   }\n \n-  public static class CConfig extends PluginMeta {\n+  public static class CConfig implements ReflectMapWriter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7983a765c883014ad47d7a1735d7d337047846e"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4MTI5Nzkx", "url": "https://github.com/apache/lucene-solr/pull/2065#pullrequestreview-528129791", "createdAt": "2020-11-11T12:31:12Z", "commit": {"oid": "b7983a765c883014ad47d7a1735d7d337047846e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMjozMToxM1rOHxLKzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMjozMToxM1rOHxLKzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMyNTI2MA==", "bodyText": "Oh, I didn't notice before that it was created for each request. That was horrible!\nStill, we already have one instance here and another (configured the same) in ContainerPluginsRegistry. We should probably expose this instance here and reuse it in ContainerPluginsRegistry.", "url": "https://github.com/apache/lucene-solr/pull/2065#discussion_r521325260", "createdAt": "2020-11-11T12:31:13Z", "author": {"login": "sigram"}, "path": "solr/core/src/java/org/apache/solr/api/AnnotatedApi.java", "diffHunk": "@@ -62,6 +63,8 @@\n \n public class AnnotatedApi extends Api implements PermissionNameProvider , Closeable {\n   private static final Logger log = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+  private static final ObjectMapper mapper = SolrJacksonAnnotationInspector.createObjectMapper()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7983a765c883014ad47d7a1735d7d337047846e"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4MTMwNTk0", "url": "https://github.com/apache/lucene-solr/pull/2065#pullrequestreview-528130594", "createdAt": "2020-11-11T12:32:21Z", "commit": {"oid": "b7983a765c883014ad47d7a1735d7d337047846e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMjozMjoyMlrOHxLNOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMjozMjoyMlrOHxLNOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMyNTg4Mw==", "bodyText": "Should this be <T extends ReflectMapWriter> ? See my comment below in TestContainerPlugin.java", "url": "https://github.com/apache/lucene-solr/pull/2065#discussion_r521325883", "createdAt": "2020-11-11T12:32:22Z", "author": {"login": "sigram"}, "path": "solr/core/src/java/org/apache/solr/api/ConfigurablePlugin.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.api;\n+\n+/**Implement this interface if your plugin needs to accept some configuration\n+ * \n+ * @param <T> the configuration Object type\n+ */\n+public interface ConfigurablePlugin<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7983a765c883014ad47d7a1735d7d337047846e"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71c52f68d1a4e7dbce8eb6a758cba36c173a524f", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/71c52f68d1a4e7dbce8eb6a758cba36c173a524f", "committedDate": "2020-11-16T12:37:21Z", "message": "configure() should use a method that implements MapWriter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9481353bb6ab65cabdc311553d1d5cdae21f5816", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/9481353bb6ab65cabdc311553d1d5cdae21f5816", "committedDate": "2020-11-16T12:40:29Z", "message": "CHANGES.txt"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf8d1f01e8247a755762582f1905686553039493", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/cf8d1f01e8247a755762582f1905686553039493", "committedDate": "2020-11-16T12:41:44Z", "message": "Merge branch 'master' into jira/solr14977"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2572, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}