{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwOTY4MzI3", "number": 1623, "title": "LUCENE-8962: Merge segments on getReader", "bodyText": "Add IndexWriter merge-on-refresh feature to selectively merge small segments on getReader, subject to a configurable timeout, to improve search performance by reducing the number of small segments for searching.", "createdAt": "2020-06-27T22:11:26Z", "url": "https://github.com/apache/lucene-solr/pull/1623", "merged": true, "mergeCommit": {"oid": "8294e1ae2068aa39e91c25cbaabf62afae40a02e"}, "closed": true, "closedAt": "2020-08-24T18:19:09Z", "author": {"login": "s1monw"}, "timelineItems": {"totalCount": 48, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcvfUAfAH2gAyNDQwOTY4MzI3OmI0Nzk0NDJjMDQ4NDlmMzc0ODk5Y2UwNTdkYjViNWU4ZjFhOWY0YzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdCEeUMgH2gAyNDQwOTY4MzI3Ojc3YzljNmMyNjlmMDE5ZGJjZTNiZTFhOWQ3MTk2NjJmNTI1MDdjOWQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b479442c04849f374899ce057db5b5e8f1a9f4c5", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/b479442c04849f374899ce057db5b5e8f1a9f4c5", "committedDate": "2020-06-27T22:09:26Z", "message": "can it be that simple?"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "419f309435c77d9b816628f56c9a533d0799128c", "author": {"user": {"login": "mikemccand", "name": "Michael McCandless"}}, "url": "https://github.com/apache/lucene-solr/commit/419f309435c77d9b816628f56c9a533d0799128c", "committedDate": "2020-06-29T14:47:40Z", "message": "LUCENE-8962: fix test case to use no merge policy since it wants explicit segments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65e335e0c8ac9a076edbef838489b732cfaf419c", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/65e335e0c8ac9a076edbef838489b732cfaf419c", "committedDate": "2020-08-10T12:13:38Z", "message": "Merge branch 'master' into jira/lucene-8962"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e83ceebbb83837228ad0a38f1590fb79f4cb8945", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/e83ceebbb83837228ad0a38f1590fb79f4cb8945", "committedDate": "2020-08-12T19:14:50Z", "message": "different approach"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84cdc5a3a9ad7b78eac9170c7842feed70ed0692", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/84cdc5a3a9ad7b78eac9170c7842feed70ed0692", "committedDate": "2020-08-12T20:09:07Z", "message": "improve error handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4791e050d9547caf8b37068f6ee4797713ea65ec", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/4791e050d9547caf8b37068f6ee4797713ea65ec", "committedDate": "2020-08-12T20:18:14Z", "message": "Merge branch 'master' into jira/lucene-8962"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b701264ff304a4c0483b36b6dbc36d3cc8ed1075", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/b701264ff304a4c0483b36b6dbc36d3cc8ed1075", "committedDate": "2020-08-13T15:20:55Z", "message": "beef up tests to also cover getReader"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MTYxNDUy", "url": "https://github.com/apache/lucene-solr/pull/1623#pullrequestreview-467161452", "createdAt": "2020-08-13T22:03:08Z", "commit": {"oid": "b701264ff304a4c0483b36b6dbc36d3cc8ed1075"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMjowMzowOFrOHAfQEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMjowMzowOFrOHAfQEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI3NDA2Nw==", "bodyText": "This Javadoc will need to be updated to reflect the broader use of this method.\nAlso, is preparePointInTimeMerge (without the on) a better name?", "url": "https://github.com/apache/lucene-solr/pull/1623#discussion_r470274067", "createdAt": "2020-08-13T22:03:08Z", "author": {"login": "msfroh"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -3321,8 +3395,11 @@ private long prepareCommitInternal() throws IOException {\n    * below.  We also ensure that we pull the merge readers while holding {@code IndexWriter}'s lock.  Otherwise\n    * we could see concurrent deletions/updates applied that do not belong to the segment.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b701264ff304a4c0483b36b6dbc36d3cc8ed1075"}, "originalPosition": 144}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "118fc61d593cd51be67ac42249a07c05daa78f10", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/118fc61d593cd51be67ac42249a07c05daa78f10", "committedDate": "2020-08-14T09:29:27Z", "message": "never open a merged reader if it's dropped"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "888d9a000dfac7e46c93203fa72569499e073848", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/888d9a000dfac7e46c93203fa72569499e073848", "committedDate": "2020-08-14T09:33:07Z", "message": "Appy feedback and update javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2f392c65f5ef5a1423543ed84e950a53a331928", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/a2f392c65f5ef5a1423543ed84e950a53a331928", "committedDate": "2020-08-14T11:30:11Z", "message": "Merge branch 'master' into jira/lucene-8962"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a4d6fa0b30eb0234aedbb03032efa7c0149054f", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/4a4d6fa0b30eb0234aedbb03032efa7c0149054f", "committedDate": "2020-08-14T13:45:30Z", "message": "Merge branch 'master' into jira/lucene-8962"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f885db34aa97d98b2196885471200ef7fa05e10", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/1f885db34aa97d98b2196885471200ef7fa05e10", "committedDate": "2020-08-14T14:04:32Z", "message": "Ensure we hold a valid ref to every SR while we merge them in the background"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d8c601789501d5880847cef13d7cacc402fcd0c", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/6d8c601789501d5880847cef13d7cacc402fcd0c", "committedDate": "2020-08-14T14:06:58Z", "message": "Merge branch 'master' into jira/lucene-8962"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4MDA3Mjg2", "url": "https://github.com/apache/lucene-solr/pull/1623#pullrequestreview-468007286", "createdAt": "2020-08-15T17:33:32Z", "commit": {"oid": "6d8c601789501d5880847cef13d7cacc402fcd0c"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxNzozMzozMlrOHBMmRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxNzozODozMVrOHBMnvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAxNzAzMA==", "bodyText": "There's no need to check whether we timed out here, since we effectively abort all of the point-in-time merges we created by setting includeMergeReader to false below, right? I wonder if it would be cleaner to eliminate this AtomicBoolean that is shared with this and the merge threads, and instead using the existing merge abort technique that we have? OTOH IDK how that other mechanism works - is it aborting all outstanding merges?", "url": "https://github.com/apache/lucene-solr/pull/1623#discussion_r471017030", "createdAt": "2020-08-15T17:33:32Z", "author": {"login": "msokolov"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -607,6 +633,57 @@ DirectoryReader getReader(boolean applyAllDeletes, boolean writeAllDeletes) thro\n           }\n         }\n       }\n+      if (onCommitMerges != null) { // only relevant if we do merge on getReader\n+        boolean replaceReaderSuccess = false;\n+        try {\n+          mergeScheduler.merge(mergeSource, MergeTrigger.GET_READER);\n+          onCommitMerges.await(maxCommitMergeWaitMillis, TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d8c601789501d5880847cef13d7cacc402fcd0c"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAxNzM3Mg==", "bodyText": "and this one, closeMergedReaders?", "url": "https://github.com/apache/lucene-solr/pull/1623#discussion_r471017372", "createdAt": "2020-08-15T17:37:51Z", "author": {"login": "msokolov"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -607,6 +633,57 @@ DirectoryReader getReader(boolean applyAllDeletes, boolean writeAllDeletes) thro\n           }\n         }\n       }\n+      if (onCommitMerges != null) { // only relevant if we do merge on getReader\n+        boolean replaceReaderSuccess = false;\n+        try {\n+          mergeScheduler.merge(mergeSource, MergeTrigger.GET_READER);\n+          onCommitMerges.await(maxCommitMergeWaitMillis, TimeUnit.MILLISECONDS);\n+          assert openingSegmentInfos != null;\n+          synchronized (this) {\n+            includeMergeReader.set(false);\n+            boolean openNewReader = mergedReaders.isEmpty() == false;\n+            if (openNewReader) {\n+              StandardDirectoryReader mergedReader = StandardDirectoryReader.open(this,\n+                  sci -> {\n+                    // as soon as we remove the reader and return it the StandardDirectoryReader#open\n+                    // will take care of closing it. We only need to handle the readers that remain in the\n+                    // mergedReaders map and close them.\n+                    SegmentReader remove = mergedReaders.remove(sci.info.name);\n+                    if (remove == null) {\n+                      remove = openedReadOnlyClones.remove(sci.info.name);\n+                      assert remove != null;\n+                      // each of the readers we reuse from the previous reader needs to be refInced\n+                      // since we reuse them but don't have an implicit refInc in the SDR:open call\n+                      remove.incRef();\n+                    }\n+                    return remove;\n+                  }, openingSegmentInfos, applyAllDeletes, writeAllDeletes);\n+              try {\n+                r.close(); // close and swap in the new reader... close is cool here since we didn't leak this reader yet\n+              } finally {\n+                r = mergedReader;\n+              }\n+            }\n+          }\n+          replaceReaderSuccess = true;\n+        } finally {\n+          synchronized (this) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d8c601789501d5880847cef13d7cacc402fcd0c"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAxNzQwNA==", "bodyText": "This method is getting pretty big, and it might help readability if we named these synchronized blocks as functions. This one could be replaceReader()? OTOH maybe it requires too many parameters - it's hard to tell in code review", "url": "https://github.com/apache/lucene-solr/pull/1623#discussion_r471017404", "createdAt": "2020-08-15T17:38:31Z", "author": {"login": "msokolov"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -607,6 +633,57 @@ DirectoryReader getReader(boolean applyAllDeletes, boolean writeAllDeletes) thro\n           }\n         }\n       }\n+      if (onCommitMerges != null) { // only relevant if we do merge on getReader\n+        boolean replaceReaderSuccess = false;\n+        try {\n+          mergeScheduler.merge(mergeSource, MergeTrigger.GET_READER);\n+          onCommitMerges.await(maxCommitMergeWaitMillis, TimeUnit.MILLISECONDS);\n+          assert openingSegmentInfos != null;\n+          synchronized (this) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d8c601789501d5880847cef13d7cacc402fcd0c"}, "originalPosition": 84}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "262c1937668af4923aa3b526bc29e22769fc1a94", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/262c1937668af4923aa3b526bc29e22769fc1a94", "committedDate": "2020-08-16T18:53:33Z", "message": "don't use on commit merge if we assert on no deletion of open files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6a99a38c06e2eaa1065040bdcb2e599ec3ed8e4", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/d6a99a38c06e2eaa1065040bdcb2e599ec3ed8e4", "committedDate": "2020-08-16T19:02:26Z", "message": "extract method to reopen segment reader on getReader merge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1668b7ff3738c899b81fc1e66e7ceb8a4c5098a", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/c1668b7ff3738c899b81fc1e66e7ceb8a4c5098a", "committedDate": "2020-08-16T19:15:22Z", "message": "fix reopen code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c0f5ca5f9671e610ff00e0236c06f1f880e2585", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/9c0f5ca5f9671e610ff00e0236c06f1f880e2585", "committedDate": "2020-08-16T19:15:51Z", "message": "Rename method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15d030d983af0a1ed18335d69f1aa025512bdf5b", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/15d030d983af0a1ed18335d69f1aa025512bdf5b", "committedDate": "2020-08-16T20:34:43Z", "message": "factory out finish method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73d5c70ca4736f2a091dc8be789603de7b4a2be9", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/73d5c70ca4736f2a091dc8be789603de7b4a2be9", "committedDate": "2020-08-17T07:39:46Z", "message": "add a high level explain how getReader works and what locks need to be hold when to allow folks to understand the code more easily"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e7e822f98d8f30726155ae7e99ce09794442aad", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/2e7e822f98d8f30726155ae7e99ce09794442aad", "committedDate": "2020-08-17T08:16:38Z", "message": "fix settings naming"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4a1ba92e805573b47262ebe3d3e9b2e04ebe964", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/e4a1ba92e805573b47262ebe3d3e9b2e04ebe964", "committedDate": "2020-08-17T08:16:44Z", "message": "better name for the wait condition"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3508c0c9099186d033d31cc38da46074a9707b6b", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/3508c0c9099186d033d31cc38da46074a9707b6b", "committedDate": "2020-08-17T08:30:00Z", "message": "don't leak the atomic boolean"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0bbf1a15236d587e5e84c5eb112752594659c77", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/a0bbf1a15236d587e5e84c5eb112752594659c77", "committedDate": "2020-08-17T09:07:08Z", "message": "Merge branch 'master' into jira/lucene-8962"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3ODgwODYy", "url": "https://github.com/apache/lucene-solr/pull/1623#pullrequestreview-467880862", "createdAt": "2020-08-14T21:19:19Z", "commit": {"oid": "6d8c601789501d5880847cef13d7cacc402fcd0c"}, "state": "COMMENTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMToxOToxOVrOHBDneA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMTozNToyMlrOHB7qWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg2OTg4MA==", "bodyText": "Thank you for good success variable naming instead of the usual success1 and success2 etc.!", "url": "https://github.com/apache/lucene-solr/pull/1623#discussion_r470869880", "createdAt": "2020-08-14T21:19:19Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -607,6 +633,57 @@ DirectoryReader getReader(boolean applyAllDeletes, boolean writeAllDeletes) thro\n           }\n         }\n       }\n+      if (onCommitMerges != null) { // only relevant if we do merge on getReader\n+        boolean replaceReaderSuccess = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d8c601789501d5880847cef13d7cacc402fcd0c"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg3MTE0Ng==", "bodyText": "Maybe we need to rename this IWC option and variables?  Maybe we need two timeouts, one for commit, one for getReader?  Or, maybe we somehow make this a property of the MergeSpecification so MergePolicy can decide case by case what the timeout should be?", "url": "https://github.com/apache/lucene-solr/pull/1623#discussion_r470871146", "createdAt": "2020-08-14T21:22:47Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -607,6 +633,57 @@ DirectoryReader getReader(boolean applyAllDeletes, boolean writeAllDeletes) thro\n           }\n         }\n       }\n+      if (onCommitMerges != null) { // only relevant if we do merge on getReader\n+        boolean replaceReaderSuccess = false;\n+        try {\n+          mergeScheduler.merge(mergeSource, MergeTrigger.GET_READER);\n+          onCommitMerges.await(maxCommitMergeWaitMillis, TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d8c601789501d5880847cef13d7cacc402fcd0c"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg4MDcxNQ==", "bodyText": "Good name!  Maybe rename onCommitMerges to pointInTimeMerges?", "url": "https://github.com/apache/lucene-solr/pull/1623#discussion_r470880715", "createdAt": "2020-08-14T21:52:37Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -3244,7 +3322,7 @@ private long prepareCommitInternal() throws IOException {\n               if (anyChanges && maxCommitMergeWaitMillis > 0) {\n                 // we can safely call prepareOnCommitMerge since writeReaderPool(true) above wrote all\n                 // necessary files to disk and checkpointed them.\n-                onCommitMerges = prepareOnCommitMerge(toCommit, includeInCommit);\n+                onCommitMerges = preparePointInTimeMerge(toCommit, includeInCommit, MergeTrigger.COMMIT, sci->{});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d8c601789501d5880847cef13d7cacc402fcd0c"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg4MTA5Mg==", "bodyText": "Hmm why don't we need to deleter.incRef for NRT reader case?  I guess the NRT reader we opened holds a reference already?", "url": "https://github.com/apache/lucene-solr/pull/1623#discussion_r470881092", "createdAt": "2020-08-14T21:53:59Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -3335,49 +3416,60 @@ public void mergeFinished(boolean committed, boolean segmentDropped) throws IOEx\n             // includedInCommit will be set (above, by our caller) to false if the allowed max wall clock\n             // time (IWC.getMaxCommitMergeWaitMillis()) has elapsed, which means we did not make the timeout\n             // and will not commit our merge to the to-be-commited SegmentInfos\n-            \n             if (segmentDropped == false\n                 && committed\n-                && includeInCommit.get()) {\n+                && includeMergeResult.get()) {\n+\n+              // make sure onMergeComplete really was called:\n+              assert origInfo != null;\n \n               if (infoStream.isEnabled(\"IW\")) {\n                 infoStream.message(\"IW\", \"now apply merge during commit: \" + toWrap.segString());\n               }\n \n-              // make sure onMergeComplete really was called:\n-              assert origInfo != null;\n-\n-              deleter.incRef(origInfo.files());\n+              if (trigger == MergeTrigger.COMMIT) { // if we do this in a getReader call here this is obsolete\n+                deleter.incRef(origInfo.files());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d8c601789501d5880847cef13d7cacc402fcd0c"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg4MTUxMw==", "bodyText": "Re-indent?", "url": "https://github.com/apache/lucene-solr/pull/1623#discussion_r470881513", "createdAt": "2020-08-14T21:55:24Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader.java", "diffHunk": "@@ -82,7 +82,8 @@ protected DirectoryReader doBody(String segmentFileName) throws IOException {\n   }\n \n   /** Used by near real-time search */\n-  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes, boolean writeAllDeletes) throws IOException {\n+  static StandardDirectoryReader open(IndexWriter writer, IOUtils.IOFunction<SegmentCommitInfo, SegmentReader> readerFunction,\n+                              SegmentInfos infos, boolean applyAllDeletes, boolean writeAllDeletes) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d8c601789501d5880847cef13d7cacc402fcd0c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg4MjE3OQ==", "bodyText": "Maybe move the assert to top of the method?  We should always hold IW's monitor lock on entry?", "url": "https://github.com/apache/lucene-solr/pull/1623#discussion_r470882179", "createdAt": "2020-08-14T21:57:25Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -3335,49 +3416,60 @@ public void mergeFinished(boolean committed, boolean segmentDropped) throws IOEx\n             // includedInCommit will be set (above, by our caller) to false if the allowed max wall clock\n             // time (IWC.getMaxCommitMergeWaitMillis()) has elapsed, which means we did not make the timeout\n             // and will not commit our merge to the to-be-commited SegmentInfos\n-            \n             if (segmentDropped == false\n                 && committed\n-                && includeInCommit.get()) {\n+                && includeMergeResult.get()) {\n+\n+              // make sure onMergeComplete really was called:\n+              assert origInfo != null;\n \n               if (infoStream.isEnabled(\"IW\")) {\n                 infoStream.message(\"IW\", \"now apply merge during commit: \" + toWrap.segString());\n               }\n \n-              // make sure onMergeComplete really was called:\n-              assert origInfo != null;\n-\n-              deleter.incRef(origInfo.files());\n+              if (trigger == MergeTrigger.COMMIT) { // if we do this in a getReader call here this is obsolete\n+                deleter.incRef(origInfo.files());\n+              }\n               Set<String> mergedSegmentNames = new HashSet<>();\n               for (SegmentCommitInfo sci : segments) {\n                 mergedSegmentNames.add(sci.info.name);\n               }\n               List<SegmentCommitInfo> toCommitMergedAwaySegments = new ArrayList<>();\n-              for (SegmentCommitInfo sci : committingSegmentInfos) {\n+              for (SegmentCommitInfo sci : mergingSegmentInfos) {\n                 if (mergedSegmentNames.contains(sci.info.name)) {\n                   toCommitMergedAwaySegments.add(sci);\n-                  deleter.decRef(sci.files());\n+                  if (trigger == MergeTrigger.COMMIT) { // if we do this in a getReader call here this is obsolete\n+                    deleter.decRef(sci.files());\n+                  }\n                 }\n               }\n               // Construct a OneMerge that applies to toCommit\n               MergePolicy.OneMerge applicableMerge = new MergePolicy.OneMerge(toCommitMergedAwaySegments);\n               applicableMerge.info = origInfo;\n               long segmentCounter = Long.parseLong(origInfo.info.name.substring(1), Character.MAX_RADIX);\n-              committingSegmentInfos.counter = Math.max(committingSegmentInfos.counter, segmentCounter + 1);\n-              committingSegmentInfos.applyMergeChanges(applicableMerge, false);\n+              mergingSegmentInfos.counter = Math.max(mergingSegmentInfos.counter, segmentCounter + 1);\n+              mergingSegmentInfos.applyMergeChanges(applicableMerge, false);\n             } else {\n               if (infoStream.isEnabled(\"IW\")) {\n                 infoStream.message(\"IW\", \"skip apply merge during commit: \" + toWrap.segString());\n               }\n             }\n-            toWrap.mergeFinished(committed, false);\n+            toWrap.mergeFinished(committed, segmentDropped);\n             super.mergeFinished(committed, segmentDropped);\n           }\n \n           @Override\n-          void onMergeComplete() {\n-            // clone the target info to make sure we have the original info without the updated del and update gens\n-            origInfo = info.clone();\n+          void onMergeComplete() throws IOException {\n+            if (includeMergeResult.get()\n+                && isAborted() == false\n+                && info.info.maxDoc() > 0/* never do this if the segment if dropped / empty */) {\n+              assert Thread.holdsLock(IndexWriter.this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d8c601789501d5880847cef13d7cacc402fcd0c"}, "originalPosition": 247}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg4MjY5Nw==", "bodyText": "s/refInced/incRef'd?", "url": "https://github.com/apache/lucene-solr/pull/1623#discussion_r470882697", "createdAt": "2020-08-14T21:59:03Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -607,6 +633,57 @@ DirectoryReader getReader(boolean applyAllDeletes, boolean writeAllDeletes) thro\n           }\n         }\n       }\n+      if (onCommitMerges != null) { // only relevant if we do merge on getReader\n+        boolean replaceReaderSuccess = false;\n+        try {\n+          mergeScheduler.merge(mergeSource, MergeTrigger.GET_READER);\n+          onCommitMerges.await(maxCommitMergeWaitMillis, TimeUnit.MILLISECONDS);\n+          assert openingSegmentInfos != null;\n+          synchronized (this) {\n+            includeMergeReader.set(false);\n+            boolean openNewReader = mergedReaders.isEmpty() == false;\n+            if (openNewReader) {\n+              StandardDirectoryReader mergedReader = StandardDirectoryReader.open(this,\n+                  sci -> {\n+                    // as soon as we remove the reader and return it the StandardDirectoryReader#open\n+                    // will take care of closing it. We only need to handle the readers that remain in the\n+                    // mergedReaders map and close them.\n+                    SegmentReader remove = mergedReaders.remove(sci.info.name);\n+                    if (remove == null) {\n+                      remove = openedReadOnlyClones.remove(sci.info.name);\n+                      assert remove != null;\n+                      // each of the readers we reuse from the previous reader needs to be refInced", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d8c601789501d5880847cef13d7cacc402fcd0c"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg4Mjc2NQ==", "bodyText": "s/refInc/incRef?", "url": "https://github.com/apache/lucene-solr/pull/1623#discussion_r470882765", "createdAt": "2020-08-14T21:59:19Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -607,6 +633,57 @@ DirectoryReader getReader(boolean applyAllDeletes, boolean writeAllDeletes) thro\n           }\n         }\n       }\n+      if (onCommitMerges != null) { // only relevant if we do merge on getReader\n+        boolean replaceReaderSuccess = false;\n+        try {\n+          mergeScheduler.merge(mergeSource, MergeTrigger.GET_READER);\n+          onCommitMerges.await(maxCommitMergeWaitMillis, TimeUnit.MILLISECONDS);\n+          assert openingSegmentInfos != null;\n+          synchronized (this) {\n+            includeMergeReader.set(false);\n+            boolean openNewReader = mergedReaders.isEmpty() == false;\n+            if (openNewReader) {\n+              StandardDirectoryReader mergedReader = StandardDirectoryReader.open(this,\n+                  sci -> {\n+                    // as soon as we remove the reader and return it the StandardDirectoryReader#open\n+                    // will take care of closing it. We only need to handle the readers that remain in the\n+                    // mergedReaders map and close them.\n+                    SegmentReader remove = mergedReaders.remove(sci.info.name);\n+                    if (remove == null) {\n+                      remove = openedReadOnlyClones.remove(sci.info.name);\n+                      assert remove != null;\n+                      // each of the readers we reuse from the previous reader needs to be refInced\n+                      // since we reuse them but don't have an implicit refInc in the SDR:open call", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d8c601789501d5880847cef13d7cacc402fcd0c"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcyOTU3OA==", "bodyText": "s/do/to?", "url": "https://github.com/apache/lucene-solr/pull/1623#discussion_r471729578", "createdAt": "2020-08-17T19:31:58Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -545,18 +546,54 @@ DirectoryReader getReader(boolean applyAllDeletes, boolean writeAllDeletes) thro\n     // obtained during this flush are pooled, the first time\n     // this method is called:\n     readerPool.enableReaderPooling();\n-    DirectoryReader r = null;\n+    StandardDirectoryReader r = null;\n     doBeforeFlush();\n-    boolean anyChanges = false;\n+    boolean anyChanges;\n     /*\n      * for releasing a NRT reader we must ensure that \n      * DW doesn't add any segments or deletes until we are\n      * done with creating the NRT DirectoryReader. \n      * We release the two stage full flush after we are done opening the\n      * directory reader!\n      */\n+    MergePolicy.MergeSpecification onGetReaderMerges = null;\n+    AtomicBoolean hasTimedOut = new AtomicBoolean(false);\n+    Map<String, SegmentReader> mergedReaders = new HashMap<>();\n+    Map<String, SegmentReader> openedReadOnlyClones = new HashMap<>();\n+    // this function is used to control which SR are opened in order to keep track of them\n+    // and to reuse them in the case we wait for merges in this getReader call.\n+    IOUtils.IOFunction<SegmentCommitInfo, SegmentReader> readerFactory = sci -> {\n+      final ReadersAndUpdates rld = getPooledInstance(sci, true);\n+      try {\n+        assert Thread.holdsLock(IndexWriter.this);\n+        SegmentReader segmentReader = rld.getReadOnlyClone(IOContext.READ);\n+        openedReadOnlyClones.put(sci.info.name, segmentReader);\n+        return segmentReader;\n+      } finally {\n+        release(rld);\n+      }\n+    };\n+    SegmentInfos openingSegmentInfos = null;\n+    final long maxFullFlushMergeWaitMillis = config.getMaxFullFlushMergeWaitMillis();\n     boolean success2 = false;\n     try {\n+      /* this is the essential part of the getReader method. We need to take care of the following things:\n+       *  - flush all currently in-memory DWPTs to disk\n+       *  - apply all deletes & updates to new and to the existing DWPTs\n+       *  - prevent flushes and applying deletes of concurrently indexing DWPTs to be applied\n+       *  - open a SDR on the updated SIS\n+       *\n+       * in order do prevent concurrent flushes we call DocumentsWriter#flushAllThreads that swaps out the deleteQueue", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0bbf1a15236d587e5e84c5eb112752594659c77"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcyOTcxMw==", "bodyText": "Thank you for these awesome details!!", "url": "https://github.com/apache/lucene-solr/pull/1623#discussion_r471729713", "createdAt": "2020-08-17T19:32:17Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -545,18 +546,54 @@ DirectoryReader getReader(boolean applyAllDeletes, boolean writeAllDeletes) thro\n     // obtained during this flush are pooled, the first time\n     // this method is called:\n     readerPool.enableReaderPooling();\n-    DirectoryReader r = null;\n+    StandardDirectoryReader r = null;\n     doBeforeFlush();\n-    boolean anyChanges = false;\n+    boolean anyChanges;\n     /*\n      * for releasing a NRT reader we must ensure that \n      * DW doesn't add any segments or deletes until we are\n      * done with creating the NRT DirectoryReader. \n      * We release the two stage full flush after we are done opening the\n      * directory reader!\n      */\n+    MergePolicy.MergeSpecification onGetReaderMerges = null;\n+    AtomicBoolean hasTimedOut = new AtomicBoolean(false);\n+    Map<String, SegmentReader> mergedReaders = new HashMap<>();\n+    Map<String, SegmentReader> openedReadOnlyClones = new HashMap<>();\n+    // this function is used to control which SR are opened in order to keep track of them\n+    // and to reuse them in the case we wait for merges in this getReader call.\n+    IOUtils.IOFunction<SegmentCommitInfo, SegmentReader> readerFactory = sci -> {\n+      final ReadersAndUpdates rld = getPooledInstance(sci, true);\n+      try {\n+        assert Thread.holdsLock(IndexWriter.this);\n+        SegmentReader segmentReader = rld.getReadOnlyClone(IOContext.READ);\n+        openedReadOnlyClones.put(sci.info.name, segmentReader);\n+        return segmentReader;\n+      } finally {\n+        release(rld);\n+      }\n+    };\n+    SegmentInfos openingSegmentInfos = null;\n+    final long maxFullFlushMergeWaitMillis = config.getMaxFullFlushMergeWaitMillis();\n     boolean success2 = false;\n     try {\n+      /* this is the essential part of the getReader method. We need to take care of the following things:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0bbf1a15236d587e5e84c5eb112752594659c77"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc4NzY2NQ==", "bodyText": "Maybe move this assert to top of method?", "url": "https://github.com/apache/lucene-solr/pull/1623#discussion_r471787665", "createdAt": "2020-08-17T21:34:19Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -630,6 +694,64 @@ DirectoryReader getReader(boolean applyAllDeletes, boolean writeAllDeletes) thro\n     return r;\n   }\n \n+  private StandardDirectoryReader finishGetReaderMerge(AtomicBoolean hasTimedOut, Map<String, SegmentReader> mergedReaders,\n+                                                       Map<String, SegmentReader> openedReadOnlyClones, SegmentInfos openingSegmentInfos,\n+                                                       boolean applyAllDeletes, boolean writeAllDeletes,\n+                                                       MergePolicy.MergeSpecification onCommitMerges, long maxCommitMergeWaitMillis) throws IOException {\n+    boolean replaceReaderSuccess = false;\n+    try {\n+      mergeScheduler.merge(mergeSource, MergeTrigger.GET_READER);\n+      onCommitMerges.await(maxCommitMergeWaitMillis, TimeUnit.MILLISECONDS);\n+      assert openingSegmentInfos != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0bbf1a15236d587e5e84c5eb112752594659c77"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc4ODEyMw==", "bodyText": "Hmm, what if the merges finished before the timeout?  The await would return early, and return true if it did not timeout (I think?).  Maybe we do not need/care to distinguish that?  In which case maybe renamed hasTimedOut to something else (mergesFinished?).", "url": "https://github.com/apache/lucene-solr/pull/1623#discussion_r471788123", "createdAt": "2020-08-17T21:35:22Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -630,6 +694,64 @@ DirectoryReader getReader(boolean applyAllDeletes, boolean writeAllDeletes) thro\n     return r;\n   }\n \n+  private StandardDirectoryReader finishGetReaderMerge(AtomicBoolean hasTimedOut, Map<String, SegmentReader> mergedReaders,\n+                                                       Map<String, SegmentReader> openedReadOnlyClones, SegmentInfos openingSegmentInfos,\n+                                                       boolean applyAllDeletes, boolean writeAllDeletes,\n+                                                       MergePolicy.MergeSpecification onCommitMerges, long maxCommitMergeWaitMillis) throws IOException {\n+    boolean replaceReaderSuccess = false;\n+    try {\n+      mergeScheduler.merge(mergeSource, MergeTrigger.GET_READER);\n+      onCommitMerges.await(maxCommitMergeWaitMillis, TimeUnit.MILLISECONDS);\n+      assert openingSegmentInfos != null;\n+      synchronized (this) {\n+        hasTimedOut.set(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0bbf1a15236d587e5e84c5eb112752594659c77"}, "originalPosition": 142}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2742d616216dac2817de257d353064a95b727069", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/2742d616216dac2817de257d353064a95b727069", "committedDate": "2020-08-18T06:58:45Z", "message": "Merge branch 'master' into jira/lucene-8962"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f610ebe8c276a9d9740d17de4e8076ab0f276fe", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/2f610ebe8c276a9d9740d17de4e8076ab0f276fe", "committedDate": "2020-08-18T07:07:44Z", "message": "Apply feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55106f69e0a05bfe190743c69b35baa02e1cb7fc", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/55106f69e0a05bfe190743c69b35baa02e1cb7fc", "committedDate": "2020-08-18T07:11:05Z", "message": "move assert"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ade49d5fb05cb811404f025053b8c5bc1d5a55f", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/0ade49d5fb05cb811404f025053b8c5bc1d5a55f", "committedDate": "2020-08-18T07:46:44Z", "message": "beef up test to cover more reopen/commits"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32d2cfa0a2b0571d17965bb4ae3a094b5bbb2754", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/32d2cfa0a2b0571d17965bb4ae3a094b5bbb2754", "committedDate": "2020-08-18T07:57:10Z", "message": "fix javadocs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d235b46222d39b8f62418d86e192c68f5675d7ce", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/d235b46222d39b8f62418d86e192c68f5675d7ce", "committedDate": "2020-08-18T08:09:51Z", "message": "fix test to finish on failure:"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5NDE5MzY2", "url": "https://github.com/apache/lucene-solr/pull/1623#pullrequestreview-469419366", "createdAt": "2020-08-18T12:46:33Z", "commit": {"oid": "0ade49d5fb05cb811404f025053b8c5bc1d5a55f"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMjo0NjozM1rOHCSCOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMjo0NjozM1rOHCSCOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE1NDY4Mg==", "bodyText": "I love seeing diffs like this one, adding a String message to an otherwise cryptic assert!  It makes me realize you must have had a hellacious debugging session!", "url": "https://github.com/apache/lucene-solr/pull/1623#discussion_r472154682", "createdAt": "2020-08-18T12:46:33Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/ReaderPool.java", "diffHunk": "@@ -404,7 +404,7 @@ private PendingDeletes newPendingDeletes(SegmentReader reader, SegmentCommitInfo\n   private boolean noDups() {\n     Set<String> seen = new HashSet<>();\n     for(SegmentCommitInfo info : readerMap.keySet()) {\n-      assert !seen.contains(info.info.name);\n+      assert !seen.contains(info.info.name) : \"seen twice: \" + info.info.name ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ade49d5fb05cb811404f025053b8c5bc1d5a55f"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34d4f40242bdbae279f58449d3d9704c94710128", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/34d4f40242bdbae279f58449d3d9704c94710128", "committedDate": "2020-08-18T16:08:29Z", "message": "make sure we incRef the merged reader for the time being"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83d666eb9702949f11b5195a4a7ce81145750495", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/83d666eb9702949f11b5195a4a7ce81145750495", "committedDate": "2020-08-18T16:23:46Z", "message": "add test to simulate that a segment that just merged already got merged away before we can reopen the reader on it"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5NTcyODMy", "url": "https://github.com/apache/lucene-solr/pull/1623#pullrequestreview-469572832", "createdAt": "2020-08-18T15:30:03Z", "commit": {"oid": "0ade49d5fb05cb811404f025053b8c5bc1d5a55f"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNTozMDowM1rOHCaDvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjozOTo0MlrOHCc5fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4NjE0MQ==", "bodyText": "Should we keep track the clones iff maxFullFlushMergeWaitMillis is positive? I know this is not expensive.", "url": "https://github.com/apache/lucene-solr/pull/1623#discussion_r472286141", "createdAt": "2020-08-18T15:30:03Z", "author": {"login": "dnhatn"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -545,18 +546,54 @@ DirectoryReader getReader(boolean applyAllDeletes, boolean writeAllDeletes) thro\n     // obtained during this flush are pooled, the first time\n     // this method is called:\n     readerPool.enableReaderPooling();\n-    DirectoryReader r = null;\n+    StandardDirectoryReader r = null;\n     doBeforeFlush();\n-    boolean anyChanges = false;\n+    boolean anyChanges;\n     /*\n      * for releasing a NRT reader we must ensure that \n      * DW doesn't add any segments or deletes until we are\n      * done with creating the NRT DirectoryReader. \n      * We release the two stage full flush after we are done opening the\n      * directory reader!\n      */\n+    MergePolicy.MergeSpecification onGetReaderMerges = null;\n+    AtomicBoolean stopCollectingMergedReaders = new AtomicBoolean(false);\n+    Map<String, SegmentReader> mergedReaders = new HashMap<>();\n+    Map<String, SegmentReader> openedReadOnlyClones = new HashMap<>();\n+    // this function is used to control which SR are opened in order to keep track of them\n+    // and to reuse them in the case we wait for merges in this getReader call.\n+    IOUtils.IOFunction<SegmentCommitInfo, SegmentReader> readerFactory = sci -> {\n+      final ReadersAndUpdates rld = getPooledInstance(sci, true);\n+      try {\n+        assert Thread.holdsLock(IndexWriter.this);\n+        SegmentReader segmentReader = rld.getReadOnlyClone(IOContext.READ);\n+        openedReadOnlyClones.put(sci.info.name, segmentReader);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ade49d5fb05cb811404f025053b8c5bc1d5a55f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMzMjY3MQ==", "bodyText": "Should we rename this to stopCollectingMergedReaders? I find that name better.", "url": "https://github.com/apache/lucene-solr/pull/1623#discussion_r472332671", "createdAt": "2020-08-18T16:39:42Z", "author": {"login": "dnhatn"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -3179,9 +3317,9 @@ private long prepareCommitInternal() throws IOException {\n       SegmentInfos toCommit = null;\n       boolean anyChanges = false;\n       long seqNo;\n-      MergePolicy.MergeSpecification onCommitMerges = null;\n-      AtomicBoolean includeInCommit = new AtomicBoolean(true);\n-      final long maxCommitMergeWaitMillis = config.getMaxCommitMergeWaitMillis();\n+      MergePolicy.MergeSpecification pointInTimeMerges = null;\n+      AtomicBoolean hasTimedOut = new AtomicBoolean(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83d666eb9702949f11b5195a4a7ce81145750495"}, "originalPosition": 224}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30c11de82e5be0a907d44d9de47977d5f93026d0", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/30c11de82e5be0a907d44d9de47977d5f93026d0", "committedDate": "2020-08-18T16:46:09Z", "message": "rename var"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d2ee80b9d472f698cc55f438251db7787dd5771", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/6d2ee80b9d472f698cc55f438251db7787dd5771", "committedDate": "2020-08-18T16:47:58Z", "message": "apply feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14c6f54f680cc7dd4b2ec675a459c5b23b46cec8", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/14c6f54f680cc7dd4b2ec675a459c5b23b46cec8", "committedDate": "2020-08-18T18:42:42Z", "message": "make vars final"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "efb5f4f32adc5ba9b198d8593c284cf49f7a05f7", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/efb5f4f32adc5ba9b198d8593c284cf49f7a05f7", "committedDate": "2020-08-18T22:00:53Z", "message": "fix resource release handling on excepiton that happens between merge register and merge execution"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e4f63b33adb2c80394a13e295ab5c26554b15c2", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/9e4f63b33adb2c80394a13e295ab5c26554b15c2", "committedDate": "2020-08-18T22:21:28Z", "message": "make sure we finish merge if we abort it"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acb93be4bf6904083481f463097abcbe385f5a3c", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/acb93be4bf6904083481f463097abcbe385f5a3c", "committedDate": "2020-08-19T07:12:32Z", "message": "fix visibility"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfdc5c7a2dbb3ba7151c79d26c4f2f84ea22dc33", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/dfdc5c7a2dbb3ba7151c79d26c4f2f84ea22dc33", "committedDate": "2020-08-19T09:51:16Z", "message": "fix warnings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fab977c6643a50a42c2642dad9ce69ecf3026f1", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/6fab977c6643a50a42c2642dad9ce69ecf3026f1", "committedDate": "2020-08-20T07:08:17Z", "message": "Merge branch 'master' into jira/lucene-8962"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a88aa2653f14255bbc01df8120e9ede447a0f4f", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/1a88aa2653f14255bbc01df8120e9ede447a0f4f", "committedDate": "2020-08-20T07:11:21Z", "message": "don\n't merge unexpectedly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84c1aeee07c269fd47de12662b3dee8b4551fd87", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/84c1aeee07c269fd47de12662b3dee8b4551fd87", "committedDate": "2020-08-24T07:20:18Z", "message": "Merge branch 'master' into jira/lucene-8962"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6976f896711560e714d679b438d8238b20d0cec1", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/6976f896711560e714d679b438d8238b20d0cec1", "committedDate": "2020-08-24T15:35:58Z", "message": "Merge branch 'master' into jira/lucene-8962"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77c9c6c269f019dbce3be1a9d719662f52507c9d", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/77c9c6c269f019dbce3be1a9d719662f52507c9d", "committedDate": "2020-08-24T15:37:49Z", "message": "add changes entry"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2433, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}