{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwOTkyMDAw", "number": 1296, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxMzoyMTowNlrODkFUQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxMzoyNDozMVrODkFU8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTYyNDM1OnYy", "diffSide": "RIGHT", "path": "lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/KoreanTokenizer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxMzoyMTowNlrOFwOJeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxNjo0ODozNlrOFwPDtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEwNzc2OQ==", "bodyText": "Don't capitalize \"If\"", "url": "https://github.com/apache/lucene-solr/pull/1296#discussion_r386107769", "createdAt": "2020-03-01T13:21:06Z", "author": {"login": "msokolov"}, "path": "lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/KoreanTokenizer.java", "diffHunk": "@@ -185,16 +185,43 @@ public KoreanTokenizer(AttributeFactory factory, UserDictionary userDictionary,\n    * @param discardPunctuation true if punctuation tokens should be dropped from the output.\n    */\n   public KoreanTokenizer(AttributeFactory factory, UserDictionary userDictionary, DecompoundMode mode, boolean outputUnknownUnigrams, boolean discardPunctuation) {\n+    this(factory,\n+        TokenInfoDictionary.getInstance(),\n+        UnknownDictionary.getInstance(),\n+        ConnectionCosts.getInstance(),\n+        userDictionary, mode, outputUnknownUnigrams, discardPunctuation);\n+  }\n+\n+  /**\n+   * <p>Create a new KoreanTokenizer supplying a custom system dictionary and unknown dictionary.\n+   * This constructor provides an entry point for users that want to construct custom language models\n+   * that can be used as input to {@link org.apache.lucene.analysis.ko.util.DictionaryBuilder}.</p>\n+   *\n+   * @param factory the AttributeFactory to use\n+   * @param systemDictionary a custom known token dictionary\n+   * @param unkDictionary a custom unknown token dictionary\n+   * @param connectionCosts custom token transition costs\n+   * @param userDictionary Optional: if non-null, user dictionary.\n+   * @param mode Decompound mode.\n+   * @param outputUnknownUnigrams If true outputs unigrams for unknown words.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5e44e95175dbf027915e162925057bbcc14200b"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEyMjY3OA==", "bodyText": "Oh, I did that because it was capitalized before.\nI'll change the other constructors as well.", "url": "https://github.com/apache/lucene-solr/pull/1296#discussion_r386122678", "createdAt": "2020-03-01T16:48:36Z", "author": {"login": "danmuzi"}, "path": "lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/KoreanTokenizer.java", "diffHunk": "@@ -185,16 +185,43 @@ public KoreanTokenizer(AttributeFactory factory, UserDictionary userDictionary,\n    * @param discardPunctuation true if punctuation tokens should be dropped from the output.\n    */\n   public KoreanTokenizer(AttributeFactory factory, UserDictionary userDictionary, DecompoundMode mode, boolean outputUnknownUnigrams, boolean discardPunctuation) {\n+    this(factory,\n+        TokenInfoDictionary.getInstance(),\n+        UnknownDictionary.getInstance(),\n+        ConnectionCosts.getInstance(),\n+        userDictionary, mode, outputUnknownUnigrams, discardPunctuation);\n+  }\n+\n+  /**\n+   * <p>Create a new KoreanTokenizer supplying a custom system dictionary and unknown dictionary.\n+   * This constructor provides an entry point for users that want to construct custom language models\n+   * that can be used as input to {@link org.apache.lucene.analysis.ko.util.DictionaryBuilder}.</p>\n+   *\n+   * @param factory the AttributeFactory to use\n+   * @param systemDictionary a custom known token dictionary\n+   * @param unkDictionary a custom unknown token dictionary\n+   * @param connectionCosts custom token transition costs\n+   * @param userDictionary Optional: if non-null, user dictionary.\n+   * @param mode Decompound mode.\n+   * @param outputUnknownUnigrams If true outputs unigrams for unknown words.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEwNzc2OQ=="}, "originalCommit": {"oid": "d5e44e95175dbf027915e162925057bbcc14200b"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTYyNjExOnYy", "diffSide": "RIGHT", "path": "lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/dict/BinaryDictionary.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxMzoyNDozMVrOFwOKeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxNjo0OToyNFrOFwPD5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEwODAyNA==", "bodyText": "so .. this basically follows the pattern from JapaneseTokenizer, I think. .. but somehow I don't see where we defined ResourceScheme? We're not referencing the one in kuromoji, right?", "url": "https://github.com/apache/lucene-solr/pull/1296#discussion_r386108024", "createdAt": "2020-03-01T13:24:31Z", "author": {"login": "msokolov"}, "path": "lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/dict/BinaryDictionary.java", "diffHunk": "@@ -150,7 +150,18 @@ protected final InputStream getResource(String suffix) throws IOException {\n         throw new IllegalStateException(\"unknown resource scheme \" + resourceScheme);\n     }\n   }\n-  \n+\n+  public static InputStream getResource(ResourceScheme scheme, String path) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5e44e95175dbf027915e162925057bbcc14200b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEyMjcyNA==", "bodyText": "It's the same as Kuromoji's pattern.\nBut there is no relation with Kuromoji.\nIt's already written as an enum in this class.\n\n  \n    \n      lucene-solr/lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/dict/BinaryDictionary.java\n    \n    \n        Lines 45 to 47\n      in\n      d5e44e9\n    \n    \n    \n    \n\n        \n          \n           public enum ResourceScheme { \n        \n\n        \n          \n             CLASSPATH, FILE \n        \n\n        \n          \n           }", "url": "https://github.com/apache/lucene-solr/pull/1296#discussion_r386122724", "createdAt": "2020-03-01T16:49:24Z", "author": {"login": "danmuzi"}, "path": "lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/dict/BinaryDictionary.java", "diffHunk": "@@ -150,7 +150,18 @@ protected final InputStream getResource(String suffix) throws IOException {\n         throw new IllegalStateException(\"unknown resource scheme \" + resourceScheme);\n     }\n   }\n-  \n+\n+  public static InputStream getResource(ResourceScheme scheme, String path) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEwODAyNA=="}, "originalCommit": {"oid": "d5e44e95175dbf027915e162925057bbcc14200b"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 828, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}