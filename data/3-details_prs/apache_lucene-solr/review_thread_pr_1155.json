{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwMjIzODgy", "number": 1155, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDozNzowOVrODXio5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOToxMDowM1rODluZ2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDExMzY1OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDozNzowOVrOFc48Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQwMjoyNjo0OFrOFfM1-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzNzMzNA==", "bodyText": "This relies on some peculiar semantics of SegmentInfos, namely that it manages Segment internally as a List. I guess that's true now, but I wonder if we shouldn't make SegmentInfos actually implement List, have asList return a modifiable List, or at least document and/or add a unit test to TestSegmentInfos enforcing that you can remove while iterating and expect a certain ordering of the elements? It seems to be implicit in the contract given that segments are ordered, but it's not explicitly stated in the javadocs at least.", "url": "https://github.com/apache/lucene-solr/pull/1155#discussion_r365837334", "createdAt": "2020-01-13T14:37:09Z", "author": {"login": "msokolov"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -3147,6 +3149,38 @@ public final boolean flushNextBuffer() throws IOException {\n     }\n   }\n \n+  private MergePolicy waitForMergeOnCommitPolicy(MergePolicy source, final SegmentInfos toCommit,\n+                                                 AtomicReference<CountDownLatch> mergeLatchRef) {\n+    return new OneMergeWrappingMergePolicy(source, (toWrap) -> new MergePolicy.OneMerge(toWrap.segments) {\n+      @Override\n+      public void mergeFinished() throws IOException {\n+        super.mergeFinished();\n+        CountDownLatch mergeAwaitLatch = mergeLatchRef.get();\n+        if (mergeAwaitLatch == null) {\n+          // Commit thread timed out waiting for this merge and moved on. No need to manipulate toCommit.\n+          return;\n+        }\n+        if (isAborted() == false) {\n+          deleter.incRef(this.info.files());\n+          toCommit.add(this.info.clone());\n+          long segmentCounter = Long.parseLong(this.info.info.name.substring(1), Character.MAX_RADIX);\n+          toCommit.counter = Math.max(toCommit.counter, segmentCounter + 1);\n+          Set<String> segmentNamesToRemove = new HashSet<>();\n+          for (SegmentCommitInfo sci : this.segments) {\n+            deleter.decRef(sci.files());\n+            segmentNamesToRemove.add(sci.info.name);\n+          }\n+          for (int i = toCommit.size() - 1; i >= 0; i--) {\n+            if (segmentNamesToRemove.contains(toCommit.info(i).info.name)) {\n+              toCommit.remove(i);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5bf1b6577ed866ec01486bcb928bdf8302d643d"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI2MDYwMQ==", "bodyText": "I've now forgotten my motivation for traversing the list backwards. I think it was just to avoid needing to do some potentially messy/error-prone index manipulation.\nIn my latest commit, I realized that I could leverage SegmentInfos.applyMergeChanges if I replace the merged segments with their toCommit doppelg\u00e4ngers. I think that provides better encapsulation and lets SegmentInfos manage its own internal state better. (Also applyMergeChanges does some weird and wonderful list manipulation of its own that I definitely didn't want to replicate into IndexWriter.)", "url": "https://github.com/apache/lucene-solr/pull/1155#discussion_r368260601", "createdAt": "2020-01-19T02:26:48Z", "author": {"login": "msfroh"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -3147,6 +3149,38 @@ public final boolean flushNextBuffer() throws IOException {\n     }\n   }\n \n+  private MergePolicy waitForMergeOnCommitPolicy(MergePolicy source, final SegmentInfos toCommit,\n+                                                 AtomicReference<CountDownLatch> mergeLatchRef) {\n+    return new OneMergeWrappingMergePolicy(source, (toWrap) -> new MergePolicy.OneMerge(toWrap.segments) {\n+      @Override\n+      public void mergeFinished() throws IOException {\n+        super.mergeFinished();\n+        CountDownLatch mergeAwaitLatch = mergeLatchRef.get();\n+        if (mergeAwaitLatch == null) {\n+          // Commit thread timed out waiting for this merge and moved on. No need to manipulate toCommit.\n+          return;\n+        }\n+        if (isAborted() == false) {\n+          deleter.incRef(this.info.files());\n+          toCommit.add(this.info.clone());\n+          long segmentCounter = Long.parseLong(this.info.info.name.substring(1), Character.MAX_RADIX);\n+          toCommit.counter = Math.max(toCommit.counter, segmentCounter + 1);\n+          Set<String> segmentNamesToRemove = new HashSet<>();\n+          for (SegmentCommitInfo sci : this.segments) {\n+            deleter.decRef(sci.files());\n+            segmentNamesToRemove.add(sci.info.name);\n+          }\n+          for (int i = toCommit.size() - 1; i >= 0; i--) {\n+            if (segmentNamesToRemove.contains(toCommit.info(i).info.name)) {\n+              toCommit.remove(i);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzNzMzNA=="}, "originalCommit": {"oid": "f5bf1b6577ed866ec01486bcb928bdf8302d643d"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDExNjQyOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDozNzo1NlrOFc49xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwMDowNTozOFrOFfIK9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzNzc2Nw==", "bodyText": "Would we sometimes get !=null and == 0??", "url": "https://github.com/apache/lucene-solr/pull/1155#discussion_r365837767", "createdAt": "2020-01-13T14:37:56Z", "author": {"login": "msokolov"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -3223,15 +3259,44 @@ private long prepareCommitInternal() throws IOException {\n               // sneak into the commit point:\n               toCommit = segmentInfos.clone();\n \n+              if (anyChanges) {\n+                mergeAwaitLatchRef = new AtomicReference<>();\n+                MergePolicy mergeOnCommitPolicy = waitForMergeOnCommitPolicy(config.getMergePolicy(), toCommit, mergeAwaitLatchRef);\n+\n+                // Find any merges that can execute on commit (per MergePolicy).\n+                commitMerges = mergeOnCommitPolicy.findCommitMerges(segmentInfos, this);\n+                if (commitMerges != null && commitMerges.merges.size() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5bf1b6577ed866ec01486bcb928bdf8302d643d"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE4NDA1Mg==", "bodyText": "Based on e.g. NoMergePolicy, it looks like the convention to say \"I found no merges\" is to return null, but I can't see anything preventing a MergePolicy from returning an empty MergeSpecification.", "url": "https://github.com/apache/lucene-solr/pull/1155#discussion_r368184052", "createdAt": "2020-01-18T00:05:38Z", "author": {"login": "msfroh"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -3223,15 +3259,44 @@ private long prepareCommitInternal() throws IOException {\n               // sneak into the commit point:\n               toCommit = segmentInfos.clone();\n \n+              if (anyChanges) {\n+                mergeAwaitLatchRef = new AtomicReference<>();\n+                MergePolicy mergeOnCommitPolicy = waitForMergeOnCommitPolicy(config.getMergePolicy(), toCommit, mergeAwaitLatchRef);\n+\n+                // Find any merges that can execute on commit (per MergePolicy).\n+                commitMerges = mergeOnCommitPolicy.findCommitMerges(segmentInfos, this);\n+                if (commitMerges != null && commitMerges.merges.size() > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzNzc2Nw=="}, "originalCommit": {"oid": "f5bf1b6577ed866ec01486bcb928bdf8302d643d"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDEyMDc2OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDozOToxNFrOFc5AYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNzozNzoyMFrOFiuOVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzODQzNA==", "bodyText": "I If we fail to registerMerge does it necessarily mean the segment was already being merged?", "url": "https://github.com/apache/lucene-solr/pull/1155#discussion_r365838434", "createdAt": "2020-01-13T14:39:14Z", "author": {"login": "msokolov"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -3223,15 +3259,44 @@ private long prepareCommitInternal() throws IOException {\n               // sneak into the commit point:\n               toCommit = segmentInfos.clone();\n \n+              if (anyChanges) {\n+                mergeAwaitLatchRef = new AtomicReference<>();\n+                MergePolicy mergeOnCommitPolicy = waitForMergeOnCommitPolicy(config.getMergePolicy(), toCommit, mergeAwaitLatchRef);\n+\n+                // Find any merges that can execute on commit (per MergePolicy).\n+                commitMerges = mergeOnCommitPolicy.findCommitMerges(segmentInfos, this);\n+                if (commitMerges != null && commitMerges.merges.size() > 0) {\n+                  int mergeCount = 0;\n+                  for (MergePolicy.OneMerge oneMerge : commitMerges.merges) {\n+                    if (registerMerge(oneMerge)) {\n+                      mergeCount++;\n+                    } else {\n+                      throw new IllegalStateException(\"MergePolicy \" + config.getMergePolicy().getClass() +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5bf1b6577ed866ec01486bcb928bdf8302d643d"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI2MDQzNA==", "bodyText": "Yes -- or it means that the OneMerge contains a segment that doesn't exist (anymore?).\nSince we execute this while holding IndexWriter lock, it should not be the case that the merge policy could have returned a OneMerge that contains a segment that no longer exists (because updating the live SegmentInfos should only occur within the IW lock).", "url": "https://github.com/apache/lucene-solr/pull/1155#discussion_r368260434", "createdAt": "2020-01-19T02:22:30Z", "author": {"login": "msfroh"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -3223,15 +3259,44 @@ private long prepareCommitInternal() throws IOException {\n               // sneak into the commit point:\n               toCommit = segmentInfos.clone();\n \n+              if (anyChanges) {\n+                mergeAwaitLatchRef = new AtomicReference<>();\n+                MergePolicy mergeOnCommitPolicy = waitForMergeOnCommitPolicy(config.getMergePolicy(), toCommit, mergeAwaitLatchRef);\n+\n+                // Find any merges that can execute on commit (per MergePolicy).\n+                commitMerges = mergeOnCommitPolicy.findCommitMerges(segmentInfos, this);\n+                if (commitMerges != null && commitMerges.merges.size() > 0) {\n+                  int mergeCount = 0;\n+                  for (MergePolicy.OneMerge oneMerge : commitMerges.merges) {\n+                    if (registerMerge(oneMerge)) {\n+                      mergeCount++;\n+                    } else {\n+                      throw new IllegalStateException(\"MergePolicy \" + config.getMergePolicy().getClass() +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzODQzNA=="}, "originalCommit": {"oid": "f5bf1b6577ed866ec01486bcb928bdf8302d643d"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk1MzIzNg==", "bodyText": "I see, thanks for explaining!", "url": "https://github.com/apache/lucene-solr/pull/1155#discussion_r371953236", "createdAt": "2020-01-28T17:37:20Z", "author": {"login": "msokolov"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -3223,15 +3259,44 @@ private long prepareCommitInternal() throws IOException {\n               // sneak into the commit point:\n               toCommit = segmentInfos.clone();\n \n+              if (anyChanges) {\n+                mergeAwaitLatchRef = new AtomicReference<>();\n+                MergePolicy mergeOnCommitPolicy = waitForMergeOnCommitPolicy(config.getMergePolicy(), toCommit, mergeAwaitLatchRef);\n+\n+                // Find any merges that can execute on commit (per MergePolicy).\n+                commitMerges = mergeOnCommitPolicy.findCommitMerges(segmentInfos, this);\n+                if (commitMerges != null && commitMerges.merges.size() > 0) {\n+                  int mergeCount = 0;\n+                  for (MergePolicy.OneMerge oneMerge : commitMerges.merges) {\n+                    if (registerMerge(oneMerge)) {\n+                      mergeCount++;\n+                    } else {\n+                      throw new IllegalStateException(\"MergePolicy \" + config.getMergePolicy().getClass() +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzODQzNA=="}, "originalCommit": {"oid": "f5bf1b6577ed866ec01486bcb928bdf8302d643d"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDEyNzY3OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDo0MToxMFrOFc5Eew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwMDoyMzoxM1rOFfIW_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzOTQ4Mw==", "bodyText": "could we wait to create this until we create its CountdownLatch and simplify the null checks below?", "url": "https://github.com/apache/lucene-solr/pull/1155#discussion_r365839483", "createdAt": "2020-01-13T14:41:10Z", "author": {"login": "msokolov"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -3223,15 +3259,44 @@ private long prepareCommitInternal() throws IOException {\n               // sneak into the commit point:\n               toCommit = segmentInfos.clone();\n \n+              if (anyChanges) {\n+                mergeAwaitLatchRef = new AtomicReference<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5bf1b6577ed866ec01486bcb928bdf8302d643d"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE4NzEzNQ==", "bodyText": "This is a little bit of hackery to share state between this thread and the threads that do the merges.\nWe initialize the ref here, pass it to waitForMergeOnCommitPolicy on the next line to make sure it gets shared with any computed OneMerges. Then, before we release the IW lock (so we're guaranteed that those OneMerges haven't run yet), we populate the ref with the CountdownLatch (once we know what we're counting down).\nThat said, I think I could simplify things a lot by not using OneMergeWrappingMergePolicy, but rather decorating the returned OneMerges (if applicable) directly. I'm going to take a stab at that approach in my next commit.", "url": "https://github.com/apache/lucene-solr/pull/1155#discussion_r368187135", "createdAt": "2020-01-18T00:23:13Z", "author": {"login": "msfroh"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -3223,15 +3259,44 @@ private long prepareCommitInternal() throws IOException {\n               // sneak into the commit point:\n               toCommit = segmentInfos.clone();\n \n+              if (anyChanges) {\n+                mergeAwaitLatchRef = new AtomicReference<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzOTQ4Mw=="}, "originalCommit": {"oid": "f5bf1b6577ed866ec01486bcb928bdf8302d643d"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDEzNTgwOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDo0MzoyOVrOFc5JeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQwMjoyNzozMVrOFfM2BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg0MDc2MQ==", "bodyText": "\"... from within ...\"", "url": "https://github.com/apache/lucene-solr/pull/1155#discussion_r365840761", "createdAt": "2020-01-13T14:43:29Z", "author": {"login": "msokolov"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -3252,6 +3317,53 @@ private long prepareCommitInternal() throws IOException {\n       } finally {\n         maybeCloseOnTragicEvent();\n       }\n+\n+      if (mergeAwaitLatchRef != null && mergeAwaitLatchRef.get() != null) {\n+        CountDownLatch mergeAwaitLatch = mergeAwaitLatchRef.get();\n+        // If we found and registered any merges above, within the flushLock, then we want to ensure that they\n+        // complete execution. Note that since we released the lock, other merges may have been scheduled. We will\n+        // block until  the merges that we registered complete. As they complete, they will update toCommit to\n+        // replace merged segments with the result of each merge.\n+        mergeScheduler.merge(this, MergeTrigger.FULL_FLUSH, true);\n+        long mergeWaitStart = System.nanoTime();\n+        int abandonedCount = 0;\n+        long waitTimeMillis = (long) (config.getMaxCommitMergeWaitSeconds() * 1000.0);\n+        try {\n+          config.getIndexWriterEvents().beginMergeOnCommit();\n+          if (mergeAwaitLatch.await(waitTimeMillis, TimeUnit.MILLISECONDS) == false) {\n+            synchronized (this) {\n+              // Need to do this in a synchronized block, to make sure none of our commit merges are currently\n+              // executing mergeFinished (since mergeFinished itself is called from with the IndexWriter lock).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5bf1b6577ed866ec01486bcb928bdf8302d643d"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI2MDYxMw==", "bodyText": "D'oh! Fixed, thanks!", "url": "https://github.com/apache/lucene-solr/pull/1155#discussion_r368260613", "createdAt": "2020-01-19T02:27:31Z", "author": {"login": "msfroh"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -3252,6 +3317,53 @@ private long prepareCommitInternal() throws IOException {\n       } finally {\n         maybeCloseOnTragicEvent();\n       }\n+\n+      if (mergeAwaitLatchRef != null && mergeAwaitLatchRef.get() != null) {\n+        CountDownLatch mergeAwaitLatch = mergeAwaitLatchRef.get();\n+        // If we found and registered any merges above, within the flushLock, then we want to ensure that they\n+        // complete execution. Note that since we released the lock, other merges may have been scheduled. We will\n+        // block until  the merges that we registered complete. As they complete, they will update toCommit to\n+        // replace merged segments with the result of each merge.\n+        mergeScheduler.merge(this, MergeTrigger.FULL_FLUSH, true);\n+        long mergeWaitStart = System.nanoTime();\n+        int abandonedCount = 0;\n+        long waitTimeMillis = (long) (config.getMaxCommitMergeWaitSeconds() * 1000.0);\n+        try {\n+          config.getIndexWriterEvents().beginMergeOnCommit();\n+          if (mergeAwaitLatch.await(waitTimeMillis, TimeUnit.MILLISECONDS) == false) {\n+            synchronized (this) {\n+              // Need to do this in a synchronized block, to make sure none of our commit merges are currently\n+              // executing mergeFinished (since mergeFinished itself is called from with the IndexWriter lock).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg0MDc2MQ=="}, "originalCommit": {"oid": "f5bf1b6577ed866ec01486bcb928bdf8302d643d"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDE0Mzk3OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDo0NTo1OFrOFc5OnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQwMjoxNzoxOVrOFfM0nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg0MjA3Ng==", "bodyText": "Typically why would it happen that we abandon some merges? timeout? Would there be any sense in trying to interrupt them?", "url": "https://github.com/apache/lucene-solr/pull/1155#discussion_r365842076", "createdAt": "2020-01-13T14:45:58Z", "author": {"login": "msokolov"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -3252,6 +3317,53 @@ private long prepareCommitInternal() throws IOException {\n       } finally {\n         maybeCloseOnTragicEvent();\n       }\n+\n+      if (mergeAwaitLatchRef != null && mergeAwaitLatchRef.get() != null) {\n+        CountDownLatch mergeAwaitLatch = mergeAwaitLatchRef.get();\n+        // If we found and registered any merges above, within the flushLock, then we want to ensure that they\n+        // complete execution. Note that since we released the lock, other merges may have been scheduled. We will\n+        // block until  the merges that we registered complete. As they complete, they will update toCommit to\n+        // replace merged segments with the result of each merge.\n+        mergeScheduler.merge(this, MergeTrigger.FULL_FLUSH, true);\n+        long mergeWaitStart = System.nanoTime();\n+        int abandonedCount = 0;\n+        long waitTimeMillis = (long) (config.getMaxCommitMergeWaitSeconds() * 1000.0);\n+        try {\n+          config.getIndexWriterEvents().beginMergeOnCommit();\n+          if (mergeAwaitLatch.await(waitTimeMillis, TimeUnit.MILLISECONDS) == false) {\n+            synchronized (this) {\n+              // Need to do this in a synchronized block, to make sure none of our commit merges are currently\n+              // executing mergeFinished (since mergeFinished itself is called from with the IndexWriter lock).\n+              // After we clear the value from mergeAwaitLatchRef, the merges we schedule will still execute as\n+              // usual, but when they finish, they won't attempt to update toCommit or modify segment reference\n+              // counts.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5bf1b6577ed866ec01486bcb928bdf8302d643d"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI2MDI1Mg==", "bodyText": "Yeah -- maybe we only want to wait a short time for these merges to complete. If a merge doesn't complete, we should move forward with the commit. Since these merges will still update the \"real\" SegmentInfos, any progress they've made is arguably still useful. That's why I didn't want to interrupt them.", "url": "https://github.com/apache/lucene-solr/pull/1155#discussion_r368260252", "createdAt": "2020-01-19T02:17:19Z", "author": {"login": "msfroh"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -3252,6 +3317,53 @@ private long prepareCommitInternal() throws IOException {\n       } finally {\n         maybeCloseOnTragicEvent();\n       }\n+\n+      if (mergeAwaitLatchRef != null && mergeAwaitLatchRef.get() != null) {\n+        CountDownLatch mergeAwaitLatch = mergeAwaitLatchRef.get();\n+        // If we found and registered any merges above, within the flushLock, then we want to ensure that they\n+        // complete execution. Note that since we released the lock, other merges may have been scheduled. We will\n+        // block until  the merges that we registered complete. As they complete, they will update toCommit to\n+        // replace merged segments with the result of each merge.\n+        mergeScheduler.merge(this, MergeTrigger.FULL_FLUSH, true);\n+        long mergeWaitStart = System.nanoTime();\n+        int abandonedCount = 0;\n+        long waitTimeMillis = (long) (config.getMaxCommitMergeWaitSeconds() * 1000.0);\n+        try {\n+          config.getIndexWriterEvents().beginMergeOnCommit();\n+          if (mergeAwaitLatch.await(waitTimeMillis, TimeUnit.MILLISECONDS) == false) {\n+            synchronized (this) {\n+              // Need to do this in a synchronized block, to make sure none of our commit merges are currently\n+              // executing mergeFinished (since mergeFinished itself is called from with the IndexWriter lock).\n+              // After we clear the value from mergeAwaitLatchRef, the merges we schedule will still execute as\n+              // usual, but when they finish, they won't attempt to update toCommit or modify segment reference\n+              // counts.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg0MjA3Ng=="}, "originalCommit": {"oid": "f5bf1b6577ed866ec01486bcb928bdf8302d643d"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTA1NTQyOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMzo1NToxNFrOFfIDmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMzo1NToxNFrOFfIDmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE4MjE2OA==", "bodyText": "I just found that this assertion sometimes fails. If there are some pending/running merges left over from the indexing threads, the segments associated with those merges will be excluded from merging on commit. I'll update this test to wait for pending merges to finish before committing.", "url": "https://github.com/apache/lucene-solr/pull/1155#discussion_r368182168", "createdAt": "2020-01-17T23:55:14Z", "author": {"login": "msfroh"}, "path": "lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy.java", "diffHunk": "@@ -277,6 +285,92 @@ public void testSetters() {\n     assertSetters(new LogDocMergePolicy());\n   }\n \n+  public void testMergeOnCommit() throws IOException, InterruptedException {\n+    Directory dir = newDirectory();\n+    IndexWriter firstWriter = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n+        .setMergePolicy(NoMergePolicy.INSTANCE));\n+    for (int i = 0; i < 5; i++) {\n+      TestIndexWriter.addDoc(firstWriter);\n+      firstWriter.flush();\n+    }\n+    DirectoryReader firstReader = DirectoryReader.open(firstWriter);\n+    assertEquals(5, firstReader.leaves().size());\n+    firstReader.close();\n+    firstWriter.close();\n+\n+    MergePolicy mergeOnCommitPolicy = new LogDocMergePolicy() {\n+      @Override\n+      public MergeSpecification findCommitMerges(SegmentInfos segmentInfos, MergeContext mergeContext) throws IOException {\n+        // Optimize down to a single segment on commit\n+        MergeSpecification mergeSpecification = new MergeSpecification();\n+        List<SegmentCommitInfo> nonMergingSegments = new ArrayList<>();\n+        for (SegmentCommitInfo sci : segmentInfos) {\n+          if (mergeContext.getMergingSegments().contains(sci) == false) {\n+            nonMergingSegments.add(sci);\n+          }\n+        }\n+        mergeSpecification.add(new OneMerge(nonMergingSegments));\n+        return mergeSpecification;\n+      }\n+    };\n+\n+    IndexWriter writerWithMergePolicy = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n+        .setMergePolicy(mergeOnCommitPolicy));\n+\n+    writerWithMergePolicy.commit();\n+\n+    DirectoryReader unmergedReader = DirectoryReader.open(writerWithMergePolicy);\n+    assertEquals(5, unmergedReader.leaves().size()); // Don't merge unless there's a change\n+    unmergedReader.close();\n+\n+    TestIndexWriter.addDoc(writerWithMergePolicy);\n+    writerWithMergePolicy.commit();\n+\n+    DirectoryReader mergedReader = DirectoryReader.open(writerWithMergePolicy);\n+    assertEquals(1, mergedReader.leaves().size()); // Now we merge on commit\n+    mergedReader.close();\n+\n+    LineFileDocs lineFileDocs = new LineFileDocs(random());\n+    int docCount = atLeast(1000);\n+    AtomicInteger indexedDocs = new AtomicInteger(0);\n+    int numIndexingThreads = atLeast(2);\n+    CountDownLatch startingGun = new CountDownLatch(1);\n+    Collection<Thread> indexingThreads = new ArrayList<>();\n+    for (int i = 0; i < numIndexingThreads; i++) {\n+      Thread t = new Thread(() -> {\n+        try {\n+          while (indexedDocs.getAndIncrement() < docCount) {\n+            writerWithMergePolicy.addDocument(lineFileDocs.nextDoc());\n+            if (rarely()) {\n+              writerWithMergePolicy.commit();\n+            }\n+          }\n+        } catch (IOException e) {\n+          e.printStackTrace();\n+          fail();\n+        }\n+      });\n+      t.start();\n+      indexingThreads.add(t);\n+    }\n+    startingGun.countDown();\n+    for (Thread t : indexingThreads) {\n+      t.join();\n+    }\n+    writerWithMergePolicy.commit();\n+    assertEquals(1, writerWithMergePolicy.listOfSegmentCommitInfos().size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5bf1b6577ed866ec01486bcb928bdf8302d643d"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNjM1MzkzOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNToxMzo1NVrOFjumgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMjo1Mzo0NVrOFkaGOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAwODAwMg==", "bodyText": "Maybe also say that any merges still running after this time will still run to completion, so they are not wasted.", "url": "https://github.com/apache/lucene-solr/pull/1155#discussion_r373008002", "createdAt": "2020-01-30T15:13:55Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig.java", "diffHunk": "@@ -484,6 +487,23 @@ public IndexWriterConfig setCommitOnClose(boolean commitOnClose) {\n     return this;\n   }\n \n+  /**\n+   * Expert: sets the amount of time to wait for merges returned by MergePolicy.findCommitMerges(...).\n+   * If this time is reached, we proceed with the commit based on segments merged up to that point.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdbf425d561e7905f3f273b6558c2f9bae6cf8a5"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcyMDYzMg==", "bodyText": "Done", "url": "https://github.com/apache/lucene-solr/pull/1155#discussion_r373720632", "createdAt": "2020-01-31T22:53:45Z", "author": {"login": "msfroh"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig.java", "diffHunk": "@@ -484,6 +487,23 @@ public IndexWriterConfig setCommitOnClose(boolean commitOnClose) {\n     return this;\n   }\n \n+  /**\n+   * Expert: sets the amount of time to wait for merges returned by MergePolicy.findCommitMerges(...).\n+   * If this time is reached, we proceed with the commit based on segments merged up to that point.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAwODAwMg=="}, "originalCommit": {"oid": "bdbf425d561e7905f3f273b6558c2f9bae6cf8a5"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNjM1OTYzOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNToxNToyMFrOFjuqJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMjo1MzozOVrOFkaGFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAwODkzNQ==", "bodyText": "This is no longer true?  We will just wrap up the commit w/ those merges that did finish, and let the still running merges finish to completion?", "url": "https://github.com/apache/lucene-solr/pull/1155#discussion_r373008935", "createdAt": "2020-01-30T15:15:20Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig.java", "diffHunk": "@@ -480,6 +488,22 @@ public String getSoftDeletesField() {\n     return softDeletesField;\n   }\n \n+  /**\n+   * Expert: return the amount of time to wait for merges returned by by MergePolicy.findCommitMerges(...).\n+   * If this time is reached, those merges will be aborted and we will wait again. If this time limit is reached again,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdbf425d561e7905f3f273b6558c2f9bae6cf8a5"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcyMDU5OQ==", "bodyText": "Fixed!", "url": "https://github.com/apache/lucene-solr/pull/1155#discussion_r373720599", "createdAt": "2020-01-31T22:53:39Z", "author": {"login": "msfroh"}, "path": "lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig.java", "diffHunk": "@@ -480,6 +488,22 @@ public String getSoftDeletesField() {\n     return softDeletesField;\n   }\n \n+  /**\n+   * Expert: return the amount of time to wait for merges returned by by MergePolicy.findCommitMerges(...).\n+   * If this time is reached, those merges will be aborted and we will wait again. If this time limit is reached again,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAwODkzNQ=="}, "originalCommit": {"oid": "bdbf425d561e7905f3f273b6558c2f9bae6cf8a5"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNjM2MjUzOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/MergePolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNToxNjowMlrOFjur9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMjo0NjowOVrOFkZ-BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAwOTM5Ng==", "bodyText": "What is isMergingSegment here?", "url": "https://github.com/apache/lucene-solr/pull/1155#discussion_r373009396", "createdAt": "2020-01-30T15:16:02Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/MergePolicy.java", "diffHunk": "@@ -526,6 +526,19 @@ public abstract MergeSpecification findForcedMerges(\n   public abstract MergeSpecification findForcedDeletesMerges(\n       SegmentInfos segmentInfos, MergeContext mergeContext) throws IOException;\n \n+  /**\n+   * Identifies merges that we want to execute (synchronously) on commit. By default, do not synchronously merge on commit.\n+   *\n+   * Implementers of this method should use isMergingSegment to exclude any already-merging segments from the returned", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdbf425d561e7905f3f273b6558c2f9bae6cf8a5"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxODUzMw==", "bodyText": "Oops... that's from an earlier implementation, before I realized that MergeContext provides information on merging segments.", "url": "https://github.com/apache/lucene-solr/pull/1155#discussion_r373718533", "createdAt": "2020-01-31T22:46:09Z", "author": {"login": "msfroh"}, "path": "lucene/core/src/java/org/apache/lucene/index/MergePolicy.java", "diffHunk": "@@ -526,6 +526,19 @@ public abstract MergeSpecification findForcedMerges(\n   public abstract MergeSpecification findForcedDeletesMerges(\n       SegmentInfos segmentInfos, MergeContext mergeContext) throws IOException;\n \n+  /**\n+   * Identifies merges that we want to execute (synchronously) on commit. By default, do not synchronously merge on commit.\n+   *\n+   * Implementers of this method should use isMergingSegment to exclude any already-merging segments from the returned", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAwOTM5Ng=="}, "originalCommit": {"oid": "bdbf425d561e7905f3f273b6558c2f9bae6cf8a5"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNjM3MjI5OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/MergePolicy.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNToxODoyMFrOFjux4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMDoxOTozNVrOFkbLuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAxMDkxNA==", "bodyText": "Is this true?  Or will IW (silently) disregard that requested merge?", "url": "https://github.com/apache/lucene-solr/pull/1155#discussion_r373010914", "createdAt": "2020-01-30T15:18:20Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/MergePolicy.java", "diffHunk": "@@ -526,6 +526,19 @@ public abstract MergeSpecification findForcedMerges(\n   public abstract MergeSpecification findForcedDeletesMerges(\n       SegmentInfos segmentInfos, MergeContext mergeContext) throws IOException;\n \n+  /**\n+   * Identifies merges that we want to execute (synchronously) on commit. By default, do not synchronously merge on commit.\n+   *\n+   * Implementers of this method should use isMergingSegment to exclude any already-merging segments from the returned\n+   * {@link MergeSpecification}. If a segment already registered in a merge is returned, then the commit will fail.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdbf425d561e7905f3f273b6558c2f9bae6cf8a5"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxODEwMQ==", "bodyText": "The code in this PR throws an exception if IW fails to register the merge:\nif (registerMerge(trackedMerge) == false) {\n  throw new IllegalStateException(\"MergePolicy \" + config.getMergePolicy().getClass() +\n      \" returned merging segments from findCommitMerges\");\n}\n\nI suppose we could silently disregard the merge if we remember to count down the latch for the merge that fails to register.\nWhat would be less surprising to users? Explosive failure if an invalid MergeSpecification is returned or letting the commit happen without trying to merge? I lean slightly toward explosive failure (with what I hope is a clear explanation), but I'm happy to write it either way.", "url": "https://github.com/apache/lucene-solr/pull/1155#discussion_r373718101", "createdAt": "2020-01-31T22:44:32Z", "author": {"login": "msfroh"}, "path": "lucene/core/src/java/org/apache/lucene/index/MergePolicy.java", "diffHunk": "@@ -526,6 +526,19 @@ public abstract MergeSpecification findForcedMerges(\n   public abstract MergeSpecification findForcedDeletesMerges(\n       SegmentInfos segmentInfos, MergeContext mergeContext) throws IOException;\n \n+  /**\n+   * Identifies merges that we want to execute (synchronously) on commit. By default, do not synchronously merge on commit.\n+   *\n+   * Implementers of this method should use isMergingSegment to exclude any already-merging segments from the returned\n+   * {@link MergeSpecification}. If a segment already registered in a merge is returned, then the commit will fail.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAxMDkxNA=="}, "originalCommit": {"oid": "bdbf425d561e7905f3f273b6558c2f9bae6cf8a5"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzczODQyNQ==", "bodyText": "OK I agree to explosive failure!  Less trappy.", "url": "https://github.com/apache/lucene-solr/pull/1155#discussion_r373738425", "createdAt": "2020-02-01T00:19:35Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/MergePolicy.java", "diffHunk": "@@ -526,6 +526,19 @@ public abstract MergeSpecification findForcedMerges(\n   public abstract MergeSpecification findForcedDeletesMerges(\n       SegmentInfos segmentInfos, MergeContext mergeContext) throws IOException;\n \n+  /**\n+   * Identifies merges that we want to execute (synchronously) on commit. By default, do not synchronously merge on commit.\n+   *\n+   * Implementers of this method should use isMergingSegment to exclude any already-merging segments from the returned\n+   * {@link MergeSpecification}. If a segment already registered in a merge is returned, then the commit will fail.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAxMDkxNA=="}, "originalCommit": {"oid": "bdbf425d561e7905f3f273b6558c2f9bae6cf8a5"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDk1NzE3OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriterEvents.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMDoyMTo0NFrOFkbM-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMDoyMTo0NFrOFkbM-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzczODc0NA==", "bodyText": "Can you add @lucene.experimental here?  That reserves the right to make breaking changes even on feature releases ...", "url": "https://github.com/apache/lucene-solr/pull/1155#discussion_r373738744", "createdAt": "2020-02-01T00:21:44Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriterEvents.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+\n+package org.apache.lucene.index;\n+\n+/**\n+ * Callback interface to signal various actions taken by IndexWriter.\n+ */\n+public interface IndexWriterEvents {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ae6df3b19999e012fcb72460bf12edc23a10427"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDk1NzgyOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/MergePolicy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMDoyMjoyOFrOFkbNVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMDoyMjoyOFrOFkbNVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzczODgzOA==", "bodyText": "Can you say what exception will be thrown in that case (or add an @throws, below)?", "url": "https://github.com/apache/lucene-solr/pull/1155#discussion_r373738838", "createdAt": "2020-02-01T00:22:28Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/MergePolicy.java", "diffHunk": "@@ -526,6 +526,19 @@ public abstract MergeSpecification findForcedMerges(\n   public abstract MergeSpecification findForcedDeletesMerges(\n       SegmentInfos segmentInfos, MergeContext mergeContext) throws IOException;\n \n+  /**\n+   * Identifies merges that we want to execute (synchronously) on commit. By default, do not synchronously merge on commit.\n+   *\n+   * If a returned {@link OneMerge} includes a segment already included in a registered merge, then the commit will fail.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ae6df3b19999e012fcb72460bf12edc23a10427"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDk1ODU2OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/MergePolicy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMDoyMzowNVrOFkbNwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMDoyMzowNVrOFkbNwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzczODk0NA==", "bodyText": "Hmm, maybe improve this (it's not an IndexWriter) to say the merge policy may use this to find already merging segments?", "url": "https://github.com/apache/lucene-solr/pull/1155#discussion_r373738944", "createdAt": "2020-02-01T00:23:05Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/MergePolicy.java", "diffHunk": "@@ -526,6 +526,19 @@ public abstract MergeSpecification findForcedMerges(\n   public abstract MergeSpecification findForcedDeletesMerges(\n       SegmentInfos segmentInfos, MergeContext mergeContext) throws IOException;\n \n+  /**\n+   * Identifies merges that we want to execute (synchronously) on commit. By default, do not synchronously merge on commit.\n+   *\n+   * If a returned {@link OneMerge} includes a segment already included in a registered merge, then the commit will fail.\n+   * Use {@link MergeContext#getMergingSegments()} to determine which segments are currently registered to merge.\n+   *\n+   * @param segmentInfos the total set of segments in the index (while preparing the commit)\n+   * @param mergeContext the IndexWriter to find the merges on", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ae6df3b19999e012fcb72460bf12edc23a10427"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDk1OTMyOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/MergePolicy.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMDoyMzo1N1rOFkbOSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMTowNDozMFrOFlox-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzczOTA4MQ==", "bodyText": "Can you describe a bit more?  E.g. explain that any merges returned here which then finish within the allotted time will be reflected in the commit, so that the number of segments in the commit point may be decreased?", "url": "https://github.com/apache/lucene-solr/pull/1155#discussion_r373739081", "createdAt": "2020-02-01T00:23:57Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/MergePolicy.java", "diffHunk": "@@ -526,6 +526,19 @@ public abstract MergeSpecification findForcedMerges(\n   public abstract MergeSpecification findForcedDeletesMerges(\n       SegmentInfos segmentInfos, MergeContext mergeContext) throws IOException;\n \n+  /**\n+   * Identifies merges that we want to execute (synchronously) on commit. By default, do not synchronously merge on commit.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ae6df3b19999e012fcb72460bf12edc23a10427"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ0NTI4NA==", "bodyText": "While updating the comments here, it occurred to me that if we want to leverage this same method in future to trigger a merge on NRT refresh, would it make sense to call it e.g. findFlushMerges or findFullFlushMerges instead?", "url": "https://github.com/apache/lucene-solr/pull/1155#discussion_r374445284", "createdAt": "2020-02-04T02:25:50Z", "author": {"login": "msfroh"}, "path": "lucene/core/src/java/org/apache/lucene/index/MergePolicy.java", "diffHunk": "@@ -526,6 +526,19 @@ public abstract MergeSpecification findForcedMerges(\n   public abstract MergeSpecification findForcedDeletesMerges(\n       SegmentInfos segmentInfos, MergeContext mergeContext) throws IOException;\n \n+  /**\n+   * Identifies merges that we want to execute (synchronously) on commit. By default, do not synchronously merge on commit.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzczOTA4MQ=="}, "originalCommit": {"oid": "4ae6df3b19999e012fcb72460bf12edc23a10427"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY5NzU0NA==", "bodyText": "Good thinking!  +1 for findFullFlushMerges, to make it clear it's a FULL flush (commit or refresh) and not an ordinary flush e.g. when the in-memory segments are taking too much memory and some are flushed.\nAnd then I guess the method could look at MergeTrigger to differentiate whether it's a commit or a refresh?", "url": "https://github.com/apache/lucene-solr/pull/1155#discussion_r374697544", "createdAt": "2020-02-04T14:21:38Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/MergePolicy.java", "diffHunk": "@@ -526,6 +526,19 @@ public abstract MergeSpecification findForcedMerges(\n   public abstract MergeSpecification findForcedDeletesMerges(\n       SegmentInfos segmentInfos, MergeContext mergeContext) throws IOException;\n \n+  /**\n+   * Identifies merges that we want to execute (synchronously) on commit. By default, do not synchronously merge on commit.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzczOTA4MQ=="}, "originalCommit": {"oid": "4ae6df3b19999e012fcb72460bf12edc23a10427"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAwOTc4Nw==", "bodyText": "Renamed in latest commit and added a new MergeTrigger.\nPassing the MergeTrigger to the MergeScheduler got me thinking that it might be possible to raise the priority of these full-flush merges, though it would be easier to manage that in the call to registerMerge, which could insert them at the front of the pending merge queue. I think that's beyond the scope of this change, but it could make for an interesting follow-up.", "url": "https://github.com/apache/lucene-solr/pull/1155#discussion_r375009787", "createdAt": "2020-02-05T01:04:30Z", "author": {"login": "msfroh"}, "path": "lucene/core/src/java/org/apache/lucene/index/MergePolicy.java", "diffHunk": "@@ -526,6 +526,19 @@ public abstract MergeSpecification findForcedMerges(\n   public abstract MergeSpecification findForcedDeletesMerges(\n       SegmentInfos segmentInfos, MergeContext mergeContext) throws IOException;\n \n+  /**\n+   * Identifies merges that we want to execute (synchronously) on commit. By default, do not synchronously merge on commit.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzczOTA4MQ=="}, "originalCommit": {"oid": "4ae6df3b19999e012fcb72460bf12edc23a10427"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODg0MTg1OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriterEvents.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOToxMDowM1rOFyxqdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOToxMDowM1rOFyxqdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4NjgwNQ==", "bodyText": "I am not really happy with this interface. First and foremost it's only partially used in this PR. I also think it doesn't belong here but rather into a merge policy? I think IW and merge lifecycle should not be tightly coupled. Can we achieve the same with an interface a MP can provide to the IW rather than setting it on the IW config. A pull model should be used here instead IMO.", "url": "https://github.com/apache/lucene-solr/pull/1155#discussion_r388786805", "createdAt": "2020-03-06T09:10:03Z", "author": {"login": "s1monw"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriterEvents.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+\n+package org.apache.lucene.index;\n+\n+/**\n+ * Callback interface to signal various actions taken by IndexWriter.\n+ *\n+ * @lucene.experimental\n+ */\n+public interface IndexWriterEvents {\n+  /**\n+   * A default implementation that ignores all events.\n+   */\n+  IndexWriterEvents NULL_EVENTS = new IndexWriterEvents() {\n+    @Override\n+    public void beginMergeOnCommit() { }\n+\n+    @Override\n+    public void finishMergeOnCommit() { }\n+\n+    @Override\n+    public void abandonedMergesOnCommit(int abandonedCount) { }\n+  };\n+\n+  /**\n+   * Signals the start of waiting for a merge on commit, returned from\n+   * {@link MergePolicy#findFullFlushMerges(MergeTrigger, SegmentInfos, MergePolicy.MergeContext)}.\n+   */\n+  void beginMergeOnCommit();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c04cfa875be6cd91fe0af69168a23fd459831ed6"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 946, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}