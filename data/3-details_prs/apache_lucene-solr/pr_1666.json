{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3NzM2MTYz", "number": 1666, "title": "SOLR-14155: Load all other SolrCore plugins from packages", "bodyText": "WIP PR, do not commit", "createdAt": "2020-07-11T07:52:32Z", "url": "https://github.com/apache/lucene-solr/pull/1666", "merged": true, "mergeCommit": {"oid": "9466af576a4a9d3cd750438123063928329fbb46"}, "closed": true, "closedAt": "2021-01-13T11:28:03Z", "author": {"login": "noblepaul"}, "timelineItems": {"totalCount": 52, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABczzbKlgH2gAyNDQ3NzM2MTYzOjU5MDUzNDE2ZmNmMjExNTMwNWM3NjhlMTJmN2RiNDVmY2UwNDI1NjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdvvHtVAFqTU2NzE4NTcwMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "59053416fcf2115305c768e12f7db45fce042565", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/59053416fcf2115305c768e12f7db45fce042565", "committedDate": "2020-07-11T07:51:03Z", "message": "SOLR-14155: Load all other SolrCore plugins from packages"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2ODQxNDU2", "url": "https://github.com/apache/lucene-solr/pull/1666#pullrequestreview-446841456", "createdAt": "2020-07-12T02:41:07Z", "commit": {"oid": "59053416fcf2115305c768e12f7db45fce042565"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQwMjo0MTowOFrOGwQsrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQwMzoyNjowM1rOGwQ45g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI1ODQxNA==", "bodyText": "Very much needs a javadoc line saying what it is that is being reloaded.  My initial and incorrect thought was the CoreContainer itself.", "url": "https://github.com/apache/lucene-solr/pull/1666#discussion_r453258414", "createdAt": "2020-07-12T02:41:08Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/core/CoreContainer.java", "diffHunk": "@@ -1588,20 +1576,28 @@ private CoreDescriptor reloadCoreDescriptor(CoreDescriptor oldDesc) {\n     return ret;\n   }\n \n+  public void reload(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59053416fcf2115305c768e12f7db45fce042565"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI1ODQ1NQ==", "bodyText": "This is new.  Can you explain why this new ID is needed?", "url": "https://github.com/apache/lucene-solr/pull/1666#discussion_r453258455", "createdAt": "2020-07-12T02:41:52Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/core/CoreContainer.java", "diffHunk": "@@ -1588,20 +1576,28 @@ private CoreDescriptor reloadCoreDescriptor(CoreDescriptor oldDesc) {\n     return ret;\n   }\n \n+  public void reload(String name) {\n+    reload(name, null);\n+  }\n   /**\n    * Recreates a SolrCore.\n    * While the new core is loading, requests will continue to be dispatched to\n    * and processed by the old core\n    *\n    * @param name the name of the SolrCore to reload\n+   * @param coreId The unique identifier of the core", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59053416fcf2115305c768e12f7db45fce042565"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI1ODY1Mg==", "bodyText": "Is a null name even valid?  Maybe throw IllegalArgumentException if not instead?", "url": "https://github.com/apache/lucene-solr/pull/1666#discussion_r453258652", "createdAt": "2020-07-12T02:45:01Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/core/PluginInfo.java", "diffHunk": "@@ -66,27 +66,39 @@ public PluginInfo(String type, Map<String, String> attrs, @SuppressWarnings({\"ra\n    * This checks if it is a package name prefixed classname.\n    * the return value has first = package name and second = class name\n    */\n-  public static Pair<String,String > parseClassName(String name) {\n-    String pkgName = null;\n-    String className = name;\n-    if (name != null) {\n+  public static CName parseClassName(String name) {\n+    return new CName(name);\n+  }\n+\n+  public static class CName {\n+    public final String pkg;\n+    public final String className;\n+\n+    public CName(String name) {\n+      if (name == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59053416fcf2115305c768e12f7db45fce042565"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI1ODgwNw==", "bodyText": "The code shows null can be returned but javadoc says \"latest\".", "url": "https://github.com/apache/lucene-solr/pull/1666#discussion_r453258807", "createdAt": "2020-07-12T02:47:17Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/core/SolrConfig.java", "diffHunk": "@@ -971,6 +974,21 @@ public RequestParams getRequestParams() {\n     return requestParams;\n   }\n \n+  /**\n+   * The version of package that should be loaded for a given package name\n+   * This information is stored in the params.json in the same configset\n+   * If params.json is absent or there is no corresponding version specified for a given package,\n+   * the latest is used", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59053416fcf2115305c768e12f7db45fce042565"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI1OTAwNw==", "bodyText": "If this ID is completely internal to the node (never passed in as a parameter), then can't we just use some AtomicLong?", "url": "https://github.com/apache/lucene-solr/pull/1666#discussion_r453259007", "createdAt": "2020-07-12T02:50:04Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/core/SolrCore.java", "diffHunk": "@@ -191,6 +175,11 @@\n \n   private String name;\n   private String logid; // used to show what name is set\n+  /**\n+   * A unique id to differentiate multiple instances of the same core\n+   * If we reload a core, the name remains same , but the id will be new\n+   */\n+  public final UUID uniqueId = UUID.randomUUID();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59053416fcf2115305c768e12f7db45fce042565"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI1OTE2NQ==", "bodyText": "Can the createHolder method be declared in such a way (with generics) that the cast here isn't needed?", "url": "https://github.com/apache/lucene-solr/pull/1666#discussion_r453259165", "createdAt": "2020-07-12T02:51:59Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/core/SolrCore.java", "diffHunk": "@@ -626,25 +615,26 @@ public void deleteNonSnapshotIndexFiles(String indexDirPath) throws IOException\n   }\n \n \n+  @SuppressWarnings(\"unchecked\")\n   private void initListeners() {\n     final Class<SolrEventListener> clazz = SolrEventListener.class;\n     final String label = \"Event Listener\";\n     for (PluginInfo info : solrConfig.getPluginInfos(SolrEventListener.class.getName())) {\n       final String event = info.attributes.get(\"event\");\n       if (\"firstSearcher\".equals(event)) {\n-        SolrEventListener obj = createInitInstance(info, clazz, label, null);\n+        PluginHolder<SolrEventListener> obj = (PluginHolder<SolrEventListener>)PackagePluginHolder.createHolder(info, this, SolrEventListener.class, label);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59053416fcf2115305c768e12f7db45fce042565"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI1OTU0Mw==", "bodyText": "Maybe it's okay but the obj.get() worries me a little.  As a reader of the code here at the caller, it seems suspicious to evaluate a Supplier on a debug log statement.  Maybe it's not necessarily \"safe\" (lazy) and it should only be fetched if really needed.  For a log statement, lets just pass \"obj\" (PluginHolder) and add a decent toString to the PluginHolder?", "url": "https://github.com/apache/lucene-solr/pull/1666#discussion_r453259543", "createdAt": "2020-07-12T02:58:20Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/core/SolrCore.java", "diffHunk": "@@ -626,25 +615,26 @@ public void deleteNonSnapshotIndexFiles(String indexDirPath) throws IOException\n   }\n \n \n+  @SuppressWarnings(\"unchecked\")\n   private void initListeners() {\n     final Class<SolrEventListener> clazz = SolrEventListener.class;\n     final String label = \"Event Listener\";\n     for (PluginInfo info : solrConfig.getPluginInfos(SolrEventListener.class.getName())) {\n       final String event = info.attributes.get(\"event\");\n       if (\"firstSearcher\".equals(event)) {\n-        SolrEventListener obj = createInitInstance(info, clazz, label, null);\n+        PluginHolder<SolrEventListener> obj = (PluginHolder<SolrEventListener>)PackagePluginHolder.createHolder(info, this, SolrEventListener.class, label);\n         firstSearcherListeners.add(obj);\n-        log.debug(\"[{}] Added SolrEventListener for firstSearcher: [{}]\", logid, obj);\n+        log.debug(\"[{}] Added SolrEventListener for firstSearcher: [{}]\", logid, obj.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59053416fcf2115305c768e12f7db45fce042565"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI2MDAyMQ==", "bodyText": "Can we use a PluginBag instead of List, which is shorter and more consistent with how SolrCore tracks some plugins like SearchComponents, URPs, and RequestHandlers?", "url": "https://github.com/apache/lucene-solr/pull/1666#discussion_r453260021", "createdAt": "2020-07-12T03:05:10Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/core/SolrCore.java", "diffHunk": "@@ -626,25 +615,26 @@ public void deleteNonSnapshotIndexFiles(String indexDirPath) throws IOException\n   }\n \n \n+  @SuppressWarnings(\"unchecked\")\n   private void initListeners() {\n     final Class<SolrEventListener> clazz = SolrEventListener.class;\n     final String label = \"Event Listener\";\n     for (PluginInfo info : solrConfig.getPluginInfos(SolrEventListener.class.getName())) {\n       final String event = info.attributes.get(\"event\");\n       if (\"firstSearcher\".equals(event)) {\n-        SolrEventListener obj = createInitInstance(info, clazz, label, null);\n+        PluginHolder<SolrEventListener> obj = (PluginHolder<SolrEventListener>)PackagePluginHolder.createHolder(info, this, SolrEventListener.class, label);\n         firstSearcherListeners.add(obj);\n-        log.debug(\"[{}] Added SolrEventListener for firstSearcher: [{}]\", logid, obj);\n+        log.debug(\"[{}] Added SolrEventListener for firstSearcher: [{}]\", logid, obj.get());\n       } else if (\"newSearcher\".equals(event)) {\n-        SolrEventListener obj = createInitInstance(info, clazz, label, null);\n+        PluginHolder<SolrEventListener> obj = (PluginHolder<SolrEventListener>)PackagePluginHolder.createHolder(info, this, SolrEventListener.class, label);\n         newSearcherListeners.add(obj);\n-        log.debug(\"[{}] Added SolrEventListener for newSearcher: [{}]\", logid, obj);\n+        log.debug(\"[{}] Added SolrEventListener for newSearcher: [{}]\", logid, obj.get());\n       }\n     }\n   }\n \n-  final List<SolrEventListener> firstSearcherListeners = new ArrayList<>();\n-  final List<SolrEventListener> newSearcherListeners = new ArrayList<>();\n+  final List<PluginHolder<SolrEventListener>> firstSearcherListeners = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59053416fcf2115305c768e12f7db45fce042565"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI2MDIxNQ==", "bodyText": "Moving this constant to SolrConfig seems odd.  If the constant is specific to packages/versions then I think it belongs in the \"pkg\" Java package somewhere.", "url": "https://github.com/apache/lucene-solr/pull/1666#discussion_r453260215", "createdAt": "2020-07-12T03:08:01Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/packagemanager/PackageManager.java", "diffHunk": "@@ -250,7 +250,7 @@ private boolean deployPackage(SolrPackageInstance packageInstance, boolean pegTo\n       // Set the package version in the collection's parameters\n       try {\n         SolrCLI.postJsonToSolr(solrClient, PackageUtils.getCollectionParamsPath(collection),\n-            \"{set:{PKG_VERSIONS:{\" + packageInstance.name+\": '\" + (pegToLatest? PackagePluginHolder.LATEST: packageInstance.version)+\"'}}}\");\n+            \"{set:{PKG_VERSIONS:{\" + packageInstance.name+\": '\" + (pegToLatest? SolrConfig.LATEST: packageInstance.version)+\"'}}}\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59053416fcf2115305c768e12f7db45fce042565"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI2MDU1OQ==", "bodyText": "needs a comment as to what the \"String\" key is", "url": "https://github.com/apache/lucene-solr/pull/1666#discussion_r453260559", "createdAt": "2020-07-12T03:12:46Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/pkg/PackageListeners.java", "diffHunk": "@@ -96,15 +97,32 @@ private synchronized void invokeListeners(PackageLoader.Package pkg) {\n \n \n   public interface Listener {\n-    /**Name of the package or null to loisten to all package changes\n+    /**Name of the package or null to listen to all package changes\n      */\n     String packageName();\n \n     PluginInfo pluginInfo();\n \n-    void changed(PackageLoader.Package pkg);\n+    void changed(PackageLoader.Package pkg, Ctx ctx);\n \n     PackageLoader.Package.Version getPackageVersion();\n+    class Ctx {\n+      private Map<String, Runnable > runLater;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59053416fcf2115305c768e12f7db45fce042565"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI2MDkyNA==", "bodyText": "Woah; probably needs more thought.  When is \"later\" (after what)?  An Executor should probably be used.  Does this really need to be async?  Maybe \"sometimes\" (some Runnables) so maybe the supplier of the Runnable should handle it by using its own Executor.", "url": "https://github.com/apache/lucene-solr/pull/1666#discussion_r453260924", "createdAt": "2020-07-12T03:17:22Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/pkg/PackageListeners.java", "diffHunk": "@@ -96,15 +97,32 @@ private synchronized void invokeListeners(PackageLoader.Package pkg) {\n \n \n   public interface Listener {\n-    /**Name of the package or null to loisten to all package changes\n+    /**Name of the package or null to listen to all package changes\n      */\n     String packageName();\n \n     PluginInfo pluginInfo();\n \n-    void changed(PackageLoader.Package pkg);\n+    void changed(PackageLoader.Package pkg, Ctx ctx);\n \n     PackageLoader.Package.Version getPackageVersion();\n+    class Ctx {\n+      private Map<String, Runnable > runLater;\n+      public void runLater(String name,  Runnable runnable  ){\n+        if(runLater == null) runLater = new LinkedHashMap<>();\n+        runLater.put(name, runnable);\n+      }\n+      private void runLaterTasks(){\n+        if(runLater == null) return;\n+        new Thread(() -> runLater.forEach((s, runnable) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59053416fcf2115305c768e12f7db45fce042565"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI2MTM3Mg==", "bodyText": "Why lazy-evaluate the class?  In the issue description, the solrconfig caches were not listed as hot-reloadable, and so I'm surprised to see changes here.", "url": "https://github.com/apache/lucene-solr/pull/1666#discussion_r453261372", "createdAt": "2020-07-12T03:24:01Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/search/CacheConfig.java", "diffHunk": "@@ -64,7 +67,7 @@ public CacheConfig() {}\n \n   @SuppressWarnings({\"rawtypes\"})\n   public CacheConfig(Class<? extends SolrCache> clazz, Map<String,String> args, CacheRegenerator regenerator) {\n-    this.clazz = clazz;\n+    this.clazz = () -> clazz;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59053416fcf2115305c768e12f7db45fce042565"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI2MTQ4Nw==", "bodyText": "you didn't add casts so this annotation doesn't seem necessary", "url": "https://github.com/apache/lucene-solr/pull/1666#discussion_r453261487", "createdAt": "2020-07-12T03:25:27Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/update/UpdateHandler.java", "diffHunk": "@@ -48,25 +46,26 @@\n   protected final SchemaField idField;\n   protected final FieldType idFieldType;\n \n-  protected Vector<SolrEventListener> commitCallbacks = new Vector<>();\n-  protected Vector<SolrEventListener> softCommitCallbacks = new Vector<>();\n-  protected Vector<SolrEventListener> optimizeCallbacks = new Vector<>();\n+  protected Vector<PluginHolder<SolrEventListener>> commitCallbacks = new Vector<>();\n+  protected Vector<PluginHolder<SolrEventListener>> softCommitCallbacks = new Vector<>();\n+  protected Vector<PluginHolder<SolrEventListener>> optimizeCallbacks = new Vector<>();\n \n   protected final UpdateLog ulog;\n \n   protected SolrMetricsContext solrMetricsContext;\n \n+  @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59053416fcf2115305c768e12f7db45fce042565"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI2MTU0Mg==", "bodyText": "you may want to auto-format the code in this method; I see some extra spaces and inconsistent use of spaces", "url": "https://github.com/apache/lucene-solr/pull/1666#discussion_r453261542", "createdAt": "2020-07-12T03:26:03Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/update/UpdateHandler.java", "diffHunk": "@@ -77,33 +76,35 @@ private void parseEventListeners() {\n    * Call the {@link SolrCoreAware#inform(SolrCore)} on all the applicable registered listeners.\n    */\n   public void informEventListeners(SolrCore core) {\n-    for (SolrEventListener listener: commitCallbacks) {\n-      if (listener instanceof SolrCoreAware) {\n-        ((SolrCoreAware) listener).inform(core);\n+    for (PluginHolder<SolrEventListener>  listener: commitCallbacks) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59053416fcf2115305c768e12f7db45fce042565"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae2dfc69303191a0d030770eaa39a0a6f4b62f13", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/ae2dfc69303191a0d030770eaa39a0a6f4b62f13", "committedDate": "2020-07-12T10:01:37Z", "message": "more review commnets incorporated"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc3599b15ad1545a8801c12ed13b2c8480f99fb3", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/fc3599b15ad1545a8801c12ed13b2c8480f99fb3", "committedDate": "2020-07-12T12:04:22Z", "message": "precommit errs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90516874d8e5621c032a779b7d0a853bf13ee2c4", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/90516874d8e5621c032a779b7d0a853bf13ee2c4", "committedDate": "2020-07-12T12:14:26Z", "message": "use proper generics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9bc2221d59e328068586486d70ef6604ee994864", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/9bc2221d59e328068586486d70ef6604ee994864", "committedDate": "2020-07-12T12:21:54Z", "message": "use Long instead of UUID"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5398927056efb4308c0408d578ed9de47bc9bec", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/f5398927056efb4308c0408d578ed9de47bc9bec", "committedDate": "2020-07-13T01:47:54Z", "message": "precommit errs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f764ca9af0fd1b98c059db5b13467517b2d4848", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/3f764ca9af0fd1b98c059db5b13467517b2d4848", "committedDate": "2020-07-13T01:58:19Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a874bfc5e517234b66b6a0630b6e898bbfb9969d", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/a874bfc5e517234b66b6a0630b6e898bbfb9969d", "committedDate": "2020-07-13T02:06:19Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d50b47010de970b932c83a524bcb19537903279", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/5d50b47010de970b932c83a524bcb19537903279", "committedDate": "2020-07-13T15:38:57Z", "message": "bug fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d6d206fcd846859c01be3fe31b552445ab1c71f", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/0d6d206fcd846859c01be3fe31b552445ab1c71f", "committedDate": "2020-07-15T00:40:30Z", "message": "moved some methods to SRL"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74f51561f614834bfd34272f626108dfefd9871f", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/74f51561f614834bfd34272f626108dfefd9871f", "committedDate": "2020-07-15T00:41:05Z", "message": "moved some methods to SRL"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84169b9704292f48876c39ccb9fe1e360707c50f", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/84169b9704292f48876c39ccb9fe1e360707c50f", "committedDate": "2020-07-15T04:32:59Z", "message": "refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65cbb8c017d5d11eba2f28951a77a1f2617b79f2", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/65cbb8c017d5d11eba2f28951a77a1f2617b79f2", "committedDate": "2020-07-16T02:04:44Z", "message": "more refactoring and reviw comments implemented"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "785db2a88ee1560adb4a6155aacc21add85edbba", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/785db2a88ee1560adb4a6155aacc21add85edbba", "committedDate": "2020-07-16T02:05:27Z", "message": "more refactoring and reviw comments implemented"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14f9ed6c68f12be2e4d446b9a6bb8985b6b0b246", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/14f9ed6c68f12be2e4d446b9a6bb8985b6b0b246", "committedDate": "2020-07-16T02:05:41Z", "message": "more refactoring and reviw comments implemented"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "871acb6f791bf78f1772a020bd41e015775f8489", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/871acb6f791bf78f1772a020bd41e015775f8489", "committedDate": "2020-07-16T06:27:02Z", "message": "merging w/ master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8609111be43142c38f77b843d585fb8fcc218a1", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/e8609111be43142c38f77b843d585fb8fcc218a1", "committedDate": "2020-07-16T06:29:26Z", "message": "merging w/ master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eef0bf5cc255ab945c444e4ec2e1d6c7792a611b", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/eef0bf5cc255ab945c444e4ec2e1d6c7792a611b", "committedDate": "2020-07-16T06:33:59Z", "message": "merging w/ master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6bc50e9ebfb76c291d5b369d708f93ec02355a34", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/6bc50e9ebfb76c291d5b369d708f93ec02355a34", "committedDate": "2020-07-16T06:36:52Z", "message": "Merge branch 'master' into jira/solr14155-1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67ebf1a1fed35247836b872877a4e04f3f11f2c1", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/67ebf1a1fed35247836b872877a4e04f3f11f2c1", "committedDate": "2020-07-16T09:04:08Z", "message": "merge errs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1be6c6c340420d9dd340d0fb1f7a56984805305", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/a1be6c6c340420d9dd340d0fb1f7a56984805305", "committedDate": "2020-07-16T09:05:16Z", "message": "javadocs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "407422803ee49aec91b8c8df1989ebc80ffabe09", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/407422803ee49aec91b8c8df1989ebc80ffabe09", "committedDate": "2020-07-16T09:06:39Z", "message": "merge errs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30dd62dbd4ff0faf6e17c38b75d40046bc8e4476", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/30dd62dbd4ff0faf6e17c38b75d40046bc8e4476", "committedDate": "2020-07-16T09:18:46Z", "message": "more cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44194f94d42787ac405bf3799c18276a95001083", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/44194f94d42787ac405bf3799c18276a95001083", "committedDate": "2020-07-16T09:28:12Z", "message": "more cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb067145259f1b0da8afcdfb8e13347c20cf376f", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/fb067145259f1b0da8afcdfb8e13347c20cf376f", "committedDate": "2020-07-16T09:31:14Z", "message": "more cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32554578e9abc7d7758338e08ba92313ae6364d2", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/32554578e9abc7d7758338e08ba92313ae6364d2", "committedDate": "2020-07-16T09:34:44Z", "message": "more cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c704a9a8c20eee5cf30fc69e7c6a0c7d2a8503e2", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/c704a9a8c20eee5cf30fc69e7c6a0c7d2a8503e2", "committedDate": "2020-07-16T14:04:43Z", "message": "more cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d4946a7984af647117ec61284980ea5760f69da", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/9d4946a7984af647117ec61284980ea5760f69da", "committedDate": "2020-07-16T14:53:36Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9888bc8522f1a682d5a7a114ce8fa8e6f3cce40f", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/9888bc8522f1a682d5a7a114ce8fa8e6f3cce40f", "committedDate": "2020-09-08T03:22:14Z", "message": "merging with master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "768c4f5d83ac4e48a2a25fbdbce5e317a00c582f", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/768c4f5d83ac4e48a2a25fbdbce5e317a00c582f", "committedDate": "2020-09-08T04:06:31Z", "message": "merging with master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecee4975ac3711b9379e6a51c76e591a824a62ba", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/ecee4975ac3711b9379e6a51c76e591a824a62ba", "committedDate": "2020-09-08T04:14:08Z", "message": "merging with master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f24116e7182570694f5e701bf1ebec247adaf6d", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/6f24116e7182570694f5e701bf1ebec247adaf6d", "committedDate": "2021-01-12T06:28:24Z", "message": "merging with trunk"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31080d809c0ee0f11581a3c5d9b1030afa1d6b4f", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/31080d809c0ee0f11581a3c5d9b1030afa1d6b4f", "committedDate": "2021-01-12T06:32:45Z", "message": "merging with trunk"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c292557b38718c3524e4edda67fd82937a9fdb0", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/8c292557b38718c3524e4edda67fd82937a9fdb0", "committedDate": "2021-01-12T06:34:42Z", "message": "merging with trunk"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d53e248a3f8636efe8bc36fc562e6635314698b5", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/d53e248a3f8636efe8bc36fc562e6635314698b5", "committedDate": "2021-01-12T06:39:33Z", "message": "merging with trunk"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19ec87312a89dc92efd6b160332596794c07b74c", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/19ec87312a89dc92efd6b160332596794c07b74c", "committedDate": "2021-01-12T06:53:24Z", "message": "unused imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e7ffac80443adc125f7f89089bbb8522fa13f68", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/6e7ffac80443adc125f7f89089bbb8522fa13f68", "committedDate": "2021-01-12T07:04:13Z", "message": "unused imports"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY2MDE0NjAz", "url": "https://github.com/apache/lucene-solr/pull/1666#pullrequestreview-566014603", "createdAt": "2021-01-12T07:59:59Z", "commit": {"oid": "6f24116e7182570694f5e701bf1ebec247adaf6d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwNzo1OTo1OVrOIR1pmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwNzo1OTo1OVrOIR1pmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTU3NTcwNg==", "bodyText": "NULL_DEREFERENCE:  object theVersion last assigned on line 84 could be null and is dereferenced at line 86.", "url": "https://github.com/apache/lucene-solr/pull/1666#discussion_r555575706", "createdAt": "2021-01-12T07:59:59Z", "author": {"login": "sonatype-lift"}, "path": "solr/core/src/java/org/apache/solr/pkg/PackageListeningClassLoader.java", "diffHunk": "@@ -61,18 +66,25 @@ public PackageListeningClassLoader(CoreContainer coreContainer,\n     @Override\n     public <T> T newInstance(String cname, Class<T> expectedType, String... subpackages) {\n         PluginInfo.ClassName cName = new PluginInfo.ClassName(cname);\n-        if(cName.pkg == null){\n-            return coreResourceLoader.newInstance(cname, expectedType, subpackages);\n+        if(cName.pkg == null) {\n+            return fallbackClassLoader.newInstance(cname, expectedType, subpackages);\n         } else {\n-            PackageLoader.Package.Version version = findPkgVersion(cName);\n+            PackageLoader.Package.Version version = findPackageVersion(cName, true);\n             return applyResourceLoaderAware(version, version.getLoader().newInstance(cName.className, expectedType, subpackages));\n \n         }\n     }\n \n-    private PackageLoader.Package.Version findPkgVersion(PluginInfo.ClassName cName) {\n+\n+    /**\n+     * This looks up for package and also listens for that package if required\n+     * @param cName The class name\n+     */\n+    public PackageLoader.Package.Version findPackageVersion(PluginInfo.ClassName cName, boolean registerListener) {\n         PackageLoader.Package.Version theVersion = coreContainer.getPackageLoader().getPackage(cName.pkg).getLatest(pkgVersionSupplier.apply(cName.pkg));\n-        packageVersions.put(cName.pkg, theVersion.getPkgVersion());\n+        if(registerListener) {\n+            packageVersions.put(cName.pkg, theVersion.getPkgVersion());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f24116e7182570694f5e701bf1ebec247adaf6d"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY2MDE0NjIw", "url": "https://github.com/apache/lucene-solr/pull/1666#pullrequestreview-566014620", "createdAt": "2021-01-12T08:00:01Z", "commit": {"oid": "6f24116e7182570694f5e701bf1ebec247adaf6d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwODowMDowMVrOIR1prA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwODowMDowMVrOIR1prA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTU3NTcyNA==", "bodyText": "THREAD_SAFETY_VIOLATION:  Unprotected write. Non-private method SolrCore(...) indirectly mutates container util.ObjectReleaseTracker.OBJECTS via call to Map.put(...) outside of synchronization.\nReporting because another access to the same memory occurs on a background thread, although this access may not.", "url": "https://github.com/apache/lucene-solr/pull/1666#discussion_r555575724", "createdAt": "2021-01-12T08:00:01Z", "author": {"login": "sonatype-lift"}, "path": "solr/core/src/java/org/apache/solr/core/SolrCore.java", "diffHunk": "@@ -927,7 +929,7 @@ private UpdateHandler createUpdateHandler(String className, UpdateHandler update\n \n   public SolrCore(CoreContainer coreContainer, CoreDescriptor cd, ConfigSet configSet) {\n     this(coreContainer, cd, configSet, null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f24116e7182570694f5e701bf1ebec247adaf6d"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY2MDE0NjM5", "url": "https://github.com/apache/lucene-solr/pull/1666#pullrequestreview-566014639", "createdAt": "2021-01-12T08:00:02Z", "commit": {"oid": "6f24116e7182570694f5e701bf1ebec247adaf6d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwODowMDowMlrOIR1pug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwODowMDowMlrOIR1pug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTU3NTczOA==", "bodyText": "THREAD_SAFETY_VIOLATION:  Unprotected write. Non-private method SolrCore.createStatsCache() indirectly mutates container core.SolrResourceLoader.classNameCache via call to Map.put(...) outside of synchronization.\nReporting because another access to the same memory occurs on a background thread, although this access may not.", "url": "https://github.com/apache/lucene-solr/pull/1666#discussion_r555575738", "createdAt": "2021-01-12T08:00:02Z", "author": {"login": "sonatype-lift"}, "path": "solr/core/src/java/org/apache/solr/core/SolrCore.java", "diffHunk": "@@ -1443,8 +1445,8 @@ public StatsCache createStatsCache() {\n     final StatsCache cache;\n     PluginInfo pluginInfo = solrConfig.getPluginInfo(StatsCache.class.getName());\n     if (pluginInfo != null && pluginInfo.className != null && pluginInfo.className.length() > 0) {\n-      cache = createInitInstance(pluginInfo, StatsCache.class, null,\n-          LocalStatsCache.class.getName());\n+      cache = resourceLoader.newInstance( pluginInfo, StatsCache.class, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f24116e7182570694f5e701bf1ebec247adaf6d"}, "originalPosition": 134}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY2MDE0NjU3", "url": "https://github.com/apache/lucene-solr/pull/1666#pullrequestreview-566014657", "createdAt": "2021-01-12T08:00:03Z", "commit": {"oid": "6f24116e7182570694f5e701bf1ebec247adaf6d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwODowMDowNFrOIR1pww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwODowMDowNFrOIR1pww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTU3NTc0Nw==", "bodyText": "THREAD_SAFETY_VIOLATION:  Read/Write race. Non-private method SolrCore.openNewSearcher(...) indirectly reads with synchronization from container core.SolrResourceLoader.classNameCache via call to Map.get(...). Potentially races with unsynchronized write in method SolrCore.initIndex(...).\nReporting because this access may occur on a background thread.", "url": "https://github.com/apache/lucene-solr/pull/1666#discussion_r555575747", "createdAt": "2021-01-12T08:00:04Z", "author": {"login": "sonatype-lift"}, "path": "solr/core/src/java/org/apache/solr/core/SolrCore.java", "diffHunk": "@@ -2134,12 +2136,12 @@ public IndexFingerprint getIndexFingerprint(SolrIndexSearcher searcher, LeafRead\n           newReader = currentReader;\n         }\n \n-        // for now, turn off caches if this is for a realtime reader \n+        // for now, turn off caches if this is for a realtime reader\n         // (caches take a little while to instantiate)\n         final boolean useCaches = !realtime;\n         final String newName = realtime ? \"realtime\" : \"main\";\n         tmp = new SolrIndexSearcher(this, newIndexDir, getLatestSchema(), newName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f24116e7182570694f5e701bf1ebec247adaf6d"}, "originalPosition": 197}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY2MDE0Njcw", "url": "https://github.com/apache/lucene-solr/pull/1666#pullrequestreview-566014670", "createdAt": "2021-01-12T08:00:05Z", "commit": {"oid": "6f24116e7182570694f5e701bf1ebec247adaf6d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwODowMDowNVrOIR1pyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwODowMDowNVrOIR1pyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTU3NTc1Mw==", "bodyText": "THREAD_SAFETY_VIOLATION:  Read/Write race. Non-private method SolrResourceLoader.findClass(...) indirectly reads without synchronization from this.coreReloadingClassLoader. Potentially races with write in method SolrResourceLoader.inform(...).\nReporting because another access to the same memory occurs on a background thread, although this access may not.", "url": "https://github.com/apache/lucene-solr/pull/1666#discussion_r555575753", "createdAt": "2021-01-12T08:00:05Z", "author": {"login": "sonatype-lift"}, "path": "solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java", "diffHunk": "@@ -834,6 +847,47 @@ public void close() throws IOException {\n   public List<SolrInfoBean> getInfoMBeans() {\n     return Collections.unmodifiableList(infoMBeans);\n   }\n+  /**\n+   * Load a class using an appropriate {@link SolrResourceLoader} depending of the package on that class\n+   * @param registerCoreReloadListener register a listener for the package and reload the core if the package is changed.\n+   *                                   Use this sparingly. This will result in core reloads across all the cores in\n+   *                                   all collections using this configset\n+   */\n+  public  <T> Class<? extends T> findClass( PluginInfo info, Class<T>  type, boolean registerCoreReloadListener) {\n+    if(info.cName.pkg == null) return findClass(info.className, type);\n+    return _classLookup(info,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f24116e7182570694f5e701bf1ebec247adaf6d"}, "originalPosition": 237}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY2MDE0Njg5", "url": "https://github.com/apache/lucene-solr/pull/1666#pullrequestreview-566014689", "createdAt": "2021-01-12T08:00:06Z", "commit": {"oid": "6f24116e7182570694f5e701bf1ebec247adaf6d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwODowMDowNlrOIR1p2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwODowMDowNlrOIR1p2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTU3NTc2OA==", "bodyText": "THREAD_SAFETY_VIOLATION:  Read/Write race. Non-private method SolrResourceLoader.inform(...) reads without synchronization from this.coreReloadingClassLoader. Potentially races with write in method SolrResourceLoader.inform(...).\nReporting because this access may occur on a background thread.", "url": "https://github.com/apache/lucene-solr/pull/1666#discussion_r555575768", "createdAt": "2021-01-12T08:00:06Z", "author": {"login": "sonatype-lift"}, "path": "solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java", "diffHunk": "@@ -654,6 +657,16 @@ public void inform(SolrCore core) {\n     this.config = core.getSolrConfig();\n     this.coreId = core.uniqueId;\n     this.coreContainer = core.getCoreContainer();\n+    SolrCore.Provider coreProvider = core.coreProvider;\n+\n+    this.coreReloadingClassLoader = new PackageListeningClassLoader(core.getCoreContainer(),\n+            this, s -> config.maxPackageVersion(s), null){\n+      @Override\n+      protected void doReloadAction(Ctx ctx) {\n+        coreProvider.reload();\n+      }\n+    };\n+    core.getPackageListeners().addListener(coreReloadingClassLoader, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f24116e7182570694f5e701bf1ebec247adaf6d"}, "originalPosition": 141}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY2MDE0NzAw", "url": "https://github.com/apache/lucene-solr/pull/1666#pullrequestreview-566014700", "createdAt": "2021-01-12T08:00:07Z", "commit": {"oid": "6f24116e7182570694f5e701bf1ebec247adaf6d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwODowMDowN1rOIR1p3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwODowMDowN1rOIR1p3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTU3NTc3NQ==", "bodyText": "THREAD_SAFETY_VIOLATION:  Unprotected write. Non-private method SolrResourceLoader.inform(...) writes to field this.coreReloadingClassLoader outside of synchronization.\nReporting because this access may occur on a background thread.", "url": "https://github.com/apache/lucene-solr/pull/1666#discussion_r555575775", "createdAt": "2021-01-12T08:00:07Z", "author": {"login": "sonatype-lift"}, "path": "solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java", "diffHunk": "@@ -654,6 +657,16 @@ public void inform(SolrCore core) {\n     this.config = core.getSolrConfig();\n     this.coreId = core.uniqueId;\n     this.coreContainer = core.getCoreContainer();\n+    SolrCore.Provider coreProvider = core.coreProvider;\n+\n+    this.coreReloadingClassLoader = new PackageListeningClassLoader(core.getCoreContainer(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f24116e7182570694f5e701bf1ebec247adaf6d"}, "originalPosition": 134}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY2MDE0NzE1", "url": "https://github.com/apache/lucene-solr/pull/1666#pullrequestreview-566014715", "createdAt": "2021-01-12T08:00:09Z", "commit": {"oid": "6f24116e7182570694f5e701bf1ebec247adaf6d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwODowMDowOVrOIR1p7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwODowMDowOVrOIR1p7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTU3NTc4OA==", "bodyText": "THREAD_SAFETY_VIOLATION:  Read/Write race. Non-private method SolrResourceLoader.newInstance(...) indirectly reads without synchronization from this.coreReloadingClassLoader. Potentially races with write in method SolrResourceLoader.inform(...).\nReporting because another access to the same memory occurs on a background thread, although this access may not.", "url": "https://github.com/apache/lucene-solr/pull/1666#discussion_r555575788", "createdAt": "2021-01-12T08:00:09Z", "author": {"login": "sonatype-lift"}, "path": "solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java", "diffHunk": "@@ -834,6 +847,47 @@ public void close() throws IOException {\n   public List<SolrInfoBean> getInfoMBeans() {\n     return Collections.unmodifiableList(infoMBeans);\n   }\n+  /**\n+   * Load a class using an appropriate {@link SolrResourceLoader} depending of the package on that class\n+   * @param registerCoreReloadListener register a listener for the package and reload the core if the package is changed.\n+   *                                   Use this sparingly. This will result in core reloads across all the cores in\n+   *                                   all collections using this configset\n+   */\n+  public  <T> Class<? extends T> findClass( PluginInfo info, Class<T>  type, boolean registerCoreReloadListener) {\n+    if(info.cName.pkg == null) return findClass(info.className, type);\n+    return _classLookup(info,\n+            (Function<PackageLoader.Package.Version, Class<? extends T>>) ver -> ver.getLoader().findClass(info.cName.className, type), registerCoreReloadListener);\n+\n+  }\n+\n+\n+  private  <T> T _classLookup(PluginInfo info, Function<PackageLoader.Package.Version, T> fun, boolean registerCoreReloadListener ) {\n+    PluginInfo.ClassName cName = info.cName;\n+    if (registerCoreReloadListener) {\n+      if (coreReloadingClassLoader == null) {\n+        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Core not set\");\n+      }\n+      return fun.apply(coreReloadingClassLoader.findPackageVersion(cName, true));\n+    } else {\n+      return fun.apply(coreReloadingClassLoader.findPackageVersion(cName, false));\n+    }\n+  }\n+\n+  /**\n+   *Create a n instance of a class using an appropriate {@link SolrResourceLoader} depending on the package of that class\n+   * @param registerCoreReloadListener register a listener for the package and reload the core if the package is changed.\n+   *                                   Use this sparingly. This will result in core reloads across all the cores in\n+   *                                   all collections using this configset\n+   */\n+  public <T> T newInstance(PluginInfo info, Class<T> type, boolean registerCoreReloadListener) {\n+    if(info.cName.pkg == null) {\n+      return newInstance(info.cName.className == null?\n+                      type.getName():\n+                      info.cName.className ,\n+              type);\n+    }\n+    return _classLookup( info, version -> version.getLoader().newInstance(info.cName.className, type), registerCoreReloadListener);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f24116e7182570694f5e701bf1ebec247adaf6d"}, "originalPosition": 268}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eeac7dc6497aeca4db74acfbdc2632ca3788be61", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/eeac7dc6497aeca4db74acfbdc2632ca3788be61", "committedDate": "2021-01-13T07:11:03Z", "message": "fix the API to show package version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bde680fe84f372eebb73b4b2bf0f23c776f2e08e", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/bde680fe84f372eebb73b4b2bf0f23c776f2e08e", "committedDate": "2021-01-13T11:01:02Z", "message": "added tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "693cedd14087660251ded93f042b759c79e860cf", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/693cedd14087660251ded93f042b759c79e860cf", "committedDate": "2021-01-13T11:06:02Z", "message": "unused imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98bff64f123801e27d48a10db84e4a82ad301de3", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/98bff64f123801e27d48a10db84e4a82ad301de3", "committedDate": "2021-01-13T11:07:26Z", "message": "unused imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abd8d34ca8f2682b7608eb3a9872ae96ea91b11c", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/abd8d34ca8f2682b7608eb3a9872ae96ea91b11c", "committedDate": "2021-01-13T11:14:19Z", "message": "CHANGES.txt"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY3MTg1NzAy", "url": "https://github.com/apache/lucene-solr/pull/1666#pullrequestreview-567185702", "createdAt": "2021-01-13T12:45:38Z", "commit": {"oid": "98bff64f123801e27d48a10db84e4a82ad301de3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxMjo0NTozOFrOIStrQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxMjo0NTozOFrOIStrQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQ5MzYzMw==", "bodyText": "THREAD_SAFETY_VIOLATION:  Read/Write race. Non-private method SolrResourceLoader.inform(...) indirectly reads without synchronization from this.coreContainer. Potentially races with write in method SolrResourceLoader.initCore(...).\nReporting because this access may occur on a background thread.", "url": "https://github.com/apache/lucene-solr/pull/1666#discussion_r556493633", "createdAt": "2021-01-13T12:45:38Z", "author": {"login": "sonatype-lift"}, "path": "solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java", "diffHunk": "@@ -645,15 +648,29 @@ static void clearCache() {\n     }\n   }\n \n+  void initCore(SolrCore core) {\n+    this.coreName = core.getName();\n+    this.config = core.getSolrConfig();\n+    this.coreId = core.uniqueId;\n+    this.coreContainer = core.getCoreContainer();\n+    SolrCore.Provider coreProvider = core.coreProvider;\n+\n+    this.coreReloadingClassLoader = new PackageListeningClassLoader(core.getCoreContainer(),\n+            this, s -> config.maxPackageVersion(s), null){\n+      @Override\n+      protected void doReloadAction(Ctx ctx) {\n+        log.info(\"Core reloading classloader issued reload for: {}/{} \", coreName, coreId);\n+        coreProvider.reload();\n+      }\n+    };\n+    core.getPackageListeners().addListener(coreReloadingClassLoader, true);\n+\n+  }\n \n   /**\n    * Tell all {@link SolrCoreAware} instances about the SolrCore\n    */\n   public void inform(SolrCore core) {\n-    this.coreName = core.getName();\n-    this.config = core.getSolrConfig();\n-    this.coreId = core.uniqueId;\n-    this.coreContainer = core.getCoreContainer();\n     if(getSchemaLoader() != null) core.getPackageListeners().addListener(schemaLoader);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98bff64f123801e27d48a10db84e4a82ad301de3"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2461, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}