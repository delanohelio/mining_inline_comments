{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1NjY2NzIy", "number": 1732, "title": "Clean up many small fixes", "bodyText": "Abstract classes don't need public constructors since they can only be\ncalled by subclasses\nDon't escape html characters in @code tags in javadoc\nFixed a few int/long arithmetic\nUse Arrays.toString instead of implicit byte[].toString", "createdAt": "2020-08-10T18:42:20Z", "url": "https://github.com/apache/lucene-solr/pull/1732", "merged": true, "mergeCommit": {"oid": "a46316e15635f52484f8369c9c3ccd6b25e04b23"}, "closed": true, "closedAt": "2020-09-08T15:27:54Z", "author": {"login": "madrob"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc9m2tqgFqTQ2NDQ4NDM2OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdG5O91gFqTQ4NDI1MTA4MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0NDg0MzY4", "url": "https://github.com/apache/lucene-solr/pull/1732#pullrequestreview-464484368", "createdAt": "2020-08-10T18:46:05Z", "commit": {"oid": "fc43993f1962dcf4e907c85f5a2b85b239b8fad2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxODo0NjowNVrOG-a8Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxODo0OTo1OVrOG-bD0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEwNjI0Ng==", "bodyText": "Can you not change those scopes in public API classes? This applies here and in other places -- protected changed to package-scope for source is not really an API-compatible change.", "url": "https://github.com/apache/lucene-solr/pull/1732#discussion_r468106246", "createdAt": "2020-08-10T18:46:05Z", "author": {"login": "dweiss"}, "path": "lucene/core/src/java/org/apache/lucene/analysis/Analyzer.java", "diffHunk": "@@ -94,7 +94,7 @@\n    * Create a new Analyzer, reusing the same set of components per-thread\n    * across calls to {@link #tokenStream(String, Reader)}. \n    */\n-  public Analyzer() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc43993f1962dcf4e907c85f5a2b85b239b8fad2"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEwNjY0Mw==", "bodyText": "This is wrong, uses default locale.", "url": "https://github.com/apache/lucene-solr/pull/1732#discussion_r468106643", "createdAt": "2020-08-10T18:46:51Z", "author": {"login": "dweiss"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java", "diffHunk": "@@ -709,7 +709,7 @@ private PendingBlock writeBlock(int prefixLength, boolean isFloor, int floorLead\n \n           PendingTerm term = (PendingTerm) ent;\n \n-          assert StringHelper.startsWith(term.termBytes, prefix): \"term.term=\" + term.termBytes + \" prefix=\" + prefix;\n+          assert StringHelper.startsWith(term.termBytes, prefix): \"term.term=\" + new String(term.termBytes) + \" prefix=\" + prefix;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc43993f1962dcf4e907c85f5a2b85b239b8fad2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEwNzM2OA==", "bodyText": "previous version was correct camel case (upTo).", "url": "https://github.com/apache/lucene-solr/pull/1732#discussion_r468107368", "createdAt": "2020-08-10T18:48:22Z", "author": {"login": "dweiss"}, "path": "lucene/core/src/java/org/apache/lucene/index/DocValuesUpdate.java", "diffHunk": "@@ -152,12 +152,12 @@ static BytesRef readFrom(DataInput in, BytesRef scratch) throws IOException {\n     }\n \n     NumericDocValuesUpdate(Term term, String field, Long value) {\n-      this(term, field, value != null ? value.longValue() : -1, BufferedUpdates.MAX_INT, value != null);\n+      this(term, field, value != null ? value : -1, BufferedUpdates.MAX_INT, value != null);\n     }\n \n \n-    private NumericDocValuesUpdate(Term term, String field, long value, int docIDUpTo, boolean hasValue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc43993f1962dcf4e907c85f5a2b85b239b8fad2"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEwODI0MQ==", "bodyText": "These are serious changes... you're adding synchronization on core classes. I don't think they should be piggybacked on top of trivial ones - I'm sure @s1monw would chip in whether this synchronization here makes sense but he'll probably overlook if it's a bulk of trivial changes on top.", "url": "https://github.com/apache/lucene-solr/pull/1732#discussion_r468108241", "createdAt": "2020-08-10T18:49:59Z", "author": {"login": "dweiss"}, "path": "lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl.java", "diffHunk": "@@ -324,12 +324,12 @@ synchronized void doOnAbort(DocumentsWriterPerThread perThread) {\n     }\n   }\n \n-  private void checkoutAndBlock(DocumentsWriterPerThread perThread) {\n+  private synchronized void checkoutAndBlock(DocumentsWriterPerThread perThread) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc43993f1962dcf4e907c85f5a2b85b239b8fad2"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0ODAwMDA3", "url": "https://github.com/apache/lucene-solr/pull/1732#pullrequestreview-464800007", "createdAt": "2020-08-11T07:05:48Z", "commit": {"oid": "3c2b03513ec4cdfe3c1ffe9a9681907c26b8d066"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzowNTo0OFrOG-q_-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzoxMDoyNlrOG-rIKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM2OTQwMA==", "bodyText": "Leave this as it was (with throw ...) - don't know whether IntelliJ is smart enough to detect this method always throws an exception but other compilers are not (and this ensures the compiler sees it as a the only codepath leaving the clause).", "url": "https://github.com/apache/lucene-solr/pull/1732#discussion_r468369400", "createdAt": "2020-08-11T07:05:48Z", "author": {"login": "dweiss"}, "path": "lucene/core/src/java/org/apache/lucene/index/SegmentInfos.java", "diffHunk": "@@ -440,7 +440,7 @@ public static final SegmentInfos readCommit(Directory directory, ChecksumIndexIn\n       if (format >= VERSION_70) { // oldest supported version\n         CodecUtil.checkFooter(input, priorE);\n       } else {\n-        throw IOUtils.rethrowAlways(priorE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c2b03513ec4cdfe3c1ffe9a9681907c26b8d066"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM3MDc1Mg==", "bodyText": "that 'term' class (PendingTerm) actually has a perfectly fine toString method... why not just remove termBytes and let it do its job?", "url": "https://github.com/apache/lucene-solr/pull/1732#discussion_r468370752", "createdAt": "2020-08-11T07:08:50Z", "author": {"login": "dweiss"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java", "diffHunk": "@@ -709,7 +710,8 @@ private PendingBlock writeBlock(int prefixLength, boolean isFloor, int floorLead\n \n           PendingTerm term = (PendingTerm) ent;\n \n-          assert StringHelper.startsWith(term.termBytes, prefix): \"term.term=\" + term.termBytes + \" prefix=\" + prefix;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c2b03513ec4cdfe3c1ffe9a9681907c26b8d066"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM3MDgxNQ==", "bodyText": "Same here.", "url": "https://github.com/apache/lucene-solr/pull/1732#discussion_r468370815", "createdAt": "2020-08-11T07:08:59Z", "author": {"login": "dweiss"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java", "diffHunk": "@@ -741,7 +743,8 @@ private PendingBlock writeBlock(int prefixLength, boolean isFloor, int floorLead\n           if (ent.isTerm) {\n             PendingTerm term = (PendingTerm) ent;\n \n-            assert StringHelper.startsWith(term.termBytes, prefix): \"term.term=\" + term.termBytes + \" prefix=\" + prefix;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c2b03513ec4cdfe3c1ffe9a9681907c26b8d066"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM3MTE2Mg==", "bodyText": "Don't change to package private scope here. It will prevent subclasses from outside of the package from accessing those fields (and there may be classes outside of Lucene code doing that).", "url": "https://github.com/apache/lucene-solr/pull/1732#discussion_r468371162", "createdAt": "2020-08-11T07:09:47Z", "author": {"login": "dweiss"}, "path": "lucene/core/src/java/org/apache/lucene/analysis/Analyzer.java", "diffHunk": "@@ -367,12 +367,12 @@ public void close() {\n     /**\n      * Original source of the tokens.\n      */\n-    protected final Consumer<Reader> source;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c2b03513ec4cdfe3c1ffe9a9681907c26b8d066"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM3MTIyNA==", "bodyText": "Same here.", "url": "https://github.com/apache/lucene-solr/pull/1732#discussion_r468371224", "createdAt": "2020-08-11T07:09:55Z", "author": {"login": "dweiss"}, "path": "lucene/core/src/java/org/apache/lucene/analysis/Analyzer.java", "diffHunk": "@@ -367,12 +367,12 @@ public void close() {\n     /**\n      * Original source of the tokens.\n      */\n-    protected final Consumer<Reader> source;\n+    final Consumer<Reader> source;\n     /**\n      * Sink tokenstream, such as the outer tokenfilter decorating\n      * the chain. This can be the source if there are no filters.\n      */\n-    protected final TokenStream sink;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c2b03513ec4cdfe3c1ffe9a9681907c26b8d066"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM3MTQ1OQ==", "bodyText": "term has a toString method - use it.", "url": "https://github.com/apache/lucene-solr/pull/1732#discussion_r468371459", "createdAt": "2020-08-11T07:10:22Z", "author": {"login": "dweiss"}, "path": "lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java", "diffHunk": "@@ -604,7 +605,7 @@ private PendingBlock writeBlock(int prefixLength, boolean isFloor, int floorLead\n           assert ent.isTerm: \"i=\" + i;\n \n           PendingTerm term = (PendingTerm) ent;\n-          assert StringHelper.startsWith(term.termBytes, prefix): \"term.term=\" + term.termBytes + \" prefix=\" + prefix;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c2b03513ec4cdfe3c1ffe9a9681907c26b8d066"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM3MTQ5Ng==", "bodyText": "term has a toString method - use it.", "url": "https://github.com/apache/lucene-solr/pull/1732#discussion_r468371496", "createdAt": "2020-08-11T07:10:26Z", "author": {"login": "dweiss"}, "path": "lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java", "diffHunk": "@@ -640,7 +641,7 @@ private PendingBlock writeBlock(int prefixLength, boolean isFloor, int floorLead\n           PendingEntry ent = pending.get(i);\n           if (ent.isTerm) {\n             PendingTerm term = (PendingTerm) ent;\n-            assert StringHelper.startsWith(term.termBytes, prefix): \"term.term=\" + term.termBytes + \" prefix=\" + prefix;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c2b03513ec4cdfe3c1ffe9a9681907c26b8d066"}, "originalPosition": 21}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "787e7b4ab9ee8b8a9d3f7e48b290a65239fde850", "author": {"user": {"login": "madrob", "name": "Mike Drob"}}, "url": "https://github.com/apache/lucene-solr/commit/787e7b4ab9ee8b8a9d3f7e48b290a65239fde850", "committedDate": "2020-08-11T15:10:08Z", "message": "use pendingterm.tostring"}, "afterCommit": {"oid": "f1bc86221bcab1095b29128cf99307e83e60eaba", "author": {"user": {"login": "madrob", "name": "Mike Drob"}}, "url": "https://github.com/apache/lucene-solr/commit/f1bc86221bcab1095b29128cf99307e83e60eaba", "committedDate": "2020-08-16T02:25:26Z", "message": "Clean up many small fixes\n\n* Abstract classes don't need public constructors since they can only be\n  called by subclasses\n* Don't escape html characters in @code tags in javadoc\n* Fixed a few int/long arithmetic\n* Use explicit Term.toString instead of implicit byte[].toString\n* Javadoc typos\n* Consistent capitalization for field and parameter names"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4MDM5MDMz", "url": "https://github.com/apache/lucene-solr/pull/1732#pullrequestreview-468039033", "createdAt": "2020-08-16T06:59:19Z", "commit": {"oid": "f1bc86221bcab1095b29128cf99307e83e60eaba"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwNjo1OToxOVrOHBQJIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwNzowNToyNlrOHBQLWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA3NTEwNw==", "bodyText": "I didn't look at the code but this looks suspicious. The reordering here changes happens-before relationship between these statements. Please leave the order of assignment of tail as it was (inside the locked block).", "url": "https://github.com/apache/lucene-solr/pull/1732#discussion_r471075107", "createdAt": "2020-08-16T06:59:19Z", "author": {"login": "dweiss"}, "path": "lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue.java", "diffHunk": "@@ -510,8 +510,8 @@ public String toString() {\n   }\n   \n   private boolean forceApplyGlobalSlice() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1bc86221bcab1095b29128cf99307e83e60eaba"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA3NTUwNg==", "bodyText": "inconsistent with other calls (should use term.toString())?", "url": "https://github.com/apache/lucene-solr/pull/1732#discussion_r471075506", "createdAt": "2020-08-16T07:03:34Z", "author": {"login": "dweiss"}, "path": "lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.java", "diffHunk": "@@ -582,7 +583,7 @@ private PendingBlock writeBlock(int prefixLength, boolean isFloor, int floorLead\n           assert ent.isTerm: \"i=\" + i;\n \n           PendingTerm term = (PendingTerm) ent;\n-          assert StringHelper.startsWith(term.termBytes, prefix): \"term.term=\" + term.termBytes + \" prefix=\" + prefix;\n+          assert StringHelper.startsWith(term.termBytes, prefix): \"term.term=\" + Arrays.toString(term.termBytes) + \" prefix=\" + prefix;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1bc86221bcab1095b29128cf99307e83e60eaba"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA3NTUzMg==", "bodyText": "term.toString() again?", "url": "https://github.com/apache/lucene-solr/pull/1732#discussion_r471075532", "createdAt": "2020-08-16T07:03:53Z", "author": {"login": "dweiss"}, "path": "lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.java", "diffHunk": "@@ -610,7 +611,7 @@ private PendingBlock writeBlock(int prefixLength, boolean isFloor, int floorLead\n           PendingEntry ent = pending.get(i);\n           if (ent.isTerm) {\n             PendingTerm term = (PendingTerm) ent;\n-            assert StringHelper.startsWith(term.termBytes, prefix): \"term.term=\" + term.termBytes + \" prefix=\" + prefix;\n+            assert StringHelper.startsWith(term.termBytes, prefix): \"term.term=\" + Arrays.toString(term.termBytes) + \" prefix=\" + prefix;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1bc86221bcab1095b29128cf99307e83e60eaba"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA3NTY3NA==", "bodyText": "Since you're cleaning up I think it'd be better to use assertThrows() with lambda...", "url": "https://github.com/apache/lucene-solr/pull/1732#discussion_r471075674", "createdAt": "2020-08-16T07:05:26Z", "author": {"login": "dweiss"}, "path": "lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase.java", "diffHunk": "@@ -504,8 +504,8 @@ protected void assertEquals(RandomTokenStream tk, FieldType ft, Terms terms) thr\n           }\n           try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1bc86221bcab1095b29128cf99307e83e60eaba"}, "originalPosition": 2}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea68d599aa5ad0705228365af0592d5cc861a84d", "author": {"user": {"login": "madrob", "name": "Mike Drob"}}, "url": "https://github.com/apache/lucene-solr/commit/ea68d599aa5ad0705228365af0592d5cc861a84d", "committedDate": "2020-09-04T15:34:57Z", "message": "Clean up many small fixes\n\n* Abstract classes don't need public constructors since they can only be\n  called by subclasses\n* Don't escape html characters in @code tags in javadoc\n* Fixed a few int/long arithmetic\n* Use explicit Term.toString instead of implicit byte[].toString\n* Javadoc typos\n* Consistent capitalization for field and parameter names"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ea7a201c917147b26fb09233b0af20bfe3c442cf", "author": {"user": {"login": "madrob", "name": "Mike Drob"}}, "url": "https://github.com/apache/lucene-solr/commit/ea7a201c917147b26fb09233b0af20bfe3c442cf", "committedDate": "2020-08-19T22:42:30Z", "message": "precommit"}, "afterCommit": {"oid": "ea68d599aa5ad0705228365af0592d5cc861a84d", "author": {"user": {"login": "madrob", "name": "Mike Drob"}}, "url": "https://github.com/apache/lucene-solr/commit/ea68d599aa5ad0705228365af0592d5cc861a84d", "committedDate": "2020-09-04T15:34:57Z", "message": "Clean up many small fixes\n\n* Abstract classes don't need public constructors since they can only be\n  called by subclasses\n* Don't escape html characters in @code tags in javadoc\n* Fixed a few int/long arithmetic\n* Use explicit Term.toString instead of implicit byte[].toString\n* Javadoc typos\n* Consistent capitalization for field and parameter names"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MjUxMDgw", "url": "https://github.com/apache/lucene-solr/pull/1732#pullrequestreview-484251080", "createdAt": "2020-09-08T15:21:43Z", "commit": {"oid": "ea68d599aa5ad0705228365af0592d5cc861a84d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2342, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}