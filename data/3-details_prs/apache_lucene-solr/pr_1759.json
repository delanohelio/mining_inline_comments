{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5MTAyOTIy", "number": 1759, "title": "SOLR-13438: on collection delete, also delete .AUTOCREATED config set", "bodyText": "Description\nOn collection delete, also delete its config set iff it has been auto-created and if there are no other references to it.\nhttps://issues.apache.org/jira/browse/SOLR-13438\nSolution\nThe following steps are followed on (the end of) DeleteCollectionCmd:\n\nread config set name\nif it is auto-created (suffixed with \".AUTOCREATED\"), then:\n\nverify if any other collection uses the same config set\nif no other collection uses the same config set; then delete it\n\n\n\nNotes: some comments were added referring to some other codes that do some similar things (like for finding out the configSetName of other collections). Maybe there's a better, reusable way of doing that - like triggering an extra command for deleting the config set, that my limited knowledge in the code has not figured out.\nTests\nExisting tests run successfully.\nAdded a new test: CollectionDeleteAlsoDeletesAutocreatedConfigSetTest. A collection is created (with it an auto-created config set is added. The collection is deleted, and it is verified that the \".AUTOCREATED\" config set has also been deleted.\nChecklist\nPlease review the following and check all that apply:\n\n I have reviewed the guidelines for How to Contribute and my code conforms to the standards described there to the best of my ability.\n I have created a Jira issue and added the issue ID to my pull request title. (an issue already existed)\n I have given Solr maintainers access to contribute to my PR branch. (optional but recommended)\n I have developed this patch against the master branch.\n I have run ant precommit and the appropriate test suite. (./gradlew check was executed, which seems to be applying the same checks)\n I have added tests for my changes.\n I have added documentation for the Ref Guide (for Solr changes only).", "createdAt": "2020-08-17T22:41:35Z", "url": "https://github.com/apache/lucene-solr/pull/1759", "merged": true, "mergeCommit": {"oid": "66b6ce2cd0493f273e95aa51c53a324a4692136e"}, "closed": true, "closedAt": "2020-08-21T19:43:17Z", "author": {"login": "adorow"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc_5ZyaAH2gAyNDY5MTAyOTIyOmNhNGU1MGZhYWQ3ZGZhOWE3NWZmOGRiODVhNTMxODM0NDBlZTZlMjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdBIdBbAFqTQ3MjY3MDkxOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ca4e50faad7dfa9a75ff8db85a53183440ee6e25", "author": {"user": null}, "url": "https://github.com/apache/lucene-solr/commit/ca4e50faad7dfa9a75ff8db85a53183440ee6e25", "committedDate": "2020-08-17T21:36:04Z", "message": "SOLR-13438: when deleting a collection, delete also its config set if it is auto-created, and there are no other references to it"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b08b7ed50f5c9460ba691dd3268e93d940faab0e", "author": {"user": null}, "url": "https://github.com/apache/lucene-solr/commit/b08b7ed50f5c9460ba691dd3268e93d940faab0e", "committedDate": "2020-08-17T22:06:44Z", "message": "SOLR-13438: added change to CHANGES.txt"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwOTc4NTkw", "url": "https://github.com/apache/lucene-solr/pull/1759#pullrequestreview-470978590", "createdAt": "2020-08-19T21:29:32Z", "commit": {"oid": "b08b7ed50f5c9460ba691dd3268e93d940faab0e"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMToyOTozMlrOHDaaCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMTo0NToyOFrOHDbN2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM0MDQyNA==", "bodyText": "Please include your preferred name here after the change summary so that we can properly credit you!", "url": "https://github.com/apache/lucene-solr/pull/1759#discussion_r473340424", "createdAt": "2020-08-19T21:29:32Z", "author": {"login": "madrob"}, "path": "solr/CHANGES.txt", "diffHunk": "@@ -42,6 +42,8 @@ Improvements\n \n * SOLR-13528 Rate Limiting in Solr (Atri Sharma, Mike Drob)\n \n+* SOLR-13438: On deleting a collection, its config set will also be deleted iff it has been auto-created, and not used by any other collection.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b08b7ed50f5c9460ba691dd3268e93d940faab0e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM0NTA1MQ==", "bodyText": "Please avoid suppressing warnings in new code and use generics", "url": "https://github.com/apache/lucene-solr/pull/1759#discussion_r473345051", "createdAt": "2020-08-19T21:34:59Z", "author": {"login": "madrob"}, "path": "solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionDeleteAlsoDeletesAutocreatedConfigSetTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.solr.cloud.api.collections;\n+\n+import org.apache.solr.client.solrj.request.CollectionAdminRequest;\n+import org.apache.solr.cloud.AbstractFullDistribZkTestBase;\n+import org.apache.solr.cloud.OverseerCollectionConfigSetProcessor;\n+import org.apache.solr.common.cloud.ZkStateReader;\n+import org.apache.solr.common.util.NamedList;\n+import org.junit.Test;\n+\n+public class CollectionDeleteAlsoDeletesAutocreatedConfigSetTest extends AbstractFullDistribZkTestBase {\n+\n+  public CollectionDeleteAlsoDeletesAutocreatedConfigSetTest() {\n+    sliceCount = 1;\n+  }\n+\n+  @Test\n+  @ShardsFixed(num = 1)\n+  public void test() throws Exception {\n+    String overseerNode = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n+\n+    String collectionName = \"CollectionDeleteAlsoDeletesAutocreatedConfigSetTest\";\n+    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,1,1)\n+            .setCreateNodeSet(overseerNode);\n+\n+    NamedList<Object> request = create.process(cloudClient).getResponse();\n+\n+    if (request.get(\"success\") != null) {\n+      // collection exists now\n+      assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n+\n+      String configName = cloudClient.getZkStateReader().readConfigName(collectionName);\n+\n+      // config for this collection is '.AUTOCREATED', and exists globally\n+      assertTrue(configName.endsWith(\".AUTOCREATED\"));\n+      assertTrue(cloudClient.getZkStateReader().getConfigManager().listConfigs().contains(configName));\n+\n+      @SuppressWarnings({\"rawtypes\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b08b7ed50f5c9460ba691dd3268e93d940faab0e"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM0Nzc2MQ==", "bodyText": "Instead of new file, can this be part of SimpleCollectionCreateDeleteTest?", "url": "https://github.com/apache/lucene-solr/pull/1759#discussion_r473347761", "createdAt": "2020-08-19T21:38:15Z", "author": {"login": "madrob"}, "path": "solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionDeleteAlsoDeletesAutocreatedConfigSetTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.solr.cloud.api.collections;\n+\n+import org.apache.solr.client.solrj.request.CollectionAdminRequest;\n+import org.apache.solr.cloud.AbstractFullDistribZkTestBase;\n+import org.apache.solr.cloud.OverseerCollectionConfigSetProcessor;\n+import org.apache.solr.common.cloud.ZkStateReader;\n+import org.apache.solr.common.util.NamedList;\n+import org.junit.Test;\n+\n+public class CollectionDeleteAlsoDeletesAutocreatedConfigSetTest extends AbstractFullDistribZkTestBase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b08b7ed50f5c9460ba691dd3268e93d940faab0e"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM0OTI5MA==", "bodyText": "Declare as CollectionAdminRequest.Delete", "url": "https://github.com/apache/lucene-solr/pull/1759#discussion_r473349290", "createdAt": "2020-08-19T21:40:04Z", "author": {"login": "madrob"}, "path": "solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionDeleteAlsoDeletesAutocreatedConfigSetTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.solr.cloud.api.collections;\n+\n+import org.apache.solr.client.solrj.request.CollectionAdminRequest;\n+import org.apache.solr.cloud.AbstractFullDistribZkTestBase;\n+import org.apache.solr.cloud.OverseerCollectionConfigSetProcessor;\n+import org.apache.solr.common.cloud.ZkStateReader;\n+import org.apache.solr.common.util.NamedList;\n+import org.junit.Test;\n+\n+public class CollectionDeleteAlsoDeletesAutocreatedConfigSetTest extends AbstractFullDistribZkTestBase {\n+\n+  public CollectionDeleteAlsoDeletesAutocreatedConfigSetTest() {\n+    sliceCount = 1;\n+  }\n+\n+  @Test\n+  @ShardsFixed(num = 1)\n+  public void test() throws Exception {\n+    String overseerNode = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n+\n+    String collectionName = \"CollectionDeleteAlsoDeletesAutocreatedConfigSetTest\";\n+    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,1,1)\n+            .setCreateNodeSet(overseerNode);\n+\n+    NamedList<Object> request = create.process(cloudClient).getResponse();\n+\n+    if (request.get(\"success\") != null) {\n+      // collection exists now\n+      assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n+\n+      String configName = cloudClient.getZkStateReader().readConfigName(collectionName);\n+\n+      // config for this collection is '.AUTOCREATED', and exists globally\n+      assertTrue(configName.endsWith(\".AUTOCREATED\"));\n+      assertTrue(cloudClient.getZkStateReader().getConfigManager().listConfigs().contains(configName));\n+\n+      @SuppressWarnings({\"rawtypes\"})\n+      CollectionAdminRequest delete = CollectionAdminRequest.deleteCollection(collectionName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b08b7ed50f5c9460ba691dd3268e93d940faab0e"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM1MDc5Mw==", "bodyText": "Do we need this call to setCreateNodeSet? If not, can also delete getting overseerNode above. If so, add a comment explaining why.", "url": "https://github.com/apache/lucene-solr/pull/1759#discussion_r473350793", "createdAt": "2020-08-19T21:41:58Z", "author": {"login": "madrob"}, "path": "solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionDeleteAlsoDeletesAutocreatedConfigSetTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.solr.cloud.api.collections;\n+\n+import org.apache.solr.client.solrj.request.CollectionAdminRequest;\n+import org.apache.solr.cloud.AbstractFullDistribZkTestBase;\n+import org.apache.solr.cloud.OverseerCollectionConfigSetProcessor;\n+import org.apache.solr.common.cloud.ZkStateReader;\n+import org.apache.solr.common.util.NamedList;\n+import org.junit.Test;\n+\n+public class CollectionDeleteAlsoDeletesAutocreatedConfigSetTest extends AbstractFullDistribZkTestBase {\n+\n+  public CollectionDeleteAlsoDeletesAutocreatedConfigSetTest() {\n+    sliceCount = 1;\n+  }\n+\n+  @Test\n+  @ShardsFixed(num = 1)\n+  public void test() throws Exception {\n+    String overseerNode = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n+\n+    String collectionName = \"CollectionDeleteAlsoDeletesAutocreatedConfigSetTest\";\n+    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,1,1)\n+            .setCreateNodeSet(overseerNode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b08b7ed50f5c9460ba691dd3268e93d940faab0e"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM1MzY4OQ==", "bodyText": "Please add another test where we have two collections sharing the same autogenerated configset, and verify deleting one of them doesn't orphan the other.", "url": "https://github.com/apache/lucene-solr/pull/1759#discussion_r473353689", "createdAt": "2020-08-19T21:45:28Z", "author": {"login": "madrob"}, "path": "solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionDeleteAlsoDeletesAutocreatedConfigSetTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.solr.cloud.api.collections;\n+\n+import org.apache.solr.client.solrj.request.CollectionAdminRequest;\n+import org.apache.solr.cloud.AbstractFullDistribZkTestBase;\n+import org.apache.solr.cloud.OverseerCollectionConfigSetProcessor;\n+import org.apache.solr.common.cloud.ZkStateReader;\n+import org.apache.solr.common.util.NamedList;\n+import org.junit.Test;\n+\n+public class CollectionDeleteAlsoDeletesAutocreatedConfigSetTest extends AbstractFullDistribZkTestBase {\n+\n+  public CollectionDeleteAlsoDeletesAutocreatedConfigSetTest() {\n+    sliceCount = 1;\n+  }\n+\n+  @Test\n+  @ShardsFixed(num = 1)\n+  public void test() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b08b7ed50f5c9460ba691dd3268e93d940faab0e"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0124ea6c03411c51f355039482361c26bcc7a945", "author": {"user": {"login": "adorow", "name": "Anderson Dorow"}}, "url": "https://github.com/apache/lucene-solr/commit/0124ea6c03411c51f355039482361c26bcc7a945", "committedDate": "2020-08-20T09:11:18Z", "message": "SOLR-13438: applied changes from PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93df217b3cecfa34a23554e6a6f5de650ad662f0", "author": {"user": {"login": "adorow", "name": "Anderson Dorow"}}, "url": "https://github.com/apache/lucene-solr/commit/93df217b3cecfa34a23554e6a6f5de650ad662f0", "committedDate": "2020-08-20T09:14:35Z", "message": "Merge branch 'master' into solr13438"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNjcwOTE5", "url": "https://github.com/apache/lucene-solr/pull/1759#pullrequestreview-472670919", "createdAt": "2020-08-21T17:36:20Z", "commit": {"oid": "93df217b3cecfa34a23554e6a6f5de650ad662f0"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzozNjoyMVrOHE1pvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzozNjoyMVrOHE1pvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgzNTM4OQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/apache/lucene-solr/pull/1759#discussion_r474835389", "createdAt": "2020-08-21T17:36:21Z", "author": {"login": "madrob"}, "path": "solr/core/src/test/org/apache/solr/cloud/api/collections/SimpleCollectionCreateDeleteTest.java", "diffHunk": "@@ -32,69 +28,151 @@\n import org.apache.solr.util.TimeOut;\n import org.junit.Test;\n \n+import java.util.Collection;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n public class SimpleCollectionCreateDeleteTest extends AbstractFullDistribZkTestBase {\n \n-  public SimpleCollectionCreateDeleteTest() {\n-    sliceCount = 1;\n-  }\n-\n-  @Test\n-  @ShardsFixed(num = 1)\n-  public void test() throws Exception {\n-    String overseerNode = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n-    String notOverseerNode = null;\n-    for (CloudJettyRunner cloudJetty : cloudJettys) {\n-      if (!overseerNode.equals(cloudJetty.nodeName)) {\n-        notOverseerNode = cloudJetty.nodeName;\n-        break;\n-      }\n+    public SimpleCollectionCreateDeleteTest() {\n+        sliceCount = 1;\n     }\n-    String collectionName = \"SimpleCollectionCreateDeleteTest\";\n-    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,1,1)\n-            .setCreateNodeSet(overseerNode);\n-\n-    NamedList<Object> request = create.process(cloudClient).getResponse();\n-\n-    if (request.get(\"success\") != null) {\n-      assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n-\n-      @SuppressWarnings({\"rawtypes\"})\n-      CollectionAdminRequest delete = CollectionAdminRequest.deleteCollection(collectionName);\n-      cloudClient.request(delete);\n-\n-      assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n-      \n-      // currently, removing a collection does not wait for cores to be unloaded\n-      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n-      while (true) {\n-        \n-        if( timeout.hasTimedOut() ) {\n-          throw new TimeoutException(\"Timed out waiting for all collections to be fully removed.\");\n+\n+    @Test\n+    @ShardsFixed(num = 1)\n+    public void testCreateAndDeleteThenCreateAgain() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93df217b3cecfa34a23554e6a6f5de650ad662f0"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2374, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}