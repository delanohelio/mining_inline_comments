{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2OTk3NDI2", "number": 2067, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwMDowMDozMVrOE3AIKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNjozNTo1N1rOE7I9Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTA5MjI0OnYy", "diffSide": "LEFT", "path": "solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwMDowMDozMVrOHwGY-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNzowOTozOVrOH0_6zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE5ODM5NQ==", "bodyText": "related: can we update the javadoc on clusterState.getCollectionsMap to be more explicit that it will make a call to zk, instead of the current may", "url": "https://github.com/apache/lucene-solr/pull/2067#discussion_r520198395", "createdAt": "2020-11-10T00:00:31Z", "author": {"login": "madrob"}, "path": "solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream.java", "diffHunk": "@@ -334,11 +334,6 @@ private StreamComparator parseComp(String sort, String fl) throws IOException {\n   public static Slice[] getSlices(String collectionName, ZkStateReader zkStateReader, boolean checkAlias) throws IOException {\n     ClusterState clusterState = zkStateReader.getClusterState();\n \n-    Map<String, DocCollection> collectionsMap = clusterState.getCollectionsMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fed1e83fd7ffcbffa187d0c5aa7301d4b22e423c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMzNTI0Ng==", "bodyText": "good idea", "url": "https://github.com/apache/lucene-solr/pull/2067#discussion_r525335246", "createdAt": "2020-11-17T17:09:39Z", "author": {"login": "thelabdude"}, "path": "solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream.java", "diffHunk": "@@ -334,11 +334,6 @@ private StreamComparator parseComp(String sort, String fl) throws IOException {\n   public static Slice[] getSlices(String collectionName, ZkStateReader zkStateReader, boolean checkAlias) throws IOException {\n     ClusterState clusterState = zkStateReader.getClusterState();\n \n-    Map<String, DocCollection> collectionsMap = clusterState.getCollectionsMap();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE5ODM5NQ=="}, "originalCommit": {"oid": "fed1e83fd7ffcbffa187d0c5aa7301d4b22e423c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTA5NjY1OnYy", "diffSide": "RIGHT", "path": "solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwMDowMjozNlrOHwGboQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNjozMzo1MFrOH2nNZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE5OTA3Mw==", "bodyText": "Should we cache the value of zkStateReader.getAliases below to avoid volatile reads?", "url": "https://github.com/apache/lucene-solr/pull/2067#discussion_r520199073", "createdAt": "2020-11-10T00:02:36Z", "author": {"login": "madrob"}, "path": "solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream.java", "diffHunk": "@@ -334,11 +334,6 @@ private StreamComparator parseComp(String sort, String fl) throws IOException {\n   public static Slice[] getSlices(String collectionName, ZkStateReader zkStateReader, boolean checkAlias) throws IOException {\n     ClusterState clusterState = zkStateReader.getClusterState();\n \n-    Map<String, DocCollection> collectionsMap = clusterState.getCollectionsMap();\n-\n-    //TODO we should probably split collection by comma to query more than one\n-    //  which is something already supported in other parts of Solr\n-\n     // check for alias or collection", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fed1e83fd7ffcbffa187d0c5aa7301d4b22e423c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAyNzU1Nw==", "bodyText": "Moved the call to getAliases out of the for loop", "url": "https://github.com/apache/lucene-solr/pull/2067#discussion_r527027557", "createdAt": "2020-11-19T16:33:50Z", "author": {"login": "thelabdude"}, "path": "solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream.java", "diffHunk": "@@ -334,11 +334,6 @@ private StreamComparator parseComp(String sort, String fl) throws IOException {\n   public static Slice[] getSlices(String collectionName, ZkStateReader zkStateReader, boolean checkAlias) throws IOException {\n     ClusterState clusterState = zkStateReader.getClusterState();\n \n-    Map<String, DocCollection> collectionsMap = clusterState.getCollectionsMap();\n-\n-    //TODO we should probably split collection by comma to query more than one\n-    //  which is something already supported in other parts of Solr\n-\n     // check for alias or collection", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE5OTA3Mw=="}, "originalCommit": {"oid": "fed1e83fd7ffcbffa187d0c5aa7301d4b22e423c"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTExODIyOnYy", "diffSide": "RIGHT", "path": "solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwMDoxMjoxNFrOHwGoKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwMDoxMjoxNFrOHwGoKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIwMjI4Mg==", "bodyText": "Can we precomute this in the constructor?", "url": "https://github.com/apache/lucene-solr/pull/2067#discussion_r520202282", "createdAt": "2020-11-10T00:12:14Z", "author": {"login": "madrob"}, "path": "solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream.java", "diffHunk": "@@ -126,6 +135,17 @@ public void open() throws IOException {\n     }\n   }\n \n+  private String getNodeUrl() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fed1e83fd7ffcbffa187d0c5aa7301d4b22e423c"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNDQ2ODg5OnYy", "diffSide": "LEFT", "path": "solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNjozMzoyMVrOH2nMIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNjozMzoyMVrOH2nMIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAyNzIzNA==", "bodyText": "I removed this b/c I don't think we should try to accommodate improperly cased collection names. No tests broke, but let me know if we need this for some reason I don't understand", "url": "https://github.com/apache/lucene-solr/pull/2067#discussion_r527027234", "createdAt": "2020-11-19T16:33:21Z", "author": {"login": "thelabdude"}, "path": "solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream.java", "diffHunk": "@@ -334,88 +330,76 @@ private StreamComparator parseComp(String sort, String fl) throws IOException {\n   public static Slice[] getSlices(String collectionName, ZkStateReader zkStateReader, boolean checkAlias) throws IOException {\n     ClusterState clusterState = zkStateReader.getClusterState();\n \n-    Map<String, DocCollection> collectionsMap = clusterState.getCollectionsMap();\n-\n-    //TODO we should probably split collection by comma to query more than one\n-    //  which is something already supported in other parts of Solr\n-\n     // check for alias or collection\n \n     List<String> allCollections = new ArrayList<>();\n     String[] collectionNames = collectionName.split(\",\");\n+    Aliases aliases = checkAlias ? zkStateReader.getAliases() : null;\n+\n     for(String col : collectionNames) {\n-      List<String> collections = checkAlias\n-          ? zkStateReader.getAliases().resolveAliases(col)  // if not an alias, returns collectionName\n+      List<String> collections = (aliases != null)\n+          ? aliases.resolveAliases(col)  // if not an alias, returns collectionName\n           : Collections.singletonList(collectionName);\n       allCollections.addAll(collections);\n     }\n \n     // Lookup all actives slices for these collections\n     List<Slice> slices = allCollections.stream()\n-        .map(collectionsMap::get)\n+        .map(c -> clusterState.getCollectionOrNull(c, true))\n         .filter(Objects::nonNull)\n         .flatMap(docCol -> Arrays.stream(docCol.getActiveSlicesArr()))\n         .collect(Collectors.toList());\n     if (!slices.isEmpty()) {\n-      return slices.toArray(new Slice[slices.size()]);\n-    }\n-\n-    // Check collection case insensitive\n-    for(Entry<String, DocCollection> entry : collectionsMap.entrySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9c1d7ec3453a46a33ea9f5123d8882a8dbf8245"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNDQ3NDc5OnYy", "diffSide": "RIGHT", "path": "solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNjozNDo0MFrOH2nP5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNjozNDo0MFrOH2nP5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAyODE5OQ==", "bodyText": "Here we're keeping the Replica so we have direct access to its baseUrl and core name instead of parsing those out of the shardUrl", "url": "https://github.com/apache/lucene-solr/pull/2067#discussion_r527028199", "createdAt": "2020-11-19T16:34:40Z", "author": {"login": "thelabdude"}, "path": "solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream.java", "diffHunk": "@@ -334,88 +330,76 @@ private StreamComparator parseComp(String sort, String fl) throws IOException {\n   public static Slice[] getSlices(String collectionName, ZkStateReader zkStateReader, boolean checkAlias) throws IOException {\n     ClusterState clusterState = zkStateReader.getClusterState();\n \n-    Map<String, DocCollection> collectionsMap = clusterState.getCollectionsMap();\n-\n-    //TODO we should probably split collection by comma to query more than one\n-    //  which is something already supported in other parts of Solr\n-\n     // check for alias or collection\n \n     List<String> allCollections = new ArrayList<>();\n     String[] collectionNames = collectionName.split(\",\");\n+    Aliases aliases = checkAlias ? zkStateReader.getAliases() : null;\n+\n     for(String col : collectionNames) {\n-      List<String> collections = checkAlias\n-          ? zkStateReader.getAliases().resolveAliases(col)  // if not an alias, returns collectionName\n+      List<String> collections = (aliases != null)\n+          ? aliases.resolveAliases(col)  // if not an alias, returns collectionName\n           : Collections.singletonList(collectionName);\n       allCollections.addAll(collections);\n     }\n \n     // Lookup all actives slices for these collections\n     List<Slice> slices = allCollections.stream()\n-        .map(collectionsMap::get)\n+        .map(c -> clusterState.getCollectionOrNull(c, true))\n         .filter(Objects::nonNull)\n         .flatMap(docCol -> Arrays.stream(docCol.getActiveSlicesArr()))\n         .collect(Collectors.toList());\n     if (!slices.isEmpty()) {\n-      return slices.toArray(new Slice[slices.size()]);\n-    }\n-\n-    // Check collection case insensitive\n-    for(Entry<String, DocCollection> entry : collectionsMap.entrySet()) {\n-      if(entry.getKey().equalsIgnoreCase(collectionName)) {\n-        return entry.getValue().getActiveSlicesArr();\n-      }\n+      return slices.toArray(new Slice[0]);\n     }\n \n     throw new IOException(\"Slices not found for \" + collectionName);\n   }\n \n   protected void constructStreams() throws IOException {\n+    final ModifiableSolrParams mParams = adjustParams(new ModifiableSolrParams(params));\n+    mParams.set(DISTRIB, \"false\"); // We are the aggregator.\n     try {\n+      final Stream<SolrStream> streamOfSolrStream;\n+      if (streamContext != null && streamContext.get(\"shards\") != null) {\n+        // stream of shard url with core\n+        streamOfSolrStream = getShards(this.zkHost, this.collection, this.streamContext, mParams).stream()\n+            .map(s -> new SolrStream(s, mParams));\n+      } else {\n+        // stream of replicas to reuse the same SolrHttpClient per baseUrl\n+        // avoids re-parsing data we already have in the replicas\n+        streamOfSolrStream = getReplicas(this.zkHost, this.collection, this.streamContext, mParams).stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9c1d7ec3453a46a33ea9f5123d8882a8dbf8245"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNDQ4MTM4OnYy", "diffSide": "RIGHT", "path": "solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNjozNTo1N1rOH2nT0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNjozNTo1N1rOH2nT0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAyOTIwMQ==", "bodyText": "Didn't seem like this method needed to be public and we already get a SolrClient in the open method, so no need to pass it. However, this breaks a public method signature, so is only for Solr 9.x and shouldn't be back-ported to 8.x", "url": "https://github.com/apache/lucene-solr/pull/2067#discussion_r527029201", "createdAt": "2020-11-19T16:35:57Z", "author": {"login": "thelabdude"}, "path": "solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream.java", "diffHunk": "@@ -268,8 +275,7 @@ private Map mapFields(Map fields, Map<String,String> mappings) {\n     return fields;\n   }\n \n-  // temporary...\n-  public TupleStreamParser constructParser(SolrClient server, SolrParams requestParams) throws IOException, SolrServerException {\n+  private TupleStreamParser constructParser(SolrParams requestParams) throws IOException, SolrServerException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9c1d7ec3453a46a33ea9f5123d8882a8dbf8245"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1064, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}