{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNjk4NDU4", "number": 1565, "title": "SOLR-12823: fix test failures", "bodyText": "Description\nFix test failures in CloudHttp2SolrClientTest CloudSolrClientTest TestCloudSolrClientConnections due to previous SOLR-12823 commit.\nSolution\nZkStateReader returns a specific SolrException when expected nodes in the cluster created during cluster initialization do not exist.\nTests\nFixes the tests mentioned above.\nChecklist\nPlease review the following and check all that apply:\n\n I have reviewed the guidelines for How to Contribute and my code conforms to the standards described there to the best of my ability.\n I have created a Jira issue and added the issue ID to my pull request title.\n I have given Solr maintainers access to contribute to my PR branch. (optional but recommended)\n I have developed this patch against the master branch.\n I have run ant precommit and the appropriate test suite.\n I have added tests for my changes.\n I have added documentation for the Ref Guide (for Solr changes only).", "createdAt": "2020-06-10T20:56:50Z", "url": "https://github.com/apache/lucene-solr/pull/1565", "merged": true, "mergeCommit": {"oid": "b4dcbfa3de7c512baab642942320d48fb6f180c4"}, "closed": true, "closedAt": "2020-06-11T15:50:17Z", "author": {"login": "murblanc"}, "timelineItems": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcqAAGwgH2gAyNDMyNjk4NDU4Ojg4M2M0YzkzMDY3MmFhOGIwY2M3ZjIwMjFmMzRhODcyMWU3YzVjNGE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqAQP9gFqTQyODQyOTU3MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "883c4c930672aa8b0cc7f2021f34a8721e7c5c4a", "author": {"user": {"login": "murblanc", "name": "Ilan Ginzburg"}}, "url": "https://github.com/apache/lucene-solr/commit/883c4c930672aa8b0cc7f2021f34a8721e7c5c4a", "committedDate": "2020-06-10T20:51:01Z", "message": "SOLR-12823: fix failures in CloudHttp2SolrClientTest CloudSolrClientTest TestCloudSolrClientConnections"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NDI5NTcx", "url": "https://github.com/apache/lucene-solr/pull/1565#pullrequestreview-428429571", "createdAt": "2020-06-10T21:08:39Z", "commit": {"oid": "883c4c930672aa8b0cc7f2021f34a8721e7c5c4a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMTowODozOVrOGiGZPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMTowODozOVrOGiGZPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQwOTUzNA==", "bodyText": "Could have instead picked another path other than CLUSTER_STATE from those created in ZkController.createClusterZkNodes() and explicitly tested it like was done before, but this seemed cleaner.\nOpen to change.", "url": "https://github.com/apache/lucene-solr/pull/1565#discussion_r438409534", "createdAt": "2020-06-10T21:08:39Z", "author": {"login": "murblanc"}, "path": "solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.java", "diffHunk": "@@ -476,27 +476,32 @@ public synchronized void createClusterStateWatchersAndUpdate() throws KeeperExce\n \n     log.debug(\"Updating cluster state from ZooKeeper... \");\n \n-    // on reconnect of SolrZkClient force refresh and re-add watches.\n-    loadClusterProperties();\n-    refreshLiveNodes(new LiveNodeWatcher());\n-    refreshCollections();\n-    refreshCollectionList(new CollectionsChildWatcher());\n-    refreshAliases(aliasesManager);\n-\n-    if (securityNodeListener != null) {\n-      addSecurityNodeWatcher(pair -> {\n-        ConfigData cd = new ConfigData();\n-        cd.data = pair.first() == null || pair.first().length == 0 ? EMPTY_MAP : Utils.getDeepCopy((Map) fromJSON(pair.first()), 4, false);\n-        cd.version = pair.second() == null ? -1 : pair.second().getVersion();\n-        securityData = cd;\n-        securityNodeListener.run();\n+    try {\n+      // on reconnect of SolrZkClient force refresh and re-add watches.\n+      loadClusterProperties();\n+      refreshLiveNodes(new LiveNodeWatcher());\n+      refreshCollections();\n+      refreshCollectionList(new CollectionsChildWatcher());\n+      refreshAliases(aliasesManager);\n+\n+      if (securityNodeListener != null) {\n+        addSecurityNodeWatcher(pair -> {\n+          ConfigData cd = new ConfigData();\n+          cd.data = pair.first() == null || pair.first().length == 0 ? EMPTY_MAP : Utils.getDeepCopy((Map) fromJSON(pair.first()), 4, false);\n+          cd.version = pair.second() == null ? -1 : pair.second().getVersion();\n+          securityData = cd;\n+          securityNodeListener.run();\n+        });\n+        securityData = getSecurityProps(true);\n+      }\n+\n+      collectionPropsObservers.forEach((k, v) -> {\n+        collectionPropsWatchers.computeIfAbsent(k, PropsWatcher::new).refreshAndWatch(true);\n       });\n-      securityData = getSecurityProps(true);\n+    } catch (KeeperException.NoNodeException nne) {\n+      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE,\n+          \"Cannot connect to cluster at \" + zkClient.getZkServerAddress() + \": cluster not found/not ready\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "883c4c930672aa8b0cc7f2021f34a8721e7c5c4a"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2597, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}