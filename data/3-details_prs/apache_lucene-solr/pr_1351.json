{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4MDI4OTc2", "number": 1351, "title": "LUCENE-9280: Collectors to skip noncompetitive documents", "bodyText": "Similar how scorers can update their iterators to skip non-competitive\ndocuments, collectors and comparators should also provide and update\niterators that allow them to skip non-competive documents\nThis could be useful if we want to sort by some field.", "createdAt": "2020-03-13T22:19:01Z", "url": "https://github.com/apache/lucene-solr/pull/1351", "merged": true, "mergeCommit": {"oid": "b0333ab5c8de3df0c0d781f01c1f6c8e7f12be71"}, "closed": true, "closedAt": "2020-06-23T20:04:59Z", "author": {"login": "mayya-sharipova"}, "timelineItems": {"totalCount": 43, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcNXyvOAH2gAyMzg4MDI4OTc2OjBkNGIyZjVlNDc2YTcyNzBjYTE3OGM2Y2RlM2NhNDZiZmRmNDM0MDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuKtbSAH2gAyMzg4MDI4OTc2OjU1ZjI5NDBlY2EwMzQ1YzE3MGE0YTcyZTBmOGJkMmU3Y2IwNjk4NjQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0d4b2f5e476a7270ca178c6cde3ca46bfdf43405", "author": {"user": {"login": "mayya-sharipova", "name": "Mayya Sharipova"}}, "url": "https://github.com/apache/lucene-solr/commit/0d4b2f5e476a7270ca178c6cde3ca46bfdf43405", "committedDate": "2020-03-13T22:10:20Z", "message": "Collectors to skip noncompetitive documents\n\nSimilar how scorers can update their iterators to skip non-competitive\ndocuments, collectors and comparators should also provide and update\niterators that allow them to skip non-competive documents\n\nThis could be useful if we want to sort by some field."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1OTYxMjcz", "url": "https://github.com/apache/lucene-solr/pull/1351#pullrequestreview-375961273", "createdAt": "2020-03-17T11:48:35Z", "commit": {"oid": "0d4b2f5e476a7270ca178c6cde3ca46bfdf43405"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMTo0ODozNVrOF3YwLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMjowMDo0OVrOF3ZJEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYyMTU0OQ==", "bodyText": "Why do we need this ? We could update the iterator every time a bottom value is set ?", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r393621549", "createdAt": "2020-03-17T11:48:35Z", "author": {"login": "jimczi"}, "path": "lucene/core/src/java/org/apache/lucene/search/FieldComparator.java", "diffHunk": "@@ -928,4 +928,9 @@ public int compareTop(int doc) throws IOException {\n     @Override\n     public void setScorer(Scorable scorer) {}\n   }\n+\n+  public static abstract class IteratorSupplierComparator<T> extends FieldComparator<T> implements LeafFieldComparator {\n+    abstract DocIdSetIterator iterator();\n+    abstract void updateIterator() throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d4b2f5e476a7270ca178c6cde3ca46bfdf43405"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYyMzQxNw==", "bodyText": "we should update the iterator only if it allows to skip \"lots\" of documents, in distance feature query we set the threshold to a 8x reduction.", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r393623417", "createdAt": "2020-03-17T11:52:04Z", "author": {"login": "jimczi"}, "path": "lucene/core/src/java/org/apache/lucene/search/LongDocValuesPointComparator.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.search;\n+\n+import org.apache.lucene.document.LongPoint;\n+import org.apache.lucene.index.DocValues;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.NumericDocValues;\n+import org.apache.lucene.index.PointValues;\n+import org.apache.lucene.util.DocIdSetBuilder;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+\n+import static org.apache.lucene.search.FieldComparator.IteratorSupplierComparator;\n+\n+public class LongDocValuesPointComparator extends IteratorSupplierComparator<Long> {\n+    private final String field;\n+    private final boolean reverse;\n+    private final long[] values;\n+    private long bottom;\n+    private long topValue;\n+    protected NumericDocValues docValues;\n+    private DocIdSetIterator iterator;\n+    private PointValues pointValues;\n+    private int maxDoc;\n+    private int maxDocVisited;\n+\n+    public LongDocValuesPointComparator(String field, int numHits, boolean reverse) {\n+        this.field = field;\n+        this.reverse = reverse;\n+        this.values = new long[numHits];\n+    }\n+\n+    private long getValueForDoc(int doc) throws IOException {\n+        if (docValues.advanceExact(doc)) {\n+            return docValues.longValue();\n+        } else {\n+            return 0L; // TODO: missing value\n+        }\n+    }\n+\n+    @Override\n+    public int compare(int slot1, int slot2) {\n+        return Long.compare(values[slot1], values[slot2]);\n+    }\n+\n+    @Override\n+    public void setTopValue(Long value) {\n+        topValue = value;\n+    }\n+\n+    @Override\n+    public Long value(int slot) {\n+        return Long.valueOf(values[slot]);\n+    }\n+\n+    @Override\n+    public LeafFieldComparator getLeafComparator(LeafReaderContext context) throws IOException {\n+        docValues = DocValues.getNumeric(context.reader(), field);\n+        iterator = docValues;\n+        pointValues = context.reader().getPointValues(field);\n+        maxDoc = context.reader().maxDoc();\n+        maxDocVisited = 0;\n+        return this;\n+    }\n+\n+    @Override\n+    public void setBottom(int slot) {\n+        this.bottom = values[slot];\n+    }\n+\n+    @Override\n+    public int compareBottom(int doc) throws IOException {\n+        return Long.compare(bottom, getValueForDoc(doc));\n+    }\n+\n+    @Override\n+    public int compareTop(int doc) throws IOException {\n+        return Long.compare(topValue, getValueForDoc(doc));\n+    }\n+\n+    @Override\n+    public void copy(int slot, int doc) throws IOException {\n+        maxDocVisited = doc;\n+        values[slot] = getValueForDoc(doc);\n+    }\n+\n+    @Override\n+    public void setScorer(Scorable scorer) throws IOException {}\n+\n+    public DocIdSetIterator iterator() {\n+        return iterator;\n+    }\n+\n+    public void updateIterator() throws IOException {\n+        final byte[] maxValueAsBytes = new byte[Long.BYTES];\n+        final byte[] minValueAsBytes = new byte[Long.BYTES];\n+        if (reverse == false) {\n+            LongPoint.encodeDimension(bottom, maxValueAsBytes, 0);\n+        } else {\n+            LongPoint.encodeDimension(bottom, minValueAsBytes, 0);\n+        };\n+\n+        DocIdSetBuilder result = new DocIdSetBuilder(maxDoc);\n+        PointValues.IntersectVisitor visitor = new PointValues.IntersectVisitor() {\n+            DocIdSetBuilder.BulkAdder adder;\n+            @Override\n+            public void grow(int count) {\n+                adder = result.grow(count);\n+            }\n+\n+            @Override\n+            public void visit(int docID) {\n+                if (docID <= maxDocVisited) {\n+                    return; // Already visited or skipped\n+                }\n+                adder.add(docID);\n+            }\n+\n+            @Override\n+            public void visit(int docID, byte[] packedValue) {\n+                if (docID <= maxDocVisited) {\n+                    return;  // Already visited or skipped\n+                }\n+                if ((reverse == false) && (Arrays.compareUnsigned(packedValue, 0, Long.BYTES, maxValueAsBytes, 0, Long.BYTES) > 0)) {\n+                    return; // Doc's value is too high\n+                }\n+                if ((reverse == true) && (Arrays.compareUnsigned(packedValue, 0, Long.BYTES, minValueAsBytes, 0, Long.BYTES) < 0)) {\n+                    return;  // Doc's value is too low,\n+                }\n+                adder.add(docID); // doc is competitive\n+            }\n+\n+            @Override\n+            public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n+                if ((reverse == false) && (Arrays.compareUnsigned(minPackedValue, 0, Long.BYTES, maxValueAsBytes, 0, Long.BYTES) > 0)) {\n+                   return PointValues.Relation.CELL_OUTSIDE_QUERY;\n+                }\n+                if ((reverse == true) && (Arrays.compareUnsigned(maxPackedValue, 0, Long.BYTES, minValueAsBytes, 0, Long.BYTES) < 0)) {\n+                    return PointValues.Relation.CELL_OUTSIDE_QUERY;\n+                }\n+                return PointValues.Relation.CELL_CROSSES_QUERY;\n+            }\n+        };\n+        pointValues.intersect(visitor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d4b2f5e476a7270ca178c6cde3ca46bfdf43405"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYyNDE1NA==", "bodyText": "We should throttle the checks here (if the bottom value changes frequently). In the distance feature query we start throttling after 256 calls, we should replicate here ?", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r393624154", "createdAt": "2020-03-17T11:53:31Z", "author": {"login": "jimczi"}, "path": "lucene/core/src/java/org/apache/lucene/search/LongDocValuesPointComparator.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.search;\n+\n+import org.apache.lucene.document.LongPoint;\n+import org.apache.lucene.index.DocValues;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.NumericDocValues;\n+import org.apache.lucene.index.PointValues;\n+import org.apache.lucene.util.DocIdSetBuilder;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+\n+import static org.apache.lucene.search.FieldComparator.IteratorSupplierComparator;\n+\n+public class LongDocValuesPointComparator extends IteratorSupplierComparator<Long> {\n+    private final String field;\n+    private final boolean reverse;\n+    private final long[] values;\n+    private long bottom;\n+    private long topValue;\n+    protected NumericDocValues docValues;\n+    private DocIdSetIterator iterator;\n+    private PointValues pointValues;\n+    private int maxDoc;\n+    private int maxDocVisited;\n+\n+    public LongDocValuesPointComparator(String field, int numHits, boolean reverse) {\n+        this.field = field;\n+        this.reverse = reverse;\n+        this.values = new long[numHits];\n+    }\n+\n+    private long getValueForDoc(int doc) throws IOException {\n+        if (docValues.advanceExact(doc)) {\n+            return docValues.longValue();\n+        } else {\n+            return 0L; // TODO: missing value\n+        }\n+    }\n+\n+    @Override\n+    public int compare(int slot1, int slot2) {\n+        return Long.compare(values[slot1], values[slot2]);\n+    }\n+\n+    @Override\n+    public void setTopValue(Long value) {\n+        topValue = value;\n+    }\n+\n+    @Override\n+    public Long value(int slot) {\n+        return Long.valueOf(values[slot]);\n+    }\n+\n+    @Override\n+    public LeafFieldComparator getLeafComparator(LeafReaderContext context) throws IOException {\n+        docValues = DocValues.getNumeric(context.reader(), field);\n+        iterator = docValues;\n+        pointValues = context.reader().getPointValues(field);\n+        maxDoc = context.reader().maxDoc();\n+        maxDocVisited = 0;\n+        return this;\n+    }\n+\n+    @Override\n+    public void setBottom(int slot) {\n+        this.bottom = values[slot];\n+    }\n+\n+    @Override\n+    public int compareBottom(int doc) throws IOException {\n+        return Long.compare(bottom, getValueForDoc(doc));\n+    }\n+\n+    @Override\n+    public int compareTop(int doc) throws IOException {\n+        return Long.compare(topValue, getValueForDoc(doc));\n+    }\n+\n+    @Override\n+    public void copy(int slot, int doc) throws IOException {\n+        maxDocVisited = doc;\n+        values[slot] = getValueForDoc(doc);\n+    }\n+\n+    @Override\n+    public void setScorer(Scorable scorer) throws IOException {}\n+\n+    public DocIdSetIterator iterator() {\n+        return iterator;\n+    }\n+\n+    public void updateIterator() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d4b2f5e476a7270ca178c6cde3ca46bfdf43405"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYyNTA5OA==", "bodyText": "Can you update the iterator here ? We would need to check the total hits threshold so maybe pass the HitsThresholdChecker in the ctr somehow ?", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r393625098", "createdAt": "2020-03-17T11:55:21Z", "author": {"login": "jimczi"}, "path": "lucene/core/src/java/org/apache/lucene/search/LongDocValuesPointComparator.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.search;\n+\n+import org.apache.lucene.document.LongPoint;\n+import org.apache.lucene.index.DocValues;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.NumericDocValues;\n+import org.apache.lucene.index.PointValues;\n+import org.apache.lucene.util.DocIdSetBuilder;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+\n+import static org.apache.lucene.search.FieldComparator.IteratorSupplierComparator;\n+\n+public class LongDocValuesPointComparator extends IteratorSupplierComparator<Long> {\n+    private final String field;\n+    private final boolean reverse;\n+    private final long[] values;\n+    private long bottom;\n+    private long topValue;\n+    protected NumericDocValues docValues;\n+    private DocIdSetIterator iterator;\n+    private PointValues pointValues;\n+    private int maxDoc;\n+    private int maxDocVisited;\n+\n+    public LongDocValuesPointComparator(String field, int numHits, boolean reverse) {\n+        this.field = field;\n+        this.reverse = reverse;\n+        this.values = new long[numHits];\n+    }\n+\n+    private long getValueForDoc(int doc) throws IOException {\n+        if (docValues.advanceExact(doc)) {\n+            return docValues.longValue();\n+        } else {\n+            return 0L; // TODO: missing value\n+        }\n+    }\n+\n+    @Override\n+    public int compare(int slot1, int slot2) {\n+        return Long.compare(values[slot1], values[slot2]);\n+    }\n+\n+    @Override\n+    public void setTopValue(Long value) {\n+        topValue = value;\n+    }\n+\n+    @Override\n+    public Long value(int slot) {\n+        return Long.valueOf(values[slot]);\n+    }\n+\n+    @Override\n+    public LeafFieldComparator getLeafComparator(LeafReaderContext context) throws IOException {\n+        docValues = DocValues.getNumeric(context.reader(), field);\n+        iterator = docValues;\n+        pointValues = context.reader().getPointValues(field);\n+        maxDoc = context.reader().maxDoc();\n+        maxDocVisited = 0;\n+        return this;\n+    }\n+\n+    @Override\n+    public void setBottom(int slot) {\n+        this.bottom = values[slot];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d4b2f5e476a7270ca178c6cde3ca46bfdf43405"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYyNTc1MA==", "bodyText": "you should also take the topValue into  account here (searchAfter) ?", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r393625750", "createdAt": "2020-03-17T11:56:38Z", "author": {"login": "jimczi"}, "path": "lucene/core/src/java/org/apache/lucene/search/LongDocValuesPointComparator.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.search;\n+\n+import org.apache.lucene.document.LongPoint;\n+import org.apache.lucene.index.DocValues;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.NumericDocValues;\n+import org.apache.lucene.index.PointValues;\n+import org.apache.lucene.util.DocIdSetBuilder;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+\n+import static org.apache.lucene.search.FieldComparator.IteratorSupplierComparator;\n+\n+public class LongDocValuesPointComparator extends IteratorSupplierComparator<Long> {\n+    private final String field;\n+    private final boolean reverse;\n+    private final long[] values;\n+    private long bottom;\n+    private long topValue;\n+    protected NumericDocValues docValues;\n+    private DocIdSetIterator iterator;\n+    private PointValues pointValues;\n+    private int maxDoc;\n+    private int maxDocVisited;\n+\n+    public LongDocValuesPointComparator(String field, int numHits, boolean reverse) {\n+        this.field = field;\n+        this.reverse = reverse;\n+        this.values = new long[numHits];\n+    }\n+\n+    private long getValueForDoc(int doc) throws IOException {\n+        if (docValues.advanceExact(doc)) {\n+            return docValues.longValue();\n+        } else {\n+            return 0L; // TODO: missing value\n+        }\n+    }\n+\n+    @Override\n+    public int compare(int slot1, int slot2) {\n+        return Long.compare(values[slot1], values[slot2]);\n+    }\n+\n+    @Override\n+    public void setTopValue(Long value) {\n+        topValue = value;\n+    }\n+\n+    @Override\n+    public Long value(int slot) {\n+        return Long.valueOf(values[slot]);\n+    }\n+\n+    @Override\n+    public LeafFieldComparator getLeafComparator(LeafReaderContext context) throws IOException {\n+        docValues = DocValues.getNumeric(context.reader(), field);\n+        iterator = docValues;\n+        pointValues = context.reader().getPointValues(field);\n+        maxDoc = context.reader().maxDoc();\n+        maxDocVisited = 0;\n+        return this;\n+    }\n+\n+    @Override\n+    public void setBottom(int slot) {\n+        this.bottom = values[slot];\n+    }\n+\n+    @Override\n+    public int compareBottom(int doc) throws IOException {\n+        return Long.compare(bottom, getValueForDoc(doc));\n+    }\n+\n+    @Override\n+    public int compareTop(int doc) throws IOException {\n+        return Long.compare(topValue, getValueForDoc(doc));\n+    }\n+\n+    @Override\n+    public void copy(int slot, int doc) throws IOException {\n+        maxDocVisited = doc;\n+        values[slot] = getValueForDoc(doc);\n+    }\n+\n+    @Override\n+    public void setScorer(Scorable scorer) throws IOException {}\n+\n+    public DocIdSetIterator iterator() {\n+        return iterator;\n+    }\n+\n+    public void updateIterator() throws IOException {\n+        final byte[] maxValueAsBytes = new byte[Long.BYTES];\n+        final byte[] minValueAsBytes = new byte[Long.BYTES];\n+        if (reverse == false) {\n+            LongPoint.encodeDimension(bottom, maxValueAsBytes, 0);\n+        } else {\n+            LongPoint.encodeDimension(bottom, minValueAsBytes, 0);\n+        };\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d4b2f5e476a7270ca178c6cde3ca46bfdf43405"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYyNzkyMw==", "bodyText": "I think we should try to handle the collector iterator early in the chain. The default BulkScorer can be overridden so I wonder how this would look like if we build a conjunction from the main query and the collector iterator directly when building the weight (in IndexSearcher) ?", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r393627923", "createdAt": "2020-03-17T12:00:49Z", "author": {"login": "jimczi"}, "path": "lucene/core/src/java/org/apache/lucene/search/Weight.java", "diffHunk": "@@ -249,6 +249,10 @@ static int scoreRange(LeafCollector collector, DocIdSetIterator iterator, TwoPha\n      *  See <a href=\"https://issues.apache.org/jira/browse/LUCENE-5487\">LUCENE-5487</a> */\n     static void scoreAll(LeafCollector collector, DocIdSetIterator iterator, TwoPhaseIterator twoPhase, Bits acceptDocs) throws IOException {\n       if (twoPhase == null) {\n+        if (collector.iterator() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d4b2f5e476a7270ca178c6cde3ca46bfdf43405"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6384b1591b8054108cc94a0ae4c69da48abcb801", "author": {"user": {"login": "mayya-sharipova", "name": "Mayya Sharipova"}}, "url": "https://github.com/apache/lucene-solr/commit/6384b1591b8054108cc94a0ae4c69da48abcb801", "committedDate": "2020-03-18T21:39:09Z", "message": "Address feedback1"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3Mjc1Mzc4", "url": "https://github.com/apache/lucene-solr/pull/1351#pullrequestreview-377275378", "createdAt": "2020-03-18T22:19:48Z", "commit": {"oid": "6384b1591b8054108cc94a0ae4c69da48abcb801"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMjoxOTo0OFrOF4Y3Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMjozMToxNlrOF4ZLLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3MTk2Mw==", "bodyText": "you can replace this with ConjunctionDISI#intersectIterators ?", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r394671963", "createdAt": "2020-03-18T22:19:48Z", "author": {"login": "jimczi"}, "path": "lucene/core/src/java/org/apache/lucene/search/Weight.java", "diffHunk": "@@ -201,20 +201,54 @@ public long cost() {\n     @Override\n     public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n       collector.setScorer(scorer);\n+      DocIdSetIterator scorerIterator = twoPhase == null? iterator: twoPhase.approximation();\n+      DocIdSetIterator combinedIterator = collector.iterator() == null ? scorerIterator: combineScorerAndCollectorIterators(scorerIterator, collector);\n       if (scorer.docID() == -1 && min == 0 && max == DocIdSetIterator.NO_MORE_DOCS) {\n-        scoreAll(collector, iterator, twoPhase, acceptDocs);\n+        scoreAll(collector, combinedIterator, twoPhase, acceptDocs);\n         return DocIdSetIterator.NO_MORE_DOCS;\n       } else {\n         int doc = scorer.docID();\n-        if (doc < min) {\n-          if (twoPhase == null) {\n-            doc = iterator.advance(min);\n-          } else {\n-            doc = twoPhase.approximation().advance(min);\n+        if (doc < min) scorerIterator.advance(min);\n+        return scoreRange(collector, combinedIterator, twoPhase, acceptDocs, doc, max);\n+      }\n+    }\n+\n+    // conjunction iterator between scorer's iterator and collector's iterator", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6384b1591b8054108cc94a0ae4c69da48abcb801"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3NjcyOA==", "bodyText": "this change is not required ? I see hotspot in the javadoc comment above so  we shouldn't touch it if it's not  required ;).", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r394676728", "createdAt": "2020-03-18T22:30:31Z", "author": {"login": "jimczi"}, "path": "lucene/core/src/java/org/apache/lucene/search/Weight.java", "diffHunk": "@@ -223,44 +257,23 @@ public int score(LeafCollector collector, Bits acceptDocs, int min, int max) thr\n      *  See <a href=\"https://issues.apache.org/jira/browse/LUCENE-5487\">LUCENE-5487</a> */\n     static int scoreRange(LeafCollector collector, DocIdSetIterator iterator, TwoPhaseIterator twoPhase,\n         Bits acceptDocs, int currentDoc, int end) throws IOException {\n-      if (twoPhase == null) {\n-        while (currentDoc < end) {\n-          if (acceptDocs == null || acceptDocs.get(currentDoc)) {\n-            collector.collect(currentDoc);\n-          }\n-          currentDoc = iterator.nextDoc();\n-        }\n-        return currentDoc;\n-      } else {\n-        final DocIdSetIterator approximation = twoPhase.approximation();\n-        while (currentDoc < end) {\n-          if ((acceptDocs == null || acceptDocs.get(currentDoc)) && twoPhase.matches()) {\n-            collector.collect(currentDoc);\n-          }\n-          currentDoc = approximation.nextDoc();\n+      while (currentDoc < end) {\n+        if ((acceptDocs == null || acceptDocs.get(currentDoc)) && (twoPhase == null || twoPhase.matches())) {\n+          collector.collect(currentDoc);\n         }\n-        return currentDoc;\n+        currentDoc = iterator.nextDoc();\n       }\n+      return currentDoc;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6384b1591b8054108cc94a0ae4c69da48abcb801"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3NzAzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (doc < min) scorerIterator.advance(min);\n          \n          \n            \n                    if (doc < min) {\n          \n          \n            \n                      doc = combinedIterator.advance(min);\n          \n          \n            \n                    }\n          \n      \n    \n    \n  \n\n?", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r394677039", "createdAt": "2020-03-18T22:31:16Z", "author": {"login": "jimczi"}, "path": "lucene/core/src/java/org/apache/lucene/search/Weight.java", "diffHunk": "@@ -201,20 +201,54 @@ public long cost() {\n     @Override\n     public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n       collector.setScorer(scorer);\n+      DocIdSetIterator scorerIterator = twoPhase == null? iterator: twoPhase.approximation();\n+      DocIdSetIterator combinedIterator = collector.iterator() == null ? scorerIterator: combineScorerAndCollectorIterators(scorerIterator, collector);\n       if (scorer.docID() == -1 && min == 0 && max == DocIdSetIterator.NO_MORE_DOCS) {\n-        scoreAll(collector, iterator, twoPhase, acceptDocs);\n+        scoreAll(collector, combinedIterator, twoPhase, acceptDocs);\n         return DocIdSetIterator.NO_MORE_DOCS;\n       } else {\n         int doc = scorer.docID();\n-        if (doc < min) {\n-          if (twoPhase == null) {\n-            doc = iterator.advance(min);\n-          } else {\n-            doc = twoPhase.approximation().advance(min);\n+        if (doc < min) scorerIterator.advance(min);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6384b1591b8054108cc94a0ae4c69da48abcb801"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d732d7eb9de67a597f67e91c9774104aa055e293", "author": {"user": {"login": "mayya-sharipova", "name": "Mayya Sharipova"}}, "url": "https://github.com/apache/lucene-solr/commit/d732d7eb9de67a597f67e91c9774104aa055e293", "committedDate": "2020-03-19T19:51:39Z", "message": "Address Feedback2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MDU3ODcx", "url": "https://github.com/apache/lucene-solr/pull/1351#pullrequestreview-378057871", "createdAt": "2020-03-19T20:11:15Z", "commit": {"oid": "d732d7eb9de67a597f67e91c9774104aa055e293"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDoxMToxNlrOF4-smw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDoxMToxNlrOF4-smw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI5MTgwMw==", "bodyText": "@jimczi  I am not very happy about this change because of 2 reasons:\n\nWe  can't use hitsThresholdChecker.isThresholdReached as it checks for greater than numHits, but we need to check starting with equal, as if there are no competitive docs later setBottom will not be called.\nDo you know the reason why hitsThresholdChecker.isThresholdReached  checks for greater than numHits and not greater or equal numHits?\ntotalHitsRelation may not end up to be set to TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO, as we set it only when we have  later competitive hits.\n\nI think it is better to have a previous implementation with a dedicated updateIterator function called from TopFieldCollector. WDYT?", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r395291803", "createdAt": "2020-03-19T20:11:16Z", "author": {"login": "mayya-sharipova"}, "path": "lucene/core/src/java/org/apache/lucene/search/LongDocValuesPointComparator.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.search;\n+\n+import org.apache.lucene.document.LongPoint;\n+import org.apache.lucene.index.DocValues;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.NumericDocValues;\n+import org.apache.lucene.index.PointValues;\n+import org.apache.lucene.util.DocIdSetBuilder;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+\n+import static org.apache.lucene.search.FieldComparator.IteratorSupplierComparator;\n+\n+public class LongDocValuesPointComparator extends IteratorSupplierComparator<Long> {\n+    private final String field;\n+    private final int numHits;\n+    private final boolean reverse;\n+    private final long missingValue;\n+    private final long[] values;\n+    private long bottom;\n+    private long topValue;\n+    boolean hasTopValue = false; // indicates that topValue for searchAfter is set\n+    protected NumericDocValues docValues;\n+    private DocIdSetIterator iterator;\n+    private PointValues pointValues;\n+    private HitsThresholdChecker hitsThresholdChecker = null;\n+    private int maxDoc;\n+    private int maxDocVisited;\n+    private int updateCounter = 0;\n+\n+    public LongDocValuesPointComparator(String field, int numHits, boolean reverse, Long missingValue) {\n+        this.field = field;\n+        this.numHits = numHits;\n+        this.reverse = reverse;\n+        this.missingValue = missingValue != null ? missingValue : 0L;\n+        this.values = new long[numHits];\n+    }\n+\n+    @Override\n+    void setHitsThresholdChecker(HitsThresholdChecker hitsThresholdChecker) {\n+        this.hitsThresholdChecker = hitsThresholdChecker;\n+    }\n+\n+    private long getValueForDoc(int doc) throws IOException {\n+        if (docValues.advanceExact(doc)) {\n+            return docValues.longValue();\n+        } else {\n+            return missingValue;\n+        }\n+    }\n+\n+    @Override\n+    public int compare(int slot1, int slot2) {\n+        return Long.compare(values[slot1], values[slot2]);\n+    }\n+\n+    @Override\n+    public void setTopValue(Long value) {\n+        topValue = value;\n+        hasTopValue = true;\n+    }\n+\n+    @Override\n+    public Long value(int slot) {\n+        return Long.valueOf(values[slot]);\n+    }\n+\n+    @Override\n+    public LeafFieldComparator getLeafComparator(LeafReaderContext context) throws IOException {\n+        docValues = DocValues.getNumeric(context.reader(), field);\n+        iterator = docValues;\n+        pointValues = context.reader().getPointValues(field);\n+        maxDoc = context.reader().maxDoc();\n+        maxDocVisited = 0;\n+        return this;\n+    }\n+\n+    @Override\n+    public void setBottom(int slot) throws IOException {\n+        this.bottom = values[slot];\n+        // can't use hitsThresholdChecker.isThresholdReached() as it uses > numHits,\n+        // while we want to update iterator as soon as threshold reaches numHits\n+        if (hitsThresholdChecker != null && (hitsThresholdChecker.getHitsThreshold() >= numHits)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d732d7eb9de67a597f67e91c9774104aa055e293"}, "originalPosition": 101}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "209bc2110558759abfb314e6f88993c32d6581db", "author": {"user": {"login": "mayya-sharipova", "name": "Mayya Sharipova"}}, "url": "https://github.com/apache/lucene-solr/commit/209bc2110558759abfb314e6f88993c32d6581db", "committedDate": "2020-03-20T21:50:35Z", "message": "Adjust tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MDM1NzY3", "url": "https://github.com/apache/lucene-solr/pull/1351#pullrequestreview-379035767", "createdAt": "2020-03-22T18:50:56Z", "commit": {"oid": "209bc2110558759abfb314e6f88993c32d6581db"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxODo1MDo1NlrOF5xuVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxODo1Mjo1MlrOF5xvEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjEyNzgzMQ==", "bodyText": "The name seems to indicate that this is something that compares IteratorSuppliers, when in fact it is something that is a comparator that also supplies iterators. I'm not sure I understand yet where it fits, but given that, a better name might be IterableComparator?", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r396127831", "createdAt": "2020-03-22T18:50:56Z", "author": {"login": "msokolov"}, "path": "lucene/core/src/java/org/apache/lucene/search/FieldComparator.java", "diffHunk": "@@ -928,4 +928,9 @@ public int compareTop(int doc) throws IOException {\n     @Override\n     public void setScorer(Scorable scorer) {}\n   }\n+\n+  public static abstract class IteratorSupplierComparator<T> extends FieldComparator<T> implements LeafFieldComparator {\n+    abstract DocIdSetIterator iterator();\n+    abstract void updateIterator() throws IOException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYyMTU0OQ=="}, "originalCommit": {"oid": "0d4b2f5e476a7270ca178c6cde3ca46bfdf43405"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjEyODAxOQ==", "bodyText": "Can we move this initialization into the constructor, or is this not shareable and must be local storage? I think we call updateIterator in collect() right? If we can avoid object creation in an inner loop, that would be good. We could create both arrays unconditionally I think and set a boolean here to be used below?", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r396128019", "createdAt": "2020-03-22T18:52:52Z", "author": {"login": "msokolov"}, "path": "lucene/core/src/java/org/apache/lucene/search/LongDocValuesPointComparator.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.search;\n+\n+import org.apache.lucene.document.LongPoint;\n+import org.apache.lucene.index.DocValues;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.NumericDocValues;\n+import org.apache.lucene.index.PointValues;\n+import org.apache.lucene.util.DocIdSetBuilder;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+\n+import static org.apache.lucene.search.FieldComparator.IteratorSupplierComparator;\n+\n+public class LongDocValuesPointComparator extends IteratorSupplierComparator<Long> {\n+    private final String field;\n+    private final boolean reverse;\n+    private final long missingValue;\n+    private final long[] values;\n+    private long bottom;\n+    private long topValue;\n+    boolean hasTopValue = false; // indicates that topValue for searchAfter is set\n+    protected NumericDocValues docValues;\n+    private DocIdSetIterator iterator;\n+    private PointValues pointValues;\n+    private int maxDoc;\n+    private int maxDocVisited;\n+    private int updateCounter = 0;\n+\n+    public LongDocValuesPointComparator(String field, int numHits, boolean reverse, Long missingValue) {\n+        this.field = field;\n+        this.reverse = reverse;\n+        this.missingValue = missingValue != null ? missingValue : 0L;\n+        this.values = new long[numHits];\n+    }\n+\n+    private long getValueForDoc(int doc) throws IOException {\n+        if (docValues.advanceExact(doc)) {\n+            return docValues.longValue();\n+        } else {\n+            return missingValue;\n+        }\n+    }\n+\n+    @Override\n+    public int compare(int slot1, int slot2) {\n+        return Long.compare(values[slot1], values[slot2]);\n+    }\n+\n+    @Override\n+    public void setTopValue(Long value) {\n+        topValue = value;\n+        hasTopValue = true;\n+    }\n+\n+    @Override\n+    public Long value(int slot) {\n+        return Long.valueOf(values[slot]);\n+    }\n+\n+    @Override\n+    public LeafFieldComparator getLeafComparator(LeafReaderContext context) throws IOException {\n+        docValues = DocValues.getNumeric(context.reader(), field);\n+        iterator = docValues;\n+        pointValues = context.reader().getPointValues(field);\n+        maxDoc = context.reader().maxDoc();\n+        maxDocVisited = 0;\n+        return this;\n+    }\n+\n+    @Override\n+    public void setBottom(int slot) throws IOException {\n+        this.bottom = values[slot];\n+    }\n+\n+    @Override\n+    public int compareBottom(int doc) throws IOException {\n+        return Long.compare(bottom, getValueForDoc(doc));\n+    }\n+\n+    @Override\n+    public int compareTop(int doc) throws IOException {\n+        return Long.compare(topValue, getValueForDoc(doc));\n+    }\n+\n+    @Override\n+    public void copy(int slot, int doc) throws IOException {\n+        maxDocVisited = doc;\n+        values[slot] = getValueForDoc(doc);\n+    }\n+\n+    @Override\n+    public void setScorer(Scorable scorer) throws IOException {}\n+\n+    public DocIdSetIterator iterator() {\n+        return iterator;\n+    }\n+\n+    // update its iterator to include possibly only docs that are \"stronger\" than the current bottom entry\n+    public void updateIterator() throws IOException {\n+        updateCounter++;\n+        if (updateCounter > 256 && (updateCounter & 0x1f) != 0x1f) { // Start sampling if we get called too much\n+            return;\n+        }\n+\n+        final byte[] maxValueAsBytes = reverse == false ? new byte[Long.BYTES] : hasTopValue ? new byte[Long.BYTES]: null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "209bc2110558759abfb314e6f88993c32d6581db"}, "originalPosition": 123}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95e1bc19f6561bb8e0b4709334d3e607604cfb5c", "author": {"user": {"login": "mayya-sharipova", "name": "Mayya Sharipova"}}, "url": "https://github.com/apache/lucene-solr/commit/95e1bc19f6561bb8e0b4709334d3e607604cfb5c", "committedDate": "2020-03-23T18:57:47Z", "message": "Address feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e3c7da860cd0fde96946505c32ed4d27f5c9b55", "author": {"user": {"login": "mayya-sharipova", "name": "Mayya Sharipova"}}, "url": "https://github.com/apache/lucene-solr/commit/0e3c7da860cd0fde96946505c32ed4d27f5c9b55", "committedDate": "2020-03-25T16:28:19Z", "message": "Add docs and correct bugs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7e9507888fcdc89a5b90357e183ff7d2bd4961b", "author": {"user": {"login": "mayya-sharipova", "name": "Mayya Sharipova"}}, "url": "https://github.com/apache/lucene-solr/commit/d7e9507888fcdc89a5b90357e183ff7d2bd4961b", "committedDate": "2020-03-25T20:16:32Z", "message": "Make constructor of LongDocValuesPointSortField public"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1154d4a0825d61415bff03e595904a1b01e22457", "author": {"user": {"login": "mayya-sharipova", "name": "Mayya Sharipova"}}, "url": "https://github.com/apache/lucene-solr/commit/1154d4a0825d61415bff03e595904a1b01e22457", "committedDate": "2020-03-26T20:05:07Z", "message": "Adjust docs and tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNDM2NjA3", "url": "https://github.com/apache/lucene-solr/pull/1351#pullrequestreview-383436607", "createdAt": "2020-03-29T17:45:11Z", "commit": {"oid": "1154d4a0825d61415bff03e595904a1b01e22457"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxNzo0NToxMVrOF9Tr7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxNzo0NToxMVrOF9Tr7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgyOTk5OA==", "bodyText": "Can these be final, and allocated only in the constructor? I think it might be clearer to add a boolean \"hasTopValues\" and set that in setTopValue, rather than use the existence of these byte[]? Then you could make these final and eliminate the local variables where they get copied below", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r399829998", "createdAt": "2020-03-29T17:45:11Z", "author": {"login": "msokolov"}, "path": "lucene/core/src/java/org/apache/lucene/search/LongDocValuesPointComparator.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.search;\n+\n+import org.apache.lucene.document.LongPoint;\n+import org.apache.lucene.index.DocValues;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.NumericDocValues;\n+import org.apache.lucene.index.PointValues;\n+import org.apache.lucene.util.DocIdSetBuilder;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+\n+import static org.apache.lucene.search.FieldComparator.IterableComparator;\n+\n+/**\n+ * Expert: a FieldComparator class for long types corresponding to\n+ * {@link LongDocValuesPointSortField}.\n+ * This comparator provides {@code iterator} over competitive documents,\n+ * that are stronger than the current {@code bottom} value.\n+ */\n+public class LongDocValuesPointComparator extends IterableComparator<Long> {\n+    private final String field;\n+    private final boolean reverse;\n+    private final long missingValue;\n+    private final long[] values;\n+    private long bottom;\n+    private long topValue;\n+    protected NumericDocValues docValues;\n+    private DocIdSetIterator iterator;\n+    private PointValues pointValues;\n+    private int maxDoc;\n+    private int maxDocVisited;\n+    private int updateCounter = 0;\n+    private byte[] cmaxValueAsBytes = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1154d4a0825d61415bff03e595904a1b01e22457"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNDM3ODEy", "url": "https://github.com/apache/lucene-solr/pull/1351#pullrequestreview-383437812", "createdAt": "2020-03-29T17:58:02Z", "commit": {"oid": "1154d4a0825d61415bff03e595904a1b01e22457"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39379a711936b38224dc249b1dfb20bb2f34e25f", "author": {"user": {"login": "mayya-sharipova", "name": "Mayya Sharipova"}}, "url": "https://github.com/apache/lucene-solr/commit/39379a711936b38224dc249b1dfb20bb2f34e25f", "committedDate": "2020-03-30T14:34:05Z", "message": "Optimized sort of field without points\n\nEnsure optimized sort works as expected (as long sort)\nof a field that is not indexed with points."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NTE0OTQw", "url": "https://github.com/apache/lucene-solr/pull/1351#pullrequestreview-384514940", "createdAt": "2020-03-31T08:35:27Z", "commit": {"oid": "39379a711936b38224dc249b1dfb20bb2f34e25f"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODozNToyN1rOF-LBdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODo0Mjo0NFrOF-LSxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczNjYzMQ==", "bodyText": "maybe add a isExhaustive() method on the enum to avoid these large conditions?", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r400736631", "createdAt": "2020-03-31T08:35:27Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.java", "diffHunk": "@@ -115,7 +115,7 @@ public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float bo\n       return new ConstantScoreWeight(this, boost) {\n         @Override\n         public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n-          if (scoreMode == ScoreMode.TOP_SCORES) {\n+          if (scoreMode == ScoreMode.TOP_SCORES || scoreMode == ScoreMode.TOP_DOCS || scoreMode == ScoreMode.TOP_DOCS_WITH_SCORES) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39379a711936b38224dc249b1dfb20bb2f34e25f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczOTUzMw==", "bodyText": "maybe give it a more descriptive name, e.g. competitiveFilter", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r400739533", "createdAt": "2020-03-31T08:40:15Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/LeafCollector.java", "diffHunk": "@@ -93,4 +93,11 @@\n    */\n   void collect(int doc) throws IOException;\n \n+  /*\n+   * optionally returns an iterator over competitive documents\n+   */\n+  default DocIdSetIterator iterator() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39379a711936b38224dc249b1dfb20bb2f34e25f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczOTk1OQ==", "bodyText": "Let's make it proper javadocs, not comments?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /*\n          \n          \n            \n              /**", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r400739959", "createdAt": "2020-03-31T08:41:01Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/LeafCollector.java", "diffHunk": "@@ -93,4 +93,11 @@\n    */\n   void collect(int doc) throws IOException;\n \n+  /*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39379a711936b38224dc249b1dfb20bb2f34e25f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc0MTA2Mw==", "bodyText": "Can you document that the default is to return null which Lucene interprets as the collector doesn't filter any documents. It's probably worth making explicit as null iterators are elsewhere interpreted as matching no documents.", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r400741063", "createdAt": "2020-03-31T08:42:44Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/LeafCollector.java", "diffHunk": "@@ -93,4 +93,11 @@\n    */\n   void collect(int doc) throws IOException;\n \n+  /*\n+   * optionally returns an iterator over competitive documents", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39379a711936b38224dc249b1dfb20bb2f34e25f"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c628f7aaccf0d949e709334ef1db303c518ff64", "author": {"user": {"login": "mayya-sharipova", "name": "Mayya Sharipova"}}, "url": "https://github.com/apache/lucene-solr/commit/6c628f7aaccf0d949e709334ef1db303c518ff64", "committedDate": "2020-03-31T18:22:12Z", "message": "Address Adrien's feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eeb23c11de59d0fe1965a235d1bf80d284a0fa8b", "author": {"user": {"login": "mayya-sharipova", "name": "Mayya Sharipova"}}, "url": "https://github.com/apache/lucene-solr/commit/eeb23c11de59d0fe1965a235d1bf80d284a0fa8b", "committedDate": "2020-04-02T19:20:46Z", "message": "Add IterableFieldComparator\n\nAdd a decorator for FieldComparatori to add a functionality to skip\n over non-competitive docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89d241eb5ff320fbd43de7cda1b0a6b2a8bdcbde", "author": {"user": {"login": "mayya-sharipova", "name": "Mayya Sharipova"}}, "url": "https://github.com/apache/lucene-solr/commit/89d241eb5ff320fbd43de7cda1b0a6b2a8bdcbde", "committedDate": "2020-04-06T21:50:59Z", "message": "Address Alan's comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4448499f0f6c3bdcb7c641e4727d2329dfe7240f", "author": {"user": {"login": "mayya-sharipova", "name": "Mayya Sharipova"}}, "url": "https://github.com/apache/lucene-solr/commit/4448499f0f6c3bdcb7c641e4727d2329dfe7240f", "committedDate": "2020-04-09T00:15:45Z", "message": "Address Alan's feedback2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNTk3Njg0", "url": "https://github.com/apache/lucene-solr/pull/1351#pullrequestreview-390597684", "createdAt": "2020-04-09T08:38:21Z", "commit": {"oid": "4448499f0f6c3bdcb7c641e4727d2329dfe7240f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODozODoyMVrOGDPHuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODo1MTo0M1rOGDPl_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0NjY0OA==", "bodyText": "Can we merge this with the  if statement immediately above it? That way scoreMode can stay final", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r406046648", "createdAt": "2020-04-09T08:38:21Z", "author": {"login": "romseygeek"}, "path": "lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.java", "diffHunk": "@@ -302,20 +312,27 @@ private TopFieldCollector(FieldValueHitQueue<Entry> pq, int numHits,\n     this.numHits = numHits;\n     this.hitsThresholdChecker = hitsThresholdChecker;\n     this.numComparators = pq.getComparators().length;\n-    FieldComparator<?> fieldComparator = pq.getComparators()[0];\n+    FieldComparator<?> firstComparator = pq.getComparators()[0];\n     int reverseMul = pq.reverseMul[0];\n-    if (fieldComparator.getClass().equals(FieldComparator.RelevanceComparator.class)\n+    if (firstComparator.getClass().equals(FieldComparator.RelevanceComparator.class)\n           && reverseMul == 1 // if the natural sort is preserved (sort by descending relevance)\n           && hitsThresholdChecker.getHitsThreshold() != Integer.MAX_VALUE) {\n-      firstComparator = (FieldComparator.RelevanceComparator) fieldComparator;\n+      relevanceComparator = (FieldComparator.RelevanceComparator) firstComparator;\n       scoreMode = ScoreMode.TOP_SCORES;\n       canSetMinScore = true;\n     } else {\n-      firstComparator = null;\n+      relevanceComparator = null;\n       scoreMode = needsScores ? ScoreMode.COMPLETE : ScoreMode.COMPLETE_NO_SCORES;\n       canSetMinScore = false;\n     }\n     this.minScoreAcc = minScoreAcc;\n+\n+    if ((firstComparator instanceof FilteringFieldComparator) && (hitsThresholdChecker.getHitsThreshold() != Integer.MAX_VALUE)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4448499f0f6c3bdcb7c641e4727d2329dfe7240f"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA1MzAxNg==", "bodyText": "Can we avoid having to set this explicitly? The fact that we're setting a totalHitsThreshold on the collector should be enough to tell the comparator that we're enabling skipping.  Maybe have a SkippableSortField implementation that wraps an existing SortField and overrides getComparator(); then in TopFieldCollector.create() we check if totalHitsThreshold is set and if so rebuild the sort", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r406053016", "createdAt": "2020-04-09T08:49:17Z", "author": {"login": "romseygeek"}, "path": "lucene/core/src/test/org/apache/lucene/search/TestSortOptimization.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.search;\n+\n+import org.apache.lucene.document.Document;\n+import org.apache.lucene.document.FloatDocValuesField;\n+import org.apache.lucene.document.LongPoint;\n+import org.apache.lucene.document.FloatPoint;\n+import org.apache.lucene.document.NumericDocValuesField;\n+import org.apache.lucene.index.DirectoryReader;\n+import org.apache.lucene.index.IndexReader;\n+import org.apache.lucene.index.IndexWriter;\n+import org.apache.lucene.index.IndexWriterConfig;\n+import org.apache.lucene.store.Directory;\n+import org.apache.lucene.util.LuceneTestCase;\n+\n+import java.io.IOException;\n+\n+public class TestSortOptimization extends LuceneTestCase {\n+\n+  public void testLongSortOptimization() throws IOException {\n+    final Directory dir = newDirectory();\n+    final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig());\n+    final int numDocs = atLeast(10000);\n+    for (int i = 0; i < numDocs; ++i) {\n+      final Document doc = new Document();\n+      doc.add(new NumericDocValuesField(\"my_field\", i));\n+      doc.add(new LongPoint(\"my_field\", i));\n+      writer.addDocument(doc);\n+    }\n+    final IndexReader reader = DirectoryReader.open(writer);\n+    IndexSearcher searcher = new IndexSearcher(reader);\n+    final SortField sortField = new SortField(\"my_field\", SortField.Type.LONG);\n+    sortField.allowFilterNonCompetitveDocs();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4448499f0f6c3bdcb7c641e4727d2329dfe7240f"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA1NDM5OA==", "bodyText": "Rather than defining these as abstract, maybe have two final fields set in a constructor?  Then the definitions become much less verbose: TOP_DOCS_WITH_SCORES(true, false);", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r406054398", "createdAt": "2020-04-09T08:51:43Z", "author": {"login": "romseygeek"}, "path": "lucene/core/src/java/org/apache/lucene/search/ScoreMode.java", "diffHunk": "@@ -51,10 +59,51 @@ public boolean needsScores() {\n     public boolean needsScores() {\n       return true;\n     }\n+    @Override\n+    public boolean isExhaustive() {\n+      return false;\n+    }\n+  },\n+\n+  /**\n+   * ScoreMode for top field collectors that can provide their own iterators,\n+   * to optionally allow to skip for non-competitive docs\n+   */\n+  TOP_DOCS {\n+    @Override\n+    public boolean needsScores() {\n+      return false;\n+    }\n+    @Override\n+    public boolean isExhaustive() {\n+      return false;\n+    }\n+  },\n+\n+  /**\n+   * ScoreMode for top field collectors that can provide their own iterators,\n+   * to optionally allow to skip for non-competitive docs.\n+   * This mode is used when there is a secondary sort by _score.\n+   */\n+  TOP_DOCS_WITH_SCORES {\n+    @Override\n+    public boolean needsScores() {\n+      return true;\n+    }\n+    @Override\n+    public boolean isExhaustive() {\n+      return false;\n+    }\n   };\n \n   /**\n    * Whether this {@link ScoreMode} needs to compute scores.\n    */\n   public abstract boolean needsScores();\n+\n+  /**\n+   * Returns {@code true} if for this {@link ScoreMode} it is necessary to process all documents,\n+   * or {@code false} if is enough to go through top documents only.\n+   */\n+  public abstract boolean isExhaustive();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4448499f0f6c3bdcb7c641e4727d2329dfe7240f"}, "originalPosition": 72}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "719882eec45546e5643bb229624d6354eea05e49", "author": {"user": {"login": "mayya-sharipova", "name": "Mayya Sharipova"}}, "url": "https://github.com/apache/lucene-solr/commit/719882eec45546e5643bb229624d6354eea05e49", "committedDate": "2020-04-11T20:31:21Z", "message": "Address Alan's feedback 3"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMjAxNjU3", "url": "https://github.com/apache/lucene-solr/pull/1351#pullrequestreview-392201657", "createdAt": "2020-04-13T15:02:57Z", "commit": {"oid": "719882eec45546e5643bb229624d6354eea05e49"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNTowMjo1N1rOGEpVnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNTowNzo0NlrOGEpfcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUyNDc2NA==", "bodyText": "Do we need to distinguish between TOP_SCORES and TOP_DOCS_WITH_SCORES?", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r407524764", "createdAt": "2020-04-13T15:02:57Z", "author": {"login": "romseygeek"}, "path": "lucene/core/src/java/org/apache/lucene/search/ScoreMode.java", "diffHunk": "@@ -24,37 +24,53 @@\n   /**\n    * Produced scorers will allow visiting all matches and get their score.\n    */\n-  COMPLETE {\n-    @Override\n-    public boolean needsScores() {\n-      return true;\n-    }\n-  },\n+  COMPLETE(true, true),\n \n   /**\n    * Produced scorers will allow visiting all matches but scores won't be\n    * available.\n    */\n-  COMPLETE_NO_SCORES {\n-    @Override\n-    public boolean needsScores() {\n-      return false;\n-    }\n-  },\n+  COMPLETE_NO_SCORES(true, false),\n \n   /**\n    * Produced scorers will optionally allow skipping over non-competitive\n    * hits using the {@link Scorer#setMinCompetitiveScore(float)} API.\n    */\n-  TOP_SCORES {\n-    @Override\n-    public boolean needsScores() {\n-      return true;\n-    }\n-  };\n+  TOP_SCORES(false, true),\n+\n+  /**\n+   * ScoreMode for top field collectors that can provide their own iterators,\n+   * to optionally allow to skip for non-competitive docs\n+   */\n+  TOP_DOCS(false, false),\n+\n+  /**\n+   * ScoreMode for top field collectors that can provide their own iterators,\n+   * to optionally allow to skip for non-competitive docs.\n+   * This mode is used when there is a secondary sort by _score.\n+   */\n+  TOP_DOCS_WITH_SCORES(false, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "719882eec45546e5643bb229624d6354eea05e49"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUyNTI4Nw==", "bodyText": "nit: extra line", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r407525287", "createdAt": "2020-04-13T15:03:49Z", "author": {"login": "romseygeek"}, "path": "lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.java", "diffHunk": "@@ -30,6 +30,7 @@\n import org.apache.lucene.search.MaxScoreAccumulator.DocAndScore;\n import org.apache.lucene.search.TotalHits.Relation;\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "719882eec45546e5643bb229624d6354eea05e49"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUyNjUxOA==", "bodyText": "I think this should be done in FieldValueHitQueue.create() below - pass in a boolean to indicate that we want to skip hits if we can, and then do the wrapping/rewriting/whatever it ends up being as a part of building the sort queue", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r407526518", "createdAt": "2020-04-13T15:06:13Z", "author": {"login": "romseygeek"}, "path": "lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.java", "diffHunk": "@@ -432,6 +462,12 @@ static TopFieldCollector create(Sort sort, int numHits, FieldDoc after,\n       throw new IllegalArgumentException(\"hitsThresholdChecker should not be null\");\n     }\n \n+    // here we assume that if hitsThreshold was set, we let the corresponding comparator to skip non-competitive docs\n+    // It is beneficial for the 1st field only to skip non-competitive docs\n+    if (hitsThresholdChecker.getHitsThreshold() != Integer.MAX_VALUE) {\n+      sort.fields[0].allowFilterNonCompetitveDocs();\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "719882eec45546e5643bb229624d6354eea05e49"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUyNzI4Mg==", "bodyText": "Is this necessary?", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r407527282", "createdAt": "2020-04-13T15:07:46Z", "author": {"login": "romseygeek"}, "path": "lucene/test-framework/src/java/org/apache/lucene/search/AssertingLeafCollector.java", "diffHunk": "@@ -50,5 +50,9 @@ public void collect(int doc) throws IOException {\n     lastCollected = doc;\n   }\n \n+  @Override\n+  public DocIdSetIterator filterIterator(DocIdSetIterator scorerIterator) {\n+    return super.filterIterator(scorerIterator);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "719882eec45546e5643bb229624d6354eea05e49"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c84fe5ed90b866dcbe41979dc6ba2ce2a874d59b", "author": {"user": {"login": "mayya-sharipova", "name": "Mayya Sharipova"}}, "url": "https://github.com/apache/lucene-solr/commit/c84fe5ed90b866dcbe41979dc6ba2ce2a874d59b", "committedDate": "2020-04-15T00:59:00Z", "message": "Address Alan's feedback 4"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NzAwMjU4", "url": "https://github.com/apache/lucene-solr/pull/1351#pullrequestreview-387700258", "createdAt": "2020-04-04T13:39:46Z", "commit": {"oid": "eeb23c11de59d0fe1965a235d1bf80d284a0fa8b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOTozOToxMVrOGFxzqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOTozOToxMVrOGFxzqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcxMjEwNw==", "bodyText": "This allows for some hacks like returning an iterator that matches more docs than the scorer. I liked the previous approach that returned an iterator better.", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r408712107", "createdAt": "2020-04-15T09:39:11Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/LeafCollector.java", "diffHunk": "@@ -93,4 +93,16 @@\n    */\n   void collect(int doc) throws IOException;\n \n+  /**\n+   * Optionally creates a view of the scorerIterator where only competitive documents\n+   * in the scorerIterator are kept and non-competitive are skipped.\n+   *\n+   * Collectors should delegate this method to their comparators if\n+   * their comparators provide the skipping functionality over non-competitive docs.\n+   * The default is to return the same iterator which is interpreted as the collector doesn't filter any documents.\n+   */\n+  default DocIdSetIterator filterIterator(DocIdSetIterator scorerIterator) {\n+    return scorerIterator;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c84fe5ed90b866dcbe41979dc6ba2ce2a874d59b"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7ef9b69567bd4c80c42f56c612ff95ceec6e26a", "author": {"user": {"login": "mayya-sharipova", "name": "Mayya Sharipova"}}, "url": "https://github.com/apache/lucene-solr/commit/d7ef9b69567bd4c80c42f56c612ff95ceec6e26a", "committedDate": "2020-04-15T19:18:26Z", "message": "Collector returns comparator's iterator"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0NDI4OTgx", "url": "https://github.com/apache/lucene-solr/pull/1351#pullrequestreview-394428981", "createdAt": "2020-04-16T08:54:14Z", "commit": {"oid": "d7ef9b69567bd4c80c42f56c612ff95ceec6e26a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NDM2NDk4", "url": "https://github.com/apache/lucene-solr/pull/1351#pullrequestreview-395436498", "createdAt": "2020-04-17T13:07:37Z", "commit": {"oid": "d7ef9b69567bd4c80c42f56c612ff95ceec6e26a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1OTA3MTgz", "url": "https://github.com/apache/lucene-solr/pull/1351#pullrequestreview-395907183", "createdAt": "2020-04-18T11:53:03Z", "commit": {"oid": "d7ef9b69567bd4c80c42f56c612ff95ceec6e26a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxMTo1MzowM1rOGHqatQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxMjozOToxNFrOGHqszA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY4ODE4MQ==", "bodyText": "It feels wrong to have an iterator - which is a per-segment object - on a FieldComparator - which is a top-level object. Can we only have it on the LeafComparator?", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r410688181", "createdAt": "2020-04-18T11:53:03Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/FilteringFieldComparator.java", "diffHunk": "@@ -0,0 +1,350 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.search;\n+\n+import org.apache.lucene.document.LongPoint;\n+import org.apache.lucene.document.IntPoint;\n+import org.apache.lucene.document.DoublePoint;\n+import org.apache.lucene.document.FloatPoint;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.PointValues;\n+import org.apache.lucene.util.DocIdSetBuilder;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+\n+/**\n+ * Decorates a wrapped FieldComparator to add a functionality to skip over non-competitive docs.\n+ * FilteringFieldComparator provides two additional functions for a FieldComparator:\n+ * 1) {@code competitiveIterator()} that returns an iterator over\n+ *      competitive docs that are stronger than already collected docs.\n+ * 2) {@code setCanUpdateIterator()} that notifies the comparator when it is ok to start updating its internal iterator.\n+ *  This method is called from a collector to inform the comparator to start updating its iterator.\n+ */\n+public abstract class FilteringFieldComparator<T> extends FieldComparator<T> {\n+    final FieldComparator<T> in;\n+    protected DocIdSetIterator iterator = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7ef9b69567bd4c80c42f56c612ff95ceec6e26a"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY4ODQzNw==", "bodyText": "I know some existing comparators do this but it'd be cleaner to not implement FieldComparator and LeafFieldComparator in the same class?", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r410688437", "createdAt": "2020-04-18T11:55:34Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/FilteringFieldComparator.java", "diffHunk": "@@ -0,0 +1,350 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.search;\n+\n+import org.apache.lucene.document.LongPoint;\n+import org.apache.lucene.document.IntPoint;\n+import org.apache.lucene.document.DoublePoint;\n+import org.apache.lucene.document.FloatPoint;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.PointValues;\n+import org.apache.lucene.util.DocIdSetBuilder;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+\n+/**\n+ * Decorates a wrapped FieldComparator to add a functionality to skip over non-competitive docs.\n+ * FilteringFieldComparator provides two additional functions for a FieldComparator:\n+ * 1) {@code competitiveIterator()} that returns an iterator over\n+ *      competitive docs that are stronger than already collected docs.\n+ * 2) {@code setCanUpdateIterator()} that notifies the comparator when it is ok to start updating its internal iterator.\n+ *  This method is called from a collector to inform the comparator to start updating its iterator.\n+ */\n+public abstract class FilteringFieldComparator<T> extends FieldComparator<T> {\n+    final FieldComparator<T> in;\n+    protected DocIdSetIterator iterator = null;\n+\n+    public FilteringFieldComparator(FieldComparator<T> in) {\n+        this.in = in;\n+    }\n+\n+    protected abstract void setCanUpdateIterator() throws IOException;\n+\n+    @Override\n+    public int compare(int slot1, int slot2) {\n+        return in.compare(slot1, slot2);\n+    }\n+\n+    @Override\n+    public T value(int slot) {\n+        return in.value(slot);\n+    }\n+\n+    @Override\n+    public void setTopValue(T value) {\n+        in.setTopValue(value);\n+    }\n+\n+    @Override\n+    public int compareValues(T first, T second) {\n+        return in.compareValues(first, second);\n+    }\n+\n+    /**\n+     * Returns an iterator over competitive documents\n+     */\n+    public DocIdSetIterator competitiveIterator() {\n+        if (iterator == null) return null;\n+        return new DocIdSetIterator() {\n+            private int doc;\n+            @Override\n+            public int nextDoc() throws IOException {\n+                return doc = iterator.nextDoc();\n+            }\n+\n+            @Override\n+            public int docID() {\n+                return doc;\n+            }\n+\n+            @Override\n+            public long cost() {\n+                return iterator.cost();\n+            }\n+\n+            @Override\n+            public int advance(int target) throws IOException {\n+                return doc = iterator.advance(target);\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Try to wrap a given field comparator to add to it a functionality to skip over non-competitive docs.\n+     * If for the given comparator the skip functionality is not implemented, return the comparator itself.\n+     */\n+    public static FieldComparator<?> wrapToFilteringComparator(FieldComparator<?> comparator, boolean reverse) {\n+        if (comparator instanceof FieldComparator.LongComparator){\n+            return new FilteringFieldComparator.FilteringLongComparator((FieldComparator.LongComparator) comparator, reverse);\n+        }\n+        if (comparator instanceof FieldComparator.IntComparator){\n+            return new FilteringFieldComparator.FilteringIntComparator((FieldComparator.IntComparator) comparator, reverse);\n+        }\n+        if (comparator instanceof FieldComparator.DoubleComparator){\n+            return new FilteringFieldComparator.FilteringDoubleComparator((FieldComparator.DoubleComparator) comparator, reverse);\n+        }\n+        if (comparator instanceof FieldComparator.FloatComparator){\n+            return new FilteringFieldComparator.FilteringFloatComparator((FieldComparator.FloatComparator) comparator, reverse);\n+        }\n+        return comparator;\n+    }\n+\n+    /**\n+     * A wrapper over {@code NumericComparator} that adds a functionality to filter non-competitive docs.\n+     */\n+    public static abstract class FilteringNumericComparator<T extends Number> extends FilteringFieldComparator<T> implements LeafFieldComparator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7ef9b69567bd4c80c42f56c612ff95ceec6e26a"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY4ODY3OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                boolean filterNonCompetitveDocs = hitsThresholdChecker.getHitsThreshold() == Integer.MAX_VALUE ? false : true;\n          \n          \n            \n                boolean filterNonCompetitiveDocs = hitsThresholdChecker.getHitsThreshold() == Integer.MAX_VALUE ? false : true;", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r410688678", "createdAt": "2020-04-18T11:58:37Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.java", "diffHunk": "@@ -432,7 +461,9 @@ static TopFieldCollector create(Sort sort, int numHits, FieldDoc after,\n       throw new IllegalArgumentException(\"hitsThresholdChecker should not be null\");\n     }\n \n-    FieldValueHitQueue<Entry> queue = FieldValueHitQueue.create(sort.fields, numHits);\n+    // here we assume that if hitsThreshold was set, we let a comparator to skip non-competitive docs\n+    boolean filterNonCompetitveDocs = hitsThresholdChecker.getHitsThreshold() == Integer.MAX_VALUE ? false : true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7ef9b69567bd4c80c42f56c612ff95ceec6e26a"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY4OTg4Ng==", "bodyText": "I believe that this pointValues == null aims at disabling the optimization when the field has doc values but is not indexed. However it can also be null if the field is indexed but doesn't have values on this segment. It's fine to not optimize this case right now, but let's at least leave a comment about it?", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r410689886", "createdAt": "2020-04-18T12:11:47Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/FilteringFieldComparator.java", "diffHunk": "@@ -0,0 +1,350 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.search;\n+\n+import org.apache.lucene.document.LongPoint;\n+import org.apache.lucene.document.IntPoint;\n+import org.apache.lucene.document.DoublePoint;\n+import org.apache.lucene.document.FloatPoint;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.PointValues;\n+import org.apache.lucene.util.DocIdSetBuilder;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+\n+/**\n+ * Decorates a wrapped FieldComparator to add a functionality to skip over non-competitive docs.\n+ * FilteringFieldComparator provides two additional functions for a FieldComparator:\n+ * 1) {@code competitiveIterator()} that returns an iterator over\n+ *      competitive docs that are stronger than already collected docs.\n+ * 2) {@code setCanUpdateIterator()} that notifies the comparator when it is ok to start updating its internal iterator.\n+ *  This method is called from a collector to inform the comparator to start updating its iterator.\n+ */\n+public abstract class FilteringFieldComparator<T> extends FieldComparator<T> {\n+    final FieldComparator<T> in;\n+    protected DocIdSetIterator iterator = null;\n+\n+    public FilteringFieldComparator(FieldComparator<T> in) {\n+        this.in = in;\n+    }\n+\n+    protected abstract void setCanUpdateIterator() throws IOException;\n+\n+    @Override\n+    public int compare(int slot1, int slot2) {\n+        return in.compare(slot1, slot2);\n+    }\n+\n+    @Override\n+    public T value(int slot) {\n+        return in.value(slot);\n+    }\n+\n+    @Override\n+    public void setTopValue(T value) {\n+        in.setTopValue(value);\n+    }\n+\n+    @Override\n+    public int compareValues(T first, T second) {\n+        return in.compareValues(first, second);\n+    }\n+\n+    /**\n+     * Returns an iterator over competitive documents\n+     */\n+    public DocIdSetIterator competitiveIterator() {\n+        if (iterator == null) return null;\n+        return new DocIdSetIterator() {\n+            private int doc;\n+            @Override\n+            public int nextDoc() throws IOException {\n+                return doc = iterator.nextDoc();\n+            }\n+\n+            @Override\n+            public int docID() {\n+                return doc;\n+            }\n+\n+            @Override\n+            public long cost() {\n+                return iterator.cost();\n+            }\n+\n+            @Override\n+            public int advance(int target) throws IOException {\n+                return doc = iterator.advance(target);\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Try to wrap a given field comparator to add to it a functionality to skip over non-competitive docs.\n+     * If for the given comparator the skip functionality is not implemented, return the comparator itself.\n+     */\n+    public static FieldComparator<?> wrapToFilteringComparator(FieldComparator<?> comparator, boolean reverse) {\n+        if (comparator instanceof FieldComparator.LongComparator){\n+            return new FilteringFieldComparator.FilteringLongComparator((FieldComparator.LongComparator) comparator, reverse);\n+        }\n+        if (comparator instanceof FieldComparator.IntComparator){\n+            return new FilteringFieldComparator.FilteringIntComparator((FieldComparator.IntComparator) comparator, reverse);\n+        }\n+        if (comparator instanceof FieldComparator.DoubleComparator){\n+            return new FilteringFieldComparator.FilteringDoubleComparator((FieldComparator.DoubleComparator) comparator, reverse);\n+        }\n+        if (comparator instanceof FieldComparator.FloatComparator){\n+            return new FilteringFieldComparator.FilteringFloatComparator((FieldComparator.FloatComparator) comparator, reverse);\n+        }\n+        return comparator;\n+    }\n+\n+    /**\n+     * A wrapper over {@code NumericComparator} that adds a functionality to filter non-competitive docs.\n+     */\n+    public static abstract class FilteringNumericComparator<T extends Number> extends FilteringFieldComparator<T> implements LeafFieldComparator {\n+        private final boolean reverse;\n+        private boolean hasTopValue = false;\n+        private PointValues pointValues;\n+        private final int bytesCount;\n+        private final byte[] minValueAsBytes;\n+        private final byte[] maxValueAsBytes;\n+        private boolean minValueExist = false;\n+        private boolean maxValueExist = false;\n+        private int maxDoc;\n+        private int maxDocVisited;\n+        private int updateCounter = 0;\n+        private final String field;\n+        protected boolean canUpdateIterator = false; // set to true when queue becomes full and hitsThreshold is reached\n+\n+        public FilteringNumericComparator(NumericComparator<T> in, boolean reverse, int bytesCount) {\n+            super(in);\n+            this.field = in.field;\n+            this.bytesCount = bytesCount;\n+            this.reverse = reverse;\n+            minValueAsBytes = new byte[bytesCount];\n+            maxValueAsBytes = new byte[bytesCount];\n+            if (reverse) {\n+                minValueExist = true;\n+            } else {\n+                maxValueExist = true;\n+            }\n+        }\n+\n+        @Override\n+        public void setCanUpdateIterator() throws IOException {\n+            this.canUpdateIterator = true;\n+            // for the 1st time queue becomes full and hitsThreshold is reached\n+            // we can start updating competitive iterator\n+            updateCompetitiveIterator();\n+        }\n+\n+        @Override\n+        public void setTopValue(T value) {\n+            hasTopValue = true;\n+            if (reverse) {\n+                maxValueExist = true;\n+            } else {\n+                minValueExist = true;\n+            }\n+            in.setTopValue(value);\n+        }\n+\n+        @Override\n+        public void setBottom(int slot) throws IOException {\n+            ((NumericComparator) in).setBottom(slot);\n+            updateCompetitiveIterator(); // update an iterator if we set a new bottom\n+        }\n+\n+        @Override\n+        public int compareBottom(int doc) throws IOException {\n+            return ((NumericComparator) in).compareBottom(doc);\n+        }\n+\n+        @Override\n+        public int compareTop(int doc) throws IOException {\n+            return ((NumericComparator) in).compareTop(doc);\n+        }\n+\n+        @Override\n+        public void copy(int slot, int doc) throws IOException {\n+            ((NumericComparator) in).copy(slot, doc);\n+        }\n+\n+        @Override\n+        public void setScorer(Scorable scorer) throws IOException {}\n+\n+        @Override\n+        public final LeafFieldComparator getLeafComparator(LeafReaderContext context) throws IOException {\n+            ((NumericComparator) in).doSetNextReader(context);\n+            pointValues = context.reader().getPointValues(field);\n+            iterator = pointValues == null ? null : ((NumericComparator)in).currentReaderValues;\n+            maxDoc = context.reader().maxDoc();\n+            maxDocVisited = 0;\n+            updateCompetitiveIterator(); // update an iterator if we have a new segment\n+            return this;\n+        }\n+\n+        // update its iterator to include possibly only docs that are \"stronger\" than the current bottom entry\n+        public void updateCompetitiveIterator() throws IOException {\n+            if (canUpdateIterator == false) return;\n+            if (pointValues == null) return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7ef9b69567bd4c80c42f56c612ff95ceec6e26a"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY5MDM5Ng==", "bodyText": "I don't think we should steal the iterator of the wrapped comparator, it's a hacky and I believe that it could cause bugs due to the iterator being advanced on doc IDs out-of-order since the same iterator has two consumers that don't know about each other.", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r410690396", "createdAt": "2020-04-18T12:16:55Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/FilteringFieldComparator.java", "diffHunk": "@@ -0,0 +1,350 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.search;\n+\n+import org.apache.lucene.document.LongPoint;\n+import org.apache.lucene.document.IntPoint;\n+import org.apache.lucene.document.DoublePoint;\n+import org.apache.lucene.document.FloatPoint;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.PointValues;\n+import org.apache.lucene.util.DocIdSetBuilder;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+\n+/**\n+ * Decorates a wrapped FieldComparator to add a functionality to skip over non-competitive docs.\n+ * FilteringFieldComparator provides two additional functions for a FieldComparator:\n+ * 1) {@code competitiveIterator()} that returns an iterator over\n+ *      competitive docs that are stronger than already collected docs.\n+ * 2) {@code setCanUpdateIterator()} that notifies the comparator when it is ok to start updating its internal iterator.\n+ *  This method is called from a collector to inform the comparator to start updating its iterator.\n+ */\n+public abstract class FilteringFieldComparator<T> extends FieldComparator<T> {\n+    final FieldComparator<T> in;\n+    protected DocIdSetIterator iterator = null;\n+\n+    public FilteringFieldComparator(FieldComparator<T> in) {\n+        this.in = in;\n+    }\n+\n+    protected abstract void setCanUpdateIterator() throws IOException;\n+\n+    @Override\n+    public int compare(int slot1, int slot2) {\n+        return in.compare(slot1, slot2);\n+    }\n+\n+    @Override\n+    public T value(int slot) {\n+        return in.value(slot);\n+    }\n+\n+    @Override\n+    public void setTopValue(T value) {\n+        in.setTopValue(value);\n+    }\n+\n+    @Override\n+    public int compareValues(T first, T second) {\n+        return in.compareValues(first, second);\n+    }\n+\n+    /**\n+     * Returns an iterator over competitive documents\n+     */\n+    public DocIdSetIterator competitiveIterator() {\n+        if (iterator == null) return null;\n+        return new DocIdSetIterator() {\n+            private int doc;\n+            @Override\n+            public int nextDoc() throws IOException {\n+                return doc = iterator.nextDoc();\n+            }\n+\n+            @Override\n+            public int docID() {\n+                return doc;\n+            }\n+\n+            @Override\n+            public long cost() {\n+                return iterator.cost();\n+            }\n+\n+            @Override\n+            public int advance(int target) throws IOException {\n+                return doc = iterator.advance(target);\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Try to wrap a given field comparator to add to it a functionality to skip over non-competitive docs.\n+     * If for the given comparator the skip functionality is not implemented, return the comparator itself.\n+     */\n+    public static FieldComparator<?> wrapToFilteringComparator(FieldComparator<?> comparator, boolean reverse) {\n+        if (comparator instanceof FieldComparator.LongComparator){\n+            return new FilteringFieldComparator.FilteringLongComparator((FieldComparator.LongComparator) comparator, reverse);\n+        }\n+        if (comparator instanceof FieldComparator.IntComparator){\n+            return new FilteringFieldComparator.FilteringIntComparator((FieldComparator.IntComparator) comparator, reverse);\n+        }\n+        if (comparator instanceof FieldComparator.DoubleComparator){\n+            return new FilteringFieldComparator.FilteringDoubleComparator((FieldComparator.DoubleComparator) comparator, reverse);\n+        }\n+        if (comparator instanceof FieldComparator.FloatComparator){\n+            return new FilteringFieldComparator.FilteringFloatComparator((FieldComparator.FloatComparator) comparator, reverse);\n+        }\n+        return comparator;\n+    }\n+\n+    /**\n+     * A wrapper over {@code NumericComparator} that adds a functionality to filter non-competitive docs.\n+     */\n+    public static abstract class FilteringNumericComparator<T extends Number> extends FilteringFieldComparator<T> implements LeafFieldComparator {\n+        private final boolean reverse;\n+        private boolean hasTopValue = false;\n+        private PointValues pointValues;\n+        private final int bytesCount;\n+        private final byte[] minValueAsBytes;\n+        private final byte[] maxValueAsBytes;\n+        private boolean minValueExist = false;\n+        private boolean maxValueExist = false;\n+        private int maxDoc;\n+        private int maxDocVisited;\n+        private int updateCounter = 0;\n+        private final String field;\n+        protected boolean canUpdateIterator = false; // set to true when queue becomes full and hitsThreshold is reached\n+\n+        public FilteringNumericComparator(NumericComparator<T> in, boolean reverse, int bytesCount) {\n+            super(in);\n+            this.field = in.field;\n+            this.bytesCount = bytesCount;\n+            this.reverse = reverse;\n+            minValueAsBytes = new byte[bytesCount];\n+            maxValueAsBytes = new byte[bytesCount];\n+            if (reverse) {\n+                minValueExist = true;\n+            } else {\n+                maxValueExist = true;\n+            }\n+        }\n+\n+        @Override\n+        public void setCanUpdateIterator() throws IOException {\n+            this.canUpdateIterator = true;\n+            // for the 1st time queue becomes full and hitsThreshold is reached\n+            // we can start updating competitive iterator\n+            updateCompetitiveIterator();\n+        }\n+\n+        @Override\n+        public void setTopValue(T value) {\n+            hasTopValue = true;\n+            if (reverse) {\n+                maxValueExist = true;\n+            } else {\n+                minValueExist = true;\n+            }\n+            in.setTopValue(value);\n+        }\n+\n+        @Override\n+        public void setBottom(int slot) throws IOException {\n+            ((NumericComparator) in).setBottom(slot);\n+            updateCompetitiveIterator(); // update an iterator if we set a new bottom\n+        }\n+\n+        @Override\n+        public int compareBottom(int doc) throws IOException {\n+            return ((NumericComparator) in).compareBottom(doc);\n+        }\n+\n+        @Override\n+        public int compareTop(int doc) throws IOException {\n+            return ((NumericComparator) in).compareTop(doc);\n+        }\n+\n+        @Override\n+        public void copy(int slot, int doc) throws IOException {\n+            ((NumericComparator) in).copy(slot, doc);\n+        }\n+\n+        @Override\n+        public void setScorer(Scorable scorer) throws IOException {}\n+\n+        @Override\n+        public final LeafFieldComparator getLeafComparator(LeafReaderContext context) throws IOException {\n+            ((NumericComparator) in).doSetNextReader(context);\n+            pointValues = context.reader().getPointValues(field);\n+            iterator = pointValues == null ? null : ((NumericComparator)in).currentReaderValues;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7ef9b69567bd4c80c42f56c612ff95ceec6e26a"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY5MDU0MA==", "bodyText": "Furthermore we use iterator.cost() >>> 3 below as a condition. I think that the first time we should instead use the cost of the scorer otherwise this approach is going to slow down selective queries.", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r410690540", "createdAt": "2020-04-18T12:18:13Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/FilteringFieldComparator.java", "diffHunk": "@@ -0,0 +1,350 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.search;\n+\n+import org.apache.lucene.document.LongPoint;\n+import org.apache.lucene.document.IntPoint;\n+import org.apache.lucene.document.DoublePoint;\n+import org.apache.lucene.document.FloatPoint;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.PointValues;\n+import org.apache.lucene.util.DocIdSetBuilder;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+\n+/**\n+ * Decorates a wrapped FieldComparator to add a functionality to skip over non-competitive docs.\n+ * FilteringFieldComparator provides two additional functions for a FieldComparator:\n+ * 1) {@code competitiveIterator()} that returns an iterator over\n+ *      competitive docs that are stronger than already collected docs.\n+ * 2) {@code setCanUpdateIterator()} that notifies the comparator when it is ok to start updating its internal iterator.\n+ *  This method is called from a collector to inform the comparator to start updating its iterator.\n+ */\n+public abstract class FilteringFieldComparator<T> extends FieldComparator<T> {\n+    final FieldComparator<T> in;\n+    protected DocIdSetIterator iterator = null;\n+\n+    public FilteringFieldComparator(FieldComparator<T> in) {\n+        this.in = in;\n+    }\n+\n+    protected abstract void setCanUpdateIterator() throws IOException;\n+\n+    @Override\n+    public int compare(int slot1, int slot2) {\n+        return in.compare(slot1, slot2);\n+    }\n+\n+    @Override\n+    public T value(int slot) {\n+        return in.value(slot);\n+    }\n+\n+    @Override\n+    public void setTopValue(T value) {\n+        in.setTopValue(value);\n+    }\n+\n+    @Override\n+    public int compareValues(T first, T second) {\n+        return in.compareValues(first, second);\n+    }\n+\n+    /**\n+     * Returns an iterator over competitive documents\n+     */\n+    public DocIdSetIterator competitiveIterator() {\n+        if (iterator == null) return null;\n+        return new DocIdSetIterator() {\n+            private int doc;\n+            @Override\n+            public int nextDoc() throws IOException {\n+                return doc = iterator.nextDoc();\n+            }\n+\n+            @Override\n+            public int docID() {\n+                return doc;\n+            }\n+\n+            @Override\n+            public long cost() {\n+                return iterator.cost();\n+            }\n+\n+            @Override\n+            public int advance(int target) throws IOException {\n+                return doc = iterator.advance(target);\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Try to wrap a given field comparator to add to it a functionality to skip over non-competitive docs.\n+     * If for the given comparator the skip functionality is not implemented, return the comparator itself.\n+     */\n+    public static FieldComparator<?> wrapToFilteringComparator(FieldComparator<?> comparator, boolean reverse) {\n+        if (comparator instanceof FieldComparator.LongComparator){\n+            return new FilteringFieldComparator.FilteringLongComparator((FieldComparator.LongComparator) comparator, reverse);\n+        }\n+        if (comparator instanceof FieldComparator.IntComparator){\n+            return new FilteringFieldComparator.FilteringIntComparator((FieldComparator.IntComparator) comparator, reverse);\n+        }\n+        if (comparator instanceof FieldComparator.DoubleComparator){\n+            return new FilteringFieldComparator.FilteringDoubleComparator((FieldComparator.DoubleComparator) comparator, reverse);\n+        }\n+        if (comparator instanceof FieldComparator.FloatComparator){\n+            return new FilteringFieldComparator.FilteringFloatComparator((FieldComparator.FloatComparator) comparator, reverse);\n+        }\n+        return comparator;\n+    }\n+\n+    /**\n+     * A wrapper over {@code NumericComparator} that adds a functionality to filter non-competitive docs.\n+     */\n+    public static abstract class FilteringNumericComparator<T extends Number> extends FilteringFieldComparator<T> implements LeafFieldComparator {\n+        private final boolean reverse;\n+        private boolean hasTopValue = false;\n+        private PointValues pointValues;\n+        private final int bytesCount;\n+        private final byte[] minValueAsBytes;\n+        private final byte[] maxValueAsBytes;\n+        private boolean minValueExist = false;\n+        private boolean maxValueExist = false;\n+        private int maxDoc;\n+        private int maxDocVisited;\n+        private int updateCounter = 0;\n+        private final String field;\n+        protected boolean canUpdateIterator = false; // set to true when queue becomes full and hitsThreshold is reached\n+\n+        public FilteringNumericComparator(NumericComparator<T> in, boolean reverse, int bytesCount) {\n+            super(in);\n+            this.field = in.field;\n+            this.bytesCount = bytesCount;\n+            this.reverse = reverse;\n+            minValueAsBytes = new byte[bytesCount];\n+            maxValueAsBytes = new byte[bytesCount];\n+            if (reverse) {\n+                minValueExist = true;\n+            } else {\n+                maxValueExist = true;\n+            }\n+        }\n+\n+        @Override\n+        public void setCanUpdateIterator() throws IOException {\n+            this.canUpdateIterator = true;\n+            // for the 1st time queue becomes full and hitsThreshold is reached\n+            // we can start updating competitive iterator\n+            updateCompetitiveIterator();\n+        }\n+\n+        @Override\n+        public void setTopValue(T value) {\n+            hasTopValue = true;\n+            if (reverse) {\n+                maxValueExist = true;\n+            } else {\n+                minValueExist = true;\n+            }\n+            in.setTopValue(value);\n+        }\n+\n+        @Override\n+        public void setBottom(int slot) throws IOException {\n+            ((NumericComparator) in).setBottom(slot);\n+            updateCompetitiveIterator(); // update an iterator if we set a new bottom\n+        }\n+\n+        @Override\n+        public int compareBottom(int doc) throws IOException {\n+            return ((NumericComparator) in).compareBottom(doc);\n+        }\n+\n+        @Override\n+        public int compareTop(int doc) throws IOException {\n+            return ((NumericComparator) in).compareTop(doc);\n+        }\n+\n+        @Override\n+        public void copy(int slot, int doc) throws IOException {\n+            ((NumericComparator) in).copy(slot, doc);\n+        }\n+\n+        @Override\n+        public void setScorer(Scorable scorer) throws IOException {}\n+\n+        @Override\n+        public final LeafFieldComparator getLeafComparator(LeafReaderContext context) throws IOException {\n+            ((NumericComparator) in).doSetNextReader(context);\n+            pointValues = context.reader().getPointValues(field);\n+            iterator = pointValues == null ? null : ((NumericComparator)in).currentReaderValues;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY5MDM5Ng=="}, "originalCommit": {"oid": "d7ef9b69567bd4c80c42f56c612ff95ceec6e26a"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY5MDg5NA==", "bodyText": "We need both because the first one sorts by score first and should use e.g. block-max WAND while the latter sorts by field so block-max WAND isn't relevant, but we still need to disable bulk scoring. needsScores and isExhaustive are not complete descriptions of these enum constants.", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r410690894", "createdAt": "2020-04-18T12:22:09Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/ScoreMode.java", "diffHunk": "@@ -24,37 +24,53 @@\n   /**\n    * Produced scorers will allow visiting all matches and get their score.\n    */\n-  COMPLETE {\n-    @Override\n-    public boolean needsScores() {\n-      return true;\n-    }\n-  },\n+  COMPLETE(true, true),\n \n   /**\n    * Produced scorers will allow visiting all matches but scores won't be\n    * available.\n    */\n-  COMPLETE_NO_SCORES {\n-    @Override\n-    public boolean needsScores() {\n-      return false;\n-    }\n-  },\n+  COMPLETE_NO_SCORES(true, false),\n \n   /**\n    * Produced scorers will optionally allow skipping over non-competitive\n    * hits using the {@link Scorer#setMinCompetitiveScore(float)} API.\n    */\n-  TOP_SCORES {\n-    @Override\n-    public boolean needsScores() {\n-      return true;\n-    }\n-  };\n+  TOP_SCORES(false, true),\n+\n+  /**\n+   * ScoreMode for top field collectors that can provide their own iterators,\n+   * to optionally allow to skip for non-competitive docs\n+   */\n+  TOP_DOCS(false, false),\n+\n+  /**\n+   * ScoreMode for top field collectors that can provide their own iterators,\n+   * to optionally allow to skip for non-competitive docs.\n+   * This mode is used when there is a secondary sort by _score.\n+   */\n+  TOP_DOCS_WITH_SCORES(false, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUyNDc2NA=="}, "originalCommit": {"oid": "719882eec45546e5643bb229624d6354eea05e49"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY5MTM0Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  DocIdSetIterator scorerIterator = twoPhase == null? iterator : twoPhase.approximation();\n          \n          \n            \n                  DocIdSetIterator scorerIterator = twoPhase == null ? iterator : twoPhase.approximation();", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r410691342", "createdAt": "2020-04-18T12:25:53Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/Weight.java", "diffHunk": "@@ -201,19 +202,20 @@ public long cost() {\n     @Override\n     public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n       collector.setScorer(scorer);\n+      DocIdSetIterator scorerIterator = twoPhase == null? iterator : twoPhase.approximation();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7ef9b69567bd4c80c42f56c612ff95ceec6e26a"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY5MjgxMg==", "bodyText": "I believe that doing it is incorrect if a missing value is configured and would be competitive.", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r410692812", "createdAt": "2020-04-18T12:39:14Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/FilteringFieldComparator.java", "diffHunk": "@@ -0,0 +1,350 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.search;\n+\n+import org.apache.lucene.document.LongPoint;\n+import org.apache.lucene.document.IntPoint;\n+import org.apache.lucene.document.DoublePoint;\n+import org.apache.lucene.document.FloatPoint;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.PointValues;\n+import org.apache.lucene.util.DocIdSetBuilder;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+\n+/**\n+ * Decorates a wrapped FieldComparator to add a functionality to skip over non-competitive docs.\n+ * FilteringFieldComparator provides two additional functions for a FieldComparator:\n+ * 1) {@code competitiveIterator()} that returns an iterator over\n+ *      competitive docs that are stronger than already collected docs.\n+ * 2) {@code setCanUpdateIterator()} that notifies the comparator when it is ok to start updating its internal iterator.\n+ *  This method is called from a collector to inform the comparator to start updating its iterator.\n+ */\n+public abstract class FilteringFieldComparator<T> extends FieldComparator<T> {\n+    final FieldComparator<T> in;\n+    protected DocIdSetIterator iterator = null;\n+\n+    public FilteringFieldComparator(FieldComparator<T> in) {\n+        this.in = in;\n+    }\n+\n+    protected abstract void setCanUpdateIterator() throws IOException;\n+\n+    @Override\n+    public int compare(int slot1, int slot2) {\n+        return in.compare(slot1, slot2);\n+    }\n+\n+    @Override\n+    public T value(int slot) {\n+        return in.value(slot);\n+    }\n+\n+    @Override\n+    public void setTopValue(T value) {\n+        in.setTopValue(value);\n+    }\n+\n+    @Override\n+    public int compareValues(T first, T second) {\n+        return in.compareValues(first, second);\n+    }\n+\n+    /**\n+     * Returns an iterator over competitive documents\n+     */\n+    public DocIdSetIterator competitiveIterator() {\n+        if (iterator == null) return null;\n+        return new DocIdSetIterator() {\n+            private int doc;\n+            @Override\n+            public int nextDoc() throws IOException {\n+                return doc = iterator.nextDoc();\n+            }\n+\n+            @Override\n+            public int docID() {\n+                return doc;\n+            }\n+\n+            @Override\n+            public long cost() {\n+                return iterator.cost();\n+            }\n+\n+            @Override\n+            public int advance(int target) throws IOException {\n+                return doc = iterator.advance(target);\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Try to wrap a given field comparator to add to it a functionality to skip over non-competitive docs.\n+     * If for the given comparator the skip functionality is not implemented, return the comparator itself.\n+     */\n+    public static FieldComparator<?> wrapToFilteringComparator(FieldComparator<?> comparator, boolean reverse) {\n+        if (comparator instanceof FieldComparator.LongComparator){\n+            return new FilteringFieldComparator.FilteringLongComparator((FieldComparator.LongComparator) comparator, reverse);\n+        }\n+        if (comparator instanceof FieldComparator.IntComparator){\n+            return new FilteringFieldComparator.FilteringIntComparator((FieldComparator.IntComparator) comparator, reverse);\n+        }\n+        if (comparator instanceof FieldComparator.DoubleComparator){\n+            return new FilteringFieldComparator.FilteringDoubleComparator((FieldComparator.DoubleComparator) comparator, reverse);\n+        }\n+        if (comparator instanceof FieldComparator.FloatComparator){\n+            return new FilteringFieldComparator.FilteringFloatComparator((FieldComparator.FloatComparator) comparator, reverse);\n+        }\n+        return comparator;\n+    }\n+\n+    /**\n+     * A wrapper over {@code NumericComparator} that adds a functionality to filter non-competitive docs.\n+     */\n+    public static abstract class FilteringNumericComparator<T extends Number> extends FilteringFieldComparator<T> implements LeafFieldComparator {\n+        private final boolean reverse;\n+        private boolean hasTopValue = false;\n+        private PointValues pointValues;\n+        private final int bytesCount;\n+        private final byte[] minValueAsBytes;\n+        private final byte[] maxValueAsBytes;\n+        private boolean minValueExist = false;\n+        private boolean maxValueExist = false;\n+        private int maxDoc;\n+        private int maxDocVisited;\n+        private int updateCounter = 0;\n+        private final String field;\n+        protected boolean canUpdateIterator = false; // set to true when queue becomes full and hitsThreshold is reached\n+\n+        public FilteringNumericComparator(NumericComparator<T> in, boolean reverse, int bytesCount) {\n+            super(in);\n+            this.field = in.field;\n+            this.bytesCount = bytesCount;\n+            this.reverse = reverse;\n+            minValueAsBytes = new byte[bytesCount];\n+            maxValueAsBytes = new byte[bytesCount];\n+            if (reverse) {\n+                minValueExist = true;\n+            } else {\n+                maxValueExist = true;\n+            }\n+        }\n+\n+        @Override\n+        public void setCanUpdateIterator() throws IOException {\n+            this.canUpdateIterator = true;\n+            // for the 1st time queue becomes full and hitsThreshold is reached\n+            // we can start updating competitive iterator\n+            updateCompetitiveIterator();\n+        }\n+\n+        @Override\n+        public void setTopValue(T value) {\n+            hasTopValue = true;\n+            if (reverse) {\n+                maxValueExist = true;\n+            } else {\n+                minValueExist = true;\n+            }\n+            in.setTopValue(value);\n+        }\n+\n+        @Override\n+        public void setBottom(int slot) throws IOException {\n+            ((NumericComparator) in).setBottom(slot);\n+            updateCompetitiveIterator(); // update an iterator if we set a new bottom\n+        }\n+\n+        @Override\n+        public int compareBottom(int doc) throws IOException {\n+            return ((NumericComparator) in).compareBottom(doc);\n+        }\n+\n+        @Override\n+        public int compareTop(int doc) throws IOException {\n+            return ((NumericComparator) in).compareTop(doc);\n+        }\n+\n+        @Override\n+        public void copy(int slot, int doc) throws IOException {\n+            ((NumericComparator) in).copy(slot, doc);\n+        }\n+\n+        @Override\n+        public void setScorer(Scorable scorer) throws IOException {}\n+\n+        @Override\n+        public final LeafFieldComparator getLeafComparator(LeafReaderContext context) throws IOException {\n+            ((NumericComparator) in).doSetNextReader(context);\n+            pointValues = context.reader().getPointValues(field);\n+            iterator = pointValues == null ? null : ((NumericComparator)in).currentReaderValues;\n+            maxDoc = context.reader().maxDoc();\n+            maxDocVisited = 0;\n+            updateCompetitiveIterator(); // update an iterator if we have a new segment\n+            return this;\n+        }\n+\n+        // update its iterator to include possibly only docs that are \"stronger\" than the current bottom entry\n+        public void updateCompetitiveIterator() throws IOException {\n+            if (canUpdateIterator == false) return;\n+            if (pointValues == null) return;\n+            updateCounter++;\n+            if (updateCounter > 256 && (updateCounter & 0x1f) != 0x1f) { // Start sampling if we get called too much\n+                return;\n+            }\n+            if (reverse == false) {\n+                encodeBottom(maxValueAsBytes);\n+                if (hasTopValue) {\n+                    encodeTop(minValueAsBytes);\n+                }\n+            } else {\n+                encodeBottom(minValueAsBytes);\n+                if (hasTopValue) {\n+                    encodeTop(maxValueAsBytes);\n+                }\n+            };\n+            DocIdSetBuilder result = new DocIdSetBuilder(maxDoc);\n+            PointValues.IntersectVisitor visitor = new PointValues.IntersectVisitor() {\n+                DocIdSetBuilder.BulkAdder adder;\n+                @Override\n+                public void grow(int count) {\n+                    adder = result.grow(count);\n+                }\n+\n+                @Override\n+                public void visit(int docID) {\n+                    if (docID <= maxDocVisited) {\n+                        return; // Already visited or skipped\n+                    }\n+                    adder.add(docID);\n+                }\n+\n+                @Override\n+                public void visit(int docID, byte[] packedValue) {\n+                    if (docID <= maxDocVisited) {\n+                        return;  // Already visited or skipped\n+                    }\n+                    if (maxValueExist) {\n+                        // doc's value is too high\n+                        if (Arrays.compareUnsigned(packedValue, 0, bytesCount, maxValueAsBytes, 0, bytesCount) > 0) return;\n+                    }\n+                    if (minValueExist) {\n+                        // doc's value is too low\n+                        if (Arrays.compareUnsigned(packedValue, 0, bytesCount, minValueAsBytes, 0, bytesCount) < 0) return;\n+                    }\n+                    adder.add(docID); // doc is competitive\n+                }\n+\n+                @Override\n+                public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n+                    if ((maxValueExist && Arrays.compareUnsigned(minPackedValue, 0, bytesCount, maxValueAsBytes, 0, bytesCount) > 0) ||\n+                            (minValueExist && Arrays.compareUnsigned(maxPackedValue, 0, bytesCount, minValueAsBytes, 0, bytesCount) < 0)) {\n+                        return PointValues.Relation.CELL_OUTSIDE_QUERY;\n+                    }\n+                    if ((maxValueExist && Arrays.compareUnsigned(maxPackedValue, 0, bytesCount, maxValueAsBytes, 0, bytesCount) > 0) ||\n+                            (minValueExist && Arrays.compareUnsigned(minPackedValue, 0, bytesCount, minValueAsBytes, 0, bytesCount) < 0)) {\n+                        return PointValues.Relation.CELL_CROSSES_QUERY;\n+                    }\n+                    return PointValues.Relation.CELL_INSIDE_QUERY;\n+                }\n+            };\n+            final long threshold = iterator.cost() >>> 3;\n+            long estimatedNumberOfMatches = pointValues.estimatePointCount(visitor); // runs in O(log(numPoints))\n+            if (estimatedNumberOfMatches >= threshold) {\n+                // the new range is not selective enough to be worth materializing, it doesn't reduce number of docs at least 8x\n+                return;\n+            }\n+            pointValues.intersect(visitor);\n+            this.iterator = result.build().iterator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7ef9b69567bd4c80c42f56c612ff95ceec6e26a"}, "originalPosition": 274}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24c94ff85a5b6d6a9dc2d110b7f0c83df06f64c4", "author": {"user": {"login": "mayya-sharipova", "name": "Mayya Sharipova"}}, "url": "https://github.com/apache/lucene-solr/commit/24c94ff85a5b6d6a9dc2d110b7f0c83df06f64c4", "committedDate": "2020-04-21T21:04:46Z", "message": "Address Adrien's feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2fd9075f1ea7f5d084965c3687cb28da45eb9432", "author": {"user": {"login": "mayya-sharipova", "name": "Mayya Sharipova"}}, "url": "https://github.com/apache/lucene-solr/commit/2fd9075f1ea7f5d084965c3687cb28da45eb9432", "committedDate": "2020-04-23T20:32:05Z", "message": "Set scorer for inner comparator"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NzQyNDYw", "url": "https://github.com/apache/lucene-solr/pull/1351#pullrequestreview-399742460", "createdAt": "2020-04-24T08:27:42Z", "commit": {"oid": "2fd9075f1ea7f5d084965c3687cb28da45eb9432"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwODoyNzo0MlrOGLMfuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwODo0ODoxOFrOGLNUsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM5MjI1MQ==", "bodyText": "We've had endless discussions about whether or not to delegate in FilterXXX classes and I think that the consensus is that we should only delegate abstract methods. Since this one has a default implementation, let's not delegate and look for extensions of FilterCollector that should delegate it? (e.g. asserting collectors)", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r414392251", "createdAt": "2020-04-24T08:27:42Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/FilterLeafCollector.java", "diffHunk": "@@ -53,4 +53,8 @@ public String toString() {\n     return name + \"(\" + in + \")\";\n   }\n \n+  @Override\n+  public DocIdSetIterator competitiveIterator() {\n+    return in.competitiveIterator();\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fd9075f1ea7f5d084965c3687cb28da45eb9432"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM5MzY4Mw==", "bodyText": "indentation looks wrong, Lucene uses 2-spaces indentation", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r414393683", "createdAt": "2020-04-24T08:29:55Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/FilteringFieldComparator.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.search;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Decorates a wrapped FieldComparator to add a functionality to skip over non-competitive docs.\n+ * FilteringFieldComparator provides two additional functions for a FieldComparator:\n+ * 1) {@code competitiveIterator()} that returns an iterator over\n+ *      competitive docs that are stronger than already collected docs.\n+ * 2) {@code setCanUpdateIterator()} that notifies the comparator when it is ok to start updating its internal iterator.\n+ *  This method is called from a collector to inform the comparator to start updating its iterator.\n+ */\n+public abstract class FilteringFieldComparator<T> extends FieldComparator<T> {\n+    final FieldComparator<T> in;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fd9075f1ea7f5d084965c3687cb28da45eb9432"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM5NDc5MA==", "bodyText": "Let's only have this method on LeafFieldCompatarors, e.g. by doing something like this? FieldComparators are top-level objects so it doesn't make sense to have leaf-level objects defined on them like DocIdSetIterators.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected abstract DocIdSetIterator competitiveIterator();\n          \n          \n            \n              @Override\n          \n          \n            \n              public abstract FilteringLeafFieldComparator getLeafComparator(LeafReaderContext context) throws IOException; // covariant return type\n          \n          \n            \n            \n          \n          \n            \n              public static interface FilteringLeafFieldComparator extends LeafFieldComparator {\n          \n          \n            \n                DocIdSetIterator competitiveIterator();\n          \n          \n            \n              }\n          \n      \n    \n    \n  \n\nThen there's a question of whether setCanUpdateIterator should go there too as well or not.", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r414394790", "createdAt": "2020-04-24T08:31:37Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/FilteringFieldComparator.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.search;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Decorates a wrapped FieldComparator to add a functionality to skip over non-competitive docs.\n+ * FilteringFieldComparator provides two additional functions for a FieldComparator:\n+ * 1) {@code competitiveIterator()} that returns an iterator over\n+ *      competitive docs that are stronger than already collected docs.\n+ * 2) {@code setCanUpdateIterator()} that notifies the comparator when it is ok to start updating its internal iterator.\n+ *  This method is called from a collector to inform the comparator to start updating its iterator.\n+ */\n+public abstract class FilteringFieldComparator<T> extends FieldComparator<T> {\n+    final FieldComparator<T> in;\n+\n+    public FilteringFieldComparator(FieldComparator<T> in) {\n+        this.in = in;\n+    }\n+\n+    protected abstract DocIdSetIterator competitiveIterator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fd9075f1ea7f5d084965c3687cb28da45eb9432"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM5NTM4NA==", "bodyText": "can you add javadocs?", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r414395384", "createdAt": "2020-04-24T08:32:34Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/FilteringFieldComparator.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.search;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Decorates a wrapped FieldComparator to add a functionality to skip over non-competitive docs.\n+ * FilteringFieldComparator provides two additional functions for a FieldComparator:\n+ * 1) {@code competitiveIterator()} that returns an iterator over\n+ *      competitive docs that are stronger than already collected docs.\n+ * 2) {@code setCanUpdateIterator()} that notifies the comparator when it is ok to start updating its internal iterator.\n+ *  This method is called from a collector to inform the comparator to start updating its iterator.\n+ */\n+public abstract class FilteringFieldComparator<T> extends FieldComparator<T> {\n+    final FieldComparator<T> in;\n+\n+    public FilteringFieldComparator(FieldComparator<T> in) {\n+        this.in = in;\n+    }\n+\n+    protected abstract DocIdSetIterator competitiveIterator();\n+\n+    protected abstract void setCanUpdateIterator() throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fd9075f1ea7f5d084965c3687cb28da45eb9432"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQwMTUyMw==", "bodyText": "Related to my above comment, I think we could make things cleaner by implementing the comparator and the leaf comparator in different classes. Then each class would be smaller and many fields could become final.", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r414401523", "createdAt": "2020-04-24T08:41:50Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/FilteringNumericComparator.java", "diffHunk": "@@ -0,0 +1,329 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.search;\n+\n+import org.apache.lucene.document.DoublePoint;\n+import org.apache.lucene.document.FloatPoint;\n+import org.apache.lucene.document.IntPoint;\n+import org.apache.lucene.document.LongPoint;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.PointValues;\n+import org.apache.lucene.util.DocIdSetBuilder;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+\n+/**\n+ * A wrapper over {@code NumericComparator} that adds a functionality to filter non-competitive docs.\n+ */\n+public abstract class FilteringNumericComparator<T extends Number> extends FilteringFieldComparator<T> implements LeafFieldComparator {\n+    protected final boolean reverse;\n+    private boolean hasTopValue = false;\n+    private PointValues pointValues;\n+    private final int bytesCount;\n+    private final byte[] minValueAsBytes;\n+    private final byte[] maxValueAsBytes;\n+    private boolean minValueExist = false;\n+    private boolean maxValueExist = false;\n+    private int maxDoc;\n+    private int maxDocVisited;\n+    private int updateCounter = 0;\n+    private final String field;\n+    protected boolean canUpdateIterator = false; // set to true when queue becomes full and hitsThreshold is reached\n+    protected DocIdSetIterator competitiveIterator = null;\n+    private long iteratorCost = 0;\n+\n+    public FilteringNumericComparator(NumericComparator<T> in, boolean reverse, int bytesCount) {\n+        super(in);\n+        this.field = in.field;\n+        this.bytesCount = bytesCount;\n+        this.reverse = reverse;\n+        minValueAsBytes = new byte[bytesCount];\n+        maxValueAsBytes = new byte[bytesCount];\n+        if (reverse) {\n+            minValueExist = true;\n+        } else {\n+            maxValueExist = true;\n+        }\n+    }\n+\n+    /**\n+     * Returns an iterator over competitive documents\n+     */\n+    @Override\n+    public DocIdSetIterator competitiveIterator() {\n+        if (competitiveIterator == null) return null;\n+        return new DocIdSetIterator() {\n+            private int doc;\n+            @Override\n+            public int nextDoc() throws IOException {\n+                return doc = competitiveIterator.nextDoc();\n+            }\n+\n+            @Override\n+            public int docID() {\n+                return doc;\n+            }\n+\n+            @Override\n+            public long cost() {\n+                return competitiveIterator.cost();\n+            }\n+\n+            @Override\n+            public int advance(int target) throws IOException {\n+                return doc = competitiveIterator.advance(target);\n+            }\n+        };\n+    }\n+\n+    @Override\n+    public void setCanUpdateIterator() throws IOException {\n+        this.canUpdateIterator = true;\n+        // for the 1st time queue becomes full and hitsThreshold is reached\n+        // we can start updating competitive iterator\n+        updateCompetitiveIterator();\n+    }\n+\n+    @Override\n+    public void setTopValue(T value) {\n+        hasTopValue = true;\n+        if (reverse) {\n+            maxValueExist = true;\n+        } else {\n+            minValueExist = true;\n+        }\n+        in.setTopValue(value);\n+    }\n+\n+    @Override\n+    public void setBottom(int slot) throws IOException {\n+        ((NumericComparator) in).setBottom(slot);\n+        updateCompetitiveIterator(); // update an iterator if we set a new bottom\n+    }\n+\n+    @Override\n+    public int compareBottom(int doc) throws IOException {\n+        return ((NumericComparator) in).compareBottom(doc);\n+    }\n+\n+    @Override\n+    public int compareTop(int doc) throws IOException {\n+        return ((NumericComparator) in).compareTop(doc);\n+    }\n+\n+    @Override\n+    public void copy(int slot, int doc) throws IOException {\n+        ((NumericComparator) in).copy(slot, doc);\n+    }\n+\n+    @Override\n+    public void setScorer(Scorable scorer) throws IOException {\n+        ((NumericComparator) in).setScorer(scorer);\n+        if (scorer instanceof Scorer) {\n+            iteratorCost = ((Scorer) scorer).iterator().cost(); // starting iterator cost is the scorer's cost\n+            updateCompetitiveIterator(); // update an iterator when we have a new segment\n+        }\n+    }\n+\n+    @Override\n+    public final LeafFieldComparator getLeafComparator(LeafReaderContext context) throws IOException {\n+        ((NumericComparator) in).doSetNextReader(context);\n+        maxDoc = context.reader().maxDoc();\n+        maxDocVisited = 0;\n+        pointValues = context.reader().getPointValues(field);\n+        // TODO: optimize a case when pointValues are missing only on this segment\n+        competitiveIterator = pointValues == null ? null : DocIdSetIterator.all(maxDoc);\n+        iteratorCost = 0;\n+        return this;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fd9075f1ea7f5d084965c3687cb28da45eb9432"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQwNTA2Mw==", "bodyText": "Let's open a separate issue about adding Scorable.cost() to make such optimizations easier?", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r414405063", "createdAt": "2020-04-24T08:47:11Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/FilteringNumericComparator.java", "diffHunk": "@@ -0,0 +1,329 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.search;\n+\n+import org.apache.lucene.document.DoublePoint;\n+import org.apache.lucene.document.FloatPoint;\n+import org.apache.lucene.document.IntPoint;\n+import org.apache.lucene.document.LongPoint;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.PointValues;\n+import org.apache.lucene.util.DocIdSetBuilder;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+\n+/**\n+ * A wrapper over {@code NumericComparator} that adds a functionality to filter non-competitive docs.\n+ */\n+public abstract class FilteringNumericComparator<T extends Number> extends FilteringFieldComparator<T> implements LeafFieldComparator {\n+    protected final boolean reverse;\n+    private boolean hasTopValue = false;\n+    private PointValues pointValues;\n+    private final int bytesCount;\n+    private final byte[] minValueAsBytes;\n+    private final byte[] maxValueAsBytes;\n+    private boolean minValueExist = false;\n+    private boolean maxValueExist = false;\n+    private int maxDoc;\n+    private int maxDocVisited;\n+    private int updateCounter = 0;\n+    private final String field;\n+    protected boolean canUpdateIterator = false; // set to true when queue becomes full and hitsThreshold is reached\n+    protected DocIdSetIterator competitiveIterator = null;\n+    private long iteratorCost = 0;\n+\n+    public FilteringNumericComparator(NumericComparator<T> in, boolean reverse, int bytesCount) {\n+        super(in);\n+        this.field = in.field;\n+        this.bytesCount = bytesCount;\n+        this.reverse = reverse;\n+        minValueAsBytes = new byte[bytesCount];\n+        maxValueAsBytes = new byte[bytesCount];\n+        if (reverse) {\n+            minValueExist = true;\n+        } else {\n+            maxValueExist = true;\n+        }\n+    }\n+\n+    /**\n+     * Returns an iterator over competitive documents\n+     */\n+    @Override\n+    public DocIdSetIterator competitiveIterator() {\n+        if (competitiveIterator == null) return null;\n+        return new DocIdSetIterator() {\n+            private int doc;\n+            @Override\n+            public int nextDoc() throws IOException {\n+                return doc = competitiveIterator.nextDoc();\n+            }\n+\n+            @Override\n+            public int docID() {\n+                return doc;\n+            }\n+\n+            @Override\n+            public long cost() {\n+                return competitiveIterator.cost();\n+            }\n+\n+            @Override\n+            public int advance(int target) throws IOException {\n+                return doc = competitiveIterator.advance(target);\n+            }\n+        };\n+    }\n+\n+    @Override\n+    public void setCanUpdateIterator() throws IOException {\n+        this.canUpdateIterator = true;\n+        // for the 1st time queue becomes full and hitsThreshold is reached\n+        // we can start updating competitive iterator\n+        updateCompetitiveIterator();\n+    }\n+\n+    @Override\n+    public void setTopValue(T value) {\n+        hasTopValue = true;\n+        if (reverse) {\n+            maxValueExist = true;\n+        } else {\n+            minValueExist = true;\n+        }\n+        in.setTopValue(value);\n+    }\n+\n+    @Override\n+    public void setBottom(int slot) throws IOException {\n+        ((NumericComparator) in).setBottom(slot);\n+        updateCompetitiveIterator(); // update an iterator if we set a new bottom\n+    }\n+\n+    @Override\n+    public int compareBottom(int doc) throws IOException {\n+        return ((NumericComparator) in).compareBottom(doc);\n+    }\n+\n+    @Override\n+    public int compareTop(int doc) throws IOException {\n+        return ((NumericComparator) in).compareTop(doc);\n+    }\n+\n+    @Override\n+    public void copy(int slot, int doc) throws IOException {\n+        ((NumericComparator) in).copy(slot, doc);\n+    }\n+\n+    @Override\n+    public void setScorer(Scorable scorer) throws IOException {\n+        ((NumericComparator) in).setScorer(scorer);\n+        if (scorer instanceof Scorer) {\n+            iteratorCost = ((Scorer) scorer).iterator().cost(); // starting iterator cost is the scorer's cost\n+            updateCompetitiveIterator(); // update an iterator when we have a new segment\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fd9075f1ea7f5d084965c3687cb28da45eb9432"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQwNTgwOA==", "bodyText": "I'd rather have maxDoc as a default, the reason being that this optimization otherwise wouldn't apply with MatchAllDocsQuery, which would be a pity.", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r414405808", "createdAt": "2020-04-24T08:48:18Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/FilteringNumericComparator.java", "diffHunk": "@@ -0,0 +1,329 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.search;\n+\n+import org.apache.lucene.document.DoublePoint;\n+import org.apache.lucene.document.FloatPoint;\n+import org.apache.lucene.document.IntPoint;\n+import org.apache.lucene.document.LongPoint;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.PointValues;\n+import org.apache.lucene.util.DocIdSetBuilder;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+\n+/**\n+ * A wrapper over {@code NumericComparator} that adds a functionality to filter non-competitive docs.\n+ */\n+public abstract class FilteringNumericComparator<T extends Number> extends FilteringFieldComparator<T> implements LeafFieldComparator {\n+    protected final boolean reverse;\n+    private boolean hasTopValue = false;\n+    private PointValues pointValues;\n+    private final int bytesCount;\n+    private final byte[] minValueAsBytes;\n+    private final byte[] maxValueAsBytes;\n+    private boolean minValueExist = false;\n+    private boolean maxValueExist = false;\n+    private int maxDoc;\n+    private int maxDocVisited;\n+    private int updateCounter = 0;\n+    private final String field;\n+    protected boolean canUpdateIterator = false; // set to true when queue becomes full and hitsThreshold is reached\n+    protected DocIdSetIterator competitiveIterator = null;\n+    private long iteratorCost = 0;\n+\n+    public FilteringNumericComparator(NumericComparator<T> in, boolean reverse, int bytesCount) {\n+        super(in);\n+        this.field = in.field;\n+        this.bytesCount = bytesCount;\n+        this.reverse = reverse;\n+        minValueAsBytes = new byte[bytesCount];\n+        maxValueAsBytes = new byte[bytesCount];\n+        if (reverse) {\n+            minValueExist = true;\n+        } else {\n+            maxValueExist = true;\n+        }\n+    }\n+\n+    /**\n+     * Returns an iterator over competitive documents\n+     */\n+    @Override\n+    public DocIdSetIterator competitiveIterator() {\n+        if (competitiveIterator == null) return null;\n+        return new DocIdSetIterator() {\n+            private int doc;\n+            @Override\n+            public int nextDoc() throws IOException {\n+                return doc = competitiveIterator.nextDoc();\n+            }\n+\n+            @Override\n+            public int docID() {\n+                return doc;\n+            }\n+\n+            @Override\n+            public long cost() {\n+                return competitiveIterator.cost();\n+            }\n+\n+            @Override\n+            public int advance(int target) throws IOException {\n+                return doc = competitiveIterator.advance(target);\n+            }\n+        };\n+    }\n+\n+    @Override\n+    public void setCanUpdateIterator() throws IOException {\n+        this.canUpdateIterator = true;\n+        // for the 1st time queue becomes full and hitsThreshold is reached\n+        // we can start updating competitive iterator\n+        updateCompetitiveIterator();\n+    }\n+\n+    @Override\n+    public void setTopValue(T value) {\n+        hasTopValue = true;\n+        if (reverse) {\n+            maxValueExist = true;\n+        } else {\n+            minValueExist = true;\n+        }\n+        in.setTopValue(value);\n+    }\n+\n+    @Override\n+    public void setBottom(int slot) throws IOException {\n+        ((NumericComparator) in).setBottom(slot);\n+        updateCompetitiveIterator(); // update an iterator if we set a new bottom\n+    }\n+\n+    @Override\n+    public int compareBottom(int doc) throws IOException {\n+        return ((NumericComparator) in).compareBottom(doc);\n+    }\n+\n+    @Override\n+    public int compareTop(int doc) throws IOException {\n+        return ((NumericComparator) in).compareTop(doc);\n+    }\n+\n+    @Override\n+    public void copy(int slot, int doc) throws IOException {\n+        ((NumericComparator) in).copy(slot, doc);\n+    }\n+\n+    @Override\n+    public void setScorer(Scorable scorer) throws IOException {\n+        ((NumericComparator) in).setScorer(scorer);\n+        if (scorer instanceof Scorer) {\n+            iteratorCost = ((Scorer) scorer).iterator().cost(); // starting iterator cost is the scorer's cost\n+            updateCompetitiveIterator(); // update an iterator when we have a new segment\n+        }\n+    }\n+\n+    @Override\n+    public final LeafFieldComparator getLeafComparator(LeafReaderContext context) throws IOException {\n+        ((NumericComparator) in).doSetNextReader(context);\n+        maxDoc = context.reader().maxDoc();\n+        maxDocVisited = 0;\n+        pointValues = context.reader().getPointValues(field);\n+        // TODO: optimize a case when pointValues are missing only on this segment\n+        competitiveIterator = pointValues == null ? null : DocIdSetIterator.all(maxDoc);\n+        iteratorCost = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fd9075f1ea7f5d084965c3687cb28da45eb9432"}, "originalPosition": 151}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8e138c9b8246036d9b0a6a342aee43ef22154eb", "author": {"user": {"login": "mayya-sharipova", "name": "Mayya Sharipova"}}, "url": "https://github.com/apache/lucene-solr/commit/b8e138c9b8246036d9b0a6a342aee43ef22154eb", "committedDate": "2020-04-24T19:11:21Z", "message": "Correct Indent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7120424ffadefd684a644926be556fbd36cdc1c4", "author": {"user": {"login": "mayya-sharipova", "name": "Mayya Sharipova"}}, "url": "https://github.com/apache/lucene-solr/commit/7120424ffadefd684a644926be556fbd36cdc1c4", "committedDate": "2020-04-29T15:12:11Z", "message": "Separate classes for comparator and leaf comparator\n\nHandle equal values"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c62fd0fe2c4623e90b40791c49957d4fa97cc5e", "author": {"user": {"login": "mayya-sharipova", "name": "Mayya Sharipova"}}, "url": "https://github.com/apache/lucene-solr/commit/6c62fd0fe2c4623e90b40791c49957d4fa97cc5e", "committedDate": "2020-04-29T15:17:02Z", "message": "Merge remote-tracking branch 'upstream/master' into comparator-set-min-competitive"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNTM4NjE1", "url": "https://github.com/apache/lucene-solr/pull/1351#pullrequestreview-411538615", "createdAt": "2020-05-14T07:37:34Z", "commit": {"oid": "6c62fd0fe2c4623e90b40791c49957d4fa97cc5e"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNzozNzozNFrOGVPq1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNzozNzozNFrOGVPq1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkzMDAwNQ==", "bodyText": "nit: remove line", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r424930005", "createdAt": "2020-05-14T07:37:34Z", "author": {"login": "jimczi"}, "path": "lucene/core/src/java/org/apache/lucene/search/FieldComparator.java", "diffHunk": "@@ -159,14 +159,15 @@ protected void doSetNextReader(LeafReaderContext context) throws IOException {\n     protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n       return DocValues.getNumeric(context.reader(), field);\n     }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c62fd0fe2c4623e90b40791c49957d4fa97cc5e"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NzI5MTI2", "url": "https://github.com/apache/lucene-solr/pull/1351#pullrequestreview-417729126", "createdAt": "2020-05-25T13:58:52Z", "commit": {"oid": "6c62fd0fe2c4623e90b40791c49957d4fa97cc5e"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzo1ODo1MlrOGaCCkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNTowMjo0M1rOGaD40w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk0OTU4NA==", "bodyText": "this relies on the implementation detail that NumericComparator extends SimpleFieldCompatator, can we instead call LeafFieldComparator inLeafComparator = in.getLeafComparator(context); and then apply the below if statements over inLeafComparator rather than in?", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r429949584", "createdAt": "2020-05-25T13:58:52Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/FilteringNumericComparator.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.search;\n+\n+import org.apache.lucene.index.LeafReaderContext;\n+\n+import java.io.IOException;\n+\n+/**\n+ * A wrapper over {@code NumericComparator} that provides a leaf comparator that can filter non-competitive docs.\n+ */\n+public class FilteringNumericComparator<T extends Number> extends FilteringFieldComparator<T> {\n+  public FilteringNumericComparator(NumericComparator<T> in, boolean reverse, boolean singleSort) {\n+    super(in, reverse, singleSort);\n+  }\n+\n+  @Override\n+  public final FilteringLeafFieldComparator getLeafComparator(LeafReaderContext context) throws IOException {\n+    ((NumericComparator) in).doSetNextReader(context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c62fd0fe2c4623e90b40791c49957d4fa97cc5e"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk2NjA1MQ==", "bodyText": "FieldComparator.LongComparator allows to customize the way that it gets NumericDocValues from the index, so I think that it needs to check the exact class rather than do an instanceof?", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r429966051", "createdAt": "2020-05-25T14:32:39Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/FilteringNumericComparator.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.search;\n+\n+import org.apache.lucene.index.LeafReaderContext;\n+\n+import java.io.IOException;\n+\n+/**\n+ * A wrapper over {@code NumericComparator} that provides a leaf comparator that can filter non-competitive docs.\n+ */\n+public class FilteringNumericComparator<T extends Number> extends FilteringFieldComparator<T> {\n+  public FilteringNumericComparator(NumericComparator<T> in, boolean reverse, boolean singleSort) {\n+    super(in, reverse, singleSort);\n+  }\n+\n+  @Override\n+  public final FilteringLeafFieldComparator getLeafComparator(LeafReaderContext context) throws IOException {\n+    ((NumericComparator) in).doSetNextReader(context);\n+    if (in instanceof FieldComparator.LongComparator) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c62fd0fe2c4623e90b40791c49957d4fa97cc5e"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk2NjU5Ng==", "bodyText": "can you actually do the instanceof check so that it would be more future proof? E.g. in case we add support for bfloat16 one day.", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r429966596", "createdAt": "2020-05-25T14:33:48Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/FilteringNumericComparator.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.search;\n+\n+import org.apache.lucene.index.LeafReaderContext;\n+\n+import java.io.IOException;\n+\n+/**\n+ * A wrapper over {@code NumericComparator} that provides a leaf comparator that can filter non-competitive docs.\n+ */\n+public class FilteringNumericComparator<T extends Number> extends FilteringFieldComparator<T> {\n+  public FilteringNumericComparator(NumericComparator<T> in, boolean reverse, boolean singleSort) {\n+    super(in, reverse, singleSort);\n+  }\n+\n+  @Override\n+  public final FilteringLeafFieldComparator getLeafComparator(LeafReaderContext context) throws IOException {\n+    ((NumericComparator) in).doSetNextReader(context);\n+    if (in instanceof FieldComparator.LongComparator) {\n+      return new FilteringNumericLeafComparator.FilteringLongLeafComparator((FieldComparator.LongComparator) in, context,\n+          ((LongComparator) in).field, reverse, singleSort, hasTopValue);\n+    } else if (in instanceof FieldComparator.IntComparator) {\n+      return new FilteringNumericLeafComparator.FilteringIntLeafComparator((FieldComparator.IntComparator) in, context,\n+          ((IntComparator) in).field, reverse, singleSort, hasTopValue);\n+    } else if (in instanceof FieldComparator.DoubleComparator) {\n+      return new FilteringNumericLeafComparator.FilteringDoubleLeafComparator((FieldComparator.DoubleComparator) in, context,\n+          ((DoubleComparator) in).field, reverse, singleSort, hasTopValue);\n+    } else { // instanceof FieldComparator.FloatComparator", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c62fd0fe2c4623e90b40791c49957d4fa97cc5e"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk3ODA4Mw==", "bodyText": "no need for parentheses with assert", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r429978083", "createdAt": "2020-05-25T14:58:36Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.java", "diffHunk": "@@ -302,18 +327,24 @@ private TopFieldCollector(FieldValueHitQueue<Entry> pq, int numHits,\n     this.numHits = numHits;\n     this.hitsThresholdChecker = hitsThresholdChecker;\n     this.numComparators = pq.getComparators().length;\n-    FieldComparator<?> fieldComparator = pq.getComparators()[0];\n+    FieldComparator<?> firstComparator = pq.getComparators()[0];\n     int reverseMul = pq.reverseMul[0];\n-    if (fieldComparator.getClass().equals(FieldComparator.RelevanceComparator.class)\n-          && reverseMul == 1 // if the natural sort is preserved (sort by descending relevance)\n-          && hitsThresholdChecker.getHitsThreshold() != Integer.MAX_VALUE) {\n-      firstComparator = (FieldComparator.RelevanceComparator) fieldComparator;\n+\n+    if (firstComparator.getClass().equals(FieldComparator.RelevanceComparator.class)\n+            && reverseMul == 1 // if the natural sort is preserved (sort by descending relevance)\n+            && hitsThresholdChecker.getHitsThreshold() != Integer.MAX_VALUE) {\n+      relevanceComparator = (FieldComparator.RelevanceComparator) firstComparator;\n       scoreMode = ScoreMode.TOP_SCORES;\n       canSetMinScore = true;\n     } else {\n-      firstComparator = null;\n-      scoreMode = needsScores ? ScoreMode.COMPLETE : ScoreMode.COMPLETE_NO_SCORES;\n+      relevanceComparator = null;\n       canSetMinScore = false;\n+      if (firstComparator instanceof FilteringFieldComparator) {\n+        assert(hitsThresholdChecker.getHitsThreshold() != Integer.MAX_VALUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c62fd0fe2c4623e90b40791c49957d4fa97cc5e"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk3OTg1OQ==", "bodyText": "Let's use a less generic name, e.g. TestFieldSortOptimization to make it clear it doesn't apply to scores, or maybe something even more describing such as TestFieldSortOptimizationSkipping?", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r429979859", "createdAt": "2020-05-25T15:02:43Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/test/org/apache/lucene/search/TestSortOptimization.java", "diffHunk": "@@ -0,0 +1,294 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.search;\n+\n+import org.apache.lucene.document.Document;\n+import org.apache.lucene.document.FloatDocValuesField;\n+import org.apache.lucene.document.LongPoint;\n+import org.apache.lucene.document.IntPoint;\n+import org.apache.lucene.document.FloatPoint;\n+import org.apache.lucene.document.NumericDocValuesField;\n+import org.apache.lucene.index.DirectoryReader;\n+import org.apache.lucene.index.IndexReader;\n+import org.apache.lucene.index.IndexWriter;\n+import org.apache.lucene.index.IndexWriterConfig;\n+import org.apache.lucene.store.Directory;\n+import org.apache.lucene.util.LuceneTestCase;\n+\n+import java.io.IOException;\n+\n+import static org.apache.lucene.search.SortField.FIELD_SCORE;\n+\n+public class TestSortOptimization extends LuceneTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c62fd0fe2c4623e90b40791c49957d4fa97cc5e"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ab2a6e3c1895070ac926e0192dd895641c4954b", "author": {"user": {"login": "mayya-sharipova", "name": "Mayya Sharipova"}}, "url": "https://github.com/apache/lucene-solr/commit/1ab2a6e3c1895070ac926e0192dd895641c4954b", "committedDate": "2020-05-26T18:46:39Z", "message": "Address Adrien's comments\n\n- use getClass instead of instanceof\n- make filtering comparator classes package private"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9100306125bc7256ae1406228dfdf26531c1d96", "author": {"user": {"login": "mayya-sharipova", "name": "Mayya Sharipova"}}, "url": "https://github.com/apache/lucene-solr/commit/f9100306125bc7256ae1406228dfdf26531c1d96", "committedDate": "2020-05-26T20:02:56Z", "message": "Merge remote-tracking branch 'upstream/master' into comparator-set-min-competitive"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMjczOTYz", "url": "https://github.com/apache/lucene-solr/pull/1351#pullrequestreview-431273963", "createdAt": "2020-06-16T08:26:35Z", "commit": {"oid": "f9100306125bc7256ae1406228dfdf26531c1d96"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODoyNjozNlrOGkQsrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODo0MzowMlrOGkRVjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY3NTUwMQ==", "bodyText": "maybe we should throw IOException here to not force some implementations to catch/rethrow an an UncheckedIOException", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r440675501", "createdAt": "2020-06-16T08:26:36Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/FilteringLeafFieldComparator.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.search;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Decorates a wrapped LeafFieldComparator to add a functionality to skip over non-competitive docs.\n+ * FilteringLeafFieldComparator provides two additional functions to a LeafFieldComparator:\n+ *  {@code competitiveIterator()} and {@code setCanUpdateIterator()}.\n+ */\n+public interface FilteringLeafFieldComparator extends LeafFieldComparator {\n+  /**\n+   * Returns a competitive iterator\n+   * @return an iterator over competitive docs that are stronger than already collected docs\n+   * or {@code null} if such an iterator is not available for the current segment.\n+   */\n+  DocIdSetIterator competitiveIterator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9100306125bc7256ae1406228dfdf26531c1d96"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY3NTc4Nw==", "bodyText": "add the class to the error message?", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r440675787", "createdAt": "2020-06-16T08:27:02Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/FilteringNumericComparator.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.search;\n+\n+import org.apache.lucene.index.LeafReaderContext;\n+\n+import java.io.IOException;\n+\n+/**\n+ * A wrapper over {@code NumericComparator} that provides a leaf comparator that can filter non-competitive docs.\n+ */\n+class FilteringNumericComparator<T extends Number> extends FilteringFieldComparator<T> {\n+  public FilteringNumericComparator(NumericComparator<T> in, boolean reverse, boolean singleSort) {\n+    super(in, reverse, singleSort);\n+  }\n+\n+  @Override\n+  public final FilteringLeafFieldComparator getLeafComparator(LeafReaderContext context) throws IOException {\n+    LeafFieldComparator inLeafComparator = in.getLeafComparator(context);\n+    Class<?> comparatorClass = inLeafComparator.getClass();\n+    if (comparatorClass == FieldComparator.LongComparator.class) {\n+      return new FilteringNumericLeafComparator.FilteringLongLeafComparator((FieldComparator.LongComparator) inLeafComparator, context,\n+          ((LongComparator) inLeafComparator).field, reverse, singleSort, hasTopValue);\n+    } if (comparatorClass == FieldComparator.IntComparator.class) {\n+      return new FilteringNumericLeafComparator.FilteringIntLeafComparator((FieldComparator.IntComparator) inLeafComparator, context,\n+          ((IntComparator) inLeafComparator).field, reverse, singleSort, hasTopValue);\n+    } else if (comparatorClass == FieldComparator.DoubleComparator.class) {\n+      return new FilteringNumericLeafComparator.FilteringDoubleLeafComparator((FieldComparator.DoubleComparator) inLeafComparator, context,\n+          ((DoubleComparator) inLeafComparator).field, reverse, singleSort, hasTopValue);\n+    } else if (comparatorClass == FieldComparator.FloatComparator.class) {\n+      return new FilteringNumericLeafComparator.FilteringFloatLeafComparator((FieldComparator.FloatComparator) inLeafComparator, context,\n+          ((FloatComparator) inLeafComparator).field, reverse, singleSort, hasTopValue);\n+    } else {\n+      assert false: \"Unexpected class for [FieldComparator]!\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9100306125bc7256ae1406228dfdf26531c1d96"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY3NjA3NQ==", "bodyText": "should we throw an IllegalStateException instead of being lenient when assertions are disabled?", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r440676075", "createdAt": "2020-06-16T08:27:29Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/FilteringNumericComparator.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.search;\n+\n+import org.apache.lucene.index.LeafReaderContext;\n+\n+import java.io.IOException;\n+\n+/**\n+ * A wrapper over {@code NumericComparator} that provides a leaf comparator that can filter non-competitive docs.\n+ */\n+class FilteringNumericComparator<T extends Number> extends FilteringFieldComparator<T> {\n+  public FilteringNumericComparator(NumericComparator<T> in, boolean reverse, boolean singleSort) {\n+    super(in, reverse, singleSort);\n+  }\n+\n+  @Override\n+  public final FilteringLeafFieldComparator getLeafComparator(LeafReaderContext context) throws IOException {\n+    LeafFieldComparator inLeafComparator = in.getLeafComparator(context);\n+    Class<?> comparatorClass = inLeafComparator.getClass();\n+    if (comparatorClass == FieldComparator.LongComparator.class) {\n+      return new FilteringNumericLeafComparator.FilteringLongLeafComparator((FieldComparator.LongComparator) inLeafComparator, context,\n+          ((LongComparator) inLeafComparator).field, reverse, singleSort, hasTopValue);\n+    } if (comparatorClass == FieldComparator.IntComparator.class) {\n+      return new FilteringNumericLeafComparator.FilteringIntLeafComparator((FieldComparator.IntComparator) inLeafComparator, context,\n+          ((IntComparator) inLeafComparator).field, reverse, singleSort, hasTopValue);\n+    } else if (comparatorClass == FieldComparator.DoubleComparator.class) {\n+      return new FilteringNumericLeafComparator.FilteringDoubleLeafComparator((FieldComparator.DoubleComparator) inLeafComparator, context,\n+          ((DoubleComparator) inLeafComparator).field, reverse, singleSort, hasTopValue);\n+    } else if (comparatorClass == FieldComparator.FloatComparator.class) {\n+      return new FilteringNumericLeafComparator.FilteringFloatLeafComparator((FieldComparator.FloatComparator) inLeafComparator, context,\n+          ((FloatComparator) inLeafComparator).field, reverse, singleSort, hasTopValue);\n+    } else {\n+      assert false: \"Unexpected class for [FieldComparator]!\";\n+      return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9100306125bc7256ae1406228dfdf26531c1d96"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY4NTk2Nw==", "bodyText": "should we return CELL_OUTSIDE_QUERY here when appropriate instead of delaying?", "url": "https://github.com/apache/lucene-solr/pull/1351#discussion_r440685967", "createdAt": "2020-06-16T08:43:02Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/FilteringNumericLeafComparator.java", "diffHunk": "@@ -0,0 +1,340 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.search;\n+\n+import org.apache.lucene.document.DoublePoint;\n+import org.apache.lucene.document.FloatPoint;\n+import org.apache.lucene.document.IntPoint;\n+import org.apache.lucene.document.LongPoint;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.PointValues;\n+import org.apache.lucene.util.DocIdSetBuilder;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+\n+/**\n+ * A {@code FilteringLeafFieldComparator} that provides a functionality to skip over non-competitive documents\n+ * for numeric fields indexed with points.\n+ */\n+abstract class FilteringNumericLeafComparator implements FilteringLeafFieldComparator {\n+  protected final LeafFieldComparator in;\n+  protected final boolean reverse;\n+  protected final boolean singleSort;\n+  private final boolean hasTopValue;\n+  private final PointValues pointValues;\n+  private final int bytesCount;\n+  private final int maxDoc;\n+  private final byte[] minValueAsBytes;\n+  private final byte[] maxValueAsBytes;\n+\n+  private long iteratorCost;\n+  private int maxDocVisited = 0;\n+  private int updateCounter = 0;\n+  private boolean canUpdateIterator = false; // set to true when queue becomes full and hitsThreshold is reached\n+  private DocIdSetIterator competitiveIterator;\n+\n+  public FilteringNumericLeafComparator(LeafFieldComparator in, LeafReaderContext context, String field,\n+        boolean reverse, boolean singleSort, boolean hasTopValue, int bytesCount) throws IOException {\n+    this.in = in;\n+    this.pointValues = context.reader().getPointValues(field);\n+    this.reverse = reverse;\n+    this.singleSort = singleSort;\n+    this.hasTopValue = hasTopValue;\n+    this.maxDoc = context.reader().maxDoc();\n+    this.bytesCount = bytesCount;\n+    this.maxValueAsBytes = reverse == false ? new byte[bytesCount] : hasTopValue ? new byte[bytesCount] : null;\n+    this.minValueAsBytes = reverse ? new byte[bytesCount] : hasTopValue ? new byte[bytesCount] : null;\n+\n+    // TODO: optimize a case when pointValues are missing only on this segment\n+    this.competitiveIterator = pointValues == null ? null : DocIdSetIterator.all(maxDoc);\n+    this.iteratorCost = maxDoc;\n+  }\n+\n+  @Override\n+  public void setBottom(int slot) throws IOException {\n+    in.setBottom(slot);\n+    updateCompetitiveIterator(); // update an iterator if we set a new bottom\n+  }\n+\n+  @Override\n+  public int compareBottom(int doc) throws IOException {\n+    return in.compareBottom(doc);\n+  }\n+\n+  @Override\n+  public int compareTop(int doc) throws IOException {\n+    return in.compareTop(doc);\n+  }\n+\n+  @Override\n+  public void copy(int slot, int doc) throws IOException {\n+    in.copy(slot, doc);\n+    maxDocVisited = doc;\n+  }\n+\n+  @Override\n+  public void setScorer(Scorable scorer) throws IOException {\n+    in.setScorer(scorer);\n+    if (scorer instanceof Scorer) {\n+      iteratorCost = ((Scorer) scorer).iterator().cost(); // starting iterator cost is the scorer's cost\n+      updateCompetitiveIterator(); // update an iterator when we have a new segment\n+    }\n+  }\n+\n+  @Override\n+  public void setCanUpdateIterator() throws IOException {\n+    this.canUpdateIterator = true;\n+    updateCompetitiveIterator();\n+  }\n+\n+  @Override\n+  public DocIdSetIterator competitiveIterator() {\n+    if (competitiveIterator == null) return null;\n+    return new DocIdSetIterator() {\n+      private int doc;\n+\n+      @Override\n+      public int nextDoc() throws IOException {\n+        return doc = competitiveIterator.nextDoc();\n+      }\n+\n+      @Override\n+      public int docID() {\n+        return doc;\n+      }\n+\n+      @Override\n+      public long cost() {\n+        return competitiveIterator.cost();\n+      }\n+\n+      @Override\n+      public int advance(int target) throws IOException {\n+        return doc = competitiveIterator.advance(target);\n+      }\n+    };\n+  }\n+\n+  // update its iterator to include possibly only docs that are \"stronger\" than the current bottom entry\n+  private void updateCompetitiveIterator() throws IOException {\n+    if (canUpdateIterator == false) return;\n+    if (pointValues == null) return;\n+    // if some documents have missing points, check that missing values prohibits optimization\n+    if ((pointValues.getDocCount() < maxDoc) && isMissingValueCompetitive()) {\n+      return; // we can't filter out documents, as documents with missing values are competitive\n+    }\n+\n+    updateCounter++;\n+    if (updateCounter > 256 && (updateCounter & 0x1f) != 0x1f) { // Start sampling if we get called too much\n+      return;\n+    }\n+    if (reverse == false) {\n+      encodeBottom(maxValueAsBytes);\n+      if (hasTopValue) {\n+        encodeTop(minValueAsBytes);\n+      }\n+    } else {\n+      encodeBottom(minValueAsBytes);\n+      if (hasTopValue) {\n+        encodeTop(maxValueAsBytes);\n+      }\n+    }\n+\n+    DocIdSetBuilder result = new DocIdSetBuilder(maxDoc);\n+    PointValues.IntersectVisitor visitor = new PointValues.IntersectVisitor() {\n+      DocIdSetBuilder.BulkAdder adder;\n+\n+      @Override\n+      public void grow(int count) {\n+        adder = result.grow(count);\n+      }\n+\n+      @Override\n+      public void visit(int docID) {\n+        if (docID <= maxDocVisited) {\n+          return; // Already visited or skipped\n+        }\n+        adder.add(docID);\n+      }\n+\n+      @Override\n+      public void visit(int docID, byte[] packedValue) {\n+        if (docID <= maxDocVisited) {\n+          return;  // already visited or skipped\n+        }\n+        if (maxValueAsBytes != null) {\n+          int cmp = Arrays.compareUnsigned(packedValue, 0, bytesCount, maxValueAsBytes, 0, bytesCount);\n+          // if doc's value is too high or for single sort even equal, it is not competitive and the doc can be skipped\n+          if (cmp > 0 || (singleSort && cmp == 0)) return;\n+        }\n+        if (minValueAsBytes != null) {\n+          int cmp = Arrays.compareUnsigned(packedValue, 0, bytesCount, minValueAsBytes, 0, bytesCount);\n+          // if doc's value is too low or for single sort even equal, it is not competitive and the doc can be skipped\n+          if (cmp < 0 || (singleSort && cmp == 0)) return;\n+        }\n+        adder.add(docID); // doc is competitive\n+      }\n+\n+      @Override\n+      public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n+        boolean maxValueOutsideQuery = false;\n+        boolean minValueOutsideQuery = false;\n+        if (maxValueAsBytes != null) {\n+          int cmp = Arrays.compareUnsigned(minPackedValue, 0, bytesCount, maxValueAsBytes, 0, bytesCount);\n+          maxValueOutsideQuery = cmp > 0 || (singleSort && cmp == 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9100306125bc7256ae1406228dfdf26531c1d96"}, "originalPosition": 199}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99dd0c1e219b3b74e09bc0dad257533247de9ab0", "author": {"user": {"login": "mayya-sharipova", "name": "Mayya Sharipova"}}, "url": "https://github.com/apache/lucene-solr/commit/99dd0c1e219b3b74e09bc0dad257533247de9ab0", "committedDate": "2020-06-16T18:43:41Z", "message": "Address Adrien's feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ebcff85cbd06a9d5a198397f15c82a40196df32", "author": {"user": {"login": "mayya-sharipova", "name": "Mayya Sharipova"}}, "url": "https://github.com/apache/lucene-solr/commit/8ebcff85cbd06a9d5a198397f15c82a40196df32", "committedDate": "2020-06-16T18:45:28Z", "message": "Merge remote-tracking branch 'upstream/master' into comparator-set-min-competitive"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55f2940eca0345c170a4a72e0f8bd2e7cb069864", "author": {"user": {"login": "mayya-sharipova", "name": "Mayya Sharipova"}}, "url": "https://github.com/apache/lucene-solr/commit/55f2940eca0345c170a4a72e0f8bd2e7cb069864", "committedDate": "2020-06-23T19:35:16Z", "message": "Add contributors' names"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2201, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}