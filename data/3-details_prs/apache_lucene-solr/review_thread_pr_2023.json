{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5NDAzNjE2", "number": 2023, "reviewThreads": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTozNzoyMlrOExf8-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxMDowMjoxN1rOExgTuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMzM5MTk1OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/document/RangeFieldQuery.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTozNzoyMlrOHnrPHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTozNzoyMlrOHnrPHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM2NDg5Mw==", "bodyText": "This is used in o.a.l.sandbox.document.LatLonBoundingBox.", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511364893", "createdAt": "2020-10-24T09:37:22Z", "author": {"login": "mocobeta"}, "path": "lucene/core/src/java/org/apache/lucene/document/RangeFieldQuery.java", "diffHunk": "@@ -41,7 +41,7 @@\n /**\n  * Query class for searching {@code RangeField} types by a defined {@link Relation}.\n  */\n-abstract class RangeFieldQuery extends Query {\n+public abstract class RangeFieldQuery extends Query {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef874af04658b03b26ba27afe98b7b36c2617935"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMzM5NjQ0OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/document/RangeFieldQuery.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTozOToxNFrOHnrR_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTozOToxNFrOHnrR_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM2NTYyOA==", "bodyText": "This is used in o.a.l.sandbox.document.LatLonBoundingBox.", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511365628", "createdAt": "2020-10-24T09:39:14Z", "author": {"login": "mocobeta"}, "path": "lucene/core/src/java/org/apache/lucene/document/RangeFieldQuery.java", "diffHunk": "@@ -57,7 +57,7 @@\n   final int bytesPerDim;\n \n   /** Used by {@code RangeFieldQuery} to check how each internal or leaf node relates to the query. */\n-  enum QueryType {\n+  public enum QueryType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef874af04658b03b26ba27afe98b7b36c2617935"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMzQwNjcyOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/document/RangeFieldQuery.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTo0MzowN1rOHnrY1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTo0MzowN1rOHnrY1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM2NzM4MQ==", "bodyText": "This is used in o.a.l.sandbox.document.LatLonBoundingBox.", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511367381", "createdAt": "2020-10-24T09:43:07Z", "author": {"login": "mocobeta"}, "path": "lucene/core/src/java/org/apache/lucene/document/RangeFieldQuery.java", "diffHunk": "@@ -228,7 +228,7 @@ boolean matches(byte[] queryPackedValue, byte[] packedValue, int numDims, int by\n    * @param ranges encoded range values; this is done by the {@code RangeField} implementation\n    * @param queryType the query relation\n    */\n-  RangeFieldQuery(String field, final byte[] ranges, final int numDims, final QueryType queryType) {\n+  protected RangeFieldQuery(String field, final byte[] ranges, final int numDims, final QueryType queryType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef874af04658b03b26ba27afe98b7b36c2617935"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMzQxMDI0OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/search/ExactPhraseMatcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTo0NDo0MlrOHnrbJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTo0NDo0MlrOHnrbJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM2Nzk3Mg==", "bodyText": "This is used in o.a.l.sandbox.search.PhraseWildcardQuery.", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511367972", "createdAt": "2020-10-24T09:44:42Z", "author": {"login": "mocobeta"}, "path": "lucene/core/src/java/org/apache/lucene/search/ExactPhraseMatcher.java", "diffHunk": "@@ -33,7 +33,8 @@\n import org.apache.lucene.search.similarities.Similarity.SimScorer;\n import org.apache.lucene.util.PriorityQueue;\n \n-final class ExactPhraseMatcher extends PhraseMatcher {\n+/** Expert: Find exact phrases */\n+public final class ExactPhraseMatcher extends PhraseMatcher {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef874af04658b03b26ba27afe98b7b36c2617935"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMzQxMTQ5OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/search/ExactPhraseMatcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTo0NToxOVrOHnrb1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTo0NToxOVrOHnrb1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM2ODE1MQ==", "bodyText": "Same avobe.", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511368151", "createdAt": "2020-10-24T09:45:19Z", "author": {"login": "mocobeta"}, "path": "lucene/core/src/java/org/apache/lucene/search/ExactPhraseMatcher.java", "diffHunk": "@@ -50,7 +51,8 @@ public PostingsAndPosition(PostingsEnum postings, int offset) {\n   private final DocIdSetIterator approximation;\n   private final ImpactsDISI impactsApproximation;\n \n-  ExactPhraseMatcher(PhraseQuery.PostingsAndFreq[] postings, ScoreMode scoreMode, SimScorer scorer, float matchCost) {\n+  /** Expert: Creates ExactPhraseMatcher instance */\n+  public ExactPhraseMatcher(PhraseQuery.PostingsAndFreq[] postings, ScoreMode scoreMode, SimScorer scorer, float matchCost) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef874af04658b03b26ba27afe98b7b36c2617935"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMzQxNDgzOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/search/HitQueue.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTo0NjozMVrOHnrdsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTo0NjozMVrOHnrdsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM2ODYyNQ==", "bodyText": "This is used in o.a.l.sandbox.search.LargeNumHitsTopDocsCollector.", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511368625", "createdAt": "2020-10-24T09:46:31Z", "author": {"login": "mocobeta"}, "path": "lucene/core/src/java/org/apache/lucene/search/HitQueue.java", "diffHunk": "@@ -19,7 +19,8 @@\n \n import org.apache.lucene.util.PriorityQueue;\n \n-final class HitQueue extends PriorityQueue<ScoreDoc> {\n+/** Expert: Priority queue containing hit docs */\n+public final class HitQueue extends PriorityQueue<ScoreDoc> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef874af04658b03b26ba27afe98b7b36c2617935"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMzQxNTIxOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/search/HitQueue.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTo0Njo0MFrOHnrd8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTo0Njo0MFrOHnrd8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM2ODY4OA==", "bodyText": "Same above.", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511368688", "createdAt": "2020-10-24T09:46:40Z", "author": {"login": "mocobeta"}, "path": "lucene/core/src/java/org/apache/lucene/search/HitQueue.java", "diffHunk": "@@ -59,7 +60,7 @@\n    * @param prePopulate\n    *          specifies whether to pre-populate the queue with sentinel values.\n    */\n-  HitQueue(int size, boolean prePopulate) {\n+  public HitQueue(int size, boolean prePopulate) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef874af04658b03b26ba27afe98b7b36c2617935"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMzQxOTQwOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTo0ODoyNFrOHnrgsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTo0ODoyNFrOHnrgsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM2OTM5Mg==", "bodyText": "This is used in o.a.l.sandbox.search.PhraseWildcardQuery.", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511369392", "createdAt": "2020-10-24T09:48:24Z", "author": {"login": "mocobeta"}, "path": "lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.java", "diffHunk": "@@ -410,7 +410,7 @@ private boolean termArraysEquals(Term[][] termArrays1, Term[][] termArrays2) {\n    * <p>\n    * Note: positions are merged during freq()\n    */\n-  static class UnionPostingsEnum extends PostingsEnum {\n+  public static class UnionPostingsEnum extends PostingsEnum {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef874af04658b03b26ba27afe98b7b36c2617935"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMzQxOTg3OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTo0ODozNFrOHnrg9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTo0ODozNFrOHnrg9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM2OTQ2MQ==", "bodyText": "Same avobe.", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511369461", "createdAt": "2020-10-24T09:48:34Z", "author": {"login": "mocobeta"}, "path": "lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.java", "diffHunk": "@@ -423,7 +423,7 @@ private boolean termArraysEquals(Term[][] termArrays1, Term[][] termArrays2) {\n     /** list of subs (unordered) */\n     final PostingsEnum[] subs;\n \n-    UnionPostingsEnum(Collection<PostingsEnum> subs) {\n+    public UnionPostingsEnum(Collection<PostingsEnum> subs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef874af04658b03b26ba27afe98b7b36c2617935"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMzQyMTg5OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTo0OToyNVrOHnriKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTo0OToyNVrOHnriKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM2OTc3MA==", "bodyText": "This is used in o.a.l.sandbox.search.PhraseWildcardQuery.", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511369770", "createdAt": "2020-10-24T09:49:25Z", "author": {"login": "mocobeta"}, "path": "lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.java", "diffHunk": "@@ -575,17 +575,17 @@ private void growArray() {\n     }\n   }\n \n-  // Slower version of UnionPostingsEnum that delegates offsets and positions, for\n-  // use by MatchesIterator\n-  static class UnionFullPostingsEnum extends UnionPostingsEnum {\n+  /** Slower version of UnionPostingsEnum that delegates offsets and positions, for\n+   use by MatchesIterator */\n+  public static class UnionFullPostingsEnum extends UnionPostingsEnum {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef874af04658b03b26ba27afe98b7b36c2617935"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMzQyMjM4OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTo0OTozM1rOHnribQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTo0OTozM1rOHnribQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM2OTgzNw==", "bodyText": "Same above.", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511369837", "createdAt": "2020-10-24T09:49:33Z", "author": {"login": "mocobeta"}, "path": "lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.java", "diffHunk": "@@ -575,17 +575,17 @@ private void growArray() {\n     }\n   }\n \n-  // Slower version of UnionPostingsEnum that delegates offsets and positions, for\n-  // use by MatchesIterator\n-  static class UnionFullPostingsEnum extends UnionPostingsEnum {\n+  /** Slower version of UnionPostingsEnum that delegates offsets and positions, for\n+   use by MatchesIterator */\n+  public static class UnionFullPostingsEnum extends UnionPostingsEnum {\n \n     int freq = -1;\n     boolean started = false;\n \n     final PriorityQueue<PostingsAndPosition> posQueue;\n     final Collection<PostingsAndPosition> subs;\n \n-    UnionFullPostingsEnum(List<PostingsEnum> subs) {\n+    public UnionFullPostingsEnum(List<PostingsEnum> subs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef874af04658b03b26ba27afe98b7b36c2617935"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMzQyNDA3OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/search/Multiset.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTo1MDoyOVrOHnrjdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTo1MDoyOVrOHnrjdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM3MDEwMQ==", "bodyText": "This is used in o.a.l.sandbox.search.CoveringQuery.", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511370101", "createdAt": "2020-10-24T09:50:29Z", "author": {"login": "mocobeta"}, "path": "lucene/core/src/java/org/apache/lucene/search/Multiset.java", "diffHunk": "@@ -29,13 +29,13 @@\n  * Iteration order is not specified.\n  * @lucene.internal\n  */\n-final class Multiset<T> extends AbstractCollection<T> {\n+public final class Multiset<T> extends AbstractCollection<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef874af04658b03b26ba27afe98b7b36c2617935"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMzQyNDQ5OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/search/Multiset.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTo1MDozN1rOHnrjqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTo1MDozN1rOHnrjqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM3MDE1Mw==", "bodyText": "Same above.", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511370153", "createdAt": "2020-10-24T09:50:37Z", "author": {"login": "mocobeta"}, "path": "lucene/core/src/java/org/apache/lucene/search/Multiset.java", "diffHunk": "@@ -29,13 +29,13 @@\n  * Iteration order is not specified.\n  * @lucene.internal\n  */\n-final class Multiset<T> extends AbstractCollection<T> {\n+public final class Multiset<T> extends AbstractCollection<T> {\n \n   private final Map<T, Integer> map = new HashMap<>();\n   private int size;\n \n   /** Create an empty {@link Multiset}. */\n-  Multiset() {\n+  public Multiset() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef874af04658b03b26ba27afe98b7b36c2617935"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMzQyNzkxOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/search/PhraseMatcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTo1MjowMVrOHnrl0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTo1MjowMVrOHnrl0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM3MDcwNw==", "bodyText": "This is used in o.a.l.sandbox.search.PhraseWildcardQuery.", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511370707", "createdAt": "2020-10-24T09:52:01Z", "author": {"login": "mocobeta"}, "path": "lucene/core/src/java/org/apache/lucene/search/PhraseMatcher.java", "diffHunk": "@@ -26,7 +26,7 @@\n  * relevant document, then call {@link #reset()}.  Clients can then call\n  * {@link #nextMatch()} to iterate over the matches\n  */\n-abstract class PhraseMatcher {\n+public abstract class PhraseMatcher {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef874af04658b03b26ba27afe98b7b36c2617935"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMzQyOTYwOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/search/PhraseQuery.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTo1MzowM1rOHnrnFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTo1MzowM1rOHnrnFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM3MTAyOA==", "bodyText": "This is used in o.a.l.sandbox.search.PhraseWildcardQuery.", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511371028", "createdAt": "2020-10-24T09:53:03Z", "author": {"login": "mocobeta"}, "path": "lucene/core/src/java/org/apache/lucene/search/PhraseQuery.java", "diffHunk": "@@ -304,13 +304,15 @@ public void visit(QueryVisitor visitor) {\n     v.consumeTerms(this, terms);\n   }\n \n-  static class PostingsAndFreq implements Comparable<PostingsAndFreq> {\n+  /** Term postings and position information for phrase matching */\n+  public static class PostingsAndFreq implements Comparable<PostingsAndFreq> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef874af04658b03b26ba27afe98b7b36c2617935"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMzQzMTc5OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/search/PhraseQuery.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTo1NDowNVrOHnrokg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTo1NDowNVrOHnrokg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM3MTQxMA==", "bodyText": "This is used in o.a.l.sandbox.search.PhraseWildcardQuery.", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511371410", "createdAt": "2020-10-24T09:54:05Z", "author": {"login": "mocobeta"}, "path": "lucene/core/src/java/org/apache/lucene/search/PhraseQuery.java", "diffHunk": "@@ -413,7 +415,7 @@ public boolean equals(Object obj) {\n    *  This is for use by {@link TwoPhaseIterator#matchCost} implementations.\n    *  @param termsEnum The term is the term at which this TermsEnum is positioned.\n    */\n-  static float termPositionsCost(TermsEnum termsEnum) throws IOException {\n+  public static float termPositionsCost(TermsEnum termsEnum) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef874af04658b03b26ba27afe98b7b36c2617935"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMzQzNDAxOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/search/PhraseWeight.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTo1NDo1NFrOHnrqAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTo1NDo1NFrOHnrqAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM3MTc3Nw==", "bodyText": "This is used in o.a.l.sandbox.search.PhraseWildcardQuery.", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511371777", "createdAt": "2020-10-24T09:54:54Z", "author": {"login": "mocobeta"}, "path": "lucene/core/src/java/org/apache/lucene/search/PhraseWeight.java", "diffHunk": "@@ -23,13 +23,15 @@\n import org.apache.lucene.search.similarities.Similarity;\n import org.apache.lucene.search.similarities.Similarity.SimScorer;\n \n-abstract class PhraseWeight extends Weight {\n+/** Expert: Weight class for phrase matching */\n+public abstract class PhraseWeight extends Weight {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef874af04658b03b26ba27afe98b7b36c2617935"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMzQzNjY2OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTo1NTo1OVrOHnrrgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTo1NTo1OVrOHnrrgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM3MjE2MA==", "bodyText": "This is used in o.a.l.sandbox.search.PhraseWildcardQuery.", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511372160", "createdAt": "2020-10-24T09:55:59Z", "author": {"login": "mocobeta"}, "path": "lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher.java", "diffHunk": "@@ -53,7 +53,7 @@\n  * would get same score as \"g f\"~2, although \"c b\"~2 could be matched twice.\n  * We may want to fix this in the future (currently not, for performance reasons).\n  */\n-final class SloppyPhraseMatcher extends PhraseMatcher {\n+public final class SloppyPhraseMatcher extends PhraseMatcher {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef874af04658b03b26ba27afe98b7b36c2617935"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMzQzOTExOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTo1NzowMFrOHnrs8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTo1NzowMFrOHnrs8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM3MjUyOA==", "bodyText": "Same above.", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511372528", "createdAt": "2020-10-24T09:57:00Z", "author": {"login": "mocobeta"}, "path": "lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher.java", "diffHunk": "@@ -81,7 +81,7 @@\n   private boolean positioned;\n   private int matchLength;\n \n-  SloppyPhraseMatcher(PhraseQuery.PostingsAndFreq[] postings, int slop, ScoreMode scoreMode, SimScorer scorer, float matchCost, boolean captureLeadMatch) {\n+  public SloppyPhraseMatcher(PhraseQuery.PostingsAndFreq[] postings, int slop, ScoreMode scoreMode, SimScorer scorer, float matchCost, boolean captureLeadMatch) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef874af04658b03b26ba27afe98b7b36c2617935"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMzQ0MTA0OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/search/TermScorer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTo1Nzo1MlrOHnruEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTo1Nzo1MlrOHnruEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM3MjgxNg==", "bodyText": "This is used in o.a.l.sandbox.search.BM25FQuery.", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511372816", "createdAt": "2020-10-24T09:57:52Z", "author": {"login": "mocobeta"}, "path": "lucene/core/src/java/org/apache/lucene/search/TermScorer.java", "diffHunk": "@@ -25,7 +25,7 @@\n \n /** Expert: A <code>Scorer</code> for documents matching a <code>Term</code>.\n  */\n-final class TermScorer extends Scorer {\n+public final class TermScorer extends Scorer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef874af04658b03b26ba27afe98b7b36c2617935"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMzQ0Mjg4OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/search/TermScorer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTo1ODo1MlrOHnrvaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTo1ODo1MlrOHnrvaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM3MzE2MQ==", "bodyText": "Same above.", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511373161", "createdAt": "2020-10-24T09:58:52Z", "author": {"login": "mocobeta"}, "path": "lucene/core/src/java/org/apache/lucene/search/TermScorer.java", "diffHunk": "@@ -35,7 +35,7 @@\n   /**\n    * Construct a {@link TermScorer} that will iterate all documents.\n    */\n-  TermScorer(Weight weight, PostingsEnum postingsEnum, LeafSimScorer docScorer) {\n+  public TermScorer(Weight weight, PostingsEnum postingsEnum, LeafSimScorer docScorer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef874af04658b03b26ba27afe98b7b36c2617935"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMzQ0NDU2OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/search/TermScorer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTo1OTozN1rOHnrwfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTo1OTozN1rOHnrwfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM3MzQzNw==", "bodyText": "Same above.", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511373437", "createdAt": "2020-10-24T09:59:37Z", "author": {"login": "mocobeta"}, "path": "lucene/core/src/java/org/apache/lucene/search/TermScorer.java", "diffHunk": "@@ -60,7 +60,8 @@ public int docID() {\n     return postingsEnum.docID();\n   }\n \n-  final int freq() throws IOException {\n+  /** Returns term frequency in the current document. */\n+  public final int freq() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef874af04658b03b26ba27afe98b7b36c2617935"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMzQ0NzI2OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/search/TopDocsCollector.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxMDowMDo1NlrOHnryMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxMDowMDo1NlrOHnryMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM3Mzg3NA==", "bodyText": "This is used in o.a.l.sandbox.search.LargeNumHitsTopDocsCollector.", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511373874", "createdAt": "2020-10-24T10:00:56Z", "author": {"login": "mocobeta"}, "path": "lucene/core/src/java/org/apache/lucene/search/TopDocsCollector.java", "diffHunk": "@@ -35,7 +35,7 @@\n \n   /** This is used in case topDocs() is called with illegal parameters, or there\n    *  simply aren't (enough) results. */\n-  protected static final TopDocs EMPTY_TOPDOCS = new TopDocs(new TotalHits(0, TotalHits.Relation.EQUAL_TO), new ScoreDoc[0]);\n+  public static final TopDocs EMPTY_TOPDOCS = new TopDocs(new TotalHits(0, TotalHits.Relation.EQUAL_TO), new ScoreDoc[0]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef874af04658b03b26ba27afe98b7b36c2617935"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMzQ0OTg4OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/search/TopScoreDocCollector.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxMDowMjowOFrOHnrztQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxMDowMjowOFrOHnrztQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM3NDI2MQ==", "bodyText": "This is used in o.a.l.sandbox.search.LargeNumHitsTopDocsCollector.", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511374261", "createdAt": "2020-10-24T10:02:08Z", "author": {"login": "mocobeta"}, "path": "lucene/core/src/java/org/apache/lucene/search/TopScoreDocCollector.java", "diffHunk": "@@ -38,9 +38,10 @@\n  */\n public abstract class TopScoreDocCollector extends TopDocsCollector<ScoreDoc> {\n \n-  abstract static class ScorerLeafCollector implements LeafCollector {\n+  /** Scorable leaf collector */\n+  public abstract static class ScorerLeafCollector implements LeafCollector {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef874af04658b03b26ba27afe98b7b36c2617935"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMzQ1MDE2OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/search/TopScoreDocCollector.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxMDowMjoxOFrOHnrz7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxMDowMjoxOFrOHnrz7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM3NDMxOQ==", "bodyText": "Same above.", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511374319", "createdAt": "2020-10-24T10:02:18Z", "author": {"login": "mocobeta"}, "path": "lucene/core/src/java/org/apache/lucene/search/TopScoreDocCollector.java", "diffHunk": "@@ -38,9 +38,10 @@\n  */\n public abstract class TopScoreDocCollector extends TopDocsCollector<ScoreDoc> {\n \n-  abstract static class ScorerLeafCollector implements LeafCollector {\n+  /** Scorable leaf collector */\n+  public abstract static class ScorerLeafCollector implements LeafCollector {\n \n-    Scorable scorer;\n+    protected Scorable scorer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef874af04658b03b26ba27afe98b7b36c2617935"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1021, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}