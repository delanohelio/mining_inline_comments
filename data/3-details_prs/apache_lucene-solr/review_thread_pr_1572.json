{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzMzgzNzgy", "number": 1572, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwMDoxNTo1MFrOEFN3Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMjowMDowMVrOEGiBqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTA1NDc0OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/core/CoreContainer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwMDoxNTo1MFrOGjUVAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QyMTo1MzozN1rOGjZj6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY4NjQwMw==", "bodyText": "This doesn't cover the case of a ../foo path, right? is that covered somewhere else?", "url": "https://github.com/apache/lucene-solr/pull/1572#discussion_r439686403", "createdAt": "2020-06-13T00:15:50Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/java/org/apache/solr/core/CoreContainer.java", "diffHunk": "@@ -1259,6 +1277,20 @@ public SolrCore create(String coreName, Path instancePath, Map<String, String> p\n     }\n   }\n \n+  /**\n+   * Checks that the given path is relative to SOLR_HOME, SOLR_DATA_HOME, coreRootDirectory or one of the paths\n+   * specified in solr.xml's allowPaths element.\n+   * @param path path to check\n+   * @throws SolrException if path is outside allowed paths\n+   */\n+  public void assertPathAllowed(Path path) throws SolrException {\n+    if (path.normalize().equals(path) && !path.isAbsolute()) return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86e669cacc584fb5146bd8312911aa797f3b5db9"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTczMDc4OQ==", "bodyText": "You are right. We need a more thorough check\n\nDisallow relative paths starting with \".\"\nAlways normalize() the path before toAbsolutePath() to catch the /var/solr/../../etc case, else that example would return true for startsWith(\"/var/solr\")", "url": "https://github.com/apache/lucene-solr/pull/1572#discussion_r439730789", "createdAt": "2020-06-13T11:08:20Z", "author": {"login": "janhoy"}, "path": "solr/core/src/java/org/apache/solr/core/CoreContainer.java", "diffHunk": "@@ -1259,6 +1277,20 @@ public SolrCore create(String coreName, Path instancePath, Map<String, String> p\n     }\n   }\n \n+  /**\n+   * Checks that the given path is relative to SOLR_HOME, SOLR_DATA_HOME, coreRootDirectory or one of the paths\n+   * specified in solr.xml's allowPaths element.\n+   * @param path path to check\n+   * @throws SolrException if path is outside allowed paths\n+   */\n+  public void assertPathAllowed(Path path) throws SolrException {\n+    if (path.normalize().equals(path) && !path.isAbsolute()) return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY4NjQwMw=="}, "originalCommit": {"oid": "86e669cacc584fb5146bd8312911aa797f3b5db9"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc3MjEzOQ==", "bodyText": "I pushed a commit addressing this. Quite a few changes, but we now detect .. specifically.", "url": "https://github.com/apache/lucene-solr/pull/1572#discussion_r439772139", "createdAt": "2020-06-13T21:53:37Z", "author": {"login": "janhoy"}, "path": "solr/core/src/java/org/apache/solr/core/CoreContainer.java", "diffHunk": "@@ -1259,6 +1277,20 @@ public SolrCore create(String coreName, Path instancePath, Map<String, String> p\n     }\n   }\n \n+  /**\n+   * Checks that the given path is relative to SOLR_HOME, SOLR_DATA_HOME, coreRootDirectory or one of the paths\n+   * specified in solr.xml's allowPaths element.\n+   * @param path path to check\n+   * @throws SolrException if path is outside allowed paths\n+   */\n+  public void assertPathAllowed(Path path) throws SolrException {\n+    if (path.normalize().equals(path) && !path.isAbsolute()) return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY4NjQwMw=="}, "originalCommit": {"oid": "86e669cacc584fb5146bd8312911aa797f3b5db9"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTcwMTg4OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/core/SolrPaths.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QyMTo1NjozOVrOGjZkhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMTo1MjoyMVrOGlYr8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc3MjI5Mg==", "bodyText": "I have not tested this on Windows. On my mac, the Path class uses an OSX implementation so I think it will not detect the UNC style path, it does not manage to normalize or make it absolute, so I scoped the check for Windows only. I test on the string version before normalizing since normalize may mess up UNC paths.\nI decided to block UNC totally instead of trying to be smart about it. Users can always map a drive letter to the desired share to work around it?", "url": "https://github.com/apache/lucene-solr/pull/1572#discussion_r439772292", "createdAt": "2020-06-13T21:56:39Z", "author": {"login": "janhoy"}, "path": "solr/core/src/java/org/apache/solr/core/SolrPaths.java", "diffHunk": "@@ -128,4 +130,33 @@ private static void logOnceInfo(String key, String msg) {\n       log.info(msg);\n     }\n   }\n+\n+  /**\n+   * Checks that the given path is relative to SOLR_HOME, SOLR_DATA_HOME, coreRootDirectory or one of the paths\n+   * specified in solr.xml's allowPaths element. The following paths will fail validation\n+   * <ul>\n+   *   <li>Relative paths starting with <code>..</code></li>\n+   *   <li>Windows UNC paths (<code>\\\\host\\share\\path</code>)</li>\n+   *   <li>Absolute paths which are not below the list of allowed paths</li>\n+   * </ul>\n+   * @param pathToAssert path to check\n+   * @param allowPaths list of paths that should be allowed prefixes\n+   * @throws SolrException if path is outside allowed paths\n+   */\n+  public static void assertPathAllowed(Path pathToAssert, Set<Path> allowPaths) throws SolrException {\n+    if (OS.isFamilyWindows() && pathToAssert.toString().startsWith(\"\\\\\\\\\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "851eedeeda86ffb601986ae69a5f8ac8b24f3fe0"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAyODgyNQ==", "bodyText": "Anyone who have a Windows box to test this on?", "url": "https://github.com/apache/lucene-solr/pull/1572#discussion_r440028825", "createdAt": "2020-06-15T08:57:59Z", "author": {"login": "janhoy"}, "path": "solr/core/src/java/org/apache/solr/core/SolrPaths.java", "diffHunk": "@@ -128,4 +130,33 @@ private static void logOnceInfo(String key, String msg) {\n       log.info(msg);\n     }\n   }\n+\n+  /**\n+   * Checks that the given path is relative to SOLR_HOME, SOLR_DATA_HOME, coreRootDirectory or one of the paths\n+   * specified in solr.xml's allowPaths element. The following paths will fail validation\n+   * <ul>\n+   *   <li>Relative paths starting with <code>..</code></li>\n+   *   <li>Windows UNC paths (<code>\\\\host\\share\\path</code>)</li>\n+   *   <li>Absolute paths which are not below the list of allowed paths</li>\n+   * </ul>\n+   * @param pathToAssert path to check\n+   * @param allowPaths list of paths that should be allowed prefixes\n+   * @throws SolrException if path is outside allowed paths\n+   */\n+  public static void assertPathAllowed(Path pathToAssert, Set<Path> allowPaths) throws SolrException {\n+    if (OS.isFamilyWindows() && pathToAssert.toString().startsWith(\"\\\\\\\\\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc3MjI5Mg=="}, "originalCommit": {"oid": "851eedeeda86ffb601986ae69a5f8ac8b24f3fe0"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg1NDk2Mw==", "bodyText": "I have tested on Windows, validated that UNC is blocked, and modified the tests with separate ones running in Windows and non-Windows environments.", "url": "https://github.com/apache/lucene-solr/pull/1572#discussion_r441854963", "createdAt": "2020-06-17T21:52:21Z", "author": {"login": "janhoy"}, "path": "solr/core/src/java/org/apache/solr/core/SolrPaths.java", "diffHunk": "@@ -128,4 +130,33 @@ private static void logOnceInfo(String key, String msg) {\n       log.info(msg);\n     }\n   }\n+\n+  /**\n+   * Checks that the given path is relative to SOLR_HOME, SOLR_DATA_HOME, coreRootDirectory or one of the paths\n+   * specified in solr.xml's allowPaths element. The following paths will fail validation\n+   * <ul>\n+   *   <li>Relative paths starting with <code>..</code></li>\n+   *   <li>Windows UNC paths (<code>\\\\host\\share\\path</code>)</li>\n+   *   <li>Absolute paths which are not below the list of allowed paths</li>\n+   * </ul>\n+   * @param pathToAssert path to check\n+   * @param allowPaths list of paths that should be allowed prefixes\n+   * @throws SolrException if path is outside allowed paths\n+   */\n+  public static void assertPathAllowed(Path pathToAssert, Set<Path> allowPaths) throws SolrException {\n+    if (OS.isFamilyWindows() && pathToAssert.toString().startsWith(\"\\\\\\\\\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc3MjI5Mg=="}, "originalCommit": {"oid": "851eedeeda86ffb601986ae69a5f8ac8b24f3fe0"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTg0NTIwOnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/core/CoreContainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQwNDoxMjo0NVrOGjaowQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwMDoyOTowNVrOGjgZdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc4OTc2MQ==", "bodyText": "paths in cfg are already absolute -- thanks to me recently :-)", "url": "https://github.com/apache/lucene-solr/pull/1572#discussion_r439789761", "createdAt": "2020-06-14T04:12:45Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/core/CoreContainer.java", "diffHunk": "@@ -338,6 +339,19 @@ public CoreContainer(NodeConfig config, CoresLocator locator, boolean asyncSolrC\n         ExecutorUtil.newMDCAwareCachedThreadPool(\n             cfg.getReplayUpdatesThreads(),\n             new SolrNamedThreadFactory(\"replayUpdatesExecutor\")));\n+\n+    this.allowPaths = new java.util.HashSet<>();\n+    this.allowPaths.add(cfg.getSolrHome().toAbsolutePath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "851eedeeda86ffb601986ae69a5f8ac8b24f3fe0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg4NDE1MA==", "bodyText": "Ok, simplified it.", "url": "https://github.com/apache/lucene-solr/pull/1572#discussion_r439884150", "createdAt": "2020-06-15T00:29:05Z", "author": {"login": "janhoy"}, "path": "solr/core/src/java/org/apache/solr/core/CoreContainer.java", "diffHunk": "@@ -338,6 +339,19 @@ public CoreContainer(NodeConfig config, CoresLocator locator, boolean asyncSolrC\n         ExecutorUtil.newMDCAwareCachedThreadPool(\n             cfg.getReplayUpdatesThreads(),\n             new SolrNamedThreadFactory(\"replayUpdatesExecutor\")));\n+\n+    this.allowPaths = new java.util.HashSet<>();\n+    this.allowPaths.add(cfg.getSolrHome().toAbsolutePath());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc4OTc2MQ=="}, "originalCommit": {"oid": "851eedeeda86ffb601986ae69a5f8ac8b24f3fe0"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDM2NzcwOnYy", "diffSide": "RIGHT", "path": "solr/core/src/test-files/solr/solr-50-all.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxOTowNjoxNlrOGje2Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNToyNjozM1rOGjjm4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg1ODc2Nw==", "bodyText": "Since this file is a NamedList, shouldn't we be using <arr for an array of strings?", "url": "https://github.com/apache/lucene-solr/pull/1572#discussion_r439858767", "createdAt": "2020-06-14T19:06:16Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/test-files/solr/solr-50-all.xml", "diffHunk": "@@ -24,6 +24,7 @@\n   <str name=\"configSetsHandler\">testConfigSetsHandler</str>\n   <str name=\"managementPath\">testManagementPath</str>\n   <str name=\"sharedLib\">testSharedLib</str>\n+  <str name=\"allowPaths\">/tmp,/home/john</str>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "851eedeeda86ffb601986ae69a5f8ac8b24f3fe0"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg4MzI0MA==", "bodyText": "It could, but to make it convenient to set it as a Java Sysprop, I kept it as a simple string. De  default solr.xml defines it as ${solr.allowPaths:} so that -Dsolr.allowPaths=foo,bar,baz will work. I'm not aware of any way to specify a native array as Java Sysprop?", "url": "https://github.com/apache/lucene-solr/pull/1572#discussion_r439883240", "createdAt": "2020-06-15T00:19:52Z", "author": {"login": "janhoy"}, "path": "solr/core/src/test-files/solr/solr-50-all.xml", "diffHunk": "@@ -24,6 +24,7 @@\n   <str name=\"configSetsHandler\">testConfigSetsHandler</str>\n   <str name=\"managementPath\">testManagementPath</str>\n   <str name=\"sharedLib\">testSharedLib</str>\n+  <str name=\"allowPaths\">/tmp,/home/john</str>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg1ODc2Nw=="}, "originalCommit": {"oid": "851eedeeda86ffb601986ae69a5f8ac8b24f3fe0"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkzNjczNw==", "bodyText": "ok... I suppose both could be supported provided that the consumer checked with the aid of some new utility method that doesn't exist like Utils.toListOfString(Object, char separator) : String but that might be a bit much.  I suspect we have other places where we trivially use a delimited string and fail to leverage NamedList.  Your call; no strong opinion here.", "url": "https://github.com/apache/lucene-solr/pull/1572#discussion_r439936737", "createdAt": "2020-06-15T05:26:33Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/test-files/solr/solr-50-all.xml", "diffHunk": "@@ -24,6 +24,7 @@\n   <str name=\"configSetsHandler\">testConfigSetsHandler</str>\n   <str name=\"managementPath\">testManagementPath</str>\n   <str name=\"sharedLib\">testSharedLib</str>\n+  <str name=\"allowPaths\">/tmp,/home/john</str>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg1ODc2Nw=="}, "originalCommit": {"oid": "851eedeeda86ffb601986ae69a5f8ac8b24f3fe0"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjgzMzA3OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/core/CoreContainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMTo1NToyOFrOGlYw4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMjowMDoxNVrOGlY4SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg1NjIyNw==", "bodyText": "@dsmiley see JavaDoc. I was hoping to keep this method private. Don't we have a special annotation that will allow access from test scope even if the method is not public?", "url": "https://github.com/apache/lucene-solr/pull/1572#discussion_r441856227", "createdAt": "2020-06-17T21:55:28Z", "author": {"login": "janhoy"}, "path": "solr/core/src/java/org/apache/solr/core/CoreContainer.java", "diffHunk": "@@ -1259,6 +1277,28 @@ public SolrCore create(String coreName, Path instancePath, Map<String, String> p\n     }\n   }\n \n+  /**\n+   * Checks that the given path is relative to SOLR_HOME, SOLR_DATA_HOME, coreRootDirectory or one of the paths\n+   * specified in solr.xml's allowPaths element. Delegates to {@link SolrPaths#assertPathAllowed(Path, Set)}\n+   * @param pathToAssert path to check\n+   * @throws SolrException if path is outside allowed paths\n+   */\n+  public void assertPathAllowed(Path pathToAssert) throws SolrException {\n+    SolrPaths.assertPathAllowed(pathToAssert, allowPaths);\n+  }\n+\n+  /**\n+   * <p>Return the file system paths that should be allowed for various API requests.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f58f9c8c6c1ebb8d488592eef129b7a0d0c19fb9"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg1ODEyMA==", "bodyText": "Javadoc is good; thanks.\ncom.google.common.annotations.VisibleForTesting", "url": "https://github.com/apache/lucene-solr/pull/1572#discussion_r441858120", "createdAt": "2020-06-17T22:00:15Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/core/CoreContainer.java", "diffHunk": "@@ -1259,6 +1277,28 @@ public SolrCore create(String coreName, Path instancePath, Map<String, String> p\n     }\n   }\n \n+  /**\n+   * Checks that the given path is relative to SOLR_HOME, SOLR_DATA_HOME, coreRootDirectory or one of the paths\n+   * specified in solr.xml's allowPaths element. Delegates to {@link SolrPaths#assertPathAllowed(Path, Set)}\n+   * @param pathToAssert path to check\n+   * @throws SolrException if path is outside allowed paths\n+   */\n+  public void assertPathAllowed(Path pathToAssert) throws SolrException {\n+    SolrPaths.assertPathAllowed(pathToAssert, allowPaths);\n+  }\n+\n+  /**\n+   * <p>Return the file system paths that should be allowed for various API requests.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg1NjIyNw=="}, "originalCommit": {"oid": "f58f9c8c6c1ebb8d488592eef129b7a0d0c19fb9"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1Mjg0MzkzOnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/core/SolrPaths.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMjowMDowMVrOGlY36Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMjowMDowMVrOGlY36Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg1ODAyNQ==", "bodyText": "This is the workaround I did after realizing that Windows Path class is not happy with * as a path. When parsing the value from solr.xml/sysprop, we detect * and store it as a Path _ALL_. Then in the assert method we check for that special path and skip further testing.\nException is UNC paths and .. paths which are still rejected (should they?)", "url": "https://github.com/apache/lucene-solr/pull/1572#discussion_r441858025", "createdAt": "2020-06-17T22:00:01Z", "author": {"login": "janhoy"}, "path": "solr/core/src/java/org/apache/solr/core/SolrPaths.java", "diffHunk": "@@ -128,4 +130,35 @@ private static void logOnceInfo(String key, String msg) {\n       log.info(msg);\n     }\n   }\n+\n+  /**\n+   * Checks that the given path is relative to SOLR_HOME, SOLR_DATA_HOME, coreRootDirectory or one of the paths\n+   * specified in solr.xml's allowPaths element. The following paths will fail validation\n+   * <ul>\n+   *   <li>Relative paths starting with <code>..</code></li>\n+   *   <li>Windows UNC paths (<code>\\\\host\\share\\path</code>)</li>\n+   *   <li>Absolute paths which are not below the list of allowed paths</li>\n+   * </ul>\n+   * @param pathToAssert path to check\n+   * @param allowPaths list of paths that should be allowed prefixes\n+   * @throws SolrException if path is outside allowed paths\n+   */\n+  public static void assertPathAllowed(Path pathToAssert, Set<Path> allowPaths) throws SolrException {\n+    if (OS.isFamilyWindows() && pathToAssert.toString().startsWith(\"\\\\\\\\\")) {\n+      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n+          \"Path \" + pathToAssert + \" disallowed. UNC paths not supported. Please use drive letter instead.\");\n+    }\n+    // Conversion Path -> String -> Path is to be able to compare against org.apache.lucene.mockfile.FilterPath instances\n+    final Path path = Path.of(pathToAssert.toString()).normalize();\n+    if (path.startsWith(\"..\")) {\n+      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n+          \"Path \" + pathToAssert + \" disallowed due to path traversal..\");\n+    }\n+    if (!path.isAbsolute()) return; // All relative paths are accepted\n+    if (allowPaths.contains(Paths.get(\"_ALL_\"))) return; // Catch-all path \"*\"/\"_ALL_\" will allow all other paths", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f58f9c8c6c1ebb8d488592eef129b7a0d0c19fb9"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1474, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}