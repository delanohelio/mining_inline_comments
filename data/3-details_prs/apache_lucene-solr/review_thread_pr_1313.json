{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMjE2MDU0", "number": 1313, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzo1ODo0MFrODlDcJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzo1ODo0MFrODlDcJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTgwMjYxOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzo1ODo0MFrOFxuQKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMjozMzozNVrOFyRzDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY4MjM0NQ==", "bodyText": "I ran this test a few times, and noticed it takes 2-3 minutes to complete. Was it this slow before? I don't remember it taking so long in the previous version. Perhaps it's because it's Nightly now so the constants are made larger?", "url": "https://github.com/apache/lucene-solr/pull/1313#discussion_r387682345", "createdAt": "2020-03-04T13:58:40Z", "author": {"login": "msokolov"}, "path": "lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy.java", "diffHunk": "@@ -298,63 +320,44 @@ public void testMergeOnCommit() throws IOException, InterruptedException {\n     DirectoryReader firstReader = DirectoryReader.open(firstWriter);\n     assertEquals(5, firstReader.leaves().size());\n     firstReader.close();\n-    firstWriter.close();\n-\n-    MergePolicy mergeOnCommitPolicy = new LogDocMergePolicy() {\n-      @Override\n-      public MergeSpecification findFullFlushMerges(MergeTrigger mergeTrigger, SegmentInfos segmentInfos, MergeContext mergeContext) {\n-        // Optimize down to a single segment on commit\n-        if (mergeTrigger == MergeTrigger.COMMIT && segmentInfos.size() > 1) {\n-          List<SegmentCommitInfo> nonMergingSegments = new ArrayList<>();\n-          for (SegmentCommitInfo sci : segmentInfos) {\n-            if (mergeContext.getMergingSegments().contains(sci) == false) {\n-              nonMergingSegments.add(sci);\n-            }\n-          }\n-          if (nonMergingSegments.size() > 1) {\n-            MergeSpecification mergeSpecification = new MergeSpecification();\n-            mergeSpecification.add(new OneMerge(nonMergingSegments));\n-            return mergeSpecification;\n-          }\n-        }\n-        return null;\n-      }\n-    };\n+    firstWriter.close(); // When this writer closes, it does not merge on commit.\n \n-    AtomicInteger abandonedMerges = new AtomicInteger(0);\n     IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n-        .setMergePolicy(mergeOnCommitPolicy)\n-        .setIndexWriterEvents(new IndexWriterEvents() {\n-          @Override\n-          public void beginMergeOnCommit() {\n-\n-          }\n-\n-          @Override\n-          public void finishMergeOnCommit() {\n+        .setMergePolicy(MERGE_ON_COMMIT_POLICY);\n \n-          }\n-\n-          @Override\n-          public void abandonedMergesOnCommit(int abandonedCount) {\n-            abandonedMerges.incrementAndGet();\n-          }\n-        });\n     IndexWriter writerWithMergePolicy = new IndexWriter(dir, iwc);\n-\n-    writerWithMergePolicy.commit();\n+    writerWithMergePolicy.commit(); // No changes. Commit doesn't trigger a merge.\n \n     DirectoryReader unmergedReader = DirectoryReader.open(writerWithMergePolicy);\n-    assertEquals(5, unmergedReader.leaves().size()); // Don't merge unless there's a change\n+    assertEquals(5, unmergedReader.leaves().size());\n     unmergedReader.close();\n \n     TestIndexWriter.addDoc(writerWithMergePolicy);\n-    writerWithMergePolicy.commit();\n+    writerWithMergePolicy.commit(); // Doc added, do merge on commit.\n+    assertEquals(1, writerWithMergePolicy.getSegmentCount()); //\n \n     DirectoryReader mergedReader = DirectoryReader.open(writerWithMergePolicy);\n-    assertEquals(1, mergedReader.leaves().size()); // Now we merge on commit\n+    assertEquals(1, mergedReader.leaves().size());\n     mergedReader.close();\n \n+    try (IndexReader reader = writerWithMergePolicy.getReader()) {\n+      IndexSearcher searcher = new IndexSearcher(reader);\n+      assertEquals(6, reader.numDocs());\n+      assertEquals(6, searcher.count(new MatchAllDocsQuery()));\n+    }\n+\n+    writerWithMergePolicy.close();\n+    dir.close();\n+  }\n+\n+   // Test that when we have multiple indexing threads merging on commit, we never throw an exception.\n+  @Nightly", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0973c6fabf7ffb3433b63e9de951f512dc4da205"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5NDIzNw==", "bodyText": "Oh, that's probably the case.\nGiven that there are other tests that flex indexing across multiple threads and MockRandomMergePolicy will occasionally merge on commit, maybe this test doesn't add any value?", "url": "https://github.com/apache/lucene-solr/pull/1313#discussion_r387894237", "createdAt": "2020-03-04T19:45:37Z", "author": {"login": "msfroh"}, "path": "lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy.java", "diffHunk": "@@ -298,63 +320,44 @@ public void testMergeOnCommit() throws IOException, InterruptedException {\n     DirectoryReader firstReader = DirectoryReader.open(firstWriter);\n     assertEquals(5, firstReader.leaves().size());\n     firstReader.close();\n-    firstWriter.close();\n-\n-    MergePolicy mergeOnCommitPolicy = new LogDocMergePolicy() {\n-      @Override\n-      public MergeSpecification findFullFlushMerges(MergeTrigger mergeTrigger, SegmentInfos segmentInfos, MergeContext mergeContext) {\n-        // Optimize down to a single segment on commit\n-        if (mergeTrigger == MergeTrigger.COMMIT && segmentInfos.size() > 1) {\n-          List<SegmentCommitInfo> nonMergingSegments = new ArrayList<>();\n-          for (SegmentCommitInfo sci : segmentInfos) {\n-            if (mergeContext.getMergingSegments().contains(sci) == false) {\n-              nonMergingSegments.add(sci);\n-            }\n-          }\n-          if (nonMergingSegments.size() > 1) {\n-            MergeSpecification mergeSpecification = new MergeSpecification();\n-            mergeSpecification.add(new OneMerge(nonMergingSegments));\n-            return mergeSpecification;\n-          }\n-        }\n-        return null;\n-      }\n-    };\n+    firstWriter.close(); // When this writer closes, it does not merge on commit.\n \n-    AtomicInteger abandonedMerges = new AtomicInteger(0);\n     IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n-        .setMergePolicy(mergeOnCommitPolicy)\n-        .setIndexWriterEvents(new IndexWriterEvents() {\n-          @Override\n-          public void beginMergeOnCommit() {\n-\n-          }\n-\n-          @Override\n-          public void finishMergeOnCommit() {\n+        .setMergePolicy(MERGE_ON_COMMIT_POLICY);\n \n-          }\n-\n-          @Override\n-          public void abandonedMergesOnCommit(int abandonedCount) {\n-            abandonedMerges.incrementAndGet();\n-          }\n-        });\n     IndexWriter writerWithMergePolicy = new IndexWriter(dir, iwc);\n-\n-    writerWithMergePolicy.commit();\n+    writerWithMergePolicy.commit(); // No changes. Commit doesn't trigger a merge.\n \n     DirectoryReader unmergedReader = DirectoryReader.open(writerWithMergePolicy);\n-    assertEquals(5, unmergedReader.leaves().size()); // Don't merge unless there's a change\n+    assertEquals(5, unmergedReader.leaves().size());\n     unmergedReader.close();\n \n     TestIndexWriter.addDoc(writerWithMergePolicy);\n-    writerWithMergePolicy.commit();\n+    writerWithMergePolicy.commit(); // Doc added, do merge on commit.\n+    assertEquals(1, writerWithMergePolicy.getSegmentCount()); //\n \n     DirectoryReader mergedReader = DirectoryReader.open(writerWithMergePolicy);\n-    assertEquals(1, mergedReader.leaves().size()); // Now we merge on commit\n+    assertEquals(1, mergedReader.leaves().size());\n     mergedReader.close();\n \n+    try (IndexReader reader = writerWithMergePolicy.getReader()) {\n+      IndexSearcher searcher = new IndexSearcher(reader);\n+      assertEquals(6, reader.numDocs());\n+      assertEquals(6, searcher.count(new MatchAllDocsQuery()));\n+    }\n+\n+    writerWithMergePolicy.close();\n+    dir.close();\n+  }\n+\n+   // Test that when we have multiple indexing threads merging on commit, we never throw an exception.\n+  @Nightly", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY4MjM0NQ=="}, "originalCommit": {"oid": "0973c6fabf7ffb3433b63e9de951f512dc4da205"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI2NDcxNg==", "bodyText": "Yes, I think given it does not assert anything -- just makes sure no exceptions occur -- we should already be well-covered.", "url": "https://github.com/apache/lucene-solr/pull/1313#discussion_r388264716", "createdAt": "2020-03-05T12:33:35Z", "author": {"login": "msokolov"}, "path": "lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy.java", "diffHunk": "@@ -298,63 +320,44 @@ public void testMergeOnCommit() throws IOException, InterruptedException {\n     DirectoryReader firstReader = DirectoryReader.open(firstWriter);\n     assertEquals(5, firstReader.leaves().size());\n     firstReader.close();\n-    firstWriter.close();\n-\n-    MergePolicy mergeOnCommitPolicy = new LogDocMergePolicy() {\n-      @Override\n-      public MergeSpecification findFullFlushMerges(MergeTrigger mergeTrigger, SegmentInfos segmentInfos, MergeContext mergeContext) {\n-        // Optimize down to a single segment on commit\n-        if (mergeTrigger == MergeTrigger.COMMIT && segmentInfos.size() > 1) {\n-          List<SegmentCommitInfo> nonMergingSegments = new ArrayList<>();\n-          for (SegmentCommitInfo sci : segmentInfos) {\n-            if (mergeContext.getMergingSegments().contains(sci) == false) {\n-              nonMergingSegments.add(sci);\n-            }\n-          }\n-          if (nonMergingSegments.size() > 1) {\n-            MergeSpecification mergeSpecification = new MergeSpecification();\n-            mergeSpecification.add(new OneMerge(nonMergingSegments));\n-            return mergeSpecification;\n-          }\n-        }\n-        return null;\n-      }\n-    };\n+    firstWriter.close(); // When this writer closes, it does not merge on commit.\n \n-    AtomicInteger abandonedMerges = new AtomicInteger(0);\n     IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n-        .setMergePolicy(mergeOnCommitPolicy)\n-        .setIndexWriterEvents(new IndexWriterEvents() {\n-          @Override\n-          public void beginMergeOnCommit() {\n-\n-          }\n-\n-          @Override\n-          public void finishMergeOnCommit() {\n+        .setMergePolicy(MERGE_ON_COMMIT_POLICY);\n \n-          }\n-\n-          @Override\n-          public void abandonedMergesOnCommit(int abandonedCount) {\n-            abandonedMerges.incrementAndGet();\n-          }\n-        });\n     IndexWriter writerWithMergePolicy = new IndexWriter(dir, iwc);\n-\n-    writerWithMergePolicy.commit();\n+    writerWithMergePolicy.commit(); // No changes. Commit doesn't trigger a merge.\n \n     DirectoryReader unmergedReader = DirectoryReader.open(writerWithMergePolicy);\n-    assertEquals(5, unmergedReader.leaves().size()); // Don't merge unless there's a change\n+    assertEquals(5, unmergedReader.leaves().size());\n     unmergedReader.close();\n \n     TestIndexWriter.addDoc(writerWithMergePolicy);\n-    writerWithMergePolicy.commit();\n+    writerWithMergePolicy.commit(); // Doc added, do merge on commit.\n+    assertEquals(1, writerWithMergePolicy.getSegmentCount()); //\n \n     DirectoryReader mergedReader = DirectoryReader.open(writerWithMergePolicy);\n-    assertEquals(1, mergedReader.leaves().size()); // Now we merge on commit\n+    assertEquals(1, mergedReader.leaves().size());\n     mergedReader.close();\n \n+    try (IndexReader reader = writerWithMergePolicy.getReader()) {\n+      IndexSearcher searcher = new IndexSearcher(reader);\n+      assertEquals(6, reader.numDocs());\n+      assertEquals(6, searcher.count(new MatchAllDocsQuery()));\n+    }\n+\n+    writerWithMergePolicy.close();\n+    dir.close();\n+  }\n+\n+   // Test that when we have multiple indexing threads merging on commit, we never throw an exception.\n+  @Nightly", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY4MjM0NQ=="}, "originalCommit": {"oid": "0973c6fabf7ffb3433b63e9de951f512dc4da205"}, "originalPosition": 119}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 842, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}