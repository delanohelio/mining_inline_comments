{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3NjUxNjcx", "number": 1598, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNTo0MzoxM1rOEIBv3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNTo0MzoxM1rOEIBv3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODUyNzAzOnYy", "diffSide": "RIGHT", "path": "solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNTo0MzoxM1rOGnvWAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTo0MDozNlrOGpAi1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMyMzMyOQ==", "bodyText": "assertThat(exp.getMessage(), contains(\"...\"))", "url": "https://github.com/apache/lucene-solr/pull/1598#discussion_r444323329", "createdAt": "2020-06-23T15:43:13Z", "author": {"login": "madrob"}, "path": "solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2.java", "diffHunk": "@@ -516,6 +517,16 @@ public void testInfiniteLoop() {\n     System.out.println(suggestions);\n   }\n \n+  public void testAddTooManyPerPolicy() {\n+    Map<String, Object> m = (Map<String, Object>) loadFromResource(\"testAddTooManyPerPolicy.json\");\n+    SolrCloudManager cloudManagerFromDiagnostics = createCloudManagerFromDiagnostics(m);\n+    AutoScalingConfig autoScalingConfig = new AutoScalingConfig((Map<String, Object>) getObjectByPath(m, false, \"diagnostics/config\"));\n+    SolrException exp =  expectThrows(SolrException.class, () -> PolicyHelper.getReplicaLocations(\"TooManyPerPolicy\", autoScalingConfig, cloudManagerFromDiagnostics,\n+            EMPTY_MAP, Collections.singletonList(\"shard1\"), 1, 0, 0, null));\n+    assertTrue(exp.getMessage().contains(\"No node can satisfy the rules\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8e9e5789beba6fdc344d618edf596318efd0bbc"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU3NTEyNA==", "bodyText": "what's the difference?", "url": "https://github.com/apache/lucene-solr/pull/1598#discussion_r444575124", "createdAt": "2020-06-24T00:13:03Z", "author": {"login": "noblepaul"}, "path": "solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2.java", "diffHunk": "@@ -516,6 +517,16 @@ public void testInfiniteLoop() {\n     System.out.println(suggestions);\n   }\n \n+  public void testAddTooManyPerPolicy() {\n+    Map<String, Object> m = (Map<String, Object>) loadFromResource(\"testAddTooManyPerPolicy.json\");\n+    SolrCloudManager cloudManagerFromDiagnostics = createCloudManagerFromDiagnostics(m);\n+    AutoScalingConfig autoScalingConfig = new AutoScalingConfig((Map<String, Object>) getObjectByPath(m, false, \"diagnostics/config\"));\n+    SolrException exp =  expectThrows(SolrException.class, () -> PolicyHelper.getReplicaLocations(\"TooManyPerPolicy\", autoScalingConfig, cloudManagerFromDiagnostics,\n+            EMPTY_MAP, Collections.singletonList(\"shard1\"), 1, 0, 0, null));\n+    assertTrue(exp.getMessage().contains(\"No node can satisfy the rules\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMyMzMyOQ=="}, "originalCommit": {"oid": "a8e9e5789beba6fdc344d618edf596318efd0bbc"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY1MzcxNw==", "bodyText": "You get a better error message when the test fails.", "url": "https://github.com/apache/lucene-solr/pull/1598#discussion_r445653717", "createdAt": "2020-06-25T15:40:36Z", "author": {"login": "madrob"}, "path": "solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2.java", "diffHunk": "@@ -516,6 +517,16 @@ public void testInfiniteLoop() {\n     System.out.println(suggestions);\n   }\n \n+  public void testAddTooManyPerPolicy() {\n+    Map<String, Object> m = (Map<String, Object>) loadFromResource(\"testAddTooManyPerPolicy.json\");\n+    SolrCloudManager cloudManagerFromDiagnostics = createCloudManagerFromDiagnostics(m);\n+    AutoScalingConfig autoScalingConfig = new AutoScalingConfig((Map<String, Object>) getObjectByPath(m, false, \"diagnostics/config\"));\n+    SolrException exp =  expectThrows(SolrException.class, () -> PolicyHelper.getReplicaLocations(\"TooManyPerPolicy\", autoScalingConfig, cloudManagerFromDiagnostics,\n+            EMPTY_MAP, Collections.singletonList(\"shard1\"), 1, 0, 0, null));\n+    assertTrue(exp.getMessage().contains(\"No node can satisfy the rules\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMyMzMyOQ=="}, "originalCommit": {"oid": "a8e9e5789beba6fdc344d618edf596318efd0bbc"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1488, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}