{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1NzQ1NTYy", "number": 1733, "title": "LUCENE-9450 Use BinaryDocValues in the taxonomy writer", "bodyText": "Description\nThis PR modifies the taxonomy writer and reader implementation to use BinaryDocValues instead of StoredValues.\nThe taxonomy index uses stored fields today and must do a number of stored field lookups for each query to resolve taxonomy ordinals back to human presentable facet labels.\nSolution\nChange the storage format to use DocValues\nTests\nant test fails because\n.binaryValue() returns a NullPointerException\nTo reproduce the error:\nant test  -Dtestcase=TestExpressionAggregationFacetsExample -Dtests.method=testSimple -Dtests.seed=4544BD51622879A4 -Dtests.slow=true -Dtests.badapples=true -Dtests.locale=si -Dtests.timezone=Antarctica/DumontDUrville -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\ngives\n    [mkdir] Created dir: /Users/gauworah/opensource/mystuff/lucene-solr/lucene/build/demo/test/temp\n   [junit4] <JUnit4> says \u041f\u0440\u0438\u0432\u0435\u0442! Master seed: 4544BD51622879A4\n   [junit4] Executing 1 suite with 1 JVM.\n   [junit4] \n   [junit4] Started J0 PID(76859@localhost).\n   [junit4] Suite: org.apache.lucene.demo.facet.TestExpressionAggregationFacetsExample\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestExpressionAggregationFacetsExample -Dtests.method=testSimple -Dtests.seed=4544BD51622879A4 -Dtests.slow=true -Dtests.badapples=true -Dtests.locale=si -Dtests.timezone=Antarctica/DumontDUrville -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\n   [junit4] ERROR   0.61s | TestExpressionAggregationFacetsExample.testSimple <<<\n   [junit4]    > Throwable #1: java.lang.NullPointerException\n   [junit4]    >        at __randomizedtesting.SeedInfo.seed([4544BD51622879A4:7DF799AF45DBAD75]:0)\n   [junit4]    >        at org.apache.lucene.index.MultiDocValues$3.binaryValue(MultiDocValues.java:403)\n   [junit4]    >        at org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.getPath(DirectoryTaxonomyReader.java:328)\n   [junit4]    >        at org.apache.lucene.facet.taxonomy.FloatTaxonomyFacets.getTopChildren(FloatTaxonomyFacets.java:151)\n   [junit4]    >        at org.apache.lucene.demo.facet.ExpressionAggregationFacetsExample.search(ExpressionAggregationFacetsExample.java:107)\n   [junit4]    >        at org.apache.lucene.demo.facet.ExpressionAggregationFacetsExample.runSearch(ExpressionAggregationFacetsExample.java:118)\n   [junit4]    >        at org.apache.lucene.demo.facet.TestExpressionAggregationFacetsExample.testSimple(TestExpressionAggregationFacetsExample.java:28)\n   [junit4]    >        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n   [junit4]    >        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n   [junit4]    >        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n   [junit4]    >        at java.base/java.lang.reflect.Method.invoke(Method.java:567)\n   [junit4]    >        at java.base/java.lang.Thread.run(Thread.java:830)\n\n3 other tests also fail at the function call\nChecklist\nPlease review the following and check all that apply:\n\n I have reviewed the guidelines for How to Contribute and my code conforms to the standards described there to the best of my ability.\n I have created a Jira issue and added the issue ID to my pull request title.\n I have given Solr maintainers access to contribute to my PR branch. (optional but recommended)\n I have developed this patch against the master branch.\n I have run ant precommit and the appropriate test suite.\n I have added tests for my changes.\n I have added documentation for the Ref Guide (for Solr changes only).\n\nThis is a draft PR", "createdAt": "2020-08-10T21:40:13Z", "url": "https://github.com/apache/lucene-solr/pull/1733", "merged": true, "mergeCommit": {"oid": "3f8f84f9b063277e9017221bfc5e80fb901fc1ce"}, "closed": true, "closedAt": "2020-11-12T22:13:32Z", "author": {"login": "gautamworah96"}, "timelineItems": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc9V_qGAH2gAyNDY1NzQ1NTYyOjdjM2I3YTcwMTQ0NTMzZmVjMDc0MTA2YjJjNGRhZDVhNDhlYjJlOGY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdb5EWkAFqTUyOTQ5NDc0NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7c3b7a70144533fec074106b2c4dad5a48eb2e8f", "author": {"user": null}, "url": "https://github.com/apache/lucene-solr/commit/7c3b7a70144533fec074106b2c4dad5a48eb2e8f", "committedDate": "2020-08-09T23:13:00Z", "message": "WIP: Modify DirectoryTaxonomyWriter to use BinaryDocValues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df51f041f2dc4d6c39cae23bedfebf5598b65225", "author": {"user": null}, "url": "https://github.com/apache/lucene-solr/commit/df51f041f2dc4d6c39cae23bedfebf5598b65225", "committedDate": "2020-08-09T23:17:01Z", "message": "Remove extra comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbc391adc558d774bfd2ab2c169c68137b59dc88", "author": {"user": null}, "url": "https://github.com/apache/lucene-solr/commit/bbc391adc558d774bfd2ab2c169c68137b59dc88", "committedDate": "2020-08-10T21:05:10Z", "message": "LUCENE-9450 Use advanceExact to iterate to the field"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ddd5c832fa4a57cc7cf8d620f2e3efe6459dc9f", "author": {"user": null}, "url": "https://github.com/apache/lucene-solr/commit/5ddd5c832fa4a57cc7cf8d620f2e3efe6459dc9f", "committedDate": "2020-08-10T21:18:19Z", "message": "Merge branch 'master' of https://github.com/gautamworah96/lucene-solr"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b45f96fbd9f0b217db3c88dd13c82b9431cf947", "author": {"user": {"login": "CaoManhDat", "name": "Cao Manh Dat"}}, "url": "https://github.com/apache/lucene-solr/commit/4b45f96fbd9f0b217db3c88dd13c82b9431cf947", "committedDate": "2020-08-10T21:18:45Z", "message": "SOLR-14641: PeerSync, remove canHandleVersionRanges check (#1663)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12205b42c73b881c2d96aecd7564e7cbd322c888", "author": {"user": {"login": "CaoManhDat", "name": "Cao Manh Dat"}}, "url": "https://github.com/apache/lucene-solr/commit/12205b42c73b881c2d96aecd7564e7cbd322c888", "committedDate": "2020-08-10T21:18:45Z", "message": "SOLR-14641: Update CHANGES.txt"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc637cf5f3a875c30087c56dbbac09a708fb36ec", "author": {"user": {"login": "ctargett", "name": "Cassandra Targett"}}, "url": "https://github.com/apache/lucene-solr/commit/dc637cf5f3a875c30087c56dbbac09a708fb36ec", "committedDate": "2020-08-10T21:18:45Z", "message": "LUCENE-9452: remove jenkins.build.ref.guide.sh as it's no longer needed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff5eba72d17b3fbb7b4339806254271caca6272c", "author": {"user": null}, "url": "https://github.com/apache/lucene-solr/commit/ff5eba72d17b3fbb7b4339806254271caca6272c", "committedDate": "2020-08-10T21:26:47Z", "message": "LUCENE-9450 Use BinaryDocValues in the taxonomy writer"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1MzU0NzAw", "url": "https://github.com/apache/lucene-solr/pull/1733#pullrequestreview-465354700", "createdAt": "2020-08-11T19:12:42Z", "commit": {"oid": "5ddd5c832fa4a57cc7cf8d620f2e3efe6459dc9f"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxOToxMjo0MlrOG_FrVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxOToxNzowN1rOG_F0yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgwNjQ4NA==", "bodyText": "I think instead of the boxed Integer catIDInteger we should pass the int ordinal to .advanceExact(...)?  Not the cause of the NPE, just cleaner.", "url": "https://github.com/apache/lucene-solr/pull/1733#discussion_r468806484", "createdAt": "2020-08-11T19:12:42Z", "author": {"login": "mikemccand"}, "path": "lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader.java", "diffHunk": "@@ -323,8 +323,10 @@ public FacetLabel getPath(int ordinal) throws IOException {\n       }\n     }\n     \n-    Document doc = indexReader.document(ordinal);\n-    FacetLabel ret = new FacetLabel(FacetsConfig.stringToPath(doc.get(Consts.FULL)));\n+    boolean found = MultiDocValues.getBinaryValues(indexReader, Consts.FULL).advanceExact(catIDInteger);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ddd5c832fa4a57cc7cf8d620f2e3efe6459dc9f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgwODkwNA==", "bodyText": "OK, I see one issue -- you are pulling a new BinaryDocValues, calling .advanceExact on it (good), but then pulling a new BinaryDocValues below and not calling .advanceExact on it.\nI think you must add a new local variable, e.g. BinaryDocValues values.  Pull it once (using the MultiDocValues.getBinaryValues sugar API).  Then call .advanceExact on that and assert it succeeded. Finally, use that same values instance (now that it has advanced to the right docId) to call .binaryValue().utf8ToString().\nI think that should fix the NPE?\nThis is misuse of the API for the default Lucene Codec for BinaryDocValues, since you were calling .binaryValue() before .advanceExact().  It is somewhat disappointing that the codec threw a confusing NPE and not a clearer (best effort) exception stating that you must first call .advanceExact.  Maybe we could improve the default Codec?  (Though, not if that would hurt performance of correct usage).  OK I see: the NPE is because of MultiDocValues.currentValues is null since .advanceExact was not yet called.  Maybe we could add an assert there, confirming .advanceExact was indeed called and had returned true?  It would have made debugging this easier, and should not hurt performance when assertions are disabled ...", "url": "https://github.com/apache/lucene-solr/pull/1733#discussion_r468808904", "createdAt": "2020-08-11T19:17:07Z", "author": {"login": "mikemccand"}, "path": "lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader.java", "diffHunk": "@@ -323,8 +323,10 @@ public FacetLabel getPath(int ordinal) throws IOException {\n       }\n     }\n     \n-    Document doc = indexReader.document(ordinal);\n-    FacetLabel ret = new FacetLabel(FacetsConfig.stringToPath(doc.get(Consts.FULL)));\n+    boolean found = MultiDocValues.getBinaryValues(indexReader, Consts.FULL).advanceExact(catIDInteger);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgwNjQ4NA=="}, "originalCommit": {"oid": "5ddd5c832fa4a57cc7cf8d620f2e3efe6459dc9f"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8eeb3da5c7792976073311fcc60773e4efebc11", "author": {"user": null}, "url": "https://github.com/apache/lucene-solr/commit/f8eeb3da5c7792976073311fcc60773e4efebc11", "committedDate": "2020-08-12T04:36:58Z", "message": "Merge branch 'master' of https://github.com/apache/lucene-solr into HEAD"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae1c5d648db865f2f3cc9e69c35e7781a0783676", "author": {"user": null}, "url": "https://github.com/apache/lucene-solr/commit/ae1c5d648db865f2f3cc9e69c35e7781a0783676", "committedDate": "2020-08-12T05:49:57Z", "message": "Store a variable `values` to store the exact BinaryDocValue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75d0f6214f61fc639547547a7d2e33df280c0836", "author": {"user": null}, "url": "https://github.com/apache/lucene-solr/commit/75d0f6214f61fc639547547a7d2e33df280c0836", "committedDate": "2020-08-12T06:06:10Z", "message": "Merge branch 'master' of https://github.com/gautamworah96/lucene-solr into HEAD"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a768d9f57cd6ebfc90aaedadd361c32eada2afa1", "author": {"user": null}, "url": "https://github.com/apache/lucene-solr/commit/a768d9f57cd6ebfc90aaedadd361c32eada2afa1", "committedDate": "2020-08-12T20:21:30Z", "message": "Fixed the NPE error, also use ReaderUtil to get the docId"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b7e345c0825969a1701ad465c14744880de6110", "author": {"user": null}, "url": "https://github.com/apache/lucene-solr/commit/4b7e345c0825969a1701ad465c14744880de6110", "committedDate": "2020-08-12T21:51:17Z", "message": "Merge branch 'master' of https://github.com/apache/lucene-solr into LUCENE-9450"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2Nzk1MjQ2", "url": "https://github.com/apache/lucene-solr/pull/1733#pullrequestreview-466795246", "createdAt": "2020-08-13T14:06:24Z", "commit": {"oid": "4b7e345c0825969a1701ad465c14744880de6110"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNDowNjoyNVrOHANI0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNDowODowNlrOHANNRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk3NzI5Nw==", "bodyText": "Pre-existing: I don't like that we return null up above if the requested ordinal is out-of-bounds.  That's dangerous leniency and likely means the user is refreshing their main IndexReader and the TaxonomyReader in the wrong order.  It would be better to throw an exception here?  @gautamworah96 could you open a follow-on issue to fix that?  Thanks.", "url": "https://github.com/apache/lucene-solr/pull/1733#discussion_r469977297", "createdAt": "2020-08-13T14:06:25Z", "author": {"login": "mikemccand"}, "path": "lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader.java", "diffHunk": "@@ -322,9 +324,14 @@ public FacetLabel getPath(int ordinal) throws IOException {\n         return res;\n       }\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b7e345c0825969a1701ad465c14744880de6110"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk3ODQzOQ==", "bodyText": "Could you factor out the FacetsConfig.pathToString(...) part in a new local variable and re-use that?  We use it in (at least?) two places here.", "url": "https://github.com/apache/lucene-solr/pull/1733#discussion_r469978439", "createdAt": "2020-08-13T14:08:06Z", "author": {"login": "mikemccand"}, "path": "lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.java", "diffHunk": "@@ -494,6 +496,7 @@ private int addCategoryDocument(FacetLabel categoryPath, int parent) throws IOEx\n \n     fullPathField.setStringValue(FacetsConfig.pathToString(categoryPath.components, categoryPath.length));\n     d.add(fullPathField);\n+    d.add(new BinaryDocValuesField(Consts.FULL, new BytesRef(FacetsConfig.pathToString(categoryPath.components, categoryPath.length))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b7e345c0825969a1701ad465c14744880de6110"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "709c5ae3fda5eaab4a6827111835c4e8285f4cda", "author": {"user": null}, "url": "https://github.com/apache/lucene-solr/commit/709c5ae3fda5eaab4a6827111835c4e8285f4cda", "committedDate": "2020-08-13T18:24:35Z", "message": "Extract FacetsConfig.pathToString in a new variable"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNzE1NDI4", "url": "https://github.com/apache/lucene-solr/pull/1733#pullrequestreview-471715428", "createdAt": "2020-08-20T15:12:31Z", "commit": {"oid": "709c5ae3fda5eaab4a6827111835c4e8285f4cda"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNToxMjozMVrOHEGSxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNToxMjozMVrOHEGSxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA1OTQ2Mg==", "bodyText": "Could you open a new issue to optimize this better in the future, to do bulk lookup of ordinal -> FacetLabel?  And then add a // TODO  pointing to that issue and describing the optimization?", "url": "https://github.com/apache/lucene-solr/pull/1733#discussion_r474059462", "createdAt": "2020-08-20T15:12:31Z", "author": {"login": "mikemccand"}, "path": "lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader.java", "diffHunk": "@@ -322,9 +324,14 @@ public FacetLabel getPath(int ordinal) throws IOException {\n         return res;\n       }\n     }\n-    \n-    Document doc = indexReader.document(ordinal);\n-    FacetLabel ret = new FacetLabel(FacetsConfig.stringToPath(doc.get(Consts.FULL)));\n+\n+    int readerIndex = ReaderUtil.subIndex(ordinal, indexReader.leaves());\n+    LeafReader leafReader = indexReader.leaves().get(readerIndex).reader();\n+    BinaryDocValues values = leafReader.getBinaryDocValues(Consts.FULL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "709c5ae3fda5eaab4a6827111835c4e8285f4cda"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e80511b6cc25a05fa98604089698fe27ba3f2a9", "author": {"user": null}, "url": "https://github.com/apache/lucene-solr/commit/0e80511b6cc25a05fa98604089698fe27ba3f2a9", "committedDate": "2020-08-24T02:18:13Z", "message": "Add a condition to make the DirectoryTaxonomyReader backwards compatible\n\nAlso add a TODO for the bulk lookup API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "402d9086bb832302afc8e4688b52528585bbeb05", "author": {"user": null}, "url": "https://github.com/apache/lucene-solr/commit/402d9086bb832302afc8e4688b52528585bbeb05", "committedDate": "2020-10-08T01:22:57Z", "message": "Run all tests in a PR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08901b62133cee89861a6cd92137e3511ab0a795", "author": {"user": {"login": "gautamworah96", "name": "Gautam Worah"}}, "url": "https://github.com/apache/lucene-solr/commit/08901b62133cee89861a6cd92137e3511ab0a795", "committedDate": "2020-10-08T01:24:51Z", "message": "Merge pull request #1 from gautamworah96/github_pr_tests\n\nRun all tests in a PR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee2bdc1b717addbec11f5535755eafd9595670bb", "author": {"user": {"login": "gautamworah96", "name": "Gautam Worah"}}, "url": "https://github.com/apache/lucene-solr/commit/ee2bdc1b717addbec11f5535755eafd9595670bb", "committedDate": "2020-10-30T08:15:43Z", "message": "Implemented support for back compat using a test case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a1d483a9ce7286e54c0ea9ddf48e9c130bb7f60", "author": {"user": {"login": "gautamworah96", "name": "Gautam Worah"}}, "url": "https://github.com/apache/lucene-solr/commit/4a1d483a9ce7286e54c0ea9ddf48e9c130bb7f60", "committedDate": "2020-10-30T08:16:23Z", "message": "Revert \"Run all tests in a PR\"\n\nThis reverts commit 402d9086bb832302afc8e4688b52528585bbeb05."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3704209ef379b16a3a51e43fdaca039171a13ab7", "author": {"user": {"login": "gautamworah96", "name": "Gautam Worah"}}, "url": "https://github.com/apache/lucene-solr/commit/3704209ef379b16a3a51e43fdaca039171a13ab7", "committedDate": "2020-10-30T07:25:56Z", "message": "Fixed conflicts"}, "afterCommit": {"oid": "4a1d483a9ce7286e54c0ea9ddf48e9c130bb7f60", "author": {"user": {"login": "gautamworah96", "name": "Gautam Worah"}}, "url": "https://github.com/apache/lucene-solr/commit/4a1d483a9ce7286e54c0ea9ddf48e9c130bb7f60", "committedDate": "2020-10-30T08:16:23Z", "message": "Revert \"Run all tests in a PR\"\n\nThis reverts commit 402d9086bb832302afc8e4688b52528585bbeb05."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d6a16c13897cc052281a1265a2c266b4374f486", "author": {"user": {"login": "gautamworah96", "name": "Gautam Worah"}}, "url": "https://github.com/apache/lucene-solr/commit/7d6a16c13897cc052281a1265a2c266b4374f486", "committedDate": "2020-10-30T08:22:43Z", "message": "Add the zip file for the old index"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3b0de983d190e75947eed03b24064c305148ae4", "author": {"user": {"login": "gautamworah96", "name": "Gautam Worah"}}, "url": "https://github.com/apache/lucene-solr/commit/d3b0de983d190e75947eed03b24064c305148ae4", "committedDate": "2020-10-30T08:31:47Z", "message": "Minor style fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwOTA4Mzgx", "url": "https://github.com/apache/lucene-solr/pull/1733#pullrequestreview-520908381", "createdAt": "2020-10-30T17:52:37Z", "commit": {"oid": "d3b0de983d190e75947eed03b24064c305148ae4"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNzo1MjozOFrOHraJjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNzo1Mjo0NVrOHraJ0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI3OTI0Nw==", "bodyText": "Hmm, can you move this assert above the assertNotNull?", "url": "https://github.com/apache/lucene-solr/pull/1733#discussion_r515279247", "createdAt": "2020-10-30T17:52:38Z", "author": {"login": "mikemccand"}, "path": "lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestBackwardsCompatibility.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.facet.taxonomy.directory;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.apache.lucene.facet.taxonomy.FacetLabel;\n+import org.apache.lucene.facet.taxonomy.TaxonomyReader;\n+import org.apache.lucene.facet.taxonomy.TaxonomyWriter;\n+import org.apache.lucene.store.Directory;\n+import org.apache.lucene.util.LuceneTestCase;\n+import org.apache.lucene.util.TestUtil;\n+import org.junit.Ignore;\n+\n+/*\n+  Verify we can read previous versions' taxonomy indexes, do searches\n+  against them, and add documents to them.\n+*/\n+// See: https://issues.apache.org/jira/browse/SOLR-12028 Tests cannot remove files on Windows machines occasionally\n+public class TestBackwardsCompatibility extends LuceneTestCase {\n+\n+    // To generate backcompat indexes with the current default codec, run the following gradle command:\n+    //  gradlew test -Dtestcase=TestBackwardsCompatibility -Dtests.bwcdir=/path/to/store/indexes\n+    //           -Dtests.codec=default -Dtests.useSecurityManager=false\n+    // Also add testmethod with one of the index creation methods below, for example:\n+    //    -Dtestmethod=testCreateOldTaxonomy\n+    //\n+    // Zip up the generated indexes:\n+    //\n+    //    cd /path/to/store/indexes/index.cfs   ; zip index.<VERSION>-cfs.zip *\n+    //\n+    // Then move the zip file to your trunk checkout and use it in your test cases\n+\n+    public static final String oldTaxonomyIndexName = \"taxonomy.8.6.3-cfs\";\n+\n+    public void testCreateNewTaxonomy() throws IOException {\n+        createNewTaxonomyIndex(oldTaxonomyIndexName);\n+    }\n+\n+    // Opens up a pre-existing old taxonomy index and adds new BinaryDocValues based fields\n+    private void createNewTaxonomyIndex(String dirName) throws IOException {\n+        Path indexDir = createTempDir(oldTaxonomyIndexName);\n+        TestUtil.unzip(getDataInputStream(dirName + \".zip\"), indexDir);\n+        Directory dir = newFSDirectory(indexDir);\n+\n+        DirectoryTaxonomyWriter writer = new DirectoryTaxonomyWriter(dir);\n+\n+        FacetLabel cp_b = new FacetLabel(\"b\");\n+        writer.addCategory(cp_b);\n+        writer.getInternalIndexWriter().forceMerge(1);\n+        writer.commit();\n+\n+        TaxonomyReader reader = new DirectoryTaxonomyReader(writer);\n+\n+        int ord1 = reader.getOrdinal(new FacetLabel(\"a\"));\n+        // Just asserting ord1 != TaxonomyReader.INVALID_ORDINAL is not enough to check compatibility\n+        assertNotNull(reader.getPath(ord1));\n+        assert ord1 != TaxonomyReader.INVALID_ORDINAL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3b0de983d190e75947eed03b24064c305148ae4"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI3OTMxNQ==", "bodyText": "This one too?", "url": "https://github.com/apache/lucene-solr/pull/1733#discussion_r515279315", "createdAt": "2020-10-30T17:52:45Z", "author": {"login": "mikemccand"}, "path": "lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestBackwardsCompatibility.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.facet.taxonomy.directory;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.apache.lucene.facet.taxonomy.FacetLabel;\n+import org.apache.lucene.facet.taxonomy.TaxonomyReader;\n+import org.apache.lucene.facet.taxonomy.TaxonomyWriter;\n+import org.apache.lucene.store.Directory;\n+import org.apache.lucene.util.LuceneTestCase;\n+import org.apache.lucene.util.TestUtil;\n+import org.junit.Ignore;\n+\n+/*\n+  Verify we can read previous versions' taxonomy indexes, do searches\n+  against them, and add documents to them.\n+*/\n+// See: https://issues.apache.org/jira/browse/SOLR-12028 Tests cannot remove files on Windows machines occasionally\n+public class TestBackwardsCompatibility extends LuceneTestCase {\n+\n+    // To generate backcompat indexes with the current default codec, run the following gradle command:\n+    //  gradlew test -Dtestcase=TestBackwardsCompatibility -Dtests.bwcdir=/path/to/store/indexes\n+    //           -Dtests.codec=default -Dtests.useSecurityManager=false\n+    // Also add testmethod with one of the index creation methods below, for example:\n+    //    -Dtestmethod=testCreateOldTaxonomy\n+    //\n+    // Zip up the generated indexes:\n+    //\n+    //    cd /path/to/store/indexes/index.cfs   ; zip index.<VERSION>-cfs.zip *\n+    //\n+    // Then move the zip file to your trunk checkout and use it in your test cases\n+\n+    public static final String oldTaxonomyIndexName = \"taxonomy.8.6.3-cfs\";\n+\n+    public void testCreateNewTaxonomy() throws IOException {\n+        createNewTaxonomyIndex(oldTaxonomyIndexName);\n+    }\n+\n+    // Opens up a pre-existing old taxonomy index and adds new BinaryDocValues based fields\n+    private void createNewTaxonomyIndex(String dirName) throws IOException {\n+        Path indexDir = createTempDir(oldTaxonomyIndexName);\n+        TestUtil.unzip(getDataInputStream(dirName + \".zip\"), indexDir);\n+        Directory dir = newFSDirectory(indexDir);\n+\n+        DirectoryTaxonomyWriter writer = new DirectoryTaxonomyWriter(dir);\n+\n+        FacetLabel cp_b = new FacetLabel(\"b\");\n+        writer.addCategory(cp_b);\n+        writer.getInternalIndexWriter().forceMerge(1);\n+        writer.commit();\n+\n+        TaxonomyReader reader = new DirectoryTaxonomyReader(writer);\n+\n+        int ord1 = reader.getOrdinal(new FacetLabel(\"a\"));\n+        // Just asserting ord1 != TaxonomyReader.INVALID_ORDINAL is not enough to check compatibility\n+        assertNotNull(reader.getPath(ord1));\n+        assert ord1 != TaxonomyReader.INVALID_ORDINAL;\n+\n+        int ord2 = reader.getOrdinal(cp_b);\n+        assertNotNull(reader.getPath(ord2));\n+        assert ord2 != TaxonomyReader.INVALID_ORDINAL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3b0de983d190e75947eed03b24064c305148ae4"}, "originalPosition": 79}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4bcc2374570dcd786a3be58f120780f046e3a5d", "author": {"user": {"login": "gautamworah96", "name": "Gautam Worah"}}, "url": "https://github.com/apache/lucene-solr/commit/f4bcc2374570dcd786a3be58f120780f046e3a5d", "committedDate": "2020-10-30T18:06:54Z", "message": "Fix order of asserts in the test case"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxODUxMTQ4", "url": "https://github.com/apache/lucene-solr/pull/1733#pullrequestreview-521851148", "createdAt": "2020-11-02T17:32:36Z", "commit": {"oid": "f4bcc2374570dcd786a3be58f120780f046e3a5d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1MzQ0MTU3", "url": "https://github.com/apache/lucene-solr/pull/1733#pullrequestreview-525344157", "createdAt": "2020-11-06T17:14:53Z", "commit": {"oid": "f4bcc2374570dcd786a3be58f120780f046e3a5d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9147704900cb22bc687adc084929cc8a2a8526ec", "author": {"user": {"login": "gautamworah96", "name": "Gautam Worah"}}, "url": "https://github.com/apache/lucene-solr/commit/9147704900cb22bc687adc084929cc8a2a8526ec", "committedDate": "2020-11-06T23:22:31Z", "message": "Add backwards codecs to test dependency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b10ae399396b7335bb9584d5200925b701c30760", "author": {"user": {"login": "gautamworah96", "name": "Gautam Worah"}}, "url": "https://github.com/apache/lucene-solr/commit/b10ae399396b7335bb9584d5200925b701c30760", "committedDate": "2020-11-06T23:35:29Z", "message": "Add comment explaining why we need the Lucene 8.6.3 codec jar.\n\nTested the commit with the original Lucene master branch and it passes successfully. This test was failing initially without the dependency."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87f39193c0b8806fbd431c9e125788bae14d69f0", "author": {"user": {"login": "gautamworah96", "name": "Gautam Worah"}}, "url": "https://github.com/apache/lucene-solr/commit/87f39193c0b8806fbd431c9e125788bae14d69f0", "committedDate": "2020-11-09T00:06:24Z", "message": "Added dependency locking"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MTU2NjI1", "url": "https://github.com/apache/lucene-solr/pull/1733#pullrequestreview-529156625", "createdAt": "2020-11-12T14:45:13Z", "commit": {"oid": "87f39193c0b8806fbd431c9e125788bae14d69f0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f347133a5df996ed7d285de5ac29abef70b64ba5", "author": {"user": {"login": "gautamworah96", "name": "Gautam Worah"}}, "url": "https://github.com/apache/lucene-solr/commit/f347133a5df996ed7d285de5ac29abef70b64ba5", "committedDate": "2020-11-12T20:19:02Z", "message": "Fix merge conflicts. Pull in changes from master branch"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NDk0NzQ1", "url": "https://github.com/apache/lucene-solr/pull/1733#pullrequestreview-529494745", "createdAt": "2020-11-12T21:02:32Z", "commit": {"oid": "f347133a5df996ed7d285de5ac29abef70b64ba5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2345, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}