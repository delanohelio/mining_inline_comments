{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwNzg4NTYy", "number": 1908, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMTowNToyNlrOEmCECQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMTowNToyNlrOEmCECQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzE1MTQ1OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMTowNToyNlrOHV05tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMzoxMDozMlrOHV5PYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY0ODg4Nw==", "bodyText": "Technically you could also have a sign switch as boundary (~value marks first value) but I don't think it'd result in any savings and would only complicate the value stream.", "url": "https://github.com/apache/lucene-solr/pull/1908#discussion_r492648887", "createdAt": "2020-09-22T11:05:26Z", "author": {"login": "dweiss"}, "path": "lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter.java", "diffHunk": "@@ -379,4 +352,31 @@ public long getValueCount() {\n       return in.getValueCount();\n     }\n   }\n+\n+  static final class DocOrds {\n+    final long[] offsets;\n+    final PackedLongValues ords;\n+\n+    DocOrds(int maxDoc, Sorter.DocMap sortMap, SortedSetDocValues oldValues, float acceptableOverheadRatio) throws IOException {\n+      offsets = new long[maxDoc];\n+      PackedLongValues.Builder builder = PackedLongValues.packedBuilder(acceptableOverheadRatio);\n+      long ordOffset = 1; // 0 marks docs with no values\n+      int docID;\n+      while ((docID = oldValues.nextDoc()) != NO_MORE_DOCS) {\n+        int newDocID = sortMap.oldToNew(docID);\n+        long startOffset = ordOffset;\n+        long ord;\n+        while ((ord = oldValues.nextOrd()) != NO_MORE_ORDS) {\n+          builder.add(ord + 1);\n+          ordOffset++;\n+        }\n+        if (startOffset != ordOffset) { // do we have any values?\n+          offsets[newDocID] = startOffset;\n+          builder.add(0); // 0 ord marks next value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dab213768c76533f7935f2371b8e452c2ff30d64"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjcxOTk2OA==", "bodyText": "agreed, I didn't do it since it would have impacted readability too much IMO", "url": "https://github.com/apache/lucene-solr/pull/1908#discussion_r492719968", "createdAt": "2020-09-22T13:10:32Z", "author": {"login": "s1monw"}, "path": "lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter.java", "diffHunk": "@@ -379,4 +352,31 @@ public long getValueCount() {\n       return in.getValueCount();\n     }\n   }\n+\n+  static final class DocOrds {\n+    final long[] offsets;\n+    final PackedLongValues ords;\n+\n+    DocOrds(int maxDoc, Sorter.DocMap sortMap, SortedSetDocValues oldValues, float acceptableOverheadRatio) throws IOException {\n+      offsets = new long[maxDoc];\n+      PackedLongValues.Builder builder = PackedLongValues.packedBuilder(acceptableOverheadRatio);\n+      long ordOffset = 1; // 0 marks docs with no values\n+      int docID;\n+      while ((docID = oldValues.nextDoc()) != NO_MORE_DOCS) {\n+        int newDocID = sortMap.oldToNew(docID);\n+        long startOffset = ordOffset;\n+        long ord;\n+        while ((ord = oldValues.nextOrd()) != NO_MORE_ORDS) {\n+          builder.add(ord + 1);\n+          ordOffset++;\n+        }\n+        if (startOffset != ordOffset) { // do we have any values?\n+          offsets[newDocID] = startOffset;\n+          builder.add(0); // 0 ord marks next value", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY0ODg4Nw=="}, "originalCommit": {"oid": "dab213768c76533f7935f2371b8e452c2ff30d64"}, "originalPosition": 171}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1256, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}