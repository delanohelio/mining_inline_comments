{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2NDE0NjI0", "number": 1866, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOTo0NzoxNVrOEj-itg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOTo1NTozMFrOEj-vjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTYwMzEwOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/document/ShapeQuery.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOTo0NzoxNVrOHSpDHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMjo0NTo0OFrOHSvFSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMwODk1Nw==", "bodyText": "I think we should be careful with overflows, maybe divide instead of multiplying, ie.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (values.getDocCount() << 2 < values.size()) {\n          \n          \n            \n                  if (values.getDocCount() < (values.size() >>> 2)) {", "url": "https://github.com/apache/lucene-solr/pull/1866#discussion_r489308957", "createdAt": "2020-09-16T09:47:15Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/document/ShapeQuery.java", "diffHunk": "@@ -265,10 +265,20 @@ private Scorer getSparseScorer(final LeafReader reader, final Weight weight, fin\n         final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n         return new ConstantScoreScorer(weight, boost, scoreMode, iterator);\n       }\n-      final DocIdSetBuilder docIdSetBuilder = new DocIdSetBuilder(reader.maxDoc(), values, query.getField());\n-      values.intersect(getSparseVisitor(query, docIdSetBuilder));\n-      final DocIdSetIterator iterator = docIdSetBuilder.build().iterator();\n-      return new ConstantScoreScorer(weight, boost, scoreMode, iterator);\n+      if (values.getDocCount() << 2 < values.size()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "099328084c3496739befd902ce944fea43c305b4"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQwNzgxOA==", "bodyText": "indeed that is safer", "url": "https://github.com/apache/lucene-solr/pull/1866#discussion_r489407818", "createdAt": "2020-09-16T12:45:48Z", "author": {"login": "iverase"}, "path": "lucene/core/src/java/org/apache/lucene/document/ShapeQuery.java", "diffHunk": "@@ -265,10 +265,20 @@ private Scorer getSparseScorer(final LeafReader reader, final Weight weight, fin\n         final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n         return new ConstantScoreScorer(weight, boost, scoreMode, iterator);\n       }\n-      final DocIdSetBuilder docIdSetBuilder = new DocIdSetBuilder(reader.maxDoc(), values, query.getField());\n-      values.intersect(getSparseVisitor(query, docIdSetBuilder));\n-      final DocIdSetIterator iterator = docIdSetBuilder.build().iterator();\n-      return new ConstantScoreScorer(weight, boost, scoreMode, iterator);\n+      if (values.getDocCount() << 2 < values.size()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMwODk1Nw=="}, "originalCommit": {"oid": "099328084c3496739befd902ce944fea43c305b4"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTYyMDI3OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/document/ShapeQuery.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOTo1MToxOVrOHSpNRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMjo0Njo0NFrOHSvHiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMxMTU1Ng==", "bodyText": "We just need one long?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final long[] cost = new long[]{reader.maxDoc()};\n          \n          \n            \n                    final long[] cost = new long[]{1};", "url": "https://github.com/apache/lucene-solr/pull/1866#discussion_r489311556", "createdAt": "2020-09-16T09:51:19Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/document/ShapeQuery.java", "diffHunk": "@@ -265,10 +265,20 @@ private Scorer getSparseScorer(final LeafReader reader, final Weight weight, fin\n         final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n         return new ConstantScoreScorer(weight, boost, scoreMode, iterator);\n       }\n-      final DocIdSetBuilder docIdSetBuilder = new DocIdSetBuilder(reader.maxDoc(), values, query.getField());\n-      values.intersect(getSparseVisitor(query, docIdSetBuilder));\n-      final DocIdSetIterator iterator = docIdSetBuilder.build().iterator();\n-      return new ConstantScoreScorer(weight, boost, scoreMode, iterator);\n+      if (values.getDocCount() << 2 < values.size()) {\n+        // we use a dense structure so we can skip already visited documents\n+        final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n+        final long[] cost = new long[]{reader.maxDoc()};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "099328084c3496739befd902ce944fea43c305b4"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQwODM5Mg==", "bodyText": "Copy/paste error, it should be :\nfinal long[] cost = new long[]{0};", "url": "https://github.com/apache/lucene-solr/pull/1866#discussion_r489408392", "createdAt": "2020-09-16T12:46:44Z", "author": {"login": "iverase"}, "path": "lucene/core/src/java/org/apache/lucene/document/ShapeQuery.java", "diffHunk": "@@ -265,10 +265,20 @@ private Scorer getSparseScorer(final LeafReader reader, final Weight weight, fin\n         final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n         return new ConstantScoreScorer(weight, boost, scoreMode, iterator);\n       }\n-      final DocIdSetBuilder docIdSetBuilder = new DocIdSetBuilder(reader.maxDoc(), values, query.getField());\n-      values.intersect(getSparseVisitor(query, docIdSetBuilder));\n-      final DocIdSetIterator iterator = docIdSetBuilder.build().iterator();\n-      return new ConstantScoreScorer(weight, boost, scoreMode, iterator);\n+      if (values.getDocCount() << 2 < values.size()) {\n+        // we use a dense structure so we can skip already visited documents\n+        final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n+        final long[] cost = new long[]{reader.maxDoc()};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMxMTU1Ng=="}, "originalCommit": {"oid": "099328084c3496739befd902ce944fea43c305b4"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTYyNzk4OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/document/ShapeQuery.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOTo1MzozM1rOHSpSHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzo0OTo1NlrOHSx1hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMxMjc5OA==", "bodyText": "I wonder if we should use SparseFixedBitSet to avoid allocating so much memory at once.", "url": "https://github.com/apache/lucene-solr/pull/1866#discussion_r489312798", "createdAt": "2020-09-16T09:53:33Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/document/ShapeQuery.java", "diffHunk": "@@ -265,10 +265,20 @@ private Scorer getSparseScorer(final LeafReader reader, final Weight weight, fin\n         final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n         return new ConstantScoreScorer(weight, boost, scoreMode, iterator);\n       }\n-      final DocIdSetBuilder docIdSetBuilder = new DocIdSetBuilder(reader.maxDoc(), values, query.getField());\n-      values.intersect(getSparseVisitor(query, docIdSetBuilder));\n-      final DocIdSetIterator iterator = docIdSetBuilder.build().iterator();\n-      return new ConstantScoreScorer(weight, boost, scoreMode, iterator);\n+      if (values.getDocCount() << 2 < values.size()) {\n+        // we use a dense structure so we can skip already visited documents\n+        final FixedBitSet result = new FixedBitSet(reader.maxDoc());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "099328084c3496739befd902ce944fea43c305b4"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQxMjc3OQ==", "bodyText": "Using a SparseFixedBitSet the gain is not so significant expect for complex queries:\n|point|intersects|0.00|0.00|-2%|347.46|356.09|-2%|2644|2644| 0%|\n|box|intersects|5.57|5.64|-1%|37.86|38.35|-1%|33081264|33081264| 0%|\n|distance|intersects|5.33|5.25| 2%|18.72|18.42| 2%|64062400|64062400| 0%|\n|poly 10|intersects|4.73|4.51| 5%|18.00|17.19| 5%|59064569|59064569| 0%|\n|polyMedium|intersects|0.43|0.34|24%|26.53|21.41|24%|528812|528812| 0%|\n|polyRussia|intersects|1.68|1.10|52%|6.87|4.51|52%|244848|244848| 0%|", "url": "https://github.com/apache/lucene-solr/pull/1866#discussion_r489412779", "createdAt": "2020-09-16T12:53:38Z", "author": {"login": "iverase"}, "path": "lucene/core/src/java/org/apache/lucene/document/ShapeQuery.java", "diffHunk": "@@ -265,10 +265,20 @@ private Scorer getSparseScorer(final LeafReader reader, final Weight weight, fin\n         final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n         return new ConstantScoreScorer(weight, boost, scoreMode, iterator);\n       }\n-      final DocIdSetBuilder docIdSetBuilder = new DocIdSetBuilder(reader.maxDoc(), values, query.getField());\n-      values.intersect(getSparseVisitor(query, docIdSetBuilder));\n-      final DocIdSetIterator iterator = docIdSetBuilder.build().iterator();\n-      return new ConstantScoreScorer(weight, boost, scoreMode, iterator);\n+      if (values.getDocCount() << 2 < values.size()) {\n+        // we use a dense structure so we can skip already visited documents\n+        final FixedBitSet result = new FixedBitSet(reader.maxDoc());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMxMjc5OA=="}, "originalCommit": {"oid": "099328084c3496739befd902ce944fea43c305b4"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ1MjkzNA==", "bodyText": "ok, let's keep a FixedBitSet for now then", "url": "https://github.com/apache/lucene-solr/pull/1866#discussion_r489452934", "createdAt": "2020-09-16T13:49:56Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/document/ShapeQuery.java", "diffHunk": "@@ -265,10 +265,20 @@ private Scorer getSparseScorer(final LeafReader reader, final Weight weight, fin\n         final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n         return new ConstantScoreScorer(weight, boost, scoreMode, iterator);\n       }\n-      final DocIdSetBuilder docIdSetBuilder = new DocIdSetBuilder(reader.maxDoc(), values, query.getField());\n-      values.intersect(getSparseVisitor(query, docIdSetBuilder));\n-      final DocIdSetIterator iterator = docIdSetBuilder.build().iterator();\n-      return new ConstantScoreScorer(weight, boost, scoreMode, iterator);\n+      if (values.getDocCount() << 2 < values.size()) {\n+        // we use a dense structure so we can skip already visited documents\n+        final FixedBitSet result = new FixedBitSet(reader.maxDoc());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMxMjc5OA=="}, "originalCommit": {"oid": "099328084c3496739befd902ce944fea43c305b4"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTYzNTk2OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/document/ShapeQuery.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOTo1NTozMFrOHSpW3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOTo1NTozMFrOHSpW3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMxNDAxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * when the number of points <= 4 * number of docs ) */\n          \n          \n            \n               * when the number of docs <= 4 * number of points ) */", "url": "https://github.com/apache/lucene-solr/pull/1866#discussion_r489314015", "createdAt": "2020-09-16T09:55:30Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/document/ShapeQuery.java", "diffHunk": "@@ -340,7 +351,8 @@ public Relation compare(byte[] minTriangle, byte[] maxTriangle) {\n     };\n   }\n \n-  /** create a visitor that adds documents that match the query using a sparse bitset. (Used by INTERSECT) */\n+  /** create a visitor that adds documents that match the query using a sparse bitset. (Used by INTERSECT\n+   * when the number of points <= 4 * number of docs ) */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "099328084c3496739befd902ce944fea43c305b4"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1219, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}