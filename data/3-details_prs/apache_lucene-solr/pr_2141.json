{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2NDc3Njkz", "number": 2141, "title": "LUCENE-9346: Support minimumNumberShouldMatch in WANDScorer", "bodyText": "Description\nSupport minimumNumberShouldMatch in WANDScorer\nCurrently has a few nocommit to keep track of questions\nSolution\nSimilar to MinShouldMatchSumScorer, the logic here keeps track of number of matched scorers for each candidate doc, and compares it with minShouldMatch to decide if the minimum number of optional clauses have been matched.\nTests\nPassed existing tests (especially those in TestBooleanMinShouldMatch and TestWANDScorer), and updated some that check for scores.\n./gradlew check passed with nocommit rule commented out for now.\nChecklist\nPlease review the following and check all that apply:\n\n I have reviewed the guidelines for How to Contribute and my code conforms to the standards described there to the best of my ability.\n I have created a Jira issue and added the issue ID to my pull request title.\n I have given Solr maintainers access to contribute to my PR branch. (optional but recommended)\n I have developed this patch against the master branch.\n I have run ./gradlew check.\n I have added tests for my changes.\n I have added documentation for the Ref Guide (for Solr changes only).", "createdAt": "2020-12-11T04:04:24Z", "url": "https://github.com/apache/lucene-solr/pull/2141", "merged": true, "mergeCommit": {"oid": "c2493283a58ea19a13887a732328c1eaf970d371"}, "closed": true, "closedAt": "2021-01-11T14:03:30Z", "author": {"login": "zacharymorn"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdk_2oaAH2gAyNTM2NDc3NjkzOjlhNTIzZjQ2YzNkZWNmMWFkNGM5ZTEyYTU5OTQ0YmQzNWZmMTRhYmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdtudrygH2gAyNTM2NDc3NjkzOjFiYTM5YTA3NzUwNGU3YWRhZGRlYTkwY2EzZWRlMzg5MWRjNDBlYjM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9a523f46c3decf1ad4c9e12a59944bd35ff14abf", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/apache/lucene-solr/commit/9a523f46c3decf1ad4c9e12a59944bd35ff14abf", "committedDate": "2020-12-11T04:02:12Z", "message": "LUCENE-9346: Support minimumNumberShouldMatch in WANDScorer"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyMzI0ODI1", "url": "https://github.com/apache/lucene-solr/pull/2141#pullrequestreview-552324825", "createdAt": "2020-12-15T10:47:22Z", "commit": {"oid": "9a523f46c3decf1ad4c9e12a59944bd35ff14abf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMDo0NzoyMlrOIGEnuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMDo0NzoyMlrOIGEnuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIzODA3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // Do we want to depcate this entirely now ?\n          \n          \n            \n                    // Do we want to deprecate this entirely now ?", "url": "https://github.com/apache/lucene-solr/pull/2141#discussion_r543238073", "createdAt": "2020-12-15T10:47:22Z", "author": {"login": "jbampton"}, "path": "lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier.java", "diffHunk": "@@ -195,10 +201,13 @@ private Scorer opt(Collection<ScorerSupplier> optional, int minShouldMatch,\n       for (ScorerSupplier scorer : optional) {\n         optionalScorers.add(scorer.get(leadCost));\n       }\n-      if (minShouldMatch > 1) {\n+\n+      if (scoreMode == ScoreMode.TOP_SCORES) {\n+        return new WANDScorer(weight, optionalScorers, minShouldMatch);\n+      } else if (minShouldMatch > 1) {\n+        // nocommit minShouldMath > 1 && scoreMode != ScoreMode.TOP_SCORES still requires MinShouldMatchSumScorer.\n+        // Do we want to depcate this entirely now ?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a523f46c3decf1ad4c9e12a59944bd35ff14abf"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1OTU2NTQw", "url": "https://github.com/apache/lucene-solr/pull/2141#pullrequestreview-555956540", "createdAt": "2020-12-19T17:30:54Z", "commit": {"oid": "9a523f46c3decf1ad4c9e12a59944bd35ff14abf"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQxNzozMDo1NVrOII9OPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQxNzo1OTozNVrOII9ZoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI2MjU4OA==", "bodyText": "maybe we should make sure the minShouldMatch is not equal either, since it would be better to use the conjunction scorer otherwise?", "url": "https://github.com/apache/lucene-solr/pull/2141#discussion_r546262588", "createdAt": "2020-12-19T17:30:55Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/WANDScorer.java", "diffHunk": "@@ -130,10 +130,19 @@ private static long scaleMinScore(float minScore, int scalingFactor) {\n \n   int upTo; // upper bound for which max scores are valid\n \n-  WANDScorer(Weight weight, Collection<Scorer> scorers) throws IOException {\n+  int minShouldMatch;\n+  int freq;\n+\n+  WANDScorer(Weight weight, Collection<Scorer> scorers, int minShouldMatch) throws IOException {\n     super(weight);\n \n+    if (minShouldMatch > scorers.size()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a523f46c3decf1ad4c9e12a59944bd35ff14abf"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI2MjYzMA==", "bodyText": "this line is suspicious, is minShouldMatch ever negative?", "url": "https://github.com/apache/lucene-solr/pull/2141#discussion_r546262630", "createdAt": "2020-12-19T17:31:27Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/WANDScorer.java", "diffHunk": "@@ -130,10 +130,19 @@ private static long scaleMinScore(float minScore, int scalingFactor) {\n \n   int upTo; // upper bound for which max scores are valid\n \n-  WANDScorer(Weight weight, Collection<Scorer> scorers) throws IOException {\n+  int minShouldMatch;\n+  int freq;\n+\n+  WANDScorer(Weight weight, Collection<Scorer> scorers, int minShouldMatch) throws IOException {\n     super(weight);\n \n+    if (minShouldMatch > scorers.size()) {\n+      throw new IllegalArgumentException(\"minShouldMatch should be <= the number of scorers\");\n+    }\n+\n     this.minCompetitiveScore = 0;\n+    this.minShouldMatch = minShouldMatch > 0 ? minShouldMatch : 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a523f46c3decf1ad4c9e12a59944bd35ff14abf"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI2NTUwNQ==", "bodyText": "Actually I think it's important to merge both loops, in order to stop calling advanceTail as soon as possible.\nWithout doing this, your change is still correct, but it doesn't leverage minShouldMatch in order to make the query run faster, which is a pity.", "url": "https://github.com/apache/lucene-solr/pull/2141#discussion_r546265505", "createdAt": "2020-12-19T17:59:35Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/WANDScorer.java", "diffHunk": "@@ -271,6 +280,19 @@ public boolean matches() throws IOException {\n             return false;\n           }\n         }\n+\n+        // minCompetitiveScore satisfied, now checks if the doc has enough required number of matches\n+        // Combining this loop with the above makes for complicated conditional checks, so keeping them separate for readability", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a523f46c3decf1ad4c9e12a59944bd35ff14abf"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45e2277b716a0003858327e329388f658e26e647", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/apache/lucene-solr/commit/45e2277b716a0003858327e329388f658e26e647", "committedDate": "2020-12-28T17:58:21Z", "message": "Correct typo, and adjust validity checks on minShouldMatch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd2f4d3e24a9054fd4ec4ea4bc455eab3e8269d0", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/apache/lucene-solr/commit/bd2f4d3e24a9054fd4ec4ea4bc455eab3e8269d0", "committedDate": "2020-12-28T19:09:36Z", "message": "Combine min competitive score and min should match loops"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7b48f03824182e233d773c29d4e62326aefade8", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/apache/lucene-solr/commit/a7b48f03824182e233d773c29d4e62326aefade8", "committedDate": "2020-12-29T18:30:39Z", "message": "Merge branch 'master' of https://github.com/apache/lucene-solr into LUCENE-9346-WANDScorer-minimumNumberShouldMatch"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwNjA1MDAx", "url": "https://github.com/apache/lucene-solr/pull/2141#pullrequestreview-560605001", "createdAt": "2021-01-01T20:49:34Z", "commit": {"oid": "a7b48f03824182e233d773c29d4e62326aefade8"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQyMDo0OTozNFrOINSfkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQyMToyMDoyMlrOINSqyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgwNTM5Mw==", "bodyText": "Actually this bit was correct, we should instead fix WANDScorer to take minShouldMatch into account the same way MinShouldMatchSumScorer does.", "url": "https://github.com/apache/lucene-solr/pull/2141#discussion_r550805393", "createdAt": "2021-01-01T20:49:34Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier.java", "diffHunk": "@@ -74,11 +74,13 @@ private long computeCost() {\n       return minRequiredCost.getAsLong();\n     } else {\n       final Collection<ScorerSupplier> optionalScorers = subs.get(Occur.SHOULD);\n-      final long shouldCost =\n-          MinShouldMatchSumScorer.cost(\n-              optionalScorers.stream().mapToLong(ScorerSupplier::cost),\n-              optionalScorers.size(),\n-              minShouldMatch);\n+      // nocommit The cost calculation here copies that in WANDScorer's constructor, and may need to be adjusted?\n+      final long shouldCost = scoreMode == ScoreMode.TOP_SCORES ?\n+                              optionalScorers.stream().mapToLong(ScorerSupplier::cost).sum() :\n+                              MinShouldMatchSumScorer.cost(\n+                                      optionalScorers.stream().mapToLong(ScorerSupplier::cost),\n+                                      optionalScorers.size(),\n+                                      minShouldMatch);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7b48f03824182e233d773c29d4e62326aefade8"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgwNjcxMQ==", "bodyText": "Maybe not now in order to keep this PR contained, but it would be nice if we could handle this case with WANDScorer too indeed.", "url": "https://github.com/apache/lucene-solr/pull/2141#discussion_r550806711", "createdAt": "2021-01-01T21:06:26Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier.java", "diffHunk": "@@ -230,10 +232,13 @@ private Scorer opt(\n       for (ScorerSupplier scorer : optional) {\n         optionalScorers.add(scorer.get(leadCost));\n       }\n-      if (minShouldMatch > 1) {\n+\n+      if (scoreMode == ScoreMode.TOP_SCORES) {\n+        return new WANDScorer(weight, optionalScorers, minShouldMatch);\n+      } else if (minShouldMatch > 1) {\n+        // nocommit minShouldMath > 1 && scoreMode != ScoreMode.TOP_SCORES still requires MinShouldMatchSumScorer.\n+        // Do we want to deprecate this entirely now ?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7b48f03824182e233d773c29d4e62326aefade8"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgwNjc2NA==", "bodyText": "Let's make it final?", "url": "https://github.com/apache/lucene-solr/pull/2141#discussion_r550806764", "createdAt": "2021-01-01T21:06:47Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/WANDScorer.java", "diffHunk": "@@ -130,10 +130,21 @@ private static long scaleMinScore(float minScore, int scalingFactor) {\n \n   int upTo; // upper bound for which max scores are valid\n \n-  WANDScorer(Weight weight, Collection<Scorer> scorers) throws IOException {\n+  int minShouldMatch;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7b48f03824182e233d773c29d4e62326aefade8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgwNjgzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                assert minShouldMatch >=0 : \"minShouldMatch should not be negative, but got \" + minShouldMatch;\n          \n          \n            \n                assert minShouldMatch >= 0 : \"minShouldMatch should not be negative, but got \" + minShouldMatch;", "url": "https://github.com/apache/lucene-solr/pull/2141#discussion_r550806836", "createdAt": "2021-01-01T21:07:31Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/WANDScorer.java", "diffHunk": "@@ -130,10 +130,21 @@ private static long scaleMinScore(float minScore, int scalingFactor) {\n \n   int upTo; // upper bound for which max scores are valid\n \n-  WANDScorer(Weight weight, Collection<Scorer> scorers) throws IOException {\n+  int minShouldMatch;\n+  int freq;\n+\n+  WANDScorer(Weight weight, Collection<Scorer> scorers, int minShouldMatch) throws IOException {\n     super(weight);\n \n+    if (minShouldMatch >= scorers.size()) {\n+      throw new IllegalArgumentException(\"minShouldMatch should be < the number of scorers\");\n+    }\n+\n     this.minCompetitiveScore = 0;\n+\n+    assert minShouldMatch >=0 : \"minShouldMatch should not be negative, but got \" + minShouldMatch;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7b48f03824182e233d773c29d4e62326aefade8"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgwNzk3NQ==", "bodyText": "Indeed I don't think we need it, but I like doing it so that the approximation doesn't return documents knowing that no match is possible.", "url": "https://github.com/apache/lucene-solr/pull/2141#discussion_r550807975", "createdAt": "2021-01-01T21:17:15Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/WANDScorer.java", "diffHunk": "@@ -447,6 +461,23 @@ private int doNextCompetitiveCandidate() throws IOException {\n       }\n     }\n \n+      // nocommit Do we still need the following given TwoPhaseIterator.matches already performs the check\n+//     minCompetitiveScore satisfied, now checks if the doc has enough required number of matches", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7b48f03824182e233d773c29d4e62326aefade8"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgwODI2NQ==", "bodyText": "I don't think we should advanceTail here, which may be costly. We should just make sure that freq + tailSize >= minShouldMatch and otherwise call your else block.", "url": "https://github.com/apache/lucene-solr/pull/2141#discussion_r550808265", "createdAt": "2021-01-01T21:20:22Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/WANDScorer.java", "diffHunk": "@@ -447,6 +461,23 @@ private int doNextCompetitiveCandidate() throws IOException {\n       }\n     }\n \n+      // nocommit Do we still need the following given TwoPhaseIterator.matches already performs the check\n+//     minCompetitiveScore satisfied, now checks if the doc has enough required number of matches\n+//    while (freq < minShouldMatch) {\n+//      if (freq + tailSize >= minShouldMatch) {\n+//        // a match on doc is still possible, try to\n+//        // advance scorers from the tail\n+//        advanceTail();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7b48f03824182e233d773c29d4e62326aefade8"}, "originalPosition": 70}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37ce166822644baad718293cdbf6df607aa3bcae", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/apache/lucene-solr/commit/37ce166822644baad718293cdbf6df607aa3bcae", "committedDate": "2021-01-05T05:45:51Z", "message": "Update lucene/core/src/java/org/apache/lucene/search/WANDScorer.java\n\nCo-authored-by: Adrien Grand <jpountz@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d78897cb166496a47080c344f71bcfb0b50dbebc", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/apache/lucene-solr/commit/d78897cb166496a47080c344f71bcfb0b50dbebc", "committedDate": "2021-01-05T19:06:03Z", "message": "Make field final, and add tests to exercise minShouldMatch along with minCompetitiveScore, filter and must not configurations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ddc93f3a3fcf9a72f813dab116e5ae9d0db7ba37", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/apache/lucene-solr/commit/ddc93f3a3fcf9a72f813dab116e5ae9d0db7ba37", "committedDate": "2021-01-06T03:47:21Z", "message": "Address feedback:\n1. Incorporate MinShouldMatchSumScorer cost caclation into WANDScorer, and revert the changes made to the tests\n2. Add fre + tailSize < minShouldMatch check to doNextCompetitiveCandidate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e53bf6e79c5822671fe0e56f5b7edc63abcb2e1", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/apache/lucene-solr/commit/3e53bf6e79c5822671fe0e56f5b7edc63abcb2e1", "committedDate": "2021-01-06T05:56:17Z", "message": "Fix styling with gradlew :lucene:core:spotlessApply"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYzMDMxMjM2", "url": "https://github.com/apache/lucene-solr/pull/2141#pullrequestreview-563031236", "createdAt": "2021-01-06T20:55:30Z", "commit": {"oid": "3e53bf6e79c5822671fe0e56f5b7edc63abcb2e1"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMDo1NTozMFrOIPVzUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMDo1NTozMFrOIPVzUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjk1Njc1Mw==", "bodyText": "can you keep it pkg-private?", "url": "https://github.com/apache/lucene-solr/pull/2141#discussion_r552956753", "createdAt": "2021-01-06T20:55:30Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/ScorerUtil.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.search;\n+\n+import java.util.stream.LongStream;\n+import java.util.stream.StreamSupport;\n+import org.apache.lucene.util.PriorityQueue;\n+\n+/** Util class for Scorer related methods */\n+public class ScorerUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e53bf6e79c5822671fe0e56f5b7edc63abcb2e1"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ba39a077504e7adaddea90ca3ede3891dc40eb3", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/apache/lucene-solr/commit/1ba39a077504e7adaddea90ca3ede3891dc40eb3", "committedDate": "2021-01-07T06:51:53Z", "message": "Keep ScorerUtil package private"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2447, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}