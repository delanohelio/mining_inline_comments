{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2ODg3Mzkw", "number": 1815, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDozMzo1NlrOEgJZfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMTowMToyOFrOEgJ6Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTQzODY5OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/core/SolrCores.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDozMzo1NlrOHM2kKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDozMzo1NlrOHM2kKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIzODk1NA==", "bodyText": "mind putting the space after the if (here and in the rest of your changes)? that's the standard across the rest of the code AFAIK", "url": "https://github.com/apache/lucene-solr/pull/1815#discussion_r483238954", "createdAt": "2020-09-03T20:33:56Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/java/org/apache/solr/core/SolrCores.java", "diffHunk": "@@ -282,15 +283,19 @@ protected SolrCore remove(String name) {\n       return ret;\n     }\n   }\n+  SolrCore  getCoreFromAnyList(String name, boolean incRefCount) {\n+    return getCoreFromAnyList(name, incRefCount, null);\n+  }\n \n   /* If you don't increment the reference count, someone could close the core before you use it. */\n-  SolrCore  getCoreFromAnyList(String name, boolean incRefCount) {\n+  SolrCore  getCoreFromAnyList(String name, boolean incRefCount, UUID coreId) {\n     synchronized (modifyLock) {\n       SolrCore core = cores.get(name);\n \n       if (core == null && getTransientCacheHandler() != null) {\n         core = getTransientCacheHandler().getCore(name);\n       }\n+      if(core != null && coreId != null && coreId != core.uniqueId) return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f502a2f71dc8209d9edf6f4d74bcdf7fd2e80659"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTQ1NDA2OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/core/CoreContainer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDozOToyMFrOHM2tyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMTozOTo0NlrOHNKUPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI0MTQxOQ==", "bodyText": "Why is this method added? you don't seem to be doing any async reloads.", "url": "https://github.com/apache/lucene-solr/pull/1815#discussion_r483241419", "createdAt": "2020-09-03T20:39:20Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/java/org/apache/solr/core/CoreContainer.java", "diffHunk": "@@ -1582,6 +1582,13 @@ private CoreDescriptor reloadCoreDescriptor(CoreDescriptor oldDesc) {\n   public void reload(String name) {\n     reload(name, null);\n   }\n+  public void reload(String name, UUID coreId, boolean async) {\n+    if(async) {\n+      runAsync(() -> reload(name, coreId));\n+    } else {\n+      reload(name, coreId);\n+    }\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f502a2f71dc8209d9edf6f4d74bcdf7fd2e80659"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU2MjU1OQ==", "bodyText": "It's a generic method. I thought I would use it. But there are bugs in our core reloading. So, if I use asyn reload, some tests  fail", "url": "https://github.com/apache/lucene-solr/pull/1815#discussion_r483562559", "createdAt": "2020-09-04T11:39:46Z", "author": {"login": "noblepaul"}, "path": "solr/core/src/java/org/apache/solr/core/CoreContainer.java", "diffHunk": "@@ -1582,6 +1582,13 @@ private CoreDescriptor reloadCoreDescriptor(CoreDescriptor oldDesc) {\n   public void reload(String name) {\n     reload(name, null);\n   }\n+  public void reload(String name, UUID coreId, boolean async) {\n+    if(async) {\n+      runAsync(() -> reload(name, coreId));\n+    } else {\n+      reload(name, coreId);\n+    }\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI0MTQxOQ=="}, "originalCommit": {"oid": "f502a2f71dc8209d9edf6f4d74bcdf7fd2e80659"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTUyMjI3OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/core/ConfigSetService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMTowMToyOFrOHM3W5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMTozODoxM1rOHNKRvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI1MTk0Mg==", "bodyText": "Does this mean that every call to configSet.getIndexSchema() will create a new schema object (if shared schema is not enabled)?", "url": "https://github.com/apache/lucene-solr/pull/1815#discussion_r483251942", "createdAt": "2020-09-03T21:01:28Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/java/org/apache/solr/core/ConfigSetService.java", "diffHunk": "@@ -81,8 +81,7 @@ public final ConfigSet loadConfigSet(CoreDescriptor dcore) {\n               ) ? false: true;\n \n       SolrConfig solrConfig = createSolrConfig(dcore, coreLoader, trusted);\n-      IndexSchema indexSchema = createIndexSchema(dcore, solrConfig, false);\n-      return new ConfigSet(configSetName(dcore), solrConfig, force -> indexSchema, properties, trusted);\n+      return new ConfigSet(configSetName(dcore), solrConfig, force -> createIndexSchema(dcore, solrConfig, force), properties, trusted);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f502a2f71dc8209d9edf6f4d74bcdf7fd2e80659"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU2MTkxOQ==", "bodyText": "Yes.", "url": "https://github.com/apache/lucene-solr/pull/1815#discussion_r483561919", "createdAt": "2020-09-04T11:38:13Z", "author": {"login": "noblepaul"}, "path": "solr/core/src/java/org/apache/solr/core/ConfigSetService.java", "diffHunk": "@@ -81,8 +81,7 @@ public final ConfigSet loadConfigSet(CoreDescriptor dcore) {\n               ) ? false: true;\n \n       SolrConfig solrConfig = createSolrConfig(dcore, coreLoader, trusted);\n-      IndexSchema indexSchema = createIndexSchema(dcore, solrConfig, false);\n-      return new ConfigSet(configSetName(dcore), solrConfig, force -> indexSchema, properties, trusted);\n+      return new ConfigSet(configSetName(dcore), solrConfig, force -> createIndexSchema(dcore, solrConfig, force), properties, trusted);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI1MTk0Mg=="}, "originalCommit": {"oid": "f502a2f71dc8209d9edf6f4d74bcdf7fd2e80659"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1169, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}