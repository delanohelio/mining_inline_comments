{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3NzYxODMz", "number": 1877, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNDowNjoxOVrOEkEoCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzowODozNlrOElwrbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MjU5OTc4OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/request/macro/MacroExpander.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNDowNjoyMFrOHSyleA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNDowNjoyMFrOHSyleA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ2NTIwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  int matchedStart = idx;\n          \n          \n            \n                  final int matchedStart = idx;", "url": "https://github.com/apache/lucene-solr/pull/1877#discussion_r489465208", "createdAt": "2020-09-16T14:06:20Z", "author": {"login": "cpoerschke"}, "path": "solr/core/src/java/org/apache/solr/request/macro/MacroExpander.java", "diffHunk": "@@ -136,11 +136,12 @@ private String _expand(String val) {\n       }\n       else if (idx < 0) {\n         if (sb == null) return val;\n-        sb.append(val.substring(start));\n+        sb.append(val, start, val.length());\n         return sb.toString();\n       }\n \n       // found unescaped \"${\"\n+      int matchedStart = idx;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7312cef7fdd269c863dfec36d4916a368597148b"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MjYwMzQxOnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/request/macro/MacroExpander.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNDowNzowNVrOHSynsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNDowNzowNVrOHSynsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ2NTc3OA==", "bodyText": "How about removing rather than amending the // String inbetween = val.substring(idx, rbrace); commented out code line?", "url": "https://github.com/apache/lucene-solr/pull/1877#discussion_r489465778", "createdAt": "2020-09-16T14:07:05Z", "author": {"login": "cpoerschke"}, "path": "solr/core/src/java/org/apache/solr/request/macro/MacroExpander.java", "diffHunk": "@@ -154,14 +155,14 @@ else if (idx < 0) {\n       }\n \n       if (matchedStart > 0) {\n-        sb.append(val.substring(start, matchedStart));\n+        sb.append(val, start, matchedStart);\n       }\n \n       // update \"start\" to be at the end of ${...}\n-      start = rbrace + 1;\n+      idx = start = rbrace + 1;\n \n-      // String inbetween = val.substring(idx, rbrace);\n-      StrParser parser = new StrParser(val, idx, rbrace);\n+      // String in-between = val.substring(idx, rbrace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7312cef7fdd269c863dfec36d4916a368597148b"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MjYzMDc0OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/request/macro/MacroExpander.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNDoxMzowOFrOHSy43A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNDoxMzowOFrOHSy43A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ3MDE3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  int rbrace = val.indexOf('}', idx);\n          \n          \n            \n                  int rbrace = val.indexOf('}', matchedStart + macroStart.length());\n          \n      \n    \n    \n  \n\nsimilar to line 165 below and then the idx += macroStart.length(); assignment would not be needed since there would be no use of idx between that incrementing assigment and the idx = start = rbrace + 1; resetting assignment below.", "url": "https://github.com/apache/lucene-solr/pull/1877#discussion_r489470172", "createdAt": "2020-09-16T14:13:08Z", "author": {"login": "cpoerschke"}, "path": "solr/core/src/java/org/apache/solr/request/macro/MacroExpander.java", "diffHunk": "@@ -136,11 +136,12 @@ private String _expand(String val) {\n       }\n       else if (idx < 0) {\n         if (sb == null) return val;\n-        sb.append(val.substring(start));\n+        sb.append(val, start, val.length());\n         return sb.toString();\n       }\n \n       // found unescaped \"${\"\n+      int matchedStart = idx;\n       idx += macroStart.length();\n \n       int rbrace = val.indexOf('}', idx);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7312cef7fdd269c863dfec36d4916a368597148b"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MjY2MDY2OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/request/macro/MacroExpander.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNDoxOToyMFrOHSzLJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNzoyMDo1MFrOHTtelA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ3NDg1NA==", "bodyText": "observation: foo.append(bar.substring(x,y)); is also found in other places in the code base, not sure how it might work implementation wise but it would be lovely if tooling would flag up that there's a more efficient alternative", "url": "https://github.com/apache/lucene-solr/pull/1877#discussion_r489474854", "createdAt": "2020-09-16T14:19:20Z", "author": {"login": "cpoerschke"}, "path": "solr/core/src/java/org/apache/solr/request/macro/MacroExpander.java", "diffHunk": "@@ -188,7 +189,7 @@ else if (failOnMissingParams) {\n \n       } catch (SyntaxError syntaxError) {\n         // append the part we would have skipped\n-        sb.append( val.substring(matchedStart, start) );\n+        sb.append(val, matchedStart, start);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7312cef7fdd269c863dfec36d4916a368597148b"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQzMDEwMA==", "bodyText": "IntelliJ pointed this out to me :-)  It didn't know about the val.substring(start) (implied val.length()) so I did those manually.  Yes, it'd be nice if everywhere we could do this in one go.  Feel free to file an issue to do so if you have time.  IntelliJ can make quick work of that.", "url": "https://github.com/apache/lucene-solr/pull/1877#discussion_r490430100", "createdAt": "2020-09-17T17:20:50Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/request/macro/MacroExpander.java", "diffHunk": "@@ -188,7 +189,7 @@ else if (failOnMissingParams) {\n \n       } catch (SyntaxError syntaxError) {\n         // append the part we would have skipped\n-        sb.append( val.substring(matchedStart, start) );\n+        sb.append(val, matchedStart, start);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ3NDg1NA=="}, "originalCommit": {"oid": "7312cef7fdd269c863dfec36d4916a368597148b"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODY4MDk4OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/request/macro/MacroExpander.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNzozMzo0MlrOHTt-fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNzozMzo0MlrOHTt-fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQzODI2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  // String in-between = val.substring(idx, rbrace);\n          \n          \n            \n                  // String in-between braces", "url": "https://github.com/apache/lucene-solr/pull/1877#discussion_r490438268", "createdAt": "2020-09-17T17:33:42Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/request/macro/MacroExpander.java", "diffHunk": "@@ -154,14 +155,14 @@ else if (idx < 0) {\n       }\n \n       if (matchedStart > 0) {\n-        sb.append(val.substring(start, matchedStart));\n+        sb.append(val, start, matchedStart);\n       }\n \n       // update \"start\" to be at the end of ${...}\n-      start = rbrace + 1;\n+      idx = start = rbrace + 1;\n \n-      // String inbetween = val.substring(idx, rbrace);\n-      StrParser parser = new StrParser(val, idx, rbrace);\n+      // String in-between = val.substring(idx, rbrace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c04ae84543bd80fe8adf6e5724c68ac8793bd263"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODk0MDE4OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/request/macro/MacroExpander.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxODo0ODoxOFrOHTwipA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxODo0ODoxOFrOHTwipA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ4MDI5Mg==", "bodyText": "Can now remove idx manipulation until later when idx & start are changed in one line\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  idx += macroStart.length();", "url": "https://github.com/apache/lucene-solr/pull/1877#discussion_r490480292", "createdAt": "2020-09-17T18:48:18Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/request/macro/MacroExpander.java", "diffHunk": "@@ -136,14 +136,15 @@ private String _expand(String val) {\n       }\n       else if (idx < 0) {\n         if (sb == null) return val;\n-        sb.append(val.substring(start));\n+        sb.append(val, start, val.length());\n         return sb.toString();\n       }\n \n       // found unescaped \"${\"\n+      final int matchedStart = idx;\n       idx += macroStart.length();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c04ae84543bd80fe8adf6e5724c68ac8793bd263"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDI2OTk0OnYy", "diffSide": "LEFT", "path": "solr/core/src/java/org/apache/solr/request/macro/MacroExpander.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNjo1OToyNVrOHVaMgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNjo1OToyNVrOHVaMgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxMTMzMA==", "bodyText": "... fix infinite loop when no close ...\n\nAh, yes, good catch!\nAnd since the logic in the loop is quite complex the \"infinite loop\" wording inspired me to go lookup again about the loop invariants and loop variants concepts and work it through here:\n\nval.size() - idx looks like the loops variant and to ensure loop termination it must decrease i.e. idx must advance (or we must break or return out of the loop)\nidx > 0 leads to advancing\nidx < 0 previously returned and now it breaks i.e. either gets us out of the loop\nidx == 0 if combined with rbrace == -1 i.e. no closing would get us stuck in the loop if continue is used but both return null or break get us out of the loop", "url": "https://github.com/apache/lucene-solr/pull/1877#discussion_r492211330", "createdAt": "2020-09-21T16:59:25Z", "author": {"login": "cpoerschke"}, "path": "solr/core/src/java/org/apache/solr/request/macro/MacroExpander.java", "diffHunk": "@@ -135,33 +135,34 @@ private String _expand(String val) {\n         }\n       }\n       else if (idx < 0) {\n-        if (sb == null) return val;\n-        sb.append(val.substring(start));\n-        return sb.toString();\n+        break;\n       }\n \n       // found unescaped \"${\"\n-      idx += macroStart.length();\n+      final int matchedStart = idx;\n \n-      int rbrace = val.indexOf('}', idx);\n+      int rbrace = val.indexOf('}', matchedStart + macroStart.length());\n       if (rbrace == -1) {\n         // no matching close brace...\n-        continue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72e2d6cd4df90d7dc59f1cdbf3e7ab48cdf98daa"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDMwMzE4OnYy", "diffSide": "RIGHT", "path": "solr/core/src/test/org/apache/solr/request/macro/TestMacroExpander.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzowODozNlrOHVag_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOTo0NDo1MVrOHWJvSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxNjU3NQ==", "bodyText": "How about adding (say) ${goodAnswer} ${noClose as another case and it turning into 42 ${noClose if there is a goodAnswer=42 mapping i.e. to demonstrate that absence of closing curly bracket partially affects expansion (as opposed to no expansion at all happening)?", "url": "https://github.com/apache/lucene-solr/pull/1877#discussion_r492216575", "createdAt": "2020-09-21T17:08:36Z", "author": {"login": "cpoerschke"}, "path": "solr/core/src/test/org/apache/solr/request/macro/TestMacroExpander.java", "diffHunk": "@@ -143,15 +142,31 @@ public void testMapExprExpandOn() {\n     String oldVal = System.getProperty(\"StreamingExpressionMacros\",\"false\");\n     System.setProperty(\"StreamingExpressionMacros\", \"true\");\n     try {\n-      @SuppressWarnings({\"rawtypes\"})\n-      Map expanded = MacroExpander.expand(request);\n-      assertEquals(\"zero\", ((String[])expanded.get(\"fq\"))[0]);\n-      assertEquals(\"one\", ((String[])expanded.get(\"fq\"))[1]);\n-      assertEquals(\"two\", ((String[]) expanded.get(\"fq\"))[2]);\n-      assertEquals(\"three\", ((String[]) expanded.get(\"fq\"))[3]);\n-      assertEquals(\"one\", ((String[])expanded.get(\"expr\"))[0]);\n+      Map<String, String[]> expanded = MacroExpander.expand(request);\n+      assertEquals(\"zero\", expanded.get(\"fq\")[0]);\n+      assertEquals(\"one\", expanded.get(\"fq\")[1]);\n+      assertEquals(\"two\", expanded.get(\"fq\")[2]);\n+      assertEquals(\"three\", expanded.get(\"fq\")[3]);\n+      assertEquals(\"one\", expanded.get(\"expr\")[0]);\n     } finally {\n       System.setProperty(\"StreamingExpressionMacros\", oldVal);\n     }\n   }\n+\n+  @Test\n+  public void testUnbalanced() { // SOLR-13181\n+    final MacroExpander meSkipOnMissingParams = new MacroExpander(Collections.emptyMap());\n+    final MacroExpander meFailOnMissingParams = new MacroExpander(Collections.emptyMap(), true);\n+    assertEquals(\"${noClose\", meSkipOnMissingParams.expand(\"${noClose\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72e2d6cd4df90d7dc59f1cdbf3e7ab48cdf98daa"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyNjc2OQ==", "bodyText": "I'm not 100% clear what you suggest; let me try to guess.  Let's say the parameter map has exactly one param == goodAnswer with value 42.\n    assertEquals(\"42\", meSkipOnMissingParams.expand(\"${goodAnswer}\"));\n    assertEquals(\"42\", meFailOnMissingParams.expand(\"${goodAnswer}\"));\n\nIs that what you suggest?", "url": "https://github.com/apache/lucene-solr/pull/1877#discussion_r492226769", "createdAt": "2020-09-21T17:25:43Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/test/org/apache/solr/request/macro/TestMacroExpander.java", "diffHunk": "@@ -143,15 +142,31 @@ public void testMapExprExpandOn() {\n     String oldVal = System.getProperty(\"StreamingExpressionMacros\",\"false\");\n     System.setProperty(\"StreamingExpressionMacros\", \"true\");\n     try {\n-      @SuppressWarnings({\"rawtypes\"})\n-      Map expanded = MacroExpander.expand(request);\n-      assertEquals(\"zero\", ((String[])expanded.get(\"fq\"))[0]);\n-      assertEquals(\"one\", ((String[])expanded.get(\"fq\"))[1]);\n-      assertEquals(\"two\", ((String[]) expanded.get(\"fq\"))[2]);\n-      assertEquals(\"three\", ((String[]) expanded.get(\"fq\"))[3]);\n-      assertEquals(\"one\", ((String[])expanded.get(\"expr\"))[0]);\n+      Map<String, String[]> expanded = MacroExpander.expand(request);\n+      assertEquals(\"zero\", expanded.get(\"fq\")[0]);\n+      assertEquals(\"one\", expanded.get(\"fq\")[1]);\n+      assertEquals(\"two\", expanded.get(\"fq\")[2]);\n+      assertEquals(\"three\", expanded.get(\"fq\")[3]);\n+      assertEquals(\"one\", expanded.get(\"expr\")[0]);\n     } finally {\n       System.setProperty(\"StreamingExpressionMacros\", oldVal);\n     }\n   }\n+\n+  @Test\n+  public void testUnbalanced() { // SOLR-13181\n+    final MacroExpander meSkipOnMissingParams = new MacroExpander(Collections.emptyMap());\n+    final MacroExpander meFailOnMissingParams = new MacroExpander(Collections.emptyMap(), true);\n+    assertEquals(\"${noClose\", meSkipOnMissingParams.expand(\"${noClose\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxNjU3NQ=="}, "originalCommit": {"oid": "72e2d6cd4df90d7dc59f1cdbf3e7ab48cdf98daa"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg0MzI0Mw==", "bodyText": "${goodAnswer} ${noClose is what I had in mind. Pushed a corresponding commit to the PR's branch, hope you don't mind.", "url": "https://github.com/apache/lucene-solr/pull/1877#discussion_r492843243", "createdAt": "2020-09-22T15:44:57Z", "author": {"login": "cpoerschke"}, "path": "solr/core/src/test/org/apache/solr/request/macro/TestMacroExpander.java", "diffHunk": "@@ -143,15 +142,31 @@ public void testMapExprExpandOn() {\n     String oldVal = System.getProperty(\"StreamingExpressionMacros\",\"false\");\n     System.setProperty(\"StreamingExpressionMacros\", \"true\");\n     try {\n-      @SuppressWarnings({\"rawtypes\"})\n-      Map expanded = MacroExpander.expand(request);\n-      assertEquals(\"zero\", ((String[])expanded.get(\"fq\"))[0]);\n-      assertEquals(\"one\", ((String[])expanded.get(\"fq\"))[1]);\n-      assertEquals(\"two\", ((String[]) expanded.get(\"fq\"))[2]);\n-      assertEquals(\"three\", ((String[]) expanded.get(\"fq\"))[3]);\n-      assertEquals(\"one\", ((String[])expanded.get(\"expr\"))[0]);\n+      Map<String, String[]> expanded = MacroExpander.expand(request);\n+      assertEquals(\"zero\", expanded.get(\"fq\")[0]);\n+      assertEquals(\"one\", expanded.get(\"fq\")[1]);\n+      assertEquals(\"two\", expanded.get(\"fq\")[2]);\n+      assertEquals(\"three\", expanded.get(\"fq\")[3]);\n+      assertEquals(\"one\", expanded.get(\"expr\")[0]);\n     } finally {\n       System.setProperty(\"StreamingExpressionMacros\", oldVal);\n     }\n   }\n+\n+  @Test\n+  public void testUnbalanced() { // SOLR-13181\n+    final MacroExpander meSkipOnMissingParams = new MacroExpander(Collections.emptyMap());\n+    final MacroExpander meFailOnMissingParams = new MacroExpander(Collections.emptyMap(), true);\n+    assertEquals(\"${noClose\", meSkipOnMissingParams.expand(\"${noClose\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxNjU3NQ=="}, "originalCommit": {"oid": "72e2d6cd4df90d7dc59f1cdbf3e7ab48cdf98daa"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk5MDI4MA==", "bodyText": "Ah; thanks!", "url": "https://github.com/apache/lucene-solr/pull/1877#discussion_r492990280", "createdAt": "2020-09-22T19:44:51Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/test/org/apache/solr/request/macro/TestMacroExpander.java", "diffHunk": "@@ -143,15 +142,31 @@ public void testMapExprExpandOn() {\n     String oldVal = System.getProperty(\"StreamingExpressionMacros\",\"false\");\n     System.setProperty(\"StreamingExpressionMacros\", \"true\");\n     try {\n-      @SuppressWarnings({\"rawtypes\"})\n-      Map expanded = MacroExpander.expand(request);\n-      assertEquals(\"zero\", ((String[])expanded.get(\"fq\"))[0]);\n-      assertEquals(\"one\", ((String[])expanded.get(\"fq\"))[1]);\n-      assertEquals(\"two\", ((String[]) expanded.get(\"fq\"))[2]);\n-      assertEquals(\"three\", ((String[]) expanded.get(\"fq\"))[3]);\n-      assertEquals(\"one\", ((String[])expanded.get(\"expr\"))[0]);\n+      Map<String, String[]> expanded = MacroExpander.expand(request);\n+      assertEquals(\"zero\", expanded.get(\"fq\")[0]);\n+      assertEquals(\"one\", expanded.get(\"fq\")[1]);\n+      assertEquals(\"two\", expanded.get(\"fq\")[2]);\n+      assertEquals(\"three\", expanded.get(\"fq\")[3]);\n+      assertEquals(\"one\", expanded.get(\"expr\")[0]);\n     } finally {\n       System.setProperty(\"StreamingExpressionMacros\", oldVal);\n     }\n   }\n+\n+  @Test\n+  public void testUnbalanced() { // SOLR-13181\n+    final MacroExpander meSkipOnMissingParams = new MacroExpander(Collections.emptyMap());\n+    final MacroExpander meFailOnMissingParams = new MacroExpander(Collections.emptyMap(), true);\n+    assertEquals(\"${noClose\", meSkipOnMissingParams.expand(\"${noClose\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxNjU3NQ=="}, "originalCommit": {"oid": "72e2d6cd4df90d7dc59f1cdbf3e7ab48cdf98daa"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1226, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}