{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1ODU5NDE4", "number": 1802, "title": "LUCENE-9215: replace checkJavaDocs.py with doclet", "bodyText": "This has the same logic as the previous python, but no longer relies\nupon parsing HTML output, instead using java's doclet processor.\nThe errors are reported like \"normal\" javadoc errors with source file\nname and line number and happen when running \"gradlew javadoc\"\nAlthough the \"rules\" are the same as the previous python, the python had\nsome bugs where the checker didn't quite do exactly what we wanted, so\nsome fixes were applied throughout.\nNOTE: I'm aware this isn't perfect, but I think it is much better than what we had before.\nThe branch is pushed so if you want to help, push commits :)", "createdAt": "2020-08-30T04:02:59Z", "url": "https://github.com/apache/lucene-solr/pull/1802", "merged": true, "mergeCommit": {"oid": "784ede4eda911416bac0912c077380b59df8b988"}, "closed": true, "closedAt": "2020-09-02T12:29:18Z", "author": {"login": "rmuir"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdD2FCXgH2gAyNDc1ODU5NDE4OjE5Y2FlNDIxOGZmNjA1MzY2ZGJhZTUzMDExMjY1YzhhMjlhZGQzYmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdE7DtbgFqTQ4MDc2MjM0MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "19cae4218ff605366dbae53011265c8a29add3be", "author": {"user": {"login": "rmuir", "name": "Robert Muir"}}, "url": "https://github.com/apache/lucene-solr/commit/19cae4218ff605366dbae53011265c8a29add3be", "committedDate": "2020-08-30T03:59:23Z", "message": "LUCENE-9215: replace checkJavaDocs.py with doclet\n\nThis has the same logic as the previous python, but no longer relies\nupon parsing HTML output, instead using java's doclet processor.\n\nThe errors are reported like \"normal\" javadoc errors with source file\nname and line number and happen when running \"gradlew javadoc\"\n\nAlthough the \"rules\" are the same as the previous python, the python had\nsome bugs where the checker didn't quite do exactly what we wanted, so\nsome fixes were applied throughout."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MTk2Nzc1", "url": "https://github.com/apache/lucene-solr/pull/1802#pullrequestreview-478196775", "createdAt": "2020-08-30T11:59:52Z", "commit": {"oid": "19cae4218ff605366dbae53011265c8a29add3be"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxMTo1OTo1MlrOHJiScQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxMTo1OTo1MlrOHJiScQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc2MTAwOQ==", "bodyText": "Hey that's my UweSays statement!", "url": "https://github.com/apache/lucene-solr/pull/1802#discussion_r479761009", "createdAt": "2020-08-30T11:59:52Z", "author": {"login": "uschindler"}, "path": "buildSrc/src/main/java/org/apache/lucene/gradle/MissingDoclet.java", "diffHunk": "@@ -0,0 +1,331 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.gradle;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Set;\n+\n+import javax.lang.model.element.Element;\n+import javax.lang.model.element.ElementKind;\n+import javax.lang.model.element.ModuleElement;\n+import javax.lang.model.util.Elements;\n+import javax.tools.Diagnostic;\n+\n+import com.sun.source.util.DocTrees;\n+\n+import jdk.javadoc.doclet.Doclet;\n+import jdk.javadoc.doclet.DocletEnvironment;\n+import jdk.javadoc.doclet.Reporter;\n+import jdk.javadoc.doclet.StandardDoclet;\n+\n+/**\n+ * Checks for missing javadocs, where missing also means \"only whitespace\" or \"license header\".\n+ * Has option --missing-level (package, class, method) so that we can improve over time.\n+ * Has option --missing-ignore to ignore individual elements (such as split packages).\n+ * Has option --missing-method to apply \"method\" level to selected packages (fix one at a time).\n+ */\n+public class MissingDoclet extends StandardDoclet {\n+  private static final int PACKAGE = 0;\n+  private static final int CLASS = 1;\n+  private static final int METHOD = 2;\n+  int level = METHOD;\n+  Reporter reporter;\n+  DocletEnvironment docEnv;\n+  DocTrees docTrees;\n+  Elements elementUtils;\n+  Set<String> ignored = Collections.emptySet();\n+  Set<String> methodPackages = Collections.emptySet();\n+  \n+  @Override\n+  public Set<Doclet.Option> getSupportedOptions() {\n+    Set<Doclet.Option> options = new HashSet<>();\n+    options.addAll(super.getSupportedOptions());\n+    options.add(new Doclet.Option() {\n+      @Override\n+      public int getArgumentCount() {\n+        return 1;\n+      }\n+\n+      @Override\n+      public String getDescription() {\n+        return \"level to enforce for missing javadocs: [package, class, method]\";\n+      }\n+\n+      @Override\n+      public Kind getKind() {\n+        return Option.Kind.STANDARD;\n+      }\n+\n+      @Override\n+      public List<String> getNames() {\n+        return Collections.singletonList(\"--missing-level\");\n+      }\n+\n+      @Override\n+      public String getParameters() {\n+        return \"level\";\n+      }\n+\n+      @Override\n+      public boolean process(String option, List<String> arguments) {\n+        switch(arguments.get(0)) {\n+          case \"package\":\n+            level = PACKAGE;\n+            return true;\n+          case \"class\":\n+            level = CLASS;\n+            return true;\n+          case \"method\":\n+            level = METHOD;\n+            return true;\n+          default:\n+            return false;\n+        }\n+      }\n+    });\n+    options.add(new Doclet.Option() {\n+      @Override\n+      public int getArgumentCount() {\n+        return 1;\n+      }\n+\n+      @Override\n+      public String getDescription() {\n+        return \"comma separated list of element names to ignore (e.g. as a workaround for split packages)\";\n+      }\n+\n+      @Override\n+      public Kind getKind() {\n+        return Option.Kind.STANDARD;\n+      }\n+\n+      @Override\n+      public List<String> getNames() {\n+        return Collections.singletonList(\"--missing-ignore\");\n+      }\n+\n+      @Override\n+      public String getParameters() {\n+        return \"ignoredNames\";\n+      }\n+\n+      @Override\n+      public boolean process(String option, List<String> arguments) {\n+        ignored = new HashSet<>(Arrays.asList(arguments.get(0).split(\",\")));\n+        return true;\n+      }\n+    });\n+    options.add(new Doclet.Option() {\n+      @Override\n+      public int getArgumentCount() {\n+        return 1;\n+      }\n+\n+      @Override\n+      public String getDescription() {\n+        return \"comma separated list of packages to check at 'method' level\";\n+      }\n+\n+      @Override\n+      public Kind getKind() {\n+        return Option.Kind.STANDARD;\n+      }\n+\n+      @Override\n+      public List<String> getNames() {\n+        return Collections.singletonList(\"--missing-method\");\n+      }\n+\n+      @Override\n+      public String getParameters() {\n+        return \"packages\";\n+      }\n+\n+      @Override\n+      public boolean process(String option, List<String> arguments) {\n+        methodPackages = new HashSet<>(Arrays.asList(arguments.get(0).split(\",\")));\n+        return true;\n+      }\n+    });\n+    return options;\n+  }\n+\n+  @Override\n+  public void init(Locale locale, Reporter reporter) {\n+    this.reporter = reporter;\n+    super.init(locale, reporter);\n+  }\n+\n+  @Override\n+  public boolean run(DocletEnvironment docEnv) {\n+    this.docEnv = docEnv;\n+    this.docTrees = docEnv.getDocTrees();\n+    this.elementUtils = docEnv.getElementUtils();\n+    for (var element : docEnv.getIncludedElements()) {\n+      check(element);\n+    }\n+\n+    return super.run(docEnv);\n+  }\n+  \n+  /**\n+   * Returns effective check level for this element\n+   */\n+  private int level(Element element) {\n+    String pkg = elementUtils.getPackageOf(element).getQualifiedName().toString();\n+    if (methodPackages.contains(pkg)) {\n+      return METHOD;\n+    } else {\n+      return level;\n+    }\n+  }\n+  \n+  /** \n+   * Check an individual element.\n+   * This checks packages and types from the doctrees.\n+   * It will recursively check methods/fields from encountered types when the level is \"method\"\n+   */\n+  private void check(Element element) {\n+    switch(element.getKind()) {\n+      case MODULE:\n+        // don't check the unnamed module, it won't have javadocs\n+        if (!((ModuleElement)element).isUnnamed()) {\n+          checkComment(element);\n+        }\n+        break;\n+      case PACKAGE:\n+        checkComment(element);\n+        break;\n+      // class-like elements, check them, then recursively check their children (fields and methods)\n+      case CLASS:\n+      case INTERFACE:\n+      case ENUM:\n+      case ANNOTATION_TYPE:\n+        if (level(element) >= CLASS) {\n+          checkComment(element);\n+          for (var subElement : element.getEnclosedElements()) {\n+            // don't check enclosed types, otherwise we'll double-check since they are in the included docTree\n+            if (subElement.getKind() == ElementKind.METHOD || \n+                subElement.getKind() == ElementKind.CONSTRUCTOR || \n+                subElement.getKind() == ElementKind.FIELD || \n+                subElement.getKind() == ElementKind.ENUM_CONSTANT) {\n+              check(subElement);\n+            }\n+          }\n+        }\n+        break;\n+      // method-like elements, check them if we are configured to do so\n+      case METHOD:\n+      case CONSTRUCTOR:\n+      case FIELD:\n+      case ENUM_CONSTANT:\n+        if (level(element) >= METHOD && !isOverridden(element) && !isSyntheticEnumMethod(element)) {\n+          checkComment(element);\n+        }\n+        break;\n+      default:\n+        error(element, \"I don't know how to analyze \" + element.getKind() + \" yet.\");\n+    }\n+  }\n+  \n+  /** Return true if the method is annotated with Override, if so, don't require javadocs (they'll be copied) */\n+  private boolean isOverridden(Element element) {\n+    for (var annotation : element.getAnnotationMirrors()) {\n+      if (annotation.getAnnotationType().toString().equals(Override.class.getName())) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n+  \n+  /** \n+   * Return true if the method is synthetic enum method (values/valueOf).\n+   * According to the doctree documentation, the \"included\" set never includes synthetic elements.\n+   * It should not happen but it happens!", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19cae4218ff605366dbae53011265c8a29add3be"}, "originalPosition": 262}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87a693f4e3c0f0c37c38c5646e5af6a5d5ebbeb5", "author": {"user": {"login": "rmuir", "name": "Robert Muir"}}, "url": "https://github.com/apache/lucene-solr/commit/87a693f4e3c0f0c37c38c5646e5af6a5d5ebbeb5", "committedDate": "2020-08-30T13:38:38Z", "message": "LUCENE-9215: add missing quote attribution :)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b85369090e2a4f2116c639e02070ae4d085404cc", "author": {"user": {"login": "rmuir", "name": "Robert Muir"}}, "url": "https://github.com/apache/lucene-solr/commit/b85369090e2a4f2116c639e02070ae4d085404cc", "committedDate": "2020-08-30T14:13:24Z", "message": "LUCENE-9215: add more fixed packages to lucene/core and add some comments.\n\nThe previous python tool did recursive file traversal, so the list of\npackages was recursive.\n\nIn our case we do exact matching on the package name.\nAdd the subpackages too, since they have full documentation and are already fixed.\n\nAlso add a few more comments to the linter explaining the hairy parts."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "efaf34f218cf50e8dc2c396df1453aae7cf41d93", "author": {"user": {"login": "dweiss", "name": "Dawid Weiss"}}, "url": "https://github.com/apache/lucene-solr/commit/efaf34f218cf50e8dc2c396df1453aae7cf41d93", "committedDate": "2020-08-30T15:46:55Z", "message": "Moved configuration properties to the task itself and made them @Inputs. Centralized all todos and properties in the render-javadoc file."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab25396d88cd97993c7f64792446fb0ee9032dfe", "author": {"user": {"login": "dweiss", "name": "Dawid Weiss"}}, "url": "https://github.com/apache/lucene-solr/commit/ab25396d88cd97993c7f64792446fb0ee9032dfe", "committedDate": "2020-08-30T16:01:34Z", "message": "Add javadocMissingLevel = package for all Solr projects."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c365f15768af6f4b0835344117ea3e25e054892", "author": {"user": {"login": "rmuir", "name": "Robert Muir"}}, "url": "https://github.com/apache/lucene-solr/commit/2c365f15768af6f4b0835344117ea3e25e054892", "committedDate": "2020-08-30T16:20:23Z", "message": "LUCENE-9215: more extensive javadocs checks by default\n\nAdd \"parameter\" which, in addition to the checks done by \"method\",\nvalidates that there is an @param tag for each formal parameter of a\nmethod/constructor.\n\nThis is a good win for an API, documenting the parameters in this way\nplugs in nicely into IDEs and users can just hover over things to pop up\nprecisely what they need to see.\n\nSome modules only require just a few fixes to lock this in, so we should\nfix the easy wins at least (I fixed lucene/memory since it literally\nonly had ONE problem)."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2134bd84a657e365893b7c63ccec4ddd0658fab", "author": {"user": {"login": "rmuir", "name": "Robert Muir"}}, "url": "https://github.com/apache/lucene-solr/commit/e2134bd84a657e365893b7c63ccec4ddd0658fab", "committedDate": "2020-08-30T16:25:18Z", "message": "LUCENE-9215: add missing return true here... apparently it must not be checked by the doclet framework?"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "679bbec62698c4e5dd125b6188af1ace837a144f", "author": {"user": {"login": "dweiss", "name": "Dawid Weiss"}}, "url": "https://github.com/apache/lucene-solr/commit/679bbec62698c4e5dd125b6188af1ace837a144f", "committedDate": "2020-08-30T16:30:35Z", "message": "Merged with master and resolved conflicts."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a31831075f53bb246b5673b3e16edcb1b7d68a89", "author": {"user": {"login": "dweiss", "name": "Dawid Weiss"}}, "url": "https://github.com/apache/lucene-solr/commit/a31831075f53bb246b5673b3e16edcb1b7d68a89", "committedDate": "2020-08-30T16:49:39Z", "message": "Made missing doclet a regular project. This also means all the checks are applied to it (forbidden APIs, etc.)."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c94f5bc661ca889b94353d2f7dac94921d3baae", "author": {"user": {"login": "dweiss", "name": "Dawid Weiss"}}, "url": "https://github.com/apache/lucene-solr/commit/8c94f5bc661ca889b94353d2f7dac94921d3baae", "committedDate": "2020-08-30T16:49:51Z", "message": "Merge branch 'LUCENE-9215' of https://git-wip-us.apache.org/repos/asf/lucene-solr into LUCENE-9215"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d7c780aba8fa4df789d8760a919525a8a215c86", "author": {"user": {"login": "dweiss", "name": "Dawid Weiss"}}, "url": "https://github.com/apache/lucene-solr/commit/3d7c780aba8fa4df789d8760a919525a8a215c86", "committedDate": "2020-08-30T20:07:45Z", "message": "Include doclet as a composite build, at least for now, until we decide what else to do with it.."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MjMzNzE1", "url": "https://github.com/apache/lucene-solr/pull/1802#pullrequestreview-478233715", "createdAt": "2020-08-30T20:57:47Z", "commit": {"oid": "3d7c780aba8fa4df789d8760a919525a8a215c86"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQyMDo1Nzo0N1rOHJlk3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQyMDo1Nzo0N1rOHJlk3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxNDg3OA==", "bodyText": "No longer needed.", "url": "https://github.com/apache/lucene-solr/pull/1802#discussion_r479814878", "createdAt": "2020-08-30T20:57:47Z", "author": {"login": "uschindler"}, "path": "gradle/validation/forbidden-apis.gradle", "diffHunk": "@@ -103,6 +103,13 @@ allprojects { prj ->\n       ]\n     }\n \n+    // Doclet does use exotic JDK APIs.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d7c780aba8fa4df789d8760a919525a8a215c86"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e577d407b9765ed739a09b5bc4e666cb4069242", "author": {"user": {"login": "dweiss", "name": "Dawid Weiss"}}, "url": "https://github.com/apache/lucene-solr/commit/1e577d407b9765ed739a09b5bc4e666cb4069242", "committedDate": "2020-08-30T21:01:57Z", "message": "Remove stale exclusion."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5794bd7de872f883844ad2c04eb0fe7d0415e42", "author": {"user": {"login": "dweiss", "name": "Dawid Weiss"}}, "url": "https://github.com/apache/lucene-solr/commit/d5794bd7de872f883844ad2c04eb0fe7d0415e42", "committedDate": "2020-08-30T21:13:48Z", "message": "Add override check on type mirror tree."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a9c2a1abd9fb77d3821794afa136898a9f72934", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/0a9c2a1abd9fb77d3821794afa136898a9f72934", "committedDate": "2020-08-31T00:13:05Z", "message": "Merge branch 'master' of https://gitbox.apache.org/repos/asf/lucene-solr into LUCENE-9215"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b779291a0418747497b6d9dad0ef9560d2497c27", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/b779291a0418747497b6d9dad0ef9560d2497c27", "committedDate": "2020-08-31T10:54:14Z", "message": "Merge branch 'master' of https://gitbox.apache.org/repos/asf/lucene-solr into LUCENE-9215"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c945c89e2018adbb920934f0dbbcae78f753fb2", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/0c945c89e2018adbb920934f0dbbcae78f753fb2", "committedDate": "2020-08-31T11:00:24Z", "message": "Exclude Doclet from source checks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10c4c4f034f809149c40c1b7555d37c51ab38417", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/10c4c4f034f809149c40c1b7555d37c51ab38417", "committedDate": "2020-09-01T16:35:30Z", "message": "Merge branch 'master' of https://gitbox.apache.org/repos/asf/lucene-solr into LUCENE-9215\n\n# Conflicts:\n#\tgradle/documentation/render-javadoc.gradle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0497790360d44497746be23ed56100502882b089", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/0497790360d44497746be23ed56100502882b089", "committedDate": "2020-09-01T16:45:08Z", "message": "fix merge problem"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "590a73cdc7ff63c3a47f4cd4530232fbd364ecc4", "author": {"user": {"login": "rmuir", "name": "Robert Muir"}}, "url": "https://github.com/apache/lucene-solr/commit/590a73cdc7ff63c3a47f4cd4530232fbd364ecc4", "committedDate": "2020-09-01T17:11:13Z", "message": "LUCENE-9215: remove @Overrides and add some missing docs instead of changing visibility\n\nWe don't rely on the presence of the @Override annotation anymore, so\nlet's address this problem separately. We use the \"Dawid algorithm\"\ninstead which works here even if it is missing.\n\nFix visibility back on some (not all) of the crazy classes lacking javadocs. At\nleast they are all marked @lucene.internal because no care was given to\ndocumenting them, so they are candidates to hide later."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a7055c80cc1ee9da7c2f78deec6d85270e7e23f", "author": {"user": {"login": "rmuir", "name": "Robert Muir"}}, "url": "https://github.com/apache/lucene-solr/commit/2a7055c80cc1ee9da7c2f78deec6d85270e7e23f", "committedDate": "2020-09-01T17:24:16Z", "message": "LUCENE-9215: log errors about missing @param even when tree is null\n\nThis means on the first run, you'll see everything you need to fix (up to javadoc's limit)\n\nInstead of:\n\n> Task :lucene:memory:renderJavadoc FAILED\n/home/rmuir/workspace/lucene-solr/lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java:283: error - MemoryIndex.fromDocument (method): javadocs are missing\n1 error\n\nYou now see:\n\n> Task :lucene:memory:renderJavadoc FAILED\n/home/rmuir/workspace/lucene-solr/lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java:283: error - MemoryIndex.fromDocument (method): javadocs are missing\n/home/rmuir/workspace/lucene-solr/lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java:283: error - MemoryIndex.fromDocument (method): missing javadoc @param for parameter 'document'\n/home/rmuir/workspace/lucene-solr/lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java:283: error - MemoryIndex.fromDocument (method): missing javadoc @param for parameter 'analyzer'\n3 errors\n\nPreviously the tooling would force you to do a second pass."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba4fbcdac1d551fd8b09d11d6e91d1cd145c0caa", "author": {"user": {"login": "rmuir", "name": "Robert Muir"}}, "url": "https://github.com/apache/lucene-solr/commit/ba4fbcdac1d551fd8b09d11d6e91d1cd145c0caa", "committedDate": "2020-09-02T12:04:48Z", "message": "LUCENE-9215: add missing javadocs and reset visibility"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwNzYyMzQx", "url": "https://github.com/apache/lucene-solr/pull/1802#pullrequestreview-480762341", "createdAt": "2020-09-02T12:21:23Z", "commit": {"oid": "ba4fbcdac1d551fd8b09d11d6e91d1cd145c0caa"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2415, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}