{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyMTg5MzY0", "number": 1842, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODoyODoxN1rOEhXZww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODozNTo1MVrOEhXkKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDIxODkxOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/test/org/apache/lucene/store/TestLockFactoriesMultiJVM.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODoyODoxN1rOHOpG5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxOTozNzo1NVrOHOrVmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNTYyMQ==", "bodyText": "1 second may not be enough on heavy loaded machines?", "url": "https://github.com/apache/lucene-solr/pull/1842#discussion_r485115621", "createdAt": "2020-09-08T18:28:17Z", "author": {"login": "dweiss"}, "path": "lucene/core/src/test/org/apache/lucene/store/TestLockFactoriesMultiJVM.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.store;\n+\n+import java.lang.ProcessBuilder.Redirect;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.lucene.util.LuceneTestCase;\n+import org.apache.lucene.util.NamedThreadFactory;\n+import org.apache.lucene.util.SuppressForbidden;\n+\n+public class TestLockFactoriesMultiJVM extends LuceneTestCase {\n+  \n+  @SuppressForbidden(reason = \"ProcessBuilder only allows to redirect to java.io.File\")\n+  private static final ProcessBuilder applyRedirection(ProcessBuilder pb, int client, Path dir) {\n+    if (LuceneTestCase.VERBOSE) {\n+      return pb.inheritIO();\n+    } else {\n+      return pb\n+        .redirectError(dir.resolve(\"err-\" + client + \".txt\").toFile())\n+        .redirectOutput(dir.resolve(\"out-\" + client + \".txt\").toFile())\n+        .redirectInput(Redirect.INHERIT);\n+    }\n+  }\n+  \n+  private void runImpl(Class<? extends LockFactory> impl) throws Exception {\n+    // make sure we are in clean state:\n+    LockVerifyServer.PORT.set(-1);\n+    \n+    final int clients = 2;\n+    final String host = \"127.0.0.1\";\n+    final int delay = 1;\n+    final int rounds = (LuceneTestCase.TEST_NIGHTLY ? 30000 : 500) * LuceneTestCase.RANDOM_MULTIPLIER;\n+    \n+    final Path dir = LuceneTestCase.createTempDir(impl.getSimpleName());\n+    \n+    // create the LockVerifyServer in a separate thread\n+    final ExecutorService pool = Executors.newSingleThreadExecutor(new NamedThreadFactory(\"lockfactory-tester-\"));\n+    try {\n+      pool.submit(() -> {\n+        LockVerifyServer.main(host, Integer.toString(clients));\n+        return (Void) null;\n+      });\n+      \n+      // wait for it to boot up\n+      int port;\n+      while ((port = LockVerifyServer.PORT.get()) == -1) {\n+        Thread.sleep(100L);\n+      }\n+      \n+      // spawn clients as separate Java processes\n+      final List<Process> processes = new ArrayList<>();\n+      for (int i = 0; i < clients; i++) {\n+        processes.add(applyRedirection(new ProcessBuilder(\n+            Paths.get(System.getProperty(\"java.home\"), \"bin\", \"java\").toString(),\n+            \"-cp\",\n+            System.getProperty(\"java.class.path\"),\n+            LockStressTest.class.getName(),\n+            Integer.toString(i),\n+            host,\n+            Integer.toString(port),\n+            impl.getName(),\n+            dir.toString(),\n+            Integer.toString(delay),\n+            Integer.toString(rounds)\n+          ), i, dir).start());\n+      }\n+      \n+      // wait for all processes to exit\n+      int exited = 0;\n+      while (exited < clients) {\n+        for (Process p : processes) {\n+          if (p.waitFor(1, TimeUnit.SECONDS)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3a0dbb462707f907362aed76a5a45a738a40f54"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEzNjc5NQ==", "bodyText": "this is inside a loop though: so it will effectively wait forever?", "url": "https://github.com/apache/lucene-solr/pull/1842#discussion_r485136795", "createdAt": "2020-09-08T19:07:43Z", "author": {"login": "rmuir"}, "path": "lucene/core/src/test/org/apache/lucene/store/TestLockFactoriesMultiJVM.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.store;\n+\n+import java.lang.ProcessBuilder.Redirect;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.lucene.util.LuceneTestCase;\n+import org.apache.lucene.util.NamedThreadFactory;\n+import org.apache.lucene.util.SuppressForbidden;\n+\n+public class TestLockFactoriesMultiJVM extends LuceneTestCase {\n+  \n+  @SuppressForbidden(reason = \"ProcessBuilder only allows to redirect to java.io.File\")\n+  private static final ProcessBuilder applyRedirection(ProcessBuilder pb, int client, Path dir) {\n+    if (LuceneTestCase.VERBOSE) {\n+      return pb.inheritIO();\n+    } else {\n+      return pb\n+        .redirectError(dir.resolve(\"err-\" + client + \".txt\").toFile())\n+        .redirectOutput(dir.resolve(\"out-\" + client + \".txt\").toFile())\n+        .redirectInput(Redirect.INHERIT);\n+    }\n+  }\n+  \n+  private void runImpl(Class<? extends LockFactory> impl) throws Exception {\n+    // make sure we are in clean state:\n+    LockVerifyServer.PORT.set(-1);\n+    \n+    final int clients = 2;\n+    final String host = \"127.0.0.1\";\n+    final int delay = 1;\n+    final int rounds = (LuceneTestCase.TEST_NIGHTLY ? 30000 : 500) * LuceneTestCase.RANDOM_MULTIPLIER;\n+    \n+    final Path dir = LuceneTestCase.createTempDir(impl.getSimpleName());\n+    \n+    // create the LockVerifyServer in a separate thread\n+    final ExecutorService pool = Executors.newSingleThreadExecutor(new NamedThreadFactory(\"lockfactory-tester-\"));\n+    try {\n+      pool.submit(() -> {\n+        LockVerifyServer.main(host, Integer.toString(clients));\n+        return (Void) null;\n+      });\n+      \n+      // wait for it to boot up\n+      int port;\n+      while ((port = LockVerifyServer.PORT.get()) == -1) {\n+        Thread.sleep(100L);\n+      }\n+      \n+      // spawn clients as separate Java processes\n+      final List<Process> processes = new ArrayList<>();\n+      for (int i = 0; i < clients; i++) {\n+        processes.add(applyRedirection(new ProcessBuilder(\n+            Paths.get(System.getProperty(\"java.home\"), \"bin\", \"java\").toString(),\n+            \"-cp\",\n+            System.getProperty(\"java.class.path\"),\n+            LockStressTest.class.getName(),\n+            Integer.toString(i),\n+            host,\n+            Integer.toString(port),\n+            impl.getName(),\n+            dir.toString(),\n+            Integer.toString(delay),\n+            Integer.toString(rounds)\n+          ), i, dir).start());\n+      }\n+      \n+      // wait for all processes to exit\n+      int exited = 0;\n+      while (exited < clients) {\n+        for (Process p : processes) {\n+          if (p.waitFor(1, TimeUnit.SECONDS)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNTYyMQ=="}, "originalCommit": {"oid": "e3a0dbb462707f907362aed76a5a45a738a40f54"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE1MjE1Mg==", "bodyText": "Ah, correct. A completable future wait-for would be more elegant here I think but fine as it is too.", "url": "https://github.com/apache/lucene-solr/pull/1842#discussion_r485152152", "createdAt": "2020-09-08T19:37:55Z", "author": {"login": "dweiss"}, "path": "lucene/core/src/test/org/apache/lucene/store/TestLockFactoriesMultiJVM.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.store;\n+\n+import java.lang.ProcessBuilder.Redirect;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.lucene.util.LuceneTestCase;\n+import org.apache.lucene.util.NamedThreadFactory;\n+import org.apache.lucene.util.SuppressForbidden;\n+\n+public class TestLockFactoriesMultiJVM extends LuceneTestCase {\n+  \n+  @SuppressForbidden(reason = \"ProcessBuilder only allows to redirect to java.io.File\")\n+  private static final ProcessBuilder applyRedirection(ProcessBuilder pb, int client, Path dir) {\n+    if (LuceneTestCase.VERBOSE) {\n+      return pb.inheritIO();\n+    } else {\n+      return pb\n+        .redirectError(dir.resolve(\"err-\" + client + \".txt\").toFile())\n+        .redirectOutput(dir.resolve(\"out-\" + client + \".txt\").toFile())\n+        .redirectInput(Redirect.INHERIT);\n+    }\n+  }\n+  \n+  private void runImpl(Class<? extends LockFactory> impl) throws Exception {\n+    // make sure we are in clean state:\n+    LockVerifyServer.PORT.set(-1);\n+    \n+    final int clients = 2;\n+    final String host = \"127.0.0.1\";\n+    final int delay = 1;\n+    final int rounds = (LuceneTestCase.TEST_NIGHTLY ? 30000 : 500) * LuceneTestCase.RANDOM_MULTIPLIER;\n+    \n+    final Path dir = LuceneTestCase.createTempDir(impl.getSimpleName());\n+    \n+    // create the LockVerifyServer in a separate thread\n+    final ExecutorService pool = Executors.newSingleThreadExecutor(new NamedThreadFactory(\"lockfactory-tester-\"));\n+    try {\n+      pool.submit(() -> {\n+        LockVerifyServer.main(host, Integer.toString(clients));\n+        return (Void) null;\n+      });\n+      \n+      // wait for it to boot up\n+      int port;\n+      while ((port = LockVerifyServer.PORT.get()) == -1) {\n+        Thread.sleep(100L);\n+      }\n+      \n+      // spawn clients as separate Java processes\n+      final List<Process> processes = new ArrayList<>();\n+      for (int i = 0; i < clients; i++) {\n+        processes.add(applyRedirection(new ProcessBuilder(\n+            Paths.get(System.getProperty(\"java.home\"), \"bin\", \"java\").toString(),\n+            \"-cp\",\n+            System.getProperty(\"java.class.path\"),\n+            LockStressTest.class.getName(),\n+            Integer.toString(i),\n+            host,\n+            Integer.toString(port),\n+            impl.getName(),\n+            dir.toString(),\n+            Integer.toString(delay),\n+            Integer.toString(rounds)\n+          ), i, dir).start());\n+      }\n+      \n+      // wait for all processes to exit\n+      int exited = 0;\n+      while (exited < clients) {\n+        for (Process p : processes) {\n+          if (p.waitFor(1, TimeUnit.SECONDS)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNTYyMQ=="}, "originalCommit": {"oid": "e3a0dbb462707f907362aed76a5a45a738a40f54"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDIyMTU2OnYy", "diffSide": "RIGHT", "path": "gradle/testing/randomization/policies/tests.policy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODoyODo1OVrOHOpIgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMDoxMToxOFrOHOsYPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNjAzNA==", "bodyText": "This property wouldn't be needed if you forked the \"server: side as well as clients... :)", "url": "https://github.com/apache/lucene-solr/pull/1842#discussion_r485116034", "createdAt": "2020-09-08T18:28:59Z", "author": {"login": "dweiss"}, "path": "gradle/testing/randomization/policies/tests.policy", "diffHunk": "@@ -64,6 +64,9 @@ grant {\n   permission java.lang.RuntimePermission \"getClassLoader\";\n   permission java.lang.RuntimePermission \"setContextClassLoader\";\n \n+  // TestLockFactoriesMultiJVM opens a random port on 127.0.0.1 (port 0 = ephemeral port range):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3a0dbb462707f907362aed76a5a45a738a40f54"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2OTIxMw==", "bodyText": "This does not work, as there needs to be a communication, so the test knows when to start the clients. This was not different in Ant (the main process was running fork=false, the clients fork=true)\nI don't want to start any other processes. I think @rmuir is fine with this addition of SocketPermission", "url": "https://github.com/apache/lucene-solr/pull/1842#discussion_r485169213", "createdAt": "2020-09-08T20:11:18Z", "author": {"login": "uschindler"}, "path": "gradle/testing/randomization/policies/tests.policy", "diffHunk": "@@ -64,6 +64,9 @@ grant {\n   permission java.lang.RuntimePermission \"getClassLoader\";\n   permission java.lang.RuntimePermission \"setContextClassLoader\";\n \n+  // TestLockFactoriesMultiJVM opens a random port on 127.0.0.1 (port 0 = ephemeral port range):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNjAzNA=="}, "originalCommit": {"oid": "e3a0dbb462707f907362aed76a5a45a738a40f54"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDIyNDg0OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/test/org/apache/lucene/store/TestLockFactoriesMultiJVM.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODoyOTo1NlrOHOpKkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMDoxMTo0NVrOHOsZKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNjU2Mg==", "bodyText": "Does it make sense to limit the default heap of these subprocesses here?", "url": "https://github.com/apache/lucene-solr/pull/1842#discussion_r485116562", "createdAt": "2020-09-08T18:29:56Z", "author": {"login": "dweiss"}, "path": "lucene/core/src/test/org/apache/lucene/store/TestLockFactoriesMultiJVM.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.store;\n+\n+import java.lang.ProcessBuilder.Redirect;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.lucene.util.LuceneTestCase;\n+import org.apache.lucene.util.NamedThreadFactory;\n+import org.apache.lucene.util.SuppressForbidden;\n+\n+public class TestLockFactoriesMultiJVM extends LuceneTestCase {\n+  \n+  @SuppressForbidden(reason = \"ProcessBuilder only allows to redirect to java.io.File\")\n+  private static final ProcessBuilder applyRedirection(ProcessBuilder pb, int client, Path dir) {\n+    if (LuceneTestCase.VERBOSE) {\n+      return pb.inheritIO();\n+    } else {\n+      return pb\n+        .redirectError(dir.resolve(\"err-\" + client + \".txt\").toFile())\n+        .redirectOutput(dir.resolve(\"out-\" + client + \".txt\").toFile())\n+        .redirectInput(Redirect.INHERIT);\n+    }\n+  }\n+  \n+  private void runImpl(Class<? extends LockFactory> impl) throws Exception {\n+    // make sure we are in clean state:\n+    LockVerifyServer.PORT.set(-1);\n+    \n+    final int clients = 2;\n+    final String host = \"127.0.0.1\";\n+    final int delay = 1;\n+    final int rounds = (LuceneTestCase.TEST_NIGHTLY ? 30000 : 500) * LuceneTestCase.RANDOM_MULTIPLIER;\n+    \n+    final Path dir = LuceneTestCase.createTempDir(impl.getSimpleName());\n+    \n+    // create the LockVerifyServer in a separate thread\n+    final ExecutorService pool = Executors.newSingleThreadExecutor(new NamedThreadFactory(\"lockfactory-tester-\"));\n+    try {\n+      pool.submit(() -> {\n+        LockVerifyServer.main(host, Integer.toString(clients));\n+        return (Void) null;\n+      });\n+      \n+      // wait for it to boot up\n+      int port;\n+      while ((port = LockVerifyServer.PORT.get()) == -1) {\n+        Thread.sleep(100L);\n+      }\n+      \n+      // spawn clients as separate Java processes\n+      final List<Process> processes = new ArrayList<>();\n+      for (int i = 0; i < clients; i++) {\n+        processes.add(applyRedirection(new ProcessBuilder(\n+            Paths.get(System.getProperty(\"java.home\"), \"bin\", \"java\").toString(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3a0dbb462707f907362aed76a5a45a738a40f54"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2OTQ0OA==", "bodyText": "i tested 32M, coming in next push", "url": "https://github.com/apache/lucene-solr/pull/1842#discussion_r485169448", "createdAt": "2020-09-08T20:11:45Z", "author": {"login": "uschindler"}, "path": "lucene/core/src/test/org/apache/lucene/store/TestLockFactoriesMultiJVM.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.store;\n+\n+import java.lang.ProcessBuilder.Redirect;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.lucene.util.LuceneTestCase;\n+import org.apache.lucene.util.NamedThreadFactory;\n+import org.apache.lucene.util.SuppressForbidden;\n+\n+public class TestLockFactoriesMultiJVM extends LuceneTestCase {\n+  \n+  @SuppressForbidden(reason = \"ProcessBuilder only allows to redirect to java.io.File\")\n+  private static final ProcessBuilder applyRedirection(ProcessBuilder pb, int client, Path dir) {\n+    if (LuceneTestCase.VERBOSE) {\n+      return pb.inheritIO();\n+    } else {\n+      return pb\n+        .redirectError(dir.resolve(\"err-\" + client + \".txt\").toFile())\n+        .redirectOutput(dir.resolve(\"out-\" + client + \".txt\").toFile())\n+        .redirectInput(Redirect.INHERIT);\n+    }\n+  }\n+  \n+  private void runImpl(Class<? extends LockFactory> impl) throws Exception {\n+    // make sure we are in clean state:\n+    LockVerifyServer.PORT.set(-1);\n+    \n+    final int clients = 2;\n+    final String host = \"127.0.0.1\";\n+    final int delay = 1;\n+    final int rounds = (LuceneTestCase.TEST_NIGHTLY ? 30000 : 500) * LuceneTestCase.RANDOM_MULTIPLIER;\n+    \n+    final Path dir = LuceneTestCase.createTempDir(impl.getSimpleName());\n+    \n+    // create the LockVerifyServer in a separate thread\n+    final ExecutorService pool = Executors.newSingleThreadExecutor(new NamedThreadFactory(\"lockfactory-tester-\"));\n+    try {\n+      pool.submit(() -> {\n+        LockVerifyServer.main(host, Integer.toString(clients));\n+        return (Void) null;\n+      });\n+      \n+      // wait for it to boot up\n+      int port;\n+      while ((port = LockVerifyServer.PORT.get()) == -1) {\n+        Thread.sleep(100L);\n+      }\n+      \n+      // spawn clients as separate Java processes\n+      final List<Process> processes = new ArrayList<>();\n+      for (int i = 0; i < clients; i++) {\n+        processes.add(applyRedirection(new ProcessBuilder(\n+            Paths.get(System.getProperty(\"java.home\"), \"bin\", \"java\").toString(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNjU2Mg=="}, "originalCommit": {"oid": "e3a0dbb462707f907362aed76a5a45a738a40f54"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDIyNzg5OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/test/org/apache/lucene/store/TestLockFactoriesMultiJVM.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODozMDo1MlrOHOpMhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMDoxMzoxMlrOHOsb0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNzA2Mg==", "bodyText": "I would maybe mark this as belonging to Slow group? Just a thought.", "url": "https://github.com/apache/lucene-solr/pull/1842#discussion_r485117062", "createdAt": "2020-09-08T18:30:52Z", "author": {"login": "dweiss"}, "path": "lucene/core/src/test/org/apache/lucene/store/TestLockFactoriesMultiJVM.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.store;\n+\n+import java.lang.ProcessBuilder.Redirect;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.lucene.util.LuceneTestCase;\n+import org.apache.lucene.util.NamedThreadFactory;\n+import org.apache.lucene.util.SuppressForbidden;\n+\n+public class TestLockFactoriesMultiJVM extends LuceneTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3a0dbb462707f907362aed76a5a45a738a40f54"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEzODQ2OQ==", "bodyText": "FYI I ran it locally on a 2-core laptop. The tests are a bit slow but not the slowest in lucene-core.\nThe slowest tests (exceeding 500 ms) during this run:\n2.76s TestIndexWriter.testMaxCompletedSequenceNumber (:lucene:core)\n1.96s TestNRTCachingDirectory.testNRTAndCommit (:lucene:core)\n1.69s TestIndexWriter.testThreadInterruptDeadlock (:lucene:core)\n1.60s TestShardSearching.testSimple (:lucene:core)\n1.55s TestStandardAnalyzer.testLargePartiallyMatchingToken (:lucene:core)\n1.46s TestTieredMergePolicy.testSimulateAppendOnly (:lucene:core)\n1.32s TestLockFactoriesMultiJVM.testNativeFSLockFactory (:lucene:core)\n1.23s TestLockFactoriesMultiJVM.testSimpleFSLockFactory (:lucene:core)\n1.17s TestLevenshteinAutomata.testLev2 (:lucene:core)\n1.15s TestIndexSorting.testConcurrentUpdates (:lucene:core)", "url": "https://github.com/apache/lucene-solr/pull/1842#discussion_r485138469", "createdAt": "2020-09-08T19:11:09Z", "author": {"login": "rmuir"}, "path": "lucene/core/src/test/org/apache/lucene/store/TestLockFactoriesMultiJVM.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.store;\n+\n+import java.lang.ProcessBuilder.Redirect;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.lucene.util.LuceneTestCase;\n+import org.apache.lucene.util.NamedThreadFactory;\n+import org.apache.lucene.util.SuppressForbidden;\n+\n+public class TestLockFactoriesMultiJVM extends LuceneTestCase {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNzA2Mg=="}, "originalCommit": {"oid": "e3a0dbb462707f907362aed76a5a45a738a40f54"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE3MDEzMA==", "bodyText": "It will be sligtly faster soon, but can be tuned. But marking it as @Slow is a bad idea because this is a very important test! Especially to collect information from users, if it really works everywhere.\nTo really do extensive testing do -Dtests.nightly=true, then it runs about 2 minutes.", "url": "https://github.com/apache/lucene-solr/pull/1842#discussion_r485170130", "createdAt": "2020-09-08T20:13:12Z", "author": {"login": "uschindler"}, "path": "lucene/core/src/test/org/apache/lucene/store/TestLockFactoriesMultiJVM.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.store;\n+\n+import java.lang.ProcessBuilder.Redirect;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.lucene.util.LuceneTestCase;\n+import org.apache.lucene.util.NamedThreadFactory;\n+import org.apache.lucene.util.SuppressForbidden;\n+\n+public class TestLockFactoriesMultiJVM extends LuceneTestCase {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNzA2Mg=="}, "originalCommit": {"oid": "e3a0dbb462707f907362aed76a5a45a738a40f54"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDI0NTU0OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/test/org/apache/lucene/store/TestLockFactoriesMultiJVM.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODozNTo1MVrOHOpW3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMDoyMzowOFrOHOsvbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExOTcwOQ==", "bodyText": "I think we should absolutely try to clean up forked processes in case something goes wrong (even if it's an internal suite timeout!) - regardless of the outcome of the test. I'd do a run over the process list in finally and if it's still in a live state, kill it.\nhttps://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Process.html#destroyForcibly()\nAnother thought is maybe to use a list of completable futures to wait for all forked processes instead of counting them?\nhttps://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Process.html#onExit()\nThese are details; the cleanup is kind of important.", "url": "https://github.com/apache/lucene-solr/pull/1842#discussion_r485119709", "createdAt": "2020-09-08T18:35:51Z", "author": {"login": "dweiss"}, "path": "lucene/core/src/test/org/apache/lucene/store/TestLockFactoriesMultiJVM.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.store;\n+\n+import java.lang.ProcessBuilder.Redirect;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.lucene.util.LuceneTestCase;\n+import org.apache.lucene.util.NamedThreadFactory;\n+import org.apache.lucene.util.SuppressForbidden;\n+\n+public class TestLockFactoriesMultiJVM extends LuceneTestCase {\n+  \n+  @SuppressForbidden(reason = \"ProcessBuilder only allows to redirect to java.io.File\")\n+  private static final ProcessBuilder applyRedirection(ProcessBuilder pb, int client, Path dir) {\n+    if (LuceneTestCase.VERBOSE) {\n+      return pb.inheritIO();\n+    } else {\n+      return pb\n+        .redirectError(dir.resolve(\"err-\" + client + \".txt\").toFile())\n+        .redirectOutput(dir.resolve(\"out-\" + client + \".txt\").toFile())\n+        .redirectInput(Redirect.INHERIT);\n+    }\n+  }\n+  \n+  private void runImpl(Class<? extends LockFactory> impl) throws Exception {\n+    // make sure we are in clean state:\n+    LockVerifyServer.PORT.set(-1);\n+    \n+    final int clients = 2;\n+    final String host = \"127.0.0.1\";\n+    final int delay = 1;\n+    final int rounds = (LuceneTestCase.TEST_NIGHTLY ? 30000 : 500) * LuceneTestCase.RANDOM_MULTIPLIER;\n+    \n+    final Path dir = LuceneTestCase.createTempDir(impl.getSimpleName());\n+    \n+    // create the LockVerifyServer in a separate thread\n+    final ExecutorService pool = Executors.newSingleThreadExecutor(new NamedThreadFactory(\"lockfactory-tester-\"));\n+    try {\n+      pool.submit(() -> {\n+        LockVerifyServer.main(host, Integer.toString(clients));\n+        return (Void) null;\n+      });\n+      \n+      // wait for it to boot up\n+      int port;\n+      while ((port = LockVerifyServer.PORT.get()) == -1) {\n+        Thread.sleep(100L);\n+      }\n+      \n+      // spawn clients as separate Java processes\n+      final List<Process> processes = new ArrayList<>();\n+      for (int i = 0; i < clients; i++) {\n+        processes.add(applyRedirection(new ProcessBuilder(\n+            Paths.get(System.getProperty(\"java.home\"), \"bin\", \"java\").toString(),\n+            \"-cp\",\n+            System.getProperty(\"java.class.path\"),\n+            LockStressTest.class.getName(),\n+            Integer.toString(i),\n+            host,\n+            Integer.toString(port),\n+            impl.getName(),\n+            dir.toString(),\n+            Integer.toString(delay),\n+            Integer.toString(rounds)\n+          ), i, dir).start());\n+      }\n+      \n+      // wait for all processes to exit\n+      int exited = 0;\n+      while (exited < clients) {\n+        for (Process p : processes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3a0dbb462707f907362aed76a5a45a738a40f54"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE3MDg2Nw==", "bodyText": "I copied this code from another test doing similar stuff (crushing JVM). I will work change it a bit.", "url": "https://github.com/apache/lucene-solr/pull/1842#discussion_r485170867", "createdAt": "2020-09-08T20:14:41Z", "author": {"login": "uschindler"}, "path": "lucene/core/src/test/org/apache/lucene/store/TestLockFactoriesMultiJVM.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.store;\n+\n+import java.lang.ProcessBuilder.Redirect;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.lucene.util.LuceneTestCase;\n+import org.apache.lucene.util.NamedThreadFactory;\n+import org.apache.lucene.util.SuppressForbidden;\n+\n+public class TestLockFactoriesMultiJVM extends LuceneTestCase {\n+  \n+  @SuppressForbidden(reason = \"ProcessBuilder only allows to redirect to java.io.File\")\n+  private static final ProcessBuilder applyRedirection(ProcessBuilder pb, int client, Path dir) {\n+    if (LuceneTestCase.VERBOSE) {\n+      return pb.inheritIO();\n+    } else {\n+      return pb\n+        .redirectError(dir.resolve(\"err-\" + client + \".txt\").toFile())\n+        .redirectOutput(dir.resolve(\"out-\" + client + \".txt\").toFile())\n+        .redirectInput(Redirect.INHERIT);\n+    }\n+  }\n+  \n+  private void runImpl(Class<? extends LockFactory> impl) throws Exception {\n+    // make sure we are in clean state:\n+    LockVerifyServer.PORT.set(-1);\n+    \n+    final int clients = 2;\n+    final String host = \"127.0.0.1\";\n+    final int delay = 1;\n+    final int rounds = (LuceneTestCase.TEST_NIGHTLY ? 30000 : 500) * LuceneTestCase.RANDOM_MULTIPLIER;\n+    \n+    final Path dir = LuceneTestCase.createTempDir(impl.getSimpleName());\n+    \n+    // create the LockVerifyServer in a separate thread\n+    final ExecutorService pool = Executors.newSingleThreadExecutor(new NamedThreadFactory(\"lockfactory-tester-\"));\n+    try {\n+      pool.submit(() -> {\n+        LockVerifyServer.main(host, Integer.toString(clients));\n+        return (Void) null;\n+      });\n+      \n+      // wait for it to boot up\n+      int port;\n+      while ((port = LockVerifyServer.PORT.get()) == -1) {\n+        Thread.sleep(100L);\n+      }\n+      \n+      // spawn clients as separate Java processes\n+      final List<Process> processes = new ArrayList<>();\n+      for (int i = 0; i < clients; i++) {\n+        processes.add(applyRedirection(new ProcessBuilder(\n+            Paths.get(System.getProperty(\"java.home\"), \"bin\", \"java\").toString(),\n+            \"-cp\",\n+            System.getProperty(\"java.class.path\"),\n+            LockStressTest.class.getName(),\n+            Integer.toString(i),\n+            host,\n+            Integer.toString(port),\n+            impl.getName(),\n+            dir.toString(),\n+            Integer.toString(delay),\n+            Integer.toString(rounds)\n+          ), i, dir).start());\n+      }\n+      \n+      // wait for all processes to exit\n+      int exited = 0;\n+      while (exited < clients) {\n+        for (Process p : processes) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExOTcwOQ=="}, "originalCommit": {"oid": "e3a0dbb462707f907362aed76a5a45a738a40f54"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE3NTE0OA==", "bodyText": "onExit is from Java 9 (so wasn't available). I vaguely remember destroyForcibly didn't work as expected if it forked processes of its own (only killed the forked process, not its entire hierarchy) -- we have wrappers that take care of that (because we use process forking extensively in integration tests). From Java 11 on you can enumerate the hierarchy and kill it manually.\nhttps://github.com/carrotsearch/procfork/blob/master/src/main/java/com/carrotsearch/procfork/ForkedProcess.java#L92-L93", "url": "https://github.com/apache/lucene-solr/pull/1842#discussion_r485175148", "createdAt": "2020-09-08T20:23:08Z", "author": {"login": "dweiss"}, "path": "lucene/core/src/test/org/apache/lucene/store/TestLockFactoriesMultiJVM.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.store;\n+\n+import java.lang.ProcessBuilder.Redirect;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.lucene.util.LuceneTestCase;\n+import org.apache.lucene.util.NamedThreadFactory;\n+import org.apache.lucene.util.SuppressForbidden;\n+\n+public class TestLockFactoriesMultiJVM extends LuceneTestCase {\n+  \n+  @SuppressForbidden(reason = \"ProcessBuilder only allows to redirect to java.io.File\")\n+  private static final ProcessBuilder applyRedirection(ProcessBuilder pb, int client, Path dir) {\n+    if (LuceneTestCase.VERBOSE) {\n+      return pb.inheritIO();\n+    } else {\n+      return pb\n+        .redirectError(dir.resolve(\"err-\" + client + \".txt\").toFile())\n+        .redirectOutput(dir.resolve(\"out-\" + client + \".txt\").toFile())\n+        .redirectInput(Redirect.INHERIT);\n+    }\n+  }\n+  \n+  private void runImpl(Class<? extends LockFactory> impl) throws Exception {\n+    // make sure we are in clean state:\n+    LockVerifyServer.PORT.set(-1);\n+    \n+    final int clients = 2;\n+    final String host = \"127.0.0.1\";\n+    final int delay = 1;\n+    final int rounds = (LuceneTestCase.TEST_NIGHTLY ? 30000 : 500) * LuceneTestCase.RANDOM_MULTIPLIER;\n+    \n+    final Path dir = LuceneTestCase.createTempDir(impl.getSimpleName());\n+    \n+    // create the LockVerifyServer in a separate thread\n+    final ExecutorService pool = Executors.newSingleThreadExecutor(new NamedThreadFactory(\"lockfactory-tester-\"));\n+    try {\n+      pool.submit(() -> {\n+        LockVerifyServer.main(host, Integer.toString(clients));\n+        return (Void) null;\n+      });\n+      \n+      // wait for it to boot up\n+      int port;\n+      while ((port = LockVerifyServer.PORT.get()) == -1) {\n+        Thread.sleep(100L);\n+      }\n+      \n+      // spawn clients as separate Java processes\n+      final List<Process> processes = new ArrayList<>();\n+      for (int i = 0; i < clients; i++) {\n+        processes.add(applyRedirection(new ProcessBuilder(\n+            Paths.get(System.getProperty(\"java.home\"), \"bin\", \"java\").toString(),\n+            \"-cp\",\n+            System.getProperty(\"java.class.path\"),\n+            LockStressTest.class.getName(),\n+            Integer.toString(i),\n+            host,\n+            Integer.toString(port),\n+            impl.getName(),\n+            dir.toString(),\n+            Integer.toString(delay),\n+            Integer.toString(rounds)\n+          ), i, dir).start());\n+      }\n+      \n+      // wait for all processes to exit\n+      int exited = 0;\n+      while (exited < clients) {\n+        for (Process p : processes) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExOTcwOQ=="}, "originalCommit": {"oid": "e3a0dbb462707f907362aed76a5a45a738a40f54"}, "originalPosition": 92}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1194, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}