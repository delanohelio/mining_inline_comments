{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1NDQ3MTk3", "number": 1585, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTowMjo0OVrOEGG4-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzo1Mzo0NlrOEGXEnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODM5ODAyOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/MergePolicy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTowMjo0OVrOGktEAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDoxODo1NVrOGlIAWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE0MDIyNg==", "bodyText": "What I learned today: CompletableFuture.allOf(....) -- cool, thanks!  So elegant.\nLet me try and return the favor:\nYou can go directly to an array, avoiding toList:\nCompletableFuture<Void> future = CompletableFuture.allOf(merges.stream()\n            .map(m -> m.completable).toArray(CompletableFuture<?>[]::new));\n\nBTW IntelliJ pointed this out and had an automatic replacement when I hovered my cursor over \"collect\".", "url": "https://github.com/apache/lucene-solr/pull/1585#discussion_r441140226", "createdAt": "2020-06-16T21:02:49Z", "author": {"login": "dsmiley"}, "path": "lucene/core/src/java/org/apache/lucene/index/MergePolicy.java", "diffHunk": "@@ -399,6 +427,23 @@ public String segString(Directory dir) {\n       }\n       return b.toString();\n     }\n+\n+    /**\n+     * Waits if necessary for at most the given time for all merges.\n+     */\n+    boolean await(long timeout, TimeUnit unit) {\n+      try {\n+        CompletableFuture<Void> future = CompletableFuture.allOf(merges.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6516ef4e24320bf352d0eed59f5a72d1e0843ab"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU4MTY1OQ==", "bodyText": "done thanks", "url": "https://github.com/apache/lucene-solr/pull/1585#discussion_r441581659", "createdAt": "2020-06-17T14:18:55Z", "author": {"login": "s1monw"}, "path": "lucene/core/src/java/org/apache/lucene/index/MergePolicy.java", "diffHunk": "@@ -399,6 +427,23 @@ public String segString(Directory dir) {\n       }\n       return b.toString();\n     }\n+\n+    /**\n+     * Waits if necessary for at most the given time for all merges.\n+     */\n+    boolean await(long timeout, TimeUnit unit) {\n+      try {\n+        CompletableFuture<Void> future = CompletableFuture.allOf(merges.stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE0MDIyNg=="}, "originalCommit": {"oid": "c6516ef4e24320bf352d0eed59f5a72d1e0843ab"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODQ0Njg4OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/MergePolicy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMToxODo0MlrOGktitQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDoxODo0OFrOGlH_-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE0ODA4NQ==", "bodyText": "In my change, I remember I originally tried handling the InterruptedException while waiting for the CountDownLatch in a similar way, but it caused an intermittent test failure (in TestIndexWriterWithThreads, maybe?) You might run into the same test failure once you start calling this await method from within IndexWriter.\nI was able to get the test passing by rethrowing it wrapped in a ThreadInterruptedException.", "url": "https://github.com/apache/lucene-solr/pull/1585#discussion_r441148085", "createdAt": "2020-06-16T21:18:42Z", "author": {"login": "msfroh"}, "path": "lucene/core/src/java/org/apache/lucene/index/MergePolicy.java", "diffHunk": "@@ -399,6 +427,23 @@ public String segString(Directory dir) {\n       }\n       return b.toString();\n     }\n+\n+    /**\n+     * Waits if necessary for at most the given time for all merges.\n+     */\n+    boolean await(long timeout, TimeUnit unit) {\n+      try {\n+        CompletableFuture<Void> future = CompletableFuture.allOf(merges.stream()\n+            .map(m -> m.completable).collect(Collectors.toList()).toArray(new CompletableFuture<?>[0]));\n+        future.get(timeout, unit);\n+        return true;\n+      } catch (InterruptedException e) {\n+        Thread.interrupted();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6516ef4e24320bf352d0eed59f5a72d1e0843ab"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU4MTU2MA==", "bodyText": "done", "url": "https://github.com/apache/lucene-solr/pull/1585#discussion_r441581560", "createdAt": "2020-06-17T14:18:48Z", "author": {"login": "s1monw"}, "path": "lucene/core/src/java/org/apache/lucene/index/MergePolicy.java", "diffHunk": "@@ -399,6 +427,23 @@ public String segString(Directory dir) {\n       }\n       return b.toString();\n     }\n+\n+    /**\n+     * Waits if necessary for at most the given time for all merges.\n+     */\n+    boolean await(long timeout, TimeUnit unit) {\n+      try {\n+        CompletableFuture<Void> future = CompletableFuture.allOf(merges.stream()\n+            .map(m -> m.completable).collect(Collectors.toList()).toArray(new CompletableFuture<?>[0]));\n+        future.get(timeout, unit);\n+        return true;\n+      } catch (InterruptedException e) {\n+        Thread.interrupted();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE0ODA4NQ=="}, "originalCommit": {"oid": "c6516ef4e24320bf352d0eed59f5a72d1e0843ab"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODU4NjY5OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMjowOTo0OFrOGku5kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDoxODo0M1rOGlH_rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE3MDMyMA==", "bodyText": "how about some spaces around the operator==?", "url": "https://github.com/apache/lucene-solr/pull/1585#discussion_r441170320", "createdAt": "2020-06-16T22:09:48Z", "author": {"login": "msokolov"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -4289,7 +4287,7 @@ private synchronized void mergeFinish(MergePolicy.OneMerge merge) {\n   @SuppressWarnings(\"try\")\n   private synchronized void closeMergeReaders(MergePolicy.OneMerge merge, boolean suppressExceptions) throws IOException {\n     final boolean drop = suppressExceptions == false;\n-    try (Closeable finalizer = merge::mergeFinished) {\n+    try (Closeable finalizer = () -> merge.mergeFinished(suppressExceptions==false)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6516ef4e24320bf352d0eed59f5a72d1e0843ab"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU4MTQ4Nw==", "bodyText": "done", "url": "https://github.com/apache/lucene-solr/pull/1585#discussion_r441581487", "createdAt": "2020-06-17T14:18:43Z", "author": {"login": "s1monw"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -4289,7 +4287,7 @@ private synchronized void mergeFinish(MergePolicy.OneMerge merge) {\n   @SuppressWarnings(\"try\")\n   private synchronized void closeMergeReaders(MergePolicy.OneMerge merge, boolean suppressExceptions) throws IOException {\n     final boolean drop = suppressExceptions == false;\n-    try (Closeable finalizer = merge::mergeFinished) {\n+    try (Closeable finalizer = () -> merge.mergeFinished(suppressExceptions==false)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE3MDMyMA=="}, "originalCommit": {"oid": "c6516ef4e24320bf352d0eed59f5a72d1e0843ab"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTAyNjQ1OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/MergePolicy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzo0ODoyNlrOGlGoLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzo0ODoyNlrOGlGoLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU1OTA4NQ==", "bodyText": "Maybe add javadoc about the lack of thread safety here?  I.e. this could return false and shortly thereafter it becomes true.", "url": "https://github.com/apache/lucene-solr/pull/1585#discussion_r441559085", "createdAt": "2020-06-17T13:48:26Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/MergePolicy.java", "diffHunk": "@@ -362,6 +366,30 @@ public void checkAborted() throws MergeAbortedException {\n     public OneMergeProgress getMergeProgress() {\n       return mergeProgress;\n     }\n+\n+    /**\n+     * Waits for this merge to be completed\n+     * @return true if the merge finished within the specified timeout\n+     */\n+    boolean await(long timeout, TimeUnit timeUnit) {\n+      try {\n+        completable.get(timeout, timeUnit);\n+        return true;\n+      } catch (InterruptedException e) {\n+        Thread.interrupted();\n+        return false;\n+      } catch (ExecutionException | TimeoutException e) {\n+        return false;\n+      }\n+    }\n+\n+    boolean isDone() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6516ef4e24320bf352d0eed59f5a72d1e0843ab"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTAyNjk4OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/MergePolicy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzo0ODozNVrOGlGokw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzo0ODozNVrOGlGokw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU1OTE4Nw==", "bodyText": "Javadoc here too?", "url": "https://github.com/apache/lucene-solr/pull/1585#discussion_r441559187", "createdAt": "2020-06-17T13:48:35Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/MergePolicy.java", "diffHunk": "@@ -362,6 +366,30 @@ public void checkAborted() throws MergeAbortedException {\n     public OneMergeProgress getMergeProgress() {\n       return mergeProgress;\n     }\n+\n+    /**\n+     * Waits for this merge to be completed\n+     * @return true if the merge finished within the specified timeout\n+     */\n+    boolean await(long timeout, TimeUnit timeUnit) {\n+      try {\n+        completable.get(timeout, timeUnit);\n+        return true;\n+      } catch (InterruptedException e) {\n+        Thread.interrupted();\n+        return false;\n+      } catch (ExecutionException | TimeoutException e) {\n+        return false;\n+      }\n+    }\n+\n+    boolean isDone() {\n+      return completable.isDone();\n+    }\n+\n+    boolean isCommitted() {\n+      return completable.getNow(Boolean.FALSE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6516ef4e24320bf352d0eed59f5a72d1e0843ab"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTAyODgxOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/MergePolicy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzo0OTowNFrOGlGp1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzo0OTowNFrOGlGp1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU1OTUwOQ==", "bodyText": "Could we rename the variable to completed or maybe mergeCompleted?", "url": "https://github.com/apache/lucene-solr/pull/1585#discussion_r441559509", "createdAt": "2020-06-17T13:49:04Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/MergePolicy.java", "diffHunk": "@@ -196,6 +200,7 @@ final void setMergeThread(Thread owner) {\n    *\n    * @lucene.experimental */\n   public static class OneMerge {\n+    private final CompletableFuture<Boolean> completable = new CompletableFuture<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6516ef4e24320bf352d0eed59f5a72d1e0843ab"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTA0MjAxOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/MergePolicy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzo1MjowOVrOGlGyvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDoxMTowMVrOGlHplA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU2MTc4OA==", "bodyText": "Maybe we should (later, in dedicated PR) pull this out into its own java source?", "url": "https://github.com/apache/lucene-solr/pull/1585#discussion_r441561788", "createdAt": "2020-06-17T13:52:09Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/MergePolicy.java", "diffHunk": "@@ -196,6 +200,7 @@ final void setMergeThread(Thread owner) {\n    *\n    * @lucene.experimental */\n   public static class OneMerge {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6516ef4e24320bf352d0eed59f5a72d1e0843ab"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU3NTgyOA==", "bodyText": "yeah I want to do that anyway", "url": "https://github.com/apache/lucene-solr/pull/1585#discussion_r441575828", "createdAt": "2020-06-17T14:11:01Z", "author": {"login": "s1monw"}, "path": "lucene/core/src/java/org/apache/lucene/index/MergePolicy.java", "diffHunk": "@@ -196,6 +200,7 @@ final void setMergeThread(Thread owner) {\n    *\n    * @lucene.experimental */\n   public static class OneMerge {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU2MTc4OA=="}, "originalCommit": {"oid": "c6516ef4e24320bf352d0eed59f5a72d1e0843ab"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTA0OTI3OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/MergePolicy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzo1Mzo0N1rOGlG3cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzo1Mzo0N1rOGlG3cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU2Mjk5NQ==", "bodyText": "Maybe rename to isCompleted?  committed is overloaded term -- could try to mean its files got fsync'd :)", "url": "https://github.com/apache/lucene-solr/pull/1585#discussion_r441562995", "createdAt": "2020-06-17T13:53:47Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/MergePolicy.java", "diffHunk": "@@ -362,6 +366,30 @@ public void checkAborted() throws MergeAbortedException {\n     public OneMergeProgress getMergeProgress() {\n       return mergeProgress;\n     }\n+\n+    /**\n+     * Waits for this merge to be completed\n+     * @return true if the merge finished within the specified timeout\n+     */\n+    boolean await(long timeout, TimeUnit timeUnit) {\n+      try {\n+        completable.get(timeout, timeUnit);\n+        return true;\n+      } catch (InterruptedException e) {\n+        Thread.interrupted();\n+        return false;\n+      } catch (ExecutionException | TimeoutException e) {\n+        return false;\n+      }\n+    }\n+\n+    boolean isDone() {\n+      return completable.isDone();\n+    }\n+\n+    boolean isCommitted() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6516ef4e24320bf352d0eed59f5a72d1e0843ab"}, "originalPosition": 93}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1486, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}