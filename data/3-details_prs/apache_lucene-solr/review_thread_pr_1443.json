{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2OTIwMjYy", "number": 1443, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDo0OToyN1rOD0sOtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDo1MToyOFrOD0sR6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NTc3MjA0OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDo0OToyN1rOGJv_Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDo0OToyN1rOGJv_Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg3NjU5NQ==", "bodyText": "Wow, what an exotic sequence of events :)  Great catch!\ns/non/none\nadd  time at the end?", "url": "https://github.com/apache/lucene-solr/pull/1443#discussion_r412876595", "createdAt": "2020-04-22T10:49:27Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler.java", "diffHunk": "@@ -657,4 +659,88 @@ protected void doStall() {\n \n     assertFalse(failed.get());\n   }\n+\n+  /*\n+   * This test tries to produce 2 merges running concurrently with 2 segments per merge. While these\n+   * merges run we kick off a forceMerge that puts a pending merge in the queue but waits for things to happen.\n+   * While we do this we reduce maxMergeCount to 1. If concurrency in CMS is not right the forceMerge will wait forever\n+   * since non of the currently running merges picks up the pending merge. This test fails every", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a12873ff90fcc7e2735401c599e278ef092e5de1"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NTc3NjM0OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDo1MDozNlrOGJwBxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMjoxNzoxOVrOGJzQGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg3NzI1Mw==", "bodyText": "Sneaky (using InfoStream to tickle things)!", "url": "https://github.com/apache/lucene-solr/pull/1443#discussion_r412877253", "createdAt": "2020-04-22T10:50:36Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler.java", "diffHunk": "@@ -657,4 +659,88 @@ protected void doStall() {\n \n     assertFalse(failed.get());\n   }\n+\n+  /*\n+   * This test tries to produce 2 merges running concurrently with 2 segments per merge. While these\n+   * merges run we kick off a forceMerge that puts a pending merge in the queue but waits for things to happen.\n+   * While we do this we reduce maxMergeCount to 1. If concurrency in CMS is not right the forceMerge will wait forever\n+   * since non of the currently running merges picks up the pending merge. This test fails every\n+   */\n+  public void testChangeMaxMergeCountyWhileForceMerge() throws IOException, InterruptedException {\n+    int numIters = TEST_NIGHTLY ? 100 : 10;\n+    for (int iters = 0; iters < numIters; iters++) {\n+      LogDocMergePolicy mp = new LogDocMergePolicy();\n+      mp.setMergeFactor(2);\n+      CountDownLatch forceMergeWaits = new CountDownLatch(1);\n+      CountDownLatch mergeThreadsStartAfterWait = new CountDownLatch(1);\n+      CountDownLatch mergeThreadsArrived = new CountDownLatch(2);\n+      InfoStream stream = new InfoStream() {\n+        @Override\n+        public void message(String component, String message) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a12873ff90fcc7e2735401c599e278ef092e5de1"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjkzMDA3NQ==", "bodyText": "yeah I take whatever I get in these cases :D", "url": "https://github.com/apache/lucene-solr/pull/1443#discussion_r412930075", "createdAt": "2020-04-22T12:17:19Z", "author": {"login": "s1monw"}, "path": "lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler.java", "diffHunk": "@@ -657,4 +659,88 @@ protected void doStall() {\n \n     assertFalse(failed.get());\n   }\n+\n+  /*\n+   * This test tries to produce 2 merges running concurrently with 2 segments per merge. While these\n+   * merges run we kick off a forceMerge that puts a pending merge in the queue but waits for things to happen.\n+   * While we do this we reduce maxMergeCount to 1. If concurrency in CMS is not right the forceMerge will wait forever\n+   * since non of the currently running merges picks up the pending merge. This test fails every\n+   */\n+  public void testChangeMaxMergeCountyWhileForceMerge() throws IOException, InterruptedException {\n+    int numIters = TEST_NIGHTLY ? 100 : 10;\n+    for (int iters = 0; iters < numIters; iters++) {\n+      LogDocMergePolicy mp = new LogDocMergePolicy();\n+      mp.setMergeFactor(2);\n+      CountDownLatch forceMergeWaits = new CountDownLatch(1);\n+      CountDownLatch mergeThreadsStartAfterWait = new CountDownLatch(1);\n+      CountDownLatch mergeThreadsArrived = new CountDownLatch(2);\n+      InfoStream stream = new InfoStream() {\n+        @Override\n+        public void message(String component, String message) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg3NzI1Mw=="}, "originalCommit": {"oid": "a12873ff90fcc7e2735401c599e278ef092e5de1"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NTc4MDI3OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDo1MToyOFrOGJwEAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDo1MToyOFrOGJwEAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg3NzgyNw==", "bodyText": "s/synched/sync'd?", "url": "https://github.com/apache/lucene-solr/pull/1443#discussion_r412877827", "createdAt": "2020-04-22T10:51:28Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java", "diffHunk": "@@ -633,6 +634,27 @@ protected synchronized MergeThread getMergeThread(IndexWriter writer, OneMerge m\n     return thread;\n   }\n \n+  synchronized void runOnMergeFinished(IndexWriter writer) {\n+    // the merge call as well as the merge thread handling in the finally\n+    // block must be synched on CMS otherwise stalling decisions might cause", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a12873ff90fcc7e2735401c599e278ef092e5de1"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 783, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}