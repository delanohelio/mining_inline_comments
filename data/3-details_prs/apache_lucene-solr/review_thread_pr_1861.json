{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg1NTkzNDc3", "number": 1861, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxOToxOTo0N1rOEjvGvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxOTozMjo0MVrOEjvicg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTA3Mzg5OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxOToxOTo0N1rOHSQp0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzo0MDozM1rOHSxZxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkwOTI2Ng==", "bodyText": "If you are overwriting an untrusted configSet with a trusted configSet, I din't think that will get updated here. I guess you would only want it if CLEANUP is true, since only then are you sure that all of the content is trusted.\nSo doing it in that if statement would probably work.", "url": "https://github.com/apache/lucene-solr/pull/1861#discussion_r488909266", "createdAt": "2020-09-15T19:19:47Z", "author": {"login": "HoustonPutman"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler.java", "diffHunk": "@@ -170,21 +176,90 @@ private void handleConfigUploadRequest(SolrQueryRequest req, SolrQueryResponse r\n \n     // Create a node for the configuration in zookeeper\n     boolean trusted = getTrusted(req);\n-    zkClient.makePath(configPathInZk, (\"{\\\"trusted\\\": \" + Boolean.toString(trusted) + \"}\").\n-        getBytes(StandardCharsets.UTF_8), true);\n+    Set<String> filesToDelete = Collections.emptySet();\n+    if (overwritesExisting) {\n+      if (!trusted) {\n+        ensureOverwritingUntrustedConfigSet(zkClient, configPathInZk);\n+      }\n+      if (req.getParams().getBool(ConfigSetParams.CLEANUP, false)) {\n+        filesToDelete = getAllConfigsetFiles(zkClient, configPathInZk);\n+      }\n+    } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94649b931674346932096d71c5b9944074826500"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTAwMTU3Mg==", "bodyText": "As it currently stands, an overwrite never updates the \"trusted\" flag, if it wasn't trusted before, it'll continue to be untrusted after the upgrade. If it was trusted, only an authenticated request would be allowed. I see your point that if \"cleanup\" is set to \"true\", an authenticated request could turn the configset to trusted, is that what you are suggesting?", "url": "https://github.com/apache/lucene-solr/pull/1861#discussion_r489001572", "createdAt": "2020-09-15T21:52:35Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler.java", "diffHunk": "@@ -170,21 +176,90 @@ private void handleConfigUploadRequest(SolrQueryRequest req, SolrQueryResponse r\n \n     // Create a node for the configuration in zookeeper\n     boolean trusted = getTrusted(req);\n-    zkClient.makePath(configPathInZk, (\"{\\\"trusted\\\": \" + Boolean.toString(trusted) + \"}\").\n-        getBytes(StandardCharsets.UTF_8), true);\n+    Set<String> filesToDelete = Collections.emptySet();\n+    if (overwritesExisting) {\n+      if (!trusted) {\n+        ensureOverwritingUntrustedConfigSet(zkClient, configPathInZk);\n+      }\n+      if (req.getParams().getBool(ConfigSetParams.CLEANUP, false)) {\n+        filesToDelete = getAllConfigsetFiles(zkClient, configPathInZk);\n+      }\n+    } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkwOTI2Ng=="}, "originalCommit": {"oid": "94649b931674346932096d71c5b9944074826500"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ0NTgzMA==", "bodyText": "Yeah, for example if you want to use plugins or something similar, I could see someone not using a trusted configSet at first, but then wanting to overwrite their configSet to be \"trusted\" to be able to use the plugins.\nI don't see why that shouldn't be possible, given that there's little difference security-wise between creating a new config set and overwriting w/ cleanup.", "url": "https://github.com/apache/lucene-solr/pull/1861#discussion_r489445830", "createdAt": "2020-09-16T13:40:33Z", "author": {"login": "HoustonPutman"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler.java", "diffHunk": "@@ -170,21 +176,90 @@ private void handleConfigUploadRequest(SolrQueryRequest req, SolrQueryResponse r\n \n     // Create a node for the configuration in zookeeper\n     boolean trusted = getTrusted(req);\n-    zkClient.makePath(configPathInZk, (\"{\\\"trusted\\\": \" + Boolean.toString(trusted) + \"}\").\n-        getBytes(StandardCharsets.UTF_8), true);\n+    Set<String> filesToDelete = Collections.emptySet();\n+    if (overwritesExisting) {\n+      if (!trusted) {\n+        ensureOverwritingUntrustedConfigSet(zkClient, configPathInZk);\n+      }\n+      if (req.getParams().getBool(ConfigSetParams.CLEANUP, false)) {\n+        filesToDelete = getAllConfigsetFiles(zkClient, configPathInZk);\n+      }\n+    } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkwOTI2Ng=="}, "originalCommit": {"oid": "94649b931674346932096d71c5b9944074826500"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTEwMTQ1OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxOToyNDo1MlrOHSQ6Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMDo1MjoyN1rOHVnJUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkxMzQ1NA==", "bodyText": "We might want to clear data that the znode has if it exists and has data.", "url": "https://github.com/apache/lucene-solr/pull/1861#discussion_r488913454", "createdAt": "2020-09-15T19:24:52Z", "author": {"login": "HoustonPutman"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler.java", "diffHunk": "@@ -170,21 +176,90 @@ private void handleConfigUploadRequest(SolrQueryRequest req, SolrQueryResponse r\n \n     // Create a node for the configuration in zookeeper\n     boolean trusted = getTrusted(req);\n-    zkClient.makePath(configPathInZk, (\"{\\\"trusted\\\": \" + Boolean.toString(trusted) + \"}\").\n-        getBytes(StandardCharsets.UTF_8), true);\n+    Set<String> filesToDelete = Collections.emptySet();\n+    if (overwritesExisting) {\n+      if (!trusted) {\n+        ensureOverwritingUntrustedConfigSet(zkClient, configPathInZk);\n+      }\n+      if (req.getParams().getBool(ConfigSetParams.CLEANUP, false)) {\n+        filesToDelete = getAllConfigsetFiles(zkClient, configPathInZk);\n+      }\n+    } else {\n+      zkClient.makePath(configPathInZk, (\"{\\\"trusted\\\": \" + Boolean.toString(trusted) + \"}\").\n+              getBytes(StandardCharsets.UTF_8), true);\n+    }\n \n     ZipInputStream zis = new ZipInputStream(inputStream, StandardCharsets.UTF_8);\n     ZipEntry zipEntry = null;\n     while ((zipEntry = zis.getNextEntry()) != null) {\n       String filePathInZk = configPathInZk + \"/\" + zipEntry.getName();\n+      if (filePathInZk.endsWith(\"/\")) {\n+        filesToDelete.remove(filePathInZk.substring(0, filePathInZk.length() -1));\n+      } else {\n+        filesToDelete.remove(filePathInZk);\n+      }\n       if (zipEntry.isDirectory()) {\n-        zkClient.makePath(filePathInZk, true);\n+        zkClient.makePath(filePathInZk, false,  true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94649b931674346932096d71c5b9944074826500"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTAwMTk4Mg==", "bodyText": "Can that ever happen in a configset?", "url": "https://github.com/apache/lucene-solr/pull/1861#discussion_r489001982", "createdAt": "2020-09-15T21:53:04Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler.java", "diffHunk": "@@ -170,21 +176,90 @@ private void handleConfigUploadRequest(SolrQueryRequest req, SolrQueryResponse r\n \n     // Create a node for the configuration in zookeeper\n     boolean trusted = getTrusted(req);\n-    zkClient.makePath(configPathInZk, (\"{\\\"trusted\\\": \" + Boolean.toString(trusted) + \"}\").\n-        getBytes(StandardCharsets.UTF_8), true);\n+    Set<String> filesToDelete = Collections.emptySet();\n+    if (overwritesExisting) {\n+      if (!trusted) {\n+        ensureOverwritingUntrustedConfigSet(zkClient, configPathInZk);\n+      }\n+      if (req.getParams().getBool(ConfigSetParams.CLEANUP, false)) {\n+        filesToDelete = getAllConfigsetFiles(zkClient, configPathInZk);\n+      }\n+    } else {\n+      zkClient.makePath(configPathInZk, (\"{\\\"trusted\\\": \" + Boolean.toString(trusted) + \"}\").\n+              getBytes(StandardCharsets.UTF_8), true);\n+    }\n \n     ZipInputStream zis = new ZipInputStream(inputStream, StandardCharsets.UTF_8);\n     ZipEntry zipEntry = null;\n     while ((zipEntry = zis.getNextEntry()) != null) {\n       String filePathInZk = configPathInZk + \"/\" + zipEntry.getName();\n+      if (filePathInZk.endsWith(\"/\")) {\n+        filesToDelete.remove(filePathInZk.substring(0, filePathInZk.length() -1));\n+      } else {\n+        filesToDelete.remove(filePathInZk);\n+      }\n       if (zipEntry.isDirectory()) {\n-        zkClient.makePath(filePathInZk, true);\n+        zkClient.makePath(filePathInZk, false,  true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkxMzQ1NA=="}, "originalCommit": {"oid": "94649b931674346932096d71c5b9944074826500"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ0NzUxNg==", "bodyText": "Not very likely, was just thinking about possibilities. It's probably not an issue 99.9% of times, so it likely doesn't need to be addressed.", "url": "https://github.com/apache/lucene-solr/pull/1861#discussion_r489447516", "createdAt": "2020-09-16T13:42:46Z", "author": {"login": "HoustonPutman"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler.java", "diffHunk": "@@ -170,21 +176,90 @@ private void handleConfigUploadRequest(SolrQueryRequest req, SolrQueryResponse r\n \n     // Create a node for the configuration in zookeeper\n     boolean trusted = getTrusted(req);\n-    zkClient.makePath(configPathInZk, (\"{\\\"trusted\\\": \" + Boolean.toString(trusted) + \"}\").\n-        getBytes(StandardCharsets.UTF_8), true);\n+    Set<String> filesToDelete = Collections.emptySet();\n+    if (overwritesExisting) {\n+      if (!trusted) {\n+        ensureOverwritingUntrustedConfigSet(zkClient, configPathInZk);\n+      }\n+      if (req.getParams().getBool(ConfigSetParams.CLEANUP, false)) {\n+        filesToDelete = getAllConfigsetFiles(zkClient, configPathInZk);\n+      }\n+    } else {\n+      zkClient.makePath(configPathInZk, (\"{\\\"trusted\\\": \" + Boolean.toString(trusted) + \"}\").\n+              getBytes(StandardCharsets.UTF_8), true);\n+    }\n \n     ZipInputStream zis = new ZipInputStream(inputStream, StandardCharsets.UTF_8);\n     ZipEntry zipEntry = null;\n     while ((zipEntry = zis.getNextEntry()) != null) {\n       String filePathInZk = configPathInZk + \"/\" + zipEntry.getName();\n+      if (filePathInZk.endsWith(\"/\")) {\n+        filesToDelete.remove(filePathInZk.substring(0, filePathInZk.length() -1));\n+      } else {\n+        filesToDelete.remove(filePathInZk);\n+      }\n       if (zipEntry.isDirectory()) {\n-        zkClient.makePath(filePathInZk, true);\n+        zkClient.makePath(filePathInZk, false,  true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkxMzQ1NA=="}, "originalCommit": {"oid": "94649b931674346932096d71c5b9944074826500"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyMzUwNw==", "bodyText": "Yes, I don't think this would be needed at this point. No API would set this, and no Solr component would read it. I guess the only case would be a custom component that writes and reads directly to ZooKeeper.", "url": "https://github.com/apache/lucene-solr/pull/1861#discussion_r492423507", "createdAt": "2020-09-22T00:52:27Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler.java", "diffHunk": "@@ -170,21 +176,90 @@ private void handleConfigUploadRequest(SolrQueryRequest req, SolrQueryResponse r\n \n     // Create a node for the configuration in zookeeper\n     boolean trusted = getTrusted(req);\n-    zkClient.makePath(configPathInZk, (\"{\\\"trusted\\\": \" + Boolean.toString(trusted) + \"}\").\n-        getBytes(StandardCharsets.UTF_8), true);\n+    Set<String> filesToDelete = Collections.emptySet();\n+    if (overwritesExisting) {\n+      if (!trusted) {\n+        ensureOverwritingUntrustedConfigSet(zkClient, configPathInZk);\n+      }\n+      if (req.getParams().getBool(ConfigSetParams.CLEANUP, false)) {\n+        filesToDelete = getAllConfigsetFiles(zkClient, configPathInZk);\n+      }\n+    } else {\n+      zkClient.makePath(configPathInZk, (\"{\\\"trusted\\\": \" + Boolean.toString(trusted) + \"}\").\n+              getBytes(StandardCharsets.UTF_8), true);\n+    }\n \n     ZipInputStream zis = new ZipInputStream(inputStream, StandardCharsets.UTF_8);\n     ZipEntry zipEntry = null;\n     while ((zipEntry = zis.getNextEntry()) != null) {\n       String filePathInZk = configPathInZk + \"/\" + zipEntry.getName();\n+      if (filePathInZk.endsWith(\"/\")) {\n+        filesToDelete.remove(filePathInZk.substring(0, filePathInZk.length() -1));\n+      } else {\n+        filesToDelete.remove(filePathInZk);\n+      }\n       if (zipEntry.isDirectory()) {\n-        zkClient.makePath(filePathInZk, true);\n+        zkClient.makePath(filePathInZk, false,  true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkxMzQ1NA=="}, "originalCommit": {"oid": "94649b931674346932096d71c5b9944074826500"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTEyMjk0OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxOToyODo0MVrOHSRG9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxOToyODo0MVrOHSRG9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkxNjcyNw==", "bodyText": "the new ZKMaintenanceUtils.ZKVisitory() { ... } can be replaced with files::add", "url": "https://github.com/apache/lucene-solr/pull/1861#discussion_r488916727", "createdAt": "2020-09-15T19:28:41Z", "author": {"login": "HoustonPutman"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler.java", "diffHunk": "@@ -170,21 +176,90 @@ private void handleConfigUploadRequest(SolrQueryRequest req, SolrQueryResponse r\n \n     // Create a node for the configuration in zookeeper\n     boolean trusted = getTrusted(req);\n-    zkClient.makePath(configPathInZk, (\"{\\\"trusted\\\": \" + Boolean.toString(trusted) + \"}\").\n-        getBytes(StandardCharsets.UTF_8), true);\n+    Set<String> filesToDelete = Collections.emptySet();\n+    if (overwritesExisting) {\n+      if (!trusted) {\n+        ensureOverwritingUntrustedConfigSet(zkClient, configPathInZk);\n+      }\n+      if (req.getParams().getBool(ConfigSetParams.CLEANUP, false)) {\n+        filesToDelete = getAllConfigsetFiles(zkClient, configPathInZk);\n+      }\n+    } else {\n+      zkClient.makePath(configPathInZk, (\"{\\\"trusted\\\": \" + Boolean.toString(trusted) + \"}\").\n+              getBytes(StandardCharsets.UTF_8), true);\n+    }\n \n     ZipInputStream zis = new ZipInputStream(inputStream, StandardCharsets.UTF_8);\n     ZipEntry zipEntry = null;\n     while ((zipEntry = zis.getNextEntry()) != null) {\n       String filePathInZk = configPathInZk + \"/\" + zipEntry.getName();\n+      if (filePathInZk.endsWith(\"/\")) {\n+        filesToDelete.remove(filePathInZk.substring(0, filePathInZk.length() -1));\n+      } else {\n+        filesToDelete.remove(filePathInZk);\n+      }\n       if (zipEntry.isDirectory()) {\n-        zkClient.makePath(filePathInZk, true);\n+        zkClient.makePath(filePathInZk, false,  true);\n       } else {\n         createZkNodeIfNotExistsAndSetData(zkClient, filePathInZk,\n             IOUtils.toByteArray(zis));\n       }\n     }\n     zis.close();\n+    deleteUnusedFiles(zkClient, filesToDelete);\n+  }\n+\n+  private void deleteUnusedFiles(SolrZkClient zkClient, Set<String> filesToDelete) throws InterruptedException, KeeperException {\n+    if (!filesToDelete.isEmpty()) {\n+      if (log.isInfoEnabled()) {\n+        log.info(\"Cleaning up {} unused files\", filesToDelete.size());\n+      }\n+      if (log.isDebugEnabled()) {\n+        log.debug(\"Cleaning up unused files: {}\", filesToDelete);\n+      }\n+      for (String f:filesToDelete) {\n+        try {\n+          zkClient.delete(f, -1, true);\n+        } catch (KeeperException.NoNodeException nne) {\n+        }\n+      }\n+    }\n+  }\n+\n+  private Set<String> getAllConfigsetFiles(SolrZkClient zkClient, String configPathInZk) throws KeeperException, InterruptedException {\n+    final Set<String> files = new HashSet<>();\n+    if (!configPathInZk.startsWith(ZkConfigManager.CONFIGS_ZKNODE + \"/\")) {\n+      throw new IllegalArgumentException(\"\\\"\" + configPathInZk + \"\\\" not recognized as a configset path\");\n+    }\n+    ZkMaintenanceUtils.traverseZkTree(zkClient, configPathInZk, ZkMaintenanceUtils.VISIT_ORDER.VISIT_POST, new ZkMaintenanceUtils.ZkVisitor() {\n+      @Override\n+      public void visit(String path) throws InterruptedException, KeeperException {\n+        files.add(path);\n+      }\n+    });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94649b931674346932096d71c5b9944074826500"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTE0NDgyOnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxOTozMjo0MVrOHSRUNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxOTozMjo0MVrOHSRUNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkyMDExNw==", "bodyText": "using getOrDefault(\"trusted\", false) would remove the need for the null check.", "url": "https://github.com/apache/lucene-solr/pull/1861#discussion_r488920117", "createdAt": "2020-09-15T19:32:41Z", "author": {"login": "HoustonPutman"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler.java", "diffHunk": "@@ -170,21 +176,90 @@ private void handleConfigUploadRequest(SolrQueryRequest req, SolrQueryResponse r\n \n     // Create a node for the configuration in zookeeper\n     boolean trusted = getTrusted(req);\n-    zkClient.makePath(configPathInZk, (\"{\\\"trusted\\\": \" + Boolean.toString(trusted) + \"}\").\n-        getBytes(StandardCharsets.UTF_8), true);\n+    Set<String> filesToDelete = Collections.emptySet();\n+    if (overwritesExisting) {\n+      if (!trusted) {\n+        ensureOverwritingUntrustedConfigSet(zkClient, configPathInZk);\n+      }\n+      if (req.getParams().getBool(ConfigSetParams.CLEANUP, false)) {\n+        filesToDelete = getAllConfigsetFiles(zkClient, configPathInZk);\n+      }\n+    } else {\n+      zkClient.makePath(configPathInZk, (\"{\\\"trusted\\\": \" + Boolean.toString(trusted) + \"}\").\n+              getBytes(StandardCharsets.UTF_8), true);\n+    }\n \n     ZipInputStream zis = new ZipInputStream(inputStream, StandardCharsets.UTF_8);\n     ZipEntry zipEntry = null;\n     while ((zipEntry = zis.getNextEntry()) != null) {\n       String filePathInZk = configPathInZk + \"/\" + zipEntry.getName();\n+      if (filePathInZk.endsWith(\"/\")) {\n+        filesToDelete.remove(filePathInZk.substring(0, filePathInZk.length() -1));\n+      } else {\n+        filesToDelete.remove(filePathInZk);\n+      }\n       if (zipEntry.isDirectory()) {\n-        zkClient.makePath(filePathInZk, true);\n+        zkClient.makePath(filePathInZk, false,  true);\n       } else {\n         createZkNodeIfNotExistsAndSetData(zkClient, filePathInZk,\n             IOUtils.toByteArray(zis));\n       }\n     }\n     zis.close();\n+    deleteUnusedFiles(zkClient, filesToDelete);\n+  }\n+\n+  private void deleteUnusedFiles(SolrZkClient zkClient, Set<String> filesToDelete) throws InterruptedException, KeeperException {\n+    if (!filesToDelete.isEmpty()) {\n+      if (log.isInfoEnabled()) {\n+        log.info(\"Cleaning up {} unused files\", filesToDelete.size());\n+      }\n+      if (log.isDebugEnabled()) {\n+        log.debug(\"Cleaning up unused files: {}\", filesToDelete);\n+      }\n+      for (String f:filesToDelete) {\n+        try {\n+          zkClient.delete(f, -1, true);\n+        } catch (KeeperException.NoNodeException nne) {\n+        }\n+      }\n+    }\n+  }\n+\n+  private Set<String> getAllConfigsetFiles(SolrZkClient zkClient, String configPathInZk) throws KeeperException, InterruptedException {\n+    final Set<String> files = new HashSet<>();\n+    if (!configPathInZk.startsWith(ZkConfigManager.CONFIGS_ZKNODE + \"/\")) {\n+      throw new IllegalArgumentException(\"\\\"\" + configPathInZk + \"\\\" not recognized as a configset path\");\n+    }\n+    ZkMaintenanceUtils.traverseZkTree(zkClient, configPathInZk, ZkMaintenanceUtils.VISIT_ORDER.VISIT_POST, new ZkMaintenanceUtils.ZkVisitor() {\n+      @Override\n+      public void visit(String path) throws InterruptedException, KeeperException {\n+        files.add(path);\n+      }\n+    });\n+    files.remove(configPathInZk);\n+    return files;\n+  }\n+\n+  /*\n+   * Fail if an untrusted request tries to update a trusted ConfigSet\n+   */\n+  private void ensureOverwritingUntrustedConfigSet(SolrZkClient zkClient, String configSetZkPath) {\n+    byte[] configSetNodeContent;\n+    try {\n+      configSetNodeContent = zkClient.getData(configSetZkPath, null, null, true);\n+    } catch (KeeperException e) {\n+      throw new SolrException(ErrorCode.SERVER_ERROR, \"Exception while fetching current configSet at \" + configSetZkPath, e);\n+    } catch (InterruptedException e) {\n+      Thread.currentThread().interrupt();\n+      throw new SolrException(ErrorCode.SERVER_ERROR, \"Interrupted while fetching current configSet at \" + configSetZkPath, e);\n+    }\n+    @SuppressWarnings(\"unchecked\")\n+    Map<Object, Object> contentMap = (Map<Object, Object>) Utils.fromJSON(configSetNodeContent);\n+    Boolean isCurrentlyTrusted = (Boolean) contentMap.get(\"trusted\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94649b931674346932096d71c5b9944074826500"}, "originalPosition": 119}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1215, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}