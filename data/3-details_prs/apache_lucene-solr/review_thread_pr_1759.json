{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5MTAyOTIy", "number": 1759, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMToyOTozMlrOEaKXMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzozNjoyMVrOEbDQJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODY4MjA5OnYy", "diffSide": "RIGHT", "path": "solr/CHANGES.txt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMToyOTozMlrOHDaaCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMToyOTozMlrOHDaaCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM0MDQyNA==", "bodyText": "Please include your preferred name here after the change summary so that we can properly credit you!", "url": "https://github.com/apache/lucene-solr/pull/1759#discussion_r473340424", "createdAt": "2020-08-19T21:29:32Z", "author": {"login": "madrob"}, "path": "solr/CHANGES.txt", "diffHunk": "@@ -42,6 +42,8 @@ Improvements\n \n * SOLR-13528 Rate Limiting in Solr (Atri Sharma, Mike Drob)\n \n+* SOLR-13438: On deleting a collection, its config set will also be deleted iff it has been auto-created, and not used by any other collection.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b08b7ed50f5c9460ba691dd3268e93d940faab0e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODcxMDM5OnYy", "diffSide": "RIGHT", "path": "solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionDeleteAlsoDeletesAutocreatedConfigSetTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMTozNDo1OVrOHDasGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMTozNDo1OVrOHDasGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM0NTA1MQ==", "bodyText": "Please avoid suppressing warnings in new code and use generics", "url": "https://github.com/apache/lucene-solr/pull/1759#discussion_r473345051", "createdAt": "2020-08-19T21:34:59Z", "author": {"login": "madrob"}, "path": "solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionDeleteAlsoDeletesAutocreatedConfigSetTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.solr.cloud.api.collections;\n+\n+import org.apache.solr.client.solrj.request.CollectionAdminRequest;\n+import org.apache.solr.cloud.AbstractFullDistribZkTestBase;\n+import org.apache.solr.cloud.OverseerCollectionConfigSetProcessor;\n+import org.apache.solr.common.cloud.ZkStateReader;\n+import org.apache.solr.common.util.NamedList;\n+import org.junit.Test;\n+\n+public class CollectionDeleteAlsoDeletesAutocreatedConfigSetTest extends AbstractFullDistribZkTestBase {\n+\n+  public CollectionDeleteAlsoDeletesAutocreatedConfigSetTest() {\n+    sliceCount = 1;\n+  }\n+\n+  @Test\n+  @ShardsFixed(num = 1)\n+  public void test() throws Exception {\n+    String overseerNode = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n+\n+    String collectionName = \"CollectionDeleteAlsoDeletesAutocreatedConfigSetTest\";\n+    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,1,1)\n+            .setCreateNodeSet(overseerNode);\n+\n+    NamedList<Object> request = create.process(cloudClient).getResponse();\n+\n+    if (request.get(\"success\") != null) {\n+      // collection exists now\n+      assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n+\n+      String configName = cloudClient.getZkStateReader().readConfigName(collectionName);\n+\n+      // config for this collection is '.AUTOCREATED', and exists globally\n+      assertTrue(configName.endsWith(\".AUTOCREATED\"));\n+      assertTrue(cloudClient.getZkStateReader().getConfigManager().listConfigs().contains(configName));\n+\n+      @SuppressWarnings({\"rawtypes\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b08b7ed50f5c9460ba691dd3268e93d940faab0e"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODcyNjcyOnYy", "diffSide": "RIGHT", "path": "solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionDeleteAlsoDeletesAutocreatedConfigSetTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMTozODoxNVrOHDa2sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNzo0Mzo1MlrOHDxBNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM0Nzc2MQ==", "bodyText": "Instead of new file, can this be part of SimpleCollectionCreateDeleteTest?", "url": "https://github.com/apache/lucene-solr/pull/1759#discussion_r473347761", "createdAt": "2020-08-19T21:38:15Z", "author": {"login": "madrob"}, "path": "solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionDeleteAlsoDeletesAutocreatedConfigSetTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.solr.cloud.api.collections;\n+\n+import org.apache.solr.client.solrj.request.CollectionAdminRequest;\n+import org.apache.solr.cloud.AbstractFullDistribZkTestBase;\n+import org.apache.solr.cloud.OverseerCollectionConfigSetProcessor;\n+import org.apache.solr.common.cloud.ZkStateReader;\n+import org.apache.solr.common.util.NamedList;\n+import org.junit.Test;\n+\n+public class CollectionDeleteAlsoDeletesAutocreatedConfigSetTest extends AbstractFullDistribZkTestBase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b08b7ed50f5c9460ba691dd3268e93d940faab0e"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzcxMDkwMQ==", "bodyText": "@madrob I will look into that, should be simple to do.\nI opted for the separate file initially mainly because that seemed to be the standard for most of the tests I looked into. Is there some specific agreement that I should look into for future reference? Thanks!\nEDIT: I'm renaming the other test in SimpleCollectionCreateDeleteTest from test to testCreateAndDeleteThenCreateAgain, and naming the new test testDeleteAlsoDeletesAutocreatedConfigSet, to better differentiate between them.", "url": "https://github.com/apache/lucene-solr/pull/1759#discussion_r473710901", "createdAt": "2020-08-20T07:43:52Z", "author": {"login": "adorow"}, "path": "solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionDeleteAlsoDeletesAutocreatedConfigSetTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.solr.cloud.api.collections;\n+\n+import org.apache.solr.client.solrj.request.CollectionAdminRequest;\n+import org.apache.solr.cloud.AbstractFullDistribZkTestBase;\n+import org.apache.solr.cloud.OverseerCollectionConfigSetProcessor;\n+import org.apache.solr.common.cloud.ZkStateReader;\n+import org.apache.solr.common.util.NamedList;\n+import org.junit.Test;\n+\n+public class CollectionDeleteAlsoDeletesAutocreatedConfigSetTest extends AbstractFullDistribZkTestBase {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM0Nzc2MQ=="}, "originalCommit": {"oid": "b08b7ed50f5c9460ba691dd3268e93d940faab0e"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODczNTY2OnYy", "diffSide": "RIGHT", "path": "solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionDeleteAlsoDeletesAutocreatedConfigSetTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMTo0MDowNFrOHDa8qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNzo1NDoyNlrOHDx3jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM0OTI5MA==", "bodyText": "Declare as CollectionAdminRequest.Delete", "url": "https://github.com/apache/lucene-solr/pull/1759#discussion_r473349290", "createdAt": "2020-08-19T21:40:04Z", "author": {"login": "madrob"}, "path": "solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionDeleteAlsoDeletesAutocreatedConfigSetTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.solr.cloud.api.collections;\n+\n+import org.apache.solr.client.solrj.request.CollectionAdminRequest;\n+import org.apache.solr.cloud.AbstractFullDistribZkTestBase;\n+import org.apache.solr.cloud.OverseerCollectionConfigSetProcessor;\n+import org.apache.solr.common.cloud.ZkStateReader;\n+import org.apache.solr.common.util.NamedList;\n+import org.junit.Test;\n+\n+public class CollectionDeleteAlsoDeletesAutocreatedConfigSetTest extends AbstractFullDistribZkTestBase {\n+\n+  public CollectionDeleteAlsoDeletesAutocreatedConfigSetTest() {\n+    sliceCount = 1;\n+  }\n+\n+  @Test\n+  @ShardsFixed(num = 1)\n+  public void test() throws Exception {\n+    String overseerNode = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n+\n+    String collectionName = \"CollectionDeleteAlsoDeletesAutocreatedConfigSetTest\";\n+    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,1,1)\n+            .setCreateNodeSet(overseerNode);\n+\n+    NamedList<Object> request = create.process(cloudClient).getResponse();\n+\n+    if (request.get(\"success\") != null) {\n+      // collection exists now\n+      assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n+\n+      String configName = cloudClient.getZkStateReader().readConfigName(collectionName);\n+\n+      // config for this collection is '.AUTOCREATED', and exists globally\n+      assertTrue(configName.endsWith(\".AUTOCREATED\"));\n+      assertTrue(cloudClient.getZkStateReader().getConfigManager().listConfigs().contains(configName));\n+\n+      @SuppressWarnings({\"rawtypes\"})\n+      CollectionAdminRequest delete = CollectionAdminRequest.deleteCollection(collectionName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b08b7ed50f5c9460ba691dd3268e93d940faab0e"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzcyNDgxMg==", "bodyText": "Since I'm now adding this new scenario into SimpleCollectionCreateDeleteTest, I'll apply the same into the other scenario (and therefore also remove @SuppressWarnings from that test.", "url": "https://github.com/apache/lucene-solr/pull/1759#discussion_r473724812", "createdAt": "2020-08-20T07:54:26Z", "author": {"login": "adorow"}, "path": "solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionDeleteAlsoDeletesAutocreatedConfigSetTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.solr.cloud.api.collections;\n+\n+import org.apache.solr.client.solrj.request.CollectionAdminRequest;\n+import org.apache.solr.cloud.AbstractFullDistribZkTestBase;\n+import org.apache.solr.cloud.OverseerCollectionConfigSetProcessor;\n+import org.apache.solr.common.cloud.ZkStateReader;\n+import org.apache.solr.common.util.NamedList;\n+import org.junit.Test;\n+\n+public class CollectionDeleteAlsoDeletesAutocreatedConfigSetTest extends AbstractFullDistribZkTestBase {\n+\n+  public CollectionDeleteAlsoDeletesAutocreatedConfigSetTest() {\n+    sliceCount = 1;\n+  }\n+\n+  @Test\n+  @ShardsFixed(num = 1)\n+  public void test() throws Exception {\n+    String overseerNode = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n+\n+    String collectionName = \"CollectionDeleteAlsoDeletesAutocreatedConfigSetTest\";\n+    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,1,1)\n+            .setCreateNodeSet(overseerNode);\n+\n+    NamedList<Object> request = create.process(cloudClient).getResponse();\n+\n+    if (request.get(\"success\") != null) {\n+      // collection exists now\n+      assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n+\n+      String configName = cloudClient.getZkStateReader().readConfigName(collectionName);\n+\n+      // config for this collection is '.AUTOCREATED', and exists globally\n+      assertTrue(configName.endsWith(\".AUTOCREATED\"));\n+      assertTrue(cloudClient.getZkStateReader().getConfigManager().listConfigs().contains(configName));\n+\n+      @SuppressWarnings({\"rawtypes\"})\n+      CollectionAdminRequest delete = CollectionAdminRequest.deleteCollection(collectionName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM0OTI5MA=="}, "originalCommit": {"oid": "b08b7ed50f5c9460ba691dd3268e93d940faab0e"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODc0NDQ4OnYy", "diffSide": "RIGHT", "path": "solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionDeleteAlsoDeletesAutocreatedConfigSetTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMTo0MTo1OFrOHDbCiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNzo1NjoxMlrOHDyAiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM1MDc5Mw==", "bodyText": "Do we need this call to setCreateNodeSet? If not, can also delete getting overseerNode above. If so, add a comment explaining why.", "url": "https://github.com/apache/lucene-solr/pull/1759#discussion_r473350793", "createdAt": "2020-08-19T21:41:58Z", "author": {"login": "madrob"}, "path": "solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionDeleteAlsoDeletesAutocreatedConfigSetTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.solr.cloud.api.collections;\n+\n+import org.apache.solr.client.solrj.request.CollectionAdminRequest;\n+import org.apache.solr.cloud.AbstractFullDistribZkTestBase;\n+import org.apache.solr.cloud.OverseerCollectionConfigSetProcessor;\n+import org.apache.solr.common.cloud.ZkStateReader;\n+import org.apache.solr.common.util.NamedList;\n+import org.junit.Test;\n+\n+public class CollectionDeleteAlsoDeletesAutocreatedConfigSetTest extends AbstractFullDistribZkTestBase {\n+\n+  public CollectionDeleteAlsoDeletesAutocreatedConfigSetTest() {\n+    sliceCount = 1;\n+  }\n+\n+  @Test\n+  @ShardsFixed(num = 1)\n+  public void test() throws Exception {\n+    String overseerNode = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n+\n+    String collectionName = \"CollectionDeleteAlsoDeletesAutocreatedConfigSetTest\";\n+    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,1,1)\n+            .setCreateNodeSet(overseerNode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b08b7ed50f5c9460ba691dd3268e93d940faab0e"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzcyNzExNQ==", "bodyText": "@madrob no other reason besides lack of knowledge on my part :) I'm removing that part of the code, tests still work accordingly.", "url": "https://github.com/apache/lucene-solr/pull/1759#discussion_r473727115", "createdAt": "2020-08-20T07:56:12Z", "author": {"login": "adorow"}, "path": "solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionDeleteAlsoDeletesAutocreatedConfigSetTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.solr.cloud.api.collections;\n+\n+import org.apache.solr.client.solrj.request.CollectionAdminRequest;\n+import org.apache.solr.cloud.AbstractFullDistribZkTestBase;\n+import org.apache.solr.cloud.OverseerCollectionConfigSetProcessor;\n+import org.apache.solr.common.cloud.ZkStateReader;\n+import org.apache.solr.common.util.NamedList;\n+import org.junit.Test;\n+\n+public class CollectionDeleteAlsoDeletesAutocreatedConfigSetTest extends AbstractFullDistribZkTestBase {\n+\n+  public CollectionDeleteAlsoDeletesAutocreatedConfigSetTest() {\n+    sliceCount = 1;\n+  }\n+\n+  @Test\n+  @ShardsFixed(num = 1)\n+  public void test() throws Exception {\n+    String overseerNode = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n+\n+    String collectionName = \"CollectionDeleteAlsoDeletesAutocreatedConfigSetTest\";\n+    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,1,1)\n+            .setCreateNodeSet(overseerNode);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM1MDc5Mw=="}, "originalCommit": {"oid": "b08b7ed50f5c9460ba691dd3268e93d940faab0e"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODc2MTcyOnYy", "diffSide": "RIGHT", "path": "solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionDeleteAlsoDeletesAutocreatedConfigSetTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMTo0NToyOFrOHDbN2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMTo0NToyOFrOHDbN2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM1MzY4OQ==", "bodyText": "Please add another test where we have two collections sharing the same autogenerated configset, and verify deleting one of them doesn't orphan the other.", "url": "https://github.com/apache/lucene-solr/pull/1759#discussion_r473353689", "createdAt": "2020-08-19T21:45:28Z", "author": {"login": "madrob"}, "path": "solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionDeleteAlsoDeletesAutocreatedConfigSetTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.solr.cloud.api.collections;\n+\n+import org.apache.solr.client.solrj.request.CollectionAdminRequest;\n+import org.apache.solr.cloud.AbstractFullDistribZkTestBase;\n+import org.apache.solr.cloud.OverseerCollectionConfigSetProcessor;\n+import org.apache.solr.common.cloud.ZkStateReader;\n+import org.apache.solr.common.util.NamedList;\n+import org.junit.Test;\n+\n+public class CollectionDeleteAlsoDeletesAutocreatedConfigSetTest extends AbstractFullDistribZkTestBase {\n+\n+  public CollectionDeleteAlsoDeletesAutocreatedConfigSetTest() {\n+    sliceCount = 1;\n+  }\n+\n+  @Test\n+  @ShardsFixed(num = 1)\n+  public void test() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b08b7ed50f5c9460ba691dd3268e93d940faab0e"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2ODAwMjk1OnYy", "diffSide": "RIGHT", "path": "solr/core/src/test/org/apache/solr/cloud/api/collections/SimpleCollectionCreateDeleteTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzozNjoyMVrOHE1pvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzozNjoyMVrOHE1pvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgzNTM4OQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/apache/lucene-solr/pull/1759#discussion_r474835389", "createdAt": "2020-08-21T17:36:21Z", "author": {"login": "madrob"}, "path": "solr/core/src/test/org/apache/solr/cloud/api/collections/SimpleCollectionCreateDeleteTest.java", "diffHunk": "@@ -32,69 +28,151 @@\n import org.apache.solr.util.TimeOut;\n import org.junit.Test;\n \n+import java.util.Collection;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n public class SimpleCollectionCreateDeleteTest extends AbstractFullDistribZkTestBase {\n \n-  public SimpleCollectionCreateDeleteTest() {\n-    sliceCount = 1;\n-  }\n-\n-  @Test\n-  @ShardsFixed(num = 1)\n-  public void test() throws Exception {\n-    String overseerNode = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n-    String notOverseerNode = null;\n-    for (CloudJettyRunner cloudJetty : cloudJettys) {\n-      if (!overseerNode.equals(cloudJetty.nodeName)) {\n-        notOverseerNode = cloudJetty.nodeName;\n-        break;\n-      }\n+    public SimpleCollectionCreateDeleteTest() {\n+        sliceCount = 1;\n     }\n-    String collectionName = \"SimpleCollectionCreateDeleteTest\";\n-    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,1,1)\n-            .setCreateNodeSet(overseerNode);\n-\n-    NamedList<Object> request = create.process(cloudClient).getResponse();\n-\n-    if (request.get(\"success\") != null) {\n-      assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n-\n-      @SuppressWarnings({\"rawtypes\"})\n-      CollectionAdminRequest delete = CollectionAdminRequest.deleteCollection(collectionName);\n-      cloudClient.request(delete);\n-\n-      assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n-      \n-      // currently, removing a collection does not wait for cores to be unloaded\n-      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n-      while (true) {\n-        \n-        if( timeout.hasTimedOut() ) {\n-          throw new TimeoutException(\"Timed out waiting for all collections to be fully removed.\");\n+\n+    @Test\n+    @ShardsFixed(num = 1)\n+    public void testCreateAndDeleteThenCreateAgain() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93df217b3cecfa34a23554e6a6f5de650ad662f0"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1303, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}