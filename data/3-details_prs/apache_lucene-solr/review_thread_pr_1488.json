{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzOTUwMTgx", "number": 1488, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMjowMzo1NlrOD5yLpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDo0ODoxM1rOD8bLqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxOTE3NjA3OnYy", "diffSide": "RIGHT", "path": "gradle/render-javadoc.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMjowMzo1NlrOGRPwTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNTowOTozMVrOGRXyuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDczNzEwMQ==", "bodyText": "To generate relative links, have you considered to use -link (as the original ant task does so) option instead of -linkoffline ? The first version of \"renderJavadoc\" had also used -link option with relative file paths before we changed it to absolute urls. (I'm not sure if it makes sense here and have no strong feeling with that, but -link seems to be more safe since with the option javadoc tool checks if the files to be linked exist on the local machine.)", "url": "https://github.com/apache/lucene-solr/pull/1488#discussion_r420737101", "createdAt": "2020-05-06T12:03:56Z", "author": {"login": "mocobeta"}, "path": "gradle/render-javadoc.gradle", "diffHunk": "@@ -430,3 +305,180 @@ configure(subprojects.findAll { it.path in [':solr:solr-ref-guide', ':solr:serve\n     project.tasks.findByPath(\"renderJavadoc\").enabled = false\n   }\n }\n+\n+class RenderJavadocTask extends DefaultTask {\n+  @InputFiles\n+  @SkipWhenEmpty\n+  SourceDirectorySet srcDirSet;\n+  \n+  @OutputDirectory\n+  File outputDir;\n+  \n+  @InputFiles\n+  @Classpath\n+  FileCollection classpath;\n+  \n+  @Input\n+  boolean linksource = false;\n+  \n+  @Input\n+  boolean linkJUnit = false;\n+  \n+  @Input\n+  boolean relativeProjectLinks = true;\n+\n+  @Input\n+  def linkProjects = [];\n+  \n+  @Input\n+  def luceneDocUrl = project.propertyOrDefault('lucene.javadoc.url', \"https://lucene.apache.org/core/${project.baseVersion.replace(\".\", \"_\")}\")\n+\n+  @Input\n+  def solrDocUrl = project.propertyOrDefault('solr.javadoc.url', \"https://lucene.apache.org/solr/${project.baseVersion.replace(\".\", \"_\")}\")\n+  \n+  @TaskAction\n+  public void render() {\n+    def thispc = project.path.split(':').drop(1);\n+    // Converts absolute project path (e.g., \":lucene:analysis:common\") to \n+    // a link in the docs; relative to current, if needed for global documentation\n+    def convertPath2Link = { path ->\n+      def pc = path.split(':').drop(1);\n+      if (relativeProjectLinks) {\n+        int toDrop = 0;\n+        for (int i = 0; i < Math.min(pc.size(), thispc.size()); i++) {\n+          if (pc[i] == thispc[i]) {\n+            toDrop++;\n+          } else {\n+            break;\n+          }\n+        }\n+        // only create relative path if there is actually anything removed from beginning (this implies absolute link solr -> lucene):\n+        if (toDrop > 0) {\n+          return Collections.nCopies(thispc.size() - toDrop, '..').plus(pc.drop(toDrop) as List).join('/').concat('/');\n+        } \n+      }\n+      return \"${(pc[0] == 'lucene') ? luceneDocUrl : solrDocUrl}/${pc.drop(1).join('/')}/\"\n+    }\n+\n+    // escapes an option with single quotes or whitespace to be passed in the options.txt file for\n+    def escapeJavadocOption = { String s -> (s =~ /[ '\"]/) ? (\"'\" + s.replaceAll(/[\\\\'\"]/, /\\\\$0/) + \"'\") : s }\n+    \n+    def relativizeURL = { String from, String to ->\n+      URI fromUri = URI.create(from).normalize();\n+      URI toUri = URI.create(to).normalize();\n+      if (fromUri.scheme != toUri.scheme || fromUri.authority != toUri.authority) {\n+        return to;\n+      }\n+      // because URI#relativice can't handle relative paths, we use Path class as workaround\n+      Path fromPath = Paths.get(\"./${fromUri.path}\");\n+      Path toPath = Paths.get(\"./${toUri.path}\");\n+      return fromPath.relativize(toPath).toString().replace(File.separator, '/')\n+    }\n+\n+    def libName = project.path.startsWith(\":lucene\") ? \"Lucene\" : \"Solr\"\n+    def title = \"${libName} ${project.version} ${project.name} API\"\n+    \n+    // absolute urls for \"-linkoffline\" option\n+    def javaSEDocUrl = \"https://docs.oracle.com/en/java/javase/11/docs/api/\"\n+    def junitDocUrl = \"https://junit.org/junit4/javadoc/4.12/\"\n+\n+    def javadocCmd = org.gradle.internal.jvm.Jvm.current().getJavadocExecutable()\n+\n+    def srcDirs = srcDirSet.srcDirs.findAll { dir -> dir.exists() }\n+    def optionsFile = project.file(\"${getTemporaryDir()}/javadoc-options.txt\")\n+    \n+    def opts = []\n+    opts << [ '-overview', project.file(\"${srcDirs[0]}/overview.html\") ]\n+    opts << [ '-sourcepath', srcDirs.join(File.pathSeparator) ]\n+    opts << [ '-subpackages', project.path.startsWith(':lucene') ? 'org.apache.lucene' : 'org.apache.solr' ]\n+    opts << [ '-d', outputDir ]\n+    opts << '-protected'\n+    opts << [ '-encoding', 'UTF-8' ]\n+    opts << [ '-charset', 'UTF-8' ]\n+    opts << [ '-docencoding', 'UTF-8' ]\n+    opts << '-noindex'\n+    opts << '-author'\n+    opts << '-version'\n+    if (linksource) {\n+      opts << '-linksource'\n+    }\n+    opts << '-use'\n+    opts << [ '-locale', 'en_US' ]\n+    opts << [ '-windowtitle', title ]\n+    opts << [ '-doctitle', title ]\n+    if (!classpath.isEmpty()) {\n+      opts << [ '-classpath', classpath.asPath ]\n+    }\n+    opts << [ '-bottom', \"<i>Copyright &copy; 2000-${project.buildYear} Apache Software Foundation. All Rights Reserved.</i>\" ]\n+\n+    opts << [ '-tag', 'lucene.experimental:a:WARNING: This API is experimental and might change in incompatible ways in the next release.' ]\n+    opts << [ '-tag', 'lucene.internal:a:NOTE: This API is for internal purposes only and might change in incompatible ways in the next release.' ]\n+    opts << [ '-tag', \"lucene.spi:t:SPI Name (case-insensitive: if the name is 'htmlStrip', 'htmlstrip' can be used when looking up the service).\" ]\n+\n+    // resolve links to JavaSE and JUnit API\n+    opts << [ '-linkoffline', javaSEDocUrl, project.project(':lucene').file('tools/javadoc/java11/') ]\n+    if (linkJUnit) {\n+      opts << [ '-linkoffline', junitDocUrl, project.project(':lucene').file('tools/javadoc/junit/') ]\n+    }\n+    // resolve inter-project links\n+    linkProjects.collect { path ->\n+      def docdir = convertPath2Link(path)\n+      logger.warn(docdir as String);\n+      opts << [ '-linkoffline', docdir, project.project(path).javadoc.destinationDir ]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfca685be01f05c7bab28d74ddeae861a718e204"}, "originalPosition": 428}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg2ODc5NQ==", "bodyText": "Ah thanks. I will look into this. From what I have seen as output the links were generated correctly.\nSo I will use -link if the boolean flag enables relative links, otherwise -linkoffline. I will check the ANT task, too.", "url": "https://github.com/apache/lucene-solr/pull/1488#discussion_r420868795", "createdAt": "2020-05-06T15:09:31Z", "author": {"login": "uschindler"}, "path": "gradle/render-javadoc.gradle", "diffHunk": "@@ -430,3 +305,180 @@ configure(subprojects.findAll { it.path in [':solr:solr-ref-guide', ':solr:serve\n     project.tasks.findByPath(\"renderJavadoc\").enabled = false\n   }\n }\n+\n+class RenderJavadocTask extends DefaultTask {\n+  @InputFiles\n+  @SkipWhenEmpty\n+  SourceDirectorySet srcDirSet;\n+  \n+  @OutputDirectory\n+  File outputDir;\n+  \n+  @InputFiles\n+  @Classpath\n+  FileCollection classpath;\n+  \n+  @Input\n+  boolean linksource = false;\n+  \n+  @Input\n+  boolean linkJUnit = false;\n+  \n+  @Input\n+  boolean relativeProjectLinks = true;\n+\n+  @Input\n+  def linkProjects = [];\n+  \n+  @Input\n+  def luceneDocUrl = project.propertyOrDefault('lucene.javadoc.url', \"https://lucene.apache.org/core/${project.baseVersion.replace(\".\", \"_\")}\")\n+\n+  @Input\n+  def solrDocUrl = project.propertyOrDefault('solr.javadoc.url', \"https://lucene.apache.org/solr/${project.baseVersion.replace(\".\", \"_\")}\")\n+  \n+  @TaskAction\n+  public void render() {\n+    def thispc = project.path.split(':').drop(1);\n+    // Converts absolute project path (e.g., \":lucene:analysis:common\") to \n+    // a link in the docs; relative to current, if needed for global documentation\n+    def convertPath2Link = { path ->\n+      def pc = path.split(':').drop(1);\n+      if (relativeProjectLinks) {\n+        int toDrop = 0;\n+        for (int i = 0; i < Math.min(pc.size(), thispc.size()); i++) {\n+          if (pc[i] == thispc[i]) {\n+            toDrop++;\n+          } else {\n+            break;\n+          }\n+        }\n+        // only create relative path if there is actually anything removed from beginning (this implies absolute link solr -> lucene):\n+        if (toDrop > 0) {\n+          return Collections.nCopies(thispc.size() - toDrop, '..').plus(pc.drop(toDrop) as List).join('/').concat('/');\n+        } \n+      }\n+      return \"${(pc[0] == 'lucene') ? luceneDocUrl : solrDocUrl}/${pc.drop(1).join('/')}/\"\n+    }\n+\n+    // escapes an option with single quotes or whitespace to be passed in the options.txt file for\n+    def escapeJavadocOption = { String s -> (s =~ /[ '\"]/) ? (\"'\" + s.replaceAll(/[\\\\'\"]/, /\\\\$0/) + \"'\") : s }\n+    \n+    def relativizeURL = { String from, String to ->\n+      URI fromUri = URI.create(from).normalize();\n+      URI toUri = URI.create(to).normalize();\n+      if (fromUri.scheme != toUri.scheme || fromUri.authority != toUri.authority) {\n+        return to;\n+      }\n+      // because URI#relativice can't handle relative paths, we use Path class as workaround\n+      Path fromPath = Paths.get(\"./${fromUri.path}\");\n+      Path toPath = Paths.get(\"./${toUri.path}\");\n+      return fromPath.relativize(toPath).toString().replace(File.separator, '/')\n+    }\n+\n+    def libName = project.path.startsWith(\":lucene\") ? \"Lucene\" : \"Solr\"\n+    def title = \"${libName} ${project.version} ${project.name} API\"\n+    \n+    // absolute urls for \"-linkoffline\" option\n+    def javaSEDocUrl = \"https://docs.oracle.com/en/java/javase/11/docs/api/\"\n+    def junitDocUrl = \"https://junit.org/junit4/javadoc/4.12/\"\n+\n+    def javadocCmd = org.gradle.internal.jvm.Jvm.current().getJavadocExecutable()\n+\n+    def srcDirs = srcDirSet.srcDirs.findAll { dir -> dir.exists() }\n+    def optionsFile = project.file(\"${getTemporaryDir()}/javadoc-options.txt\")\n+    \n+    def opts = []\n+    opts << [ '-overview', project.file(\"${srcDirs[0]}/overview.html\") ]\n+    opts << [ '-sourcepath', srcDirs.join(File.pathSeparator) ]\n+    opts << [ '-subpackages', project.path.startsWith(':lucene') ? 'org.apache.lucene' : 'org.apache.solr' ]\n+    opts << [ '-d', outputDir ]\n+    opts << '-protected'\n+    opts << [ '-encoding', 'UTF-8' ]\n+    opts << [ '-charset', 'UTF-8' ]\n+    opts << [ '-docencoding', 'UTF-8' ]\n+    opts << '-noindex'\n+    opts << '-author'\n+    opts << '-version'\n+    if (linksource) {\n+      opts << '-linksource'\n+    }\n+    opts << '-use'\n+    opts << [ '-locale', 'en_US' ]\n+    opts << [ '-windowtitle', title ]\n+    opts << [ '-doctitle', title ]\n+    if (!classpath.isEmpty()) {\n+      opts << [ '-classpath', classpath.asPath ]\n+    }\n+    opts << [ '-bottom', \"<i>Copyright &copy; 2000-${project.buildYear} Apache Software Foundation. All Rights Reserved.</i>\" ]\n+\n+    opts << [ '-tag', 'lucene.experimental:a:WARNING: This API is experimental and might change in incompatible ways in the next release.' ]\n+    opts << [ '-tag', 'lucene.internal:a:NOTE: This API is for internal purposes only and might change in incompatible ways in the next release.' ]\n+    opts << [ '-tag', \"lucene.spi:t:SPI Name (case-insensitive: if the name is 'htmlStrip', 'htmlstrip' can be used when looking up the service).\" ]\n+\n+    // resolve links to JavaSE and JUnit API\n+    opts << [ '-linkoffline', javaSEDocUrl, project.project(':lucene').file('tools/javadoc/java11/') ]\n+    if (linkJUnit) {\n+      opts << [ '-linkoffline', junitDocUrl, project.project(':lucene').file('tools/javadoc/junit/') ]\n+    }\n+    // resolve inter-project links\n+    linkProjects.collect { path ->\n+      def docdir = convertPath2Link(path)\n+      logger.warn(docdir as String);\n+      opts << [ '-linkoffline', docdir, project.project(path).javadoc.destinationDir ]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDczNzEwMQ=="}, "originalCommit": {"oid": "dfca685be01f05c7bab28d74ddeae861a718e204"}, "originalPosition": 428}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjk4Njg1OnYy", "diffSide": "RIGHT", "path": "gradle/render-javadoc.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODozNDo1MVrOGR0KvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODozNDo1MVrOGR0KvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMzMzY5Mg==", "bodyText": "Nice!", "url": "https://github.com/apache/lucene-solr/pull/1488#discussion_r421333692", "createdAt": "2020-05-07T08:34:51Z", "author": {"login": "dweiss"}, "path": "gradle/render-javadoc.gradle", "diffHunk": "@@ -57,20 +57,11 @@ configure(subprojects.findAll { it.path.startsWith(':lucene') && it.path != ':lu\n       doLast {\n         // fix for Java 11 Javadoc tool that cannot handle split packages between modules correctly (by removing all the packages which are part of lucene-core)\n         // problem description: [https://issues.apache.org/jira/browse/LUCENE-8738?focusedCommentId=16818106&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16818106]\n-        ant.local(name: \"element-list-regex\") // contains a regex for all package names which are in lucene-core's javadoc\n-        ant.loadfile(property: \"element-list-regex\", srcFile: \"${project(':lucene:core').tasks[name].outputDir}/element-list\", encoding: \"utf-8\") {\n-          filterchain {\n-            tokenfilter(delimoutput: \"|\") {\n-              replacestring(from: \".\", to: \"\\\\.\")\n-            }\n-          }\n-        }\n-        ant.replaceregexp(\n-            encoding: \"UTF-8\",\n-            file: \"${project.javadoc.destinationDir}/element-list\",\n-            byline: \"true\",\n-            match: \"^(\\${element-list-regex})\\$\",\n-            replace: \"\")\n+        Set luceneCorePackages = file(\"${project(':lucene:core').tasks[name].outputDir}/element-list\").readLines('UTF-8').toSet();\n+        File elementFile = file(\"${outputDir}/element-list\");\n+        List elements = elementFile.readLines('UTF-8');\n+        elements.removeAll{ luceneCorePackages.contains(it) }\n+        elementFile.write(elements.join('\\n').concat('\\n'), 'UTF-8');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "764f378bef47f1c375b100cf8755b712c5faca4b"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODczMTIxOnYy", "diffSide": "RIGHT", "path": "gradle/render-javadoc.gradle", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMzoyNjoxN1rOGUGeJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxOToxNDoyMlrOGUVNwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzczMDcyNw==", "bodyText": "You keep those names so you have some useful Input for the uptodate check?\nBecause it's otherwise not used.\nMaybe add a newline to separate the input from the actual project instances, which should be declared private", "url": "https://github.com/apache/lucene-solr/pull/1488#discussion_r423730727", "createdAt": "2020-05-12T13:26:17Z", "author": {"login": "uschindler"}, "path": "gradle/render-javadoc.gradle", "diffHunk": "@@ -42,291 +41,255 @@ allprojects {\n       outputDir = project.javadoc.destinationDir;\n       classpath = sourceSets.main.compileClasspath;\n     }\n+\n+    task renderSiteJavadoc(type: RenderJavadocTask) {\n+      description \"Generates Javadoc API documentation for the site (relative links).\"\n+      group \"documentation\"\n+\n+      dependsOn sourceSets.main.compileClasspath\n+\n+      srcDirSet = sourceSets.main.java;\n+      classpath = sourceSets.main.compileClasspath;\n+\n+      relativeProjectLinks = true\n+\n+      // TODO: proof of concept to place everything in one folder under root's build dir.\n+      def relative = project.path.replaceFirst(\":\", \"\").replace(':', '/')\n+      outputDir = rootProject.file(\"${rootProject.buildDir}/site-docs\").toPath().resolve(relative).toFile()\n+    }\n   }\n }\n \n+// Fix for Java 11 Javadoc tool that cannot handle split packages between modules correctly.\n+// (by removing all the packages which are part of lucene-core)\n+// See: https://issues.apache.org/jira/browse/LUCENE-8738?focusedCommentId=16818106&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16818106\n configure(subprojects.findAll { it.path.startsWith(':lucene') && it.path != ':lucene:core' }) {\n-\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:core'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-\n-      doLast {\n-        // fix for Java 11 Javadoc tool that cannot handle split packages between modules correctly (by removing all the packages which are part of lucene-core)\n-        // problem description: [https://issues.apache.org/jira/browse/LUCENE-8738?focusedCommentId=16818106&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16818106]\n-        Set luceneCorePackages = file(\"${project(':lucene:core').tasks[name].outputDir}/element-list\").readLines('UTF-8').toSet();\n-        File elementFile = file(\"${outputDir}/element-list\");\n-        List elements = elementFile.readLines('UTF-8');\n-        elements.removeAll{ luceneCorePackages.contains(it) }\n-        elementFile.write(elements.join('\\n').concat('\\n'), 'UTF-8');\n-      }\n+  project.tasks.withType(RenderJavadocTask) {\n+    doLast {\n+      Set luceneCorePackages = file(\"${project(':lucene:core').tasks[name].outputDir}/element-list\").readLines('UTF-8').toSet();\n+      File elementFile = file(\"${outputDir}/element-list\");\n+      List elements = elementFile.readLines('UTF-8');\n+      elements.removeAll(luceneCorePackages)\n+      elementFile.write(elements.join('\\n').concat('\\n'), 'UTF-8');\n     }\n   }\n }\n \n+// Add cross-project documentation task dependencies and link generation.\n+configure(subprojects.findAll { it.path.startsWith(':lucene') && it.path != ':lucene:core' }) {\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:core')\n+  }\n+}\n+\n configure(subprojects.findAll { it.path.startsWith(':lucene:analysis') && it.path != ':lucene:analysis:common'}) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:analysis:common'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:analysis:common')\n   }\n }\n \n configure(project(':lucene:benchmark')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:memory',\n-       ':lucene:highlighter',\n-       ':lucene:analysis:common',\n-       ':lucene:queryparser',\n-       ':lucene:facet',\n-       ':lucene:spatial-extras'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+        ':lucene:memory',\n+        ':lucene:highlighter',\n+        ':lucene:analysis:common',\n+        ':lucene:queryparser',\n+        ':lucene:facet',\n+        ':lucene:spatial-extras')\n   }\n }\n \n configure(project(':lucene:classification')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:queries', ':lucene:analysis:common', ':lucene:grouping'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+       ':lucene:queries',\n+       ':lucene:analysis:common',\n+       ':lucene:grouping')\n   }\n }\n \n configure(project(':lucene:demo')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:analysis:common',\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+       ':lucene:analysis:common',\n        ':lucene:queryparser',\n        ':lucene:queries',\n        ':lucene:facet',\n-       ':lucene:expressions'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n+       ':lucene:expressions')\n \n-      // we link the example source in the javadocs, as it's ref'ed elsewhere\n-      linksource = true\n-    }\n+    // We link the example source in the javadocs, as it's ref'ed elsewhere\n+    linksource = true\n   }\n }\n \n configure(project(':lucene:grouping')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:queries'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:queries')\n   }\n }\n \n configure(project(':lucene:highlighter')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:memory'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:memory')\n   }\n }\n \n configure(project(':lucene:monitor')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:memory', ':lucene:analysis:common', ':lucene:queryparser'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+        ':lucene:memory',\n+        ':lucene:analysis:common',\n+        ':lucene:queryparser')\n   }\n }\n \n configure(project(':lucene:queryparser')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:queries', ':lucene:sandbox'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+        ':lucene:queries',\n+        ':lucene:sandbox'\n+    )\n   }\n }\n \n configure(project(':lucene:replicator')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:facet'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:facet')\n   }\n }\n \n configure(project(':lucene:spatial-extras')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:spatial3d'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:spatial3d')\n   }\n }\n \n configure(project(':lucene:suggest')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:analysis:common'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:analysis:common')\n   }\n }\n \n configure(project(':lucene:test-framework')) {\n-  plugins.withType(JavaPlugin) {\n-\n-    renderJavadoc {\n-      [':lucene:codecs'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-      linkJUnit = true\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:codecs')\n   }\n }\n \n configure(subprojects.findAll { it.path.startsWith(':solr') }) {\n-  plugins.withType(JavaPlugin) {\n-    def hasJavdocsTask = project.tasks.collect { it.name }.contains('renderJavadoc')\n-    if (hasJavdocsTask) {\n-      renderJavadoc {\n-        [':lucene:core',\n-         ':lucene:analysis:common',\n-         ':lucene:analysis:icu',\n-         ':lucene:analysis:kuromoji',\n-         ':lucene:analysis:nori',\n-         ':lucene:analysis:morfologik',\n-         ':lucene:analysis:phonetic',\n-         ':lucene:analysis:smartcn',\n-         ':lucene:analysis:stempel',\n-         ':lucene:backward-codecs',\n-         ':lucene:codecs',\n-         ':lucene:expressions',\n-         ':lucene:suggest',\n-         ':lucene:grouping',\n-         ':lucene:join',\n-         ':lucene:queries',\n-         ':lucene:queryparser',\n-         ':lucene:highlighter',\n-         ':lucene:memory',\n-         ':lucene:misc',\n-         ':lucene:classification',\n-         ':lucene:spatial-extras'].collect { path ->\n-          dependsOn \"${path}:renderJavadoc\"\n-          linkProjects += [ path ]\n-        }\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+        ':lucene:core',\n+        ':lucene:analysis:common',\n+        ':lucene:analysis:icu',\n+        ':lucene:analysis:kuromoji',\n+        ':lucene:analysis:nori',\n+        ':lucene:analysis:morfologik',\n+        ':lucene:analysis:phonetic',\n+        ':lucene:analysis:smartcn',\n+        ':lucene:analysis:stempel',\n+        ':lucene:backward-codecs',\n+        ':lucene:codecs',\n+        ':lucene:expressions',\n+        ':lucene:suggest',\n+        ':lucene:grouping',\n+        ':lucene:join',\n+        ':lucene:queries',\n+        ':lucene:queryparser',\n+        ':lucene:highlighter',\n+        ':lucene:memory',\n+        ':lucene:misc',\n+        ':lucene:classification',\n+        ':lucene:spatial-extras'\n+    )\n   }\n }\n \n configure(project(':solr:core')) {\n-  plugins.withType(JavaPlugin) {\n-    // specialized to ONLY depend on solrj\n-    renderJavadoc {\n-      [':solr:solrj'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    // Specialized to ONLY depend on solrj\n+    addLinkedProject(':solr:solrj')\n   }\n }\n \n configure(subprojects.findAll { it.path.startsWith(':solr:contrib') }) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':solr:solrj', ':solr:core'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+        ':solr:solrj',\n+        ':solr:core'\n+    )\n   }\n }\n \n configure(project(':solr:contrib:dataimporthandler-extras')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':solr:contrib:dataimporthandler'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':solr:contrib:dataimporthandler')\n   }\n }\n \n configure(project(':solr:test-framework')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      linkJUnit = true\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    linkJUnit = true\n   }\n }\n \n-\n-configure(subprojects.findAll { it.path in [':solr:solr-ref-guide', ':solr:server', ':solr:webapp']}) {\n-  afterEvaluate {\n-    project.tasks.findByPath(\"renderJavadoc\").enabled = false\n+// Disable Javadoc rendering for these projects.\n+configure(subprojects.findAll { it.path in [\n+    ':solr:solr-ref-guide',\n+    ':solr:server',\n+    ':solr:webapp']}) {\n+  project.tasks.withType(RenderJavadocTask) {\n+    enabled = false\n   }\n }\n \n+\n class RenderJavadocTask extends DefaultTask {\n   @InputFiles\n   @SkipWhenEmpty\n   SourceDirectorySet srcDirSet;\n   \n   @OutputDirectory\n-  File outputDir;\n-  \n+  File outputDir\n+\n   @InputFiles\n   @Classpath\n-  FileCollection classpath;\n+  FileCollection classpath\n   \n   @Input\n-  boolean linksource = false;\n+  boolean linksource = false\n   \n   @Input\n-  boolean linkJUnit = false;\n+  boolean linkJUnit = false\n   \n   @Input\n-  boolean relativeProjectLinks = false;\n+  boolean relativeProjectLinks = false\n \n   @Input\n-  def linkProjects = [];\n-  \n+  def linkedProjectNames = []", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35895f2f08577de8ed0597fd051bc094f18c7158"}, "originalPosition": 427}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk3MDE3Mg==", "bodyText": "No - linkProjects contains project references that cannot be used as input; the other array contains project paths. Perhaps there is a cleaner way to do this - I didn't investigate deeper.", "url": "https://github.com/apache/lucene-solr/pull/1488#discussion_r423970172", "createdAt": "2020-05-12T19:10:33Z", "author": {"login": "dweiss"}, "path": "gradle/render-javadoc.gradle", "diffHunk": "@@ -42,291 +41,255 @@ allprojects {\n       outputDir = project.javadoc.destinationDir;\n       classpath = sourceSets.main.compileClasspath;\n     }\n+\n+    task renderSiteJavadoc(type: RenderJavadocTask) {\n+      description \"Generates Javadoc API documentation for the site (relative links).\"\n+      group \"documentation\"\n+\n+      dependsOn sourceSets.main.compileClasspath\n+\n+      srcDirSet = sourceSets.main.java;\n+      classpath = sourceSets.main.compileClasspath;\n+\n+      relativeProjectLinks = true\n+\n+      // TODO: proof of concept to place everything in one folder under root's build dir.\n+      def relative = project.path.replaceFirst(\":\", \"\").replace(':', '/')\n+      outputDir = rootProject.file(\"${rootProject.buildDir}/site-docs\").toPath().resolve(relative).toFile()\n+    }\n   }\n }\n \n+// Fix for Java 11 Javadoc tool that cannot handle split packages between modules correctly.\n+// (by removing all the packages which are part of lucene-core)\n+// See: https://issues.apache.org/jira/browse/LUCENE-8738?focusedCommentId=16818106&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16818106\n configure(subprojects.findAll { it.path.startsWith(':lucene') && it.path != ':lucene:core' }) {\n-\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:core'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-\n-      doLast {\n-        // fix for Java 11 Javadoc tool that cannot handle split packages between modules correctly (by removing all the packages which are part of lucene-core)\n-        // problem description: [https://issues.apache.org/jira/browse/LUCENE-8738?focusedCommentId=16818106&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16818106]\n-        Set luceneCorePackages = file(\"${project(':lucene:core').tasks[name].outputDir}/element-list\").readLines('UTF-8').toSet();\n-        File elementFile = file(\"${outputDir}/element-list\");\n-        List elements = elementFile.readLines('UTF-8');\n-        elements.removeAll{ luceneCorePackages.contains(it) }\n-        elementFile.write(elements.join('\\n').concat('\\n'), 'UTF-8');\n-      }\n+  project.tasks.withType(RenderJavadocTask) {\n+    doLast {\n+      Set luceneCorePackages = file(\"${project(':lucene:core').tasks[name].outputDir}/element-list\").readLines('UTF-8').toSet();\n+      File elementFile = file(\"${outputDir}/element-list\");\n+      List elements = elementFile.readLines('UTF-8');\n+      elements.removeAll(luceneCorePackages)\n+      elementFile.write(elements.join('\\n').concat('\\n'), 'UTF-8');\n     }\n   }\n }\n \n+// Add cross-project documentation task dependencies and link generation.\n+configure(subprojects.findAll { it.path.startsWith(':lucene') && it.path != ':lucene:core' }) {\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:core')\n+  }\n+}\n+\n configure(subprojects.findAll { it.path.startsWith(':lucene:analysis') && it.path != ':lucene:analysis:common'}) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:analysis:common'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:analysis:common')\n   }\n }\n \n configure(project(':lucene:benchmark')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:memory',\n-       ':lucene:highlighter',\n-       ':lucene:analysis:common',\n-       ':lucene:queryparser',\n-       ':lucene:facet',\n-       ':lucene:spatial-extras'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+        ':lucene:memory',\n+        ':lucene:highlighter',\n+        ':lucene:analysis:common',\n+        ':lucene:queryparser',\n+        ':lucene:facet',\n+        ':lucene:spatial-extras')\n   }\n }\n \n configure(project(':lucene:classification')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:queries', ':lucene:analysis:common', ':lucene:grouping'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+       ':lucene:queries',\n+       ':lucene:analysis:common',\n+       ':lucene:grouping')\n   }\n }\n \n configure(project(':lucene:demo')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:analysis:common',\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+       ':lucene:analysis:common',\n        ':lucene:queryparser',\n        ':lucene:queries',\n        ':lucene:facet',\n-       ':lucene:expressions'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n+       ':lucene:expressions')\n \n-      // we link the example source in the javadocs, as it's ref'ed elsewhere\n-      linksource = true\n-    }\n+    // We link the example source in the javadocs, as it's ref'ed elsewhere\n+    linksource = true\n   }\n }\n \n configure(project(':lucene:grouping')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:queries'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:queries')\n   }\n }\n \n configure(project(':lucene:highlighter')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:memory'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:memory')\n   }\n }\n \n configure(project(':lucene:monitor')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:memory', ':lucene:analysis:common', ':lucene:queryparser'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+        ':lucene:memory',\n+        ':lucene:analysis:common',\n+        ':lucene:queryparser')\n   }\n }\n \n configure(project(':lucene:queryparser')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:queries', ':lucene:sandbox'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+        ':lucene:queries',\n+        ':lucene:sandbox'\n+    )\n   }\n }\n \n configure(project(':lucene:replicator')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:facet'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:facet')\n   }\n }\n \n configure(project(':lucene:spatial-extras')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:spatial3d'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:spatial3d')\n   }\n }\n \n configure(project(':lucene:suggest')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:analysis:common'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:analysis:common')\n   }\n }\n \n configure(project(':lucene:test-framework')) {\n-  plugins.withType(JavaPlugin) {\n-\n-    renderJavadoc {\n-      [':lucene:codecs'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-      linkJUnit = true\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:codecs')\n   }\n }\n \n configure(subprojects.findAll { it.path.startsWith(':solr') }) {\n-  plugins.withType(JavaPlugin) {\n-    def hasJavdocsTask = project.tasks.collect { it.name }.contains('renderJavadoc')\n-    if (hasJavdocsTask) {\n-      renderJavadoc {\n-        [':lucene:core',\n-         ':lucene:analysis:common',\n-         ':lucene:analysis:icu',\n-         ':lucene:analysis:kuromoji',\n-         ':lucene:analysis:nori',\n-         ':lucene:analysis:morfologik',\n-         ':lucene:analysis:phonetic',\n-         ':lucene:analysis:smartcn',\n-         ':lucene:analysis:stempel',\n-         ':lucene:backward-codecs',\n-         ':lucene:codecs',\n-         ':lucene:expressions',\n-         ':lucene:suggest',\n-         ':lucene:grouping',\n-         ':lucene:join',\n-         ':lucene:queries',\n-         ':lucene:queryparser',\n-         ':lucene:highlighter',\n-         ':lucene:memory',\n-         ':lucene:misc',\n-         ':lucene:classification',\n-         ':lucene:spatial-extras'].collect { path ->\n-          dependsOn \"${path}:renderJavadoc\"\n-          linkProjects += [ path ]\n-        }\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+        ':lucene:core',\n+        ':lucene:analysis:common',\n+        ':lucene:analysis:icu',\n+        ':lucene:analysis:kuromoji',\n+        ':lucene:analysis:nori',\n+        ':lucene:analysis:morfologik',\n+        ':lucene:analysis:phonetic',\n+        ':lucene:analysis:smartcn',\n+        ':lucene:analysis:stempel',\n+        ':lucene:backward-codecs',\n+        ':lucene:codecs',\n+        ':lucene:expressions',\n+        ':lucene:suggest',\n+        ':lucene:grouping',\n+        ':lucene:join',\n+        ':lucene:queries',\n+        ':lucene:queryparser',\n+        ':lucene:highlighter',\n+        ':lucene:memory',\n+        ':lucene:misc',\n+        ':lucene:classification',\n+        ':lucene:spatial-extras'\n+    )\n   }\n }\n \n configure(project(':solr:core')) {\n-  plugins.withType(JavaPlugin) {\n-    // specialized to ONLY depend on solrj\n-    renderJavadoc {\n-      [':solr:solrj'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    // Specialized to ONLY depend on solrj\n+    addLinkedProject(':solr:solrj')\n   }\n }\n \n configure(subprojects.findAll { it.path.startsWith(':solr:contrib') }) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':solr:solrj', ':solr:core'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+        ':solr:solrj',\n+        ':solr:core'\n+    )\n   }\n }\n \n configure(project(':solr:contrib:dataimporthandler-extras')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':solr:contrib:dataimporthandler'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':solr:contrib:dataimporthandler')\n   }\n }\n \n configure(project(':solr:test-framework')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      linkJUnit = true\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    linkJUnit = true\n   }\n }\n \n-\n-configure(subprojects.findAll { it.path in [':solr:solr-ref-guide', ':solr:server', ':solr:webapp']}) {\n-  afterEvaluate {\n-    project.tasks.findByPath(\"renderJavadoc\").enabled = false\n+// Disable Javadoc rendering for these projects.\n+configure(subprojects.findAll { it.path in [\n+    ':solr:solr-ref-guide',\n+    ':solr:server',\n+    ':solr:webapp']}) {\n+  project.tasks.withType(RenderJavadocTask) {\n+    enabled = false\n   }\n }\n \n+\n class RenderJavadocTask extends DefaultTask {\n   @InputFiles\n   @SkipWhenEmpty\n   SourceDirectorySet srcDirSet;\n   \n   @OutputDirectory\n-  File outputDir;\n-  \n+  File outputDir\n+\n   @InputFiles\n   @Classpath\n-  FileCollection classpath;\n+  FileCollection classpath\n   \n   @Input\n-  boolean linksource = false;\n+  boolean linksource = false\n   \n   @Input\n-  boolean linkJUnit = false;\n+  boolean linkJUnit = false\n   \n   @Input\n-  boolean relativeProjectLinks = false;\n+  boolean relativeProjectLinks = false\n \n   @Input\n-  def linkProjects = [];\n-  \n+  def linkedProjectNames = []", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzczMDcyNw=="}, "originalCommit": {"oid": "35895f2f08577de8ed0597fd051bc094f18c7158"}, "originalPosition": 427}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk3MjI4OA==", "bodyText": "That's what I figured out. The names, although unused are good task inputs.\nI would just make the other property private.", "url": "https://github.com/apache/lucene-solr/pull/1488#discussion_r423972288", "createdAt": "2020-05-12T19:14:22Z", "author": {"login": "uschindler"}, "path": "gradle/render-javadoc.gradle", "diffHunk": "@@ -42,291 +41,255 @@ allprojects {\n       outputDir = project.javadoc.destinationDir;\n       classpath = sourceSets.main.compileClasspath;\n     }\n+\n+    task renderSiteJavadoc(type: RenderJavadocTask) {\n+      description \"Generates Javadoc API documentation for the site (relative links).\"\n+      group \"documentation\"\n+\n+      dependsOn sourceSets.main.compileClasspath\n+\n+      srcDirSet = sourceSets.main.java;\n+      classpath = sourceSets.main.compileClasspath;\n+\n+      relativeProjectLinks = true\n+\n+      // TODO: proof of concept to place everything in one folder under root's build dir.\n+      def relative = project.path.replaceFirst(\":\", \"\").replace(':', '/')\n+      outputDir = rootProject.file(\"${rootProject.buildDir}/site-docs\").toPath().resolve(relative).toFile()\n+    }\n   }\n }\n \n+// Fix for Java 11 Javadoc tool that cannot handle split packages between modules correctly.\n+// (by removing all the packages which are part of lucene-core)\n+// See: https://issues.apache.org/jira/browse/LUCENE-8738?focusedCommentId=16818106&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16818106\n configure(subprojects.findAll { it.path.startsWith(':lucene') && it.path != ':lucene:core' }) {\n-\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:core'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-\n-      doLast {\n-        // fix for Java 11 Javadoc tool that cannot handle split packages between modules correctly (by removing all the packages which are part of lucene-core)\n-        // problem description: [https://issues.apache.org/jira/browse/LUCENE-8738?focusedCommentId=16818106&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16818106]\n-        Set luceneCorePackages = file(\"${project(':lucene:core').tasks[name].outputDir}/element-list\").readLines('UTF-8').toSet();\n-        File elementFile = file(\"${outputDir}/element-list\");\n-        List elements = elementFile.readLines('UTF-8');\n-        elements.removeAll{ luceneCorePackages.contains(it) }\n-        elementFile.write(elements.join('\\n').concat('\\n'), 'UTF-8');\n-      }\n+  project.tasks.withType(RenderJavadocTask) {\n+    doLast {\n+      Set luceneCorePackages = file(\"${project(':lucene:core').tasks[name].outputDir}/element-list\").readLines('UTF-8').toSet();\n+      File elementFile = file(\"${outputDir}/element-list\");\n+      List elements = elementFile.readLines('UTF-8');\n+      elements.removeAll(luceneCorePackages)\n+      elementFile.write(elements.join('\\n').concat('\\n'), 'UTF-8');\n     }\n   }\n }\n \n+// Add cross-project documentation task dependencies and link generation.\n+configure(subprojects.findAll { it.path.startsWith(':lucene') && it.path != ':lucene:core' }) {\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:core')\n+  }\n+}\n+\n configure(subprojects.findAll { it.path.startsWith(':lucene:analysis') && it.path != ':lucene:analysis:common'}) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:analysis:common'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:analysis:common')\n   }\n }\n \n configure(project(':lucene:benchmark')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:memory',\n-       ':lucene:highlighter',\n-       ':lucene:analysis:common',\n-       ':lucene:queryparser',\n-       ':lucene:facet',\n-       ':lucene:spatial-extras'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+        ':lucene:memory',\n+        ':lucene:highlighter',\n+        ':lucene:analysis:common',\n+        ':lucene:queryparser',\n+        ':lucene:facet',\n+        ':lucene:spatial-extras')\n   }\n }\n \n configure(project(':lucene:classification')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:queries', ':lucene:analysis:common', ':lucene:grouping'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+       ':lucene:queries',\n+       ':lucene:analysis:common',\n+       ':lucene:grouping')\n   }\n }\n \n configure(project(':lucene:demo')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:analysis:common',\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+       ':lucene:analysis:common',\n        ':lucene:queryparser',\n        ':lucene:queries',\n        ':lucene:facet',\n-       ':lucene:expressions'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n+       ':lucene:expressions')\n \n-      // we link the example source in the javadocs, as it's ref'ed elsewhere\n-      linksource = true\n-    }\n+    // We link the example source in the javadocs, as it's ref'ed elsewhere\n+    linksource = true\n   }\n }\n \n configure(project(':lucene:grouping')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:queries'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:queries')\n   }\n }\n \n configure(project(':lucene:highlighter')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:memory'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:memory')\n   }\n }\n \n configure(project(':lucene:monitor')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:memory', ':lucene:analysis:common', ':lucene:queryparser'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+        ':lucene:memory',\n+        ':lucene:analysis:common',\n+        ':lucene:queryparser')\n   }\n }\n \n configure(project(':lucene:queryparser')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:queries', ':lucene:sandbox'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+        ':lucene:queries',\n+        ':lucene:sandbox'\n+    )\n   }\n }\n \n configure(project(':lucene:replicator')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:facet'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:facet')\n   }\n }\n \n configure(project(':lucene:spatial-extras')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:spatial3d'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:spatial3d')\n   }\n }\n \n configure(project(':lucene:suggest')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:analysis:common'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:analysis:common')\n   }\n }\n \n configure(project(':lucene:test-framework')) {\n-  plugins.withType(JavaPlugin) {\n-\n-    renderJavadoc {\n-      [':lucene:codecs'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-      linkJUnit = true\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:codecs')\n   }\n }\n \n configure(subprojects.findAll { it.path.startsWith(':solr') }) {\n-  plugins.withType(JavaPlugin) {\n-    def hasJavdocsTask = project.tasks.collect { it.name }.contains('renderJavadoc')\n-    if (hasJavdocsTask) {\n-      renderJavadoc {\n-        [':lucene:core',\n-         ':lucene:analysis:common',\n-         ':lucene:analysis:icu',\n-         ':lucene:analysis:kuromoji',\n-         ':lucene:analysis:nori',\n-         ':lucene:analysis:morfologik',\n-         ':lucene:analysis:phonetic',\n-         ':lucene:analysis:smartcn',\n-         ':lucene:analysis:stempel',\n-         ':lucene:backward-codecs',\n-         ':lucene:codecs',\n-         ':lucene:expressions',\n-         ':lucene:suggest',\n-         ':lucene:grouping',\n-         ':lucene:join',\n-         ':lucene:queries',\n-         ':lucene:queryparser',\n-         ':lucene:highlighter',\n-         ':lucene:memory',\n-         ':lucene:misc',\n-         ':lucene:classification',\n-         ':lucene:spatial-extras'].collect { path ->\n-          dependsOn \"${path}:renderJavadoc\"\n-          linkProjects += [ path ]\n-        }\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+        ':lucene:core',\n+        ':lucene:analysis:common',\n+        ':lucene:analysis:icu',\n+        ':lucene:analysis:kuromoji',\n+        ':lucene:analysis:nori',\n+        ':lucene:analysis:morfologik',\n+        ':lucene:analysis:phonetic',\n+        ':lucene:analysis:smartcn',\n+        ':lucene:analysis:stempel',\n+        ':lucene:backward-codecs',\n+        ':lucene:codecs',\n+        ':lucene:expressions',\n+        ':lucene:suggest',\n+        ':lucene:grouping',\n+        ':lucene:join',\n+        ':lucene:queries',\n+        ':lucene:queryparser',\n+        ':lucene:highlighter',\n+        ':lucene:memory',\n+        ':lucene:misc',\n+        ':lucene:classification',\n+        ':lucene:spatial-extras'\n+    )\n   }\n }\n \n configure(project(':solr:core')) {\n-  plugins.withType(JavaPlugin) {\n-    // specialized to ONLY depend on solrj\n-    renderJavadoc {\n-      [':solr:solrj'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    // Specialized to ONLY depend on solrj\n+    addLinkedProject(':solr:solrj')\n   }\n }\n \n configure(subprojects.findAll { it.path.startsWith(':solr:contrib') }) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':solr:solrj', ':solr:core'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+        ':solr:solrj',\n+        ':solr:core'\n+    )\n   }\n }\n \n configure(project(':solr:contrib:dataimporthandler-extras')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':solr:contrib:dataimporthandler'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':solr:contrib:dataimporthandler')\n   }\n }\n \n configure(project(':solr:test-framework')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      linkJUnit = true\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    linkJUnit = true\n   }\n }\n \n-\n-configure(subprojects.findAll { it.path in [':solr:solr-ref-guide', ':solr:server', ':solr:webapp']}) {\n-  afterEvaluate {\n-    project.tasks.findByPath(\"renderJavadoc\").enabled = false\n+// Disable Javadoc rendering for these projects.\n+configure(subprojects.findAll { it.path in [\n+    ':solr:solr-ref-guide',\n+    ':solr:server',\n+    ':solr:webapp']}) {\n+  project.tasks.withType(RenderJavadocTask) {\n+    enabled = false\n   }\n }\n \n+\n class RenderJavadocTask extends DefaultTask {\n   @InputFiles\n   @SkipWhenEmpty\n   SourceDirectorySet srcDirSet;\n   \n   @OutputDirectory\n-  File outputDir;\n-  \n+  File outputDir\n+\n   @InputFiles\n   @Classpath\n-  FileCollection classpath;\n+  FileCollection classpath\n   \n   @Input\n-  boolean linksource = false;\n+  boolean linksource = false\n   \n   @Input\n-  boolean linkJUnit = false;\n+  boolean linkJUnit = false\n   \n   @Input\n-  boolean relativeProjectLinks = false;\n+  boolean relativeProjectLinks = false\n \n   @Input\n-  def linkProjects = [];\n-  \n+  def linkedProjectNames = []", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzczMDcyNw=="}, "originalCommit": {"oid": "35895f2f08577de8ed0597fd051bc094f18c7158"}, "originalPosition": 427}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTQxMjY3OnYy", "diffSide": "RIGHT", "path": "gradle/render-javadoc.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNDoyNzoyNVrOGUhA8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNzoxNjo0N1rOGUkalQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2NTYxNg==", "bodyText": "Would it be better to use Unix terminology \"dir\" or \"directory\" for variable names ?", "url": "https://github.com/apache/lucene-solr/pull/1488#discussion_r424165616", "createdAt": "2020-05-13T04:27:25Z", "author": {"login": "mocobeta"}, "path": "gradle/render-javadoc.gradle", "diffHunk": "@@ -39,394 +35,398 @@ allprojects {\n       dependsOn \"renderJavadoc\"\n     }\n \n-    task renderJavadoc {\n+    task renderJavadoc(type: RenderJavadocTask) {\n       description \"Generates Javadoc API documentation for the main source code. This directly invokes javadoc tool.\"\n       group \"documentation\"\n \n-      ext {\n-        linksource = false\n-        linkJUnit = false\n-        linkLuceneProjects = []\n-        linkSorlProjects = []\n-      }\n-\n       dependsOn sourceSets.main.compileClasspath\n \n-      inputs.files { sourceSets.main.java.asFileTree }\n-      outputs.dir project.javadoc.destinationDir\n-\n-      def libName = project.path.startsWith(\":lucene\") ? \"Lucene\" : \"Solr\"\n-      def title = \"${libName} ${project.version} ${project.name} API\".toString()\n-\n-      // absolute urls for \"-linkoffline\" option\n-      def javaSEDocUrl = \"https://docs.oracle.com/en/java/javase/11/docs/api/\"\n-      def junitDocUrl = \"https://junit.org/junit4/javadoc/4.12/\"\n-      def luceneDocUrl = \"https://lucene.apache.org/core/${project.version.replace(\".\", \"_\")}\".toString()\n-      def solrDocUrl = \"https://lucene.apache.org/solr/${project.version.replace(\".\", \"_\")}\".toString()\n-\n-      def javadocCmd = org.gradle.internal.jvm.Jvm.current().getJavadocExecutable()\n-      \n-      doFirst {\n-        def srcDirs = sourceSets.main.java.srcDirs.findAll { dir -> dir.exists() }\n-        def optionsFile = file(\"${getTemporaryDir()}/javadoc-options.txt\")\n-\n-        def opts = []\n-        opts << [ '-overview', file(\"src/java/overview.html\") ]\n-        opts << [ '-sourcepath', srcDirs.join(File.pathSeparator) ]\n-        opts << [ '-subpackages', project.path.startsWith(':lucene') ? 'org.apache.lucene' : 'org.apache.solr' ]\n-        opts << [ '-d', project.javadoc.destinationDir ]\n-        opts << '-protected'\n-        opts << [ '-encoding', 'UTF-8' ]\n-        opts << [ '-charset', 'UTF-8' ]\n-        opts << [ '-docencoding', 'UTF-8' ]\n-        opts << '-noindex'\n-        opts << '-author'\n-        opts << '-version'\n-        if (linksource) {\n-          opts << '-linksource'\n-        }\n-        opts << '-use'\n-        opts << [ '-locale', 'en_US' ]\n-        opts << [ '-windowtitle', title ]\n-        opts << [ '-doctitle', title ]\n-        if (!sourceSets.main.compileClasspath.isEmpty()) {\n-          opts << [ '-classpath', sourceSets.main.compileClasspath.asPath ]\n-        }\n-        opts << [ '-bottom', \"<i>Copyright &copy; 2000-${buildYear} Apache Software Foundation. All Rights Reserved.</i>\" ]\n-\n-        opts << [ '-tag', 'lucene.experimental:a:WARNING: This API is experimental and might change in incompatible ways in the next release.' ]\n-        opts << [ '-tag', 'lucene.internal:a:NOTE: This API is for internal purposes only and might change in incompatible ways in the next release.' ]\n-        opts << [ '-tag', \"lucene.spi:t:SPI Name (case-insensitive: if the name is 'htmlStrip', 'htmlstrip' can be used when looking up the service).\" ]\n-\n-        // resolve links to JavaSE and JUnit API\n-        opts << [ '-linkoffline', javaSEDocUrl, project(':lucene').file('tools/javadoc/java11/') ]\n-        if (linkJUnit) {\n-          opts << [ '-linkoffline', junitDocUrl, project(':lucene').file('tools/javadoc/junit/') ]\n-        }\n-        // resolve inter-project links\n-        linkLuceneProjects.collect { path ->\n-          opts << [ '-linkoffline', \"${luceneDocUrl}/${pathToDocdir(path)}\", file(project(path).javadoc.destinationDir) ]\n-        }\n-        linkSorlProjects.collect { path ->\n-          opts << [ '-linkoffline', \"${solrDocUrl}/${pathToDocdir(path)}\", file(project(path).javadoc.destinationDir) ]\n-        }\n-\n-        opts << [ '--release', 11 ]\n-        opts << '-Xdoclint:all,-missing'\n-\n-        // Temporary file that holds all javadoc options for the current task.\n-        String optionsStr = opts.stream()\n-          .map{ (it instanceof List) ? it.stream().map{it as String}.map(escapeJavadocOption).collect(Collectors.joining(' ')) : escapeJavadocOption(it as String)}\n-          .collect(Collectors.joining('\\n'));\n-        optionsFile.write(optionsStr, 'UTF-8')\n+      srcDirSet = sourceSets.main.java;\n+      outputDir = project.javadoc.destinationDir;\n+      classpath = sourceSets.main.compileClasspath;\n+    }\n \n-        def outputFile = file(\"${getTemporaryDir()}/javadoc-output.txt\")\n-        def result\n-        outputFile.withOutputStream { output ->\n-          result = project.exec {\n-            executable javadocCmd\n+    task renderSiteJavadoc(type: RenderJavadocTask) {\n+      description \"Generates Javadoc API documentation for the site (relative links).\"\n+      group \"documentation\"\n \n-            standardOutput = output\n-            errorOutput = output\n+      dependsOn sourceSets.main.compileClasspath\n \n-            args += [ \"@${optionsFile}\" ]\n+      srcDirSet = sourceSets.main.java;\n+      classpath = sourceSets.main.compileClasspath;\n \n-            // -J flags can't be passed via options file... (an error \"javadoc: error - invalid flag: -J-Xmx512m\" occurs.)\n-            args += [ \"-J-Xmx512m\" ]\n-            // force locale to be \"en_US\" (fix for: https://bugs.openjdk.java.net/browse/JDK-8222793)\n-            args += [ \"-J-Duser.language=en\", \"-J-Duser.country=US\" ]\n+      relativeProjectLinks = true\n \n-            ignoreExitValue true\n-          }\n-        }\n+      // TODO: proof of concept to place everything in one folder under root's build dir.\n+      outputDir = rootProject.file(\"${rootProject.buildDir}/site-docs\").toPath().resolve(project.relativeDocPath).toFile()\n+    }\n+  }\n+}\n \n-        if (result.getExitValue() != 0) {\n-          // Pipe the output to console. Intentionally skips any encoding conversion \n-          // and pumps raw bytes.\n-          System.out.write(outputFile.bytes)\n-\n-          def cause\n-          try {\n-            result.rethrowFailure()\n-          } catch (ex) {\n-            cause = ex\n-          }\n-          throw new GradleException(\"Javadoc generation failed for ${project.path},\\n  Options file at: ${optionsFile}\\n  Command output at: ${outputFile}\", cause)\n-        }\n+// Set up titles and link up some offline docs for all documentation\n+// (they may be unused but this doesn't do any harm).\n+def javaJavadocPackages = project.project(':lucene').file('tools/javadoc/java11/')\n+def junitJavadocPackages = project.project(':lucene').file('tools/javadoc/junit/')\n+allprojects {\n+  project.tasks.withType(RenderJavadocTask) {\n+    title = \"${project.path.startsWith(':lucene') ? 'Lucene' : 'Solr'} ${project.version} ${project.name} API\"\n \n-        // append some special table css, prettify css\n-        ant.concat(destfile: \"${project.javadoc.destinationDir}/stylesheet.css\", append: \"true\", fixlastline: \"true\", encoding: \"UTF-8\") {\n-          filelist(dir: project(\":lucene\").file(\"tools/javadoc\"), files: \"table_padding.css\")\n-          filelist(dir: project(\":lucene\").file(\"tools/prettify\"), files: \"prettify.css\")\n-        }\n-        // append prettify to scripts\n-        ant.concat(destfile: \"${project.javadoc.destinationDir}/script.js\", append: \"true\", fixlastline: \"true\", encoding: \"UTF-8\") {\n-          filelist(dir: project(':lucene').file(\"tools/prettify\"), files: \"prettify.js inject-javadocs.js\")\n-        }\n-        ant.fixcrlf(srcdir: project.javadoc.destinationDir, includes: \"stylesheet.css script.js\", eol: \"lf\", fixlast: \"true\", encoding: \"UTF-8\")\n+    offlineLinks += [\n+        \"https://docs.oracle.com/en/java/javase/11/docs/api/\": javaJavadocPackages,\n+        \"https://junit.org/junit4/javadoc/4.12/\": junitJavadocPackages\n+    ]\n+  }\n+}\n \n-      }\n+// Fix for Java 11 Javadoc tool that cannot handle split packages between modules correctly.\n+// (by removing all the packages which are part of lucene-core)\n+// See: https://issues.apache.org/jira/browse/LUCENE-8738?focusedCommentId=16818106&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16818106\n+configure(subprojects.findAll { it.path.startsWith(':lucene') && it.path != ':lucene:core' }) {\n+  project.tasks.withType(RenderJavadocTask) {\n+    doLast {\n+      Set luceneCorePackages = file(\"${project(':lucene:core').tasks[name].outputDir}/element-list\").readLines('UTF-8').toSet();\n+      File elementFile = file(\"${outputDir}/element-list\");\n+      List elements = elementFile.readLines('UTF-8');\n+      elements.removeAll(luceneCorePackages)\n+      elementFile.write(elements.join('\\n').concat('\\n'), 'UTF-8');\n     }\n   }\n }\n \n+// Add cross-project documentation task dependencies and link generation.\n configure(subprojects.findAll { it.path.startsWith(':lucene') && it.path != ':lucene:core' }) {\n-\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:core'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkLuceneProjects += [ path ]\n-      }\n-\n-      doLast {\n-        // fix for Java 11 Javadoc tool that cannot handle split packages between modules correctly (by removing all the packages which are part of lucene-core)\n-        // problem description: [https://issues.apache.org/jira/browse/LUCENE-8738?focusedCommentId=16818106&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16818106]\n-        ant.local(name: \"element-list-regex\") // contains a regex for all package names which are in lucene-core's javadoc\n-        ant.loadfile(property: \"element-list-regex\", srcFile: \"${project(':lucene:core').javadoc.destinationDir}/element-list\", encoding: \"utf-8\") {\n-          filterchain {\n-            tokenfilter(delimoutput: \"|\") {\n-              replacestring(from: \".\", to: \"\\\\.\")\n-            }\n-          }\n-        }\n-        ant.replaceregexp(\n-            encoding: \"UTF-8\",\n-            file: \"${project.javadoc.destinationDir}/element-list\",\n-            byline: \"true\",\n-            match: \"^(\\${element-list-regex})\\$\",\n-            replace: \"\")\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:core')\n   }\n }\n \n configure(subprojects.findAll { it.path.startsWith(':lucene:analysis') && it.path != ':lucene:analysis:common'}) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:analysis:common'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkLuceneProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:analysis:common')\n   }\n }\n \n configure(project(':lucene:benchmark')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:memory',\n-       ':lucene:highlighter',\n-       ':lucene:analysis:common',\n-       ':lucene:queryparser',\n-       ':lucene:facet',\n-       ':lucene:spatial-extras'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkLuceneProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+        ':lucene:memory',\n+        ':lucene:highlighter',\n+        ':lucene:analysis:common',\n+        ':lucene:queryparser',\n+        ':lucene:facet',\n+        ':lucene:spatial-extras')\n   }\n }\n \n configure(project(':lucene:classification')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:queries', ':lucene:analysis:common', ':lucene:grouping'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkLuceneProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+       ':lucene:queries',\n+       ':lucene:analysis:common',\n+       ':lucene:grouping')\n   }\n }\n \n configure(project(':lucene:demo')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:analysis:common',\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+       ':lucene:analysis:common',\n        ':lucene:queryparser',\n        ':lucene:queries',\n        ':lucene:facet',\n-       ':lucene:expressions'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkLuceneProjects += [ path ]\n-      }\n+       ':lucene:expressions')\n \n-      // we link the example source in the javadocs, as it's ref'ed elsewhere\n-      linksource = true\n-    }\n+    // For the demo, we link the example source in the javadocs, as it's ref'ed elsewhere\n+    linksource = true\n   }\n }\n \n configure(project(':lucene:grouping')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:queries'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkLuceneProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:queries')\n   }\n }\n \n configure(project(':lucene:highlighter')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:memory'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkLuceneProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:memory')\n   }\n }\n \n configure(project(':lucene:monitor')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:memory', ':lucene:analysis:common', ':lucene:queryparser'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkLuceneProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+        ':lucene:memory',\n+        ':lucene:analysis:common',\n+        ':lucene:queryparser')\n   }\n }\n \n configure(project(':lucene:queryparser')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:queries', ':lucene:sandbox'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkLuceneProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+        ':lucene:queries',\n+        ':lucene:sandbox'\n+    )\n   }\n }\n \n configure(project(':lucene:replicator')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:facet'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkLuceneProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:facet')\n   }\n }\n \n configure(project(':lucene:spatial-extras')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:spatial3d'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkLuceneProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:spatial3d')\n   }\n }\n \n configure(project(':lucene:suggest')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:analysis:common'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkLuceneProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:analysis:common')\n   }\n }\n \n configure(project(':lucene:test-framework')) {\n-  plugins.withType(JavaPlugin) {\n-\n-    renderJavadoc {\n-      [':lucene:codecs'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkLuceneProjects += [ path ]\n-      }\n-      linkJUnit = true\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:codecs')\n   }\n }\n \n configure(subprojects.findAll { it.path.startsWith(':solr') }) {\n-  plugins.withType(JavaPlugin) {\n-    def hasJavdocsTask = project.tasks.collect { it.name }.contains('renderJavadoc')\n-    if (hasJavdocsTask) {\n-      renderJavadoc {\n-        [':lucene:core',\n-         ':lucene:analysis:common',\n-         ':lucene:analysis:icu',\n-         ':lucene:analysis:kuromoji',\n-         ':lucene:analysis:nori',\n-         ':lucene:analysis:morfologik',\n-         ':lucene:analysis:phonetic',\n-         ':lucene:analysis:smartcn',\n-         ':lucene:analysis:stempel',\n-         ':lucene:backward-codecs',\n-         ':lucene:codecs',\n-         ':lucene:expressions',\n-         ':lucene:suggest',\n-         ':lucene:grouping',\n-         ':lucene:join',\n-         ':lucene:queries',\n-         ':lucene:queryparser',\n-         ':lucene:highlighter',\n-         ':lucene:memory',\n-         ':lucene:misc',\n-         ':lucene:classification',\n-         ':lucene:spatial-extras'].collect { path ->\n-          dependsOn \"${path}:renderJavadoc\"\n-          linkLuceneProjects += [ path ]\n-        }\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+        ':lucene:core',\n+        ':lucene:analysis:common',\n+        ':lucene:analysis:icu',\n+        ':lucene:analysis:kuromoji',\n+        ':lucene:analysis:nori',\n+        ':lucene:analysis:morfologik',\n+        ':lucene:analysis:phonetic',\n+        ':lucene:analysis:smartcn',\n+        ':lucene:analysis:stempel',\n+        ':lucene:backward-codecs',\n+        ':lucene:codecs',\n+        ':lucene:expressions',\n+        ':lucene:suggest',\n+        ':lucene:grouping',\n+        ':lucene:join',\n+        ':lucene:queries',\n+        ':lucene:queryparser',\n+        ':lucene:highlighter',\n+        ':lucene:memory',\n+        ':lucene:misc',\n+        ':lucene:classification',\n+        ':lucene:spatial-extras'\n+    )\n   }\n }\n \n configure(project(':solr:core')) {\n-  plugins.withType(JavaPlugin) {\n-    // specialized to ONLY depend on solrj\n-    renderJavadoc {\n-      [':solr:solrj'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkSorlProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    // Specialized to ONLY depend on solrj\n+    addLinkedProject(':solr:solrj')\n   }\n }\n \n configure(subprojects.findAll { it.path.startsWith(':solr:contrib') }) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':solr:solrj', ':solr:core'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkSorlProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+        ':solr:solrj',\n+        ':solr:core'\n+    )\n   }\n }\n \n configure(project(':solr:contrib:dataimporthandler-extras')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':solr:contrib:dataimporthandler'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkSorlProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':solr:contrib:dataimporthandler')\n   }\n }\n \n-configure(project(':solr:test-framework')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      linkJUnit = true\n-    }\n+// Disable Javadoc rendering for these projects.\n+configure(subprojects.findAll { it.path in [\n+    ':solr:solr-ref-guide',\n+    ':solr:server',\n+    ':solr:webapp']}) {\n+  project.tasks.withType(RenderJavadocTask) {\n+    enabled = false\n   }\n }\n \n \n-configure(subprojects.findAll { it.path in [':solr:solr-ref-guide', ':solr:server', ':solr:webapp']}) {\n-  afterEvaluate {\n-    project.tasks.findByPath(\"renderJavadoc\").enabled = false\n+class RenderJavadocTask extends DefaultTask {\n+  @InputFiles\n+  @SkipWhenEmpty\n+  SourceDirectorySet srcDirSet;\n+  \n+  @OutputDirectory\n+  File outputDir\n+\n+  @InputFiles\n+  @Classpath\n+  FileCollection classpath\n+\n+  @Input\n+  String title\n+\n+  @Input\n+  boolean linksource = false\n+\n+  @Input\n+  boolean relativeProjectLinks = false\n+\n+  @Input\n+  def linkedProjectNames = []\n+  def linkedProjects = []\n+\n+  @Input\n+  def offlineLinks = [:]\n+\n+  @Input\n+  def luceneDocUrl = project.propertyOrDefault('lucene.javadoc.url', \"https://lucene.apache.org/core/${project.baseVersion.replace(\".\", \"_\")}\")\n+\n+  @Input\n+  def solrDocUrl = project.propertyOrDefault('solr.javadoc.url', \"https://lucene.apache.org/solr/${project.baseVersion.replace(\".\", \"_\")}\")\n+\n+  public addLinkedProject(String... projectPaths) {\n+    projectPaths.each { otherProjectPath ->\n+      // We want to depend on the task of the same name in the other project.\n+      def myName = name\n+      def otherProject = project.findProject(otherProjectPath)\n+      def otherTasks = otherProject.tasks.matching { it.name == myName }\n+      dependsOn otherTasks\n+\n+      // Create a cross-link between documentation.\n+      linkedProjects.add(otherProject)\n+      linkedProjectNames.add(otherProjectPath)\n+    }\n+  }\n+\n+  @TaskAction\n+  public void render() {\n+    def javadocCmd = org.gradle.internal.jvm.Jvm.current().getJavadocExecutable()\n+\n+    def srcDirs = srcDirSet.srcDirs.findAll { dir -> dir.exists() }\n+    def optionsFile = project.file(\"${getTemporaryDir()}/javadoc-options.txt\")\n+    \n+    def opts = []\n+    opts << [ '-overview', project.file(\"${srcDirs[0]}/overview.html\") ]\n+    opts << [ '-sourcepath', srcDirs.join(File.pathSeparator) ]\n+    opts << [ '-subpackages', project.path.startsWith(':lucene') ? 'org.apache.lucene' : 'org.apache.solr' ]\n+    opts << [ '-d', outputDir ]\n+    opts << '-protected'\n+    opts << [ '-encoding', 'UTF-8' ]\n+    opts << [ '-charset', 'UTF-8' ]\n+    opts << [ '-docencoding', 'UTF-8' ]\n+    opts << '-noindex'\n+    opts << '-author'\n+    opts << '-version'\n+    if (linksource) {\n+      opts << '-linksource'\n+    }\n+    opts << '-use'\n+    opts << [ '-locale', 'en_US' ]\n+    opts << [ '-windowtitle', title ]\n+    opts << [ '-doctitle', title ]\n+    if (!classpath.isEmpty()) {\n+      opts << [ '-classpath', classpath.asPath ]\n+    }\n+    opts << [ '-bottom', \"<i>Copyright &copy; 2000-${project.buildYear} Apache Software Foundation. All Rights Reserved.</i>\" ]\n+\n+    opts << [ '-tag', 'lucene.experimental:a:WARNING: This API is experimental and might change in incompatible ways in the next release.' ]\n+    opts << [ '-tag', 'lucene.internal:a:NOTE: This API is for internal purposes only and might change in incompatible ways in the next release.' ]\n+    opts << [ '-tag', \"lucene.spi:t:SPI Name (case-insensitive: if the name is 'htmlStrip', 'htmlstrip' can be used when looking up the service).\" ]\n+\n+    def allOfflineLinks = [:]\n+    allOfflineLinks.putAll(offlineLinks)\n+\n+    // Resolve inter-project links.\n+    linkedProjects.collect { otherProject ->\n+      // For relative links we compute the actual relative link between projects.\n+      // TODO: if we don't want relative Solr-Lucene links we need to add a condition here\n+      // and it'll just render as an offline link.\n+      if (relativeProjectLinks) {\n+        def pathTo = otherProject.tasks[name].outputDir.toPath().toAbsolutePath()\n+        def pathFrom = outputDir.toPath().toAbsolutePath()\n+        def relative = pathFrom.relativize(pathTo).toString().replace(File.separator, '/')\n+        opts << [ '-link', relative ]\n+      } else {\n+        // For absolute links, we determine the target URL by assembling the full URL.\n+        def base = otherProject.path.startsWith(\":lucene\") ? luceneDocUrl : solrDocUrl\n+        allOfflineLinks.put(\"${base}/${otherProject.relativeDocPath}/\".toString(), otherProject.tasks[name].outputDir)\n+      }\n+    }\n+\n+    // Add offline links.\n+    // TODO: add some sanity check/ validation here to ensure folder/package-list or folder/element-list is present?\n+    allOfflineLinks.each { url, folder ->\n+      opts << [ '-linkoffline', url, folder ]\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9371b9715da9343a61192435a094a3f68e606516"}, "originalPosition": 648}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIyMTMzMw==", "bodyText": "Sure, I don't mind. :) Sorry for lack of consistency.", "url": "https://github.com/apache/lucene-solr/pull/1488#discussion_r424221333", "createdAt": "2020-05-13T07:16:47Z", "author": {"login": "dweiss"}, "path": "gradle/render-javadoc.gradle", "diffHunk": "@@ -39,394 +35,398 @@ allprojects {\n       dependsOn \"renderJavadoc\"\n     }\n \n-    task renderJavadoc {\n+    task renderJavadoc(type: RenderJavadocTask) {\n       description \"Generates Javadoc API documentation for the main source code. This directly invokes javadoc tool.\"\n       group \"documentation\"\n \n-      ext {\n-        linksource = false\n-        linkJUnit = false\n-        linkLuceneProjects = []\n-        linkSorlProjects = []\n-      }\n-\n       dependsOn sourceSets.main.compileClasspath\n \n-      inputs.files { sourceSets.main.java.asFileTree }\n-      outputs.dir project.javadoc.destinationDir\n-\n-      def libName = project.path.startsWith(\":lucene\") ? \"Lucene\" : \"Solr\"\n-      def title = \"${libName} ${project.version} ${project.name} API\".toString()\n-\n-      // absolute urls for \"-linkoffline\" option\n-      def javaSEDocUrl = \"https://docs.oracle.com/en/java/javase/11/docs/api/\"\n-      def junitDocUrl = \"https://junit.org/junit4/javadoc/4.12/\"\n-      def luceneDocUrl = \"https://lucene.apache.org/core/${project.version.replace(\".\", \"_\")}\".toString()\n-      def solrDocUrl = \"https://lucene.apache.org/solr/${project.version.replace(\".\", \"_\")}\".toString()\n-\n-      def javadocCmd = org.gradle.internal.jvm.Jvm.current().getJavadocExecutable()\n-      \n-      doFirst {\n-        def srcDirs = sourceSets.main.java.srcDirs.findAll { dir -> dir.exists() }\n-        def optionsFile = file(\"${getTemporaryDir()}/javadoc-options.txt\")\n-\n-        def opts = []\n-        opts << [ '-overview', file(\"src/java/overview.html\") ]\n-        opts << [ '-sourcepath', srcDirs.join(File.pathSeparator) ]\n-        opts << [ '-subpackages', project.path.startsWith(':lucene') ? 'org.apache.lucene' : 'org.apache.solr' ]\n-        opts << [ '-d', project.javadoc.destinationDir ]\n-        opts << '-protected'\n-        opts << [ '-encoding', 'UTF-8' ]\n-        opts << [ '-charset', 'UTF-8' ]\n-        opts << [ '-docencoding', 'UTF-8' ]\n-        opts << '-noindex'\n-        opts << '-author'\n-        opts << '-version'\n-        if (linksource) {\n-          opts << '-linksource'\n-        }\n-        opts << '-use'\n-        opts << [ '-locale', 'en_US' ]\n-        opts << [ '-windowtitle', title ]\n-        opts << [ '-doctitle', title ]\n-        if (!sourceSets.main.compileClasspath.isEmpty()) {\n-          opts << [ '-classpath', sourceSets.main.compileClasspath.asPath ]\n-        }\n-        opts << [ '-bottom', \"<i>Copyright &copy; 2000-${buildYear} Apache Software Foundation. All Rights Reserved.</i>\" ]\n-\n-        opts << [ '-tag', 'lucene.experimental:a:WARNING: This API is experimental and might change in incompatible ways in the next release.' ]\n-        opts << [ '-tag', 'lucene.internal:a:NOTE: This API is for internal purposes only and might change in incompatible ways in the next release.' ]\n-        opts << [ '-tag', \"lucene.spi:t:SPI Name (case-insensitive: if the name is 'htmlStrip', 'htmlstrip' can be used when looking up the service).\" ]\n-\n-        // resolve links to JavaSE and JUnit API\n-        opts << [ '-linkoffline', javaSEDocUrl, project(':lucene').file('tools/javadoc/java11/') ]\n-        if (linkJUnit) {\n-          opts << [ '-linkoffline', junitDocUrl, project(':lucene').file('tools/javadoc/junit/') ]\n-        }\n-        // resolve inter-project links\n-        linkLuceneProjects.collect { path ->\n-          opts << [ '-linkoffline', \"${luceneDocUrl}/${pathToDocdir(path)}\", file(project(path).javadoc.destinationDir) ]\n-        }\n-        linkSorlProjects.collect { path ->\n-          opts << [ '-linkoffline', \"${solrDocUrl}/${pathToDocdir(path)}\", file(project(path).javadoc.destinationDir) ]\n-        }\n-\n-        opts << [ '--release', 11 ]\n-        opts << '-Xdoclint:all,-missing'\n-\n-        // Temporary file that holds all javadoc options for the current task.\n-        String optionsStr = opts.stream()\n-          .map{ (it instanceof List) ? it.stream().map{it as String}.map(escapeJavadocOption).collect(Collectors.joining(' ')) : escapeJavadocOption(it as String)}\n-          .collect(Collectors.joining('\\n'));\n-        optionsFile.write(optionsStr, 'UTF-8')\n+      srcDirSet = sourceSets.main.java;\n+      outputDir = project.javadoc.destinationDir;\n+      classpath = sourceSets.main.compileClasspath;\n+    }\n \n-        def outputFile = file(\"${getTemporaryDir()}/javadoc-output.txt\")\n-        def result\n-        outputFile.withOutputStream { output ->\n-          result = project.exec {\n-            executable javadocCmd\n+    task renderSiteJavadoc(type: RenderJavadocTask) {\n+      description \"Generates Javadoc API documentation for the site (relative links).\"\n+      group \"documentation\"\n \n-            standardOutput = output\n-            errorOutput = output\n+      dependsOn sourceSets.main.compileClasspath\n \n-            args += [ \"@${optionsFile}\" ]\n+      srcDirSet = sourceSets.main.java;\n+      classpath = sourceSets.main.compileClasspath;\n \n-            // -J flags can't be passed via options file... (an error \"javadoc: error - invalid flag: -J-Xmx512m\" occurs.)\n-            args += [ \"-J-Xmx512m\" ]\n-            // force locale to be \"en_US\" (fix for: https://bugs.openjdk.java.net/browse/JDK-8222793)\n-            args += [ \"-J-Duser.language=en\", \"-J-Duser.country=US\" ]\n+      relativeProjectLinks = true\n \n-            ignoreExitValue true\n-          }\n-        }\n+      // TODO: proof of concept to place everything in one folder under root's build dir.\n+      outputDir = rootProject.file(\"${rootProject.buildDir}/site-docs\").toPath().resolve(project.relativeDocPath).toFile()\n+    }\n+  }\n+}\n \n-        if (result.getExitValue() != 0) {\n-          // Pipe the output to console. Intentionally skips any encoding conversion \n-          // and pumps raw bytes.\n-          System.out.write(outputFile.bytes)\n-\n-          def cause\n-          try {\n-            result.rethrowFailure()\n-          } catch (ex) {\n-            cause = ex\n-          }\n-          throw new GradleException(\"Javadoc generation failed for ${project.path},\\n  Options file at: ${optionsFile}\\n  Command output at: ${outputFile}\", cause)\n-        }\n+// Set up titles and link up some offline docs for all documentation\n+// (they may be unused but this doesn't do any harm).\n+def javaJavadocPackages = project.project(':lucene').file('tools/javadoc/java11/')\n+def junitJavadocPackages = project.project(':lucene').file('tools/javadoc/junit/')\n+allprojects {\n+  project.tasks.withType(RenderJavadocTask) {\n+    title = \"${project.path.startsWith(':lucene') ? 'Lucene' : 'Solr'} ${project.version} ${project.name} API\"\n \n-        // append some special table css, prettify css\n-        ant.concat(destfile: \"${project.javadoc.destinationDir}/stylesheet.css\", append: \"true\", fixlastline: \"true\", encoding: \"UTF-8\") {\n-          filelist(dir: project(\":lucene\").file(\"tools/javadoc\"), files: \"table_padding.css\")\n-          filelist(dir: project(\":lucene\").file(\"tools/prettify\"), files: \"prettify.css\")\n-        }\n-        // append prettify to scripts\n-        ant.concat(destfile: \"${project.javadoc.destinationDir}/script.js\", append: \"true\", fixlastline: \"true\", encoding: \"UTF-8\") {\n-          filelist(dir: project(':lucene').file(\"tools/prettify\"), files: \"prettify.js inject-javadocs.js\")\n-        }\n-        ant.fixcrlf(srcdir: project.javadoc.destinationDir, includes: \"stylesheet.css script.js\", eol: \"lf\", fixlast: \"true\", encoding: \"UTF-8\")\n+    offlineLinks += [\n+        \"https://docs.oracle.com/en/java/javase/11/docs/api/\": javaJavadocPackages,\n+        \"https://junit.org/junit4/javadoc/4.12/\": junitJavadocPackages\n+    ]\n+  }\n+}\n \n-      }\n+// Fix for Java 11 Javadoc tool that cannot handle split packages between modules correctly.\n+// (by removing all the packages which are part of lucene-core)\n+// See: https://issues.apache.org/jira/browse/LUCENE-8738?focusedCommentId=16818106&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16818106\n+configure(subprojects.findAll { it.path.startsWith(':lucene') && it.path != ':lucene:core' }) {\n+  project.tasks.withType(RenderJavadocTask) {\n+    doLast {\n+      Set luceneCorePackages = file(\"${project(':lucene:core').tasks[name].outputDir}/element-list\").readLines('UTF-8').toSet();\n+      File elementFile = file(\"${outputDir}/element-list\");\n+      List elements = elementFile.readLines('UTF-8');\n+      elements.removeAll(luceneCorePackages)\n+      elementFile.write(elements.join('\\n').concat('\\n'), 'UTF-8');\n     }\n   }\n }\n \n+// Add cross-project documentation task dependencies and link generation.\n configure(subprojects.findAll { it.path.startsWith(':lucene') && it.path != ':lucene:core' }) {\n-\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:core'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkLuceneProjects += [ path ]\n-      }\n-\n-      doLast {\n-        // fix for Java 11 Javadoc tool that cannot handle split packages between modules correctly (by removing all the packages which are part of lucene-core)\n-        // problem description: [https://issues.apache.org/jira/browse/LUCENE-8738?focusedCommentId=16818106&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16818106]\n-        ant.local(name: \"element-list-regex\") // contains a regex for all package names which are in lucene-core's javadoc\n-        ant.loadfile(property: \"element-list-regex\", srcFile: \"${project(':lucene:core').javadoc.destinationDir}/element-list\", encoding: \"utf-8\") {\n-          filterchain {\n-            tokenfilter(delimoutput: \"|\") {\n-              replacestring(from: \".\", to: \"\\\\.\")\n-            }\n-          }\n-        }\n-        ant.replaceregexp(\n-            encoding: \"UTF-8\",\n-            file: \"${project.javadoc.destinationDir}/element-list\",\n-            byline: \"true\",\n-            match: \"^(\\${element-list-regex})\\$\",\n-            replace: \"\")\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:core')\n   }\n }\n \n configure(subprojects.findAll { it.path.startsWith(':lucene:analysis') && it.path != ':lucene:analysis:common'}) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:analysis:common'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkLuceneProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:analysis:common')\n   }\n }\n \n configure(project(':lucene:benchmark')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:memory',\n-       ':lucene:highlighter',\n-       ':lucene:analysis:common',\n-       ':lucene:queryparser',\n-       ':lucene:facet',\n-       ':lucene:spatial-extras'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkLuceneProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+        ':lucene:memory',\n+        ':lucene:highlighter',\n+        ':lucene:analysis:common',\n+        ':lucene:queryparser',\n+        ':lucene:facet',\n+        ':lucene:spatial-extras')\n   }\n }\n \n configure(project(':lucene:classification')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:queries', ':lucene:analysis:common', ':lucene:grouping'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkLuceneProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+       ':lucene:queries',\n+       ':lucene:analysis:common',\n+       ':lucene:grouping')\n   }\n }\n \n configure(project(':lucene:demo')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:analysis:common',\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+       ':lucene:analysis:common',\n        ':lucene:queryparser',\n        ':lucene:queries',\n        ':lucene:facet',\n-       ':lucene:expressions'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkLuceneProjects += [ path ]\n-      }\n+       ':lucene:expressions')\n \n-      // we link the example source in the javadocs, as it's ref'ed elsewhere\n-      linksource = true\n-    }\n+    // For the demo, we link the example source in the javadocs, as it's ref'ed elsewhere\n+    linksource = true\n   }\n }\n \n configure(project(':lucene:grouping')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:queries'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkLuceneProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:queries')\n   }\n }\n \n configure(project(':lucene:highlighter')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:memory'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkLuceneProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:memory')\n   }\n }\n \n configure(project(':lucene:monitor')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:memory', ':lucene:analysis:common', ':lucene:queryparser'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkLuceneProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+        ':lucene:memory',\n+        ':lucene:analysis:common',\n+        ':lucene:queryparser')\n   }\n }\n \n configure(project(':lucene:queryparser')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:queries', ':lucene:sandbox'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkLuceneProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+        ':lucene:queries',\n+        ':lucene:sandbox'\n+    )\n   }\n }\n \n configure(project(':lucene:replicator')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:facet'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkLuceneProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:facet')\n   }\n }\n \n configure(project(':lucene:spatial-extras')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:spatial3d'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkLuceneProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:spatial3d')\n   }\n }\n \n configure(project(':lucene:suggest')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:analysis:common'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkLuceneProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:analysis:common')\n   }\n }\n \n configure(project(':lucene:test-framework')) {\n-  plugins.withType(JavaPlugin) {\n-\n-    renderJavadoc {\n-      [':lucene:codecs'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkLuceneProjects += [ path ]\n-      }\n-      linkJUnit = true\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:codecs')\n   }\n }\n \n configure(subprojects.findAll { it.path.startsWith(':solr') }) {\n-  plugins.withType(JavaPlugin) {\n-    def hasJavdocsTask = project.tasks.collect { it.name }.contains('renderJavadoc')\n-    if (hasJavdocsTask) {\n-      renderJavadoc {\n-        [':lucene:core',\n-         ':lucene:analysis:common',\n-         ':lucene:analysis:icu',\n-         ':lucene:analysis:kuromoji',\n-         ':lucene:analysis:nori',\n-         ':lucene:analysis:morfologik',\n-         ':lucene:analysis:phonetic',\n-         ':lucene:analysis:smartcn',\n-         ':lucene:analysis:stempel',\n-         ':lucene:backward-codecs',\n-         ':lucene:codecs',\n-         ':lucene:expressions',\n-         ':lucene:suggest',\n-         ':lucene:grouping',\n-         ':lucene:join',\n-         ':lucene:queries',\n-         ':lucene:queryparser',\n-         ':lucene:highlighter',\n-         ':lucene:memory',\n-         ':lucene:misc',\n-         ':lucene:classification',\n-         ':lucene:spatial-extras'].collect { path ->\n-          dependsOn \"${path}:renderJavadoc\"\n-          linkLuceneProjects += [ path ]\n-        }\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+        ':lucene:core',\n+        ':lucene:analysis:common',\n+        ':lucene:analysis:icu',\n+        ':lucene:analysis:kuromoji',\n+        ':lucene:analysis:nori',\n+        ':lucene:analysis:morfologik',\n+        ':lucene:analysis:phonetic',\n+        ':lucene:analysis:smartcn',\n+        ':lucene:analysis:stempel',\n+        ':lucene:backward-codecs',\n+        ':lucene:codecs',\n+        ':lucene:expressions',\n+        ':lucene:suggest',\n+        ':lucene:grouping',\n+        ':lucene:join',\n+        ':lucene:queries',\n+        ':lucene:queryparser',\n+        ':lucene:highlighter',\n+        ':lucene:memory',\n+        ':lucene:misc',\n+        ':lucene:classification',\n+        ':lucene:spatial-extras'\n+    )\n   }\n }\n \n configure(project(':solr:core')) {\n-  plugins.withType(JavaPlugin) {\n-    // specialized to ONLY depend on solrj\n-    renderJavadoc {\n-      [':solr:solrj'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkSorlProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    // Specialized to ONLY depend on solrj\n+    addLinkedProject(':solr:solrj')\n   }\n }\n \n configure(subprojects.findAll { it.path.startsWith(':solr:contrib') }) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':solr:solrj', ':solr:core'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkSorlProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+        ':solr:solrj',\n+        ':solr:core'\n+    )\n   }\n }\n \n configure(project(':solr:contrib:dataimporthandler-extras')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':solr:contrib:dataimporthandler'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkSorlProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':solr:contrib:dataimporthandler')\n   }\n }\n \n-configure(project(':solr:test-framework')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      linkJUnit = true\n-    }\n+// Disable Javadoc rendering for these projects.\n+configure(subprojects.findAll { it.path in [\n+    ':solr:solr-ref-guide',\n+    ':solr:server',\n+    ':solr:webapp']}) {\n+  project.tasks.withType(RenderJavadocTask) {\n+    enabled = false\n   }\n }\n \n \n-configure(subprojects.findAll { it.path in [':solr:solr-ref-guide', ':solr:server', ':solr:webapp']}) {\n-  afterEvaluate {\n-    project.tasks.findByPath(\"renderJavadoc\").enabled = false\n+class RenderJavadocTask extends DefaultTask {\n+  @InputFiles\n+  @SkipWhenEmpty\n+  SourceDirectorySet srcDirSet;\n+  \n+  @OutputDirectory\n+  File outputDir\n+\n+  @InputFiles\n+  @Classpath\n+  FileCollection classpath\n+\n+  @Input\n+  String title\n+\n+  @Input\n+  boolean linksource = false\n+\n+  @Input\n+  boolean relativeProjectLinks = false\n+\n+  @Input\n+  def linkedProjectNames = []\n+  def linkedProjects = []\n+\n+  @Input\n+  def offlineLinks = [:]\n+\n+  @Input\n+  def luceneDocUrl = project.propertyOrDefault('lucene.javadoc.url', \"https://lucene.apache.org/core/${project.baseVersion.replace(\".\", \"_\")}\")\n+\n+  @Input\n+  def solrDocUrl = project.propertyOrDefault('solr.javadoc.url', \"https://lucene.apache.org/solr/${project.baseVersion.replace(\".\", \"_\")}\")\n+\n+  public addLinkedProject(String... projectPaths) {\n+    projectPaths.each { otherProjectPath ->\n+      // We want to depend on the task of the same name in the other project.\n+      def myName = name\n+      def otherProject = project.findProject(otherProjectPath)\n+      def otherTasks = otherProject.tasks.matching { it.name == myName }\n+      dependsOn otherTasks\n+\n+      // Create a cross-link between documentation.\n+      linkedProjects.add(otherProject)\n+      linkedProjectNames.add(otherProjectPath)\n+    }\n+  }\n+\n+  @TaskAction\n+  public void render() {\n+    def javadocCmd = org.gradle.internal.jvm.Jvm.current().getJavadocExecutable()\n+\n+    def srcDirs = srcDirSet.srcDirs.findAll { dir -> dir.exists() }\n+    def optionsFile = project.file(\"${getTemporaryDir()}/javadoc-options.txt\")\n+    \n+    def opts = []\n+    opts << [ '-overview', project.file(\"${srcDirs[0]}/overview.html\") ]\n+    opts << [ '-sourcepath', srcDirs.join(File.pathSeparator) ]\n+    opts << [ '-subpackages', project.path.startsWith(':lucene') ? 'org.apache.lucene' : 'org.apache.solr' ]\n+    opts << [ '-d', outputDir ]\n+    opts << '-protected'\n+    opts << [ '-encoding', 'UTF-8' ]\n+    opts << [ '-charset', 'UTF-8' ]\n+    opts << [ '-docencoding', 'UTF-8' ]\n+    opts << '-noindex'\n+    opts << '-author'\n+    opts << '-version'\n+    if (linksource) {\n+      opts << '-linksource'\n+    }\n+    opts << '-use'\n+    opts << [ '-locale', 'en_US' ]\n+    opts << [ '-windowtitle', title ]\n+    opts << [ '-doctitle', title ]\n+    if (!classpath.isEmpty()) {\n+      opts << [ '-classpath', classpath.asPath ]\n+    }\n+    opts << [ '-bottom', \"<i>Copyright &copy; 2000-${project.buildYear} Apache Software Foundation. All Rights Reserved.</i>\" ]\n+\n+    opts << [ '-tag', 'lucene.experimental:a:WARNING: This API is experimental and might change in incompatible ways in the next release.' ]\n+    opts << [ '-tag', 'lucene.internal:a:NOTE: This API is for internal purposes only and might change in incompatible ways in the next release.' ]\n+    opts << [ '-tag', \"lucene.spi:t:SPI Name (case-insensitive: if the name is 'htmlStrip', 'htmlstrip' can be used when looking up the service).\" ]\n+\n+    def allOfflineLinks = [:]\n+    allOfflineLinks.putAll(offlineLinks)\n+\n+    // Resolve inter-project links.\n+    linkedProjects.collect { otherProject ->\n+      // For relative links we compute the actual relative link between projects.\n+      // TODO: if we don't want relative Solr-Lucene links we need to add a condition here\n+      // and it'll just render as an offline link.\n+      if (relativeProjectLinks) {\n+        def pathTo = otherProject.tasks[name].outputDir.toPath().toAbsolutePath()\n+        def pathFrom = outputDir.toPath().toAbsolutePath()\n+        def relative = pathFrom.relativize(pathTo).toString().replace(File.separator, '/')\n+        opts << [ '-link', relative ]\n+      } else {\n+        // For absolute links, we determine the target URL by assembling the full URL.\n+        def base = otherProject.path.startsWith(\":lucene\") ? luceneDocUrl : solrDocUrl\n+        allOfflineLinks.put(\"${base}/${otherProject.relativeDocPath}/\".toString(), otherProject.tasks[name].outputDir)\n+      }\n+    }\n+\n+    // Add offline links.\n+    // TODO: add some sanity check/ validation here to ensure folder/package-list or folder/element-list is present?\n+    allOfflineLinks.each { url, folder ->\n+      opts << [ '-linkoffline', url, folder ]\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2NTYxNg=="}, "originalCommit": {"oid": "9371b9715da9343a61192435a094a3f68e606516"}, "originalPosition": 648}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Njg2NTA3OnYy", "diffSide": "RIGHT", "path": "gradle/render-javadoc.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDo0ODoxM1rOGVWsRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDo1MTo1MlrOGVWzfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA0NTA2MQ==", "bodyText": "findRenderTasksInDependencies maybe?", "url": "https://github.com/apache/lucene-solr/pull/1488#discussion_r425045061", "createdAt": "2020-05-14T10:48:13Z", "author": {"login": "dweiss"}, "path": "gradle/render-javadoc.gradle", "diffHunk": "@@ -151,6 +151,18 @@ class RenderJavadocTask extends DefaultTask {\n \n   @Input\n   def solrDocUrl = project.propertyOrDefault('solr.javadoc.url', \"https://lucene.apache.org/solr/${project.baseVersion.replace(\".\", \"_\")}\")\n+  \n+  /** Utility method to recursively collect all tasks with same name like this one that we depend on */\n+  private Set findPreviousRenderTasks() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7655e829815b745710a5387e6f57827412b8dbb"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA0NjkwOA==", "bodyText": "Yeah, much better! This name was puzzling me. I'll change!", "url": "https://github.com/apache/lucene-solr/pull/1488#discussion_r425046908", "createdAt": "2020-05-14T10:51:52Z", "author": {"login": "uschindler"}, "path": "gradle/render-javadoc.gradle", "diffHunk": "@@ -151,6 +151,18 @@ class RenderJavadocTask extends DefaultTask {\n \n   @Input\n   def solrDocUrl = project.propertyOrDefault('solr.javadoc.url', \"https://lucene.apache.org/solr/${project.baseVersion.replace(\".\", \"_\")}\")\n+  \n+  /** Utility method to recursively collect all tasks with same name like this one that we depend on */\n+  private Set findPreviousRenderTasks() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA0NTA2MQ=="}, "originalCommit": {"oid": "b7655e829815b745710a5387e6f57827412b8dbb"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1514, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}