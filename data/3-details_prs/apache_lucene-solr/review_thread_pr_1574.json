{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzNzg0MzIx", "number": 1574, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMjozNjoxMVrOEG-M4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMTo0OTo1OFrOEKt4LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzQ2MDE4OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMjozNjoxMVrOGmGJ1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMjoyNDo0MVrOGoP0JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU5OTg5NQ==", "bodyText": "Do we now want it also in the cordinator node?", "url": "https://github.com/apache/lucene-solr/pull/1574#discussion_r442599895", "createdAt": "2020-06-19T02:36:11Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java", "diffHunk": "@@ -500,6 +509,29 @@ public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throw\n     }\n   }\n \n+  private void tagRequestWithRequestId(ResponseBuilder rb) {\n+    String rid = getRequestId(rb.req);\n+    if (StringUtils.isBlank(rb.req.getParams().get(CommonParams.REQUEST_ID))) {\n+      ModifiableSolrParams params = new ModifiableSolrParams(rb.req.getParams());\n+      params.add(CommonParams.REQUEST_ID, rid);//add rid to the request so that shards see it\n+      rb.req.setParams(params);\n+    }\n+    if (rb.isDistrib) {\n+      rb.rsp.addToLog(CommonParams.REQUEST_ID, rid); //to see it in the logs of the landing core", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eec81431a77d47b0c08e1841462f6ae90cccd48"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg1NTMzMw==", "bodyText": "We do!  That's actually what this line does.  L520 (this line) adds it on the coordinator, and L516 adds it to sub-requests, so that they also get the request-id as a query-param.", "url": "https://github.com/apache/lucene-solr/pull/1574#discussion_r444855333", "createdAt": "2020-06-24T12:24:41Z", "author": {"login": "gerlowskija"}, "path": "solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java", "diffHunk": "@@ -500,6 +509,29 @@ public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throw\n     }\n   }\n \n+  private void tagRequestWithRequestId(ResponseBuilder rb) {\n+    String rid = getRequestId(rb.req);\n+    if (StringUtils.isBlank(rb.req.getParams().get(CommonParams.REQUEST_ID))) {\n+      ModifiableSolrParams params = new ModifiableSolrParams(rb.req.getParams());\n+      params.add(CommonParams.REQUEST_ID, rid);//add rid to the request so that shards see it\n+      rb.req.setParams(params);\n+    }\n+    if (rb.isDistrib) {\n+      rb.rsp.addToLog(CommonParams.REQUEST_ID, rid); //to see it in the logs of the landing core", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU5OTg5NQ=="}, "originalCommit": {"oid": "3eec81431a77d47b0c08e1841462f6ae90cccd48"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTgxOTE3OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNzo1OToxN1rOGmdIjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNDowMjoyNFrOGoTj8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk3NjM5OQ==", "bodyText": "Wow, this could be a long string, and it'll show up as a parameter and is thus kinda in-your-face when looking at logs.  And this, you propose, is by default. Isn't that a concern, albeit not huge?", "url": "https://github.com/apache/lucene-solr/pull/1574#discussion_r442976399", "createdAt": "2020-06-19T17:59:17Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java", "diffHunk": "@@ -500,6 +509,29 @@ public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throw\n     }\n   }\n \n+  private void tagRequestWithRequestId(ResponseBuilder rb) {\n+    String rid = getRequestId(rb.req);\n+    if (StringUtils.isBlank(rb.req.getParams().get(CommonParams.REQUEST_ID))) {\n+      ModifiableSolrParams params = new ModifiableSolrParams(rb.req.getParams());\n+      params.add(CommonParams.REQUEST_ID, rid);//add rid to the request so that shards see it\n+      rb.req.setParams(params);\n+    }\n+    if (rb.isDistrib) {\n+      rb.rsp.addToLog(CommonParams.REQUEST_ID, rid); //to see it in the logs of the landing core\n+    }\n+  }\n+\n+  public static String getRequestId(SolrQueryRequest req) {\n+    String rid = req.getParams().get(CommonParams.REQUEST_ID);\n+    return StringUtils.isNotBlank(rid) ? rid : generateRid(req);\n+  }\n+\n+  @SuppressForbidden(reason = \"Need currentTimeMillis, only used for naming\")\n+  private static String generateRid(SolrQueryRequest req) {\n+    String hostName = req.getCore().getCoreContainer().getHostName();\n+    return hostName + \"-\" + req.getCore().getName() + \"-\" + System.currentTimeMillis() + \"-\" + ridCounter.getAndIncrement();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eec81431a77d47b0c08e1841462f6ae90cccd48"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4Njc4Nw==", "bodyText": "Does the string need to be human readable? A 32 bit hash based on node-id+counter would be unique enough?", "url": "https://github.com/apache/lucene-solr/pull/1574#discussion_r442986787", "createdAt": "2020-06-19T18:24:58Z", "author": {"login": "janhoy"}, "path": "solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java", "diffHunk": "@@ -500,6 +509,29 @@ public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throw\n     }\n   }\n \n+  private void tagRequestWithRequestId(ResponseBuilder rb) {\n+    String rid = getRequestId(rb.req);\n+    if (StringUtils.isBlank(rb.req.getParams().get(CommonParams.REQUEST_ID))) {\n+      ModifiableSolrParams params = new ModifiableSolrParams(rb.req.getParams());\n+      params.add(CommonParams.REQUEST_ID, rid);//add rid to the request so that shards see it\n+      rb.req.setParams(params);\n+    }\n+    if (rb.isDistrib) {\n+      rb.rsp.addToLog(CommonParams.REQUEST_ID, rid); //to see it in the logs of the landing core\n+    }\n+  }\n+\n+  public static String getRequestId(SolrQueryRequest req) {\n+    String rid = req.getParams().get(CommonParams.REQUEST_ID);\n+    return StringUtils.isNotBlank(rid) ? rid : generateRid(req);\n+  }\n+\n+  @SuppressForbidden(reason = \"Need currentTimeMillis, only used for naming\")\n+  private static String generateRid(SolrQueryRequest req) {\n+    String hostName = req.getCore().getCoreContainer().getHostName();\n+    return hostName + \"-\" + req.getCore().getName() + \"-\" + System.currentTimeMillis() + \"-\" + ridCounter.getAndIncrement();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk3NjM5OQ=="}, "originalCommit": {"oid": "3eec81431a77d47b0c08e1841462f6ae90cccd48"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg0NDkxMw==", "bodyText": "I'm a bit torn.\nI agree that the length makes this a bit \"in-your-face\", and that a hash would be a good way to condense things.  I don't love the verbose-ness as things are now.  But, technically speaking, that loses us our uniqueness guarantee.  And if we're not shooting for strict-uniqueness here, then aren't we just as good with the NOW timestamp that was originally proposed but set aside for lack of uniqueness?\nTo zoom out, we've got three options for what the identifier is here:\n\nNOW timestamp - concise with some semantic meaning, but not guaranteed to be unique\nRequestID - very semantically meaningful and guaranteed to be unique, but \"in your face\"\nHashed RequestID - concise, but no semantic meaning and not guaranteed to be unique (though slightly more unique than a NOW timestamp?)\n\nI originally implemented (1), and then moved to (2) based on feedback in JIRA.  But if there's no consensus there (and people hate the length as I do), then maybe I'll go back to (1)?  In any case I don't see much advantage in (3) over (1)", "url": "https://github.com/apache/lucene-solr/pull/1574#discussion_r444844913", "createdAt": "2020-06-24T12:04:39Z", "author": {"login": "gerlowskija"}, "path": "solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java", "diffHunk": "@@ -500,6 +509,29 @@ public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throw\n     }\n   }\n \n+  private void tagRequestWithRequestId(ResponseBuilder rb) {\n+    String rid = getRequestId(rb.req);\n+    if (StringUtils.isBlank(rb.req.getParams().get(CommonParams.REQUEST_ID))) {\n+      ModifiableSolrParams params = new ModifiableSolrParams(rb.req.getParams());\n+      params.add(CommonParams.REQUEST_ID, rid);//add rid to the request so that shards see it\n+      rb.req.setParams(params);\n+    }\n+    if (rb.isDistrib) {\n+      rb.rsp.addToLog(CommonParams.REQUEST_ID, rid); //to see it in the logs of the landing core\n+    }\n+  }\n+\n+  public static String getRequestId(SolrQueryRequest req) {\n+    String rid = req.getParams().get(CommonParams.REQUEST_ID);\n+    return StringUtils.isNotBlank(rid) ? rid : generateRid(req);\n+  }\n+\n+  @SuppressForbidden(reason = \"Need currentTimeMillis, only used for naming\")\n+  private static String generateRid(SolrQueryRequest req) {\n+    String hostName = req.getCore().getCoreContainer().getHostName();\n+    return hostName + \"-\" + req.getCore().getName() + \"-\" + System.currentTimeMillis() + \"-\" + ridCounter.getAndIncrement();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk3NjM5OQ=="}, "originalCommit": {"oid": "3eec81431a77d47b0c08e1841462f6ae90cccd48"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg4ODY1NA==", "bodyText": "Lmk if anyone has a strong opinion here.  I've gotten feedback from both directions (make it unique (but verbose) vs make it concise (but not unique)).  I'm going to just choose one in the next day or two to avoid dragging things out.", "url": "https://github.com/apache/lucene-solr/pull/1574#discussion_r444888654", "createdAt": "2020-06-24T13:22:17Z", "author": {"login": "gerlowskija"}, "path": "solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java", "diffHunk": "@@ -500,6 +509,29 @@ public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throw\n     }\n   }\n \n+  private void tagRequestWithRequestId(ResponseBuilder rb) {\n+    String rid = getRequestId(rb.req);\n+    if (StringUtils.isBlank(rb.req.getParams().get(CommonParams.REQUEST_ID))) {\n+      ModifiableSolrParams params = new ModifiableSolrParams(rb.req.getParams());\n+      params.add(CommonParams.REQUEST_ID, rid);//add rid to the request so that shards see it\n+      rb.req.setParams(params);\n+    }\n+    if (rb.isDistrib) {\n+      rb.rsp.addToLog(CommonParams.REQUEST_ID, rid); //to see it in the logs of the landing core\n+    }\n+  }\n+\n+  public static String getRequestId(SolrQueryRequest req) {\n+    String rid = req.getParams().get(CommonParams.REQUEST_ID);\n+    return StringUtils.isNotBlank(rid) ? rid : generateRid(req);\n+  }\n+\n+  @SuppressForbidden(reason = \"Need currentTimeMillis, only used for naming\")\n+  private static String generateRid(SolrQueryRequest req) {\n+    String hostName = req.getCore().getCoreContainer().getHostName();\n+    return hostName + \"-\" + req.getCore().getName() + \"-\" + System.currentTimeMillis() + \"-\" + ridCounter.getAndIncrement();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk3NjM5OQ=="}, "originalCommit": {"oid": "3eec81431a77d47b0c08e1841462f6ae90cccd48"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkxNjcyMg==", "bodyText": "I think the uniqueness goal is important (thus don't need hash), but we could cut back on the verbose-ness.  node ID + counter is, I think, about right.", "url": "https://github.com/apache/lucene-solr/pull/1574#discussion_r444916722", "createdAt": "2020-06-24T14:02:24Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java", "diffHunk": "@@ -500,6 +509,29 @@ public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throw\n     }\n   }\n \n+  private void tagRequestWithRequestId(ResponseBuilder rb) {\n+    String rid = getRequestId(rb.req);\n+    if (StringUtils.isBlank(rb.req.getParams().get(CommonParams.REQUEST_ID))) {\n+      ModifiableSolrParams params = new ModifiableSolrParams(rb.req.getParams());\n+      params.add(CommonParams.REQUEST_ID, rid);//add rid to the request so that shards see it\n+      rb.req.setParams(params);\n+    }\n+    if (rb.isDistrib) {\n+      rb.rsp.addToLog(CommonParams.REQUEST_ID, rid); //to see it in the logs of the landing core\n+    }\n+  }\n+\n+  public static String getRequestId(SolrQueryRequest req) {\n+    String rid = req.getParams().get(CommonParams.REQUEST_ID);\n+    return StringUtils.isNotBlank(rid) ? rid : generateRid(req);\n+  }\n+\n+  @SuppressForbidden(reason = \"Need currentTimeMillis, only used for naming\")\n+  private static String generateRid(SolrQueryRequest req) {\n+    String hostName = req.getCore().getCoreContainer().getHostName();\n+    return hostName + \"-\" + req.getCore().getName() + \"-\" + System.currentTimeMillis() + \"-\" + ridCounter.getAndIncrement();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk3NjM5OQ=="}, "originalCommit": {"oid": "3eec81431a77d47b0c08e1841462f6ae90cccd48"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTgyMTUxOnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxODowMDoxNVrOGmdKGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMTo1MDozMVrOGr2fpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk3Njc5Mw==", "bodyText": "LongAdder is probably a better choice", "url": "https://github.com/apache/lucene-solr/pull/1574#discussion_r442976793", "createdAt": "2020-06-19T18:00:15Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java", "diffHunk": "@@ -70,6 +73,11 @@\n \n   private static final Logger log = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n \n+  /**\n+   * A counter to ensure that no RID is equal, even if they fall in the same millisecond\n+   */\n+  private static final AtomicLong ridCounter = new AtomicLong();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eec81431a77d47b0c08e1841462f6ae90cccd48"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg0NTMzMQ==", "bodyText": "\ud83d\udc4d I'll look into it.  Tbh I moved this from DebugComponent and didn't consider alternatives much.", "url": "https://github.com/apache/lucene-solr/pull/1574#discussion_r444845331", "createdAt": "2020-06-24T12:05:31Z", "author": {"login": "gerlowskija"}, "path": "solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java", "diffHunk": "@@ -70,6 +73,11 @@\n \n   private static final Logger log = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n \n+  /**\n+   * A counter to ensure that no RID is equal, even if they fall in the same millisecond\n+   */\n+  private static final AtomicLong ridCounter = new AtomicLong();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk3Njc5Mw=="}, "originalCommit": {"oid": "3eec81431a77d47b0c08e1841462f6ae90cccd48"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY2ODM2Mw==", "bodyText": "I don't think LongAdder is appropriate here - it doesn't have an incrementAndGet or anything similar that would ensure threads get unique counter values.\nThe \"atomicity\" that it offers, afaict, is that calls to add(long) can't be clobbered across threads and will eventually be incorporated into the sum().  Nothing guarantees that two threads can't get the same sum() value at a given time, without additional synchronization.  I found this SO post helpful.\nNow that I look at the synchronization generally though it reinforces my impression that I need to benchmark this before I commit, to ensure the lock contention isn't noticeable.  It's a shame LongAdder doesn't look like a good fit.", "url": "https://github.com/apache/lucene-solr/pull/1574#discussion_r445668363", "createdAt": "2020-06-25T16:02:17Z", "author": {"login": "gerlowskija"}, "path": "solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java", "diffHunk": "@@ -70,6 +73,11 @@\n \n   private static final Logger log = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n \n+  /**\n+   * A counter to ensure that no RID is equal, even if they fall in the same millisecond\n+   */\n+  private static final AtomicLong ridCounter = new AtomicLong();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk3Njc5Mw=="}, "originalCommit": {"oid": "3eec81431a77d47b0c08e1841462f6ae90cccd48"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTcwMjg3NA==", "bodyText": "It's really not a big deal and I'd be shocked if it noticeably impacted performance.", "url": "https://github.com/apache/lucene-solr/pull/1574#discussion_r445702874", "createdAt": "2020-06-25T16:55:54Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java", "diffHunk": "@@ -70,6 +73,11 @@\n \n   private static final Logger log = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n \n+  /**\n+   * A counter to ensure that no RID is equal, even if they fall in the same millisecond\n+   */\n+  private static final AtomicLong ridCounter = new AtomicLong();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk3Njc5Mw=="}, "originalCommit": {"oid": "3eec81431a77d47b0c08e1841462f6ae90cccd48"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzNDc4OA==", "bodyText": "I agree, but I wanted an excuse to try out the perf framework that Ishan has been teasing off and on for awhile, so I tested it anyways.  With 30 threads submitting queries in parallel it added ~1.5ms to the p95 times.\nSounds pretty insignificant to me.  I added a flag query param to disable it in any case.", "url": "https://github.com/apache/lucene-solr/pull/1574#discussion_r448634788", "createdAt": "2020-07-01T21:50:31Z", "author": {"login": "gerlowskija"}, "path": "solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java", "diffHunk": "@@ -70,6 +73,11 @@\n \n   private static final Logger log = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n \n+  /**\n+   * A counter to ensure that no RID is equal, even if they fall in the same millisecond\n+   */\n+  private static final AtomicLong ridCounter = new AtomicLong();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk3Njc5Mw=="}, "originalCommit": {"oid": "3eec81431a77d47b0c08e1841462f6ae90cccd48"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTgxNTM4OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOToxMDoxMVrOGryJkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMzoyNzowM1rOGsM0lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU2MzYwMw==", "bodyText": "I don't think this flag should be a request parameter; I think it should be a \"Cluster Property\".\nSecondly, if you do need to get this from a SolrParams, see getBool method, accepting a default.", "url": "https://github.com/apache/lucene-solr/pull/1574#discussion_r448563603", "createdAt": "2020-07-01T19:10:11Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java", "diffHunk": "@@ -510,14 +510,18 @@ public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throw\n   }\n \n   private void tagRequestWithRequestId(ResponseBuilder rb) {\n-    String rid = getRequestId(rb.req);\n-    if (StringUtils.isBlank(rb.req.getParams().get(CommonParams.REQUEST_ID))) {\n-      ModifiableSolrParams params = new ModifiableSolrParams(rb.req.getParams());\n-      params.add(CommonParams.REQUEST_ID, rid);//add rid to the request so that shards see it\n-      rb.req.setParams(params);\n-    }\n-    if (rb.isDistrib) {\n-      rb.rsp.addToLog(CommonParams.REQUEST_ID, rid); //to see it in the logs of the landing core\n+    final String disableFlag = rb.req.getParams().get(CommonParams.DISABLE_REQUEST_ID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "679bcef3adbcd5f22c454e25005ed53535a6dd1d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzNTk2OQ==", "bodyText": "Man you're quick on the reviews.\nI like a SolrParam better than a cluster property.  Users might well have reasons to enable/disable it differently based on the source or type of query.  A Cluster Property doesn't offer that sort of granularity (at least, as I understand them).\nI don't feel super strongly though, so if you disagree with that rationale, lmk.  I'm gearing up to commit soon-ish.\n(I did change to getBool though as you suggested.  I initially avoided this because I thought it'd be nice to have any value for this param disable the rid.  But that didn't really fit in with how other similar flags work, so I scrapped the idea.)", "url": "https://github.com/apache/lucene-solr/pull/1574#discussion_r448635969", "createdAt": "2020-07-01T21:53:28Z", "author": {"login": "gerlowskija"}, "path": "solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java", "diffHunk": "@@ -510,14 +510,18 @@ public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throw\n   }\n \n   private void tagRequestWithRequestId(ResponseBuilder rb) {\n-    String rid = getRequestId(rb.req);\n-    if (StringUtils.isBlank(rb.req.getParams().get(CommonParams.REQUEST_ID))) {\n-      ModifiableSolrParams params = new ModifiableSolrParams(rb.req.getParams());\n-      params.add(CommonParams.REQUEST_ID, rid);//add rid to the request so that shards see it\n-      rb.req.setParams(params);\n-    }\n-    if (rb.isDistrib) {\n-      rb.rsp.addToLog(CommonParams.REQUEST_ID, rid); //to see it in the logs of the landing core\n+    final String disableFlag = rb.req.getParams().get(CommonParams.DISABLE_REQUEST_ID);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU2MzYwMw=="}, "originalCommit": {"oid": "679bcef3adbcd5f22c454e25005ed53535a6dd1d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5OTMwMQ==", "bodyText": "Having to disable one parameter showing up by adding another parameter kinda defeats the point.  To some people, this new parameter is needless noise.  To them, your solution is to tell them to add more noise (another param) to make that one go away.  I don't understand why users would toggle this on a query-by-query basis.  I suspect people holistically like this new ID on all their requests, or they don't.  But maybe you have something in mind?  I suppose it could be both -- you set the default as a cluster property but allow an override for the request.  Hmm; yeah I rather like that.", "url": "https://github.com/apache/lucene-solr/pull/1574#discussion_r448699301", "createdAt": "2020-07-02T01:31:34Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java", "diffHunk": "@@ -510,14 +510,18 @@ public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throw\n   }\n \n   private void tagRequestWithRequestId(ResponseBuilder rb) {\n-    String rid = getRequestId(rb.req);\n-    if (StringUtils.isBlank(rb.req.getParams().get(CommonParams.REQUEST_ID))) {\n-      ModifiableSolrParams params = new ModifiableSolrParams(rb.req.getParams());\n-      params.add(CommonParams.REQUEST_ID, rid);//add rid to the request so that shards see it\n-      rb.req.setParams(params);\n-    }\n-    if (rb.isDistrib) {\n-      rb.rsp.addToLog(CommonParams.REQUEST_ID, rid); //to see it in the logs of the landing core\n+    final String disableFlag = rb.req.getParams().get(CommonParams.DISABLE_REQUEST_ID);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU2MzYwMw=="}, "originalCommit": {"oid": "679bcef3adbcd5f22c454e25005ed53535a6dd1d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAwMDU5OA==", "bodyText": "I like a SolrParam better than a cluster property. Users might well have reasons to enable/disable it differently based on the source or type of query.\n\nIf users want full per-query control, they don't need a Solr feature at all, they can just start including whatever=1234 in their requests and track it in their logs. :)", "url": "https://github.com/apache/lucene-solr/pull/1574#discussion_r449000598", "createdAt": "2020-07-02T13:27:03Z", "author": {"login": "janhoy"}, "path": "solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java", "diffHunk": "@@ -510,14 +510,18 @@ public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throw\n   }\n \n   private void tagRequestWithRequestId(ResponseBuilder rb) {\n-    String rid = getRequestId(rb.req);\n-    if (StringUtils.isBlank(rb.req.getParams().get(CommonParams.REQUEST_ID))) {\n-      ModifiableSolrParams params = new ModifiableSolrParams(rb.req.getParams());\n-      params.add(CommonParams.REQUEST_ID, rid);//add rid to the request so that shards see it\n-      rb.req.setParams(params);\n-    }\n-    if (rb.isDistrib) {\n-      rb.rsp.addToLog(CommonParams.REQUEST_ID, rid); //to see it in the logs of the landing core\n+    final String disableFlag = rb.req.getParams().get(CommonParams.DISABLE_REQUEST_ID);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU2MzYwMw=="}, "originalCommit": {"oid": "679bcef3adbcd5f22c454e25005ed53535a6dd1d"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NjcxNjY1OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMTo0MjozNlrOGr6nQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMjoyODozNlrOGtVMOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODcwMjI3Mw==", "bodyText": "The fact that this method could generate a RID each time it's called on the same request seems problematic.  Instead, either don't have it do any such generation (I think my preference), or have it both generate one and save it into the the params so that the same request ID is returned given the same request.\nAlso; let's document our public methods on an important class like SearchHandler.", "url": "https://github.com/apache/lucene-solr/pull/1574#discussion_r448702273", "createdAt": "2020-07-02T01:42:36Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java", "diffHunk": "@@ -500,6 +508,31 @@ public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throw\n     }\n   }\n \n+  private void tagRequestWithRequestId(ResponseBuilder rb) {\n+    final boolean ridTaggingDisabled = rb.req.getParams().getBool(CommonParams.DISABLE_REQUEST_ID, false);\n+    if (! ridTaggingDisabled) {\n+      String rid = getRequestId(rb.req);\n+      if (StringUtils.isBlank(rb.req.getParams().get(CommonParams.REQUEST_ID))) {\n+        ModifiableSolrParams params = new ModifiableSolrParams(rb.req.getParams());\n+        params.add(CommonParams.REQUEST_ID, rid);//add rid to the request so that shards see it\n+        rb.req.setParams(params);\n+      }\n+      if (rb.isDistrib) {\n+        rb.rsp.addToLog(CommonParams.REQUEST_ID, rid); //to see it in the logs of the landing core\n+      }\n+    }\n+  }\n+\n+  public static String getRequestId(SolrQueryRequest req) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39351bddfdf3090158654003a2646c37699133c4"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE4NjI5OA==", "bodyText": "To documenting: sure +1.\nTo your other point, I'm more on the fence.  If we always stored the RID in params, this would be a no-brainer.  But on the coordinator node we don't because it's displayed separately in coordinator log messages.\nI spent some time fiddling with the composition of the helper methods here before the long weekend but couldn't come up with an arrangement that made sense, without throwing everything in one larger method (that's hard for other places, like DebugComponent, to reuse.).  I did come up with some name clarifications and Javadocs here though - and I hope those address your underlying concern.", "url": "https://github.com/apache/lucene-solr/pull/1574#discussion_r450186298", "createdAt": "2020-07-06T12:28:36Z", "author": {"login": "gerlowskija"}, "path": "solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java", "diffHunk": "@@ -500,6 +508,31 @@ public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throw\n     }\n   }\n \n+  private void tagRequestWithRequestId(ResponseBuilder rb) {\n+    final boolean ridTaggingDisabled = rb.req.getParams().getBool(CommonParams.DISABLE_REQUEST_ID, false);\n+    if (! ridTaggingDisabled) {\n+      String rid = getRequestId(rb.req);\n+      if (StringUtils.isBlank(rb.req.getParams().get(CommonParams.REQUEST_ID))) {\n+        ModifiableSolrParams params = new ModifiableSolrParams(rb.req.getParams());\n+        params.add(CommonParams.REQUEST_ID, rid);//add rid to the request so that shards see it\n+        rb.req.setParams(params);\n+      }\n+      if (rb.isDistrib) {\n+        rb.rsp.addToLog(CommonParams.REQUEST_ID, rid); //to see it in the logs of the landing core\n+      }\n+    }\n+  }\n+\n+  public static String getRequestId(SolrQueryRequest req) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODcwMjI3Mw=="}, "originalCommit": {"oid": "39351bddfdf3090158654003a2646c37699133c4"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NjcyMTQ3OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMTo0NTozMlrOGr6qLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMzo0NDoxNlrOGtX2rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODcwMzAyMQ==", "bodyText": "Maybe we don't need a flag parameter to decide what to do with rid.  What if Solr sees rid=* (or true?) then it knows to generate a rid, and if it sees a blank/empty string (or false?) then it does nothing.  If it's something else than it is the rid (either from the client or generated).  One parameter to look at for this feature seems nicer than two.  Also, relating to my concern about wholesale disabling, it could be set in the solrconfig as a param default.", "url": "https://github.com/apache/lucene-solr/pull/1574#discussion_r448703021", "createdAt": "2020-07-02T01:45:32Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java", "diffHunk": "@@ -500,6 +508,31 @@ public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throw\n     }\n   }\n \n+  private void tagRequestWithRequestId(ResponseBuilder rb) {\n+    final boolean ridTaggingDisabled = rb.req.getParams().getBool(CommonParams.DISABLE_REQUEST_ID, false);\n+    if (! ridTaggingDisabled) {\n+      String rid = getRequestId(rb.req);\n+      if (StringUtils.isBlank(rb.req.getParams().get(CommonParams.REQUEST_ID))) {\n+        ModifiableSolrParams params = new ModifiableSolrParams(rb.req.getParams());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39351bddfdf3090158654003a2646c37699133c4"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE2Mzg0OA==", "bodyText": "I like the simplicity of having the flag be its own separate parameter over packing in multiple different \"flag\" values to the existing param.\nSimplicity and intuitiveness are admittedly subjective though, I'm open to your opinion if you can convince me why you see having only a single param is easier for users to digest.", "url": "https://github.com/apache/lucene-solr/pull/1574#discussion_r449163848", "createdAt": "2020-07-02T17:20:19Z", "author": {"login": "gerlowskija"}, "path": "solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java", "diffHunk": "@@ -500,6 +508,31 @@ public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throw\n     }\n   }\n \n+  private void tagRequestWithRequestId(ResponseBuilder rb) {\n+    final boolean ridTaggingDisabled = rb.req.getParams().getBool(CommonParams.DISABLE_REQUEST_ID, false);\n+    if (! ridTaggingDisabled) {\n+      String rid = getRequestId(rb.req);\n+      if (StringUtils.isBlank(rb.req.getParams().get(CommonParams.REQUEST_ID))) {\n+        ModifiableSolrParams params = new ModifiableSolrParams(rb.req.getParams());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODcwMzAyMQ=="}, "originalCommit": {"oid": "39351bddfdf3090158654003a2646c37699133c4"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI0ODc2OQ==", "bodyText": "Parameter / cognitive overload / excessive.\nIf a user passes rid=whatever then Solr will pass this along (thanks to you); right?  Then in a sense it's self-disableable by a user with a blank rid and putting it in solrconfig.xml init param for /*.", "url": "https://github.com/apache/lucene-solr/pull/1574#discussion_r449248769", "createdAt": "2020-07-02T20:24:22Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java", "diffHunk": "@@ -500,6 +508,31 @@ public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throw\n     }\n   }\n \n+  private void tagRequestWithRequestId(ResponseBuilder rb) {\n+    final boolean ridTaggingDisabled = rb.req.getParams().getBool(CommonParams.DISABLE_REQUEST_ID, false);\n+    if (! ridTaggingDisabled) {\n+      String rid = getRequestId(rb.req);\n+      if (StringUtils.isBlank(rb.req.getParams().get(CommonParams.REQUEST_ID))) {\n+        ModifiableSolrParams params = new ModifiableSolrParams(rb.req.getParams());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODcwMzAyMQ=="}, "originalCommit": {"oid": "39351bddfdf3090158654003a2646c37699133c4"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE4Mjg5NA==", "bodyText": "I guess I just see that as being more complex.  Imagine describing that behavior to a newcomer in one sentence: \"Well if you don't specify it at all we do X, if you do specify it we do Y, and if you specify it as blank we do Z\".  Versus: \"It either autogenerates a request ID or uses whatever you pass in.  There's also a flag to disable it if you want\".\nI'm the first to admit these sort of takes are subjective though.  If someone else chimes in here and I get outnumbered I'll change it for sure.  But I'll stick to my guns for now.", "url": "https://github.com/apache/lucene-solr/pull/1574#discussion_r450182894", "createdAt": "2020-07-06T12:22:02Z", "author": {"login": "gerlowskija"}, "path": "solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java", "diffHunk": "@@ -500,6 +508,31 @@ public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throw\n     }\n   }\n \n+  private void tagRequestWithRequestId(ResponseBuilder rb) {\n+    final boolean ridTaggingDisabled = rb.req.getParams().getBool(CommonParams.DISABLE_REQUEST_ID, false);\n+    if (! ridTaggingDisabled) {\n+      String rid = getRequestId(rb.req);\n+      if (StringUtils.isBlank(rb.req.getParams().get(CommonParams.REQUEST_ID))) {\n+        ModifiableSolrParams params = new ModifiableSolrParams(rb.req.getParams());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODcwMzAyMQ=="}, "originalCommit": {"oid": "39351bddfdf3090158654003a2646c37699133c4"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIyOTkzNA==", "bodyText": "\"It either autogenerates a request ID or uses whatever you pass in. There's also a flag to disable it if you want\"\n\nThat's also an X, Y, and Z :-)\nIn my suggestion, the consequence of a blank rid needn't be a special case -- treat it as valid if you like.  It's super-short \"rid=\" and so adds negligible noise when propagated.", "url": "https://github.com/apache/lucene-solr/pull/1574#discussion_r450229934", "createdAt": "2020-07-06T13:44:16Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java", "diffHunk": "@@ -500,6 +508,31 @@ public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throw\n     }\n   }\n \n+  private void tagRequestWithRequestId(ResponseBuilder rb) {\n+    final boolean ridTaggingDisabled = rb.req.getParams().getBool(CommonParams.DISABLE_REQUEST_ID, false);\n+    if (! ridTaggingDisabled) {\n+      String rid = getRequestId(rb.req);\n+      if (StringUtils.isBlank(rb.req.getParams().get(CommonParams.REQUEST_ID))) {\n+        ModifiableSolrParams params = new ModifiableSolrParams(rb.req.getParams());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODcwMzAyMQ=="}, "originalCommit": {"oid": "39351bddfdf3090158654003a2646c37699133c4"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NjcyODc2OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMTo0OTo1OFrOGr6udw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMTo0OTo1OFrOGr6udw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODcwNDExOQ==", "bodyText": "super minor but please add a blank line after this because it's not related to timer.", "url": "https://github.com/apache/lucene-solr/pull/1574#discussion_r448704119", "createdAt": "2020-07-02T01:49:58Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java", "diffHunk": "@@ -298,7 +305,8 @@ public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throw\n     final RTimerTree timer = rb.isDebug() ? req.getRequestTimer() : null;\n \n     final ShardHandler shardHandler1 = getAndPrepShardHandler(req, rb); // creates a ShardHandler object only if it's needed\n-    \n+\n+    tagRequestWithRequestId(rb);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39351bddfdf3090158654003a2646c37699133c4"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1479, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}