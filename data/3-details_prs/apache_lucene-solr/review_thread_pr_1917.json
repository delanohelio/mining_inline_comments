{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxOTA1NzA5", "number": 1917, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzoyMTowNVrOEnClBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzoyMTowNVrOEnClBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzcyMTY3OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/store/ByteBuffersDataOutput.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzoyMTowNVrOHXaWYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDoxMjoxMFrOHXc6PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMxMTAwOA==", "bodyText": "Hmmm... Do they? I don't think this is the case, in general, since you can plug in an arbitrary block provider/ recycler?", "url": "https://github.com/apache/lucene-solr/pull/1917#discussion_r494311008", "createdAt": "2020-09-24T13:21:05Z", "author": {"login": "dweiss"}, "path": "lucene/core/src/java/org/apache/lucene/store/ByteBuffersDataOutput.java", "diffHunk": "@@ -400,8 +400,13 @@ public void writeSetOfStrings(Set<String> set) {\n   public long ramBytesUsed() {\n     // Return a rough estimation for allocated blocks. Note that we do not make\n     // any special distinction for direct memory buffers.\n-    return RamUsageEstimator.NUM_BYTES_OBJECT_REF * blocks.size() + \n-           blocks.stream().mapToLong(buf -> buf.capacity()).sum();\n+    ByteBuffer first = blocks.peek();\n+    if (first == null) {\n+      return 0L;\n+    } else {\n+      // All blocks have the same capacity.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db41ed8b6a2677115de9ace99959e3a8bdd5df56"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMxNDAyOQ==", "bodyText": "I'm not sure I like this assumption (that all blocks are equal). Maybe we could maintain a separate ram usage on block addition/ removal and thus make the sum-time constant but also accurate?", "url": "https://github.com/apache/lucene-solr/pull/1917#discussion_r494314029", "createdAt": "2020-09-24T13:25:20Z", "author": {"login": "dweiss"}, "path": "lucene/core/src/java/org/apache/lucene/store/ByteBuffersDataOutput.java", "diffHunk": "@@ -400,8 +400,13 @@ public void writeSetOfStrings(Set<String> set) {\n   public long ramBytesUsed() {\n     // Return a rough estimation for allocated blocks. Note that we do not make\n     // any special distinction for direct memory buffers.\n-    return RamUsageEstimator.NUM_BYTES_OBJECT_REF * blocks.size() + \n-           blocks.stream().mapToLong(buf -> buf.capacity()).sum();\n+    ByteBuffer first = blocks.peek();\n+    if (first == null) {\n+      return 0L;\n+    } else {\n+      // All blocks have the same capacity.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMxMTAwOA=="}, "originalCommit": {"oid": "db41ed8b6a2677115de9ace99959e3a8bdd5df56"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMxNzE4Mw==", "bodyText": "Oops thanks for catching. I thought they did because we make the assumption that all buffers have the same length in toDataInput, which is different from capacity.", "url": "https://github.com/apache/lucene-solr/pull/1917#discussion_r494317183", "createdAt": "2020-09-24T13:29:26Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/store/ByteBuffersDataOutput.java", "diffHunk": "@@ -400,8 +400,13 @@ public void writeSetOfStrings(Set<String> set) {\n   public long ramBytesUsed() {\n     // Return a rough estimation for allocated blocks. Note that we do not make\n     // any special distinction for direct memory buffers.\n-    return RamUsageEstimator.NUM_BYTES_OBJECT_REF * blocks.size() + \n-           blocks.stream().mapToLong(buf -> buf.capacity()).sum();\n+    ByteBuffer first = blocks.peek();\n+    if (first == null) {\n+      return 0L;\n+    } else {\n+      // All blocks have the same capacity.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMxMTAwOA=="}, "originalCommit": {"oid": "db41ed8b6a2677115de9ace99959e3a8bdd5df56"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMxNzQ0MQ==", "bodyText": "Yep, I'll do that.", "url": "https://github.com/apache/lucene-solr/pull/1917#discussion_r494317441", "createdAt": "2020-09-24T13:29:48Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/store/ByteBuffersDataOutput.java", "diffHunk": "@@ -400,8 +400,13 @@ public void writeSetOfStrings(Set<String> set) {\n   public long ramBytesUsed() {\n     // Return a rough estimation for allocated blocks. Note that we do not make\n     // any special distinction for direct memory buffers.\n-    return RamUsageEstimator.NUM_BYTES_OBJECT_REF * blocks.size() + \n-           blocks.stream().mapToLong(buf -> buf.capacity()).sum();\n+    ByteBuffer first = blocks.peek();\n+    if (first == null) {\n+      return 0L;\n+    } else {\n+      // All blocks have the same capacity.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMxMTAwOA=="}, "originalCommit": {"oid": "db41ed8b6a2677115de9ace99959e3a8bdd5df56"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM1Mjk1Ng==", "bodyText": "Thanks Adrien!", "url": "https://github.com/apache/lucene-solr/pull/1917#discussion_r494352956", "createdAt": "2020-09-24T14:12:10Z", "author": {"login": "dweiss"}, "path": "lucene/core/src/java/org/apache/lucene/store/ByteBuffersDataOutput.java", "diffHunk": "@@ -400,8 +400,13 @@ public void writeSetOfStrings(Set<String> set) {\n   public long ramBytesUsed() {\n     // Return a rough estimation for allocated blocks. Note that we do not make\n     // any special distinction for direct memory buffers.\n-    return RamUsageEstimator.NUM_BYTES_OBJECT_REF * blocks.size() + \n-           blocks.stream().mapToLong(buf -> buf.capacity()).sum();\n+    ByteBuffer first = blocks.peek();\n+    if (first == null) {\n+      return 0L;\n+    } else {\n+      // All blocks have the same capacity.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMxMTAwOA=="}, "originalCommit": {"oid": "db41ed8b6a2677115de9ace99959e3a8bdd5df56"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1098, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}