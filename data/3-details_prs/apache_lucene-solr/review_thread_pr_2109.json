{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwMDgyNDA0", "number": 2109, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMjowNTowMlrOFE8ysw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMjowNTowMlrOFE8ysw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNzM0NjQzOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50CompoundFormat.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMjowNTowMlrOIFNZTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMjowNTowMlrOIFNZTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMzMzI2Mg==", "bodyText": "call it writeCompoundFile?", "url": "https://github.com/apache/lucene-solr/pull/2109#discussion_r542333262", "createdAt": "2020-12-14T12:05:02Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50CompoundFormat.java", "diffHunk": "@@ -80,52 +89,46 @@ public void write(Directory dir, SegmentInfo si, IOContext context) throws IOExc\n          IndexOutput entries = dir.createOutput(entriesFile, context)) {\n       CodecUtil.writeIndexHeader(data,    DATA_CODEC, VERSION_CURRENT, si.getId(), \"\");\n       CodecUtil.writeIndexHeader(entries, ENTRY_CODEC, VERSION_CURRENT, si.getId(), \"\");\n-      \n-      // write number of files\n-      entries.writeVInt(si.files().size());\n-      for (String file : si.files()) {\n-        \n-        // write bytes for file\n-        long startOffset = data.getFilePointer();\n-        try (ChecksumIndexInput in = dir.openChecksumInput(file, IOContext.READONCE)) {\n-\n-          // just copies the index header, verifying that its id matches what we expect\n-          CodecUtil.verifyAndCopyIndexHeader(in, data, si.getId());\n-          \n-          // copy all bytes except the footer\n-          long numBytesToCopy = in.length() - CodecUtil.footerLength() - in.getFilePointer();\n-          data.copyBytes(in, numBytesToCopy);\n-\n-          // verify footer (checksum) matches for the incoming file we are copying\n-          long checksum = CodecUtil.checkFooter(in);\n \n-          // this is poached from CodecUtil.writeFooter, but we need to use our own checksum, not data.getChecksum(), but I think\n-          // adding a public method to CodecUtil to do that is somewhat dangerous:\n-          data.writeInt(CodecUtil.FOOTER_MAGIC);\n-          data.writeInt(0);\n-          data.writeLong(checksum);\n-        }\n-        long endOffset = data.getFilePointer();\n-        \n-        long length = endOffset - startOffset;\n-        \n-        // write entry for file\n-        entries.writeString(IndexFileNames.stripSegmentName(file));\n-        entries.writeLong(startOffset);\n-        entries.writeLong(length);\n-      }\n+      writeSegmentInfo(entries, data, dir, si);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66697f87f021306f049a50c2dacea5e86ff390f6"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1093, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}