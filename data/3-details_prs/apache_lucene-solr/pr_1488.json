{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzOTUwMTgx", "number": 1488, "title": "LUCENE-9321: Refactor renderJavadoc to allow relative links with multiple Gradle tasks", "bodyText": "This is a WIP task to convert the renderJavadoc task in the Gradle build to run 2 times:\n\nOnce for the Maven artifacts with absolute links (standard \"javadoc\" gradle task replacement. Output is project local). This task will be used for precommit (limited checks, as cross-module links cannot be checked. This task is for everyday use\nanother task that renders all javadocs to the global documentation folder (one for Lucene, one for Solr). All links inside will be relative.\n\nThis PR currently contains:\n\nRefactor task to own class, so we can create multiple named tasks\nAdd task property to generate relative links (a new closure was added to do this: It produces a relative link from the Gradle project path of current project to the linked project", "createdAt": "2020-05-06T08:27:53Z", "url": "https://github.com/apache/lucene-solr/pull/1488", "merged": true, "mergeCommit": {"oid": "010168c57b35e402da3d8776c03307af0785a3bd"}, "closed": true, "closedAt": "2020-05-14T11:16:17Z", "author": {"login": "uschindler"}, "timelineItems": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcekVHBgH2gAyNDEzOTUwMTgxOmRmY2E2ODViZTAxZjA1YzdiYWIyOGQ3NGRkZWFlODYxYTcxOGUyMDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABchLQZfgH2gAyNDEzOTUwMTgxOmM0OGZiYzQzMmVhNWY1YTQxYjM5MTI4OGE5Zjk1YTI3YmZhMTMzM2I=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "dfca685be01f05c7bab28d74ddeae861a718e204", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/dfca685be01f05c7bab28d74ddeae861a718e204", "committedDate": "2020-05-06T08:23:27Z", "message": "LUCENE-9321: Refactor renderJavadocs to allow relative links with multiple Gradle tasks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a45783ad27a16efb21539990e65bc09285482be6", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/a45783ad27a16efb21539990e65bc09285482be6", "committedDate": "2020-05-06T11:31:04Z", "message": "Refer to our current task name to build up dependencies on output files of other renderJavadocs runs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NTQ0NTA0", "url": "https://github.com/apache/lucene-solr/pull/1488#pullrequestreview-406544504", "createdAt": "2020-05-06T12:03:56Z", "commit": {"oid": "dfca685be01f05c7bab28d74ddeae861a718e204"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMjowMzo1NlrOGRPwTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMjowMzo1NlrOGRPwTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDczNzEwMQ==", "bodyText": "To generate relative links, have you considered to use -link (as the original ant task does so) option instead of -linkoffline ? The first version of \"renderJavadoc\" had also used -link option with relative file paths before we changed it to absolute urls. (I'm not sure if it makes sense here and have no strong feeling with that, but -link seems to be more safe since with the option javadoc tool checks if the files to be linked exist on the local machine.)", "url": "https://github.com/apache/lucene-solr/pull/1488#discussion_r420737101", "createdAt": "2020-05-06T12:03:56Z", "author": {"login": "mocobeta"}, "path": "gradle/render-javadoc.gradle", "diffHunk": "@@ -430,3 +305,180 @@ configure(subprojects.findAll { it.path in [':solr:solr-ref-guide', ':solr:serve\n     project.tasks.findByPath(\"renderJavadoc\").enabled = false\n   }\n }\n+\n+class RenderJavadocTask extends DefaultTask {\n+  @InputFiles\n+  @SkipWhenEmpty\n+  SourceDirectorySet srcDirSet;\n+  \n+  @OutputDirectory\n+  File outputDir;\n+  \n+  @InputFiles\n+  @Classpath\n+  FileCollection classpath;\n+  \n+  @Input\n+  boolean linksource = false;\n+  \n+  @Input\n+  boolean linkJUnit = false;\n+  \n+  @Input\n+  boolean relativeProjectLinks = true;\n+\n+  @Input\n+  def linkProjects = [];\n+  \n+  @Input\n+  def luceneDocUrl = project.propertyOrDefault('lucene.javadoc.url', \"https://lucene.apache.org/core/${project.baseVersion.replace(\".\", \"_\")}\")\n+\n+  @Input\n+  def solrDocUrl = project.propertyOrDefault('solr.javadoc.url', \"https://lucene.apache.org/solr/${project.baseVersion.replace(\".\", \"_\")}\")\n+  \n+  @TaskAction\n+  public void render() {\n+    def thispc = project.path.split(':').drop(1);\n+    // Converts absolute project path (e.g., \":lucene:analysis:common\") to \n+    // a link in the docs; relative to current, if needed for global documentation\n+    def convertPath2Link = { path ->\n+      def pc = path.split(':').drop(1);\n+      if (relativeProjectLinks) {\n+        int toDrop = 0;\n+        for (int i = 0; i < Math.min(pc.size(), thispc.size()); i++) {\n+          if (pc[i] == thispc[i]) {\n+            toDrop++;\n+          } else {\n+            break;\n+          }\n+        }\n+        // only create relative path if there is actually anything removed from beginning (this implies absolute link solr -> lucene):\n+        if (toDrop > 0) {\n+          return Collections.nCopies(thispc.size() - toDrop, '..').plus(pc.drop(toDrop) as List).join('/').concat('/');\n+        } \n+      }\n+      return \"${(pc[0] == 'lucene') ? luceneDocUrl : solrDocUrl}/${pc.drop(1).join('/')}/\"\n+    }\n+\n+    // escapes an option with single quotes or whitespace to be passed in the options.txt file for\n+    def escapeJavadocOption = { String s -> (s =~ /[ '\"]/) ? (\"'\" + s.replaceAll(/[\\\\'\"]/, /\\\\$0/) + \"'\") : s }\n+    \n+    def relativizeURL = { String from, String to ->\n+      URI fromUri = URI.create(from).normalize();\n+      URI toUri = URI.create(to).normalize();\n+      if (fromUri.scheme != toUri.scheme || fromUri.authority != toUri.authority) {\n+        return to;\n+      }\n+      // because URI#relativice can't handle relative paths, we use Path class as workaround\n+      Path fromPath = Paths.get(\"./${fromUri.path}\");\n+      Path toPath = Paths.get(\"./${toUri.path}\");\n+      return fromPath.relativize(toPath).toString().replace(File.separator, '/')\n+    }\n+\n+    def libName = project.path.startsWith(\":lucene\") ? \"Lucene\" : \"Solr\"\n+    def title = \"${libName} ${project.version} ${project.name} API\"\n+    \n+    // absolute urls for \"-linkoffline\" option\n+    def javaSEDocUrl = \"https://docs.oracle.com/en/java/javase/11/docs/api/\"\n+    def junitDocUrl = \"https://junit.org/junit4/javadoc/4.12/\"\n+\n+    def javadocCmd = org.gradle.internal.jvm.Jvm.current().getJavadocExecutable()\n+\n+    def srcDirs = srcDirSet.srcDirs.findAll { dir -> dir.exists() }\n+    def optionsFile = project.file(\"${getTemporaryDir()}/javadoc-options.txt\")\n+    \n+    def opts = []\n+    opts << [ '-overview', project.file(\"${srcDirs[0]}/overview.html\") ]\n+    opts << [ '-sourcepath', srcDirs.join(File.pathSeparator) ]\n+    opts << [ '-subpackages', project.path.startsWith(':lucene') ? 'org.apache.lucene' : 'org.apache.solr' ]\n+    opts << [ '-d', outputDir ]\n+    opts << '-protected'\n+    opts << [ '-encoding', 'UTF-8' ]\n+    opts << [ '-charset', 'UTF-8' ]\n+    opts << [ '-docencoding', 'UTF-8' ]\n+    opts << '-noindex'\n+    opts << '-author'\n+    opts << '-version'\n+    if (linksource) {\n+      opts << '-linksource'\n+    }\n+    opts << '-use'\n+    opts << [ '-locale', 'en_US' ]\n+    opts << [ '-windowtitle', title ]\n+    opts << [ '-doctitle', title ]\n+    if (!classpath.isEmpty()) {\n+      opts << [ '-classpath', classpath.asPath ]\n+    }\n+    opts << [ '-bottom', \"<i>Copyright &copy; 2000-${project.buildYear} Apache Software Foundation. All Rights Reserved.</i>\" ]\n+\n+    opts << [ '-tag', 'lucene.experimental:a:WARNING: This API is experimental and might change in incompatible ways in the next release.' ]\n+    opts << [ '-tag', 'lucene.internal:a:NOTE: This API is for internal purposes only and might change in incompatible ways in the next release.' ]\n+    opts << [ '-tag', \"lucene.spi:t:SPI Name (case-insensitive: if the name is 'htmlStrip', 'htmlstrip' can be used when looking up the service).\" ]\n+\n+    // resolve links to JavaSE and JUnit API\n+    opts << [ '-linkoffline', javaSEDocUrl, project.project(':lucene').file('tools/javadoc/java11/') ]\n+    if (linkJUnit) {\n+      opts << [ '-linkoffline', junitDocUrl, project.project(':lucene').file('tools/javadoc/junit/') ]\n+    }\n+    // resolve inter-project links\n+    linkProjects.collect { path ->\n+      def docdir = convertPath2Link(path)\n+      logger.warn(docdir as String);\n+      opts << [ '-linkoffline', docdir, project.project(path).javadoc.destinationDir ]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfca685be01f05c7bab28d74ddeae861a718e204"}, "originalPosition": 428}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "764f378bef47f1c375b100cf8755b712c5faca4b", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/764f378bef47f1c375b100cf8755b712c5faca4b", "committedDate": "2020-05-06T12:57:04Z", "message": "Rewrite hack for patching elements-list file to use plain Groovy; also use correct outputDir of task"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MjYwNDY2", "url": "https://github.com/apache/lucene-solr/pull/1488#pullrequestreview-407260466", "createdAt": "2020-05-07T08:34:50Z", "commit": {"oid": "764f378bef47f1c375b100cf8755b712c5faca4b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODozNDo1MVrOGR0KvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODozNDo1MVrOGR0KvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMzMzY5Mg==", "bodyText": "Nice!", "url": "https://github.com/apache/lucene-solr/pull/1488#discussion_r421333692", "createdAt": "2020-05-07T08:34:51Z", "author": {"login": "dweiss"}, "path": "gradle/render-javadoc.gradle", "diffHunk": "@@ -57,20 +57,11 @@ configure(subprojects.findAll { it.path.startsWith(':lucene') && it.path != ':lu\n       doLast {\n         // fix for Java 11 Javadoc tool that cannot handle split packages between modules correctly (by removing all the packages which are part of lucene-core)\n         // problem description: [https://issues.apache.org/jira/browse/LUCENE-8738?focusedCommentId=16818106&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16818106]\n-        ant.local(name: \"element-list-regex\") // contains a regex for all package names which are in lucene-core's javadoc\n-        ant.loadfile(property: \"element-list-regex\", srcFile: \"${project(':lucene:core').tasks[name].outputDir}/element-list\", encoding: \"utf-8\") {\n-          filterchain {\n-            tokenfilter(delimoutput: \"|\") {\n-              replacestring(from: \".\", to: \"\\\\.\")\n-            }\n-          }\n-        }\n-        ant.replaceregexp(\n-            encoding: \"UTF-8\",\n-            file: \"${project.javadoc.destinationDir}/element-list\",\n-            byline: \"true\",\n-            match: \"^(\\${element-list-regex})\\$\",\n-            replace: \"\")\n+        Set luceneCorePackages = file(\"${project(':lucene:core').tasks[name].outputDir}/element-list\").readLines('UTF-8').toSet();\n+        File elementFile = file(\"${outputDir}/element-list\");\n+        List elements = elementFile.readLines('UTF-8');\n+        elements.removeAll{ luceneCorePackages.contains(it) }\n+        elementFile.write(elements.join('\\n').concat('\\n'), 'UTF-8');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "764f378bef47f1c375b100cf8755b712c5faca4b"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a93ea136bbe5125b5424da820a41b40e711ba5b8", "author": {"user": {"login": "dweiss", "name": "Dawid Weiss"}}, "url": "https://github.com/apache/lucene-solr/commit/a93ea136bbe5125b5424da820a41b40e711ba5b8", "committedDate": "2020-05-12T07:42:47Z", "message": "Merge remote-tracking branch 'origin/master' into jira/LUCENE-9321-globaljavadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a40893bb9a0a22d32ee100645f7bc13370420517", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/a40893bb9a0a22d32ee100645f7bc13370420517", "committedDate": "2020-05-12T08:32:00Z", "message": "Remove obsolete method, which was just added to investigate possibilities; it was no longer in use"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b818628246fc2f59c0269e49093f0067ece70c1b", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/b818628246fc2f59c0269e49093f0067ece70c1b", "committedDate": "2020-05-12T08:42:31Z", "message": "Set default back to absolute paths, relative paths only created if explicitely requested"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35895f2f08577de8ed0597fd051bc094f18c7158", "author": {"user": {"login": "dweiss", "name": "Dawid Weiss"}}, "url": "https://github.com/apache/lucene-solr/commit/35895f2f08577de8ed0597fd051bc094f18c7158", "committedDate": "2020-05-12T13:05:50Z", "message": "Cleaned up cross-project linking function so that the task can be reused in multiple task definitions. Created a PoC renderSiteJavadoc that renders with relative links. Seems to work."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4d25f46100a800966268877550a74c9186d09f5", "author": {"user": {"login": "dweiss", "name": "Dawid Weiss"}}, "url": "https://github.com/apache/lucene-solr/commit/c4d25f46100a800966268877550a74c9186d09f5", "committedDate": "2020-05-12T13:28:17Z", "message": "Pull offline links to a property and configure it separately."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf82cb6a13976db968aeaf4ba826e1496a4b99e3", "author": {"user": {"login": "dweiss", "name": "Dawid Weiss"}}, "url": "https://github.com/apache/lucene-solr/commit/cf82cb6a13976db968aeaf4ba826e1496a4b99e3", "committedDate": "2020-05-12T13:56:19Z", "message": "Create relative links using javadoc link rather than linkoffline. Works the same for me and seems nicer."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9371b9715da9343a61192435a094a3f68e606516", "author": {"user": {"login": "dweiss", "name": "Dawid Weiss"}}, "url": "https://github.com/apache/lucene-solr/commit/9371b9715da9343a61192435a094a3f68e606516", "committedDate": "2020-05-12T14:13:01Z", "message": "Small cleanups - Uwe has a super-wide monitor... ;)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMDM4MzE2", "url": "https://github.com/apache/lucene-solr/pull/1488#pullrequestreview-410038316", "createdAt": "2020-05-12T13:26:16Z", "commit": {"oid": "35895f2f08577de8ed0597fd051bc094f18c7158"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMzoyNjoxN1rOGUGeJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMzoyNjoxN1rOGUGeJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzczMDcyNw==", "bodyText": "You keep those names so you have some useful Input for the uptodate check?\nBecause it's otherwise not used.\nMaybe add a newline to separate the input from the actual project instances, which should be declared private", "url": "https://github.com/apache/lucene-solr/pull/1488#discussion_r423730727", "createdAt": "2020-05-12T13:26:17Z", "author": {"login": "uschindler"}, "path": "gradle/render-javadoc.gradle", "diffHunk": "@@ -42,291 +41,255 @@ allprojects {\n       outputDir = project.javadoc.destinationDir;\n       classpath = sourceSets.main.compileClasspath;\n     }\n+\n+    task renderSiteJavadoc(type: RenderJavadocTask) {\n+      description \"Generates Javadoc API documentation for the site (relative links).\"\n+      group \"documentation\"\n+\n+      dependsOn sourceSets.main.compileClasspath\n+\n+      srcDirSet = sourceSets.main.java;\n+      classpath = sourceSets.main.compileClasspath;\n+\n+      relativeProjectLinks = true\n+\n+      // TODO: proof of concept to place everything in one folder under root's build dir.\n+      def relative = project.path.replaceFirst(\":\", \"\").replace(':', '/')\n+      outputDir = rootProject.file(\"${rootProject.buildDir}/site-docs\").toPath().resolve(relative).toFile()\n+    }\n   }\n }\n \n+// Fix for Java 11 Javadoc tool that cannot handle split packages between modules correctly.\n+// (by removing all the packages which are part of lucene-core)\n+// See: https://issues.apache.org/jira/browse/LUCENE-8738?focusedCommentId=16818106&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16818106\n configure(subprojects.findAll { it.path.startsWith(':lucene') && it.path != ':lucene:core' }) {\n-\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:core'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-\n-      doLast {\n-        // fix for Java 11 Javadoc tool that cannot handle split packages between modules correctly (by removing all the packages which are part of lucene-core)\n-        // problem description: [https://issues.apache.org/jira/browse/LUCENE-8738?focusedCommentId=16818106&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16818106]\n-        Set luceneCorePackages = file(\"${project(':lucene:core').tasks[name].outputDir}/element-list\").readLines('UTF-8').toSet();\n-        File elementFile = file(\"${outputDir}/element-list\");\n-        List elements = elementFile.readLines('UTF-8');\n-        elements.removeAll{ luceneCorePackages.contains(it) }\n-        elementFile.write(elements.join('\\n').concat('\\n'), 'UTF-8');\n-      }\n+  project.tasks.withType(RenderJavadocTask) {\n+    doLast {\n+      Set luceneCorePackages = file(\"${project(':lucene:core').tasks[name].outputDir}/element-list\").readLines('UTF-8').toSet();\n+      File elementFile = file(\"${outputDir}/element-list\");\n+      List elements = elementFile.readLines('UTF-8');\n+      elements.removeAll(luceneCorePackages)\n+      elementFile.write(elements.join('\\n').concat('\\n'), 'UTF-8');\n     }\n   }\n }\n \n+// Add cross-project documentation task dependencies and link generation.\n+configure(subprojects.findAll { it.path.startsWith(':lucene') && it.path != ':lucene:core' }) {\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:core')\n+  }\n+}\n+\n configure(subprojects.findAll { it.path.startsWith(':lucene:analysis') && it.path != ':lucene:analysis:common'}) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:analysis:common'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:analysis:common')\n   }\n }\n \n configure(project(':lucene:benchmark')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:memory',\n-       ':lucene:highlighter',\n-       ':lucene:analysis:common',\n-       ':lucene:queryparser',\n-       ':lucene:facet',\n-       ':lucene:spatial-extras'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+        ':lucene:memory',\n+        ':lucene:highlighter',\n+        ':lucene:analysis:common',\n+        ':lucene:queryparser',\n+        ':lucene:facet',\n+        ':lucene:spatial-extras')\n   }\n }\n \n configure(project(':lucene:classification')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:queries', ':lucene:analysis:common', ':lucene:grouping'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+       ':lucene:queries',\n+       ':lucene:analysis:common',\n+       ':lucene:grouping')\n   }\n }\n \n configure(project(':lucene:demo')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:analysis:common',\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+       ':lucene:analysis:common',\n        ':lucene:queryparser',\n        ':lucene:queries',\n        ':lucene:facet',\n-       ':lucene:expressions'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n+       ':lucene:expressions')\n \n-      // we link the example source in the javadocs, as it's ref'ed elsewhere\n-      linksource = true\n-    }\n+    // We link the example source in the javadocs, as it's ref'ed elsewhere\n+    linksource = true\n   }\n }\n \n configure(project(':lucene:grouping')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:queries'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:queries')\n   }\n }\n \n configure(project(':lucene:highlighter')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:memory'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:memory')\n   }\n }\n \n configure(project(':lucene:monitor')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:memory', ':lucene:analysis:common', ':lucene:queryparser'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+        ':lucene:memory',\n+        ':lucene:analysis:common',\n+        ':lucene:queryparser')\n   }\n }\n \n configure(project(':lucene:queryparser')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:queries', ':lucene:sandbox'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+        ':lucene:queries',\n+        ':lucene:sandbox'\n+    )\n   }\n }\n \n configure(project(':lucene:replicator')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:facet'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:facet')\n   }\n }\n \n configure(project(':lucene:spatial-extras')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:spatial3d'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:spatial3d')\n   }\n }\n \n configure(project(':lucene:suggest')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:analysis:common'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:analysis:common')\n   }\n }\n \n configure(project(':lucene:test-framework')) {\n-  plugins.withType(JavaPlugin) {\n-\n-    renderJavadoc {\n-      [':lucene:codecs'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-      linkJUnit = true\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:codecs')\n   }\n }\n \n configure(subprojects.findAll { it.path.startsWith(':solr') }) {\n-  plugins.withType(JavaPlugin) {\n-    def hasJavdocsTask = project.tasks.collect { it.name }.contains('renderJavadoc')\n-    if (hasJavdocsTask) {\n-      renderJavadoc {\n-        [':lucene:core',\n-         ':lucene:analysis:common',\n-         ':lucene:analysis:icu',\n-         ':lucene:analysis:kuromoji',\n-         ':lucene:analysis:nori',\n-         ':lucene:analysis:morfologik',\n-         ':lucene:analysis:phonetic',\n-         ':lucene:analysis:smartcn',\n-         ':lucene:analysis:stempel',\n-         ':lucene:backward-codecs',\n-         ':lucene:codecs',\n-         ':lucene:expressions',\n-         ':lucene:suggest',\n-         ':lucene:grouping',\n-         ':lucene:join',\n-         ':lucene:queries',\n-         ':lucene:queryparser',\n-         ':lucene:highlighter',\n-         ':lucene:memory',\n-         ':lucene:misc',\n-         ':lucene:classification',\n-         ':lucene:spatial-extras'].collect { path ->\n-          dependsOn \"${path}:renderJavadoc\"\n-          linkProjects += [ path ]\n-        }\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+        ':lucene:core',\n+        ':lucene:analysis:common',\n+        ':lucene:analysis:icu',\n+        ':lucene:analysis:kuromoji',\n+        ':lucene:analysis:nori',\n+        ':lucene:analysis:morfologik',\n+        ':lucene:analysis:phonetic',\n+        ':lucene:analysis:smartcn',\n+        ':lucene:analysis:stempel',\n+        ':lucene:backward-codecs',\n+        ':lucene:codecs',\n+        ':lucene:expressions',\n+        ':lucene:suggest',\n+        ':lucene:grouping',\n+        ':lucene:join',\n+        ':lucene:queries',\n+        ':lucene:queryparser',\n+        ':lucene:highlighter',\n+        ':lucene:memory',\n+        ':lucene:misc',\n+        ':lucene:classification',\n+        ':lucene:spatial-extras'\n+    )\n   }\n }\n \n configure(project(':solr:core')) {\n-  plugins.withType(JavaPlugin) {\n-    // specialized to ONLY depend on solrj\n-    renderJavadoc {\n-      [':solr:solrj'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    // Specialized to ONLY depend on solrj\n+    addLinkedProject(':solr:solrj')\n   }\n }\n \n configure(subprojects.findAll { it.path.startsWith(':solr:contrib') }) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':solr:solrj', ':solr:core'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+        ':solr:solrj',\n+        ':solr:core'\n+    )\n   }\n }\n \n configure(project(':solr:contrib:dataimporthandler-extras')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':solr:contrib:dataimporthandler'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':solr:contrib:dataimporthandler')\n   }\n }\n \n configure(project(':solr:test-framework')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      linkJUnit = true\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    linkJUnit = true\n   }\n }\n \n-\n-configure(subprojects.findAll { it.path in [':solr:solr-ref-guide', ':solr:server', ':solr:webapp']}) {\n-  afterEvaluate {\n-    project.tasks.findByPath(\"renderJavadoc\").enabled = false\n+// Disable Javadoc rendering for these projects.\n+configure(subprojects.findAll { it.path in [\n+    ':solr:solr-ref-guide',\n+    ':solr:server',\n+    ':solr:webapp']}) {\n+  project.tasks.withType(RenderJavadocTask) {\n+    enabled = false\n   }\n }\n \n+\n class RenderJavadocTask extends DefaultTask {\n   @InputFiles\n   @SkipWhenEmpty\n   SourceDirectorySet srcDirSet;\n   \n   @OutputDirectory\n-  File outputDir;\n-  \n+  File outputDir\n+\n   @InputFiles\n   @Classpath\n-  FileCollection classpath;\n+  FileCollection classpath\n   \n   @Input\n-  boolean linksource = false;\n+  boolean linksource = false\n   \n   @Input\n-  boolean linkJUnit = false;\n+  boolean linkJUnit = false\n   \n   @Input\n-  boolean relativeProjectLinks = false;\n+  boolean relativeProjectLinks = false\n \n   @Input\n-  def linkProjects = [];\n-  \n+  def linkedProjectNames = []", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35895f2f08577de8ed0597fd051bc094f18c7158"}, "originalPosition": 427}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNTc4Njcz", "url": "https://github.com/apache/lucene-solr/pull/1488#pullrequestreview-410578673", "createdAt": "2020-05-13T04:27:25Z", "commit": {"oid": "9371b9715da9343a61192435a094a3f68e606516"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNDoyNzoyNVrOGUhA8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNDoyNzoyNVrOGUhA8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2NTYxNg==", "bodyText": "Would it be better to use Unix terminology \"dir\" or \"directory\" for variable names ?", "url": "https://github.com/apache/lucene-solr/pull/1488#discussion_r424165616", "createdAt": "2020-05-13T04:27:25Z", "author": {"login": "mocobeta"}, "path": "gradle/render-javadoc.gradle", "diffHunk": "@@ -39,394 +35,398 @@ allprojects {\n       dependsOn \"renderJavadoc\"\n     }\n \n-    task renderJavadoc {\n+    task renderJavadoc(type: RenderJavadocTask) {\n       description \"Generates Javadoc API documentation for the main source code. This directly invokes javadoc tool.\"\n       group \"documentation\"\n \n-      ext {\n-        linksource = false\n-        linkJUnit = false\n-        linkLuceneProjects = []\n-        linkSorlProjects = []\n-      }\n-\n       dependsOn sourceSets.main.compileClasspath\n \n-      inputs.files { sourceSets.main.java.asFileTree }\n-      outputs.dir project.javadoc.destinationDir\n-\n-      def libName = project.path.startsWith(\":lucene\") ? \"Lucene\" : \"Solr\"\n-      def title = \"${libName} ${project.version} ${project.name} API\".toString()\n-\n-      // absolute urls for \"-linkoffline\" option\n-      def javaSEDocUrl = \"https://docs.oracle.com/en/java/javase/11/docs/api/\"\n-      def junitDocUrl = \"https://junit.org/junit4/javadoc/4.12/\"\n-      def luceneDocUrl = \"https://lucene.apache.org/core/${project.version.replace(\".\", \"_\")}\".toString()\n-      def solrDocUrl = \"https://lucene.apache.org/solr/${project.version.replace(\".\", \"_\")}\".toString()\n-\n-      def javadocCmd = org.gradle.internal.jvm.Jvm.current().getJavadocExecutable()\n-      \n-      doFirst {\n-        def srcDirs = sourceSets.main.java.srcDirs.findAll { dir -> dir.exists() }\n-        def optionsFile = file(\"${getTemporaryDir()}/javadoc-options.txt\")\n-\n-        def opts = []\n-        opts << [ '-overview', file(\"src/java/overview.html\") ]\n-        opts << [ '-sourcepath', srcDirs.join(File.pathSeparator) ]\n-        opts << [ '-subpackages', project.path.startsWith(':lucene') ? 'org.apache.lucene' : 'org.apache.solr' ]\n-        opts << [ '-d', project.javadoc.destinationDir ]\n-        opts << '-protected'\n-        opts << [ '-encoding', 'UTF-8' ]\n-        opts << [ '-charset', 'UTF-8' ]\n-        opts << [ '-docencoding', 'UTF-8' ]\n-        opts << '-noindex'\n-        opts << '-author'\n-        opts << '-version'\n-        if (linksource) {\n-          opts << '-linksource'\n-        }\n-        opts << '-use'\n-        opts << [ '-locale', 'en_US' ]\n-        opts << [ '-windowtitle', title ]\n-        opts << [ '-doctitle', title ]\n-        if (!sourceSets.main.compileClasspath.isEmpty()) {\n-          opts << [ '-classpath', sourceSets.main.compileClasspath.asPath ]\n-        }\n-        opts << [ '-bottom', \"<i>Copyright &copy; 2000-${buildYear} Apache Software Foundation. All Rights Reserved.</i>\" ]\n-\n-        opts << [ '-tag', 'lucene.experimental:a:WARNING: This API is experimental and might change in incompatible ways in the next release.' ]\n-        opts << [ '-tag', 'lucene.internal:a:NOTE: This API is for internal purposes only and might change in incompatible ways in the next release.' ]\n-        opts << [ '-tag', \"lucene.spi:t:SPI Name (case-insensitive: if the name is 'htmlStrip', 'htmlstrip' can be used when looking up the service).\" ]\n-\n-        // resolve links to JavaSE and JUnit API\n-        opts << [ '-linkoffline', javaSEDocUrl, project(':lucene').file('tools/javadoc/java11/') ]\n-        if (linkJUnit) {\n-          opts << [ '-linkoffline', junitDocUrl, project(':lucene').file('tools/javadoc/junit/') ]\n-        }\n-        // resolve inter-project links\n-        linkLuceneProjects.collect { path ->\n-          opts << [ '-linkoffline', \"${luceneDocUrl}/${pathToDocdir(path)}\", file(project(path).javadoc.destinationDir) ]\n-        }\n-        linkSorlProjects.collect { path ->\n-          opts << [ '-linkoffline', \"${solrDocUrl}/${pathToDocdir(path)}\", file(project(path).javadoc.destinationDir) ]\n-        }\n-\n-        opts << [ '--release', 11 ]\n-        opts << '-Xdoclint:all,-missing'\n-\n-        // Temporary file that holds all javadoc options for the current task.\n-        String optionsStr = opts.stream()\n-          .map{ (it instanceof List) ? it.stream().map{it as String}.map(escapeJavadocOption).collect(Collectors.joining(' ')) : escapeJavadocOption(it as String)}\n-          .collect(Collectors.joining('\\n'));\n-        optionsFile.write(optionsStr, 'UTF-8')\n+      srcDirSet = sourceSets.main.java;\n+      outputDir = project.javadoc.destinationDir;\n+      classpath = sourceSets.main.compileClasspath;\n+    }\n \n-        def outputFile = file(\"${getTemporaryDir()}/javadoc-output.txt\")\n-        def result\n-        outputFile.withOutputStream { output ->\n-          result = project.exec {\n-            executable javadocCmd\n+    task renderSiteJavadoc(type: RenderJavadocTask) {\n+      description \"Generates Javadoc API documentation for the site (relative links).\"\n+      group \"documentation\"\n \n-            standardOutput = output\n-            errorOutput = output\n+      dependsOn sourceSets.main.compileClasspath\n \n-            args += [ \"@${optionsFile}\" ]\n+      srcDirSet = sourceSets.main.java;\n+      classpath = sourceSets.main.compileClasspath;\n \n-            // -J flags can't be passed via options file... (an error \"javadoc: error - invalid flag: -J-Xmx512m\" occurs.)\n-            args += [ \"-J-Xmx512m\" ]\n-            // force locale to be \"en_US\" (fix for: https://bugs.openjdk.java.net/browse/JDK-8222793)\n-            args += [ \"-J-Duser.language=en\", \"-J-Duser.country=US\" ]\n+      relativeProjectLinks = true\n \n-            ignoreExitValue true\n-          }\n-        }\n+      // TODO: proof of concept to place everything in one folder under root's build dir.\n+      outputDir = rootProject.file(\"${rootProject.buildDir}/site-docs\").toPath().resolve(project.relativeDocPath).toFile()\n+    }\n+  }\n+}\n \n-        if (result.getExitValue() != 0) {\n-          // Pipe the output to console. Intentionally skips any encoding conversion \n-          // and pumps raw bytes.\n-          System.out.write(outputFile.bytes)\n-\n-          def cause\n-          try {\n-            result.rethrowFailure()\n-          } catch (ex) {\n-            cause = ex\n-          }\n-          throw new GradleException(\"Javadoc generation failed for ${project.path},\\n  Options file at: ${optionsFile}\\n  Command output at: ${outputFile}\", cause)\n-        }\n+// Set up titles and link up some offline docs for all documentation\n+// (they may be unused but this doesn't do any harm).\n+def javaJavadocPackages = project.project(':lucene').file('tools/javadoc/java11/')\n+def junitJavadocPackages = project.project(':lucene').file('tools/javadoc/junit/')\n+allprojects {\n+  project.tasks.withType(RenderJavadocTask) {\n+    title = \"${project.path.startsWith(':lucene') ? 'Lucene' : 'Solr'} ${project.version} ${project.name} API\"\n \n-        // append some special table css, prettify css\n-        ant.concat(destfile: \"${project.javadoc.destinationDir}/stylesheet.css\", append: \"true\", fixlastline: \"true\", encoding: \"UTF-8\") {\n-          filelist(dir: project(\":lucene\").file(\"tools/javadoc\"), files: \"table_padding.css\")\n-          filelist(dir: project(\":lucene\").file(\"tools/prettify\"), files: \"prettify.css\")\n-        }\n-        // append prettify to scripts\n-        ant.concat(destfile: \"${project.javadoc.destinationDir}/script.js\", append: \"true\", fixlastline: \"true\", encoding: \"UTF-8\") {\n-          filelist(dir: project(':lucene').file(\"tools/prettify\"), files: \"prettify.js inject-javadocs.js\")\n-        }\n-        ant.fixcrlf(srcdir: project.javadoc.destinationDir, includes: \"stylesheet.css script.js\", eol: \"lf\", fixlast: \"true\", encoding: \"UTF-8\")\n+    offlineLinks += [\n+        \"https://docs.oracle.com/en/java/javase/11/docs/api/\": javaJavadocPackages,\n+        \"https://junit.org/junit4/javadoc/4.12/\": junitJavadocPackages\n+    ]\n+  }\n+}\n \n-      }\n+// Fix for Java 11 Javadoc tool that cannot handle split packages between modules correctly.\n+// (by removing all the packages which are part of lucene-core)\n+// See: https://issues.apache.org/jira/browse/LUCENE-8738?focusedCommentId=16818106&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16818106\n+configure(subprojects.findAll { it.path.startsWith(':lucene') && it.path != ':lucene:core' }) {\n+  project.tasks.withType(RenderJavadocTask) {\n+    doLast {\n+      Set luceneCorePackages = file(\"${project(':lucene:core').tasks[name].outputDir}/element-list\").readLines('UTF-8').toSet();\n+      File elementFile = file(\"${outputDir}/element-list\");\n+      List elements = elementFile.readLines('UTF-8');\n+      elements.removeAll(luceneCorePackages)\n+      elementFile.write(elements.join('\\n').concat('\\n'), 'UTF-8');\n     }\n   }\n }\n \n+// Add cross-project documentation task dependencies and link generation.\n configure(subprojects.findAll { it.path.startsWith(':lucene') && it.path != ':lucene:core' }) {\n-\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:core'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkLuceneProjects += [ path ]\n-      }\n-\n-      doLast {\n-        // fix for Java 11 Javadoc tool that cannot handle split packages between modules correctly (by removing all the packages which are part of lucene-core)\n-        // problem description: [https://issues.apache.org/jira/browse/LUCENE-8738?focusedCommentId=16818106&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16818106]\n-        ant.local(name: \"element-list-regex\") // contains a regex for all package names which are in lucene-core's javadoc\n-        ant.loadfile(property: \"element-list-regex\", srcFile: \"${project(':lucene:core').javadoc.destinationDir}/element-list\", encoding: \"utf-8\") {\n-          filterchain {\n-            tokenfilter(delimoutput: \"|\") {\n-              replacestring(from: \".\", to: \"\\\\.\")\n-            }\n-          }\n-        }\n-        ant.replaceregexp(\n-            encoding: \"UTF-8\",\n-            file: \"${project.javadoc.destinationDir}/element-list\",\n-            byline: \"true\",\n-            match: \"^(\\${element-list-regex})\\$\",\n-            replace: \"\")\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:core')\n   }\n }\n \n configure(subprojects.findAll { it.path.startsWith(':lucene:analysis') && it.path != ':lucene:analysis:common'}) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:analysis:common'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkLuceneProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:analysis:common')\n   }\n }\n \n configure(project(':lucene:benchmark')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:memory',\n-       ':lucene:highlighter',\n-       ':lucene:analysis:common',\n-       ':lucene:queryparser',\n-       ':lucene:facet',\n-       ':lucene:spatial-extras'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkLuceneProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+        ':lucene:memory',\n+        ':lucene:highlighter',\n+        ':lucene:analysis:common',\n+        ':lucene:queryparser',\n+        ':lucene:facet',\n+        ':lucene:spatial-extras')\n   }\n }\n \n configure(project(':lucene:classification')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:queries', ':lucene:analysis:common', ':lucene:grouping'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkLuceneProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+       ':lucene:queries',\n+       ':lucene:analysis:common',\n+       ':lucene:grouping')\n   }\n }\n \n configure(project(':lucene:demo')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:analysis:common',\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+       ':lucene:analysis:common',\n        ':lucene:queryparser',\n        ':lucene:queries',\n        ':lucene:facet',\n-       ':lucene:expressions'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkLuceneProjects += [ path ]\n-      }\n+       ':lucene:expressions')\n \n-      // we link the example source in the javadocs, as it's ref'ed elsewhere\n-      linksource = true\n-    }\n+    // For the demo, we link the example source in the javadocs, as it's ref'ed elsewhere\n+    linksource = true\n   }\n }\n \n configure(project(':lucene:grouping')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:queries'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkLuceneProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:queries')\n   }\n }\n \n configure(project(':lucene:highlighter')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:memory'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkLuceneProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:memory')\n   }\n }\n \n configure(project(':lucene:monitor')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:memory', ':lucene:analysis:common', ':lucene:queryparser'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkLuceneProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+        ':lucene:memory',\n+        ':lucene:analysis:common',\n+        ':lucene:queryparser')\n   }\n }\n \n configure(project(':lucene:queryparser')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:queries', ':lucene:sandbox'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkLuceneProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+        ':lucene:queries',\n+        ':lucene:sandbox'\n+    )\n   }\n }\n \n configure(project(':lucene:replicator')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:facet'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkLuceneProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:facet')\n   }\n }\n \n configure(project(':lucene:spatial-extras')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:spatial3d'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkLuceneProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:spatial3d')\n   }\n }\n \n configure(project(':lucene:suggest')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':lucene:analysis:common'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkLuceneProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:analysis:common')\n   }\n }\n \n configure(project(':lucene:test-framework')) {\n-  plugins.withType(JavaPlugin) {\n-\n-    renderJavadoc {\n-      [':lucene:codecs'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkLuceneProjects += [ path ]\n-      }\n-      linkJUnit = true\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':lucene:codecs')\n   }\n }\n \n configure(subprojects.findAll { it.path.startsWith(':solr') }) {\n-  plugins.withType(JavaPlugin) {\n-    def hasJavdocsTask = project.tasks.collect { it.name }.contains('renderJavadoc')\n-    if (hasJavdocsTask) {\n-      renderJavadoc {\n-        [':lucene:core',\n-         ':lucene:analysis:common',\n-         ':lucene:analysis:icu',\n-         ':lucene:analysis:kuromoji',\n-         ':lucene:analysis:nori',\n-         ':lucene:analysis:morfologik',\n-         ':lucene:analysis:phonetic',\n-         ':lucene:analysis:smartcn',\n-         ':lucene:analysis:stempel',\n-         ':lucene:backward-codecs',\n-         ':lucene:codecs',\n-         ':lucene:expressions',\n-         ':lucene:suggest',\n-         ':lucene:grouping',\n-         ':lucene:join',\n-         ':lucene:queries',\n-         ':lucene:queryparser',\n-         ':lucene:highlighter',\n-         ':lucene:memory',\n-         ':lucene:misc',\n-         ':lucene:classification',\n-         ':lucene:spatial-extras'].collect { path ->\n-          dependsOn \"${path}:renderJavadoc\"\n-          linkLuceneProjects += [ path ]\n-        }\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+        ':lucene:core',\n+        ':lucene:analysis:common',\n+        ':lucene:analysis:icu',\n+        ':lucene:analysis:kuromoji',\n+        ':lucene:analysis:nori',\n+        ':lucene:analysis:morfologik',\n+        ':lucene:analysis:phonetic',\n+        ':lucene:analysis:smartcn',\n+        ':lucene:analysis:stempel',\n+        ':lucene:backward-codecs',\n+        ':lucene:codecs',\n+        ':lucene:expressions',\n+        ':lucene:suggest',\n+        ':lucene:grouping',\n+        ':lucene:join',\n+        ':lucene:queries',\n+        ':lucene:queryparser',\n+        ':lucene:highlighter',\n+        ':lucene:memory',\n+        ':lucene:misc',\n+        ':lucene:classification',\n+        ':lucene:spatial-extras'\n+    )\n   }\n }\n \n configure(project(':solr:core')) {\n-  plugins.withType(JavaPlugin) {\n-    // specialized to ONLY depend on solrj\n-    renderJavadoc {\n-      [':solr:solrj'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkSorlProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    // Specialized to ONLY depend on solrj\n+    addLinkedProject(':solr:solrj')\n   }\n }\n \n configure(subprojects.findAll { it.path.startsWith(':solr:contrib') }) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':solr:solrj', ':solr:core'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkSorlProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(\n+        ':solr:solrj',\n+        ':solr:core'\n+    )\n   }\n }\n \n configure(project(':solr:contrib:dataimporthandler-extras')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      [':solr:contrib:dataimporthandler'].collect { path ->\n-        dependsOn \"${path}:renderJavadoc\"\n-        linkSorlProjects += [ path ]\n-      }\n-    }\n+  project.tasks.withType(RenderJavadocTask) {\n+    addLinkedProject(':solr:contrib:dataimporthandler')\n   }\n }\n \n-configure(project(':solr:test-framework')) {\n-  plugins.withType(JavaPlugin) {\n-    renderJavadoc {\n-      linkJUnit = true\n-    }\n+// Disable Javadoc rendering for these projects.\n+configure(subprojects.findAll { it.path in [\n+    ':solr:solr-ref-guide',\n+    ':solr:server',\n+    ':solr:webapp']}) {\n+  project.tasks.withType(RenderJavadocTask) {\n+    enabled = false\n   }\n }\n \n \n-configure(subprojects.findAll { it.path in [':solr:solr-ref-guide', ':solr:server', ':solr:webapp']}) {\n-  afterEvaluate {\n-    project.tasks.findByPath(\"renderJavadoc\").enabled = false\n+class RenderJavadocTask extends DefaultTask {\n+  @InputFiles\n+  @SkipWhenEmpty\n+  SourceDirectorySet srcDirSet;\n+  \n+  @OutputDirectory\n+  File outputDir\n+\n+  @InputFiles\n+  @Classpath\n+  FileCollection classpath\n+\n+  @Input\n+  String title\n+\n+  @Input\n+  boolean linksource = false\n+\n+  @Input\n+  boolean relativeProjectLinks = false\n+\n+  @Input\n+  def linkedProjectNames = []\n+  def linkedProjects = []\n+\n+  @Input\n+  def offlineLinks = [:]\n+\n+  @Input\n+  def luceneDocUrl = project.propertyOrDefault('lucene.javadoc.url', \"https://lucene.apache.org/core/${project.baseVersion.replace(\".\", \"_\")}\")\n+\n+  @Input\n+  def solrDocUrl = project.propertyOrDefault('solr.javadoc.url', \"https://lucene.apache.org/solr/${project.baseVersion.replace(\".\", \"_\")}\")\n+\n+  public addLinkedProject(String... projectPaths) {\n+    projectPaths.each { otherProjectPath ->\n+      // We want to depend on the task of the same name in the other project.\n+      def myName = name\n+      def otherProject = project.findProject(otherProjectPath)\n+      def otherTasks = otherProject.tasks.matching { it.name == myName }\n+      dependsOn otherTasks\n+\n+      // Create a cross-link between documentation.\n+      linkedProjects.add(otherProject)\n+      linkedProjectNames.add(otherProjectPath)\n+    }\n+  }\n+\n+  @TaskAction\n+  public void render() {\n+    def javadocCmd = org.gradle.internal.jvm.Jvm.current().getJavadocExecutable()\n+\n+    def srcDirs = srcDirSet.srcDirs.findAll { dir -> dir.exists() }\n+    def optionsFile = project.file(\"${getTemporaryDir()}/javadoc-options.txt\")\n+    \n+    def opts = []\n+    opts << [ '-overview', project.file(\"${srcDirs[0]}/overview.html\") ]\n+    opts << [ '-sourcepath', srcDirs.join(File.pathSeparator) ]\n+    opts << [ '-subpackages', project.path.startsWith(':lucene') ? 'org.apache.lucene' : 'org.apache.solr' ]\n+    opts << [ '-d', outputDir ]\n+    opts << '-protected'\n+    opts << [ '-encoding', 'UTF-8' ]\n+    opts << [ '-charset', 'UTF-8' ]\n+    opts << [ '-docencoding', 'UTF-8' ]\n+    opts << '-noindex'\n+    opts << '-author'\n+    opts << '-version'\n+    if (linksource) {\n+      opts << '-linksource'\n+    }\n+    opts << '-use'\n+    opts << [ '-locale', 'en_US' ]\n+    opts << [ '-windowtitle', title ]\n+    opts << [ '-doctitle', title ]\n+    if (!classpath.isEmpty()) {\n+      opts << [ '-classpath', classpath.asPath ]\n+    }\n+    opts << [ '-bottom', \"<i>Copyright &copy; 2000-${project.buildYear} Apache Software Foundation. All Rights Reserved.</i>\" ]\n+\n+    opts << [ '-tag', 'lucene.experimental:a:WARNING: This API is experimental and might change in incompatible ways in the next release.' ]\n+    opts << [ '-tag', 'lucene.internal:a:NOTE: This API is for internal purposes only and might change in incompatible ways in the next release.' ]\n+    opts << [ '-tag', \"lucene.spi:t:SPI Name (case-insensitive: if the name is 'htmlStrip', 'htmlstrip' can be used when looking up the service).\" ]\n+\n+    def allOfflineLinks = [:]\n+    allOfflineLinks.putAll(offlineLinks)\n+\n+    // Resolve inter-project links.\n+    linkedProjects.collect { otherProject ->\n+      // For relative links we compute the actual relative link between projects.\n+      // TODO: if we don't want relative Solr-Lucene links we need to add a condition here\n+      // and it'll just render as an offline link.\n+      if (relativeProjectLinks) {\n+        def pathTo = otherProject.tasks[name].outputDir.toPath().toAbsolutePath()\n+        def pathFrom = outputDir.toPath().toAbsolutePath()\n+        def relative = pathFrom.relativize(pathTo).toString().replace(File.separator, '/')\n+        opts << [ '-link', relative ]\n+      } else {\n+        // For absolute links, we determine the target URL by assembling the full URL.\n+        def base = otherProject.path.startsWith(\":lucene\") ? luceneDocUrl : solrDocUrl\n+        allOfflineLinks.put(\"${base}/${otherProject.relativeDocPath}/\".toString(), otherProject.tasks[name].outputDir)\n+      }\n+    }\n+\n+    // Add offline links.\n+    // TODO: add some sanity check/ validation here to ensure folder/package-list or folder/element-list is present?\n+    allOfflineLinks.each { url, folder ->\n+      opts << [ '-linkoffline', url, folder ]\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9371b9715da9343a61192435a094a3f68e606516"}, "originalPosition": 648}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "584ed831a0867b980fdce029b82d89876694d509", "author": {"user": {"login": "dweiss", "name": "Dawid Weiss"}}, "url": "https://github.com/apache/lucene-solr/commit/584ed831a0867b980fdce029b82d89876694d509", "committedDate": "2020-05-13T08:05:11Z", "message": "Folder->dir."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ac2a9d5c8a02382f1471ebffad86a2d749595b4", "author": {"user": {"login": "dweiss", "name": "Dawid Weiss"}}, "url": "https://github.com/apache/lucene-solr/commit/2ac2a9d5c8a02382f1471ebffad86a2d749595b4", "committedDate": "2020-05-13T08:18:16Z", "message": "Don't create relative links if docroots are different."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f385cebf6bd6dcfd8b0ecbe887aec7d3311b450d", "author": {"user": {"login": "dweiss", "name": "Dawid Weiss"}}, "url": "https://github.com/apache/lucene-solr/commit/f385cebf6bd6dcfd8b0ecbe887aec7d3311b450d", "committedDate": "2020-05-13T08:22:42Z", "message": "Add sanity check for presence of pre-rendered package list."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79b4a53bf6b428c44d000d42b5fef5df020e89bf", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/79b4a53bf6b428c44d000d42b5fef5df020e89bf", "committedDate": "2020-05-13T13:20:47Z", "message": "Create output directory before task runs and relative links are generated"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7055c61383ba45fd7e3be024191eeb9a2924a20f", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/7055c61383ba45fd7e3be024191eeb9a2924a20f", "committedDate": "2020-05-13T13:25:09Z", "message": "Make \"gradle documentation\" depend on site javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1ba5c30b87ddf69e91b2e3653f45f35ab8bf364", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/e1ba5c30b87ddf69e91b2e3653f45f35ab8bf364", "committedDate": "2020-05-13T13:34:18Z", "message": "Strip first component of relative doc path (to be consistent with Ant)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c3056e2ea7160b69db52310c4509126f22cfc92", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/9c3056e2ea7160b69db52310c4509126f22cfc92", "committedDate": "2020-05-13T17:29:29Z", "message": "Remove manual links between Javadocs: \"-link\" is constructed from project dependency graph"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13c16a4fa9e8cca0707970395431d2a58b4806bc", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/13c16a4fa9e8cca0707970395431d2a58b4806bc", "committedDate": "2020-05-13T18:17:00Z", "message": "Add back \"-linksource\" for the demo module (got lost with last commit)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d62be05314f230f7b0058fddb62cf4885fcf981", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/8d62be05314f230f7b0058fddb62cf4885fcf981", "committedDate": "2020-05-13T21:40:16Z", "message": "Merge branch 'master' of https://gitbox.apache.org/repos/asf/lucene-solr into jira/LUCENE-9321-globaljavadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNDE1OTky", "url": "https://github.com/apache/lucene-solr/pull/1488#pullrequestreview-411415992", "createdAt": "2020-05-14T02:03:15Z", "commit": {"oid": "8d62be05314f230f7b0058fddb62cf4885fcf981"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9308f77c089d7b7b5125f6786bfb56f0fd2c3767", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/9308f77c089d7b7b5125f6786bfb56f0fd2c3767", "committedDate": "2020-05-14T08:46:35Z", "message": "Tasks are an unordered set so javadoc compilation may not be reproducible, if we have split packages (order of link arguments count). So we sort those, first coming all with a project name equals 'core', the lexicographically sorted by path"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7655e829815b745710a5387e6f57827412b8dbb", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/b7655e829815b745710a5387e6f57827412b8dbb", "committedDate": "2020-05-14T10:35:12Z", "message": "Recursively collect tasks"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNjg1Mjc4", "url": "https://github.com/apache/lucene-solr/pull/1488#pullrequestreview-411685278", "createdAt": "2020-05-14T10:48:13Z", "commit": {"oid": "b7655e829815b745710a5387e6f57827412b8dbb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDo0ODoxM1rOGVWsRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDo0ODoxM1rOGVWsRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA0NTA2MQ==", "bodyText": "findRenderTasksInDependencies maybe?", "url": "https://github.com/apache/lucene-solr/pull/1488#discussion_r425045061", "createdAt": "2020-05-14T10:48:13Z", "author": {"login": "dweiss"}, "path": "gradle/render-javadoc.gradle", "diffHunk": "@@ -151,6 +151,18 @@ class RenderJavadocTask extends DefaultTask {\n \n   @Input\n   def solrDocUrl = project.propertyOrDefault('solr.javadoc.url', \"https://lucene.apache.org/solr/${project.baseVersion.replace(\".\", \"_\")}\")\n+  \n+  /** Utility method to recursively collect all tasks with same name like this one that we depend on */\n+  private Set findPreviousRenderTasks() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7655e829815b745710a5387e6f57827412b8dbb"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c48fbc432ea5f5a41b391288a9f95a27bfa1333b", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/c48fbc432ea5f5a41b391288a9f95a27bfa1333b", "committedDate": "2020-05-14T10:52:27Z", "message": "Rename method"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2680, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}