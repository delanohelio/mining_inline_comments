{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyOTExOTg3", "number": 2121, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMTowMToxMVrOFCmBLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjo0MDoyMFrOFFsLeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjY0MzY3OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateDocumentMerger.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMTowMToxMVrOIB2Arg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNTo1MjozMVrOICDuhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgwNDM5OA==", "bodyText": "can we default to (unknown id) otherwise the error message will look weird I think.", "url": "https://github.com/apache/lucene-solr/pull/2121#discussion_r538804398", "createdAt": "2020-12-08T21:01:11Z", "author": {"login": "madrob"}, "path": "solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateDocumentMerger.java", "diffHunk": "@@ -143,6 +147,15 @@ public SolrInputDocument merge(final SolrInputDocument fromDoc, SolrInputDocumen\n     return toDoc;\n   }\n \n+  private static String getID(SolrInputDocument doc, IndexSchema schema) {\n+    String id = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2925ab079ead8d16ad312f777858478a2e0b651"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAyOTEyNw==", "bodyText": "I'm thinking to rephrase the above error message to something like so that it is better than the previous msg. If the id is not known then, I think maybe it is better not to send anything related id, wdyt?\n\"Error:\" + getID(toDoc, schema) + \"Unknown operation for the an atomic update : \" + key;", "url": "https://github.com/apache/lucene-solr/pull/2121#discussion_r539029127", "createdAt": "2020-12-09T05:52:31Z", "author": {"login": "munendrasn"}, "path": "solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateDocumentMerger.java", "diffHunk": "@@ -143,6 +147,15 @@ public SolrInputDocument merge(final SolrInputDocument fromDoc, SolrInputDocumen\n     return toDoc;\n   }\n \n+  private static String getID(SolrInputDocument doc, IndexSchema schema) {\n+    String id = \"\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgwNDM5OA=="}, "originalCommit": {"oid": "e2925ab079ead8d16ad312f777858478a2e0b651"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjY3MzM3OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateDocumentMerger.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMTowODo1MlrOIB2SKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNTo1NDoyMlrOICDw2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgwODg3Mw==", "bodyText": "I don't think we want msg copied since it will be in the cause anyway.", "url": "https://github.com/apache/lucene-solr/pull/2121#discussion_r538808873", "createdAt": "2020-12-08T21:08:52Z", "author": {"login": "madrob"}, "path": "solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateDocumentMerger.java", "diffHunk": "@@ -553,7 +574,15 @@ private Object getNativeFieldValue(String fieldName, Object val) {\n       return val;\n     }\n     SchemaField sf = schema.getField(fieldName);\n-    return sf.getType().toNativeType(val);\n+    try {\n+      return sf.getType().toNativeType(val);\n+    } catch (SolrException ex) {\n+      throw new SolrException(SolrException.ErrorCode.getErrorCode(ex.code()),\n+          \"Error converting field '\" + sf.getName() + \"'='\" +val+\"' to native type, msg=\" + ex.getMessage(), ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2925ab079ead8d16ad312f777858478a2e0b651"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAyOTcyMw==", "bodyText": "cause gets lost in the metadata section of the response so, thought this would give simpler insight into error. Also, trying to follow the same convention as other error messages in DocumentBuilder", "url": "https://github.com/apache/lucene-solr/pull/2121#discussion_r539029723", "createdAt": "2020-12-09T05:54:22Z", "author": {"login": "munendrasn"}, "path": "solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateDocumentMerger.java", "diffHunk": "@@ -553,7 +574,15 @@ private Object getNativeFieldValue(String fieldName, Object val) {\n       return val;\n     }\n     SchemaField sf = schema.getField(fieldName);\n-    return sf.getType().toNativeType(val);\n+    try {\n+      return sf.getType().toNativeType(val);\n+    } catch (SolrException ex) {\n+      throw new SolrException(SolrException.ErrorCode.getErrorCode(ex.code()),\n+          \"Error converting field '\" + sf.getName() + \"'='\" +val+\"' to native type, msg=\" + ex.getMessage(), ex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgwODg3Mw=="}, "originalCommit": {"oid": "e2925ab079ead8d16ad312f777858478a2e0b651"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjY3OTcxOnYy", "diffSide": "RIGHT", "path": "solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesStandalone.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMToxMDozMFrOIB2VwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNTo0NToxOFrOICDa7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgwOTc5Mw==", "bodyText": "This surprises me a little bit that we can't increment a float by an integer amount?", "url": "https://github.com/apache/lucene-solr/pull/2121#discussion_r538809793", "createdAt": "2020-12-08T21:10:30Z", "author": {"login": "madrob"}, "path": "solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesStandalone.java", "diffHunk": "@@ -121,6 +123,36 @@ public void deleteAllAndCommit() throws Exception {\n     assertU(commit(\"softCommit\", \"false\"));\n   }\n \n+  @Test\n+  public void testUpdateBadRequest() throws Exception {\n+    final long version1 = addAndGetVersion(sdoc(\"id\", \"1\", \"title_s\", \"first\", \"inplace_updatable_float\", 41), null);\n+    assertU(commit());\n+\n+    // invalid value with set operation\n+    SolrException e = expectThrows(SolrException.class,\n+        () -> addAndAssertVersion(version1, \"id\", \"1\", \"inplace_updatable_float\", map(\"set\", \"NOT_NUMBER\")));\n+    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n+    MatcherAssert.assertThat(e.getMessage(), containsString(\"For input string: \\\"NOT_NUMBER\\\"\"));\n+\n+    // invalid value with inc operation\n+    e = expectThrows(SolrException.class,\n+        () -> addAndAssertVersion(version1, \"id\", \"1\", \"inplace_updatable_float\", map(\"inc\", \"NOT_NUMBER\")));\n+    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n+    MatcherAssert.assertThat(e.getMessage(), containsString(\"For input string: \\\"NOT_NUMBER\\\"\"));\n+\n+    // inc op with null value\n+    e = expectThrows(SolrException.class,\n+        () -> addAndAssertVersion(version1, \"id\", \"1\", \"inplace_updatable_float\", map(\"inc\", null)));\n+    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n+    MatcherAssert.assertThat(e.getMessage(), containsString(\"Invalid input 'null' for field inplace_updatable_float\"));\n+\n+    e = expectThrows(SolrException.class,\n+        () -> addAndAssertVersion(version1, \"id\", \"1\", \"inplace_updatable_float\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2925ab079ead8d16ad312f777858478a2e0b651"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAyNDEwOQ==", "bodyText": "We can increment float by an integer. In this particular test input, verifying the case when instead of passing the number, a list of numbers is passed. Previously, Solr used to return 500 with the current changes Bad request would be returned\n\"Invalid input '[123]' for field inplace_updatable_float\"", "url": "https://github.com/apache/lucene-solr/pull/2121#discussion_r539024109", "createdAt": "2020-12-09T05:45:18Z", "author": {"login": "munendrasn"}, "path": "solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesStandalone.java", "diffHunk": "@@ -121,6 +123,36 @@ public void deleteAllAndCommit() throws Exception {\n     assertU(commit(\"softCommit\", \"false\"));\n   }\n \n+  @Test\n+  public void testUpdateBadRequest() throws Exception {\n+    final long version1 = addAndGetVersion(sdoc(\"id\", \"1\", \"title_s\", \"first\", \"inplace_updatable_float\", 41), null);\n+    assertU(commit());\n+\n+    // invalid value with set operation\n+    SolrException e = expectThrows(SolrException.class,\n+        () -> addAndAssertVersion(version1, \"id\", \"1\", \"inplace_updatable_float\", map(\"set\", \"NOT_NUMBER\")));\n+    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n+    MatcherAssert.assertThat(e.getMessage(), containsString(\"For input string: \\\"NOT_NUMBER\\\"\"));\n+\n+    // invalid value with inc operation\n+    e = expectThrows(SolrException.class,\n+        () -> addAndAssertVersion(version1, \"id\", \"1\", \"inplace_updatable_float\", map(\"inc\", \"NOT_NUMBER\")));\n+    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n+    MatcherAssert.assertThat(e.getMessage(), containsString(\"For input string: \\\"NOT_NUMBER\\\"\"));\n+\n+    // inc op with null value\n+    e = expectThrows(SolrException.class,\n+        () -> addAndAssertVersion(version1, \"id\", \"1\", \"inplace_updatable_float\", map(\"inc\", null)));\n+    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n+    MatcherAssert.assertThat(e.getMessage(), containsString(\"Invalid input 'null' for field inplace_updatable_float\"));\n+\n+    e = expectThrows(SolrException.class,\n+        () -> addAndAssertVersion(version1, \"id\", \"1\", \"inplace_updatable_float\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgwOTc5Mw=="}, "originalCommit": {"oid": "e2925ab079ead8d16ad312f777858478a2e0b651"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNTExMDMyOnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateDocumentMerger.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjo0MDoyMFrOIGU1Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjo0MDoyMFrOIGU1Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUwMzcxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if( sf != null ) {\n          \n          \n            \n                if ( sf != null ) {", "url": "https://github.com/apache/lucene-solr/pull/2121#discussion_r543503718", "createdAt": "2020-12-15T16:40:20Z", "author": {"login": "jbampton"}, "path": "solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateDocumentMerger.java", "diffHunk": "@@ -143,6 +147,15 @@ public SolrInputDocument merge(final SolrInputDocument fromDoc, SolrInputDocumen\n     return toDoc;\n   }\n \n+  private static String getID(SolrInputDocument doc, IndexSchema schema) {\n+    String id = \"\";\n+    SchemaField sf = schema.getUniqueKeyField();\n+    if( sf != null ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2925ab079ead8d16ad312f777858478a2e0b651"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 966, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}