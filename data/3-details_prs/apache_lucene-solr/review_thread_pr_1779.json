{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyNjIzNzIy", "number": 1779, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjoyNTo0M1rOEbpcKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjo1MDozMlrOEbqFhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDI1OTYwOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjoyNTo0M1rOHFsuJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjoyNjowMFrOHFsu-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTczNzYzOA==", "bodyText": "this is terrible but I don't know of a better way of doing this. this at least works on my machine :) and would have found the issue", "url": "https://github.com/apache/lucene-solr/pull/1779#discussion_r475737638", "createdAt": "2020-08-24T16:25:43Z", "author": {"login": "s1monw"}, "path": "lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue.java", "diffHunk": "@@ -36,6 +37,26 @@\n  */\n public class TestDocumentsWriterDeleteQueue extends LuceneTestCase {\n \n+\n+  public void testAdvanceReferencesOriginal() {\n+    WeakAndNext weakAndNext = new WeakAndNext();\n+    DocumentsWriterDeleteQueue next = weakAndNext.next;\n+    assertNotNull(next);\n+    System.gc();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51f6440aff00ccc6a009b982af8981b4abd38c25"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTczNzg1MQ==", "bodyText": "@uschindler @dweiss maybe you have better ideas", "url": "https://github.com/apache/lucene-solr/pull/1779#discussion_r475737851", "createdAt": "2020-08-24T16:26:00Z", "author": {"login": "s1monw"}, "path": "lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue.java", "diffHunk": "@@ -36,6 +37,26 @@\n  */\n public class TestDocumentsWriterDeleteQueue extends LuceneTestCase {\n \n+\n+  public void testAdvanceReferencesOriginal() {\n+    WeakAndNext weakAndNext = new WeakAndNext();\n+    DocumentsWriterDeleteQueue next = weakAndNext.next;\n+    assertNotNull(next);\n+    System.gc();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTczNzYzOA=="}, "originalCommit": {"oid": "51f6440aff00ccc6a009b982af8981b4abd38c25"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDMwMTgyOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjozNTowMFrOHFtJkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxODoyNjozNlrOHFxP1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc0NDY1Nw==", "bodyText": "Maybe add a comment to this method referencing the issue, Simon?", "url": "https://github.com/apache/lucene-solr/pull/1779#discussion_r475744657", "createdAt": "2020-08-24T16:35:00Z", "author": {"login": "dweiss"}, "path": "lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue.java", "diffHunk": "@@ -573,6 +573,10 @@ long getMaxCompletedSeqNo() {\n     }\n   }\n \n+  private static LongSupplier getPrevMaxSeqIdSupplier(AtomicLong nextSeqNo) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51f6440aff00ccc6a009b982af8981b4abd38c25"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgxMTc5OA==", "bodyText": "done", "url": "https://github.com/apache/lucene-solr/pull/1779#discussion_r475811798", "createdAt": "2020-08-24T18:26:36Z", "author": {"login": "s1monw"}, "path": "lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue.java", "diffHunk": "@@ -573,6 +573,10 @@ long getMaxCompletedSeqNo() {\n     }\n   }\n \n+  private static LongSupplier getPrevMaxSeqIdSupplier(AtomicLong nextSeqNo) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc0NDY1Nw=="}, "originalCommit": {"oid": "51f6440aff00ccc6a009b982af8981b4abd38c25"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDM2NTUxOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjo1MDozMlrOHFtyDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxODo0MzozM1rOHFxzWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc1NTAyMw==", "bodyText": "I checked openjdk sources and they use System.gc() with a similar expectation that it will always try to flush all weak refs before returning, so this seems fine. The test itself could maybe be made more explicit by utilizing an explicit ReferenceQueue rather than asserting the reference has been cleared but this is a matter of taste - if this works, it will in both cases.", "url": "https://github.com/apache/lucene-solr/pull/1779#discussion_r475755023", "createdAt": "2020-08-24T16:50:32Z", "author": {"login": "dweiss"}, "path": "lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue.java", "diffHunk": "@@ -36,6 +37,26 @@\n  */\n public class TestDocumentsWriterDeleteQueue extends LuceneTestCase {\n \n+\n+  public void testAdvanceReferencesOriginal() {\n+    WeakAndNext weakAndNext = new WeakAndNext();\n+    DocumentsWriterDeleteQueue next = weakAndNext.next;\n+    assertNotNull(next);\n+    System.gc();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51f6440aff00ccc6a009b982af8981b4abd38c25"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgxMjAyMw==", "bodyText": "cool! I think the simpler the better", "url": "https://github.com/apache/lucene-solr/pull/1779#discussion_r475812023", "createdAt": "2020-08-24T18:26:59Z", "author": {"login": "s1monw"}, "path": "lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue.java", "diffHunk": "@@ -36,6 +37,26 @@\n  */\n public class TestDocumentsWriterDeleteQueue extends LuceneTestCase {\n \n+\n+  public void testAdvanceReferencesOriginal() {\n+    WeakAndNext weakAndNext = new WeakAndNext();\n+    DocumentsWriterDeleteQueue next = weakAndNext.next;\n+    assertNotNull(next);\n+    System.gc();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc1NTAyMw=="}, "originalCommit": {"oid": "51f6440aff00ccc6a009b982af8981b4abd38c25"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgyMDg5MQ==", "bodyText": "I would also use a ReferenceQueue to do the check. The weak.get() has a bad taste to me.\nI did not check that System.gc() tries to cleanup weak refs, but if it does and we can rely on this, I am fine.", "url": "https://github.com/apache/lucene-solr/pull/1779#discussion_r475820891", "createdAt": "2020-08-24T18:43:33Z", "author": {"login": "uschindler"}, "path": "lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue.java", "diffHunk": "@@ -36,6 +37,26 @@\n  */\n public class TestDocumentsWriterDeleteQueue extends LuceneTestCase {\n \n+\n+  public void testAdvanceReferencesOriginal() {\n+    WeakAndNext weakAndNext = new WeakAndNext();\n+    DocumentsWriterDeleteQueue next = weakAndNext.next;\n+    assertNotNull(next);\n+    System.gc();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc1NTAyMw=="}, "originalCommit": {"oid": "51f6440aff00ccc6a009b982af8981b4abd38c25"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1327, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}