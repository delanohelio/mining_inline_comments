{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYwNTk2NDAx", "number": 1709, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNzoyMzoxNFrOEUsPOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNzoyMzoxNFrOEUsPOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTMxNzcxOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNzoyMzoxNFrOG7CEFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNzoyNjoxMlrOG7CKgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU1Mjk4Mg==", "bodyText": "maybe also add a test for the case when there are two MatchAllDocsQuery queries as filters with no MUST clauses?", "url": "https://github.com/apache/lucene-solr/pull/1709#discussion_r464552982", "createdAt": "2020-08-03T17:23:14Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites.java", "diffHunk": "@@ -312,12 +312,20 @@ public void testRemoveMatchAllFilter() throws IOException {\n         .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.MUST)\n         .add(new MatchAllDocsQuery(), Occur.FILTER)\n         .build();\n-    BooleanQuery expected = new BooleanQuery.Builder()\n+    Query expected = new BooleanQuery.Builder()\n         .setMinimumNumberShouldMatch(bq.getMinimumNumberShouldMatch())\n         .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST)\n         .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.MUST)\n         .build();\n     assertEquals(expected, searcher.rewrite(bq));\n+\n+    bq = new BooleanQuery.Builder()\n+            .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n+            .add(new MatchAllDocsQuery(), Occur.FILTER)\n+            .build();\n+    expected = new BoostQuery(new ConstantScoreQuery(\n+            new TermQuery(new Term(\"foo\", \"bar\"))), 0.0f);\n+    assertEquals(expected, searcher.rewrite(bq));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61de3f22b6a36184bc1521da9ffcc315fc3a6cc9"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU1NDYyNQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/apache/lucene-solr/pull/1709#discussion_r464554625", "createdAt": "2020-08-03T17:26:12Z", "author": {"login": "jtibshirani"}, "path": "lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites.java", "diffHunk": "@@ -312,12 +312,20 @@ public void testRemoveMatchAllFilter() throws IOException {\n         .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.MUST)\n         .add(new MatchAllDocsQuery(), Occur.FILTER)\n         .build();\n-    BooleanQuery expected = new BooleanQuery.Builder()\n+    Query expected = new BooleanQuery.Builder()\n         .setMinimumNumberShouldMatch(bq.getMinimumNumberShouldMatch())\n         .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST)\n         .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.MUST)\n         .build();\n     assertEquals(expected, searcher.rewrite(bq));\n+\n+    bq = new BooleanQuery.Builder()\n+            .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n+            .add(new MatchAllDocsQuery(), Occur.FILTER)\n+            .build();\n+    expected = new BoostQuery(new ConstantScoreQuery(\n+            new TermQuery(new Term(\"foo\", \"bar\"))), 0.0f);\n+    assertEquals(expected, searcher.rewrite(bq));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU1Mjk4Mg=="}, "originalCommit": {"oid": "61de3f22b6a36184bc1521da9ffcc315fc3a6cc9"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1403, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}