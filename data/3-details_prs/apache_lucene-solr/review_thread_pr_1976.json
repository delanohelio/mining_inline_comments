{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxNjYyMjU2", "number": 1976, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzozNToyMFrOEsuIig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMDoyMDozNFrOEuKHYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzI4NjUwOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/util/automaton/Automata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzozNToyMFrOHgHgrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzozNToyMFrOHgHgrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzOTUzNA==", "bodyText": "this looks wrong as we should still make sure that the empty string is rejected if min==\"\" and minInclusive==false?", "url": "https://github.com/apache/lucene-solr/pull/1976#discussion_r503439534", "createdAt": "2020-10-12T17:35:20Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/util/automaton/Automata.java", "diffHunk": "@@ -254,7 +254,7 @@ public static Automaton makeBinaryInterval(BytesRef min, boolean minInclusive, B\n       cmp = min.compareTo(max);\n     } else {\n       cmp = -1;\n-      if (min.length == 0 && minInclusive) {\n+      if (min.length == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52fff170add92002a2affafa850e922c94b9b3a6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MzM5OTQ3OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/util/automaton/Automata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMjoxMzowNVrOHhnfOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwOTowMDoxMVrOHh9ioA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTAxMjAyNg==", "bodyText": "I don't think this is right since this only accepts strings of length 1.", "url": "https://github.com/apache/lucene-solr/pull/1976#discussion_r505012026", "createdAt": "2020-10-14T22:13:05Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/util/automaton/Automata.java", "diffHunk": "@@ -85,7 +85,15 @@ public static Automaton makeAnyBinary() {\n     a.finishState();\n     return a;\n   }\n-  \n+\n+  /**\n+   * Returns a new (deterministic) automaton that accepts all binary terms except\n+   * the empty string.\n+   */\n+  public static Automaton makeAnyBinaryExceptEmpty() {\n+    return makeCharRange(0, 255);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f52c0b0885f785d9eaa056208630d097d2362a4"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM3MzM0NA==", "bodyText": "Yes, I was missing that this doesn't include a self-referencing accept state. Fixed that and added more tests to check this is working now.", "url": "https://github.com/apache/lucene-solr/pull/1976#discussion_r505373344", "createdAt": "2020-10-15T09:00:11Z", "author": {"login": "cbuescher"}, "path": "lucene/core/src/java/org/apache/lucene/util/automaton/Automata.java", "diffHunk": "@@ -85,7 +85,15 @@ public static Automaton makeAnyBinary() {\n     a.finishState();\n     return a;\n   }\n-  \n+\n+  /**\n+   * Returns a new (deterministic) automaton that accepts all binary terms except\n+   * the empty string.\n+   */\n+  public static Automaton makeAnyBinaryExceptEmpty() {\n+    return makeCharRange(0, 255);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTAxMjAyNg=="}, "originalCommit": {"oid": "3f52c0b0885f785d9eaa056208630d097d2362a4"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2ODM1NTIwOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/util/automaton/Automata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMDoyMDowNFrOHiYeYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNjozMTozM1rOHipADw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTgxNDYyNA==", "bodyText": "Do we need to call setAccept on s1 too? Or is it done implicitly elsewhere (I'm not completely familiar with the Automaton code)", "url": "https://github.com/apache/lucene-solr/pull/1976#discussion_r505814624", "createdAt": "2020-10-15T20:20:04Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/util/automaton/Automata.java", "diffHunk": "@@ -85,7 +85,22 @@ public static Automaton makeAnyBinary() {\n     a.finishState();\n     return a;\n   }\n-  \n+\n+  /**\n+   * Returns a new (deterministic) automaton that accepts all binary terms except\n+   * the empty string.\n+   */\n+  public static Automaton makeAnyBinaryExceptEmpty() {\n+    Automaton a = new Automaton();\n+    int s1 = a.createState();\n+    int s2 = a.createState();\n+    a.setAccept(s2, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d6ea1a9fbf32880510208d630b1314f9679e628"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA4NTM5MQ==", "bodyText": "Oops ignore this comment I was totally confused. :)", "url": "https://github.com/apache/lucene-solr/pull/1976#discussion_r506085391", "createdAt": "2020-10-16T06:31:33Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/util/automaton/Automata.java", "diffHunk": "@@ -85,7 +85,22 @@ public static Automaton makeAnyBinary() {\n     a.finishState();\n     return a;\n   }\n-  \n+\n+  /**\n+   * Returns a new (deterministic) automaton that accepts all binary terms except\n+   * the empty string.\n+   */\n+  public static Automaton makeAnyBinaryExceptEmpty() {\n+    Automaton a = new Automaton();\n+    int s1 = a.createState();\n+    int s2 = a.createState();\n+    a.setAccept(s2, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTgxNDYyNA=="}, "originalCommit": {"oid": "8d6ea1a9fbf32880510208d630b1314f9679e628"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2ODM1NjgxOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/util/automaton/Automata.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMDoyMDozNFrOHiYfTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMDoyMDozNFrOHiYfTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTgxNDg2Mw==", "bodyText": "Maybe call makeNonEmptyBinary?", "url": "https://github.com/apache/lucene-solr/pull/1976#discussion_r505814863", "createdAt": "2020-10-15T20:20:34Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/util/automaton/Automata.java", "diffHunk": "@@ -85,7 +85,22 @@ public static Automaton makeAnyBinary() {\n     a.finishState();\n     return a;\n   }\n-  \n+\n+  /**\n+   * Returns a new (deterministic) automaton that accepts all binary terms except\n+   * the empty string.\n+   */\n+  public static Automaton makeAnyBinaryExceptEmpty() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d6ea1a9fbf32880510208d630b1314f9679e628"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1144, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}