{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0OTQ5MDI4", "number": 2165, "title": "SOLR-15059: Improve query performance monitoring", "bodyText": "Description\nSee JIRA: https://issues.apache.org/jira/browse/SOLR-15059 ... see a detailed description in the JIRA\nSolution\nImprove the Grafana dashboard to include graphs for monitoring query performance.\nTests\nManual testing of the Grafana dashboard in the browser while running query load.\nChecklist\nPlease review the following and check all that apply:\n\n I have reviewed the guidelines for How to Contribute and my code conforms to the standards described there to the best of my ability.\n I have created a Jira issue and added the issue ID to my pull request title.\n I have given Solr maintainers access to contribute to my PR branch. (optional but recommended)\n I have developed this patch against the master branch.\n I have run ./gradlew check.\n I have added tests for my changes.\n I have added documentation for the Ref Guide (for Solr changes only).", "createdAt": "2020-12-23T17:22:28Z", "url": "https://github.com/apache/lucene-solr/pull/2165", "merged": true, "mergeCommit": {"oid": "8b55fb868de1fb8b82b8663d19285a63ac9ee7af"}, "closed": true, "closedAt": "2021-01-07T16:17:38Z", "author": {"login": "thelabdude"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdpCdTkgH2gAyNTQ0OTQ5MDI4OmIzMmNiMGU1MTNmYjVlY2E4MmQwODk1NWFiZDAzODE4OGQxNzJkNDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdt2SMBAH2gAyNTQ0OTQ5MDI4OjBhNTgwZjg3YTVhNzE5NDFmZmJmYTMwOTJlMWYyOWUzYTRhMDgyNmY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b32cb0e513fb5eca82d08955abd038188d172d43", "author": {"user": {"login": "thelabdude", "name": "Timothy Potter"}}, "url": "https://github.com/apache/lucene-solr/commit/b32cb0e513fb5eca82d08955abd038188d172d43", "committedDate": "2020-12-23T17:19:57Z", "message": "SOLR-15059: Improve query performance monitoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b4aab8ef1d050b14e44e46053fb942dad682a78", "author": {"user": {"login": "thelabdude", "name": "Timothy Potter"}}, "url": "https://github.com/apache/lucene-solr/commit/0b4aab8ef1d050b14e44e46053fb942dad682a78", "committedDate": "2020-12-23T18:26:59Z", "message": "Add unit test for extracting query metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e92c766880c87ce74417820cf24094724323b8b", "author": {"user": {"login": "thelabdude", "name": "Timothy Potter"}}, "url": "https://github.com/apache/lucene-solr/commit/1e92c766880c87ce74417820cf24094724323b8b", "committedDate": "2020-12-23T18:37:45Z", "message": "Back to [1m] for increase, inadvertently changed to [5m]"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4MTM2ODU3", "url": "https://github.com/apache/lucene-solr/pull/2165#pullrequestreview-558136857", "createdAt": "2020-12-23T17:32:18Z", "commit": {"oid": "b32cb0e513fb5eca82d08955abd038188d172d43"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNzozMjoxOVrOIKrv4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxODozNjo1M1rOIKu5Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA3MzQ0MQ==", "bodyText": "Please add a human readable comment describing the intent", "url": "https://github.com/apache/lucene-solr/pull/2165#discussion_r548073441", "createdAt": "2020-12-23T17:32:19Z", "author": {"login": "madrob"}, "path": "solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsQueryTemplate.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.prometheus.exporter;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class MetricsQueryTemplate {\n+  private static final Pattern matchJqTemplate =\n+      Pattern.compile(\"^\\\\$jq:(?<TEMPLATE>.*?)\\\\(\\\\s?(?<UNIQUE>[^,]*),\\\\s?(?<KEYSELECTOR>[^,]*)(,\\\\s?(?<METRIC>[^,]*)\\\\s?)?(,\\\\s?(?<TYPE>[^,]*)\\\\s?)?\\\\)$\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b32cb0e513fb5eca82d08955abd038188d172d43"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA3NjE5Mg==", "bodyText": "Noble just spent a bunch of effort getting rid of XPath in other places, is this a good direction to be going now?", "url": "https://github.com/apache/lucene-solr/pull/2165#discussion_r548076192", "createdAt": "2020-12-23T17:36:01Z", "author": {"login": "madrob"}, "path": "solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsConfiguration.java", "diffHunk": "@@ -105,17 +108,23 @@ public static MetricsConfiguration from(String resource) throws Exception {\n   public static MetricsConfiguration from(Document config) throws Exception {\n     Node settings = getNode(config, \"/config/settings\");\n \n+    Map<String,MetricsQueryTemplate> jqTemplatesMap = null;\n+    NodeList jqTemplates = (NodeList)(xpathFactory.newXPath()).evaluate(\"/config/jq-templates/template\", config, XPathConstants.NODESET);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b32cb0e513fb5eca82d08955abd038188d172d43"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA3NjM3Mg==", "bodyText": "Did we need a null check first?", "url": "https://github.com/apache/lucene-solr/pull/2165#discussion_r548076372", "createdAt": "2020-12-23T17:36:14Z", "author": {"login": "madrob"}, "path": "solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsConfiguration.java", "diffHunk": "@@ -105,17 +108,23 @@ public static MetricsConfiguration from(String resource) throws Exception {\n   public static MetricsConfiguration from(Document config) throws Exception {\n     Node settings = getNode(config, \"/config/settings\");\n \n+    Map<String,MetricsQueryTemplate> jqTemplatesMap = null;\n+    NodeList jqTemplates = (NodeList)(xpathFactory.newXPath()).evaluate(\"/config/jq-templates/template\", config, XPathConstants.NODESET);\n+    if (jqTemplates.getLength() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b32cb0e513fb5eca82d08955abd038188d172d43"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA3NzEzMg==", "bodyText": "jqTemplates could be null", "url": "https://github.com/apache/lucene-solr/pull/2165#discussion_r548077132", "createdAt": "2020-12-23T17:37:03Z", "author": {"login": "madrob"}, "path": "solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsQuery.java", "diffHunk": "@@ -116,6 +117,23 @@ public String getPath() {\n       List<JsonQuery> compiledQueries = new ArrayList<>();\n       if (jsonQueries != null) {\n         for (String jsonQuery : jsonQueries) {\n+\n+          // does this query refer to a reusable jq template to reduce boilerplate in the config?\n+          String stripWs = jsonQuery.replaceAll(\"\\\\s+\", \" \").trim();\n+          if (stripWs.startsWith(\"$jq:\")) {\n+            Optional<Matcher> maybeMatcher = MetricsQueryTemplate.matches(stripWs);\n+            if (maybeMatcher.isPresent()) {\n+              Matcher matcher = maybeMatcher.get();\n+              String templateName = matcher.group(\"TEMPLATE\");\n+              MetricsQueryTemplate template = jqTemplates.get(templateName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b32cb0e513fb5eca82d08955abd038188d172d43"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA3NzM5Nw==", "bodyText": "Is this going to be slooooooow?", "url": "https://github.com/apache/lucene-solr/pull/2165#discussion_r548077397", "createdAt": "2020-12-23T17:37:24Z", "author": {"login": "madrob"}, "path": "solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsConfiguration.java", "diffHunk": "@@ -141,12 +150,29 @@ private static Node getNode(Document doc, String path) {\n     }\n   }\n \n-  private static List<MetricsQuery> toMetricQueries(Node node) throws JsonQueryException {\n+  private static List<MetricsQuery> toMetricQueries(Node node, Map<String,MetricsQueryTemplate> jqTemplatesMap) throws JsonQueryException {\n     if (node == null) {\n       return Collections.emptyList();\n     }\n \n-    return MetricsQuery.from(node);\n+    return MetricsQuery.from(node, jqTemplatesMap);\n   }\n \n+  private static Map<String,MetricsQueryTemplate> loadJqTemplates(NodeList jqTemplates) {\n+    Map<String,MetricsQueryTemplate> map = new HashMap<>();\n+    for (int t=0; t < jqTemplates.getLength(); t++) {\n+      Node template = jqTemplates.item(t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b32cb0e513fb5eca82d08955abd038188d172d43"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA3ODI4MQ==", "bodyText": "Check for name.trim.isEmpty also? Isn't there a StringUtils method that does this for us safely?", "url": "https://github.com/apache/lucene-solr/pull/2165#discussion_r548078281", "createdAt": "2020-12-23T17:38:27Z", "author": {"login": "madrob"}, "path": "solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsConfiguration.java", "diffHunk": "@@ -141,12 +150,29 @@ private static Node getNode(Document doc, String path) {\n     }\n   }\n \n-  private static List<MetricsQuery> toMetricQueries(Node node) throws JsonQueryException {\n+  private static List<MetricsQuery> toMetricQueries(Node node, Map<String,MetricsQueryTemplate> jqTemplatesMap) throws JsonQueryException {\n     if (node == null) {\n       return Collections.emptyList();\n     }\n \n-    return MetricsQuery.from(node);\n+    return MetricsQuery.from(node, jqTemplatesMap);\n   }\n \n+  private static Map<String,MetricsQueryTemplate> loadJqTemplates(NodeList jqTemplates) {\n+    Map<String,MetricsQueryTemplate> map = new HashMap<>();\n+    for (int t=0; t < jqTemplates.getLength(); t++) {\n+      Node template = jqTemplates.item(t);\n+      if (template.getNodeType() == Node.ELEMENT_NODE && template.hasAttributes()) {\n+        Node nameAttr = template.getAttributes().getNamedItem(\"name\");\n+        String tmpl = template.getTextContent();\n+        if (nameAttr != null && tmpl != null && !tmpl.trim().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b32cb0e513fb5eca82d08955abd038188d172d43"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODEyMzQ4NQ==", "bodyText": "Are we trying to be too helpful here? Or is this matching some existing spec?", "url": "https://github.com/apache/lucene-solr/pull/2165#discussion_r548123485", "createdAt": "2020-12-23T18:35:05Z", "author": {"login": "madrob"}, "path": "solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsQueryTemplate.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.prometheus.exporter;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class MetricsQueryTemplate {\n+  private static final Pattern matchJqTemplate =\n+      Pattern.compile(\"^\\\\$jq:(?<TEMPLATE>.*?)\\\\(\\\\s?(?<UNIQUE>[^,]*),\\\\s?(?<KEYSELECTOR>[^,]*)(,\\\\s?(?<METRIC>[^,]*)\\\\s?)?(,\\\\s?(?<TYPE>[^,]*)\\\\s?)?\\\\)$\");\n+\n+  public static Optional<Matcher> matches(String jsonQuery) {\n+    Optional<Matcher> maybe = Optional.empty();\n+    if (jsonQuery != null) {\n+      String toMatch = jsonQuery.replaceAll(\"\\\\s+\", \" \").trim();\n+      Matcher m = matchJqTemplate.matcher(toMatch);\n+      if (m.matches()) {\n+        maybe = Optional.of(m);\n+      }\n+    }\n+    return maybe;\n+  }\n+\n+  private final String name;\n+  private final String defaultType;\n+  private final String template;\n+\n+  public MetricsQueryTemplate(String name, String template, String defaultType) {\n+    Objects.requireNonNull(name, \"jq template must have a name\");\n+    Objects.requireNonNull(template, \"jq template is required\");\n+\n+    this.name = name;\n+    this.template = template.replaceAll(\"\\\\s+\", \" \").trim();\n+    if (this.template.isEmpty()) {\n+      throw new IllegalArgumentException(\"jq template must not be empty\");\n+    }\n+    this.defaultType = defaultType != null ? defaultType : \"GAUGE\";\n+  }\n+\n+  public String getName() {\n+    return name;\n+  }\n+\n+  public String getDefaultType() {\n+    return defaultType;\n+  }\n+\n+  public String getTemplate() {\n+    return template;\n+  }\n+\n+  public String applyTemplate(final Matcher matched) {\n+    String keySelector = matched.group(\"KEYSELECTOR\");\n+    if (keySelector != null) {\n+      if (!keySelector.contains(\"select(\") && !keySelector.contains(\".key\")) {\n+        if (keySelector.contains(\"(\") && keySelector.contains(\")\")) {\n+          // some kind of function here ...\n+          keySelector = \".key | \" + keySelector.trim();\n+        } else {\n+          keySelector = \".key == \" + keySelector.trim();\n+        }\n+      }\n+    }\n+    String unique = matched.group(\"UNIQUE\").trim();\n+    String type = matched.group(\"TYPE\");\n+    if (type == null) {\n+      type = defaultType;\n+    }\n+\n+    String metric = matched.group(\"METRIC\");\n+    if (metric == null) {\n+      metric = unique;\n+    }\n+\n+    // could be a simple field name or some kind of function here\n+    if (!metric.contains(\"$\")) {\n+      if (\"object.value\".equals(metric)) {\n+        metric = \"$object.value\"; // don't require the user to supply the $", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b4aab8ef1d050b14e44e46053fb942dad682a78"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODEyNDgwNw==", "bodyText": "unused?", "url": "https://github.com/apache/lucene-solr/pull/2165#discussion_r548124807", "createdAt": "2020-12-23T18:36:40Z", "author": {"login": "madrob"}, "path": "solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsQueryTemplate.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.prometheus.exporter;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class MetricsQueryTemplate {\n+  private static final Pattern matchJqTemplate =\n+      Pattern.compile(\"^\\\\$jq:(?<TEMPLATE>.*?)\\\\(\\\\s?(?<UNIQUE>[^,]*),\\\\s?(?<KEYSELECTOR>[^,]*)(,\\\\s?(?<METRIC>[^,]*)\\\\s?)?(,\\\\s?(?<TYPE>[^,]*)\\\\s?)?\\\\)$\");\n+\n+  public static Optional<Matcher> matches(String jsonQuery) {\n+    Optional<Matcher> maybe = Optional.empty();\n+    if (jsonQuery != null) {\n+      String toMatch = jsonQuery.replaceAll(\"\\\\s+\", \" \").trim();\n+      Matcher m = matchJqTemplate.matcher(toMatch);\n+      if (m.matches()) {\n+        maybe = Optional.of(m);\n+      }\n+    }\n+    return maybe;\n+  }\n+\n+  private final String name;\n+  private final String defaultType;\n+  private final String template;\n+\n+  public MetricsQueryTemplate(String name, String template, String defaultType) {\n+    Objects.requireNonNull(name, \"jq template must have a name\");\n+    Objects.requireNonNull(template, \"jq template is required\");\n+\n+    this.name = name;\n+    this.template = template.replaceAll(\"\\\\s+\", \" \").trim();\n+    if (this.template.isEmpty()) {\n+      throw new IllegalArgumentException(\"jq template must not be empty\");\n+    }\n+    this.defaultType = defaultType != null ? defaultType : \"GAUGE\";\n+  }\n+\n+  public String getName() {\n+    return name;\n+  }\n+\n+  public String getDefaultType() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b4aab8ef1d050b14e44e46053fb942dad682a78"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODEyNDk5OA==", "bodyText": "unused", "url": "https://github.com/apache/lucene-solr/pull/2165#discussion_r548124998", "createdAt": "2020-12-23T18:36:53Z", "author": {"login": "madrob"}, "path": "solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsQueryTemplate.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.prometheus.exporter;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class MetricsQueryTemplate {\n+  private static final Pattern matchJqTemplate =\n+      Pattern.compile(\"^\\\\$jq:(?<TEMPLATE>.*?)\\\\(\\\\s?(?<UNIQUE>[^,]*),\\\\s?(?<KEYSELECTOR>[^,]*)(,\\\\s?(?<METRIC>[^,]*)\\\\s?)?(,\\\\s?(?<TYPE>[^,]*)\\\\s?)?\\\\)$\");\n+\n+  public static Optional<Matcher> matches(String jsonQuery) {\n+    Optional<Matcher> maybe = Optional.empty();\n+    if (jsonQuery != null) {\n+      String toMatch = jsonQuery.replaceAll(\"\\\\s+\", \" \").trim();\n+      Matcher m = matchJqTemplate.matcher(toMatch);\n+      if (m.matches()) {\n+        maybe = Optional.of(m);\n+      }\n+    }\n+    return maybe;\n+  }\n+\n+  private final String name;\n+  private final String defaultType;\n+  private final String template;\n+\n+  public MetricsQueryTemplate(String name, String template, String defaultType) {\n+    Objects.requireNonNull(name, \"jq template must have a name\");\n+    Objects.requireNonNull(template, \"jq template is required\");\n+\n+    this.name = name;\n+    this.template = template.replaceAll(\"\\\\s+\", \" \").trim();\n+    if (this.template.isEmpty()) {\n+      throw new IllegalArgumentException(\"jq template must not be empty\");\n+    }\n+    this.defaultType = defaultType != null ? defaultType : \"GAUGE\";\n+  }\n+\n+  public String getName() {\n+    return name;\n+  }\n+\n+  public String getDefaultType() {\n+    return defaultType;\n+  }\n+\n+  public String getTemplate() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b4aab8ef1d050b14e44e46053fb942dad682a78"}, "originalPosition": 65}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c49dd2e84f5b2ecf6bf8cc6b432d3f1d74ce724", "author": {"user": {"login": "thelabdude", "name": "Timothy Potter"}}, "url": "https://github.com/apache/lucene-solr/commit/5c49dd2e84f5b2ecf6bf8cc6b432d3f1d74ce724", "committedDate": "2020-12-23T18:45:28Z", "message": "Fix broken test and remove unused getters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5a91430428f53871df0a10e8a033879a3bad68b", "author": {"user": {"login": "thelabdude", "name": "Timothy Potter"}}, "url": "https://github.com/apache/lucene-solr/commit/f5a91430428f53871df0a10e8a033879a3bad68b", "committedDate": "2020-12-23T18:48:15Z", "message": "Use StringUtils"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98e333719019663fb8a4208f352c3e12d5cab15e", "author": {"user": {"login": "thelabdude", "name": "Timothy Potter"}}, "url": "https://github.com/apache/lucene-solr/commit/98e333719019663fb8a4208f352c3e12d5cab15e", "committedDate": "2021-01-05T20:27:08Z", "message": "Merge remote-tracking branch 'asf/master' into SOLR-15059"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "507656e3626be9f79ad3ec726362eba3c6c83dd6", "author": {"user": {"login": "thelabdude", "name": "Timothy Potter"}}, "url": "https://github.com/apache/lucene-solr/commit/507656e3626be9f79ad3ec726362eba3c6c83dd6", "committedDate": "2021-01-05T21:01:36Z", "message": "Update the key selectors for core-query template to be more clear and add a panel showing number of leaders per node"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4883ae752e752f976d873d04b86a71e4126f553", "author": {"user": {"login": "thelabdude", "name": "Timothy Potter"}}, "url": "https://github.com/apache/lucene-solr/commit/f4883ae752e752f976d873d04b86a71e4126f553", "committedDate": "2021-01-05T21:12:29Z", "message": "Update test to reflect changes to templates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34914b5fea297865d7c3517e015d878320c167a2", "author": {"user": {"login": "thelabdude", "name": "Timothy Potter"}}, "url": "https://github.com/apache/lucene-solr/commit/34914b5fea297865d7c3517e015d878320c167a2", "committedDate": "2021-01-05T21:29:44Z", "message": "Remove auto-decoration around the KEYSELECTOR clause"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyMTcxMjY2", "url": "https://github.com/apache/lucene-solr/pull/2165#pullrequestreview-562171266", "createdAt": "2021-01-05T22:05:44Z", "commit": {"oid": "98e333719019663fb8a4208f352c3e12d5cab15e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMjowNTo0NFrOIOpQ2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMjowNTo0NFrOIOpQ2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjIyNzAzNQ==", "bodyText": "NULL_DEREFERENCE:  object returned by matched.group(\"UNIQUE\") could be null and is dereferenced at line 88.", "url": "https://github.com/apache/lucene-solr/pull/2165#discussion_r552227035", "createdAt": "2021-01-05T22:05:44Z", "author": {"login": "sonatype-lift"}, "path": "solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsQueryTemplate.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.prometheus.exporter;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class MetricsQueryTemplate {\n+  /*\n+  A regex with named groups is used to match template references to template + vars using the basic pattern:\n+\n+      $jq:<TEMPLATE>( <UNIQUE>, <KEYSELECTOR>, <METRIC>, <TYPE> )\n+\n+  For instance,\n+\n+      $jq:core(requests_total, endswith(\".requestTimes\"), count, COUNTER)\n+\n+  TEMPLATE = core\n+  UNIQUE = requests_total (unique suffix for this metric, results in a metric named \"solr_metrics_core_requests_total\")\n+  KEYSELECTOR = endswith(\".requestTimes\") (filter to select the specific key for this metric)\n+  METRIC = count\n+  TYPE = COUNTER\n+  */\n+  private static final Pattern matchJqTemplate =\n+      Pattern.compile(\"^\\\\$jq:(?<TEMPLATE>.*?)\\\\(\\\\s?(?<UNIQUE>[^,]*),\\\\s?(?<KEYSELECTOR>[^,]*)(,\\\\s?(?<METRIC>[^,]*)\\\\s?)?(,\\\\s?(?<TYPE>[^,]*)\\\\s?)?\\\\)$\");\n+\n+  public static Optional<Matcher> matches(String jsonQuery) {\n+    Optional<Matcher> maybe = Optional.empty();\n+    if (jsonQuery != null) {\n+      String toMatch = jsonQuery.replaceAll(\"\\\\s+\", \" \").trim();\n+      Matcher m = matchJqTemplate.matcher(toMatch);\n+      if (m.matches()) {\n+        maybe = Optional.of(m);\n+      }\n+    }\n+    return maybe;\n+  }\n+\n+  private final String name;\n+  private final String defaultType;\n+  private final String template;\n+\n+  public MetricsQueryTemplate(String name, String template, String defaultType) {\n+    Objects.requireNonNull(name, \"jq template must have a name\");\n+    Objects.requireNonNull(template, \"jq template is required\");\n+\n+    this.name = name;\n+    this.template = template.replaceAll(\"\\\\s+\", \" \").trim();\n+    if (this.template.isEmpty()) {\n+      throw new IllegalArgumentException(\"jq template must not be empty\");\n+    }\n+    this.defaultType = defaultType != null ? defaultType : \"GAUGE\";\n+  }\n+\n+  public String getName() {\n+    return name;\n+  }\n+\n+  public String applyTemplate(final Matcher matched) {\n+    String keySelector = matched.group(\"KEYSELECTOR\");\n+    if (keySelector != null) {\n+      if (!keySelector.contains(\"select(\") && !keySelector.contains(\".key\")) {\n+        if (keySelector.contains(\"(\") && keySelector.contains(\")\")) {\n+          // some kind of function here ...\n+          keySelector = \".key | \" + keySelector.trim();\n+        } else {\n+          keySelector = \".key == \" + keySelector.trim();\n+        }\n+      }\n+    }\n+    String unique = matched.group(\"UNIQUE\").trim();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98e333719019663fb8a4208f352c3e12d5cab15e"}, "originalPosition": 88}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a759efa9cb5ad50c33c9c855131032f53232f21", "author": {"user": {"login": "thelabdude", "name": "Timothy Potter"}}, "url": "https://github.com/apache/lucene-solr/commit/7a759efa9cb5ad50c33c9c855131032f53232f21", "committedDate": "2021-01-05T22:21:27Z", "message": "Fix musedev issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1494cab289caf0d67d7fa83e360ee6116b1c4fdc", "author": {"user": {"login": "thelabdude", "name": "Timothy Potter"}}, "url": "https://github.com/apache/lucene-solr/commit/1494cab289caf0d67d7fa83e360ee6116b1c4fdc", "committedDate": "2021-01-07T15:55:54Z", "message": "Merge remote-tracking branch 'asf/master' into SOLR-15059"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a580f87a5a71941ffbfa3092e1f29e3a4a0826f", "author": {"user": {"login": "thelabdude", "name": "Timothy Potter"}}, "url": "https://github.com/apache/lucene-solr/commit/0a580f87a5a71941ffbfa3092e1f29e3a4a0826f", "committedDate": "2021-01-07T15:58:34Z", "message": "Update changes"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2482, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}