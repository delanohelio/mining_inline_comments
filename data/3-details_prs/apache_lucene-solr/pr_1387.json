{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1MTc5NDEw", "number": 1387, "title": "SOLR-14210: Include replica health in healtcheck handler", "bodyText": "See https://issues.apache.org/jira/browse/SOLR-14210", "createdAt": "2020-03-29T01:15:53Z", "url": "https://github.com/apache/lucene-solr/pull/1387", "merged": true, "mergeCommit": {"oid": "f2114b9935fb20de146ab9ef4c2e99c870af7215"}, "closed": true, "closedAt": "2020-04-07T10:26:11Z", "author": {"login": "janhoy"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcSPW0QgH2gAyMzk1MTc5NDEwOjI0ZTczZjc4NDliNjRkNTY4NzIyZWU1MDVhM2JiZGFlOTNjM2IwNDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcU7gtxAFqTM4ODA5MDE3MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "24e73f7849b64d568722ee505a3bbdae93c3b044", "author": {"user": {"login": "janhoy", "name": "Jan H\u00f8ydahl"}}, "url": "https://github.com/apache/lucene-solr/commit/24e73f7849b64d568722ee505a3bbdae93c3b044", "committedDate": "2020-03-29T01:10:13Z", "message": "SOLR-14210: Include replica health in healtcheck handler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f10225e5fac1f4ad3aaf1b37b293f145b9b105e", "author": {"user": {"login": "janhoy", "name": "Jan H\u00f8ydahl"}}, "url": "https://github.com/apache/lucene-solr/commit/4f10225e5fac1f4ad3aaf1b37b293f145b9b105e", "committedDate": "2020-03-29T01:14:59Z", "message": "Never cache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49752a8716ade9451b6eccb627672ffd12e67f1c", "author": {"user": {"login": "janhoy", "name": "Jan H\u00f8ydahl"}}, "url": "https://github.com/apache/lucene-solr/commit/49752a8716ade9451b6eccb627672ffd12e67f1c", "committedDate": "2020-03-29T20:29:57Z", "message": "Check Replicas, not Slices"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e09ef6510a8a44d7b5694c350d13ddbbb668a56a", "author": {"user": {"login": "janhoy", "name": "Jan H\u00f8ydahl"}}, "url": "https://github.com/apache/lucene-solr/commit/e09ef6510a8a44d7b5694c350d13ddbbb668a56a", "committedDate": "2020-03-29T21:52:27Z", "message": "Move HealthCheckHandlerTest to correct package\nCreate a test for findUnhealthyCores, factoring it into a separate method\nRename param as 'requireHealthyCores'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1464a253d5a768c31d592e8cf5974e0548af6103", "author": {"user": {"login": "janhoy", "name": "Jan H\u00f8ydahl"}}, "url": "https://github.com/apache/lucene-solr/commit/1464a253d5a768c31d592e8cf5974e0548af6103", "committedDate": "2020-03-29T23:00:56Z", "message": "Add explicit message to response to state that all cores are healthy"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNjI4MzY1", "url": "https://github.com/apache/lucene-solr/pull/1387#pullrequestreview-383628365", "createdAt": "2020-03-30T08:22:56Z", "commit": {"oid": "1464a253d5a768c31d592e8cf5974e0548af6103"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODoyMjo1NlrOF9ennA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODoyMjo1NlrOF9ennA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAwOTExNg==", "bodyText": "Not sure about performance here if you have hundreds of collections and thousands of replicas in a large cluster.\nThe alternative is to instead iterate cores on current node, and consult with clusterState their overall state.", "url": "https://github.com/apache/lucene-solr/pull/1387#discussion_r400009116", "createdAt": "2020-03-30T08:22:56Z", "author": {"login": "janhoy"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/HealthCheckHandler.java", "diffHunk": "@@ -88,15 +95,42 @@ public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throw\n       return;\n     }\n \n-    // Set status to true if this node is in live_nodes\n-    if (clusterState.getLiveNodes().contains(cores.getZkController().getNodeName())) {\n-      rsp.add(STATUS, OK);\n-    } else {\n+    // Fail if not in live_nodes\n+    if (!clusterState.getLiveNodes().contains(cores.getZkController().getNodeName())) {\n       rsp.add(STATUS, FAILURE);\n       rsp.setException(new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Host Unavailable: Not in live nodes as per zk\"));\n+      return;\n     }\n \n-    rsp.setHttpCaching(false);\n+    // Optionally require that all cores on this node are active if param 'failWhenRecovering=true'\n+    if (req.getParams().getBool(PARAM_REQUIRE_HEALTHY_CORES, false)) {\n+      List<String> unhealthyCores = findUnhealthyCores(clusterState, cores.getNodeConfig().getNodeName());\n+      if (unhealthyCores.size() > 0) {\n+          rsp.add(STATUS, FAILURE);\n+          rsp.setException(new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,\n+                  \"Replica(s) \" + unhealthyCores + \" are currently initializing or recovering\"));\n+          return;\n+      }\n+      rsp.add(\"MESSAGE\", \"All cores are healthy\");\n+    }\n+\n+    // All lights green, report healthy\n+    rsp.add(STATUS, OK);\n+  }\n+\n+  /**\n+   * Find replicas DOWN or RECOVERING\n+   * @param clusterState clusterstate from ZK\n+   * @param nodeName this node name\n+   * @return list of core names that are either DOWN ore RECOVERING on 'nodeName'\n+   */\n+  static List<String> findUnhealthyCores(ClusterState clusterState, String nodeName) {\n+    return clusterState.getCollectionsMap().values().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1464a253d5a768c31d592e8cf5974e0548af6103"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MDI1MDQ5", "url": "https://github.com/apache/lucene-solr/pull/1387#pullrequestreview-384025049", "createdAt": "2020-03-30T16:26:07Z", "commit": {"oid": "1464a253d5a768c31d592e8cf5974e0548af6103"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjoyNjowN1rOF9x9gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjoyOToyNlrOF9yGlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMyNjAxOQ==", "bodyText": "This should still be relatively fast with hundreds of collections and thousands of replicas.\nBut it would be nice to get some performance tests before this gets merged in.\nOne question I have, since I'm not too familiar with \"active\" slices. \"Inactive\" slices are the new shards from a shard split that has not completed yet, right? If so maybe we want to return false if there are any replicas from inactive slices on the node. Otherwise taking the node down could possibly hamper a shard-split.\nPlease correct me if I'm wrong on any of those statements.", "url": "https://github.com/apache/lucene-solr/pull/1387#discussion_r400326019", "createdAt": "2020-03-30T16:26:07Z", "author": {"login": "HoustonPutman"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/HealthCheckHandler.java", "diffHunk": "@@ -88,15 +95,42 @@ public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throw\n       return;\n     }\n \n-    // Set status to true if this node is in live_nodes\n-    if (clusterState.getLiveNodes().contains(cores.getZkController().getNodeName())) {\n-      rsp.add(STATUS, OK);\n-    } else {\n+    // Fail if not in live_nodes\n+    if (!clusterState.getLiveNodes().contains(cores.getZkController().getNodeName())) {\n       rsp.add(STATUS, FAILURE);\n       rsp.setException(new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Host Unavailable: Not in live nodes as per zk\"));\n+      return;\n     }\n \n-    rsp.setHttpCaching(false);\n+    // Optionally require that all cores on this node are active if param 'failWhenRecovering=true'\n+    if (req.getParams().getBool(PARAM_REQUIRE_HEALTHY_CORES, false)) {\n+      List<String> unhealthyCores = findUnhealthyCores(clusterState, cores.getNodeConfig().getNodeName());\n+      if (unhealthyCores.size() > 0) {\n+          rsp.add(STATUS, FAILURE);\n+          rsp.setException(new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,\n+                  \"Replica(s) \" + unhealthyCores + \" are currently initializing or recovering\"));\n+          return;\n+      }\n+      rsp.add(\"MESSAGE\", \"All cores are healthy\");\n+    }\n+\n+    // All lights green, report healthy\n+    rsp.add(STATUS, OK);\n+  }\n+\n+  /**\n+   * Find replicas DOWN or RECOVERING\n+   * @param clusterState clusterstate from ZK\n+   * @param nodeName this node name\n+   * @return list of core names that are either DOWN ore RECOVERING on 'nodeName'\n+   */\n+  static List<String> findUnhealthyCores(ClusterState clusterState, String nodeName) {\n+    return clusterState.getCollectionsMap().values().stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAwOTExNg=="}, "originalCommit": {"oid": "1464a253d5a768c31d592e8cf5974e0548af6103"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMyNjA0OQ==", "bodyText": "probably easier to use this in a try with resources block, so that it closes even if something fails.", "url": "https://github.com/apache/lucene-solr/pull/1387#discussion_r400326049", "createdAt": "2020-03-30T16:26:10Z", "author": {"login": "HoustonPutman"}, "path": "solr/core/src/test/org/apache/solr/handler/admin/HealthCheckHandlerTest.java", "diffHunk": "@@ -177,4 +183,13 @@ public void testHealthCheckV2Api() throws Exception {\n     }\n   }\n \n+  @Test\n+  public void testFindUnhealthyCores() throws Exception {\n+    ZkStateReader reader = ClusterStateMockUtil.buildClusterState(\"csrr2rDcsr2rR\", 1, 1, \"node1\", \"node2\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1464a253d5a768c31d592e8cf5974e0548af6103"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMyODM0MQ==", "bodyText": "Also if the clusterState thinks that cores live on this node, but the core directories do not exist, then I think that this handler should respond not healthy. Therefore I think we need to go with the clusterState method, not iterate cores on the current node.", "url": "https://github.com/apache/lucene-solr/pull/1387#discussion_r400328341", "createdAt": "2020-03-30T16:29:26Z", "author": {"login": "HoustonPutman"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/HealthCheckHandler.java", "diffHunk": "@@ -88,15 +95,42 @@ public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throw\n       return;\n     }\n \n-    // Set status to true if this node is in live_nodes\n-    if (clusterState.getLiveNodes().contains(cores.getZkController().getNodeName())) {\n-      rsp.add(STATUS, OK);\n-    } else {\n+    // Fail if not in live_nodes\n+    if (!clusterState.getLiveNodes().contains(cores.getZkController().getNodeName())) {\n       rsp.add(STATUS, FAILURE);\n       rsp.setException(new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Host Unavailable: Not in live nodes as per zk\"));\n+      return;\n     }\n \n-    rsp.setHttpCaching(false);\n+    // Optionally require that all cores on this node are active if param 'failWhenRecovering=true'\n+    if (req.getParams().getBool(PARAM_REQUIRE_HEALTHY_CORES, false)) {\n+      List<String> unhealthyCores = findUnhealthyCores(clusterState, cores.getNodeConfig().getNodeName());\n+      if (unhealthyCores.size() > 0) {\n+          rsp.add(STATUS, FAILURE);\n+          rsp.setException(new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,\n+                  \"Replica(s) \" + unhealthyCores + \" are currently initializing or recovering\"));\n+          return;\n+      }\n+      rsp.add(\"MESSAGE\", \"All cores are healthy\");\n+    }\n+\n+    // All lights green, report healthy\n+    rsp.add(STATUS, OK);\n+  }\n+\n+  /**\n+   * Find replicas DOWN or RECOVERING\n+   * @param clusterState clusterstate from ZK\n+   * @param nodeName this node name\n+   * @return list of core names that are either DOWN ore RECOVERING on 'nodeName'\n+   */\n+  static List<String> findUnhealthyCores(ClusterState clusterState, String nodeName) {\n+    return clusterState.getCollectionsMap().values().stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAwOTExNg=="}, "originalCommit": {"oid": "1464a253d5a768c31d592e8cf5974e0548af6103"}, "originalPosition": 93}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ae227a036f69cf31b1e5d793969caf0e485c890", "author": {"user": {"login": "janhoy", "name": "Jan H\u00f8ydahl"}}, "url": "https://github.com/apache/lucene-solr/commit/7ae227a036f69cf31b1e5d793969caf0e485c890", "committedDate": "2020-04-01T07:51:51Z", "message": "Merge branch 'master' into solr14210-replica-health"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4258c5b8dc44f03eda45edb241d1f2a819d432a1", "author": {"user": {"login": "janhoy", "name": "Jan H\u00f8ydahl"}}, "url": "https://github.com/apache/lucene-solr/commit/4258c5b8dc44f03eda45edb241d1f2a819d432a1", "committedDate": "2020-04-01T08:11:37Z", "message": "Review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80c5bfa06f059d74cc35641863901db3b4397553", "author": {"user": {"login": "janhoy", "name": "Jan H\u00f8ydahl"}}, "url": "https://github.com/apache/lucene-solr/commit/80c5bfa06f059d74cc35641863901db3b4397553", "committedDate": "2020-04-01T12:05:12Z", "message": "Javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NzM5MjMx", "url": "https://github.com/apache/lucene-solr/pull/1387#pullrequestreview-385739231", "createdAt": "2020-04-01T16:13:09Z", "commit": {"oid": "80c5bfa06f059d74cc35641863901db3b4397553"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjoxMzowOVrOF_IF8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjoxMzowOVrOF_IF8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTczNzIwMA==", "bodyText": "requireHealthyCores not failWhenRecovering", "url": "https://github.com/apache/lucene-solr/pull/1387#discussion_r401737200", "createdAt": "2020-04-01T16:13:09Z", "author": {"login": "HoustonPutman"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/HealthCheckHandler.java", "diffHunk": "@@ -88,15 +96,46 @@ public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throw\n       return;\n     }\n \n-    // Set status to true if this node is in live_nodes\n-    if (clusterState.getLiveNodes().contains(cores.getZkController().getNodeName())) {\n-      rsp.add(STATUS, OK);\n-    } else {\n+    // Fail if not in live_nodes\n+    if (!clusterState.getLiveNodes().contains(cores.getZkController().getNodeName())) {\n       rsp.add(STATUS, FAILURE);\n       rsp.setException(new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Host Unavailable: Not in live nodes as per zk\"));\n+      return;\n     }\n \n-    rsp.setHttpCaching(false);\n+    // Optionally require that all cores on this node are active if param 'failWhenRecovering=true'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c5bfa06f059d74cc35641863901db3b4397553"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "643e26e4f7d94b5654dd00e73e3f1b2127fd84c8", "author": {"user": {"login": "janhoy", "name": "Jan H\u00f8ydahl"}}, "url": "https://github.com/apache/lucene-solr/commit/643e26e4f7d94b5654dd00e73e3f1b2127fd84c8", "committedDate": "2020-04-01T22:42:48Z", "message": "Merge branch 'master' into solr14210-replica-health"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d625eed7dba297487569541c8d57be4958cf5387", "author": {"user": {"login": "janhoy", "name": "Jan H\u00f8ydahl"}}, "url": "https://github.com/apache/lucene-solr/commit/d625eed7dba297487569541c8d57be4958cf5387", "committedDate": "2020-04-01T22:43:41Z", "message": "Fix review comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5abe3bf14d9d0b1be28be96105c5d6b0ddde5f80", "author": {"user": {"login": "janhoy", "name": "Jan H\u00f8ydahl"}}, "url": "https://github.com/apache/lucene-solr/commit/5abe3bf14d9d0b1be28be96105c5d6b0ddde5f80", "committedDate": "2020-04-01T22:54:44Z", "message": "lowercase message key"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e82a75c00efd0eeaf45d51abcb8c7e8f1328b1b", "author": {"user": {"login": "janhoy", "name": "Jan H\u00f8ydahl"}}, "url": "https://github.com/apache/lucene-solr/commit/4e82a75c00efd0eeaf45d51abcb8c7e8f1328b1b", "committedDate": "2020-04-01T23:01:00Z", "message": "Credit to Houston"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NDE0MTY4", "url": "https://github.com/apache/lucene-solr/pull/1387#pullrequestreview-386414168", "createdAt": "2020-04-02T13:16:50Z", "commit": {"oid": "4e82a75c00efd0eeaf45d51abcb8c7e8f1328b1b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMzoxNjo1MFrOF_qr3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMzoxNjo1MFrOF_qr3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMwMzk2Ng==", "bodyText": "Why does this need to go to cluster state? This becomes a very expensive method when you have a lot of collections because it fetches collection states for all collections from ZK even if those collections have no replicas on the current node. Imagine having 300 collections and doing 299 zk read operations just for a health check if the node hosts replicas for one collection only.\nI think this method should be rewritten to iterate over the CloudDescriptors of all local cores and check for hasRegistered == true and lastPublished == ACTIVE. Those two should be sufficient for a health check functionality. We don't even need to consult the cluster state.", "url": "https://github.com/apache/lucene-solr/pull/1387#discussion_r402303966", "createdAt": "2020-04-02T13:16:50Z", "author": {"login": "shalinmangar"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/HealthCheckHandler.java", "diffHunk": "@@ -88,15 +96,46 @@ public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throw\n       return;\n     }\n \n-    // Set status to true if this node is in live_nodes\n-    if (clusterState.getLiveNodes().contains(cores.getZkController().getNodeName())) {\n-      rsp.add(STATUS, OK);\n-    } else {\n+    // Fail if not in live_nodes\n+    if (!clusterState.getLiveNodes().contains(cores.getZkController().getNodeName())) {\n       rsp.add(STATUS, FAILURE);\n       rsp.setException(new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Host Unavailable: Not in live nodes as per zk\"));\n+      return;\n     }\n \n-    rsp.setHttpCaching(false);\n+    // Optionally require that all cores on this node are active if param 'requireHealthyCores=true'\n+    if (req.getParams().getBool(PARAM_REQUIRE_HEALTHY_CORES, false)) {\n+      List<String> unhealthyCores = findUnhealthyCores(clusterState,\n+              cores.getNodeConfig().getNodeName(),\n+              cores.getAllCoreNames());\n+      if (unhealthyCores.size() > 0) {\n+          rsp.add(STATUS, FAILURE);\n+          rsp.setException(new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,\n+                  \"Replica(s) \" + unhealthyCores + \" are currently initializing or recovering\"));\n+          return;\n+      }\n+      rsp.add(\"message\", \"All cores are healthy\");\n+    }\n+\n+    // All lights green, report healthy\n+    rsp.add(STATUS, OK);\n+  }\n+\n+  /**\n+   * Find replicas DOWN or RECOVERING, or replicas in clusterstate that do not exist on local node\n+   * @param clusterState clusterstate from ZK\n+   * @param nodeName this node name\n+   * @param allCoreNames list of all core names on current node\n+   * @return list of core names that are either DOWN ore RECOVERING on 'nodeName'\n+   */\n+  static List<String> findUnhealthyCores(ClusterState clusterState, String nodeName, Collection<String> allCoreNames) {\n+    return clusterState.getCollectionsMap().values().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e82a75c00efd0eeaf45d51abcb8c7e8f1328b1b"}, "originalPosition": 97}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "996da9cae71d9c35ea98a674854f0f315dccdfd0", "author": {"user": {"login": "janhoy", "name": "Jan H\u00f8ydahl"}}, "url": "https://github.com/apache/lucene-solr/commit/996da9cae71d9c35ea98a674854f0f315dccdfd0", "committedDate": "2020-04-03T13:01:24Z", "message": "Optimize testFindUnhealthyCores() to consult local state and only check clusterstate for local collections"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25b25a64579360822bf7cee19bdcec6f8c2b0629", "author": {"user": {"login": "janhoy", "name": "Jan H\u00f8ydahl"}}, "url": "https://github.com/apache/lucene-solr/commit/25b25a64579360822bf7cee19bdcec6f8c2b0629", "committedDate": "2020-04-03T14:26:20Z", "message": "Typo"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MzA3NzUy", "url": "https://github.com/apache/lucene-solr/pull/1387#pullrequestreview-387307752", "createdAt": "2020-04-03T14:28:25Z", "commit": {"oid": "996da9cae71d9c35ea98a674854f0f315dccdfd0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNDoyODoyNVrOGAX7vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNDoyODoyNVrOGAX7vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA0NTMxMQ==", "bodyText": "@shalinmangar Please have a look at the new logic. If all local cores are active and registered, then we do not consult clusterstate at all. And we only consult clusterstate now to filter out replicas from inactive shards.\nThe only thing I'm unsure of now is whether I feed the correct slice ID to .getActiveSlicesMap().containsKey(**HERE**). Is this slice ID the same as c.getShardId() on CloudDescriptor? My unit test is a mock, so I cannot be sure :)", "url": "https://github.com/apache/lucene-solr/pull/1387#discussion_r403045311", "createdAt": "2020-04-03T14:28:25Z", "author": {"login": "janhoy"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/HealthCheckHandler.java", "diffHunk": "@@ -88,15 +98,45 @@ public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throw\n       return;\n     }\n \n-    // Set status to true if this node is in live_nodes\n-    if (clusterState.getLiveNodes().contains(cores.getZkController().getNodeName())) {\n-      rsp.add(STATUS, OK);\n-    } else {\n+    // Fail if not in live_nodes\n+    if (!clusterState.getLiveNodes().contains(cores.getZkController().getNodeName())) {\n       rsp.add(STATUS, FAILURE);\n       rsp.setException(new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Host Unavailable: Not in live nodes as per zk\"));\n+      return;\n     }\n \n-    rsp.setHttpCaching(false);\n+    // Optionally require that all cores on this node are active if param 'requireHealthyCores=true'\n+    if (req.getParams().getBool(PARAM_REQUIRE_HEALTHY_CORES, false)) {\n+      Collection<CloudDescriptor> coreDescriptors = cores.getCores().stream()\n+          .map(c -> c.getCoreDescriptor().getCloudDescriptor()).collect(Collectors.toList());\n+      List<String> unhealthyCores = findUnhealthyCores(coreDescriptors, clusterState);\n+      if (unhealthyCores.size() > 0) {\n+          rsp.add(STATUS, FAILURE);\n+          rsp.setException(new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,\n+                  \"Replica(s) \" + unhealthyCores + \" are currently initializing or recovering\"));\n+          return;\n+      }\n+      rsp.add(\"message\", \"All cores are healthy\");\n+    }\n+\n+    // All lights green, report healthy\n+    rsp.add(STATUS, OK);\n+  }\n+\n+  /**\n+   * Find replicas DOWN or RECOVERING, or replicas in clusterstate that do not exist on local node.\n+   * We first find local cores which are either not registered or unhealthy, and check each of these against\n+   * the clusterstate, and return a list of unhealthy replicas that are part of an active shard for an existing collection\n+   * @param cores list of core descriptors to iterate\n+   * @param clusterState clusterstate from ZK\n+   * @return list of core names that are either DOWN ore RECOVERING on 'nodeName'\n+   */\n+  static List<String> findUnhealthyCores(Collection<CloudDescriptor> cores, ClusterState clusterState) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "996da9cae71d9c35ea98a674854f0f315dccdfd0"}, "originalPosition": 95}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c5d95c6bf4d40666b5ddee2c7277d6915a74f37", "author": {"user": {"login": "janhoy", "name": "Jan H\u00f8ydahl"}}, "url": "https://github.com/apache/lucene-solr/commit/0c5d95c6bf4d40666b5ddee2c7277d6915a74f37", "committedDate": "2020-04-03T15:56:59Z", "message": "Avoid null for coreNodeName"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9e7cefb8b7e4b104a8c60c9080e84a2f2d9bfc5", "author": {"user": {"login": "janhoy", "name": "Jan H\u00f8ydahl"}}, "url": "https://github.com/apache/lucene-solr/commit/d9e7cefb8b7e4b104a8c60c9080e84a2f2d9bfc5", "committedDate": "2020-04-03T15:59:04Z", "message": "credit shalin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f715c4aaf10473b445ed8d88fafd8dc92de7d6c", "author": {"user": {"login": "janhoy", "name": "Jan H\u00f8ydahl"}}, "url": "https://github.com/apache/lucene-solr/commit/1f715c4aaf10473b445ed8d88fafd8dc92de7d6c", "committedDate": "2020-04-05T15:45:31Z", "message": "Merge branch 'master' into solr14210-replica-health"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92b617c693581b38623cb08c9d54390a5ef64803", "author": {"user": {"login": "janhoy", "name": "Jan H\u00f8ydahl"}}, "url": "https://github.com/apache/lucene-solr/commit/92b617c693581b38623cb08c9d54390a5ef64803", "committedDate": "2020-04-05T15:46:28Z", "message": "Return count of unhealthy cores rather than a list of names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c141b721148b7ec5c89432983cf7853e2e13161", "author": {"user": {"login": "janhoy", "name": "Jan H\u00f8ydahl"}}, "url": "https://github.com/apache/lucene-solr/commit/1c141b721148b7ec5c89432983cf7853e2e13161", "committedDate": "2020-04-05T15:50:45Z", "message": "num_cores_unhealthy instead of num_unhealth"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MDkwMTcw", "url": "https://github.com/apache/lucene-solr/pull/1387#pullrequestreview-388090170", "createdAt": "2020-04-06T09:44:42Z", "commit": {"oid": "1c141b721148b7ec5c89432983cf7853e2e13161"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2063, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}