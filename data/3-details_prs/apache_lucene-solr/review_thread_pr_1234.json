{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwNDM2MDY2", "number": 1234, "reviewThreads": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNTozNDo1MFrODdBcgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwODo0MToyMFrODf0Ftw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzU4OTc3OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNTozNDo1MFrOFlYnLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNTozNDo1MFrOFlYnLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc0NDg3OQ==", "bodyText": "Extra space character before implements?", "url": "https://github.com/apache/lucene-solr/pull/1234#discussion_r374744879", "createdAt": "2020-02-04T15:34:50Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "diffHunk": "@@ -353,67 +360,168 @@ private void writeBlock(long[] values, int length, long gcd, ByteBuffersDataOutp\n     }\n   }\n \n-  @Override\n-  public void addBinaryField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n-    meta.writeInt(field.number);\n-    meta.writeByte(Lucene80DocValuesFormat.BINARY);\n-\n-    BinaryDocValues values = valuesProducer.getBinary(field);\n-    long start = data.getFilePointer();\n-    meta.writeLong(start); // dataOffset\n-    int numDocsWithField = 0;\n-    int minLength = Integer.MAX_VALUE;\n-    int maxLength = 0;\n-    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n-      numDocsWithField++;\n-      BytesRef v = values.binaryValue();\n-      int length = v.length;\n-      data.writeBytes(v.bytes, v.offset, v.length);\n-      minLength = Math.min(length, minLength);\n-      maxLength = Math.max(length, maxLength);\n+  class CompressedBinaryBlockWriter  implements Closeable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47db4963385869f0fe84f565d55466637d5c0305"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzU5NTMwOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNTozNjoxOVrOFlYq0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNTozNjoxOVrOFlYq0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc0NTgxMQ==", "bodyText": "Add space after if before (?", "url": "https://github.com/apache/lucene-solr/pull/1234#discussion_r374745811", "createdAt": "2020-02-04T15:36:19Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "diffHunk": "@@ -353,67 +360,168 @@ private void writeBlock(long[] values, int length, long gcd, ByteBuffersDataOutp\n     }\n   }\n \n-  @Override\n-  public void addBinaryField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n-    meta.writeInt(field.number);\n-    meta.writeByte(Lucene80DocValuesFormat.BINARY);\n-\n-    BinaryDocValues values = valuesProducer.getBinary(field);\n-    long start = data.getFilePointer();\n-    meta.writeLong(start); // dataOffset\n-    int numDocsWithField = 0;\n-    int minLength = Integer.MAX_VALUE;\n-    int maxLength = 0;\n-    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n-      numDocsWithField++;\n-      BytesRef v = values.binaryValue();\n-      int length = v.length;\n-      data.writeBytes(v.bytes, v.offset, v.length);\n-      minLength = Math.min(length, minLength);\n-      maxLength = Math.max(length, maxLength);\n+  class CompressedBinaryBlockWriter  implements Closeable {\n+    FastCompressionHashTable ht = new LZ4.FastCompressionHashTable();    \n+    int uncompressedBlockLength = 0;\n+    int maxUncompressedBlockLength = 0;\n+    int numDocsInCurrentBlock = 0;\n+    int [] docLengths = new int[Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK]; \n+    byte [] block = new byte [1024 * 16];\n+    int totalChunks = 0;\n+    long maxPointer = 0;\n+    long blockAddressesStart = -1; \n+\n+    private IndexOutput tempBinaryOffsets;\n+    \n+    \n+    public CompressedBinaryBlockWriter() throws IOException {\n+      tempBinaryOffsets = state.directory.createTempOutput(state.segmentInfo.name, \"binary_pointers\", state.context);\n+      try {\n+        CodecUtil.writeHeader(tempBinaryOffsets, Lucene80DocValuesFormat.META_CODEC + \"FilePointers\", Lucene80DocValuesFormat.VERSION_CURRENT);\n+      } catch (Throwable exception) {\n+        IOUtils.closeWhileHandlingException(this); //self-close because constructor caller can't \n+        throw exception;\n+      }\n     }\n-    assert numDocsWithField <= maxDoc;\n-    meta.writeLong(data.getFilePointer() - start); // dataLength\n \n-    if (numDocsWithField == 0) {\n-      meta.writeLong(-2); // docsWithFieldOffset\n-      meta.writeLong(0L); // docsWithFieldLength\n-      meta.writeShort((short) -1); // jumpTableEntryCount\n-      meta.writeByte((byte) -1);   // denseRankPower\n-    } else if (numDocsWithField == maxDoc) {\n-      meta.writeLong(-1); // docsWithFieldOffset\n-      meta.writeLong(0L); // docsWithFieldLength\n-      meta.writeShort((short) -1); // jumpTableEntryCount\n-      meta.writeByte((byte) -1);   // denseRankPower\n-    } else {\n-      long offset = data.getFilePointer();\n-      meta.writeLong(offset); // docsWithFieldOffset\n-      values = valuesProducer.getBinary(field);\n-      final short jumpTableEntryCount = IndexedDISI.writeBitSet(values, data, IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n-      meta.writeLong(data.getFilePointer() - offset); // docsWithFieldLength\n-      meta.writeShort(jumpTableEntryCount);\n-      meta.writeByte(IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n+    void  addDoc(int doc, BytesRef v) throws IOException {\n+      if (blockAddressesStart < 0) {\n+        blockAddressesStart = data.getFilePointer();\n+      }\n+      docLengths[numDocsInCurrentBlock] = v.length;\n+      block = ArrayUtil.grow(block, uncompressedBlockLength + v.length);\n+      System.arraycopy(v.bytes, v.offset, block, uncompressedBlockLength, v.length);\n+      uncompressedBlockLength += v.length;\n+      numDocsInCurrentBlock++;\n+      if (numDocsInCurrentBlock == Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK) {\n+        flushData();\n+      }      \n     }\n \n-    meta.writeInt(numDocsWithField);\n-    meta.writeInt(minLength);\n-    meta.writeInt(maxLength);\n-    if (maxLength > minLength) {\n-      start = data.getFilePointer();\n-      meta.writeLong(start);\n+    private void flushData() throws IOException {\n+      if(numDocsInCurrentBlock > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47db4963385869f0fe84f565d55466637d5c0305"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzYwMjU0OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNTozODowMlrOFlYvYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNTozODowMlrOFlYvYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc0Njk3OA==", "bodyText": "Remove space after ( before blockId?", "url": "https://github.com/apache/lucene-solr/pull/1234#discussion_r374746978", "createdAt": "2020-02-04T15:38:02Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer.java", "diffHunk": "@@ -742,6 +755,107 @@ public BytesRef binaryValue() throws IOException {\n         };\n       }\n     }\n+  }  \n+  \n+  // Decompresses blocks of binary values to retrieve content\n+  class BinaryDecoder {\n+    \n+    private final LongValues addresses;\n+    private final IndexInput compressedData;\n+    // Cache of last uncompressed block \n+    private long lastBlockId = -1;\n+    private int []uncompressedDocEnds = new int[Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK];\n+    private int uncompressedBlockLength = 0;        \n+    private int numDocsInBlock = 0;\n+    private final byte[] uncompressedBlock;\n+    private BytesRef uncompressedBytesRef;\n+    \n+    public BinaryDecoder(LongValues addresses, IndexInput compressedData, int biggestUncompressedBlockSize) {\n+      super();\n+      this.addresses = addresses;\n+      this.compressedData = compressedData;\n+      // pre-allocate a byte array large enough for the biggest uncompressed block needed.\n+      this.uncompressedBlock = new byte[biggestUncompressedBlockSize];\n+      \n+    }\n+\n+    BytesRef decode(int docNumber) throws IOException {\n+      int blockId = docNumber >> Lucene80DocValuesFormat.BINARY_BLOCK_SHIFT; \n+      int docInBlockId = docNumber % Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK;\n+      assert docInBlockId < Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK;\n+      \n+      \n+      // already read and uncompressed?\n+      if ( blockId != lastBlockId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47db4963385869f0fe84f565d55466637d5c0305"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzYwMzk1OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNTozODoyM1rOFlYwQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNTozODoyM1rOFlYwQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc0NzIwMw==", "bodyText": "s/Bytes ref/BytesRef?", "url": "https://github.com/apache/lucene-solr/pull/1234#discussion_r374747203", "createdAt": "2020-02-04T15:38:23Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer.java", "diffHunk": "@@ -742,6 +755,107 @@ public BytesRef binaryValue() throws IOException {\n         };\n       }\n     }\n+  }  \n+  \n+  // Decompresses blocks of binary values to retrieve content\n+  class BinaryDecoder {\n+    \n+    private final LongValues addresses;\n+    private final IndexInput compressedData;\n+    // Cache of last uncompressed block \n+    private long lastBlockId = -1;\n+    private int []uncompressedDocEnds = new int[Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK];\n+    private int uncompressedBlockLength = 0;        \n+    private int numDocsInBlock = 0;\n+    private final byte[] uncompressedBlock;\n+    private BytesRef uncompressedBytesRef;\n+    \n+    public BinaryDecoder(LongValues addresses, IndexInput compressedData, int biggestUncompressedBlockSize) {\n+      super();\n+      this.addresses = addresses;\n+      this.compressedData = compressedData;\n+      // pre-allocate a byte array large enough for the biggest uncompressed block needed.\n+      this.uncompressedBlock = new byte[biggestUncompressedBlockSize];\n+      \n+    }\n+\n+    BytesRef decode(int docNumber) throws IOException {\n+      int blockId = docNumber >> Lucene80DocValuesFormat.BINARY_BLOCK_SHIFT; \n+      int docInBlockId = docNumber % Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK;\n+      assert docInBlockId < Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK;\n+      \n+      \n+      // already read and uncompressed?\n+      if ( blockId != lastBlockId) {\n+        lastBlockId = blockId;\n+        long blockStartOffset = addresses.get(blockId);\n+        compressedData.seek(blockStartOffset);\n+        \n+        numDocsInBlock = compressedData.readVInt();\n+        assert numDocsInBlock <= Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK;\n+        uncompressedDocEnds = new int[numDocsInBlock];\n+        uncompressedBlockLength = 0;        \n+        for (int i = 0; i < numDocsInBlock; i++) {\n+          uncompressedBlockLength += compressedData.readVInt();\n+          uncompressedDocEnds[i] = uncompressedBlockLength;\n+        }\n+        \n+        if (uncompressedBlockLength == 0) {\n+          uncompressedBytesRef = new BytesRef(BytesRef.EMPTY_BYTES);\n+        } else {\n+          assert uncompressedBlockLength <= uncompressedBlock.length;\n+          LZ4.decompress(compressedData, uncompressedBlockLength, uncompressedBlock, 0);\n+          uncompressedBytesRef = new BytesRef(uncompressedBlock);\n+        }\n+      }\n+      \n+      // Position the Bytes ref to the relevant part of the uncompressed block", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47db4963385869f0fe84f565d55466637d5c0305"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzYxMjAyOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNTo0MDozMVrOFlY1Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNTo0MDozMVrOFlY1Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc0ODUxOQ==", "bodyText": "Remove one of the spaces after void before addDoc?", "url": "https://github.com/apache/lucene-solr/pull/1234#discussion_r374748519", "createdAt": "2020-02-04T15:40:31Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "diffHunk": "@@ -353,67 +360,168 @@ private void writeBlock(long[] values, int length, long gcd, ByteBuffersDataOutp\n     }\n   }\n \n-  @Override\n-  public void addBinaryField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n-    meta.writeInt(field.number);\n-    meta.writeByte(Lucene80DocValuesFormat.BINARY);\n-\n-    BinaryDocValues values = valuesProducer.getBinary(field);\n-    long start = data.getFilePointer();\n-    meta.writeLong(start); // dataOffset\n-    int numDocsWithField = 0;\n-    int minLength = Integer.MAX_VALUE;\n-    int maxLength = 0;\n-    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n-      numDocsWithField++;\n-      BytesRef v = values.binaryValue();\n-      int length = v.length;\n-      data.writeBytes(v.bytes, v.offset, v.length);\n-      minLength = Math.min(length, minLength);\n-      maxLength = Math.max(length, maxLength);\n+  class CompressedBinaryBlockWriter  implements Closeable {\n+    FastCompressionHashTable ht = new LZ4.FastCompressionHashTable();    \n+    int uncompressedBlockLength = 0;\n+    int maxUncompressedBlockLength = 0;\n+    int numDocsInCurrentBlock = 0;\n+    int [] docLengths = new int[Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK]; \n+    byte [] block = new byte [1024 * 16];\n+    int totalChunks = 0;\n+    long maxPointer = 0;\n+    long blockAddressesStart = -1; \n+\n+    private IndexOutput tempBinaryOffsets;\n+    \n+    \n+    public CompressedBinaryBlockWriter() throws IOException {\n+      tempBinaryOffsets = state.directory.createTempOutput(state.segmentInfo.name, \"binary_pointers\", state.context);\n+      try {\n+        CodecUtil.writeHeader(tempBinaryOffsets, Lucene80DocValuesFormat.META_CODEC + \"FilePointers\", Lucene80DocValuesFormat.VERSION_CURRENT);\n+      } catch (Throwable exception) {\n+        IOUtils.closeWhileHandlingException(this); //self-close because constructor caller can't \n+        throw exception;\n+      }\n     }\n-    assert numDocsWithField <= maxDoc;\n-    meta.writeLong(data.getFilePointer() - start); // dataLength\n \n-    if (numDocsWithField == 0) {\n-      meta.writeLong(-2); // docsWithFieldOffset\n-      meta.writeLong(0L); // docsWithFieldLength\n-      meta.writeShort((short) -1); // jumpTableEntryCount\n-      meta.writeByte((byte) -1);   // denseRankPower\n-    } else if (numDocsWithField == maxDoc) {\n-      meta.writeLong(-1); // docsWithFieldOffset\n-      meta.writeLong(0L); // docsWithFieldLength\n-      meta.writeShort((short) -1); // jumpTableEntryCount\n-      meta.writeByte((byte) -1);   // denseRankPower\n-    } else {\n-      long offset = data.getFilePointer();\n-      meta.writeLong(offset); // docsWithFieldOffset\n-      values = valuesProducer.getBinary(field);\n-      final short jumpTableEntryCount = IndexedDISI.writeBitSet(values, data, IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n-      meta.writeLong(data.getFilePointer() - offset); // docsWithFieldLength\n-      meta.writeShort(jumpTableEntryCount);\n-      meta.writeByte(IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n+    void  addDoc(int doc, BytesRef v) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47db4963385869f0fe84f565d55466637d5c0305"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzYxNjgwOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNTo0MTo0NlrOFlY4aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNzoyNDozMVrOFmjp4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc0OTI5MQ==", "bodyText": "Probably we could (later, separate issue) optimize writing these lengths -- often all docs will have the same length?", "url": "https://github.com/apache/lucene-solr/pull/1234#discussion_r374749291", "createdAt": "2020-02-04T15:41:46Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "diffHunk": "@@ -353,67 +360,168 @@ private void writeBlock(long[] values, int length, long gcd, ByteBuffersDataOutp\n     }\n   }\n \n-  @Override\n-  public void addBinaryField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n-    meta.writeInt(field.number);\n-    meta.writeByte(Lucene80DocValuesFormat.BINARY);\n-\n-    BinaryDocValues values = valuesProducer.getBinary(field);\n-    long start = data.getFilePointer();\n-    meta.writeLong(start); // dataOffset\n-    int numDocsWithField = 0;\n-    int minLength = Integer.MAX_VALUE;\n-    int maxLength = 0;\n-    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n-      numDocsWithField++;\n-      BytesRef v = values.binaryValue();\n-      int length = v.length;\n-      data.writeBytes(v.bytes, v.offset, v.length);\n-      minLength = Math.min(length, minLength);\n-      maxLength = Math.max(length, maxLength);\n+  class CompressedBinaryBlockWriter  implements Closeable {\n+    FastCompressionHashTable ht = new LZ4.FastCompressionHashTable();    \n+    int uncompressedBlockLength = 0;\n+    int maxUncompressedBlockLength = 0;\n+    int numDocsInCurrentBlock = 0;\n+    int [] docLengths = new int[Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK]; \n+    byte [] block = new byte [1024 * 16];\n+    int totalChunks = 0;\n+    long maxPointer = 0;\n+    long blockAddressesStart = -1; \n+\n+    private IndexOutput tempBinaryOffsets;\n+    \n+    \n+    public CompressedBinaryBlockWriter() throws IOException {\n+      tempBinaryOffsets = state.directory.createTempOutput(state.segmentInfo.name, \"binary_pointers\", state.context);\n+      try {\n+        CodecUtil.writeHeader(tempBinaryOffsets, Lucene80DocValuesFormat.META_CODEC + \"FilePointers\", Lucene80DocValuesFormat.VERSION_CURRENT);\n+      } catch (Throwable exception) {\n+        IOUtils.closeWhileHandlingException(this); //self-close because constructor caller can't \n+        throw exception;\n+      }\n     }\n-    assert numDocsWithField <= maxDoc;\n-    meta.writeLong(data.getFilePointer() - start); // dataLength\n \n-    if (numDocsWithField == 0) {\n-      meta.writeLong(-2); // docsWithFieldOffset\n-      meta.writeLong(0L); // docsWithFieldLength\n-      meta.writeShort((short) -1); // jumpTableEntryCount\n-      meta.writeByte((byte) -1);   // denseRankPower\n-    } else if (numDocsWithField == maxDoc) {\n-      meta.writeLong(-1); // docsWithFieldOffset\n-      meta.writeLong(0L); // docsWithFieldLength\n-      meta.writeShort((short) -1); // jumpTableEntryCount\n-      meta.writeByte((byte) -1);   // denseRankPower\n-    } else {\n-      long offset = data.getFilePointer();\n-      meta.writeLong(offset); // docsWithFieldOffset\n-      values = valuesProducer.getBinary(field);\n-      final short jumpTableEntryCount = IndexedDISI.writeBitSet(values, data, IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n-      meta.writeLong(data.getFilePointer() - offset); // docsWithFieldLength\n-      meta.writeShort(jumpTableEntryCount);\n-      meta.writeByte(IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n+    void  addDoc(int doc, BytesRef v) throws IOException {\n+      if (blockAddressesStart < 0) {\n+        blockAddressesStart = data.getFilePointer();\n+      }\n+      docLengths[numDocsInCurrentBlock] = v.length;\n+      block = ArrayUtil.grow(block, uncompressedBlockLength + v.length);\n+      System.arraycopy(v.bytes, v.offset, block, uncompressedBlockLength, v.length);\n+      uncompressedBlockLength += v.length;\n+      numDocsInCurrentBlock++;\n+      if (numDocsInCurrentBlock == Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK) {\n+        flushData();\n+      }      \n     }\n \n-    meta.writeInt(numDocsWithField);\n-    meta.writeInt(minLength);\n-    meta.writeInt(maxLength);\n-    if (maxLength > minLength) {\n-      start = data.getFilePointer();\n-      meta.writeLong(start);\n+    private void flushData() throws IOException {\n+      if(numDocsInCurrentBlock > 0) {\n+        // Write offset to this block to temporary offsets file\n+        totalChunks++;\n+        long thisBlockStartPointer = data.getFilePointer();\n+        data.writeVInt(numDocsInCurrentBlock);\n+        for (int i = 0; i < numDocsInCurrentBlock; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47db4963385869f0fe84f565d55466637d5c0305"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI3MzczNg==", "bodyText": "+1", "url": "https://github.com/apache/lucene-solr/pull/1234#discussion_r375273736", "createdAt": "2020-02-05T14:06:22Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "diffHunk": "@@ -353,67 +360,168 @@ private void writeBlock(long[] values, int length, long gcd, ByteBuffersDataOutp\n     }\n   }\n \n-  @Override\n-  public void addBinaryField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n-    meta.writeInt(field.number);\n-    meta.writeByte(Lucene80DocValuesFormat.BINARY);\n-\n-    BinaryDocValues values = valuesProducer.getBinary(field);\n-    long start = data.getFilePointer();\n-    meta.writeLong(start); // dataOffset\n-    int numDocsWithField = 0;\n-    int minLength = Integer.MAX_VALUE;\n-    int maxLength = 0;\n-    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n-      numDocsWithField++;\n-      BytesRef v = values.binaryValue();\n-      int length = v.length;\n-      data.writeBytes(v.bytes, v.offset, v.length);\n-      minLength = Math.min(length, minLength);\n-      maxLength = Math.max(length, maxLength);\n+  class CompressedBinaryBlockWriter  implements Closeable {\n+    FastCompressionHashTable ht = new LZ4.FastCompressionHashTable();    \n+    int uncompressedBlockLength = 0;\n+    int maxUncompressedBlockLength = 0;\n+    int numDocsInCurrentBlock = 0;\n+    int [] docLengths = new int[Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK]; \n+    byte [] block = new byte [1024 * 16];\n+    int totalChunks = 0;\n+    long maxPointer = 0;\n+    long blockAddressesStart = -1; \n+\n+    private IndexOutput tempBinaryOffsets;\n+    \n+    \n+    public CompressedBinaryBlockWriter() throws IOException {\n+      tempBinaryOffsets = state.directory.createTempOutput(state.segmentInfo.name, \"binary_pointers\", state.context);\n+      try {\n+        CodecUtil.writeHeader(tempBinaryOffsets, Lucene80DocValuesFormat.META_CODEC + \"FilePointers\", Lucene80DocValuesFormat.VERSION_CURRENT);\n+      } catch (Throwable exception) {\n+        IOUtils.closeWhileHandlingException(this); //self-close because constructor caller can't \n+        throw exception;\n+      }\n     }\n-    assert numDocsWithField <= maxDoc;\n-    meta.writeLong(data.getFilePointer() - start); // dataLength\n \n-    if (numDocsWithField == 0) {\n-      meta.writeLong(-2); // docsWithFieldOffset\n-      meta.writeLong(0L); // docsWithFieldLength\n-      meta.writeShort((short) -1); // jumpTableEntryCount\n-      meta.writeByte((byte) -1);   // denseRankPower\n-    } else if (numDocsWithField == maxDoc) {\n-      meta.writeLong(-1); // docsWithFieldOffset\n-      meta.writeLong(0L); // docsWithFieldLength\n-      meta.writeShort((short) -1); // jumpTableEntryCount\n-      meta.writeByte((byte) -1);   // denseRankPower\n-    } else {\n-      long offset = data.getFilePointer();\n-      meta.writeLong(offset); // docsWithFieldOffset\n-      values = valuesProducer.getBinary(field);\n-      final short jumpTableEntryCount = IndexedDISI.writeBitSet(values, data, IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n-      meta.writeLong(data.getFilePointer() - offset); // docsWithFieldLength\n-      meta.writeShort(jumpTableEntryCount);\n-      meta.writeByte(IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n+    void  addDoc(int doc, BytesRef v) throws IOException {\n+      if (blockAddressesStart < 0) {\n+        blockAddressesStart = data.getFilePointer();\n+      }\n+      docLengths[numDocsInCurrentBlock] = v.length;\n+      block = ArrayUtil.grow(block, uncompressedBlockLength + v.length);\n+      System.arraycopy(v.bytes, v.offset, block, uncompressedBlockLength, v.length);\n+      uncompressedBlockLength += v.length;\n+      numDocsInCurrentBlock++;\n+      if (numDocsInCurrentBlock == Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK) {\n+        flushData();\n+      }      \n     }\n \n-    meta.writeInt(numDocsWithField);\n-    meta.writeInt(minLength);\n-    meta.writeInt(maxLength);\n-    if (maxLength > minLength) {\n-      start = data.getFilePointer();\n-      meta.writeLong(start);\n+    private void flushData() throws IOException {\n+      if(numDocsInCurrentBlock > 0) {\n+        // Write offset to this block to temporary offsets file\n+        totalChunks++;\n+        long thisBlockStartPointer = data.getFilePointer();\n+        data.writeVInt(numDocsInCurrentBlock);\n+        for (int i = 0; i < numDocsInCurrentBlock; i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc0OTI5MQ=="}, "originalCommit": {"oid": "47db4963385869f0fe84f565d55466637d5c0305"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk3NDM3MA==", "bodyText": "Done", "url": "https://github.com/apache/lucene-solr/pull/1234#discussion_r375974370", "createdAt": "2020-02-06T17:24:31Z", "author": {"login": "markharwood"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "diffHunk": "@@ -353,67 +360,168 @@ private void writeBlock(long[] values, int length, long gcd, ByteBuffersDataOutp\n     }\n   }\n \n-  @Override\n-  public void addBinaryField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n-    meta.writeInt(field.number);\n-    meta.writeByte(Lucene80DocValuesFormat.BINARY);\n-\n-    BinaryDocValues values = valuesProducer.getBinary(field);\n-    long start = data.getFilePointer();\n-    meta.writeLong(start); // dataOffset\n-    int numDocsWithField = 0;\n-    int minLength = Integer.MAX_VALUE;\n-    int maxLength = 0;\n-    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n-      numDocsWithField++;\n-      BytesRef v = values.binaryValue();\n-      int length = v.length;\n-      data.writeBytes(v.bytes, v.offset, v.length);\n-      minLength = Math.min(length, minLength);\n-      maxLength = Math.max(length, maxLength);\n+  class CompressedBinaryBlockWriter  implements Closeable {\n+    FastCompressionHashTable ht = new LZ4.FastCompressionHashTable();    \n+    int uncompressedBlockLength = 0;\n+    int maxUncompressedBlockLength = 0;\n+    int numDocsInCurrentBlock = 0;\n+    int [] docLengths = new int[Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK]; \n+    byte [] block = new byte [1024 * 16];\n+    int totalChunks = 0;\n+    long maxPointer = 0;\n+    long blockAddressesStart = -1; \n+\n+    private IndexOutput tempBinaryOffsets;\n+    \n+    \n+    public CompressedBinaryBlockWriter() throws IOException {\n+      tempBinaryOffsets = state.directory.createTempOutput(state.segmentInfo.name, \"binary_pointers\", state.context);\n+      try {\n+        CodecUtil.writeHeader(tempBinaryOffsets, Lucene80DocValuesFormat.META_CODEC + \"FilePointers\", Lucene80DocValuesFormat.VERSION_CURRENT);\n+      } catch (Throwable exception) {\n+        IOUtils.closeWhileHandlingException(this); //self-close because constructor caller can't \n+        throw exception;\n+      }\n     }\n-    assert numDocsWithField <= maxDoc;\n-    meta.writeLong(data.getFilePointer() - start); // dataLength\n \n-    if (numDocsWithField == 0) {\n-      meta.writeLong(-2); // docsWithFieldOffset\n-      meta.writeLong(0L); // docsWithFieldLength\n-      meta.writeShort((short) -1); // jumpTableEntryCount\n-      meta.writeByte((byte) -1);   // denseRankPower\n-    } else if (numDocsWithField == maxDoc) {\n-      meta.writeLong(-1); // docsWithFieldOffset\n-      meta.writeLong(0L); // docsWithFieldLength\n-      meta.writeShort((short) -1); // jumpTableEntryCount\n-      meta.writeByte((byte) -1);   // denseRankPower\n-    } else {\n-      long offset = data.getFilePointer();\n-      meta.writeLong(offset); // docsWithFieldOffset\n-      values = valuesProducer.getBinary(field);\n-      final short jumpTableEntryCount = IndexedDISI.writeBitSet(values, data, IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n-      meta.writeLong(data.getFilePointer() - offset); // docsWithFieldLength\n-      meta.writeShort(jumpTableEntryCount);\n-      meta.writeByte(IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n+    void  addDoc(int doc, BytesRef v) throws IOException {\n+      if (blockAddressesStart < 0) {\n+        blockAddressesStart = data.getFilePointer();\n+      }\n+      docLengths[numDocsInCurrentBlock] = v.length;\n+      block = ArrayUtil.grow(block, uncompressedBlockLength + v.length);\n+      System.arraycopy(v.bytes, v.offset, block, uncompressedBlockLength, v.length);\n+      uncompressedBlockLength += v.length;\n+      numDocsInCurrentBlock++;\n+      if (numDocsInCurrentBlock == Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK) {\n+        flushData();\n+      }      \n     }\n \n-    meta.writeInt(numDocsWithField);\n-    meta.writeInt(minLength);\n-    meta.writeInt(maxLength);\n-    if (maxLength > minLength) {\n-      start = data.getFilePointer();\n-      meta.writeLong(start);\n+    private void flushData() throws IOException {\n+      if(numDocsInCurrentBlock > 0) {\n+        // Write offset to this block to temporary offsets file\n+        totalChunks++;\n+        long thisBlockStartPointer = data.getFilePointer();\n+        data.writeVInt(numDocsInCurrentBlock);\n+        for (int i = 0; i < numDocsInCurrentBlock; i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc0OTI5MQ=="}, "originalCommit": {"oid": "47db4963385869f0fe84f565d55466637d5c0305"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzYyMjUyOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNTo0MzoxMFrOFlY7_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNTo0MzoxMFrOFlY7_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc1MDIwNA==", "bodyText": "Can you include maxPointer and fp in this exception message?", "url": "https://github.com/apache/lucene-solr/pull/1234#discussion_r374750204", "createdAt": "2020-02-04T15:43:10Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "diffHunk": "@@ -353,67 +360,168 @@ private void writeBlock(long[] values, int length, long gcd, ByteBuffersDataOutp\n     }\n   }\n \n-  @Override\n-  public void addBinaryField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n-    meta.writeInt(field.number);\n-    meta.writeByte(Lucene80DocValuesFormat.BINARY);\n-\n-    BinaryDocValues values = valuesProducer.getBinary(field);\n-    long start = data.getFilePointer();\n-    meta.writeLong(start); // dataOffset\n-    int numDocsWithField = 0;\n-    int minLength = Integer.MAX_VALUE;\n-    int maxLength = 0;\n-    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n-      numDocsWithField++;\n-      BytesRef v = values.binaryValue();\n-      int length = v.length;\n-      data.writeBytes(v.bytes, v.offset, v.length);\n-      minLength = Math.min(length, minLength);\n-      maxLength = Math.max(length, maxLength);\n+  class CompressedBinaryBlockWriter  implements Closeable {\n+    FastCompressionHashTable ht = new LZ4.FastCompressionHashTable();    \n+    int uncompressedBlockLength = 0;\n+    int maxUncompressedBlockLength = 0;\n+    int numDocsInCurrentBlock = 0;\n+    int [] docLengths = new int[Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK]; \n+    byte [] block = new byte [1024 * 16];\n+    int totalChunks = 0;\n+    long maxPointer = 0;\n+    long blockAddressesStart = -1; \n+\n+    private IndexOutput tempBinaryOffsets;\n+    \n+    \n+    public CompressedBinaryBlockWriter() throws IOException {\n+      tempBinaryOffsets = state.directory.createTempOutput(state.segmentInfo.name, \"binary_pointers\", state.context);\n+      try {\n+        CodecUtil.writeHeader(tempBinaryOffsets, Lucene80DocValuesFormat.META_CODEC + \"FilePointers\", Lucene80DocValuesFormat.VERSION_CURRENT);\n+      } catch (Throwable exception) {\n+        IOUtils.closeWhileHandlingException(this); //self-close because constructor caller can't \n+        throw exception;\n+      }\n     }\n-    assert numDocsWithField <= maxDoc;\n-    meta.writeLong(data.getFilePointer() - start); // dataLength\n \n-    if (numDocsWithField == 0) {\n-      meta.writeLong(-2); // docsWithFieldOffset\n-      meta.writeLong(0L); // docsWithFieldLength\n-      meta.writeShort((short) -1); // jumpTableEntryCount\n-      meta.writeByte((byte) -1);   // denseRankPower\n-    } else if (numDocsWithField == maxDoc) {\n-      meta.writeLong(-1); // docsWithFieldOffset\n-      meta.writeLong(0L); // docsWithFieldLength\n-      meta.writeShort((short) -1); // jumpTableEntryCount\n-      meta.writeByte((byte) -1);   // denseRankPower\n-    } else {\n-      long offset = data.getFilePointer();\n-      meta.writeLong(offset); // docsWithFieldOffset\n-      values = valuesProducer.getBinary(field);\n-      final short jumpTableEntryCount = IndexedDISI.writeBitSet(values, data, IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n-      meta.writeLong(data.getFilePointer() - offset); // docsWithFieldLength\n-      meta.writeShort(jumpTableEntryCount);\n-      meta.writeByte(IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n+    void  addDoc(int doc, BytesRef v) throws IOException {\n+      if (blockAddressesStart < 0) {\n+        blockAddressesStart = data.getFilePointer();\n+      }\n+      docLengths[numDocsInCurrentBlock] = v.length;\n+      block = ArrayUtil.grow(block, uncompressedBlockLength + v.length);\n+      System.arraycopy(v.bytes, v.offset, block, uncompressedBlockLength, v.length);\n+      uncompressedBlockLength += v.length;\n+      numDocsInCurrentBlock++;\n+      if (numDocsInCurrentBlock == Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK) {\n+        flushData();\n+      }      \n     }\n \n-    meta.writeInt(numDocsWithField);\n-    meta.writeInt(minLength);\n-    meta.writeInt(maxLength);\n-    if (maxLength > minLength) {\n-      start = data.getFilePointer();\n-      meta.writeLong(start);\n+    private void flushData() throws IOException {\n+      if(numDocsInCurrentBlock > 0) {\n+        // Write offset to this block to temporary offsets file\n+        totalChunks++;\n+        long thisBlockStartPointer = data.getFilePointer();\n+        data.writeVInt(numDocsInCurrentBlock);\n+        for (int i = 0; i < numDocsInCurrentBlock; i++) {\n+          data.writeVInt(docLengths[i]);\n+        }\n+        maxUncompressedBlockLength = Math.max(maxUncompressedBlockLength, uncompressedBlockLength);\n+        LZ4.compress(block,  0, uncompressedBlockLength, data, ht);\n+        numDocsInCurrentBlock = 0;\n+        uncompressedBlockLength = 0;\n+        maxPointer = data.getFilePointer();\n+        tempBinaryOffsets.writeVLong(maxPointer - thisBlockStartPointer);\n+      }\n+    }\n+    \n+    void writeMetaData() throws IOException {\n+      if (blockAddressesStart < 0 ) {\n+        return;\n+      }\n+      \n+      long startDMW = data.getFilePointer();\n+      meta.writeLong(startDMW);\n+      \n+      meta.writeInt(totalChunks);\n+      meta.writeInt(maxUncompressedBlockLength);\n       meta.writeVInt(DIRECT_MONOTONIC_BLOCK_SHIFT);\n+      \n+    \n+      CodecUtil.writeFooter(tempBinaryOffsets);\n+      IOUtils.close(tempBinaryOffsets);             \n+      //write the compressed block offsets info to the meta file by reading from temp file\n+      try (ChecksumIndexInput filePointersIn = state.directory.openChecksumInput(tempBinaryOffsets.getName(), IOContext.READONCE)) {\n+        CodecUtil.checkHeader(filePointersIn, Lucene80DocValuesFormat.META_CODEC + \"FilePointers\", Lucene80DocValuesFormat.VERSION_CURRENT,\n+          Lucene80DocValuesFormat.VERSION_CURRENT);\n+        Throwable priorE = null;\n+        try {\n+          final DirectMonotonicWriter filePointers = DirectMonotonicWriter.getInstance(meta, data, totalChunks, DIRECT_MONOTONIC_BLOCK_SHIFT);\n+          long fp = blockAddressesStart;\n+          for (int i = 0; i < totalChunks; ++i) {\n+            filePointers.add(fp);\n+            fp += filePointersIn.readVLong();\n+          }\n+          if (maxPointer < fp) {\n+            throw new CorruptIndexException(\"File pointers don't add up\", filePointersIn);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47db4963385869f0fe84f565d55466637d5c0305"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDgxMTA1OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMzoyNTo1NFrOFl3kpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMzoyNTo1NFrOFl3kpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI1MjEzMw==", "bodyText": "make it final?", "url": "https://github.com/apache/lucene-solr/pull/1234#discussion_r375252133", "createdAt": "2020-02-05T13:25:54Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "diffHunk": "@@ -61,11 +66,13 @@\n \n   IndexOutput data, meta;\n   final int maxDoc;\n+  private SegmentWriteState state;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1569fe08c8bb219df45927b102c2cbe080a43b31"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDgxNTU1OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMzoyNzoxNFrOFl3nZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMzoyNzoxNFrOFl3nZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI1MjgzNg==", "bodyText": "we usually don't let spaces between the type of array elements and []\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                int [] docLengths = new int[Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK]; \n          \n          \n            \n                int[] docLengths = new int[Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK];", "url": "https://github.com/apache/lucene-solr/pull/1234#discussion_r375252836", "createdAt": "2020-02-05T13:27:14Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "diffHunk": "@@ -353,67 +360,168 @@ private void writeBlock(long[] values, int length, long gcd, ByteBuffersDataOutp\n     }\n   }\n \n-  @Override\n-  public void addBinaryField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n-    meta.writeInt(field.number);\n-    meta.writeByte(Lucene80DocValuesFormat.BINARY);\n-\n-    BinaryDocValues values = valuesProducer.getBinary(field);\n-    long start = data.getFilePointer();\n-    meta.writeLong(start); // dataOffset\n-    int numDocsWithField = 0;\n-    int minLength = Integer.MAX_VALUE;\n-    int maxLength = 0;\n-    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n-      numDocsWithField++;\n-      BytesRef v = values.binaryValue();\n-      int length = v.length;\n-      data.writeBytes(v.bytes, v.offset, v.length);\n-      minLength = Math.min(length, minLength);\n-      maxLength = Math.max(length, maxLength);\n+  class CompressedBinaryBlockWriter implements Closeable {\n+    FastCompressionHashTable ht = new LZ4.FastCompressionHashTable();    \n+    int uncompressedBlockLength = 0;\n+    int maxUncompressedBlockLength = 0;\n+    int numDocsInCurrentBlock = 0;\n+    int [] docLengths = new int[Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK]; ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1569fe08c8bb219df45927b102c2cbe080a43b31"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDgxNTk2OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMzoyNzoyM1rOFl3nqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMzoyNzoyM1rOFl3nqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI1MjkwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                byte [] block = new byte [1024 * 16];\n          \n          \n            \n                byte[] block = new byte [1024 * 16];", "url": "https://github.com/apache/lucene-solr/pull/1234#discussion_r375252907", "createdAt": "2020-02-05T13:27:23Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "diffHunk": "@@ -353,67 +360,168 @@ private void writeBlock(long[] values, int length, long gcd, ByteBuffersDataOutp\n     }\n   }\n \n-  @Override\n-  public void addBinaryField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n-    meta.writeInt(field.number);\n-    meta.writeByte(Lucene80DocValuesFormat.BINARY);\n-\n-    BinaryDocValues values = valuesProducer.getBinary(field);\n-    long start = data.getFilePointer();\n-    meta.writeLong(start); // dataOffset\n-    int numDocsWithField = 0;\n-    int minLength = Integer.MAX_VALUE;\n-    int maxLength = 0;\n-    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n-      numDocsWithField++;\n-      BytesRef v = values.binaryValue();\n-      int length = v.length;\n-      data.writeBytes(v.bytes, v.offset, v.length);\n-      minLength = Math.min(length, minLength);\n-      maxLength = Math.max(length, maxLength);\n+  class CompressedBinaryBlockWriter implements Closeable {\n+    FastCompressionHashTable ht = new LZ4.FastCompressionHashTable();    \n+    int uncompressedBlockLength = 0;\n+    int maxUncompressedBlockLength = 0;\n+    int numDocsInCurrentBlock = 0;\n+    int [] docLengths = new int[Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK]; \n+    byte [] block = new byte [1024 * 16];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1569fe08c8bb219df45927b102c2cbe080a43b31"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDk1NDU1OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNDowNzo1MlrOFl48Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNjowNzoxNVrOFmg0nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI3NDU2Mw==", "bodyText": "we usually do this like that instead, which helps avoid catching Throwable\nboolean success = false;\ntry {\n  // write header\n} finally {\n  if (success == false) {\n    // close\n  }\n}", "url": "https://github.com/apache/lucene-solr/pull/1234#discussion_r375274563", "createdAt": "2020-02-05T14:07:52Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "diffHunk": "@@ -353,67 +360,168 @@ private void writeBlock(long[] values, int length, long gcd, ByteBuffersDataOutp\n     }\n   }\n \n-  @Override\n-  public void addBinaryField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n-    meta.writeInt(field.number);\n-    meta.writeByte(Lucene80DocValuesFormat.BINARY);\n-\n-    BinaryDocValues values = valuesProducer.getBinary(field);\n-    long start = data.getFilePointer();\n-    meta.writeLong(start); // dataOffset\n-    int numDocsWithField = 0;\n-    int minLength = Integer.MAX_VALUE;\n-    int maxLength = 0;\n-    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n-      numDocsWithField++;\n-      BytesRef v = values.binaryValue();\n-      int length = v.length;\n-      data.writeBytes(v.bytes, v.offset, v.length);\n-      minLength = Math.min(length, minLength);\n-      maxLength = Math.max(length, maxLength);\n+  class CompressedBinaryBlockWriter implements Closeable {\n+    FastCompressionHashTable ht = new LZ4.FastCompressionHashTable();    \n+    int uncompressedBlockLength = 0;\n+    int maxUncompressedBlockLength = 0;\n+    int numDocsInCurrentBlock = 0;\n+    int [] docLengths = new int[Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK]; \n+    byte [] block = new byte [1024 * 16];\n+    int totalChunks = 0;\n+    long maxPointer = 0;\n+    long blockAddressesStart = -1; \n+\n+    private IndexOutput tempBinaryOffsets;\n+    \n+    \n+    public CompressedBinaryBlockWriter() throws IOException {\n+      tempBinaryOffsets = state.directory.createTempOutput(state.segmentInfo.name, \"binary_pointers\", state.context);\n+      try {\n+        CodecUtil.writeHeader(tempBinaryOffsets, Lucene80DocValuesFormat.META_CODEC + \"FilePointers\", Lucene80DocValuesFormat.VERSION_CURRENT);\n+      } catch (Throwable exception) {\n+        IOUtils.closeWhileHandlingException(this); //self-close because constructor caller can't \n+        throw exception;\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1569fe08c8bb219df45927b102c2cbe080a43b31"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkyMjM3Mw==", "bodyText": "What was the \"+1\" comment for line 407 about?\nI've seen encoding elsewhere that have n+1 offsets to record start of each value and the last offset is effectively the end of the last value. In this scenario I'm writing n value lengths.", "url": "https://github.com/apache/lucene-solr/pull/1234#discussion_r375922373", "createdAt": "2020-02-06T15:58:22Z", "author": {"login": "markharwood"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "diffHunk": "@@ -353,67 +360,168 @@ private void writeBlock(long[] values, int length, long gcd, ByteBuffersDataOutp\n     }\n   }\n \n-  @Override\n-  public void addBinaryField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n-    meta.writeInt(field.number);\n-    meta.writeByte(Lucene80DocValuesFormat.BINARY);\n-\n-    BinaryDocValues values = valuesProducer.getBinary(field);\n-    long start = data.getFilePointer();\n-    meta.writeLong(start); // dataOffset\n-    int numDocsWithField = 0;\n-    int minLength = Integer.MAX_VALUE;\n-    int maxLength = 0;\n-    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n-      numDocsWithField++;\n-      BytesRef v = values.binaryValue();\n-      int length = v.length;\n-      data.writeBytes(v.bytes, v.offset, v.length);\n-      minLength = Math.min(length, minLength);\n-      maxLength = Math.max(length, maxLength);\n+  class CompressedBinaryBlockWriter implements Closeable {\n+    FastCompressionHashTable ht = new LZ4.FastCompressionHashTable();    \n+    int uncompressedBlockLength = 0;\n+    int maxUncompressedBlockLength = 0;\n+    int numDocsInCurrentBlock = 0;\n+    int [] docLengths = new int[Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK]; \n+    byte [] block = new byte [1024 * 16];\n+    int totalChunks = 0;\n+    long maxPointer = 0;\n+    long blockAddressesStart = -1; \n+\n+    private IndexOutput tempBinaryOffsets;\n+    \n+    \n+    public CompressedBinaryBlockWriter() throws IOException {\n+      tempBinaryOffsets = state.directory.createTempOutput(state.segmentInfo.name, \"binary_pointers\", state.context);\n+      try {\n+        CodecUtil.writeHeader(tempBinaryOffsets, Lucene80DocValuesFormat.META_CODEC + \"FilePointers\", Lucene80DocValuesFormat.VERSION_CURRENT);\n+      } catch (Throwable exception) {\n+        IOUtils.closeWhileHandlingException(this); //self-close because constructor caller can't \n+        throw exception;\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI3NDU2Mw=="}, "originalCommit": {"oid": "1569fe08c8bb219df45927b102c2cbe080a43b31"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkyNzk2Nw==", "bodyText": "It was about optimizing for the case that all values have the same length. In that case we could still one bit of the first length to mean that all values have the same length for instance?", "url": "https://github.com/apache/lucene-solr/pull/1234#discussion_r375927967", "createdAt": "2020-02-06T16:07:15Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "diffHunk": "@@ -353,67 +360,168 @@ private void writeBlock(long[] values, int length, long gcd, ByteBuffersDataOutp\n     }\n   }\n \n-  @Override\n-  public void addBinaryField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n-    meta.writeInt(field.number);\n-    meta.writeByte(Lucene80DocValuesFormat.BINARY);\n-\n-    BinaryDocValues values = valuesProducer.getBinary(field);\n-    long start = data.getFilePointer();\n-    meta.writeLong(start); // dataOffset\n-    int numDocsWithField = 0;\n-    int minLength = Integer.MAX_VALUE;\n-    int maxLength = 0;\n-    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n-      numDocsWithField++;\n-      BytesRef v = values.binaryValue();\n-      int length = v.length;\n-      data.writeBytes(v.bytes, v.offset, v.length);\n-      minLength = Math.min(length, minLength);\n-      maxLength = Math.max(length, maxLength);\n+  class CompressedBinaryBlockWriter implements Closeable {\n+    FastCompressionHashTable ht = new LZ4.FastCompressionHashTable();    \n+    int uncompressedBlockLength = 0;\n+    int maxUncompressedBlockLength = 0;\n+    int numDocsInCurrentBlock = 0;\n+    int [] docLengths = new int[Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK]; \n+    byte [] block = new byte [1024 * 16];\n+    int totalChunks = 0;\n+    long maxPointer = 0;\n+    long blockAddressesStart = -1; \n+\n+    private IndexOutput tempBinaryOffsets;\n+    \n+    \n+    public CompressedBinaryBlockWriter() throws IOException {\n+      tempBinaryOffsets = state.directory.createTempOutput(state.segmentInfo.name, \"binary_pointers\", state.context);\n+      try {\n+        CodecUtil.writeHeader(tempBinaryOffsets, Lucene80DocValuesFormat.META_CODEC + \"FilePointers\", Lucene80DocValuesFormat.VERSION_CURRENT);\n+      } catch (Throwable exception) {\n+        IOUtils.closeWhileHandlingException(this); //self-close because constructor caller can't \n+        throw exception;\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI3NDU2Mw=="}, "originalCommit": {"oid": "1569fe08c8bb219df45927b102c2cbe080a43b31"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDk1OTk4OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNDowOTozNlrOFl4_6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwODoxNjowMlrOFpugCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI3NTQ5Nw==", "bodyText": "it looks like we could set blockAddressesStart in the constructor instead?", "url": "https://github.com/apache/lucene-solr/pull/1234#discussion_r375275497", "createdAt": "2020-02-05T14:09:36Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "diffHunk": "@@ -353,67 +360,168 @@ private void writeBlock(long[] values, int length, long gcd, ByteBuffersDataOutp\n     }\n   }\n \n-  @Override\n-  public void addBinaryField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n-    meta.writeInt(field.number);\n-    meta.writeByte(Lucene80DocValuesFormat.BINARY);\n-\n-    BinaryDocValues values = valuesProducer.getBinary(field);\n-    long start = data.getFilePointer();\n-    meta.writeLong(start); // dataOffset\n-    int numDocsWithField = 0;\n-    int minLength = Integer.MAX_VALUE;\n-    int maxLength = 0;\n-    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n-      numDocsWithField++;\n-      BytesRef v = values.binaryValue();\n-      int length = v.length;\n-      data.writeBytes(v.bytes, v.offset, v.length);\n-      minLength = Math.min(length, minLength);\n-      maxLength = Math.max(length, maxLength);\n+  class CompressedBinaryBlockWriter implements Closeable {\n+    FastCompressionHashTable ht = new LZ4.FastCompressionHashTable();    \n+    int uncompressedBlockLength = 0;\n+    int maxUncompressedBlockLength = 0;\n+    int numDocsInCurrentBlock = 0;\n+    int [] docLengths = new int[Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK]; \n+    byte [] block = new byte [1024 * 16];\n+    int totalChunks = 0;\n+    long maxPointer = 0;\n+    long blockAddressesStart = -1; \n+\n+    private IndexOutput tempBinaryOffsets;\n+    \n+    \n+    public CompressedBinaryBlockWriter() throws IOException {\n+      tempBinaryOffsets = state.directory.createTempOutput(state.segmentInfo.name, \"binary_pointers\", state.context);\n+      try {\n+        CodecUtil.writeHeader(tempBinaryOffsets, Lucene80DocValuesFormat.META_CODEC + \"FilePointers\", Lucene80DocValuesFormat.VERSION_CURRENT);\n+      } catch (Throwable exception) {\n+        IOUtils.closeWhileHandlingException(this); //self-close because constructor caller can't \n+        throw exception;\n+      }\n     }\n-    assert numDocsWithField <= maxDoc;\n-    meta.writeLong(data.getFilePointer() - start); // dataLength\n \n-    if (numDocsWithField == 0) {\n-      meta.writeLong(-2); // docsWithFieldOffset\n-      meta.writeLong(0L); // docsWithFieldLength\n-      meta.writeShort((short) -1); // jumpTableEntryCount\n-      meta.writeByte((byte) -1);   // denseRankPower\n-    } else if (numDocsWithField == maxDoc) {\n-      meta.writeLong(-1); // docsWithFieldOffset\n-      meta.writeLong(0L); // docsWithFieldLength\n-      meta.writeShort((short) -1); // jumpTableEntryCount\n-      meta.writeByte((byte) -1);   // denseRankPower\n-    } else {\n-      long offset = data.getFilePointer();\n-      meta.writeLong(offset); // docsWithFieldOffset\n-      values = valuesProducer.getBinary(field);\n-      final short jumpTableEntryCount = IndexedDISI.writeBitSet(values, data, IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n-      meta.writeLong(data.getFilePointer() - offset); // docsWithFieldLength\n-      meta.writeShort(jumpTableEntryCount);\n-      meta.writeByte(IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n+    void addDoc(int doc, BytesRef v) throws IOException {\n+      if (blockAddressesStart < 0) {\n+        blockAddressesStart = data.getFilePointer();\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1569fe08c8bb219df45927b102c2cbe080a43b31"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkwMzM0Nw==", "bodyText": "I tried that and it didn't work - something else was writing to data in between constructor and addDoc calls", "url": "https://github.com/apache/lucene-solr/pull/1234#discussion_r375903347", "createdAt": "2020-02-06T15:30:07Z", "author": {"login": "markharwood"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "diffHunk": "@@ -353,67 +360,168 @@ private void writeBlock(long[] values, int length, long gcd, ByteBuffersDataOutp\n     }\n   }\n \n-  @Override\n-  public void addBinaryField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n-    meta.writeInt(field.number);\n-    meta.writeByte(Lucene80DocValuesFormat.BINARY);\n-\n-    BinaryDocValues values = valuesProducer.getBinary(field);\n-    long start = data.getFilePointer();\n-    meta.writeLong(start); // dataOffset\n-    int numDocsWithField = 0;\n-    int minLength = Integer.MAX_VALUE;\n-    int maxLength = 0;\n-    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n-      numDocsWithField++;\n-      BytesRef v = values.binaryValue();\n-      int length = v.length;\n-      data.writeBytes(v.bytes, v.offset, v.length);\n-      minLength = Math.min(length, minLength);\n-      maxLength = Math.max(length, maxLength);\n+  class CompressedBinaryBlockWriter implements Closeable {\n+    FastCompressionHashTable ht = new LZ4.FastCompressionHashTable();    \n+    int uncompressedBlockLength = 0;\n+    int maxUncompressedBlockLength = 0;\n+    int numDocsInCurrentBlock = 0;\n+    int [] docLengths = new int[Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK]; \n+    byte [] block = new byte [1024 * 16];\n+    int totalChunks = 0;\n+    long maxPointer = 0;\n+    long blockAddressesStart = -1; \n+\n+    private IndexOutput tempBinaryOffsets;\n+    \n+    \n+    public CompressedBinaryBlockWriter() throws IOException {\n+      tempBinaryOffsets = state.directory.createTempOutput(state.segmentInfo.name, \"binary_pointers\", state.context);\n+      try {\n+        CodecUtil.writeHeader(tempBinaryOffsets, Lucene80DocValuesFormat.META_CODEC + \"FilePointers\", Lucene80DocValuesFormat.VERSION_CURRENT);\n+      } catch (Throwable exception) {\n+        IOUtils.closeWhileHandlingException(this); //self-close because constructor caller can't \n+        throw exception;\n+      }\n     }\n-    assert numDocsWithField <= maxDoc;\n-    meta.writeLong(data.getFilePointer() - start); // dataLength\n \n-    if (numDocsWithField == 0) {\n-      meta.writeLong(-2); // docsWithFieldOffset\n-      meta.writeLong(0L); // docsWithFieldLength\n-      meta.writeShort((short) -1); // jumpTableEntryCount\n-      meta.writeByte((byte) -1);   // denseRankPower\n-    } else if (numDocsWithField == maxDoc) {\n-      meta.writeLong(-1); // docsWithFieldOffset\n-      meta.writeLong(0L); // docsWithFieldLength\n-      meta.writeShort((short) -1); // jumpTableEntryCount\n-      meta.writeByte((byte) -1);   // denseRankPower\n-    } else {\n-      long offset = data.getFilePointer();\n-      meta.writeLong(offset); // docsWithFieldOffset\n-      values = valuesProducer.getBinary(field);\n-      final short jumpTableEntryCount = IndexedDISI.writeBitSet(values, data, IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n-      meta.writeLong(data.getFilePointer() - offset); // docsWithFieldLength\n-      meta.writeShort(jumpTableEntryCount);\n-      meta.writeByte(IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n+    void addDoc(int doc, BytesRef v) throws IOException {\n+      if (blockAddressesStart < 0) {\n+        blockAddressesStart = data.getFilePointer();\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI3NTQ5Nw=="}, "originalCommit": {"oid": "1569fe08c8bb219df45927b102c2cbe080a43b31"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI5NzgwMw==", "bodyText": "Have you found what this something else is?", "url": "https://github.com/apache/lucene-solr/pull/1234#discussion_r379297803", "createdAt": "2020-02-14T08:16:02Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "diffHunk": "@@ -353,67 +360,168 @@ private void writeBlock(long[] values, int length, long gcd, ByteBuffersDataOutp\n     }\n   }\n \n-  @Override\n-  public void addBinaryField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n-    meta.writeInt(field.number);\n-    meta.writeByte(Lucene80DocValuesFormat.BINARY);\n-\n-    BinaryDocValues values = valuesProducer.getBinary(field);\n-    long start = data.getFilePointer();\n-    meta.writeLong(start); // dataOffset\n-    int numDocsWithField = 0;\n-    int minLength = Integer.MAX_VALUE;\n-    int maxLength = 0;\n-    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n-      numDocsWithField++;\n-      BytesRef v = values.binaryValue();\n-      int length = v.length;\n-      data.writeBytes(v.bytes, v.offset, v.length);\n-      minLength = Math.min(length, minLength);\n-      maxLength = Math.max(length, maxLength);\n+  class CompressedBinaryBlockWriter implements Closeable {\n+    FastCompressionHashTable ht = new LZ4.FastCompressionHashTable();    \n+    int uncompressedBlockLength = 0;\n+    int maxUncompressedBlockLength = 0;\n+    int numDocsInCurrentBlock = 0;\n+    int [] docLengths = new int[Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK]; \n+    byte [] block = new byte [1024 * 16];\n+    int totalChunks = 0;\n+    long maxPointer = 0;\n+    long blockAddressesStart = -1; \n+\n+    private IndexOutput tempBinaryOffsets;\n+    \n+    \n+    public CompressedBinaryBlockWriter() throws IOException {\n+      tempBinaryOffsets = state.directory.createTempOutput(state.segmentInfo.name, \"binary_pointers\", state.context);\n+      try {\n+        CodecUtil.writeHeader(tempBinaryOffsets, Lucene80DocValuesFormat.META_CODEC + \"FilePointers\", Lucene80DocValuesFormat.VERSION_CURRENT);\n+      } catch (Throwable exception) {\n+        IOUtils.closeWhileHandlingException(this); //self-close because constructor caller can't \n+        throw exception;\n+      }\n     }\n-    assert numDocsWithField <= maxDoc;\n-    meta.writeLong(data.getFilePointer() - start); // dataLength\n \n-    if (numDocsWithField == 0) {\n-      meta.writeLong(-2); // docsWithFieldOffset\n-      meta.writeLong(0L); // docsWithFieldLength\n-      meta.writeShort((short) -1); // jumpTableEntryCount\n-      meta.writeByte((byte) -1);   // denseRankPower\n-    } else if (numDocsWithField == maxDoc) {\n-      meta.writeLong(-1); // docsWithFieldOffset\n-      meta.writeLong(0L); // docsWithFieldLength\n-      meta.writeShort((short) -1); // jumpTableEntryCount\n-      meta.writeByte((byte) -1);   // denseRankPower\n-    } else {\n-      long offset = data.getFilePointer();\n-      meta.writeLong(offset); // docsWithFieldOffset\n-      values = valuesProducer.getBinary(field);\n-      final short jumpTableEntryCount = IndexedDISI.writeBitSet(values, data, IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n-      meta.writeLong(data.getFilePointer() - offset); // docsWithFieldLength\n-      meta.writeShort(jumpTableEntryCount);\n-      meta.writeByte(IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n+    void addDoc(int doc, BytesRef v) throws IOException {\n+      if (blockAddressesStart < 0) {\n+        blockAddressesStart = data.getFilePointer();\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI3NTQ5Nw=="}, "originalCommit": {"oid": "1569fe08c8bb219df45927b102c2cbe080a43b31"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDk3NDc2OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNDoxMzo1OVrOFl5JSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNDoxMzo1OVrOFl5JSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI3Nzg5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    LZ4.compress(block,  0, uncompressedBlockLength, data, ht);\n          \n          \n            \n                    LZ4.compress(block, 0, uncompressedBlockLength, data, ht);", "url": "https://github.com/apache/lucene-solr/pull/1234#discussion_r375277898", "createdAt": "2020-02-05T14:13:59Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "diffHunk": "@@ -353,67 +360,168 @@ private void writeBlock(long[] values, int length, long gcd, ByteBuffersDataOutp\n     }\n   }\n \n-  @Override\n-  public void addBinaryField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n-    meta.writeInt(field.number);\n-    meta.writeByte(Lucene80DocValuesFormat.BINARY);\n-\n-    BinaryDocValues values = valuesProducer.getBinary(field);\n-    long start = data.getFilePointer();\n-    meta.writeLong(start); // dataOffset\n-    int numDocsWithField = 0;\n-    int minLength = Integer.MAX_VALUE;\n-    int maxLength = 0;\n-    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n-      numDocsWithField++;\n-      BytesRef v = values.binaryValue();\n-      int length = v.length;\n-      data.writeBytes(v.bytes, v.offset, v.length);\n-      minLength = Math.min(length, minLength);\n-      maxLength = Math.max(length, maxLength);\n+  class CompressedBinaryBlockWriter implements Closeable {\n+    FastCompressionHashTable ht = new LZ4.FastCompressionHashTable();    \n+    int uncompressedBlockLength = 0;\n+    int maxUncompressedBlockLength = 0;\n+    int numDocsInCurrentBlock = 0;\n+    int [] docLengths = new int[Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK]; \n+    byte [] block = new byte [1024 * 16];\n+    int totalChunks = 0;\n+    long maxPointer = 0;\n+    long blockAddressesStart = -1; \n+\n+    private IndexOutput tempBinaryOffsets;\n+    \n+    \n+    public CompressedBinaryBlockWriter() throws IOException {\n+      tempBinaryOffsets = state.directory.createTempOutput(state.segmentInfo.name, \"binary_pointers\", state.context);\n+      try {\n+        CodecUtil.writeHeader(tempBinaryOffsets, Lucene80DocValuesFormat.META_CODEC + \"FilePointers\", Lucene80DocValuesFormat.VERSION_CURRENT);\n+      } catch (Throwable exception) {\n+        IOUtils.closeWhileHandlingException(this); //self-close because constructor caller can't \n+        throw exception;\n+      }\n     }\n-    assert numDocsWithField <= maxDoc;\n-    meta.writeLong(data.getFilePointer() - start); // dataLength\n \n-    if (numDocsWithField == 0) {\n-      meta.writeLong(-2); // docsWithFieldOffset\n-      meta.writeLong(0L); // docsWithFieldLength\n-      meta.writeShort((short) -1); // jumpTableEntryCount\n-      meta.writeByte((byte) -1);   // denseRankPower\n-    } else if (numDocsWithField == maxDoc) {\n-      meta.writeLong(-1); // docsWithFieldOffset\n-      meta.writeLong(0L); // docsWithFieldLength\n-      meta.writeShort((short) -1); // jumpTableEntryCount\n-      meta.writeByte((byte) -1);   // denseRankPower\n-    } else {\n-      long offset = data.getFilePointer();\n-      meta.writeLong(offset); // docsWithFieldOffset\n-      values = valuesProducer.getBinary(field);\n-      final short jumpTableEntryCount = IndexedDISI.writeBitSet(values, data, IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n-      meta.writeLong(data.getFilePointer() - offset); // docsWithFieldLength\n-      meta.writeShort(jumpTableEntryCount);\n-      meta.writeByte(IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n+    void addDoc(int doc, BytesRef v) throws IOException {\n+      if (blockAddressesStart < 0) {\n+        blockAddressesStart = data.getFilePointer();\n+      }\n+      docLengths[numDocsInCurrentBlock] = v.length;\n+      block = ArrayUtil.grow(block, uncompressedBlockLength + v.length);\n+      System.arraycopy(v.bytes, v.offset, block, uncompressedBlockLength, v.length);\n+      uncompressedBlockLength += v.length;\n+      numDocsInCurrentBlock++;\n+      if (numDocsInCurrentBlock == Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK) {\n+        flushData();\n+      }      \n     }\n \n-    meta.writeInt(numDocsWithField);\n-    meta.writeInt(minLength);\n-    meta.writeInt(maxLength);\n-    if (maxLength > minLength) {\n-      start = data.getFilePointer();\n-      meta.writeLong(start);\n+    private void flushData() throws IOException {\n+      if (numDocsInCurrentBlock > 0) {\n+        // Write offset to this block to temporary offsets file\n+        totalChunks++;\n+        long thisBlockStartPointer = data.getFilePointer();\n+        data.writeVInt(numDocsInCurrentBlock);\n+        for (int i = 0; i < numDocsInCurrentBlock; i++) {\n+          data.writeVInt(docLengths[i]);\n+        }\n+        maxUncompressedBlockLength = Math.max(maxUncompressedBlockLength, uncompressedBlockLength);\n+        LZ4.compress(block,  0, uncompressedBlockLength, data, ht);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1569fe08c8bb219df45927b102c2cbe080a43b31"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDk3NzM5OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNDoxNDo0OVrOFl5K8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwODoyMDo0M1rOFpumNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI3ODMyMw==", "bodyText": "this only happens if there are no values? when do we run into this condition?", "url": "https://github.com/apache/lucene-solr/pull/1234#discussion_r375278323", "createdAt": "2020-02-05T14:14:49Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "diffHunk": "@@ -353,67 +360,168 @@ private void writeBlock(long[] values, int length, long gcd, ByteBuffersDataOutp\n     }\n   }\n \n-  @Override\n-  public void addBinaryField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n-    meta.writeInt(field.number);\n-    meta.writeByte(Lucene80DocValuesFormat.BINARY);\n-\n-    BinaryDocValues values = valuesProducer.getBinary(field);\n-    long start = data.getFilePointer();\n-    meta.writeLong(start); // dataOffset\n-    int numDocsWithField = 0;\n-    int minLength = Integer.MAX_VALUE;\n-    int maxLength = 0;\n-    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n-      numDocsWithField++;\n-      BytesRef v = values.binaryValue();\n-      int length = v.length;\n-      data.writeBytes(v.bytes, v.offset, v.length);\n-      minLength = Math.min(length, minLength);\n-      maxLength = Math.max(length, maxLength);\n+  class CompressedBinaryBlockWriter implements Closeable {\n+    FastCompressionHashTable ht = new LZ4.FastCompressionHashTable();    \n+    int uncompressedBlockLength = 0;\n+    int maxUncompressedBlockLength = 0;\n+    int numDocsInCurrentBlock = 0;\n+    int [] docLengths = new int[Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK]; \n+    byte [] block = new byte [1024 * 16];\n+    int totalChunks = 0;\n+    long maxPointer = 0;\n+    long blockAddressesStart = -1; \n+\n+    private IndexOutput tempBinaryOffsets;\n+    \n+    \n+    public CompressedBinaryBlockWriter() throws IOException {\n+      tempBinaryOffsets = state.directory.createTempOutput(state.segmentInfo.name, \"binary_pointers\", state.context);\n+      try {\n+        CodecUtil.writeHeader(tempBinaryOffsets, Lucene80DocValuesFormat.META_CODEC + \"FilePointers\", Lucene80DocValuesFormat.VERSION_CURRENT);\n+      } catch (Throwable exception) {\n+        IOUtils.closeWhileHandlingException(this); //self-close because constructor caller can't \n+        throw exception;\n+      }\n     }\n-    assert numDocsWithField <= maxDoc;\n-    meta.writeLong(data.getFilePointer() - start); // dataLength\n \n-    if (numDocsWithField == 0) {\n-      meta.writeLong(-2); // docsWithFieldOffset\n-      meta.writeLong(0L); // docsWithFieldLength\n-      meta.writeShort((short) -1); // jumpTableEntryCount\n-      meta.writeByte((byte) -1);   // denseRankPower\n-    } else if (numDocsWithField == maxDoc) {\n-      meta.writeLong(-1); // docsWithFieldOffset\n-      meta.writeLong(0L); // docsWithFieldLength\n-      meta.writeShort((short) -1); // jumpTableEntryCount\n-      meta.writeByte((byte) -1);   // denseRankPower\n-    } else {\n-      long offset = data.getFilePointer();\n-      meta.writeLong(offset); // docsWithFieldOffset\n-      values = valuesProducer.getBinary(field);\n-      final short jumpTableEntryCount = IndexedDISI.writeBitSet(values, data, IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n-      meta.writeLong(data.getFilePointer() - offset); // docsWithFieldLength\n-      meta.writeShort(jumpTableEntryCount);\n-      meta.writeByte(IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n+    void addDoc(int doc, BytesRef v) throws IOException {\n+      if (blockAddressesStart < 0) {\n+        blockAddressesStart = data.getFilePointer();\n+      }\n+      docLengths[numDocsInCurrentBlock] = v.length;\n+      block = ArrayUtil.grow(block, uncompressedBlockLength + v.length);\n+      System.arraycopy(v.bytes, v.offset, block, uncompressedBlockLength, v.length);\n+      uncompressedBlockLength += v.length;\n+      numDocsInCurrentBlock++;\n+      if (numDocsInCurrentBlock == Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK) {\n+        flushData();\n+      }      \n     }\n \n-    meta.writeInt(numDocsWithField);\n-    meta.writeInt(minLength);\n-    meta.writeInt(maxLength);\n-    if (maxLength > minLength) {\n-      start = data.getFilePointer();\n-      meta.writeLong(start);\n+    private void flushData() throws IOException {\n+      if (numDocsInCurrentBlock > 0) {\n+        // Write offset to this block to temporary offsets file\n+        totalChunks++;\n+        long thisBlockStartPointer = data.getFilePointer();\n+        data.writeVInt(numDocsInCurrentBlock);\n+        for (int i = 0; i < numDocsInCurrentBlock; i++) {\n+          data.writeVInt(docLengths[i]);\n+        }\n+        maxUncompressedBlockLength = Math.max(maxUncompressedBlockLength, uncompressedBlockLength);\n+        LZ4.compress(block,  0, uncompressedBlockLength, data, ht);\n+        numDocsInCurrentBlock = 0;\n+        uncompressedBlockLength = 0;\n+        maxPointer = data.getFilePointer();\n+        tempBinaryOffsets.writeVLong(maxPointer - thisBlockStartPointer);\n+      }\n+    }\n+    \n+    void writeMetaData() throws IOException {\n+      if (blockAddressesStart < 0 ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1569fe08c8bb219df45927b102c2cbe080a43b31"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkxNDgzNg==", "bodyText": "Looks to be when merges clear out deleted docs leaving no values.", "url": "https://github.com/apache/lucene-solr/pull/1234#discussion_r375914836", "createdAt": "2020-02-06T15:47:07Z", "author": {"login": "markharwood"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "diffHunk": "@@ -353,67 +360,168 @@ private void writeBlock(long[] values, int length, long gcd, ByteBuffersDataOutp\n     }\n   }\n \n-  @Override\n-  public void addBinaryField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n-    meta.writeInt(field.number);\n-    meta.writeByte(Lucene80DocValuesFormat.BINARY);\n-\n-    BinaryDocValues values = valuesProducer.getBinary(field);\n-    long start = data.getFilePointer();\n-    meta.writeLong(start); // dataOffset\n-    int numDocsWithField = 0;\n-    int minLength = Integer.MAX_VALUE;\n-    int maxLength = 0;\n-    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n-      numDocsWithField++;\n-      BytesRef v = values.binaryValue();\n-      int length = v.length;\n-      data.writeBytes(v.bytes, v.offset, v.length);\n-      minLength = Math.min(length, minLength);\n-      maxLength = Math.max(length, maxLength);\n+  class CompressedBinaryBlockWriter implements Closeable {\n+    FastCompressionHashTable ht = new LZ4.FastCompressionHashTable();    \n+    int uncompressedBlockLength = 0;\n+    int maxUncompressedBlockLength = 0;\n+    int numDocsInCurrentBlock = 0;\n+    int [] docLengths = new int[Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK]; \n+    byte [] block = new byte [1024 * 16];\n+    int totalChunks = 0;\n+    long maxPointer = 0;\n+    long blockAddressesStart = -1; \n+\n+    private IndexOutput tempBinaryOffsets;\n+    \n+    \n+    public CompressedBinaryBlockWriter() throws IOException {\n+      tempBinaryOffsets = state.directory.createTempOutput(state.segmentInfo.name, \"binary_pointers\", state.context);\n+      try {\n+        CodecUtil.writeHeader(tempBinaryOffsets, Lucene80DocValuesFormat.META_CODEC + \"FilePointers\", Lucene80DocValuesFormat.VERSION_CURRENT);\n+      } catch (Throwable exception) {\n+        IOUtils.closeWhileHandlingException(this); //self-close because constructor caller can't \n+        throw exception;\n+      }\n     }\n-    assert numDocsWithField <= maxDoc;\n-    meta.writeLong(data.getFilePointer() - start); // dataLength\n \n-    if (numDocsWithField == 0) {\n-      meta.writeLong(-2); // docsWithFieldOffset\n-      meta.writeLong(0L); // docsWithFieldLength\n-      meta.writeShort((short) -1); // jumpTableEntryCount\n-      meta.writeByte((byte) -1);   // denseRankPower\n-    } else if (numDocsWithField == maxDoc) {\n-      meta.writeLong(-1); // docsWithFieldOffset\n-      meta.writeLong(0L); // docsWithFieldLength\n-      meta.writeShort((short) -1); // jumpTableEntryCount\n-      meta.writeByte((byte) -1);   // denseRankPower\n-    } else {\n-      long offset = data.getFilePointer();\n-      meta.writeLong(offset); // docsWithFieldOffset\n-      values = valuesProducer.getBinary(field);\n-      final short jumpTableEntryCount = IndexedDISI.writeBitSet(values, data, IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n-      meta.writeLong(data.getFilePointer() - offset); // docsWithFieldLength\n-      meta.writeShort(jumpTableEntryCount);\n-      meta.writeByte(IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n+    void addDoc(int doc, BytesRef v) throws IOException {\n+      if (blockAddressesStart < 0) {\n+        blockAddressesStart = data.getFilePointer();\n+      }\n+      docLengths[numDocsInCurrentBlock] = v.length;\n+      block = ArrayUtil.grow(block, uncompressedBlockLength + v.length);\n+      System.arraycopy(v.bytes, v.offset, block, uncompressedBlockLength, v.length);\n+      uncompressedBlockLength += v.length;\n+      numDocsInCurrentBlock++;\n+      if (numDocsInCurrentBlock == Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK) {\n+        flushData();\n+      }      \n     }\n \n-    meta.writeInt(numDocsWithField);\n-    meta.writeInt(minLength);\n-    meta.writeInt(maxLength);\n-    if (maxLength > minLength) {\n-      start = data.getFilePointer();\n-      meta.writeLong(start);\n+    private void flushData() throws IOException {\n+      if (numDocsInCurrentBlock > 0) {\n+        // Write offset to this block to temporary offsets file\n+        totalChunks++;\n+        long thisBlockStartPointer = data.getFilePointer();\n+        data.writeVInt(numDocsInCurrentBlock);\n+        for (int i = 0; i < numDocsInCurrentBlock; i++) {\n+          data.writeVInt(docLengths[i]);\n+        }\n+        maxUncompressedBlockLength = Math.max(maxUncompressedBlockLength, uncompressedBlockLength);\n+        LZ4.compress(block,  0, uncompressedBlockLength, data, ht);\n+        numDocsInCurrentBlock = 0;\n+        uncompressedBlockLength = 0;\n+        maxPointer = data.getFilePointer();\n+        tempBinaryOffsets.writeVLong(maxPointer - thisBlockStartPointer);\n+      }\n+    }\n+    \n+    void writeMetaData() throws IOException {\n+      if (blockAddressesStart < 0 ) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI3ODMyMw=="}, "originalCommit": {"oid": "1569fe08c8bb219df45927b102c2cbe080a43b31"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI5OTM4MA==", "bodyText": "This makes sense, can you leave a comment about it?", "url": "https://github.com/apache/lucene-solr/pull/1234#discussion_r379299380", "createdAt": "2020-02-14T08:20:43Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "diffHunk": "@@ -353,67 +360,168 @@ private void writeBlock(long[] values, int length, long gcd, ByteBuffersDataOutp\n     }\n   }\n \n-  @Override\n-  public void addBinaryField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n-    meta.writeInt(field.number);\n-    meta.writeByte(Lucene80DocValuesFormat.BINARY);\n-\n-    BinaryDocValues values = valuesProducer.getBinary(field);\n-    long start = data.getFilePointer();\n-    meta.writeLong(start); // dataOffset\n-    int numDocsWithField = 0;\n-    int minLength = Integer.MAX_VALUE;\n-    int maxLength = 0;\n-    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n-      numDocsWithField++;\n-      BytesRef v = values.binaryValue();\n-      int length = v.length;\n-      data.writeBytes(v.bytes, v.offset, v.length);\n-      minLength = Math.min(length, minLength);\n-      maxLength = Math.max(length, maxLength);\n+  class CompressedBinaryBlockWriter implements Closeable {\n+    FastCompressionHashTable ht = new LZ4.FastCompressionHashTable();    \n+    int uncompressedBlockLength = 0;\n+    int maxUncompressedBlockLength = 0;\n+    int numDocsInCurrentBlock = 0;\n+    int [] docLengths = new int[Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK]; \n+    byte [] block = new byte [1024 * 16];\n+    int totalChunks = 0;\n+    long maxPointer = 0;\n+    long blockAddressesStart = -1; \n+\n+    private IndexOutput tempBinaryOffsets;\n+    \n+    \n+    public CompressedBinaryBlockWriter() throws IOException {\n+      tempBinaryOffsets = state.directory.createTempOutput(state.segmentInfo.name, \"binary_pointers\", state.context);\n+      try {\n+        CodecUtil.writeHeader(tempBinaryOffsets, Lucene80DocValuesFormat.META_CODEC + \"FilePointers\", Lucene80DocValuesFormat.VERSION_CURRENT);\n+      } catch (Throwable exception) {\n+        IOUtils.closeWhileHandlingException(this); //self-close because constructor caller can't \n+        throw exception;\n+      }\n     }\n-    assert numDocsWithField <= maxDoc;\n-    meta.writeLong(data.getFilePointer() - start); // dataLength\n \n-    if (numDocsWithField == 0) {\n-      meta.writeLong(-2); // docsWithFieldOffset\n-      meta.writeLong(0L); // docsWithFieldLength\n-      meta.writeShort((short) -1); // jumpTableEntryCount\n-      meta.writeByte((byte) -1);   // denseRankPower\n-    } else if (numDocsWithField == maxDoc) {\n-      meta.writeLong(-1); // docsWithFieldOffset\n-      meta.writeLong(0L); // docsWithFieldLength\n-      meta.writeShort((short) -1); // jumpTableEntryCount\n-      meta.writeByte((byte) -1);   // denseRankPower\n-    } else {\n-      long offset = data.getFilePointer();\n-      meta.writeLong(offset); // docsWithFieldOffset\n-      values = valuesProducer.getBinary(field);\n-      final short jumpTableEntryCount = IndexedDISI.writeBitSet(values, data, IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n-      meta.writeLong(data.getFilePointer() - offset); // docsWithFieldLength\n-      meta.writeShort(jumpTableEntryCount);\n-      meta.writeByte(IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n+    void addDoc(int doc, BytesRef v) throws IOException {\n+      if (blockAddressesStart < 0) {\n+        blockAddressesStart = data.getFilePointer();\n+      }\n+      docLengths[numDocsInCurrentBlock] = v.length;\n+      block = ArrayUtil.grow(block, uncompressedBlockLength + v.length);\n+      System.arraycopy(v.bytes, v.offset, block, uncompressedBlockLength, v.length);\n+      uncompressedBlockLength += v.length;\n+      numDocsInCurrentBlock++;\n+      if (numDocsInCurrentBlock == Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK) {\n+        flushData();\n+      }      \n     }\n \n-    meta.writeInt(numDocsWithField);\n-    meta.writeInt(minLength);\n-    meta.writeInt(maxLength);\n-    if (maxLength > minLength) {\n-      start = data.getFilePointer();\n-      meta.writeLong(start);\n+    private void flushData() throws IOException {\n+      if (numDocsInCurrentBlock > 0) {\n+        // Write offset to this block to temporary offsets file\n+        totalChunks++;\n+        long thisBlockStartPointer = data.getFilePointer();\n+        data.writeVInt(numDocsInCurrentBlock);\n+        for (int i = 0; i < numDocsInCurrentBlock; i++) {\n+          data.writeVInt(docLengths[i]);\n+        }\n+        maxUncompressedBlockLength = Math.max(maxUncompressedBlockLength, uncompressedBlockLength);\n+        LZ4.compress(block,  0, uncompressedBlockLength, data, ht);\n+        numDocsInCurrentBlock = 0;\n+        uncompressedBlockLength = 0;\n+        maxPointer = data.getFilePointer();\n+        tempBinaryOffsets.writeVLong(maxPointer - thisBlockStartPointer);\n+      }\n+    }\n+    \n+    void writeMetaData() throws IOException {\n+      if (blockAddressesStart < 0 ) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI3ODMyMw=="}, "originalCommit": {"oid": "1569fe08c8bb219df45927b102c2cbe080a43b31"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNDQ2NDE5OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMzoxODoxOFrOFmarkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMzoxODoxOFrOFmarkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgyNzM0Ng==", "bodyText": "we could initialize uncompressedBytesRef from the uncompressed block:\nuncompressedBytesRef = new BytesRef(uncompressedBlock)\nand avoid creating new BytesRefs over and over in decode", "url": "https://github.com/apache/lucene-solr/pull/1234#discussion_r375827346", "createdAt": "2020-02-06T13:18:18Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer.java", "diffHunk": "@@ -742,6 +755,107 @@ public BytesRef binaryValue() throws IOException {\n         };\n       }\n     }\n+  }  \n+  \n+  // Decompresses blocks of binary values to retrieve content\n+  class BinaryDecoder {\n+    \n+    private final LongValues addresses;\n+    private final IndexInput compressedData;\n+    // Cache of last uncompressed block \n+    private long lastBlockId = -1;\n+    private int []uncompressedDocEnds = new int[Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK];\n+    private int uncompressedBlockLength = 0;        \n+    private int numDocsInBlock = 0;\n+    private final byte[] uncompressedBlock;\n+    private BytesRef uncompressedBytesRef;\n+    \n+    public BinaryDecoder(LongValues addresses, IndexInput compressedData, int biggestUncompressedBlockSize) {\n+      super();\n+      this.addresses = addresses;\n+      this.compressedData = compressedData;\n+      // pre-allocate a byte array large enough for the biggest uncompressed block needed.\n+      this.uncompressedBlock = new byte[biggestUncompressedBlockSize];\n+      ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1569fe08c8bb219df45927b102c2cbe080a43b31"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODkyNzIwOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxODowMjoxNFrOFnFbiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxODowMjoxNFrOFnFbiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUyNzc1Mw==", "bodyText": "maybe we could call it uncompressedDocStarts and set the index at i+1 which would then help below to remove the else block of the docInBlockId > 0 condition below?", "url": "https://github.com/apache/lucene-solr/pull/1234#discussion_r376527753", "createdAt": "2020-02-07T18:02:14Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer.java", "diffHunk": "@@ -742,6 +755,131 @@ public BytesRef binaryValue() throws IOException {\n         };\n       }\n     }\n+  }  \n+  \n+  // Decompresses blocks of binary values to retrieve content\n+  class BinaryDecoder {\n+    \n+    private final LongValues addresses;\n+    private final IndexInput compressedData;\n+    // Cache of last uncompressed block \n+    private long lastBlockId = -1;\n+    private int []uncompressedDocEnds = new int[Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK];\n+    private int uncompressedBlockLength = 0;        \n+    private int numDocsInBlock = 0;\n+    private final byte[] uncompressedBlock;\n+    private final BytesRef uncompressedBytesRef;\n+    \n+    public BinaryDecoder(LongValues addresses, IndexInput compressedData, int biggestUncompressedBlockSize) {\n+      super();\n+      this.addresses = addresses;\n+      this.compressedData = compressedData;\n+      // pre-allocate a byte array large enough for the biggest uncompressed block needed.\n+      this.uncompressedBlock = new byte[biggestUncompressedBlockSize];\n+      uncompressedBytesRef = new BytesRef(uncompressedBlock);\n+      \n+    }\n+\n+    BytesRef decode(int docNumber) throws IOException {\n+      int blockId = docNumber >> Lucene80DocValuesFormat.BINARY_BLOCK_SHIFT; \n+      int docInBlockId = docNumber % Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK;\n+      assert docInBlockId < Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK;\n+      \n+      \n+      // already read and uncompressed?\n+      if (blockId != lastBlockId) {\n+        lastBlockId = blockId;\n+        long blockStartOffset = addresses.get(blockId);\n+        compressedData.seek(blockStartOffset);\n+        \n+        numDocsInBlock = compressedData.readVInt();\n+        assert numDocsInBlock <= Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK;\n+        uncompressedDocEnds = new int[numDocsInBlock];\n+        uncompressedBlockLength = 0;        \n+\n+        int onlyLength = -1;\n+        for (int i = 0; i < numDocsInBlock; i++) {\n+          if (i == 0) {\n+            // The first length value is special. It is shifted and has a bit to denote if\n+            // all other values are the same length\n+            int lengthPlusSameInd = compressedData.readVInt();\n+            int sameIndicator = lengthPlusSameInd & 1;\n+            int firstValLength = lengthPlusSameInd >>1;\n+            if (sameIndicator == 1) {\n+              onlyLength = firstValLength;\n+            }\n+            uncompressedBlockLength += firstValLength;            \n+          } else {\n+            if (onlyLength == -1) {\n+              // Various lengths are stored - read each from disk\n+              uncompressedBlockLength += compressedData.readVInt();            \n+            } else {\n+              // Only one length \n+              uncompressedBlockLength += onlyLength;\n+            }\n+          }\n+          uncompressedDocEnds[i] = uncompressedBlockLength;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8892d7fead3135f7b5c161095d69a7bf64745c0d"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODkyOTg1OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxODowMzoxNVrOFnFdKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxODowMzoxNVrOFnFdKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUyODE2OQ==", "bodyText": "do we really need to record the number of documents in the block? It should be 32 for all blocks except for the last one? Maybe at index-time we could append dummy values to the last block to make sure it has 32 values too, and we wouldn't need this vInt anymore?", "url": "https://github.com/apache/lucene-solr/pull/1234#discussion_r376528169", "createdAt": "2020-02-07T18:03:15Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer.java", "diffHunk": "@@ -742,6 +755,131 @@ public BytesRef binaryValue() throws IOException {\n         };\n       }\n     }\n+  }  \n+  \n+  // Decompresses blocks of binary values to retrieve content\n+  class BinaryDecoder {\n+    \n+    private final LongValues addresses;\n+    private final IndexInput compressedData;\n+    // Cache of last uncompressed block \n+    private long lastBlockId = -1;\n+    private int []uncompressedDocEnds = new int[Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK];\n+    private int uncompressedBlockLength = 0;        \n+    private int numDocsInBlock = 0;\n+    private final byte[] uncompressedBlock;\n+    private final BytesRef uncompressedBytesRef;\n+    \n+    public BinaryDecoder(LongValues addresses, IndexInput compressedData, int biggestUncompressedBlockSize) {\n+      super();\n+      this.addresses = addresses;\n+      this.compressedData = compressedData;\n+      // pre-allocate a byte array large enough for the biggest uncompressed block needed.\n+      this.uncompressedBlock = new byte[biggestUncompressedBlockSize];\n+      uncompressedBytesRef = new BytesRef(uncompressedBlock);\n+      \n+    }\n+\n+    BytesRef decode(int docNumber) throws IOException {\n+      int blockId = docNumber >> Lucene80DocValuesFormat.BINARY_BLOCK_SHIFT; \n+      int docInBlockId = docNumber % Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK;\n+      assert docInBlockId < Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK;\n+      \n+      \n+      // already read and uncompressed?\n+      if (blockId != lastBlockId) {\n+        lastBlockId = blockId;\n+        long blockStartOffset = addresses.get(blockId);\n+        compressedData.seek(blockStartOffset);\n+        \n+        numDocsInBlock = compressedData.readVInt();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8892d7fead3135f7b5c161095d69a7bf64745c0d"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODkzNjI5OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxODowNTo0NVrOFnFhKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxODowNTo0NVrOFnFhKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUyOTE5NQ==", "bodyText": "Since you are stealing a bit, we should do an unsigned shift (>>>) instead.\nThis would never be a problem in practice, but imagine than the length was a 31-bits integer. Shifting by one bit on the left at index time would make this number negative. So here we need an unsigned shift rather than a signed shift that preserves the sign.", "url": "https://github.com/apache/lucene-solr/pull/1234#discussion_r376529195", "createdAt": "2020-02-07T18:05:45Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer.java", "diffHunk": "@@ -742,6 +755,131 @@ public BytesRef binaryValue() throws IOException {\n         };\n       }\n     }\n+  }  \n+  \n+  // Decompresses blocks of binary values to retrieve content\n+  class BinaryDecoder {\n+    \n+    private final LongValues addresses;\n+    private final IndexInput compressedData;\n+    // Cache of last uncompressed block \n+    private long lastBlockId = -1;\n+    private int []uncompressedDocEnds = new int[Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK];\n+    private int uncompressedBlockLength = 0;        \n+    private int numDocsInBlock = 0;\n+    private final byte[] uncompressedBlock;\n+    private final BytesRef uncompressedBytesRef;\n+    \n+    public BinaryDecoder(LongValues addresses, IndexInput compressedData, int biggestUncompressedBlockSize) {\n+      super();\n+      this.addresses = addresses;\n+      this.compressedData = compressedData;\n+      // pre-allocate a byte array large enough for the biggest uncompressed block needed.\n+      this.uncompressedBlock = new byte[biggestUncompressedBlockSize];\n+      uncompressedBytesRef = new BytesRef(uncompressedBlock);\n+      \n+    }\n+\n+    BytesRef decode(int docNumber) throws IOException {\n+      int blockId = docNumber >> Lucene80DocValuesFormat.BINARY_BLOCK_SHIFT; \n+      int docInBlockId = docNumber % Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK;\n+      assert docInBlockId < Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK;\n+      \n+      \n+      // already read and uncompressed?\n+      if (blockId != lastBlockId) {\n+        lastBlockId = blockId;\n+        long blockStartOffset = addresses.get(blockId);\n+        compressedData.seek(blockStartOffset);\n+        \n+        numDocsInBlock = compressedData.readVInt();\n+        assert numDocsInBlock <= Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK;\n+        uncompressedDocEnds = new int[numDocsInBlock];\n+        uncompressedBlockLength = 0;        \n+\n+        int onlyLength = -1;\n+        for (int i = 0; i < numDocsInBlock; i++) {\n+          if (i == 0) {\n+            // The first length value is special. It is shifted and has a bit to denote if\n+            // all other values are the same length\n+            int lengthPlusSameInd = compressedData.readVInt();\n+            int sameIndicator = lengthPlusSameInd & 1;\n+            int firstValLength = lengthPlusSameInd >>1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8892d7fead3135f7b5c161095d69a7bf64745c0d"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODk1MzM0OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxODoxMjoxMlrOFnFr8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMTozMTo0M1rOFoFppw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUzMTk1Mg==", "bodyText": "in the past we've put these constants in the meta file and BinaryEntry so that it's easier to change values over time", "url": "https://github.com/apache/lucene-solr/pull/1234#discussion_r376531952", "createdAt": "2020-02-07T18:12:12Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer.java", "diffHunk": "@@ -742,6 +755,131 @@ public BytesRef binaryValue() throws IOException {\n         };\n       }\n     }\n+  }  \n+  \n+  // Decompresses blocks of binary values to retrieve content\n+  class BinaryDecoder {\n+    \n+    private final LongValues addresses;\n+    private final IndexInput compressedData;\n+    // Cache of last uncompressed block \n+    private long lastBlockId = -1;\n+    private int []uncompressedDocEnds = new int[Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8892d7fead3135f7b5c161095d69a7bf64745c0d"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU3OTk0Mw==", "bodyText": "@jpountz we should use the same structure while writing the data, in that case you will see all the properties of the class instead of adding comments in the code", "url": "https://github.com/apache/lucene-solr/pull/1234#discussion_r377579943", "createdAt": "2020-02-11T11:31:43Z", "author": {"login": "juanka588"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer.java", "diffHunk": "@@ -742,6 +755,131 @@ public BytesRef binaryValue() throws IOException {\n         };\n       }\n     }\n+  }  \n+  \n+  // Decompresses blocks of binary values to retrieve content\n+  class BinaryDecoder {\n+    \n+    private final LongValues addresses;\n+    private final IndexInput compressedData;\n+    // Cache of last uncompressed block \n+    private long lastBlockId = -1;\n+    private int []uncompressedDocEnds = new int[Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUzMTk1Mg=="}, "originalCommit": {"oid": "8892d7fead3135f7b5c161095d69a7bf64745c0d"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODk1NDc2OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxODoxMjo0NlrOFnFs3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxODoxMjo0NlrOFnFs3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUzMjE4OQ==", "bodyText": "can we reuse the same array across blocks?", "url": "https://github.com/apache/lucene-solr/pull/1234#discussion_r376532189", "createdAt": "2020-02-07T18:12:46Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer.java", "diffHunk": "@@ -742,6 +755,131 @@ public BytesRef binaryValue() throws IOException {\n         };\n       }\n     }\n+  }  \n+  \n+  // Decompresses blocks of binary values to retrieve content\n+  class BinaryDecoder {\n+    \n+    private final LongValues addresses;\n+    private final IndexInput compressedData;\n+    // Cache of last uncompressed block \n+    private long lastBlockId = -1;\n+    private int []uncompressedDocEnds = new int[Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK];\n+    private int uncompressedBlockLength = 0;        \n+    private int numDocsInBlock = 0;\n+    private final byte[] uncompressedBlock;\n+    private final BytesRef uncompressedBytesRef;\n+    \n+    public BinaryDecoder(LongValues addresses, IndexInput compressedData, int biggestUncompressedBlockSize) {\n+      super();\n+      this.addresses = addresses;\n+      this.compressedData = compressedData;\n+      // pre-allocate a byte array large enough for the biggest uncompressed block needed.\n+      this.uncompressedBlock = new byte[biggestUncompressedBlockSize];\n+      uncompressedBytesRef = new BytesRef(uncompressedBlock);\n+      \n+    }\n+\n+    BytesRef decode(int docNumber) throws IOException {\n+      int blockId = docNumber >> Lucene80DocValuesFormat.BINARY_BLOCK_SHIFT; \n+      int docInBlockId = docNumber % Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK;\n+      assert docInBlockId < Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK;\n+      \n+      \n+      // already read and uncompressed?\n+      if (blockId != lastBlockId) {\n+        lastBlockId = blockId;\n+        long blockStartOffset = addresses.get(blockId);\n+        compressedData.seek(blockStartOffset);\n+        \n+        numDocsInBlock = compressedData.readVInt();\n+        assert numDocsInBlock <= Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK;\n+        uncompressedDocEnds = new int[numDocsInBlock];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8892d7fead3135f7b5c161095d69a7bf64745c0d"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTY3OTY3OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMDoxODowNFrOFoDfHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMzowNToyOFrOFoIKCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU0NDQ3OA==", "bodyText": "I think we should use the BinaryEntry object here, and the just make the object \"Writable\" to a given DataOutput and \"Readable\" from a DataInput (which is already the case: readBinaryEntry). This will avoid the comments in the code -2 == docsWithFieldOffset etc.", "url": "https://github.com/apache/lucene-solr/pull/1234#discussion_r377544478", "createdAt": "2020-02-11T10:18:04Z", "author": {"login": "juanka588"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "diffHunk": "@@ -353,67 +360,193 @@ private void writeBlock(long[] values, int length, long gcd, ByteBuffersDataOutp\n     }\n   }\n \n-  @Override\n-  public void addBinaryField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n-    meta.writeInt(field.number);\n-    meta.writeByte(Lucene80DocValuesFormat.BINARY);\n-\n-    BinaryDocValues values = valuesProducer.getBinary(field);\n-    long start = data.getFilePointer();\n-    meta.writeLong(start); // dataOffset\n-    int numDocsWithField = 0;\n-    int minLength = Integer.MAX_VALUE;\n-    int maxLength = 0;\n-    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n-      numDocsWithField++;\n-      BytesRef v = values.binaryValue();\n-      int length = v.length;\n-      data.writeBytes(v.bytes, v.offset, v.length);\n-      minLength = Math.min(length, minLength);\n-      maxLength = Math.max(length, maxLength);\n+  class CompressedBinaryBlockWriter implements Closeable {\n+    FastCompressionHashTable ht = new LZ4.FastCompressionHashTable();    \n+    int uncompressedBlockLength = 0;\n+    int maxUncompressedBlockLength = 0;\n+    int numDocsInCurrentBlock = 0;\n+    int[] docLengths = new int[Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK]; \n+    byte[] block = new byte [1024 * 16];\n+    int totalChunks = 0;\n+    long maxPointer = 0;\n+    long blockAddressesStart = -1; \n+\n+    private IndexOutput tempBinaryOffsets;\n+    \n+    \n+    public CompressedBinaryBlockWriter() throws IOException {\n+      tempBinaryOffsets = state.directory.createTempOutput(state.segmentInfo.name, \"binary_pointers\", state.context);\n+      boolean success = false;\n+      try {\n+        CodecUtil.writeHeader(tempBinaryOffsets, Lucene80DocValuesFormat.META_CODEC + \"FilePointers\", Lucene80DocValuesFormat.VERSION_CURRENT);\n+        success = true;\n+      } finally {\n+        if (success == false) {\n+          IOUtils.closeWhileHandlingException(this); //self-close because constructor caller can't \n+        }\n+      }\n     }\n-    assert numDocsWithField <= maxDoc;\n-    meta.writeLong(data.getFilePointer() - start); // dataLength\n \n-    if (numDocsWithField == 0) {\n-      meta.writeLong(-2); // docsWithFieldOffset\n-      meta.writeLong(0L); // docsWithFieldLength\n-      meta.writeShort((short) -1); // jumpTableEntryCount\n-      meta.writeByte((byte) -1);   // denseRankPower\n-    } else if (numDocsWithField == maxDoc) {\n-      meta.writeLong(-1); // docsWithFieldOffset\n-      meta.writeLong(0L); // docsWithFieldLength\n-      meta.writeShort((short) -1); // jumpTableEntryCount\n-      meta.writeByte((byte) -1);   // denseRankPower\n-    } else {\n-      long offset = data.getFilePointer();\n-      meta.writeLong(offset); // docsWithFieldOffset\n-      values = valuesProducer.getBinary(field);\n-      final short jumpTableEntryCount = IndexedDISI.writeBitSet(values, data, IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n-      meta.writeLong(data.getFilePointer() - offset); // docsWithFieldLength\n-      meta.writeShort(jumpTableEntryCount);\n-      meta.writeByte(IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n+    void addDoc(int doc, BytesRef v) throws IOException {\n+      if (blockAddressesStart < 0) {\n+        blockAddressesStart = data.getFilePointer();\n+      }\n+      docLengths[numDocsInCurrentBlock] = v.length;\n+      block = ArrayUtil.grow(block, uncompressedBlockLength + v.length);\n+      System.arraycopy(v.bytes, v.offset, block, uncompressedBlockLength, v.length);\n+      uncompressedBlockLength += v.length;\n+      numDocsInCurrentBlock++;\n+      if (numDocsInCurrentBlock == Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK) {\n+        flushData();\n+      }      \n     }\n \n-    meta.writeInt(numDocsWithField);\n-    meta.writeInt(minLength);\n-    meta.writeInt(maxLength);\n-    if (maxLength > minLength) {\n-      start = data.getFilePointer();\n-      meta.writeLong(start);\n+    private void flushData() throws IOException {\n+      if (numDocsInCurrentBlock > 0) {\n+        // Write offset to this block to temporary offsets file\n+        totalChunks++;\n+        long thisBlockStartPointer = data.getFilePointer();\n+        \n+        // Optimisation - check if all lengths are same\n+        boolean allLengthsSame = true && numDocsInCurrentBlock >0  ;\n+        for (int i = 0; i < Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK && allLengthsSame; i++) {\n+          if (i > 0 && docLengths[i] != docLengths[i-1]) {\n+            allLengthsSame = false;\n+          }\n+        }\n+        if (allLengthsSame) {\n+            // Only write one value shifted. Steal a bit to indicate all other lengths are the same\n+            int onlyOneLength = (docLengths[0] <<1) | 1;\n+            data.writeVInt(onlyOneLength);\n+        } else {\n+          for (int i = 0; i < Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK; i++) {\n+            if(i == 0) {\n+              // Write first value shifted and steal a bit to indicate other lengths are to follow\n+              int multipleLengths = (docLengths[0] <<1);\n+              data.writeVInt(multipleLengths);              \n+            } else {\n+              data.writeVInt(docLengths[i]);\n+            }\n+          }\n+        }\n+        maxUncompressedBlockLength = Math.max(maxUncompressedBlockLength, uncompressedBlockLength);\n+        LZ4.compress(block, 0, uncompressedBlockLength, data, ht);\n+        numDocsInCurrentBlock = 0;\n+        // Ensure initialized with zeroes because full array is always written\n+        Arrays.fill(docLengths, 0);\n+        uncompressedBlockLength = 0;\n+        maxPointer = data.getFilePointer();\n+        tempBinaryOffsets.writeVLong(maxPointer - thisBlockStartPointer);\n+      }\n+    }\n+    \n+    void writeMetaData() throws IOException {\n+      if (blockAddressesStart < 0 ) {\n+        return;\n+      }\n+      \n+      long startDMW = data.getFilePointer();\n+      meta.writeLong(startDMW);\n+      \n+      meta.writeVInt(totalChunks);\n+      meta.writeVInt(Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK);\n+      meta.writeVInt(maxUncompressedBlockLength);\n       meta.writeVInt(DIRECT_MONOTONIC_BLOCK_SHIFT);\n+      \n+    \n+      CodecUtil.writeFooter(tempBinaryOffsets);\n+      IOUtils.close(tempBinaryOffsets);             \n+      //write the compressed block offsets info to the meta file by reading from temp file\n+      try (ChecksumIndexInput filePointersIn = state.directory.openChecksumInput(tempBinaryOffsets.getName(), IOContext.READONCE)) {\n+        CodecUtil.checkHeader(filePointersIn, Lucene80DocValuesFormat.META_CODEC + \"FilePointers\", Lucene80DocValuesFormat.VERSION_CURRENT,\n+          Lucene80DocValuesFormat.VERSION_CURRENT);\n+        Throwable priorE = null;\n+        try {\n+          final DirectMonotonicWriter filePointers = DirectMonotonicWriter.getInstance(meta, data, totalChunks, DIRECT_MONOTONIC_BLOCK_SHIFT);\n+          long fp = blockAddressesStart;\n+          for (int i = 0; i < totalChunks; ++i) {\n+            filePointers.add(fp);\n+            fp += filePointersIn.readVLong();\n+          }\n+          if (maxPointer < fp) {\n+            throw new CorruptIndexException(\"File pointers don't add up (\"+fp+\" vs expected \"+maxPointer+\")\", filePointersIn);\n+          }\n+          filePointers.finish();\n+        } catch (Throwable e) {\n+          priorE = e;\n+        } finally {\n+          CodecUtil.checkFooter(filePointersIn, priorE);\n+        }\n+      }\n+      // Write the length of the DMW block in the data \n+      meta.writeLong(data.getFilePointer() - startDMW);\n+    }\n \n-      final DirectMonotonicWriter writer = DirectMonotonicWriter.getInstance(meta, data, numDocsWithField + 1, DIRECT_MONOTONIC_BLOCK_SHIFT);\n-      long addr = 0;\n-      writer.add(addr);\n-      values = valuesProducer.getBinary(field);\n+    @Override\n+    public void close() throws IOException {\n+      if (tempBinaryOffsets != null) {\n+        IOUtils.close(tempBinaryOffsets);             \n+        state.directory.deleteFile(tempBinaryOffsets.getName());\n+        tempBinaryOffsets = null;\n+      }\n+    }\n+    \n+  }\n+  \n+\n+  @Override\n+  public void addBinaryField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n+    meta.writeInt(field.number);\n+    meta.writeByte(Lucene80DocValuesFormat.BINARY);\n+\n+    try (CompressedBinaryBlockWriter blockWriter = new CompressedBinaryBlockWriter()){\n+      BinaryDocValues values = valuesProducer.getBinary(field);\n+      long start = data.getFilePointer();\n+      meta.writeLong(start); // dataOffset", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1048ba517469b8523bab7de91c10922b1c35575"}, "originalPosition": 234}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYyMTAwMw==", "bodyText": "I like the idea but would prefer doing it in a separate PR.", "url": "https://github.com/apache/lucene-solr/pull/1234#discussion_r377621003", "createdAt": "2020-02-11T13:05:28Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "diffHunk": "@@ -353,67 +360,193 @@ private void writeBlock(long[] values, int length, long gcd, ByteBuffersDataOutp\n     }\n   }\n \n-  @Override\n-  public void addBinaryField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n-    meta.writeInt(field.number);\n-    meta.writeByte(Lucene80DocValuesFormat.BINARY);\n-\n-    BinaryDocValues values = valuesProducer.getBinary(field);\n-    long start = data.getFilePointer();\n-    meta.writeLong(start); // dataOffset\n-    int numDocsWithField = 0;\n-    int minLength = Integer.MAX_VALUE;\n-    int maxLength = 0;\n-    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n-      numDocsWithField++;\n-      BytesRef v = values.binaryValue();\n-      int length = v.length;\n-      data.writeBytes(v.bytes, v.offset, v.length);\n-      minLength = Math.min(length, minLength);\n-      maxLength = Math.max(length, maxLength);\n+  class CompressedBinaryBlockWriter implements Closeable {\n+    FastCompressionHashTable ht = new LZ4.FastCompressionHashTable();    \n+    int uncompressedBlockLength = 0;\n+    int maxUncompressedBlockLength = 0;\n+    int numDocsInCurrentBlock = 0;\n+    int[] docLengths = new int[Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK]; \n+    byte[] block = new byte [1024 * 16];\n+    int totalChunks = 0;\n+    long maxPointer = 0;\n+    long blockAddressesStart = -1; \n+\n+    private IndexOutput tempBinaryOffsets;\n+    \n+    \n+    public CompressedBinaryBlockWriter() throws IOException {\n+      tempBinaryOffsets = state.directory.createTempOutput(state.segmentInfo.name, \"binary_pointers\", state.context);\n+      boolean success = false;\n+      try {\n+        CodecUtil.writeHeader(tempBinaryOffsets, Lucene80DocValuesFormat.META_CODEC + \"FilePointers\", Lucene80DocValuesFormat.VERSION_CURRENT);\n+        success = true;\n+      } finally {\n+        if (success == false) {\n+          IOUtils.closeWhileHandlingException(this); //self-close because constructor caller can't \n+        }\n+      }\n     }\n-    assert numDocsWithField <= maxDoc;\n-    meta.writeLong(data.getFilePointer() - start); // dataLength\n \n-    if (numDocsWithField == 0) {\n-      meta.writeLong(-2); // docsWithFieldOffset\n-      meta.writeLong(0L); // docsWithFieldLength\n-      meta.writeShort((short) -1); // jumpTableEntryCount\n-      meta.writeByte((byte) -1);   // denseRankPower\n-    } else if (numDocsWithField == maxDoc) {\n-      meta.writeLong(-1); // docsWithFieldOffset\n-      meta.writeLong(0L); // docsWithFieldLength\n-      meta.writeShort((short) -1); // jumpTableEntryCount\n-      meta.writeByte((byte) -1);   // denseRankPower\n-    } else {\n-      long offset = data.getFilePointer();\n-      meta.writeLong(offset); // docsWithFieldOffset\n-      values = valuesProducer.getBinary(field);\n-      final short jumpTableEntryCount = IndexedDISI.writeBitSet(values, data, IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n-      meta.writeLong(data.getFilePointer() - offset); // docsWithFieldLength\n-      meta.writeShort(jumpTableEntryCount);\n-      meta.writeByte(IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n+    void addDoc(int doc, BytesRef v) throws IOException {\n+      if (blockAddressesStart < 0) {\n+        blockAddressesStart = data.getFilePointer();\n+      }\n+      docLengths[numDocsInCurrentBlock] = v.length;\n+      block = ArrayUtil.grow(block, uncompressedBlockLength + v.length);\n+      System.arraycopy(v.bytes, v.offset, block, uncompressedBlockLength, v.length);\n+      uncompressedBlockLength += v.length;\n+      numDocsInCurrentBlock++;\n+      if (numDocsInCurrentBlock == Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK) {\n+        flushData();\n+      }      \n     }\n \n-    meta.writeInt(numDocsWithField);\n-    meta.writeInt(minLength);\n-    meta.writeInt(maxLength);\n-    if (maxLength > minLength) {\n-      start = data.getFilePointer();\n-      meta.writeLong(start);\n+    private void flushData() throws IOException {\n+      if (numDocsInCurrentBlock > 0) {\n+        // Write offset to this block to temporary offsets file\n+        totalChunks++;\n+        long thisBlockStartPointer = data.getFilePointer();\n+        \n+        // Optimisation - check if all lengths are same\n+        boolean allLengthsSame = true && numDocsInCurrentBlock >0  ;\n+        for (int i = 0; i < Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK && allLengthsSame; i++) {\n+          if (i > 0 && docLengths[i] != docLengths[i-1]) {\n+            allLengthsSame = false;\n+          }\n+        }\n+        if (allLengthsSame) {\n+            // Only write one value shifted. Steal a bit to indicate all other lengths are the same\n+            int onlyOneLength = (docLengths[0] <<1) | 1;\n+            data.writeVInt(onlyOneLength);\n+        } else {\n+          for (int i = 0; i < Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK; i++) {\n+            if(i == 0) {\n+              // Write first value shifted and steal a bit to indicate other lengths are to follow\n+              int multipleLengths = (docLengths[0] <<1);\n+              data.writeVInt(multipleLengths);              \n+            } else {\n+              data.writeVInt(docLengths[i]);\n+            }\n+          }\n+        }\n+        maxUncompressedBlockLength = Math.max(maxUncompressedBlockLength, uncompressedBlockLength);\n+        LZ4.compress(block, 0, uncompressedBlockLength, data, ht);\n+        numDocsInCurrentBlock = 0;\n+        // Ensure initialized with zeroes because full array is always written\n+        Arrays.fill(docLengths, 0);\n+        uncompressedBlockLength = 0;\n+        maxPointer = data.getFilePointer();\n+        tempBinaryOffsets.writeVLong(maxPointer - thisBlockStartPointer);\n+      }\n+    }\n+    \n+    void writeMetaData() throws IOException {\n+      if (blockAddressesStart < 0 ) {\n+        return;\n+      }\n+      \n+      long startDMW = data.getFilePointer();\n+      meta.writeLong(startDMW);\n+      \n+      meta.writeVInt(totalChunks);\n+      meta.writeVInt(Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK);\n+      meta.writeVInt(maxUncompressedBlockLength);\n       meta.writeVInt(DIRECT_MONOTONIC_BLOCK_SHIFT);\n+      \n+    \n+      CodecUtil.writeFooter(tempBinaryOffsets);\n+      IOUtils.close(tempBinaryOffsets);             \n+      //write the compressed block offsets info to the meta file by reading from temp file\n+      try (ChecksumIndexInput filePointersIn = state.directory.openChecksumInput(tempBinaryOffsets.getName(), IOContext.READONCE)) {\n+        CodecUtil.checkHeader(filePointersIn, Lucene80DocValuesFormat.META_CODEC + \"FilePointers\", Lucene80DocValuesFormat.VERSION_CURRENT,\n+          Lucene80DocValuesFormat.VERSION_CURRENT);\n+        Throwable priorE = null;\n+        try {\n+          final DirectMonotonicWriter filePointers = DirectMonotonicWriter.getInstance(meta, data, totalChunks, DIRECT_MONOTONIC_BLOCK_SHIFT);\n+          long fp = blockAddressesStart;\n+          for (int i = 0; i < totalChunks; ++i) {\n+            filePointers.add(fp);\n+            fp += filePointersIn.readVLong();\n+          }\n+          if (maxPointer < fp) {\n+            throw new CorruptIndexException(\"File pointers don't add up (\"+fp+\" vs expected \"+maxPointer+\")\", filePointersIn);\n+          }\n+          filePointers.finish();\n+        } catch (Throwable e) {\n+          priorE = e;\n+        } finally {\n+          CodecUtil.checkFooter(filePointersIn, priorE);\n+        }\n+      }\n+      // Write the length of the DMW block in the data \n+      meta.writeLong(data.getFilePointer() - startDMW);\n+    }\n \n-      final DirectMonotonicWriter writer = DirectMonotonicWriter.getInstance(meta, data, numDocsWithField + 1, DIRECT_MONOTONIC_BLOCK_SHIFT);\n-      long addr = 0;\n-      writer.add(addr);\n-      values = valuesProducer.getBinary(field);\n+    @Override\n+    public void close() throws IOException {\n+      if (tempBinaryOffsets != null) {\n+        IOUtils.close(tempBinaryOffsets);             \n+        state.directory.deleteFile(tempBinaryOffsets.getName());\n+        tempBinaryOffsets = null;\n+      }\n+    }\n+    \n+  }\n+  \n+\n+  @Override\n+  public void addBinaryField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n+    meta.writeInt(field.number);\n+    meta.writeByte(Lucene80DocValuesFormat.BINARY);\n+\n+    try (CompressedBinaryBlockWriter blockWriter = new CompressedBinaryBlockWriter()){\n+      BinaryDocValues values = valuesProducer.getBinary(field);\n+      long start = data.getFilePointer();\n+      meta.writeLong(start); // dataOffset", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU0NDQ3OA=="}, "originalCommit": {"oid": "b1048ba517469b8523bab7de91c10922b1c35575"}, "originalPosition": 234}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTY4ODk5OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMDoyMDo0MFrOFoDktQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMDoyMDo0MFrOFoDktQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU0NTkwOQ==", "bodyText": "Currently I'm working in a refactor of this code by having a doc id set iterator serializer capable to provide the correct instance based on the stored metadata. As you might see this is quite repetitive for the other fields", "url": "https://github.com/apache/lucene-solr/pull/1234#discussion_r377545909", "createdAt": "2020-02-11T10:20:40Z", "author": {"login": "juanka588"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "diffHunk": "@@ -353,67 +360,193 @@ private void writeBlock(long[] values, int length, long gcd, ByteBuffersDataOutp\n     }\n   }\n \n-  @Override\n-  public void addBinaryField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n-    meta.writeInt(field.number);\n-    meta.writeByte(Lucene80DocValuesFormat.BINARY);\n-\n-    BinaryDocValues values = valuesProducer.getBinary(field);\n-    long start = data.getFilePointer();\n-    meta.writeLong(start); // dataOffset\n-    int numDocsWithField = 0;\n-    int minLength = Integer.MAX_VALUE;\n-    int maxLength = 0;\n-    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n-      numDocsWithField++;\n-      BytesRef v = values.binaryValue();\n-      int length = v.length;\n-      data.writeBytes(v.bytes, v.offset, v.length);\n-      minLength = Math.min(length, minLength);\n-      maxLength = Math.max(length, maxLength);\n+  class CompressedBinaryBlockWriter implements Closeable {\n+    FastCompressionHashTable ht = new LZ4.FastCompressionHashTable();    \n+    int uncompressedBlockLength = 0;\n+    int maxUncompressedBlockLength = 0;\n+    int numDocsInCurrentBlock = 0;\n+    int[] docLengths = new int[Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK]; \n+    byte[] block = new byte [1024 * 16];\n+    int totalChunks = 0;\n+    long maxPointer = 0;\n+    long blockAddressesStart = -1; \n+\n+    private IndexOutput tempBinaryOffsets;\n+    \n+    \n+    public CompressedBinaryBlockWriter() throws IOException {\n+      tempBinaryOffsets = state.directory.createTempOutput(state.segmentInfo.name, \"binary_pointers\", state.context);\n+      boolean success = false;\n+      try {\n+        CodecUtil.writeHeader(tempBinaryOffsets, Lucene80DocValuesFormat.META_CODEC + \"FilePointers\", Lucene80DocValuesFormat.VERSION_CURRENT);\n+        success = true;\n+      } finally {\n+        if (success == false) {\n+          IOUtils.closeWhileHandlingException(this); //self-close because constructor caller can't \n+        }\n+      }\n     }\n-    assert numDocsWithField <= maxDoc;\n-    meta.writeLong(data.getFilePointer() - start); // dataLength\n \n-    if (numDocsWithField == 0) {\n-      meta.writeLong(-2); // docsWithFieldOffset\n-      meta.writeLong(0L); // docsWithFieldLength\n-      meta.writeShort((short) -1); // jumpTableEntryCount\n-      meta.writeByte((byte) -1);   // denseRankPower\n-    } else if (numDocsWithField == maxDoc) {\n-      meta.writeLong(-1); // docsWithFieldOffset\n-      meta.writeLong(0L); // docsWithFieldLength\n-      meta.writeShort((short) -1); // jumpTableEntryCount\n-      meta.writeByte((byte) -1);   // denseRankPower\n-    } else {\n-      long offset = data.getFilePointer();\n-      meta.writeLong(offset); // docsWithFieldOffset\n-      values = valuesProducer.getBinary(field);\n-      final short jumpTableEntryCount = IndexedDISI.writeBitSet(values, data, IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n-      meta.writeLong(data.getFilePointer() - offset); // docsWithFieldLength\n-      meta.writeShort(jumpTableEntryCount);\n-      meta.writeByte(IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n+    void addDoc(int doc, BytesRef v) throws IOException {\n+      if (blockAddressesStart < 0) {\n+        blockAddressesStart = data.getFilePointer();\n+      }\n+      docLengths[numDocsInCurrentBlock] = v.length;\n+      block = ArrayUtil.grow(block, uncompressedBlockLength + v.length);\n+      System.arraycopy(v.bytes, v.offset, block, uncompressedBlockLength, v.length);\n+      uncompressedBlockLength += v.length;\n+      numDocsInCurrentBlock++;\n+      if (numDocsInCurrentBlock == Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK) {\n+        flushData();\n+      }      \n     }\n \n-    meta.writeInt(numDocsWithField);\n-    meta.writeInt(minLength);\n-    meta.writeInt(maxLength);\n-    if (maxLength > minLength) {\n-      start = data.getFilePointer();\n-      meta.writeLong(start);\n+    private void flushData() throws IOException {\n+      if (numDocsInCurrentBlock > 0) {\n+        // Write offset to this block to temporary offsets file\n+        totalChunks++;\n+        long thisBlockStartPointer = data.getFilePointer();\n+        \n+        // Optimisation - check if all lengths are same\n+        boolean allLengthsSame = true && numDocsInCurrentBlock >0  ;\n+        for (int i = 0; i < Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK && allLengthsSame; i++) {\n+          if (i > 0 && docLengths[i] != docLengths[i-1]) {\n+            allLengthsSame = false;\n+          }\n+        }\n+        if (allLengthsSame) {\n+            // Only write one value shifted. Steal a bit to indicate all other lengths are the same\n+            int onlyOneLength = (docLengths[0] <<1) | 1;\n+            data.writeVInt(onlyOneLength);\n+        } else {\n+          for (int i = 0; i < Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK; i++) {\n+            if(i == 0) {\n+              // Write first value shifted and steal a bit to indicate other lengths are to follow\n+              int multipleLengths = (docLengths[0] <<1);\n+              data.writeVInt(multipleLengths);              \n+            } else {\n+              data.writeVInt(docLengths[i]);\n+            }\n+          }\n+        }\n+        maxUncompressedBlockLength = Math.max(maxUncompressedBlockLength, uncompressedBlockLength);\n+        LZ4.compress(block, 0, uncompressedBlockLength, data, ht);\n+        numDocsInCurrentBlock = 0;\n+        // Ensure initialized with zeroes because full array is always written\n+        Arrays.fill(docLengths, 0);\n+        uncompressedBlockLength = 0;\n+        maxPointer = data.getFilePointer();\n+        tempBinaryOffsets.writeVLong(maxPointer - thisBlockStartPointer);\n+      }\n+    }\n+    \n+    void writeMetaData() throws IOException {\n+      if (blockAddressesStart < 0 ) {\n+        return;\n+      }\n+      \n+      long startDMW = data.getFilePointer();\n+      meta.writeLong(startDMW);\n+      \n+      meta.writeVInt(totalChunks);\n+      meta.writeVInt(Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK);\n+      meta.writeVInt(maxUncompressedBlockLength);\n       meta.writeVInt(DIRECT_MONOTONIC_BLOCK_SHIFT);\n+      \n+    \n+      CodecUtil.writeFooter(tempBinaryOffsets);\n+      IOUtils.close(tempBinaryOffsets);             \n+      //write the compressed block offsets info to the meta file by reading from temp file\n+      try (ChecksumIndexInput filePointersIn = state.directory.openChecksumInput(tempBinaryOffsets.getName(), IOContext.READONCE)) {\n+        CodecUtil.checkHeader(filePointersIn, Lucene80DocValuesFormat.META_CODEC + \"FilePointers\", Lucene80DocValuesFormat.VERSION_CURRENT,\n+          Lucene80DocValuesFormat.VERSION_CURRENT);\n+        Throwable priorE = null;\n+        try {\n+          final DirectMonotonicWriter filePointers = DirectMonotonicWriter.getInstance(meta, data, totalChunks, DIRECT_MONOTONIC_BLOCK_SHIFT);\n+          long fp = blockAddressesStart;\n+          for (int i = 0; i < totalChunks; ++i) {\n+            filePointers.add(fp);\n+            fp += filePointersIn.readVLong();\n+          }\n+          if (maxPointer < fp) {\n+            throw new CorruptIndexException(\"File pointers don't add up (\"+fp+\" vs expected \"+maxPointer+\")\", filePointersIn);\n+          }\n+          filePointers.finish();\n+        } catch (Throwable e) {\n+          priorE = e;\n+        } finally {\n+          CodecUtil.checkFooter(filePointersIn, priorE);\n+        }\n+      }\n+      // Write the length of the DMW block in the data \n+      meta.writeLong(data.getFilePointer() - startDMW);\n+    }\n \n-      final DirectMonotonicWriter writer = DirectMonotonicWriter.getInstance(meta, data, numDocsWithField + 1, DIRECT_MONOTONIC_BLOCK_SHIFT);\n-      long addr = 0;\n-      writer.add(addr);\n-      values = valuesProducer.getBinary(field);\n+    @Override\n+    public void close() throws IOException {\n+      if (tempBinaryOffsets != null) {\n+        IOUtils.close(tempBinaryOffsets);             \n+        state.directory.deleteFile(tempBinaryOffsets.getName());\n+        tempBinaryOffsets = null;\n+      }\n+    }\n+    \n+  }\n+  \n+\n+  @Override\n+  public void addBinaryField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n+    meta.writeInt(field.number);\n+    meta.writeByte(Lucene80DocValuesFormat.BINARY);\n+\n+    try (CompressedBinaryBlockWriter blockWriter = new CompressedBinaryBlockWriter()){\n+      BinaryDocValues values = valuesProducer.getBinary(field);\n+      long start = data.getFilePointer();\n+      meta.writeLong(start); // dataOffset\n+      int numDocsWithField = 0;\n+      int minLength = Integer.MAX_VALUE;\n+      int maxLength = 0;\n       for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n-        addr += values.binaryValue().length;\n-        writer.add(addr);\n+        numDocsWithField++;\n+        BytesRef v = values.binaryValue();      \n+        blockWriter.addDoc(doc, v);      \n+        int length = v.length;      \n+        minLength = Math.min(length, minLength);\n+        maxLength = Math.max(length, maxLength);\n       }\n-      writer.finish();\n-      meta.writeLong(data.getFilePointer() - start);\n+      blockWriter.flushData();\n+\n+      assert numDocsWithField <= maxDoc;\n+      meta.writeLong(data.getFilePointer() - start); // dataLength\n+\n+      if (numDocsWithField == 0) {\n+        meta.writeLong(-2); // docsWithFieldOffset\n+        meta.writeLong(0L); // docsWithFieldLength\n+        meta.writeShort((short) -1); // jumpTableEntryCount\n+        meta.writeByte((byte) -1);   // denseRankPower\n+      } else if (numDocsWithField == maxDoc) {\n+        meta.writeLong(-1); // docsWithFieldOffset\n+        meta.writeLong(0L); // docsWithFieldLength\n+        meta.writeShort((short) -1); // jumpTableEntryCount\n+        meta.writeByte((byte) -1);   // denseRankPower\n+      } else {\n+        long offset = data.getFilePointer();\n+        meta.writeLong(offset); // docsWithFieldOffset\n+        values = valuesProducer.getBinary(field);\n+        final short jumpTableEntryCount = IndexedDISI.writeBitSet(values, data, IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n+        meta.writeLong(data.getFilePointer() - offset); // docsWithFieldLength\n+        meta.writeShort(jumpTableEntryCount);\n+        meta.writeByte(IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1048ba517469b8523bab7de91c10922b1c35575"}, "originalPosition": 273}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTgyMjk3OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesFormat.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMTowMjoxN1rOFoE1Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMTowMjoxN1rOFoE1Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU2NjU0Mw==", "bodyText": "This could be potentially in the BinaryDocValuesFormat class", "url": "https://github.com/apache/lucene-solr/pull/1234#discussion_r377566543", "createdAt": "2020-02-11T11:02:17Z", "author": {"login": "juanka588"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesFormat.java", "diffHunk": "@@ -151,7 +151,8 @@ public DocValuesProducer fieldsProducer(SegmentReadState state) throws IOExcepti\n   static final String META_CODEC = \"Lucene80DocValuesMetadata\";\n   static final String META_EXTENSION = \"dvm\";\n   static final int VERSION_START = 0;\n-  static final int VERSION_CURRENT = VERSION_START;\n+  static final int VERSION_BIN_COMPRESSED = 1;  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1048ba517469b8523bab7de91c10922b1c35575"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Njc4MDU1OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwODowNjo1NFrOFpuUTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwODowNjo1NFrOFpuUTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI5NDc5OQ==", "bodyText": "can we make ht, tempBinaryOffsets, docLengths final?", "url": "https://github.com/apache/lucene-solr/pull/1234#discussion_r379294799", "createdAt": "2020-02-14T08:06:54Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "diffHunk": "@@ -353,67 +360,193 @@ private void writeBlock(long[] values, int length, long gcd, ByteBuffersDataOutp\n     }\n   }\n \n-  @Override\n-  public void addBinaryField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n-    meta.writeInt(field.number);\n-    meta.writeByte(Lucene80DocValuesFormat.BINARY);\n-\n-    BinaryDocValues values = valuesProducer.getBinary(field);\n-    long start = data.getFilePointer();\n-    meta.writeLong(start); // dataOffset\n-    int numDocsWithField = 0;\n-    int minLength = Integer.MAX_VALUE;\n-    int maxLength = 0;\n-    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n-      numDocsWithField++;\n-      BytesRef v = values.binaryValue();\n-      int length = v.length;\n-      data.writeBytes(v.bytes, v.offset, v.length);\n-      minLength = Math.min(length, minLength);\n-      maxLength = Math.max(length, maxLength);\n+  class CompressedBinaryBlockWriter implements Closeable {\n+    FastCompressionHashTable ht = new LZ4.FastCompressionHashTable();    \n+    int uncompressedBlockLength = 0;\n+    int maxUncompressedBlockLength = 0;\n+    int numDocsInCurrentBlock = 0;\n+    int[] docLengths = new int[Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK]; \n+    byte[] block = new byte [1024 * 16];\n+    int totalChunks = 0;\n+    long maxPointer = 0;\n+    long blockAddressesStart = -1; \n+\n+    private IndexOutput tempBinaryOffsets;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1048ba517469b8523bab7de91c10922b1c35575"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Njc4NDY0OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwODowODo1NVrOFpuWyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwODowODo1NVrOFpuWyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI5NTQzMg==", "bodyText": "Depending on the data that will be indexed it's very hard to know what is the right initial size here. Maybe start with an empty array? This will also give increase confidence that the resizing logic works.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                byte[] block = new byte [1024 * 16];\n          \n          \n            \n                byte[] block = BytesRef.EMPTY_BYTES;", "url": "https://github.com/apache/lucene-solr/pull/1234#discussion_r379295432", "createdAt": "2020-02-14T08:08:55Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "diffHunk": "@@ -353,67 +360,193 @@ private void writeBlock(long[] values, int length, long gcd, ByteBuffersDataOutp\n     }\n   }\n \n-  @Override\n-  public void addBinaryField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n-    meta.writeInt(field.number);\n-    meta.writeByte(Lucene80DocValuesFormat.BINARY);\n-\n-    BinaryDocValues values = valuesProducer.getBinary(field);\n-    long start = data.getFilePointer();\n-    meta.writeLong(start); // dataOffset\n-    int numDocsWithField = 0;\n-    int minLength = Integer.MAX_VALUE;\n-    int maxLength = 0;\n-    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n-      numDocsWithField++;\n-      BytesRef v = values.binaryValue();\n-      int length = v.length;\n-      data.writeBytes(v.bytes, v.offset, v.length);\n-      minLength = Math.min(length, minLength);\n-      maxLength = Math.max(length, maxLength);\n+  class CompressedBinaryBlockWriter implements Closeable {\n+    FastCompressionHashTable ht = new LZ4.FastCompressionHashTable();    \n+    int uncompressedBlockLength = 0;\n+    int maxUncompressedBlockLength = 0;\n+    int numDocsInCurrentBlock = 0;\n+    int[] docLengths = new int[Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK]; \n+    byte[] block = new byte [1024 * 16];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1048ba517469b8523bab7de91c10922b1c35575"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NjgwMjIyOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwODoxNzoxNFrOFpuhpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwODoxNzoxNFrOFpuhpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI5ODIxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if(i == 0) {\n          \n          \n            \n                        if (i == 0) {", "url": "https://github.com/apache/lucene-solr/pull/1234#discussion_r379298212", "createdAt": "2020-02-14T08:17:14Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "diffHunk": "@@ -353,67 +360,193 @@ private void writeBlock(long[] values, int length, long gcd, ByteBuffersDataOutp\n     }\n   }\n \n-  @Override\n-  public void addBinaryField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n-    meta.writeInt(field.number);\n-    meta.writeByte(Lucene80DocValuesFormat.BINARY);\n-\n-    BinaryDocValues values = valuesProducer.getBinary(field);\n-    long start = data.getFilePointer();\n-    meta.writeLong(start); // dataOffset\n-    int numDocsWithField = 0;\n-    int minLength = Integer.MAX_VALUE;\n-    int maxLength = 0;\n-    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n-      numDocsWithField++;\n-      BytesRef v = values.binaryValue();\n-      int length = v.length;\n-      data.writeBytes(v.bytes, v.offset, v.length);\n-      minLength = Math.min(length, minLength);\n-      maxLength = Math.max(length, maxLength);\n+  class CompressedBinaryBlockWriter implements Closeable {\n+    FastCompressionHashTable ht = new LZ4.FastCompressionHashTable();    \n+    int uncompressedBlockLength = 0;\n+    int maxUncompressedBlockLength = 0;\n+    int numDocsInCurrentBlock = 0;\n+    int[] docLengths = new int[Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK]; \n+    byte[] block = new byte [1024 * 16];\n+    int totalChunks = 0;\n+    long maxPointer = 0;\n+    long blockAddressesStart = -1; \n+\n+    private IndexOutput tempBinaryOffsets;\n+    \n+    \n+    public CompressedBinaryBlockWriter() throws IOException {\n+      tempBinaryOffsets = state.directory.createTempOutput(state.segmentInfo.name, \"binary_pointers\", state.context);\n+      boolean success = false;\n+      try {\n+        CodecUtil.writeHeader(tempBinaryOffsets, Lucene80DocValuesFormat.META_CODEC + \"FilePointers\", Lucene80DocValuesFormat.VERSION_CURRENT);\n+        success = true;\n+      } finally {\n+        if (success == false) {\n+          IOUtils.closeWhileHandlingException(this); //self-close because constructor caller can't \n+        }\n+      }\n     }\n-    assert numDocsWithField <= maxDoc;\n-    meta.writeLong(data.getFilePointer() - start); // dataLength\n \n-    if (numDocsWithField == 0) {\n-      meta.writeLong(-2); // docsWithFieldOffset\n-      meta.writeLong(0L); // docsWithFieldLength\n-      meta.writeShort((short) -1); // jumpTableEntryCount\n-      meta.writeByte((byte) -1);   // denseRankPower\n-    } else if (numDocsWithField == maxDoc) {\n-      meta.writeLong(-1); // docsWithFieldOffset\n-      meta.writeLong(0L); // docsWithFieldLength\n-      meta.writeShort((short) -1); // jumpTableEntryCount\n-      meta.writeByte((byte) -1);   // denseRankPower\n-    } else {\n-      long offset = data.getFilePointer();\n-      meta.writeLong(offset); // docsWithFieldOffset\n-      values = valuesProducer.getBinary(field);\n-      final short jumpTableEntryCount = IndexedDISI.writeBitSet(values, data, IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n-      meta.writeLong(data.getFilePointer() - offset); // docsWithFieldLength\n-      meta.writeShort(jumpTableEntryCount);\n-      meta.writeByte(IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n+    void addDoc(int doc, BytesRef v) throws IOException {\n+      if (blockAddressesStart < 0) {\n+        blockAddressesStart = data.getFilePointer();\n+      }\n+      docLengths[numDocsInCurrentBlock] = v.length;\n+      block = ArrayUtil.grow(block, uncompressedBlockLength + v.length);\n+      System.arraycopy(v.bytes, v.offset, block, uncompressedBlockLength, v.length);\n+      uncompressedBlockLength += v.length;\n+      numDocsInCurrentBlock++;\n+      if (numDocsInCurrentBlock == Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK) {\n+        flushData();\n+      }      \n     }\n \n-    meta.writeInt(numDocsWithField);\n-    meta.writeInt(minLength);\n-    meta.writeInt(maxLength);\n-    if (maxLength > minLength) {\n-      start = data.getFilePointer();\n-      meta.writeLong(start);\n+    private void flushData() throws IOException {\n+      if (numDocsInCurrentBlock > 0) {\n+        // Write offset to this block to temporary offsets file\n+        totalChunks++;\n+        long thisBlockStartPointer = data.getFilePointer();\n+        \n+        // Optimisation - check if all lengths are same\n+        boolean allLengthsSame = true && numDocsInCurrentBlock >0  ;\n+        for (int i = 0; i < Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK && allLengthsSame; i++) {\n+          if (i > 0 && docLengths[i] != docLengths[i-1]) {\n+            allLengthsSame = false;\n+          }\n+        }\n+        if (allLengthsSame) {\n+            // Only write one value shifted. Steal a bit to indicate all other lengths are the same\n+            int onlyOneLength = (docLengths[0] <<1) | 1;\n+            data.writeVInt(onlyOneLength);\n+        } else {\n+          for (int i = 0; i < Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK; i++) {\n+            if(i == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1048ba517469b8523bab7de91c10922b1c35575"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NjgwNTQ2OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwODoxODo1MFrOFpujyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwODoxODo1MFrOFpujyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI5ODc2MQ==", "bodyText": "The second condition is necessary true given the parent if statement.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    boolean allLengthsSame = true && numDocsInCurrentBlock >0  ;\n          \n          \n            \n                    boolean allLengthsSame = true;", "url": "https://github.com/apache/lucene-solr/pull/1234#discussion_r379298761", "createdAt": "2020-02-14T08:18:50Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "diffHunk": "@@ -353,67 +360,193 @@ private void writeBlock(long[] values, int length, long gcd, ByteBuffersDataOutp\n     }\n   }\n \n-  @Override\n-  public void addBinaryField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n-    meta.writeInt(field.number);\n-    meta.writeByte(Lucene80DocValuesFormat.BINARY);\n-\n-    BinaryDocValues values = valuesProducer.getBinary(field);\n-    long start = data.getFilePointer();\n-    meta.writeLong(start); // dataOffset\n-    int numDocsWithField = 0;\n-    int minLength = Integer.MAX_VALUE;\n-    int maxLength = 0;\n-    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n-      numDocsWithField++;\n-      BytesRef v = values.binaryValue();\n-      int length = v.length;\n-      data.writeBytes(v.bytes, v.offset, v.length);\n-      minLength = Math.min(length, minLength);\n-      maxLength = Math.max(length, maxLength);\n+  class CompressedBinaryBlockWriter implements Closeable {\n+    FastCompressionHashTable ht = new LZ4.FastCompressionHashTable();    \n+    int uncompressedBlockLength = 0;\n+    int maxUncompressedBlockLength = 0;\n+    int numDocsInCurrentBlock = 0;\n+    int[] docLengths = new int[Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK]; \n+    byte[] block = new byte [1024 * 16];\n+    int totalChunks = 0;\n+    long maxPointer = 0;\n+    long blockAddressesStart = -1; \n+\n+    private IndexOutput tempBinaryOffsets;\n+    \n+    \n+    public CompressedBinaryBlockWriter() throws IOException {\n+      tempBinaryOffsets = state.directory.createTempOutput(state.segmentInfo.name, \"binary_pointers\", state.context);\n+      boolean success = false;\n+      try {\n+        CodecUtil.writeHeader(tempBinaryOffsets, Lucene80DocValuesFormat.META_CODEC + \"FilePointers\", Lucene80DocValuesFormat.VERSION_CURRENT);\n+        success = true;\n+      } finally {\n+        if (success == false) {\n+          IOUtils.closeWhileHandlingException(this); //self-close because constructor caller can't \n+        }\n+      }\n     }\n-    assert numDocsWithField <= maxDoc;\n-    meta.writeLong(data.getFilePointer() - start); // dataLength\n \n-    if (numDocsWithField == 0) {\n-      meta.writeLong(-2); // docsWithFieldOffset\n-      meta.writeLong(0L); // docsWithFieldLength\n-      meta.writeShort((short) -1); // jumpTableEntryCount\n-      meta.writeByte((byte) -1);   // denseRankPower\n-    } else if (numDocsWithField == maxDoc) {\n-      meta.writeLong(-1); // docsWithFieldOffset\n-      meta.writeLong(0L); // docsWithFieldLength\n-      meta.writeShort((short) -1); // jumpTableEntryCount\n-      meta.writeByte((byte) -1);   // denseRankPower\n-    } else {\n-      long offset = data.getFilePointer();\n-      meta.writeLong(offset); // docsWithFieldOffset\n-      values = valuesProducer.getBinary(field);\n-      final short jumpTableEntryCount = IndexedDISI.writeBitSet(values, data, IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n-      meta.writeLong(data.getFilePointer() - offset); // docsWithFieldLength\n-      meta.writeShort(jumpTableEntryCount);\n-      meta.writeByte(IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n+    void addDoc(int doc, BytesRef v) throws IOException {\n+      if (blockAddressesStart < 0) {\n+        blockAddressesStart = data.getFilePointer();\n+      }\n+      docLengths[numDocsInCurrentBlock] = v.length;\n+      block = ArrayUtil.grow(block, uncompressedBlockLength + v.length);\n+      System.arraycopy(v.bytes, v.offset, block, uncompressedBlockLength, v.length);\n+      uncompressedBlockLength += v.length;\n+      numDocsInCurrentBlock++;\n+      if (numDocsInCurrentBlock == Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK) {\n+        flushData();\n+      }      \n     }\n \n-    meta.writeInt(numDocsWithField);\n-    meta.writeInt(minLength);\n-    meta.writeInt(maxLength);\n-    if (maxLength > minLength) {\n-      start = data.getFilePointer();\n-      meta.writeLong(start);\n+    private void flushData() throws IOException {\n+      if (numDocsInCurrentBlock > 0) {\n+        // Write offset to this block to temporary offsets file\n+        totalChunks++;\n+        long thisBlockStartPointer = data.getFilePointer();\n+        \n+        // Optimisation - check if all lengths are same\n+        boolean allLengthsSame = true && numDocsInCurrentBlock >0  ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1048ba517469b8523bab7de91c10922b1c35575"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NjgzOTQ5OnYy", "diffSide": "LEFT", "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwODozMzoxOFrOFpu4ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwODozMzoxOFrOFpu4ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMwNDA3NA==", "bodyText": "maybe keep this variable actually, it would help make version final by doing this.version = version; after the try block?", "url": "https://github.com/apache/lucene-solr/pull/1234#discussion_r379304074", "createdAt": "2020-02-14T08:33:18Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer.java", "diffHunk": "@@ -59,18 +60,18 @@\n   private long ramBytesUsed;\n   private final IndexInput data;\n   private final int maxDoc;\n+  private int version = -1;\n \n   /** expert: instantiates a new reader */\n   Lucene80DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n     String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n     this.maxDoc = state.segmentInfo.maxDoc();\n     ramBytesUsed = RamUsageEstimator.shallowSizeOfInstance(getClass());\n \n-    int version = -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1048ba517469b8523bab7de91c10922b1c35575"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Njg0MTUyOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwODozNDowM1rOFpu5sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwODozNDowM1rOFpu5sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMwNDM2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if ((version >= Lucene80DocValuesFormat.VERSION_BIN_COMPRESSED && entry.numDocsWithField >0)||  entry.minLength < entry.maxLength) {\n          \n          \n            \n                if ((version >= Lucene80DocValuesFormat.VERSION_BIN_COMPRESSED && entry.numDocsWithField > 0) ||  entry.minLength < entry.maxLength) {", "url": "https://github.com/apache/lucene-solr/pull/1234#discussion_r379304369", "createdAt": "2020-02-14T08:34:03Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer.java", "diffHunk": "@@ -182,10 +183,21 @@ private BinaryEntry readBinary(ChecksumIndexInput meta) throws IOException {\n     entry.numDocsWithField = meta.readInt();\n     entry.minLength = meta.readInt();\n     entry.maxLength = meta.readInt();\n-    if (entry.minLength < entry.maxLength) {\n+    if ((version >= Lucene80DocValuesFormat.VERSION_BIN_COMPRESSED && entry.numDocsWithField >0)||  entry.minLength < entry.maxLength) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1048ba517469b8523bab7de91c10922b1c35575"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Njg0NjA3OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwODozNjowOFrOFpu8qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNDo1NjoxNlrOFp5PxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMwNTEyOA==", "bodyText": "let's use the shift from the BinaryEntry instead of the constant?", "url": "https://github.com/apache/lucene-solr/pull/1234#discussion_r379305128", "createdAt": "2020-02-14T08:36:08Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer.java", "diffHunk": "@@ -742,6 +757,125 @@ public BytesRef binaryValue() throws IOException {\n         };\n       }\n     }\n+  }  \n+  \n+  // Decompresses blocks of binary values to retrieve content\n+  class BinaryDecoder {\n+    \n+    private final LongValues addresses;\n+    private final IndexInput compressedData;\n+    // Cache of last uncompressed block \n+    private long lastBlockId = -1;\n+    private final int []uncompressedDocStarts;\n+    private int uncompressedBlockLength = 0;        \n+    private final byte[] uncompressedBlock;\n+    private final BytesRef uncompressedBytesRef;\n+    private final int docsPerChunk;\n+    \n+    public BinaryDecoder(LongValues addresses, IndexInput compressedData, int biggestUncompressedBlockSize, int docsPerChunk) {\n+      super();\n+      this.addresses = addresses;\n+      this.compressedData = compressedData;\n+      // pre-allocate a byte array large enough for the biggest uncompressed block needed.\n+      this.uncompressedBlock = new byte[biggestUncompressedBlockSize];\n+      uncompressedBytesRef = new BytesRef(uncompressedBlock);\n+      this.docsPerChunk = docsPerChunk;\n+      uncompressedDocStarts = new int[docsPerChunk + 1];\n+      \n+    }\n+\n+    BytesRef decode(int docNumber) throws IOException {\n+      int blockId = docNumber >> Lucene80DocValuesFormat.BINARY_BLOCK_SHIFT; ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1048ba517469b8523bab7de91c10922b1c35575"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ2MzQ0MA==", "bodyText": "I guess that means I should serialize the shift value rather the absolute number of docs per block?", "url": "https://github.com/apache/lucene-solr/pull/1234#discussion_r379463440", "createdAt": "2020-02-14T14:37:32Z", "author": {"login": "markharwood"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer.java", "diffHunk": "@@ -742,6 +757,125 @@ public BytesRef binaryValue() throws IOException {\n         };\n       }\n     }\n+  }  \n+  \n+  // Decompresses blocks of binary values to retrieve content\n+  class BinaryDecoder {\n+    \n+    private final LongValues addresses;\n+    private final IndexInput compressedData;\n+    // Cache of last uncompressed block \n+    private long lastBlockId = -1;\n+    private final int []uncompressedDocStarts;\n+    private int uncompressedBlockLength = 0;        \n+    private final byte[] uncompressedBlock;\n+    private final BytesRef uncompressedBytesRef;\n+    private final int docsPerChunk;\n+    \n+    public BinaryDecoder(LongValues addresses, IndexInput compressedData, int biggestUncompressedBlockSize, int docsPerChunk) {\n+      super();\n+      this.addresses = addresses;\n+      this.compressedData = compressedData;\n+      // pre-allocate a byte array large enough for the biggest uncompressed block needed.\n+      this.uncompressedBlock = new byte[biggestUncompressedBlockSize];\n+      uncompressedBytesRef = new BytesRef(uncompressedBlock);\n+      this.docsPerChunk = docsPerChunk;\n+      uncompressedDocStarts = new int[docsPerChunk + 1];\n+      \n+    }\n+\n+    BytesRef decode(int docNumber) throws IOException {\n+      int blockId = docNumber >> Lucene80DocValuesFormat.BINARY_BLOCK_SHIFT; ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMwNTEyOA=="}, "originalCommit": {"oid": "b1048ba517469b8523bab7de91c10922b1c35575"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ3Mzg2MA==", "bodyText": "I think so.", "url": "https://github.com/apache/lucene-solr/pull/1234#discussion_r379473860", "createdAt": "2020-02-14T14:56:16Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer.java", "diffHunk": "@@ -742,6 +757,125 @@ public BytesRef binaryValue() throws IOException {\n         };\n       }\n     }\n+  }  \n+  \n+  // Decompresses blocks of binary values to retrieve content\n+  class BinaryDecoder {\n+    \n+    private final LongValues addresses;\n+    private final IndexInput compressedData;\n+    // Cache of last uncompressed block \n+    private long lastBlockId = -1;\n+    private final int []uncompressedDocStarts;\n+    private int uncompressedBlockLength = 0;        \n+    private final byte[] uncompressedBlock;\n+    private final BytesRef uncompressedBytesRef;\n+    private final int docsPerChunk;\n+    \n+    public BinaryDecoder(LongValues addresses, IndexInput compressedData, int biggestUncompressedBlockSize, int docsPerChunk) {\n+      super();\n+      this.addresses = addresses;\n+      this.compressedData = compressedData;\n+      // pre-allocate a byte array large enough for the biggest uncompressed block needed.\n+      this.uncompressedBlock = new byte[biggestUncompressedBlockSize];\n+      uncompressedBytesRef = new BytesRef(uncompressedBlock);\n+      this.docsPerChunk = docsPerChunk;\n+      uncompressedDocStarts = new int[docsPerChunk + 1];\n+      \n+    }\n+\n+    BytesRef decode(int docNumber) throws IOException {\n+      int blockId = docNumber >> Lucene80DocValuesFormat.BINARY_BLOCK_SHIFT; ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMwNTEyOA=="}, "originalCommit": {"oid": "b1048ba517469b8523bab7de91c10922b1c35575"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Njg1Mzg0OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwODozOToxMVrOFpvBVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNDozNzo1OFrOFp4n-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMwNjMyNg==", "bodyText": "maybe this should be the \"shift\" instead of the number of docs per chunk, so that you you directly have both the shift (as-is) and the mask ((1 << shift) - 1)", "url": "https://github.com/apache/lucene-solr/pull/1234#discussion_r379306326", "createdAt": "2020-02-14T08:39:11Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer.java", "diffHunk": "@@ -182,10 +183,21 @@ private BinaryEntry readBinary(ChecksumIndexInput meta) throws IOException {\n     entry.numDocsWithField = meta.readInt();\n     entry.minLength = meta.readInt();\n     entry.maxLength = meta.readInt();\n-    if (entry.minLength < entry.maxLength) {\n+    if ((version >= Lucene80DocValuesFormat.VERSION_BIN_COMPRESSED && entry.numDocsWithField >0)||  entry.minLength < entry.maxLength) {\n       entry.addressesOffset = meta.readLong();\n+\n+      // Old count of uncompressed addresses \n+      long numAddresses = entry.numDocsWithField + 1L;\n+      // New count of compressed addresses - the number of compresseed blocks\n+      if (version >= Lucene80DocValuesFormat.VERSION_BIN_COMPRESSED) {\n+        entry.numCompressedChunks = meta.readVInt();\n+        entry.docsPerChunk = meta.readVInt();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1048ba517469b8523bab7de91c10922b1c35575"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ2MzY3NQ==", "bodyText": "Ah - ignore my previous comment.", "url": "https://github.com/apache/lucene-solr/pull/1234#discussion_r379463675", "createdAt": "2020-02-14T14:37:58Z", "author": {"login": "markharwood"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer.java", "diffHunk": "@@ -182,10 +183,21 @@ private BinaryEntry readBinary(ChecksumIndexInput meta) throws IOException {\n     entry.numDocsWithField = meta.readInt();\n     entry.minLength = meta.readInt();\n     entry.maxLength = meta.readInt();\n-    if (entry.minLength < entry.maxLength) {\n+    if ((version >= Lucene80DocValuesFormat.VERSION_BIN_COMPRESSED && entry.numDocsWithField >0)||  entry.minLength < entry.maxLength) {\n       entry.addressesOffset = meta.readLong();\n+\n+      // Old count of uncompressed addresses \n+      long numAddresses = entry.numDocsWithField + 1L;\n+      // New count of compressed addresses - the number of compresseed blocks\n+      if (version >= Lucene80DocValuesFormat.VERSION_BIN_COMPRESSED) {\n+        entry.numCompressedChunks = meta.readVInt();\n+        entry.docsPerChunk = meta.readVInt();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMwNjMyNg=="}, "originalCommit": {"oid": "b1048ba517469b8523bab7de91c10922b1c35575"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Njg1NzM0OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwODo0MDo0NlrOFpvDnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwODo0MDo0NlrOFpvDnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMwNjkwOQ==", "bodyText": "in general we do a break when setting allLengthsSame = false instead of adding it to the exit condition of the for statement", "url": "https://github.com/apache/lucene-solr/pull/1234#discussion_r379306909", "createdAt": "2020-02-14T08:40:46Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "diffHunk": "@@ -353,67 +360,193 @@ private void writeBlock(long[] values, int length, long gcd, ByteBuffersDataOutp\n     }\n   }\n \n-  @Override\n-  public void addBinaryField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n-    meta.writeInt(field.number);\n-    meta.writeByte(Lucene80DocValuesFormat.BINARY);\n-\n-    BinaryDocValues values = valuesProducer.getBinary(field);\n-    long start = data.getFilePointer();\n-    meta.writeLong(start); // dataOffset\n-    int numDocsWithField = 0;\n-    int minLength = Integer.MAX_VALUE;\n-    int maxLength = 0;\n-    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n-      numDocsWithField++;\n-      BytesRef v = values.binaryValue();\n-      int length = v.length;\n-      data.writeBytes(v.bytes, v.offset, v.length);\n-      minLength = Math.min(length, minLength);\n-      maxLength = Math.max(length, maxLength);\n+  class CompressedBinaryBlockWriter implements Closeable {\n+    FastCompressionHashTable ht = new LZ4.FastCompressionHashTable();    \n+    int uncompressedBlockLength = 0;\n+    int maxUncompressedBlockLength = 0;\n+    int numDocsInCurrentBlock = 0;\n+    int[] docLengths = new int[Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK]; \n+    byte[] block = new byte [1024 * 16];\n+    int totalChunks = 0;\n+    long maxPointer = 0;\n+    long blockAddressesStart = -1; \n+\n+    private IndexOutput tempBinaryOffsets;\n+    \n+    \n+    public CompressedBinaryBlockWriter() throws IOException {\n+      tempBinaryOffsets = state.directory.createTempOutput(state.segmentInfo.name, \"binary_pointers\", state.context);\n+      boolean success = false;\n+      try {\n+        CodecUtil.writeHeader(tempBinaryOffsets, Lucene80DocValuesFormat.META_CODEC + \"FilePointers\", Lucene80DocValuesFormat.VERSION_CURRENT);\n+        success = true;\n+      } finally {\n+        if (success == false) {\n+          IOUtils.closeWhileHandlingException(this); //self-close because constructor caller can't \n+        }\n+      }\n     }\n-    assert numDocsWithField <= maxDoc;\n-    meta.writeLong(data.getFilePointer() - start); // dataLength\n \n-    if (numDocsWithField == 0) {\n-      meta.writeLong(-2); // docsWithFieldOffset\n-      meta.writeLong(0L); // docsWithFieldLength\n-      meta.writeShort((short) -1); // jumpTableEntryCount\n-      meta.writeByte((byte) -1);   // denseRankPower\n-    } else if (numDocsWithField == maxDoc) {\n-      meta.writeLong(-1); // docsWithFieldOffset\n-      meta.writeLong(0L); // docsWithFieldLength\n-      meta.writeShort((short) -1); // jumpTableEntryCount\n-      meta.writeByte((byte) -1);   // denseRankPower\n-    } else {\n-      long offset = data.getFilePointer();\n-      meta.writeLong(offset); // docsWithFieldOffset\n-      values = valuesProducer.getBinary(field);\n-      final short jumpTableEntryCount = IndexedDISI.writeBitSet(values, data, IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n-      meta.writeLong(data.getFilePointer() - offset); // docsWithFieldLength\n-      meta.writeShort(jumpTableEntryCount);\n-      meta.writeByte(IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n+    void addDoc(int doc, BytesRef v) throws IOException {\n+      if (blockAddressesStart < 0) {\n+        blockAddressesStart = data.getFilePointer();\n+      }\n+      docLengths[numDocsInCurrentBlock] = v.length;\n+      block = ArrayUtil.grow(block, uncompressedBlockLength + v.length);\n+      System.arraycopy(v.bytes, v.offset, block, uncompressedBlockLength, v.length);\n+      uncompressedBlockLength += v.length;\n+      numDocsInCurrentBlock++;\n+      if (numDocsInCurrentBlock == Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK) {\n+        flushData();\n+      }      \n     }\n \n-    meta.writeInt(numDocsWithField);\n-    meta.writeInt(minLength);\n-    meta.writeInt(maxLength);\n-    if (maxLength > minLength) {\n-      start = data.getFilePointer();\n-      meta.writeLong(start);\n+    private void flushData() throws IOException {\n+      if (numDocsInCurrentBlock > 0) {\n+        // Write offset to this block to temporary offsets file\n+        totalChunks++;\n+        long thisBlockStartPointer = data.getFilePointer();\n+        \n+        // Optimisation - check if all lengths are same\n+        boolean allLengthsSame = true && numDocsInCurrentBlock >0  ;\n+        for (int i = 0; i < Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK && allLengthsSame; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1048ba517469b8523bab7de91c10922b1c35575"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Njg1ODc5OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwODo0MToyMFrOFpvEbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwODo0MToyMFrOFpvEbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMwNzExNg==", "bodyText": "if you're only doing it for i>0, let's make the loop start at i=1?", "url": "https://github.com/apache/lucene-solr/pull/1234#discussion_r379307116", "createdAt": "2020-02-14T08:41:20Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.java", "diffHunk": "@@ -353,67 +360,193 @@ private void writeBlock(long[] values, int length, long gcd, ByteBuffersDataOutp\n     }\n   }\n \n-  @Override\n-  public void addBinaryField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n-    meta.writeInt(field.number);\n-    meta.writeByte(Lucene80DocValuesFormat.BINARY);\n-\n-    BinaryDocValues values = valuesProducer.getBinary(field);\n-    long start = data.getFilePointer();\n-    meta.writeLong(start); // dataOffset\n-    int numDocsWithField = 0;\n-    int minLength = Integer.MAX_VALUE;\n-    int maxLength = 0;\n-    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n-      numDocsWithField++;\n-      BytesRef v = values.binaryValue();\n-      int length = v.length;\n-      data.writeBytes(v.bytes, v.offset, v.length);\n-      minLength = Math.min(length, minLength);\n-      maxLength = Math.max(length, maxLength);\n+  class CompressedBinaryBlockWriter implements Closeable {\n+    FastCompressionHashTable ht = new LZ4.FastCompressionHashTable();    \n+    int uncompressedBlockLength = 0;\n+    int maxUncompressedBlockLength = 0;\n+    int numDocsInCurrentBlock = 0;\n+    int[] docLengths = new int[Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK]; \n+    byte[] block = new byte [1024 * 16];\n+    int totalChunks = 0;\n+    long maxPointer = 0;\n+    long blockAddressesStart = -1; \n+\n+    private IndexOutput tempBinaryOffsets;\n+    \n+    \n+    public CompressedBinaryBlockWriter() throws IOException {\n+      tempBinaryOffsets = state.directory.createTempOutput(state.segmentInfo.name, \"binary_pointers\", state.context);\n+      boolean success = false;\n+      try {\n+        CodecUtil.writeHeader(tempBinaryOffsets, Lucene80DocValuesFormat.META_CODEC + \"FilePointers\", Lucene80DocValuesFormat.VERSION_CURRENT);\n+        success = true;\n+      } finally {\n+        if (success == false) {\n+          IOUtils.closeWhileHandlingException(this); //self-close because constructor caller can't \n+        }\n+      }\n     }\n-    assert numDocsWithField <= maxDoc;\n-    meta.writeLong(data.getFilePointer() - start); // dataLength\n \n-    if (numDocsWithField == 0) {\n-      meta.writeLong(-2); // docsWithFieldOffset\n-      meta.writeLong(0L); // docsWithFieldLength\n-      meta.writeShort((short) -1); // jumpTableEntryCount\n-      meta.writeByte((byte) -1);   // denseRankPower\n-    } else if (numDocsWithField == maxDoc) {\n-      meta.writeLong(-1); // docsWithFieldOffset\n-      meta.writeLong(0L); // docsWithFieldLength\n-      meta.writeShort((short) -1); // jumpTableEntryCount\n-      meta.writeByte((byte) -1);   // denseRankPower\n-    } else {\n-      long offset = data.getFilePointer();\n-      meta.writeLong(offset); // docsWithFieldOffset\n-      values = valuesProducer.getBinary(field);\n-      final short jumpTableEntryCount = IndexedDISI.writeBitSet(values, data, IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n-      meta.writeLong(data.getFilePointer() - offset); // docsWithFieldLength\n-      meta.writeShort(jumpTableEntryCount);\n-      meta.writeByte(IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n+    void addDoc(int doc, BytesRef v) throws IOException {\n+      if (blockAddressesStart < 0) {\n+        blockAddressesStart = data.getFilePointer();\n+      }\n+      docLengths[numDocsInCurrentBlock] = v.length;\n+      block = ArrayUtil.grow(block, uncompressedBlockLength + v.length);\n+      System.arraycopy(v.bytes, v.offset, block, uncompressedBlockLength, v.length);\n+      uncompressedBlockLength += v.length;\n+      numDocsInCurrentBlock++;\n+      if (numDocsInCurrentBlock == Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK) {\n+        flushData();\n+      }      \n     }\n \n-    meta.writeInt(numDocsWithField);\n-    meta.writeInt(minLength);\n-    meta.writeInt(maxLength);\n-    if (maxLength > minLength) {\n-      start = data.getFilePointer();\n-      meta.writeLong(start);\n+    private void flushData() throws IOException {\n+      if (numDocsInCurrentBlock > 0) {\n+        // Write offset to this block to temporary offsets file\n+        totalChunks++;\n+        long thisBlockStartPointer = data.getFilePointer();\n+        \n+        // Optimisation - check if all lengths are same\n+        boolean allLengthsSame = true && numDocsInCurrentBlock >0  ;\n+        for (int i = 0; i < Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK && allLengthsSame; i++) {\n+          if (i > 0 && docLengths[i] != docLengths[i-1]) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1048ba517469b8523bab7de91c10922b1c35575"}, "originalPosition": 138}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 912, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}