{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4MDk2OTQ3", "number": 1948, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNjo0ODoxNlrOEs44DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNTozMToxNVrOEz2ChQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTA0NjUyOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/OrdinalMap.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNjo0ODoxNlrOHgXqFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxOTo0MTowNFrOHhiUBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcwNDA4NQ==", "bodyText": "We could ignore it completely from ramBytesUsed, since this singleton is allocated anyway, regardless of whether the optimization uses it.", "url": "https://github.com/apache/lucene-solr/pull/1948#discussion_r503704085", "createdAt": "2020-10-13T06:48:16Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/index/OrdinalMap.java", "diffHunk": "@@ -271,13 +273,26 @@ protected boolean lessThan(TermsEnumIndex a, TermsEnumIndex b) {\n       globalOrd++;\n     }\n \n-    this.firstSegments = firstSegments.build();\n-    this.globalOrdDeltas = globalOrdDeltas.build();\n+    long ramBytesUsed = BASE_RAM_BYTES_USED + segmentMap.ramBytesUsed();\n+    this.valueCount = globalOrd;\n+\n+    // If the first segment contains all of the global ords, then we can apply a small optimization\n+    // and hardcode the first segments and global ord deltas as all zeroes.\n+    if (ordDeltaBits.length > 0 && ordDeltaBits[0] == 0L && ordDeltas[0].size() == this.valueCount) {\n+      this.firstSegments = LongValues.ZEROES;\n+      this.globalOrdDeltas = LongValues.ZEROES;\n+      ramBytesUsed += RamUsageEstimator.shallowSizeOf(LongValues.ZEROES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f22cbab03d19f2c826d6d5915d86cea2957d6cc"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkyNzIzOA==", "bodyText": "I added this to address a failure in TestOrdinalMap. But now I see it makes more sense to modify the test !", "url": "https://github.com/apache/lucene-solr/pull/1948#discussion_r504927238", "createdAt": "2020-10-14T19:41:04Z", "author": {"login": "jtibshirani"}, "path": "lucene/core/src/java/org/apache/lucene/index/OrdinalMap.java", "diffHunk": "@@ -271,13 +273,26 @@ protected boolean lessThan(TermsEnumIndex a, TermsEnumIndex b) {\n       globalOrd++;\n     }\n \n-    this.firstSegments = firstSegments.build();\n-    this.globalOrdDeltas = globalOrdDeltas.build();\n+    long ramBytesUsed = BASE_RAM_BYTES_USED + segmentMap.ramBytesUsed();\n+    this.valueCount = globalOrd;\n+\n+    // If the first segment contains all of the global ords, then we can apply a small optimization\n+    // and hardcode the first segments and global ord deltas as all zeroes.\n+    if (ordDeltaBits.length > 0 && ordDeltaBits[0] == 0L && ordDeltas[0].size() == this.valueCount) {\n+      this.firstSegments = LongValues.ZEROES;\n+      this.globalOrdDeltas = LongValues.ZEROES;\n+      ramBytesUsed += RamUsageEstimator.shallowSizeOf(LongValues.ZEROES);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcwNDA4NQ=="}, "originalCommit": {"oid": "4f22cbab03d19f2c826d6d5915d86cea2957d6cc"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTA1MzYzOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/OrdinalMap.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNjo1MDo0MFrOHgXudg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMToyOToxM1rOHib0_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcwNTIwNg==", "bodyText": "could be do something like if (firstSegments != LongValues.ZEROES) { resources.add(Accountables.namedAccountable(\"first segments\", firstSegments)); }?", "url": "https://github.com/apache/lucene-solr/pull/1948#discussion_r503705206", "createdAt": "2020-10-13T06:50:40Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/index/OrdinalMap.java", "diffHunk": "@@ -359,10 +375,9 @@ public long ramBytesUsed() {\n   @Override\n   public Collection<Accountable> getChildResources() {\n     List<Accountable> resources = new ArrayList<>();\n-    resources.add(Accountables.namedAccountable(\"global ord deltas\", globalOrdDeltas));\n-    resources.add(Accountables.namedAccountable(\"first segments\", firstSegments));\n     resources.add(Accountables.namedAccountable(\"segment map\", segmentMap));\n-    // TODO: would be nice to return actual child segment deltas too, but the optimizations are confusing\n+    // TODO: would be nice to return the ordinal and segment maps too, but it's not straightforward\n+    //  because of optimizations.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f22cbab03d19f2c826d6d5915d86cea2957d6cc"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg2OTU2Nw==", "bodyText": "I think we'd need a cast here, since LongValues doesn't implement Accountable. Alternatively, we could consider a bigger change to have LongValues implement Accountable.\nUpdate: I just saw LUCENE-9387, it probably doesn't make sense to increase usage of Accountable.", "url": "https://github.com/apache/lucene-solr/pull/1948#discussion_r505869567", "createdAt": "2020-10-15T21:29:13Z", "author": {"login": "jtibshirani"}, "path": "lucene/core/src/java/org/apache/lucene/index/OrdinalMap.java", "diffHunk": "@@ -359,10 +375,9 @@ public long ramBytesUsed() {\n   @Override\n   public Collection<Accountable> getChildResources() {\n     List<Accountable> resources = new ArrayList<>();\n-    resources.add(Accountables.namedAccountable(\"global ord deltas\", globalOrdDeltas));\n-    resources.add(Accountables.namedAccountable(\"first segments\", firstSegments));\n     resources.add(Accountables.namedAccountable(\"segment map\", segmentMap));\n-    // TODO: would be nice to return actual child segment deltas too, but the optimizations are confusing\n+    // TODO: would be nice to return the ordinal and segment maps too, but it's not straightforward\n+    //  because of optimizations.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcwNTIwNg=="}, "originalCommit": {"oid": "4f22cbab03d19f2c826d6d5915d86cea2957d6cc"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjQ2MTU1OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/OrdinalMap.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNzo1MDo1OFrOHhebsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjowNjo0MVrOHrV5pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg2MzY2Nw==", "bodyText": "Hmm why only the first segment?  Couldn't it be the 3rd segment, in addition, that matches the global ords?\nEdit: ahh OK I understand now -- this opto is indeed specific to the first segment, so we can store this.firstSegments as all 0s.  Good!\nDo we (somewhere, couldn't find it here) pre-sort all segments by the cardinality descending?  Then we could know all segments that meet this optimization are at the start of the segments list, and possibly building the ordinal map is faster (not sure).  But then we would need to un-sort in the end to return the final OrdinalMap.  But it might enable this opto to apply more often, except, I think we would then need an additional dereference on lookup, hmm.\nDoes our PackedLongValues.monotonicBuilder already optimize for the case where it is all 0s, for the case where another segment (not the first) has all the global values as well?", "url": "https://github.com/apache/lucene-solr/pull/1948#discussion_r504863667", "createdAt": "2020-10-14T17:50:58Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/OrdinalMap.java", "diffHunk": "@@ -271,13 +273,26 @@ protected boolean lessThan(TermsEnumIndex a, TermsEnumIndex b) {\n       globalOrd++;\n     }\n \n-    this.firstSegments = firstSegments.build();\n-    this.globalOrdDeltas = globalOrdDeltas.build();\n+    long ramBytesUsed = BASE_RAM_BYTES_USED + segmentMap.ramBytesUsed();\n+    this.valueCount = globalOrd;\n+\n+    // If the first segment contains all of the global ords, then we can apply a small optimization\n+    // and hardcode the first segments and global ord deltas as all zeroes.\n+    if (ordDeltaBits.length > 0 && ordDeltaBits[0] == 0L && ordDeltas[0].size() == this.valueCount) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f22cbab03d19f2c826d6d5915d86cea2957d6cc"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg5OTE5Mw==", "bodyText": "Do we (somewhere, couldn't find it here) pre-sort all segments by the cardinality descending?\n\nWe do in fact -- the segments are sorted by 'weight', which in all call sites corresponds to the number of unique terms. This was added in LUCENE-5782.\n\nDoes our PackedLongValues.monotonicBuilder already optimize for the case where it is all 0s, for the case where another segment (not the first) has all the global values as well?\n\nWhen constructing the individual PackedInts.Reader instances, we do identify the all 0s case and use the lightweight PackedInts.NullReader. It's great we optimize that case, but it does mean this PR doesn't make an enormous space difference.", "url": "https://github.com/apache/lucene-solr/pull/1948#discussion_r504899193", "createdAt": "2020-10-14T18:50:41Z", "author": {"login": "jtibshirani"}, "path": "lucene/core/src/java/org/apache/lucene/index/OrdinalMap.java", "diffHunk": "@@ -271,13 +273,26 @@ protected boolean lessThan(TermsEnumIndex a, TermsEnumIndex b) {\n       globalOrd++;\n     }\n \n-    this.firstSegments = firstSegments.build();\n-    this.globalOrdDeltas = globalOrdDeltas.build();\n+    long ramBytesUsed = BASE_RAM_BYTES_USED + segmentMap.ramBytesUsed();\n+    this.valueCount = globalOrd;\n+\n+    // If the first segment contains all of the global ords, then we can apply a small optimization\n+    // and hardcode the first segments and global ord deltas as all zeroes.\n+    if (ordDeltaBits.length > 0 && ordDeltaBits[0] == 0L && ordDeltas[0].size() == this.valueCount) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg2MzY2Nw=="}, "originalCommit": {"oid": "4f22cbab03d19f2c826d6d5915d86cea2957d6cc"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTgwMDM0OA==", "bodyText": "Do we (somewhere, couldn't find it here) pre-sort all segments by the cardinality descending?\n\nWe do in fact -- the segments are sorted by 'weight', which in all call sites corresponds to the number of unique terms. This was added in LUCENE-5782.\n\nAhh, so then we know the first segment will indeed have the most unique terms, and therefore the highest chance of having \"all 0s\" ord deltas.\nI think 2nd and 3rd segments also might have all 0s ord deltas?  But we can try to optimize that in a followon issue ... progress not perfection!\n\n\nDoes our PackedLongValues.monotonicBuilder already optimize for the case where it is all 0s, for the case where another segment (not the first) has all the global values as well?\n\nWhen constructing the individual PackedInts.Reader instances, we do identify the all 0s case and use the lightweight PackedInts.NullReader. It's great we optimize that case, but it does mean this PR doesn't make an enormous space difference.\n\nGot it.  Well, it's great that all these layers optimize :)", "url": "https://github.com/apache/lucene-solr/pull/1948#discussion_r505800348", "createdAt": "2020-10-15T19:51:52Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/OrdinalMap.java", "diffHunk": "@@ -271,13 +273,26 @@ protected boolean lessThan(TermsEnumIndex a, TermsEnumIndex b) {\n       globalOrd++;\n     }\n \n-    this.firstSegments = firstSegments.build();\n-    this.globalOrdDeltas = globalOrdDeltas.build();\n+    long ramBytesUsed = BASE_RAM_BYTES_USED + segmentMap.ramBytesUsed();\n+    this.valueCount = globalOrd;\n+\n+    // If the first segment contains all of the global ords, then we can apply a small optimization\n+    // and hardcode the first segments and global ord deltas as all zeroes.\n+    if (ordDeltaBits.length > 0 && ordDeltaBits[0] == 0L && ordDeltas[0].size() == this.valueCount) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg2MzY2Nw=="}, "originalCommit": {"oid": "4f22cbab03d19f2c826d6d5915d86cea2957d6cc"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTgyODM5OQ==", "bodyText": "I think 2nd and 3rd segments also might have all 0s ord deltas? But we can try to optimize that in a followon issue ... progress not perfection!\n\nI wonder if you are confused here, the proposed changes optimize the mapping from global ordinals to the ordinals of one arbitrary segment. When a segment has all value, we can simplify by always picking this segment, but there is no need to optimize this for the 2nd or 3rd segments, since we only need to be able to translate global ordinals to the ordinal of a single segment. Or maybe I'm the one confused by what you were suggesting. :)", "url": "https://github.com/apache/lucene-solr/pull/1948#discussion_r505828399", "createdAt": "2020-10-15T20:39:42Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/index/OrdinalMap.java", "diffHunk": "@@ -271,13 +273,26 @@ protected boolean lessThan(TermsEnumIndex a, TermsEnumIndex b) {\n       globalOrd++;\n     }\n \n-    this.firstSegments = firstSegments.build();\n-    this.globalOrdDeltas = globalOrdDeltas.build();\n+    long ramBytesUsed = BASE_RAM_BYTES_USED + segmentMap.ramBytesUsed();\n+    this.valueCount = globalOrd;\n+\n+    // If the first segment contains all of the global ords, then we can apply a small optimization\n+    // and hardcode the first segments and global ord deltas as all zeroes.\n+    if (ordDeltaBits.length > 0 && ordDeltaBits[0] == 0L && ordDeltas[0].size() == this.valueCount) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg2MzY2Nw=="}, "originalCommit": {"oid": "4f22cbab03d19f2c826d6d5915d86cea2957d6cc"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE3OTgyMA==", "bodyText": "Aha!  Sorry, I was indeed confused ;)\nThis is to enable \"retrieve BytesRef for this global ordinal\" use-case, right?  For that, we first pick a segment to use (the first one also containing that BytesRef), then map to its segment-local ordinal, then retrieve the BytesRef for that using the existing doc values API for that segment.\nWe do not (need to, nor) expose an API today to \"retrieve segment N's ordinal corresponding to global ordinal M\".  Only the reverse direction (segment N's ordinal M maps to global ordinal O).\nI think I understand now!", "url": "https://github.com/apache/lucene-solr/pull/1948#discussion_r515179820", "createdAt": "2020-10-30T15:25:52Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/OrdinalMap.java", "diffHunk": "@@ -271,13 +273,26 @@ protected boolean lessThan(TermsEnumIndex a, TermsEnumIndex b) {\n       globalOrd++;\n     }\n \n-    this.firstSegments = firstSegments.build();\n-    this.globalOrdDeltas = globalOrdDeltas.build();\n+    long ramBytesUsed = BASE_RAM_BYTES_USED + segmentMap.ramBytesUsed();\n+    this.valueCount = globalOrd;\n+\n+    // If the first segment contains all of the global ords, then we can apply a small optimization\n+    // and hardcode the first segments and global ord deltas as all zeroes.\n+    if (ordDeltaBits.length > 0 && ordDeltaBits[0] == 0L && ordDeltas[0].size() == this.valueCount) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg2MzY2Nw=="}, "originalCommit": {"oid": "4f22cbab03d19f2c826d6d5915d86cea2957d6cc"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIwOTYzOA==", "bodyText": "This is to enable \"retrieve BytesRef for this global ordinal\" use-case, right?\n\nRight!\n\nWe do not (need to, nor) expose an API today to \"retrieve segment N's ordinal corresponding to global ordinal M\"\n\nCorrect.", "url": "https://github.com/apache/lucene-solr/pull/1948#discussion_r515209638", "createdAt": "2020-10-30T16:06:41Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/index/OrdinalMap.java", "diffHunk": "@@ -271,13 +273,26 @@ protected boolean lessThan(TermsEnumIndex a, TermsEnumIndex b) {\n       globalOrd++;\n     }\n \n-    this.firstSegments = firstSegments.build();\n-    this.globalOrdDeltas = globalOrdDeltas.build();\n+    long ramBytesUsed = BASE_RAM_BYTES_USED + segmentMap.ramBytesUsed();\n+    this.valueCount = globalOrd;\n+\n+    // If the first segment contains all of the global ords, then we can apply a small optimization\n+    // and hardcode the first segments and global ord deltas as all zeroes.\n+    if (ordDeltaBits.length > 0 && ordDeltaBits[0] == 0L && ordDeltas[0].size() == this.valueCount) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg2MzY2Nw=="}, "originalCommit": {"oid": "4f22cbab03d19f2c826d6d5915d86cea2957d6cc"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjQ2MjkwOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/OrdinalMap.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNzo1MToyMFrOHhecjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxOTo0ODoyM1rOHiXfHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg2Mzg4Nw==", "bodyText": "Insert possessive quote (first segment's)?", "url": "https://github.com/apache/lucene-solr/pull/1948#discussion_r504863887", "createdAt": "2020-10-14T17:51:20Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/OrdinalMap.java", "diffHunk": "@@ -271,13 +273,26 @@ protected boolean lessThan(TermsEnumIndex a, TermsEnumIndex b) {\n       globalOrd++;\n     }\n \n-    this.firstSegments = firstSegments.build();\n-    this.globalOrdDeltas = globalOrdDeltas.build();\n+    long ramBytesUsed = BASE_RAM_BYTES_USED + segmentMap.ramBytesUsed();\n+    this.valueCount = globalOrd;\n+\n+    // If the first segment contains all of the global ords, then we can apply a small optimization\n+    // and hardcode the first segments and global ord deltas as all zeroes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f22cbab03d19f2c826d6d5915d86cea2957d6cc"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg4ODIxMg==", "bodyText": "I don't think the possessive quote gives the right meaning? Perhaps I could say 'first segment indices' here to be more clear.", "url": "https://github.com/apache/lucene-solr/pull/1948#discussion_r504888212", "createdAt": "2020-10-14T18:32:03Z", "author": {"login": "jtibshirani"}, "path": "lucene/core/src/java/org/apache/lucene/index/OrdinalMap.java", "diffHunk": "@@ -271,13 +273,26 @@ protected boolean lessThan(TermsEnumIndex a, TermsEnumIndex b) {\n       globalOrd++;\n     }\n \n-    this.firstSegments = firstSegments.build();\n-    this.globalOrdDeltas = globalOrdDeltas.build();\n+    long ramBytesUsed = BASE_RAM_BYTES_USED + segmentMap.ramBytesUsed();\n+    this.valueCount = globalOrd;\n+\n+    // If the first segment contains all of the global ords, then we can apply a small optimization\n+    // and hardcode the first segments and global ord deltas as all zeroes.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg2Mzg4Nw=="}, "originalCommit": {"oid": "4f22cbab03d19f2c826d6d5915d86cea2957d6cc"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc5ODQzMQ==", "bodyText": "Oh I thought it was the first segment's deltas as all zeros and alos the global ord deltas as all zeros?  But I'm OK with just rewording it to make it less controversial, or even just leaving this wording!", "url": "https://github.com/apache/lucene-solr/pull/1948#discussion_r505798431", "createdAt": "2020-10-15T19:48:23Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/OrdinalMap.java", "diffHunk": "@@ -271,13 +273,26 @@ protected boolean lessThan(TermsEnumIndex a, TermsEnumIndex b) {\n       globalOrd++;\n     }\n \n-    this.firstSegments = firstSegments.build();\n-    this.globalOrdDeltas = globalOrdDeltas.build();\n+    long ramBytesUsed = BASE_RAM_BYTES_USED + segmentMap.ramBytesUsed();\n+    this.valueCount = globalOrd;\n+\n+    // If the first segment contains all of the global ords, then we can apply a small optimization\n+    // and hardcode the first segments and global ord deltas as all zeroes.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg2Mzg4Nw=="}, "originalCommit": {"oid": "4f22cbab03d19f2c826d6d5915d86cea2957d6cc"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzk4MjEzOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/test/org/apache/lucene/index/TestOrdinalMap.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNTozMToxNVrOHrUWZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjowMjo1NFrOHrVwcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE4NDIyOA==", "bodyText": "Does (would) https://issues.apache.org/jira/browse/LUCENE-9564 enforce import ordering check?", "url": "https://github.com/apache/lucene-solr/pull/1948#discussion_r515184228", "createdAt": "2020-10-30T15:31:15Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/test/org/apache/lucene/index/TestOrdinalMap.java", "diffHunk": "@@ -32,6 +28,10 @@\n import org.apache.lucene.util.RamUsageTester;\n import org.apache.lucene.util.TestUtil;\n \n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.util.HashMap;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0330e3af31c286af1a553d6169248dfec7a0b98"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIwNzI4Mw==", "bodyText": "I think it would avoid this sort of change (I use IntelliJ which autoformats  java imports at the end).", "url": "https://github.com/apache/lucene-solr/pull/1948#discussion_r515207283", "createdAt": "2020-10-30T16:02:54Z", "author": {"login": "jtibshirani"}, "path": "lucene/core/src/test/org/apache/lucene/index/TestOrdinalMap.java", "diffHunk": "@@ -32,6 +28,10 @@\n import org.apache.lucene.util.RamUsageTester;\n import org.apache.lucene.util.TestUtil;\n \n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.util.HashMap;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE4NDIyOA=="}, "originalCommit": {"oid": "a0330e3af31c286af1a553d6169248dfec7a0b98"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1121, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}