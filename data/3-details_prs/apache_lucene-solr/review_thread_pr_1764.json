{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwMzQwNzk3", "number": 1764, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOTowMTo1MlrOEaHG_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOTowMTo1MlrOEaHG_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODE0OTEwOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOTowMTo1MlrOHDVL6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMTozMzozNVrOHEUEKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1NDg5MA==", "bodyText": "why x ;)", "url": "https://github.com/apache/lucene-solr/pull/1764#discussion_r473254890", "createdAt": "2020-08-19T19:01:52Z", "author": {"login": "dnhatn"}, "path": "lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java", "diffHunk": "@@ -2023,4 +2023,44 @@ public void eval(MockDirectoryWrapper dir) throws IOException {\n \n     dir.close();\n   }\n+\n+\n+  public void testOnlyRollbackOnceOnException() throws IOException {\n+    AtomicBoolean once = new AtomicBoolean(false);\n+    InfoStream stream = new InfoStream() {\n+      @Override\n+      public void message(String component, String message) {\n+        if (\"TP\".equals(component) && \"rollback before checkpoint\".equals(message)) {\n+          if (once.compareAndSet(false, true)) {\n+            throw new RuntimeException(\"boom\");\n+          } else {\n+            throw new AssertionError(\"has been rolled back twice\");\n+          }\n+\n+        }\n+      }\n+\n+      @Override\n+      public boolean isEnabled(String component) {\n+        return \"TP\".equals(component);\n+      }\n+\n+      @Override\n+      public void close() {\n+      }\n+    };\n+    try (Directory dir = newDirectory()) {\n+      try (IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig().setInfoStream(stream)){\n+        @Override\n+        protected boolean isEnableTestPoints() {\n+          return true;\n+        }\n+      }) {\n+      }\n+    } catch (RuntimeException x) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a12e1f7f64a717360424e49bc3382d69fa08d8b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY1NDA4Mg==", "bodyText": "yeah why x.... :D", "url": "https://github.com/apache/lucene-solr/pull/1764#discussion_r473654082", "createdAt": "2020-08-20T06:39:51Z", "author": {"login": "s1monw"}, "path": "lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java", "diffHunk": "@@ -2023,4 +2023,44 @@ public void eval(MockDirectoryWrapper dir) throws IOException {\n \n     dir.close();\n   }\n+\n+\n+  public void testOnlyRollbackOnceOnException() throws IOException {\n+    AtomicBoolean once = new AtomicBoolean(false);\n+    InfoStream stream = new InfoStream() {\n+      @Override\n+      public void message(String component, String message) {\n+        if (\"TP\".equals(component) && \"rollback before checkpoint\".equals(message)) {\n+          if (once.compareAndSet(false, true)) {\n+            throw new RuntimeException(\"boom\");\n+          } else {\n+            throw new AssertionError(\"has been rolled back twice\");\n+          }\n+\n+        }\n+      }\n+\n+      @Override\n+      public boolean isEnabled(String component) {\n+        return \"TP\".equals(component);\n+      }\n+\n+      @Override\n+      public void close() {\n+      }\n+    };\n+    try (Directory dir = newDirectory()) {\n+      try (IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig().setInfoStream(stream)){\n+        @Override\n+        protected boolean isEnableTestPoints() {\n+          return true;\n+        }\n+      }) {\n+      }\n+    } catch (RuntimeException x) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1NDg5MA=="}, "originalCommit": {"oid": "1a12e1f7f64a717360424e49bc3382d69fa08d8b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY3NTc5OA==", "bodyText": "I think I have to veto this. I liked x better.", "url": "https://github.com/apache/lucene-solr/pull/1764#discussion_r473675798", "createdAt": "2020-08-20T07:07:47Z", "author": {"login": "dweiss"}, "path": "lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java", "diffHunk": "@@ -2023,4 +2023,44 @@ public void eval(MockDirectoryWrapper dir) throws IOException {\n \n     dir.close();\n   }\n+\n+\n+  public void testOnlyRollbackOnceOnException() throws IOException {\n+    AtomicBoolean once = new AtomicBoolean(false);\n+    InfoStream stream = new InfoStream() {\n+      @Override\n+      public void message(String component, String message) {\n+        if (\"TP\".equals(component) && \"rollback before checkpoint\".equals(message)) {\n+          if (once.compareAndSet(false, true)) {\n+            throw new RuntimeException(\"boom\");\n+          } else {\n+            throw new AssertionError(\"has been rolled back twice\");\n+          }\n+\n+        }\n+      }\n+\n+      @Override\n+      public boolean isEnabled(String component) {\n+        return \"TP\".equals(component);\n+      }\n+\n+      @Override\n+      public void close() {\n+      }\n+    };\n+    try (Directory dir = newDirectory()) {\n+      try (IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig().setInfoStream(stream)){\n+        @Override\n+        protected boolean isEnableTestPoints() {\n+          return true;\n+        }\n+      }) {\n+      }\n+    } catch (RuntimeException x) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1NDg5MA=="}, "originalCommit": {"oid": "1a12e1f7f64a717360424e49bc3382d69fa08d8b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY4MTIxNQ==", "bodyText": "let the bikeshedding begin \ud83d\udc6f I call a vote...", "url": "https://github.com/apache/lucene-solr/pull/1764#discussion_r473681215", "createdAt": "2020-08-20T07:14:19Z", "author": {"login": "s1monw"}, "path": "lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java", "diffHunk": "@@ -2023,4 +2023,44 @@ public void eval(MockDirectoryWrapper dir) throws IOException {\n \n     dir.close();\n   }\n+\n+\n+  public void testOnlyRollbackOnceOnException() throws IOException {\n+    AtomicBoolean once = new AtomicBoolean(false);\n+    InfoStream stream = new InfoStream() {\n+      @Override\n+      public void message(String component, String message) {\n+        if (\"TP\".equals(component) && \"rollback before checkpoint\".equals(message)) {\n+          if (once.compareAndSet(false, true)) {\n+            throw new RuntimeException(\"boom\");\n+          } else {\n+            throw new AssertionError(\"has been rolled back twice\");\n+          }\n+\n+        }\n+      }\n+\n+      @Override\n+      public boolean isEnabled(String component) {\n+        return \"TP\".equals(component);\n+      }\n+\n+      @Override\n+      public void close() {\n+      }\n+    };\n+    try (Directory dir = newDirectory()) {\n+      try (IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig().setInfoStream(stream)){\n+        @Override\n+        protected boolean isEnableTestPoints() {\n+          return true;\n+        }\n+      }) {\n+      }\n+    } catch (RuntimeException x) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1NDg5MA=="}, "originalCommit": {"oid": "1a12e1f7f64a717360424e49bc3382d69fa08d8b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY4MzQ3OQ==", "bodyText": "In the spirit peaceful atmosphere: let's call it e + x = \"ex\"...", "url": "https://github.com/apache/lucene-solr/pull/1764#discussion_r473683479", "createdAt": "2020-08-20T07:17:10Z", "author": {"login": "dweiss"}, "path": "lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java", "diffHunk": "@@ -2023,4 +2023,44 @@ public void eval(MockDirectoryWrapper dir) throws IOException {\n \n     dir.close();\n   }\n+\n+\n+  public void testOnlyRollbackOnceOnException() throws IOException {\n+    AtomicBoolean once = new AtomicBoolean(false);\n+    InfoStream stream = new InfoStream() {\n+      @Override\n+      public void message(String component, String message) {\n+        if (\"TP\".equals(component) && \"rollback before checkpoint\".equals(message)) {\n+          if (once.compareAndSet(false, true)) {\n+            throw new RuntimeException(\"boom\");\n+          } else {\n+            throw new AssertionError(\"has been rolled back twice\");\n+          }\n+\n+        }\n+      }\n+\n+      @Override\n+      public boolean isEnabled(String component) {\n+        return \"TP\".equals(component);\n+      }\n+\n+      @Override\n+      public void close() {\n+      }\n+    };\n+    try (Directory dir = newDirectory()) {\n+      try (IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig().setInfoStream(stream)){\n+        @Override\n+        protected boolean isEnableTestPoints() {\n+          return true;\n+        }\n+      }) {\n+      }\n+    } catch (RuntimeException x) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1NDg5MA=="}, "originalCommit": {"oid": "1a12e1f7f64a717360424e49bc3382d69fa08d8b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI4NTA5OQ==", "bodyText": "I'm really happy there were no votes for runtimeException (IDE generated code fancult vote)", "url": "https://github.com/apache/lucene-solr/pull/1764#discussion_r474285099", "createdAt": "2020-08-20T21:33:35Z", "author": {"login": "msokolov"}, "path": "lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java", "diffHunk": "@@ -2023,4 +2023,44 @@ public void eval(MockDirectoryWrapper dir) throws IOException {\n \n     dir.close();\n   }\n+\n+\n+  public void testOnlyRollbackOnceOnException() throws IOException {\n+    AtomicBoolean once = new AtomicBoolean(false);\n+    InfoStream stream = new InfoStream() {\n+      @Override\n+      public void message(String component, String message) {\n+        if (\"TP\".equals(component) && \"rollback before checkpoint\".equals(message)) {\n+          if (once.compareAndSet(false, true)) {\n+            throw new RuntimeException(\"boom\");\n+          } else {\n+            throw new AssertionError(\"has been rolled back twice\");\n+          }\n+\n+        }\n+      }\n+\n+      @Override\n+      public boolean isEnabled(String component) {\n+        return \"TP\".equals(component);\n+      }\n+\n+      @Override\n+      public void close() {\n+      }\n+    };\n+    try (Directory dir = newDirectory()) {\n+      try (IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig().setInfoStream(stream)){\n+        @Override\n+        protected boolean isEnableTestPoints() {\n+          return true;\n+        }\n+      }) {\n+      }\n+    } catch (RuntimeException x) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1NDg5MA=="}, "originalCommit": {"oid": "1a12e1f7f64a717360424e49bc3382d69fa08d8b"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1308, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}