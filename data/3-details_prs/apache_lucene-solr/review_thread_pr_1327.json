{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NzkwMjgz", "number": 1327, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxOTozODoxMVrODmDDBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMzo1OToyOFrODsr8aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjIyNDA1OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/handler/admin/ZkRead.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxOTozODoxMVrOFzRYzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxOTozODoxMVrOFzRYzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNjU3NA==", "bodyText": "The name of this class is not very representative. Also, all ZooKeeper handlers are called ZooKeeper..., we should keep that for consistency", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r389306574", "createdAt": "2020-03-07T19:38:11Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZkRead.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.solr.api.Command;\n+import org.apache.solr.api.EndPoint;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.BinaryResponseParser;\n+import org.apache.solr.common.MapWriter;\n+import org.apache.solr.common.params.CommonParams;\n+import org.apache.solr.common.params.MapSolrParams;\n+import org.apache.solr.common.params.SolrParams;\n+import org.apache.solr.common.util.ContentStreamBase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.solr.core.CoreContainer;\n+import org.apache.solr.request.SolrQueryRequest;\n+import org.apache.solr.response.SolrQueryResponse;\n+import org.apache.zookeeper.data.Stat;\n+\n+import static org.apache.solr.common.params.CommonParams.OMIT_HEADER;\n+import static org.apache.solr.common.params.CommonParams.WT;\n+import static org.apache.solr.response.RawResponseWriter.CONTENT;\n+import static org.apache.solr.security.PermissionNameProvider.Name.COLL_READ_PERM;\n+\n+/**Exposes the content of the Zookeeper\n+ * This is an expert feature that exposes the data inside the back end zookeeper.This API may change or\n+ * be removed in future versions.\n+ * This is not a public API. The data that is returned is not guaranteed to remain same\n+ * across releases, as the data stored in Zookeeper may change from time to time.\n+ */\n+@EndPoint(path = \"/cluster/zk/*\",\n+    method = SolrRequest.METHOD.GET,\n+    permission = COLL_READ_PERM)\n+public class ZkRead {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjIyNDE4OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/handler/admin/ZkRead.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxOTozODozMFrOFzRY4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMjoyODoxOFrOGDHdnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNjU5Mg==", "bodyText": "Do we need to keep the CoreContainer? is the zkClient enough?", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r389306592", "createdAt": "2020-03-07T19:38:30Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZkRead.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.solr.api.Command;\n+import org.apache.solr.api.EndPoint;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.BinaryResponseParser;\n+import org.apache.solr.common.MapWriter;\n+import org.apache.solr.common.params.CommonParams;\n+import org.apache.solr.common.params.MapSolrParams;\n+import org.apache.solr.common.params.SolrParams;\n+import org.apache.solr.common.util.ContentStreamBase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.solr.core.CoreContainer;\n+import org.apache.solr.request.SolrQueryRequest;\n+import org.apache.solr.response.SolrQueryResponse;\n+import org.apache.zookeeper.data.Stat;\n+\n+import static org.apache.solr.common.params.CommonParams.OMIT_HEADER;\n+import static org.apache.solr.common.params.CommonParams.WT;\n+import static org.apache.solr.response.RawResponseWriter.CONTENT;\n+import static org.apache.solr.security.PermissionNameProvider.Name.COLL_READ_PERM;\n+\n+/**Exposes the content of the Zookeeper\n+ * This is an expert feature that exposes the data inside the back end zookeeper.This API may change or\n+ * be removed in future versions.\n+ * This is not a public API. The data that is returned is not guaranteed to remain same\n+ * across releases, as the data stored in Zookeeper may change from time to time.\n+ */\n+@EndPoint(path = \"/cluster/zk/*\",\n+    method = SolrRequest.METHOD.GET,\n+    permission = COLL_READ_PERM)\n+public class ZkRead {\n+  private final CoreContainer coreContainer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQxODg3Nw==", "bodyText": "The zkclient may get closed or recreated. Always safer to get the current one", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r395418877", "createdAt": "2020-03-20T02:53:39Z", "author": {"login": "noblepaul"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZkRead.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.solr.api.Command;\n+import org.apache.solr.api.EndPoint;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.BinaryResponseParser;\n+import org.apache.solr.common.MapWriter;\n+import org.apache.solr.common.params.CommonParams;\n+import org.apache.solr.common.params.MapSolrParams;\n+import org.apache.solr.common.params.SolrParams;\n+import org.apache.solr.common.util.ContentStreamBase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.solr.core.CoreContainer;\n+import org.apache.solr.request.SolrQueryRequest;\n+import org.apache.solr.response.SolrQueryResponse;\n+import org.apache.zookeeper.data.Stat;\n+\n+import static org.apache.solr.common.params.CommonParams.OMIT_HEADER;\n+import static org.apache.solr.common.params.CommonParams.WT;\n+import static org.apache.solr.response.RawResponseWriter.CONTENT;\n+import static org.apache.solr.security.PermissionNameProvider.Name.COLL_READ_PERM;\n+\n+/**Exposes the content of the Zookeeper\n+ * This is an expert feature that exposes the data inside the back end zookeeper.This API may change or\n+ * be removed in future versions.\n+ * This is not a public API. The data that is returned is not guaranteed to remain same\n+ * across releases, as the data stored in Zookeeper may change from time to time.\n+ */\n+@EndPoint(path = \"/cluster/zk/*\",\n+    method = SolrRequest.METHOD.GET,\n+    permission = COLL_READ_PERM)\n+public class ZkRead {\n+  private final CoreContainer coreContainer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNjU5Mg=="}, "originalCommit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc5ODkxMw==", "bodyText": "Ah, true. The problem is that, by requiring the CoreContainer you are making this much more difficult to test (which is why I guess you are starting a Solr cluster just to test this handler). Maybe there is a way to improve the design to improve tests", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r395798913", "createdAt": "2020-03-20T17:50:02Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZkRead.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.solr.api.Command;\n+import org.apache.solr.api.EndPoint;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.BinaryResponseParser;\n+import org.apache.solr.common.MapWriter;\n+import org.apache.solr.common.params.CommonParams;\n+import org.apache.solr.common.params.MapSolrParams;\n+import org.apache.solr.common.params.SolrParams;\n+import org.apache.solr.common.util.ContentStreamBase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.solr.core.CoreContainer;\n+import org.apache.solr.request.SolrQueryRequest;\n+import org.apache.solr.response.SolrQueryResponse;\n+import org.apache.zookeeper.data.Stat;\n+\n+import static org.apache.solr.common.params.CommonParams.OMIT_HEADER;\n+import static org.apache.solr.common.params.CommonParams.WT;\n+import static org.apache.solr.response.RawResponseWriter.CONTENT;\n+import static org.apache.solr.security.PermissionNameProvider.Name.COLL_READ_PERM;\n+\n+/**Exposes the content of the Zookeeper\n+ * This is an expert feature that exposes the data inside the back end zookeeper.This API may change or\n+ * be removed in future versions.\n+ * This is not a public API. The data that is returned is not guaranteed to remain same\n+ * across releases, as the data stored in Zookeeper may change from time to time.\n+ */\n+@EndPoint(path = \"/cluster/zk/*\",\n+    method = SolrRequest.METHOD.GET,\n+    permission = COLL_READ_PERM)\n+public class ZkRead {\n+  private final CoreContainer coreContainer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNjU5Mg=="}, "originalCommit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ5NDM5Mw==", "bodyText": "Have you given any thoughts to this? It's unfortunate to have a feature that has so little (nothing really) to do with other parts of Solr to have to start a full SolrCloud cluster to be able to test.", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r400494393", "createdAt": "2020-03-30T21:07:26Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZkRead.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.solr.api.Command;\n+import org.apache.solr.api.EndPoint;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.BinaryResponseParser;\n+import org.apache.solr.common.MapWriter;\n+import org.apache.solr.common.params.CommonParams;\n+import org.apache.solr.common.params.MapSolrParams;\n+import org.apache.solr.common.params.SolrParams;\n+import org.apache.solr.common.util.ContentStreamBase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.solr.core.CoreContainer;\n+import org.apache.solr.request.SolrQueryRequest;\n+import org.apache.solr.response.SolrQueryResponse;\n+import org.apache.zookeeper.data.Stat;\n+\n+import static org.apache.solr.common.params.CommonParams.OMIT_HEADER;\n+import static org.apache.solr.common.params.CommonParams.WT;\n+import static org.apache.solr.response.RawResponseWriter.CONTENT;\n+import static org.apache.solr.security.PermissionNameProvider.Name.COLL_READ_PERM;\n+\n+/**Exposes the content of the Zookeeper\n+ * This is an expert feature that exposes the data inside the back end zookeeper.This API may change or\n+ * be removed in future versions.\n+ * This is not a public API. The data that is returned is not guaranteed to remain same\n+ * across releases, as the data stored in Zookeeper may change from time to time.\n+ */\n+@EndPoint(path = \"/cluster/zk/*\",\n+    method = SolrRequest.METHOD.GET,\n+    permission = COLL_READ_PERM)\n+public class ZkRead {\n+  private final CoreContainer coreContainer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNjU5Mg=="}, "originalCommit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkyMTE4Mw==", "bodyText": "We should probably  support a Supplier<ZkClient>.", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r405921183", "createdAt": "2020-04-09T02:28:18Z", "author": {"login": "noblepaul"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZkRead.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.solr.api.Command;\n+import org.apache.solr.api.EndPoint;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.BinaryResponseParser;\n+import org.apache.solr.common.MapWriter;\n+import org.apache.solr.common.params.CommonParams;\n+import org.apache.solr.common.params.MapSolrParams;\n+import org.apache.solr.common.params.SolrParams;\n+import org.apache.solr.common.util.ContentStreamBase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.solr.core.CoreContainer;\n+import org.apache.solr.request.SolrQueryRequest;\n+import org.apache.solr.response.SolrQueryResponse;\n+import org.apache.zookeeper.data.Stat;\n+\n+import static org.apache.solr.common.params.CommonParams.OMIT_HEADER;\n+import static org.apache.solr.common.params.CommonParams.WT;\n+import static org.apache.solr.response.RawResponseWriter.CONTENT;\n+import static org.apache.solr.security.PermissionNameProvider.Name.COLL_READ_PERM;\n+\n+/**Exposes the content of the Zookeeper\n+ * This is an expert feature that exposes the data inside the back end zookeeper.This API may change or\n+ * be removed in future versions.\n+ * This is not a public API. The data that is returned is not guaranteed to remain same\n+ * across releases, as the data stored in Zookeeper may change from time to time.\n+ */\n+@EndPoint(path = \"/cluster/zk/*\",\n+    method = SolrRequest.METHOD.GET,\n+    permission = COLL_READ_PERM)\n+public class ZkRead {\n+  private final CoreContainer coreContainer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNjU5Mg=="}, "originalCommit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjIyNDg1OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/handler/admin/ZkRead.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxOTozOToyNFrOFzRZLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMjo1NDo0NVrOF5GdlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNjY3MQ==", "bodyText": "you mean \"s\" or s? Also, the idea here is that we'll add an error per child?", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r389306671", "createdAt": "2020-03-07T19:39:24Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZkRead.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.solr.api.Command;\n+import org.apache.solr.api.EndPoint;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.BinaryResponseParser;\n+import org.apache.solr.common.MapWriter;\n+import org.apache.solr.common.params.CommonParams;\n+import org.apache.solr.common.params.MapSolrParams;\n+import org.apache.solr.common.params.SolrParams;\n+import org.apache.solr.common.util.ContentStreamBase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.solr.core.CoreContainer;\n+import org.apache.solr.request.SolrQueryRequest;\n+import org.apache.solr.response.SolrQueryResponse;\n+import org.apache.zookeeper.data.Stat;\n+\n+import static org.apache.solr.common.params.CommonParams.OMIT_HEADER;\n+import static org.apache.solr.common.params.CommonParams.WT;\n+import static org.apache.solr.response.RawResponseWriter.CONTENT;\n+import static org.apache.solr.security.PermissionNameProvider.Name.COLL_READ_PERM;\n+\n+/**Exposes the content of the Zookeeper\n+ * This is an expert feature that exposes the data inside the back end zookeeper.This API may change or\n+ * be removed in future versions.\n+ * This is not a public API. The data that is returned is not guaranteed to remain same\n+ * across releases, as the data stored in Zookeeper may change from time to time.\n+ */\n+@EndPoint(path = \"/cluster/zk/*\",\n+    method = SolrRequest.METHOD.GET,\n+    permission = COLL_READ_PERM)\n+public class ZkRead {\n+  private final CoreContainer coreContainer;\n+\n+  public ZkRead(CoreContainer coreContainer) {\n+    this.coreContainer = coreContainer;\n+  }\n+\n+  @Command\n+  public void get(SolrQueryRequest req, SolrQueryResponse rsp) {\n+    String path = req.getPathTemplateValues().get(\"*\");\n+    if (path == null || path.isEmpty()) path = \"/\";\n+    byte[] d = null;\n+    try {\n+      List<String> l = coreContainer.getZkController().getZkClient().getChildren(path, null, false);\n+      if (l != null && !l.isEmpty()) {\n+        String prefix = path.endsWith(\"/\") ? path : path + \"/\";\n+\n+        rsp.add(path, (MapWriter) ew -> {\n+          for (String s : l) {\n+            try {\n+              Stat stat = coreContainer.getZkController().getZkClient().exists(prefix + s, null, false);\n+              ew.put(s, (MapWriter) ew1 -> {\n+                ew1.put(\"version\", stat.getVersion());\n+                ew1.put(\"aversion\", stat.getAversion());\n+                ew1.put(\"children\", stat.getNumChildren());\n+                ew1.put(\"ctime\", stat.getCtime());\n+                ew1.put(\"cversion\", stat.getCversion());\n+                ew1.put(\"czxid\", stat.getCzxid());\n+                ew1.put(\"ephemeralOwner\", stat.getEphemeralOwner());\n+                ew1.put(\"mtime\", stat.getMtime());\n+                ew1.put(\"mzxid\", stat.getMzxid());\n+                ew1.put(\"pzxid\", stat.getPzxid());\n+                ew1.put(\"dataLength\", stat.getDataLength());\n+              });\n+            } catch (Exception e) {\n+              ew.put(\"s\", Collections.singletonMap(\"error\", e.getMessage()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQxOTAyOQ==", "bodyText": "good catch. it was supposed to be s", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r395419029", "createdAt": "2020-03-20T02:54:45Z", "author": {"login": "noblepaul"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZkRead.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.solr.api.Command;\n+import org.apache.solr.api.EndPoint;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.BinaryResponseParser;\n+import org.apache.solr.common.MapWriter;\n+import org.apache.solr.common.params.CommonParams;\n+import org.apache.solr.common.params.MapSolrParams;\n+import org.apache.solr.common.params.SolrParams;\n+import org.apache.solr.common.util.ContentStreamBase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.solr.core.CoreContainer;\n+import org.apache.solr.request.SolrQueryRequest;\n+import org.apache.solr.response.SolrQueryResponse;\n+import org.apache.zookeeper.data.Stat;\n+\n+import static org.apache.solr.common.params.CommonParams.OMIT_HEADER;\n+import static org.apache.solr.common.params.CommonParams.WT;\n+import static org.apache.solr.response.RawResponseWriter.CONTENT;\n+import static org.apache.solr.security.PermissionNameProvider.Name.COLL_READ_PERM;\n+\n+/**Exposes the content of the Zookeeper\n+ * This is an expert feature that exposes the data inside the back end zookeeper.This API may change or\n+ * be removed in future versions.\n+ * This is not a public API. The data that is returned is not guaranteed to remain same\n+ * across releases, as the data stored in Zookeeper may change from time to time.\n+ */\n+@EndPoint(path = \"/cluster/zk/*\",\n+    method = SolrRequest.METHOD.GET,\n+    permission = COLL_READ_PERM)\n+public class ZkRead {\n+  private final CoreContainer coreContainer;\n+\n+  public ZkRead(CoreContainer coreContainer) {\n+    this.coreContainer = coreContainer;\n+  }\n+\n+  @Command\n+  public void get(SolrQueryRequest req, SolrQueryResponse rsp) {\n+    String path = req.getPathTemplateValues().get(\"*\");\n+    if (path == null || path.isEmpty()) path = \"/\";\n+    byte[] d = null;\n+    try {\n+      List<String> l = coreContainer.getZkController().getZkClient().getChildren(path, null, false);\n+      if (l != null && !l.isEmpty()) {\n+        String prefix = path.endsWith(\"/\") ? path : path + \"/\";\n+\n+        rsp.add(path, (MapWriter) ew -> {\n+          for (String s : l) {\n+            try {\n+              Stat stat = coreContainer.getZkController().getZkClient().exists(prefix + s, null, false);\n+              ew.put(s, (MapWriter) ew1 -> {\n+                ew1.put(\"version\", stat.getVersion());\n+                ew1.put(\"aversion\", stat.getAversion());\n+                ew1.put(\"children\", stat.getNumChildren());\n+                ew1.put(\"ctime\", stat.getCtime());\n+                ew1.put(\"cversion\", stat.getCversion());\n+                ew1.put(\"czxid\", stat.getCzxid());\n+                ew1.put(\"ephemeralOwner\", stat.getEphemeralOwner());\n+                ew1.put(\"mtime\", stat.getMtime());\n+                ew1.put(\"mzxid\", stat.getMzxid());\n+                ew1.put(\"pzxid\", stat.getPzxid());\n+                ew1.put(\"dataLength\", stat.getDataLength());\n+              });\n+            } catch (Exception e) {\n+              ew.put(\"s\", Collections.singletonMap(\"error\", e.getMessage()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNjY3MQ=="}, "originalCommit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjIyNTE3OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/handler/admin/ZkRead.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxOTo0MDozMlrOFzRZXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMjozOTo0N1rOGDHo0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNjcxNg==", "bodyText": "Why are you catching Exception here? instead of a subclass? Also, exists throws interrupted exception, you should interrupt (and break)", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r389306716", "createdAt": "2020-03-07T19:40:32Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZkRead.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.solr.api.Command;\n+import org.apache.solr.api.EndPoint;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.BinaryResponseParser;\n+import org.apache.solr.common.MapWriter;\n+import org.apache.solr.common.params.CommonParams;\n+import org.apache.solr.common.params.MapSolrParams;\n+import org.apache.solr.common.params.SolrParams;\n+import org.apache.solr.common.util.ContentStreamBase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.solr.core.CoreContainer;\n+import org.apache.solr.request.SolrQueryRequest;\n+import org.apache.solr.response.SolrQueryResponse;\n+import org.apache.zookeeper.data.Stat;\n+\n+import static org.apache.solr.common.params.CommonParams.OMIT_HEADER;\n+import static org.apache.solr.common.params.CommonParams.WT;\n+import static org.apache.solr.response.RawResponseWriter.CONTENT;\n+import static org.apache.solr.security.PermissionNameProvider.Name.COLL_READ_PERM;\n+\n+/**Exposes the content of the Zookeeper\n+ * This is an expert feature that exposes the data inside the back end zookeeper.This API may change or\n+ * be removed in future versions.\n+ * This is not a public API. The data that is returned is not guaranteed to remain same\n+ * across releases, as the data stored in Zookeeper may change from time to time.\n+ */\n+@EndPoint(path = \"/cluster/zk/*\",\n+    method = SolrRequest.METHOD.GET,\n+    permission = COLL_READ_PERM)\n+public class ZkRead {\n+  private final CoreContainer coreContainer;\n+\n+  public ZkRead(CoreContainer coreContainer) {\n+    this.coreContainer = coreContainer;\n+  }\n+\n+  @Command\n+  public void get(SolrQueryRequest req, SolrQueryResponse rsp) {\n+    String path = req.getPathTemplateValues().get(\"*\");\n+    if (path == null || path.isEmpty()) path = \"/\";\n+    byte[] d = null;\n+    try {\n+      List<String> l = coreContainer.getZkController().getZkClient().getChildren(path, null, false);\n+      if (l != null && !l.isEmpty()) {\n+        String prefix = path.endsWith(\"/\") ? path : path + \"/\";\n+\n+        rsp.add(path, (MapWriter) ew -> {\n+          for (String s : l) {\n+            try {\n+              Stat stat = coreContainer.getZkController().getZkClient().exists(prefix + s, null, false);\n+              ew.put(s, (MapWriter) ew1 -> {\n+                ew1.put(\"version\", stat.getVersion());\n+                ew1.put(\"aversion\", stat.getAversion());\n+                ew1.put(\"children\", stat.getNumChildren());\n+                ew1.put(\"ctime\", stat.getCtime());\n+                ew1.put(\"cversion\", stat.getCversion());\n+                ew1.put(\"czxid\", stat.getCzxid());\n+                ew1.put(\"ephemeralOwner\", stat.getEphemeralOwner());\n+                ew1.put(\"mtime\", stat.getMtime());\n+                ew1.put(\"mzxid\", stat.getMzxid());\n+                ew1.put(\"pzxid\", stat.getPzxid());\n+                ew1.put(\"dataLength\", stat.getDataLength());\n+              });\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQxOTU1NQ==", "bodyText": "does it even matter?\nWhy interrupt the thread when this thread is not doing anything at all. This is the qtp thread. Interrupting it makes no sense", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r395419555", "createdAt": "2020-03-20T02:57:33Z", "author": {"login": "noblepaul"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZkRead.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.solr.api.Command;\n+import org.apache.solr.api.EndPoint;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.BinaryResponseParser;\n+import org.apache.solr.common.MapWriter;\n+import org.apache.solr.common.params.CommonParams;\n+import org.apache.solr.common.params.MapSolrParams;\n+import org.apache.solr.common.params.SolrParams;\n+import org.apache.solr.common.util.ContentStreamBase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.solr.core.CoreContainer;\n+import org.apache.solr.request.SolrQueryRequest;\n+import org.apache.solr.response.SolrQueryResponse;\n+import org.apache.zookeeper.data.Stat;\n+\n+import static org.apache.solr.common.params.CommonParams.OMIT_HEADER;\n+import static org.apache.solr.common.params.CommonParams.WT;\n+import static org.apache.solr.response.RawResponseWriter.CONTENT;\n+import static org.apache.solr.security.PermissionNameProvider.Name.COLL_READ_PERM;\n+\n+/**Exposes the content of the Zookeeper\n+ * This is an expert feature that exposes the data inside the back end zookeeper.This API may change or\n+ * be removed in future versions.\n+ * This is not a public API. The data that is returned is not guaranteed to remain same\n+ * across releases, as the data stored in Zookeeper may change from time to time.\n+ */\n+@EndPoint(path = \"/cluster/zk/*\",\n+    method = SolrRequest.METHOD.GET,\n+    permission = COLL_READ_PERM)\n+public class ZkRead {\n+  private final CoreContainer coreContainer;\n+\n+  public ZkRead(CoreContainer coreContainer) {\n+    this.coreContainer = coreContainer;\n+  }\n+\n+  @Command\n+  public void get(SolrQueryRequest req, SolrQueryResponse rsp) {\n+    String path = req.getPathTemplateValues().get(\"*\");\n+    if (path == null || path.isEmpty()) path = \"/\";\n+    byte[] d = null;\n+    try {\n+      List<String> l = coreContainer.getZkController().getZkClient().getChildren(path, null, false);\n+      if (l != null && !l.isEmpty()) {\n+        String prefix = path.endsWith(\"/\") ? path : path + \"/\";\n+\n+        rsp.add(path, (MapWriter) ew -> {\n+          for (String s : l) {\n+            try {\n+              Stat stat = coreContainer.getZkController().getZkClient().exists(prefix + s, null, false);\n+              ew.put(s, (MapWriter) ew1 -> {\n+                ew1.put(\"version\", stat.getVersion());\n+                ew1.put(\"aversion\", stat.getAversion());\n+                ew1.put(\"children\", stat.getNumChildren());\n+                ew1.put(\"ctime\", stat.getCtime());\n+                ew1.put(\"cversion\", stat.getCversion());\n+                ew1.put(\"czxid\", stat.getCzxid());\n+                ew1.put(\"ephemeralOwner\", stat.getEphemeralOwner());\n+                ew1.put(\"mtime\", stat.getMtime());\n+                ew1.put(\"mzxid\", stat.getMzxid());\n+                ew1.put(\"pzxid\", stat.getPzxid());\n+                ew1.put(\"dataLength\", stat.getDataLength());\n+              });\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNjcxNg=="}, "originalCommit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc4NDg1Mw==", "bodyText": "This try/catch is inside a loop that makes requests to ZooKeeper. So you are saying that if the thread is interruped (shutdown, or in tests for example) the plan is to swallow that interruption and continue processing (doing requests to ZooKeeper for every child this zkpath has, with sleeps/retries), and the intention of that is to add an \"exception\" to one (just one) of the elements in the tree in the response?\nRegarding other exceptions, lets say you are getting back a SessionExpiredException, the plan is to continue iterating over all the child docs and continue adding node -> KeeperException.SessionExpiredException?\nI think the proper handling of most these exceptions is to stop processing and return an error. If you get a NoNodeException, then yes, that could be added in the response if you want, but doing a blind catch (Exception e) is a bad idea.", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r395784853", "createdAt": "2020-03-20T17:24:04Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZkRead.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.solr.api.Command;\n+import org.apache.solr.api.EndPoint;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.BinaryResponseParser;\n+import org.apache.solr.common.MapWriter;\n+import org.apache.solr.common.params.CommonParams;\n+import org.apache.solr.common.params.MapSolrParams;\n+import org.apache.solr.common.params.SolrParams;\n+import org.apache.solr.common.util.ContentStreamBase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.solr.core.CoreContainer;\n+import org.apache.solr.request.SolrQueryRequest;\n+import org.apache.solr.response.SolrQueryResponse;\n+import org.apache.zookeeper.data.Stat;\n+\n+import static org.apache.solr.common.params.CommonParams.OMIT_HEADER;\n+import static org.apache.solr.common.params.CommonParams.WT;\n+import static org.apache.solr.response.RawResponseWriter.CONTENT;\n+import static org.apache.solr.security.PermissionNameProvider.Name.COLL_READ_PERM;\n+\n+/**Exposes the content of the Zookeeper\n+ * This is an expert feature that exposes the data inside the back end zookeeper.This API may change or\n+ * be removed in future versions.\n+ * This is not a public API. The data that is returned is not guaranteed to remain same\n+ * across releases, as the data stored in Zookeeper may change from time to time.\n+ */\n+@EndPoint(path = \"/cluster/zk/*\",\n+    method = SolrRequest.METHOD.GET,\n+    permission = COLL_READ_PERM)\n+public class ZkRead {\n+  private final CoreContainer coreContainer;\n+\n+  public ZkRead(CoreContainer coreContainer) {\n+    this.coreContainer = coreContainer;\n+  }\n+\n+  @Command\n+  public void get(SolrQueryRequest req, SolrQueryResponse rsp) {\n+    String path = req.getPathTemplateValues().get(\"*\");\n+    if (path == null || path.isEmpty()) path = \"/\";\n+    byte[] d = null;\n+    try {\n+      List<String> l = coreContainer.getZkController().getZkClient().getChildren(path, null, false);\n+      if (l != null && !l.isEmpty()) {\n+        String prefix = path.endsWith(\"/\") ? path : path + \"/\";\n+\n+        rsp.add(path, (MapWriter) ew -> {\n+          for (String s : l) {\n+            try {\n+              Stat stat = coreContainer.getZkController().getZkClient().exists(prefix + s, null, false);\n+              ew.put(s, (MapWriter) ew1 -> {\n+                ew1.put(\"version\", stat.getVersion());\n+                ew1.put(\"aversion\", stat.getAversion());\n+                ew1.put(\"children\", stat.getNumChildren());\n+                ew1.put(\"ctime\", stat.getCtime());\n+                ew1.put(\"cversion\", stat.getCversion());\n+                ew1.put(\"czxid\", stat.getCzxid());\n+                ew1.put(\"ephemeralOwner\", stat.getEphemeralOwner());\n+                ew1.put(\"mtime\", stat.getMtime());\n+                ew1.put(\"mzxid\", stat.getMzxid());\n+                ew1.put(\"pzxid\", stat.getPzxid());\n+                ew1.put(\"dataLength\", stat.getDataLength());\n+              });\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNjcxNg=="}, "originalCommit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE2NDg1Nw==", "bodyText": "Please take a look at the latest\n\nNoNodeException returns with a 404\nOther Exceptions return with 500\n\nThis is supposed to just fail fast if there is a problem. It does not need to be any more sophisticated than that", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r396164857", "createdAt": "2020-03-23T00:15:34Z", "author": {"login": "noblepaul"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZkRead.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.solr.api.Command;\n+import org.apache.solr.api.EndPoint;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.BinaryResponseParser;\n+import org.apache.solr.common.MapWriter;\n+import org.apache.solr.common.params.CommonParams;\n+import org.apache.solr.common.params.MapSolrParams;\n+import org.apache.solr.common.params.SolrParams;\n+import org.apache.solr.common.util.ContentStreamBase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.solr.core.CoreContainer;\n+import org.apache.solr.request.SolrQueryRequest;\n+import org.apache.solr.response.SolrQueryResponse;\n+import org.apache.zookeeper.data.Stat;\n+\n+import static org.apache.solr.common.params.CommonParams.OMIT_HEADER;\n+import static org.apache.solr.common.params.CommonParams.WT;\n+import static org.apache.solr.response.RawResponseWriter.CONTENT;\n+import static org.apache.solr.security.PermissionNameProvider.Name.COLL_READ_PERM;\n+\n+/**Exposes the content of the Zookeeper\n+ * This is an expert feature that exposes the data inside the back end zookeeper.This API may change or\n+ * be removed in future versions.\n+ * This is not a public API. The data that is returned is not guaranteed to remain same\n+ * across releases, as the data stored in Zookeeper may change from time to time.\n+ */\n+@EndPoint(path = \"/cluster/zk/*\",\n+    method = SolrRequest.METHOD.GET,\n+    permission = COLL_READ_PERM)\n+public class ZkRead {\n+  private final CoreContainer coreContainer;\n+\n+  public ZkRead(CoreContainer coreContainer) {\n+    this.coreContainer = coreContainer;\n+  }\n+\n+  @Command\n+  public void get(SolrQueryRequest req, SolrQueryResponse rsp) {\n+    String path = req.getPathTemplateValues().get(\"*\");\n+    if (path == null || path.isEmpty()) path = \"/\";\n+    byte[] d = null;\n+    try {\n+      List<String> l = coreContainer.getZkController().getZkClient().getChildren(path, null, false);\n+      if (l != null && !l.isEmpty()) {\n+        String prefix = path.endsWith(\"/\") ? path : path + \"/\";\n+\n+        rsp.add(path, (MapWriter) ew -> {\n+          for (String s : l) {\n+            try {\n+              Stat stat = coreContainer.getZkController().getZkClient().exists(prefix + s, null, false);\n+              ew.put(s, (MapWriter) ew1 -> {\n+                ew1.put(\"version\", stat.getVersion());\n+                ew1.put(\"aversion\", stat.getAversion());\n+                ew1.put(\"children\", stat.getNumChildren());\n+                ew1.put(\"ctime\", stat.getCtime());\n+                ew1.put(\"cversion\", stat.getCversion());\n+                ew1.put(\"czxid\", stat.getCzxid());\n+                ew1.put(\"ephemeralOwner\", stat.getEphemeralOwner());\n+                ew1.put(\"mtime\", stat.getMtime());\n+                ew1.put(\"mzxid\", stat.getMzxid());\n+                ew1.put(\"pzxid\", stat.getPzxid());\n+                ew1.put(\"dataLength\", stat.getDataLength());\n+              });\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNjcxNg=="}, "originalCommit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ5MzkxNg==", "bodyText": "This is still a problem in your latest code", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r400493916", "createdAt": "2020-03-30T21:06:31Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZkRead.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.solr.api.Command;\n+import org.apache.solr.api.EndPoint;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.BinaryResponseParser;\n+import org.apache.solr.common.MapWriter;\n+import org.apache.solr.common.params.CommonParams;\n+import org.apache.solr.common.params.MapSolrParams;\n+import org.apache.solr.common.params.SolrParams;\n+import org.apache.solr.common.util.ContentStreamBase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.solr.core.CoreContainer;\n+import org.apache.solr.request.SolrQueryRequest;\n+import org.apache.solr.response.SolrQueryResponse;\n+import org.apache.zookeeper.data.Stat;\n+\n+import static org.apache.solr.common.params.CommonParams.OMIT_HEADER;\n+import static org.apache.solr.common.params.CommonParams.WT;\n+import static org.apache.solr.response.RawResponseWriter.CONTENT;\n+import static org.apache.solr.security.PermissionNameProvider.Name.COLL_READ_PERM;\n+\n+/**Exposes the content of the Zookeeper\n+ * This is an expert feature that exposes the data inside the back end zookeeper.This API may change or\n+ * be removed in future versions.\n+ * This is not a public API. The data that is returned is not guaranteed to remain same\n+ * across releases, as the data stored in Zookeeper may change from time to time.\n+ */\n+@EndPoint(path = \"/cluster/zk/*\",\n+    method = SolrRequest.METHOD.GET,\n+    permission = COLL_READ_PERM)\n+public class ZkRead {\n+  private final CoreContainer coreContainer;\n+\n+  public ZkRead(CoreContainer coreContainer) {\n+    this.coreContainer = coreContainer;\n+  }\n+\n+  @Command\n+  public void get(SolrQueryRequest req, SolrQueryResponse rsp) {\n+    String path = req.getPathTemplateValues().get(\"*\");\n+    if (path == null || path.isEmpty()) path = \"/\";\n+    byte[] d = null;\n+    try {\n+      List<String> l = coreContainer.getZkController().getZkClient().getChildren(path, null, false);\n+      if (l != null && !l.isEmpty()) {\n+        String prefix = path.endsWith(\"/\") ? path : path + \"/\";\n+\n+        rsp.add(path, (MapWriter) ew -> {\n+          for (String s : l) {\n+            try {\n+              Stat stat = coreContainer.getZkController().getZkClient().exists(prefix + s, null, false);\n+              ew.put(s, (MapWriter) ew1 -> {\n+                ew1.put(\"version\", stat.getVersion());\n+                ew1.put(\"aversion\", stat.getAversion());\n+                ew1.put(\"children\", stat.getNumChildren());\n+                ew1.put(\"ctime\", stat.getCtime());\n+                ew1.put(\"cversion\", stat.getCversion());\n+                ew1.put(\"czxid\", stat.getCzxid());\n+                ew1.put(\"ephemeralOwner\", stat.getEphemeralOwner());\n+                ew1.put(\"mtime\", stat.getMtime());\n+                ew1.put(\"mzxid\", stat.getMzxid());\n+                ew1.put(\"pzxid\", stat.getPzxid());\n+                ew1.put(\"dataLength\", stat.getDataLength());\n+              });\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNjcxNg=="}, "originalCommit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcxMjcwNA==", "bodyText": "must be fixed now", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r400712704", "createdAt": "2020-03-31T07:56:04Z", "author": {"login": "noblepaul"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZkRead.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.solr.api.Command;\n+import org.apache.solr.api.EndPoint;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.BinaryResponseParser;\n+import org.apache.solr.common.MapWriter;\n+import org.apache.solr.common.params.CommonParams;\n+import org.apache.solr.common.params.MapSolrParams;\n+import org.apache.solr.common.params.SolrParams;\n+import org.apache.solr.common.util.ContentStreamBase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.solr.core.CoreContainer;\n+import org.apache.solr.request.SolrQueryRequest;\n+import org.apache.solr.response.SolrQueryResponse;\n+import org.apache.zookeeper.data.Stat;\n+\n+import static org.apache.solr.common.params.CommonParams.OMIT_HEADER;\n+import static org.apache.solr.common.params.CommonParams.WT;\n+import static org.apache.solr.response.RawResponseWriter.CONTENT;\n+import static org.apache.solr.security.PermissionNameProvider.Name.COLL_READ_PERM;\n+\n+/**Exposes the content of the Zookeeper\n+ * This is an expert feature that exposes the data inside the back end zookeeper.This API may change or\n+ * be removed in future versions.\n+ * This is not a public API. The data that is returned is not guaranteed to remain same\n+ * across releases, as the data stored in Zookeeper may change from time to time.\n+ */\n+@EndPoint(path = \"/cluster/zk/*\",\n+    method = SolrRequest.METHOD.GET,\n+    permission = COLL_READ_PERM)\n+public class ZkRead {\n+  private final CoreContainer coreContainer;\n+\n+  public ZkRead(CoreContainer coreContainer) {\n+    this.coreContainer = coreContainer;\n+  }\n+\n+  @Command\n+  public void get(SolrQueryRequest req, SolrQueryResponse rsp) {\n+    String path = req.getPathTemplateValues().get(\"*\");\n+    if (path == null || path.isEmpty()) path = \"/\";\n+    byte[] d = null;\n+    try {\n+      List<String> l = coreContainer.getZkController().getZkClient().getChildren(path, null, false);\n+      if (l != null && !l.isEmpty()) {\n+        String prefix = path.endsWith(\"/\") ? path : path + \"/\";\n+\n+        rsp.add(path, (MapWriter) ew -> {\n+          for (String s : l) {\n+            try {\n+              Stat stat = coreContainer.getZkController().getZkClient().exists(prefix + s, null, false);\n+              ew.put(s, (MapWriter) ew1 -> {\n+                ew1.put(\"version\", stat.getVersion());\n+                ew1.put(\"aversion\", stat.getAversion());\n+                ew1.put(\"children\", stat.getNumChildren());\n+                ew1.put(\"ctime\", stat.getCtime());\n+                ew1.put(\"cversion\", stat.getCversion());\n+                ew1.put(\"czxid\", stat.getCzxid());\n+                ew1.put(\"ephemeralOwner\", stat.getEphemeralOwner());\n+                ew1.put(\"mtime\", stat.getMtime());\n+                ew1.put(\"mzxid\", stat.getMzxid());\n+                ew1.put(\"pzxid\", stat.getPzxid());\n+                ew1.put(\"dataLength\", stat.getDataLength());\n+              });\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNjcxNg=="}, "originalCommit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk3NDI1Ng==", "bodyText": "Is not yet fixed in the list case", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r401974256", "createdAt": "2020-04-01T23:47:51Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZkRead.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.solr.api.Command;\n+import org.apache.solr.api.EndPoint;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.BinaryResponseParser;\n+import org.apache.solr.common.MapWriter;\n+import org.apache.solr.common.params.CommonParams;\n+import org.apache.solr.common.params.MapSolrParams;\n+import org.apache.solr.common.params.SolrParams;\n+import org.apache.solr.common.util.ContentStreamBase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.solr.core.CoreContainer;\n+import org.apache.solr.request.SolrQueryRequest;\n+import org.apache.solr.response.SolrQueryResponse;\n+import org.apache.zookeeper.data.Stat;\n+\n+import static org.apache.solr.common.params.CommonParams.OMIT_HEADER;\n+import static org.apache.solr.common.params.CommonParams.WT;\n+import static org.apache.solr.response.RawResponseWriter.CONTENT;\n+import static org.apache.solr.security.PermissionNameProvider.Name.COLL_READ_PERM;\n+\n+/**Exposes the content of the Zookeeper\n+ * This is an expert feature that exposes the data inside the back end zookeeper.This API may change or\n+ * be removed in future versions.\n+ * This is not a public API. The data that is returned is not guaranteed to remain same\n+ * across releases, as the data stored in Zookeeper may change from time to time.\n+ */\n+@EndPoint(path = \"/cluster/zk/*\",\n+    method = SolrRequest.METHOD.GET,\n+    permission = COLL_READ_PERM)\n+public class ZkRead {\n+  private final CoreContainer coreContainer;\n+\n+  public ZkRead(CoreContainer coreContainer) {\n+    this.coreContainer = coreContainer;\n+  }\n+\n+  @Command\n+  public void get(SolrQueryRequest req, SolrQueryResponse rsp) {\n+    String path = req.getPathTemplateValues().get(\"*\");\n+    if (path == null || path.isEmpty()) path = \"/\";\n+    byte[] d = null;\n+    try {\n+      List<String> l = coreContainer.getZkController().getZkClient().getChildren(path, null, false);\n+      if (l != null && !l.isEmpty()) {\n+        String prefix = path.endsWith(\"/\") ? path : path + \"/\";\n+\n+        rsp.add(path, (MapWriter) ew -> {\n+          for (String s : l) {\n+            try {\n+              Stat stat = coreContainer.getZkController().getZkClient().exists(prefix + s, null, false);\n+              ew.put(s, (MapWriter) ew1 -> {\n+                ew1.put(\"version\", stat.getVersion());\n+                ew1.put(\"aversion\", stat.getAversion());\n+                ew1.put(\"children\", stat.getNumChildren());\n+                ew1.put(\"ctime\", stat.getCtime());\n+                ew1.put(\"cversion\", stat.getCversion());\n+                ew1.put(\"czxid\", stat.getCzxid());\n+                ew1.put(\"ephemeralOwner\", stat.getEphemeralOwner());\n+                ew1.put(\"mtime\", stat.getMtime());\n+                ew1.put(\"mzxid\", stat.getMzxid());\n+                ew1.put(\"pzxid\", stat.getPzxid());\n+                ew1.put(\"dataLength\", stat.getDataLength());\n+              });\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNjcxNg=="}, "originalCommit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkyNDA1MA==", "bodyText": "public void list(SolrQueryRequest req, SolrQueryResponse rsp) {\n      String path = req.getPathTemplateValues().get(\"*\");\n      if (path == null || path.isEmpty()) path = \"/\";\n      try {\n        List<String> l = coreContainer.getZkController().getZkClient().getChildren(path, null, false);\n        String prefix = path.endsWith(\"/\") ? path : path + \"/\";\n        rsp.add(path, (MapWriter) ew -> {\n          for (String s : l) {\n            Stat stat = null;\n            try {\n              stat = coreContainer.getZkController().getZkClient().exists(prefix + s, null, false);\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n            printStat(ew, s, stat);\n          }\n        });\n      } catch (KeeperException.NoNodeException e) {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such node :\"+ path);\n      } catch (Exception e) {\n        rsp.add(CONTENT, new ContentStreamBase.StringStream(Utils.toJSONString(Collections.singletonMap(\"error\", e.getMessage()))));\n      } finally {\n        RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n      }\n    }\n\nIf there is an exception you will see a 500 error in this code. Am I missing something?", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r405924050", "createdAt": "2020-04-09T02:39:47Z", "author": {"login": "noblepaul"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZkRead.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.solr.api.Command;\n+import org.apache.solr.api.EndPoint;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.BinaryResponseParser;\n+import org.apache.solr.common.MapWriter;\n+import org.apache.solr.common.params.CommonParams;\n+import org.apache.solr.common.params.MapSolrParams;\n+import org.apache.solr.common.params.SolrParams;\n+import org.apache.solr.common.util.ContentStreamBase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.solr.core.CoreContainer;\n+import org.apache.solr.request.SolrQueryRequest;\n+import org.apache.solr.response.SolrQueryResponse;\n+import org.apache.zookeeper.data.Stat;\n+\n+import static org.apache.solr.common.params.CommonParams.OMIT_HEADER;\n+import static org.apache.solr.common.params.CommonParams.WT;\n+import static org.apache.solr.response.RawResponseWriter.CONTENT;\n+import static org.apache.solr.security.PermissionNameProvider.Name.COLL_READ_PERM;\n+\n+/**Exposes the content of the Zookeeper\n+ * This is an expert feature that exposes the data inside the back end zookeeper.This API may change or\n+ * be removed in future versions.\n+ * This is not a public API. The data that is returned is not guaranteed to remain same\n+ * across releases, as the data stored in Zookeeper may change from time to time.\n+ */\n+@EndPoint(path = \"/cluster/zk/*\",\n+    method = SolrRequest.METHOD.GET,\n+    permission = COLL_READ_PERM)\n+public class ZkRead {\n+  private final CoreContainer coreContainer;\n+\n+  public ZkRead(CoreContainer coreContainer) {\n+    this.coreContainer = coreContainer;\n+  }\n+\n+  @Command\n+  public void get(SolrQueryRequest req, SolrQueryResponse rsp) {\n+    String path = req.getPathTemplateValues().get(\"*\");\n+    if (path == null || path.isEmpty()) path = \"/\";\n+    byte[] d = null;\n+    try {\n+      List<String> l = coreContainer.getZkController().getZkClient().getChildren(path, null, false);\n+      if (l != null && !l.isEmpty()) {\n+        String prefix = path.endsWith(\"/\") ? path : path + \"/\";\n+\n+        rsp.add(path, (MapWriter) ew -> {\n+          for (String s : l) {\n+            try {\n+              Stat stat = coreContainer.getZkController().getZkClient().exists(prefix + s, null, false);\n+              ew.put(s, (MapWriter) ew1 -> {\n+                ew1.put(\"version\", stat.getVersion());\n+                ew1.put(\"aversion\", stat.getAversion());\n+                ew1.put(\"children\", stat.getNumChildren());\n+                ew1.put(\"ctime\", stat.getCtime());\n+                ew1.put(\"cversion\", stat.getCversion());\n+                ew1.put(\"czxid\", stat.getCzxid());\n+                ew1.put(\"ephemeralOwner\", stat.getEphemeralOwner());\n+                ew1.put(\"mtime\", stat.getMtime());\n+                ew1.put(\"mzxid\", stat.getMzxid());\n+                ew1.put(\"pzxid\", stat.getPzxid());\n+                ew1.put(\"dataLength\", stat.getDataLength());\n+              });\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNjcxNg=="}, "originalCommit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjIyNTYwOnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/handler/admin/ZkRead.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxOTo0MDo1N1rOFzRZjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMjo0MDoyOVrOGDHpfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNjc2NA==", "bodyText": "Why is this needed?", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r389306764", "createdAt": "2020-03-07T19:40:57Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZkRead.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.solr.api.Command;\n+import org.apache.solr.api.EndPoint;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.BinaryResponseParser;\n+import org.apache.solr.common.MapWriter;\n+import org.apache.solr.common.params.CommonParams;\n+import org.apache.solr.common.params.MapSolrParams;\n+import org.apache.solr.common.params.SolrParams;\n+import org.apache.solr.common.util.ContentStreamBase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.solr.core.CoreContainer;\n+import org.apache.solr.request.SolrQueryRequest;\n+import org.apache.solr.response.SolrQueryResponse;\n+import org.apache.zookeeper.data.Stat;\n+\n+import static org.apache.solr.common.params.CommonParams.OMIT_HEADER;\n+import static org.apache.solr.common.params.CommonParams.WT;\n+import static org.apache.solr.response.RawResponseWriter.CONTENT;\n+import static org.apache.solr.security.PermissionNameProvider.Name.COLL_READ_PERM;\n+\n+/**Exposes the content of the Zookeeper\n+ * This is an expert feature that exposes the data inside the back end zookeeper.This API may change or\n+ * be removed in future versions.\n+ * This is not a public API. The data that is returned is not guaranteed to remain same\n+ * across releases, as the data stored in Zookeeper may change from time to time.\n+ */\n+@EndPoint(path = \"/cluster/zk/*\",\n+    method = SolrRequest.METHOD.GET,\n+    permission = COLL_READ_PERM)\n+public class ZkRead {\n+  private final CoreContainer coreContainer;\n+\n+  public ZkRead(CoreContainer coreContainer) {\n+    this.coreContainer = coreContainer;\n+  }\n+\n+  @Command\n+  public void get(SolrQueryRequest req, SolrQueryResponse rsp) {\n+    String path = req.getPathTemplateValues().get(\"*\");\n+    if (path == null || path.isEmpty()) path = \"/\";\n+    byte[] d = null;\n+    try {\n+      List<String> l = coreContainer.getZkController().getZkClient().getChildren(path, null, false);\n+      if (l != null && !l.isEmpty()) {\n+        String prefix = path.endsWith(\"/\") ? path : path + \"/\";\n+\n+        rsp.add(path, (MapWriter) ew -> {\n+          for (String s : l) {\n+            try {\n+              Stat stat = coreContainer.getZkController().getZkClient().exists(prefix + s, null, false);\n+              ew.put(s, (MapWriter) ew1 -> {\n+                ew1.put(\"version\", stat.getVersion());\n+                ew1.put(\"aversion\", stat.getAversion());\n+                ew1.put(\"children\", stat.getNumChildren());\n+                ew1.put(\"ctime\", stat.getCtime());\n+                ew1.put(\"cversion\", stat.getCversion());\n+                ew1.put(\"czxid\", stat.getCzxid());\n+                ew1.put(\"ephemeralOwner\", stat.getEphemeralOwner());\n+                ew1.put(\"mtime\", stat.getMtime());\n+                ew1.put(\"mzxid\", stat.getMzxid());\n+                ew1.put(\"pzxid\", stat.getPzxid());\n+                ew1.put(\"dataLength\", stat.getDataLength());\n+              });\n+            } catch (Exception e) {\n+              ew.put(\"s\", Collections.singletonMap(\"error\", e.getMessage()));\n+            }\n+          }\n+        });\n+\n+      } else {\n+        d = coreContainer.getZkController().getZkClient().getData(path, null, null, false);\n+        if (d == null || d.length == 0) {\n+          rsp.add(path, null);\n+          return;\n+        }\n+\n+        Map<String, String> map = new HashMap<>(1);\n+        map.put(WT, \"raw\");\n+        map.put(OMIT_HEADER, \"true\");\n+        req.setParams(SolrParams.wrapDefaults(new MapSolrParams(map), req.getParams()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQxOTkzNQ==", "bodyText": "This is important if we are ever writing out raw content that comes from ZK. We should not use any of the ResponseWriter in Solr", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r395419935", "createdAt": "2020-03-20T02:59:46Z", "author": {"login": "noblepaul"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZkRead.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.solr.api.Command;\n+import org.apache.solr.api.EndPoint;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.BinaryResponseParser;\n+import org.apache.solr.common.MapWriter;\n+import org.apache.solr.common.params.CommonParams;\n+import org.apache.solr.common.params.MapSolrParams;\n+import org.apache.solr.common.params.SolrParams;\n+import org.apache.solr.common.util.ContentStreamBase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.solr.core.CoreContainer;\n+import org.apache.solr.request.SolrQueryRequest;\n+import org.apache.solr.response.SolrQueryResponse;\n+import org.apache.zookeeper.data.Stat;\n+\n+import static org.apache.solr.common.params.CommonParams.OMIT_HEADER;\n+import static org.apache.solr.common.params.CommonParams.WT;\n+import static org.apache.solr.response.RawResponseWriter.CONTENT;\n+import static org.apache.solr.security.PermissionNameProvider.Name.COLL_READ_PERM;\n+\n+/**Exposes the content of the Zookeeper\n+ * This is an expert feature that exposes the data inside the back end zookeeper.This API may change or\n+ * be removed in future versions.\n+ * This is not a public API. The data that is returned is not guaranteed to remain same\n+ * across releases, as the data stored in Zookeeper may change from time to time.\n+ */\n+@EndPoint(path = \"/cluster/zk/*\",\n+    method = SolrRequest.METHOD.GET,\n+    permission = COLL_READ_PERM)\n+public class ZkRead {\n+  private final CoreContainer coreContainer;\n+\n+  public ZkRead(CoreContainer coreContainer) {\n+    this.coreContainer = coreContainer;\n+  }\n+\n+  @Command\n+  public void get(SolrQueryRequest req, SolrQueryResponse rsp) {\n+    String path = req.getPathTemplateValues().get(\"*\");\n+    if (path == null || path.isEmpty()) path = \"/\";\n+    byte[] d = null;\n+    try {\n+      List<String> l = coreContainer.getZkController().getZkClient().getChildren(path, null, false);\n+      if (l != null && !l.isEmpty()) {\n+        String prefix = path.endsWith(\"/\") ? path : path + \"/\";\n+\n+        rsp.add(path, (MapWriter) ew -> {\n+          for (String s : l) {\n+            try {\n+              Stat stat = coreContainer.getZkController().getZkClient().exists(prefix + s, null, false);\n+              ew.put(s, (MapWriter) ew1 -> {\n+                ew1.put(\"version\", stat.getVersion());\n+                ew1.put(\"aversion\", stat.getAversion());\n+                ew1.put(\"children\", stat.getNumChildren());\n+                ew1.put(\"ctime\", stat.getCtime());\n+                ew1.put(\"cversion\", stat.getCversion());\n+                ew1.put(\"czxid\", stat.getCzxid());\n+                ew1.put(\"ephemeralOwner\", stat.getEphemeralOwner());\n+                ew1.put(\"mtime\", stat.getMtime());\n+                ew1.put(\"mzxid\", stat.getMzxid());\n+                ew1.put(\"pzxid\", stat.getPzxid());\n+                ew1.put(\"dataLength\", stat.getDataLength());\n+              });\n+            } catch (Exception e) {\n+              ew.put(\"s\", Collections.singletonMap(\"error\", e.getMessage()));\n+            }\n+          }\n+        });\n+\n+      } else {\n+        d = coreContainer.getZkController().getZkClient().getData(path, null, null, false);\n+        if (d == null || d.length == 0) {\n+          rsp.add(path, null);\n+          return;\n+        }\n+\n+        Map<String, String> map = new HashMap<>(1);\n+        map.put(WT, \"raw\");\n+        map.put(OMIT_HEADER, \"true\");\n+        req.setParams(SolrParams.wrapDefaults(new MapSolrParams(map), req.getParams()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNjc2NA=="}, "originalCommit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwMDAyMw==", "bodyText": "Is this only the case for the situation where we write the data? what about the case of the child nodes? can those requests be written in other response formats? If this is the only format that's allowed, should we fail if another format is requested?", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r395800023", "createdAt": "2020-03-20T17:52:01Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZkRead.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.solr.api.Command;\n+import org.apache.solr.api.EndPoint;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.BinaryResponseParser;\n+import org.apache.solr.common.MapWriter;\n+import org.apache.solr.common.params.CommonParams;\n+import org.apache.solr.common.params.MapSolrParams;\n+import org.apache.solr.common.params.SolrParams;\n+import org.apache.solr.common.util.ContentStreamBase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.solr.core.CoreContainer;\n+import org.apache.solr.request.SolrQueryRequest;\n+import org.apache.solr.response.SolrQueryResponse;\n+import org.apache.zookeeper.data.Stat;\n+\n+import static org.apache.solr.common.params.CommonParams.OMIT_HEADER;\n+import static org.apache.solr.common.params.CommonParams.WT;\n+import static org.apache.solr.response.RawResponseWriter.CONTENT;\n+import static org.apache.solr.security.PermissionNameProvider.Name.COLL_READ_PERM;\n+\n+/**Exposes the content of the Zookeeper\n+ * This is an expert feature that exposes the data inside the back end zookeeper.This API may change or\n+ * be removed in future versions.\n+ * This is not a public API. The data that is returned is not guaranteed to remain same\n+ * across releases, as the data stored in Zookeeper may change from time to time.\n+ */\n+@EndPoint(path = \"/cluster/zk/*\",\n+    method = SolrRequest.METHOD.GET,\n+    permission = COLL_READ_PERM)\n+public class ZkRead {\n+  private final CoreContainer coreContainer;\n+\n+  public ZkRead(CoreContainer coreContainer) {\n+    this.coreContainer = coreContainer;\n+  }\n+\n+  @Command\n+  public void get(SolrQueryRequest req, SolrQueryResponse rsp) {\n+    String path = req.getPathTemplateValues().get(\"*\");\n+    if (path == null || path.isEmpty()) path = \"/\";\n+    byte[] d = null;\n+    try {\n+      List<String> l = coreContainer.getZkController().getZkClient().getChildren(path, null, false);\n+      if (l != null && !l.isEmpty()) {\n+        String prefix = path.endsWith(\"/\") ? path : path + \"/\";\n+\n+        rsp.add(path, (MapWriter) ew -> {\n+          for (String s : l) {\n+            try {\n+              Stat stat = coreContainer.getZkController().getZkClient().exists(prefix + s, null, false);\n+              ew.put(s, (MapWriter) ew1 -> {\n+                ew1.put(\"version\", stat.getVersion());\n+                ew1.put(\"aversion\", stat.getAversion());\n+                ew1.put(\"children\", stat.getNumChildren());\n+                ew1.put(\"ctime\", stat.getCtime());\n+                ew1.put(\"cversion\", stat.getCversion());\n+                ew1.put(\"czxid\", stat.getCzxid());\n+                ew1.put(\"ephemeralOwner\", stat.getEphemeralOwner());\n+                ew1.put(\"mtime\", stat.getMtime());\n+                ew1.put(\"mzxid\", stat.getMzxid());\n+                ew1.put(\"pzxid\", stat.getPzxid());\n+                ew1.put(\"dataLength\", stat.getDataLength());\n+              });\n+            } catch (Exception e) {\n+              ew.put(\"s\", Collections.singletonMap(\"error\", e.getMessage()));\n+            }\n+          }\n+        });\n+\n+      } else {\n+        d = coreContainer.getZkController().getZkClient().getData(path, null, null, false);\n+        if (d == null || d.length == 0) {\n+          rsp.add(path, null);\n+          return;\n+        }\n+\n+        Map<String, String> map = new HashMap<>(1);\n+        map.put(WT, \"raw\");\n+        map.put(OMIT_HEADER, \"true\");\n+        req.setParams(SolrParams.wrapDefaults(new MapSolrParams(map), req.getParams()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNjc2NA=="}, "originalCommit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkyMDEzNw==", "bodyText": "no if you are requesting data , you should expect raw data. it will not honour the wt param. If you request  /api/cluster/zk/list you will get response in any format that you ask for javabin , xml , json", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r405920137", "createdAt": "2020-04-09T02:24:11Z", "author": {"login": "noblepaul"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZkRead.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.solr.api.Command;\n+import org.apache.solr.api.EndPoint;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.BinaryResponseParser;\n+import org.apache.solr.common.MapWriter;\n+import org.apache.solr.common.params.CommonParams;\n+import org.apache.solr.common.params.MapSolrParams;\n+import org.apache.solr.common.params.SolrParams;\n+import org.apache.solr.common.util.ContentStreamBase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.solr.core.CoreContainer;\n+import org.apache.solr.request.SolrQueryRequest;\n+import org.apache.solr.response.SolrQueryResponse;\n+import org.apache.zookeeper.data.Stat;\n+\n+import static org.apache.solr.common.params.CommonParams.OMIT_HEADER;\n+import static org.apache.solr.common.params.CommonParams.WT;\n+import static org.apache.solr.response.RawResponseWriter.CONTENT;\n+import static org.apache.solr.security.PermissionNameProvider.Name.COLL_READ_PERM;\n+\n+/**Exposes the content of the Zookeeper\n+ * This is an expert feature that exposes the data inside the back end zookeeper.This API may change or\n+ * be removed in future versions.\n+ * This is not a public API. The data that is returned is not guaranteed to remain same\n+ * across releases, as the data stored in Zookeeper may change from time to time.\n+ */\n+@EndPoint(path = \"/cluster/zk/*\",\n+    method = SolrRequest.METHOD.GET,\n+    permission = COLL_READ_PERM)\n+public class ZkRead {\n+  private final CoreContainer coreContainer;\n+\n+  public ZkRead(CoreContainer coreContainer) {\n+    this.coreContainer = coreContainer;\n+  }\n+\n+  @Command\n+  public void get(SolrQueryRequest req, SolrQueryResponse rsp) {\n+    String path = req.getPathTemplateValues().get(\"*\");\n+    if (path == null || path.isEmpty()) path = \"/\";\n+    byte[] d = null;\n+    try {\n+      List<String> l = coreContainer.getZkController().getZkClient().getChildren(path, null, false);\n+      if (l != null && !l.isEmpty()) {\n+        String prefix = path.endsWith(\"/\") ? path : path + \"/\";\n+\n+        rsp.add(path, (MapWriter) ew -> {\n+          for (String s : l) {\n+            try {\n+              Stat stat = coreContainer.getZkController().getZkClient().exists(prefix + s, null, false);\n+              ew.put(s, (MapWriter) ew1 -> {\n+                ew1.put(\"version\", stat.getVersion());\n+                ew1.put(\"aversion\", stat.getAversion());\n+                ew1.put(\"children\", stat.getNumChildren());\n+                ew1.put(\"ctime\", stat.getCtime());\n+                ew1.put(\"cversion\", stat.getCversion());\n+                ew1.put(\"czxid\", stat.getCzxid());\n+                ew1.put(\"ephemeralOwner\", stat.getEphemeralOwner());\n+                ew1.put(\"mtime\", stat.getMtime());\n+                ew1.put(\"mzxid\", stat.getMzxid());\n+                ew1.put(\"pzxid\", stat.getPzxid());\n+                ew1.put(\"dataLength\", stat.getDataLength());\n+              });\n+            } catch (Exception e) {\n+              ew.put(\"s\", Collections.singletonMap(\"error\", e.getMessage()));\n+            }\n+          }\n+        });\n+\n+      } else {\n+        d = coreContainer.getZkController().getZkClient().getData(path, null, null, false);\n+        if (d == null || d.length == 0) {\n+          rsp.add(path, null);\n+          return;\n+        }\n+\n+        Map<String, String> map = new HashMap<>(1);\n+        map.put(WT, \"raw\");\n+        map.put(OMIT_HEADER, \"true\");\n+        req.setParams(SolrParams.wrapDefaults(new MapSolrParams(map), req.getParams()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNjc2NA=="}, "originalCommit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkyNDIyMg==", "bodyText": "yes, for list operations , you can get data in any format", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r405924222", "createdAt": "2020-04-09T02:40:29Z", "author": {"login": "noblepaul"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZkRead.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.solr.api.Command;\n+import org.apache.solr.api.EndPoint;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.BinaryResponseParser;\n+import org.apache.solr.common.MapWriter;\n+import org.apache.solr.common.params.CommonParams;\n+import org.apache.solr.common.params.MapSolrParams;\n+import org.apache.solr.common.params.SolrParams;\n+import org.apache.solr.common.util.ContentStreamBase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.solr.core.CoreContainer;\n+import org.apache.solr.request.SolrQueryRequest;\n+import org.apache.solr.response.SolrQueryResponse;\n+import org.apache.zookeeper.data.Stat;\n+\n+import static org.apache.solr.common.params.CommonParams.OMIT_HEADER;\n+import static org.apache.solr.common.params.CommonParams.WT;\n+import static org.apache.solr.response.RawResponseWriter.CONTENT;\n+import static org.apache.solr.security.PermissionNameProvider.Name.COLL_READ_PERM;\n+\n+/**Exposes the content of the Zookeeper\n+ * This is an expert feature that exposes the data inside the back end zookeeper.This API may change or\n+ * be removed in future versions.\n+ * This is not a public API. The data that is returned is not guaranteed to remain same\n+ * across releases, as the data stored in Zookeeper may change from time to time.\n+ */\n+@EndPoint(path = \"/cluster/zk/*\",\n+    method = SolrRequest.METHOD.GET,\n+    permission = COLL_READ_PERM)\n+public class ZkRead {\n+  private final CoreContainer coreContainer;\n+\n+  public ZkRead(CoreContainer coreContainer) {\n+    this.coreContainer = coreContainer;\n+  }\n+\n+  @Command\n+  public void get(SolrQueryRequest req, SolrQueryResponse rsp) {\n+    String path = req.getPathTemplateValues().get(\"*\");\n+    if (path == null || path.isEmpty()) path = \"/\";\n+    byte[] d = null;\n+    try {\n+      List<String> l = coreContainer.getZkController().getZkClient().getChildren(path, null, false);\n+      if (l != null && !l.isEmpty()) {\n+        String prefix = path.endsWith(\"/\") ? path : path + \"/\";\n+\n+        rsp.add(path, (MapWriter) ew -> {\n+          for (String s : l) {\n+            try {\n+              Stat stat = coreContainer.getZkController().getZkClient().exists(prefix + s, null, false);\n+              ew.put(s, (MapWriter) ew1 -> {\n+                ew1.put(\"version\", stat.getVersion());\n+                ew1.put(\"aversion\", stat.getAversion());\n+                ew1.put(\"children\", stat.getNumChildren());\n+                ew1.put(\"ctime\", stat.getCtime());\n+                ew1.put(\"cversion\", stat.getCversion());\n+                ew1.put(\"czxid\", stat.getCzxid());\n+                ew1.put(\"ephemeralOwner\", stat.getEphemeralOwner());\n+                ew1.put(\"mtime\", stat.getMtime());\n+                ew1.put(\"mzxid\", stat.getMzxid());\n+                ew1.put(\"pzxid\", stat.getPzxid());\n+                ew1.put(\"dataLength\", stat.getDataLength());\n+              });\n+            } catch (Exception e) {\n+              ew.put(\"s\", Collections.singletonMap(\"error\", e.getMessage()));\n+            }\n+          }\n+        });\n+\n+      } else {\n+        d = coreContainer.getZkController().getZkClient().getData(path, null, null, false);\n+        if (d == null || d.length == 0) {\n+          rsp.add(path, null);\n+          return;\n+        }\n+\n+        Map<String, String> map = new HashMap<>(1);\n+        map.put(WT, \"raw\");\n+        map.put(OMIT_HEADER, \"true\");\n+        req.setParams(SolrParams.wrapDefaults(new MapSolrParams(map), req.getParams()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNjc2NA=="}, "originalCommit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjIyNTc1OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/handler/admin/ZkRead.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxOTo0MToyNFrOFzRZow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMTowMjo1NFrOF6AbTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNjc4Nw==", "bodyText": "Same as above, we probably don't need to catch all exceptions, just the ones being thrown. And the same thing with interruption", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r389306787", "createdAt": "2020-03-07T19:41:24Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZkRead.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.solr.api.Command;\n+import org.apache.solr.api.EndPoint;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.BinaryResponseParser;\n+import org.apache.solr.common.MapWriter;\n+import org.apache.solr.common.params.CommonParams;\n+import org.apache.solr.common.params.MapSolrParams;\n+import org.apache.solr.common.params.SolrParams;\n+import org.apache.solr.common.util.ContentStreamBase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.solr.core.CoreContainer;\n+import org.apache.solr.request.SolrQueryRequest;\n+import org.apache.solr.response.SolrQueryResponse;\n+import org.apache.zookeeper.data.Stat;\n+\n+import static org.apache.solr.common.params.CommonParams.OMIT_HEADER;\n+import static org.apache.solr.common.params.CommonParams.WT;\n+import static org.apache.solr.response.RawResponseWriter.CONTENT;\n+import static org.apache.solr.security.PermissionNameProvider.Name.COLL_READ_PERM;\n+\n+/**Exposes the content of the Zookeeper\n+ * This is an expert feature that exposes the data inside the back end zookeeper.This API may change or\n+ * be removed in future versions.\n+ * This is not a public API. The data that is returned is not guaranteed to remain same\n+ * across releases, as the data stored in Zookeeper may change from time to time.\n+ */\n+@EndPoint(path = \"/cluster/zk/*\",\n+    method = SolrRequest.METHOD.GET,\n+    permission = COLL_READ_PERM)\n+public class ZkRead {\n+  private final CoreContainer coreContainer;\n+\n+  public ZkRead(CoreContainer coreContainer) {\n+    this.coreContainer = coreContainer;\n+  }\n+\n+  @Command\n+  public void get(SolrQueryRequest req, SolrQueryResponse rsp) {\n+    String path = req.getPathTemplateValues().get(\"*\");\n+    if (path == null || path.isEmpty()) path = \"/\";\n+    byte[] d = null;\n+    try {\n+      List<String> l = coreContainer.getZkController().getZkClient().getChildren(path, null, false);\n+      if (l != null && !l.isEmpty()) {\n+        String prefix = path.endsWith(\"/\") ? path : path + \"/\";\n+\n+        rsp.add(path, (MapWriter) ew -> {\n+          for (String s : l) {\n+            try {\n+              Stat stat = coreContainer.getZkController().getZkClient().exists(prefix + s, null, false);\n+              ew.put(s, (MapWriter) ew1 -> {\n+                ew1.put(\"version\", stat.getVersion());\n+                ew1.put(\"aversion\", stat.getAversion());\n+                ew1.put(\"children\", stat.getNumChildren());\n+                ew1.put(\"ctime\", stat.getCtime());\n+                ew1.put(\"cversion\", stat.getCversion());\n+                ew1.put(\"czxid\", stat.getCzxid());\n+                ew1.put(\"ephemeralOwner\", stat.getEphemeralOwner());\n+                ew1.put(\"mtime\", stat.getMtime());\n+                ew1.put(\"mzxid\", stat.getMzxid());\n+                ew1.put(\"pzxid\", stat.getPzxid());\n+                ew1.put(\"dataLength\", stat.getDataLength());\n+              });\n+            } catch (Exception e) {\n+              ew.put(\"s\", Collections.singletonMap(\"error\", e.getMessage()));\n+            }\n+          }\n+        });\n+\n+      } else {\n+        d = coreContainer.getZkController().getZkClient().getData(path, null, null, false);\n+        if (d == null || d.length == 0) {\n+          rsp.add(path, null);\n+          return;\n+        }\n+\n+        Map<String, String> map = new HashMap<>(1);\n+        map.put(WT, \"raw\");\n+        map.put(OMIT_HEADER, \"true\");\n+        req.setParams(SolrParams.wrapDefaults(new MapSolrParams(map), req.getParams()));\n+\n+\n+        rsp.add(CONTENT, new ContentStreamBase.ByteArrayStream(d, null,\n+            d[0] == '{' ? CommonParams.JSON_MIME : BinaryResponseParser.BINARY_CONTENT_TYPE));\n+\n+      }\n+\n+    } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQxOTk4NA==", "bodyText": "it does not matter in this case", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r395419984", "createdAt": "2020-03-20T03:00:07Z", "author": {"login": "noblepaul"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZkRead.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.solr.api.Command;\n+import org.apache.solr.api.EndPoint;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.BinaryResponseParser;\n+import org.apache.solr.common.MapWriter;\n+import org.apache.solr.common.params.CommonParams;\n+import org.apache.solr.common.params.MapSolrParams;\n+import org.apache.solr.common.params.SolrParams;\n+import org.apache.solr.common.util.ContentStreamBase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.solr.core.CoreContainer;\n+import org.apache.solr.request.SolrQueryRequest;\n+import org.apache.solr.response.SolrQueryResponse;\n+import org.apache.zookeeper.data.Stat;\n+\n+import static org.apache.solr.common.params.CommonParams.OMIT_HEADER;\n+import static org.apache.solr.common.params.CommonParams.WT;\n+import static org.apache.solr.response.RawResponseWriter.CONTENT;\n+import static org.apache.solr.security.PermissionNameProvider.Name.COLL_READ_PERM;\n+\n+/**Exposes the content of the Zookeeper\n+ * This is an expert feature that exposes the data inside the back end zookeeper.This API may change or\n+ * be removed in future versions.\n+ * This is not a public API. The data that is returned is not guaranteed to remain same\n+ * across releases, as the data stored in Zookeeper may change from time to time.\n+ */\n+@EndPoint(path = \"/cluster/zk/*\",\n+    method = SolrRequest.METHOD.GET,\n+    permission = COLL_READ_PERM)\n+public class ZkRead {\n+  private final CoreContainer coreContainer;\n+\n+  public ZkRead(CoreContainer coreContainer) {\n+    this.coreContainer = coreContainer;\n+  }\n+\n+  @Command\n+  public void get(SolrQueryRequest req, SolrQueryResponse rsp) {\n+    String path = req.getPathTemplateValues().get(\"*\");\n+    if (path == null || path.isEmpty()) path = \"/\";\n+    byte[] d = null;\n+    try {\n+      List<String> l = coreContainer.getZkController().getZkClient().getChildren(path, null, false);\n+      if (l != null && !l.isEmpty()) {\n+        String prefix = path.endsWith(\"/\") ? path : path + \"/\";\n+\n+        rsp.add(path, (MapWriter) ew -> {\n+          for (String s : l) {\n+            try {\n+              Stat stat = coreContainer.getZkController().getZkClient().exists(prefix + s, null, false);\n+              ew.put(s, (MapWriter) ew1 -> {\n+                ew1.put(\"version\", stat.getVersion());\n+                ew1.put(\"aversion\", stat.getAversion());\n+                ew1.put(\"children\", stat.getNumChildren());\n+                ew1.put(\"ctime\", stat.getCtime());\n+                ew1.put(\"cversion\", stat.getCversion());\n+                ew1.put(\"czxid\", stat.getCzxid());\n+                ew1.put(\"ephemeralOwner\", stat.getEphemeralOwner());\n+                ew1.put(\"mtime\", stat.getMtime());\n+                ew1.put(\"mzxid\", stat.getMzxid());\n+                ew1.put(\"pzxid\", stat.getPzxid());\n+                ew1.put(\"dataLength\", stat.getDataLength());\n+              });\n+            } catch (Exception e) {\n+              ew.put(\"s\", Collections.singletonMap(\"error\", e.getMessage()));\n+            }\n+          }\n+        });\n+\n+      } else {\n+        d = coreContainer.getZkController().getZkClient().getData(path, null, null, false);\n+        if (d == null || d.length == 0) {\n+          rsp.add(path, null);\n+          return;\n+        }\n+\n+        Map<String, String> map = new HashMap<>(1);\n+        map.put(WT, \"raw\");\n+        map.put(OMIT_HEADER, \"true\");\n+        req.setParams(SolrParams.wrapDefaults(new MapSolrParams(map), req.getParams()));\n+\n+\n+        rsp.add(CONTENT, new ContentStreamBase.ByteArrayStream(d, null,\n+            d[0] == '{' ? CommonParams.JSON_MIME : BinaryResponseParser.BINARY_CONTENT_TYPE));\n+\n+      }\n+\n+    } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNjc4Nw=="}, "originalCommit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc4NDk2Nw==", "bodyText": "It does. See my comment above", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r395784967", "createdAt": "2020-03-20T17:24:18Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZkRead.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.solr.api.Command;\n+import org.apache.solr.api.EndPoint;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.BinaryResponseParser;\n+import org.apache.solr.common.MapWriter;\n+import org.apache.solr.common.params.CommonParams;\n+import org.apache.solr.common.params.MapSolrParams;\n+import org.apache.solr.common.params.SolrParams;\n+import org.apache.solr.common.util.ContentStreamBase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.solr.core.CoreContainer;\n+import org.apache.solr.request.SolrQueryRequest;\n+import org.apache.solr.response.SolrQueryResponse;\n+import org.apache.zookeeper.data.Stat;\n+\n+import static org.apache.solr.common.params.CommonParams.OMIT_HEADER;\n+import static org.apache.solr.common.params.CommonParams.WT;\n+import static org.apache.solr.response.RawResponseWriter.CONTENT;\n+import static org.apache.solr.security.PermissionNameProvider.Name.COLL_READ_PERM;\n+\n+/**Exposes the content of the Zookeeper\n+ * This is an expert feature that exposes the data inside the back end zookeeper.This API may change or\n+ * be removed in future versions.\n+ * This is not a public API. The data that is returned is not guaranteed to remain same\n+ * across releases, as the data stored in Zookeeper may change from time to time.\n+ */\n+@EndPoint(path = \"/cluster/zk/*\",\n+    method = SolrRequest.METHOD.GET,\n+    permission = COLL_READ_PERM)\n+public class ZkRead {\n+  private final CoreContainer coreContainer;\n+\n+  public ZkRead(CoreContainer coreContainer) {\n+    this.coreContainer = coreContainer;\n+  }\n+\n+  @Command\n+  public void get(SolrQueryRequest req, SolrQueryResponse rsp) {\n+    String path = req.getPathTemplateValues().get(\"*\");\n+    if (path == null || path.isEmpty()) path = \"/\";\n+    byte[] d = null;\n+    try {\n+      List<String> l = coreContainer.getZkController().getZkClient().getChildren(path, null, false);\n+      if (l != null && !l.isEmpty()) {\n+        String prefix = path.endsWith(\"/\") ? path : path + \"/\";\n+\n+        rsp.add(path, (MapWriter) ew -> {\n+          for (String s : l) {\n+            try {\n+              Stat stat = coreContainer.getZkController().getZkClient().exists(prefix + s, null, false);\n+              ew.put(s, (MapWriter) ew1 -> {\n+                ew1.put(\"version\", stat.getVersion());\n+                ew1.put(\"aversion\", stat.getAversion());\n+                ew1.put(\"children\", stat.getNumChildren());\n+                ew1.put(\"ctime\", stat.getCtime());\n+                ew1.put(\"cversion\", stat.getCversion());\n+                ew1.put(\"czxid\", stat.getCzxid());\n+                ew1.put(\"ephemeralOwner\", stat.getEphemeralOwner());\n+                ew1.put(\"mtime\", stat.getMtime());\n+                ew1.put(\"mzxid\", stat.getMzxid());\n+                ew1.put(\"pzxid\", stat.getPzxid());\n+                ew1.put(\"dataLength\", stat.getDataLength());\n+              });\n+            } catch (Exception e) {\n+              ew.put(\"s\", Collections.singletonMap(\"error\", e.getMessage()));\n+            }\n+          }\n+        });\n+\n+      } else {\n+        d = coreContainer.getZkController().getZkClient().getData(path, null, null, false);\n+        if (d == null || d.length == 0) {\n+          rsp.add(path, null);\n+          return;\n+        }\n+\n+        Map<String, String> map = new HashMap<>(1);\n+        map.put(WT, \"raw\");\n+        map.put(OMIT_HEADER, \"true\");\n+        req.setParams(SolrParams.wrapDefaults(new MapSolrParams(map), req.getParams()));\n+\n+\n+        rsp.add(CONTENT, new ContentStreamBase.ByteArrayStream(d, null,\n+            d[0] == '{' ? CommonParams.JSON_MIME : BinaryResponseParser.BINARY_CONTENT_TYPE));\n+\n+      }\n+\n+    } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNjc4Nw=="}, "originalCommit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc4NjUzOQ==", "bodyText": "Also, wouldn't this be returning 200 OK for error cases?", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r395786539", "createdAt": "2020-03-20T17:27:16Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZkRead.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.solr.api.Command;\n+import org.apache.solr.api.EndPoint;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.BinaryResponseParser;\n+import org.apache.solr.common.MapWriter;\n+import org.apache.solr.common.params.CommonParams;\n+import org.apache.solr.common.params.MapSolrParams;\n+import org.apache.solr.common.params.SolrParams;\n+import org.apache.solr.common.util.ContentStreamBase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.solr.core.CoreContainer;\n+import org.apache.solr.request.SolrQueryRequest;\n+import org.apache.solr.response.SolrQueryResponse;\n+import org.apache.zookeeper.data.Stat;\n+\n+import static org.apache.solr.common.params.CommonParams.OMIT_HEADER;\n+import static org.apache.solr.common.params.CommonParams.WT;\n+import static org.apache.solr.response.RawResponseWriter.CONTENT;\n+import static org.apache.solr.security.PermissionNameProvider.Name.COLL_READ_PERM;\n+\n+/**Exposes the content of the Zookeeper\n+ * This is an expert feature that exposes the data inside the back end zookeeper.This API may change or\n+ * be removed in future versions.\n+ * This is not a public API. The data that is returned is not guaranteed to remain same\n+ * across releases, as the data stored in Zookeeper may change from time to time.\n+ */\n+@EndPoint(path = \"/cluster/zk/*\",\n+    method = SolrRequest.METHOD.GET,\n+    permission = COLL_READ_PERM)\n+public class ZkRead {\n+  private final CoreContainer coreContainer;\n+\n+  public ZkRead(CoreContainer coreContainer) {\n+    this.coreContainer = coreContainer;\n+  }\n+\n+  @Command\n+  public void get(SolrQueryRequest req, SolrQueryResponse rsp) {\n+    String path = req.getPathTemplateValues().get(\"*\");\n+    if (path == null || path.isEmpty()) path = \"/\";\n+    byte[] d = null;\n+    try {\n+      List<String> l = coreContainer.getZkController().getZkClient().getChildren(path, null, false);\n+      if (l != null && !l.isEmpty()) {\n+        String prefix = path.endsWith(\"/\") ? path : path + \"/\";\n+\n+        rsp.add(path, (MapWriter) ew -> {\n+          for (String s : l) {\n+            try {\n+              Stat stat = coreContainer.getZkController().getZkClient().exists(prefix + s, null, false);\n+              ew.put(s, (MapWriter) ew1 -> {\n+                ew1.put(\"version\", stat.getVersion());\n+                ew1.put(\"aversion\", stat.getAversion());\n+                ew1.put(\"children\", stat.getNumChildren());\n+                ew1.put(\"ctime\", stat.getCtime());\n+                ew1.put(\"cversion\", stat.getCversion());\n+                ew1.put(\"czxid\", stat.getCzxid());\n+                ew1.put(\"ephemeralOwner\", stat.getEphemeralOwner());\n+                ew1.put(\"mtime\", stat.getMtime());\n+                ew1.put(\"mzxid\", stat.getMzxid());\n+                ew1.put(\"pzxid\", stat.getPzxid());\n+                ew1.put(\"dataLength\", stat.getDataLength());\n+              });\n+            } catch (Exception e) {\n+              ew.put(\"s\", Collections.singletonMap(\"error\", e.getMessage()));\n+            }\n+          }\n+        });\n+\n+      } else {\n+        d = coreContainer.getZkController().getZkClient().getData(path, null, null, false);\n+        if (d == null || d.length == 0) {\n+          rsp.add(path, null);\n+          return;\n+        }\n+\n+        Map<String, String> map = new HashMap<>(1);\n+        map.put(WT, \"raw\");\n+        map.put(OMIT_HEADER, \"true\");\n+        req.setParams(SolrParams.wrapDefaults(new MapSolrParams(map), req.getParams()));\n+\n+\n+        rsp.add(CONTENT, new ContentStreamBase.ByteArrayStream(d, null,\n+            d[0] == '{' ? CommonParams.JSON_MIME : BinaryResponseParser.BINARY_CONTENT_TYPE));\n+\n+      }\n+\n+    } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNjc4Nw=="}, "originalCommit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM2ODcxOA==", "bodyText": "this is fixed", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r396368718", "createdAt": "2020-03-23T11:02:54Z", "author": {"login": "noblepaul"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZkRead.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.solr.api.Command;\n+import org.apache.solr.api.EndPoint;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.BinaryResponseParser;\n+import org.apache.solr.common.MapWriter;\n+import org.apache.solr.common.params.CommonParams;\n+import org.apache.solr.common.params.MapSolrParams;\n+import org.apache.solr.common.params.SolrParams;\n+import org.apache.solr.common.util.ContentStreamBase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.solr.core.CoreContainer;\n+import org.apache.solr.request.SolrQueryRequest;\n+import org.apache.solr.response.SolrQueryResponse;\n+import org.apache.zookeeper.data.Stat;\n+\n+import static org.apache.solr.common.params.CommonParams.OMIT_HEADER;\n+import static org.apache.solr.common.params.CommonParams.WT;\n+import static org.apache.solr.response.RawResponseWriter.CONTENT;\n+import static org.apache.solr.security.PermissionNameProvider.Name.COLL_READ_PERM;\n+\n+/**Exposes the content of the Zookeeper\n+ * This is an expert feature that exposes the data inside the back end zookeeper.This API may change or\n+ * be removed in future versions.\n+ * This is not a public API. The data that is returned is not guaranteed to remain same\n+ * across releases, as the data stored in Zookeeper may change from time to time.\n+ */\n+@EndPoint(path = \"/cluster/zk/*\",\n+    method = SolrRequest.METHOD.GET,\n+    permission = COLL_READ_PERM)\n+public class ZkRead {\n+  private final CoreContainer coreContainer;\n+\n+  public ZkRead(CoreContainer coreContainer) {\n+    this.coreContainer = coreContainer;\n+  }\n+\n+  @Command\n+  public void get(SolrQueryRequest req, SolrQueryResponse rsp) {\n+    String path = req.getPathTemplateValues().get(\"*\");\n+    if (path == null || path.isEmpty()) path = \"/\";\n+    byte[] d = null;\n+    try {\n+      List<String> l = coreContainer.getZkController().getZkClient().getChildren(path, null, false);\n+      if (l != null && !l.isEmpty()) {\n+        String prefix = path.endsWith(\"/\") ? path : path + \"/\";\n+\n+        rsp.add(path, (MapWriter) ew -> {\n+          for (String s : l) {\n+            try {\n+              Stat stat = coreContainer.getZkController().getZkClient().exists(prefix + s, null, false);\n+              ew.put(s, (MapWriter) ew1 -> {\n+                ew1.put(\"version\", stat.getVersion());\n+                ew1.put(\"aversion\", stat.getAversion());\n+                ew1.put(\"children\", stat.getNumChildren());\n+                ew1.put(\"ctime\", stat.getCtime());\n+                ew1.put(\"cversion\", stat.getCversion());\n+                ew1.put(\"czxid\", stat.getCzxid());\n+                ew1.put(\"ephemeralOwner\", stat.getEphemeralOwner());\n+                ew1.put(\"mtime\", stat.getMtime());\n+                ew1.put(\"mzxid\", stat.getMzxid());\n+                ew1.put(\"pzxid\", stat.getPzxid());\n+                ew1.put(\"dataLength\", stat.getDataLength());\n+              });\n+            } catch (Exception e) {\n+              ew.put(\"s\", Collections.singletonMap(\"error\", e.getMessage()));\n+            }\n+          }\n+        });\n+\n+      } else {\n+        d = coreContainer.getZkController().getZkClient().getData(path, null, null, false);\n+        if (d == null || d.length == 0) {\n+          rsp.add(path, null);\n+          return;\n+        }\n+\n+        Map<String, String> map = new HashMap<>(1);\n+        map.put(WT, \"raw\");\n+        map.put(OMIT_HEADER, \"true\");\n+        req.setParams(SolrParams.wrapDefaults(new MapSolrParams(map), req.getParams()));\n+\n+\n+        rsp.add(CONTENT, new ContentStreamBase.ByteArrayStream(d, null,\n+            d[0] == '{' ? CommonParams.JSON_MIME : BinaryResponseParser.BINARY_CONTENT_TYPE));\n+\n+      }\n+\n+    } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNjc4Nw=="}, "originalCommit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjIyNjMwOnYy", "diffSide": "RIGHT", "path": "solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxOTo0MjozMFrOFzRZ5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOTo1MjoxMVrOFzgnAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNjg1Mg==", "bodyText": "This test doesn't belong in ZookeeperStatusHandlerTest", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r389306852", "createdAt": "2020-03-07T19:42:30Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest.java", "diffHunk": "@@ -74,6 +78,39 @@ public void tearDown() throws Exception {\n     super.tearDown();\n   }\n \n+  @Test\n+  public void testZkread() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU1NTk3MA==", "bodyText": "That's true. ZKStatusHandler is the handler that pulls 4LW status from ZK TCP API, which is a completely different handler :)", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r389555970", "createdAt": "2020-03-09T09:52:11Z", "author": {"login": "janhoy"}, "path": "solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest.java", "diffHunk": "@@ -74,6 +78,39 @@ public void tearDown() throws Exception {\n     super.tearDown();\n   }\n \n+  @Test\n+  public void testZkread() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNjg1Mg=="}, "originalCommit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjIyNjQ5OnYy", "diffSide": "RIGHT", "path": "solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxOTo0Mjo1NlrOFzRaAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxOTo0Mjo1NlrOFzRaAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNjg4MA==", "bodyText": "nit. Fix spaces", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r389306880", "createdAt": "2020-03-07T19:42:56Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest.java", "diffHunk": "@@ -74,6 +78,39 @@ public void tearDown() throws Exception {\n     super.tearDown();\n   }\n \n+  @Test\n+  public void testZkread() throws Exception {\n+    URL baseUrl = cluster.getJettySolrRunner(0).getBaseUrl();\n+    String basezk = baseUrl.toString().replace(\"/solr\", \"/api\") + \"/cluster/zk\";\n+\n+    try(  HttpSolrClient client = new HttpSolrClient.Builder(baseUrl.toString()).build()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjIyODIwOnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/handler/admin/ZkRead.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxOTo0NTo1NFrOFzRa0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMzowMTozOVrOF5GiXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNzA5MA==", "bodyText": "Should we consider the case where znodes have data and children?", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r389307090", "createdAt": "2020-03-07T19:45:54Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZkRead.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.solr.api.Command;\n+import org.apache.solr.api.EndPoint;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.BinaryResponseParser;\n+import org.apache.solr.common.MapWriter;\n+import org.apache.solr.common.params.CommonParams;\n+import org.apache.solr.common.params.MapSolrParams;\n+import org.apache.solr.common.params.SolrParams;\n+import org.apache.solr.common.util.ContentStreamBase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.solr.core.CoreContainer;\n+import org.apache.solr.request.SolrQueryRequest;\n+import org.apache.solr.response.SolrQueryResponse;\n+import org.apache.zookeeper.data.Stat;\n+\n+import static org.apache.solr.common.params.CommonParams.OMIT_HEADER;\n+import static org.apache.solr.common.params.CommonParams.WT;\n+import static org.apache.solr.response.RawResponseWriter.CONTENT;\n+import static org.apache.solr.security.PermissionNameProvider.Name.COLL_READ_PERM;\n+\n+/**Exposes the content of the Zookeeper\n+ * This is an expert feature that exposes the data inside the back end zookeeper.This API may change or\n+ * be removed in future versions.\n+ * This is not a public API. The data that is returned is not guaranteed to remain same\n+ * across releases, as the data stored in Zookeeper may change from time to time.\n+ */\n+@EndPoint(path = \"/cluster/zk/*\",\n+    method = SolrRequest.METHOD.GET,\n+    permission = COLL_READ_PERM)\n+public class ZkRead {\n+  private final CoreContainer coreContainer;\n+\n+  public ZkRead(CoreContainer coreContainer) {\n+    this.coreContainer = coreContainer;\n+  }\n+\n+  @Command\n+  public void get(SolrQueryRequest req, SolrQueryResponse rsp) {\n+    String path = req.getPathTemplateValues().get(\"*\");\n+    if (path == null || path.isEmpty()) path = \"/\";\n+    byte[] d = null;\n+    try {\n+      List<String> l = coreContainer.getZkController().getZkClient().getChildren(path, null, false);\n+      if (l != null && !l.isEmpty()) {\n+        String prefix = path.endsWith(\"/\") ? path : path + \"/\";\n+\n+        rsp.add(path, (MapWriter) ew -> {\n+          for (String s : l) {\n+            try {\n+              Stat stat = coreContainer.getZkController().getZkClient().exists(prefix + s, null, false);\n+              ew.put(s, (MapWriter) ew1 -> {\n+                ew1.put(\"version\", stat.getVersion());\n+                ew1.put(\"aversion\", stat.getAversion());\n+                ew1.put(\"children\", stat.getNumChildren());\n+                ew1.put(\"ctime\", stat.getCtime());\n+                ew1.put(\"cversion\", stat.getCversion());\n+                ew1.put(\"czxid\", stat.getCzxid());\n+                ew1.put(\"ephemeralOwner\", stat.getEphemeralOwner());\n+                ew1.put(\"mtime\", stat.getMtime());\n+                ew1.put(\"mzxid\", stat.getMzxid());\n+                ew1.put(\"pzxid\", stat.getPzxid());\n+                ew1.put(\"dataLength\", stat.getDataLength());\n+              });\n+            } catch (Exception e) {\n+              ew.put(\"s\", Collections.singletonMap(\"error\", e.getMessage()));\n+            }\n+          }\n+        });\n+\n+      } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQyMDI1NQ==", "bodyText": "fixing it. you can explicitly request for the node data using a param leaf=true", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r395420255", "createdAt": "2020-03-20T03:01:39Z", "author": {"login": "noblepaul"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZkRead.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.solr.api.Command;\n+import org.apache.solr.api.EndPoint;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.BinaryResponseParser;\n+import org.apache.solr.common.MapWriter;\n+import org.apache.solr.common.params.CommonParams;\n+import org.apache.solr.common.params.MapSolrParams;\n+import org.apache.solr.common.params.SolrParams;\n+import org.apache.solr.common.util.ContentStreamBase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.solr.core.CoreContainer;\n+import org.apache.solr.request.SolrQueryRequest;\n+import org.apache.solr.response.SolrQueryResponse;\n+import org.apache.zookeeper.data.Stat;\n+\n+import static org.apache.solr.common.params.CommonParams.OMIT_HEADER;\n+import static org.apache.solr.common.params.CommonParams.WT;\n+import static org.apache.solr.response.RawResponseWriter.CONTENT;\n+import static org.apache.solr.security.PermissionNameProvider.Name.COLL_READ_PERM;\n+\n+/**Exposes the content of the Zookeeper\n+ * This is an expert feature that exposes the data inside the back end zookeeper.This API may change or\n+ * be removed in future versions.\n+ * This is not a public API. The data that is returned is not guaranteed to remain same\n+ * across releases, as the data stored in Zookeeper may change from time to time.\n+ */\n+@EndPoint(path = \"/cluster/zk/*\",\n+    method = SolrRequest.METHOD.GET,\n+    permission = COLL_READ_PERM)\n+public class ZkRead {\n+  private final CoreContainer coreContainer;\n+\n+  public ZkRead(CoreContainer coreContainer) {\n+    this.coreContainer = coreContainer;\n+  }\n+\n+  @Command\n+  public void get(SolrQueryRequest req, SolrQueryResponse rsp) {\n+    String path = req.getPathTemplateValues().get(\"*\");\n+    if (path == null || path.isEmpty()) path = \"/\";\n+    byte[] d = null;\n+    try {\n+      List<String> l = coreContainer.getZkController().getZkClient().getChildren(path, null, false);\n+      if (l != null && !l.isEmpty()) {\n+        String prefix = path.endsWith(\"/\") ? path : path + \"/\";\n+\n+        rsp.add(path, (MapWriter) ew -> {\n+          for (String s : l) {\n+            try {\n+              Stat stat = coreContainer.getZkController().getZkClient().exists(prefix + s, null, false);\n+              ew.put(s, (MapWriter) ew1 -> {\n+                ew1.put(\"version\", stat.getVersion());\n+                ew1.put(\"aversion\", stat.getAversion());\n+                ew1.put(\"children\", stat.getNumChildren());\n+                ew1.put(\"ctime\", stat.getCtime());\n+                ew1.put(\"cversion\", stat.getCversion());\n+                ew1.put(\"czxid\", stat.getCzxid());\n+                ew1.put(\"ephemeralOwner\", stat.getEphemeralOwner());\n+                ew1.put(\"mtime\", stat.getMtime());\n+                ew1.put(\"mzxid\", stat.getMzxid());\n+                ew1.put(\"pzxid\", stat.getPzxid());\n+                ew1.put(\"dataLength\", stat.getDataLength());\n+              });\n+            } catch (Exception e) {\n+              ew.put(\"s\", Collections.singletonMap(\"error\", e.getMessage()));\n+            }\n+          }\n+        });\n+\n+      } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNzA5MA=="}, "originalCommit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjIyOTg3OnYy", "diffSide": "RIGHT", "path": "solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxOTo0ODo1NlrOFzRbqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMjoyNDo1NFrOGDHaRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNzMwNA==", "bodyText": "why make things so complicated? cant you just put some static text? what are you trying to achieve with this randomization?", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r389307304", "createdAt": "2020-03-07T19:48:56Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest.java", "diffHunk": "@@ -74,6 +78,39 @@ public void tearDown() throws Exception {\n     super.tearDown();\n   }\n \n+  @Test\n+  public void testZkread() throws Exception {\n+    URL baseUrl = cluster.getJettySolrRunner(0).getBaseUrl();\n+    String basezk = baseUrl.toString().replace(\"/solr\", \"/api\") + \"/cluster/zk\";\n+\n+    try(  HttpSolrClient client = new HttpSolrClient.Builder(baseUrl.toString()).build()) {\n+      Object o = Utils.executeGET(client.getHttpClient(),\n+          basezk + \"/security.json\",\n+          Utils.JSONCONSUMER );\n+      assertNotNull(o);\n+      o = Utils.executeGET(client.getHttpClient(),\n+          basezk + \"/configs\",\n+          Utils.JSONCONSUMER );\n+      assertEquals(\"0\", String.valueOf(getObjectByPath(o,true, split(\":/configs:_default:dataLength\",':'))));\n+      assertEquals(\"0\", String.valueOf(getObjectByPath(o,true, split(\":/configs:conf:dataLength\",':'))));\n+      byte[] bytes = new byte[1024*5];\n+      for (int i = 0; i < bytes.length; i++) {\n+        bytes[i] = (byte) random().nextInt(128);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQyMTAxMA==", "bodyText": "this was the easiest way to create a byte[] .  could use anything else. But this code was simpler", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r395421010", "createdAt": "2020-03-20T03:06:03Z", "author": {"login": "noblepaul"}, "path": "solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest.java", "diffHunk": "@@ -74,6 +78,39 @@ public void tearDown() throws Exception {\n     super.tearDown();\n   }\n \n+  @Test\n+  public void testZkread() throws Exception {\n+    URL baseUrl = cluster.getJettySolrRunner(0).getBaseUrl();\n+    String basezk = baseUrl.toString().replace(\"/solr\", \"/api\") + \"/cluster/zk\";\n+\n+    try(  HttpSolrClient client = new HttpSolrClient.Builder(baseUrl.toString()).build()) {\n+      Object o = Utils.executeGET(client.getHttpClient(),\n+          basezk + \"/security.json\",\n+          Utils.JSONCONSUMER );\n+      assertNotNull(o);\n+      o = Utils.executeGET(client.getHttpClient(),\n+          basezk + \"/configs\",\n+          Utils.JSONCONSUMER );\n+      assertEquals(\"0\", String.valueOf(getObjectByPath(o,true, split(\":/configs:_default:dataLength\",':'))));\n+      assertEquals(\"0\", String.valueOf(getObjectByPath(o,true, split(\":/configs:conf:dataLength\",':'))));\n+      byte[] bytes = new byte[1024*5];\n+      for (int i = 0; i < bytes.length; i++) {\n+        bytes[i] = (byte) random().nextInt(128);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNzMwNA=="}, "originalCommit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc4OTg4Ng==", "bodyText": "Wait, can't you do \"this is some test content\".getBytes(StandardCharsets.UTF_8);?", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r395789886", "createdAt": "2020-03-20T17:33:13Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest.java", "diffHunk": "@@ -74,6 +78,39 @@ public void tearDown() throws Exception {\n     super.tearDown();\n   }\n \n+  @Test\n+  public void testZkread() throws Exception {\n+    URL baseUrl = cluster.getJettySolrRunner(0).getBaseUrl();\n+    String basezk = baseUrl.toString().replace(\"/solr\", \"/api\") + \"/cluster/zk\";\n+\n+    try(  HttpSolrClient client = new HttpSolrClient.Builder(baseUrl.toString()).build()) {\n+      Object o = Utils.executeGET(client.getHttpClient(),\n+          basezk + \"/security.json\",\n+          Utils.JSONCONSUMER );\n+      assertNotNull(o);\n+      o = Utils.executeGET(client.getHttpClient(),\n+          basezk + \"/configs\",\n+          Utils.JSONCONSUMER );\n+      assertEquals(\"0\", String.valueOf(getObjectByPath(o,true, split(\":/configs:_default:dataLength\",':'))));\n+      assertEquals(\"0\", String.valueOf(getObjectByPath(o,true, split(\":/configs:conf:dataLength\",':'))));\n+      byte[] bytes = new byte[1024*5];\n+      for (int i = 0; i < bytes.length; i++) {\n+        bytes[i] = (byte) random().nextInt(128);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNzMwNA=="}, "originalCommit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ5NDk4MQ==", "bodyText": "This is still unresolved. Can you clarify why we need this random byte array for the test?", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r400494981", "createdAt": "2020-03-30T21:08:21Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest.java", "diffHunk": "@@ -74,6 +78,39 @@ public void tearDown() throws Exception {\n     super.tearDown();\n   }\n \n+  @Test\n+  public void testZkread() throws Exception {\n+    URL baseUrl = cluster.getJettySolrRunner(0).getBaseUrl();\n+    String basezk = baseUrl.toString().replace(\"/solr\", \"/api\") + \"/cluster/zk\";\n+\n+    try(  HttpSolrClient client = new HttpSolrClient.Builder(baseUrl.toString()).build()) {\n+      Object o = Utils.executeGET(client.getHttpClient(),\n+          basezk + \"/security.json\",\n+          Utils.JSONCONSUMER );\n+      assertNotNull(o);\n+      o = Utils.executeGET(client.getHttpClient(),\n+          basezk + \"/configs\",\n+          Utils.JSONCONSUMER );\n+      assertEquals(\"0\", String.valueOf(getObjectByPath(o,true, split(\":/configs:_default:dataLength\",':'))));\n+      assertEquals(\"0\", String.valueOf(getObjectByPath(o,true, split(\":/configs:conf:dataLength\",':'))));\n+      byte[] bytes = new byte[1024*5];\n+      for (int i = 0; i < bytes.length; i++) {\n+        bytes[i] = (byte) random().nextInt(128);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNzMwNA=="}, "originalCommit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkyMDMyNQ==", "bodyText": "I wanted a big enough byte[] not a small one.", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r405920325", "createdAt": "2020-04-09T02:24:54Z", "author": {"login": "noblepaul"}, "path": "solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest.java", "diffHunk": "@@ -74,6 +78,39 @@ public void tearDown() throws Exception {\n     super.tearDown();\n   }\n \n+  @Test\n+  public void testZkread() throws Exception {\n+    URL baseUrl = cluster.getJettySolrRunner(0).getBaseUrl();\n+    String basezk = baseUrl.toString().replace(\"/solr\", \"/api\") + \"/cluster/zk\";\n+\n+    try(  HttpSolrClient client = new HttpSolrClient.Builder(baseUrl.toString()).build()) {\n+      Object o = Utils.executeGET(client.getHttpClient(),\n+          basezk + \"/security.json\",\n+          Utils.JSONCONSUMER );\n+      assertNotNull(o);\n+      o = Utils.executeGET(client.getHttpClient(),\n+          basezk + \"/configs\",\n+          Utils.JSONCONSUMER );\n+      assertEquals(\"0\", String.valueOf(getObjectByPath(o,true, split(\":/configs:_default:dataLength\",':'))));\n+      assertEquals(\"0\", String.valueOf(getObjectByPath(o,true, split(\":/configs:conf:dataLength\",':'))));\n+      byte[] bytes = new byte[1024*5];\n+      for (int i = 0; i < bytes.length; i++) {\n+        bytes[i] = (byte) random().nextInt(128);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNzMwNA=="}, "originalCommit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzIwMTU4OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/handler/admin/ZookeeperRead.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNzoyODo1MFrOF5c8ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNzo0MjoyMlrOF-JFrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc4NzQ1MA==", "bodyText": "Handlers of requests are typically called Handler", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r395787450", "createdAt": "2020-03-20T17:28:50Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZookeeperRead.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.solr.api.Command;\n+import org.apache.solr.api.EndPoint;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.BinaryResponseParser;\n+import org.apache.solr.common.MapWriter;\n+import org.apache.solr.common.params.CommonParams;\n+import org.apache.solr.common.params.MapSolrParams;\n+import org.apache.solr.common.params.SolrParams;\n+import org.apache.solr.common.util.ContentStreamBase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.solr.core.CoreContainer;\n+import org.apache.solr.request.SolrQueryRequest;\n+import org.apache.solr.response.SolrQueryResponse;\n+import org.apache.zookeeper.data.Stat;\n+\n+import static org.apache.solr.common.params.CommonParams.OMIT_HEADER;\n+import static org.apache.solr.common.params.CommonParams.WT;\n+import static org.apache.solr.response.RawResponseWriter.CONTENT;\n+import static org.apache.solr.security.PermissionNameProvider.Name.COLL_READ_PERM;\n+\n+/**Exposes the content of the Zookeeper\n+ * This is an expert feature that exposes the data inside the back end zookeeper.This API may change or\n+ * be removed in future versions.\n+ * This is not a public API. The data that is returned is not guaranteed to remain same\n+ * across releases, as the data stored in Zookeeper may change from time to time.\n+ */\n+@EndPoint(path = \"/cluster/zk/*\",\n+    method = SolrRequest.METHOD.GET,\n+    permission = COLL_READ_PERM)\n+public class ZookeeperRead {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aff748f1bb24f1cd256e91aff2d39b2da804736f"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcwNDk0Mw==", "bodyText": "APIs are named as *API", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r400704943", "createdAt": "2020-03-31T07:42:22Z", "author": {"login": "noblepaul"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZookeeperRead.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.solr.api.Command;\n+import org.apache.solr.api.EndPoint;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.BinaryResponseParser;\n+import org.apache.solr.common.MapWriter;\n+import org.apache.solr.common.params.CommonParams;\n+import org.apache.solr.common.params.MapSolrParams;\n+import org.apache.solr.common.params.SolrParams;\n+import org.apache.solr.common.util.ContentStreamBase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.solr.core.CoreContainer;\n+import org.apache.solr.request.SolrQueryRequest;\n+import org.apache.solr.response.SolrQueryResponse;\n+import org.apache.zookeeper.data.Stat;\n+\n+import static org.apache.solr.common.params.CommonParams.OMIT_HEADER;\n+import static org.apache.solr.common.params.CommonParams.WT;\n+import static org.apache.solr.response.RawResponseWriter.CONTENT;\n+import static org.apache.solr.security.PermissionNameProvider.Name.COLL_READ_PERM;\n+\n+/**Exposes the content of the Zookeeper\n+ * This is an expert feature that exposes the data inside the back end zookeeper.This API may change or\n+ * be removed in future versions.\n+ * This is not a public API. The data that is returned is not guaranteed to remain same\n+ * across releases, as the data stored in Zookeeper may change from time to time.\n+ */\n+@EndPoint(path = \"/cluster/zk/*\",\n+    method = SolrRequest.METHOD.GET,\n+    permission = COLL_READ_PERM)\n+public class ZookeeperRead {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc4NzQ1MA=="}, "originalCommit": {"oid": "aff748f1bb24f1cd256e91aff2d39b2da804736f"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzI1ODUxOnYy", "diffSide": "RIGHT", "path": "solr/core/src/test/org/apache/solr/handler/admin/ZookeeperReadTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNzo0Njo0NlrOF5dimw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNzo1NTo0OFrOF-Jjcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc5NzE0Nw==", "bodyText": "can you fix the compiler warnings?", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r395797147", "createdAt": "2020-03-20T17:46:46Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/test/org/apache/solr/handler/admin/ZookeeperReadTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.net.URL;\n+import java.util.Map;\n+\n+import org.apache.solr.client.solrj.impl.HttpSolrClient;\n+import org.apache.solr.cloud.SolrCloudTestCase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.zookeeper.CreateMode;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.solr.common.util.StrUtils.split;\n+import static org.apache.solr.common.util.Utils.getObjectByPath;\n+\n+public class ZookeeperReadTest extends SolrCloudTestCase {\n+  private static final Logger log = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+\n+  @BeforeClass\n+  public static void setupCluster() throws Exception {\n+    configureCluster(1)\n+        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n+        .configure();\n+  }\n+\n+  @Before\n+  @Override\n+  public void setUp() throws Exception {\n+    super.setUp();\n+  }\n+\n+  @After\n+  @Override\n+  public void tearDown() throws Exception {\n+    super.tearDown();\n+  }\n+\n+  @Test\n+  public void testZkread() throws Exception {\n+    URL baseUrl = cluster.getJettySolrRunner(0).getBaseUrl();\n+    String basezk = baseUrl.toString().replace(\"/solr\", \"/api\") + \"/cluster/zk\";\n+\n+    try (HttpSolrClient client = new HttpSolrClient.Builder(baseUrl.toString()).build()) {\n+      Object o = Utils.executeGET(client.getHttpClient(),\n+          basezk + \"/security.json\",\n+          Utils.JSONCONSUMER);\n+      assertNotNull(o);\n+      o = Utils.executeGET(client.getHttpClient(),\n+          basezk + \"/configs\",\n+          Utils.JSONCONSUMER);\n+      assertEquals(\"0\", String.valueOf(getObjectByPath(o, true, split(\":/configs:_default:dataLength\", ':'))));\n+      assertEquals(\"0\", String.valueOf(getObjectByPath(o, true, split(\":/configs:conf:dataLength\", ':'))));\n+\n+      o = Utils.executeGET(client.getHttpClient(),\n+          basezk + \"/configs?leaf=true\",\n+          Utils.JSONCONSUMER);\n+      assertTrue(((Map)o).containsKey(\"/configs\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aff748f1bb24f1cd256e91aff2d39b2da804736f"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI4ODE5Ng==", "bodyText": "what are the warnings?", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r396288196", "createdAt": "2020-03-23T08:46:21Z", "author": {"login": "noblepaul"}, "path": "solr/core/src/test/org/apache/solr/handler/admin/ZookeeperReadTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.net.URL;\n+import java.util.Map;\n+\n+import org.apache.solr.client.solrj.impl.HttpSolrClient;\n+import org.apache.solr.cloud.SolrCloudTestCase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.zookeeper.CreateMode;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.solr.common.util.StrUtils.split;\n+import static org.apache.solr.common.util.Utils.getObjectByPath;\n+\n+public class ZookeeperReadTest extends SolrCloudTestCase {\n+  private static final Logger log = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+\n+  @BeforeClass\n+  public static void setupCluster() throws Exception {\n+    configureCluster(1)\n+        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n+        .configure();\n+  }\n+\n+  @Before\n+  @Override\n+  public void setUp() throws Exception {\n+    super.setUp();\n+  }\n+\n+  @After\n+  @Override\n+  public void tearDown() throws Exception {\n+    super.tearDown();\n+  }\n+\n+  @Test\n+  public void testZkread() throws Exception {\n+    URL baseUrl = cluster.getJettySolrRunner(0).getBaseUrl();\n+    String basezk = baseUrl.toString().replace(\"/solr\", \"/api\") + \"/cluster/zk\";\n+\n+    try (HttpSolrClient client = new HttpSolrClient.Builder(baseUrl.toString()).build()) {\n+      Object o = Utils.executeGET(client.getHttpClient(),\n+          basezk + \"/security.json\",\n+          Utils.JSONCONSUMER);\n+      assertNotNull(o);\n+      o = Utils.executeGET(client.getHttpClient(),\n+          basezk + \"/configs\",\n+          Utils.JSONCONSUMER);\n+      assertEquals(\"0\", String.valueOf(getObjectByPath(o, true, split(\":/configs:_default:dataLength\", ':'))));\n+      assertEquals(\"0\", String.valueOf(getObjectByPath(o, true, split(\":/configs:conf:dataLength\", ':'))));\n+\n+      o = Utils.executeGET(client.getHttpClient(),\n+          basezk + \"/configs?leaf=true\",\n+          Utils.JSONCONSUMER);\n+      assertTrue(((Map)o).containsKey(\"/configs\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc5NzE0Nw=="}, "originalCommit": {"oid": "aff748f1bb24f1cd256e91aff2d39b2da804736f"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ5NjE0NQ==", "bodyText": "Isn't your compiler complaining about non-parametrized map?", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r400496145", "createdAt": "2020-03-30T21:10:32Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/test/org/apache/solr/handler/admin/ZookeeperReadTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.net.URL;\n+import java.util.Map;\n+\n+import org.apache.solr.client.solrj.impl.HttpSolrClient;\n+import org.apache.solr.cloud.SolrCloudTestCase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.zookeeper.CreateMode;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.solr.common.util.StrUtils.split;\n+import static org.apache.solr.common.util.Utils.getObjectByPath;\n+\n+public class ZookeeperReadTest extends SolrCloudTestCase {\n+  private static final Logger log = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+\n+  @BeforeClass\n+  public static void setupCluster() throws Exception {\n+    configureCluster(1)\n+        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n+        .configure();\n+  }\n+\n+  @Before\n+  @Override\n+  public void setUp() throws Exception {\n+    super.setUp();\n+  }\n+\n+  @After\n+  @Override\n+  public void tearDown() throws Exception {\n+    super.tearDown();\n+  }\n+\n+  @Test\n+  public void testZkread() throws Exception {\n+    URL baseUrl = cluster.getJettySolrRunner(0).getBaseUrl();\n+    String basezk = baseUrl.toString().replace(\"/solr\", \"/api\") + \"/cluster/zk\";\n+\n+    try (HttpSolrClient client = new HttpSolrClient.Builder(baseUrl.toString()).build()) {\n+      Object o = Utils.executeGET(client.getHttpClient(),\n+          basezk + \"/security.json\",\n+          Utils.JSONCONSUMER);\n+      assertNotNull(o);\n+      o = Utils.executeGET(client.getHttpClient(),\n+          basezk + \"/configs\",\n+          Utils.JSONCONSUMER);\n+      assertEquals(\"0\", String.valueOf(getObjectByPath(o, true, split(\":/configs:_default:dataLength\", ':'))));\n+      assertEquals(\"0\", String.valueOf(getObjectByPath(o, true, split(\":/configs:conf:dataLength\", ':'))));\n+\n+      o = Utils.executeGET(client.getHttpClient(),\n+          basezk + \"/configs?leaf=true\",\n+          Utils.JSONCONSUMER);\n+      assertTrue(((Map)o).containsKey(\"/configs\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc5NzE0Nw=="}, "originalCommit": {"oid": "aff748f1bb24f1cd256e91aff2d39b2da804736f"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcxMjU2Mg==", "bodyText": "NO. I couldn't see it. Maybe you can just commit that directly", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r400712562", "createdAt": "2020-03-31T07:55:48Z", "author": {"login": "noblepaul"}, "path": "solr/core/src/test/org/apache/solr/handler/admin/ZookeeperReadTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.net.URL;\n+import java.util.Map;\n+\n+import org.apache.solr.client.solrj.impl.HttpSolrClient;\n+import org.apache.solr.cloud.SolrCloudTestCase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.zookeeper.CreateMode;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.solr.common.util.StrUtils.split;\n+import static org.apache.solr.common.util.Utils.getObjectByPath;\n+\n+public class ZookeeperReadTest extends SolrCloudTestCase {\n+  private static final Logger log = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+\n+  @BeforeClass\n+  public static void setupCluster() throws Exception {\n+    configureCluster(1)\n+        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n+        .configure();\n+  }\n+\n+  @Before\n+  @Override\n+  public void setUp() throws Exception {\n+    super.setUp();\n+  }\n+\n+  @After\n+  @Override\n+  public void tearDown() throws Exception {\n+    super.tearDown();\n+  }\n+\n+  @Test\n+  public void testZkread() throws Exception {\n+    URL baseUrl = cluster.getJettySolrRunner(0).getBaseUrl();\n+    String basezk = baseUrl.toString().replace(\"/solr\", \"/api\") + \"/cluster/zk\";\n+\n+    try (HttpSolrClient client = new HttpSolrClient.Builder(baseUrl.toString()).build()) {\n+      Object o = Utils.executeGET(client.getHttpClient(),\n+          basezk + \"/security.json\",\n+          Utils.JSONCONSUMER);\n+      assertNotNull(o);\n+      o = Utils.executeGET(client.getHttpClient(),\n+          basezk + \"/configs\",\n+          Utils.JSONCONSUMER);\n+      assertEquals(\"0\", String.valueOf(getObjectByPath(o, true, split(\":/configs:_default:dataLength\", ':'))));\n+      assertEquals(\"0\", String.valueOf(getObjectByPath(o, true, split(\":/configs:conf:dataLength\", ':'))));\n+\n+      o = Utils.executeGET(client.getHttpClient(),\n+          basezk + \"/configs?leaf=true\",\n+          Utils.JSONCONSUMER);\n+      assertTrue(((Map)o).containsKey(\"/configs\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc5NzE0Nw=="}, "originalCommit": {"oid": "aff748f1bb24f1cd256e91aff2d39b2da804736f"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTc2Mzk5OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/security/PermissionNameProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMzo0NDowMFrOF9qZcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMzo0NDowMFrOF9qZcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIwMjA5OA==", "bodyText": "I cannot see that this new permission is used anywhere?\nAnd if the new zk handler is covered by zk-read, should not also existing ZookeeperInfoHandler handler implement PermissionNameProvider and declare the same permission, for consistency?", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r400202098", "createdAt": "2020-03-30T13:44:00Z", "author": {"login": "janhoy"}, "path": "solr/core/src/java/org/apache/solr/security/PermissionNameProvider.java", "diffHunk": "@@ -38,6 +38,7 @@\n     COLL_READ_PERM(\"collection-admin-read\", null),\n     CORE_READ_PERM(\"core-admin-read\", null),\n     CORE_EDIT_PERM(\"core-admin-edit\", null),\n+    ZK_READ_PERM(\"zk-read\", null),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88a3ba11cd9c65fc98f3e423f077f493084520be"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTgxMzczOnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/handler/admin/ZookeeperReadAPI.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMzo1NDoxNVrOF9q4Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMzo1NDoxNVrOF9q4Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIwOTkyMw==", "bodyText": "Perhaps you meant to use ZK_READ_PERM here, and also above?", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r400209923", "createdAt": "2020-03-30T13:54:15Z", "author": {"login": "janhoy"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZookeeperReadAPI.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.solr.api.Command;\n+import org.apache.solr.api.EndPoint;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.BinaryResponseParser;\n+import org.apache.solr.client.solrj.impl.XMLResponseParser;\n+import org.apache.solr.common.MapWriter;\n+import org.apache.solr.common.SolrException;\n+import org.apache.solr.common.params.CommonParams;\n+import org.apache.solr.common.params.MapSolrParams;\n+import org.apache.solr.common.params.SolrParams;\n+import org.apache.solr.common.util.ContentStreamBase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.solr.core.CoreContainer;\n+import org.apache.solr.request.SolrQueryRequest;\n+import org.apache.solr.response.SolrQueryResponse;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.data.Stat;\n+\n+import static org.apache.solr.common.params.CommonParams.OMIT_HEADER;\n+import static org.apache.solr.common.params.CommonParams.WT;\n+import static org.apache.solr.response.RawResponseWriter.CONTENT;\n+import static org.apache.solr.security.PermissionNameProvider.Name.COLL_READ_PERM;\n+\n+/**\n+ * Exposes the content of the Zookeeper\n+ * This is an expert feature that exposes the data inside the back end zookeeper.This API may change or\n+ * be removed in future versions.\n+ * This is not a public API. The data that is returned is not guaranteed to remain same\n+ * across releases, as the data stored in Zookeeper may change from time to time.\n+ */\n+\n+public class ZookeeperReadAPI {\n+  private final CoreContainer coreContainer;\n+  public final ReadNode readNode = new ReadNode();\n+  public final ListNode listNode = new ListNode();\n+\n+  public ZookeeperReadAPI(CoreContainer coreContainer) {\n+    this.coreContainer = coreContainer;\n+  }\n+\n+  @EndPoint(path = \"/cluster/zk-data/*\",\n+      method = SolrRequest.METHOD.GET,\n+      permission = COLL_READ_PERM)\n+  public class ReadNode {\n+    @Command\n+    public void get(SolrQueryRequest req, SolrQueryResponse rsp) {\n+      String path = req.getPathTemplateValues().get(\"*\");\n+      if (path == null || path.isEmpty()) path = \"/\";\n+      byte[] d = null;\n+      try {\n+        d = coreContainer.getZkController().getZkClient().getData(path, null, null, false);\n+      } catch (KeeperException.NoNodeException e) {\n+        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such node: \"+ path);\n+      } catch (Exception e) {\n+        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unexpected error\", e);\n+      }\n+      if (d == null || d.length == 0) {\n+        rsp.add(path, null);\n+        return;\n+      }\n+\n+      Map<String, String> map = new HashMap<>(1);\n+      map.put(WT, \"raw\");\n+      map.put(OMIT_HEADER, \"true\");\n+      req.setParams(SolrParams.wrapDefaults(new MapSolrParams(map), req.getParams()));\n+\n+      String mime = BinaryResponseParser.BINARY_CONTENT_TYPE;\n+\n+      if (d[0] == '{') mime = CommonParams.JSON_MIME;\n+      if (d[0] == '<' || d[1] == '?') mime = XMLResponseParser.XML_CONTENT_TYPE;\n+      rsp.add(CONTENT, new ContentStreamBase.ByteArrayStream(d, null, mime));\n+\n+    }\n+  }\n+\n+  @EndPoint(path = \"/cluster/zk-ls/*\",\n+      method = SolrRequest.METHOD.GET,\n+      permission = COLL_READ_PERM)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88a3ba11cd9c65fc98f3e423f077f493084520be"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTgyNzUyOnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/handler/admin/ZookeeperReadAPI.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMzo1NzoxMVrOF9rAqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMzo1NzoxMVrOF9rAqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxMjEzNw==", "bodyText": "lucene.experimental annotation?", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r400212137", "createdAt": "2020-03-30T13:57:11Z", "author": {"login": "janhoy"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZookeeperReadAPI.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.solr.api.Command;\n+import org.apache.solr.api.EndPoint;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.BinaryResponseParser;\n+import org.apache.solr.client.solrj.impl.XMLResponseParser;\n+import org.apache.solr.common.MapWriter;\n+import org.apache.solr.common.SolrException;\n+import org.apache.solr.common.params.CommonParams;\n+import org.apache.solr.common.params.MapSolrParams;\n+import org.apache.solr.common.params.SolrParams;\n+import org.apache.solr.common.util.ContentStreamBase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.solr.core.CoreContainer;\n+import org.apache.solr.request.SolrQueryRequest;\n+import org.apache.solr.response.SolrQueryResponse;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.data.Stat;\n+\n+import static org.apache.solr.common.params.CommonParams.OMIT_HEADER;\n+import static org.apache.solr.common.params.CommonParams.WT;\n+import static org.apache.solr.response.RawResponseWriter.CONTENT;\n+import static org.apache.solr.security.PermissionNameProvider.Name.COLL_READ_PERM;\n+\n+/**\n+ * Exposes the content of the Zookeeper\n+ * This is an expert feature that exposes the data inside the back end zookeeper.This API may change or\n+ * be removed in future versions.\n+ * This is not a public API. The data that is returned is not guaranteed to remain same\n+ * across releases, as the data stored in Zookeeper may change from time to time.\n+ */\n+\n+public class ZookeeperReadAPI {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88a3ba11cd9c65fc98f3e423f077f493084520be"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTgzOTE1OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/handler/admin/ZookeeperReadAPI.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMzo1OToyOFrOF9rIBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMzo1OToyOFrOF9rIBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxNDAyMQ==", "bodyText": "@sigram requested in JIRA that the API response is marked as experimental. That can be solved with an extra rsp.add here?", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r400214021", "createdAt": "2020-03-30T13:59:28Z", "author": {"login": "janhoy"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZookeeperReadAPI.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.solr.api.Command;\n+import org.apache.solr.api.EndPoint;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.BinaryResponseParser;\n+import org.apache.solr.client.solrj.impl.XMLResponseParser;\n+import org.apache.solr.common.MapWriter;\n+import org.apache.solr.common.SolrException;\n+import org.apache.solr.common.params.CommonParams;\n+import org.apache.solr.common.params.MapSolrParams;\n+import org.apache.solr.common.params.SolrParams;\n+import org.apache.solr.common.util.ContentStreamBase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.solr.core.CoreContainer;\n+import org.apache.solr.request.SolrQueryRequest;\n+import org.apache.solr.response.SolrQueryResponse;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.data.Stat;\n+\n+import static org.apache.solr.common.params.CommonParams.OMIT_HEADER;\n+import static org.apache.solr.common.params.CommonParams.WT;\n+import static org.apache.solr.response.RawResponseWriter.CONTENT;\n+import static org.apache.solr.security.PermissionNameProvider.Name.COLL_READ_PERM;\n+\n+/**\n+ * Exposes the content of the Zookeeper\n+ * This is an expert feature that exposes the data inside the back end zookeeper.This API may change or\n+ * be removed in future versions.\n+ * This is not a public API. The data that is returned is not guaranteed to remain same\n+ * across releases, as the data stored in Zookeeper may change from time to time.\n+ */\n+\n+public class ZookeeperReadAPI {\n+  private final CoreContainer coreContainer;\n+  public final ReadNode readNode = new ReadNode();\n+  public final ListNode listNode = new ListNode();\n+\n+  public ZookeeperReadAPI(CoreContainer coreContainer) {\n+    this.coreContainer = coreContainer;\n+  }\n+\n+  @EndPoint(path = \"/cluster/zk-data/*\",\n+      method = SolrRequest.METHOD.GET,\n+      permission = COLL_READ_PERM)\n+  public class ReadNode {\n+    @Command\n+    public void get(SolrQueryRequest req, SolrQueryResponse rsp) {\n+      String path = req.getPathTemplateValues().get(\"*\");\n+      if (path == null || path.isEmpty()) path = \"/\";\n+      byte[] d = null;\n+      try {\n+        d = coreContainer.getZkController().getZkClient().getData(path, null, null, false);\n+      } catch (KeeperException.NoNodeException e) {\n+        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such node: \"+ path);\n+      } catch (Exception e) {\n+        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unexpected error\", e);\n+      }\n+      if (d == null || d.length == 0) {\n+        rsp.add(path, null);\n+        return;\n+      }\n+\n+      Map<String, String> map = new HashMap<>(1);\n+      map.put(WT, \"raw\");\n+      map.put(OMIT_HEADER, \"true\");\n+      req.setParams(SolrParams.wrapDefaults(new MapSolrParams(map), req.getParams()));\n+\n+      String mime = BinaryResponseParser.BINARY_CONTENT_TYPE;\n+\n+      if (d[0] == '{') mime = CommonParams.JSON_MIME;\n+      if (d[0] == '<' || d[1] == '?') mime = XMLResponseParser.XML_CONTENT_TYPE;\n+      rsp.add(CONTENT, new ContentStreamBase.ByteArrayStream(d, null, mime));\n+\n+    }\n+  }\n+\n+  @EndPoint(path = \"/cluster/zk-ls/*\",\n+      method = SolrRequest.METHOD.GET,\n+      permission = COLL_READ_PERM)\n+  public class ListNode {\n+    @Command\n+    public void list(SolrQueryRequest req, SolrQueryResponse rsp) {\n+      String path = req.getPathTemplateValues().get(\"*\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88a3ba11cd9c65fc98f3e423f077f493084520be"}, "originalPosition": 106}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 855, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}