{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0NDU5ODM4", "number": 1928, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNDowMToyMlrOEokNBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNDowMjo0N1rOEokPdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTcxNjU0OnYy", "diffSide": "RIGHT", "path": "lucene/facet/src/test/org/apache/lucene/facet/FacetTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNDowMToyMlrOHZuwfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODo1NToyNFrOHZ8Zsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc0MjUyNQ==", "bodyText": "Missing space before {?", "url": "https://github.com/apache/lucene-solr/pull/1928#discussion_r496742525", "createdAt": "2020-09-29T14:01:22Z", "author": {"login": "mikemccand"}, "path": "lucene/facet/src/test/org/apache/lucene/facet/FacetTestCase.java", "diffHunk": "@@ -70,32 +70,51 @@ public Facets getTaxonomyFacetCounts(TaxonomyReader taxoReader, FacetsConfig con\n    *\n    * @param taxoReader {@link TaxonomyReader} used to read taxonomy during search. This instance is expected to be open for reading.\n    * @param fc         {@link FacetsCollector} A collector with matching hits.\n-   * @return {@code List<List<FacetLabel>} where outer list has one non-null entry per document\n+   * @param dimension  facet dimension for which labels are requested. A null value fetches labels for all dimensions.\n+   * @return {@code List<List<FacetLabel>} where outer list has one non-null entry per document.\n    * and inner list contain all {@link FacetLabel} entries that belong to a document.\n    * @throws IOException when a low-level IO issue occurs.\n    */\n-  public List<List<FacetLabel>> getAllTaxonomyFacetLabels(TaxonomyReader taxoReader, FacetsCollector fc) throws IOException {\n+  public List<List<FacetLabel>> getAllTaxonomyFacetLabels(String dimension, TaxonomyReader taxoReader, FacetsCollector fc) throws IOException {\n     List<List<FacetLabel>> actualLabels = new ArrayList<>();\n     TaxonomyFacetLabels taxoLabels = new TaxonomyFacetLabels(taxoReader, FacetsConfig.DEFAULT_INDEX_FIELD_NAME);\n-\n     for (MatchingDocs m : fc.getMatchingDocs()) {\n       FacetLabelReader facetLabelReader = taxoLabels.getFacetLabelReader(m.context);\n-\n       DocIdSetIterator disi = m.bits.iterator();\n       while (disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n-        List<FacetLabel> facetLabels = new ArrayList<>();\n-        int docId = disi.docID();\n-        FacetLabel facetLabel = facetLabelReader.nextFacetLabel(docId);\n-        while (facetLabel != null) {\n-          facetLabels.add(facetLabel);\n-          facetLabel = facetLabelReader.nextFacetLabel(docId);\n-        }\n-        actualLabels.add(facetLabels);\n+        actualLabels.add(allFacetLabels(disi.docID(), dimension, facetLabelReader));\n       }\n     }\n     return actualLabels;\n   }\n \n+  /**\n+   * Utility method to get all facet labels for an input docId and dimension using the supplied\n+   * {@link FacetLabelReader}.\n+   *\n+   * @param docId docId for which facet labels are needed.\n+   * @param dimension Retain facet labels for supplied dimension only. A null value fetches all facet labels.\n+   * @param facetLabelReader {@FacetLabelReader} instance use to get facet labels for input docId.\n+   * @return {@code List<FacetLabel>} containing matching facet labels.\n+   * @throws IOException when a low-level IO issue occurs while reading facet labels.\n+   */\n+  List<FacetLabel> allFacetLabels(int docId, String dimension, FacetLabelReader facetLabelReader) throws IOException {\n+    List<FacetLabel> facetLabels = new ArrayList<>();\n+    FacetLabel facetLabel;\n+    if (dimension != null) {\n+      for (facetLabel = facetLabelReader.nextFacetLabel(docId, dimension); facetLabel != null; ){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc03488bc67178c6d182263a2100ef05e5acb945"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk2NjA2Ng==", "bodyText": "Thanks @mikemccand.  This is fixed.", "url": "https://github.com/apache/lucene-solr/pull/1928#discussion_r496966066", "createdAt": "2020-09-29T18:55:24Z", "author": {"login": "goankur"}, "path": "lucene/facet/src/test/org/apache/lucene/facet/FacetTestCase.java", "diffHunk": "@@ -70,32 +70,51 @@ public Facets getTaxonomyFacetCounts(TaxonomyReader taxoReader, FacetsConfig con\n    *\n    * @param taxoReader {@link TaxonomyReader} used to read taxonomy during search. This instance is expected to be open for reading.\n    * @param fc         {@link FacetsCollector} A collector with matching hits.\n-   * @return {@code List<List<FacetLabel>} where outer list has one non-null entry per document\n+   * @param dimension  facet dimension for which labels are requested. A null value fetches labels for all dimensions.\n+   * @return {@code List<List<FacetLabel>} where outer list has one non-null entry per document.\n    * and inner list contain all {@link FacetLabel} entries that belong to a document.\n    * @throws IOException when a low-level IO issue occurs.\n    */\n-  public List<List<FacetLabel>> getAllTaxonomyFacetLabels(TaxonomyReader taxoReader, FacetsCollector fc) throws IOException {\n+  public List<List<FacetLabel>> getAllTaxonomyFacetLabels(String dimension, TaxonomyReader taxoReader, FacetsCollector fc) throws IOException {\n     List<List<FacetLabel>> actualLabels = new ArrayList<>();\n     TaxonomyFacetLabels taxoLabels = new TaxonomyFacetLabels(taxoReader, FacetsConfig.DEFAULT_INDEX_FIELD_NAME);\n-\n     for (MatchingDocs m : fc.getMatchingDocs()) {\n       FacetLabelReader facetLabelReader = taxoLabels.getFacetLabelReader(m.context);\n-\n       DocIdSetIterator disi = m.bits.iterator();\n       while (disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n-        List<FacetLabel> facetLabels = new ArrayList<>();\n-        int docId = disi.docID();\n-        FacetLabel facetLabel = facetLabelReader.nextFacetLabel(docId);\n-        while (facetLabel != null) {\n-          facetLabels.add(facetLabel);\n-          facetLabel = facetLabelReader.nextFacetLabel(docId);\n-        }\n-        actualLabels.add(facetLabels);\n+        actualLabels.add(allFacetLabels(disi.docID(), dimension, facetLabelReader));\n       }\n     }\n     return actualLabels;\n   }\n \n+  /**\n+   * Utility method to get all facet labels for an input docId and dimension using the supplied\n+   * {@link FacetLabelReader}.\n+   *\n+   * @param docId docId for which facet labels are needed.\n+   * @param dimension Retain facet labels for supplied dimension only. A null value fetches all facet labels.\n+   * @param facetLabelReader {@FacetLabelReader} instance use to get facet labels for input docId.\n+   * @return {@code List<FacetLabel>} containing matching facet labels.\n+   * @throws IOException when a low-level IO issue occurs while reading facet labels.\n+   */\n+  List<FacetLabel> allFacetLabels(int docId, String dimension, FacetLabelReader facetLabelReader) throws IOException {\n+    List<FacetLabel> facetLabels = new ArrayList<>();\n+    FacetLabel facetLabel;\n+    if (dimension != null) {\n+      for (facetLabel = facetLabelReader.nextFacetLabel(docId, dimension); facetLabel != null; ){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc0MjUyNQ=="}, "originalCommit": {"oid": "cc03488bc67178c6d182263a2100ef05e5acb945"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTcyMjc3OnYy", "diffSide": "RIGHT", "path": "lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNDowMjo0N1rOHZu0hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODo1NTozN1rOHZ8aMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc0MzU1OQ==", "bodyText": "Hmm remove this added space?", "url": "https://github.com/apache/lucene-solr/pull/1928#discussion_r496743559", "createdAt": "2020-09-29T14:02:47Z", "author": {"login": "mikemccand"}, "path": "lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts.java", "diffHunk": "@@ -696,10 +696,9 @@ public void testRandom() throws Exception {\n               } else {\n                 expectedCounts[j].put(doc.dims[j], v.intValue() + 1);\n               }\n-\n               // Add document facet labels\n               facetLabels.add(new FacetLabel(\"dim\" + j, doc.dims[j]));\n-            }\n+             }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc03488bc67178c6d182263a2100ef05e5acb945"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk2NjE5NQ==", "bodyText": "Fixed.", "url": "https://github.com/apache/lucene-solr/pull/1928#discussion_r496966195", "createdAt": "2020-09-29T18:55:37Z", "author": {"login": "goankur"}, "path": "lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts.java", "diffHunk": "@@ -696,10 +696,9 @@ public void testRandom() throws Exception {\n               } else {\n                 expectedCounts[j].put(doc.dims[j], v.intValue() + 1);\n               }\n-\n               // Add document facet labels\n               facetLabels.add(new FacetLabel(\"dim\" + j, doc.dims[j]));\n-            }\n+             }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc0MzU1OQ=="}, "originalCommit": {"oid": "cc03488bc67178c6d182263a2100ef05e5acb945"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1104, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}