{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0NDUwODMw", "number": 1253, "title": "LUCENE-9150: Restore support for dynamic PlanetModel in spatial3d", "bodyText": "This PR adds dynamic geographic datum support to Geo3D to make lucene a viable option for indexing/searching in different spatial reference systems (e.g., more accurately computing query shape relations to BKD's internal nodes using datum consistent with the spatial projection). It also refactors some of the variable names in PlanetModel to be consistent with the mathematical naming conventions and adds a new static Planet Model for the Clarke 1866 Ellipsoid used in the North American Datum 1927 still used in a lot of historic geospatial data.", "createdAt": "2020-02-12T18:04:54Z", "url": "https://github.com/apache/lucene-solr/pull/1253", "merged": true, "mergeCommit": {"oid": "a6e80d004d84213886a5ce52fd220d2e5112e43e"}, "closed": true, "closedAt": "2020-03-02T22:32:38Z", "author": {"login": "nknize"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcD8WviAFqTM1ODI3OTA5Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcJ1JhPABqjMwODk4NTU2ODg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4Mjc5MDk3", "url": "https://github.com/apache/lucene-solr/pull/1253#pullrequestreview-358279097", "createdAt": "2020-02-13T14:52:54Z", "commit": {"oid": "e8ea14d4e1b0f21fdcd91fe9caeeaab11cc18c08"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNDo1Mjo1NFrOFpWypg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNTowNTo0N1rOFpXTfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkwOTM1MA==", "bodyText": "I think this class should be inside PlanetModel. We should not create any dependency in the geom package and if we keep this class here, then planet model has a decency outside.", "url": "https://github.com/apache/lucene-solr/pull/1253#discussion_r378909350", "createdAt": "2020-02-13T14:52:54Z", "author": {"login": "iverase"}, "path": "lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DDocValuesField.java", "diffHunk": "@@ -478,9 +303,211 @@ public static SortField newOutsideLargePolygonSort(final String field, final Pol\n    * @return SortField ordering documents by distance\n    * @throws IllegalArgumentException if {@code field} is null or path has invalid coordinates.\n    */\n-  public static SortField newOutsidePathSort(final String field, final double[] pathLatitudes, final double[] pathLongitudes, final double pathWidthMeters) {\n-    final GeoOutsideDistance shape = Geo3DUtil.fromPath(pathLatitudes, pathLongitudes, pathWidthMeters);\n-    return new Geo3DPointOutsideSortField(field, shape);\n+  public static SortField newOutsidePathSort(final String field, final double[] pathLatitudes, final double[] pathLongitudes, final double pathWidthMeters, final PlanetModel planetModel) {\n+    final GeoOutsideDistance shape = Geo3DUtil.fromPath(planetModel, pathLatitudes, pathLongitudes, pathWidthMeters);\n+    return new Geo3DPointOutsideSortField(field, planetModel, shape);\n   }\n \n+  /** Utility class for encoding / decoding from lat/lon (decimal degrees) into sortable doc value numerics (integers) */\n+  public static class DocValueEncoder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8ea14d4e1b0f21fdcd91fe9caeeaab11cc18c08"}, "originalPosition": 351}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkxMzUzOQ==", "bodyText": "As I said before, we should not have a dependency outside of this package.", "url": "https://github.com/apache/lucene-solr/pull/1253#discussion_r378913539", "createdAt": "2020-02-13T14:59:18Z", "author": {"login": "iverase"}, "path": "lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/PlanetModel.java", "diffHunk": "@@ -20,6 +20,8 @@\n import java.io.OutputStream;\n import java.io.IOException;\n \n+import org.apache.lucene.spatial3d.Geo3DDocValuesField.DocValueEncoder;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8ea14d4e1b0f21fdcd91fe9caeeaab11cc18c08"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkxNDQ0Mg==", "bodyText": "I wonder if instead of adding all those methods, the planet model should just return the docValueEncoder?", "url": "https://github.com/apache/lucene-solr/pull/1253#discussion_r378914442", "createdAt": "2020-02-13T15:00:41Z", "author": {"login": "iverase"}, "path": "lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/PlanetModel.java", "diffHunk": "@@ -118,71 +176,191 @@ public PlanetModel(final InputStream inputStream) throws IOException {\n   \n   @Override\n   public void write(final OutputStream outputStream) throws IOException {\n-    SerializableObject.writeDouble(outputStream, ab);\n-    SerializableObject.writeDouble(outputStream, c);\n+    SerializableObject.writeDouble(outputStream, xyScaling);\n+    SerializableObject.writeDouble(outputStream, zScaling);\n   }\n   \n   /** Does this planet model describe a sphere?\n    *@return true if so.\n    */\n   public boolean isSphere() {\n-    return this.ab == this.c;\n+    return this.xyScaling == this.zScaling;\n   }\n   \n   /** Find the minimum magnitude of all points on the ellipsoid.\n    * @return the minimum magnitude for the planet.\n    */\n   public double getMinimumMagnitude() {\n-    return Math.min(this.ab, this.c);\n+    return Math.min(this.xyScaling, this.zScaling);\n   }\n \n   /** Find the maximum magnitude of all points on the ellipsoid.\n    * @return the maximum magnitude for the planet.\n    */\n   public double getMaximumMagnitude() {\n-    return Math.max(this.ab, this.c);\n+    return Math.max(this.xyScaling, this.zScaling);\n   }\n   \n   /** Find the minimum x value.\n    *@return the minimum X value.\n    */\n   public double getMinimumXValue() {\n-    return -this.ab;\n+    return -this.xyScaling;\n   }\n   \n   /** Find the maximum x value.\n    *@return the maximum X value.\n    */\n   public double getMaximumXValue() {\n-    return this.ab;\n+    return this.xyScaling;\n   }\n \n   /** Find the minimum y value.\n    *@return the minimum Y value.\n    */\n   public double getMinimumYValue() {\n-    return -this.ab;\n+    return -this.xyScaling;\n   }\n   \n   /** Find the maximum y value.\n    *@return the maximum Y value.\n    */\n   public double getMaximumYValue() {\n-    return this.ab;\n+    return this.xyScaling;\n   }\n   \n   /** Find the minimum z value.\n    *@return the minimum Z value.\n    */\n   public double getMinimumZValue() {\n-    return -this.c;\n+    return -this.zScaling;\n   }\n   \n   /** Find the maximum z value.\n    *@return the maximum Z value.\n    */\n   public double getMaximumZValue() {\n-    return this.c;\n+    return this.zScaling;\n+  }\n+\n+  /** return the calculated mean radius (in meters) */\n+  public double getMeanRadiusMeters() {\n+    return this.r1;\n+  }\n+\n+  /** encode the provided value from double to integer space */\n+  public int encodeValue(double x) {\n+    if (x > getMaximumMagnitude()) {\n+      throw new IllegalArgumentException(\"value=\" + x + \" is out-of-bounds (greater than planetMax=\" + getMaximumMagnitude() + \")\");\n+    }\n+    if (x == getMaximumMagnitude()) {\n+      x = Math.nextDown(x);\n+    }\n+    if (x < -getMaximumMagnitude()) {\n+      throw new IllegalArgumentException(\"value=\" + x + \" is out-of-bounds (less than than -planetMax=\" + -getMaximumMagnitude() + \")\");\n+    }\n+    long result = (long) Math.floor(x / DECODE);\n+    assert result >= Integer.MIN_VALUE;\n+    assert result <= Integer.MAX_VALUE;\n+    return (int) result;\n+  }\n+\n+  /**\n+   * Decodes a given integer back into the radian value according to the defined planet model\n+   */\n+  public double decodeValue(int x) {\n+    double result;\n+    if (x == MIN_ENCODED_VALUE) {\n+      // We must special case this, because -MAX_VALUE is not guaranteed to land precisely at a floor value, and we don't ever want to\n+      // return a value outside of the planet's range (I think?).  The max value is \"safe\" because we floor during encode:\n+      result = -MAX_VALUE;\n+    } else if (x == MAX_ENCODED_VALUE) {\n+      result = MAX_VALUE;\n+    } else {\n+      // We decode to the center value; this keeps the encoding stable\n+      result = (x+0.5) * DECODE;\n+    }\n+    assert result >= -MAX_VALUE && result <= MAX_VALUE;\n+    return result;\n+  }\n+\n+  /** Encode a provided GeoPoint into DocValue sortable integer space */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8ea14d4e1b0f21fdcd91fe9caeeaab11cc18c08"}, "originalPosition": 303}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkxNDk3NQ==", "bodyText": "Can we add the three planet models in the random?", "url": "https://github.com/apache/lucene-solr/pull/1253#discussion_r378914975", "createdAt": "2020-02-13T15:01:27Z", "author": {"login": "iverase"}, "path": "lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint.java", "diffHunk": "@@ -84,6 +85,10 @@\n \n public class TestGeo3DPoint extends LuceneTestCase {\n \n+  protected PlanetModel randomPlanetModel() {\n+    return RandomPicks.randomFrom(random(), new PlanetModel[] {/*PlanetModel.WGS84,*/ PlanetModel.CLARKE_1866});\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8ea14d4e1b0f21fdcd91fe9caeeaab11cc18c08"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkxNzc1Ng==", "bodyText": "This was added because Math#toDegrees and Math#toRadians were in the forbidden APIs. I believe in master the van has been lifted (java 11) so this is not needed anymore. Not for this PR but good to have it in mind.", "url": "https://github.com/apache/lucene-solr/pull/1253#discussion_r378917756", "createdAt": "2020-02-13T15:05:47Z", "author": {"login": "iverase"}, "path": "lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/Geo3DUtil.java", "diffHunk": "@@ -16,89 +16,13 @@\n  */\n package org.apache.lucene.spatial3d.geom;\n \n-import org.apache.lucene.geo.Polygon;\n-import org.apache.lucene.geo.GeoUtils;\n-\n-import java.util.List;\n-import java.util.ArrayList;\n-\n class Geo3DUtil {\n \n-  /** How many radians are in one earth surface meter */\n-  final static double RADIANS_PER_METER = 1.0 / PlanetModel.WGS84_MEAN;\n   /** How many radians are in one degree */\n   final static double RADIANS_PER_DEGREE = Math.PI / 180.0;\n   /** How many degrees in a radian */\n   final static double DEGREES_PER_RADIAN = 180.0 / Math.PI;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8ea14d4e1b0f21fdcd91fe9caeeaab11cc18c08"}, "originalPosition": 17}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e8ea14d4e1b0f21fdcd91fe9caeeaab11cc18c08", "author": {"user": {"login": "nknize", "name": "Nick Knize"}}, "url": "https://github.com/apache/lucene-solr/commit/e8ea14d4e1b0f21fdcd91fe9caeeaab11cc18c08", "committedDate": "2020-02-12T18:00:00Z", "message": "LUCENE-9150: Restore support for dynamic PlanetModel in spatial3d"}, "afterCommit": {"oid": "a53425abae93cea83030d2563fa72f282e35f3e5", "author": {"user": {"login": "nknize", "name": "Nick Knize"}}, "url": "https://github.com/apache/lucene-solr/commit/a53425abae93cea83030d2563fa72f282e35f3e5", "committedDate": "2020-02-29T18:02:51Z", "message": "LUCENE-9150: Restore support for dynamic PlanetModel in spatial3d"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a53425abae93cea83030d2563fa72f282e35f3e5", "author": {"user": {"login": "nknize", "name": "Nick Knize"}}, "url": "https://github.com/apache/lucene-solr/commit/a53425abae93cea83030d2563fa72f282e35f3e5", "committedDate": "2020-02-29T18:02:51Z", "message": "LUCENE-9150: Restore support for dynamic PlanetModel in spatial3d"}, "afterCommit": {"oid": "c7e4a0e85940e6633db28b7d16f87006f17e0482", "author": {"user": {"login": "nknize", "name": "Nick Knize"}}, "url": "https://github.com/apache/lucene-solr/commit/c7e4a0e85940e6633db28b7d16f87006f17e0482", "committedDate": "2020-02-29T18:30:39Z", "message": "LUCENE-9150: Restore support for dynamic PlanetModel in spatial3d"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2ODQ2MzY1", "url": "https://github.com/apache/lucene-solr/pull/1253#pullrequestreview-366846365", "createdAt": "2020-03-01T09:34:22Z", "commit": {"oid": "c7e4a0e85940e6633db28b7d16f87006f17e0482"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQwOTozNDoyMlrOFwNM8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQwOTozNDoyMlrOFwNM8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5MjI3NA==", "bodyText": "make constructor private?", "url": "https://github.com/apache/lucene-solr/pull/1253#discussion_r386092274", "createdAt": "2020-03-01T09:34:22Z", "author": {"login": "iverase"}, "path": "lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/PlanetModel.java", "diffHunk": "@@ -383,30 +509,233 @@ public GeoPoint surfacePointOnBearing(final GeoPoint from, final double dist, fi\n       \u0394\u03c3 = B * sin\u03c3 * (cos2\u03c3M + B / 4.0 * (cos\u03c3 * (-1.0 + 2.0 * cos2\u03c3M * cos2\u03c3M) -\n           B / 6.0 * cos2\u03c3M * (-3.0 + 4.0 * sin\u03c3 * sin\u03c3) * (-3.0 + 4.0 * cos2\u03c3M * cos2\u03c3M)));\n       \u03c3\u02b9 = \u03c3;\n-      \u03c3 = dist / (c * inverseScale * A) + \u0394\u03c3;\n+      \u03c3 = dist / (zScaling * inverseScale * A) + \u0394\u03c3;\n     } while (Math.abs(\u03c3 - \u03c3\u02b9) >= Vector.MINIMUM_RESOLUTION && ++iterations < 100);\n     double x = sinU1 * sin\u03c3 - cosU1 * cos\u03c3 * cos\u03b11;\n-    double \u03c62 = Math.atan2(sinU1 * cos\u03c3 + cosU1 * sin\u03c3 * cos\u03b11, (1.0 - flattening) * Math.sqrt(sin\u03b1 * sin\u03b1 + x * x));\n+    double \u03c62 = Math.atan2(sinU1 * cos\u03c3 + cosU1 * sin\u03c3 * cos\u03b11, (1.0 - scaledFlattening) * Math.sqrt(sin\u03b1 * sin\u03b1 + x * x));\n     double \u03bb = Math.atan2(sin\u03c3 * sin\u03b11, cosU1 * cos\u03c3 - sinU1 * sin\u03c3 * cos\u03b11);\n-    double C = flattening / 16.0 * cosSq\u03b1 * (4.0 + flattening * (4.0 - 3.0 * cosSq\u03b1));\n-    double L = \u03bb - (1.0 - C) * flattening * sin\u03b1 *\n+    double C = scaledFlattening / 16.0 * cosSq\u03b1 * (4.0 + scaledFlattening * (4.0 - 3.0 * cosSq\u03b1));\n+    double L = \u03bb - (1.0 - C) * scaledFlattening * sin\u03b1 *\n         (\u03c3 + C * sin\u03c3 * (cos2\u03c3M + C * cos\u03c3 * (-1.0 + 2.0 * cos2\u03c3M * cos2\u03c3M)));\n     double \u03bb2 = (lon + L + 3.0 * Math.PI) % (2.0 * Math.PI) - Math.PI;  // normalise to -180..+180\n \n     return new GeoPoint(this, \u03c62, \u03bb2);\n   }\n \n+  /** Utility class for encoding / decoding from lat/lon (decimal degrees) into sortable doc value numerics (integers) */\n+  public static class DocValueEncoder {\n+    private final PlanetModel planetModel;\n+\n+    // These are the multiplicative constants we need to use to arrive at values that fit in 21 bits.\n+    // The formula we use to go from double to encoded value is:  Math.floor((value - minimum) * factor + 0.5)\n+    // If we plug in maximum for value, we should get 0x1FFFFF.\n+    // So, 0x1FFFFF = Math.floor((maximum - minimum) * factor + 0.5)\n+    // We factor out the 0.5 and Math.floor by stating instead:\n+    // 0x1FFFFF = (maximum - minimum) * factor\n+    // So, factor = 0x1FFFFF / (maximum - minimum)\n+\n+    private final static double inverseMaximumValue = 1.0 / (double)(0x1FFFFF);\n+\n+    private final double inverseXFactor;\n+    private final double inverseYFactor;\n+    private final double inverseZFactor;\n+\n+    private final double xFactor;\n+    private final double yFactor;\n+    private final double zFactor;\n+\n+    // Fudge factor for step adjustments.  This is here solely to handle inaccuracies in bounding boxes\n+    // that occur because of quantization.  For unknown reasons, the fudge factor needs to be\n+    // 10.0 rather than 1.0.  See LUCENE-7430.\n+\n+    private final static double STEP_FUDGE = 10.0;\n+\n+    // These values are the delta between a value and the next value in each specific dimension\n+\n+    private final double xStep;\n+    private final double yStep;\n+    private final double zStep;\n+\n+    /** construct an encoder/decoder instance from the provided PlanetModel definition */\n+    public DocValueEncoder(final PlanetModel planetModel) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7e4a0e85940e6633db28b7d16f87006f17e0482"}, "originalPosition": 483}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MTc2Nzgy", "url": "https://github.com/apache/lucene-solr/pull/1253#pullrequestreview-367176782", "createdAt": "2020-03-02T12:56:32Z", "commit": {"oid": "c7e4a0e85940e6633db28b7d16f87006f17e0482"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c7e4a0e85940e6633db28b7d16f87006f17e0482", "author": {"user": {"login": "nknize", "name": "Nick Knize"}}, "url": "https://github.com/apache/lucene-solr/commit/c7e4a0e85940e6633db28b7d16f87006f17e0482", "committedDate": "2020-02-29T18:30:39Z", "message": "LUCENE-9150: Restore support for dynamic PlanetModel in spatial3d"}, "afterCommit": {"oid": "c90da86c146261df12008b3eb8d32b7fd1619d40", "author": {"user": {"login": "nknize", "name": "Nick Knize"}}, "url": "https://github.com/apache/lucene-solr/commit/c90da86c146261df12008b3eb8d32b7fd1619d40", "committedDate": "2020-03-02T21:59:58Z", "message": "LUCENE-9150: Restore support for dynamic PlanetModel in spatial3d"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c90da86c146261df12008b3eb8d32b7fd1619d40", "author": {"user": {"login": "nknize", "name": "Nick Knize"}}, "url": "https://github.com/apache/lucene-solr/commit/c90da86c146261df12008b3eb8d32b7fd1619d40", "committedDate": "2020-03-02T21:59:58Z", "message": "LUCENE-9150: Restore support for dynamic PlanetModel in spatial3d"}, "afterCommit": {"oid": "75fb2d2f24a2351e54819bb499f788c8a42d942e", "author": {"user": {"login": "nknize", "name": "Nick Knize"}}, "url": "https://github.com/apache/lucene-solr/commit/75fb2d2f24a2351e54819bb499f788c8a42d942e", "committedDate": "2020-03-02T22:01:53Z", "message": "LUCENE-9150: Restore support for dynamic PlanetModel in spatial3d"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6e80d004d84213886a5ce52fd220d2e5112e43e", "author": {"user": {"login": "nknize", "name": "Nick Knize"}}, "url": "https://github.com/apache/lucene-solr/commit/a6e80d004d84213886a5ce52fd220d2e5112e43e", "committedDate": "2020-03-02T22:06:17Z", "message": "LUCENE-9150: Restore support for dynamic PlanetModel in spatial3d"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "75fb2d2f24a2351e54819bb499f788c8a42d942e", "author": {"user": {"login": "nknize", "name": "Nick Knize"}}, "url": "https://github.com/apache/lucene-solr/commit/75fb2d2f24a2351e54819bb499f788c8a42d942e", "committedDate": "2020-03-02T22:01:53Z", "message": "LUCENE-9150: Restore support for dynamic PlanetModel in spatial3d"}, "afterCommit": {"oid": "a6e80d004d84213886a5ce52fd220d2e5112e43e", "author": {"user": {"login": "nknize", "name": "Nick Knize"}}, "url": "https://github.com/apache/lucene-solr/commit/a6e80d004d84213886a5ce52fd220d2e5112e43e", "committedDate": "2020-03-02T22:06:17Z", "message": "LUCENE-9150: Restore support for dynamic PlanetModel in spatial3d"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2321, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}