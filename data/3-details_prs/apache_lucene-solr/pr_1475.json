{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyMTM5Njc5", "number": 1475, "title": "LUCENE-9148: Move the BKD index to its own file.", "bodyText": "See https://issues.apache.org/jira/browse/LUCENE-9148.\nThis is only a work-in-progress for now, I'll finish when #1440 is merged to not duplicate work and introduce conflicts.", "createdAt": "2020-05-01T13:54:35Z", "url": "https://github.com/apache/lucene-solr/pull/1475", "merged": true, "mergeCommit": {"oid": "54c5dd7d6d8b486df9132e637a6d7c5871ac4664"}, "closed": true, "closedAt": "2020-06-09T07:59:15Z", "author": {"login": "jpountz"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcdB1PwgH2gAyNDEyMTM5Njc5OjE1MDE3NGJkYzBkMDU2MzYwMmU0YjQ0YzhmMDY3NGUxNTQ1YzIwNWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcpgFE2gH2gAyNDEyMTM5Njc5OmI5ZjllMzA0NGIzYWYzZTE3Mjc1NmI5OTNhMTg4MWRhNzM5YTJiMGQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "150174bdc0d0563602e4b44c8f0674e1545c205a", "author": {"user": {"login": "jpountz", "name": "Adrien Grand"}}, "url": "https://github.com/apache/lucene-solr/commit/150174bdc0d0563602e4b44c8f0674e1545c205a", "committedDate": "2020-05-01T13:37:57Z", "message": "LUCENE-9148: Move the BKD index to its own file.\n\nSee https://issues.apache.org/jira/browse/LUCENE-9148."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "daa8cc5649baa0e94e7a2b8c4d7fbe2ce735ad8d", "author": {"user": {"login": "jpountz", "name": "Adrien Grand"}}, "url": "https://github.com/apache/lucene-solr/commit/daa8cc5649baa0e94e7a2b8c4d7fbe2ce735ad8d", "committedDate": "2020-06-05T11:52:01Z", "message": "Merge branch 'master' into bkd_index_separate_file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da57676617c889f0d839fed6d1abae0658341a79", "author": {"user": {"login": "jpountz", "name": "Adrien Grand"}}, "url": "https://github.com/apache/lucene-solr/commit/da57676617c889f0d839fed6d1abae0658341a79", "committedDate": "2020-06-05T11:58:39Z", "message": "iter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "934a91c5ea7910e446edb07fe4c7953b7e14ec76", "author": {"user": {"login": "jpountz", "name": "Adrien Grand"}}, "url": "https://github.com/apache/lucene-solr/commit/934a91c5ea7910e446edb07fe4c7953b7e14ec76", "committedDate": "2020-06-05T13:25:16Z", "message": "iter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f87f0ba97169a4172152e22c0e28d174ab00014", "author": {"user": {"login": "jpountz", "name": "Adrien Grand"}}, "url": "https://github.com/apache/lucene-solr/commit/3f87f0ba97169a4172152e22c0e28d174ab00014", "committedDate": "2020-06-05T13:55:01Z", "message": "iter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7fc72bbdb220b680277241aff05f3f5f64174b7c", "author": {"user": {"login": "jpountz", "name": "Adrien Grand"}}, "url": "https://github.com/apache/lucene-solr/commit/7fc72bbdb220b680277241aff05f3f5f64174b7c", "committedDate": "2020-06-05T14:11:01Z", "message": "iter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d814fc5db25afb7802f318dcb2bead5f1fa97673", "author": {"user": {"login": "jpountz", "name": "Adrien Grand"}}, "url": "https://github.com/apache/lucene-solr/commit/d814fc5db25afb7802f318dcb2bead5f1fa97673", "committedDate": "2020-06-06T20:11:19Z", "message": "Javadocs."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1OTg3NjY5", "url": "https://github.com/apache/lucene-solr/pull/1475#pullrequestreview-425987669", "createdAt": "2020-06-08T07:50:42Z", "commit": {"oid": "d814fc5db25afb7802f318dcb2bead5f1fa97673"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNzo1MDo0M1rOGgSrag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNzo1MDo0M1rOGgSrag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUxMzY0Mg==", "bodyText": "I wonder if we should use the same structure as in the other places by returning here as well a runnable for consistency?", "url": "https://github.com/apache/lucene-solr/pull/1475#discussion_r436513642", "createdAt": "2020-06-08T07:50:43Z", "author": {"login": "iverase"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene86/Lucene86PointsWriter.java", "diffHunk": "@@ -0,0 +1,262 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.codecs.lucene86;\n+\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.lucene.codecs.CodecUtil;\n+import org.apache.lucene.codecs.MutablePointValues;\n+import org.apache.lucene.codecs.PointsReader;\n+import org.apache.lucene.codecs.PointsWriter;\n+import org.apache.lucene.index.FieldInfo;\n+import org.apache.lucene.index.FieldInfos;\n+import org.apache.lucene.index.IndexFileNames;\n+import org.apache.lucene.index.MergeState;\n+import org.apache.lucene.index.PointValues;\n+import org.apache.lucene.index.PointValues.IntersectVisitor;\n+import org.apache.lucene.index.PointValues.Relation;\n+import org.apache.lucene.index.SegmentWriteState;\n+import org.apache.lucene.store.IndexOutput;\n+import org.apache.lucene.util.IOUtils;\n+import org.apache.lucene.util.bkd.BKDReader;\n+import org.apache.lucene.util.bkd.BKDWriter;\n+\n+/** Writes dimensional values */\n+public class Lucene86PointsWriter extends PointsWriter implements Closeable {\n+\n+  /** Outputs used to write the BKD tree data files. */\n+  protected final IndexOutput metaOut, indexOut, dataOut;\n+\n+  final SegmentWriteState writeState;\n+  final int maxPointsInLeafNode;\n+  final double maxMBSortInHeap;\n+  private boolean finished;\n+\n+  /** Full constructor */\n+  public Lucene86PointsWriter(SegmentWriteState writeState, int maxPointsInLeafNode, double maxMBSortInHeap) throws IOException {\n+    assert writeState.fieldInfos.hasPointValues();\n+    this.writeState = writeState;\n+    this.maxPointsInLeafNode = maxPointsInLeafNode;\n+    this.maxMBSortInHeap = maxMBSortInHeap;\n+    String dataFileName = IndexFileNames.segmentFileName(writeState.segmentInfo.name,\n+                                                         writeState.segmentSuffix,\n+                                                         Lucene86PointsFormat.DATA_EXTENSION);\n+    dataOut = writeState.directory.createOutput(dataFileName, writeState.context);\n+    boolean success = false;\n+    try {\n+      CodecUtil.writeIndexHeader(dataOut,\n+                                 Lucene86PointsFormat.DATA_CODEC_NAME,\n+                                 Lucene86PointsFormat.VERSION_CURRENT,\n+                                 writeState.segmentInfo.getId(),\n+                                 writeState.segmentSuffix);\n+\n+      String metaFileName = IndexFileNames.segmentFileName(writeState.segmentInfo.name,\n+          writeState.segmentSuffix,\n+          Lucene86PointsFormat.META_EXTENSION);\n+      metaOut = writeState.directory.createOutput(metaFileName, writeState.context);\n+      CodecUtil.writeIndexHeader(metaOut,\n+          Lucene86PointsFormat.META_CODEC_NAME,\n+          Lucene86PointsFormat.VERSION_CURRENT,\n+          writeState.segmentInfo.getId(),\n+          writeState.segmentSuffix);\n+\n+      String indexFileName = IndexFileNames.segmentFileName(writeState.segmentInfo.name,\n+          writeState.segmentSuffix,\n+          Lucene86PointsFormat.INDEX_EXTENSION);\n+      indexOut = writeState.directory.createOutput(indexFileName, writeState.context);\n+      CodecUtil.writeIndexHeader(indexOut,\n+          Lucene86PointsFormat.INDEX_CODEC_NAME,\n+          Lucene86PointsFormat.VERSION_CURRENT,\n+          writeState.segmentInfo.getId(),\n+          writeState.segmentSuffix);\n+\n+      success = true;\n+    } finally {\n+      if (success == false) {\n+        IOUtils.closeWhileHandlingException(this);\n+      }\n+    }\n+  }\n+\n+  /** Uses the defaults values for {@code maxPointsInLeafNode} (1024) and {@code maxMBSortInHeap} (16.0) */\n+  public Lucene86PointsWriter(SegmentWriteState writeState) throws IOException {\n+    this(writeState, BKDWriter.DEFAULT_MAX_POINTS_IN_LEAF_NODE, BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP);\n+  }\n+\n+  @Override\n+  public void writeField(FieldInfo fieldInfo, PointsReader reader) throws IOException {\n+\n+    PointValues values = reader.getValues(fieldInfo.name);\n+\n+    try (BKDWriter writer = new BKDWriter(writeState.segmentInfo.maxDoc(),\n+                                          writeState.directory,\n+                                          writeState.segmentInfo.name,\n+                                          fieldInfo.getPointDimensionCount(),\n+                                          fieldInfo.getPointIndexDimensionCount(),\n+                                          fieldInfo.getPointNumBytes(),\n+                                          maxPointsInLeafNode,\n+                                          maxMBSortInHeap,\n+                                          values.size())) {\n+\n+      if (values instanceof MutablePointValues) {\n+        Runnable finalizer = writer.writeField(metaOut, indexOut, dataOut, fieldInfo.name, (MutablePointValues) values);\n+        if (finalizer != null) {\n+          metaOut.writeInt(fieldInfo.number);\n+          finalizer.run();\n+        }\n+        return;\n+      }\n+\n+      values.intersect(new IntersectVisitor() {\n+          @Override\n+          public void visit(int docID) {\n+            throw new IllegalStateException();\n+          }\n+\n+          public void visit(int docID, byte[] packedValue) throws IOException {\n+            writer.add(packedValue, docID);\n+          }\n+\n+          @Override\n+          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n+            return Relation.CELL_CROSSES_QUERY;\n+          }\n+        });\n+\n+      // We could have 0 points on merge since all docs with dimensional fields may be deleted:\n+      if (writer.getPointCount() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d814fc5db25afb7802f318dcb2bead5f1fa97673"}, "originalPosition": 145}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1OTg4Mzg2", "url": "https://github.com/apache/lucene-solr/pull/1475#pullrequestreview-425988386", "createdAt": "2020-06-08T07:51:50Z", "commit": {"oid": "d814fc5db25afb7802f318dcb2bead5f1fa97673"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNzo1MTo1MFrOGgStew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNzo1MTo1MFrOGgStew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUxNDE3MQ==", "bodyText": "Not used any more?", "url": "https://github.com/apache/lucene-solr/pull/1475#discussion_r436514171", "createdAt": "2020-06-08T07:51:50Z", "author": {"login": "iverase"}, "path": "lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.java", "diffHunk": "@@ -627,20 +638,20 @@ assert valueInOrder(valueCount + leafCount,\n       assert (lastDocID = docID) >= 0; // only assign when asserts are enabled\n     }\n \n-    public long finish() throws IOException {\n+    public Runnable finish() throws IOException {\n       if (leafCount > 0) {\n         writeLeafBlock(leafCardinality);\n         leafCardinality = 0;\n         leafCount = 0;\n       }\n \n       if (valueCount == 0) {\n-        return -1;\n+        return null;\n       }\n \n       pointCount = valueCount;\n \n-      long indexFP = out.getFilePointer();\n+      long indexFP = indexOut.getFilePointer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d814fc5db25afb7802f318dcb2bead5f1fa97673"}, "originalPosition": 149}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99aa4950ffc3e4c96e2a9b1c1e2236e21b3aaf38", "author": {"user": {"login": "jpountz", "name": "Adrien Grand"}}, "url": "https://github.com/apache/lucene-solr/commit/99aa4950ffc3e4c96e2a9b1c1e2236e21b3aaf38", "committedDate": "2020-06-08T13:51:01Z", "message": "Address feedback of @iverase."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2Mjk2MjY5", "url": "https://github.com/apache/lucene-solr/pull/1475#pullrequestreview-426296269", "createdAt": "2020-06-08T14:25:04Z", "commit": {"oid": "99aa4950ffc3e4c96e2a9b1c1e2236e21b3aaf38"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e14c7837c6ecf7c588e8614f6cc851c7c1daeb0c", "author": {"user": {"login": "jpountz", "name": "Adrien Grand"}}, "url": "https://github.com/apache/lucene-solr/commit/e14c7837c6ecf7c588e8614f6cc851c7c1daeb0c", "committedDate": "2020-06-09T07:28:48Z", "message": "Merge branch 'master' into bkd_index_separate_file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3379b9bdc463a09d0007bb9657d6cd12c2efff9", "author": {"user": {"login": "jpountz", "name": "Adrien Grand"}}, "url": "https://github.com/apache/lucene-solr/commit/b3379b9bdc463a09d0007bb9657d6cd12c2efff9", "committedDate": "2020-06-09T07:31:12Z", "message": "CHANGES"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9f9e3044b3af3e172756b993a1881da739a2b0d", "author": {"user": {"login": "jpountz", "name": "Adrien Grand"}}, "url": "https://github.com/apache/lucene-solr/commit/b9f9e3044b3af3e172756b993a1881da739a2b0d", "committedDate": "2020-06-09T07:39:29Z", "message": "Merge branch 'master' into bkd_index_separate_file"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2667, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}