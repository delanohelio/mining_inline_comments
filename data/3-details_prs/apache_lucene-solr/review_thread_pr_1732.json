{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1NjY2NzIy", "number": 1732, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxODo0NjowNVrOEW6nrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwNzowNToyNlrOEYxoiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDY0NTU3OnYy", "diffSide": "LEFT", "path": "lucene/core/src/java/org/apache/lucene/analysis/Analyzer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxODo0NjowNVrOG-a8Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNjo1OTo1M1rOG-q12Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEwNjI0Ng==", "bodyText": "Can you not change those scopes in public API classes? This applies here and in other places -- protected changed to package-scope for source is not really an API-compatible change.", "url": "https://github.com/apache/lucene-solr/pull/1732#discussion_r468106246", "createdAt": "2020-08-10T18:46:05Z", "author": {"login": "dweiss"}, "path": "lucene/core/src/java/org/apache/lucene/analysis/Analyzer.java", "diffHunk": "@@ -94,7 +94,7 @@\n    * Create a new Analyzer, reusing the same set of components per-thread\n    * across calls to {@link #tokenStream(String, Reader)}. \n    */\n-  public Analyzer() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc43993f1962dcf4e907c85f5a2b85b239b8fad2"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyMDUzNQ==", "bodyText": "I understand that it's notionally an API change, but abstract classes have no reason for public constructors. We can make everything protected and the subclasses that people use will be able to pick it up. I was over-zealous in a couple places going to package instead of protected, I'll fix that up.", "url": "https://github.com/apache/lucene-solr/pull/1732#discussion_r468220535", "createdAt": "2020-08-10T22:27:33Z", "author": {"login": "madrob"}, "path": "lucene/core/src/java/org/apache/lucene/analysis/Analyzer.java", "diffHunk": "@@ -94,7 +94,7 @@\n    * Create a new Analyzer, reusing the same set of components per-thread\n    * across calls to {@link #tokenStream(String, Reader)}. \n    */\n-  public Analyzer() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEwNjI0Ng=="}, "originalCommit": {"oid": "fc43993f1962dcf4e907c85f5a2b85b239b8fad2"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM2NjgwOQ==", "bodyText": "The constructors I understand, fine (although it's really a no-op change, as you indicated).", "url": "https://github.com/apache/lucene-solr/pull/1732#discussion_r468366809", "createdAt": "2020-08-11T06:59:53Z", "author": {"login": "dweiss"}, "path": "lucene/core/src/java/org/apache/lucene/analysis/Analyzer.java", "diffHunk": "@@ -94,7 +94,7 @@\n    * Create a new Analyzer, reusing the same set of components per-thread\n    * across calls to {@link #tokenStream(String, Reader)}. \n    */\n-  public Analyzer() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEwNjI0Ng=="}, "originalCommit": {"oid": "fc43993f1962dcf4e907c85f5a2b85b239b8fad2"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDY0ODExOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxODo0Njo1MVrOG-a9kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzowMDozMFrOG-q3LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEwNjY0Mw==", "bodyText": "This is wrong, uses default locale.", "url": "https://github.com/apache/lucene-solr/pull/1732#discussion_r468106643", "createdAt": "2020-08-10T18:46:51Z", "author": {"login": "dweiss"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java", "diffHunk": "@@ -709,7 +709,7 @@ private PendingBlock writeBlock(int prefixLength, boolean isFloor, int floorLead\n \n           PendingTerm term = (PendingTerm) ent;\n \n-          assert StringHelper.startsWith(term.termBytes, prefix): \"term.term=\" + term.termBytes + \" prefix=\" + prefix;\n+          assert StringHelper.startsWith(term.termBytes, prefix): \"term.term=\" + new String(term.termBytes) + \" prefix=\" + prefix;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc43993f1962dcf4e907c85f5a2b85b239b8fad2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyMDY4NA==", "bodyText": "Are these UTF-8? I wasn't sure, and hoped somebody would let me know during review.", "url": "https://github.com/apache/lucene-solr/pull/1732#discussion_r468220684", "createdAt": "2020-08-10T22:27:55Z", "author": {"login": "madrob"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java", "diffHunk": "@@ -709,7 +709,7 @@ private PendingBlock writeBlock(int prefixLength, boolean isFloor, int floorLead\n \n           PendingTerm term = (PendingTerm) ent;\n \n-          assert StringHelper.startsWith(term.termBytes, prefix): \"term.term=\" + term.termBytes + \" prefix=\" + prefix;\n+          assert StringHelper.startsWith(term.termBytes, prefix): \"term.term=\" + new String(term.termBytes) + \" prefix=\" + prefix;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEwNjY0Mw=="}, "originalCommit": {"oid": "fc43993f1962dcf4e907c85f5a2b85b239b8fad2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM2NzE0OA==", "bodyText": "They should be. You can also dump it as a byte array for consistency with other changes you made.", "url": "https://github.com/apache/lucene-solr/pull/1732#discussion_r468367148", "createdAt": "2020-08-11T07:00:30Z", "author": {"login": "dweiss"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java", "diffHunk": "@@ -709,7 +709,7 @@ private PendingBlock writeBlock(int prefixLength, boolean isFloor, int floorLead\n \n           PendingTerm term = (PendingTerm) ent;\n \n-          assert StringHelper.startsWith(term.termBytes, prefix): \"term.term=\" + term.termBytes + \" prefix=\" + prefix;\n+          assert StringHelper.startsWith(term.termBytes, prefix): \"term.term=\" + new String(term.termBytes) + \" prefix=\" + prefix;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEwNjY0Mw=="}, "originalCommit": {"oid": "fc43993f1962dcf4e907c85f5a2b85b239b8fad2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDY1Mjc1OnYy", "diffSide": "LEFT", "path": "lucene/core/src/java/org/apache/lucene/index/DocValuesUpdate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxODo0ODoyMlrOG-bAaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjozMDozN1rOG-h-vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEwNzM2OA==", "bodyText": "previous version was correct camel case (upTo).", "url": "https://github.com/apache/lucene-solr/pull/1732#discussion_r468107368", "createdAt": "2020-08-10T18:48:22Z", "author": {"login": "dweiss"}, "path": "lucene/core/src/java/org/apache/lucene/index/DocValuesUpdate.java", "diffHunk": "@@ -152,12 +152,12 @@ static BytesRef readFrom(DataInput in, BytesRef scratch) throws IOException {\n     }\n \n     NumericDocValuesUpdate(Term term, String field, Long value) {\n-      this(term, field, value != null ? value.longValue() : -1, BufferedUpdates.MAX_INT, value != null);\n+      this(term, field, value != null ? value : -1, BufferedUpdates.MAX_INT, value != null);\n     }\n \n \n-    private NumericDocValuesUpdate(Term term, String field, long value, int docIDUpTo, boolean hasValue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc43993f1962dcf4e907c85f5a2b85b239b8fad2"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyMTYzMA==", "bodyText": "There were 16 instances of Upto and 4 of UpTo so I went with the more common one for consistency. Happy to switch the other way if it's more correct according to English. Looking it up now and looks like \"upto\" isn't a word?", "url": "https://github.com/apache/lucene-solr/pull/1732#discussion_r468221630", "createdAt": "2020-08-10T22:30:37Z", "author": {"login": "madrob"}, "path": "lucene/core/src/java/org/apache/lucene/index/DocValuesUpdate.java", "diffHunk": "@@ -152,12 +152,12 @@ static BytesRef readFrom(DataInput in, BytesRef scratch) throws IOException {\n     }\n \n     NumericDocValuesUpdate(Term term, String field, Long value) {\n-      this(term, field, value != null ? value.longValue() : -1, BufferedUpdates.MAX_INT, value != null);\n+      this(term, field, value != null ? value : -1, BufferedUpdates.MAX_INT, value != null);\n     }\n \n \n-    private NumericDocValuesUpdate(Term term, String field, long value, int docIDUpTo, boolean hasValue) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEwNzM2OA=="}, "originalCommit": {"oid": "fc43993f1962dcf4e907c85f5a2b85b239b8fad2"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDY1ODQzOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxODo0OTo1OVrOG-bD0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo0NjozNVrOG-iUGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEwODI0MQ==", "bodyText": "These are serious changes... you're adding synchronization on core classes. I don't think they should be piggybacked on top of trivial ones - I'm sure @s1monw would chip in whether this synchronization here makes sense but he'll probably overlook if it's a bulk of trivial changes on top.", "url": "https://github.com/apache/lucene-solr/pull/1732#discussion_r468108241", "createdAt": "2020-08-10T18:49:59Z", "author": {"login": "dweiss"}, "path": "lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl.java", "diffHunk": "@@ -324,12 +324,12 @@ synchronized void doOnAbort(DocumentsWriterPerThread perThread) {\n     }\n   }\n \n-  private void checkoutAndBlock(DocumentsWriterPerThread perThread) {\n+  private synchronized void checkoutAndBlock(DocumentsWriterPerThread perThread) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc43993f1962dcf4e907c85f5a2b85b239b8fad2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyMTY5MQ==", "bodyText": "I'll split this out.", "url": "https://github.com/apache/lucene-solr/pull/1732#discussion_r468221691", "createdAt": "2020-08-10T22:30:44Z", "author": {"login": "madrob"}, "path": "lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl.java", "diffHunk": "@@ -324,12 +324,12 @@ synchronized void doOnAbort(DocumentsWriterPerThread perThread) {\n     }\n   }\n \n-  private void checkoutAndBlock(DocumentsWriterPerThread perThread) {\n+  private synchronized void checkoutAndBlock(DocumentsWriterPerThread perThread) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEwODI0MQ=="}, "originalCommit": {"oid": "fc43993f1962dcf4e907c85f5a2b85b239b8fad2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyNzA5OQ==", "bodyText": "https://issues.apache.org/jira/browse/LUCENE-9453 I explain in that issue why I believe it is minor, but it will help to get more eyes on it", "url": "https://github.com/apache/lucene-solr/pull/1732#discussion_r468227099", "createdAt": "2020-08-10T22:46:35Z", "author": {"login": "madrob"}, "path": "lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl.java", "diffHunk": "@@ -324,12 +324,12 @@ synchronized void doOnAbort(DocumentsWriterPerThread perThread) {\n     }\n   }\n \n-  private void checkoutAndBlock(DocumentsWriterPerThread perThread) {\n+  private synchronized void checkoutAndBlock(DocumentsWriterPerThread perThread) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEwODI0MQ=="}, "originalCommit": {"oid": "fc43993f1962dcf4e907c85f5a2b85b239b8fad2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNjM3ODcyOnYy", "diffSide": "LEFT", "path": "lucene/core/src/java/org/apache/lucene/index/SegmentInfos.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzowNTo0OFrOG-q_-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjoyNTo0N1rOG_Tapg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM2OTQwMA==", "bodyText": "Leave this as it was (with throw ...) - don't know whether IntelliJ is smart enough to detect this method always throws an exception but other compilers are not (and this ensures the compiler sees it as a the only codepath leaving the clause).", "url": "https://github.com/apache/lucene-solr/pull/1732#discussion_r468369400", "createdAt": "2020-08-11T07:05:48Z", "author": {"login": "dweiss"}, "path": "lucene/core/src/java/org/apache/lucene/index/SegmentInfos.java", "diffHunk": "@@ -440,7 +440,7 @@ public static final SegmentInfos readCommit(Directory directory, ChecksumIndexIn\n       if (format >= VERSION_70) { // oldest supported version\n         CodecUtil.checkFooter(input, priorE);\n       } else {\n-        throw IOUtils.rethrowAlways(priorE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c2b03513ec4cdfe3c1ffe9a9681907c26b8d066"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYzMTM5NA==", "bodyText": "The original compiler complaint was that the throw is inside the finally block. Could I replace the \"Unreachable code\" at the end with this rethrow? I believe the logic will be the same.", "url": "https://github.com/apache/lucene-solr/pull/1732#discussion_r468631394", "createdAt": "2020-08-11T14:36:49Z", "author": {"login": "madrob"}, "path": "lucene/core/src/java/org/apache/lucene/index/SegmentInfos.java", "diffHunk": "@@ -440,7 +440,7 @@ public static final SegmentInfos readCommit(Directory directory, ChecksumIndexIn\n       if (format >= VERSION_70) { // oldest supported version\n         CodecUtil.checkFooter(input, priorE);\n       } else {\n-        throw IOUtils.rethrowAlways(priorE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM2OTQwMA=="}, "originalCommit": {"oid": "3c2b03513ec4cdfe3c1ffe9a9681907c26b8d066"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzMTU5MA==", "bodyText": "And what's wrong about a throw from within finally? A finally block is technically just a block of code, like any other. The compiler very likely assumes you're suppressing an exception if you throw from within finally but it's not the case here.\nI don't know if moving that throw will change the logic. Maybe not. Maybe yes. Given the two options, I wouldn't touch it. My concern was that you slipped such things as part of an otherwise \"trivial\" set of patches.", "url": "https://github.com/apache/lucene-solr/pull/1732#discussion_r469031590", "createdAt": "2020-08-12T06:25:47Z", "author": {"login": "dweiss"}, "path": "lucene/core/src/java/org/apache/lucene/index/SegmentInfos.java", "diffHunk": "@@ -440,7 +440,7 @@ public static final SegmentInfos readCommit(Directory directory, ChecksumIndexIn\n       if (format >= VERSION_70) { // oldest supported version\n         CodecUtil.checkFooter(input, priorE);\n       } else {\n-        throw IOUtils.rethrowAlways(priorE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM2OTQwMA=="}, "originalCommit": {"oid": "3c2b03513ec4cdfe3c1ffe9a9681907c26b8d066"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNjM4Nzc3OnYy", "diffSide": "LEFT", "path": "lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzowODo1MFrOG-rFQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzowODo1MFrOG-rFQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM3MDc1Mg==", "bodyText": "that 'term' class (PendingTerm) actually has a perfectly fine toString method... why not just remove termBytes and let it do its job?", "url": "https://github.com/apache/lucene-solr/pull/1732#discussion_r468370752", "createdAt": "2020-08-11T07:08:50Z", "author": {"login": "dweiss"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java", "diffHunk": "@@ -709,7 +710,8 @@ private PendingBlock writeBlock(int prefixLength, boolean isFloor, int floorLead\n \n           PendingTerm term = (PendingTerm) ent;\n \n-          assert StringHelper.startsWith(term.termBytes, prefix): \"term.term=\" + term.termBytes + \" prefix=\" + prefix;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c2b03513ec4cdfe3c1ffe9a9681907c26b8d066"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNjM4ODIyOnYy", "diffSide": "LEFT", "path": "lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzowODo1OVrOG-rFfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzowODo1OVrOG-rFfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM3MDgxNQ==", "bodyText": "Same here.", "url": "https://github.com/apache/lucene-solr/pull/1732#discussion_r468370815", "createdAt": "2020-08-11T07:08:59Z", "author": {"login": "dweiss"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java", "diffHunk": "@@ -741,7 +743,8 @@ private PendingBlock writeBlock(int prefixLength, boolean isFloor, int floorLead\n           if (ent.isTerm) {\n             PendingTerm term = (PendingTerm) ent;\n \n-            assert StringHelper.startsWith(term.termBytes, prefix): \"term.term=\" + term.termBytes + \" prefix=\" + prefix;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c2b03513ec4cdfe3c1ffe9a9681907c26b8d066"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNjM5MDQ3OnYy", "diffSide": "LEFT", "path": "lucene/core/src/java/org/apache/lucene/analysis/Analyzer.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzowOTo0N1rOG-rG2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjoxNTozOFrOG_TMYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM3MTE2Mg==", "bodyText": "Don't change to package private scope here. It will prevent subclasses from outside of the package from accessing those fields (and there may be classes outside of Lucene code doing that).", "url": "https://github.com/apache/lucene-solr/pull/1732#discussion_r468371162", "createdAt": "2020-08-11T07:09:47Z", "author": {"login": "dweiss"}, "path": "lucene/core/src/java/org/apache/lucene/analysis/Analyzer.java", "diffHunk": "@@ -367,12 +367,12 @@ public void close() {\n     /**\n      * Original source of the tokens.\n      */\n-    protected final Consumer<Reader> source;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c2b03513ec4cdfe3c1ffe9a9681907c26b8d066"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM3NDc3OQ==", "bodyText": "Removing this would break many outside analyzers. I know it's seldom that analyzers access these fields, but this is a real backward breaking change. Don't do this.\nI have no problem with the ctors, but here it's serious! Why did Intellij suggest a change like that? Looks like it was not so intelligent. \ud83e\udd28", "url": "https://github.com/apache/lucene-solr/pull/1732#discussion_r468374779", "createdAt": "2020-08-11T07:17:20Z", "author": {"login": "uschindler"}, "path": "lucene/core/src/java/org/apache/lucene/analysis/Analyzer.java", "diffHunk": "@@ -367,12 +367,12 @@ public void close() {\n     /**\n      * Original source of the tokens.\n      */\n-    protected final Consumer<Reader> source;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM3MTE2Mg=="}, "originalCommit": {"oid": "3c2b03513ec4cdfe3c1ffe9a9681907c26b8d066"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM3NjA2OA==", "bodyText": "There's also no risk somebody could do anything wrong. It's both (also next one) final field and the it's for consuming only.", "url": "https://github.com/apache/lucene-solr/pull/1732#discussion_r468376068", "createdAt": "2020-08-11T07:19:57Z", "author": {"login": "uschindler"}, "path": "lucene/core/src/java/org/apache/lucene/analysis/Analyzer.java", "diffHunk": "@@ -367,12 +367,12 @@ public void close() {\n     /**\n      * Original source of the tokens.\n      */\n-    protected final Consumer<Reader> source;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM3MTE2Mg=="}, "originalCommit": {"oid": "3c2b03513ec4cdfe3c1ffe9a9681907c26b8d066"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYyMjg3Nw==", "bodyText": "I think it's because the field is final and there is a getter for it, so the code analyzer prefers encapsulation?", "url": "https://github.com/apache/lucene-solr/pull/1732#discussion_r468622877", "createdAt": "2020-08-11T14:25:05Z", "author": {"login": "madrob"}, "path": "lucene/core/src/java/org/apache/lucene/analysis/Analyzer.java", "diffHunk": "@@ -367,12 +367,12 @@ public void close() {\n     /**\n      * Original source of the tokens.\n      */\n-    protected final Consumer<Reader> source;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM3MTE2Mg=="}, "originalCommit": {"oid": "3c2b03513ec4cdfe3c1ffe9a9681907c26b8d066"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyNzkzOA==", "bodyText": "Maybe. It doesn't matter though - this changes the API of a class that's been there for ages. I bet there is a class out there somewhere (let's say A extends Analyzer) and another one (B extends A) where A overrides the getter but B reaches out for the original field. Do we want this to break just to hide a field that can be useful for subclasses just to silence an automatic code inspection? I don't think we should.", "url": "https://github.com/apache/lucene-solr/pull/1732#discussion_r469027938", "createdAt": "2020-08-12T06:15:38Z", "author": {"login": "dweiss"}, "path": "lucene/core/src/java/org/apache/lucene/analysis/Analyzer.java", "diffHunk": "@@ -367,12 +367,12 @@ public void close() {\n     /**\n      * Original source of the tokens.\n      */\n-    protected final Consumer<Reader> source;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM3MTE2Mg=="}, "originalCommit": {"oid": "3c2b03513ec4cdfe3c1ffe9a9681907c26b8d066"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNjM5MDkwOnYy", "diffSide": "LEFT", "path": "lucene/core/src/java/org/apache/lucene/analysis/Analyzer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzowOTo1NVrOG-rHGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzowOTo1NVrOG-rHGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM3MTIyNA==", "bodyText": "Same here.", "url": "https://github.com/apache/lucene-solr/pull/1732#discussion_r468371224", "createdAt": "2020-08-11T07:09:55Z", "author": {"login": "dweiss"}, "path": "lucene/core/src/java/org/apache/lucene/analysis/Analyzer.java", "diffHunk": "@@ -367,12 +367,12 @@ public void close() {\n     /**\n      * Original source of the tokens.\n      */\n-    protected final Consumer<Reader> source;\n+    final Consumer<Reader> source;\n     /**\n      * Sink tokenstream, such as the outer tokenfilter decorating\n      * the chain. This can be the source if there are no filters.\n      */\n-    protected final TokenStream sink;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c2b03513ec4cdfe3c1ffe9a9681907c26b8d066"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNjM5MjU2OnYy", "diffSide": "LEFT", "path": "lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzoxMDoyMlrOG-rIAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzoxMDoyMlrOG-rIAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM3MTQ1OQ==", "bodyText": "term has a toString method - use it.", "url": "https://github.com/apache/lucene-solr/pull/1732#discussion_r468371459", "createdAt": "2020-08-11T07:10:22Z", "author": {"login": "dweiss"}, "path": "lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java", "diffHunk": "@@ -604,7 +605,7 @@ private PendingBlock writeBlock(int prefixLength, boolean isFloor, int floorLead\n           assert ent.isTerm: \"i=\" + i;\n \n           PendingTerm term = (PendingTerm) ent;\n-          assert StringHelper.startsWith(term.termBytes, prefix): \"term.term=\" + term.termBytes + \" prefix=\" + prefix;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c2b03513ec4cdfe3c1ffe9a9681907c26b8d066"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNjM5MjgwOnYy", "diffSide": "LEFT", "path": "lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzoxMDoyNlrOG-rIKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzoxMDoyNlrOG-rIKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM3MTQ5Ng==", "bodyText": "term has a toString method - use it.", "url": "https://github.com/apache/lucene-solr/pull/1732#discussion_r468371496", "createdAt": "2020-08-11T07:10:26Z", "author": {"login": "dweiss"}, "path": "lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java", "diffHunk": "@@ -640,7 +641,7 @@ private PendingBlock writeBlock(int prefixLength, boolean isFloor, int floorLead\n           PendingEntry ent = pending.get(i);\n           if (ent.isTerm) {\n             PendingTerm term = (PendingTerm) ent;\n-            assert StringHelper.startsWith(term.termBytes, prefix): \"term.term=\" + term.termBytes + \" prefix=\" + prefix;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c2b03513ec4cdfe3c1ffe9a9681907c26b8d066"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDE0MDAyOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwNjo1OToxOVrOHBQJIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwNjo1OToxOVrOHBQJIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA3NTEwNw==", "bodyText": "I didn't look at the code but this looks suspicious. The reordering here changes happens-before relationship between these statements. Please leave the order of assignment of tail as it was (inside the locked block).", "url": "https://github.com/apache/lucene-solr/pull/1732#discussion_r471075107", "createdAt": "2020-08-16T06:59:19Z", "author": {"login": "dweiss"}, "path": "lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue.java", "diffHunk": "@@ -510,8 +510,8 @@ public String toString() {\n   }\n   \n   private boolean forceApplyGlobalSlice() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1bc86221bcab1095b29128cf99307e83e60eaba"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDE0MzM2OnYy", "diffSide": "RIGHT", "path": "lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwNzowMzozNFrOHBQKsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMTo1Mzo0NVrOHDbpWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA3NTUwNg==", "bodyText": "inconsistent with other calls (should use term.toString())?", "url": "https://github.com/apache/lucene-solr/pull/1732#discussion_r471075506", "createdAt": "2020-08-16T07:03:34Z", "author": {"login": "dweiss"}, "path": "lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.java", "diffHunk": "@@ -582,7 +583,7 @@ private PendingBlock writeBlock(int prefixLength, boolean isFloor, int floorLead\n           assert ent.isTerm: \"i=\" + i;\n \n           PendingTerm term = (PendingTerm) ent;\n-          assert StringHelper.startsWith(term.termBytes, prefix): \"term.term=\" + term.termBytes + \" prefix=\" + prefix;\n+          assert StringHelper.startsWith(term.termBytes, prefix): \"term.term=\" + Arrays.toString(term.termBytes) + \" prefix=\" + prefix;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1bc86221bcab1095b29128cf99307e83e60eaba"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM2MDcyOA==", "bodyText": "yikes, thank you.", "url": "https://github.com/apache/lucene-solr/pull/1732#discussion_r473360728", "createdAt": "2020-08-19T21:53:45Z", "author": {"login": "madrob"}, "path": "lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.java", "diffHunk": "@@ -582,7 +583,7 @@ private PendingBlock writeBlock(int prefixLength, boolean isFloor, int floorLead\n           assert ent.isTerm: \"i=\" + i;\n \n           PendingTerm term = (PendingTerm) ent;\n-          assert StringHelper.startsWith(term.termBytes, prefix): \"term.term=\" + term.termBytes + \" prefix=\" + prefix;\n+          assert StringHelper.startsWith(term.termBytes, prefix): \"term.term=\" + Arrays.toString(term.termBytes) + \" prefix=\" + prefix;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA3NTUwNg=="}, "originalCommit": {"oid": "f1bc86221bcab1095b29128cf99307e83e60eaba"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDE0MzU3OnYy", "diffSide": "RIGHT", "path": "lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwNzowMzo1M1rOHBQKzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwNzowMzo1M1rOHBQKzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA3NTUzMg==", "bodyText": "term.toString() again?", "url": "https://github.com/apache/lucene-solr/pull/1732#discussion_r471075532", "createdAt": "2020-08-16T07:03:53Z", "author": {"login": "dweiss"}, "path": "lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.java", "diffHunk": "@@ -610,7 +611,7 @@ private PendingBlock writeBlock(int prefixLength, boolean isFloor, int floorLead\n           PendingEntry ent = pending.get(i);\n           if (ent.isTerm) {\n             PendingTerm term = (PendingTerm) ent;\n-            assert StringHelper.startsWith(term.termBytes, prefix): \"term.term=\" + term.termBytes + \" prefix=\" + prefix;\n+            assert StringHelper.startsWith(term.termBytes, prefix): \"term.term=\" + Arrays.toString(term.termBytes) + \" prefix=\" + prefix;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1bc86221bcab1095b29128cf99307e83e60eaba"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDE0NDcyOnYy", "diffSide": "RIGHT", "path": "lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwNzowNToyNlrOHBQLWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMTo1NToxNVrOHD9Ziw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA3NTY3NA==", "bodyText": "Since you're cleaning up I think it'd be better to use assertThrows() with lambda...", "url": "https://github.com/apache/lucene-solr/pull/1732#discussion_r471075674", "createdAt": "2020-08-16T07:05:26Z", "author": {"login": "dweiss"}, "path": "lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase.java", "diffHunk": "@@ -504,8 +504,8 @@ protected void assertEquals(RandomTokenStream tk, FieldType ft, Terms terms) thr\n           }\n           try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1bc86221bcab1095b29128cf99307e83e60eaba"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM5NDEzNw==", "bodyText": "So it turns out be be less clean, since two of the implementations throw IllegalStateException and two throw AssertionError.", "url": "https://github.com/apache/lucene-solr/pull/1732#discussion_r473394137", "createdAt": "2020-08-19T22:36:46Z", "author": {"login": "madrob"}, "path": "lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase.java", "diffHunk": "@@ -504,8 +504,8 @@ protected void assertEquals(RandomTokenStream tk, FieldType ft, Terms terms) thr\n           }\n           try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA3NTY3NA=="}, "originalCommit": {"oid": "f1bc86221bcab1095b29128cf99307e83e60eaba"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkxMzczOQ==", "bodyText": "@jpountz  may be interested in why this is inconsistent between implementations?", "url": "https://github.com/apache/lucene-solr/pull/1732#discussion_r473913739", "createdAt": "2020-08-20T11:55:15Z", "author": {"login": "dweiss"}, "path": "lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase.java", "diffHunk": "@@ -504,8 +504,8 @@ protected void assertEquals(RandomTokenStream tk, FieldType ft, Terms terms) thr\n           }\n           try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA3NTY3NA=="}, "originalCommit": {"oid": "f1bc86221bcab1095b29128cf99307e83e60eaba"}, "originalPosition": 2}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1280, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}