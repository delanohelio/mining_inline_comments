{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1NzIzNjQ1", "number": 1332, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxOToyMjo1NFrODm0r6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxOToyMjo1NFrODm0r6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDM1NjkxOnYy", "diffSide": "RIGHT", "path": "solr/solr-ref-guide/src/the-tagger-handler.adoc", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxOToyMjo1NFrOF0dqIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjozODo0MFrOF01Ijg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU1NjE5NA==", "bodyText": "[Q] Interesting.  I didn't realize that the FST50 vs default performance decreased the smaller the individual document size was.  Did you do a particular performance test to bear this out, or are you just intuiting that behavior from knowing how postingsFormats work?\nIs the performance comparable even if numTweets or whatever gets large and the posting-lists grow due to the sheer number of tiny docs?", "url": "https://github.com/apache/lucene-solr/pull/1332#discussion_r390556194", "createdAt": "2020-03-10T19:22:54Z", "author": {"login": "gerlowskija"}, "path": "solr/solr-ref-guide/src/the-tagger-handler.adoc", "diffHunk": "@@ -271,11 +271,12 @@ The response should be this (the QTime may vary):\n   }}\n ----\n \n-== Tagger Tips\n+== Tagger Performance Tips\n \n-Performance Tips:\n-\n-* Follow the recommended configuration field settings, especially `postingsFormat=FST50`.\n+* Follow the recommended configuration field settings above.\n+Additionally, for the best tagger performance, set `postingsFormat=FST50`.\n+However, non-default postings formats have no backwards-compatibility guarantees, and so if you upgrade Solr then you may find a nasty exception on startup as it fails to read the older index.\n+If the input text to be tagged is small (e.g. you are tagging queries or tweets) then the postings format choice isn't as important.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f82d3e6fd31b0d61f2e55b449caaf50e35b43bd3"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU4MTgxMw==", "bodyText": "I didn't realize that the FST50 vs default performance decreased the smaller the individual document size was\n\nThe tagger works by looping over each token from the input and doing a term dictionary lookup on the local index.  Logically, if your input text is small then there is less work to do than for large input text.  Knowing this requires tagger knowledge but not how any particular postings format works.  See?  No I didn't benchmark this ;-).", "url": "https://github.com/apache/lucene-solr/pull/1332#discussion_r390581813", "createdAt": "2020-03-10T20:11:13Z", "author": {"login": "dsmiley"}, "path": "solr/solr-ref-guide/src/the-tagger-handler.adoc", "diffHunk": "@@ -271,11 +271,12 @@ The response should be this (the QTime may vary):\n   }}\n ----\n \n-== Tagger Tips\n+== Tagger Performance Tips\n \n-Performance Tips:\n-\n-* Follow the recommended configuration field settings, especially `postingsFormat=FST50`.\n+* Follow the recommended configuration field settings above.\n+Additionally, for the best tagger performance, set `postingsFormat=FST50`.\n+However, non-default postings formats have no backwards-compatibility guarantees, and so if you upgrade Solr then you may find a nasty exception on startup as it fails to read the older index.\n+If the input text to be tagged is small (e.g. you are tagging queries or tweets) then the postings format choice isn't as important.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU1NjE5NA=="}, "originalCommit": {"oid": "f82d3e6fd31b0d61f2e55b449caaf50e35b43bd3"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyMTM1Nw==", "bodyText": "FYI the SolrTextTagger was benchmarked a couple years ago to compare the old \"Memory\" PF and FST50 -- OpenSextant/SolrTextTagger#38 (comment)   we never tried the default (blocktree).  I believe the input data in that experiment were whole articles, and thus would be impacted by the postings format choice.", "url": "https://github.com/apache/lucene-solr/pull/1332#discussion_r390721357", "createdAt": "2020-03-11T02:59:31Z", "author": {"login": "dsmiley"}, "path": "solr/solr-ref-guide/src/the-tagger-handler.adoc", "diffHunk": "@@ -271,11 +271,12 @@ The response should be this (the QTime may vary):\n   }}\n ----\n \n-== Tagger Tips\n+== Tagger Performance Tips\n \n-Performance Tips:\n-\n-* Follow the recommended configuration field settings, especially `postingsFormat=FST50`.\n+* Follow the recommended configuration field settings above.\n+Additionally, for the best tagger performance, set `postingsFormat=FST50`.\n+However, non-default postings formats have no backwards-compatibility guarantees, and so if you upgrade Solr then you may find a nasty exception on startup as it fails to read the older index.\n+If the input text to be tagged is small (e.g. you are tagging queries or tweets) then the postings format choice isn't as important.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU1NjE5NA=="}, "originalCommit": {"oid": "f82d3e6fd31b0d61f2e55b449caaf50e35b43bd3"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0MDgxNA==", "bodyText": "Makes sense.\nI ran into that old perf-test comment back when I was raising SOLR-14254, but wasn't sure how relevant it was.  The situation user's face today is very different: \"memory\" (the most performant option) is gone entirely and the test doesn't even try to cover blocktree.\nBut that's independent of this PR.  These docs are worth getting in as-is.  If one of us (or someone else entirely) is able to shed more light on blocktree performance in the future, docs can be updated at that point.  No reason to let the perfect get in the way of the good.", "url": "https://github.com/apache/lucene-solr/pull/1332#discussion_r390940814", "createdAt": "2020-03-11T12:38:40Z", "author": {"login": "gerlowskija"}, "path": "solr/solr-ref-guide/src/the-tagger-handler.adoc", "diffHunk": "@@ -271,11 +271,12 @@ The response should be this (the QTime may vary):\n   }}\n ----\n \n-== Tagger Tips\n+== Tagger Performance Tips\n \n-Performance Tips:\n-\n-* Follow the recommended configuration field settings, especially `postingsFormat=FST50`.\n+* Follow the recommended configuration field settings above.\n+Additionally, for the best tagger performance, set `postingsFormat=FST50`.\n+However, non-default postings formats have no backwards-compatibility guarantees, and so if you upgrade Solr then you may find a nasty exception on startup as it fails to read the older index.\n+If the input text to be tagged is small (e.g. you are tagging queries or tweets) then the postings format choice isn't as important.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU1NjE5NA=="}, "originalCommit": {"oid": "f82d3e6fd31b0d61f2e55b449caaf50e35b43bd3"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 856, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}