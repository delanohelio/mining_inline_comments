{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyNzg3MjEz", "number": 1482, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjo0MzowNVrOD4-Ffw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDoxMjozN1rOD5AfoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDY0MDYzOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/codecs/CodecUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjo0MzowNVrOGP-iTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjo0MzowNVrOGP-iTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwNjQxMg==", "bodyText": "Nitpick: ; instead of , since these are really two separate sentences?", "url": "https://github.com/apache/lucene-solr/pull/1482#discussion_r419406412", "createdAt": "2020-05-04T12:43:05Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/CodecUtil.java", "diffHunk": "@@ -448,24 +448,27 @@ public static void checkFooter(ChecksumIndexInput in, Throwable priorException)\n       checkFooter(in);\n     } else {\n       try {\n+        // If we have evidence of corruption then we return the corruption as the\n+        // main exception and the prior exception gets suppressed. Otherwise we\n+        // return the prior exception with a suppressed exception that notifies\n+        // the user that checksums matched.\n         long remaining = in.length() - in.getFilePointer();\n         if (remaining < footerLength()) {\n           // corruption caused us to read into the checksum footer already: we can't proceed\n-          priorException.addSuppressed(new CorruptIndexException(\"checksum status indeterminate: remaining=\" + remaining +\n-                                                                 \", please run checkindex for more details\", in));\n+          throw new CorruptIndexException(\"checksum status indeterminate: remaining=\" + remaining +\n+                                          \", please run checkindex for more details\", in);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09fdc87ead1f35a06ea4f00ebf846819d3268e1b"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDY1MDYyOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/codecs/CodecUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjo0NToyNlrOGP-oEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODozNDo0OVrOGR0Kqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwNzg4OA==", "bodyText": "Do we normally (in other places) also use CorruptIndexException to indicate a valid checksum?  I feel like we need a NotCorruptIndexException for this :)", "url": "https://github.com/apache/lucene-solr/pull/1482#discussion_r419407888", "createdAt": "2020-05-04T12:45:26Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/CodecUtil.java", "diffHunk": "@@ -448,24 +448,27 @@ public static void checkFooter(ChecksumIndexInput in, Throwable priorException)\n       checkFooter(in);\n     } else {\n       try {\n+        // If we have evidence of corruption then we return the corruption as the\n+        // main exception and the prior exception gets suppressed. Otherwise we\n+        // return the prior exception with a suppressed exception that notifies\n+        // the user that checksums matched.\n         long remaining = in.length() - in.getFilePointer();\n         if (remaining < footerLength()) {\n           // corruption caused us to read into the checksum footer already: we can't proceed\n-          priorException.addSuppressed(new CorruptIndexException(\"checksum status indeterminate: remaining=\" + remaining +\n-                                                                 \", please run checkindex for more details\", in));\n+          throw new CorruptIndexException(\"checksum status indeterminate: remaining=\" + remaining +\n+                                          \", please run checkindex for more details\", in);\n         } else {\n           // otherwise, skip any unread bytes.\n           in.skipBytes(remaining - footerLength());\n           \n           // now check the footer\n-          try {\n-            long checksum = checkFooter(in);\n-            priorException.addSuppressed(new CorruptIndexException(\"checksum passed (\" + Long.toHexString(checksum) + \n-                                                                   \"). possibly transient resource issue, or a Lucene or JVM bug\", in));\n-          } catch (CorruptIndexException t) {\n-            priorException.addSuppressed(t);\n-          }\n+          long checksum = checkFooter(in);\n+          priorException.addSuppressed(new CorruptIndexException(\"checksum passed (\" + Long.toHexString(checksum) +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09fdc87ead1f35a06ea4f00ebf846819d3268e1b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMzMzY3NQ==", "bodyText": "This case is interesting indeed, it could either be a Lucene bug or a silent corruption.", "url": "https://github.com/apache/lucene-solr/pull/1482#discussion_r421333675", "createdAt": "2020-05-07T08:34:49Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/CodecUtil.java", "diffHunk": "@@ -448,24 +448,27 @@ public static void checkFooter(ChecksumIndexInput in, Throwable priorException)\n       checkFooter(in);\n     } else {\n       try {\n+        // If we have evidence of corruption then we return the corruption as the\n+        // main exception and the prior exception gets suppressed. Otherwise we\n+        // return the prior exception with a suppressed exception that notifies\n+        // the user that checksums matched.\n         long remaining = in.length() - in.getFilePointer();\n         if (remaining < footerLength()) {\n           // corruption caused us to read into the checksum footer already: we can't proceed\n-          priorException.addSuppressed(new CorruptIndexException(\"checksum status indeterminate: remaining=\" + remaining +\n-                                                                 \", please run checkindex for more details\", in));\n+          throw new CorruptIndexException(\"checksum status indeterminate: remaining=\" + remaining +\n+                                          \", please run checkindex for more details\", in);\n         } else {\n           // otherwise, skip any unread bytes.\n           in.skipBytes(remaining - footerLength());\n           \n           // now check the footer\n-          try {\n-            long checksum = checkFooter(in);\n-            priorException.addSuppressed(new CorruptIndexException(\"checksum passed (\" + Long.toHexString(checksum) + \n-                                                                   \"). possibly transient resource issue, or a Lucene or JVM bug\", in));\n-          } catch (CorruptIndexException t) {\n-            priorException.addSuppressed(t);\n-          }\n+          long checksum = checkFooter(in);\n+          priorException.addSuppressed(new CorruptIndexException(\"checksum passed (\" + Long.toHexString(checksum) +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwNzg4OA=="}, "originalCommit": {"oid": "09fdc87ead1f35a06ea4f00ebf846819d3268e1b"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTAzNTIxOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDoxMjozN1rOGQCPbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDoxMjozN1rOGQCPbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2NzExNg==", "bodyText": "no longer as suppressed", "url": "https://github.com/apache/lucene-solr/pull/1482#discussion_r419467116", "createdAt": "2020-05-04T14:12:37Z", "author": {"login": "madrob"}, "path": "lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter.java", "diffHunk": "@@ -353,12 +352,10 @@ protected void corruptFile() throws IOException {\n \n       // This corruption made OfflineSorter fail with its own exception, but we verify it also went and added (as suppressed) that the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09fdc87ead1f35a06ea4f00ebf846819d3268e1b"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1510, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}