{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1OTE5OTkx", "number": 1736, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMjozMDozNVrOEXMDWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjoyNzo1N1rOEXSepQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzUwMTY5OnYy", "diffSide": "RIGHT", "path": "solr/core/src/test/org/apache/solr/servlet/TestRequestRateLimiter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMjozMDozNVrOG-1lzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMjozMDozNVrOG-1lzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU0MjkyNQ==", "bodyText": "Can we limit the higher footprint to Nightly?", "url": "https://github.com/apache/lucene-solr/pull/1736#discussion_r468542925", "createdAt": "2020-08-11T12:30:35Z", "author": {"login": "madrob"}, "path": "solr/core/src/test/org/apache/solr/servlet/TestRequestRateLimiter.java", "diffHunk": "@@ -66,15 +66,11 @@ public void testConcurrentQueries() throws Exception {\n \n     solrDispatchFilter.replaceRateLimitManager(rateLimitManager);\n \n-    processTest(client);\n+    processTest(client, 10000 /* number of documents */, 350 /* number of queries */);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51e334a4d1b9a1922854483dbba6eb98ef112a8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzUwMzc0OnYy", "diffSide": "LEFT", "path": "solr/core/src/test/org/apache/solr/servlet/TestRequestRateLimiter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMjozMTowOFrOG-1nFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNTo0NToxMVrOG--DPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU0MzI1NQ==", "bodyText": "Somewhat concerning that the fix to the test is to relax the assertion conditions", "url": "https://github.com/apache/lucene-solr/pull/1736#discussion_r468543255", "createdAt": "2020-08-11T12:31:08Z", "author": {"login": "madrob"}, "path": "solr/core/src/test/org/apache/solr/servlet/TestRequestRateLimiter.java", "diffHunk": "@@ -66,15 +66,11 @@ public void testConcurrentQueries() throws Exception {\n \n     solrDispatchFilter.replaceRateLimitManager(rateLimitManager);\n \n-    processTest(client);\n+    processTest(client, 10000 /* number of documents */, 350 /* number of queries */);\n \n     MockRequestRateLimiter mockQueryRateLimiter = (MockRequestRateLimiter) rateLimitManager.getRequestRateLimiter(SolrRequest.SolrRequestType.QUERY);\n \n-    assertEquals(25, mockQueryRateLimiter.incomingRequestCount.get());\n-    assertTrue(\"Incoming accepted new request count did not match. Expected 5 incoming \" + mockQueryRateLimiter.acceptedNewRequestCount.get(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51e334a4d1b9a1922854483dbba6eb98ef112a8"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY4MTUzMg==", "bodyText": "It isnt really a relaxation -- the remaining assert should cover for all cases that can happen for rate limiting. The catch is that rate limiting is not a guaranteed phenomenon -- we create a high load and it should happen. I have added an additional assert -- let me know if it looks fine.", "url": "https://github.com/apache/lucene-solr/pull/1736#discussion_r468681532", "createdAt": "2020-08-11T15:45:11Z", "author": {"login": "atris"}, "path": "solr/core/src/test/org/apache/solr/servlet/TestRequestRateLimiter.java", "diffHunk": "@@ -66,15 +66,11 @@ public void testConcurrentQueries() throws Exception {\n \n     solrDispatchFilter.replaceRateLimitManager(rateLimitManager);\n \n-    processTest(client);\n+    processTest(client, 10000 /* number of documents */, 350 /* number of queries */);\n \n     MockRequestRateLimiter mockQueryRateLimiter = (MockRequestRateLimiter) rateLimitManager.getRequestRateLimiter(SolrRequest.SolrRequestType.QUERY);\n \n-    assertEquals(25, mockQueryRateLimiter.incomingRequestCount.get());\n-    assertTrue(\"Incoming accepted new request count did not match. Expected 5 incoming \" + mockQueryRateLimiter.acceptedNewRequestCount.get(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU0MzI1NQ=="}, "originalCommit": {"oid": "e51e334a4d1b9a1922854483dbba6eb98ef112a8"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzUwNzM2OnYy", "diffSide": "RIGHT", "path": "solr/core/src/test/org/apache/solr/servlet/TestRequestRateLimiter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMjozMjoxMVrOG-1pXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMjozMjoxMVrOG-1pXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU0MzgzNg==", "bodyText": "should be numDocuments", "url": "https://github.com/apache/lucene-solr/pull/1736#discussion_r468543836", "createdAt": "2020-08-11T12:32:11Z", "author": {"login": "madrob"}, "path": "solr/core/src/test/org/apache/solr/servlet/TestRequestRateLimiter.java", "diffHunk": "@@ -124,12 +120,12 @@ private void processTest(CloudSolrClient client) throws Exception {\n     List<Future<Boolean>> futures;\n \n     try {\n-      for (int i = 0; i < 25; i++) {\n+      for (int i = 0; i < numQueries; i++) {\n         callableList.add(() -> {\n           try {\n             QueryResponse response = client.query(new SolrQuery(\"*:*\"));\n \n-            assertEquals(100, response.getResults().getNumFound());\n+            assertEquals(10000, response.getResults().getNumFound());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51e334a4d1b9a1922854483dbba6eb98ef112a8"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODU1MTQ1OnYy", "diffSide": "RIGHT", "path": "solr/core/src/test/org/apache/solr/servlet/TestRequestRateLimiter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjoyNzoxNFrOG-_uhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjo1Njo1NVrOG_A2vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcwODk5Ng==", "bodyText": "This isn't what I meant, sorry for being unclear. Keep this as @Test but when selecting the number of documents and queries do something like https://github.com/apache/lucene-solr/blob/master/lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues.java#L52", "url": "https://github.com/apache/lucene-solr/pull/1736#discussion_r468708996", "createdAt": "2020-08-11T16:27:14Z", "author": {"login": "madrob"}, "path": "solr/core/src/test/org/apache/solr/servlet/TestRequestRateLimiter.java", "diffHunk": "@@ -48,7 +47,7 @@ public static void setupCluster() throws Exception {\n     configureCluster(1).addConfig(FIRST_COLLECTION, configset(\"cloud-minimal\")).configure();\n   }\n \n-  @Test\n+  @Nightly", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90fa9270f0a80388a1e4c40e69a60f812883e72a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcyMTY0OA==", "bodyText": "s/Nightly/Test", "url": "https://github.com/apache/lucene-solr/pull/1736#discussion_r468721648", "createdAt": "2020-08-11T16:47:29Z", "author": {"login": "madrob"}, "path": "solr/core/src/test/org/apache/solr/servlet/TestRequestRateLimiter.java", "diffHunk": "@@ -48,7 +47,7 @@ public static void setupCluster() throws Exception {\n     configureCluster(1).addConfig(FIRST_COLLECTION, configset(\"cloud-minimal\")).configure();\n   }\n \n-  @Test\n+  @Nightly", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcwODk5Ng=="}, "originalCommit": {"oid": "90fa9270f0a80388a1e4c40e69a60f812883e72a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcyNzQ4NQ==", "bodyText": "Updated", "url": "https://github.com/apache/lucene-solr/pull/1736#discussion_r468727485", "createdAt": "2020-08-11T16:56:55Z", "author": {"login": "atris"}, "path": "solr/core/src/test/org/apache/solr/servlet/TestRequestRateLimiter.java", "diffHunk": "@@ -48,7 +47,7 @@ public static void setupCluster() throws Exception {\n     configureCluster(1).addConfig(FIRST_COLLECTION, configset(\"cloud-minimal\")).configure();\n   }\n \n-  @Test\n+  @Nightly", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcwODk5Ng=="}, "originalCommit": {"oid": "90fa9270f0a80388a1e4c40e69a60f812883e72a"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODU1NDYxOnYy", "diffSide": "RIGHT", "path": "solr/core/src/test/org/apache/solr/servlet/TestRequestRateLimiter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjoyNzo1N1rOG-_whQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjo1MjozMVrOG_AsEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcwOTUwOQ==", "bodyText": "Should we assert that accepted + rejected = total?\nAnd that accepted > 0.", "url": "https://github.com/apache/lucene-solr/pull/1736#discussion_r468709509", "createdAt": "2020-08-11T16:27:57Z", "author": {"login": "madrob"}, "path": "solr/core/src/test/org/apache/solr/servlet/TestRequestRateLimiter.java", "diffHunk": "@@ -66,20 +65,19 @@ public void testConcurrentQueries() throws Exception {\n \n     solrDispatchFilter.replaceRateLimitManager(rateLimitManager);\n \n-    processTest(client);\n+    processTest(client, 10000 /* number of documents */, 350 /* number of queries */);\n \n     MockRequestRateLimiter mockQueryRateLimiter = (MockRequestRateLimiter) rateLimitManager.getRequestRateLimiter(SolrRequest.SolrRequestType.QUERY);\n \n-    assertEquals(25, mockQueryRateLimiter.incomingRequestCount.get());\n-    assertTrue(\"Incoming accepted new request count did not match. Expected 5 incoming \" + mockQueryRateLimiter.acceptedNewRequestCount.get(),\n-        mockQueryRateLimiter.acceptedNewRequestCount.get() < 25);\n-    assertTrue(\"Incoming rejected new request count did not match. Expected 20 incoming \" + mockQueryRateLimiter.rejectedRequestCount.get(),\n-        mockQueryRateLimiter.rejectedRequestCount.get() > 0);\n+    assertEquals(350, mockQueryRateLimiter.incomingRequestCount.get());\n+\n+    assertTrue((mockQueryRateLimiter.acceptedNewRequestCount.get() == mockQueryRateLimiter.incomingRequestCount.get()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90fa9270f0a80388a1e4c40e69a60f812883e72a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxMzE5NA==", "bodyText": "That is what we do in this assert?\nassertEquals(mockQueryRateLimiter.incomingRequestCount.get(),\nmockQueryRateLimiter.acceptedNewRequestCount.get() + mockQueryRateLimiter.rejectedRequestCount.get());", "url": "https://github.com/apache/lucene-solr/pull/1736#discussion_r468713194", "createdAt": "2020-08-11T16:33:31Z", "author": {"login": "atris"}, "path": "solr/core/src/test/org/apache/solr/servlet/TestRequestRateLimiter.java", "diffHunk": "@@ -66,20 +65,19 @@ public void testConcurrentQueries() throws Exception {\n \n     solrDispatchFilter.replaceRateLimitManager(rateLimitManager);\n \n-    processTest(client);\n+    processTest(client, 10000 /* number of documents */, 350 /* number of queries */);\n \n     MockRequestRateLimiter mockQueryRateLimiter = (MockRequestRateLimiter) rateLimitManager.getRequestRateLimiter(SolrRequest.SolrRequestType.QUERY);\n \n-    assertEquals(25, mockQueryRateLimiter.incomingRequestCount.get());\n-    assertTrue(\"Incoming accepted new request count did not match. Expected 5 incoming \" + mockQueryRateLimiter.acceptedNewRequestCount.get(),\n-        mockQueryRateLimiter.acceptedNewRequestCount.get() < 25);\n-    assertTrue(\"Incoming rejected new request count did not match. Expected 20 incoming \" + mockQueryRateLimiter.rejectedRequestCount.get(),\n-        mockQueryRateLimiter.rejectedRequestCount.get() > 0);\n+    assertEquals(350, mockQueryRateLimiter.incomingRequestCount.get());\n+\n+    assertTrue((mockQueryRateLimiter.acceptedNewRequestCount.get() == mockQueryRateLimiter.incomingRequestCount.get()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcwOTUwOQ=="}, "originalCommit": {"oid": "90fa9270f0a80388a1e4c40e69a60f812883e72a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcyNDc1NQ==", "bodyText": "yea I was looking at the wrong side of the diff", "url": "https://github.com/apache/lucene-solr/pull/1736#discussion_r468724755", "createdAt": "2020-08-11T16:52:31Z", "author": {"login": "madrob"}, "path": "solr/core/src/test/org/apache/solr/servlet/TestRequestRateLimiter.java", "diffHunk": "@@ -66,20 +65,19 @@ public void testConcurrentQueries() throws Exception {\n \n     solrDispatchFilter.replaceRateLimitManager(rateLimitManager);\n \n-    processTest(client);\n+    processTest(client, 10000 /* number of documents */, 350 /* number of queries */);\n \n     MockRequestRateLimiter mockQueryRateLimiter = (MockRequestRateLimiter) rateLimitManager.getRequestRateLimiter(SolrRequest.SolrRequestType.QUERY);\n \n-    assertEquals(25, mockQueryRateLimiter.incomingRequestCount.get());\n-    assertTrue(\"Incoming accepted new request count did not match. Expected 5 incoming \" + mockQueryRateLimiter.acceptedNewRequestCount.get(),\n-        mockQueryRateLimiter.acceptedNewRequestCount.get() < 25);\n-    assertTrue(\"Incoming rejected new request count did not match. Expected 20 incoming \" + mockQueryRateLimiter.rejectedRequestCount.get(),\n-        mockQueryRateLimiter.rejectedRequestCount.get() > 0);\n+    assertEquals(350, mockQueryRateLimiter.incomingRequestCount.get());\n+\n+    assertTrue((mockQueryRateLimiter.acceptedNewRequestCount.get() == mockQueryRateLimiter.incomingRequestCount.get()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcwOTUwOQ=="}, "originalCommit": {"oid": "90fa9270f0a80388a1e4c40e69a60f812883e72a"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1287, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}