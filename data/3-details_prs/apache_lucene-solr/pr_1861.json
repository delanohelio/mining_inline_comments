{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg1NTkzNDc3", "number": 1861, "title": "SOLR-10391: Add overwrite option to UPLOAD ConfigSet action", "bodyText": "When set to true, Solr will overwrite an existing configset in ZooKeeper if an UPLOAD action happens on an existing configset.\nA new cleanup parameter can also be passed to let Solr know what to do with the files that existed in the old configset, but no longer exist in the new configset (remove or keep)", "createdAt": "2020-09-12T00:23:24Z", "url": "https://github.com/apache/lucene-solr/pull/1861", "merged": true, "mergeCommit": {"oid": "7b7a5a16cee8dcac19aa935ca916e9bc271acd25"}, "closed": true, "closedAt": "2020-09-22T17:37:00Z", "author": {"login": "tflobbe"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdJNFrHgFqTQ4ODk5ODMzMA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLbQadABqjM3OTQzNDc4NjU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4OTk4MzMw", "url": "https://github.com/apache/lucene-solr/pull/1861#pullrequestreview-488998330", "createdAt": "2020-09-15T19:19:47Z", "commit": {"oid": "94649b931674346932096d71c5b9944074826500"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxOToxOTo0N1rOHSQp0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxOTozMjo0MVrOHSRUNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkwOTI2Ng==", "bodyText": "If you are overwriting an untrusted configSet with a trusted configSet, I din't think that will get updated here. I guess you would only want it if CLEANUP is true, since only then are you sure that all of the content is trusted.\nSo doing it in that if statement would probably work.", "url": "https://github.com/apache/lucene-solr/pull/1861#discussion_r488909266", "createdAt": "2020-09-15T19:19:47Z", "author": {"login": "HoustonPutman"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler.java", "diffHunk": "@@ -170,21 +176,90 @@ private void handleConfigUploadRequest(SolrQueryRequest req, SolrQueryResponse r\n \n     // Create a node for the configuration in zookeeper\n     boolean trusted = getTrusted(req);\n-    zkClient.makePath(configPathInZk, (\"{\\\"trusted\\\": \" + Boolean.toString(trusted) + \"}\").\n-        getBytes(StandardCharsets.UTF_8), true);\n+    Set<String> filesToDelete = Collections.emptySet();\n+    if (overwritesExisting) {\n+      if (!trusted) {\n+        ensureOverwritingUntrustedConfigSet(zkClient, configPathInZk);\n+      }\n+      if (req.getParams().getBool(ConfigSetParams.CLEANUP, false)) {\n+        filesToDelete = getAllConfigsetFiles(zkClient, configPathInZk);\n+      }\n+    } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94649b931674346932096d71c5b9944074826500"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkxMzQ1NA==", "bodyText": "We might want to clear data that the znode has if it exists and has data.", "url": "https://github.com/apache/lucene-solr/pull/1861#discussion_r488913454", "createdAt": "2020-09-15T19:24:52Z", "author": {"login": "HoustonPutman"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler.java", "diffHunk": "@@ -170,21 +176,90 @@ private void handleConfigUploadRequest(SolrQueryRequest req, SolrQueryResponse r\n \n     // Create a node for the configuration in zookeeper\n     boolean trusted = getTrusted(req);\n-    zkClient.makePath(configPathInZk, (\"{\\\"trusted\\\": \" + Boolean.toString(trusted) + \"}\").\n-        getBytes(StandardCharsets.UTF_8), true);\n+    Set<String> filesToDelete = Collections.emptySet();\n+    if (overwritesExisting) {\n+      if (!trusted) {\n+        ensureOverwritingUntrustedConfigSet(zkClient, configPathInZk);\n+      }\n+      if (req.getParams().getBool(ConfigSetParams.CLEANUP, false)) {\n+        filesToDelete = getAllConfigsetFiles(zkClient, configPathInZk);\n+      }\n+    } else {\n+      zkClient.makePath(configPathInZk, (\"{\\\"trusted\\\": \" + Boolean.toString(trusted) + \"}\").\n+              getBytes(StandardCharsets.UTF_8), true);\n+    }\n \n     ZipInputStream zis = new ZipInputStream(inputStream, StandardCharsets.UTF_8);\n     ZipEntry zipEntry = null;\n     while ((zipEntry = zis.getNextEntry()) != null) {\n       String filePathInZk = configPathInZk + \"/\" + zipEntry.getName();\n+      if (filePathInZk.endsWith(\"/\")) {\n+        filesToDelete.remove(filePathInZk.substring(0, filePathInZk.length() -1));\n+      } else {\n+        filesToDelete.remove(filePathInZk);\n+      }\n       if (zipEntry.isDirectory()) {\n-        zkClient.makePath(filePathInZk, true);\n+        zkClient.makePath(filePathInZk, false,  true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94649b931674346932096d71c5b9944074826500"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkxNjcyNw==", "bodyText": "the new ZKMaintenanceUtils.ZKVisitory() { ... } can be replaced with files::add", "url": "https://github.com/apache/lucene-solr/pull/1861#discussion_r488916727", "createdAt": "2020-09-15T19:28:41Z", "author": {"login": "HoustonPutman"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler.java", "diffHunk": "@@ -170,21 +176,90 @@ private void handleConfigUploadRequest(SolrQueryRequest req, SolrQueryResponse r\n \n     // Create a node for the configuration in zookeeper\n     boolean trusted = getTrusted(req);\n-    zkClient.makePath(configPathInZk, (\"{\\\"trusted\\\": \" + Boolean.toString(trusted) + \"}\").\n-        getBytes(StandardCharsets.UTF_8), true);\n+    Set<String> filesToDelete = Collections.emptySet();\n+    if (overwritesExisting) {\n+      if (!trusted) {\n+        ensureOverwritingUntrustedConfigSet(zkClient, configPathInZk);\n+      }\n+      if (req.getParams().getBool(ConfigSetParams.CLEANUP, false)) {\n+        filesToDelete = getAllConfigsetFiles(zkClient, configPathInZk);\n+      }\n+    } else {\n+      zkClient.makePath(configPathInZk, (\"{\\\"trusted\\\": \" + Boolean.toString(trusted) + \"}\").\n+              getBytes(StandardCharsets.UTF_8), true);\n+    }\n \n     ZipInputStream zis = new ZipInputStream(inputStream, StandardCharsets.UTF_8);\n     ZipEntry zipEntry = null;\n     while ((zipEntry = zis.getNextEntry()) != null) {\n       String filePathInZk = configPathInZk + \"/\" + zipEntry.getName();\n+      if (filePathInZk.endsWith(\"/\")) {\n+        filesToDelete.remove(filePathInZk.substring(0, filePathInZk.length() -1));\n+      } else {\n+        filesToDelete.remove(filePathInZk);\n+      }\n       if (zipEntry.isDirectory()) {\n-        zkClient.makePath(filePathInZk, true);\n+        zkClient.makePath(filePathInZk, false,  true);\n       } else {\n         createZkNodeIfNotExistsAndSetData(zkClient, filePathInZk,\n             IOUtils.toByteArray(zis));\n       }\n     }\n     zis.close();\n+    deleteUnusedFiles(zkClient, filesToDelete);\n+  }\n+\n+  private void deleteUnusedFiles(SolrZkClient zkClient, Set<String> filesToDelete) throws InterruptedException, KeeperException {\n+    if (!filesToDelete.isEmpty()) {\n+      if (log.isInfoEnabled()) {\n+        log.info(\"Cleaning up {} unused files\", filesToDelete.size());\n+      }\n+      if (log.isDebugEnabled()) {\n+        log.debug(\"Cleaning up unused files: {}\", filesToDelete);\n+      }\n+      for (String f:filesToDelete) {\n+        try {\n+          zkClient.delete(f, -1, true);\n+        } catch (KeeperException.NoNodeException nne) {\n+        }\n+      }\n+    }\n+  }\n+\n+  private Set<String> getAllConfigsetFiles(SolrZkClient zkClient, String configPathInZk) throws KeeperException, InterruptedException {\n+    final Set<String> files = new HashSet<>();\n+    if (!configPathInZk.startsWith(ZkConfigManager.CONFIGS_ZKNODE + \"/\")) {\n+      throw new IllegalArgumentException(\"\\\"\" + configPathInZk + \"\\\" not recognized as a configset path\");\n+    }\n+    ZkMaintenanceUtils.traverseZkTree(zkClient, configPathInZk, ZkMaintenanceUtils.VISIT_ORDER.VISIT_POST, new ZkMaintenanceUtils.ZkVisitor() {\n+      @Override\n+      public void visit(String path) throws InterruptedException, KeeperException {\n+        files.add(path);\n+      }\n+    });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94649b931674346932096d71c5b9944074826500"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkyMDExNw==", "bodyText": "using getOrDefault(\"trusted\", false) would remove the need for the null check.", "url": "https://github.com/apache/lucene-solr/pull/1861#discussion_r488920117", "createdAt": "2020-09-15T19:32:41Z", "author": {"login": "HoustonPutman"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler.java", "diffHunk": "@@ -170,21 +176,90 @@ private void handleConfigUploadRequest(SolrQueryRequest req, SolrQueryResponse r\n \n     // Create a node for the configuration in zookeeper\n     boolean trusted = getTrusted(req);\n-    zkClient.makePath(configPathInZk, (\"{\\\"trusted\\\": \" + Boolean.toString(trusted) + \"}\").\n-        getBytes(StandardCharsets.UTF_8), true);\n+    Set<String> filesToDelete = Collections.emptySet();\n+    if (overwritesExisting) {\n+      if (!trusted) {\n+        ensureOverwritingUntrustedConfigSet(zkClient, configPathInZk);\n+      }\n+      if (req.getParams().getBool(ConfigSetParams.CLEANUP, false)) {\n+        filesToDelete = getAllConfigsetFiles(zkClient, configPathInZk);\n+      }\n+    } else {\n+      zkClient.makePath(configPathInZk, (\"{\\\"trusted\\\": \" + Boolean.toString(trusted) + \"}\").\n+              getBytes(StandardCharsets.UTF_8), true);\n+    }\n \n     ZipInputStream zis = new ZipInputStream(inputStream, StandardCharsets.UTF_8);\n     ZipEntry zipEntry = null;\n     while ((zipEntry = zis.getNextEntry()) != null) {\n       String filePathInZk = configPathInZk + \"/\" + zipEntry.getName();\n+      if (filePathInZk.endsWith(\"/\")) {\n+        filesToDelete.remove(filePathInZk.substring(0, filePathInZk.length() -1));\n+      } else {\n+        filesToDelete.remove(filePathInZk);\n+      }\n       if (zipEntry.isDirectory()) {\n-        zkClient.makePath(filePathInZk, true);\n+        zkClient.makePath(filePathInZk, false,  true);\n       } else {\n         createZkNodeIfNotExistsAndSetData(zkClient, filePathInZk,\n             IOUtils.toByteArray(zis));\n       }\n     }\n     zis.close();\n+    deleteUnusedFiles(zkClient, filesToDelete);\n+  }\n+\n+  private void deleteUnusedFiles(SolrZkClient zkClient, Set<String> filesToDelete) throws InterruptedException, KeeperException {\n+    if (!filesToDelete.isEmpty()) {\n+      if (log.isInfoEnabled()) {\n+        log.info(\"Cleaning up {} unused files\", filesToDelete.size());\n+      }\n+      if (log.isDebugEnabled()) {\n+        log.debug(\"Cleaning up unused files: {}\", filesToDelete);\n+      }\n+      for (String f:filesToDelete) {\n+        try {\n+          zkClient.delete(f, -1, true);\n+        } catch (KeeperException.NoNodeException nne) {\n+        }\n+      }\n+    }\n+  }\n+\n+  private Set<String> getAllConfigsetFiles(SolrZkClient zkClient, String configPathInZk) throws KeeperException, InterruptedException {\n+    final Set<String> files = new HashSet<>();\n+    if (!configPathInZk.startsWith(ZkConfigManager.CONFIGS_ZKNODE + \"/\")) {\n+      throw new IllegalArgumentException(\"\\\"\" + configPathInZk + \"\\\" not recognized as a configset path\");\n+    }\n+    ZkMaintenanceUtils.traverseZkTree(zkClient, configPathInZk, ZkMaintenanceUtils.VISIT_ORDER.VISIT_POST, new ZkMaintenanceUtils.ZkVisitor() {\n+      @Override\n+      public void visit(String path) throws InterruptedException, KeeperException {\n+        files.add(path);\n+      }\n+    });\n+    files.remove(configPathInZk);\n+    return files;\n+  }\n+\n+  /*\n+   * Fail if an untrusted request tries to update a trusted ConfigSet\n+   */\n+  private void ensureOverwritingUntrustedConfigSet(SolrZkClient zkClient, String configSetZkPath) {\n+    byte[] configSetNodeContent;\n+    try {\n+      configSetNodeContent = zkClient.getData(configSetZkPath, null, null, true);\n+    } catch (KeeperException e) {\n+      throw new SolrException(ErrorCode.SERVER_ERROR, \"Exception while fetching current configSet at \" + configSetZkPath, e);\n+    } catch (InterruptedException e) {\n+      Thread.currentThread().interrupt();\n+      throw new SolrException(ErrorCode.SERVER_ERROR, \"Interrupted while fetching current configSet at \" + configSetZkPath, e);\n+    }\n+    @SuppressWarnings(\"unchecked\")\n+    Map<Object, Object> contentMap = (Map<Object, Object>) Utils.fromJSON(configSetNodeContent);\n+    Boolean isCurrentlyTrusted = (Boolean) contentMap.get(\"trusted\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94649b931674346932096d71c5b9944074826500"}, "originalPosition": 119}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5e97343c7ccb6c154e9ba96e284cf17715ee603d", "author": {"user": {"login": "tflobbe", "name": "Tomas Fernandez Lobbe"}}, "url": "https://github.com/apache/lucene-solr/commit/5e97343c7ccb6c154e9ba96e284cf17715ee603d", "committedDate": "2020-09-15T22:01:19Z", "message": "Address some PR comments"}, "afterCommit": {"oid": "879c88010677861e7282f2b61d29929f0a701546", "author": {"user": {"login": "tflobbe", "name": "Tomas Fernandez Lobbe"}}, "url": "https://github.com/apache/lucene-solr/commit/879c88010677861e7282f2b61d29929f0a701546", "committedDate": "2020-09-21T18:19:23Z", "message": "Fix test after rebase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c876ca1cacf84b44b55f78fbb1101d8b0982ec1c", "author": {"user": {"login": "tflobbe", "name": "Tomas Fernandez Lobbe"}}, "url": "https://github.com/apache/lucene-solr/commit/c876ca1cacf84b44b55f78fbb1101d8b0982ec1c", "committedDate": "2020-09-22T17:13:36Z", "message": "Add override option to UPLOAD ConfigSet action\n\nWhen set to 'true', Solr will override an existing configset in ZooKeeper if an UPLOAD action happens on an existing configset"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74ff7c029803d8de1a0625e561335901ccbcd869", "author": {"user": {"login": "tflobbe", "name": "Tomas Fernandez Lobbe"}}, "url": "https://github.com/apache/lucene-solr/commit/74ff7c029803d8de1a0625e561335901ccbcd869", "committedDate": "2020-09-22T17:13:36Z", "message": "s/override/overwrite/"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c99c7500e928b2357889d90cbf8d8a0e607ca445", "author": {"user": {"login": "tflobbe", "name": "Tomas Fernandez Lobbe"}}, "url": "https://github.com/apache/lucene-solr/commit/c99c7500e928b2357889d90cbf8d8a0e607ca445", "committedDate": "2020-09-22T17:13:36Z", "message": "Add cleanup option when overwritting ConfigSets"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38c1f634e6da010fe9834992daa2ef2233821ecb", "author": {"user": {"login": "tflobbe", "name": "Tomas Fernandez Lobbe"}}, "url": "https://github.com/apache/lucene-solr/commit/38c1f634e6da010fe9834992daa2ef2233821ecb", "committedDate": "2020-09-22T17:13:36Z", "message": "Add test for ZkMaintenanceUtils.traverseZkTree"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f30ffdecc7bba84fbeea2bc7b9a0c4b07b68b7f", "author": {"user": {"login": "tflobbe", "name": "Tomas Fernandez Lobbe"}}, "url": "https://github.com/apache/lucene-solr/commit/2f30ffdecc7bba84fbeea2bc7b9a0c4b07b68b7f", "committedDate": "2020-09-22T17:13:36Z", "message": "Add ref guide docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ca8d62f5f8218485a093c89de863d0893644799", "author": {"user": {"login": "tflobbe", "name": "Tomas Fernandez Lobbe"}}, "url": "https://github.com/apache/lucene-solr/commit/6ca8d62f5f8218485a093c89de863d0893644799", "committedDate": "2020-09-22T17:13:36Z", "message": "Fix precommit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16e08ee16862c8f205d3d9c7f7e99007052b7151", "author": {"user": {"login": "tflobbe", "name": "Tomas Fernandez Lobbe"}}, "url": "https://github.com/apache/lucene-solr/commit/16e08ee16862c8f205d3d9c7f7e99007052b7151", "committedDate": "2020-09-22T17:13:36Z", "message": "Address some PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5e01eae8f9261473d564256387bacc882e77fed", "author": {"user": {"login": "tflobbe", "name": "Tomas Fernandez Lobbe"}}, "url": "https://github.com/apache/lucene-solr/commit/b5e01eae8f9261473d564256387bacc882e77fed", "committedDate": "2020-09-22T17:13:36Z", "message": "Trusted request with cleanup convert untrusted to trusted configsets"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "003d8b81a62f53c1053972e2349858d5229f44c1", "author": {"user": {"login": "tflobbe", "name": "Tomas Fernandez Lobbe"}}, "url": "https://github.com/apache/lucene-solr/commit/003d8b81a62f53c1053972e2349858d5229f44c1", "committedDate": "2020-09-22T17:13:36Z", "message": "Fix test after rebase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16b0da0f8ad9398251328d5af25cbf7d1a7185cc", "author": {"user": {"login": "tflobbe", "name": "Tomas Fernandez Lobbe"}}, "url": "https://github.com/apache/lucene-solr/commit/16b0da0f8ad9398251328d5af25cbf7d1a7185cc", "committedDate": "2020-09-22T17:13:36Z", "message": "Rename method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d941638cef1b95398facbd1ef8d29e3aa46333f", "author": {"user": {"login": "tflobbe", "name": "Tomas Fernandez Lobbe"}}, "url": "https://github.com/apache/lucene-solr/commit/8d941638cef1b95398facbd1ef8d29e3aa46333f", "committedDate": "2020-09-22T17:13:36Z", "message": "Fix precommit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "add38edc39b84694218cfa12a908b9351e556d5c", "author": {"user": {"login": "tflobbe", "name": "Tomas Fernandez Lobbe"}}, "url": "https://github.com/apache/lucene-solr/commit/add38edc39b84694218cfa12a908b9351e556d5c", "committedDate": "2020-09-22T17:15:27Z", "message": "Add CHANGES entry"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f205a56fe99578ea3cd7f1d235ed2fb6c7cbde3c", "author": {"user": {"login": "tflobbe", "name": "Tomas Fernandez Lobbe"}}, "url": "https://github.com/apache/lucene-solr/commit/f205a56fe99578ea3cd7f1d235ed2fb6c7cbde3c", "committedDate": "2020-09-22T00:32:06Z", "message": "Fix precommit"}, "afterCommit": {"oid": "add38edc39b84694218cfa12a908b9351e556d5c", "author": {"user": {"login": "tflobbe", "name": "Tomas Fernandez Lobbe"}}, "url": "https://github.com/apache/lucene-solr/commit/add38edc39b84694218cfa12a908b9351e556d5c", "committedDate": "2020-09-22T17:15:27Z", "message": "Add CHANGES entry"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2265, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}