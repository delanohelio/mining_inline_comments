{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzMzY0MDY3", "number": 2052, "title": "LUCENE-8982:  Make NativeUnixDirectory pure java with FileChannel direct IO flag, and rename to DirectIODirectory", "bodyText": "Description\nMake NativeUnixDirectory pure java with FileChannel direct IO flag, and rename to DirectIODirectory\nSolution\nUse ExtendedOpenOption.DIRECT with FileChannel for direct IO\nSolution reference code sample in\n\nhttp://hg.openjdk.java.net/jdk10/master/rev/d72d7d55c765\nhttps://bugs.openjdk.java.net/browse/JDK-8189192\n\nTests\n\nPass existing tests\nNeed new benchmarking tests\n\nChecklist\nPlease review the following and check all that apply:\n\n I have reviewed the guidelines for How to Contribute and my code conforms to the standards described there to the best of my ability.\n I have created a Jira issue and added the issue ID to my pull request title.\n I have given Solr maintainers access to contribute to my PR branch. (optional but recommended)\n I have developed this patch against the master branch.\n I have run ./gradlew check.\n I have added tests for my changes.\n I have added documentation for the Ref Guide (for Solr changes only).", "createdAt": "2020-10-31T03:20:10Z", "url": "https://github.com/apache/lucene-solr/pull/2052", "merged": true, "mergeCommit": {"oid": "a7747b63b4ac649837469ee189b8aef10e4ce867"}, "closed": true, "closedAt": "2021-01-17T22:57:56Z", "author": {"login": "zacharymorn"}, "timelineItems": {"totalCount": 52, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdXyM9TAH2gAyNTEzMzY0MDY3OmMxYWJiNTQ5ZjBiOGM5NzNiNTQ3MGZjNDQwNWI2ZDhkNGI0NWE5YmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdxKOAAAH2gAyNTEzMzY0MDY3OjJhN2NhZGQ3NTUyMWIwZmQzNmZlNTBmMGVlN2M1OTY1ZGM5YjUwZmU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c1abb549f0b8c973b5470fc4405b6d8d4b45a9bf", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/apache/lucene-solr/commit/c1abb549f0b8c973b5470fc4405b6d8d4b45a9bf", "committedDate": "2020-10-31T02:46:54Z", "message": "LUCENE-8982: Make NativeUnixDirectory pure java with FileChannel direct IO flag, and rename to DirectIODirectory"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1MjgzODAw", "url": "https://github.com/apache/lucene-solr/pull/2052#pullrequestreview-525283800", "createdAt": "2020-11-06T15:59:37Z", "commit": {"oid": "c1abb549f0b8c973b5470fc4405b6d8d4b45a9bf"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNTo1OTozN1rOHuzzsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNjowMjozM1rOHuz6cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg0NTM2MA==", "bodyText": "Will this be Lucene 9.0 only?\nThe com.sun.nio.file.ExtendedOpenOption.DIRECT was added as of JDK 10 right?\nSince Lucene 8.x still allows Java 8.x (and Lucene 9.x will require Java 11.x minimum), I think this improvement must be Lucene 9.x only?", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r518845360", "createdAt": "2020-11-06T15:59:37Z", "author": {"login": "mikemccand"}, "path": "lucene/CHANGES.txt", "diffHunk": "@@ -156,6 +156,9 @@ Improvements\n * LUCENE-9531: Consolidated CharStream and FastCharStream classes: these have been moved\n   from each query parser package to org.apache.lucene.queryparser.charstream (Dawid Weiss).\n \n+* LUCENE-8982: Make NativeUnixDirectory pure java with FileChannel direct IO flag,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1abb549f0b8c973b5470fc4405b6d8d4b45a9bf"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg0NjA2Nw==", "bodyText": "Hmm I wonder why we got away without using .alignedSlice before?", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r518846067", "createdAt": "2020-11-06T16:00:46Z", "author": {"login": "mikemccand"}, "path": "lucene/misc/src/java/org/apache/lucene/store/DirectIODirectory.java", "diffHunk": "@@ -164,15 +149,16 @@ public IndexOutput createOutput(String name, IOContext context) throws IOExcepti\n     private long fileLength;\n     private boolean isOpen;\n \n-    public NativeUnixIndexOutput(Path path, String name, int bufferSize) throws IOException {\n-      super(\"NativeUnixIndexOutput(path=\\\"\" + path.toString() + \"\\\")\", name);\n-      //this.path = path;\n-      final FileDescriptor fd = NativePosixUtil.open_direct(path.toString(), false);\n-      fos = new FileOutputStream(fd);\n-      //fos = new FileOutputStream(path);\n-      channel = fos.getChannel();\n-      buffer = ByteBuffer.allocateDirect(bufferSize);\n-      this.bufferSize = bufferSize;\n+  @SuppressForbidden(reason = \"com.sun.nio.file.ExtendedOpenOption: Direct I/O with FileChannel requires the use of internal proprietary API ExtendedOpenOption.DIRECT\")\n+  public DirectIOIndexOutput(Path path, String name) throws IOException {\n+      super(\"DirectIOIndexOutput(path=\\\"\" + path.toString() + \"\\\")\", name);\n+\n+      int blockSize = Math.toIntExact(Files.getFileStore(path).getBlockSize());\n+      bufferSize = Math.addExact(blockSize, blockSize - 1);\n+      buffer = ByteBuffer.allocateDirect(bufferSize).alignedSlice(blockSize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1abb549f0b8c973b5470fc4405b6d8d4b45a9bf"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg0NzA4OA==", "bodyText": "Hmm does this mean we are losing the byte buffering during merging?", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r518847088", "createdAt": "2020-11-06T16:02:33Z", "author": {"login": "mikemccand"}, "path": "lucene/misc/src/java/org/apache/lucene/store/DirectIODirectory.java", "diffHunk": "@@ -66,45 +66,32 @@\n  *\n  * @lucene.experimental\n  */\n-public class NativeUnixDirectory extends FSDirectory {\n+public class DirectIODirectory extends FSDirectory {\n \n   // TODO: this is OS dependent, but likely 512 is the LCD\n   private final static long ALIGN = 512;\n   private final static long ALIGN_NOT_MASK = ~(ALIGN-1);\n-  \n-  /** Default buffer size before writing to disk (256 KB);\n-   *  larger means less IO load but more RAM and direct\n-   *  buffer storage space consumed during merging. */\n-\n-  public final static int DEFAULT_MERGE_BUFFER_SIZE = 262144;\n \n   /** Default min expected merge size before direct IO is\n    *  used (10 MB): */\n   public final static long DEFAULT_MIN_BYTES_DIRECT = 10*1024*1024;\n \n-  private final int mergeBufferSize;\n   private final long minBytesDirect;\n   private final Directory delegate;\n \n   /** Create a new NIOFSDirectory for the named location.\n    * \n    * @param path the path of the directory\n-   * @param lockFactory to use\n-   * @param mergeBufferSize Size of buffer to use for\n-   *    merging.  See {@link #DEFAULT_MERGE_BUFFER_SIZE}.\n    * @param minBytesDirect Merges, or files to be opened for\n    *   reading, smaller than this will\n    *   not use direct IO.  See {@link\n    *   #DEFAULT_MIN_BYTES_DIRECT}\n+   * @param lockFactory to use\n    * @param delegate fallback Directory for non-merges\n    * @throws IOException If there is a low-level I/O error\n    */\n-  public NativeUnixDirectory(Path path, int mergeBufferSize, long minBytesDirect, LockFactory lockFactory, Directory delegate) throws IOException {\n+  public DirectIODirectory(Path path, long minBytesDirect, LockFactory lockFactory, Directory delegate) throws IOException {\n     super(path, lockFactory);\n-    if ((mergeBufferSize & ALIGN) != 0) {\n-      throw new IllegalArgumentException(\"mergeBufferSize must be 0 mod \" + ALIGN + \" (got: \" + mergeBufferSize + \")\");\n-    }\n-    this.mergeBufferSize = mergeBufferSize;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1abb549f0b8c973b5470fc4405b6d8d4b45a9bf"}, "originalPosition": 66}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74e364807c037e2a03c738a397363a39307679de", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/apache/lucene-solr/commit/74e364807c037e2a03c738a397363a39307679de", "committedDate": "2020-11-10T03:45:58Z", "message": "Revert back to using existing bufferSize instead of deriving from blockSize, which may be too small for actual lucene use cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae2c4646c804c922e7b3c78095a2ab7df1240a5f", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/apache/lucene-solr/commit/ae2c4646c804c922e7b3c78095a2ab7df1240a5f", "committedDate": "2020-11-10T03:54:11Z", "message": "Remove extra line and fix indentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "877a689c9cf854b49b8c12a800b2c32ec56f5234", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/apache/lucene-solr/commit/877a689c9cf854b49b8c12a800b2c32ec56f5234", "committedDate": "2020-11-16T19:56:36Z", "message": "Merge branch 'master' into LUCENE-8982-DirectIO"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1eb451bc053a78f9c01ccd1d99c7e3d7feae93f", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/apache/lucene-solr/commit/d1eb451bc053a78f9c01ccd1d99c7e3d7feae93f", "committedDate": "2020-11-17T06:41:18Z", "message": "Update test case and implementation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyMDkxNTE0", "url": "https://github.com/apache/lucene-solr/pull/2052#pullrequestreview-532091514", "createdAt": "2020-11-17T07:49:15Z", "commit": {"oid": "d1eb451bc053a78f9c01ccd1d99c7e3d7feae93f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwNzo0OToxNVrOH0n88g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwNzo0OToxNVrOH0n88g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk0MjU3OA==", "bodyText": "I think we should make a copy of the NativeUnixDirectory, modify this to direct IO, then perhaps benchmark how they perform? If we replace in-place we won't be able to do it (unless you compile from different git commits). Then any removal of native code, should it follow-up, would be a cleaner patch as well.", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r524942578", "createdAt": "2020-11-17T07:49:15Z", "author": {"login": "dweiss"}, "path": "lucene/misc/src/java/org/apache/lucene/misc/store/DirectIODirectory.java", "diffHunk": "@@ -74,12 +65,12 @@\n  *\n  * @lucene.experimental\n  */\n-public class NativeUnixDirectory extends FSDirectory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1eb451bc053a78f9c01ccd1d99c7e3d7feae93f"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyMTA3NTk4", "url": "https://github.com/apache/lucene-solr/pull/2052#pullrequestreview-532107598", "createdAt": "2020-11-17T08:07:31Z", "commit": {"oid": "d1eb451bc053a78f9c01ccd1d99c7e3d7feae93f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwODowNzozMVrOH0oqBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwODoxMzoyMVrOH0o8Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk1NDExOA==", "bodyText": "More of the javadocs below need to go away, too.", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r524954118", "createdAt": "2020-11-17T08:07:31Z", "author": {"login": "uschindler"}, "path": "lucene/misc/src/java/overview.html", "diffHunk": "@@ -35,7 +35,7 @@ <h2>NativeUnixDirectory</h2>\n have to compile on your platform.\n \n <p>\n-{@link org.apache.lucene.misc.store.NativeUnixDirectory} is a Directory implementation that bypasses the\n+{@link org.apache.lucene.misc.store.DirectIODirectory} is a Directory implementation that bypasses the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1eb451bc053a78f9c01ccd1d99c7e3d7feae93f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk1ODc0Nw==", "bodyText": "In my opinion, this test should also extend the BaseDirectoryTestCase, because it then does a full test of all I/O functionality, including multi-threaded and corner cases - this is important to make sure that the directory works as expected, also if somebody uses it when not merging (e.g. for searching). The original test did not do this as this relied on a native library.\nNevertheless: I am not fully sure if Windows supports this ExtendedOpenOption. I had no time to test this yet.", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r524958747", "createdAt": "2020-11-17T08:13:21Z", "author": {"login": "uschindler"}, "path": "lucene/misc/src/test/org/apache/lucene/misc/store/DirectIODirectoryTest.java", "diffHunk": "@@ -18,29 +18,37 @@\n \n import com.carrotsearch.randomizedtesting.LifecycleScope;\n import com.carrotsearch.randomizedtesting.RandomizedTest;\n-import org.apache.lucene.store.ByteBuffersDirectory;\n-import org.apache.lucene.store.Directory;\n-import org.apache.lucene.store.IOContext;\n-import org.apache.lucene.store.MergeInfo;\n+import org.apache.lucene.store.*;\n import org.apache.lucene.util.LuceneTestCase;\n-import org.junit.Rule;\n-import org.junit.rules.TestRule;\n \n import java.io.IOException;\n-import java.util.EnumSet;\n+import java.nio.file.Files;\n \n-public class NativeUnixDirectoryTest extends LuceneTestCase {\n-  @Rule\n-  public static TestRule requiresNative = new NativeLibEnableRule(\n-      EnumSet.of(NativeLibEnableRule.OperatingSystem.MAC,\n-          NativeLibEnableRule.OperatingSystem.FREE_BSD,\n-          NativeLibEnableRule.OperatingSystem.LINUX));\n+import static org.apache.lucene.misc.store.DirectIODirectory.DEFAULT_MIN_BYTES_DIRECT;\n \n-  public void testLibraryLoaded() throws IOException {\n+public class DirectIODirectoryTest extends LuceneTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1eb451bc053a78f9c01ccd1d99c7e3d7feae93f"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyMTE3NTI0", "url": "https://github.com/apache/lucene-solr/pull/2052#pullrequestreview-532117524", "createdAt": "2020-11-17T08:21:55Z", "commit": {"oid": "d1eb451bc053a78f9c01ccd1d99c7e3d7feae93f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwODoyMTo1NVrOH0pPFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwODoyMTo1NVrOH0pPFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk2MzYwNA==", "bodyText": "IMHO, we should add more Javadocs, that this directory may throw UnsupportedOperationException if the underlying platform does not allow direct IO.", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r524963604", "createdAt": "2020-11-17T08:21:55Z", "author": {"login": "uschindler"}, "path": "lucene/misc/src/java/org/apache/lucene/misc/store/DirectIODirectory.java", "diffHunk": "@@ -74,12 +65,12 @@\n  *\n  * @lucene.experimental\n  */\n-public class NativeUnixDirectory extends FSDirectory {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk0MjU3OA=="}, "originalCommit": {"oid": "d1eb451bc053a78f9c01ccd1d99c7e3d7feae93f"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyNDk2NTU5", "url": "https://github.com/apache/lucene-solr/pull/2052#pullrequestreview-532496559", "createdAt": "2020-11-17T15:35:03Z", "commit": {"oid": "d1eb451bc053a78f9c01ccd1d99c7e3d7feae93f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNTozNTowM1rOH07KYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNTozNTowM1rOH07KYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI1NzMxNQ==", "bodyText": "This should really be a // nocommit right?  I.e. we want to solve this question before committing, and we don't plan to commit this // TODO.", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r525257315", "createdAt": "2020-11-17T15:35:03Z", "author": {"login": "mikemccand"}, "path": "lucene/misc/native/src/main/posix/NativePosixUtil.cpp", "diffHunk": "@@ -102,6 +102,7 @@ JNIEXPORT jint JNICALL Java_org_apache_lucene_misc_store_NativePosixUtil_posix_1\n }\n #endif\n \n+// TODO: To be removed together?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1eb451bc053a78f9c01ccd1d99c7e3d7feae93f"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "759e4b49bf56e769e7013dd9ea175ddb5b8b5feb", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/apache/lucene-solr/commit/759e4b49bf56e769e7013dd9ea175ddb5b8b5feb", "committedDate": "2020-11-18T03:23:26Z", "message": "Address following comments:\n1. Remove outdated comment in overview.html\n2. Add java docs for UnsupportedOperationException when direct IO is not available\n3. Remove outdated open_direct method in native code and java jni\n4. Update test to extend BaseDirectoryTestCase, and use FSDirectory.open to create a real directory on file system for testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "321242178526a47958f902680a9e0c44d9089592", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/apache/lucene-solr/commit/321242178526a47958f902680a9e0c44d9089592", "committedDate": "2020-11-18T03:27:21Z", "message": "Miss one java doc update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e2b787aeca722e96d81cbcc72c02df36b368c11", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/apache/lucene-solr/commit/0e2b787aeca722e96d81cbcc72c02df36b368c11", "committedDate": "2020-11-18T03:28:05Z", "message": "Remove WindowsDirectory"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzMDg2NzM4", "url": "https://github.com/apache/lucene-solr/pull/2052#pullrequestreview-533086738", "createdAt": "2020-11-18T03:56:42Z", "commit": {"oid": "321242178526a47958f902680a9e0c44d9089592"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMzo1Njo0MlrOH1ZzvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMzo1Njo0MlrOH1ZzvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc1OTQyMQ==", "bodyText": "Renamed DirectIODirectoryTest to TestDirectIODirectory to follow the convention, and applied changes to test as suggested. Looks like Git somehow see this as a new file now.", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r525759421", "createdAt": "2020-11-18T03:56:42Z", "author": {"login": "zacharymorn"}, "path": "lucene/misc/src/test/org/apache/lucene/misc/store/TestDirectIODirectory.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.misc.store;\n+\n+import com.carrotsearch.randomizedtesting.LifecycleScope;\n+import com.carrotsearch.randomizedtesting.RandomizedTest;\n+import org.apache.lucene.store.*;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import static org.apache.lucene.misc.store.DirectIODirectory.DEFAULT_MIN_BYTES_DIRECT;\n+\n+public class TestDirectIODirectory extends BaseDirectoryTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "321242178526a47958f902680a9e0c44d9089592"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc628007396f0fea0ce0cef910daac69560d6d7f", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/apache/lucene-solr/commit/cc628007396f0fea0ce0cef910daac69560d6d7f", "committedDate": "2020-11-18T08:25:18Z", "message": "Revert \"Remove WindowsDirectory\"\n\nThis reverts commit 0e2b787aeca722e96d81cbcc72c02df36b368c11."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzMjIyNTg0", "url": "https://github.com/apache/lucene-solr/pull/2052#pullrequestreview-533222584", "createdAt": "2020-11-18T08:53:08Z", "commit": {"oid": "cc628007396f0fea0ce0cef910daac69560d6d7f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwODo1MzowOFrOH1jJng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwODo1NDowMlrOH1jL5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkxMjQ3OA==", "bodyText": "Thanks great. We have to check, if the base class also sometimes send the correct IOContexts, so our directory is triggered. Because the wrong IOContext will cause everything to be delegated to the underlying FSDirectory.", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r525912478", "createdAt": "2020-11-18T08:53:08Z", "author": {"login": "uschindler"}, "path": "lucene/misc/src/test/org/apache/lucene/misc/store/TestDirectIODirectory.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.misc.store;\n+\n+import com.carrotsearch.randomizedtesting.LifecycleScope;\n+import com.carrotsearch.randomizedtesting.RandomizedTest;\n+import org.apache.lucene.store.*;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import static org.apache.lucene.misc.store.DirectIODirectory.DEFAULT_MIN_BYTES_DIRECT;\n+\n+public class TestDirectIODirectory extends BaseDirectoryTestCase {\n+  public void testWriteReadWithDirectIO() throws IOException {\n+    try(Directory dir = getDirectory(RandomizedTest.newTempDir(LifecycleScope.TEST))) {\n+      final long blockSize = Files.getFileStore(createTempFile()).getBlockSize();\n+      final long minBytesDirect = Double.valueOf(Math.ceil(DEFAULT_MIN_BYTES_DIRECT / blockSize)).longValue() *\n+                                    blockSize;\n+      // Need to worry about overflows here?\n+      final int writtenByteLength = Math.toIntExact(minBytesDirect);\n+\n+      MergeInfo mergeInfo = new MergeInfo(1000, Integer.MAX_VALUE, true, 1);\n+      final IOContext context = new IOContext(mergeInfo);\n+\n+      IndexOutput indexOutput = dir.createOutput(\"test\", context);\n+      indexOutput.writeBytes(new byte[writtenByteLength], 0, writtenByteLength);\n+      IndexInput indexInput = dir.openInput(\"test\", context);\n+\n+      assertEquals(\"The length of bytes read should equal to written\", writtenByteLength, indexInput.length());\n+\n+      indexOutput.close();\n+      indexInput.close();\n+    }\n+  }\n+\n+  @Override\n+  protected Directory getDirectory(Path path) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc628007396f0fea0ce0cef910daac69560d6d7f"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkxMzA2MA==", "bodyText": "We also have LuceneTestCase.newFSDirectory(path), which adds some randomization. I'd suggest to use this method instead.", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r525913060", "createdAt": "2020-11-18T08:54:02Z", "author": {"login": "uschindler"}, "path": "lucene/misc/src/test/org/apache/lucene/misc/store/TestDirectIODirectory.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.misc.store;\n+\n+import com.carrotsearch.randomizedtesting.LifecycleScope;\n+import com.carrotsearch.randomizedtesting.RandomizedTest;\n+import org.apache.lucene.store.*;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import static org.apache.lucene.misc.store.DirectIODirectory.DEFAULT_MIN_BYTES_DIRECT;\n+\n+public class TestDirectIODirectory extends BaseDirectoryTestCase {\n+  public void testWriteReadWithDirectIO() throws IOException {\n+    try(Directory dir = getDirectory(RandomizedTest.newTempDir(LifecycleScope.TEST))) {\n+      final long blockSize = Files.getFileStore(createTempFile()).getBlockSize();\n+      final long minBytesDirect = Double.valueOf(Math.ceil(DEFAULT_MIN_BYTES_DIRECT / blockSize)).longValue() *\n+                                    blockSize;\n+      // Need to worry about overflows here?\n+      final int writtenByteLength = Math.toIntExact(minBytesDirect);\n+\n+      MergeInfo mergeInfo = new MergeInfo(1000, Integer.MAX_VALUE, true, 1);\n+      final IOContext context = new IOContext(mergeInfo);\n+\n+      IndexOutput indexOutput = dir.createOutput(\"test\", context);\n+      indexOutput.writeBytes(new byte[writtenByteLength], 0, writtenByteLength);\n+      IndexInput indexInput = dir.openInput(\"test\", context);\n+\n+      assertEquals(\"The length of bytes read should equal to written\", writtenByteLength, indexInput.length());\n+\n+      indexOutput.close();\n+      indexInput.close();\n+    }\n+  }\n+\n+  @Override\n+  protected Directory getDirectory(Path path) throws IOException {\n+    Directory delegate = FSDirectory.open(path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc628007396f0fea0ce0cef910daac69560d6d7f"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4752d5cc0f79eb0b233b03f84167f6e1ee42ed1", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/apache/lucene-solr/commit/a4752d5cc0f79eb0b233b03f84167f6e1ee42ed1", "committedDate": "2020-11-19T21:12:37Z", "message": "Replace FSDirectory.open with LuceneTestCase.newFSDirectory for test, and update DirectIODirectory to delegate some calls"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1NTM1MDUz", "url": "https://github.com/apache/lucene-solr/pull/2052#pullrequestreview-535535053", "createdAt": "2020-11-20T15:37:26Z", "commit": {"oid": "a4752d5cc0f79eb0b233b03f84167f6e1ee42ed1"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNTozNzoyNlrOH3Uw0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNTo0MzoxMFrOH3VAIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc3MzkwNQ==", "bodyText": "Can we move this to @throws javadoc tag?", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r527773905", "createdAt": "2020-11-20T15:37:26Z", "author": {"login": "mikemccand"}, "path": "lucene/misc/src/java/org/apache/lucene/misc/store/DirectIODirectory.java", "diffHunk": "@@ -72,14 +64,17 @@\n  * and OS X; other Unixes should work but have not been\n  * tested!  Use at your own risk.\n  *\n+ * <p>Throws UnsupportedOperationException if the operating system or", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4752d5cc0f79eb0b233b03f84167f6e1ee42ed1"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc3NTkwNg==", "bodyText": "Hmm why did we remove the randomness about which (confusingly) different exception to throw here?  This randomness was (is?) useful to help test that Lucene indeed catches FNFE and NSFE interchangeably.", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r527775906", "createdAt": "2020-11-20T15:40:26Z", "author": {"login": "mikemccand"}, "path": "lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper.java", "diffHunk": "@@ -745,7 +745,7 @@ public synchronized IndexInput openInput(String name, IOContext context) throws\n       maybeThrowDeterministicException();\n     }\n     if (!LuceneTestCase.slowFileExists(in, name)) {\n-      throw randomState.nextBoolean() ? new FileNotFoundException(name + \" in dir=\" + in) : new NoSuchFileException(name + \" in dir=\" + in);\n+      throw new NoSuchFileException(name + \" in dir=\" + in);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4752d5cc0f79eb0b233b03f84167f6e1ee42ed1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc3NzgyNg==", "bodyText": "Awesome!\nYeah, // nocommit comment is really helpful in patches/PRs to note something that you know you need to fix before pushing.  Plus, our build tooling will catch us if we accidentally push code with // nocommit still.", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r527777826", "createdAt": "2020-11-20T15:43:10Z", "author": {"login": "mikemccand"}, "path": "lucene/misc/native/src/main/posix/NativePosixUtil.cpp", "diffHunk": "@@ -102,6 +102,7 @@ JNIEXPORT jint JNICALL Java_org_apache_lucene_misc_store_NativePosixUtil_posix_1\n }\n #endif\n \n+// TODO: To be removed together?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI1NzMxNQ=="}, "originalCommit": {"oid": "d1eb451bc053a78f9c01ccd1d99c7e3d7feae93f"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1NTQxNDUy", "url": "https://github.com/apache/lucene-solr/pull/2052#pullrequestreview-535541452", "createdAt": "2020-11-20T15:44:29Z", "commit": {"oid": "a4752d5cc0f79eb0b233b03f84167f6e1ee42ed1"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb1c7501359b8febdc4fc2f43e823c74c1b6cc92", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/apache/lucene-solr/commit/cb1c7501359b8febdc4fc2f43e823c74c1b6cc92", "committedDate": "2020-11-20T20:07:18Z", "message": "Address comments\n1. Add back the randomess for no file exception, and update BaseDirectoryTestCase to handle it accordingly\n2. Remove native related code for POSIX"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74c529a9934da30f8e4441d7e89ac0199358ff0d", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/apache/lucene-solr/commit/74c529a9934da30f8e4441d7e89ac0199358ff0d", "committedDate": "2020-11-21T02:07:13Z", "message": "Fix stylying"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzNjg0OTU1", "url": "https://github.com/apache/lucene-solr/pull/2052#pullrequestreview-543684955", "createdAt": "2020-12-03T07:55:11Z", "commit": {"oid": "74c529a9934da30f8e4441d7e89ac0199358ff0d"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzo1NToxMVrOH-EvWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzo1NToxMVrOH-EvWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg1MTQxNw==", "bodyText": "I'd leave it in as it was (multiplatform includes, conditionally) - doesn't hurt even if we only compile on a single platform and may save somebody some head-scratching in the future.", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r534851417", "createdAt": "2020-12-03T07:55:11Z", "author": {"login": "dweiss"}, "path": "lucene/misc/native/build.gradle", "diffHunk": "@@ -51,11 +47,7 @@ tasks.withType(CppCompile).configureEach {\n   // is present.\n   systemIncludes.from file(\"${javaHome}/include\")\n \n-  for (def path : [", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74c529a9934da30f8e4441d7e89ac0199358ff0d"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0MTAzNjY4", "url": "https://github.com/apache/lucene-solr/pull/2052#pullrequestreview-544103668", "createdAt": "2020-12-03T15:50:08Z", "commit": {"oid": "74c529a9934da30f8e4441d7e89ac0199358ff0d"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNTo1MDowOVrOH-jdKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNTo1MDowOVrOH-jdKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM1NDY2Nw==", "bodyText": "We can remove this For example -- this is ancient history and no longer can occur since we removed IndexOutput.seek entirely.", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r535354667", "createdAt": "2020-12-03T15:50:09Z", "author": {"login": "mikemccand"}, "path": "lucene/misc/src/java/org/apache/lucene/misc/store/DirectIODirectory.java", "diffHunk": "@@ -51,16 +50,9 @@\n  * to the provided Directory instance.\n  *\n  * <p>See <a\n- * href=\"{@docRoot}/overview-summary.html#NativeUnixDirectory\">Overview</a>\n+ * href=\"{@docRoot}/overview-summary.html#DirectIODirectory\">Overview</a>\n  * for more details.\n  *\n- * <p>To use this you must compile\n- * NativePosixUtil.cpp (exposes Linux-specific APIs through\n- * JNI) for your platform, by running <code>./gradlew build</code>, and then putting the resulting\n- * <code>libLuceneNativeIO.so</code> or <code>libLuceneNativeIO.dylib</code>\n- * (from <code>lucene/misc/native/build/lib/release/platform/</code>) onto your dynamic\n- * linker search path.\n- *\n  * <p><b>WARNING</b>: this code is very new and quite easily\n  * could contain horrible bugs.  For example, here's one\n  * known issue: if you use seek in <code>IndexOutput</code>, and then", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74c529a9934da30f8e4441d7e89ac0199358ff0d"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5aa1c0e0e1a435413197d6fe2d0b7b98022d95eb", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/apache/lucene-solr/commit/5aa1c0e0e1a435413197d6fe2d0b7b98022d95eb", "committedDate": "2020-12-04T03:36:47Z", "message": "Update javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2MjI0NTk0", "url": "https://github.com/apache/lucene-solr/pull/2052#pullrequestreview-546224594", "createdAt": "2020-12-07T14:53:18Z", "commit": {"oid": "5aa1c0e0e1a435413197d6fe2d0b7b98022d95eb"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNDo1MzoxOFrOIAqkow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNDo1NDo1MFrOIAqpkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU2ODQxOQ==", "bodyText": "I wonder if we should simply extend FilterDirectory here?  Let that class (designed for such delegation) handle delegating all existing Directory methods?  It would lower the risk that a new Directory method fails to get delegated here ...\nBut, we can do this as followon issue.", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r537568419", "createdAt": "2020-12-07T14:53:18Z", "author": {"login": "mikemccand"}, "path": "lucene/misc/src/java/org/apache/lucene/misc/store/DirectIODirectory.java", "diffHunk": "@@ -154,14 +146,43 @@ public IndexOutput createOutput(String name, IOContext context) throws IOExcepti\n     if (context.context != Context.MERGE || context.mergeInfo.estimatedMergeBytes < minBytesDirect) {\n       return delegate.createOutput(name, context);\n     } else {\n-      return new NativeUnixIndexOutput(getDirectory().resolve(name), name, mergeBufferSize);\n+      return new DirectIOIndexOutput(getDirectory().resolve(name), name, mergeBufferSize);\n     }\n   }\n \n-  @SuppressForbidden(reason = \"java.io.File: native API requires old-style FileDescriptor\")\n-  private final static class NativeUnixIndexOutput extends IndexOutput {\n+  @Override\n+  public void deleteFile(String name) throws IOException {\n+    delegate.deleteFile(name);\n+  }\n+\n+  @Override\n+  public Set<String> getPendingDeletions() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5aa1c0e0e1a435413197d6fe2d0b7b98022d95eb"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU2OTY4MA==", "bodyText": "Maybe use IOUtils.close(...) here instead?  It will try to close both even if one of them throws exception.", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r537569680", "createdAt": "2020-12-07T14:54:50Z", "author": {"login": "mikemccand"}, "path": "lucene/misc/src/java/org/apache/lucene/misc/store/DirectIODirectory.java", "diffHunk": "@@ -154,14 +146,43 @@ public IndexOutput createOutput(String name, IOContext context) throws IOExcepti\n     if (context.context != Context.MERGE || context.mergeInfo.estimatedMergeBytes < minBytesDirect) {\n       return delegate.createOutput(name, context);\n     } else {\n-      return new NativeUnixIndexOutput(getDirectory().resolve(name), name, mergeBufferSize);\n+      return new DirectIOIndexOutput(getDirectory().resolve(name), name, mergeBufferSize);\n     }\n   }\n \n-  @SuppressForbidden(reason = \"java.io.File: native API requires old-style FileDescriptor\")\n-  private final static class NativeUnixIndexOutput extends IndexOutput {\n+  @Override\n+  public void deleteFile(String name) throws IOException {\n+    delegate.deleteFile(name);\n+  }\n+\n+  @Override\n+  public Set<String> getPendingDeletions() throws IOException {\n+    return delegate.getPendingDeletions();\n+  }\n+\n+  @Override\n+  public String[] listAll() throws IOException {\n+    return delegate.listAll();\n+  }\n+\n+  @Override\n+  public long fileLength(String name) throws IOException {\n+    return delegate.fileLength(name);\n+  }\n+\n+  @Override\n+  public void rename(String source, String dest) throws IOException {\n+    delegate.rename(source, dest);\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    delegate.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5aa1c0e0e1a435413197d6fe2d0b7b98022d95eb"}, "originalPosition": 149}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd383e3fc6b6f10b06c0c92c6339e284f455489f", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/apache/lucene-solr/commit/bd383e3fc6b6f10b06c0c92c6339e284f455489f", "committedDate": "2020-12-07T18:04:23Z", "message": "Use IOUtils.close instead"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9233274a6f7a8d7f4689314dc678363edd49c063", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/apache/lucene-solr/commit/9233274a6f7a8d7f4689314dc678363edd49c063", "committedDate": "2020-12-07T18:37:05Z", "message": "Have DirectIODirectory to extend FilterDirectory instead"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d23d5a6caef7e64ab3b50771ba3970f88763a0ef", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/apache/lucene-solr/commit/d23d5a6caef7e64ab3b50771ba3970f88763a0ef", "committedDate": "2020-12-19T06:11:25Z", "message": "Use reflective class and enum lookup for ExtendedOpenOption.DIRECT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df13bdf89f269bb16d8c5589af7f8923561d412b", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/apache/lucene-solr/commit/df13bdf89f269bb16d8c5589af7f8923561d412b", "committedDate": "2020-12-19T08:27:33Z", "message": "Cache direct open option to avoid repeated lookup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4018debba505e1c94cf8209afb5fb2df67777d2c", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/4018debba505e1c94cf8209afb5fb2df67777d2c", "committedDate": "2020-12-19T12:11:08Z", "message": "Move the lookup of enum constant to a static initializer; throw UOE instead of IOException; run test only when supported"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5c7f6a4be0947b3f011846bb2ae70e34b7d1dc5e", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/5c7f6a4be0947b3f011846bb2ae70e34b7d1dc5e", "committedDate": "2020-12-19T11:58:30Z", "message": "Move the lookup of enum constant to a static initializer; throw UOE instead of IOException; run test only when supported"}, "afterCommit": {"oid": "4018debba505e1c94cf8209afb5fb2df67777d2c", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/4018debba505e1c94cf8209afb5fb2df67777d2c", "committedDate": "2020-12-19T12:11:08Z", "message": "Move the lookup of enum constant to a static initializer; throw UOE instead of IOException; run test only when supported"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b207f8d7e9154260ba4f4041391ca614e55dd8d", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/apache/lucene-solr/commit/6b207f8d7e9154260ba4f4041391ca614e55dd8d", "committedDate": "2020-12-19T18:25:40Z", "message": "Update java doc to use UOE instead of IOE, and removed some stale IOE throwing suggested by IDE"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "397a6f600f4a1fb924e4bf54e74825f51c1efc6b", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/397a6f600f4a1fb924e4bf54e74825f51c1efc6b", "committedDate": "2020-12-19T21:20:27Z", "message": "Fix alignment handling, remove all duplicate position and size fields and use what ByteBuffer provides to handle the buffer's remaining bytes and position"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "195f18119eb41baa1dd7446b32af768055bf4c9a", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/195f18119eb41baa1dd7446b32af768055bf4c9a", "committedDate": "2020-12-19T21:49:02Z", "message": "Use capacity of buffer if we use buffersize, use limit only to control refill; remove the length of file tracking (this is a relic from times where we were able to also seek in IndexOutputs)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e09470767068c7850a9e5145dc61c2abf9a387c", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/1e09470767068c7850a9e5145dc61c2abf9a387c", "committedDate": "2020-12-19T23:54:04Z", "message": "Committing my current state"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MDI4MzIx", "url": "https://github.com/apache/lucene-solr/pull/2052#pullrequestreview-556028321", "createdAt": "2020-12-20T15:39:44Z", "commit": {"oid": "1e09470767068c7850a9e5145dc61c2abf9a387c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQxNTozOTo0NFrOIJFLkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQxNTozOTo0NFrOIJFLkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjM5Mjk3OQ==", "bodyText": "Please remove the path argument: this makes no sense to duplicate it twice (it is already fed to delegate as its FSDirectory). Especially in a public constructor duplicating method parameters only invites bugs. Call delegate.getDirectory() to get the underlying path.", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r546392979", "createdAt": "2020-12-20T15:39:44Z", "author": {"login": "rmuir"}, "path": "lucene/misc/src/java/org/apache/lucene/misc/store/DirectIODirectory.java", "diffHunk": "@@ -0,0 +1,392 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.misc.store;\n+\n+import java.io.EOFException;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.FileChannel;\n+import java.nio.file.Files;\n+import java.nio.file.OpenOption;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.util.Arrays;\n+\n+import org.apache.lucene.store.*;\n+import org.apache.lucene.store.IOContext.Context;\n+\n+/**\n+ * A {@link Directory} implementation for all Unixes and Windows that uses\n+ * DIRECT I/O to bypass OS level IO caching during\n+ * merging.  For all other cases (searching, writing) we delegate\n+ * to the provided Directory instance.\n+ *\n+ * <p>See <a\n+ * href=\"{@docRoot}/overview-summary.html#DirectIODirectory\">Overview</a>\n+ * for more details.\n+ *\n+ * <p><b>WARNING</b>: this code is very new and quite easily\n+ * could contain horrible bugs.\n+ *\n+ * <p>This directory passes Solr and Lucene tests on Linux, OS X,\n+ * and Windows; other systems should work but have not been\n+ * tested! Use at your own risk.\n+ *\n+ * <p>@throws UnsupportedOperationException if the operating system, file system or JDK\n+ * does not support Direct I/O or a sufficient equivalent.\n+ *\n+ * @lucene.experimental\n+ */\n+public class DirectIODirectory extends FilterDirectory {\n+\n+  /** Default buffer size before writing to disk (256 KB);\n+   *  larger means less IO load but more RAM and direct\n+   *  buffer storage space consumed during merging. */\n+\n+  public final static int DEFAULT_MERGE_BUFFER_SIZE = 262144;\n+\n+  /** Default min expected merge size before direct IO is\n+   *  used (10 MB): */\n+  public final static long DEFAULT_MIN_BYTES_DIRECT = 10*1024*1024;\n+\n+  private final int blockSize, mergeBufferSize;\n+  private final long minBytesDirect;\n+  private final Path path;\n+  \n+  volatile boolean isOpen = true;\n+\n+  /** Reference to {@code com.sun.nio.file.ExtendedOpenOption.DIRECT} by reflective class and enum lookup.\n+   * There are two reasons for using this instead of directly referencing ExtendedOpenOption.DIRECT:\n+   * <ol>\n+   * <li> ExtendedOpenOption.DIRECT is OpenJDK's internal proprietary API. This API causes un-suppressible(?) warning to be emitted\n+   *  when compiling with --release flag and value N, where N is smaller than the the version of javac used for compilation.</li>\n+   * <li> It is possible that Lucene is run using JDK that does not support ExtendedOpenOption.DIRECT. In such a\n+   *  case, dynamic lookup allows us to bail out with UnsupportedOperationException with meaningful error message.</li>\n+   * </ol>\n+   * <p>This reference is {@code null}, if the JDK does not support direct I/O.\n+   */\n+  static final OpenOption ExtendedOpenOption_DIRECT; // visible for test\n+  static {\n+    OpenOption option;\n+    try {\n+      final Class<? extends OpenOption> clazz = Class.forName(\"com.sun.nio.file.ExtendedOpenOption\").asSubclass(OpenOption.class);\n+      option = Arrays.stream(clazz.getEnumConstants())\n+                      .filter(e -> e.toString().equalsIgnoreCase(\"DIRECT\"))\n+                      .findFirst()\n+                      .orElse(null);\n+    } catch (Exception e) {\n+      option = null;\n+    }\n+    ExtendedOpenOption_DIRECT = option;\n+  }\n+\n+  /** Create a new DirectIODirectory for the named location.\n+   * \n+   * @param path the path of the directory\n+   * @param mergeBufferSize Size of buffer to use for\n+   *    merging.\n+   * @param minBytesDirect Merges, or files to be opened for\n+   *   reading, smaller than this will\n+   *   not use direct IO.  See {@link\n+   *   #DEFAULT_MIN_BYTES_DIRECT}\n+   * @param delegate fallback Directory for non-merges\n+   * @throws IOException If there is a low-level I/O error\n+   */\n+  public DirectIODirectory(Path path, int mergeBufferSize, long minBytesDirect, FSDirectory delegate) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e09470767068c7850a9e5145dc61c2abf9a387c"}, "originalPosition": 110}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MDI4MzY5", "url": "https://github.com/apache/lucene-solr/pull/2052#pullrequestreview-556028369", "createdAt": "2020-12-20T15:40:23Z", "commit": {"oid": "1e09470767068c7850a9e5145dc61c2abf9a387c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQxNTo0MDoyM1rOIJFLzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQxNTo0MDoyM1rOIJFLzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjM5MzAzNw==", "bodyText": "Remove path here too.", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r546393037", "createdAt": "2020-12-20T15:40:23Z", "author": {"login": "rmuir"}, "path": "lucene/misc/src/java/org/apache/lucene/misc/store/DirectIODirectory.java", "diffHunk": "@@ -0,0 +1,392 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.misc.store;\n+\n+import java.io.EOFException;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.FileChannel;\n+import java.nio.file.Files;\n+import java.nio.file.OpenOption;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.util.Arrays;\n+\n+import org.apache.lucene.store.*;\n+import org.apache.lucene.store.IOContext.Context;\n+\n+/**\n+ * A {@link Directory} implementation for all Unixes and Windows that uses\n+ * DIRECT I/O to bypass OS level IO caching during\n+ * merging.  For all other cases (searching, writing) we delegate\n+ * to the provided Directory instance.\n+ *\n+ * <p>See <a\n+ * href=\"{@docRoot}/overview-summary.html#DirectIODirectory\">Overview</a>\n+ * for more details.\n+ *\n+ * <p><b>WARNING</b>: this code is very new and quite easily\n+ * could contain horrible bugs.\n+ *\n+ * <p>This directory passes Solr and Lucene tests on Linux, OS X,\n+ * and Windows; other systems should work but have not been\n+ * tested! Use at your own risk.\n+ *\n+ * <p>@throws UnsupportedOperationException if the operating system, file system or JDK\n+ * does not support Direct I/O or a sufficient equivalent.\n+ *\n+ * @lucene.experimental\n+ */\n+public class DirectIODirectory extends FilterDirectory {\n+\n+  /** Default buffer size before writing to disk (256 KB);\n+   *  larger means less IO load but more RAM and direct\n+   *  buffer storage space consumed during merging. */\n+\n+  public final static int DEFAULT_MERGE_BUFFER_SIZE = 262144;\n+\n+  /** Default min expected merge size before direct IO is\n+   *  used (10 MB): */\n+  public final static long DEFAULT_MIN_BYTES_DIRECT = 10*1024*1024;\n+\n+  private final int blockSize, mergeBufferSize;\n+  private final long minBytesDirect;\n+  private final Path path;\n+  \n+  volatile boolean isOpen = true;\n+\n+  /** Reference to {@code com.sun.nio.file.ExtendedOpenOption.DIRECT} by reflective class and enum lookup.\n+   * There are two reasons for using this instead of directly referencing ExtendedOpenOption.DIRECT:\n+   * <ol>\n+   * <li> ExtendedOpenOption.DIRECT is OpenJDK's internal proprietary API. This API causes un-suppressible(?) warning to be emitted\n+   *  when compiling with --release flag and value N, where N is smaller than the the version of javac used for compilation.</li>\n+   * <li> It is possible that Lucene is run using JDK that does not support ExtendedOpenOption.DIRECT. In such a\n+   *  case, dynamic lookup allows us to bail out with UnsupportedOperationException with meaningful error message.</li>\n+   * </ol>\n+   * <p>This reference is {@code null}, if the JDK does not support direct I/O.\n+   */\n+  static final OpenOption ExtendedOpenOption_DIRECT; // visible for test\n+  static {\n+    OpenOption option;\n+    try {\n+      final Class<? extends OpenOption> clazz = Class.forName(\"com.sun.nio.file.ExtendedOpenOption\").asSubclass(OpenOption.class);\n+      option = Arrays.stream(clazz.getEnumConstants())\n+                      .filter(e -> e.toString().equalsIgnoreCase(\"DIRECT\"))\n+                      .findFirst()\n+                      .orElse(null);\n+    } catch (Exception e) {\n+      option = null;\n+    }\n+    ExtendedOpenOption_DIRECT = option;\n+  }\n+\n+  /** Create a new DirectIODirectory for the named location.\n+   * \n+   * @param path the path of the directory\n+   * @param mergeBufferSize Size of buffer to use for\n+   *    merging.\n+   * @param minBytesDirect Merges, or files to be opened for\n+   *   reading, smaller than this will\n+   *   not use direct IO.  See {@link\n+   *   #DEFAULT_MIN_BYTES_DIRECT}\n+   * @param delegate fallback Directory for non-merges\n+   * @throws IOException If there is a low-level I/O error\n+   */\n+  public DirectIODirectory(Path path, int mergeBufferSize, long minBytesDirect, FSDirectory delegate) throws IOException {\n+    super(delegate);\n+    this.blockSize = Math.toIntExact(Files.getFileStore(path).getBlockSize());\n+    this.mergeBufferSize = mergeBufferSize;\n+    this.minBytesDirect = minBytesDirect;\n+    this.path = path.toRealPath();\n+  }\n+\n+  /** Create a new DirectIODirectory for the named location.\n+   * \n+   * @param path the path of the directory\n+   * @param delegate fallback Directory for non-merges\n+   * @throws IOException If there is a low-level I/O error\n+   */\n+  public DirectIODirectory(Path path, FSDirectory delegate) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e09470767068c7850a9e5145dc61c2abf9a387c"}, "originalPosition": 124}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a59b56f2f94aed53d2268c3053e0fa37382ce44", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/9a59b56f2f94aed53d2268c3053e0fa37382ce44", "committedDate": "2020-12-20T23:49:19Z", "message": "Remove the explicit path in constructor and take the one from wrapped FSDirectory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d803d0b016b923c4993a6178979288c2190697a1", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/d803d0b016b923c4993a6178979288c2190697a1", "committedDate": "2020-12-20T23:56:37Z", "message": "Cleaner solution"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f1a9fdffecaaf043858e0702bb155765860183d", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/apache/lucene-solr/commit/6f1a9fdffecaaf043858e0702bb155765860183d", "committedDate": "2021-01-03T02:07:22Z", "message": "Add checksum and a test to exercise DirectIODirectory with real index, and updated code to pass failing tests testZInt, testSeekPastEOF & testCreateOutputForExistingFile in BaseDirectoryTestCase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa509059d2644ac66fed446113bf4829ec8ea574", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/apache/lucene-solr/commit/fa509059d2644ac66fed446113bf4829ec8ea574", "committedDate": "2021-01-04T07:02:59Z", "message": "Add reference to JDK compiler bug ticket"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8453fdcc96103b9e27a9af09cac5eab044eb0de9", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/apache/lucene-solr/commit/8453fdcc96103b9e27a9af09cac5eab044eb0de9", "committedDate": "2021-01-15T06:50:04Z", "message": "Merge branch 'master' into LUCENE-8982-DirectIO"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e458b52171105cf8a0df66604f336be93ab9ff2", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/apache/lucene-solr/commit/5e458b52171105cf8a0df66604f336be93ab9ff2", "committedDate": "2021-01-15T06:52:34Z", "message": "Fix formatting by running ./gradlew :lucene:misc:spotlessApply"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY5NTA3NzI5", "url": "https://github.com/apache/lucene-solr/pull/2052#pullrequestreview-569507729", "createdAt": "2021-01-15T18:27:17Z", "commit": {"oid": "6f1a9fdffecaaf043858e0702bb155765860183d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxODoyNzoxN1rOIUno6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxODoyNzoxN1rOIUno6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODQ5MTg4Mg==", "bodyText": "Thanks, this was driving me crazy when I tried to fix this (I gave up after some beers deep night).", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r558491882", "createdAt": "2021-01-15T18:27:17Z", "author": {"login": "uschindler"}, "path": "lucene/misc/src/java/org/apache/lucene/misc/store/DirectIODirectory.java", "diffHunk": "@@ -307,7 +314,14 @@ public void close() throws IOException {\n \n     @Override\n     public long getFilePointer() {\n-      return filePos + buffer.position();\n+      long filePointer = filePos + buffer.position();\n+\n+      // opening the input and immediately calling getFilePointer without calling readX (and thus refill) first,\n+      // will result in negative value equal to bufferSize being returned,\n+      // due to the initialization method filePos = -bufferSize used in constructor.\n+      assert filePointer == -buffer.capacity() || filePointer >= 0 :\n+        \"filePointer should either be initial value equal to negative buffer capacity, or larger than or equal to 0\";\n+      return Math.max(filePointer, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f1a9fdffecaaf043858e0702bb155765860183d"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY5NTA4MTAz", "url": "https://github.com/apache/lucene-solr/pull/2052#pullrequestreview-569508103", "createdAt": "2021-01-15T18:27:32Z", "commit": {"oid": "6f1a9fdffecaaf043858e0702bb155765860183d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxODoyNzozMlrOIUnpYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxODoyNzozMlrOIUnpYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODQ5MjAwMA==", "bodyText": "Thanks, this was driving me crazy when I tried to fix this (I gave up after some beers deep night).", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r558492000", "createdAt": "2021-01-15T18:27:32Z", "author": {"login": "uschindler"}, "path": "lucene/misc/src/java/org/apache/lucene/misc/store/DirectIODirectory.java", "diffHunk": "@@ -346,17 +360,21 @@ public byte readByte() throws IOException {\n \n     private void refill() throws IOException {\n       filePos += buffer.capacity();\n-      \n+\n+      // BaseDirectoryTestCase#testSeekPastEOF test for consecutive read past EOF,\n+      // hence throwing EOFException early to maintain buffer state (position in particular)\n+      if(filePos >= channel.size()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f1a9fdffecaaf043858e0702bb155765860183d"}, "originalPosition": 83}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46747982553f45d9424f6fb5cd2ce41d5874fa66", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/apache/lucene-solr/commit/46747982553f45d9424f6fb5cd2ce41d5874fa66", "committedDate": "2021-01-16T05:45:29Z", "message": "Fix EOF exception thrown for some tests on Windows platform as filePos == channel.size() when refill"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d640d118d03791bf323e7c45410c8bed3bc402bc", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/apache/lucene-solr/commit/d640d118d03791bf323e7c45410c8bed3bc402bc", "committedDate": "2021-01-16T07:34:33Z", "message": "Fix EOF handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "314bbdccef82d0ef672e2e9ec99546b714f26b3b", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/apache/lucene-solr/commit/314bbdccef82d0ef672e2e9ec99546b714f26b3b", "committedDate": "2021-01-16T08:19:43Z", "message": "Fix formatting and refactoring"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY5OTA0MjY0", "url": "https://github.com/apache/lucene-solr/pull/2052#pullrequestreview-569904264", "createdAt": "2021-01-16T11:03:50Z", "commit": {"oid": "314bbdccef82d0ef672e2e9ec99546b714f26b3b"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNlQxMTowMzo1MFrOIU86Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNlQxMTowNTozOVrOIU866Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODg0MDQwNg==", "bodyText": "Yes that's the correct way to test it, use the local FS block size \ud83d\udc4d .", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r558840406", "createdAt": "2021-01-16T11:03:50Z", "author": {"login": "uschindler"}, "path": "lucene/misc/src/test/org/apache/lucene/misc/store/TestDirectIODirectory.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.misc.store;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import org.apache.lucene.document.*;\n+import org.apache.lucene.index.DirectoryReader;\n+import org.apache.lucene.index.IndexReader;\n+import org.apache.lucene.index.RandomIndexWriter;\n+import org.apache.lucene.search.IndexSearcher;\n+import org.apache.lucene.search.PhraseQuery;\n+import org.apache.lucene.store.*;\n+import org.junit.BeforeClass;\n+\n+public class TestDirectIODirectory extends BaseDirectoryTestCase {\n+\n+  @BeforeClass\n+  public static void checkSupported() {\n+    assumeTrue(\n+        \"This test required a JDK version that has support for ExtendedOpenOption.DIRECT\",\n+        DirectIODirectory.ExtendedOpenOption_DIRECT != null);\n+  }\n+\n+  @Override\n+  protected DirectIODirectory getDirectory(Path path) throws IOException {\n+    return new DirectIODirectory(\n+        FSDirectory.open(path), DirectIODirectory.DEFAULT_MERGE_BUFFER_SIZE, 0L) {\n+      @Override\n+      protected boolean useDirectIO(IOContext context) {\n+        return true;\n+      }\n+    };\n+  }\n+\n+  public void testIndexWriteRead() throws IOException {\n+    try (Directory dir = getDirectory(createTempDir(\"testDirectIODirectory\"))) {\n+      try (RandomIndexWriter iw = new RandomIndexWriter(random(), dir)) {\n+        Document doc = new Document();\n+        Field field = newField(\"field\", \"foo bar\", TextField.TYPE_STORED);\n+        doc.add(field);\n+\n+        iw.addDocument(doc);\n+        iw.commit();\n+      }\n+\n+      try (IndexReader ir = DirectoryReader.open(dir)) {\n+        IndexSearcher s = newSearcher(ir);\n+        assertEquals(1, s.count(new PhraseQuery(\"field\", \"foo\", \"bar\")));\n+      }\n+    }\n+  }\n+\n+  public void testIllegalEOFWithFileSizeMultipleOfBlockSize() throws Exception {\n+    Path path = createTempDir(\"testIllegalEOF\");\n+    final int fileSize = Math.toIntExact(Files.getFileStore(path).getBlockSize()) * 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "314bbdccef82d0ef672e2e9ec99546b714f26b3b"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODg0MDU1Mw==", "bodyText": "It is very good that this test uses the \"hack\" DirectIODirectory that ALWAYS uses our implementation! By default it would only use it for merges, but here we enforce use of IndexInput/IndexOutput for all transactions (although they may be slower).", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r558840553", "createdAt": "2021-01-16T11:05:39Z", "author": {"login": "uschindler"}, "path": "lucene/misc/src/test/org/apache/lucene/misc/store/TestDirectIODirectory.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.misc.store;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import org.apache.lucene.document.*;\n+import org.apache.lucene.index.DirectoryReader;\n+import org.apache.lucene.index.IndexReader;\n+import org.apache.lucene.index.RandomIndexWriter;\n+import org.apache.lucene.search.IndexSearcher;\n+import org.apache.lucene.search.PhraseQuery;\n+import org.apache.lucene.store.*;\n+import org.junit.BeforeClass;\n+\n+public class TestDirectIODirectory extends BaseDirectoryTestCase {\n+\n+  @BeforeClass\n+  public static void checkSupported() {\n+    assumeTrue(\n+        \"This test required a JDK version that has support for ExtendedOpenOption.DIRECT\",\n+        DirectIODirectory.ExtendedOpenOption_DIRECT != null);\n+  }\n+\n+  @Override\n+  protected DirectIODirectory getDirectory(Path path) throws IOException {\n+    return new DirectIODirectory(\n+        FSDirectory.open(path), DirectIODirectory.DEFAULT_MERGE_BUFFER_SIZE, 0L) {\n+      @Override\n+      protected boolean useDirectIO(IOContext context) {\n+        return true;\n+      }\n+    };\n+  }\n+\n+  public void testIndexWriteRead() throws IOException {\n+    try (Directory dir = getDirectory(createTempDir(\"testDirectIODirectory\"))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "314bbdccef82d0ef672e2e9ec99546b714f26b3b"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18216c39550552d88ce2e1fb62da200d928fa630", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/18216c39550552d88ce2e1fb62da200d928fa630", "committedDate": "2021-01-17T12:12:37Z", "message": "Improve the useDirectIO protected method to allow subclasses a better control on when direct IO is used"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwMDg2ODkw", "url": "https://github.com/apache/lucene-solr/pull/2052#pullrequestreview-570086890", "createdAt": "2021-01-17T19:29:19Z", "commit": {"oid": "18216c39550552d88ce2e1fb62da200d928fa630"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a7cadd75521b0fd36fe50f0ee7c5965dc9b50fe", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/2a7cadd75521b0fd36fe50f0ee7c5965dc9b50fe", "committedDate": "2021-01-17T22:53:52Z", "message": "Update changes"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2554, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}