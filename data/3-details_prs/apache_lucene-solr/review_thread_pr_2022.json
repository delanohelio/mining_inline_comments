{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5MjQ1MzE3", "number": 2022, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwMDowMToxNVrOExZ6UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNToyNjo0OVrOE20WKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMjQwMjA5OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene90/Lucene90VectorReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwMDowMToxNVrOHnhTsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwMDowMToxNVrOHnhTsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTIwMjIyNQ==", "bodyText": "PREDICTABLE_RANDOM:  This random generator (java.util.Random) is predictable (details)", "url": "https://github.com/apache/lucene-solr/pull/2022#discussion_r511202225", "createdAt": "2020-10-24T00:01:15Z", "author": {"login": "sonatype-lift"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene90/Lucene90VectorReader.java", "diffHunk": "@@ -165,42 +191,88 @@ public VectorValues getVectorValues(String field) throws IOException {\n     return new OffHeapVectorValues(fieldEntry, bytesSlice);\n   }\n \n+  // exposed for testing\n+  public KnnGraphValues getGraphValues(String field) throws IOException {\n+    FieldInfo info = fieldInfos.fieldInfo(field);\n+    if (info == null) {\n+      throw new IllegalArgumentException(\"No such field '\" + field + \"'\");\n+    }\n+    FieldEntry entry = fields.get(field);\n+    if (entry != null && entry.indexDataLength > 0) {\n+      return getGraphValues(entry);\n+    } else {\n+      return KnnGraphValues.EMPTY;\n+    }\n+  }\n+\n+  private KnnGraphValues getGraphValues(FieldEntry entry) throws IOException {\n+    if (isHnswStrategy(entry.searchStrategy)) {\n+      HnswGraphFieldEntry graphEntry = (HnswGraphFieldEntry) entry;\n+      IndexInput bytesSlice = vectorIndex.slice(\"graph-data\", entry.indexDataOffset, entry.indexDataLength);\n+      return new IndexedKnnGraphReader(graphEntry, bytesSlice);\n+    } else {\n+      return KnnGraphValues.EMPTY;\n+    }\n+  }\n+\n   @Override\n   public void close() throws IOException {\n-    vectorData.close();\n+    IOUtils.close(vectorData, vectorIndex);\n   }\n \n   private static class FieldEntry {\n \n     final int dimension;\n     final VectorValues.SearchStrategy searchStrategy;\n-    final int maxDoc;\n \n     final long vectorDataOffset;\n     final long vectorDataLength;\n+    final long indexDataOffset;\n+    final long indexDataLength;\n     final int[] ordToDoc;\n \n-    FieldEntry(int dimension, VectorValues.SearchStrategy searchStrategy, int maxDoc,\n-               long vectorDataOffset, long vectorDataLength, int[] ordToDoc) {\n-      this.dimension = dimension;\n+    FieldEntry(DataInput input, VectorValues.SearchStrategy searchStrategy) throws IOException {\n       this.searchStrategy = searchStrategy;\n-      this.maxDoc = maxDoc;\n-      this.vectorDataOffset = vectorDataOffset;\n-      this.vectorDataLength = vectorDataLength;\n-      this.ordToDoc = ordToDoc;\n+      vectorDataOffset = input.readVLong();\n+      vectorDataLength = input.readVLong();\n+      indexDataOffset = input.readVLong();\n+      indexDataLength = input.readVLong();\n+      dimension = input.readInt();\n+      int size = input.readInt();\n+      ordToDoc = new int[size];\n+      for (int i = 0; i < size; i++) {\n+        int doc = input.readVInt();\n+        ordToDoc[i] = doc;\n+      }\n     }\n \n     int size() {\n       return ordToDoc.length;\n     }\n   }\n \n+  private static class HnswGraphFieldEntry extends FieldEntry {\n+\n+    final long[] ordOffsets;\n+\n+    HnswGraphFieldEntry(DataInput input, VectorValues.SearchStrategy searchStrategy) throws IOException {\n+      super(input, searchStrategy);\n+      ordOffsets = new long[size()];\n+      long offset = 0;\n+      for (int i = 0; i < ordOffsets.length; i++) {\n+        offset += input.readVLong();\n+        ordOffsets[i] = offset;\n+      }\n+    }\n+  }\n+\n   /** Read the vector values from the index input. This supports both iterated and random access. */\n-  private final static class OffHeapVectorValues extends VectorValues {\n+  private final class OffHeapVectorValues extends VectorValues {\n \n     final FieldEntry fieldEntry;\n     final IndexInput dataIn;\n \n+    final Random random = new Random();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c10b88a38b25ca52e87be009ed8011ccc1b94683"}, "originalPosition": 249}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMjQwMjIwOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/util/hnsw/HnswGraphBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwMDowMToxNlrOHnhTvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwMDowMToxNlrOHnhTvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTIwMjIzNg==", "bodyText": "PREDICTABLE_RANDOM:  This random generator (java.util.Random) is predictable (details)", "url": "https://github.com/apache/lucene-solr/pull/2022#discussion_r511202236", "createdAt": "2020-10-24T00:01:16Z", "author": {"login": "sonatype-lift"}, "path": "lucene/core/src/java/org/apache/lucene/util/hnsw/HnswGraphBuilder.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.util.hnsw;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Random;\n+\n+import org.apache.lucene.index.KnnGraphValues;\n+import org.apache.lucene.index.VectorValues;\n+import org.apache.lucene.util.BytesRef;\n+\n+/**\n+ * Builder for HNSW graph. See {@link HnswGraph} for a gloss on the algorithm and the meaning of the hyperparameters.\n+ */\n+public final class HnswGraphBuilder {\n+\n+  // default random seed for level generation\n+  private static final long DEFAULT_RAND_SEED = System.currentTimeMillis();\n+\n+  // expose for testing.\n+  public static long randSeed = DEFAULT_RAND_SEED;\n+\n+  // These \"default\" hyperparameter settings are exposed (and nonfinal) to enable performance testing\n+  // since the indexing API doesn't provide any control over them.\n+\n+  // default max connections per node\n+  static int DEFAULT_MAX_CONN = 16;\n+\n+  // default candidate list size\n+  static int DEFAULT_BEAM_WIDTH = 16;\n+\n+  private final int maxConn;\n+  private final int beamWidth;\n+  private final BoundedVectorValues boundedVectors;\n+  private final VectorValues.SearchStrategy searchStrategy;\n+  private final HnswGraph hnsw;\n+  private final Random random;\n+\n+  /**\n+   * Reads all the vectors from a VectorValues, builds a graph connecting them by their dense ordinals, using default\n+   * hyperparameter settings, and returns the resulting graph.\n+   * @param vectorValues the vectors whose relations are represented by the graph\n+   */\n+  public static HnswGraph build(VectorValues vectorValues) throws IOException {\n+    HnswGraphBuilder builder = new HnswGraphBuilder(vectorValues.randomAccess());\n+    return builder.build(vectorValues.randomAccess());\n+  }\n+\n+  /**\n+   * Reads all the vectors from a VectorValues, builds a graph connecting them by their dense ordinals, using the given\n+   * hyperparameter settings, and returns the resulting graph.\n+   * @param vectorValues the vectors whose relations are represented by the graph\n+   * @param maxConn the number of connections to make when adding a new graph node; roughly speaking the graph fanout.\n+   * @param beamWidth the size of the beam search to use when finding nearest neighbors.\n+   * @param seed the seed for a random number generator used during graph construction. Provide this to ensure repeatable construction.\n+   */\n+  public static HnswGraph build(VectorValues vectorValues, int maxConn, int beamWidth, long seed) throws IOException {\n+    HnswGraphBuilder builder = new HnswGraphBuilder(vectorValues.randomAccess(), maxConn, beamWidth, seed);\n+    return builder.build(vectorValues.randomAccess());\n+  }\n+\n+  /**\n+   * Reads all the vectors from two copies of a random access VectorValues. Providing two copies enables efficient retrieval\n+   * without extra data copying, while avoiding collision of the returned values.\n+   * @param vectors the vectors for which to build a nearest neighbors graph. Must be an independet accessor for the vectors\n+   */\n+  private HnswGraph build(VectorValues.RandomAccess vectors) throws IOException {\n+    for (int node = 1; node < vectors.size(); node++) {\n+      insert(vectors.vectorValue(node));\n+    }\n+    return hnsw;\n+  }\n+\n+  /** Construct the builder with default configurations */\n+  private HnswGraphBuilder(VectorValues.RandomAccess vectors) {\n+    this(vectors, DEFAULT_MAX_CONN, DEFAULT_BEAM_WIDTH, randSeed);\n+  }\n+\n+  /** Full constructor */\n+  private HnswGraphBuilder(VectorValues.RandomAccess vectors, int maxConn, int beamWidth, long seed) {\n+    searchStrategy = vectors.searchStrategy();\n+    if (searchStrategy == VectorValues.SearchStrategy.NONE) {\n+      throw new IllegalStateException(\"No distance function\");\n+    }\n+    this.maxConn = maxConn;\n+    this.beamWidth = beamWidth;\n+    boundedVectors = new BoundedVectorValues(vectors);\n+    this.hnsw = new HnswGraph();\n+    random = new Random(seed);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c10b88a38b25ca52e87be009ed8011ccc1b94683"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzMwMzUwOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene90/Lucene90VectorReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMjo1MjoyNFrOHrNr3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNToxMzoxMVrOHrTh9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA3NTAzOA==", "bodyText": "Does this mean Lucene users are free to chose to simply store / retrieve vectors, even after we push this change?  I.e. the ANN is optional?", "url": "https://github.com/apache/lucene-solr/pull/2022#discussion_r515075038", "createdAt": "2020-10-30T12:52:24Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene90/Lucene90VectorReader.java", "diffHunk": "@@ -102,23 +122,28 @@ private void readFields(ChecksumIndexInput meta, FieldInfos infos) throws IOExce\n       if (info == null) {\n         throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber, meta);\n       }\n-      int searchStrategyId = meta.readInt();\n-      if (searchStrategyId < 0 || searchStrategyId >= VectorValues.SearchStrategy.values().length) {\n-        throw new CorruptIndexException(\"Invalid search strategy id: \" + searchStrategyId, meta);\n-      }\n-      VectorValues.SearchStrategy searchStrategy = VectorValues.SearchStrategy.values()[searchStrategyId];\n-      long vectorDataOffset = meta.readVLong();\n-      long vectorDataLength = meta.readVLong();\n-      int dimension = meta.readInt();\n-      int size = meta.readInt();\n-      int[] ordToDoc = new int[size];\n-      for (int i = 0; i < size; i++) {\n-        int doc = meta.readVInt();\n-        ordToDoc[i] = doc;\n-      }\n-      FieldEntry fieldEntry = new FieldEntry(dimension, searchStrategy, maxDoc, vectorDataOffset, vectorDataLength,\n-                                              ordToDoc);\n-      fields.put(info.name, fieldEntry);\n+      fields.put(info.name, readField(meta));\n+    }\n+  }\n+\n+  private VectorValues.SearchStrategy readSearchStrategy(DataInput input) throws IOException {\n+    int searchStrategyId = input.readInt();\n+    if (searchStrategyId < 0 || searchStrategyId >= VectorValues.SearchStrategy.values().length) {\n+      throw new CorruptIndexException(\"Invalid search strategy id: \" + searchStrategyId, input);\n+    }\n+    return VectorValues.SearchStrategy.values()[searchStrategyId];\n+  }\n+\n+  private FieldEntry readField(DataInput input) throws IOException {\n+    VectorValues.SearchStrategy searchStrategy = readSearchStrategy(input);\n+    switch(searchStrategy) {\n+      case NONE:\n+        return new FieldEntry(input, searchStrategy);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c10b88a38b25ca52e87be009ed8011ccc1b94683"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE3MDgwNg==", "bodyText": "right; they may choose an indexing approach based on a strategy (the names indicate algorithm/metric, but could be anything), or NONE. That can be useful for calculating vector score only for the purpose of ranking hits matched by other means.", "url": "https://github.com/apache/lucene-solr/pull/2022#discussion_r515170806", "createdAt": "2020-10-30T15:13:11Z", "author": {"login": "msokolov"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene90/Lucene90VectorReader.java", "diffHunk": "@@ -102,23 +122,28 @@ private void readFields(ChecksumIndexInput meta, FieldInfos infos) throws IOExce\n       if (info == null) {\n         throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber, meta);\n       }\n-      int searchStrategyId = meta.readInt();\n-      if (searchStrategyId < 0 || searchStrategyId >= VectorValues.SearchStrategy.values().length) {\n-        throw new CorruptIndexException(\"Invalid search strategy id: \" + searchStrategyId, meta);\n-      }\n-      VectorValues.SearchStrategy searchStrategy = VectorValues.SearchStrategy.values()[searchStrategyId];\n-      long vectorDataOffset = meta.readVLong();\n-      long vectorDataLength = meta.readVLong();\n-      int dimension = meta.readInt();\n-      int size = meta.readInt();\n-      int[] ordToDoc = new int[size];\n-      for (int i = 0; i < size; i++) {\n-        int doc = meta.readVInt();\n-        ordToDoc[i] = doc;\n-      }\n-      FieldEntry fieldEntry = new FieldEntry(dimension, searchStrategy, maxDoc, vectorDataOffset, vectorDataLength,\n-                                              ordToDoc);\n-      fields.put(info.name, fieldEntry);\n+      fields.put(info.name, readField(meta));\n+    }\n+  }\n+\n+  private VectorValues.SearchStrategy readSearchStrategy(DataInput input) throws IOException {\n+    int searchStrategyId = input.readInt();\n+    if (searchStrategyId < 0 || searchStrategyId >= VectorValues.SearchStrategy.values().length) {\n+      throw new CorruptIndexException(\"Invalid search strategy id: \" + searchStrategyId, input);\n+    }\n+    return VectorValues.SearchStrategy.values()[searchStrategyId];\n+  }\n+\n+  private FieldEntry readField(DataInput input) throws IOException {\n+    VectorValues.SearchStrategy searchStrategy = readSearchStrategy(input);\n+    switch(searchStrategy) {\n+      case NONE:\n+        return new FieldEntry(input, searchStrategy);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA3NTAzOA=="}, "originalCommit": {"oid": "c10b88a38b25ca52e87be009ed8011ccc1b94683"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzMwOTIzOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene90/Lucene90VectorReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMjo1NDoyMVrOHrNvbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNToxNjoxNVrOHrTp_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA3NTk1MA==", "bodyText": "Why only testing?  It looks like it would be a useful API for users!", "url": "https://github.com/apache/lucene-solr/pull/2022#discussion_r515075950", "createdAt": "2020-10-30T12:54:21Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene90/Lucene90VectorReader.java", "diffHunk": "@@ -165,42 +191,88 @@ public VectorValues getVectorValues(String field) throws IOException {\n     return new OffHeapVectorValues(fieldEntry, bytesSlice);\n   }\n \n+  // exposed for testing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c10b88a38b25ca52e87be009ed8011ccc1b94683"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE3Mjg2MA==", "bodyText": "Fair; mostly I think the idea was to minimize the new API surface area that needs to be documented and maintained, trying to stick to VectorValues as the main public API with the KnnGraph as an internal indexing data structure", "url": "https://github.com/apache/lucene-solr/pull/2022#discussion_r515172860", "createdAt": "2020-10-30T15:16:15Z", "author": {"login": "msokolov"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene90/Lucene90VectorReader.java", "diffHunk": "@@ -165,42 +191,88 @@ public VectorValues getVectorValues(String field) throws IOException {\n     return new OffHeapVectorValues(fieldEntry, bytesSlice);\n   }\n \n+  // exposed for testing", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA3NTk1MA=="}, "originalCommit": {"oid": "c10b88a38b25ca52e87be009ed8011ccc1b94683"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzMyMTE4OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/VectorValues.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMjo1Nzo1MlrOHrN2xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNDo1MToxM1rOHx-YSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA3NzgyOQ==", "bodyText": "Isn't there also an index-time fanout control?  Do we allow users to tune that (where?)?  If so, maybe link to that from this search-time fanout javadoc too?", "url": "https://github.com/apache/lucene-solr/pull/2022#discussion_r515077829", "createdAt": "2020-10-30T12:57:52Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/VectorValues.java", "diffHunk": "@@ -74,6 +74,18 @@ public BytesRef binaryValue() throws IOException {\n     throw new UnsupportedOperationException();\n   }\n \n+  /**\n+   * Return the k nearest neighbor documents as determined by comparison of their vector values\n+   * for this field, to the given vector, by the field's search strategy. If the search strategy is\n+   * reversed, lower values indicate nearer vectors, otherwise higher scores indicate nearer\n+   * vectors. Unlike relevance scores, vector scores may be negative.\n+   * @param target the vector-valued query\n+   * @param k      the number of docs to return\n+   * @param fanout control the accuracy/speed tradeoff - larger values give better recall at higher cost", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c10b88a38b25ca52e87be009ed8011ccc1b94683"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE3NDM2Nw==", "bodyText": "Yeah, I think there needs to be a follow-on exposing the index-time controls, which indeed are much more potent than this search-time fanout, which has only a small impact on recall and latency. In this patch they are globals in HnswGraphBuilder, but there is no API for setting them. I am thinking the index-time hyperparameters would be specified in IndexWriterConfig?", "url": "https://github.com/apache/lucene-solr/pull/2022#discussion_r515174367", "createdAt": "2020-10-30T15:18:27Z", "author": {"login": "msokolov"}, "path": "lucene/core/src/java/org/apache/lucene/index/VectorValues.java", "diffHunk": "@@ -74,6 +74,18 @@ public BytesRef binaryValue() throws IOException {\n     throw new UnsupportedOperationException();\n   }\n \n+  /**\n+   * Return the k nearest neighbor documents as determined by comparison of their vector values\n+   * for this field, to the given vector, by the field's search strategy. If the search strategy is\n+   * reversed, lower values indicate nearer vectors, otherwise higher scores indicate nearer\n+   * vectors. Unlike relevance scores, vector scores may be negative.\n+   * @param target the vector-valued query\n+   * @param k      the number of docs to return\n+   * @param fanout control the accuracy/speed tradeoff - larger values give better recall at higher cost", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA3NzgyOQ=="}, "originalCommit": {"oid": "c10b88a38b25ca52e87be009ed8011ccc1b94683"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc5Nzg2MQ==", "bodyText": "Yeah, I think there needs to be a follow-on exposing the index-time controls, which indeed are much more potent than this search-time fanout, which has only a small impact on recall and latency. In this patch they are globals in HnswGraphBuilder, but there is no API for setting them.\n\nOK, makes sense.\n\nI am thinking the index-time hyperparameters would be specified in IndexWriterConfig?\n\nHmm, maybe these could be codec level controls?  Or maybe FieldInfo?  They would be per-vector-field configuration right?", "url": "https://github.com/apache/lucene-solr/pull/2022#discussion_r518797861", "createdAt": "2020-11-06T14:47:31Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/VectorValues.java", "diffHunk": "@@ -74,6 +74,18 @@ public BytesRef binaryValue() throws IOException {\n     throw new UnsupportedOperationException();\n   }\n \n+  /**\n+   * Return the k nearest neighbor documents as determined by comparison of their vector values\n+   * for this field, to the given vector, by the field's search strategy. If the search strategy is\n+   * reversed, lower values indicate nearer vectors, otherwise higher scores indicate nearer\n+   * vectors. Unlike relevance scores, vector scores may be negative.\n+   * @param target the vector-valued query\n+   * @param k      the number of docs to return\n+   * @param fanout control the accuracy/speed tradeoff - larger values give better recall at higher cost", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA3NzgyOQ=="}, "originalCommit": {"oid": "c10b88a38b25ca52e87be009ed8011ccc1b94683"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkwMjI3Ng==", "bodyText": "Yeah that's a good point. While experimenting with GloVe I'm learning that different settings are appropriate for different vectors, so field-level control might be needed. I'm not sure how codec-level controls are exposed. Don't Codecs get created automatically using no-args constructors and service autodiscovery? Did you mean something like perFieldVectorFormat? Except I doubt we need a new format; it's more about some metadata values that we would store in the field, so I think yeah it would go in FieldInfo. But I'm reluctant to expose hnsw-specific hyperparameters in VectorField, which we want to support other algorithms as well. Maybe this is a good use case for IndexableField.getAttributes()?", "url": "https://github.com/apache/lucene-solr/pull/2022#discussion_r518902276", "createdAt": "2020-11-06T17:36:25Z", "author": {"login": "msokolov"}, "path": "lucene/core/src/java/org/apache/lucene/index/VectorValues.java", "diffHunk": "@@ -74,6 +74,18 @@ public BytesRef binaryValue() throws IOException {\n     throw new UnsupportedOperationException();\n   }\n \n+  /**\n+   * Return the k nearest neighbor documents as determined by comparison of their vector values\n+   * for this field, to the given vector, by the field's search strategy. If the search strategy is\n+   * reversed, lower values indicate nearer vectors, otherwise higher scores indicate nearer\n+   * vectors. Unlike relevance scores, vector scores may be negative.\n+   * @param target the vector-valued query\n+   * @param k      the number of docs to return\n+   * @param fanout control the accuracy/speed tradeoff - larger values give better recall at higher cost", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA3NzgyOQ=="}, "originalCommit": {"oid": "c10b88a38b25ca52e87be009ed8011ccc1b94683"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk5NzgxMQ==", "bodyText": "Yeah this probably needs to be field level. Different strokes for different collections of vectors. I'm not sure how to expose since the parameters will be different for different ANN implementations. Might be a good use case for generic IndexedField.attributes?", "url": "https://github.com/apache/lucene-solr/pull/2022#discussion_r518997811", "createdAt": "2020-11-06T20:49:14Z", "author": {"login": "msokolov"}, "path": "lucene/core/src/java/org/apache/lucene/index/VectorValues.java", "diffHunk": "@@ -74,6 +74,18 @@ public BytesRef binaryValue() throws IOException {\n     throw new UnsupportedOperationException();\n   }\n \n+  /**\n+   * Return the k nearest neighbor documents as determined by comparison of their vector values\n+   * for this field, to the given vector, by the field's search strategy. If the search strategy is\n+   * reversed, lower values indicate nearer vectors, otherwise higher scores indicate nearer\n+   * vectors. Unlike relevance scores, vector scores may be negative.\n+   * @param target the vector-valued query\n+   * @param k      the number of docs to return\n+   * @param fanout control the accuracy/speed tradeoff - larger values give better recall at higher cost", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA3NzgyOQ=="}, "originalCommit": {"oid": "c10b88a38b25ca52e87be009ed8011ccc1b94683"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg3MzQ1NQ==", "bodyText": "Don't Codecs get created automatically using no-args constructors and service autodiscovery?\n\nThey do at read (search) time!  But at write time, you can pass parameters that alter how the Codec does its work, as long as the resulting index is then readable at search time with no-args constructors.\nI vaguely remember talking about having ways for Codec at read-time to also take options, but I'm not sure that was ever fully designed / pushed ... @s1monw may remember?\n\nBut I'm reluctant to expose hnsw-specific hyperparameters in VectorField, which we want to support other algorithms as well.\nMight be a good use case for generic IndexedField.attributes?\n\nYeah, maybe?  I agree it is not obvious where the API should live and how it then finds its way into the ANN data structure construction when writing each segment.", "url": "https://github.com/apache/lucene-solr/pull/2022#discussion_r519873455", "createdAt": "2020-11-09T14:54:27Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/VectorValues.java", "diffHunk": "@@ -74,6 +74,18 @@ public BytesRef binaryValue() throws IOException {\n     throw new UnsupportedOperationException();\n   }\n \n+  /**\n+   * Return the k nearest neighbor documents as determined by comparison of their vector values\n+   * for this field, to the given vector, by the field's search strategy. If the search strategy is\n+   * reversed, lower values indicate nearer vectors, otherwise higher scores indicate nearer\n+   * vectors. Unlike relevance scores, vector scores may be negative.\n+   * @param target the vector-valued query\n+   * @param k      the number of docs to return\n+   * @param fanout control the accuracy/speed tradeoff - larger values give better recall at higher cost", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA3NzgyOQ=="}, "originalCommit": {"oid": "c10b88a38b25ca52e87be009ed8011ccc1b94683"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk5MjExMQ==", "bodyText": "@mikemccand it was pushed but removed again in https://issues.apache.org/jira/browse/LUCENE-9257 a little while ago. I get why it's removed but it seems useful maybe we add it back?", "url": "https://github.com/apache/lucene-solr/pull/2022#discussion_r521992111", "createdAt": "2020-11-12T10:16:46Z", "author": {"login": "s1monw"}, "path": "lucene/core/src/java/org/apache/lucene/index/VectorValues.java", "diffHunk": "@@ -74,6 +74,18 @@ public BytesRef binaryValue() throws IOException {\n     throw new UnsupportedOperationException();\n   }\n \n+  /**\n+   * Return the k nearest neighbor documents as determined by comparison of their vector values\n+   * for this field, to the given vector, by the field's search strategy. If the search strategy is\n+   * reversed, lower values indicate nearer vectors, otherwise higher scores indicate nearer\n+   * vectors. Unlike relevance scores, vector scores may be negative.\n+   * @param target the vector-valued query\n+   * @param k      the number of docs to return\n+   * @param fanout control the accuracy/speed tradeoff - larger values give better recall at higher cost", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA3NzgyOQ=="}, "originalCommit": {"oid": "c10b88a38b25ca52e87be009ed8011ccc1b94683"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE2NDI5Ng==", "bodyText": "Ahh OK thanks for the context @s1monw.", "url": "https://github.com/apache/lucene-solr/pull/2022#discussion_r522164296", "createdAt": "2020-11-12T14:51:13Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/VectorValues.java", "diffHunk": "@@ -74,6 +74,18 @@ public BytesRef binaryValue() throws IOException {\n     throw new UnsupportedOperationException();\n   }\n \n+  /**\n+   * Return the k nearest neighbor documents as determined by comparison of their vector values\n+   * for this field, to the given vector, by the field's search strategy. If the search strategy is\n+   * reversed, lower values indicate nearer vectors, otherwise higher scores indicate nearer\n+   * vectors. Unlike relevance scores, vector scores may be negative.\n+   * @param target the vector-valued query\n+   * @param k      the number of docs to return\n+   * @param fanout control the accuracy/speed tradeoff - larger values give better recall at higher cost", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA3NzgyOQ=="}, "originalCommit": {"oid": "c10b88a38b25ca52e87be009ed8011ccc1b94683"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzMzNDkyOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/util/hnsw/HnswGraph.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzowMTo1MlrOHrN_ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDo0OToyMVrOHu9Hdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA4MDA0Mg==", "bodyText": "A node corresponds to an indexed vector, right?  And it is represented using its compact vector ordinal?", "url": "https://github.com/apache/lucene-solr/pull/2022#discussion_r515080042", "createdAt": "2020-10-30T13:01:52Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/util/hnsw/HnswGraph.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.util.hnsw;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+import org.apache.lucene.index.KnnGraphValues;\n+import org.apache.lucene.index.VectorValues;\n+\n+import static org.apache.lucene.search.DocIdSetIterator.NO_MORE_DOCS;\n+import static org.apache.lucene.util.VectorUtil.dotProduct;\n+import static org.apache.lucene.util.VectorUtil.squareDistance;\n+\n+/**\n+ * Navigable Small-world graph. Provides efficient approximate nearest neighbor\n+ * search for high dimensional vectors.  See <a href=\"https://doi.org/10.1016/j.is.2013.10.006\">Approximate nearest\n+ * neighbor algorithm based on navigable small world graphs [2014]</a> and <a\n+ * href=\"https://arxiv.org/abs/1603.09320\">this paper [2018]</a> for details.\n+ *\n+ * This implementation is actually more like the one in the same authors' earlier 2014 paper in that\n+ * there is no hierarchy (just one layer), and no fanout restriction on the graph: nodes are allowed to accumulate\n+ * an unbounded number of outbound links, but it does incorporate some of the innovations of the later paper, like\n+ * using a priority queue to perform a beam search while traversing the graph. The nomenclature is a bit different\n+ * here from what's used in those papers:\n+ *\n+ * <h3>Hyperparameters</h3>\n+ * <ul>\n+ *   <li><code>numSeed</code> is the equivalent of <code>m</code> in the 2012 paper; it controls the number of random entry points to sample.</li>\n+ *   <li><code>beamWidth</code> in {@link HnswGraphBuilder} has the same meaning as <code>efConst</code> in the 2016 paper. It is the number of\n+ *   nearest neighbor candidates to track while searching the graph for each newly inserted node.</li>\n+ *   <li><code>maxConn</code> has the same meaning as <code>M</code> in the later paper; it controls how many of the <code>efConst</code> neighbors are\n+ *   connected to the new node</li>\n+ *   <li><code>fanout</code> the fanout parameter of {@link VectorValues#search(float[], int, int)}\n+ *   is used to control the values of <code>numSeed</code> and <code>topK</code> that are passed to this API.\n+ *   Thus <code>fanout</code> is like a combination of <code>ef</code> (search beam width) from the 2016 paper and <code>m</code> from the 2014 paper.\n+ *   </li>\n+ * </ul>\n+ *\n+ * <p>Note: The graph may be searched by multiple threads concurrently, but updates are not thread-safe. Also note: there is no notion of\n+ * deletions. Document searching built on top of this must do its own deletion-filtering.</p>\n+ */\n+public final class HnswGraph {\n+\n+  // each entry lists the neighbors of a node, in node order", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c10b88a38b25ca52e87be009ed8011ccc1b94683"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk5Nzg3OQ==", "bodyText": "Yes, although this class is agnostic as to the interpretation of these nodes. They could just as well be docIds, or social security numbers. But yeah, the only usage is as you describe, so I'll add a note to the javadoc.", "url": "https://github.com/apache/lucene-solr/pull/2022#discussion_r518997879", "createdAt": "2020-11-06T20:49:21Z", "author": {"login": "msokolov"}, "path": "lucene/core/src/java/org/apache/lucene/util/hnsw/HnswGraph.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.util.hnsw;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+import org.apache.lucene.index.KnnGraphValues;\n+import org.apache.lucene.index.VectorValues;\n+\n+import static org.apache.lucene.search.DocIdSetIterator.NO_MORE_DOCS;\n+import static org.apache.lucene.util.VectorUtil.dotProduct;\n+import static org.apache.lucene.util.VectorUtil.squareDistance;\n+\n+/**\n+ * Navigable Small-world graph. Provides efficient approximate nearest neighbor\n+ * search for high dimensional vectors.  See <a href=\"https://doi.org/10.1016/j.is.2013.10.006\">Approximate nearest\n+ * neighbor algorithm based on navigable small world graphs [2014]</a> and <a\n+ * href=\"https://arxiv.org/abs/1603.09320\">this paper [2018]</a> for details.\n+ *\n+ * This implementation is actually more like the one in the same authors' earlier 2014 paper in that\n+ * there is no hierarchy (just one layer), and no fanout restriction on the graph: nodes are allowed to accumulate\n+ * an unbounded number of outbound links, but it does incorporate some of the innovations of the later paper, like\n+ * using a priority queue to perform a beam search while traversing the graph. The nomenclature is a bit different\n+ * here from what's used in those papers:\n+ *\n+ * <h3>Hyperparameters</h3>\n+ * <ul>\n+ *   <li><code>numSeed</code> is the equivalent of <code>m</code> in the 2012 paper; it controls the number of random entry points to sample.</li>\n+ *   <li><code>beamWidth</code> in {@link HnswGraphBuilder} has the same meaning as <code>efConst</code> in the 2016 paper. It is the number of\n+ *   nearest neighbor candidates to track while searching the graph for each newly inserted node.</li>\n+ *   <li><code>maxConn</code> has the same meaning as <code>M</code> in the later paper; it controls how many of the <code>efConst</code> neighbors are\n+ *   connected to the new node</li>\n+ *   <li><code>fanout</code> the fanout parameter of {@link VectorValues#search(float[], int, int)}\n+ *   is used to control the values of <code>numSeed</code> and <code>topK</code> that are passed to this API.\n+ *   Thus <code>fanout</code> is like a combination of <code>ef</code> (search beam width) from the 2016 paper and <code>m</code> from the 2014 paper.\n+ *   </li>\n+ * </ul>\n+ *\n+ * <p>Note: The graph may be searched by multiple threads concurrently, but updates are not thread-safe. Also note: there is no notion of\n+ * deletions. Document searching built on top of this must do its own deletion-filtering.</p>\n+ */\n+public final class HnswGraph {\n+\n+  // each entry lists the neighbors of a node, in node order", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA4MDA0Mg=="}, "originalCommit": {"oid": "c10b88a38b25ca52e87be009ed8011ccc1b94683"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzM0NzA3OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/util/hnsw/HnswGraph.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzowNTo0NFrOHrOHIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDo1MzoyNFrOHu9OGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA4MjAxOQ==", "bodyText": "Maybe we could add this as a method on the enum constants instead?  So then caller could just call SearchStrategy.isReversed?", "url": "https://github.com/apache/lucene-solr/pull/2022#discussion_r515082019", "createdAt": "2020-10-30T13:05:44Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/util/hnsw/HnswGraph.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.util.hnsw;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+import org.apache.lucene.index.KnnGraphValues;\n+import org.apache.lucene.index.VectorValues;\n+\n+import static org.apache.lucene.search.DocIdSetIterator.NO_MORE_DOCS;\n+import static org.apache.lucene.util.VectorUtil.dotProduct;\n+import static org.apache.lucene.util.VectorUtil.squareDistance;\n+\n+/**\n+ * Navigable Small-world graph. Provides efficient approximate nearest neighbor\n+ * search for high dimensional vectors.  See <a href=\"https://doi.org/10.1016/j.is.2013.10.006\">Approximate nearest\n+ * neighbor algorithm based on navigable small world graphs [2014]</a> and <a\n+ * href=\"https://arxiv.org/abs/1603.09320\">this paper [2018]</a> for details.\n+ *\n+ * This implementation is actually more like the one in the same authors' earlier 2014 paper in that\n+ * there is no hierarchy (just one layer), and no fanout restriction on the graph: nodes are allowed to accumulate\n+ * an unbounded number of outbound links, but it does incorporate some of the innovations of the later paper, like\n+ * using a priority queue to perform a beam search while traversing the graph. The nomenclature is a bit different\n+ * here from what's used in those papers:\n+ *\n+ * <h3>Hyperparameters</h3>\n+ * <ul>\n+ *   <li><code>numSeed</code> is the equivalent of <code>m</code> in the 2012 paper; it controls the number of random entry points to sample.</li>\n+ *   <li><code>beamWidth</code> in {@link HnswGraphBuilder} has the same meaning as <code>efConst</code> in the 2016 paper. It is the number of\n+ *   nearest neighbor candidates to track while searching the graph for each newly inserted node.</li>\n+ *   <li><code>maxConn</code> has the same meaning as <code>M</code> in the later paper; it controls how many of the <code>efConst</code> neighbors are\n+ *   connected to the new node</li>\n+ *   <li><code>fanout</code> the fanout parameter of {@link VectorValues#search(float[], int, int)}\n+ *   is used to control the values of <code>numSeed</code> and <code>topK</code> that are passed to this API.\n+ *   Thus <code>fanout</code> is like a combination of <code>ef</code> (search beam width) from the 2016 paper and <code>m</code> from the 2014 paper.\n+ *   </li>\n+ * </ul>\n+ *\n+ * <p>Note: The graph may be searched by multiple threads concurrently, but updates are not thread-safe. Also note: there is no notion of\n+ * deletions. Document searching built on top of this must do its own deletion-filtering.</p>\n+ */\n+public final class HnswGraph {\n+\n+  // each entry lists the neighbors of a node, in node order\n+  private final List<List<Neighbor>> graph;\n+\n+  HnswGraph() {\n+    graph = new ArrayList<>();\n+    graph.add(new ArrayList<>());\n+  }\n+\n+  /**\n+   * Searches for the nearest neighbors of a query vector.\n+   * @param query search query vector\n+   * @param topK the number of nodes to be returned\n+   * @param numSeed the number of random entry points to sample\n+   * @param vectors vector values\n+   * @param graphValues the graph values. May represent the entire graph, or a level in a hierarchical graph.\n+   * @param random a source of randomness, used for generating entry points to the graph\n+   * @return a priority queue holding the neighbors found\n+   */\n+  public static Neighbors search(float[] query, int topK, int numSeed, VectorValues.RandomAccess vectors, KnnGraphValues graphValues,\n+                                 Random random) throws IOException {\n+    VectorValues.SearchStrategy searchStrategy = vectors.searchStrategy();\n+    boolean scoreReversed = isReversed(searchStrategy);\n+    TreeSet<Neighbor> candidates;\n+    if (scoreReversed) {\n+      candidates = new TreeSet<>(Comparator.reverseOrder());\n+    } else {\n+      candidates = new TreeSet<>();\n+    }\n+    int size = vectors.size();\n+    for (int i = 0; i < numSeed && i < size; i++) {\n+      int entryPoint = random.nextInt(size);\n+      candidates.add(new Neighbor(entryPoint, compare(query, vectors.vectorValue(entryPoint), searchStrategy)));\n+    }\n+    // set of ordinals that have been visited by search on this layer, used to avoid backtracking\n+    //IntHashSet visited = new IntHashSet();\n+    Set<Integer> visited = new HashSet<>();\n+    // TODO: use PriorityQueue's sentinel optimization\n+    Neighbors results = Neighbors.create(topK, scoreReversed);\n+    for (Neighbor c :candidates) {\n+      visited.add(c.node);\n+      results.insertWithOverflow(c);\n+    }\n+    // Set the bound to the worst current result and below reject any newly-generated candidates failing\n+    // to exceed this bound\n+    BoundsChecker bound = BoundsChecker.create(scoreReversed);\n+    bound.bound = results.top().score;\n+    while (candidates.size() > 0) {\n+      // get the best candidate (closest or best scoring)\n+      Neighbor c = candidates.pollLast();\n+      if (results.size() >= topK) {\n+        if (bound.check(c.score)) {\n+          break;\n+        }\n+      }\n+      graphValues.seek(c.node);\n+      int friendOrd;\n+      while ((friendOrd = graphValues.nextArc()) != NO_MORE_DOCS) {\n+        if (visited.contains(friendOrd)) {\n+          continue;\n+        }\n+        visited.add(friendOrd);\n+        float score = compare(query, vectors.vectorValue(friendOrd), searchStrategy);\n+        if (results.size() < topK || bound.check(score) == false) {\n+          Neighbor n = new Neighbor(friendOrd, score);\n+          candidates.add(n);\n+          results.insertWithOverflow(n);\n+          bound.bound = results.top().score;\n+        }\n+      }\n+    }\n+    return results;\n+  }\n+\n+  /**\n+   * Returns the nodes connected to the given node by its outgoing arcs.\n+   * @param node the node whose friends are returned\n+   */\n+  public int[] getNeighbors(int node) {\n+    return graph.get(node).stream().mapToInt(Neighbor::node).toArray();\n+  }\n+\n+  /** Connects two nodes symmetrically.\n+   * node1 must be less than node2 and must already have been inserted to the graph */\n+  void connectNodes(int node1, int node2, float score, int maxConnections) {\n+    assert node1 >= 0 && node2 >= 0;\n+    assert node1 < node2;\n+    List<Neighbor> arcs1 = graph.get(node1);\n+    assert arcs1 != null;\n+    assert arcs1.isEmpty() || arcs1.get(arcs1.size() - 1).node < node2;\n+    arcs1.add(new Neighbor(node2, score));\n+    List<Neighbor> arcs2;\n+    if (node2 < graph.size()) {\n+      arcs2 = graph.get(node2);\n+      assert arcs2.get(arcs2.size() - 1).node < node1;\n+    } else {\n+      assert node2 == graph.size();\n+      arcs2 = new ArrayList<>();\n+      graph.add(arcs2);\n+    }\n+    arcs2.add(new Neighbor(node1, score));\n+\n+    // ensure #arcs <= maxConnections\n+    /*\n+    if (maxConnections > 0) {\n+      shrink(node2, maxConnections);\n+    }\n+     */\n+  }\n+\n+  /**\n+   * Calculates a similarity score between the two vectors with a specified function.\n+   * @param v1 a vector\n+   * @param v2 another vector, of the same dimension\n+   * @return the value of the strategy's score function applied to the two vectors\n+   */\n+  public static float compare(float[] v1, float[] v2, VectorValues.SearchStrategy searchStrategy) {\n+    switch (searchStrategy) {\n+      case EUCLIDEAN_HNSW:\n+        return squareDistance(v1, v2);\n+      case DOT_PRODUCT_HNSW:\n+        return dotProduct(v1, v2);\n+      default:\n+        throw new IllegalStateException(\"invalid search strategy: \" + searchStrategy);\n+    }\n+  }\n+\n+  /**\n+   * Return whether the given strategy returns lower values for nearer vectors\n+   * @param searchStrategy the strategy\n+   */\n+  public static boolean isReversed(VectorValues.SearchStrategy searchStrategy) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c10b88a38b25ca52e87be009ed8011ccc1b94683"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk5OTU3Ng==", "bodyText": "yeah that does seem cleaner. It was what I had in an earlier revision, but got thrown out with the bathwater of the vector scoring implementations.", "url": "https://github.com/apache/lucene-solr/pull/2022#discussion_r518999576", "createdAt": "2020-11-06T20:53:24Z", "author": {"login": "msokolov"}, "path": "lucene/core/src/java/org/apache/lucene/util/hnsw/HnswGraph.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.util.hnsw;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+import org.apache.lucene.index.KnnGraphValues;\n+import org.apache.lucene.index.VectorValues;\n+\n+import static org.apache.lucene.search.DocIdSetIterator.NO_MORE_DOCS;\n+import static org.apache.lucene.util.VectorUtil.dotProduct;\n+import static org.apache.lucene.util.VectorUtil.squareDistance;\n+\n+/**\n+ * Navigable Small-world graph. Provides efficient approximate nearest neighbor\n+ * search for high dimensional vectors.  See <a href=\"https://doi.org/10.1016/j.is.2013.10.006\">Approximate nearest\n+ * neighbor algorithm based on navigable small world graphs [2014]</a> and <a\n+ * href=\"https://arxiv.org/abs/1603.09320\">this paper [2018]</a> for details.\n+ *\n+ * This implementation is actually more like the one in the same authors' earlier 2014 paper in that\n+ * there is no hierarchy (just one layer), and no fanout restriction on the graph: nodes are allowed to accumulate\n+ * an unbounded number of outbound links, but it does incorporate some of the innovations of the later paper, like\n+ * using a priority queue to perform a beam search while traversing the graph. The nomenclature is a bit different\n+ * here from what's used in those papers:\n+ *\n+ * <h3>Hyperparameters</h3>\n+ * <ul>\n+ *   <li><code>numSeed</code> is the equivalent of <code>m</code> in the 2012 paper; it controls the number of random entry points to sample.</li>\n+ *   <li><code>beamWidth</code> in {@link HnswGraphBuilder} has the same meaning as <code>efConst</code> in the 2016 paper. It is the number of\n+ *   nearest neighbor candidates to track while searching the graph for each newly inserted node.</li>\n+ *   <li><code>maxConn</code> has the same meaning as <code>M</code> in the later paper; it controls how many of the <code>efConst</code> neighbors are\n+ *   connected to the new node</li>\n+ *   <li><code>fanout</code> the fanout parameter of {@link VectorValues#search(float[], int, int)}\n+ *   is used to control the values of <code>numSeed</code> and <code>topK</code> that are passed to this API.\n+ *   Thus <code>fanout</code> is like a combination of <code>ef</code> (search beam width) from the 2016 paper and <code>m</code> from the 2014 paper.\n+ *   </li>\n+ * </ul>\n+ *\n+ * <p>Note: The graph may be searched by multiple threads concurrently, but updates are not thread-safe. Also note: there is no notion of\n+ * deletions. Document searching built on top of this must do its own deletion-filtering.</p>\n+ */\n+public final class HnswGraph {\n+\n+  // each entry lists the neighbors of a node, in node order\n+  private final List<List<Neighbor>> graph;\n+\n+  HnswGraph() {\n+    graph = new ArrayList<>();\n+    graph.add(new ArrayList<>());\n+  }\n+\n+  /**\n+   * Searches for the nearest neighbors of a query vector.\n+   * @param query search query vector\n+   * @param topK the number of nodes to be returned\n+   * @param numSeed the number of random entry points to sample\n+   * @param vectors vector values\n+   * @param graphValues the graph values. May represent the entire graph, or a level in a hierarchical graph.\n+   * @param random a source of randomness, used for generating entry points to the graph\n+   * @return a priority queue holding the neighbors found\n+   */\n+  public static Neighbors search(float[] query, int topK, int numSeed, VectorValues.RandomAccess vectors, KnnGraphValues graphValues,\n+                                 Random random) throws IOException {\n+    VectorValues.SearchStrategy searchStrategy = vectors.searchStrategy();\n+    boolean scoreReversed = isReversed(searchStrategy);\n+    TreeSet<Neighbor> candidates;\n+    if (scoreReversed) {\n+      candidates = new TreeSet<>(Comparator.reverseOrder());\n+    } else {\n+      candidates = new TreeSet<>();\n+    }\n+    int size = vectors.size();\n+    for (int i = 0; i < numSeed && i < size; i++) {\n+      int entryPoint = random.nextInt(size);\n+      candidates.add(new Neighbor(entryPoint, compare(query, vectors.vectorValue(entryPoint), searchStrategy)));\n+    }\n+    // set of ordinals that have been visited by search on this layer, used to avoid backtracking\n+    //IntHashSet visited = new IntHashSet();\n+    Set<Integer> visited = new HashSet<>();\n+    // TODO: use PriorityQueue's sentinel optimization\n+    Neighbors results = Neighbors.create(topK, scoreReversed);\n+    for (Neighbor c :candidates) {\n+      visited.add(c.node);\n+      results.insertWithOverflow(c);\n+    }\n+    // Set the bound to the worst current result and below reject any newly-generated candidates failing\n+    // to exceed this bound\n+    BoundsChecker bound = BoundsChecker.create(scoreReversed);\n+    bound.bound = results.top().score;\n+    while (candidates.size() > 0) {\n+      // get the best candidate (closest or best scoring)\n+      Neighbor c = candidates.pollLast();\n+      if (results.size() >= topK) {\n+        if (bound.check(c.score)) {\n+          break;\n+        }\n+      }\n+      graphValues.seek(c.node);\n+      int friendOrd;\n+      while ((friendOrd = graphValues.nextArc()) != NO_MORE_DOCS) {\n+        if (visited.contains(friendOrd)) {\n+          continue;\n+        }\n+        visited.add(friendOrd);\n+        float score = compare(query, vectors.vectorValue(friendOrd), searchStrategy);\n+        if (results.size() < topK || bound.check(score) == false) {\n+          Neighbor n = new Neighbor(friendOrd, score);\n+          candidates.add(n);\n+          results.insertWithOverflow(n);\n+          bound.bound = results.top().score;\n+        }\n+      }\n+    }\n+    return results;\n+  }\n+\n+  /**\n+   * Returns the nodes connected to the given node by its outgoing arcs.\n+   * @param node the node whose friends are returned\n+   */\n+  public int[] getNeighbors(int node) {\n+    return graph.get(node).stream().mapToInt(Neighbor::node).toArray();\n+  }\n+\n+  /** Connects two nodes symmetrically.\n+   * node1 must be less than node2 and must already have been inserted to the graph */\n+  void connectNodes(int node1, int node2, float score, int maxConnections) {\n+    assert node1 >= 0 && node2 >= 0;\n+    assert node1 < node2;\n+    List<Neighbor> arcs1 = graph.get(node1);\n+    assert arcs1 != null;\n+    assert arcs1.isEmpty() || arcs1.get(arcs1.size() - 1).node < node2;\n+    arcs1.add(new Neighbor(node2, score));\n+    List<Neighbor> arcs2;\n+    if (node2 < graph.size()) {\n+      arcs2 = graph.get(node2);\n+      assert arcs2.get(arcs2.size() - 1).node < node1;\n+    } else {\n+      assert node2 == graph.size();\n+      arcs2 = new ArrayList<>();\n+      graph.add(arcs2);\n+    }\n+    arcs2.add(new Neighbor(node1, score));\n+\n+    // ensure #arcs <= maxConnections\n+    /*\n+    if (maxConnections > 0) {\n+      shrink(node2, maxConnections);\n+    }\n+     */\n+  }\n+\n+  /**\n+   * Calculates a similarity score between the two vectors with a specified function.\n+   * @param v1 a vector\n+   * @param v2 another vector, of the same dimension\n+   * @return the value of the strategy's score function applied to the two vectors\n+   */\n+  public static float compare(float[] v1, float[] v2, VectorValues.SearchStrategy searchStrategy) {\n+    switch (searchStrategy) {\n+      case EUCLIDEAN_HNSW:\n+        return squareDistance(v1, v2);\n+      case DOT_PRODUCT_HNSW:\n+        return dotProduct(v1, v2);\n+      default:\n+        throw new IllegalStateException(\"invalid search strategy: \" + searchStrategy);\n+    }\n+  }\n+\n+  /**\n+   * Return whether the given strategy returns lower values for nearer vectors\n+   * @param searchStrategy the strategy\n+   */\n+  public static boolean isReversed(VectorValues.SearchStrategy searchStrategy) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA4MjAxOQ=="}, "originalCommit": {"oid": "c10b88a38b25ca52e87be009ed8011ccc1b94683"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzM0OTU5OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/util/hnsw/HnswGraph.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzowNjoyMVrOHrOIig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzowNjoyMVrOHrOIig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA4MjM3OA==", "bodyText": "Maybe this could also be a method on SearchStrategy enum?", "url": "https://github.com/apache/lucene-solr/pull/2022#discussion_r515082378", "createdAt": "2020-10-30T13:06:21Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/util/hnsw/HnswGraph.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.util.hnsw;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+import org.apache.lucene.index.KnnGraphValues;\n+import org.apache.lucene.index.VectorValues;\n+\n+import static org.apache.lucene.search.DocIdSetIterator.NO_MORE_DOCS;\n+import static org.apache.lucene.util.VectorUtil.dotProduct;\n+import static org.apache.lucene.util.VectorUtil.squareDistance;\n+\n+/**\n+ * Navigable Small-world graph. Provides efficient approximate nearest neighbor\n+ * search for high dimensional vectors.  See <a href=\"https://doi.org/10.1016/j.is.2013.10.006\">Approximate nearest\n+ * neighbor algorithm based on navigable small world graphs [2014]</a> and <a\n+ * href=\"https://arxiv.org/abs/1603.09320\">this paper [2018]</a> for details.\n+ *\n+ * This implementation is actually more like the one in the same authors' earlier 2014 paper in that\n+ * there is no hierarchy (just one layer), and no fanout restriction on the graph: nodes are allowed to accumulate\n+ * an unbounded number of outbound links, but it does incorporate some of the innovations of the later paper, like\n+ * using a priority queue to perform a beam search while traversing the graph. The nomenclature is a bit different\n+ * here from what's used in those papers:\n+ *\n+ * <h3>Hyperparameters</h3>\n+ * <ul>\n+ *   <li><code>numSeed</code> is the equivalent of <code>m</code> in the 2012 paper; it controls the number of random entry points to sample.</li>\n+ *   <li><code>beamWidth</code> in {@link HnswGraphBuilder} has the same meaning as <code>efConst</code> in the 2016 paper. It is the number of\n+ *   nearest neighbor candidates to track while searching the graph for each newly inserted node.</li>\n+ *   <li><code>maxConn</code> has the same meaning as <code>M</code> in the later paper; it controls how many of the <code>efConst</code> neighbors are\n+ *   connected to the new node</li>\n+ *   <li><code>fanout</code> the fanout parameter of {@link VectorValues#search(float[], int, int)}\n+ *   is used to control the values of <code>numSeed</code> and <code>topK</code> that are passed to this API.\n+ *   Thus <code>fanout</code> is like a combination of <code>ef</code> (search beam width) from the 2016 paper and <code>m</code> from the 2014 paper.\n+ *   </li>\n+ * </ul>\n+ *\n+ * <p>Note: The graph may be searched by multiple threads concurrently, but updates are not thread-safe. Also note: there is no notion of\n+ * deletions. Document searching built on top of this must do its own deletion-filtering.</p>\n+ */\n+public final class HnswGraph {\n+\n+  // each entry lists the neighbors of a node, in node order\n+  private final List<List<Neighbor>> graph;\n+\n+  HnswGraph() {\n+    graph = new ArrayList<>();\n+    graph.add(new ArrayList<>());\n+  }\n+\n+  /**\n+   * Searches for the nearest neighbors of a query vector.\n+   * @param query search query vector\n+   * @param topK the number of nodes to be returned\n+   * @param numSeed the number of random entry points to sample\n+   * @param vectors vector values\n+   * @param graphValues the graph values. May represent the entire graph, or a level in a hierarchical graph.\n+   * @param random a source of randomness, used for generating entry points to the graph\n+   * @return a priority queue holding the neighbors found\n+   */\n+  public static Neighbors search(float[] query, int topK, int numSeed, VectorValues.RandomAccess vectors, KnnGraphValues graphValues,\n+                                 Random random) throws IOException {\n+    VectorValues.SearchStrategy searchStrategy = vectors.searchStrategy();\n+    boolean scoreReversed = isReversed(searchStrategy);\n+    TreeSet<Neighbor> candidates;\n+    if (scoreReversed) {\n+      candidates = new TreeSet<>(Comparator.reverseOrder());\n+    } else {\n+      candidates = new TreeSet<>();\n+    }\n+    int size = vectors.size();\n+    for (int i = 0; i < numSeed && i < size; i++) {\n+      int entryPoint = random.nextInt(size);\n+      candidates.add(new Neighbor(entryPoint, compare(query, vectors.vectorValue(entryPoint), searchStrategy)));\n+    }\n+    // set of ordinals that have been visited by search on this layer, used to avoid backtracking\n+    //IntHashSet visited = new IntHashSet();\n+    Set<Integer> visited = new HashSet<>();\n+    // TODO: use PriorityQueue's sentinel optimization\n+    Neighbors results = Neighbors.create(topK, scoreReversed);\n+    for (Neighbor c :candidates) {\n+      visited.add(c.node);\n+      results.insertWithOverflow(c);\n+    }\n+    // Set the bound to the worst current result and below reject any newly-generated candidates failing\n+    // to exceed this bound\n+    BoundsChecker bound = BoundsChecker.create(scoreReversed);\n+    bound.bound = results.top().score;\n+    while (candidates.size() > 0) {\n+      // get the best candidate (closest or best scoring)\n+      Neighbor c = candidates.pollLast();\n+      if (results.size() >= topK) {\n+        if (bound.check(c.score)) {\n+          break;\n+        }\n+      }\n+      graphValues.seek(c.node);\n+      int friendOrd;\n+      while ((friendOrd = graphValues.nextArc()) != NO_MORE_DOCS) {\n+        if (visited.contains(friendOrd)) {\n+          continue;\n+        }\n+        visited.add(friendOrd);\n+        float score = compare(query, vectors.vectorValue(friendOrd), searchStrategy);\n+        if (results.size() < topK || bound.check(score) == false) {\n+          Neighbor n = new Neighbor(friendOrd, score);\n+          candidates.add(n);\n+          results.insertWithOverflow(n);\n+          bound.bound = results.top().score;\n+        }\n+      }\n+    }\n+    return results;\n+  }\n+\n+  /**\n+   * Returns the nodes connected to the given node by its outgoing arcs.\n+   * @param node the node whose friends are returned\n+   */\n+  public int[] getNeighbors(int node) {\n+    return graph.get(node).stream().mapToInt(Neighbor::node).toArray();\n+  }\n+\n+  /** Connects two nodes symmetrically.\n+   * node1 must be less than node2 and must already have been inserted to the graph */\n+  void connectNodes(int node1, int node2, float score, int maxConnections) {\n+    assert node1 >= 0 && node2 >= 0;\n+    assert node1 < node2;\n+    List<Neighbor> arcs1 = graph.get(node1);\n+    assert arcs1 != null;\n+    assert arcs1.isEmpty() || arcs1.get(arcs1.size() - 1).node < node2;\n+    arcs1.add(new Neighbor(node2, score));\n+    List<Neighbor> arcs2;\n+    if (node2 < graph.size()) {\n+      arcs2 = graph.get(node2);\n+      assert arcs2.get(arcs2.size() - 1).node < node1;\n+    } else {\n+      assert node2 == graph.size();\n+      arcs2 = new ArrayList<>();\n+      graph.add(arcs2);\n+    }\n+    arcs2.add(new Neighbor(node1, score));\n+\n+    // ensure #arcs <= maxConnections\n+    /*\n+    if (maxConnections > 0) {\n+      shrink(node2, maxConnections);\n+    }\n+     */\n+  }\n+\n+  /**\n+   * Calculates a similarity score between the two vectors with a specified function.\n+   * @param v1 a vector\n+   * @param v2 another vector, of the same dimension\n+   * @return the value of the strategy's score function applied to the two vectors\n+   */\n+  public static float compare(float[] v1, float[] v2, VectorValues.SearchStrategy searchStrategy) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c10b88a38b25ca52e87be009ed8011ccc1b94683"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzM3MjU1OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/util/hnsw/HnswGraphBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzoxMjo1NVrOHrOWiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDo1NjozOFrOHu9Txg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA4NTk2MQ==", "bodyText": "Does our test-framework -Dtests.seed=XXX fix the seed here too?  So that (hopefully!) test failures are reproducible.", "url": "https://github.com/apache/lucene-solr/pull/2022#discussion_r515085961", "createdAt": "2020-10-30T13:12:55Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/util/hnsw/HnswGraphBuilder.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.util.hnsw;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Random;\n+\n+import org.apache.lucene.index.KnnGraphValues;\n+import org.apache.lucene.index.VectorValues;\n+import org.apache.lucene.util.BytesRef;\n+\n+/**\n+ * Builder for HNSW graph. See {@link HnswGraph} for a gloss on the algorithm and the meaning of the hyperparameters.\n+ */\n+public final class HnswGraphBuilder {\n+\n+  // default random seed for level generation\n+  private static final long DEFAULT_RAND_SEED = System.currentTimeMillis();\n+\n+  // expose for testing.\n+  public static long randSeed = DEFAULT_RAND_SEED;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c10b88a38b25ca52e87be009ed8011ccc1b94683"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAwMTAzMA==", "bodyText": "yes!", "url": "https://github.com/apache/lucene-solr/pull/2022#discussion_r519001030", "createdAt": "2020-11-06T20:56:38Z", "author": {"login": "msokolov"}, "path": "lucene/core/src/java/org/apache/lucene/util/hnsw/HnswGraphBuilder.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.util.hnsw;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Random;\n+\n+import org.apache.lucene.index.KnnGraphValues;\n+import org.apache.lucene.index.VectorValues;\n+import org.apache.lucene.util.BytesRef;\n+\n+/**\n+ * Builder for HNSW graph. See {@link HnswGraph} for a gloss on the algorithm and the meaning of the hyperparameters.\n+ */\n+public final class HnswGraphBuilder {\n+\n+  // default random seed for level generation\n+  private static final long DEFAULT_RAND_SEED = System.currentTimeMillis();\n+\n+  // expose for testing.\n+  public static long randSeed = DEFAULT_RAND_SEED;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA4NTk2MQ=="}, "originalCommit": {"oid": "c10b88a38b25ca52e87be009ed8011ccc1b94683"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzM3NjM0OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/util/hnsw/HnswGraphBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzoxMzo0M1rOHrOY2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzoxMzo0M1rOHrOY2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA4NjU1Mg==", "bodyText": "Oh I see -- users cannot (easily) change these defaults while indexing?  I would think we could provide these arguments to the Codec at write time and route them down to this HNSW building process...", "url": "https://github.com/apache/lucene-solr/pull/2022#discussion_r515086552", "createdAt": "2020-10-30T13:13:43Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/util/hnsw/HnswGraphBuilder.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.util.hnsw;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Random;\n+\n+import org.apache.lucene.index.KnnGraphValues;\n+import org.apache.lucene.index.VectorValues;\n+import org.apache.lucene.util.BytesRef;\n+\n+/**\n+ * Builder for HNSW graph. See {@link HnswGraph} for a gloss on the algorithm and the meaning of the hyperparameters.\n+ */\n+public final class HnswGraphBuilder {\n+\n+  // default random seed for level generation\n+  private static final long DEFAULT_RAND_SEED = System.currentTimeMillis();\n+\n+  // expose for testing.\n+  public static long randSeed = DEFAULT_RAND_SEED;\n+\n+  // These \"default\" hyperparameter settings are exposed (and nonfinal) to enable performance testing\n+  // since the indexing API doesn't provide any control over them.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c10b88a38b25ca52e87be009ed8011ccc1b94683"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzM4OTI0OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/util/hnsw/HnswGraph.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzoxNzowN1rOHrOgkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDo1Njo1MFrOHu9UIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA4ODUyOA==", "bodyText": "Hmm did we decide not to impose the maxConnections?", "url": "https://github.com/apache/lucene-solr/pull/2022#discussion_r515088528", "createdAt": "2020-10-30T13:17:07Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/util/hnsw/HnswGraph.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.util.hnsw;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+import org.apache.lucene.index.KnnGraphValues;\n+import org.apache.lucene.index.VectorValues;\n+\n+import static org.apache.lucene.search.DocIdSetIterator.NO_MORE_DOCS;\n+import static org.apache.lucene.util.VectorUtil.dotProduct;\n+import static org.apache.lucene.util.VectorUtil.squareDistance;\n+\n+/**\n+ * Navigable Small-world graph. Provides efficient approximate nearest neighbor\n+ * search for high dimensional vectors.  See <a href=\"https://doi.org/10.1016/j.is.2013.10.006\">Approximate nearest\n+ * neighbor algorithm based on navigable small world graphs [2014]</a> and <a\n+ * href=\"https://arxiv.org/abs/1603.09320\">this paper [2018]</a> for details.\n+ *\n+ * This implementation is actually more like the one in the same authors' earlier 2014 paper in that\n+ * there is no hierarchy (just one layer), and no fanout restriction on the graph: nodes are allowed to accumulate\n+ * an unbounded number of outbound links, but it does incorporate some of the innovations of the later paper, like\n+ * using a priority queue to perform a beam search while traversing the graph. The nomenclature is a bit different\n+ * here from what's used in those papers:\n+ *\n+ * <h3>Hyperparameters</h3>\n+ * <ul>\n+ *   <li><code>numSeed</code> is the equivalent of <code>m</code> in the 2012 paper; it controls the number of random entry points to sample.</li>\n+ *   <li><code>beamWidth</code> in {@link HnswGraphBuilder} has the same meaning as <code>efConst</code> in the 2016 paper. It is the number of\n+ *   nearest neighbor candidates to track while searching the graph for each newly inserted node.</li>\n+ *   <li><code>maxConn</code> has the same meaning as <code>M</code> in the later paper; it controls how many of the <code>efConst</code> neighbors are\n+ *   connected to the new node</li>\n+ *   <li><code>fanout</code> the fanout parameter of {@link VectorValues#search(float[], int, int)}\n+ *   is used to control the values of <code>numSeed</code> and <code>topK</code> that are passed to this API.\n+ *   Thus <code>fanout</code> is like a combination of <code>ef</code> (search beam width) from the 2016 paper and <code>m</code> from the 2014 paper.\n+ *   </li>\n+ * </ul>\n+ *\n+ * <p>Note: The graph may be searched by multiple threads concurrently, but updates are not thread-safe. Also note: there is no notion of\n+ * deletions. Document searching built on top of this must do its own deletion-filtering.</p>\n+ */\n+public final class HnswGraph {\n+\n+  // each entry lists the neighbors of a node, in node order\n+  private final List<List<Neighbor>> graph;\n+\n+  HnswGraph() {\n+    graph = new ArrayList<>();\n+    graph.add(new ArrayList<>());\n+  }\n+\n+  /**\n+   * Searches for the nearest neighbors of a query vector.\n+   * @param query search query vector\n+   * @param topK the number of nodes to be returned\n+   * @param numSeed the number of random entry points to sample\n+   * @param vectors vector values\n+   * @param graphValues the graph values. May represent the entire graph, or a level in a hierarchical graph.\n+   * @param random a source of randomness, used for generating entry points to the graph\n+   * @return a priority queue holding the neighbors found\n+   */\n+  public static Neighbors search(float[] query, int topK, int numSeed, VectorValues.RandomAccess vectors, KnnGraphValues graphValues,\n+                                 Random random) throws IOException {\n+    VectorValues.SearchStrategy searchStrategy = vectors.searchStrategy();\n+    boolean scoreReversed = isReversed(searchStrategy);\n+    TreeSet<Neighbor> candidates;\n+    if (scoreReversed) {\n+      candidates = new TreeSet<>(Comparator.reverseOrder());\n+    } else {\n+      candidates = new TreeSet<>();\n+    }\n+    int size = vectors.size();\n+    for (int i = 0; i < numSeed && i < size; i++) {\n+      int entryPoint = random.nextInt(size);\n+      candidates.add(new Neighbor(entryPoint, compare(query, vectors.vectorValue(entryPoint), searchStrategy)));\n+    }\n+    // set of ordinals that have been visited by search on this layer, used to avoid backtracking\n+    //IntHashSet visited = new IntHashSet();\n+    Set<Integer> visited = new HashSet<>();\n+    // TODO: use PriorityQueue's sentinel optimization\n+    Neighbors results = Neighbors.create(topK, scoreReversed);\n+    for (Neighbor c :candidates) {\n+      visited.add(c.node);\n+      results.insertWithOverflow(c);\n+    }\n+    // Set the bound to the worst current result and below reject any newly-generated candidates failing\n+    // to exceed this bound\n+    BoundsChecker bound = BoundsChecker.create(scoreReversed);\n+    bound.bound = results.top().score;\n+    while (candidates.size() > 0) {\n+      // get the best candidate (closest or best scoring)\n+      Neighbor c = candidates.pollLast();\n+      if (results.size() >= topK) {\n+        if (bound.check(c.score)) {\n+          break;\n+        }\n+      }\n+      graphValues.seek(c.node);\n+      int friendOrd;\n+      while ((friendOrd = graphValues.nextArc()) != NO_MORE_DOCS) {\n+        if (visited.contains(friendOrd)) {\n+          continue;\n+        }\n+        visited.add(friendOrd);\n+        float score = compare(query, vectors.vectorValue(friendOrd), searchStrategy);\n+        if (results.size() < topK || bound.check(score) == false) {\n+          Neighbor n = new Neighbor(friendOrd, score);\n+          candidates.add(n);\n+          results.insertWithOverflow(n);\n+          bound.bound = results.top().score;\n+        }\n+      }\n+    }\n+    return results;\n+  }\n+\n+  /**\n+   * Returns the nodes connected to the given node by its outgoing arcs.\n+   * @param node the node whose friends are returned\n+   */\n+  public int[] getNeighbors(int node) {\n+    return graph.get(node).stream().mapToInt(Neighbor::node).toArray();\n+  }\n+\n+  /** Connects two nodes symmetrically.\n+   * node1 must be less than node2 and must already have been inserted to the graph */\n+  void connectNodes(int node1, int node2, float score, int maxConnections) {\n+    assert node1 >= 0 && node2 >= 0;\n+    assert node1 < node2;\n+    List<Neighbor> arcs1 = graph.get(node1);\n+    assert arcs1 != null;\n+    assert arcs1.isEmpty() || arcs1.get(arcs1.size() - 1).node < node2;\n+    arcs1.add(new Neighbor(node2, score));\n+    List<Neighbor> arcs2;\n+    if (node2 < graph.size()) {\n+      arcs2 = graph.get(node2);\n+      assert arcs2.get(arcs2.size() - 1).node < node1;\n+    } else {\n+      assert node2 == graph.size();\n+      arcs2 = new ArrayList<>();\n+      graph.add(arcs2);\n+    }\n+    arcs2.add(new Neighbor(node1, score));\n+\n+    // ensure #arcs <= maxConnections\n+    /*\n+    if (maxConnections > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c10b88a38b25ca52e87be009ed8011ccc1b94683"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAwMTEyMw==", "bodyText": "Coming in the next revision", "url": "https://github.com/apache/lucene-solr/pull/2022#discussion_r519001123", "createdAt": "2020-11-06T20:56:50Z", "author": {"login": "msokolov"}, "path": "lucene/core/src/java/org/apache/lucene/util/hnsw/HnswGraph.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.util.hnsw;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+import org.apache.lucene.index.KnnGraphValues;\n+import org.apache.lucene.index.VectorValues;\n+\n+import static org.apache.lucene.search.DocIdSetIterator.NO_MORE_DOCS;\n+import static org.apache.lucene.util.VectorUtil.dotProduct;\n+import static org.apache.lucene.util.VectorUtil.squareDistance;\n+\n+/**\n+ * Navigable Small-world graph. Provides efficient approximate nearest neighbor\n+ * search for high dimensional vectors.  See <a href=\"https://doi.org/10.1016/j.is.2013.10.006\">Approximate nearest\n+ * neighbor algorithm based on navigable small world graphs [2014]</a> and <a\n+ * href=\"https://arxiv.org/abs/1603.09320\">this paper [2018]</a> for details.\n+ *\n+ * This implementation is actually more like the one in the same authors' earlier 2014 paper in that\n+ * there is no hierarchy (just one layer), and no fanout restriction on the graph: nodes are allowed to accumulate\n+ * an unbounded number of outbound links, but it does incorporate some of the innovations of the later paper, like\n+ * using a priority queue to perform a beam search while traversing the graph. The nomenclature is a bit different\n+ * here from what's used in those papers:\n+ *\n+ * <h3>Hyperparameters</h3>\n+ * <ul>\n+ *   <li><code>numSeed</code> is the equivalent of <code>m</code> in the 2012 paper; it controls the number of random entry points to sample.</li>\n+ *   <li><code>beamWidth</code> in {@link HnswGraphBuilder} has the same meaning as <code>efConst</code> in the 2016 paper. It is the number of\n+ *   nearest neighbor candidates to track while searching the graph for each newly inserted node.</li>\n+ *   <li><code>maxConn</code> has the same meaning as <code>M</code> in the later paper; it controls how many of the <code>efConst</code> neighbors are\n+ *   connected to the new node</li>\n+ *   <li><code>fanout</code> the fanout parameter of {@link VectorValues#search(float[], int, int)}\n+ *   is used to control the values of <code>numSeed</code> and <code>topK</code> that are passed to this API.\n+ *   Thus <code>fanout</code> is like a combination of <code>ef</code> (search beam width) from the 2016 paper and <code>m</code> from the 2014 paper.\n+ *   </li>\n+ * </ul>\n+ *\n+ * <p>Note: The graph may be searched by multiple threads concurrently, but updates are not thread-safe. Also note: there is no notion of\n+ * deletions. Document searching built on top of this must do its own deletion-filtering.</p>\n+ */\n+public final class HnswGraph {\n+\n+  // each entry lists the neighbors of a node, in node order\n+  private final List<List<Neighbor>> graph;\n+\n+  HnswGraph() {\n+    graph = new ArrayList<>();\n+    graph.add(new ArrayList<>());\n+  }\n+\n+  /**\n+   * Searches for the nearest neighbors of a query vector.\n+   * @param query search query vector\n+   * @param topK the number of nodes to be returned\n+   * @param numSeed the number of random entry points to sample\n+   * @param vectors vector values\n+   * @param graphValues the graph values. May represent the entire graph, or a level in a hierarchical graph.\n+   * @param random a source of randomness, used for generating entry points to the graph\n+   * @return a priority queue holding the neighbors found\n+   */\n+  public static Neighbors search(float[] query, int topK, int numSeed, VectorValues.RandomAccess vectors, KnnGraphValues graphValues,\n+                                 Random random) throws IOException {\n+    VectorValues.SearchStrategy searchStrategy = vectors.searchStrategy();\n+    boolean scoreReversed = isReversed(searchStrategy);\n+    TreeSet<Neighbor> candidates;\n+    if (scoreReversed) {\n+      candidates = new TreeSet<>(Comparator.reverseOrder());\n+    } else {\n+      candidates = new TreeSet<>();\n+    }\n+    int size = vectors.size();\n+    for (int i = 0; i < numSeed && i < size; i++) {\n+      int entryPoint = random.nextInt(size);\n+      candidates.add(new Neighbor(entryPoint, compare(query, vectors.vectorValue(entryPoint), searchStrategy)));\n+    }\n+    // set of ordinals that have been visited by search on this layer, used to avoid backtracking\n+    //IntHashSet visited = new IntHashSet();\n+    Set<Integer> visited = new HashSet<>();\n+    // TODO: use PriorityQueue's sentinel optimization\n+    Neighbors results = Neighbors.create(topK, scoreReversed);\n+    for (Neighbor c :candidates) {\n+      visited.add(c.node);\n+      results.insertWithOverflow(c);\n+    }\n+    // Set the bound to the worst current result and below reject any newly-generated candidates failing\n+    // to exceed this bound\n+    BoundsChecker bound = BoundsChecker.create(scoreReversed);\n+    bound.bound = results.top().score;\n+    while (candidates.size() > 0) {\n+      // get the best candidate (closest or best scoring)\n+      Neighbor c = candidates.pollLast();\n+      if (results.size() >= topK) {\n+        if (bound.check(c.score)) {\n+          break;\n+        }\n+      }\n+      graphValues.seek(c.node);\n+      int friendOrd;\n+      while ((friendOrd = graphValues.nextArc()) != NO_MORE_DOCS) {\n+        if (visited.contains(friendOrd)) {\n+          continue;\n+        }\n+        visited.add(friendOrd);\n+        float score = compare(query, vectors.vectorValue(friendOrd), searchStrategy);\n+        if (results.size() < topK || bound.check(score) == false) {\n+          Neighbor n = new Neighbor(friendOrd, score);\n+          candidates.add(n);\n+          results.insertWithOverflow(n);\n+          bound.bound = results.top().score;\n+        }\n+      }\n+    }\n+    return results;\n+  }\n+\n+  /**\n+   * Returns the nodes connected to the given node by its outgoing arcs.\n+   * @param node the node whose friends are returned\n+   */\n+  public int[] getNeighbors(int node) {\n+    return graph.get(node).stream().mapToInt(Neighbor::node).toArray();\n+  }\n+\n+  /** Connects two nodes symmetrically.\n+   * node1 must be less than node2 and must already have been inserted to the graph */\n+  void connectNodes(int node1, int node2, float score, int maxConnections) {\n+    assert node1 >= 0 && node2 >= 0;\n+    assert node1 < node2;\n+    List<Neighbor> arcs1 = graph.get(node1);\n+    assert arcs1 != null;\n+    assert arcs1.isEmpty() || arcs1.get(arcs1.size() - 1).node < node2;\n+    arcs1.add(new Neighbor(node2, score));\n+    List<Neighbor> arcs2;\n+    if (node2 < graph.size()) {\n+      arcs2 = graph.get(node2);\n+      assert arcs2.get(arcs2.size() - 1).node < node1;\n+    } else {\n+      assert node2 == graph.size();\n+      arcs2 = new ArrayList<>();\n+      graph.add(arcs2);\n+    }\n+    arcs2.add(new Neighbor(node1, score));\n+\n+    // ensure #arcs <= maxConnections\n+    /*\n+    if (maxConnections > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA4ODUyOA=="}, "originalCommit": {"oid": "c10b88a38b25ca52e87be009ed8011ccc1b94683"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzQwNDYzOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene90/Lucene90VectorFormat.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzoyMDo1NFrOHrOp3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzoyMDo1NFrOHrOp3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA5MDkxMQ==", "bodyText": "Maybe also make this a method on SearchStrategy enum?", "url": "https://github.com/apache/lucene-solr/pull/2022#discussion_r515090911", "createdAt": "2020-10-30T13:20:54Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene90/Lucene90VectorFormat.java", "diffHunk": "@@ -54,4 +56,10 @@ public VectorReader fieldsReader(SegmentReadState state) throws IOException {\n     return new Lucene90VectorReader(state);\n   }\n \n+  static boolean isHnswStrategy(VectorValues.SearchStrategy searchStrategy) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c10b88a38b25ca52e87be009ed8011ccc1b94683"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzQxMTg0OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/util/hnsw/HnswGraph.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzoyMjoyMFrOHrOuiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNTowNTo1MFrOHvzE8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA5MjEwNw==", "bodyText": "Is this class only used at segment-write time?  Or, is this also used to represent the HNSWGraph at search time?\nOK I think we do not use this at search time -- instead we .seek to a node, and then iterate through its int neighbors.  I guess we do not store the scores for each arc in the index.\nFrom your benchmarks, do you have a sense of how much heap is required (as a function of number of vectors) by this class to construct the ANN neighbors?\nAfter the one vector field for one segment is written, this class is GC'able?  So if I have three vector fields, the heap will only have one HnswGraph living at a time?", "url": "https://github.com/apache/lucene-solr/pull/2022#discussion_r515092107", "createdAt": "2020-10-30T13:22:20Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/util/hnsw/HnswGraph.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.util.hnsw;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+import org.apache.lucene.index.KnnGraphValues;\n+import org.apache.lucene.index.VectorValues;\n+\n+import static org.apache.lucene.search.DocIdSetIterator.NO_MORE_DOCS;\n+import static org.apache.lucene.util.VectorUtil.dotProduct;\n+import static org.apache.lucene.util.VectorUtil.squareDistance;\n+\n+/**\n+ * Navigable Small-world graph. Provides efficient approximate nearest neighbor\n+ * search for high dimensional vectors.  See <a href=\"https://doi.org/10.1016/j.is.2013.10.006\">Approximate nearest\n+ * neighbor algorithm based on navigable small world graphs [2014]</a> and <a\n+ * href=\"https://arxiv.org/abs/1603.09320\">this paper [2018]</a> for details.\n+ *\n+ * This implementation is actually more like the one in the same authors' earlier 2014 paper in that\n+ * there is no hierarchy (just one layer), and no fanout restriction on the graph: nodes are allowed to accumulate\n+ * an unbounded number of outbound links, but it does incorporate some of the innovations of the later paper, like\n+ * using a priority queue to perform a beam search while traversing the graph. The nomenclature is a bit different\n+ * here from what's used in those papers:\n+ *\n+ * <h3>Hyperparameters</h3>\n+ * <ul>\n+ *   <li><code>numSeed</code> is the equivalent of <code>m</code> in the 2012 paper; it controls the number of random entry points to sample.</li>\n+ *   <li><code>beamWidth</code> in {@link HnswGraphBuilder} has the same meaning as <code>efConst</code> in the 2016 paper. It is the number of\n+ *   nearest neighbor candidates to track while searching the graph for each newly inserted node.</li>\n+ *   <li><code>maxConn</code> has the same meaning as <code>M</code> in the later paper; it controls how many of the <code>efConst</code> neighbors are\n+ *   connected to the new node</li>\n+ *   <li><code>fanout</code> the fanout parameter of {@link VectorValues#search(float[], int, int)}\n+ *   is used to control the values of <code>numSeed</code> and <code>topK</code> that are passed to this API.\n+ *   Thus <code>fanout</code> is like a combination of <code>ef</code> (search beam width) from the 2016 paper and <code>m</code> from the 2014 paper.\n+ *   </li>\n+ * </ul>\n+ *\n+ * <p>Note: The graph may be searched by multiple threads concurrently, but updates are not thread-safe. Also note: there is no notion of\n+ * deletions. Document searching built on top of this must do its own deletion-filtering.</p>\n+ */\n+public final class HnswGraph {\n+\n+  // each entry lists the neighbors of a node, in node order\n+  private final List<List<Neighbor>> graph;\n+\n+  HnswGraph() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c10b88a38b25ca52e87be009ed8011ccc1b94683"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAwNDczMQ==", "bodyText": "Right, we do not instantiate this class at search time, although we do use the static search method, which only relies on the abstract vector and graph values. Heap usage is quite high! It will scale with graph fanout * number of vectors. For each node, we store a PriorityQueue of Neighbor objects; each Neighbor has an int node id and a float score. I think for 1M vectors, with fanout of 64, we'll see around 1.5G heap usage, with lots of tiny objects on the heap during flush/merge. This can be dramatically reduced by eliminating the Neighbor objects in favor of parallel arrays, and the priority queues can then store int ordinals rather than object pointers, but I think that can be a fast follow?", "url": "https://github.com/apache/lucene-solr/pull/2022#discussion_r519004731", "createdAt": "2020-11-06T21:05:16Z", "author": {"login": "msokolov"}, "path": "lucene/core/src/java/org/apache/lucene/util/hnsw/HnswGraph.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.util.hnsw;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+import org.apache.lucene.index.KnnGraphValues;\n+import org.apache.lucene.index.VectorValues;\n+\n+import static org.apache.lucene.search.DocIdSetIterator.NO_MORE_DOCS;\n+import static org.apache.lucene.util.VectorUtil.dotProduct;\n+import static org.apache.lucene.util.VectorUtil.squareDistance;\n+\n+/**\n+ * Navigable Small-world graph. Provides efficient approximate nearest neighbor\n+ * search for high dimensional vectors.  See <a href=\"https://doi.org/10.1016/j.is.2013.10.006\">Approximate nearest\n+ * neighbor algorithm based on navigable small world graphs [2014]</a> and <a\n+ * href=\"https://arxiv.org/abs/1603.09320\">this paper [2018]</a> for details.\n+ *\n+ * This implementation is actually more like the one in the same authors' earlier 2014 paper in that\n+ * there is no hierarchy (just one layer), and no fanout restriction on the graph: nodes are allowed to accumulate\n+ * an unbounded number of outbound links, but it does incorporate some of the innovations of the later paper, like\n+ * using a priority queue to perform a beam search while traversing the graph. The nomenclature is a bit different\n+ * here from what's used in those papers:\n+ *\n+ * <h3>Hyperparameters</h3>\n+ * <ul>\n+ *   <li><code>numSeed</code> is the equivalent of <code>m</code> in the 2012 paper; it controls the number of random entry points to sample.</li>\n+ *   <li><code>beamWidth</code> in {@link HnswGraphBuilder} has the same meaning as <code>efConst</code> in the 2016 paper. It is the number of\n+ *   nearest neighbor candidates to track while searching the graph for each newly inserted node.</li>\n+ *   <li><code>maxConn</code> has the same meaning as <code>M</code> in the later paper; it controls how many of the <code>efConst</code> neighbors are\n+ *   connected to the new node</li>\n+ *   <li><code>fanout</code> the fanout parameter of {@link VectorValues#search(float[], int, int)}\n+ *   is used to control the values of <code>numSeed</code> and <code>topK</code> that are passed to this API.\n+ *   Thus <code>fanout</code> is like a combination of <code>ef</code> (search beam width) from the 2016 paper and <code>m</code> from the 2014 paper.\n+ *   </li>\n+ * </ul>\n+ *\n+ * <p>Note: The graph may be searched by multiple threads concurrently, but updates are not thread-safe. Also note: there is no notion of\n+ * deletions. Document searching built on top of this must do its own deletion-filtering.</p>\n+ */\n+public final class HnswGraph {\n+\n+  // each entry lists the neighbors of a node, in node order\n+  private final List<List<Neighbor>> graph;\n+\n+  HnswGraph() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA5MjEwNw=="}, "originalCommit": {"oid": "c10b88a38b25ca52e87be009ed8011ccc1b94683"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg4MTk3MA==", "bodyText": "Yeah, +1 for fast follow!", "url": "https://github.com/apache/lucene-solr/pull/2022#discussion_r519881970", "createdAt": "2020-11-09T15:05:50Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/util/hnsw/HnswGraph.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.util.hnsw;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+import org.apache.lucene.index.KnnGraphValues;\n+import org.apache.lucene.index.VectorValues;\n+\n+import static org.apache.lucene.search.DocIdSetIterator.NO_MORE_DOCS;\n+import static org.apache.lucene.util.VectorUtil.dotProduct;\n+import static org.apache.lucene.util.VectorUtil.squareDistance;\n+\n+/**\n+ * Navigable Small-world graph. Provides efficient approximate nearest neighbor\n+ * search for high dimensional vectors.  See <a href=\"https://doi.org/10.1016/j.is.2013.10.006\">Approximate nearest\n+ * neighbor algorithm based on navigable small world graphs [2014]</a> and <a\n+ * href=\"https://arxiv.org/abs/1603.09320\">this paper [2018]</a> for details.\n+ *\n+ * This implementation is actually more like the one in the same authors' earlier 2014 paper in that\n+ * there is no hierarchy (just one layer), and no fanout restriction on the graph: nodes are allowed to accumulate\n+ * an unbounded number of outbound links, but it does incorporate some of the innovations of the later paper, like\n+ * using a priority queue to perform a beam search while traversing the graph. The nomenclature is a bit different\n+ * here from what's used in those papers:\n+ *\n+ * <h3>Hyperparameters</h3>\n+ * <ul>\n+ *   <li><code>numSeed</code> is the equivalent of <code>m</code> in the 2012 paper; it controls the number of random entry points to sample.</li>\n+ *   <li><code>beamWidth</code> in {@link HnswGraphBuilder} has the same meaning as <code>efConst</code> in the 2016 paper. It is the number of\n+ *   nearest neighbor candidates to track while searching the graph for each newly inserted node.</li>\n+ *   <li><code>maxConn</code> has the same meaning as <code>M</code> in the later paper; it controls how many of the <code>efConst</code> neighbors are\n+ *   connected to the new node</li>\n+ *   <li><code>fanout</code> the fanout parameter of {@link VectorValues#search(float[], int, int)}\n+ *   is used to control the values of <code>numSeed</code> and <code>topK</code> that are passed to this API.\n+ *   Thus <code>fanout</code> is like a combination of <code>ef</code> (search beam width) from the 2016 paper and <code>m</code> from the 2014 paper.\n+ *   </li>\n+ * </ul>\n+ *\n+ * <p>Note: The graph may be searched by multiple threads concurrently, but updates are not thread-safe. Also note: there is no notion of\n+ * deletions. Document searching built on top of this must do its own deletion-filtering.</p>\n+ */\n+public final class HnswGraph {\n+\n+  // each entry lists the neighbors of a node, in node order\n+  private final List<List<Neighbor>> graph;\n+\n+  HnswGraph() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA5MjEwNw=="}, "originalCommit": {"oid": "c10b88a38b25ca52e87be009ed8011ccc1b94683"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzQyMjI0OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/util/hnsw/HnswGraph.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzoyNDo0OFrOHrO0tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMTowOTo1OVrOHu9pbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA5MzY4Nw==", "bodyText": "An arc is the node id (compact ordinal) for the destination of the arc, right?  I.e. the neighbor nodes.\nMaybe rename arcs to neighborNodes?", "url": "https://github.com/apache/lucene-solr/pull/2022#discussion_r515093687", "createdAt": "2020-10-30T13:24:48Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/util/hnsw/HnswGraph.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.util.hnsw;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+import org.apache.lucene.index.KnnGraphValues;\n+import org.apache.lucene.index.VectorValues;\n+\n+import static org.apache.lucene.search.DocIdSetIterator.NO_MORE_DOCS;\n+import static org.apache.lucene.util.VectorUtil.dotProduct;\n+import static org.apache.lucene.util.VectorUtil.squareDistance;\n+\n+/**\n+ * Navigable Small-world graph. Provides efficient approximate nearest neighbor\n+ * search for high dimensional vectors.  See <a href=\"https://doi.org/10.1016/j.is.2013.10.006\">Approximate nearest\n+ * neighbor algorithm based on navigable small world graphs [2014]</a> and <a\n+ * href=\"https://arxiv.org/abs/1603.09320\">this paper [2018]</a> for details.\n+ *\n+ * This implementation is actually more like the one in the same authors' earlier 2014 paper in that\n+ * there is no hierarchy (just one layer), and no fanout restriction on the graph: nodes are allowed to accumulate\n+ * an unbounded number of outbound links, but it does incorporate some of the innovations of the later paper, like\n+ * using a priority queue to perform a beam search while traversing the graph. The nomenclature is a bit different\n+ * here from what's used in those papers:\n+ *\n+ * <h3>Hyperparameters</h3>\n+ * <ul>\n+ *   <li><code>numSeed</code> is the equivalent of <code>m</code> in the 2012 paper; it controls the number of random entry points to sample.</li>\n+ *   <li><code>beamWidth</code> in {@link HnswGraphBuilder} has the same meaning as <code>efConst</code> in the 2016 paper. It is the number of\n+ *   nearest neighbor candidates to track while searching the graph for each newly inserted node.</li>\n+ *   <li><code>maxConn</code> has the same meaning as <code>M</code> in the later paper; it controls how many of the <code>efConst</code> neighbors are\n+ *   connected to the new node</li>\n+ *   <li><code>fanout</code> the fanout parameter of {@link VectorValues#search(float[], int, int)}\n+ *   is used to control the values of <code>numSeed</code> and <code>topK</code> that are passed to this API.\n+ *   Thus <code>fanout</code> is like a combination of <code>ef</code> (search beam width) from the 2016 paper and <code>m</code> from the 2014 paper.\n+ *   </li>\n+ * </ul>\n+ *\n+ * <p>Note: The graph may be searched by multiple threads concurrently, but updates are not thread-safe. Also note: there is no notion of\n+ * deletions. Document searching built on top of this must do its own deletion-filtering.</p>\n+ */\n+public final class HnswGraph {\n+\n+  // each entry lists the neighbors of a node, in node order\n+  private final List<List<Neighbor>> graph;\n+\n+  HnswGraph() {\n+    graph = new ArrayList<>();\n+    graph.add(new ArrayList<>());\n+  }\n+\n+  /**\n+   * Searches for the nearest neighbors of a query vector.\n+   * @param query search query vector\n+   * @param topK the number of nodes to be returned\n+   * @param numSeed the number of random entry points to sample\n+   * @param vectors vector values\n+   * @param graphValues the graph values. May represent the entire graph, or a level in a hierarchical graph.\n+   * @param random a source of randomness, used for generating entry points to the graph\n+   * @return a priority queue holding the neighbors found\n+   */\n+  public static Neighbors search(float[] query, int topK, int numSeed, VectorValues.RandomAccess vectors, KnnGraphValues graphValues,\n+                                 Random random) throws IOException {\n+    VectorValues.SearchStrategy searchStrategy = vectors.searchStrategy();\n+    boolean scoreReversed = isReversed(searchStrategy);\n+    TreeSet<Neighbor> candidates;\n+    if (scoreReversed) {\n+      candidates = new TreeSet<>(Comparator.reverseOrder());\n+    } else {\n+      candidates = new TreeSet<>();\n+    }\n+    int size = vectors.size();\n+    for (int i = 0; i < numSeed && i < size; i++) {\n+      int entryPoint = random.nextInt(size);\n+      candidates.add(new Neighbor(entryPoint, compare(query, vectors.vectorValue(entryPoint), searchStrategy)));\n+    }\n+    // set of ordinals that have been visited by search on this layer, used to avoid backtracking\n+    //IntHashSet visited = new IntHashSet();\n+    Set<Integer> visited = new HashSet<>();\n+    // TODO: use PriorityQueue's sentinel optimization\n+    Neighbors results = Neighbors.create(topK, scoreReversed);\n+    for (Neighbor c :candidates) {\n+      visited.add(c.node);\n+      results.insertWithOverflow(c);\n+    }\n+    // Set the bound to the worst current result and below reject any newly-generated candidates failing\n+    // to exceed this bound\n+    BoundsChecker bound = BoundsChecker.create(scoreReversed);\n+    bound.bound = results.top().score;\n+    while (candidates.size() > 0) {\n+      // get the best candidate (closest or best scoring)\n+      Neighbor c = candidates.pollLast();\n+      if (results.size() >= topK) {\n+        if (bound.check(c.score)) {\n+          break;\n+        }\n+      }\n+      graphValues.seek(c.node);\n+      int friendOrd;\n+      while ((friendOrd = graphValues.nextArc()) != NO_MORE_DOCS) {\n+        if (visited.contains(friendOrd)) {\n+          continue;\n+        }\n+        visited.add(friendOrd);\n+        float score = compare(query, vectors.vectorValue(friendOrd), searchStrategy);\n+        if (results.size() < topK || bound.check(score) == false) {\n+          Neighbor n = new Neighbor(friendOrd, score);\n+          candidates.add(n);\n+          results.insertWithOverflow(n);\n+          bound.bound = results.top().score;\n+        }\n+      }\n+    }\n+    return results;\n+  }\n+\n+  /**\n+   * Returns the nodes connected to the given node by its outgoing arcs.\n+   * @param node the node whose friends are returned\n+   */\n+  public int[] getNeighbors(int node) {\n+    return graph.get(node).stream().mapToInt(Neighbor::node).toArray();\n+  }\n+\n+  /** Connects two nodes symmetrically.\n+   * node1 must be less than node2 and must already have been inserted to the graph */\n+  void connectNodes(int node1, int node2, float score, int maxConnections) {\n+    assert node1 >= 0 && node2 >= 0;\n+    assert node1 < node2;\n+    List<Neighbor> arcs1 = graph.get(node1);\n+    assert arcs1 != null;\n+    assert arcs1.isEmpty() || arcs1.get(arcs1.size() - 1).node < node2;\n+    arcs1.add(new Neighbor(node2, score));\n+    List<Neighbor> arcs2;\n+    if (node2 < graph.size()) {\n+      arcs2 = graph.get(node2);\n+      assert arcs2.get(arcs2.size() - 1).node < node1;\n+    } else {\n+      assert node2 == graph.size();\n+      arcs2 = new ArrayList<>();\n+      graph.add(arcs2);\n+    }\n+    arcs2.add(new Neighbor(node1, score));\n+\n+    // ensure #arcs <= maxConnections\n+    /*\n+    if (maxConnections > 0) {\n+      shrink(node2, maxConnections);\n+    }\n+     */\n+  }\n+\n+  /**\n+   * Calculates a similarity score between the two vectors with a specified function.\n+   * @param v1 a vector\n+   * @param v2 another vector, of the same dimension\n+   * @return the value of the strategy's score function applied to the two vectors\n+   */\n+  public static float compare(float[] v1, float[] v2, VectorValues.SearchStrategy searchStrategy) {\n+    switch (searchStrategy) {\n+      case EUCLIDEAN_HNSW:\n+        return squareDistance(v1, v2);\n+      case DOT_PRODUCT_HNSW:\n+        return dotProduct(v1, v2);\n+      default:\n+        throw new IllegalStateException(\"invalid search strategy: \" + searchStrategy);\n+    }\n+  }\n+\n+  /**\n+   * Return whether the given strategy returns lower values for nearer vectors\n+   * @param searchStrategy the strategy\n+   */\n+  public static boolean isReversed(VectorValues.SearchStrategy searchStrategy) {\n+    switch (searchStrategy) {\n+      case EUCLIDEAN_HNSW:\n+        return true;\n+      case DOT_PRODUCT_HNSW:\n+        return false;\n+      default:\n+        throw new IllegalStateException(\"invalid search strategy: \" + searchStrategy);\n+    }\n+  }\n+\n+  KnnGraphValues getGraphValues() {\n+    return new HnswGraphValues();\n+  }\n+\n+  /**\n+   * Present this graph as KnnGraphValues, used for searching while inserting new nodes.\n+   */\n+  private class HnswGraphValues extends KnnGraphValues {\n+\n+    private int arcUpTo;\n+    private int[] arcs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c10b88a38b25ca52e87be009ed8011ccc1b94683"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAwNjU3Mg==", "bodyText": "sure, neighborNodes it is", "url": "https://github.com/apache/lucene-solr/pull/2022#discussion_r519006572", "createdAt": "2020-11-06T21:09:59Z", "author": {"login": "msokolov"}, "path": "lucene/core/src/java/org/apache/lucene/util/hnsw/HnswGraph.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.util.hnsw;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+import org.apache.lucene.index.KnnGraphValues;\n+import org.apache.lucene.index.VectorValues;\n+\n+import static org.apache.lucene.search.DocIdSetIterator.NO_MORE_DOCS;\n+import static org.apache.lucene.util.VectorUtil.dotProduct;\n+import static org.apache.lucene.util.VectorUtil.squareDistance;\n+\n+/**\n+ * Navigable Small-world graph. Provides efficient approximate nearest neighbor\n+ * search for high dimensional vectors.  See <a href=\"https://doi.org/10.1016/j.is.2013.10.006\">Approximate nearest\n+ * neighbor algorithm based on navigable small world graphs [2014]</a> and <a\n+ * href=\"https://arxiv.org/abs/1603.09320\">this paper [2018]</a> for details.\n+ *\n+ * This implementation is actually more like the one in the same authors' earlier 2014 paper in that\n+ * there is no hierarchy (just one layer), and no fanout restriction on the graph: nodes are allowed to accumulate\n+ * an unbounded number of outbound links, but it does incorporate some of the innovations of the later paper, like\n+ * using a priority queue to perform a beam search while traversing the graph. The nomenclature is a bit different\n+ * here from what's used in those papers:\n+ *\n+ * <h3>Hyperparameters</h3>\n+ * <ul>\n+ *   <li><code>numSeed</code> is the equivalent of <code>m</code> in the 2012 paper; it controls the number of random entry points to sample.</li>\n+ *   <li><code>beamWidth</code> in {@link HnswGraphBuilder} has the same meaning as <code>efConst</code> in the 2016 paper. It is the number of\n+ *   nearest neighbor candidates to track while searching the graph for each newly inserted node.</li>\n+ *   <li><code>maxConn</code> has the same meaning as <code>M</code> in the later paper; it controls how many of the <code>efConst</code> neighbors are\n+ *   connected to the new node</li>\n+ *   <li><code>fanout</code> the fanout parameter of {@link VectorValues#search(float[], int, int)}\n+ *   is used to control the values of <code>numSeed</code> and <code>topK</code> that are passed to this API.\n+ *   Thus <code>fanout</code> is like a combination of <code>ef</code> (search beam width) from the 2016 paper and <code>m</code> from the 2014 paper.\n+ *   </li>\n+ * </ul>\n+ *\n+ * <p>Note: The graph may be searched by multiple threads concurrently, but updates are not thread-safe. Also note: there is no notion of\n+ * deletions. Document searching built on top of this must do its own deletion-filtering.</p>\n+ */\n+public final class HnswGraph {\n+\n+  // each entry lists the neighbors of a node, in node order\n+  private final List<List<Neighbor>> graph;\n+\n+  HnswGraph() {\n+    graph = new ArrayList<>();\n+    graph.add(new ArrayList<>());\n+  }\n+\n+  /**\n+   * Searches for the nearest neighbors of a query vector.\n+   * @param query search query vector\n+   * @param topK the number of nodes to be returned\n+   * @param numSeed the number of random entry points to sample\n+   * @param vectors vector values\n+   * @param graphValues the graph values. May represent the entire graph, or a level in a hierarchical graph.\n+   * @param random a source of randomness, used for generating entry points to the graph\n+   * @return a priority queue holding the neighbors found\n+   */\n+  public static Neighbors search(float[] query, int topK, int numSeed, VectorValues.RandomAccess vectors, KnnGraphValues graphValues,\n+                                 Random random) throws IOException {\n+    VectorValues.SearchStrategy searchStrategy = vectors.searchStrategy();\n+    boolean scoreReversed = isReversed(searchStrategy);\n+    TreeSet<Neighbor> candidates;\n+    if (scoreReversed) {\n+      candidates = new TreeSet<>(Comparator.reverseOrder());\n+    } else {\n+      candidates = new TreeSet<>();\n+    }\n+    int size = vectors.size();\n+    for (int i = 0; i < numSeed && i < size; i++) {\n+      int entryPoint = random.nextInt(size);\n+      candidates.add(new Neighbor(entryPoint, compare(query, vectors.vectorValue(entryPoint), searchStrategy)));\n+    }\n+    // set of ordinals that have been visited by search on this layer, used to avoid backtracking\n+    //IntHashSet visited = new IntHashSet();\n+    Set<Integer> visited = new HashSet<>();\n+    // TODO: use PriorityQueue's sentinel optimization\n+    Neighbors results = Neighbors.create(topK, scoreReversed);\n+    for (Neighbor c :candidates) {\n+      visited.add(c.node);\n+      results.insertWithOverflow(c);\n+    }\n+    // Set the bound to the worst current result and below reject any newly-generated candidates failing\n+    // to exceed this bound\n+    BoundsChecker bound = BoundsChecker.create(scoreReversed);\n+    bound.bound = results.top().score;\n+    while (candidates.size() > 0) {\n+      // get the best candidate (closest or best scoring)\n+      Neighbor c = candidates.pollLast();\n+      if (results.size() >= topK) {\n+        if (bound.check(c.score)) {\n+          break;\n+        }\n+      }\n+      graphValues.seek(c.node);\n+      int friendOrd;\n+      while ((friendOrd = graphValues.nextArc()) != NO_MORE_DOCS) {\n+        if (visited.contains(friendOrd)) {\n+          continue;\n+        }\n+        visited.add(friendOrd);\n+        float score = compare(query, vectors.vectorValue(friendOrd), searchStrategy);\n+        if (results.size() < topK || bound.check(score) == false) {\n+          Neighbor n = new Neighbor(friendOrd, score);\n+          candidates.add(n);\n+          results.insertWithOverflow(n);\n+          bound.bound = results.top().score;\n+        }\n+      }\n+    }\n+    return results;\n+  }\n+\n+  /**\n+   * Returns the nodes connected to the given node by its outgoing arcs.\n+   * @param node the node whose friends are returned\n+   */\n+  public int[] getNeighbors(int node) {\n+    return graph.get(node).stream().mapToInt(Neighbor::node).toArray();\n+  }\n+\n+  /** Connects two nodes symmetrically.\n+   * node1 must be less than node2 and must already have been inserted to the graph */\n+  void connectNodes(int node1, int node2, float score, int maxConnections) {\n+    assert node1 >= 0 && node2 >= 0;\n+    assert node1 < node2;\n+    List<Neighbor> arcs1 = graph.get(node1);\n+    assert arcs1 != null;\n+    assert arcs1.isEmpty() || arcs1.get(arcs1.size() - 1).node < node2;\n+    arcs1.add(new Neighbor(node2, score));\n+    List<Neighbor> arcs2;\n+    if (node2 < graph.size()) {\n+      arcs2 = graph.get(node2);\n+      assert arcs2.get(arcs2.size() - 1).node < node1;\n+    } else {\n+      assert node2 == graph.size();\n+      arcs2 = new ArrayList<>();\n+      graph.add(arcs2);\n+    }\n+    arcs2.add(new Neighbor(node1, score));\n+\n+    // ensure #arcs <= maxConnections\n+    /*\n+    if (maxConnections > 0) {\n+      shrink(node2, maxConnections);\n+    }\n+     */\n+  }\n+\n+  /**\n+   * Calculates a similarity score between the two vectors with a specified function.\n+   * @param v1 a vector\n+   * @param v2 another vector, of the same dimension\n+   * @return the value of the strategy's score function applied to the two vectors\n+   */\n+  public static float compare(float[] v1, float[] v2, VectorValues.SearchStrategy searchStrategy) {\n+    switch (searchStrategy) {\n+      case EUCLIDEAN_HNSW:\n+        return squareDistance(v1, v2);\n+      case DOT_PRODUCT_HNSW:\n+        return dotProduct(v1, v2);\n+      default:\n+        throw new IllegalStateException(\"invalid search strategy: \" + searchStrategy);\n+    }\n+  }\n+\n+  /**\n+   * Return whether the given strategy returns lower values for nearer vectors\n+   * @param searchStrategy the strategy\n+   */\n+  public static boolean isReversed(VectorValues.SearchStrategy searchStrategy) {\n+    switch (searchStrategy) {\n+      case EUCLIDEAN_HNSW:\n+        return true;\n+      case DOT_PRODUCT_HNSW:\n+        return false;\n+      default:\n+        throw new IllegalStateException(\"invalid search strategy: \" + searchStrategy);\n+    }\n+  }\n+\n+  KnnGraphValues getGraphValues() {\n+    return new HnswGraphValues();\n+  }\n+\n+  /**\n+   * Present this graph as KnnGraphValues, used for searching while inserting new nodes.\n+   */\n+  private class HnswGraphValues extends KnnGraphValues {\n+\n+    private int arcUpTo;\n+    private int[] arcs;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA5MzY4Nw=="}, "originalCommit": {"oid": "c10b88a38b25ca52e87be009ed8011ccc1b94683"}, "originalPosition": 217}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzQ0NTUzOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/util/hnsw/BoundsChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzozMDoxOVrOHrPDEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMToxMTo0MFrOHu9r0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA5NzM2MQ==", "bodyText": "At first I thought we should use Float.MIN_VALUE here, but that is not right, since it is the smallest positive float.\nBut then I worried whether negating Float.MAX_VALUE produces a valid float (e.g. you cannot safely negate Integer.MIN_VALUE).\nMaybe just use Float.NEGATIVE_INFINITY here and Float.POSITIVE_INFINITY for Min?", "url": "https://github.com/apache/lucene-solr/pull/2022#discussion_r515097361", "createdAt": "2020-10-30T13:30:19Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/util/hnsw/BoundsChecker.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.util.hnsw;\n+\n+abstract class BoundsChecker {\n+\n+    float bound;\n+\n+    /**\n+     * Update the bound if sample is better\n+     */\n+    abstract void update(float sample);\n+\n+    /**\n+     * Return whether the sample exceeds (is worse than) the bound\n+     */\n+    abstract boolean check(float sample);\n+\n+    static BoundsChecker create(boolean reversed) {\n+        if (reversed) {\n+            return new Min();\n+        } else {\n+            return new Max();\n+        }\n+    }\n+\n+    static class Max extends BoundsChecker {\n+        Max() {\n+            bound = -Float.MAX_VALUE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c10b88a38b25ca52e87be009ed8011ccc1b94683"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAwNzE4Nw==", "bodyText": "Well, -Float.MAX_VALUE is reliable since the sign bit is separate from all the rest of the bits, but Float.NEGATIVE_INFINITY is less than that, so if we use it then any finite float will be a valid score, so +1 for that, and for +infinity as well", "url": "https://github.com/apache/lucene-solr/pull/2022#discussion_r519007187", "createdAt": "2020-11-06T21:11:40Z", "author": {"login": "msokolov"}, "path": "lucene/core/src/java/org/apache/lucene/util/hnsw/BoundsChecker.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.util.hnsw;\n+\n+abstract class BoundsChecker {\n+\n+    float bound;\n+\n+    /**\n+     * Update the bound if sample is better\n+     */\n+    abstract void update(float sample);\n+\n+    /**\n+     * Return whether the sample exceeds (is worse than) the bound\n+     */\n+    abstract boolean check(float sample);\n+\n+    static BoundsChecker create(boolean reversed) {\n+        if (reversed) {\n+            return new Min();\n+        } else {\n+            return new Max();\n+        }\n+    }\n+\n+    static class Max extends BoundsChecker {\n+        Max() {\n+            bound = -Float.MAX_VALUE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA5NzM2MQ=="}, "originalCommit": {"oid": "c10b88a38b25ca52e87be009ed8011ccc1b94683"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzQ1NjUwOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene90/Lucene90VectorFormat.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzozMzoxMVrOHrPJ8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzozMzoxMVrOHrPJ8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA5OTEyMw==", "bodyText": "Remove extra blank line?", "url": "https://github.com/apache/lucene-solr/pull/2022#discussion_r515099123", "createdAt": "2020-10-30T13:33:11Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene90/Lucene90VectorFormat.java", "diffHunk": "@@ -54,4 +56,10 @@ public VectorReader fieldsReader(SegmentReadState state) throws IOException {\n     return new Lucene90VectorReader(state);\n   }\n \n+  static boolean isHnswStrategy(VectorValues.SearchStrategy searchStrategy) {\n+    return searchStrategy == VectorValues.SearchStrategy.DOT_PRODUCT_HNSW ||\n+        searchStrategy == VectorValues.SearchStrategy.EUCLIDEAN_HNSW;\n+  }\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c10b88a38b25ca52e87be009ed8011ccc1b94683"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzQ2MTI4OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene90/Lucene90VectorFormat.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzozNDoxNFrOHrPM-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzozNDoxNFrOHrPM-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA5OTg5OQ==", "bodyText": "Hmm, why no longer public?  Users making their own Codec might want to use this constructor I think?", "url": "https://github.com/apache/lucene-solr/pull/2022#discussion_r515099899", "createdAt": "2020-10-30T13:34:14Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene90/Lucene90VectorFormat.java", "diffHunk": "@@ -33,15 +34,16 @@\n \n   static final String META_CODEC_NAME = \"Lucene90VectorFormatMeta\";\n   static final String VECTOR_DATA_CODEC_NAME = \"Lucene90VectorFormatData\";\n-\n+  static final String VECTOR_INDEX_CODEC_NAME = \"Lucene90VectorFormatIndex\";\n   static final String META_EXTENSION = \"vem\";\n   static final String VECTOR_DATA_EXTENSION = \"vec\";\n+  static final String VECTOR_INDEX_EXTENSION = \"vex\";\n \n   static final int VERSION_START = 0;\n   static final int VERSION_CURRENT = VERSION_START;\n \n   /** Sole constructor */\n-  public Lucene90VectorFormat() {\n+  Lucene90VectorFormat() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c10b88a38b25ca52e87be009ed8011ccc1b94683"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzQ2NzY0OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene90/Lucene90VectorFormat.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzozNToxMVrOHrPRBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzozNToxMVrOHrPRBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTEwMDkzMw==", "bodyText": "Hmm, remove the TODO in here?\nAdd @lucene.experimental?", "url": "https://github.com/apache/lucene-solr/pull/2022#discussion_r515100933", "createdAt": "2020-10-30T13:35:11Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene90/Lucene90VectorFormat.java", "diffHunk": "@@ -24,6 +24,7 @@\n import org.apache.lucene.codecs.VectorWriter;\n import org.apache.lucene.index.SegmentReadState;\n import org.apache.lucene.index.SegmentWriteState;\n+import org.apache.lucene.index.VectorValues;\n \n /**\n  * Lucene 9.0 vector format, which encodes dense numeric vector values.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c10b88a38b25ca52e87be009ed8011ccc1b94683"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzQ4NDM1OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/KnnGraphValues.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzozOToxN1rOHrPbVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzozOToxN1rOHrPbVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTEwMzU3NA==", "bodyText": "s/friends/neighbors?", "url": "https://github.com/apache/lucene-solr/pull/2022#discussion_r515103574", "createdAt": "2020-10-30T13:39:17Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/KnnGraphValues.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.index;\n+\n+import java.io.IOException;\n+\n+import static org.apache.lucene.search.DocIdSetIterator.NO_MORE_DOCS;\n+\n+/**\n+ * Access to per-document friends lists in a (hierarchical) knn search graph.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c10b88a38b25ca52e87be009ed8011ccc1b94683"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzQ4Njc2OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/KnnGraphValues.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzozOTo1MVrOHrPc4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzozOTo1MVrOHrPc4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTEwMzk2OQ==", "bodyText": "Remove extra space before ;?", "url": "https://github.com/apache/lucene-solr/pull/2022#discussion_r515103969", "createdAt": "2020-10-30T13:39:51Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/KnnGraphValues.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.index;\n+\n+import java.io.IOException;\n+\n+import static org.apache.lucene.search.DocIdSetIterator.NO_MORE_DOCS;\n+\n+/**\n+ * Access to per-document friends lists in a (hierarchical) knn search graph.\n+ * TODO: replace with SortedNumericDocValues??\n+ */\n+public abstract class KnnGraphValues {\n+\n+  /** Sole constructor */\n+  protected KnnGraphValues() {}\n+\n+  /** Move the pointer to exactly {@code target}, the id of a node in the graph.\n+   *  After this method returns, call {@link #nextArc()} to return successive (ordered) connected node ordinals.\n+   * @param target must be a valid node in the graph, ie. &ge; 0 and &lt; {@link VectorValues#size()}.\n+   */\n+  public abstract void seek(int target) throws IOException;\n+\n+  /**\n+   * Iterates over the neighbor list. It is illegal to call this method after it returns\n+   * NO_MORE_DOCS without calling {@link #seek(int)}, which resets the iterator.\n+   * @return a node ordinal in the graph, or NO_MORE_DOCS if the iteration is complete.\n+   */\n+  public abstract int nextArc() throws IOException ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c10b88a38b25ca52e87be009ed8011ccc1b94683"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzQ4ODg0OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/KnnGraphValues.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzo0MDoxOFrOHrPePg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzo0MDoxOFrOHrPePg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTEwNDMxOA==", "bodyText": "Add @lucene.experimental?", "url": "https://github.com/apache/lucene-solr/pull/2022#discussion_r515104318", "createdAt": "2020-10-30T13:40:18Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/KnnGraphValues.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.index;\n+\n+import java.io.IOException;\n+\n+import static org.apache.lucene.search.DocIdSetIterator.NO_MORE_DOCS;\n+\n+/**\n+ * Access to per-document friends lists in a (hierarchical) knn search graph.\n+ * TODO: replace with SortedNumericDocValues??\n+ */\n+public abstract class KnnGraphValues {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c10b88a38b25ca52e87be009ed8011ccc1b94683"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzQ5NDA5OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/util/hnsw/HnswGraph.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzo0MTozMFrOHrPhng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDo1NDo1N1rOHu9RAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTEwNTE4Mg==", "bodyText": "This is expected to normally be used just during indexing?  Maybe explain that in the javadoc?  I.e. at search time, users should use the other search method that pulls neighbors from the index and recurses.", "url": "https://github.com/apache/lucene-solr/pull/2022#discussion_r515105182", "createdAt": "2020-10-30T13:41:30Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/util/hnsw/HnswGraph.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.util.hnsw;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+import org.apache.lucene.index.KnnGraphValues;\n+import org.apache.lucene.index.VectorValues;\n+\n+import static org.apache.lucene.search.DocIdSetIterator.NO_MORE_DOCS;\n+import static org.apache.lucene.util.VectorUtil.dotProduct;\n+import static org.apache.lucene.util.VectorUtil.squareDistance;\n+\n+/**\n+ * Navigable Small-world graph. Provides efficient approximate nearest neighbor\n+ * search for high dimensional vectors.  See <a href=\"https://doi.org/10.1016/j.is.2013.10.006\">Approximate nearest\n+ * neighbor algorithm based on navigable small world graphs [2014]</a> and <a\n+ * href=\"https://arxiv.org/abs/1603.09320\">this paper [2018]</a> for details.\n+ *\n+ * This implementation is actually more like the one in the same authors' earlier 2014 paper in that\n+ * there is no hierarchy (just one layer), and no fanout restriction on the graph: nodes are allowed to accumulate\n+ * an unbounded number of outbound links, but it does incorporate some of the innovations of the later paper, like\n+ * using a priority queue to perform a beam search while traversing the graph. The nomenclature is a bit different\n+ * here from what's used in those papers:\n+ *\n+ * <h3>Hyperparameters</h3>\n+ * <ul>\n+ *   <li><code>numSeed</code> is the equivalent of <code>m</code> in the 2012 paper; it controls the number of random entry points to sample.</li>\n+ *   <li><code>beamWidth</code> in {@link HnswGraphBuilder} has the same meaning as <code>efConst</code> in the 2016 paper. It is the number of\n+ *   nearest neighbor candidates to track while searching the graph for each newly inserted node.</li>\n+ *   <li><code>maxConn</code> has the same meaning as <code>M</code> in the later paper; it controls how many of the <code>efConst</code> neighbors are\n+ *   connected to the new node</li>\n+ *   <li><code>fanout</code> the fanout parameter of {@link VectorValues#search(float[], int, int)}\n+ *   is used to control the values of <code>numSeed</code> and <code>topK</code> that are passed to this API.\n+ *   Thus <code>fanout</code> is like a combination of <code>ef</code> (search beam width) from the 2016 paper and <code>m</code> from the 2014 paper.\n+ *   </li>\n+ * </ul>\n+ *\n+ * <p>Note: The graph may be searched by multiple threads concurrently, but updates are not thread-safe. Also note: there is no notion of\n+ * deletions. Document searching built on top of this must do its own deletion-filtering.</p>\n+ */\n+public final class HnswGraph {\n+\n+  // each entry lists the neighbors of a node, in node order\n+  private final List<List<Neighbor>> graph;\n+\n+  HnswGraph() {\n+    graph = new ArrayList<>();\n+    graph.add(new ArrayList<>());\n+  }\n+\n+  /**\n+   * Searches for the nearest neighbors of a query vector.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c10b88a38b25ca52e87be009ed8011ccc1b94683"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAwMDMyMw==", "bodyText": "No this method is intended for use both when indexing and when searching. I guess this method could go in some other class (KnnGraphValues??) since it doesn't rely on Hnsw in any direct way (it only needs an abstract source of vectors and graph values). But it does use Neighbor/Neighbors and is heavily used by HnswGraphBuilder, so it seems natural to have it here.", "url": "https://github.com/apache/lucene-solr/pull/2022#discussion_r519000323", "createdAt": "2020-11-06T20:54:57Z", "author": {"login": "msokolov"}, "path": "lucene/core/src/java/org/apache/lucene/util/hnsw/HnswGraph.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.util.hnsw;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+import org.apache.lucene.index.KnnGraphValues;\n+import org.apache.lucene.index.VectorValues;\n+\n+import static org.apache.lucene.search.DocIdSetIterator.NO_MORE_DOCS;\n+import static org.apache.lucene.util.VectorUtil.dotProduct;\n+import static org.apache.lucene.util.VectorUtil.squareDistance;\n+\n+/**\n+ * Navigable Small-world graph. Provides efficient approximate nearest neighbor\n+ * search for high dimensional vectors.  See <a href=\"https://doi.org/10.1016/j.is.2013.10.006\">Approximate nearest\n+ * neighbor algorithm based on navigable small world graphs [2014]</a> and <a\n+ * href=\"https://arxiv.org/abs/1603.09320\">this paper [2018]</a> for details.\n+ *\n+ * This implementation is actually more like the one in the same authors' earlier 2014 paper in that\n+ * there is no hierarchy (just one layer), and no fanout restriction on the graph: nodes are allowed to accumulate\n+ * an unbounded number of outbound links, but it does incorporate some of the innovations of the later paper, like\n+ * using a priority queue to perform a beam search while traversing the graph. The nomenclature is a bit different\n+ * here from what's used in those papers:\n+ *\n+ * <h3>Hyperparameters</h3>\n+ * <ul>\n+ *   <li><code>numSeed</code> is the equivalent of <code>m</code> in the 2012 paper; it controls the number of random entry points to sample.</li>\n+ *   <li><code>beamWidth</code> in {@link HnswGraphBuilder} has the same meaning as <code>efConst</code> in the 2016 paper. It is the number of\n+ *   nearest neighbor candidates to track while searching the graph for each newly inserted node.</li>\n+ *   <li><code>maxConn</code> has the same meaning as <code>M</code> in the later paper; it controls how many of the <code>efConst</code> neighbors are\n+ *   connected to the new node</li>\n+ *   <li><code>fanout</code> the fanout parameter of {@link VectorValues#search(float[], int, int)}\n+ *   is used to control the values of <code>numSeed</code> and <code>topK</code> that are passed to this API.\n+ *   Thus <code>fanout</code> is like a combination of <code>ef</code> (search beam width) from the 2016 paper and <code>m</code> from the 2014 paper.\n+ *   </li>\n+ * </ul>\n+ *\n+ * <p>Note: The graph may be searched by multiple threads concurrently, but updates are not thread-safe. Also note: there is no notion of\n+ * deletions. Document searching built on top of this must do its own deletion-filtering.</p>\n+ */\n+public final class HnswGraph {\n+\n+  // each entry lists the neighbors of a node, in node order\n+  private final List<List<Neighbor>> graph;\n+\n+  HnswGraph() {\n+    graph = new ArrayList<>();\n+    graph.add(new ArrayList<>());\n+  }\n+\n+  /**\n+   * Searches for the nearest neighbors of a query vector.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTEwNTE4Mg=="}, "originalCommit": {"oid": "c10b88a38b25ca52e87be009ed8011ccc1b94683"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1OTE0OTg5OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene90/Lucene90VectorReader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNToyNDoyOVrOHvz7iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNToyNDoyOVrOHvz7iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg5NTk0Nw==", "bodyText": "Hmm is this unused?", "url": "https://github.com/apache/lucene-solr/pull/2022#discussion_r519895947", "createdAt": "2020-11-09T15:24:29Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene90/Lucene90VectorReader.java", "diffHunk": "@@ -22,39 +22,60 @@\n import java.nio.FloatBuffer;\n import java.util.HashMap;\n import java.util.Map;\n+import java.util.Random;\n \n import org.apache.lucene.codecs.CodecUtil;\n import org.apache.lucene.codecs.VectorReader;\n import org.apache.lucene.index.CorruptIndexException;\n import org.apache.lucene.index.FieldInfo;\n import org.apache.lucene.index.FieldInfos;\n import org.apache.lucene.index.IndexFileNames;\n+import org.apache.lucene.index.KnnGraphValues;\n+import org.apache.lucene.index.RandomAccessVectorValues;\n+import org.apache.lucene.index.RandomAccessVectorValuesProducer;\n import org.apache.lucene.index.SegmentReadState;\n import org.apache.lucene.index.VectorValues;\n+import org.apache.lucene.search.ScoreDoc;\n import org.apache.lucene.search.TopDocs;\n+import org.apache.lucene.search.TotalHits;\n import org.apache.lucene.store.ChecksumIndexInput;\n+import org.apache.lucene.store.DataInput;\n import org.apache.lucene.store.IndexInput;\n import org.apache.lucene.util.BytesRef;\n import org.apache.lucene.util.IOUtils;\n import org.apache.lucene.util.RamUsageEstimator;\n+import org.apache.lucene.util.hnsw.HnswGraph;\n+import org.apache.lucene.util.hnsw.Neighbor;\n+import org.apache.lucene.util.hnsw.Neighbors;\n+\n+import static org.apache.lucene.search.DocIdSetIterator.NO_MORE_DOCS;\n \n /**\n- * Reads vectors from the index segments.\n+ * Reads vectors from the index segments along with index data structures supporting KNN search.\n  * @lucene.experimental\n  */\n public final class Lucene90VectorReader extends VectorReader {\n \n   private final FieldInfos fieldInfos;\n   private final Map<String, FieldEntry> fields = new HashMap<>();\n   private final IndexInput vectorData;\n-  private final int maxDoc;\n+  private final IndexInput vectorIndex;\n+  private final long checksumSeed;\n \n   Lucene90VectorReader(SegmentReadState state) throws IOException {\n     this.fieldInfos = state.fieldInfos;\n-    this.maxDoc = state.segmentInfo.maxDoc();\n \n-    String metaFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene90VectorFormat.META_EXTENSION);\n+    int versionMeta = readMetadata(state, Lucene90VectorFormat.META_EXTENSION);\n+    long[] checksumRef = new long[1];\n+    vectorData = openDataInput(state, versionMeta, Lucene90VectorFormat.VECTOR_DATA_EXTENSION, Lucene90VectorFormat.VECTOR_DATA_CODEC_NAME, checksumRef);\n+    vectorIndex = openDataInput(state, versionMeta, Lucene90VectorFormat.VECTOR_INDEX_EXTENSION, Lucene90VectorFormat.VECTOR_INDEX_CODEC_NAME, checksumRef);\n+    checksumSeed = checksumRef[0];\n+  }\n+\n+  private int readMetadata(SegmentReadState state, String fileExtension) throws IOException {\n+    String metaFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, fileExtension);\n     int versionMeta = -1;\n+    long checksum = -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83cf18f9bd3bb6214c500d23e7acf63178109bbe"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1OTE2MjAyOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene90/Lucene90VectorReader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNToyNjo0OVrOHv0CtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNToyNjo0OVrOHv0CtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg5Nzc4MQ==", "bodyText": "Clever seed!", "url": "https://github.com/apache/lucene-solr/pull/2022#discussion_r519897781", "createdAt": "2020-11-09T15:26:49Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/codecs/lucene90/Lucene90VectorReader.java", "diffHunk": "@@ -277,24 +351,46 @@ public long cost() {\n     }\n \n     @Override\n-    public RandomAccess randomAccess() {\n+    public RandomAccessVectorValues randomAccess() {\n       return new OffHeapRandomAccess(dataIn.clone());\n     }\n \n+    @Override\n+    public TopDocs search(float[] vector, int topK, int fanout) throws IOException {\n+      // use a seed that is fixed for the index so we get reproducible results for the same query\n+      final Random random = new Random(checksumSeed);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83cf18f9bd3bb6214c500d23e7acf63178109bbe"}, "originalPosition": 265}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1017, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}