{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNjM3NTI5", "number": 1294, "reviewThreads": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNTowMzowNFrODjVVIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wOVQwNzoxODo0N1rOGINMcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Mzc2MjI3OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNTowMzowNFrOFvFVbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTowMDowMVrOFyf-kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkxNDc5OQ==", "bodyText": "To quote @jpountz :\n\"this doesn't need an executor, does it?\"\nIt is needed since executor is a final member of IndexSearcher hence needs to be initialized? We could potentially always set it null since it anyways wont be used but that seemed a bit counter intuitive. WDYT?", "url": "https://github.com/apache/lucene-solr/pull/1294#discussion_r384914799", "createdAt": "2020-02-27T05:03:04Z", "author": {"login": "atris"}, "path": "lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java", "diffHunk": "@@ -211,6 +215,18 @@ public IndexSearcher(IndexReaderContext context, Executor executor) {\n     assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader();\n     reader = context.reader();\n     this.executor = executor;\n+    this.sliceExecutionControlPlane = executor == null ? null : getSliceExecutionControlPlane(executor);\n+    this.readerContext = context;\n+    leafContexts = context.leaves();\n+    this.leafSlices = executor == null ? null : slices(leafContexts);\n+  }\n+\n+  // Package private for testing\n+  IndexSearcher(IndexReaderContext context, Executor executor, SliceExecutionControlPlane sliceExecutionControlPlane) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e9cd7f33ca4c490c3066e0e4c2508fb1482f965"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5NzA0Mg==", "bodyText": "Is there anything we need to do with the executor that we couldn't do with the sliceExecutionControlPlane?", "url": "https://github.com/apache/lucene-solr/pull/1294#discussion_r388497042", "createdAt": "2020-03-05T19:00:01Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java", "diffHunk": "@@ -211,6 +215,18 @@ public IndexSearcher(IndexReaderContext context, Executor executor) {\n     assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader();\n     reader = context.reader();\n     this.executor = executor;\n+    this.sliceExecutionControlPlane = executor == null ? null : getSliceExecutionControlPlane(executor);\n+    this.readerContext = context;\n+    leafContexts = context.leaves();\n+    this.leafSlices = executor == null ? null : slices(leafContexts);\n+  }\n+\n+  // Package private for testing\n+  IndexSearcher(IndexReaderContext context, Executor executor, SliceExecutionControlPlane sliceExecutionControlPlane) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkxNDc5OQ=="}, "originalCommit": {"oid": "3e9cd7f33ca4c490c3066e0e4c2508fb1482f965"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Mzc2Mzk4OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/search/SliceExecutionControlPlane.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNTowNDoxN1rOFvFWXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNDo0MjowN1rOFyGPPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkxNTAzNw==", "bodyText": "To quote @jpountz\n\"the generics on this interface look over-engineered?\"\nI am not sure as to what the correct generics should be. Could you please advice?", "url": "https://github.com/apache/lucene-solr/pull/1294#discussion_r384915037", "createdAt": "2020-02-27T05:04:17Z", "author": {"login": "atris"}, "path": "lucene/core/src/java/org/apache/lucene/search/SliceExecutionControlPlane.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.search;\n+\n+import java.util.Collection;\n+\n+/**\n+ * Execution control plane which is responsible\n+ * for execution of slices based on the current status\n+ * of the system and current system load\n+ */\n+public interface SliceExecutionControlPlane<C, T extends Runnable> {\n+  /**\n+   * Invoke all slices that are allocated for the query\n+   */\n+  C invokeAll(Collection<T> tasks);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e9cd7f33ca4c490c3066e0e4c2508fb1482f965"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4MDQxNg==", "bodyText": "I think it does not need to be generic at all since the only use case is for Future and FutureTask. In fact the interface serves no visible purpose; we could simply rename DefaultSliceExecutionControlPlane to SliceExecutionControlPlane and nothing else would change. Since we're on naming, the naming seems rather grandiose for my tastes. I tend to think of a ControlPlane as a component in a distributed system, but I struggle to come up with anything better. Maybe SliceRunner?", "url": "https://github.com/apache/lucene-solr/pull/1294#discussion_r385080416", "createdAt": "2020-02-27T11:55:02Z", "author": {"login": "msokolov"}, "path": "lucene/core/src/java/org/apache/lucene/search/SliceExecutionControlPlane.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.search;\n+\n+import java.util.Collection;\n+\n+/**\n+ * Execution control plane which is responsible\n+ * for execution of slices based on the current status\n+ * of the system and current system load\n+ */\n+public interface SliceExecutionControlPlane<C, T extends Runnable> {\n+  /**\n+   * Invoke all slices that are allocated for the query\n+   */\n+  C invokeAll(Collection<T> tasks);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkxNTAzNw=="}, "originalCommit": {"oid": "3e9cd7f33ca4c490c3066e0e4c2508fb1482f965"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxOTQ0Nw==", "bodyText": "Thanks for taking a look. I have fixed your comments. I have introduced the interface to allow easy extensibility. I agree that the current use case is with Future and FutureTask but that should not restrict the future use cases that are possible on top of the interface.\nRegarding the name, SliceRunner does not seem to convey the right message since the class can control the way the execution of the query happens without any internal directions hence it is vital to highlight that the execution of a query can be influenced by the decisions of this class.", "url": "https://github.com/apache/lucene-solr/pull/1294#discussion_r385819447", "createdAt": "2020-02-28T17:17:05Z", "author": {"login": "atris"}, "path": "lucene/core/src/java/org/apache/lucene/search/SliceExecutionControlPlane.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.search;\n+\n+import java.util.Collection;\n+\n+/**\n+ * Execution control plane which is responsible\n+ * for execution of slices based on the current status\n+ * of the system and current system load\n+ */\n+public interface SliceExecutionControlPlane<C, T extends Runnable> {\n+  /**\n+   * Invoke all slices that are allocated for the query\n+   */\n+  C invokeAll(Collection<T> tasks);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkxNTAzNw=="}, "originalCommit": {"oid": "3e9cd7f33ca4c490c3066e0e4c2508fb1482f965"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEwOTE5Mw==", "bodyText": "This is an internal detail of IndexSearcher, right? We're always free to change the method signatures later (if we keep the classes package-private - we should!). Maybe it would help if you were to explain what extension you have in mind.\nBy the way, using force push makes it more difficult for reviewers since we can't easily see what changed from one version to the next. In general it's better to push your commits and then squash-merge them at the end (github will even do this for you I think)", "url": "https://github.com/apache/lucene-solr/pull/1294#discussion_r386109193", "createdAt": "2020-03-01T13:41:36Z", "author": {"login": "msokolov"}, "path": "lucene/core/src/java/org/apache/lucene/search/SliceExecutionControlPlane.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.search;\n+\n+import java.util.Collection;\n+\n+/**\n+ * Execution control plane which is responsible\n+ * for execution of slices based on the current status\n+ * of the system and current system load\n+ */\n+public interface SliceExecutionControlPlane<C, T extends Runnable> {\n+  /**\n+   * Invoke all slices that are allocated for the query\n+   */\n+  C invokeAll(Collection<T> tasks);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkxNTAzNw=="}, "originalCommit": {"oid": "3e9cd7f33ca4c490c3066e0e4c2508fb1482f965"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEwOTI1MA==", "bodyText": "Also- I'm curious if you saw any performance impact from the back pressure here?", "url": "https://github.com/apache/lucene-solr/pull/1294#discussion_r386109250", "createdAt": "2020-03-01T13:42:48Z", "author": {"login": "msokolov"}, "path": "lucene/core/src/java/org/apache/lucene/search/SliceExecutionControlPlane.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.search;\n+\n+import java.util.Collection;\n+\n+/**\n+ * Execution control plane which is responsible\n+ * for execution of slices based on the current status\n+ * of the system and current system load\n+ */\n+public interface SliceExecutionControlPlane<C, T extends Runnable> {\n+  /**\n+   * Invoke all slices that are allocated for the query\n+   */\n+  C invokeAll(Collection<T> tasks);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkxNTAzNw=="}, "originalCommit": {"oid": "3e9cd7f33ca4c490c3066e0e4c2508fb1482f965"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODA3NTE2NQ==", "bodyText": "I do not have a very strong preference to the extensibility model of the interface -- so removed it per your recommendation. Let me know if you have any further comments or thoughts", "url": "https://github.com/apache/lucene-solr/pull/1294#discussion_r388075165", "createdAt": "2020-03-05T04:41:27Z", "author": {"login": "atris"}, "path": "lucene/core/src/java/org/apache/lucene/search/SliceExecutionControlPlane.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.search;\n+\n+import java.util.Collection;\n+\n+/**\n+ * Execution control plane which is responsible\n+ * for execution of slices based on the current status\n+ * of the system and current system load\n+ */\n+public interface SliceExecutionControlPlane<C, T extends Runnable> {\n+  /**\n+   * Invoke all slices that are allocated for the query\n+   */\n+  C invokeAll(Collection<T> tasks);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkxNTAzNw=="}, "originalCommit": {"oid": "3e9cd7f33ca4c490c3066e0e4c2508fb1482f965"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODA3NTMyNw==", "bodyText": "Also- I'm curious if you saw any performance impact from the back pressure here?\n\nWhen testing with artificial CPU stress and a small threadpool size, the worst case performance tends towards sequential since all tasks will be scheduled on the caller thread", "url": "https://github.com/apache/lucene-solr/pull/1294#discussion_r388075327", "createdAt": "2020-03-05T04:42:07Z", "author": {"login": "atris"}, "path": "lucene/core/src/java/org/apache/lucene/search/SliceExecutionControlPlane.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.search;\n+\n+import java.util.Collection;\n+\n+/**\n+ * Execution control plane which is responsible\n+ * for execution of slices based on the current status\n+ * of the system and current system load\n+ */\n+public interface SliceExecutionControlPlane<C, T extends Runnable> {\n+  /**\n+   * Invoke all slices that are allocated for the query\n+   */\n+  C invokeAll(Collection<T> tasks);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkxNTAzNw=="}, "originalCommit": {"oid": "3e9cd7f33ca4c490c3066e0e4c2508fb1482f965"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDg0NjM2OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/search/DefaultSliceExecutionControlPlane.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMTo1OTozNlrOFvPksA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMTo1OTozNlrOFvPksA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4MjU0NA==", "bodyText": "The logic around this boolean is hard to read. I think it would be clearer if we restructure the logic a bit and avoid modifying an incoming boolean parameter", "url": "https://github.com/apache/lucene-solr/pull/1294#discussion_r385082544", "createdAt": "2020-02-27T11:59:36Z", "author": {"login": "msokolov"}, "path": "lucene/core/src/java/org/apache/lucene/search/DefaultSliceExecutionControlPlane.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.search;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.FutureTask;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * Implementation of SliceExecutionControlPlane with queue backpressure based thread allocation\n+ */\n+public class DefaultSliceExecutionControlPlane implements SliceExecutionControlPlane<List<Future>, FutureTask> {\n+  private final Executor executor;\n+\n+  public DefaultSliceExecutionControlPlane(Executor executor) {\n+    this.executor = executor;\n+  }\n+\n+  @Override\n+  public List<Future> invokeAll(Collection<FutureTask> tasks) {\n+\n+    if (tasks == null) {\n+      throw new IllegalArgumentException(\"Tasks is null\");\n+    }\n+\n+    if (executor == null) {\n+      throw new IllegalArgumentException(\"Executor is null\");\n+    }\n+\n+    List<Future> futures = new ArrayList();\n+\n+    int i = 0;\n+\n+    for (FutureTask task : tasks) {\n+      boolean shouldExecuteOnCallerThread = false;\n+\n+      // Execute last task on caller thread\n+      if (i == tasks.size() - 1) {\n+        shouldExecuteOnCallerThread = true;\n+      }\n+\n+      processTask(task, futures, shouldExecuteOnCallerThread);\n+      ++i;\n+    }\n+\n+    return futures;\n+  }\n+\n+  // Helper method to execute a single task\n+  protected void processTask(FutureTask task, List<Future> futures,\n+                             boolean shouldExecuteOnCallerThread) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab1e377bdc9642145e0e1be4ee2334198df55642"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDg0NzQ2OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/search/DefaultSliceExecutionControlPlane.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjowMDowMlrOFvPlWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjowMTo0MVrOFvPocw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4MjcxMg==", "bodyText": "else?", "url": "https://github.com/apache/lucene-solr/pull/1294#discussion_r385082712", "createdAt": "2020-02-27T12:00:02Z", "author": {"login": "msokolov"}, "path": "lucene/core/src/java/org/apache/lucene/search/DefaultSliceExecutionControlPlane.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.search;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.FutureTask;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * Implementation of SliceExecutionControlPlane with queue backpressure based thread allocation\n+ */\n+public class DefaultSliceExecutionControlPlane implements SliceExecutionControlPlane<List<Future>, FutureTask> {\n+  private final Executor executor;\n+\n+  public DefaultSliceExecutionControlPlane(Executor executor) {\n+    this.executor = executor;\n+  }\n+\n+  @Override\n+  public List<Future> invokeAll(Collection<FutureTask> tasks) {\n+\n+    if (tasks == null) {\n+      throw new IllegalArgumentException(\"Tasks is null\");\n+    }\n+\n+    if (executor == null) {\n+      throw new IllegalArgumentException(\"Executor is null\");\n+    }\n+\n+    List<Future> futures = new ArrayList();\n+\n+    int i = 0;\n+\n+    for (FutureTask task : tasks) {\n+      boolean shouldExecuteOnCallerThread = false;\n+\n+      // Execute last task on caller thread\n+      if (i == tasks.size() - 1) {\n+        shouldExecuteOnCallerThread = true;\n+      }\n+\n+      processTask(task, futures, shouldExecuteOnCallerThread);\n+      ++i;\n+    }\n+\n+    return futures;\n+  }\n+\n+  // Helper method to execute a single task\n+  protected void processTask(FutureTask task, List<Future> futures,\n+                             boolean shouldExecuteOnCallerThread) {\n+    if (task == null) {\n+      throw new IllegalArgumentException(\"Input is null\");\n+    }\n+\n+    if (!shouldExecuteOnCallerThread) {\n+      try {\n+        executor.execute(task);\n+      } catch (RejectedExecutionException e) {\n+        // Execute on caller thread\n+        shouldExecuteOnCallerThread = true;\n+      }\n+    }\n+\n+    if (shouldExecuteOnCallerThread) {\n+      try {\n+        task.run();\n+      } catch (Exception e) {\n+        throw new RuntimeException(e);\n+      }\n+    }\n+\n+    if (!shouldExecuteOnCallerThread) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab1e377bdc9642145e0e1be4ee2334198df55642"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4MzUwNw==", "bodyText": "could we add this to the first if block? ie executor.execute() .. futures.add() ...?  Then use early return and you don't need to modify the incoming parameter", "url": "https://github.com/apache/lucene-solr/pull/1294#discussion_r385083507", "createdAt": "2020-02-27T12:01:41Z", "author": {"login": "msokolov"}, "path": "lucene/core/src/java/org/apache/lucene/search/DefaultSliceExecutionControlPlane.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.search;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.FutureTask;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * Implementation of SliceExecutionControlPlane with queue backpressure based thread allocation\n+ */\n+public class DefaultSliceExecutionControlPlane implements SliceExecutionControlPlane<List<Future>, FutureTask> {\n+  private final Executor executor;\n+\n+  public DefaultSliceExecutionControlPlane(Executor executor) {\n+    this.executor = executor;\n+  }\n+\n+  @Override\n+  public List<Future> invokeAll(Collection<FutureTask> tasks) {\n+\n+    if (tasks == null) {\n+      throw new IllegalArgumentException(\"Tasks is null\");\n+    }\n+\n+    if (executor == null) {\n+      throw new IllegalArgumentException(\"Executor is null\");\n+    }\n+\n+    List<Future> futures = new ArrayList();\n+\n+    int i = 0;\n+\n+    for (FutureTask task : tasks) {\n+      boolean shouldExecuteOnCallerThread = false;\n+\n+      // Execute last task on caller thread\n+      if (i == tasks.size() - 1) {\n+        shouldExecuteOnCallerThread = true;\n+      }\n+\n+      processTask(task, futures, shouldExecuteOnCallerThread);\n+      ++i;\n+    }\n+\n+    return futures;\n+  }\n+\n+  // Helper method to execute a single task\n+  protected void processTask(FutureTask task, List<Future> futures,\n+                             boolean shouldExecuteOnCallerThread) {\n+    if (task == null) {\n+      throw new IllegalArgumentException(\"Input is null\");\n+    }\n+\n+    if (!shouldExecuteOnCallerThread) {\n+      try {\n+        executor.execute(task);\n+      } catch (RejectedExecutionException e) {\n+        // Execute on caller thread\n+        shouldExecuteOnCallerThread = true;\n+      }\n+    }\n+\n+    if (shouldExecuteOnCallerThread) {\n+      try {\n+        task.run();\n+      } catch (Exception e) {\n+        throw new RuntimeException(e);\n+      }\n+    }\n+\n+    if (!shouldExecuteOnCallerThread) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4MjcxMg=="}, "originalCommit": {"oid": "ab1e377bdc9642145e0e1be4ee2334198df55642"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjkyNjI1OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo1NDozOFrOFyfx-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODo1MzowNlrOF1EeWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5MzgxOQ==", "bodyText": "it feels wrong to not take the one from the constructor?", "url": "https://github.com/apache/lucene-solr/pull/1294#discussion_r388493819", "createdAt": "2020-03-05T18:54:38Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java", "diffHunk": "@@ -211,6 +213,18 @@ public IndexSearcher(IndexReaderContext context, Executor executor) {\n     assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader();\n     reader = context.reader();\n     this.executor = executor;\n+    this.sliceExecutionControlPlane = executor == null ? null : getSliceExecutionControlPlane(executor);\n+    this.readerContext = context;\n+    leafContexts = context.leaves();\n+    this.leafSlices = executor == null ? null : slices(leafContexts);\n+  }\n+\n+  // Package private for testing\n+  IndexSearcher(IndexReaderContext context, Executor executor, SliceExecutionControlPlane sliceExecutionControlPlane) {\n+    assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader();\n+    reader = context.reader();\n+    this.executor = executor;\n+    this.sliceExecutionControlPlane = executor == null ? null : sliceExecutionControlPlane;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca4b7843d20751d3b58ba11c492eac6855c7fcf0"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAzODc5MQ==", "bodyText": "Not sure if I understood your point. The passed in instance is the one being assigned to the member?", "url": "https://github.com/apache/lucene-solr/pull/1294#discussion_r389038791", "createdAt": "2020-03-06T17:26:02Z", "author": {"login": "atris"}, "path": "lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java", "diffHunk": "@@ -211,6 +213,18 @@ public IndexSearcher(IndexReaderContext context, Executor executor) {\n     assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader();\n     reader = context.reader();\n     this.executor = executor;\n+    this.sliceExecutionControlPlane = executor == null ? null : getSliceExecutionControlPlane(executor);\n+    this.readerContext = context;\n+    leafContexts = context.leaves();\n+    this.leafSlices = executor == null ? null : slices(leafContexts);\n+  }\n+\n+  // Package private for testing\n+  IndexSearcher(IndexReaderContext context, Executor executor, SliceExecutionControlPlane sliceExecutionControlPlane) {\n+    assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader();\n+    reader = context.reader();\n+    this.executor = executor;\n+    this.sliceExecutionControlPlane = executor == null ? null : sliceExecutionControlPlane;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5MzgxOQ=="}, "originalCommit": {"oid": "ca4b7843d20751d3b58ba11c492eac6855c7fcf0"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUxNDI1Nw==", "bodyText": "My point was that it sounds like a bug on the caller of this constructor to pass a null executor and a non-null sliceExecutionControlPlane? So I'd rather have validation around it rather than be lenient and ignore the provided sliceExecutionControlPlane if the executor is null?", "url": "https://github.com/apache/lucene-solr/pull/1294#discussion_r390514257", "createdAt": "2020-03-10T18:11:30Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java", "diffHunk": "@@ -211,6 +213,18 @@ public IndexSearcher(IndexReaderContext context, Executor executor) {\n     assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader();\n     reader = context.reader();\n     this.executor = executor;\n+    this.sliceExecutionControlPlane = executor == null ? null : getSliceExecutionControlPlane(executor);\n+    this.readerContext = context;\n+    leafContexts = context.leaves();\n+    this.leafSlices = executor == null ? null : slices(leafContexts);\n+  }\n+\n+  // Package private for testing\n+  IndexSearcher(IndexReaderContext context, Executor executor, SliceExecutionControlPlane sliceExecutionControlPlane) {\n+    assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader();\n+    reader = context.reader();\n+    this.executor = executor;\n+    this.sliceExecutionControlPlane = executor == null ? null : sliceExecutionControlPlane;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5MzgxOQ=="}, "originalCommit": {"oid": "ca4b7843d20751d3b58ba11c492eac6855c7fcf0"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5MjE1NQ==", "bodyText": "+1, did not add it since it was a test method but I see your point. Added now, thanks!", "url": "https://github.com/apache/lucene-solr/pull/1294#discussion_r391192155", "createdAt": "2020-03-11T18:53:06Z", "author": {"login": "atris"}, "path": "lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java", "diffHunk": "@@ -211,6 +213,18 @@ public IndexSearcher(IndexReaderContext context, Executor executor) {\n     assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader();\n     reader = context.reader();\n     this.executor = executor;\n+    this.sliceExecutionControlPlane = executor == null ? null : getSliceExecutionControlPlane(executor);\n+    this.readerContext = context;\n+    leafContexts = context.leaves();\n+    this.leafSlices = executor == null ? null : slices(leafContexts);\n+  }\n+\n+  // Package private for testing\n+  IndexSearcher(IndexReaderContext context, Executor executor, SliceExecutionControlPlane sliceExecutionControlPlane) {\n+    assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader();\n+    reader = context.reader();\n+    this.executor = executor;\n+    this.sliceExecutionControlPlane = executor == null ? null : sliceExecutionControlPlane;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5MzgxOQ=="}, "originalCommit": {"oid": "ca4b7843d20751d3b58ba11c492eac6855c7fcf0"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjk0OTc4OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTowMDo1N1rOFygAZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTowMDo1N1rOFygAZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5NzUxMQ==", "bodyText": "Let's avoid introducing warnings about generics, FutureTask needs to be parameterized?", "url": "https://github.com/apache/lucene-solr/pull/1294#discussion_r388497511", "createdAt": "2020-03-05T19:00:57Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java", "diffHunk": "@@ -662,34 +676,19 @@ public TopFieldDocs reduce(Collection<TopFieldCollector> collectors) throws IOEx\n       }\n       query = rewrite(query);\n       final Weight weight = createWeight(query, scoreMode, 1);\n-      final List<Future<C>> topDocsFutures = new ArrayList<>(leafSlices.length);\n-      for (int i = 0; i < leafSlices.length - 1; ++i) {\n+      final List<FutureTask> listTasks = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca4b7843d20751d3b58ba11c492eac6855c7fcf0"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjk1MzcwOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/search/SliceExecutionControlPlane.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTowMjoxNVrOFygDDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTowMjoxNVrOFygDDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5ODE4OA==", "bodyText": "nit: I'd prefer a simpler name, e.g. SliceExecutor", "url": "https://github.com/apache/lucene-solr/pull/1294#discussion_r388498188", "createdAt": "2020-03-05T19:02:15Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/SliceExecutionControlPlane.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.search;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.FutureTask;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * Execution control plane which is responsible\n+ * for execution of slices based on the current status\n+ * of the system and current system load\n+ */\n+class SliceExecutionControlPlane {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca4b7843d20751d3b58ba11c492eac6855c7fcf0"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDA5OTg4OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODoxMjo0NlrOF0bJUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODoxMjo0NlrOF0bJUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUxNTAyNA==", "bodyText": "maybe this should delegate to the below constructor?", "url": "https://github.com/apache/lucene-solr/pull/1294#discussion_r390515024", "createdAt": "2020-03-10T18:12:46Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java", "diffHunk": "@@ -211,6 +213,18 @@ public IndexSearcher(IndexReaderContext context, Executor executor) {\n     assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader();\n     reader = context.reader();\n     this.executor = executor;\n+    this.sliceExecutor = executor == null ? null : getSliceExecutionControlPlane(executor);\n+    this.readerContext = context;\n+    leafContexts = context.leaves();\n+    this.leafSlices = executor == null ? null : slices(leafContexts);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0f3886e064ae1ef73c498df3fe6f4bb6c0aa3ff"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDE0MTY4OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/search/SliceExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODoyNDoxM1rOF0bjxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODoyNDoxM1rOF0bjxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyMTc5OQ==", "bodyText": "we don't need this catch block as task.run() doesn't declare any non-runtime exception?", "url": "https://github.com/apache/lucene-solr/pull/1294#discussion_r390521799", "createdAt": "2020-03-10T18:24:13Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/SliceExecutor.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.search;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.FutureTask;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * Executor which is responsible\n+ * for execution of slices based on the current status\n+ * of the system and current system load\n+ */\n+class SliceExecutor {\n+  private final Executor executor;\n+\n+  public SliceExecutor(Executor executor) {\n+    this.executor = executor;\n+  }\n+\n+  public <C> List<Future<C>> invokeAll(Collection<FutureTask<C>> tasks) {\n+\n+    if (tasks == null) {\n+      throw new IllegalArgumentException(\"Tasks is null\");\n+    }\n+\n+    if (executor == null) {\n+      throw new IllegalArgumentException(\"Executor is null\");\n+    }\n+\n+    List<Future<C>> futures = new ArrayList();\n+\n+    int i = 0;\n+\n+    for (FutureTask task : tasks) {\n+      boolean shouldExecuteOnCallerThread = false;\n+\n+      // Execute last task on caller thread\n+      if (i == tasks.size() - 1) {\n+        shouldExecuteOnCallerThread = true;\n+      }\n+\n+      processTask(task, futures, shouldExecuteOnCallerThread);\n+      ++i;\n+    }\n+\n+    return futures;\n+  }\n+\n+  // Helper method to execute a single task\n+  protected <C> void processTask(final FutureTask<C> task, final List<Future<C>> futures,\n+                             final boolean shouldExecuteOnCallerThread) {\n+    if (task == null) {\n+      throw new IllegalArgumentException(\"Input is null\");\n+    }\n+\n+    if (!shouldExecuteOnCallerThread) {\n+      try {\n+        executor.execute(task);\n+        futures.add(task);\n+\n+        return;\n+      } catch (RejectedExecutionException e) {\n+        // Execute on caller thread\n+      }\n+    }\n+\n+    runTaskOnCallerThread(task);\n+\n+    try {\n+      futures.add(CompletableFuture.completedFuture(task.get()));\n+    } catch (Exception e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n+\n+  // Private helper method to run a task on the caller thread\n+  private void runTaskOnCallerThread(FutureTask task) {\n+    try {\n+      task.run();\n+    } catch (Exception e) {\n+      throw new RuntimeException(e);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0f3886e064ae1ef73c498df3fe6f4bb6c0aa3ff"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDE0Nzc0OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODoyNTo0OFrOF0bnlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODoyNTo0OFrOF0bnlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyMjc3Mw==", "bodyText": "we shouldn't make this method public if it returns a pkg-private class, let's make the method pkg-private too? Or even remove it entirely as I'm not seeing any call site for it?", "url": "https://github.com/apache/lucene-solr/pull/1294#discussion_r390522773", "createdAt": "2020-03-10T18:25:48Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java", "diffHunk": "@@ -933,6 +932,13 @@ public Executor getExecutor() {\n     return executor;\n   }\n \n+  /**\n+   * Returns this searchers slice execution control plane or <code>null</code> if no executor was provided\n+   */\n+  public SliceExecutor getSliceExecutor() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0f3886e064ae1ef73c498df3fe6f4bb6c0aa3ff"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDE1MTgwOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/search/SliceExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODoyNjo1NVrOF0bqLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODozMzo1N1rOF1D0ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyMzQzNw==", "bodyText": "I wonder whether this is the right API. We could change the return type to void and use Runnable instead of FutureTask and that would still work, right? The return value isn't really useful since it has the same content as the input collection? So what about making it just: public void invokeAll(Collection<? extends Runnable> tasks)?", "url": "https://github.com/apache/lucene-solr/pull/1294#discussion_r390523437", "createdAt": "2020-03-10T18:26:55Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/SliceExecutor.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.search;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.FutureTask;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * Executor which is responsible\n+ * for execution of slices based on the current status\n+ * of the system and current system load\n+ */\n+class SliceExecutor {\n+  private final Executor executor;\n+\n+  public SliceExecutor(Executor executor) {\n+    this.executor = executor;\n+  }\n+\n+  public <C> List<Future<C>> invokeAll(Collection<FutureTask<C>> tasks) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0f3886e064ae1ef73c498df3fe6f4bb6c0aa3ff"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE4MTQxOA==", "bodyText": "Agreed, fixed, thanks", "url": "https://github.com/apache/lucene-solr/pull/1294#discussion_r391181418", "createdAt": "2020-03-11T18:33:57Z", "author": {"login": "atris"}, "path": "lucene/core/src/java/org/apache/lucene/search/SliceExecutor.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.search;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.FutureTask;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * Executor which is responsible\n+ * for execution of slices based on the current status\n+ * of the system and current system load\n+ */\n+class SliceExecutor {\n+  private final Executor executor;\n+\n+  public SliceExecutor(Executor executor) {\n+    this.executor = executor;\n+  }\n+\n+  public <C> List<Future<C>> invokeAll(Collection<FutureTask<C>> tasks) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyMzQzNw=="}, "originalCommit": {"oid": "b0f3886e064ae1ef73c498df3fe6f4bb6c0aa3ff"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDE1NTQxOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/search/SliceExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODoyNzo0M1rOF0bsOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODoyNzo0M1rOF0bsOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyMzk2Mw==", "bodyText": "we should never use generic types without type parameters, can you address all these compilation warnings?", "url": "https://github.com/apache/lucene-solr/pull/1294#discussion_r390523963", "createdAt": "2020-03-10T18:27:43Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/SliceExecutor.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.search;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.FutureTask;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * Executor which is responsible\n+ * for execution of slices based on the current status\n+ * of the system and current system load\n+ */\n+class SliceExecutor {\n+  private final Executor executor;\n+\n+  public SliceExecutor(Executor executor) {\n+    this.executor = executor;\n+  }\n+\n+  public <C> List<Future<C>> invokeAll(Collection<FutureTask<C>> tasks) {\n+\n+    if (tasks == null) {\n+      throw new IllegalArgumentException(\"Tasks is null\");\n+    }\n+\n+    if (executor == null) {\n+      throw new IllegalArgumentException(\"Executor is null\");\n+    }\n+\n+    List<Future<C>> futures = new ArrayList();\n+\n+    int i = 0;\n+\n+    for (FutureTask task : tasks) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0f3886e064ae1ef73c498df3fe6f4bb6c0aa3ff"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDE2Njc0OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/search/SliceExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODozMDo1MVrOF0bzzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODozMDo1MVrOF0bzzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyNTkwMw==", "bodyText": "this has the same effect as futures.add(task) unless I'm missing something", "url": "https://github.com/apache/lucene-solr/pull/1294#discussion_r390525903", "createdAt": "2020-03-10T18:30:51Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/SliceExecutor.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.search;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.FutureTask;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * Executor which is responsible\n+ * for execution of slices based on the current status\n+ * of the system and current system load\n+ */\n+class SliceExecutor {\n+  private final Executor executor;\n+\n+  public SliceExecutor(Executor executor) {\n+    this.executor = executor;\n+  }\n+\n+  public <C> List<Future<C>> invokeAll(Collection<FutureTask<C>> tasks) {\n+\n+    if (tasks == null) {\n+      throw new IllegalArgumentException(\"Tasks is null\");\n+    }\n+\n+    if (executor == null) {\n+      throw new IllegalArgumentException(\"Executor is null\");\n+    }\n+\n+    List<Future<C>> futures = new ArrayList();\n+\n+    int i = 0;\n+\n+    for (FutureTask task : tasks) {\n+      boolean shouldExecuteOnCallerThread = false;\n+\n+      // Execute last task on caller thread\n+      if (i == tasks.size() - 1) {\n+        shouldExecuteOnCallerThread = true;\n+      }\n+\n+      processTask(task, futures, shouldExecuteOnCallerThread);\n+      ++i;\n+    }\n+\n+    return futures;\n+  }\n+\n+  // Helper method to execute a single task\n+  protected <C> void processTask(final FutureTask<C> task, final List<Future<C>> futures,\n+                             final boolean shouldExecuteOnCallerThread) {\n+    if (task == null) {\n+      throw new IllegalArgumentException(\"Input is null\");\n+    }\n+\n+    if (!shouldExecuteOnCallerThread) {\n+      try {\n+        executor.execute(task);\n+        futures.add(task);\n+\n+        return;\n+      } catch (RejectedExecutionException e) {\n+        // Execute on caller thread\n+      }\n+    }\n+\n+    runTaskOnCallerThread(task);\n+\n+    try {\n+      futures.add(CompletableFuture.completedFuture(task.get()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0f3886e064ae1ef73c498df3fe6f4bb6c0aa3ff"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzUwNDM1OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDo0MTowM1rOF97YIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDo0MTowM1rOF97YIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4MDI4OQ==", "bodyText": "maybe do assert (sliceExecutor == null) == (executor==null); which is shorter and not harder to read?", "url": "https://github.com/apache/lucene-solr/pull/1294#discussion_r400480289", "createdAt": "2020-03-30T20:41:03Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java", "diffHunk": "@@ -208,9 +210,22 @@ public IndexSearcher(IndexReader r, Executor executor) {\n    * @lucene.experimental\n    */\n   public IndexSearcher(IndexReaderContext context, Executor executor) {\n+    this(context, executor, getSliceExecutionControlPlane(executor));\n+  }\n+\n+  // Package private for testing\n+  IndexSearcher(IndexReaderContext context, Executor executor, SliceExecutor sliceExecutor) {\n     assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader();\n+    if (executor == null) {\n+      assert sliceExecutor == null;\n+    }\n+    if (sliceExecutor == null) {\n+      assert executor == null;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b8e10b15248593f94419f55bbc86b9b90448b75"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzUyMTQ0OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/search/QueueSizeBasedExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDo0NjoxOVrOF97i8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDo0NjoxOVrOF97i8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4MzA1Ng==", "bodyText": "I believe you meant tasks, not threads.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * threads should be active. If the limit is exceeded, further segments are searched on the caller thread\n          \n          \n            \n             * tasks should be active. If the limit is exceeded, further segments are searched on the caller thread", "url": "https://github.com/apache/lucene-solr/pull/1294#discussion_r400483056", "createdAt": "2020-03-30T20:46:19Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/QueueSizeBasedExecutor.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.search;\n+\n+import java.util.Collection;\n+import java.util.concurrent.ThreadPoolExecutor;\n+\n+/**\n+ * Derivative of SliceExecutor that controls the number of active threads\n+ * that are used for a single query. At any point, no more than (maximum pool size of the executor * LIMITING_FACTOR)\n+ * threads should be active. If the limit is exceeded, further segments are searched on the caller thread", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b8e10b15248593f94419f55bbc86b9b90448b75"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzU0NTg0OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/search/SliceExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDo1MzozMlrOF97ySQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMToyNzozMVrOF-8VHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4Njk4NQ==", "bodyText": "do we really need a helper for this?", "url": "https://github.com/apache/lucene-solr/pull/1294#discussion_r400486985", "createdAt": "2020-03-30T20:53:32Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/SliceExecutor.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.search;\n+\n+import java.util.Collection;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * Executor which is responsible\n+ * for execution of slices based on the current status\n+ * of the system and current system load\n+ */\n+class SliceExecutor {\n+  private final Executor executor;\n+\n+  public SliceExecutor(Executor executor) {\n+    this.executor = executor;\n+  }\n+\n+  public void invokeAll(Collection<? extends Runnable> tasks) {\n+\n+    if (tasks == null) {\n+      throw new IllegalArgumentException(\"Tasks is null\");\n+    }\n+\n+    if (executor == null) {\n+      throw new IllegalArgumentException(\"Executor is null\");\n+    }\n+\n+    int i = 0;\n+\n+    for (Runnable task : tasks) {\n+      boolean shouldExecuteOnCallerThread = false;\n+\n+      // Execute last task on caller thread\n+      if (i == tasks.size() - 1) {\n+        shouldExecuteOnCallerThread = true;\n+      }\n+\n+      processTask(task, shouldExecuteOnCallerThread);\n+      ++i;\n+    };\n+  }\n+\n+  // Helper method to execute a single task\n+  protected void processTask(final Runnable task,\n+                             final boolean shouldExecuteOnCallerThread) {\n+    if (task == null) {\n+      throw new IllegalArgumentException(\"Input is null\");\n+    }\n+\n+    if (!shouldExecuteOnCallerThread) {\n+      try {\n+        executor.execute(task);\n+\n+        return;\n+      } catch (RejectedExecutionException e) {\n+        // Execute on caller thread\n+      }\n+    }\n+\n+    runTaskOnCallerThread(task);\n+  }\n+\n+  // Private helper method to run a task on the caller thread\n+  private void runTaskOnCallerThread(Runnable task) {\n+    task.run();\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b8e10b15248593f94419f55bbc86b9b90448b75"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU0NDQ3Nw==", "bodyText": "Fair point -- I dont know what I was thinking :)", "url": "https://github.com/apache/lucene-solr/pull/1294#discussion_r401544477", "createdAt": "2020-04-01T11:27:31Z", "author": {"login": "atris"}, "path": "lucene/core/src/java/org/apache/lucene/search/SliceExecutor.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.search;\n+\n+import java.util.Collection;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * Executor which is responsible\n+ * for execution of slices based on the current status\n+ * of the system and current system load\n+ */\n+class SliceExecutor {\n+  private final Executor executor;\n+\n+  public SliceExecutor(Executor executor) {\n+    this.executor = executor;\n+  }\n+\n+  public void invokeAll(Collection<? extends Runnable> tasks) {\n+\n+    if (tasks == null) {\n+      throw new IllegalArgumentException(\"Tasks is null\");\n+    }\n+\n+    if (executor == null) {\n+      throw new IllegalArgumentException(\"Executor is null\");\n+    }\n+\n+    int i = 0;\n+\n+    for (Runnable task : tasks) {\n+      boolean shouldExecuteOnCallerThread = false;\n+\n+      // Execute last task on caller thread\n+      if (i == tasks.size() - 1) {\n+        shouldExecuteOnCallerThread = true;\n+      }\n+\n+      processTask(task, shouldExecuteOnCallerThread);\n+      ++i;\n+    };\n+  }\n+\n+  // Helper method to execute a single task\n+  protected void processTask(final Runnable task,\n+                             final boolean shouldExecuteOnCallerThread) {\n+    if (task == null) {\n+      throw new IllegalArgumentException(\"Input is null\");\n+    }\n+\n+    if (!shouldExecuteOnCallerThread) {\n+      try {\n+        executor.execute(task);\n+\n+        return;\n+      } catch (RejectedExecutionException e) {\n+        // Execute on caller thread\n+      }\n+    }\n+\n+    runTaskOnCallerThread(task);\n+  }\n+\n+  // Private helper method to run a task on the caller thread\n+  private void runTaskOnCallerThread(Runnable task) {\n+    task.run();\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4Njk4NQ=="}, "originalCommit": {"oid": "1b8e10b15248593f94419f55bbc86b9b90448b75"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzU2MjU0OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDo1ODoyNFrOF978hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDo1ODoyNFrOF978hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4OTYwNw==", "bodyText": "or just boolean shouldExecuteOnCallerThread = random().nextBoolean()?", "url": "https://github.com/apache/lucene-solr/pull/1294#discussion_r400489607", "createdAt": "2020-03-30T20:58:24Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher.java", "diffHunk": "@@ -347,4 +370,82 @@ public void execute(final Runnable runnable) {\n       throw new RejectedExecutionException();\n     }\n   }\n+\n+  public void testQueueSizeBasedCP() throws Exception {\n+    ThreadPoolExecutor service = new ThreadPoolExecutor(4, 4, 0L, TimeUnit.MILLISECONDS,\n+        new LinkedBlockingQueue<Runnable>(),\n+        new NamedThreadFactory(\"TestIndexSearcher\"));\n+\n+    runCPTest(service, false);\n+\n+    TestUtil.shutdownExecutorService(service);\n+  }\n+\n+  public void testRandomBlockingCP() throws Exception {\n+    ThreadPoolExecutor service = new ThreadPoolExecutor(4, 4, 0L, TimeUnit.MILLISECONDS,\n+        new LinkedBlockingQueue<Runnable>(),\n+        new NamedThreadFactory(\"TestIndexSearcher\"));\n+\n+    runCPTest(service, true);\n+\n+    TestUtil.shutdownExecutorService(service);\n+  }\n+\n+  private void runCPTest(ThreadPoolExecutor service, boolean useRandomCP) throws Exception {\n+    SliceExecutor sliceExecutor = useRandomCP == true ? new RandomBlockingSliceExecutor(service) :\n+                                                              new QueueSizeBasedExecutor(service);\n+\n+    IndexSearcher searcher = new IndexSearcher(reader2.getContext(), service, sliceExecutor);\n+\n+    Query queries[] = new Query[] {\n+        new MatchAllDocsQuery(),\n+        new TermQuery(new Term(\"field\", \"1\"))\n+    };\n+    Sort sorts[] = new Sort[] {\n+        null,\n+        new Sort(new SortField(\"field2\", SortField.Type.STRING))\n+    };\n+    ScoreDoc afters[] = new ScoreDoc[] {\n+        null,\n+        new FieldDoc(0, 0f, new Object[] { new BytesRef(\"boo!\") })\n+    };\n+\n+    for (ScoreDoc after : afters) {\n+      for (Query query : queries) {\n+        for (Sort sort : sorts) {\n+          searcher.search(query, Integer.MAX_VALUE);\n+          searcher.searchAfter(after, query, Integer.MAX_VALUE);\n+          if (sort != null) {\n+            searcher.search(query, Integer.MAX_VALUE, sort);\n+            searcher.search(query, Integer.MAX_VALUE, sort, true);\n+            searcher.search(query, Integer.MAX_VALUE, sort, false);\n+            searcher.searchAfter(after, query, Integer.MAX_VALUE, sort);\n+            searcher.searchAfter(after, query, Integer.MAX_VALUE, sort, true);\n+            searcher.searchAfter(after, query, Integer.MAX_VALUE, sort, false);\n+          }\n+        }\n+      }\n+    }\n+  }\n+\n+  private class RandomBlockingSliceExecutor extends SliceExecutor {\n+\n+    public RandomBlockingSliceExecutor(Executor executor) {\n+      super(executor);\n+    }\n+\n+    @Override\n+    public void invokeAll(Collection<? extends Runnable> tasks){\n+\n+      for (Runnable task : tasks) {\n+        boolean shouldExecuteOnCallerThread = false;\n+\n+        if (random().nextBoolean()) {\n+          shouldExecuteOnCallerThread = true;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b8e10b15248593f94419f55bbc86b9b90448b75"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzU2ODQyOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMTowMDowNVrOF98AEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMTowMDowNVrOF98AEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ5MDUxNQ==", "bodyText": "should we assert on the results?", "url": "https://github.com/apache/lucene-solr/pull/1294#discussion_r400490515", "createdAt": "2020-03-30T21:00:05Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher.java", "diffHunk": "@@ -347,4 +370,82 @@ public void execute(final Runnable runnable) {\n       throw new RejectedExecutionException();\n     }\n   }\n+\n+  public void testQueueSizeBasedCP() throws Exception {\n+    ThreadPoolExecutor service = new ThreadPoolExecutor(4, 4, 0L, TimeUnit.MILLISECONDS,\n+        new LinkedBlockingQueue<Runnable>(),\n+        new NamedThreadFactory(\"TestIndexSearcher\"));\n+\n+    runCPTest(service, false);\n+\n+    TestUtil.shutdownExecutorService(service);\n+  }\n+\n+  public void testRandomBlockingCP() throws Exception {\n+    ThreadPoolExecutor service = new ThreadPoolExecutor(4, 4, 0L, TimeUnit.MILLISECONDS,\n+        new LinkedBlockingQueue<Runnable>(),\n+        new NamedThreadFactory(\"TestIndexSearcher\"));\n+\n+    runCPTest(service, true);\n+\n+    TestUtil.shutdownExecutorService(service);\n+  }\n+\n+  private void runCPTest(ThreadPoolExecutor service, boolean useRandomCP) throws Exception {\n+    SliceExecutor sliceExecutor = useRandomCP == true ? new RandomBlockingSliceExecutor(service) :\n+                                                              new QueueSizeBasedExecutor(service);\n+\n+    IndexSearcher searcher = new IndexSearcher(reader2.getContext(), service, sliceExecutor);\n+\n+    Query queries[] = new Query[] {\n+        new MatchAllDocsQuery(),\n+        new TermQuery(new Term(\"field\", \"1\"))\n+    };\n+    Sort sorts[] = new Sort[] {\n+        null,\n+        new Sort(new SortField(\"field2\", SortField.Type.STRING))\n+    };\n+    ScoreDoc afters[] = new ScoreDoc[] {\n+        null,\n+        new FieldDoc(0, 0f, new Object[] { new BytesRef(\"boo!\") })\n+    };\n+\n+    for (ScoreDoc after : afters) {\n+      for (Query query : queries) {\n+        for (Sort sort : sorts) {\n+          searcher.search(query, Integer.MAX_VALUE);\n+          searcher.searchAfter(after, query, Integer.MAX_VALUE);\n+          if (sort != null) {\n+            searcher.search(query, Integer.MAX_VALUE, sort);\n+            searcher.search(query, Integer.MAX_VALUE, sort, true);\n+            searcher.search(query, Integer.MAX_VALUE, sort, false);\n+            searcher.searchAfter(after, query, Integer.MAX_VALUE, sort);\n+            searcher.searchAfter(after, query, Integer.MAX_VALUE, sort, true);\n+            searcher.searchAfter(after, query, Integer.MAX_VALUE, sort, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b8e10b15248593f94419f55bbc86b9b90448b75"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzU3MDUxOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMTowMDo0NlrOF98Baw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMTowMDo0NlrOF98Baw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ5MDg1OQ==", "bodyText": "what is CP the acronym of?", "url": "https://github.com/apache/lucene-solr/pull/1294#discussion_r400490859", "createdAt": "2020-03-30T21:00:46Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher.java", "diffHunk": "@@ -347,4 +370,82 @@ public void execute(final Runnable runnable) {\n       throw new RejectedExecutionException();\n     }\n   }\n+\n+  public void testQueueSizeBasedCP() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b8e10b15248593f94419f55bbc86b9b90448b75"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzU3MTk0OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMTowMToxNFrOF98CRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjowOTo1M1rOF-9oUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ5MTA3Nw==", "bodyText": "why are we not reusing reader1?", "url": "https://github.com/apache/lucene-solr/pull/1294#discussion_r400491077", "createdAt": "2020-03-30T21:01:14Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher.java", "diffHunk": "@@ -70,13 +75,31 @@ public void setUp() throws Exception {\n     }\n     reader = iw.getReader();\n     iw.close();\n+\n+    Random random = random();\n+    RandomIndexWriter iw2 = new RandomIndexWriter(random(), dir2, newIndexWriterConfig().setMergePolicy(newLogMergePolicy()));\n+    for (int i = 0; i < 100; i++) {\n+      Document doc = new Document();\n+      doc.add(newStringField(\"field\", Integer.toString(i), Field.Store.NO));\n+      doc.add(newStringField(\"field2\", Boolean.toString(i % 2 == 0), Field.Store.NO));\n+      doc.add(new SortedDocValuesField(\"field2\", new BytesRef(Boolean.toString(i % 2 == 0))));\n+      iw2.addDocument(doc);\n+\n+      if (random.nextBoolean()) {\n+        iw2.commit();\n+      }\n+    }\n+    reader2 = iw2.getReader();\n+    iw2.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b8e10b15248593f94419f55bbc86b9b90448b75"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU0MjI4MQ==", "bodyText": "reader2 has random commits baked into it to ensure random slice distributions each time the test is run.", "url": "https://github.com/apache/lucene-solr/pull/1294#discussion_r401542281", "createdAt": "2020-04-01T11:23:17Z", "author": {"login": "atris"}, "path": "lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher.java", "diffHunk": "@@ -70,13 +75,31 @@ public void setUp() throws Exception {\n     }\n     reader = iw.getReader();\n     iw.close();\n+\n+    Random random = random();\n+    RandomIndexWriter iw2 = new RandomIndexWriter(random(), dir2, newIndexWriterConfig().setMergePolicy(newLogMergePolicy()));\n+    for (int i = 0; i < 100; i++) {\n+      Document doc = new Document();\n+      doc.add(newStringField(\"field\", Integer.toString(i), Field.Store.NO));\n+      doc.add(newStringField(\"field2\", Boolean.toString(i % 2 == 0), Field.Store.NO));\n+      doc.add(new SortedDocValuesField(\"field2\", new BytesRef(Boolean.toString(i % 2 == 0))));\n+      iw2.addDocument(doc);\n+\n+      if (random.nextBoolean()) {\n+        iw2.commit();\n+      }\n+    }\n+    reader2 = iw2.getReader();\n+    iw2.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ5MTA3Nw=="}, "originalCommit": {"oid": "1b8e10b15248593f94419f55bbc86b9b90448b75"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU1NTM2OQ==", "bodyText": "Would it be a problem to add these random commits to the existing reader?", "url": "https://github.com/apache/lucene-solr/pull/1294#discussion_r401555369", "createdAt": "2020-04-01T11:49:21Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher.java", "diffHunk": "@@ -70,13 +75,31 @@ public void setUp() throws Exception {\n     }\n     reader = iw.getReader();\n     iw.close();\n+\n+    Random random = random();\n+    RandomIndexWriter iw2 = new RandomIndexWriter(random(), dir2, newIndexWriterConfig().setMergePolicy(newLogMergePolicy()));\n+    for (int i = 0; i < 100; i++) {\n+      Document doc = new Document();\n+      doc.add(newStringField(\"field\", Integer.toString(i), Field.Store.NO));\n+      doc.add(newStringField(\"field2\", Boolean.toString(i % 2 == 0), Field.Store.NO));\n+      doc.add(new SortedDocValuesField(\"field2\", new BytesRef(Boolean.toString(i % 2 == 0))));\n+      iw2.addDocument(doc);\n+\n+      if (random.nextBoolean()) {\n+        iw2.commit();\n+      }\n+    }\n+    reader2 = iw2.getReader();\n+    iw2.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ5MTA3Nw=="}, "originalCommit": {"oid": "1b8e10b15248593f94419f55bbc86b9b90448b75"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU2NTc3Ng==", "bodyText": "I did not want to touch the existing reader since it is used by many tests -- dont see any risk though, given the specifics of the tests that use the existing reader, should be safe. Updated, thanks", "url": "https://github.com/apache/lucene-solr/pull/1294#discussion_r401565776", "createdAt": "2020-04-01T12:09:53Z", "author": {"login": "atris"}, "path": "lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher.java", "diffHunk": "@@ -70,13 +75,31 @@ public void setUp() throws Exception {\n     }\n     reader = iw.getReader();\n     iw.close();\n+\n+    Random random = random();\n+    RandomIndexWriter iw2 = new RandomIndexWriter(random(), dir2, newIndexWriterConfig().setMergePolicy(newLogMergePolicy()));\n+    for (int i = 0; i < 100; i++) {\n+      Document doc = new Document();\n+      doc.add(newStringField(\"field\", Integer.toString(i), Field.Store.NO));\n+      doc.add(newStringField(\"field2\", Boolean.toString(i % 2 == 0), Field.Store.NO));\n+      doc.add(new SortedDocValuesField(\"field2\", new BytesRef(Boolean.toString(i % 2 == 0))));\n+      iw2.addDocument(doc);\n+\n+      if (random.nextBoolean()) {\n+        iw2.commit();\n+      }\n+    }\n+    reader2 = iw2.getReader();\n+    iw2.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ5MTA3Nw=="}, "originalCommit": {"oid": "1b8e10b15248593f94419f55bbc86b9b90448b75"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDUwNzEzOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjo0MDoxNlrOF--ruA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjo0MDoxNlrOF--ruA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU4MzAzMg==", "bodyText": "this is covered by the below assert already?", "url": "https://github.com/apache/lucene-solr/pull/1294#discussion_r401583032", "createdAt": "2020-04-01T12:40:16Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java", "diffHunk": "@@ -208,9 +210,21 @@ public IndexSearcher(IndexReader r, Executor executor) {\n    * @lucene.experimental\n    */\n   public IndexSearcher(IndexReaderContext context, Executor executor) {\n+    this(context, executor, getSliceExecutionControlPlane(executor));\n+  }\n+\n+  // Package private for testing\n+  IndexSearcher(IndexReaderContext context, Executor executor, SliceExecutor sliceExecutor) {\n     assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader();\n+    if (executor == null) {\n+      assert sliceExecutor == null;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5e9dbb5bdb498a369afc6b4b1a3d421b1558e14"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDUxNTY2OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjo0Mjo0MFrOF--xOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjo0Mjo0MFrOF--xOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU4NDQ0Mw==", "bodyText": "we should use assertTrue rather than assert in tests, since the latter only runs when assertions are enabled, and it can be useful to run tests with assertions disabled to make sure that the logic remains correct when assertions are off", "url": "https://github.com/apache/lucene-solr/pull/1294#discussion_r401584443", "createdAt": "2020-04-01T12:42:40Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher.java", "diffHunk": "@@ -347,4 +354,89 @@ public void execute(final Runnable runnable) {\n       throw new RejectedExecutionException();\n     }\n   }\n+\n+  public void testQueueSizeBasedSliceExecutor() throws Exception {\n+    ThreadPoolExecutor service = new ThreadPoolExecutor(4, 4, 0L, TimeUnit.MILLISECONDS,\n+        new LinkedBlockingQueue<Runnable>(),\n+        new NamedThreadFactory(\"TestIndexSearcher\"));\n+\n+    runSliceExecutorTest(service, false);\n+\n+    TestUtil.shutdownExecutorService(service);\n+  }\n+\n+  public void testRandomBlockingSliceExecutor() throws Exception {\n+    ThreadPoolExecutor service = new ThreadPoolExecutor(4, 4, 0L, TimeUnit.MILLISECONDS,\n+        new LinkedBlockingQueue<Runnable>(),\n+        new NamedThreadFactory(\"TestIndexSearcher\"));\n+\n+    runSliceExecutorTest(service, true);\n+\n+    TestUtil.shutdownExecutorService(service);\n+  }\n+\n+  private void runSliceExecutorTest(ThreadPoolExecutor service, boolean useRandomSliceExecutor) throws Exception {\n+    SliceExecutor sliceExecutor = useRandomSliceExecutor == true ? new RandomBlockingSliceExecutor(service) :\n+                                                              new QueueSizeBasedExecutor(service);\n+\n+    IndexSearcher searcher = new IndexSearcher(reader.getContext(), service, sliceExecutor);\n+\n+    Query queries[] = new Query[] {\n+        new MatchAllDocsQuery(),\n+        new TermQuery(new Term(\"field\", \"1\"))\n+    };\n+    Sort sorts[] = new Sort[] {\n+        null,\n+        new Sort(new SortField(\"field2\", SortField.Type.STRING))\n+    };\n+    ScoreDoc afters[] = new ScoreDoc[] {\n+        null,\n+        new FieldDoc(0, 0f, new Object[] { new BytesRef(\"boo!\") })\n+    };\n+\n+    for (ScoreDoc after : afters) {\n+      for (Query query : queries) {\n+        for (Sort sort : sorts) {\n+          searcher.search(query, Integer.MAX_VALUE);\n+          searcher.searchAfter(after, query, Integer.MAX_VALUE);\n+          if (sort != null) {\n+            TopDocs topDocs = searcher.search(query, Integer.MAX_VALUE, sort);\n+            assert topDocs.totalHits.value > 0;\n+\n+            topDocs = searcher.search(query, Integer.MAX_VALUE, sort, true);\n+            assert topDocs.totalHits.value > 0;\n+\n+            topDocs = searcher.search(query, Integer.MAX_VALUE, sort, false);\n+            assert topDocs.totalHits.value > 0;\n+\n+            topDocs = searcher.searchAfter(after, query, Integer.MAX_VALUE, sort);\n+            assert topDocs.totalHits.value > 0;\n+\n+            topDocs = searcher.searchAfter(after, query, Integer.MAX_VALUE, sort, true);\n+            assert topDocs.totalHits.value > 0;\n+\n+            topDocs = searcher.searchAfter(after, query, Integer.MAX_VALUE, sort, false);\n+            assert topDocs.totalHits.value > 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5e9dbb5bdb498a369afc6b4b1a3d421b1558e14"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDExMjU3OTcxOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/search/SliceExecutor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wOVQwNzoxODo0N1rOJqAx7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xMVQxMjowNTo0MlrOJr0Mxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODAzMjc1MQ==", "bodyText": "Was there a reason for not making SliceExecutor public ?\nI'd want to inject my own SliceExecutor without having to fork Lucene", "url": "https://github.com/apache/lucene-solr/pull/1294#discussion_r648032751", "createdAt": "2021-06-09T07:18:47Z", "author": {"login": "16pierre"}, "path": "lucene/core/src/java/org/apache/lucene/search/SliceExecutor.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.search;\n+\n+import java.util.Collection;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * Executor which is responsible\n+ * for execution of slices based on the current status\n+ * of the system and current system load\n+ */\n+class SliceExecutor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efe4903b1020c4adba7db456f146bb7e75099f1d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODA0NzczMQ==", "bodyText": "Not really. I will fix this and add to current release", "url": "https://github.com/apache/lucene-solr/pull/1294#discussion_r648047731", "createdAt": "2021-06-09T07:40:21Z", "author": {"login": "atris"}, "path": "lucene/core/src/java/org/apache/lucene/search/SliceExecutor.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.search;\n+\n+import java.util.Collection;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * Executor which is responsible\n+ * for execution of slices based on the current status\n+ * of the system and current system load\n+ */\n+class SliceExecutor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODAzMjc1MQ=="}, "originalCommit": {"oid": "efe4903b1020c4adba7db456f146bb7e75099f1d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0OTkyMzc4Mw==", "bodyText": "Great thanks a lot !\nWhile I'm at it:\nthe reduce operation also runs on the main thread, it would be lovely to make this configurable.\nGlad to put up a PR for it if I find time. I'd hesitate between adding some more methods on SliceExecutor, or plumbing the reduce executor totally independently.\nThe name SliceExecutor feels awkward if we also add logic for reduce there. Since SliceExecutor wasn't public, maybe we can still afford a rename ?", "url": "https://github.com/apache/lucene-solr/pull/1294#discussion_r649923783", "createdAt": "2021-06-11T12:05:42Z", "author": {"login": "16pierre"}, "path": "lucene/core/src/java/org/apache/lucene/search/SliceExecutor.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.lucene.search;\n+\n+import java.util.Collection;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * Executor which is responsible\n+ * for execution of slices based on the current status\n+ * of the system and current system load\n+ */\n+class SliceExecutor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODAzMjc1MQ=="}, "originalCommit": {"oid": "efe4903b1020c4adba7db456f146bb7e75099f1d"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 826, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}