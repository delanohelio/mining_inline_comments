{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzMTU5NTkw", "number": 1170, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNjowNToyMlrODboN1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNjowNToyMlrODboN1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMjk3MDQ1OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/document/LatLonShape.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNjowNToyMlrOFjOHnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNjozMjozMlrOFjPJwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQ3NTgwNA==", "bodyText": "nit: do you think we could just name this newGeometryQuery? This way we just treat geometries and single and/or collections? Feels a little less confusing IMHO.", "url": "https://github.com/apache/lucene-solr/pull/1170#discussion_r372475804", "createdAt": "2020-01-29T16:05:22Z", "author": {"login": "nknize"}, "path": "lucene/core/src/java/org/apache/lucene/document/LatLonShape.java", "diffHunk": "@@ -107,40 +111,36 @@ public static Query newBoxQuery(String field, QueryRelation queryRelation, doubl\n    *  note: does not support dateline crossing\n    **/\n   public static Query newLineQuery(String field, QueryRelation queryRelation, Line... lines) {\n-    if (queryRelation == QueryRelation.CONTAINS && lines.length > 1) {\n-      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n-      for (int i =0; i < lines.length; i++) {\n-        builder.add(newLineQuery(field, queryRelation, lines[i]), BooleanClause.Occur.MUST);\n-      }\n-      return builder.build();\n-    }\n-    return new LatLonShapeLineQuery(field, queryRelation, lines);\n+    return newGeometryCollectionQuery(field, queryRelation, lines);\n   }\n \n   /** create a query to find all indexed geo shapes that intersect a provided polygon (or array of polygons)\n    *  note: does not support dateline crossing\n    **/\n   public static Query newPolygonQuery(String field, QueryRelation queryRelation, Polygon... polygons) {\n-    if (queryRelation == QueryRelation.CONTAINS && polygons.length > 1) {\n-      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n-      for (int i =0; i < polygons.length; i++) {\n-        builder.add(newPolygonQuery(field, queryRelation, polygons[i]), BooleanClause.Occur.MUST);\n-      }\n-      return builder.build();\n-    }\n-    return new LatLonShapePolygonQuery(field, queryRelation, polygons);\n+    return newGeometryCollectionQuery(field, queryRelation, polygons);\n   }\n \n-  /** create a query to find all indexed shapes that comply the {@link QueryRelation} with the provided point\n+  /** create a query to find all indexed shapes that comply the {@link QueryRelation} with the provided points\n    **/\n   public static Query newPointQuery(String field, QueryRelation queryRelation, double[]... points) {\n-    if (queryRelation == QueryRelation.CONTAINS && points.length > 1) {\n+    Point[] pointArray = new Point[points.length];\n+    for (int i =0; i < points.length; i++) {\n+      pointArray[i] = new Point(points[i][0], points[i][1]);\n+    }\n+    return newGeometryCollectionQuery(field, queryRelation, pointArray);\n+  }\n+\n+  /** create a query to find all indexed geo shapes that intersect a provided geometry collection.\n+   **/\n+  public static Query newGeometryCollectionQuery(String field, QueryRelation queryRelation, LatLonGeometry... latLonGeometries) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f43576a47f20810072ddc5d3d7ac906ec450062"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQ5MjczNg==", "bodyText": "Yes, I think it is a better name", "url": "https://github.com/apache/lucene-solr/pull/1170#discussion_r372492736", "createdAt": "2020-01-29T16:32:32Z", "author": {"login": "iverase"}, "path": "lucene/core/src/java/org/apache/lucene/document/LatLonShape.java", "diffHunk": "@@ -107,40 +111,36 @@ public static Query newBoxQuery(String field, QueryRelation queryRelation, doubl\n    *  note: does not support dateline crossing\n    **/\n   public static Query newLineQuery(String field, QueryRelation queryRelation, Line... lines) {\n-    if (queryRelation == QueryRelation.CONTAINS && lines.length > 1) {\n-      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n-      for (int i =0; i < lines.length; i++) {\n-        builder.add(newLineQuery(field, queryRelation, lines[i]), BooleanClause.Occur.MUST);\n-      }\n-      return builder.build();\n-    }\n-    return new LatLonShapeLineQuery(field, queryRelation, lines);\n+    return newGeometryCollectionQuery(field, queryRelation, lines);\n   }\n \n   /** create a query to find all indexed geo shapes that intersect a provided polygon (or array of polygons)\n    *  note: does not support dateline crossing\n    **/\n   public static Query newPolygonQuery(String field, QueryRelation queryRelation, Polygon... polygons) {\n-    if (queryRelation == QueryRelation.CONTAINS && polygons.length > 1) {\n-      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n-      for (int i =0; i < polygons.length; i++) {\n-        builder.add(newPolygonQuery(field, queryRelation, polygons[i]), BooleanClause.Occur.MUST);\n-      }\n-      return builder.build();\n-    }\n-    return new LatLonShapePolygonQuery(field, queryRelation, polygons);\n+    return newGeometryCollectionQuery(field, queryRelation, polygons);\n   }\n \n-  /** create a query to find all indexed shapes that comply the {@link QueryRelation} with the provided point\n+  /** create a query to find all indexed shapes that comply the {@link QueryRelation} with the provided points\n    **/\n   public static Query newPointQuery(String field, QueryRelation queryRelation, double[]... points) {\n-    if (queryRelation == QueryRelation.CONTAINS && points.length > 1) {\n+    Point[] pointArray = new Point[points.length];\n+    for (int i =0; i < points.length; i++) {\n+      pointArray[i] = new Point(points[i][0], points[i][1]);\n+    }\n+    return newGeometryCollectionQuery(field, queryRelation, pointArray);\n+  }\n+\n+  /** create a query to find all indexed geo shapes that intersect a provided geometry collection.\n+   **/\n+  public static Query newGeometryCollectionQuery(String field, QueryRelation queryRelation, LatLonGeometry... latLonGeometries) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQ3NTgwNA=="}, "originalCommit": {"oid": "1f43576a47f20810072ddc5d3d7ac906ec450062"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 955, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}