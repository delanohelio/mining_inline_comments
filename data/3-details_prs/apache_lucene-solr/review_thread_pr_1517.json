{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4MjczMDQ3", "number": 1517, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMTo0NTozNVrOD8tEBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMjowNDoxNVrOD8tPqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTc5NDYyOnYy", "diffSide": "RIGHT", "path": "solr/core/src/test/org/apache/solr/search/SolrIndexSearcherTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMTo0NTozNVrOGVzvlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNDoyMToxM1rOGV1_tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUyMTA0NQ==", "bodyText": "FYI today FunctionRangeQuery implements PostFilter but it soon won't: https://issues.apache.org/jira/browse/SOLR-14164", "url": "https://github.com/apache/lucene-solr/pull/1517#discussion_r425521045", "createdAt": "2020-05-15T01:45:35Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/test/org/apache/solr/search/SolrIndexSearcherTest.java", "diffHunk": "@@ -189,12 +206,95 @@ public void testMinExactHitsWithMaxScoreRequested() throws IOException {\n       cmd.setMinExactHits(2);\n       cmd.setFlags(SolrIndexSearcher.GET_SCORES);\n       cmd.setQuery(new TermQuery(new Term(\"field1_s\", \"foo\")));\n-      searcher.search(new QueryResult(), cmd);\n       QueryResult qr = new QueryResult();\n       searcher.search(qr, cmd);\n       assertMatchesGraterThan(NUM_DOCS, qr);\n       assertNotEquals(Float.NaN, qr.getDocList().maxScore());\n       return null;\n     });\n   }\n+  \n+  public void testMinExactWithFilters() throws Exception {\n+    \n+    h.getCore().withSearcher(searcher -> {\n+      //Sanity Check - No Filter\n+      QueryCommand cmd = new QueryCommand();\n+      cmd.setMinExactHits(1);\n+      cmd.setLen(1);\n+      cmd.setFlags(SolrIndexSearcher.NO_CHECK_QCACHE | SolrIndexSearcher.NO_SET_QCACHE);\n+      cmd.setQuery(new TermQuery(new Term(\"field4_t\", \"0\")));\n+      QueryResult qr = new QueryResult();\n+      searcher.search(qr, cmd);\n+      assertMatchesGraterThan(NUM_DOCS, qr);\n+      return null;\n+    });\n+    \n+    \n+    h.getCore().withSearcher(searcher -> {\n+      QueryCommand cmd = new QueryCommand();\n+      cmd.setMinExactHits(1);\n+      cmd.setLen(1);\n+      cmd.setFlags(SolrIndexSearcher.NO_CHECK_QCACHE | SolrIndexSearcher.NO_SET_QCACHE);\n+      cmd.setQuery(new TermQuery(new Term(\"field4_t\", \"0\")));\n+      FunctionRangeQuery filterQuery = new FunctionRangeQuery(new ValueSourceRangeFilter(new IntFieldSource(\"field3_i_dvo\"), \"19\", \"19\", true, true));\n+      cmd.setFilterList(filterQuery);\n+      filterQuery.setCache(false);\n+      filterQuery.setCost(0);\n+      assertNull(searcher.getProcessedFilter(null, cmd.getFilterList()).postFilter);\n+      QueryResult qr = new QueryResult();\n+      searcher.search(qr, cmd);\n+      assertMatchesEqual(1, qr);\n+      return null;\n+    });\n+  }\n+  \n+  public void testMinExactWithPostFilters() throws Exception {\n+    h.getCore().withSearcher(searcher -> {\n+      //Sanity Check - No Filter\n+      QueryCommand cmd = new QueryCommand();\n+      cmd.setMinExactHits(1);\n+      cmd.setLen(1);\n+      cmd.setFlags(SolrIndexSearcher.NO_CHECK_QCACHE | SolrIndexSearcher.NO_SET_QCACHE);\n+      cmd.setQuery(new TermQuery(new Term(\"field4_t\", \"0\")));\n+      QueryResult qr = new QueryResult();\n+      searcher.search(qr, cmd);\n+      assertMatchesGraterThan(NUM_DOCS, qr);\n+      return null;\n+    });\n+    \n+    \n+    h.getCore().withSearcher(searcher -> {\n+      QueryCommand cmd = new QueryCommand();\n+      cmd.setMinExactHits(1);\n+      cmd.setLen(1);\n+      cmd.setFlags(SolrIndexSearcher.NO_CHECK_QCACHE | SolrIndexSearcher.NO_SET_QCACHE);\n+      cmd.setQuery(new TermQuery(new Term(\"field4_t\", \"0\")));\n+      FunctionRangeQuery filterQuery = new FunctionRangeQuery(new ValueSourceRangeFilter(new IntFieldSource(\"field3_i_dvo\"), \"19\", \"19\", true, true));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "351c97f21542d81de6996a748c8cae779f6ca662"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU1Nzk0Mw==", "bodyText": "I didn't know about that Jira. I can look at having a Mock PostFilter here instead", "url": "https://github.com/apache/lucene-solr/pull/1517#discussion_r425557943", "createdAt": "2020-05-15T04:21:13Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/test/org/apache/solr/search/SolrIndexSearcherTest.java", "diffHunk": "@@ -189,12 +206,95 @@ public void testMinExactHitsWithMaxScoreRequested() throws IOException {\n       cmd.setMinExactHits(2);\n       cmd.setFlags(SolrIndexSearcher.GET_SCORES);\n       cmd.setQuery(new TermQuery(new Term(\"field1_s\", \"foo\")));\n-      searcher.search(new QueryResult(), cmd);\n       QueryResult qr = new QueryResult();\n       searcher.search(qr, cmd);\n       assertMatchesGraterThan(NUM_DOCS, qr);\n       assertNotEquals(Float.NaN, qr.getDocList().maxScore());\n       return null;\n     });\n   }\n+  \n+  public void testMinExactWithFilters() throws Exception {\n+    \n+    h.getCore().withSearcher(searcher -> {\n+      //Sanity Check - No Filter\n+      QueryCommand cmd = new QueryCommand();\n+      cmd.setMinExactHits(1);\n+      cmd.setLen(1);\n+      cmd.setFlags(SolrIndexSearcher.NO_CHECK_QCACHE | SolrIndexSearcher.NO_SET_QCACHE);\n+      cmd.setQuery(new TermQuery(new Term(\"field4_t\", \"0\")));\n+      QueryResult qr = new QueryResult();\n+      searcher.search(qr, cmd);\n+      assertMatchesGraterThan(NUM_DOCS, qr);\n+      return null;\n+    });\n+    \n+    \n+    h.getCore().withSearcher(searcher -> {\n+      QueryCommand cmd = new QueryCommand();\n+      cmd.setMinExactHits(1);\n+      cmd.setLen(1);\n+      cmd.setFlags(SolrIndexSearcher.NO_CHECK_QCACHE | SolrIndexSearcher.NO_SET_QCACHE);\n+      cmd.setQuery(new TermQuery(new Term(\"field4_t\", \"0\")));\n+      FunctionRangeQuery filterQuery = new FunctionRangeQuery(new ValueSourceRangeFilter(new IntFieldSource(\"field3_i_dvo\"), \"19\", \"19\", true, true));\n+      cmd.setFilterList(filterQuery);\n+      filterQuery.setCache(false);\n+      filterQuery.setCost(0);\n+      assertNull(searcher.getProcessedFilter(null, cmd.getFilterList()).postFilter);\n+      QueryResult qr = new QueryResult();\n+      searcher.search(qr, cmd);\n+      assertMatchesEqual(1, qr);\n+      return null;\n+    });\n+  }\n+  \n+  public void testMinExactWithPostFilters() throws Exception {\n+    h.getCore().withSearcher(searcher -> {\n+      //Sanity Check - No Filter\n+      QueryCommand cmd = new QueryCommand();\n+      cmd.setMinExactHits(1);\n+      cmd.setLen(1);\n+      cmd.setFlags(SolrIndexSearcher.NO_CHECK_QCACHE | SolrIndexSearcher.NO_SET_QCACHE);\n+      cmd.setQuery(new TermQuery(new Term(\"field4_t\", \"0\")));\n+      QueryResult qr = new QueryResult();\n+      searcher.search(qr, cmd);\n+      assertMatchesGraterThan(NUM_DOCS, qr);\n+      return null;\n+    });\n+    \n+    \n+    h.getCore().withSearcher(searcher -> {\n+      QueryCommand cmd = new QueryCommand();\n+      cmd.setMinExactHits(1);\n+      cmd.setLen(1);\n+      cmd.setFlags(SolrIndexSearcher.NO_CHECK_QCACHE | SolrIndexSearcher.NO_SET_QCACHE);\n+      cmd.setQuery(new TermQuery(new Term(\"field4_t\", \"0\")));\n+      FunctionRangeQuery filterQuery = new FunctionRangeQuery(new ValueSourceRangeFilter(new IntFieldSource(\"field3_i_dvo\"), \"19\", \"19\", true, true));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUyMTA0NQ=="}, "originalCommit": {"oid": "351c97f21542d81de6996a748c8cae779f6ca662"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTgyNDQyOnYy", "diffSide": "RIGHT", "path": "solr/core/src/test/org/apache/solr/search/SolrIndexSearcherTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMjowNDoxNVrOGV0BiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNDoyMDoxN1rOGV1-7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUyNTY0MQ==", "bodyText": "Curious; why are you writing tests with this low-level way vs testMinExactHitsDisabledByCollapse which I wrote in a more common higher level style that is more succinct?  Is it only for this NO_CHECK_QCACHE distinction?  Can that be done simply by disabling the cache?  Not a big deal but just want to know your point of view.", "url": "https://github.com/apache/lucene-solr/pull/1517#discussion_r425525641", "createdAt": "2020-05-15T02:04:15Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/test/org/apache/solr/search/SolrIndexSearcherTest.java", "diffHunk": "@@ -189,12 +206,95 @@ public void testMinExactHitsWithMaxScoreRequested() throws IOException {\n       cmd.setMinExactHits(2);\n       cmd.setFlags(SolrIndexSearcher.GET_SCORES);\n       cmd.setQuery(new TermQuery(new Term(\"field1_s\", \"foo\")));\n-      searcher.search(new QueryResult(), cmd);\n       QueryResult qr = new QueryResult();\n       searcher.search(qr, cmd);\n       assertMatchesGraterThan(NUM_DOCS, qr);\n       assertNotEquals(Float.NaN, qr.getDocList().maxScore());\n       return null;\n     });\n   }\n+  \n+  public void testMinExactWithFilters() throws Exception {\n+    \n+    h.getCore().withSearcher(searcher -> {\n+      //Sanity Check - No Filter\n+      QueryCommand cmd = new QueryCommand();\n+      cmd.setMinExactHits(1);\n+      cmd.setLen(1);\n+      cmd.setFlags(SolrIndexSearcher.NO_CHECK_QCACHE | SolrIndexSearcher.NO_SET_QCACHE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "351c97f21542d81de6996a748c8cae779f6ca662"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU1Nzc0MQ==", "bodyText": "just trying to make the test cover specifically what I was working on. It can definitely be done with a higher level test or integration test.", "url": "https://github.com/apache/lucene-solr/pull/1517#discussion_r425557741", "createdAt": "2020-05-15T04:20:17Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/test/org/apache/solr/search/SolrIndexSearcherTest.java", "diffHunk": "@@ -189,12 +206,95 @@ public void testMinExactHitsWithMaxScoreRequested() throws IOException {\n       cmd.setMinExactHits(2);\n       cmd.setFlags(SolrIndexSearcher.GET_SCORES);\n       cmd.setQuery(new TermQuery(new Term(\"field1_s\", \"foo\")));\n-      searcher.search(new QueryResult(), cmd);\n       QueryResult qr = new QueryResult();\n       searcher.search(qr, cmd);\n       assertMatchesGraterThan(NUM_DOCS, qr);\n       assertNotEquals(Float.NaN, qr.getDocList().maxScore());\n       return null;\n     });\n   }\n+  \n+  public void testMinExactWithFilters() throws Exception {\n+    \n+    h.getCore().withSearcher(searcher -> {\n+      //Sanity Check - No Filter\n+      QueryCommand cmd = new QueryCommand();\n+      cmd.setMinExactHits(1);\n+      cmd.setLen(1);\n+      cmd.setFlags(SolrIndexSearcher.NO_CHECK_QCACHE | SolrIndexSearcher.NO_SET_QCACHE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUyNTY0MQ=="}, "originalCommit": {"oid": "351c97f21542d81de6996a748c8cae779f6ca662"}, "originalPosition": 81}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1410, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}