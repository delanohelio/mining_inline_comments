{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwMjIyMzYw", "number": 2037, "title": "LUCENE-9583: extract separate RandomAccessVectorValues interface", "bodyText": "This moves the random access vector interface out of VectorValues with the idea of making it less prominent. All implementations still support it, and it is required by the codec, but the public-facing VectorValues api becomes cleaner.", "createdAt": "2020-10-26T18:22:21Z", "url": "https://github.com/apache/lucene-solr/pull/2037", "merged": true, "mergeCommit": {"oid": "8be0cea5442c2edab260d0598b920ba832506f80"}, "closed": true, "closedAt": "2020-11-09T15:46:17Z", "author": {"login": "msokolov"}, "timelineItems": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdWYjDtgH2gAyNTEwMjIyMzYwOjAwZTIzMDcxNzM5NzQ1NTAzOWQ5OTU5NjlkMWZiMzI0OGYzMjA0YTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdXmJlIgFqTUyMDYzMTU1NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "00e230717397455039d995969d1fb3248f3204a0", "author": {"user": null}, "url": "https://github.com/apache/lucene-solr/commit/00e230717397455039d995969d1fb3248f3204a0", "committedDate": "2020-10-26T18:19:35Z", "message": "LUCENE-9583: extract separate RandomAccessVectorValues interface"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwNjMxNTU1", "url": "https://github.com/apache/lucene-solr/pull/2037#pullrequestreview-520631555", "createdAt": "2020-10-30T12:44:06Z", "commit": {"oid": "00e230717397455039d995969d1fb3248f3204a0"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMjo0NDowNlrOHrNb1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMjo0NDowNlrOHrNb1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA3MDkzNA==", "bodyText": "Is it intentional that we are leaving search on VectorValues, but moving searchStrategy to RandomAccessVectorValues?", "url": "https://github.com/apache/lucene-solr/pull/2037#discussion_r515070934", "createdAt": "2020-10-30T12:44:06Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/VectorValues.java", "diffHunk": "@@ -75,68 +75,23 @@ public BytesRef binaryValue() throws IOException {\n   }\n \n   /**\n-   * Return a random access interface over this iterator's vectors. Calling the RandomAccess methods will\n-   * have no effect on the progress of the iteration or the values returned by this iterator. Successive calls\n-   * will retrieve independent copies that do not overwrite each others' returned values.\n+   * Return the k nearest neighbor documents as determined by comparison of their vector values\n+   * for this field, to the given vector, by the field's search strategy. If the search strategy is\n+   * reversed, lower values indicate nearer vectors, otherwise higher scores indicate nearer\n+   * vectors. Unlike relevance scores, vector scores may be negative.\n+   * @param target the vector-valued query\n+   * @param k      the number of docs to return\n+   * @param fanout control the accuracy/speed tradeoff - larger values give better recall at higher cost\n+   * @return the k nearest neighbor documents, along with their (searchStrategy-specific) scores.\n    */\n-  public abstract RandomAccess randomAccess();\n-\n-  /**\n-   * Provides random access to vectors by dense ordinal.\n-   *\n-   * @lucene.experimental\n-   */\n-  public interface RandomAccess {\n-\n-    /**\n-     * Return the number of vector values\n-     */\n-    int size();\n-\n-    /**\n-     * Return the dimension of the returned vector values\n-     */\n-    int dimension();\n-\n-    /**\n-     * Return the search strategy used to compare these vectors\n-     */\n-    SearchStrategy searchStrategy();\n-\n-    /**\n-     * Return the vector value indexed at the given ordinal. The provided floating point array may\n-     * be shared and overwritten by subsequent calls to this method and {@link #binaryValue(int)}.\n-     * @param targetOrd a valid ordinal, &ge; 0 and &lt; {@link #size()}.\n-     */\n-    float[] vectorValue(int targetOrd) throws IOException;\n-\n-    /**\n-     * Return the vector indexed at the given ordinal value as an array of bytes in a BytesRef;\n-     * these are the bytes corresponding to the float array. The provided bytes may be shared and overwritten \n-     * by subsequent calls to this method and {@link #vectorValue(int)}.\n-     * @param targetOrd a valid ordinal, &ge; 0 and &lt; {@link #size()}.\n-     */\n-    BytesRef binaryValue(int targetOrd) throws IOException;\n-\n-    /**\n-     * Return the k nearest neighbor documents as determined by comparison of their vector values\n-     * for this field, to the given vector, by the field's search strategy. If the search strategy is\n-     * reversed, lower values indicate nearer vectors, otherwise higher scores indicate nearer\n-     * vectors. Unlike relevance scores, vector scores may be negative.\n-     * @param target the vector-valued query\n-     * @param k      the number of docs to return\n-     * @param fanout control the accuracy/speed tradeoff - larger values give better recall at higher cost\n-     * @return the k nearest neighbor documents, along with their (searchStrategy-specific) scores.\n-     */\n-    TopDocs search(float[] target, int k, int fanout) throws IOException;\n-  }\n+  public abstract TopDocs search(float[] target, int k, int fanout) throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00e230717397455039d995969d1fb3248f3204a0"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2526, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}