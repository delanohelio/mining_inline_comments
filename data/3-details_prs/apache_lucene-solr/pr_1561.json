{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMTQ4NDUz", "number": 1561, "title": "SOLR-14546: OverseerTaskProcessor can process messages out of order", "bodyText": "Description\nMake sure Collection API tasks are processed in enqueue order by the Overseer and OverseerCollectionMessageHandler\nSolution\nThe LockTree.Session class already existed to address that need but there were a few missing pieces preventing it from doing so. Added these pieces.\nTests\nA previously failing test MultiThreadedOCPTest (SOLR-14524) no longer fails. Also ran local massive enqueue tests into Collection API ZK queue and instrumented OverseerTaskProcessor to verify dequeue is in order (requires heavy handed code hacks so this was only run locally to help diagnose and verify).\nChecklist\nPlease review the following and check all that apply:\n\n I have reviewed the guidelines for How to Contribute and my code conforms to the standards described there to the best of my ability.\n I have created a Jira issue and added the issue ID to my pull request title.\n I have given Solr maintainers access to contribute to my PR branch. (optional but recommended)\n I have developed this patch against the master branch.\n I have run ant precommit and the appropriate test suite.\n I have added tests for my changes.\n I have added documentation for the Ref Guide (for Solr changes only).", "createdAt": "2020-06-10T01:34:01Z", "url": "https://github.com/apache/lucene-solr/pull/1561", "merged": true, "mergeCommit": {"oid": "3e42286e9e78ffe74c791426fe321ca28c4671bd"}, "closed": true, "closedAt": "2020-06-23T14:16:47Z", "author": {"login": "murblanc"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcpvRr7AH2gAyNDMyMTQ4NDUzOjA5NDZlY2E2MDg4NzMwOGJiYzJiMTg2NTEyNjU5Y2M2NmM5MzVkMDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABct4G91AH2gAyNDMyMTQ4NDUzOmM5NmVmNzFmNzMxNzBmZDEzZGNmMzM3ZjFhMGNlYjM0N2M0NTA1NDI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0946eca60887308bbc2b186512659cc66c935d07", "author": {"user": {"login": "murblanc", "name": "Ilan Ginzburg"}}, "url": "https://github.com/apache/lucene-solr/commit/0946eca60887308bbc2b186512659cc66c935d07", "committedDate": "2020-06-10T01:21:50Z", "message": "SOLR-14546: OverseerTaskProcessor can process messages out of order"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MDczMTE5", "url": "https://github.com/apache/lucene-solr/pull/1561#pullrequestreview-429073119", "createdAt": "2020-06-11T16:13:59Z", "commit": {"oid": "0946eca60887308bbc2b186512659cc66c935d07"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjoxMzo1OVrOGikx5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzozODo0NVrOGinx5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwNzM2NQ==", "bodyText": "This javadoc includes a sentence fragment, can we complete the thought while we're improving documentation in this area?", "url": "https://github.com/apache/lucene-solr/pull/1561#discussion_r438907365", "createdAt": "2020-06-11T16:13:59Z", "author": {"login": "madrob"}, "path": "solr/core/src/java/org/apache/solr/cloud/OverseerMessageHandler.java", "diffHunk": "@@ -50,7 +50,7 @@\n   /**Try to provide an exclusive lock for this particular task\n    * return null if locking is not possible. If locking is not necessary", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0946eca60887308bbc2b186512659cc66c935d07"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwNzk3NQ==", "bodyText": "I don't understand what this comment means.", "url": "https://github.com/apache/lucene-solr/pull/1561#discussion_r438907975", "createdAt": "2020-06-11T16:14:58Z", "author": {"login": "madrob"}, "path": "solr/core/src/java/org/apache/solr/cloud/LockTree.java", "diffHunk": "@@ -89,22 +98,29 @@ public Lock lock(CollectionParams.CollectionAction action, List<String> path) {\n       this.level = level;\n     }\n \n-    void markBusy(List<String> path, int depth) {\n-      if (path.size() == depth) {\n+    /**\n+     * Marks busy the SessionNode corresponding to lockLevel (node names coming from <code>path</code>).\n+     * @param path size is at least <code>lockLevel.getHeight()</code>, to capture which node should be marked busy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0946eca60887308bbc2b186512659cc66c935d07"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkyMzY3MA==", "bodyText": "This reference to runningTasks isn't synchronized. Is that an issue?", "url": "https://github.com/apache/lucene-solr/pull/1561#discussion_r438923670", "createdAt": "2020-06-11T16:40:19Z", "author": {"login": "madrob"}, "path": "solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.java", "diffHunk": "@@ -95,16 +95,25 @@\n \n   private volatile Stats stats;\n \n-  // Set of tasks that have been picked up for processing but not cleaned up from zk work-queue.\n-  // It may contain tasks that have completed execution, have been entered into the completed/failed map in zk but not\n-  // deleted from the work-queue as that is a batched operation.\n+  /**\n+   * Set of tasks that have been picked up for processing but not cleaned up from zk work-queue.\n+   * It may contain tasks that have completed execution, have been entered into the completed/failed map in zk but not\n+   * deleted from the work-queue as that is a batched operation.\n+   */\n   final private Set<String> runningZKTasks;\n-  // This map may contain tasks which are read from work queue but could not\n-  // be executed because they are blocked or the execution queue is full\n-  // This is an optimization to ensure that we do not read the same tasks\n-  // again and again from ZK.\n+\n+  /**\n+   * This map may contain tasks which are read from work queue but could not\n+   * be executed because they are blocked or the execution queue is full\n+   * This is an optimization to ensure that we do not read the same tasks\n+   * again and again from ZK.\n+   */\n   final private Map<String, QueueEvent> blockedTasks = Collections.synchronizedMap(new LinkedHashMap<>());\n-  final private Predicate<String> excludedTasks = new Predicate<String>() {\n+\n+  /**\n+   * Predicate used to filter out tasks from the Zookeeper queue that should not be returned for processing.\n+   */\n+  final private Predicate<String> excludedTasks = new Predicate<>() {\n     @Override\n     public boolean test(String s) {\n       return runningTasks.contains(s) || blockedTasks.containsKey(s);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0946eca60887308bbc2b186512659cc66c935d07"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkyNTU0MA==", "bodyText": "Since there is so much synchronized access to this, should it be a ConcurrentHashMap.newKeySet();", "url": "https://github.com/apache/lucene-solr/pull/1561#discussion_r438925540", "createdAt": "2020-06-11T16:43:32Z", "author": {"login": "madrob"}, "path": "solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.java", "diffHunk": "@@ -95,16 +95,25 @@\n \n   private volatile Stats stats;\n \n-  // Set of tasks that have been picked up for processing but not cleaned up from zk work-queue.\n-  // It may contain tasks that have completed execution, have been entered into the completed/failed map in zk but not\n-  // deleted from the work-queue as that is a batched operation.\n+  /**\n+   * Set of tasks that have been picked up for processing but not cleaned up from zk work-queue.\n+   * It may contain tasks that have completed execution, have been entered into the completed/failed map in zk but not\n+   * deleted from the work-queue as that is a batched operation.\n+   */\n   final private Set<String> runningZKTasks;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0946eca60887308bbc2b186512659cc66c935d07"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkyNTg3Nw==", "bodyText": "Similar here, can this be a ConcurrentHashMap instead of a synchronized map?", "url": "https://github.com/apache/lucene-solr/pull/1561#discussion_r438925877", "createdAt": "2020-06-11T16:44:06Z", "author": {"login": "madrob"}, "path": "solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.java", "diffHunk": "@@ -95,16 +95,25 @@\n \n   private volatile Stats stats;\n \n-  // Set of tasks that have been picked up for processing but not cleaned up from zk work-queue.\n-  // It may contain tasks that have completed execution, have been entered into the completed/failed map in zk but not\n-  // deleted from the work-queue as that is a batched operation.\n+  /**\n+   * Set of tasks that have been picked up for processing but not cleaned up from zk work-queue.\n+   * It may contain tasks that have completed execution, have been entered into the completed/failed map in zk but not\n+   * deleted from the work-queue as that is a batched operation.\n+   */\n   final private Set<String> runningZKTasks;\n-  // This map may contain tasks which are read from work queue but could not\n-  // be executed because they are blocked or the execution queue is full\n-  // This is an optimization to ensure that we do not read the same tasks\n-  // again and again from ZK.\n+\n+  /**\n+   * This map may contain tasks which are read from work queue but could not\n+   * be executed because they are blocked or the execution queue is full\n+   * This is an optimization to ensure that we do not read the same tasks\n+   * again and again from ZK.\n+   */\n   final private Map<String, QueueEvent> blockedTasks = Collections.synchronizedMap(new LinkedHashMap<>());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0946eca60887308bbc2b186512659cc66c935d07"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk1NTQxNg==", "bodyText": "This is the only usage of clear in the code, can we remove that method completely? Is this safe to not call clear?", "url": "https://github.com/apache/lucene-solr/pull/1561#discussion_r438955416", "createdAt": "2020-06-11T17:36:44Z", "author": {"login": "madrob"}, "path": "solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler.java", "diffHunk": "@@ -867,26 +866,25 @@ public String getTaskKey(ZkNodeProps message) {\n   }\n \n \n+  // -1 is not a possible batchSessionId so -1 will force initialization of lockSession\n   private long sessionId = -1;\n   private LockTree.Session lockSession;\n \n   @Override\n-  public Lock lockTask(ZkNodeProps message, OverseerTaskProcessor.TaskBatch taskBatch) {\n-    if (lockSession == null || sessionId != taskBatch.getId()) {\n+  public Lock lockTask(ZkNodeProps message, long batchSessionId) {\n+    if (sessionId != batchSessionId) {\n       //this is always called in the same thread.\n       //Each batch is supposed to have a new taskBatch\n       //So if taskBatch changes we must create a new Session\n-      // also check if the running tasks are empty. If yes, clear lockTree\n-      // this will ensure that locks are not 'leaked'\n-      if(taskBatch.getRunningTasks() == 0) lockTree.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0946eca60887308bbc2b186512659cc66c935d07"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk1NTk0Ng==", "bodyText": "I don't think it makes sense to reorder them here.", "url": "https://github.com/apache/lucene-solr/pull/1561#discussion_r438955946", "createdAt": "2020-06-11T17:37:47Z", "author": {"login": "madrob"}, "path": "solr/solrj/src/java/org/apache/solr/common/params/CollectionParams.java", "diffHunk": "@@ -42,31 +42,30 @@\n \n \n   enum LockLevel {\n-    CLUSTER(0),\n-    COLLECTION(1),\n-    SHARD(2),\n-    REPLICA(3),\n-    NONE(10);\n-\n-    public final int level;\n-\n-    LockLevel(int i) {\n-      this.level = i;\n+    NONE(10, null),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0946eca60887308bbc2b186512659cc66c935d07"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk1NjUxNg==", "bodyText": "Why do we no longer need to check against the upper limit of BLOCKED_TASKS?", "url": "https://github.com/apache/lucene-solr/pull/1561#discussion_r438956516", "createdAt": "2020-06-11T17:38:45Z", "author": {"login": "madrob"}, "path": "solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.java", "diffHunk": "@@ -253,20 +277,22 @@ public void run() {\n             continue;\n           }\n \n-          blockedTasks.clear(); // clear it now; may get refilled below.\n+          // clear the blocked tasks, may get refilled below. Given blockedTasks can only get entries from heads and heads\n+          // has at most MAX_BLOCKED_TASKS tasks, blockedTasks will never exceed MAX_BLOCKED_TASKS entries.\n+          // Note blockedTasks can't be cleared too early as it is used in the excludedTasks Predicate above.\n+          blockedTasks.clear();\n+\n+          // Trigger the creation of a new Session used for locking when/if a lock is later acquired on the OverseerCollectionMessageHandler\n+          batchSessionId++;\n \n-          taskBatch.batchId++;\n           boolean tooManyTasks = false;\n           for (QueueEvent head : heads) {\n             if (!tooManyTasks) {\n-              synchronized (runningTasks) {\n                 tooManyTasks = runningTasksSize() >= MAX_PARALLEL_TASKS;\n-              }\n             }\n             if (tooManyTasks) {\n               // Too many tasks are running, just shove the rest into the \"blocked\" queue.\n-              if(blockedTasks.size() < MAX_BLOCKED_TASKS)\n-                blockedTasks.put(head.getId(), head);\n+              blockedTasks.put(head.getId(), head);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0946eca60887308bbc2b186512659cc66c935d07"}, "originalPosition": 123}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c05a011df9ec94f1d3e0be36381eaa50e3919bd", "author": {"user": {"login": "murblanc", "name": "Ilan Ginzburg"}}, "url": "https://github.com/apache/lucene-solr/commit/3c05a011df9ec94f1d3e0be36381eaa50e3919bd", "committedDate": "2020-06-11T19:24:28Z", "message": "SOLR-14546: comments from Mike Drob"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77b171b6fd5ef2eff05ea6e6d29905d3b31e5a98", "author": {"user": {"login": "murblanc", "name": "Ilan Ginzburg"}}, "url": "https://github.com/apache/lucene-solr/commit/77b171b6fd5ef2eff05ea6e6d29905d3b31e5a98", "committedDate": "2020-06-22T17:04:51Z", "message": "SOLR-14546: OverseerTaskProcessor can process messages out of order"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f304263cb4109b90d24bc9876944ee5cb6df0a10", "author": {"user": {"login": "murblanc", "name": "Ilan Ginzburg"}}, "url": "https://github.com/apache/lucene-solr/commit/f304263cb4109b90d24bc9876944ee5cb6df0a10", "committedDate": "2020-06-22T17:04:51Z", "message": "SOLR-14546: comments from Mike Drob"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ef911accb077ccca93f8838a952fd40e2c2b073", "author": {"user": {"login": "murblanc", "name": "Ilan Ginzburg"}}, "url": "https://github.com/apache/lucene-solr/commit/9ef911accb077ccca93f8838a952fd40e2c2b073", "committedDate": "2020-06-22T17:30:15Z", "message": "SOLR-14546: update CHANGES.txt"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a6d922e52efef91fc0cb5c318353d1d8be9372f", "author": {"user": {"login": "murblanc", "name": "Ilan Ginzburg"}}, "url": "https://github.com/apache/lucene-solr/commit/9a6d922e52efef91fc0cb5c318353d1d8be9372f", "committedDate": "2020-06-22T18:01:03Z", "message": "Merge branch 'SOLR-14546' of github.com:murblanc/lucene-solr into SOLR-14546"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c96ef71f73170fd13dcf337f1a0ceb347c450542", "author": {"user": {"login": "murblanc", "name": "Ilan Ginzburg"}}, "url": "https://github.com/apache/lucene-solr/commit/c96ef71f73170fd13dcf337f1a0ceb347c450542", "committedDate": "2020-06-22T21:54:58Z", "message": "Merge branch 'master' of https://github.com/apache/lucene-solr into SOLR-14546"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2592, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}