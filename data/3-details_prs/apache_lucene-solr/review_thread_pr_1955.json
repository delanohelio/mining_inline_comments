{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4ODU0NjY5", "number": 1955, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMjoxMDo0MlrOEq8G4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMjoxMDo0MlrOEq8G4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDYwNDUxOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/search/Weight.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMjoxMDo0MlrOHdbtxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMjo1NDo0NlrOHdgztA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYyNDgzOQ==", "bodyText": "but that's not true, it it?", "url": "https://github.com/apache/lucene-solr/pull/1955#discussion_r500624839", "createdAt": "2020-10-06T22:10:42Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/search/Weight.java", "diffHunk": "@@ -204,21 +204,21 @@ public int score(LeafCollector collector, Bits acceptDocs, int min, int max) thr\n       collector.setScorer(scorer);\n       DocIdSetIterator scorerIterator = twoPhase == null ? iterator : twoPhase.approximation();\n       DocIdSetIterator collectorIterator = collector.competitiveIterator();\n-      DocIdSetIterator filteredIterator;\n-      if (collectorIterator == null) {\n-        filteredIterator = scorerIterator;\n-      } else {\n-        if (scorerIterator.docID() != -1) {\n-          // Wrap ScorerIterator to start from -1 for conjunction \n-          scorerIterator = new RangeDISIWrapper(scorerIterator, max);\n-        }\n-        // filter scorerIterator to keep only competitive docs as defined by collector\n-        filteredIterator = ConjunctionDISI.intersectIterators(Arrays.asList(scorerIterator, collectorIterator));\n-      }\n+      DocIdSetIterator filteredIterator = scorerIterator;\n       if (filteredIterator.docID() == -1 && min == 0 && max == DocIdSetIterator.NO_MORE_DOCS) {\n+        if (collectorIterator != null) {\n+          filteredIterator = ConjunctionDISI.intersectIterators(Arrays.asList(scorerIterator, collectorIterator));\n+        }\n         scoreAll(collector, filteredIterator, twoPhase, acceptDocs);\n         return DocIdSetIterator.NO_MORE_DOCS;\n       } else {\n+        if (collectorIterator != null) {\n+          if (scorerIterator.docID() != -1) {\n+            // here we assume that the initial version of collectorIterator matches all docs and can advance exactly to the desired docID", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ca2deba729549f127890198725ea2b4304b05e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3MzgxMw==", "bodyText": "Thanks for the comment, I will think about this more", "url": "https://github.com/apache/lucene-solr/pull/1955#discussion_r500673813", "createdAt": "2020-10-07T00:44:21Z", "author": {"login": "mayya-sharipova"}, "path": "lucene/core/src/java/org/apache/lucene/search/Weight.java", "diffHunk": "@@ -204,21 +204,21 @@ public int score(LeafCollector collector, Bits acceptDocs, int min, int max) thr\n       collector.setScorer(scorer);\n       DocIdSetIterator scorerIterator = twoPhase == null ? iterator : twoPhase.approximation();\n       DocIdSetIterator collectorIterator = collector.competitiveIterator();\n-      DocIdSetIterator filteredIterator;\n-      if (collectorIterator == null) {\n-        filteredIterator = scorerIterator;\n-      } else {\n-        if (scorerIterator.docID() != -1) {\n-          // Wrap ScorerIterator to start from -1 for conjunction \n-          scorerIterator = new RangeDISIWrapper(scorerIterator, max);\n-        }\n-        // filter scorerIterator to keep only competitive docs as defined by collector\n-        filteredIterator = ConjunctionDISI.intersectIterators(Arrays.asList(scorerIterator, collectorIterator));\n-      }\n+      DocIdSetIterator filteredIterator = scorerIterator;\n       if (filteredIterator.docID() == -1 && min == 0 && max == DocIdSetIterator.NO_MORE_DOCS) {\n+        if (collectorIterator != null) {\n+          filteredIterator = ConjunctionDISI.intersectIterators(Arrays.asList(scorerIterator, collectorIterator));\n+        }\n         scoreAll(collector, filteredIterator, twoPhase, acceptDocs);\n         return DocIdSetIterator.NO_MORE_DOCS;\n       } else {\n+        if (collectorIterator != null) {\n+          if (scorerIterator.docID() != -1) {\n+            // here we assume that the initial version of collectorIterator matches all docs and can advance exactly to the desired docID", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYyNDgzOQ=="}, "originalCommit": {"oid": "d5ca2deba729549f127890198725ea2b4304b05e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwODI3Ng==", "bodyText": "@jpountz  My last  commit 4c5d828 seems to address the test failures.  I think it may work. Sorry again for the trouble.", "url": "https://github.com/apache/lucene-solr/pull/1955#discussion_r500708276", "createdAt": "2020-10-07T02:54:46Z", "author": {"login": "mayya-sharipova"}, "path": "lucene/core/src/java/org/apache/lucene/search/Weight.java", "diffHunk": "@@ -204,21 +204,21 @@ public int score(LeafCollector collector, Bits acceptDocs, int min, int max) thr\n       collector.setScorer(scorer);\n       DocIdSetIterator scorerIterator = twoPhase == null ? iterator : twoPhase.approximation();\n       DocIdSetIterator collectorIterator = collector.competitiveIterator();\n-      DocIdSetIterator filteredIterator;\n-      if (collectorIterator == null) {\n-        filteredIterator = scorerIterator;\n-      } else {\n-        if (scorerIterator.docID() != -1) {\n-          // Wrap ScorerIterator to start from -1 for conjunction \n-          scorerIterator = new RangeDISIWrapper(scorerIterator, max);\n-        }\n-        // filter scorerIterator to keep only competitive docs as defined by collector\n-        filteredIterator = ConjunctionDISI.intersectIterators(Arrays.asList(scorerIterator, collectorIterator));\n-      }\n+      DocIdSetIterator filteredIterator = scorerIterator;\n       if (filteredIterator.docID() == -1 && min == 0 && max == DocIdSetIterator.NO_MORE_DOCS) {\n+        if (collectorIterator != null) {\n+          filteredIterator = ConjunctionDISI.intersectIterators(Arrays.asList(scorerIterator, collectorIterator));\n+        }\n         scoreAll(collector, filteredIterator, twoPhase, acceptDocs);\n         return DocIdSetIterator.NO_MORE_DOCS;\n       } else {\n+        if (collectorIterator != null) {\n+          if (scorerIterator.docID() != -1) {\n+            // here we assume that the initial version of collectorIterator matches all docs and can advance exactly to the desired docID", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYyNDgzOQ=="}, "originalCommit": {"oid": "d5ca2deba729549f127890198725ea2b4304b05e"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1133, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}