{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxNzIxOTMw", "number": 2152, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNTowNjowM1rOFIMK5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxODowNzo0M1rOFIqoMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTMyMzI0OnYy", "diffSide": "LEFT", "path": "solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNTowNjowNFrOIJ-TCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNTowNjowNFrOIJ-TCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyODc3Nw==", "bodyText": "Suggest to also remove the Integer minRf = null; at line 696 above.", "url": "https://github.com/apache/lucene-solr/pull/2152#discussion_r547328777", "createdAt": "2020-12-22T15:06:04Z", "author": {"login": "cpoerschke"}, "path": "solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient.java", "diffHunk": "@@ -716,7 +716,6 @@ protected RouteException getRouteException(SolrException.ErrorCode serverError,\n         if (rf == null || routeRf < rf)\n           rf = routeRf;\n       }\n-      minRf = (Integer)header.get(UpdateRequest.MIN_REPFACT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72dea2e333832ca561f41c92b042ac398296d5b3"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTM3OTM5OnYy", "diffSide": "LEFT", "path": "solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNToyMToyNVrOIJ-0Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMzoxNDo1MFrOIMs_qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzNzMxNA==", "bodyText": "Hi @trdillon - thanks for opening this pull request!\nOkay, I think I see it now, so your https://issues.apache.org/jira/browse/SOLR-14034?focusedCommentId=17223427&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-17223427 question is about this sort of test change here i.e. whether or not minRf should remain an unused sendDoc argument or whether or not it should be removed. I'm thinking here in HttpPartitionTest removal makes sense (haven't yet looked at ReplicationFactorTest). What do you think?", "url": "https://github.com/apache/lucene-solr/pull/2152#discussion_r547337314", "createdAt": "2020-12-22T15:21:25Z", "author": {"login": "cpoerschke"}, "path": "solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest.java", "diffHunk": "@@ -548,9 +548,6 @@ protected int sendDoc(int docId, Integer minRf, SolrClient solrClient, String co\n     doc.addField(\"a_t\", \"hello\" + docId);\n \n     UpdateRequest up = new UpdateRequest();\n-    if (minRf != null) {\n-      up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n-    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72dea2e333832ca561f41c92b042ac398296d5b3"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU2MTkxNw==", "bodyText": "@cpoerschke Thanks for all your help with this one.\nsendDoc seems OK to remove from HttpPartitionTest as it's only passed minRf as an argument, but in ReplicationFactorTest it is passed expectedRf as an argument in addDocs:\n\n  \n    \n      lucene-solr/solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest.java\n    \n    \n         Line 417\n      in\n      98f12f4\n    \n    \n    \n    \n\n        \n          \n           sendDoc(idList[0], expectedRf); \n        \n    \n  \n\n\nsendDocsWithRetry  is implemented here and used in a few different test classes (DistributedVersionInfoTest, LeaderFailoverAfterPartitionTest and ForceLeaderTest) with minRf as an argument:\n\n  \n    \n      lucene-solr/solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java\n    \n    \n         Line 941\n      in\n      98f12f4\n    \n    \n    \n    \n\n        \n          \n           protected static int sendDocsWithRetry(CloudSolrClient cloudClient, String collection, List<SolrInputDocument> batch, int minRf, int maxRetries, int waitBeforeRetry) throws Exception { \n        \n    \n  \n\n\nBut it's also implemented using expectedRfDBQ and expectedRf in ReplicationFactorTest:\n\n\n  \n    \n      lucene-solr/solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest.java\n    \n    \n         Line 230\n      in\n      98f12f4\n    \n    \n    \n    \n\n        \n          \n           sendDocsWithRetry(batch, expectedRfDBQ, 5, 1); \n        \n    \n  \n\n\n\n  \n    \n      lucene-solr/solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest.java\n    \n    \n         Line 427\n      in\n      98f12f4\n    \n    \n    \n    \n\n        \n          \n           sendDocsWithRetry(batch, expectedRf, retries, 1); \n        \n    \n  \n\n\n\nI wasn't sure how to proceed with this as looking at the tests it seems that expectedRf is relied upon quite often.", "url": "https://github.com/apache/lucene-solr/pull/2152#discussion_r547561917", "createdAt": "2020-12-22T23:50:50Z", "author": {"login": "trdillon"}, "path": "solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest.java", "diffHunk": "@@ -548,9 +548,6 @@ protected int sendDoc(int docId, Integer minRf, SolrClient solrClient, String co\n     doc.addField(\"a_t\", \"hello\" + docId);\n \n     UpdateRequest up = new UpdateRequest();\n-    if (minRf != null) {\n-      up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n-    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzNzMxNA=="}, "originalCommit": {"oid": "72dea2e333832ca561f41c92b042ac398296d5b3"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODEyNDA2MQ==", "bodyText": "Thanks for the code pointers and detailed explanation!\nHow about we scope this pull request to remove minRf in almost all code paths i.e. sendDoc gets its unused argument removed in both the replication factor and http partition tests but sendDocsWithRetry remains unchanged for now since as you say it's used in other test classes too?\nIt appears that the minRf argument in sendDocsWithRetry is indeed unused already but it might be clearer to tidy that up in a separate follow-up pull request rather than mix it in here at this time.", "url": "https://github.com/apache/lucene-solr/pull/2152#discussion_r548124061", "createdAt": "2020-12-23T18:35:46Z", "author": {"login": "cpoerschke"}, "path": "solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest.java", "diffHunk": "@@ -548,9 +548,6 @@ protected int sendDoc(int docId, Integer minRf, SolrClient solrClient, String co\n     doc.addField(\"a_t\", \"hello\" + docId);\n \n     UpdateRequest up = new UpdateRequest();\n-    if (minRf != null) {\n-      up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n-    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzNzMxNA=="}, "originalCommit": {"oid": "72dea2e333832ca561f41c92b042ac398296d5b3"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTk0ODM5NA==", "bodyText": "It appears that the minRf argument in sendDocsWithRetry is indeed unused already but it might be clearer to tidy that up in a separate follow-up pull request rather than mix it in here at this time.\n\nI'm wondering if it would be better for this method to actually start using this parameter, and retry in the case of minRf not achieved? This is not something that was being done in this method, but may help improve some of the tests using it. I don't think such a change should be done in this PR, but maybe lets not remove the parameter yet then. WDYT?", "url": "https://github.com/apache/lucene-solr/pull/2152#discussion_r549948394", "createdAt": "2020-12-30T06:24:07Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest.java", "diffHunk": "@@ -548,9 +548,6 @@ protected int sendDoc(int docId, Integer minRf, SolrClient solrClient, String co\n     doc.addField(\"a_t\", \"hello\" + docId);\n \n     UpdateRequest up = new UpdateRequest();\n-    if (minRf != null) {\n-      up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n-    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzNzMxNA=="}, "originalCommit": {"oid": "72dea2e333832ca561f41c92b042ac398296d5b3"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE5MTAxNg==", "bodyText": "I'm wondering if it would be better for this method to actually start using this parameter, ...\n\nAh, yes, I agree, if it's a case of a not-yet-used parameter then keeping it and starting to use it makes sense. Removal would only be for no-longer-used parameter cases. Good catch!", "url": "https://github.com/apache/lucene-solr/pull/2152#discussion_r550191016", "createdAt": "2020-12-30T13:14:50Z", "author": {"login": "cpoerschke"}, "path": "solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest.java", "diffHunk": "@@ -548,9 +548,6 @@ protected int sendDoc(int docId, Integer minRf, SolrClient solrClient, String co\n     doc.addField(\"a_t\", \"hello\" + docId);\n \n     UpdateRequest up = new UpdateRequest();\n-    if (minRf != null) {\n-      up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n-    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzNzMxNA=="}, "originalCommit": {"oid": "72dea2e333832ca561f41c92b042ac398296d5b3"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTQxNzc4OnYy", "diffSide": "LEFT", "path": "solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNTozMToxMlrOIJ_KkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNTozMToxMlrOIJ_KkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM0Mjk5Mg==", "bodyText": "How about also removing the minRf argument here since it's now no longer used?", "url": "https://github.com/apache/lucene-solr/pull/2152#discussion_r547342992", "createdAt": "2020-12-22T15:31:12Z", "author": {"login": "cpoerschke"}, "path": "solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest.java", "diffHunk": "@@ -461,38 +447,24 @@ protected void doDelete(UpdateRequest req, String msg, int expectedRf, int retri\n \n   protected int sendDoc(int docId, int minRf) throws Exception {\n     UpdateRequest up = new UpdateRequest();\n-    boolean minRfExplicit = maybeAddMinRfExplicitly(minRf, up);\n     SolrInputDocument doc = new SolrInputDocument();\n     doc.addField(id, String.valueOf(docId));\n     doc.addField(\"a_t\", \"hello\" + docId);\n     up.add(doc);\n-    return runAndGetAchievedRf(up, minRfExplicit, minRf);\n+    return runAndGetAchievedRf(up, minRf);\n   }\n   \n-  private int runAndGetAchievedRf(UpdateRequest up, boolean minRfExplicit, int minRf) throws SolrServerException, IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72dea2e333832ca561f41c92b042ac398296d5b3"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTQyNzg3OnYy", "diffSide": "RIGHT", "path": "solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNTozMzo1NFrOIJ_Qgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNTozMzo1NFrOIJ_Qgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM0NDUxNQ==", "bodyText": "Looks like assertMinRfInResponse is now also unused then, if so suggest to remove it also.", "url": "https://github.com/apache/lucene-solr/pull/2152#discussion_r547344515", "createdAt": "2020-12-22T15:33:54Z", "author": {"login": "cpoerschke"}, "path": "solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest.java", "diffHunk": "@@ -461,38 +447,24 @@ protected void doDelete(UpdateRequest req, String msg, int expectedRf, int retri\n \n   protected int sendDoc(int docId, int minRf) throws Exception {\n     UpdateRequest up = new UpdateRequest();\n-    boolean minRfExplicit = maybeAddMinRfExplicitly(minRf, up);\n     SolrInputDocument doc = new SolrInputDocument();\n     doc.addField(id, String.valueOf(docId));\n     doc.addField(\"a_t\", \"hello\" + docId);\n     up.add(doc);\n-    return runAndGetAchievedRf(up, minRfExplicit, minRf);\n+    return runAndGetAchievedRf(up, minRf);\n   }\n   \n-  private int runAndGetAchievedRf(UpdateRequest up, boolean minRfExplicit, int minRf) throws SolrServerException, IOException {\n+  private int runAndGetAchievedRf(UpdateRequest up, int minRf) throws SolrServerException, IOException {\n     NamedList<Object> response = cloudClient.request(up);\n-    if (minRfExplicit) {\n-      assertMinRfInResponse(minRf, response);\n-    }\n     return cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), response);\n   }\n \n   private void assertMinRfInResponse(int minRf, NamedList<Object> response) {\n-    Object minRfFromResponse = response.findRecursive(\"responseHeader\", UpdateRequest.MIN_REPFACT);\n+    Object minRfFromResponse = response.findRecursive(\"responseHeader\");\n     assertNotNull(\"Expected min_rf header in the response\", minRfFromResponse);\n     assertEquals(\"Unexpected min_rf in response\", ((Integer)minRfFromResponse).intValue(), minRf);\n   }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72dea2e333832ca561f41c92b042ac398296d5b3"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NjMxMzQ2OnYy", "diffSide": "RIGHT", "path": "solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxODowNzo0M1rOIKtfLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMzoxMDoxOVrOIMs7Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODEwMTkzMg==", "bodyText": "Alright, so with maybeAddMinRfExplicitly gone and the minRf argument in runAndGetAchievedRf gone the minRf argument of sendDoc becomes unused, right? I wonder how the code would work out if sendDoc had its minRf argument taken away too? Bit like peeling an onion this here i.e. multiple layers (but it hopefully won't make anyone cry).", "url": "https://github.com/apache/lucene-solr/pull/2152#discussion_r548101932", "createdAt": "2020-12-23T18:07:43Z", "author": {"login": "cpoerschke"}, "path": "solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest.java", "diffHunk": "@@ -461,38 +447,18 @@ protected void doDelete(UpdateRequest req, String msg, int expectedRf, int retri\n \n   protected int sendDoc(int docId, int minRf) throws Exception {\n     UpdateRequest up = new UpdateRequest();\n-    boolean minRfExplicit = maybeAddMinRfExplicitly(minRf, up);\n     SolrInputDocument doc = new SolrInputDocument();\n     doc.addField(id, String.valueOf(docId));\n     doc.addField(\"a_t\", \"hello\" + docId);\n     up.add(doc);\n-    return runAndGetAchievedRf(up, minRfExplicit, minRf);\n+    return runAndGetAchievedRf(up);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e7316dbd45860aa59dca5e1dfad7eb23da98e3"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkzOTE4Mg==", "bodyText": "The tests for ReplicationFactorTest and HttpPartitionTest passed on my end after removing the minRf argument from sendDoc. I committed the ReplicationFactorTest changes separately as it meant removing the expectedRf argument from the sendDoc call in addDocs and I wasn't sure if this was OK, even though the test still passed.", "url": "https://github.com/apache/lucene-solr/pull/2152#discussion_r548939182", "createdAt": "2020-12-26T03:52:40Z", "author": {"login": "trdillon"}, "path": "solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest.java", "diffHunk": "@@ -461,38 +447,18 @@ protected void doDelete(UpdateRequest req, String msg, int expectedRf, int retri\n \n   protected int sendDoc(int docId, int minRf) throws Exception {\n     UpdateRequest up = new UpdateRequest();\n-    boolean minRfExplicit = maybeAddMinRfExplicitly(minRf, up);\n     SolrInputDocument doc = new SolrInputDocument();\n     doc.addField(id, String.valueOf(docId));\n     doc.addField(\"a_t\", \"hello\" + docId);\n     up.add(doc);\n-    return runAndGetAchievedRf(up, minRfExplicit, minRf);\n+    return runAndGetAchievedRf(up);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODEwMTkzMg=="}, "originalCommit": {"oid": "77e7316dbd45860aa59dca5e1dfad7eb23da98e3"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE4OTgzNA==", "bodyText": "I appreciate you committing the changes separately, thanks. The ReplicationFactorTest change looks good to me.", "url": "https://github.com/apache/lucene-solr/pull/2152#discussion_r550189834", "createdAt": "2020-12-30T13:10:19Z", "author": {"login": "cpoerschke"}, "path": "solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest.java", "diffHunk": "@@ -461,38 +447,18 @@ protected void doDelete(UpdateRequest req, String msg, int expectedRf, int retri\n \n   protected int sendDoc(int docId, int minRf) throws Exception {\n     UpdateRequest up = new UpdateRequest();\n-    boolean minRfExplicit = maybeAddMinRfExplicitly(minRf, up);\n     SolrInputDocument doc = new SolrInputDocument();\n     doc.addField(id, String.valueOf(docId));\n     doc.addField(\"a_t\", \"hello\" + docId);\n     up.add(doc);\n-    return runAndGetAchievedRf(up, minRfExplicit, minRf);\n+    return runAndGetAchievedRf(up);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODEwMTkzMg=="}, "originalCommit": {"oid": "77e7316dbd45860aa59dca5e1dfad7eb23da98e3"}, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 999, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}