{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxNjQ5MzQ2", "number": 1772, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTowMDo1MFrOEbAFAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QwNjoyOTowM1rOEbSRrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzQ4Mjg4OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTowMDo1MFrOHEwqsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxODoxNjoyNFrOHE2ybw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc1MzcxNA==", "bodyText": "I think this closed variable is not used?", "url": "https://github.com/apache/lucene-solr/pull/1772#discussion_r474753714", "createdAt": "2020-08-21T15:00:50Z", "author": {"login": "dnhatn"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -5728,4 +5735,25 @@ public String toString() {\n       return writer.segString();\n     }\n   }\n+\n+  private class Merges {\n+    boolean closed = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69e85559b0b797dba2c8a4c3303e88e9111f0e77"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg1Mzk5OQ==", "bodyText": "right! thanks that's a leftover", "url": "https://github.com/apache/lucene-solr/pull/1772#discussion_r474853999", "createdAt": "2020-08-21T18:16:24Z", "author": {"login": "s1monw"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -5728,4 +5735,25 @@ public String toString() {\n       return writer.segString();\n     }\n   }\n+\n+  private class Merges {\n+    boolean closed = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc1MzcxNA=="}, "originalCommit": {"oid": "69e85559b0b797dba2c8a4c3303e88e9111f0e77"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MDQ2NDM4OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QwNjoyODo1OFrOHFKjkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNzoxNToyMlrOHFXWOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE3Nzg3NA==", "bodyText": "Nice -- this forced merge-on-getReader/commit to be used more often in this test?", "url": "https://github.com/apache/lucene-solr/pull/1772#discussion_r475177874", "createdAt": "2020-08-23T06:28:58Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete.java", "diffHunk": "@@ -300,10 +300,11 @@ public void testDeleteAllSimple() throws IOException {\n     modifier.close();\n     dir.close();\n   }\n-  \n+\n   public void testDeleteAllNoDeadLock() throws IOException, InterruptedException {\n     Directory dir = newDirectory();\n-    final RandomIndexWriter modifier = new RandomIndexWriter(random(), dir); \n+    final RandomIndexWriter modifier = new RandomIndexWriter(random(), dir,\n+        newIndexWriterConfig().setMergePolicy(new MockRandomMergePolicy(random())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c35998b3a24e3da9d9d1d2aaec3b6ca1473f619"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM4NzQ0OA==", "bodyText": "no it's really only to make sure we running more random merges since this triggered the issue.", "url": "https://github.com/apache/lucene-solr/pull/1772#discussion_r475387448", "createdAt": "2020-08-24T07:15:22Z", "author": {"login": "s1monw"}, "path": "lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete.java", "diffHunk": "@@ -300,10 +300,11 @@ public void testDeleteAllSimple() throws IOException {\n     modifier.close();\n     dir.close();\n   }\n-  \n+\n   public void testDeleteAllNoDeadLock() throws IOException, InterruptedException {\n     Directory dir = newDirectory();\n-    final RandomIndexWriter modifier = new RandomIndexWriter(random(), dir); \n+    final RandomIndexWriter modifier = new RandomIndexWriter(random(), dir,\n+        newIndexWriterConfig().setMergePolicy(new MockRandomMergePolicy(random())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE3Nzg3NA=="}, "originalCommit": {"oid": "8c35998b3a24e3da9d9d1d2aaec3b6ca1473f619"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MDQ2NDQ1OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QwNjoyOTowM1rOHFKjmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QwNjoyOTowM1rOHFKjmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE3Nzg4Mg==", "bodyText": "Aha, this is the meat of the change!  We need to be able to stop all running merges, but not prevent new merges.\nMaybe add a comment explaining this?  The code looks a little odd to abortMerges to only then merges.enable() in a finally clause.  The finally clause is necessary here because on exception we want to be certain to re-enable merges?  An exception during abortMerges is not tragic for IW right?  I.e. it can resume operations, and maybe not all docs were deleted?", "url": "https://github.com/apache/lucene-solr/pull/1772#discussion_r475177882", "createdAt": "2020-08-23T06:29:03Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -2427,7 +2426,13 @@ public long deleteAll() throws IOException {\n           synchronized (this) {\n             try {\n               // Abort any running merges\n-              abortMerges();\n+              try {\n+                abortMerges();\n+                assert merges.areEnabled() == false : \"merges should be disabled - who enabled them?\";\n+                assert mergingSegments.isEmpty() : \"found merging segments but merges are disabled: \" + mergingSegments;\n+              } finally {\n+                merges.enable();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c35998b3a24e3da9d9d1d2aaec3b6ca1473f619"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1313, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}