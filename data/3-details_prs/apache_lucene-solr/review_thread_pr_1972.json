{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxMDgwODE5", "number": 1972, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQwNjo0MDo1MlrOEsWdpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwMzoxMzoxNFrOE8Dk4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTQwODM2OnYy", "diffSide": "RIGHT", "path": "solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQwNjo0MDo1MlrOHfk9wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNjoyNTo1MFrOHfo05g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3MzUzNw==", "bodyText": "XXE_DOCUMENT:  The use of DocumentBuilder.parse(...) (DocumentBuilder) is vulnerable to XML External Entity attacks (details)", "url": "https://github.com/apache/lucene-solr/pull/1972#discussion_r502873537", "createdAt": "2020-10-11T06:40:52Z", "author": {"login": "sonatype-lift"}, "path": "solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsConfiguration.java", "diffHunk": "@@ -66,13 +76,27 @@ public PrometheusExporterSettings getSettings() {\n     return searchConfiguration;\n   }\n \n-  public static MetricsConfiguration from(XmlConfigFile config) throws Exception {\n-    Node settings = config.getNode(\"/config/settings\", false);\n+  public static MetricsConfiguration from(Path file) throws Exception {\n+    // See solr-core XmlConfigFile\n+    final DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n+    try {\n+      dbf.setXIncludeAware(true);\n+      dbf.setNamespaceAware(true);\n+    } catch (UnsupportedOperationException e) {\n+      log.warn(\"{} XML parser doesn't support XInclude option\", file);\n+    }\n+\n+    final Document document = dbf.newDocumentBuilder().parse(file.toFile());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01400c3de5505f880e3aa8af43a92a23740e41aa"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNjgwNg==", "bodyText": "Acknowledged, and doesn't matter when the XML file is a local configuration file as opposed to external input.", "url": "https://github.com/apache/lucene-solr/pull/1972#discussion_r502936806", "createdAt": "2020-10-11T16:25:50Z", "author": {"login": "dsmiley"}, "path": "solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsConfiguration.java", "diffHunk": "@@ -66,13 +76,27 @@ public PrometheusExporterSettings getSettings() {\n     return searchConfiguration;\n   }\n \n-  public static MetricsConfiguration from(XmlConfigFile config) throws Exception {\n-    Node settings = config.getNode(\"/config/settings\", false);\n+  public static MetricsConfiguration from(Path file) throws Exception {\n+    // See solr-core XmlConfigFile\n+    final DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n+    try {\n+      dbf.setXIncludeAware(true);\n+      dbf.setNamespaceAware(true);\n+    } catch (UnsupportedOperationException e) {\n+      log.warn(\"{} XML parser doesn't support XInclude option\", file);\n+    }\n+\n+    final Document document = dbf.newDocumentBuilder().parse(file.toFile());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3MzUzNw=="}, "originalCommit": {"oid": "01400c3de5505f880e3aa8af43a92a23740e41aa"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4Mzk0NjcyOnYy", "diffSide": "RIGHT", "path": "gradle/solr/packaging.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQxNTo1NToyOFrOHzgy7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQxNTo1NToyOFrOHzgy7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc3Njc1MQ==", "bodyText": "It might be considered hacky to reference a configuration of a specific sub-project.  Maybe libExt could be declared more top-level and be called \"loggingLibs\" or something.", "url": "https://github.com/apache/lucene-solr/pull/1972#discussion_r523776751", "createdAt": "2020-11-15T15:55:28Z", "author": {"login": "dsmiley"}, "path": "gradle/solr/packaging.gradle", "diffHunk": "@@ -76,7 +76,8 @@ configure(allprojects.findAll {project -> project.path.startsWith(\":solr:contrib\n             return true\n           }\n         }\n-        return externalLibs - configurations.solrPlatformLibs\n+        // libExt has logging libs, which we don't want.  Lets users decide what they want.\n+        return externalLibs - configurations.solrPlatformLibs - project(':solr:server').configurations.getByName('libExt')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ba0d157607e4897203e06c0b9b5a9fff7af8d69"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4Mzk0NzU3OnYy", "diffSide": "LEFT", "path": "solr/contrib/prometheus-exporter/bin/solr-exporter", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQxNTo1NjoyN1rOHzgzUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQxNTo1NjoyN1rOHzgzUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc3Njg1MQ==", "bodyText": "Instead, /conf is put on the classpath, and thus \"log4j2.xml\" is loaded automatically based on Log4j2's automatic resolution.", "url": "https://github.com/apache/lucene-solr/pull/1972#discussion_r523776851", "createdAt": "2020-11-15T15:56:27Z", "author": {"login": "dsmiley"}, "path": "solr/contrib/prometheus-exporter/bin/solr-exporter", "diffHunk": "@@ -123,8 +111,6 @@ else\n     GC_TUNE=\"$GC_TUNE\"\n fi\n \n-EXTRA_JVM_ARGUMENTS=\"-Dlog4j.configurationFile=file:\"$BASEDIR\"/../../server/resources/log4j2-console.xml\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ba0d157607e4897203e06c0b9b5a9fff7af8d69"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4Mzk0OTE2OnYy", "diffSide": "RIGHT", "path": "solr/contrib/prometheus-exporter/build.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQxNTo1ODoxOVrOHzg0JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQxNTo1ODoxOVrOHzg0JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc3NzA2MQ==", "bodyText": "Logging dependencies in Java is a pain.  In a separate issue/PR, we should explore this approach: https://blog.gradle.org/addressing-logging-complexity-capabilities", "url": "https://github.com/apache/lucene-solr/pull/1972#discussion_r523777061", "createdAt": "2020-11-15T15:58:19Z", "author": {"login": "dsmiley"}, "path": "solr/contrib/prometheus-exporter/build.gradle", "diffHunk": "@@ -31,17 +30,57 @@ dependencies {\n     exclude group: \"org.jruby.joni\", module: \"joni\"\n   })\n   implementation ('net.sourceforge.argparse4j:argparse4j')\n+  implementation ('com.github.ben-manes.caffeine:caffeine', {\n+    exclude group: \"org.checkerframework\", module: \"checker-qual\"\n+    exclude group: \"com.google.errorprone\", module: \"error_prone_annotations\"\n+  })\n \n-  testImplementation ('org.apache.httpcomponents:httpcore')\n-  testImplementation ('org.eclipse.jetty:jetty-servlet')\n+  runtimeOnly 'org.apache.logging.log4j:log4j-api'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ba0d157607e4897203e06c0b9b5a9fff7af8d69"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4Mzk1NDcyOnYy", "diffSide": "RIGHT", "path": "solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/SolrExporter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQxNjowNDowMFrOHzg20A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNzo0Nzo0OFrOH3aZTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc3Nzc0NA==", "bodyText": "@HoustonPutman you removed the conf/ and I'm putting it back.  I'm not sure why it worked with it gone.  It may be related to other changes in this PR that it's needed again.  I tested that this works here both with gw run and via executing normally from the built assembly.  I didn't test Docker yet.", "url": "https://github.com/apache/lucene-solr/pull/1972#discussion_r523777744", "createdAt": "2020-11-15T16:04:00Z", "author": {"login": "dsmiley"}, "path": "solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/SolrExporter.java", "diffHunk": "@@ -68,7 +66,7 @@\n   private static final String[] ARG_CONFIG_FLAGS = {\"-f\", \"--config-file\"};\n   private static final String ARG_CONFIG_METAVAR = \"CONFIG\";\n   private static final String ARG_CONFIG_DEST = \"configFile\";\n-  private static final String ARG_CONFIG_DEFAULT = \"solr-exporter-config.xml\";\n+  private static final String ARG_CONFIG_DEFAULT = \"conf/solr-exporter-config.xml\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ba0d157607e4897203e06c0b9b5a9fff7af8d69"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgxNDM3MQ==", "bodyText": "So the reason I removed the conf/ is because I was reading the file off of the classpath. That way you can run solr-exporter from anywhere, not just contrib/prometheus-exporter.\nThe reason it doesn't work anymore is that we aren't using the SolrResourceLoader in this PR. I have a fix made that should allow for both the default config to be read off of the classpath or other configs specified via a file location. I can push it to this branch if you don't mind.", "url": "https://github.com/apache/lucene-solr/pull/1972#discussion_r527814371", "createdAt": "2020-11-20T16:38:16Z", "author": {"login": "HoustonPutman"}, "path": "solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/SolrExporter.java", "diffHunk": "@@ -68,7 +66,7 @@\n   private static final String[] ARG_CONFIG_FLAGS = {\"-f\", \"--config-file\"};\n   private static final String ARG_CONFIG_METAVAR = \"CONFIG\";\n   private static final String ARG_CONFIG_DEST = \"configFile\";\n-  private static final String ARG_CONFIG_DEFAULT = \"solr-exporter-config.xml\";\n+  private static final String ARG_CONFIG_DEFAULT = \"conf/solr-exporter-config.xml\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc3Nzc0NA=="}, "originalCommit": {"oid": "2ba0d157607e4897203e06c0b9b5a9fff7af8d69"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg2NjE5MA==", "bodyText": "Sure; push if you want.  I don't think it's important to read off the classpath so long as it reads it from somewhere... but if it works, that's nice.", "url": "https://github.com/apache/lucene-solr/pull/1972#discussion_r527866190", "createdAt": "2020-11-20T17:47:48Z", "author": {"login": "dsmiley"}, "path": "solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/SolrExporter.java", "diffHunk": "@@ -68,7 +66,7 @@\n   private static final String[] ARG_CONFIG_FLAGS = {\"-f\", \"--config-file\"};\n   private static final String ARG_CONFIG_METAVAR = \"CONFIG\";\n   private static final String ARG_CONFIG_DEST = \"configFile\";\n-  private static final String ARG_CONFIG_DEFAULT = \"solr-exporter-config.xml\";\n+  private static final String ARG_CONFIG_DEFAULT = \"conf/solr-exporter-config.xml\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc3Nzc0NA=="}, "originalCommit": {"oid": "2ba0d157607e4897203e06c0b9b5a9fff7af8d69"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMDE4NzgxOnYy", "diffSide": "RIGHT", "path": "solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxOToyNzoyM1rOH3d-wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwMzowNTowN1rOH3-KfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzkyNDkyOQ==", "bodyText": "PATH_TRAVERSAL_IN:  This API (java/io/File.(Ljava/lang/String;)V) reads a file whose location might be specified by user input (details)", "url": "https://github.com/apache/lucene-solr/pull/1972#discussion_r527924929", "createdAt": "2020-11-20T19:27:23Z", "author": {"login": "sonatype-lift"}, "path": "solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsConfiguration.java", "diffHunk": "@@ -66,13 +81,36 @@ public PrometheusExporterSettings getSettings() {\n     return searchConfiguration;\n   }\n \n-  public static MetricsConfiguration from(XmlConfigFile config) throws Exception {\n-    Node settings = config.getNode(\"/config/settings\", false);\n+  public static MetricsConfiguration from(String path) throws Exception {\n+    // See solr-core XmlConfigFile\n+    final DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n+    try {\n+      dbf.setXIncludeAware(true);\n+      dbf.setNamespaceAware(true);\n+    } catch (UnsupportedOperationException e) {\n+      log.warn(\"{} XML parser doesn't support XInclude option\", path);\n+    }\n+\n+    Document document;\n+    File file = new File(path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f9a6647178a5636f535b05b2d146670d26b1064"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ1MjIyMQ==", "bodyText": "Not a problem as the config can only be specified by an admin on the local machine.", "url": "https://github.com/apache/lucene-solr/pull/1972#discussion_r528452221", "createdAt": "2020-11-23T03:05:07Z", "author": {"login": "dsmiley"}, "path": "solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsConfiguration.java", "diffHunk": "@@ -66,13 +81,36 @@ public PrometheusExporterSettings getSettings() {\n     return searchConfiguration;\n   }\n \n-  public static MetricsConfiguration from(XmlConfigFile config) throws Exception {\n-    Node settings = config.getNode(\"/config/settings\", false);\n+  public static MetricsConfiguration from(String path) throws Exception {\n+    // See solr-core XmlConfigFile\n+    final DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n+    try {\n+      dbf.setXIncludeAware(true);\n+      dbf.setNamespaceAware(true);\n+    } catch (UnsupportedOperationException e) {\n+      log.warn(\"{} XML parser doesn't support XInclude option\", path);\n+    }\n+\n+    Document document;\n+    File file = new File(path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzkyNDkyOQ=="}, "originalCommit": {"oid": "6f9a6647178a5636f535b05b2d146670d26b1064"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMDE4Nzg3OnYy", "diffSide": "RIGHT", "path": "solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/SolrExporter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxOToyNzoyNFrOH3d-yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxOToyNzoyNFrOH3d-yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzkyNDkzNg==", "bodyText": "PATH_TRAVERSAL_IN:  This API (java/io/File.(Ljava/lang/String;)V) reads a file whose location might be specified by user input (details)", "url": "https://github.com/apache/lucene-solr/pull/1972#discussion_r527924936", "createdAt": "2020-11-20T19:27:24Z", "author": {"login": "sonatype-lift"}, "path": "solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/SolrExporter.java", "diffHunk": "@@ -214,12 +212,11 @@ public static void main(String[] args) {\n     }\n   }\n \n-  private static MetricsConfiguration loadMetricsConfiguration(Path configPath) {\n-    try (SolrResourceLoader loader = new SolrResourceLoader(configPath.getParent())) {\n-      XmlConfigFile config = new XmlConfigFile(loader, configPath.getFileName().toString(), null, null);\n-      return MetricsConfiguration.from(config);\n+  private static MetricsConfiguration loadMetricsConfiguration(String configPath) {\n+    try {\n+      return MetricsConfiguration.from(configPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f9a6647178a5636f535b05b2d146670d26b1064"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDA4NjA5OnYy", "diffSide": "RIGHT", "path": "solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwMzoxMzoxNFrOH3-QAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNjozODowNFrOH4V8og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ1MzYzMg==", "bodyText": "This parse(String) is documented to take a URI.  I don't think a file path is a URI?  If you look at the implementation of the variant that takes a File, it converts it to a URI then and then an ASCII string.  This could be done via path.toUri().toASCIIString().   FWIW I'd also be okay with just doing path.toFile() here.", "url": "https://github.com/apache/lucene-solr/pull/1972#discussion_r528453632", "createdAt": "2020-11-23T03:13:14Z", "author": {"login": "dsmiley"}, "path": "solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsConfiguration.java", "diffHunk": "@@ -77,22 +79,22 @@ public PrometheusExporterSettings getSettings() {\n     return searchConfiguration;\n   }\n \n-  public static MetricsConfiguration from(String path) throws Exception {\n+  public static MetricsConfiguration from(String resource) throws Exception {\n     // See solr-core XmlConfigFile\n     final DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n     try {\n       dbf.setXIncludeAware(true);\n       dbf.setNamespaceAware(true);\n     } catch (UnsupportedOperationException e) {\n-      log.warn(\"{} XML parser doesn't support XInclude option\", path);\n+      log.warn(\"{} XML parser doesn't support XInclude option\", resource);\n     }\n \n     Document document;\n-    File file = new File(path);\n-    if (file.isFile()) {\n-      document = dbf.newDocumentBuilder().parse(file);\n+    Path path = Path.of(resource);\n+    if (Files.exists(path)) {\n+      document = dbf.newDocumentBuilder().parse(path.toAbsolutePath().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "137c306fc08efe8b802318fd8e9790b4d35a51ae"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg0MTg5MA==", "bodyText": "Good catch. I tested it in multiple configurations, but there's probably some edge case it doesn't work for. I'll use path.toUri().toASCIIString() since the parse(file) method just gets the URI of the file and passes that to the parse(uri) implementation anyways. Might as well skip the middleman-method.", "url": "https://github.com/apache/lucene-solr/pull/1972#discussion_r528841890", "createdAt": "2020-11-23T16:38:04Z", "author": {"login": "HoustonPutman"}, "path": "solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsConfiguration.java", "diffHunk": "@@ -77,22 +79,22 @@ public PrometheusExporterSettings getSettings() {\n     return searchConfiguration;\n   }\n \n-  public static MetricsConfiguration from(String path) throws Exception {\n+  public static MetricsConfiguration from(String resource) throws Exception {\n     // See solr-core XmlConfigFile\n     final DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n     try {\n       dbf.setXIncludeAware(true);\n       dbf.setNamespaceAware(true);\n     } catch (UnsupportedOperationException e) {\n-      log.warn(\"{} XML parser doesn't support XInclude option\", path);\n+      log.warn(\"{} XML parser doesn't support XInclude option\", resource);\n     }\n \n     Document document;\n-    File file = new File(path);\n-    if (file.isFile()) {\n-      document = dbf.newDocumentBuilder().parse(file);\n+    Path path = Path.of(resource);\n+    if (Files.exists(path)) {\n+      document = dbf.newDocumentBuilder().parse(path.toAbsolutePath().toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ1MzYzMg=="}, "originalCommit": {"oid": "137c306fc08efe8b802318fd8e9790b4d35a51ae"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1142, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}