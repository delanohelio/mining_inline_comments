{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4MzMxMzUx", "number": 1669, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoxODozOVrOEOR2-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNTowNDo1M1rOEO9sFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDA4MTIwOnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoxODozOVrOGxV0SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNzo0MjoyN1rOGxyK6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5MDg1Ng==", "bodyText": "this is not used?", "url": "https://github.com/apache/lucene-solr/pull/1669#discussion_r454390856", "createdAt": "2020-07-14T14:18:39Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java", "diffHunk": "@@ -752,6 +765,9 @@ public void close() throws IOException {\n   }\n \n \n+  public CoreContainer getCoreContainer(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec5d0b216690016af9e25689001aa1fa2e0f21d0"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwMDU2Nw==", "bodyText": "This is necessary for #1666", "url": "https://github.com/apache/lucene-solr/pull/1669#discussion_r454700567", "createdAt": "2020-07-14T23:22:31Z", "author": {"login": "noblepaul"}, "path": "solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java", "diffHunk": "@@ -752,6 +765,9 @@ public void close() throws IOException {\n   }\n \n \n+  public CoreContainer getCoreContainer(){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5MDg1Ng=="}, "originalCommit": {"oid": "ec5d0b216690016af9e25689001aa1fa2e0f21d0"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg1NTQwMQ==", "bodyText": "I may remove it altogether now", "url": "https://github.com/apache/lucene-solr/pull/1669#discussion_r454855401", "createdAt": "2020-07-15T07:42:27Z", "author": {"login": "noblepaul"}, "path": "solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java", "diffHunk": "@@ -752,6 +765,9 @@ public void close() throws IOException {\n   }\n \n \n+  public CoreContainer getCoreContainer(){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5MDg1Ng=="}, "originalCommit": {"oid": "ec5d0b216690016af9e25689001aa1fa2e0f21d0"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDA5MDU1OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/core/SolrCore.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoyMDo0OVrOGxV6MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNDo1NzoxOVrOGyaIMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5MjM2OA==", "bodyText": "I don't think we need UUID because AFAICT the usage is entirely within the node.  Instead, just use a static AtomicLong counter like, for example, SearchHandler.ridCounter and then declare this instance field here as a simple primitive long.", "url": "https://github.com/apache/lucene-solr/pull/1669#discussion_r454392368", "createdAt": "2020-07-14T14:20:49Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/core/SolrCore.java", "diffHunk": "@@ -191,6 +191,11 @@\n \n   private String name;\n   private String logid; // used to show what name is set\n+  /**\n+   * A unique id to differentiate multiple instances of the same core\n+   * If we reload a core, the name remains same , but the id will be new\n+   */\n+  public final UUID uniqueId = UUID.randomUUID();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec5d0b216690016af9e25689001aa1fa2e0f21d0"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwMjcwMg==", "bodyText": "AtomicLong is mutable. We need an immutable object", "url": "https://github.com/apache/lucene-solr/pull/1669#discussion_r454702702", "createdAt": "2020-07-14T23:29:22Z", "author": {"login": "noblepaul"}, "path": "solr/core/src/java/org/apache/solr/core/SolrCore.java", "diffHunk": "@@ -191,6 +191,11 @@\n \n   private String name;\n   private String logid; // used to show what name is set\n+  /**\n+   * A unique id to differentiate multiple instances of the same core\n+   * If we reload a core, the name remains same , but the id will be new\n+   */\n+  public final UUID uniqueId = UUID.randomUUID();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5MjM2OA=="}, "originalCommit": {"oid": "ec5d0b216690016af9e25689001aa1fa2e0f21d0"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc1NjY0MA==", "bodyText": "The primitive long instance field would be final (immutable).  A static final AtomicLong (which is mutable) would only be used to generate a new core UID.", "url": "https://github.com/apache/lucene-solr/pull/1669#discussion_r454756640", "createdAt": "2020-07-15T02:42:38Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/core/SolrCore.java", "diffHunk": "@@ -191,6 +191,11 @@\n \n   private String name;\n   private String logid; // used to show what name is set\n+  /**\n+   * A unique id to differentiate multiple instances of the same core\n+   * If we reload a core, the name remains same , but the id will be new\n+   */\n+  public final UUID uniqueId = UUID.randomUUID();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5MjM2OA=="}, "originalCommit": {"oid": "ec5d0b216690016af9e25689001aa1fa2e0f21d0"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ3NjgyMQ==", "bodyText": "UUID is cheap and there is no advantage in using something else. Cores are not created so frequently that we should care too much about it", "url": "https://github.com/apache/lucene-solr/pull/1669#discussion_r455476821", "createdAt": "2020-07-16T02:45:25Z", "author": {"login": "noblepaul"}, "path": "solr/core/src/java/org/apache/solr/core/SolrCore.java", "diffHunk": "@@ -191,6 +191,11 @@\n \n   private String name;\n   private String logid; // used to show what name is set\n+  /**\n+   * A unique id to differentiate multiple instances of the same core\n+   * If we reload a core, the name remains same , but the id will be new\n+   */\n+  public final UUID uniqueId = UUID.randomUUID();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5MjM2OA=="}, "originalCommit": {"oid": "ec5d0b216690016af9e25689001aa1fa2e0f21d0"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUxMDA2NQ==", "bodyText": "Okay... but the AtomicLong incrementAndGet technique is very common for for an internal-id use case (I could list others in Lucene/Solr).  I have not seen a UUID used yet for this.  Up to you.", "url": "https://github.com/apache/lucene-solr/pull/1669#discussion_r455510065", "createdAt": "2020-07-16T04:57:19Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/core/SolrCore.java", "diffHunk": "@@ -191,6 +191,11 @@\n \n   private String name;\n   private String logid; // used to show what name is set\n+  /**\n+   * A unique id to differentiate multiple instances of the same core\n+   * If we reload a core, the name remains same , but the id will be new\n+   */\n+  public final UUID uniqueId = UUID.randomUUID();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5MjM2OA=="}, "originalCommit": {"oid": "ec5d0b216690016af9e25689001aa1fa2e0f21d0"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDE2NzM3OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDozNjoxOVrOGxWo9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMzoyOTozN1rOGxo2vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQwNDM0Mw==", "bodyText": "This is not used?", "url": "https://github.com/apache/lucene-solr/pull/1669#discussion_r454404343", "createdAt": "2020-07-14T14:36:19Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java", "diffHunk": "@@ -198,6 +206,11 @@ synchronized void reloadLuceneSPI() {\n     TokenizerFactory.reloadTokenizers(this.classLoader);\n   }\n \n+  public SolrCore getCore(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec5d0b216690016af9e25689001aa1fa2e0f21d0"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwMjc4Mw==", "bodyText": "This is used in #1666", "url": "https://github.com/apache/lucene-solr/pull/1669#discussion_r454702783", "createdAt": "2020-07-14T23:29:37Z", "author": {"login": "noblepaul"}, "path": "solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java", "diffHunk": "@@ -198,6 +206,11 @@ synchronized void reloadLuceneSPI() {\n     TokenizerFactory.reloadTokenizers(this.classLoader);\n   }\n \n+  public SolrCore getCore(){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQwNDM0Mw=="}, "originalCommit": {"oid": "ec5d0b216690016af9e25689001aa1fa2e0f21d0"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDE3MzcyOnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/handler/SchemaHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDozNzoyNVrOGxWskg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDozNzoyNVrOGxWskg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQwNTI2Ng==", "bodyText": "nitpick: auto-format this code to be consistent with spaces", "url": "https://github.com/apache/lucene-solr/pull/1669#discussion_r454405266", "createdAt": "2020-07-14T14:37:25Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/handler/SchemaHandler.java", "diffHunk": "@@ -202,6 +202,38 @@ private void handleGET(SolrQueryRequest req, SolrQueryResponse rsp) {\n     }\n   }\n \n+  /**If a plugin is loaded from a package, the version of the package being used should be added\n+   * to the response\n+   *\n+   */\n+  @SuppressWarnings(\"rawtypes\")\n+  private  void insertPackageInfo(Object o, SolrQueryRequest req) {\n+    if(!req.getParams().getBool(\"meta\",false)) return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec5d0b216690016af9e25689001aa1fa2e0f21d0"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDE5MzU0OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/handler/StreamHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDo0MTozMFrOGxW4zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMzoyMzozMVrOGxovtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQwODM5Ng==", "bodyText": "This code here returns a class and not an instance.  This seems wrong?", "url": "https://github.com/apache/lucene-solr/pull/1669#discussion_r454408396", "createdAt": "2020-07-14T14:41:30Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/handler/StreamHandler.java", "diffHunk": "@@ -158,8 +158,8 @@ public Class getClazz() {\n     }\n \n     @Override\n-    protected void initNewInstance(PackageLoader.Package.Version newest) {\n-      clazz = newest.getLoader().findClass(pluginInfo.className, Expressible.class);\n+    protected Object initNewInstance(PackageLoader.Package.Version newest) {\n+      return clazz = newest.getLoader().findClass(pluginInfo.className, Expressible.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec5d0b216690016af9e25689001aa1fa2e0f21d0"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwMDk4Mw==", "bodyText": "Actually no. it can be anything what the listener wants it to be. In this case it's a class", "url": "https://github.com/apache/lucene-solr/pull/1669#discussion_r454700983", "createdAt": "2020-07-14T23:23:31Z", "author": {"login": "noblepaul"}, "path": "solr/core/src/java/org/apache/solr/handler/StreamHandler.java", "diffHunk": "@@ -158,8 +158,8 @@ public Class getClazz() {\n     }\n \n     @Override\n-    protected void initNewInstance(PackageLoader.Package.Version newest) {\n-      clazz = newest.getLoader().findClass(pluginInfo.className, Expressible.class);\n+    protected Object initNewInstance(PackageLoader.Package.Version newest) {\n+      return clazz = newest.getLoader().findClass(pluginInfo.className, Expressible.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQwODM5Ng=="}, "originalCommit": {"oid": "ec5d0b216690016af9e25689001aa1fa2e0f21d0"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDIwMjM1OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/pkg/PackageAPI.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDo0MzozM1rOGxW-Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDo0MzozM1rOGxW-Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQwOTgwMw==", "bodyText": "nit: you re-ordered the imports in a way not consistent with most classes.  java package should come first.", "url": "https://github.com/apache/lucene-solr/pull/1669#discussion_r454409803", "createdAt": "2020-07-14T14:43:33Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/pkg/PackageAPI.java", "diffHunk": "@@ -52,6 +42,11 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import java.io.IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec5d0b216690016af9e25689001aa1fa2e0f21d0"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDIxMzkxOnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/pkg/PackageListeners.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDo0NTozN1rOGxXE5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDo0NTozN1rOGxXE5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxMTQ5Mg==", "bodyText": "nit: please auto-format for space consistency", "url": "https://github.com/apache/lucene-solr/pull/1669#discussion_r454411492", "createdAt": "2020-07-14T14:45:37Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/pkg/PackageListeners.java", "diffHunk": "@@ -96,15 +97,42 @@ private synchronized void invokeListeners(PackageLoader.Package pkg) {\n \n \n   public interface Listener {\n-    /**Name of the package or null to loisten to all package changes\n+    /**Name of the package or null to listen to all package changes\n      */\n     String packageName();\n \n     PluginInfo pluginInfo();\n \n-    void changed(PackageLoader.Package pkg);\n+    void changed(PackageLoader.Package pkg, Ctx ctx);\n \n     PackageLoader.Package.Version getPackageVersion();\n+    class Ctx {\n+      private Map<String, Runnable > runLater;\n+\n+      /** If there are multiple packages to be updated and there are multiple listeners,\n+       * This is executed after all of the {@link Listener#changed(PackageLoader.Package, Ctx)}\n+       * calls are invoked. The name is a unique identifier that can be used by consumers to avoid duplicate\n+       * If no deduplication is required, use null\n+       * runnable objects\n+       */\n+      public void runLater(String name,  Runnable runnable  ) {\n+        if(runLater == null) runLater = new LinkedHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec5d0b216690016af9e25689001aa1fa2e0f21d0"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDI2MzA5OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/pkg/PackageListeners.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDo1NToyN1rOGxXipg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDo1NToyN1rOGxXipg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxOTExMA==", "bodyText": "nit:\nSingle-line javadocs can entirely be in one line:\n/** Name of the package or null to listen to all package changes */\n\nMulti-line are formatted like this:\n/**\n * Summary sentence.\n * More info.\n */\n\nI see this formatting inconsistency in lots of your javadocs.  I know it's not a big deal yet it's still gives code not adhering to this a sloppy feel.  I find https://google.github.io/styleguide/javaguide.html#s7-javadoc useful to refer to, and it's perhaps the most popular Java style guide.\nYou might try Opt-Cmd-L if you use IntelliJ on a Mac to reformat selected text.", "url": "https://github.com/apache/lucene-solr/pull/1669#discussion_r454419110", "createdAt": "2020-07-14T14:55:27Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/pkg/PackageListeners.java", "diffHunk": "@@ -96,15 +97,42 @@ private synchronized void invokeListeners(PackageLoader.Package pkg) {\n \n \n   public interface Listener {\n-    /**Name of the package or null to loisten to all package changes\n+    /**Name of the package or null to listen to all package changes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec5d0b216690016af9e25689001aa1fa2e0f21d0"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDI4MDE3OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/pkg/PackageListeners.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDo1ODo1NVrOGxXtMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDo1ODo1NVrOGxXtMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQyMTgxMQ==", "bodyText": "I think you mean, use null for the name and not for the Runnable object.  The runnable is required.", "url": "https://github.com/apache/lucene-solr/pull/1669#discussion_r454421811", "createdAt": "2020-07-14T14:58:55Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/pkg/PackageListeners.java", "diffHunk": "@@ -96,15 +97,42 @@ private synchronized void invokeListeners(PackageLoader.Package pkg) {\n \n \n   public interface Listener {\n-    /**Name of the package or null to loisten to all package changes\n+    /**Name of the package or null to listen to all package changes\n      */\n     String packageName();\n \n     PluginInfo pluginInfo();\n \n-    void changed(PackageLoader.Package pkg);\n+    void changed(PackageLoader.Package pkg, Ctx ctx);\n \n     PackageLoader.Package.Version getPackageVersion();\n+    class Ctx {\n+      private Map<String, Runnable > runLater;\n+\n+      /** If there are multiple packages to be updated and there are multiple listeners,\n+       * This is executed after all of the {@link Listener#changed(PackageLoader.Package, Ctx)}\n+       * calls are invoked. The name is a unique identifier that can be used by consumers to avoid duplicate\n+       * If no deduplication is required, use null\n+       * runnable objects", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec5d0b216690016af9e25689001aa1fa2e0f21d0"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDMwMjQ3OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/pkg/PackageListeners.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNTowMzoyOFrOGxX6_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMzoyNDo0MlrOGxoxHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQyNTM0MQ==", "bodyText": "Could use find a Solr based ExecutorService for this instead?  It sets up MDC and we ensure it gets shut down.", "url": "https://github.com/apache/lucene-solr/pull/1669#discussion_r454425341", "createdAt": "2020-07-14T15:03:28Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/pkg/PackageListeners.java", "diffHunk": "@@ -96,15 +97,42 @@ private synchronized void invokeListeners(PackageLoader.Package pkg) {\n \n \n   public interface Listener {\n-    /**Name of the package or null to loisten to all package changes\n+    /**Name of the package or null to listen to all package changes\n      */\n     String packageName();\n \n     PluginInfo pluginInfo();\n \n-    void changed(PackageLoader.Package pkg);\n+    void changed(PackageLoader.Package pkg, Ctx ctx);\n \n     PackageLoader.Package.Version getPackageVersion();\n+    class Ctx {\n+      private Map<String, Runnable > runLater;\n+\n+      /** If there are multiple packages to be updated and there are multiple listeners,\n+       * This is executed after all of the {@link Listener#changed(PackageLoader.Package, Ctx)}\n+       * calls are invoked. The name is a unique identifier that can be used by consumers to avoid duplicate\n+       * If no deduplication is required, use null\n+       * runnable objects\n+       */\n+      public void runLater(String name,  Runnable runnable  ) {\n+        if(runLater == null) runLater = new LinkedHashMap<>();\n+        if(name == null) {\n+          name = runnable.getClass().getSimpleName() + \"@\" + runnable.hashCode();\n+        }\n+        runLater.put(name, runnable);\n+      }\n+      private void runLaterTasks(){\n+        if(runLater == null) return;\n+        new Thread(() -> runLater.forEach((s, runnable) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec5d0b216690016af9e25689001aa1fa2e0f21d0"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwMTM0Mg==", "bodyText": "True. This needs to be done more gracefully.", "url": "https://github.com/apache/lucene-solr/pull/1669#discussion_r454701342", "createdAt": "2020-07-14T23:24:42Z", "author": {"login": "noblepaul"}, "path": "solr/core/src/java/org/apache/solr/pkg/PackageListeners.java", "diffHunk": "@@ -96,15 +97,42 @@ private synchronized void invokeListeners(PackageLoader.Package pkg) {\n \n \n   public interface Listener {\n-    /**Name of the package or null to loisten to all package changes\n+    /**Name of the package or null to listen to all package changes\n      */\n     String packageName();\n \n     PluginInfo pluginInfo();\n \n-    void changed(PackageLoader.Package pkg);\n+    void changed(PackageLoader.Package pkg, Ctx ctx);\n \n     PackageLoader.Package.Version getPackageVersion();\n+    class Ctx {\n+      private Map<String, Runnable > runLater;\n+\n+      /** If there are multiple packages to be updated and there are multiple listeners,\n+       * This is executed after all of the {@link Listener#changed(PackageLoader.Package, Ctx)}\n+       * calls are invoked. The name is a unique identifier that can be used by consumers to avoid duplicate\n+       * If no deduplication is required, use null\n+       * runnable objects\n+       */\n+      public void runLater(String name,  Runnable runnable  ) {\n+        if(runLater == null) runLater = new LinkedHashMap<>();\n+        if(name == null) {\n+          name = runnable.getClass().getSimpleName() + \"@\" + runnable.hashCode();\n+        }\n+        runLater.put(name, runnable);\n+      }\n+      private void runLaterTasks(){\n+        if(runLater == null) return;\n+        new Thread(() -> runLater.forEach((s, runnable) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQyNTM0MQ=="}, "originalCommit": {"oid": "ec5d0b216690016af9e25689001aa1fa2e0f21d0"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDMyMjU1OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/pkg/SchemaPluginsLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNTowODowMFrOGxYHug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNTowODowMFrOGxYHug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQyODYwMg==", "bodyText": "nit: spacing issue.\nAlso, please use 'final' for all fields that are final and not just some.  Likewise for 'private' for fields than can be private.", "url": "https://github.com/apache/lucene-solr/pull/1669#discussion_r454428602", "createdAt": "2020-07-14T15:08:00Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/pkg/SchemaPluginsLoader.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.pkg;\n+\n+import org.apache.lucene.analysis.util.ResourceLoaderAware;\n+import org.apache.solr.common.MapWriter;\n+import org.apache.solr.common.SolrException;\n+import org.apache.solr.core.CoreContainer;\n+import org.apache.solr.core.PluginInfo;\n+import org.apache.solr.core.SolrClassLoader;\n+import org.apache.solr.core.SolrResourceLoader;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+/**\n+ * A {@link SolrClassLoader} that is specifically designed to load schema plugins from packages.\n+ * This class would register a listener for any package that is used in a schema and reload the schema\n+ * if any of those packages are updated\n+ * */\n+public class SchemaPluginsLoader implements SolrClassLoader {\n+    final CoreContainer coreContainer;\n+    final SolrResourceLoader loader;\n+    final Function<String, String> pkgVersionSupplier;\n+    private Map<String ,PackageAPI.PkgVersion> packageVersions =  new HashMap<>(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec5d0b216690016af9e25689001aa1fa2e0f21d0"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDM1NTg0OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/core/SolrClassLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNToxNToxNVrOGxYcgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNToxNToxNVrOGxYcgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQzMzkyMg==", "bodyText": "nit: see my longer comment on formatting javadoc.  This case right here really gets to me.", "url": "https://github.com/apache/lucene-solr/pull/1669#discussion_r454433922", "createdAt": "2020-07-14T15:15:15Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/core/SolrClassLoader.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.solr.core;\n+\n+\n+/**A generic interface to load plugin classes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec5d0b216690016af9e25689001aa1fa2e0f21d0"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDQwNDU3OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/schema/IndexSchema.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNToyNTo1MVrOGxY7Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMTo1NDo1MVrOGySnKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ0MTczMA==", "bodyText": "This seems problematic.  The code involved in index schema loading has access to two fields that both implement SolrClassLoader:  loader and solrClassLoader which you just added.  And then you changed many lines to use SolrClassLoader which just as well could have been as it was before -- loader (SRL).  I can see that you're doing this so that a new SchemaPluginsLoader thing could be used.  What if SchemaPluginsLoader was an SRL itself, and delegated the resource-loading methods to the \"real\" SRL?\nPut differently, we could create a synthetic SRL whose methods delegate to an appropriate plugin enabled ClassLoader and a real SRL for the configSet to find resources.  WDYT?", "url": "https://github.com/apache/lucene-solr/pull/1669#discussion_r454441730", "createdAt": "2020-07-14T15:25:51Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/schema/IndexSchema.java", "diffHunk": "@@ -188,6 +190,7 @@ public IndexSchema(String name, InputSource is, Version luceneVersion, SolrResou\n   protected IndexSchema(Version luceneVersion, SolrResourceLoader loader, Properties substitutableProperties) {\n     this.luceneVersion = Objects.requireNonNull(luceneVersion);\n     this.loader = loader;\n+    this.solrClassLoader = loader.getCore() == null? loader: loader.getCore().getSchemaPluginsLoader();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec5d0b216690016af9e25689001aa1fa2e0f21d0"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ1MDcxMg==", "bodyText": "Continuing my idea... Imagine a \"ZkConfigSetResourceProvider\" and \"FileSystemConfigSetResourceProvider\" pair of classes implementing an interface ConfigSetResourceProvider that is only for serving a resource (InputStream), not a class.  Just method openResource ideally.  Then imagine a SRL that demands a ConfigSetResourceProvider, and a ClassLoader (or SolrClassLoader as you prefer).  See where this is going?", "url": "https://github.com/apache/lucene-solr/pull/1669#discussion_r454450712", "createdAt": "2020-07-14T15:38:20Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/schema/IndexSchema.java", "diffHunk": "@@ -188,6 +190,7 @@ public IndexSchema(String name, InputSource is, Version luceneVersion, SolrResou\n   protected IndexSchema(Version luceneVersion, SolrResourceLoader loader, Properties substitutableProperties) {\n     this.luceneVersion = Objects.requireNonNull(luceneVersion);\n     this.loader = loader;\n+    this.solrClassLoader = loader.getCore() == null? loader: loader.getCore().getSchemaPluginsLoader();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ0MTczMA=="}, "originalCommit": {"oid": "ec5d0b216690016af9e25689001aa1fa2e0f21d0"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ1NjQ4OA==", "bodyText": "With that idea, there would only need to be one SRL class (no subclasses), and it'd be easy to create new instances based on those two primary components.\nI'm sure there is some tech debt entanglements in SRL relating to tracking instancePath (there's a TODO I added in there, initLibs() to remove that one) and harder are waitingForCore, infoMBeans, waitingForResources, and of course managedResourceRegistry.  If those get moved off somehow, then I hope the picture I propose becomes more clear.", "url": "https://github.com/apache/lucene-solr/pull/1669#discussion_r454456488", "createdAt": "2020-07-14T15:46:36Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/schema/IndexSchema.java", "diffHunk": "@@ -188,6 +190,7 @@ public IndexSchema(String name, InputSource is, Version luceneVersion, SolrResou\n   protected IndexSchema(Version luceneVersion, SolrResourceLoader loader, Properties substitutableProperties) {\n     this.luceneVersion = Objects.requireNonNull(luceneVersion);\n     this.loader = loader;\n+    this.solrClassLoader = loader.getCore() == null? loader: loader.getCore().getSchemaPluginsLoader();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ0MTczMA=="}, "originalCommit": {"oid": "ec5d0b216690016af9e25689001aa1fa2e0f21d0"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwNDkyNg==", "bodyText": "What if SchemaPluginsLoader was an SRL itself, and delegated the resource-loading methods to the \"real\" SRL?\n\nWell, technically it's possible. The current SRL is a mess. At some point in the future we may end up making it clean and usable. Today it's not. We should clearly differentiate between places where we need to load resources and places where we need to load classes. A Minimal interface should be enough for loading classes. SRL is a heavy concrete class.", "url": "https://github.com/apache/lucene-solr/pull/1669#discussion_r454704926", "createdAt": "2020-07-14T23:36:17Z", "author": {"login": "noblepaul"}, "path": "solr/core/src/java/org/apache/solr/schema/IndexSchema.java", "diffHunk": "@@ -188,6 +190,7 @@ public IndexSchema(String name, InputSource is, Version luceneVersion, SolrResou\n   protected IndexSchema(Version luceneVersion, SolrResourceLoader loader, Properties substitutableProperties) {\n     this.luceneVersion = Objects.requireNonNull(luceneVersion);\n     this.loader = loader;\n+    this.solrClassLoader = loader.getCore() == null? loader: loader.getCore().getSchemaPluginsLoader();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ0MTczMA=="}, "originalCommit": {"oid": "ec5d0b216690016af9e25689001aa1fa2e0f21d0"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc2MzEzNw==", "bodyText": "In the design I propose here, all the debt I mentioned in SRL except instancePath/getConfigDir could move to the new SolrClassLoader because they are class-loading related and not resource-loading related.  InstancePath/getConfigDir is debt I could erase quickly.  Then I think we're in good shape to move forward with a debt-free SRL that is a simple combination of it's two components.  If that sounds nice to you, I could work on a POC immediately.", "url": "https://github.com/apache/lucene-solr/pull/1669#discussion_r454763137", "createdAt": "2020-07-15T03:07:05Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/schema/IndexSchema.java", "diffHunk": "@@ -188,6 +190,7 @@ public IndexSchema(String name, InputSource is, Version luceneVersion, SolrResou\n   protected IndexSchema(Version luceneVersion, SolrResourceLoader loader, Properties substitutableProperties) {\n     this.luceneVersion = Objects.requireNonNull(luceneVersion);\n     this.loader = loader;\n+    this.solrClassLoader = loader.getCore() == null? loader: loader.getCore().getSchemaPluginsLoader();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ0MTczMA=="}, "originalCommit": {"oid": "ec5d0b216690016af9e25689001aa1fa2e0f21d0"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg1NDU3MA==", "bodyText": "At this point I want this to get out of my way. I would fix this one instead of spending more time on SRL refactoring.\nI believe this is in a reasonably good shape. We can do more refactoring later.\nLet's do things that add value to users\nTBH, I don't care about any particular class here. If possible, I would just nuke SRL altogether. It's just a kitchen sink and reeks of bad designs all over\nI wish to use SRL minimally. We should have a less heavy interface in most places. I would say most places are happy to just have a SolrClassLoader", "url": "https://github.com/apache/lucene-solr/pull/1669#discussion_r454854570", "createdAt": "2020-07-15T07:41:01Z", "author": {"login": "noblepaul"}, "path": "solr/core/src/java/org/apache/solr/schema/IndexSchema.java", "diffHunk": "@@ -188,6 +190,7 @@ public IndexSchema(String name, InputSource is, Version luceneVersion, SolrResou\n   protected IndexSchema(Version luceneVersion, SolrResourceLoader loader, Properties substitutableProperties) {\n     this.luceneVersion = Objects.requireNonNull(luceneVersion);\n     this.loader = loader;\n+    this.solrClassLoader = loader.getCore() == null? loader: loader.getCore().getSchemaPluginsLoader();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ0MTczMA=="}, "originalCommit": {"oid": "ec5d0b216690016af9e25689001aa1fa2e0f21d0"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM4NjkyMg==", "bodyText": "Okay; lets get this done.", "url": "https://github.com/apache/lucene-solr/pull/1669#discussion_r455386922", "createdAt": "2020-07-15T21:54:51Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/schema/IndexSchema.java", "diffHunk": "@@ -188,6 +190,7 @@ public IndexSchema(String name, InputSource is, Version luceneVersion, SolrResou\n   protected IndexSchema(Version luceneVersion, SolrResourceLoader loader, Properties substitutableProperties) {\n     this.luceneVersion = Objects.requireNonNull(luceneVersion);\n     this.loader = loader;\n+    this.solrClassLoader = loader.getCore() == null? loader: loader.getCore().getSchemaPluginsLoader();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ0MTczMA=="}, "originalCommit": {"oid": "ec5d0b216690016af9e25689001aa1fa2e0f21d0"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjQ3NTU5OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/core/ConfigSet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMzowOTo0NlrOGxsk8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMzowOTo0NlrOGxsk8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc2Mzc2Mw==", "bodyText": "I think using the generic interface Function here is pushing the bounds of readability/intuitiveness.  Lets just provide an interface/class instead.  Perhaps get() and getForce() with no boolean arg needed.", "url": "https://github.com/apache/lucene-solr/pull/1669#discussion_r454763763", "createdAt": "2020-07-15T03:09:46Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/core/ConfigSet.java", "diffHunk": "@@ -30,15 +32,18 @@\n \n   private final SolrConfig solrconfig;\n \n-  private final IndexSchema indexSchema;\n+  /**Provide a Schema object on demand\n+   * The first Boolean is to signify a a forcefetch\n+   */\n+  private final Function<Boolean, IndexSchema> indexSchema;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b815339f58698d047605d803166c7925bd8c71a3"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjQ4NDE1OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/core/CoreContainer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMzoxNTowM1rOGxsp4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMzoxNTowM1rOGxsp4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc2NTAyNg==", "bodyText": "plus mention it's optional, and then if it's specified and the coreId doesn't match, then the reload is a no-op.  Maybe rename coreId to ifCoreIdMatches to reflect not only what it is but how it's used.", "url": "https://github.com/apache/lucene-solr/pull/1669#discussion_r454765026", "createdAt": "2020-07-15T03:15:03Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/core/CoreContainer.java", "diffHunk": "@@ -1588,20 +1590,32 @@ private CoreDescriptor reloadCoreDescriptor(CoreDescriptor oldDesc) {\n     return ret;\n   }\n \n+  /**\n+   * reloads a core\n+   * refer {@link CoreContainer#reload(String, UUID)} for details\n+   */\n+  public void reload(String name) {\n+    reload(name, null);\n+  }\n   /**\n    * Recreates a SolrCore.\n    * While the new core is loading, requests will continue to be dispatched to\n    * and processed by the old core\n    *\n    * @param name the name of the SolrCore to reload\n+   * @param coreId The unique Id of the core", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b815339f58698d047605d803166c7925bd8c71a3"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjQ5MTEzOnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/handler/SchemaHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMzoxODo0OVrOGxstzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMzoxODo0OVrOGxstzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc2NjAyOQ==", "bodyText": "nit: another example of oddly formatted javadoc.", "url": "https://github.com/apache/lucene-solr/pull/1669#discussion_r454766029", "createdAt": "2020-07-15T03:18:49Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/handler/SchemaHandler.java", "diffHunk": "@@ -202,6 +202,38 @@ private void handleGET(SolrQueryRequest req, SolrQueryResponse rsp) {\n     }\n   }\n \n+  /**If a plugin is loaded from a package, the version of the package being used should be added", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b815339f58698d047605d803166c7925bd8c71a3"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjQ5NDY4OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/pkg/MultiPackageListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMzoyMDozNlrOGxsvug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNzozMzoyM1rOGxx4EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc2NjUyMg==", "bodyText": "I find this confusing... it could just be the name.  Something that implements SolrClassLoader should probably have a name that makes that aspect more pronounced and less so the listener aspect.", "url": "https://github.com/apache/lucene-solr/pull/1669#discussion_r454766522", "createdAt": "2020-07-15T03:20:36Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/pkg/MultiPackageListener.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.pkg;\n+\n+import org.apache.lucene.analysis.util.ResourceLoaderAware;\n+import org.apache.solr.common.MapWriter;\n+import org.apache.solr.common.SolrException;\n+import org.apache.solr.core.CoreContainer;\n+import org.apache.solr.core.PluginInfo;\n+import org.apache.solr.core.SolrClassLoader;\n+import org.apache.solr.core.SolrResourceLoader;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+/**\n+ * A {@link SolrClassLoader} that is designed to listen to a set of packages.\n+ * This class would register a listener each package that is loaded through this\n+ * if any of those packages are updated , the onReload runnable is executed\n+ * */\n+public class MultiPackageListener implements SolrClassLoader , PackageListeners.Listener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b815339f58698d047605d803166c7925bd8c71a3"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg1MDU3Ng==", "bodyText": "name suggestions are welcome", "url": "https://github.com/apache/lucene-solr/pull/1669#discussion_r454850576", "createdAt": "2020-07-15T07:33:23Z", "author": {"login": "noblepaul"}, "path": "solr/core/src/java/org/apache/solr/pkg/MultiPackageListener.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.pkg;\n+\n+import org.apache.lucene.analysis.util.ResourceLoaderAware;\n+import org.apache.solr.common.MapWriter;\n+import org.apache.solr.common.SolrException;\n+import org.apache.solr.core.CoreContainer;\n+import org.apache.solr.core.PluginInfo;\n+import org.apache.solr.core.SolrClassLoader;\n+import org.apache.solr.core.SolrResourceLoader;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+/**\n+ * A {@link SolrClassLoader} that is designed to listen to a set of packages.\n+ * This class would register a listener each package that is loaded through this\n+ * if any of those packages are updated , the onReload runnable is executed\n+ * */\n+public class MultiPackageListener implements SolrClassLoader , PackageListeners.Listener {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc2NjUyMg=="}, "originalCommit": {"oid": "b815339f58698d047605d803166c7925bd8c71a3"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjUwMDk5OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMzoyNDoyOFrOGxszOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMzoyNDoyOFrOGxszOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc2NzQxOQ==", "bodyText": "BTW I do like these sorts of changes where you've found SRL used where the caller really just needs a class loader.", "url": "https://github.com/apache/lucene-solr/pull/1669#discussion_r454767419", "createdAt": "2020-07-15T03:24:28Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader.java", "diffHunk": "@@ -86,7 +86,7 @@ public AbstractPluginLoader(String type, Class<T> pluginClassType)\n    * @param node - the XML node defining this plugin\n    */\n   @SuppressWarnings(\"unchecked\")\n-  protected T create( SolrResourceLoader loader, String name, String className, Node node ) throws Exception\n+  protected T create(SolrClassLoader loader, String name, String className, Node node ) throws Exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b815339f58698d047605d803166c7925bd8c71a3"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTI1OTE4OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/core/ConfigSet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNTowMjo0OVrOGyaNnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNTowMjo0OVrOGyaNnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUxMTQ1NQ==", "bodyText": "https://google.github.io/styleguide/javaguide.html#s7-javadoc\nGlad to see this supplier though.", "url": "https://github.com/apache/lucene-solr/pull/1669#discussion_r455511455", "createdAt": "2020-07-16T05:02:49Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/core/ConfigSet.java", "diffHunk": "@@ -79,4 +75,14 @@ public NamedList getProperties() {\n   public boolean isTrusted() {\n     return trusted;\n   }\n+\n+  /**Provide a Schema object on demand", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd6974b7b0525a63da52e0ad1e4f4c864a31bd8c"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTI2MjMwOnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/pkg/PackageListeningClassLoader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNTowNDo1M1rOGyaPgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNTowNDo1M1rOGyaPgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUxMTkzOA==", "bodyText": "Good name.", "url": "https://github.com/apache/lucene-solr/pull/1669#discussion_r455511938", "createdAt": "2020-07-16T05:04:53Z", "author": {"login": "dsmiley"}, "path": "solr/core/src/java/org/apache/solr/pkg/PackageListeningClassLoader.java", "diffHunk": "@@ -35,7 +35,7 @@\n  * This class would register a listener each package that is loaded through this\n  * if any of those packages are updated , the onReload runnable is executed\n  * */\n-public class MultiPackageListener implements SolrClassLoader , PackageListeners.Listener {\n+public class PackageListeningClassLoader implements SolrClassLoader , PackageListeners.Listener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd6974b7b0525a63da52e0ad1e4f4c864a31bd8c"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1370, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}