{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3NTA5Mzg4", "number": 2097, "title": "LUCENE-9537", "bodyText": "Description\nThis pull request implements logic from our academic search engine Indri: http://www.lemurproject.org/indri.php.  The functionality that is implemented is a smoothing score for search terms or subqueries that are not present in the document being scored.  The smoothing score acts like an idf so that documents that do not have terms or subqueries that are more frequent in the index are not penalized as much as documents that do not have less frequent terms or subqueries.  Additionally, Indri's dirichelet smoothing similarity has been added.\nSolution\nThe smoothingScore method has been added to the Scorable interface and implemented in the abstract class Scorer.  The classes IndriAndQuery, IndriAndWeight, and IndriAndScorer have been added to call the smoothingScore method on documents where the search term or subquery are not present.  The class IndriDirichletSimilarity has been added for implementing Indri's equation for the Language Model with Dirichlet smoothing.\nTests\nTestIndriAndQuery and TestIndriDirichletSmoothing have been added.  I am happy to expand upon these tests and implement more tests.\nChecklist\nPlease review the following and check all that apply:\n\n I have reviewed the guidelines for How to Contribute and my code conforms to the standards described there to the best of my ability.\n I have created a Jira issue and added the issue ID to my pull request title.\n I have given Solr maintainers access to contribute to my PR branch. (optional but recommended)\n I have developed this patch against the master branch.\n I have run ./gradlew check.\n I have added tests for my changes.\n I have added documentation for the Ref Guide (for Solr changes only).", "createdAt": "2020-11-25T15:03:18Z", "url": "https://github.com/apache/lucene-solr/pull/2097", "merged": true, "mergeCommit": {"oid": "9cc5c9b7983cf181280e18819f8516dc16ccf1ef"}, "closed": true, "closedAt": "2021-01-29T19:47:24Z", "author": {"login": "cammiemw"}, "timelineItems": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdftp5tgH2gAyNTI3NTA5Mzg4OjA4N2Q5ZDJhMDdjZDhjNDk5OWRhZjZhYzRhZTg5MDFhOTdhYmQ4Nzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABd0YIYBAH2gAyNTI3NTA5Mzg4OmQxOGM3ODJkMjFhNGEzNTM2NTY5ZWRlODhmOGQ3NjQxYmU0ZTczYWU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "087d9d2a07cd8c4999daf6ac4ae8901a97abd877", "author": {"user": null}, "url": "https://github.com/apache/lucene-solr/commit/087d9d2a07cd8c4999daf6ac4ae8901a97abd877", "committedDate": "2020-11-24T18:00:23Z", "message": "Added smoothing score"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e93ceee634c679e73d9871619057a049b301317", "author": {"user": null}, "url": "https://github.com/apache/lucene-solr/commit/8e93ceee634c679e73d9871619057a049b301317", "committedDate": "2020-11-24T20:10:10Z", "message": "Indri smoothing implementation and formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c75db2fc8925414f67c335043fd1f9d92fa24b5", "author": {"user": null}, "url": "https://github.com/apache/lucene-solr/commit/3c75db2fc8925414f67c335043fd1f9d92fa24b5", "committedDate": "2020-11-24T20:18:35Z", "message": "Additional smoothing score fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71a0bcf551a444f2d793c838b7dd7bd47cf36397", "author": {"user": null}, "url": "https://github.com/apache/lucene-solr/commit/71a0bcf551a444f2d793c838b7dd7bd47cf36397", "committedDate": "2020-11-25T14:47:42Z", "message": "Add smoothing score to additional classes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNDg3MzA4", "url": "https://github.com/apache/lucene-solr/pull/2097#pullrequestreview-540487308", "createdAt": "2020-11-29T14:54:37Z", "commit": {"oid": "71a0bcf551a444f2d793c838b7dd7bd47cf36397"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQxNDo1NDozN1rOH7kK2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQxNToxNzoxM1rOH7kW7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyMDYzNQ==", "bodyText": "Hmm should this be return in.smoothingScore(docId) instead?", "url": "https://github.com/apache/lucene-solr/pull/2097#discussion_r532220635", "createdAt": "2020-11-29T14:54:37Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/search/FilterScorable.java", "diffHunk": "@@ -46,6 +46,11 @@ public float score() throws IOException {\n     return in.score();\n   }\n \n+  @Override\n+  public float smoothingScore(int docId) throws IOException {\n+    return 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71a0bcf551a444f2d793c838b7dd7bd47cf36397"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyMDgwNg==", "bodyText": "Hmm, should we also cache the smoothingScore for this hit?\nOr, if we will keep it at returning 0, couldn't we remove this impl and inherit the default from Scorable?", "url": "https://github.com/apache/lucene-solr/pull/2097#discussion_r532220806", "createdAt": "2020-11-29T14:55:40Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/search/CachingCollector.java", "diffHunk": "@@ -59,6 +59,11 @@\n     @Override\n     public final float score() { return score; }\n \n+    @Override\n+    public float smoothingScore(int docId) throws IOException {\n+      return 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71a0bcf551a444f2d793c838b7dd7bd47cf36397"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyMDg2Mw==", "bodyText": "Could you add the standard Apache copyright header here and in all the new classes?", "url": "https://github.com/apache/lucene-solr/pull/2097#discussion_r532220863", "createdAt": "2020-11-29T14:56:05Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/search/IndriAndQuery.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package org.apache.lucene.search;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71a0bcf551a444f2d793c838b7dd7bd47cf36397"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyMTAyOQ==", "bodyText": "In general, BooleanClause can hold any Lucene Query implementation, but it looks like we are only supporting TermQuery and other IndriAndQuery clauses (just from reading the javadoc)?  If so, should we check/enforce this?", "url": "https://github.com/apache/lucene-solr/pull/2097#discussion_r532221029", "createdAt": "2020-11-29T14:57:30Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/search/IndriAndQuery.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package org.apache.lucene.search;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+/** A Query that matches documents matching combinations of \n+ * {@link TermQuery}s or other IndriAndQuerys.\n+ */\n+public class IndriAndQuery extends IndriQuery {\n+  \n+  public IndriAndQuery(List<BooleanClause> clauses) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71a0bcf551a444f2d793c838b7dd7bd47cf36397"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyMTM5MA==", "bodyText": "Can you factor out the 2nd two statements under each of the true and false clauses here?  I.e., only the first line needs to be conditional?", "url": "https://github.com/apache/lucene-solr/pull/2097#discussion_r532221390", "createdAt": "2020-11-29T15:00:22Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/search/IndriAndScorer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.apache.lucene.search;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+/** Combines scores of subscorers. If a subscorer does not contain\n+ *  the docId, a smoothing score is calculated for that \n+ *  document/subscorer combination.\n+ */\n+public class IndriAndScorer extends IndriDisjunctionScorer {\n+  \n+  protected IndriAndScorer(Weight weight, List<Scorer> subScorers,\n+      ScoreMode scoreMode, float boost) throws IOException {\n+    super(weight, subScorers, scoreMode, boost);\n+  }\n+  \n+  @Override\n+  public float score(List<Scorer> subScorers) throws IOException {\n+    int docId = this.docID();\n+    return scoreDoc(subScorers, docId);\n+  }\n+  \n+  @Override\n+  public float smoothingScore(List<Scorer> subScorers, int docId)\n+      throws IOException {\n+    return scoreDoc(subScorers, docId);\n+  }\n+  \n+  private float scoreDoc(List<Scorer> subScorers, int docId)\n+      throws IOException {\n+    double score = 0;\n+    double boostSum = 0.0;\n+    for (Scorer scorer : subScorers) {\n+      if (scorer instanceof IndriScorer) {\n+        IndriScorer indriScorer = (IndriScorer) scorer;\n+        int scorerDocId = indriScorer.docID();\n+        //If the query exists in the document, score the document\n+        //Otherwise, compute a smoothing score, which acts like an idf\n+        //for subqueries/terms\n+        if (docId == scorerDocId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71a0bcf551a444f2d793c838b7dd7bd47cf36397"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyMTY0OQ==", "bodyText": "Do we expect to have other scorers that need to extend the IndriDisjunctionScorer?  Here we have only one such subclass, so I wonder if we could just fold all of this into a single IndriDisjunctionScorer class?  Or, are you laying bedrock for future additional query types?", "url": "https://github.com/apache/lucene-solr/pull/2097#discussion_r532221649", "createdAt": "2020-11-29T15:02:15Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/search/IndriAndScorer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.apache.lucene.search;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+/** Combines scores of subscorers. If a subscorer does not contain\n+ *  the docId, a smoothing score is calculated for that \n+ *  document/subscorer combination.\n+ */\n+public class IndriAndScorer extends IndriDisjunctionScorer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71a0bcf551a444f2d793c838b7dd7bd47cf36397"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyMTg0NA==", "bodyText": "Remove extra for?", "url": "https://github.com/apache/lucene-solr/pull/2097#discussion_r532221844", "createdAt": "2020-11-29T15:03:24Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/search/IndriDisjunctionScorer.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package org.apache.lucene.search;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+/**\n+ * The Indri implemenation of a disjunction scorer which stores the subscorers\n+ * for for the child queries. The score and smoothingScore methods use the list", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71a0bcf551a444f2d793c838b7dd7bd47cf36397"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyMjU0NQ==", "bodyText": "Hmm is this (to store boost) the only reason to have a separate IndriScorer?  If I remember right, Lucene used to apply boost similarly (every scorer kept track of it) but at one point we moved all boosting to a dedicated BoostQuery.", "url": "https://github.com/apache/lucene-solr/pull/2097#discussion_r532222545", "createdAt": "2020-11-29T15:08:59Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/search/IndriScorer.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package org.apache.lucene.search;\n+\n+import java.io.IOException;\n+\n+/**\n+ * The Indri parent scorer that stores the boost so that \n+ * IndriScorers can use the boost outside of the term.\n+ *\n+ */\n+abstract public class IndriScorer extends Scorer {\n+\n+\tprivate float boost;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71a0bcf551a444f2d793c838b7dd7bd47cf36397"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyMjU5Mg==", "bodyText": "Maybe link to Indri paper that describes/motivates this?", "url": "https://github.com/apache/lucene-solr/pull/2097#discussion_r532222592", "createdAt": "2020-11-29T15:09:18Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/search/Scorable.java", "diffHunk": "@@ -30,6 +30,13 @@\n    * Returns the score of the current document matching the query.\n    */\n   public abstract float score() throws IOException;\n+  \n+  /**\n+   * Returns the smoothing score of the current document matching the query.\n+   * This score is used when the query/term does not appear in the document.\n+   * This can return 0 or a smoothing score.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71a0bcf551a444f2d793c838b7dd7bd47cf36397"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyMzMxMA==", "bodyText": "Maybe, add a few words giving some intuition about what mu does?  It looks like it roughly lets you tune how important document length is in the scoring?\nAlso, the formatting of the above equations looks like it got garbled?  You will need to use html/javadoc markup to make the formatting survive future developers viewing in browser...", "url": "https://github.com/apache/lucene-solr/pull/2097#discussion_r532223310", "createdAt": "2020-11-29T15:14:30Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/search/similarities/IndriDirichletSimilarity.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * ===============================================================================================\n+ * Copyright (c) 2019 Carnegie Mellon University and University of Massachusetts. All Rights\n+ * Reserved.\n+ *\n+ * Use of the Lemur Toolkit for Language Modeling and Information Retrieval is subject to the terms\n+ * of the software license set forth in the LICENSE file included with this software, and also\n+ * available at http://www.lemurproject.org/license.html\n+ *\n+ * ================================================================================================\n+ */\n+package org.apache.lucene.search.similarities;\n+\n+import java.util.List;\n+import java.util.Locale;\n+\n+import org.apache.lucene.search.Explanation;\n+import org.apache.lucene.search.similarities.BasicStats;\n+import org.apache.lucene.search.similarities.LMSimilarity;\n+\n+/**\n+ * Bayesian smoothing using Dirichlet priors as implemented in the Indri Search\n+ * engine (http://www.lemurproject.org/indri.php). Indri Dirichelet Smoothing!\n+ * tf_E + mu*P(t|D) P(t|E)= ------------------------ documentLength + documentMu\n+ * mu*P(t|C) + tf_D where P(t|D)= --------------------- doclen + mu\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71a0bcf551a444f2d793c838b7dd7bd47cf36397"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyMzcyNQ==", "bodyText": "Normally in Lucene AND implies MUST, i.e. required clauses.\nBut this query is actually disjunctive, right?  Documents will match even if they are missing some of the terms.  Should we name it IndriOrQuery maybe?  Or, IndriBooleanQuery?", "url": "https://github.com/apache/lucene-solr/pull/2097#discussion_r532223725", "createdAt": "2020-11-29T15:17:13Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/search/IndriAndQuery.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package org.apache.lucene.search;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+/** A Query that matches documents matching combinations of \n+ * {@link TermQuery}s or other IndriAndQuerys.\n+ */\n+public class IndriAndQuery extends IndriQuery {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71a0bcf551a444f2d793c838b7dd7bd47cf36397"}, "originalPosition": 9}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22e00f2224dda27f0b947d9792eb0813dc0e575b", "author": {"user": null}, "url": "https://github.com/apache/lucene-solr/commit/22e00f2224dda27f0b947d9792eb0813dc0e575b", "committedDate": "2020-11-30T19:21:10Z", "message": "Merge remote-tracking branch 'upstream/master' into LUCENE-9537"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e784de47c27d5f629311d5148cbe8a4a3ae4752", "author": {"user": null}, "url": "https://github.com/apache/lucene-solr/commit/8e784de47c27d5f629311d5148cbe8a4a3ae4752", "committedDate": "2020-11-30T20:59:44Z", "message": "Addressed first set of git pull request comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0ddef0727f9ede2e5ea97bc137c239b468b0cc2", "author": {"user": null}, "url": "https://github.com/apache/lucene-solr/commit/f0ddef0727f9ede2e5ea97bc137c239b468b0cc2", "committedDate": "2020-11-30T21:21:41Z", "message": "Added lucene copyright to test classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a89a86885af36ed9dab5ef889f3b0e25f94d2ce", "author": {"user": null}, "url": "https://github.com/apache/lucene-solr/commit/0a89a86885af36ed9dab5ef889f3b0e25f94d2ce", "committedDate": "2020-11-30T21:46:48Z", "message": "Fixed tabs in IndriScorer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "219bb77017b102e6eaed086290983f0bc54a9d0e", "author": {"user": null}, "url": "https://github.com/apache/lucene-solr/commit/219bb77017b102e6eaed086290983f0bc54a9d0e", "committedDate": "2020-11-30T22:47:27Z", "message": "Fixed tabs (again)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54ae042c36958f23e5714389857cdadd8ee3ac7d", "author": {"user": null}, "url": "https://github.com/apache/lucene-solr/commit/54ae042c36958f23e5714389857cdadd8ee3ac7d", "committedDate": "2020-12-01T03:05:42Z", "message": "Added smoothingScore to termScorer so that the IndriAndQuery can get smoothing scores for TermQueries that have a frequency of 0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b36cc3456b03c9e9df6c8ccea5adb14ecb9d406f", "author": {"user": null}, "url": "https://github.com/apache/lucene-solr/commit/b36cc3456b03c9e9df6c8ccea5adb14ecb9d406f", "committedDate": "2020-12-01T10:54:33Z", "message": "Fixed typo"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNTAwMDQ2", "url": "https://github.com/apache/lucene-solr/pull/2097#pullrequestreview-551500046", "createdAt": "2020-12-14T15:47:55Z", "commit": {"oid": "b36cc3456b03c9e9df6c8ccea5adb14ecb9d406f"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNTo0Nzo1NVrOIFW8zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNTo1NjoyOFrOIFXX2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ4OTgwNg==", "bodyText": "OK let's keep the (somewhat confusing) naming for now.  Naming is the hardest part!!", "url": "https://github.com/apache/lucene-solr/pull/2097#discussion_r542489806", "createdAt": "2020-12-14T15:47:55Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/search/IndriAndQuery.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package org.apache.lucene.search;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+/** A Query that matches documents matching combinations of \n+ * {@link TermQuery}s or other IndriAndQuerys.\n+ */\n+public class IndriAndQuery extends IndriQuery {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyMzcyNQ=="}, "originalCommit": {"oid": "71a0bcf551a444f2d793c838b7dd7bd47cf36397"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5MDAxNw==", "bodyText": "Hello, any comment on this one?", "url": "https://github.com/apache/lucene-solr/pull/2097#discussion_r542490017", "createdAt": "2020-12-14T15:48:14Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/search/IndriAndQuery.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package org.apache.lucene.search;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+/** A Query that matches documents matching combinations of \n+ * {@link TermQuery}s or other IndriAndQuerys.\n+ */\n+public class IndriAndQuery extends IndriQuery {\n+  \n+  public IndriAndQuery(List<BooleanClause> clauses) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyMTAyOQ=="}, "originalCommit": {"oid": "71a0bcf551a444f2d793c838b7dd7bd47cf36397"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5MjIwNg==", "bodyText": "Random question: will IndriQuery take advantage of Block MAX Weak And optimization?  The added smoothingScore must alter the optimization logic to find the min block score to skip to?\nI think it's OK to defer BMW to followon improvements, as long as it is not kicking in incorrectly here.", "url": "https://github.com/apache/lucene-solr/pull/2097#discussion_r542492206", "createdAt": "2020-12-14T15:50:48Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/search/IndriQuery.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.search;\n+\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * A Basic abstract query that all IndriQueries can extend to implement\n+ * toString, equals, getClauses, and iterator.\n+ *\n+ */\n+public abstract class IndriQuery extends Query", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b36cc3456b03c9e9df6c8ccea5adb14ecb9d406f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5NTA3OQ==", "bodyText": "Great, thanks.", "url": "https://github.com/apache/lucene-solr/pull/2097#discussion_r542495079", "createdAt": "2020-12-14T15:54:26Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/search/Scorable.java", "diffHunk": "@@ -30,6 +30,13 @@\n    * Returns the score of the current document matching the query.\n    */\n   public abstract float score() throws IOException;\n+  \n+  /**\n+   * Returns the smoothing score of the current document matching the query.\n+   * This score is used when the query/term does not appear in the document.\n+   * This can return 0 or a smoothing score.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyMjU5Mg=="}, "originalCommit": {"oid": "71a0bcf551a444f2d793c838b7dd7bd47cf36397"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5NjcyOA==", "bodyText": "Hmm, why not add a default method in the Scorable interface to return 0?  Then we don't have to add this default method in all these subclasses?", "url": "https://github.com/apache/lucene-solr/pull/2097#discussion_r542496728", "createdAt": "2020-12-14T15:56:28Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/search/ScoreAndDoc.java", "diffHunk": "@@ -32,4 +33,9 @@ public int docID() {\n   public float score() {\n     return score;\n   }\n+\n+  @Override\n+  public float smoothingScore(int docId) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b36cc3456b03c9e9df6c8ccea5adb14ecb9d406f"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4737298c1450946d71791521acbbbb362e7d503a", "author": {"user": null}, "url": "https://github.com/apache/lucene-solr/commit/4737298c1450946d71791521acbbbb362e7d503a", "committedDate": "2020-12-18T20:39:15Z", "message": "Merge remote-tracking branch 'upstream/master' into LUCENE-9537"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c625f5ef02a2aaeff414dcaebfa40e2d6ee20f25", "author": {"user": null}, "url": "https://github.com/apache/lucene-solr/commit/c625f5ef02a2aaeff414dcaebfa40e2d6ee20f25", "committedDate": "2021-01-12T02:55:09Z", "message": "Added smoothing score implementation to Scorable and removed it from extending classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6d35dc75c6e5a6e2ac389742b331143f03ba404", "author": {"user": null}, "url": "https://github.com/apache/lucene-solr/commit/c6d35dc75c6e5a6e2ac389742b331143f03ba404", "committedDate": "2021-01-12T03:24:18Z", "message": "Merge remote-tracking branch 'upstream/master' into LUCENE-9537"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY1OTI4OTY3", "url": "https://github.com/apache/lucene-solr/pull/2097#pullrequestreview-565928967", "createdAt": "2021-01-12T04:22:05Z", "commit": {"oid": "c625f5ef02a2aaeff414dcaebfa40e2d6ee20f25"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwNDoyMjowNVrOIRxV8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwNDoyMjowNVrOIRxV8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTUwNTEzOA==", "bodyText": "NULLPTR_DEREFERENCE:  accessing memory that is the null pointer on line 117 indirectly during the call to IndriAndWeight.scorer(...).", "url": "https://github.com/apache/lucene-solr/pull/2097#discussion_r555505138", "createdAt": "2021-01-12T04:22:05Z", "author": {"login": "sonatype-lift"}, "path": "lucene/core/src/java/org/apache/lucene/search/IndriAndWeight.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.search;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import org.apache.lucene.index.LeafReaderContext;\n+\n+/**\n+ * The Weight for IndriAndQuery, used to normalize, score and explain these\n+ * queries.\n+ */\n+public class IndriAndWeight extends Weight {\n+  \n+  private final IndriAndQuery query;\n+  private final ArrayList<Weight> weights;\n+  private final ScoreMode scoreMode;\n+  private final float boost;\n+  \n+  public IndriAndWeight(IndriAndQuery query, IndexSearcher searcher,\n+      ScoreMode scoreMode, float boost) throws IOException {\n+    super(query);\n+    this.query = query;\n+    this.boost = boost;\n+    this.scoreMode = scoreMode;\n+    weights = new ArrayList<>();\n+    for (BooleanClause c : query) {\n+      Weight w = searcher.createWeight(c.getQuery(), scoreMode, 1.0f);\n+      weights.add(w);\n+    }\n+  }\n+  \n+  private Scorer getScorer(LeafReaderContext context) throws IOException {\n+    List<Scorer> subScorers = new ArrayList<>();\n+    \n+    for (Weight w : weights) {\n+      Scorer scorer = w.scorer(context);\n+      if (scorer != null) {\n+        subScorers.add(scorer);\n+      }\n+    }\n+    \n+    if (subScorers.isEmpty()) {\n+      return null;\n+    }\n+    Scorer scorer = subScorers.get(0);\n+    if (subScorers.size() > 1) {\n+      scorer = new IndriAndScorer(this, subScorers, scoreMode, boost);\n+    }\n+    return scorer;\n+  }\n+  \n+  @Override\n+  public Scorer scorer(LeafReaderContext context) throws IOException {\n+    return getScorer(context);\n+  }\n+  \n+  @Override\n+  public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n+    Scorer scorer = getScorer(context);\n+    if (scorer != null) {\n+      BulkScorer bulkScorer = new DefaultBulkScorer(scorer);\n+      return bulkScorer;\n+    }\n+    return null;\n+  }\n+  \n+  @Override\n+  public boolean isCacheable(LeafReaderContext ctx) {\n+    for (Weight w : weights) {\n+      if (w.isCacheable(ctx) == false) return false;\n+    }\n+    return true;\n+  }\n+  \n+  @Override\n+  public Explanation explain(LeafReaderContext context, int doc)\n+      throws IOException {\n+    List<Explanation> subs = new ArrayList<>();\n+    boolean fail = false;\n+    Iterator<BooleanClause> cIter = query.iterator();\n+    for (Iterator<Weight> wIter = weights.iterator(); wIter.hasNext();) {\n+      Weight w = wIter.next();\n+      BooleanClause c = cIter.next();\n+      Explanation e = w.explain(context, doc);\n+      if (e.isMatch()) {\n+        subs.add(e);\n+      } else if (c.isRequired()) {\n+        subs.add(Explanation.noMatch(\n+            \"no match on required clause (\" + c.getQuery().toString() + \")\",\n+            e));\n+        fail = true;\n+      }\n+    }\n+    if (fail) {\n+      return Explanation.noMatch(\n+          \"Failure to meet condition(s) of required/prohibited clause(s)\",\n+          subs);\n+    } else {\n+      Scorer scorer = scorer(context);\n+      int advanced = scorer.iterator().advance(doc);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c625f5ef02a2aaeff414dcaebfa40e2d6ee20f25"}, "originalPosition": 118}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88c9c350903a289a66a1a8e17ad522691381851f", "author": {"user": null}, "url": "https://github.com/apache/lucene-solr/commit/88c9c350903a289a66a1a8e17ad522691381851f", "committedDate": "2021-01-12T21:39:41Z", "message": "Formatting fixes and IndriAndWeight explain NullPointer fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c61859e1bc2892ff80e0ca19727047e2e63412d", "author": {"user": null}, "url": "https://github.com/apache/lucene-solr/commit/0c61859e1bc2892ff80e0ca19727047e2e63412d", "committedDate": "2021-01-12T22:15:47Z", "message": "Ran ./gradlew :lucene:core:spotlessApply"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcxMzY4OTQ0", "url": "https://github.com/apache/lucene-solr/pull/2097#pullrequestreview-571368944", "createdAt": "2021-01-19T15:36:35Z", "commit": {"oid": "0c61859e1bc2892ff80e0ca19727047e2e63412d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95e063cc6cabb282ee712aafd53ec77887087e13", "author": {"user": null}, "url": "https://github.com/apache/lucene-solr/commit/95e063cc6cabb282ee712aafd53ec77887087e13", "committedDate": "2021-01-20T20:00:12Z", "message": "Merge remote-tracking branch 'upstream/master' into LUCENE-9537"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6ce673b4d21047ab4ad94aa74197f10565523e0", "author": {"user": null}, "url": "https://github.com/apache/lucene-solr/commit/e6ce673b4d21047ab4ad94aa74197f10565523e0", "committedDate": "2021-01-20T20:20:25Z", "message": "Added entry to CHANGES.txt"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b68cf4340346afdd9bf53f03d29a78be527a2c43", "author": {"user": null}, "url": "https://github.com/apache/lucene-solr/commit/b68cf4340346afdd9bf53f03d29a78be527a2c43", "committedDate": "2021-01-20T20:25:11Z", "message": "Fixed CHANGES.txt formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3bbb848e37b9e1bb5f76cb5f72f73a320b7aba05", "author": {"user": null}, "url": "https://github.com/apache/lucene-solr/commit/3bbb848e37b9e1bb5f76cb5f72f73a320b7aba05", "committedDate": "2021-01-26T17:16:24Z", "message": "Merge remote-tracking branch 'upstream/master' into LUCENE-9537"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91ff3111791278b8ea5ee39f137b402f801431e0", "author": {"user": null}, "url": "https://github.com/apache/lucene-solr/commit/91ff3111791278b8ea5ee39f137b402f801431e0", "committedDate": "2021-01-26T17:18:07Z", "message": "Removed smoothingScore method from Scorer to fix TestFeature Error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a5b9547202e9db89ab4eb6166b1e91abc7e33a3", "author": {"user": null}, "url": "https://github.com/apache/lucene-solr/commit/1a5b9547202e9db89ab4eb6166b1e91abc7e33a3", "committedDate": "2021-01-26T17:38:27Z", "message": "Ran spotlessApply"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87b7b41948d4203b435356051ec45e9439147e97", "author": {"user": null}, "url": "https://github.com/apache/lucene-solr/commit/87b7b41948d4203b435356051ec45e9439147e97", "committedDate": "2021-01-27T22:20:01Z", "message": "Merge remote-tracking branch 'upstream/master' into LUCENE-9537"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d18c782d21a4a3536569ede88f8d7641be4e73ae", "author": {"user": null}, "url": "https://github.com/apache/lucene-solr/commit/d18c782d21a4a3536569ede88f8d7641be4e73ae", "committedDate": "2021-01-27T22:48:10Z", "message": "Fixed TestFeature smoothingScore implementation"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2626, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}