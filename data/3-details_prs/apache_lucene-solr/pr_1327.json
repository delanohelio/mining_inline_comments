{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NzkwMjgz", "number": 1327, "title": "SOLR-13942: /api/cluster/zk/* to fetch raw ZK data", "bodyText": "", "createdAt": "2020-03-06T12:14:45Z", "url": "https://github.com/apache/lucene-solr/pull/1327", "merged": true, "mergeCommit": {"oid": "ea46596cb3d6bb1dcef79bf352b87114a881766b"}, "closed": true, "closedAt": "2020-04-27T10:32:14Z", "author": {"login": "noblepaul"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcK_EXpgH2gAyMzg0NzkwMjgzOjk0YmRmYWFmMTYzNDQxYjIyNDEyNjkzNDBhYzEwOWQ2YTc1MGY0NDA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcboqkOAH2gAyMzg0NzkwMjgzOmNkZDYwZTNjMDQyNDVjYjU3Mzk3NzkxMmY5ZjU2YTZjMGVmMTgwMzU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/94bdfaaf163441b2241269340ac109d6a750f440", "committedDate": "2020-03-06T12:14:07Z", "message": "SOLR-13942: /api/cluster/zk/* to fetch raw ZK data"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNzg0OTEw", "url": "https://github.com/apache/lucene-solr/pull/1327#pullrequestreview-370784910", "createdAt": "2020-03-07T19:38:11Z", "commit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxOTozODoxMVrOFzRYzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxOTo0ODo1NlrOFzRbqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNjU3NA==", "bodyText": "The name of this class is not very representative. Also, all ZooKeeper handlers are called ZooKeeper..., we should keep that for consistency", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r389306574", "createdAt": "2020-03-07T19:38:11Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZkRead.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.solr.api.Command;\n+import org.apache.solr.api.EndPoint;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.BinaryResponseParser;\n+import org.apache.solr.common.MapWriter;\n+import org.apache.solr.common.params.CommonParams;\n+import org.apache.solr.common.params.MapSolrParams;\n+import org.apache.solr.common.params.SolrParams;\n+import org.apache.solr.common.util.ContentStreamBase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.solr.core.CoreContainer;\n+import org.apache.solr.request.SolrQueryRequest;\n+import org.apache.solr.response.SolrQueryResponse;\n+import org.apache.zookeeper.data.Stat;\n+\n+import static org.apache.solr.common.params.CommonParams.OMIT_HEADER;\n+import static org.apache.solr.common.params.CommonParams.WT;\n+import static org.apache.solr.response.RawResponseWriter.CONTENT;\n+import static org.apache.solr.security.PermissionNameProvider.Name.COLL_READ_PERM;\n+\n+/**Exposes the content of the Zookeeper\n+ * This is an expert feature that exposes the data inside the back end zookeeper.This API may change or\n+ * be removed in future versions.\n+ * This is not a public API. The data that is returned is not guaranteed to remain same\n+ * across releases, as the data stored in Zookeeper may change from time to time.\n+ */\n+@EndPoint(path = \"/cluster/zk/*\",\n+    method = SolrRequest.METHOD.GET,\n+    permission = COLL_READ_PERM)\n+public class ZkRead {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNjU5Mg==", "bodyText": "Do we need to keep the CoreContainer? is the zkClient enough?", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r389306592", "createdAt": "2020-03-07T19:38:30Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZkRead.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.solr.api.Command;\n+import org.apache.solr.api.EndPoint;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.BinaryResponseParser;\n+import org.apache.solr.common.MapWriter;\n+import org.apache.solr.common.params.CommonParams;\n+import org.apache.solr.common.params.MapSolrParams;\n+import org.apache.solr.common.params.SolrParams;\n+import org.apache.solr.common.util.ContentStreamBase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.solr.core.CoreContainer;\n+import org.apache.solr.request.SolrQueryRequest;\n+import org.apache.solr.response.SolrQueryResponse;\n+import org.apache.zookeeper.data.Stat;\n+\n+import static org.apache.solr.common.params.CommonParams.OMIT_HEADER;\n+import static org.apache.solr.common.params.CommonParams.WT;\n+import static org.apache.solr.response.RawResponseWriter.CONTENT;\n+import static org.apache.solr.security.PermissionNameProvider.Name.COLL_READ_PERM;\n+\n+/**Exposes the content of the Zookeeper\n+ * This is an expert feature that exposes the data inside the back end zookeeper.This API may change or\n+ * be removed in future versions.\n+ * This is not a public API. The data that is returned is not guaranteed to remain same\n+ * across releases, as the data stored in Zookeeper may change from time to time.\n+ */\n+@EndPoint(path = \"/cluster/zk/*\",\n+    method = SolrRequest.METHOD.GET,\n+    permission = COLL_READ_PERM)\n+public class ZkRead {\n+  private final CoreContainer coreContainer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNjY3MQ==", "bodyText": "you mean \"s\" or s? Also, the idea here is that we'll add an error per child?", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r389306671", "createdAt": "2020-03-07T19:39:24Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZkRead.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.solr.api.Command;\n+import org.apache.solr.api.EndPoint;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.BinaryResponseParser;\n+import org.apache.solr.common.MapWriter;\n+import org.apache.solr.common.params.CommonParams;\n+import org.apache.solr.common.params.MapSolrParams;\n+import org.apache.solr.common.params.SolrParams;\n+import org.apache.solr.common.util.ContentStreamBase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.solr.core.CoreContainer;\n+import org.apache.solr.request.SolrQueryRequest;\n+import org.apache.solr.response.SolrQueryResponse;\n+import org.apache.zookeeper.data.Stat;\n+\n+import static org.apache.solr.common.params.CommonParams.OMIT_HEADER;\n+import static org.apache.solr.common.params.CommonParams.WT;\n+import static org.apache.solr.response.RawResponseWriter.CONTENT;\n+import static org.apache.solr.security.PermissionNameProvider.Name.COLL_READ_PERM;\n+\n+/**Exposes the content of the Zookeeper\n+ * This is an expert feature that exposes the data inside the back end zookeeper.This API may change or\n+ * be removed in future versions.\n+ * This is not a public API. The data that is returned is not guaranteed to remain same\n+ * across releases, as the data stored in Zookeeper may change from time to time.\n+ */\n+@EndPoint(path = \"/cluster/zk/*\",\n+    method = SolrRequest.METHOD.GET,\n+    permission = COLL_READ_PERM)\n+public class ZkRead {\n+  private final CoreContainer coreContainer;\n+\n+  public ZkRead(CoreContainer coreContainer) {\n+    this.coreContainer = coreContainer;\n+  }\n+\n+  @Command\n+  public void get(SolrQueryRequest req, SolrQueryResponse rsp) {\n+    String path = req.getPathTemplateValues().get(\"*\");\n+    if (path == null || path.isEmpty()) path = \"/\";\n+    byte[] d = null;\n+    try {\n+      List<String> l = coreContainer.getZkController().getZkClient().getChildren(path, null, false);\n+      if (l != null && !l.isEmpty()) {\n+        String prefix = path.endsWith(\"/\") ? path : path + \"/\";\n+\n+        rsp.add(path, (MapWriter) ew -> {\n+          for (String s : l) {\n+            try {\n+              Stat stat = coreContainer.getZkController().getZkClient().exists(prefix + s, null, false);\n+              ew.put(s, (MapWriter) ew1 -> {\n+                ew1.put(\"version\", stat.getVersion());\n+                ew1.put(\"aversion\", stat.getAversion());\n+                ew1.put(\"children\", stat.getNumChildren());\n+                ew1.put(\"ctime\", stat.getCtime());\n+                ew1.put(\"cversion\", stat.getCversion());\n+                ew1.put(\"czxid\", stat.getCzxid());\n+                ew1.put(\"ephemeralOwner\", stat.getEphemeralOwner());\n+                ew1.put(\"mtime\", stat.getMtime());\n+                ew1.put(\"mzxid\", stat.getMzxid());\n+                ew1.put(\"pzxid\", stat.getPzxid());\n+                ew1.put(\"dataLength\", stat.getDataLength());\n+              });\n+            } catch (Exception e) {\n+              ew.put(\"s\", Collections.singletonMap(\"error\", e.getMessage()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNjcxNg==", "bodyText": "Why are you catching Exception here? instead of a subclass? Also, exists throws interrupted exception, you should interrupt (and break)", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r389306716", "createdAt": "2020-03-07T19:40:32Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZkRead.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.solr.api.Command;\n+import org.apache.solr.api.EndPoint;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.BinaryResponseParser;\n+import org.apache.solr.common.MapWriter;\n+import org.apache.solr.common.params.CommonParams;\n+import org.apache.solr.common.params.MapSolrParams;\n+import org.apache.solr.common.params.SolrParams;\n+import org.apache.solr.common.util.ContentStreamBase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.solr.core.CoreContainer;\n+import org.apache.solr.request.SolrQueryRequest;\n+import org.apache.solr.response.SolrQueryResponse;\n+import org.apache.zookeeper.data.Stat;\n+\n+import static org.apache.solr.common.params.CommonParams.OMIT_HEADER;\n+import static org.apache.solr.common.params.CommonParams.WT;\n+import static org.apache.solr.response.RawResponseWriter.CONTENT;\n+import static org.apache.solr.security.PermissionNameProvider.Name.COLL_READ_PERM;\n+\n+/**Exposes the content of the Zookeeper\n+ * This is an expert feature that exposes the data inside the back end zookeeper.This API may change or\n+ * be removed in future versions.\n+ * This is not a public API. The data that is returned is not guaranteed to remain same\n+ * across releases, as the data stored in Zookeeper may change from time to time.\n+ */\n+@EndPoint(path = \"/cluster/zk/*\",\n+    method = SolrRequest.METHOD.GET,\n+    permission = COLL_READ_PERM)\n+public class ZkRead {\n+  private final CoreContainer coreContainer;\n+\n+  public ZkRead(CoreContainer coreContainer) {\n+    this.coreContainer = coreContainer;\n+  }\n+\n+  @Command\n+  public void get(SolrQueryRequest req, SolrQueryResponse rsp) {\n+    String path = req.getPathTemplateValues().get(\"*\");\n+    if (path == null || path.isEmpty()) path = \"/\";\n+    byte[] d = null;\n+    try {\n+      List<String> l = coreContainer.getZkController().getZkClient().getChildren(path, null, false);\n+      if (l != null && !l.isEmpty()) {\n+        String prefix = path.endsWith(\"/\") ? path : path + \"/\";\n+\n+        rsp.add(path, (MapWriter) ew -> {\n+          for (String s : l) {\n+            try {\n+              Stat stat = coreContainer.getZkController().getZkClient().exists(prefix + s, null, false);\n+              ew.put(s, (MapWriter) ew1 -> {\n+                ew1.put(\"version\", stat.getVersion());\n+                ew1.put(\"aversion\", stat.getAversion());\n+                ew1.put(\"children\", stat.getNumChildren());\n+                ew1.put(\"ctime\", stat.getCtime());\n+                ew1.put(\"cversion\", stat.getCversion());\n+                ew1.put(\"czxid\", stat.getCzxid());\n+                ew1.put(\"ephemeralOwner\", stat.getEphemeralOwner());\n+                ew1.put(\"mtime\", stat.getMtime());\n+                ew1.put(\"mzxid\", stat.getMzxid());\n+                ew1.put(\"pzxid\", stat.getPzxid());\n+                ew1.put(\"dataLength\", stat.getDataLength());\n+              });\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNjc2NA==", "bodyText": "Why is this needed?", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r389306764", "createdAt": "2020-03-07T19:40:57Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZkRead.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.solr.api.Command;\n+import org.apache.solr.api.EndPoint;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.BinaryResponseParser;\n+import org.apache.solr.common.MapWriter;\n+import org.apache.solr.common.params.CommonParams;\n+import org.apache.solr.common.params.MapSolrParams;\n+import org.apache.solr.common.params.SolrParams;\n+import org.apache.solr.common.util.ContentStreamBase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.solr.core.CoreContainer;\n+import org.apache.solr.request.SolrQueryRequest;\n+import org.apache.solr.response.SolrQueryResponse;\n+import org.apache.zookeeper.data.Stat;\n+\n+import static org.apache.solr.common.params.CommonParams.OMIT_HEADER;\n+import static org.apache.solr.common.params.CommonParams.WT;\n+import static org.apache.solr.response.RawResponseWriter.CONTENT;\n+import static org.apache.solr.security.PermissionNameProvider.Name.COLL_READ_PERM;\n+\n+/**Exposes the content of the Zookeeper\n+ * This is an expert feature that exposes the data inside the back end zookeeper.This API may change or\n+ * be removed in future versions.\n+ * This is not a public API. The data that is returned is not guaranteed to remain same\n+ * across releases, as the data stored in Zookeeper may change from time to time.\n+ */\n+@EndPoint(path = \"/cluster/zk/*\",\n+    method = SolrRequest.METHOD.GET,\n+    permission = COLL_READ_PERM)\n+public class ZkRead {\n+  private final CoreContainer coreContainer;\n+\n+  public ZkRead(CoreContainer coreContainer) {\n+    this.coreContainer = coreContainer;\n+  }\n+\n+  @Command\n+  public void get(SolrQueryRequest req, SolrQueryResponse rsp) {\n+    String path = req.getPathTemplateValues().get(\"*\");\n+    if (path == null || path.isEmpty()) path = \"/\";\n+    byte[] d = null;\n+    try {\n+      List<String> l = coreContainer.getZkController().getZkClient().getChildren(path, null, false);\n+      if (l != null && !l.isEmpty()) {\n+        String prefix = path.endsWith(\"/\") ? path : path + \"/\";\n+\n+        rsp.add(path, (MapWriter) ew -> {\n+          for (String s : l) {\n+            try {\n+              Stat stat = coreContainer.getZkController().getZkClient().exists(prefix + s, null, false);\n+              ew.put(s, (MapWriter) ew1 -> {\n+                ew1.put(\"version\", stat.getVersion());\n+                ew1.put(\"aversion\", stat.getAversion());\n+                ew1.put(\"children\", stat.getNumChildren());\n+                ew1.put(\"ctime\", stat.getCtime());\n+                ew1.put(\"cversion\", stat.getCversion());\n+                ew1.put(\"czxid\", stat.getCzxid());\n+                ew1.put(\"ephemeralOwner\", stat.getEphemeralOwner());\n+                ew1.put(\"mtime\", stat.getMtime());\n+                ew1.put(\"mzxid\", stat.getMzxid());\n+                ew1.put(\"pzxid\", stat.getPzxid());\n+                ew1.put(\"dataLength\", stat.getDataLength());\n+              });\n+            } catch (Exception e) {\n+              ew.put(\"s\", Collections.singletonMap(\"error\", e.getMessage()));\n+            }\n+          }\n+        });\n+\n+      } else {\n+        d = coreContainer.getZkController().getZkClient().getData(path, null, null, false);\n+        if (d == null || d.length == 0) {\n+          rsp.add(path, null);\n+          return;\n+        }\n+\n+        Map<String, String> map = new HashMap<>(1);\n+        map.put(WT, \"raw\");\n+        map.put(OMIT_HEADER, \"true\");\n+        req.setParams(SolrParams.wrapDefaults(new MapSolrParams(map), req.getParams()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNjc4Nw==", "bodyText": "Same as above, we probably don't need to catch all exceptions, just the ones being thrown. And the same thing with interruption", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r389306787", "createdAt": "2020-03-07T19:41:24Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZkRead.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.solr.api.Command;\n+import org.apache.solr.api.EndPoint;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.BinaryResponseParser;\n+import org.apache.solr.common.MapWriter;\n+import org.apache.solr.common.params.CommonParams;\n+import org.apache.solr.common.params.MapSolrParams;\n+import org.apache.solr.common.params.SolrParams;\n+import org.apache.solr.common.util.ContentStreamBase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.solr.core.CoreContainer;\n+import org.apache.solr.request.SolrQueryRequest;\n+import org.apache.solr.response.SolrQueryResponse;\n+import org.apache.zookeeper.data.Stat;\n+\n+import static org.apache.solr.common.params.CommonParams.OMIT_HEADER;\n+import static org.apache.solr.common.params.CommonParams.WT;\n+import static org.apache.solr.response.RawResponseWriter.CONTENT;\n+import static org.apache.solr.security.PermissionNameProvider.Name.COLL_READ_PERM;\n+\n+/**Exposes the content of the Zookeeper\n+ * This is an expert feature that exposes the data inside the back end zookeeper.This API may change or\n+ * be removed in future versions.\n+ * This is not a public API. The data that is returned is not guaranteed to remain same\n+ * across releases, as the data stored in Zookeeper may change from time to time.\n+ */\n+@EndPoint(path = \"/cluster/zk/*\",\n+    method = SolrRequest.METHOD.GET,\n+    permission = COLL_READ_PERM)\n+public class ZkRead {\n+  private final CoreContainer coreContainer;\n+\n+  public ZkRead(CoreContainer coreContainer) {\n+    this.coreContainer = coreContainer;\n+  }\n+\n+  @Command\n+  public void get(SolrQueryRequest req, SolrQueryResponse rsp) {\n+    String path = req.getPathTemplateValues().get(\"*\");\n+    if (path == null || path.isEmpty()) path = \"/\";\n+    byte[] d = null;\n+    try {\n+      List<String> l = coreContainer.getZkController().getZkClient().getChildren(path, null, false);\n+      if (l != null && !l.isEmpty()) {\n+        String prefix = path.endsWith(\"/\") ? path : path + \"/\";\n+\n+        rsp.add(path, (MapWriter) ew -> {\n+          for (String s : l) {\n+            try {\n+              Stat stat = coreContainer.getZkController().getZkClient().exists(prefix + s, null, false);\n+              ew.put(s, (MapWriter) ew1 -> {\n+                ew1.put(\"version\", stat.getVersion());\n+                ew1.put(\"aversion\", stat.getAversion());\n+                ew1.put(\"children\", stat.getNumChildren());\n+                ew1.put(\"ctime\", stat.getCtime());\n+                ew1.put(\"cversion\", stat.getCversion());\n+                ew1.put(\"czxid\", stat.getCzxid());\n+                ew1.put(\"ephemeralOwner\", stat.getEphemeralOwner());\n+                ew1.put(\"mtime\", stat.getMtime());\n+                ew1.put(\"mzxid\", stat.getMzxid());\n+                ew1.put(\"pzxid\", stat.getPzxid());\n+                ew1.put(\"dataLength\", stat.getDataLength());\n+              });\n+            } catch (Exception e) {\n+              ew.put(\"s\", Collections.singletonMap(\"error\", e.getMessage()));\n+            }\n+          }\n+        });\n+\n+      } else {\n+        d = coreContainer.getZkController().getZkClient().getData(path, null, null, false);\n+        if (d == null || d.length == 0) {\n+          rsp.add(path, null);\n+          return;\n+        }\n+\n+        Map<String, String> map = new HashMap<>(1);\n+        map.put(WT, \"raw\");\n+        map.put(OMIT_HEADER, \"true\");\n+        req.setParams(SolrParams.wrapDefaults(new MapSolrParams(map), req.getParams()));\n+\n+\n+        rsp.add(CONTENT, new ContentStreamBase.ByteArrayStream(d, null,\n+            d[0] == '{' ? CommonParams.JSON_MIME : BinaryResponseParser.BINARY_CONTENT_TYPE));\n+\n+      }\n+\n+    } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNjg1Mg==", "bodyText": "This test doesn't belong in ZookeeperStatusHandlerTest", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r389306852", "createdAt": "2020-03-07T19:42:30Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest.java", "diffHunk": "@@ -74,6 +78,39 @@ public void tearDown() throws Exception {\n     super.tearDown();\n   }\n \n+  @Test\n+  public void testZkread() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNjg4MA==", "bodyText": "nit. Fix spaces", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r389306880", "createdAt": "2020-03-07T19:42:56Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest.java", "diffHunk": "@@ -74,6 +78,39 @@ public void tearDown() throws Exception {\n     super.tearDown();\n   }\n \n+  @Test\n+  public void testZkread() throws Exception {\n+    URL baseUrl = cluster.getJettySolrRunner(0).getBaseUrl();\n+    String basezk = baseUrl.toString().replace(\"/solr\", \"/api\") + \"/cluster/zk\";\n+\n+    try(  HttpSolrClient client = new HttpSolrClient.Builder(baseUrl.toString()).build()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNzA5MA==", "bodyText": "Should we consider the case where znodes have data and children?", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r389307090", "createdAt": "2020-03-07T19:45:54Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZkRead.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.solr.api.Command;\n+import org.apache.solr.api.EndPoint;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.BinaryResponseParser;\n+import org.apache.solr.common.MapWriter;\n+import org.apache.solr.common.params.CommonParams;\n+import org.apache.solr.common.params.MapSolrParams;\n+import org.apache.solr.common.params.SolrParams;\n+import org.apache.solr.common.util.ContentStreamBase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.solr.core.CoreContainer;\n+import org.apache.solr.request.SolrQueryRequest;\n+import org.apache.solr.response.SolrQueryResponse;\n+import org.apache.zookeeper.data.Stat;\n+\n+import static org.apache.solr.common.params.CommonParams.OMIT_HEADER;\n+import static org.apache.solr.common.params.CommonParams.WT;\n+import static org.apache.solr.response.RawResponseWriter.CONTENT;\n+import static org.apache.solr.security.PermissionNameProvider.Name.COLL_READ_PERM;\n+\n+/**Exposes the content of the Zookeeper\n+ * This is an expert feature that exposes the data inside the back end zookeeper.This API may change or\n+ * be removed in future versions.\n+ * This is not a public API. The data that is returned is not guaranteed to remain same\n+ * across releases, as the data stored in Zookeeper may change from time to time.\n+ */\n+@EndPoint(path = \"/cluster/zk/*\",\n+    method = SolrRequest.METHOD.GET,\n+    permission = COLL_READ_PERM)\n+public class ZkRead {\n+  private final CoreContainer coreContainer;\n+\n+  public ZkRead(CoreContainer coreContainer) {\n+    this.coreContainer = coreContainer;\n+  }\n+\n+  @Command\n+  public void get(SolrQueryRequest req, SolrQueryResponse rsp) {\n+    String path = req.getPathTemplateValues().get(\"*\");\n+    if (path == null || path.isEmpty()) path = \"/\";\n+    byte[] d = null;\n+    try {\n+      List<String> l = coreContainer.getZkController().getZkClient().getChildren(path, null, false);\n+      if (l != null && !l.isEmpty()) {\n+        String prefix = path.endsWith(\"/\") ? path : path + \"/\";\n+\n+        rsp.add(path, (MapWriter) ew -> {\n+          for (String s : l) {\n+            try {\n+              Stat stat = coreContainer.getZkController().getZkClient().exists(prefix + s, null, false);\n+              ew.put(s, (MapWriter) ew1 -> {\n+                ew1.put(\"version\", stat.getVersion());\n+                ew1.put(\"aversion\", stat.getAversion());\n+                ew1.put(\"children\", stat.getNumChildren());\n+                ew1.put(\"ctime\", stat.getCtime());\n+                ew1.put(\"cversion\", stat.getCversion());\n+                ew1.put(\"czxid\", stat.getCzxid());\n+                ew1.put(\"ephemeralOwner\", stat.getEphemeralOwner());\n+                ew1.put(\"mtime\", stat.getMtime());\n+                ew1.put(\"mzxid\", stat.getMzxid());\n+                ew1.put(\"pzxid\", stat.getPzxid());\n+                ew1.put(\"dataLength\", stat.getDataLength());\n+              });\n+            } catch (Exception e) {\n+              ew.put(\"s\", Collections.singletonMap(\"error\", e.getMessage()));\n+            }\n+          }\n+        });\n+\n+      } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNzMwNA==", "bodyText": "why make things so complicated? cant you just put some static text? what are you trying to achieve with this randomization?", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r389307304", "createdAt": "2020-03-07T19:48:56Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest.java", "diffHunk": "@@ -74,6 +78,39 @@ public void tearDown() throws Exception {\n     super.tearDown();\n   }\n \n+  @Test\n+  public void testZkread() throws Exception {\n+    URL baseUrl = cluster.getJettySolrRunner(0).getBaseUrl();\n+    String basezk = baseUrl.toString().replace(\"/solr\", \"/api\") + \"/cluster/zk\";\n+\n+    try(  HttpSolrClient client = new HttpSolrClient.Builder(baseUrl.toString()).build()) {\n+      Object o = Utils.executeGET(client.getHttpClient(),\n+          basezk + \"/security.json\",\n+          Utils.JSONCONSUMER );\n+      assertNotNull(o);\n+      o = Utils.executeGET(client.getHttpClient(),\n+          basezk + \"/configs\",\n+          Utils.JSONCONSUMER );\n+      assertEquals(\"0\", String.valueOf(getObjectByPath(o,true, split(\":/configs:_default:dataLength\",':'))));\n+      assertEquals(\"0\", String.valueOf(getObjectByPath(o,true, split(\":/configs:conf:dataLength\",':'))));\n+      byte[] bytes = new byte[1024*5];\n+      for (int i = 0; i < bytes.length; i++) {\n+        bytes[i] = (byte) random().nextInt(128);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94bdfaaf163441b2241269340ac109d6a750f440"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b12076cace8e5e71685f2fe44488bf7ee2fd1e9d", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/b12076cace8e5e71685f2fe44488bf7ee2fd1e9d", "committedDate": "2020-03-20T03:33:43Z", "message": "incorporating feedback comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ef0e3df6b3a785124800cb64185f63eb323b49c", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/1ef0e3df6b3a785124800cb64185f63eb323b49c", "committedDate": "2020-03-20T03:37:11Z", "message": "moved to a new test class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d97d4ad4930ae5937563d595699b618dbc2a30e", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/5d97d4ad4930ae5937563d595699b618dbc2a30e", "committedDate": "2020-03-20T03:39:49Z", "message": "merging with master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "880476954343a0ba5d40d2cb9f373a36e645e67b", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/880476954343a0ba5d40d2cb9f373a36e645e67b", "committedDate": "2020-03-20T03:41:47Z", "message": "revert changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aff748f1bb24f1cd256e91aff2d39b2da804736f", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/aff748f1bb24f1cd256e91aff2d39b2da804736f", "committedDate": "2020-03-20T03:43:30Z", "message": "Revert \"merging with master\"\n\nThis reverts commit 5d97d4ad4930ae5937563d595699b618dbc2a30e.\n\nrevert the merge"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4Njc5MzYy", "url": "https://github.com/apache/lucene-solr/pull/1327#pullrequestreview-378679362", "createdAt": "2020-03-20T17:28:50Z", "commit": {"oid": "aff748f1bb24f1cd256e91aff2d39b2da804736f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNzoyODo1MFrOF5c8ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNzoyODo1MFrOF5c8ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc4NzQ1MA==", "bodyText": "Handlers of requests are typically called Handler", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r395787450", "createdAt": "2020-03-20T17:28:50Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZookeeperRead.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.solr.api.Command;\n+import org.apache.solr.api.EndPoint;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.BinaryResponseParser;\n+import org.apache.solr.common.MapWriter;\n+import org.apache.solr.common.params.CommonParams;\n+import org.apache.solr.common.params.MapSolrParams;\n+import org.apache.solr.common.params.SolrParams;\n+import org.apache.solr.common.util.ContentStreamBase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.solr.core.CoreContainer;\n+import org.apache.solr.request.SolrQueryRequest;\n+import org.apache.solr.response.SolrQueryResponse;\n+import org.apache.zookeeper.data.Stat;\n+\n+import static org.apache.solr.common.params.CommonParams.OMIT_HEADER;\n+import static org.apache.solr.common.params.CommonParams.WT;\n+import static org.apache.solr.response.RawResponseWriter.CONTENT;\n+import static org.apache.solr.security.PermissionNameProvider.Name.COLL_READ_PERM;\n+\n+/**Exposes the content of the Zookeeper\n+ * This is an expert feature that exposes the data inside the back end zookeeper.This API may change or\n+ * be removed in future versions.\n+ * This is not a public API. The data that is returned is not guaranteed to remain same\n+ * across releases, as the data stored in Zookeeper may change from time to time.\n+ */\n+@EndPoint(path = \"/cluster/zk/*\",\n+    method = SolrRequest.METHOD.GET,\n+    permission = COLL_READ_PERM)\n+public class ZookeeperRead {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aff748f1bb24f1cd256e91aff2d39b2da804736f"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NjkxOTI1", "url": "https://github.com/apache/lucene-solr/pull/1327#pullrequestreview-378691925", "createdAt": "2020-03-20T17:46:46Z", "commit": {"oid": "aff748f1bb24f1cd256e91aff2d39b2da804736f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNzo0Njo0NlrOF5dimw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNzo0Njo0NlrOF5dimw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc5NzE0Nw==", "bodyText": "can you fix the compiler warnings?", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r395797147", "createdAt": "2020-03-20T17:46:46Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/test/org/apache/solr/handler/admin/ZookeeperReadTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.net.URL;\n+import java.util.Map;\n+\n+import org.apache.solr.client.solrj.impl.HttpSolrClient;\n+import org.apache.solr.cloud.SolrCloudTestCase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.zookeeper.CreateMode;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.solr.common.util.StrUtils.split;\n+import static org.apache.solr.common.util.Utils.getObjectByPath;\n+\n+public class ZookeeperReadTest extends SolrCloudTestCase {\n+  private static final Logger log = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+\n+  @BeforeClass\n+  public static void setupCluster() throws Exception {\n+    configureCluster(1)\n+        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n+        .configure();\n+  }\n+\n+  @Before\n+  @Override\n+  public void setUp() throws Exception {\n+    super.setUp();\n+  }\n+\n+  @After\n+  @Override\n+  public void tearDown() throws Exception {\n+    super.tearDown();\n+  }\n+\n+  @Test\n+  public void testZkread() throws Exception {\n+    URL baseUrl = cluster.getJettySolrRunner(0).getBaseUrl();\n+    String basezk = baseUrl.toString().replace(\"/solr\", \"/api\") + \"/cluster/zk\";\n+\n+    try (HttpSolrClient client = new HttpSolrClient.Builder(baseUrl.toString()).build()) {\n+      Object o = Utils.executeGET(client.getHttpClient(),\n+          basezk + \"/security.json\",\n+          Utils.JSONCONSUMER);\n+      assertNotNull(o);\n+      o = Utils.executeGET(client.getHttpClient(),\n+          basezk + \"/configs\",\n+          Utils.JSONCONSUMER);\n+      assertEquals(\"0\", String.valueOf(getObjectByPath(o, true, split(\":/configs:_default:dataLength\", ':'))));\n+      assertEquals(\"0\", String.valueOf(getObjectByPath(o, true, split(\":/configs:conf:dataLength\", ':'))));\n+\n+      o = Utils.executeGET(client.getHttpClient(),\n+          basezk + \"/configs?leaf=true\",\n+          Utils.JSONCONSUMER);\n+      assertTrue(((Map)o).containsKey(\"/configs\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aff748f1bb24f1cd256e91aff2d39b2da804736f"}, "originalPosition": 79}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df16e04770d4d26887806ff6d3d7b61b6d86c77b", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/df16e04770d4d26887806ff6d3d7b61b6d86c77b", "committedDate": "2020-03-23T00:13:42Z", "message": "created 2 paths instead of one /cluster/zk-data and /cluster/zk-list"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88a3ba11cd9c65fc98f3e423f077f493084520be", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/88a3ba11cd9c65fc98f3e423f077f493084520be", "committedDate": "2020-03-26T23:04:53Z", "message": "renamed class"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzODY3NDUw", "url": "https://github.com/apache/lucene-solr/pull/1327#pullrequestreview-383867450", "createdAt": "2020-03-30T13:44:00Z", "commit": {"oid": "88a3ba11cd9c65fc98f3e423f077f493084520be"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMzo0NDowMFrOF9qZcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMzo1OToyOFrOF9rIBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIwMjA5OA==", "bodyText": "I cannot see that this new permission is used anywhere?\nAnd if the new zk handler is covered by zk-read, should not also existing ZookeeperInfoHandler handler implement PermissionNameProvider and declare the same permission, for consistency?", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r400202098", "createdAt": "2020-03-30T13:44:00Z", "author": {"login": "janhoy"}, "path": "solr/core/src/java/org/apache/solr/security/PermissionNameProvider.java", "diffHunk": "@@ -38,6 +38,7 @@\n     COLL_READ_PERM(\"collection-admin-read\", null),\n     CORE_READ_PERM(\"core-admin-read\", null),\n     CORE_EDIT_PERM(\"core-admin-edit\", null),\n+    ZK_READ_PERM(\"zk-read\", null),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88a3ba11cd9c65fc98f3e423f077f493084520be"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIwOTkyMw==", "bodyText": "Perhaps you meant to use ZK_READ_PERM here, and also above?", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r400209923", "createdAt": "2020-03-30T13:54:15Z", "author": {"login": "janhoy"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZookeeperReadAPI.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.solr.api.Command;\n+import org.apache.solr.api.EndPoint;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.BinaryResponseParser;\n+import org.apache.solr.client.solrj.impl.XMLResponseParser;\n+import org.apache.solr.common.MapWriter;\n+import org.apache.solr.common.SolrException;\n+import org.apache.solr.common.params.CommonParams;\n+import org.apache.solr.common.params.MapSolrParams;\n+import org.apache.solr.common.params.SolrParams;\n+import org.apache.solr.common.util.ContentStreamBase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.solr.core.CoreContainer;\n+import org.apache.solr.request.SolrQueryRequest;\n+import org.apache.solr.response.SolrQueryResponse;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.data.Stat;\n+\n+import static org.apache.solr.common.params.CommonParams.OMIT_HEADER;\n+import static org.apache.solr.common.params.CommonParams.WT;\n+import static org.apache.solr.response.RawResponseWriter.CONTENT;\n+import static org.apache.solr.security.PermissionNameProvider.Name.COLL_READ_PERM;\n+\n+/**\n+ * Exposes the content of the Zookeeper\n+ * This is an expert feature that exposes the data inside the back end zookeeper.This API may change or\n+ * be removed in future versions.\n+ * This is not a public API. The data that is returned is not guaranteed to remain same\n+ * across releases, as the data stored in Zookeeper may change from time to time.\n+ */\n+\n+public class ZookeeperReadAPI {\n+  private final CoreContainer coreContainer;\n+  public final ReadNode readNode = new ReadNode();\n+  public final ListNode listNode = new ListNode();\n+\n+  public ZookeeperReadAPI(CoreContainer coreContainer) {\n+    this.coreContainer = coreContainer;\n+  }\n+\n+  @EndPoint(path = \"/cluster/zk-data/*\",\n+      method = SolrRequest.METHOD.GET,\n+      permission = COLL_READ_PERM)\n+  public class ReadNode {\n+    @Command\n+    public void get(SolrQueryRequest req, SolrQueryResponse rsp) {\n+      String path = req.getPathTemplateValues().get(\"*\");\n+      if (path == null || path.isEmpty()) path = \"/\";\n+      byte[] d = null;\n+      try {\n+        d = coreContainer.getZkController().getZkClient().getData(path, null, null, false);\n+      } catch (KeeperException.NoNodeException e) {\n+        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such node: \"+ path);\n+      } catch (Exception e) {\n+        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unexpected error\", e);\n+      }\n+      if (d == null || d.length == 0) {\n+        rsp.add(path, null);\n+        return;\n+      }\n+\n+      Map<String, String> map = new HashMap<>(1);\n+      map.put(WT, \"raw\");\n+      map.put(OMIT_HEADER, \"true\");\n+      req.setParams(SolrParams.wrapDefaults(new MapSolrParams(map), req.getParams()));\n+\n+      String mime = BinaryResponseParser.BINARY_CONTENT_TYPE;\n+\n+      if (d[0] == '{') mime = CommonParams.JSON_MIME;\n+      if (d[0] == '<' || d[1] == '?') mime = XMLResponseParser.XML_CONTENT_TYPE;\n+      rsp.add(CONTENT, new ContentStreamBase.ByteArrayStream(d, null, mime));\n+\n+    }\n+  }\n+\n+  @EndPoint(path = \"/cluster/zk-ls/*\",\n+      method = SolrRequest.METHOD.GET,\n+      permission = COLL_READ_PERM)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88a3ba11cd9c65fc98f3e423f077f493084520be"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxMjEzNw==", "bodyText": "lucene.experimental annotation?", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r400212137", "createdAt": "2020-03-30T13:57:11Z", "author": {"login": "janhoy"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZookeeperReadAPI.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.solr.api.Command;\n+import org.apache.solr.api.EndPoint;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.BinaryResponseParser;\n+import org.apache.solr.client.solrj.impl.XMLResponseParser;\n+import org.apache.solr.common.MapWriter;\n+import org.apache.solr.common.SolrException;\n+import org.apache.solr.common.params.CommonParams;\n+import org.apache.solr.common.params.MapSolrParams;\n+import org.apache.solr.common.params.SolrParams;\n+import org.apache.solr.common.util.ContentStreamBase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.solr.core.CoreContainer;\n+import org.apache.solr.request.SolrQueryRequest;\n+import org.apache.solr.response.SolrQueryResponse;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.data.Stat;\n+\n+import static org.apache.solr.common.params.CommonParams.OMIT_HEADER;\n+import static org.apache.solr.common.params.CommonParams.WT;\n+import static org.apache.solr.response.RawResponseWriter.CONTENT;\n+import static org.apache.solr.security.PermissionNameProvider.Name.COLL_READ_PERM;\n+\n+/**\n+ * Exposes the content of the Zookeeper\n+ * This is an expert feature that exposes the data inside the back end zookeeper.This API may change or\n+ * be removed in future versions.\n+ * This is not a public API. The data that is returned is not guaranteed to remain same\n+ * across releases, as the data stored in Zookeeper may change from time to time.\n+ */\n+\n+public class ZookeeperReadAPI {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88a3ba11cd9c65fc98f3e423f077f493084520be"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxNDAyMQ==", "bodyText": "@sigram requested in JIRA that the API response is marked as experimental. That can be solved with an extra rsp.add here?", "url": "https://github.com/apache/lucene-solr/pull/1327#discussion_r400214021", "createdAt": "2020-03-30T13:59:28Z", "author": {"login": "janhoy"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZookeeperReadAPI.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.handler.admin;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.solr.api.Command;\n+import org.apache.solr.api.EndPoint;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.BinaryResponseParser;\n+import org.apache.solr.client.solrj.impl.XMLResponseParser;\n+import org.apache.solr.common.MapWriter;\n+import org.apache.solr.common.SolrException;\n+import org.apache.solr.common.params.CommonParams;\n+import org.apache.solr.common.params.MapSolrParams;\n+import org.apache.solr.common.params.SolrParams;\n+import org.apache.solr.common.util.ContentStreamBase;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.solr.core.CoreContainer;\n+import org.apache.solr.request.SolrQueryRequest;\n+import org.apache.solr.response.SolrQueryResponse;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.data.Stat;\n+\n+import static org.apache.solr.common.params.CommonParams.OMIT_HEADER;\n+import static org.apache.solr.common.params.CommonParams.WT;\n+import static org.apache.solr.response.RawResponseWriter.CONTENT;\n+import static org.apache.solr.security.PermissionNameProvider.Name.COLL_READ_PERM;\n+\n+/**\n+ * Exposes the content of the Zookeeper\n+ * This is an expert feature that exposes the data inside the back end zookeeper.This API may change or\n+ * be removed in future versions.\n+ * This is not a public API. The data that is returned is not guaranteed to remain same\n+ * across releases, as the data stored in Zookeeper may change from time to time.\n+ */\n+\n+public class ZookeeperReadAPI {\n+  private final CoreContainer coreContainer;\n+  public final ReadNode readNode = new ReadNode();\n+  public final ListNode listNode = new ListNode();\n+\n+  public ZookeeperReadAPI(CoreContainer coreContainer) {\n+    this.coreContainer = coreContainer;\n+  }\n+\n+  @EndPoint(path = \"/cluster/zk-data/*\",\n+      method = SolrRequest.METHOD.GET,\n+      permission = COLL_READ_PERM)\n+  public class ReadNode {\n+    @Command\n+    public void get(SolrQueryRequest req, SolrQueryResponse rsp) {\n+      String path = req.getPathTemplateValues().get(\"*\");\n+      if (path == null || path.isEmpty()) path = \"/\";\n+      byte[] d = null;\n+      try {\n+        d = coreContainer.getZkController().getZkClient().getData(path, null, null, false);\n+      } catch (KeeperException.NoNodeException e) {\n+        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such node: \"+ path);\n+      } catch (Exception e) {\n+        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unexpected error\", e);\n+      }\n+      if (d == null || d.length == 0) {\n+        rsp.add(path, null);\n+        return;\n+      }\n+\n+      Map<String, String> map = new HashMap<>(1);\n+      map.put(WT, \"raw\");\n+      map.put(OMIT_HEADER, \"true\");\n+      req.setParams(SolrParams.wrapDefaults(new MapSolrParams(map), req.getParams()));\n+\n+      String mime = BinaryResponseParser.BINARY_CONTENT_TYPE;\n+\n+      if (d[0] == '{') mime = CommonParams.JSON_MIME;\n+      if (d[0] == '<' || d[1] == '?') mime = XMLResponseParser.XML_CONTENT_TYPE;\n+      rsp.add(CONTENT, new ContentStreamBase.ByteArrayStream(d, null, mime));\n+\n+    }\n+  }\n+\n+  @EndPoint(path = \"/cluster/zk-ls/*\",\n+      method = SolrRequest.METHOD.GET,\n+      permission = COLL_READ_PERM)\n+  public class ListNode {\n+    @Command\n+    public void list(SolrQueryRequest req, SolrQueryResponse rsp) {\n+      String path = req.getPathTemplateValues().get(\"*\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88a3ba11cd9c65fc98f3e423f077f493084520be"}, "originalPosition": 106}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "591619bf489741d18393df72f8acaa5b4b1ffad5", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/591619bf489741d18393df72f8acaa5b4b1ffad5", "committedDate": "2020-03-31T07:55:11Z", "message": "set the right permissions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bef4dc4f01c59de8284bf6de5cb2a1304209a8a9", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/bef4dc4f01c59de8284bf6de5cb2a1304209a8a9", "committedDate": "2020-03-31T08:00:27Z", "message": "added experimental warnings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2705797b6e867878070c848952604a46347d12f", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/c2705797b6e867878070c848952604a46347d12f", "committedDate": "2020-03-31T08:04:39Z", "message": "paths changed to /cluster/zk/ls & /cluster/zk/data"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdd60e3c04245cb573977912f9f56a6c0ef18035", "author": {"user": {"login": "noblepaul", "name": "Noble Paul"}}, "url": "https://github.com/apache/lucene-solr/commit/cdd60e3c04245cb573977912f9f56a6c0ef18035", "committedDate": "2020-04-27T05:44:44Z", "message": "Refactored, with better error handling"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2182, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}