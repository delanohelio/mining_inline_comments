{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3NDE4MDA2", "number": 1552, "title": "LUCENE-8962: merge small segments on commit", "bodyText": "LUCENE-8962: This PR revisits the merge-on-commit patch submitted by @msfroh a little while ago. The only change from that earlier PR is a fix for failures uncovered by TestIndexWriter.testRandomOperations, some whitespace cleanups, and a rebase on the current master branch. The problem was that updateSegmentInfosOnMergeFinish would incorrectly decRef a merged segments' files if that segment was modified by deletions (or updates) while it was being merged.\nWith this fix, I ran the failing test case several thousands of times with no failures, whereas before it would routinely fail after a few hundred test runs.", "createdAt": "2020-06-03T19:50:19Z", "url": "https://github.com/apache/lucene-solr/pull/1552", "merged": true, "mergeCommit": {"oid": "972c84022ec9c2b867848cb11f6d4c6bc466e8f2"}, "closed": true, "closedAt": "2020-06-18T20:56:30Z", "author": {"login": "msokolov"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcnueDJgH2gAyNDI3NDE4MDA2OjY0MmU1NmFiYTg1OTQ3YmEyODBlMzA5MTdiNjFiZGY2MDVjMGFhNTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcsgc1-gFqTQzMzQxNzMzMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "642e56aba85947ba280e30917b61bdf605c0aa51", "author": {"user": null}, "url": "https://github.com/apache/lucene-solr/commit/642e56aba85947ba280e30917b61bdf605c0aa51", "committedDate": "2020-06-03T19:17:35Z", "message": "Revert \"Revert \"LUCENE-8962\"\"\n\nThis reverts commit 4501b3d3fdbc35af99bde6abe7432cfc5e8b5547.\n\nThis reverts commit 075adac59865b3277adcf86052f2fae3e6d11135."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cab5ef5e6f2bdcda59fd669a298ec1377777af9d", "author": {"user": null}, "url": "https://github.com/apache/lucene-solr/commit/cab5ef5e6f2bdcda59fd669a298ec1377777af9d", "committedDate": "2020-06-03T19:17:35Z", "message": "Fix case where mergeOnCommit would attempt to delete files twice in the presence of deletions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0ODg0Nzcz", "url": "https://github.com/apache/lucene-solr/pull/1552#pullrequestreview-424884773", "createdAt": "2020-06-04T22:44:06Z", "commit": {"oid": "cab5ef5e6f2bdcda59fd669a298ec1377777af9d"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjo0NDowNlrOGfac5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjo0NDoxMlrOGfadDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU5MjQyMA==", "bodyText": "Maybe for the last sentence: The merges are not cancelled, and will still run to completion independent of the commit like normal segment merges?\nMaybe also state that this setting has no effect unless the MergePolicy actually returns merges from findFullFlushMerges, which the default merge policy does not?", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r435592420", "createdAt": "2020-06-04T22:44:06Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig.java", "diffHunk": "@@ -459,6 +463,31 @@ public IndexWriterConfig setCommitOnClose(boolean commitOnClose) {\n     return this;\n   }\n \n+  /**\n+   * Expert: sets the amount of time to wait for merges returned by MergePolicy.findFullFlushMerges(...).\n+   * If this time is reached, we proceed with the commit based on segments merged up to that point.\n+   * The merges are not cancelled, and may still run to completion independent of the commit.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cab5ef5e6f2bdcda59fd669a298ec1377777af9d"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU5MjQ2MA==", "bodyText": "Maybe Add IndexWriter merge-on-commit feature to selectively merge small segments on commit, subject to a configurable timeout, to improve search performance by reducing the number of small segments for searching?", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r435592460", "createdAt": "2020-06-04T22:44:12Z", "author": {"login": "mikemccand"}, "path": "lucene/CHANGES.txt", "diffHunk": "@@ -376,6 +376,8 @@ Improvements\n \n * LUCENE-9253: KoreanTokenizer now supports custom dictionaries(system, unknown). (Namgyu Kim)\n \n+* LUCENE-8962: Add ability to selectively merge on commit (Michael Froh)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cab5ef5e6f2bdcda59fd669a298ec1377777af9d"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4MDk0OTQw", "url": "https://github.com/apache/lucene-solr/pull/1552#pullrequestreview-428094940", "createdAt": "2020-06-10T14:12:04Z", "commit": {"oid": "cab5ef5e6f2bdcda59fd669a298ec1377777af9d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNDoxMjowNVrOGh2xZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNDo0MDo0OVrOGh4LjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE1MzU3NQ==", "bodyText": "this seems unnecessary?", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r438153575", "createdAt": "2020-06-10T14:12:05Z", "author": {"login": "s1monw"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -4483,6 +4593,7 @@ public int length() {\n         // Merge would produce a 0-doc segment, so we do nothing except commit the merge to remove all the 0-doc segments that we \"merged\":\n         assert merge.info.info.maxDoc() == 0;\n         commitMerge(merge, mergeState);\n+        success = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cab5ef5e6f2bdcda59fd669a298ec1377777af9d"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE1NjIzNQ==", "bodyText": "this method is never called in this entire PR. Also the Interface seems to be unused or rather never implemented. I think it should be removed.", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r438156235", "createdAt": "2020-06-10T14:15:41Z", "author": {"login": "s1monw"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig.java", "diffHunk": "@@ -459,6 +463,31 @@ public IndexWriterConfig setCommitOnClose(boolean commitOnClose) {\n     return this;\n   }\n \n+  /**\n+   * Expert: sets the amount of time to wait for merges returned by MergePolicy.findFullFlushMerges(...).\n+   * If this time is reached, we proceed with the commit based on segments merged up to that point.\n+   * The merges are not cancelled, and may still run to completion independent of the commit.\n+   */\n+  public IndexWriterConfig setMaxCommitMergeWaitSeconds(double maxCommitMergeWaitSeconds) {\n+    this.maxCommitMergeWaitSeconds = maxCommitMergeWaitSeconds;\n+    return this;\n+  }\n+\n+  /**\n+   * Set the callback that gets invoked when IndexWriter performs various actions.\n+   */\n+  public IndexWriterConfig setIndexWriterEvents(IndexWriterEvents indexWriterEvents) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cab5ef5e6f2bdcda59fd669a298ec1377777af9d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE2MDExOQ==", "bodyText": "I really don't like this setting. While I am convinced we should be very very careful adding more settings here, we should if possible use a parameter on a method to pass information like this. I personally would feel much better if we had a new method on IW called prepareCommit(double maxCommitMergeWaitSeconds) Maybe we can even go further and also pass a function to select the merges such that we don't need to add more stuff to mergePolicy?", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r438160119", "createdAt": "2020-06-10T14:20:41Z", "author": {"login": "s1monw"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig.java", "diffHunk": "@@ -459,6 +463,31 @@ public IndexWriterConfig setCommitOnClose(boolean commitOnClose) {\n     return this;\n   }\n \n+  /**\n+   * Expert: sets the amount of time to wait for merges returned by MergePolicy.findFullFlushMerges(...).\n+   * If this time is reached, we proceed with the commit based on segments merged up to that point.\n+   * The merges are not cancelled, and may still run to completion independent of the commit.\n+   */\n+  public IndexWriterConfig setMaxCommitMergeWaitSeconds(double maxCommitMergeWaitSeconds) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cab5ef5e6f2bdcda59fd669a298ec1377777af9d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE3MTQyMQ==", "bodyText": "I am trying to understand why we need to do any extra work here. What makes this special to any other merge such that we need to do all this work. If this needs to be done only if we include this merged segment in the commit, can't we do it outside of this mergeFinished and only use mergeFinished to signal which merge finished in time etc? Then we also might not need the latch construct and can use a simple callback that we can ignore on the commit end?", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r438171421", "createdAt": "2020-06-10T14:34:11Z", "author": {"login": "s1monw"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -3152,6 +3154,42 @@ public final boolean flushNextBuffer() throws IOException {\n     }\n   }\n \n+  private MergePolicy.OneMerge updateSegmentInfosOnMergeFinish(MergePolicy.OneMerge merge, final SegmentInfos toCommit,\n+                                                                AtomicReference<CountDownLatch> mergeLatchRef) {\n+    return new MergePolicy.OneMerge(merge.segments) {\n+      public void mergeFinished() throws IOException {\n+        super.mergeFinished();\n+        CountDownLatch mergeAwaitLatch = mergeLatchRef.get();\n+        if (mergeAwaitLatch == null) {\n+          // Commit thread timed out waiting for this merge and moved on. No need to manipulate toCommit.\n+          return;\n+        }\n+        if (committed) {\n+          deleter.incRef(this.info.files());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cab5ef5e6f2bdcda59fd669a298ec1377777af9d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE3NTk3Nw==", "bodyText": "I do wonder if we need all these changes here in such a fragile part of the code. Wouldn't it be possible to simply call maybeMerge(MergePolicy mergePolicy, MergeTrigger trigger, int maxNumSegments) with a MergePolicy wrapper that does all the magic like wrapping segments etc. Then we could pick up the callback idea from above and just wait here until all merges called back? I think we should try to reuse most of the current infrastructure in IW instead of special casing. There was a lot of work put into this to reduce special casing I think we should try hard to reduce it more and try harder to not add any.", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r438175977", "createdAt": "2020-06-10T14:40:02Z", "author": {"login": "s1monw"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -3228,15 +3268,38 @@ private long prepareCommitInternal() throws IOException {\n               // sneak into the commit point:\n               toCommit = segmentInfos.clone();\n \n+              if (anyChanges) {\n+                // Find any merges that can execute on commit (per MergePolicy).\n+                MergePolicy.MergeSpecification mergeSpec =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cab5ef5e6f2bdcda59fd669a298ec1377777af9d"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE3NjY1Mw==", "bodyText": "what is this used for? Can we use testPoints for it if it's necesary?", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r438176653", "createdAt": "2020-06-10T14:40:49Z", "author": {"login": "s1monw"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -3257,6 +3320,52 @@ private long prepareCommitInternal() throws IOException {\n       } finally {\n         maybeCloseOnTragicEvent();\n       }\n+\n+      if (mergeAwaitLatchRef != null) {\n+        CountDownLatch mergeAwaitLatch = mergeAwaitLatchRef.get();\n+        // If we found and registered any merges above, within the flushLock, then we want to ensure that they\n+        // complete execution. Note that since we released the lock, other merges may have been scheduled. We will\n+        // block until  the merges that we registered complete. As they complete, they will update toCommit to\n+        // replace merged segments with the result of each merge.\n+        config.getIndexWriterEvents().beginMergeOnCommit();\n+        mergeScheduler.merge(mergeSource, MergeTrigger.COMMIT);\n+        long mergeWaitStart = System.nanoTime();\n+        int abandonedCount = 0;\n+        long waitTimeMillis = (long) (config.getMaxCommitMergeWaitSeconds() * 1000.0);\n+        try {\n+          if (mergeAwaitLatch.await(waitTimeMillis, TimeUnit.MILLISECONDS) == false) {\n+            synchronized (this) {\n+              // Need to do this in a synchronized block, to make sure none of our commit merges are currently\n+              // executing mergeFinished (since mergeFinished itself is called from within the IndexWriter lock).\n+              // After we clear the value from mergeAwaitLatchRef, the merges we schedule will still execute as\n+              // usual, but when they finish, they won't attempt to update toCommit or modify segment reference\n+              // counts.\n+              mergeAwaitLatchRef.set(null);\n+              for (MergePolicy.OneMerge commitMerge : commitMerges) {\n+                if (runningMerges.contains(commitMerge) || pendingMerges.contains(commitMerge)) {\n+                  abandonedCount++;\n+                }\n+              }\n+            }\n+          }\n+        } catch (InterruptedException ie) {\n+          throw new ThreadInterruptedException(ie);\n+        } finally {\n+          if (infoStream.isEnabled(\"IW\")) {\n+            infoStream.message(\"IW\", String.format(Locale.ROOT, \"Waited %.1f ms for commit merges\",\n+                (System.nanoTime() - mergeWaitStart)/1_000_000.0));\n+            infoStream.message(\"IW\", \"After executing commit merges, had \" + toCommit.size() + \" segments\");\n+            if (abandonedCount > 0) {\n+              infoStream.message(\"IW\", \"Abandoned \" + abandonedCount + \" commit merges after \" + waitTimeMillis + \" ms\");\n+            }\n+          }\n+          if (abandonedCount > 0) {\n+            config.getIndexWriterEvents().abandonedMergesOnCommit(abandonedCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cab5ef5e6f2bdcda59fd669a298ec1377777af9d"}, "originalPosition": 146}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5ODM2OTg4", "url": "https://github.com/apache/lucene-solr/pull/1552#pullrequestreview-429836988", "createdAt": "2020-06-12T15:30:03Z", "commit": {"oid": "cab5ef5e6f2bdcda59fd669a298ec1377777af9d"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNTozMDowM1rOGjITyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNTo1MDoxNlrOGjI-jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4OTQ4MQ==", "bodyText": "The idea with this is to be able to track externally to IndexWriter how many merges completed during the commit window, how many did not, how long the commit waited for small merges to finish, etc.  This is useful telemetry for understanding how the feature is actually working in your production cluster.  I don't think we can get the equivalent telemetry by e.g. wrapping MergePolicy or MergeScheduler, because it is IndexWriter that knows how long it will wait and knows which merges made it and which did not.\nI think testPoints only run under assertion, and are really designed for unit tests to do interesting things.  But maybe we could somehow abuse it for this use case?\nI agree it should be tested better if we want to include it here.\nIf it is really controversial then +1 to remove the IndexWriterEvents entirely here and pursue it as a separate issue.  It was useful for us (Amazon product search) to understand how this feature impacts our production clusters, and to help us tune a reasonable timeout value.", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r439489481", "createdAt": "2020-06-12T15:30:03Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -3257,6 +3320,52 @@ private long prepareCommitInternal() throws IOException {\n       } finally {\n         maybeCloseOnTragicEvent();\n       }\n+\n+      if (mergeAwaitLatchRef != null) {\n+        CountDownLatch mergeAwaitLatch = mergeAwaitLatchRef.get();\n+        // If we found and registered any merges above, within the flushLock, then we want to ensure that they\n+        // complete execution. Note that since we released the lock, other merges may have been scheduled. We will\n+        // block until  the merges that we registered complete. As they complete, they will update toCommit to\n+        // replace merged segments with the result of each merge.\n+        config.getIndexWriterEvents().beginMergeOnCommit();\n+        mergeScheduler.merge(mergeSource, MergeTrigger.COMMIT);\n+        long mergeWaitStart = System.nanoTime();\n+        int abandonedCount = 0;\n+        long waitTimeMillis = (long) (config.getMaxCommitMergeWaitSeconds() * 1000.0);\n+        try {\n+          if (mergeAwaitLatch.await(waitTimeMillis, TimeUnit.MILLISECONDS) == false) {\n+            synchronized (this) {\n+              // Need to do this in a synchronized block, to make sure none of our commit merges are currently\n+              // executing mergeFinished (since mergeFinished itself is called from within the IndexWriter lock).\n+              // After we clear the value from mergeAwaitLatchRef, the merges we schedule will still execute as\n+              // usual, but when they finish, they won't attempt to update toCommit or modify segment reference\n+              // counts.\n+              mergeAwaitLatchRef.set(null);\n+              for (MergePolicy.OneMerge commitMerge : commitMerges) {\n+                if (runningMerges.contains(commitMerge) || pendingMerges.contains(commitMerge)) {\n+                  abandonedCount++;\n+                }\n+              }\n+            }\n+          }\n+        } catch (InterruptedException ie) {\n+          throw new ThreadInterruptedException(ie);\n+        } finally {\n+          if (infoStream.isEnabled(\"IW\")) {\n+            infoStream.message(\"IW\", String.format(Locale.ROOT, \"Waited %.1f ms for commit merges\",\n+                (System.nanoTime() - mergeWaitStart)/1_000_000.0));\n+            infoStream.message(\"IW\", \"After executing commit merges, had \" + toCommit.size() + \" segments\");\n+            if (abandonedCount > 0) {\n+              infoStream.message(\"IW\", \"Abandoned \" + abandonedCount + \" commit merges after \" + waitTimeMillis + \" ms\");\n+            }\n+          }\n+          if (abandonedCount > 0) {\n+            config.getIndexWriterEvents().abandonedMergesOnCommit(abandonedCount);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE3NjY1Mw=="}, "originalCommit": {"oid": "cab5ef5e6f2bdcda59fd669a298ec1377777af9d"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5MjAxNw==", "bodyText": "I think this was a small pre-existing bug.\nI.e. the merge has in fact succeeded on this path.  Before this change we are calling closeMergeReaders twice (once in the line above this, then again on line 4720 below.  Maybe that is harmless, but code-wise I think this path did succeed.\nIf necessary, we could pull this out into its own PR?  But I think it's a good, if subtle, catch.  The merge did succeed in this path.", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r439492017", "createdAt": "2020-06-12T15:34:53Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -4483,6 +4593,7 @@ public int length() {\n         // Merge would produce a 0-doc segment, so we do nothing except commit the merge to remove all the 0-doc segments that we \"merged\":\n         assert merge.info.info.maxDoc() == 0;\n         commitMerge(merge, mergeState);\n+        success = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE1MzU3NQ=="}, "originalCommit": {"oid": "cab5ef5e6f2bdcda59fd669a298ec1377777af9d"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5MjY4Ng==", "bodyText": "Maybe 5.0 or 10.0 seconds instead?  A \"typical\" commit, writing new Lucene segments and fsyncing many files can often take several seconds, but 30 seems high.", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r439492686", "createdAt": "2020-06-12T15:36:06Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig.java", "diffHunk": "@@ -109,6 +110,9 @@\n   \n   /** Default value for whether calls to {@link IndexWriter#close()} include a commit. */\n   public final static boolean DEFAULT_COMMIT_ON_CLOSE = true;\n+\n+  /** Default value for time to wait for merges on commit (when using a {@link MergePolicy} that implements findFullFlushMerges). */\n+  public static final double DEFAULT_MAX_COMMIT_MERGE_WAIT_SECONDS = 30.0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cab5ef5e6f2bdcda59fd669a298ec1377777af9d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5NDk3OA==", "bodyText": "I think @msfroh had considered a separate IndexWriter method before but something went wrong with that approach?\nI don't think this should be a separate method, actually.\nWe have a MergePolicy that governs which merges should happen upon which events/triggers and what this change is adding is a new trigger (on commit) at which merging could conceivably occur.  If we added this method, the implication to fresh eyes would be that the existing prepareCommit will also wait for merges with some default parameter, while this new method lets you change the default.\nAnyway, let's hear from @msfroh if there was some wrinkle on making a dedicated method for this, but I still think that's a messy API.  We should rather use our existing MergePolicy API correctly.", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r439494978", "createdAt": "2020-06-12T15:40:05Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig.java", "diffHunk": "@@ -459,6 +463,31 @@ public IndexWriterConfig setCommitOnClose(boolean commitOnClose) {\n     return this;\n   }\n \n+  /**\n+   * Expert: sets the amount of time to wait for merges returned by MergePolicy.findFullFlushMerges(...).\n+   * If this time is reached, we proceed with the commit based on segments merged up to that point.\n+   * The merges are not cancelled, and may still run to completion independent of the commit.\n+   */\n+  public IndexWriterConfig setMaxCommitMergeWaitSeconds(double maxCommitMergeWaitSeconds) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE2MDExOQ=="}, "originalCommit": {"oid": "cab5ef5e6f2bdcda59fd669a298ec1377777af9d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5NTMzNQ==", "bodyText": "Yeah for sure if we include it in this PR it should be tested by the PR.\nSee my comment above about this.", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r439495335", "createdAt": "2020-06-12T15:40:44Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig.java", "diffHunk": "@@ -459,6 +463,31 @@ public IndexWriterConfig setCommitOnClose(boolean commitOnClose) {\n     return this;\n   }\n \n+  /**\n+   * Expert: sets the amount of time to wait for merges returned by MergePolicy.findFullFlushMerges(...).\n+   * If this time is reached, we proceed with the commit based on segments merged up to that point.\n+   * The merges are not cancelled, and may still run to completion independent of the commit.\n+   */\n+  public IndexWriterConfig setMaxCommitMergeWaitSeconds(double maxCommitMergeWaitSeconds) {\n+    this.maxCommitMergeWaitSeconds = maxCommitMergeWaitSeconds;\n+    return this;\n+  }\n+\n+  /**\n+   * Set the callback that gets invoked when IndexWriter performs various actions.\n+   */\n+  public IndexWriterConfig setIndexWriterEvents(IndexWriterEvents indexWriterEvents) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE1NjIzNQ=="}, "originalCommit": {"oid": "cab5ef5e6f2bdcda59fd669a298ec1377777af9d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5NzM0MQ==", "bodyText": "I think @msfroh might remember some context on why he settled on this approach.\nThis is inherently a complex problem: we want to let MergePolicy pick the \"right\" merges to do on commit (the smallish ones).  But, it may pick poorly, or maybe the box is IO starved currently, and so we want to 1) ask MergeScheduler to kick off the merges it had requested, but 2) those merges that complete it time will make it into the commit point, while those that do not will still be allowed to run to completion and be switched in the live SegmentInfos (no wasted work), but will not be in the current commit point.\nAnyway, +1 if we can re-use existing code that \"merges the merged segments\" into a live or the pending commit SegmentInfos.  Maybe we can factor out the common code to reduce the added complexity here?", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r439497341", "createdAt": "2020-06-12T15:44:35Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -3152,6 +3154,42 @@ public final boolean flushNextBuffer() throws IOException {\n     }\n   }\n \n+  private MergePolicy.OneMerge updateSegmentInfosOnMergeFinish(MergePolicy.OneMerge merge, final SegmentInfos toCommit,\n+                                                                AtomicReference<CountDownLatch> mergeLatchRef) {\n+    return new MergePolicy.OneMerge(merge.segments) {\n+      public void mergeFinished() throws IOException {\n+        super.mergeFinished();\n+        CountDownLatch mergeAwaitLatch = mergeLatchRef.get();\n+        if (mergeAwaitLatch == null) {\n+          // Commit thread timed out waiting for this merge and moved on. No need to manipulate toCommit.\n+          return;\n+        }\n+        if (committed) {\n+          deleter.incRef(this.info.files());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE3MTQyMQ=="}, "originalCommit": {"oid": "cab5ef5e6f2bdcda59fd669a298ec1377777af9d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUwMDQyOA==", "bodyText": "I think what makes this tricky is that this is a combination of MergePolicy (to pick the small merges) and MergeScheduler (to run them and await their completion, subject to a time limit) purposes.\nI do not think you can achieve this by just wrapping in MergePolicy, but I agree it would be better if we could find a simpler way to achieve it.", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r439500428", "createdAt": "2020-06-12T15:50:16Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -3228,15 +3268,38 @@ private long prepareCommitInternal() throws IOException {\n               // sneak into the commit point:\n               toCommit = segmentInfos.clone();\n \n+              if (anyChanges) {\n+                // Find any merges that can execute on commit (per MergePolicy).\n+                MergePolicy.MergeSpecification mergeSpec =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE3NTk3Nw=="}, "originalCommit": {"oid": "cab5ef5e6f2bdcda59fd669a298ec1377777af9d"}, "originalPosition": 67}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf0f7990e919e9f5428ff4546bb936bfe1b13a3e", "author": {"user": null}, "url": "https://github.com/apache/lucene-solr/commit/bf0f7990e919e9f5428ff4546bb936bfe1b13a3e", "committedDate": "2020-06-12T21:55:26Z", "message": "fix test failures caused by attempt to merge a no-segments merge"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwNzgwNTgw", "url": "https://github.com/apache/lucene-solr/pull/1552#pullrequestreview-430780580", "createdAt": "2020-06-15T15:57:12Z", "commit": {"oid": "bf0f7990e919e9f5428ff4546bb936bfe1b13a3e"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNTo1NzoxMlrOGj4i2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjozMzowNlrOGj56PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI3OTc3MA==", "bodyText": "OK let's remove this part and leave it for another day.  I'll open a separate issue.", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r440279770", "createdAt": "2020-06-15T15:57:12Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -3257,6 +3320,52 @@ private long prepareCommitInternal() throws IOException {\n       } finally {\n         maybeCloseOnTragicEvent();\n       }\n+\n+      if (mergeAwaitLatchRef != null) {\n+        CountDownLatch mergeAwaitLatch = mergeAwaitLatchRef.get();\n+        // If we found and registered any merges above, within the flushLock, then we want to ensure that they\n+        // complete execution. Note that since we released the lock, other merges may have been scheduled. We will\n+        // block until  the merges that we registered complete. As they complete, they will update toCommit to\n+        // replace merged segments with the result of each merge.\n+        config.getIndexWriterEvents().beginMergeOnCommit();\n+        mergeScheduler.merge(mergeSource, MergeTrigger.COMMIT);\n+        long mergeWaitStart = System.nanoTime();\n+        int abandonedCount = 0;\n+        long waitTimeMillis = (long) (config.getMaxCommitMergeWaitSeconds() * 1000.0);\n+        try {\n+          if (mergeAwaitLatch.await(waitTimeMillis, TimeUnit.MILLISECONDS) == false) {\n+            synchronized (this) {\n+              // Need to do this in a synchronized block, to make sure none of our commit merges are currently\n+              // executing mergeFinished (since mergeFinished itself is called from within the IndexWriter lock).\n+              // After we clear the value from mergeAwaitLatchRef, the merges we schedule will still execute as\n+              // usual, but when they finish, they won't attempt to update toCommit or modify segment reference\n+              // counts.\n+              mergeAwaitLatchRef.set(null);\n+              for (MergePolicy.OneMerge commitMerge : commitMerges) {\n+                if (runningMerges.contains(commitMerge) || pendingMerges.contains(commitMerge)) {\n+                  abandonedCount++;\n+                }\n+              }\n+            }\n+          }\n+        } catch (InterruptedException ie) {\n+          throw new ThreadInterruptedException(ie);\n+        } finally {\n+          if (infoStream.isEnabled(\"IW\")) {\n+            infoStream.message(\"IW\", String.format(Locale.ROOT, \"Waited %.1f ms for commit merges\",\n+                (System.nanoTime() - mergeWaitStart)/1_000_000.0));\n+            infoStream.message(\"IW\", \"After executing commit merges, had \" + toCommit.size() + \" segments\");\n+            if (abandonedCount > 0) {\n+              infoStream.message(\"IW\", \"Abandoned \" + abandonedCount + \" commit merges after \" + waitTimeMillis + \" ms\");\n+            }\n+          }\n+          if (abandonedCount > 0) {\n+            config.getIndexWriterEvents().abandonedMergesOnCommit(abandonedCount);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE3NjY1Mw=="}, "originalCommit": {"oid": "cab5ef5e6f2bdcda59fd669a298ec1377777af9d"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI5ODY5NQ==", "bodyText": "Phew, I dit some git archaeology (thanks @msokolov for the pointers!) and uncovered the branch commit for this \"merge small segments on commit\" feature where we added this controversial success = true: cab5ef5\n+1 to pull the bugfix out into its own issue; I will open one.\nThe above commit has a dedicated test case, but the problem is that test case (in the above commit) relies on this new feature (it uses the new MergePolicy.findFullFlushMerges).  So we would need a new test case based on clean master branch showing the bug ... it looks like a test that merged 100% deleted segments ought to then incorrectly double-call closeMergedReaders (first with suppressExceptions = false then again with true) due to this missing success = true so it really should be easy to reproduce.  Though, actually I'm surprised none of our random testing uncovered this.  Not sure I full understand the bug yet :)  I will open an issue!", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r440298695", "createdAt": "2020-06-15T16:27:12Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -4483,6 +4593,7 @@ public int length() {\n         // Merge would produce a 0-doc segment, so we do nothing except commit the merge to remove all the 0-doc segments that we \"merged\":\n         assert merge.info.info.maxDoc() == 0;\n         commitMerge(merge, mergeState);\n+        success = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE1MzU3NQ=="}, "originalCommit": {"oid": "cab5ef5e6f2bdcda59fd669a298ec1377777af9d"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI5OTAxNQ==", "bodyText": "Thanks @s1monw.  I'll review your new PR.", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r440299015", "createdAt": "2020-06-15T16:27:44Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -3228,15 +3268,38 @@ private long prepareCommitInternal() throws IOException {\n               // sneak into the commit point:\n               toCommit = segmentInfos.clone();\n \n+              if (anyChanges) {\n+                // Find any merges that can execute on commit (per MergePolicy).\n+                MergePolicy.MergeSpecification mergeSpec =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE3NTk3Nw=="}, "originalCommit": {"oid": "cab5ef5e6f2bdcda59fd669a298ec1377777af9d"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwMjE0MA==", "bodyText": "maybe 0 as a default and if somebody want's to wait they can set it?\n\n+1\nThe feature is already disabled by default anyways (until you implement findFullFlushMerges in your MergePolicy), but making this 0 by default would make it even clearer that the feature is off by default.\n\nThe success=true added above was needed in order to fix a test failure caught by @dnhatn 's new unit test (testRandomOperations), so they belong together.\n\nAhh thanks for the context @msokolov!  However, staring at the code (maybe for not long enough!), it looks like it really ought to be a pre-existing bug, and should be unit-testable without this new feature.  But I am confused why none of our random tests have tripped up on this yet.  I will open a separate Jira issue for this.", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r440302140", "createdAt": "2020-06-15T16:33:06Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig.java", "diffHunk": "@@ -109,6 +110,9 @@\n   \n   /** Default value for whether calls to {@link IndexWriter#close()} include a commit. */\n   public final static boolean DEFAULT_COMMIT_ON_CLOSE = true;\n+\n+  /** Default value for time to wait for merges on commit (when using a {@link MergePolicy} that implements findFullFlushMerges). */\n+  public static final double DEFAULT_MAX_COMMIT_MERGE_WAIT_SECONDS = 30.0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5MjY4Ng=="}, "originalCommit": {"oid": "cab5ef5e6f2bdcda59fd669a298ec1377777af9d"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a707bb4f9e0cb4964b56dddd9f1f001a88f7c9d1", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/a707bb4f9e0cb4964b56dddd9f1f001a88f7c9d1", "committedDate": "2020-06-17T21:00:20Z", "message": "Merge branch 'master' into jira/lucene-8962"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85a4193223807f40e80b89d26a4ac53b83180178", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/85a4193223807f40e80b89d26a4ac53b83180178", "committedDate": "2020-06-17T21:11:54Z", "message": "current state of affairs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1fe0d21754f92d4c2a61d43356315a8ab95a129", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/e1fe0d21754f92d4c2a61d43356315a8ab95a129", "committedDate": "2020-06-17T22:12:44Z", "message": "LUCENE-9408: roll back only called once enforcement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d6bb8f487557d48913b79b8b90386ab3c949279", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/4d6bb8f487557d48913b79b8b90386ab3c949279", "committedDate": "2020-06-17T22:12:44Z", "message": "remove debug code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "650da5431ed9803d03cbc46271c1ca8aee42d35e", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/650da5431ed9803d03cbc46271c1ca8aee42d35e", "committedDate": "2020-06-17T22:12:52Z", "message": "Ensure we stop adding to the new commit once we stopped waiting."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d84691652973aff9aa387a1730a9779939541bd5", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/d84691652973aff9aa387a1730a9779939541bd5", "committedDate": "2020-06-17T22:20:20Z", "message": "cut over to long for waitOnCommit and default to 0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9448ff07cc627155dd9e6902971145714270c8b6", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/9448ff07cc627155dd9e6902971145714270c8b6", "committedDate": "2020-06-17T22:22:30Z", "message": "remove IndexWriterEvents"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8e26ebc6499b7c18c3d5d562ae5ddee6245d629", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/c8e26ebc6499b7c18c3d5d562ae5ddee6245d629", "committedDate": "2020-06-17T22:30:13Z", "message": "remove dead code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4cfc88567744f786c7ea1994969e2abe25e8f11", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/d4cfc88567744f786c7ea1994969e2abe25e8f11", "committedDate": "2020-06-17T22:33:06Z", "message": "Merge branch 'master' into jira/lucene-8962"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "338478ab66998a24b4e71c79b08ce5c9c96cb988", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/338478ab66998a24b4e71c79b08ce5c9c96cb988", "committedDate": "2020-06-17T22:40:28Z", "message": "remove unused import"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyOTcxMTM0", "url": "https://github.com/apache/lucene-solr/pull/1552#pullrequestreview-432971134", "createdAt": "2020-06-18T06:20:40Z", "commit": {"oid": "338478ab66998a24b4e71c79b08ce5c9c96cb988"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d19e1cde9967228d128639d3b5d295bb9afa2d98", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/d19e1cde9967228d128639d3b5d295bb9afa2d98", "committedDate": "2020-06-18T07:27:46Z", "message": "apply fixes for review commnets"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzMDEwOTc0", "url": "https://github.com/apache/lucene-solr/pull/1552#pullrequestreview-433010974", "createdAt": "2020-06-18T07:29:55Z", "commit": {"oid": "338478ab66998a24b4e71c79b08ce5c9c96cb988"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNzoyOTo1NVrOGli9hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNzoyOTo1NVrOGli9hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAyMzMwMA==", "bodyText": "the last thing that I am afraid about is what if we has a MergeScheduler configured that blocks on this call like SerialMergeScheduler? I think there are multiple options like: documentation, skipping COMMIT merge triggers in SMS, adding a mergeAsync method to MS that has no impl in SMS... I think we should make sure that this is not trappy.", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r442023300", "createdAt": "2020-06-18T07:29:55Z", "author": {"login": "s1monw"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -3255,7 +3302,16 @@ private long prepareCommitInternal() throws IOException {\n       } finally {\n         maybeCloseOnTragicEvent();\n       }\n-     \n+\n+      if (onCommitMerges != null) {\n+        mergeScheduler.merge(mergeSource, MergeTrigger.COMMIT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "338478ab66998a24b4e71c79b08ce5c9c96cb988"}, "originalPosition": 97}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a096f76520f222db335f67db694184276832bf3", "author": {"user": {"login": "s1monw", "name": "Simon Willnauer"}}, "url": "https://github.com/apache/lucene-solr/commit/0a096f76520f222db335f67db694184276832bf3", "committedDate": "2020-06-18T07:37:21Z", "message": "fix javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzMjAzNzgz", "url": "https://github.com/apache/lucene-solr/pull/1552#pullrequestreview-433203783", "createdAt": "2020-06-18T11:50:05Z", "commit": {"oid": "0a096f76520f222db335f67db694184276832bf3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzMjg2NTYy", "url": "https://github.com/apache/lucene-solr/pull/1552#pullrequestreview-433286562", "createdAt": "2020-06-18T13:32:52Z", "commit": {"oid": "0a096f76520f222db335f67db694184276832bf3"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNDE3MzMw", "url": "https://github.com/apache/lucene-solr/pull/1552#pullrequestreview-433417330", "createdAt": "2020-06-18T15:47:12Z", "commit": {"oid": "0a096f76520f222db335f67db694184276832bf3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNTo0NzoxMlrOGl1c1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNTo0NzoxMlrOGl1c1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyNjIyOQ==", "bodyText": "Oh -- I guess one minor complaint about moving this into prepareCommitInternal is that we won't be able to reuse it (without moving it) if we decide to apply the same logic to IndexWriter.getReader().\nThat said, moving it if/when someone gets around to applying the logic there isn't a big deal. (I think the real work there is reconciling logic from StandardDirectoryReader.open() with logic in IndexWriter.prepareCommitInternal(), since the functionality is kind of duplicated.)", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r442326229", "createdAt": "2020-06-18T15:47:12Z", "author": {"login": "msfroh"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -3226,15 +3235,53 @@ private long prepareCommitInternal() throws IOException {\n               // sneak into the commit point:\n               toCommit = segmentInfos.clone();\n \n+              if (anyChanges && maxCommitMergeWaitSeconds > 0) {\n+                SegmentInfos committingSegmentInfos = toCommit;\n+                onCommitMerges = updatePendingMerges(new OneMergeWrappingMergePolicy(config.getMergePolicy(), toWrap ->\n+                    new MergePolicy.OneMerge(toWrap.segments) {\n+                      @Override\n+                      public void mergeFinished(boolean committed) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a096f76520f222db335f67db694184276832bf3"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2578, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}