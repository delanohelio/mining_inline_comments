{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1MjQzMTQw", "number": 1388, "title": "LUCENE-9278: Use -linkoffline instead of relative paths to make links to other projects", "bodyText": "For gradle build, use absolute urls instead of relative paths to make inter-project links so that javadoc destination directory can be moved under _project_/build/.\n\ndocs of \":lucene:core\" prj will go to lucene/core/build/docs/javadoc/\ndocs of \":lucene:analysis:common\" will go to lucene/analysis/common/build/docs/javadoc/\ndocs of \":solr:core\" prj will go to solr/core/build/docs/javadoc/\n... and so on\n\nAlso, this directly calls javadoc tool rather than Ant javadoc task - Ant javadoc task doesn't recognize element-list, the successor to package-list up until Java 8, so <link offline=\"true\" ...> no longer correctly work with JDK11 (https://issues.apache.org/jira/browse/SOLR-14352).\nAll generated docs passed the \"checkJavaDocs.py\" check. In other words, there's no missing package summary.\nSee also https://issues.apache.org/jira/browse/LUCENE-9278", "createdAt": "2020-03-29T12:27:56Z", "url": "https://github.com/apache/lucene-solr/pull/1388", "merged": true, "mergeCommit": {"oid": "4f92cd414c4da6ac6163ff4101b0e07fb94fd067"}, "closed": true, "closedAt": "2020-04-08T23:44:07Z", "author": {"login": "mocobeta"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcSYtljAH2gAyMzk1MjQzMTQwOjAwOTc1ZTFlNmY4YjMwMjNiNzIwMjcxZTM0M2Y1OTk4ZThmZGJhMGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVOE9ngH2gAyMzk1MjQzMTQwOjc1YTQwMTFhNjkwMjViZDg3ODI0ZWViNjU2NGZjOTZhMTc1MGU5MjQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "00975e1e6f8b3023b720271e343f5998e8fdba0b", "author": {"user": {"login": "mocobeta", "name": "Tomoko Uchida"}}, "url": "https://github.com/apache/lucene-solr/commit/00975e1e6f8b3023b720271e343f5998e8fdba0b", "committedDate": "2020-03-29T12:04:14Z", "message": "LUCENE-9278: use -linkoffline instead of relative paths to make links to parent projects"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "263e508684bcbf48b2aa865deb5777d9a44036f7", "author": {"user": {"login": "mocobeta", "name": "Tomoko Uchida"}}, "url": "https://github.com/apache/lucene-solr/commit/263e508684bcbf48b2aa865deb5777d9a44036f7", "committedDate": "2020-03-29T13:44:54Z", "message": "minor change for a configure block"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNDEzNTE5", "url": "https://github.com/apache/lucene-solr/pull/1388#pullrequestreview-383413519", "createdAt": "2020-03-29T13:49:13Z", "commit": {"oid": "263e508684bcbf48b2aa865deb5777d9a44036f7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxMzo0OToxM1rOF9R4wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxMzo0OToxM1rOF9R4wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgwMDUxMg==", "bodyText": "I reused the output destination dir for the gradle default \"javadoc\" task here. This can be moved to another location if needed.", "url": "https://github.com/apache/lucene-solr/pull/1388#discussion_r399800512", "createdAt": "2020-03-29T13:49:13Z", "author": {"login": "mocobeta"}, "path": "gradle/render-javadoc.gradle", "diffHunk": "@@ -15,93 +15,105 @@\n  * limitations under the License.\n  */\n \n-// generate javadocs by using Ant javadoc task\n+// generate javadocs by calling javadoc tool\n+// see https://docs.oracle.com/en/java/javase/11/tools/javadoc.html\n+\n+// utility function to convert project path to document output dir\n+// e.g.: ':lucene:analysis:common' => 'analysis/common'\n+def pathToDocdir = { path -> path.split(':').drop(2).join('/') }\n \n allprojects {\n   plugins.withType(JavaPlugin) {\n-    ext {\n-      javadocRoot = project.path.startsWith(':lucene') ? project(':lucene').file(\"build/docs\") : project(':solr').file(\"build/docs\")\n-      javadocDestDir = \"${javadocRoot}/${project.name}\"\n-    }\n-\n     task renderJavadoc {\n-      description \"Generates Javadoc API documentation for the main source code. This invokes Ant Javadoc Task.\"\n+      description \"Generates Javadoc API documentation for the main source code. This directly invokes javadoc tool.\"\n       group \"documentation\"\n \n       ext {\n-        linksource = \"no\"\n+        linksource = false\n         linkJUnit = false\n-        linkHref = []\n+        linkLuceneProjects = []\n+        linkSorlProjects = []\n       }\n \n       dependsOn sourceSets.main.compileClasspath\n \n       inputs.files { sourceSets.main.java.asFileTree }\n-      outputs.dir project.javadocRoot\n+      outputs.dir project.javadoc.destinationDir\n \n       def libName = project.path.startsWith(\":lucene\") ? \"Lucene\" : \"Solr\"\n       def title = \"${libName} ${project.version} ${project.name} API\".toString()\n \n+      // absolute urls for \"-linkoffline\" option\n+      def javaSEDocUrl = \"https://docs.oracle.com/en/java/javase/11/docs/api/\"\n+      def junitDocUrl = \"https://junit.org/junit4/javadoc/4.12/\"\n+      def luceneDocUrl = \"https://lucene.apache.org/core/${project.version.replace(\".\", \"_\")}\".toString()\n+      def solrDocUrl = \"https://lucene.apache.org/solr/${project.version.replace(\".\", \"_\")}\".toString()\n+\n+      def javadocCmd = org.gradle.internal.jvm.Jvm.current().getJavadocExecutable()\n+\n       doFirst {\n         def srcDirs = sourceSets.main.java.srcDirs.findAll { dir -> dir.exists() }\n \n-        ant.javadoc(\n-            overview: file(\"src/java/overview.html\"),\n-            packagenames: \"org.apache.lucene.*,org.apache.solr.*\",\n-            destDir: javadocDestDir,\n-            access: \"protected\",\n-            encoding: \"UTF-8\",\n-            charset: \"UTF-8\",\n-            docencoding: \"UTF-8\",\n-            noindex: \"true\",\n-            includenosourcepackages: \"true\",\n-            author: \"true\",\n-            version: \"true\",\n-            linksource: linksource,\n-            use: \"true\",\n-            failonerror: \"true\",\n-            locale: \"en_US\",\n-            windowtitle: title,\n-            doctitle: title,\n-            maxmemory: \"512m\",\n-            classpath: sourceSets.main.compileClasspath.asPath,\n-            bottom: \"<i>Copyright &copy; 2000-${buildYear} Apache Software Foundation. All Rights Reserved.</i>\"\n-        ) {\n-          srcDirs.collect { srcDir ->\n-            packageset(dir: srcDir)\n+        project.exec {\n+          executable javadocCmd\n+\n+          args += [ \"-overview\", file(\"src/java/overview.html\").toString() ]\n+          args += [ \"-sourcepath\", srcDirs.join(\" \") ]\n+          args += [ \"-subpackages\", project.path.startsWith(\":lucene\") ? \"org.apache.lucene\" : \"org.apache.solr\"]\n+          args += [ \"-d\", project.javadoc.destinationDir.toString() ]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "263e508684bcbf48b2aa865deb5777d9a44036f7"}, "originalPosition": 83}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNjQzMjkw", "url": "https://github.com/apache/lucene-solr/pull/1388#pullrequestreview-383643290", "createdAt": "2020-03-30T08:43:18Z", "commit": {"oid": "263e508684bcbf48b2aa865deb5777d9a44036f7"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODo0MzoxOFrOF9fWvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODo0NTo0OVrOF9fdIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyMTE4MQ==", "bodyText": "Not sure if it's using Gradle's \"internal\" JVM or the \"project's\" JVM. We should be using the javadoc tool that is aligned with what is used for the compiler and execution (tests). I think you got it right but maybe worth double checking.\nhttps://docs.gradle.org/current/userguide/build_environment.html\n(what happens if you set org.gradle.java.home=... to an older JVM, for example).", "url": "https://github.com/apache/lucene-solr/pull/1388#discussion_r400021181", "createdAt": "2020-03-30T08:43:18Z", "author": {"login": "dweiss"}, "path": "gradle/render-javadoc.gradle", "diffHunk": "@@ -15,93 +15,105 @@\n  * limitations under the License.\n  */\n \n-// generate javadocs by using Ant javadoc task\n+// generate javadocs by calling javadoc tool\n+// see https://docs.oracle.com/en/java/javase/11/tools/javadoc.html\n+\n+// utility function to convert project path to document output dir\n+// e.g.: ':lucene:analysis:common' => 'analysis/common'\n+def pathToDocdir = { path -> path.split(':').drop(2).join('/') }\n \n allprojects {\n   plugins.withType(JavaPlugin) {\n-    ext {\n-      javadocRoot = project.path.startsWith(':lucene') ? project(':lucene').file(\"build/docs\") : project(':solr').file(\"build/docs\")\n-      javadocDestDir = \"${javadocRoot}/${project.name}\"\n-    }\n-\n     task renderJavadoc {\n-      description \"Generates Javadoc API documentation for the main source code. This invokes Ant Javadoc Task.\"\n+      description \"Generates Javadoc API documentation for the main source code. This directly invokes javadoc tool.\"\n       group \"documentation\"\n \n       ext {\n-        linksource = \"no\"\n+        linksource = false\n         linkJUnit = false\n-        linkHref = []\n+        linkLuceneProjects = []\n+        linkSorlProjects = []\n       }\n \n       dependsOn sourceSets.main.compileClasspath\n \n       inputs.files { sourceSets.main.java.asFileTree }\n-      outputs.dir project.javadocRoot\n+      outputs.dir project.javadoc.destinationDir\n \n       def libName = project.path.startsWith(\":lucene\") ? \"Lucene\" : \"Solr\"\n       def title = \"${libName} ${project.version} ${project.name} API\".toString()\n \n+      // absolute urls for \"-linkoffline\" option\n+      def javaSEDocUrl = \"https://docs.oracle.com/en/java/javase/11/docs/api/\"\n+      def junitDocUrl = \"https://junit.org/junit4/javadoc/4.12/\"\n+      def luceneDocUrl = \"https://lucene.apache.org/core/${project.version.replace(\".\", \"_\")}\".toString()\n+      def solrDocUrl = \"https://lucene.apache.org/solr/${project.version.replace(\".\", \"_\")}\".toString()\n+\n+      def javadocCmd = org.gradle.internal.jvm.Jvm.current().getJavadocExecutable()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "263e508684bcbf48b2aa865deb5777d9a44036f7"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyMTYxNw==", "bodyText": "I like it.", "url": "https://github.com/apache/lucene-solr/pull/1388#discussion_r400021617", "createdAt": "2020-03-30T08:43:56Z", "author": {"login": "dweiss"}, "path": "gradle/render-javadoc.gradle", "diffHunk": "@@ -15,93 +15,105 @@\n  * limitations under the License.\n  */\n \n-// generate javadocs by using Ant javadoc task\n+// generate javadocs by calling javadoc tool\n+// see https://docs.oracle.com/en/java/javase/11/tools/javadoc.html\n+\n+// utility function to convert project path to document output dir\n+// e.g.: ':lucene:analysis:common' => 'analysis/common'\n+def pathToDocdir = { path -> path.split(':').drop(2).join('/') }\n \n allprojects {\n   plugins.withType(JavaPlugin) {\n-    ext {\n-      javadocRoot = project.path.startsWith(':lucene') ? project(':lucene').file(\"build/docs\") : project(':solr').file(\"build/docs\")\n-      javadocDestDir = \"${javadocRoot}/${project.name}\"\n-    }\n-\n     task renderJavadoc {\n-      description \"Generates Javadoc API documentation for the main source code. This invokes Ant Javadoc Task.\"\n+      description \"Generates Javadoc API documentation for the main source code. This directly invokes javadoc tool.\"\n       group \"documentation\"\n \n       ext {\n-        linksource = \"no\"\n+        linksource = false\n         linkJUnit = false\n-        linkHref = []\n+        linkLuceneProjects = []\n+        linkSorlProjects = []\n       }\n \n       dependsOn sourceSets.main.compileClasspath\n \n       inputs.files { sourceSets.main.java.asFileTree }\n-      outputs.dir project.javadocRoot\n+      outputs.dir project.javadoc.destinationDir\n \n       def libName = project.path.startsWith(\":lucene\") ? \"Lucene\" : \"Solr\"\n       def title = \"${libName} ${project.version} ${project.name} API\".toString()\n \n+      // absolute urls for \"-linkoffline\" option\n+      def javaSEDocUrl = \"https://docs.oracle.com/en/java/javase/11/docs/api/\"\n+      def junitDocUrl = \"https://junit.org/junit4/javadoc/4.12/\"\n+      def luceneDocUrl = \"https://lucene.apache.org/core/${project.version.replace(\".\", \"_\")}\".toString()\n+      def solrDocUrl = \"https://lucene.apache.org/solr/${project.version.replace(\".\", \"_\")}\".toString()\n+\n+      def javadocCmd = org.gradle.internal.jvm.Jvm.current().getJavadocExecutable()\n+\n       doFirst {\n         def srcDirs = sourceSets.main.java.srcDirs.findAll { dir -> dir.exists() }\n \n-        ant.javadoc(\n-            overview: file(\"src/java/overview.html\"),\n-            packagenames: \"org.apache.lucene.*,org.apache.solr.*\",\n-            destDir: javadocDestDir,\n-            access: \"protected\",\n-            encoding: \"UTF-8\",\n-            charset: \"UTF-8\",\n-            docencoding: \"UTF-8\",\n-            noindex: \"true\",\n-            includenosourcepackages: \"true\",\n-            author: \"true\",\n-            version: \"true\",\n-            linksource: linksource,\n-            use: \"true\",\n-            failonerror: \"true\",\n-            locale: \"en_US\",\n-            windowtitle: title,\n-            doctitle: title,\n-            maxmemory: \"512m\",\n-            classpath: sourceSets.main.compileClasspath.asPath,\n-            bottom: \"<i>Copyright &copy; 2000-${buildYear} Apache Software Foundation. All Rights Reserved.</i>\"\n-        ) {\n-          srcDirs.collect { srcDir ->\n-            packageset(dir: srcDir)\n+        project.exec {\n+          executable javadocCmd\n+\n+          args += [ \"-overview\", file(\"src/java/overview.html\").toString() ]\n+          args += [ \"-sourcepath\", srcDirs.join(\" \") ]\n+          args += [ \"-subpackages\", project.path.startsWith(\":lucene\") ? \"org.apache.lucene\" : \"org.apache.solr\"]\n+          args += [ \"-d\", project.javadoc.destinationDir.toString() ]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgwMDUxMg=="}, "originalCommit": {"oid": "263e508684bcbf48b2aa865deb5777d9a44036f7"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyMjgxNw==", "bodyText": "Why is toURL required? It was a path previously.", "url": "https://github.com/apache/lucene-solr/pull/1388#discussion_r400022817", "createdAt": "2020-03-30T08:45:49Z", "author": {"login": "dweiss"}, "path": "gradle/render-javadoc.gradle", "diffHunk": "@@ -15,93 +15,105 @@\n  * limitations under the License.\n  */\n \n-// generate javadocs by using Ant javadoc task\n+// generate javadocs by calling javadoc tool\n+// see https://docs.oracle.com/en/java/javase/11/tools/javadoc.html\n+\n+// utility function to convert project path to document output dir\n+// e.g.: ':lucene:analysis:common' => 'analysis/common'\n+def pathToDocdir = { path -> path.split(':').drop(2).join('/') }\n \n allprojects {\n   plugins.withType(JavaPlugin) {\n-    ext {\n-      javadocRoot = project.path.startsWith(':lucene') ? project(':lucene').file(\"build/docs\") : project(':solr').file(\"build/docs\")\n-      javadocDestDir = \"${javadocRoot}/${project.name}\"\n-    }\n-\n     task renderJavadoc {\n-      description \"Generates Javadoc API documentation for the main source code. This invokes Ant Javadoc Task.\"\n+      description \"Generates Javadoc API documentation for the main source code. This directly invokes javadoc tool.\"\n       group \"documentation\"\n \n       ext {\n-        linksource = \"no\"\n+        linksource = false\n         linkJUnit = false\n-        linkHref = []\n+        linkLuceneProjects = []\n+        linkSorlProjects = []\n       }\n \n       dependsOn sourceSets.main.compileClasspath\n \n       inputs.files { sourceSets.main.java.asFileTree }\n-      outputs.dir project.javadocRoot\n+      outputs.dir project.javadoc.destinationDir\n \n       def libName = project.path.startsWith(\":lucene\") ? \"Lucene\" : \"Solr\"\n       def title = \"${libName} ${project.version} ${project.name} API\".toString()\n \n+      // absolute urls for \"-linkoffline\" option\n+      def javaSEDocUrl = \"https://docs.oracle.com/en/java/javase/11/docs/api/\"\n+      def junitDocUrl = \"https://junit.org/junit4/javadoc/4.12/\"\n+      def luceneDocUrl = \"https://lucene.apache.org/core/${project.version.replace(\".\", \"_\")}\".toString()\n+      def solrDocUrl = \"https://lucene.apache.org/solr/${project.version.replace(\".\", \"_\")}\".toString()\n+\n+      def javadocCmd = org.gradle.internal.jvm.Jvm.current().getJavadocExecutable()\n+\n       doFirst {\n         def srcDirs = sourceSets.main.java.srcDirs.findAll { dir -> dir.exists() }\n \n-        ant.javadoc(\n-            overview: file(\"src/java/overview.html\"),\n-            packagenames: \"org.apache.lucene.*,org.apache.solr.*\",\n-            destDir: javadocDestDir,\n-            access: \"protected\",\n-            encoding: \"UTF-8\",\n-            charset: \"UTF-8\",\n-            docencoding: \"UTF-8\",\n-            noindex: \"true\",\n-            includenosourcepackages: \"true\",\n-            author: \"true\",\n-            version: \"true\",\n-            linksource: linksource,\n-            use: \"true\",\n-            failonerror: \"true\",\n-            locale: \"en_US\",\n-            windowtitle: title,\n-            doctitle: title,\n-            maxmemory: \"512m\",\n-            classpath: sourceSets.main.compileClasspath.asPath,\n-            bottom: \"<i>Copyright &copy; 2000-${buildYear} Apache Software Foundation. All Rights Reserved.</i>\"\n-        ) {\n-          srcDirs.collect { srcDir ->\n-            packageset(dir: srcDir)\n+        project.exec {\n+          executable javadocCmd\n+\n+          args += [ \"-overview\", file(\"src/java/overview.html\").toString() ]\n+          args += [ \"-sourcepath\", srcDirs.join(\" \") ]\n+          args += [ \"-subpackages\", project.path.startsWith(\":lucene\") ? \"org.apache.lucene\" : \"org.apache.solr\"]\n+          args += [ \"-d\", project.javadoc.destinationDir.toString() ]\n+          args += [ \"-protected\" ]\n+          args += [ \"-encoding\", \"UTF-8\" ]\n+          args += [ \"-charset\", \"UTF-8\" ]\n+          args += [ \"-docencoding\", \"UTF-8\" ]\n+          args += [ \"-noindex\" ]\n+          args += [ \"-author\" ]\n+          args += [ \"-version\" ]\n+          if (linksource) {\n+            args += [ \"-linksource\" ]\n           }\n+          args += [ \"-use\" ]\n+          args += [ \"-locale\", \"en_US\" ]\n+          args += [ \"-windowtitle\", title ]\n+          args += [ \"-doctitle\", title ]\n+          args += [ \"-classpath\", sourceSets.main.compileClasspath.asPath ]\n+          args += [ \"-bottom\", \"<i>Copyright &copy; 2000-${buildYear} Apache Software Foundation. All Rights Reserved.</i>\" ]\n \n-          tag(name: \"lucene.experimental\", description: \"WARNING: This API is experimental and might change in incompatible ways in the next release.\")\n-          tag(name: \"lucene.internal\", description: \"NOTE: This API is for internal purposes only and might change in incompatible ways in the next release.\")\n-          tag(name: \"lucene.spi\", description: \"SPI Name (Note: This is case-insensitive. e.g., if the name is 'htmlStrip', 'htmlstrip' can be used when looking up the service):\", scope: \"types\")\n+          args += [ \"-tag\", \"lucene.experimental:a:WARNING: This API is experimental and might change in incompatible ways in the next release.\" ]\n+          args += [ \"-tag\", \"lucene.internal:a:NOTE: This API is for internal purposes only and might change in incompatible ways in the next release.\" ]\n+          args += [ \"-tag\", \"lucene.spi:t:SPI Name (case-insensitive: if the name is 'htmlStrip', 'htmlstrip' can be used when looking up the service).\" ]\n \n           // resolve links to JavaSE and JUnit API\n-          link(offline: \"true\", href: \"https://docs.oracle.com/en/java/javase/11/docs/api/\", packageListLoc: project(\":lucene\").file(\"tools/javadoc/java11/\").toString())\n+          args += [ \"-linkoffline\", javaSEDocUrl, project(\":lucene\").file(\"tools/javadoc/java11/\").toURL() ]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "263e508684bcbf48b2aa865deb5777d9a44036f7"}, "originalPosition": 110}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46f02c36aee8a41c2ba9d5f12aa9446c1a1372fb", "author": {"user": {"login": "mocobeta", "name": "Tomoko Uchida"}}, "url": "https://github.com/apache/lucene-solr/commit/46f02c36aee8a41c2ba9d5f12aa9446c1a1372fb", "committedDate": "2020-03-31T08:53:06Z", "message": "change toURL() to toString() for pointing element-list location"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f48c6ecbe3b5a47ae2cc677dae8e1c44b513ac9c", "author": {"user": {"login": "mocobeta", "name": "Tomoko Uchida"}}, "url": "https://github.com/apache/lucene-solr/commit/f48c6ecbe3b5a47ae2cc677dae8e1c44b513ac9c", "committedDate": "2020-03-31T10:30:06Z", "message": "skip -classpath option if compile classpath is empty"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a81e8327867964bd7f7827459363886fcd7d0b9b", "author": {"user": {"login": "mocobeta", "name": "Tomoko Uchida"}}, "url": "https://github.com/apache/lucene-solr/commit/a81e8327867964bd7f7827459363886fcd7d0b9b", "committedDate": "2020-04-05T09:16:02Z", "message": "Pass javadoc options via a (temporary) file."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7964a2bdb0bcef0078c2d5a57f99ccda7e0d9746", "author": {"user": {"login": "mocobeta", "name": "Tomoko Uchida"}}, "url": "https://github.com/apache/lucene-solr/commit/7964a2bdb0bcef0078c2d5a57f99ccda7e0d9746", "committedDate": "2020-04-05T09:48:03Z", "message": "Show options file path when task fails"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8597a9bd78120f77764b35c10bd6875722ddae4", "author": {"user": {"login": "mocobeta", "name": "Tomoko Uchida"}}, "url": "https://github.com/apache/lucene-solr/commit/f8597a9bd78120f77764b35c10bd6875722ddae4", "committedDate": "2020-04-05T10:30:46Z", "message": "fix file path string"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63e70784bca6198122df662a16cac89c8ff17ed7", "author": {"user": {"login": "mocobeta", "name": "Tomoko Uchida"}}, "url": "https://github.com/apache/lucene-solr/commit/63e70784bca6198122df662a16cac89c8ff17ed7", "committedDate": "2020-04-05T10:33:31Z", "message": "throw GradleExeption when task fails"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e82fa6584e3850db53c5cd5da30804f615a97ec", "author": {"user": {"login": "mocobeta", "name": "Tomoko Uchida"}}, "url": "https://github.com/apache/lucene-solr/commit/3e82fa6584e3850db53c5cd5da30804f615a97ec", "committedDate": "2020-04-05T10:35:41Z", "message": "fix bug in previous commit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75a4011a69025bd87824eeb6564fc96a1750e924", "author": {"user": {"login": "mocobeta", "name": "Tomoko Uchida"}}, "url": "https://github.com/apache/lucene-solr/commit/75a4011a69025bd87824eeb6564fc96a1750e924", "committedDate": "2020-04-07T07:22:35Z", "message": "simplify checks for temp file; redirect stdout/stderr to a temp file."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2065, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}