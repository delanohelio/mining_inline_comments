{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4NzE4MTcz", "number": 1456, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNzozMTo1MVrOD3TgBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMTo1MDoyMVrOD4foJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzE3NzY2OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/search/MaxScoreCollector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNzozMTo1MVrOGNfOIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMjo1NzowN1rOGNqAlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc5NjE5NA==", "bodyText": "@jpountz, What did you mean with this comment? MultiCollector will set the scoreMode to COMPLETE in the case of the main collector being something other than TOP_SCORES, right?", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r416796194", "createdAt": "2020-04-28T17:31:51Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/java/org/apache/solr/search/MaxScoreCollector.java", "diffHunk": "@@ -39,7 +39,7 @@ public float getMaxScore() {\n   public ScoreMode scoreMode() {\n     // Should be TOP_SCORES but this would wrap the scorer unnecessarily since\n     // this collector is only used in a MultiCollector.\n-    return ScoreMode.COMPLETE;\n+    return ScoreMode.TOP_SCORES;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "982b753963c659007692d03538f81fa4d0dc7b92"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3Mjk1MA==", "bodyText": "Yeah I think that at some point we tried not to wrap the scorer when all score modes were COMPLETE but apparently now we do, so this comment is stale. https://github.com/apache/lucene-solr/blob/master/lucene/core/src/java/org/apache/lucene/search/MultiCollector.java#L158", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r416972950", "createdAt": "2020-04-28T22:57:07Z", "author": {"login": "jpountz"}, "path": "solr/core/src/java/org/apache/solr/search/MaxScoreCollector.java", "diffHunk": "@@ -39,7 +39,7 @@ public float getMaxScore() {\n   public ScoreMode scoreMode() {\n     // Should be TOP_SCORES but this would wrap the scorer unnecessarily since\n     // this collector is only used in a MultiCollector.\n-    return ScoreMode.COMPLETE;\n+    return ScoreMode.TOP_SCORES;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc5NjE5NA=="}, "originalCommit": {"oid": "982b753963c659007692d03538f81fa4d0dc7b92"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDE5NzI5OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMjoxNTozMVrOGNpBMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMjoxNTozMVrOGNpBMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk1NjcyMw==", "bodyText": "I plan to move the default value to a solrconfig config in a future PR, for now, MAX_VALUE (disabled)", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r416956723", "createdAt": "2020-04-28T22:15:31Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java", "diffHunk": "@@ -401,6 +403,14 @@ public void process(ResponseBuilder rb) throws IOException\n     doProcessUngroupedSearch(rb, cmd, result);\n   }\n \n+  private int getMinExactHits(SolrParams params) {\n+    long minExactHits = params.getLong(CommonParams.MIN_EXACT_HITS, Integer.MAX_VALUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e2c5aa08086176dbbd7f2c0da3cd7a8ca8c12df"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTE3OTY3OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxODozODo0N1rOGPSGNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMjowMjozNlrOGPW48w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3ODMyNw==", "bodyText": "This doesn't really allow anyone to specify a minExactHits value between Integer.MAX_VALUE and Long.MAX_VALUE. For practical reasons, that is ok but just not consistent and would require a note in the ref guide too. Do you think we should just switch this out with Long instead?", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r418678327", "createdAt": "2020-05-01T18:38:47Z", "author": {"login": "anshumg"}, "path": "solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java", "diffHunk": "@@ -401,6 +403,14 @@ public void process(ResponseBuilder rb) throws IOException\n     doProcessUngroupedSearch(rb, cmd, result);\n   }\n \n+  private int getMinExactHits(SolrParams params) {\n+    long minExactHits = params.getLong(CommonParams.MIN_EXACT_HITS, Integer.MAX_VALUE);\n+    if (minExactHits < 0 || minExactHits > Integer.MAX_VALUE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb3447bf59fab33681ca5af7e758a0a575d59b9"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc1Njg1MQ==", "bodyText": "This is intentional. See the discussion with Adrien in this same PR. We allow longs just because the minExactHits is in relation to the numFound, which is a long, however, any value greater than Integer.MAX_VALUE doesn't make sense, since Lucene doesn't allow more than that in a single shard. In case of distributed queries, the minExactHits is used by every shard", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r418756851", "createdAt": "2020-05-01T22:02:36Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java", "diffHunk": "@@ -401,6 +403,14 @@ public void process(ResponseBuilder rb) throws IOException\n     doProcessUngroupedSearch(rb, cmd, result);\n   }\n \n+  private int getMinExactHits(SolrParams params) {\n+    long minExactHits = params.getLong(CommonParams.MIN_EXACT_HITS, Integer.MAX_VALUE);\n+    if (minExactHits < 0 || minExactHits > Integer.MAX_VALUE) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3ODMyNw=="}, "originalCommit": {"oid": "4bb3447bf59fab33681ca5af7e758a0a575d59b9"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTIwMjE0OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/response/JSONWriter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxODo0Njo1M1rOGPSUdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMzowMzoxN1rOGPX2TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY4MTk3NQ==", "bodyText": "This method will be removed after Solr 9, right?", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r418681975", "createdAt": "2020-05-01T18:46:53Z", "author": {"login": "anshumg"}, "path": "solr/core/src/java/org/apache/solr/response/JSONWriter.java", "diffHunk": "@@ -132,11 +133,16 @@ public void writeSolrDocument(String name, SolrDocument doc, ReturnFields return\n   //       that the size could not be reliably determined.\n   //\n \n+  /**\n+   * This method will be removed in Solr 9", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb3447bf59fab33681ca5af7e758a0a575d59b9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3MjU1Ng==", "bodyText": "I really don't think we need to keep this around longer than 9.0. People upgrading a major version expect to have to change some code. This is a trivial change, they'll get a compile-time error and notice there is a new parameter added. This doesn't even change the client, just plugins.", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r418772556", "createdAt": "2020-05-01T23:03:17Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/java/org/apache/solr/response/JSONWriter.java", "diffHunk": "@@ -132,11 +133,16 @@ public void writeSolrDocument(String name, SolrDocument doc, ReturnFields return\n   //       that the size could not be reliably determined.\n   //\n \n+  /**\n+   * This method will be removed in Solr 9", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY4MTk3NQ=="}, "originalCommit": {"oid": "4bb3447bf59fab33681ca5af7e758a0a575d59b9"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTI1MzQwOnYy", "diffSide": "RIGHT", "path": "solr/core/src/test/org/apache/solr/TestDistributedSearch.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxOTowNToxMlrOGPS0hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxOTowNToxMlrOGPS0hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY5MDE4Mw==", "bodyText": ":)", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r418690183", "createdAt": "2020-05-01T19:05:12Z", "author": {"login": "anshumg"}, "path": "solr/core/src/test/org/apache/solr/TestDistributedSearch.java", "diffHunk": "@@ -1082,11 +1086,32 @@ public void test() throws Exception {\n     assertEquals(new EnumFieldValue(11, \"Critical\"),\n                  rsp.getFieldStatsInfo().get(fieldName).getMax());\n \n-    handle.put(\"severity\", UNORDERED); // this is stupid, but stats.facet doesn't garuntee order\n+    handle.put(\"severity\", UNORDERED); // this is stupid, but stats.facet doesn't guarantee order\n     query(\"q\", \"*:*\", \"stats\", \"true\", \"stats.field\", fieldName, \n           \"stats.facet\", fieldName);\n   }\n \n+  private void testMinExactHits() throws Exception {\n+    assertIsExactHitCount(\"q\",\"{!cache=false}dog OR men OR cow OR country OR dumpty\", CommonParams.MIN_EXACT_HITS, \"200\", CommonParams.ROWS, \"2\", CommonParams.SORT, \"score desc, id asc\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb3447bf59fab33681ca5af7e758a0a575d59b9"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTI2MDA3OnYy", "diffSide": "RIGHT", "path": "solr/core/src/test/org/apache/solr/request/TestFaceting.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxOTowNzo1NVrOGPS43g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMzo0Mzo1NlrOGQWC1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY5MTI5NA==", "bodyText": "We can move this commit out of the loop and just commit once.", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r418691294", "createdAt": "2020-05-01T19:07:55Z", "author": {"login": "anshumg"}, "path": "solr/core/src/test/org/apache/solr/request/TestFaceting.java", "diffHunk": "@@ -931,5 +934,28 @@ public void testListedTermCounts() throws Exception {\n         \"//lst[@name='facet_fields']/lst[@name='title_ws']/int[2][@name='Book2']\",\n         \"//lst[@name='facet_fields']/lst[@name='title_ws']/int[3][@name='Book3']\");\n   }\n+  \n+  @Test\n+  public void testFacetCountsWithMinExactHits() throws Exception {\n+    final int NUM_DOCS = 20;\n+    for (int i = 0; i < NUM_DOCS ; i++) {\n+      assertU(adoc(\"id\", String.valueOf(i), \"title_ws\", \"Book1\"));\n+      assertU(commit());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb3447bf59fab33681ca5af7e758a0a575d59b9"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc5MTU3NQ==", "bodyText": "Actually, I wanted to have multiple segments. I could do something like \"sometimes()\", but since the number of docs is low, I didn't think it was needed to add any randomization or more complex logic.", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r419791575", "createdAt": "2020-05-04T23:43:56Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/test/org/apache/solr/request/TestFaceting.java", "diffHunk": "@@ -931,5 +934,28 @@ public void testListedTermCounts() throws Exception {\n         \"//lst[@name='facet_fields']/lst[@name='title_ws']/int[2][@name='Book2']\",\n         \"//lst[@name='facet_fields']/lst[@name='title_ws']/int[3][@name='Book3']\");\n   }\n+  \n+  @Test\n+  public void testFacetCountsWithMinExactHits() throws Exception {\n+    final int NUM_DOCS = 20;\n+    for (int i = 0; i < NUM_DOCS ; i++) {\n+      assertU(adoc(\"id\", String.valueOf(i), \"title_ws\", \"Book1\"));\n+      assertU(commit());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY5MTI5NA=="}, "originalCommit": {"oid": "4bb3447bf59fab33681ca5af7e758a0a575d59b9"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTI2MTg4OnYy", "diffSide": "RIGHT", "path": "solr/core/src/test/org/apache/solr/request/TestFaceting.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxOTowODozMlrOGPS56g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxOTowODozMlrOGPS56g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY5MTU2Mg==", "bodyText": "munExactHits -> numExactHits", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r418691562", "createdAt": "2020-05-01T19:08:32Z", "author": {"login": "anshumg"}, "path": "solr/core/src/test/org/apache/solr/request/TestFaceting.java", "diffHunk": "@@ -931,5 +934,28 @@ public void testListedTermCounts() throws Exception {\n         \"//lst[@name='facet_fields']/lst[@name='title_ws']/int[2][@name='Book2']\",\n         \"//lst[@name='facet_fields']/lst[@name='title_ws']/int[3][@name='Book3']\");\n   }\n+  \n+  @Test\n+  public void testFacetCountsWithMinExactHits() throws Exception {\n+    final int NUM_DOCS = 20;\n+    for (int i = 0; i < NUM_DOCS ; i++) {\n+      assertU(adoc(\"id\", String.valueOf(i), \"title_ws\", \"Book1\"));\n+      assertU(commit());\n+    }\n+    ModifiableSolrParams params = new ModifiableSolrParams();\n+    params.set(\"q\", \"title_ws:Book1\");\n+    params.set(FacetParams.FACET, \"true\");\n+    params.set(FacetParams.FACET_FIELD, \"title_ws\");\n+    assertQ(req(params),\n+        \"//lst[@name='facet_fields']/lst[@name='title_ws']/int[1][@name='Book1'][.='20']\"\n+        ,\"//*[@hitCountRelation='\" + HitCountRelation.EQ + \"']\"\n+        ,\"//*[@numFound='\" + NUM_DOCS + \"']\");\n+    \n+    // It doesn't matter if we request munExactHits, when requesting facets, the numFound value is precise", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb3447bf59fab33681ca5af7e758a0a575d59b9"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTI2NjcwOnYy", "diffSide": "RIGHT", "path": "solr/core/src/test/org/apache/solr/search/SolrIndexSearcherTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxOToxMDozNlrOGPS9Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMzo0NDo0M1rOGQWDvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY5MjM5OA==", "bodyText": "We can move the commit out of the loop", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r418692398", "createdAt": "2020-05-01T19:10:36Z", "author": {"login": "anshumg"}, "path": "solr/core/src/test/org/apache/solr/search/SolrIndexSearcherTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.solr.search;\n+\n+import org.apache.lucene.index.Term;\n+import org.apache.lucene.search.TermQuery;\n+import org.apache.solr.SolrTestCaseJ4;\n+import org.apache.solr.common.HitCountRelation;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+\n+import java.io.IOException;\n+\n+public class SolrIndexSearcherTest extends SolrTestCaseJ4 {\n+  \n+  private final static int NUM_DOCS = 20;\n+\n+  @BeforeClass\n+  public static void setUpClass() throws Exception {\n+    initCore(\"solrconfig.xml\", \"schema.xml\");\n+    for (int i = 0 ; i < NUM_DOCS ; i ++) {\n+      assertU(adoc(\"id\", String.valueOf(i), \"field1_s\", \"foo\", \"field2_s\", String.valueOf(i % 2), \"field3_s\", String.valueOf(i)));\n+      assertU(commit());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb3447bf59fab33681ca5af7e758a0a575d59b9"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc5MTgwNw==", "bodyText": "Same as above, wanted multiple segments", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r419791807", "createdAt": "2020-05-04T23:44:43Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/test/org/apache/solr/search/SolrIndexSearcherTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.solr.search;\n+\n+import org.apache.lucene.index.Term;\n+import org.apache.lucene.search.TermQuery;\n+import org.apache.solr.SolrTestCaseJ4;\n+import org.apache.solr.common.HitCountRelation;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+\n+import java.io.IOException;\n+\n+public class SolrIndexSearcherTest extends SolrTestCaseJ4 {\n+  \n+  private final static int NUM_DOCS = 20;\n+\n+  @BeforeClass\n+  public static void setUpClass() throws Exception {\n+    initCore(\"solrconfig.xml\", \"schema.xml\");\n+    for (int i = 0 ; i < NUM_DOCS ; i ++) {\n+      assertU(adoc(\"id\", String.valueOf(i), \"field1_s\", \"foo\", \"field2_s\", String.valueOf(i % 2), \"field3_s\", String.valueOf(i)));\n+      assertU(commit());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY5MjM5OA=="}, "originalCommit": {"oid": "4bb3447bf59fab33681ca5af7e758a0a575d59b9"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTU2MTEzOnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/response/GeoJSONResponseWriter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMToxMDo0MlrOGPV1SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMTozNTo0OFrOGPWWxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODczOTUyOA==", "bodyText": "Why? We can't pick a default and still use this?", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r418739528", "createdAt": "2020-05-01T21:10:42Z", "author": {"login": "madrob"}, "path": "solr/core/src/java/org/apache/solr/response/GeoJSONResponseWriter.java", "diffHunk": "@@ -292,11 +293,18 @@ else if(geo instanceof WriteableGeoJSON) {\n     }\n   }\n \n+  @Deprecated\n   @Override\n   public void writeStartDocumentList(String name, \n-      long start, int size, long numFound, Float maxScore) throws IOException\n+      long start, int size, long numFound, Float maxScore) throws IOException {\n+    throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb3447bf59fab33681ca5af7e758a0a575d59b9"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0ODEwMg==", "bodyText": "This method Shouldn't be called at all for writing a response. In other ResponseWriters, I left the code untouched for support in case someone is extending the Writer. In this case, since it's an inner class, I decided to throw an exception to catch potential bugs (internal code calling this)", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r418748102", "createdAt": "2020-05-01T21:35:48Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/java/org/apache/solr/response/GeoJSONResponseWriter.java", "diffHunk": "@@ -292,11 +293,18 @@ else if(geo instanceof WriteableGeoJSON) {\n     }\n   }\n \n+  @Deprecated\n   @Override\n   public void writeStartDocumentList(String name, \n-      long start, int size, long numFound, Float maxScore) throws IOException\n+      long start, int size, long numFound, Float maxScore) throws IOException {\n+    throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODczOTUyOA=="}, "originalCommit": {"oid": "4bb3447bf59fab33681ca5af7e758a0a575d59b9"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTU2NTMyOnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/response/JSONWriter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMToxMjozMVrOGPV3tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMTozODoyM1rOGPWagg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0MDE1MQ==", "bodyText": "do you mean solr 10? we don't need a major version with it deprecated before we can jettison it? folks upgrading from 8.5->9 might be surprised by this.", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r418740151", "createdAt": "2020-05-01T21:12:31Z", "author": {"login": "madrob"}, "path": "solr/core/src/java/org/apache/solr/response/JSONWriter.java", "diffHunk": "@@ -132,11 +133,16 @@ public void writeSolrDocument(String name, SolrDocument doc, ReturnFields return\n   //       that the size could not be reliably determined.\n   //\n \n+  /**\n+   * This method will be removed in Solr 9", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb3447bf59fab33681ca5af7e758a0a575d59b9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0OTA1OA==", "bodyText": "My understanding is that it's OK to change methods across major versions? Unless it's something needed for rolling upgrade or something.", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r418749058", "createdAt": "2020-05-01T21:38:23Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/java/org/apache/solr/response/JSONWriter.java", "diffHunk": "@@ -132,11 +133,16 @@ public void writeSolrDocument(String name, SolrDocument doc, ReturnFields return\n   //       that the size could not be reliably determined.\n   //\n \n+  /**\n+   * This method will be removed in Solr 9", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0MDE1MQ=="}, "originalCommit": {"oid": "4bb3447bf59fab33681ca5af7e758a0a575d59b9"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTU3MDY4OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/search/MaxScoreCollector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMToxNDo1MVrOGPV6_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMTo0MToyMlrOGPWe1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0MDk4OQ==", "bodyText": "why can we make this change?", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r418740989", "createdAt": "2020-05-01T21:14:51Z", "author": {"login": "madrob"}, "path": "solr/core/src/java/org/apache/solr/search/MaxScoreCollector.java", "diffHunk": "@@ -37,9 +37,7 @@ public float getMaxScore() {\n \n   @Override\n   public ScoreMode scoreMode() {\n-    // Should be TOP_SCORES but this would wrap the scorer unnecessarily since\n-    // this collector is only used in a MultiCollector.\n-    return ScoreMode.COMPLETE;\n+    return ScoreMode.TOP_SCORES;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb3447bf59fab33681ca5af7e758a0a575d59b9"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc1MDE2NQ==", "bodyText": "There is a previous discussion in this PR about it:\n\ntflobbe:\n@jpountz, What did you mean with this comment? MultiCollector will set the scoreMode to COMPLETE in the case of the main collector being something other than TOP_SCORES, right?\njpountz:\nYeah I think that at some point we tried not to wrap the scorer when all score modes were COMPLETE but apparently now we do, so this comment is stale. https://github.com/apache/lucene-solr/blob/master/lucene/core/src/java/org/apache/lucene/search/MultiCollector.java#L158", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r418750165", "createdAt": "2020-05-01T21:41:22Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/java/org/apache/solr/search/MaxScoreCollector.java", "diffHunk": "@@ -37,9 +37,7 @@ public float getMaxScore() {\n \n   @Override\n   public ScoreMode scoreMode() {\n-    // Should be TOP_SCORES but this would wrap the scorer unnecessarily since\n-    // this collector is only used in a MultiCollector.\n-    return ScoreMode.COMPLETE;\n+    return ScoreMode.TOP_SCORES;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0MDk4OQ=="}, "originalCommit": {"oid": "4bb3447bf59fab33681ca5af7e758a0a575d59b9"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTU3NjAyOnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/search/QueryResultKey.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMToxNzoxM1rOGPV-SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNjo1Nzo0NlrOGSsb1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0MTgzMw==", "bodyText": "this is going to overflow in the default case, is that ok?", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r418741833", "createdAt": "2020-05-01T21:17:13Z", "author": {"login": "madrob"}, "path": "solr/core/src/java/org/apache/solr/search/QueryResultKey.java", "diffHunk": "@@ -65,6 +70,7 @@ public QueryResultKey(Query query, List<Query> filters, Sort sort, int nc_flags)\n       h = h*29 + sf.hashCode();\n       ramSfields += BASE_SF_RAM_BYTES_USED + RamUsageEstimator.sizeOfObject(sf.getField());\n     }\n+    h = h*31 + minExactHits;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb3447bf59fab33681ca5af7e758a0a575d59b9"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc1MjU4Mg==", "bodyText": "ah! Good question. I guess yes?", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r418752582", "createdAt": "2020-05-01T21:48:47Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/java/org/apache/solr/search/QueryResultKey.java", "diffHunk": "@@ -65,6 +70,7 @@ public QueryResultKey(Query query, List<Query> filters, Sort sort, int nc_flags)\n       h = h*29 + sf.hashCode();\n       ramSfields += BASE_SF_RAM_BYTES_USED + RamUsageEstimator.sizeOfObject(sf.getField());\n     }\n+    h = h*31 + minExactHits;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0MTgzMw=="}, "originalCommit": {"oid": "4bb3447bf59fab33681ca5af7e758a0a575d59b9"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI1NTU3NA==", "bodyText": "Added a test", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r422255574", "createdAt": "2020-05-08T16:57:46Z", "author": {"login": "tflobbe"}, "path": "solr/core/src/java/org/apache/solr/search/QueryResultKey.java", "diffHunk": "@@ -65,6 +70,7 @@ public QueryResultKey(Query query, List<Query> filters, Sort sort, int nc_flags)\n       h = h*29 + sf.hashCode();\n       ramSfields += BASE_SF_RAM_BYTES_USED + RamUsageEstimator.sizeOfObject(sf.getField());\n     }\n+    h = h*31 + minExactHits;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0MTgzMw=="}, "originalCommit": {"oid": "4bb3447bf59fab33681ca5af7e758a0a575d59b9"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTU5MzE0OnYy", "diffSide": "RIGHT", "path": "solr/core/src/test/org/apache/solr/request/TestFaceting.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMToyNDoyNFrOGPWIKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMToyNDoyNFrOGPWIKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0NDM2Mg==", "bodyText": "s/mun/min", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r418744362", "createdAt": "2020-05-01T21:24:24Z", "author": {"login": "madrob"}, "path": "solr/core/src/test/org/apache/solr/request/TestFaceting.java", "diffHunk": "@@ -931,5 +934,28 @@ public void testListedTermCounts() throws Exception {\n         \"//lst[@name='facet_fields']/lst[@name='title_ws']/int[2][@name='Book2']\",\n         \"//lst[@name='facet_fields']/lst[@name='title_ws']/int[3][@name='Book3']\");\n   }\n+  \n+  @Test\n+  public void testFacetCountsWithMinExactHits() throws Exception {\n+    final int NUM_DOCS = 20;\n+    for (int i = 0; i < NUM_DOCS ; i++) {\n+      assertU(adoc(\"id\", String.valueOf(i), \"title_ws\", \"Book1\"));\n+      assertU(commit());\n+    }\n+    ModifiableSolrParams params = new ModifiableSolrParams();\n+    params.set(\"q\", \"title_ws:Book1\");\n+    params.set(FacetParams.FACET, \"true\");\n+    params.set(FacetParams.FACET_FIELD, \"title_ws\");\n+    assertQ(req(params),\n+        \"//lst[@name='facet_fields']/lst[@name='title_ws']/int[1][@name='Book1'][.='20']\"\n+        ,\"//*[@hitCountRelation='\" + HitCountRelation.EQ + \"']\"\n+        ,\"//*[@numFound='\" + NUM_DOCS + \"']\");\n+    \n+    // It doesn't matter if we request munExactHits, when requesting facets, the numFound value is precise", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb3447bf59fab33681ca5af7e758a0a575d59b9"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTY1MDI5OnYy", "diffSide": "RIGHT", "path": "solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMTo1MDoyMVrOGPWqUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMjowNjozOFrOGS1Gtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc1MzEwNA==", "bodyText": "s/change/changed", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r418753104", "createdAt": "2020-05-01T21:50:21Z", "author": {"login": "anshumg"}, "path": "solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec.java", "diffHunk": "@@ -242,6 +243,7 @@ public void testBackCompatForSolrDocumentWithChildDocs() throws IOException {\n   }\n \n   @Test\n+  @Ignore(\"This test compares binaries, which change due to SOLR-13289\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb3447bf59fab33681ca5af7e758a0a575d59b9"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM5NzYyMg==", "bodyText": "I fixed this test.", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r422397622", "createdAt": "2020-05-08T22:06:38Z", "author": {"login": "tflobbe"}, "path": "solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec.java", "diffHunk": "@@ -242,6 +243,7 @@ public void testBackCompatForSolrDocumentWithChildDocs() throws IOException {\n   }\n \n   @Test\n+  @Ignore(\"This test compares binaries, which change due to SOLR-13289\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc1MzEwNA=="}, "originalCommit": {"oid": "4bb3447bf59fab33681ca5af7e758a0a575d59b9"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 798, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}