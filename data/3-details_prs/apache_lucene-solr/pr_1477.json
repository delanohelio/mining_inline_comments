{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyMTk5Mjkz", "number": 1477, "title": "LUCENE-9321: Port markdown task to Gradle", "bodyText": "This PR handles the markdown specific parts of the Lucene/Solr documentation:\n\ncopy static assets (unfortunetely those are not yet unified between borth projects)\nconvert .md files to HTML using flexmark\ncreate the index files by first iterating through the projects and collecting all links, creating a markdown representation of all links locally and then write as index.html to docus folder", "createdAt": "2020-05-01T16:27:58Z", "url": "https://github.com/apache/lucene-solr/pull/1477", "merged": true, "mergeCommit": {"oid": "06df50e759a8edf2315dc421a5b12570577471a3"}, "closed": true, "closedAt": "2020-05-17T12:46:27Z", "author": {"login": "uschindler"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcdEOYigH2gAyNDEyMTk5MjkzOjkxNGJhMTgxZjZiOGMzYzFhZDUxNzFkOTc1ZGIxZjM1MmNmNTIzNDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABciKZ7sgH2gAyNDEyMTk5MjkzOmYwMzNhM2MzMjkwNzE4ZGE4YmU1MTUwNjVkZWIyMGYxODhiZjUzYzk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "914ba181f6b8c3c1ad5171d975db1f352cf52349", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/914ba181f6b8c3c1ad5171d975db1f352cf52349", "committedDate": "2020-05-01T16:25:13Z", "message": "LUCENE-9321: Port markdown task to Gradle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MzE2Nzgz", "url": "https://github.com/apache/lucene-solr/pull/1477#pullrequestreview-404316783", "createdAt": "2020-05-01T18:18:29Z", "commit": {"oid": "914ba181f6b8c3c1ad5171d975db1f352cf52349"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxODoxODozMFrOGPRi1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxODoxOToxN1rOGPRkOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY2OTI2OQ==", "bodyText": "I'd rather have it as separate configure(\":lucene\"), configure(\":solr\") blocks... would be easier to separate the logic between the two?", "url": "https://github.com/apache/lucene-solr/pull/1477#discussion_r418669269", "createdAt": "2020-05-01T18:18:30Z", "author": {"login": "dweiss"}, "path": "gradle/documentation/documentation.gradle", "diffHunk": "@@ -34,4 +36,11 @@ configure(subprojects.findAll { it.path == ':lucene' || it.path == ':solr' }) {\n   ext {\n     docroot = \"${project.buildDir}/documentation\"\n   }\n+  \n+  task copyDocumentationAssets(type: Copy) {\n+    includeEmptyDirs = false\n+    from('site/html')      // lucene", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "914ba181f6b8c3c1ad5171d975db1f352cf52349"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY2OTM2MQ==", "bodyText": "Right... same here.", "url": "https://github.com/apache/lucene-solr/pull/1477#discussion_r418669361", "createdAt": "2020-05-01T18:18:44Z", "author": {"login": "dweiss"}, "path": "gradle/documentation/markdown.gradle", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import com.vladsch.flexmark.util.ast.Document;\n+import com.vladsch.flexmark.ast.Heading;\n+import com.vladsch.flexmark.html.HtmlRenderer;\n+import com.vladsch.flexmark.parser.Parser;\n+import com.vladsch.flexmark.parser.ParserEmulationProfile;\n+import com.vladsch.flexmark.util.sequence.Escaping;\n+import com.vladsch.flexmark.util.data.MutableDataSet;\n+import com.vladsch.flexmark.ext.abbreviation.AbbreviationExtension;\n+import com.vladsch.flexmark.ext.autolink.AutolinkExtension;\n+\n+buildscript {\n+  repositories {\n+    mavenCentral()\n+  }\n+\n+  dependencies {\n+    def flexmarkVersion = '0.61.24'\n+  \n+    classpath 'com.vladsch.flexmark:flexmark:' + flexmarkVersion\n+    classpath 'com.vladsch.flexmark:flexmark-ext-autolink:' + flexmarkVersion\n+    classpath 'com.vladsch.flexmark:flexmark-ext-abbreviation:' + flexmarkVersion\n+  }\n+}\n+\n+configure(subprojects.findAll { it.path == ':lucene' || it.path == ':solr' }) {\n+  task markdownToHtml(type: Copy) {\n+    filteringCharset = 'UTF-8'\n+    includeEmptyDirs = false\n+    from('.') {            // lucene", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "914ba181f6b8c3c1ad5171d975db1f352cf52349"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY2OTYyNA==", "bodyText": "Looks legit to me, not a hack? :)", "url": "https://github.com/apache/lucene-solr/pull/1477#discussion_r418669624", "createdAt": "2020-05-01T18:19:17Z", "author": {"login": "dweiss"}, "path": "gradle/documentation/markdown.gradle", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import com.vladsch.flexmark.util.ast.Document;\n+import com.vladsch.flexmark.ast.Heading;\n+import com.vladsch.flexmark.html.HtmlRenderer;\n+import com.vladsch.flexmark.parser.Parser;\n+import com.vladsch.flexmark.parser.ParserEmulationProfile;\n+import com.vladsch.flexmark.util.sequence.Escaping;\n+import com.vladsch.flexmark.util.data.MutableDataSet;\n+import com.vladsch.flexmark.ext.abbreviation.AbbreviationExtension;\n+import com.vladsch.flexmark.ext.autolink.AutolinkExtension;\n+\n+buildscript {\n+  repositories {\n+    mavenCentral()\n+  }\n+\n+  dependencies {\n+    def flexmarkVersion = '0.61.24'\n+  \n+    classpath 'com.vladsch.flexmark:flexmark:' + flexmarkVersion\n+    classpath 'com.vladsch.flexmark:flexmark-ext-autolink:' + flexmarkVersion\n+    classpath 'com.vladsch.flexmark:flexmark-ext-abbreviation:' + flexmarkVersion\n+  }\n+}\n+\n+configure(subprojects.findAll { it.path == ':lucene' || it.path == ':solr' }) {\n+  task markdownToHtml(type: Copy) {\n+    filteringCharset = 'UTF-8'\n+    includeEmptyDirs = false\n+    from('.') {            // lucene\n+      include 'MIGRATE.md'\n+      include 'JRE_VERSION_MIGRATION.md'\n+      include 'SYSTEM_REQUIREMENTS.md'\n+    }\n+    from('site') {         // solr\n+      include '**/*.md'\n+    }\n+    into project.docroot\n+    rename(/\\.md$/, '.html')\n+    filter(MarkdownFilter)\n+  }\n+  \n+  task createDocumentationIndex {\n+    // nocommit: this needs to be implemented next\n+  }\n+}\n+\n+class MarkdownFilter extends FilterReader {\n+  public MarkdownFilter(Reader reader) throws IOException {\n+    // this is a hack: it reads whole file, converts it and provides result as a StringReader", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "914ba181f6b8c3c1ad5171d975db1f352cf52349"}, "originalPosition": 66}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4d3903838662cb62efd52252054400319c72cfd", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/b4d3903838662cb62efd52252054400319c72cfd", "committedDate": "2020-05-01T23:39:03Z", "message": "Set flexmark version in root project"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "800f5d68f9e0afadadb877fa1f1b4b29e4f4d35e", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/800f5d68f9e0afadadb877fa1f1b4b29e4f4d35e", "committedDate": "2020-05-01T23:52:11Z", "message": "Make dependency declaration similar to other by @dweiss"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b3b28142970050cbd1eaea56a0902e8ae244f4b", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/0b3b28142970050cbd1eaea56a0902e8ae244f4b", "committedDate": "2020-05-02T09:49:44Z", "message": "Merge branch 'master' of https://gitbox.apache.org/repos/asf/lucene-solr into jira/LUCENE-9321"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d32aa28cd2b28e29b17d6489484bd20a7eeea4f", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/5d32aa28cd2b28e29b17d6489484bd20a7eeea4f", "committedDate": "2020-05-14T11:22:07Z", "message": "Merge branch 'master' of https://gitbox.apache.org/repos/asf/lucene-solr into jira/LUCENE-9321\n\n# Conflicts:\n#\tbuild.gradle\n#\tgradle/documentation/documentation.gradle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8dca5bb4be788435ca0ba0c50e9550a7ee46a804", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/8dca5bb4be788435ca0ba0c50e9550a7ee46a804", "committedDate": "2020-05-14T16:15:32Z", "message": "Add markdown implementation of index.html (for Lucene only)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25ec475288effa9e94b017d00aa836c2bbc1757e", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/25ec475288effa9e94b017d00aa836c2bbc1757e", "committedDate": "2020-05-14T16:27:38Z", "message": "Fix formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "839ad4d8d3c76f63cd5963d8bc48897ab08d3ebd", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/839ad4d8d3c76f63cd5963d8bc48897ab08d3ebd", "committedDate": "2020-05-14T16:34:10Z", "message": "Fix link to be HTTPS"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aabfb27913598d4b4e95d905f4d72918a8ac4162", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/aabfb27913598d4b4e95d905f4d72918a8ac4162", "committedDate": "2020-05-14T18:01:57Z", "message": "Update versions (also for Ant)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMDg3Nzc1", "url": "https://github.com/apache/lucene-solr/pull/1477#pullrequestreview-412087775", "createdAt": "2020-05-14T18:43:49Z", "commit": {"oid": "aabfb27913598d4b4e95d905f4d72918a8ac4162"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODo0Mzo0OVrOGVpnZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODo0Mzo0OVrOGVpnZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1NTEwOA==", "bodyText": "Should we move it to an external file? Then we can have a proper suffix and editor support.", "url": "https://github.com/apache/lucene-solr/pull/1477#discussion_r425355108", "createdAt": "2020-05-14T18:43:49Z", "author": {"login": "dweiss"}, "path": "gradle/documentation/markdown.gradle", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import com.vladsch.flexmark.ast.Heading;\n+import com.vladsch.flexmark.ext.abbreviation.AbbreviationExtension;\n+import com.vladsch.flexmark.ext.attributes.AttributesExtension;\n+import com.vladsch.flexmark.ext.autolink.AutolinkExtension;\n+import com.vladsch.flexmark.html.HtmlRenderer;\n+import com.vladsch.flexmark.parser.Parser;\n+import com.vladsch.flexmark.parser.ParserEmulationProfile;\n+import com.vladsch.flexmark.util.ast.Document;\n+import com.vladsch.flexmark.util.data.MutableDataSet;\n+import com.vladsch.flexmark.util.sequence.Escaping;\n+\n+buildscript {\n+  repositories {\n+    mavenCentral()\n+  }\n+\n+  dependencies {\n+    classpath \"com.vladsch.flexmark:flexmark:${scriptDepVersions['flexmark']}\"\n+    classpath \"com.vladsch.flexmark:flexmark-ext-abbreviation:${scriptDepVersions['flexmark']}\"\n+    classpath \"com.vladsch.flexmark:flexmark-ext-attributes:${scriptDepVersions['flexmark']}\"\n+    classpath \"com.vladsch.flexmark:flexmark-ext-autolink:${scriptDepVersions['flexmark']}\"\n+  }\n+}\n+\n+def getListOfProjectsAsMarkdown = { prefix ->\n+  def projects = allprojects.findAll{ it.path.startsWith(prefix) && it.tasks.findByName('renderSiteJavadoc') }\n+    .sort(false, Comparator.comparing{ (it.name != 'core') as Boolean }\n+      .thenComparing(Comparator.comparing{ (it.name == 'test-framework') as Boolean })\n+      .thenComparing(Comparator.comparing{ it.path }));\n+  return projects.collect{ project ->\n+    def text = \"**[${project.path.substring(prefix.length()).replace(':','-')}](${project.relativeDocPath}/index.html):** ${project.description}\"\n+    if (project.name == 'core') {\n+      text = text.concat(' {style=\"font-size:larger; margin-bottom:.5em\"}')\n+    }\n+    return '* ' + text;\n+  }.join('\\n')\n+}\n+\n+configure(subprojects.findAll { it.path == ':lucene' || it.path == ':solr' }) {\n+  task markdownToHtml(type: Copy) {\n+    filteringCharset = 'UTF-8'\n+    includeEmptyDirs = false\n+    into project.docroot\n+    rename(/\\.md$/, '.html')\n+    filter(MarkdownFilter)\n+  }\n+}\n+\n+configure(project(':lucene')) {\n+  markdownToHtml {\n+    from('.') {\n+      include 'MIGRATE.md'\n+      include 'JRE_VERSION_MIGRATION.md'\n+      include 'SYSTEM_REQUIREMENTS.md'\n+    }\n+  }\n+  \n+  task createDocumentationIndex {\n+    def outputFile = file(\"${project.docroot}/index.html\");\n+    def defaultCodecFile = project(':lucene:core').file('src/java/org/apache/lucene/codecs/Codec.java')\n+    \n+    inputs.file(defaultCodecFile)\n+    outputs.file(outputFile)\n+    \n+    doLast {\n+      // static Codec defaultCodec   =   LOADER    .   lookup    (   \"LuceneXXX\"  )   ;\n+      def regex = ~/\\bdefaultCodec\\s*=\\s*LOADER\\s*\\.\\s*lookup\\s*\\(\\s*\"([^\"]+)\"\\s*\\)\\s*;/\n+      def matcher = regex.matcher(defaultCodecFile.getText('UTF-8'))\n+      if (!matcher.find()) {\n+        throw GradleException(\"Cannot determine default codec from file ${defaultCodecFile}\")\n+      }\n+      def defaultCodecPackage = matcher.group(1).toLowerCase(Locale.ROOT)\n+      def markdown = \"\"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aabfb27913598d4b4e95d905f4d72918a8ac4162"}, "originalPosition": 90}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac3245ba11afb97db358fd61ddd38b210d80a416", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/ac3245ba11afb97db358fd61ddd38b210d80a416", "committedDate": "2020-05-14T22:57:42Z", "message": "First version using Groovy's SimpleTemplateEngine"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d18725983590f70fd3e8e2dfaf13ce910dcaba53", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/d18725983590f70fd3e8e2dfaf13ce910dcaba53", "committedDate": "2020-05-14T23:00:01Z", "message": "fix typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50c83c881f58f04a939fe083cbd0064e693c74f6", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/50c83c881f58f04a939fe083cbd0064e693c74f6", "committedDate": "2020-05-14T23:01:35Z", "message": "Remove import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39d529d30a2aaf8f1b3b459aaf337b20fd683bb0", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/39d529d30a2aaf8f1b3b459aaf337b20fd683bb0", "committedDate": "2020-05-15T09:47:15Z", "message": "Use baseVersion to create URLs; TODO: Move this to a central place"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16e75cd068f6d295ba3f3abce5f8adc089246420", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/16e75cd068f6d295ba3f3abce5f8adc089246420", "committedDate": "2020-05-15T09:48:17Z", "message": "Add a task class with inputs/outputs for the template processing. The binding of variables is defined by a closure called by the main action"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyNTc4ODUx", "url": "https://github.com/apache/lucene-solr/pull/1477#pullrequestreview-412578851", "createdAt": "2020-05-15T11:52:19Z", "commit": {"oid": "16e75cd068f6d295ba3f3abce5f8adc089246420"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMTo1MjoxOVrOGWBsFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMTo1MjoxOVrOGWBsFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc0OTUyNg==", "bodyText": "Would it be better inserting <!DOCTYPE html> at the beginning (as a valid html5)?", "url": "https://github.com/apache/lucene-solr/pull/1477#discussion_r425749526", "createdAt": "2020-05-15T11:52:19Z", "author": {"login": "mocobeta"}, "path": "gradle/documentation/markdown.gradle", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import com.vladsch.flexmark.ast.Heading;\n+import com.vladsch.flexmark.ext.abbreviation.AbbreviationExtension;\n+import com.vladsch.flexmark.ext.attributes.AttributesExtension;\n+import com.vladsch.flexmark.ext.autolink.AutolinkExtension;\n+import com.vladsch.flexmark.html.HtmlRenderer;\n+import com.vladsch.flexmark.parser.Parser;\n+import com.vladsch.flexmark.parser.ParserEmulationProfile;\n+import com.vladsch.flexmark.util.ast.Document;\n+import com.vladsch.flexmark.util.data.MutableDataSet;\n+import com.vladsch.flexmark.util.sequence.Escaping;\n+import groovy.text.SimpleTemplateEngine;\n+\n+buildscript {\n+  repositories {\n+    mavenCentral()\n+  }\n+\n+  dependencies {\n+    classpath \"com.vladsch.flexmark:flexmark:${scriptDepVersions['flexmark']}\"\n+    classpath \"com.vladsch.flexmark:flexmark-ext-abbreviation:${scriptDepVersions['flexmark']}\"\n+    classpath \"com.vladsch.flexmark:flexmark-ext-attributes:${scriptDepVersions['flexmark']}\"\n+    classpath \"com.vladsch.flexmark:flexmark-ext-autolink:${scriptDepVersions['flexmark']}\"\n+  }\n+}\n+\n+def getListOfProjectsAsMarkdown = { prefix ->\n+  def projects = allprojects.findAll{ it.path.startsWith(prefix) && it.tasks.findByName('renderSiteJavadoc') }\n+    .sort(false, Comparator.comparing{ (it.name != 'core') as Boolean }\n+      .thenComparing(Comparator.comparing{ (it.name == 'test-framework') as Boolean })\n+      .thenComparing(Comparator.comparing{ it.path }));\n+  return projects.collect{ project ->\n+    def text = \"**[${project.path.substring(prefix.length()).replace(':','-')}](${project.relativeDocPath}/index.html):** ${project.description}\"\n+    if (project.name == 'core') {\n+      text = text.concat(' {style=\"font-size:larger; margin-bottom:.5em\"}')\n+    }\n+    return '* ' + text;\n+  }.join('\\n')\n+}\n+\n+configure(subprojects.findAll { it.path == ':lucene' || it.path == ':solr' }) {\n+  task markdownToHtml(type: Copy) {\n+    filteringCharset = 'UTF-8'\n+    includeEmptyDirs = false\n+    into project.docroot\n+    rename(/\\.md$/, '.html')\n+    filter(MarkdownFilter)\n+  }\n+}\n+\n+configure(project(':lucene')) {\n+  markdownToHtml {\n+    from('.') {\n+      include 'MIGRATE.md'\n+      include 'JRE_VERSION_MIGRATION.md'\n+      include 'SYSTEM_REQUIREMENTS.md'\n+    }\n+  }\n+  \n+  task createDocumentationIndex(type: MarkdownTemplateTask) {\n+    def defaultCodecFile = project(':lucene:core').file('src/java/org/apache/lucene/codecs/Codec.java')\n+    inputs.file(defaultCodecFile)\n+\n+    outputFile = file(\"${project.docroot}/index.html\")\n+    templateFile = file('site/xsl/index.template.md')\n+    \n+    binding = {\n+      // static Codec defaultCodec   =   LOADER    .   lookup    (   \"LuceneXXX\"  )   ;\n+      def regex = ~/\\bdefaultCodec\\s*=\\s*LOADER\\s*\\.\\s*lookup\\s*\\(\\s*\"([^\"]+)\"\\s*\\)\\s*;/\n+      def matcher = regex.matcher(defaultCodecFile.getText('UTF-8'))\n+      if (!matcher.find()) {\n+        throw GradleException(\"Cannot determine default codec from file ${defaultCodecFile}\")\n+      }\n+      def majorVersion = project.version.split(/\\./)[0] as int;\n+      return [\n+        defaultCodecPackage : matcher.group(1).toLowerCase(Locale.ROOT),\n+        version : project.version,\n+        majorVersion : majorVersion,\n+        projectList : getListOfProjectsAsMarkdown(':lucene:')\n+      ]\n+    }\n+  }\n+}\n+\n+configure(project(':solr')) {\n+  markdownToHtml {\n+    from('site') {\n+      include '**/*.md'\n+    }\n+  }\n+  \n+  task createDocumentationIndex {\n+    // nocommit: this needs to be implemented next\n+  }\n+}\n+\n+// filter that can be used with the \"copy\" task of Gradle that transforms Markdown files\n+// from source location to HTML (adding HTML header, styling,...)\n+class MarkdownFilter extends FilterReader {\n+\n+  public MarkdownFilter(Reader reader) throws IOException {\n+    // this is not really a filter: it reads whole file in ctor,\n+    // converts it and provides result downstream as a StringReader\n+    super(new StringReader(convert(reader.text)));\n+  }\n+  \n+  public static String convert(String markdownSource) {\n+    // first replace LUCENE and SOLR issue numbers with a markdown link\n+    markdownSource = markdownSource.replaceAll(/(?s)\\b(LUCENE|SOLR)\\-\\d+\\b/,\n+      '[$0](https://issues.apache.org/jira/browse/$0)');\n+  \n+    // convert the markdown\n+    MutableDataSet options = new MutableDataSet();\n+    options.setFrom(ParserEmulationProfile.MARKDOWN);\n+    options.set(Parser.EXTENSIONS, [ AbbreviationExtension.create(), AutolinkExtension.create(), AttributesExtension.create() ]);\n+    options.set(HtmlRenderer.RENDER_HEADER_ID, true);\n+    options.set(HtmlRenderer.MAX_TRAILING_BLANK_LINES, 0);\n+    Document parsed = Parser.builder(options).build().parse(markdownSource);\n+\n+    StringBuilder html = new StringBuilder('<html>\\n<head>\\n');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16e75cd068f6d295ba3f3abce5f8adc089246420"}, "originalPosition": 136}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06e3e531f2a1763180b17d38579259ede85acea6", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/06e3e531f2a1763180b17d38579259ede85acea6", "committedDate": "2020-05-15T12:31:05Z", "message": "Add some metadata to build.gradle files (core and analysis only)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0ffc326b47b63017a87708c5ad517083b79885f", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/c0ffc326b47b63017a87708c5ad517083b79885f", "committedDate": "2020-05-15T17:49:16Z", "message": "Move some common bindings to task"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2ce12cf04abd212fb5503ab81e99eda3c4f8098", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/b2ce12cf04abd212fb5503ab81e99eda3c4f8098", "committedDate": "2020-05-15T17:57:14Z", "message": "Make binding optional"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abd659db1cd8be15c629fc55bcba65a7b6bf082e", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/abd659db1cd8be15c629fc55bcba65a7b6bf082e", "committedDate": "2020-05-15T22:03:50Z", "message": "Add descriptions to remaining projects"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f1008917c36f4050e149c7f616b88a787d5edf3", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/5f1008917c36f4050e149c7f616b88a787d5edf3", "committedDate": "2020-05-15T22:14:50Z", "message": "Merge branch 'master' of https://gitbox.apache.org/repos/asf/lucene-solr into jira/LUCENE-9321"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7ca47758467ef58a2d1149918c81137753a048d", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/a7ca47758467ef58a2d1149918c81137753a048d", "committedDate": "2020-05-16T11:23:58Z", "message": "Add Solr minimal online (shipped in tgz/zip) and full documentation.\nCleanup of code; move URL properties to more common places"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e742ff41cd62a829b321db936c096a148915a4d", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/5e742ff41cd62a829b321db936c096a148915a4d", "committedDate": "2020-05-16T11:45:26Z", "message": "Fix precommit error caused by Ant not excluding markdown templates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "363873a478dabdc0eb7db6ecc26d5e48ed306455", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/363873a478dabdc0eb7db6ecc26d5e48ed306455", "committedDate": "2020-05-16T11:52:07Z", "message": "Fix broken links (with disabled render task); also move solrj up in list"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2c24065718d5e9b9541b4298eaab3fbb12b3284", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/c2c24065718d5e9b9541b4298eaab3fbb12b3284", "committedDate": "2020-05-17T11:20:27Z", "message": "Use new provider/property API of gradle for lazy evaluation; add project properties used in template as input of task; add withProjectList() to task"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f033a3c3290718da8be515065deb20f188bf53c9", "author": {"user": {"login": "uschindler", "name": "Uwe Schindler"}}, "url": "https://github.com/apache/lucene-solr/commit/f033a3c3290718da8be515065deb20f188bf53c9", "committedDate": "2020-05-17T12:26:53Z", "message": "Split Lucene/Solr documentation task"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2670, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}