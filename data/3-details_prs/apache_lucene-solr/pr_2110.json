{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwMjAwOTg0", "number": 2110, "title": "SOLR-15004: tests for the replica placement API + placement plugin fixes and light refactoring", "bodyText": "Co-authored-by: Andrzej Bialecki ab@apache.org", "createdAt": "2020-12-01T10:34:00Z", "url": "https://github.com/apache/lucene-solr/pull/2110", "merged": true, "mergeCommit": {"oid": "3df72502ccb72c2775db72b3347e99dc621d2d6b"}, "closed": true, "closedAt": "2020-12-01T19:07:09Z", "author": {"login": "murblanc"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdddbGOgH2gAyNTMwMjAwOTg0OjYzNjA3ZjQ3ZDkxOTgzMWU3NjQwNmQ2NDRmM2YzODAxNzIwNTY1ZTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdh6Zn2gH2gAyNTMwMjAwOTg0OjgwN2Q3NDIxNTNlZmEzMmRhZDkzZjkwMzE5NDUzZGQ1NTMwNDVlZjc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "63607f47d919831e76406d644f3f3801720565e0", "author": {"user": {"login": "sigram", "name": "Andrzej Bia\u0142ecki"}}, "url": "https://github.com/apache/lucene-solr/commit/63607f47d919831e76406d644f3f3801720565e0", "committedDate": "2020-11-17T17:57:53Z", "message": "SOLR-15004: Unit test for SimpleClusterAbstractions."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2267f3d1640f636fe4933a430bf291403eb2d892", "author": {"user": {"login": "murblanc", "name": "Ilan Ginzburg"}}, "url": "https://github.com/apache/lucene-solr/commit/2267f3d1640f636fe4933a430bf291403eb2d892", "committedDate": "2020-11-18T00:46:04Z", "message": "solr-15004: initial example (WIP and buggy) of plugin test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "023ebc3b4786de042bdc0fe52db34ef9ca7a1ce9", "author": {"user": {"login": "murblanc", "name": "Ilan Ginzburg"}}, "url": "https://github.com/apache/lucene-solr/commit/023ebc3b4786de042bdc0fe52db34ef9ca7a1ce9", "committedDate": "2020-11-19T00:18:32Z", "message": "SOLR-15004: fix failure in SamplePluginAffinityReplicaPlacementTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6a47a094126c5e06ed656a6603e821cb4c7bf63", "author": {"user": {"login": "sigram", "name": "Andrzej Bia\u0142ecki"}}, "url": "https://github.com/apache/lucene-solr/commit/a6a47a094126c5e06ed656a6603e821cb4c7bf63", "committedDate": "2020-11-19T14:29:43Z", "message": "SOLR-15004: Add integration test. Move some properties so that they are accessible\n(and can be validated) in ClusterProperties. Fix a bug in update()."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be681a3afaaacbed0630e6b75f1f2414e25ca3b8", "author": {"user": {"login": "murblanc", "name": "Ilan Ginzburg"}}, "url": "https://github.com/apache/lucene-solr/commit/be681a3afaaacbed0630e6b75f1f2414e25ca3b8", "committedDate": "2020-11-19T14:48:18Z", "message": "Inverted the plugin and factory class hierarchy for each sample plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d50edbc46000c9374ae13c92a8fbe07120178de", "author": {"user": {"login": "sigram", "name": "Andrzej Bia\u0142ecki"}}, "url": "https://github.com/apache/lucene-solr/commit/1d50edbc46000c9374ae13c92a8fbe07120178de", "committedDate": "2020-11-20T13:49:30Z", "message": "SOLR-15004: Add a scalability test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0cfcf837c4c9b881d671da65b0584358280c34c4", "author": {"user": {"login": "murblanc", "name": "Ilan Ginzburg"}}, "url": "https://github.com/apache/lucene-solr/commit/0cfcf837c4c9b881d671da65b0584358280c34c4", "committedDate": "2020-11-20T19:44:15Z", "message": "Move plugin Javadoc from private plugin to public factory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ca59200949ea3d578e30d52066f86072814beb8", "author": {"user": {"login": "sigram", "name": "Andrzej Bia\u0142ecki"}}, "url": "https://github.com/apache/lucene-solr/commit/9ca59200949ea3d578e30d52066f86072814beb8", "committedDate": "2020-11-23T18:42:01Z", "message": "SOLR-15004: Start testing the availability zone affinity. Add toString() to make it\neasier to debug / report. Improve test abstractions to make it easier to set up tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd63ad16e5ab73ab2c794b2a1f01fe75fbf42a95", "author": {"user": {"login": "murblanc", "name": "Ilan Ginzburg"}}, "url": "https://github.com/apache/lucene-solr/commit/bd63ad16e5ab73ab2c794b2a1f01fe75fbf42a95", "committedDate": "2020-11-24T00:57:29Z", "message": "Introduce a builder class for unit tests to simplify creating cluster states and collections"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a112f5ffb7836a3a7ea944e89c43b21f84301b7", "author": {"user": {"login": "murblanc", "name": "Ilan Ginzburg"}}, "url": "https://github.com/apache/lucene-solr/commit/0a112f5ffb7836a3a7ea944e89c43b21f84301b7", "committedDate": "2020-11-24T01:12:16Z", "message": "Merge branch 'jira/solr-15004' of https://github.com/apache/lucene-solr into jira/solr-15004 (and make precommit happy)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc52210997d5db75dc5a60540a6365b42d610824", "author": {"user": {"login": "sigram", "name": "Andrzej Bia\u0142ecki"}}, "url": "https://github.com/apache/lucene-solr/commit/cc52210997d5db75dc5a60540a6365b42d610824", "committedDate": "2020-11-24T12:43:11Z", "message": "SOLR-15004: Extend the NodeBuilder, move testAffinity to use the Builders."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20a2778019cfc9999fafab7f5035284d8d5b30c1", "author": {"user": {"login": "sigram", "name": "Andrzej Bia\u0142ecki"}}, "url": "https://github.com/apache/lucene-solr/commit/20a2778019cfc9999fafab7f5035284d8d5b30c1", "committedDate": "2020-11-24T14:18:26Z", "message": "SOLR-15004: Fix the use of prefixes for sysprops and metrics. Finish the affinity test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "374fd7f79d222b205de804a987cd48c88eb8eed1", "author": {"user": {"login": "sigram", "name": "Andrzej Bia\u0142ecki"}}, "url": "https://github.com/apache/lucene-solr/commit/374fd7f79d222b205de804a987cd48c88eb8eed1", "committedDate": "2020-11-24T17:16:51Z", "message": "SOLR-15004: Test replica types placement."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfb0eb51e3edf62673dc69bef4e61507a65f495b", "author": {"user": {"login": "murblanc", "name": "Ilan Ginzburg"}}, "url": "https://github.com/apache/lucene-solr/commit/dfb0eb51e3edf62673dc69bef4e61507a65f495b", "committedDate": "2020-11-24T17:58:06Z", "message": "Have each replica type provide the corresponding suffix char to use in replica names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b06bbbd35c4dd8049a9a59a221a8098047b2551", "author": {"user": {"login": "murblanc", "name": "Ilan Ginzburg"}}, "url": "https://github.com/apache/lucene-solr/commit/8b06bbbd35c4dd8049a9a59a221a8098047b2551", "committedDate": "2020-11-24T18:05:55Z", "message": "Reformat to correct tab length (+ some other IntelliJ magic)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2be41f3cecb285afad31ed9f359ddf5ea10f2eee", "author": {"user": {"login": "murblanc", "name": "Ilan Ginzburg"}}, "url": "https://github.com/apache/lucene-solr/commit/2be41f3cecb285afad31ed9f359ddf5ea10f2eee", "committedDate": "2020-11-24T22:14:06Z", "message": "Remove PluginTestHelper, use Builders instead. Add getShardNames() to SolrCollection"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0e989c52e215460d3a1faa426b3724ed30c3b4a", "author": {"user": {"login": "sigram", "name": "Andrzej Bia\u0142ecki"}}, "url": "https://github.com/apache/lucene-solr/commit/d0e989c52e215460d3a1faa426b3724ed30c3b4a", "committedDate": "2020-11-25T13:13:05Z", "message": "SOLR-15004: Move around some of the test support classes so that they can be used in other\nplacement tests (this required changing visibility of some classes / methods). Allow using\nthe test framework random() for repeatable randomness."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5705765b37b03a5c23f5384f6171d1b82333dbcd", "author": {"user": {"login": "sigram", "name": "Andrzej Bia\u0142ecki"}}, "url": "https://github.com/apache/lucene-solr/commit/5705765b37b03a5c23f5384f6171d1b82333dbcd", "committedDate": "2020-11-25T19:25:16Z", "message": "SOLR-15004: Some renaming to clarify the purpose of plugin config params."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a59e117a0dc8e1252fe00ec03b8fbacf7ec6d34", "author": {"user": {"login": "murblanc", "name": "Ilan Ginzburg"}}, "url": "https://github.com/apache/lucene-solr/commit/0a59e117a0dc8e1252fe00ec03b8fbacf7ec6d34", "committedDate": "2020-11-25T23:00:20Z", "message": "Rename a couple of leftover deprioritizedFreeDiskGB into prioritizedFreeDiskGB"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8450ea8ce78d2b89421dedf9d77e749baeeda4b2", "author": {"user": {"login": "murblanc", "name": "Ilan Ginzburg"}}, "url": "https://github.com/apache/lucene-solr/commit/8450ea8ce78d2b89421dedf9d77e749baeeda4b2", "committedDate": "2020-11-26T10:05:52Z", "message": "Reformat placement plugin code to right tab size"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c22d1893b809ffd74a3aad786664c455575728c8", "author": {"user": {"login": "murblanc", "name": "Ilan Ginzburg"}}, "url": "https://github.com/apache/lucene-solr/commit/c22d1893b809ffd74a3aad786664c455575728c8", "committedDate": "2020-11-26T17:55:26Z", "message": "Test placement decisions when some nodes have low or not enough disk space"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5325ac7d3e8262374b92a965713c6f91d905c71", "author": {"user": {"login": "murblanc", "name": "Ilan Ginzburg"}}, "url": "https://github.com/apache/lucene-solr/commit/d5325ac7d3e8262374b92a965713c6f91d905c71", "committedDate": "2020-11-27T00:10:05Z", "message": "Added failing test AffinityPlacementFactoryTest.testPlacementWithExistingReplicas. There's a bug in AffinityPlacementPlugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "427a203c1d6648c6660fb593959a2554d38c615c", "author": {"user": {"login": "murblanc", "name": "Ilan Ginzburg"}}, "url": "https://github.com/apache/lucene-solr/commit/427a203c1d6648c6660fb593959a2554d38c615c", "committedDate": "2020-11-27T13:04:21Z", "message": "fix bug of multiple replicas of same shard placed on same node"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "167157ca01104141a8f5e97c70b5e9278226420c", "author": {"user": {"login": "murblanc", "name": "Ilan Ginzburg"}}, "url": "https://github.com/apache/lucene-solr/commit/167157ca01104141a8f5e97c70b5e9278226420c", "committedDate": "2020-11-28T01:17:59Z", "message": "Add a convenient way to create a collection with a custom sharding/replica pattern. Add a test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68e2cd5d29581d820e206cb0fcbb11bb4e81aaad", "author": {"user": {"login": "murblanc", "name": "Ilan Ginzburg"}}, "url": "https://github.com/apache/lucene-solr/commit/68e2cd5d29581d820e206cb0fcbb11bb4e81aaad", "committedDate": "2020-11-30T18:14:08Z", "message": "Fix AZ selection for placement to pick the one with the most suitable node when multiple AZ's have same number of replicas"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ef9812a0a3462ff8f7a8b65eb738219f10ed817", "author": {"user": {"login": "murblanc", "name": "Ilan Ginzburg"}}, "url": "https://github.com/apache/lucene-solr/commit/2ef9812a0a3462ff8f7a8b65eb738219f10ed817", "committedDate": "2020-11-30T23:46:32Z", "message": "Add AZ vs number of cores placement test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "506e47cecb4b2610d2b2a9ea17a9ee3db096d1f7", "author": {"user": {"login": "murblanc", "name": "Ilan Ginzburg"}}, "url": "https://github.com/apache/lucene-solr/commit/506e47cecb4b2610d2b2a9ea17a9ee3db096d1f7", "committedDate": "2020-12-01T09:45:07Z", "message": "Merge branch 'master' into jira/solr-15004"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxODM0MDg2", "url": "https://github.com/apache/lucene-solr/pull/2110#pullrequestreview-541834086", "createdAt": "2020-12-01T12:09:58Z", "commit": {"oid": "506e47cecb4b2610d2b2a9ea17a9ee3db096d1f7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMjowOTo1OFrOH8px1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMjowOTo1OFrOH8px1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM2MTEwOQ==", "bodyText": "PREDICTABLE_RANDOM:  This random generator (java.util.Random) is predictable (details)", "url": "https://github.com/apache/lucene-solr/pull/2110#discussion_r533361109", "createdAt": "2020-12-01T12:09:58Z", "author": {"login": "sonatype-lift"}, "path": "solr/core/src/java/org/apache/solr/cluster/placement/plugins/AffinityPlacementFactory.java", "diffHunk": "@@ -0,0 +1,577 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.cluster.placement.plugins;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Ordering;\n+import com.google.common.collect.TreeMultimap;\n+import org.apache.solr.cluster.*;\n+import org.apache.solr.cluster.placement.*;\n+import org.apache.solr.common.util.Pair;\n+import org.apache.solr.common.util.SuppressForbidden;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * <p>This factory is instantiated by config from its class name. Using it is the only way to create instances of\n+ * {@link AffinityPlacementPlugin}.</p>\n+ *\n+ * <p>In order to configure this plugin to be used for placement decisions, the following {@code curl} command (or something\n+ * equivalent) has to be executed once the cluster is already running in order to set\n+ * the appropriate Zookeeper stored configuration. Replace {@code localhost:8983} by one of your servers' IP address and port.</p>\n+ *\n+ * <pre>\n+ *\n+ * curl -X POST -H 'Content-type:application/json' -d '{\n+ * \"set-placement-plugin\": {\n+ * \"class\": \"org.apache.solr.cluster.placement.plugins.AffinityPlacementFactory\",\n+ * \"minimalFreeDiskGB\": 10,\n+ * \"prioritizedFreeDiskGB\": 50\n+ * }\n+ * }' http://localhost:8983/api/cluster\n+ * </pre>\n+ *\n+ * <p>The consequence will be the creation of an element in the Zookeeper file {@code /clusterprops.json} as follows:</p>\n+ *\n+ * <pre>\n+ *\n+ * \"placement-plugin\":{\n+ *     \"class\":\"org.apache.solr.cluster.placement.plugins.AffinityPlacementFactory\",\n+ *     \"minimalFreeDiskGB\":10,\n+ *     \"prioritizedFreeDiskGB\":50}\n+ * </pre>\n+ *\n+ * <p>In order to delete the placement-plugin section from {@code /clusterprops.json} (and to fallback to either Legacy\n+ * or rule based placement if configured for a collection), execute:</p>\n+ *\n+ * <pre>\n+ *\n+ * curl -X POST -H 'Content-type:application/json' -d '{\n+ * \"set-placement-plugin\" : null\n+ * }' http://localhost:8983/api/cluster\n+ * </pre>\n+ *\n+ *\n+ * <p>{@link AffinityPlacementPlugin} implements placing replicas in a way that replicate past Autoscaling config defined\n+ * <a href=\"https://github.com/lucidworks/fusion-cloud-native/blob/master/policy.json#L16\">here</a>.</p>\n+ *\n+ * <p>This specification is doing the following:\n+ * <p><i>Spread replicas per shard as evenly as possible across multiple availability zones (given by a sys prop),\n+ * assign replicas based on replica type to specific kinds of nodes (another sys prop), and avoid having more than\n+ * one replica per shard on the same node.<br>\n+ * Only after these constraints are satisfied do minimize cores per node or disk usage.</i></p>\n+ *\n+ * <p>Overall strategy of this plugin:</p>\n+ * <ul><li>\n+ *     The set of nodes in the cluster is obtained and transformed into 3 independent sets (that can overlap) of nodes\n+ *     accepting each of the three replica types.\n+ * </li><li>\n+ *     For each shard on which placing replicas is required and then for each replica type to place (starting with NRT,\n+ *     then TLOG then PULL): <ul>\n+ *         <li>The set of candidates nodes corresponding to the replica type is used and from that set are removed nodes\n+ *         that already have a replica (of any type) for that shard</li>\n+ *         <li>If there are not enough nodes, an error is thrown (this is checked further down during processing).</li>\n+ *         <li>The number of (already existing) replicas of the current type on each Availability Zone is collected.</li>\n+ *         <li>Separate the set of available nodes to as many subsets (possibly some are empty) as there are Availability Zones\n+ *         defined for the candidate nodes</li>\n+ *         <li>In each AZ nodes subset, sort the nodes by increasing total number of cores count, with possibly a condition\n+ *         that pushes nodes with low disk space to the end of the list? Or a weighted combination of the relative\n+ *         importance of these two factors? Some randomization? Marking as non available nodes with not enough disk space?\n+ *         These and other are likely aspects to be played with once the plugin is tested or observed to be running in prod,\n+ *         don't expect the initial code drop(s) to do all of that.</li>\n+ *         <li>Iterate over the number of replicas to place (for the current replica type for the current shard):\n+ *         <ul>\n+ *             <li>Based on the number of replicas per AZ collected previously, pick the non empty set of nodes having the\n+ *             lowest number of replicas. Then pick the first node in that set. That's the node the replica is placed one.\n+ *             Remove the node from the set of available nodes for the given AZ and increase the number of replicas placed\n+ *             on that AZ.</li>\n+ *         </ul></li>\n+ *         <li>During this process, the number of cores on the nodes in general is tracked to take into account placement\n+ *         decisions so that not all shards decide to put their replicas on the same nodes (they might though if these are\n+ *         the less loaded nodes).</li>\n+ *     </ul>\n+ * </li>\n+ * </ul>\n+ *\n+ * <p>This code is a realistic placement computation, based on a few assumptions. The code is written in such a way to\n+ * make it relatively easy to adapt it to (somewhat) different assumptions. Configuration options could be introduced\n+ * to allow configuration base option selection as well...</p>\n+ */\n+public class AffinityPlacementFactory implements PlacementPluginFactory {\n+  private static final Logger log = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+\n+  /**\n+   * <p>Name of the system property on a node indicating which (public cloud) Availability Zone that node is in. The value\n+   * is any string, different strings denote different availability zones.\n+   *\n+   * <p>Nodes on which this system property is not defined are considered being in the same Availability Zone\n+   * {@link #UNDEFINED_AVAILABILITY_ZONE} (hopefully the value of this constant is not the name of a real Availability Zone :).\n+   */\n+  public static final String AVAILABILITY_ZONE_SYSPROP = \"availability_zone\";\n+\n+  /**\n+   * <p>Name of the system property on a node indicating the type of replicas allowed on that node.\n+   * The value of that system property is a comma separated list or a single string of value names of\n+   * {@link org.apache.solr.cluster.Replica.ReplicaType} (case insensitive). If that property is not defined, that node is\n+   * considered accepting all replica types (i.e. undefined is equivalent to {@code \"NRT,Pull,tlog\"}).\n+   */\n+  public static final String REPLICA_TYPE_SYSPROP = \"replica_type\";\n+\n+  /**\n+   * This is the \"AZ\" name for nodes that do not define an AZ. Should not match a real AZ name (I think we're safe)\n+   */\n+  public static final String UNDEFINED_AVAILABILITY_ZONE = \"uNd3f1NeD\";\n+\n+  /**\n+   * If a node has strictly less GB of free disk than this value, the node is excluded from assignment decisions.\n+   * Set to 0 or less to disable.\n+   */\n+  public static final String MINIMAL_FREE_DISK_GB = \"minimalFreeDiskGB\";\n+\n+  /**\n+   * Replica allocation will assign replicas to nodes with at least this number of GB of free disk space regardless\n+   * of the number of cores on these nodes rather than assigning replicas to nodes with less than this amount of free\n+   * disk space if that's an option (if that's not an option, replicas can still be assigned to nodes with less than this\n+   * amount of free space).\n+   */\n+  public static final String PRIORITIZED_FREE_DISK_GB = \"prioritizedFreeDiskGB\";\n+\n+  /**\n+   * Empty public constructor is used to instantiate this factory. Using a factory pattern to allow the factory to do one\n+   * time costly operations if needed, and to only have to instantiate a default constructor class by name, rather than\n+   * having to call a constructor with more parameters (if we were to instantiate the plugin class directly without going\n+   * through a factory).\n+   */\n+  public AffinityPlacementFactory() {\n+  }\n+\n+  @Override\n+  public PlacementPlugin createPluginInstance(PlacementPluginConfig config) {\n+    final long minimalFreeDiskGB = config.getLongConfig(MINIMAL_FREE_DISK_GB, 20L);\n+    final long prioritizedFreeDiskGB = config.getLongConfig(PRIORITIZED_FREE_DISK_GB, 100L);\n+    return new AffinityPlacementPlugin(minimalFreeDiskGB, prioritizedFreeDiskGB);\n+  }\n+\n+  /**\n+   * See {@link AffinityPlacementFactory} for instructions on how to configure a cluster to use this plugin and details\n+   * on what the plugin does.\n+   */\n+  static class AffinityPlacementPlugin implements PlacementPlugin {\n+\n+    private final long minimalFreeDiskGB;\n+\n+    private final long prioritizedFreeDiskGB;\n+\n+    private Random random = new Random();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "506e47cecb4b2610d2b2a9ea17a9ee3db096d1f7"}, "originalPosition": 184}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxODM0MTA4", "url": "https://github.com/apache/lucene-solr/pull/2110#pullrequestreview-541834108", "createdAt": "2020-12-01T12:09:59Z", "commit": {"oid": "506e47cecb4b2610d2b2a9ea17a9ee3db096d1f7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMjowOTo1OVrOH8px6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMjowOTo1OVrOH8px6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM2MTEyOA==", "bodyText": "PREDICTABLE_RANDOM:  This random generator (java.util.Random) is predictable (details)", "url": "https://github.com/apache/lucene-solr/pull/2110#discussion_r533361128", "createdAt": "2020-12-01T12:09:59Z", "author": {"login": "sonatype-lift"}, "path": "solr/core/src/java/org/apache/solr/cluster/placement/plugins/RandomPlacementFactory.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.cluster.placement.plugins;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Random;\n+import java.util.Set;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.solr.cluster.Cluster;\n+import org.apache.solr.cluster.Node;\n+import org.apache.solr.cluster.Replica;\n+import org.apache.solr.cluster.SolrCollection;\n+import org.apache.solr.cluster.placement.*;\n+\n+/**\n+ * <p>Factory for creating {@link RandomPlacementPlugin}, a placement plugin implementing random placement for new\n+ * collection creation while preventing two replicas of same shard from being placed on same node..</p>\n+ *\n+ * <p>See {@link AffinityPlacementFactory} for a more realistic example and documentation.</p>\n+ */\n+public class RandomPlacementFactory implements PlacementPluginFactory {\n+\n+  @Override\n+  public PlacementPlugin createPluginInstance(PlacementPluginConfig config) {\n+    return new RandomPlacementPlugin();\n+  }\n+\n+  public static class RandomPlacementPlugin implements PlacementPlugin {\n+    private Random random = new Random();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "506e47cecb4b2610d2b2a9ea17a9ee3db096d1f7"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "807d742153efa32dad93f90319453dd553045ef7", "author": {"user": {"login": "murblanc", "name": "Ilan Ginzburg"}}, "url": "https://github.com/apache/lucene-solr/commit/807d742153efa32dad93f90319453dd553045ef7", "committedDate": "2020-12-01T13:59:13Z", "message": "fix precommit issues"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2635, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}