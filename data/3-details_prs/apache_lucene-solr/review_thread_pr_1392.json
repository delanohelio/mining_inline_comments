{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2MzczMDM4", "number": 1392, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNToxMjoxN1rODtKA_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzozNToyNFrODtorVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Njc2NjA1OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNToxMjoxN1rOF-asJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNToxMjoxN1rOF-asJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk5MzMxNw==", "bodyText": "The precommit may dislike this", "url": "https://github.com/apache/lucene-solr/pull/1392#discussion_r400993317", "createdAt": "2020-03-31T15:12:17Z", "author": {"login": "HoustonPutman"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler.java", "diffHunk": "@@ -24,15 +24,12 @@\n import java.io.Writer;\n import java.lang.invoke.MethodHandles;\n import java.net.Socket;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.Map;\n+import java.nio.charset.StandardCharsets;\n+import java.util.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66270fa70298d6df869b54d7837cfdfdb722465b"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzA3MTY3OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNjoxNzo1OVrOF-ds5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODo1MDowN1rOF_OEZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA0MjY2Mw==", "bodyText": "Looking at the docs here https://zookeeper.apache.org/doc/r3.5.7/zookeeperReconfig.html, in the \"Specifying the client port\" section, it looks like the role of the zk instance is either observer or participant (where participant is the default). Participant isn't a new thing, just a name for a regular member of the ensemble (not an observer).\nThis state check change may be making everything a \"participant\" as that's the default role. Maybe keep the original state logic, but add in an additional check in the beginning to see if the role is observer?", "url": "https://github.com/apache/lucene-solr/pull/1392#discussion_r401042663", "createdAt": "2020-03-31T16:17:59Z", "author": {"login": "HoustonPutman"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler.java", "diffHunk": "@@ -108,27 +128,30 @@ public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throw\n         if (\"true\".equals(String.valueOf(stat.get(\"ok\")))) {\n           numOk++;\n         }\n-        String state = String.valueOf(stat.get(\"zk_server_state\"));\n+        String state = zk.role != null ? zk.role : String.valueOf(stat.get(\"zk_server_state\"));\n         if (\"follower\".equals(state)) {\n           followers++;\n         } else if (\"leader\".equals(state)) {\n           leaders++;\n           reportedFollowers = Integer.parseInt(String.valueOf(stat.get(\"zk_followers\")));\n         } else if (\"standalone\".equals(state)) {\n           standalone++;\n+        } else if (\"participant\".equals(state)) {\n+          // NOCOMMIT: What does participant mean vs leader or follower?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66270fa70298d6df869b54d7837cfdfdb722465b"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgzNTExMQ==", "bodyText": "I confused server state with role. Seems like even in dynamic reconfig mode, the servers report state leader/follower, and can also have a role participant or observer.\nThe only thing I'm not 100% sure about is whether zk_server_state can have the value observer when not in dynamic reconfig mode, cause observer feature pre-dates dynamic reconfig I think. I put it in there as an OR check and count it as follower for now, but it might never get that value.\nI do not generate any WARN/ERROR messages in UI based on number of observers vs participants, as it is allowed to scale down to 1 participant if you like. Not sure what happens if you have 2 participants, is that still \"A Bad Thing\u2122\"? Today we warn if there is an even number of leader/follower, but our code does not yet know about observers. Perhaps we should count participants and WARN if they are even in number, or will ZK handle it gracefully so we don't need to warn?", "url": "https://github.com/apache/lucene-solr/pull/1392#discussion_r401835111", "createdAt": "2020-04-01T18:50:07Z", "author": {"login": "janhoy"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler.java", "diffHunk": "@@ -108,27 +128,30 @@ public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throw\n         if (\"true\".equals(String.valueOf(stat.get(\"ok\")))) {\n           numOk++;\n         }\n-        String state = String.valueOf(stat.get(\"zk_server_state\"));\n+        String state = zk.role != null ? zk.role : String.valueOf(stat.get(\"zk_server_state\"));\n         if (\"follower\".equals(state)) {\n           followers++;\n         } else if (\"leader\".equals(state)) {\n           leaders++;\n           reportedFollowers = Integer.parseInt(String.valueOf(stat.get(\"zk_followers\")));\n         } else if (\"standalone\".equals(state)) {\n           standalone++;\n+        } else if (\"participant\".equals(state)) {\n+          // NOCOMMIT: What does participant mean vs leader or follower?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA0MjY2Mw=="}, "originalCommit": {"oid": "66270fa70298d6df869b54d7837cfdfdb722465b"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzA3MjkwOnYy", "diffSide": "RIGHT", "path": "solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNjoxODoxOFrOF-dtvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNjoxODoxOFrOF-dtvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA0Mjg3Nw==", "bodyText": "precommit issue?", "url": "https://github.com/apache/lucene-solr/pull/1392#discussion_r401042877", "createdAt": "2020-03-31T16:18:18Z", "author": {"login": "HoustonPutman"}, "path": "solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest.java", "diffHunk": "@@ -47,8 +48,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.ArgumentMatchers.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66270fa70298d6df869b54d7837cfdfdb722465b"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzA4OTYzOnYy", "diffSide": "RIGHT", "path": "solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNjoyMjoxMlrOF-d4Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNjoyMjoxMlrOF-d4Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA0NTYwNg==", "bodyText": "these can all likely be final correct?", "url": "https://github.com/apache/lucene-solr/pull/1392#discussion_r401045606", "createdAt": "2020-03-31T16:22:12Z", "author": {"login": "HoustonPutman"}, "path": "solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java", "diffHunk": "@@ -818,6 +834,49 @@ public void downloadFromZK(String zkPath, Path dir) throws IOException {\n     ZkMaintenanceUtils.downloadFromZK(this, zkPath, dir);\n   }\n \n+  /**\n+   * Represents one line in dynamic ZK config\n+   */\n+  public static class ZkConfigDyn {\n+    // server.<positive id> = <address1>:<port1>:<port2>[:role];[<client port address>:]<client port>\n+    public static Pattern linePattern = Pattern.compile(\"server\\\\.(?<serverId>\\\\d+) ?= ?(?<address>[^:]+):(?<leaderPort>\\\\d+):(?<leaderElectionPort>\\\\d+)(:(?<role>.*?))?(;((?<clientPortAddress>.*?):)?(?<clientPort>\\\\d+))?\");\n+    public int serverId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66270fa70298d6df869b54d7837cfdfdb722465b"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTc4OTY2OnYy", "diffSide": "RIGHT", "path": "solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzozNToyNFrOF_LXcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzozNToyNFrOF_LXcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc5MDgzMw==", "bodyText": "I think this should live up here where the reconfig check is done. https://github.com/apache/lucene-solr/pull/1392/files#diff-2f0decb1314fc7f7d3e6e0f497839745R109", "url": "https://github.com/apache/lucene-solr/pull/1392#discussion_r401790833", "createdAt": "2020-04-01T17:35:24Z", "author": {"login": "HoustonPutman"}, "path": "solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler.java", "diffHunk": "@@ -109,25 +133,30 @@ public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throw\n           numOk++;\n         }\n         String state = String.valueOf(stat.get(\"zk_server_state\"));\n-        if (\"follower\".equals(state)) {\n+        if (\"follower\".equals(state) || \"observer\".equals(state)) {\n           followers++;\n         } else if (\"leader\".equals(state)) {\n           leaders++;\n           reportedFollowers = Integer.parseInt(String.valueOf(stat.get(\"zk_followers\")));\n         } else if (\"standalone\".equals(state)) {\n           standalone++;\n         }\n+        if (zk.role != null) {\n+          stat.put(\"role\", zk.role);\n+          dynamicReconfig = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9777985041830b9ec66d3f1d137eb3a258990ce9"}, "originalPosition": 107}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 742, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}