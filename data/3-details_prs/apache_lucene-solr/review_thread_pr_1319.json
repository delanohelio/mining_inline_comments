{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0MTY4NjY5", "number": 1319, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOTo0NzoyMVrODlWrCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxNzoxMzowN1rODmHAVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDk1MzcxOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOTo0NzoyMVrOFyMt6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOTo0NzoyMVrOFyMt6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE4MTQ4MA==", "bodyText": "Wouldn't it be nicer to make it just Closeable and pass IndexWriter in the constructor (instead of each method)?", "url": "https://github.com/apache/lucene-solr/pull/1319#discussion_r388181480", "createdAt": "2020-03-05T09:47:21Z", "author": {"login": "dweiss"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -299,7 +300,70 @@ static int getActualMaxDocs() {\n   final FieldNumbers globalFieldNumberMap;\n \n   final DocumentsWriter docWriter;\n-  private final Queue<Event> eventQueue = new ConcurrentLinkedQueue<>();\n+  private final CloseableQueue eventQueue = new CloseableQueue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9015222b5b7e88d68fae4f0364b40b9b825bccb4"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDM4ODkzOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzowNTozNVrOFzAZwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzowNTozNVrOFzAZwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAyODI4OQ==", "bodyText": "nit: add a new line", "url": "https://github.com/apache/lucene-solr/pull/1319#discussion_r389028289", "createdAt": "2020-03-06T17:05:35Z", "author": {"login": "dnhatn"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -299,7 +300,76 @@ static int getActualMaxDocs() {\n   final FieldNumbers globalFieldNumberMap;\n \n   final DocumentsWriter docWriter;\n-  private final Queue<Event> eventQueue = new ConcurrentLinkedQueue<>();\n+  private final CloseableQueue eventQueue = new CloseableQueue(this);\n+\n+  static final class CloseableQueue implements Closeable {\n+    private volatile boolean closed = false;\n+    private final Semaphore permits = new Semaphore(Integer.MAX_VALUE);\n+    private final Queue<Event> queue = new ConcurrentLinkedQueue<>();\n+    private final IndexWriter writer;\n+\n+    CloseableQueue(IndexWriter writer) {\n+      this.writer = writer;\n+    }\n+\n+    private void tryAcquire() {\n+      if (permits.tryAcquire() == false) {\n+        throw new AlreadyClosedException(\"queue is closed\");\n+      }\n+      if (closed) {\n+        throw new AlreadyClosedException(\"queue is closed\");\n+      }\n+    }\n+\n+    boolean add(Event event) {\n+      tryAcquire();\n+      try {\n+        return queue.add(event);\n+      } finally {\n+        permits.release();\n+      }\n+    }\n+\n+    void processEvents() throws IOException {\n+      tryAcquire();\n+      try {\n+        processEventsInternal();\n+      }finally {\n+        permits.release();\n+      }\n+    }\n+    private void processEventsInternal() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44d03e82dd3d35702ff9bfbe28970bacf91b4921"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDM5MDA3OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzowNTo1OFrOFzAaeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzowNTo1OFrOFzAaeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAyODQ3Mw==", "bodyText": "I am not sure if EventQueue is a better name?", "url": "https://github.com/apache/lucene-solr/pull/1319#discussion_r389028473", "createdAt": "2020-03-06T17:05:58Z", "author": {"login": "dnhatn"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -299,7 +300,76 @@ static int getActualMaxDocs() {\n   final FieldNumbers globalFieldNumberMap;\n \n   final DocumentsWriter docWriter;\n-  private final Queue<Event> eventQueue = new ConcurrentLinkedQueue<>();\n+  private final CloseableQueue eventQueue = new CloseableQueue(this);\n+\n+  static final class CloseableQueue implements Closeable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44d03e82dd3d35702ff9bfbe28970bacf91b4921"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDM5MjUwOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzowNjo0OVrOFzAcDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzowNjo0OVrOFzAcDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAyODg3OQ==", "bodyText": "nit: space after }", "url": "https://github.com/apache/lucene-solr/pull/1319#discussion_r389028879", "createdAt": "2020-03-06T17:06:49Z", "author": {"login": "dnhatn"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -299,7 +300,76 @@ static int getActualMaxDocs() {\n   final FieldNumbers globalFieldNumberMap;\n \n   final DocumentsWriter docWriter;\n-  private final Queue<Event> eventQueue = new ConcurrentLinkedQueue<>();\n+  private final CloseableQueue eventQueue = new CloseableQueue(this);\n+\n+  static final class CloseableQueue implements Closeable {\n+    private volatile boolean closed = false;\n+    private final Semaphore permits = new Semaphore(Integer.MAX_VALUE);\n+    private final Queue<Event> queue = new ConcurrentLinkedQueue<>();\n+    private final IndexWriter writer;\n+\n+    CloseableQueue(IndexWriter writer) {\n+      this.writer = writer;\n+    }\n+\n+    private void tryAcquire() {\n+      if (permits.tryAcquire() == false) {\n+        throw new AlreadyClosedException(\"queue is closed\");\n+      }\n+      if (closed) {\n+        throw new AlreadyClosedException(\"queue is closed\");\n+      }\n+    }\n+\n+    boolean add(Event event) {\n+      tryAcquire();\n+      try {\n+        return queue.add(event);\n+      } finally {\n+        permits.release();\n+      }\n+    }\n+\n+    void processEvents() throws IOException {\n+      tryAcquire();\n+      try {\n+        processEventsInternal();\n+      }finally {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44d03e82dd3d35702ff9bfbe28970bacf91b4921"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDM5NjcxOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzowNzo1MlrOFzAeig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzowNzo1MlrOFzAeig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAyOTUxNA==", "bodyText": "I think we don't need to print the stack trace here.", "url": "https://github.com/apache/lucene-solr/pull/1319#discussion_r389029514", "createdAt": "2020-03-06T17:07:52Z", "author": {"login": "dnhatn"}, "path": "lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.java", "diffHunk": "@@ -3773,7 +3774,58 @@ public void testRefreshAndRollbackConcurrently() throws Exception {\n       stopped.set(true);\n       indexer.join();\n       refresher.join();\n+      if (w.getTragicException() != null) {\n+        w.getTragicException().printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44d03e82dd3d35702ff9bfbe28970bacf91b4921"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjI4MzAyOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QyMTozNTozOVrOFzR1aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QyMTozNTozOVrOFzR1aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMxMzg5Nw==", "bodyText": "No need to i it with false ... this is already the default for Java.", "url": "https://github.com/apache/lucene-solr/pull/1319#discussion_r389313897", "createdAt": "2020-03-07T21:35:39Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -299,7 +300,77 @@ static int getActualMaxDocs() {\n   final FieldNumbers globalFieldNumberMap;\n \n   final DocumentsWriter docWriter;\n-  private final Queue<Event> eventQueue = new ConcurrentLinkedQueue<>();\n+  private final EventQueue eventQueue = new EventQueue(this);\n+\n+  static final class EventQueue implements Closeable {\n+    private volatile boolean closed = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "569e357fe6d4b934793b02e4a977e35d3b56f02e"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjI4MzI5OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QyMTozNjoyN1rOFzR1ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxOToyNDozNlrOFzW82Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMxMzkzMA==", "bodyText": "Hmm should we permits.release before throwing AlreadyClosedException?  Otherwise couldn't we maybe deadlock another thread doing close when it does permits.acquire(Integer.MAX_VALUE)?", "url": "https://github.com/apache/lucene-solr/pull/1319#discussion_r389313930", "createdAt": "2020-03-07T21:36:27Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -299,7 +300,77 @@ static int getActualMaxDocs() {\n   final FieldNumbers globalFieldNumberMap;\n \n   final DocumentsWriter docWriter;\n-  private final Queue<Event> eventQueue = new ConcurrentLinkedQueue<>();\n+  private final EventQueue eventQueue = new EventQueue(this);\n+\n+  static final class EventQueue implements Closeable {\n+    private volatile boolean closed = false;\n+    private final Semaphore permits = new Semaphore(Integer.MAX_VALUE);\n+    private final Queue<Event> queue = new ConcurrentLinkedQueue<>();\n+    private final IndexWriter writer;\n+\n+    EventQueue(IndexWriter writer) {\n+      this.writer = writer;\n+    }\n+\n+    private void tryAcquire() {\n+      if (permits.tryAcquire() == false) {\n+        throw new AlreadyClosedException(\"queue is closed\");\n+      }\n+      if (closed) {\n+        throw new AlreadyClosedException(\"queue is closed\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "569e357fe6d4b934793b02e4a977e35d3b56f02e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM5NDE1Ng==", "bodyText": "Great catch.", "url": "https://github.com/apache/lucene-solr/pull/1319#discussion_r389394156", "createdAt": "2020-03-08T18:35:24Z", "author": {"login": "dnhatn"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -299,7 +300,77 @@ static int getActualMaxDocs() {\n   final FieldNumbers globalFieldNumberMap;\n \n   final DocumentsWriter docWriter;\n-  private final Queue<Event> eventQueue = new ConcurrentLinkedQueue<>();\n+  private final EventQueue eventQueue = new EventQueue(this);\n+\n+  static final class EventQueue implements Closeable {\n+    private volatile boolean closed = false;\n+    private final Semaphore permits = new Semaphore(Integer.MAX_VALUE);\n+    private final Queue<Event> queue = new ConcurrentLinkedQueue<>();\n+    private final IndexWriter writer;\n+\n+    EventQueue(IndexWriter writer) {\n+      this.writer = writer;\n+    }\n+\n+    private void tryAcquire() {\n+      if (permits.tryAcquire() == false) {\n+        throw new AlreadyClosedException(\"queue is closed\");\n+      }\n+      if (closed) {\n+        throw new AlreadyClosedException(\"queue is closed\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMxMzkzMA=="}, "originalCommit": {"oid": "569e357fe6d4b934793b02e4a977e35d3b56f02e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM5NzcyMQ==", "bodyText": "I added a test to ensure this works", "url": "https://github.com/apache/lucene-solr/pull/1319#discussion_r389397721", "createdAt": "2020-03-08T19:24:36Z", "author": {"login": "s1monw"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -299,7 +300,77 @@ static int getActualMaxDocs() {\n   final FieldNumbers globalFieldNumberMap;\n \n   final DocumentsWriter docWriter;\n-  private final Queue<Event> eventQueue = new ConcurrentLinkedQueue<>();\n+  private final EventQueue eventQueue = new EventQueue(this);\n+\n+  static final class EventQueue implements Closeable {\n+    private volatile boolean closed = false;\n+    private final Semaphore permits = new Semaphore(Integer.MAX_VALUE);\n+    private final Queue<Event> queue = new ConcurrentLinkedQueue<>();\n+    private final IndexWriter writer;\n+\n+    EventQueue(IndexWriter writer) {\n+      this.writer = writer;\n+    }\n+\n+    private void tryAcquire() {\n+      if (permits.tryAcquire() == false) {\n+        throw new AlreadyClosedException(\"queue is closed\");\n+      }\n+      if (closed) {\n+        throw new AlreadyClosedException(\"queue is closed\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMxMzkzMA=="}, "originalCommit": {"oid": "569e357fe6d4b934793b02e4a977e35d3b56f02e"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjg2NzM4OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxNzowNTowN1rOFzWUuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxOToxNTo1MVrOFzW6gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM4NzQ0OA==", "bodyText": "Maybe rewrite to assert permits.availablePermits() < Integer.MAX_VALUE for easier readability?", "url": "https://github.com/apache/lucene-solr/pull/1319#discussion_r389387448", "createdAt": "2020-03-08T17:05:07Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -299,7 +300,77 @@ static int getActualMaxDocs() {\n   final FieldNumbers globalFieldNumberMap;\n \n   final DocumentsWriter docWriter;\n-  private final Queue<Event> eventQueue = new ConcurrentLinkedQueue<>();\n+  private final EventQueue eventQueue = new EventQueue(this);\n+\n+  static final class EventQueue implements Closeable {\n+    private volatile boolean closed = false;\n+    private final Semaphore permits = new Semaphore(Integer.MAX_VALUE);\n+    private final Queue<Event> queue = new ConcurrentLinkedQueue<>();\n+    private final IndexWriter writer;\n+\n+    EventQueue(IndexWriter writer) {\n+      this.writer = writer;\n+    }\n+\n+    private void tryAcquire() {\n+      if (permits.tryAcquire() == false) {\n+        throw new AlreadyClosedException(\"queue is closed\");\n+      }\n+      if (closed) {\n+        throw new AlreadyClosedException(\"queue is closed\");\n+      }\n+    }\n+\n+    boolean add(Event event) {\n+      tryAcquire();\n+      try {\n+        return queue.add(event);\n+      } finally {\n+        permits.release();\n+      }\n+    }\n+\n+    void processEvents() throws IOException {\n+      tryAcquire();\n+      try {\n+        processEventsInternal();\n+      } finally {\n+        permits.release();\n+      }\n+    }\n+\n+    private void processEventsInternal() throws IOException {\n+      assert Integer.MAX_VALUE - permits.availablePermits() > 0 : \"must acquire a permit before processing events\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "569e357fe6d4b934793b02e4a977e35d3b56f02e"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM5NzEyMw==", "bodyText": "but this wouldn't catch the case where we didn't acquire any permit?", "url": "https://github.com/apache/lucene-solr/pull/1319#discussion_r389397123", "createdAt": "2020-03-08T19:15:51Z", "author": {"login": "s1monw"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -299,7 +300,77 @@ static int getActualMaxDocs() {\n   final FieldNumbers globalFieldNumberMap;\n \n   final DocumentsWriter docWriter;\n-  private final Queue<Event> eventQueue = new ConcurrentLinkedQueue<>();\n+  private final EventQueue eventQueue = new EventQueue(this);\n+\n+  static final class EventQueue implements Closeable {\n+    private volatile boolean closed = false;\n+    private final Semaphore permits = new Semaphore(Integer.MAX_VALUE);\n+    private final Queue<Event> queue = new ConcurrentLinkedQueue<>();\n+    private final IndexWriter writer;\n+\n+    EventQueue(IndexWriter writer) {\n+      this.writer = writer;\n+    }\n+\n+    private void tryAcquire() {\n+      if (permits.tryAcquire() == false) {\n+        throw new AlreadyClosedException(\"queue is closed\");\n+      }\n+      if (closed) {\n+        throw new AlreadyClosedException(\"queue is closed\");\n+      }\n+    }\n+\n+    boolean add(Event event) {\n+      tryAcquire();\n+      try {\n+        return queue.add(event);\n+      } finally {\n+        permits.release();\n+      }\n+    }\n+\n+    void processEvents() throws IOException {\n+      tryAcquire();\n+      try {\n+        processEventsInternal();\n+      } finally {\n+        permits.release();\n+      }\n+    }\n+\n+    private void processEventsInternal() throws IOException {\n+      assert Integer.MAX_VALUE - permits.availablePermits() > 0 : \"must acquire a permit before processing events\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM4NzQ0OA=="}, "originalCommit": {"oid": "569e357fe6d4b934793b02e4a977e35d3b56f02e"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjg2OTc2OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxNzowODoxOVrOFzWV0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxOToyNDoyMVrOFzW8ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM4NzczMQ==", "bodyText": "Why synchronized here (no other method is synchronized)?  Just to prevent two threads from calling close at once?", "url": "https://github.com/apache/lucene-solr/pull/1319#discussion_r389387731", "createdAt": "2020-03-08T17:08:19Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -299,7 +300,77 @@ static int getActualMaxDocs() {\n   final FieldNumbers globalFieldNumberMap;\n \n   final DocumentsWriter docWriter;\n-  private final Queue<Event> eventQueue = new ConcurrentLinkedQueue<>();\n+  private final EventQueue eventQueue = new EventQueue(this);\n+\n+  static final class EventQueue implements Closeable {\n+    private volatile boolean closed = false;\n+    private final Semaphore permits = new Semaphore(Integer.MAX_VALUE);\n+    private final Queue<Event> queue = new ConcurrentLinkedQueue<>();\n+    private final IndexWriter writer;\n+\n+    EventQueue(IndexWriter writer) {\n+      this.writer = writer;\n+    }\n+\n+    private void tryAcquire() {\n+      if (permits.tryAcquire() == false) {\n+        throw new AlreadyClosedException(\"queue is closed\");\n+      }\n+      if (closed) {\n+        throw new AlreadyClosedException(\"queue is closed\");\n+      }\n+    }\n+\n+    boolean add(Event event) {\n+      tryAcquire();\n+      try {\n+        return queue.add(event);\n+      } finally {\n+        permits.release();\n+      }\n+    }\n+\n+    void processEvents() throws IOException {\n+      tryAcquire();\n+      try {\n+        processEventsInternal();\n+      } finally {\n+        permits.release();\n+      }\n+    }\n+\n+    private void processEventsInternal() throws IOException {\n+      assert Integer.MAX_VALUE - permits.availablePermits() > 0 : \"must acquire a permit before processing events\";\n+      Event event;\n+      while ((event = queue.poll()) != null) {\n+        event.process(writer);\n+      }\n+    }\n+\n+    @Override\n+    public synchronized void close() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "569e357fe6d4b934793b02e4a977e35d3b56f02e"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM5NzY5MA==", "bodyText": "correct", "url": "https://github.com/apache/lucene-solr/pull/1319#discussion_r389397690", "createdAt": "2020-03-08T19:24:21Z", "author": {"login": "s1monw"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -299,7 +300,77 @@ static int getActualMaxDocs() {\n   final FieldNumbers globalFieldNumberMap;\n \n   final DocumentsWriter docWriter;\n-  private final Queue<Event> eventQueue = new ConcurrentLinkedQueue<>();\n+  private final EventQueue eventQueue = new EventQueue(this);\n+\n+  static final class EventQueue implements Closeable {\n+    private volatile boolean closed = false;\n+    private final Semaphore permits = new Semaphore(Integer.MAX_VALUE);\n+    private final Queue<Event> queue = new ConcurrentLinkedQueue<>();\n+    private final IndexWriter writer;\n+\n+    EventQueue(IndexWriter writer) {\n+      this.writer = writer;\n+    }\n+\n+    private void tryAcquire() {\n+      if (permits.tryAcquire() == false) {\n+        throw new AlreadyClosedException(\"queue is closed\");\n+      }\n+      if (closed) {\n+        throw new AlreadyClosedException(\"queue is closed\");\n+      }\n+    }\n+\n+    boolean add(Event event) {\n+      tryAcquire();\n+      try {\n+        return queue.add(event);\n+      } finally {\n+        permits.release();\n+      }\n+    }\n+\n+    void processEvents() throws IOException {\n+      tryAcquire();\n+      try {\n+        processEventsInternal();\n+      } finally {\n+        permits.release();\n+      }\n+    }\n+\n+    private void processEventsInternal() throws IOException {\n+      assert Integer.MAX_VALUE - permits.availablePermits() > 0 : \"must acquire a permit before processing events\";\n+      Event event;\n+      while ((event = queue.poll()) != null) {\n+        event.process(writer);\n+      }\n+    }\n+\n+    @Override\n+    public synchronized void close() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM4NzczMQ=="}, "originalCommit": {"oid": "569e357fe6d4b934793b02e4a977e35d3b56f02e"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjg3MjU1OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxNzoxMzowN1rOFzWXSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxNzoxMzowN1rOFzWXSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM4ODEwNg==", "bodyText": "Can we rename this to acquire?  If it fails, it throws an exception, so upon returning, it always succeeds?", "url": "https://github.com/apache/lucene-solr/pull/1319#discussion_r389388106", "createdAt": "2020-03-08T17:13:07Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -299,7 +300,77 @@ static int getActualMaxDocs() {\n   final FieldNumbers globalFieldNumberMap;\n \n   final DocumentsWriter docWriter;\n-  private final Queue<Event> eventQueue = new ConcurrentLinkedQueue<>();\n+  private final EventQueue eventQueue = new EventQueue(this);\n+\n+  static final class EventQueue implements Closeable {\n+    private volatile boolean closed = false;\n+    private final Semaphore permits = new Semaphore(Integer.MAX_VALUE);\n+    private final Queue<Event> queue = new ConcurrentLinkedQueue<>();\n+    private final IndexWriter writer;\n+\n+    EventQueue(IndexWriter writer) {\n+      this.writer = writer;\n+    }\n+\n+    private void tryAcquire() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "569e357fe6d4b934793b02e4a977e35d3b56f02e"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 850, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}