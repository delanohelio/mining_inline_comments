{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxNjYyMjU2", "number": 1976, "title": "LUCENE-9578: TermRangeQuery empty string lower bound edge case", "bodyText": "Description\nCurrently a TermRangeQuery with the empty String (\"\") as lower bound and\nincludeLower=false leads internally constructs an Automaton that doesn't match\nanything. This is unexpected expecially for open upper bounds where any string\nshould be considered to be \"higher\" than the empty string.\nSolution\nThis PR changes \"Automata#makeBinaryInterval\" so that for an empty string lower\nbound and an open upper bound, any String should match the query regardless or\nthe includeLower flag.\nTests\nAdded two new tests to TestAutomaton.\nChecklist\nPlease review the following and check all that apply:\n\n I have reviewed the guidelines for How to Contribute and my code conforms to the standards described there to the best of my ability.\n I have created a Jira issue and added the issue ID to my pull request title.\n I have given Solr maintainers access to contribute to my PR branch. (optional but recommended)\n I have developed this patch against the master branch.\n I have run ./gradlew check\n I have added tests for my changes.", "createdAt": "2020-10-12T15:48:06Z", "url": "https://github.com/apache/lucene-solr/pull/1976", "merged": true, "mergeCommit": {"oid": "48348aefc1ffdfb44e18c8c45cd64c6dce23837e"}, "closed": true, "closedAt": "2020-10-16T17:01:36Z", "author": {"login": "cbuescher"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdR1UuMgH2gAyNTAxNjYyMjU2OjUyZmZmMTcwYWRkOTIwMDJhMmFmZmFmYTg1MGU5MjJjOTRiOWIzYTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdTC4BkAH2gAyNTAxNjYyMjU2OjRkYjAyMGRiMTJhZTE2NWRiNzgyNGM5ZWIyYTI1NmRiZTlhM2M0MWM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "52fff170add92002a2affafa850e922c94b9b3a6", "author": {"user": {"login": "cbuescher", "name": "Christoph B\u00fcscher"}}, "url": "https://github.com/apache/lucene-solr/commit/52fff170add92002a2affafa850e922c94b9b3a6", "committedDate": "2020-10-12T15:01:33Z", "message": "LUCENE-9578: TermRangeQuery empty string lower bound edge case\n\nCurrently a TermRangeQuery with the empty String (\"\") as lower bound and\nincludeLower=false leads internally constructs an Automaton that doesn't match\nanything. This is unexpected expecially for open upper bounds where any string\nshould be considered to be \"higher\" than the empty string.\n\nThis PR changes \"Automata#makeBinaryInterval\" so that for an empty string lower\nbound and an open upper bound, any String should match the query regardless or\nthe includeLower flag."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2ODAyODY0", "url": "https://github.com/apache/lucene-solr/pull/1976#pullrequestreview-506802864", "createdAt": "2020-10-12T17:35:20Z", "commit": {"oid": "52fff170add92002a2affafa850e922c94b9b3a6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzozNToyMFrOHgHgrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzozNToyMFrOHgHgrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzOTUzNA==", "bodyText": "this looks wrong as we should still make sure that the empty string is rejected if min==\"\" and minInclusive==false?", "url": "https://github.com/apache/lucene-solr/pull/1976#discussion_r503439534", "createdAt": "2020-10-12T17:35:20Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/util/automaton/Automata.java", "diffHunk": "@@ -254,7 +254,7 @@ public static Automaton makeBinaryInterval(BytesRef min, boolean minInclusive, B\n       cmp = min.compareTo(max);\n     } else {\n       cmp = -1;\n-      if (min.length == 0 && minInclusive) {\n+      if (min.length == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52fff170add92002a2affafa850e922c94b9b3a6"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f52c0b0885f785d9eaa056208630d097d2362a4", "author": {"user": {"login": "cbuescher", "name": "Christoph B\u00fcscher"}}, "url": "https://github.com/apache/lucene-solr/commit/3f52c0b0885f785d9eaa056208630d097d2362a4", "committedDate": "2020-10-13T09:42:36Z", "message": "iter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4ODA2ODIx", "url": "https://github.com/apache/lucene-solr/pull/1976#pullrequestreview-508806821", "createdAt": "2020-10-14T22:13:05Z", "commit": {"oid": "3f52c0b0885f785d9eaa056208630d097d2362a4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMjoxMzowNVrOHhnfOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMjoxMzowNVrOHhnfOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTAxMjAyNg==", "bodyText": "I don't think this is right since this only accepts strings of length 1.", "url": "https://github.com/apache/lucene-solr/pull/1976#discussion_r505012026", "createdAt": "2020-10-14T22:13:05Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/util/automaton/Automata.java", "diffHunk": "@@ -85,7 +85,15 @@ public static Automaton makeAnyBinary() {\n     a.finishState();\n     return a;\n   }\n-  \n+\n+  /**\n+   * Returns a new (deterministic) automaton that accepts all binary terms except\n+   * the empty string.\n+   */\n+  public static Automaton makeAnyBinaryExceptEmpty() {\n+    return makeCharRange(0, 255);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f52c0b0885f785d9eaa056208630d097d2362a4"}, "originalPosition": 11}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d6ea1a9fbf32880510208d630b1314f9679e628", "author": {"user": {"login": "cbuescher", "name": "Christoph B\u00fcscher"}}, "url": "https://github.com/apache/lucene-solr/commit/8d6ea1a9fbf32880510208d630b1314f9679e628", "committedDate": "2020-10-15T08:55:58Z", "message": "fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5NzcwMTY4", "url": "https://github.com/apache/lucene-solr/pull/1976#pullrequestreview-509770168", "createdAt": "2020-10-15T20:20:04Z", "commit": {"oid": "8d6ea1a9fbf32880510208d630b1314f9679e628"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMDoyMDowNFrOHiYeYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMDoyMDozNFrOHiYfTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTgxNDYyNA==", "bodyText": "Do we need to call setAccept on s1 too? Or is it done implicitly elsewhere (I'm not completely familiar with the Automaton code)", "url": "https://github.com/apache/lucene-solr/pull/1976#discussion_r505814624", "createdAt": "2020-10-15T20:20:04Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/util/automaton/Automata.java", "diffHunk": "@@ -85,7 +85,22 @@ public static Automaton makeAnyBinary() {\n     a.finishState();\n     return a;\n   }\n-  \n+\n+  /**\n+   * Returns a new (deterministic) automaton that accepts all binary terms except\n+   * the empty string.\n+   */\n+  public static Automaton makeAnyBinaryExceptEmpty() {\n+    Automaton a = new Automaton();\n+    int s1 = a.createState();\n+    int s2 = a.createState();\n+    a.setAccept(s2, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d6ea1a9fbf32880510208d630b1314f9679e628"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTgxNDg2Mw==", "bodyText": "Maybe call makeNonEmptyBinary?", "url": "https://github.com/apache/lucene-solr/pull/1976#discussion_r505814863", "createdAt": "2020-10-15T20:20:34Z", "author": {"login": "jpountz"}, "path": "lucene/core/src/java/org/apache/lucene/util/automaton/Automata.java", "diffHunk": "@@ -85,7 +85,22 @@ public static Automaton makeAnyBinary() {\n     a.finishState();\n     return a;\n   }\n-  \n+\n+  /**\n+   * Returns a new (deterministic) automaton that accepts all binary terms except\n+   * the empty string.\n+   */\n+  public static Automaton makeAnyBinaryExceptEmpty() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d6ea1a9fbf32880510208d630b1314f9679e628"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4db020db12ae165db7824c9eb2a256dbe9a3c41c", "author": {"user": {"login": "cbuescher", "name": "Christoph B\u00fcscher"}}, "url": "https://github.com/apache/lucene-solr/commit/4db020db12ae165db7824c9eb2a256dbe9a3c41c", "committedDate": "2020-10-16T09:22:48Z", "message": "rename method"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2727, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}