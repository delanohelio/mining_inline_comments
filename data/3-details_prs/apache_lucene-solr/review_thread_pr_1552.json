{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3NDE4MDA2", "number": 1552, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjo0NDowNlrOECwj5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNTo0NzoxMlrOEGz14w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzI4MjI4OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjo0NDowNlrOGfac5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjo0NDowNlrOGfac5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU5MjQyMA==", "bodyText": "Maybe for the last sentence: The merges are not cancelled, and will still run to completion independent of the commit like normal segment merges?\nMaybe also state that this setting has no effect unless the MergePolicy actually returns merges from findFullFlushMerges, which the default merge policy does not?", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r435592420", "createdAt": "2020-06-04T22:44:06Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig.java", "diffHunk": "@@ -459,6 +463,31 @@ public IndexWriterConfig setCommitOnClose(boolean commitOnClose) {\n     return this;\n   }\n \n+  /**\n+   * Expert: sets the amount of time to wait for merges returned by MergePolicy.findFullFlushMerges(...).\n+   * If this time is reached, we proceed with the commit based on segments merged up to that point.\n+   * The merges are not cancelled, and may still run to completion independent of the commit.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cab5ef5e6f2bdcda59fd669a298ec1377777af9d"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzI4MjU5OnYy", "diffSide": "RIGHT", "path": "lucene/CHANGES.txt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjo0NDoxMlrOGfadDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjo0NDoxMlrOGfadDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU5MjQ2MA==", "bodyText": "Maybe Add IndexWriter merge-on-commit feature to selectively merge small segments on commit, subject to a configurable timeout, to improve search performance by reducing the number of small segments for searching?", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r435592460", "createdAt": "2020-06-04T22:44:12Z", "author": {"login": "mikemccand"}, "path": "lucene/CHANGES.txt", "diffHunk": "@@ -376,6 +376,8 @@ Improvements\n \n * LUCENE-9253: KoreanTokenizer now supports custom dictionaries(system, unknown). (Namgyu Kim)\n \n+* LUCENE-8962: Add ability to selectively merge on commit (Michael Froh)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cab5ef5e6f2bdcda59fd669a298ec1377777af9d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTU4NDYxOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNDoxMjowNVrOGh2xZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjoyNzoxMlrOGj5sxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE1MzU3NQ==", "bodyText": "this seems unnecessary?", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r438153575", "createdAt": "2020-06-10T14:12:05Z", "author": {"login": "s1monw"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -4483,6 +4593,7 @@ public int length() {\n         // Merge would produce a 0-doc segment, so we do nothing except commit the merge to remove all the 0-doc segments that we \"merged\":\n         assert merge.info.info.maxDoc() == 0;\n         commitMerge(merge, mergeState);\n+        success = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cab5ef5e6f2bdcda59fd669a298ec1377777af9d"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5MjAxNw==", "bodyText": "I think this was a small pre-existing bug.\nI.e. the merge has in fact succeeded on this path.  Before this change we are calling closeMergeReaders twice (once in the line above this, then again on line 4720 below.  Maybe that is harmless, but code-wise I think this path did succeed.\nIf necessary, we could pull this out into its own PR?  But I think it's a good, if subtle, catch.  The merge did succeed in this path.", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r439492017", "createdAt": "2020-06-12T15:34:53Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -4483,6 +4593,7 @@ public int length() {\n         // Merge would produce a 0-doc segment, so we do nothing except commit the merge to remove all the 0-doc segments that we \"merged\":\n         assert merge.info.info.maxDoc() == 0;\n         commitMerge(merge, mergeState);\n+        success = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE1MzU3NQ=="}, "originalCommit": {"oid": "cab5ef5e6f2bdcda59fd669a298ec1377777af9d"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY0NzI2Nw==", "bodyText": "can we fix it in a dedicated PR with a dedicated test? that would also help if we look at the history of the bugfix?", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r439647267", "createdAt": "2020-06-12T21:21:09Z", "author": {"login": "s1monw"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -4483,6 +4593,7 @@ public int length() {\n         // Merge would produce a 0-doc segment, so we do nothing except commit the merge to remove all the 0-doc segments that we \"merged\":\n         assert merge.info.info.maxDoc() == 0;\n         commitMerge(merge, mergeState);\n+        success = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE1MzU3NQ=="}, "originalCommit": {"oid": "cab5ef5e6f2bdcda59fd669a298ec1377777af9d"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI5ODY5NQ==", "bodyText": "Phew, I dit some git archaeology (thanks @msokolov for the pointers!) and uncovered the branch commit for this \"merge small segments on commit\" feature where we added this controversial success = true: cab5ef5\n+1 to pull the bugfix out into its own issue; I will open one.\nThe above commit has a dedicated test case, but the problem is that test case (in the above commit) relies on this new feature (it uses the new MergePolicy.findFullFlushMerges).  So we would need a new test case based on clean master branch showing the bug ... it looks like a test that merged 100% deleted segments ought to then incorrectly double-call closeMergedReaders (first with suppressExceptions = false then again with true) due to this missing success = true so it really should be easy to reproduce.  Though, actually I'm surprised none of our random testing uncovered this.  Not sure I full understand the bug yet :)  I will open an issue!", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r440298695", "createdAt": "2020-06-15T16:27:12Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -4483,6 +4593,7 @@ public int length() {\n         // Merge would produce a 0-doc segment, so we do nothing except commit the merge to remove all the 0-doc segments that we \"merged\":\n         assert merge.info.info.maxDoc() == 0;\n         commitMerge(merge, mergeState);\n+        success = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE1MzU3NQ=="}, "originalCommit": {"oid": "cab5ef5e6f2bdcda59fd669a298ec1377777af9d"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTYwMTQ2OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNDoxNTo0MVrOGh27yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNTo0MDo0NFrOGjIqpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE1NjIzNQ==", "bodyText": "this method is never called in this entire PR. Also the Interface seems to be unused or rather never implemented. I think it should be removed.", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r438156235", "createdAt": "2020-06-10T14:15:41Z", "author": {"login": "s1monw"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig.java", "diffHunk": "@@ -459,6 +463,31 @@ public IndexWriterConfig setCommitOnClose(boolean commitOnClose) {\n     return this;\n   }\n \n+  /**\n+   * Expert: sets the amount of time to wait for merges returned by MergePolicy.findFullFlushMerges(...).\n+   * If this time is reached, we proceed with the commit based on segments merged up to that point.\n+   * The merges are not cancelled, and may still run to completion independent of the commit.\n+   */\n+  public IndexWriterConfig setMaxCommitMergeWaitSeconds(double maxCommitMergeWaitSeconds) {\n+    this.maxCommitMergeWaitSeconds = maxCommitMergeWaitSeconds;\n+    return this;\n+  }\n+\n+  /**\n+   * Set the callback that gets invoked when IndexWriter performs various actions.\n+   */\n+  public IndexWriterConfig setIndexWriterEvents(IndexWriterEvents indexWriterEvents) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cab5ef5e6f2bdcda59fd669a298ec1377777af9d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5NTMzNQ==", "bodyText": "Yeah for sure if we include it in this PR it should be tested by the PR.\nSee my comment above about this.", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r439495335", "createdAt": "2020-06-12T15:40:44Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig.java", "diffHunk": "@@ -459,6 +463,31 @@ public IndexWriterConfig setCommitOnClose(boolean commitOnClose) {\n     return this;\n   }\n \n+  /**\n+   * Expert: sets the amount of time to wait for merges returned by MergePolicy.findFullFlushMerges(...).\n+   * If this time is reached, we proceed with the commit based on segments merged up to that point.\n+   * The merges are not cancelled, and may still run to completion independent of the commit.\n+   */\n+  public IndexWriterConfig setMaxCommitMergeWaitSeconds(double maxCommitMergeWaitSeconds) {\n+    this.maxCommitMergeWaitSeconds = maxCommitMergeWaitSeconds;\n+    return this;\n+  }\n+\n+  /**\n+   * Set the callback that gets invoked when IndexWriter performs various actions.\n+   */\n+  public IndexWriterConfig setIndexWriterEvents(IndexWriterEvents indexWriterEvents) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE1NjIzNQ=="}, "originalCommit": {"oid": "cab5ef5e6f2bdcda59fd669a298ec1377777af9d"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTYyNDY3OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNDoyMDo0MVrOGh3K9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNTo0MDowNVrOGjIpQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE2MDExOQ==", "bodyText": "I really don't like this setting. While I am convinced we should be very very careful adding more settings here, we should if possible use a parameter on a method to pass information like this. I personally would feel much better if we had a new method on IW called prepareCommit(double maxCommitMergeWaitSeconds) Maybe we can even go further and also pass a function to select the merges such that we don't need to add more stuff to mergePolicy?", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r438160119", "createdAt": "2020-06-10T14:20:41Z", "author": {"login": "s1monw"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig.java", "diffHunk": "@@ -459,6 +463,31 @@ public IndexWriterConfig setCommitOnClose(boolean commitOnClose) {\n     return this;\n   }\n \n+  /**\n+   * Expert: sets the amount of time to wait for merges returned by MergePolicy.findFullFlushMerges(...).\n+   * If this time is reached, we proceed with the commit based on segments merged up to that point.\n+   * The merges are not cancelled, and may still run to completion independent of the commit.\n+   */\n+  public IndexWriterConfig setMaxCommitMergeWaitSeconds(double maxCommitMergeWaitSeconds) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cab5ef5e6f2bdcda59fd669a298ec1377777af9d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5NDk3OA==", "bodyText": "I think @msfroh had considered a separate IndexWriter method before but something went wrong with that approach?\nI don't think this should be a separate method, actually.\nWe have a MergePolicy that governs which merges should happen upon which events/triggers and what this change is adding is a new trigger (on commit) at which merging could conceivably occur.  If we added this method, the implication to fresh eyes would be that the existing prepareCommit will also wait for merges with some default parameter, while this new method lets you change the default.\nAnyway, let's hear from @msfroh if there was some wrinkle on making a dedicated method for this, but I still think that's a messy API.  We should rather use our existing MergePolicy API correctly.", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r439494978", "createdAt": "2020-06-12T15:40:05Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig.java", "diffHunk": "@@ -459,6 +463,31 @@ public IndexWriterConfig setCommitOnClose(boolean commitOnClose) {\n     return this;\n   }\n \n+  /**\n+   * Expert: sets the amount of time to wait for merges returned by MergePolicy.findFullFlushMerges(...).\n+   * If this time is reached, we proceed with the commit based on segments merged up to that point.\n+   * The merges are not cancelled, and may still run to completion independent of the commit.\n+   */\n+  public IndexWriterConfig setMaxCommitMergeWaitSeconds(double maxCommitMergeWaitSeconds) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE2MDExOQ=="}, "originalCommit": {"oid": "cab5ef5e6f2bdcda59fd669a298ec1377777af9d"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTY5MjkzOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNDozNDoxMVrOGh33HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNTo0NDozNVrOGjIyfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE3MTQyMQ==", "bodyText": "I am trying to understand why we need to do any extra work here. What makes this special to any other merge such that we need to do all this work. If this needs to be done only if we include this merged segment in the commit, can't we do it outside of this mergeFinished and only use mergeFinished to signal which merge finished in time etc? Then we also might not need the latch construct and can use a simple callback that we can ignore on the commit end?", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r438171421", "createdAt": "2020-06-10T14:34:11Z", "author": {"login": "s1monw"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -3152,6 +3154,42 @@ public final boolean flushNextBuffer() throws IOException {\n     }\n   }\n \n+  private MergePolicy.OneMerge updateSegmentInfosOnMergeFinish(MergePolicy.OneMerge merge, final SegmentInfos toCommit,\n+                                                                AtomicReference<CountDownLatch> mergeLatchRef) {\n+    return new MergePolicy.OneMerge(merge.segments) {\n+      public void mergeFinished() throws IOException {\n+        super.mergeFinished();\n+        CountDownLatch mergeAwaitLatch = mergeLatchRef.get();\n+        if (mergeAwaitLatch == null) {\n+          // Commit thread timed out waiting for this merge and moved on. No need to manipulate toCommit.\n+          return;\n+        }\n+        if (committed) {\n+          deleter.incRef(this.info.files());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cab5ef5e6f2bdcda59fd669a298ec1377777af9d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5NzM0MQ==", "bodyText": "I think @msfroh might remember some context on why he settled on this approach.\nThis is inherently a complex problem: we want to let MergePolicy pick the \"right\" merges to do on commit (the smallish ones).  But, it may pick poorly, or maybe the box is IO starved currently, and so we want to 1) ask MergeScheduler to kick off the merges it had requested, but 2) those merges that complete it time will make it into the commit point, while those that do not will still be allowed to run to completion and be switched in the live SegmentInfos (no wasted work), but will not be in the current commit point.\nAnyway, +1 if we can re-use existing code that \"merges the merged segments\" into a live or the pending commit SegmentInfos.  Maybe we can factor out the common code to reduce the added complexity here?", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r439497341", "createdAt": "2020-06-12T15:44:35Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -3152,6 +3154,42 @@ public final boolean flushNextBuffer() throws IOException {\n     }\n   }\n \n+  private MergePolicy.OneMerge updateSegmentInfosOnMergeFinish(MergePolicy.OneMerge merge, final SegmentInfos toCommit,\n+                                                                AtomicReference<CountDownLatch> mergeLatchRef) {\n+    return new MergePolicy.OneMerge(merge.segments) {\n+      public void mergeFinished() throws IOException {\n+        super.mergeFinished();\n+        CountDownLatch mergeAwaitLatch = mergeLatchRef.get();\n+        if (mergeAwaitLatch == null) {\n+          // Commit thread timed out waiting for this merge and moved on. No need to manipulate toCommit.\n+          return;\n+        }\n+        if (committed) {\n+          deleter.incRef(this.info.files());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE3MTQyMQ=="}, "originalCommit": {"oid": "cab5ef5e6f2bdcda59fd669a298ec1377777af9d"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTcyMTQ3OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNDo0MDowMlrOGh4I6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjoyNzo0NFrOGj5uBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE3NTk3Nw==", "bodyText": "I do wonder if we need all these changes here in such a fragile part of the code. Wouldn't it be possible to simply call maybeMerge(MergePolicy mergePolicy, MergeTrigger trigger, int maxNumSegments) with a MergePolicy wrapper that does all the magic like wrapping segments etc. Then we could pick up the callback idea from above and just wait here until all merges called back? I think we should try to reuse most of the current infrastructure in IW instead of special casing. There was a lot of work put into this to reduce special casing I think we should try hard to reduce it more and try harder to not add any.", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r438175977", "createdAt": "2020-06-10T14:40:02Z", "author": {"login": "s1monw"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -3228,15 +3268,38 @@ private long prepareCommitInternal() throws IOException {\n               // sneak into the commit point:\n               toCommit = segmentInfos.clone();\n \n+              if (anyChanges) {\n+                // Find any merges that can execute on commit (per MergePolicy).\n+                MergePolicy.MergeSpecification mergeSpec =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cab5ef5e6f2bdcda59fd669a298ec1377777af9d"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUwMDQyOA==", "bodyText": "I think what makes this tricky is that this is a combination of MergePolicy (to pick the small merges) and MergeScheduler (to run them and await their completion, subject to a time limit) purposes.\nI do not think you can achieve this by just wrapping in MergePolicy, but I agree it would be better if we could find a simpler way to achieve it.", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r439500428", "createdAt": "2020-06-12T15:50:16Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -3228,15 +3268,38 @@ private long prepareCommitInternal() throws IOException {\n               // sneak into the commit point:\n               toCommit = segmentInfos.clone();\n \n+              if (anyChanges) {\n+                // Find any merges that can execute on commit (per MergePolicy).\n+                MergePolicy.MergeSpecification mergeSpec =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE3NTk3Nw=="}, "originalCommit": {"oid": "cab5ef5e6f2bdcda59fd669a298ec1377777af9d"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY0NzAyNA==", "bodyText": "I tried to showcase this here master...s1monw:LUCENE-8962", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r439647024", "createdAt": "2020-06-12T21:20:24Z", "author": {"login": "s1monw"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -3228,15 +3268,38 @@ private long prepareCommitInternal() throws IOException {\n               // sneak into the commit point:\n               toCommit = segmentInfos.clone();\n \n+              if (anyChanges) {\n+                // Find any merges that can execute on commit (per MergePolicy).\n+                MergePolicy.MergeSpecification mergeSpec =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE3NTk3Nw=="}, "originalCommit": {"oid": "cab5ef5e6f2bdcda59fd669a298ec1377777af9d"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI5OTAxNQ==", "bodyText": "Thanks @s1monw.  I'll review your new PR.", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r440299015", "createdAt": "2020-06-15T16:27:44Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -3228,15 +3268,38 @@ private long prepareCommitInternal() throws IOException {\n               // sneak into the commit point:\n               toCommit = segmentInfos.clone();\n \n+              if (anyChanges) {\n+                // Find any merges that can execute on commit (per MergePolicy).\n+                MergePolicy.MergeSpecification mergeSpec =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE3NTk3Nw=="}, "originalCommit": {"oid": "cab5ef5e6f2bdcda59fd669a298ec1377777af9d"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTcyNTcyOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNDo0MDo0OVrOGh4LjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNTo1NzoxMlrOGj4i2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE3NjY1Mw==", "bodyText": "what is this used for? Can we use testPoints for it if it's necesary?", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r438176653", "createdAt": "2020-06-10T14:40:49Z", "author": {"login": "s1monw"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -3257,6 +3320,52 @@ private long prepareCommitInternal() throws IOException {\n       } finally {\n         maybeCloseOnTragicEvent();\n       }\n+\n+      if (mergeAwaitLatchRef != null) {\n+        CountDownLatch mergeAwaitLatch = mergeAwaitLatchRef.get();\n+        // If we found and registered any merges above, within the flushLock, then we want to ensure that they\n+        // complete execution. Note that since we released the lock, other merges may have been scheduled. We will\n+        // block until  the merges that we registered complete. As they complete, they will update toCommit to\n+        // replace merged segments with the result of each merge.\n+        config.getIndexWriterEvents().beginMergeOnCommit();\n+        mergeScheduler.merge(mergeSource, MergeTrigger.COMMIT);\n+        long mergeWaitStart = System.nanoTime();\n+        int abandonedCount = 0;\n+        long waitTimeMillis = (long) (config.getMaxCommitMergeWaitSeconds() * 1000.0);\n+        try {\n+          if (mergeAwaitLatch.await(waitTimeMillis, TimeUnit.MILLISECONDS) == false) {\n+            synchronized (this) {\n+              // Need to do this in a synchronized block, to make sure none of our commit merges are currently\n+              // executing mergeFinished (since mergeFinished itself is called from within the IndexWriter lock).\n+              // After we clear the value from mergeAwaitLatchRef, the merges we schedule will still execute as\n+              // usual, but when they finish, they won't attempt to update toCommit or modify segment reference\n+              // counts.\n+              mergeAwaitLatchRef.set(null);\n+              for (MergePolicy.OneMerge commitMerge : commitMerges) {\n+                if (runningMerges.contains(commitMerge) || pendingMerges.contains(commitMerge)) {\n+                  abandonedCount++;\n+                }\n+              }\n+            }\n+          }\n+        } catch (InterruptedException ie) {\n+          throw new ThreadInterruptedException(ie);\n+        } finally {\n+          if (infoStream.isEnabled(\"IW\")) {\n+            infoStream.message(\"IW\", String.format(Locale.ROOT, \"Waited %.1f ms for commit merges\",\n+                (System.nanoTime() - mergeWaitStart)/1_000_000.0));\n+            infoStream.message(\"IW\", \"After executing commit merges, had \" + toCommit.size() + \" segments\");\n+            if (abandonedCount > 0) {\n+              infoStream.message(\"IW\", \"Abandoned \" + abandonedCount + \" commit merges after \" + waitTimeMillis + \" ms\");\n+            }\n+          }\n+          if (abandonedCount > 0) {\n+            config.getIndexWriterEvents().abandonedMergesOnCommit(abandonedCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cab5ef5e6f2bdcda59fd669a298ec1377777af9d"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4OTQ4MQ==", "bodyText": "The idea with this is to be able to track externally to IndexWriter how many merges completed during the commit window, how many did not, how long the commit waited for small merges to finish, etc.  This is useful telemetry for understanding how the feature is actually working in your production cluster.  I don't think we can get the equivalent telemetry by e.g. wrapping MergePolicy or MergeScheduler, because it is IndexWriter that knows how long it will wait and knows which merges made it and which did not.\nI think testPoints only run under assertion, and are really designed for unit tests to do interesting things.  But maybe we could somehow abuse it for this use case?\nI agree it should be tested better if we want to include it here.\nIf it is really controversial then +1 to remove the IndexWriterEvents entirely here and pursue it as a separate issue.  It was useful for us (Amazon product search) to understand how this feature impacts our production clusters, and to help us tune a reasonable timeout value.", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r439489481", "createdAt": "2020-06-12T15:30:03Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -3257,6 +3320,52 @@ private long prepareCommitInternal() throws IOException {\n       } finally {\n         maybeCloseOnTragicEvent();\n       }\n+\n+      if (mergeAwaitLatchRef != null) {\n+        CountDownLatch mergeAwaitLatch = mergeAwaitLatchRef.get();\n+        // If we found and registered any merges above, within the flushLock, then we want to ensure that they\n+        // complete execution. Note that since we released the lock, other merges may have been scheduled. We will\n+        // block until  the merges that we registered complete. As they complete, they will update toCommit to\n+        // replace merged segments with the result of each merge.\n+        config.getIndexWriterEvents().beginMergeOnCommit();\n+        mergeScheduler.merge(mergeSource, MergeTrigger.COMMIT);\n+        long mergeWaitStart = System.nanoTime();\n+        int abandonedCount = 0;\n+        long waitTimeMillis = (long) (config.getMaxCommitMergeWaitSeconds() * 1000.0);\n+        try {\n+          if (mergeAwaitLatch.await(waitTimeMillis, TimeUnit.MILLISECONDS) == false) {\n+            synchronized (this) {\n+              // Need to do this in a synchronized block, to make sure none of our commit merges are currently\n+              // executing mergeFinished (since mergeFinished itself is called from within the IndexWriter lock).\n+              // After we clear the value from mergeAwaitLatchRef, the merges we schedule will still execute as\n+              // usual, but when they finish, they won't attempt to update toCommit or modify segment reference\n+              // counts.\n+              mergeAwaitLatchRef.set(null);\n+              for (MergePolicy.OneMerge commitMerge : commitMerges) {\n+                if (runningMerges.contains(commitMerge) || pendingMerges.contains(commitMerge)) {\n+                  abandonedCount++;\n+                }\n+              }\n+            }\n+          }\n+        } catch (InterruptedException ie) {\n+          throw new ThreadInterruptedException(ie);\n+        } finally {\n+          if (infoStream.isEnabled(\"IW\")) {\n+            infoStream.message(\"IW\", String.format(Locale.ROOT, \"Waited %.1f ms for commit merges\",\n+                (System.nanoTime() - mergeWaitStart)/1_000_000.0));\n+            infoStream.message(\"IW\", \"After executing commit merges, had \" + toCommit.size() + \" segments\");\n+            if (abandonedCount > 0) {\n+              infoStream.message(\"IW\", \"Abandoned \" + abandonedCount + \" commit merges after \" + waitTimeMillis + \" ms\");\n+            }\n+          }\n+          if (abandonedCount > 0) {\n+            config.getIndexWriterEvents().abandonedMergesOnCommit(abandonedCount);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE3NjY1Mw=="}, "originalCommit": {"oid": "cab5ef5e6f2bdcda59fd669a298ec1377777af9d"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY0Njg2MQ==", "bodyText": "I think we should detach this discussion if we need metrics on IW from this PR. It distracts from it's actual core change IMO and if'd add metrics then we'd need some more or can consolidate them too. I'd rather have a stats object than a callback here to be honest but again that's a different discussion.", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r439646861", "createdAt": "2020-06-12T21:19:57Z", "author": {"login": "s1monw"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -3257,6 +3320,52 @@ private long prepareCommitInternal() throws IOException {\n       } finally {\n         maybeCloseOnTragicEvent();\n       }\n+\n+      if (mergeAwaitLatchRef != null) {\n+        CountDownLatch mergeAwaitLatch = mergeAwaitLatchRef.get();\n+        // If we found and registered any merges above, within the flushLock, then we want to ensure that they\n+        // complete execution. Note that since we released the lock, other merges may have been scheduled. We will\n+        // block until  the merges that we registered complete. As they complete, they will update toCommit to\n+        // replace merged segments with the result of each merge.\n+        config.getIndexWriterEvents().beginMergeOnCommit();\n+        mergeScheduler.merge(mergeSource, MergeTrigger.COMMIT);\n+        long mergeWaitStart = System.nanoTime();\n+        int abandonedCount = 0;\n+        long waitTimeMillis = (long) (config.getMaxCommitMergeWaitSeconds() * 1000.0);\n+        try {\n+          if (mergeAwaitLatch.await(waitTimeMillis, TimeUnit.MILLISECONDS) == false) {\n+            synchronized (this) {\n+              // Need to do this in a synchronized block, to make sure none of our commit merges are currently\n+              // executing mergeFinished (since mergeFinished itself is called from within the IndexWriter lock).\n+              // After we clear the value from mergeAwaitLatchRef, the merges we schedule will still execute as\n+              // usual, but when they finish, they won't attempt to update toCommit or modify segment reference\n+              // counts.\n+              mergeAwaitLatchRef.set(null);\n+              for (MergePolicy.OneMerge commitMerge : commitMerges) {\n+                if (runningMerges.contains(commitMerge) || pendingMerges.contains(commitMerge)) {\n+                  abandonedCount++;\n+                }\n+              }\n+            }\n+          }\n+        } catch (InterruptedException ie) {\n+          throw new ThreadInterruptedException(ie);\n+        } finally {\n+          if (infoStream.isEnabled(\"IW\")) {\n+            infoStream.message(\"IW\", String.format(Locale.ROOT, \"Waited %.1f ms for commit merges\",\n+                (System.nanoTime() - mergeWaitStart)/1_000_000.0));\n+            infoStream.message(\"IW\", \"After executing commit merges, had \" + toCommit.size() + \" segments\");\n+            if (abandonedCount > 0) {\n+              infoStream.message(\"IW\", \"Abandoned \" + abandonedCount + \" commit merges after \" + waitTimeMillis + \" ms\");\n+            }\n+          }\n+          if (abandonedCount > 0) {\n+            config.getIndexWriterEvents().abandonedMergesOnCommit(abandonedCount);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE3NjY1Mw=="}, "originalCommit": {"oid": "cab5ef5e6f2bdcda59fd669a298ec1377777af9d"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI3OTc3MA==", "bodyText": "OK let's remove this part and leave it for another day.  I'll open a separate issue.", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r440279770", "createdAt": "2020-06-15T15:57:12Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -3257,6 +3320,52 @@ private long prepareCommitInternal() throws IOException {\n       } finally {\n         maybeCloseOnTragicEvent();\n       }\n+\n+      if (mergeAwaitLatchRef != null) {\n+        CountDownLatch mergeAwaitLatch = mergeAwaitLatchRef.get();\n+        // If we found and registered any merges above, within the flushLock, then we want to ensure that they\n+        // complete execution. Note that since we released the lock, other merges may have been scheduled. We will\n+        // block until  the merges that we registered complete. As they complete, they will update toCommit to\n+        // replace merged segments with the result of each merge.\n+        config.getIndexWriterEvents().beginMergeOnCommit();\n+        mergeScheduler.merge(mergeSource, MergeTrigger.COMMIT);\n+        long mergeWaitStart = System.nanoTime();\n+        int abandonedCount = 0;\n+        long waitTimeMillis = (long) (config.getMaxCommitMergeWaitSeconds() * 1000.0);\n+        try {\n+          if (mergeAwaitLatch.await(waitTimeMillis, TimeUnit.MILLISECONDS) == false) {\n+            synchronized (this) {\n+              // Need to do this in a synchronized block, to make sure none of our commit merges are currently\n+              // executing mergeFinished (since mergeFinished itself is called from within the IndexWriter lock).\n+              // After we clear the value from mergeAwaitLatchRef, the merges we schedule will still execute as\n+              // usual, but when they finish, they won't attempt to update toCommit or modify segment reference\n+              // counts.\n+              mergeAwaitLatchRef.set(null);\n+              for (MergePolicy.OneMerge commitMerge : commitMerges) {\n+                if (runningMerges.contains(commitMerge) || pendingMerges.contains(commitMerge)) {\n+                  abandonedCount++;\n+                }\n+              }\n+            }\n+          }\n+        } catch (InterruptedException ie) {\n+          throw new ThreadInterruptedException(ie);\n+        } finally {\n+          if (infoStream.isEnabled(\"IW\")) {\n+            infoStream.message(\"IW\", String.format(Locale.ROOT, \"Waited %.1f ms for commit merges\",\n+                (System.nanoTime() - mergeWaitStart)/1_000_000.0));\n+            infoStream.message(\"IW\", \"After executing commit merges, had \" + toCommit.size() + \" segments\");\n+            if (abandonedCount > 0) {\n+              infoStream.message(\"IW\", \"Abandoned \" + abandonedCount + \" commit merges after \" + waitTimeMillis + \" ms\");\n+            }\n+          }\n+          if (abandonedCount > 0) {\n+            config.getIndexWriterEvents().abandonedMergesOnCommit(abandonedCount);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE3NjY1Mw=="}, "originalCommit": {"oid": "cab5ef5e6f2bdcda59fd669a298ec1377777af9d"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNzg1NjE3OnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNTozNjowNlrOGjIgTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjozMzowNlrOGj56PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5MjY4Ng==", "bodyText": "Maybe 5.0 or 10.0 seconds instead?  A \"typical\" commit, writing new Lucene segments and fsyncing many files can often take several seconds, but 30 seems high.", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r439492686", "createdAt": "2020-06-12T15:36:06Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig.java", "diffHunk": "@@ -109,6 +110,9 @@\n   \n   /** Default value for whether calls to {@link IndexWriter#close()} include a commit. */\n   public final static boolean DEFAULT_COMMIT_ON_CLOSE = true;\n+\n+  /** Default value for time to wait for merges on commit (when using a {@link MergePolicy} that implements findFullFlushMerges). */\n+  public static final double DEFAULT_MAX_COMMIT_MERGE_WAIT_SECONDS = 30.0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cab5ef5e6f2bdcda59fd669a298ec1377777af9d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY0NjMyNg==", "bodyText": "maybe 0 as a default and if somebody want's to wait they can set it?", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r439646326", "createdAt": "2020-06-12T21:18:13Z", "author": {"login": "s1monw"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig.java", "diffHunk": "@@ -109,6 +110,9 @@\n   \n   /** Default value for whether calls to {@link IndexWriter#close()} include a commit. */\n   public final static boolean DEFAULT_COMMIT_ON_CLOSE = true;\n+\n+  /** Default value for time to wait for merges on commit (when using a {@link MergePolicy} that implements findFullFlushMerges). */\n+  public static final double DEFAULT_MAX_COMMIT_MERGE_WAIT_SECONDS = 30.0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5MjY4Ng=="}, "originalCommit": {"oid": "cab5ef5e6f2bdcda59fd669a298ec1377777af9d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY1NzI0MA==", "bodyText": "The success=true added above was needed in order to fix a test failure caught by @dnhatn 's new unit test (testRandomOperations), so they belong together.", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r439657240", "createdAt": "2020-06-12T21:53:30Z", "author": {"login": "msokolov"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig.java", "diffHunk": "@@ -109,6 +110,9 @@\n   \n   /** Default value for whether calls to {@link IndexWriter#close()} include a commit. */\n   public final static boolean DEFAULT_COMMIT_ON_CLOSE = true;\n+\n+  /** Default value for time to wait for merges on commit (when using a {@link MergePolicy} that implements findFullFlushMerges). */\n+  public static final double DEFAULT_MAX_COMMIT_MERGE_WAIT_SECONDS = 30.0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5MjY4Ng=="}, "originalCommit": {"oid": "cab5ef5e6f2bdcda59fd669a298ec1377777af9d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwMjE0MA==", "bodyText": "maybe 0 as a default and if somebody want's to wait they can set it?\n\n+1\nThe feature is already disabled by default anyways (until you implement findFullFlushMerges in your MergePolicy), but making this 0 by default would make it even clearer that the feature is off by default.\n\nThe success=true added above was needed in order to fix a test failure caught by @dnhatn 's new unit test (testRandomOperations), so they belong together.\n\nAhh thanks for the context @msokolov!  However, staring at the code (maybe for not long enough!), it looks like it really ought to be a pre-existing bug, and should be unit-testable without this new feature.  But I am confused why none of our random tests have tripped up on this yet.  I will open a separate Jira issue for this.", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r440302140", "createdAt": "2020-06-15T16:33:06Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig.java", "diffHunk": "@@ -109,6 +110,9 @@\n   \n   /** Default value for whether calls to {@link IndexWriter#close()} include a commit. */\n   public final static boolean DEFAULT_COMMIT_ON_CLOSE = true;\n+\n+  /** Default value for time to wait for merges on commit (when using a {@link MergePolicy} that implements findFullFlushMerges). */\n+  public static final double DEFAULT_MAX_COMMIT_MERGE_WAIT_SECONDS = 30.0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5MjY4Ng=="}, "originalCommit": {"oid": "cab5ef5e6f2bdcda59fd669a298ec1377777af9d"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1Mzg5MzgzOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNzoyOTo1NVrOGli9hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMTo0OTo0N1rOGlrxOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAyMzMwMA==", "bodyText": "the last thing that I am afraid about is what if we has a MergeScheduler configured that blocks on this call like SerialMergeScheduler? I think there are multiple options like: documentation, skipping COMMIT merge triggers in SMS, adding a mergeAsync method to MS that has no impl in SMS... I think we should make sure that this is not trappy.", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r442023300", "createdAt": "2020-06-18T07:29:55Z", "author": {"login": "s1monw"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -3255,7 +3302,16 @@ private long prepareCommitInternal() throws IOException {\n       } finally {\n         maybeCloseOnTragicEvent();\n       }\n-     \n+\n+      if (onCommitMerges != null) {\n+        mergeScheduler.merge(mergeSource, MergeTrigger.COMMIT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "338478ab66998a24b4e71c79b08ce5c9c96cb988"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA0MzA0MA==", "bodyText": "Would it be sufficient to document the behavior in the Javadoc for findFullFlushMerges?\nI was assuming that any implementation of findFullFlushMerges would try to return merges that are very likely to complete within whatever timeout someone would reasonably set (e.g. a few seconds). The timeout was intended just as an extra safeguard in case a merge takes longer.\nGiven that lots of IndexWriter operations can have pauses with SerialMergeScheduler (judging by the number of calls to maybeMerge, especially the one from processEvents, in IndexWriter), blocking on this particular merge call doesn't feel like it introduces more risk (especially since it needs to be used in conjunction with a MergePolicy that implements findFullFlushMerges).", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r442043040", "createdAt": "2020-06-18T08:05:21Z", "author": {"login": "msfroh"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -3255,7 +3302,16 @@ private long prepareCommitInternal() throws IOException {\n       } finally {\n         maybeCloseOnTragicEvent();\n       }\n-     \n+\n+      if (onCommitMerges != null) {\n+        mergeScheduler.merge(mergeSource, MergeTrigger.COMMIT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAyMzMwMA=="}, "originalCommit": {"oid": "338478ab66998a24b4e71c79b08ce5c9c96cb988"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE2NzYwOA==", "bodyText": "yeah I mean we don't have to do that and I think its rather a rare combination. My problem is that this entire configuration of max wait time is nonsense if SerialMS is used since we block until it has merged them all and potentially a bunch of other merges to a commit / refresh could take quite a long time. On the other hand, as you stated we will call maybeMerge anyway in the commit such that it's not really making any difference and the same is true for getReader so I think we are fine as it is.", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r442167608", "createdAt": "2020-06-18T11:49:47Z", "author": {"login": "s1monw"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -3255,7 +3302,16 @@ private long prepareCommitInternal() throws IOException {\n       } finally {\n         maybeCloseOnTragicEvent();\n       }\n-     \n+\n+      if (onCommitMerges != null) {\n+        mergeScheduler.merge(mergeSource, MergeTrigger.COMMIT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAyMzMwMA=="}, "originalCommit": {"oid": "338478ab66998a24b4e71c79b08ce5c9c96cb988"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTc2MjkxOnYy", "diffSide": "RIGHT", "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNTo0NzoxMlrOGl1c1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODoyOToyNVrOGl7TqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyNjIyOQ==", "bodyText": "Oh -- I guess one minor complaint about moving this into prepareCommitInternal is that we won't be able to reuse it (without moving it) if we decide to apply the same logic to IndexWriter.getReader().\nThat said, moving it if/when someone gets around to applying the logic there isn't a big deal. (I think the real work there is reconciling logic from StandardDirectoryReader.open() with logic in IndexWriter.prepareCommitInternal(), since the functionality is kind of duplicated.)", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r442326229", "createdAt": "2020-06-18T15:47:12Z", "author": {"login": "msfroh"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -3226,15 +3235,53 @@ private long prepareCommitInternal() throws IOException {\n               // sneak into the commit point:\n               toCommit = segmentInfos.clone();\n \n+              if (anyChanges && maxCommitMergeWaitSeconds > 0) {\n+                SegmentInfos committingSegmentInfos = toCommit;\n+                onCommitMerges = updatePendingMerges(new OneMergeWrappingMergePolicy(config.getMergePolicy(), toWrap ->\n+                    new MergePolicy.OneMerge(toWrap.segments) {\n+                      @Override\n+                      public void mergeFinished(boolean committed) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a096f76520f222db335f67db694184276832bf3"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyMjE4NQ==", "bodyText": "I like to move stuf once necessary I think we need to adjust it there anyway so we can move it in a followup. ok?", "url": "https://github.com/apache/lucene-solr/pull/1552#discussion_r442422185", "createdAt": "2020-06-18T18:29:25Z", "author": {"login": "s1monw"}, "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -3226,15 +3235,53 @@ private long prepareCommitInternal() throws IOException {\n               // sneak into the commit point:\n               toCommit = segmentInfos.clone();\n \n+              if (anyChanges && maxCommitMergeWaitSeconds > 0) {\n+                SegmentInfos committingSegmentInfos = toCommit;\n+                onCommitMerges = updatePendingMerges(new OneMergeWrappingMergePolicy(config.getMergePolicy(), toWrap ->\n+                    new MergePolicy.OneMerge(toWrap.segments) {\n+                      @Override\n+                      public void mergeFinished(boolean committed) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyNjIyOQ=="}, "originalCommit": {"oid": "0a096f76520f222db335f67db694184276832bf3"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1441, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}