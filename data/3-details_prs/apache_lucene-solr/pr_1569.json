{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzMDI2Mzg5", "number": 1569, "title": "LUCENE-9356: Add a test that verifies that Lucene catches bit flips.", "bodyText": "Opening a reader and then calling checkIntegrity must throw a CorruptIndexException or an IndexFormatToo(Old|New)Exception.", "createdAt": "2020-06-11T11:54:38Z", "url": "https://github.com/apache/lucene-solr/pull/1569", "merged": true, "mergeCommit": {"oid": "36109ec36216141cb0fbf9fb09e9d74721a78bda"}, "closed": true, "closedAt": "2020-06-11T16:09:09Z", "author": {"login": "jpountz"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcqM7QQgH2gAyNDMzMDI2Mzg5OmUyMzFmNjYzNmRmZTk0NzljZjNkZDdmZTNjNWYzOGRjYzExOWZkZjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqOKR4AFqTQyODg5NzQ1OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e231f6636dfe9479cf3dd7fe3c5f38dcc119fdf9", "author": {"user": {"login": "jpountz", "name": "Adrien Grand"}}, "url": "https://github.com/apache/lucene-solr/commit/e231f6636dfe9479cf3dd7fe3c5f38dcc119fdf9", "committedDate": "2020-06-11T11:54:29Z", "message": "LUCENE-9356: Add a test that verifies that Lucene catches bit flips."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b0cf009878c60a203c2b9ca98b5762c2eb0a7cf1", "author": {"user": {"login": "jpountz", "name": "Adrien Grand"}}, "url": "https://github.com/apache/lucene-solr/commit/b0cf009878c60a203c2b9ca98b5762c2eb0a7cf1", "committedDate": "2020-06-11T11:52:45Z", "message": "LUCENE-9356: Add a test that verifies that Lucene catches bit flips."}, "afterCommit": {"oid": "e231f6636dfe9479cf3dd7fe3c5f38dcc119fdf9", "author": {"user": {"login": "jpountz", "name": "Adrien Grand"}}, "url": "https://github.com/apache/lucene-solr/commit/e231f6636dfe9479cf3dd7fe3c5f38dcc119fdf9", "committedDate": "2020-06-11T11:54:29Z", "message": "LUCENE-9356: Add a test that verifies that Lucene catches bit flips."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4ODY3MTky", "url": "https://github.com/apache/lucene-solr/pull/1569#pullrequestreview-428867192", "createdAt": "2020-06-11T12:40:19Z", "commit": {"oid": "e231f6636dfe9479cf3dd7fe3c5f38dcc119fdf9"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjo0MDoxOVrOGibS9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjo0MDoxOVrOGibS9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc1MTk4OA==", "bodyText": "curious if you saw this much?", "url": "https://github.com/apache/lucene-solr/pull/1569#discussion_r438751988", "createdAt": "2020-06-11T12:40:19Z", "author": {"login": "msokolov"}, "path": "lucene/core/src/test/org/apache/lucene/index/TestAllFilesDetectBitFlips.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.index;\n+\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+\n+import org.apache.lucene.analysis.MockAnalyzer;\n+import org.apache.lucene.codecs.CodecUtil;\n+import org.apache.lucene.store.BaseDirectoryWrapper;\n+import org.apache.lucene.store.Directory;\n+import org.apache.lucene.store.IOContext;\n+import org.apache.lucene.store.IndexInput;\n+import org.apache.lucene.store.IndexOutput;\n+import org.apache.lucene.util.LineFileDocs;\n+import org.apache.lucene.util.LuceneTestCase;\n+import org.apache.lucene.util.LuceneTestCase.SuppressFileSystems;\n+import org.apache.lucene.util.TestUtil;\n+\n+/**\n+ * Test that the default codec detects bit flips at open or checkIntegrity time.\n+ */\n+@SuppressFileSystems(\"ExtrasFS\")\n+public class TestAllFilesDetectBitFlips extends LuceneTestCase {\n+\n+  public void test() throws Exception {\n+    doTest(false);\n+  }\n+\n+  public void testCFS() throws Exception {\n+    doTest(true);\n+  }\n+\n+  public void doTest(boolean cfs) throws Exception {\n+    Directory dir = newDirectory();\n+\n+    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n+    conf.setCodec(TestUtil.getDefaultCodec());\n+\n+    if (cfs == false) {\n+      conf.setUseCompoundFile(false);\n+      conf.getMergePolicy().setNoCFSRatio(0.0);\n+    }\n+\n+    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n+    // Use LineFileDocs so we (hopefully) get most Lucene features\n+    // tested, e.g. IntPoint was recently added to it:\n+    LineFileDocs docs = new LineFileDocs(random());\n+    for (int i = 0; i < 100; i++) {\n+      riw.addDocument(docs.nextDoc());\n+      if (random().nextInt(7) == 0) {\n+        riw.commit();\n+      }\n+      if (random().nextInt(20) == 0) {\n+        riw.deleteDocuments(new Term(\"docid\", Integer.toString(i)));\n+      }\n+      if (random().nextInt(15) == 0) {\n+        riw.updateNumericDocValue(new Term(\"docid\", Integer.toString(i)), \"docid_intDV\", Long.valueOf(i));\n+      }\n+    }\n+    if (TEST_NIGHTLY == false) {\n+      riw.forceMerge(1);\n+    }\n+    riw.close();\n+    checkBitFlips(dir);\n+    dir.close();\n+  }\n+  \n+  private void checkBitFlips(Directory dir) throws IOException {\n+    for(String name : dir.listAll()) {\n+      if (name.equals(IndexWriter.WRITE_LOCK_NAME) == false) {\n+        corruptFile(dir, name);\n+      }\n+    }\n+  }\n+  \n+  private void corruptFile(Directory dir, String victim) throws IOException {\n+    try (BaseDirectoryWrapper dirCopy = newDirectory()) {\n+      dirCopy.setCheckIndexOnClose(false);\n+\n+      long victimLength = dir.fileLength(victim);\n+      long flipOffset = TestUtil.nextLong(random(), 0, victimLength - 1);\n+\n+      if (VERBOSE) {\n+        System.out.println(\"TEST: now corrupt file \" + victim + \" by changing byte at offset \" + flipOffset + \" (length= \" + victimLength + \")\");\n+      }\n+\n+      for(String name : dir.listAll()) {\n+        if (name.equals(victim) == false) {\n+          dirCopy.copyFrom(dir, name, name, IOContext.DEFAULT);\n+        } else {\n+          try (IndexOutput out = dirCopy.createOutput(name, IOContext.DEFAULT);\n+              IndexInput in = dir.openInput(name, IOContext.DEFAULT)) {\n+              out.copyBytes(in, flipOffset);\n+              out.writeByte((byte) (in.readByte() + TestUtil.nextInt(random(), 0x01, 0xFF)));\n+              out.copyBytes(in, victimLength - flipOffset - 1);\n+          }\n+          try (IndexInput in = dirCopy.openInput(name, IOContext.DEFAULT)) {\n+            try {\n+              CodecUtil.checksumEntireFile(in);\n+              System.out.println(\"TEST: changing a byte in \" + victim + \" did not update the checksum)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e231f6636dfe9479cf3dd7fe3c5f38dcc119fdf9"}, "originalPosition": 117}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4ODk3NDU5", "url": "https://github.com/apache/lucene-solr/pull/1569#pullrequestreview-428897459", "createdAt": "2020-06-11T13:19:15Z", "commit": {"oid": "e231f6636dfe9479cf3dd7fe3c5f38dcc119fdf9"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzoxOToxNVrOGicq8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzoyMDowNVrOGics1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc3NDUxMg==", "bodyText": "Woohoo!", "url": "https://github.com/apache/lucene-solr/pull/1569#discussion_r438774512", "createdAt": "2020-06-11T13:19:15Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/test/org/apache/lucene/index/TestAllFilesDetectBitFlips.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.index;\n+\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+\n+import org.apache.lucene.analysis.MockAnalyzer;\n+import org.apache.lucene.codecs.CodecUtil;\n+import org.apache.lucene.store.BaseDirectoryWrapper;\n+import org.apache.lucene.store.Directory;\n+import org.apache.lucene.store.IOContext;\n+import org.apache.lucene.store.IndexInput;\n+import org.apache.lucene.store.IndexOutput;\n+import org.apache.lucene.util.LineFileDocs;\n+import org.apache.lucene.util.LuceneTestCase;\n+import org.apache.lucene.util.LuceneTestCase.SuppressFileSystems;\n+import org.apache.lucene.util.TestUtil;\n+\n+/**\n+ * Test that the default codec detects bit flips at open or checkIntegrity time.\n+ */\n+@SuppressFileSystems(\"ExtrasFS\")\n+public class TestAllFilesDetectBitFlips extends LuceneTestCase {\n+\n+  public void test() throws Exception {\n+    doTest(false);\n+  }\n+\n+  public void testCFS() throws Exception {\n+    doTest(true);\n+  }\n+\n+  public void doTest(boolean cfs) throws Exception {\n+    Directory dir = newDirectory();\n+\n+    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n+    conf.setCodec(TestUtil.getDefaultCodec());\n+\n+    if (cfs == false) {\n+      conf.setUseCompoundFile(false);\n+      conf.getMergePolicy().setNoCFSRatio(0.0);\n+    }\n+\n+    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n+    // Use LineFileDocs so we (hopefully) get most Lucene features", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e231f6636dfe9479cf3dd7fe3c5f38dcc119fdf9"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc3NDk5OQ==", "bodyText": "Do you maybe need to exclude extraN files for when ExtraFS randomly strikes?\nEdit: oh, nevermind, I see we suppress ExtraFS above :)", "url": "https://github.com/apache/lucene-solr/pull/1569#discussion_r438774999", "createdAt": "2020-06-11T13:20:05Z", "author": {"login": "mikemccand"}, "path": "lucene/core/src/test/org/apache/lucene/index/TestAllFilesDetectBitFlips.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.index;\n+\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+\n+import org.apache.lucene.analysis.MockAnalyzer;\n+import org.apache.lucene.codecs.CodecUtil;\n+import org.apache.lucene.store.BaseDirectoryWrapper;\n+import org.apache.lucene.store.Directory;\n+import org.apache.lucene.store.IOContext;\n+import org.apache.lucene.store.IndexInput;\n+import org.apache.lucene.store.IndexOutput;\n+import org.apache.lucene.util.LineFileDocs;\n+import org.apache.lucene.util.LuceneTestCase;\n+import org.apache.lucene.util.LuceneTestCase.SuppressFileSystems;\n+import org.apache.lucene.util.TestUtil;\n+\n+/**\n+ * Test that the default codec detects bit flips at open or checkIntegrity time.\n+ */\n+@SuppressFileSystems(\"ExtrasFS\")\n+public class TestAllFilesDetectBitFlips extends LuceneTestCase {\n+\n+  public void test() throws Exception {\n+    doTest(false);\n+  }\n+\n+  public void testCFS() throws Exception {\n+    doTest(true);\n+  }\n+\n+  public void doTest(boolean cfs) throws Exception {\n+    Directory dir = newDirectory();\n+\n+    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n+    conf.setCodec(TestUtil.getDefaultCodec());\n+\n+    if (cfs == false) {\n+      conf.setUseCompoundFile(false);\n+      conf.getMergePolicy().setNoCFSRatio(0.0);\n+    }\n+\n+    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n+    // Use LineFileDocs so we (hopefully) get most Lucene features\n+    // tested, e.g. IntPoint was recently added to it:\n+    LineFileDocs docs = new LineFileDocs(random());\n+    for (int i = 0; i < 100; i++) {\n+      riw.addDocument(docs.nextDoc());\n+      if (random().nextInt(7) == 0) {\n+        riw.commit();\n+      }\n+      if (random().nextInt(20) == 0) {\n+        riw.deleteDocuments(new Term(\"docid\", Integer.toString(i)));\n+      }\n+      if (random().nextInt(15) == 0) {\n+        riw.updateNumericDocValue(new Term(\"docid\", Integer.toString(i)), \"docid_intDV\", Long.valueOf(i));\n+      }\n+    }\n+    if (TEST_NIGHTLY == false) {\n+      riw.forceMerge(1);\n+    }\n+    riw.close();\n+    checkBitFlips(dir);\n+    dir.close();\n+  }\n+  \n+  private void checkBitFlips(Directory dir) throws IOException {\n+    for(String name : dir.listAll()) {\n+      if (name.equals(IndexWriter.WRITE_LOCK_NAME) == false) {\n+        corruptFile(dir, name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e231f6636dfe9479cf3dd7fe3c5f38dcc119fdf9"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2604, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}