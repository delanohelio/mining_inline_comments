{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5Nzc3NDUw", "number": 6258, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjo1MjoxMlrODvpupQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjo1MzozNlrODvpw-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjkzMzQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/importer/fetcher/INSPIREFetcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjo1MjoxMlrOGCM74Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjo1MjoxMlrOGCM74Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk2MjI3Mw==", "bodyText": "Instead of copy-pasting the method, I would extract new URLDownload(getURLForQuery(query)).asInputStream() from https://github.com/JabRef/jabref/blob/master/src/main/java/org/jabref/logic/importer/SearchBasedParserFetcher.java#L58 to a new default method, which you then can overwrite here.", "url": "https://github.com/JabRef/jabref/pull/6258#discussion_r404962273", "createdAt": "2020-04-07T16:52:12Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/logic/importer/fetcher/INSPIREFetcher.java", "diffHunk": "@@ -59,33 +56,38 @@ public String getName() {\n     @Override\n     public URL getURLForQuery(String query) throws URISyntaxException, MalformedURLException, FetcherException {\n         URIBuilder uriBuilder = new URIBuilder(INSPIRE_HOST);\n-        uriBuilder.addParameter(\"p\", query); // Query\n-        //uriBuilder.addParameter(\"jrec\", \"1\"); // Start index (not needed at the moment)\n-        uriBuilder.addParameter(\"rg\", \"100\"); // Should return up to 100 items (instead of default 25)\n-        uriBuilder.addParameter(\"of\", \"hx\"); // BibTeX format\n+        uriBuilder.addParameter(\"q\", query); // Query\n         return uriBuilder.build().toURL();\n     }\n \n     @Override\n-    public Parser getParser() {\n-        // Inspire returns the BibTeX result embedded in HTML\n-        // So we extract the BibTeX string from the <pre>bibtex</pre> tags and pass the content to the BibTeX parser\n-        return inputStream -> {\n-            String response = new BufferedReader(new InputStreamReader(inputStream)).lines().collect(Collectors.joining(OS.NEWLINE));\n+    public List<BibEntry> performSearch(String query) throws FetcherException {\n+        if (StringUtil.isBlank(query)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1244d7dce579408bfa369b4c8b459dc455022687"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjkzNDkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/importer/fetcher/INSPIREFetcher.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjo1MjozMlrOGCM8yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOTo1Mjo0OFrOGFHBiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk2MjUwNw==", "bodyText": "there is no paging support (start + size) for the new interface?", "url": "https://github.com/JabRef/jabref/pull/6258#discussion_r404962507", "createdAt": "2020-04-07T16:52:32Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/logic/importer/fetcher/INSPIREFetcher.java", "diffHunk": "@@ -59,33 +56,38 @@ public String getName() {\n     @Override\n     public URL getURLForQuery(String query) throws URISyntaxException, MalformedURLException, FetcherException {\n         URIBuilder uriBuilder = new URIBuilder(INSPIRE_HOST);\n-        uriBuilder.addParameter(\"p\", query); // Query\n-        //uriBuilder.addParameter(\"jrec\", \"1\"); // Start index (not needed at the moment)\n-        uriBuilder.addParameter(\"rg\", \"100\"); // Should return up to 100 items (instead of default 25)\n-        uriBuilder.addParameter(\"of\", \"hx\"); // BibTeX format\n+        uriBuilder.addParameter(\"q\", query); // Query", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1244d7dce579408bfa369b4c8b459dc455022687"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3MDczNw==", "bodyText": "The json api has support for it, but when calling with the bibtex header not.", "url": "https://github.com/JabRef/jabref/pull/6258#discussion_r404970737", "createdAt": "2020-04-07T17:04:26Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/logic/importer/fetcher/INSPIREFetcher.java", "diffHunk": "@@ -59,33 +56,38 @@ public String getName() {\n     @Override\n     public URL getURLForQuery(String query) throws URISyntaxException, MalformedURLException, FetcherException {\n         URIBuilder uriBuilder = new URIBuilder(INSPIRE_HOST);\n-        uriBuilder.addParameter(\"p\", query); // Query\n-        //uriBuilder.addParameter(\"jrec\", \"1\"); // Start index (not needed at the moment)\n-        uriBuilder.addParameter(\"rg\", \"100\"); // Should return up to 100 items (instead of default 25)\n-        uriBuilder.addParameter(\"of\", \"hx\"); // BibTeX format\n+        uriBuilder.addParameter(\"q\", query); // Query", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk2MjUwNw=="}, "originalCommit": {"oid": "1244d7dce579408bfa369b4c8b459dc455022687"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAwMjEzMQ==", "bodyText": "On my end &size=10&page=2 seems to works fine as of today, not sure about a week ago.", "url": "https://github.com/JabRef/jabref/pull/6258#discussion_r408002131", "createdAt": "2020-04-14T09:38:58Z", "author": {"login": "larsgw"}, "path": "src/main/java/org/jabref/logic/importer/fetcher/INSPIREFetcher.java", "diffHunk": "@@ -59,33 +56,38 @@ public String getName() {\n     @Override\n     public URL getURLForQuery(String query) throws URISyntaxException, MalformedURLException, FetcherException {\n         URIBuilder uriBuilder = new URIBuilder(INSPIRE_HOST);\n-        uriBuilder.addParameter(\"p\", query); // Query\n-        //uriBuilder.addParameter(\"jrec\", \"1\"); // Start index (not needed at the moment)\n-        uriBuilder.addParameter(\"rg\", \"100\"); // Should return up to 100 items (instead of default 25)\n-        uriBuilder.addParameter(\"of\", \"hx\"); // BibTeX format\n+        uriBuilder.addParameter(\"q\", query); // Query", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk2MjUwNw=="}, "originalCommit": {"oid": "1244d7dce579408bfa369b4c8b459dc455022687"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAxMTE0NQ==", "bodyText": "Indeed, this seems to work. I will create a follow up PR", "url": "https://github.com/JabRef/jabref/pull/6258#discussion_r408011145", "createdAt": "2020-04-14T09:52:48Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/logic/importer/fetcher/INSPIREFetcher.java", "diffHunk": "@@ -59,33 +56,38 @@ public String getName() {\n     @Override\n     public URL getURLForQuery(String query) throws URISyntaxException, MalformedURLException, FetcherException {\n         URIBuilder uriBuilder = new URIBuilder(INSPIRE_HOST);\n-        uriBuilder.addParameter(\"p\", query); // Query\n-        //uriBuilder.addParameter(\"jrec\", \"1\"); // Start index (not needed at the moment)\n-        uriBuilder.addParameter(\"rg\", \"100\"); // Should return up to 100 items (instead of default 25)\n-        uriBuilder.addParameter(\"of\", \"hx\"); // BibTeX format\n+        uriBuilder.addParameter(\"q\", query); // Query", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk2MjUwNw=="}, "originalCommit": {"oid": "1244d7dce579408bfa369b4c8b459dc455022687"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjkzNzgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/importer/fetcher/INSPIREFetcher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjo1MzoxMFrOGCM-iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMDozNTowMFrOGE0VDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk2Mjk1Mw==", "bodyText": "Could you please include the link to the documentation of the new api as well.", "url": "https://github.com/JabRef/jabref/pull/6258#discussion_r404962953", "createdAt": "2020-04-07T16:53:10Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/logic/importer/fetcher/INSPIREFetcher.java", "diffHunk": "@@ -1,49 +1,46 @@\n package org.jabref.logic.importer.fetcher;\n \n-import java.io.BufferedReader;\n-import java.io.InputStreamReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n import java.net.MalformedURLException;\n import java.net.URISyntaxException;\n import java.net.URL;\n-import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Optional;\n-import java.util.stream.Collectors;\n \n import org.jabref.logic.formatter.bibtexfields.ClearFormatter;\n import org.jabref.logic.formatter.bibtexfields.RemoveBracesFormatter;\n import org.jabref.logic.help.HelpFile;\n import org.jabref.logic.importer.FetcherException;\n import org.jabref.logic.importer.ImportFormatPreferences;\n+import org.jabref.logic.importer.ParseException;\n import org.jabref.logic.importer.Parser;\n import org.jabref.logic.importer.SearchBasedParserFetcher;\n import org.jabref.logic.importer.fileformat.BibtexParser;\n-import org.jabref.logic.util.OS;\n+import org.jabref.logic.importer.util.MediaTypes;\n+import org.jabref.logic.net.URLDownload;\n import org.jabref.model.cleanup.FieldFormatterCleanup;\n import org.jabref.model.entry.BibEntry;\n import org.jabref.model.entry.field.StandardField;\n import org.jabref.model.entry.field.UnknownField;\n+import org.jabref.model.strings.StringUtil;\n import org.jabref.model.util.DummyFileUpdateMonitor;\n \n import org.apache.http.client.utils.URIBuilder;\n-import org.jsoup.Jsoup;\n-import org.jsoup.nodes.Document;\n-import org.jsoup.nodes.Element;\n-import org.jsoup.select.Elements;\n \n /**\n  * Fetches data from the INSPIRE database.\n  *\n- * @implNote We just use the normal search interface since it provides direct BibTeX export while the API (http://inspirehep.net/info/hep/api) currently only supports JSON and XML\n  */\n public class INSPIREFetcher implements SearchBasedParserFetcher {\n \n-    private static final String INSPIRE_HOST = \"https://inspirehep.net/search\";\n+    private static final String INSPIRE_HOST = \"https://inspirehep.net/api/literature/\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1244d7dce579408bfa369b4c8b459dc455022687"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcwNDg0NQ==", "bodyText": "There is not yet any documentation avaiable. I contacted INSPIRE hep team.", "url": "https://github.com/JabRef/jabref/pull/6258#discussion_r407704845", "createdAt": "2020-04-13T20:35:00Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/logic/importer/fetcher/INSPIREFetcher.java", "diffHunk": "@@ -1,49 +1,46 @@\n package org.jabref.logic.importer.fetcher;\n \n-import java.io.BufferedReader;\n-import java.io.InputStreamReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n import java.net.MalformedURLException;\n import java.net.URISyntaxException;\n import java.net.URL;\n-import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Optional;\n-import java.util.stream.Collectors;\n \n import org.jabref.logic.formatter.bibtexfields.ClearFormatter;\n import org.jabref.logic.formatter.bibtexfields.RemoveBracesFormatter;\n import org.jabref.logic.help.HelpFile;\n import org.jabref.logic.importer.FetcherException;\n import org.jabref.logic.importer.ImportFormatPreferences;\n+import org.jabref.logic.importer.ParseException;\n import org.jabref.logic.importer.Parser;\n import org.jabref.logic.importer.SearchBasedParserFetcher;\n import org.jabref.logic.importer.fileformat.BibtexParser;\n-import org.jabref.logic.util.OS;\n+import org.jabref.logic.importer.util.MediaTypes;\n+import org.jabref.logic.net.URLDownload;\n import org.jabref.model.cleanup.FieldFormatterCleanup;\n import org.jabref.model.entry.BibEntry;\n import org.jabref.model.entry.field.StandardField;\n import org.jabref.model.entry.field.UnknownField;\n+import org.jabref.model.strings.StringUtil;\n import org.jabref.model.util.DummyFileUpdateMonitor;\n \n import org.apache.http.client.utils.URIBuilder;\n-import org.jsoup.Jsoup;\n-import org.jsoup.nodes.Document;\n-import org.jsoup.nodes.Element;\n-import org.jsoup.select.Elements;\n \n /**\n  * Fetches data from the INSPIRE database.\n  *\n- * @implNote We just use the normal search interface since it provides direct BibTeX export while the API (http://inspirehep.net/info/hep/api) currently only supports JSON and XML\n  */\n public class INSPIREFetcher implements SearchBasedParserFetcher {\n \n-    private static final String INSPIRE_HOST = \"https://inspirehep.net/search\";\n+    private static final String INSPIRE_HOST = \"https://inspirehep.net/api/literature/\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk2Mjk1Mw=="}, "originalCommit": {"oid": "1244d7dce579408bfa369b4c8b459dc455022687"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjkzOTQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/openoffice/OOUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjo1MzozNlrOGCM_qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjo1MzozNlrOGCM_qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk2MzI0Mg==", "bodyText": "Is this related to this fix?", "url": "https://github.com/JabRef/jabref/pull/6258#discussion_r404963242", "createdAt": "2020-04-07T16:53:36Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/logic/openoffice/OOUtil.java", "diffHunk": "@@ -227,7 +227,7 @@ public static void insertTextAtCurrentLocation(XText text, XTextCursor cursor, S\n         } */\n         if (formatting.contains(Formatting.SUBSCRIPT)) {\n             xCursorProps.setPropertyValue(CHAR_ESCAPEMENT,\n-                    (byte) -101);\n+                    (byte) -33);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1244d7dce579408bfa369b4c8b459dc455022687"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1898, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}