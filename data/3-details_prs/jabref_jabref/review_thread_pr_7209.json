{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzMTAzNDE0", "number": 7209, "reviewThreads": {"totalCount": 42, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMTo0NDo0M1rOFK3OKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxMDo0Njo1OFrOFR1ulA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTM0ODI2OnYy", "diffSide": "RIGHT", "path": "CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMTo0NDo0M1rOINuypQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMTo0NDo0M1rOINuypQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI2OTAyOQ==", "bodyText": "Add fullstop.", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551269029", "createdAt": "2021-01-04T11:44:43Z", "author": {"login": "tobiasdiez"}, "path": "CHANGELOG.md", "diffHunk": "@@ -12,15 +12,19 @@ Note that this project **does not** adhere to [Semantic Versioning](http://semve\n ### Added\n \n - We added the extension support and the external application support (For Texshow, Texmaker and LyX) to the flatpak [#7248](https://github.com/JabRef/jabref/pull/7248)\n-- We added some symbols and keybindings to the context menu in the entry editor. [#7268]((https://github.com/JabRef/jabref/pull/7268))\n+- We added some symbols and keybindings to the context menu in the entry editor. [#7268](https://github.com/JabRef/jabref/pull/7268)\n \n ### Changed\n \n+- We improved the \"Find unlinked files\" dialog to show import results for each file [#7209](https://github.com/JabRef/jabref/pull/7209)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0466377c7ea3dce53d753f7fd60d7c0ada99279"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTM0OTM2OnYy", "diffSide": "RIGHT", "path": "CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMTo0NTowM1rOINuzQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMTo0NTowM1rOINuzQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI2OTE4Nw==", "bodyText": "Here as well, 2x", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551269187", "createdAt": "2021-01-04T11:45:03Z", "author": {"login": "tobiasdiez"}, "path": "CHANGELOG.md", "diffHunk": "@@ -12,15 +12,19 @@ Note that this project **does not** adhere to [Semantic Versioning](http://semve\n ### Added\n \n - We added the extension support and the external application support (For Texshow, Texmaker and LyX) to the flatpak [#7248](https://github.com/JabRef/jabref/pull/7248)\n-- We added some symbols and keybindings to the context menu in the entry editor. [#7268]((https://github.com/JabRef/jabref/pull/7268))\n+- We added some symbols and keybindings to the context menu in the entry editor. [#7268](https://github.com/JabRef/jabref/pull/7268)\n \n ### Changed\n \n+- We improved the \"Find unlinked files\" dialog to show import results for each file [#7209](https://github.com/JabRef/jabref/pull/7209)\n+\n ### Fixed\n \n - We fixed an issue with the style of highlighted check boxes while searching in preferences. [#7226](https://github.com/JabRef/jabref/issues/7226)\n - We fixed an issue where the option \"Move file to file directory\" was disabled in the entry editor for all files [#7194](https://github.com/JabRef/jabref/issues/7194)\n - We fixed an issue where application dialogs were opening in the wrong display when using multiple screens [#7273](https://github.com/JabRef/jabref/pull/7273)\n+- We fixed an issue where the \"Find unlinked files\" dialog would freeze JabRef on importing [#7205](https://github.com/JabRef/jabref/issues/7205)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0466377c7ea3dce53d753f7fd60d7c0ada99279"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTM2NDgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMTo1MDoxNVrOINu8Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNzowODo1NlrOIOfoAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3MTQ3MA==", "bodyText": "This wrapping is not necessarily:\n\nCalls to updateMessage are coalesced and run later on the FX application thread, so calls to updateMessage, even from the FX Application thread, may not necessarily result in immediate updates to this property, and intermediate message values may be coalesced to save on event notifications.", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551271470", "createdAt": "2021-01-04T11:50:15Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "diffHunk": "@@ -62,40 +71,96 @@ public ExternalFilesEntryLinker getLinker() {\n         return linker;\n     }\n \n-    public void importAsNewEntries(List<Path> files) {\n-        CompoundEdit ce = new CompoundEdit();\n-        for (Path file : files) {\n-            List<BibEntry> entriesToAdd;\n-            if (FileUtil.getFileExtension(file).filter(\"pdf\"::equals).isPresent()) {\n-                List<BibEntry> pdfResult = contentImporter.importPDFContent(file);\n-                List<BibEntry> xmpEntriesInFile = contentImporter.importXMPContent(file);\n-\n-                // First try xmp import, if empty try pdf import, otherwise create empty entry\n-                if (!xmpEntriesInFile.isEmpty()) {\n-                    if (!pdfResult.isEmpty()) {\n-                        // FIXME: Show merge dialog?\n-                        entriesToAdd = xmpEntriesInFile;\n-                    } else {\n-                        entriesToAdd = xmpEntriesInFile;\n+    public BackgroundTask<List<ImportFilesResultItemViewModel>> importFilesInBackground(List<Path> files) {\n+        return new BackgroundTask<>() {\n+\n+            @Override\n+            protected List<ImportFilesResultItemViewModel> call() {\n+                results = new ArrayList<>();\n+                counter = 1;\n+                CompoundEdit ce = new CompoundEdit();\n+                for (int i = 0; i < files.size(); i++) {\n+\n+                    if (isCanceled()) {\n+                        break;\n                     }\n-                } else {\n-                    if (!pdfResult.isEmpty()) {\n-                        entriesToAdd = pdfResult;\n-                    } else {\n-                        entriesToAdd = Collections.singletonList(createEmptyEntryWithLink(file));\n+                    DefaultTaskExecutor.runInJavaFXThread(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0466377c7ea3dce53d753f7fd60d7c0ada99279"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMyNDU5NQ==", "bodyText": "Nope as our BackgroundTask does not perform updates on the FX Task and the bindings will then throw an error", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551324595", "createdAt": "2021-01-04T13:45:02Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "diffHunk": "@@ -62,40 +71,96 @@ public ExternalFilesEntryLinker getLinker() {\n         return linker;\n     }\n \n-    public void importAsNewEntries(List<Path> files) {\n-        CompoundEdit ce = new CompoundEdit();\n-        for (Path file : files) {\n-            List<BibEntry> entriesToAdd;\n-            if (FileUtil.getFileExtension(file).filter(\"pdf\"::equals).isPresent()) {\n-                List<BibEntry> pdfResult = contentImporter.importPDFContent(file);\n-                List<BibEntry> xmpEntriesInFile = contentImporter.importXMPContent(file);\n-\n-                // First try xmp import, if empty try pdf import, otherwise create empty entry\n-                if (!xmpEntriesInFile.isEmpty()) {\n-                    if (!pdfResult.isEmpty()) {\n-                        // FIXME: Show merge dialog?\n-                        entriesToAdd = xmpEntriesInFile;\n-                    } else {\n-                        entriesToAdd = xmpEntriesInFile;\n+    public BackgroundTask<List<ImportFilesResultItemViewModel>> importFilesInBackground(List<Path> files) {\n+        return new BackgroundTask<>() {\n+\n+            @Override\n+            protected List<ImportFilesResultItemViewModel> call() {\n+                results = new ArrayList<>();\n+                counter = 1;\n+                CompoundEdit ce = new CompoundEdit();\n+                for (int i = 0; i < files.size(); i++) {\n+\n+                    if (isCanceled()) {\n+                        break;\n                     }\n-                } else {\n-                    if (!pdfResult.isEmpty()) {\n-                        entriesToAdd = pdfResult;\n-                    } else {\n-                        entriesToAdd = Collections.singletonList(createEmptyEntryWithLink(file));\n+                    DefaultTaskExecutor.runInJavaFXThread(() -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3MTQ3MA=="}, "originalCommit": {"oid": "e0466377c7ea3dce53d753f7fd60d7c0ada99279"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM5NTU3NA==", "bodyText": "Oh, then the background task class should be changed instead!", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551395574", "createdAt": "2021-01-04T15:45:20Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "diffHunk": "@@ -62,40 +71,96 @@ public ExternalFilesEntryLinker getLinker() {\n         return linker;\n     }\n \n-    public void importAsNewEntries(List<Path> files) {\n-        CompoundEdit ce = new CompoundEdit();\n-        for (Path file : files) {\n-            List<BibEntry> entriesToAdd;\n-            if (FileUtil.getFileExtension(file).filter(\"pdf\"::equals).isPresent()) {\n-                List<BibEntry> pdfResult = contentImporter.importPDFContent(file);\n-                List<BibEntry> xmpEntriesInFile = contentImporter.importXMPContent(file);\n-\n-                // First try xmp import, if empty try pdf import, otherwise create empty entry\n-                if (!xmpEntriesInFile.isEmpty()) {\n-                    if (!pdfResult.isEmpty()) {\n-                        // FIXME: Show merge dialog?\n-                        entriesToAdd = xmpEntriesInFile;\n-                    } else {\n-                        entriesToAdd = xmpEntriesInFile;\n+    public BackgroundTask<List<ImportFilesResultItemViewModel>> importFilesInBackground(List<Path> files) {\n+        return new BackgroundTask<>() {\n+\n+            @Override\n+            protected List<ImportFilesResultItemViewModel> call() {\n+                results = new ArrayList<>();\n+                counter = 1;\n+                CompoundEdit ce = new CompoundEdit();\n+                for (int i = 0; i < files.size(); i++) {\n+\n+                    if (isCanceled()) {\n+                        break;\n                     }\n-                } else {\n-                    if (!pdfResult.isEmpty()) {\n-                        entriesToAdd = pdfResult;\n-                    } else {\n-                        entriesToAdd = Collections.singletonList(createEmptyEntryWithLink(file));\n+                    DefaultTaskExecutor.runInJavaFXThread(() -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3MTQ3MA=="}, "originalCommit": {"oid": "e0466377c7ea3dce53d753f7fd60d7c0ada99279"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA2OTEyMQ==", "bodyText": "This may have side effects and is out of scope for this PR.", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r552069121", "createdAt": "2021-01-05T17:08:56Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "diffHunk": "@@ -62,40 +71,96 @@ public ExternalFilesEntryLinker getLinker() {\n         return linker;\n     }\n \n-    public void importAsNewEntries(List<Path> files) {\n-        CompoundEdit ce = new CompoundEdit();\n-        for (Path file : files) {\n-            List<BibEntry> entriesToAdd;\n-            if (FileUtil.getFileExtension(file).filter(\"pdf\"::equals).isPresent()) {\n-                List<BibEntry> pdfResult = contentImporter.importPDFContent(file);\n-                List<BibEntry> xmpEntriesInFile = contentImporter.importXMPContent(file);\n-\n-                // First try xmp import, if empty try pdf import, otherwise create empty entry\n-                if (!xmpEntriesInFile.isEmpty()) {\n-                    if (!pdfResult.isEmpty()) {\n-                        // FIXME: Show merge dialog?\n-                        entriesToAdd = xmpEntriesInFile;\n-                    } else {\n-                        entriesToAdd = xmpEntriesInFile;\n+    public BackgroundTask<List<ImportFilesResultItemViewModel>> importFilesInBackground(List<Path> files) {\n+        return new BackgroundTask<>() {\n+\n+            @Override\n+            protected List<ImportFilesResultItemViewModel> call() {\n+                results = new ArrayList<>();\n+                counter = 1;\n+                CompoundEdit ce = new CompoundEdit();\n+                for (int i = 0; i < files.size(); i++) {\n+\n+                    if (isCanceled()) {\n+                        break;\n                     }\n-                } else {\n-                    if (!pdfResult.isEmpty()) {\n-                        entriesToAdd = pdfResult;\n-                    } else {\n-                        entriesToAdd = Collections.singletonList(createEmptyEntryWithLink(file));\n+                    DefaultTaskExecutor.runInJavaFXThread(() -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3MTQ3MA=="}, "originalCommit": {"oid": "e0466377c7ea3dce53d753f7fd60d7c0ada99279"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTM2OTA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMTo1MTo0NVrOINu-sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQyMTowNDoxNlrOIY1SoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3MjExNQ==", "bodyText": "I think these variables should be local to the BackgroundTask constructed below.", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551272115", "createdAt": "2021-01-04T11:51:45Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "diffHunk": "@@ -27,16 +32,22 @@\n import org.jabref.model.util.FileUpdateMonitor;\n import org.jabref.preferences.PreferencesService;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n public class ImportHandler {\n \n-    private final BibDatabaseContext database;\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ImportHandler.class);\n+    private final BibDatabaseContext bibdatabasecontext;\n     private final PreferencesService preferencesService;\n-    private final DialogService dialogService;\n     private final FileUpdateMonitor fileUpdateMonitor;\n     private final ExternalFilesEntryLinker linker;\n     private final ExternalFilesContentImporter contentImporter;\n     private final UndoManager undoManager;\n     private final StateManager stateManager;\n+    private List<ImportFilesResultItemViewModel> results;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0466377c7ea3dce53d753f7fd60d7c0ada99279"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjUzNDA5Mw==", "bodyText": "Still think this, why did you marked it as \"resolved\"?", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r562534093", "createdAt": "2021-01-22T10:24:54Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "diffHunk": "@@ -27,16 +32,22 @@\n import org.jabref.model.util.FileUpdateMonitor;\n import org.jabref.preferences.PreferencesService;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n public class ImportHandler {\n \n-    private final BibDatabaseContext database;\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ImportHandler.class);\n+    private final BibDatabaseContext bibdatabasecontext;\n     private final PreferencesService preferencesService;\n-    private final DialogService dialogService;\n     private final FileUpdateMonitor fileUpdateMonitor;\n     private final ExternalFilesEntryLinker linker;\n     private final ExternalFilesContentImporter contentImporter;\n     private final UndoManager undoManager;\n     private final StateManager stateManager;\n+    private List<ImportFilesResultItemViewModel> results;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3MjExNQ=="}, "originalCommit": {"oid": "e0466377c7ea3dce53d753f7fd60d7c0ada99279"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjU4MDY5NA==", "bodyText": "As I told you before, it's not possible because they have to be effictively final and also they are used by another method in the class", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r562580694", "createdAt": "2021-01-22T11:52:11Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "diffHunk": "@@ -27,16 +32,22 @@\n import org.jabref.model.util.FileUpdateMonitor;\n import org.jabref.preferences.PreferencesService;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n public class ImportHandler {\n \n-    private final BibDatabaseContext database;\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ImportHandler.class);\n+    private final BibDatabaseContext bibdatabasecontext;\n     private final PreferencesService preferencesService;\n-    private final DialogService dialogService;\n     private final FileUpdateMonitor fileUpdateMonitor;\n     private final ExternalFilesEntryLinker linker;\n     private final ExternalFilesContentImporter contentImporter;\n     private final UndoManager undoManager;\n     private final StateManager stateManager;\n+    private List<ImportFilesResultItemViewModel> results;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3MjExNQ=="}, "originalCommit": {"oid": "e0466377c7ea3dce53d753f7fd60d7c0ada99279"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjkwOTg1Ng==", "bodyText": "The effectively final shouldn't be a problem if they are moved after new BackgroundTask<>() {\nsimilarly the method can be moved there.", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r562909856", "createdAt": "2021-01-22T21:04:16Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "diffHunk": "@@ -27,16 +32,22 @@\n import org.jabref.model.util.FileUpdateMonitor;\n import org.jabref.preferences.PreferencesService;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n public class ImportHandler {\n \n-    private final BibDatabaseContext database;\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ImportHandler.class);\n+    private final BibDatabaseContext bibdatabasecontext;\n     private final PreferencesService preferencesService;\n-    private final DialogService dialogService;\n     private final FileUpdateMonitor fileUpdateMonitor;\n     private final ExternalFilesEntryLinker linker;\n     private final ExternalFilesContentImporter contentImporter;\n     private final UndoManager undoManager;\n     private final StateManager stateManager;\n+    private List<ImportFilesResultItemViewModel> results;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3MjExNQ=="}, "originalCommit": {"oid": "e0466377c7ea3dce53d753f7fd60d7c0ada99279"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTM3MTA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMTo1MjoyNlrOINu_5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMTo1MjoyNlrOINu_5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3MjQyMA==", "bodyText": "bibDatabaseContext? But actually database is totally fine in my opinion", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551272420", "createdAt": "2021-01-04T11:52:26Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "diffHunk": "@@ -46,9 +57,7 @@ public ImportHandler(DialogService dialogService,\n                          UndoManager undoManager,\n                          StateManager stateManager) {\n \n-        this.dialogService = dialogService;\n-        this.database = database;\n-\n+        this.bibdatabasecontext = database;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0466377c7ea3dce53d753f7fd60d7c0ada99279"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTM3MzM2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMTo1MzoyMFrOINvBOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNDoxODozNFrOINzRxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3Mjc2Mw==", "bodyText": "Why use counter here instead of i?", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551272763", "createdAt": "2021-01-04T11:53:20Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "diffHunk": "@@ -62,40 +71,96 @@ public ExternalFilesEntryLinker getLinker() {\n         return linker;\n     }\n \n-    public void importAsNewEntries(List<Path> files) {\n-        CompoundEdit ce = new CompoundEdit();\n-        for (Path file : files) {\n-            List<BibEntry> entriesToAdd;\n-            if (FileUtil.getFileExtension(file).filter(\"pdf\"::equals).isPresent()) {\n-                List<BibEntry> pdfResult = contentImporter.importPDFContent(file);\n-                List<BibEntry> xmpEntriesInFile = contentImporter.importXMPContent(file);\n-\n-                // First try xmp import, if empty try pdf import, otherwise create empty entry\n-                if (!xmpEntriesInFile.isEmpty()) {\n-                    if (!pdfResult.isEmpty()) {\n-                        // FIXME: Show merge dialog?\n-                        entriesToAdd = xmpEntriesInFile;\n-                    } else {\n-                        entriesToAdd = xmpEntriesInFile;\n+    public BackgroundTask<List<ImportFilesResultItemViewModel>> importFilesInBackground(List<Path> files) {\n+        return new BackgroundTask<>() {\n+\n+            @Override\n+            protected List<ImportFilesResultItemViewModel> call() {\n+                results = new ArrayList<>();\n+                counter = 1;\n+                CompoundEdit ce = new CompoundEdit();\n+                for (int i = 0; i < files.size(); i++) {\n+\n+                    if (isCanceled()) {\n+                        break;\n                     }\n-                } else {\n-                    if (!pdfResult.isEmpty()) {\n-                        entriesToAdd = pdfResult;\n-                    } else {\n-                        entriesToAdd = Collections.singletonList(createEmptyEntryWithLink(file));\n+                    DefaultTaskExecutor.runInJavaFXThread(() -> {\n+                        updateMessage(Localization.lang(\"Processing file %0 of %1\", counter, files.size()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0466377c7ea3dce53d753f7fd60d7c0ada99279"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM0MjUzMg==", "bodyText": "Because variables in a lambda have to be effectively final", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551342532", "createdAt": "2021-01-04T14:18:34Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "diffHunk": "@@ -62,40 +71,96 @@ public ExternalFilesEntryLinker getLinker() {\n         return linker;\n     }\n \n-    public void importAsNewEntries(List<Path> files) {\n-        CompoundEdit ce = new CompoundEdit();\n-        for (Path file : files) {\n-            List<BibEntry> entriesToAdd;\n-            if (FileUtil.getFileExtension(file).filter(\"pdf\"::equals).isPresent()) {\n-                List<BibEntry> pdfResult = contentImporter.importPDFContent(file);\n-                List<BibEntry> xmpEntriesInFile = contentImporter.importXMPContent(file);\n-\n-                // First try xmp import, if empty try pdf import, otherwise create empty entry\n-                if (!xmpEntriesInFile.isEmpty()) {\n-                    if (!pdfResult.isEmpty()) {\n-                        // FIXME: Show merge dialog?\n-                        entriesToAdd = xmpEntriesInFile;\n-                    } else {\n-                        entriesToAdd = xmpEntriesInFile;\n+    public BackgroundTask<List<ImportFilesResultItemViewModel>> importFilesInBackground(List<Path> files) {\n+        return new BackgroundTask<>() {\n+\n+            @Override\n+            protected List<ImportFilesResultItemViewModel> call() {\n+                results = new ArrayList<>();\n+                counter = 1;\n+                CompoundEdit ce = new CompoundEdit();\n+                for (int i = 0; i < files.size(); i++) {\n+\n+                    if (isCanceled()) {\n+                        break;\n                     }\n-                } else {\n-                    if (!pdfResult.isEmpty()) {\n-                        entriesToAdd = pdfResult;\n-                    } else {\n-                        entriesToAdd = Collections.singletonList(createEmptyEntryWithLink(file));\n+                    DefaultTaskExecutor.runInJavaFXThread(() -> {\n+                        updateMessage(Localization.lang(\"Processing file %0 of %1\", counter, files.size()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3Mjc2Mw=="}, "originalCommit": {"oid": "e0466377c7ea3dce53d753f7fd60d7c0ada99279"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTM3NzE4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMTo1NDozNVrOINvDkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxMDoyNjowM1rOIYeZqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3MzM2Mg==", "bodyText": "What about showing the name of the file instead? The other information is already included in the pogressbar", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551273362", "createdAt": "2021-01-04T11:54:35Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "diffHunk": "@@ -62,40 +71,96 @@ public ExternalFilesEntryLinker getLinker() {\n         return linker;\n     }\n \n-    public void importAsNewEntries(List<Path> files) {\n-        CompoundEdit ce = new CompoundEdit();\n-        for (Path file : files) {\n-            List<BibEntry> entriesToAdd;\n-            if (FileUtil.getFileExtension(file).filter(\"pdf\"::equals).isPresent()) {\n-                List<BibEntry> pdfResult = contentImporter.importPDFContent(file);\n-                List<BibEntry> xmpEntriesInFile = contentImporter.importXMPContent(file);\n-\n-                // First try xmp import, if empty try pdf import, otherwise create empty entry\n-                if (!xmpEntriesInFile.isEmpty()) {\n-                    if (!pdfResult.isEmpty()) {\n-                        // FIXME: Show merge dialog?\n-                        entriesToAdd = xmpEntriesInFile;\n-                    } else {\n-                        entriesToAdd = xmpEntriesInFile;\n+    public BackgroundTask<List<ImportFilesResultItemViewModel>> importFilesInBackground(List<Path> files) {\n+        return new BackgroundTask<>() {\n+\n+            @Override\n+            protected List<ImportFilesResultItemViewModel> call() {\n+                results = new ArrayList<>();\n+                counter = 1;\n+                CompoundEdit ce = new CompoundEdit();\n+                for (int i = 0; i < files.size(); i++) {\n+\n+                    if (isCanceled()) {\n+                        break;\n                     }\n-                } else {\n-                    if (!pdfResult.isEmpty()) {\n-                        entriesToAdd = pdfResult;\n-                    } else {\n-                        entriesToAdd = Collections.singletonList(createEmptyEntryWithLink(file));\n+                    DefaultTaskExecutor.runInJavaFXThread(() -> {\n+                        updateMessage(Localization.lang(\"Processing file %0 of %1\", counter, files.size()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0466377c7ea3dce53d753f7fd60d7c0ada99279"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjUzNDgyNg==", "bodyText": "Still applies.", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r562534826", "createdAt": "2021-01-22T10:26:03Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "diffHunk": "@@ -62,40 +71,96 @@ public ExternalFilesEntryLinker getLinker() {\n         return linker;\n     }\n \n-    public void importAsNewEntries(List<Path> files) {\n-        CompoundEdit ce = new CompoundEdit();\n-        for (Path file : files) {\n-            List<BibEntry> entriesToAdd;\n-            if (FileUtil.getFileExtension(file).filter(\"pdf\"::equals).isPresent()) {\n-                List<BibEntry> pdfResult = contentImporter.importPDFContent(file);\n-                List<BibEntry> xmpEntriesInFile = contentImporter.importXMPContent(file);\n-\n-                // First try xmp import, if empty try pdf import, otherwise create empty entry\n-                if (!xmpEntriesInFile.isEmpty()) {\n-                    if (!pdfResult.isEmpty()) {\n-                        // FIXME: Show merge dialog?\n-                        entriesToAdd = xmpEntriesInFile;\n-                    } else {\n-                        entriesToAdd = xmpEntriesInFile;\n+    public BackgroundTask<List<ImportFilesResultItemViewModel>> importFilesInBackground(List<Path> files) {\n+        return new BackgroundTask<>() {\n+\n+            @Override\n+            protected List<ImportFilesResultItemViewModel> call() {\n+                results = new ArrayList<>();\n+                counter = 1;\n+                CompoundEdit ce = new CompoundEdit();\n+                for (int i = 0; i < files.size(); i++) {\n+\n+                    if (isCanceled()) {\n+                        break;\n                     }\n-                } else {\n-                    if (!pdfResult.isEmpty()) {\n-                        entriesToAdd = pdfResult;\n-                    } else {\n-                        entriesToAdd = Collections.singletonList(createEmptyEntryWithLink(file));\n+                    DefaultTaskExecutor.runInJavaFXThread(() -> {\n+                        updateMessage(Localization.lang(\"Processing file %0 of %1\", counter, files.size()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3MzM2Mg=="}, "originalCommit": {"oid": "e0466377c7ea3dce53d753f7fd60d7c0ada99279"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTM3OTA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMTo1NToxNlrOINvEnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMTo1NToxNlrOINvEnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3MzYyOQ==", "bodyText": "get(i)?", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551273629", "createdAt": "2021-01-04T11:55:16Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "diffHunk": "@@ -62,40 +71,96 @@ public ExternalFilesEntryLinker getLinker() {\n         return linker;\n     }\n \n-    public void importAsNewEntries(List<Path> files) {\n-        CompoundEdit ce = new CompoundEdit();\n-        for (Path file : files) {\n-            List<BibEntry> entriesToAdd;\n-            if (FileUtil.getFileExtension(file).filter(\"pdf\"::equals).isPresent()) {\n-                List<BibEntry> pdfResult = contentImporter.importPDFContent(file);\n-                List<BibEntry> xmpEntriesInFile = contentImporter.importXMPContent(file);\n-\n-                // First try xmp import, if empty try pdf import, otherwise create empty entry\n-                if (!xmpEntriesInFile.isEmpty()) {\n-                    if (!pdfResult.isEmpty()) {\n-                        // FIXME: Show merge dialog?\n-                        entriesToAdd = xmpEntriesInFile;\n-                    } else {\n-                        entriesToAdd = xmpEntriesInFile;\n+    public BackgroundTask<List<ImportFilesResultItemViewModel>> importFilesInBackground(List<Path> files) {\n+        return new BackgroundTask<>() {\n+\n+            @Override\n+            protected List<ImportFilesResultItemViewModel> call() {\n+                results = new ArrayList<>();\n+                counter = 1;\n+                CompoundEdit ce = new CompoundEdit();\n+                for (int i = 0; i < files.size(); i++) {\n+\n+                    if (isCanceled()) {\n+                        break;\n                     }\n-                } else {\n-                    if (!pdfResult.isEmpty()) {\n-                        entriesToAdd = pdfResult;\n-                    } else {\n-                        entriesToAdd = Collections.singletonList(createEmptyEntryWithLink(file));\n+                    DefaultTaskExecutor.runInJavaFXThread(() -> {\n+                        updateMessage(Localization.lang(\"Processing file %0 of %1\", counter, files.size()));\n+                        updateProgress(counter, files.size() - 1);\n+                    });\n+\n+                    var file = files.get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0466377c7ea3dce53d753f7fd60d7c0ada99279"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTM4NzU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMTo1ODowOFrOINvJlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMTo1ODowOFrOINvJlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3NDkwMg==", "bodyText": "Doesn't this may show an error message, even though later only the xmp information is used anyway? I would resort the code here to call only the import pdf if there is no xmp info", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551274902", "createdAt": "2021-01-04T11:58:08Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "diffHunk": "@@ -62,40 +71,96 @@ public ExternalFilesEntryLinker getLinker() {\n         return linker;\n     }\n \n-    public void importAsNewEntries(List<Path> files) {\n-        CompoundEdit ce = new CompoundEdit();\n-        for (Path file : files) {\n-            List<BibEntry> entriesToAdd;\n-            if (FileUtil.getFileExtension(file).filter(\"pdf\"::equals).isPresent()) {\n-                List<BibEntry> pdfResult = contentImporter.importPDFContent(file);\n-                List<BibEntry> xmpEntriesInFile = contentImporter.importXMPContent(file);\n-\n-                // First try xmp import, if empty try pdf import, otherwise create empty entry\n-                if (!xmpEntriesInFile.isEmpty()) {\n-                    if (!pdfResult.isEmpty()) {\n-                        // FIXME: Show merge dialog?\n-                        entriesToAdd = xmpEntriesInFile;\n-                    } else {\n-                        entriesToAdd = xmpEntriesInFile;\n+    public BackgroundTask<List<ImportFilesResultItemViewModel>> importFilesInBackground(List<Path> files) {\n+        return new BackgroundTask<>() {\n+\n+            @Override\n+            protected List<ImportFilesResultItemViewModel> call() {\n+                results = new ArrayList<>();\n+                counter = 1;\n+                CompoundEdit ce = new CompoundEdit();\n+                for (int i = 0; i < files.size(); i++) {\n+\n+                    if (isCanceled()) {\n+                        break;\n                     }\n-                } else {\n-                    if (!pdfResult.isEmpty()) {\n-                        entriesToAdd = pdfResult;\n-                    } else {\n-                        entriesToAdd = Collections.singletonList(createEmptyEntryWithLink(file));\n+                    DefaultTaskExecutor.runInJavaFXThread(() -> {\n+                        updateMessage(Localization.lang(\"Processing file %0 of %1\", counter, files.size()));\n+                        updateProgress(counter, files.size() - 1);\n+                    });\n+\n+                    var file = files.get(0);\n+                    entriesToAdd = Collections.emptyList();\n+\n+                    try {\n+                        if (FileUtil.getFileExtension(file).filter(\"pdf\"::equals).isPresent()) {\n+\n+                            var pdfImporterResult = contentImporter.importPDFContent(file);\n+                            List<BibEntry> pdfEntriesInFile = pdfImporterResult.getDatabase().getEntries();\n+\n+                            if (pdfImporterResult.hasWarnings()) {\n+                                addResultToList(file, false, Localization.lang(\"Error reading PDF content: %0\", pdfImporterResult.getErrorMessage()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0466377c7ea3dce53d753f7fd60d7c0ada99279"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTM5OTY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMjowMjozMFrOINvQ6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNDoyMDowMFrOINzVHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3Njc3OQ==", "bodyText": "Really? I thought that should actually work. Where do you get deadlocks otherwise?", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551276779", "createdAt": "2021-01-04T12:02:30Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "diffHunk": "@@ -62,40 +71,96 @@ public ExternalFilesEntryLinker getLinker() {\n         return linker;\n     }\n \n-    public void importAsNewEntries(List<Path> files) {\n-        CompoundEdit ce = new CompoundEdit();\n-        for (Path file : files) {\n-            List<BibEntry> entriesToAdd;\n-            if (FileUtil.getFileExtension(file).filter(\"pdf\"::equals).isPresent()) {\n-                List<BibEntry> pdfResult = contentImporter.importPDFContent(file);\n-                List<BibEntry> xmpEntriesInFile = contentImporter.importXMPContent(file);\n-\n-                // First try xmp import, if empty try pdf import, otherwise create empty entry\n-                if (!xmpEntriesInFile.isEmpty()) {\n-                    if (!pdfResult.isEmpty()) {\n-                        // FIXME: Show merge dialog?\n-                        entriesToAdd = xmpEntriesInFile;\n-                    } else {\n-                        entriesToAdd = xmpEntriesInFile;\n+    public BackgroundTask<List<ImportFilesResultItemViewModel>> importFilesInBackground(List<Path> files) {\n+        return new BackgroundTask<>() {\n+\n+            @Override\n+            protected List<ImportFilesResultItemViewModel> call() {\n+                results = new ArrayList<>();\n+                counter = 1;\n+                CompoundEdit ce = new CompoundEdit();\n+                for (int i = 0; i < files.size(); i++) {\n+\n+                    if (isCanceled()) {\n+                        break;\n                     }\n-                } else {\n-                    if (!pdfResult.isEmpty()) {\n-                        entriesToAdd = pdfResult;\n-                    } else {\n-                        entriesToAdd = Collections.singletonList(createEmptyEntryWithLink(file));\n+                    DefaultTaskExecutor.runInJavaFXThread(() -> {\n+                        updateMessage(Localization.lang(\"Processing file %0 of %1\", counter, files.size()));\n+                        updateProgress(counter, files.size() - 1);\n+                    });\n+\n+                    var file = files.get(0);\n+                    entriesToAdd = Collections.emptyList();\n+\n+                    try {\n+                        if (FileUtil.getFileExtension(file).filter(\"pdf\"::equals).isPresent()) {\n+\n+                            var pdfImporterResult = contentImporter.importPDFContent(file);\n+                            List<BibEntry> pdfEntriesInFile = pdfImporterResult.getDatabase().getEntries();\n+\n+                            if (pdfImporterResult.hasWarnings()) {\n+                                addResultToList(file, false, Localization.lang(\"Error reading PDF content: %0\", pdfImporterResult.getErrorMessage()));\n+                            }\n+\n+                            var xmpParserResult = contentImporter.importXMPContent(file);\n+                            List<BibEntry> xmpEntriesInFile = xmpParserResult.getDatabase().getEntries();\n+\n+                            if (xmpParserResult.hasWarnings()) {\n+                                addResultToList(file, false, Localization.lang(\"Error reading XMP content: %0\", xmpParserResult.getErrorMessage()));\n+                            }\n+\n+                            // First try xmp import, if empty try pdf import, otherwise create empty entry\n+                            if (!xmpEntriesInFile.isEmpty()) {\n+                                entriesToAdd = xmpEntriesInFile;\n+                                addResultToList(file, true, Localization.lang(\"Importing using XMP data...\"));\n+                            } else if (!pdfEntriesInFile.isEmpty()) {\n+                                    entriesToAdd = pdfEntriesInFile;\n+                                    addResultToList(file, true, Localization.lang(\"Importing using extracted PDF data\"));\n+                            } else {\n+                                    entriesToAdd = Collections.singletonList(createEmptyEntryWithLink(file));\n+                                    addResultToList(file, false, Localization.lang(\"No metadata found. Creating empty entry with file link\"));\n+                            }\n+                        } else if (FileUtil.isBibFile(file)) {\n+                            var bibtexParserResult = contentImporter.importFromBibFile(file, fileUpdateMonitor);\n+                            if (bibtexParserResult.hasWarnings()) {\n+                                addResultToList(file, false, bibtexParserResult.getErrorMessage());\n+                            }\n+\n+                            entriesToAdd = bibtexParserResult.getDatabaseContext().getEntries();\n+                            addResultToList(file, false, Localization.lang(\"Importing bib entry\"));\n+                        } else {\n+                            entriesToAdd = Collections.singletonList(createEmptyEntryWithLink(file));\n+                            addResultToList(file, false, Localization.lang(\"No bibtex data found. Creating empty entry with file link\"));\n+                        }\n+\n+                    } catch (IOException ex) {\n+                        LOGGER.error(\"Error importing\", ex);\n+                        addResultToList(file, false, Localization.lang(\"Error from import: %0\", ex.getLocalizedMessage()));\n+\n+                        DefaultTaskExecutor.runInJavaFXThread(() -> updateMessage(Localization.lang(\"Error\")));\n                     }\n+\n+                    // We need to run the actual import on the FX Thread, otherwise we will get some deadlocks with the UIThreadList", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0466377c7ea3dce53d753f7fd60d7c0ada99279"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM0MzM4OA==", "bodyText": "I think the deadlock came from the database.insertEntries or so which fires the changed listeners", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551343388", "createdAt": "2021-01-04T14:20:00Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "diffHunk": "@@ -62,40 +71,96 @@ public ExternalFilesEntryLinker getLinker() {\n         return linker;\n     }\n \n-    public void importAsNewEntries(List<Path> files) {\n-        CompoundEdit ce = new CompoundEdit();\n-        for (Path file : files) {\n-            List<BibEntry> entriesToAdd;\n-            if (FileUtil.getFileExtension(file).filter(\"pdf\"::equals).isPresent()) {\n-                List<BibEntry> pdfResult = contentImporter.importPDFContent(file);\n-                List<BibEntry> xmpEntriesInFile = contentImporter.importXMPContent(file);\n-\n-                // First try xmp import, if empty try pdf import, otherwise create empty entry\n-                if (!xmpEntriesInFile.isEmpty()) {\n-                    if (!pdfResult.isEmpty()) {\n-                        // FIXME: Show merge dialog?\n-                        entriesToAdd = xmpEntriesInFile;\n-                    } else {\n-                        entriesToAdd = xmpEntriesInFile;\n+    public BackgroundTask<List<ImportFilesResultItemViewModel>> importFilesInBackground(List<Path> files) {\n+        return new BackgroundTask<>() {\n+\n+            @Override\n+            protected List<ImportFilesResultItemViewModel> call() {\n+                results = new ArrayList<>();\n+                counter = 1;\n+                CompoundEdit ce = new CompoundEdit();\n+                for (int i = 0; i < files.size(); i++) {\n+\n+                    if (isCanceled()) {\n+                        break;\n                     }\n-                } else {\n-                    if (!pdfResult.isEmpty()) {\n-                        entriesToAdd = pdfResult;\n-                    } else {\n-                        entriesToAdd = Collections.singletonList(createEmptyEntryWithLink(file));\n+                    DefaultTaskExecutor.runInJavaFXThread(() -> {\n+                        updateMessage(Localization.lang(\"Processing file %0 of %1\", counter, files.size()));\n+                        updateProgress(counter, files.size() - 1);\n+                    });\n+\n+                    var file = files.get(0);\n+                    entriesToAdd = Collections.emptyList();\n+\n+                    try {\n+                        if (FileUtil.getFileExtension(file).filter(\"pdf\"::equals).isPresent()) {\n+\n+                            var pdfImporterResult = contentImporter.importPDFContent(file);\n+                            List<BibEntry> pdfEntriesInFile = pdfImporterResult.getDatabase().getEntries();\n+\n+                            if (pdfImporterResult.hasWarnings()) {\n+                                addResultToList(file, false, Localization.lang(\"Error reading PDF content: %0\", pdfImporterResult.getErrorMessage()));\n+                            }\n+\n+                            var xmpParserResult = contentImporter.importXMPContent(file);\n+                            List<BibEntry> xmpEntriesInFile = xmpParserResult.getDatabase().getEntries();\n+\n+                            if (xmpParserResult.hasWarnings()) {\n+                                addResultToList(file, false, Localization.lang(\"Error reading XMP content: %0\", xmpParserResult.getErrorMessage()));\n+                            }\n+\n+                            // First try xmp import, if empty try pdf import, otherwise create empty entry\n+                            if (!xmpEntriesInFile.isEmpty()) {\n+                                entriesToAdd = xmpEntriesInFile;\n+                                addResultToList(file, true, Localization.lang(\"Importing using XMP data...\"));\n+                            } else if (!pdfEntriesInFile.isEmpty()) {\n+                                    entriesToAdd = pdfEntriesInFile;\n+                                    addResultToList(file, true, Localization.lang(\"Importing using extracted PDF data\"));\n+                            } else {\n+                                    entriesToAdd = Collections.singletonList(createEmptyEntryWithLink(file));\n+                                    addResultToList(file, false, Localization.lang(\"No metadata found. Creating empty entry with file link\"));\n+                            }\n+                        } else if (FileUtil.isBibFile(file)) {\n+                            var bibtexParserResult = contentImporter.importFromBibFile(file, fileUpdateMonitor);\n+                            if (bibtexParserResult.hasWarnings()) {\n+                                addResultToList(file, false, bibtexParserResult.getErrorMessage());\n+                            }\n+\n+                            entriesToAdd = bibtexParserResult.getDatabaseContext().getEntries();\n+                            addResultToList(file, false, Localization.lang(\"Importing bib entry\"));\n+                        } else {\n+                            entriesToAdd = Collections.singletonList(createEmptyEntryWithLink(file));\n+                            addResultToList(file, false, Localization.lang(\"No bibtex data found. Creating empty entry with file link\"));\n+                        }\n+\n+                    } catch (IOException ex) {\n+                        LOGGER.error(\"Error importing\", ex);\n+                        addResultToList(file, false, Localization.lang(\"Error from import: %0\", ex.getLocalizedMessage()));\n+\n+                        DefaultTaskExecutor.runInJavaFXThread(() -> updateMessage(Localization.lang(\"Error\")));\n                     }\n+\n+                    // We need to run the actual import on the FX Thread, otherwise we will get some deadlocks with the UIThreadList", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3Njc3OQ=="}, "originalCommit": {"oid": "e0466377c7ea3dce53d753f7fd60d7c0ada99279"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTQwMDE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMjowMjo0NFrOINvRNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMjowMjo0NFrOINvRNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3Njg1NQ==", "bodyText": "runinJavafxthread not necessary", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551276855", "createdAt": "2021-01-04T12:02:44Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "diffHunk": "@@ -62,40 +71,96 @@ public ExternalFilesEntryLinker getLinker() {\n         return linker;\n     }\n \n-    public void importAsNewEntries(List<Path> files) {\n-        CompoundEdit ce = new CompoundEdit();\n-        for (Path file : files) {\n-            List<BibEntry> entriesToAdd;\n-            if (FileUtil.getFileExtension(file).filter(\"pdf\"::equals).isPresent()) {\n-                List<BibEntry> pdfResult = contentImporter.importPDFContent(file);\n-                List<BibEntry> xmpEntriesInFile = contentImporter.importXMPContent(file);\n-\n-                // First try xmp import, if empty try pdf import, otherwise create empty entry\n-                if (!xmpEntriesInFile.isEmpty()) {\n-                    if (!pdfResult.isEmpty()) {\n-                        // FIXME: Show merge dialog?\n-                        entriesToAdd = xmpEntriesInFile;\n-                    } else {\n-                        entriesToAdd = xmpEntriesInFile;\n+    public BackgroundTask<List<ImportFilesResultItemViewModel>> importFilesInBackground(List<Path> files) {\n+        return new BackgroundTask<>() {\n+\n+            @Override\n+            protected List<ImportFilesResultItemViewModel> call() {\n+                results = new ArrayList<>();\n+                counter = 1;\n+                CompoundEdit ce = new CompoundEdit();\n+                for (int i = 0; i < files.size(); i++) {\n+\n+                    if (isCanceled()) {\n+                        break;\n                     }\n-                } else {\n-                    if (!pdfResult.isEmpty()) {\n-                        entriesToAdd = pdfResult;\n-                    } else {\n-                        entriesToAdd = Collections.singletonList(createEmptyEntryWithLink(file));\n+                    DefaultTaskExecutor.runInJavaFXThread(() -> {\n+                        updateMessage(Localization.lang(\"Processing file %0 of %1\", counter, files.size()));\n+                        updateProgress(counter, files.size() - 1);\n+                    });\n+\n+                    var file = files.get(0);\n+                    entriesToAdd = Collections.emptyList();\n+\n+                    try {\n+                        if (FileUtil.getFileExtension(file).filter(\"pdf\"::equals).isPresent()) {\n+\n+                            var pdfImporterResult = contentImporter.importPDFContent(file);\n+                            List<BibEntry> pdfEntriesInFile = pdfImporterResult.getDatabase().getEntries();\n+\n+                            if (pdfImporterResult.hasWarnings()) {\n+                                addResultToList(file, false, Localization.lang(\"Error reading PDF content: %0\", pdfImporterResult.getErrorMessage()));\n+                            }\n+\n+                            var xmpParserResult = contentImporter.importXMPContent(file);\n+                            List<BibEntry> xmpEntriesInFile = xmpParserResult.getDatabase().getEntries();\n+\n+                            if (xmpParserResult.hasWarnings()) {\n+                                addResultToList(file, false, Localization.lang(\"Error reading XMP content: %0\", xmpParserResult.getErrorMessage()));\n+                            }\n+\n+                            // First try xmp import, if empty try pdf import, otherwise create empty entry\n+                            if (!xmpEntriesInFile.isEmpty()) {\n+                                entriesToAdd = xmpEntriesInFile;\n+                                addResultToList(file, true, Localization.lang(\"Importing using XMP data...\"));\n+                            } else if (!pdfEntriesInFile.isEmpty()) {\n+                                    entriesToAdd = pdfEntriesInFile;\n+                                    addResultToList(file, true, Localization.lang(\"Importing using extracted PDF data\"));\n+                            } else {\n+                                    entriesToAdd = Collections.singletonList(createEmptyEntryWithLink(file));\n+                                    addResultToList(file, false, Localization.lang(\"No metadata found. Creating empty entry with file link\"));\n+                            }\n+                        } else if (FileUtil.isBibFile(file)) {\n+                            var bibtexParserResult = contentImporter.importFromBibFile(file, fileUpdateMonitor);\n+                            if (bibtexParserResult.hasWarnings()) {\n+                                addResultToList(file, false, bibtexParserResult.getErrorMessage());\n+                            }\n+\n+                            entriesToAdd = bibtexParserResult.getDatabaseContext().getEntries();\n+                            addResultToList(file, false, Localization.lang(\"Importing bib entry\"));\n+                        } else {\n+                            entriesToAdd = Collections.singletonList(createEmptyEntryWithLink(file));\n+                            addResultToList(file, false, Localization.lang(\"No bibtex data found. Creating empty entry with file link\"));\n+                        }\n+\n+                    } catch (IOException ex) {\n+                        LOGGER.error(\"Error importing\", ex);\n+                        addResultToList(file, false, Localization.lang(\"Error from import: %0\", ex.getLocalizedMessage()));\n+\n+                        DefaultTaskExecutor.runInJavaFXThread(() -> updateMessage(Localization.lang(\"Error\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0466377c7ea3dce53d753f7fd60d7c0ada99279"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTQwMjQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMjowMzozM1rOINvSjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMjowMzozM1rOINvSjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3NzE5Ng==", "bodyText": "with what?", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551277196", "createdAt": "2021-01-04T12:03:33Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "diffHunk": "@@ -62,40 +71,96 @@ public ExternalFilesEntryLinker getLinker() {\n         return linker;\n     }\n \n-    public void importAsNewEntries(List<Path> files) {\n-        CompoundEdit ce = new CompoundEdit();\n-        for (Path file : files) {\n-            List<BibEntry> entriesToAdd;\n-            if (FileUtil.getFileExtension(file).filter(\"pdf\"::equals).isPresent()) {\n-                List<BibEntry> pdfResult = contentImporter.importPDFContent(file);\n-                List<BibEntry> xmpEntriesInFile = contentImporter.importXMPContent(file);\n-\n-                // First try xmp import, if empty try pdf import, otherwise create empty entry\n-                if (!xmpEntriesInFile.isEmpty()) {\n-                    if (!pdfResult.isEmpty()) {\n-                        // FIXME: Show merge dialog?\n-                        entriesToAdd = xmpEntriesInFile;\n-                    } else {\n-                        entriesToAdd = xmpEntriesInFile;\n+    public BackgroundTask<List<ImportFilesResultItemViewModel>> importFilesInBackground(List<Path> files) {\n+        return new BackgroundTask<>() {\n+\n+            @Override\n+            protected List<ImportFilesResultItemViewModel> call() {\n+                results = new ArrayList<>();\n+                counter = 1;\n+                CompoundEdit ce = new CompoundEdit();\n+                for (int i = 0; i < files.size(); i++) {\n+\n+                    if (isCanceled()) {\n+                        break;\n                     }\n-                } else {\n-                    if (!pdfResult.isEmpty()) {\n-                        entriesToAdd = pdfResult;\n-                    } else {\n-                        entriesToAdd = Collections.singletonList(createEmptyEntryWithLink(file));\n+                    DefaultTaskExecutor.runInJavaFXThread(() -> {\n+                        updateMessage(Localization.lang(\"Processing file %0 of %1\", counter, files.size()));\n+                        updateProgress(counter, files.size() - 1);\n+                    });\n+\n+                    var file = files.get(0);\n+                    entriesToAdd = Collections.emptyList();\n+\n+                    try {\n+                        if (FileUtil.getFileExtension(file).filter(\"pdf\"::equals).isPresent()) {\n+\n+                            var pdfImporterResult = contentImporter.importPDFContent(file);\n+                            List<BibEntry> pdfEntriesInFile = pdfImporterResult.getDatabase().getEntries();\n+\n+                            if (pdfImporterResult.hasWarnings()) {\n+                                addResultToList(file, false, Localization.lang(\"Error reading PDF content: %0\", pdfImporterResult.getErrorMessage()));\n+                            }\n+\n+                            var xmpParserResult = contentImporter.importXMPContent(file);\n+                            List<BibEntry> xmpEntriesInFile = xmpParserResult.getDatabase().getEntries();\n+\n+                            if (xmpParserResult.hasWarnings()) {\n+                                addResultToList(file, false, Localization.lang(\"Error reading XMP content: %0\", xmpParserResult.getErrorMessage()));\n+                            }\n+\n+                            // First try xmp import, if empty try pdf import, otherwise create empty entry\n+                            if (!xmpEntriesInFile.isEmpty()) {\n+                                entriesToAdd = xmpEntriesInFile;\n+                                addResultToList(file, true, Localization.lang(\"Importing using XMP data...\"));\n+                            } else if (!pdfEntriesInFile.isEmpty()) {\n+                                    entriesToAdd = pdfEntriesInFile;\n+                                    addResultToList(file, true, Localization.lang(\"Importing using extracted PDF data\"));\n+                            } else {\n+                                    entriesToAdd = Collections.singletonList(createEmptyEntryWithLink(file));\n+                                    addResultToList(file, false, Localization.lang(\"No metadata found. Creating empty entry with file link\"));\n+                            }\n+                        } else if (FileUtil.isBibFile(file)) {\n+                            var bibtexParserResult = contentImporter.importFromBibFile(file, fileUpdateMonitor);\n+                            if (bibtexParserResult.hasWarnings()) {\n+                                addResultToList(file, false, bibtexParserResult.getErrorMessage());\n+                            }\n+\n+                            entriesToAdd = bibtexParserResult.getDatabaseContext().getEntries();\n+                            addResultToList(file, false, Localization.lang(\"Importing bib entry\"));\n+                        } else {\n+                            entriesToAdd = Collections.singletonList(createEmptyEntryWithLink(file));\n+                            addResultToList(file, false, Localization.lang(\"No bibtex data found. Creating empty entry with file link\"));\n+                        }\n+\n+                    } catch (IOException ex) {\n+                        LOGGER.error(\"Error importing\", ex);\n+                        addResultToList(file, false, Localization.lang(\"Error from import: %0\", ex.getLocalizedMessage()));\n+\n+                        DefaultTaskExecutor.runInJavaFXThread(() -> updateMessage(Localization.lang(\"Error\")));\n                     }\n+\n+                    // We need to run the actual import on the FX Thread, otherwise we will get some deadlocks with the UIThreadList\n+                    DefaultTaskExecutor.runInJavaFXThread(() -> importEntries(entriesToAdd));\n+\n+                    ce.addEdit(new UndoableInsertEntries(bibdatabasecontext.getDatabase(), entriesToAdd));\n+                    ce.end();\n+                    undoManager.addEdit(ce);\n+\n+                    counter++;\n                 }\n-            } else if (FileUtil.isBibFile(file)) {\n-                entriesToAdd = contentImporter.importFromBibFile(file, fileUpdateMonitor);\n-            } else {\n-                entriesToAdd = Collections.singletonList(createEmptyEntryWithLink(file));\n+                return results;\n             }\n+        };\n+    }\n \n-            importEntries(entriesToAdd);\n-            ce.addEdit(new UndoableInsertEntries(database.getDatabase(), entriesToAdd));\n-        }\n-        ce.end();\n-        undoManager.addEdit(ce);\n+    private void addResultToList(Path newFile, boolean success, String logMessage) {\n+        var result = new ImportFilesResultItemViewModel(newFile, success, logMessage);\n+        results.add(result);\n+    }\n+\n+    public void importAsNewEntries(List<Path> files) {\n+        // Will be replaced", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0466377c7ea3dce53d753f7fd60d7c0ada99279"}, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTQwNTg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMjowNDo0M1rOINvUhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxODo1OTo0NVrOIYxRPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3NzcwMg==", "bodyText": "wouldn't it be good to have a result variable, and then add it at the end of the import? Otherwise you might end up with multiple messages for one file nad that can be confusing", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551277702", "createdAt": "2021-01-04T12:04:43Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "diffHunk": "@@ -62,40 +71,96 @@ public ExternalFilesEntryLinker getLinker() {\n         return linker;\n     }\n \n-    public void importAsNewEntries(List<Path> files) {\n-        CompoundEdit ce = new CompoundEdit();\n-        for (Path file : files) {\n-            List<BibEntry> entriesToAdd;\n-            if (FileUtil.getFileExtension(file).filter(\"pdf\"::equals).isPresent()) {\n-                List<BibEntry> pdfResult = contentImporter.importPDFContent(file);\n-                List<BibEntry> xmpEntriesInFile = contentImporter.importXMPContent(file);\n-\n-                // First try xmp import, if empty try pdf import, otherwise create empty entry\n-                if (!xmpEntriesInFile.isEmpty()) {\n-                    if (!pdfResult.isEmpty()) {\n-                        // FIXME: Show merge dialog?\n-                        entriesToAdd = xmpEntriesInFile;\n-                    } else {\n-                        entriesToAdd = xmpEntriesInFile;\n+    public BackgroundTask<List<ImportFilesResultItemViewModel>> importFilesInBackground(List<Path> files) {\n+        return new BackgroundTask<>() {\n+\n+            @Override\n+            protected List<ImportFilesResultItemViewModel> call() {\n+                results = new ArrayList<>();\n+                counter = 1;\n+                CompoundEdit ce = new CompoundEdit();\n+                for (int i = 0; i < files.size(); i++) {\n+\n+                    if (isCanceled()) {\n+                        break;\n                     }\n-                } else {\n-                    if (!pdfResult.isEmpty()) {\n-                        entriesToAdd = pdfResult;\n-                    } else {\n-                        entriesToAdd = Collections.singletonList(createEmptyEntryWithLink(file));\n+                    DefaultTaskExecutor.runInJavaFXThread(() -> {\n+                        updateMessage(Localization.lang(\"Processing file %0 of %1\", counter, files.size()));\n+                        updateProgress(counter, files.size() - 1);\n+                    });\n+\n+                    var file = files.get(0);\n+                    entriesToAdd = Collections.emptyList();\n+\n+                    try {\n+                        if (FileUtil.getFileExtension(file).filter(\"pdf\"::equals).isPresent()) {\n+\n+                            var pdfImporterResult = contentImporter.importPDFContent(file);\n+                            List<BibEntry> pdfEntriesInFile = pdfImporterResult.getDatabase().getEntries();\n+\n+                            if (pdfImporterResult.hasWarnings()) {\n+                                addResultToList(file, false, Localization.lang(\"Error reading PDF content: %0\", pdfImporterResult.getErrorMessage()));\n+                            }\n+\n+                            var xmpParserResult = contentImporter.importXMPContent(file);\n+                            List<BibEntry> xmpEntriesInFile = xmpParserResult.getDatabase().getEntries();\n+\n+                            if (xmpParserResult.hasWarnings()) {\n+                                addResultToList(file, false, Localization.lang(\"Error reading XMP content: %0\", xmpParserResult.getErrorMessage()));\n+                            }\n+\n+                            // First try xmp import, if empty try pdf import, otherwise create empty entry\n+                            if (!xmpEntriesInFile.isEmpty()) {\n+                                entriesToAdd = xmpEntriesInFile;\n+                                addResultToList(file, true, Localization.lang(\"Importing using XMP data...\"));\n+                            } else if (!pdfEntriesInFile.isEmpty()) {\n+                                    entriesToAdd = pdfEntriesInFile;\n+                                    addResultToList(file, true, Localization.lang(\"Importing using extracted PDF data\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0466377c7ea3dce53d753f7fd60d7c0ada99279"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3ODM2OQ==", "bodyText": "If you add a new constructor to the ImportFilesResultItemViewModel class, this could be simply result = new ImportFilesResultItemViewModel(file, xmpParserResult).", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551278369", "createdAt": "2021-01-04T12:06:14Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "diffHunk": "@@ -62,40 +71,96 @@ public ExternalFilesEntryLinker getLinker() {\n         return linker;\n     }\n \n-    public void importAsNewEntries(List<Path> files) {\n-        CompoundEdit ce = new CompoundEdit();\n-        for (Path file : files) {\n-            List<BibEntry> entriesToAdd;\n-            if (FileUtil.getFileExtension(file).filter(\"pdf\"::equals).isPresent()) {\n-                List<BibEntry> pdfResult = contentImporter.importPDFContent(file);\n-                List<BibEntry> xmpEntriesInFile = contentImporter.importXMPContent(file);\n-\n-                // First try xmp import, if empty try pdf import, otherwise create empty entry\n-                if (!xmpEntriesInFile.isEmpty()) {\n-                    if (!pdfResult.isEmpty()) {\n-                        // FIXME: Show merge dialog?\n-                        entriesToAdd = xmpEntriesInFile;\n-                    } else {\n-                        entriesToAdd = xmpEntriesInFile;\n+    public BackgroundTask<List<ImportFilesResultItemViewModel>> importFilesInBackground(List<Path> files) {\n+        return new BackgroundTask<>() {\n+\n+            @Override\n+            protected List<ImportFilesResultItemViewModel> call() {\n+                results = new ArrayList<>();\n+                counter = 1;\n+                CompoundEdit ce = new CompoundEdit();\n+                for (int i = 0; i < files.size(); i++) {\n+\n+                    if (isCanceled()) {\n+                        break;\n                     }\n-                } else {\n-                    if (!pdfResult.isEmpty()) {\n-                        entriesToAdd = pdfResult;\n-                    } else {\n-                        entriesToAdd = Collections.singletonList(createEmptyEntryWithLink(file));\n+                    DefaultTaskExecutor.runInJavaFXThread(() -> {\n+                        updateMessage(Localization.lang(\"Processing file %0 of %1\", counter, files.size()));\n+                        updateProgress(counter, files.size() - 1);\n+                    });\n+\n+                    var file = files.get(0);\n+                    entriesToAdd = Collections.emptyList();\n+\n+                    try {\n+                        if (FileUtil.getFileExtension(file).filter(\"pdf\"::equals).isPresent()) {\n+\n+                            var pdfImporterResult = contentImporter.importPDFContent(file);\n+                            List<BibEntry> pdfEntriesInFile = pdfImporterResult.getDatabase().getEntries();\n+\n+                            if (pdfImporterResult.hasWarnings()) {\n+                                addResultToList(file, false, Localization.lang(\"Error reading PDF content: %0\", pdfImporterResult.getErrorMessage()));\n+                            }\n+\n+                            var xmpParserResult = contentImporter.importXMPContent(file);\n+                            List<BibEntry> xmpEntriesInFile = xmpParserResult.getDatabase().getEntries();\n+\n+                            if (xmpParserResult.hasWarnings()) {\n+                                addResultToList(file, false, Localization.lang(\"Error reading XMP content: %0\", xmpParserResult.getErrorMessage()));\n+                            }\n+\n+                            // First try xmp import, if empty try pdf import, otherwise create empty entry\n+                            if (!xmpEntriesInFile.isEmpty()) {\n+                                entriesToAdd = xmpEntriesInFile;\n+                                addResultToList(file, true, Localization.lang(\"Importing using XMP data...\"));\n+                            } else if (!pdfEntriesInFile.isEmpty()) {\n+                                    entriesToAdd = pdfEntriesInFile;\n+                                    addResultToList(file, true, Localization.lang(\"Importing using extracted PDF data\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3NzcwMg=="}, "originalCommit": {"oid": "e0466377c7ea3dce53d753f7fd60d7c0ada99279"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjg0Mzk2NA==", "bodyText": "But I still would need to distinguish each parser result and check if empry or if it  has failed or not. That would be simply duplicating the loop", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r562843964", "createdAt": "2021-01-22T18:59:45Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "diffHunk": "@@ -62,40 +71,96 @@ public ExternalFilesEntryLinker getLinker() {\n         return linker;\n     }\n \n-    public void importAsNewEntries(List<Path> files) {\n-        CompoundEdit ce = new CompoundEdit();\n-        for (Path file : files) {\n-            List<BibEntry> entriesToAdd;\n-            if (FileUtil.getFileExtension(file).filter(\"pdf\"::equals).isPresent()) {\n-                List<BibEntry> pdfResult = contentImporter.importPDFContent(file);\n-                List<BibEntry> xmpEntriesInFile = contentImporter.importXMPContent(file);\n-\n-                // First try xmp import, if empty try pdf import, otherwise create empty entry\n-                if (!xmpEntriesInFile.isEmpty()) {\n-                    if (!pdfResult.isEmpty()) {\n-                        // FIXME: Show merge dialog?\n-                        entriesToAdd = xmpEntriesInFile;\n-                    } else {\n-                        entriesToAdd = xmpEntriesInFile;\n+    public BackgroundTask<List<ImportFilesResultItemViewModel>> importFilesInBackground(List<Path> files) {\n+        return new BackgroundTask<>() {\n+\n+            @Override\n+            protected List<ImportFilesResultItemViewModel> call() {\n+                results = new ArrayList<>();\n+                counter = 1;\n+                CompoundEdit ce = new CompoundEdit();\n+                for (int i = 0; i < files.size(); i++) {\n+\n+                    if (isCanceled()) {\n+                        break;\n                     }\n-                } else {\n-                    if (!pdfResult.isEmpty()) {\n-                        entriesToAdd = pdfResult;\n-                    } else {\n-                        entriesToAdd = Collections.singletonList(createEmptyEntryWithLink(file));\n+                    DefaultTaskExecutor.runInJavaFXThread(() -> {\n+                        updateMessage(Localization.lang(\"Processing file %0 of %1\", counter, files.size()));\n+                        updateProgress(counter, files.size() - 1);\n+                    });\n+\n+                    var file = files.get(0);\n+                    entriesToAdd = Collections.emptyList();\n+\n+                    try {\n+                        if (FileUtil.getFileExtension(file).filter(\"pdf\"::equals).isPresent()) {\n+\n+                            var pdfImporterResult = contentImporter.importPDFContent(file);\n+                            List<BibEntry> pdfEntriesInFile = pdfImporterResult.getDatabase().getEntries();\n+\n+                            if (pdfImporterResult.hasWarnings()) {\n+                                addResultToList(file, false, Localization.lang(\"Error reading PDF content: %0\", pdfImporterResult.getErrorMessage()));\n+                            }\n+\n+                            var xmpParserResult = contentImporter.importXMPContent(file);\n+                            List<BibEntry> xmpEntriesInFile = xmpParserResult.getDatabase().getEntries();\n+\n+                            if (xmpParserResult.hasWarnings()) {\n+                                addResultToList(file, false, Localization.lang(\"Error reading XMP content: %0\", xmpParserResult.getErrorMessage()));\n+                            }\n+\n+                            // First try xmp import, if empty try pdf import, otherwise create empty entry\n+                            if (!xmpEntriesInFile.isEmpty()) {\n+                                entriesToAdd = xmpEntriesInFile;\n+                                addResultToList(file, true, Localization.lang(\"Importing using XMP data...\"));\n+                            } else if (!pdfEntriesInFile.isEmpty()) {\n+                                    entriesToAdd = pdfEntriesInFile;\n+                                    addResultToList(file, true, Localization.lang(\"Importing using extracted PDF data\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3NzcwMg=="}, "originalCommit": {"oid": "e0466377c7ea3dce53d753f7fd60d7c0ada99279"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTQxNDkwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesCrawler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMjowNzozNFrOINvZgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMjowNzozNFrOINvZgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3ODk3Ng==", "bodyText": "wrap also not necessary", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551278976", "createdAt": "2021-01-04T12:07:34Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesCrawler.java", "diffHunk": "@@ -95,11 +98,14 @@ public UnlinkedFilesCrawler(Path directory, FileFilter fileFilter, BibDatabaseCo\n             root.getChildren().add(new CheckBoxTreeItem<>(new FileNodeWrapper(file.toPath())));\n \n             counter++;\n-            if (counter == 1) {\n-                updateMessage(Localization.lang(\"One file found\"));\n-            } else {\n-                updateMessage(Localization.lang(\"%0 files found\", Integer.toString(counter)));\n-            }\n+            DefaultTaskExecutor.runInJavaFXThread(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0466377c7ea3dce53d753f7fd60d7c0ada99279"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTQxNjUwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMjowODowN1rOINvacg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMjowODowN1rOINvacg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3OTIxOA==", "bodyText": "remove empty line", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551279218", "createdAt": "2021-01-04T12:08:07Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogView.java", "diffHunk": "@@ -0,0 +1,213 @@\n+package org.jabref.gui.externalfiles;\n+\n+import java.nio.file.Files;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+import javax.swing.undo.UndoManager;\n+\n+import javafx.collections.FXCollections;\n+import javafx.event.ActionEvent;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Accordion;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ButtonType;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Control;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.control.TextField;\n+import javafx.scene.control.TitledPane;\n+import javafx.scene.control.Tooltip;\n+import javafx.scene.control.TreeView;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Color;\n+import javafx.stage.FileChooser;\n+\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.externalfiletype.ExternalFileType;\n+import org.jabref.gui.externalfiletype.ExternalFileTypes;\n+import org.jabref.gui.icon.IconTheme;\n+import org.jabref.gui.icon.JabRefIcon;\n+import org.jabref.gui.util.BaseDialog;\n+import org.jabref.gui.util.ControlHelper;\n+import org.jabref.gui.util.TaskExecutor;\n+import org.jabref.gui.util.ValueTableCellFactory;\n+import org.jabref.gui.util.ViewModelListCellFactory;\n+import org.jabref.gui.util.ViewModelTreeCellFactory;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.model.util.FileUpdateMonitor;\n+import org.jabref.preferences.PreferencesService;\n+\n+import com.airhacks.afterburner.views.ViewLoader;\n+\n+public class UnlinkedFilesDialogView extends BaseDialog<Void> {\n+\n+    @FXML private TextField directoryPathField;\n+    @FXML private ComboBox<FileChooser.ExtensionFilter> fileTypeSelection;\n+    @FXML private TreeView<FileNodeWrapper> tree;\n+    @FXML private Button buttonScan;\n+    @FXML private ButtonType importButton;\n+    @FXML private Button buttonExport;\n+    @FXML private Label progressText;\n+    @FXML private Accordion accordion;\n+    @FXML private ProgressIndicator progressDisplay;\n+    @FXML private VBox progressPane;\n+\n+    @FXML private TableView<ImportFilesResultItemViewModel> tvResult;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, JabRefIcon> colStatus;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colMessage;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colFile;\n+\n+    @FXML private TitledPane filePane;\n+    @FXML private TitledPane resultPane;\n+\n+    @Inject private PreferencesService preferencesService;\n+    @Inject private DialogService dialogService;\n+    @Inject private StateManager stateManager;\n+    @Inject private UndoManager undoManager;\n+    @Inject private TaskExecutor taskExecutor;\n+    @Inject private FileUpdateMonitor fileUpdateMonitor;\n+\n+    private UnlinkedFilesDialogViewModel viewModel;\n+\n+    public UnlinkedFilesDialogView() {\n+        this.setTitle(Localization.lang(\"Search for unlinked local files\"));\n+\n+        ViewLoader.view(this)\n+                  .load()\n+                  .setAsDialogPane(this);\n+\n+        Button btnImport = (Button) this.getDialogPane().lookupButton(importButton);\n+        ControlHelper.setAction(importButton, getDialogPane(), evt-> viewModel.startImport());\n+        btnImport.disableProperty().bindBidirectional(viewModel.applyButtonDisabled());\n+        btnImport.setTooltip(new Tooltip(Localization.lang(\"Starts the import of BibTeX entries.\")));\n+\n+        setResultConverter(button -> {\n+            if (button == ButtonType.CANCEL) {\n+                viewModel.cancelTasks();\n+            }\n+            return null;\n+        });\n+    }\n+\n+    @FXML\n+    private void initialize() {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0466377c7ea3dce53d753f7fd60d7c0ada99279"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTQxODYyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMjowODo0OVrOINvbtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMjowODo0OVrOINvbtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3OTU0MQ==", "bodyText": "Make getFileFilters already return an observable list", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551279541", "createdAt": "2021-01-04T12:08:49Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogView.java", "diffHunk": "@@ -0,0 +1,213 @@\n+package org.jabref.gui.externalfiles;\n+\n+import java.nio.file.Files;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+import javax.swing.undo.UndoManager;\n+\n+import javafx.collections.FXCollections;\n+import javafx.event.ActionEvent;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Accordion;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ButtonType;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Control;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.control.TextField;\n+import javafx.scene.control.TitledPane;\n+import javafx.scene.control.Tooltip;\n+import javafx.scene.control.TreeView;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Color;\n+import javafx.stage.FileChooser;\n+\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.externalfiletype.ExternalFileType;\n+import org.jabref.gui.externalfiletype.ExternalFileTypes;\n+import org.jabref.gui.icon.IconTheme;\n+import org.jabref.gui.icon.JabRefIcon;\n+import org.jabref.gui.util.BaseDialog;\n+import org.jabref.gui.util.ControlHelper;\n+import org.jabref.gui.util.TaskExecutor;\n+import org.jabref.gui.util.ValueTableCellFactory;\n+import org.jabref.gui.util.ViewModelListCellFactory;\n+import org.jabref.gui.util.ViewModelTreeCellFactory;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.model.util.FileUpdateMonitor;\n+import org.jabref.preferences.PreferencesService;\n+\n+import com.airhacks.afterburner.views.ViewLoader;\n+\n+public class UnlinkedFilesDialogView extends BaseDialog<Void> {\n+\n+    @FXML private TextField directoryPathField;\n+    @FXML private ComboBox<FileChooser.ExtensionFilter> fileTypeSelection;\n+    @FXML private TreeView<FileNodeWrapper> tree;\n+    @FXML private Button buttonScan;\n+    @FXML private ButtonType importButton;\n+    @FXML private Button buttonExport;\n+    @FXML private Label progressText;\n+    @FXML private Accordion accordion;\n+    @FXML private ProgressIndicator progressDisplay;\n+    @FXML private VBox progressPane;\n+\n+    @FXML private TableView<ImportFilesResultItemViewModel> tvResult;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, JabRefIcon> colStatus;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colMessage;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colFile;\n+\n+    @FXML private TitledPane filePane;\n+    @FXML private TitledPane resultPane;\n+\n+    @Inject private PreferencesService preferencesService;\n+    @Inject private DialogService dialogService;\n+    @Inject private StateManager stateManager;\n+    @Inject private UndoManager undoManager;\n+    @Inject private TaskExecutor taskExecutor;\n+    @Inject private FileUpdateMonitor fileUpdateMonitor;\n+\n+    private UnlinkedFilesDialogViewModel viewModel;\n+\n+    public UnlinkedFilesDialogView() {\n+        this.setTitle(Localization.lang(\"Search for unlinked local files\"));\n+\n+        ViewLoader.view(this)\n+                  .load()\n+                  .setAsDialogPane(this);\n+\n+        Button btnImport = (Button) this.getDialogPane().lookupButton(importButton);\n+        ControlHelper.setAction(importButton, getDialogPane(), evt-> viewModel.startImport());\n+        btnImport.disableProperty().bindBidirectional(viewModel.applyButtonDisabled());\n+        btnImport.setTooltip(new Tooltip(Localization.lang(\"Starts the import of BibTeX entries.\")));\n+\n+        setResultConverter(button -> {\n+            if (button == ButtonType.CANCEL) {\n+                viewModel.cancelTasks();\n+            }\n+            return null;\n+        });\n+    }\n+\n+    @FXML\n+    private void initialize() {\n+\n+        viewModel = new UnlinkedFilesDialogViewModel(dialogService, ExternalFileTypes.getInstance(), undoManager, fileUpdateMonitor, preferencesService, stateManager, taskExecutor);\n+        viewModel.directoryPath().bindBidirectional(directoryPathField.textProperty());\n+\n+        fileTypeSelection.setItems(FXCollections.observableArrayList(viewModel.getFileFilters()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0466377c7ea3dce53d753f7fd60d7c0ada99279"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTQxOTAxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMjowOTowMFrOINvb9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMjowOTowMFrOINvb9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3OTYwNw==", "bodyText": "indent", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551279607", "createdAt": "2021-01-04T12:09:00Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogView.java", "diffHunk": "@@ -0,0 +1,213 @@\n+package org.jabref.gui.externalfiles;\n+\n+import java.nio.file.Files;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+import javax.swing.undo.UndoManager;\n+\n+import javafx.collections.FXCollections;\n+import javafx.event.ActionEvent;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Accordion;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ButtonType;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Control;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.control.TextField;\n+import javafx.scene.control.TitledPane;\n+import javafx.scene.control.Tooltip;\n+import javafx.scene.control.TreeView;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Color;\n+import javafx.stage.FileChooser;\n+\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.externalfiletype.ExternalFileType;\n+import org.jabref.gui.externalfiletype.ExternalFileTypes;\n+import org.jabref.gui.icon.IconTheme;\n+import org.jabref.gui.icon.JabRefIcon;\n+import org.jabref.gui.util.BaseDialog;\n+import org.jabref.gui.util.ControlHelper;\n+import org.jabref.gui.util.TaskExecutor;\n+import org.jabref.gui.util.ValueTableCellFactory;\n+import org.jabref.gui.util.ViewModelListCellFactory;\n+import org.jabref.gui.util.ViewModelTreeCellFactory;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.model.util.FileUpdateMonitor;\n+import org.jabref.preferences.PreferencesService;\n+\n+import com.airhacks.afterburner.views.ViewLoader;\n+\n+public class UnlinkedFilesDialogView extends BaseDialog<Void> {\n+\n+    @FXML private TextField directoryPathField;\n+    @FXML private ComboBox<FileChooser.ExtensionFilter> fileTypeSelection;\n+    @FXML private TreeView<FileNodeWrapper> tree;\n+    @FXML private Button buttonScan;\n+    @FXML private ButtonType importButton;\n+    @FXML private Button buttonExport;\n+    @FXML private Label progressText;\n+    @FXML private Accordion accordion;\n+    @FXML private ProgressIndicator progressDisplay;\n+    @FXML private VBox progressPane;\n+\n+    @FXML private TableView<ImportFilesResultItemViewModel> tvResult;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, JabRefIcon> colStatus;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colMessage;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colFile;\n+\n+    @FXML private TitledPane filePane;\n+    @FXML private TitledPane resultPane;\n+\n+    @Inject private PreferencesService preferencesService;\n+    @Inject private DialogService dialogService;\n+    @Inject private StateManager stateManager;\n+    @Inject private UndoManager undoManager;\n+    @Inject private TaskExecutor taskExecutor;\n+    @Inject private FileUpdateMonitor fileUpdateMonitor;\n+\n+    private UnlinkedFilesDialogViewModel viewModel;\n+\n+    public UnlinkedFilesDialogView() {\n+        this.setTitle(Localization.lang(\"Search for unlinked local files\"));\n+\n+        ViewLoader.view(this)\n+                  .load()\n+                  .setAsDialogPane(this);\n+\n+        Button btnImport = (Button) this.getDialogPane().lookupButton(importButton);\n+        ControlHelper.setAction(importButton, getDialogPane(), evt-> viewModel.startImport());\n+        btnImport.disableProperty().bindBidirectional(viewModel.applyButtonDisabled());\n+        btnImport.setTooltip(new Tooltip(Localization.lang(\"Starts the import of BibTeX entries.\")));\n+\n+        setResultConverter(button -> {\n+            if (button == ButtonType.CANCEL) {\n+                viewModel.cancelTasks();\n+            }\n+            return null;\n+        });\n+    }\n+\n+    @FXML\n+    private void initialize() {\n+\n+        viewModel = new UnlinkedFilesDialogViewModel(dialogService, ExternalFileTypes.getInstance(), undoManager, fileUpdateMonitor, preferencesService, stateManager, taskExecutor);\n+        viewModel.directoryPath().bindBidirectional(directoryPathField.textProperty());\n+\n+        fileTypeSelection.setItems(FXCollections.observableArrayList(viewModel.getFileFilters()));\n+        new ViewModelListCellFactory<FileChooser.ExtensionFilter>()\n+        .withText(fileFilter -> fileFilter.getDescription() + fileFilter.getExtensions().stream().collect(Collectors.joining(\", \", \" (\", \")\")))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0466377c7ea3dce53d753f7fd60d7c0ada99279"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTQyMTI4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMjowOTo0NVrOINvdRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMjowOTo0NVrOINvdRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3OTk0Mw==", "bodyText": "move this lambda to fileFilter.getIcon", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551279943", "createdAt": "2021-01-04T12:09:45Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogView.java", "diffHunk": "@@ -0,0 +1,213 @@\n+package org.jabref.gui.externalfiles;\n+\n+import java.nio.file.Files;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+import javax.swing.undo.UndoManager;\n+\n+import javafx.collections.FXCollections;\n+import javafx.event.ActionEvent;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Accordion;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ButtonType;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Control;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.control.TextField;\n+import javafx.scene.control.TitledPane;\n+import javafx.scene.control.Tooltip;\n+import javafx.scene.control.TreeView;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Color;\n+import javafx.stage.FileChooser;\n+\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.externalfiletype.ExternalFileType;\n+import org.jabref.gui.externalfiletype.ExternalFileTypes;\n+import org.jabref.gui.icon.IconTheme;\n+import org.jabref.gui.icon.JabRefIcon;\n+import org.jabref.gui.util.BaseDialog;\n+import org.jabref.gui.util.ControlHelper;\n+import org.jabref.gui.util.TaskExecutor;\n+import org.jabref.gui.util.ValueTableCellFactory;\n+import org.jabref.gui.util.ViewModelListCellFactory;\n+import org.jabref.gui.util.ViewModelTreeCellFactory;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.model.util.FileUpdateMonitor;\n+import org.jabref.preferences.PreferencesService;\n+\n+import com.airhacks.afterburner.views.ViewLoader;\n+\n+public class UnlinkedFilesDialogView extends BaseDialog<Void> {\n+\n+    @FXML private TextField directoryPathField;\n+    @FXML private ComboBox<FileChooser.ExtensionFilter> fileTypeSelection;\n+    @FXML private TreeView<FileNodeWrapper> tree;\n+    @FXML private Button buttonScan;\n+    @FXML private ButtonType importButton;\n+    @FXML private Button buttonExport;\n+    @FXML private Label progressText;\n+    @FXML private Accordion accordion;\n+    @FXML private ProgressIndicator progressDisplay;\n+    @FXML private VBox progressPane;\n+\n+    @FXML private TableView<ImportFilesResultItemViewModel> tvResult;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, JabRefIcon> colStatus;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colMessage;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colFile;\n+\n+    @FXML private TitledPane filePane;\n+    @FXML private TitledPane resultPane;\n+\n+    @Inject private PreferencesService preferencesService;\n+    @Inject private DialogService dialogService;\n+    @Inject private StateManager stateManager;\n+    @Inject private UndoManager undoManager;\n+    @Inject private TaskExecutor taskExecutor;\n+    @Inject private FileUpdateMonitor fileUpdateMonitor;\n+\n+    private UnlinkedFilesDialogViewModel viewModel;\n+\n+    public UnlinkedFilesDialogView() {\n+        this.setTitle(Localization.lang(\"Search for unlinked local files\"));\n+\n+        ViewLoader.view(this)\n+                  .load()\n+                  .setAsDialogPane(this);\n+\n+        Button btnImport = (Button) this.getDialogPane().lookupButton(importButton);\n+        ControlHelper.setAction(importButton, getDialogPane(), evt-> viewModel.startImport());\n+        btnImport.disableProperty().bindBidirectional(viewModel.applyButtonDisabled());\n+        btnImport.setTooltip(new Tooltip(Localization.lang(\"Starts the import of BibTeX entries.\")));\n+\n+        setResultConverter(button -> {\n+            if (button == ButtonType.CANCEL) {\n+                viewModel.cancelTasks();\n+            }\n+            return null;\n+        });\n+    }\n+\n+    @FXML\n+    private void initialize() {\n+\n+        viewModel = new UnlinkedFilesDialogViewModel(dialogService, ExternalFileTypes.getInstance(), undoManager, fileUpdateMonitor, preferencesService, stateManager, taskExecutor);\n+        viewModel.directoryPath().bindBidirectional(directoryPathField.textProperty());\n+\n+        fileTypeSelection.setItems(FXCollections.observableArrayList(viewModel.getFileFilters()));\n+        new ViewModelListCellFactory<FileChooser.ExtensionFilter>()\n+        .withText(fileFilter -> fileFilter.getDescription() + fileFilter.getExtensions().stream().collect(Collectors.joining(\", \", \" (\", \")\")))\n+        .withIcon(fileFilter -> ExternalFileTypes.getInstance().getExternalFileTypeByExt(fileFilter.getExtensions().get(0))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0466377c7ea3dce53d753f7fd60d7c0ada99279"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTQyMjgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMjoxMDoyMFrOINveWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMjoxMDoyMFrOINveWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI4MDIxOA==", "bodyText": "Rename FileNodeWrapper to `FileNodeViewModel", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551280218", "createdAt": "2021-01-04T12:10:20Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogView.java", "diffHunk": "@@ -0,0 +1,213 @@\n+package org.jabref.gui.externalfiles;\n+\n+import java.nio.file.Files;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+import javax.swing.undo.UndoManager;\n+\n+import javafx.collections.FXCollections;\n+import javafx.event.ActionEvent;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Accordion;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ButtonType;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Control;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.control.TextField;\n+import javafx.scene.control.TitledPane;\n+import javafx.scene.control.Tooltip;\n+import javafx.scene.control.TreeView;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Color;\n+import javafx.stage.FileChooser;\n+\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.externalfiletype.ExternalFileType;\n+import org.jabref.gui.externalfiletype.ExternalFileTypes;\n+import org.jabref.gui.icon.IconTheme;\n+import org.jabref.gui.icon.JabRefIcon;\n+import org.jabref.gui.util.BaseDialog;\n+import org.jabref.gui.util.ControlHelper;\n+import org.jabref.gui.util.TaskExecutor;\n+import org.jabref.gui.util.ValueTableCellFactory;\n+import org.jabref.gui.util.ViewModelListCellFactory;\n+import org.jabref.gui.util.ViewModelTreeCellFactory;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.model.util.FileUpdateMonitor;\n+import org.jabref.preferences.PreferencesService;\n+\n+import com.airhacks.afterburner.views.ViewLoader;\n+\n+public class UnlinkedFilesDialogView extends BaseDialog<Void> {\n+\n+    @FXML private TextField directoryPathField;\n+    @FXML private ComboBox<FileChooser.ExtensionFilter> fileTypeSelection;\n+    @FXML private TreeView<FileNodeWrapper> tree;\n+    @FXML private Button buttonScan;\n+    @FXML private ButtonType importButton;\n+    @FXML private Button buttonExport;\n+    @FXML private Label progressText;\n+    @FXML private Accordion accordion;\n+    @FXML private ProgressIndicator progressDisplay;\n+    @FXML private VBox progressPane;\n+\n+    @FXML private TableView<ImportFilesResultItemViewModel> tvResult;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, JabRefIcon> colStatus;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colMessage;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colFile;\n+\n+    @FXML private TitledPane filePane;\n+    @FXML private TitledPane resultPane;\n+\n+    @Inject private PreferencesService preferencesService;\n+    @Inject private DialogService dialogService;\n+    @Inject private StateManager stateManager;\n+    @Inject private UndoManager undoManager;\n+    @Inject private TaskExecutor taskExecutor;\n+    @Inject private FileUpdateMonitor fileUpdateMonitor;\n+\n+    private UnlinkedFilesDialogViewModel viewModel;\n+\n+    public UnlinkedFilesDialogView() {\n+        this.setTitle(Localization.lang(\"Search for unlinked local files\"));\n+\n+        ViewLoader.view(this)\n+                  .load()\n+                  .setAsDialogPane(this);\n+\n+        Button btnImport = (Button) this.getDialogPane().lookupButton(importButton);\n+        ControlHelper.setAction(importButton, getDialogPane(), evt-> viewModel.startImport());\n+        btnImport.disableProperty().bindBidirectional(viewModel.applyButtonDisabled());\n+        btnImport.setTooltip(new Tooltip(Localization.lang(\"Starts the import of BibTeX entries.\")));\n+\n+        setResultConverter(button -> {\n+            if (button == ButtonType.CANCEL) {\n+                viewModel.cancelTasks();\n+            }\n+            return null;\n+        });\n+    }\n+\n+    @FXML\n+    private void initialize() {\n+\n+        viewModel = new UnlinkedFilesDialogViewModel(dialogService, ExternalFileTypes.getInstance(), undoManager, fileUpdateMonitor, preferencesService, stateManager, taskExecutor);\n+        viewModel.directoryPath().bindBidirectional(directoryPathField.textProperty());\n+\n+        fileTypeSelection.setItems(FXCollections.observableArrayList(viewModel.getFileFilters()));\n+        new ViewModelListCellFactory<FileChooser.ExtensionFilter>()\n+        .withText(fileFilter -> fileFilter.getDescription() + fileFilter.getExtensions().stream().collect(Collectors.joining(\", \", \" (\", \")\")))\n+        .withIcon(fileFilter -> ExternalFileTypes.getInstance().getExternalFileTypeByExt(fileFilter.getExtensions().get(0))\n+                                                 .map(ExternalFileType::getIcon)\n+                                                 .orElse(null))\n+        .install(fileTypeSelection);\n+\n+        new ViewModelTreeCellFactory<FileNodeWrapper>()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0466377c7ea3dce53d753f7fd60d7c0ada99279"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTQyMzg4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMjoxMDo0N1rOINvfBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMjoxMDo0N1rOINvfBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI4MDM5MQ==", "bodyText": "move lambda to node.getDisplayText", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551280391", "createdAt": "2021-01-04T12:10:47Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogView.java", "diffHunk": "@@ -0,0 +1,213 @@\n+package org.jabref.gui.externalfiles;\n+\n+import java.nio.file.Files;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+import javax.swing.undo.UndoManager;\n+\n+import javafx.collections.FXCollections;\n+import javafx.event.ActionEvent;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Accordion;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ButtonType;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Control;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.control.TextField;\n+import javafx.scene.control.TitledPane;\n+import javafx.scene.control.Tooltip;\n+import javafx.scene.control.TreeView;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Color;\n+import javafx.stage.FileChooser;\n+\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.externalfiletype.ExternalFileType;\n+import org.jabref.gui.externalfiletype.ExternalFileTypes;\n+import org.jabref.gui.icon.IconTheme;\n+import org.jabref.gui.icon.JabRefIcon;\n+import org.jabref.gui.util.BaseDialog;\n+import org.jabref.gui.util.ControlHelper;\n+import org.jabref.gui.util.TaskExecutor;\n+import org.jabref.gui.util.ValueTableCellFactory;\n+import org.jabref.gui.util.ViewModelListCellFactory;\n+import org.jabref.gui.util.ViewModelTreeCellFactory;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.model.util.FileUpdateMonitor;\n+import org.jabref.preferences.PreferencesService;\n+\n+import com.airhacks.afterburner.views.ViewLoader;\n+\n+public class UnlinkedFilesDialogView extends BaseDialog<Void> {\n+\n+    @FXML private TextField directoryPathField;\n+    @FXML private ComboBox<FileChooser.ExtensionFilter> fileTypeSelection;\n+    @FXML private TreeView<FileNodeWrapper> tree;\n+    @FXML private Button buttonScan;\n+    @FXML private ButtonType importButton;\n+    @FXML private Button buttonExport;\n+    @FXML private Label progressText;\n+    @FXML private Accordion accordion;\n+    @FXML private ProgressIndicator progressDisplay;\n+    @FXML private VBox progressPane;\n+\n+    @FXML private TableView<ImportFilesResultItemViewModel> tvResult;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, JabRefIcon> colStatus;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colMessage;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colFile;\n+\n+    @FXML private TitledPane filePane;\n+    @FXML private TitledPane resultPane;\n+\n+    @Inject private PreferencesService preferencesService;\n+    @Inject private DialogService dialogService;\n+    @Inject private StateManager stateManager;\n+    @Inject private UndoManager undoManager;\n+    @Inject private TaskExecutor taskExecutor;\n+    @Inject private FileUpdateMonitor fileUpdateMonitor;\n+\n+    private UnlinkedFilesDialogViewModel viewModel;\n+\n+    public UnlinkedFilesDialogView() {\n+        this.setTitle(Localization.lang(\"Search for unlinked local files\"));\n+\n+        ViewLoader.view(this)\n+                  .load()\n+                  .setAsDialogPane(this);\n+\n+        Button btnImport = (Button) this.getDialogPane().lookupButton(importButton);\n+        ControlHelper.setAction(importButton, getDialogPane(), evt-> viewModel.startImport());\n+        btnImport.disableProperty().bindBidirectional(viewModel.applyButtonDisabled());\n+        btnImport.setTooltip(new Tooltip(Localization.lang(\"Starts the import of BibTeX entries.\")));\n+\n+        setResultConverter(button -> {\n+            if (button == ButtonType.CANCEL) {\n+                viewModel.cancelTasks();\n+            }\n+            return null;\n+        });\n+    }\n+\n+    @FXML\n+    private void initialize() {\n+\n+        viewModel = new UnlinkedFilesDialogViewModel(dialogService, ExternalFileTypes.getInstance(), undoManager, fileUpdateMonitor, preferencesService, stateManager, taskExecutor);\n+        viewModel.directoryPath().bindBidirectional(directoryPathField.textProperty());\n+\n+        fileTypeSelection.setItems(FXCollections.observableArrayList(viewModel.getFileFilters()));\n+        new ViewModelListCellFactory<FileChooser.ExtensionFilter>()\n+        .withText(fileFilter -> fileFilter.getDescription() + fileFilter.getExtensions().stream().collect(Collectors.joining(\", \", \" (\", \")\")))\n+        .withIcon(fileFilter -> ExternalFileTypes.getInstance().getExternalFileTypeByExt(fileFilter.getExtensions().get(0))\n+                                                 .map(ExternalFileType::getIcon)\n+                                                 .orElse(null))\n+        .install(fileTypeSelection);\n+\n+        new ViewModelTreeCellFactory<FileNodeWrapper>()\n+                .withText(node -> {\n+                    if (Files.isRegularFile(node.path)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0466377c7ea3dce53d753f7fd60d7c0ada99279"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTQyNTMyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMjoxMToyMlrOINvf8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMjoxMToyMlrOINvf8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI4MDYyNA==", "bodyText": "file/files should be localized", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551280624", "createdAt": "2021-01-04T12:11:22Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogView.java", "diffHunk": "@@ -0,0 +1,213 @@\n+package org.jabref.gui.externalfiles;\n+\n+import java.nio.file.Files;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+import javax.swing.undo.UndoManager;\n+\n+import javafx.collections.FXCollections;\n+import javafx.event.ActionEvent;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Accordion;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ButtonType;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Control;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.control.TextField;\n+import javafx.scene.control.TitledPane;\n+import javafx.scene.control.Tooltip;\n+import javafx.scene.control.TreeView;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Color;\n+import javafx.stage.FileChooser;\n+\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.externalfiletype.ExternalFileType;\n+import org.jabref.gui.externalfiletype.ExternalFileTypes;\n+import org.jabref.gui.icon.IconTheme;\n+import org.jabref.gui.icon.JabRefIcon;\n+import org.jabref.gui.util.BaseDialog;\n+import org.jabref.gui.util.ControlHelper;\n+import org.jabref.gui.util.TaskExecutor;\n+import org.jabref.gui.util.ValueTableCellFactory;\n+import org.jabref.gui.util.ViewModelListCellFactory;\n+import org.jabref.gui.util.ViewModelTreeCellFactory;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.model.util.FileUpdateMonitor;\n+import org.jabref.preferences.PreferencesService;\n+\n+import com.airhacks.afterburner.views.ViewLoader;\n+\n+public class UnlinkedFilesDialogView extends BaseDialog<Void> {\n+\n+    @FXML private TextField directoryPathField;\n+    @FXML private ComboBox<FileChooser.ExtensionFilter> fileTypeSelection;\n+    @FXML private TreeView<FileNodeWrapper> tree;\n+    @FXML private Button buttonScan;\n+    @FXML private ButtonType importButton;\n+    @FXML private Button buttonExport;\n+    @FXML private Label progressText;\n+    @FXML private Accordion accordion;\n+    @FXML private ProgressIndicator progressDisplay;\n+    @FXML private VBox progressPane;\n+\n+    @FXML private TableView<ImportFilesResultItemViewModel> tvResult;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, JabRefIcon> colStatus;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colMessage;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colFile;\n+\n+    @FXML private TitledPane filePane;\n+    @FXML private TitledPane resultPane;\n+\n+    @Inject private PreferencesService preferencesService;\n+    @Inject private DialogService dialogService;\n+    @Inject private StateManager stateManager;\n+    @Inject private UndoManager undoManager;\n+    @Inject private TaskExecutor taskExecutor;\n+    @Inject private FileUpdateMonitor fileUpdateMonitor;\n+\n+    private UnlinkedFilesDialogViewModel viewModel;\n+\n+    public UnlinkedFilesDialogView() {\n+        this.setTitle(Localization.lang(\"Search for unlinked local files\"));\n+\n+        ViewLoader.view(this)\n+                  .load()\n+                  .setAsDialogPane(this);\n+\n+        Button btnImport = (Button) this.getDialogPane().lookupButton(importButton);\n+        ControlHelper.setAction(importButton, getDialogPane(), evt-> viewModel.startImport());\n+        btnImport.disableProperty().bindBidirectional(viewModel.applyButtonDisabled());\n+        btnImport.setTooltip(new Tooltip(Localization.lang(\"Starts the import of BibTeX entries.\")));\n+\n+        setResultConverter(button -> {\n+            if (button == ButtonType.CANCEL) {\n+                viewModel.cancelTasks();\n+            }\n+            return null;\n+        });\n+    }\n+\n+    @FXML\n+    private void initialize() {\n+\n+        viewModel = new UnlinkedFilesDialogViewModel(dialogService, ExternalFileTypes.getInstance(), undoManager, fileUpdateMonitor, preferencesService, stateManager, taskExecutor);\n+        viewModel.directoryPath().bindBidirectional(directoryPathField.textProperty());\n+\n+        fileTypeSelection.setItems(FXCollections.observableArrayList(viewModel.getFileFilters()));\n+        new ViewModelListCellFactory<FileChooser.ExtensionFilter>()\n+        .withText(fileFilter -> fileFilter.getDescription() + fileFilter.getExtensions().stream().collect(Collectors.joining(\", \", \" (\", \")\")))\n+        .withIcon(fileFilter -> ExternalFileTypes.getInstance().getExternalFileTypeByExt(fileFilter.getExtensions().get(0))\n+                                                 .map(ExternalFileType::getIcon)\n+                                                 .orElse(null))\n+        .install(fileTypeSelection);\n+\n+        new ViewModelTreeCellFactory<FileNodeWrapper>()\n+                .withText(node -> {\n+                    if (Files.isRegularFile(node.path)) {\n+                        // File\n+                        return node.path.getFileName().toString();\n+                    } else {\n+                        // Directory\n+                        return node.path.getFileName() + \" (\" + node.fileCount + \" file\" + (node.fileCount > 1 ? \"s\" : \"\") + \")\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0466377c7ea3dce53d753f7fd60d7c0ada99279"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTQyNjYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMjoxMTo0N1rOINvgrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMjoxMTo0N1rOINvgrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI4MDgxMg==", "bodyText": "indent", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551280812", "createdAt": "2021-01-04T12:11:47Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogView.java", "diffHunk": "@@ -0,0 +1,213 @@\n+package org.jabref.gui.externalfiles;\n+\n+import java.nio.file.Files;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+import javax.swing.undo.UndoManager;\n+\n+import javafx.collections.FXCollections;\n+import javafx.event.ActionEvent;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Accordion;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ButtonType;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Control;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.control.TextField;\n+import javafx.scene.control.TitledPane;\n+import javafx.scene.control.Tooltip;\n+import javafx.scene.control.TreeView;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Color;\n+import javafx.stage.FileChooser;\n+\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.externalfiletype.ExternalFileType;\n+import org.jabref.gui.externalfiletype.ExternalFileTypes;\n+import org.jabref.gui.icon.IconTheme;\n+import org.jabref.gui.icon.JabRefIcon;\n+import org.jabref.gui.util.BaseDialog;\n+import org.jabref.gui.util.ControlHelper;\n+import org.jabref.gui.util.TaskExecutor;\n+import org.jabref.gui.util.ValueTableCellFactory;\n+import org.jabref.gui.util.ViewModelListCellFactory;\n+import org.jabref.gui.util.ViewModelTreeCellFactory;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.model.util.FileUpdateMonitor;\n+import org.jabref.preferences.PreferencesService;\n+\n+import com.airhacks.afterburner.views.ViewLoader;\n+\n+public class UnlinkedFilesDialogView extends BaseDialog<Void> {\n+\n+    @FXML private TextField directoryPathField;\n+    @FXML private ComboBox<FileChooser.ExtensionFilter> fileTypeSelection;\n+    @FXML private TreeView<FileNodeWrapper> tree;\n+    @FXML private Button buttonScan;\n+    @FXML private ButtonType importButton;\n+    @FXML private Button buttonExport;\n+    @FXML private Label progressText;\n+    @FXML private Accordion accordion;\n+    @FXML private ProgressIndicator progressDisplay;\n+    @FXML private VBox progressPane;\n+\n+    @FXML private TableView<ImportFilesResultItemViewModel> tvResult;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, JabRefIcon> colStatus;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colMessage;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colFile;\n+\n+    @FXML private TitledPane filePane;\n+    @FXML private TitledPane resultPane;\n+\n+    @Inject private PreferencesService preferencesService;\n+    @Inject private DialogService dialogService;\n+    @Inject private StateManager stateManager;\n+    @Inject private UndoManager undoManager;\n+    @Inject private TaskExecutor taskExecutor;\n+    @Inject private FileUpdateMonitor fileUpdateMonitor;\n+\n+    private UnlinkedFilesDialogViewModel viewModel;\n+\n+    public UnlinkedFilesDialogView() {\n+        this.setTitle(Localization.lang(\"Search for unlinked local files\"));\n+\n+        ViewLoader.view(this)\n+                  .load()\n+                  .setAsDialogPane(this);\n+\n+        Button btnImport = (Button) this.getDialogPane().lookupButton(importButton);\n+        ControlHelper.setAction(importButton, getDialogPane(), evt-> viewModel.startImport());\n+        btnImport.disableProperty().bindBidirectional(viewModel.applyButtonDisabled());\n+        btnImport.setTooltip(new Tooltip(Localization.lang(\"Starts the import of BibTeX entries.\")));\n+\n+        setResultConverter(button -> {\n+            if (button == ButtonType.CANCEL) {\n+                viewModel.cancelTasks();\n+            }\n+            return null;\n+        });\n+    }\n+\n+    @FXML\n+    private void initialize() {\n+\n+        viewModel = new UnlinkedFilesDialogViewModel(dialogService, ExternalFileTypes.getInstance(), undoManager, fileUpdateMonitor, preferencesService, stateManager, taskExecutor);\n+        viewModel.directoryPath().bindBidirectional(directoryPathField.textProperty());\n+\n+        fileTypeSelection.setItems(FXCollections.observableArrayList(viewModel.getFileFilters()));\n+        new ViewModelListCellFactory<FileChooser.ExtensionFilter>()\n+        .withText(fileFilter -> fileFilter.getDescription() + fileFilter.getExtensions().stream().collect(Collectors.joining(\", \", \" (\", \")\")))\n+        .withIcon(fileFilter -> ExternalFileTypes.getInstance().getExternalFileTypeByExt(fileFilter.getExtensions().get(0))\n+                                                 .map(ExternalFileType::getIcon)\n+                                                 .orElse(null))\n+        .install(fileTypeSelection);\n+\n+        new ViewModelTreeCellFactory<FileNodeWrapper>()\n+                .withText(node -> {\n+                    if (Files.isRegularFile(node.path)) {\n+                        // File\n+                        return node.path.getFileName().toString();\n+                    } else {\n+                        // Directory\n+                        return node.path.getFileName() + \" (\" + node.fileCount + \" file\" + (node.fileCount > 1 ? \"s\" : \"\") + \")\";\n+                    }\n+                })\n+                .install(tree);\n+\n+       tree.setPrefWidth(Double.POSITIVE_INFINITY);\n+       viewModel.treeRoot().bindBidirectional(tree.rootProperty());\n+       viewModel.scanButtonDisabled().bindBidirectional(buttonScan.disableProperty());\n+       viewModel.scanButtonDefaultButton().bindBidirectional(buttonScan.defaultButtonProperty());\n+       viewModel.exportButtonDisabled().bindBidirectional(buttonExport.disableProperty());\n+       viewModel.selectedExtension().bind(fileTypeSelection.valueProperty());\n+\n+       tvResult.setItems(viewModel.resultTableItems());\n+\n+       progressDisplay.progressProperty().bind(viewModel.progress());\n+       progressText.textProperty().bind(viewModel.progressText());\n+\n+       progressPane.managedProperty().bind(viewModel.searchProgressVisible());\n+       progressPane.visibleProperty().bind(viewModel.searchProgressVisible());\n+       accordion.disableProperty().bind(viewModel.searchProgressVisible());\n+       tree.maxHeightProperty().bind(((Control) filePane.contentProperty().get()).heightProperty());\n+\n+       viewModel.filePaneExpanded().bindBidirectional(filePane.expandedProperty());\n+       viewModel.resultPaneExpanded().bindBidirectional(resultPane.expandedProperty());\n+\n+       viewModel.scanButtonDefaultButton().setValue(true);\n+       viewModel.scanButtonDisabled().setValue(true);\n+       viewModel.applyButtonDisabled().setValue(true);\n+       fileTypeSelection.getSelectionModel().selectFirst();\n+\n+       setupResultTable();\n+    }\n+\n+    private void setupResultTable() {\n+\n+        colFile.setCellValueFactory(cellData -> cellData.getValue().file());\n+        new ValueTableCellFactory<ImportFilesResultItemViewModel, String>()\n+        .withText(item -> item).withTooltip(item -> item)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0466377c7ea3dce53d753f7fd60d7c0ada99279"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTQyNzE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMjoxMTo1MlrOINvg7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMjoxMTo1MlrOINvg7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI4MDg3OQ==", "bodyText": "remove empty line", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551280879", "createdAt": "2021-01-04T12:11:52Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogView.java", "diffHunk": "@@ -0,0 +1,213 @@\n+package org.jabref.gui.externalfiles;\n+\n+import java.nio.file.Files;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+import javax.swing.undo.UndoManager;\n+\n+import javafx.collections.FXCollections;\n+import javafx.event.ActionEvent;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Accordion;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ButtonType;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Control;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.control.TextField;\n+import javafx.scene.control.TitledPane;\n+import javafx.scene.control.Tooltip;\n+import javafx.scene.control.TreeView;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Color;\n+import javafx.stage.FileChooser;\n+\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.externalfiletype.ExternalFileType;\n+import org.jabref.gui.externalfiletype.ExternalFileTypes;\n+import org.jabref.gui.icon.IconTheme;\n+import org.jabref.gui.icon.JabRefIcon;\n+import org.jabref.gui.util.BaseDialog;\n+import org.jabref.gui.util.ControlHelper;\n+import org.jabref.gui.util.TaskExecutor;\n+import org.jabref.gui.util.ValueTableCellFactory;\n+import org.jabref.gui.util.ViewModelListCellFactory;\n+import org.jabref.gui.util.ViewModelTreeCellFactory;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.model.util.FileUpdateMonitor;\n+import org.jabref.preferences.PreferencesService;\n+\n+import com.airhacks.afterburner.views.ViewLoader;\n+\n+public class UnlinkedFilesDialogView extends BaseDialog<Void> {\n+\n+    @FXML private TextField directoryPathField;\n+    @FXML private ComboBox<FileChooser.ExtensionFilter> fileTypeSelection;\n+    @FXML private TreeView<FileNodeWrapper> tree;\n+    @FXML private Button buttonScan;\n+    @FXML private ButtonType importButton;\n+    @FXML private Button buttonExport;\n+    @FXML private Label progressText;\n+    @FXML private Accordion accordion;\n+    @FXML private ProgressIndicator progressDisplay;\n+    @FXML private VBox progressPane;\n+\n+    @FXML private TableView<ImportFilesResultItemViewModel> tvResult;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, JabRefIcon> colStatus;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colMessage;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colFile;\n+\n+    @FXML private TitledPane filePane;\n+    @FXML private TitledPane resultPane;\n+\n+    @Inject private PreferencesService preferencesService;\n+    @Inject private DialogService dialogService;\n+    @Inject private StateManager stateManager;\n+    @Inject private UndoManager undoManager;\n+    @Inject private TaskExecutor taskExecutor;\n+    @Inject private FileUpdateMonitor fileUpdateMonitor;\n+\n+    private UnlinkedFilesDialogViewModel viewModel;\n+\n+    public UnlinkedFilesDialogView() {\n+        this.setTitle(Localization.lang(\"Search for unlinked local files\"));\n+\n+        ViewLoader.view(this)\n+                  .load()\n+                  .setAsDialogPane(this);\n+\n+        Button btnImport = (Button) this.getDialogPane().lookupButton(importButton);\n+        ControlHelper.setAction(importButton, getDialogPane(), evt-> viewModel.startImport());\n+        btnImport.disableProperty().bindBidirectional(viewModel.applyButtonDisabled());\n+        btnImport.setTooltip(new Tooltip(Localization.lang(\"Starts the import of BibTeX entries.\")));\n+\n+        setResultConverter(button -> {\n+            if (button == ButtonType.CANCEL) {\n+                viewModel.cancelTasks();\n+            }\n+            return null;\n+        });\n+    }\n+\n+    @FXML\n+    private void initialize() {\n+\n+        viewModel = new UnlinkedFilesDialogViewModel(dialogService, ExternalFileTypes.getInstance(), undoManager, fileUpdateMonitor, preferencesService, stateManager, taskExecutor);\n+        viewModel.directoryPath().bindBidirectional(directoryPathField.textProperty());\n+\n+        fileTypeSelection.setItems(FXCollections.observableArrayList(viewModel.getFileFilters()));\n+        new ViewModelListCellFactory<FileChooser.ExtensionFilter>()\n+        .withText(fileFilter -> fileFilter.getDescription() + fileFilter.getExtensions().stream().collect(Collectors.joining(\", \", \" (\", \")\")))\n+        .withIcon(fileFilter -> ExternalFileTypes.getInstance().getExternalFileTypeByExt(fileFilter.getExtensions().get(0))\n+                                                 .map(ExternalFileType::getIcon)\n+                                                 .orElse(null))\n+        .install(fileTypeSelection);\n+\n+        new ViewModelTreeCellFactory<FileNodeWrapper>()\n+                .withText(node -> {\n+                    if (Files.isRegularFile(node.path)) {\n+                        // File\n+                        return node.path.getFileName().toString();\n+                    } else {\n+                        // Directory\n+                        return node.path.getFileName() + \" (\" + node.fileCount + \" file\" + (node.fileCount > 1 ? \"s\" : \"\") + \")\";\n+                    }\n+                })\n+                .install(tree);\n+\n+       tree.setPrefWidth(Double.POSITIVE_INFINITY);\n+       viewModel.treeRoot().bindBidirectional(tree.rootProperty());\n+       viewModel.scanButtonDisabled().bindBidirectional(buttonScan.disableProperty());\n+       viewModel.scanButtonDefaultButton().bindBidirectional(buttonScan.defaultButtonProperty());\n+       viewModel.exportButtonDisabled().bindBidirectional(buttonExport.disableProperty());\n+       viewModel.selectedExtension().bind(fileTypeSelection.valueProperty());\n+\n+       tvResult.setItems(viewModel.resultTableItems());\n+\n+       progressDisplay.progressProperty().bind(viewModel.progress());\n+       progressText.textProperty().bind(viewModel.progressText());\n+\n+       progressPane.managedProperty().bind(viewModel.searchProgressVisible());\n+       progressPane.visibleProperty().bind(viewModel.searchProgressVisible());\n+       accordion.disableProperty().bind(viewModel.searchProgressVisible());\n+       tree.maxHeightProperty().bind(((Control) filePane.contentProperty().get()).heightProperty());\n+\n+       viewModel.filePaneExpanded().bindBidirectional(filePane.expandedProperty());\n+       viewModel.resultPaneExpanded().bindBidirectional(resultPane.expandedProperty());\n+\n+       viewModel.scanButtonDefaultButton().setValue(true);\n+       viewModel.scanButtonDisabled().setValue(true);\n+       viewModel.applyButtonDisabled().setValue(true);\n+       fileTypeSelection.getSelectionModel().selectFirst();\n+\n+       setupResultTable();\n+    }\n+\n+    private void setupResultTable() {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0466377c7ea3dce53d753f7fd60d7c0ada99279"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTQyOTAwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMjoxMjozNVrOINviEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMjoxMjozNVrOINviEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI4MTE3MQ==", "bodyText": "move this logic to getIcon", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551281171", "createdAt": "2021-01-04T12:12:35Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogView.java", "diffHunk": "@@ -0,0 +1,213 @@\n+package org.jabref.gui.externalfiles;\n+\n+import java.nio.file.Files;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+import javax.swing.undo.UndoManager;\n+\n+import javafx.collections.FXCollections;\n+import javafx.event.ActionEvent;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Accordion;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ButtonType;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Control;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.control.TextField;\n+import javafx.scene.control.TitledPane;\n+import javafx.scene.control.Tooltip;\n+import javafx.scene.control.TreeView;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Color;\n+import javafx.stage.FileChooser;\n+\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.externalfiletype.ExternalFileType;\n+import org.jabref.gui.externalfiletype.ExternalFileTypes;\n+import org.jabref.gui.icon.IconTheme;\n+import org.jabref.gui.icon.JabRefIcon;\n+import org.jabref.gui.util.BaseDialog;\n+import org.jabref.gui.util.ControlHelper;\n+import org.jabref.gui.util.TaskExecutor;\n+import org.jabref.gui.util.ValueTableCellFactory;\n+import org.jabref.gui.util.ViewModelListCellFactory;\n+import org.jabref.gui.util.ViewModelTreeCellFactory;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.model.util.FileUpdateMonitor;\n+import org.jabref.preferences.PreferencesService;\n+\n+import com.airhacks.afterburner.views.ViewLoader;\n+\n+public class UnlinkedFilesDialogView extends BaseDialog<Void> {\n+\n+    @FXML private TextField directoryPathField;\n+    @FXML private ComboBox<FileChooser.ExtensionFilter> fileTypeSelection;\n+    @FXML private TreeView<FileNodeWrapper> tree;\n+    @FXML private Button buttonScan;\n+    @FXML private ButtonType importButton;\n+    @FXML private Button buttonExport;\n+    @FXML private Label progressText;\n+    @FXML private Accordion accordion;\n+    @FXML private ProgressIndicator progressDisplay;\n+    @FXML private VBox progressPane;\n+\n+    @FXML private TableView<ImportFilesResultItemViewModel> tvResult;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, JabRefIcon> colStatus;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colMessage;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colFile;\n+\n+    @FXML private TitledPane filePane;\n+    @FXML private TitledPane resultPane;\n+\n+    @Inject private PreferencesService preferencesService;\n+    @Inject private DialogService dialogService;\n+    @Inject private StateManager stateManager;\n+    @Inject private UndoManager undoManager;\n+    @Inject private TaskExecutor taskExecutor;\n+    @Inject private FileUpdateMonitor fileUpdateMonitor;\n+\n+    private UnlinkedFilesDialogViewModel viewModel;\n+\n+    public UnlinkedFilesDialogView() {\n+        this.setTitle(Localization.lang(\"Search for unlinked local files\"));\n+\n+        ViewLoader.view(this)\n+                  .load()\n+                  .setAsDialogPane(this);\n+\n+        Button btnImport = (Button) this.getDialogPane().lookupButton(importButton);\n+        ControlHelper.setAction(importButton, getDialogPane(), evt-> viewModel.startImport());\n+        btnImport.disableProperty().bindBidirectional(viewModel.applyButtonDisabled());\n+        btnImport.setTooltip(new Tooltip(Localization.lang(\"Starts the import of BibTeX entries.\")));\n+\n+        setResultConverter(button -> {\n+            if (button == ButtonType.CANCEL) {\n+                viewModel.cancelTasks();\n+            }\n+            return null;\n+        });\n+    }\n+\n+    @FXML\n+    private void initialize() {\n+\n+        viewModel = new UnlinkedFilesDialogViewModel(dialogService, ExternalFileTypes.getInstance(), undoManager, fileUpdateMonitor, preferencesService, stateManager, taskExecutor);\n+        viewModel.directoryPath().bindBidirectional(directoryPathField.textProperty());\n+\n+        fileTypeSelection.setItems(FXCollections.observableArrayList(viewModel.getFileFilters()));\n+        new ViewModelListCellFactory<FileChooser.ExtensionFilter>()\n+        .withText(fileFilter -> fileFilter.getDescription() + fileFilter.getExtensions().stream().collect(Collectors.joining(\", \", \" (\", \")\")))\n+        .withIcon(fileFilter -> ExternalFileTypes.getInstance().getExternalFileTypeByExt(fileFilter.getExtensions().get(0))\n+                                                 .map(ExternalFileType::getIcon)\n+                                                 .orElse(null))\n+        .install(fileTypeSelection);\n+\n+        new ViewModelTreeCellFactory<FileNodeWrapper>()\n+                .withText(node -> {\n+                    if (Files.isRegularFile(node.path)) {\n+                        // File\n+                        return node.path.getFileName().toString();\n+                    } else {\n+                        // Directory\n+                        return node.path.getFileName() + \" (\" + node.fileCount + \" file\" + (node.fileCount > 1 ? \"s\" : \"\") + \")\";\n+                    }\n+                })\n+                .install(tree);\n+\n+       tree.setPrefWidth(Double.POSITIVE_INFINITY);\n+       viewModel.treeRoot().bindBidirectional(tree.rootProperty());\n+       viewModel.scanButtonDisabled().bindBidirectional(buttonScan.disableProperty());\n+       viewModel.scanButtonDefaultButton().bindBidirectional(buttonScan.defaultButtonProperty());\n+       viewModel.exportButtonDisabled().bindBidirectional(buttonExport.disableProperty());\n+       viewModel.selectedExtension().bind(fileTypeSelection.valueProperty());\n+\n+       tvResult.setItems(viewModel.resultTableItems());\n+\n+       progressDisplay.progressProperty().bind(viewModel.progress());\n+       progressText.textProperty().bind(viewModel.progressText());\n+\n+       progressPane.managedProperty().bind(viewModel.searchProgressVisible());\n+       progressPane.visibleProperty().bind(viewModel.searchProgressVisible());\n+       accordion.disableProperty().bind(viewModel.searchProgressVisible());\n+       tree.maxHeightProperty().bind(((Control) filePane.contentProperty().get()).heightProperty());\n+\n+       viewModel.filePaneExpanded().bindBidirectional(filePane.expandedProperty());\n+       viewModel.resultPaneExpanded().bindBidirectional(resultPane.expandedProperty());\n+\n+       viewModel.scanButtonDefaultButton().setValue(true);\n+       viewModel.scanButtonDisabled().setValue(true);\n+       viewModel.applyButtonDisabled().setValue(true);\n+       fileTypeSelection.getSelectionModel().selectFirst();\n+\n+       setupResultTable();\n+    }\n+\n+    private void setupResultTable() {\n+\n+        colFile.setCellValueFactory(cellData -> cellData.getValue().file());\n+        new ValueTableCellFactory<ImportFilesResultItemViewModel, String>()\n+        .withText(item -> item).withTooltip(item -> item)\n+        .install(colFile);\n+\n+        colMessage.setCellValueFactory(cellData -> cellData.getValue().message());\n+        new ValueTableCellFactory<ImportFilesResultItemViewModel, String>()\n+        .withText(item->item).withTooltip(item->item)\n+        .install(colMessage);\n+\n+        colStatus.setCellValueFactory(cellData -> cellData.getValue().getIcon());\n+\n+        colStatus.setCellFactory(new ValueTableCellFactory<ImportFilesResultItemViewModel, JabRefIcon>().withGraphic(item -> {\n+            if (item == IconTheme.JabRefIcons.CHECK) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0466377c7ea3dce53d753f7fd60d7c0ada99279"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTQzNTE4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogViewModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMjoxNDo1NFrOINvlpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMjoxNDo1NFrOINvlpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI4MjA4NA==", "bodyText": "rename variable", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551282084", "createdAt": "2021-01-04T12:14:54Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogViewModel.java", "diffHunk": "@@ -0,0 +1,370 @@\n+package org.jabref.gui.externalfiles;\n+\n+import java.io.BufferedWriter;\n+import java.io.FileFilter;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javax.swing.undo.UndoManager;\n+\n+import javafx.beans.property.BooleanProperty;\n+import javafx.beans.property.DoubleProperty;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleBooleanProperty;\n+import javafx.beans.property.SimpleDoubleProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.beans.property.SimpleStringProperty;\n+import javafx.beans.property.StringProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.scene.control.CheckBoxTreeItem;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.control.TreeItem;\n+import javafx.stage.FileChooser;\n+\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.externalfiletype.ExternalFileTypes;\n+import org.jabref.gui.util.BackgroundTask;\n+import org.jabref.gui.util.DirectoryDialogConfiguration;\n+import org.jabref.gui.util.FileDialogConfiguration;\n+import org.jabref.gui.util.FileFilterConverter;\n+import org.jabref.gui.util.TaskExecutor;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.logic.util.StandardFileType;\n+import org.jabref.model.database.BibDatabaseContext;\n+import org.jabref.model.util.FileUpdateMonitor;\n+import org.jabref.preferences.PreferencesService;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class UnlinkedFilesDialogViewModel {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(UnlinkedFilesDialogViewModel.class);\n+\n+    private final ImportHandler importHandler;\n+    private final StringProperty directoryPath = new SimpleStringProperty(\"\");\n+    private final ObjectProperty<FileChooser.ExtensionFilter> selectedExtension = new SimpleObjectProperty<>();\n+\n+    private final BooleanProperty searchProgressVisible = new SimpleBooleanProperty(false);\n+    private final BooleanProperty applyButtonDisabled = new SimpleBooleanProperty();\n+    private final BooleanProperty scanButtonDisabled = new SimpleBooleanProperty(true);\n+    private final BooleanProperty exportButtonDisabled = new SimpleBooleanProperty();\n+    private final ObjectProperty<TreeItem<FileNodeWrapper>> treeRoot = new SimpleObjectProperty<>();\n+    private final BooleanProperty scanButtonDefaultButton = new SimpleBooleanProperty();\n+    private final DoubleProperty progress = new SimpleDoubleProperty(0);\n+    private final StringProperty progressText = new SimpleStringProperty();\n+    private final BooleanProperty filePaneExpanded = new SimpleBooleanProperty();\n+    private final BooleanProperty resultPaneExpanded = new SimpleBooleanProperty();\n+\n+    private final ObservableList<ImportFilesResultItemViewModel> resultList = FXCollections.observableArrayList();\n+\n+    private final List<FileChooser.ExtensionFilter> fileFilterList = List.of(\n+                                                                             FileFilterConverter.ANY_FILE,\n+                                                                             FileFilterConverter.toExtensionFilter(StandardFileType.PDF),\n+                                                                             FileFilterConverter.toExtensionFilter(StandardFileType.BIBTEX_DB));\n+    private final DialogService dialogService;\n+    private final PreferencesService preferences;\n+    private BackgroundTask<CheckBoxTreeItem<FileNodeWrapper>> findUnlinkedFilesTask;\n+    private BackgroundTask<List<ImportFilesResultItemViewModel>> importFilesBackgroundTask;\n+\n+    private final BibDatabaseContext bibDatabasecontext;\n+    private final TaskExecutor taskExecutor;\n+\n+    public UnlinkedFilesDialogViewModel(DialogService dialogService, ExternalFileTypes externalFileTypes, UndoManager undoManager,\n+                                        FileUpdateMonitor fileUpdateMonitor, PreferencesService preferences, StateManager stateManager, TaskExecutor taskExecutor) {\n+        this.preferences = preferences;\n+        this.dialogService = dialogService;\n+        this.taskExecutor = taskExecutor;\n+        this.bibDatabasecontext = stateManager.getActiveDatabase().orElseThrow(() -> new NullPointerException(\"Database null\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0466377c7ea3dce53d753f7fd60d7c0ada99279"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTQzNzk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogViewModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMjoxNTo0NVrOINvnNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNzowNDowMVrOIOfcfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI4MjQ4NQ==", "bodyText": "The viewmodel should be free of any javafx controls, i.e. no javafx.scene  imports", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551282485", "createdAt": "2021-01-04T12:15:45Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogViewModel.java", "diffHunk": "@@ -0,0 +1,370 @@\n+package org.jabref.gui.externalfiles;\n+\n+import java.io.BufferedWriter;\n+import java.io.FileFilter;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javax.swing.undo.UndoManager;\n+\n+import javafx.beans.property.BooleanProperty;\n+import javafx.beans.property.DoubleProperty;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleBooleanProperty;\n+import javafx.beans.property.SimpleDoubleProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.beans.property.SimpleStringProperty;\n+import javafx.beans.property.StringProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.scene.control.CheckBoxTreeItem;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0466377c7ea3dce53d753f7fd60d7c0ada99279"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA2NjE3Mg==", "bodyText": "Hmm, this is a bit more complicated then. Seems like I can maybe reuse the idea  from the ParseLatexViewModel", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r552066172", "createdAt": "2021-01-05T17:04:01Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogViewModel.java", "diffHunk": "@@ -0,0 +1,370 @@\n+package org.jabref.gui.externalfiles;\n+\n+import java.io.BufferedWriter;\n+import java.io.FileFilter;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javax.swing.undo.UndoManager;\n+\n+import javafx.beans.property.BooleanProperty;\n+import javafx.beans.property.DoubleProperty;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleBooleanProperty;\n+import javafx.beans.property.SimpleDoubleProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.beans.property.SimpleStringProperty;\n+import javafx.beans.property.StringProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.scene.control.CheckBoxTreeItem;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI4MjQ4NQ=="}, "originalCommit": {"oid": "e0466377c7ea3dce53d753f7fd60d7c0ada99279"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTQzODkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogViewModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMjoxNjowMlrOINvnxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMjoxNjowMlrOINvnxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI4MjYyOA==", "bodyText": "indent", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551282628", "createdAt": "2021-01-04T12:16:02Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogViewModel.java", "diffHunk": "@@ -0,0 +1,370 @@\n+package org.jabref.gui.externalfiles;\n+\n+import java.io.BufferedWriter;\n+import java.io.FileFilter;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javax.swing.undo.UndoManager;\n+\n+import javafx.beans.property.BooleanProperty;\n+import javafx.beans.property.DoubleProperty;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleBooleanProperty;\n+import javafx.beans.property.SimpleDoubleProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.beans.property.SimpleStringProperty;\n+import javafx.beans.property.StringProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.scene.control.CheckBoxTreeItem;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.control.TreeItem;\n+import javafx.stage.FileChooser;\n+\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.externalfiletype.ExternalFileTypes;\n+import org.jabref.gui.util.BackgroundTask;\n+import org.jabref.gui.util.DirectoryDialogConfiguration;\n+import org.jabref.gui.util.FileDialogConfiguration;\n+import org.jabref.gui.util.FileFilterConverter;\n+import org.jabref.gui.util.TaskExecutor;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.logic.util.StandardFileType;\n+import org.jabref.model.database.BibDatabaseContext;\n+import org.jabref.model.util.FileUpdateMonitor;\n+import org.jabref.preferences.PreferencesService;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class UnlinkedFilesDialogViewModel {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(UnlinkedFilesDialogViewModel.class);\n+\n+    private final ImportHandler importHandler;\n+    private final StringProperty directoryPath = new SimpleStringProperty(\"\");\n+    private final ObjectProperty<FileChooser.ExtensionFilter> selectedExtension = new SimpleObjectProperty<>();\n+\n+    private final BooleanProperty searchProgressVisible = new SimpleBooleanProperty(false);\n+    private final BooleanProperty applyButtonDisabled = new SimpleBooleanProperty();\n+    private final BooleanProperty scanButtonDisabled = new SimpleBooleanProperty(true);\n+    private final BooleanProperty exportButtonDisabled = new SimpleBooleanProperty();\n+    private final ObjectProperty<TreeItem<FileNodeWrapper>> treeRoot = new SimpleObjectProperty<>();\n+    private final BooleanProperty scanButtonDefaultButton = new SimpleBooleanProperty();\n+    private final DoubleProperty progress = new SimpleDoubleProperty(0);\n+    private final StringProperty progressText = new SimpleStringProperty();\n+    private final BooleanProperty filePaneExpanded = new SimpleBooleanProperty();\n+    private final BooleanProperty resultPaneExpanded = new SimpleBooleanProperty();\n+\n+    private final ObservableList<ImportFilesResultItemViewModel> resultList = FXCollections.observableArrayList();\n+\n+    private final List<FileChooser.ExtensionFilter> fileFilterList = List.of(\n+                                                                             FileFilterConverter.ANY_FILE,\n+                                                                             FileFilterConverter.toExtensionFilter(StandardFileType.PDF),\n+                                                                             FileFilterConverter.toExtensionFilter(StandardFileType.BIBTEX_DB));\n+    private final DialogService dialogService;\n+    private final PreferencesService preferences;\n+    private BackgroundTask<CheckBoxTreeItem<FileNodeWrapper>> findUnlinkedFilesTask;\n+    private BackgroundTask<List<ImportFilesResultItemViewModel>> importFilesBackgroundTask;\n+\n+    private final BibDatabaseContext bibDatabasecontext;\n+    private final TaskExecutor taskExecutor;\n+\n+    public UnlinkedFilesDialogViewModel(DialogService dialogService, ExternalFileTypes externalFileTypes, UndoManager undoManager,\n+                                        FileUpdateMonitor fileUpdateMonitor, PreferencesService preferences, StateManager stateManager, TaskExecutor taskExecutor) {\n+        this.preferences = preferences;\n+        this.dialogService = dialogService;\n+        this.taskExecutor = taskExecutor;\n+        this.bibDatabasecontext = stateManager.getActiveDatabase().orElseThrow(() -> new NullPointerException(\"Database null\"));\n+        importHandler = new ImportHandler(\n+                                          dialogService,\n+                                          bibDatabasecontext,\n+                                          externalFileTypes,\n+                                          preferences,\n+                                          fileUpdateMonitor,\n+                                          undoManager,\n+                                          stateManager);\n+    }\n+\n+    public void startImport() {\n+\n+        CheckBoxTreeItem<FileNodeWrapper> root = (CheckBoxTreeItem<FileNodeWrapper>) treeRoot.getValue();\n+        final List<Path> fileList = getFileListFromNode(root);\n+\n+        resultList.clear();\n+\n+        if (fileList.isEmpty()) {\n+            return;\n+        }\n+\n+        importFilesBackgroundTask = importHandler.importFilesInBackground(fileList)\n+        .onRunning(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0466377c7ea3dce53d753f7fd60d7c0ada99279"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTQ0MTAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogViewModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMjoxNjo0MlrOINvo8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMjoxNjo0MlrOINvo8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI4MjkzMQ==", "bodyText": "remove empty lines...a lot", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551282931", "createdAt": "2021-01-04T12:16:42Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogViewModel.java", "diffHunk": "@@ -0,0 +1,370 @@\n+package org.jabref.gui.externalfiles;\n+\n+import java.io.BufferedWriter;\n+import java.io.FileFilter;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javax.swing.undo.UndoManager;\n+\n+import javafx.beans.property.BooleanProperty;\n+import javafx.beans.property.DoubleProperty;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleBooleanProperty;\n+import javafx.beans.property.SimpleDoubleProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.beans.property.SimpleStringProperty;\n+import javafx.beans.property.StringProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.scene.control.CheckBoxTreeItem;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.control.TreeItem;\n+import javafx.stage.FileChooser;\n+\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.externalfiletype.ExternalFileTypes;\n+import org.jabref.gui.util.BackgroundTask;\n+import org.jabref.gui.util.DirectoryDialogConfiguration;\n+import org.jabref.gui.util.FileDialogConfiguration;\n+import org.jabref.gui.util.FileFilterConverter;\n+import org.jabref.gui.util.TaskExecutor;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.logic.util.StandardFileType;\n+import org.jabref.model.database.BibDatabaseContext;\n+import org.jabref.model.util.FileUpdateMonitor;\n+import org.jabref.preferences.PreferencesService;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class UnlinkedFilesDialogViewModel {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(UnlinkedFilesDialogViewModel.class);\n+\n+    private final ImportHandler importHandler;\n+    private final StringProperty directoryPath = new SimpleStringProperty(\"\");\n+    private final ObjectProperty<FileChooser.ExtensionFilter> selectedExtension = new SimpleObjectProperty<>();\n+\n+    private final BooleanProperty searchProgressVisible = new SimpleBooleanProperty(false);\n+    private final BooleanProperty applyButtonDisabled = new SimpleBooleanProperty();\n+    private final BooleanProperty scanButtonDisabled = new SimpleBooleanProperty(true);\n+    private final BooleanProperty exportButtonDisabled = new SimpleBooleanProperty();\n+    private final ObjectProperty<TreeItem<FileNodeWrapper>> treeRoot = new SimpleObjectProperty<>();\n+    private final BooleanProperty scanButtonDefaultButton = new SimpleBooleanProperty();\n+    private final DoubleProperty progress = new SimpleDoubleProperty(0);\n+    private final StringProperty progressText = new SimpleStringProperty();\n+    private final BooleanProperty filePaneExpanded = new SimpleBooleanProperty();\n+    private final BooleanProperty resultPaneExpanded = new SimpleBooleanProperty();\n+\n+    private final ObservableList<ImportFilesResultItemViewModel> resultList = FXCollections.observableArrayList();\n+\n+    private final List<FileChooser.ExtensionFilter> fileFilterList = List.of(\n+                                                                             FileFilterConverter.ANY_FILE,\n+                                                                             FileFilterConverter.toExtensionFilter(StandardFileType.PDF),\n+                                                                             FileFilterConverter.toExtensionFilter(StandardFileType.BIBTEX_DB));\n+    private final DialogService dialogService;\n+    private final PreferencesService preferences;\n+    private BackgroundTask<CheckBoxTreeItem<FileNodeWrapper>> findUnlinkedFilesTask;\n+    private BackgroundTask<List<ImportFilesResultItemViewModel>> importFilesBackgroundTask;\n+\n+    private final BibDatabaseContext bibDatabasecontext;\n+    private final TaskExecutor taskExecutor;\n+\n+    public UnlinkedFilesDialogViewModel(DialogService dialogService, ExternalFileTypes externalFileTypes, UndoManager undoManager,\n+                                        FileUpdateMonitor fileUpdateMonitor, PreferencesService preferences, StateManager stateManager, TaskExecutor taskExecutor) {\n+        this.preferences = preferences;\n+        this.dialogService = dialogService;\n+        this.taskExecutor = taskExecutor;\n+        this.bibDatabasecontext = stateManager.getActiveDatabase().orElseThrow(() -> new NullPointerException(\"Database null\"));\n+        importHandler = new ImportHandler(\n+                                          dialogService,\n+                                          bibDatabasecontext,\n+                                          externalFileTypes,\n+                                          preferences,\n+                                          fileUpdateMonitor,\n+                                          undoManager,\n+                                          stateManager);\n+    }\n+\n+    public void startImport() {\n+\n+        CheckBoxTreeItem<FileNodeWrapper> root = (CheckBoxTreeItem<FileNodeWrapper>) treeRoot.getValue();\n+        final List<Path> fileList = getFileListFromNode(root);\n+\n+        resultList.clear();\n+\n+        if (fileList.isEmpty()) {\n+            return;\n+        }\n+\n+        importFilesBackgroundTask = importHandler.importFilesInBackground(fileList)\n+        .onRunning(() -> {\n+            progress.bind(importFilesBackgroundTask.workDonePercentageProperty());\n+            progressText.bind(importFilesBackgroundTask.messageProperty());\n+\n+            searchProgressVisible.setValue(true);\n+            scanButtonDisabled.setValue(true);\n+            applyButtonDisabled.setValue(true);\n+         })\n+        .onFinished(() -> {\n+            progress.unbind();\n+            progressText.unbind();\n+            searchProgressVisible.setValue(false);\n+            scanButtonDisabled.setValue(false);\n+\n+        })\n+        .onSuccess(results -> {\n+           applyButtonDisabled.setValue(false);\n+           exportButtonDisabled.setValue(false);\n+           scanButtonDefaultButton.setValue(false);\n+\n+           progress.unbind();\n+           progressText.unbind();\n+           searchProgressVisible.setValue(false);\n+\n+           filePaneExpanded.setValue(false);\n+           resultPaneExpanded.setValue(true);\n+           resultList.addAll(results);\n+\n+        });\n+        importFilesBackgroundTask.executeWith(taskExecutor);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0466377c7ea3dce53d753f7fd60d7c0ada99279"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTQ1MTA3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/l10n/Localization.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMjoxOTo1MlrOINvuvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxMDo1MDoxMVrOIYfQtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI4NDQxMw==", "bodyText": "Isn't Object better here instead of T? Otherwise all params need to have the same type, don't they?", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551284413", "createdAt": "2021-01-04T12:19:52Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/logic/l10n/Localization.java", "diffHunk": "@@ -48,13 +49,15 @@ private Localization() {\n      * @param params Replacement strings for parameters %0, %1, etc.\n      * @return The message with replaced parameters\n      */\n-    public static String lang(String key, String... params) {\n+    public static <T> String lang(String key, T... params) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0466377c7ea3dce53d753f7fd60d7c0ada99279"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDU5NjM2Nw==", "bodyText": "Still possible to pass the second parameter as string like we did before", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r554596367", "createdAt": "2021-01-10T17:15:25Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/logic/l10n/Localization.java", "diffHunk": "@@ -48,13 +49,15 @@ private Localization() {\n      * @param params Replacement strings for parameters %0, %1, etc.\n      * @return The message with replaced parameters\n      */\n-    public static String lang(String key, String... params) {\n+    public static <T> String lang(String key, T... params) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI4NDQxMw=="}, "originalCommit": {"oid": "e0466377c7ea3dce53d753f7fd60d7c0ada99279"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjU0ODkxNw==", "bodyText": "But lang(\"...\", file, path) is not possible since file and path are not of the same type T", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r562548917", "createdAt": "2021-01-22T10:50:11Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/logic/l10n/Localization.java", "diffHunk": "@@ -48,13 +49,15 @@ private Localization() {\n      * @param params Replacement strings for parameters %0, %1, etc.\n      * @return The message with replaced parameters\n      */\n-    public static String lang(String key, String... params) {\n+    public static <T> String lang(String key, T... params) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI4NDQxMw=="}, "originalCommit": {"oid": "e0466377c7ea3dce53d753f7fd60d7c0ada99279"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NzU3NDMyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogView.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMTozODo0M1rOIO7aDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMToyNDoyM1rOIPWfWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUyNDMwMg==", "bodyText": "The view class shouldn't contain any logic, so all these 3 methods here should go to appropriate view model classes (probably a ExtensionFilterViewModel needs to be introduced for this).", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r552524302", "createdAt": "2021-01-06T11:38:43Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogView.java", "diffHunk": "@@ -210,4 +188,33 @@ void exportSelected(ActionEvent event) {\n        viewModel.startExport();\n     }\n \n+    private JabRefIcon getFileFilterIcon(FileChooser.ExtensionFilter fileFilter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e059988d76900bf08cae11854ed70dcaf7ddfa44"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjY0NzIwMg==", "bodyText": "Hm. I don't see any reason for creating a viewModel for this, seems a bit overblown", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r552647202", "createdAt": "2021-01-06T14:10:58Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogView.java", "diffHunk": "@@ -210,4 +188,33 @@ void exportSelected(ActionEvent event) {\n        viewModel.startExport();\n     }\n \n+    private JabRefIcon getFileFilterIcon(FileChooser.ExtensionFilter fileFilter) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUyNDMwMg=="}, "originalCommit": {"oid": "e059988d76900bf08cae11854ed70dcaf7ddfa44"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjk2ODAyNg==", "bodyText": "It's similar to the FileNodeViewModel. It's a bit of an advantage of the MVVM pattern that one usually has wrappers for many logic classes.\nHow would you write a test for the getFileFilterIcon method otherwise?", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r552968026", "createdAt": "2021-01-06T21:24:23Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogView.java", "diffHunk": "@@ -210,4 +188,33 @@ void exportSelected(ActionEvent event) {\n        viewModel.startExport();\n     }\n \n+    private JabRefIcon getFileFilterIcon(FileChooser.ExtensionFilter fileFilter) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUyNDMwMg=="}, "originalCommit": {"oid": "e059988d76900bf08cae11854ed70dcaf7ddfa44"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0MDU5NzgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialog.fxml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQyMzoyNDoxMlrOIYNz5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxOTowNjoxNVrOIYxe_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjI2MzAxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        <Tooltip text=\"Starts the import of BibTeX entries.\"/>\n          \n          \n            \n                                        <Tooltip text=\"%Starts the import of BibTeX entries.\"/>\n          \n      \n    \n    \n  \n\nPlease undo the removal in JabRef_en.properties", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r562263013", "createdAt": "2021-01-21T23:24:12Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialog.fxml", "diffHunk": "@@ -0,0 +1,111 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<?import javafx.scene.control.Accordion?>\n+<?import javafx.scene.control.Button?>\n+<?import javafx.scene.control.ButtonBar?>\n+<?import javafx.scene.control.ButtonType?>\n+<?import javafx.scene.control.ComboBox?>\n+<?import javafx.scene.control.DialogPane?>\n+<?import javafx.scene.control.Label?>\n+<?import javafx.scene.control.ProgressIndicator?>\n+<?import javafx.scene.control.ScrollPane?>\n+<?import javafx.scene.control.TableColumn?>\n+<?import javafx.scene.control.TableView?>\n+<?import javafx.scene.control.TextField?>\n+<?import javafx.scene.control.TitledPane?>\n+<?import javafx.scene.control.Tooltip?>\n+<?import javafx.scene.layout.BorderPane?>\n+<?import javafx.scene.layout.ColumnConstraints?>\n+<?import javafx.scene.layout.GridPane?>\n+<?import javafx.scene.layout.RowConstraints?>\n+<?import javafx.scene.layout.StackPane?>\n+<?import javafx.scene.layout.VBox?>\n+<?import org.jabref.gui.icon.JabRefIconView?>\n+<?import org.controlsfx.control.CheckTreeView?>\n+<DialogPane xmlns=\"http://javafx.com/javafx/15.0.1\" xmlns:fx=\"http://javafx.com/fxml/1\"\n+            fx:controller=\"org.jabref.gui.externalfiles.UnlinkedFilesDialogView\"\n+            prefWidth=\"600.0\">\n+    <content>\n+        <VBox spacing=\"10.0\">\n+            <GridPane hgap=\"10.0\" vgap=\"4.0\">\n+            <columnConstraints>\n+                <ColumnConstraints hgrow=\"SOMETIMES\"/>\n+                <ColumnConstraints hgrow=\"ALWAYS\"/>\n+                <ColumnConstraints hgrow=\"SOMETIMES\"/>\n+            </columnConstraints>\n+            <rowConstraints>\n+                <RowConstraints minHeight=\"10.0\" vgrow=\"SOMETIMES\"/>\n+                <RowConstraints minHeight=\"10.0\" vgrow=\"SOMETIMES\"/>\n+            </rowConstraints>\n+                <Label text=\"%Start directory:\" GridPane.columnIndex=\"0\" GridPane.rowIndex=\"0\"/>\n+                <TextField fx:id=\"directoryPathField\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"0\"/>\n+                <Button onAction=\"#browseFileDirectory\" styleClass=\"icon-button,narrow\"\n+                        GridPane.columnIndex=\"2\" GridPane.rowIndex=\"0\"\n+                        prefHeight=\"20.0\" prefWidth=\"20.0\">\n+                    <graphic>\n+                        <JabRefIconView glyph=\"OPEN\"/>\n+                    </graphic>\n+                    <tooltip>\n+                        <Tooltip text=\"%Browse\"/>\n+                    </tooltip>\n+                </Button>\n+\n+                <Label text=\"%File extension:\" GridPane.columnIndex=\"0\" GridPane.rowIndex=\"1\"/>\n+                <ComboBox fx:id=\"fileTypeCombo\" maxWidth=\"Infinity\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"1\"/>\n+                <Button fx:id=\"scanButton\" onAction=\"#scanFiles\" text=\"%Scan directory\"\n+                        GridPane.columnIndex=\"2\" GridPane.rowIndex=\"1\">\n+                    <tooltip>\n+                        <Tooltip text=\"%Searches the selected directory for unlinked files.\"/>\n+                    </tooltip>\n+                </Button>\n+            </GridPane>\n+            <StackPane VBox.vgrow=\"ALWAYS\">\n+                <Accordion fx:id=\"accordion\" minHeight=\"300.0\" prefHeight=\"300.0\" maxHeight=\"300.0\">\n+                    <panes>\n+                        <TitledPane fx:id=\"filePane\" text=\"%Currently unlinked files\">\n+                            <ScrollPane fitToWidth=\"true\">\n+                                <CheckTreeView fx:id=\"unlinkedFilesList\"/>\n+                            </ScrollPane>\n+                        </TitledPane>\n+                        <TitledPane fx:id=\"resultPane\" text=\"%Import result\" disable=\"true\">\n+                            <TableView fx:id=\"importResultTable\">\n+                                <columns>\n+                                    <TableColumn fx:id=\"colStatus\" prefWidth=\"100.0\" text=\"%Status\"/>\n+                                    <TableColumn fx:id=\"colMessage\" prefWidth=\"300.0\" text=\"%Message\"/>\n+                                    <TableColumn fx:id=\"colFile\" prefWidth=\"500.0\" text=\"%File\"/>\n+                                </columns>\n+                                <columnResizePolicy>\n+                                    <TableView fx:constant=\"CONSTRAINED_RESIZE_POLICY\"/>\n+                                </columnResizePolicy>\n+                            </TableView>\n+                        </TitledPane>\n+                    </panes>\n+                </Accordion>\n+                <VBox fx:id=\"progressPane\" alignment=\"CENTER\" StackPane.alignment=\"CENTER\">\n+                    <ProgressIndicator fx:id=\"progressDisplay\" maxHeight=\"50.0\" maxWidth=\"50.0\"\n+                                       prefHeight=\"50.0\" prefWidth=\"50.0\" progress=\"0.0\"/>\n+                    <Label fx:id=\"progressText\" text=\"%Searching file system...\"/>\n+                </VBox>\n+            </StackPane>\n+            <ButtonBar buttonMinWidth=\"80.0\" BorderPane.alignment=\"CENTER\">\n+                <buttons>\n+                    <Button onAction=\"#selectAll\" text=\"%Select all\" ButtonBar.buttonData=\"OTHER\"/>\n+                    <Button onAction=\"#unselectAll\" text=\"%Unselect all\" ButtonBar.buttonData=\"OTHER\"/>\n+                    <Button onAction=\"#collapseAll\" text=\"%Collapse all\" ButtonBar.buttonData=\"OTHER\"/>\n+                    <Button onAction=\"#expandAll\" text=\"%Expand all\" ButtonBar.buttonData=\"OTHER\"/>\n+                    <Button onAction=\"#exportSelected\" text=\"%Export selected\" fx:id=\"exportButton\" ButtonBar.buttonData=\"OTHER\">\n+                        <tooltip>\n+                            <Tooltip text=\"%Export to text file.\"/>\n+                        </tooltip>\n+                    </Button>\n+                    <Button onAction=\"#startImport\" text=\"%Import\" fx:id=\"importButton\" ButtonBar.buttonData=\"APPLY\">\n+                        <tooltip>\n+                            <Tooltip text=\"Starts the import of BibTeX entries.\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b28692563bdec847ea814f9d1063373df4b806c"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjUzOTkwNw==", "bodyText": "There are no bibtex entries here, it's an import of files, right?", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r562539907", "createdAt": "2021-01-22T10:34:10Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialog.fxml", "diffHunk": "@@ -0,0 +1,111 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<?import javafx.scene.control.Accordion?>\n+<?import javafx.scene.control.Button?>\n+<?import javafx.scene.control.ButtonBar?>\n+<?import javafx.scene.control.ButtonType?>\n+<?import javafx.scene.control.ComboBox?>\n+<?import javafx.scene.control.DialogPane?>\n+<?import javafx.scene.control.Label?>\n+<?import javafx.scene.control.ProgressIndicator?>\n+<?import javafx.scene.control.ScrollPane?>\n+<?import javafx.scene.control.TableColumn?>\n+<?import javafx.scene.control.TableView?>\n+<?import javafx.scene.control.TextField?>\n+<?import javafx.scene.control.TitledPane?>\n+<?import javafx.scene.control.Tooltip?>\n+<?import javafx.scene.layout.BorderPane?>\n+<?import javafx.scene.layout.ColumnConstraints?>\n+<?import javafx.scene.layout.GridPane?>\n+<?import javafx.scene.layout.RowConstraints?>\n+<?import javafx.scene.layout.StackPane?>\n+<?import javafx.scene.layout.VBox?>\n+<?import org.jabref.gui.icon.JabRefIconView?>\n+<?import org.controlsfx.control.CheckTreeView?>\n+<DialogPane xmlns=\"http://javafx.com/javafx/15.0.1\" xmlns:fx=\"http://javafx.com/fxml/1\"\n+            fx:controller=\"org.jabref.gui.externalfiles.UnlinkedFilesDialogView\"\n+            prefWidth=\"600.0\">\n+    <content>\n+        <VBox spacing=\"10.0\">\n+            <GridPane hgap=\"10.0\" vgap=\"4.0\">\n+            <columnConstraints>\n+                <ColumnConstraints hgrow=\"SOMETIMES\"/>\n+                <ColumnConstraints hgrow=\"ALWAYS\"/>\n+                <ColumnConstraints hgrow=\"SOMETIMES\"/>\n+            </columnConstraints>\n+            <rowConstraints>\n+                <RowConstraints minHeight=\"10.0\" vgrow=\"SOMETIMES\"/>\n+                <RowConstraints minHeight=\"10.0\" vgrow=\"SOMETIMES\"/>\n+            </rowConstraints>\n+                <Label text=\"%Start directory:\" GridPane.columnIndex=\"0\" GridPane.rowIndex=\"0\"/>\n+                <TextField fx:id=\"directoryPathField\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"0\"/>\n+                <Button onAction=\"#browseFileDirectory\" styleClass=\"icon-button,narrow\"\n+                        GridPane.columnIndex=\"2\" GridPane.rowIndex=\"0\"\n+                        prefHeight=\"20.0\" prefWidth=\"20.0\">\n+                    <graphic>\n+                        <JabRefIconView glyph=\"OPEN\"/>\n+                    </graphic>\n+                    <tooltip>\n+                        <Tooltip text=\"%Browse\"/>\n+                    </tooltip>\n+                </Button>\n+\n+                <Label text=\"%File extension:\" GridPane.columnIndex=\"0\" GridPane.rowIndex=\"1\"/>\n+                <ComboBox fx:id=\"fileTypeCombo\" maxWidth=\"Infinity\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"1\"/>\n+                <Button fx:id=\"scanButton\" onAction=\"#scanFiles\" text=\"%Scan directory\"\n+                        GridPane.columnIndex=\"2\" GridPane.rowIndex=\"1\">\n+                    <tooltip>\n+                        <Tooltip text=\"%Searches the selected directory for unlinked files.\"/>\n+                    </tooltip>\n+                </Button>\n+            </GridPane>\n+            <StackPane VBox.vgrow=\"ALWAYS\">\n+                <Accordion fx:id=\"accordion\" minHeight=\"300.0\" prefHeight=\"300.0\" maxHeight=\"300.0\">\n+                    <panes>\n+                        <TitledPane fx:id=\"filePane\" text=\"%Currently unlinked files\">\n+                            <ScrollPane fitToWidth=\"true\">\n+                                <CheckTreeView fx:id=\"unlinkedFilesList\"/>\n+                            </ScrollPane>\n+                        </TitledPane>\n+                        <TitledPane fx:id=\"resultPane\" text=\"%Import result\" disable=\"true\">\n+                            <TableView fx:id=\"importResultTable\">\n+                                <columns>\n+                                    <TableColumn fx:id=\"colStatus\" prefWidth=\"100.0\" text=\"%Status\"/>\n+                                    <TableColumn fx:id=\"colMessage\" prefWidth=\"300.0\" text=\"%Message\"/>\n+                                    <TableColumn fx:id=\"colFile\" prefWidth=\"500.0\" text=\"%File\"/>\n+                                </columns>\n+                                <columnResizePolicy>\n+                                    <TableView fx:constant=\"CONSTRAINED_RESIZE_POLICY\"/>\n+                                </columnResizePolicy>\n+                            </TableView>\n+                        </TitledPane>\n+                    </panes>\n+                </Accordion>\n+                <VBox fx:id=\"progressPane\" alignment=\"CENTER\" StackPane.alignment=\"CENTER\">\n+                    <ProgressIndicator fx:id=\"progressDisplay\" maxHeight=\"50.0\" maxWidth=\"50.0\"\n+                                       prefHeight=\"50.0\" prefWidth=\"50.0\" progress=\"0.0\"/>\n+                    <Label fx:id=\"progressText\" text=\"%Searching file system...\"/>\n+                </VBox>\n+            </StackPane>\n+            <ButtonBar buttonMinWidth=\"80.0\" BorderPane.alignment=\"CENTER\">\n+                <buttons>\n+                    <Button onAction=\"#selectAll\" text=\"%Select all\" ButtonBar.buttonData=\"OTHER\"/>\n+                    <Button onAction=\"#unselectAll\" text=\"%Unselect all\" ButtonBar.buttonData=\"OTHER\"/>\n+                    <Button onAction=\"#collapseAll\" text=\"%Collapse all\" ButtonBar.buttonData=\"OTHER\"/>\n+                    <Button onAction=\"#expandAll\" text=\"%Expand all\" ButtonBar.buttonData=\"OTHER\"/>\n+                    <Button onAction=\"#exportSelected\" text=\"%Export selected\" fx:id=\"exportButton\" ButtonBar.buttonData=\"OTHER\">\n+                        <tooltip>\n+                            <Tooltip text=\"%Export to text file.\"/>\n+                        </tooltip>\n+                    </Button>\n+                    <Button onAction=\"#startImport\" text=\"%Import\" fx:id=\"importButton\" ButtonBar.buttonData=\"APPLY\">\n+                        <tooltip>\n+                            <Tooltip text=\"Starts the import of BibTeX entries.\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjI2MzAxMw=="}, "originalCommit": {"oid": "9b28692563bdec847ea814f9d1063373df4b806c"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjg0NzQ4NQ==", "bodyText": "These are bibtex entries. Extracted from xmp or pdf or a bib file.", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r562847485", "createdAt": "2021-01-22T19:06:15Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialog.fxml", "diffHunk": "@@ -0,0 +1,111 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<?import javafx.scene.control.Accordion?>\n+<?import javafx.scene.control.Button?>\n+<?import javafx.scene.control.ButtonBar?>\n+<?import javafx.scene.control.ButtonType?>\n+<?import javafx.scene.control.ComboBox?>\n+<?import javafx.scene.control.DialogPane?>\n+<?import javafx.scene.control.Label?>\n+<?import javafx.scene.control.ProgressIndicator?>\n+<?import javafx.scene.control.ScrollPane?>\n+<?import javafx.scene.control.TableColumn?>\n+<?import javafx.scene.control.TableView?>\n+<?import javafx.scene.control.TextField?>\n+<?import javafx.scene.control.TitledPane?>\n+<?import javafx.scene.control.Tooltip?>\n+<?import javafx.scene.layout.BorderPane?>\n+<?import javafx.scene.layout.ColumnConstraints?>\n+<?import javafx.scene.layout.GridPane?>\n+<?import javafx.scene.layout.RowConstraints?>\n+<?import javafx.scene.layout.StackPane?>\n+<?import javafx.scene.layout.VBox?>\n+<?import org.jabref.gui.icon.JabRefIconView?>\n+<?import org.controlsfx.control.CheckTreeView?>\n+<DialogPane xmlns=\"http://javafx.com/javafx/15.0.1\" xmlns:fx=\"http://javafx.com/fxml/1\"\n+            fx:controller=\"org.jabref.gui.externalfiles.UnlinkedFilesDialogView\"\n+            prefWidth=\"600.0\">\n+    <content>\n+        <VBox spacing=\"10.0\">\n+            <GridPane hgap=\"10.0\" vgap=\"4.0\">\n+            <columnConstraints>\n+                <ColumnConstraints hgrow=\"SOMETIMES\"/>\n+                <ColumnConstraints hgrow=\"ALWAYS\"/>\n+                <ColumnConstraints hgrow=\"SOMETIMES\"/>\n+            </columnConstraints>\n+            <rowConstraints>\n+                <RowConstraints minHeight=\"10.0\" vgrow=\"SOMETIMES\"/>\n+                <RowConstraints minHeight=\"10.0\" vgrow=\"SOMETIMES\"/>\n+            </rowConstraints>\n+                <Label text=\"%Start directory:\" GridPane.columnIndex=\"0\" GridPane.rowIndex=\"0\"/>\n+                <TextField fx:id=\"directoryPathField\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"0\"/>\n+                <Button onAction=\"#browseFileDirectory\" styleClass=\"icon-button,narrow\"\n+                        GridPane.columnIndex=\"2\" GridPane.rowIndex=\"0\"\n+                        prefHeight=\"20.0\" prefWidth=\"20.0\">\n+                    <graphic>\n+                        <JabRefIconView glyph=\"OPEN\"/>\n+                    </graphic>\n+                    <tooltip>\n+                        <Tooltip text=\"%Browse\"/>\n+                    </tooltip>\n+                </Button>\n+\n+                <Label text=\"%File extension:\" GridPane.columnIndex=\"0\" GridPane.rowIndex=\"1\"/>\n+                <ComboBox fx:id=\"fileTypeCombo\" maxWidth=\"Infinity\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"1\"/>\n+                <Button fx:id=\"scanButton\" onAction=\"#scanFiles\" text=\"%Scan directory\"\n+                        GridPane.columnIndex=\"2\" GridPane.rowIndex=\"1\">\n+                    <tooltip>\n+                        <Tooltip text=\"%Searches the selected directory for unlinked files.\"/>\n+                    </tooltip>\n+                </Button>\n+            </GridPane>\n+            <StackPane VBox.vgrow=\"ALWAYS\">\n+                <Accordion fx:id=\"accordion\" minHeight=\"300.0\" prefHeight=\"300.0\" maxHeight=\"300.0\">\n+                    <panes>\n+                        <TitledPane fx:id=\"filePane\" text=\"%Currently unlinked files\">\n+                            <ScrollPane fitToWidth=\"true\">\n+                                <CheckTreeView fx:id=\"unlinkedFilesList\"/>\n+                            </ScrollPane>\n+                        </TitledPane>\n+                        <TitledPane fx:id=\"resultPane\" text=\"%Import result\" disable=\"true\">\n+                            <TableView fx:id=\"importResultTable\">\n+                                <columns>\n+                                    <TableColumn fx:id=\"colStatus\" prefWidth=\"100.0\" text=\"%Status\"/>\n+                                    <TableColumn fx:id=\"colMessage\" prefWidth=\"300.0\" text=\"%Message\"/>\n+                                    <TableColumn fx:id=\"colFile\" prefWidth=\"500.0\" text=\"%File\"/>\n+                                </columns>\n+                                <columnResizePolicy>\n+                                    <TableView fx:constant=\"CONSTRAINED_RESIZE_POLICY\"/>\n+                                </columnResizePolicy>\n+                            </TableView>\n+                        </TitledPane>\n+                    </panes>\n+                </Accordion>\n+                <VBox fx:id=\"progressPane\" alignment=\"CENTER\" StackPane.alignment=\"CENTER\">\n+                    <ProgressIndicator fx:id=\"progressDisplay\" maxHeight=\"50.0\" maxWidth=\"50.0\"\n+                                       prefHeight=\"50.0\" prefWidth=\"50.0\" progress=\"0.0\"/>\n+                    <Label fx:id=\"progressText\" text=\"%Searching file system...\"/>\n+                </VBox>\n+            </StackPane>\n+            <ButtonBar buttonMinWidth=\"80.0\" BorderPane.alignment=\"CENTER\">\n+                <buttons>\n+                    <Button onAction=\"#selectAll\" text=\"%Select all\" ButtonBar.buttonData=\"OTHER\"/>\n+                    <Button onAction=\"#unselectAll\" text=\"%Unselect all\" ButtonBar.buttonData=\"OTHER\"/>\n+                    <Button onAction=\"#collapseAll\" text=\"%Collapse all\" ButtonBar.buttonData=\"OTHER\"/>\n+                    <Button onAction=\"#expandAll\" text=\"%Expand all\" ButtonBar.buttonData=\"OTHER\"/>\n+                    <Button onAction=\"#exportSelected\" text=\"%Export selected\" fx:id=\"exportButton\" ButtonBar.buttonData=\"OTHER\">\n+                        <tooltip>\n+                            <Tooltip text=\"%Export to text file.\"/>\n+                        </tooltip>\n+                    </Button>\n+                    <Button onAction=\"#startImport\" text=\"%Import\" fx:id=\"importButton\" ButtonBar.buttonData=\"APPLY\">\n+                        <tooltip>\n+                            <Tooltip text=\"Starts the import of BibTeX entries.\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjI2MzAxMw=="}, "originalCommit": {"oid": "9b28692563bdec847ea814f9d1063373df4b806c"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0MDU5ODg0OnYy", "diffSide": "RIGHT", "path": "src/main/resources/l10n/JabRef_en.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQyMzoyNDo0MFrOIYN0eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQyMzoyNDo0MFrOIYN0eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjI2MzE2MQ==", "bodyText": "5 years ago, We had a huge debate how to write BibTeX. We decided for BibTeX (see koppor#434). Could you please change it here, too?", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r562263161", "createdAt": "2021-01-21T23:24:40Z", "author": {"login": "koppor"}, "path": "src/main/resources/l10n/JabRef_en.properties", "diffHunk": "@@ -2280,6 +2276,17 @@ Regular\\ expression=Regular expression\n \n Error\\ importing.\\ See\\ the\\ error\\ log\\ for\\ details.=Error importing. See the error log for details.\n \n+Error\\ from\\ import\\:\\ %0=Error from import\\: %0\n+Error\\ reading\\ PDF\\ content\\:\\ %0=Error reading PDF content\\: %0\n+Error\\ reading\\ XMP\\ content\\:\\ %0=Error reading XMP content\\: %0\n+Importing\\ bib\\ entry=Importing bib entry\n+Importing\\ using\\ XMP\\ data...=Importing using XMP data...\n+Importing\\ using\\ extracted\\ PDF\\ data=Importing using extracted PDF data\n+No\\ bibtex\\ data\\ found.\\ Creating\\ empty\\ entry\\ with\\ file\\ link=No bibtex data found. Creating empty entry with file link", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b28692563bdec847ea814f9d1063373df4b806c"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0MDYwMjIzOnYy", "diffSide": "RIGHT", "path": "config/checkstyle/suppressions.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQyMzoyNjowNFrOIYN2eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yM1QxODoxODoxOFrOIZF8lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjI2MzY3Mw==", "bodyText": "Could you add a comment why the file is completely excluded? Can't the checkstyle issues be fixed? (https://medium.com/@matryer/broken-windows-theory-why-code-quality-and-simplistic-design-are-non-negotiable-e37f8ce23dab ^^)", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r562263673", "createdAt": "2021-01-21T23:26:04Z", "author": {"login": "koppor"}, "path": "config/checkstyle/suppressions.xml", "diffHunk": "@@ -6,4 +6,5 @@\n \n <suppressions>\n     <suppress checks=\"[a-zA-Z0-9]*\" files=\"[\\\\/]generated[\\\\/]\" />\n+    <suppress checks=\"[a-zA-Z0-9]*\" files=\"CustomTitledPaneSkin.java\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b28692563bdec847ea814f9d1063373df4b806c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE4Mjc0MQ==", "bodyText": "Added a comment because it's a modified variant of the original Skin.", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r563182741", "createdAt": "2021-01-23T18:18:18Z", "author": {"login": "Siedlerchr"}, "path": "config/checkstyle/suppressions.xml", "diffHunk": "@@ -6,4 +6,5 @@\n \n <suppressions>\n     <suppress checks=\"[a-zA-Z0-9]*\" files=\"[\\\\/]generated[\\\\/]\" />\n+    <suppress checks=\"[a-zA-Z0-9]*\" files=\"CustomTitledPaneSkin.java\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjI2MzY3Mw=="}, "originalCommit": {"oid": "9b28692563bdec847ea814f9d1063373df4b806c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0MjQxNzE0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/externalfiles/ImportFilesResultItemViewModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxMDoyNDoxNVrOIYeVMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxMDoyNDoxNVrOIYeVMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjUzMzY4MQ==", "bodyText": "this should be called icon()", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r562533681", "createdAt": "2021-01-22T10:24:15Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/ImportFilesResultItemViewModel.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.jabref.gui.externalfiles;\n+\n+import java.nio.file.Path;\n+\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.beans.property.SimpleStringProperty;\n+import javafx.beans.property.StringProperty;\n+\n+import org.jabref.gui.icon.IconTheme;\n+import org.jabref.gui.icon.JabRefIcon;\n+\n+public class ImportFilesResultItemViewModel {\n+\n+    private final StringProperty file = new SimpleStringProperty(\"\");\n+    private final ObjectProperty<JabRefIcon> icon = new SimpleObjectProperty<>(IconTheme.JabRefIcons.WARNING);\n+    private final StringProperty message = new SimpleStringProperty(\"\");\n+\n+    public ImportFilesResultItemViewModel(Path file, boolean success, String message) {\n+        this.file.setValue(file.toString());\n+        this.message.setValue(message);\n+        if (success) {\n+            this.icon.setValue(IconTheme.JabRefIcons.CHECK);\n+        }\n+    }\n+\n+    public ObjectProperty<JabRefIcon> getIcon() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b28692563bdec847ea814f9d1063373df4b806c"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0MjQyODExOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxMDoyNzowNVrOIYecIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxMDoyNzowNVrOIYecIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjUzNTQ1OQ==", "bodyText": "Why don't you use a nice foreach loop (I don't think i is used and you have the counter variable anyway)", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r562535459", "createdAt": "2021-01-22T10:27:05Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "diffHunk": "@@ -62,40 +70,93 @@ public ExternalFilesEntryLinker getLinker() {\n         return linker;\n     }\n \n-    public void importAsNewEntries(List<Path> files) {\n-        CompoundEdit ce = new CompoundEdit();\n-        for (Path file : files) {\n-            List<BibEntry> entriesToAdd;\n-            if (FileUtil.getFileExtension(file).filter(\"pdf\"::equals).isPresent()) {\n-                List<BibEntry> pdfResult = contentImporter.importPDFContent(file);\n-                List<BibEntry> xmpEntriesInFile = contentImporter.importXMPContent(file);\n-\n-                // First try xmp import, if empty try pdf import, otherwise create empty entry\n-                if (!xmpEntriesInFile.isEmpty()) {\n-                    if (!pdfResult.isEmpty()) {\n-                        // FIXME: Show merge dialog?\n-                        entriesToAdd = xmpEntriesInFile;\n-                    } else {\n-                        entriesToAdd = xmpEntriesInFile;\n+    public BackgroundTask<List<ImportFilesResultItemViewModel>> importFilesInBackground(List<Path> files) {\n+        return new BackgroundTask<>() {\n+\n+            @Override\n+            protected List<ImportFilesResultItemViewModel> call() {\n+                results = new ArrayList<>();\n+                counter = 1;\n+                CompoundEdit ce = new CompoundEdit();\n+                for (int i = 0; i < files.size(); i++) {\n+\n+                    var file = files.get(i);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b28692563bdec847ea814f9d1063373df4b806c"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0MjQzNTcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxMDoyODozN1rOIYegUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxMDoyODozN1rOIYegUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjUzNjUzMQ==", "bodyText": "I think it would make sense to introduce a FileUtil.isPdfFile similar to the isbibfile method.", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r562536531", "createdAt": "2021-01-22T10:28:37Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "diffHunk": "@@ -62,40 +70,93 @@ public ExternalFilesEntryLinker getLinker() {\n         return linker;\n     }\n \n-    public void importAsNewEntries(List<Path> files) {\n-        CompoundEdit ce = new CompoundEdit();\n-        for (Path file : files) {\n-            List<BibEntry> entriesToAdd;\n-            if (FileUtil.getFileExtension(file).filter(\"pdf\"::equals).isPresent()) {\n-                List<BibEntry> pdfResult = contentImporter.importPDFContent(file);\n-                List<BibEntry> xmpEntriesInFile = contentImporter.importXMPContent(file);\n-\n-                // First try xmp import, if empty try pdf import, otherwise create empty entry\n-                if (!xmpEntriesInFile.isEmpty()) {\n-                    if (!pdfResult.isEmpty()) {\n-                        // FIXME: Show merge dialog?\n-                        entriesToAdd = xmpEntriesInFile;\n-                    } else {\n-                        entriesToAdd = xmpEntriesInFile;\n+    public BackgroundTask<List<ImportFilesResultItemViewModel>> importFilesInBackground(List<Path> files) {\n+        return new BackgroundTask<>() {\n+\n+            @Override\n+            protected List<ImportFilesResultItemViewModel> call() {\n+                results = new ArrayList<>();\n+                counter = 1;\n+                CompoundEdit ce = new CompoundEdit();\n+                for (int i = 0; i < files.size(); i++) {\n+\n+                    var file = files.get(i);\n+                    entriesToAdd = Collections.emptyList();\n+\n+                    if (isCanceled()) {\n+                        break;\n                     }\n-                } else {\n-                    if (!pdfResult.isEmpty()) {\n-                        entriesToAdd = pdfResult;\n-                    } else {\n-                        entriesToAdd = Collections.singletonList(createEmptyEntryWithLink(file));\n+                    DefaultTaskExecutor.runInJavaFXThread(() -> {\n+                        updateMessage(Localization.lang(\"Processing file %0 of %1\", counter, files.size()));\n+                        updateProgress(counter, files.size() - 1);\n+                    });\n+\n+                    try {\n+                        if (FileUtil.getFileExtension(file).filter(\"pdf\"::equals).isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b28692563bdec847ea814f9d1063373df4b806c"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0MjQ2NjA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogView.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxMDozNjoyM1rOIYeykw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNFQxMDo0MjozNlrOIZLbUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjU0MTIwMw==", "bodyText": "A bit cleaner: bind to hasNoResults = EasyBind.isEmpty(viewModel.resultTableItems()) (similar for the treeRoot listener above)", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r562541203", "createdAt": "2021-01-22T10:36:23Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogView.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package org.jabref.gui.externalfiles;\n+\n+import java.util.Objects;\n+\n+import javax.inject.Inject;\n+import javax.swing.undo.UndoManager;\n+\n+import javafx.application.Platform;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.binding.Bindings;\n+import javafx.beans.binding.BooleanBinding;\n+import javafx.collections.FXCollections;\n+import javafx.fxml.FXML;\n+import javafx.scene.Node;\n+import javafx.scene.control.Accordion;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ButtonType;\n+import javafx.scene.control.CheckBoxTreeItem;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Control;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.control.SelectionMode;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.control.TextField;\n+import javafx.scene.control.TitledPane;\n+import javafx.scene.control.TreeItem;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Color;\n+\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.externalfiletype.ExternalFileTypes;\n+import org.jabref.gui.icon.IconTheme;\n+import org.jabref.gui.icon.JabRefIcon;\n+import org.jabref.gui.util.BaseDialog;\n+import org.jabref.gui.util.FileNodeViewModel;\n+import org.jabref.gui.util.IconValidationDecorator;\n+import org.jabref.gui.util.RecursiveTreeItem;\n+import org.jabref.gui.util.TaskExecutor;\n+import org.jabref.gui.util.ValueTableCellFactory;\n+import org.jabref.gui.util.ViewModelListCellFactory;\n+import org.jabref.gui.util.ViewModelTreeCellFactory;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.model.util.FileUpdateMonitor;\n+import org.jabref.preferences.PreferencesService;\n+\n+import com.airhacks.afterburner.views.ViewLoader;\n+import com.tobiasdiez.easybind.EasyBind;\n+import de.saxsys.mvvmfx.utils.validation.visualization.ControlsFxVisualizer;\n+import org.controlsfx.control.CheckTreeView;\n+\n+public class UnlinkedFilesDialogView extends BaseDialog<Void> {\n+\n+    @FXML private TextField directoryPathField;\n+    @FXML private ComboBox<FileExtensionViewModel> fileTypeCombo;\n+    @FXML private CheckTreeView<FileNodeViewModel> unlinkedFilesList;\n+    @FXML private Button scanButton;\n+    @FXML private Button exportButton;\n+    @FXML private Button importButton;\n+    @FXML private Label progressText;\n+    @FXML private Accordion accordion;\n+    @FXML private ProgressIndicator progressDisplay;\n+    @FXML private VBox progressPane;\n+\n+    @FXML private TableView<ImportFilesResultItemViewModel> importResultTable;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, JabRefIcon> colStatus;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colMessage;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colFile;\n+\n+    @FXML private TitledPane filePane;\n+    @FXML private TitledPane resultPane;\n+\n+    @Inject private PreferencesService preferencesService;\n+    @Inject private DialogService dialogService;\n+    @Inject private StateManager stateManager;\n+    @Inject private UndoManager undoManager;\n+    @Inject private TaskExecutor taskExecutor;\n+    @Inject private FileUpdateMonitor fileUpdateMonitor;\n+\n+    private final ControlsFxVisualizer validationVisualizer;\n+    private UnlinkedFilesDialogViewModel viewModel;\n+\n+    public UnlinkedFilesDialogView() {\n+        this.validationVisualizer = new ControlsFxVisualizer();\n+\n+        this.setTitle(Localization.lang(\"Search for unlinked local files\"));\n+\n+        ViewLoader.view(this)\n+                  .load()\n+                  .setAsDialogPane(this);\n+\n+        setResultConverter(button -> {\n+            if (button == ButtonType.CANCEL) {\n+                viewModel.cancelTasks();\n+            }\n+            return null;\n+        });\n+    }\n+\n+    @FXML\n+    private void initialize() {\n+        viewModel = new UnlinkedFilesDialogViewModel(dialogService, ExternalFileTypes.getInstance(), undoManager, fileUpdateMonitor, preferencesService, stateManager, taskExecutor);\n+\n+        progressDisplay.progressProperty().bind(viewModel.progressValueProperty());\n+        progressText.textProperty().bind(viewModel.progressTextProperty());\n+        progressPane.managedProperty().bind(viewModel.taskActiveProperty());\n+        progressPane.visibleProperty().bind(viewModel.taskActiveProperty());\n+        accordion.disableProperty().bind(viewModel.taskActiveProperty());\n+\n+        viewModel.treeRootProperty().addListener(observable -> {\n+            scanButton.setDefaultButton(false);\n+            importButton.setDefaultButton(true);\n+            scanButton.setDefaultButton(false);\n+            filePane.setExpanded(true);\n+            resultPane.setExpanded(false);\n+        });\n+\n+        viewModel.resultTableItems().addListener((InvalidationListener) observable -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b28692563bdec847ea814f9d1063373df4b806c"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjg2Mzc2OQ==", "bodyText": "I tried with Easybind.subscribe and Bindings.isEmpty, but that did not trigger correctly", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r562863769", "createdAt": "2021-01-22T19:37:04Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogView.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package org.jabref.gui.externalfiles;\n+\n+import java.util.Objects;\n+\n+import javax.inject.Inject;\n+import javax.swing.undo.UndoManager;\n+\n+import javafx.application.Platform;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.binding.Bindings;\n+import javafx.beans.binding.BooleanBinding;\n+import javafx.collections.FXCollections;\n+import javafx.fxml.FXML;\n+import javafx.scene.Node;\n+import javafx.scene.control.Accordion;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ButtonType;\n+import javafx.scene.control.CheckBoxTreeItem;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Control;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.control.SelectionMode;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.control.TextField;\n+import javafx.scene.control.TitledPane;\n+import javafx.scene.control.TreeItem;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Color;\n+\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.externalfiletype.ExternalFileTypes;\n+import org.jabref.gui.icon.IconTheme;\n+import org.jabref.gui.icon.JabRefIcon;\n+import org.jabref.gui.util.BaseDialog;\n+import org.jabref.gui.util.FileNodeViewModel;\n+import org.jabref.gui.util.IconValidationDecorator;\n+import org.jabref.gui.util.RecursiveTreeItem;\n+import org.jabref.gui.util.TaskExecutor;\n+import org.jabref.gui.util.ValueTableCellFactory;\n+import org.jabref.gui.util.ViewModelListCellFactory;\n+import org.jabref.gui.util.ViewModelTreeCellFactory;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.model.util.FileUpdateMonitor;\n+import org.jabref.preferences.PreferencesService;\n+\n+import com.airhacks.afterburner.views.ViewLoader;\n+import com.tobiasdiez.easybind.EasyBind;\n+import de.saxsys.mvvmfx.utils.validation.visualization.ControlsFxVisualizer;\n+import org.controlsfx.control.CheckTreeView;\n+\n+public class UnlinkedFilesDialogView extends BaseDialog<Void> {\n+\n+    @FXML private TextField directoryPathField;\n+    @FXML private ComboBox<FileExtensionViewModel> fileTypeCombo;\n+    @FXML private CheckTreeView<FileNodeViewModel> unlinkedFilesList;\n+    @FXML private Button scanButton;\n+    @FXML private Button exportButton;\n+    @FXML private Button importButton;\n+    @FXML private Label progressText;\n+    @FXML private Accordion accordion;\n+    @FXML private ProgressIndicator progressDisplay;\n+    @FXML private VBox progressPane;\n+\n+    @FXML private TableView<ImportFilesResultItemViewModel> importResultTable;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, JabRefIcon> colStatus;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colMessage;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colFile;\n+\n+    @FXML private TitledPane filePane;\n+    @FXML private TitledPane resultPane;\n+\n+    @Inject private PreferencesService preferencesService;\n+    @Inject private DialogService dialogService;\n+    @Inject private StateManager stateManager;\n+    @Inject private UndoManager undoManager;\n+    @Inject private TaskExecutor taskExecutor;\n+    @Inject private FileUpdateMonitor fileUpdateMonitor;\n+\n+    private final ControlsFxVisualizer validationVisualizer;\n+    private UnlinkedFilesDialogViewModel viewModel;\n+\n+    public UnlinkedFilesDialogView() {\n+        this.validationVisualizer = new ControlsFxVisualizer();\n+\n+        this.setTitle(Localization.lang(\"Search for unlinked local files\"));\n+\n+        ViewLoader.view(this)\n+                  .load()\n+                  .setAsDialogPane(this);\n+\n+        setResultConverter(button -> {\n+            if (button == ButtonType.CANCEL) {\n+                viewModel.cancelTasks();\n+            }\n+            return null;\n+        });\n+    }\n+\n+    @FXML\n+    private void initialize() {\n+        viewModel = new UnlinkedFilesDialogViewModel(dialogService, ExternalFileTypes.getInstance(), undoManager, fileUpdateMonitor, preferencesService, stateManager, taskExecutor);\n+\n+        progressDisplay.progressProperty().bind(viewModel.progressValueProperty());\n+        progressText.textProperty().bind(viewModel.progressTextProperty());\n+        progressPane.managedProperty().bind(viewModel.taskActiveProperty());\n+        progressPane.visibleProperty().bind(viewModel.taskActiveProperty());\n+        accordion.disableProperty().bind(viewModel.taskActiveProperty());\n+\n+        viewModel.treeRootProperty().addListener(observable -> {\n+            scanButton.setDefaultButton(false);\n+            importButton.setDefaultButton(true);\n+            scanButton.setDefaultButton(false);\n+            filePane.setExpanded(true);\n+            resultPane.setExpanded(false);\n+        });\n+\n+        viewModel.resultTableItems().addListener((InvalidationListener) observable -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjU0MTIwMw=="}, "originalCommit": {"oid": "9b28692563bdec847ea814f9d1063373df4b806c"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzI3MjUyOA==", "bodyText": "Idea was always to open the pane if a change happens.", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r563272528", "createdAt": "2021-01-24T10:42:36Z", "author": {"login": "calixtus"}, "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogView.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package org.jabref.gui.externalfiles;\n+\n+import java.util.Objects;\n+\n+import javax.inject.Inject;\n+import javax.swing.undo.UndoManager;\n+\n+import javafx.application.Platform;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.binding.Bindings;\n+import javafx.beans.binding.BooleanBinding;\n+import javafx.collections.FXCollections;\n+import javafx.fxml.FXML;\n+import javafx.scene.Node;\n+import javafx.scene.control.Accordion;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ButtonType;\n+import javafx.scene.control.CheckBoxTreeItem;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Control;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.control.SelectionMode;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.control.TextField;\n+import javafx.scene.control.TitledPane;\n+import javafx.scene.control.TreeItem;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Color;\n+\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.externalfiletype.ExternalFileTypes;\n+import org.jabref.gui.icon.IconTheme;\n+import org.jabref.gui.icon.JabRefIcon;\n+import org.jabref.gui.util.BaseDialog;\n+import org.jabref.gui.util.FileNodeViewModel;\n+import org.jabref.gui.util.IconValidationDecorator;\n+import org.jabref.gui.util.RecursiveTreeItem;\n+import org.jabref.gui.util.TaskExecutor;\n+import org.jabref.gui.util.ValueTableCellFactory;\n+import org.jabref.gui.util.ViewModelListCellFactory;\n+import org.jabref.gui.util.ViewModelTreeCellFactory;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.model.util.FileUpdateMonitor;\n+import org.jabref.preferences.PreferencesService;\n+\n+import com.airhacks.afterburner.views.ViewLoader;\n+import com.tobiasdiez.easybind.EasyBind;\n+import de.saxsys.mvvmfx.utils.validation.visualization.ControlsFxVisualizer;\n+import org.controlsfx.control.CheckTreeView;\n+\n+public class UnlinkedFilesDialogView extends BaseDialog<Void> {\n+\n+    @FXML private TextField directoryPathField;\n+    @FXML private ComboBox<FileExtensionViewModel> fileTypeCombo;\n+    @FXML private CheckTreeView<FileNodeViewModel> unlinkedFilesList;\n+    @FXML private Button scanButton;\n+    @FXML private Button exportButton;\n+    @FXML private Button importButton;\n+    @FXML private Label progressText;\n+    @FXML private Accordion accordion;\n+    @FXML private ProgressIndicator progressDisplay;\n+    @FXML private VBox progressPane;\n+\n+    @FXML private TableView<ImportFilesResultItemViewModel> importResultTable;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, JabRefIcon> colStatus;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colMessage;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colFile;\n+\n+    @FXML private TitledPane filePane;\n+    @FXML private TitledPane resultPane;\n+\n+    @Inject private PreferencesService preferencesService;\n+    @Inject private DialogService dialogService;\n+    @Inject private StateManager stateManager;\n+    @Inject private UndoManager undoManager;\n+    @Inject private TaskExecutor taskExecutor;\n+    @Inject private FileUpdateMonitor fileUpdateMonitor;\n+\n+    private final ControlsFxVisualizer validationVisualizer;\n+    private UnlinkedFilesDialogViewModel viewModel;\n+\n+    public UnlinkedFilesDialogView() {\n+        this.validationVisualizer = new ControlsFxVisualizer();\n+\n+        this.setTitle(Localization.lang(\"Search for unlinked local files\"));\n+\n+        ViewLoader.view(this)\n+                  .load()\n+                  .setAsDialogPane(this);\n+\n+        setResultConverter(button -> {\n+            if (button == ButtonType.CANCEL) {\n+                viewModel.cancelTasks();\n+            }\n+            return null;\n+        });\n+    }\n+\n+    @FXML\n+    private void initialize() {\n+        viewModel = new UnlinkedFilesDialogViewModel(dialogService, ExternalFileTypes.getInstance(), undoManager, fileUpdateMonitor, preferencesService, stateManager, taskExecutor);\n+\n+        progressDisplay.progressProperty().bind(viewModel.progressValueProperty());\n+        progressText.textProperty().bind(viewModel.progressTextProperty());\n+        progressPane.managedProperty().bind(viewModel.taskActiveProperty());\n+        progressPane.visibleProperty().bind(viewModel.taskActiveProperty());\n+        accordion.disableProperty().bind(viewModel.taskActiveProperty());\n+\n+        viewModel.treeRootProperty().addListener(observable -> {\n+            scanButton.setDefaultButton(false);\n+            importButton.setDefaultButton(true);\n+            scanButton.setDefaultButton(false);\n+            filePane.setExpanded(true);\n+            resultPane.setExpanded(false);\n+        });\n+\n+        viewModel.resultTableItems().addListener((InvalidationListener) observable -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjU0MTIwMw=="}, "originalCommit": {"oid": "9b28692563bdec847ea814f9d1063373df4b806c"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0MjQ3ODA3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxMDozOTozNFrOIYe52w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxMDozOTozNFrOIYe52w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjU0MzA2Nw==", "bodyText": "This should be moved to ImportFilesResultItemViewModel", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r562543067", "createdAt": "2021-01-22T10:39:34Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogView.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package org.jabref.gui.externalfiles;\n+\n+import java.util.Objects;\n+\n+import javax.inject.Inject;\n+import javax.swing.undo.UndoManager;\n+\n+import javafx.application.Platform;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.binding.Bindings;\n+import javafx.beans.binding.BooleanBinding;\n+import javafx.collections.FXCollections;\n+import javafx.fxml.FXML;\n+import javafx.scene.Node;\n+import javafx.scene.control.Accordion;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ButtonType;\n+import javafx.scene.control.CheckBoxTreeItem;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Control;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.control.SelectionMode;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.control.TextField;\n+import javafx.scene.control.TitledPane;\n+import javafx.scene.control.TreeItem;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Color;\n+\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.externalfiletype.ExternalFileTypes;\n+import org.jabref.gui.icon.IconTheme;\n+import org.jabref.gui.icon.JabRefIcon;\n+import org.jabref.gui.util.BaseDialog;\n+import org.jabref.gui.util.FileNodeViewModel;\n+import org.jabref.gui.util.IconValidationDecorator;\n+import org.jabref.gui.util.RecursiveTreeItem;\n+import org.jabref.gui.util.TaskExecutor;\n+import org.jabref.gui.util.ValueTableCellFactory;\n+import org.jabref.gui.util.ViewModelListCellFactory;\n+import org.jabref.gui.util.ViewModelTreeCellFactory;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.model.util.FileUpdateMonitor;\n+import org.jabref.preferences.PreferencesService;\n+\n+import com.airhacks.afterburner.views.ViewLoader;\n+import com.tobiasdiez.easybind.EasyBind;\n+import de.saxsys.mvvmfx.utils.validation.visualization.ControlsFxVisualizer;\n+import org.controlsfx.control.CheckTreeView;\n+\n+public class UnlinkedFilesDialogView extends BaseDialog<Void> {\n+\n+    @FXML private TextField directoryPathField;\n+    @FXML private ComboBox<FileExtensionViewModel> fileTypeCombo;\n+    @FXML private CheckTreeView<FileNodeViewModel> unlinkedFilesList;\n+    @FXML private Button scanButton;\n+    @FXML private Button exportButton;\n+    @FXML private Button importButton;\n+    @FXML private Label progressText;\n+    @FXML private Accordion accordion;\n+    @FXML private ProgressIndicator progressDisplay;\n+    @FXML private VBox progressPane;\n+\n+    @FXML private TableView<ImportFilesResultItemViewModel> importResultTable;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, JabRefIcon> colStatus;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colMessage;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colFile;\n+\n+    @FXML private TitledPane filePane;\n+    @FXML private TitledPane resultPane;\n+\n+    @Inject private PreferencesService preferencesService;\n+    @Inject private DialogService dialogService;\n+    @Inject private StateManager stateManager;\n+    @Inject private UndoManager undoManager;\n+    @Inject private TaskExecutor taskExecutor;\n+    @Inject private FileUpdateMonitor fileUpdateMonitor;\n+\n+    private final ControlsFxVisualizer validationVisualizer;\n+    private UnlinkedFilesDialogViewModel viewModel;\n+\n+    public UnlinkedFilesDialogView() {\n+        this.validationVisualizer = new ControlsFxVisualizer();\n+\n+        this.setTitle(Localization.lang(\"Search for unlinked local files\"));\n+\n+        ViewLoader.view(this)\n+                  .load()\n+                  .setAsDialogPane(this);\n+\n+        setResultConverter(button -> {\n+            if (button == ButtonType.CANCEL) {\n+                viewModel.cancelTasks();\n+            }\n+            return null;\n+        });\n+    }\n+\n+    @FXML\n+    private void initialize() {\n+        viewModel = new UnlinkedFilesDialogViewModel(dialogService, ExternalFileTypes.getInstance(), undoManager, fileUpdateMonitor, preferencesService, stateManager, taskExecutor);\n+\n+        progressDisplay.progressProperty().bind(viewModel.progressValueProperty());\n+        progressText.textProperty().bind(viewModel.progressTextProperty());\n+        progressPane.managedProperty().bind(viewModel.taskActiveProperty());\n+        progressPane.visibleProperty().bind(viewModel.taskActiveProperty());\n+        accordion.disableProperty().bind(viewModel.taskActiveProperty());\n+\n+        viewModel.treeRootProperty().addListener(observable -> {\n+            scanButton.setDefaultButton(false);\n+            importButton.setDefaultButton(true);\n+            scanButton.setDefaultButton(false);\n+            filePane.setExpanded(true);\n+            resultPane.setExpanded(false);\n+        });\n+\n+        viewModel.resultTableItems().addListener((InvalidationListener) observable -> {\n+            filePane.setExpanded(false);\n+            resultPane.setExpanded(true);\n+            resultPane.setDisable(false);\n+        });\n+\n+        initDirectorySelection();\n+        initUnlinkedFilesList();\n+        initResultTable();\n+        initButtons();\n+    }\n+\n+    private void initDirectorySelection() {\n+        validationVisualizer.setDecoration(new IconValidationDecorator());\n+\n+        directoryPathField.textProperty().bindBidirectional(viewModel.directoryPathProperty());\n+        Platform.runLater(() -> validationVisualizer.initVisualization(viewModel.directoryPathValidationStatus(), directoryPathField));\n+\n+        new ViewModelListCellFactory<FileExtensionViewModel>()\n+                .withText(FileExtensionViewModel::getDescription)\n+                .withIcon(FileExtensionViewModel::getIcon)\n+                .install(fileTypeCombo);\n+        fileTypeCombo.setItems(viewModel.getFileFilters());\n+        fileTypeCombo.valueProperty().bindBidirectional(viewModel.selectedExtensionProperty());\n+        fileTypeCombo.getSelectionModel().selectFirst();\n+    }\n+\n+    private void initUnlinkedFilesList() {\n+        new ViewModelTreeCellFactory<FileNodeViewModel>()\n+                .withText(FileNodeViewModel::getDisplayText)\n+                .install(unlinkedFilesList);\n+\n+        unlinkedFilesList.maxHeightProperty().bind(((Control) filePane.contentProperty().get()).heightProperty());\n+        unlinkedFilesList.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);\n+\n+        unlinkedFilesList.rootProperty().bind(EasyBind.map(viewModel.treeRootProperty(),\n+                fileNode -> {\n+                    if (!Objects.isNull(fileNode)) {\n+                        return new RecursiveTreeItem<>(fileNode, FileNodeViewModel::getChildren);\n+                    } else {\n+                        return null;\n+                    }\n+                }));\n+\n+        EasyBind.subscribe(unlinkedFilesList.rootProperty(), root -> {\n+            if (root != null) {\n+                ((CheckBoxTreeItem<FileNodeViewModel>) root).setSelected(true);\n+                root.setExpanded(true);\n+                EasyBind.bindContent(viewModel.checkedFileListProperty(), unlinkedFilesList.getCheckModel().getCheckedItems());\n+            } else {\n+                EasyBind.bindContent(viewModel.checkedFileListProperty(), FXCollections.observableArrayList());\n+            }\n+        });\n+    }\n+\n+    private void initResultTable() {\n+        colFile.setCellValueFactory(cellData -> cellData.getValue().file());\n+        new ValueTableCellFactory<ImportFilesResultItemViewModel, String>()\n+                .withText(item -> item).withTooltip(item -> item)\n+                .install(colFile);\n+\n+        colMessage.setCellValueFactory(cellData -> cellData.getValue().message());\n+        new ValueTableCellFactory<ImportFilesResultItemViewModel, String>()\n+                .withText(item -> item).withTooltip(item -> item)\n+                .install(colMessage);\n+\n+        colStatus.setCellValueFactory(cellData -> cellData.getValue().getIcon());\n+        colStatus.setCellFactory(new ValueTableCellFactory<ImportFilesResultItemViewModel, JabRefIcon>().withGraphic(this::getIcon));\n+        importResultTable.setColumnResizePolicy((param) -> true);\n+\n+        importResultTable.setItems(viewModel.resultTableItems());\n+    }\n+\n+    private void initButtons() {\n+        BooleanBinding noItemsChecked = Bindings.isNull(unlinkedFilesList.rootProperty())\n+                                                .or(Bindings.isEmpty(viewModel.checkedFileListProperty()));\n+        exportButton.disableProperty().bind(noItemsChecked);\n+        importButton.disableProperty().bind(noItemsChecked);\n+\n+        scanButton.setDefaultButton(true);\n+        scanButton.disableProperty().bind(viewModel.taskActiveProperty().or(viewModel.directoryPathValidationStatus().validProperty().not()));\n+    }\n+\n+    @FXML\n+    void browseFileDirectory() {\n+        viewModel.browseFileDirectory();\n+    }\n+\n+    @FXML\n+    void collapseAll() {\n+        expandTree(unlinkedFilesList.getRoot(), false);\n+    }\n+\n+    @FXML\n+    void expandAll() {\n+        expandTree(unlinkedFilesList.getRoot(), true);\n+    }\n+\n+    @FXML\n+    void scanFiles() {\n+        viewModel.startSearch();\n+    }\n+\n+    @FXML\n+    void startImport() {\n+        viewModel.startImport();\n+    }\n+\n+    @FXML\n+    void selectAll() {\n+        unlinkedFilesList.getCheckModel().checkAll();\n+    }\n+\n+    @FXML\n+    void unselectAll() {\n+        unlinkedFilesList.getCheckModel().clearChecks();\n+    }\n+\n+    @FXML\n+    void exportSelected() {\n+        viewModel.startExport();\n+    }\n+\n+    private Node getIcon(JabRefIcon icon) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b28692563bdec847ea814f9d1063373df4b806c"}, "originalPosition": 243}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0MjQ4MTM5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogViewModel.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxMDo0MDoyNlrOIYe7vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNFQxMDo0Mjo0MFrOIZLbVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjU0MzU1MQ==", "bodyText": "You can use the EasyBind.OptionalProperty instead of handling with null values.", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r562543551", "createdAt": "2021-01-22T10:40:26Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogViewModel.java", "diffHunk": "@@ -0,0 +1,269 @@\n+package org.jabref.gui.externalfiles;\n+\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.DirectoryStream.Filter;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import javax.swing.undo.UndoManager;\n+\n+import javafx.beans.property.BooleanProperty;\n+import javafx.beans.property.DoubleProperty;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleBooleanProperty;\n+import javafx.beans.property.SimpleDoubleProperty;\n+import javafx.beans.property.SimpleListProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.beans.property.SimpleStringProperty;\n+import javafx.beans.property.StringProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.control.TreeItem;\n+\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.externalfiletype.ExternalFileTypes;\n+import org.jabref.gui.util.BackgroundTask;\n+import org.jabref.gui.util.DirectoryDialogConfiguration;\n+import org.jabref.gui.util.FileDialogConfiguration;\n+import org.jabref.gui.util.FileNodeViewModel;\n+import org.jabref.gui.util.TaskExecutor;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.logic.util.StandardFileType;\n+import org.jabref.model.database.BibDatabaseContext;\n+import org.jabref.model.util.FileUpdateMonitor;\n+import org.jabref.preferences.PreferencesService;\n+\n+import de.saxsys.mvvmfx.utils.validation.FunctionBasedValidator;\n+import de.saxsys.mvvmfx.utils.validation.ValidationMessage;\n+import de.saxsys.mvvmfx.utils.validation.ValidationStatus;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class UnlinkedFilesDialogViewModel {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(UnlinkedFilesDialogViewModel.class);\n+\n+    private final ImportHandler importHandler;\n+    private final StringProperty directoryPath = new SimpleStringProperty(\"\");\n+    private final ObjectProperty<FileExtensionViewModel> selectedExtension = new SimpleObjectProperty<>();\n+\n+    private final ObjectProperty<FileNodeViewModel> treeRootProperty = new SimpleObjectProperty<>();\n+    private final SimpleListProperty<TreeItem<FileNodeViewModel>> checkedFileListProperty = new SimpleListProperty<>(FXCollections.observableArrayList());\n+\n+    private final BooleanProperty taskActiveProperty = new SimpleBooleanProperty(false);\n+    private final DoubleProperty progressValueProperty = new SimpleDoubleProperty(0);\n+    private final StringProperty progressTextProperty = new SimpleStringProperty();\n+\n+    private final ObservableList<ImportFilesResultItemViewModel> resultList = FXCollections.observableArrayList();\n+    private final ObservableList<FileExtensionViewModel> fileFilterList;\n+    private final DialogService dialogService;\n+    private final PreferencesService preferences;\n+    private BackgroundTask<FileNodeViewModel> findUnlinkedFilesTask;\n+    private BackgroundTask<List<ImportFilesResultItemViewModel>> importFilesBackgroundTask;\n+\n+    private final BibDatabaseContext bibDatabase;\n+    private final TaskExecutor taskExecutor;\n+\n+    private final FunctionBasedValidator<String> scanDirectoryValidator;\n+\n+    public UnlinkedFilesDialogViewModel(DialogService dialogService, ExternalFileTypes externalFileTypes, UndoManager undoManager,\n+                                        FileUpdateMonitor fileUpdateMonitor, PreferencesService preferences, StateManager stateManager, TaskExecutor taskExecutor) {\n+        this.preferences = preferences;\n+        this.dialogService = dialogService;\n+        this.taskExecutor = taskExecutor;\n+        this.bibDatabase = stateManager.getActiveDatabase().orElseThrow(() -> new NullPointerException(\"Database null\"));\n+        importHandler = new ImportHandler(\n+                dialogService,\n+                bibDatabase,\n+                externalFileTypes,\n+                preferences,\n+                fileUpdateMonitor,\n+                undoManager,\n+                stateManager);\n+\n+        this.fileFilterList = FXCollections.observableArrayList(\n+                new FileExtensionViewModel(StandardFileType.ANY_FILE, externalFileTypes),\n+                new FileExtensionViewModel(StandardFileType.BIBTEX_DB, externalFileTypes),\n+                new FileExtensionViewModel(StandardFileType.PDF, externalFileTypes));\n+\n+        Predicate<String> isDirectory = path -> Files.isDirectory(Path.of(path));\n+        scanDirectoryValidator = new FunctionBasedValidator<>(directoryPath, isDirectory,\n+                ValidationMessage.error(Localization.lang(\"Please enter a valid file path.\")));\n+\n+        treeRootProperty.setValue(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b28692563bdec847ea814f9d1063373df4b806c"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjg1MTUzNA==", "bodyText": "No, I think it's necessary to prevent showing any empty things", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r562851534", "createdAt": "2021-01-22T19:14:08Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogViewModel.java", "diffHunk": "@@ -0,0 +1,269 @@\n+package org.jabref.gui.externalfiles;\n+\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.DirectoryStream.Filter;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import javax.swing.undo.UndoManager;\n+\n+import javafx.beans.property.BooleanProperty;\n+import javafx.beans.property.DoubleProperty;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleBooleanProperty;\n+import javafx.beans.property.SimpleDoubleProperty;\n+import javafx.beans.property.SimpleListProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.beans.property.SimpleStringProperty;\n+import javafx.beans.property.StringProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.control.TreeItem;\n+\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.externalfiletype.ExternalFileTypes;\n+import org.jabref.gui.util.BackgroundTask;\n+import org.jabref.gui.util.DirectoryDialogConfiguration;\n+import org.jabref.gui.util.FileDialogConfiguration;\n+import org.jabref.gui.util.FileNodeViewModel;\n+import org.jabref.gui.util.TaskExecutor;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.logic.util.StandardFileType;\n+import org.jabref.model.database.BibDatabaseContext;\n+import org.jabref.model.util.FileUpdateMonitor;\n+import org.jabref.preferences.PreferencesService;\n+\n+import de.saxsys.mvvmfx.utils.validation.FunctionBasedValidator;\n+import de.saxsys.mvvmfx.utils.validation.ValidationMessage;\n+import de.saxsys.mvvmfx.utils.validation.ValidationStatus;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class UnlinkedFilesDialogViewModel {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(UnlinkedFilesDialogViewModel.class);\n+\n+    private final ImportHandler importHandler;\n+    private final StringProperty directoryPath = new SimpleStringProperty(\"\");\n+    private final ObjectProperty<FileExtensionViewModel> selectedExtension = new SimpleObjectProperty<>();\n+\n+    private final ObjectProperty<FileNodeViewModel> treeRootProperty = new SimpleObjectProperty<>();\n+    private final SimpleListProperty<TreeItem<FileNodeViewModel>> checkedFileListProperty = new SimpleListProperty<>(FXCollections.observableArrayList());\n+\n+    private final BooleanProperty taskActiveProperty = new SimpleBooleanProperty(false);\n+    private final DoubleProperty progressValueProperty = new SimpleDoubleProperty(0);\n+    private final StringProperty progressTextProperty = new SimpleStringProperty();\n+\n+    private final ObservableList<ImportFilesResultItemViewModel> resultList = FXCollections.observableArrayList();\n+    private final ObservableList<FileExtensionViewModel> fileFilterList;\n+    private final DialogService dialogService;\n+    private final PreferencesService preferences;\n+    private BackgroundTask<FileNodeViewModel> findUnlinkedFilesTask;\n+    private BackgroundTask<List<ImportFilesResultItemViewModel>> importFilesBackgroundTask;\n+\n+    private final BibDatabaseContext bibDatabase;\n+    private final TaskExecutor taskExecutor;\n+\n+    private final FunctionBasedValidator<String> scanDirectoryValidator;\n+\n+    public UnlinkedFilesDialogViewModel(DialogService dialogService, ExternalFileTypes externalFileTypes, UndoManager undoManager,\n+                                        FileUpdateMonitor fileUpdateMonitor, PreferencesService preferences, StateManager stateManager, TaskExecutor taskExecutor) {\n+        this.preferences = preferences;\n+        this.dialogService = dialogService;\n+        this.taskExecutor = taskExecutor;\n+        this.bibDatabase = stateManager.getActiveDatabase().orElseThrow(() -> new NullPointerException(\"Database null\"));\n+        importHandler = new ImportHandler(\n+                dialogService,\n+                bibDatabase,\n+                externalFileTypes,\n+                preferences,\n+                fileUpdateMonitor,\n+                undoManager,\n+                stateManager);\n+\n+        this.fileFilterList = FXCollections.observableArrayList(\n+                new FileExtensionViewModel(StandardFileType.ANY_FILE, externalFileTypes),\n+                new FileExtensionViewModel(StandardFileType.BIBTEX_DB, externalFileTypes),\n+                new FileExtensionViewModel(StandardFileType.PDF, externalFileTypes));\n+\n+        Predicate<String> isDirectory = path -> Files.isDirectory(Path.of(path));\n+        scanDirectoryValidator = new FunctionBasedValidator<>(directoryPath, isDirectory,\n+                ValidationMessage.error(Localization.lang(\"Please enter a valid file path.\")));\n+\n+        treeRootProperty.setValue(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjU0MzU1MQ=="}, "originalCommit": {"oid": "9b28692563bdec847ea814f9d1063373df4b806c"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjkwNzk4OQ==", "bodyText": "The optional property is similar to Optional. Just a nice wrapper so that you don't need null but have an isEmpty etc.", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r562907989", "createdAt": "2021-01-22T20:59:58Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogViewModel.java", "diffHunk": "@@ -0,0 +1,269 @@\n+package org.jabref.gui.externalfiles;\n+\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.DirectoryStream.Filter;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import javax.swing.undo.UndoManager;\n+\n+import javafx.beans.property.BooleanProperty;\n+import javafx.beans.property.DoubleProperty;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleBooleanProperty;\n+import javafx.beans.property.SimpleDoubleProperty;\n+import javafx.beans.property.SimpleListProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.beans.property.SimpleStringProperty;\n+import javafx.beans.property.StringProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.control.TreeItem;\n+\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.externalfiletype.ExternalFileTypes;\n+import org.jabref.gui.util.BackgroundTask;\n+import org.jabref.gui.util.DirectoryDialogConfiguration;\n+import org.jabref.gui.util.FileDialogConfiguration;\n+import org.jabref.gui.util.FileNodeViewModel;\n+import org.jabref.gui.util.TaskExecutor;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.logic.util.StandardFileType;\n+import org.jabref.model.database.BibDatabaseContext;\n+import org.jabref.model.util.FileUpdateMonitor;\n+import org.jabref.preferences.PreferencesService;\n+\n+import de.saxsys.mvvmfx.utils.validation.FunctionBasedValidator;\n+import de.saxsys.mvvmfx.utils.validation.ValidationMessage;\n+import de.saxsys.mvvmfx.utils.validation.ValidationStatus;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class UnlinkedFilesDialogViewModel {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(UnlinkedFilesDialogViewModel.class);\n+\n+    private final ImportHandler importHandler;\n+    private final StringProperty directoryPath = new SimpleStringProperty(\"\");\n+    private final ObjectProperty<FileExtensionViewModel> selectedExtension = new SimpleObjectProperty<>();\n+\n+    private final ObjectProperty<FileNodeViewModel> treeRootProperty = new SimpleObjectProperty<>();\n+    private final SimpleListProperty<TreeItem<FileNodeViewModel>> checkedFileListProperty = new SimpleListProperty<>(FXCollections.observableArrayList());\n+\n+    private final BooleanProperty taskActiveProperty = new SimpleBooleanProperty(false);\n+    private final DoubleProperty progressValueProperty = new SimpleDoubleProperty(0);\n+    private final StringProperty progressTextProperty = new SimpleStringProperty();\n+\n+    private final ObservableList<ImportFilesResultItemViewModel> resultList = FXCollections.observableArrayList();\n+    private final ObservableList<FileExtensionViewModel> fileFilterList;\n+    private final DialogService dialogService;\n+    private final PreferencesService preferences;\n+    private BackgroundTask<FileNodeViewModel> findUnlinkedFilesTask;\n+    private BackgroundTask<List<ImportFilesResultItemViewModel>> importFilesBackgroundTask;\n+\n+    private final BibDatabaseContext bibDatabase;\n+    private final TaskExecutor taskExecutor;\n+\n+    private final FunctionBasedValidator<String> scanDirectoryValidator;\n+\n+    public UnlinkedFilesDialogViewModel(DialogService dialogService, ExternalFileTypes externalFileTypes, UndoManager undoManager,\n+                                        FileUpdateMonitor fileUpdateMonitor, PreferencesService preferences, StateManager stateManager, TaskExecutor taskExecutor) {\n+        this.preferences = preferences;\n+        this.dialogService = dialogService;\n+        this.taskExecutor = taskExecutor;\n+        this.bibDatabase = stateManager.getActiveDatabase().orElseThrow(() -> new NullPointerException(\"Database null\"));\n+        importHandler = new ImportHandler(\n+                dialogService,\n+                bibDatabase,\n+                externalFileTypes,\n+                preferences,\n+                fileUpdateMonitor,\n+                undoManager,\n+                stateManager);\n+\n+        this.fileFilterList = FXCollections.observableArrayList(\n+                new FileExtensionViewModel(StandardFileType.ANY_FILE, externalFileTypes),\n+                new FileExtensionViewModel(StandardFileType.BIBTEX_DB, externalFileTypes),\n+                new FileExtensionViewModel(StandardFileType.PDF, externalFileTypes));\n+\n+        Predicate<String> isDirectory = path -> Files.isDirectory(Path.of(path));\n+        scanDirectoryValidator = new FunctionBasedValidator<>(directoryPath, isDirectory,\n+                ValidationMessage.error(Localization.lang(\"Please enter a valid file path.\")));\n+\n+        treeRootProperty.setValue(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjU0MzU1MQ=="}, "originalCommit": {"oid": "9b28692563bdec847ea814f9d1063373df4b806c"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzI3MjUzMg==", "bodyText": "I took a closer look into the EasyBind package, although there is an OptionalBinding, there seems to be no OptionalProperty. I took the liberty to make this an ObjectProperty<Optional<FileNodeViewModel>>.", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r563272532", "createdAt": "2021-01-24T10:42:40Z", "author": {"login": "calixtus"}, "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogViewModel.java", "diffHunk": "@@ -0,0 +1,269 @@\n+package org.jabref.gui.externalfiles;\n+\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.DirectoryStream.Filter;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import javax.swing.undo.UndoManager;\n+\n+import javafx.beans.property.BooleanProperty;\n+import javafx.beans.property.DoubleProperty;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleBooleanProperty;\n+import javafx.beans.property.SimpleDoubleProperty;\n+import javafx.beans.property.SimpleListProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.beans.property.SimpleStringProperty;\n+import javafx.beans.property.StringProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.control.TreeItem;\n+\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.externalfiletype.ExternalFileTypes;\n+import org.jabref.gui.util.BackgroundTask;\n+import org.jabref.gui.util.DirectoryDialogConfiguration;\n+import org.jabref.gui.util.FileDialogConfiguration;\n+import org.jabref.gui.util.FileNodeViewModel;\n+import org.jabref.gui.util.TaskExecutor;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.logic.util.StandardFileType;\n+import org.jabref.model.database.BibDatabaseContext;\n+import org.jabref.model.util.FileUpdateMonitor;\n+import org.jabref.preferences.PreferencesService;\n+\n+import de.saxsys.mvvmfx.utils.validation.FunctionBasedValidator;\n+import de.saxsys.mvvmfx.utils.validation.ValidationMessage;\n+import de.saxsys.mvvmfx.utils.validation.ValidationStatus;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class UnlinkedFilesDialogViewModel {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(UnlinkedFilesDialogViewModel.class);\n+\n+    private final ImportHandler importHandler;\n+    private final StringProperty directoryPath = new SimpleStringProperty(\"\");\n+    private final ObjectProperty<FileExtensionViewModel> selectedExtension = new SimpleObjectProperty<>();\n+\n+    private final ObjectProperty<FileNodeViewModel> treeRootProperty = new SimpleObjectProperty<>();\n+    private final SimpleListProperty<TreeItem<FileNodeViewModel>> checkedFileListProperty = new SimpleListProperty<>(FXCollections.observableArrayList());\n+\n+    private final BooleanProperty taskActiveProperty = new SimpleBooleanProperty(false);\n+    private final DoubleProperty progressValueProperty = new SimpleDoubleProperty(0);\n+    private final StringProperty progressTextProperty = new SimpleStringProperty();\n+\n+    private final ObservableList<ImportFilesResultItemViewModel> resultList = FXCollections.observableArrayList();\n+    private final ObservableList<FileExtensionViewModel> fileFilterList;\n+    private final DialogService dialogService;\n+    private final PreferencesService preferences;\n+    private BackgroundTask<FileNodeViewModel> findUnlinkedFilesTask;\n+    private BackgroundTask<List<ImportFilesResultItemViewModel>> importFilesBackgroundTask;\n+\n+    private final BibDatabaseContext bibDatabase;\n+    private final TaskExecutor taskExecutor;\n+\n+    private final FunctionBasedValidator<String> scanDirectoryValidator;\n+\n+    public UnlinkedFilesDialogViewModel(DialogService dialogService, ExternalFileTypes externalFileTypes, UndoManager undoManager,\n+                                        FileUpdateMonitor fileUpdateMonitor, PreferencesService preferences, StateManager stateManager, TaskExecutor taskExecutor) {\n+        this.preferences = preferences;\n+        this.dialogService = dialogService;\n+        this.taskExecutor = taskExecutor;\n+        this.bibDatabase = stateManager.getActiveDatabase().orElseThrow(() -> new NullPointerException(\"Database null\"));\n+        importHandler = new ImportHandler(\n+                dialogService,\n+                bibDatabase,\n+                externalFileTypes,\n+                preferences,\n+                fileUpdateMonitor,\n+                undoManager,\n+                stateManager);\n+\n+        this.fileFilterList = FXCollections.observableArrayList(\n+                new FileExtensionViewModel(StandardFileType.ANY_FILE, externalFileTypes),\n+                new FileExtensionViewModel(StandardFileType.BIBTEX_DB, externalFileTypes),\n+                new FileExtensionViewModel(StandardFileType.PDF, externalFileTypes));\n+\n+        Predicate<String> isDirectory = path -> Files.isDirectory(Path.of(path));\n+        scanDirectoryValidator = new FunctionBasedValidator<>(directoryPath, isDirectory,\n+                ValidationMessage.error(Localization.lang(\"Please enter a valid file path.\")));\n+\n+        treeRootProperty.setValue(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjU0MzU1MQ=="}, "originalCommit": {"oid": "9b28692563bdec847ea814f9d1063373df4b806c"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0MjQ4NTcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogViewModel.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxMDo0MTo0NFrOIYe-cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxMzozMjoxN1rOIYkWQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjU0NDI0MQ==", "bodyText": "There is some code dup with the onFinished handler, is still really needed?", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r562544241", "createdAt": "2021-01-22T10:41:44Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogViewModel.java", "diffHunk": "@@ -0,0 +1,269 @@\n+package org.jabref.gui.externalfiles;\n+\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.DirectoryStream.Filter;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import javax.swing.undo.UndoManager;\n+\n+import javafx.beans.property.BooleanProperty;\n+import javafx.beans.property.DoubleProperty;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleBooleanProperty;\n+import javafx.beans.property.SimpleDoubleProperty;\n+import javafx.beans.property.SimpleListProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.beans.property.SimpleStringProperty;\n+import javafx.beans.property.StringProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.control.TreeItem;\n+\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.externalfiletype.ExternalFileTypes;\n+import org.jabref.gui.util.BackgroundTask;\n+import org.jabref.gui.util.DirectoryDialogConfiguration;\n+import org.jabref.gui.util.FileDialogConfiguration;\n+import org.jabref.gui.util.FileNodeViewModel;\n+import org.jabref.gui.util.TaskExecutor;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.logic.util.StandardFileType;\n+import org.jabref.model.database.BibDatabaseContext;\n+import org.jabref.model.util.FileUpdateMonitor;\n+import org.jabref.preferences.PreferencesService;\n+\n+import de.saxsys.mvvmfx.utils.validation.FunctionBasedValidator;\n+import de.saxsys.mvvmfx.utils.validation.ValidationMessage;\n+import de.saxsys.mvvmfx.utils.validation.ValidationStatus;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class UnlinkedFilesDialogViewModel {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(UnlinkedFilesDialogViewModel.class);\n+\n+    private final ImportHandler importHandler;\n+    private final StringProperty directoryPath = new SimpleStringProperty(\"\");\n+    private final ObjectProperty<FileExtensionViewModel> selectedExtension = new SimpleObjectProperty<>();\n+\n+    private final ObjectProperty<FileNodeViewModel> treeRootProperty = new SimpleObjectProperty<>();\n+    private final SimpleListProperty<TreeItem<FileNodeViewModel>> checkedFileListProperty = new SimpleListProperty<>(FXCollections.observableArrayList());\n+\n+    private final BooleanProperty taskActiveProperty = new SimpleBooleanProperty(false);\n+    private final DoubleProperty progressValueProperty = new SimpleDoubleProperty(0);\n+    private final StringProperty progressTextProperty = new SimpleStringProperty();\n+\n+    private final ObservableList<ImportFilesResultItemViewModel> resultList = FXCollections.observableArrayList();\n+    private final ObservableList<FileExtensionViewModel> fileFilterList;\n+    private final DialogService dialogService;\n+    private final PreferencesService preferences;\n+    private BackgroundTask<FileNodeViewModel> findUnlinkedFilesTask;\n+    private BackgroundTask<List<ImportFilesResultItemViewModel>> importFilesBackgroundTask;\n+\n+    private final BibDatabaseContext bibDatabase;\n+    private final TaskExecutor taskExecutor;\n+\n+    private final FunctionBasedValidator<String> scanDirectoryValidator;\n+\n+    public UnlinkedFilesDialogViewModel(DialogService dialogService, ExternalFileTypes externalFileTypes, UndoManager undoManager,\n+                                        FileUpdateMonitor fileUpdateMonitor, PreferencesService preferences, StateManager stateManager, TaskExecutor taskExecutor) {\n+        this.preferences = preferences;\n+        this.dialogService = dialogService;\n+        this.taskExecutor = taskExecutor;\n+        this.bibDatabase = stateManager.getActiveDatabase().orElseThrow(() -> new NullPointerException(\"Database null\"));\n+        importHandler = new ImportHandler(\n+                dialogService,\n+                bibDatabase,\n+                externalFileTypes,\n+                preferences,\n+                fileUpdateMonitor,\n+                undoManager,\n+                stateManager);\n+\n+        this.fileFilterList = FXCollections.observableArrayList(\n+                new FileExtensionViewModel(StandardFileType.ANY_FILE, externalFileTypes),\n+                new FileExtensionViewModel(StandardFileType.BIBTEX_DB, externalFileTypes),\n+                new FileExtensionViewModel(StandardFileType.PDF, externalFileTypes));\n+\n+        Predicate<String> isDirectory = path -> Files.isDirectory(Path.of(path));\n+        scanDirectoryValidator = new FunctionBasedValidator<>(directoryPath, isDirectory,\n+                ValidationMessage.error(Localization.lang(\"Please enter a valid file path.\")));\n+\n+        treeRootProperty.setValue(null);\n+    }\n+\n+    public void startSearch() {\n+        Path directory = this.getSearchDirectory();\n+        Filter<Path> selectedFileFilter = selectedExtension.getValue().dirFilter();\n+\n+        progressValueProperty.unbind();\n+        progressTextProperty.unbind();\n+\n+        findUnlinkedFilesTask = new UnlinkedFilesCrawler(directory, selectedFileFilter, bibDatabase, preferences.getFilePreferences())\n+                .onRunning(() -> {\n+                    progressValueProperty.set(ProgressIndicator.INDETERMINATE_PROGRESS);\n+                    progressTextProperty.setValue(Localization.lang(\"Searching file system...\"));\n+                    progressTextProperty.bind(findUnlinkedFilesTask.messageProperty());\n+                    taskActiveProperty.setValue(true);\n+                    treeRootProperty.setValue(null);\n+                })\n+                .onFinished(() -> {\n+                    progressValueProperty.set(0);\n+                    taskActiveProperty.setValue(false);\n+                })\n+                .onSuccess(root -> {\n+                    progressValueProperty.set(0);\n+                    taskActiveProperty.setValue(false);\n+                    treeRootProperty.setValue(root);\n+                });\n+        findUnlinkedFilesTask.executeWith(taskExecutor);\n+    }\n+\n+    public void startImport() {\n+        List<Path> fileList = checkedFileListProperty.stream()\n+                                                     .map(item -> item.getValue().getPath())\n+                                                     .filter(path -> path.toFile().isFile())\n+                                                     .collect(Collectors.toList());\n+        if (fileList.isEmpty()) {\n+            LOGGER.warn(\"There are no valid files checked\");\n+            return;\n+        }\n+        resultList.clear();\n+\n+        importFilesBackgroundTask = importHandler.importFilesInBackground(fileList)\n+                                                 .onRunning(() -> {\n+                                                     progressValueProperty.bind(importFilesBackgroundTask.workDonePercentageProperty());\n+                                                     progressTextProperty.bind(importFilesBackgroundTask.messageProperty());\n+                                                     taskActiveProperty.setValue(true);\n+                                                 })\n+                                                 .onFinished(() -> {\n+                                                     progressValueProperty.unbind();\n+                                                     progressTextProperty.unbind();\n+                                                     taskActiveProperty.setValue(false);\n+                                                 })\n+                                                 .onSuccess(results -> {\n+                                                     progressValueProperty.unbind();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b28692563bdec847ea814f9d1063373df4b806c"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjU4MjA5NA==", "bodyText": "onFinished is called when the task exited but with not sucesss", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r562582094", "createdAt": "2021-01-22T11:55:00Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogViewModel.java", "diffHunk": "@@ -0,0 +1,269 @@\n+package org.jabref.gui.externalfiles;\n+\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.DirectoryStream.Filter;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import javax.swing.undo.UndoManager;\n+\n+import javafx.beans.property.BooleanProperty;\n+import javafx.beans.property.DoubleProperty;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleBooleanProperty;\n+import javafx.beans.property.SimpleDoubleProperty;\n+import javafx.beans.property.SimpleListProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.beans.property.SimpleStringProperty;\n+import javafx.beans.property.StringProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.control.TreeItem;\n+\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.externalfiletype.ExternalFileTypes;\n+import org.jabref.gui.util.BackgroundTask;\n+import org.jabref.gui.util.DirectoryDialogConfiguration;\n+import org.jabref.gui.util.FileDialogConfiguration;\n+import org.jabref.gui.util.FileNodeViewModel;\n+import org.jabref.gui.util.TaskExecutor;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.logic.util.StandardFileType;\n+import org.jabref.model.database.BibDatabaseContext;\n+import org.jabref.model.util.FileUpdateMonitor;\n+import org.jabref.preferences.PreferencesService;\n+\n+import de.saxsys.mvvmfx.utils.validation.FunctionBasedValidator;\n+import de.saxsys.mvvmfx.utils.validation.ValidationMessage;\n+import de.saxsys.mvvmfx.utils.validation.ValidationStatus;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class UnlinkedFilesDialogViewModel {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(UnlinkedFilesDialogViewModel.class);\n+\n+    private final ImportHandler importHandler;\n+    private final StringProperty directoryPath = new SimpleStringProperty(\"\");\n+    private final ObjectProperty<FileExtensionViewModel> selectedExtension = new SimpleObjectProperty<>();\n+\n+    private final ObjectProperty<FileNodeViewModel> treeRootProperty = new SimpleObjectProperty<>();\n+    private final SimpleListProperty<TreeItem<FileNodeViewModel>> checkedFileListProperty = new SimpleListProperty<>(FXCollections.observableArrayList());\n+\n+    private final BooleanProperty taskActiveProperty = new SimpleBooleanProperty(false);\n+    private final DoubleProperty progressValueProperty = new SimpleDoubleProperty(0);\n+    private final StringProperty progressTextProperty = new SimpleStringProperty();\n+\n+    private final ObservableList<ImportFilesResultItemViewModel> resultList = FXCollections.observableArrayList();\n+    private final ObservableList<FileExtensionViewModel> fileFilterList;\n+    private final DialogService dialogService;\n+    private final PreferencesService preferences;\n+    private BackgroundTask<FileNodeViewModel> findUnlinkedFilesTask;\n+    private BackgroundTask<List<ImportFilesResultItemViewModel>> importFilesBackgroundTask;\n+\n+    private final BibDatabaseContext bibDatabase;\n+    private final TaskExecutor taskExecutor;\n+\n+    private final FunctionBasedValidator<String> scanDirectoryValidator;\n+\n+    public UnlinkedFilesDialogViewModel(DialogService dialogService, ExternalFileTypes externalFileTypes, UndoManager undoManager,\n+                                        FileUpdateMonitor fileUpdateMonitor, PreferencesService preferences, StateManager stateManager, TaskExecutor taskExecutor) {\n+        this.preferences = preferences;\n+        this.dialogService = dialogService;\n+        this.taskExecutor = taskExecutor;\n+        this.bibDatabase = stateManager.getActiveDatabase().orElseThrow(() -> new NullPointerException(\"Database null\"));\n+        importHandler = new ImportHandler(\n+                dialogService,\n+                bibDatabase,\n+                externalFileTypes,\n+                preferences,\n+                fileUpdateMonitor,\n+                undoManager,\n+                stateManager);\n+\n+        this.fileFilterList = FXCollections.observableArrayList(\n+                new FileExtensionViewModel(StandardFileType.ANY_FILE, externalFileTypes),\n+                new FileExtensionViewModel(StandardFileType.BIBTEX_DB, externalFileTypes),\n+                new FileExtensionViewModel(StandardFileType.PDF, externalFileTypes));\n+\n+        Predicate<String> isDirectory = path -> Files.isDirectory(Path.of(path));\n+        scanDirectoryValidator = new FunctionBasedValidator<>(directoryPath, isDirectory,\n+                ValidationMessage.error(Localization.lang(\"Please enter a valid file path.\")));\n+\n+        treeRootProperty.setValue(null);\n+    }\n+\n+    public void startSearch() {\n+        Path directory = this.getSearchDirectory();\n+        Filter<Path> selectedFileFilter = selectedExtension.getValue().dirFilter();\n+\n+        progressValueProperty.unbind();\n+        progressTextProperty.unbind();\n+\n+        findUnlinkedFilesTask = new UnlinkedFilesCrawler(directory, selectedFileFilter, bibDatabase, preferences.getFilePreferences())\n+                .onRunning(() -> {\n+                    progressValueProperty.set(ProgressIndicator.INDETERMINATE_PROGRESS);\n+                    progressTextProperty.setValue(Localization.lang(\"Searching file system...\"));\n+                    progressTextProperty.bind(findUnlinkedFilesTask.messageProperty());\n+                    taskActiveProperty.setValue(true);\n+                    treeRootProperty.setValue(null);\n+                })\n+                .onFinished(() -> {\n+                    progressValueProperty.set(0);\n+                    taskActiveProperty.setValue(false);\n+                })\n+                .onSuccess(root -> {\n+                    progressValueProperty.set(0);\n+                    taskActiveProperty.setValue(false);\n+                    treeRootProperty.setValue(root);\n+                });\n+        findUnlinkedFilesTask.executeWith(taskExecutor);\n+    }\n+\n+    public void startImport() {\n+        List<Path> fileList = checkedFileListProperty.stream()\n+                                                     .map(item -> item.getValue().getPath())\n+                                                     .filter(path -> path.toFile().isFile())\n+                                                     .collect(Collectors.toList());\n+        if (fileList.isEmpty()) {\n+            LOGGER.warn(\"There are no valid files checked\");\n+            return;\n+        }\n+        resultList.clear();\n+\n+        importFilesBackgroundTask = importHandler.importFilesInBackground(fileList)\n+                                                 .onRunning(() -> {\n+                                                     progressValueProperty.bind(importFilesBackgroundTask.workDonePercentageProperty());\n+                                                     progressTextProperty.bind(importFilesBackgroundTask.messageProperty());\n+                                                     taskActiveProperty.setValue(true);\n+                                                 })\n+                                                 .onFinished(() -> {\n+                                                     progressValueProperty.unbind();\n+                                                     progressTextProperty.unbind();\n+                                                     taskActiveProperty.setValue(false);\n+                                                 })\n+                                                 .onSuccess(results -> {\n+                                                     progressValueProperty.unbind();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjU0NDI0MQ=="}, "originalCommit": {"oid": "9b28692563bdec847ea814f9d1063373df4b806c"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjYzMjI1Nw==", "bodyText": "If I understand \n  \n    \n      jabref/src/main/java/org/jabref/gui/util/BackgroundTask.java\n    \n    \n        Lines 156 to 162\n      in\n      c8f7be8\n    \n    \n    \n    \n\n        \n          \n           Consumer<V> getOnSuccess() { \n        \n\n        \n          \n               return chain(onFinished, onSuccess); \n        \n\n        \n          \n           } \n        \n\n        \n          \n            \n        \n\n        \n          \n           Consumer<Exception> getOnException() { \n        \n\n        \n          \n               return chain(onFinished, onException); \n        \n\n        \n          \n           } \n        \n    \n  \n\n correctly, then onFinished is always called regardless of if it was a success or an error.", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r562632257", "createdAt": "2021-01-22T13:32:17Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogViewModel.java", "diffHunk": "@@ -0,0 +1,269 @@\n+package org.jabref.gui.externalfiles;\n+\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.DirectoryStream.Filter;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import javax.swing.undo.UndoManager;\n+\n+import javafx.beans.property.BooleanProperty;\n+import javafx.beans.property.DoubleProperty;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleBooleanProperty;\n+import javafx.beans.property.SimpleDoubleProperty;\n+import javafx.beans.property.SimpleListProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.beans.property.SimpleStringProperty;\n+import javafx.beans.property.StringProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.control.TreeItem;\n+\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.externalfiletype.ExternalFileTypes;\n+import org.jabref.gui.util.BackgroundTask;\n+import org.jabref.gui.util.DirectoryDialogConfiguration;\n+import org.jabref.gui.util.FileDialogConfiguration;\n+import org.jabref.gui.util.FileNodeViewModel;\n+import org.jabref.gui.util.TaskExecutor;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.logic.util.StandardFileType;\n+import org.jabref.model.database.BibDatabaseContext;\n+import org.jabref.model.util.FileUpdateMonitor;\n+import org.jabref.preferences.PreferencesService;\n+\n+import de.saxsys.mvvmfx.utils.validation.FunctionBasedValidator;\n+import de.saxsys.mvvmfx.utils.validation.ValidationMessage;\n+import de.saxsys.mvvmfx.utils.validation.ValidationStatus;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class UnlinkedFilesDialogViewModel {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(UnlinkedFilesDialogViewModel.class);\n+\n+    private final ImportHandler importHandler;\n+    private final StringProperty directoryPath = new SimpleStringProperty(\"\");\n+    private final ObjectProperty<FileExtensionViewModel> selectedExtension = new SimpleObjectProperty<>();\n+\n+    private final ObjectProperty<FileNodeViewModel> treeRootProperty = new SimpleObjectProperty<>();\n+    private final SimpleListProperty<TreeItem<FileNodeViewModel>> checkedFileListProperty = new SimpleListProperty<>(FXCollections.observableArrayList());\n+\n+    private final BooleanProperty taskActiveProperty = new SimpleBooleanProperty(false);\n+    private final DoubleProperty progressValueProperty = new SimpleDoubleProperty(0);\n+    private final StringProperty progressTextProperty = new SimpleStringProperty();\n+\n+    private final ObservableList<ImportFilesResultItemViewModel> resultList = FXCollections.observableArrayList();\n+    private final ObservableList<FileExtensionViewModel> fileFilterList;\n+    private final DialogService dialogService;\n+    private final PreferencesService preferences;\n+    private BackgroundTask<FileNodeViewModel> findUnlinkedFilesTask;\n+    private BackgroundTask<List<ImportFilesResultItemViewModel>> importFilesBackgroundTask;\n+\n+    private final BibDatabaseContext bibDatabase;\n+    private final TaskExecutor taskExecutor;\n+\n+    private final FunctionBasedValidator<String> scanDirectoryValidator;\n+\n+    public UnlinkedFilesDialogViewModel(DialogService dialogService, ExternalFileTypes externalFileTypes, UndoManager undoManager,\n+                                        FileUpdateMonitor fileUpdateMonitor, PreferencesService preferences, StateManager stateManager, TaskExecutor taskExecutor) {\n+        this.preferences = preferences;\n+        this.dialogService = dialogService;\n+        this.taskExecutor = taskExecutor;\n+        this.bibDatabase = stateManager.getActiveDatabase().orElseThrow(() -> new NullPointerException(\"Database null\"));\n+        importHandler = new ImportHandler(\n+                dialogService,\n+                bibDatabase,\n+                externalFileTypes,\n+                preferences,\n+                fileUpdateMonitor,\n+                undoManager,\n+                stateManager);\n+\n+        this.fileFilterList = FXCollections.observableArrayList(\n+                new FileExtensionViewModel(StandardFileType.ANY_FILE, externalFileTypes),\n+                new FileExtensionViewModel(StandardFileType.BIBTEX_DB, externalFileTypes),\n+                new FileExtensionViewModel(StandardFileType.PDF, externalFileTypes));\n+\n+        Predicate<String> isDirectory = path -> Files.isDirectory(Path.of(path));\n+        scanDirectoryValidator = new FunctionBasedValidator<>(directoryPath, isDirectory,\n+                ValidationMessage.error(Localization.lang(\"Please enter a valid file path.\")));\n+\n+        treeRootProperty.setValue(null);\n+    }\n+\n+    public void startSearch() {\n+        Path directory = this.getSearchDirectory();\n+        Filter<Path> selectedFileFilter = selectedExtension.getValue().dirFilter();\n+\n+        progressValueProperty.unbind();\n+        progressTextProperty.unbind();\n+\n+        findUnlinkedFilesTask = new UnlinkedFilesCrawler(directory, selectedFileFilter, bibDatabase, preferences.getFilePreferences())\n+                .onRunning(() -> {\n+                    progressValueProperty.set(ProgressIndicator.INDETERMINATE_PROGRESS);\n+                    progressTextProperty.setValue(Localization.lang(\"Searching file system...\"));\n+                    progressTextProperty.bind(findUnlinkedFilesTask.messageProperty());\n+                    taskActiveProperty.setValue(true);\n+                    treeRootProperty.setValue(null);\n+                })\n+                .onFinished(() -> {\n+                    progressValueProperty.set(0);\n+                    taskActiveProperty.setValue(false);\n+                })\n+                .onSuccess(root -> {\n+                    progressValueProperty.set(0);\n+                    taskActiveProperty.setValue(false);\n+                    treeRootProperty.setValue(root);\n+                });\n+        findUnlinkedFilesTask.executeWith(taskExecutor);\n+    }\n+\n+    public void startImport() {\n+        List<Path> fileList = checkedFileListProperty.stream()\n+                                                     .map(item -> item.getValue().getPath())\n+                                                     .filter(path -> path.toFile().isFile())\n+                                                     .collect(Collectors.toList());\n+        if (fileList.isEmpty()) {\n+            LOGGER.warn(\"There are no valid files checked\");\n+            return;\n+        }\n+        resultList.clear();\n+\n+        importFilesBackgroundTask = importHandler.importFilesInBackground(fileList)\n+                                                 .onRunning(() -> {\n+                                                     progressValueProperty.bind(importFilesBackgroundTask.workDonePercentageProperty());\n+                                                     progressTextProperty.bind(importFilesBackgroundTask.messageProperty());\n+                                                     taskActiveProperty.setValue(true);\n+                                                 })\n+                                                 .onFinished(() -> {\n+                                                     progressValueProperty.unbind();\n+                                                     progressTextProperty.unbind();\n+                                                     taskActiveProperty.setValue(false);\n+                                                 })\n+                                                 .onSuccess(results -> {\n+                                                     progressValueProperty.unbind();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjU0NDI0MQ=="}, "originalCommit": {"oid": "9b28692563bdec847ea814f9d1063373df4b806c"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0MjUwMTc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/util/FileFilterConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxMDo0NjoxNlrOIYfIIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxMDo0NjoxNlrOIYfIIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjU0NjcyMA==", "bodyText": "pathname rename to path", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r562546720", "createdAt": "2021-01-22T10:46:16Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/util/FileFilterConverter.java", "diffHunk": "@@ -76,4 +83,19 @@ public static FileFilter toFileFilter(FileChooser.ExtensionFilter extensionFilte\n                                        .orElse(false);\n         }\n     }\n+\n+    public static Filter<Path> toDirFilter(List<String> extensions) {\n+        List<String> extensionsCleaned = extensions.stream()\n+                                                   .map(extension -> extension.replace(\".\", \"\").replace(\"*\", \"\"))\n+                                                   .filter(StringUtil::isNotBlank)\n+                                                   .collect(Collectors.toList());\n+        if (extensionsCleaned.isEmpty()) {\n+            // Except every file\n+            return pathname -> true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b28692563bdec847ea814f9d1063373df4b806c"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0MjUwMzg4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/util/FileFilterConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxMDo0Njo1OFrOIYfJaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxMDo0Njo1OFrOIYfJaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjU0NzA0OQ==", "bodyText": "Is it not possible to reuse the toDirFilter here? They are almost the same code. Something like\nfilter = toDirFilter(extensions);\nreturn file -> filter.apply(file.toPath())", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r562547049", "createdAt": "2021-01-22T10:46:58Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/util/FileFilterConverter.java", "diffHunk": "@@ -62,11 +64,16 @@ private FileFilterConverter() {\n     }\n \n     public static FileFilter toFileFilter(FileChooser.ExtensionFilter extensionFilter) {\n-        List<String> extensionsCleaned = extensionFilter.getExtensions()\n-                                                        .stream()\n-                                                        .map(extension -> extension.replace(\".\", \"\").replace(\"*\", \"\"))\n-                                                        .filter(StringUtil::isNotBlank)\n-                                                        .collect(Collectors.toList());\n+        return toFileFilter(extensionFilter.getExtensions());\n+    }\n+\n+    // Implement as DirectoryStream https://docs.oracle.com/javase/9/docs/api/java/nio/file/DirectoryStream.Filter.html\n+\n+    public static FileFilter toFileFilter(List<String> extensions) {\n+        List<String> extensionsCleaned = extensions.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b28692563bdec847ea814f9d1063373df4b806c"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2143, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}