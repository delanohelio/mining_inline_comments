{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwMTQ5NTcx", "number": 6022, "title": "Add month normalization to AstroPhysicsFetcher", "bodyText": "", "createdAt": "2020-02-26T10:46:49Z", "url": "https://github.com/JabRef/jabref/pull/6022", "merged": true, "mergeCommit": {"oid": "d9a80880080cc906a43ff666db92e438496f4f14"}, "closed": true, "closedAt": "2020-03-06T09:58:33Z", "author": {"login": "koppor"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcIVpF7AH2gAyMzgwMTQ5NTcxOmQyZjVkNjc3NDA0NDk3ZDA5MDBmM2NhMDFiOWRiZmUxMzViZjZhNzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcJfT77ABqjMwODU4NjAzMDQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d2f5d677404497d0900f3ca01b9dbfe135bf6a70", "author": {"user": {"login": "koppor", "name": "Oliver Kopp"}}, "url": "https://github.com/JabRef/jabref/commit/d2f5d677404497d0900f3ca01b9dbfe135bf6a70", "committedDate": "2020-02-27T06:50:22Z", "message": "Try to normalize month"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "79b8197405c8211dabb76dd21e510eb99908010b", "author": {"user": {"login": "koppor", "name": "Oliver Kopp"}}, "url": "https://github.com/JabRef/jabref/commit/79b8197405c8211dabb76dd21e510eb99908010b", "committedDate": "2020-02-26T09:59:33Z", "message": "Try to normalize month"}, "afterCommit": {"oid": "d2f5d677404497d0900f3ca01b9dbfe135bf6a70", "author": {"user": {"login": "koppor", "name": "Oliver Kopp"}}, "url": "https://github.com/JabRef/jabref/commit/d2f5d677404497d0900f3ca01b9dbfe135bf6a70", "committedDate": "2020-02-27T06:50:22Z", "message": "Try to normalize month"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2ODgzMDY4", "url": "https://github.com/JabRef/jabref/pull/6022#pullrequestreview-366883068", "createdAt": "2020-03-01T20:11:38Z", "commit": {"oid": "5418f526664005f69e576ca8dee85ee8b3a720d8"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMDoxMTozOFrOFwP6wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMDoxNjowMFrOFwP76A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzNjc2OQ==", "bodyText": "Not sure about our convention, but I don't think we should strive for converting every for loop now to streams just for the sake of it. (Maybe it's just my personal bias and I usually have a harder time to unravel a lot of filter/map combinations that some old-fanished for loop with ifs...)", "url": "https://github.com/JabRef/jabref/pull/6022#discussion_r386136769", "createdAt": "2020-03-01T20:11:38Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/model/cleanup/FieldFormatterCleanup.java", "diffHunk": "@@ -71,28 +69,18 @@ public FieldFormatterCleanup(Field field, Formatter formatter) {\n     }\n \n     private List<FieldChange> cleanupAllFields(BibEntry entry) {\n-        List<FieldChange> fieldChanges = new ArrayList<>();\n-\n-        for (Field fieldKey : entry.getFields()) {\n-            if (!fieldKey.equals(InternalField.KEY_FIELD)) {\n-                fieldChanges.addAll(cleanupSingleField(fieldKey, entry));\n-            }\n-        }\n-\n-        return fieldChanges;\n+        return entry.getFields().stream()\n+             .filter(field -> !field.equals(InternalField.KEY_FIELD))\n+             .flatMap(field -> cleanupSingleField(field, entry).stream())\n+             .collect(Collectors.toList());\n     }\n \n     private List<FieldChange> cleanupAllTextFields(BibEntry entry) {\n-        List<FieldChange> fieldChanges = new ArrayList<>();\n-        Set<Field> fields = new HashSet<>(entry.getFields());\n-        fields.removeAll(FieldFactory.getNotTextFieldNames());\n-        for (Field fieldKey : fields) {\n-            if (!fieldKey.equals(InternalField.KEY_FIELD)) {\n-                fieldChanges.addAll(cleanupSingleField(fieldKey, entry));\n-            }\n-        }\n-\n-        return fieldChanges;\n+        return entry.getFields().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5418f526664005f69e576ca8dee85ee8b3a720d8"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzNjg0MQ==", "bodyText": "Can you please leave the throws Exception. It's good practice to have them so that adding an exception to the method under test doesn't need a change of the test.", "url": "https://github.com/JabRef/jabref/pull/6022#discussion_r386136841", "createdAt": "2020-03-01T20:12:49Z", "author": {"login": "tobiasdiez"}, "path": "src/test/java/org/jabref/logic/cleanup/FieldFormatterCleanupTest.java", "diffHunk": "@@ -39,7 +39,7 @@ public void setUp() {\n     }\n \n     @Test\n-    public void testInternalAllField() throws Exception {\n+    public void testInternalAllField() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5418f526664005f69e576ca8dee85ee8b3a720d8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzNzA2NA==", "bodyText": "I'm a bit undecided about this one, but we had the standing convention that feature tests should specify the data in the returned entry as explicit as possible (i.e. we really want to test that the data is in the right format in the right field). Since the setMonth performs a bit of magic, this change is against this convention.\nOn the other hand, it's a bit more readable / invariant under changes.  Nonetheless I would slightly prefer a setField solution.", "url": "https://github.com/JabRef/jabref/pull/6022#discussion_r386137064", "createdAt": "2020-03-01T20:16:00Z", "author": {"login": "tobiasdiez"}, "path": "src/test/java/org/jabref/logic/importer/fetcher/AstrophysicsDataSystemTest.java", "diffHunk": "@@ -42,7 +43,7 @@ public void setUp() throws Exception {\n         diezSliceTheoremEntry.setField(StandardField.EPRINT, \"1812.04698\");\n         diezSliceTheoremEntry.setField(StandardField.JOURNAL, \"arXiv e-prints\");\n         diezSliceTheoremEntry.setField(StandardField.KEYWORDS, \"Mathematics - Differential Geometry, Mathematical Physics, 58B25, (58D19, 58B20, 22E99, 58A35)\");\n-        diezSliceTheoremEntry.setField(StandardField.MONTH, \"Dec\");\n+        diezSliceTheoremEntry.setMonth(Month.DECEMBER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5418f526664005f69e576ca8dee85ee8b3a720d8"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f178b12a1ff552e98867b4026bd95b9a00f9ed1", "author": {"user": {"login": "koppor", "name": "Oliver Kopp"}}, "url": "https://github.com/JabRef/jabref/commit/2f178b12a1ff552e98867b4026bd95b9a00f9ed1", "committedDate": "2020-03-01T20:39:49Z", "message": "Use Collections.emptyList instead of new ArrayList"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0f0d2261c109816bbde326ff44f0ef96348bacc", "author": {"user": {"login": "koppor", "name": "Oliver Kopp"}}, "url": "https://github.com/JabRef/jabref/commit/d0f0d2261c109816bbde326ff44f0ef96348bacc", "committedDate": "2020-03-01T20:39:53Z", "message": "Add comment on \"toString()\" (and format other comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2d560b83a11d640847e5fe6c64333c16a6ee366", "author": {"user": {"login": "koppor", "name": "Oliver Kopp"}}, "url": "https://github.com/JabRef/jabref/commit/b2d560b83a11d640847e5fe6c64333c16a6ee366", "committedDate": "2020-03-01T20:39:53Z", "message": "Add addtional tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5418f526664005f69e576ca8dee85ee8b3a720d8", "author": {"user": {"login": "koppor", "name": "Oliver Kopp"}}, "url": "https://github.com/JabRef/jabref/commit/5418f526664005f69e576ca8dee85ee8b3a720d8", "committedDate": "2020-03-01T20:00:18Z", "message": "Fix checkstyle"}, "afterCommit": {"oid": "b2d560b83a11d640847e5fe6c64333c16a6ee366", "author": {"user": {"login": "koppor", "name": "Oliver Kopp"}}, "url": "https://github.com/JabRef/jabref/commit/b2d560b83a11d640847e5fe6c64333c16a6ee366", "committedDate": "2020-03-01T20:39:53Z", "message": "Add addtional tests"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 368, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}