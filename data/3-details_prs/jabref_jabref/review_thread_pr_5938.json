{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczOTYwOTkw", "number": 5938, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNzo0NTo0OVrODfEyxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNjoxNDo1NVrODf8UhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTEwOTgyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/search/SearchQuery.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNzo0NTo0OVrOFokY5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNzo0NTo0OVrOFokY5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA4MzU1Nw==", "bodyText": "Better is to use an enum here, eg.. EscapMode, with java and javascript as values:\nhttps://www.teamten.com/lawrence/programming/prefer-enums-over-booleans.html", "url": "https://github.com/JabRef/jabref/pull/5938#discussion_r378083557", "createdAt": "2020-02-12T07:45:49Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/logic/search/SearchQuery.java", "diffHunk": "@@ -124,6 +127,18 @@ public boolean isRegularExpression() {\n \n     // Returns a regular expression pattern in the form (w1)|(w2)| ... wi are escaped if no regular expression search is enabled\n     public Optional<Pattern> getPatternForWords() {\n+        return joinWordsToPattern(false);\n+    }\n+\n+    // Returns a regular expression pattern in the form (w1)|(w2)| ... wi are escaped for javascript if no regular expression search is enabled\n+    public Optional<Pattern> getJsPatternForWords() {\n+        return joinWordsToPattern(true);\n+    }\n+\n+    /* Returns a regular expression pattern in the form (w1)|(w2)| ... wi are escaped if no regular expression search is enabled\n+     * @param escapeSpecialCharsForJS whether to escape characters in wi for javascript regexp (escaping all special characters) or for java (using \\Q and \\E)\n+     */\n+    private Optional<Pattern> joinWordsToPattern(boolean escapeSpecialCharsForJS) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6852088012703b2f3a3a0d3e19e88bfe82ae3a"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTExMjE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/search/SearchQuery.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNzo0NzowM1rOFokaYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNzo0NzowM1rOFokaYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA4MzkzOQ==", "bodyText": "You can use Pattern.compile to gain some performace improvements here", "url": "https://github.com/JabRef/jabref/pull/5938#discussion_r378083939", "createdAt": "2020-02-12T07:47:03Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/logic/search/SearchQuery.java", "diffHunk": "@@ -18,6 +18,9 @@\n \n public class SearchQuery implements SearchMatcher {\n \n+    // regexp pattern for escaping special characters in javascript regex\n+    public static final String JAVASCRIPT_ESCAPED_CHARS_PATTERN = \"[\\\\.\\\\*\\\\+\\\\?\\\\^\\\\$\\\\{\\\\}\\\\(\\\\)\\\\|\\\\[\\\\]\\\\\\\\/]\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6852088012703b2f3a3a0d3e19e88bfe82ae3a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTExMzUwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/search/SearchQuery.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNzo0Nzo0MVrOFokbKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNzo0Nzo0MVrOFokbKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA4NDEzOQ==", "bodyText": "Please extract this to a regular if-else, it's easier to understand on the first look than this chained conditions", "url": "https://github.com/JabRef/jabref/pull/5938#discussion_r378084139", "createdAt": "2020-02-12T07:47:41Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/logic/search/SearchQuery.java", "diffHunk": "@@ -133,7 +148,7 @@ public boolean isRegularExpression() {\n         // compile the words to a regular expression in the form (w1)|(w2)|(w3)\n         StringJoiner joiner = new StringJoiner(\")|(\", \"(\", \")\");\n         for (String word : words) {\n-            joiner.add(regularExpression ? word : Pattern.quote(word));\n+            joiner.add(regularExpression ? word : (escapeSpecialCharsForJS ? word.replaceAll(JAVASCRIPT_ESCAPED_CHARS_PATTERN, \"\\\\\\\\$0\") : Pattern.quote(word)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6852088012703b2f3a3a0d3e19e88bfe82ae3a"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MDYwMDMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/search/SearchQuery.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNToxNjoyOFrOFoylCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDozMDozMlrOFo9iuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMxNjA0MA==", "bodyText": "Isn't checkstyle complaining about putting this in two lines? Has no effect, but looks somewhat odd...", "url": "https://github.com/JabRef/jabref/pull/5938#discussion_r378316040", "createdAt": "2020-02-12T15:16:28Z", "author": {"login": "calixtus"}, "path": "src/main/java/org/jabref/logic/search/SearchQuery.java", "diffHunk": "@@ -133,7 +164,21 @@ public boolean isRegularExpression() {\n         // compile the words to a regular expression in the form (w1)|(w2)|(w3)\n         StringJoiner joiner = new StringJoiner(\")|(\", \"(\", \")\");\n         for (String word : words) {\n-            joiner.add(regularExpression ? word : Pattern.quote(word));\n+            if (regularExpression) {\n+                joiner.add(word);\n+            }\n+            else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89c72c05dd881133ee6a667d9c78ec503566cf5a"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ5NTY3NQ==", "bodyText": "Yeah, it's a mistake, I'll change it. Also looks odd to me. Checkstyle wasn't complaining.", "url": "https://github.com/JabRef/jabref/pull/5938#discussion_r378495675", "createdAt": "2020-02-12T20:30:32Z", "author": {"login": "dawidm"}, "path": "src/main/java/org/jabref/logic/search/SearchQuery.java", "diffHunk": "@@ -133,7 +164,21 @@ public boolean isRegularExpression() {\n         // compile the words to a regular expression in the form (w1)|(w2)|(w3)\n         StringJoiner joiner = new StringJoiner(\")|(\", \"(\", \")\");\n         for (String word : words) {\n-            joiner.add(regularExpression ? word : Pattern.quote(word));\n+            if (regularExpression) {\n+                joiner.add(word);\n+            }\n+            else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMxNjA0MA=="}, "originalCommit": {"oid": "89c72c05dd881133ee6a667d9c78ec503566cf5a"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MDYzODQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/search/SearchQuery.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNToyNTozOFrOFoy80A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNToyNTozOFrOFoy80A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMyMjEyOA==", "bodyText": "IMHO, although \"Js\" is quite obvious, I would reword that to getJavaScriptPatternForWords, since you are creating a new Method just for the sole purpose to make its use more obvious in it's name. So why not go all the way?", "url": "https://github.com/JabRef/jabref/pull/5938#discussion_r378322128", "createdAt": "2020-02-12T15:25:38Z", "author": {"login": "calixtus"}, "path": "src/main/java/org/jabref/logic/search/SearchQuery.java", "diffHunk": "@@ -124,6 +143,18 @@ public boolean isRegularExpression() {\n \n     // Returns a regular expression pattern in the form (w1)|(w2)| ... wi are escaped if no regular expression search is enabled\n     public Optional<Pattern> getPatternForWords() {\n+        return joinWordsToPattern(EscapeMode.JAVA);\n+    }\n+\n+    // Returns a regular expression pattern in the form (w1)|(w2)| ... wi are escaped for javascript if no regular expression search is enabled\n+    public Optional<Pattern> getJsPatternForWords() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89c72c05dd881133ee6a667d9c78ec503566cf5a"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTM0OTA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/search/SearchQuery.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODozNTo0OVrOFo59rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODozNTo0OVrOFo59rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQzNzAzNw==", "bodyText": "Method", "url": "https://github.com/JabRef/jabref/pull/5938#discussion_r378437037", "createdAt": "2020-02-12T18:35:49Z", "author": {"login": "stefan-kolb"}, "path": "src/main/java/org/jabref/logic/search/SearchQuery.java", "diffHunk": "@@ -18,6 +18,25 @@\n \n public class SearchQuery implements SearchMatcher {\n \n+    /**\n+     * Regex pattern for escaping special characters in javascript regular expressions\n+     */\n+    public static final Pattern JAVASCRIPT_ESCAPED_CHARS_PATTERN = Pattern.compile(\"[\\\\.\\\\*\\\\+\\\\?\\\\^\\\\$\\\\{\\\\}\\\\(\\\\)\\\\|\\\\[\\\\]\\\\\\\\/]\");\n+\n+    /**\n+     * Metod for escaping special characters in regular expressions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89c72c05dd881133ee6a667d9c78ec503566cf5a"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0ODIwNzQwOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/jabref/logic/search/SearchQueryTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNjoxNDo1NVrOFp772w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxOTowNzozM1rOFqAu6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUxNzkxNQ==", "bodyText": "I've created tests but I'm not sure about readbility of this approach.", "url": "https://github.com/JabRef/jabref/pull/5938#discussion_r379517915", "createdAt": "2020-02-14T16:14:55Z", "author": {"login": "dawidm"}, "path": "src/test/java/org/jabref/logic/search/SearchQueryTest.java", "diffHunk": "@@ -203,4 +203,38 @@ public void testGetPattern() {\n         //We can't directly compare the pattern objects\n         assertEquals(Optional.of(pattern.toString()), result.getPatternForWords().map(Pattern::toString));\n     }\n+\n+    @Test\n+    public void testGetRegexpPattern() {\n+        String queryText = \"[a-c]\\\\d* \\\\d*\";\n+        SearchQuery regexQuery = new SearchQuery(queryText, false, true);\n+        Pattern pattern = Pattern.compile(\"([a-c]\\\\d* \\\\d*)\");\n+        assertEquals(Optional.of(pattern.toString()), regexQuery.getPatternForWords().map(Pattern::toString));\n+    }\n+\n+    @Test\n+    public void testGetRegexpJavascriptPattern() {\n+        String queryText = \"[a-c]\\\\d* \\\\d*\";\n+        SearchQuery regexQuery = new SearchQuery(queryText, false, true);\n+        Pattern pattern = Pattern.compile(\"([a-c]\\\\d* \\\\d*)\");\n+        assertEquals(Optional.of(pattern.toString()), regexQuery.getJavaScriptPatternForWords().map(Pattern::toString));\n+    }\n+\n+    @Test\n+    public void testEscapingInPattern() {\n+        //first word contain all java special regex characters\n+        String queryText = \"<([{\\\\\\\\^-=$!|]})?*+.> word1 word2.\";\n+        SearchQuery textQueryWithSpecialChars = new SearchQuery(queryText, false, false);\n+        String pattern = \"(\\\\Q<([{\\\\^-=$!|]})?*+.>\\\\E)|(\\\\Qword1\\\\E)|(\\\\Qword2.\\\\E)\";\n+        assertEquals(Optional.of(pattern), textQueryWithSpecialChars.getPatternForWords().map(Pattern::toString));\n+    }\n+\n+    @Test\n+    public void testEscapingInJavascriptPattern() {\n+        //first word contain all javascript special regex characters that should be escaped individually in text based search\n+        String queryText = \"([{\\\\\\\\^$|]})?*+./ word1 word2.\";\n+        SearchQuery textQueryWithSpecialChars = new SearchQuery(queryText, false, false);\n+        String pattern = \"(\\\\(\\\\[\\\\{\\\\\\\\\\\\^\\\\$\\\\|\\\\]\\\\}\\\\)\\\\?\\\\*\\\\+\\\\.\\\\/)|(word1)|(word2\\\\.)\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "266bfc8029d7f37f41897e4f0d47c7fdcb33bbd5"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5NjUyMA==", "bodyText": "I know this looks totally crazy with those escaping, but it's fine.", "url": "https://github.com/JabRef/jabref/pull/5938#discussion_r379596520", "createdAt": "2020-02-14T19:07:33Z", "author": {"login": "Siedlerchr"}, "path": "src/test/java/org/jabref/logic/search/SearchQueryTest.java", "diffHunk": "@@ -203,4 +203,38 @@ public void testGetPattern() {\n         //We can't directly compare the pattern objects\n         assertEquals(Optional.of(pattern.toString()), result.getPatternForWords().map(Pattern::toString));\n     }\n+\n+    @Test\n+    public void testGetRegexpPattern() {\n+        String queryText = \"[a-c]\\\\d* \\\\d*\";\n+        SearchQuery regexQuery = new SearchQuery(queryText, false, true);\n+        Pattern pattern = Pattern.compile(\"([a-c]\\\\d* \\\\d*)\");\n+        assertEquals(Optional.of(pattern.toString()), regexQuery.getPatternForWords().map(Pattern::toString));\n+    }\n+\n+    @Test\n+    public void testGetRegexpJavascriptPattern() {\n+        String queryText = \"[a-c]\\\\d* \\\\d*\";\n+        SearchQuery regexQuery = new SearchQuery(queryText, false, true);\n+        Pattern pattern = Pattern.compile(\"([a-c]\\\\d* \\\\d*)\");\n+        assertEquals(Optional.of(pattern.toString()), regexQuery.getJavaScriptPatternForWords().map(Pattern::toString));\n+    }\n+\n+    @Test\n+    public void testEscapingInPattern() {\n+        //first word contain all java special regex characters\n+        String queryText = \"<([{\\\\\\\\^-=$!|]})?*+.> word1 word2.\";\n+        SearchQuery textQueryWithSpecialChars = new SearchQuery(queryText, false, false);\n+        String pattern = \"(\\\\Q<([{\\\\^-=$!|]})?*+.>\\\\E)|(\\\\Qword1\\\\E)|(\\\\Qword2.\\\\E)\";\n+        assertEquals(Optional.of(pattern), textQueryWithSpecialChars.getPatternForWords().map(Pattern::toString));\n+    }\n+\n+    @Test\n+    public void testEscapingInJavascriptPattern() {\n+        //first word contain all javascript special regex characters that should be escaped individually in text based search\n+        String queryText = \"([{\\\\\\\\^$|]})?*+./ word1 word2.\";\n+        SearchQuery textQueryWithSpecialChars = new SearchQuery(queryText, false, false);\n+        String pattern = \"(\\\\(\\\\[\\\\{\\\\\\\\\\\\^\\\\$\\\\|\\\\]\\\\}\\\\)\\\\?\\\\*\\\\+\\\\.\\\\/)|(word1)|(word2\\\\.)\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUxNzkxNQ=="}, "originalCommit": {"oid": "266bfc8029d7f37f41897e4f0d47c7fdcb33bbd5"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2046, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}