{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0ODQzMDg3", "number": 6746, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMTo1MDozN1rOEWXqow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwODoxNzowMFrOEWbr-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODkxODc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/model/entry/BibEntry.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMTo1MDozN1rOG9pe2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxNjoyNTozOFrOG90wxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI5NTk2MQ==", "bodyText": "I would doubt that this fixed the issue for the other types. -- When the entry type is Article, the clone is unchanged, too. Thus, no serialization written", "url": "https://github.com/JabRef/jabref/pull/6746#discussion_r467295961", "createdAt": "2020-08-07T21:50:37Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/model/entry/BibEntry.java", "diffHunk": "@@ -603,10 +604,15 @@ public boolean allFieldsPresent(Collection<OrFields> fields, BibDatabase databas\n     /**\n      * Returns a clone of this entry. Useful for copying.\n      * This will set a new ID for the cloned entry to be able to distinguish both copies.\n+     * Ensures that the changed flag is set when the entry type equals the default entry type Misc\n      */\n     @Override\n     public Object clone() {\n         BibEntry clone = new BibEntry(type.getValue());\n+        if (StandardEntryType.Misc.equals(type.getValue())) {\n+            clone.changed = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78855d34bf1788d32a5ed657b60a72bb7df21176"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMxMjc1NA==", "bodyText": "New BibEntryType(entryType) always calls setType() and thus:\nThe default value for field.get is the default entry type misc.\n\n  \n    \n      jabref/src/main/java/org/jabref/model/entry/BibEntry.java\n    \n    \n        Lines 360 to 371\n      in\n      7cc5747\n    \n    \n    \n    \n\n        \n          \n           public Optional<FieldChange> setType(EntryType newType, EntriesEventSource eventSource) { \n        \n\n        \n          \n               Objects.requireNonNull(newType); \n        \n\n        \n          \n            \n        \n\n        \n          \n               EntryType oldType = type.get(); \n        \n\n        \n          \n               if (newType.equals(oldType)) { \n        \n\n        \n          \n                   return Optional.empty(); \n        \n\n        \n          \n               } \n        \n\n        \n          \n            \n        \n\n        \n          \n               changed = true; \n        \n\n        \n          \n               this.type.setValue(newType); \n        \n\n        \n          \n            \n        \n\n        \n          \n               FieldChange change = new FieldChange(this, InternalField.TYPE_HEADER, oldType.getName(), newType.getName());", "url": "https://github.com/JabRef/jabref/pull/6746#discussion_r467312754", "createdAt": "2020-08-07T22:29:44Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/model/entry/BibEntry.java", "diffHunk": "@@ -603,10 +604,15 @@ public boolean allFieldsPresent(Collection<OrFields> fields, BibDatabase databas\n     /**\n      * Returns a clone of this entry. Useful for copying.\n      * This will set a new ID for the cloned entry to be able to distinguish both copies.\n+     * Ensures that the changed flag is set when the entry type equals the default entry type Misc\n      */\n     @Override\n     public Object clone() {\n         BibEntry clone = new BibEntry(type.getValue());\n+        if (StandardEntryType.Misc.equals(type.getValue())) {\n+            clone.changed = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI5NTk2MQ=="}, "originalCommit": {"oid": "78855d34bf1788d32a5ed657b60a72bb7df21176"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMxMzQ3NQ==", "bodyText": "For all other non default entry types the change flat is correclty set that was what this issue made so special.", "url": "https://github.com/JabRef/jabref/pull/6746#discussion_r467313475", "createdAt": "2020-08-07T22:32:34Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/model/entry/BibEntry.java", "diffHunk": "@@ -603,10 +604,15 @@ public boolean allFieldsPresent(Collection<OrFields> fields, BibDatabase databas\n     /**\n      * Returns a clone of this entry. Useful for copying.\n      * This will set a new ID for the cloned entry to be able to distinguish both copies.\n+     * Ensures that the changed flag is set when the entry type equals the default entry type Misc\n      */\n     @Override\n     public Object clone() {\n         BibEntry clone = new BibEntry(type.getValue());\n+        if (StandardEntryType.Misc.equals(type.getValue())) {\n+            clone.changed = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI5NTk2MQ=="}, "originalCommit": {"oid": "78855d34bf1788d32a5ed657b60a72bb7df21176"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM4NzY2MQ==", "bodyText": "I wouldn't update the changed flag. The clone method should really clone the original entry, without any modifications (otherwise its not a clone).\nHowever, the aux importer should set the changed flag of all entries (regardless of type), so that they get properly reformatted when writing them to disc (i.e. not using the parsed serialization of the original bib file).", "url": "https://github.com/JabRef/jabref/pull/6746#discussion_r467387661", "createdAt": "2020-08-08T08:20:57Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/model/entry/BibEntry.java", "diffHunk": "@@ -603,10 +604,15 @@ public boolean allFieldsPresent(Collection<OrFields> fields, BibDatabase databas\n     /**\n      * Returns a clone of this entry. Useful for copying.\n      * This will set a new ID for the cloned entry to be able to distinguish both copies.\n+     * Ensures that the changed flag is set when the entry type equals the default entry type Misc\n      */\n     @Override\n     public Object clone() {\n         BibEntry clone = new BibEntry(type.getValue());\n+        if (StandardEntryType.Misc.equals(type.getValue())) {\n+            clone.changed = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI5NTk2MQ=="}, "originalCommit": {"oid": "78855d34bf1788d32a5ed657b60a72bb7df21176"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4MDc3Mg==", "bodyText": "Well, the clone method implicitly sets the changed flags for all entry types except the default entry type.\nThe aux importer has nothing to do with this changed or serialization stuff. It's only relevant for saving the newly created library.  I don't see any reason to add this logic to the AuxImporter\nOnly the BibTexParser does it.", "url": "https://github.com/JabRef/jabref/pull/6746#discussion_r467480772", "createdAt": "2020-08-08T16:25:38Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/model/entry/BibEntry.java", "diffHunk": "@@ -603,10 +604,15 @@ public boolean allFieldsPresent(Collection<OrFields> fields, BibDatabase databas\n     /**\n      * Returns a clone of this entry. Useful for copying.\n      * This will set a new ID for the cloned entry to be able to distinguish both copies.\n+     * Ensures that the changed flag is set when the entry type equals the default entry type Misc\n      */\n     @Override\n     public Object clone() {\n         BibEntry clone = new BibEntry(type.getValue());\n+        if (StandardEntryType.Misc.equals(type.getValue())) {\n+            clone.changed = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI5NTk2MQ=="}, "originalCommit": {"oid": "78855d34bf1788d32a5ed657b60a72bb7df21176"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODkyMDQyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/model/entry/BibEntry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMTo1MDo1OFrOG9pf4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMjo0MzowN1rOG9qtkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI5NjIyNw==", "bodyText": "Isn't it possible to clone the serializatio, too. Then, the issue should be fixed?", "url": "https://github.com/JabRef/jabref/pull/6746#discussion_r467296227", "createdAt": "2020-08-07T21:50:58Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/model/entry/BibEntry.java", "diffHunk": "@@ -603,10 +604,15 @@ public boolean allFieldsPresent(Collection<OrFields> fields, BibDatabase databas\n     /**\n      * Returns a clone of this entry. Useful for copying.\n      * This will set a new ID for the cloned entry to be able to distinguish both copies.\n+     * Ensures that the changed flag is set when the entry type equals the default entry type Misc\n      */\n     @Override\n     public Object clone() {\n         BibEntry clone = new BibEntry(type.getValue());\n+        if (StandardEntryType.Misc.equals(type.getValue())) {\n+            clone.changed = true;\n+        }\n+\n         clone.fields = FXCollections.observableMap(new ConcurrentHashMap<>(fields));\n         return clone;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78855d34bf1788d32a5ed657b60a72bb7df21176"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMxNjExNQ==", "bodyText": "The issue is already fixed with the changed = true. But I added it as well now", "url": "https://github.com/JabRef/jabref/pull/6746#discussion_r467316115", "createdAt": "2020-08-07T22:43:07Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/model/entry/BibEntry.java", "diffHunk": "@@ -603,10 +604,15 @@ public boolean allFieldsPresent(Collection<OrFields> fields, BibDatabase databas\n     /**\n      * Returns a clone of this entry. Useful for copying.\n      * This will set a new ID for the cloned entry to be able to distinguish both copies.\n+     * Ensures that the changed flag is set when the entry type equals the default entry type Misc\n      */\n     @Override\n     public Object clone() {\n         BibEntry clone = new BibEntry(type.getValue());\n+        if (StandardEntryType.Misc.equals(type.getValue())) {\n+            clone.changed = true;\n+        }\n+\n         clone.fields = FXCollections.observableMap(new ConcurrentHashMap<>(fields));\n         return clone;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI5NjIyNw=="}, "originalCommit": {"oid": "78855d34bf1788d32a5ed657b60a72bb7df21176"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxOTU3NzUzOnYy", "diffSide": "RIGHT", "path": "CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwODoxNzowMVrOG9u9vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwODoxNzowMVrOG9u9vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM4NTc4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - We fixed an entry where entries with the entry type Misc from an imported aux file would not be saved correctly to the bib file on disk [#6405](https://github.com/JabRef/jabref/issues/6405)\n          \n          \n            \n            - We fixed an issue where entries with the entry type Misc from an imported aux file would not be saved correctly to the bib file on disk [#6405](https://github.com/JabRef/jabref/issues/6405)", "url": "https://github.com/JabRef/jabref/pull/6746#discussion_r467385789", "createdAt": "2020-08-08T08:17:01Z", "author": {"login": "tobiasdiez"}, "path": "CHANGELOG.md", "diffHunk": "@@ -97,6 +97,7 @@ Note that this project **does not** adhere to [Semantic Versioning](http://semve\n - We fixed an issue with the creation of a group of cited entries. Now the file path to an aux file gets validated. [#6585](https://github.com/JabRef/jabref/issues/6585)\n - We fixed an issue on Linux systems where the application would crash upon inotify failure. Now, the user is prompted with a warning, and given the choice to continue the session. [#6073](https://github.com/JabRef/jabref/issues/6073)\n - We moved the search modifier buttons into the search bar, as they were not accessible, if autocompletion was disabled. [#6625](https://github.com/JabRef/jabref/issues/6625)\n+- We fixed an entry where entries with the entry type Misc from an imported aux file would not be saved correctly to the bib file on disk [#6405](https://github.com/JabRef/jabref/issues/6405)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd4bd171eb2ef5d3001ac7aa4418bce3158798b3"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1654, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}