{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyMzM3OTQ1", "number": 6893, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNDozODowNVrOEhtHsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQyMDoxODowNFrOEldGFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzc3NzEzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/formatter/bibtexfields/RegexFormatter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNDozODowNVrOHPKmkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMTozNToyNFrOHPbIfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY2NDQwMw==", "bodyText": "From a performance point of view, this regexp is quite bad. It can be sped up by relying less on matching \".\" and the use of reluctant quantifiers, but I believe this version is more readable.\nI can write a custom \"parser\", which would be more performant, probably easier to understand, and easier to spot errors in. However, I consider custom parsing code harder to change when bugs are found, which is why I did not choose this approach.\nAny comments/nitpickings/suggestions are most welcome!", "url": "https://github.com/JabRef/jabref/pull/6893#discussion_r485664403", "createdAt": "2020-09-09T14:38:05Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/main/java/org/jabref/logic/formatter/bibtexfields/RegexFormatter.java", "diffHunk": "@@ -18,28 +18,37 @@\n     // \\\\ is required to have the { interpreted as character\n     // ? is required to disable the aggressive match\n     private static final Pattern PATTERN_ENCLOSED_IN_CURLY_BRACES = Pattern.compile(\"(\\\\{.*?})\");\n+    private static final String REGEX_CAPTURING_GROUP = \"regex\";\n+    private static final String REPLACEMENT_CAPTURING_GROUP = \"replacement\";\n+    /**\n+     * Matches a valid argument to the constructor. Two capturing groups are used to parse the {@link\n+     * RegexFormatter#regex} and {@link RegexFormatter#replacement} used in {@link RegexFormatter#format(String)}\n+     */\n+    private static final Pattern CONSTRUCTOR_ARGUMENT = Pattern.compile(\n+            \"^\\\\(\\\"(?<\" + REGEX_CAPTURING_GROUP + \">.*?)\\\" *?, *?\\\"(?<\" + REPLACEMENT_CAPTURING_GROUP + \">.*?)\\\"\\\\)$\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cfaf41af76fc86b69e616d0babe6fd9ba01ca96"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1MzMwOA==", "bodyText": "Why don't you put that pattern in a comment as a description for the reader and use the optimized one?", "url": "https://github.com/JabRef/jabref/pull/6893#discussion_r485853308", "createdAt": "2020-09-09T19:16:16Z", "author": {"login": "calixtus"}, "path": "src/main/java/org/jabref/logic/formatter/bibtexfields/RegexFormatter.java", "diffHunk": "@@ -18,28 +18,37 @@\n     // \\\\ is required to have the { interpreted as character\n     // ? is required to disable the aggressive match\n     private static final Pattern PATTERN_ENCLOSED_IN_CURLY_BRACES = Pattern.compile(\"(\\\\{.*?})\");\n+    private static final String REGEX_CAPTURING_GROUP = \"regex\";\n+    private static final String REPLACEMENT_CAPTURING_GROUP = \"replacement\";\n+    /**\n+     * Matches a valid argument to the constructor. Two capturing groups are used to parse the {@link\n+     * RegexFormatter#regex} and {@link RegexFormatter#replacement} used in {@link RegexFormatter#format(String)}\n+     */\n+    private static final Pattern CONSTRUCTOR_ARGUMENT = Pattern.compile(\n+            \"^\\\\(\\\"(?<\" + REGEX_CAPTURING_GROUP + \">.*?)\\\" *?, *?\\\"(?<\" + REPLACEMENT_CAPTURING_GROUP + \">.*?)\\\"\\\\)$\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY2NDQwMw=="}, "originalCommit": {"oid": "4cfaf41af76fc86b69e616d0babe6fd9ba01ca96"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkzNTIyOQ==", "bodyText": "\ud83e\udd21\nIt turns out I was wrong. At least, I can't manage to speed up the positive matching more than in the latest commit. It only removes the reluctant quantifier in the replacement capturing group.\nI am not sure if I can speed up the negative matching. The patterns I tried slowed down the positive matching as well.", "url": "https://github.com/JabRef/jabref/pull/6893#discussion_r485935229", "createdAt": "2020-09-09T21:35:24Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/main/java/org/jabref/logic/formatter/bibtexfields/RegexFormatter.java", "diffHunk": "@@ -18,28 +18,37 @@\n     // \\\\ is required to have the { interpreted as character\n     // ? is required to disable the aggressive match\n     private static final Pattern PATTERN_ENCLOSED_IN_CURLY_BRACES = Pattern.compile(\"(\\\\{.*?})\");\n+    private static final String REGEX_CAPTURING_GROUP = \"regex\";\n+    private static final String REPLACEMENT_CAPTURING_GROUP = \"replacement\";\n+    /**\n+     * Matches a valid argument to the constructor. Two capturing groups are used to parse the {@link\n+     * RegexFormatter#regex} and {@link RegexFormatter#replacement} used in {@link RegexFormatter#format(String)}\n+     */\n+    private static final Pattern CONSTRUCTOR_ARGUMENT = Pattern.compile(\n+            \"^\\\\(\\\"(?<\" + REGEX_CAPTURING_GROUP + \">.*?)\\\" *?, *?\\\"(?<\" + REPLACEMENT_CAPTURING_GROUP + \">.*?)\\\"\\\\)$\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY2NDQwMw=="}, "originalCommit": {"oid": "4cfaf41af76fc86b69e616d0babe6fd9ba01ca96"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NzA5MjM2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/formatter/bibtexfields/RegexFormatter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQyMDoxNToxNVrOHU8y9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQyMDoxNToxNVrOHU8y9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcyOTY1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        LOGGER.warn(\"RegexFormatter could not parse the input: \" + input);\n          \n          \n            \n                        LOGGER.warn(\"RegexFormatter could not parse the input: {}\", input);", "url": "https://github.com/JabRef/jabref/pull/6893#discussion_r491729654", "createdAt": "2020-09-20T20:15:15Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/formatter/bibtexfields/RegexFormatter.java", "diffHunk": "@@ -5,41 +5,56 @@\n import java.util.Objects;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n+import java.util.regex.PatternSyntaxException;\n \n import org.jabref.logic.cleanup.Formatter;\n import org.jabref.logic.l10n.Localization;\n \n-public class RegexFormatter extends Formatter {\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n+public class RegexFormatter extends Formatter {\n     public static final String KEY = \"regex\";\n+    private static final Logger LOGGER = LoggerFactory.getLogger(RegexFormatter.class);\n     private static final Pattern PATTERN_ESCAPED_OPENING_CURLY_BRACE = Pattern.compile(\"\\\\\\\\\\\\{\");\n     private static final Pattern PATTERN_ESCAPED_CLOSING_CURLY_BRACE = Pattern.compile(\"\\\\\\\\\\\\}\");\n     // RegEx to match {...}\n     // \\\\ is required to have the { interpreted as character\n     // ? is required to disable the aggressive match\n     private static final Pattern PATTERN_ENCLOSED_IN_CURLY_BRACES = Pattern.compile(\"(\\\\{.*?})\");\n+    private static final String REGEX_CAPTURING_GROUP = \"regex\";\n+    private static final String REPLACEMENT_CAPTURING_GROUP = \"replacement\";\n+    /**\n+     * Matches a valid argument to the constructor. Two capturing groups are used to parse the {@link\n+     * RegexFormatter#regex} and {@link RegexFormatter#replacement} used in {@link RegexFormatter#format(String)}\n+     */\n+    private static final Pattern CONSTRUCTOR_ARGUMENT = Pattern.compile(\n+            \"^\\\\(\\\"(?<\" + REGEX_CAPTURING_GROUP + \">.*?)\\\" *?, *?\\\"(?<\" + REPLACEMENT_CAPTURING_GROUP + \">.*)\\\"\\\\)$\");\n     // Magic arbitrary unicode char, which will never appear in bibtex files\n     private static final String PLACEHOLDER_FOR_PROTECTED_GROUP = Character.toString('\\u0A14');\n     private static final String PLACEHOLDER_FOR_OPENING_CURLY_BRACE = Character.toString('\\u0A15');\n     private static final String PLACEHOLDER_FOR_CLOSING_CURLY_BRACE = Character.toString('\\u0A16');\n-    private static final String QUOTE_AND_OPENING_BRACE = \"\\\"(\";\n-    private static final int LENGTH_OF_QUOTE_AND_OPENING_BRACE = QUOTE_AND_OPENING_BRACE.length();\n-    private static final String CLOSING_BRACE_AND_QUOTE = \")\\\"\";\n-    private static final int LENGTH_OF_CLOSING_BRACE_AND_QUOTE = CLOSING_BRACE_AND_QUOTE.length();\n-    private static String regex;\n-    private String replacement;\n+    private final String regex;\n+    private final String replacement;\n \n     /**\n      * Constructs a new regular expression-based formatter with the given RegEx.\n      *\n-     * @param input the regular expressions for matching and replacing given in the form {@code (<regex>, <replace>)}.\n+     * @param input the regular expressions for matching and replacing given in the form {@code (\"<regex>\",\n+     *              \"<replace>\")}.\n      */\n     public RegexFormatter(String input) {\n-        // formatting is like (\"exp1\",\"exp2\"), we want to first remove (\" and \")\n-        String rexToSet = input.substring(LENGTH_OF_QUOTE_AND_OPENING_BRACE, input.length() - LENGTH_OF_CLOSING_BRACE_AND_QUOTE);\n-        String[] parts = rexToSet.split(\"\\\",\\\"\");\n-        regex = parts[0];\n-        replacement = parts[1];\n+        Objects.requireNonNull(input);\n+        input = input.trim();\n+        Matcher constructorArgument = CONSTRUCTOR_ARGUMENT.matcher(input);\n+        if (constructorArgument.matches()) {\n+            regex = constructorArgument.group(REGEX_CAPTURING_GROUP);\n+            replacement = constructorArgument.group(REPLACEMENT_CAPTURING_GROUP);\n+        } else {\n+            regex = null;\n+            replacement = null;\n+            LOGGER.warn(\"RegexFormatter could not parse the input: \" + input);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0426d09e6b4ebd973036437d14ce2c1503b0a6df"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NzA5MzgyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/formatter/bibtexfields/RegexFormatter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQyMDoxNjo0OFrOHU8zow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQyMDoxNjo0OFrOHU8zow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcyOTgyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        LOGGER.warn(\"There is a syntax error in the regular expression, \" +\n          \n          \n            \n                                regex + \", used by the regex modifier\", e);\n          \n          \n            \n                        LOGGER.warn(\"There is a syntax error in the regular expression \\\"{}\\\" used by the regex modifier\", regex, e);", "url": "https://github.com/JabRef/jabref/pull/6893#discussion_r491729827", "createdAt": "2020-09-20T20:16:48Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/formatter/bibtexfields/RegexFormatter.java", "diffHunk": "@@ -60,7 +75,13 @@ private String replaceHonoringProtectedGroups(final String input) {\n             replaced.add(matcher.group(1));\n         }\n         String workingString = matcher.replaceAll(PLACEHOLDER_FOR_PROTECTED_GROUP);\n-        workingString = workingString.replaceAll(regex, replacement);\n+        try {\n+            workingString = workingString.replaceAll(regex, replacement);\n+        } catch (PatternSyntaxException e) {\n+            LOGGER.warn(\"There is a syntax error in the regular expression, \" +\n+                    regex + \", used by the regex modifier\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0426d09e6b4ebd973036437d14ce2c1503b0a6df"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NzA5NDI3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/formatter/bibtexfields/RegexFormatter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQyMDoxNzozMlrOHU8z1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDozNTowMVrOHVTQpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcyOTg3Nw==", "bodyText": "Could you switch to Optional<String> as datatype for regex and replacement? JabRef wants to get rid off null.", "url": "https://github.com/JabRef/jabref/pull/6893#discussion_r491729877", "createdAt": "2020-09-20T20:17:32Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/formatter/bibtexfields/RegexFormatter.java", "diffHunk": "@@ -71,7 +92,7 @@ private String replaceHonoringProtectedGroups(final String input) {\n     @Override\n     public String format(final String input) {\n         Objects.requireNonNull(input);\n-        if (regex == null) {\n+        if (regex == null || replacement == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0426d09e6b4ebd973036437d14ce2c1503b0a6df"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA5NzcwMg==", "bodyText": "Not easily without code-style complaints. regex and replacement are instance fields (private final String).\nI believe the choice of using instance fields is to inherit the method logic.cleanup.Formatter#format(String value), which most modifiers do, while still allowing arguments.\nThe behavior of most code in the citation key patterns is to either return an empty string or an unmodified string on invalid usage. Hence throwing an exception during construction would require code outside of RegexFormatter to deal with that circumstance, which I'd like to avoid due to separation of concerns.\nI'd guess the alternative is to create an interface extending logic.cleanup.Formatter with format(String value, String ... args).\nI have avoided taking these types of decisions as I am fairly new to Java and JabRef, but I can look into other alternatives.", "url": "https://github.com/JabRef/jabref/pull/6893#discussion_r492097702", "createdAt": "2020-09-21T14:35:01Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/main/java/org/jabref/logic/formatter/bibtexfields/RegexFormatter.java", "diffHunk": "@@ -71,7 +92,7 @@ private String replaceHonoringProtectedGroups(final String input) {\n     @Override\n     public String format(final String input) {\n         Objects.requireNonNull(input);\n-        if (regex == null) {\n+        if (regex == null || replacement == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcyOTg3Nw=="}, "originalCommit": {"oid": "0426d09e6b4ebd973036437d14ce2c1503b0a6df"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NzA5NDYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/formatter/bibtexfields/RegexFormatter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQyMDoxODowNFrOHU8z_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQyMDoxODowNFrOHU8z_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcyOTkxNg==", "bodyText": "While you are on it - could you convert that to a multilinecomment?", "url": "https://github.com/JabRef/jabref/pull/6893#discussion_r491729916", "createdAt": "2020-09-20T20:18:04Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/formatter/bibtexfields/RegexFormatter.java", "diffHunk": "@@ -5,41 +5,56 @@\n import java.util.Objects;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n+import java.util.regex.PatternSyntaxException;\n \n import org.jabref.logic.cleanup.Formatter;\n import org.jabref.logic.l10n.Localization;\n \n-public class RegexFormatter extends Formatter {\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n+public class RegexFormatter extends Formatter {\n     public static final String KEY = \"regex\";\n+    private static final Logger LOGGER = LoggerFactory.getLogger(RegexFormatter.class);\n     private static final Pattern PATTERN_ESCAPED_OPENING_CURLY_BRACE = Pattern.compile(\"\\\\\\\\\\\\{\");\n     private static final Pattern PATTERN_ESCAPED_CLOSING_CURLY_BRACE = Pattern.compile(\"\\\\\\\\\\\\}\");\n     // RegEx to match {...}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0426d09e6b4ebd973036437d14ce2c1503b0a6df"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1554, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}