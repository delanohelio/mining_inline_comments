{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5NTk4NDQy", "number": 6689, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMToyMTo0N1rOEd5GPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMTo0MToxNlrOEd5XTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Nzc5NjQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/importer/ImportAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMToyMTo0N1rOHJUziA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMToyMTo0N1rOHJUziA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU0MDEwNA==", "bodyText": "The merge method below checks for duplicates etc, but this is already done in the import dialog where the user can also decide to overwrite the duplication check. This is behavior that we should keep, i.e. here we really need to add the entries from one db into the other one.", "url": "https://github.com/JabRef/jabref/pull/6689#discussion_r479540104", "createdAt": "2020-08-28T21:21:47Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/importer/ImportAction.java", "diffHunk": "@@ -135,55 +130,14 @@ private ParserResult mergeImportResults(List<ImportFormatReader.UnknownFormatImp\n                 continue;\n             }\n             ParserResult parserResult = importResult.parserResult;\n-            List<BibEntry> entries = parserResult.getDatabase().getEntries();\n-            resultDatabase.insertEntries(entries);\n+            new BibDatabaseMerger().merge(resultDatabase, parserResult.getDatabase());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "000d77395f29325e606ae140fe2635bfd6accdac"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NzgxMTg3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/bibtex/BibDatabaseMerger.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMToyODozM1rOHJU8qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxNDoyNDowOFrOHJbydQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU0MjQ0MA==", "bodyText": "Since this is not related to writing bibtex (as the rest of the package), I suggest to move it together with the duplication check to a new logic.database package in parallel to the existing model.database. @JabRef/developers opinions?", "url": "https://github.com/JabRef/jabref/pull/6689#discussion_r479542440", "createdAt": "2020-08-28T21:28:33Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/logic/bibtex/BibDatabaseMerger.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package org.jabref.logic.bibtex;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "000d77395f29325e606ae140fe2635bfd6accdac"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY1NDUxNw==", "bodyText": "I moved it to the recommended package :).", "url": "https://github.com/JabRef/jabref/pull/6689#discussion_r479654517", "createdAt": "2020-08-29T14:24:08Z", "author": {"login": "DominikVoigt"}, "path": "src/main/java/org/jabref/logic/bibtex/BibDatabaseMerger.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package org.jabref.logic.bibtex;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU0MjQ0MA=="}, "originalCommit": {"oid": "000d77395f29325e606ae140fe2635bfd6accdac"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NzgxNDEwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/bibtex/BibDatabaseMerger.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMToyOTozMFrOHJU96A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMToyOTozMFrOHJU96A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU0Mjc2MA==", "bodyText": "DatabaseMerger should be sufficient...I have actually no idea why we added the prefix bib in some instances...", "url": "https://github.com/JabRef/jabref/pull/6689#discussion_r479542760", "createdAt": "2020-08-28T21:29:30Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/logic/bibtex/BibDatabaseMerger.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package org.jabref.logic.bibtex;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.jabref.model.database.BibDatabase;\n+import org.jabref.model.database.BibDatabaseModeDetection;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.BibEntryTypesManager;\n+import org.jabref.model.entry.BibtexString;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class BibDatabaseMerger {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "000d77395f29325e606ae140fe2635bfd6accdac"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NzgyOTYwOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/jabref/logic/bibtex/BibDatabaseMergerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMTozNjoyOVrOHJVHMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxNDozNDoxNFrOHJb18Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU0NTEzNw==", "bodyText": "Please reduce these examples to a minimum. I don't think you need to have 4 entries with full information", "url": "https://github.com/JabRef/jabref/pull/6689#discussion_r479545137", "createdAt": "2020-08-28T21:36:29Z", "author": {"login": "tobiasdiez"}, "path": "src/test/java/org/jabref/logic/bibtex/BibDatabaseMergerTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package org.jabref.logic.bibtex;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.jabref.model.database.BibDatabase;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.BibtexString;\n+import org.jabref.model.entry.field.StandardField;\n+import org.jabref.model.entry.types.StandardEntryType;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+class BibDatabaseMergerTest {\n+\n+    @Test\n+    void mergeAddsNonDuplicateEntries() {\n+        // Entries 2 and 3 are identical\n+        BibEntry entry1 = new BibEntry()\n+                .withField(StandardField.AUTHOR, \"Stephen Blaha\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "000d77395f29325e606ae140fe2635bfd6accdac"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY1NTQwOQ==", "bodyText": "I reduced the number of entries and their information content.", "url": "https://github.com/JabRef/jabref/pull/6689#discussion_r479655409", "createdAt": "2020-08-29T14:34:14Z", "author": {"login": "DominikVoigt"}, "path": "src/test/java/org/jabref/logic/bibtex/BibDatabaseMergerTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package org.jabref.logic.bibtex;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.jabref.model.database.BibDatabase;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.BibtexString;\n+import org.jabref.model.entry.field.StandardField;\n+import org.jabref.model.entry.types.StandardEntryType;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+class BibDatabaseMergerTest {\n+\n+    @Test\n+    void mergeAddsNonDuplicateEntries() {\n+        // Entries 2 and 3 are identical\n+        BibEntry entry1 = new BibEntry()\n+                .withField(StandardField.AUTHOR, \"Stephen Blaha\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU0NTEzNw=="}, "originalCommit": {"oid": "000d77395f29325e606ae140fe2635bfd6accdac"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NzgzMTMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/model/metadata/MetaData.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMTozNzowNFrOHJVIDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMTozNzowNFrOHJVIDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU0NTM1Ng==", "bodyText": "Please move these merge metadata methods to the database merger class. There you can also add a merge method operating on BibDatabaseContext objects, to have an easy way to merge two databases including all their metadata.", "url": "https://github.com/JabRef/jabref/pull/6689#discussion_r479545356", "createdAt": "2020-08-28T21:37:04Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/model/metadata/MetaData.java", "diffHunk": "@@ -245,6 +254,54 @@ public void clearSaveOrderConfig() {\n         postChange();\n     }\n \n+    /**\n+     * @param other           the metaData to merge into this one\n+     * @param otherFilename   the filename of the other library. Pass \"unknown\" if not known.\n+     * @param allOtherEntries list of all other entries\n+     */\n+    public void merge(MetaData other, String otherFilename, List<BibEntry> allOtherEntries) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "000d77395f29325e606ae140fe2635bfd6accdac"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Nzg0MDEzOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/jabref/logic/bibtex/BibDatabaseMergerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMTo0MToxNlrOHJVNJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMTo0MToxNlrOHJVNJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU0NjY2Mw==", "bodyText": "Please also include tests for the merged groups.", "url": "https://github.com/JabRef/jabref/pull/6689#discussion_r479546663", "createdAt": "2020-08-28T21:41:16Z", "author": {"login": "tobiasdiez"}, "path": "src/test/java/org/jabref/logic/bibtex/BibDatabaseMergerTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package org.jabref.logic.bibtex;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.jabref.model.database.BibDatabase;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.BibtexString;\n+import org.jabref.model.entry.field.StandardField;\n+import org.jabref.model.entry.types.StandardEntryType;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+class BibDatabaseMergerTest {\n+\n+    @Test\n+    void mergeAddsNonDuplicateEntries() {\n+        // Entries 2 and 3 are identical\n+        BibEntry entry1 = new BibEntry()\n+                .withField(StandardField.AUTHOR, \"Stephen Blaha\")\n+                .withField(StandardField.TITLE, \"Quantum Computers and Quantum Computer Languages: Quantum Assembly Language and Quantum C Language\")\n+                .withField(StandardField.DATE, \"2002-01-18\")\n+                .withField(StandardField.ABSTRACT, \"We show a representation of Quantum Computers defines Quantum Turing Machines with associated Quantum Grammars. We then create examples of Quantum Grammars. Lastly we develop an algebraic approach to high level Quantum Languages using Quantum Assembly language and Quantum C language as examples.\")\n+                .withField(StandardField.EPRINT, \"quant-ph/0201082\")\n+                .withField(StandardField.FILE, \":http\\\\://arxiv.org/pdf/quant-ph/0201082v1:PDF\")\n+                .withField(StandardField.EPRINTTYPE, \"arXiv\")\n+                .withField(StandardField.EPRINTCLASS, \"quant-ph\")\n+                .withField(StandardField.KEYWORDS, \"quant-ph, cs.PL\");\n+        entry1.setType(StandardEntryType.Article);\n+        BibEntry entry2 = new BibEntry()\n+                .withField(StandardField.AUTHOR, \"Phillip Kaye and Michele Mosca\")\n+                .withField(StandardField.TITLE, \"Quantum Networks for Generating Arbitrary Quantum States\")\n+                .withField(StandardField.DATE, \"2004-07-14\")\n+                .withField(StandardField.ABSTRACT, \"Quantum protocols often require the generation of specific quantum states. We describe a quantum algorithm for generating any prescribed quantum state. For an important subclass of states, including pure symmetric states, this algorithm is efficient.\")\n+                .withField(StandardField.EPRINT, \"quant-ph/0407102\")\n+                .withField(StandardField.FILE, \":http\\\\://arxiv.org/pdf/quant-ph/0407102v1:PDF\")\n+                .withField(StandardField.EPRINTTYPE, \"arXiv\")\n+                .withField(StandardField.EPRINTCLASS, \"quant-ph\")\n+                .withField(StandardField.KEYWORDS, \"quant-ph\")\n+                .withField(StandardField.JOURNALTITLE, \"Phillip Kaye, Michele Mosca, \\\"Quantum Networks for Generating Arbitrary Quantum States\\\", Proceedings, International Conference on Quantum Information (ICQI). Rochester, New York, USA, 2001\");\n+        entry2.setType(StandardEntryType.Article);\n+        BibEntry entry3 = new BibEntry()\n+                .withField(StandardField.AUTHOR, \"Phillip Kaye and Michele Mosca\")\n+                .withField(StandardField.TITLE, \"Quantum Networks for Generating Arbitrary Quantum States\")\n+                .withField(StandardField.DATE, \"2004-07-14\")\n+                .withField(StandardField.ABSTRACT, \"Quantum protocols often require the generation of specific quantum states. We describe a quantum algorithm for generating any prescribed quantum state. For an important subclass of states, including pure symmetric states, this algorithm is efficient.\")\n+                .withField(StandardField.EPRINT, \"quant-ph/0407102\")\n+                .withField(StandardField.FILE, \":http\\\\://arxiv.org/pdf/quant-ph/0407102v1:PDF\")\n+                .withField(StandardField.EPRINTTYPE, \"arXiv\")\n+                .withField(StandardField.EPRINTCLASS, \"quant-ph\")\n+                .withField(StandardField.KEYWORDS, \"quant-ph\")\n+                .withField(StandardField.JOURNALTITLE, \"Phillip Kaye, Michele Mosca, \\\"Quantum Networks for Generating Arbitrary Quantum States\\\", Proceedings, International Conference on Quantum Information (ICQI). Rochester, New York, USA, 2001\");\n+        entry3.setType(StandardEntryType.Article);\n+        BibEntry entry4 = new BibEntry()\n+                .withField(StandardField.AUTHOR, \"John Watrous\")\n+                .withField(StandardField.TITLE, \"Quantum Computational Complexity\")\n+                .withField(StandardField.DATE, \"2008-04-21\")\n+                .withField(StandardField.ABSTRACT, \"This article surveys quantum computational complexity, with a focus on three fundamental notions: polynomial-time quantum computations, the efficient verification of quantum proofs, and quantum interactive proof systems. Properties of quantum complexity classes based on these notions, such as BQP, QMA, and QIP, are presented. Other topics in quantum complexity, including quantum advice, space-bounded quantum computation, and bounded-depth quantum circuits, are also discussed.\")\n+                .withField(StandardField.EPRINT, \"0804.3401\")\n+                .withField(StandardField.FILE, \":http\\\\://arxiv.org/pdf/0804.3401v1:PDF\")\n+                .withField(StandardField.EPRINTTYPE, \"arXiv\")\n+                .withField(StandardField.EPRINTCLASS, \"quant-ph\")\n+                .withField(StandardField.KEYWORDS, \"quant-ph\");\n+        entry4.setType(StandardEntryType.Article);\n+\n+        BibDatabase database = new BibDatabase(List.of(entry1, entry2));\n+        BibDatabase other = new BibDatabase(List.of(entry3, entry4));\n+        new BibDatabaseMerger().merge(database, other);\n+\n+        assertEquals(3, database.getEntries().size());\n+        assertEquals(List.of(entry1, entry3, entry4), database.getEntries());\n+    }\n+\n+    @Test\n+    void mergeBibTexStringsWithSameNameAreImportedWithModifiedName() {\n+        BibtexString targetString = new BibtexString(\"name\", \"content1\");\n+\n+        // BibTeXStrings that are imported from two sources (same name different content)\n+        BibtexString sourceString1 = new BibtexString(\"name\", \"content2\");\n+        BibtexString sourceString2 = new BibtexString(\"name\", \"content3\");\n+\n+        // The expected source BibTeXStrings after import (different name, different content)\n+        BibtexString importedBibTeXString1 = new BibtexString(\"name_1\", \"content2\");\n+        BibtexString importedBibTeXString2 = new BibtexString(\"name_2\", \"content3\");\n+\n+        BibDatabase target = new BibDatabase();\n+        BibDatabase source1 = new BibDatabase();\n+        BibDatabase source2 = new BibDatabase();\n+        target.addString(targetString);\n+        source1.addString(sourceString1);\n+        source2.addString(sourceString2);\n+\n+        new BibDatabaseMerger().mergeStrings(target, source1);\n+        new BibDatabaseMerger().mergeStrings(target, source2);\n+        // Use string representation to compare since the id will not match\n+        List<String> resultStringsSorted = target.getStringValues()\n+                                                 .stream()\n+                                                 .map(BibtexString::toString)\n+                                                 .sorted()\n+                                                 .collect(Collectors.toList());\n+\n+        assertEquals(List.of(targetString.toString(), importedBibTeXString1.toString(),\n+                importedBibTeXString2.toString()), resultStringsSorted);\n+    }\n+\n+    @Test\n+    void mergeBibTexStringsWithSameNameAndContentAreIgnored() {\n+        BibtexString targetString1 = new BibtexString(\"name1\", \"content1\");\n+        BibtexString targetString2 = new BibtexString(\"name2\", \"content2\");\n+\n+        // BibTeXStrings that are imported (equivalent to target strings)\n+        BibtexString sourceString1 = new BibtexString(\"name1\", \"content1\");\n+        BibtexString sourceString2 = new BibtexString(\"name2\", \"content2\");\n+\n+        BibDatabase target = new BibDatabase();\n+        BibDatabase source = new BibDatabase();\n+        target.addString(targetString1);\n+        target.addString(targetString2);\n+        source.addString(sourceString1);\n+        source.addString(sourceString2);\n+\n+        new BibDatabaseMerger().mergeStrings(target, source);\n+        // Use string representation to compare since the id will not match\n+        List<String> resultStringsSorted = target.getStringValues()\n+                                                 .stream()\n+                                                 .map(BibtexString::toString)\n+                                                 .sorted()\n+                                                 .collect(Collectors.toList());\n+\n+        assertEquals(List.of(targetString1.toString(), targetString2.toString()), resultStringsSorted);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "000d77395f29325e606ae140fe2635bfd6accdac"}, "originalPosition": 133}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1783, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}