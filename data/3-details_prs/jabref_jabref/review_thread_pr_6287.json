{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzMTMyNjUy", "number": 6287, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODoxOToyOVrOD21Hyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODoxOToyOVrOD21Hyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODIwMDQzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/util/ViewModelTextFieldTableCellVisualizationFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODoxOToyOVrOGMxTPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODoxOToyOVrOGMxTPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA0MzgzNg==", "bodyText": "This line should probably be outside of the isPresent block as you want to subscribe to the validProperty in either case.", "url": "https://github.com/JabRef/jabref/pull/6287#discussion_r416043836", "createdAt": "2020-04-27T18:19:29Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/util/ViewModelTextFieldTableCellVisualizationFactory.java", "diffHunk": "@@ -30,25 +38,65 @@ public void install(TableColumn<S, T> column, StringConverter<T> stringConverter\n \n     @Override\n     public TextFieldTableCell<S, T> call(TableColumn<S, T> param) {\n-        return new TextFieldTableCell<S, T>(stringConverter) {\n+        return new TextFieldTableCell<>(stringConverter) {\n+\n+            List<Subscription> subscriptions = new ArrayList<>();\n+\n+            @Override\n+            public void startEdit() {\n+                super.startEdit();\n+\n+                // The textfield is lazily created and not already present when a TableCell is created.\n+                lookupTextField().ifPresent(textField -> Platform.runLater(() -> {\n+                    textField.requestFocus();\n+                    textField.selectAll();\n+                }));\n+            }\n+\n+            /**\n+             * As 'textfield' is a private member of TextFieldTableCell we need need to get to it through the backdoor.\n+             *\n+             * @return The TextField containing the editable content of the TableCell\n+             */\n+            private Optional<TextField> lookupTextField() {\n+                if (getGraphic() instanceof TextField) {\n+                    return Optional.of((TextField) getGraphic());\n+                } else {\n+                    // Could be an HBox with some graphic and a TextField if a graphic is specified for the TableCell\n+                    if (getGraphic() instanceof HBox) {\n+                        HBox hbox = (HBox) getGraphic();\n+                        if ((hbox.getChildren().size() > 1) && hbox.getChildren().get(1) instanceof TextField) {\n+                            return Optional.of((TextField) hbox.getChildren().get(1));\n+                        }\n+                    }\n+                    return Optional.empty();\n+                }\n+            }\n \n             @Override\n             public void updateItem(T item, boolean empty) {\n                 super.updateItem(item, empty);\n \n-                if (!empty && (getTableRow() != null)) {\n-                    Object rowItem = getTableRow().getItem();\n+                subscriptions.forEach(Subscription::unsubscribe);\n+                subscriptions.clear();\n \n-                    if (rowItem != null) {\n-                        S vm = (S) rowItem;\n-                        if ((visualizer != null) && (validationStatusProperty != null)) {\n-                            visualizer.initVisualization(validationStatusProperty.apply(vm), this);\n-                        }\n+                S viewModel = getTableRow().getItem();\n+                if (empty || (viewModel == null)) {\n+                    setText(null);\n+                    setGraphic(null);\n+                    setOnMouseClicked(null);\n+                    setTooltip(null);\n+                    setStyle(\"\");\n+                } else {\n+                    if (validationStatusProperty != null) {\n+                        validationStatusProperty.apply(viewModel).getHighestMessage().ifPresent(message -> {\n+                            setTooltip(new Tooltip(message.getMessage()));\n+                            subscriptions.add(BindingsHelper.includePseudoClassWhen(this, INVALID_PSEUDO_CLASS,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6ad4c41f0d091b526770abe2edef126e119e7ad"}, "originalPosition": 103}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1910, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}