{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzMjc1NDQ5", "number": 6290, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOTo0Mjo1M1rODx_rvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwODozMzoyNlrOD4URLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzUwMjA0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/exporter/ExportToClipboardAction.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOTo0Mjo1M1rOGFx8WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOToxMjo0MFrOGO2zKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcxNDMyOA==", "bodyText": "Suggestion: convert this field to Set<FileType> then you don't need to compare extensions and it's a bit more readable as well.", "url": "https://github.com/JabRef/jabref/pull/6290#discussion_r408714328", "createdAt": "2020-04-15T09:42:53Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/exporter/ExportToClipboardAction.java", "diffHunk": "@@ -34,21 +35,24 @@\n     private static final Logger LOGGER = LoggerFactory.getLogger(ExportToClipboardAction.class);\n \n     // Only text based exporters can be used\n-    private static final List<String> SUPPORTED_FILETYPES = Arrays.asList(\"txt\", \"rtf\", \"rdf\", \"xml\", \"html\", \"htm\", \"csv\", \"ris\");\n+    private static final Set<String> SUPPORTED_FILETYPES = Set.of(\"txt\", \"rtf\", \"rdf\", \"xml\", \"html\", \"htm\", \"csv\", \"ris\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dd7266b1b63c217241b050d3a40d15f27219e03"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQxNDg3NA==", "bodyText": "As I doubted it already, it's not possible to compare, because when you create a new TemplateExporter, the FileExtension is created dynamically using newFileType.\nAnd if I compare the Enums directly I would be comparing apples and oranges.\n\n  \n    \n      jabref/src/main/java/org/jabref/logic/util/StandardFileType.java\n    \n    \n        Lines 54 to 60\n      in\n      c25b639\n    \n    \n    \n    \n\n        \n          \n           public static FileType newFileType(String... extensions) { \n        \n\n        \n          \n               for (int i = 0; i < extensions.length; i++) { \n        \n\n        \n          \n                   if (extensions[i].contains(\".\")) { \n        \n\n        \n          \n                       extensions[i] = extensions[i].substring(extensions[i].indexOf('.') + 1); \n        \n\n        \n          \n                   } \n        \n\n        \n          \n               } \n        \n\n        \n          \n               return () -> Arrays.asList(extensions);", "url": "https://github.com/JabRef/jabref/pull/6290#discussion_r410414874", "createdAt": "2020-04-17T19:02:21Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/gui/exporter/ExportToClipboardAction.java", "diffHunk": "@@ -34,21 +35,24 @@\n     private static final Logger LOGGER = LoggerFactory.getLogger(ExportToClipboardAction.class);\n \n     // Only text based exporters can be used\n-    private static final List<String> SUPPORTED_FILETYPES = Arrays.asList(\"txt\", \"rtf\", \"rdf\", \"xml\", \"html\", \"htm\", \"csv\", \"ris\");\n+    private static final Set<String> SUPPORTED_FILETYPES = Set.of(\"txt\", \"rtf\", \"rdf\", \"xml\", \"html\", \"htm\", \"csv\", \"ris\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcxNDMyOA=="}, "originalCommit": {"oid": "7dd7266b1b63c217241b050d3a40d15f27219e03"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQzNjQyMw==", "bodyText": "Ok, but that's more a shortcoming of this method than a real problem.\nIt should be possible to first lookup if the StandardFileType contains a type with matching extensions (similar to the following):\n\n  \n    \n      jabref/src/main/java/org/jabref/model/entry/field/InternalField.java\n    \n    \n        Lines 38 to 42\n      in\n      b5002e0\n    \n    \n    \n    \n\n        \n          \n           public static Optional<InternalField> fromName(String name) { \n        \n\n        \n          \n               return Arrays.stream(InternalField.values()) \n        \n\n        \n          \n                            .filter(field -> field.getName().equalsIgnoreCase(name)) \n        \n\n        \n          \n                            .findAny(); \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nand if not return a UnknownFileType that implements a proper equals\n\n  \n    \n      jabref/src/main/java/org/jabref/model/entry/field/UnknownField.java\n    \n    \n        Lines 30 to 45\n      in\n      b5002e0\n    \n    \n    \n    \n\n        \n          \n           @Override \n        \n\n        \n          \n           public boolean equals(Object o) { \n        \n\n        \n          \n               if (this == o) { \n        \n\n        \n          \n                   return true; \n        \n\n        \n          \n               } \n        \n\n        \n          \n               if (!(o instanceof Field)) { \n        \n\n        \n          \n                   return false; \n        \n\n        \n          \n               } \n        \n\n        \n          \n               Field other = (Field) o; \n        \n\n        \n          \n               return name.equalsIgnoreCase(other.getName()); \n        \n\n        \n          \n           } \n        \n\n        \n          \n            \n        \n\n        \n          \n           @Override \n        \n\n        \n          \n           public int hashCode() { \n        \n\n        \n          \n               return Objects.hash(name.toLowerCase(Locale.ENGLISH)); \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nDefinitely a bit more complex then your solution, but should be a bit more future-proof.", "url": "https://github.com/JabRef/jabref/pull/6290#discussion_r410436423", "createdAt": "2020-04-17T19:49:14Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/exporter/ExportToClipboardAction.java", "diffHunk": "@@ -34,21 +35,24 @@\n     private static final Logger LOGGER = LoggerFactory.getLogger(ExportToClipboardAction.class);\n \n     // Only text based exporters can be used\n-    private static final List<String> SUPPORTED_FILETYPES = Arrays.asList(\"txt\", \"rtf\", \"rdf\", \"xml\", \"html\", \"htm\", \"csv\", \"ris\");\n+    private static final Set<String> SUPPORTED_FILETYPES = Set.of(\"txt\", \"rtf\", \"rdf\", \"xml\", \"html\", \"htm\", \"csv\", \"ris\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcxNDMyOA=="}, "originalCommit": {"oid": "7dd7266b1b63c217241b050d3a40d15f27219e03"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIzMTA4Mg==", "bodyText": "Thanks for the hint, applied a similar approach now for the FileTypes", "url": "https://github.com/JabRef/jabref/pull/6290#discussion_r418231082", "createdAt": "2020-04-30T19:12:40Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/gui/exporter/ExportToClipboardAction.java", "diffHunk": "@@ -34,21 +35,24 @@\n     private static final Logger LOGGER = LoggerFactory.getLogger(ExportToClipboardAction.class);\n \n     // Only text based exporters can be used\n-    private static final List<String> SUPPORTED_FILETYPES = Arrays.asList(\"txt\", \"rtf\", \"rdf\", \"xml\", \"html\", \"htm\", \"csv\", \"ris\");\n+    private static final Set<String> SUPPORTED_FILETYPES = Set.of(\"txt\", \"rtf\", \"rdf\", \"xml\", \"html\", \"htm\", \"csv\", \"ris\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcxNDMyOA=="}, "originalCommit": {"oid": "7dd7266b1b63c217241b050d3a40d15f27219e03"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzUwOTc0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/exporter/ExportToClipboardAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOTo0NDo0N1rOGFyBBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOTo0NDo0N1rOGFyBBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcxNTUyNw==", "bodyText": "Instead of rethrowing the exception below, I would add logging + displaying to the user here.", "url": "https://github.com/JabRef/jabref/pull/6290#discussion_r408715527", "createdAt": "2020-04-15T09:44:47Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/exporter/ExportToClipboardAction.java", "diffHunk": "@@ -74,12 +78,13 @@ public void execute() {\n                                           .orElse(null);\n \n         Optional<Exporter> selectedExporter = dialogService.showChoiceDialogAndWait(Localization.lang(\"Export\"), Localization.lang(\"Select export format\"),\n-                Localization.lang(\"Export\"), defaultChoice, exporters);\n+                                                                                    Localization.lang(\"Export\"), defaultChoice, exporters);\n \n         selectedExporter.ifPresent(exporter -> BackgroundTask.wrap(() -> exportToClipboard(exporter))\n-                                                                .onSuccess(this::setContentToClipboard)\n-                                                                .onFailure(ex -> { /* swallow as already logged */ })\n-                                                                .executeWith(Globals.TASK_EXECUTOR));\n+                                                             .onSuccess(this::setContentToClipboard)\n+                                                             .onFailure(ex -> {\n+                                                                 /* swallow as already logged */ })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dd7266b1b63c217241b050d3a40d15f27219e03"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzc4OTI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/util/StandardFileType.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwODozMzoyNlrOGPE41g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwOToyOToyOVrOGPFz7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ2MTkxMA==", "bodyText": "I think OptionalUtil.orElse is no longer needed, as Java has now its own orElse method.", "url": "https://github.com/JabRef/jabref/pull/6290#discussion_r418461910", "createdAt": "2020-05-01T08:33:26Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/logic/util/StandardFileType.java", "diffHunk": "@@ -51,12 +54,13 @@\n         return extensions;\n     }\n \n-    public static FileType newFileType(String... extensions) {\n-        for (int i = 0; i < extensions.length; i++) {\n-            if (extensions[i].contains(\".\")) {\n-                extensions[i] = extensions[i].substring(extensions[i].indexOf('.') + 1);\n-            }\n-        }\n-        return () -> Arrays.asList(extensions);\n+    public static FileType fromExtensions(String... extensions) {\n+        var exts = Arrays.asList(extensions);\n+\n+        return OptionalUtil.orElse(Arrays.stream(StandardFileType.values())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b8139e929382f4ab726c02302d2aa715fe03c97"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ3NzAzNg==", "bodyText": "@tobiasdiez  Yes, but it did not work with the type inference, it expected a type of StandardFileType in the orElse part and created a compile error when\nTherefore I had to use our util method:\nhttps://stackoverflow.com/a/54238663\nPlease wait with merging I think I still need to convert the extensions to lower case before", "url": "https://github.com/JabRef/jabref/pull/6290#discussion_r418477036", "createdAt": "2020-05-01T09:29:29Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/logic/util/StandardFileType.java", "diffHunk": "@@ -51,12 +54,13 @@\n         return extensions;\n     }\n \n-    public static FileType newFileType(String... extensions) {\n-        for (int i = 0; i < extensions.length; i++) {\n-            if (extensions[i].contains(\".\")) {\n-                extensions[i] = extensions[i].substring(extensions[i].indexOf('.') + 1);\n-            }\n-        }\n-        return () -> Arrays.asList(extensions);\n+    public static FileType fromExtensions(String... extensions) {\n+        var exts = Arrays.asList(extensions);\n+\n+        return OptionalUtil.orElse(Arrays.stream(StandardFileType.values())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ2MTkxMA=="}, "originalCommit": {"oid": "8b8139e929382f4ab726c02302d2aa715fe03c97"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1913, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}