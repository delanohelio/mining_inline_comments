{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5OTk1MDI3", "number": 6143, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODozNDo0OFrODo12rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODo0MTowM1rODo1_FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTUxOTgyOnYy", "diffSide": "RIGHT", "path": "CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODozNDo0OFrOF3pIDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxMToyMDo0NFrOF5u69w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg4OTgwNQ==", "bodyText": "This is a duplicate.", "url": "https://github.com/JabRef/jabref/pull/6143#discussion_r393889805", "createdAt": "2020-03-17T18:34:48Z", "author": {"login": "tobiasdiez"}, "path": "CHANGELOG.md", "diffHunk": "@@ -40,6 +40,8 @@ Note that this project **does not** adhere to [Semantic Versioning](http://semve\n - Filenames of external files can no longer contain curly braces. [#5926](https://github.com/JabRef/jabref/pull/5926)\n - We made the filters more easily accessible in the integrity check dialog. [#5955](https://github.com/JabRef/jabref/pull/5955)\n - We reimplemented and improved the dialog \"Customize entry types\". [#4719](https://github.com/JabRef/jabref/issues/4719)\n+- We reimplemented and improved the dialog \"Customize entry types\" [#4719](https://github.com/JabRef/jabref/issues/4719)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6bd3b0fd41dba4105c08d5c789a8785c6a11d81"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA4MTkxMQ==", "bodyText": "I fixed it in master. 64afe4e @Siedlerchr", "url": "https://github.com/JabRef/jabref/pull/6143#discussion_r396081911", "createdAt": "2020-03-22T11:20:44Z", "author": {"login": "koppor"}, "path": "CHANGELOG.md", "diffHunk": "@@ -40,6 +40,8 @@ Note that this project **does not** adhere to [Semantic Versioning](http://semve\n - Filenames of external files can no longer contain curly braces. [#5926](https://github.com/JabRef/jabref/pull/5926)\n - We made the filters more easily accessible in the integrity check dialog. [#5955](https://github.com/JabRef/jabref/pull/5955)\n - We reimplemented and improved the dialog \"Customize entry types\". [#4719](https://github.com/JabRef/jabref/issues/4719)\n+- We reimplemented and improved the dialog \"Customize entry types\" [#4719](https://github.com/JabRef/jabref/issues/4719)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg4OTgwNQ=="}, "originalCommit": {"oid": "f6bd3b0fd41dba4105c08d5c789a8785c6a11d81"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTUyNjM5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/importer/fetcher/ApsFetcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODozNjo0MFrOF3pMew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODozNjo0MFrOF3pMew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5MDkzOQ==", "bodyText": "This should be debug or warn", "url": "https://github.com/JabRef/jabref/pull/6143#discussion_r393890939", "createdAt": "2020-03-17T18:36:40Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/logic/importer/fetcher/ApsFetcher.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.jabref.logic.importer.FulltextFetcher;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+import org.jabref.model.entry.identifier.DOI;\n+\n+import kong.unirest.Unirest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * FulltextFetcher implementation that attempts to find a PDF URL at APS. Also see the <a\n+ * href=\"https://harvest.aps.org/docs/harvest-api\">API</a>, although it isn't currently used.\n+ */\n+public class ApsFetcher implements FulltextFetcher {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ApsFetcher.class);\n+\n+    // The actual API needs either an API key or a header. This is a workaround.\n+    private static final String DOI_URL = \"https://www.doi.org/\";\n+    private static final String PDF_URL = \"https://journals.aps.org/prl/pdf/\";\n+\n+    @Override\n+    public Optional<URL> findFullText(BibEntry entry) throws IOException {\n+        Objects.requireNonNull(entry);\n+\n+        Optional<DOI> doi = entry.getField(StandardField.DOI).flatMap(DOI::parse);\n+\n+        if (!doi.isPresent()) {\n+            return Optional.empty();\n+        }\n+\n+        Optional<String> id = getId(doi.get().getDOI());\n+\n+        if (id.isPresent()) {\n+\n+            String pdfRequestUrl = PDF_URL + id.get();\n+            int code = Unirest.head(pdfRequestUrl).asJson().getStatus();\n+\n+            if (code == 200) {\n+                LOGGER.info(\"Fulltext PDF found @ APS.\");\n+                try {\n+                    return Optional.of(new URL(pdfRequestUrl));\n+                } catch (MalformedURLException e) {\n+                    LOGGER.info(\"APS returned malformed URL, cannot find PDF.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6bd3b0fd41dba4105c08d5c789a8785c6a11d81"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTUyNzEzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/importer/fetcher/ApsFetcher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODozNjo1NFrOF3pM9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzozMzoyNlrOF4PyDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5MTA2Mg==", "bodyText": "I guess debug level suffices", "url": "https://github.com/JabRef/jabref/pull/6143#discussion_r393891062", "createdAt": "2020-03-17T18:36:54Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/logic/importer/fetcher/ApsFetcher.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.jabref.logic.importer.FulltextFetcher;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+import org.jabref.model.entry.identifier.DOI;\n+\n+import kong.unirest.Unirest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * FulltextFetcher implementation that attempts to find a PDF URL at APS. Also see the <a\n+ * href=\"https://harvest.aps.org/docs/harvest-api\">API</a>, although it isn't currently used.\n+ */\n+public class ApsFetcher implements FulltextFetcher {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ApsFetcher.class);\n+\n+    // The actual API needs either an API key or a header. This is a workaround.\n+    private static final String DOI_URL = \"https://www.doi.org/\";\n+    private static final String PDF_URL = \"https://journals.aps.org/prl/pdf/\";\n+\n+    @Override\n+    public Optional<URL> findFullText(BibEntry entry) throws IOException {\n+        Objects.requireNonNull(entry);\n+\n+        Optional<DOI> doi = entry.getField(StandardField.DOI).flatMap(DOI::parse);\n+\n+        if (!doi.isPresent()) {\n+            return Optional.empty();\n+        }\n+\n+        Optional<String> id = getId(doi.get().getDOI());\n+\n+        if (id.isPresent()) {\n+\n+            String pdfRequestUrl = PDF_URL + id.get();\n+            int code = Unirest.head(pdfRequestUrl).asJson().getStatus();\n+\n+            if (code == 200) {\n+                LOGGER.info(\"Fulltext PDF found @ APS.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6bd3b0fd41dba4105c08d5c789a8785c6a11d81"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUyMzE0OQ==", "bodyText": "It's info at the other fetchers as well", "url": "https://github.com/JabRef/jabref/pull/6143#discussion_r394523149", "createdAt": "2020-03-18T17:33:26Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/logic/importer/fetcher/ApsFetcher.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.jabref.logic.importer.FulltextFetcher;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+import org.jabref.model.entry.identifier.DOI;\n+\n+import kong.unirest.Unirest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * FulltextFetcher implementation that attempts to find a PDF URL at APS. Also see the <a\n+ * href=\"https://harvest.aps.org/docs/harvest-api\">API</a>, although it isn't currently used.\n+ */\n+public class ApsFetcher implements FulltextFetcher {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ApsFetcher.class);\n+\n+    // The actual API needs either an API key or a header. This is a workaround.\n+    private static final String DOI_URL = \"https://www.doi.org/\";\n+    private static final String PDF_URL = \"https://journals.aps.org/prl/pdf/\";\n+\n+    @Override\n+    public Optional<URL> findFullText(BibEntry entry) throws IOException {\n+        Objects.requireNonNull(entry);\n+\n+        Optional<DOI> doi = entry.getField(StandardField.DOI).flatMap(DOI::parse);\n+\n+        if (!doi.isPresent()) {\n+            return Optional.empty();\n+        }\n+\n+        Optional<String> id = getId(doi.get().getDOI());\n+\n+        if (id.isPresent()) {\n+\n+            String pdfRequestUrl = PDF_URL + id.get();\n+            int code = Unirest.head(pdfRequestUrl).asJson().getStatus();\n+\n+            if (code == 200) {\n+                LOGGER.info(\"Fulltext PDF found @ APS.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5MTA2Mg=="}, "originalCommit": {"oid": "f6bd3b0fd41dba4105c08d5c789a8785c6a11d81"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTU0MTMzOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/jabref/logic/importer/fetcher/ApsFetcherTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODo0MTowM1rOF3pWcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODo0MTowM1rOF3pWcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5MzQ5MQ==", "bodyText": "To be honest, I don't see any need to have a parameterized test. As the comments indicate the tests actually check different cases and behaviours. It just happens that the test code is almost the same. Since the code reusage of the parameterized test is minimal, I would prefer if the tests could be split.", "url": "https://github.com/JabRef/jabref/pull/6143#discussion_r393893491", "createdAt": "2020-03-17T18:41:03Z", "author": {"login": "tobiasdiez"}, "path": "src/test/java/org/jabref/logic/importer/fetcher/ApsFetcherTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+import org.jabref.testutils.category.FetcherTest;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+@FetcherTest\n+class ApsFetcherTest {\n+\n+    private ApsFetcher finder;\n+\n+    @BeforeEach\n+    void setUp() {\n+        finder = new ApsFetcher();\n+    }\n+\n+    private static Stream<Arguments> provideBibEntriesWithDois() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6bd3b0fd41dba4105c08d5c789a8785c6a11d81"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2010, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}