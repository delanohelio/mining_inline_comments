{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3NzQ4MzQ4", "number": 6842, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMToyMTowNlrOEf8ecQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMDoyODowNFrOFGYgjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxOTMyMTQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/externalfiles/AutoSetFileLinksUtil.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMToyMTowNlrOHMiDVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMTozMjo0OFrOHYTfaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkwMjg2OQ==", "bodyText": "I would propose to move this into the succeeded methoid here :\n\n  \n    \n      jabref/src/main/java/org/jabref/gui/externalfiles/AutoLinkFilesAction.java\n    \n    \n        Lines 60 to 68\n      in\n      5ab494e\n    \n    \n    \n    \n\n        \n          \n           Task<List<BibEntry>> linkFilesTask = new Task<>() { \n        \n\n        \n          \n            \n        \n\n        \n          \n               @Override \n        \n\n        \n          \n               protected List<BibEntry> call() { \n        \n\n        \n          \n                   return util.linkAssociatedFiles(entries, nc); \n        \n\n        \n          \n               } \n        \n\n        \n          \n            \n        \n\n        \n          \n               @Override \n        \n\n        \n          \n               protected void succeeded() {", "url": "https://github.com/JabRef/jabref/pull/6842#discussion_r482902869", "createdAt": "2020-09-03T11:21:06Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/gui/externalfiles/AutoSetFileLinksUtil.java", "diffHunk": "@@ -48,16 +52,24 @@ private AutoSetFileLinksUtil(List<Path> directories, AutoLinkPreferences autoLin\n \n     public List<BibEntry> linkAssociatedFiles(List<BibEntry> entries, NamedCompound ce) {\n         List<BibEntry> changedEntries = new ArrayList<>();\n+\n+        List<IOException> fileExceptions = new ArrayList<>(); //change\n         for (BibEntry entry : entries) {\n \n             List<LinkedFile> linkedFiles = new ArrayList<>();\n             try {\n                 linkedFiles = findAssociatedNotLinkedFiles(entry);\n             } catch (IOException e) {\n+                fileExceptions.add(e); //change\n                 LOGGER.error(\"Problem finding files\", e);\n+\n             }\n \n             if (ce != null) {\n+                if (!fileExceptions.isEmpty()) { // is this where it goes? find out!", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8a3175657aa473db22a66e536fa1a9d49f1bfd8"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUyMTYwMg==", "bodyText": "Oh ok, thank you. Can I ask you a few questions about the succeeded() method?\nAs far as I understood, it notifies the user when it has set the file links, i.e. when the returned List of linkAssociatedFiles(...) is not empty. In the other case Finished automatically setting external links. No files found.  I haven't quite understood yet, how this else case is different from what I am trying to accomplish.", "url": "https://github.com/JabRef/jabref/pull/6842#discussion_r483521602", "createdAt": "2020-09-04T10:07:19Z", "author": {"login": "IfIWantedTo"}, "path": "src/main/java/org/jabref/gui/externalfiles/AutoSetFileLinksUtil.java", "diffHunk": "@@ -48,16 +52,24 @@ private AutoSetFileLinksUtil(List<Path> directories, AutoLinkPreferences autoLin\n \n     public List<BibEntry> linkAssociatedFiles(List<BibEntry> entries, NamedCompound ce) {\n         List<BibEntry> changedEntries = new ArrayList<>();\n+\n+        List<IOException> fileExceptions = new ArrayList<>(); //change\n         for (BibEntry entry : entries) {\n \n             List<LinkedFile> linkedFiles = new ArrayList<>();\n             try {\n                 linkedFiles = findAssociatedNotLinkedFiles(entry);\n             } catch (IOException e) {\n+                fileExceptions.add(e); //change\n                 LOGGER.error(\"Problem finding files\", e);\n+\n             }\n \n             if (ce != null) {\n+                if (!fileExceptions.isEmpty()) { // is this where it goes? find out!", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkwMjg2OQ=="}, "originalCommit": {"oid": "f8a3175657aa473db22a66e536fa1a9d49f1bfd8"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI0NzIwOQ==", "bodyText": "Sorry for the delay in answering. The succeeded method is called whenever the task is finished normally and doesn't get interrupted.\nIt either says files found or no files found, but it doesn't tell the user if there was an error (exception) which prevented  finding the files.\nSo one addtional else case (your changes) is to notify the users that there have been X exceptions with the hint\ne.g. There were x files with an exception. See log for details", "url": "https://github.com/JabRef/jabref/pull/6842#discussion_r495247209", "createdAt": "2020-09-25T21:32:48Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/gui/externalfiles/AutoSetFileLinksUtil.java", "diffHunk": "@@ -48,16 +52,24 @@ private AutoSetFileLinksUtil(List<Path> directories, AutoLinkPreferences autoLin\n \n     public List<BibEntry> linkAssociatedFiles(List<BibEntry> entries, NamedCompound ce) {\n         List<BibEntry> changedEntries = new ArrayList<>();\n+\n+        List<IOException> fileExceptions = new ArrayList<>(); //change\n         for (BibEntry entry : entries) {\n \n             List<LinkedFile> linkedFiles = new ArrayList<>();\n             try {\n                 linkedFiles = findAssociatedNotLinkedFiles(entry);\n             } catch (IOException e) {\n+                fileExceptions.add(e); //change\n                 LOGGER.error(\"Problem finding files\", e);\n+\n             }\n \n             if (ce != null) {\n+                if (!fileExceptions.isEmpty()) { // is this where it goes? find out!", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkwMjg2OQ=="}, "originalCommit": {"oid": "f8a3175657aa473db22a66e536fa1a9d49f1bfd8"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzkwNDE4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/externalfiles/AutoLinkFilesAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNjo0NzowMFrOHZdLAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNjo1MDozOFrOHZdR0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ1NDQwMg==", "bodyText": "You need to add another else case when the exceptions are not empty:\nProblem finding files.  Errors occured See log for details", "url": "https://github.com/JabRef/jabref/pull/6842#discussion_r496454402", "createdAt": "2020-09-29T06:47:00Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/gui/externalfiles/AutoLinkFilesAction.java", "diffHunk": "@@ -66,14 +66,19 @@ public void execute() {\n \n             @Override\n             protected void succeeded() {\n-                if (!getValue().isEmpty()) {\n-                    if (nc.hasEdits()) {\n-                        nc.end();\n-                        undoManager.addEdit(nc);\n+                if (util.returnFileExceptions().isEmpty()) { //change\n+                    if (!getValue().isEmpty()) {\n+                        if (nc.hasEdits()) {\n+                            nc.end();\n+                            undoManager.addEdit(nc);\n+                        }\n+                        dialogService.notify(Localization.lang(\"Finished automatically setting external links.\"));\n+                    } else {\n+                        dialogService.notify(Localization.lang(\"Finished automatically setting external links.\") + \" \" + Localization.lang(\"No files found.\"));\n                     }\n-                    dialogService.notify(Localization.lang(\"Finished automatically setting external links.\"));\n                 } else {\n-                    dialogService.notify(Localization.lang(\"Finished automatically setting external links.\") + \" \" + Localization.lang(\"No files found.\"));\n+\n+                    dialogService.notify(Localization.lang(\"Problem finding files\")); //change", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8d70d2d054bce726f548b4d16e0657a7d16851b"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ1NjE0NQ==", "bodyText": "And when no exception and getValue is empty => No files found", "url": "https://github.com/JabRef/jabref/pull/6842#discussion_r496456145", "createdAt": "2020-09-29T06:50:38Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/gui/externalfiles/AutoLinkFilesAction.java", "diffHunk": "@@ -66,14 +66,19 @@ public void execute() {\n \n             @Override\n             protected void succeeded() {\n-                if (!getValue().isEmpty()) {\n-                    if (nc.hasEdits()) {\n-                        nc.end();\n-                        undoManager.addEdit(nc);\n+                if (util.returnFileExceptions().isEmpty()) { //change\n+                    if (!getValue().isEmpty()) {\n+                        if (nc.hasEdits()) {\n+                            nc.end();\n+                            undoManager.addEdit(nc);\n+                        }\n+                        dialogService.notify(Localization.lang(\"Finished automatically setting external links.\"));\n+                    } else {\n+                        dialogService.notify(Localization.lang(\"Finished automatically setting external links.\") + \" \" + Localization.lang(\"No files found.\"));\n                     }\n-                    dialogService.notify(Localization.lang(\"Finished automatically setting external links.\"));\n                 } else {\n-                    dialogService.notify(Localization.lang(\"Finished automatically setting external links.\") + \" \" + Localization.lang(\"No files found.\"));\n+\n+                    dialogService.notify(Localization.lang(\"Problem finding files\")); //change", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ1NDQwMg=="}, "originalCommit": {"oid": "d8d70d2d054bce726f548b4d16e0657a7d16851b"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMjM0NzI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/externalfiles/AutoLinkFilesAction.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMDoyMTozNVrOIHXk6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMTo1Mjo1MlrOIIf-qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU5NzIyNQ==", "bodyText": "entries.stream().anyMatch(entry -> !entries.getFiles().isEmpty()) is probably easier to understand.", "url": "https://github.com/JabRef/jabref/pull/6842#discussion_r544597225", "createdAt": "2020-12-16T20:21:35Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/AutoLinkFilesAction.java", "diffHunk": "@@ -34,47 +33,62 @@\n     private final UndoManager undoManager;\n     private final TaskExecutor taskExecutor;\n \n-    public AutoLinkFilesAction(JabRefFrame frame, PreferencesService preferences, StateManager stateManager, UndoManager undoManager, TaskExecutor taskExecutor) {\n-        this.dialogService = frame.getDialogService();\n+    public AutoLinkFilesAction(DialogService dialogService, PreferencesService preferences, StateManager stateManager, UndoManager undoManager, TaskExecutor taskExecutor) {\n+        this.dialogService = dialogService;\n         this.preferences = preferences;\n         this.stateManager = stateManager;\n         this.undoManager = undoManager;\n         this.taskExecutor = taskExecutor;\n \n         this.executable.bind(needsDatabase(this.stateManager).and(needsEntriesSelected(stateManager)));\n         this.statusMessage.bind(BindingsHelper.ifThenElse(executable, \"\", Localization.lang(\"This operation requires one or more entries to be selected.\")));\n-\n     }\n \n     @Override\n     public void execute() {\n-        BibDatabaseContext database = stateManager.getActiveDatabase().orElseThrow(() -> new NullPointerException(\"Database null\"));\n-        List<BibEntry> entries = stateManager.getSelectedEntries();\n-\n-        final NamedCompound nc = new NamedCompound(Localization.lang(\"Automatically set file links\"));\n-        AutoSetFileLinksUtil util = new AutoSetFileLinksUtil(\n+        final BibDatabaseContext database = stateManager.getActiveDatabase().orElseThrow(() -> new NullPointerException(\"Database null\"));\n+        final List<BibEntry> entries = stateManager.getSelectedEntries();\n+        final AutoSetFileLinksUtil util = new AutoSetFileLinksUtil(\n                 database,\n                 preferences.getFilePreferences(),\n                 preferences.getAutoLinkPreferences(),\n                 ExternalFileTypes.getInstance());\n-        Task<List<BibEntry>> linkFilesTask = new Task<>() {\n+        final NamedCompound nc = new NamedCompound(Localization.lang(\"Automatically set file links\"));\n+\n+        if (entries.stream().mapToInt(entry -> entry.getFiles().size()).sum() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c351314ae60722a858447fa0c81e554eb99df801"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU5ODkxNQ==", "bodyText": "But why is this check added in the first place? The autolinkfiles feature tries to find and link new files, so I don't understand why the entry already needs to have a file linked?", "url": "https://github.com/JabRef/jabref/pull/6842#discussion_r544598915", "createdAt": "2020-12-16T20:24:26Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/AutoLinkFilesAction.java", "diffHunk": "@@ -34,47 +33,62 @@\n     private final UndoManager undoManager;\n     private final TaskExecutor taskExecutor;\n \n-    public AutoLinkFilesAction(JabRefFrame frame, PreferencesService preferences, StateManager stateManager, UndoManager undoManager, TaskExecutor taskExecutor) {\n-        this.dialogService = frame.getDialogService();\n+    public AutoLinkFilesAction(DialogService dialogService, PreferencesService preferences, StateManager stateManager, UndoManager undoManager, TaskExecutor taskExecutor) {\n+        this.dialogService = dialogService;\n         this.preferences = preferences;\n         this.stateManager = stateManager;\n         this.undoManager = undoManager;\n         this.taskExecutor = taskExecutor;\n \n         this.executable.bind(needsDatabase(this.stateManager).and(needsEntriesSelected(stateManager)));\n         this.statusMessage.bind(BindingsHelper.ifThenElse(executable, \"\", Localization.lang(\"This operation requires one or more entries to be selected.\")));\n-\n     }\n \n     @Override\n     public void execute() {\n-        BibDatabaseContext database = stateManager.getActiveDatabase().orElseThrow(() -> new NullPointerException(\"Database null\"));\n-        List<BibEntry> entries = stateManager.getSelectedEntries();\n-\n-        final NamedCompound nc = new NamedCompound(Localization.lang(\"Automatically set file links\"));\n-        AutoSetFileLinksUtil util = new AutoSetFileLinksUtil(\n+        final BibDatabaseContext database = stateManager.getActiveDatabase().orElseThrow(() -> new NullPointerException(\"Database null\"));\n+        final List<BibEntry> entries = stateManager.getSelectedEntries();\n+        final AutoSetFileLinksUtil util = new AutoSetFileLinksUtil(\n                 database,\n                 preferences.getFilePreferences(),\n                 preferences.getAutoLinkPreferences(),\n                 ExternalFileTypes.getInstance());\n-        Task<List<BibEntry>> linkFilesTask = new Task<>() {\n+        final NamedCompound nc = new NamedCompound(Localization.lang(\"Automatically set file links\"));\n+\n+        if (entries.stream().mapToInt(entry -> entry.getFiles().size()).sum() == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU5NzIyNQ=="}, "originalCommit": {"oid": "c351314ae60722a858447fa0c81e554eb99df801"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQwODYwMg==", "bodyText": "As I understand this feature, this calls AutoLinkFilesLinkUtil::findAssociatedNotLinkedFiles to check for broken file links. But those are also represented by a LinkedFile. So this feature tries to repair the links.", "url": "https://github.com/JabRef/jabref/pull/6842#discussion_r545408602", "createdAt": "2020-12-17T21:15:43Z", "author": {"login": "calixtus"}, "path": "src/main/java/org/jabref/gui/externalfiles/AutoLinkFilesAction.java", "diffHunk": "@@ -34,47 +33,62 @@\n     private final UndoManager undoManager;\n     private final TaskExecutor taskExecutor;\n \n-    public AutoLinkFilesAction(JabRefFrame frame, PreferencesService preferences, StateManager stateManager, UndoManager undoManager, TaskExecutor taskExecutor) {\n-        this.dialogService = frame.getDialogService();\n+    public AutoLinkFilesAction(DialogService dialogService, PreferencesService preferences, StateManager stateManager, UndoManager undoManager, TaskExecutor taskExecutor) {\n+        this.dialogService = dialogService;\n         this.preferences = preferences;\n         this.stateManager = stateManager;\n         this.undoManager = undoManager;\n         this.taskExecutor = taskExecutor;\n \n         this.executable.bind(needsDatabase(this.stateManager).and(needsEntriesSelected(stateManager)));\n         this.statusMessage.bind(BindingsHelper.ifThenElse(executable, \"\", Localization.lang(\"This operation requires one or more entries to be selected.\")));\n-\n     }\n \n     @Override\n     public void execute() {\n-        BibDatabaseContext database = stateManager.getActiveDatabase().orElseThrow(() -> new NullPointerException(\"Database null\"));\n-        List<BibEntry> entries = stateManager.getSelectedEntries();\n-\n-        final NamedCompound nc = new NamedCompound(Localization.lang(\"Automatically set file links\"));\n-        AutoSetFileLinksUtil util = new AutoSetFileLinksUtil(\n+        final BibDatabaseContext database = stateManager.getActiveDatabase().orElseThrow(() -> new NullPointerException(\"Database null\"));\n+        final List<BibEntry> entries = stateManager.getSelectedEntries();\n+        final AutoSetFileLinksUtil util = new AutoSetFileLinksUtil(\n                 database,\n                 preferences.getFilePreferences(),\n                 preferences.getAutoLinkPreferences(),\n                 ExternalFileTypes.getInstance());\n-        Task<List<BibEntry>> linkFilesTask = new Task<>() {\n+        final NamedCompound nc = new NamedCompound(Localization.lang(\"Automatically set file links\"));\n+\n+        if (entries.stream().mapToInt(entry -> entry.getFiles().size()).sum() == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU5NzIyNQ=="}, "originalCommit": {"oid": "c351314ae60722a858447fa0c81e554eb99df801"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTczMzEyOQ==", "bodyText": "It looks for files on disk that are matched by the citation key (= \"associated\", probably a bad name), but which are not yet have this file in the file field (= \"linked\"). \n  \n    \n      jabref/src/main/java/org/jabref/gui/externalfiles/AutoSetFileLinksUtil.java\n    \n    \n        Lines 88 to 92\n      in\n      a13f307\n    \n    \n    \n    \n\n        \n          \n           List<Path> result = fileFinder.findAssociatedFiles(entry, directories, extensions); \n        \n\n        \n          \n            \n        \n\n        \n          \n           // Collect the found files that are not yet linked \n        \n\n        \n          \n           for (Path foundFile : result) { \n        \n\n        \n          \n               boolean fileAlreadyLinked = entry.getFiles().stream() \n        \n    \n  \n\n\nSo it's not about existing links that no longer point to a valid file (I think we have an integrity check for this though).", "url": "https://github.com/JabRef/jabref/pull/6842#discussion_r545733129", "createdAt": "2020-12-18T10:13:36Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/AutoLinkFilesAction.java", "diffHunk": "@@ -34,47 +33,62 @@\n     private final UndoManager undoManager;\n     private final TaskExecutor taskExecutor;\n \n-    public AutoLinkFilesAction(JabRefFrame frame, PreferencesService preferences, StateManager stateManager, UndoManager undoManager, TaskExecutor taskExecutor) {\n-        this.dialogService = frame.getDialogService();\n+    public AutoLinkFilesAction(DialogService dialogService, PreferencesService preferences, StateManager stateManager, UndoManager undoManager, TaskExecutor taskExecutor) {\n+        this.dialogService = dialogService;\n         this.preferences = preferences;\n         this.stateManager = stateManager;\n         this.undoManager = undoManager;\n         this.taskExecutor = taskExecutor;\n \n         this.executable.bind(needsDatabase(this.stateManager).and(needsEntriesSelected(stateManager)));\n         this.statusMessage.bind(BindingsHelper.ifThenElse(executable, \"\", Localization.lang(\"This operation requires one or more entries to be selected.\")));\n-\n     }\n \n     @Override\n     public void execute() {\n-        BibDatabaseContext database = stateManager.getActiveDatabase().orElseThrow(() -> new NullPointerException(\"Database null\"));\n-        List<BibEntry> entries = stateManager.getSelectedEntries();\n-\n-        final NamedCompound nc = new NamedCompound(Localization.lang(\"Automatically set file links\"));\n-        AutoSetFileLinksUtil util = new AutoSetFileLinksUtil(\n+        final BibDatabaseContext database = stateManager.getActiveDatabase().orElseThrow(() -> new NullPointerException(\"Database null\"));\n+        final List<BibEntry> entries = stateManager.getSelectedEntries();\n+        final AutoSetFileLinksUtil util = new AutoSetFileLinksUtil(\n                 database,\n                 preferences.getFilePreferences(),\n                 preferences.getAutoLinkPreferences(),\n                 ExternalFileTypes.getInstance());\n-        Task<List<BibEntry>> linkFilesTask = new Task<>() {\n+        final NamedCompound nc = new NamedCompound(Localization.lang(\"Automatically set file links\"));\n+\n+        if (entries.stream().mapToInt(entry -> entry.getFiles().size()).sum() == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU5NzIyNQ=="}, "originalCommit": {"oid": "c351314ae60722a858447fa0c81e554eb99df801"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc4MzQ2Ng==", "bodyText": "Oh ok. I totally misunderstood this. Sorry. I'll change that.", "url": "https://github.com/JabRef/jabref/pull/6842#discussion_r545783466", "createdAt": "2020-12-18T11:52:52Z", "author": {"login": "calixtus"}, "path": "src/main/java/org/jabref/gui/externalfiles/AutoLinkFilesAction.java", "diffHunk": "@@ -34,47 +33,62 @@\n     private final UndoManager undoManager;\n     private final TaskExecutor taskExecutor;\n \n-    public AutoLinkFilesAction(JabRefFrame frame, PreferencesService preferences, StateManager stateManager, UndoManager undoManager, TaskExecutor taskExecutor) {\n-        this.dialogService = frame.getDialogService();\n+    public AutoLinkFilesAction(DialogService dialogService, PreferencesService preferences, StateManager stateManager, UndoManager undoManager, TaskExecutor taskExecutor) {\n+        this.dialogService = dialogService;\n         this.preferences = preferences;\n         this.stateManager = stateManager;\n         this.undoManager = undoManager;\n         this.taskExecutor = taskExecutor;\n \n         this.executable.bind(needsDatabase(this.stateManager).and(needsEntriesSelected(stateManager)));\n         this.statusMessage.bind(BindingsHelper.ifThenElse(executable, \"\", Localization.lang(\"This operation requires one or more entries to be selected.\")));\n-\n     }\n \n     @Override\n     public void execute() {\n-        BibDatabaseContext database = stateManager.getActiveDatabase().orElseThrow(() -> new NullPointerException(\"Database null\"));\n-        List<BibEntry> entries = stateManager.getSelectedEntries();\n-\n-        final NamedCompound nc = new NamedCompound(Localization.lang(\"Automatically set file links\"));\n-        AutoSetFileLinksUtil util = new AutoSetFileLinksUtil(\n+        final BibDatabaseContext database = stateManager.getActiveDatabase().orElseThrow(() -> new NullPointerException(\"Database null\"));\n+        final List<BibEntry> entries = stateManager.getSelectedEntries();\n+        final AutoSetFileLinksUtil util = new AutoSetFileLinksUtil(\n                 database,\n                 preferences.getFilePreferences(),\n                 preferences.getAutoLinkPreferences(),\n                 ExternalFileTypes.getInstance());\n-        Task<List<BibEntry>> linkFilesTask = new Task<>() {\n+        final NamedCompound nc = new NamedCompound(Localization.lang(\"Automatically set file links\"));\n+\n+        if (entries.stream().mapToInt(entry -> entry.getFiles().size()).sum() == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU5NzIyNQ=="}, "originalCommit": {"oid": "c351314ae60722a858447fa0c81e554eb99df801"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMjM2Mzk5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/externalfiles/AutoSetFileLinksUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMDoyNTo0M1rOIHXuVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMDoyNTo0M1rOIHXuVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU5OTYzOQ==", "bodyText": "maybe rename to getChangedEntries ?", "url": "https://github.com/JabRef/jabref/pull/6842#discussion_r544599639", "createdAt": "2020-12-16T20:25:43Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/AutoSetFileLinksUtil.java", "diffHunk": "@@ -31,10 +31,31 @@\n \n public class AutoSetFileLinksUtil {\n \n+    public static class LinkFilesResult {\n+        private final List<BibEntry> changedEntries = new ArrayList<>();\n+        private final List<IOException> fileExceptions = new ArrayList<>();\n+\n+        protected void addBibEntry(BibEntry bibEntry) {\n+            changedEntries.add(bibEntry);\n+        }\n+\n+        protected void addFileException(IOException exception) {\n+            fileExceptions.add(exception);\n+        }\n+\n+        public List<BibEntry> getBibEntries() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c351314ae60722a858447fa0c81e554eb99df801"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMjM2ODUxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/externalfiles/AutoLinkFilesAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMDoyNjo1MlrOIHXxAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMDoyNjo1MlrOIHXxAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDYwMDMyMw==", "bodyText": "I think this should be a normal dialog. I would reserve notify for \"everything went well\"-messages.", "url": "https://github.com/JabRef/jabref/pull/6842#discussion_r544600323", "createdAt": "2020-12-16T20:26:52Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/AutoLinkFilesAction.java", "diffHunk": "@@ -34,47 +33,62 @@\n     private final UndoManager undoManager;\n     private final TaskExecutor taskExecutor;\n \n-    public AutoLinkFilesAction(JabRefFrame frame, PreferencesService preferences, StateManager stateManager, UndoManager undoManager, TaskExecutor taskExecutor) {\n-        this.dialogService = frame.getDialogService();\n+    public AutoLinkFilesAction(DialogService dialogService, PreferencesService preferences, StateManager stateManager, UndoManager undoManager, TaskExecutor taskExecutor) {\n+        this.dialogService = dialogService;\n         this.preferences = preferences;\n         this.stateManager = stateManager;\n         this.undoManager = undoManager;\n         this.taskExecutor = taskExecutor;\n \n         this.executable.bind(needsDatabase(this.stateManager).and(needsEntriesSelected(stateManager)));\n         this.statusMessage.bind(BindingsHelper.ifThenElse(executable, \"\", Localization.lang(\"This operation requires one or more entries to be selected.\")));\n-\n     }\n \n     @Override\n     public void execute() {\n-        BibDatabaseContext database = stateManager.getActiveDatabase().orElseThrow(() -> new NullPointerException(\"Database null\"));\n-        List<BibEntry> entries = stateManager.getSelectedEntries();\n-\n-        final NamedCompound nc = new NamedCompound(Localization.lang(\"Automatically set file links\"));\n-        AutoSetFileLinksUtil util = new AutoSetFileLinksUtil(\n+        final BibDatabaseContext database = stateManager.getActiveDatabase().orElseThrow(() -> new NullPointerException(\"Database null\"));\n+        final List<BibEntry> entries = stateManager.getSelectedEntries();\n+        final AutoSetFileLinksUtil util = new AutoSetFileLinksUtil(\n                 database,\n                 preferences.getFilePreferences(),\n                 preferences.getAutoLinkPreferences(),\n                 ExternalFileTypes.getInstance());\n-        Task<List<BibEntry>> linkFilesTask = new Task<>() {\n+        final NamedCompound nc = new NamedCompound(Localization.lang(\"Automatically set file links\"));\n+\n+        if (entries.stream().mapToInt(entry -> entry.getFiles().size()).sum() == 0) {\n+            dialogService.notify(Localization.lang(\"The selected entries do not have any file links attached.\"));\n+            return;\n+        }\n \n+        Task<AutoSetFileLinksUtil.LinkFilesResult> linkFilesTask = new Task<>() {\n             @Override\n-            protected List<BibEntry> call() {\n+            protected AutoSetFileLinksUtil.LinkFilesResult call() {\n                 return util.linkAssociatedFiles(entries, nc);\n             }\n \n             @Override\n             protected void succeeded() {\n-                if (!getValue().isEmpty()) {\n-                    if (nc.hasEdits()) {\n-                        nc.end();\n-                        undoManager.addEdit(nc);\n-                    }\n-                    dialogService.notify(Localization.lang(\"Finished automatically setting external links.\"));\n-                } else {\n-                    dialogService.notify(Localization.lang(\"Finished automatically setting external links.\") + \" \" + Localization.lang(\"No files found.\"));\n+                AutoSetFileLinksUtil.LinkFilesResult result = getValue();\n+\n+                if (!result.getFileExceptions().isEmpty()) {\n+                    dialogService.notify(Localization.lang(\"Problem finding files. See error log for details.\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c351314ae60722a858447fa0c81e554eb99df801"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMjM3MzI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/externalfiles/AutoLinkFilesAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMDoyODowNFrOIHXzpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMDoyODowNFrOIHXzpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDYwMDk5OQ==", "bodyText": "Reuse Localization.lang(\"Finished automatically setting external links.\") from above by splitting the Localization.lang(...) here.", "url": "https://github.com/JabRef/jabref/pull/6842#discussion_r544600999", "createdAt": "2020-12-16T20:28:04Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/externalfiles/AutoLinkFilesAction.java", "diffHunk": "@@ -34,47 +33,62 @@\n     private final UndoManager undoManager;\n     private final TaskExecutor taskExecutor;\n \n-    public AutoLinkFilesAction(JabRefFrame frame, PreferencesService preferences, StateManager stateManager, UndoManager undoManager, TaskExecutor taskExecutor) {\n-        this.dialogService = frame.getDialogService();\n+    public AutoLinkFilesAction(DialogService dialogService, PreferencesService preferences, StateManager stateManager, UndoManager undoManager, TaskExecutor taskExecutor) {\n+        this.dialogService = dialogService;\n         this.preferences = preferences;\n         this.stateManager = stateManager;\n         this.undoManager = undoManager;\n         this.taskExecutor = taskExecutor;\n \n         this.executable.bind(needsDatabase(this.stateManager).and(needsEntriesSelected(stateManager)));\n         this.statusMessage.bind(BindingsHelper.ifThenElse(executable, \"\", Localization.lang(\"This operation requires one or more entries to be selected.\")));\n-\n     }\n \n     @Override\n     public void execute() {\n-        BibDatabaseContext database = stateManager.getActiveDatabase().orElseThrow(() -> new NullPointerException(\"Database null\"));\n-        List<BibEntry> entries = stateManager.getSelectedEntries();\n-\n-        final NamedCompound nc = new NamedCompound(Localization.lang(\"Automatically set file links\"));\n-        AutoSetFileLinksUtil util = new AutoSetFileLinksUtil(\n+        final BibDatabaseContext database = stateManager.getActiveDatabase().orElseThrow(() -> new NullPointerException(\"Database null\"));\n+        final List<BibEntry> entries = stateManager.getSelectedEntries();\n+        final AutoSetFileLinksUtil util = new AutoSetFileLinksUtil(\n                 database,\n                 preferences.getFilePreferences(),\n                 preferences.getAutoLinkPreferences(),\n                 ExternalFileTypes.getInstance());\n-        Task<List<BibEntry>> linkFilesTask = new Task<>() {\n+        final NamedCompound nc = new NamedCompound(Localization.lang(\"Automatically set file links\"));\n+\n+        if (entries.stream().mapToInt(entry -> entry.getFiles().size()).sum() == 0) {\n+            dialogService.notify(Localization.lang(\"The selected entries do not have any file links attached.\"));\n+            return;\n+        }\n \n+        Task<AutoSetFileLinksUtil.LinkFilesResult> linkFilesTask = new Task<>() {\n             @Override\n-            protected List<BibEntry> call() {\n+            protected AutoSetFileLinksUtil.LinkFilesResult call() {\n                 return util.linkAssociatedFiles(entries, nc);\n             }\n \n             @Override\n             protected void succeeded() {\n-                if (!getValue().isEmpty()) {\n-                    if (nc.hasEdits()) {\n-                        nc.end();\n-                        undoManager.addEdit(nc);\n-                    }\n-                    dialogService.notify(Localization.lang(\"Finished automatically setting external links.\"));\n-                } else {\n-                    dialogService.notify(Localization.lang(\"Finished automatically setting external links.\") + \" \" + Localization.lang(\"No files found.\"));\n+                AutoSetFileLinksUtil.LinkFilesResult result = getValue();\n+\n+                if (!result.getFileExceptions().isEmpty()) {\n+                    dialogService.notify(Localization.lang(\"Problem finding files. See error log for details.\"));\n+                    return;\n                 }\n+\n+                if (result.getBibEntries().isEmpty()) {\n+                    dialogService.notify(Localization.lang(\"Finished automatically setting external links.\")\n+                            + \" \" + Localization.lang(\"No files found.\"));\n+                    return;\n+                }\n+\n+                if (nc.hasEdits()) {\n+                    nc.end();\n+                    undoManager.addEdit(nc);\n+                }\n+\n+                dialogService.notify(Localization.lang(\n+                        \"Finished automatically setting external links. Changed %0 entries.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c351314ae60722a858447fa0c81e554eb99df801"}, "originalPosition": 84}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1708, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}