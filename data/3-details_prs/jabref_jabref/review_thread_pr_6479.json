{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3OTc2Mzc5", "number": 6479, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjozMjo0MlrOD94Onw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMjoxNzoyNlrOD_emmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjEwOTc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/maintable/BibEntryTableViewModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjozMjo0M1rOGXo1lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjozMjo0M1rOGXo1lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQzOTUxMQ==", "bodyText": "Maybe better to return an empty string instead of null in the orElse part", "url": "https://github.com/JabRef/jabref/pull/6479#discussion_r427439511", "createdAt": "2020-05-19T16:32:43Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/gui/maintable/BibEntryTableViewModel.java", "diffHunk": "@@ -119,17 +123,30 @@ public BibEntry getEntry() {\n                 boolean isName = false;\n \n                 Optional<String> content = Optional.empty();\n+                Field anEntry = null;\n                 for (Field field : fields) {\n                     content = entry.getResolvedFieldOrAliasLatexFree(field, database);\n                     if (content.isPresent()) {\n+                        anEntry = field;\n                         isName = field.getProperties().contains(FieldProperty.PERSON_NAMES);\n                         break;\n                     }\n                 }\n \n                 String result = content.orElse(null);\n                 if (isName) {\n-                    return nameFormatter.formatName(result);\n+                    String latexFreeBeforeNameFormatter = nameFormatter.formatName(result);\n+\n+                    String unformattedName = entry.getResolvedFieldOrAlias(anEntry, database).orElse(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0df3cdbdf6730ae2d82c8fb2c0d9e7ca3e3cd683"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTg1OTkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/model/entry/AuthorList.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDowNzo0NVrOGYNlMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNjo1NjozMVrOGYVMXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA0MTUyMw==", "bodyText": "The changes in AuthorList are intended to create a similar behaviour to the already existing getAsNatBib. An alternative would be to create the cache as a weakhashmap in MainTableNameFormatter (and move the functionality from model to gui if that is appropriate)", "url": "https://github.com/JabRef/jabref/pull/6479#discussion_r428041523", "createdAt": "2020-05-20T14:07:45Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/main/java/org/jabref/model/entry/AuthorList.java", "diffHunk": "@@ -11,6 +11,8 @@\n import java.util.WeakHashMap;\n import java.util.stream.Collectors;\n \n+import org.jabref.model.strings.LatexToUnicodeAdapter;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6e9e7035c198199a0ca4ac7b7adf9d8679ecece"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEwMjM3OQ==", "bodyText": "I think it's reasonable to have it in the AuthorList class.", "url": "https://github.com/JabRef/jabref/pull/6479#discussion_r428102379", "createdAt": "2020-05-20T15:25:16Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/model/entry/AuthorList.java", "diffHunk": "@@ -11,6 +11,8 @@\n import java.util.WeakHashMap;\n import java.util.stream.Collectors;\n \n+import org.jabref.model.strings.LatexToUnicodeAdapter;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA0MTUyMw=="}, "originalCommit": {"oid": "d6e9e7035c198199a0ca4ac7b7adf9d8679ecece"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE2NjIzNg==", "bodyText": "Good! Then I will start writing test cases for it and see if I can find something that doesn't work :)\nThank you for taking a look at it!", "url": "https://github.com/JabRef/jabref/pull/6479#discussion_r428166236", "createdAt": "2020-05-20T16:56:31Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/main/java/org/jabref/model/entry/AuthorList.java", "diffHunk": "@@ -11,6 +11,8 @@\n import java.util.WeakHashMap;\n import java.util.stream.Collectors;\n \n+import org.jabref.model.strings.LatexToUnicodeAdapter;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA0MTUyMw=="}, "originalCommit": {"oid": "d6e9e7035c198199a0ca4ac7b7adf9d8679ecece"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODgyOTA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/maintable/MainTableNameFormatter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMToyNjozOVrOGaJ6ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODo0OTozNFrOGa_lQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA3ODYyNw==", "bodyText": "The old formatName method is still used?", "url": "https://github.com/JabRef/jabref/pull/6479#discussion_r430078627", "createdAt": "2020-05-25T21:26:39Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/maintable/MainTableNameFormatter.java", "diffHunk": "@@ -19,6 +19,31 @@\n         abbrAuthorNames = preferences.getBoolean(JabRefPreferences.ABBR_AUTHOR_NAMES);\n     }\n \n+    /**\n+     * Format a name field for the table, according to user preferences and with latex expressions translated if\n+     * possible.\n+     *\n+     * @param nameToFormat The contents of the name field.\n+     * @return The formatted name field.\n+     */\n+    public String formatNameLatexFree(final String nameToFormat) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55ef8e7bede442fe2de7ab5c453d067205e0befc"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM5MjA4OQ==", "bodyText": "I don't think so.\nI have been avoiding removing functionality or methods. As I am very junior, from a Java experience point of view, I was hoping that it would make reviewing and merging my code easier. If it has the opposite effect, I'll try to be more aggressive in adding, removing, and reformatting :P", "url": "https://github.com/JabRef/jabref/pull/6479#discussion_r430392089", "createdAt": "2020-05-26T12:58:57Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/main/java/org/jabref/gui/maintable/MainTableNameFormatter.java", "diffHunk": "@@ -19,6 +19,31 @@\n         abbrAuthorNames = preferences.getBoolean(JabRefPreferences.ABBR_AUTHOR_NAMES);\n     }\n \n+    /**\n+     * Format a name field for the table, according to user preferences and with latex expressions translated if\n+     * possible.\n+     *\n+     * @param nameToFormat The contents of the name field.\n+     * @return The formatted name field.\n+     */\n+    public String formatNameLatexFree(final String nameToFormat) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA3ODYyNw=="}, "originalCommit": {"oid": "55ef8e7bede442fe2de7ab5c453d067205e0befc"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk1Nzg4OA==", "bodyText": "Thanks, that's a good approach and indeed makes reviewing easier. However, if you a method is no longer used you can safely remove it.", "url": "https://github.com/JabRef/jabref/pull/6479#discussion_r430957888", "createdAt": "2020-05-27T08:49:34Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/maintable/MainTableNameFormatter.java", "diffHunk": "@@ -19,6 +19,31 @@\n         abbrAuthorNames = preferences.getBoolean(JabRefPreferences.ABBR_AUTHOR_NAMES);\n     }\n \n+    /**\n+     * Format a name field for the table, according to user preferences and with latex expressions translated if\n+     * possible.\n+     *\n+     * @param nameToFormat The contents of the name field.\n+     * @return The formatted name field.\n+     */\n+    public String formatNameLatexFree(final String nameToFormat) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA3ODYyNw=="}, "originalCommit": {"oid": "55ef8e7bede442fe2de7ab5c453d067205e0befc"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODgzMjQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/bibtexkeypattern/BracketedPattern.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMToyOToyMVrOGaJ8mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMzoxMzo0NlrOGadn4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA3OTEzMQ==", "bodyText": "Enum should have normal capitalization, i.e. Institution. The same holds true for the enum values", "url": "https://github.com/JabRef/jabref/pull/6479#discussion_r430079131", "createdAt": "2020-05-25T21:29:21Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/logic/bibtexkeypattern/BracketedPattern.java", "diffHunk": "@@ -41,9 +43,54 @@\n public class BracketedPattern {\n     private static final Logger LOGGER = LoggerFactory.getLogger(BracketedPattern.class);\n \n-    private static final String STARTING_CAPITAL_PATTERN = \"[^A-Z]\";\n     private static final int CHARS_OF_FIRST = 5;\n-    private static final Pattern REGEX_PATTERN = Pattern.compile(\".*\\\\(\\\\{([A-Z]+)\\\\}\\\\).*\");\n+\n+    /** Matches everything that is not an uppercase ASCII letter */\n+    private static final Pattern NOT_CAPITAL_FIRST_CHARACTER = Pattern.compile(\"[^A-Z]\");\n+    /** Matches with \"({[A-Z]}+)\", which should be used to abbreviate the name of an institution */\n+    private static final Pattern ABBREVIATIONS = Pattern.compile(\".*\\\\(\\\\{[A-Z]+}\\\\).*\");\n+    /** Matches with \"dep\"/\"dip\", case insensitive */\n+    private static final Pattern DEPARTMENTS = Pattern.compile(\"^d[ei]p.*\", Pattern.CASE_INSENSITIVE);\n+    private enum INSTITUTION {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55ef8e7bede442fe2de7ab5c453d067205e0befc"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM3OTY2MA==", "bodyText": "@tobiasdiez  No! In java Enum values are all Uppercase see here:\n\nBecause they are constants, the names of an enum type's fields are in uppercase letters.\nhttps://docs.oracle.com/javase/tutorial/java/javaOO/enum.html", "url": "https://github.com/JabRef/jabref/pull/6479#discussion_r430379660", "createdAt": "2020-05-26T12:38:27Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/logic/bibtexkeypattern/BracketedPattern.java", "diffHunk": "@@ -41,9 +43,54 @@\n public class BracketedPattern {\n     private static final Logger LOGGER = LoggerFactory.getLogger(BracketedPattern.class);\n \n-    private static final String STARTING_CAPITAL_PATTERN = \"[^A-Z]\";\n     private static final int CHARS_OF_FIRST = 5;\n-    private static final Pattern REGEX_PATTERN = Pattern.compile(\".*\\\\(\\\\{([A-Z]+)\\\\}\\\\).*\");\n+\n+    /** Matches everything that is not an uppercase ASCII letter */\n+    private static final Pattern NOT_CAPITAL_FIRST_CHARACTER = Pattern.compile(\"[^A-Z]\");\n+    /** Matches with \"({[A-Z]}+)\", which should be used to abbreviate the name of an institution */\n+    private static final Pattern ABBREVIATIONS = Pattern.compile(\".*\\\\(\\\\{[A-Z]+}\\\\).*\");\n+    /** Matches with \"dep\"/\"dip\", case insensitive */\n+    private static final Pattern DEPARTMENTS = Pattern.compile(\"^d[ei]p.*\", Pattern.CASE_INSENSITIVE);\n+    private enum INSTITUTION {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA3OTEzMQ=="}, "originalCommit": {"oid": "55ef8e7bede442fe2de7ab5c453d067205e0befc"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQwMTUwNw==", "bodyText": "Good catch and thanks for the link! Updating INSTITUTION -> Institution and I'll try to add it to my checkstyle. Hopefully I'll never leave that in again o.O", "url": "https://github.com/JabRef/jabref/pull/6479#discussion_r430401507", "createdAt": "2020-05-26T13:13:46Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/main/java/org/jabref/logic/bibtexkeypattern/BracketedPattern.java", "diffHunk": "@@ -41,9 +43,54 @@\n public class BracketedPattern {\n     private static final Logger LOGGER = LoggerFactory.getLogger(BracketedPattern.class);\n \n-    private static final String STARTING_CAPITAL_PATTERN = \"[^A-Z]\";\n     private static final int CHARS_OF_FIRST = 5;\n-    private static final Pattern REGEX_PATTERN = Pattern.compile(\".*\\\\(\\\\{([A-Z]+)\\\\}\\\\).*\");\n+\n+    /** Matches everything that is not an uppercase ASCII letter */\n+    private static final Pattern NOT_CAPITAL_FIRST_CHARACTER = Pattern.compile(\"[^A-Z]\");\n+    /** Matches with \"({[A-Z]}+)\", which should be used to abbreviate the name of an institution */\n+    private static final Pattern ABBREVIATIONS = Pattern.compile(\".*\\\\(\\\\{[A-Z]+}\\\\).*\");\n+    /** Matches with \"dep\"/\"dip\", case insensitive */\n+    private static final Pattern DEPARTMENTS = Pattern.compile(\"^d[ei]p.*\", Pattern.CASE_INSENSITIVE);\n+    private enum INSTITUTION {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA3OTEzMQ=="}, "originalCommit": {"oid": "55ef8e7bede442fe2de7ab5c453d067205e0befc"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODgzNDgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/model/entry/AuthorList.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMTozMTozM1rOGaJ-Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMTozMTozM1rOGaJ-Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA3OTQ5NA==", "bodyText": "I'm not a big fan of the fix... methods (I know you didn't introduced them) and would propose to inline all of them. With a bit of refactoring and extracting AuthorList.parse(authors) this shouldn't introduce that much more code elsewhere.", "url": "https://github.com/JabRef/jabref/pull/6479#discussion_r430079494", "createdAt": "2020-05-25T21:31:33Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/model/entry/AuthorList.java", "diffHunk": "@@ -227,6 +233,15 @@ public static String fixAuthorFirstNameFirstCommas(String authors, boolean abbr,\n         return AuthorList.parse(authors).getAsFirstLastNames(abbr, oxfordComma);\n     }\n \n+    /**\n+     * This is a convenience method for getAuthorsFirstFirstLatexFree()\n+     *\n+     * @see AuthorList#getAsFirstLastNames\n+     */\n+    public static String fixAuthorFirstNameFirstCommasLatexFree(String authors, boolean abbr, boolean oxfordComma) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55ef8e7bede442fe2de7ab5c453d067205e0befc"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODg0MzcxOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/jabref/model/entry/AuthorListTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMTozOTo1NlrOGaKDTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMTo1ODowMVrOGbeoGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA4MDg0Nw==", "bodyText": "Thanks for adding so many tests. This is really good. I would propose to split them a bit into two categories: tests for parsing and test for representation. The former should take a string and test against a AuthorList. The latter should take a AuthorList and test against a string. In this way, problems can be diagnosed more easily as it is clear in which part of the code the problem occurs.\n(I'm aware that the existing tests also often don't adhere to this splitting...that's the problem with legacy code :( )", "url": "https://github.com/JabRef/jabref/pull/6479#discussion_r430080847", "createdAt": "2020-05-25T21:39:56Z", "author": {"login": "tobiasdiez"}, "path": "src/test/java/org/jabref/model/entry/AuthorListTest.java", "diffHunk": "@@ -31,6 +41,82 @@ public void testFixAuthorNatbib() {\n                         .fixAuthorNatbib(\"John von Neumann and John Smith and Black Brown, Peter\")));\n     }\n \n+    @Test\n+    public void fixAuthorNatbibLatexFreeNullAuthorStringThrowsException() {\n+        assertThrows(NullPointerException.class, () -> AuthorList.fixAuthorNatbibLatexFree(null));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeEmptyAuthorStringForEmptyInput() {\n+        assertEquals(\"\", AuthorList.fixAuthorNatbibLatexFree(\"\"));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeCachesLatexFreeString() {\n+        String cachedString = AuthorList\n+                .fixAuthorNatbibLatexFree(MUHAMMAD_ALKHWARIZMI);\n+        assertSame(cachedString, AuthorList\n+                .fixAuthorNatbibLatexFree(MUHAMMAD_ALKHWARIZMI));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeUnicodeOneAuthorNameFromLatex() {\n+        assertEquals(\"al-Khw\u0101rizm\u012b\",\n+                AuthorList.fixAuthorNatbibLatexFree(MUHAMMAD_ALKHWARIZMI));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeUnicodeTwoAuthorNamesFromLatex() {\n+        assertEquals(\"al-Khw\u0101rizm\u012b and B\u00f6hm\",\n+                AuthorList.fixAuthorNatbibLatexFree(MUHAMMAD_ALKHWARIZMI\n+                + \" and \" + CORRADO_BOHM));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeUnicodeAuthorEtAlFromLatex() {\n+        assertEquals(\"al-Khw\u0101rizm\u012b et al.\",\n+                AuthorList.fixAuthorNatbibLatexFree(MUHAMMAD_ALKHWARIZMI\n+                        + \" and \" + CORRADO_BOHM + \" and \" + KURT_GODEL));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeUnicodeOneInsitutionNameFromLatex() {\n+        assertEquals(\"The Ban\u016b M\u016bs\u0101 brothers\",\n+                AuthorList.fixAuthorNatbibLatexFree(BANU_MOSA));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeUnicodeTwoInsitutionNameFromLatex() {\n+        assertEquals(\"The Ban\u016b M\u016bs\u0101 brothers and The Ban\u016b M\u016bs\u0101 brothers\",\n+                AuthorList.fixAuthorNatbibLatexFree(BANU_MOSA\n+                + \" and \" + BANU_MOSA));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeUnicodeMixedAuthorsFromLatex() {\n+        assertEquals(\"The Ban\u016b M\u016bs\u0101 brothers and B\u00f6hm\",\n+                AuthorList.fixAuthorNatbibLatexFree(BANU_MOSA\n+                + \" and \" + CORRADO_BOHM));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeOneInstitutionWithParanthesisAtStart() {\n+        assertEquals(\"\u0141ukasz Micha\u0142\",\n+                AuthorList.fixAuthorNatbibLatexFree(\"{{\\\\L{}}ukasz Micha\\\\l{}}\"));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeAuthorWithEscapedBrackets() {\n+        assertEquals(\"Mic}h{a\u0142\",\n+                AuthorList.fixAuthorNatbibLatexFree(\"{\\\\L{}}ukasz Mic\\\\}h\\\\{a\\\\l{}\"));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeInstituteAuthorWithEscapedBrackets() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55ef8e7bede442fe2de7ab5c453d067205e0befc"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQxNjgyNg==", "bodyText": "If I understand you correctly, all the tests I have added belongs to the latter category.\nAnd, under the assumption that I do understand you correctly, I'll see if I can come up with some tests for the former (parsing) category.", "url": "https://github.com/JabRef/jabref/pull/6479#discussion_r430416826", "createdAt": "2020-05-26T13:35:52Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/test/java/org/jabref/model/entry/AuthorListTest.java", "diffHunk": "@@ -31,6 +41,82 @@ public void testFixAuthorNatbib() {\n                         .fixAuthorNatbib(\"John von Neumann and John Smith and Black Brown, Peter\")));\n     }\n \n+    @Test\n+    public void fixAuthorNatbibLatexFreeNullAuthorStringThrowsException() {\n+        assertThrows(NullPointerException.class, () -> AuthorList.fixAuthorNatbibLatexFree(null));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeEmptyAuthorStringForEmptyInput() {\n+        assertEquals(\"\", AuthorList.fixAuthorNatbibLatexFree(\"\"));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeCachesLatexFreeString() {\n+        String cachedString = AuthorList\n+                .fixAuthorNatbibLatexFree(MUHAMMAD_ALKHWARIZMI);\n+        assertSame(cachedString, AuthorList\n+                .fixAuthorNatbibLatexFree(MUHAMMAD_ALKHWARIZMI));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeUnicodeOneAuthorNameFromLatex() {\n+        assertEquals(\"al-Khw\u0101rizm\u012b\",\n+                AuthorList.fixAuthorNatbibLatexFree(MUHAMMAD_ALKHWARIZMI));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeUnicodeTwoAuthorNamesFromLatex() {\n+        assertEquals(\"al-Khw\u0101rizm\u012b and B\u00f6hm\",\n+                AuthorList.fixAuthorNatbibLatexFree(MUHAMMAD_ALKHWARIZMI\n+                + \" and \" + CORRADO_BOHM));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeUnicodeAuthorEtAlFromLatex() {\n+        assertEquals(\"al-Khw\u0101rizm\u012b et al.\",\n+                AuthorList.fixAuthorNatbibLatexFree(MUHAMMAD_ALKHWARIZMI\n+                        + \" and \" + CORRADO_BOHM + \" and \" + KURT_GODEL));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeUnicodeOneInsitutionNameFromLatex() {\n+        assertEquals(\"The Ban\u016b M\u016bs\u0101 brothers\",\n+                AuthorList.fixAuthorNatbibLatexFree(BANU_MOSA));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeUnicodeTwoInsitutionNameFromLatex() {\n+        assertEquals(\"The Ban\u016b M\u016bs\u0101 brothers and The Ban\u016b M\u016bs\u0101 brothers\",\n+                AuthorList.fixAuthorNatbibLatexFree(BANU_MOSA\n+                + \" and \" + BANU_MOSA));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeUnicodeMixedAuthorsFromLatex() {\n+        assertEquals(\"The Ban\u016b M\u016bs\u0101 brothers and B\u00f6hm\",\n+                AuthorList.fixAuthorNatbibLatexFree(BANU_MOSA\n+                + \" and \" + CORRADO_BOHM));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeOneInstitutionWithParanthesisAtStart() {\n+        assertEquals(\"\u0141ukasz Micha\u0142\",\n+                AuthorList.fixAuthorNatbibLatexFree(\"{{\\\\L{}}ukasz Micha\\\\l{}}\"));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeAuthorWithEscapedBrackets() {\n+        assertEquals(\"Mic}h{a\u0142\",\n+                AuthorList.fixAuthorNatbibLatexFree(\"{\\\\L{}}ukasz Mic\\\\}h\\\\{a\\\\l{}\"));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeInstituteAuthorWithEscapedBrackets() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA4MDg0Nw=="}, "originalCommit": {"oid": "55ef8e7bede442fe2de7ab5c453d067205e0befc"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk0NTMzNw==", "bodyText": "I think you can easily split the tests you added in these categories. For the parsing, simply parse the new strings Mu{\\\\d{h}}ammad al-Khw{\\\\={a}}rizm{\\\\={i}} etc you added and compare them to the hand-created AuthorList (say MUHAMMAD_ALKHWARIZMI = new AuthorList(...)%. Then the tests you already added can be converted to operate on MUHAMMAD_ALKHWARIZMI  (which is now an AuthorList and no longer the string).", "url": "https://github.com/JabRef/jabref/pull/6479#discussion_r430945337", "createdAt": "2020-05-27T08:28:53Z", "author": {"login": "tobiasdiez"}, "path": "src/test/java/org/jabref/model/entry/AuthorListTest.java", "diffHunk": "@@ -31,6 +41,82 @@ public void testFixAuthorNatbib() {\n                         .fixAuthorNatbib(\"John von Neumann and John Smith and Black Brown, Peter\")));\n     }\n \n+    @Test\n+    public void fixAuthorNatbibLatexFreeNullAuthorStringThrowsException() {\n+        assertThrows(NullPointerException.class, () -> AuthorList.fixAuthorNatbibLatexFree(null));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeEmptyAuthorStringForEmptyInput() {\n+        assertEquals(\"\", AuthorList.fixAuthorNatbibLatexFree(\"\"));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeCachesLatexFreeString() {\n+        String cachedString = AuthorList\n+                .fixAuthorNatbibLatexFree(MUHAMMAD_ALKHWARIZMI);\n+        assertSame(cachedString, AuthorList\n+                .fixAuthorNatbibLatexFree(MUHAMMAD_ALKHWARIZMI));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeUnicodeOneAuthorNameFromLatex() {\n+        assertEquals(\"al-Khw\u0101rizm\u012b\",\n+                AuthorList.fixAuthorNatbibLatexFree(MUHAMMAD_ALKHWARIZMI));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeUnicodeTwoAuthorNamesFromLatex() {\n+        assertEquals(\"al-Khw\u0101rizm\u012b and B\u00f6hm\",\n+                AuthorList.fixAuthorNatbibLatexFree(MUHAMMAD_ALKHWARIZMI\n+                + \" and \" + CORRADO_BOHM));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeUnicodeAuthorEtAlFromLatex() {\n+        assertEquals(\"al-Khw\u0101rizm\u012b et al.\",\n+                AuthorList.fixAuthorNatbibLatexFree(MUHAMMAD_ALKHWARIZMI\n+                        + \" and \" + CORRADO_BOHM + \" and \" + KURT_GODEL));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeUnicodeOneInsitutionNameFromLatex() {\n+        assertEquals(\"The Ban\u016b M\u016bs\u0101 brothers\",\n+                AuthorList.fixAuthorNatbibLatexFree(BANU_MOSA));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeUnicodeTwoInsitutionNameFromLatex() {\n+        assertEquals(\"The Ban\u016b M\u016bs\u0101 brothers and The Ban\u016b M\u016bs\u0101 brothers\",\n+                AuthorList.fixAuthorNatbibLatexFree(BANU_MOSA\n+                + \" and \" + BANU_MOSA));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeUnicodeMixedAuthorsFromLatex() {\n+        assertEquals(\"The Ban\u016b M\u016bs\u0101 brothers and B\u00f6hm\",\n+                AuthorList.fixAuthorNatbibLatexFree(BANU_MOSA\n+                + \" and \" + CORRADO_BOHM));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeOneInstitutionWithParanthesisAtStart() {\n+        assertEquals(\"\u0141ukasz Micha\u0142\",\n+                AuthorList.fixAuthorNatbibLatexFree(\"{{\\\\L{}}ukasz Micha\\\\l{}}\"));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeAuthorWithEscapedBrackets() {\n+        assertEquals(\"Mic}h{a\u0142\",\n+                AuthorList.fixAuthorNatbibLatexFree(\"{\\\\L{}}ukasz Mic\\\\}h\\\\{a\\\\l{}\"));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeInstituteAuthorWithEscapedBrackets() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA4MDg0Nw=="}, "originalCommit": {"oid": "55ef8e7bede442fe2de7ab5c453d067205e0befc"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ1MzE2Nw==", "bodyText": "I have updated with an attempt at implementing this split. However, I am struggling a bit with creating test cases for parsing as I don't know enough about JabRef/BibTeX/BibLaTeX/Biber.\n\nIn JabRef an author's first name can contain } as in Ku{\\}}rt G{\\\"{o}}del -> Ku}rt G\u00f6del. This doesn't work in any combination* of BibTeX/BibLaTeX/Biber that I have tried.\nThe test case I am trying contains { as in Ku{\\{}rt G{\\\"{o}}del -> Ku{rt G\u00f6del which is not supported by JabRef nor any combination* of BibTeX/BibLaTeX/Biber.\n\nSo for now I am limiting the scope to not include escaped latex brackets. It is a very contrived case that is unlikely to happen, and since I don't understand why it doesn't work I probably shouldn't be writing test cases for it :P\nWith combinations of BibTeX/BibLaTeX/Biber, I mean that I tried BibTeX by itself, BibLaTeX with BibTeX backend, and BibLaTeX with biber backend.", "url": "https://github.com/JabRef/jabref/pull/6479#discussion_r431453167", "createdAt": "2020-05-27T21:28:46Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/test/java/org/jabref/model/entry/AuthorListTest.java", "diffHunk": "@@ -31,6 +41,82 @@ public void testFixAuthorNatbib() {\n                         .fixAuthorNatbib(\"John von Neumann and John Smith and Black Brown, Peter\")));\n     }\n \n+    @Test\n+    public void fixAuthorNatbibLatexFreeNullAuthorStringThrowsException() {\n+        assertThrows(NullPointerException.class, () -> AuthorList.fixAuthorNatbibLatexFree(null));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeEmptyAuthorStringForEmptyInput() {\n+        assertEquals(\"\", AuthorList.fixAuthorNatbibLatexFree(\"\"));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeCachesLatexFreeString() {\n+        String cachedString = AuthorList\n+                .fixAuthorNatbibLatexFree(MUHAMMAD_ALKHWARIZMI);\n+        assertSame(cachedString, AuthorList\n+                .fixAuthorNatbibLatexFree(MUHAMMAD_ALKHWARIZMI));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeUnicodeOneAuthorNameFromLatex() {\n+        assertEquals(\"al-Khw\u0101rizm\u012b\",\n+                AuthorList.fixAuthorNatbibLatexFree(MUHAMMAD_ALKHWARIZMI));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeUnicodeTwoAuthorNamesFromLatex() {\n+        assertEquals(\"al-Khw\u0101rizm\u012b and B\u00f6hm\",\n+                AuthorList.fixAuthorNatbibLatexFree(MUHAMMAD_ALKHWARIZMI\n+                + \" and \" + CORRADO_BOHM));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeUnicodeAuthorEtAlFromLatex() {\n+        assertEquals(\"al-Khw\u0101rizm\u012b et al.\",\n+                AuthorList.fixAuthorNatbibLatexFree(MUHAMMAD_ALKHWARIZMI\n+                        + \" and \" + CORRADO_BOHM + \" and \" + KURT_GODEL));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeUnicodeOneInsitutionNameFromLatex() {\n+        assertEquals(\"The Ban\u016b M\u016bs\u0101 brothers\",\n+                AuthorList.fixAuthorNatbibLatexFree(BANU_MOSA));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeUnicodeTwoInsitutionNameFromLatex() {\n+        assertEquals(\"The Ban\u016b M\u016bs\u0101 brothers and The Ban\u016b M\u016bs\u0101 brothers\",\n+                AuthorList.fixAuthorNatbibLatexFree(BANU_MOSA\n+                + \" and \" + BANU_MOSA));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeUnicodeMixedAuthorsFromLatex() {\n+        assertEquals(\"The Ban\u016b M\u016bs\u0101 brothers and B\u00f6hm\",\n+                AuthorList.fixAuthorNatbibLatexFree(BANU_MOSA\n+                + \" and \" + CORRADO_BOHM));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeOneInstitutionWithParanthesisAtStart() {\n+        assertEquals(\"\u0141ukasz Micha\u0142\",\n+                AuthorList.fixAuthorNatbibLatexFree(\"{{\\\\L{}}ukasz Micha\\\\l{}}\"));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeAuthorWithEscapedBrackets() {\n+        assertEquals(\"Mic}h{a\u0142\",\n+                AuthorList.fixAuthorNatbibLatexFree(\"{\\\\L{}}ukasz Mic\\\\}h\\\\{a\\\\l{}\"));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeInstituteAuthorWithEscapedBrackets() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA4MDg0Nw=="}, "originalCommit": {"oid": "55ef8e7bede442fe2de7ab5c453d067205e0befc"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ2NjUyMQ==", "bodyText": "Sounds good to me. I think an escaped bracket in an author name is indeed very rare!", "url": "https://github.com/JabRef/jabref/pull/6479#discussion_r431466521", "createdAt": "2020-05-27T21:58:01Z", "author": {"login": "tobiasdiez"}, "path": "src/test/java/org/jabref/model/entry/AuthorListTest.java", "diffHunk": "@@ -31,6 +41,82 @@ public void testFixAuthorNatbib() {\n                         .fixAuthorNatbib(\"John von Neumann and John Smith and Black Brown, Peter\")));\n     }\n \n+    @Test\n+    public void fixAuthorNatbibLatexFreeNullAuthorStringThrowsException() {\n+        assertThrows(NullPointerException.class, () -> AuthorList.fixAuthorNatbibLatexFree(null));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeEmptyAuthorStringForEmptyInput() {\n+        assertEquals(\"\", AuthorList.fixAuthorNatbibLatexFree(\"\"));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeCachesLatexFreeString() {\n+        String cachedString = AuthorList\n+                .fixAuthorNatbibLatexFree(MUHAMMAD_ALKHWARIZMI);\n+        assertSame(cachedString, AuthorList\n+                .fixAuthorNatbibLatexFree(MUHAMMAD_ALKHWARIZMI));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeUnicodeOneAuthorNameFromLatex() {\n+        assertEquals(\"al-Khw\u0101rizm\u012b\",\n+                AuthorList.fixAuthorNatbibLatexFree(MUHAMMAD_ALKHWARIZMI));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeUnicodeTwoAuthorNamesFromLatex() {\n+        assertEquals(\"al-Khw\u0101rizm\u012b and B\u00f6hm\",\n+                AuthorList.fixAuthorNatbibLatexFree(MUHAMMAD_ALKHWARIZMI\n+                + \" and \" + CORRADO_BOHM));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeUnicodeAuthorEtAlFromLatex() {\n+        assertEquals(\"al-Khw\u0101rizm\u012b et al.\",\n+                AuthorList.fixAuthorNatbibLatexFree(MUHAMMAD_ALKHWARIZMI\n+                        + \" and \" + CORRADO_BOHM + \" and \" + KURT_GODEL));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeUnicodeOneInsitutionNameFromLatex() {\n+        assertEquals(\"The Ban\u016b M\u016bs\u0101 brothers\",\n+                AuthorList.fixAuthorNatbibLatexFree(BANU_MOSA));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeUnicodeTwoInsitutionNameFromLatex() {\n+        assertEquals(\"The Ban\u016b M\u016bs\u0101 brothers and The Ban\u016b M\u016bs\u0101 brothers\",\n+                AuthorList.fixAuthorNatbibLatexFree(BANU_MOSA\n+                + \" and \" + BANU_MOSA));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeUnicodeMixedAuthorsFromLatex() {\n+        assertEquals(\"The Ban\u016b M\u016bs\u0101 brothers and B\u00f6hm\",\n+                AuthorList.fixAuthorNatbibLatexFree(BANU_MOSA\n+                + \" and \" + CORRADO_BOHM));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeOneInstitutionWithParanthesisAtStart() {\n+        assertEquals(\"\u0141ukasz Micha\u0142\",\n+                AuthorList.fixAuthorNatbibLatexFree(\"{{\\\\L{}}ukasz Micha\\\\l{}}\"));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeAuthorWithEscapedBrackets() {\n+        assertEquals(\"Mic}h{a\u0142\",\n+                AuthorList.fixAuthorNatbibLatexFree(\"{\\\\L{}}ukasz Mic\\\\}h\\\\{a\\\\l{}\"));\n+    }\n+\n+    @Test\n+    public void fixAuthorNatbibLatexFreeInstituteAuthorWithEscapedBrackets() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA4MDg0Nw=="}, "originalCommit": {"oid": "55ef8e7bede442fe2de7ab5c453d067205e0befc"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODg1NzI1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/maintable/BibEntryTableViewModel.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMTo1Mjo1M1rOGaKLMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxODoxNTo1N1rOGaqivg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA4Mjg2Ng==", "bodyText": "This now has the problem that latex code in other fields such as the title is no longer resolved. I think the isName check needs to be used before getting the field content.", "url": "https://github.com/JabRef/jabref/pull/6479#discussion_r430082866", "createdAt": "2020-05-25T21:52:53Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/maintable/BibEntryTableViewModel.java", "diffHunk": "@@ -115,28 +115,27 @@ public BibEntry getEntry() {\n         ObservableValue<String> value = fieldValues.get(fields);\n         if (value != null) {\n             return value;\n-        } else {\n-            value = Bindings.createStringBinding(() -> {\n-                boolean isName = false;\n-\n-                Optional<String> content = Optional.empty();\n-                for (Field field : fields) {\n-                    content = entry.getResolvedFieldOrAliasLatexFree(field, database);\n-                    if (content.isPresent()) {\n-                        isName = field.getProperties().contains(FieldProperty.PERSON_NAMES);\n-                        break;\n-                    }\n-                }\n+        }\n \n-                String result = content.orElse(null);\n-                if (isName) {\n-                    return nameFormatter.formatName(result);\n-                } else {\n-                    return result;\n+        value = Bindings.createStringBinding(() -> {\n+            boolean isName = false;\n+\n+            Optional<String> content = Optional.empty();\n+            for (Field field : fields) {\n+                content = entry.getResolvedFieldOrAlias(field, database);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55ef8e7bede442fe2de7ab5c453d067205e0befc"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM3OTQyNg==", "bodyText": "This now has the problem that latex code in other fields such as the title is no longer resolved.\n\nThat is not great :P\nI am unable to find where this happens, if you can provide me with an example I can hopefully fix it? I'd guess there is a cached value somewhere that I have missed.\nAssuming it is only a caching mistake I should be able to improve the readability before this is merged into the master.\nMy thoughts regarding the changes were that,\nThe previous behaviour of these lines were to return a resolved and latex-free name (by the isName check) or null. The current behaviour (should be?) to return a resolved and latex-free name or an empty string (\"\"), with lines 133-135 performing the same functionality as the previous isName check.", "url": "https://github.com/JabRef/jabref/pull/6479#discussion_r430379426", "createdAt": "2020-05-26T12:38:02Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/main/java/org/jabref/gui/maintable/BibEntryTableViewModel.java", "diffHunk": "@@ -115,28 +115,27 @@ public BibEntry getEntry() {\n         ObservableValue<String> value = fieldValues.get(fields);\n         if (value != null) {\n             return value;\n-        } else {\n-            value = Bindings.createStringBinding(() -> {\n-                boolean isName = false;\n-\n-                Optional<String> content = Optional.empty();\n-                for (Field field : fields) {\n-                    content = entry.getResolvedFieldOrAliasLatexFree(field, database);\n-                    if (content.isPresent()) {\n-                        isName = field.getProperties().contains(FieldProperty.PERSON_NAMES);\n-                        break;\n-                    }\n-                }\n+        }\n \n-                String result = content.orElse(null);\n-                if (isName) {\n-                    return nameFormatter.formatName(result);\n-                } else {\n-                    return result;\n+        value = Bindings.createStringBinding(() -> {\n+            boolean isName = false;\n+\n+            Optional<String> content = Optional.empty();\n+            for (Field field : fields) {\n+                content = entry.getResolvedFieldOrAlias(field, database);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA4Mjg2Ng=="}, "originalCommit": {"oid": "55ef8e7bede442fe2de7ab5c453d067205e0befc"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ4OTIyNw==", "bodyText": "Scratch that, I found it.", "url": "https://github.com/JabRef/jabref/pull/6479#discussion_r430489227", "createdAt": "2020-05-26T15:12:52Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/main/java/org/jabref/gui/maintable/BibEntryTableViewModel.java", "diffHunk": "@@ -115,28 +115,27 @@ public BibEntry getEntry() {\n         ObservableValue<String> value = fieldValues.get(fields);\n         if (value != null) {\n             return value;\n-        } else {\n-            value = Bindings.createStringBinding(() -> {\n-                boolean isName = false;\n-\n-                Optional<String> content = Optional.empty();\n-                for (Field field : fields) {\n-                    content = entry.getResolvedFieldOrAliasLatexFree(field, database);\n-                    if (content.isPresent()) {\n-                        isName = field.getProperties().contains(FieldProperty.PERSON_NAMES);\n-                        break;\n-                    }\n-                }\n+        }\n \n-                String result = content.orElse(null);\n-                if (isName) {\n-                    return nameFormatter.formatName(result);\n-                } else {\n-                    return result;\n+        value = Bindings.createStringBinding(() -> {\n+            boolean isName = false;\n+\n+            Optional<String> content = Optional.empty();\n+            for (Field field : fields) {\n+                content = entry.getResolvedFieldOrAlias(field, database);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA4Mjg2Ng=="}, "originalCommit": {"oid": "55ef8e7bede442fe2de7ab5c453d067205e0befc"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYxMzE4Mg==", "bodyText": "Hum... I ran into an issue similar to #3356. I'll see if I can fix it/open up an issue on it later.", "url": "https://github.com/JabRef/jabref/pull/6479#discussion_r430613182", "createdAt": "2020-05-26T18:15:57Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/main/java/org/jabref/gui/maintable/BibEntryTableViewModel.java", "diffHunk": "@@ -115,28 +115,27 @@ public BibEntry getEntry() {\n         ObservableValue<String> value = fieldValues.get(fields);\n         if (value != null) {\n             return value;\n-        } else {\n-            value = Bindings.createStringBinding(() -> {\n-                boolean isName = false;\n-\n-                Optional<String> content = Optional.empty();\n-                for (Field field : fields) {\n-                    content = entry.getResolvedFieldOrAliasLatexFree(field, database);\n-                    if (content.isPresent()) {\n-                        isName = field.getProperties().contains(FieldProperty.PERSON_NAMES);\n-                        break;\n-                    }\n-                }\n+        }\n \n-                String result = content.orElse(null);\n-                if (isName) {\n-                    return nameFormatter.formatName(result);\n-                } else {\n-                    return result;\n+        value = Bindings.createStringBinding(() -> {\n+            boolean isName = false;\n+\n+            Optional<String> content = Optional.empty();\n+            for (Field field : fields) {\n+                content = entry.getResolvedFieldOrAlias(field, database);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA4Mjg2Ng=="}, "originalCommit": {"oid": "55ef8e7bede442fe2de7ab5c453d067205e0befc"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODg1ODc0OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/jabref/logic/bibtexkeypattern/BibtexKeyGeneratorTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMTo1NDozMlrOGaKMKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODoyMzo0NlrOGa-niA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA4MzExMg==", "bodyText": "You can safely ignore the throws Exception for tests (although the intellj warnings are there). In fact, it's good practice to add this to test methods so that the tests don't need to change if you add an exception to the method under test.", "url": "https://github.com/JabRef/jabref/pull/6479#discussion_r430083112", "createdAt": "2020-05-25T21:54:32Z", "author": {"login": "tobiasdiez"}, "path": "src/test/java/org/jabref/logic/bibtexkeypattern/BibtexKeyGeneratorTest.java", "diffHunk": "@@ -996,105 +1042,105 @@ void testcrossrefShorttitleInitials() {\n         database.insertEntry(entry1);\n         entry2.setField(StandardField.TITLE, \"Green Scheduling of Whatever\");\n \n-        assertEquals(\"GSo\", BibtexKeyGenerator.generateKey(entry1, \"shorttitleINI\", database));\n+        assertEquals(\"GSo\", generateKey(entry1, \"shorttitleINI\", database));\n     }\n \n     @Test\n-    void generateKeyStripsColonFromTitle() throws Exception {\n+    void generateKeyStripsColonFromTitle() {\n         BibEntry entry = new BibEntry();\n         entry.setField(StandardField.TITLE, \"Green Scheduling of: Whatever\");\n-        assertEquals(\"GreenSchedulingOfWhatever\", BibtexKeyGenerator.generateKey(entry, \"title\"));\n+        assertEquals(\"GreenSchedulingOfWhatever\", generateKey(entry, \"title\"));\n     }\n \n     @Test\n-    void generateKeyStripsApostropheFromTitle() throws Exception {\n+    void generateKeyStripsApostropheFromTitle() {\n         BibEntry entry = new BibEntry();\n         entry.setField(StandardField.TITLE, \"Green Scheduling of `Whatever`\");\n-        assertEquals(\"GreenSchedulingofWhatever\", BibtexKeyGenerator.generateKey(entry, \"title\"));\n+        assertEquals(\"GreenSchedulingofWhatever\", generateKey(entry, \"title\"));\n     }\n \n     @Test\n-    void generateKeyWithOneModifier() throws Exception {\n+    void generateKeyWithOneModifier() {\n         BibEntry entry = new BibEntry();\n         entry.setField(StandardField.TITLE, \"The Interesting Title\");\n-        assertEquals(\"theinterestingtitle\", BibtexKeyGenerator.generateKey(entry, \"title:lower\"));\n+        assertEquals(\"theinterestingtitle\", generateKey(entry, \"title:lower\"));\n     }\n \n     @Test\n-    void generateKeyWithTwoModifiers() throws Exception {\n+    void generateKeyWithTwoModifiers() {\n         BibEntry entry = new BibEntry();\n         entry.setField(StandardField.TITLE, \"The Interesting Title\");\n-        assertEquals(\"theinterestingtitle\", BibtexKeyGenerator.generateKey(entry, \"title:lower:(_)\"));\n+        assertEquals(\"theinterestingtitle\", generateKey(entry, \"title:lower:(_)\"));\n     }\n \n     @Test\n-    void generateKeyWithTitleCapitalizeModifier() throws Exception {\n+    void generateKeyWithTitleCapitalizeModifier() {\n         BibEntry entry = new BibEntry();\n         entry.setField(StandardField.TITLE, \"the InTeresting title longer than THREE words\");\n-        assertEquals(\"TheInterestingTitleLongerThanThreeWords\", BibtexKeyGenerator.generateKey(entry, \"title:capitalize\"));\n+        assertEquals(\"TheInterestingTitleLongerThanThreeWords\", generateKey(entry, \"title:capitalize\"));\n     }\n \n     @Test\n-    void generateKeyWithShortTitleCapitalizeModifier() throws Exception {\n+    void generateKeyWithShortTitleCapitalizeModifier() {\n         BibEntry entry = new BibEntry();\n         entry.setField(StandardField.TITLE, \"the InTeresting title longer than THREE words\");\n-        assertEquals(\"InterestingTitleLonger\", BibtexKeyGenerator.generateKey(entry, \"shorttitle:capitalize\"));\n+        assertEquals(\"InterestingTitleLonger\", generateKey(entry, \"shorttitle:capitalize\"));\n     }\n \n     @Test\n-    void generateKeyWithTitleTitleCaseModifier() throws Exception {\n+    void generateKeyWithTitleTitleCaseModifier() {\n         BibEntry entry = new BibEntry();\n         entry.setField(StandardField.TITLE, \"A title WITH some of The key words\");\n-        assertEquals(\"ATitlewithSomeoftheKeyWords\", BibtexKeyGenerator.generateKey(entry, \"title:titlecase\"));\n+        assertEquals(\"ATitlewithSomeoftheKeyWords\", generateKey(entry, \"title:titlecase\"));\n     }\n \n     @Test\n-    void generateKeyWithShortTitleTitleCaseModifier() throws Exception {\n+    void generateKeyWithShortTitleTitleCaseModifier() {\n         BibEntry entry = new BibEntry();\n         entry.setField(StandardField.TITLE, \"the InTeresting title longer than THREE words\");\n-        assertEquals(\"InterestingTitleLonger\", BibtexKeyGenerator.generateKey(entry, \"shorttitle:titlecase\"));\n+        assertEquals(\"InterestingTitleLonger\", generateKey(entry, \"shorttitle:titlecase\"));\n     }\n \n     @Test\n-    void generateKeyWithTitleSentenceCaseModifier() throws Exception {\n+    void generateKeyWithTitleSentenceCaseModifier() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55ef8e7bede442fe2de7ab5c453d067205e0befc"}, "originalPosition": 549}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyODY5MQ==", "bodyText": "I don't have an opinion on this issue. I am, unfortunately, currently using Intellij recommendations to attempt to compensate for a lack of experience :P\nWould you like me to add it to all methods in BibtexKeyGeneratorTest and/or should I keep it in mind for any future changes?", "url": "https://github.com/JabRef/jabref/pull/6479#discussion_r430428691", "createdAt": "2020-05-26T13:52:19Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/test/java/org/jabref/logic/bibtexkeypattern/BibtexKeyGeneratorTest.java", "diffHunk": "@@ -996,105 +1042,105 @@ void testcrossrefShorttitleInitials() {\n         database.insertEntry(entry1);\n         entry2.setField(StandardField.TITLE, \"Green Scheduling of Whatever\");\n \n-        assertEquals(\"GSo\", BibtexKeyGenerator.generateKey(entry1, \"shorttitleINI\", database));\n+        assertEquals(\"GSo\", generateKey(entry1, \"shorttitleINI\", database));\n     }\n \n     @Test\n-    void generateKeyStripsColonFromTitle() throws Exception {\n+    void generateKeyStripsColonFromTitle() {\n         BibEntry entry = new BibEntry();\n         entry.setField(StandardField.TITLE, \"Green Scheduling of: Whatever\");\n-        assertEquals(\"GreenSchedulingOfWhatever\", BibtexKeyGenerator.generateKey(entry, \"title\"));\n+        assertEquals(\"GreenSchedulingOfWhatever\", generateKey(entry, \"title\"));\n     }\n \n     @Test\n-    void generateKeyStripsApostropheFromTitle() throws Exception {\n+    void generateKeyStripsApostropheFromTitle() {\n         BibEntry entry = new BibEntry();\n         entry.setField(StandardField.TITLE, \"Green Scheduling of `Whatever`\");\n-        assertEquals(\"GreenSchedulingofWhatever\", BibtexKeyGenerator.generateKey(entry, \"title\"));\n+        assertEquals(\"GreenSchedulingofWhatever\", generateKey(entry, \"title\"));\n     }\n \n     @Test\n-    void generateKeyWithOneModifier() throws Exception {\n+    void generateKeyWithOneModifier() {\n         BibEntry entry = new BibEntry();\n         entry.setField(StandardField.TITLE, \"The Interesting Title\");\n-        assertEquals(\"theinterestingtitle\", BibtexKeyGenerator.generateKey(entry, \"title:lower\"));\n+        assertEquals(\"theinterestingtitle\", generateKey(entry, \"title:lower\"));\n     }\n \n     @Test\n-    void generateKeyWithTwoModifiers() throws Exception {\n+    void generateKeyWithTwoModifiers() {\n         BibEntry entry = new BibEntry();\n         entry.setField(StandardField.TITLE, \"The Interesting Title\");\n-        assertEquals(\"theinterestingtitle\", BibtexKeyGenerator.generateKey(entry, \"title:lower:(_)\"));\n+        assertEquals(\"theinterestingtitle\", generateKey(entry, \"title:lower:(_)\"));\n     }\n \n     @Test\n-    void generateKeyWithTitleCapitalizeModifier() throws Exception {\n+    void generateKeyWithTitleCapitalizeModifier() {\n         BibEntry entry = new BibEntry();\n         entry.setField(StandardField.TITLE, \"the InTeresting title longer than THREE words\");\n-        assertEquals(\"TheInterestingTitleLongerThanThreeWords\", BibtexKeyGenerator.generateKey(entry, \"title:capitalize\"));\n+        assertEquals(\"TheInterestingTitleLongerThanThreeWords\", generateKey(entry, \"title:capitalize\"));\n     }\n \n     @Test\n-    void generateKeyWithShortTitleCapitalizeModifier() throws Exception {\n+    void generateKeyWithShortTitleCapitalizeModifier() {\n         BibEntry entry = new BibEntry();\n         entry.setField(StandardField.TITLE, \"the InTeresting title longer than THREE words\");\n-        assertEquals(\"InterestingTitleLonger\", BibtexKeyGenerator.generateKey(entry, \"shorttitle:capitalize\"));\n+        assertEquals(\"InterestingTitleLonger\", generateKey(entry, \"shorttitle:capitalize\"));\n     }\n \n     @Test\n-    void generateKeyWithTitleTitleCaseModifier() throws Exception {\n+    void generateKeyWithTitleTitleCaseModifier() {\n         BibEntry entry = new BibEntry();\n         entry.setField(StandardField.TITLE, \"A title WITH some of The key words\");\n-        assertEquals(\"ATitlewithSomeoftheKeyWords\", BibtexKeyGenerator.generateKey(entry, \"title:titlecase\"));\n+        assertEquals(\"ATitlewithSomeoftheKeyWords\", generateKey(entry, \"title:titlecase\"));\n     }\n \n     @Test\n-    void generateKeyWithShortTitleTitleCaseModifier() throws Exception {\n+    void generateKeyWithShortTitleTitleCaseModifier() {\n         BibEntry entry = new BibEntry();\n         entry.setField(StandardField.TITLE, \"the InTeresting title longer than THREE words\");\n-        assertEquals(\"InterestingTitleLonger\", BibtexKeyGenerator.generateKey(entry, \"shorttitle:titlecase\"));\n+        assertEquals(\"InterestingTitleLonger\", generateKey(entry, \"shorttitle:titlecase\"));\n     }\n \n     @Test\n-    void generateKeyWithTitleSentenceCaseModifier() throws Exception {\n+    void generateKeyWithTitleSentenceCaseModifier() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA4MzExMg=="}, "originalCommit": {"oid": "55ef8e7bede442fe2de7ab5c453d067205e0befc"}, "originalPosition": 549}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk0MjA4OA==", "bodyText": "It was just a minor remark to keep in mind for the next time.", "url": "https://github.com/JabRef/jabref/pull/6479#discussion_r430942088", "createdAt": "2020-05-27T08:23:46Z", "author": {"login": "tobiasdiez"}, "path": "src/test/java/org/jabref/logic/bibtexkeypattern/BibtexKeyGeneratorTest.java", "diffHunk": "@@ -996,105 +1042,105 @@ void testcrossrefShorttitleInitials() {\n         database.insertEntry(entry1);\n         entry2.setField(StandardField.TITLE, \"Green Scheduling of Whatever\");\n \n-        assertEquals(\"GSo\", BibtexKeyGenerator.generateKey(entry1, \"shorttitleINI\", database));\n+        assertEquals(\"GSo\", generateKey(entry1, \"shorttitleINI\", database));\n     }\n \n     @Test\n-    void generateKeyStripsColonFromTitle() throws Exception {\n+    void generateKeyStripsColonFromTitle() {\n         BibEntry entry = new BibEntry();\n         entry.setField(StandardField.TITLE, \"Green Scheduling of: Whatever\");\n-        assertEquals(\"GreenSchedulingOfWhatever\", BibtexKeyGenerator.generateKey(entry, \"title\"));\n+        assertEquals(\"GreenSchedulingOfWhatever\", generateKey(entry, \"title\"));\n     }\n \n     @Test\n-    void generateKeyStripsApostropheFromTitle() throws Exception {\n+    void generateKeyStripsApostropheFromTitle() {\n         BibEntry entry = new BibEntry();\n         entry.setField(StandardField.TITLE, \"Green Scheduling of `Whatever`\");\n-        assertEquals(\"GreenSchedulingofWhatever\", BibtexKeyGenerator.generateKey(entry, \"title\"));\n+        assertEquals(\"GreenSchedulingofWhatever\", generateKey(entry, \"title\"));\n     }\n \n     @Test\n-    void generateKeyWithOneModifier() throws Exception {\n+    void generateKeyWithOneModifier() {\n         BibEntry entry = new BibEntry();\n         entry.setField(StandardField.TITLE, \"The Interesting Title\");\n-        assertEquals(\"theinterestingtitle\", BibtexKeyGenerator.generateKey(entry, \"title:lower\"));\n+        assertEquals(\"theinterestingtitle\", generateKey(entry, \"title:lower\"));\n     }\n \n     @Test\n-    void generateKeyWithTwoModifiers() throws Exception {\n+    void generateKeyWithTwoModifiers() {\n         BibEntry entry = new BibEntry();\n         entry.setField(StandardField.TITLE, \"The Interesting Title\");\n-        assertEquals(\"theinterestingtitle\", BibtexKeyGenerator.generateKey(entry, \"title:lower:(_)\"));\n+        assertEquals(\"theinterestingtitle\", generateKey(entry, \"title:lower:(_)\"));\n     }\n \n     @Test\n-    void generateKeyWithTitleCapitalizeModifier() throws Exception {\n+    void generateKeyWithTitleCapitalizeModifier() {\n         BibEntry entry = new BibEntry();\n         entry.setField(StandardField.TITLE, \"the InTeresting title longer than THREE words\");\n-        assertEquals(\"TheInterestingTitleLongerThanThreeWords\", BibtexKeyGenerator.generateKey(entry, \"title:capitalize\"));\n+        assertEquals(\"TheInterestingTitleLongerThanThreeWords\", generateKey(entry, \"title:capitalize\"));\n     }\n \n     @Test\n-    void generateKeyWithShortTitleCapitalizeModifier() throws Exception {\n+    void generateKeyWithShortTitleCapitalizeModifier() {\n         BibEntry entry = new BibEntry();\n         entry.setField(StandardField.TITLE, \"the InTeresting title longer than THREE words\");\n-        assertEquals(\"InterestingTitleLonger\", BibtexKeyGenerator.generateKey(entry, \"shorttitle:capitalize\"));\n+        assertEquals(\"InterestingTitleLonger\", generateKey(entry, \"shorttitle:capitalize\"));\n     }\n \n     @Test\n-    void generateKeyWithTitleTitleCaseModifier() throws Exception {\n+    void generateKeyWithTitleTitleCaseModifier() {\n         BibEntry entry = new BibEntry();\n         entry.setField(StandardField.TITLE, \"A title WITH some of The key words\");\n-        assertEquals(\"ATitlewithSomeoftheKeyWords\", BibtexKeyGenerator.generateKey(entry, \"title:titlecase\"));\n+        assertEquals(\"ATitlewithSomeoftheKeyWords\", generateKey(entry, \"title:titlecase\"));\n     }\n \n     @Test\n-    void generateKeyWithShortTitleTitleCaseModifier() throws Exception {\n+    void generateKeyWithShortTitleTitleCaseModifier() {\n         BibEntry entry = new BibEntry();\n         entry.setField(StandardField.TITLE, \"the InTeresting title longer than THREE words\");\n-        assertEquals(\"InterestingTitleLonger\", BibtexKeyGenerator.generateKey(entry, \"shorttitle:titlecase\"));\n+        assertEquals(\"InterestingTitleLonger\", generateKey(entry, \"shorttitle:titlecase\"));\n     }\n \n     @Test\n-    void generateKeyWithTitleSentenceCaseModifier() throws Exception {\n+    void generateKeyWithTitleSentenceCaseModifier() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA4MzExMg=="}, "originalCommit": {"oid": "55ef8e7bede442fe2de7ab5c453d067205e0befc"}, "originalPosition": 549}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODg3OTM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/model/entry/AuthorList.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMjoxNDowMVrOGaKXZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNDoyMTo0NFrOGb3bVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA4NTk5MA==", "bodyText": "We normally try to avoid abbreviations. How ironic... \ud83d\ude09\nBut I can see that this particular abbreviation was used before in other places in this class too, so never mind.\nIf you like, change it in all places in this class.", "url": "https://github.com/JabRef/jabref/pull/6479#discussion_r430085990", "createdAt": "2020-05-25T22:14:01Z", "author": {"login": "calixtus"}, "path": "src/main/java/org/jabref/model/entry/AuthorList.java", "diffHunk": "@@ -437,6 +488,17 @@ public String getAsLastNames(boolean oxfordComma) {\n         return authorsLastOnly[abbrInt];\n     }\n \n+    public String getAsLastNamesLatexFree(boolean oxfordComma) {\n+        int abbrInt = oxfordComma ? 0 : 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55ef8e7bede442fe2de7ab5c453d067205e0befc"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcyNjk3OA==", "bodyText": "I left one abbreviation because I am not really sure what it should be (firstabbr)", "url": "https://github.com/JabRef/jabref/pull/6479#discussion_r430726978", "createdAt": "2020-05-26T21:48:31Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/main/java/org/jabref/model/entry/AuthorList.java", "diffHunk": "@@ -437,6 +488,17 @@ public String getAsLastNames(boolean oxfordComma) {\n         return authorsLastOnly[abbrInt];\n     }\n \n+    public String getAsLastNamesLatexFree(boolean oxfordComma) {\n+        int abbrInt = oxfordComma ? 0 : 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA4NTk5MA=="}, "originalCommit": {"oid": "55ef8e7bede442fe2de7ab5c453d067205e0befc"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDczMzM0NQ==", "bodyText": "If in doubt, just name it firstAbbreviation \ud83d\ude06", "url": "https://github.com/JabRef/jabref/pull/6479#discussion_r430733345", "createdAt": "2020-05-26T22:04:31Z", "author": {"login": "calixtus"}, "path": "src/main/java/org/jabref/model/entry/AuthorList.java", "diffHunk": "@@ -437,6 +488,17 @@ public String getAsLastNames(boolean oxfordComma) {\n         return authorsLastOnly[abbrInt];\n     }\n \n+    public String getAsLastNamesLatexFree(boolean oxfordComma) {\n+        int abbrInt = oxfordComma ? 0 : 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA4NTk5MA=="}, "originalCommit": {"oid": "55ef8e7bede442fe2de7ab5c453d067205e0befc"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg3Mjg1NA==", "bodyText": "If in doubt, just name it firstAbbreviation \ud83d\ude06\n\n\ud83d\ude31\nJoke aside. firstAbbreviation is actually an improvement on firstabbr, fair enough \ud83d\ude1d", "url": "https://github.com/JabRef/jabref/pull/6479#discussion_r431872854", "createdAt": "2020-05-28T14:21:44Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/main/java/org/jabref/model/entry/AuthorList.java", "diffHunk": "@@ -437,6 +488,17 @@ public String getAsLastNames(boolean oxfordComma) {\n         return authorsLastOnly[abbrInt];\n     }\n \n+    public String getAsLastNamesLatexFree(boolean oxfordComma) {\n+        int abbrInt = oxfordComma ? 0 : 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA4NTk5MA=="}, "originalCommit": {"oid": "55ef8e7bede442fe2de7ab5c453d067205e0befc"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODg4MjgwOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/jabref/logic/bibtexkeypattern/BibtexKeyGeneratorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMjoxNzoyNlrOGaKZUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNDoxMDozM1rOGagHZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA4NjQ4MQ==", "bodyText": "In other test cases you inline the argument for assertEquals.", "url": "https://github.com/JabRef/jabref/pull/6479#discussion_r430086481", "createdAt": "2020-05-25T22:17:26Z", "author": {"login": "calixtus"}, "path": "src/test/java/org/jabref/logic/bibtexkeypattern/BibtexKeyGeneratorTest.java", "diffHunk": "@@ -879,15 +925,15 @@ void keywordNKeywordsSeparatedBySpace() {\n         BibEntry entry = new BibEntry();\n         entry.setField(StandardField.KEYWORDS, \"w1, w2a w2b, w3\");\n \n-        String result = BibtexKeyGenerator.generateKey(entry, \"keyword1\");\n+        String result = generateKey(entry, \"keyword1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55ef8e7bede442fe2de7ab5c453d067205e0befc"}, "originalPosition": 396}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ0MjM0MA==", "bodyText": "Yes. I don't have much experience with Java programming, therefore I mostly leave the original code unchanged. I try \"pushing my luck\" with readability \"improvements\" in BrackettedPattern.generateInstitutionKey(lines 1312-1429) as a way to balance improving my own Java programming knowledge without adding too much extra work for reviewers.\nAuthorListTest lines 39-41 is another example of where I have left previous code untouched while I'd like to change it to use assertSame.\nRight now, I view my PRs to JabRef as a balancing act. If I am being too cautious or bold, feel free to tell me. I'd be much happier if I leave JabRef's codebase better of without wasting too much time of reviewers :P", "url": "https://github.com/JabRef/jabref/pull/6479#discussion_r430442340", "createdAt": "2020-05-26T14:10:33Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/test/java/org/jabref/logic/bibtexkeypattern/BibtexKeyGeneratorTest.java", "diffHunk": "@@ -879,15 +925,15 @@ void keywordNKeywordsSeparatedBySpace() {\n         BibEntry entry = new BibEntry();\n         entry.setField(StandardField.KEYWORDS, \"w1, w2a w2b, w3\");\n \n-        String result = BibtexKeyGenerator.generateKey(entry, \"keyword1\");\n+        String result = generateKey(entry, \"keyword1\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA4NjQ4MQ=="}, "originalCommit": {"oid": "55ef8e7bede442fe2de7ab5c453d067205e0befc"}, "originalPosition": 396}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1836, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}