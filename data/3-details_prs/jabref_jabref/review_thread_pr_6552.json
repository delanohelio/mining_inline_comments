{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1MjMyODY2", "number": 6552, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxODoxMzo1OFrOEA_Z-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo1Mzo1MFrOEGANZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDc0Mjk5OnYy", "diffSide": "RIGHT", "path": "CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxODoxMzo1OFrOGcnNuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxODo0Njo0OFrOGcoNBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY1NTgwMA==", "bodyText": "Just a note:\nYou don't need to add a changelog entry, if the error was introduced in a dev version.\nChangelog should show differences between actual release and (current dev/next release version)", "url": "https://github.com/JabRef/jabref/pull/6552#discussion_r432655800", "createdAt": "2020-05-29T18:13:58Z", "author": {"login": "Siedlerchr"}, "path": "CHANGELOG.md", "diffHunk": "@@ -80,6 +80,7 @@ Note that this project **does not** adhere to [Semantic Versioning](http://semve\n - We fixed an issue where the name fields were not updated after the preferences changed. [#6515](https://github.com/JabRef/jabref/issues/6515)\n - We fixed an issue where \"null\" appeared in generated BibTeX keys. [#6459](https://github.com/JabRef/jabref/issues/6459)\n - We fixed an issue where the authors' names were incorrectly displayed in the authors' column when they were bracketed. [#6465](https://github.com/JabRef/jabref/issues/6465) [#6459](https://github.com/JabRef/jabref/issues/6459)\n+- We fixed an issue where the `Show names unchanged` option did not convert LaTeX macros into Unicode. [#6479](https://github.com/JabRef/jabref/pull/6479)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94a46e2802b2e817030c4d9dbe387351794b202c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY2MTc1MQ==", "bodyText": "Aha! I try to follow the guidelines but it is not always clear to me =/", "url": "https://github.com/JabRef/jabref/pull/6552#discussion_r432661751", "createdAt": "2020-05-29T18:25:15Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "CHANGELOG.md", "diffHunk": "@@ -80,6 +80,7 @@ Note that this project **does not** adhere to [Semantic Versioning](http://semve\n - We fixed an issue where the name fields were not updated after the preferences changed. [#6515](https://github.com/JabRef/jabref/issues/6515)\n - We fixed an issue where \"null\" appeared in generated BibTeX keys. [#6459](https://github.com/JabRef/jabref/issues/6459)\n - We fixed an issue where the authors' names were incorrectly displayed in the authors' column when they were bracketed. [#6465](https://github.com/JabRef/jabref/issues/6465) [#6459](https://github.com/JabRef/jabref/issues/6459)\n+- We fixed an issue where the `Show names unchanged` option did not convert LaTeX macros into Unicode. [#6479](https://github.com/JabRef/jabref/pull/6479)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY1NTgwMA=="}, "originalCommit": {"oid": "94a46e2802b2e817030c4d9dbe387351794b202c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY2NDA1Nw==", "bodyText": "No problem  ;)  If you encounter any inconsistencies just give us a hint.  We are happy for every contributor", "url": "https://github.com/JabRef/jabref/pull/6552#discussion_r432664057", "createdAt": "2020-05-29T18:30:04Z", "author": {"login": "Siedlerchr"}, "path": "CHANGELOG.md", "diffHunk": "@@ -80,6 +80,7 @@ Note that this project **does not** adhere to [Semantic Versioning](http://semve\n - We fixed an issue where the name fields were not updated after the preferences changed. [#6515](https://github.com/JabRef/jabref/issues/6515)\n - We fixed an issue where \"null\" appeared in generated BibTeX keys. [#6459](https://github.com/JabRef/jabref/issues/6459)\n - We fixed an issue where the authors' names were incorrectly displayed in the authors' column when they were bracketed. [#6465](https://github.com/JabRef/jabref/issues/6465) [#6459](https://github.com/JabRef/jabref/issues/6459)\n+- We fixed an issue where the `Show names unchanged` option did not convert LaTeX macros into Unicode. [#6479](https://github.com/JabRef/jabref/pull/6479)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY1NTgwMA=="}, "originalCommit": {"oid": "94a46e2802b2e817030c4d9dbe387351794b202c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY2ODk2Mw==", "bodyText": "So far no inconsistency \ud83d\ude1b\nI appreciate that ending up attempting to fix your own PR post-merge should be an exception rather than the rule \ud83e\udd21", "url": "https://github.com/JabRef/jabref/pull/6552#discussion_r432668963", "createdAt": "2020-05-29T18:40:29Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "CHANGELOG.md", "diffHunk": "@@ -80,6 +80,7 @@ Note that this project **does not** adhere to [Semantic Versioning](http://semve\n - We fixed an issue where the name fields were not updated after the preferences changed. [#6515](https://github.com/JabRef/jabref/issues/6515)\n - We fixed an issue where \"null\" appeared in generated BibTeX keys. [#6459](https://github.com/JabRef/jabref/issues/6459)\n - We fixed an issue where the authors' names were incorrectly displayed in the authors' column when they were bracketed. [#6465](https://github.com/JabRef/jabref/issues/6465) [#6459](https://github.com/JabRef/jabref/issues/6459)\n+- We fixed an issue where the `Show names unchanged` option did not convert LaTeX macros into Unicode. [#6479](https://github.com/JabRef/jabref/pull/6479)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY1NTgwMA=="}, "originalCommit": {"oid": "94a46e2802b2e817030c4d9dbe387351794b202c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY2OTU3MQ==", "bodyText": "I mean, if I end up thinking that someone else would benefit from the information I will submit a PR to the documentation", "url": "https://github.com/JabRef/jabref/pull/6552#discussion_r432669571", "createdAt": "2020-05-29T18:41:48Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "CHANGELOG.md", "diffHunk": "@@ -80,6 +80,7 @@ Note that this project **does not** adhere to [Semantic Versioning](http://semve\n - We fixed an issue where the name fields were not updated after the preferences changed. [#6515](https://github.com/JabRef/jabref/issues/6515)\n - We fixed an issue where \"null\" appeared in generated BibTeX keys. [#6459](https://github.com/JabRef/jabref/issues/6459)\n - We fixed an issue where the authors' names were incorrectly displayed in the authors' column when they were bracketed. [#6465](https://github.com/JabRef/jabref/issues/6465) [#6459](https://github.com/JabRef/jabref/issues/6459)\n+- We fixed an issue where the `Show names unchanged` option did not convert LaTeX macros into Unicode. [#6479](https://github.com/JabRef/jabref/pull/6479)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY1NTgwMA=="}, "originalCommit": {"oid": "94a46e2802b2e817030c4d9dbe387351794b202c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY3MjAwNQ==", "bodyText": "In an ideal world it should never happen \ud83d\ude07 ,  but we are still all humans (at least I hope so \ud83e\udd16 ), so bugs are inevitable. And fixing things after a merge happens to everyone, so welcome to the club ;)", "url": "https://github.com/JabRef/jabref/pull/6552#discussion_r432672005", "createdAt": "2020-05-29T18:46:48Z", "author": {"login": "Siedlerchr"}, "path": "CHANGELOG.md", "diffHunk": "@@ -80,6 +80,7 @@ Note that this project **does not** adhere to [Semantic Versioning](http://semve\n - We fixed an issue where the name fields were not updated after the preferences changed. [#6515](https://github.com/JabRef/jabref/issues/6515)\n - We fixed an issue where \"null\" appeared in generated BibTeX keys. [#6459](https://github.com/JabRef/jabref/issues/6459)\n - We fixed an issue where the authors' names were incorrectly displayed in the authors' column when they were bracketed. [#6465](https://github.com/JabRef/jabref/issues/6465) [#6459](https://github.com/JabRef/jabref/issues/6459)\n+- We fixed an issue where the `Show names unchanged` option did not convert LaTeX macros into Unicode. [#6479](https://github.com/JabRef/jabref/pull/6479)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY1NTgwMA=="}, "originalCommit": {"oid": "94a46e2802b2e817030c4d9dbe387351794b202c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDEzNzIxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/model/entry/AuthorList.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMDozNDo0NVrOGdZKqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMDozNDo0NVrOGdZKqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ3NDIxOA==", "bodyText": "If the AuthorList is not created by the factory method parse, it was not created from a String and authorsUnformatted does not exist. An alternative would be to just throw an exception, currently that would just force the test cases to change.\nThere is a public constructor for AuthorList that is removable. The two protected constructors are also removable if AuthorListParser is made an inner class but I'd consider that detrimental to readability.", "url": "https://github.com/JabRef/jabref/pull/6552#discussion_r433474218", "createdAt": "2020-06-01T20:34:45Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/main/java/org/jabref/model/entry/AuthorList.java", "diffHunk": "@@ -653,6 +570,10 @@ public String getAsUnformattedLatexFree() {\n             return authorsUnformattedLatexFree;\n         }\n \n+        // The AuthorList was not created with the factory method\n+        if (authorsUnformatted == null) {\n+            authorsUnformatted = getAsFirstLastNamesWithAnd();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e840bcd972ce4584eea3e9009e00326caf2164d"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDc3NTEwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/model/entry/AuthorList.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMTozMjo0MlrOGfBmsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMTozMjo0MlrOGfBmsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE4NTMzMA==", "bodyText": "In case the cache contains the author string, the new code has to search twice for its occurrence: once in containsKey and once in get. Performance wise it's better to use get once and then use a if (...==null) check.", "url": "https://github.com/JabRef/jabref/pull/6552#discussion_r435185330", "createdAt": "2020-06-04T11:32:42Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/model/entry/AuthorList.java", "diffHunk": "@@ -168,60 +164,16 @@ public AuthorList() {\n      * @param authors The string of authors or editors in bibtex format to parse.\n      * @return An AuthorList object representing the given authors.\n      */\n-    public static AuthorList parse(String authors) {\n+    public static AuthorList parse(final String authors) {\n         Objects.requireNonNull(authors);\n \n-        // Handle case names in order lastname, firstname and separated by \",\"\n-        // E.g., Ali Babar, M., Dings\u00f8yr, T., Lago, P., van der Vliet, H.\n-        final boolean authorsContainAND = authors.toUpperCase(Locale.ENGLISH).contains(\" AND \");\n-        final boolean authorsContainOpeningBrace = authors.contains(\"{\");\n-        final boolean authorsContainSemicolon = authors.contains(\";\");\n-        final boolean authorsContainTwoOrMoreCommas = (authors.length() - authors.replace(\",\", \"\").length()) >= 2;\n-        if (!authorsContainAND && !authorsContainOpeningBrace && !authorsContainSemicolon && authorsContainTwoOrMoreCommas) {\n-            List<String> arrayNameList = Arrays.asList(authors.split(\",\"));\n-\n-            // Delete spaces for correct case identification\n-            arrayNameList.replaceAll(String::trim);\n-\n-            // Looking for space between pre- and lastname\n-            boolean spaceInAllParts = arrayNameList.stream().filter(name -> name.contains(\" \")).collect(Collectors\n-                    .toList()).size() == arrayNameList.size();\n-\n-            // We hit the comma name separator case\n-            // Usually the getAsLastFirstNamesWithAnd method would separate them if pre- and lastname are separated with \"and\"\n-            // If not, we check if spaces separate pre- and lastname\n-            if (spaceInAllParts) {\n-                authors = authors.replaceAll(\",\", \" and\");\n-            } else {\n-                // Looking for name affixes to avoid\n-                // arrayNameList needs to reduce by the count off avoiding terms\n-                // valuePartsCount holds the count of name parts without the avoided terms\n-\n-                int valuePartsCount = arrayNameList.size();\n-                // Holds the index of each term which needs to be avoided\n-                Collection<Integer> avoidIndex = new HashSet<>();\n-\n-                for (int i = 0; i < arrayNameList.size(); i++) {\n-                    if (AVOID_TERMS_IN_LOWER_CASE.contains(arrayNameList.get(i).toLowerCase(Locale.ROOT))) {\n-                        avoidIndex.add(i);\n-                        valuePartsCount--;\n-                    }\n-                }\n-\n-                if ((valuePartsCount % 2) == 0) {\n-                    // We hit the described special case with name affix like Jr\n-                    authors = buildWithAffix(avoidIndex, arrayNameList).toString();\n-                }\n-            }\n-        }\n-\n-        AuthorList authorList = AUTHOR_CACHE.get(authors);\n-        if (authorList == null) {\n+        if (!AUTHOR_CACHE.containsKey(authors)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4abe8557b6013a87fdef6599ceb9e806dbc62f4a"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDgxMzgzOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/jabref/model/entry/AuthorListTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMTo0NTowNlrOGfB_IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzoyNjoyMlrOGfFoGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE5MTU4NA==", "bodyText": "Usually you don't need to write tests for equals or hashCode. These methods are usually automatically generated by the IDE anyways. (You can keep the tests here, was just a general remark for next time).", "url": "https://github.com/JabRef/jabref/pull/6552#discussion_r435191584", "createdAt": "2020-06-04T11:45:06Z", "author": {"login": "tobiasdiez"}, "path": "src/test/java/org/jabref/model/entry/AuthorListTest.java", "diffHunk": "@@ -1152,4 +1273,70 @@ public void correctNamesWithOneComma() throws Exception {\n         expected = new Author(\"Jos\u00e9 Mar\u00eda\", \"J. M.\", null, \"Rodriguez Fernandez\", null);\n         assertEquals(new AuthorList(expected), AuthorList.parse(\"Rodriguez Fernandez, Jos\u00e9 Mar\u00eda\"));\n     }\n+\n+    @Test\n+    public void equalsFalseDifferentOrder() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4abe8557b6013a87fdef6599ceb9e806dbc62f4a"}, "originalPosition": 778}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI1MTIyNA==", "bodyText": "Ok! General remarks are needed and appreciated! \ud83d\ude04", "url": "https://github.com/JabRef/jabref/pull/6552#discussion_r435251224", "createdAt": "2020-06-04T13:26:22Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/test/java/org/jabref/model/entry/AuthorListTest.java", "diffHunk": "@@ -1152,4 +1273,70 @@ public void correctNamesWithOneComma() throws Exception {\n         expected = new Author(\"Jos\u00e9 Mar\u00eda\", \"J. M.\", null, \"Rodriguez Fernandez\", null);\n         assertEquals(new AuthorList(expected), AuthorList.parse(\"Rodriguez Fernandez, Jos\u00e9 Mar\u00eda\"));\n     }\n+\n+    @Test\n+    public void equalsFalseDifferentOrder() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE5MTU4NA=="}, "originalCommit": {"oid": "4abe8557b6013a87fdef6599ceb9e806dbc62f4a"}, "originalPosition": 778}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDgyNjk1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/maintable/MainTableNameFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMTo0OTo0MlrOGfCHdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjowNDoxMVrOGfZlHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE5MzcxNw==", "bodyText": "Your fix works but needs quite some changes. What about adding a test here \n  \n    \n      jabref/src/main/java/org/jabref/gui/maintable/BibEntryTableViewModel.java\n    \n    \n         Line 127\n      in\n      41678ce\n    \n    \n    \n    \n\n        \n          \n           if (field.getProperties().contains(FieldProperty.PERSON_NAMES)) { \n        \n    \n  \n\n\nthat makes sure that the complicated author parsing code is only invoked if the display style is not AS_IS? Should also do the trick, right?", "url": "https://github.com/JabRef/jabref/pull/6552#discussion_r435193717", "createdAt": "2020-06-04T11:49:42Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/maintable/MainTableNameFormatter.java", "diffHunk": "@@ -37,7 +37,7 @@ public String formatNameLatexFree(final String nameToFormat) {\n \n         switch (nameFormatPreferences.getDisplayStyle()) {\n             case AS_IS:\n-                return nameToFormat;\n+                return authors.getAsUnformattedLatexFree();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4abe8557b6013a87fdef6599ceb9e806dbc62f4a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3ODE0Mw==", "bodyText": "Checking AS_IS in\n\n\n  \n    \n      jabref/src/main/java/org/jabref/gui/maintable/BibEntryTableViewModel.java\n    \n    \n         Line 127\n      in\n      41678ce\n    \n    \n    \n    \n\n        \n          \n           if (field.getProperties().contains(FieldProperty.PERSON_NAMES)) { \n        \n    \n  \n\n\n\nwill indeed produce less code (and frankly, I didn't even think about that change). My argument for the current structure is to,\n\nlet MainTableNameFormatter handle the user's preferences,\nlet AuthorList handle all formatting/caching for authors.\n\nAnyway, I have updated with an attempt at the described changes!", "url": "https://github.com/JabRef/jabref/pull/6552#discussion_r435578143", "createdAt": "2020-06-04T22:04:11Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/main/java/org/jabref/gui/maintable/MainTableNameFormatter.java", "diffHunk": "@@ -37,7 +37,7 @@ public String formatNameLatexFree(final String nameToFormat) {\n \n         switch (nameFormatPreferences.getDisplayStyle()) {\n             case AS_IS:\n-                return nameToFormat;\n+                return authors.getAsUnformattedLatexFree();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE5MzcxNw=="}, "originalCommit": {"oid": "4abe8557b6013a87fdef6599ceb9e806dbc62f4a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTU2ODI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/maintable/MainTableNameFormatter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNDoyMzo0MlrOGfwrwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNDoyMzo0MlrOGfwrwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk1NjY3Mw==", "bodyText": "The preferences are rather slow and this method is called for every row in the main table, so this will lead to performance problems. You can cache the getMainTableNameFormatPreferences as a class variable (initalized in the constructor).", "url": "https://github.com/JabRef/jabref/pull/6552#discussion_r435956673", "createdAt": "2020-06-05T14:23:42Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/maintable/MainTableNameFormatter.java", "diffHunk": "@@ -51,4 +49,8 @@ public String formatNameLatexFree(final String nameToFormat) {\n                         false);\n         }\n     }\n+\n+    public boolean needsFormatting() {\n+        return preferencesService.getMainTableNameFormatPreferences().getDisplayStyle() != MainTableNameFormatPreferences.DisplayStyle.AS_IS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "557ffc9fdf137350ef3738d6f02991bd00deab10"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTU5NTgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/maintable/BibEntryTableViewModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNDozMDozMVrOGfw8xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNDozMDozMVrOGfw8xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk2MTAzMA==", "bodyText": "You raised a good point that the formatting should be handled by the nameFormatter.\nSuggestion: move the compete code of this if block to the name formatter. Then you can add the if check there, and keep the responsibility of the author formatting in that class.\nFor this the entry, field and database need to be passed to the formatNameLatexFree method (maybe pass the database already as a constructor element).", "url": "https://github.com/JabRef/jabref/pull/6552#discussion_r435961030", "createdAt": "2020-06-05T14:30:31Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/maintable/BibEntryTableViewModel.java", "diffHunk": "@@ -124,7 +124,8 @@ public BibEntry getEntry() {\n \n         value = Bindings.createStringBinding(() -> {\n             for (Field field : fields) {\n-                if (field.getProperties().contains(FieldProperty.PERSON_NAMES)) {\n+                if (field.getProperties().contains(FieldProperty.PERSON_NAMES)\n+                        && nameFormatter.getValue().needsFormatting()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "557ffc9fdf137350ef3738d6f02991bd00deab10"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNjk4NTE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/model/entry/AuthorList.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMTozNzozNFrOGhdWqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMDoxMzo0MlrOGkUsOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzczNzEyOA==", "bodyText": "I don't think this is avoidable with the current structure if we want to cache unformatted latex-free strings.", "url": "https://github.com/JabRef/jabref/pull/6552#discussion_r437737128", "createdAt": "2020-06-09T21:37:34Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/main/java/org/jabref/model/entry/AuthorList.java", "diffHunk": "@@ -169,6 +171,7 @@ public static AuthorList parse(final String authors) {\n         if (authorList == null) {\n             AuthorListParser parser = new AuthorListParser();\n             authorList = parser.parse(authors);\n+            authorList.authorsUnformatted = new String(authors);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81c0018e06aa5944b2f976368e5d74ad6805916e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc0MDkyMQ==", "bodyText": "(see above)", "url": "https://github.com/JabRef/jabref/pull/6552#discussion_r440740921", "createdAt": "2020-06-16T10:13:42Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/model/entry/AuthorList.java", "diffHunk": "@@ -169,6 +171,7 @@ public static AuthorList parse(final String authors) {\n         if (authorList == null) {\n             AuthorListParser parser = new AuthorListParser();\n             authorList = parser.parse(authors);\n+            authorList.authorsUnformatted = new String(authors);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzczNzEyOA=="}, "originalCommit": {"oid": "81c0018e06aa5944b2f976368e5d74ad6805916e"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTkwMjc3OnYy", "diffSide": "LEFT", "path": "src/main/java/org/jabref/gui/maintable/MainTableDataModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMDowMjozOVrOGkUT3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMDowMjozOVrOGkUT3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDczNDY4Ng==", "bodyText": "I think this needs be a class variable, since otherwise the bindings / listeners are deleted by the garbage collector.", "url": "https://github.com/JabRef/jabref/pull/6552#discussion_r440734686", "createdAt": "2020-06-16T10:02:39Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/maintable/MainTableDataModel.java", "diffHunk": "@@ -26,20 +26,23 @@\n import com.tobiasdiez.easybind.EasyBind;\n \n public class MainTableDataModel {\n-    private final FilteredList<BibEntryTableViewModel> entriesFiltered;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c457f34be32d0d24f6bef60c1fbf5e782d63035"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTkxOTg3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/maintable/MainTableFieldValueFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMDowNzoxNVrOGkUeaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNToyOTo0MVrOGkhCmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDczNzM4NA==", "bodyText": "I think the suffix LatexFree can be removed again (since this is implicitly included in \"format\")", "url": "https://github.com/JabRef/jabref/pull/6552#discussion_r440737384", "createdAt": "2020-06-16T10:07:15Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/maintable/MainTableFieldValueFormatter.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package org.jabref.gui.maintable;\n+\n+import java.util.Optional;\n+\n+import org.jabref.model.database.BibDatabase;\n+import org.jabref.model.database.BibDatabaseContext;\n+import org.jabref.model.entry.AuthorList;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.Field;\n+import org.jabref.model.entry.field.FieldProperty;\n+import org.jabref.model.entry.field.OrFields;\n+import org.jabref.preferences.PreferencesService;\n+\n+import static org.jabref.gui.maintable.MainTableNameFormatPreferences.AbbreviationStyle;\n+import static org.jabref.gui.maintable.MainTableNameFormatPreferences.DisplayStyle;\n+\n+public class MainTableFieldValueFormatter {\n+    private final DisplayStyle displayStyle;\n+    private final AbbreviationStyle abbreviationStyle;\n+    private final BibDatabase bibDatabase;\n+\n+    MainTableFieldValueFormatter(PreferencesService preferences, BibDatabaseContext bibDatabaseContext) {\n+        MainTableNameFormatPreferences nameFormatPreferences = preferences.getMainTableNameFormatPreferences();\n+        this.displayStyle = nameFormatPreferences.getDisplayStyle();\n+        this.abbreviationStyle = nameFormatPreferences.getAbbreviationStyle();\n+        this.bibDatabase = bibDatabaseContext.getDatabase();\n+    }\n+\n+    /**\n+     * Format fields for {@link BibEntryTableViewModel}, according to user preferences and with latex translated to\n+     * unicode if possible.\n+     *\n+     * @param fields the fields argument of {@link BibEntryTableViewModel#getFields(OrFields)}.\n+     * @param entry the BibEntry of {@link BibEntryTableViewModel}.\n+     * @return The formatted name field.\n+     */\n+    public String formatFieldsValuesLatexFree(final OrFields fields, final BibEntry entry) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c457f34be32d0d24f6bef60c1fbf5e782d63035"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0MzI1Ng==", "bodyText": "Sure! The prefix is removed from the methods of MainTableFieldValueFormatter", "url": "https://github.com/JabRef/jabref/pull/6552#discussion_r440943256", "createdAt": "2020-06-16T15:29:41Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/main/java/org/jabref/gui/maintable/MainTableFieldValueFormatter.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package org.jabref.gui.maintable;\n+\n+import java.util.Optional;\n+\n+import org.jabref.model.database.BibDatabase;\n+import org.jabref.model.database.BibDatabaseContext;\n+import org.jabref.model.entry.AuthorList;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.Field;\n+import org.jabref.model.entry.field.FieldProperty;\n+import org.jabref.model.entry.field.OrFields;\n+import org.jabref.preferences.PreferencesService;\n+\n+import static org.jabref.gui.maintable.MainTableNameFormatPreferences.AbbreviationStyle;\n+import static org.jabref.gui.maintable.MainTableNameFormatPreferences.DisplayStyle;\n+\n+public class MainTableFieldValueFormatter {\n+    private final DisplayStyle displayStyle;\n+    private final AbbreviationStyle abbreviationStyle;\n+    private final BibDatabase bibDatabase;\n+\n+    MainTableFieldValueFormatter(PreferencesService preferences, BibDatabaseContext bibDatabaseContext) {\n+        MainTableNameFormatPreferences nameFormatPreferences = preferences.getMainTableNameFormatPreferences();\n+        this.displayStyle = nameFormatPreferences.getDisplayStyle();\n+        this.abbreviationStyle = nameFormatPreferences.getAbbreviationStyle();\n+        this.bibDatabase = bibDatabaseContext.getDatabase();\n+    }\n+\n+    /**\n+     * Format fields for {@link BibEntryTableViewModel}, according to user preferences and with latex translated to\n+     * unicode if possible.\n+     *\n+     * @param fields the fields argument of {@link BibEntryTableViewModel#getFields(OrFields)}.\n+     * @param entry the BibEntry of {@link BibEntryTableViewModel}.\n+     * @return The formatted name field.\n+     */\n+    public String formatFieldsValuesLatexFree(final OrFields fields, final BibEntry entry) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDczNzM4NA=="}, "originalCommit": {"oid": "4c457f34be32d0d24f6bef60c1fbf5e782d63035"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTkzODQxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/maintable/MainTableFieldValueFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMDoxMjo0NlrOGkUqJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTozMDo0MFrOGkhFjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc0MDM4OQ==", "bodyText": "I would handle the AS_IS case already here\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (field.getProperties().contains(FieldProperty.PERSON_NAMES)) {\n          \n          \n            \n                        if (field.getProperties().contains(FieldProperty.PERSON_NAMES) && displayStyle != DisplayStyle.AS_IS) {\n          \n      \n    \n    \n  \n\nThis has a slightly better performance and you don't need to store the original string in the AuthorList.", "url": "https://github.com/JabRef/jabref/pull/6552#discussion_r440740389", "createdAt": "2020-06-16T10:12:46Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/maintable/MainTableFieldValueFormatter.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package org.jabref.gui.maintable;\n+\n+import java.util.Optional;\n+\n+import org.jabref.model.database.BibDatabase;\n+import org.jabref.model.database.BibDatabaseContext;\n+import org.jabref.model.entry.AuthorList;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.Field;\n+import org.jabref.model.entry.field.FieldProperty;\n+import org.jabref.model.entry.field.OrFields;\n+import org.jabref.preferences.PreferencesService;\n+\n+import static org.jabref.gui.maintable.MainTableNameFormatPreferences.AbbreviationStyle;\n+import static org.jabref.gui.maintable.MainTableNameFormatPreferences.DisplayStyle;\n+\n+public class MainTableFieldValueFormatter {\n+    private final DisplayStyle displayStyle;\n+    private final AbbreviationStyle abbreviationStyle;\n+    private final BibDatabase bibDatabase;\n+\n+    MainTableFieldValueFormatter(PreferencesService preferences, BibDatabaseContext bibDatabaseContext) {\n+        MainTableNameFormatPreferences nameFormatPreferences = preferences.getMainTableNameFormatPreferences();\n+        this.displayStyle = nameFormatPreferences.getDisplayStyle();\n+        this.abbreviationStyle = nameFormatPreferences.getAbbreviationStyle();\n+        this.bibDatabase = bibDatabaseContext.getDatabase();\n+    }\n+\n+    /**\n+     * Format fields for {@link BibEntryTableViewModel}, according to user preferences and with latex translated to\n+     * unicode if possible.\n+     *\n+     * @param fields the fields argument of {@link BibEntryTableViewModel#getFields(OrFields)}.\n+     * @param entry the BibEntry of {@link BibEntryTableViewModel}.\n+     * @return The formatted name field.\n+     */\n+    public String formatFieldsValuesLatexFree(final OrFields fields, final BibEntry entry) {\n+        for (Field field : fields) {\n+            if (field.getProperties().contains(FieldProperty.PERSON_NAMES)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c457f34be32d0d24f6bef60c1fbf5e782d63035"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0NDAxNA==", "bodyText": "Yupp, you are right. I tunnel visioned a bit too much while making the changes =/", "url": "https://github.com/JabRef/jabref/pull/6552#discussion_r440944014", "createdAt": "2020-06-16T15:30:40Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/main/java/org/jabref/gui/maintable/MainTableFieldValueFormatter.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package org.jabref.gui.maintable;\n+\n+import java.util.Optional;\n+\n+import org.jabref.model.database.BibDatabase;\n+import org.jabref.model.database.BibDatabaseContext;\n+import org.jabref.model.entry.AuthorList;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.Field;\n+import org.jabref.model.entry.field.FieldProperty;\n+import org.jabref.model.entry.field.OrFields;\n+import org.jabref.preferences.PreferencesService;\n+\n+import static org.jabref.gui.maintable.MainTableNameFormatPreferences.AbbreviationStyle;\n+import static org.jabref.gui.maintable.MainTableNameFormatPreferences.DisplayStyle;\n+\n+public class MainTableFieldValueFormatter {\n+    private final DisplayStyle displayStyle;\n+    private final AbbreviationStyle abbreviationStyle;\n+    private final BibDatabase bibDatabase;\n+\n+    MainTableFieldValueFormatter(PreferencesService preferences, BibDatabaseContext bibDatabaseContext) {\n+        MainTableNameFormatPreferences nameFormatPreferences = preferences.getMainTableNameFormatPreferences();\n+        this.displayStyle = nameFormatPreferences.getDisplayStyle();\n+        this.abbreviationStyle = nameFormatPreferences.getAbbreviationStyle();\n+        this.bibDatabase = bibDatabaseContext.getDatabase();\n+    }\n+\n+    /**\n+     * Format fields for {@link BibEntryTableViewModel}, according to user preferences and with latex translated to\n+     * unicode if possible.\n+     *\n+     * @param fields the fields argument of {@link BibEntryTableViewModel#getFields(OrFields)}.\n+     * @param entry the BibEntry of {@link BibEntryTableViewModel}.\n+     * @return The formatted name field.\n+     */\n+    public String formatFieldsValuesLatexFree(final OrFields fields, final BibEntry entry) {\n+        for (Field field : fields) {\n+            if (field.getProperties().contains(FieldProperty.PERSON_NAMES)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc0MDM4OQ=="}, "originalCommit": {"oid": "4c457f34be32d0d24f6bef60c1fbf5e782d63035"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzMwMzQyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/model/entry/AuthorList.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo1Mzo1MFrOGkiIYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxOToxMDozNlrOGkpgAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk2MTEyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return `true` iff the other object is an AuthorList, all Authors are in the same order, and all Authors field\n          \n          \n            \n                 * @return `true` iff the other object is an AuthorList, all contained authors are in the same order (and these authors are `String.equal`)", "url": "https://github.com/JabRef/jabref/pull/6552#discussion_r440961120", "createdAt": "2020-06-16T15:53:50Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/model/entry/AuthorList.java", "diffHunk": "@@ -647,10 +566,14 @@ public String getAsFirstLastNamesLatexFree(boolean abbreviate, boolean oxfordCom\n     /**\n      * Compare this object with the given one.\n      * <p>\n-     * Will return true iff the other object is an Author and all fields are identical on a string comparison.\n+     * @return `true` iff the other object is an AuthorList, all Authors are in the same order, and all Authors field", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c55b1b6a739e4bec6828bfb2e6c11a688f7f6cd0"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA3NDI5Mg==", "bodyText": "I'd suggest changing the parenthesis to \"(and these authors' fields are Objects.equals)\"?\nI'll update the JavaDoc in Author.java as well.", "url": "https://github.com/JabRef/jabref/pull/6552#discussion_r441074292", "createdAt": "2020-06-16T18:56:51Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/main/java/org/jabref/model/entry/AuthorList.java", "diffHunk": "@@ -647,10 +566,14 @@ public String getAsFirstLastNamesLatexFree(boolean abbreviate, boolean oxfordCom\n     /**\n      * Compare this object with the given one.\n      * <p>\n-     * Will return true iff the other object is an Author and all fields are identical on a string comparison.\n+     * @return `true` iff the other object is an AuthorList, all Authors are in the same order, and all Authors field", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk2MTEyMA=="}, "originalCommit": {"oid": "c55b1b6a739e4bec6828bfb2e6c11a688f7f6cd0"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA4MTg1OA==", "bodyText": "Good idea!\nI already commited the change to checkstyle.xml.\nAfter that udpate, this PR is good to go.", "url": "https://github.com/JabRef/jabref/pull/6552#discussion_r441081858", "createdAt": "2020-06-16T19:10:36Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/model/entry/AuthorList.java", "diffHunk": "@@ -647,10 +566,14 @@ public String getAsFirstLastNamesLatexFree(boolean abbreviate, boolean oxfordCom\n     /**\n      * Compare this object with the given one.\n      * <p>\n-     * Will return true iff the other object is an Author and all fields are identical on a string comparison.\n+     * @return `true` iff the other object is an AuthorList, all Authors are in the same order, and all Authors field", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk2MTEyMA=="}, "originalCommit": {"oid": "c55b1b6a739e4bec6828bfb2e6c11a688f7f6cd0"}, "originalPosition": 129}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1866, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}