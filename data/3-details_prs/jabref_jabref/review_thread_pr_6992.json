{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwMDExNTgy", "number": 6992, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODoxNDozMFrOEru95w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMDozNjo1M1rOEsxWNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjkzNzM1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/importer/fetcher/JstorFetcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODoxNDozMFrOHeqv1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODoxNDozMFrOHeqv1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkxOTcwMA==", "bodyText": "Just use our UrlDownload class:\nURLDownload download = new URLDownload(url);\nString data = download.asString()", "url": "https://github.com/JabRef/jabref/pull/6992#discussion_r501919700", "createdAt": "2020-10-08T18:14:30Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/logic/importer/fetcher/JstorFetcher.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import com.google.common.base.Charsets;\n+import com.microsoft.applicationinsights.core.dependencies.apachecommons.io.IOUtils;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.jabref.logic.importer.ImportFormatPreferences;\n+import org.jabref.logic.importer.ParseException;\n+import org.jabref.logic.importer.Parser;\n+import org.jabref.logic.importer.SearchBasedParserFetcher;\n+import org.jabref.logic.importer.fileformat.BibtexParser;\n+import org.jabref.logic.util.OS;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.util.DummyFileUpdateMonitor;\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Element;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Fetcher for jstor.org\n+ **/\n+public class JstorFetcher implements SearchBasedParserFetcher {\n+\n+    private static final String SEARCH_HOST = \"https://www.jstor.org/open/search/\";\n+    private static final String CITE_HOST = \"https://www.jstor.org/citation/text\";\n+\n+    private final ImportFormatPreferences importFormatPreferences;\n+\n+    public JstorFetcher(ImportFormatPreferences importFormatPreferences) {\n+        this.importFormatPreferences = importFormatPreferences;\n+    }\n+\n+    @Override\n+    public URL getURLForQuery(String query) throws URISyntaxException, MalformedURLException {\n+        URIBuilder uriBuilder = new URIBuilder(SEARCH_HOST);\n+        uriBuilder.addParameter(\"Query\", query);\n+        return uriBuilder.build().toURL();\n+    }\n+\n+    @Override\n+    public Parser getParser() {\n+        return inputStream -> {\n+            String response = new BufferedReader(new InputStreamReader(inputStream)).lines().collect(Collectors.joining(OS.NEWLINE));\n+            List<BibEntry> entries = new ArrayList<>();\n+\n+            Document doc = Jsoup.parse(response);\n+\n+            List<Element> elements = doc.body().getElementsByClass(\"cite-this-item\");\n+            for (Element element : elements) {\n+                BibtexParser parser = new BibtexParser(importFormatPreferences, new DummyFileUpdateMonitor());\n+                String id = element.attr(\"href\").replace(\"citation/info/\", \"\");\n+                try {\n+                    String data = IOUtils.toString(new URL(CITE_HOST + id), Charsets.UTF_8);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec050b9c41eed471d6740ef10d17f93425fe4742"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0Mjk1NjI5OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/jabref/logic/importer/fetcher/JstorFetcherTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODoxOTowOFrOHeq7HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODoxOTowOFrOHeq7HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkyMjU4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertTrue(entries.contains(expected));\n          \n          \n            \n                    assertEquals(Collections.singletonList(expected), entries);\n          \n      \n    \n    \n  \n\nUsing assertEquals has the advantage that you can see the difference when the test fails, e.g. sometimes the bibdata changes on the publisher site.", "url": "https://github.com/JabRef/jabref/pull/6992#discussion_r501922588", "createdAt": "2020-10-08T18:19:08Z", "author": {"login": "Siedlerchr"}, "path": "src/test/java/org/jabref/logic/importer/fetcher/JstorFetcherTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import org.jabref.logic.importer.ImportFormatPreferences;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+import org.jabref.model.entry.types.StandardEntryType;\n+import org.jabref.testutils.category.FetcherTest;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Answers;\n+\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.mock;\n+\n+@FetcherTest\n+public class JstorFetcherTest {\n+\n+    private final JstorFetcher fetcher = new JstorFetcher(mock(ImportFormatPreferences.class, Answers.RETURNS_DEEP_STUBS));\n+\n+    @Test\n+    void searchByTitle() throws Exception {\n+        BibEntry expected = new BibEntry(StandardEntryType.Article)\n+                .withCitationKey(\"10.2307/90002164\")\n+                .withField(StandardField.AUTHOR, \"Yang Yanxia\")\n+                .withField(StandardField.TITLE, \"Test Anxiety Analysis of Chinese College Students in Computer-based Spoken English Test\")\n+                .withField(StandardField.ISSN, \"11763647, 14364522\")\n+                .withField(StandardField.JOURNAL, \"Journal of Educational Technology & Society\")\n+                .withField(StandardField.ABSTRACT, \"ABSTRACT Test anxiety was a commonly known or assumed factor that could greatly influence performance of test takers. With the employment of designed questionnaires and computer-based spoken English test, this paper explored test anxiety manifestation of Chinese college students from both macro and micro aspects, and found out that the major anxiety in computer-based spoken English test was spoken English test anxiety, which consisted of test anxiety and communication apprehension. Regard to proximal test anxiety, the causes listed in proper order as low spoken English abilities, lack of speaking techniques, anxiety from the evaluative process and inadaptability with computer-based spoken English test format. As to distal anxiety causes, attitude toward learning spoken English and self-evaluation of speaking abilities were significantly negatively correlated with test anxiety. Besides, as test anxiety significantly associated often with test performance, a look at pedagogical implications has been discussed in this paper.\")\n+                .withField(StandardField.PUBLISHER, \"International Forum of Educational Technology & Society\")\n+                .withField(StandardField.NUMBER, \"2\")\n+                .withField(StandardField.PAGES, \"63--73\")\n+                .withField(StandardField.VOLUME, \"20\")\n+                .withField(StandardField.URL, \"http://www.jstor.org/stable/90002164\")\n+                .withField(StandardField.YEAR, \"2017\");\n+\n+        List<BibEntry> entries = fetcher.performSearch(\"Test Anxiety Analysis of Chinese College Students in Computer-based Spoken English Test\");\n+        assertTrue(entries.contains(expected));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec050b9c41eed471d6740ef10d17f93425fe4742"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0Mjk2MjgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/importer/WebFetchers.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODoyMDo0M1rOHeq-4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODoyMDo0M1rOHeq-4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkyMzU1NA==", "bodyText": "Something is odd with your import order. Did you import the JabRef code style for Intellij?\nhttps://devdocs.jabref.org/getting-into-the-code/guidelines-for-setting-up-a-local-workspace#using-jabrefs-code-style", "url": "https://github.com/JabRef/jabref/pull/6992#discussion_r501923554", "createdAt": "2020-10-08T18:20:43Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/logic/importer/WebFetchers.java", "diffHunk": "@@ -42,6 +36,13 @@\n import org.jabref.model.entry.identifier.DOI;\n import org.jabref.model.entry.identifier.Identifier;\n \n+import java.util.Comparator;\n+import java.util.HashSet;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec050b9c41eed471d6740ef10d17f93425fe4742"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzA0MzA4OnYy", "diffSide": "RIGHT", "path": "AUTHORS", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNjoxOToyN1rOHgFNhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNjoxOToyN1rOHgFNhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwMTg2MA==", "bodyText": "I don't know why our AUTHORS checker complains here. Maybe because of some whitespace. I can take care after the merge", "url": "https://github.com/JabRef/jabref/pull/6992#discussion_r503401860", "createdAt": "2020-10-12T16:19:27Z", "author": {"login": "koppor"}, "path": "AUTHORS", "diffHunk": "@@ -179,6 +179,7 @@ Jens D\u00f6cke\n joeyzgraggen\n Johannes Hupe\n Johannes Manner\n+Johannes Theiner", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa76b7dfd416c8f4707e1272e504f7cc89b3ddf"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Mzc5MjQyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/importer/fetcher/JstorFetcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMDoyODozM1rOHgMO3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMDoyODozM1rOHgMO3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUxNjg5NQ==", "bodyText": "I think, the modern way is:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String response = new BufferedReader(new InputStreamReader(inputStream)).lines().collect(Collectors.joining(OS.NEWLINE));\n          \n          \n            \n                        String response = new String(inputStream.readAllBytes(), StandardCharsets.UTF_8);\n          \n      \n    \n    \n  \n\n(Source: https://stackoverflow.com/a/32352386/873282)", "url": "https://github.com/JabRef/jabref/pull/6992#discussion_r503516895", "createdAt": "2020-10-12T20:28:33Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/importer/fetcher/JstorFetcher.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.jabref.logic.importer.FetcherException;\n+import org.jabref.logic.importer.FulltextFetcher;\n+import org.jabref.logic.importer.ImportFormatPreferences;\n+import org.jabref.logic.importer.ParseException;\n+import org.jabref.logic.importer.Parser;\n+import org.jabref.logic.importer.SearchBasedParserFetcher;\n+import org.jabref.logic.importer.fileformat.BibtexParser;\n+import org.jabref.logic.net.URLDownload;\n+import org.jabref.logic.util.OS;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+import org.jabref.model.util.DummyFileUpdateMonitor;\n+\n+import org.apache.http.client.utils.URIBuilder;\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Element;\n+\n+/**\n+ * Fetcher for jstor.org\n+ **/\n+public class JstorFetcher implements SearchBasedParserFetcher, FulltextFetcher {\n+\n+    private static final String HOST = \"https://www.jstor.org\";\n+    private static final String SEARCH_HOST = HOST + \"/open/search\";\n+    private static final String CITE_HOST = HOST + \"/citation/text\";\n+\n+    private final ImportFormatPreferences importFormatPreferences;\n+\n+    public JstorFetcher(ImportFormatPreferences importFormatPreferences) {\n+        this.importFormatPreferences = importFormatPreferences;\n+    }\n+\n+    @Override\n+    public URL getURLForQuery(String query) throws URISyntaxException, MalformedURLException {\n+        URIBuilder uriBuilder = new URIBuilder(SEARCH_HOST);\n+        uriBuilder.addParameter(\"Query\", query);\n+        return uriBuilder.build().toURL();\n+    }\n+\n+    @Override\n+    public Parser getParser() {\n+        return inputStream -> {\n+            String response = new BufferedReader(new InputStreamReader(inputStream)).lines().collect(Collectors.joining(OS.NEWLINE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa76b7dfd416c8f4707e1272e504f7cc89b3ddf"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzgwMjUwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/importer/fetcher/JstorFetcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMDozMjo0MVrOHgMVJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMDozMjo0MVrOHgMVJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUxODUwMw==", "bodyText": "Why can't you use the method directly reading from the input stream? https://jsoup.org/apidocs/org/jsoup/Jsoup.html#parse(java.io.InputStream,java.lang.String,java.lang.String)", "url": "https://github.com/JabRef/jabref/pull/6992#discussion_r503518503", "createdAt": "2020-10-12T20:32:41Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/importer/fetcher/JstorFetcher.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.jabref.logic.importer.FetcherException;\n+import org.jabref.logic.importer.FulltextFetcher;\n+import org.jabref.logic.importer.ImportFormatPreferences;\n+import org.jabref.logic.importer.ParseException;\n+import org.jabref.logic.importer.Parser;\n+import org.jabref.logic.importer.SearchBasedParserFetcher;\n+import org.jabref.logic.importer.fileformat.BibtexParser;\n+import org.jabref.logic.net.URLDownload;\n+import org.jabref.logic.util.OS;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+import org.jabref.model.util.DummyFileUpdateMonitor;\n+\n+import org.apache.http.client.utils.URIBuilder;\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Element;\n+\n+/**\n+ * Fetcher for jstor.org\n+ **/\n+public class JstorFetcher implements SearchBasedParserFetcher, FulltextFetcher {\n+\n+    private static final String HOST = \"https://www.jstor.org\";\n+    private static final String SEARCH_HOST = HOST + \"/open/search\";\n+    private static final String CITE_HOST = HOST + \"/citation/text\";\n+\n+    private final ImportFormatPreferences importFormatPreferences;\n+\n+    public JstorFetcher(ImportFormatPreferences importFormatPreferences) {\n+        this.importFormatPreferences = importFormatPreferences;\n+    }\n+\n+    @Override\n+    public URL getURLForQuery(String query) throws URISyntaxException, MalformedURLException {\n+        URIBuilder uriBuilder = new URIBuilder(SEARCH_HOST);\n+        uriBuilder.addParameter(\"Query\", query);\n+        return uriBuilder.build().toURL();\n+    }\n+\n+    @Override\n+    public Parser getParser() {\n+        return inputStream -> {\n+            String response = new BufferedReader(new InputStreamReader(inputStream)).lines().collect(Collectors.joining(OS.NEWLINE));\n+            List<BibEntry> entries = new ArrayList<>();\n+\n+            Document doc = Jsoup.parse(response);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa76b7dfd416c8f4707e1272e504f7cc89b3ddf"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzgwMjk4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/importer/fetcher/JstorFetcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMDozMjo1NlrOHgMVdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMDozMjo1NlrOHgMVdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUxODU4Mg==", "bodyText": "There is no need to instantiate the parser for each parse run. Please instantiate before the loop", "url": "https://github.com/JabRef/jabref/pull/6992#discussion_r503518582", "createdAt": "2020-10-12T20:32:56Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/importer/fetcher/JstorFetcher.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.jabref.logic.importer.FetcherException;\n+import org.jabref.logic.importer.FulltextFetcher;\n+import org.jabref.logic.importer.ImportFormatPreferences;\n+import org.jabref.logic.importer.ParseException;\n+import org.jabref.logic.importer.Parser;\n+import org.jabref.logic.importer.SearchBasedParserFetcher;\n+import org.jabref.logic.importer.fileformat.BibtexParser;\n+import org.jabref.logic.net.URLDownload;\n+import org.jabref.logic.util.OS;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+import org.jabref.model.util.DummyFileUpdateMonitor;\n+\n+import org.apache.http.client.utils.URIBuilder;\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Element;\n+\n+/**\n+ * Fetcher for jstor.org\n+ **/\n+public class JstorFetcher implements SearchBasedParserFetcher, FulltextFetcher {\n+\n+    private static final String HOST = \"https://www.jstor.org\";\n+    private static final String SEARCH_HOST = HOST + \"/open/search\";\n+    private static final String CITE_HOST = HOST + \"/citation/text\";\n+\n+    private final ImportFormatPreferences importFormatPreferences;\n+\n+    public JstorFetcher(ImportFormatPreferences importFormatPreferences) {\n+        this.importFormatPreferences = importFormatPreferences;\n+    }\n+\n+    @Override\n+    public URL getURLForQuery(String query) throws URISyntaxException, MalformedURLException {\n+        URIBuilder uriBuilder = new URIBuilder(SEARCH_HOST);\n+        uriBuilder.addParameter(\"Query\", query);\n+        return uriBuilder.build().toURL();\n+    }\n+\n+    @Override\n+    public Parser getParser() {\n+        return inputStream -> {\n+            String response = new BufferedReader(new InputStreamReader(inputStream)).lines().collect(Collectors.joining(OS.NEWLINE));\n+            List<BibEntry> entries = new ArrayList<>();\n+\n+            Document doc = Jsoup.parse(response);\n+\n+            List<Element> elements = doc.body().getElementsByClass(\"cite-this-item\");\n+            for (Element element : elements) {\n+                BibtexParser parser = new BibtexParser(importFormatPreferences, new DummyFileUpdateMonitor());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa76b7dfd416c8f4707e1272e504f7cc89b3ddf"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzgwNjk5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/importer/fetcher/JstorFetcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMDozNDozOFrOHgMX-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMDozNDozOFrOHgMX-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUxOTIyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                throw new ParseException(\"could not download data from jstor.org\", e);\n          \n          \n            \n                                throw new ParseException(\"Could not download data from jstor.org\", e);", "url": "https://github.com/JabRef/jabref/pull/6992#discussion_r503519224", "createdAt": "2020-10-12T20:34:38Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/importer/fetcher/JstorFetcher.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.jabref.logic.importer.FetcherException;\n+import org.jabref.logic.importer.FulltextFetcher;\n+import org.jabref.logic.importer.ImportFormatPreferences;\n+import org.jabref.logic.importer.ParseException;\n+import org.jabref.logic.importer.Parser;\n+import org.jabref.logic.importer.SearchBasedParserFetcher;\n+import org.jabref.logic.importer.fileformat.BibtexParser;\n+import org.jabref.logic.net.URLDownload;\n+import org.jabref.logic.util.OS;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+import org.jabref.model.util.DummyFileUpdateMonitor;\n+\n+import org.apache.http.client.utils.URIBuilder;\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Element;\n+\n+/**\n+ * Fetcher for jstor.org\n+ **/\n+public class JstorFetcher implements SearchBasedParserFetcher, FulltextFetcher {\n+\n+    private static final String HOST = \"https://www.jstor.org\";\n+    private static final String SEARCH_HOST = HOST + \"/open/search\";\n+    private static final String CITE_HOST = HOST + \"/citation/text\";\n+\n+    private final ImportFormatPreferences importFormatPreferences;\n+\n+    public JstorFetcher(ImportFormatPreferences importFormatPreferences) {\n+        this.importFormatPreferences = importFormatPreferences;\n+    }\n+\n+    @Override\n+    public URL getURLForQuery(String query) throws URISyntaxException, MalformedURLException {\n+        URIBuilder uriBuilder = new URIBuilder(SEARCH_HOST);\n+        uriBuilder.addParameter(\"Query\", query);\n+        return uriBuilder.build().toURL();\n+    }\n+\n+    @Override\n+    public Parser getParser() {\n+        return inputStream -> {\n+            String response = new BufferedReader(new InputStreamReader(inputStream)).lines().collect(Collectors.joining(OS.NEWLINE));\n+            List<BibEntry> entries = new ArrayList<>();\n+\n+            Document doc = Jsoup.parse(response);\n+\n+            List<Element> elements = doc.body().getElementsByClass(\"cite-this-item\");\n+            for (Element element : elements) {\n+                BibtexParser parser = new BibtexParser(importFormatPreferences, new DummyFileUpdateMonitor());\n+                String id = element.attr(\"href\").replace(\"citation/info/\", \"\");\n+                try {\n+                    String data = new URLDownload(CITE_HOST + id).asString();\n+                    entries.addAll(parser.parseEntries(data));\n+                } catch (IOException e) {\n+                    throw new ParseException(\"could not download data from jstor.org\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa76b7dfd416c8f4707e1272e504f7cc89b3ddf"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzgxMzAyOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/jabref/logic/importer/fetcher/JstorFetcherTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMDozNjo1M1rOHgMbaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMDozNjo1M1rOHgMbaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUyMDEwNA==", "bodyText": "One can merge these two lines\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertTrue(url.isPresent());\n          \n          \n            \n                    assertEquals(new URL(\"https://www.jstor.org/stable/pdf/90002164.pdf\"), url.get());\n          \n          \n            \n                    assertEquals(Optional.of(new URL(\"https://www.jstor.org/stable/pdf/90002164.pdf\")), url);", "url": "https://github.com/JabRef/jabref/pull/6992#discussion_r503520104", "createdAt": "2020-10-12T20:36:53Z", "author": {"login": "koppor"}, "path": "src/test/java/org/jabref/logic/importer/fetcher/JstorFetcherTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.jabref.logic.importer.FetcherException;\n+import org.jabref.logic.importer.ImportFormatPreferences;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+import org.jabref.model.entry.types.StandardEntryType;\n+import org.jabref.testutils.category.FetcherTest;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Answers;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.mock;\n+\n+@FetcherTest\n+public class JstorFetcherTest {\n+\n+    private final JstorFetcher fetcher = new JstorFetcher(mock(ImportFormatPreferences.class, Answers.RETURNS_DEEP_STUBS));\n+\n+    private final BibEntry bibEntry = new BibEntry(StandardEntryType.Article)\n+            .withCitationKey(\"10.2307/90002164\")\n+            .withField(StandardField.AUTHOR, \"Yang Yanxia\")\n+            .withField(StandardField.TITLE, \"Test Anxiety Analysis of Chinese College Students in Computer-based Spoken English Test\")\n+            .withField(StandardField.ISSN, \"11763647, 14364522\")\n+            .withField(StandardField.JOURNAL, \"Journal of Educational Technology & Society\")\n+            .withField(StandardField.ABSTRACT, \"ABSTRACT Test anxiety was a commonly known or assumed factor that could greatly influence performance of test takers. With the employment of designed questionnaires and computer-based spoken English test, this paper explored test anxiety manifestation of Chinese college students from both macro and micro aspects, and found out that the major anxiety in computer-based spoken English test was spoken English test anxiety, which consisted of test anxiety and communication apprehension. Regard to proximal test anxiety, the causes listed in proper order as low spoken English abilities, lack of speaking techniques, anxiety from the evaluative process and inadaptability with computer-based spoken English test format. As to distal anxiety causes, attitude toward learning spoken English and self-evaluation of speaking abilities were significantly negatively correlated with test anxiety. Besides, as test anxiety significantly associated often with test performance, a look at pedagogical implications has been discussed in this paper.\")\n+            .withField(StandardField.PUBLISHER, \"International Forum of Educational Technology & Society\")\n+            .withField(StandardField.NUMBER, \"2\")\n+            .withField(StandardField.PAGES, \"63--73\")\n+            .withField(StandardField.VOLUME, \"20\")\n+            .withField(StandardField.URL, \"http://www.jstor.org/stable/90002164\")\n+            .withField(StandardField.YEAR, \"2017\");\n+\n+    @Test\n+    void searchByTitle() throws Exception {\n+        List<BibEntry> entries = fetcher.performSearch(\"ti: \\\"Test Anxiety Analysis of Chinese College Students in Computer-based Spoken English Test\\\"\");\n+        assertEquals(Collections.singletonList(bibEntry), entries);\n+    }\n+\n+    @Test\n+    void fetchPDF() throws IOException, FetcherException {\n+        Optional<URL> url = fetcher.findFullText(bibEntry);\n+        assertTrue(url.isPresent());\n+        assertEquals(new URL(\"https://www.jstor.org/stable/pdf/90002164.pdf\"), url.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa76b7dfd416c8f4707e1272e504f7cc89b3ddf"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1612, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}