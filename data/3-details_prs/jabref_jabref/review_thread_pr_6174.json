{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNDIyOTMw", "number": 6174, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMjozNzowMlrODrMWCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxNDoyNTowMFrODsUgKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NjE3NjA5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/util/io/FileNameHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMjozNzowMlrOF7ZBag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMjozNzowMlrOF7ZBag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyMDI2Ng==", "bodyText": "Please put that into an else path in the if of line 91. (Declaring the variables here is OK). I find it hard if the contents of the variables are overwritten: The default case is that there is an extension.", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r397820266", "createdAt": "2020-03-25T12:37:02Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/util/io/FileNameHandler.java", "diffHunk": "@@ -67,7 +71,41 @@ public static String cleanDirectoryName(String badFileName) {\n         return cleanName.toString().trim();\n     }\n \n+    /**\n+     * Returns an absolute path to a file which does not match with any existing file names\n+     *\n+     * @param targetDirectory The directory in which file name should be unique\n+     * @param fileName Suggested name for the file\n+     * @return a file-name such that it does not match any existing files in targetDirectory.\n+     * */\n+    public static String getNonOverWritingFileName(Path targetDirectory, String fileName) {\n+        String absoluteName = targetDirectory.resolve(fileName)\n+                                            .toString();\n+\n+        Optional<String> extensionOptional = FileUtil.getFileExtension(fileName);\n+\n+        // the suffix include the '.' , if extension is present Eg: \".pdf\"\n+        String extensionSuffix = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4af8c53c5cbeb79249e4d15682ebdfbb017c58"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NjE3OTMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/util/io/FileNameHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMjozNzo1M1rOF7ZDfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMjozODo0OVrOF7ZFbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyMDc5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (int counter = 1; Files.exists(absolutePath); ++counter) {\n          \n          \n            \n                    for (int counter = 1; Files.exists(absolutePath); counter++) {\n          \n      \n    \n    \n  \n\n++ at the end to be inline with the usual i++.", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r397820798", "createdAt": "2020-03-25T12:37:53Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/util/io/FileNameHandler.java", "diffHunk": "@@ -67,7 +71,41 @@ public static String cleanDirectoryName(String badFileName) {\n         return cleanName.toString().trim();\n     }\n \n+    /**\n+     * Returns an absolute path to a file which does not match with any existing file names\n+     *\n+     * @param targetDirectory The directory in which file name should be unique\n+     * @param fileName Suggested name for the file\n+     * @return a file-name such that it does not match any existing files in targetDirectory.\n+     * */\n+    public static String getNonOverWritingFileName(Path targetDirectory, String fileName) {\n+        String absoluteName = targetDirectory.resolve(fileName)\n+                                            .toString();\n+\n+        Optional<String> extensionOptional = FileUtil.getFileExtension(fileName);\n+\n+        // the suffix include the '.' , if extension is present Eg: \".pdf\"\n+        String extensionSuffix = \"\";\n+        String fileNameWithoutExtension = fileName;\n+\n+        if (extensionOptional.isPresent()) {\n+            extensionSuffix = '.' + extensionOptional.get();\n+            fileNameWithoutExtension = fileName.substring(0, fileName.lastIndexOf('.'));\n+        }\n+\n+        Path absolutePath = Paths.get(absoluteName);\n+        String newFileName = fileName;\n+\n+        for (int counter = 1; Files.exists(absolutePath); ++counter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4af8c53c5cbeb79249e4d15682ebdfbb017c58"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyMTI5Mg==", "bodyText": "After thinking longer, please rewrite to a while loop. Not testing for the counter in the test of a for loop is uncommon. Thus, hard to read when maintaining the code.", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r397821292", "createdAt": "2020-03-25T12:38:49Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/util/io/FileNameHandler.java", "diffHunk": "@@ -67,7 +71,41 @@ public static String cleanDirectoryName(String badFileName) {\n         return cleanName.toString().trim();\n     }\n \n+    /**\n+     * Returns an absolute path to a file which does not match with any existing file names\n+     *\n+     * @param targetDirectory The directory in which file name should be unique\n+     * @param fileName Suggested name for the file\n+     * @return a file-name such that it does not match any existing files in targetDirectory.\n+     * */\n+    public static String getNonOverWritingFileName(Path targetDirectory, String fileName) {\n+        String absoluteName = targetDirectory.resolve(fileName)\n+                                            .toString();\n+\n+        Optional<String> extensionOptional = FileUtil.getFileExtension(fileName);\n+\n+        // the suffix include the '.' , if extension is present Eg: \".pdf\"\n+        String extensionSuffix = \"\";\n+        String fileNameWithoutExtension = fileName;\n+\n+        if (extensionOptional.isPresent()) {\n+            extensionSuffix = '.' + extensionOptional.get();\n+            fileNameWithoutExtension = fileName.substring(0, fileName.lastIndexOf('.'));\n+        }\n+\n+        Path absolutePath = Paths.get(absoluteName);\n+        String newFileName = fileName;\n+\n+        for (int counter = 1; Files.exists(absolutePath); ++counter) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyMDc5OA=="}, "originalCommit": {"oid": "7f4af8c53c5cbeb79249e4d15682ebdfbb017c58"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NjE4ODk1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/util/io/FileNameHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMjo0MDo0M1rOF7ZJRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMjo0MDo0M1rOF7ZJRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyMjI3OA==", "bodyText": "No need for that variable. Can be tesed in the while condition.", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r397822278", "createdAt": "2020-03-25T12:40:43Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/util/io/FileNameHandler.java", "diffHunk": "@@ -67,7 +71,41 @@ public static String cleanDirectoryName(String badFileName) {\n         return cleanName.toString().trim();\n     }\n \n+    /**\n+     * Returns an absolute path to a file which does not match with any existing file names\n+     *\n+     * @param targetDirectory The directory in which file name should be unique\n+     * @param fileName Suggested name for the file\n+     * @return a file-name such that it does not match any existing files in targetDirectory.\n+     * */\n+    public static String getNonOverWritingFileName(Path targetDirectory, String fileName) {\n+        String absoluteName = targetDirectory.resolve(fileName)\n+                                            .toString();\n+\n+        Optional<String> extensionOptional = FileUtil.getFileExtension(fileName);\n+\n+        // the suffix include the '.' , if extension is present Eg: \".pdf\"\n+        String extensionSuffix = \"\";\n+        String fileNameWithoutExtension = fileName;\n+\n+        if (extensionOptional.isPresent()) {\n+            extensionSuffix = '.' + extensionOptional.get();\n+            fileNameWithoutExtension = fileName.substring(0, fileName.lastIndexOf('.'));\n+        }\n+\n+        Path absolutePath = Paths.get(absoluteName);\n+        String newFileName = fileName;\n+\n+        for (int counter = 1; Files.exists(absolutePath); ++counter) {\n+            newFileName = fileNameWithoutExtension +\n+                            \" (\" + counter + \")\" +\n+                            extensionSuffix;\n+            absolutePath = targetDirectory.resolve(newFileName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4af8c53c5cbeb79249e4d15682ebdfbb017c58"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NjE5MTE3OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/jabref/logic/util/io/FileNameHandlerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMjo0MToyN1rOF7ZKxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMjo0MToyN1rOF7ZKxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyMjY2MA==", "bodyText": "Please include that in the assertEquals directly.", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r397822660", "createdAt": "2020-03-25T12:41:27Z", "author": {"login": "koppor"}, "path": "src/test/java/org/jabref/logic/util/io/FileNameHandlerTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.jabref.logic.util.io;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class FileNameHandlerTest {\n+\n+    @Test\n+    public void testCleanFileName() {\n+        assertEquals(\"legalFilename.txt\", FileNameHandler.cleanFileName(\"legalFilename.txt\"));\n+        assertEquals(\"illegalFilename______.txt\", FileNameHandler.cleanFileName(\"illegalFilename/?*<>|.txt\"));\n+    }\n+\n+    @Test\n+    public void testCleanDirectoryName() {\n+        assertEquals(\"legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"legalFilename.txt\"));\n+        assertEquals(\"subdir/legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"subdir/legalFilename.txt\"));\n+        assertEquals(\"illegalFilename/_____.txt\", FileNameHandler.cleanDirectoryName(\"illegalFilename/?*<>|.txt\"));\n+    }\n+\n+    @Test\n+    public void testCleanDirectoryNameForWindows() {\n+        assertEquals(\"legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"legalFilename.txt\"));\n+        assertEquals(\"subdir\\\\legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"subdir\\\\legalFilename.txt\"));\n+        assertEquals(\"illegalFilename\\\\_____.txt\", FileNameHandler.cleanDirectoryName(\"illegalFilename\\\\?*<>|.txt\"));\n+    }\n+\n+    @Test\n+    public void testCleanCurlyBracesAsWell() {\n+        assertEquals(\"The Evolution of Sentiment_ Analysis_A Review of Research Topics, Venues, and Top Cited Papers.PDF\", FileNameHandler.cleanFileName(\"The Evolution of Sentiment} Analysis}A Review of Research Topics, Venues, and Top Cited Papers.PDF\"));\n+    }\n+\n+    @Test\n+    public void testGetNonOverWritingFileNameReturnsUniqueName(@TempDir Path tempDirectory) throws IOException {\n+        String dummyFile1 = \"default.txt\";\n+        String dummyFile2 = \"default (1).txt\";\n+        String expectedFileName = \"default (2).txt\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4af8c53c5cbeb79249e4d15682ebdfbb017c58"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NjIxMTY4OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/jabref/logic/util/io/FileNameHandlerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMjo0NzowN1rOF7ZXaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMjo0NzowN1rOF7ZXaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyNTg5Nw==", "bodyText": "Please introduce Path dummyFile1 variable. In both usages of dummyFileX, you are resulting the name using the same path.", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r397825897", "createdAt": "2020-03-25T12:47:07Z", "author": {"login": "koppor"}, "path": "src/test/java/org/jabref/logic/util/io/FileNameHandlerTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.jabref.logic.util.io;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class FileNameHandlerTest {\n+\n+    @Test\n+    public void testCleanFileName() {\n+        assertEquals(\"legalFilename.txt\", FileNameHandler.cleanFileName(\"legalFilename.txt\"));\n+        assertEquals(\"illegalFilename______.txt\", FileNameHandler.cleanFileName(\"illegalFilename/?*<>|.txt\"));\n+    }\n+\n+    @Test\n+    public void testCleanDirectoryName() {\n+        assertEquals(\"legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"legalFilename.txt\"));\n+        assertEquals(\"subdir/legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"subdir/legalFilename.txt\"));\n+        assertEquals(\"illegalFilename/_____.txt\", FileNameHandler.cleanDirectoryName(\"illegalFilename/?*<>|.txt\"));\n+    }\n+\n+    @Test\n+    public void testCleanDirectoryNameForWindows() {\n+        assertEquals(\"legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"legalFilename.txt\"));\n+        assertEquals(\"subdir\\\\legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"subdir\\\\legalFilename.txt\"));\n+        assertEquals(\"illegalFilename\\\\_____.txt\", FileNameHandler.cleanDirectoryName(\"illegalFilename\\\\?*<>|.txt\"));\n+    }\n+\n+    @Test\n+    public void testCleanCurlyBracesAsWell() {\n+        assertEquals(\"The Evolution of Sentiment_ Analysis_A Review of Research Topics, Venues, and Top Cited Papers.PDF\", FileNameHandler.cleanFileName(\"The Evolution of Sentiment} Analysis}A Review of Research Topics, Venues, and Top Cited Papers.PDF\"));\n+    }\n+\n+    @Test\n+    public void testGetNonOverWritingFileNameReturnsUniqueName(@TempDir Path tempDirectory) throws IOException {\n+        String dummyFile1 = \"default.txt\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4af8c53c5cbeb79249e4d15682ebdfbb017c58"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NjIxNTYxOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/jabref/logic/util/io/FileNameHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMjo0ODoxNlrOF7ZZ8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMjo0ODoxNlrOF7ZZ8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyNjU0NQ==", "bodyText": "Good to have a test. - Could you add two more:\n\nOne for a non existing file\nOne for just one file existing\n\nI know, these are trivial. - Nevertheless, if someone touches your code, even the trivial ones are tested then (and there could something go wrong)", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r397826545", "createdAt": "2020-03-25T12:48:16Z", "author": {"login": "koppor"}, "path": "src/test/java/org/jabref/logic/util/io/FileNameHandlerTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.jabref.logic.util.io;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class FileNameHandlerTest {\n+\n+    @Test\n+    public void testCleanFileName() {\n+        assertEquals(\"legalFilename.txt\", FileNameHandler.cleanFileName(\"legalFilename.txt\"));\n+        assertEquals(\"illegalFilename______.txt\", FileNameHandler.cleanFileName(\"illegalFilename/?*<>|.txt\"));\n+    }\n+\n+    @Test\n+    public void testCleanDirectoryName() {\n+        assertEquals(\"legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"legalFilename.txt\"));\n+        assertEquals(\"subdir/legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"subdir/legalFilename.txt\"));\n+        assertEquals(\"illegalFilename/_____.txt\", FileNameHandler.cleanDirectoryName(\"illegalFilename/?*<>|.txt\"));\n+    }\n+\n+    @Test\n+    public void testCleanDirectoryNameForWindows() {\n+        assertEquals(\"legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"legalFilename.txt\"));\n+        assertEquals(\"subdir\\\\legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"subdir\\\\legalFilename.txt\"));\n+        assertEquals(\"illegalFilename\\\\_____.txt\", FileNameHandler.cleanDirectoryName(\"illegalFilename\\\\?*<>|.txt\"));\n+    }\n+\n+    @Test\n+    public void testCleanCurlyBracesAsWell() {\n+        assertEquals(\"The Evolution of Sentiment_ Analysis_A Review of Research Topics, Venues, and Top Cited Papers.PDF\", FileNameHandler.cleanFileName(\"The Evolution of Sentiment} Analysis}A Review of Research Topics, Venues, and Top Cited Papers.PDF\"));\n+    }\n+\n+    @Test\n+    public void testGetNonOverWritingFileNameReturnsUniqueName(@TempDir Path tempDirectory) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4af8c53c5cbeb79249e4d15682ebdfbb017c58"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3Nzk5NTAxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/util/io/FileNameUniqueness.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxNDoyMDo1MlrOF9Jxqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxNDoyMDo1MlrOF9Jxqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY2NzYyNg==", "bodyText": "Please remove this comment.", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r399667626", "createdAt": "2020-03-28T14:20:52Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/logic/util/io/FileNameUniqueness.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.jabref.logic.util.io;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+\n+public class FileNameUniqueness {\n+\n+    /**\n+     * Returns an absolute path to a file which does not match with any existing file names\n+     *\n+     * @param targetDirectory The directory in which file name should be unique\n+     * @param fileName Suggested name for the file\n+     * @return a file-name such that it does not match any existing files in targetDirectory.\n+     * */\n+    public static String getNonOverWritingFileName(Path targetDirectory, String fileName) {\n+//        String absoluteName = targetDirectory.resolve(fileName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bfb77914faef877a82d00d91090ec703b9e8138"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3Nzk5NTA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/util/io/FileNameUniqueness.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxNDoyMTowM1rOF9JxtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxNDoyMTowM1rOF9JxtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY2NzYzNw==", "bodyText": "This one as well.", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r399667637", "createdAt": "2020-03-28T14:21:03Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/logic/util/io/FileNameUniqueness.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.jabref.logic.util.io;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+\n+public class FileNameUniqueness {\n+\n+    /**\n+     * Returns an absolute path to a file which does not match with any existing file names\n+     *\n+     * @param targetDirectory The directory in which file name should be unique\n+     * @param fileName Suggested name for the file\n+     * @return a file-name such that it does not match any existing files in targetDirectory.\n+     * */\n+    public static String getNonOverWritingFileName(Path targetDirectory, String fileName) {\n+//        String absoluteName = targetDirectory.resolve(fileName)\n+//                .toString();\n+\n+        Optional<String> extensionOptional = FileUtil.getFileExtension(fileName);\n+\n+        // the suffix include the '.' , if extension is present Eg: \".pdf\"\n+        String extensionSuffix;\n+        String fileNameWithoutExtension;\n+\n+        if (extensionOptional.isPresent()) {\n+            extensionSuffix = '.' + extensionOptional.get();\n+            fileNameWithoutExtension = fileName.substring(0, fileName.lastIndexOf('.'));\n+        }\n+        else {\n+            extensionSuffix = \"\";\n+            fileNameWithoutExtension = fileName;\n+        }\n+\n+//        Path absolutePath = Paths.get(absoluteName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bfb77914faef877a82d00d91090ec703b9e8138"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3Nzk5NjY3OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/jabref/logic/util/io/FileNameUniquenessTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxNDoyMzoxOVrOF9Jyfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxNDoyMzoxOVrOF9Jyfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY2NzgzOA==", "bodyText": "Is there a need to have the temporary directory as a variable as well as an argument? I would prefer if all tests use the same format (either variable or either paramater)", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r399667838", "createdAt": "2020-03-28T14:23:19Z", "author": {"login": "tobiasdiez"}, "path": "src/test/java/org/jabref/logic/util/io/FileNameUniquenessTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.jabref.logic.util.io;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+public class FileNameUniquenessTest {\n+\n+    @TempDir\n+    protected Path tempDir;\n+\n+    @Test\n+    public void testGetNonOverWritingFileNameReturnsSameName(@TempDir Path tempDirectory) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bfb77914faef877a82d00d91090ec703b9e8138"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3Nzk5Nzc5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/util/io/FileNameUniqueness.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxNDoyNDoxMVrOF9Jy_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxNDoyNDoxMVrOF9Jy_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY2Nzk2NQ==", "bodyText": "The description seems to be off as no absolute path is returned but only the file name, right?", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r399667965", "createdAt": "2020-03-28T14:24:11Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/logic/util/io/FileNameUniqueness.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.jabref.logic.util.io;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+\n+public class FileNameUniqueness {\n+\n+    /**\n+     * Returns an absolute path to a file which does not match with any existing file names", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bfb77914faef877a82d00d91090ec703b9e8138"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3Nzk5ODQ5OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/jabref/logic/util/io/FileNameUniquenessTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxNDoyNTowMFrOF9JzXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxNDoyNTowMFrOF9JzXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY2ODA2MA==", "bodyText": "Deleting the file shouldn't be necessary as the TempDir should take care of this.", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r399668060", "createdAt": "2020-03-28T14:25:00Z", "author": {"login": "tobiasdiez"}, "path": "src/test/java/org/jabref/logic/util/io/FileNameUniquenessTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.jabref.logic.util.io;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+public class FileNameUniquenessTest {\n+\n+    @TempDir\n+    protected Path tempDir;\n+\n+    @Test\n+    public void testGetNonOverWritingFileNameReturnsSameName(@TempDir Path tempDirectory) throws IOException {\n+\n+        assertFalse(\n+                Files.exists(tempDirectory.resolve(\"sameFile.txt\"))\n+        );\n+\n+        String outputFileName = FileNameUniqueness.getNonOverWritingFileName(tempDirectory, \"sameFile.txt\");\n+        assertEquals(\"sameFile.txt\", outputFileName);\n+\n+    }\n+\n+    @Test\n+    public void testGetNonOverWritingFileNameReturnsUniqueNameOver1Conflict() throws IOException {\n+        Path dummyFilePath1 = tempDir.resolve(\"differentFile.txt\");\n+\n+        Files.createFile(dummyFilePath1);\n+\n+        String outputFileName = FileNameUniqueness.getNonOverWritingFileName(tempDir, \"differentFile.txt\");\n+        assertEquals(\"differentFile (1).txt\", outputFileName);\n+\n+        Files.delete(dummyFilePath1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bfb77914faef877a82d00d91090ec703b9e8138"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2023, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}