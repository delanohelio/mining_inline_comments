{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNzM5MjQx", "number": 6427, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNTozNzoxNVrOD5rOBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMzo0Nzo0OFrOD7P0Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODAzNTI1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/bibtexkeypattern/BracketedPattern.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNTozNzoxNVrOGREn1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMToyNjozMVrOGRmECA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU1NDcxMA==", "bodyText": "Check style will complain in Java, variables should be Lower camel case", "url": "https://github.com/JabRef/jabref/pull/6427#discussion_r420554710", "createdAt": "2020-05-06T05:37:15Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/logic/bibtexkeypattern/BracketedPattern.java", "diffHunk": "@@ -377,6 +377,11 @@ static String applyModifiers(final String label, final List<String> parts, final\n                     }\n                 }\n                 resultingLabel = abbreviateSB.toString();\n+            } else if (modifier.matches(\"truncate[\\\\d]+\")) {\n+                // Truncate by keeping the first N characters and remove trailing white spaces.\n+                int N = Integer.parseInt(modifier.substring(8));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb49e3315ff3649b2ed5ec1bd23d39929d6d3d4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEwMjYwMA==", "bodyText": "I think I misunderstood how the Github review function work, the changes are in a later commit. I'll add <module name=\"LocalVariableName\"/> which should detects invalid local variable names to my checkstyle.xml and hopefully no one will have to comment on it again :P\nThank you for taking the time to look through it and answer my questions!", "url": "https://github.com/JabRef/jabref/pull/6427#discussion_r421102600", "createdAt": "2020-05-06T21:26:31Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/main/java/org/jabref/logic/bibtexkeypattern/BracketedPattern.java", "diffHunk": "@@ -377,6 +377,11 @@ static String applyModifiers(final String label, final List<String> parts, final\n                     }\n                 }\n                 resultingLabel = abbreviateSB.toString();\n+            } else if (modifier.matches(\"truncate[\\\\d]+\")) {\n+                // Truncate by keeping the first N characters and remove trailing white spaces.\n+                int N = Integer.parseInt(modifier.substring(8));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU1NDcxMA=="}, "originalCommit": {"oid": "8fb49e3315ff3649b2ed5ec1bd23d39929d6d3d4"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTc0MjcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/formatter/minifier/TruncateFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMDozNToyMVrOGSPQOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMToyMjoxN1rOGSQxSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc3NzQ2NA==", "bodyText": "I don't understand if there is an advantage of making the key public static final rather than  private final as it is used for both equals and hashcode? Setting the KEY = \"truncate\" + truncateIndex as it is already handled as a separate case in Formatters.getFormatterForModifier(commented above).", "url": "https://github.com/JabRef/jabref/pull/6427#discussion_r421777464", "createdAt": "2020-05-07T20:35:21Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/main/java/org/jabref/logic/formatter/minifier/TruncateFormatter.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.jabref.logic.formatter.minifier;\n+\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.model.cleanup.Formatter;\n+\n+public class TruncateFormatter extends Formatter {\n+    public static final String KEY = \"truncate\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "895f302610527cd2c5b5f22e8a628d75e5920756"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgwMjMxMw==", "bodyText": "It should be private. If it's not used outside the class.\nPrivate final static is a compile constant. The compiler replaces all occurrences of the constant with its value.\nAnd you already have a getter for access for better\nhttps://www.geeksforgeeks.org/encapsulation-in-java/", "url": "https://github.com/JabRef/jabref/pull/6427#discussion_r421802313", "createdAt": "2020-05-07T21:22:17Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/logic/formatter/minifier/TruncateFormatter.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.jabref.logic.formatter.minifier;\n+\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.model.cleanup.Formatter;\n+\n+public class TruncateFormatter extends Formatter {\n+    public static final String KEY = \"truncate\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc3NzQ2NA=="}, "originalCommit": {"oid": "895f302610527cd2c5b5f22e8a628d75e5920756"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTc0NzgyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/formatter/Formatters.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMDozNjo1NlrOGSPTZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxODo0MTowNFrOGSvkRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc3ODI3Ng==", "bodyText": "Special check because it requires numeric input.", "url": "https://github.com/JabRef/jabref/pull/6427#discussion_r421778276", "createdAt": "2020-05-07T20:36:56Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/main/java/org/jabref/logic/formatter/Formatters.java", "diffHunk": "@@ -102,6 +103,9 @@ private Formatters() {\n         if (modifier.startsWith(RegexFormatter.KEY)) {\n             String regex = modifier.substring(RegexFormatter.KEY.length());\n             return Optional.of(new RegexFormatter(regex));\n+        } else if (modifier.matches(TruncateFormatter.KEY + \"\\\\d+\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "895f302610527cd2c5b5f22e8a628d75e5920756"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMwNjg4Ng==", "bodyText": "I think it would also make sense to extract this to a Pattern and call compile on it\nhttps://www.geeksforgeeks.org/pattern-compilestring-method-in-java-with-examples/", "url": "https://github.com/JabRef/jabref/pull/6427#discussion_r422306886", "createdAt": "2020-05-08T18:41:04Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/logic/formatter/Formatters.java", "diffHunk": "@@ -102,6 +103,9 @@ private Formatters() {\n         if (modifier.startsWith(RegexFormatter.KEY)) {\n             String regex = modifier.substring(RegexFormatter.KEY.length());\n             return Optional.of(new RegexFormatter(regex));\n+        } else if (modifier.matches(TruncateFormatter.KEY + \"\\\\d+\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc3ODI3Ng=="}, "originalCommit": {"oid": "895f302610527cd2c5b5f22e8a628d75e5920756"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTE5Mzk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/formatter/minifier/TruncateFormatter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxODo0MToyNFrOGSvk4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxODo0MToyNFrOGSvk4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMwNzA0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String KEY = \"truncate\";\n          \n          \n            \n                private static final String KEY = \"truncate\";", "url": "https://github.com/JabRef/jabref/pull/6427#discussion_r422307043", "createdAt": "2020-05-08T18:41:24Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/logic/formatter/minifier/TruncateFormatter.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.jabref.logic.formatter.minifier;\n+\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.model.cleanup.Formatter;\n+\n+public class TruncateFormatter extends Formatter {\n+    public static final String KEY = \"truncate\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "895f302610527cd2c5b5f22e8a628d75e5920756"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTc2MjA2OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/jabref/logic/formatter/minifier/TruncateFormatterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMTo1ODozMlrOGS088A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxMjozMTo0OVrOGS6weA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM5NTEyMA==", "bodyText": "maybe also add a test with invalid data and negative values", "url": "https://github.com/JabRef/jabref/pull/6427#discussion_r422395120", "createdAt": "2020-05-08T21:58:32Z", "author": {"login": "Siedlerchr"}, "path": "src/test/java/org/jabref/logic/formatter/minifier/TruncateFormatterTest.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package org.jabref.logic.formatter.minifier;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+/**\n+ * Tests in addition to the general tests from {@link org.jabref.logic.formatter.FormatterTest}\n+ */\n+public class TruncateFormatterTest {\n+    private final String TITLE = \"A Title\";\n+\n+    @Test\n+    void truncateModifierWorksWith0Length() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c518562c092af61c269adb1b4df2e5abad2d95d2"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ5MDIzMg==", "bodyText": "I'll move it back to WIP for now. I need a test for createDirNameFromPattern and modifications to deal with stacked folders.", "url": "https://github.com/JabRef/jabref/pull/6427#discussion_r422490232", "createdAt": "2020-05-09T12:31:49Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/test/java/org/jabref/logic/formatter/minifier/TruncateFormatterTest.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package org.jabref.logic.formatter.minifier;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+/**\n+ * Tests in addition to the general tests from {@link org.jabref.logic.formatter.FormatterTest}\n+ */\n+public class TruncateFormatterTest {\n+    private final String TITLE = \"A Title\";\n+\n+    @Test\n+    void truncateModifierWorksWith0Length() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM5NTEyMA=="}, "originalCommit": {"oid": "c518562c092af61c269adb1b4df2e5abad2d95d2"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNDUxNzE4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/util/io/FileUtil.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMzo0Nzo0OVrOGTdCkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNDo1MjoxNFrOGTf1vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA1MTkyMA==", "bodyText": "Note that on my system the maximum filename and directory name is 255 characters long while the absolute pathname appears to be limited to 1024 characters on FAT32.\nWindows appear to have a default maximum path length of 260 which I'd consider an argument for not including these lines.", "url": "https://github.com/JabRef/jabref/pull/6427#discussion_r423051920", "createdAt": "2020-05-11T13:47:49Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/main/java/org/jabref/logic/util/io/FileUtil.java", "diffHunk": "@@ -286,11 +286,13 @@ public static String createDirNameFromPattern(BibDatabase database, BibEntry ent\n             targetName = entry.getCiteKeyOptional().orElse(\"default\");\n         }\n \n-        // Removes illegal characters from filename\n+        // Removes illegal characters from directory name\n         targetName = FileNameCleaner.cleanDirectoryName(targetName);\n \n-        // Truncates long directory names\n-        targetName = getValidFileName(targetName);\n+        // Only use valid filenames for the directories in the path\n+        targetName = Arrays.stream(targetName.split(Pattern.quote(File.separator)))\n+                            .map(FileUtil::getValidFileName)\n+                            .collect(Collectors.joining(File.separator));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1677b7736e49059023ae9c8332e743e3c14ae65"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA1OTA2MQ==", "bodyText": "Java will throw an IO exception error if it's not possible, so we should not modify the (generated directory structure), just the filename.  Your bib file or file directory could also be on an network drive and that length limit does not apply to those,...\n=>So remove these lines.", "url": "https://github.com/JabRef/jabref/pull/6427#discussion_r423059061", "createdAt": "2020-05-11T13:57:51Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/logic/util/io/FileUtil.java", "diffHunk": "@@ -286,11 +286,13 @@ public static String createDirNameFromPattern(BibDatabase database, BibEntry ent\n             targetName = entry.getCiteKeyOptional().orElse(\"default\");\n         }\n \n-        // Removes illegal characters from filename\n+        // Removes illegal characters from directory name\n         targetName = FileNameCleaner.cleanDirectoryName(targetName);\n \n-        // Truncates long directory names\n-        targetName = getValidFileName(targetName);\n+        // Only use valid filenames for the directories in the path\n+        targetName = Arrays.stream(targetName.split(Pattern.quote(File.separator)))\n+                            .map(FileUtil::getValidFileName)\n+                            .collect(Collectors.joining(File.separator));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA1MTkyMA=="}, "originalCommit": {"oid": "d1677b7736e49059023ae9c8332e743e3c14ae65"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA3NDc0MA==", "bodyText": "Won't it throw the same exception for an invalid filename? -> remove the check for filename length?", "url": "https://github.com/JabRef/jabref/pull/6427#discussion_r423074740", "createdAt": "2020-05-11T14:20:30Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/main/java/org/jabref/logic/util/io/FileUtil.java", "diffHunk": "@@ -286,11 +286,13 @@ public static String createDirNameFromPattern(BibDatabase database, BibEntry ent\n             targetName = entry.getCiteKeyOptional().orElse(\"default\");\n         }\n \n-        // Removes illegal characters from filename\n+        // Removes illegal characters from directory name\n         targetName = FileNameCleaner.cleanDirectoryName(targetName);\n \n-        // Truncates long directory names\n-        targetName = getValidFileName(targetName);\n+        // Only use valid filenames for the directories in the path\n+        targetName = Arrays.stream(targetName.split(Pattern.quote(File.separator)))\n+                            .map(FileUtil::getValidFileName)\n+                            .collect(Collectors.joining(File.separator));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA1MTkyMA=="}, "originalCommit": {"oid": "d1677b7736e49059023ae9c8332e743e3c14ae65"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA3NzE1MA==", "bodyText": "Sure, but filenames are a bit different, as they are usually auto generated from a download. If you have a paper with a long title and some other maybe illegal characters, you don't want to fix it manually. That's why we only care for filenames.", "url": "https://github.com/JabRef/jabref/pull/6427#discussion_r423077150", "createdAt": "2020-05-11T14:23:51Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/logic/util/io/FileUtil.java", "diffHunk": "@@ -286,11 +286,13 @@ public static String createDirNameFromPattern(BibDatabase database, BibEntry ent\n             targetName = entry.getCiteKeyOptional().orElse(\"default\");\n         }\n \n-        // Removes illegal characters from filename\n+        // Removes illegal characters from directory name\n         targetName = FileNameCleaner.cleanDirectoryName(targetName);\n \n-        // Truncates long directory names\n-        targetName = getValidFileName(targetName);\n+        // Only use valid filenames for the directories in the path\n+        targetName = Arrays.stream(targetName.split(Pattern.quote(File.separator)))\n+                            .map(FileUtil::getValidFileName)\n+                            .collect(Collectors.joining(File.separator));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA1MTkyMA=="}, "originalCommit": {"oid": "d1677b7736e49059023ae9c8332e743e3c14ae65"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA5Nzc4OA==", "bodyText": "Ok. The lines are removed! As always, thank you for taking the time to look through and answer questions!", "url": "https://github.com/JabRef/jabref/pull/6427#discussion_r423097788", "createdAt": "2020-05-11T14:52:14Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/main/java/org/jabref/logic/util/io/FileUtil.java", "diffHunk": "@@ -286,11 +286,13 @@ public static String createDirNameFromPattern(BibDatabase database, BibEntry ent\n             targetName = entry.getCiteKeyOptional().orElse(\"default\");\n         }\n \n-        // Removes illegal characters from filename\n+        // Removes illegal characters from directory name\n         targetName = FileNameCleaner.cleanDirectoryName(targetName);\n \n-        // Truncates long directory names\n-        targetName = getValidFileName(targetName);\n+        // Only use valid filenames for the directories in the path\n+        targetName = Arrays.stream(targetName.split(Pattern.quote(File.separator)))\n+                            .map(FileUtil::getValidFileName)\n+                            .collect(Collectors.joining(File.separator));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA1MTkyMA=="}, "originalCommit": {"oid": "d1677b7736e49059023ae9c8332e743e3c14ae65"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1807, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}