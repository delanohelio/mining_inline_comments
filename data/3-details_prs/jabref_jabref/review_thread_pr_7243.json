{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1NjEyMzc0", "number": 7243, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxODowNToxOFrOFJLOjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjozNDoxNlrOFJ0Lyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MTY1NDUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/formatter/bibtexfields/NormalizePagesFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxODowNToxOFrOILeFow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNzowMDozOVrOIL9u0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg5ODIxMQ==", "bodyText": "I think this may result in unwanted changes. The formatter should only format pages if they are \"kind of\" in the right format. Now something like 40&50 is changed to 4050.", "url": "https://github.com/JabRef/jabref/pull/7243#discussion_r548898211", "createdAt": "2020-12-25T18:05:18Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/logic/formatter/bibtexfields/NormalizePagesFormatter.java", "diffHunk": "@@ -63,7 +64,8 @@ public String format(String value) {\n         // Remove pages prefix\n         String cleanValue = value.replace(\"pp.\", \"\").replace(\"p.\", \"\");\n         // remove unwanted literals including en dash, em dash, and whitespace\n-        cleanValue = cleanValue.replaceAll(\"\\u2013|\\u2014\", \"-\").replaceAll(REJECT_LITERALS, \"\");\n+        cleanValue = EM_EN_DASH_PATTERN.matcher(cleanValue).replaceAll(\"-\");\n+        cleanValue = REJECT_LITERALS_PATTERN.matcher(cleanValue).replaceAll(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afc0ff9fd7b2e3b6632680419547187d7c74060d"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQxNjY1Nw==", "bodyText": "Fixed in the new commit", "url": "https://github.com/JabRef/jabref/pull/7243#discussion_r549416657", "createdAt": "2020-12-28T17:00:39Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/formatter/bibtexfields/NormalizePagesFormatter.java", "diffHunk": "@@ -63,7 +64,8 @@ public String format(String value) {\n         // Remove pages prefix\n         String cleanValue = value.replace(\"pp.\", \"\").replace(\"p.\", \"\");\n         // remove unwanted literals including en dash, em dash, and whitespace\n-        cleanValue = cleanValue.replaceAll(\"\\u2013|\\u2014\", \"-\").replaceAll(REJECT_LITERALS, \"\");\n+        cleanValue = EM_EN_DASH_PATTERN.matcher(cleanValue).replaceAll(\"-\");\n+        cleanValue = REJECT_LITERALS_PATTERN.matcher(cleanValue).replaceAll(\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg5ODIxMQ=="}, "originalCommit": {"oid": "afc0ff9fd7b2e3b6632680419547187d7c74060d"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MTY1NTAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/formatter/bibtexfields/NormalizePagesFormatter.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxODowNTo0NlrOILeF2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQxMzo1NDozOVrOILjYyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg5ODI2NQ==", "bodyText": "I would put this into the PAGES_DETECT_PATTERN.", "url": "https://github.com/JabRef/jabref/pull/7243#discussion_r548898265", "createdAt": "2020-12-25T18:05:46Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/logic/formatter/bibtexfields/NormalizePagesFormatter.java", "diffHunk": "@@ -63,7 +64,8 @@ public String format(String value) {\n         // Remove pages prefix\n         String cleanValue = value.replace(\"pp.\", \"\").replace(\"p.\", \"\");\n         // remove unwanted literals including en dash, em dash, and whitespace\n-        cleanValue = cleanValue.replaceAll(\"\\u2013|\\u2014\", \"-\").replaceAll(REJECT_LITERALS, \"\");\n+        cleanValue = EM_EN_DASH_PATTERN.matcher(cleanValue).replaceAll(\"-\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afc0ff9fd7b2e3b6632680419547187d7c74060d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkwOTg4Nw==", "bodyText": "No, it makes sense to first replace all occurrences of en/em dashes before using pages detect pattern with a minus.", "url": "https://github.com/JabRef/jabref/pull/7243#discussion_r548909887", "createdAt": "2020-12-25T20:38:24Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/logic/formatter/bibtexfields/NormalizePagesFormatter.java", "diffHunk": "@@ -63,7 +64,8 @@ public String format(String value) {\n         // Remove pages prefix\n         String cleanValue = value.replace(\"pp.\", \"\").replace(\"p.\", \"\");\n         // remove unwanted literals including en dash, em dash, and whitespace\n-        cleanValue = cleanValue.replaceAll(\"\\u2013|\\u2014\", \"-\").replaceAll(REJECT_LITERALS, \"\");\n+        cleanValue = EM_EN_DASH_PATTERN.matcher(cleanValue).replaceAll(\"-\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg5ODI2NQ=="}, "originalCommit": {"oid": "afc0ff9fd7b2e3b6632680419547187d7c74060d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkxMTQ5MQ==", "bodyText": "@Siedlerchr In BibTeX, an em-dash is ---, and an en-dash is --. Maybe the replacement should enforce this?", "url": "https://github.com/JabRef/jabref/pull/7243#discussion_r548911491", "createdAt": "2020-12-25T21:02:18Z", "author": {"login": "mlep"}, "path": "src/main/java/org/jabref/logic/formatter/bibtexfields/NormalizePagesFormatter.java", "diffHunk": "@@ -63,7 +64,8 @@ public String format(String value) {\n         // Remove pages prefix\n         String cleanValue = value.replace(\"pp.\", \"\").replace(\"p.\", \"\");\n         // remove unwanted literals including en dash, em dash, and whitespace\n-        cleanValue = cleanValue.replaceAll(\"\\u2013|\\u2014\", \"-\").replaceAll(REJECT_LITERALS, \"\");\n+        cleanValue = EM_EN_DASH_PATTERN.matcher(cleanValue).replaceAll(\"-\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg5ODI2NQ=="}, "originalCommit": {"oid": "afc0ff9fd7b2e3b6632680419547187d7c74060d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkxMTc5MA==", "bodyText": "In pages you can either have a minus or a -- https://www.bibtex.com/f/pages-field/ at least that's what the mods exporter expects", "url": "https://github.com/JabRef/jabref/pull/7243#discussion_r548911790", "createdAt": "2020-12-25T21:06:15Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/logic/formatter/bibtexfields/NormalizePagesFormatter.java", "diffHunk": "@@ -63,7 +64,8 @@ public String format(String value) {\n         // Remove pages prefix\n         String cleanValue = value.replace(\"pp.\", \"\").replace(\"p.\", \"\");\n         // remove unwanted literals including en dash, em dash, and whitespace\n-        cleanValue = cleanValue.replaceAll(\"\\u2013|\\u2014\", \"-\").replaceAll(REJECT_LITERALS, \"\");\n+        cleanValue = EM_EN_DASH_PATTERN.matcher(cleanValue).replaceAll(\"-\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg5ODI2NQ=="}, "originalCommit": {"oid": "afc0ff9fd7b2e3b6632680419547187d7c74060d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkxMzA0Nw==", "bodyText": "The URL you give mentions \"It is standard to use an en-dash (\u201c--\u201d) to separate a page range.\" \ud83d\ude09", "url": "https://github.com/JabRef/jabref/pull/7243#discussion_r548913047", "createdAt": "2020-12-25T21:24:17Z", "author": {"login": "mlep"}, "path": "src/main/java/org/jabref/logic/formatter/bibtexfields/NormalizePagesFormatter.java", "diffHunk": "@@ -63,7 +64,8 @@ public String format(String value) {\n         // Remove pages prefix\n         String cleanValue = value.replace(\"pp.\", \"\").replace(\"p.\", \"\");\n         // remove unwanted literals including en dash, em dash, and whitespace\n-        cleanValue = cleanValue.replaceAll(\"\\u2013|\\u2014\", \"-\").replaceAll(REJECT_LITERALS, \"\");\n+        cleanValue = EM_EN_DASH_PATTERN.matcher(cleanValue).replaceAll(\"-\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg5ODI2NQ=="}, "originalCommit": {"oid": "afc0ff9fd7b2e3b6632680419547187d7c74060d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk2NzE0Mg==", "bodyText": "No, it makes sense to first replace all occurrences of en/em dashes before using pages detect pattern with a minus.\n\nWhat are the advantages of this approach? I only see that the performance is worse as you apply to regex per string instead of only one.\nI also agree with mlep, that -- is the desired format (and that also the format that the formatter produces). But this already covered by the part ?:-{1,2} in the regex. So my suggestion would be to simply replace - by -|\\u2013|\\u2014 in the regex.", "url": "https://github.com/JabRef/jabref/pull/7243#discussion_r548967142", "createdAt": "2020-12-26T10:10:52Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/logic/formatter/bibtexfields/NormalizePagesFormatter.java", "diffHunk": "@@ -63,7 +64,8 @@ public String format(String value) {\n         // Remove pages prefix\n         String cleanValue = value.replace(\"pp.\", \"\").replace(\"p.\", \"\");\n         // remove unwanted literals including en dash, em dash, and whitespace\n-        cleanValue = cleanValue.replaceAll(\"\\u2013|\\u2014\", \"-\").replaceAll(REJECT_LITERALS, \"\");\n+        cleanValue = EM_EN_DASH_PATTERN.matcher(cleanValue).replaceAll(\"-\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg5ODI2NQ=="}, "originalCommit": {"oid": "afc0ff9fd7b2e3b6632680419547187d7c74060d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk4NDc2NQ==", "bodyText": "I looked a bit into it, the problem is that for the test case R404-R405 the page detect pattern regex does not match anything non-numeric and therefore would return the orginal value.\nE.g. it would only match 404-405", "url": "https://github.com/JabRef/jabref/pull/7243#discussion_r548984765", "createdAt": "2020-12-26T13:51:09Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/logic/formatter/bibtexfields/NormalizePagesFormatter.java", "diffHunk": "@@ -63,7 +64,8 @@ public String format(String value) {\n         // Remove pages prefix\n         String cleanValue = value.replace(\"pp.\", \"\").replace(\"p.\", \"\");\n         // remove unwanted literals including en dash, em dash, and whitespace\n-        cleanValue = cleanValue.replaceAll(\"\\u2013|\\u2014\", \"-\").replaceAll(REJECT_LITERALS, \"\");\n+        cleanValue = EM_EN_DASH_PATTERN.matcher(cleanValue).replaceAll(\"-\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg5ODI2NQ=="}, "originalCommit": {"oid": "afc0ff9fd7b2e3b6632680419547187d7c74060d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk4NTAzMg==", "bodyText": "I would suggest we weaken the regex to follow the biblatex def: (2.2.1)\n\nA range is something optionally followed by one or more dashes optionally followed by some non-dash (e.g.5--7).", "url": "https://github.com/JabRef/jabref/pull/7243#discussion_r548985032", "createdAt": "2020-12-26T13:54:39Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/logic/formatter/bibtexfields/NormalizePagesFormatter.java", "diffHunk": "@@ -63,7 +64,8 @@ public String format(String value) {\n         // Remove pages prefix\n         String cleanValue = value.replace(\"pp.\", \"\").replace(\"p.\", \"\");\n         // remove unwanted literals including en dash, em dash, and whitespace\n-        cleanValue = cleanValue.replaceAll(\"\\u2013|\\u2014\", \"-\").replaceAll(REJECT_LITERALS, \"\");\n+        cleanValue = EM_EN_DASH_PATTERN.matcher(cleanValue).replaceAll(\"-\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg5ODI2NQ=="}, "originalCommit": {"oid": "afc0ff9fd7b2e3b6632680419547187d7c74060d"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODMzMzY4OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/jabref/logic/formatter/bibtexfields/NormalizePagesFormatterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjoyMDo0OVrOIMS-vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjoyMDo0OVrOIMS-vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc2NDc5OQ==", "bodyText": "input -> expected order makes more sense", "url": "https://github.com/JabRef/jabref/pull/7243#discussion_r549764799", "createdAt": "2020-12-29T16:20:49Z", "author": {"login": "tobiasdiez"}, "path": "src/test/java/org/jabref/logic/formatter/bibtexfields/NormalizePagesFormatterTest.java", "diffHunk": "@@ -10,102 +13,76 @@\n  */\n public class NormalizePagesFormatterTest {\n \n-    private NormalizePagesFormatter formatter;\n+    private final NormalizePagesFormatter formatter = new NormalizePagesFormatter();\n \n-    @BeforeEach\n-    public void setUp() {\n-        formatter = new NormalizePagesFormatter();\n-    }\n+    private static Stream<Arguments> tests() {\n+        return Stream.of(\n+                // formatSinglePageResultsInNoChange\n+                Arguments.of(\"1\", \"1\"),\n \n-    @Test\n-    public void formatSinglePageResultsInNoChange() {\n-        assertEquals(\"1\", formatter.format(\"1\"));\n-    }\n+                // formatPageNumbers\n+                Arguments.of(\"1--2\", \"1-2\"),\n \n-    @Test\n-    public void formatPageNumbers() {\n-        assertEquals(\"1--2\", formatter.format(\"1-2\"));\n-    }\n+                // formatPageNumbersCommaSeparated\n+                Arguments.of(\"1,2,3\", \"1,2,3\"),\n \n-    @Test\n-    public void formatPageNumbersCommaSeparated() {\n-        assertEquals(\"1,2,3\", formatter.format(\"1,2,3\"));\n-    }\n+                // formatPageNumbersPlusRange\n+                Arguments.of(\"43+\", \"43+\"),\n \n-    @Test\n-    public void formatPageNumbersPlusRange() {\n-        assertEquals(\"43+\", formatter.format(\"43+\"));\n-    }\n+                // ignoreWhitespaceInPageNumbers\n+                Arguments.of(\"1--2\", \"   1  - 2 \"),\n \n-    @Test\n-    public void ignoreWhitespaceInPageNumbers() {\n-        assertEquals(\"1--2\", formatter.format(\"   1  - 2 \"));\n-    }\n+                // removeWhitespaceSinglePage\n+                Arguments.of(\"1\", \"   1  \"),\n \n-    @Test\n-    public void removeWhitespaceSinglePage() {\n-        assertEquals(\"1\", formatter.format(\"   1  \"));\n-    }\n+                // removeWhitespacePageRange\n+                Arguments.of(\"1--2\", \"   1 -- 2  \"),\n \n-    @Test\n-    public void removeWhitespacePageRange() {\n-        assertEquals(\"1--2\", formatter.format(\"   1 -- 2  \"));\n-    }\n+                // ignoreWhitespaceInPageNumbersWithDoubleDash\n+                Arguments.of(\"43--103\", \"43 -- 103\"),\n \n-    @Test\n-    public void ignoreWhitespaceInPageNumbersWithDoubleDash() {\n-        assertEquals(\"43--103\", formatter.format(\"43 -- 103\"));\n-    }\n+                // keepCorrectlyFormattedPageNumbers\n+                Arguments.of(\"1--2\", \"1--2\"),\n \n-    @Test\n-    public void keepCorrectlyFormattedPageNumbers() {\n-        assertEquals(\"1--2\", formatter.format(\"1--2\"));\n-    }\n+                // formatPageNumbersRemoveUnexpectedLiterals\n+                Arguments.of(\"1--2\", \"{1}-{2}\"),\n \n-    @Test\n-    public void formatPageNumbersRemoveUnexpectedLiterals() {\n-        assertEquals(\"1--2\", formatter.format(\"{1}-{2}\"));\n-    }\n+                // formatPageNumbersRegexNotMatching\n+                Arguments.of(\"12\", \"12\"),\n \n-    @Test\n-    public void formatPageNumbersRegexNotMatching() {\n-        assertEquals(\"12\", formatter.format(\"12\"));\n-    }\n+                // doNotRemoveLetters\n+                Arguments.of(\"R1--R50\", \"R1-R50\"),\n \n-    @Test\n-    public void doNotRemoveLetters() {\n-        assertEquals(\"R1-R50\", formatter.format(\"R1-R50\"));\n-    }\n+                // replaceLongDashWithDoubleDash\n+                Arguments.of(\"1--50\", \"1 \\u2014 50\"),\n \n-    @Test\n-    public void replaceLongDashWithDoubleDash() {\n-        assertEquals(\"1--50\", formatter.format(\"1 \\u2014 50\"));\n-    }\n+                // removePagePrefix\n+                Arguments.of(\"50\", \"p.50\"),\n \n-    @Test\n-    public void removePagePrefix() {\n-        assertEquals(\"50\", formatter.format(\"p.50\"));\n-    }\n+                // removePagesPrefix\n+                Arguments.of(\"50\", \"pp.50\"),\n \n-    @Test\n-    public void removePagesPrefix() {\n-        assertEquals(\"50\", formatter.format(\"pp.50\"));\n-    }\n+                // keep &\n+                Arguments.of(\"40&50\", \"40&50\"),\n \n-    @Test\n-    public void formatACMPages() {\n-        // This appears in https://doi.org/10.1145/1658373.1658375\n-        assertEquals(\"2:1--2:33\", formatter.format(\"2:1-2:33\"));\n-    }\n+                // formatACMPages\n+                // This appears in https://doi.org/10.1145/1658373.1658375\n+                Arguments.of(\"2:1--2:33\", \"2:1-2:33\"),\n+\n+                // keepFormattedACMPages\n+                // This appears in https://doi.org/10.1145/1658373.1658375\n+                Arguments.of(\"2:1--2:33\", \"2:1--2:33\"),\n+\n+                // formatExample\n+                Arguments.of(\"1--2\", new NormalizePagesFormatter().getExampleInput()),\n \n-    @Test\n-    public void keepFormattedACMPages() {\n-        // This appears in https://doi.org/10.1145/1658373.1658375\n-        assertEquals(\"2:1--2:33\", formatter.format(\"2:1--2:33\"));\n+                // replaceDashWithMinus\n+                Arguments.of(\"R404--R405\", \"R404\u2013R405\"));\n     }\n \n-    @Test\n-    public void formatExample() {\n-        assertEquals(\"1--2\", formatter.format(formatter.getExampleInput()));\n+    @ParameterizedTest\n+    @MethodSource(\"tests\")\n+    public void test(String expected, String toFormat) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "361cb5dfd2a4dbdacf1315eb8a871a9c2d982fe5"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODM1MDg4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/formatter/casechanger/UnprotectTermsFormatter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjoyODowMFrOIMTIZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjoyODowMFrOIMTIZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc2NzI2OQ==", "bodyText": "add \"balanced\" ?", "url": "https://github.com/JabRef/jabref/pull/7243#discussion_r549767269", "createdAt": "2020-12-29T16:28:00Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/logic/formatter/casechanger/UnprotectTermsFormatter.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package org.jabref.logic.formatter.casechanger;\n+\n+import java.util.Objects;\n+\n+import org.jabref.logic.cleanup.Formatter;\n+import org.jabref.logic.l10n.Localization;\n+\n+/**\n+ * Remove {} brackets around words\n+ *\n+ * Related formatter: {@link ProtectTermsFormatter}\n+ */\n+public class UnprotectTermsFormatter extends Formatter {\n+\n+    @Override\n+    public String format(String text) {\n+        // similar implementation at {@link org.jabref.logic.formatter.bibtexfields.RemoveBracesFormatter.hasNegativeBraceCount}\n+        Objects.requireNonNull(text);\n+        if (text.isEmpty()) {\n+            return text;\n+        }\n+        StringBuilder result = new StringBuilder();\n+        int level = 0;\n+        int index = 0;\n+        do {\n+            char charAtIndex = text.charAt(index);\n+            if (charAtIndex == '{') {\n+                level++;\n+            } else if (charAtIndex == '}') {\n+                level--;\n+            } else {\n+                result.append(charAtIndex);\n+            }\n+            index++;\n+        } while (index < text.length() && level >= 0);\n+        if (level != 0) {\n+            // in case of unbalanced braces, the original text is returned unmodified\n+            return text;\n+        }\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String getDescription() {\n+        return Localization.lang(\n+                \"Removes all {} brackets around words.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "361cb5dfd2a4dbdacf1315eb8a871a9c2d982fe5"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODM2NDkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/formatter/bibtexfields/NormalizePagesFormatter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjozNDoxNlrOIMTQZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNjozMjo1MFrOIN4Yog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc2OTMxOA==", "bodyText": "I'm also not sure if I-X is correct or I--X for roman page numbers.", "url": "https://github.com/JabRef/jabref/pull/7243#discussion_r549769318", "createdAt": "2020-12-29T16:34:16Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/logic/formatter/bibtexfields/NormalizePagesFormatter.java", "diffHunk": "@@ -63,19 +65,9 @@ public String format(String value) {\n         // Remove pages prefix\n         String cleanValue = value.replace(\"pp.\", \"\").replace(\"p.\", \"\");\n         // remove unwanted literals including en dash, em dash, and whitespace\n-        cleanValue = cleanValue.replaceAll(\"\\u2013|\\u2014\", \"-\").replaceAll(REJECT_LITERALS, \"\");\n-        // try to find pages pattern\n-        Matcher matcher = PAGES_DETECT_PATTERN.matcher(cleanValue);\n-        if (matcher.matches()) {\n-            // replace\n-            if (Strings.isNullOrEmpty(matcher.group(\"endpage\"))) {\n-                return matcher.replaceFirst(SINGLE_PAGE_REPLACE_PATTERN);\n-            } else {\n-                return matcher.replaceFirst(PAGES_REPLACE_PATTERN);\n-            }\n-        }\n-        // no replacement\n-        return value;\n+        value = EM_EN_DASH_PATTERN.matcher(cleanValue).replaceAll(\"-\")\n+                                  .replaceAll(\"[ ]*[-]+[ ]*\", \"--\");\n+        return unprotectTermsFormatter.format(value.trim());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "361cb5dfd2a4dbdacf1315eb8a871a9c2d982fe5"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc4NjA1MA==", "bodyText": "Result of test-driven-development \ud83d\ude07. I will think more about it now.", "url": "https://github.com/JabRef/jabref/pull/7243#discussion_r549786050", "createdAt": "2020-12-29T17:25:22Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/formatter/bibtexfields/NormalizePagesFormatter.java", "diffHunk": "@@ -63,19 +65,9 @@ public String format(String value) {\n         // Remove pages prefix\n         String cleanValue = value.replace(\"pp.\", \"\").replace(\"p.\", \"\");\n         // remove unwanted literals including en dash, em dash, and whitespace\n-        cleanValue = cleanValue.replaceAll(\"\\u2013|\\u2014\", \"-\").replaceAll(REJECT_LITERALS, \"\");\n-        // try to find pages pattern\n-        Matcher matcher = PAGES_DETECT_PATTERN.matcher(cleanValue);\n-        if (matcher.matches()) {\n-            // replace\n-            if (Strings.isNullOrEmpty(matcher.group(\"endpage\"))) {\n-                return matcher.replaceFirst(SINGLE_PAGE_REPLACE_PATTERN);\n-            } else {\n-                return matcher.replaceFirst(PAGES_REPLACE_PATTERN);\n-            }\n-        }\n-        // no replacement\n-        return value;\n+        value = EM_EN_DASH_PATTERN.matcher(cleanValue).replaceAll(\"-\")\n+                                  .replaceAll(\"[ ]*[-]+[ ]*\", \"--\");\n+        return unprotectTermsFormatter.format(value.trim());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc2OTMxOA=="}, "originalCommit": {"oid": "361cb5dfd2a4dbdacf1315eb8a871a9c2d982fe5"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQyNjIxMA==", "bodyText": "I'm also not sure if I-X is correct or I--X for roman page numbers.\n\nThis reads more as a page range, too. Roman 9 is written IX (and not I-X), isn't it?", "url": "https://github.com/JabRef/jabref/pull/7243#discussion_r551426210", "createdAt": "2021-01-04T16:32:50Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/formatter/bibtexfields/NormalizePagesFormatter.java", "diffHunk": "@@ -63,19 +65,9 @@ public String format(String value) {\n         // Remove pages prefix\n         String cleanValue = value.replace(\"pp.\", \"\").replace(\"p.\", \"\");\n         // remove unwanted literals including en dash, em dash, and whitespace\n-        cleanValue = cleanValue.replaceAll(\"\\u2013|\\u2014\", \"-\").replaceAll(REJECT_LITERALS, \"\");\n-        // try to find pages pattern\n-        Matcher matcher = PAGES_DETECT_PATTERN.matcher(cleanValue);\n-        if (matcher.matches()) {\n-            // replace\n-            if (Strings.isNullOrEmpty(matcher.group(\"endpage\"))) {\n-                return matcher.replaceFirst(SINGLE_PAGE_REPLACE_PATTERN);\n-            } else {\n-                return matcher.replaceFirst(PAGES_REPLACE_PATTERN);\n-            }\n-        }\n-        // no replacement\n-        return value;\n+        value = EM_EN_DASH_PATTERN.matcher(cleanValue).replaceAll(\"-\")\n+                                  .replaceAll(\"[ ]*[-]+[ ]*\", \"--\");\n+        return unprotectTermsFormatter.format(value.trim());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc2OTMxOA=="}, "originalCommit": {"oid": "361cb5dfd2a4dbdacf1315eb8a871a9c2d982fe5"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2098, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}