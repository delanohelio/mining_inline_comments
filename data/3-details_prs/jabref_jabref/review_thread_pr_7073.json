{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1NTY4NDU1", "number": 7073, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMjowMjoyNFrOE2QPgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNjoyNjo0MVrOE3Tnzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MzI0NjczOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/preview/PreviewViewer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMjowMjoyNFrOHu-8Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMjowMjoyNFrOHu-8Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAyNzcyNg==", "bodyText": "Since / terminates the JavaScript regexp, it should be escaped. The issue with using new RegExp is that you will have to escape the string terminator instead, so it is more code without any benefit that I am aware of.", "url": "https://github.com/JabRef/jabref/pull/7073#discussion_r519027726", "createdAt": "2020-11-06T22:02:24Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/main/java/org/jabref/gui/preview/PreviewViewer.java", "diffHunk": "@@ -144,7 +144,7 @@ private void highlightSearchPattern() {\n                     \"var markInstance = new Mark(document.getElementById(\\\"content\\\"));\" +\n                             \"markInstance.unmark({\" +\n                             \"  done: function(){\" +\n-                            \"    markInstance.markRegExp(/\" + pattern + \"/gmi);\" +\n+                            \"    markInstance.markRegExp(/\" + pattern.replaceAll(\"/\", \"\\\\\\\\/\") + \"/gmi);\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "979fa6e40b55e5c2d01bb55a8f13d71b7e85b9da"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MzI0OTA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/model/search/rules/GrammarBasedSearchRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMjowMzozOFrOHu-9jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMjo0Njo1N1rOHu_2yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAyODExMQ==", "bodyText": "@Siedlerchr perhaps the if solution is better here? This might be too frivolous application of the DRY principle.", "url": "https://github.com/JabRef/jabref/pull/7073#discussion_r519028111", "createdAt": "2020-11-06T22:03:38Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/main/java/org/jabref/model/search/rules/GrammarBasedSearchRule.java", "diffHunk": "@@ -232,7 +232,7 @@ public Boolean visitComparison(SearchParser.ComparisonContext context) {\n             if (fieldDescriptor.isPresent()) {\n                 return comparison(fieldDescriptor.get().getText(), ComparisonOperator.build(context.operator.getText()), right);\n             } else {\n-                return new ContainBasedSearchRule(caseSensitive).applyRule(right, entry);\n+                return SearchRules.getSearchRule(caseSensitive, regex).applyRule(right, entry);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "979fa6e40b55e5c2d01bb55a8f13d71b7e85b9da"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA0Mjc2MA==", "bodyText": "Doesn't really matter in this case, think it's okay. Didn't think about this way.", "url": "https://github.com/JabRef/jabref/pull/7073#discussion_r519042760", "createdAt": "2020-11-06T22:46:57Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/model/search/rules/GrammarBasedSearchRule.java", "diffHunk": "@@ -232,7 +232,7 @@ public Boolean visitComparison(SearchParser.ComparisonContext context) {\n             if (fieldDescriptor.isPresent()) {\n                 return comparison(fieldDescriptor.get().getText(), ComparisonOperator.build(context.operator.getText()), right);\n             } else {\n-                return new ContainBasedSearchRule(caseSensitive).applyRule(right, entry);\n+                return SearchRules.getSearchRule(caseSensitive, regex).applyRule(right, entry);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAyODExMQ=="}, "originalCommit": {"oid": "979fa6e40b55e5c2d01bb55a8f13d71b7e85b9da"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MjE0MDc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/preview/PreviewViewer.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNzo1ODowMlrOHwQG3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNDowMDozOVrOHwd3ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM1NzU5OA==", "bodyText": "Would it be possible to extract this as constant (and thus documenting why this replacement is done)?", "url": "https://github.com/JabRef/jabref/pull/7073#discussion_r520357598", "createdAt": "2020-11-10T07:58:02Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/gui/preview/PreviewViewer.java", "diffHunk": "@@ -144,7 +144,7 @@ private void highlightSearchPattern() {\n                     \"var markInstance = new Mark(document.getElementById(\\\"content\\\"));\" +\n                             \"markInstance.unmark({\" +\n                             \"  done: function(){\" +\n-                            \"    markInstance.markRegExp(/\" + pattern + \"/gmi);\" +\n+                            \"    markInstance.markRegExp(/\" + pattern.replaceAll(\"(?<!\\\\\\\\)/\", \"\\\\\\\\/\") + \"/gmi);\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b77fcaafa0216fef42212be775c99b603d860856"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU3MjIzNw==", "bodyText": "Sure. I just need to get JDK 15 going for those text blocks X)\nI keep getting some errors with my setup.", "url": "https://github.com/JabRef/jabref/pull/7073#discussion_r520572237", "createdAt": "2020-11-10T13:45:28Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/main/java/org/jabref/gui/preview/PreviewViewer.java", "diffHunk": "@@ -144,7 +144,7 @@ private void highlightSearchPattern() {\n                     \"var markInstance = new Mark(document.getElementById(\\\"content\\\"));\" +\n                             \"markInstance.unmark({\" +\n                             \"  done: function(){\" +\n-                            \"    markInstance.markRegExp(/\" + pattern + \"/gmi);\" +\n+                            \"    markInstance.markRegExp(/\" + pattern.replaceAll(\"(?<!\\\\\\\\)/\", \"\\\\\\\\/\") + \"/gmi);\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM1NzU5OA=="}, "originalCommit": {"oid": "b77fcaafa0216fef42212be775c99b603d860856"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU3NjMyOA==", "bodyText": "@k3KAW8Pnf7mkmdSMPHz27 Source level is still jdk14, the textblock function is still preview. We only use jdk15  for compiling the jpackage stuff. (except for windows, where jdk14 is still required due to a jdk jpackage bug)", "url": "https://github.com/JabRef/jabref/pull/7073#discussion_r520576328", "createdAt": "2020-11-10T13:51:15Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/gui/preview/PreviewViewer.java", "diffHunk": "@@ -144,7 +144,7 @@ private void highlightSearchPattern() {\n                     \"var markInstance = new Mark(document.getElementById(\\\"content\\\"));\" +\n                             \"markInstance.unmark({\" +\n                             \"  done: function(){\" +\n-                            \"    markInstance.markRegExp(/\" + pattern + \"/gmi);\" +\n+                            \"    markInstance.markRegExp(/\" + pattern.replaceAll(\"(?<!\\\\\\\\)/\", \"\\\\\\\\/\") + \"/gmi);\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM1NzU5OA=="}, "originalCommit": {"oid": "b77fcaafa0216fef42212be775c99b603d860856"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU4MzAxOA==", "bodyText": "That explains \ud83d\ude01", "url": "https://github.com/JabRef/jabref/pull/7073#discussion_r520583018", "createdAt": "2020-11-10T14:00:39Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/main/java/org/jabref/gui/preview/PreviewViewer.java", "diffHunk": "@@ -144,7 +144,7 @@ private void highlightSearchPattern() {\n                     \"var markInstance = new Mark(document.getElementById(\\\"content\\\"));\" +\n                             \"markInstance.unmark({\" +\n                             \"  done: function(){\" +\n-                            \"    markInstance.markRegExp(/\" + pattern + \"/gmi);\" +\n+                            \"    markInstance.markRegExp(/\" + pattern.replaceAll(\"(?<!\\\\\\\\)/\", \"\\\\\\\\/\") + \"/gmi);\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM1NzU5OA=="}, "originalCommit": {"oid": "b77fcaafa0216fef42212be775c99b603d860856"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDI4NjIzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/preview/PreviewViewer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNjoyNjo0MVrOHwkzVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMzo0Nzo0MlrOHw0Dvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY5NjY2MA==", "bodyText": "@koppor\n\nWould it be possible to extract this as constant (and thus documenting why this replacement is done)?\n\nI noticed that I misunderstood you. I have extracted the String constants (as well) and hopefully improved readability. I don't think I should be more explicit regarding the forward slash replacement, unless I also link to how to use a JavaScript regex literal (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions). Perhaps I should add this link?", "url": "https://github.com/JabRef/jabref/pull/7073#discussion_r520696660", "createdAt": "2020-11-10T16:26:41Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/main/java/org/jabref/gui/preview/PreviewViewer.java", "diffHunk": "@@ -137,23 +145,26 @@ public void setTheme(Theme theme) {\n     }\n \n     private void highlightSearchPattern() {\n+        String callbackForUnmark = \"\";\n         if (searchHighlightPattern.isPresent()) {\n-            String pattern = searchHighlightPattern.get().pattern();\n-\n-            previewView.getEngine().executeScript(\n-                    \"var markInstance = new Mark(document.getElementById(\\\"content\\\"));\" +\n-                            \"markInstance.unmark({\" +\n-                            \"  done: function(){\" +\n-                            \"    markInstance.markRegExp(/\" + pattern.replaceAll(\"(?<!\\\\\\\\)/\", \"\\\\\\\\/\") + \"/gmi);\" +\n-                            \"    }\" +\n-                            \"  });\"\n-            );\n-        } else {\n-            previewView.getEngine().executeScript(\n-                    \"var markInstance = new Mark(document.getElementById(\\\"content\\\"));\" +\n-                            \"markInstance.unmark()\"\n-            );\n+            String javaScriptRegex = createJavaScriptRegex(searchHighlightPattern.get());\n+            callbackForUnmark = String.format(JS_MARK_REG_EXP_CALLBACK, javaScriptRegex);\n         }\n+        String unmarkInstance = String.format(JS_UNMARK_WITH_CALLBACK, callbackForUnmark);\n+        previewView.getEngine().executeScript(unmarkInstance);\n+    }\n+\n+    /**\n+     * Returns the String representation of a JavaScript regex object. The method does not take into account differences between the regex implementations in Java and JavaScript.\n+     *\n+     * @param regex Java regex to print as a JavaScript regex\n+     * @return JavaScript regex object\n+     */\n+    private static String createJavaScriptRegex(Pattern regex) {\n+        String pattern = regex.pattern();\n+        // Create a JavaScript regex using the forward slash pattern\n+        pattern = UNESCAPED_FORWARD_SLASH.matcher(pattern).replaceAll(\"\\\\\\\\/\");\n+        return \"/\" + pattern + \"/gmi\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07bd8cc3e534be23c22d336ad8aa85f3a767762b"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg2NTcwOQ==", "bodyText": "Yes, I like links in the code. Even if there are opinions that they might oudate. Neverthless, 1 good link is better than 0 links", "url": "https://github.com/JabRef/jabref/pull/7073#discussion_r520865709", "createdAt": "2020-11-10T20:50:55Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/gui/preview/PreviewViewer.java", "diffHunk": "@@ -137,23 +145,26 @@ public void setTheme(Theme theme) {\n     }\n \n     private void highlightSearchPattern() {\n+        String callbackForUnmark = \"\";\n         if (searchHighlightPattern.isPresent()) {\n-            String pattern = searchHighlightPattern.get().pattern();\n-\n-            previewView.getEngine().executeScript(\n-                    \"var markInstance = new Mark(document.getElementById(\\\"content\\\"));\" +\n-                            \"markInstance.unmark({\" +\n-                            \"  done: function(){\" +\n-                            \"    markInstance.markRegExp(/\" + pattern.replaceAll(\"(?<!\\\\\\\\)/\", \"\\\\\\\\/\") + \"/gmi);\" +\n-                            \"    }\" +\n-                            \"  });\"\n-            );\n-        } else {\n-            previewView.getEngine().executeScript(\n-                    \"var markInstance = new Mark(document.getElementById(\\\"content\\\"));\" +\n-                            \"markInstance.unmark()\"\n-            );\n+            String javaScriptRegex = createJavaScriptRegex(searchHighlightPattern.get());\n+            callbackForUnmark = String.format(JS_MARK_REG_EXP_CALLBACK, javaScriptRegex);\n         }\n+        String unmarkInstance = String.format(JS_UNMARK_WITH_CALLBACK, callbackForUnmark);\n+        previewView.getEngine().executeScript(unmarkInstance);\n+    }\n+\n+    /**\n+     * Returns the String representation of a JavaScript regex object. The method does not take into account differences between the regex implementations in Java and JavaScript.\n+     *\n+     * @param regex Java regex to print as a JavaScript regex\n+     * @return JavaScript regex object\n+     */\n+    private static String createJavaScriptRegex(Pattern regex) {\n+        String pattern = regex.pattern();\n+        // Create a JavaScript regex using the forward slash pattern\n+        pattern = UNESCAPED_FORWARD_SLASH.matcher(pattern).replaceAll(\"\\\\\\\\/\");\n+        return \"/\" + pattern + \"/gmi\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY5NjY2MA=="}, "originalCommit": {"oid": "07bd8cc3e534be23c22d336ad8aa85f3a767762b"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk0NjYyMg==", "bodyText": "Well, I compromised and added the link I believe is the least likely to get outdated \ud83d\ude1b", "url": "https://github.com/JabRef/jabref/pull/7073#discussion_r520946622", "createdAt": "2020-11-10T23:47:42Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/main/java/org/jabref/gui/preview/PreviewViewer.java", "diffHunk": "@@ -137,23 +145,26 @@ public void setTheme(Theme theme) {\n     }\n \n     private void highlightSearchPattern() {\n+        String callbackForUnmark = \"\";\n         if (searchHighlightPattern.isPresent()) {\n-            String pattern = searchHighlightPattern.get().pattern();\n-\n-            previewView.getEngine().executeScript(\n-                    \"var markInstance = new Mark(document.getElementById(\\\"content\\\"));\" +\n-                            \"markInstance.unmark({\" +\n-                            \"  done: function(){\" +\n-                            \"    markInstance.markRegExp(/\" + pattern.replaceAll(\"(?<!\\\\\\\\)/\", \"\\\\\\\\/\") + \"/gmi);\" +\n-                            \"    }\" +\n-                            \"  });\"\n-            );\n-        } else {\n-            previewView.getEngine().executeScript(\n-                    \"var markInstance = new Mark(document.getElementById(\\\"content\\\"));\" +\n-                            \"markInstance.unmark()\"\n-            );\n+            String javaScriptRegex = createJavaScriptRegex(searchHighlightPattern.get());\n+            callbackForUnmark = String.format(JS_MARK_REG_EXP_CALLBACK, javaScriptRegex);\n         }\n+        String unmarkInstance = String.format(JS_UNMARK_WITH_CALLBACK, callbackForUnmark);\n+        previewView.getEngine().executeScript(unmarkInstance);\n+    }\n+\n+    /**\n+     * Returns the String representation of a JavaScript regex object. The method does not take into account differences between the regex implementations in Java and JavaScript.\n+     *\n+     * @param regex Java regex to print as a JavaScript regex\n+     * @return JavaScript regex object\n+     */\n+    private static String createJavaScriptRegex(Pattern regex) {\n+        String pattern = regex.pattern();\n+        // Create a JavaScript regex using the forward slash pattern\n+        pattern = UNESCAPED_FORWARD_SLASH.matcher(pattern).replaceAll(\"\\\\\\\\/\");\n+        return \"/\" + pattern + \"/gmi\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY5NjY2MA=="}, "originalCommit": {"oid": "07bd8cc3e534be23c22d336ad8aa85f3a767762b"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2180, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}