{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3ODk4NDMz", "number": 6682, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxNTowNDowOVrOENmwxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDo1OTo0NVrOEOolCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzAyMDIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/search/GlobalSearchBar.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxNTowNDowOVrOGwU7Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxOTo1MDoxNlrOGw3ZyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMyNzYzNA==", "bodyText": "I think it would make sense to add it to the search preferences as well", "url": "https://github.com/JabRef/jabref/pull/6682#discussion_r453327634", "createdAt": "2020-07-12T15:04:09Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/gui/search/GlobalSearchBar.java", "diffHunk": "@@ -325,7 +322,7 @@ private void updateResults(int matched, TextFlow description, boolean grammarBas\n     }\n \n     private void setHintTooltip(TextFlow description) {\n-        if (Globals.prefs.getBoolean(JabRefPreferences.SHOW_ADVANCED_HINTS)) {\n+        if (preferencesService.getGeneralPreferences().shouldShowAdvancedHints()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfaa3833988348ac0ff45ace9421134ba4c4df82"}, "originalPosition": 288}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg3MTI5MQ==", "bodyText": "Originally the idea about the advanced hints options was to make it reusable for other hints as well. But in fact, it has only been used also for another (somewhat silly) hint in the network tab in the preferences dialog. So im not sure about this... Maybe in the future, we could evolve that feature to some annoying tip of the day feature? \ud83d\ude09", "url": "https://github.com/JabRef/jabref/pull/6682#discussion_r453871291", "createdAt": "2020-07-13T19:10:40Z", "author": {"login": "calixtus"}, "path": "src/main/java/org/jabref/gui/search/GlobalSearchBar.java", "diffHunk": "@@ -325,7 +322,7 @@ private void updateResults(int matched, TextFlow description, boolean grammarBas\n     }\n \n     private void setHintTooltip(TextFlow description) {\n-        if (Globals.prefs.getBoolean(JabRefPreferences.SHOW_ADVANCED_HINTS)) {\n+        if (preferencesService.getGeneralPreferences().shouldShowAdvancedHints()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMyNzYzNA=="}, "originalCommit": {"oid": "bfaa3833988348ac0ff45ace9421134ba4c4df82"}, "originalPosition": 288}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg5MjU1Mg==", "bodyText": "I have no strong opinion on this. So then just leave it as is", "url": "https://github.com/JabRef/jabref/pull/6682#discussion_r453892552", "createdAt": "2020-07-13T19:50:16Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/gui/search/GlobalSearchBar.java", "diffHunk": "@@ -325,7 +322,7 @@ private void updateResults(int matched, TextFlow description, boolean grammarBas\n     }\n \n     private void setHintTooltip(TextFlow description) {\n-        if (Globals.prefs.getBoolean(JabRefPreferences.SHOW_ADVANCED_HINTS)) {\n+        if (preferencesService.getGeneralPreferences().shouldShowAdvancedHints()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMyNzYzNA=="}, "originalCommit": {"oid": "bfaa3833988348ac0ff45ace9421134ba4c4df82"}, "originalPosition": 288}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMzY2NTgyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/preferences/SearchPreferences.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMjozNzo0M1rOGxRxuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzoxMjo0MFrOGxdPwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDMyNDY2Nw==", "bodyText": "Is the builder really necessary? I think the with* methods can be added directly to the main class without any problems.", "url": "https://github.com/JabRef/jabref/pull/6682#discussion_r454324667", "createdAt": "2020-07-14T12:37:43Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/preferences/SearchPreferences.java", "diffHunk": "@@ -1,103 +1,63 @@\n package org.jabref.preferences;\n \n-import java.util.Map;\n-import java.util.Objects;\n-\n import org.jabref.gui.search.SearchDisplayMode;\n \n public class SearchPreferences {\n \n-    private static final String SEARCH_DISPLAY_MODE = \"searchDisplayMode\";\n-    private static final String SEARCH_CASE_SENSITIVE = \"caseSensitiveSearch\";\n-    private static final String SEARCH_REG_EXP = \"regExpSearch\";\n-\n-    private static final String SEARCH_DIALOG_HEIGHT = \"searchDialogHeight\";\n-    private static final String SEARCH_DIALOG_WIDTH = \"searchDialogWidth\";\n-    private static final String SEARCH_DIALOG_POS_X = \"searchDialogPosX\";\n-    private static final String SEARCH_DIALOG_POS_Y = \"searchDialogPosY\";\n+    private final SearchDisplayMode searchDisplayMode;\n+    private final boolean isCaseSensitive;\n+    private final boolean isRegularExpression;\n \n-    private final JabRefPreferences preferences;\n-\n-    public SearchPreferences(JabRefPreferences preferences) {\n-        this.preferences = Objects.requireNonNull(preferences);\n+    public SearchPreferences(SearchDisplayMode searchDisplayMode, boolean isCaseSensitive, boolean isRegularExpression) {\n+        this.searchDisplayMode = searchDisplayMode;\n+        this.isCaseSensitive = isCaseSensitive;\n+        this.isRegularExpression = isRegularExpression;\n     }\n \n-    public static void putDefaults(Map<String, Object> defaults) {\n-        defaults.put(SEARCH_DISPLAY_MODE, SearchDisplayMode.FILTER.toString());\n-        defaults.put(SEARCH_CASE_SENSITIVE, Boolean.FALSE);\n-        defaults.put(SEARCH_REG_EXP, Boolean.FALSE);\n-\n-        defaults.put(SEARCH_DIALOG_WIDTH, 650);\n-        defaults.put(SEARCH_DIALOG_HEIGHT, 500);\n-        defaults.put(SEARCH_DIALOG_POS_X, 0);\n-        defaults.put(SEARCH_DIALOG_POS_Y, 0);\n-    }\n-\n-    public SearchDisplayMode getSearchMode() {\n-        try {\n-            return SearchDisplayMode.valueOf(preferences.get(SEARCH_DISPLAY_MODE));\n-        } catch (IllegalArgumentException ex) {\n-            // Should only occur when the searchmode is set directly via preferences.put and the enum was not used\n-            return SearchDisplayMode.valueOf((String) preferences.defaults.get(SEARCH_DISPLAY_MODE));\n-        }\n-    }\n-\n-    public SearchPreferences setSearchMode(SearchDisplayMode searchDisplayMode) {\n-        preferences.put(SEARCH_DISPLAY_MODE, Objects.requireNonNull(searchDisplayMode).toString());\n-        return this;\n+    public SearchDisplayMode getSearchDisplayMode() {\n+        return searchDisplayMode;\n     }\n \n     public boolean isCaseSensitive() {\n-        return preferences.getBoolean(SEARCH_CASE_SENSITIVE);\n-    }\n-\n-    public SearchPreferences setCaseSensitive(boolean isCaseSensitive) {\n-        preferences.putBoolean(SEARCH_CASE_SENSITIVE, isCaseSensitive);\n-        return this;\n+        return isCaseSensitive;\n     }\n \n     public boolean isRegularExpression() {\n-        return preferences.getBoolean(SEARCH_REG_EXP);\n+        return isRegularExpression;\n     }\n \n-    public SearchPreferences setRegularExpression(boolean isRegularExpression) {\n-        preferences.putBoolean(SEARCH_REG_EXP, isRegularExpression);\n-        return this;\n+    public Builder getBuilder() {\n+        return new Builder(this);\n     }\n \n-    public int getSeachDialogWidth() {\n-        return preferences.getInt(SEARCH_DIALOG_WIDTH);\n-    }\n+    public static class Builder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8734944bd6ffd7f5f2abbbe6f7d7c0eca670ad28"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUxMjU3Nw==", "bodyText": "I'll change it, I originally just wanted to stick close to the builder pattern, as I don't have much experience on it, so this was somewhat a study project for me \ud83d\ude09", "url": "https://github.com/JabRef/jabref/pull/6682#discussion_r454512577", "createdAt": "2020-07-14T17:12:40Z", "author": {"login": "calixtus"}, "path": "src/main/java/org/jabref/preferences/SearchPreferences.java", "diffHunk": "@@ -1,103 +1,63 @@\n package org.jabref.preferences;\n \n-import java.util.Map;\n-import java.util.Objects;\n-\n import org.jabref.gui.search.SearchDisplayMode;\n \n public class SearchPreferences {\n \n-    private static final String SEARCH_DISPLAY_MODE = \"searchDisplayMode\";\n-    private static final String SEARCH_CASE_SENSITIVE = \"caseSensitiveSearch\";\n-    private static final String SEARCH_REG_EXP = \"regExpSearch\";\n-\n-    private static final String SEARCH_DIALOG_HEIGHT = \"searchDialogHeight\";\n-    private static final String SEARCH_DIALOG_WIDTH = \"searchDialogWidth\";\n-    private static final String SEARCH_DIALOG_POS_X = \"searchDialogPosX\";\n-    private static final String SEARCH_DIALOG_POS_Y = \"searchDialogPosY\";\n+    private final SearchDisplayMode searchDisplayMode;\n+    private final boolean isCaseSensitive;\n+    private final boolean isRegularExpression;\n \n-    private final JabRefPreferences preferences;\n-\n-    public SearchPreferences(JabRefPreferences preferences) {\n-        this.preferences = Objects.requireNonNull(preferences);\n+    public SearchPreferences(SearchDisplayMode searchDisplayMode, boolean isCaseSensitive, boolean isRegularExpression) {\n+        this.searchDisplayMode = searchDisplayMode;\n+        this.isCaseSensitive = isCaseSensitive;\n+        this.isRegularExpression = isRegularExpression;\n     }\n \n-    public static void putDefaults(Map<String, Object> defaults) {\n-        defaults.put(SEARCH_DISPLAY_MODE, SearchDisplayMode.FILTER.toString());\n-        defaults.put(SEARCH_CASE_SENSITIVE, Boolean.FALSE);\n-        defaults.put(SEARCH_REG_EXP, Boolean.FALSE);\n-\n-        defaults.put(SEARCH_DIALOG_WIDTH, 650);\n-        defaults.put(SEARCH_DIALOG_HEIGHT, 500);\n-        defaults.put(SEARCH_DIALOG_POS_X, 0);\n-        defaults.put(SEARCH_DIALOG_POS_Y, 0);\n-    }\n-\n-    public SearchDisplayMode getSearchMode() {\n-        try {\n-            return SearchDisplayMode.valueOf(preferences.get(SEARCH_DISPLAY_MODE));\n-        } catch (IllegalArgumentException ex) {\n-            // Should only occur when the searchmode is set directly via preferences.put and the enum was not used\n-            return SearchDisplayMode.valueOf((String) preferences.defaults.get(SEARCH_DISPLAY_MODE));\n-        }\n-    }\n-\n-    public SearchPreferences setSearchMode(SearchDisplayMode searchDisplayMode) {\n-        preferences.put(SEARCH_DISPLAY_MODE, Objects.requireNonNull(searchDisplayMode).toString());\n-        return this;\n+    public SearchDisplayMode getSearchDisplayMode() {\n+        return searchDisplayMode;\n     }\n \n     public boolean isCaseSensitive() {\n-        return preferences.getBoolean(SEARCH_CASE_SENSITIVE);\n-    }\n-\n-    public SearchPreferences setCaseSensitive(boolean isCaseSensitive) {\n-        preferences.putBoolean(SEARCH_CASE_SENSITIVE, isCaseSensitive);\n-        return this;\n+        return isCaseSensitive;\n     }\n \n     public boolean isRegularExpression() {\n-        return preferences.getBoolean(SEARCH_REG_EXP);\n+        return isRegularExpression;\n     }\n \n-    public SearchPreferences setRegularExpression(boolean isRegularExpression) {\n-        preferences.putBoolean(SEARCH_REG_EXP, isRegularExpression);\n-        return this;\n+    public Builder getBuilder() {\n+        return new Builder(this);\n     }\n \n-    public int getSeachDialogWidth() {\n-        return preferences.getInt(SEARCH_DIALOG_WIDTH);\n-    }\n+    public static class Builder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDMyNDY2Nw=="}, "originalCommit": {"oid": "8734944bd6ffd7f5f2abbbe6f7d7c0eca670ad28"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzgwMzYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/preferences/JabRefPreferences.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDo1OTo0NVrOGx5B2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo1MTo1NFrOGx_Jvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk2Nzc3MQ==", "bodyText": "The get() Method already returns the default if no value:\n public String get(String key) {\n        return prefs.get(key, (String) defaults.get(key));\n    }", "url": "https://github.com/JabRef/jabref/pull/6682#discussion_r454967771", "createdAt": "2020-07-15T10:59:45Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/preferences/JabRefPreferences.java", "diffHunk": "@@ -2356,4 +2363,27 @@ public void storeSpecialFieldsPreferences(SpecialFieldsPreferences specialFields\n         putBoolean(AUTOSYNCSPECIALFIELDSTOKEYWORDS, specialFieldsPreferences.getAutoSyncSpecialFieldsToKeyWords());\n         putBoolean(SERIALIZESPECIALFIELDS, specialFieldsPreferences.getSerializeSpecialFields());\n     }\n+\n+    @Override\n+    public SearchPreferences getSearchPreferences() {\n+        SearchDisplayMode searchDisplayMode;\n+        try {\n+            searchDisplayMode = SearchDisplayMode.valueOf(get(SEARCH_DISPLAY_MODE));\n+        } catch (IllegalArgumentException ex) {\n+            // Should only occur when the searchmode is set directly via preferences.put and the enum was not used\n+            searchDisplayMode = SearchDisplayMode.valueOf((String) defaults.get(SEARCH_DISPLAY_MODE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbba792d6ddf1de519631641df4fa09273553852"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAzNDE1OQ==", "bodyText": "Good catch. I just copied the logic from the former searchpreferences.class. Fixing the missing consistency is one of the big projects in the future...", "url": "https://github.com/JabRef/jabref/pull/6682#discussion_r455034159", "createdAt": "2020-07-15T13:04:10Z", "author": {"login": "calixtus"}, "path": "src/main/java/org/jabref/preferences/JabRefPreferences.java", "diffHunk": "@@ -2356,4 +2363,27 @@ public void storeSpecialFieldsPreferences(SpecialFieldsPreferences specialFields\n         putBoolean(AUTOSYNCSPECIALFIELDSTOKEYWORDS, specialFieldsPreferences.getAutoSyncSpecialFieldsToKeyWords());\n         putBoolean(SERIALIZESPECIALFIELDS, specialFieldsPreferences.getSerializeSpecialFields());\n     }\n+\n+    @Override\n+    public SearchPreferences getSearchPreferences() {\n+        SearchDisplayMode searchDisplayMode;\n+        try {\n+            searchDisplayMode = SearchDisplayMode.valueOf(get(SEARCH_DISPLAY_MODE));\n+        } catch (IllegalArgumentException ex) {\n+            // Should only occur when the searchmode is set directly via preferences.put and the enum was not used\n+            searchDisplayMode = SearchDisplayMode.valueOf((String) defaults.get(SEARCH_DISPLAY_MODE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk2Nzc3MQ=="}, "originalCommit": {"oid": "bbba792d6ddf1de519631641df4fa09273553852"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAzNzQwNQ==", "bodyText": "This was the only issue I found so far,the rest looks good!", "url": "https://github.com/JabRef/jabref/pull/6682#discussion_r455037405", "createdAt": "2020-07-15T13:09:13Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/preferences/JabRefPreferences.java", "diffHunk": "@@ -2356,4 +2363,27 @@ public void storeSpecialFieldsPreferences(SpecialFieldsPreferences specialFields\n         putBoolean(AUTOSYNCSPECIALFIELDSTOKEYWORDS, specialFieldsPreferences.getAutoSyncSpecialFieldsToKeyWords());\n         putBoolean(SERIALIZESPECIALFIELDS, specialFieldsPreferences.getSerializeSpecialFields());\n     }\n+\n+    @Override\n+    public SearchPreferences getSearchPreferences() {\n+        SearchDisplayMode searchDisplayMode;\n+        try {\n+            searchDisplayMode = SearchDisplayMode.valueOf(get(SEARCH_DISPLAY_MODE));\n+        } catch (IllegalArgumentException ex) {\n+            // Should only occur when the searchmode is set directly via preferences.put and the enum was not used\n+            searchDisplayMode = SearchDisplayMode.valueOf((String) defaults.get(SEARCH_DISPLAY_MODE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk2Nzc3MQ=="}, "originalCommit": {"oid": "bbba792d6ddf1de519631641df4fa09273553852"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA1OTY3MA==", "bodyText": "Hmm... I thought about this: what if the returned stored value is defect, but not the default value?", "url": "https://github.com/JabRef/jabref/pull/6682#discussion_r455059670", "createdAt": "2020-07-15T13:40:44Z", "author": {"login": "calixtus"}, "path": "src/main/java/org/jabref/preferences/JabRefPreferences.java", "diffHunk": "@@ -2356,4 +2363,27 @@ public void storeSpecialFieldsPreferences(SpecialFieldsPreferences specialFields\n         putBoolean(AUTOSYNCSPECIALFIELDSTOKEYWORDS, specialFieldsPreferences.getAutoSyncSpecialFieldsToKeyWords());\n         putBoolean(SERIALIZESPECIALFIELDS, specialFieldsPreferences.getSerializeSpecialFields());\n     }\n+\n+    @Override\n+    public SearchPreferences getSearchPreferences() {\n+        SearchDisplayMode searchDisplayMode;\n+        try {\n+            searchDisplayMode = SearchDisplayMode.valueOf(get(SEARCH_DISPLAY_MODE));\n+        } catch (IllegalArgumentException ex) {\n+            // Should only occur when the searchmode is set directly via preferences.put and the enum was not used\n+            searchDisplayMode = SearchDisplayMode.valueOf((String) defaults.get(SEARCH_DISPLAY_MODE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk2Nzc3MQ=="}, "originalCommit": {"oid": "bbba792d6ddf1de519631641df4fa09273553852"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2ODA5NA==", "bodyText": "Why should that happen?  the Prefernces.get says:\n\nthe value associated with key, or def if no value is associated with key, or the backingstore is inaccessible.", "url": "https://github.com/JabRef/jabref/pull/6682#discussion_r455068094", "createdAt": "2020-07-15T13:51:54Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/preferences/JabRefPreferences.java", "diffHunk": "@@ -2356,4 +2363,27 @@ public void storeSpecialFieldsPreferences(SpecialFieldsPreferences specialFields\n         putBoolean(AUTOSYNCSPECIALFIELDSTOKEYWORDS, specialFieldsPreferences.getAutoSyncSpecialFieldsToKeyWords());\n         putBoolean(SERIALIZESPECIALFIELDS, specialFieldsPreferences.getSerializeSpecialFields());\n     }\n+\n+    @Override\n+    public SearchPreferences getSearchPreferences() {\n+        SearchDisplayMode searchDisplayMode;\n+        try {\n+            searchDisplayMode = SearchDisplayMode.valueOf(get(SEARCH_DISPLAY_MODE));\n+        } catch (IllegalArgumentException ex) {\n+            // Should only occur when the searchmode is set directly via preferences.put and the enum was not used\n+            searchDisplayMode = SearchDisplayMode.valueOf((String) defaults.get(SEARCH_DISPLAY_MODE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk2Nzc3MQ=="}, "originalCommit": {"oid": "bbba792d6ddf1de519631641df4fa09273553852"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1776, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}