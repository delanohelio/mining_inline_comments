{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4MDc1NTY1", "number": 6117, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOToxNTo1MlrODoCqZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxOTowMjoyOVrODoIpkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzEzMjUzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/exporter/SaveDatabaseAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOToxNTo1MlrOF2YnPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOToxNTo1MlrOF2YnPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MDY4Nw==", "bodyText": "Why is the database context passed as an method argument? The base panel is already an constructor argument, thus I would expect that the SaveAction always operates on this database. Maybe set the database context in a new field in the constructor?", "url": "https://github.com/JabRef/jabref/pull/6117#discussion_r392570687", "createdAt": "2020-03-14T09:15:52Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/exporter/SaveDatabaseAction.java", "diffHunk": "@@ -161,32 +163,36 @@ private boolean doSave() {\n         }\n     }\n \n-    public boolean save() {\n-        return save(SaveDatabaseMode.NORMAL);\n+    public boolean save(BibDatabaseContext bibDatabaseContext) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3643969d8d8ed408e3df44102f8ce2c906ce2aa"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDExMzQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/exporter/SaveDatabaseAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxOTowMjoyOVrOF2gpHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxOTowMjoyOVrOF2gpHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjcwMjIzNw==", "bodyText": "can we add here a logger instead?\nThe Problems saving often misses the ex", "url": "https://github.com/JabRef/jabref/pull/6117#discussion_r392702237", "createdAt": "2020-03-15T19:02:29Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/gui/exporter/SaveDatabaseAction.java", "diffHunk": "@@ -141,140 +195,88 @@ public boolean save(Path targetPath, SaveDatabaseMode mode) {\n \n             if (success) {\n                 panel.getUndoManager().markUnchanged();\n-                // (Only) after a successful save the following\n-                // statement marks that the base is unchanged\n-                // since last save:\n+                // After a successful save the following statement marks that the base is unchanged since last save\n                 panel.setNonUndoableChange(false);\n                 panel.setBaseChanged(false);\n \n-                frame.setTabTitle(panel, panel.getTabTitle(),\n-                        targetPath.toAbsolutePath().toString());\n+                frame.setTabTitle(panel, panel.getTabTitle(), targetPath.toAbsolutePath().toString());\n                 frame.setWindowTitle();\n                 frame.updateAllTabTitles();\n             }\n             return success;\n         } catch (SaveException ex) {\n-            LOGGER.error(\"A problem occurred when trying to save the file \" + targetPath, ex);\n-            frame.getDialogService().showErrorDialogAndWait(Localization.lang(\"Save library\"), Localization.lang(\"Could not save file.\"), ex);\n+            LOGGER.error(String.format(\"A problem occurred when trying to save the file %s\", targetPath), ex);\n+            dialogService.showErrorDialogAndWait(Localization.lang(\"Save library\"), Localization.lang(\"Could not save file.\"), ex);\n             return false;\n         } finally {\n             // release panel from save status\n             panel.setSaving(false);\n         }\n     }\n \n-    public boolean save(BibDatabaseContext bibDatabaseContext) {\n-        return save(bibDatabaseContext, SaveDatabaseMode.NORMAL);\n-    }\n+    private boolean saveDatabase(Path file, boolean selectedOnly, Charset encoding, SavePreferences.DatabaseSaveType saveType) throws SaveException {\n+        SavePreferences preferences = this.preferences.loadForSaveFromPreferences()\n+                                                      .withEncoding(encoding)\n+                                                      .withSaveType(saveType);\n+        try (AtomicFileWriter fileWriter = new AtomicFileWriter(file, preferences.getEncoding(), preferences.makeBackup())) {\n+            BibtexDatabaseWriter databaseWriter = new BibtexDatabaseWriter(fileWriter, preferences, entryTypesManager);\n \n-    public boolean save(BibDatabaseContext bibDatabaseContext, SaveDatabaseMode mode) {\n-        Optional<Path> databasePath = bibDatabaseContext.getDatabasePath();\n-        if (!databasePath.isPresent()) {\n-            Optional<Path> savePath = askForSavePath();\n-            if (!savePath.isPresent()) {\n-                return false;\n+            if (selectedOnly) {\n+                databaseWriter.savePartOfDatabase(panel.getBibDatabaseContext(), panel.getSelectedEntries());\n+            } else {\n+                databaseWriter.saveDatabase(panel.getBibDatabaseContext());\n             }\n-            return saveAs(savePath.get(), mode);\n-        }\n-\n-        return save(databasePath.get(), mode);\n-    }\n-\n-    /**\n-     * Asks the user for the path and saves afterwards\n-     */\n-    public void saveAs() {\n-        askForSavePath().ifPresent(this::saveAs);\n-    }\n \n-    /**\n-     * Asks the user for the path to save to. Stores the directory to the preferences, which is used next time when opening the dialog.\n-     *\n-     * @return the path set by the user\n-     */\n-    public Optional<Path> askForSavePath() {\n-        FileDialogConfiguration fileDialogConfiguration = new FileDialogConfiguration.Builder()\n-                .addExtensionFilter(StandardFileType.BIBTEX_DB)\n-                .withDefaultExtension(StandardFileType.BIBTEX_DB)\n-                .withInitialDirectory(prefs.get(JabRefPreferences.WORKING_DIRECTORY))\n-                .build();\n-        Optional<Path> selectedPath = dialogService.showFileSaveDialog(fileDialogConfiguration);\n-        selectedPath.ifPresent(path -> prefs.setWorkingDir(path.getParent()));\n-        return selectedPath;\n-    }\n-\n-    public boolean saveAs(Path file) {\n-        return this.saveAs(file, SaveDatabaseMode.NORMAL);\n-    }\n-\n-    /**\n-     * @param file the new file name to save the data base to. This is stored in the database context of the panel upon successful save.\n-     * @return true on successful save\n-     */\n-    public boolean saveAs(Path file, SaveDatabaseMode mode) {\n-        BibDatabaseContext context = panel.getBibDatabaseContext();\n+            panel.registerUndoableChanges(databaseWriter.getSaveActionsFieldChanges());\n \n-        // Close AutosaveManager and BackupManager for original library\n-        Optional<Path> databasePath = context.getDatabasePath();\n-        if (databasePath.isPresent()) {\n-            final Path oldFile = databasePath.get();\n-            context.setDatabasePath(oldFile);\n-            AutosaveManager.shutdown(context);\n-            BackupManager.shutdown(context);\n+            if (fileWriter.hasEncodingProblems()) {\n+                saveWithDifferentEncoding(file, selectedOnly, preferences.getEncoding(), fileWriter.getEncodingProblems(), saveType);\n+            }\n+        } catch (UnsupportedCharsetException ex) {\n+            throw new SaveException(Localization.lang(\"Character encoding '%0' is not supported.\", encoding.displayName()), ex);\n+        } catch (IOException ex) {\n+            throw new SaveException(\"Problems saving:\", ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f9922e62e3a294bd19928227776f327b66158a3"}, "originalPosition": 312}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1994, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}