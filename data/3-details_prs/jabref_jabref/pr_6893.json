{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyMzM3OTQ1", "number": 6893, "title": "Fixes bugs in the `regex` cite key pattern modifier", "bodyText": "There are some bugs in the regex modifier. The following change-list is preliminary,\n\n Formatting with invalid or missing arguments will now return an unmodified String\n A space between the regex and the replacement will be allowed (both (\".\", \"\") and (\".\",\"\") will be considered valid)\n The modifier can replace with an empty string (i.e., remove things)\n\n\n\n Change in CHANGELOG.md described (if applicable)\n Tests created for changes (if applicable)\n Manually tested changed features in running JabRef (always required)\n Screenshots added in PR description (for UI changes)\n Checked documentation: Is the information available and up to date? If not created an issue at https://github.com/JabRef/user-documentation/issues or, even better, submitted a pull request to the documentation repository.", "createdAt": "2020-09-08T22:34:02Z", "url": "https://github.com/JabRef/jabref/pull/6893", "merged": true, "mergeCommit": {"oid": "0da0f0c89c8cecce0280ca640f214ed089dbede5"}, "closed": true, "closedAt": "2020-09-21T21:00:32Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdG_JGCAH2gAyNDgyMzM3OTQ1OjFjMTU2NjViY2FjMjQ3NDcyNGE4MDY0NTNjMTE0YThmMmUwYjFhOTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLE2xhgH2gAyNDgyMzM3OTQ1OmU0Njc0YTcxZTM2OWY5ZDMzMWQzNjY1MTk5YjZmMjc2NTY0M2EyOGY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1c15665bcac2474724a806453c114a8f2e0b1a94", "author": {"user": {"login": "k3KAW8Pnf7mkmdSMPHz27", "name": "Jonatan Asketorp"}}, "url": "https://github.com/JabRef/jabref/commit/1c15665bcac2474724a806453c114a8f2e0b1a94", "committedDate": "2020-09-08T22:14:44Z", "message": "Add regex modifier test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ee994a4d06f15eb2f9712000a25dd6e0f383197", "author": {"user": {"login": "k3KAW8Pnf7mkmdSMPHz27", "name": "Jonatan Asketorp"}}, "url": "https://github.com/JabRef/jabref/commit/6ee994a4d06f15eb2f9712000a25dd6e0f383197", "committedDate": "2020-09-08T22:34:42Z", "message": "Add test case for empty argument"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4cfaf41af76fc86b69e616d0babe6fd9ba01ca96", "author": {"user": {"login": "k3KAW8Pnf7mkmdSMPHz27", "name": "Jonatan Asketorp"}}, "url": "https://github.com/JabRef/jabref/commit/4cfaf41af76fc86b69e616d0babe6fd9ba01ca96", "committedDate": "2020-09-09T14:28:04Z", "message": "Fix handling of constructor argument"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f20a97443cbf344ee285545af1e5e66af5d5c9b", "author": {"user": {"login": "k3KAW8Pnf7mkmdSMPHz27", "name": "Jonatan Asketorp"}}, "url": "https://github.com/JabRef/jabref/commit/3f20a97443cbf344ee285545af1e5e66af5d5c9b", "committedDate": "2020-09-09T14:28:25Z", "message": "Fix JavaDoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1MDc4ODg1", "url": "https://github.com/JabRef/jabref/pull/6893#pullrequestreview-485078885", "createdAt": "2020-09-09T14:38:05Z", "commit": {"oid": "4cfaf41af76fc86b69e616d0babe6fd9ba01ca96"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNDozODowNVrOHPKmkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNDozODowNVrOHPKmkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY2NDQwMw==", "bodyText": "From a performance point of view, this regexp is quite bad. It can be sped up by relying less on matching \".\" and the use of reluctant quantifiers, but I believe this version is more readable.\nI can write a custom \"parser\", which would be more performant, probably easier to understand, and easier to spot errors in. However, I consider custom parsing code harder to change when bugs are found, which is why I did not choose this approach.\nAny comments/nitpickings/suggestions are most welcome!", "url": "https://github.com/JabRef/jabref/pull/6893#discussion_r485664403", "createdAt": "2020-09-09T14:38:05Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/main/java/org/jabref/logic/formatter/bibtexfields/RegexFormatter.java", "diffHunk": "@@ -18,28 +18,37 @@\n     // \\\\ is required to have the { interpreted as character\n     // ? is required to disable the aggressive match\n     private static final Pattern PATTERN_ENCLOSED_IN_CURLY_BRACES = Pattern.compile(\"(\\\\{.*?})\");\n+    private static final String REGEX_CAPTURING_GROUP = \"regex\";\n+    private static final String REPLACEMENT_CAPTURING_GROUP = \"replacement\";\n+    /**\n+     * Matches a valid argument to the constructor. Two capturing groups are used to parse the {@link\n+     * RegexFormatter#regex} and {@link RegexFormatter#replacement} used in {@link RegexFormatter#format(String)}\n+     */\n+    private static final Pattern CONSTRUCTOR_ARGUMENT = Pattern.compile(\n+            \"^\\\\(\\\"(?<\" + REGEX_CAPTURING_GROUP + \">.*?)\\\" *?, *?\\\"(?<\" + REPLACEMENT_CAPTURING_GROUP + \">.*?)\\\"\\\\)$\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cfaf41af76fc86b69e616d0babe6fd9ba01ca96"}, "originalPosition": 11}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc9e3834e9795e18c74a7bcf57930d2771d296f8", "author": {"user": {"login": "k3KAW8Pnf7mkmdSMPHz27", "name": "Jonatan Asketorp"}}, "url": "https://github.com/JabRef/jabref/commit/bc9e3834e9795e18c74a7bcf57930d2771d296f8", "committedDate": "2020-09-09T15:04:25Z", "message": "Add error handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0426d09e6b4ebd973036437d14ce2c1503b0a6df", "author": {"user": {"login": "k3KAW8Pnf7mkmdSMPHz27", "name": "Jonatan Asketorp"}}, "url": "https://github.com/JabRef/jabref/commit/0426d09e6b4ebd973036437d14ce2c1503b0a6df", "committedDate": "2020-09-09T21:37:17Z", "message": "Fix speeding up matching of regex"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMjE5ODYx", "url": "https://github.com/JabRef/jabref/pull/6893#pullrequestreview-492219861", "createdAt": "2020-09-20T20:15:15Z", "commit": {"oid": "0426d09e6b4ebd973036437d14ce2c1503b0a6df"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQyMDoxNToxNVrOHU8y9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQyMDoxODowNFrOHU8z_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcyOTY1NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        LOGGER.warn(\"RegexFormatter could not parse the input: \" + input);\n          \n          \n            \n                        LOGGER.warn(\"RegexFormatter could not parse the input: {}\", input);", "url": "https://github.com/JabRef/jabref/pull/6893#discussion_r491729654", "createdAt": "2020-09-20T20:15:15Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/formatter/bibtexfields/RegexFormatter.java", "diffHunk": "@@ -5,41 +5,56 @@\n import java.util.Objects;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n+import java.util.regex.PatternSyntaxException;\n \n import org.jabref.logic.cleanup.Formatter;\n import org.jabref.logic.l10n.Localization;\n \n-public class RegexFormatter extends Formatter {\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n+public class RegexFormatter extends Formatter {\n     public static final String KEY = \"regex\";\n+    private static final Logger LOGGER = LoggerFactory.getLogger(RegexFormatter.class);\n     private static final Pattern PATTERN_ESCAPED_OPENING_CURLY_BRACE = Pattern.compile(\"\\\\\\\\\\\\{\");\n     private static final Pattern PATTERN_ESCAPED_CLOSING_CURLY_BRACE = Pattern.compile(\"\\\\\\\\\\\\}\");\n     // RegEx to match {...}\n     // \\\\ is required to have the { interpreted as character\n     // ? is required to disable the aggressive match\n     private static final Pattern PATTERN_ENCLOSED_IN_CURLY_BRACES = Pattern.compile(\"(\\\\{.*?})\");\n+    private static final String REGEX_CAPTURING_GROUP = \"regex\";\n+    private static final String REPLACEMENT_CAPTURING_GROUP = \"replacement\";\n+    /**\n+     * Matches a valid argument to the constructor. Two capturing groups are used to parse the {@link\n+     * RegexFormatter#regex} and {@link RegexFormatter#replacement} used in {@link RegexFormatter#format(String)}\n+     */\n+    private static final Pattern CONSTRUCTOR_ARGUMENT = Pattern.compile(\n+            \"^\\\\(\\\"(?<\" + REGEX_CAPTURING_GROUP + \">.*?)\\\" *?, *?\\\"(?<\" + REPLACEMENT_CAPTURING_GROUP + \">.*)\\\"\\\\)$\");\n     // Magic arbitrary unicode char, which will never appear in bibtex files\n     private static final String PLACEHOLDER_FOR_PROTECTED_GROUP = Character.toString('\\u0A14');\n     private static final String PLACEHOLDER_FOR_OPENING_CURLY_BRACE = Character.toString('\\u0A15');\n     private static final String PLACEHOLDER_FOR_CLOSING_CURLY_BRACE = Character.toString('\\u0A16');\n-    private static final String QUOTE_AND_OPENING_BRACE = \"\\\"(\";\n-    private static final int LENGTH_OF_QUOTE_AND_OPENING_BRACE = QUOTE_AND_OPENING_BRACE.length();\n-    private static final String CLOSING_BRACE_AND_QUOTE = \")\\\"\";\n-    private static final int LENGTH_OF_CLOSING_BRACE_AND_QUOTE = CLOSING_BRACE_AND_QUOTE.length();\n-    private static String regex;\n-    private String replacement;\n+    private final String regex;\n+    private final String replacement;\n \n     /**\n      * Constructs a new regular expression-based formatter with the given RegEx.\n      *\n-     * @param input the regular expressions for matching and replacing given in the form {@code (<regex>, <replace>)}.\n+     * @param input the regular expressions for matching and replacing given in the form {@code (\"<regex>\",\n+     *              \"<replace>\")}.\n      */\n     public RegexFormatter(String input) {\n-        // formatting is like (\"exp1\",\"exp2\"), we want to first remove (\" and \")\n-        String rexToSet = input.substring(LENGTH_OF_QUOTE_AND_OPENING_BRACE, input.length() - LENGTH_OF_CLOSING_BRACE_AND_QUOTE);\n-        String[] parts = rexToSet.split(\"\\\",\\\"\");\n-        regex = parts[0];\n-        replacement = parts[1];\n+        Objects.requireNonNull(input);\n+        input = input.trim();\n+        Matcher constructorArgument = CONSTRUCTOR_ARGUMENT.matcher(input);\n+        if (constructorArgument.matches()) {\n+            regex = constructorArgument.group(REGEX_CAPTURING_GROUP);\n+            replacement = constructorArgument.group(REPLACEMENT_CAPTURING_GROUP);\n+        } else {\n+            regex = null;\n+            replacement = null;\n+            LOGGER.warn(\"RegexFormatter could not parse the input: \" + input);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0426d09e6b4ebd973036437d14ce2c1503b0a6df"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcyOTgyNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        LOGGER.warn(\"There is a syntax error in the regular expression, \" +\n          \n          \n            \n                                regex + \", used by the regex modifier\", e);\n          \n          \n            \n                        LOGGER.warn(\"There is a syntax error in the regular expression \\\"{}\\\" used by the regex modifier\", regex, e);", "url": "https://github.com/JabRef/jabref/pull/6893#discussion_r491729827", "createdAt": "2020-09-20T20:16:48Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/formatter/bibtexfields/RegexFormatter.java", "diffHunk": "@@ -60,7 +75,13 @@ private String replaceHonoringProtectedGroups(final String input) {\n             replaced.add(matcher.group(1));\n         }\n         String workingString = matcher.replaceAll(PLACEHOLDER_FOR_PROTECTED_GROUP);\n-        workingString = workingString.replaceAll(regex, replacement);\n+        try {\n+            workingString = workingString.replaceAll(regex, replacement);\n+        } catch (PatternSyntaxException e) {\n+            LOGGER.warn(\"There is a syntax error in the regular expression, \" +\n+                    regex + \", used by the regex modifier\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0426d09e6b4ebd973036437d14ce2c1503b0a6df"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcyOTg3Nw==", "bodyText": "Could you switch to Optional<String> as datatype for regex and replacement? JabRef wants to get rid off null.", "url": "https://github.com/JabRef/jabref/pull/6893#discussion_r491729877", "createdAt": "2020-09-20T20:17:32Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/formatter/bibtexfields/RegexFormatter.java", "diffHunk": "@@ -71,7 +92,7 @@ private String replaceHonoringProtectedGroups(final String input) {\n     @Override\n     public String format(final String input) {\n         Objects.requireNonNull(input);\n-        if (regex == null) {\n+        if (regex == null || replacement == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0426d09e6b4ebd973036437d14ce2c1503b0a6df"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcyOTkxNg==", "bodyText": "While you are on it - could you convert that to a multilinecomment?", "url": "https://github.com/JabRef/jabref/pull/6893#discussion_r491729916", "createdAt": "2020-09-20T20:18:04Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/formatter/bibtexfields/RegexFormatter.java", "diffHunk": "@@ -5,41 +5,56 @@\n import java.util.Objects;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n+import java.util.regex.PatternSyntaxException;\n \n import org.jabref.logic.cleanup.Formatter;\n import org.jabref.logic.l10n.Localization;\n \n-public class RegexFormatter extends Formatter {\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n+public class RegexFormatter extends Formatter {\n     public static final String KEY = \"regex\";\n+    private static final Logger LOGGER = LoggerFactory.getLogger(RegexFormatter.class);\n     private static final Pattern PATTERN_ESCAPED_OPENING_CURLY_BRACE = Pattern.compile(\"\\\\\\\\\\\\{\");\n     private static final Pattern PATTERN_ESCAPED_CLOSING_CURLY_BRACE = Pattern.compile(\"\\\\\\\\\\\\}\");\n     // RegEx to match {...}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0426d09e6b4ebd973036437d14ce2c1503b0a6df"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a491923dcb5add853545b4c8178c687ed0bb8ab5", "author": {"user": {"login": "k3KAW8Pnf7mkmdSMPHz27", "name": "Jonatan Asketorp"}}, "url": "https://github.com/JabRef/jabref/commit/a491923dcb5add853545b4c8178c687ed0bb8ab5", "committedDate": "2020-09-21T12:46:26Z", "message": "Fix logger string\n\nCo-authored-by: Oliver Kopp <kopp.dev@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "721a50c50b02c2b10d56cce2156fc178bd24b99d", "author": {"user": {"login": "k3KAW8Pnf7mkmdSMPHz27", "name": "Jonatan Asketorp"}}, "url": "https://github.com/JabRef/jabref/commit/721a50c50b02c2b10d56cce2156fc178bd24b99d", "committedDate": "2020-09-21T12:46:48Z", "message": "Fix logger string\n\nCo-authored-by: Oliver Kopp <kopp.dev@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c11f4498ec46a5d2816911eb28cf502c170649da", "author": {"user": {"login": "k3KAW8Pnf7mkmdSMPHz27", "name": "Jonatan Asketorp"}}, "url": "https://github.com/JabRef/jabref/commit/c11f4498ec46a5d2816911eb28cf502c170649da", "committedDate": "2020-09-21T14:44:40Z", "message": "Fix readability"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4674a71e369f9d331d3665199b6f2765643a28f", "author": {"user": {"login": "k3KAW8Pnf7mkmdSMPHz27", "name": "Jonatan Asketorp"}}, "url": "https://github.com/JabRef/jabref/commit/e4674a71e369f9d331d3665199b6f2765643a28f", "committedDate": "2020-09-21T15:09:51Z", "message": "Add test case for regex with syntax error"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4971, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}