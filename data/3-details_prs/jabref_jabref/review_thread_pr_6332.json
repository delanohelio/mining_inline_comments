{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NzY4ODk5", "number": 6332, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNjo0ODowN1rOD0U_3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNToxMjoyNVrOD0kAvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTk2NTc0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/model/util/ListUtil.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNjo0ODowN1rOGJOA_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNToxMjo1N1rOGJjrbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMxOTk5OQ==", "bodyText": "Why is this class necessary? I don't see any advantage of the internal java ones", "url": "https://github.com/JabRef/jabref/pull/6332#discussion_r412319999", "createdAt": "2020-04-21T16:48:07Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/model/util/ListUtil.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package org.jabref.model.util;\n+\n+import java.util.function.Predicate;\n+\n+public class ListUtil {\n+    public static <T> boolean anyMatch(Iterable<T> list, Predicate<T> predicate) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e4f6e7d5af326085e504819310187c69309d315"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMyNjYwMg==", "bodyText": "It's about a factor two faster than the streams solution.", "url": "https://github.com/JabRef/jabref/pull/6332#discussion_r412326602", "createdAt": "2020-04-21T16:55:38Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/model/util/ListUtil.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package org.jabref.model.util;\n+\n+import java.util.function.Predicate;\n+\n+public class ListUtil {\n+    public static <T> boolean anyMatch(Iterable<T> list, Predicate<T> predicate) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMxOTk5OQ=="}, "originalCommit": {"oid": "5e4f6e7d5af326085e504819310187c69309d315"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3NDkyNQ==", "bodyText": "Can you just add a JavaDoc, please?\nWould it be possible to add a performance test? So that if we replace this by something with promising performance (e.g., Goldman Sach's Collections), we can easily check which one is faster.", "url": "https://github.com/JabRef/jabref/pull/6332#discussion_r412674925", "createdAt": "2020-04-22T05:12:57Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/model/util/ListUtil.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package org.jabref.model.util;\n+\n+import java.util.function.Predicate;\n+\n+public class ListUtil {\n+    public static <T> boolean anyMatch(Iterable<T> list, Predicate<T> predicate) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMxOTk5OQ=="}, "originalCommit": {"oid": "5e4f6e7d5af326085e504819310187c69309d315"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDQwMDkxOnYy", "diffSide": "RIGHT", "path": ".idea/runConfigurations/JabRef_Main.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNTowMjoxNVrOGJjdfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMTo1MzozOFrOGJyUGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3MTM1Nw==", "bodyText": "This is not related to this PR, is it?", "url": "https://github.com/JabRef/jabref/pull/6332#discussion_r412671357", "createdAt": "2020-04-22T05:02:15Z", "author": {"login": "koppor"}, "path": ".idea/runConfigurations/JabRef_Main.xml", "diffHunk": "@@ -2,6 +2,7 @@\n   <configuration default=\"false\" name=\"JabRef Main\" type=\"Application\" factoryName=\"Application\" singleton=\"false\">\n     <option name=\"MAIN_CLASS_NAME\" value=\"org.jabref.JabRefMain\" />\n     <module name=\"JabRef.main\" />\n+    <option name=\"REDIRECT_INPUT\" value=\"true\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e4f6e7d5af326085e504819310187c69309d315"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjkxNDcxMw==", "bodyText": "Not directly...was added by intellj automatically.", "url": "https://github.com/JabRef/jabref/pull/6332#discussion_r412914713", "createdAt": "2020-04-22T11:53:38Z", "author": {"login": "tobiasdiez"}, "path": ".idea/runConfigurations/JabRef_Main.xml", "diffHunk": "@@ -2,6 +2,7 @@\n   <configuration default=\"false\" name=\"JabRef Main\" type=\"Application\" factoryName=\"Application\" singleton=\"false\">\n     <option name=\"MAIN_CLASS_NAME\" value=\"org.jabref.JabRefMain\" />\n     <module name=\"JabRef.main\" />\n+    <option name=\"REDIRECT_INPUT\" value=\"true\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3MTM1Nw=="}, "originalCommit": {"oid": "5e4f6e7d5af326085e504819310187c69309d315"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDQwMzY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/maintable/BibEntryTableViewModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNTowMzoxN1rOGJje9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNTowMzoxN1rOGJje9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3MTczNA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/JabRef/jabref/pull/6332#discussion_r412671734", "createdAt": "2020-04-22T05:03:17Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/gui/maintable/BibEntryTableViewModel.java", "diffHunk": "@@ -41,10 +39,10 @@\n     private final ObjectBinding<Map<Field, String>> linkedIdentifiers;\n     private final ObservableValue<List<AbstractGroup>> matchedGroups;\n \n-    public BibEntryTableViewModel(BibEntry entry, BibDatabaseContext database) {\n+    public BibEntryTableViewModel(BibEntry entry, BibDatabaseContext database, MainTableNameFormatter nameFormatter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e4f6e7d5af326085e504819310187c69309d315"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDQwNzAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/importer/ParserResult.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNTowNDo1MlrOGJjgxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMTo1NDoyMFrOGJyV8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3MjE5OA==", "bodyText": "This is a kind of taste, isn't it? - Would assume that the Builder pattern would be preferred.", "url": "https://github.com/JabRef/jabref/pull/6332#discussion_r412672198", "createdAt": "2020-04-22T05:04:52Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/importer/ParserResult.java", "diffHunk": "@@ -35,7 +34,7 @@ public ParserResult() {\n     }\n \n     public ParserResult(Collection<BibEntry> entries) {\n-        this(BibDatabases.createDatabase(BibDatabases.purgeEmptyEntries(entries)));\n+        this(new BibDatabase(BibDatabases.purgeEmptyEntries(entries)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e4f6e7d5af326085e504819310187c69309d315"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjkxNTE4NA==", "bodyText": "Builder pattern for a constructor with one argument seems a bit overkill, don't you think?", "url": "https://github.com/JabRef/jabref/pull/6332#discussion_r412915184", "createdAt": "2020-04-22T11:54:20Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/logic/importer/ParserResult.java", "diffHunk": "@@ -35,7 +34,7 @@ public ParserResult() {\n     }\n \n     public ParserResult(Collection<BibEntry> entries) {\n-        this(BibDatabases.createDatabase(BibDatabases.purgeEmptyEntries(entries)));\n+        this(new BibDatabase(BibDatabases.purgeEmptyEntries(entries)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3MjE5OA=="}, "originalCommit": {"oid": "5e4f6e7d5af326085e504819310187c69309d315"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDQxMDEyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/model/database/BibDatabase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNTowNjowNlrOGJjiag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNTowNjowNlrOGJjiag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3MjYxOA==", "bodyText": "Finally \ud83c\udf89", "url": "https://github.com/JabRef/jabref/pull/6332#discussion_r412672618", "createdAt": "2020-04-22T05:06:06Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/model/database/BibDatabase.java", "diffHunk": "@@ -169,46 +169,35 @@ public boolean containsEntryWithId(String id) {\n     }\n \n     /**\n-     * Inserts the entry, given that its ID is not already in use.\n-     * use Util.createId(...) to make up a unique ID for an entry.\n+     * Inserts the entry.\n      *\n-     * @param entry BibEntry to insert into the database\n-     * @return false if the insert was done without a duplicate warning\n-     * @throws KeyCollisionException thrown if the entry id ({@link BibEntry#getId()}) is already  present in the database\n+     * @param entry entry to insert\n      */\n-    public synchronized boolean insertEntry(BibEntry entry) throws KeyCollisionException {\n-        return insertEntry(entry, EntriesEventSource.LOCAL);\n+    public synchronized void insertEntry(BibEntry entry) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e4f6e7d5af326085e504819310187c69309d315"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDQyMDg3OnYy", "diffSide": "LEFT", "path": "src/main/java/org/jabref/model/entry/field/InternalField.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNToxMDo0M1rOGJjoUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMjowMTo0MFrOGJyoqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3NDEzMQ==", "bodyText": "Wasn't the samentics of \"InternalField\" that is a field introduced by JabRef? (The class should be ranamed to JabRefSuperPowerFields (when going extreme).\nOWNER and TIMESTAMP are \"normal\" BibTeX fields - just introdced by JabRef.\nIf we move GROUPS to StandardField, we should move the other two, too.\n@stefan-kolb What's your take on this?", "url": "https://github.com/JabRef/jabref/pull/6332#discussion_r412674131", "createdAt": "2020-04-22T05:10:43Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/model/entry/field/InternalField.java", "diffHunk": "@@ -12,7 +12,6 @@\n public enum InternalField implements Field {\n     OWNER(\"owner\"),\n     TIMESTAMP(\"timestamp\", FieldProperty.DATE),\n-    GROUPS(\"groups\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e4f6e7d5af326085e504819310187c69309d315"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcxNzAwNg==", "bodyText": "Probably JabrefCustomFields, CustomFields?", "url": "https://github.com/JabRef/jabref/pull/6332#discussion_r412717006", "createdAt": "2020-04-22T06:52:44Z", "author": {"login": "stefan-kolb"}, "path": "src/main/java/org/jabref/model/entry/field/InternalField.java", "diffHunk": "@@ -12,7 +12,6 @@\n public enum InternalField implements Field {\n     OWNER(\"owner\"),\n     TIMESTAMP(\"timestamp\", FieldProperty.DATE),\n-    GROUPS(\"groups\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3NDEzMQ=="}, "originalCommit": {"oid": "5e4f6e7d5af326085e504819310187c69309d315"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjkxOTk3OQ==", "bodyText": "I now moved all three (group, owner, timestamp) to standard fields. They need to be grouped with the other fields in one enum to use the power of the enummap. Now the \"StandardField\" refers to a field that is a normal field for JabRef.", "url": "https://github.com/JabRef/jabref/pull/6332#discussion_r412919979", "createdAt": "2020-04-22T12:01:40Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/model/entry/field/InternalField.java", "diffHunk": "@@ -12,7 +12,6 @@\n public enum InternalField implements Field {\n     OWNER(\"owner\"),\n     TIMESTAMP(\"timestamp\", FieldProperty.DATE),\n-    GROUPS(\"groups\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3NDEzMQ=="}, "originalCommit": {"oid": "5e4f6e7d5af326085e504819310187c69309d315"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDQyMTQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/model/entry/field/StandardField.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNToxMDo1M1rOGJjonQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNToxMDo1M1rOGJjonQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3NDIwNQ==", "bodyText": "The comment also states, it should left in InternalFields.", "url": "https://github.com/JabRef/jabref/pull/6332#discussion_r412674205", "createdAt": "2020-04-22T05:10:53Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/model/entry/field/StandardField.java", "diffHunk": "@@ -124,7 +124,10 @@\n     YEARFILED(\"yearfiled\"),\n     MR_NUMBER(\"mrnumber\"),\n     XDATA(\"xdata\", FieldProperty.MULTIPLE_ENTRY_LINK),\n-    XREF(\"xref\", FieldProperty.SINGLE_ENTRY_LINK);\n+    XREF(\"xref\", FieldProperty.SINGLE_ENTRY_LINK),\n+\n+    // JabRef-specific fields", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e4f6e7d5af326085e504819310187c69309d315"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDQyNTU4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/model/groups/WordKeywordGroup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNToxMjoyNVrOGJjqwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMjowMjo1OVrOGJyrqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3NDc1Mg==", "bodyText": "I would put the class in a seperate .java class. This would also enable testing with ...Test.java files.", "url": "https://github.com/JabRef/jabref/pull/6332#discussion_r412674752", "createdAt": "2020-04-22T05:12:25Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/model/groups/WordKeywordGroup.java", "diffHunk": "@@ -148,4 +136,59 @@ public int hashCode() {\n                 keywordSeparator,\n                 onlySplitWordsAtSeparator);\n     }\n+\n+    interface SearchStrategy {\n+        boolean contains(BibEntry entry);\n+    }\n+\n+    class StringSearchStrategy implements SearchStrategy {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e4f6e7d5af326085e504819310187c69309d315"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjkyMDc0NA==", "bodyText": "This is more an implementation detail which shouldn't exposed to the outside world in my opinion. Moreover, private variables are used which makes extraction awkward.", "url": "https://github.com/JabRef/jabref/pull/6332#discussion_r412920744", "createdAt": "2020-04-22T12:02:59Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/model/groups/WordKeywordGroup.java", "diffHunk": "@@ -148,4 +136,59 @@ public int hashCode() {\n                 keywordSeparator,\n                 onlySplitWordsAtSeparator);\n     }\n+\n+    interface SearchStrategy {\n+        boolean contains(BibEntry entry);\n+    }\n+\n+    class StringSearchStrategy implements SearchStrategy {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3NDc1Mg=="}, "originalCommit": {"oid": "5e4f6e7d5af326085e504819310187c69309d315"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1935, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}