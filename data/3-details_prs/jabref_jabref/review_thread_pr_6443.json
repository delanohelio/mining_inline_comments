{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0ODk0NzA2", "number": 6443, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNzoxNzo0MlrOD6iuaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMTowNjo0MFrOD7mc3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNzEyOTM3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/StateManager.java", "isResolved": false, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNzoxNzo0MlrOGSb6ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMTozODowMlrOGSipQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk4NDkwNg==", "bodyText": "For the bindings to update, you need to add the list as a dependency (second argument of the createXBinding method). In the case of lists, however, its easier to use EasyBind.combine: https://github.com/TomasMikula/EasyBind#combine-list", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r421984906", "createdAt": "2020-05-08T07:17:42Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/StateManager.java", "diffHunk": "@@ -112,4 +118,20 @@ public void setSearchQuery(SearchQuery searchQuery) {\n     public OptionalObjectProperty<Node> focusOwnerProperty() { return focusOwner; }\n \n     public Optional<Node> getFocusOwner() { return focusOwner.get(); }\n+\n+    public UiThreadObservableList<Task> getBackgroundTasks() {\n+        return backgroundTasks;\n+    }\n+\n+    public void addBackgroundTask(Task backgroundTask) {\n+        this.backgroundTasks.add(backgroundTask);\n+    }\n+\n+    public BooleanBinding anyTaskRunningBinding = Bindings.createBooleanBinding(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fd181130c8d6d4e7f848cb2aebddb4c41e9baf5"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjAxNjc2Ng==", "bodyText": "Aha, that looks useful.\nHowever, I think I am running into some typing issues which I am struggling to resolve.\nWith the library you pointed me to, I wound up with the following:\npublic Binding<Boolean> anyTaskRunningBinding = EasyBind.combine( backgroundTasks, stream -> stream.anyMatch(Task::getProgress) );\nThis gives me an error that it expects a Binding, but gets a MonadicBinding.\nIf I just cast it, I get the following:\nno instance(s) of type variable(s) T exist so that Task conforms to ObservableValue<? extends T>\nI think this is the issue I need to resolve first. As the example in the library works fine, I guess the conversion from MonadicBinding to Binding is then done implicitly, is that correct?\nI struggle solving this because I dont know the type parameter of the tasks I am storing.\nWhen storing, the Task has type V:\nhttps://github.com/btut/jabref/blob/b8834914e5e735abaa7a710216888abe6bf54277/src/main/java/org/jabref/gui/util/DefaultTaskExecutor.java#L99-L104\nBut in the list I just use Task:\nhttps://github.com/btut/jabref/blob/b8834914e5e735abaa7a710216888abe6bf54277/src/main/java/org/jabref/gui/StateManager.java#L49\nHow do I need to change the list in order for it to work?", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422016766", "createdAt": "2020-05-08T08:29:01Z", "author": {"login": "btut"}, "path": "src/main/java/org/jabref/gui/StateManager.java", "diffHunk": "@@ -112,4 +118,20 @@ public void setSearchQuery(SearchQuery searchQuery) {\n     public OptionalObjectProperty<Node> focusOwnerProperty() { return focusOwner; }\n \n     public Optional<Node> getFocusOwner() { return focusOwner.get(); }\n+\n+    public UiThreadObservableList<Task> getBackgroundTasks() {\n+        return backgroundTasks;\n+    }\n+\n+    public void addBackgroundTask(Task backgroundTask) {\n+        this.backgroundTasks.add(backgroundTask);\n+    }\n+\n+    public BooleanBinding anyTaskRunningBinding = Bindings.createBooleanBinding(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk4NDkwNg=="}, "originalCommit": {"oid": "6fd181130c8d6d4e7f848cb2aebddb4c41e9baf5"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjAyMTI1Mw==", "bodyText": "Add the generics to the Task as welll:\n    private final UiThreadObservableList<Task<V>> backgroundTasks = new UiThreadObservableList(FXCollections.observableArrayList());", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422021253", "createdAt": "2020-05-08T08:39:01Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/gui/StateManager.java", "diffHunk": "@@ -112,4 +118,20 @@ public void setSearchQuery(SearchQuery searchQuery) {\n     public OptionalObjectProperty<Node> focusOwnerProperty() { return focusOwner; }\n \n     public Optional<Node> getFocusOwner() { return focusOwner.get(); }\n+\n+    public UiThreadObservableList<Task> getBackgroundTasks() {\n+        return backgroundTasks;\n+    }\n+\n+    public void addBackgroundTask(Task backgroundTask) {\n+        this.backgroundTasks.add(backgroundTask);\n+    }\n+\n+    public BooleanBinding anyTaskRunningBinding = Bindings.createBooleanBinding(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk4NDkwNg=="}, "originalCommit": {"oid": "6fd181130c8d6d4e7f848cb2aebddb4c41e9baf5"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjAyMjk3Nw==", "bodyText": "But where would I get the V from in this case?\nCannot resolve symbol 'V'", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422022977", "createdAt": "2020-05-08T08:42:53Z", "author": {"login": "btut"}, "path": "src/main/java/org/jabref/gui/StateManager.java", "diffHunk": "@@ -112,4 +118,20 @@ public void setSearchQuery(SearchQuery searchQuery) {\n     public OptionalObjectProperty<Node> focusOwnerProperty() { return focusOwner; }\n \n     public Optional<Node> getFocusOwner() { return focusOwner.get(); }\n+\n+    public UiThreadObservableList<Task> getBackgroundTasks() {\n+        return backgroundTasks;\n+    }\n+\n+    public void addBackgroundTask(Task backgroundTask) {\n+        this.backgroundTasks.add(backgroundTask);\n+    }\n+\n+    public BooleanBinding anyTaskRunningBinding = Bindings.createBooleanBinding(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk4NDkwNg=="}, "originalCommit": {"oid": "6fd181130c8d6d4e7f848cb2aebddb4c41e9baf5"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjAzNjE2Mg==", "bodyText": "I changed it to Task<?> now and now the progress, title and message properties make their way through to the dialogue.\nI still cannot create the bindings for the progress indicator though.", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422036162", "createdAt": "2020-05-08T09:12:04Z", "author": {"login": "btut"}, "path": "src/main/java/org/jabref/gui/StateManager.java", "diffHunk": "@@ -112,4 +118,20 @@ public void setSearchQuery(SearchQuery searchQuery) {\n     public OptionalObjectProperty<Node> focusOwnerProperty() { return focusOwner; }\n \n     public Optional<Node> getFocusOwner() { return focusOwner.get(); }\n+\n+    public UiThreadObservableList<Task> getBackgroundTasks() {\n+        return backgroundTasks;\n+    }\n+\n+    public void addBackgroundTask(Task backgroundTask) {\n+        this.backgroundTasks.add(backgroundTask);\n+    }\n+\n+    public BooleanBinding anyTaskRunningBinding = Bindings.createBooleanBinding(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk4NDkwNg=="}, "originalCommit": {"oid": "6fd181130c8d6d4e7f848cb2aebddb4c41e9baf5"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjAzNzY3Mw==", "bodyText": "That change also allows me to use EasyBind's listBind to bind the task list in the view to the task list in StateManager.", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422037673", "createdAt": "2020-05-08T09:15:29Z", "author": {"login": "btut"}, "path": "src/main/java/org/jabref/gui/StateManager.java", "diffHunk": "@@ -112,4 +118,20 @@ public void setSearchQuery(SearchQuery searchQuery) {\n     public OptionalObjectProperty<Node> focusOwnerProperty() { return focusOwner; }\n \n     public Optional<Node> getFocusOwner() { return focusOwner.get(); }\n+\n+    public UiThreadObservableList<Task> getBackgroundTasks() {\n+        return backgroundTasks;\n+    }\n+\n+    public void addBackgroundTask(Task backgroundTask) {\n+        this.backgroundTasks.add(backgroundTask);\n+    }\n+\n+    public BooleanBinding anyTaskRunningBinding = Bindings.createBooleanBinding(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk4NDkwNg=="}, "originalCommit": {"oid": "6fd181130c8d6d4e7f848cb2aebddb4c41e9baf5"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA0MDgyNQ==", "bodyText": "Here is the first peak at a download in the dialogue (which will probably be changed to a popover later). As you can see, the download task has it's title and message set and progress is updated fine. However, there are still a lot of tasks that do not have any details.", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422040825", "createdAt": "2020-05-08T09:22:43Z", "author": {"login": "btut"}, "path": "src/main/java/org/jabref/gui/StateManager.java", "diffHunk": "@@ -112,4 +118,20 @@ public void setSearchQuery(SearchQuery searchQuery) {\n     public OptionalObjectProperty<Node> focusOwnerProperty() { return focusOwner; }\n \n     public Optional<Node> getFocusOwner() { return focusOwner.get(); }\n+\n+    public UiThreadObservableList<Task> getBackgroundTasks() {\n+        return backgroundTasks;\n+    }\n+\n+    public void addBackgroundTask(Task backgroundTask) {\n+        this.backgroundTasks.add(backgroundTask);\n+    }\n+\n+    public BooleanBinding anyTaskRunningBinding = Bindings.createBooleanBinding(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk4NDkwNg=="}, "originalCommit": {"oid": "6fd181130c8d6d4e7f848cb2aebddb4c41e9baf5"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA2MTYwMg==", "bodyText": "Looks good already!\nThere are a lot of tasks which don't concern file downloads and just perform some operations in the background. If you search for all references from backgrond task you probably have to adjust each one to add a meaningful description", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422061602", "createdAt": "2020-05-08T10:11:09Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/gui/StateManager.java", "diffHunk": "@@ -112,4 +118,20 @@ public void setSearchQuery(SearchQuery searchQuery) {\n     public OptionalObjectProperty<Node> focusOwnerProperty() { return focusOwner; }\n \n     public Optional<Node> getFocusOwner() { return focusOwner.get(); }\n+\n+    public UiThreadObservableList<Task> getBackgroundTasks() {\n+        return backgroundTasks;\n+    }\n+\n+    public void addBackgroundTask(Task backgroundTask) {\n+        this.backgroundTasks.add(backgroundTask);\n+    }\n+\n+    public BooleanBinding anyTaskRunningBinding = Bindings.createBooleanBinding(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk4NDkwNg=="}, "originalCommit": {"oid": "6fd181130c8d6d4e7f848cb2aebddb4c41e9baf5"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA4ODIxOQ==", "bodyText": "I think that should be doable. But before I do that: is it a good idea to have all background tasks listed? Or should we just show downloads? If we go with the first option, I suggest turning off the retain-tasks feature of the task view. Then, all completed tasks will automatically disappear. This way we have less tasks that only ran for a very little time filling up the view.\nI got the bindings to work by storing a list of Property<Task> Instead of Task. That does the trick for the progress indicator. It now is indeterminate when one of the tasks has an indeterminate progress and shows the average progress otherwise (100% if no tasks are running).\nFor some reason, this breaks the task view. Since I now store a list of properties, and not a list of tasks, I cannot bind them directly to the view, so I went back to doing it manually, but that does not seem to work.\nhttps://github.com/btut/jabref/blob/38dd89dce28b72d195de18b848b011532ef1f868/src/main/java/org/jabref/gui/taskprogressmanager/TaskProgressDialog.java#L34-L47", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422088219", "createdAt": "2020-05-08T11:19:58Z", "author": {"login": "btut"}, "path": "src/main/java/org/jabref/gui/StateManager.java", "diffHunk": "@@ -112,4 +118,20 @@ public void setSearchQuery(SearchQuery searchQuery) {\n     public OptionalObjectProperty<Node> focusOwnerProperty() { return focusOwner; }\n \n     public Optional<Node> getFocusOwner() { return focusOwner.get(); }\n+\n+    public UiThreadObservableList<Task> getBackgroundTasks() {\n+        return backgroundTasks;\n+    }\n+\n+    public void addBackgroundTask(Task backgroundTask) {\n+        this.backgroundTasks.add(backgroundTask);\n+    }\n+\n+    public BooleanBinding anyTaskRunningBinding = Bindings.createBooleanBinding(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk4NDkwNg=="}, "originalCommit": {"oid": "6fd181130c8d6d4e7f848cb2aebddb4c41e9baf5"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA5NTE2OQ==", "bodyText": "Now I just converted the list of properties back into a list of tasks using EasyBind and the bind that list to the list of tasks in the view (again using EasyBind). Now both the indicator and the dialogue work fine and are updated with the running tasks!", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422095169", "createdAt": "2020-05-08T11:38:02Z", "author": {"login": "btut"}, "path": "src/main/java/org/jabref/gui/StateManager.java", "diffHunk": "@@ -112,4 +118,20 @@ public void setSearchQuery(SearchQuery searchQuery) {\n     public OptionalObjectProperty<Node> focusOwnerProperty() { return focusOwner; }\n \n     public Optional<Node> getFocusOwner() { return focusOwner.get(); }\n+\n+    public UiThreadObservableList<Task> getBackgroundTasks() {\n+        return backgroundTasks;\n+    }\n+\n+    public void addBackgroundTask(Task backgroundTask) {\n+        this.backgroundTasks.add(backgroundTask);\n+    }\n+\n+    public BooleanBinding anyTaskRunningBinding = Bindings.createBooleanBinding(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk4NDkwNg=="}, "originalCommit": {"oid": "6fd181130c8d6d4e7f848cb2aebddb4c41e9baf5"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNzE0MTc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/JabRefFrame.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNzoyMjowMFrOGScB-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMzoxNTo0N1rOGSlJOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk4NjgwOA==", "bodyText": "Instead of using a real dialog, what about using a collapse overlay similar to how it's done in firefox?\nhttps://github.com/controlsfx/controlsfx/wiki/ControlsFX-Features#popover", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r421986808", "createdAt": "2020-05-08T07:22:00Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/JabRefFrame.java", "diffHunk": "@@ -921,6 +930,24 @@ private MenuBar createMenu() {\n         return menu;\n     }\n \n+    private ProgressIndicator createTaskIndicator() {\n+        ProgressIndicator indicator = new ProgressIndicator(1);\n+        indicator.progressProperty().bind(stateManager.tasksProgressBinding);\n+\n+        indicator.setOnMouseClicked(new EventHandler<MouseEvent>() {\n+            @Override\n+            public void handle(MouseEvent event) {\n+                TaskProgressDialog taskProgressDialog = new TaskProgressDialog();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fd181130c8d6d4e7f848cb2aebddb4c41e9baf5"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjAxNjk2MA==", "bodyText": "Uh fancy! I'll look into it!", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422016960", "createdAt": "2020-05-08T08:29:27Z", "author": {"login": "btut"}, "path": "src/main/java/org/jabref/gui/JabRefFrame.java", "diffHunk": "@@ -921,6 +930,24 @@ private MenuBar createMenu() {\n         return menu;\n     }\n \n+    private ProgressIndicator createTaskIndicator() {\n+        ProgressIndicator indicator = new ProgressIndicator(1);\n+        indicator.progressProperty().bind(stateManager.tasksProgressBinding);\n+\n+        indicator.setOnMouseClicked(new EventHandler<MouseEvent>() {\n+            @Override\n+            public void handle(MouseEvent event) {\n+                TaskProgressDialog taskProgressDialog = new TaskProgressDialog();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk4NjgwOA=="}, "originalCommit": {"oid": "6fd181130c8d6d4e7f848cb2aebddb4c41e9baf5"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjEzNjEyMw==", "bodyText": "That looks much better! Great idea!", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422136123", "createdAt": "2020-05-08T13:15:47Z", "author": {"login": "btut"}, "path": "src/main/java/org/jabref/gui/JabRefFrame.java", "diffHunk": "@@ -921,6 +930,24 @@ private MenuBar createMenu() {\n         return menu;\n     }\n \n+    private ProgressIndicator createTaskIndicator() {\n+        ProgressIndicator indicator = new ProgressIndicator(1);\n+        indicator.progressProperty().bind(stateManager.tasksProgressBinding);\n+\n+        indicator.setOnMouseClicked(new EventHandler<MouseEvent>() {\n+            @Override\n+            public void handle(MouseEvent event) {\n+                TaskProgressDialog taskProgressDialog = new TaskProgressDialog();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk4NjgwOA=="}, "originalCommit": {"oid": "6fd181130c8d6d4e7f848cb2aebddb4c41e9baf5"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDY4NjA0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/StateManager.java", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxNjo1MjoyN1rOGS8h3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQyMDozNjowOVrOGS9_Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUxOTI2Mg==", "bodyText": "What's the reason to wrap the tasks around in a ObjectProperty? It should also work without this wrapper. If there were problems with the updates, you might need to add an \"extractor\" to the observableArrayList which specifies that the list should update if the underlying data changes (in this case probably the progress of the task).", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422519262", "createdAt": "2020-05-09T16:52:27Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/StateManager.java", "diffHunk": "@@ -41,6 +48,7 @@\n     private final OptionalObjectProperty<SearchQuery> activeSearchQuery = OptionalObjectProperty.empty();\n     private final ObservableMap<BibDatabaseContext, IntegerProperty> searchResultMap = FXCollections.observableHashMap();\n     private final OptionalObjectProperty<Node> focusOwner = OptionalObjectProperty.empty();\n+    private final UiThreadObservableList<ObjectProperty<Task<?>>> backgroundTasks = new UiThreadObservableList(FXCollections.observableArrayList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f525b8a2956070f1cb92ed2848df6ea776db342"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUyMjU4NA==", "bodyText": "I'm confused. I though EasyBind's combineList takes care of updating the observable when the progress updates? From the doc:\n\nTurns an observable list of observable values into a single observable value. The resulting observable value is updated when elements are added or removed to or from the list, as well as when element values change.\n\nI had to turn it into a list of ObjectProperty because that's what EasyBind's combineList expects, but I guess it then only registers changes of the ObjectProperty, not the task.\nSo to update upon progress changes, I need to tell the list that I am interested in the progress by defining an extractor. I found some code online working with extractors, so I think I should be able to implement that.", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422522584", "createdAt": "2020-05-09T17:23:22Z", "author": {"login": "btut"}, "path": "src/main/java/org/jabref/gui/StateManager.java", "diffHunk": "@@ -41,6 +48,7 @@\n     private final OptionalObjectProperty<SearchQuery> activeSearchQuery = OptionalObjectProperty.empty();\n     private final ObservableMap<BibDatabaseContext, IntegerProperty> searchResultMap = FXCollections.observableHashMap();\n     private final OptionalObjectProperty<Node> focusOwner = OptionalObjectProperty.empty();\n+    private final UiThreadObservableList<ObjectProperty<Task<?>>> backgroundTasks = new UiThreadObservableList(FXCollections.observableArrayList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUxOTI2Mg=="}, "originalCommit": {"oid": "8f525b8a2956070f1cb92ed2848df6ea776db342"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUyNDI3MQ==", "bodyText": "Yes, combineList takes updates into account but for this the elements have to observable themselves. For example, if ObservableList<ObservableDoubleValue> is a list containing the progress property of each task.", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422524271", "createdAt": "2020-05-09T17:38:45Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/StateManager.java", "diffHunk": "@@ -41,6 +48,7 @@\n     private final OptionalObjectProperty<SearchQuery> activeSearchQuery = OptionalObjectProperty.empty();\n     private final ObservableMap<BibDatabaseContext, IntegerProperty> searchResultMap = FXCollections.observableHashMap();\n     private final OptionalObjectProperty<Node> focusOwner = OptionalObjectProperty.empty();\n+    private final UiThreadObservableList<ObjectProperty<Task<?>>> backgroundTasks = new UiThreadObservableList(FXCollections.observableArrayList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUxOTI2Mg=="}, "originalCommit": {"oid": "8f525b8a2956070f1cb92ed2848df6ea776db342"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUyNDcxMA==", "bodyText": "Thanks for the hints. This works!", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422524710", "createdAt": "2020-05-09T17:43:12Z", "author": {"login": "btut"}, "path": "src/main/java/org/jabref/gui/StateManager.java", "diffHunk": "@@ -41,6 +48,7 @@\n     private final OptionalObjectProperty<SearchQuery> activeSearchQuery = OptionalObjectProperty.empty();\n     private final ObservableMap<BibDatabaseContext, IntegerProperty> searchResultMap = FXCollections.observableHashMap();\n     private final OptionalObjectProperty<Node> focusOwner = OptionalObjectProperty.empty();\n+    private final UiThreadObservableList<ObjectProperty<Task<?>>> backgroundTasks = new UiThreadObservableList(FXCollections.observableArrayList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUxOTI2Mg=="}, "originalCommit": {"oid": "8f525b8a2956070f1cb92ed2848df6ea776db342"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUyOTIwMQ==", "bodyText": "About the ObjectProperty wrapping issue. I tried changing it back just to see what happens, and I still get the same error for the bindings:\n\nno instance(s) of type variable(s) T exist so that Task<?> conforms to ObservableValue<? extends T>\n\nI think that the combine method only works on lists of observables.\nIf I create the binding with Bindings.createDoubleBinding, it does not update.", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422529201", "createdAt": "2020-05-09T18:23:58Z", "author": {"login": "btut"}, "path": "src/main/java/org/jabref/gui/StateManager.java", "diffHunk": "@@ -41,6 +48,7 @@\n     private final OptionalObjectProperty<SearchQuery> activeSearchQuery = OptionalObjectProperty.empty();\n     private final ObservableMap<BibDatabaseContext, IntegerProperty> searchResultMap = FXCollections.observableHashMap();\n     private final OptionalObjectProperty<Node> focusOwner = OptionalObjectProperty.empty();\n+    private final UiThreadObservableList<ObjectProperty<Task<?>>> backgroundTasks = new UiThreadObservableList(FXCollections.observableArrayList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUxOTI2Mg=="}, "originalCommit": {"oid": "8f525b8a2956070f1cb92ed2848df6ea776db342"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUzMTQ0NA==", "bodyText": "So\npublic Binding<Double> tasksProgressBinding = Bindings.createDoubleBinding(\n            backgroundTasks.filter(Task::isRunning).mapToDouble(Task::getProgress).average().orElse(1), backgroundTasks);`\ndoesn't work?", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422531444", "createdAt": "2020-05-09T18:44:02Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/StateManager.java", "diffHunk": "@@ -41,6 +48,7 @@\n     private final OptionalObjectProperty<SearchQuery> activeSearchQuery = OptionalObjectProperty.empty();\n     private final ObservableMap<BibDatabaseContext, IntegerProperty> searchResultMap = FXCollections.observableHashMap();\n     private final OptionalObjectProperty<Node> focusOwner = OptionalObjectProperty.empty();\n+    private final UiThreadObservableList<ObjectProperty<Task<?>>> backgroundTasks = new UiThreadObservableList(FXCollections.observableArrayList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUxOTI2Mg=="}, "originalCommit": {"oid": "8f525b8a2956070f1cb92ed2848df6ea776db342"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUzNDA5MQ==", "bodyText": "Actually, it does (except for some minor mistakes in your code).\nI did not put the list name (backgroundTasks) as a second argument. Does that mean that the binding would have worked ONLY on the extractor? So adding and removing does not update the value, but a change in the progress would have? Or why else do we need to pass the list as a second argument?", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422534091", "createdAt": "2020-05-09T19:08:45Z", "author": {"login": "btut"}, "path": "src/main/java/org/jabref/gui/StateManager.java", "diffHunk": "@@ -41,6 +48,7 @@\n     private final OptionalObjectProperty<SearchQuery> activeSearchQuery = OptionalObjectProperty.empty();\n     private final ObservableMap<BibDatabaseContext, IntegerProperty> searchResultMap = FXCollections.observableHashMap();\n     private final OptionalObjectProperty<Node> focusOwner = OptionalObjectProperty.empty();\n+    private final UiThreadObservableList<ObjectProperty<Task<?>>> backgroundTasks = new UiThreadObservableList(FXCollections.observableArrayList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUxOTI2Mg=="}, "originalCommit": {"oid": "8f525b8a2956070f1cb92ed2848df6ea776db342"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU0MjkyMQ==", "bodyText": "The second argument specifies the observables that the function (the first argument) depends on. That is, every time these observables change, the function is called and the binding is updated with the new value. If you don't specify any observables in the second argument, then the binding is never updated.", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422542921", "createdAt": "2020-05-09T20:34:03Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/StateManager.java", "diffHunk": "@@ -41,6 +48,7 @@\n     private final OptionalObjectProperty<SearchQuery> activeSearchQuery = OptionalObjectProperty.empty();\n     private final ObservableMap<BibDatabaseContext, IntegerProperty> searchResultMap = FXCollections.observableHashMap();\n     private final OptionalObjectProperty<Node> focusOwner = OptionalObjectProperty.empty();\n+    private final UiThreadObservableList<ObjectProperty<Task<?>>> backgroundTasks = new UiThreadObservableList(FXCollections.observableArrayList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUxOTI2Mg=="}, "originalCommit": {"oid": "8f525b8a2956070f1cb92ed2848df6ea776db342"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU0MzEyNg==", "bodyText": "Oh that makes sense! Thanks for explaining!", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422543126", "createdAt": "2020-05-09T20:36:09Z", "author": {"login": "btut"}, "path": "src/main/java/org/jabref/gui/StateManager.java", "diffHunk": "@@ -41,6 +48,7 @@\n     private final OptionalObjectProperty<SearchQuery> activeSearchQuery = OptionalObjectProperty.empty();\n     private final ObservableMap<BibDatabaseContext, IntegerProperty> searchResultMap = FXCollections.observableHashMap();\n     private final OptionalObjectProperty<Node> focusOwner = OptionalObjectProperty.empty();\n+    private final UiThreadObservableList<ObjectProperty<Task<?>>> backgroundTasks = new UiThreadObservableList(FXCollections.observableArrayList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUxOTI2Mg=="}, "originalCommit": {"oid": "8f525b8a2956070f1cb92ed2848df6ea776db342"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDk0NTY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/WaitForBackgroundtasksFinishedDialog.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQyMTo1NTo1NFrOGS-d6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQyMjowNDoyNFrOGS-hGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1MTAxOQ==", "bodyText": "Just a wild guess, could it be that actually all tasks are finished, because the TaskExectutor is already shutdown?", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422551019", "createdAt": "2020-05-09T21:55:54Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/WaitForBackgroundtasksFinishedDialog.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.jabref.gui;\n+\n+import javafx.concurrent.Task;\n+import org.jabref.logic.l10n.Localization;\n+\n+import java.util.List;\n+\n+/**\n+ * Dialog shown when closing of application needs to wait for some background tasks.\n+ */\n+public class WaitForBackgroundtasksFinishedDialog {\n+\n+    private final DialogService dialogService;\n+\n+    public WaitForBackgroundtasksFinishedDialog(DialogService dialogService) {\n+        this.dialogService = dialogService;\n+    }\n+\n+    public void showAndWait(StateManager stateManager) {\n+        if (stateManager.anyTaskRunningBinding.getValue()) {\n+            Task<Void> waitForBackgroundtasksFinished = new Task<Void>() {\n+                @Override\n+                protected Void call() throws Exception {\n+                    System.out.println(\"THREAD STARTED\");\n+                    while (stateManager.anyTaskRunningBinding.getValue()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62d7c142724573bdc5e65b1187c72f37ee401d7d"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1MTgzNA==", "bodyText": "I added some logs in JabRefMain's stop method, it is run after the dialogue is already gone.", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422551834", "createdAt": "2020-05-09T22:04:24Z", "author": {"login": "btut"}, "path": "src/main/java/org/jabref/gui/WaitForBackgroundtasksFinishedDialog.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.jabref.gui;\n+\n+import javafx.concurrent.Task;\n+import org.jabref.logic.l10n.Localization;\n+\n+import java.util.List;\n+\n+/**\n+ * Dialog shown when closing of application needs to wait for some background tasks.\n+ */\n+public class WaitForBackgroundtasksFinishedDialog {\n+\n+    private final DialogService dialogService;\n+\n+    public WaitForBackgroundtasksFinishedDialog(DialogService dialogService) {\n+        this.dialogService = dialogService;\n+    }\n+\n+    public void showAndWait(StateManager stateManager) {\n+        if (stateManager.anyTaskRunningBinding.getValue()) {\n+            Task<Void> waitForBackgroundtasksFinished = new Task<Void>() {\n+                @Override\n+                protected Void call() throws Exception {\n+                    System.out.println(\"THREAD STARTED\");\n+                    while (stateManager.anyTaskRunningBinding.getValue()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1MTAxOQ=="}, "originalCommit": {"oid": "62d7c142724573bdc5e65b1187c72f37ee401d7d"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDk0NjI1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/WaitForBackgroundtasksFinishedDialog.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQyMTo1Njo0MFrOGS-eMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxMTozNjo1MFrOGTDbGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1MTA4OQ==", "bodyText": "Add a log statement here as well to make sure that the progress dialog does indeed wait?", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422551089", "createdAt": "2020-05-09T21:56:40Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/WaitForBackgroundtasksFinishedDialog.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.jabref.gui;\n+\n+import javafx.concurrent.Task;\n+import org.jabref.logic.l10n.Localization;\n+\n+import java.util.List;\n+\n+/**\n+ * Dialog shown when closing of application needs to wait for some background tasks.\n+ */\n+public class WaitForBackgroundtasksFinishedDialog {\n+\n+    private final DialogService dialogService;\n+\n+    public WaitForBackgroundtasksFinishedDialog(DialogService dialogService) {\n+        this.dialogService = dialogService;\n+    }\n+\n+    public void showAndWait(StateManager stateManager) {\n+        if (stateManager.anyTaskRunningBinding.getValue()) {\n+            Task<Void> waitForBackgroundtasksFinished = new Task<Void>() {\n+                @Override\n+                protected Void call() throws Exception {\n+                    System.out.println(\"THREAD STARTED\");\n+                    while (stateManager.anyTaskRunningBinding.getValue()) {\n+                        System.out.println(\"updated value to \" + stateManager.tasksProgressBinding.getValue());\n+                        updateProgress(stateManager.tasksProgressBinding.getValue(), 1);\n+                        if (isCancelled()) {\n+                            return null;\n+                        } else {\n+                            Thread.sleep(100);\n+                        }\n+                    }\n+                    return null;\n+                }\n+            };\n+\n+            Thread th = new Thread(waitForBackgroundtasksFinished);\n+            th.setDaemon(true);\n+            th.start();\n+\n+            dialogService.showProgressDialogAndWait(\n+                    Localization.lang(\"Please wait...\"),\n+                    Localization.lang(\"Waiting for background tasks to finish\") + \"...\",\n+                    waitForBackgroundtasksFinished\n+            );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62d7c142724573bdc5e65b1187c72f37ee401d7d"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1MjAwOA==", "bodyText": "I currently have a log message after the loop to see whether the isCancelled property or my tasks-running property caused the stop. I now also put a log message where you suggested, just after the wait. They are exectued in the correct order. So yes, the wait does work, but the task exits too early.", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422552008", "createdAt": "2020-05-09T22:06:07Z", "author": {"login": "btut"}, "path": "src/main/java/org/jabref/gui/WaitForBackgroundtasksFinishedDialog.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.jabref.gui;\n+\n+import javafx.concurrent.Task;\n+import org.jabref.logic.l10n.Localization;\n+\n+import java.util.List;\n+\n+/**\n+ * Dialog shown when closing of application needs to wait for some background tasks.\n+ */\n+public class WaitForBackgroundtasksFinishedDialog {\n+\n+    private final DialogService dialogService;\n+\n+    public WaitForBackgroundtasksFinishedDialog(DialogService dialogService) {\n+        this.dialogService = dialogService;\n+    }\n+\n+    public void showAndWait(StateManager stateManager) {\n+        if (stateManager.anyTaskRunningBinding.getValue()) {\n+            Task<Void> waitForBackgroundtasksFinished = new Task<Void>() {\n+                @Override\n+                protected Void call() throws Exception {\n+                    System.out.println(\"THREAD STARTED\");\n+                    while (stateManager.anyTaskRunningBinding.getValue()) {\n+                        System.out.println(\"updated value to \" + stateManager.tasksProgressBinding.getValue());\n+                        updateProgress(stateManager.tasksProgressBinding.getValue(), 1);\n+                        if (isCancelled()) {\n+                            return null;\n+                        } else {\n+                            Thread.sleep(100);\n+                        }\n+                    }\n+                    return null;\n+                }\n+            };\n+\n+            Thread th = new Thread(waitForBackgroundtasksFinished);\n+            th.setDaemon(true);\n+            th.start();\n+\n+            dialogService.showProgressDialogAndWait(\n+                    Localization.lang(\"Please wait...\"),\n+                    Localization.lang(\"Waiting for background tasks to finish\") + \"...\",\n+                    waitForBackgroundtasksFinished\n+            );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1MTA4OQ=="}, "originalCommit": {"oid": "62d7c142724573bdc5e65b1187c72f37ee401d7d"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1MjY0Mw==", "bodyText": "I now also get a warning about the binding:\n\nMay 10, 2020 12:02:50 AM javafx.beans.binding.Bindings$1 computeValue\nWARNING: Exception while evaluating binding\njava.lang.IllegalStateException: Task must only be used from the FX Application Thread\nat javafx.graphics/javafx.concurrent.Task.checkThread(Task.java:1220)\nat javafx.graphics/javafx.concurrent.Task.isRunning(Task.java:987)\nat java.base/java.util.stream.MatchOps$1MatchSink.accept(MatchOps.java:90)\nat java.base/java.util.AbstractList$RandomAccessSpliterator.tryAdvance(AbstractList.java:706)\nat java.base/java.util.stream.ReferencePipeline.forEachWithCancel(ReferencePipeline.java:127)\nat java.base/java.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:502)\nat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:488)\nat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)\nat java.base/java.util.stream.MatchOps$MatchOp.evaluateSequential(MatchOps.java:230)\nat java.base/java.util.stream.MatchOps$MatchOp.evaluateSequential(MatchOps.java:196)\nat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\nat java.base/java.util.stream.ReferencePipeline.anyMatch(ReferencePipeline.java:528)\nat org.jabref/org.jabref.gui.StateManager.lambda$new$1(StateManager.java:132)\nat javafx.base/javafx.beans.binding.Bindings$1.computeValue(Bindings.java:157)\nat javafx.base/javafx.beans.binding.BooleanBinding.get(BooleanBinding.java:155)\nat org.jabref/org.jabref.gui.WaitForBackgroundtasksFinishedDialog$1.call(WaitForBackgroundtasksFinishedDialog.java:28)\nat org.jabref/org.jabref.gui.WaitForBackgroundtasksFinishedDialog$1.call(WaitForBackgroundtasksFinishedDialog.java:24)\nat javafx.graphics/javafx.concurrent.Task$TaskCallable.call(Task.java:1425)\nat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\nat java.base/java.lang.Thread.run(Thread.java:832)\n\nI tried to run the task on the Javafx thread by using:\nDefaultTaskExecutor.runInJavaFXThread(waitForBackgroundtasksFinished);\nThe loop is then run more often (I guess until the download is finished), but the gui is frozen because of the task.", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422552643", "createdAt": "2020-05-09T22:12:54Z", "author": {"login": "btut"}, "path": "src/main/java/org/jabref/gui/WaitForBackgroundtasksFinishedDialog.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.jabref.gui;\n+\n+import javafx.concurrent.Task;\n+import org.jabref.logic.l10n.Localization;\n+\n+import java.util.List;\n+\n+/**\n+ * Dialog shown when closing of application needs to wait for some background tasks.\n+ */\n+public class WaitForBackgroundtasksFinishedDialog {\n+\n+    private final DialogService dialogService;\n+\n+    public WaitForBackgroundtasksFinishedDialog(DialogService dialogService) {\n+        this.dialogService = dialogService;\n+    }\n+\n+    public void showAndWait(StateManager stateManager) {\n+        if (stateManager.anyTaskRunningBinding.getValue()) {\n+            Task<Void> waitForBackgroundtasksFinished = new Task<Void>() {\n+                @Override\n+                protected Void call() throws Exception {\n+                    System.out.println(\"THREAD STARTED\");\n+                    while (stateManager.anyTaskRunningBinding.getValue()) {\n+                        System.out.println(\"updated value to \" + stateManager.tasksProgressBinding.getValue());\n+                        updateProgress(stateManager.tasksProgressBinding.getValue(), 1);\n+                        if (isCancelled()) {\n+                            return null;\n+                        } else {\n+                            Thread.sleep(100);\n+                        }\n+                    }\n+                    return null;\n+                }\n+            };\n+\n+            Thread th = new Thread(waitForBackgroundtasksFinished);\n+            th.setDaemon(true);\n+            th.start();\n+\n+            dialogService.showProgressDialogAndWait(\n+                    Localization.lang(\"Please wait...\"),\n+                    Localization.lang(\"Waiting for background tasks to finish\") + \"...\",\n+                    waitForBackgroundtasksFinished\n+            );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1MTA4OQ=="}, "originalCommit": {"oid": "62d7c142724573bdc5e65b1187c72f37ee401d7d"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYzMjIxOQ==", "bodyText": "The problem was that the extractor I added to the task list in StateManager did not include the isRunning property. It still did not run perfectly and was not pretty, therefore I moved to a custom dialog which works fine.", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422632219", "createdAt": "2020-05-10T11:36:50Z", "author": {"login": "btut"}, "path": "src/main/java/org/jabref/gui/WaitForBackgroundtasksFinishedDialog.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.jabref.gui;\n+\n+import javafx.concurrent.Task;\n+import org.jabref.logic.l10n.Localization;\n+\n+import java.util.List;\n+\n+/**\n+ * Dialog shown when closing of application needs to wait for some background tasks.\n+ */\n+public class WaitForBackgroundtasksFinishedDialog {\n+\n+    private final DialogService dialogService;\n+\n+    public WaitForBackgroundtasksFinishedDialog(DialogService dialogService) {\n+        this.dialogService = dialogService;\n+    }\n+\n+    public void showAndWait(StateManager stateManager) {\n+        if (stateManager.anyTaskRunningBinding.getValue()) {\n+            Task<Void> waitForBackgroundtasksFinished = new Task<Void>() {\n+                @Override\n+                protected Void call() throws Exception {\n+                    System.out.println(\"THREAD STARTED\");\n+                    while (stateManager.anyTaskRunningBinding.getValue()) {\n+                        System.out.println(\"updated value to \" + stateManager.tasksProgressBinding.getValue());\n+                        updateProgress(stateManager.tasksProgressBinding.getValue(), 1);\n+                        if (isCancelled()) {\n+                            return null;\n+                        } else {\n+                            Thread.sleep(100);\n+                        }\n+                    }\n+                    return null;\n+                }\n+            };\n+\n+            Thread th = new Thread(waitForBackgroundtasksFinished);\n+            th.setDaemon(true);\n+            th.start();\n+\n+            dialogService.showProgressDialogAndWait(\n+                    Localization.lang(\"Please wait...\"),\n+                    Localization.lang(\"Waiting for background tasks to finish\") + \"...\",\n+                    waitForBackgroundtasksFinished\n+            );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1MTA4OQ=="}, "originalCommit": {"oid": "62d7c142724573bdc5e65b1187c72f37ee401d7d"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNDAxMTQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/Base.css", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMToyNDoyM1rOGTYHPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjoxODozMFrOGT3jSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk3MTE5OA==", "bodyText": "The progress indicator is also used at other places. Since this definition here is global, it changes also the style of these other indicators, is this desired? I would guess some of the changes are ok globally (e.g the color) but others like the padding or no percentage are probably specific to the toolbar, right?", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422971198", "createdAt": "2020-05-11T11:24:23Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/Base.css", "diffHunk": "@@ -387,6 +387,21 @@\n     -fx-padding: -0.1em 0.5em 0.5em 0.5em;\n }\n \n+.progress-indicator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41efc047ee0cb7bb8bdd3389ff384f5d53ca6c8f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4NzYyOA==", "bodyText": "Make sense, I didn't see it anywhere else. I'll see to it.", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422987628", "createdAt": "2020-05-11T11:57:59Z", "author": {"login": "btut"}, "path": "src/main/java/org/jabref/gui/Base.css", "diffHunk": "@@ -387,6 +387,21 @@\n     -fx-padding: -0.1em 0.5em 0.5em 0.5em;\n }\n \n+.progress-indicator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk3MTE5OA=="}, "originalCommit": {"oid": "41efc047ee0cb7bb8bdd3389ff384f5d53ca6c8f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA2MzIzMw==", "bodyText": "Sounded easy, somehow doesn't work. I am not familiar with javafx, can you spot any mistakes in fcb1d0c? I tried to copy the style of icon-button which also has multiple styles.\nThe indicator is invisible now and can only be seen by the changing background color when hovering over it. The area that is then seen is very tiny.", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r423063233", "createdAt": "2020-05-11T14:04:02Z", "author": {"login": "btut"}, "path": "src/main/java/org/jabref/gui/Base.css", "diffHunk": "@@ -387,6 +387,21 @@\n     -fx-padding: -0.1em 0.5em 0.5em 0.5em;\n }\n \n+.progress-indicator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk3MTE5OA=="}, "originalCommit": {"oid": "41efc047ee0cb7bb8bdd3389ff384f5d53ca6c8f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE2NjY4Nw==", "bodyText": "Because you use getStyleClass().setAll, the default javafx style is completely removed. It should work if you use \"add\" instead. Then you can also simplify the double statements .progress-indicatorToolbar, .progress-indicator to .progress-indicator because the progress indicator in the toolbar is still matched by the later.", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r423166687", "createdAt": "2020-05-11T16:31:55Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/Base.css", "diffHunk": "@@ -387,6 +387,21 @@\n     -fx-padding: -0.1em 0.5em 0.5em 0.5em;\n }\n \n+.progress-indicator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk3MTE5OA=="}, "originalCommit": {"oid": "41efc047ee0cb7bb8bdd3389ff384f5d53ca6c8f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ4NjI4Mg==", "bodyText": "I knew you would spot that mistake immediately, thanks! Works like a charm.\ne24c141", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r423486282", "createdAt": "2020-05-12T06:18:30Z", "author": {"login": "btut"}, "path": "src/main/java/org/jabref/gui/Base.css", "diffHunk": "@@ -387,6 +387,21 @@\n     -fx-padding: -0.1em 0.5em 0.5em 0.5em;\n }\n \n+.progress-indicator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk3MTE5OA=="}, "originalCommit": {"oid": "41efc047ee0cb7bb8bdd3389ff384f5d53ca6c8f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNDAyNTg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/JabRefFrame.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMToyODo0MVrOGTYPrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNDowNTowOFrOGTdxgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk3MzM1Ng==", "bodyText": "Also add Background Tasks as tooltip (if supported)?", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422973356", "createdAt": "2020-05-11T11:28:41Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/JabRefFrame.java", "diffHunk": "@@ -921,6 +940,45 @@ private MenuBar createMenu() {\n         return menu;\n     }\n \n+    private Group createTaskIndicator() {\n+        ProgressIndicator indicator = new ProgressIndicator();\n+        indicator.getStyleClass().setAll(\"progress-indicator\");\n+        indicator.progressProperty().bind(stateManager.tasksProgressBinding);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41efc047ee0cb7bb8bdd3389ff384f5d53ca6c8f"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4Nzc5OA==", "bodyText": "I actually wanted to do that already, but forgot.", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422987798", "createdAt": "2020-05-11T11:58:18Z", "author": {"login": "btut"}, "path": "src/main/java/org/jabref/gui/JabRefFrame.java", "diffHunk": "@@ -921,6 +940,45 @@ private MenuBar createMenu() {\n         return menu;\n     }\n \n+    private Group createTaskIndicator() {\n+        ProgressIndicator indicator = new ProgressIndicator();\n+        indicator.getStyleClass().setAll(\"progress-indicator\");\n+        indicator.progressProperty().bind(stateManager.tasksProgressBinding);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk3MzM1Ng=="}, "originalCommit": {"oid": "41efc047ee0cb7bb8bdd3389ff384f5d53ca6c8f"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA2MzkzOQ==", "bodyText": "cf10859", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r423063939", "createdAt": "2020-05-11T14:05:08Z", "author": {"login": "btut"}, "path": "src/main/java/org/jabref/gui/JabRefFrame.java", "diffHunk": "@@ -921,6 +940,45 @@ private MenuBar createMenu() {\n         return menu;\n     }\n \n+    private Group createTaskIndicator() {\n+        ProgressIndicator indicator = new ProgressIndicator();\n+        indicator.getStyleClass().setAll(\"progress-indicator\");\n+        indicator.progressProperty().bind(stateManager.tasksProgressBinding);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk3MzM1Ng=="}, "originalCommit": {"oid": "41efc047ee0cb7bb8bdd3389ff384f5d53ca6c8f"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNDAzNzA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/StateManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMTozMjowNlrOGTYWgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNDowNTo0MlrOGTdzDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk3NTEwNA==", "bodyText": "Please make this fields private and add a public getter method (otherwise code from the outside can change these bindings, which is not what we want). (Maybe also remove the suffix \"Binding\" from the name, but that's a matter of taste).", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422975104", "createdAt": "2020-05-11T11:32:06Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/StateManager.java", "diffHunk": "@@ -41,6 +45,17 @@\n     private final OptionalObjectProperty<SearchQuery> activeSearchQuery = OptionalObjectProperty.empty();\n     private final ObservableMap<BibDatabaseContext, IntegerProperty> searchResultMap = FXCollections.observableHashMap();\n     private final OptionalObjectProperty<Node> focusOwner = OptionalObjectProperty.empty();\n+    private final ObservableList<Task<?>> backgroundTasks = FXCollections.observableArrayList(taskProperty -> {\n+        return new Observable[] {taskProperty.progressProperty(), taskProperty.runningProperty()};\n+    });\n+\n+    public BooleanBinding anyTaskRunningBinding = Bindings.createBooleanBinding(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41efc047ee0cb7bb8bdd3389ff384f5d53ca6c8f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4NzkwNQ==", "bodyText": "Sure thing!", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422987905", "createdAt": "2020-05-11T11:58:32Z", "author": {"login": "btut"}, "path": "src/main/java/org/jabref/gui/StateManager.java", "diffHunk": "@@ -41,6 +45,17 @@\n     private final OptionalObjectProperty<SearchQuery> activeSearchQuery = OptionalObjectProperty.empty();\n     private final ObservableMap<BibDatabaseContext, IntegerProperty> searchResultMap = FXCollections.observableHashMap();\n     private final OptionalObjectProperty<Node> focusOwner = OptionalObjectProperty.empty();\n+    private final ObservableList<Task<?>> backgroundTasks = FXCollections.observableArrayList(taskProperty -> {\n+        return new Observable[] {taskProperty.progressProperty(), taskProperty.runningProperty()};\n+    });\n+\n+    public BooleanBinding anyTaskRunningBinding = Bindings.createBooleanBinding(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk3NTEwNA=="}, "originalCommit": {"oid": "41efc047ee0cb7bb8bdd3389ff384f5d53ca6c8f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA2NDMzMw==", "bodyText": "d56138b", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r423064333", "createdAt": "2020-05-11T14:05:42Z", "author": {"login": "btut"}, "path": "src/main/java/org/jabref/gui/StateManager.java", "diffHunk": "@@ -41,6 +45,17 @@\n     private final OptionalObjectProperty<SearchQuery> activeSearchQuery = OptionalObjectProperty.empty();\n     private final ObservableMap<BibDatabaseContext, IntegerProperty> searchResultMap = FXCollections.observableHashMap();\n     private final OptionalObjectProperty<Node> focusOwner = OptionalObjectProperty.empty();\n+    private final ObservableList<Task<?>> backgroundTasks = FXCollections.observableArrayList(taskProperty -> {\n+        return new Observable[] {taskProperty.progressProperty(), taskProperty.runningProperty()};\n+    });\n+\n+    public BooleanBinding anyTaskRunningBinding = Bindings.createBooleanBinding(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk3NTEwNA=="}, "originalCommit": {"oid": "41efc047ee0cb7bb8bdd3389ff384f5d53ca6c8f"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNDA1MTQyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/WaitForBackgroundtasksFinishedDialog.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMTozNjo0M1rOGTYfOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNDowNzowMlrOGTd2pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk3NzMzNg==", "bodyText": "https://github.com/JabRef/jabref/blob/master/src/main/java/org/jabref/gui/DialogService.java#L179 (or the other overload) cannot be used here? I think it would be slightly cleaner to make WaitForBackgroundtasksFinishedDialog a \"real\" dialog (i.e. inherit from Dialog) or even convert it to a proper fxml-based dialog similar to most dialogs.", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422977336", "createdAt": "2020-05-11T11:36:43Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/WaitForBackgroundtasksFinishedDialog.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package org.jabref.gui;\n+\n+import java.util.Optional;\n+\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.ButtonType;\n+import javafx.scene.control.DialogPane;\n+import javafx.scene.control.Label;\n+import javafx.scene.layout.Region;\n+import javafx.scene.layout.VBox;\n+\n+import org.jabref.gui.util.BackgroundTask;\n+import org.jabref.gui.util.ThemeLoader;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.preferences.JabRefPreferences;\n+\n+import org.controlsfx.control.TaskProgressView;\n+import org.fxmisc.easybind.EasyBind;\n+\n+/**\n+ * Dialog shown when closing of application needs to wait for some background tasks.\n+ */\n+public class WaitForBackgroundtasksFinishedDialog {\n+\n+    private final DialogService dialogService;\n+\n+    public WaitForBackgroundtasksFinishedDialog(DialogService dialogService) {\n+        this.dialogService = dialogService;\n+    }\n+\n+    public boolean showAndWait(StateManager stateManager, ThemeLoader themeLoader, JabRefPreferences preferences) {\n+        TaskProgressView taskProgressView = new TaskProgressView();\n+        EasyBind.listBind(taskProgressView.getTasks(), stateManager.getBackgroundTasks());\n+        taskProgressView.setRetainTasks(false);\n+        taskProgressView.setGraphicFactory(BackgroundTask.iconCallback);\n+\n+        Label message = new Label(Localization.lang(\"Waiting for background tasks to finish. Quit anyway?\"));\n+\n+        VBox box = new VBox(taskProgressView, message);\n+\n+        DialogPane contentPane = new DialogPane();\n+        contentPane.setContent(box);\n+\n+        FXDialog alert = new FXDialog(Alert.AlertType.NONE, Localization.lang(\"Please wait...\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41efc047ee0cb7bb8bdd3389ff384f5d53ca6c8f"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk5MTE4MA==", "bodyText": "I did use the custom dialogue at the beginning, but it gives no access to the actual javafx dialogue, meaning I cannot hide it on an event. The thing with the JabRef dialogues created by the show*AndWait is that they create the actual javafx dialogue in the method, so they can't be accessed later. I just found the createDialog method which would probably be the best to use here. It creates the dialog and takes care of some styling and such, and then returns the actual dialog which can then be shown and waited for. I'll do that!", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422991180", "createdAt": "2020-05-11T12:05:00Z", "author": {"login": "btut"}, "path": "src/main/java/org/jabref/gui/WaitForBackgroundtasksFinishedDialog.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package org.jabref.gui;\n+\n+import java.util.Optional;\n+\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.ButtonType;\n+import javafx.scene.control.DialogPane;\n+import javafx.scene.control.Label;\n+import javafx.scene.layout.Region;\n+import javafx.scene.layout.VBox;\n+\n+import org.jabref.gui.util.BackgroundTask;\n+import org.jabref.gui.util.ThemeLoader;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.preferences.JabRefPreferences;\n+\n+import org.controlsfx.control.TaskProgressView;\n+import org.fxmisc.easybind.EasyBind;\n+\n+/**\n+ * Dialog shown when closing of application needs to wait for some background tasks.\n+ */\n+public class WaitForBackgroundtasksFinishedDialog {\n+\n+    private final DialogService dialogService;\n+\n+    public WaitForBackgroundtasksFinishedDialog(DialogService dialogService) {\n+        this.dialogService = dialogService;\n+    }\n+\n+    public boolean showAndWait(StateManager stateManager, ThemeLoader themeLoader, JabRefPreferences preferences) {\n+        TaskProgressView taskProgressView = new TaskProgressView();\n+        EasyBind.listBind(taskProgressView.getTasks(), stateManager.getBackgroundTasks());\n+        taskProgressView.setRetainTasks(false);\n+        taskProgressView.setGraphicFactory(BackgroundTask.iconCallback);\n+\n+        Label message = new Label(Localization.lang(\"Waiting for background tasks to finish. Quit anyway?\"));\n+\n+        VBox box = new VBox(taskProgressView, message);\n+\n+        DialogPane contentPane = new DialogPane();\n+        contentPane.setContent(box);\n+\n+        FXDialog alert = new FXDialog(Alert.AlertType.NONE, Localization.lang(\"Please wait...\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk3NzMzNg=="}, "originalCommit": {"oid": "41efc047ee0cb7bb8bdd3389ff384f5d53ca6c8f"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA2NTI1NA==", "bodyText": "Is this ok? I tried to follow how showProgressDialogAndWait is implemented.\nff9ce00", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r423065254", "createdAt": "2020-05-11T14:07:02Z", "author": {"login": "btut"}, "path": "src/main/java/org/jabref/gui/WaitForBackgroundtasksFinishedDialog.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package org.jabref.gui;\n+\n+import java.util.Optional;\n+\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.ButtonType;\n+import javafx.scene.control.DialogPane;\n+import javafx.scene.control.Label;\n+import javafx.scene.layout.Region;\n+import javafx.scene.layout.VBox;\n+\n+import org.jabref.gui.util.BackgroundTask;\n+import org.jabref.gui.util.ThemeLoader;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.preferences.JabRefPreferences;\n+\n+import org.controlsfx.control.TaskProgressView;\n+import org.fxmisc.easybind.EasyBind;\n+\n+/**\n+ * Dialog shown when closing of application needs to wait for some background tasks.\n+ */\n+public class WaitForBackgroundtasksFinishedDialog {\n+\n+    private final DialogService dialogService;\n+\n+    public WaitForBackgroundtasksFinishedDialog(DialogService dialogService) {\n+        this.dialogService = dialogService;\n+    }\n+\n+    public boolean showAndWait(StateManager stateManager, ThemeLoader themeLoader, JabRefPreferences preferences) {\n+        TaskProgressView taskProgressView = new TaskProgressView();\n+        EasyBind.listBind(taskProgressView.getTasks(), stateManager.getBackgroundTasks());\n+        taskProgressView.setRetainTasks(false);\n+        taskProgressView.setGraphicFactory(BackgroundTask.iconCallback);\n+\n+        Label message = new Label(Localization.lang(\"Waiting for background tasks to finish. Quit anyway?\"));\n+\n+        VBox box = new VBox(taskProgressView, message);\n+\n+        DialogPane contentPane = new DialogPane();\n+        contentPane.setContent(box);\n+\n+        FXDialog alert = new FXDialog(Alert.AlertType.NONE, Localization.lang(\"Please wait...\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk3NzMzNg=="}, "originalCommit": {"oid": "41efc047ee0cb7bb8bdd3389ff384f5d53ca6c8f"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNDA3MTA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/util/BackgroundTask.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMTo0Mjo1N1rOGTYrdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNDowMjowMVrOGTdpkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4MDQ2OA==", "bodyText": "Why do you prefer a map here instead of adding a new property icon to the BackgroundTask class (so that downloadTask.setIcon(IconTheme.JabRefIcons.DOWNLOAD) works)?", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422980468", "createdAt": "2020-05-11T11:42:57Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/util/BackgroundTask.java", "diffHunk": "@@ -27,14 +33,29 @@\n  * @param <V> type of the return value of the task\n  */\n public abstract class BackgroundTask<V> {\n+\n+    public static ImmutableMap<String, Node> iconMap = ImmutableMap.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41efc047ee0cb7bb8bdd3389ff384f5d53ca6c8f"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk5MzAwMA==", "bodyText": "That's because the TaskProgressView works on a list of tasks. Tasks have no icon property, therefore one must provide a callback that gets an icon from a task.\nIf BackgroundTask were derived from Task, we could add a property to BackgroundTask. The callback could then check if we have a BackgroundTask at hand and if so, provide the icon stored in a property in BackgroundTask. But BackgroundTask is not derived from Task so this is not possible.\nWe need a key to map from a Task to an Icon.\nI used the title of the task as a key property to map to the icon, so an immutable map seemed like the best way to go.", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422993000", "createdAt": "2020-05-11T12:08:50Z", "author": {"login": "btut"}, "path": "src/main/java/org/jabref/gui/util/BackgroundTask.java", "diffHunk": "@@ -27,14 +33,29 @@\n  * @param <V> type of the return value of the task\n  */\n public abstract class BackgroundTask<V> {\n+\n+    public static ImmutableMap<String, Node> iconMap = ImmutableMap.of(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4MDQ2OA=="}, "originalCommit": {"oid": "41efc047ee0cb7bb8bdd3389ff384f5d53ca6c8f"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk5ODMyNw==", "bodyText": "Ok, I see. It's a bit unfortunate but your solution makes sense. I would propose to change the Callback below to a normal method (public static Node getIcon(Task<?> task) which you then use as a callback using BackgroundTask::getIcon) and replace the iconMap by a normal switch statement.", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422998327", "createdAt": "2020-05-11T12:19:12Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/util/BackgroundTask.java", "diffHunk": "@@ -27,14 +33,29 @@\n  * @param <V> type of the return value of the task\n  */\n public abstract class BackgroundTask<V> {\n+\n+    public static ImmutableMap<String, Node> iconMap = ImmutableMap.of(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4MDQ2OA=="}, "originalCommit": {"oid": "41efc047ee0cb7bb8bdd3389ff384f5d53ca6c8f"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA2MTkwNQ==", "bodyText": "Change to method is easy, but I cannot use a switch, because I would need a constant expression. As I use the title of the task, and there is localization on that, it is not constant.\n396411a", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r423061905", "createdAt": "2020-05-11T14:02:01Z", "author": {"login": "btut"}, "path": "src/main/java/org/jabref/gui/util/BackgroundTask.java", "diffHunk": "@@ -27,14 +33,29 @@\n  * @param <V> type of the return value of the task\n  */\n public abstract class BackgroundTask<V> {\n+\n+    public static ImmutableMap<String, Node> iconMap = ImmutableMap.of(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4MDQ2OA=="}, "originalCommit": {"oid": "41efc047ee0cb7bb8bdd3389ff384f5d53ca6c8f"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNDA3NjkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/util/DefaultTaskExecutor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMTo0NDo1N1rOGTYvIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMjoxNzoyN1rOGTZtxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4MTQxMA==", "bodyText": "We try to remove the Globals class. Is it possible to insert the stateManager via a constructor parameter?", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422981410", "createdAt": "2020-05-11T11:44:57Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/util/DefaultTaskExecutor.java", "diffHunk": "@@ -96,7 +97,11 @@ public static void runInJavaFXThread(Runnable runnable) {\n \n     @Override\n     public <V> Future<V> execute(BackgroundTask<V> task) {\n-        return execute(getJavaFXTask(task));\n+        Task<V> javafxTask = getJavaFXTask(task);\n+        if (task.showToUser()) {\n+            Globals.stateManager.addBackgroundTask(javafxTask);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41efc047ee0cb7bb8bdd3389ff384f5d53ca6c8f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk5Mzg4OA==", "bodyText": "Yes, that should be easy.", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422993888", "createdAt": "2020-05-11T12:10:30Z", "author": {"login": "btut"}, "path": "src/main/java/org/jabref/gui/util/DefaultTaskExecutor.java", "diffHunk": "@@ -96,7 +97,11 @@ public static void runInJavaFXThread(Runnable runnable) {\n \n     @Override\n     public <V> Future<V> execute(BackgroundTask<V> task) {\n-        return execute(getJavaFXTask(task));\n+        Task<V> javafxTask = getJavaFXTask(task);\n+        if (task.showToUser()) {\n+            Globals.stateManager.addBackgroundTask(javafxTask);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4MTQxMA=="}, "originalCommit": {"oid": "41efc047ee0cb7bb8bdd3389ff384f5d53ca6c8f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk5NzQ0Ng==", "bodyText": "Fixed in 2c9ccea", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422997446", "createdAt": "2020-05-11T12:17:27Z", "author": {"login": "btut"}, "path": "src/main/java/org/jabref/gui/util/DefaultTaskExecutor.java", "diffHunk": "@@ -96,7 +97,11 @@ public static void runInJavaFXThread(Runnable runnable) {\n \n     @Override\n     public <V> Future<V> execute(BackgroundTask<V> task) {\n-        return execute(getJavaFXTask(task));\n+        Task<V> javafxTask = getJavaFXTask(task);\n+        if (task.showToUser()) {\n+            Globals.stateManager.addBackgroundTask(javafxTask);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4MTQxMA=="}, "originalCommit": {"oid": "41efc047ee0cb7bb8bdd3389ff384f5d53ca6c8f"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODIyNTU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/JabRefFrame.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMTowNjo0MFrOGUBffA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMToyNToyNVrOGUCFQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY0OTE0OA==", "bodyText": "This looks odd to me", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r423649148", "createdAt": "2020-05-12T11:06:40Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/gui/JabRefFrame.java", "diffHunk": "@@ -397,7 +402,22 @@ private void tearDownJabRef(List<String> filenames) {\n      * @return true if the user chose to quit; false otherwise\n      */\n     public boolean quit() {\n-        // First ask if the user really wants to close, if the library has not been saved since last save.\n+        // First ask if the user really wants to close, if there are still background tasks running\n+        /*\n+        It is important to wait for unfinished background tasks before checking if a save-operation is needed, because\n+        the background tasks may make changes themselves that need saving.\n+         */\n+        if (stateManager.getAnyTaskRunning().getValue()) {\n+            if (!(dialogService.showBackgroundProgressDialogAndWait(\n+                    Localization.lang(\"Please wait...\"),\n+                    Localization.lang(\"Waiting for background tasks to finish. Quit anyway?\"),\n+                    stateManager\n+            ).orElse(ButtonType.CANCEL) == ButtonType.YES)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3ae7963d447e5fad4dc5af0b27384e63d2b82d1"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY1MTc4NA==", "bodyText": "Could you please elaborate?\nIf you mean the condition at the end, I just want to make sure that JabRef only exists if the user pressed yes. So if the optional is empty I just put ButtonType.CANCEL so the comparison to YES returns false.\nDo you want me to change this or add a comment? Maybe it would be clearer to store the result in a variable and check for (result.isPresent() && result.get() == ButtonType.YES).", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r423651784", "createdAt": "2020-05-12T11:11:47Z", "author": {"login": "btut"}, "path": "src/main/java/org/jabref/gui/JabRefFrame.java", "diffHunk": "@@ -397,7 +402,22 @@ private void tearDownJabRef(List<String> filenames) {\n      * @return true if the user chose to quit; false otherwise\n      */\n     public boolean quit() {\n-        // First ask if the user really wants to close, if the library has not been saved since last save.\n+        // First ask if the user really wants to close, if there are still background tasks running\n+        /*\n+        It is important to wait for unfinished background tasks before checking if a save-operation is needed, because\n+        the background tasks may make changes themselves that need saving.\n+         */\n+        if (stateManager.getAnyTaskRunning().getValue()) {\n+            if (!(dialogService.showBackgroundProgressDialogAndWait(\n+                    Localization.lang(\"Please wait...\"),\n+                    Localization.lang(\"Waiting for background tasks to finish. Quit anyway?\"),\n+                    stateManager\n+            ).orElse(ButtonType.CANCEL) == ButtonType.YES)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY0OTE0OA=="}, "originalCommit": {"oid": "e3ae7963d447e5fad4dc5af0b27384e63d2b82d1"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY1NjE0OQ==", "bodyText": "Yes, I think this is more readable.", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r423656149", "createdAt": "2020-05-12T11:20:12Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/gui/JabRefFrame.java", "diffHunk": "@@ -397,7 +402,22 @@ private void tearDownJabRef(List<String> filenames) {\n      * @return true if the user chose to quit; false otherwise\n      */\n     public boolean quit() {\n-        // First ask if the user really wants to close, if the library has not been saved since last save.\n+        // First ask if the user really wants to close, if there are still background tasks running\n+        /*\n+        It is important to wait for unfinished background tasks before checking if a save-operation is needed, because\n+        the background tasks may make changes themselves that need saving.\n+         */\n+        if (stateManager.getAnyTaskRunning().getValue()) {\n+            if (!(dialogService.showBackgroundProgressDialogAndWait(\n+                    Localization.lang(\"Please wait...\"),\n+                    Localization.lang(\"Waiting for background tasks to finish. Quit anyway?\"),\n+                    stateManager\n+            ).orElse(ButtonType.CANCEL) == ButtonType.YES)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY0OTE0OA=="}, "originalCommit": {"oid": "e3ae7963d447e5fad4dc5af0b27384e63d2b82d1"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY1ODgxNw==", "bodyText": "Done 3db3997", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r423658817", "createdAt": "2020-05-12T11:25:25Z", "author": {"login": "btut"}, "path": "src/main/java/org/jabref/gui/JabRefFrame.java", "diffHunk": "@@ -397,7 +402,22 @@ private void tearDownJabRef(List<String> filenames) {\n      * @return true if the user chose to quit; false otherwise\n      */\n     public boolean quit() {\n-        // First ask if the user really wants to close, if the library has not been saved since last save.\n+        // First ask if the user really wants to close, if there are still background tasks running\n+        /*\n+        It is important to wait for unfinished background tasks before checking if a save-operation is needed, because\n+        the background tasks may make changes themselves that need saving.\n+         */\n+        if (stateManager.getAnyTaskRunning().getValue()) {\n+            if (!(dialogService.showBackgroundProgressDialogAndWait(\n+                    Localization.lang(\"Please wait...\"),\n+                    Localization.lang(\"Waiting for background tasks to finish. Quit anyway?\"),\n+                    stateManager\n+            ).orElse(ButtonType.CANCEL) == ButtonType.YES)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY0OTE0OA=="}, "originalCommit": {"oid": "e3ae7963d447e5fad4dc5af0b27384e63d2b82d1"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1824, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}