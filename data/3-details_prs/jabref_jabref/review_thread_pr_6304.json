{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1MjExMzMw", "number": 6304, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxODoyN1rOD1dUlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNTo1ODo0N1rOD4S5Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzgxNTI3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/journals/JournalAbbreviationLoader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxODoyN1rOGK6ZBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjoxNToyMlrOGLU3bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5NTYyMg==", "bodyText": "Why is this disabled?", "url": "https://github.com/JabRef/jabref/pull/6304#discussion_r414095622", "createdAt": "2020-04-23T20:18:27Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/journals/JournalAbbreviationLoader.java", "diffHunk": "@@ -32,52 +35,75 @@\n         return readJournalListFromResource(JOURNALS_FILE_BUILTIN);\n     }\n \n-    public static List<Abbreviation> readJournalListFromResource(String resource) {\n+    private static List<Abbreviation> readJournalListFromResource(String resource) {\n         AbbreviationParser parser = new AbbreviationParser();\n         parser.readJournalListFromResource(Objects.requireNonNull(resource));\n         return parser.getAbbreviations();\n     }\n \n-    public static List<Abbreviation> readJournalListFromFile(File file) throws FileNotFoundException {\n+    public static List<Abbreviation> readJournalListFromFile(Path file) throws IOException {\n         LOGGER.debug(String.format(\"Reading journal list from file %s\", file));\n         AbbreviationParser parser = new AbbreviationParser();\n-        parser.readJournalListFromFile(Objects.requireNonNull(file));\n+        parser.readJournalListFromFile(file);\n         return parser.getAbbreviations();\n     }\n \n-    public static List<Abbreviation> readJournalListFromFile(File file, Charset encoding) throws FileNotFoundException {\n+    private static List<Abbreviation> readJournalListFromFile(Path file, Charset encoding) throws IOException {\n         LOGGER.debug(String.format(\"Reading journal list from file %s\", file));\n         AbbreviationParser parser = new AbbreviationParser();\n-        parser.readJournalListFromFile(Objects.requireNonNull(file), Objects.requireNonNull(encoding));\n+        parser.readJournalListFromFile(file, Objects.requireNonNull(encoding));\n         return parser.getAbbreviations();\n     }\n \n-    public void update(JournalAbbreviationPreferences journalAbbreviationPreferences) {\n-        journalAbbrev = new JournalAbbreviationRepository();\n-\n-        // The order of reading the journal lists is important: last added abbreviation wins\n-        // For instance, in the personal list one can overwrite abbreviations in the built in list\n-\n-        // Read builtin list\n-        journalAbbrev.addEntries(readJournalListFromResource(JOURNALS_FILE_BUILTIN));\n-\n-        // Read IEEE list\n-        if (journalAbbreviationPreferences.useIEEEAbbreviations()) {\n-            journalAbbrev.addEntries(getOfficialIEEEAbbreviations());\n-        } else {\n-            journalAbbrev.addEntries(getStandardIEEEAbbreviations());\n+    public static void writeDefaultDatabase(Path targetDirectory) {\n+        try (MVStore store = MVStore.open(targetDirectory.resolve(\"journalList.mv\").getParent().toString())) {\n+            MVMap<String, String> fullToAbbreviation = store.openMap(\"FullToAbbreviation\");\n+\n+            // Add all standard abbreviations\n+            fullToAbbreviation.putAll(\n+                    getBuiltInAbbreviations()\n+                            .stream()\n+                            .collect(Collectors.toMap(Abbreviation::getName, Abbreviation::getAbbreviation))\n+            );\n+\n+            // Add all IEEE abbreviations\n+            fullToAbbreviation.putAll(\n+                    getStandardIEEEAbbreviations()\n+                            .stream()\n+                            .collect(Collectors.toMap(Abbreviation::getName, Abbreviation::getAbbreviation))\n+            );\n+\n+            MVMap<String, String> abbreviationToFull = store.openMap(\"AbbreviationToFull\");\n+\n+            // Add all standard abbreviations\n+            abbreviationToFull.putAll(\n+                    getBuiltInAbbreviations()\n+                            .stream()\n+                            .collect(Collectors.toMap(Abbreviation::getAbbreviation, Abbreviation::getName))\n+            );\n+\n+            // Add all IEEE abbreviations\n+            abbreviationToFull.putAll(\n+                    getStandardIEEEAbbreviations()\n+                            .stream()\n+                            .collect(Collectors.toMap(Abbreviation::getAbbreviation, Abbreviation::getName))\n+            );\n+            //store.commit();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efa5b1aa37f84be772888d23547cd69bcd946859"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyOTM5MA==", "bodyText": "It's not need apparently (happens automatically if the store is closed).", "url": "https://github.com/JabRef/jabref/pull/6304#discussion_r414529390", "createdAt": "2020-04-24T12:15:22Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/logic/journals/JournalAbbreviationLoader.java", "diffHunk": "@@ -32,52 +35,75 @@\n         return readJournalListFromResource(JOURNALS_FILE_BUILTIN);\n     }\n \n-    public static List<Abbreviation> readJournalListFromResource(String resource) {\n+    private static List<Abbreviation> readJournalListFromResource(String resource) {\n         AbbreviationParser parser = new AbbreviationParser();\n         parser.readJournalListFromResource(Objects.requireNonNull(resource));\n         return parser.getAbbreviations();\n     }\n \n-    public static List<Abbreviation> readJournalListFromFile(File file) throws FileNotFoundException {\n+    public static List<Abbreviation> readJournalListFromFile(Path file) throws IOException {\n         LOGGER.debug(String.format(\"Reading journal list from file %s\", file));\n         AbbreviationParser parser = new AbbreviationParser();\n-        parser.readJournalListFromFile(Objects.requireNonNull(file));\n+        parser.readJournalListFromFile(file);\n         return parser.getAbbreviations();\n     }\n \n-    public static List<Abbreviation> readJournalListFromFile(File file, Charset encoding) throws FileNotFoundException {\n+    private static List<Abbreviation> readJournalListFromFile(Path file, Charset encoding) throws IOException {\n         LOGGER.debug(String.format(\"Reading journal list from file %s\", file));\n         AbbreviationParser parser = new AbbreviationParser();\n-        parser.readJournalListFromFile(Objects.requireNonNull(file), Objects.requireNonNull(encoding));\n+        parser.readJournalListFromFile(file, Objects.requireNonNull(encoding));\n         return parser.getAbbreviations();\n     }\n \n-    public void update(JournalAbbreviationPreferences journalAbbreviationPreferences) {\n-        journalAbbrev = new JournalAbbreviationRepository();\n-\n-        // The order of reading the journal lists is important: last added abbreviation wins\n-        // For instance, in the personal list one can overwrite abbreviations in the built in list\n-\n-        // Read builtin list\n-        journalAbbrev.addEntries(readJournalListFromResource(JOURNALS_FILE_BUILTIN));\n-\n-        // Read IEEE list\n-        if (journalAbbreviationPreferences.useIEEEAbbreviations()) {\n-            journalAbbrev.addEntries(getOfficialIEEEAbbreviations());\n-        } else {\n-            journalAbbrev.addEntries(getStandardIEEEAbbreviations());\n+    public static void writeDefaultDatabase(Path targetDirectory) {\n+        try (MVStore store = MVStore.open(targetDirectory.resolve(\"journalList.mv\").getParent().toString())) {\n+            MVMap<String, String> fullToAbbreviation = store.openMap(\"FullToAbbreviation\");\n+\n+            // Add all standard abbreviations\n+            fullToAbbreviation.putAll(\n+                    getBuiltInAbbreviations()\n+                            .stream()\n+                            .collect(Collectors.toMap(Abbreviation::getName, Abbreviation::getAbbreviation))\n+            );\n+\n+            // Add all IEEE abbreviations\n+            fullToAbbreviation.putAll(\n+                    getStandardIEEEAbbreviations()\n+                            .stream()\n+                            .collect(Collectors.toMap(Abbreviation::getName, Abbreviation::getAbbreviation))\n+            );\n+\n+            MVMap<String, String> abbreviationToFull = store.openMap(\"AbbreviationToFull\");\n+\n+            // Add all standard abbreviations\n+            abbreviationToFull.putAll(\n+                    getBuiltInAbbreviations()\n+                            .stream()\n+                            .collect(Collectors.toMap(Abbreviation::getAbbreviation, Abbreviation::getName))\n+            );\n+\n+            // Add all IEEE abbreviations\n+            abbreviationToFull.putAll(\n+                    getStandardIEEEAbbreviations()\n+                            .stream()\n+                            .collect(Collectors.toMap(Abbreviation::getAbbreviation, Abbreviation::getName))\n+            );\n+            //store.commit();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5NTYyMg=="}, "originalCommit": {"oid": "efa5b1aa37f84be772888d23547cd69bcd946859"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzgyNDg3OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/jabref/logic/integrity/IntegrityCheckTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoyMDo1OVrOGK6ewQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjoxNjoxM1rOGLU5dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5NzA4OQ==", "bodyText": "Just stumbled over this - can we get rid of true and false somehow? - enums maybe?", "url": "https://github.com/JabRef/jabref/pull/6304#discussion_r414097089", "createdAt": "2020-04-23T20:20:59Z", "author": {"login": "koppor"}, "path": "src/test/java/org/jabref/logic/integrity/IntegrityCheckTest.java", "diffHunk": "@@ -368,7 +367,7 @@ void testEntryIsUnchangedAfterChecks() {\n         new IntegrityCheck(context,\n                 mock(FilePreferences.class),\n                 createBibtexKeyPatternPreferences(),\n-                           new JournalAbbreviationRepository(new Abbreviation(\"IEEE Software\", \"IEEE SW\")), true, false)\n+                new JournalAbbreviationRepository(), true, false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efa5b1aa37f84be772888d23547cd69bcd946859"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyOTkxMQ==", "bodyText": "I don't see anything wrong with these booleans (and it's not related to this PR anyway)", "url": "https://github.com/JabRef/jabref/pull/6304#discussion_r414529911", "createdAt": "2020-04-24T12:16:13Z", "author": {"login": "tobiasdiez"}, "path": "src/test/java/org/jabref/logic/integrity/IntegrityCheckTest.java", "diffHunk": "@@ -368,7 +367,7 @@ void testEntryIsUnchangedAfterChecks() {\n         new IntegrityCheck(context,\n                 mock(FilePreferences.class),\n                 createBibtexKeyPatternPreferences(),\n-                           new JournalAbbreviationRepository(new Abbreviation(\"IEEE Software\", \"IEEE SW\")), true, false)\n+                new JournalAbbreviationRepository(), true, false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5NzA4OQ=="}, "originalCommit": {"oid": "efa5b1aa37f84be772888d23547cd69bcd946859"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MzIwMjA2OnYy", "diffSide": "RIGHT", "path": "buildSrc/build.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxNjoxNTo0MlrOGMGpOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxNjoxNTo0MlrOGMGpOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM0NDk1Mg==", "bodyText": "Maven local can be removed (only useful if you have gradle + maven builds in your system), will speed up the build.", "url": "https://github.com/JabRef/jabref/pull/6304#discussion_r415344952", "createdAt": "2020-04-26T16:15:42Z", "author": {"login": "Siedlerchr"}, "path": "buildSrc/build.gradle", "diffHunk": "@@ -0,0 +1,20 @@\n+apply plugin: 'java'\n+\n+repositories {\n+    mavenLocal()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f89e25c2786f982e721c0eb1f3910e391a2f6aa"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MzIwNjkwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/journals/AbbreviationViewModel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxNjoxODozNFrOGMGreg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxNjoxODozNFrOGMGreg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM0NTUzMA==", "bodyText": "Use Objects.equals(...) to make it more consistent with other implementations", "url": "https://github.com/JabRef/jabref/pull/6304#discussion_r415345530", "createdAt": "2020-04-26T16:18:34Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/gui/journals/AbbreviationViewModel.java", "diffHunk": "@@ -80,16 +78,20 @@ public BooleanProperty isPseudoAbbreviationProperty() {\n     }\n \n     @Override\n-    public int hashCode() {\n-        return Objects.hash(abbreviationObject);\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        AbbreviationViewModel that = (AbbreviationViewModel) o;\n+        return getName().equals(that.getName()) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f89e25c2786f982e721c0eb1f3910e391a2f6aa"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MzIwODY0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/journals/ManageJournalAbbreviationsView.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxNjoxOTozNFrOGMGsSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxODo0NzowMlrOGMIcNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM0NTczNg==", "bodyText": "I do not really understand this line. Why is this necessary?", "url": "https://github.com/JabRef/jabref/pull/6304#discussion_r415345736", "createdAt": "2020-04-26T16:19:34Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/gui/journals/ManageJournalAbbreviationsView.java", "diffHunk": "@@ -145,7 +147,11 @@ private void removeAbbreviation() {\n \n     @FXML\n     private void saveAbbreviationsAndCloseDialog() {\n-        viewModel.saveEverythingAndUpdateAutoCompleter();\n+        viewModel.save();\n+\n+        // Update journal abbreviation loader\n+        Globals.journalAbbreviationRepository = JournalAbbreviationLoader.loadRepository(preferences.getJournalAbbreviationPreferences());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f89e25c2786f982e721c0eb1f3910e391a2f6aa"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM3NDM5MQ==", "bodyText": "If the user changes the abbreviations, these changes must be reflected in the global repository.", "url": "https://github.com/JabRef/jabref/pull/6304#discussion_r415374391", "createdAt": "2020-04-26T18:47:02Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/journals/ManageJournalAbbreviationsView.java", "diffHunk": "@@ -145,7 +147,11 @@ private void removeAbbreviation() {\n \n     @FXML\n     private void saveAbbreviationsAndCloseDialog() {\n-        viewModel.saveEverythingAndUpdateAutoCompleter();\n+        viewModel.save();\n+\n+        // Update journal abbreviation loader\n+        Globals.journalAbbreviationRepository = JournalAbbreviationLoader.loadRepository(preferences.getJournalAbbreviationPreferences());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM0NTczNg=="}, "originalCommit": {"oid": "2f89e25c2786f982e721c0eb1f3910e391a2f6aa"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MzIxMzAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/journals/AbbreviationParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxNjoyMTo1OVrOGMGuPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxNjoyMTo1OVrOGMGuPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM0NjIzNw==", "bodyText": "Possible resource leak? I don't see where the reader is closed.", "url": "https://github.com/JabRef/jabref/pull/6304#discussion_r415346237", "createdAt": "2020-04-26T16:21:59Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/logic/journals/AbbreviationParser.java", "diffHunk": "@@ -33,32 +30,20 @@\n \n     public void readJournalListFromResource(String resourceFileName) {\n         try {\n-            URL url = Objects.requireNonNull(JournalAbbreviationRepository.class.getResource(Objects.requireNonNull(resourceFileName)));\n-            readJournalList(new InputStreamReader(url.openStream(), StandardCharsets.UTF_8));\n+            InputStream stream = JournalAbbreviationRepository.class.getResourceAsStream(resourceFileName);\n+            readJournalList(new BufferedReader(new InputStreamReader(stream, StandardCharsets.UTF_8)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f89e25c2786f982e721c0eb1f3910e391a2f6aa"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MzIxNDY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/journals/JournalAbbreviationLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxNjoyMzowOVrOGMGu-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxNjoyMzowOVrOGMGu-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM0NjQyNA==", "bodyText": "We have to check if this also works in the jlink/jpackage version.", "url": "https://github.com/JabRef/jabref/pull/6304#discussion_r415346424", "createdAt": "2020-04-26T16:23:09Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/logic/journals/JournalAbbreviationLoader.java", "diffHunk": "@@ -14,58 +16,42 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(JournalAbbreviationLoader.class);\n \n-    // Journal initialization\n     private static final String JOURNALS_FILE_BUILTIN = \"/journals/journalList.csv\";\n-    private static final String JOURNALS_IEEE_ABBREVIATION_LIST_WITH_CODE = \"/journals/IEEEJournalListCode.csv\";\n-    private static final String JOURNALS_IEEE_ABBREVIATION_LIST_WITH_TEXT = \"/journals/IEEEJournalListText.csv\";\n-    private JournalAbbreviationRepository journalAbbrev;\n-\n-    public static List<Abbreviation> getOfficialIEEEAbbreviations() {\n-        return readJournalListFromResource(JOURNALS_IEEE_ABBREVIATION_LIST_WITH_CODE);\n-    }\n-\n-    public static List<Abbreviation> getStandardIEEEAbbreviations() {\n-        return readJournalListFromResource(JOURNALS_IEEE_ABBREVIATION_LIST_WITH_TEXT);\n-    }\n \n     public static List<Abbreviation> getBuiltInAbbreviations() {\n         return readJournalListFromResource(JOURNALS_FILE_BUILTIN);\n     }\n \n-    public static List<Abbreviation> readJournalListFromResource(String resource) {\n+    private static List<Abbreviation> readJournalListFromResource(String resource) {\n         AbbreviationParser parser = new AbbreviationParser();\n         parser.readJournalListFromResource(Objects.requireNonNull(resource));\n         return parser.getAbbreviations();\n     }\n \n-    public static List<Abbreviation> readJournalListFromFile(File file) throws FileNotFoundException {\n+    public static List<Abbreviation> readJournalListFromFile(Path file) throws IOException {\n         LOGGER.debug(String.format(\"Reading journal list from file %s\", file));\n         AbbreviationParser parser = new AbbreviationParser();\n-        parser.readJournalListFromFile(Objects.requireNonNull(file));\n+        parser.readJournalListFromFile(file);\n         return parser.getAbbreviations();\n     }\n \n-    public static List<Abbreviation> readJournalListFromFile(File file, Charset encoding) throws FileNotFoundException {\n+    private static List<Abbreviation> readJournalListFromFile(Path file, Charset encoding) throws IOException {\n         LOGGER.debug(String.format(\"Reading journal list from file %s\", file));\n         AbbreviationParser parser = new AbbreviationParser();\n-        parser.readJournalListFromFile(Objects.requireNonNull(file), Objects.requireNonNull(encoding));\n+        parser.readJournalListFromFile(file, Objects.requireNonNull(encoding));\n         return parser.getAbbreviations();\n     }\n \n-    public void update(JournalAbbreviationPreferences journalAbbreviationPreferences) {\n-        journalAbbrev = new JournalAbbreviationRepository();\n-\n-        // The order of reading the journal lists is important: last added abbreviation wins\n-        // For instance, in the personal list one can overwrite abbreviations in the built in list\n-\n-        // Read builtin list\n-        journalAbbrev.addEntries(readJournalListFromResource(JOURNALS_FILE_BUILTIN));\n-\n-        // Read IEEE list\n-        if (journalAbbreviationPreferences.useIEEEAbbreviations()) {\n-            journalAbbrev.addEntries(getOfficialIEEEAbbreviations());\n-        } else {\n-            journalAbbrev.addEntries(getStandardIEEEAbbreviations());\n+    public static JournalAbbreviationRepository loadRepository(JournalAbbreviationPreferences journalAbbreviationPreferences) {\n+        JournalAbbreviationRepository repository;\n+        // Initialize with built-in list\n+        try {\n+            Path tempJournalList = Files.createTempDirectory(\"journal\").resolve(\"journalList.mv\");\n+            Files.copy(JournalAbbreviationRepository.class.getResourceAsStream(\"/journals/journalList.mv\"), tempJournalList);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f89e25c2786f982e721c0eb1f3910e391a2f6aa"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MzIxNzUzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/journals/JournalAbbreviationRepository.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxNjoyNDo1NlrOGMGwSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxNjoyNDo1NlrOGMGwSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM0Njc2MA==", "bodyText": "Combine both returns with an OR?", "url": "https://github.com/JabRef/jabref/pull/6304#discussion_r415346760", "createdAt": "2020-04-26T16:24:56Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/logic/journals/JournalAbbreviationRepository.java", "diffHunk": "@@ -36,65 +42,89 @@ private static boolean isMatchedAbbreviated(String name, Abbreviation abbreviati\n         return isAbbreviated && !isExpanded;\n     }\n \n-    public int size() {\n-        return abbreviations.size();\n-    }\n-\n     /**\n      * Returns true if the given journal name is contained in the list either in its full form (e.g Physical Review\n      * Letters) or its abbreviated form (e.g. Phys. Rev. Lett.).\n      */\n     public boolean isKnownName(String journalName) {\n-        return abbreviations.stream().anyMatch(abbreviation -> isMatched(journalName.trim(), abbreviation));\n+        String journal = journalName.trim();\n+\n+        boolean isKnown = customAbbreviations.stream().anyMatch(abbreviation -> isMatched(journal, abbreviation));\n+        if (isKnown) {\n+            return true;\n+        }\n+\n+        return fullToAbbreviation.containsKey(journal) || abbreviationToFull.containsKey(journal);\n     }\n \n     /**\n      * Returns true if the given journal name is in its abbreviated form (e.g. Phys. Rev. Lett.). The test is strict,\n      * i.e. journals whose abbreviation is the same as the full name are not considered\n      */\n     public boolean isAbbreviatedName(String journalName) {\n-        return abbreviations.stream().anyMatch(abbreviation -> isMatchedAbbreviated(journalName.trim(), abbreviation));\n+        String journal = journalName.trim();\n+\n+        boolean isAbbreviated = customAbbreviations.stream().anyMatch(abbreviation -> isMatchedAbbreviated(journal, abbreviation));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f89e25c2786f982e721c0eb1f3910e391a2f6aa"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTc4ODQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/exporter/CreateModifyExporterDialogView.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwODowMTozMlrOGOeKZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwODowMTozMlrOGOeKZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzgyNzQzMA==", "bodyText": "@Inject does not seem right, as DialogService and PreferencesService are injected by the constructor in this class too...", "url": "https://github.com/JabRef/jabref/pull/6304#discussion_r417827430", "createdAt": "2020-04-30T08:01:32Z", "author": {"login": "calixtus"}, "path": "src/main/java/org/jabref/gui/exporter/CreateModifyExporterDialogView.java", "diffHunk": "@@ -10,30 +10,29 @@\n \n import org.jabref.gui.DialogService;\n import org.jabref.gui.util.BaseDialog;\n-import org.jabref.logic.journals.JournalAbbreviationLoader;\n+import org.jabref.logic.journals.JournalAbbreviationRepository;\n import org.jabref.logic.l10n.Localization;\n import org.jabref.preferences.PreferencesService;\n \n import com.airhacks.afterburner.views.ViewLoader;\n \n public class CreateModifyExporterDialogView extends BaseDialog<ExporterViewModel> {\n \n-    @Inject private final JournalAbbreviationLoader loader;\n+    @Inject private JournalAbbreviationRepository repository;\n     private final ExporterViewModel exporter;\n     @FXML private Button browseButton;\n     @FXML private TextField name;\n     @FXML private TextField fileName;\n     @FXML private TextField extension;\n     @FXML private ButtonType saveExporter;\n-    @Inject private DialogService dialogService;\n-    @Inject private PreferencesService preferences;\n+    @Inject private final DialogService dialogService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3804fd0fd63c3d60d9f584013a2e7cc279a506a"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTc5Mzk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/exporter/ExportCustomizationDialogViewModel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwODowMzoyNFrOGOeOGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwODowMzoyNFrOGOeOGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzgyODM3OQ==", "bodyText": "Accidental line break?", "url": "https://github.com/JabRef/jabref/pull/6304#discussion_r417828379", "createdAt": "2020-04-30T08:03:24Z", "author": {"login": "calixtus"}, "path": "src/main/java/org/jabref/gui/exporter/ExportCustomizationDialogViewModel.java", "diffHunk": "@@ -21,25 +21,25 @@\n \n     private final PreferencesService preferences;\n     private final DialogService dialogService;\n-    private final JournalAbbreviationLoader loader;\n+    private final JournalAbbreviationRepository repository;\n \n-    public ExportCustomizationDialogViewModel(PreferencesService preferences, DialogService dialogService, JournalAbbreviationLoader loader) {\n+    public ExportCustomizationDialogViewModel(PreferencesService preferences, DialogService dialogService, JournalAbbreviationRepository repository) {\n         this.preferences = preferences;\n         this.dialogService = dialogService;\n-        this.loader = loader;\n+        this.repository = repository;\n         loadExporters();\n     }\n \n     private void loadExporters() {\n-        List<TemplateExporter> exportersLogic = preferences.getCustomExportFormats(loader);\n+        List<TemplateExporter> exportersLogic = preferences.getCustomExportFormats(repository);\n         for (TemplateExporter exporter : exportersLogic) {\n             exporters.add(new ExporterViewModel(exporter));\n         }\n     }\n \n     public void addExporter() {\n-        CreateModifyExporterDialogView dialog = new CreateModifyExporterDialogView(null, dialogService, preferences,\n-                loader);\n+        CreateModifyExporterDialogView dialog = new CreateModifyExporterDialogView(null, dialogService, preferences\n+        );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3804fd0fd63c3d60d9f584013a2e7cc279a506a"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTg1MTcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/preferences/JabRefPreferences.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwODoyMDo0NFrOGOezJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwODoyMDo0NFrOGOezJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzgzNzg2MQ==", "bodyText": "Indentation seems off", "url": "https://github.com/JabRef/jabref/pull/6304#discussion_r417837861", "createdAt": "2020-04-30T08:20:44Z", "author": {"login": "calixtus"}, "path": "src/main/java/org/jabref/preferences/JabRefPreferences.java", "diffHunk": "@@ -1300,10 +1296,10 @@ public BibtexKeyPatternPreferences getBibtexKeyPatternPreferences() {\n     }\n \n     @Override\n-    public LayoutFormatterPreferences getLayoutFormatterPreferences(JournalAbbreviationLoader journalAbbreviationLoader) {\n-        Objects.requireNonNull(journalAbbreviationLoader);\n-        return new LayoutFormatterPreferences(getNameFormatterPreferences(), getJournalAbbreviationPreferences(),\n-                                              getFileLinkPreferences(), journalAbbreviationLoader);\n+    public LayoutFormatterPreferences getLayoutFormatterPreferences(JournalAbbreviationRepository repository) {\n+        return new LayoutFormatterPreferences(getNameFormatterPreferences(),\n+                                              getFileLinkPreferences(),\n+                repository);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3804fd0fd63c3d60d9f584013a2e7cc279a506a"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzU2MzcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/journals/JournalAbbreviationRepository.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNTo1ODo0N1rOGPC1WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNTo1ODo0N1rOGPC1WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyODI0OQ==", "bodyText": "The following two lines are a bit irritating for Java beginners, so I would suggest to keep the old comment on them.", "url": "https://github.com/JabRef/jabref/pull/6304#discussion_r418428249", "createdAt": "2020-05-01T05:58:47Z", "author": {"login": "calixtus"}, "path": "src/main/java/org/jabref/logic/journals/JournalAbbreviationRepository.java", "diffHunk": "@@ -36,65 +42,86 @@ private static boolean isMatchedAbbreviated(String name, Abbreviation abbreviati\n         return isAbbreviated && !isExpanded;\n     }\n \n-    public int size() {\n-        return abbreviations.size();\n-    }\n-\n     /**\n      * Returns true if the given journal name is contained in the list either in its full form (e.g Physical Review\n      * Letters) or its abbreviated form (e.g. Phys. Rev. Lett.).\n      */\n     public boolean isKnownName(String journalName) {\n-        return abbreviations.stream().anyMatch(abbreviation -> isMatched(journalName.trim(), abbreviation));\n+        String journal = journalName.trim();\n+\n+        boolean isKnown = customAbbreviations.stream().anyMatch(abbreviation -> isMatched(journal, abbreviation));\n+        if (isKnown) {\n+            return true;\n+        }\n+\n+        return fullToAbbreviation.containsKey(journal) || abbreviationToFull.containsKey(journal);\n     }\n \n     /**\n      * Returns true if the given journal name is in its abbreviated form (e.g. Phys. Rev. Lett.). The test is strict,\n      * i.e. journals whose abbreviation is the same as the full name are not considered\n      */\n     public boolean isAbbreviatedName(String journalName) {\n-        return abbreviations.stream().anyMatch(abbreviation -> isMatchedAbbreviated(journalName.trim(), abbreviation));\n+        String journal = journalName.trim();\n+\n+        return customAbbreviations.stream().anyMatch(abbreviation -> isMatchedAbbreviated(journal, abbreviation))\n+                ||\n+                abbreviationToFull.containsKey(journal);\n     }\n \n     /**\n-     * Attempts to get the abbreviated name of the journal given. May contain dots.\n+     * Attempts to get the abbreviation of the journal given.\n      *\n-     * @param journalName The journal name to abbreviate.\n-     * @return The abbreviated name\n+     * @param input The journal name (either abbreviated or full name).\n      */\n-    public Optional<Abbreviation> getAbbreviation(String journalName) {\n-        return abbreviations.stream().filter(abbreviation -> isMatched(journalName.trim(), abbreviation)).findFirst();\n+    public Optional<Abbreviation> get(String input) {\n+        String journal = input.trim();\n+\n+        Optional<Abbreviation> customAbbreviation = customAbbreviations.stream()\n+                                                                       .filter(abbreviation -> isMatched(journal, abbreviation))\n+                                                                       .findAny();\n+        if (customAbbreviation.isPresent()) {\n+            return customAbbreviation;\n+        }\n+\n+        return Optional.ofNullable(fullToAbbreviation.get(journal))\n+                       .map(abbreviation -> new Abbreviation(journal, abbreviation))\n+                       .or(() -> Optional.ofNullable(abbreviationToFull.get(journal)).map(fullName -> new Abbreviation(fullName, journal)));\n     }\n \n-    public void addEntry(Abbreviation abbreviation) {\n+    public void addCustomAbbreviation(Abbreviation abbreviation) {\n         Objects.requireNonNull(abbreviation);\n \n-        // Abbreviation equality is tested on name only, so we might have to remove an old abbreviation\n-        abbreviations.remove(abbreviation);\n-        abbreviations.add(abbreviation);\n+        // We do not want to keep duplicates, thus remove the old abbreviation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3804fd0fd63c3d60d9f584013a2e7cc279a506a"}, "originalPosition": 108}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1926, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}