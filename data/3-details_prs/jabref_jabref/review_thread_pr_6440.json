{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0NjA2NDI5", "number": 6440, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMTo0OTowNVrOD6bvEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMjo1NTowMFrOD6zbUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTk4NDE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/maintable/MainTable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMTo0OTowNVrOGSRizg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMTo0OTowNVrOGSRizg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgxNDk5MA==", "bodyText": "How does this scale on large libraries? Can you please test this to be sure?", "url": "https://github.com/JabRef/jabref/pull/6440#discussion_r421814990", "createdAt": "2020-05-07T21:49:05Z", "author": {"login": "calixtus"}, "path": "src/main/java/org/jabref/gui/maintable/MainTable.java", "diffHunk": "@@ -123,6 +137,19 @@ public MainTable(MainTableDataModel model, JabRefFrame frame,\n         database.getDatabase().registerListener(this);\n     }\n \n+    private int getEntryIndexByInput(TableColumn<BibEntryTableViewModel, ?> column, char target_char) {\n+        for (int i = 0; i < this.getItems().size(); ++i) {\n+            Object temp = column.getCellObservableValue(i).getValue();\n+            if (temp == null) {\n+                continue;\n+            }\n+            if (temp.toString().toLowerCase().charAt(0) == target_char) {\n+                return i;\n+            }\n+        }\n+        return -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "047f0424b22c8d712c7b5717054d1b7d83dc9763"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyODM4Mjg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/maintable/MainTable.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNDozMzozMlrOGSnuJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNTo0NzozMlrOGSqOFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE3ODM0MA==", "bodyText": "You can put these statements inside the lambda expression in multiple lines.\nSorry, I think my previous comment was a bit misunderstandable.\nBesides that, it looks good to me. let's see what a second developer says.", "url": "https://github.com/JabRef/jabref/pull/6440#discussion_r422178340", "createdAt": "2020-05-08T14:33:32Z", "author": {"login": "calixtus"}, "path": "src/main/java/org/jabref/gui/maintable/MainTable.java", "diffHunk": "@@ -123,6 +134,35 @@ public MainTable(MainTableDataModel model, JabRefFrame frame,\n         database.getDatabase().registerListener(this);\n     }\n \n+    /**\n+     * This is called, if a user starts typing some characters into the keyboard with focus on main table.\n+     * The tableview will scroll to the cell with the same starting column value and typed string\n+     * @param sortedColumn The ListView currently focused\n+     * @param keyEvent The pressed character\n+     */\n+\n+    private void jumpToSearchKey(TableColumn<BibEntryTableViewModel, ?> sortedColumn, KeyEvent keyEvent) {\n+        if (keyEvent.getCharacter() == null || sortedColumn == null) {\n+            return;\n+        }\n+\n+        if (System.currentTimeMillis() - lastKeyPressTime < 700) {\n+            columnSearchTerm += keyEvent.getCharacter().toLowerCase();\n+        } else {\n+            columnSearchTerm = keyEvent.getCharacter().toLowerCase();\n+        }\n+\n+        lastKeyPressTime = System.currentTimeMillis();\n+\n+        this.getItems().stream()\n+            .filter(item -> Optional.ofNullable(sortedColumn.getCellObservableValue(item).getValue())\n+                                    .map(Object::toString)\n+                                    .orElse(\"\")\n+                                    .toLowerCase().startsWith(columnSearchTerm))\n+            .findFirst()\n+            .ifPresent(item -> { this.scrollTo(item); this.clearAndSelect(item.getEntry()); });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b427a39a923b2880dacb21b47bb5e6123b8aa38"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIwMTU3NQ==", "bodyText": "Sorry, I don't quite understand what your mean. You mean I should shrink the code in the lambda expression into one or two lines instead of occupying multiple lines?", "url": "https://github.com/JabRef/jabref/pull/6440#discussion_r422201575", "createdAt": "2020-05-08T15:14:12Z", "author": {"login": "leitianjian"}, "path": "src/main/java/org/jabref/gui/maintable/MainTable.java", "diffHunk": "@@ -123,6 +134,35 @@ public MainTable(MainTableDataModel model, JabRefFrame frame,\n         database.getDatabase().registerListener(this);\n     }\n \n+    /**\n+     * This is called, if a user starts typing some characters into the keyboard with focus on main table.\n+     * The tableview will scroll to the cell with the same starting column value and typed string\n+     * @param sortedColumn The ListView currently focused\n+     * @param keyEvent The pressed character\n+     */\n+\n+    private void jumpToSearchKey(TableColumn<BibEntryTableViewModel, ?> sortedColumn, KeyEvent keyEvent) {\n+        if (keyEvent.getCharacter() == null || sortedColumn == null) {\n+            return;\n+        }\n+\n+        if (System.currentTimeMillis() - lastKeyPressTime < 700) {\n+            columnSearchTerm += keyEvent.getCharacter().toLowerCase();\n+        } else {\n+            columnSearchTerm = keyEvent.getCharacter().toLowerCase();\n+        }\n+\n+        lastKeyPressTime = System.currentTimeMillis();\n+\n+        this.getItems().stream()\n+            .filter(item -> Optional.ofNullable(sortedColumn.getCellObservableValue(item).getValue())\n+                                    .map(Object::toString)\n+                                    .orElse(\"\")\n+                                    .toLowerCase().startsWith(columnSearchTerm))\n+            .findFirst()\n+            .ifPresent(item -> { this.scrollTo(item); this.clearAndSelect(item.getEntry()); });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE3ODM0MA=="}, "originalCommit": {"oid": "1b427a39a923b2880dacb21b47bb5e6123b8aa38"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIxOTI4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .ifPresent(item -> { this.scrollTo(item); this.clearAndSelect(item.getEntry()); });\n          \n          \n            \n                        .ifPresent(item -> {\n          \n          \n            \n                            this.scrollTo(item);\n          \n          \n            \n                            this.clearAndSelect(item.getEntry());\n          \n          \n            \n                        });", "url": "https://github.com/JabRef/jabref/pull/6440#discussion_r422219286", "createdAt": "2020-05-08T15:47:32Z", "author": {"login": "calixtus"}, "path": "src/main/java/org/jabref/gui/maintable/MainTable.java", "diffHunk": "@@ -123,6 +134,35 @@ public MainTable(MainTableDataModel model, JabRefFrame frame,\n         database.getDatabase().registerListener(this);\n     }\n \n+    /**\n+     * This is called, if a user starts typing some characters into the keyboard with focus on main table.\n+     * The tableview will scroll to the cell with the same starting column value and typed string\n+     * @param sortedColumn The ListView currently focused\n+     * @param keyEvent The pressed character\n+     */\n+\n+    private void jumpToSearchKey(TableColumn<BibEntryTableViewModel, ?> sortedColumn, KeyEvent keyEvent) {\n+        if (keyEvent.getCharacter() == null || sortedColumn == null) {\n+            return;\n+        }\n+\n+        if (System.currentTimeMillis() - lastKeyPressTime < 700) {\n+            columnSearchTerm += keyEvent.getCharacter().toLowerCase();\n+        } else {\n+            columnSearchTerm = keyEvent.getCharacter().toLowerCase();\n+        }\n+\n+        lastKeyPressTime = System.currentTimeMillis();\n+\n+        this.getItems().stream()\n+            .filter(item -> Optional.ofNullable(sortedColumn.getCellObservableValue(item).getValue())\n+                                    .map(Object::toString)\n+                                    .orElse(\"\")\n+                                    .toLowerCase().startsWith(columnSearchTerm))\n+            .findFirst()\n+            .ifPresent(item -> { this.scrollTo(item); this.clearAndSelect(item.getEntry()); });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE3ODM0MA=="}, "originalCommit": {"oid": "1b427a39a923b2880dacb21b47bb5e6123b8aa38"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTg2NDAxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/maintable/MainTable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMjo1Mzo0OFrOGS15tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMTozOTo0MFrOGS3mxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQxMDY3OQ==", "bodyText": "Please check for emptyness using .isEmpty().", "url": "https://github.com/JabRef/jabref/pull/6440#discussion_r422410679", "createdAt": "2020-05-08T22:53:48Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/gui/maintable/MainTable.java", "diffHunk": "@@ -57,11 +58,21 @@\n     private final ImportHandler importHandler;\n     private final CustomLocalDragboard localDragboard;\n \n+    private long lastKeyPressTime;\n+    private String columnSearchTerm;\n+\n     public MainTable(MainTableDataModel model, JabRefFrame frame,\n                      BasePanel panel, BibDatabaseContext database,\n                      MainTablePreferences preferences, ExternalFileTypes externalFileTypes, KeyBindingRepository keyBindingRepository) {\n         super();\n \n+        this.setOnKeyTyped(key -> {\n+            if (this.getSortOrder().size() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a37b8a3b5fef62f25b00c525344260209c2bef09"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzODU5Ng==", "bodyText": "Yeah, It is much better than checking the size, I will modify it. Thanks for your suggestions", "url": "https://github.com/JabRef/jabref/pull/6440#discussion_r422438596", "createdAt": "2020-05-09T01:39:40Z", "author": {"login": "leitianjian"}, "path": "src/main/java/org/jabref/gui/maintable/MainTable.java", "diffHunk": "@@ -57,11 +58,21 @@\n     private final ImportHandler importHandler;\n     private final CustomLocalDragboard localDragboard;\n \n+    private long lastKeyPressTime;\n+    private String columnSearchTerm;\n+\n     public MainTable(MainTableDataModel model, JabRefFrame frame,\n                      BasePanel panel, BibDatabaseContext database,\n                      MainTablePreferences preferences, ExternalFileTypes externalFileTypes, KeyBindingRepository keyBindingRepository) {\n         super();\n \n+        this.setOnKeyTyped(key -> {\n+            if (this.getSortOrder().size() == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQxMDY3OQ=="}, "originalCommit": {"oid": "a37b8a3b5fef62f25b00c525344260209c2bef09"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTg2NDczOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/maintable/MainTable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMjo1NDoxNVrOGS16KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMTo1NDoxM1rOGS3r6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQxMDc5Mg==", "bodyText": "@param and the text should be separated by one empty line.\nI think, this is done by the intelliJ auto formatter", "url": "https://github.com/JabRef/jabref/pull/6440#discussion_r422410792", "createdAt": "2020-05-08T22:54:15Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/gui/maintable/MainTable.java", "diffHunk": "@@ -123,6 +134,38 @@ public MainTable(MainTableDataModel model, JabRefFrame frame,\n         database.getDatabase().registerListener(this);\n     }\n \n+    /**\n+     * This is called, if a user starts typing some characters into the keyboard with focus on main table.\n+     * The tableview will scroll to the cell with the same starting column value and typed string\n+     * @param sortedColumn The ListView currently focused", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a37b8a3b5fef62f25b00c525344260209c2bef09"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzOTkxMg==", "bodyText": "Yeah, The empty line is necessary. I did not notice that before", "url": "https://github.com/JabRef/jabref/pull/6440#discussion_r422439912", "createdAt": "2020-05-09T01:54:13Z", "author": {"login": "leitianjian"}, "path": "src/main/java/org/jabref/gui/maintable/MainTable.java", "diffHunk": "@@ -123,6 +134,38 @@ public MainTable(MainTableDataModel model, JabRefFrame frame,\n         database.getDatabase().registerListener(this);\n     }\n \n+    /**\n+     * This is called, if a user starts typing some characters into the keyboard with focus on main table.\n+     * The tableview will scroll to the cell with the same starting column value and typed string\n+     * @param sortedColumn The ListView currently focused", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQxMDc5Mg=="}, "originalCommit": {"oid": "a37b8a3b5fef62f25b00c525344260209c2bef09"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTg2NTc5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/maintable/MainTable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMjo1NTowMFrOGS161Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMTo1MjozNVrOGS3rVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQxMDk2NQ==", "bodyText": "Please put .startsWith in the next line to have all . calls in a separate line.", "url": "https://github.com/JabRef/jabref/pull/6440#discussion_r422410965", "createdAt": "2020-05-08T22:55:00Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/gui/maintable/MainTable.java", "diffHunk": "@@ -123,6 +134,38 @@ public MainTable(MainTableDataModel model, JabRefFrame frame,\n         database.getDatabase().registerListener(this);\n     }\n \n+    /**\n+     * This is called, if a user starts typing some characters into the keyboard with focus on main table.\n+     * The tableview will scroll to the cell with the same starting column value and typed string\n+     * @param sortedColumn The ListView currently focused\n+     * @param keyEvent The pressed character\n+     */\n+\n+    private void jumpToSearchKey(TableColumn<BibEntryTableViewModel, ?> sortedColumn, KeyEvent keyEvent) {\n+        if (keyEvent.getCharacter() == null || sortedColumn == null) {\n+            return;\n+        }\n+\n+        if (System.currentTimeMillis() - lastKeyPressTime < 700) {\n+            columnSearchTerm += keyEvent.getCharacter().toLowerCase();\n+        } else {\n+            columnSearchTerm = keyEvent.getCharacter().toLowerCase();\n+        }\n+\n+        lastKeyPressTime = System.currentTimeMillis();\n+\n+        this.getItems().stream()\n+            .filter(item -> Optional.ofNullable(sortedColumn.getCellObservableValue(item).getValue())\n+                                    .map(Object::toString)\n+                                    .orElse(\"\")\n+                                    .toLowerCase().startsWith(columnSearchTerm))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a37b8a3b5fef62f25b00c525344260209c2bef09"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzOTc2NA==", "bodyText": "Ok, I wonder should we have all . calls in a separate line when we write stream like code in java?", "url": "https://github.com/JabRef/jabref/pull/6440#discussion_r422439764", "createdAt": "2020-05-09T01:52:35Z", "author": {"login": "leitianjian"}, "path": "src/main/java/org/jabref/gui/maintable/MainTable.java", "diffHunk": "@@ -123,6 +134,38 @@ public MainTable(MainTableDataModel model, JabRefFrame frame,\n         database.getDatabase().registerListener(this);\n     }\n \n+    /**\n+     * This is called, if a user starts typing some characters into the keyboard with focus on main table.\n+     * The tableview will scroll to the cell with the same starting column value and typed string\n+     * @param sortedColumn The ListView currently focused\n+     * @param keyEvent The pressed character\n+     */\n+\n+    private void jumpToSearchKey(TableColumn<BibEntryTableViewModel, ?> sortedColumn, KeyEvent keyEvent) {\n+        if (keyEvent.getCharacter() == null || sortedColumn == null) {\n+            return;\n+        }\n+\n+        if (System.currentTimeMillis() - lastKeyPressTime < 700) {\n+            columnSearchTerm += keyEvent.getCharacter().toLowerCase();\n+        } else {\n+            columnSearchTerm = keyEvent.getCharacter().toLowerCase();\n+        }\n+\n+        lastKeyPressTime = System.currentTimeMillis();\n+\n+        this.getItems().stream()\n+            .filter(item -> Optional.ofNullable(sortedColumn.getCellObservableValue(item).getValue())\n+                                    .map(Object::toString)\n+                                    .orElse(\"\")\n+                                    .toLowerCase().startsWith(columnSearchTerm))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQxMDk2NQ=="}, "originalCommit": {"oid": "a37b8a3b5fef62f25b00c525344260209c2bef09"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1814, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}