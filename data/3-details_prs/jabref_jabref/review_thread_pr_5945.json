{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1MDU1NTQ1", "number": 5945, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMjo1NTowMFrODgCivA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjo0NDo0OVrODhIwTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0OTIyNjg0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/desktop/os/Linux.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMjo1NTowMFrOFqF3Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwODo0NDo1NFrOFqNrfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4MDU4Mw==", "bodyText": "I guess the whole process starting has to be done in a different thread...", "url": "https://github.com/JabRef/jabref/pull/5945#discussion_r379680583", "createdAt": "2020-02-14T22:55:00Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/desktop/os/Linux.java", "diffHunk": "@@ -53,17 +56,18 @@ public void openFileWithApplication(String filePath, String application) throws\n         } else {\n             openWith = new String[] {\"xdg-open\"};\n         }\n-\n         String[] cmdArray = new String[openWith.length + 1];\n         System.arraycopy(openWith, 0, cmdArray, 0, openWith.length);\n         cmdArray[cmdArray.length - 1] = filePath;\n-        Process p = Runtime.getRuntime().exec(cmdArray);\n+\n+        Process process = Runtime.getRuntime().exec(cmdArray);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2dad2221bee92b0a31f57d706be5b1081c27bef7"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4OTM1Ng==", "bodyText": "That's totally weird as to what I read about is that the process is executed and only if you call waitFor the app blocks. https://www.javaworld.com/article/2071275/when-runtime-exec---won-t.html\nAnd the stream gobbler is there to capture the output", "url": "https://github.com/JabRef/jabref/pull/5945#discussion_r379689356", "createdAt": "2020-02-14T23:33:48Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/gui/desktop/os/Linux.java", "diffHunk": "@@ -53,17 +56,18 @@ public void openFileWithApplication(String filePath, String application) throws\n         } else {\n             openWith = new String[] {\"xdg-open\"};\n         }\n-\n         String[] cmdArray = new String[openWith.length + 1];\n         System.arraycopy(openWith, 0, cmdArray, 0, openWith.length);\n         cmdArray[cmdArray.length - 1] = filePath;\n-        Process p = Runtime.getRuntime().exec(cmdArray);\n+\n+        Process process = Runtime.getRuntime().exec(cmdArray);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4MDU4Mw=="}, "originalCommit": {"oid": "2dad2221bee92b0a31f57d706be5b1081c27bef7"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgwODYzOA==", "bodyText": "Strange... can you please try the ProcessBuilder, which anyway seems to be the preferred way to start subprocesses. https://docs.oracle.com/javase/6/docs/api/java/lang/ProcessBuilder.html", "url": "https://github.com/JabRef/jabref/pull/5945#discussion_r379808638", "createdAt": "2020-02-15T08:44:54Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/desktop/os/Linux.java", "diffHunk": "@@ -53,17 +56,18 @@ public void openFileWithApplication(String filePath, String application) throws\n         } else {\n             openWith = new String[] {\"xdg-open\"};\n         }\n-\n         String[] cmdArray = new String[openWith.length + 1];\n         System.arraycopy(openWith, 0, cmdArray, 0, openWith.length);\n         cmdArray[cmdArray.length - 1] = filePath;\n-        Process p = Runtime.getRuntime().exec(cmdArray);\n+\n+        Process process = Runtime.getRuntime().exec(cmdArray);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4MDU4Mw=="}, "originalCommit": {"oid": "2dad2221bee92b0a31f57d706be5b1081c27bef7"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDcwODk5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/util/StreamGobbler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjozOTo1NFrOFrupEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjozOTo1NFrOFrupEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM5NzI2Ng==", "bodyText": "Does this need to be closed? Do we need try-with-resources here? If not, please add a comment why the buffered reader is not closed.", "url": "https://github.com/JabRef/jabref/pull/5945#discussion_r381397266", "createdAt": "2020-02-19T16:39:54Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/gui/util/StreamGobbler.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package org.jabref.gui.util;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.function.Consumer;\n+\n+public class StreamGobbler implements Runnable {\n+\n+    private InputStream inputStream;\n+    private Consumer<String> consumer;\n+\n+    public StreamGobbler(InputStream inputStream, Consumer<String> consumer) {\n+        this.inputStream = inputStream;\n+        this.consumer = consumer;\n+    }\n+\n+    @Override\n+    public void run() {\n+        new BufferedReader(new InputStreamReader(inputStream)).lines().forEach(consumer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa516acde2068a10fede07b28e657593407776c0"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDczMDM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/util/StreamGobbler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjo0NDo0OVrOFru2Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjo0NDo0OVrOFru2Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwMDY1NQ==", "bodyText": "Please add a new line at the end of the file", "url": "https://github.com/JabRef/jabref/pull/5945#discussion_r381400655", "createdAt": "2020-02-19T16:44:49Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/gui/util/StreamGobbler.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package org.jabref.gui.util;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.function.Consumer;\n+\n+public class StreamGobbler implements Runnable {\n+\n+    private InputStream inputStream;\n+    private Consumer<String> consumer;\n+\n+    public StreamGobbler(InputStream inputStream, Consumer<String> consumer) {\n+        this.inputStream = inputStream;\n+        this.consumer = consumer;\n+    }\n+\n+    @Override\n+    public void run() {\n+        new BufferedReader(new InputStreamReader(inputStream)).lines().forEach(consumer);\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa516acde2068a10fede07b28e657593407776c0"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2052, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}