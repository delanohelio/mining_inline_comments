{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3MjEzNzk0", "number": 6232, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTozNjoxN1rODt377A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTozOTozN1rODt4AzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDI4OTcyOnYy", "diffSide": "RIGHT", "path": "src/main/java/module-info.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTozNjoxOFrOF_jKig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxODo0NDozOFrOF_4uQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4MDc0Ng==", "bodyText": "is requires annotations really necessary. I remember that I had a few problems with annotations vs jakarta.annotation in the past.", "url": "https://github.com/JabRef/jabref/pull/6232#discussion_r402180746", "createdAt": "2020-04-02T09:36:18Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/module-info.java", "diffHunk": "@@ -82,4 +82,11 @@\n     requires org.antlr.antlr4.runtime;\n     requires flowless;\n     requires org.apache.tika.core;\n+\n+    requires flexmark;\n+    requires flexmark.ext.gfm.strikethrough;\n+    requires flexmark.ext.gfm.tasklist;\n+    requires flexmark.util.ast;\n+    requires flexmark.util.data;\n+    requires annotations;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6d16d54bdacbfbee869513cbbf1282daa6bc8d1"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUzMzk1NQ==", "bodyText": "You're right it's not needed, I was tempted to put @NotNull annotations on parameters but removed them because it doesn't make sense to use them on one class only. Apparently forgot to remove the requires.", "url": "https://github.com/JabRef/jabref/pull/6232#discussion_r402533955", "createdAt": "2020-04-02T18:44:38Z", "author": {"login": "AlexanderGirgis"}, "path": "src/main/java/module-info.java", "diffHunk": "@@ -82,4 +82,11 @@\n     requires org.antlr.antlr4.runtime;\n     requires flowless;\n     requires org.apache.tika.core;\n+\n+    requires flexmark;\n+    requires flexmark.ext.gfm.strikethrough;\n+    requires flexmark.ext.gfm.tasklist;\n+    requires flexmark.util.ast;\n+    requires flexmark.util.data;\n+    requires annotations;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4MDc0Ng=="}, "originalCommit": {"oid": "c6d16d54bdacbfbee869513cbbf1282daa6bc8d1"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDI5NTc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/layout/format/MarkdownFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTozNzo1OFrOF_jOdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMzozOTo0N1rOF_rr5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4MTc0OQ==", "bodyText": "is the HTMLChars formatter still necessary or is the HtmlRenderer already taking care of it?", "url": "https://github.com/JabRef/jabref/pull/6232#discussion_r402181749", "createdAt": "2020-04-02T09:37:58Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/logic/layout/format/MarkdownFormatter.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package org.jabref.logic.layout.format;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import org.jabref.logic.layout.LayoutFormatter;\n+\n+import com.vladsch.flexmark.ext.gfm.strikethrough.StrikethroughExtension;\n+import com.vladsch.flexmark.ext.gfm.tasklist.TaskListExtension;\n+import com.vladsch.flexmark.html.HtmlRenderer;\n+import com.vladsch.flexmark.parser.Parser;\n+import com.vladsch.flexmark.util.ast.Node;\n+import com.vladsch.flexmark.util.data.MutableDataSet;\n+\n+public class MarkdownFormatter implements LayoutFormatter {\n+\n+    private final Parser parser;\n+    private final HtmlRenderer renderer;\n+\n+    public MarkdownFormatter() {\n+        MutableDataSet options = new MutableDataSet();\n+        options.set(Parser.EXTENSIONS, List.of(\n+                StrikethroughExtension.create(),\n+                TaskListExtension.create()\n+        ));\n+\n+        parser = Parser.builder(options).build();\n+        renderer = HtmlRenderer.builder(options).build();\n+    }\n+\n+    @Override\n+    public String format(final String fieldText) {\n+        Objects.requireNonNull(fieldText, \"Field Text should not be null, when handed to formatter\");\n+\n+        Node document = parser.parse(fieldText);\n+        String html = renderer.render(document);\n+\n+        // workaround HTMLChars transforming \"\\n\" into <br> by returning a one liner", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6d16d54bdacbfbee869513cbbf1282daa6bc8d1"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMyMDM1OQ==", "bodyText": "It's needed to be checked whether the HtmlRenderer does some \"Magic\". Without guessing, I would gess not...\nThe HTMLChars formatter does:", "url": "https://github.com/JabRef/jabref/pull/6232#discussion_r402320359", "createdAt": "2020-04-02T13:39:47Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/layout/format/MarkdownFormatter.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package org.jabref.logic.layout.format;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import org.jabref.logic.layout.LayoutFormatter;\n+\n+import com.vladsch.flexmark.ext.gfm.strikethrough.StrikethroughExtension;\n+import com.vladsch.flexmark.ext.gfm.tasklist.TaskListExtension;\n+import com.vladsch.flexmark.html.HtmlRenderer;\n+import com.vladsch.flexmark.parser.Parser;\n+import com.vladsch.flexmark.util.ast.Node;\n+import com.vladsch.flexmark.util.data.MutableDataSet;\n+\n+public class MarkdownFormatter implements LayoutFormatter {\n+\n+    private final Parser parser;\n+    private final HtmlRenderer renderer;\n+\n+    public MarkdownFormatter() {\n+        MutableDataSet options = new MutableDataSet();\n+        options.set(Parser.EXTENSIONS, List.of(\n+                StrikethroughExtension.create(),\n+                TaskListExtension.create()\n+        ));\n+\n+        parser = Parser.builder(options).build();\n+        renderer = HtmlRenderer.builder(options).build();\n+    }\n+\n+    @Override\n+    public String format(final String fieldText) {\n+        Objects.requireNonNull(fieldText, \"Field Text should not be null, when handed to formatter\");\n+\n+        Node document = parser.parse(fieldText);\n+        String html = renderer.render(document);\n+\n+        // workaround HTMLChars transforming \"\\n\" into <br> by returning a one liner", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4MTc0OQ=="}, "originalCommit": {"oid": "c6d16d54bdacbfbee869513cbbf1282daa6bc8d1"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDMwMjIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/migrations/PreferencesMigrations.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTozOTozN1rOF_jSdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxOToxNDo1MFrOF_5zbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4Mjc3Mw==", "bodyText": "Is there a reason not to simply replace \\\\format[HTMLChars]{\\\\comment} with \\\\format[Markdown,HTMLChars]{\\\\comment} (or \\\\format[Markdown]{\\\\comment} see above)? If the user changed the preview style a bit, then this replacement would still have the desired effect, right?", "url": "https://github.com/JabRef/jabref/pull/6232#discussion_r402182773", "createdAt": "2020-04-02T09:39:37Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/migrations/PreferencesMigrations.java", "diffHunk": "@@ -301,6 +302,12 @@ static void upgradePreviewStyleFromReviewToComment(JabRefPreferences prefs) {\n         prefs.setPreviewStyle(migratedStyle);\n     }\n \n+    static void upgradePreviewStyleAllowMarkdown(JabRefPreferences prefs) {\n+        String currentPreviewStyle = prefs.getPreviewStyle();\n+        String migratedStyle = currentPreviewStyle.replace(\"\\\\begin{comment}<BR><BR><b>Comment: </b> \\\\format[HTMLChars]{\\\\comment} \\\\end{comment}\", \"\\\\begin{comment}<BR><BR><b>Comment: </b> \\\\format[Markdown,HTMLChars]{\\\\comment} \\\\end{comment}\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6d16d54bdacbfbee869513cbbf1282daa6bc8d1"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUzODc3OQ==", "bodyText": "My reasoning was to not force a different behavior on people who consciously changed their configuration. So I only changed it, when it's the unchanged default value. However this is a matter of opinion. How are changes like this normally handled in Jabref?", "url": "https://github.com/JabRef/jabref/pull/6232#discussion_r402538779", "createdAt": "2020-04-02T18:52:45Z", "author": {"login": "AlexanderGirgis"}, "path": "src/main/java/org/jabref/migrations/PreferencesMigrations.java", "diffHunk": "@@ -301,6 +302,12 @@ static void upgradePreviewStyleFromReviewToComment(JabRefPreferences prefs) {\n         prefs.setPreviewStyle(migratedStyle);\n     }\n \n+    static void upgradePreviewStyleAllowMarkdown(JabRefPreferences prefs) {\n+        String currentPreviewStyle = prefs.getPreviewStyle();\n+        String migratedStyle = currentPreviewStyle.replace(\"\\\\begin{comment}<BR><BR><b>Comment: </b> \\\\format[HTMLChars]{\\\\comment} \\\\end{comment}\", \"\\\\begin{comment}<BR><BR><b>Comment: </b> \\\\format[Markdown,HTMLChars]{\\\\comment} \\\\end{comment}\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4Mjc3Mw=="}, "originalCommit": {"oid": "c6d16d54bdacbfbee869513cbbf1282daa6bc8d1"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU1MTY2Mw==", "bodyText": "I like the proposal by @tobiasdiez. It a) integrated the feature and b) focuses the update to the Comment field", "url": "https://github.com/JabRef/jabref/pull/6232#discussion_r402551663", "createdAt": "2020-04-02T19:14:50Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/migrations/PreferencesMigrations.java", "diffHunk": "@@ -301,6 +302,12 @@ static void upgradePreviewStyleFromReviewToComment(JabRefPreferences prefs) {\n         prefs.setPreviewStyle(migratedStyle);\n     }\n \n+    static void upgradePreviewStyleAllowMarkdown(JabRefPreferences prefs) {\n+        String currentPreviewStyle = prefs.getPreviewStyle();\n+        String migratedStyle = currentPreviewStyle.replace(\"\\\\begin{comment}<BR><BR><b>Comment: </b> \\\\format[HTMLChars]{\\\\comment} \\\\end{comment}\", \"\\\\begin{comment}<BR><BR><b>Comment: </b> \\\\format[Markdown,HTMLChars]{\\\\comment} \\\\end{comment}\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4Mjc3Mw=="}, "originalCommit": {"oid": "c6d16d54bdacbfbee869513cbbf1282daa6bc8d1"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1873, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}