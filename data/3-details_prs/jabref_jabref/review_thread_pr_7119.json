{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1ODMwMTg1", "number": 7119, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxODo0ODozNlrOE8WZ-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODo1NjoxNlrOE96OiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzE3MTE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/importer/actions/OpenDatabaseAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxODo0ODozNlrOH4a3Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxODo0ODozNlrOH4a3Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkyMjQ2Mw==", "bodyText": "It would be cook if you could pass the exception as paramter to the error dialog as well, it's just one addtional paramter", "url": "https://github.com/JabRef/jabref/pull/7119#discussion_r528922463", "createdAt": "2020-11-23T18:48:36Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/gui/importer/actions/OpenDatabaseAction.java", "diffHunk": "@@ -210,4 +216,33 @@ private LibraryTab addNewDatabase(ParserResult result, final Path file, boolean\n         frame.addTab(libraryTab, raisePanel);\n         return libraryTab;\n     }\n+\n+    /* The layout to display in the tab when it's loading*/\n+    public Node createLoadingLayout() {\n+        ProgressIndicator progressIndicator = new ProgressIndicator(ProgressIndicator.INDETERMINATE_PROGRESS);\n+        BorderPane pane = new BorderPane();\n+        pane.setCenter(progressIndicator);\n+\n+        return pane;\n+    }\n+\n+    public void onDatabaseLoadingStarted(LibraryTab libraryTab, BackgroundTask<?> backgroundTask) {\n+        Node loadingLayout = createLoadingLayout();\n+        libraryTab.setContent(loadingLayout);\n+        libraryTab.setOnCloseRequest(e -> backgroundTask.cancel());\n+\n+        frame.addTab(libraryTab, true);\n+    }\n+\n+    public void onDatabaseLoadingSucceed(LibraryTab libraryTab, ParserResult result) {\n+        BibDatabaseContext context = result.getDatabaseContext();\n+        libraryTab.feedData(context);\n+\n+        OpenDatabaseAction.performPostOpenActions(libraryTab, result);\n+    }\n+\n+    public void onDatabaseLoadingFailed(LibraryTab libraryTab, Exception ex) {\n+        dialogService.showErrorDialogAndWait(Localization.lang(\"Connection error\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f2d7ea06c9e37d961dd10a9bb9414f4773486fa"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzU3MTQxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/importer/actions/OpenDatabaseAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDo0MjoyMFrOH4elmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMzoyNDo0MlrOH5Aqbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk4MzQ0OA==", "bodyText": "I would let the LibraryTab handle the progress indicator. This could be done for example by setting the placeholder to the progress indicator. https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/TableView.html#placeholderProperty", "url": "https://github.com/JabRef/jabref/pull/7119#discussion_r528983448", "createdAt": "2020-11-23T20:42:20Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/importer/actions/OpenDatabaseAction.java", "diffHunk": "@@ -210,4 +216,35 @@ private LibraryTab addNewDatabase(ParserResult result, final Path file, boolean\n         frame.addTab(libraryTab, raisePanel);\n         return libraryTab;\n     }\n+\n+    /* The layout to display in the tab when it's loading*/\n+    public Node createLoadingLayout() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1ee47404496f82c2cfa194686e39ebf7f0bbd29"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU0MTc0Mg==", "bodyText": "There was a bug when I close a loading tab before it finishes, the tab next to it TableView would shrink but it seems using placeholder fixed it, Thank you", "url": "https://github.com/JabRef/jabref/pull/7119#discussion_r529541742", "createdAt": "2020-11-24T13:24:42Z", "author": {"login": "HoussemNasri"}, "path": "src/main/java/org/jabref/gui/importer/actions/OpenDatabaseAction.java", "diffHunk": "@@ -210,4 +216,35 @@ private LibraryTab addNewDatabase(ParserResult result, final Path file, boolean\n         frame.addTab(libraryTab, raisePanel);\n         return libraryTab;\n     }\n+\n+    /* The layout to display in the tab when it's loading*/\n+    public Node createLoadingLayout() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk4MzQ0OA=="}, "originalCommit": {"oid": "a1ee47404496f82c2cfa194686e39ebf7f0bbd29"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzU3OTU1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/importer/actions/OpenDatabaseAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDo0NDo1MlrOH4eqjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDo0NDo1MlrOH4eqjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk4NDcxNg==", "bodyText": "I would put this before the feedData call. Some of the post actions change a lot of entries, which would result in unnecessary updates of the ui.", "url": "https://github.com/JabRef/jabref/pull/7119#discussion_r528984716", "createdAt": "2020-11-23T20:44:52Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/importer/actions/OpenDatabaseAction.java", "diffHunk": "@@ -210,4 +216,35 @@ private LibraryTab addNewDatabase(ParserResult result, final Path file, boolean\n         frame.addTab(libraryTab, raisePanel);\n         return libraryTab;\n     }\n+\n+    /* The layout to display in the tab when it's loading*/\n+    public Node createLoadingLayout() {\n+        ProgressIndicator progressIndicator = new ProgressIndicator(ProgressIndicator.INDETERMINATE_PROGRESS);\n+        BorderPane pane = new BorderPane();\n+        pane.setCenter(progressIndicator);\n+\n+        return pane;\n+    }\n+\n+    public void onDatabaseLoadingStarted(LibraryTab libraryTab, BackgroundTask<?> backgroundTask) {\n+        Node loadingLayout = createLoadingLayout();\n+        libraryTab.setContent(loadingLayout);\n+        libraryTab.setOnCloseRequest(e -> backgroundTask.cancel());\n+\n+        frame.addTab(libraryTab, true);\n+    }\n+\n+    public void onDatabaseLoadingSucceed(LibraryTab libraryTab, ParserResult result) {\n+        BibDatabaseContext context = result.getDatabaseContext();\n+        libraryTab.feedData(context);\n+\n+        OpenDatabaseAction.performPostOpenActions(libraryTab, result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1ee47404496f82c2cfa194686e39ebf7f0bbd29"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzU4OTE0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/LibraryTab.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDo0NzoyMlrOH4ev_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoxMjoxM1rOH5CpjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk4NjExMA==", "bodyText": "I think this should be in the opendatabaseaction class (as it's not really connected to the library tab)", "url": "https://github.com/JabRef/jabref/pull/7119#discussion_r528986110", "createdAt": "2020-11-23T20:47:22Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/LibraryTab.java", "diffHunk": "@@ -140,15 +147,81 @@ public LibraryTab(JabRefFrame frame,\n         });\n     }\n \n+    public static LibraryTab createNewEmptyLibraryTab(JabRefFrame frame, Path file) {\n+        BibDatabaseContext context = new BibDatabaseContext();\n+        context.setDatabasePath(file);\n+\n+        return new LibraryTab(frame, frame.prefs(), context, ExternalFileTypes.getInstance());\n+    }\n+\n+    public void feedData(BibDatabaseContext bibDatabaseContext) {\n+        cleanUp();\n+\n+        this.bibDatabaseContext = Objects.requireNonNull(bibDatabaseContext);\n+\n+        bibDatabaseContext.getDatabase().registerListener(this);\n+        bibDatabaseContext.getMetaData().registerListener(this);\n+\n+        this.tableModel = new MainTableDataModel(getBibDatabaseContext(), preferencesService, Globals.stateManager);\n+        citationStyleCache = new CitationStyleCache(bibDatabaseContext);\n+        annotationCache = new FileAnnotationCache(bibDatabaseContext, preferencesService.getFilePreferences());\n+\n+        setupMainPanel();\n+        setupAutoCompletion();\n+\n+        this.getDatabase().registerListener(new SearchListener());\n+        this.getDatabase().registerListener(new EntriesRemovedListener());\n+\n+        // ensure that at each addition of a new entry, the entry is added to the groups interface\n+        this.bibDatabaseContext.getDatabase().registerListener(new GroupTreeListener());\n+        // ensure that all entry changes mark the panel as changed\n+        this.bibDatabaseContext.getDatabase().registerListener(this);\n+\n+        this.getDatabase().registerListener(new UpdateTimestampListener(preferencesService));\n+\n+        this.entryEditor = new EntryEditor(this, externalFileTypes);\n+\n+        Platform.runLater(() -> {\n+            EasyBind.subscribe(changedProperty, this::updateTabTitle);\n+            Globals.stateManager.getOpenDatabases().addListener((ListChangeListener<BibDatabaseContext>) c ->\n+                    updateTabTitle(changedProperty.getValue()));\n+        });\n+\n+        if (isDatabaseReadyForAutoSave(bibDatabaseContext)) {\n+            AutosaveManager autoSaver = AutosaveManager.start(bibDatabaseContext);\n+            autoSaver.registerListener(new AutosaveUiManager(this));\n+        }\n+\n+        BackupManager.start(this.bibDatabaseContext, Globals.entryTypesManager, Globals.prefs);\n+\n+        trackOpenNewDatabase(this);\n+\n+    }\n+\n+    private boolean isDatabaseReadyForAutoSave(BibDatabaseContext context) {\n+        return ((context.getLocation() == DatabaseLocation.SHARED) ||\n+                ((context.getLocation() == DatabaseLocation.LOCAL) && Globals.prefs.getBoolean(JabRefPreferences.LOCAL_AUTO_SAVE)))\n+                &&\n+                context.getDatabasePath().isPresent();\n+    }\n+\n+    private void trackOpenNewDatabase(LibraryTab libraryTab) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1ee47404496f82c2cfa194686e39ebf7f0bbd29"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUwNTE4OA==", "bodyText": "and by this, you mean trackOpenNewDatabase(), right?", "url": "https://github.com/JabRef/jabref/pull/7119#discussion_r529505188", "createdAt": "2020-11-24T12:23:31Z", "author": {"login": "HoussemNasri"}, "path": "src/main/java/org/jabref/gui/LibraryTab.java", "diffHunk": "@@ -140,15 +147,81 @@ public LibraryTab(JabRefFrame frame,\n         });\n     }\n \n+    public static LibraryTab createNewEmptyLibraryTab(JabRefFrame frame, Path file) {\n+        BibDatabaseContext context = new BibDatabaseContext();\n+        context.setDatabasePath(file);\n+\n+        return new LibraryTab(frame, frame.prefs(), context, ExternalFileTypes.getInstance());\n+    }\n+\n+    public void feedData(BibDatabaseContext bibDatabaseContext) {\n+        cleanUp();\n+\n+        this.bibDatabaseContext = Objects.requireNonNull(bibDatabaseContext);\n+\n+        bibDatabaseContext.getDatabase().registerListener(this);\n+        bibDatabaseContext.getMetaData().registerListener(this);\n+\n+        this.tableModel = new MainTableDataModel(getBibDatabaseContext(), preferencesService, Globals.stateManager);\n+        citationStyleCache = new CitationStyleCache(bibDatabaseContext);\n+        annotationCache = new FileAnnotationCache(bibDatabaseContext, preferencesService.getFilePreferences());\n+\n+        setupMainPanel();\n+        setupAutoCompletion();\n+\n+        this.getDatabase().registerListener(new SearchListener());\n+        this.getDatabase().registerListener(new EntriesRemovedListener());\n+\n+        // ensure that at each addition of a new entry, the entry is added to the groups interface\n+        this.bibDatabaseContext.getDatabase().registerListener(new GroupTreeListener());\n+        // ensure that all entry changes mark the panel as changed\n+        this.bibDatabaseContext.getDatabase().registerListener(this);\n+\n+        this.getDatabase().registerListener(new UpdateTimestampListener(preferencesService));\n+\n+        this.entryEditor = new EntryEditor(this, externalFileTypes);\n+\n+        Platform.runLater(() -> {\n+            EasyBind.subscribe(changedProperty, this::updateTabTitle);\n+            Globals.stateManager.getOpenDatabases().addListener((ListChangeListener<BibDatabaseContext>) c ->\n+                    updateTabTitle(changedProperty.getValue()));\n+        });\n+\n+        if (isDatabaseReadyForAutoSave(bibDatabaseContext)) {\n+            AutosaveManager autoSaver = AutosaveManager.start(bibDatabaseContext);\n+            autoSaver.registerListener(new AutosaveUiManager(this));\n+        }\n+\n+        BackupManager.start(this.bibDatabaseContext, Globals.entryTypesManager, Globals.prefs);\n+\n+        trackOpenNewDatabase(this);\n+\n+    }\n+\n+    private boolean isDatabaseReadyForAutoSave(BibDatabaseContext context) {\n+        return ((context.getLocation() == DatabaseLocation.SHARED) ||\n+                ((context.getLocation() == DatabaseLocation.LOCAL) && Globals.prefs.getBoolean(JabRefPreferences.LOCAL_AUTO_SAVE)))\n+                &&\n+                context.getDatabasePath().isPresent();\n+    }\n+\n+    private void trackOpenNewDatabase(LibraryTab libraryTab) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk4NjExMA=="}, "originalCommit": {"oid": "a1ee47404496f82c2cfa194686e39ebf7f0bbd29"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU3NDI4NQ==", "bodyText": "yes!", "url": "https://github.com/JabRef/jabref/pull/7119#discussion_r529574285", "createdAt": "2020-11-24T14:12:13Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/LibraryTab.java", "diffHunk": "@@ -140,15 +147,81 @@ public LibraryTab(JabRefFrame frame,\n         });\n     }\n \n+    public static LibraryTab createNewEmptyLibraryTab(JabRefFrame frame, Path file) {\n+        BibDatabaseContext context = new BibDatabaseContext();\n+        context.setDatabasePath(file);\n+\n+        return new LibraryTab(frame, frame.prefs(), context, ExternalFileTypes.getInstance());\n+    }\n+\n+    public void feedData(BibDatabaseContext bibDatabaseContext) {\n+        cleanUp();\n+\n+        this.bibDatabaseContext = Objects.requireNonNull(bibDatabaseContext);\n+\n+        bibDatabaseContext.getDatabase().registerListener(this);\n+        bibDatabaseContext.getMetaData().registerListener(this);\n+\n+        this.tableModel = new MainTableDataModel(getBibDatabaseContext(), preferencesService, Globals.stateManager);\n+        citationStyleCache = new CitationStyleCache(bibDatabaseContext);\n+        annotationCache = new FileAnnotationCache(bibDatabaseContext, preferencesService.getFilePreferences());\n+\n+        setupMainPanel();\n+        setupAutoCompletion();\n+\n+        this.getDatabase().registerListener(new SearchListener());\n+        this.getDatabase().registerListener(new EntriesRemovedListener());\n+\n+        // ensure that at each addition of a new entry, the entry is added to the groups interface\n+        this.bibDatabaseContext.getDatabase().registerListener(new GroupTreeListener());\n+        // ensure that all entry changes mark the panel as changed\n+        this.bibDatabaseContext.getDatabase().registerListener(this);\n+\n+        this.getDatabase().registerListener(new UpdateTimestampListener(preferencesService));\n+\n+        this.entryEditor = new EntryEditor(this, externalFileTypes);\n+\n+        Platform.runLater(() -> {\n+            EasyBind.subscribe(changedProperty, this::updateTabTitle);\n+            Globals.stateManager.getOpenDatabases().addListener((ListChangeListener<BibDatabaseContext>) c ->\n+                    updateTabTitle(changedProperty.getValue()));\n+        });\n+\n+        if (isDatabaseReadyForAutoSave(bibDatabaseContext)) {\n+            AutosaveManager autoSaver = AutosaveManager.start(bibDatabaseContext);\n+            autoSaver.registerListener(new AutosaveUiManager(this));\n+        }\n+\n+        BackupManager.start(this.bibDatabaseContext, Globals.entryTypesManager, Globals.prefs);\n+\n+        trackOpenNewDatabase(this);\n+\n+    }\n+\n+    private boolean isDatabaseReadyForAutoSave(BibDatabaseContext context) {\n+        return ((context.getLocation() == DatabaseLocation.SHARED) ||\n+                ((context.getLocation() == DatabaseLocation.LOCAL) && Globals.prefs.getBoolean(JabRefPreferences.LOCAL_AUTO_SAVE)))\n+                &&\n+                context.getDatabasePath().isPresent();\n+    }\n+\n+    private void trackOpenNewDatabase(LibraryTab libraryTab) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk4NjExMA=="}, "originalCommit": {"oid": "a1ee47404496f82c2cfa194686e39ebf7f0bbd29"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzUyNTg0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/LibraryTab.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODo1NjoxNlrOH615SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODo1NjoxNlrOH615SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2MjQ3Mg==", "bodyText": "This condition/if is uncessary as you either return null or the dataLoadingTask.", "url": "https://github.com/JabRef/jabref/pull/7119#discussion_r531462472", "createdAt": "2020-11-27T08:56:16Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/gui/LibraryTab.java", "diffHunk": "@@ -140,15 +152,107 @@ public LibraryTab(JabRefFrame frame,\n         });\n     }\n \n+    public void setDataLoadingTask(BackgroundTask<ParserResult> dataLoadingTask) {\n+        this.dataLoadingTask = dataLoadingTask;\n+    }\n+\n+    public BackgroundTask<?> getDataLoadingTask() {\n+        if (dataLoadingTask == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e71e7a3c5297cbe34844e21d7b016b958c5702b"}, "originalPosition": 92}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2106, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}