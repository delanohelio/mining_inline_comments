{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4MjQ1ODYy", "number": 7126, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQxNTo0MzoyOVrOE-aFnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODo0Mjo0N1rOE-yhTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzODc0NTkxOnYy", "diffSide": "RIGHT", "path": "src/test/resources/org/jabref/logic/crawler/study.yml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQxNTo0MzoyOVrOH7kkhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQxNTo0MzoyOVrOH7kkhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyNzIwNw==", "bodyText": "I think, yml convention is to use hyphen to connect words, e.g. study-name. (maybe name is already sufficient?)", "url": "https://github.com/JabRef/jabref/pull/7126#discussion_r532227207", "createdAt": "2020-11-29T15:43:29Z", "author": {"login": "tobiasdiez"}, "path": "src/test/resources/org/jabref/logic/crawler/study.yml", "diffHunk": "@@ -0,0 +1,16 @@\n+authors:\n+  - Jab Ref\n+studyName: TestStudyName", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ed74424402402bfc486b6048b3d610f7eb30e3d"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzODc0NzM1OnYy", "diffSide": "RIGHT", "path": "src/test/resources/org/jabref/logic/crawler/study.yml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQxNTo0NDo1M1rOH7klPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQxNTo0NDo1M1rOH7klPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyNzM4OA==", "bodyText": "Maybe databases or sources is slightly better than libraries ? Arxiv or springer for example are not really libraries.", "url": "https://github.com/JabRef/jabref/pull/7126#discussion_r532227388", "createdAt": "2020-11-29T15:44:53Z", "author": {"login": "tobiasdiez"}, "path": "src/test/resources/org/jabref/logic/crawler/study.yml", "diffHunk": "@@ -0,0 +1,16 @@\n+authors:\n+  - Jab Ref\n+studyName: TestStudyName\n+lastSearchDate: 2020-11-26\n+researchQuestions:\n+  - Question1\n+  - Question2\n+queries:\n+  - query: Quantum\n+  - query: Cloud Computing\n+  - query: '\"Software Engineering\"'\n+libraries:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ed74424402402bfc486b6048b3d610f7eb30e3d"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzODc0OTQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/model/study/QueryEntry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQxNTo0Njo1NlrOH7kmTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQxNTo1MjozOFrOH7kpMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyNzY2MA==", "bodyText": "I'm a bit undecided about this, but what do you think about simply Query? Or StudyQuery? Entry is a bit confusing with BibEntry etc.", "url": "https://github.com/JabRef/jabref/pull/7126#discussion_r532227660", "createdAt": "2020-11-29T15:46:56Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/model/study/QueryEntry.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package org.jabref.model.study;\n+\n+public class QueryEntry {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ed74424402402bfc486b6048b3d610f7eb30e3d"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyODQwMA==", "bodyText": "Similarily to above, maybe one can reuse the ComplexQuery here (with jackson parser directly giving a complex query back)?", "url": "https://github.com/JabRef/jabref/pull/7126#discussion_r532228400", "createdAt": "2020-11-29T15:52:38Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/model/study/QueryEntry.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package org.jabref.model.study;\n+\n+public class QueryEntry {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyNzY2MA=="}, "originalCommit": {"oid": "8ed74424402402bfc486b6048b3d610f7eb30e3d"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzODc1MzY0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/crawler/LibraryEntryToFetcherConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQxNTo1MToyNFrOH7kodw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQxNTo1MToyNFrOH7kodw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyODIxNQ==", "bodyText": "Can you use this converter already during parsing with jackson, so that a study already contains a list of fetcher, making the class LibraryEntry obsolete?", "url": "https://github.com/JabRef/jabref/pull/7126#discussion_r532228215", "createdAt": "2020-11-29T15:51:24Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/logic/crawler/LibraryEntryToFetcherConverter.java", "diffHunk": "@@ -8,19 +8,16 @@\n import org.jabref.logic.importer.ImportFormatPreferences;\n import org.jabref.logic.importer.SearchBasedFetcher;\n import org.jabref.logic.importer.WebFetchers;\n-import org.jabref.model.entry.BibEntry;\n-import org.jabref.model.entry.field.UnknownField;\n-\n-import static org.jabref.model.entry.types.SystematicLiteratureReviewStudyEntryType.LIBRARY_ENTRY;\n+import org.jabref.model.study.LibraryEntry;\n \n /**\n  * Converts library entries from the given study into their corresponding fetchers.\n  */\n class LibraryEntryToFetcherConverter {\n-    private final List<BibEntry> libraryEntries;\n+    private final List<LibraryEntry> libraryEntries;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ed74424402402bfc486b6048b3d610f7eb30e3d"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzODc1NTQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/model/study/Study.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQxNTo1MzoxNFrOH7kpaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQxNTo1MzoxNFrOH7kpaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyODQ1OQ==", "bodyText": "Objects.hashcode is your friend ;-)", "url": "https://github.com/JabRef/jabref/pull/7126#discussion_r532228459", "createdAt": "2020-11-29T15:53:14Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/model/study/Study.java", "diffHunk": "@@ -1,98 +1,133 @@\n package org.jabref.model.study;\n \n import java.time.LocalDate;\n-import java.util.ArrayList;\n import java.util.List;\n-import java.util.Optional;\n-import java.util.stream.Collectors;\n-\n-import org.jabref.model.entry.BibEntry;\n-import org.jabref.model.entry.field.UnknownField;\n \n /**\n  * This class represents a scientific study.\n  *\n  * This class defines all aspects of a scientific study relevant to the application. It is a proxy for the file based study definition.\n  */\n public class Study {\n-    private static final String SEARCH_QUERY_FIELD_NAME = \"query\";\n+    private List<String> authors;\n+    private String studyName;\n+    private LocalDate lastSearchDate;\n+    private List<String> researchQuestions;\n+    private List<QueryEntry> queries;\n+    private List<LibraryEntry> libraries;\n \n-    private final BibEntry studyEntry;\n-    private final List<BibEntry> queryEntries;\n-    private final List<BibEntry> libraryEntries;\n+    public Study(List<String> authors, String studyName, List<String> researchQuestions, List<QueryEntry> queryEntries, List<LibraryEntry> libraries) {\n+        this.authors = authors;\n+        this.studyName = studyName;\n+        this.researchQuestions = researchQuestions;\n+        this.queries = queryEntries;\n+        this.libraries = libraries;\n+    }\n \n-    public Study(BibEntry studyEntry, List<BibEntry> queryEntries, List<BibEntry> libraryEntries) {\n-        this.studyEntry = studyEntry;\n-        this.queryEntries = queryEntries;\n-        this.libraryEntries = libraryEntries;\n+    /**\n+     * Used for Jackson deserialization\n+     */\n+    public Study() {\n     }\n \n-    public List<BibEntry> getAllEntries() {\n-        List<BibEntry> allEntries = new ArrayList<>();\n-        allEntries.add(studyEntry);\n-        allEntries.addAll(queryEntries);\n-        allEntries.addAll(libraryEntries);\n-        return allEntries;\n+    public List<String> getAuthors() {\n+        return authors;\n     }\n \n-    /**\n-     * Returns all query strings\n-     *\n-     * @return List of all queries as Strings.\n-     */\n-    public List<String> getSearchQueryStrings() {\n-        return queryEntries.parallelStream()\n-                           .map(bibEntry -> bibEntry.getField(new UnknownField(SEARCH_QUERY_FIELD_NAME)))\n-                           .filter(Optional::isPresent)\n-                           .map(Optional::get)\n-                           .collect(Collectors.toList());\n+    public void setAuthors(List<String> authors) {\n+        this.authors = authors;\n     }\n \n-    /**\n-     * This method returns the SearchQuery entries.\n-     * This is required when the BibKey of the search term entry is required in combination with the search query (e.g.\n-     * for the creation of the study repository structure).\n-     */\n-    public List<BibEntry> getSearchQueryEntries() {\n-        return queryEntries;\n+    public List<QueryEntry> getQueries() {\n+        return queries;\n     }\n \n-    /**\n-     * Returns a meta data entry of the first study entry found in the study definition file of the provided type.\n-     *\n-     * @param metaDataField The type of requested meta-data\n-     * @return returns the requested meta data type of the first found study entry\n-     * @throws IllegalArgumentException If the study file does not contain a study entry.\n-     */\n-    public Optional<String> getStudyMetaDataField(StudyMetaDataField metaDataField) throws IllegalArgumentException {\n-        return studyEntry.getField(metaDataField.toField());\n+    public void setQueries(List<QueryEntry> queries) {\n+        this.queries = queries;\n+    }\n+\n+    public LocalDate getLastSearchDate() {\n+        return lastSearchDate;\n     }\n \n-    /**\n-     * Sets the lastSearchDate field of the study entry\n-     *\n-     * @param date date the last time a search was conducted\n-     */\n     public void setLastSearchDate(LocalDate date) {\n-        studyEntry.setField(StudyMetaDataField.STUDY_LAST_SEARCH.toField(), date.toString());\n+        lastSearchDate = date;\n     }\n \n-    /**\n-     * Extracts all active LibraryEntries from the BibEntries.\n-     *\n-     * @return List of BibEntries of type Library\n-     * @throws IllegalArgumentException If a transformation from Library entry to LibraryDefinition fails\n-     */\n-    public List<BibEntry> getActiveLibraryEntries() throws IllegalArgumentException {\n-        return libraryEntries\n-                .parallelStream()\n-                .filter(bibEntry -> {\n-                    // If enabled is not defined, the fetcher is active.\n-                    return bibEntry.getField(new UnknownField(\"enabled\"))\n-                                   .map(enabled -> enabled.equals(\"true\"))\n-                                   .orElse(true);\n-                })\n-                .collect(Collectors.toList());\n+    public List<LibraryEntry> getLibraries() {\n+        return libraries;\n+    }\n+\n+    public void setLibraries(List<LibraryEntry> libraries) {\n+        this.libraries = libraries;\n+    }\n+\n+    public String getStudyName() {\n+        return studyName;\n+    }\n+\n+    public void setStudyName(String studyName) {\n+        this.studyName = studyName;\n+    }\n+\n+    public List<String> getResearchQuestions() {\n+        return researchQuestions;\n+    }\n+\n+    public void setResearchQuestions(List<String> researchQuestions) {\n+        this.researchQuestions = researchQuestions;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Study{\" +\n+                \"authors=\" + authors +\n+                \", studyName='\" + studyName + '\\'' +\n+                \", lastSearchDate=\" + lastSearchDate +\n+                \", researchQuestions=\" + researchQuestions +\n+                \", queries=\" + queries +\n+                \", libraries=\" + libraries +\n+                '}';\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+\n+        Study study = (Study) o;\n+\n+        if (getAuthors() != null ? !getAuthors().equals(study.getAuthors()) : study.getAuthors() != null) {\n+            return false;\n+        }\n+        if (getStudyName() != null ? !getStudyName().equals(study.getStudyName()) : study.getStudyName() != null) {\n+            return false;\n+        }\n+        if (getLastSearchDate() != null ? !getLastSearchDate().equals(study.getLastSearchDate()) : study.getLastSearchDate() != null) {\n+            return false;\n+        }\n+        if (getResearchQuestions() != null ? !getResearchQuestions().equals(study.getResearchQuestions()) : study.getResearchQuestions() != null) {\n+            return false;\n+        }\n+        if (getQueries() != null ? !getQueries().equals(study.getQueries()) : study.getQueries() != null) {\n+            return false;\n+        }\n+        return getLibraries() != null ? getLibraries().equals(study.getLibraries()) : study.getLibraries() == null;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int result = getAuthors() != null ? getAuthors().hashCode() : 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ed74424402402bfc486b6048b3d610f7eb30e3d"}, "originalPosition": 193}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzOTAwMjkwOnYy", "diffSide": "RIGHT", "path": "docs/adr/0019-keep-study-as-a-dto.md", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQyMDowNTowNVrOH7mf7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNToyOTowN1rOH8AWYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI1ODc5OQ==", "bodyText": "For the GUI, you probably need a wrapper around the study class anyway (and then it doesn't matter where the data is coming from).", "url": "https://github.com/JabRef/jabref/pull/7126#discussion_r532258799", "createdAt": "2020-11-29T20:05:05Z", "author": {"login": "tobiasdiez"}, "path": "docs/adr/0019-keep-study-as-a-dto.md", "diffHunk": "@@ -0,0 +1,32 @@\n+# Keep study as a DTO\n+\n+## Context and Problem Statement\n+\n+The study holds query and library entries that could be replaced respectively with complex query and fetcher instances.\n+This poses the question: should the study remain a pure DTO object or should it contain direct object instances?\n+\n+## Considered Options\n+\n+* Keep study as DTO and use transformers\n+* Replace entries with instances\n+\n+## Decision Outcome\n+\n+Chosen option: \"Keep study as DTO and use transformators\", because comes out best (see below).\n+\n+## Pros and Cons of the Options\n+\n+### Keep study as DTO and use transformators\n+\n+* Good, because makes GUI implementation probably easier down the line", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b699d669f962e3cc90d4788e5cbadbabf0acfa2"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI2ODU5Nw==", "bodyText": "So we cannot use the jackson library? What about the other ones? Is there a well-maintend one that is compatible with the module system?\n\nIs this even related to jackson specifically? To me the amount of added modules seems to be problematic?", "url": "https://github.com/JabRef/jabref/pull/7126#discussion_r532268597", "createdAt": "2020-11-29T21:25:57Z", "author": {"login": "DominikVoigt"}, "path": "docs/adr/0019-keep-study-as-a-dto.md", "diffHunk": "@@ -0,0 +1,32 @@\n+# Keep study as a DTO\n+\n+## Context and Problem Statement\n+\n+The study holds query and library entries that could be replaced respectively with complex query and fetcher instances.\n+This poses the question: should the study remain a pure DTO object or should it contain direct object instances?\n+\n+## Considered Options\n+\n+* Keep study as DTO and use transformers\n+* Replace entries with instances\n+\n+## Decision Outcome\n+\n+Chosen option: \"Keep study as DTO and use transformators\", because comes out best (see below).\n+\n+## Pros and Cons of the Options\n+\n+### Keep study as DTO and use transformators\n+\n+* Good, because makes GUI implementation probably easier down the line", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI1ODc5OQ=="}, "originalCommit": {"oid": "4b699d669f962e3cc90d4788e5cbadbabf0acfa2"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU2NDk3Ng==", "bodyText": "My guess is that jackson has a long module list which gives this error. But it could also be that all of our dependencies together are already at the borderline, and adding jackson just tipped us over the limit - this would be really bad indeed.\nShould be easy to test though...", "url": "https://github.com/JabRef/jabref/pull/7126#discussion_r532564976", "createdAt": "2020-11-30T12:35:55Z", "author": {"login": "tobiasdiez"}, "path": "docs/adr/0019-keep-study-as-a-dto.md", "diffHunk": "@@ -0,0 +1,32 @@\n+# Keep study as a DTO\n+\n+## Context and Problem Statement\n+\n+The study holds query and library entries that could be replaced respectively with complex query and fetcher instances.\n+This poses the question: should the study remain a pure DTO object or should it contain direct object instances?\n+\n+## Considered Options\n+\n+* Keep study as DTO and use transformers\n+* Replace entries with instances\n+\n+## Decision Outcome\n+\n+Chosen option: \"Keep study as DTO and use transformators\", because comes out best (see below).\n+\n+## Pros and Cons of the Options\n+\n+### Keep study as DTO and use transformators\n+\n+* Good, because makes GUI implementation probably easier down the line", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI1ODc5OQ=="}, "originalCommit": {"oid": "4b699d669f962e3cc90d4788e5cbadbabf0acfa2"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY4MjMzNg==", "bodyText": "Yeah, I'll proceed with some testing now...", "url": "https://github.com/JabRef/jabref/pull/7126#discussion_r532682336", "createdAt": "2020-11-30T15:29:07Z", "author": {"login": "DominikVoigt"}, "path": "docs/adr/0019-keep-study-as-a-dto.md", "diffHunk": "@@ -0,0 +1,32 @@\n+# Keep study as a DTO\n+\n+## Context and Problem Statement\n+\n+The study holds query and library entries that could be replaced respectively with complex query and fetcher instances.\n+This poses the question: should the study remain a pure DTO object or should it contain direct object instances?\n+\n+## Considered Options\n+\n+* Keep study as DTO and use transformers\n+* Replace entries with instances\n+\n+## Decision Outcome\n+\n+Chosen option: \"Keep study as DTO and use transformators\", because comes out best (see below).\n+\n+## Pros and Cons of the Options\n+\n+### Keep study as DTO and use transformators\n+\n+* Good, because makes GUI implementation probably easier down the line", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI1ODc5OQ=="}, "originalCommit": {"oid": "4b699d669f962e3cc90d4788e5cbadbabf0acfa2"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzOTAwNDg2OnYy", "diffSide": "RIGHT", "path": "docs/adr/0019-keep-study-as-a-dto.md", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQyMDowNjo1NlrOH7mg0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODo0NTowMlrOH8ItCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI1OTAyNw==", "bodyText": "That depends a bit on how complicated the custom serialization is. Since in the end you only need a map Fetcher <-> Name is needed, and such a conversion already exists.", "url": "https://github.com/JabRef/jabref/pull/7126#discussion_r532259027", "createdAt": "2020-11-29T20:06:56Z", "author": {"login": "tobiasdiez"}, "path": "docs/adr/0019-keep-study-as-a-dto.md", "diffHunk": "@@ -0,0 +1,32 @@\n+# Keep study as a DTO\n+\n+## Context and Problem Statement\n+\n+The study holds query and library entries that could be replaced respectively with complex query and fetcher instances.\n+This poses the question: should the study remain a pure DTO object or should it contain direct object instances?\n+\n+## Considered Options\n+\n+* Keep study as DTO and use transformers\n+* Replace entries with instances\n+\n+## Decision Outcome\n+\n+Chosen option: \"Keep study as DTO and use transformators\", because comes out best (see below).\n+\n+## Pros and Cons of the Options\n+\n+### Keep study as DTO and use transformators\n+\n+* Good, because makes GUI implementation probably easier down the line\n+* Good, because no need for custom serialization\n+* Good, because deactivated fetchers can be documented (important for traceable Searching (SLRs))\n+* Bad, because Entries for databases and queries needed\n+\n+### Replace entries with instances\n+\n+* Good, because no need for database and query entries\n+* Bad, because custom de-/serializers for fetchers and complex queries needed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b699d669f962e3cc90d4788e5cbadbabf0acfa2"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI2MjIyOQ==", "bodyText": "The problem with this is that we need to keep the set of deactivated databases somewhere in memory to serialize them again.\nIn the future, we can replace this with records so I don't think this replacement is necessary now?\nRegarding the complexity de-/serialization I'm not sure myself.", "url": "https://github.com/JabRef/jabref/pull/7126#discussion_r532262229", "createdAt": "2020-11-29T20:32:15Z", "author": {"login": "DominikVoigt"}, "path": "docs/adr/0019-keep-study-as-a-dto.md", "diffHunk": "@@ -0,0 +1,32 @@\n+# Keep study as a DTO\n+\n+## Context and Problem Statement\n+\n+The study holds query and library entries that could be replaced respectively with complex query and fetcher instances.\n+This poses the question: should the study remain a pure DTO object or should it contain direct object instances?\n+\n+## Considered Options\n+\n+* Keep study as DTO and use transformers\n+* Replace entries with instances\n+\n+## Decision Outcome\n+\n+Chosen option: \"Keep study as DTO and use transformators\", because comes out best (see below).\n+\n+## Pros and Cons of the Options\n+\n+### Keep study as DTO and use transformators\n+\n+* Good, because makes GUI implementation probably easier down the line\n+* Good, because no need for custom serialization\n+* Good, because deactivated fetchers can be documented (important for traceable Searching (SLRs))\n+* Bad, because Entries for databases and queries needed\n+\n+### Replace entries with instances\n+\n+* Good, because no need for database and query entries\n+* Bad, because custom de-/serializers for fetchers and complex queries needed", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI1OTAyNw=="}, "originalCommit": {"oid": "4b699d669f962e3cc90d4788e5cbadbabf0acfa2"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU2NjMxOA==", "bodyText": "deactivated databases\n\nThat was actually something I was wondering about: why do you need to deactivate a fetcher (instead of simply removing it from the list)?", "url": "https://github.com/JabRef/jabref/pull/7126#discussion_r532566318", "createdAt": "2020-11-30T12:38:17Z", "author": {"login": "tobiasdiez"}, "path": "docs/adr/0019-keep-study-as-a-dto.md", "diffHunk": "@@ -0,0 +1,32 @@\n+# Keep study as a DTO\n+\n+## Context and Problem Statement\n+\n+The study holds query and library entries that could be replaced respectively with complex query and fetcher instances.\n+This poses the question: should the study remain a pure DTO object or should it contain direct object instances?\n+\n+## Considered Options\n+\n+* Keep study as DTO and use transformers\n+* Replace entries with instances\n+\n+## Decision Outcome\n+\n+Chosen option: \"Keep study as DTO and use transformators\", because comes out best (see below).\n+\n+## Pros and Cons of the Options\n+\n+### Keep study as DTO and use transformators\n+\n+* Good, because makes GUI implementation probably easier down the line\n+* Good, because no need for custom serialization\n+* Good, because deactivated fetchers can be documented (important for traceable Searching (SLRs))\n+* Bad, because Entries for databases and queries needed\n+\n+### Replace entries with instances\n+\n+* Good, because no need for database and query entries\n+* Bad, because custom de-/serializers for fetchers and complex queries needed", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI1OTAyNw=="}, "originalCommit": {"oid": "4b699d669f962e3cc90d4788e5cbadbabf0acfa2"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY2ODY5MA==", "bodyText": "The idea behind this is to document that certain databases/libraries are actively not searched instead for example just disregarded/forgotten.\nThis is just another aspect to make the search traceable.", "url": "https://github.com/JabRef/jabref/pull/7126#discussion_r532668690", "createdAt": "2020-11-30T15:11:32Z", "author": {"login": "DominikVoigt"}, "path": "docs/adr/0019-keep-study-as-a-dto.md", "diffHunk": "@@ -0,0 +1,32 @@\n+# Keep study as a DTO\n+\n+## Context and Problem Statement\n+\n+The study holds query and library entries that could be replaced respectively with complex query and fetcher instances.\n+This poses the question: should the study remain a pure DTO object or should it contain direct object instances?\n+\n+## Considered Options\n+\n+* Keep study as DTO and use transformers\n+* Replace entries with instances\n+\n+## Decision Outcome\n+\n+Chosen option: \"Keep study as DTO and use transformators\", because comes out best (see below).\n+\n+## Pros and Cons of the Options\n+\n+### Keep study as DTO and use transformators\n+\n+* Good, because makes GUI implementation probably easier down the line\n+* Good, because no need for custom serialization\n+* Good, because deactivated fetchers can be documented (important for traceable Searching (SLRs))\n+* Bad, because Entries for databases and queries needed\n+\n+### Replace entries with instances\n+\n+* Good, because no need for database and query entries\n+* Bad, because custom de-/serializers for fetchers and complex queries needed", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI1OTAyNw=="}, "originalCommit": {"oid": "4b699d669f962e3cc90d4788e5cbadbabf0acfa2"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY3NDcxNQ==", "bodyText": "Ok, then we leave it as it's right now using custom Query/LibareryEntrys!\nBtw, you don't need to write an ADR for every implementation detail. Here it would have be perfectly fine to just add a comment outlining the advantages you see.", "url": "https://github.com/JabRef/jabref/pull/7126#discussion_r532674715", "createdAt": "2020-11-30T15:19:32Z", "author": {"login": "tobiasdiez"}, "path": "docs/adr/0019-keep-study-as-a-dto.md", "diffHunk": "@@ -0,0 +1,32 @@\n+# Keep study as a DTO\n+\n+## Context and Problem Statement\n+\n+The study holds query and library entries that could be replaced respectively with complex query and fetcher instances.\n+This poses the question: should the study remain a pure DTO object or should it contain direct object instances?\n+\n+## Considered Options\n+\n+* Keep study as DTO and use transformers\n+* Replace entries with instances\n+\n+## Decision Outcome\n+\n+Chosen option: \"Keep study as DTO and use transformators\", because comes out best (see below).\n+\n+## Pros and Cons of the Options\n+\n+### Keep study as DTO and use transformators\n+\n+* Good, because makes GUI implementation probably easier down the line\n+* Good, because no need for custom serialization\n+* Good, because deactivated fetchers can be documented (important for traceable Searching (SLRs))\n+* Bad, because Entries for databases and queries needed\n+\n+### Replace entries with instances\n+\n+* Good, because no need for database and query entries\n+* Bad, because custom de-/serializers for fetchers and complex queries needed", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI1OTAyNw=="}, "originalCommit": {"oid": "4b699d669f962e3cc90d4788e5cbadbabf0acfa2"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgxOTIxMA==", "bodyText": "I am aiming for creating a larger body of in-the-wirld ADRs to foster research on them. The example at hand can perfectly used to discuss the granularity of ADRs. - Thus, my wish is that the ADR is kept.", "url": "https://github.com/JabRef/jabref/pull/7126#discussion_r532819210", "createdAt": "2020-11-30T18:45:02Z", "author": {"login": "koppor"}, "path": "docs/adr/0019-keep-study-as-a-dto.md", "diffHunk": "@@ -0,0 +1,32 @@\n+# Keep study as a DTO\n+\n+## Context and Problem Statement\n+\n+The study holds query and library entries that could be replaced respectively with complex query and fetcher instances.\n+This poses the question: should the study remain a pure DTO object or should it contain direct object instances?\n+\n+## Considered Options\n+\n+* Keep study as DTO and use transformers\n+* Replace entries with instances\n+\n+## Decision Outcome\n+\n+Chosen option: \"Keep study as DTO and use transformators\", because comes out best (see below).\n+\n+## Pros and Cons of the Options\n+\n+### Keep study as DTO and use transformators\n+\n+* Good, because makes GUI implementation probably easier down the line\n+* Good, because no need for custom serialization\n+* Good, because deactivated fetchers can be documented (important for traceable Searching (SLRs))\n+* Bad, because Entries for databases and queries needed\n+\n+### Replace entries with instances\n+\n+* Good, because no need for database and query entries\n+* Bad, because custom de-/serializers for fetchers and complex queries needed", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI1OTAyNw=="}, "originalCommit": {"oid": "4b699d669f962e3cc90d4788e5cbadbabf0acfa2"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjczODk0OnYy", "diffSide": "RIGHT", "path": "docs/adr/0018-use-Jackson-to-parse-study-yml.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODo0MDowN1rOH8IiJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODo0MDowN1rOH8IiJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgxNjQyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * SnakeYAML Engine\n          \n          \n            \n            * [SnakeYAML Engine](https://bitbucket.org/asomov/snakeyaml)", "url": "https://github.com/JabRef/jabref/pull/7126#discussion_r532816420", "createdAt": "2020-11-30T18:40:07Z", "author": {"login": "koppor"}, "path": "docs/adr/0018-use-Jackson-to-parse-study-yml.md", "diffHunk": "@@ -0,0 +1,51 @@\n+# Use Jackson to parse study.yml\n+\n+## Context and Problem Statement\n+\n+The study definition file is formulated as a YAML document.\n+To accessed the definition within JabRef this document has to be parsed.\n+What parser should be used to parse YAML files?\n+\n+## Considered Options\n+\n+* Jackson\n+* SnakeYAML Engine", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0dd2e61fda8b20e9e7eff878af28453f3a3d840"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0Mjc0MDEwOnYy", "diffSide": "RIGHT", "path": "docs/adr/0018-use-Jackson-to-parse-study-yml.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODo0MDoyM1rOH8Iivw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODo0MDoyM1rOH8Iivw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgxNjU3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Jackson\n          \n          \n            \n            * [Jackson](https://github.com/FasterXML/jackson-dataformat-yaml)", "url": "https://github.com/JabRef/jabref/pull/7126#discussion_r532816575", "createdAt": "2020-11-30T18:40:23Z", "author": {"login": "koppor"}, "path": "docs/adr/0018-use-Jackson-to-parse-study-yml.md", "diffHunk": "@@ -0,0 +1,51 @@\n+# Use Jackson to parse study.yml\n+\n+## Context and Problem Statement\n+\n+The study definition file is formulated as a YAML document.\n+To accessed the definition within JabRef this document has to be parsed.\n+What parser should be used to parse YAML files?\n+\n+## Considered Options\n+\n+* Jackson", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0dd2e61fda8b20e9e7eff878af28453f3a3d840"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0Mjc0MDcwOnYy", "diffSide": "RIGHT", "path": "docs/adr/0018-use-Jackson-to-parse-study-yml.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODo0MDozNFrOH8IjGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODo0MDozNFrOH8IjGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgxNjY2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Own parser\n          \n          \n            \n            * Self-written parser", "url": "https://github.com/JabRef/jabref/pull/7126#discussion_r532816666", "createdAt": "2020-11-30T18:40:34Z", "author": {"login": "koppor"}, "path": "docs/adr/0018-use-Jackson-to-parse-study-yml.md", "diffHunk": "@@ -0,0 +1,51 @@\n+# Use Jackson to parse study.yml\n+\n+## Context and Problem Statement\n+\n+The study definition file is formulated as a YAML document.\n+To accessed the definition within JabRef this document has to be parsed.\n+What parser should be used to parse YAML files?\n+\n+## Considered Options\n+\n+* Jackson\n+* SnakeYAML Engine\n+* yamlbeans\n+* eo-yaml\n+* Own parser", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0dd2e61fda8b20e9e7eff878af28453f3a3d840"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0Mjc0NjI2OnYy", "diffSide": "RIGHT", "path": "docs/adr/0018-use-Jackson-to-parse-study-yml.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODo0MjowMlrOH8ImWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODo0MjowMlrOH8ImWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgxNzQ5OA==", "bodyText": "Please add\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Bad, because has to be tested extensively\n          \n          \n            \n            * Bad, because has to be tested extensively\n          \n          \n            \n            \n          \n          \n            \n            ## Links\n          \n          \n            \n            \n          \n          \n            \n            * [Winery's ADR-0009](https://github.com/eclipse/winery/blob/master/docs/adr/0009-manual-tosca-yaml-serialisation.md)\n          \n          \n            \n            * [Winery's ADR-0010](https://github.com/eclipse/winery/blob/master/docs/adr/0010-tosca-yaml-deserialisation-using-snakeyaml.md)", "url": "https://github.com/JabRef/jabref/pull/7126#discussion_r532817498", "createdAt": "2020-11-30T18:42:02Z", "author": {"login": "koppor"}, "path": "docs/adr/0018-use-Jackson-to-parse-study-yml.md", "diffHunk": "@@ -0,0 +1,51 @@\n+# Use Jackson to parse study.yml\n+\n+## Context and Problem Statement\n+\n+The study definition file is formulated as a YAML document.\n+To accessed the definition within JabRef this document has to be parsed.\n+What parser should be used to parse YAML files?\n+\n+## Considered Options\n+\n+* Jackson\n+* SnakeYAML Engine\n+* yamlbeans\n+* eo-yaml\n+* Own parser\n+\n+## Decision Outcome\n+\n+Chosen option: Jackson, because as it is a dedicated library for parsing YAML. yamlbeans also seem to be viable. They all offer similar functionality\n+\n+## Pros and Cons of the Options\n+\n+### Jackson\n+\n+* Good, because established YAML parser library\n+* Good, because supports YAML 1.2\n+* Good, because it can parse LocalDate\n+\n+### SnakeYAML Engine\n+\n+* Good, because established YAML parser library\n+* Good, because supports YAML 1.2\n+* Bad, because cannot parse YAML into Java DTOs\n+\n+### yamlbeans\n+\n+* Good, because established YAML parser library\n+* Good, because [nice getting started page](https://github.com/EsotericSoftware/yamlbeans)\n+* Bad, because objects need to be annotated in the yaml file to be parsed into Java objects\n+\n+### eo-yaml\n+\n+* Good, because established YAML parser library\n+* Good, because supports YAML 1.2\n+* Bad, because cannot parse YAML into Java DTOs?\n+\n+### Own parser\n+\n+* Good, because easily customizable\n+* Bad, because high effort\n+* Bad, because has to be tested extensively", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0dd2e61fda8b20e9e7eff878af28453f3a3d840"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0Mjc0ODk1OnYy", "diffSide": "RIGHT", "path": "docs/adr/0018-use-Jackson-to-parse-study-yml.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODo0Mjo0N1rOH8In9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODo0Mjo0N1rOH8In9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgxNzkwOQ==", "bodyText": "Can link the documentaiton what one has to todo else?", "url": "https://github.com/JabRef/jabref/pull/7126#discussion_r532817909", "createdAt": "2020-11-30T18:42:47Z", "author": {"login": "koppor"}, "path": "docs/adr/0018-use-Jackson-to-parse-study-yml.md", "diffHunk": "@@ -0,0 +1,51 @@\n+# Use Jackson to parse study.yml\n+\n+## Context and Problem Statement\n+\n+The study definition file is formulated as a YAML document.\n+To accessed the definition within JabRef this document has to be parsed.\n+What parser should be used to parse YAML files?\n+\n+## Considered Options\n+\n+* Jackson\n+* SnakeYAML Engine\n+* yamlbeans\n+* eo-yaml\n+* Own parser\n+\n+## Decision Outcome\n+\n+Chosen option: Jackson, because as it is a dedicated library for parsing YAML. yamlbeans also seem to be viable. They all offer similar functionality\n+\n+## Pros and Cons of the Options\n+\n+### Jackson\n+\n+* Good, because established YAML parser library\n+* Good, because supports YAML 1.2\n+* Good, because it can parse LocalDate\n+\n+### SnakeYAML Engine\n+\n+* Good, because established YAML parser library\n+* Good, because supports YAML 1.2\n+* Bad, because cannot parse YAML into Java DTOs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0dd2e61fda8b20e9e7eff878af28453f3a3d840"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2116, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}