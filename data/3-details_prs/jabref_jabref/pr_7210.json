{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzMTI3NTA1", "number": 7210, "title": "Updates to institution citation keys", "bodyText": "Fixes #6942. Fixes #7199.\nTL;DR\nAuthors only having a last name are abbreviated. #6942 is miss-abbreviated because name parts containing uni are assumed to be universities, e.g., United Airlines. #7199 is triggers the abbreviation method because, from BibTeX\u00b4s point-of-view, the author only has a last name. The name is later removed because Java does not classify the first character as an uppercase letter, hence the heuristic assumes it is an insignificant word. E.g., {eBay} gets removed, {JabRef} doesn't.\nBackground\nAuthors that are institutions can have very lengthy citation keys unless they are abbreviated in some fashion. The abbreviations are generated in\n\n  \n    \n      jabref/src/main/java/org/jabref/logic/citationkeypattern/BracketedPattern.java\n    \n    \n         Line 1243\n      in\n      6718c08\n    \n    \n    \n    \n\n        \n          \n           private static String generateInstitutionKey(String content) { \n        \n    \n  \n\n\nwhich is based on a heuristic that tries to determine a suitable abbreviation based on the content of the specific author.\nIssue #6942 is due to a regexp being overly broad when determining if an author is a university.\nIssue #7199 was created from #6706 where I changed how a company/institute is identified. In previous versions of JabRef, an author is an institute if it is enclosed in curly brackets (e.g., {JabRef}), and I changed it to also include authors' who only have a last name (e.g., JabRef), which means that the author in issue #7199 is treated as an institution.\nThis would not have been an issue if it wasn't because the heuristic for creating a citation key identifies words starting with a lowercase letter in the author's name as an invalid part of an institute abbreviation. Think of the \"and\" in \"National Aeronautics and Space Administration\"). Since the author's name only consist of one \"word\", it is removed. (this is why the workaround @tobiasdiez mentioned does not work, even if it should)\nChanges for\n#6942\n\nIdentifying universities in the authors' names is arbitrary. The new regexp matches ^uni(v|b|$).* instead of ^uni. There are other suggestions in #6706 that can be implemented instead.\nThe inline institute abbreviation should now work again (e.g., {JabRef ({JB})} should produce JB)\nI am ignoring the shortauthor field, because I find it unclear how and when to use the field (e.g., for multiple authors).\n\n#7199\n\nI'll change how institutes are identified, so that the Author must only have a last name and that last name must contain a space. This should only happen if the Author originally were enclosed in brackets. In all other cases I'd argue it is acceptable to not abbreviate the author since the name is only one word.\n\nDrawbacks to this approach is that I am using the LatexToUnicodeAdapter to remove braces, and it doesn't like unbalanced ones.\n\n\n\n\nTodo\n\n Log a warning for unbalanced brackets in Authors\n Change in CHANGELOG.md described (if applicable)\n Tests created for changes (if applicable)\n Manually tested changed features in running JabRef (always required)\n Screenshots added in PR description (for UI changes)\n Checked documentation: Is the information available and up to date? If not created an issue at https://github.com/JabRef/user-documentation/issues or, even better, submitted a pull request to the documentation repository.", "createdAt": "2020-12-20T20:29:31Z", "url": "https://github.com/JabRef/jabref/pull/7210", "merged": true, "mergeCommit": {"oid": "78b08b5b9c7cb4cce8d186003b57f94b7191cb07"}, "closed": true, "closedAt": "2020-12-28T12:20:34Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "timelineItems": {"totalCount": 36, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdnd8H8AH2gAyNTQzMTI3NTA1OjNkZDBiMjgwMTdiMDhmNGJjNTUzOTY2NzEzYTVkY2Q3NTdhZmNiMTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdqkcgBAH2gAyNTQzMTI3NTA1OjFmYzk5MWU1ZjlhZDg2NjhlN2VhYWE3ZjMyMDZhYzMxMDFhNDU2Yjk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3dd0b28017b08f4bc553966713a5dcd757afcb17", "author": {"user": {"login": "k3KAW8Pnf7mkmdSMPHz27", "name": "Jonatan Asketorp"}}, "url": "https://github.com/JabRef/jabref/commit/3dd0b28017b08f4bc553966713a5dcd757afcb17", "committedDate": "2020-12-18T20:13:12Z", "message": "Add test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b26d0c276b5792fd5315b73e24183e9cd47e7f8", "author": {"user": {"login": "k3KAW8Pnf7mkmdSMPHz27", "name": "Jonatan Asketorp"}}, "url": "https://github.com/JabRef/jabref/commit/6b26d0c276b5792fd5315b73e24183e9cd47e7f8", "committedDate": "2020-12-18T20:21:50Z", "message": "Fix overly broad regexp\n\nThe regexp is still broad, but unless there are further complaints\n perhaps it is enough."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d6d393148455682603fcbc7a5c2992e3ea18f9c", "author": {"user": {"login": "k3KAW8Pnf7mkmdSMPHz27", "name": "Jonatan Asketorp"}}, "url": "https://github.com/JabRef/jabref/commit/1d6d393148455682603fcbc7a5c2992e3ea18f9c", "committedDate": "2020-12-18T20:29:05Z", "message": "Fix case-sensitivity in test case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d61a44fc4db0cbea5f01e505a4d366e5277156f", "author": {"user": {"login": "k3KAW8Pnf7mkmdSMPHz27", "name": "Jonatan Asketorp"}}, "url": "https://github.com/JabRef/jabref/commit/5d61a44fc4db0cbea5f01e505a4d366e5277156f", "committedDate": "2020-12-18T20:41:25Z", "message": "Fix inline abbreviation for institutes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c76bb2820eaff2714caa46c50d9a24bf647ea0de", "author": {"user": {"login": "k3KAW8Pnf7mkmdSMPHz27", "name": "Jonatan Asketorp"}}, "url": "https://github.com/JabRef/jabref/commit/c76bb2820eaff2714caa46c50d9a24bf647ea0de", "committedDate": "2020-12-18T20:48:09Z", "message": "Drop test for short author"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df0144c284e62e0127dfed29423f8afe9feef667", "author": {"user": {"login": "k3KAW8Pnf7mkmdSMPHz27", "name": "Jonatan Asketorp"}}, "url": "https://github.com/JabRef/jabref/commit/df0144c284e62e0127dfed29423f8afe9feef667", "committedDate": "2020-12-20T20:26:41Z", "message": "Add test case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5b5874bb679acc91779ccacb4b0830f109c62e4", "author": {"user": {"login": "k3KAW8Pnf7mkmdSMPHz27", "name": "Jonatan Asketorp"}}, "url": "https://github.com/JabRef/jabref/commit/e5b5874bb679acc91779ccacb4b0830f109c62e4", "committedDate": "2020-12-20T21:38:37Z", "message": "Add test case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95dbc21d47da579b811efdd9f98a1a5fd2cf6b51", "author": {"user": {"login": "k3KAW8Pnf7mkmdSMPHz27", "name": "Jonatan Asketorp"}}, "url": "https://github.com/JabRef/jabref/commit/95dbc21d47da579b811efdd9f98a1a5fd2cf6b51", "committedDate": "2020-12-20T21:48:37Z", "message": "Fix test case for single word author"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e635759949fe62f6026866968789d7629371d327", "author": {"user": {"login": "k3KAW8Pnf7mkmdSMPHz27", "name": "Jonatan Asketorp"}}, "url": "https://github.com/JabRef/jabref/commit/e635759949fe62f6026866968789d7629371d327", "committedDate": "2020-12-20T22:20:51Z", "message": "Fix un-escaped backslash in test case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6e41cc9095b8e3c59f4f8f188cfb83e4b1b243f", "author": {"user": {"login": "k3KAW8Pnf7mkmdSMPHz27", "name": "Jonatan Asketorp"}}, "url": "https://github.com/JabRef/jabref/commit/f6e41cc9095b8e3c59f4f8f188cfb83e4b1b243f", "committedDate": "2020-12-21T13:11:53Z", "message": "Fix unbalanced brackets in text cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d531b8871a5b214dfc71ba095595966d70ba4061", "author": {"user": {"login": "k3KAW8Pnf7mkmdSMPHz27", "name": "Jonatan Asketorp"}}, "url": "https://github.com/JabRef/jabref/commit/d531b8871a5b214dfc71ba095595966d70ba4061", "committedDate": "2020-12-21T13:14:25Z", "message": "Fix institute author abbreviations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcfa8da78892cde95971f7b2b725f7aaed61f61a", "author": {"user": {"login": "k3KAW8Pnf7mkmdSMPHz27", "name": "Jonatan Asketorp"}}, "url": "https://github.com/JabRef/jabref/commit/bcfa8da78892cde95971f7b2b725f7aaed61f61a", "committedDate": "2020-12-21T13:25:10Z", "message": "Readability modifications"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b55c4136e6f8c2a427712b639dba2e0fdc2f2e86", "author": {"user": {"login": "k3KAW8Pnf7mkmdSMPHz27", "name": "Jonatan Asketorp"}}, "url": "https://github.com/JabRef/jabref/commit/b55c4136e6f8c2a427712b639dba2e0fdc2f2e86", "committedDate": "2020-12-21T14:20:26Z", "message": "Add log output for generating university key\n\nWhen generating a key from a university name it should contain at least\ntwo parts, \"university\" and the university's name. If it does not it is\nlikely that the name contained latex that could not be resolved\ncorrectly."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a787acc13c6cd1182643828f4c326b55b7033fbf", "author": {"user": {"login": "k3KAW8Pnf7mkmdSMPHz27", "name": "Jonatan Asketorp"}}, "url": "https://github.com/JabRef/jabref/commit/a787acc13c6cd1182643828f4c326b55b7033fbf", "committedDate": "2020-12-21T14:32:14Z", "message": "Fix JavaDoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b6454f7e2deb79167ca8371a7d47ae9432f4833", "author": {"user": {"login": "k3KAW8Pnf7mkmdSMPHz27", "name": "Jonatan Asketorp"}}, "url": "https://github.com/JabRef/jabref/commit/5b6454f7e2deb79167ca8371a7d47ae9432f4833", "committedDate": "2020-12-21T14:41:04Z", "message": "Update CHANGELOG.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b5271db6b4d64c377ff3ad74a78902c31923420", "author": {"user": {"login": "k3KAW8Pnf7mkmdSMPHz27", "name": "Jonatan Asketorp"}}, "url": "https://github.com/JabRef/jabref/commit/7b5271db6b4d64c377ff3ad74a78902c31923420", "committedDate": "2020-12-21T14:42:16Z", "message": "Merge branch 'master' into fix-for-issue-6942"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df66902f4b820642a19a7a4e6499e5256e818dc7", "author": {"user": {"login": "k3KAW8Pnf7mkmdSMPHz27", "name": "Jonatan Asketorp"}}, "url": "https://github.com/JabRef/jabref/commit/df66902f4b820642a19a7a4e6499e5256e818dc7", "committedDate": "2020-12-21T17:03:42Z", "message": "Add log message on miss-parsed LaTeX"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a41af7a55e26d38c57036a7b9a13879248547f5", "author": {"user": {"login": "k3KAW8Pnf7mkmdSMPHz27", "name": "Jonatan Asketorp"}}, "url": "https://github.com/JabRef/jabref/commit/1a41af7a55e26d38c57036a7b9a13879248547f5", "committedDate": "2020-12-21T17:04:47Z", "message": "Merge remote-tracking branch 'origin/fix-for-issue-6942' into fix-for-issue-6942"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3e17d4d1cf9239b83ef40ae013a80279238eff5", "author": {"user": {"login": "k3KAW8Pnf7mkmdSMPHz27", "name": "Jonatan Asketorp"}}, "url": "https://github.com/JabRef/jabref/commit/a3e17d4d1cf9239b83ef40ae013a80279238eff5", "committedDate": "2020-12-21T19:32:12Z", "message": "Change fields to final"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb10e4b38fb89aaf9a8995a4f5c4d0c23be20e8b", "author": {"user": {"login": "k3KAW8Pnf7mkmdSMPHz27", "name": "Jonatan Asketorp"}}, "url": "https://github.com/JabRef/jabref/commit/eb10e4b38fb89aaf9a8995a4f5c4d0c23be20e8b", "committedDate": "2020-12-21T21:06:17Z", "message": "Fix institute abbreviation with special characters\n\nSome characters will be converted into a more BibTeX friendly during\ncitation key generation. \u00d8resund Science Region should be abbreviated to\n OSR but instead becomes OeSR."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ece416a116132cf835f984fee2bdc519e8c6b945", "author": {"user": {"login": "k3KAW8Pnf7mkmdSMPHz27", "name": "Jonatan Asketorp"}}, "url": "https://github.com/JabRef/jabref/commit/ece416a116132cf835f984fee2bdc519e8c6b945", "committedDate": "2020-12-21T21:07:13Z", "message": "Drop out-of-scope test case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7986b3bdf3beb4856eb6dd7405b356f212d141a", "author": {"user": {"login": "k3KAW8Pnf7mkmdSMPHz27", "name": "Jonatan Asketorp"}}, "url": "https://github.com/JabRef/jabref/commit/b7986b3bdf3beb4856eb6dd7405b356f212d141a", "committedDate": "2020-12-21T21:31:48Z", "message": "Codestyle change"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3Mzc1ODI1", "url": "https://github.com/JabRef/jabref/pull/7210#pullrequestreview-557375825", "createdAt": "2020-12-22T21:25:57Z", "commit": {"oid": "b7986b3bdf3beb4856eb6dd7405b356f212d141a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMToyNTo1N1rOIKJpAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMToyNTo1N1rOIKJpAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUxNDYyNQ==", "bodyText": "I think it makes more sense to use  Optional instead of exception handling for control flows (that is a bad idea).", "url": "https://github.com/JabRef/jabref/pull/7210#discussion_r547514625", "createdAt": "2020-12-22T21:25:57Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/model/strings/LatexToUnicodeAdapter.java", "diffHunk": "@@ -5,23 +5,56 @@\n import java.util.regex.Pattern;\n \n import com.github.tomtung.latex2unicode.LaTeX2Unicode;\n+import fastparse.core.Parsed;\n \n /**\n  * Adapter class for the latex2unicode lib. This is an alternative to our LatexToUnicode class\n  */\n public class LatexToUnicodeAdapter {\n \n-    private static Pattern underscoreMatcher = Pattern.compile(\"_(?!\\\\{)\");\n+    private static final Pattern UNDERSCORE_MATCHER = Pattern.compile(\"_(?!\\\\{)\");\n \n-    private static String replacementChar = \"\\uFFFD\";\n+    private static final String REPLACEMENT_CHAR = \"\\uFFFD\";\n \n-    private static Pattern underscorePlaceholderMatcher = Pattern.compile(replacementChar);\n+    private static final Pattern UNDERSCORE_PLACEHOLDER_MATCHER = Pattern.compile(REPLACEMENT_CHAR);\n \n+    /**\n+     * Attempts to resolve all LaTeX in the String.\n+     *\n+     * @param inField a String containing LaTeX\n+     * @return a String with LaTeX resolved into Unicode, or the original String if the LaTeX could not be parsed\n+     */\n     public static String format(String inField) {\n         Objects.requireNonNull(inField);\n \n-        String toFormat = underscoreMatcher.matcher(inField).replaceAll(replacementChar);\n-        toFormat = Normalizer.normalize(LaTeX2Unicode.convert(toFormat), Normalizer.Form.NFC);\n-        return underscorePlaceholderMatcher.matcher(toFormat).replaceAll(\"_\");\n+        try {\n+            return parse(inField);\n+        } catch (IllegalArgumentException ignored) {\n+            return Normalizer.normalize(inField, Normalizer.Form.NFC);\n+        }\n+    }\n+\n+    /**\n+     * Attempts to resolve all LaTeX in the String.\n+     *\n+     * @param inField a String containing LaTeX\n+     * @return a String with LaTeX resolved into Unicode\n+     * @throws IllegalArgumentException if the LaTeX could not be parsed\n+     */\n+    public static String parse(String inField) throws IllegalArgumentException {\n+        Objects.requireNonNull(inField);\n+        String toFormat = UNDERSCORE_MATCHER.matcher(inField).replaceAll(REPLACEMENT_CHAR);\n+        try {\n+            var parsingResult = LaTeX2Unicode.parse(toFormat);\n+            if (parsingResult instanceof Parsed.Success) {\n+                String text = parsingResult.get().value();\n+                toFormat = Normalizer.normalize(text, Normalizer.Form.NFC);\n+                return UNDERSCORE_PLACEHOLDER_MATCHER.matcher(toFormat).replaceAll(\"_\");\n+            } else {\n+                throw new IllegalArgumentException(\"Parsing of latex failed.\");\n+            }\n+        } catch (Throwable throwable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7986b3bdf3beb4856eb6dd7405b356f212d141a"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3Mzk1NTk0", "url": "https://github.com/JabRef/jabref/pull/7210#pullrequestreview-557395594", "createdAt": "2020-12-22T22:10:38Z", "commit": {"oid": "b7986b3bdf3beb4856eb6dd7405b356f212d141a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMjoxMDozOFrOIKKp0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMjoxMDozOFrOIKKp0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUzMTIxOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            return UNDERSCORE_PLACEHOLDER_MATCHER.matcher(toFormat).replaceAll(\"_\");\n          \n          \n            \n                            return Optional.of(UNDERSCORE_PLACEHOLDER_MATCHER.matcher(toFormat).replaceAll(\"_\"));", "url": "https://github.com/JabRef/jabref/pull/7210#discussion_r547531218", "createdAt": "2020-12-22T22:10:38Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/model/strings/LatexToUnicodeAdapter.java", "diffHunk": "@@ -5,23 +5,56 @@\n import java.util.regex.Pattern;\n \n import com.github.tomtung.latex2unicode.LaTeX2Unicode;\n+import fastparse.core.Parsed;\n \n /**\n  * Adapter class for the latex2unicode lib. This is an alternative to our LatexToUnicode class\n  */\n public class LatexToUnicodeAdapter {\n \n-    private static Pattern underscoreMatcher = Pattern.compile(\"_(?!\\\\{)\");\n+    private static final Pattern UNDERSCORE_MATCHER = Pattern.compile(\"_(?!\\\\{)\");\n \n-    private static String replacementChar = \"\\uFFFD\";\n+    private static final String REPLACEMENT_CHAR = \"\\uFFFD\";\n \n-    private static Pattern underscorePlaceholderMatcher = Pattern.compile(replacementChar);\n+    private static final Pattern UNDERSCORE_PLACEHOLDER_MATCHER = Pattern.compile(REPLACEMENT_CHAR);\n \n+    /**\n+     * Attempts to resolve all LaTeX in the String.\n+     *\n+     * @param inField a String containing LaTeX\n+     * @return a String with LaTeX resolved into Unicode, or the original String if the LaTeX could not be parsed\n+     */\n     public static String format(String inField) {\n         Objects.requireNonNull(inField);\n \n-        String toFormat = underscoreMatcher.matcher(inField).replaceAll(replacementChar);\n-        toFormat = Normalizer.normalize(LaTeX2Unicode.convert(toFormat), Normalizer.Form.NFC);\n-        return underscorePlaceholderMatcher.matcher(toFormat).replaceAll(\"_\");\n+        try {\n+            return parse(inField);\n+        } catch (IllegalArgumentException ignored) {\n+            return Normalizer.normalize(inField, Normalizer.Form.NFC);\n+        }\n+    }\n+\n+    /**\n+     * Attempts to resolve all LaTeX in the String.\n+     *\n+     * @param inField a String containing LaTeX\n+     * @return a String with LaTeX resolved into Unicode\n+     * @throws IllegalArgumentException if the LaTeX could not be parsed\n+     */\n+    public static String parse(String inField) throws IllegalArgumentException {\n+        Objects.requireNonNull(inField);\n+        String toFormat = UNDERSCORE_MATCHER.matcher(inField).replaceAll(REPLACEMENT_CHAR);\n+        try {\n+            var parsingResult = LaTeX2Unicode.parse(toFormat);\n+            if (parsingResult instanceof Parsed.Success) {\n+                String text = parsingResult.get().value();\n+                toFormat = Normalizer.normalize(text, Normalizer.Form.NFC);\n+                return UNDERSCORE_PLACEHOLDER_MATCHER.matcher(toFormat).replaceAll(\"_\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7986b3bdf3beb4856eb6dd7405b356f212d141a"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3Mzk1OTI3", "url": "https://github.com/JabRef/jabref/pull/7210#pullrequestreview-557395927", "createdAt": "2020-12-22T22:11:10Z", "commit": {"oid": "b7986b3bdf3beb4856eb6dd7405b356f212d141a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMjoxMToxMFrOIKKqeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMjoxMToxMFrOIKKqeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUzMTM4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new IllegalArgumentException(\"Parsing of latex failed.\");\n          \n          \n            \n             return Optional.empty()", "url": "https://github.com/JabRef/jabref/pull/7210#discussion_r547531385", "createdAt": "2020-12-22T22:11:10Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/model/strings/LatexToUnicodeAdapter.java", "diffHunk": "@@ -5,23 +5,56 @@\n import java.util.regex.Pattern;\n \n import com.github.tomtung.latex2unicode.LaTeX2Unicode;\n+import fastparse.core.Parsed;\n \n /**\n  * Adapter class for the latex2unicode lib. This is an alternative to our LatexToUnicode class\n  */\n public class LatexToUnicodeAdapter {\n \n-    private static Pattern underscoreMatcher = Pattern.compile(\"_(?!\\\\{)\");\n+    private static final Pattern UNDERSCORE_MATCHER = Pattern.compile(\"_(?!\\\\{)\");\n \n-    private static String replacementChar = \"\\uFFFD\";\n+    private static final String REPLACEMENT_CHAR = \"\\uFFFD\";\n \n-    private static Pattern underscorePlaceholderMatcher = Pattern.compile(replacementChar);\n+    private static final Pattern UNDERSCORE_PLACEHOLDER_MATCHER = Pattern.compile(REPLACEMENT_CHAR);\n \n+    /**\n+     * Attempts to resolve all LaTeX in the String.\n+     *\n+     * @param inField a String containing LaTeX\n+     * @return a String with LaTeX resolved into Unicode, or the original String if the LaTeX could not be parsed\n+     */\n     public static String format(String inField) {\n         Objects.requireNonNull(inField);\n \n-        String toFormat = underscoreMatcher.matcher(inField).replaceAll(replacementChar);\n-        toFormat = Normalizer.normalize(LaTeX2Unicode.convert(toFormat), Normalizer.Form.NFC);\n-        return underscorePlaceholderMatcher.matcher(toFormat).replaceAll(\"_\");\n+        try {\n+            return parse(inField);\n+        } catch (IllegalArgumentException ignored) {\n+            return Normalizer.normalize(inField, Normalizer.Form.NFC);\n+        }\n+    }\n+\n+    /**\n+     * Attempts to resolve all LaTeX in the String.\n+     *\n+     * @param inField a String containing LaTeX\n+     * @return a String with LaTeX resolved into Unicode\n+     * @throws IllegalArgumentException if the LaTeX could not be parsed\n+     */\n+    public static String parse(String inField) throws IllegalArgumentException {\n+        Objects.requireNonNull(inField);\n+        String toFormat = UNDERSCORE_MATCHER.matcher(inField).replaceAll(REPLACEMENT_CHAR);\n+        try {\n+            var parsingResult = LaTeX2Unicode.parse(toFormat);\n+            if (parsingResult instanceof Parsed.Success) {\n+                String text = parsingResult.get().value();\n+                toFormat = Normalizer.normalize(text, Normalizer.Form.NFC);\n+                return UNDERSCORE_PLACEHOLDER_MATCHER.matcher(toFormat).replaceAll(\"_\");\n+            } else {\n+                throw new IllegalArgumentException(\"Parsing of latex failed.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7986b3bdf3beb4856eb6dd7405b356f212d141a"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3Mzk2MzQy", "url": "https://github.com/JabRef/jabref/pull/7210#pullrequestreview-557396342", "createdAt": "2020-12-22T22:11:26Z", "commit": {"oid": "b7986b3bdf3beb4856eb6dd7405b356f212d141a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMjoxMToyNlrOIKKq6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMjoxMToyNlrOIKKq6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUzMTQ5Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static String parse(String inField) throws IllegalArgumentException {\n          \n          \n            \n                public static Optional<String> parse(String inField) throws IllegalArgumentException {", "url": "https://github.com/JabRef/jabref/pull/7210#discussion_r547531496", "createdAt": "2020-12-22T22:11:26Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/model/strings/LatexToUnicodeAdapter.java", "diffHunk": "@@ -5,23 +5,56 @@\n import java.util.regex.Pattern;\n \n import com.github.tomtung.latex2unicode.LaTeX2Unicode;\n+import fastparse.core.Parsed;\n \n /**\n  * Adapter class for the latex2unicode lib. This is an alternative to our LatexToUnicode class\n  */\n public class LatexToUnicodeAdapter {\n \n-    private static Pattern underscoreMatcher = Pattern.compile(\"_(?!\\\\{)\");\n+    private static final Pattern UNDERSCORE_MATCHER = Pattern.compile(\"_(?!\\\\{)\");\n \n-    private static String replacementChar = \"\\uFFFD\";\n+    private static final String REPLACEMENT_CHAR = \"\\uFFFD\";\n \n-    private static Pattern underscorePlaceholderMatcher = Pattern.compile(replacementChar);\n+    private static final Pattern UNDERSCORE_PLACEHOLDER_MATCHER = Pattern.compile(REPLACEMENT_CHAR);\n \n+    /**\n+     * Attempts to resolve all LaTeX in the String.\n+     *\n+     * @param inField a String containing LaTeX\n+     * @return a String with LaTeX resolved into Unicode, or the original String if the LaTeX could not be parsed\n+     */\n     public static String format(String inField) {\n         Objects.requireNonNull(inField);\n \n-        String toFormat = underscoreMatcher.matcher(inField).replaceAll(replacementChar);\n-        toFormat = Normalizer.normalize(LaTeX2Unicode.convert(toFormat), Normalizer.Form.NFC);\n-        return underscorePlaceholderMatcher.matcher(toFormat).replaceAll(\"_\");\n+        try {\n+            return parse(inField);\n+        } catch (IllegalArgumentException ignored) {\n+            return Normalizer.normalize(inField, Normalizer.Form.NFC);\n+        }\n+    }\n+\n+    /**\n+     * Attempts to resolve all LaTeX in the String.\n+     *\n+     * @param inField a String containing LaTeX\n+     * @return a String with LaTeX resolved into Unicode\n+     * @throws IllegalArgumentException if the LaTeX could not be parsed\n+     */\n+    public static String parse(String inField) throws IllegalArgumentException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7986b3bdf3beb4856eb6dd7405b356f212d141a"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3Mzk2Nzcw", "url": "https://github.com/JabRef/jabref/pull/7210#pullrequestreview-557396770", "createdAt": "2020-12-22T22:12:27Z", "commit": {"oid": "b7986b3bdf3beb4856eb6dd7405b356f212d141a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMjoxMjoyN1rOIKKszQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMjoxMjoyN1rOIKKszQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUzMTk4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return parse(inField);\n          \n          \n            \n                        return parse(inField).orElse(Normalizer.normalize(inField, Normalizer.Form.NFC));\n          \n      \n    \n    \n  \n\nthat should work\nAnd you can also then get rid of the try catch block here", "url": "https://github.com/JabRef/jabref/pull/7210#discussion_r547531981", "createdAt": "2020-12-22T22:12:27Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/model/strings/LatexToUnicodeAdapter.java", "diffHunk": "@@ -5,23 +5,56 @@\n import java.util.regex.Pattern;\n \n import com.github.tomtung.latex2unicode.LaTeX2Unicode;\n+import fastparse.core.Parsed;\n \n /**\n  * Adapter class for the latex2unicode lib. This is an alternative to our LatexToUnicode class\n  */\n public class LatexToUnicodeAdapter {\n \n-    private static Pattern underscoreMatcher = Pattern.compile(\"_(?!\\\\{)\");\n+    private static final Pattern UNDERSCORE_MATCHER = Pattern.compile(\"_(?!\\\\{)\");\n \n-    private static String replacementChar = \"\\uFFFD\";\n+    private static final String REPLACEMENT_CHAR = \"\\uFFFD\";\n \n-    private static Pattern underscorePlaceholderMatcher = Pattern.compile(replacementChar);\n+    private static final Pattern UNDERSCORE_PLACEHOLDER_MATCHER = Pattern.compile(REPLACEMENT_CHAR);\n \n+    /**\n+     * Attempts to resolve all LaTeX in the String.\n+     *\n+     * @param inField a String containing LaTeX\n+     * @return a String with LaTeX resolved into Unicode, or the original String if the LaTeX could not be parsed\n+     */\n     public static String format(String inField) {\n         Objects.requireNonNull(inField);\n \n-        String toFormat = underscoreMatcher.matcher(inField).replaceAll(replacementChar);\n-        toFormat = Normalizer.normalize(LaTeX2Unicode.convert(toFormat), Normalizer.Form.NFC);\n-        return underscorePlaceholderMatcher.matcher(toFormat).replaceAll(\"_\");\n+        try {\n+            return parse(inField);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7986b3bdf3beb4856eb6dd7405b356f212d141a"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3eac89d506d1c7c88f30897c99b0b91a49709e7b", "author": {"user": {"login": "k3KAW8Pnf7mkmdSMPHz27", "name": "Jonatan Asketorp"}}, "url": "https://github.com/JabRef/jabref/commit/3eac89d506d1c7c88f30897c99b0b91a49709e7b", "committedDate": "2020-12-22T22:16:49Z", "message": "Update src/main/java/org/jabref/model/strings/LatexToUnicodeAdapter.java\n\nCo-authored-by: Christoph <siedlerkiller@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e90f9cac9bae9bf40a1a33398f05c56ee42034fb", "author": {"user": {"login": "k3KAW8Pnf7mkmdSMPHz27", "name": "Jonatan Asketorp"}}, "url": "https://github.com/JabRef/jabref/commit/e90f9cac9bae9bf40a1a33398f05c56ee42034fb", "committedDate": "2020-12-22T22:16:59Z", "message": "Update src/main/java/org/jabref/model/strings/LatexToUnicodeAdapter.java\n\nCo-authored-by: Christoph <siedlerkiller@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6165cb75d597ad2226630988136ebe0769eb31a", "author": {"user": {"login": "k3KAW8Pnf7mkmdSMPHz27", "name": "Jonatan Asketorp"}}, "url": "https://github.com/JabRef/jabref/commit/f6165cb75d597ad2226630988136ebe0769eb31a", "committedDate": "2020-12-22T22:17:15Z", "message": "Update src/main/java/org/jabref/model/strings/LatexToUnicodeAdapter.java\n\nCo-authored-by: Christoph <siedlerkiller@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e78e8b924ee72a919c4dfd27133260967cbf95f8", "author": {"user": {"login": "k3KAW8Pnf7mkmdSMPHz27", "name": "Jonatan Asketorp"}}, "url": "https://github.com/JabRef/jabref/commit/e78e8b924ee72a919c4dfd27133260967cbf95f8", "committedDate": "2020-12-22T22:17:42Z", "message": "Update src/main/java/org/jabref/model/strings/LatexToUnicodeAdapter.java\n\nCo-authored-by: Christoph <siedlerkiller@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3NDAzMTg2", "url": "https://github.com/JabRef/jabref/pull/7210#pullrequestreview-557403186", "createdAt": "2020-12-22T22:28:53Z", "commit": {"oid": "e78e8b924ee72a919c4dfd27133260967cbf95f8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMjoyODo1M1rOIKLDPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMjoyODo1M1rOIKLDPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUzNzcyNA==", "bodyText": "the try and catch can now be removed", "url": "https://github.com/JabRef/jabref/pull/7210#discussion_r547537724", "createdAt": "2020-12-22T22:28:53Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/model/strings/LatexToUnicodeAdapter.java", "diffHunk": "@@ -5,23 +5,56 @@\n import java.util.regex.Pattern;\n \n import com.github.tomtung.latex2unicode.LaTeX2Unicode;\n+import fastparse.core.Parsed;\n \n /**\n  * Adapter class for the latex2unicode lib. This is an alternative to our LatexToUnicode class\n  */\n public class LatexToUnicodeAdapter {\n \n-    private static Pattern underscoreMatcher = Pattern.compile(\"_(?!\\\\{)\");\n+    private static final Pattern UNDERSCORE_MATCHER = Pattern.compile(\"_(?!\\\\{)\");\n \n-    private static String replacementChar = \"\\uFFFD\";\n+    private static final String REPLACEMENT_CHAR = \"\\uFFFD\";\n \n-    private static Pattern underscorePlaceholderMatcher = Pattern.compile(replacementChar);\n+    private static final Pattern UNDERSCORE_PLACEHOLDER_MATCHER = Pattern.compile(REPLACEMENT_CHAR);\n \n+    /**\n+     * Attempts to resolve all LaTeX in the String.\n+     *\n+     * @param inField a String containing LaTeX\n+     * @return a String with LaTeX resolved into Unicode, or the original String if the LaTeX could not be parsed\n+     */\n     public static String format(String inField) {\n         Objects.requireNonNull(inField);\n \n-        String toFormat = underscoreMatcher.matcher(inField).replaceAll(replacementChar);\n-        toFormat = Normalizer.normalize(LaTeX2Unicode.convert(toFormat), Normalizer.Form.NFC);\n-        return underscorePlaceholderMatcher.matcher(toFormat).replaceAll(\"_\");\n+        try {\n+            return parse(inField).orElse(Normalizer.normalize(inField, Normalizer.Form.NFC));\n+        } catch (IllegalArgumentException ignored) {\n+            return Normalizer.normalize(inField, Normalizer.Form.NFC);\n+        }\n+    }\n+\n+    /**\n+     * Attempts to resolve all LaTeX in the String.\n+     *\n+     * @param inField a String containing LaTeX\n+     * @return a String with LaTeX resolved into Unicode\n+     * @throws IllegalArgumentException if the LaTeX could not be parsed\n+     */\n+    public static Optional<String> parse(String inField) throws IllegalArgumentException {\n+        Objects.requireNonNull(inField);\n+        String toFormat = UNDERSCORE_MATCHER.matcher(inField).replaceAll(REPLACEMENT_CHAR);\n+        try {\n+            var parsingResult = LaTeX2Unicode.parse(toFormat);\n+            if (parsingResult instanceof Parsed.Success) {\n+                String text = parsingResult.get().value();\n+                toFormat = Normalizer.normalize(text, Normalizer.Form.NFC);\n+                return Optional.of(UNDERSCORE_PLACEHOLDER_MATCHER.matcher(toFormat).replaceAll(\"_\"));\n+            } else {\n+ return Optional.empty()\n+            }\n+        } catch (Throwable throwable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e78e8b924ee72a919c4dfd27133260967cbf95f8"}, "originalPosition": 58}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e3deae8646c9d98b466bb7586c803066bf295fd", "author": {"user": {"login": "k3KAW8Pnf7mkmdSMPHz27", "name": "Jonatan Asketorp"}}, "url": "https://github.com/JabRef/jabref/commit/3e3deae8646c9d98b466bb7586c803066bf295fd", "committedDate": "2020-12-23T00:42:02Z", "message": "Removes unnecessary checked exception"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad4dab99d62e0486eba5c17b3aba4d3bbf72a079", "author": {"user": {"login": "k3KAW8Pnf7mkmdSMPHz27", "name": "Jonatan Asketorp"}}, "url": "https://github.com/JabRef/jabref/commit/ad4dab99d62e0486eba5c17b3aba4d3bbf72a079", "committedDate": "2020-12-23T00:43:45Z", "message": "Fix missed NFC normalization"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4OTE5NTEy", "url": "https://github.com/JabRef/jabref/pull/7210#pullrequestreview-558919512", "createdAt": "2020-12-27T10:47:36Z", "commit": {"oid": "ad4dab99d62e0486eba5c17b3aba4d3bbf72a079"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fc991e5f9ad8668e7eaaa7f3206ac3101a456b9", "author": {"user": {"login": "k3KAW8Pnf7mkmdSMPHz27", "name": "Jonatan Asketorp"}}, "url": "https://github.com/JabRef/jabref/commit/1fc991e5f9ad8668e7eaaa7f3206ac3101a456b9", "committedDate": "2020-12-28T11:29:46Z", "message": "Add test case"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4924, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}