{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4MDQwMzYx", "number": 6116, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTowMzoyNFrODoCoBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTowNTo0N1rODoCoiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzEyNjQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/autosaveandbackup/BackupManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTowMzoyNFrOF2YkOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTowMzoyNFrOF2YkOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU2OTkxMw==", "bodyText": "Files.mismatch should do the job\nhttps://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/nio/file/Files.html#mismatch(java.nio.file.Path,java.nio.file.Path)", "url": "https://github.com/JabRef/jabref/pull/6116#discussion_r392569913", "createdAt": "2020-03-14T09:03:24Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/logic/autosaveandbackup/BackupManager.java", "diffHunk": "@@ -86,13 +87,27 @@ public static void shutdown(BibDatabaseContext bibDatabaseContext) {\n     }\n \n     /**\n-     * Checks whether a backup file exists for the given database file.\n+     * Checks whether a backup file exists for the given database file. If it exists, it is checked whether it is\n+     * different from the original.\n      *\n-     * @param originalPath Path to the file a backup should be checked for.\n+     * @param originalPath Path to the file a backup should be checked for. Example: jabref.bib.\n+     * @return <code>true</code> if backup file exists AND differs from originalPath. <code>false</code> is the\n+     * \"default\" return value in the good case. In the case of an exception <code>true</code> is returned to ensure that\n+     * the user checks the output.\n      */\n-    public static boolean checkForBackupFile(Path originalPath) {\n+    public static boolean backupFileDiffers(Path originalPath) {\n         Path backupPath = getBackupPath(originalPath);\n-        return Files.exists(backupPath) && !Files.isDirectory(backupPath);\n+        if (!Files.exists(backupPath) || Files.isDirectory(backupPath)) {\n+            return false;\n+        }\n+\n+        try {\n+            return !com.google.common.io.Files.equal(originalPath.toFile(), backupPath.toFile());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73b7cb9c3ac7307ea5a5064e83104183c3c69e46"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzEyNzc5OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/jabref/logic/autosaveandbackup/BackupManagerTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTowNTo0N1rOF2Yk3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQyMDo0NjoxNlrOF2hLlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MDA3OQ==", "bodyText": "How do these tests work? I cannot see a .sav file in the folder?!", "url": "https://github.com/JabRef/jabref/pull/6116#discussion_r392570079", "createdAt": "2020-03-14T09:05:47Z", "author": {"login": "tobiasdiez"}, "path": "src/test/java/org/jabref/logic/autosaveandbackup/BackupManagerTest.java", "diffHunk": "@@ -15,4 +17,22 @@ public void backupFileNameIsCorrectlyGeneratedWithinTmpDirectory() {\n         Path savPath = BackupManager.getBackupPath(bibPath);\n         assertEquals(Paths.get(\"tmp\", \"test.bib.sav\"), savPath);\n     }\n+\n+    @Test\n+    public void backupFileIsEqualForNonExistingBackup() throws Exception {\n+        Path originalFile = Path.of(BackupManagerTest.class.getResource(\"no-backup.bib\").toURI());\n+        assertFalse(BackupManager.backupFileDiffers(originalFile));\n+    }\n+\n+    @Test\n+    public void backupFileIsEqual() throws Exception {\n+        Path originalFile = Path.of(BackupManagerTest.class.getResource(\"no-changes.bib\").toURI());\n+        assertFalse(BackupManager.backupFileDiffers(originalFile));\n+    }\n+\n+    @Test\n+    public void backupFileDiffers() throws Exception {\n+        Path originalFile = Path.of(BackupManagerTest.class.getResource(\"changes.bib\").toURI());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73b7cb9c3ac7307ea5a5064e83104183c3c69e46"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3NTMxNA==", "bodyText": "Save files are missing in the commit! @tobiasdiez Why do you approve the PR if you have objections (that are correct!)?", "url": "https://github.com/JabRef/jabref/pull/6116#discussion_r392575314", "createdAt": "2020-03-14T10:38:35Z", "author": {"login": "stefan-kolb"}, "path": "src/test/java/org/jabref/logic/autosaveandbackup/BackupManagerTest.java", "diffHunk": "@@ -15,4 +17,22 @@ public void backupFileNameIsCorrectlyGeneratedWithinTmpDirectory() {\n         Path savPath = BackupManager.getBackupPath(bibPath);\n         assertEquals(Paths.get(\"tmp\", \"test.bib.sav\"), savPath);\n     }\n+\n+    @Test\n+    public void backupFileIsEqualForNonExistingBackup() throws Exception {\n+        Path originalFile = Path.of(BackupManagerTest.class.getResource(\"no-backup.bib\").toURI());\n+        assertFalse(BackupManager.backupFileDiffers(originalFile));\n+    }\n+\n+    @Test\n+    public void backupFileIsEqual() throws Exception {\n+        Path originalFile = Path.of(BackupManagerTest.class.getResource(\"no-changes.bib\").toURI());\n+        assertFalse(BackupManager.backupFileDiffers(originalFile));\n+    }\n+\n+    @Test\n+    public void backupFileDiffers() throws Exception {\n+        Path originalFile = Path.of(BackupManagerTest.class.getResource(\"changes.bib\").toURI());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MDA3OQ=="}, "originalCommit": {"oid": "73b7cb9c3ac7307ea5a5064e83104183c3c69e46"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjcxMTA2MA==", "bodyText": "They did not work - I added the missing files in ee472cf", "url": "https://github.com/JabRef/jabref/pull/6116#discussion_r392711060", "createdAt": "2020-03-15T20:46:16Z", "author": {"login": "koppor"}, "path": "src/test/java/org/jabref/logic/autosaveandbackup/BackupManagerTest.java", "diffHunk": "@@ -15,4 +17,22 @@ public void backupFileNameIsCorrectlyGeneratedWithinTmpDirectory() {\n         Path savPath = BackupManager.getBackupPath(bibPath);\n         assertEquals(Paths.get(\"tmp\", \"test.bib.sav\"), savPath);\n     }\n+\n+    @Test\n+    public void backupFileIsEqualForNonExistingBackup() throws Exception {\n+        Path originalFile = Path.of(BackupManagerTest.class.getResource(\"no-backup.bib\").toURI());\n+        assertFalse(BackupManager.backupFileDiffers(originalFile));\n+    }\n+\n+    @Test\n+    public void backupFileIsEqual() throws Exception {\n+        Path originalFile = Path.of(BackupManagerTest.class.getResource(\"no-changes.bib\").toURI());\n+        assertFalse(BackupManager.backupFileDiffers(originalFile));\n+    }\n+\n+    @Test\n+    public void backupFileDiffers() throws Exception {\n+        Path originalFile = Path.of(BackupManagerTest.class.getResource(\"changes.bib\").toURI());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MDA3OQ=="}, "originalCommit": {"oid": "73b7cb9c3ac7307ea5a5064e83104183c3c69e46"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1992, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}