{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NzY4ODk5", "number": 6332, "title": "Improve performance for loading files", "bodyText": "Performance improvements around groups\nRemove detection of duplicate ID when inserting entries (it's not really possible to create two entries with the same except if you use setId manually)\nRemove detection of duplicate bibtex keys when opening a file (the result was not used and we have a integrity check for it)\nUse EnumMap instead of HashMap to cache fields as keywords (which is only used for Keyword and Groups fields anyway)\nFixes #6329 where latex code was displayed in the maintable\nLazy init of source tab\n\nIn summary, we are now at very reasonable numbers:\n\nReading files is about 1k entries per second (with 30% spent on initialing the EventBus)\nGroups membership counter is still expensive to calculate but kind of ok (30 sec for 1k groups x 12k entries = 12 mil checks)\n7s load of an empty JabRef instance\n1gb ram with two databases of together 15k entries\n\n(all numbers are measured under profiling, thus they are worse than under actual production).\nI think that concludes my series of performance improvements for now.\n\n\n\n Change in CHANGELOG.md described (if applicable)\n Tests created for changes (if applicable)\n Manually tested changed features in running JabRef (always required)\n Screenshots added in PR description (for UI changes)\n Checked documentation: Is the information available and up to date? If not created an issue at https://github.com/JabRef/user-documentation/issues or, even better, submitted a pull request to the documentation repository.", "createdAt": "2020-04-21T16:30:27Z", "url": "https://github.com/JabRef/jabref/pull/6332", "merged": true, "mergeCommit": {"oid": "c7d77670154c1b09d8115013c8f3b4175906219e"}, "closed": true, "closedAt": "2020-04-22T12:30:41Z", "author": {"login": "tobiasdiez"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZ2GYdAH2gAyNDA2NzY4ODk5OjM3Y2Y3MGRhMWU0ODk4ZGNjYTRjYzc1MmVhZWMyMGYwMGIyN2MxNmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaHaebAFqTM5ODEzNjQzNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "37cf70da1e4898dcca4cc752eaec20f00b27c16b", "author": {"user": {"login": "tobiasdiez", "name": "Tobias Diez"}}, "url": "https://github.com/JabRef/jabref/commit/37cf70da1e4898dcca4cc752eaec20f00b27c16b", "committedDate": "2020-04-21T16:16:02Z", "message": "Improve performance for loading files\n\n- Performance improvements around groups\n- Remove detection of duplicate ID when inserting entries (it's not really possible to create two entries with the same except if you use `setId` manually)\n- Remove detection of duplicate bibtex keys when opening a file (the result was not used and we have a integrity check for it)\n- Use EnumMap instead of HashMap to cache fields as keywords (which is only used for Keyword and Groups fields anyway)\n- Fix bug where latex code was displayed in the maintable\n- Lazy init of source tab"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e4f6e7d5af326085e504819310187c69309d315", "author": {"user": {"login": "tobiasdiez", "name": "Tobias Diez"}}, "url": "https://github.com/JabRef/jabref/commit/5e4f6e7d5af326085e504819310187c69309d315", "committedDate": "2020-04-21T16:35:20Z", "message": "Fix tests compilation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NDg3MjMw", "url": "https://github.com/JabRef/jabref/pull/6332#pullrequestreview-397487230", "createdAt": "2020-04-21T16:48:07Z", "commit": {"oid": "5e4f6e7d5af326085e504819310187c69309d315"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNjo0ODowN1rOGJOA_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNjo0ODowN1rOGJOA_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMxOTk5OQ==", "bodyText": "Why is this class necessary? I don't see any advantage of the internal java ones", "url": "https://github.com/JabRef/jabref/pull/6332#discussion_r412319999", "createdAt": "2020-04-21T16:48:07Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/model/util/ListUtil.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package org.jabref.model.util;\n+\n+import java.util.function.Predicate;\n+\n+public class ListUtil {\n+    public static <T> boolean anyMatch(Iterable<T> list, Predicate<T> predicate) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e4f6e7d5af326085e504819310187c69309d315"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3ODQ0OTM3", "url": "https://github.com/JabRef/jabref/pull/6332#pullrequestreview-397844937", "createdAt": "2020-04-22T05:02:15Z", "commit": {"oid": "5e4f6e7d5af326085e504819310187c69309d315"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNTowMjoxNVrOGJjdfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNToxMjo1N1rOGJjrbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3MTM1Nw==", "bodyText": "This is not related to this PR, is it?", "url": "https://github.com/JabRef/jabref/pull/6332#discussion_r412671357", "createdAt": "2020-04-22T05:02:15Z", "author": {"login": "koppor"}, "path": ".idea/runConfigurations/JabRef_Main.xml", "diffHunk": "@@ -2,6 +2,7 @@\n   <configuration default=\"false\" name=\"JabRef Main\" type=\"Application\" factoryName=\"Application\" singleton=\"false\">\n     <option name=\"MAIN_CLASS_NAME\" value=\"org.jabref.JabRefMain\" />\n     <module name=\"JabRef.main\" />\n+    <option name=\"REDIRECT_INPUT\" value=\"true\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e4f6e7d5af326085e504819310187c69309d315"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3MTczNA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/JabRef/jabref/pull/6332#discussion_r412671734", "createdAt": "2020-04-22T05:03:17Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/gui/maintable/BibEntryTableViewModel.java", "diffHunk": "@@ -41,10 +39,10 @@\n     private final ObjectBinding<Map<Field, String>> linkedIdentifiers;\n     private final ObservableValue<List<AbstractGroup>> matchedGroups;\n \n-    public BibEntryTableViewModel(BibEntry entry, BibDatabaseContext database) {\n+    public BibEntryTableViewModel(BibEntry entry, BibDatabaseContext database, MainTableNameFormatter nameFormatter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e4f6e7d5af326085e504819310187c69309d315"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3MjE5OA==", "bodyText": "This is a kind of taste, isn't it? - Would assume that the Builder pattern would be preferred.", "url": "https://github.com/JabRef/jabref/pull/6332#discussion_r412672198", "createdAt": "2020-04-22T05:04:52Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/importer/ParserResult.java", "diffHunk": "@@ -35,7 +34,7 @@ public ParserResult() {\n     }\n \n     public ParserResult(Collection<BibEntry> entries) {\n-        this(BibDatabases.createDatabase(BibDatabases.purgeEmptyEntries(entries)));\n+        this(new BibDatabase(BibDatabases.purgeEmptyEntries(entries)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e4f6e7d5af326085e504819310187c69309d315"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3MjYxOA==", "bodyText": "Finally \ud83c\udf89", "url": "https://github.com/JabRef/jabref/pull/6332#discussion_r412672618", "createdAt": "2020-04-22T05:06:06Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/model/database/BibDatabase.java", "diffHunk": "@@ -169,46 +169,35 @@ public boolean containsEntryWithId(String id) {\n     }\n \n     /**\n-     * Inserts the entry, given that its ID is not already in use.\n-     * use Util.createId(...) to make up a unique ID for an entry.\n+     * Inserts the entry.\n      *\n-     * @param entry BibEntry to insert into the database\n-     * @return false if the insert was done without a duplicate warning\n-     * @throws KeyCollisionException thrown if the entry id ({@link BibEntry#getId()}) is already  present in the database\n+     * @param entry entry to insert\n      */\n-    public synchronized boolean insertEntry(BibEntry entry) throws KeyCollisionException {\n-        return insertEntry(entry, EntriesEventSource.LOCAL);\n+    public synchronized void insertEntry(BibEntry entry) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e4f6e7d5af326085e504819310187c69309d315"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3NDEzMQ==", "bodyText": "Wasn't the samentics of \"InternalField\" that is a field introduced by JabRef? (The class should be ranamed to JabRefSuperPowerFields (when going extreme).\nOWNER and TIMESTAMP are \"normal\" BibTeX fields - just introdced by JabRef.\nIf we move GROUPS to StandardField, we should move the other two, too.\n@stefan-kolb What's your take on this?", "url": "https://github.com/JabRef/jabref/pull/6332#discussion_r412674131", "createdAt": "2020-04-22T05:10:43Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/model/entry/field/InternalField.java", "diffHunk": "@@ -12,7 +12,6 @@\n public enum InternalField implements Field {\n     OWNER(\"owner\"),\n     TIMESTAMP(\"timestamp\", FieldProperty.DATE),\n-    GROUPS(\"groups\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e4f6e7d5af326085e504819310187c69309d315"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3NDIwNQ==", "bodyText": "The comment also states, it should left in InternalFields.", "url": "https://github.com/JabRef/jabref/pull/6332#discussion_r412674205", "createdAt": "2020-04-22T05:10:53Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/model/entry/field/StandardField.java", "diffHunk": "@@ -124,7 +124,10 @@\n     YEARFILED(\"yearfiled\"),\n     MR_NUMBER(\"mrnumber\"),\n     XDATA(\"xdata\", FieldProperty.MULTIPLE_ENTRY_LINK),\n-    XREF(\"xref\", FieldProperty.SINGLE_ENTRY_LINK);\n+    XREF(\"xref\", FieldProperty.SINGLE_ENTRY_LINK),\n+\n+    // JabRef-specific fields", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e4f6e7d5af326085e504819310187c69309d315"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3NDc1Mg==", "bodyText": "I would put the class in a seperate .java class. This would also enable testing with ...Test.java files.", "url": "https://github.com/JabRef/jabref/pull/6332#discussion_r412674752", "createdAt": "2020-04-22T05:12:25Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/model/groups/WordKeywordGroup.java", "diffHunk": "@@ -148,4 +136,59 @@ public int hashCode() {\n                 keywordSeparator,\n                 onlySplitWordsAtSeparator);\n     }\n+\n+    interface SearchStrategy {\n+        boolean contains(BibEntry entry);\n+    }\n+\n+    class StringSearchStrategy implements SearchStrategy {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e4f6e7d5af326085e504819310187c69309d315"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3NDkyNQ==", "bodyText": "Can you just add a JavaDoc, please?\nWould it be possible to add a performance test? So that if we replace this by something with promising performance (e.g., Goldman Sach's Collections), we can easily check which one is faster.", "url": "https://github.com/JabRef/jabref/pull/6332#discussion_r412674925", "createdAt": "2020-04-22T05:12:57Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/model/util/ListUtil.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package org.jabref.model.util;\n+\n+import java.util.function.Predicate;\n+\n+public class ListUtil {\n+    public static <T> boolean anyMatch(Iterable<T> list, Predicate<T> predicate) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMxOTk5OQ=="}, "originalCommit": {"oid": "5e4f6e7d5af326085e504819310187c69309d315"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a438195e16e31409c0941b15fe842830a8518342", "author": {"user": {"login": "tobiasdiez", "name": "Tobias Diez"}}, "url": "https://github.com/JabRef/jabref/commit/a438195e16e31409c0941b15fe842830a8518342", "committedDate": "2020-04-22T12:04:06Z", "message": "Include feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4MTM2NDM2", "url": "https://github.com/JabRef/jabref/pull/6332#pullrequestreview-398136436", "createdAt": "2020-04-22T12:26:22Z", "commit": {"oid": "a438195e16e31409c0941b15fe842830a8518342"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 345, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}