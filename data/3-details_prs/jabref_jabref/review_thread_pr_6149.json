{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNzE0MTk3", "number": 6149, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxODozNjozOVrODqGcvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQyMjozMjoyNFrODqMgdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDcyNDQ2OnYy", "diffSide": "RIGHT", "path": "CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxODozNjozOVrOF5q-XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxODo1MDoxMFrOF5xuBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxNzI0NA==", "bodyText": "Please add the issue number", "url": "https://github.com/JabRef/jabref/pull/6149#discussion_r396017244", "createdAt": "2020-03-21T18:36:39Z", "author": {"login": "Siedlerchr"}, "path": "CHANGELOG.md", "diffHunk": "@@ -10,6 +10,7 @@ Note that this project **does not** adhere to [Semantic Versioning](http://semve\n ### Added\n \n - We added support for searching ShortScience for an entry through the user's browser. [#6018](https://github.com/JabRef/jabref/pull/6018)\n+- We updated EditionChecker  to permit edition to start with a number.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "763287185a66791c10b76092fe24e840edb26b15"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAzMTYwMQ==", "bodyText": "Nitpick: Please use a single space to separate words in a sentence (after EditionChecker, there are two spaces).", "url": "https://github.com/JabRef/jabref/pull/6149#discussion_r396031601", "createdAt": "2020-03-21T21:41:41Z", "author": {"login": "koppor"}, "path": "CHANGELOG.md", "diffHunk": "@@ -10,6 +10,7 @@ Note that this project **does not** adhere to [Semantic Versioning](http://semve\n ### Added\n \n - We added support for searching ShortScience for an entry through the user's browser. [#6018](https://github.com/JabRef/jabref/pull/6018)\n+- We updated EditionChecker  to permit edition to start with a number.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxNzI0NA=="}, "originalCommit": {"oid": "763287185a66791c10b76092fe24e840edb26b15"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjEyNzc1MA==", "bodyText": "Hope that custom style formatting is properly working now\nAdded the issue number and the link as well\nRemoved one space in a sentence", "url": "https://github.com/JabRef/jabref/pull/6149#discussion_r396127750", "createdAt": "2020-03-22T18:50:10Z", "author": {"login": "fabgio"}, "path": "CHANGELOG.md", "diffHunk": "@@ -10,6 +10,7 @@ Note that this project **does not** adhere to [Semantic Versioning](http://semve\n ### Added\n \n - We added support for searching ShortScience for an entry through the user's browser. [#6018](https://github.com/JabRef/jabref/pull/6018)\n+- We updated EditionChecker  to permit edition to start with a number.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxNzI0NA=="}, "originalCommit": {"oid": "763287185a66791c10b76092fe24e840edb26b15"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDgzMzk4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/integrity/EditionChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQyMTo0MzoyMlrOF5r28Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMToxMjoxMlrOF6AuKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAzMTcyOQ==", "bodyText": "Please follow our code style: Space after if, always use braces.\nIn case I understood the code correctly, this statement is a fail-fast one. In this case, I would change the code to\nif (isFirstCharDigit(value) {\n  return Optional.empty();\n}", "url": "https://github.com/JabRef/jabref/pull/6149#discussion_r396031729", "createdAt": "2020-03-21T21:43:22Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/integrity/EditionChecker.java", "diffHunk": "@@ -53,6 +53,7 @@ public EditionChecker(BibDatabaseContext bibDatabaseContext, boolean allowIntege\n \n         //BibTeX\n         if (!bibDatabaseContextEdition.isBiblatexMode()) {\n+           if(!isFirstCharDigit(value))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "763287185a66791c10b76092fe24e840edb26b15"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM3MzU0Nw==", "bodyText": "I tried your solution, but it does skip the method execution", "url": "https://github.com/JabRef/jabref/pull/6149#discussion_r396373547", "createdAt": "2020-03-23T11:12:12Z", "author": {"login": "fabgio"}, "path": "src/main/java/org/jabref/logic/integrity/EditionChecker.java", "diffHunk": "@@ -53,6 +53,7 @@ public EditionChecker(BibDatabaseContext bibDatabaseContext, boolean allowIntege\n \n         //BibTeX\n         if (!bibDatabaseContextEdition.isBiblatexMode()) {\n+           if(!isFirstCharDigit(value))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAzMTcyOQ=="}, "originalCommit": {"oid": "763287185a66791c10b76092fe24e840edb26b15"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDgzNDMzOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/jabref/logic/integrity/EditionCheckerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQyMTo0Mzo1OVrOF5r3Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxODo1MToxOVrOF5xufA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAzMTc3NA==", "bodyText": "Please no global variable in tests - the variables should be as local as possible.", "url": "https://github.com/JabRef/jabref/pull/6149#discussion_r396031774", "createdAt": "2020-03-21T21:43:59Z", "author": {"login": "koppor"}, "path": "src/test/java/org/jabref/logic/integrity/EditionCheckerTest.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package org.jabref.logic.integrity;\n+\n+import org.jabref.model.database.BibDatabaseContext;\n+import org.junit.jupiter.api.Test;\n+\n+\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+public class EditionCheckerTest {\n+     boolean allowIntegerEdition;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "763287185a66791c10b76092fe24e840edb26b15"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjEyNzg2OA==", "bodyText": "Reduced the scope  to local", "url": "https://github.com/JabRef/jabref/pull/6149#discussion_r396127868", "createdAt": "2020-03-22T18:51:19Z", "author": {"login": "fabgio"}, "path": "src/test/java/org/jabref/logic/integrity/EditionCheckerTest.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package org.jabref.logic.integrity;\n+\n+import org.jabref.model.database.BibDatabaseContext;\n+import org.junit.jupiter.api.Test;\n+\n+\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+public class EditionCheckerTest {\n+     boolean allowIntegerEdition;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAzMTc3NA=="}, "originalCommit": {"oid": "763287185a66791c10b76092fe24e840edb26b15"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDgzNDQxOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/jabref/logic/integrity/EditionCheckerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQyMTo0NDoxNFrOF5r3Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNTozMjowOVrOF6K61Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAzMTc4Ng==", "bodyText": "Please add a test for , false.", "url": "https://github.com/JabRef/jabref/pull/6149#discussion_r396031786", "createdAt": "2020-03-21T21:44:14Z", "author": {"login": "koppor"}, "path": "src/test/java/org/jabref/logic/integrity/EditionCheckerTest.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package org.jabref.logic.integrity;\n+\n+import org.jabref.model.database.BibDatabaseContext;\n+import org.junit.jupiter.api.Test;\n+\n+\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+public class EditionCheckerTest {\n+     boolean allowIntegerEdition;\n+\n+    @Test\n+    void isFirstCharacterANumber(){\n+        var bibDatabaseContextEdition=new BibDatabaseContext();\n+        var editionChecker=new EditionChecker(bibDatabaseContextEdition,allowIntegerEdition);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "763287185a66791c10b76092fe24e840edb26b15"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU0MDYyOQ==", "bodyText": "Added a test for false", "url": "https://github.com/JabRef/jabref/pull/6149#discussion_r396540629", "createdAt": "2020-03-23T15:32:09Z", "author": {"login": "fabgio"}, "path": "src/test/java/org/jabref/logic/integrity/EditionCheckerTest.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package org.jabref.logic.integrity;\n+\n+import org.jabref.model.database.BibDatabaseContext;\n+import org.junit.jupiter.api.Test;\n+\n+\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+public class EditionCheckerTest {\n+     boolean allowIntegerEdition;\n+\n+    @Test\n+    void isFirstCharacterANumber(){\n+        var bibDatabaseContextEdition=new BibDatabaseContext();\n+        var editionChecker=new EditionChecker(bibDatabaseContextEdition,allowIntegerEdition);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAzMTc4Ng=="}, "originalCommit": {"oid": "763287185a66791c10b76092fe24e840edb26b15"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDgzNDgzOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/jabref/logic/integrity/EditionCheckerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQyMTo0NToxMVrOF5r3Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNTozMjozMlrOF6K78A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAzMTg0Mg==", "bodyText": "Combine this and the next line to:\nassertTrue(editionChecker.isFirstCharDigit(stringWithNumber));`\nNo need for text outputs in the assert statements.", "url": "https://github.com/JabRef/jabref/pull/6149#discussion_r396031842", "createdAt": "2020-03-21T21:45:11Z", "author": {"login": "koppor"}, "path": "src/test/java/org/jabref/logic/integrity/EditionCheckerTest.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package org.jabref.logic.integrity;\n+\n+import org.jabref.model.database.BibDatabaseContext;\n+import org.junit.jupiter.api.Test;\n+\n+\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+public class EditionCheckerTest {\n+     boolean allowIntegerEdition;\n+\n+    @Test\n+    void isFirstCharacterANumber(){\n+        var bibDatabaseContextEdition=new BibDatabaseContext();\n+        var editionChecker=new EditionChecker(bibDatabaseContextEdition,allowIntegerEdition);\n+        var stringWithNumber=\"0HelloWorld\";\n+        boolean flag=editionChecker.isFirstCharDigit(stringWithNumber);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "763287185a66791c10b76092fe24e840edb26b15"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU0MDkxMg==", "bodyText": "Done", "url": "https://github.com/JabRef/jabref/pull/6149#discussion_r396540912", "createdAt": "2020-03-23T15:32:32Z", "author": {"login": "fabgio"}, "path": "src/test/java/org/jabref/logic/integrity/EditionCheckerTest.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package org.jabref.logic.integrity;\n+\n+import org.jabref.model.database.BibDatabaseContext;\n+import org.junit.jupiter.api.Test;\n+\n+\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+public class EditionCheckerTest {\n+     boolean allowIntegerEdition;\n+\n+    @Test\n+    void isFirstCharacterANumber(){\n+        var bibDatabaseContextEdition=new BibDatabaseContext();\n+        var editionChecker=new EditionChecker(bibDatabaseContextEdition,allowIntegerEdition);\n+        var stringWithNumber=\"0HelloWorld\";\n+        boolean flag=editionChecker.isFirstCharDigit(stringWithNumber);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAzMTg0Mg=="}, "originalCommit": {"oid": "763287185a66791c10b76092fe24e840edb26b15"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDgzNDkzOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/jabref/logic/integrity/EditionCheckerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQyMTo0NToyN1rOF5r3cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoyOTozN1rOF6H_zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAzMTg1Nw==", "bodyText": "Please follow our code style -- no multiple empty lines.", "url": "https://github.com/JabRef/jabref/pull/6149#discussion_r396031857", "createdAt": "2020-03-21T21:45:27Z", "author": {"login": "koppor"}, "path": "src/test/java/org/jabref/logic/integrity/EditionCheckerTest.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package org.jabref.logic.integrity;\n+\n+import org.jabref.model.database.BibDatabaseContext;\n+import org.junit.jupiter.api.Test;\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "763287185a66791c10b76092fe24e840edb26b15"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ5Mjc1MQ==", "bodyText": "Fixed it", "url": "https://github.com/JabRef/jabref/pull/6149#discussion_r396492751", "createdAt": "2020-03-23T14:29:37Z", "author": {"login": "fabgio"}, "path": "src/test/java/org/jabref/logic/integrity/EditionCheckerTest.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package org.jabref.logic.integrity;\n+\n+import org.jabref.model.database.BibDatabaseContext;\n+import org.junit.jupiter.api.Test;\n+\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAzMTg1Nw=="}, "originalCommit": {"oid": "763287185a66791c10b76092fe24e840edb26b15"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDgzNTI0OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/jabref/logic/integrity/EditionCheckerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQyMTo0NTo0MFrOF5r3kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDozMDoyN1rOF6ICDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAzMTg5MA==", "bodyText": "Please no empty line before the method ends.", "url": "https://github.com/JabRef/jabref/pull/6149#discussion_r396031890", "createdAt": "2020-03-21T21:45:40Z", "author": {"login": "koppor"}, "path": "src/test/java/org/jabref/logic/integrity/EditionCheckerTest.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package org.jabref.logic.integrity;\n+\n+import org.jabref.model.database.BibDatabaseContext;\n+import org.junit.jupiter.api.Test;\n+\n+\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+public class EditionCheckerTest {\n+     boolean allowIntegerEdition;\n+\n+    @Test\n+    void isFirstCharacterANumber(){\n+        var bibDatabaseContextEdition=new BibDatabaseContext();\n+        var editionChecker=new EditionChecker(bibDatabaseContextEdition,allowIntegerEdition);\n+        var stringWithNumber=\"0HelloWorld\";\n+        boolean flag=editionChecker.isFirstCharDigit(stringWithNumber);\n+        assertTrue(flag,\"check for true\");\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "763287185a66791c10b76092fe24e840edb26b15"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ5MzMyNA==", "bodyText": "Fixed it", "url": "https://github.com/JabRef/jabref/pull/6149#discussion_r396493324", "createdAt": "2020-03-23T14:30:27Z", "author": {"login": "fabgio"}, "path": "src/test/java/org/jabref/logic/integrity/EditionCheckerTest.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package org.jabref.logic.integrity;\n+\n+import org.jabref.model.database.BibDatabaseContext;\n+import org.junit.jupiter.api.Test;\n+\n+\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+public class EditionCheckerTest {\n+     boolean allowIntegerEdition;\n+\n+    @Test\n+    void isFirstCharacterANumber(){\n+        var bibDatabaseContextEdition=new BibDatabaseContext();\n+        var editionChecker=new EditionChecker(bibDatabaseContextEdition,allowIntegerEdition);\n+        var stringWithNumber=\"0HelloWorld\";\n+        boolean flag=editionChecker.isFirstCharDigit(stringWithNumber);\n+        assertTrue(flag,\"check for true\");\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAzMTg5MA=="}, "originalCommit": {"oid": "763287185a66791c10b76092fe24e840edb26b15"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NTcxNjc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/integrity/EditionChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQyMjozMjowMVrOF5zA2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDozNDo0NFrOF6IOpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE0ODk1NQ==", "bodyText": "Please empty line before.", "url": "https://github.com/JabRef/jabref/pull/6149#discussion_r396148955", "createdAt": "2020-03-22T22:32:01Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/integrity/EditionChecker.java", "diffHunk": "@@ -66,4 +67,9 @@ public EditionChecker(BibDatabaseContext bibDatabaseContext, boolean allowIntege\n \n         return Optional.empty();\n     }\n+    boolean isFirstCharDigit (String input){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1e01d4ad7025b8812b8b024f6b53616f79269c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ5NjU0OA==", "bodyText": "Done", "url": "https://github.com/JabRef/jabref/pull/6149#discussion_r396496548", "createdAt": "2020-03-23T14:34:44Z", "author": {"login": "fabgio"}, "path": "src/main/java/org/jabref/logic/integrity/EditionChecker.java", "diffHunk": "@@ -66,4 +67,9 @@ public EditionChecker(BibDatabaseContext bibDatabaseContext, boolean allowIntege\n \n         return Optional.empty();\n     }\n+    boolean isFirstCharDigit (String input){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE0ODk1NQ=="}, "originalCommit": {"oid": "5d1e01d4ad7025b8812b8b024f6b53616f79269c"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NTcxNzAxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/integrity/EditionChecker.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQyMjozMjoyNFrOF5zA_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQyMzozNDozMlrOF9WKvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE0ODk4OQ==", "bodyText": "There must be a different way. Can't the first letter of a string be accessed? Doesn't Google Guava offer a method for that?", "url": "https://github.com/JabRef/jabref/pull/6149#discussion_r396148989", "createdAt": "2020-03-22T22:32:24Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/integrity/EditionChecker.java", "diffHunk": "@@ -66,4 +67,9 @@ public EditionChecker(BibDatabaseContext bibDatabaseContext, boolean allowIntege\n \n         return Optional.empty();\n     }\n+    boolean isFirstCharDigit (String input){\n+        char[] array = input.toCharArray();\n+        return Character.isDigit(array[0]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1e01d4ad7025b8812b8b024f6b53616f79269c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUwNDI2Nw==", "bodyText": "There is indeed a simpler way: string,charAt(0)\nhttps://beginnersbook.com/2013/12/java-string-charat-method-example/", "url": "https://github.com/JabRef/jabref/pull/6149#discussion_r396504267", "createdAt": "2020-03-23T14:45:01Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/logic/integrity/EditionChecker.java", "diffHunk": "@@ -66,4 +67,9 @@ public EditionChecker(BibDatabaseContext bibDatabaseContext, boolean allowIntege\n \n         return Optional.empty();\n     }\n+    boolean isFirstCharDigit (String input){\n+        char[] array = input.toCharArray();\n+        return Character.isDigit(array[0]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE0ODk4OQ=="}, "originalCommit": {"oid": "5d1e01d4ad7025b8812b8b024f6b53616f79269c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUyNjA1OA==", "bodyText": "Yes in Guava the the most similar metod is CharMetcher.digit()\nhttps://guava.dev/releases/snapshot/api/docs/com/google/common/base/CharMatcher.html#digit--\nwhich is deprecated", "url": "https://github.com/JabRef/jabref/pull/6149#discussion_r396526058", "createdAt": "2020-03-23T15:13:20Z", "author": {"login": "fabgio"}, "path": "src/main/java/org/jabref/logic/integrity/EditionChecker.java", "diffHunk": "@@ -66,4 +67,9 @@ public EditionChecker(BibDatabaseContext bibDatabaseContext, boolean allowIntege\n \n         return Optional.empty();\n     }\n+    boolean isFirstCharDigit (String input){\n+        char[] array = input.toCharArray();\n+        return Character.isDigit(array[0]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE0ODk4OQ=="}, "originalCommit": {"oid": "5d1e01d4ad7025b8812b8b024f6b53616f79269c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUyNzg0MA==", "bodyText": "Simple use  Character.isDigit(input.chartAt(0)) that is the easiest solution", "url": "https://github.com/JabRef/jabref/pull/6149#discussion_r396527840", "createdAt": "2020-03-23T15:15:42Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/logic/integrity/EditionChecker.java", "diffHunk": "@@ -66,4 +67,9 @@ public EditionChecker(BibDatabaseContext bibDatabaseContext, boolean allowIntege\n \n         return Optional.empty();\n     }\n+    boolean isFirstCharDigit (String input){\n+        char[] array = input.toCharArray();\n+        return Character.isDigit(array[0]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE0ODk4OQ=="}, "originalCommit": {"oid": "5d1e01d4ad7025b8812b8b024f6b53616f79269c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg3MDY1NA==", "bodyText": "This is not done. I will do it manually after the merge.", "url": "https://github.com/JabRef/jabref/pull/6149#discussion_r399870654", "createdAt": "2020-03-29T23:34:32Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/integrity/EditionChecker.java", "diffHunk": "@@ -66,4 +67,9 @@ public EditionChecker(BibDatabaseContext bibDatabaseContext, boolean allowIntege\n \n         return Optional.empty();\n     }\n+    boolean isFirstCharDigit (String input){\n+        char[] array = input.toCharArray();\n+        return Character.isDigit(array[0]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE0ODk4OQ=="}, "originalCommit": {"oid": "5d1e01d4ad7025b8812b8b024f6b53616f79269c"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2014, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}