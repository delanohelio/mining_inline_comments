{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1MjExMzMw", "number": 6304, "title": "Rework journal abbreviation caching", "bodyText": "Rework the caching of the journal abbreviation list in order to reduce the memory footprint.\nInstead of the plain in-memory cache, this PR now uses the h2 MVStore which is a light-weight file-based \"database\". I couldn't notice any performance degradation but a huge improvement in the memory department.\nFrom:\n\nTo:\n\nThus about 30% reduction. Which leads to a very reasonable memory usage: 400mb with a db of 1k entries. For larger databases the auto completion still leads to problems (see below, which was before the changes of this PR) - but this will be a new PR.\n\n(The first two entries belong to the classloader and thus represent all libraries that we use).\nFurther changes:\n\nRemoved the \"IEEE abbreviation lists\" and added them in the journal abbreviation repository. JabRef/abbrv.jabref.org#64 JabRef/abbrv.jabref.org#63\nThe current implementation uses a simple dictionary between full and abbreviated journal name for the built-in abbreviations. Thus, the \"shortest abbreviation\" or the \"medline abbreviation\" are ignored for the built-in list (there were like 2 journals that had this information...). If the user wants this, he can still add them by hand.\nThe abbreviation list is converted from the csv format to the MVStore format as part of the build process. This is able to use multiple csv files, which should aid #5749.\n\nFurther remarks:\n\nThe performance now looks good enough to revisit #5749 and try to include all 100k abbreviations in the built-in list.\n\n\n\n Change in CHANGELOG.md described (if applicable)\n Tests created for changes (if applicable)\n Manually tested changed features in running JabRef (always required)\n Screenshots added in PR description (for UI changes)\n Checked documentation: Is the information available and up to date? If not created an issue at https://github.com/JabRef/user-documentation/issues or, even better, submitted a pull request to the documentation repository.", "createdAt": "2020-04-17T15:51:52Z", "url": "https://github.com/JabRef/jabref/pull/6304", "merged": true, "mergeCommit": {"oid": "a123eb1bd9d6ea71e286224d452534416c72a945"}, "closed": true, "closedAt": "2020-05-01T12:15:00Z", "author": {"login": "tobiasdiez"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcYiRrogH2gAyNDA1MjExMzMwOmVmYTViMWFhMzdmODRiZTc3Mjg4OGQyMzU0N2NkNjliY2Q5NDY4NTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcdATRQAH2gAyNDA1MjExMzMwOjcyY2NmOTlhYzg4OGUwZTI2ZGJmNTFiMDRiYTgyM2EwOGJmNzE0NWY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "efa5b1aa37f84be772888d23547cd69bcd946859", "author": {"user": {"login": "tobiasdiez", "name": "Tobias Diez"}}, "url": "https://github.com/JabRef/jabref/commit/efa5b1aa37f84be772888d23547cd69bcd946859", "committedDate": "2020-04-17T14:36:21Z", "message": "Rework journal abbreviation caching"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7fc293f9179a90a5d7edd04d898df5d421af53d5", "author": {"user": {"login": "koppor", "name": "Oliver Kopp"}}, "url": "https://github.com/JabRef/jabref/commit/7fc293f9179a90a5d7edd04d898df5d421af53d5", "committedDate": "2020-04-23T20:17:21Z", "message": "Add ADR-0010"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NDQ0NDk5", "url": "https://github.com/JabRef/jabref/pull/6304#pullrequestreview-399444499", "createdAt": "2020-04-23T20:18:26Z", "commit": {"oid": "efa5b1aa37f84be772888d23547cd69bcd946859"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxODoyN1rOGK6ZBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoyMDo1OVrOGK6ewQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5NTYyMg==", "bodyText": "Why is this disabled?", "url": "https://github.com/JabRef/jabref/pull/6304#discussion_r414095622", "createdAt": "2020-04-23T20:18:27Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/journals/JournalAbbreviationLoader.java", "diffHunk": "@@ -32,52 +35,75 @@\n         return readJournalListFromResource(JOURNALS_FILE_BUILTIN);\n     }\n \n-    public static List<Abbreviation> readJournalListFromResource(String resource) {\n+    private static List<Abbreviation> readJournalListFromResource(String resource) {\n         AbbreviationParser parser = new AbbreviationParser();\n         parser.readJournalListFromResource(Objects.requireNonNull(resource));\n         return parser.getAbbreviations();\n     }\n \n-    public static List<Abbreviation> readJournalListFromFile(File file) throws FileNotFoundException {\n+    public static List<Abbreviation> readJournalListFromFile(Path file) throws IOException {\n         LOGGER.debug(String.format(\"Reading journal list from file %s\", file));\n         AbbreviationParser parser = new AbbreviationParser();\n-        parser.readJournalListFromFile(Objects.requireNonNull(file));\n+        parser.readJournalListFromFile(file);\n         return parser.getAbbreviations();\n     }\n \n-    public static List<Abbreviation> readJournalListFromFile(File file, Charset encoding) throws FileNotFoundException {\n+    private static List<Abbreviation> readJournalListFromFile(Path file, Charset encoding) throws IOException {\n         LOGGER.debug(String.format(\"Reading journal list from file %s\", file));\n         AbbreviationParser parser = new AbbreviationParser();\n-        parser.readJournalListFromFile(Objects.requireNonNull(file), Objects.requireNonNull(encoding));\n+        parser.readJournalListFromFile(file, Objects.requireNonNull(encoding));\n         return parser.getAbbreviations();\n     }\n \n-    public void update(JournalAbbreviationPreferences journalAbbreviationPreferences) {\n-        journalAbbrev = new JournalAbbreviationRepository();\n-\n-        // The order of reading the journal lists is important: last added abbreviation wins\n-        // For instance, in the personal list one can overwrite abbreviations in the built in list\n-\n-        // Read builtin list\n-        journalAbbrev.addEntries(readJournalListFromResource(JOURNALS_FILE_BUILTIN));\n-\n-        // Read IEEE list\n-        if (journalAbbreviationPreferences.useIEEEAbbreviations()) {\n-            journalAbbrev.addEntries(getOfficialIEEEAbbreviations());\n-        } else {\n-            journalAbbrev.addEntries(getStandardIEEEAbbreviations());\n+    public static void writeDefaultDatabase(Path targetDirectory) {\n+        try (MVStore store = MVStore.open(targetDirectory.resolve(\"journalList.mv\").getParent().toString())) {\n+            MVMap<String, String> fullToAbbreviation = store.openMap(\"FullToAbbreviation\");\n+\n+            // Add all standard abbreviations\n+            fullToAbbreviation.putAll(\n+                    getBuiltInAbbreviations()\n+                            .stream()\n+                            .collect(Collectors.toMap(Abbreviation::getName, Abbreviation::getAbbreviation))\n+            );\n+\n+            // Add all IEEE abbreviations\n+            fullToAbbreviation.putAll(\n+                    getStandardIEEEAbbreviations()\n+                            .stream()\n+                            .collect(Collectors.toMap(Abbreviation::getName, Abbreviation::getAbbreviation))\n+            );\n+\n+            MVMap<String, String> abbreviationToFull = store.openMap(\"AbbreviationToFull\");\n+\n+            // Add all standard abbreviations\n+            abbreviationToFull.putAll(\n+                    getBuiltInAbbreviations()\n+                            .stream()\n+                            .collect(Collectors.toMap(Abbreviation::getAbbreviation, Abbreviation::getName))\n+            );\n+\n+            // Add all IEEE abbreviations\n+            abbreviationToFull.putAll(\n+                    getStandardIEEEAbbreviations()\n+                            .stream()\n+                            .collect(Collectors.toMap(Abbreviation::getAbbreviation, Abbreviation::getName))\n+            );\n+            //store.commit();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efa5b1aa37f84be772888d23547cd69bcd946859"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5NzA4OQ==", "bodyText": "Just stumbled over this - can we get rid of true and false somehow? - enums maybe?", "url": "https://github.com/JabRef/jabref/pull/6304#discussion_r414097089", "createdAt": "2020-04-23T20:20:59Z", "author": {"login": "koppor"}, "path": "src/test/java/org/jabref/logic/integrity/IntegrityCheckTest.java", "diffHunk": "@@ -368,7 +367,7 @@ void testEntryIsUnchangedAfterChecks() {\n         new IntegrityCheck(context,\n                 mock(FilePreferences.class),\n                 createBibtexKeyPatternPreferences(),\n-                           new JournalAbbreviationRepository(new Abbreviation(\"IEEE Software\", \"IEEE SW\")), true, false)\n+                new JournalAbbreviationRepository(), true, false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efa5b1aa37f84be772888d23547cd69bcd946859"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d613f85a57f38df79901acc581d855aff92c83d", "author": {"user": {"login": "tobiasdiez", "name": "Tobias Diez"}}, "url": "https://github.com/JabRef/jabref/commit/0d613f85a57f38df79901acc581d855aff92c83d", "committedDate": "2020-04-24T11:37:26Z", "message": "Merge branch 'master' of https://github.com/JabRef/jabref into journalAbbFile"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "384747ecdc1e5fa869a69ed5a9646b9e1d203ced", "author": {"user": {"login": "tobiasdiez", "name": "Tobias Diez"}}, "url": "https://github.com/JabRef/jabref/commit/384747ecdc1e5fa869a69ed5a9646b9e1d203ced", "committedDate": "2020-04-24T12:14:50Z", "message": "Remove IEEE abbreviations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a647ef83e2c40e2ad4393ed3467e5fea82622f6f", "author": {"user": {"login": "tobiasdiez", "name": "Tobias Diez"}}, "url": "https://github.com/JabRef/jabref/commit/a647ef83e2c40e2ad4393ed3467e5fea82622f6f", "committedDate": "2020-04-24T15:51:28Z", "message": "Convert abbreviations as part of build process"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f89e25c2786f982e721c0eb1f3910e391a2f6aa", "author": {"user": {"login": "tobiasdiez", "name": "Tobias Diez"}}, "url": "https://github.com/JabRef/jabref/commit/2f89e25c2786f982e721c0eb1f3910e391a2f6aa", "committedDate": "2020-04-24T16:30:39Z", "message": "Fix tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNTIxNTAx", "url": "https://github.com/JabRef/jabref/pull/6304#pullrequestreview-400521501", "createdAt": "2020-04-26T16:15:41Z", "commit": {"oid": "2f89e25c2786f982e721c0eb1f3910e391a2f6aa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxNjoxNTo0MlrOGMGpOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxNjoxNTo0MlrOGMGpOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM0NDk1Mg==", "bodyText": "Maven local can be removed (only useful if you have gradle + maven builds in your system), will speed up the build.", "url": "https://github.com/JabRef/jabref/pull/6304#discussion_r415344952", "createdAt": "2020-04-26T16:15:42Z", "author": {"login": "Siedlerchr"}, "path": "buildSrc/build.gradle", "diffHunk": "@@ -0,0 +1,20 @@\n+apply plugin: 'java'\n+\n+repositories {\n+    mavenLocal()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f89e25c2786f982e721c0eb1f3910e391a2f6aa"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNTIxNzg0", "url": "https://github.com/JabRef/jabref/pull/6304#pullrequestreview-400521784", "createdAt": "2020-04-26T16:18:34Z", "commit": {"oid": "2f89e25c2786f982e721c0eb1f3910e391a2f6aa"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxNjoxODozNFrOGMGreg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxNjoyNDo1NlrOGMGwSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM0NTUzMA==", "bodyText": "Use Objects.equals(...) to make it more consistent with other implementations", "url": "https://github.com/JabRef/jabref/pull/6304#discussion_r415345530", "createdAt": "2020-04-26T16:18:34Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/gui/journals/AbbreviationViewModel.java", "diffHunk": "@@ -80,16 +78,20 @@ public BooleanProperty isPseudoAbbreviationProperty() {\n     }\n \n     @Override\n-    public int hashCode() {\n-        return Objects.hash(abbreviationObject);\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        AbbreviationViewModel that = (AbbreviationViewModel) o;\n+        return getName().equals(that.getName()) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f89e25c2786f982e721c0eb1f3910e391a2f6aa"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM0NTczNg==", "bodyText": "I do not really understand this line. Why is this necessary?", "url": "https://github.com/JabRef/jabref/pull/6304#discussion_r415345736", "createdAt": "2020-04-26T16:19:34Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/gui/journals/ManageJournalAbbreviationsView.java", "diffHunk": "@@ -145,7 +147,11 @@ private void removeAbbreviation() {\n \n     @FXML\n     private void saveAbbreviationsAndCloseDialog() {\n-        viewModel.saveEverythingAndUpdateAutoCompleter();\n+        viewModel.save();\n+\n+        // Update journal abbreviation loader\n+        Globals.journalAbbreviationRepository = JournalAbbreviationLoader.loadRepository(preferences.getJournalAbbreviationPreferences());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f89e25c2786f982e721c0eb1f3910e391a2f6aa"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM0NjIzNw==", "bodyText": "Possible resource leak? I don't see where the reader is closed.", "url": "https://github.com/JabRef/jabref/pull/6304#discussion_r415346237", "createdAt": "2020-04-26T16:21:59Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/logic/journals/AbbreviationParser.java", "diffHunk": "@@ -33,32 +30,20 @@\n \n     public void readJournalListFromResource(String resourceFileName) {\n         try {\n-            URL url = Objects.requireNonNull(JournalAbbreviationRepository.class.getResource(Objects.requireNonNull(resourceFileName)));\n-            readJournalList(new InputStreamReader(url.openStream(), StandardCharsets.UTF_8));\n+            InputStream stream = JournalAbbreviationRepository.class.getResourceAsStream(resourceFileName);\n+            readJournalList(new BufferedReader(new InputStreamReader(stream, StandardCharsets.UTF_8)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f89e25c2786f982e721c0eb1f3910e391a2f6aa"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM0NjQyNA==", "bodyText": "We have to check if this also works in the jlink/jpackage version.", "url": "https://github.com/JabRef/jabref/pull/6304#discussion_r415346424", "createdAt": "2020-04-26T16:23:09Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/logic/journals/JournalAbbreviationLoader.java", "diffHunk": "@@ -14,58 +16,42 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(JournalAbbreviationLoader.class);\n \n-    // Journal initialization\n     private static final String JOURNALS_FILE_BUILTIN = \"/journals/journalList.csv\";\n-    private static final String JOURNALS_IEEE_ABBREVIATION_LIST_WITH_CODE = \"/journals/IEEEJournalListCode.csv\";\n-    private static final String JOURNALS_IEEE_ABBREVIATION_LIST_WITH_TEXT = \"/journals/IEEEJournalListText.csv\";\n-    private JournalAbbreviationRepository journalAbbrev;\n-\n-    public static List<Abbreviation> getOfficialIEEEAbbreviations() {\n-        return readJournalListFromResource(JOURNALS_IEEE_ABBREVIATION_LIST_WITH_CODE);\n-    }\n-\n-    public static List<Abbreviation> getStandardIEEEAbbreviations() {\n-        return readJournalListFromResource(JOURNALS_IEEE_ABBREVIATION_LIST_WITH_TEXT);\n-    }\n \n     public static List<Abbreviation> getBuiltInAbbreviations() {\n         return readJournalListFromResource(JOURNALS_FILE_BUILTIN);\n     }\n \n-    public static List<Abbreviation> readJournalListFromResource(String resource) {\n+    private static List<Abbreviation> readJournalListFromResource(String resource) {\n         AbbreviationParser parser = new AbbreviationParser();\n         parser.readJournalListFromResource(Objects.requireNonNull(resource));\n         return parser.getAbbreviations();\n     }\n \n-    public static List<Abbreviation> readJournalListFromFile(File file) throws FileNotFoundException {\n+    public static List<Abbreviation> readJournalListFromFile(Path file) throws IOException {\n         LOGGER.debug(String.format(\"Reading journal list from file %s\", file));\n         AbbreviationParser parser = new AbbreviationParser();\n-        parser.readJournalListFromFile(Objects.requireNonNull(file));\n+        parser.readJournalListFromFile(file);\n         return parser.getAbbreviations();\n     }\n \n-    public static List<Abbreviation> readJournalListFromFile(File file, Charset encoding) throws FileNotFoundException {\n+    private static List<Abbreviation> readJournalListFromFile(Path file, Charset encoding) throws IOException {\n         LOGGER.debug(String.format(\"Reading journal list from file %s\", file));\n         AbbreviationParser parser = new AbbreviationParser();\n-        parser.readJournalListFromFile(Objects.requireNonNull(file), Objects.requireNonNull(encoding));\n+        parser.readJournalListFromFile(file, Objects.requireNonNull(encoding));\n         return parser.getAbbreviations();\n     }\n \n-    public void update(JournalAbbreviationPreferences journalAbbreviationPreferences) {\n-        journalAbbrev = new JournalAbbreviationRepository();\n-\n-        // The order of reading the journal lists is important: last added abbreviation wins\n-        // For instance, in the personal list one can overwrite abbreviations in the built in list\n-\n-        // Read builtin list\n-        journalAbbrev.addEntries(readJournalListFromResource(JOURNALS_FILE_BUILTIN));\n-\n-        // Read IEEE list\n-        if (journalAbbreviationPreferences.useIEEEAbbreviations()) {\n-            journalAbbrev.addEntries(getOfficialIEEEAbbreviations());\n-        } else {\n-            journalAbbrev.addEntries(getStandardIEEEAbbreviations());\n+    public static JournalAbbreviationRepository loadRepository(JournalAbbreviationPreferences journalAbbreviationPreferences) {\n+        JournalAbbreviationRepository repository;\n+        // Initialize with built-in list\n+        try {\n+            Path tempJournalList = Files.createTempDirectory(\"journal\").resolve(\"journalList.mv\");\n+            Files.copy(JournalAbbreviationRepository.class.getResourceAsStream(\"/journals/journalList.mv\"), tempJournalList);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f89e25c2786f982e721c0eb1f3910e391a2f6aa"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM0Njc2MA==", "bodyText": "Combine both returns with an OR?", "url": "https://github.com/JabRef/jabref/pull/6304#discussion_r415346760", "createdAt": "2020-04-26T16:24:56Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/logic/journals/JournalAbbreviationRepository.java", "diffHunk": "@@ -36,65 +42,89 @@ private static boolean isMatchedAbbreviated(String name, Abbreviation abbreviati\n         return isAbbreviated && !isExpanded;\n     }\n \n-    public int size() {\n-        return abbreviations.size();\n-    }\n-\n     /**\n      * Returns true if the given journal name is contained in the list either in its full form (e.g Physical Review\n      * Letters) or its abbreviated form (e.g. Phys. Rev. Lett.).\n      */\n     public boolean isKnownName(String journalName) {\n-        return abbreviations.stream().anyMatch(abbreviation -> isMatched(journalName.trim(), abbreviation));\n+        String journal = journalName.trim();\n+\n+        boolean isKnown = customAbbreviations.stream().anyMatch(abbreviation -> isMatched(journal, abbreviation));\n+        if (isKnown) {\n+            return true;\n+        }\n+\n+        return fullToAbbreviation.containsKey(journal) || abbreviationToFull.containsKey(journal);\n     }\n \n     /**\n      * Returns true if the given journal name is in its abbreviated form (e.g. Phys. Rev. Lett.). The test is strict,\n      * i.e. journals whose abbreviation is the same as the full name are not considered\n      */\n     public boolean isAbbreviatedName(String journalName) {\n-        return abbreviations.stream().anyMatch(abbreviation -> isMatchedAbbreviated(journalName.trim(), abbreviation));\n+        String journal = journalName.trim();\n+\n+        boolean isAbbreviated = customAbbreviations.stream().anyMatch(abbreviation -> isMatchedAbbreviated(journal, abbreviation));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f89e25c2786f982e721c0eb1f3910e391a2f6aa"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "230c0090ddf973d0b38410f96d4f0bada9d51b15", "author": {"user": {"login": "tobiasdiez", "name": "Tobias Diez"}}, "url": "https://github.com/JabRef/jabref/commit/230c0090ddf973d0b38410f96d4f0bada9d51b15", "committedDate": "2020-04-26T19:00:35Z", "message": "Update according to review feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4ea1ccdd11512da4e2cb1f0d3abb9f73a92c30f", "author": {"user": {"login": "tobiasdiez", "name": "Tobias Diez"}}, "url": "https://github.com/JabRef/jabref/commit/e4ea1ccdd11512da4e2cb1f0d3abb9f73a92c30f", "committedDate": "2020-04-26T19:03:55Z", "message": "Merge branch 'master' into journalAbbFile"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNTM4NTcy", "url": "https://github.com/JabRef/jabref/pull/6304#pullrequestreview-400538572", "createdAt": "2020-04-26T19:09:08Z", "commit": {"oid": "e4ea1ccdd11512da4e2cb1f0d3abb9f73a92c30f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0d028796ff70e5a6757fad2fb02d06038367859", "author": {"user": {"login": "tobiasdiez", "name": "Tobias Diez"}}, "url": "https://github.com/JabRef/jabref/commit/c0d028796ff70e5a6757fad2fb02d06038367859", "committedDate": "2020-04-29T14:50:16Z", "message": "Fix bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3804fd0fd63c3d60d9f584013a2e7cc279a506a", "author": {"user": {"login": "tobiasdiez", "name": "Tobias Diez"}}, "url": "https://github.com/JabRef/jabref/commit/e3804fd0fd63c3d60d9f584013a2e7cc279a506a", "committedDate": "2020-04-29T14:51:17Z", "message": "Merge branch 'journalAbbFile' of https://github.com/JabRef/jabref into journalAbbFile"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMjg5MDU2", "url": "https://github.com/JabRef/jabref/pull/6304#pullrequestreview-403289056", "createdAt": "2020-04-30T08:01:31Z", "commit": {"oid": "e3804fd0fd63c3d60d9f584013a2e7cc279a506a"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwODowMTozMlrOGOeKZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNTo1ODo0N1rOGPC1WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzgyNzQzMA==", "bodyText": "@Inject does not seem right, as DialogService and PreferencesService are injected by the constructor in this class too...", "url": "https://github.com/JabRef/jabref/pull/6304#discussion_r417827430", "createdAt": "2020-04-30T08:01:32Z", "author": {"login": "calixtus"}, "path": "src/main/java/org/jabref/gui/exporter/CreateModifyExporterDialogView.java", "diffHunk": "@@ -10,30 +10,29 @@\n \n import org.jabref.gui.DialogService;\n import org.jabref.gui.util.BaseDialog;\n-import org.jabref.logic.journals.JournalAbbreviationLoader;\n+import org.jabref.logic.journals.JournalAbbreviationRepository;\n import org.jabref.logic.l10n.Localization;\n import org.jabref.preferences.PreferencesService;\n \n import com.airhacks.afterburner.views.ViewLoader;\n \n public class CreateModifyExporterDialogView extends BaseDialog<ExporterViewModel> {\n \n-    @Inject private final JournalAbbreviationLoader loader;\n+    @Inject private JournalAbbreviationRepository repository;\n     private final ExporterViewModel exporter;\n     @FXML private Button browseButton;\n     @FXML private TextField name;\n     @FXML private TextField fileName;\n     @FXML private TextField extension;\n     @FXML private ButtonType saveExporter;\n-    @Inject private DialogService dialogService;\n-    @Inject private PreferencesService preferences;\n+    @Inject private final DialogService dialogService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3804fd0fd63c3d60d9f584013a2e7cc279a506a"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzgyODM3OQ==", "bodyText": "Accidental line break?", "url": "https://github.com/JabRef/jabref/pull/6304#discussion_r417828379", "createdAt": "2020-04-30T08:03:24Z", "author": {"login": "calixtus"}, "path": "src/main/java/org/jabref/gui/exporter/ExportCustomizationDialogViewModel.java", "diffHunk": "@@ -21,25 +21,25 @@\n \n     private final PreferencesService preferences;\n     private final DialogService dialogService;\n-    private final JournalAbbreviationLoader loader;\n+    private final JournalAbbreviationRepository repository;\n \n-    public ExportCustomizationDialogViewModel(PreferencesService preferences, DialogService dialogService, JournalAbbreviationLoader loader) {\n+    public ExportCustomizationDialogViewModel(PreferencesService preferences, DialogService dialogService, JournalAbbreviationRepository repository) {\n         this.preferences = preferences;\n         this.dialogService = dialogService;\n-        this.loader = loader;\n+        this.repository = repository;\n         loadExporters();\n     }\n \n     private void loadExporters() {\n-        List<TemplateExporter> exportersLogic = preferences.getCustomExportFormats(loader);\n+        List<TemplateExporter> exportersLogic = preferences.getCustomExportFormats(repository);\n         for (TemplateExporter exporter : exportersLogic) {\n             exporters.add(new ExporterViewModel(exporter));\n         }\n     }\n \n     public void addExporter() {\n-        CreateModifyExporterDialogView dialog = new CreateModifyExporterDialogView(null, dialogService, preferences,\n-                loader);\n+        CreateModifyExporterDialogView dialog = new CreateModifyExporterDialogView(null, dialogService, preferences\n+        );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3804fd0fd63c3d60d9f584013a2e7cc279a506a"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzgzNzg2MQ==", "bodyText": "Indentation seems off", "url": "https://github.com/JabRef/jabref/pull/6304#discussion_r417837861", "createdAt": "2020-04-30T08:20:44Z", "author": {"login": "calixtus"}, "path": "src/main/java/org/jabref/preferences/JabRefPreferences.java", "diffHunk": "@@ -1300,10 +1296,10 @@ public BibtexKeyPatternPreferences getBibtexKeyPatternPreferences() {\n     }\n \n     @Override\n-    public LayoutFormatterPreferences getLayoutFormatterPreferences(JournalAbbreviationLoader journalAbbreviationLoader) {\n-        Objects.requireNonNull(journalAbbreviationLoader);\n-        return new LayoutFormatterPreferences(getNameFormatterPreferences(), getJournalAbbreviationPreferences(),\n-                                              getFileLinkPreferences(), journalAbbreviationLoader);\n+    public LayoutFormatterPreferences getLayoutFormatterPreferences(JournalAbbreviationRepository repository) {\n+        return new LayoutFormatterPreferences(getNameFormatterPreferences(),\n+                                              getFileLinkPreferences(),\n+                repository);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3804fd0fd63c3d60d9f584013a2e7cc279a506a"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyODI0OQ==", "bodyText": "The following two lines are a bit irritating for Java beginners, so I would suggest to keep the old comment on them.", "url": "https://github.com/JabRef/jabref/pull/6304#discussion_r418428249", "createdAt": "2020-05-01T05:58:47Z", "author": {"login": "calixtus"}, "path": "src/main/java/org/jabref/logic/journals/JournalAbbreviationRepository.java", "diffHunk": "@@ -36,65 +42,86 @@ private static boolean isMatchedAbbreviated(String name, Abbreviation abbreviati\n         return isAbbreviated && !isExpanded;\n     }\n \n-    public int size() {\n-        return abbreviations.size();\n-    }\n-\n     /**\n      * Returns true if the given journal name is contained in the list either in its full form (e.g Physical Review\n      * Letters) or its abbreviated form (e.g. Phys. Rev. Lett.).\n      */\n     public boolean isKnownName(String journalName) {\n-        return abbreviations.stream().anyMatch(abbreviation -> isMatched(journalName.trim(), abbreviation));\n+        String journal = journalName.trim();\n+\n+        boolean isKnown = customAbbreviations.stream().anyMatch(abbreviation -> isMatched(journal, abbreviation));\n+        if (isKnown) {\n+            return true;\n+        }\n+\n+        return fullToAbbreviation.containsKey(journal) || abbreviationToFull.containsKey(journal);\n     }\n \n     /**\n      * Returns true if the given journal name is in its abbreviated form (e.g. Phys. Rev. Lett.). The test is strict,\n      * i.e. journals whose abbreviation is the same as the full name are not considered\n      */\n     public boolean isAbbreviatedName(String journalName) {\n-        return abbreviations.stream().anyMatch(abbreviation -> isMatchedAbbreviated(journalName.trim(), abbreviation));\n+        String journal = journalName.trim();\n+\n+        return customAbbreviations.stream().anyMatch(abbreviation -> isMatchedAbbreviated(journal, abbreviation))\n+                ||\n+                abbreviationToFull.containsKey(journal);\n     }\n \n     /**\n-     * Attempts to get the abbreviated name of the journal given. May contain dots.\n+     * Attempts to get the abbreviation of the journal given.\n      *\n-     * @param journalName The journal name to abbreviate.\n-     * @return The abbreviated name\n+     * @param input The journal name (either abbreviated or full name).\n      */\n-    public Optional<Abbreviation> getAbbreviation(String journalName) {\n-        return abbreviations.stream().filter(abbreviation -> isMatched(journalName.trim(), abbreviation)).findFirst();\n+    public Optional<Abbreviation> get(String input) {\n+        String journal = input.trim();\n+\n+        Optional<Abbreviation> customAbbreviation = customAbbreviations.stream()\n+                                                                       .filter(abbreviation -> isMatched(journal, abbreviation))\n+                                                                       .findAny();\n+        if (customAbbreviation.isPresent()) {\n+            return customAbbreviation;\n+        }\n+\n+        return Optional.ofNullable(fullToAbbreviation.get(journal))\n+                       .map(abbreviation -> new Abbreviation(journal, abbreviation))\n+                       .or(() -> Optional.ofNullable(abbreviationToFull.get(journal)).map(fullName -> new Abbreviation(fullName, journal)));\n     }\n \n-    public void addEntry(Abbreviation abbreviation) {\n+    public void addCustomAbbreviation(Abbreviation abbreviation) {\n         Objects.requireNonNull(abbreviation);\n \n-        // Abbreviation equality is tested on name only, so we might have to remove an old abbreviation\n-        abbreviations.remove(abbreviation);\n-        abbreviations.add(abbreviation);\n+        // We do not want to keep duplicates, thus remove the old abbreviation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3804fd0fd63c3d60d9f584013a2e7cc279a506a"}, "originalPosition": 108}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "456b9abd1ee70e5b212925321eabfff236745f7f", "author": {"user": {"login": "tobiasdiez", "name": "Tobias Diez"}}, "url": "https://github.com/JabRef/jabref/commit/456b9abd1ee70e5b212925321eabfff236745f7f", "committedDate": "2020-05-01T11:36:07Z", "message": "Include feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c4062a3689b3faf2cd92c264cbedb4b47904295", "author": {"user": {"login": "tobiasdiez", "name": "Tobias Diez"}}, "url": "https://github.com/JabRef/jabref/commit/2c4062a3689b3faf2cd92c264cbedb4b47904295", "committedDate": "2020-05-01T11:36:29Z", "message": "Fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72ccf99ac888e0e26dbf51b04ba823a08bf7145f", "author": {"user": {"login": "tobiasdiez", "name": "Tobias Diez"}}, "url": "https://github.com/JabRef/jabref/commit/72ccf99ac888e0e26dbf51b04ba823a08bf7145f", "committedDate": "2020-05-01T11:50:56Z", "message": "Fix localization"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 338, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}