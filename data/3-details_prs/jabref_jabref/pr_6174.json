{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNDIyOTMw", "number": 6174, "title": "Fix overwritting downloaded files with same name", "bodyText": "Added auto-numbering for downloaded file names, which conflict with file names in the current directory. #6068\n\n\n Change in CHANGELOG.md described (if applicable)\n Tests created for changes (if applicable)\n Manually tested changed features in running JabRef (always required)", "createdAt": "2020-03-25T07:15:01Z", "url": "https://github.com/JabRef/jabref/pull/6174", "merged": true, "mergeCommit": {"oid": "7ec1d0cbdec3595bdf9e373da6109c9a8f31e5f0"}, "closed": true, "closedAt": "2020-03-29T23:29:33Z", "author": {"login": "gtam25"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcRDs0kABqjMxNjMwNTgwNTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcSGq7HAH2gAyMzkzNDIyOTMwOjgzODUzOWM5MDk0YTE4ZDcwZTg2OWIyNTJhN2YwNzMxNzA2ZTkwZmQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c4c9aa8f51c4b23d7350cb593157ac9f9570072d", "author": {"user": null}, "url": "https://github.com/JabRef/jabref/commit/c4c9aa8f51c4b23d7350cb593157ac9f9570072d", "committedDate": "2020-03-25T08:51:53Z", "message": "resolved style checks"}, "afterCommit": {"oid": "10ee0efac0798947943dbc7d913212b7527adac7", "author": {"user": null}, "url": "https://github.com/JabRef/jabref/commit/10ee0efac0798947943dbc7d913212b7527adac7", "committedDate": "2020-03-25T09:01:08Z", "message": "resolved style checks"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxMTA1ODgz", "url": "https://github.com/JabRef/jabref/pull/6174#pullrequestreview-381105883", "createdAt": "2020-03-25T12:37:02Z", "commit": {"oid": "7f4af8c53c5cbeb79249e4d15682ebdfbb017c58"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMjozNzowMlrOF7ZBag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMjo0ODoxNlrOF7ZZ8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyMDI2Ng==", "bodyText": "Please put that into an else path in the if of line 91. (Declaring the variables here is OK). I find it hard if the contents of the variables are overwritten: The default case is that there is an extension.", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r397820266", "createdAt": "2020-03-25T12:37:02Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/util/io/FileNameHandler.java", "diffHunk": "@@ -67,7 +71,41 @@ public static String cleanDirectoryName(String badFileName) {\n         return cleanName.toString().trim();\n     }\n \n+    /**\n+     * Returns an absolute path to a file which does not match with any existing file names\n+     *\n+     * @param targetDirectory The directory in which file name should be unique\n+     * @param fileName Suggested name for the file\n+     * @return a file-name such that it does not match any existing files in targetDirectory.\n+     * */\n+    public static String getNonOverWritingFileName(Path targetDirectory, String fileName) {\n+        String absoluteName = targetDirectory.resolve(fileName)\n+                                            .toString();\n+\n+        Optional<String> extensionOptional = FileUtil.getFileExtension(fileName);\n+\n+        // the suffix include the '.' , if extension is present Eg: \".pdf\"\n+        String extensionSuffix = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4af8c53c5cbeb79249e4d15682ebdfbb017c58"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyMDc5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (int counter = 1; Files.exists(absolutePath); ++counter) {\n          \n          \n            \n                    for (int counter = 1; Files.exists(absolutePath); counter++) {\n          \n      \n    \n    \n  \n\n++ at the end to be inline with the usual i++.", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r397820798", "createdAt": "2020-03-25T12:37:53Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/util/io/FileNameHandler.java", "diffHunk": "@@ -67,7 +71,41 @@ public static String cleanDirectoryName(String badFileName) {\n         return cleanName.toString().trim();\n     }\n \n+    /**\n+     * Returns an absolute path to a file which does not match with any existing file names\n+     *\n+     * @param targetDirectory The directory in which file name should be unique\n+     * @param fileName Suggested name for the file\n+     * @return a file-name such that it does not match any existing files in targetDirectory.\n+     * */\n+    public static String getNonOverWritingFileName(Path targetDirectory, String fileName) {\n+        String absoluteName = targetDirectory.resolve(fileName)\n+                                            .toString();\n+\n+        Optional<String> extensionOptional = FileUtil.getFileExtension(fileName);\n+\n+        // the suffix include the '.' , if extension is present Eg: \".pdf\"\n+        String extensionSuffix = \"\";\n+        String fileNameWithoutExtension = fileName;\n+\n+        if (extensionOptional.isPresent()) {\n+            extensionSuffix = '.' + extensionOptional.get();\n+            fileNameWithoutExtension = fileName.substring(0, fileName.lastIndexOf('.'));\n+        }\n+\n+        Path absolutePath = Paths.get(absoluteName);\n+        String newFileName = fileName;\n+\n+        for (int counter = 1; Files.exists(absolutePath); ++counter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4af8c53c5cbeb79249e4d15682ebdfbb017c58"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyMTI5Mg==", "bodyText": "After thinking longer, please rewrite to a while loop. Not testing for the counter in the test of a for loop is uncommon. Thus, hard to read when maintaining the code.", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r397821292", "createdAt": "2020-03-25T12:38:49Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/util/io/FileNameHandler.java", "diffHunk": "@@ -67,7 +71,41 @@ public static String cleanDirectoryName(String badFileName) {\n         return cleanName.toString().trim();\n     }\n \n+    /**\n+     * Returns an absolute path to a file which does not match with any existing file names\n+     *\n+     * @param targetDirectory The directory in which file name should be unique\n+     * @param fileName Suggested name for the file\n+     * @return a file-name such that it does not match any existing files in targetDirectory.\n+     * */\n+    public static String getNonOverWritingFileName(Path targetDirectory, String fileName) {\n+        String absoluteName = targetDirectory.resolve(fileName)\n+                                            .toString();\n+\n+        Optional<String> extensionOptional = FileUtil.getFileExtension(fileName);\n+\n+        // the suffix include the '.' , if extension is present Eg: \".pdf\"\n+        String extensionSuffix = \"\";\n+        String fileNameWithoutExtension = fileName;\n+\n+        if (extensionOptional.isPresent()) {\n+            extensionSuffix = '.' + extensionOptional.get();\n+            fileNameWithoutExtension = fileName.substring(0, fileName.lastIndexOf('.'));\n+        }\n+\n+        Path absolutePath = Paths.get(absoluteName);\n+        String newFileName = fileName;\n+\n+        for (int counter = 1; Files.exists(absolutePath); ++counter) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyMDc5OA=="}, "originalCommit": {"oid": "7f4af8c53c5cbeb79249e4d15682ebdfbb017c58"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyMjI3OA==", "bodyText": "No need for that variable. Can be tesed in the while condition.", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r397822278", "createdAt": "2020-03-25T12:40:43Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/util/io/FileNameHandler.java", "diffHunk": "@@ -67,7 +71,41 @@ public static String cleanDirectoryName(String badFileName) {\n         return cleanName.toString().trim();\n     }\n \n+    /**\n+     * Returns an absolute path to a file which does not match with any existing file names\n+     *\n+     * @param targetDirectory The directory in which file name should be unique\n+     * @param fileName Suggested name for the file\n+     * @return a file-name such that it does not match any existing files in targetDirectory.\n+     * */\n+    public static String getNonOverWritingFileName(Path targetDirectory, String fileName) {\n+        String absoluteName = targetDirectory.resolve(fileName)\n+                                            .toString();\n+\n+        Optional<String> extensionOptional = FileUtil.getFileExtension(fileName);\n+\n+        // the suffix include the '.' , if extension is present Eg: \".pdf\"\n+        String extensionSuffix = \"\";\n+        String fileNameWithoutExtension = fileName;\n+\n+        if (extensionOptional.isPresent()) {\n+            extensionSuffix = '.' + extensionOptional.get();\n+            fileNameWithoutExtension = fileName.substring(0, fileName.lastIndexOf('.'));\n+        }\n+\n+        Path absolutePath = Paths.get(absoluteName);\n+        String newFileName = fileName;\n+\n+        for (int counter = 1; Files.exists(absolutePath); ++counter) {\n+            newFileName = fileNameWithoutExtension +\n+                            \" (\" + counter + \")\" +\n+                            extensionSuffix;\n+            absolutePath = targetDirectory.resolve(newFileName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4af8c53c5cbeb79249e4d15682ebdfbb017c58"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyMjY2MA==", "bodyText": "Please include that in the assertEquals directly.", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r397822660", "createdAt": "2020-03-25T12:41:27Z", "author": {"login": "koppor"}, "path": "src/test/java/org/jabref/logic/util/io/FileNameHandlerTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.jabref.logic.util.io;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class FileNameHandlerTest {\n+\n+    @Test\n+    public void testCleanFileName() {\n+        assertEquals(\"legalFilename.txt\", FileNameHandler.cleanFileName(\"legalFilename.txt\"));\n+        assertEquals(\"illegalFilename______.txt\", FileNameHandler.cleanFileName(\"illegalFilename/?*<>|.txt\"));\n+    }\n+\n+    @Test\n+    public void testCleanDirectoryName() {\n+        assertEquals(\"legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"legalFilename.txt\"));\n+        assertEquals(\"subdir/legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"subdir/legalFilename.txt\"));\n+        assertEquals(\"illegalFilename/_____.txt\", FileNameHandler.cleanDirectoryName(\"illegalFilename/?*<>|.txt\"));\n+    }\n+\n+    @Test\n+    public void testCleanDirectoryNameForWindows() {\n+        assertEquals(\"legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"legalFilename.txt\"));\n+        assertEquals(\"subdir\\\\legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"subdir\\\\legalFilename.txt\"));\n+        assertEquals(\"illegalFilename\\\\_____.txt\", FileNameHandler.cleanDirectoryName(\"illegalFilename\\\\?*<>|.txt\"));\n+    }\n+\n+    @Test\n+    public void testCleanCurlyBracesAsWell() {\n+        assertEquals(\"The Evolution of Sentiment_ Analysis_A Review of Research Topics, Venues, and Top Cited Papers.PDF\", FileNameHandler.cleanFileName(\"The Evolution of Sentiment} Analysis}A Review of Research Topics, Venues, and Top Cited Papers.PDF\"));\n+    }\n+\n+    @Test\n+    public void testGetNonOverWritingFileNameReturnsUniqueName(@TempDir Path tempDirectory) throws IOException {\n+        String dummyFile1 = \"default.txt\";\n+        String dummyFile2 = \"default (1).txt\";\n+        String expectedFileName = \"default (2).txt\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4af8c53c5cbeb79249e4d15682ebdfbb017c58"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyNTg5Nw==", "bodyText": "Please introduce Path dummyFile1 variable. In both usages of dummyFileX, you are resulting the name using the same path.", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r397825897", "createdAt": "2020-03-25T12:47:07Z", "author": {"login": "koppor"}, "path": "src/test/java/org/jabref/logic/util/io/FileNameHandlerTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.jabref.logic.util.io;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class FileNameHandlerTest {\n+\n+    @Test\n+    public void testCleanFileName() {\n+        assertEquals(\"legalFilename.txt\", FileNameHandler.cleanFileName(\"legalFilename.txt\"));\n+        assertEquals(\"illegalFilename______.txt\", FileNameHandler.cleanFileName(\"illegalFilename/?*<>|.txt\"));\n+    }\n+\n+    @Test\n+    public void testCleanDirectoryName() {\n+        assertEquals(\"legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"legalFilename.txt\"));\n+        assertEquals(\"subdir/legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"subdir/legalFilename.txt\"));\n+        assertEquals(\"illegalFilename/_____.txt\", FileNameHandler.cleanDirectoryName(\"illegalFilename/?*<>|.txt\"));\n+    }\n+\n+    @Test\n+    public void testCleanDirectoryNameForWindows() {\n+        assertEquals(\"legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"legalFilename.txt\"));\n+        assertEquals(\"subdir\\\\legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"subdir\\\\legalFilename.txt\"));\n+        assertEquals(\"illegalFilename\\\\_____.txt\", FileNameHandler.cleanDirectoryName(\"illegalFilename\\\\?*<>|.txt\"));\n+    }\n+\n+    @Test\n+    public void testCleanCurlyBracesAsWell() {\n+        assertEquals(\"The Evolution of Sentiment_ Analysis_A Review of Research Topics, Venues, and Top Cited Papers.PDF\", FileNameHandler.cleanFileName(\"The Evolution of Sentiment} Analysis}A Review of Research Topics, Venues, and Top Cited Papers.PDF\"));\n+    }\n+\n+    @Test\n+    public void testGetNonOverWritingFileNameReturnsUniqueName(@TempDir Path tempDirectory) throws IOException {\n+        String dummyFile1 = \"default.txt\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4af8c53c5cbeb79249e4d15682ebdfbb017c58"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyNjU0NQ==", "bodyText": "Good to have a test. - Could you add two more:\n\nOne for a non existing file\nOne for just one file existing\n\nI know, these are trivial. - Nevertheless, if someone touches your code, even the trivial ones are tested then (and there could something go wrong)", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r397826545", "createdAt": "2020-03-25T12:48:16Z", "author": {"login": "koppor"}, "path": "src/test/java/org/jabref/logic/util/io/FileNameHandlerTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.jabref.logic.util.io;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class FileNameHandlerTest {\n+\n+    @Test\n+    public void testCleanFileName() {\n+        assertEquals(\"legalFilename.txt\", FileNameHandler.cleanFileName(\"legalFilename.txt\"));\n+        assertEquals(\"illegalFilename______.txt\", FileNameHandler.cleanFileName(\"illegalFilename/?*<>|.txt\"));\n+    }\n+\n+    @Test\n+    public void testCleanDirectoryName() {\n+        assertEquals(\"legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"legalFilename.txt\"));\n+        assertEquals(\"subdir/legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"subdir/legalFilename.txt\"));\n+        assertEquals(\"illegalFilename/_____.txt\", FileNameHandler.cleanDirectoryName(\"illegalFilename/?*<>|.txt\"));\n+    }\n+\n+    @Test\n+    public void testCleanDirectoryNameForWindows() {\n+        assertEquals(\"legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"legalFilename.txt\"));\n+        assertEquals(\"subdir\\\\legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"subdir\\\\legalFilename.txt\"));\n+        assertEquals(\"illegalFilename\\\\_____.txt\", FileNameHandler.cleanDirectoryName(\"illegalFilename\\\\?*<>|.txt\"));\n+    }\n+\n+    @Test\n+    public void testCleanCurlyBracesAsWell() {\n+        assertEquals(\"The Evolution of Sentiment_ Analysis_A Review of Research Topics, Venues, and Top Cited Papers.PDF\", FileNameHandler.cleanFileName(\"The Evolution of Sentiment} Analysis}A Review of Research Topics, Venues, and Top Cited Papers.PDF\"));\n+    }\n+\n+    @Test\n+    public void testGetNonOverWritingFileNameReturnsUniqueName(@TempDir Path tempDirectory) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4af8c53c5cbeb79249e4d15682ebdfbb017c58"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "155fbe396c18b01139f87f845f76daa124ea5492", "author": {"user": null}, "url": "https://github.com/JabRef/jabref/commit/155fbe396c18b01139f87f845f76daa124ea5492", "committedDate": "2020-03-25T15:19:44Z", "message": "fixes #6068\n\n- fixed downloading file with same name\n- updated changelog"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7f4af8c53c5cbeb79249e4d15682ebdfbb017c58", "author": {"user": null}, "url": "https://github.com/JabRef/jabref/commit/7f4af8c53c5cbeb79249e4d15682ebdfbb017c58", "committedDate": "2020-03-25T09:33:11Z", "message": "rename test method to standard name"}, "afterCommit": {"oid": "155fbe396c18b01139f87f845f76daa124ea5492", "author": {"user": null}, "url": "https://github.com/JabRef/jabref/commit/155fbe396c18b01139f87f845f76daa124ea5492", "committedDate": "2020-03-25T15:19:44Z", "message": "fixes #6068\n\n- fixed downloading file with same name\n- updated changelog"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bfb77914faef877a82d00d91090ec703b9e8138", "author": {"user": null}, "url": "https://github.com/JabRef/jabref/commit/1bfb77914faef877a82d00d91090ec703b9e8138", "committedDate": "2020-03-25T16:38:08Z", "message": "code check style"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMzE3MDA3", "url": "https://github.com/JabRef/jabref/pull/6174#pullrequestreview-383317007", "createdAt": "2020-03-28T14:20:52Z", "commit": {"oid": "1bfb77914faef877a82d00d91090ec703b9e8138"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxNDoyMDo1MlrOF9Jxqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxNDoyNTowMFrOF9JzXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY2NzYyNg==", "bodyText": "Please remove this comment.", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r399667626", "createdAt": "2020-03-28T14:20:52Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/logic/util/io/FileNameUniqueness.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.jabref.logic.util.io;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+\n+public class FileNameUniqueness {\n+\n+    /**\n+     * Returns an absolute path to a file which does not match with any existing file names\n+     *\n+     * @param targetDirectory The directory in which file name should be unique\n+     * @param fileName Suggested name for the file\n+     * @return a file-name such that it does not match any existing files in targetDirectory.\n+     * */\n+    public static String getNonOverWritingFileName(Path targetDirectory, String fileName) {\n+//        String absoluteName = targetDirectory.resolve(fileName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bfb77914faef877a82d00d91090ec703b9e8138"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY2NzYzNw==", "bodyText": "This one as well.", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r399667637", "createdAt": "2020-03-28T14:21:03Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/logic/util/io/FileNameUniqueness.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.jabref.logic.util.io;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+\n+public class FileNameUniqueness {\n+\n+    /**\n+     * Returns an absolute path to a file which does not match with any existing file names\n+     *\n+     * @param targetDirectory The directory in which file name should be unique\n+     * @param fileName Suggested name for the file\n+     * @return a file-name such that it does not match any existing files in targetDirectory.\n+     * */\n+    public static String getNonOverWritingFileName(Path targetDirectory, String fileName) {\n+//        String absoluteName = targetDirectory.resolve(fileName)\n+//                .toString();\n+\n+        Optional<String> extensionOptional = FileUtil.getFileExtension(fileName);\n+\n+        // the suffix include the '.' , if extension is present Eg: \".pdf\"\n+        String extensionSuffix;\n+        String fileNameWithoutExtension;\n+\n+        if (extensionOptional.isPresent()) {\n+            extensionSuffix = '.' + extensionOptional.get();\n+            fileNameWithoutExtension = fileName.substring(0, fileName.lastIndexOf('.'));\n+        }\n+        else {\n+            extensionSuffix = \"\";\n+            fileNameWithoutExtension = fileName;\n+        }\n+\n+//        Path absolutePath = Paths.get(absoluteName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bfb77914faef877a82d00d91090ec703b9e8138"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY2NzgzOA==", "bodyText": "Is there a need to have the temporary directory as a variable as well as an argument? I would prefer if all tests use the same format (either variable or either paramater)", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r399667838", "createdAt": "2020-03-28T14:23:19Z", "author": {"login": "tobiasdiez"}, "path": "src/test/java/org/jabref/logic/util/io/FileNameUniquenessTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.jabref.logic.util.io;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+public class FileNameUniquenessTest {\n+\n+    @TempDir\n+    protected Path tempDir;\n+\n+    @Test\n+    public void testGetNonOverWritingFileNameReturnsSameName(@TempDir Path tempDirectory) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bfb77914faef877a82d00d91090ec703b9e8138"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY2Nzk2NQ==", "bodyText": "The description seems to be off as no absolute path is returned but only the file name, right?", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r399667965", "createdAt": "2020-03-28T14:24:11Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/logic/util/io/FileNameUniqueness.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.jabref.logic.util.io;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+\n+public class FileNameUniqueness {\n+\n+    /**\n+     * Returns an absolute path to a file which does not match with any existing file names", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bfb77914faef877a82d00d91090ec703b9e8138"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY2ODA2MA==", "bodyText": "Deleting the file shouldn't be necessary as the TempDir should take care of this.", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r399668060", "createdAt": "2020-03-28T14:25:00Z", "author": {"login": "tobiasdiez"}, "path": "src/test/java/org/jabref/logic/util/io/FileNameUniquenessTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.jabref.logic.util.io;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+public class FileNameUniquenessTest {\n+\n+    @TempDir\n+    protected Path tempDir;\n+\n+    @Test\n+    public void testGetNonOverWritingFileNameReturnsSameName(@TempDir Path tempDirectory) throws IOException {\n+\n+        assertFalse(\n+                Files.exists(tempDirectory.resolve(\"sameFile.txt\"))\n+        );\n+\n+        String outputFileName = FileNameUniqueness.getNonOverWritingFileName(tempDirectory, \"sameFile.txt\");\n+        assertEquals(\"sameFile.txt\", outputFileName);\n+\n+    }\n+\n+    @Test\n+    public void testGetNonOverWritingFileNameReturnsUniqueNameOver1Conflict() throws IOException {\n+        Path dummyFilePath1 = tempDir.resolve(\"differentFile.txt\");\n+\n+        Files.createFile(dummyFilePath1);\n+\n+        String outputFileName = FileNameUniqueness.getNonOverWritingFileName(tempDir, \"differentFile.txt\");\n+        assertEquals(\"differentFile (1).txt\", outputFileName);\n+\n+        Files.delete(dummyFilePath1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bfb77914faef877a82d00d91090ec703b9e8138"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "838539c9094a18d70e869b252a7f0731706e90fd", "author": {"user": null}, "url": "https://github.com/JabRef/jabref/commit/838539c9094a18d70e869b252a7f0731706e90fd", "committedDate": "2020-03-28T15:03:02Z", "message": "Remove commented code and refactor"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 439, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}