{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzMTI3NTA1", "number": 7210, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMToyNTo1N1rOFITlFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMjoyODo1M1rOFIUhZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MjUzNzE5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/model/strings/LatexToUnicodeAdapter.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMToyNTo1N1rOIKJpAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMjoyODowOFrOIKLCQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUxNDYyNQ==", "bodyText": "I think it makes more sense to use  Optional instead of exception handling for control flows (that is a bad idea).", "url": "https://github.com/JabRef/jabref/pull/7210#discussion_r547514625", "createdAt": "2020-12-22T21:25:57Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/model/strings/LatexToUnicodeAdapter.java", "diffHunk": "@@ -5,23 +5,56 @@\n import java.util.regex.Pattern;\n \n import com.github.tomtung.latex2unicode.LaTeX2Unicode;\n+import fastparse.core.Parsed;\n \n /**\n  * Adapter class for the latex2unicode lib. This is an alternative to our LatexToUnicode class\n  */\n public class LatexToUnicodeAdapter {\n \n-    private static Pattern underscoreMatcher = Pattern.compile(\"_(?!\\\\{)\");\n+    private static final Pattern UNDERSCORE_MATCHER = Pattern.compile(\"_(?!\\\\{)\");\n \n-    private static String replacementChar = \"\\uFFFD\";\n+    private static final String REPLACEMENT_CHAR = \"\\uFFFD\";\n \n-    private static Pattern underscorePlaceholderMatcher = Pattern.compile(replacementChar);\n+    private static final Pattern UNDERSCORE_PLACEHOLDER_MATCHER = Pattern.compile(REPLACEMENT_CHAR);\n \n+    /**\n+     * Attempts to resolve all LaTeX in the String.\n+     *\n+     * @param inField a String containing LaTeX\n+     * @return a String with LaTeX resolved into Unicode, or the original String if the LaTeX could not be parsed\n+     */\n     public static String format(String inField) {\n         Objects.requireNonNull(inField);\n \n-        String toFormat = underscoreMatcher.matcher(inField).replaceAll(replacementChar);\n-        toFormat = Normalizer.normalize(LaTeX2Unicode.convert(toFormat), Normalizer.Form.NFC);\n-        return underscorePlaceholderMatcher.matcher(toFormat).replaceAll(\"_\");\n+        try {\n+            return parse(inField);\n+        } catch (IllegalArgumentException ignored) {\n+            return Normalizer.normalize(inField, Normalizer.Form.NFC);\n+        }\n+    }\n+\n+    /**\n+     * Attempts to resolve all LaTeX in the String.\n+     *\n+     * @param inField a String containing LaTeX\n+     * @return a String with LaTeX resolved into Unicode\n+     * @throws IllegalArgumentException if the LaTeX could not be parsed\n+     */\n+    public static String parse(String inField) throws IllegalArgumentException {\n+        Objects.requireNonNull(inField);\n+        String toFormat = UNDERSCORE_MATCHER.matcher(inField).replaceAll(REPLACEMENT_CHAR);\n+        try {\n+            var parsingResult = LaTeX2Unicode.parse(toFormat);\n+            if (parsingResult instanceof Parsed.Success) {\n+                String text = parsingResult.get().value();\n+                toFormat = Normalizer.normalize(text, Normalizer.Form.NFC);\n+                return UNDERSCORE_PLACEHOLDER_MATCHER.matcher(toFormat).replaceAll(\"_\");\n+            } else {\n+                throw new IllegalArgumentException(\"Parsing of latex failed.\");\n+            }\n+        } catch (Throwable throwable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7986b3bdf3beb4856eb6dd7405b356f212d141a"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUxOTMwOQ==", "bodyText": "Essentially just replacing the throw ... with return Optional.empty()?", "url": "https://github.com/JabRef/jabref/pull/7210#discussion_r547519309", "createdAt": "2020-12-22T21:38:45Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/main/java/org/jabref/model/strings/LatexToUnicodeAdapter.java", "diffHunk": "@@ -5,23 +5,56 @@\n import java.util.regex.Pattern;\n \n import com.github.tomtung.latex2unicode.LaTeX2Unicode;\n+import fastparse.core.Parsed;\n \n /**\n  * Adapter class for the latex2unicode lib. This is an alternative to our LatexToUnicode class\n  */\n public class LatexToUnicodeAdapter {\n \n-    private static Pattern underscoreMatcher = Pattern.compile(\"_(?!\\\\{)\");\n+    private static final Pattern UNDERSCORE_MATCHER = Pattern.compile(\"_(?!\\\\{)\");\n \n-    private static String replacementChar = \"\\uFFFD\";\n+    private static final String REPLACEMENT_CHAR = \"\\uFFFD\";\n \n-    private static Pattern underscorePlaceholderMatcher = Pattern.compile(replacementChar);\n+    private static final Pattern UNDERSCORE_PLACEHOLDER_MATCHER = Pattern.compile(REPLACEMENT_CHAR);\n \n+    /**\n+     * Attempts to resolve all LaTeX in the String.\n+     *\n+     * @param inField a String containing LaTeX\n+     * @return a String with LaTeX resolved into Unicode, or the original String if the LaTeX could not be parsed\n+     */\n     public static String format(String inField) {\n         Objects.requireNonNull(inField);\n \n-        String toFormat = underscoreMatcher.matcher(inField).replaceAll(replacementChar);\n-        toFormat = Normalizer.normalize(LaTeX2Unicode.convert(toFormat), Normalizer.Form.NFC);\n-        return underscorePlaceholderMatcher.matcher(toFormat).replaceAll(\"_\");\n+        try {\n+            return parse(inField);\n+        } catch (IllegalArgumentException ignored) {\n+            return Normalizer.normalize(inField, Normalizer.Form.NFC);\n+        }\n+    }\n+\n+    /**\n+     * Attempts to resolve all LaTeX in the String.\n+     *\n+     * @param inField a String containing LaTeX\n+     * @return a String with LaTeX resolved into Unicode\n+     * @throws IllegalArgumentException if the LaTeX could not be parsed\n+     */\n+    public static String parse(String inField) throws IllegalArgumentException {\n+        Objects.requireNonNull(inField);\n+        String toFormat = UNDERSCORE_MATCHER.matcher(inField).replaceAll(REPLACEMENT_CHAR);\n+        try {\n+            var parsingResult = LaTeX2Unicode.parse(toFormat);\n+            if (parsingResult instanceof Parsed.Success) {\n+                String text = parsingResult.get().value();\n+                toFormat = Normalizer.normalize(text, Normalizer.Form.NFC);\n+                return UNDERSCORE_PLACEHOLDER_MATCHER.matcher(toFormat).replaceAll(\"_\");\n+            } else {\n+                throw new IllegalArgumentException(\"Parsing of latex failed.\");\n+            }\n+        } catch (Throwable throwable) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUxNDYyNQ=="}, "originalCommit": {"oid": "b7986b3bdf3beb4856eb6dd7405b356f212d141a"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUzMjU1Mw==", "bodyText": "Yes, and Optional.of..(...) in the if block. I added some code suggestions", "url": "https://github.com/JabRef/jabref/pull/7210#discussion_r547532553", "createdAt": "2020-12-22T22:13:59Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/model/strings/LatexToUnicodeAdapter.java", "diffHunk": "@@ -5,23 +5,56 @@\n import java.util.regex.Pattern;\n \n import com.github.tomtung.latex2unicode.LaTeX2Unicode;\n+import fastparse.core.Parsed;\n \n /**\n  * Adapter class for the latex2unicode lib. This is an alternative to our LatexToUnicode class\n  */\n public class LatexToUnicodeAdapter {\n \n-    private static Pattern underscoreMatcher = Pattern.compile(\"_(?!\\\\{)\");\n+    private static final Pattern UNDERSCORE_MATCHER = Pattern.compile(\"_(?!\\\\{)\");\n \n-    private static String replacementChar = \"\\uFFFD\";\n+    private static final String REPLACEMENT_CHAR = \"\\uFFFD\";\n \n-    private static Pattern underscorePlaceholderMatcher = Pattern.compile(replacementChar);\n+    private static final Pattern UNDERSCORE_PLACEHOLDER_MATCHER = Pattern.compile(REPLACEMENT_CHAR);\n \n+    /**\n+     * Attempts to resolve all LaTeX in the String.\n+     *\n+     * @param inField a String containing LaTeX\n+     * @return a String with LaTeX resolved into Unicode, or the original String if the LaTeX could not be parsed\n+     */\n     public static String format(String inField) {\n         Objects.requireNonNull(inField);\n \n-        String toFormat = underscoreMatcher.matcher(inField).replaceAll(replacementChar);\n-        toFormat = Normalizer.normalize(LaTeX2Unicode.convert(toFormat), Normalizer.Form.NFC);\n-        return underscorePlaceholderMatcher.matcher(toFormat).replaceAll(\"_\");\n+        try {\n+            return parse(inField);\n+        } catch (IllegalArgumentException ignored) {\n+            return Normalizer.normalize(inField, Normalizer.Form.NFC);\n+        }\n+    }\n+\n+    /**\n+     * Attempts to resolve all LaTeX in the String.\n+     *\n+     * @param inField a String containing LaTeX\n+     * @return a String with LaTeX resolved into Unicode\n+     * @throws IllegalArgumentException if the LaTeX could not be parsed\n+     */\n+    public static String parse(String inField) throws IllegalArgumentException {\n+        Objects.requireNonNull(inField);\n+        String toFormat = UNDERSCORE_MATCHER.matcher(inField).replaceAll(REPLACEMENT_CHAR);\n+        try {\n+            var parsingResult = LaTeX2Unicode.parse(toFormat);\n+            if (parsingResult instanceof Parsed.Success) {\n+                String text = parsingResult.get().value();\n+                toFormat = Normalizer.normalize(text, Normalizer.Form.NFC);\n+                return UNDERSCORE_PLACEHOLDER_MATCHER.matcher(toFormat).replaceAll(\"_\");\n+            } else {\n+                throw new IllegalArgumentException(\"Parsing of latex failed.\");\n+            }\n+        } catch (Throwable throwable) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUxNDYyNQ=="}, "originalCommit": {"oid": "b7986b3bdf3beb4856eb6dd7405b356f212d141a"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUzNDMwNA==", "bodyText": "Sure, I'll take a look at it. Thank you for the suggestion!\nIn theory, I like exceptions, but it does not make the as readable \ud83d\ude04", "url": "https://github.com/JabRef/jabref/pull/7210#discussion_r547534304", "createdAt": "2020-12-22T22:19:00Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/main/java/org/jabref/model/strings/LatexToUnicodeAdapter.java", "diffHunk": "@@ -5,23 +5,56 @@\n import java.util.regex.Pattern;\n \n import com.github.tomtung.latex2unicode.LaTeX2Unicode;\n+import fastparse.core.Parsed;\n \n /**\n  * Adapter class for the latex2unicode lib. This is an alternative to our LatexToUnicode class\n  */\n public class LatexToUnicodeAdapter {\n \n-    private static Pattern underscoreMatcher = Pattern.compile(\"_(?!\\\\{)\");\n+    private static final Pattern UNDERSCORE_MATCHER = Pattern.compile(\"_(?!\\\\{)\");\n \n-    private static String replacementChar = \"\\uFFFD\";\n+    private static final String REPLACEMENT_CHAR = \"\\uFFFD\";\n \n-    private static Pattern underscorePlaceholderMatcher = Pattern.compile(replacementChar);\n+    private static final Pattern UNDERSCORE_PLACEHOLDER_MATCHER = Pattern.compile(REPLACEMENT_CHAR);\n \n+    /**\n+     * Attempts to resolve all LaTeX in the String.\n+     *\n+     * @param inField a String containing LaTeX\n+     * @return a String with LaTeX resolved into Unicode, or the original String if the LaTeX could not be parsed\n+     */\n     public static String format(String inField) {\n         Objects.requireNonNull(inField);\n \n-        String toFormat = underscoreMatcher.matcher(inField).replaceAll(replacementChar);\n-        toFormat = Normalizer.normalize(LaTeX2Unicode.convert(toFormat), Normalizer.Form.NFC);\n-        return underscorePlaceholderMatcher.matcher(toFormat).replaceAll(\"_\");\n+        try {\n+            return parse(inField);\n+        } catch (IllegalArgumentException ignored) {\n+            return Normalizer.normalize(inField, Normalizer.Form.NFC);\n+        }\n+    }\n+\n+    /**\n+     * Attempts to resolve all LaTeX in the String.\n+     *\n+     * @param inField a String containing LaTeX\n+     * @return a String with LaTeX resolved into Unicode\n+     * @throws IllegalArgumentException if the LaTeX could not be parsed\n+     */\n+    public static String parse(String inField) throws IllegalArgumentException {\n+        Objects.requireNonNull(inField);\n+        String toFormat = UNDERSCORE_MATCHER.matcher(inField).replaceAll(REPLACEMENT_CHAR);\n+        try {\n+            var parsingResult = LaTeX2Unicode.parse(toFormat);\n+            if (parsingResult instanceof Parsed.Success) {\n+                String text = parsingResult.get().value();\n+                toFormat = Normalizer.normalize(text, Normalizer.Form.NFC);\n+                return UNDERSCORE_PLACEHOLDER_MATCHER.matcher(toFormat).replaceAll(\"_\");\n+            } else {\n+                throw new IllegalArgumentException(\"Parsing of latex failed.\");\n+            }\n+        } catch (Throwable throwable) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUxNDYyNQ=="}, "originalCommit": {"oid": "b7986b3bdf3beb4856eb6dd7405b356f212d141a"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUzNzQ3NA==", "bodyText": "Effective Java, Item 69:\nhttps://ahdak.github.io/blog/effective-java-part-9/\n\nExceptions are, as their name implies, to be used only for exceptional conditions; they should never be used for ordinary control flow. A well designed API must not force its clients to use exceptions for ordinary control flow.", "url": "https://github.com/JabRef/jabref/pull/7210#discussion_r547537474", "createdAt": "2020-12-22T22:28:08Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/model/strings/LatexToUnicodeAdapter.java", "diffHunk": "@@ -5,23 +5,56 @@\n import java.util.regex.Pattern;\n \n import com.github.tomtung.latex2unicode.LaTeX2Unicode;\n+import fastparse.core.Parsed;\n \n /**\n  * Adapter class for the latex2unicode lib. This is an alternative to our LatexToUnicode class\n  */\n public class LatexToUnicodeAdapter {\n \n-    private static Pattern underscoreMatcher = Pattern.compile(\"_(?!\\\\{)\");\n+    private static final Pattern UNDERSCORE_MATCHER = Pattern.compile(\"_(?!\\\\{)\");\n \n-    private static String replacementChar = \"\\uFFFD\";\n+    private static final String REPLACEMENT_CHAR = \"\\uFFFD\";\n \n-    private static Pattern underscorePlaceholderMatcher = Pattern.compile(replacementChar);\n+    private static final Pattern UNDERSCORE_PLACEHOLDER_MATCHER = Pattern.compile(REPLACEMENT_CHAR);\n \n+    /**\n+     * Attempts to resolve all LaTeX in the String.\n+     *\n+     * @param inField a String containing LaTeX\n+     * @return a String with LaTeX resolved into Unicode, or the original String if the LaTeX could not be parsed\n+     */\n     public static String format(String inField) {\n         Objects.requireNonNull(inField);\n \n-        String toFormat = underscoreMatcher.matcher(inField).replaceAll(replacementChar);\n-        toFormat = Normalizer.normalize(LaTeX2Unicode.convert(toFormat), Normalizer.Form.NFC);\n-        return underscorePlaceholderMatcher.matcher(toFormat).replaceAll(\"_\");\n+        try {\n+            return parse(inField);\n+        } catch (IllegalArgumentException ignored) {\n+            return Normalizer.normalize(inField, Normalizer.Form.NFC);\n+        }\n+    }\n+\n+    /**\n+     * Attempts to resolve all LaTeX in the String.\n+     *\n+     * @param inField a String containing LaTeX\n+     * @return a String with LaTeX resolved into Unicode\n+     * @throws IllegalArgumentException if the LaTeX could not be parsed\n+     */\n+    public static String parse(String inField) throws IllegalArgumentException {\n+        Objects.requireNonNull(inField);\n+        String toFormat = UNDERSCORE_MATCHER.matcher(inField).replaceAll(REPLACEMENT_CHAR);\n+        try {\n+            var parsingResult = LaTeX2Unicode.parse(toFormat);\n+            if (parsingResult instanceof Parsed.Success) {\n+                String text = parsingResult.get().value();\n+                toFormat = Normalizer.normalize(text, Normalizer.Form.NFC);\n+                return UNDERSCORE_PLACEHOLDER_MATCHER.matcher(toFormat).replaceAll(\"_\");\n+            } else {\n+                throw new IllegalArgumentException(\"Parsing of latex failed.\");\n+            }\n+        } catch (Throwable throwable) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUxNDYyNQ=="}, "originalCommit": {"oid": "b7986b3bdf3beb4856eb6dd7405b356f212d141a"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MjY0NzE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/model/strings/LatexToUnicodeAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMjoxMDozOFrOIKKp0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMjoxMDozOFrOIKKp0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUzMTIxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            return UNDERSCORE_PLACEHOLDER_MATCHER.matcher(toFormat).replaceAll(\"_\");\n          \n          \n            \n                            return Optional.of(UNDERSCORE_PLACEHOLDER_MATCHER.matcher(toFormat).replaceAll(\"_\"));", "url": "https://github.com/JabRef/jabref/pull/7210#discussion_r547531218", "createdAt": "2020-12-22T22:10:38Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/model/strings/LatexToUnicodeAdapter.java", "diffHunk": "@@ -5,23 +5,56 @@\n import java.util.regex.Pattern;\n \n import com.github.tomtung.latex2unicode.LaTeX2Unicode;\n+import fastparse.core.Parsed;\n \n /**\n  * Adapter class for the latex2unicode lib. This is an alternative to our LatexToUnicode class\n  */\n public class LatexToUnicodeAdapter {\n \n-    private static Pattern underscoreMatcher = Pattern.compile(\"_(?!\\\\{)\");\n+    private static final Pattern UNDERSCORE_MATCHER = Pattern.compile(\"_(?!\\\\{)\");\n \n-    private static String replacementChar = \"\\uFFFD\";\n+    private static final String REPLACEMENT_CHAR = \"\\uFFFD\";\n \n-    private static Pattern underscorePlaceholderMatcher = Pattern.compile(replacementChar);\n+    private static final Pattern UNDERSCORE_PLACEHOLDER_MATCHER = Pattern.compile(REPLACEMENT_CHAR);\n \n+    /**\n+     * Attempts to resolve all LaTeX in the String.\n+     *\n+     * @param inField a String containing LaTeX\n+     * @return a String with LaTeX resolved into Unicode, or the original String if the LaTeX could not be parsed\n+     */\n     public static String format(String inField) {\n         Objects.requireNonNull(inField);\n \n-        String toFormat = underscoreMatcher.matcher(inField).replaceAll(replacementChar);\n-        toFormat = Normalizer.normalize(LaTeX2Unicode.convert(toFormat), Normalizer.Form.NFC);\n-        return underscorePlaceholderMatcher.matcher(toFormat).replaceAll(\"_\");\n+        try {\n+            return parse(inField);\n+        } catch (IllegalArgumentException ignored) {\n+            return Normalizer.normalize(inField, Normalizer.Form.NFC);\n+        }\n+    }\n+\n+    /**\n+     * Attempts to resolve all LaTeX in the String.\n+     *\n+     * @param inField a String containing LaTeX\n+     * @return a String with LaTeX resolved into Unicode\n+     * @throws IllegalArgumentException if the LaTeX could not be parsed\n+     */\n+    public static String parse(String inField) throws IllegalArgumentException {\n+        Objects.requireNonNull(inField);\n+        String toFormat = UNDERSCORE_MATCHER.matcher(inField).replaceAll(REPLACEMENT_CHAR);\n+        try {\n+            var parsingResult = LaTeX2Unicode.parse(toFormat);\n+            if (parsingResult instanceof Parsed.Success) {\n+                String text = parsingResult.get().value();\n+                toFormat = Normalizer.normalize(text, Normalizer.Form.NFC);\n+                return UNDERSCORE_PLACEHOLDER_MATCHER.matcher(toFormat).replaceAll(\"_\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7986b3bdf3beb4856eb6dd7405b356f212d141a"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MjY0ODE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/model/strings/LatexToUnicodeAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMjoxMToxMFrOIKKqeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMjoxMToxMFrOIKKqeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUzMTM4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new IllegalArgumentException(\"Parsing of latex failed.\");\n          \n          \n            \n             return Optional.empty()", "url": "https://github.com/JabRef/jabref/pull/7210#discussion_r547531385", "createdAt": "2020-12-22T22:11:10Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/model/strings/LatexToUnicodeAdapter.java", "diffHunk": "@@ -5,23 +5,56 @@\n import java.util.regex.Pattern;\n \n import com.github.tomtung.latex2unicode.LaTeX2Unicode;\n+import fastparse.core.Parsed;\n \n /**\n  * Adapter class for the latex2unicode lib. This is an alternative to our LatexToUnicode class\n  */\n public class LatexToUnicodeAdapter {\n \n-    private static Pattern underscoreMatcher = Pattern.compile(\"_(?!\\\\{)\");\n+    private static final Pattern UNDERSCORE_MATCHER = Pattern.compile(\"_(?!\\\\{)\");\n \n-    private static String replacementChar = \"\\uFFFD\";\n+    private static final String REPLACEMENT_CHAR = \"\\uFFFD\";\n \n-    private static Pattern underscorePlaceholderMatcher = Pattern.compile(replacementChar);\n+    private static final Pattern UNDERSCORE_PLACEHOLDER_MATCHER = Pattern.compile(REPLACEMENT_CHAR);\n \n+    /**\n+     * Attempts to resolve all LaTeX in the String.\n+     *\n+     * @param inField a String containing LaTeX\n+     * @return a String with LaTeX resolved into Unicode, or the original String if the LaTeX could not be parsed\n+     */\n     public static String format(String inField) {\n         Objects.requireNonNull(inField);\n \n-        String toFormat = underscoreMatcher.matcher(inField).replaceAll(replacementChar);\n-        toFormat = Normalizer.normalize(LaTeX2Unicode.convert(toFormat), Normalizer.Form.NFC);\n-        return underscorePlaceholderMatcher.matcher(toFormat).replaceAll(\"_\");\n+        try {\n+            return parse(inField);\n+        } catch (IllegalArgumentException ignored) {\n+            return Normalizer.normalize(inField, Normalizer.Form.NFC);\n+        }\n+    }\n+\n+    /**\n+     * Attempts to resolve all LaTeX in the String.\n+     *\n+     * @param inField a String containing LaTeX\n+     * @return a String with LaTeX resolved into Unicode\n+     * @throws IllegalArgumentException if the LaTeX could not be parsed\n+     */\n+    public static String parse(String inField) throws IllegalArgumentException {\n+        Objects.requireNonNull(inField);\n+        String toFormat = UNDERSCORE_MATCHER.matcher(inField).replaceAll(REPLACEMENT_CHAR);\n+        try {\n+            var parsingResult = LaTeX2Unicode.parse(toFormat);\n+            if (parsingResult instanceof Parsed.Success) {\n+                String text = parsingResult.get().value();\n+                toFormat = Normalizer.normalize(text, Normalizer.Form.NFC);\n+                return UNDERSCORE_PLACEHOLDER_MATCHER.matcher(toFormat).replaceAll(\"_\");\n+            } else {\n+                throw new IllegalArgumentException(\"Parsing of latex failed.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7986b3bdf3beb4856eb6dd7405b356f212d141a"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MjY0ODk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/model/strings/LatexToUnicodeAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMjoxMToyNlrOIKKq6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMjoxMToyNlrOIKKq6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUzMTQ5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static String parse(String inField) throws IllegalArgumentException {\n          \n          \n            \n                public static Optional<String> parse(String inField) throws IllegalArgumentException {", "url": "https://github.com/JabRef/jabref/pull/7210#discussion_r547531496", "createdAt": "2020-12-22T22:11:26Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/model/strings/LatexToUnicodeAdapter.java", "diffHunk": "@@ -5,23 +5,56 @@\n import java.util.regex.Pattern;\n \n import com.github.tomtung.latex2unicode.LaTeX2Unicode;\n+import fastparse.core.Parsed;\n \n /**\n  * Adapter class for the latex2unicode lib. This is an alternative to our LatexToUnicode class\n  */\n public class LatexToUnicodeAdapter {\n \n-    private static Pattern underscoreMatcher = Pattern.compile(\"_(?!\\\\{)\");\n+    private static final Pattern UNDERSCORE_MATCHER = Pattern.compile(\"_(?!\\\\{)\");\n \n-    private static String replacementChar = \"\\uFFFD\";\n+    private static final String REPLACEMENT_CHAR = \"\\uFFFD\";\n \n-    private static Pattern underscorePlaceholderMatcher = Pattern.compile(replacementChar);\n+    private static final Pattern UNDERSCORE_PLACEHOLDER_MATCHER = Pattern.compile(REPLACEMENT_CHAR);\n \n+    /**\n+     * Attempts to resolve all LaTeX in the String.\n+     *\n+     * @param inField a String containing LaTeX\n+     * @return a String with LaTeX resolved into Unicode, or the original String if the LaTeX could not be parsed\n+     */\n     public static String format(String inField) {\n         Objects.requireNonNull(inField);\n \n-        String toFormat = underscoreMatcher.matcher(inField).replaceAll(replacementChar);\n-        toFormat = Normalizer.normalize(LaTeX2Unicode.convert(toFormat), Normalizer.Form.NFC);\n-        return underscorePlaceholderMatcher.matcher(toFormat).replaceAll(\"_\");\n+        try {\n+            return parse(inField);\n+        } catch (IllegalArgumentException ignored) {\n+            return Normalizer.normalize(inField, Normalizer.Form.NFC);\n+        }\n+    }\n+\n+    /**\n+     * Attempts to resolve all LaTeX in the String.\n+     *\n+     * @param inField a String containing LaTeX\n+     * @return a String with LaTeX resolved into Unicode\n+     * @throws IllegalArgumentException if the LaTeX could not be parsed\n+     */\n+    public static String parse(String inField) throws IllegalArgumentException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7986b3bdf3beb4856eb6dd7405b356f212d141a"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MjY1MTk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/model/strings/LatexToUnicodeAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMjoxMjoyN1rOIKKszQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMjoxMjoyN1rOIKKszQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUzMTk4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return parse(inField);\n          \n          \n            \n                        return parse(inField).orElse(Normalizer.normalize(inField, Normalizer.Form.NFC));\n          \n      \n    \n    \n  \n\nthat should work\nAnd you can also then get rid of the try catch block here", "url": "https://github.com/JabRef/jabref/pull/7210#discussion_r547531981", "createdAt": "2020-12-22T22:12:27Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/model/strings/LatexToUnicodeAdapter.java", "diffHunk": "@@ -5,23 +5,56 @@\n import java.util.regex.Pattern;\n \n import com.github.tomtung.latex2unicode.LaTeX2Unicode;\n+import fastparse.core.Parsed;\n \n /**\n  * Adapter class for the latex2unicode lib. This is an alternative to our LatexToUnicode class\n  */\n public class LatexToUnicodeAdapter {\n \n-    private static Pattern underscoreMatcher = Pattern.compile(\"_(?!\\\\{)\");\n+    private static final Pattern UNDERSCORE_MATCHER = Pattern.compile(\"_(?!\\\\{)\");\n \n-    private static String replacementChar = \"\\uFFFD\";\n+    private static final String REPLACEMENT_CHAR = \"\\uFFFD\";\n \n-    private static Pattern underscorePlaceholderMatcher = Pattern.compile(replacementChar);\n+    private static final Pattern UNDERSCORE_PLACEHOLDER_MATCHER = Pattern.compile(REPLACEMENT_CHAR);\n \n+    /**\n+     * Attempts to resolve all LaTeX in the String.\n+     *\n+     * @param inField a String containing LaTeX\n+     * @return a String with LaTeX resolved into Unicode, or the original String if the LaTeX could not be parsed\n+     */\n     public static String format(String inField) {\n         Objects.requireNonNull(inField);\n \n-        String toFormat = underscoreMatcher.matcher(inField).replaceAll(replacementChar);\n-        toFormat = Normalizer.normalize(LaTeX2Unicode.convert(toFormat), Normalizer.Form.NFC);\n-        return underscorePlaceholderMatcher.matcher(toFormat).replaceAll(\"_\");\n+        try {\n+            return parse(inField);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7986b3bdf3beb4856eb6dd7405b356f212d141a"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MjY5MTU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/model/strings/LatexToUnicodeAdapter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMjoyODo1M1rOIKLDPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwMDo0ODowOFrOIKNaSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUzNzcyNA==", "bodyText": "the try and catch can now be removed", "url": "https://github.com/JabRef/jabref/pull/7210#discussion_r547537724", "createdAt": "2020-12-22T22:28:53Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/model/strings/LatexToUnicodeAdapter.java", "diffHunk": "@@ -5,23 +5,56 @@\n import java.util.regex.Pattern;\n \n import com.github.tomtung.latex2unicode.LaTeX2Unicode;\n+import fastparse.core.Parsed;\n \n /**\n  * Adapter class for the latex2unicode lib. This is an alternative to our LatexToUnicode class\n  */\n public class LatexToUnicodeAdapter {\n \n-    private static Pattern underscoreMatcher = Pattern.compile(\"_(?!\\\\{)\");\n+    private static final Pattern UNDERSCORE_MATCHER = Pattern.compile(\"_(?!\\\\{)\");\n \n-    private static String replacementChar = \"\\uFFFD\";\n+    private static final String REPLACEMENT_CHAR = \"\\uFFFD\";\n \n-    private static Pattern underscorePlaceholderMatcher = Pattern.compile(replacementChar);\n+    private static final Pattern UNDERSCORE_PLACEHOLDER_MATCHER = Pattern.compile(REPLACEMENT_CHAR);\n \n+    /**\n+     * Attempts to resolve all LaTeX in the String.\n+     *\n+     * @param inField a String containing LaTeX\n+     * @return a String with LaTeX resolved into Unicode, or the original String if the LaTeX could not be parsed\n+     */\n     public static String format(String inField) {\n         Objects.requireNonNull(inField);\n \n-        String toFormat = underscoreMatcher.matcher(inField).replaceAll(replacementChar);\n-        toFormat = Normalizer.normalize(LaTeX2Unicode.convert(toFormat), Normalizer.Form.NFC);\n-        return underscorePlaceholderMatcher.matcher(toFormat).replaceAll(\"_\");\n+        try {\n+            return parse(inField).orElse(Normalizer.normalize(inField, Normalizer.Form.NFC));\n+        } catch (IllegalArgumentException ignored) {\n+            return Normalizer.normalize(inField, Normalizer.Form.NFC);\n+        }\n+    }\n+\n+    /**\n+     * Attempts to resolve all LaTeX in the String.\n+     *\n+     * @param inField a String containing LaTeX\n+     * @return a String with LaTeX resolved into Unicode\n+     * @throws IllegalArgumentException if the LaTeX could not be parsed\n+     */\n+    public static Optional<String> parse(String inField) throws IllegalArgumentException {\n+        Objects.requireNonNull(inField);\n+        String toFormat = UNDERSCORE_MATCHER.matcher(inField).replaceAll(REPLACEMENT_CHAR);\n+        try {\n+            var parsingResult = LaTeX2Unicode.parse(toFormat);\n+            if (parsingResult instanceof Parsed.Success) {\n+                String text = parsingResult.get().value();\n+                toFormat = Normalizer.normalize(text, Normalizer.Form.NFC);\n+                return Optional.of(UNDERSCORE_PLACEHOLDER_MATCHER.matcher(toFormat).replaceAll(\"_\"));\n+            } else {\n+ return Optional.empty()\n+            }\n+        } catch (Throwable throwable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e78e8b924ee72a919c4dfd27133260967cbf95f8"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU3NTQ2NQ==", "bodyText": "Wow, it literally took me 20 min to figure out what you meant \ud83e\udd21\nSure, I added the try-catch part based on https://github.com/tomtung/latex2unicode/blob/71979d6904fcf7efade786297983b881a1b019d4/src/main/scala/com/github/tomtung/latex2unicode/LaTeX2Unicode.scala#L143-L146\nand assumed it needed to be there #scala-scared \ud83d\ude2c", "url": "https://github.com/JabRef/jabref/pull/7210#discussion_r547575465", "createdAt": "2020-12-23T00:44:29Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/main/java/org/jabref/model/strings/LatexToUnicodeAdapter.java", "diffHunk": "@@ -5,23 +5,56 @@\n import java.util.regex.Pattern;\n \n import com.github.tomtung.latex2unicode.LaTeX2Unicode;\n+import fastparse.core.Parsed;\n \n /**\n  * Adapter class for the latex2unicode lib. This is an alternative to our LatexToUnicode class\n  */\n public class LatexToUnicodeAdapter {\n \n-    private static Pattern underscoreMatcher = Pattern.compile(\"_(?!\\\\{)\");\n+    private static final Pattern UNDERSCORE_MATCHER = Pattern.compile(\"_(?!\\\\{)\");\n \n-    private static String replacementChar = \"\\uFFFD\";\n+    private static final String REPLACEMENT_CHAR = \"\\uFFFD\";\n \n-    private static Pattern underscorePlaceholderMatcher = Pattern.compile(replacementChar);\n+    private static final Pattern UNDERSCORE_PLACEHOLDER_MATCHER = Pattern.compile(REPLACEMENT_CHAR);\n \n+    /**\n+     * Attempts to resolve all LaTeX in the String.\n+     *\n+     * @param inField a String containing LaTeX\n+     * @return a String with LaTeX resolved into Unicode, or the original String if the LaTeX could not be parsed\n+     */\n     public static String format(String inField) {\n         Objects.requireNonNull(inField);\n \n-        String toFormat = underscoreMatcher.matcher(inField).replaceAll(replacementChar);\n-        toFormat = Normalizer.normalize(LaTeX2Unicode.convert(toFormat), Normalizer.Form.NFC);\n-        return underscorePlaceholderMatcher.matcher(toFormat).replaceAll(\"_\");\n+        try {\n+            return parse(inField).orElse(Normalizer.normalize(inField, Normalizer.Form.NFC));\n+        } catch (IllegalArgumentException ignored) {\n+            return Normalizer.normalize(inField, Normalizer.Form.NFC);\n+        }\n+    }\n+\n+    /**\n+     * Attempts to resolve all LaTeX in the String.\n+     *\n+     * @param inField a String containing LaTeX\n+     * @return a String with LaTeX resolved into Unicode\n+     * @throws IllegalArgumentException if the LaTeX could not be parsed\n+     */\n+    public static Optional<String> parse(String inField) throws IllegalArgumentException {\n+        Objects.requireNonNull(inField);\n+        String toFormat = UNDERSCORE_MATCHER.matcher(inField).replaceAll(REPLACEMENT_CHAR);\n+        try {\n+            var parsingResult = LaTeX2Unicode.parse(toFormat);\n+            if (parsingResult instanceof Parsed.Success) {\n+                String text = parsingResult.get().value();\n+                toFormat = Normalizer.normalize(text, Normalizer.Form.NFC);\n+                return Optional.of(UNDERSCORE_PLACEHOLDER_MATCHER.matcher(toFormat).replaceAll(\"_\"));\n+            } else {\n+ return Optional.empty()\n+            }\n+        } catch (Throwable throwable) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUzNzcyNA=="}, "originalCommit": {"oid": "e78e8b924ee72a919c4dfd27133260967cbf95f8"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU3NjM5Mw==", "bodyText": "So much prettier \u2728 \ud83d\ude0d", "url": "https://github.com/JabRef/jabref/pull/7210#discussion_r547576393", "createdAt": "2020-12-23T00:48:08Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/main/java/org/jabref/model/strings/LatexToUnicodeAdapter.java", "diffHunk": "@@ -5,23 +5,56 @@\n import java.util.regex.Pattern;\n \n import com.github.tomtung.latex2unicode.LaTeX2Unicode;\n+import fastparse.core.Parsed;\n \n /**\n  * Adapter class for the latex2unicode lib. This is an alternative to our LatexToUnicode class\n  */\n public class LatexToUnicodeAdapter {\n \n-    private static Pattern underscoreMatcher = Pattern.compile(\"_(?!\\\\{)\");\n+    private static final Pattern UNDERSCORE_MATCHER = Pattern.compile(\"_(?!\\\\{)\");\n \n-    private static String replacementChar = \"\\uFFFD\";\n+    private static final String REPLACEMENT_CHAR = \"\\uFFFD\";\n \n-    private static Pattern underscorePlaceholderMatcher = Pattern.compile(replacementChar);\n+    private static final Pattern UNDERSCORE_PLACEHOLDER_MATCHER = Pattern.compile(REPLACEMENT_CHAR);\n \n+    /**\n+     * Attempts to resolve all LaTeX in the String.\n+     *\n+     * @param inField a String containing LaTeX\n+     * @return a String with LaTeX resolved into Unicode, or the original String if the LaTeX could not be parsed\n+     */\n     public static String format(String inField) {\n         Objects.requireNonNull(inField);\n \n-        String toFormat = underscoreMatcher.matcher(inField).replaceAll(replacementChar);\n-        toFormat = Normalizer.normalize(LaTeX2Unicode.convert(toFormat), Normalizer.Form.NFC);\n-        return underscorePlaceholderMatcher.matcher(toFormat).replaceAll(\"_\");\n+        try {\n+            return parse(inField).orElse(Normalizer.normalize(inField, Normalizer.Form.NFC));\n+        } catch (IllegalArgumentException ignored) {\n+            return Normalizer.normalize(inField, Normalizer.Form.NFC);\n+        }\n+    }\n+\n+    /**\n+     * Attempts to resolve all LaTeX in the String.\n+     *\n+     * @param inField a String containing LaTeX\n+     * @return a String with LaTeX resolved into Unicode\n+     * @throws IllegalArgumentException if the LaTeX could not be parsed\n+     */\n+    public static Optional<String> parse(String inField) throws IllegalArgumentException {\n+        Objects.requireNonNull(inField);\n+        String toFormat = UNDERSCORE_MATCHER.matcher(inField).replaceAll(REPLACEMENT_CHAR);\n+        try {\n+            var parsingResult = LaTeX2Unicode.parse(toFormat);\n+            if (parsingResult instanceof Parsed.Success) {\n+                String text = parsingResult.get().value();\n+                toFormat = Normalizer.normalize(text, Normalizer.Form.NFC);\n+                return Optional.of(UNDERSCORE_PLACEHOLDER_MATCHER.matcher(toFormat).replaceAll(\"_\"));\n+            } else {\n+ return Optional.empty()\n+            }\n+        } catch (Throwable throwable) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUzNzcyNA=="}, "originalCommit": {"oid": "e78e8b924ee72a919c4dfd27133260967cbf95f8"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2147, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}