{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgwMDgzMjE3", "number": 6872, "title": "Add multi-sentence title formatting to sentence case and title case", "bodyText": "Fixes #6759\nAdded support for multiple-sentence title formatting for the \"Sentence Case\" and \"Title Case\" options by using a regular expression to first split the input into sentences, and afterwards processing those sentences individually. A RegEx might not be the best choice for natural language processing but since most titles are only 1 sentence long, the proposed RegEx should cover the vast majority of cases. Also added additional test cases for Sentence Case and Title Case formatting. The old tests are assuming one sentence titles but are still applicable.\n\n Change in CHANGELOG.md described (if applicable)\n Tests created for changes (if applicable)\n Manually tested changed features in running JabRef (always required)\n Screenshots added in PR description (for UI changes)\n Checked documentation: Is the information available and up to date? If not created an issue at https://github.com/JabRef/user-documentation/issues or, even better, submitted a pull request to the documentation repository.", "createdAt": "2020-09-04T20:47:22Z", "url": "https://github.com/JabRef/jabref/pull/6872", "merged": true, "mergeCommit": {"oid": "9943074686818ca42688882be01b0e68de38d559"}, "closed": true, "closedAt": "2020-10-03T20:36:46Z", "author": {"login": "tmrd993"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdFrT68AH2gAyNDgwMDgzMjE3OmMyOWNmYjFlNThiYzQ1OWIyMzVmYmM5ZjlmZjQ3OTNiMWMxZGFjOGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdPAuNFAFqTUwMTU3Mjc0OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c29cfb1e58bc459b235fbc9f9ff4793b1c1dac8b", "author": {"user": {"login": "tmrd993", "name": "Timucin Merdin"}}, "url": "https://github.com/JabRef/jabref/commit/c29cfb1e58bc459b235fbc9f9ff4793b1c1dac8b", "committedDate": "2020-09-04T20:34:32Z", "message": "Add multi-sentence title formatting to sentence case and title case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2eaf1a5899b613e125ae15bfa3c6853d2921f6c", "author": {"user": {"login": "tmrd993", "name": "Timucin Merdin"}}, "url": "https://github.com/JabRef/jabref/commit/d2eaf1a5899b613e125ae15bfa3c6853d2921f6c", "committedDate": "2020-09-08T16:38:49Z", "message": "fix checkstyle issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMTkxNzY5", "url": "https://github.com/JabRef/jabref/pull/6872#pullrequestreview-492191769", "createdAt": "2020-09-20T12:22:19Z", "commit": {"oid": "d2eaf1a5899b613e125ae15bfa3c6853d2921f6c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQxMjoyMjoxOVrOHU6Jpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQxMzoyMzowMVrOHU6c6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY4NjMxMQ==", "bodyText": "I think, not everyone is aware of the meanings of sentence case or title case. Thus, I propose to add folling links:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Some entry titles are composed of multiple sentences, for example: \"Whose Music? A Sociology of Musical Language\", therefore, it is necessary to first split the title into sentences and process them individually to ensure proper formatting using 'Sentence Case' or 'Title Case'\n          \n          \n            \n            Some entry titles are composed of multiple sentences, for example: \"Whose Music? A Sociology of Musical Language\", therefore, it is necessary to first split the title into sentences and process them individually to ensure proper formatting using '[Sentence Case](https://en.wiktionary.org/wiki/sentence_case)' or '[Title Case](https://en.wiktionary.org/wiki/title_case#English)'", "url": "https://github.com/JabRef/jabref/pull/6872#discussion_r491686311", "createdAt": "2020-09-20T12:22:19Z", "author": {"login": "koppor"}, "path": "docs/adr/0017-use-regular-expression-to-split-multiple-sentence-titles.md", "diffHunk": "@@ -0,0 +1,26 @@\n+# Use regular expression to split multiple-sentence titles\n+\n+## Context and Problem Statement\n+\n+Some entry titles are composed of multiple sentences, for example: \"Whose Music? A Sociology of Musical Language\", therefore, it is necessary to first split the title into sentences and process them individually to ensure proper formatting using 'Sentence Case' or 'Title Case'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2eaf1a5899b613e125ae15bfa3c6853d2921f6c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY4Nzc3Ng==", "bodyText": "Here, the power of Java streams can be used: (then, one does not need the hack deleteCharAt.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<String> sentences = StringUtil.getStringAsSentences(input);\n          \n          \n            \n                    return StringUtil.getStringAsSentences(input)\n          \n          \n            \n                              .stream()\n          \n          \n            \n                              .map(sentence -> new LowerCaseFormatter().format(sentence))\n          \n          \n            \n                              .map(lowerCase -> new Title(lowerCase))\n          \n          \n            \n                              .map(title -> {\n          \n          \n            \n                                  title.getFirstWord().ifPresent(Word::toUpperFirst);\n          \n          \n            \n                                  return title;\n          \n          \n            \n                              })\n          \n          \n            \n                              .map(title -> title.toString())\n          \n          \n            \n                              .collect(Collectors.joining(\" \"));", "url": "https://github.com/JabRef/jabref/pull/6872#discussion_r491687776", "createdAt": "2020-09-20T12:39:48Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/formatter/casechanger/SentenceCaseFormatter.java", "diffHunk": "@@ -20,11 +23,17 @@ public String getKey() {\n      */\n     @Override\n     public String format(String input) {\n-        Title title = new Title(new LowerCaseFormatter().format(input));\n+        List<String> sentences = StringUtil.getStringAsSentences(input);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2eaf1a5899b613e125ae15bfa3c6853d2921f6c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY4NzgzOQ==", "bodyText": "This relies on the fact that toUpperFirst modifies the underlying object. This is a design of our Word class. It is OK for me now.", "url": "https://github.com/JabRef/jabref/pull/6872#discussion_r491687839", "createdAt": "2020-09-20T12:40:22Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/formatter/casechanger/SentenceCaseFormatter.java", "diffHunk": "@@ -20,11 +23,17 @@ public String getKey() {\n      */\n     @Override\n     public String format(String input) {\n-        Title title = new Title(new LowerCaseFormatter().format(input));\n+        List<String> sentences = StringUtil.getStringAsSentences(input);\n+        StringBuilder result = new StringBuilder();\n+        for (String sentence : sentences) {\n+            Title title = new Title(new LowerCaseFormatter().format(sentence));\n \n-        title.getWords().stream().findFirst().ifPresent(Word::toUpperFirst);\n+            title.getWords().stream().findFirst().ifPresent(Word::toUpperFirst);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2eaf1a5899b613e125ae15bfa3c6853d2921f6c"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY4ODA4Nw==", "bodyText": "Also stream magic here:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<String> sentences = StringUtil.getStringAsSentences(input);\n          \n          \n            \n                    return StringUtil\n          \n          \n            \n                            .getStringAsSentences(input)\n          \n          \n            \n                            .stream()\n          \n          \n            \n                            .map(sentence -> {\n          \n          \n            \n                                Title title = new Title(sentence);\n          \n          \n            \n                                title.getWords().stream().filter(Word::isSmallerWord).forEach(Word::toLowerCase);\n          \n          \n            \n                                title.getWords().stream().filter(Word::isLargerWord).forEach(Word::toUpperFirst);\n          \n          \n            \n            \n          \n          \n            \n                                title.getFirstWord().ifPresent(Word::toUpperFirst);\n          \n          \n            \n                                title.getLastWord().ifPresent(Word::toUpperFirst);\n          \n          \n            \n            \n          \n          \n            \n                                for (int i = 0; i < (title.getWords().size() - 2); i++) {\n          \n          \n            \n                                    if (title.getWords().get(i).endsWithColon()) {\n          \n          \n            \n                                        title.getWords().get(i + 1).toUpperFirst();\n          \n          \n            \n                                    }\n          \n          \n            \n                                }\n          \n          \n            \n                                return title.toString();\n          \n          \n            \n                            })\n          \n          \n            \n                            .collect(Collectors.joining(\" \"));", "url": "https://github.com/JabRef/jabref/pull/6872#discussion_r491688087", "createdAt": "2020-09-20T12:43:39Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/formatter/casechanger/TitleCaseFormatter.java", "diffHunk": "@@ -22,21 +25,26 @@ public String getKey() {\n      */\n     @Override\n     public String format(String input) {\n-        Title title = new Title(input);\n+        List<String> sentences = StringUtil.getStringAsSentences(input);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2eaf1a5899b613e125ae15bfa3c6853d2921f6c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY4ODkyOQ==", "bodyText": "Could yo add some comment on the Regex? I think, it is:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Pattern splitTextPattern = Pattern.compile(\"(?<=[\\\\.!;\\\\?])(?<![Mm][Rr]\\\\.|[Mm][Rr][Ss]\\\\.|[Dd][Rr]\\\\.|[Mm][Ss]\\\\.|[Ss][Tt]\\\\.|[Jj][Rr]\\\\.|[Cc][Oo]\\\\.|[Ii][Nn][Cc]\\\\.|[Ll][Tt][Dd]\\\\.)\\\\s+\");\n          \n          \n            \n                    // A sentence ends with a .?!;, but not in the case of \"Mr.\", \"Ms.\", \"Mrs.\", \"Dr.\", \"st.\", \"jr.\", \"co.\", \"inc.\", and \"ltd.\"\n          \n          \n            \n                    Pattern splitTextPattern = Pattern.compile(\"(?<=[\\\\.!;\\\\?])(?<![Mm][Rr]\\\\.|[Mm][Rr][Ss]\\\\.|[Dd][Rr]\\\\.|[Mm][Ss]\\\\.|[Ss][Tt]\\\\.|[Jj][Rr]\\\\.|[Cc][Oo]\\\\.|[Ii][Nn][Cc]\\\\.|[Ll][Tt][Dd]\\\\.)\\\\s+\");", "url": "https://github.com/JabRef/jabref/pull/6872#discussion_r491688929", "createdAt": "2020-09-20T12:54:30Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/model/strings/StringUtil.java", "diffHunk": "@@ -720,6 +720,14 @@ public static String capitalizeFirst(String toCapitalize) {\n         return Arrays.asList(text.split(\"[\\\\s,;]+\"));\n     }\n \n+    /**\n+     * Returns a list of sentences contained in the given text.\n+     */\n+    public static List<String> getStringAsSentences(String text) {\n+        Pattern splitTextPattern = Pattern.compile(\"(?<=[\\\\.!;\\\\?])(?<![Mm][Rr]\\\\.|[Mm][Rr][Ss]\\\\.|[Dd][Rr]\\\\.|[Mm][Ss]\\\\.|[Ss][Tt]\\\\.|[Jj][Rr]\\\\.|[Cc][Oo]\\\\.|[Ii][Nn][Cc]\\\\.|[Ll][Tt][Dd]\\\\.)\\\\s+\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2eaf1a5899b613e125ae15bfa3c6853d2921f6c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY4ODk2Mg==", "bodyText": "Please group mr, ms, and mrs together", "url": "https://github.com/JabRef/jabref/pull/6872#discussion_r491688962", "createdAt": "2020-09-20T12:54:47Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/model/strings/StringUtil.java", "diffHunk": "@@ -720,6 +720,14 @@ public static String capitalizeFirst(String toCapitalize) {\n         return Arrays.asList(text.split(\"[\\\\s,;]+\"));\n     }\n \n+    /**\n+     * Returns a list of sentences contained in the given text.\n+     */\n+    public static List<String> getStringAsSentences(String text) {\n+        Pattern splitTextPattern = Pattern.compile(\"(?<=[\\\\.!;\\\\?])(?<![Mm][Rr]\\\\.|[Mm][Rr][Ss]\\\\.|[Dd][Rr]\\\\.|[Mm][Ss]\\\\.|[Ss][Tt]\\\\.|[Jj][Rr]\\\\.|[Cc][Oo]\\\\.|[Ii][Nn][Cc]\\\\.|[Ll][Tt][Dd]\\\\.)\\\\s+\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY4ODkyOQ=="}, "originalCommit": {"oid": "d2eaf1a5899b613e125ae15bfa3c6853d2921f6c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY5MTI0Mw==", "bodyText": "While you are on it, I propose to rewrite to parameterized tests:\npackage org.jabref.logic.formatter.casechanger;\n\nimport java.util.stream.Stream;\n\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.Arguments;\nimport org.junit.jupiter.params.provider.MethodSource;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\n/**\n * Tests in addition to the general tests from {@link org.jabref.logic.formatter.FormatterTest}\n */\npublic class SentenceCaseFormatterTest {\n\n    private SentenceCaseFormatter formatter = new SentenceCaseFormatter();\n\n    private static Stream<Arguments> testData() {\n        return Stream.of(\n                Arguments.of(\"Upper first\", \"upper First\"),\n                Arguments.of(\"Upper first\", \"uPPER FIRST\"),\n                Arguments.of(\"Upper {NOT} first\", \"upper {NOT} FIRST\"),\n                Arguments.of(\"Upper {N}ot first\", \"upper {N}OT FIRST\"),\n                Arguments.of(\"Whose music? A sociology of musical language\",\n                        \"Whose music? a sociology of musical language\"),\n                Arguments.of(\"Bibliographic software. A comparison.\",\n                        \"bibliographic software. a comparison.\"),\n                Arguments.of(\"England\u2019s monitor; The history of the separation\",\n                        \"England\u2019s Monitor; the History of the Separation\"),\n                Arguments.of(\"Dr. schultz: a dentist turned bounty hunter.\",\n                        \"Dr. schultz: a dentist turned bounty hunter.\"),\n                Arguments.of(\"Example case. {EXCLUDED SENTENCE.}\",\n                        \"Example case. {EXCLUDED SENTENCE.}\"),\n                Arguments.of(\"I have {Aa} dream\", new SentenceCaseFormatter().getExampleInput())\n        );\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"testData\")\n    public void test(String expected, String input) {\n        assertEquals(expected, formatter.format(input));\n    }\n}\nOK, the descriptions are lost. Maybe, the description could be added as first paramter to the test method.", "url": "https://github.com/JabRef/jabref/pull/6872#discussion_r491691243", "createdAt": "2020-09-20T13:23:01Z", "author": {"login": "koppor"}, "path": "src/test/java/org/jabref/logic/formatter/casechanger/SentenceCaseFormatterTest.java", "diffHunk": "@@ -25,6 +25,36 @@ public void test() {\n         assertEquals(\"Upper {N}ot first\", formatter.format(\"upper {N}OT FIRST\"));\n     }\n \n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2eaf1a5899b613e125ae15bfa3c6853d2921f6c"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a9ff15e508caab4dce607bf652cf4ea6a855921", "author": {"user": {"login": "tmrd993", "name": "Timucin Merdin"}}, "url": "https://github.com/JabRef/jabref/commit/4a9ff15e508caab4dce607bf652cf4ea6a855921", "committedDate": "2020-09-21T14:46:37Z", "message": "refactor sentence case and title case format method, add additional info to ADR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "338e03afc2b10d909088b00154dbf51b0f8d676b", "author": {"user": {"login": "tmrd993", "name": "Timucin Merdin"}}, "url": "https://github.com/JabRef/jabref/commit/338e03afc2b10d909088b00154dbf51b0f8d676b", "committedDate": "2020-09-22T09:37:22Z", "message": "refactor titlecase and sentencecase tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9f05a93bf6cbf694a7b305bff3d4f833b812909", "author": {"user": {"login": "tmrd993", "name": "Timucin Merdin"}}, "url": "https://github.com/JabRef/jabref/commit/f9f05a93bf6cbf694a7b305bff3d4f833b812909", "committedDate": "2020-09-23T10:37:35Z", "message": "fix checkstyle issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "856c4a7a68d0be38f9f3b519415e14ccc4fa5160", "author": {"user": {"login": "tmrd993", "name": "Timucin Merdin"}}, "url": "https://github.com/JabRef/jabref/commit/856c4a7a68d0be38f9f3b519415e14ccc4fa5160", "committedDate": "2020-09-23T11:05:50Z", "message": "fix checkstyle issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0NjUyMDQ5", "url": "https://github.com/JabRef/jabref/pull/6872#pullrequestreview-494652049", "createdAt": "2020-09-23T13:21:12Z", "commit": {"oid": "856c4a7a68d0be38f9f3b519415e14ccc4fa5160"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzoyMToxMlrOHWtwFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzoyMToxMlrOHWtwFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU4MDMxMA==", "bodyText": "Is there a reason why these tests are commented out?", "url": "https://github.com/JabRef/jabref/pull/6872#discussion_r493580310", "createdAt": "2020-09-23T13:21:12Z", "author": {"login": "Siedlerchr"}, "path": "src/test/java/org/jabref/logic/formatter/casechanger/TitleCaseFormatterTest.java", "diffHunk": "@@ -10,8 +13,43 @@\n  */\n public class TitleCaseFormatterTest {\n \n-    private TitleCaseFormatter formatter;\n+    private final TitleCaseFormatter formatter = new TitleCaseFormatter();\n+\n+    private static Stream<Arguments> testData() {\n+        return Stream.of(\n+                Arguments.of(\"Upper Each First\", \"upper each first\"),\n+                Arguments.of(\"Upper Each First\", \"upper eACH first\"),\n+                Arguments.of(\"An Upper Each First And\", \"an upper each first and\"),\n+                Arguments.of(\"An Upper Each First And\", \"an upper each first AND\"),\n+                Arguments.of(\"An Upper Each of the and First And\",\n+                             \"an upper each of the and first and\"),\n+                Arguments.of(\"An Upper Each of the and First And\",\n+                             \"an upper each of the AND first and\"),\n+                Arguments.of(\"An Upper Each of: The and First And\",\n+                             \"an upper each of: the and first and\"),\n+                Arguments.of(\"An Upper First with and without {CURLY} {brackets}\",\n+                             \"AN UPPER FIRST WITH AND WITHOUT {CURLY} {brackets}\"),\n+                Arguments.of(\"An Upper First with {A}nd without {C}urly {b}rackets\",\n+                             \"AN UPPER FIRST WITH {A}ND WITHOUT {C}URLY {b}rackets\"),\n+                Arguments.of(\"{b}rackets {b}rac{K}ets Brack{E}ts\",\n+                             \"{b}RaCKeTS {b}RaC{K}eTS bRaCK{E}ts\"),\n+                Arguments.of(\"Two Experiences Designing for Effective Security\",\n+                             \"Two experiences designing for effective security\"),\n+                Arguments.of(\"Bibliographic Software. A Comparison.\",\n+                             \"bibliographic software. a comparison.\"),\n+                Arguments.of(\"Bibliographic Software. {A COMPARISON.}\",\n+                             \"bibliographic software. {A COMPARISON.}\"),\n+                Arguments.of(\"{BPMN} Conformance in Open Source Engines\",\n+                             new TitleCaseFormatter().getExampleInput()));\n+    }\n \n+    @ParameterizedTest\n+    @MethodSource(\"testData\")\n+    public void test(String expected, String input) {\n+        assertEquals(expected, formatter.format(input));\n+    }\n+\n+    /*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "856c4a7a68d0be38f9f3b519415e14ccc4fa5160"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9237d0743d1cfba6275bc5ac7fe1682231a98577", "author": {"user": {"login": "tmrd993", "name": "Timucin Merdin"}}, "url": "https://github.com/JabRef/jabref/commit/9237d0743d1cfba6275bc5ac7fe1682231a98577", "committedDate": "2020-09-23T15:55:00Z", "message": "remove redundant test cases"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0ODIyODEy", "url": "https://github.com/JabRef/jabref/pull/6872#pullrequestreview-494822812", "createdAt": "2020-09-23T16:08:22Z", "commit": {"oid": "9237d0743d1cfba6275bc5ac7fe1682231a98577"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNTcyNzQ4", "url": "https://github.com/JabRef/jabref/pull/6872#pullrequestreview-501572748", "createdAt": "2020-10-03T20:36:34Z", "commit": {"oid": "9237d0743d1cfba6275bc5ac7fe1682231a98577"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 160, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}