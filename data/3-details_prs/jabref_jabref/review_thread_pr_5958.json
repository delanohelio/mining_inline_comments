{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2ODkyOTU1", "number": 5958, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNzoyOToxNFrODg9shA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMDowNzoyNVrODhNFrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODkxODQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/edit/CopyMoreAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNzoyOToxNFrOFrdfUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNzoyOToxNFrOFrdfUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTExNjI0Mw==", "bodyText": "You should add a default case or checkstyle or so will complain", "url": "https://github.com/JabRef/jabref/pull/5958#discussion_r381116243", "createdAt": "2020-02-19T07:29:14Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/gui/edit/CopyMoreAction.java", "diffHunk": "@@ -0,0 +1,228 @@\n+package org.jabref.gui.edit;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.jabref.Globals;\n+import org.jabref.JabRefGUI;\n+import org.jabref.gui.ClipBoardManager;\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.JabRefDialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.actions.ActionHelper;\n+import org.jabref.gui.actions.SimpleCommand;\n+import org.jabref.gui.actions.StandardActions;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.logic.layout.Layout;\n+import org.jabref.logic.layout.LayoutHelper;\n+import org.jabref.logic.util.OS;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+import org.jabref.preferences.JabRefPreferences;\n+import org.jabref.preferences.PreferencesService;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class CopyMoreAction extends SimpleCommand {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CopyMoreAction.class);\n+    private StandardActions action;\n+    private DialogService dialogService;\n+    private StateManager stateManager;\n+    private final ClipBoardManager clipBoardManager;\n+    private PreferencesService preferencesService;\n+\n+    public CopyMoreAction(StandardActions action, DialogService dialogService, StateManager stateManager, ClipBoardManager clipBoardManager, PreferencesService preferencesService) {\n+        this.action = action;\n+        this.dialogService = dialogService;\n+        this.stateManager = stateManager;\n+        this.clipBoardManager = clipBoardManager;\n+        this.preferencesService = preferencesService;\n+\n+        this.executable.bind(ActionHelper.needsEntriesSelected(stateManager));\n+    }\n+\n+    @Override\n+    public void execute() {\n+        if (stateManager.getActiveDatabase().isEmpty() || stateManager.getSelectedEntries().isEmpty()) {\n+            return;\n+        }\n+\n+        if (!Arrays.asList(\n+                StandardActions.COPY_TITLE,\n+                StandardActions.COPY_KEY,\n+                StandardActions.COPY_CITE_KEY,\n+                StandardActions.COPY_KEY_AND_TITLE,\n+                StandardActions.COPY_KEY_AND_LINK)\n+                  .contains(action)) {\n+            return;\n+        }\n+\n+        switch (action) {\n+            case COPY_TITLE: copyTitle(); break;\n+            case COPY_KEY: copyKey(); break;\n+            case COPY_CITE_KEY: copyCiteKey(); break;\n+            case COPY_KEY_AND_TITLE: copyKeyAndTitle(); break;\n+            case COPY_KEY_AND_LINK: copyKeyAndLink(); break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b83d547af4ac0db3a4df350301c2a45487f81054"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODkxOTU0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/edit/CopyMoreAction.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNzoyOTo0OFrOFrdgAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoyOTo0NVrOFruN2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTExNjQxNw==", "bodyText": "Maybe a flatmap can be used?", "url": "https://github.com/JabRef/jabref/pull/5958#discussion_r381116417", "createdAt": "2020-02-19T07:29:48Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/gui/edit/CopyMoreAction.java", "diffHunk": "@@ -0,0 +1,228 @@\n+package org.jabref.gui.edit;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.jabref.Globals;\n+import org.jabref.JabRefGUI;\n+import org.jabref.gui.ClipBoardManager;\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.JabRefDialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.actions.ActionHelper;\n+import org.jabref.gui.actions.SimpleCommand;\n+import org.jabref.gui.actions.StandardActions;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.logic.layout.Layout;\n+import org.jabref.logic.layout.LayoutHelper;\n+import org.jabref.logic.util.OS;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+import org.jabref.preferences.JabRefPreferences;\n+import org.jabref.preferences.PreferencesService;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class CopyMoreAction extends SimpleCommand {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CopyMoreAction.class);\n+    private StandardActions action;\n+    private DialogService dialogService;\n+    private StateManager stateManager;\n+    private final ClipBoardManager clipBoardManager;\n+    private PreferencesService preferencesService;\n+\n+    public CopyMoreAction(StandardActions action, DialogService dialogService, StateManager stateManager, ClipBoardManager clipBoardManager, PreferencesService preferencesService) {\n+        this.action = action;\n+        this.dialogService = dialogService;\n+        this.stateManager = stateManager;\n+        this.clipBoardManager = clipBoardManager;\n+        this.preferencesService = preferencesService;\n+\n+        this.executable.bind(ActionHelper.needsEntriesSelected(stateManager));\n+    }\n+\n+    @Override\n+    public void execute() {\n+        if (stateManager.getActiveDatabase().isEmpty() || stateManager.getSelectedEntries().isEmpty()) {\n+            return;\n+        }\n+\n+        if (!Arrays.asList(\n+                StandardActions.COPY_TITLE,\n+                StandardActions.COPY_KEY,\n+                StandardActions.COPY_CITE_KEY,\n+                StandardActions.COPY_KEY_AND_TITLE,\n+                StandardActions.COPY_KEY_AND_LINK)\n+                  .contains(action)) {\n+            return;\n+        }\n+\n+        switch (action) {\n+            case COPY_TITLE: copyTitle(); break;\n+            case COPY_KEY: copyKey(); break;\n+            case COPY_CITE_KEY: copyCiteKey(); break;\n+            case COPY_KEY_AND_TITLE: copyKeyAndTitle(); break;\n+            case COPY_KEY_AND_LINK: copyKeyAndLink(); break;\n+        }\n+    }\n+\n+    private void copyTitle() {\n+        List<BibEntry> selectedBibEntries = stateManager.getSelectedEntries();\n+\n+        List<String> titles = selectedBibEntries.stream()\n+                                                .filter(bibEntry -> bibEntry.getTitle().isPresent())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b83d547af4ac0db3a4df350301c2a45487f81054"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4MTg0Mg==", "bodyText": "I think I do not understand, how? Can you give me a hint?", "url": "https://github.com/JabRef/jabref/pull/5958#discussion_r381381842", "createdAt": "2020-02-19T16:17:45Z", "author": {"login": "calixtus"}, "path": "src/main/java/org/jabref/gui/edit/CopyMoreAction.java", "diffHunk": "@@ -0,0 +1,228 @@\n+package org.jabref.gui.edit;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.jabref.Globals;\n+import org.jabref.JabRefGUI;\n+import org.jabref.gui.ClipBoardManager;\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.JabRefDialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.actions.ActionHelper;\n+import org.jabref.gui.actions.SimpleCommand;\n+import org.jabref.gui.actions.StandardActions;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.logic.layout.Layout;\n+import org.jabref.logic.layout.LayoutHelper;\n+import org.jabref.logic.util.OS;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+import org.jabref.preferences.JabRefPreferences;\n+import org.jabref.preferences.PreferencesService;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class CopyMoreAction extends SimpleCommand {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CopyMoreAction.class);\n+    private StandardActions action;\n+    private DialogService dialogService;\n+    private StateManager stateManager;\n+    private final ClipBoardManager clipBoardManager;\n+    private PreferencesService preferencesService;\n+\n+    public CopyMoreAction(StandardActions action, DialogService dialogService, StateManager stateManager, ClipBoardManager clipBoardManager, PreferencesService preferencesService) {\n+        this.action = action;\n+        this.dialogService = dialogService;\n+        this.stateManager = stateManager;\n+        this.clipBoardManager = clipBoardManager;\n+        this.preferencesService = preferencesService;\n+\n+        this.executable.bind(ActionHelper.needsEntriesSelected(stateManager));\n+    }\n+\n+    @Override\n+    public void execute() {\n+        if (stateManager.getActiveDatabase().isEmpty() || stateManager.getSelectedEntries().isEmpty()) {\n+            return;\n+        }\n+\n+        if (!Arrays.asList(\n+                StandardActions.COPY_TITLE,\n+                StandardActions.COPY_KEY,\n+                StandardActions.COPY_CITE_KEY,\n+                StandardActions.COPY_KEY_AND_TITLE,\n+                StandardActions.COPY_KEY_AND_LINK)\n+                  .contains(action)) {\n+            return;\n+        }\n+\n+        switch (action) {\n+            case COPY_TITLE: copyTitle(); break;\n+            case COPY_KEY: copyKey(); break;\n+            case COPY_CITE_KEY: copyCiteKey(); break;\n+            case COPY_KEY_AND_TITLE: copyKeyAndTitle(); break;\n+            case COPY_KEY_AND_LINK: copyKeyAndLink(); break;\n+        }\n+    }\n+\n+    private void copyTitle() {\n+        List<BibEntry> selectedBibEntries = stateManager.getSelectedEntries();\n+\n+        List<String> titles = selectedBibEntries.stream()\n+                                                .filter(bibEntry -> bibEntry.getTitle().isPresent())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTExNjQxNw=="}, "originalCommit": {"oid": "b83d547af4ac0db3a4df350301c2a45487f81054"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM5MDI5Ng==", "bodyText": "Think, it is OK as is.", "url": "https://github.com/JabRef/jabref/pull/5958#discussion_r381390296", "createdAt": "2020-02-19T16:29:45Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/gui/edit/CopyMoreAction.java", "diffHunk": "@@ -0,0 +1,228 @@\n+package org.jabref.gui.edit;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.jabref.Globals;\n+import org.jabref.JabRefGUI;\n+import org.jabref.gui.ClipBoardManager;\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.JabRefDialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.actions.ActionHelper;\n+import org.jabref.gui.actions.SimpleCommand;\n+import org.jabref.gui.actions.StandardActions;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.logic.layout.Layout;\n+import org.jabref.logic.layout.LayoutHelper;\n+import org.jabref.logic.util.OS;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+import org.jabref.preferences.JabRefPreferences;\n+import org.jabref.preferences.PreferencesService;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class CopyMoreAction extends SimpleCommand {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CopyMoreAction.class);\n+    private StandardActions action;\n+    private DialogService dialogService;\n+    private StateManager stateManager;\n+    private final ClipBoardManager clipBoardManager;\n+    private PreferencesService preferencesService;\n+\n+    public CopyMoreAction(StandardActions action, DialogService dialogService, StateManager stateManager, ClipBoardManager clipBoardManager, PreferencesService preferencesService) {\n+        this.action = action;\n+        this.dialogService = dialogService;\n+        this.stateManager = stateManager;\n+        this.clipBoardManager = clipBoardManager;\n+        this.preferencesService = preferencesService;\n+\n+        this.executable.bind(ActionHelper.needsEntriesSelected(stateManager));\n+    }\n+\n+    @Override\n+    public void execute() {\n+        if (stateManager.getActiveDatabase().isEmpty() || stateManager.getSelectedEntries().isEmpty()) {\n+            return;\n+        }\n+\n+        if (!Arrays.asList(\n+                StandardActions.COPY_TITLE,\n+                StandardActions.COPY_KEY,\n+                StandardActions.COPY_CITE_KEY,\n+                StandardActions.COPY_KEY_AND_TITLE,\n+                StandardActions.COPY_KEY_AND_LINK)\n+                  .contains(action)) {\n+            return;\n+        }\n+\n+        switch (action) {\n+            case COPY_TITLE: copyTitle(); break;\n+            case COPY_KEY: copyKey(); break;\n+            case COPY_CITE_KEY: copyCiteKey(); break;\n+            case COPY_KEY_AND_TITLE: copyKeyAndTitle(); break;\n+            case COPY_KEY_AND_LINK: copyKeyAndLink(); break;\n+        }\n+    }\n+\n+    private void copyTitle() {\n+        List<BibEntry> selectedBibEntries = stateManager.getSelectedEntries();\n+\n+        List<String> titles = selectedBibEntries.stream()\n+                                                .filter(bibEntry -> bibEntry.getTitle().isPresent())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTExNjQxNw=="}, "originalCommit": {"oid": "b83d547af4ac0db3a4df350301c2a45487f81054"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTM4NzAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/BasePanel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxOTo1MDoyOFrOFr1Vfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxOTo1MDoyOFrOFr1Vfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUwNjk0Mg==", "bodyText": "I think the old actions here can be completely removed", "url": "https://github.com/JabRef/jabref/pull/5958#discussion_r381506942", "createdAt": "2020-02-19T19:50:28Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/BasePanel.java", "diffHunk": "@@ -282,54 +260,41 @@ private void setupActions() {\n         // The action for cleaning up entry.\n         actions.put(Actions.CLEANUP, cleanUpAction);\n \n-        actions.put(Actions.MERGE_ENTRIES, () -> new MergeEntriesAction(frame, Globals.stateManager).execute());\n+        // actions.put(Actions.MERGE_ENTRIES, () -> new MergeEntriesAction(frame, Globals.stateManager).execute());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f922be3b638ac4e5c8da8ee3a5903beaa307c00a"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTQwNzE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/JabRefFrame.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxOTo1NjozM1rOFr1iJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMTo1NjoyOFrOFskhfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUxMDE4MQ==", "bodyText": "I'm afraid this does not work as the MergeEntriesAction is initialized with a given database (the base panel that was open when JabRef was started). Thus, even through the action is invoked from a different database it would merge entries in the original db. Hopefully it is enough to use the statemanger in MergeEntriesAction to get the current database.", "url": "https://github.com/JabRef/jabref/pull/5958#discussion_r381510181", "createdAt": "2020-02-19T19:56:33Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/JabRefFrame.java", "diffHunk": "@@ -748,7 +752,7 @@ private MenuBar createMenu() {\n \n         quality.getItems().addAll(\n                 factory.createMenuItem(StandardActions.FIND_DUPLICATES, new DuplicateSearch(this, dialogService, stateManager)),\n-                factory.createMenuItem(StandardActions.MERGE_ENTRIES, new MergeEntriesAction(this, stateManager)),\n+                factory.createMenuItem(StandardActions.MERGE_ENTRIES, new MergeEntriesAction(this.getCurrentBasePanel(), dialogService, stateManager)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f922be3b638ac4e5c8da8ee3a5903beaa307c00a"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk3OTI5Nw==", "bodyText": "I wonder if there is an architectural problem in BasePanel: BibDatabase::insertEntry does not contain logic to mark the BasePanel as changed and to mark entries with a timestamp, only BasePanel::insertEntry does.\nWould require some more refactoring. \ud83d\ude05", "url": "https://github.com/JabRef/jabref/pull/5958#discussion_r381979297", "createdAt": "2020-02-20T12:52:22Z", "author": {"login": "calixtus"}, "path": "src/main/java/org/jabref/gui/JabRefFrame.java", "diffHunk": "@@ -748,7 +752,7 @@ private MenuBar createMenu() {\n \n         quality.getItems().addAll(\n                 factory.createMenuItem(StandardActions.FIND_DUPLICATES, new DuplicateSearch(this, dialogService, stateManager)),\n-                factory.createMenuItem(StandardActions.MERGE_ENTRIES, new MergeEntriesAction(this, stateManager)),\n+                factory.createMenuItem(StandardActions.MERGE_ENTRIES, new MergeEntriesAction(this.getCurrentBasePanel(), dialogService, stateManager)),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUxMDE4MQ=="}, "originalCommit": {"oid": "f922be3b638ac4e5c8da8ee3a5903beaa307c00a"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk4NDAzNQ==", "bodyText": "I put a comment in the code about this issue, but this is something that would need a solution / decision before merging.", "url": "https://github.com/JabRef/jabref/pull/5958#discussion_r381984035", "createdAt": "2020-02-20T13:02:36Z", "author": {"login": "calixtus"}, "path": "src/main/java/org/jabref/gui/JabRefFrame.java", "diffHunk": "@@ -748,7 +752,7 @@ private MenuBar createMenu() {\n \n         quality.getItems().addAll(\n                 factory.createMenuItem(StandardActions.FIND_DUPLICATES, new DuplicateSearch(this, dialogService, stateManager)),\n-                factory.createMenuItem(StandardActions.MERGE_ENTRIES, new MergeEntriesAction(this, stateManager)),\n+                factory.createMenuItem(StandardActions.MERGE_ENTRIES, new MergeEntriesAction(this.getCurrentBasePanel(), dialogService, stateManager)),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUxMDE4MQ=="}, "originalCommit": {"oid": "f922be3b638ac4e5c8da8ee3a5903beaa307c00a"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI4MDA2Mw==", "bodyText": "Ahh yeah, the insertEntry needs refactoring indeed. For the moment, it should suffice to pass the jabref frame as a parameter to the action and then get the current base panel in the exectue method", "url": "https://github.com/JabRef/jabref/pull/5958#discussion_r382280063", "createdAt": "2020-02-20T21:56:28Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/JabRefFrame.java", "diffHunk": "@@ -748,7 +752,7 @@ private MenuBar createMenu() {\n \n         quality.getItems().addAll(\n                 factory.createMenuItem(StandardActions.FIND_DUPLICATES, new DuplicateSearch(this, dialogService, stateManager)),\n-                factory.createMenuItem(StandardActions.MERGE_ENTRIES, new MergeEntriesAction(this, stateManager)),\n+                factory.createMenuItem(StandardActions.MERGE_ENTRIES, new MergeEntriesAction(this.getCurrentBasePanel(), dialogService, stateManager)),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUxMDE4MQ=="}, "originalCommit": {"oid": "f922be3b638ac4e5c8da8ee3a5903beaa307c00a"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTQxMTg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/OpenConsoleAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxOTo1ODoxNVrOFr1lRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxOTo1ODoxNVrOFr1lRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUxMDk4MQ==", "bodyText": "Is this line here on purpose? It doesn't seem to make much sense as the action is not relative to the currently selected entry.", "url": "https://github.com/JabRef/jabref/pull/5958#discussion_r381510981", "createdAt": "2020-02-19T19:58:15Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/OpenConsoleAction.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package org.jabref.gui;\n+\n+import java.io.IOException;\n+\n+import org.jabref.gui.actions.ActionHelper;\n+import org.jabref.gui.actions.SimpleCommand;\n+import org.jabref.gui.desktop.JabRefDesktop;\n+import org.jabref.model.database.BibDatabaseContext;\n+import org.jabref.model.entry.field.StandardField;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class OpenConsoleAction extends SimpleCommand {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(OpenConsoleAction.class);\n+    private final StateManager stateManager;\n+\n+    public OpenConsoleAction(StateManager stateManager) {\n+        this.stateManager = stateManager;\n+\n+        this.executable.bind(ActionHelper.isFieldSetForSelectedEntry(StandardField.FILE, stateManager));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f922be3b638ac4e5c8da8ee3a5903beaa307c00a"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTQzMDIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/actions/ActionHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMDowMzo1OVrOFr1weg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMDowMzo1OVrOFr1weg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUxMzg1MA==", "bodyText": "I think entry.getFields().stream().anyMatch(fields::contains) is slightly better performance wise (as disjoint needs to check if all elements of fields are not contained in entry.getFields())", "url": "https://github.com/JabRef/jabref/pull/5958#discussion_r381513850", "createdAt": "2020-02-19T20:03:59Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/actions/ActionHelper.java", "diffHunk": "@@ -13,4 +18,22 @@ public static BooleanExpression needsDatabase(StateManager stateManager) {\n     public static BooleanExpression needsEntriesSelected(StateManager stateManager) {\n         return Bindings.isNotEmpty(stateManager.getSelectedEntries());\n     }\n+\n+    public static BooleanExpression needsEntriesSelected(int numberOfEntries, StateManager stateManager) {\n+        return Bindings.createBooleanBinding(\n+                () -> stateManager.getSelectedEntries().size() == numberOfEntries,\n+                stateManager.getSelectedEntries());\n+    }\n+\n+    public static BooleanExpression isFieldSetForSelectedEntry(Field field, StateManager stateManager) {\n+        return isAnyFieldSetForSelectedEntry(Collections.singletonList(field), stateManager);\n+    }\n+\n+    public static BooleanExpression isAnyFieldSetForSelectedEntry(List<Field> fields, StateManager stateManager) {\n+        BibEntry entry = stateManager.getSelectedEntries().get(0);\n+        return Bindings.createBooleanBinding(\n+                () -> !Collections.disjoint(fields, entry.getFields()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f922be3b638ac4e5c8da8ee3a5903beaa307c00a"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTQ0MDQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/maintable/OpenUrlAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMDowNzoyNVrOFr12tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMDowNzoyNVrOFr12tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUxNTQ0NQ==", "bodyText": "This can be written a bit more elegantly now using the isAnyFieldSet method, right?", "url": "https://github.com/JabRef/jabref/pull/5958#discussion_r381515445", "createdAt": "2020-02-19T20:07:25Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/maintable/OpenUrlAction.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.jabref.gui.maintable;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javafx.beans.binding.BooleanBinding;\n+\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.actions.ActionHelper;\n+import org.jabref.gui.actions.SimpleCommand;\n+import org.jabref.gui.desktop.JabRefDesktop;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.Field;\n+import org.jabref.model.entry.field.StandardField;\n+\n+public class OpenUrlAction extends SimpleCommand {\n+\n+    private final DialogService dialogService;\n+    private final StateManager stateManager;\n+\n+    public OpenUrlAction(DialogService dialogService, StateManager stateManager) {\n+        this.dialogService = dialogService;\n+        this.stateManager = stateManager;\n+\n+        BooleanBinding fieldIsSet = ActionHelper.isFieldSetForSelectedEntry(StandardField.URL, stateManager)\n+                                                .or(ActionHelper.isFieldSetForSelectedEntry(StandardField.DOI, stateManager)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f922be3b638ac4e5c8da8ee3a5903beaa307c00a"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2056, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}