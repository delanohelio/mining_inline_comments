{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM3MjU4NTE3", "number": 7178, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QyMjowNzozOFrOFEusYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOToxNDo1M1rOFFKOrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNTAzNjUwOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/jabref/logic/shared/DBMSProcessorTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QyMjowNzozOFrOIE6DVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QyMjozMDoyNlrOIE6T0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAxNjM0MA==", "bodyText": "Isn't this always an empty list (as expected entry is empty)?", "url": "https://github.com/JabRef/jabref/pull/7178#discussion_r542016340", "createdAt": "2020-12-13T22:07:38Z", "author": {"login": "tobiasdiez"}, "path": "src/test/java/org/jabref/logic/shared/DBMSProcessorTest.java", "diffHunk": "@@ -95,6 +95,37 @@ void testInsertEntry() throws SQLException {\n         assertEquals(expectedFieldMap, actualFieldMap);\n     }\n \n+    @Test\n+    void testInsertEntryWithEmptyFields() throws SQLException {\n+        BibEntry expectedEntry = new BibEntry(StandardEntryType.Article);\n+\n+        dbmsProcessor.insertEntry(expectedEntry);\n+\n+        BibEntry emptyEntry = getBibEntryExample();\n+        emptyEntry.getSharedBibEntryData().setSharedID(1);\n+        dbmsProcessor.insertEntry(emptyEntry); // does not insert, due to same sharedID.\n+\n+        Map<String, String> actualFieldMap = new HashMap<>();\n+\n+        try (ResultSet entryResultSet = selectFrom(\"ENTRY\", dbmsConnection, dbmsProcessor)) {\n+            assertTrue(entryResultSet.next());\n+            assertEquals(1, entryResultSet.getInt(\"SHARED_ID\"));\n+            assertEquals(\"article\", entryResultSet.getString(\"TYPE\"));\n+            assertEquals(1, entryResultSet.getInt(\"VERSION\"));\n+            assertFalse(entryResultSet.next());\n+\n+            try (ResultSet fieldResultSet = selectFrom(\"FIELD\", dbmsConnection, dbmsProcessor)) {\n+                while (fieldResultSet.next()) {\n+                    actualFieldMap.put(fieldResultSet.getString(\"NAME\"), fieldResultSet.getString(\"VALUE\"));\n+                }\n+            }\n+        }\n+\n+        Map<String, String> expectedFieldMap = expectedEntry.getFieldMap().entrySet().stream().collect(Collectors.toMap((entry) -> entry.getKey().getName(), Map.Entry::getValue));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "503670a7193e0835ed9318fff53cbc252aa7661f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAxODY5Mw==", "bodyText": "Hm, seems like I need to adapt the queries a bit. Didn't think about this,\nI should check for the shared entry id to be present.", "url": "https://github.com/JabRef/jabref/pull/7178#discussion_r542018693", "createdAt": "2020-12-13T22:20:52Z", "author": {"login": "Siedlerchr"}, "path": "src/test/java/org/jabref/logic/shared/DBMSProcessorTest.java", "diffHunk": "@@ -95,6 +95,37 @@ void testInsertEntry() throws SQLException {\n         assertEquals(expectedFieldMap, actualFieldMap);\n     }\n \n+    @Test\n+    void testInsertEntryWithEmptyFields() throws SQLException {\n+        BibEntry expectedEntry = new BibEntry(StandardEntryType.Article);\n+\n+        dbmsProcessor.insertEntry(expectedEntry);\n+\n+        BibEntry emptyEntry = getBibEntryExample();\n+        emptyEntry.getSharedBibEntryData().setSharedID(1);\n+        dbmsProcessor.insertEntry(emptyEntry); // does not insert, due to same sharedID.\n+\n+        Map<String, String> actualFieldMap = new HashMap<>();\n+\n+        try (ResultSet entryResultSet = selectFrom(\"ENTRY\", dbmsConnection, dbmsProcessor)) {\n+            assertTrue(entryResultSet.next());\n+            assertEquals(1, entryResultSet.getInt(\"SHARED_ID\"));\n+            assertEquals(\"article\", entryResultSet.getString(\"TYPE\"));\n+            assertEquals(1, entryResultSet.getInt(\"VERSION\"));\n+            assertFalse(entryResultSet.next());\n+\n+            try (ResultSet fieldResultSet = selectFrom(\"FIELD\", dbmsConnection, dbmsProcessor)) {\n+                while (fieldResultSet.next()) {\n+                    actualFieldMap.put(fieldResultSet.getString(\"NAME\"), fieldResultSet.getString(\"VALUE\"));\n+                }\n+            }\n+        }\n+\n+        Map<String, String> expectedFieldMap = expectedEntry.getFieldMap().entrySet().stream().collect(Collectors.toMap((entry) -> entry.getKey().getName(), Map.Entry::getValue));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAxNjM0MA=="}, "originalCommit": {"oid": "503670a7193e0835ed9318fff53cbc252aa7661f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAyMDU2MQ==", "bodyText": "To be honest, I've no idea what the test is doing. You add an empty entry, then some other completely unrelated entry, and then compare against the empty entry again.", "url": "https://github.com/JabRef/jabref/pull/7178#discussion_r542020561", "createdAt": "2020-12-13T22:30:26Z", "author": {"login": "tobiasdiez"}, "path": "src/test/java/org/jabref/logic/shared/DBMSProcessorTest.java", "diffHunk": "@@ -95,6 +95,37 @@ void testInsertEntry() throws SQLException {\n         assertEquals(expectedFieldMap, actualFieldMap);\n     }\n \n+    @Test\n+    void testInsertEntryWithEmptyFields() throws SQLException {\n+        BibEntry expectedEntry = new BibEntry(StandardEntryType.Article);\n+\n+        dbmsProcessor.insertEntry(expectedEntry);\n+\n+        BibEntry emptyEntry = getBibEntryExample();\n+        emptyEntry.getSharedBibEntryData().setSharedID(1);\n+        dbmsProcessor.insertEntry(emptyEntry); // does not insert, due to same sharedID.\n+\n+        Map<String, String> actualFieldMap = new HashMap<>();\n+\n+        try (ResultSet entryResultSet = selectFrom(\"ENTRY\", dbmsConnection, dbmsProcessor)) {\n+            assertTrue(entryResultSet.next());\n+            assertEquals(1, entryResultSet.getInt(\"SHARED_ID\"));\n+            assertEquals(\"article\", entryResultSet.getString(\"TYPE\"));\n+            assertEquals(1, entryResultSet.getInt(\"VERSION\"));\n+            assertFalse(entryResultSet.next());\n+\n+            try (ResultSet fieldResultSet = selectFrom(\"FIELD\", dbmsConnection, dbmsProcessor)) {\n+                while (fieldResultSet.next()) {\n+                    actualFieldMap.put(fieldResultSet.getString(\"NAME\"), fieldResultSet.getString(\"VALUE\"));\n+                }\n+            }\n+        }\n+\n+        Map<String, String> expectedFieldMap = expectedEntry.getFieldMap().entrySet().stream().collect(Collectors.toMap((entry) -> entry.getKey().getName(), Map.Entry::getValue));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAxNjM0MA=="}, "originalCommit": {"oid": "503670a7193e0835ed9318fff53cbc252aa7661f"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNTAzNzk4OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/jabref/logic/shared/DBMSProcessorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QyMjowODo0MFrOIE6D_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QyMjowODo0MFrOIE6D_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAxNjUwOA==", "bodyText": "why is this then necessary?", "url": "https://github.com/JabRef/jabref/pull/7178#discussion_r542016508", "createdAt": "2020-12-13T22:08:40Z", "author": {"login": "tobiasdiez"}, "path": "src/test/java/org/jabref/logic/shared/DBMSProcessorTest.java", "diffHunk": "@@ -95,6 +95,37 @@ void testInsertEntry() throws SQLException {\n         assertEquals(expectedFieldMap, actualFieldMap);\n     }\n \n+    @Test\n+    void testInsertEntryWithEmptyFields() throws SQLException {\n+        BibEntry expectedEntry = new BibEntry(StandardEntryType.Article);\n+\n+        dbmsProcessor.insertEntry(expectedEntry);\n+\n+        BibEntry emptyEntry = getBibEntryExample();\n+        emptyEntry.getSharedBibEntryData().setSharedID(1);\n+        dbmsProcessor.insertEntry(emptyEntry); // does not insert, due to same sharedID.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "503670a7193e0835ed9318fff53cbc252aa7661f"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTU0Nzk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/shared/DBMSProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOToxNDo1M1rOIFhwkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOToxNDo1M1rOIFhwkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY2Njg5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                         .append(\" left outer join \")\n          \n          \n            \n                         // Handle special case if entry does not have any fields (yet)\n          \n          \n            \n                         .append(\" left outer join \")", "url": "https://github.com/JabRef/jabref/pull/7178#discussion_r542666898", "createdAt": "2020-12-14T19:14:53Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/shared/DBMSProcessor.java", "diffHunk": "@@ -493,7 +499,7 @@ public void removeEntries(List<BibEntry> bibEntries) {\n              .append(\"F.\").append(escape(\"VALUE\"))\n              .append(\" FROM \")\n              .append(escape(\"ENTRY\"))\n-             .append(\" inner join \")\n+             .append(\" left outer join \")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33f11a64c8aaf5248a334c9a61d4df49a92cf4e0"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2130, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}