{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwNDQ2NTI2", "number": 6641, "title": "mEDRA DOI fetcher implementation.", "bodyText": "fixes #6602\nI added the possibility to retrieve DOI metadata from mEDRA agency .\nSome DOIs return 500 code even if they are correctly registered at mEDRA. I'm waiting for the mEDRA team to answer on that.\n\n Change in CHANGELOG.md described (if applicable)\n Tests created for changes (if applicable)\n Manually tested changed features in running JabRef (always required)\n Screenshots added in PR description (for UI changes)\n Checked documentation: Is the information available and up to date? If not created an issue at https://github.com/JabRef/user-documentation/issues or, even better, submitted a pull request to the documentation repository.", "createdAt": "2020-06-26T08:14:03Z", "url": "https://github.com/JabRef/jabref/pull/6641", "merged": true, "mergeCommit": {"oid": "20e78a4959bb2ccc0155f3a2cd4bf107c7c11352"}, "closed": true, "closedAt": "2020-07-09T09:48:41Z", "author": {"login": "mind000"}, "timelineItems": {"totalCount": 38, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcu-jLOAH2gAyNDQwNDQ2NTI2OjJkNzVkYTI4NGNmOTQzMWIxNGEzOGE4Mzk5ZDAzMzdkNzBjN2JmZWU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABczL5xugH2gAyNDQwNDQ2NTI2OjE3OTM4NzA5OTQyYjQxM2E0ODRkNWFhZWM3MTliNjE1NGZmNTk2YWY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2d75da284cf9431b14a38a8399d0337d70c7bfee", "author": {"user": {"login": "mind000", "name": "Giovanni Caldarola"}}, "url": "https://github.com/JabRef/jabref/commit/2d75da284cf9431b14a38a8399d0337d70c7bfee", "committedDate": "2020-06-26T07:59:08Z", "message": "mEDRA DOI fetcher implementation."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MTE5NTk2", "url": "https://github.com/JabRef/jabref/pull/6641#pullrequestreview-438119596", "createdAt": "2020-06-26T08:43:46Z", "commit": {"oid": "2d75da284cf9431b14a38a8399d0337d70c7bfee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwODo0Mzo0NlrOGpYzCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwODo0Mzo0NlrOGpYzCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA1MTA4MQ==", "bodyText": "Why don't you use the application/x-bibtex header as for the other DOI fetcher well? That would make fetching a lot easier!", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r446051081", "createdAt": "2020-06-26T08:43:46Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/logic/net/URLDownload.java", "diffHunk": "@@ -81,6 +82,11 @@ public URLDownload(String source) throws MalformedURLException {\n     public URLDownload(URL source) {\n         this.source = source;\n         this.addHeader(\"User-Agent\", URLDownload.USER_AGENT);\n+\n+        // mEDRA requires Accept header attribute with desired content type\n+        if (source.toString().contains(Medra.API_URL)) {\n+            this.addHeader(\"Accept\", Medra.CONTENT_TYPE_JSON);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d75da284cf9431b14a38a8399d0337d70c7bfee"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MTIwMDI3", "url": "https://github.com/JabRef/jabref/pull/6641#pullrequestreview-438120027", "createdAt": "2020-06-26T08:44:22Z", "commit": {"oid": "2d75da284cf9431b14a38a8399d0337d70c7bfee"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df31be7b9ef6f88116c7ac387e976db437cfbe66", "author": {"user": {"login": "mind000", "name": "Giovanni Caldarola"}}, "url": "https://github.com/JabRef/jabref/commit/df31be7b9ef6f88116c7ac387e976db437cfbe66", "committedDate": "2020-06-28T20:32:42Z", "message": "mEDRA DOI fetcher implementation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4ODEzODYy", "url": "https://github.com/JabRef/jabref/pull/6641#pullrequestreview-438813862", "createdAt": "2020-06-28T21:16:24Z", "commit": {"oid": "df31be7b9ef6f88116c7ac387e976db437cfbe66"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQyMToxNjoyNFrOGqAWvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQyMToxNjoyNFrOGqAWvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY5OTE5OQ==", "bodyText": "You should wrap the stream in a Try With Resources Statement to make sure that the stream gets closed automatically on errors. And also please rename \"b\" to a more meaningful variable, e.g. readByte\nhttps://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r446699199", "createdAt": "2020-06-28T21:16:24Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/logic/importer/SearchBasedParserFetcher.java", "diffHunk": "@@ -68,10 +70,19 @@ default URLDownload getUrlDownload(String query) throws MalformedURLException, F\n         }\n \n         try (InputStream stream = getUrlDownload(query).asInputStream()) {\n-            List<BibEntry> fetchedEntries = getParser().parseEntries(stream);\n+            List<BibEntry> fetchedEntries = new ArrayList<>();\n \n-            // Post-cleanup\n-            fetchedEntries.forEach(this::doPostCleanup);\n+            // check if there is anything to read since mEDRA '404 not found' returns nothing\n+            PushbackInputStream pushbackInputStream = new PushbackInputStream(stream);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df31be7b9ef6f88116c7ac387e976db437cfbe66"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b521e7c2ca289925f3b0b0bd8168f27784722339", "author": {"user": {"login": "mind000", "name": "Giovanni Caldarola"}}, "url": "https://github.com/JabRef/jabref/commit/b521e7c2ca289925f3b0b0bd8168f27784722339", "committedDate": "2020-06-30T07:52:17Z", "message": "mEDRA DOI fetcher implementation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5ODY5ODc4", "url": "https://github.com/JabRef/jabref/pull/6641#pullrequestreview-439869878", "createdAt": "2020-06-30T10:10:12Z", "commit": {"oid": "b521e7c2ca289925f3b0b0bd8168f27784722339"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMDoxMDoxMlrOGq1g_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMDoxMDoxMlrOGq1g_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU3MDE3NA==", "bodyText": "We try to avoid null. Instead you can use Optionals.\nhttps://blog.indrek.io/articles/optionals-in-java-8/", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r447570174", "createdAt": "2020-06-30T10:10:12Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/logic/importer/fetcher/DoiFetcher.java", "diffHunk": "@@ -84,4 +100,22 @@ private void doPostCleanup(BibEntry entry) {\n             return Collections.emptyList();\n         }\n     }\n+\n+    /**\n+     * Returns registration agency. Null if no agency is found.\n+     *\n+     * @param doi the doi to be searched\n+     * @throws JSONException\n+     * @throws IOException\n+     */\n+    public String getAgency(DOI doi) throws JSONException, IOException {\n+        String agency = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b521e7c2ca289925f3b0b0bd8168f27784722339"}, "originalPosition": 70}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "353907949014fde2110f0f7574ff983213511ee7", "author": {"user": {"login": "mind000", "name": "Giovanni Caldarola"}}, "url": "https://github.com/JabRef/jabref/commit/353907949014fde2110f0f7574ff983213511ee7", "committedDate": "2020-06-30T19:44:11Z", "message": "mEDRA DOI fetcher implementation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNjI3NTI2", "url": "https://github.com/JabRef/jabref/pull/6641#pullrequestreview-440627526", "createdAt": "2020-07-01T07:50:22Z", "commit": {"oid": "353907949014fde2110f0f7574ff983213511ee7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNzo1MDoyM1rOGrazPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNzo1MDoyM1rOGrazPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE4MTA1Mw==", "bodyText": "Do you really need the SearchBasedParserFetcher interface?\nI think this is superflous. The IDBasedFetcher should be sufficient", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r448181053", "createdAt": "2020-07-01T07:50:23Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/logic/importer/fetcher/Medra.java", "diffHunk": "@@ -0,0 +1,182 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.PushbackInputStream;\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.jabref.logic.importer.FetcherException;\n+import org.jabref.logic.importer.IdBasedParserFetcher;\n+import org.jabref.logic.importer.ParseException;\n+import org.jabref.logic.importer.Parser;\n+import org.jabref.logic.importer.SearchBasedParserFetcher;\n+import org.jabref.logic.importer.util.JsonReader;\n+import org.jabref.logic.importer.util.MediaTypes;\n+import org.jabref.logic.net.URLDownload;\n+import org.jabref.model.entry.AuthorList;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+import org.jabref.model.entry.types.EntryType;\n+import org.jabref.model.entry.types.StandardEntryType;\n+import kong.unirest.json.JSONArray;\n+import kong.unirest.json.JSONException;\n+import kong.unirest.json.JSONObject;\n+import org.apache.http.client.utils.URIBuilder;\n+\n+/**\n+ * A class for fetching DOIs from Medra\n+ *\n+ * @see <a href=\"https://data.medra.org\">mEDRA Content Negotiation API</a> for an overview of the API\n+ * <p>\n+ * It requires \"Accept\" request Header attribute to be set to desired content-type.\n+ */\n+public class Medra implements SearchBasedParserFetcher, IdBasedParserFetcher {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "353907949014fde2110f0f7574ff983213511ee7"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b78fd56f1865e252350ad40c97d5dca0b271cf8", "author": {"user": {"login": "mind000", "name": "Giovanni Caldarola"}}, "url": "https://github.com/JabRef/jabref/commit/1b78fd56f1865e252350ad40c97d5dca0b271cf8", "committedDate": "2020-07-01T11:10:03Z", "message": "mEDRA DOI fetcher implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81d5cc395b8704e17015659ec9d1b3065922ecc9", "author": {"user": {"login": "mind000", "name": "Giovanni Caldarola"}}, "url": "https://github.com/JabRef/jabref/commit/81d5cc395b8704e17015659ec9d1b3065922ecc9", "committedDate": "2020-07-01T12:17:58Z", "message": "Merge branch 'master' into medra-fetcher"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51423cb4a8bb0ac98426521615ee493bac765efd", "author": {"user": {"login": "mind000", "name": "Giovanni Caldarola"}}, "url": "https://github.com/JabRef/jabref/commit/51423cb4a8bb0ac98426521615ee493bac765efd", "committedDate": "2020-07-01T14:05:32Z", "message": "mEDRA DOI fetcher implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a42904c6584d76c14b96b5566131b6511c1aa1a3", "author": {"user": {"login": "mind000", "name": "Giovanni Caldarola"}}, "url": "https://github.com/JabRef/jabref/commit/a42904c6584d76c14b96b5566131b6511c1aa1a3", "committedDate": "2020-07-01T14:24:19Z", "message": "mEDRA DOI fetcher implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0a329f08c86d457f59f13f2ea61baebd7dfab31", "author": {"user": {"login": "mind000", "name": "Giovanni Caldarola"}}, "url": "https://github.com/JabRef/jabref/commit/c0a329f08c86d457f59f13f2ea61baebd7dfab31", "committedDate": "2020-07-01T14:25:58Z", "message": "mEDRA DOI fetcher implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85fc98f2305cb4c32074270bd3f1ef1d6adb216b", "author": {"user": {"login": "mind000", "name": "Giovanni Caldarola"}}, "url": "https://github.com/JabRef/jabref/commit/85fc98f2305cb4c32074270bd3f1ef1d6adb216b", "committedDate": "2020-07-01T14:38:57Z", "message": "Merge branch 'medra-fetcher' of https://github.com/mind000/jabref into\nmedra-fetcher\n# Please enter a commit message to explain why this merge is necessary,\n# especially if it merges an updated upstream into a topic branch.\n#\n# Lines starting with '#' will be ignored, and an empty message aborts\n# the commit."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ede4acfd414f9acabeaf54d645d74f6f0a0843e", "author": {"user": {"login": "mind000", "name": "Giovanni Caldarola"}}, "url": "https://github.com/JabRef/jabref/commit/2ede4acfd414f9acabeaf54d645d74f6f0a0843e", "committedDate": "2020-07-01T14:55:23Z", "message": "mEDRA DOI fetcher implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1089743739ddf9a1df58018028ab90e7267088b", "author": {"user": {"login": "mind000", "name": "Giovanni Caldarola"}}, "url": "https://github.com/JabRef/jabref/commit/a1089743739ddf9a1df58018028ab90e7267088b", "committedDate": "2020-07-01T15:07:12Z", "message": "mEDRA DOI fetcher implementation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwOTY2MjQ3", "url": "https://github.com/JabRef/jabref/pull/6641#pullrequestreview-440966247", "createdAt": "2020-07-01T15:16:05Z", "commit": {"oid": "a1089743739ddf9a1df58018028ab90e7267088b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f96aab62293ecc52a5383c1fb33a9510f06370e", "author": {"user": {"login": "koppor", "name": "Oliver Kopp"}}, "url": "https://github.com/JabRef/jabref/commit/4f96aab62293ecc52a5383c1fb33a9510f06370e", "committedDate": "2020-07-01T21:08:15Z", "message": "Revert wrong merge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4cfc672b6616a456e2c467b5a74f4ec3c807982f", "author": {"user": {"login": "koppor", "name": "Oliver Kopp"}}, "url": "https://github.com/JabRef/jabref/commit/4cfc672b6616a456e2c467b5a74f4ec3c807982f", "committedDate": "2020-07-01T21:08:20Z", "message": "Merge remote-tracking branch 'origin/master' into fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMTk5Nzk0", "url": "https://github.com/JabRef/jabref/pull/6641#pullrequestreview-441199794", "createdAt": "2020-07-01T21:11:55Z", "commit": {"oid": "4cfc672b6616a456e2c467b5a74f4ec3c807982f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMToxMTo1NlrOGr1gNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMToyNzo0M1rOGr17Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxODU1MA==", "bodyText": "This calls for discussing good and bad deisgn. - Why should a general class handle special cases of a sub clasS?\nThe mEDRA getUrlDownload should provide a proper stream. We will see it below.\nFirst idea: It can be wrapped into a BufferedStream and checked if there is something and reset if everythign is OK. If not, an empty stream should be returend, which should lead to an empty list of bib entries, doesn't it?", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r448618550", "createdAt": "2020-07-01T21:11:56Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/importer/SearchBasedParserFetcher.java", "diffHunk": "@@ -68,10 +70,19 @@ default URLDownload getUrlDownload(String query) throws MalformedURLException, F\n         }\n \n         try (InputStream stream = getUrlDownload(query).asInputStream()) {\n-            List<BibEntry> fetchedEntries = getParser().parseEntries(stream);\n+            List<BibEntry> fetchedEntries = new ArrayList<>();\n \n-            // Post-cleanup\n-            fetchedEntries.forEach(this::doPostCleanup);\n+            // check if there is anything to read since mEDRA '404 not found' returns nothing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cfc672b6616a456e2c467b5a74f4ec3c807982f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxOTYxMQ==", "bodyText": "There is .orElseThrow(...) in optionals. Rewriting is difficult here. And it was like that before you touched the code, so no importance here.", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r448619611", "createdAt": "2020-07-01T21:14:28Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/importer/fetcher/DoiFetcher.java", "diffHunk": "@@ -47,18 +51,28 @@ public String getName() {\n     @Override\n     public Optional<BibEntry> performSearchById(String identifier) throws FetcherException {\n         Optional<DOI> doi = DOI.parse(identifier);\n+        String agency = \"\";\n         try {\n             if (doi.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cfc672b6616a456e2c467b5a74f4ec3c807982f"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyMDIyOA==", "bodyText": "Why is no doPostCleanup executed in this case? I would do it here for consitency, too.", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r448620228", "createdAt": "2020-07-01T21:15:52Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/importer/fetcher/DoiFetcher.java", "diffHunk": "@@ -47,18 +51,28 @@ public String getName() {\n     @Override\n     public Optional<BibEntry> performSearchById(String identifier) throws FetcherException {\n         Optional<DOI> doi = DOI.parse(identifier);\n+        String agency = \"\";\n         try {\n             if (doi.isPresent()) {\n-                URL doiURL = new URL(doi.get().getURIAsASCIIString());\n+                Optional<BibEntry> fetchedEntry;\n+\n+                // mEDRA does not return a parsable bibtex string\n+                if (getAgency(doi.get()).isPresent() && \"medra\".equalsIgnoreCase(getAgency(doi.get()).get())) {\n+                    fetchedEntry = new Medra().performSearchById(identifier);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cfc672b6616a456e2c467b5a74f4ec3c807982f"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyMTAxOA==", "bodyText": "I would test for the agency and directly return the fetched entry. No else branch necessary --> quick exit and less nesting", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r448621018", "createdAt": "2020-07-01T21:17:35Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/importer/fetcher/DoiFetcher.java", "diffHunk": "@@ -47,18 +51,28 @@ public String getName() {\n     @Override\n     public Optional<BibEntry> performSearchById(String identifier) throws FetcherException {\n         Optional<DOI> doi = DOI.parse(identifier);\n+        String agency = \"\";\n         try {\n             if (doi.isPresent()) {\n-                URL doiURL = new URL(doi.get().getURIAsASCIIString());\n+                Optional<BibEntry> fetchedEntry;\n+\n+                // mEDRA does not return a parsable bibtex string\n+                if (getAgency(doi.get()).isPresent() && \"medra\".equalsIgnoreCase(getAgency(doi.get()).get())) {\n+                    fetchedEntry = new Medra().performSearchById(identifier);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyMDIyOA=="}, "originalCommit": {"oid": "4cfc672b6616a456e2c467b5a74f4ec3c807982f"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyMTQwMw==", "bodyText": "Please remove empty JavaDoc @throws annotations.\nMaybe, in this case, the JsonException can be handled locally --> log the exception and return Optional.empty?", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r448621403", "createdAt": "2020-07-01T21:18:31Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/importer/fetcher/DoiFetcher.java", "diffHunk": "@@ -84,4 +100,23 @@ private void doPostCleanup(BibEntry entry) {\n             return Collections.emptyList();\n         }\n     }\n+\n+    /**\n+     * Returns registration agency. Null if no agency is found.\n+     *\n+     * @param doi the doi to be searched\n+     * @throws JSONException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cfc672b6616a456e2c467b5a74f4ec3c807982f"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyMTYzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Returns registration agency. Null if no agency is found.\n          \n          \n            \n                 * Returns registration agency. Optional.empty() if no agency is found.", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r448621636", "createdAt": "2020-07-01T21:19:07Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/importer/fetcher/DoiFetcher.java", "diffHunk": "@@ -84,4 +100,23 @@ private void doPostCleanup(BibEntry entry) {\n             return Collections.emptyList();\n         }\n     }\n+\n+    /**\n+     * Returns registration agency. Null if no agency is found.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cfc672b6616a456e2c467b5a74f4ec3c807982f"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyMjAyNQ==", "bodyText": "These 4 lines can be done shorter as it is a single entry:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return entries;\n          \n          \n            \n                        return Collections.singleton(jsonITemToBibEntry(response));", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r448622025", "createdAt": "2020-07-01T21:20:05Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/importer/fetcher/Medra.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.PushbackInputStream;\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.jabref.logic.importer.FetcherException;\n+import org.jabref.logic.importer.IdBasedParserFetcher;\n+import org.jabref.logic.importer.ParseException;\n+import org.jabref.logic.importer.Parser;\n+import org.jabref.logic.importer.util.JsonReader;\n+import org.jabref.logic.importer.util.MediaTypes;\n+import org.jabref.logic.net.URLDownload;\n+import org.jabref.model.entry.AuthorList;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+import org.jabref.model.entry.types.EntryType;\n+import org.jabref.model.entry.types.StandardEntryType;\n+\n+import kong.unirest.json.JSONArray;\n+import kong.unirest.json.JSONException;\n+import kong.unirest.json.JSONObject;\n+import org.apache.http.client.utils.URIBuilder;\n+\n+/**\n+ * A class for fetching DOIs from Medra\n+ *\n+ * @see <a href=\"https://data.medra.org\">mEDRA Content Negotiation API</a> for an overview of the API\n+ * <p>\n+ * It requires \"Accept\" request Header attribute to be set to desired content-type.\n+ */\n+public class Medra implements IdBasedParserFetcher {\n+\n+    public static final String API_URL = \"https://data.medra.org\";\n+\n+    @Override\n+    public String getName() {\n+        return \"mEDRA\";\n+    }\n+\n+    @Override\n+    public Parser getParser() {\n+        return inputStream -> {\n+            JSONObject response = JsonReader.toJsonObject(inputStream);\n+\n+            List<BibEntry> entries = new ArrayList<>();\n+            BibEntry entry = jsonItemToBibEntry(response);\n+            entries.add(entry);\n+\n+            return entries;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cfc672b6616a456e2c467b5a74f4ec3c807982f"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyMjUxOA==", "bodyText": "Could you do a chaining of setField?\n  return new BibEntry(convertType(item.getString(\"type\")))\n    .withField(StandardField.TITLE, item.getString(\"title\"))\n    .withField...\n    ...", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r448622518", "createdAt": "2020-07-01T21:21:13Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/importer/fetcher/Medra.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.PushbackInputStream;\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.jabref.logic.importer.FetcherException;\n+import org.jabref.logic.importer.IdBasedParserFetcher;\n+import org.jabref.logic.importer.ParseException;\n+import org.jabref.logic.importer.Parser;\n+import org.jabref.logic.importer.util.JsonReader;\n+import org.jabref.logic.importer.util.MediaTypes;\n+import org.jabref.logic.net.URLDownload;\n+import org.jabref.model.entry.AuthorList;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+import org.jabref.model.entry.types.EntryType;\n+import org.jabref.model.entry.types.StandardEntryType;\n+\n+import kong.unirest.json.JSONArray;\n+import kong.unirest.json.JSONException;\n+import kong.unirest.json.JSONObject;\n+import org.apache.http.client.utils.URIBuilder;\n+\n+/**\n+ * A class for fetching DOIs from Medra\n+ *\n+ * @see <a href=\"https://data.medra.org\">mEDRA Content Negotiation API</a> for an overview of the API\n+ * <p>\n+ * It requires \"Accept\" request Header attribute to be set to desired content-type.\n+ */\n+public class Medra implements IdBasedParserFetcher {\n+\n+    public static final String API_URL = \"https://data.medra.org\";\n+\n+    @Override\n+    public String getName() {\n+        return \"mEDRA\";\n+    }\n+\n+    @Override\n+    public Parser getParser() {\n+        return inputStream -> {\n+            JSONObject response = JsonReader.toJsonObject(inputStream);\n+\n+            List<BibEntry> entries = new ArrayList<>();\n+            BibEntry entry = jsonItemToBibEntry(response);\n+            entries.add(entry);\n+\n+            return entries;\n+        };\n+    }\n+\n+    private BibEntry jsonItemToBibEntry(JSONObject item) throws ParseException {\n+        try {\n+            BibEntry entry = new BibEntry();\n+            entry.setType(convertType(item.getString(\"type\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cfc672b6616a456e2c467b5a74f4ec3c807982f"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyNDQ0OA==", "bodyText": "Ah, you mean HTTP 404 returns an empty response.\nIn line 259 of URLDownload is is implemented exactly as that.\nWhy do the other fetchers cope well with that and here you have to do some special tweaks?\nMaybe, the response from the mEDRA thing is different?", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r448624448", "createdAt": "2020-07-01T21:25:36Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/importer/fetcher/Medra.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.PushbackInputStream;\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.jabref.logic.importer.FetcherException;\n+import org.jabref.logic.importer.IdBasedParserFetcher;\n+import org.jabref.logic.importer.ParseException;\n+import org.jabref.logic.importer.Parser;\n+import org.jabref.logic.importer.util.JsonReader;\n+import org.jabref.logic.importer.util.MediaTypes;\n+import org.jabref.logic.net.URLDownload;\n+import org.jabref.model.entry.AuthorList;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+import org.jabref.model.entry.types.EntryType;\n+import org.jabref.model.entry.types.StandardEntryType;\n+\n+import kong.unirest.json.JSONArray;\n+import kong.unirest.json.JSONException;\n+import kong.unirest.json.JSONObject;\n+import org.apache.http.client.utils.URIBuilder;\n+\n+/**\n+ * A class for fetching DOIs from Medra\n+ *\n+ * @see <a href=\"https://data.medra.org\">mEDRA Content Negotiation API</a> for an overview of the API\n+ * <p>\n+ * It requires \"Accept\" request Header attribute to be set to desired content-type.\n+ */\n+public class Medra implements IdBasedParserFetcher {\n+\n+    public static final String API_URL = \"https://data.medra.org\";\n+\n+    @Override\n+    public String getName() {\n+        return \"mEDRA\";\n+    }\n+\n+    @Override\n+    public Parser getParser() {\n+        return inputStream -> {\n+            JSONObject response = JsonReader.toJsonObject(inputStream);\n+\n+            List<BibEntry> entries = new ArrayList<>();\n+            BibEntry entry = jsonItemToBibEntry(response);\n+            entries.add(entry);\n+\n+            return entries;\n+        };\n+    }\n+\n+    private BibEntry jsonItemToBibEntry(JSONObject item) throws ParseException {\n+        try {\n+            BibEntry entry = new BibEntry();\n+            entry.setType(convertType(item.getString(\"type\")));\n+            entry.setField(StandardField.TITLE, item.getString(\"title\"));\n+            entry.setField(StandardField.AUTHOR, toAuthors(item.optJSONArray(\"author\")));\n+            entry.setField(StandardField.YEAR,\n+                           Optional.ofNullable(item.optJSONObject(\"issued\"))\n+                                   .map(array -> array.optJSONArray(\"date-parts\"))\n+                                   .map(array -> array.optJSONArray(0))\n+                                   .map(array -> array.optInt(0))\n+                                   .map(year -> Integer.toString(year)).orElse(\"\"));\n+            entry.setField(StandardField.DOI, item.getString(\"DOI\"));\n+            entry.setField(StandardField.PAGES, item.optString(\"page\"));\n+            entry.setField(StandardField.ISSN, item.optString(\"ISSN\"));\n+            entry.setField(StandardField.JOURNAL, item.optString(\"container-title\"));\n+            entry.setField(StandardField.PUBLISHER, item.optString(\"publisher\"));\n+            entry.setField(StandardField.URL, item.optString(\"URL\"));\n+            entry.setField(StandardField.VOLUME, item.optString(\"volume\"));\n+            return entry;\n+        } catch (JSONException exception) {\n+            throw new ParseException(\"mEdRA API JSON format has changed\", exception);\n+        }\n+    }\n+\n+    private EntryType convertType(String type) {\n+        switch (type) {\n+            case \"article-journal\":\n+                return StandardEntryType.Article;\n+            default:\n+                return StandardEntryType.Misc;\n+        }\n+    }\n+\n+    private String toAuthors(JSONArray authors) {\n+        if (authors == null) {\n+            return \"\";\n+        }\n+\n+        // input: list of {\"literal\":\"A.\"}\n+        AuthorList authorsParsed = new AuthorList();\n+        String name = \"\";\n+\n+        for (int i = 0; i < authors.length(); i++) {\n+            JSONObject author = authors.getJSONObject(i);\n+            if (author.has(\"literal\")) {\n+                name = author.optString(\"literal\", \"\");\n+            } else {\n+                name = author.optString(\"family\", \"\") + \" \" + author.optString(\"given\", \"\");\n+            }\n+\n+            authorsParsed.addAuthor(\n+                                    name,\n+                                    \"\",\n+                                    \"\",\n+                                    \"\",\n+                                    \"\");\n+\n+        }\n+        return authorsParsed.getAsFirstLastNamesWithAnd();\n+    }\n+\n+    @Override\n+    public Optional<BibEntry> performSearchById(String identifier) throws FetcherException {\n+\n+        try (InputStream stream = getUrlDownload(identifier).asInputStream();\n+             PushbackInputStream pushbackInputStream = new PushbackInputStream(stream)) {\n+\n+            List<BibEntry> fetchedEntries = new ArrayList<>();\n+\n+            // check if there is anything to read since mEDRA '404 not found' returns nothing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cfc672b6616a456e2c467b5a74f4ec3c807982f"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyNDc5NA==", "bodyText": "application/json is a different mime type. Could you rename the constant?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String APPLICATION_JSON = \"application/vnd.citationstyles.csl+json\";\n          \n          \n            \n                public static final String CITATIONSTYLES_JSON = \"application/vnd.citationstyles.csl+json\";", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r448624794", "createdAt": "2020-07-01T21:26:24Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/importer/util/MediaTypes.java", "diffHunk": "@@ -5,4 +5,5 @@\n  */\n public class MediaTypes {\n     public static final String APPLICATION_BIBTEX = \"application/x-bibtex\";\n+    public static final String APPLICATION_JSON = \"application/vnd.citationstyles.csl+json\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cfc672b6616a456e2c467b5a74f4ec3c807982f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyNDk4MA==", "bodyText": "Could you do a withField chain, here?", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r448624980", "createdAt": "2020-07-01T21:26:45Z", "author": {"login": "koppor"}, "path": "src/test/java/org/jabref/logic/importer/fetcher/DoiFetcherTest.java", "diffHunk": "@@ -48,6 +49,27 @@ public void setUp() {\n         bibEntryDecker2007.setField(StandardField.TITLE, \"{BPEL}4Chor: Extending {BPEL} for Modeling Choreographies\");\n         bibEntryDecker2007.setField(StandardField.YEAR, \"2007\");\n         bibEntryDecker2007.setField(StandardField.DOI, \"10.1109/icws.2007.59\");\n+\n+        // mEDRA BibEntry\n+        bibEntryIannarelli2019 = new BibEntry();\n+        bibEntryIannarelli2019.setType(StandardEntryType.Article);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cfc672b6616a456e2c467b5a74f4ec3c807982f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyNTQzMA==", "bodyText": "Is it possible to add a test for searching a syntactially valid DOI, but not a valid doi (meaning returning nothing)?", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r448625430", "createdAt": "2020-07-01T21:27:43Z", "author": {"login": "koppor"}, "path": "src/test/java/org/jabref/logic/importer/fetcher/MedraTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import java.util.Optional;\n+\n+import org.jabref.logic.importer.FetcherException;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+import org.jabref.model.entry.types.StandardEntryType;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class MedraTest {\n+\n+    private Medra fetcher;\n+    private BibEntry bibEntrySpileers2018;\n+    private BibEntry bibEntryIannarelli2019;\n+    private BibEntry bibEntryCisternino1999;\n+\n+    @BeforeEach\n+    public void setUp() {\n+        fetcher = new Medra();\n+\n+        bibEntrySpileers2018 = new BibEntry();\n+        bibEntrySpileers2018.setType(StandardEntryType.Article);\n+        bibEntrySpileers2018.setField(StandardField.AUTHOR, \"SPILEERS, Steven \");\n+        bibEntrySpileers2018.setField(StandardField.PUBLISHER, \"Peeters online journals\");\n+        bibEntrySpileers2018.setField(StandardField.TITLE, \"Algemene kroniek\");\n+        bibEntrySpileers2018.setField(StandardField.YEAR, \"2018\");\n+        bibEntrySpileers2018.setField(StandardField.DOI, \"10.2143/TVF.80.3.3285690\");\n+        bibEntrySpileers2018.setField(StandardField.ISSN, \"2031-8952\");\n+        bibEntrySpileers2018.setField(StandardField.JOURNAL, \"Tijdschrift voor Filosofie\");\n+        bibEntrySpileers2018.setField(StandardField.PAGES, \"625-629\");\n+        bibEntrySpileers2018.setField(StandardField.URL, \"http://doi.org/10.2143/TVF.80.3.3285690\");\n+\n+        bibEntryIannarelli2019 = new BibEntry();\n+        bibEntryIannarelli2019.setType(StandardEntryType.Article);\n+        bibEntryIannarelli2019.setField(StandardField.AUTHOR,\n+                                        \"\"\n+                                                            + \"Iannarelli Riccardo  and \"\n+                                                            + \"Novello Anna  and \"\n+                                                            + \"Stricker Damien  and \"\n+                                                            + \"Cisternino Marco  and \"\n+                                                            + \"Gallizio Federico  and \"\n+                                                            + \"Telib Haysam  and \"\n+                                                            + \"Meyer Thierry \");\n+        bibEntryIannarelli2019.setField(StandardField.PUBLISHER, \"AIDIC: Italian Association of Chemical Engineering\");\n+        bibEntryIannarelli2019.setField(StandardField.TITLE, \"Safety in research institutions: how to better communicate the risks using numerical simulations\");\n+        bibEntryIannarelli2019.setField(StandardField.YEAR, \"2019\");\n+        bibEntryIannarelli2019.setField(StandardField.DOI, \"10.3303/CET1977146\");\n+        bibEntryIannarelli2019.setField(StandardField.JOURNAL, \"Chemical Engineering Transactions\");\n+        bibEntryIannarelli2019.setField(StandardField.PAGES, \"871-876\");\n+        bibEntryIannarelli2019.setField(StandardField.URL, \"http://doi.org/10.3303/CET1977146\");\n+        bibEntryIannarelli2019.setField(StandardField.VOLUME, \"77\");\n+\n+        bibEntryCisternino1999 = new BibEntry();\n+        bibEntryCisternino1999.setType(StandardEntryType.Article);\n+        bibEntryCisternino1999.setField(StandardField.AUTHOR, \"Cisternino Paola \");\n+        bibEntryCisternino1999.setField(StandardField.PUBLISHER, \"Edizioni Otto Novecento\");\n+        bibEntryCisternino1999.setField(StandardField.TITLE, \"Diagramma semantico dei lemmi : casa, parola, silenzio e attesa in \u00c8 fatto giorno e Margherite e rosolacci di Rocco Scotellaro\");\n+        bibEntryCisternino1999.setField(StandardField.YEAR, \"1999\");\n+        bibEntryCisternino1999.setField(StandardField.DOI, \"10.1400/115378\");\n+        bibEntryCisternino1999.setField(StandardField.JOURNAL, \"Otto/Novecento : rivista quadrimestrale di critica e storia letteraria\");\n+        bibEntryCisternino1999.setField(StandardField.URL, \"http://doi.org/10.1400/115378\");\n+    }\n+\n+    @Test\n+    public void testGetName() {\n+        assertEquals(\"mEDRA\", fetcher.getName());\n+    }\n+\n+    @Test\n+    public void testPerformSearchSpileers2018() throws FetcherException {\n+        Optional<BibEntry> fetchedEntry = fetcher.performSearchById(\"10.2143/TVF.80.3.3285690\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cfc672b6616a456e2c467b5a74f4ec3c807982f"}, "originalPosition": 77}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ae1788ec8fdc3776e41bdb6e0cf8158357e04d4", "author": {"user": {"login": "mind000", "name": "Giovanni Caldarola"}}, "url": "https://github.com/JabRef/jabref/commit/4ae1788ec8fdc3776e41bdb6e0cf8158357e04d4", "committedDate": "2020-07-05T20:26:12Z", "message": "mEDRA DOI fetcher implementation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyOTcwMDky", "url": "https://github.com/JabRef/jabref/pull/6641#pullrequestreview-442970092", "createdAt": "2020-07-06T10:49:24Z", "commit": {"oid": "4ae1788ec8fdc3776e41bdb6e0cf8158357e04d4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c7f1b54393d8c4284b2cf17cfd94d6a0f9ab649", "author": {"user": {"login": "mind000", "name": "Giovanni Caldarola"}}, "url": "https://github.com/JabRef/jabref/commit/8c7f1b54393d8c4284b2cf17cfd94d6a0f9ab649", "committedDate": "2020-07-07T06:46:56Z", "message": "Merge branch 'master' into medra-fetcher"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzNjAyNjgz", "url": "https://github.com/JabRef/jabref/pull/6641#pullrequestreview-443602683", "createdAt": "2020-07-07T06:43:38Z", "commit": {"oid": "4ae1788ec8fdc3776e41bdb6e0cf8158357e04d4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNjo0MzozOFrOGtxFpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNjo0OToyMFrOGtxONA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY0MzM2NA==", "bodyText": "What's the reason for these changes here? Maybe it's better to include them directly in IdBasedParserFetcher ?", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r450643364", "createdAt": "2020-07-07T06:43:38Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/logic/importer/fetcher/CrossRef.java", "diffHunk": "@@ -98,6 +103,44 @@ public Parser getParser() {\n         };\n     }\n \n+    @Override\n+    public Optional<BibEntry> performSearchById(String identifier) throws FetcherException {\n+        if (StringUtil.isBlank(identifier)) {\n+            return Optional.empty();\n+        }\n+\n+        try (InputStream stream = new URLDownload(getURLForID(identifier)).asInputStream();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ae1788ec8fdc3776e41bdb6e0cf8158357e04d4"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY0MzkyOA==", "bodyText": "Simply return new Medra()...  should work.", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r450643928", "createdAt": "2020-07-07T06:45:08Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/logic/importer/fetcher/DoiFetcher.java", "diffHunk": "@@ -47,8 +55,17 @@ public String getName() {\n     @Override\n     public Optional<BibEntry> performSearchById(String identifier) throws FetcherException {\n         Optional<DOI> doi = DOI.parse(identifier);\n+\n         try {\n             if (doi.isPresent()) {\n+                Optional<BibEntry> fetchedEntry;\n+\n+                // mEDRA does not return a parsable bibtex string\n+                if (getAgency(doi.get()).isPresent() && \"medra\".equalsIgnoreCase(getAgency(doi.get()).get())) {\n+                    fetchedEntry = new Medra().performSearchById(identifier);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ae1788ec8fdc3776e41bdb6e0cf8158357e04d4"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY0NDUwMA==", "bodyText": "Please move this method to the DOI class (i..e the call should look like doi.getAgency())", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r450644500", "createdAt": "2020-07-07T06:46:35Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/logic/importer/fetcher/DoiFetcher.java", "diffHunk": "@@ -84,4 +104,29 @@ private void doPostCleanup(BibEntry entry) {\n             return Collections.emptyList();\n         }\n     }\n+\n+    /**\n+     * Returns registration agency. Optional.empty() if no agency is found.\n+     *\n+     * @param doi the doi to be searched\n+     */\n+    public Optional<String> getAgency(DOI doi) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ae1788ec8fdc3776e41bdb6e0cf8158357e04d4"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY0NTU1Ng==", "bodyText": "Same question here as above; normally you don't need to overwrite the performSearchById method.", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r450645556", "createdAt": "2020-07-07T06:49:20Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/logic/importer/fetcher/Medra.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.PushbackInputStream;\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.jabref.logic.importer.FetcherException;\n+import org.jabref.logic.importer.IdBasedParserFetcher;\n+import org.jabref.logic.importer.ParseException;\n+import org.jabref.logic.importer.Parser;\n+import org.jabref.logic.importer.util.JsonReader;\n+import org.jabref.logic.importer.util.MediaTypes;\n+import org.jabref.logic.net.URLDownload;\n+import org.jabref.model.entry.AuthorList;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+import org.jabref.model.entry.types.EntryType;\n+import org.jabref.model.entry.types.StandardEntryType;\n+import org.jabref.model.strings.StringUtil;\n+\n+import kong.unirest.json.JSONArray;\n+import kong.unirest.json.JSONException;\n+import kong.unirest.json.JSONObject;\n+import org.apache.http.client.utils.URIBuilder;\n+\n+/**\n+ * A class for fetching DOIs from Medra\n+ *\n+ * @see <a href=\"https://data.medra.org\">mEDRA Content Negotiation API</a> for an overview of the API\n+ * <p>\n+ * It requires \"Accept\" request Header attribute to be set to desired content-type.\n+ */\n+public class Medra implements IdBasedParserFetcher {\n+\n+    public static final String API_URL = \"https://data.medra.org\";\n+\n+    @Override\n+    public String getName() {\n+        return \"mEDRA\";\n+    }\n+\n+    @Override\n+    public Parser getParser() {\n+        return inputStream -> {\n+            JSONObject response = JsonReader.toJsonObject(inputStream);\n+\n+            return Collections.singletonList(jsonItemToBibEntry(response));\n+        };\n+    }\n+\n+    private BibEntry jsonItemToBibEntry(JSONObject item) throws ParseException {\n+        try {\n+\n+            return new BibEntry(convertType(item.getString(\"type\")))\n+                                                                    .withField(StandardField.TITLE, item.getString(\"title\"))\n+                                                                    .withField(StandardField.AUTHOR, toAuthors(item.optJSONArray(\"author\")))\n+                                                                    .withField(StandardField.YEAR,\n+                                                                               Optional.ofNullable(item.optJSONObject(\"issued\"))\n+                                                                                       .map(array -> array.optJSONArray(\"date-parts\"))\n+                                                                                       .map(array -> array.optJSONArray(0))\n+                                                                                       .map(array -> array.optInt(0))\n+                                                                                       .map(year -> Integer.toString(year)).orElse(\"\"))\n+                                                                    .withField(StandardField.DOI, item.getString(\"DOI\"))\n+                                                                    .withField(StandardField.PAGES, item.optString(\"page\"))\n+                                                                    .withField(StandardField.ISSN, item.optString(\"ISSN\"))\n+                                                                    .withField(StandardField.JOURNAL, item.optString(\"container-title\"))\n+                                                                    .withField(StandardField.PUBLISHER, item.optString(\"publisher\"))\n+                                                                    .withField(StandardField.URL, item.optString(\"URL\"))\n+                                                                    .withField(StandardField.VOLUME, item.optString(\"volume\"));\n+\n+        } catch (JSONException exception) {\n+            throw new ParseException(\"mEdRA API JSON format has changed\", exception);\n+        }\n+    }\n+\n+    private EntryType convertType(String type) {\n+        switch (type) {\n+            case \"article-journal\":\n+                return StandardEntryType.Article;\n+            default:\n+                return StandardEntryType.Misc;\n+        }\n+    }\n+\n+    private String toAuthors(JSONArray authors) {\n+        if (authors == null) {\n+            return \"\";\n+        }\n+\n+        // input: list of {\"literal\":\"A.\"}\n+        AuthorList authorsParsed = new AuthorList();\n+        String name = \"\";\n+\n+        for (int i = 0; i < authors.length(); i++) {\n+            JSONObject author = authors.getJSONObject(i);\n+            name = author.optString(\"literal\", \"\") + \" \" + author.optString(\"family\", \"\") + \" \" + author.optString(\"given\", \"\");\n+\n+            authorsParsed.addAuthor(\n+                                    name,\n+                                    \"\",\n+                                    \"\",\n+                                    \"\",\n+                                    \"\");\n+\n+        }\n+        return authorsParsed.getAsFirstLastNamesWithAnd();\n+    }\n+\n+    @Override\n+    public Optional<BibEntry> performSearchById(String identifier) throws FetcherException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c7f1b54393d8c4284b2cf17cfd94d6a0f9ab649"}, "originalPosition": 117}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzNjE2NzA1", "url": "https://github.com/JabRef/jabref/pull/6641#pullrequestreview-443616705", "createdAt": "2020-07-07T07:08:57Z", "commit": {"oid": "8c7f1b54393d8c4284b2cf17cfd94d6a0f9ab649"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzowODo1N1rOGtxu3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzowODo1N1rOGtxu3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY1MzkxOA==", "bodyText": "Could you please comment why this was done?\nI would bet that getParser().parseEntries(pushbackInputStream) works for an empty input stream (and does not throw any exceptions).\nOh, I lost my bet:\n\nMaybe, change line 28 to return an empty JSonObject and comment the JavaDoc accordingly. --> An empty input stream results in an empty JsonObject and not into an error. With that change, the whole \"hack\" with with PushbackInputStream should not be required anymore.\nMaybe, there is a test case missing demonstrating that functionality.\nThe UrlDownload returns an empty input stream to avoid such code:", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r450653918", "createdAt": "2020-07-07T07:08:57Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/importer/fetcher/Medra.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.PushbackInputStream;\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.jabref.logic.importer.FetcherException;\n+import org.jabref.logic.importer.IdBasedParserFetcher;\n+import org.jabref.logic.importer.ParseException;\n+import org.jabref.logic.importer.Parser;\n+import org.jabref.logic.importer.util.JsonReader;\n+import org.jabref.logic.importer.util.MediaTypes;\n+import org.jabref.logic.net.URLDownload;\n+import org.jabref.model.entry.AuthorList;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+import org.jabref.model.entry.types.EntryType;\n+import org.jabref.model.entry.types.StandardEntryType;\n+import org.jabref.model.strings.StringUtil;\n+\n+import kong.unirest.json.JSONArray;\n+import kong.unirest.json.JSONException;\n+import kong.unirest.json.JSONObject;\n+import org.apache.http.client.utils.URIBuilder;\n+\n+/**\n+ * A class for fetching DOIs from Medra\n+ *\n+ * @see <a href=\"https://data.medra.org\">mEDRA Content Negotiation API</a> for an overview of the API\n+ * <p>\n+ * It requires \"Accept\" request Header attribute to be set to desired content-type.\n+ */\n+public class Medra implements IdBasedParserFetcher {\n+\n+    public static final String API_URL = \"https://data.medra.org\";\n+\n+    @Override\n+    public String getName() {\n+        return \"mEDRA\";\n+    }\n+\n+    @Override\n+    public Parser getParser() {\n+        return inputStream -> {\n+            JSONObject response = JsonReader.toJsonObject(inputStream);\n+\n+            return Collections.singletonList(jsonItemToBibEntry(response));\n+        };\n+    }\n+\n+    private BibEntry jsonItemToBibEntry(JSONObject item) throws ParseException {\n+        try {\n+\n+            return new BibEntry(convertType(item.getString(\"type\")))\n+                                                                    .withField(StandardField.TITLE, item.getString(\"title\"))\n+                                                                    .withField(StandardField.AUTHOR, toAuthors(item.optJSONArray(\"author\")))\n+                                                                    .withField(StandardField.YEAR,\n+                                                                               Optional.ofNullable(item.optJSONObject(\"issued\"))\n+                                                                                       .map(array -> array.optJSONArray(\"date-parts\"))\n+                                                                                       .map(array -> array.optJSONArray(0))\n+                                                                                       .map(array -> array.optInt(0))\n+                                                                                       .map(year -> Integer.toString(year)).orElse(\"\"))\n+                                                                    .withField(StandardField.DOI, item.getString(\"DOI\"))\n+                                                                    .withField(StandardField.PAGES, item.optString(\"page\"))\n+                                                                    .withField(StandardField.ISSN, item.optString(\"ISSN\"))\n+                                                                    .withField(StandardField.JOURNAL, item.optString(\"container-title\"))\n+                                                                    .withField(StandardField.PUBLISHER, item.optString(\"publisher\"))\n+                                                                    .withField(StandardField.URL, item.optString(\"URL\"))\n+                                                                    .withField(StandardField.VOLUME, item.optString(\"volume\"));\n+\n+        } catch (JSONException exception) {\n+            throw new ParseException(\"mEdRA API JSON format has changed\", exception);\n+        }\n+    }\n+\n+    private EntryType convertType(String type) {\n+        switch (type) {\n+            case \"article-journal\":\n+                return StandardEntryType.Article;\n+            default:\n+                return StandardEntryType.Misc;\n+        }\n+    }\n+\n+    private String toAuthors(JSONArray authors) {\n+        if (authors == null) {\n+            return \"\";\n+        }\n+\n+        // input: list of {\"literal\":\"A.\"}\n+        AuthorList authorsParsed = new AuthorList();\n+        String name = \"\";\n+\n+        for (int i = 0; i < authors.length(); i++) {\n+            JSONObject author = authors.getJSONObject(i);\n+            name = author.optString(\"literal\", \"\") + \" \" + author.optString(\"family\", \"\") + \" \" + author.optString(\"given\", \"\");\n+\n+            authorsParsed.addAuthor(\n+                                    name,\n+                                    \"\",\n+                                    \"\",\n+                                    \"\",\n+                                    \"\");\n+\n+        }\n+        return authorsParsed.getAsFirstLastNamesWithAnd();\n+    }\n+\n+    @Override\n+    public Optional<BibEntry> performSearchById(String identifier) throws FetcherException {\n+        if (StringUtil.isBlank(identifier)) {\n+            return Optional.empty();\n+        }\n+\n+        try (InputStream stream = getUrlDownload(identifier).asInputStream();\n+             PushbackInputStream pushbackInputStream = new PushbackInputStream(stream)) {\n+\n+            List<BibEntry> fetchedEntries = new ArrayList<>();\n+\n+            // check if there is anything to read\n+            int readByte;\n+            readByte = pushbackInputStream.read();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c7f1b54393d8c4284b2cf17cfd94d6a0f9ab649"}, "originalPosition": 129}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5504e52665cc97e7d4f07f8a7e62b66d128a30ac", "author": {"user": {"login": "koppor", "name": "Oliver Kopp"}}, "url": "https://github.com/JabRef/jabref/commit/5504e52665cc97e7d4f07f8a7e62b66d128a30ac", "committedDate": "2020-07-07T09:55:53Z", "message": "Rewrite JsonReader to accept an empty input stream"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fd81c3fd4f36610835097f39c91ceb77769bb05", "author": {"user": {"login": "koppor", "name": "Oliver Kopp"}}, "url": "https://github.com/JabRef/jabref/commit/6fd81c3fd4f36610835097f39c91ceb77769bb05", "committedDate": "2020-07-07T10:38:25Z", "message": "Introduce \"getUrlDownloadForIdentifier\" and shrink fetcher code\n\n- Rename getURLForID to getUrlForIdentifier\n- Shrink Medra fetcher\n- Shrink CrossRef fetcher"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b9b14f2871dceddf4e9a8f7c748b668c5c97f15", "author": {"user": {"login": "koppor", "name": "Oliver Kopp"}}, "url": "https://github.com/JabRef/jabref/commit/9b9b14f2871dceddf4e9a8f7c748b668c5c97f15", "committedDate": "2020-07-07T10:52:12Z", "message": "Use parameterized tests (and add ISSN to Cisternino Paola)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35964420d7cc60885f13e9d1491570e9684733dd", "author": {"user": {"login": "koppor", "name": "Oliver Kopp"}}, "url": "https://github.com/JabRef/jabref/commit/35964420d7cc60885f13e9d1491570e9684733dd", "committedDate": "2020-07-07T11:01:38Z", "message": "Fix parsing of names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d17af0fcf09988b3d14c616852de963360171427", "author": {"user": {"login": "koppor", "name": "Oliver Kopp"}}, "url": "https://github.com/JabRef/jabref/commit/d17af0fcf09988b3d14c616852de963360171427", "committedDate": "2020-07-07T11:03:59Z", "message": "Fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd0a66525bfe97f19f0bacabd73bf6cc77bc0722", "author": {"user": {"login": "koppor", "name": "Oliver Kopp"}}, "url": "https://github.com/JabRef/jabref/commit/dd0a66525bfe97f19f0bacabd73bf6cc77bc0722", "committedDate": "2020-07-07T13:23:31Z", "message": "Move \"getUrlDownload\" up to WebFetcher\n\nReastion: It is the common base of both SearchBasedParserFetcher and IdBasedParserFetcher"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fa073e441b8ffbc4f5031a9406b3e56441ce8ea", "author": {"user": {"login": "koppor", "name": "Oliver Kopp"}}, "url": "https://github.com/JabRef/jabref/commit/4fa073e441b8ffbc4f5031a9406b3e56441ce8ea", "committedDate": "2020-07-07T13:32:29Z", "message": "Use new method \"getUrlDownload\""}}, {"__typename": "PullRequestCommit", "commit": {"oid": "faa304a09338b7047785f99ce58a3cd13ba825f8", "author": {"user": {"login": "mind000", "name": "Giovanni Caldarola"}}, "url": "https://github.com/JabRef/jabref/commit/faa304a09338b7047785f99ce58a3cd13ba825f8", "committedDate": "2020-07-07T16:15:05Z", "message": "Merge pull request #1 from JabRef/improveJsonReader\n\nImprove json reader"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1MzExNTcw", "url": "https://github.com/JabRef/jabref/pull/6641#pullrequestreview-445311570", "createdAt": "2020-07-09T06:04:54Z", "commit": {"oid": "faa304a09338b7047785f99ce58a3cd13ba825f8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNjowNDo1NFrOGvC2LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNjowNDo1NFrOGvC2LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk4Mjg5Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String inputStr = new String(ByteStreams.toByteArray(inputStream), Charsets.UTF_8);\n          \n          \n            \n                        String inputStr = new String((inputStream.readAllByte()), Charsets.UTF_8);\n          \n      \n    \n    \n  \n\nThis is possible since java 9", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r451982893", "createdAt": "2020-07-09T06:04:54Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/logic/importer/util/JsonReader.java", "diffHunk": "@@ -1,39 +1,35 @@\n package org.jabref.logic.importer.util;\n \n-import java.io.BufferedReader;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.io.InputStreamReader;\n-import java.nio.charset.StandardCharsets;\n \n import org.jabref.logic.importer.ParseException;\n \n+import com.google.common.base.Charsets;\n+import com.google.common.io.ByteStreams;\n+import kong.unirest.json.JSONException;\n import kong.unirest.json.JSONObject;\n \n /**\n  * Converts an {@link InputStream} into a {@link JSONObject}.\n  */\n public class JsonReader {\n \n-    public static JSONObject toJsonObject(InputStreamReader input) throws ParseException {\n-        BufferedReader streamReader = new BufferedReader(input);\n-        StringBuilder responseStrBuilder = new StringBuilder();\n-\n+    /**\n+     * Converts the given input stream into a {@link JSONObject}.\n+     *\n+     * @return A {@link JSONObject}. An empty JSON object is returned in the case an empty stream is passed.\n+     */\n+    public static JSONObject toJsonObject(InputStream inputStream) throws ParseException {\n         try {\n-            String inputStr;\n-            while ((inputStr = streamReader.readLine()) != null) {\n-                responseStrBuilder.append(inputStr);\n-            }\n-            if (responseStrBuilder.toString().isBlank()) {\n-                throw new ParseException(\"Empty input!\");\n+            String inputStr = new String(ByteStreams.toByteArray(inputStream), Charsets.UTF_8);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faa304a09338b7047785f99ce58a3cd13ba825f8"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4523f1d7525a7909af11d106d3d402eb704fd3fe", "author": {"user": {"login": "mind000", "name": "Giovanni Caldarola"}}, "url": "https://github.com/JabRef/jabref/commit/4523f1d7525a7909af11d106d3d402eb704fd3fe", "committedDate": "2020-07-09T09:11:13Z", "message": "mEDRA DOI fetcher implementation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1NDM3ODU0", "url": "https://github.com/JabRef/jabref/pull/6641#pullrequestreview-445437854", "createdAt": "2020-07-09T09:20:03Z", "commit": {"oid": "4523f1d7525a7909af11d106d3d402eb704fd3fe"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17938709942b413a484d5aaec719b6154ff596af", "author": {"user": {"login": "Siedlerchr", "name": "Christoph"}}, "url": "https://github.com/JabRef/jabref/commit/17938709942b413a484d5aaec719b6154ff596af", "committedDate": "2020-07-09T09:48:17Z", "message": "Merge branch 'master' into medra-fetcher"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 197, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}