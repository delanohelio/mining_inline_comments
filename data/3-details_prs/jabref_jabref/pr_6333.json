{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2OTI2OTI3", "number": 6333, "title": "Check duplicate DOI", "bodyText": "Result of #latemob session with @skufer322.\nFixes koppor#339.\n\nIncludes quick refactorings to increase code quality.\nShould also speedup our integrity check and reduce memory footprint (since the checkers are created per database check run - and not per entry check run)\nTests missing. Proposal: Leave tests for students \ud83d\ude07  ---> #6207\n\n\n\n Change in CHANGELOG.md described (if applicable)\n Tests created for changes (if applicable)\n Manually tested changed features in running JabRef (always required)\n Screenshots added in PR description (for UI changes)\n Checked documentation: Is the information available and up to date? If not created an issue at https://github.com/JabRef/user-documentation/issues or, even better, submitted a pull request to the documentation repository.", "createdAt": "2020-04-21T21:49:11Z", "url": "https://github.com/JabRef/jabref/pull/6333", "merged": true, "mergeCommit": {"oid": "7bfbe44ec73712680f74e1116ffbd7920b5af043"}, "closed": true, "closedAt": "2020-05-15T09:37:34Z", "author": {"login": "koppor"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZ4127AH2gAyNDA2OTI2OTI3OjJlMDdkOWI2OTBkZjkzOTVhNTJmY2E4MGYyMmVjZDU2ZGJiZWNjODQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcherIpgFqTQxMjQ5MTE5Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2e07d9b690df9395a52fca80f22ecd56dbbecc84", "author": {"user": {"login": "stefan-kolb", "name": "Stefan Kolb"}}, "url": "https://github.com/JabRef/jabref/commit/2e07d9b690df9395a52fca80f22ecd56dbbecc84", "committedDate": "2020-04-21T19:27:42Z", "message": "ioebnfgoeoignboieg"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3724a8cbb92cf64370d7ba7c7266a7ae4eb5fe6", "author": {"user": {"login": "skufer322", "name": "Stefan Kufer"}}, "url": "https://github.com/JabRef/jabref/commit/c3724a8cbb92cf64370d7ba7c7266a7ae4eb5fe6", "committedDate": "2020-04-21T20:11:13Z", "message": "asdf"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a7aa441132755f6c1dc2506c71a5d860c54dff3", "author": {"user": {"login": "koppor", "name": "Oliver Kopp"}}, "url": "https://github.com/JabRef/jabref/commit/1a7aa441132755f6c1dc2506c71a5d860c54dff3", "committedDate": "2020-04-21T20:42:30Z", "message": "WIP: Add equals to DOI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1b0fbc8193977420e8401b750e3667e5b7de74c", "author": {"user": {"login": "stefan-kolb", "name": "Stefan Kolb"}}, "url": "https://github.com/JabRef/jabref/commit/a1b0fbc8193977420e8401b750e3667e5b7de74c", "committedDate": "2020-04-21T21:28:00Z", "message": "rbrbbrbr"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b46f8597fa16a1d03f9cd73d11b196844a336a3", "author": {"user": {"login": "koppor", "name": "Oliver Kopp"}}, "url": "https://github.com/JabRef/jabref/commit/9b46f8597fa16a1d03f9cd73d11b196844a336a3", "committedDate": "2020-04-21T21:47:17Z", "message": "Flatmap"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae89990cbc20b1caf105477e5ef500ec3fd44820", "author": {"user": {"login": "koppor", "name": "Oliver Kopp"}}, "url": "https://github.com/JabRef/jabref/commit/ae89990cbc20b1caf105477e5ef500ec3fd44820", "committedDate": "2020-04-21T21:55:30Z", "message": "Fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "006c24187326b2cf1ccf8d85e3122fd643a94095", "author": {"user": {"login": "koppor", "name": "Oliver Kopp"}}, "url": "https://github.com/JabRef/jabref/commit/006c24187326b2cf1ccf8d85e3122fd643a94095", "committedDate": "2020-04-21T22:03:11Z", "message": "Remove obsolete ."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3e703bff6f3ba0960ad590e12839494e37f8896", "author": {"user": {"login": "koppor", "name": "Oliver Kopp"}}, "url": "https://github.com/JabRef/jabref/commit/b3e703bff6f3ba0960ad590e12839494e37f8896", "committedDate": "2020-04-21T22:12:15Z", "message": "Add CHANGELOG.md entry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c00e7de4615edf6e59f7d3ed925070d9676befc", "author": {"user": {"login": "koppor", "name": "Oliver Kopp"}}, "url": "https://github.com/JabRef/jabref/commit/2c00e7de4615edf6e59f7d3ed925070d9676befc", "committedDate": "2020-04-21T22:19:20Z", "message": "Fix tests by using \"old school\" for loop with appropriate Optional check"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3ODc0NjQ3", "url": "https://github.com/JabRef/jabref/pull/6333#pullrequestreview-397874647", "createdAt": "2020-04-22T06:21:29Z", "commit": {"oid": "2c00e7de4615edf6e59f7d3ed925070d9676befc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjoyMToyOVrOGJlS2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjoyMToyOVrOGJlS2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcwMTQwMw==", "bodyText": "Why not directly initialize that HashMap in the field declaration?", "url": "https://github.com/JabRef/jabref/pull/6333#discussion_r412701403", "createdAt": "2020-04-22T06:21:29Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/logic/integrity/DoiDuplicationChecker.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package org.jabref.logic.integrity;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import javafx.collections.ObservableList;\n+\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.model.database.BibDatabase;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+import org.jabref.model.entry.identifier.DOI;\n+\n+import com.google.common.collect.BiMap;\n+import com.google.common.collect.HashBiMap;\n+\n+public class DoiDuplicationChecker implements Checker {\n+    private final BibDatabase database;\n+    private Map<BibEntry, List<IntegrityMessage>> errors;\n+\n+    public DoiDuplicationChecker(BibDatabase database) {\n+        this.database = Objects.requireNonNull(database);\n+    }\n+\n+    @Override\n+    public List<IntegrityMessage> check(BibEntry entry) {\n+        if (errors == null) {\n+            errors = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c00e7de4615edf6e59f7d3ed925070d9676befc"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3ODg2NTgw", "url": "https://github.com/JabRef/jabref/pull/6333#pullrequestreview-397886580", "createdAt": "2020-04-22T06:44:37Z", "commit": {"oid": "2c00e7de4615edf6e59f7d3ed925070d9676befc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjo0NDozN1rOGJl-4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjo0NDozN1rOGJl-4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcxMjY3NQ==", "bodyText": "It is doi, not entry. However, doi cannot be used as the variable name is already bound.", "url": "https://github.com/JabRef/jabref/pull/6333#discussion_r412712675", "createdAt": "2020-04-22T06:44:37Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/integrity/DoiDuplicationChecker.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package org.jabref.logic.integrity;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import javafx.collections.ObservableList;\n+\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.model.database.BibDatabase;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+import org.jabref.model.entry.identifier.DOI;\n+\n+import com.google.common.collect.BiMap;\n+import com.google.common.collect.HashBiMap;\n+\n+public class DoiDuplicationChecker implements Checker {\n+    private final BibDatabase database;\n+    private Map<BibEntry, List<IntegrityMessage>> errors;\n+\n+    public DoiDuplicationChecker(BibDatabase database) {\n+        this.database = Objects.requireNonNull(database);\n+    }\n+\n+    @Override\n+    public List<IntegrityMessage> check(BibEntry entry) {\n+        if (errors == null) {\n+            errors = new HashMap<>();\n+\n+            ObservableList<BibEntry> bibEntries = database.getEntries();\n+            BiMap<DOI, List<BibEntry>> duplicateMap = HashBiMap.create(bibEntries.size());\n+            for (BibEntry bibEntry : bibEntries) {\n+                bibEntry.getDOI().ifPresent(doi ->\n+                        duplicateMap.computeIfAbsent(doi, x -> new ArrayList<>()).add(bibEntry));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c00e7de4615edf6e59f7d3ed925070d9676befc"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4MTI4OTEw", "url": "https://github.com/JabRef/jabref/pull/6333#pullrequestreview-398128910", "createdAt": "2020-04-22T12:16:14Z", "commit": {"oid": "2c00e7de4615edf6e59f7d3ed925070d9676befc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMjoxNjoxNFrOGJzNOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMjoyNjozOVrOGJzoOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjkyOTMzOA==", "bodyText": "To be honest, I don't see any advantage of this refactoring. Just makes the code more complex and harder to maintain in my opinion.\nIf you really feel like the original code needs a refactoring, then you create a list of all checkers that need to be run a) always, b) bibtex c)biblatex (still I would create these lists only in the checkdatabase method). This would get ride of the repeated check methods below. But to be honest, I don't think this yields a more readable code either.", "url": "https://github.com/JabRef/jabref/pull/6333#discussion_r412929338", "createdAt": "2020-04-22T12:16:14Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/logic/integrity/IntegrityCheck.java", "diffHunk": "@@ -32,9 +45,36 @@ public IntegrityCheck(BibDatabaseContext bibDatabaseContext,\n         this.journalAbbreviationRepository = Objects.requireNonNull(journalAbbreviationRepository);\n         this.enforceLegalKey = enforceLegalKey;\n         this.allowIntegerEdition = allowIntegerEdition;\n+        initCheckers(bibDatabaseContext, bibtexKeyPatternPreferences, journalAbbreviationRepository);\n     }\n \n-    public List<IntegrityMessage> checkDatabase() {\n+    private void initCheckers(BibDatabaseContext bibDatabaseContext, BibtexKeyPatternPreferences bibtexKeyPatternPreferences, JournalAbbreviationRepository journalAbbreviationRepository) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c00e7de4615edf6e59f7d3ed925070d9676befc"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjkzNjI1MQ==", "bodyText": "Why are you caching the errors anyway? Also in case you are worrying about performance, why do you choose to implement a solution that has O(n^2) (with n = entries). Why not implement a O(n) solution (e.g. https://stackoverflow.com/a/31341963/873661) which you call in checkDatabase below?", "url": "https://github.com/JabRef/jabref/pull/6333#discussion_r412936251", "createdAt": "2020-04-22T12:26:39Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/logic/integrity/DoiDuplicationChecker.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package org.jabref.logic.integrity;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import javafx.collections.ObservableList;\n+\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.model.database.BibDatabase;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+import org.jabref.model.entry.identifier.DOI;\n+\n+import com.google.common.collect.BiMap;\n+import com.google.common.collect.HashBiMap;\n+\n+public class DoiDuplicationChecker implements Checker {\n+    private final BibDatabase database;\n+    private Map<BibEntry, List<IntegrityMessage>> errors;\n+\n+    public DoiDuplicationChecker(BibDatabase database) {\n+        this.database = Objects.requireNonNull(database);\n+    }\n+\n+    @Override\n+    public List<IntegrityMessage> check(BibEntry entry) {\n+        if (errors == null) {\n+            errors = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcwMTQwMw=="}, "originalCommit": {"oid": "2c00e7de4615edf6e59f7d3ed925070d9676befc"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd7621db9cc87c2d2a82e8dfab3d8ee055a17a68", "author": {"user": {"login": "koppor", "name": "Oliver Kopp"}}, "url": "https://github.com/JabRef/jabref/commit/fd7621db9cc87c2d2a82e8dfab3d8ee055a17a68", "committedDate": "2020-04-23T03:52:59Z", "message": "Rearrange code (to make it more readable)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03dd2a0b59a63c17460a74cd12aa205edc628aad", "author": {"user": {"login": "koppor", "name": "Oliver Kopp"}}, "url": "https://github.com/JabRef/jabref/commit/03dd2a0b59a63c17460a74cd12aa205edc628aad", "committedDate": "2020-04-23T04:09:14Z", "message": "Create List of checkers at the contructor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f9b14812976b8b70abacada1c670dd318a307f3", "author": {"user": {"login": "koppor", "name": "Oliver Kopp"}}, "url": "https://github.com/JabRef/jabref/commit/6f9b14812976b8b70abacada1c670dd318a307f3", "committedDate": "2020-04-23T04:10:04Z", "message": "Fix variable name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2de185810040146b1d79a9074020f3d54471340c", "author": {"user": {"login": "jmoosmann", "name": "Jonas Moosmann"}}, "url": "https://github.com/JabRef/jabref/commit/2de185810040146b1d79a9074020f3d54471340c", "committedDate": "2020-04-23T10:03:28Z", "message": "add new interface DatabaseChecker\n\nCo-authored-by: Oliver Kopp <kopp.dev@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c9e687a0f2181704ba08f0eff9edbabe17a6971", "author": {"user": {"login": "jmoosmann", "name": "Jonas Moosmann"}}, "url": "https://github.com/JabRef/jabref/commit/4c9e687a0f2181704ba08f0eff9edbabe17a6971", "committedDate": "2020-04-23T10:07:48Z", "message": "Add FunctionalInterface annotation to DatabaseChecker\n\nCo-authored-by: Oliver Kopp <kopp.dev@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4OTcxNjE1", "url": "https://github.com/JabRef/jabref/pull/6333#pullrequestreview-398971615", "createdAt": "2020-04-23T10:35:21Z", "commit": {"oid": "4c9e687a0f2181704ba08f0eff9edbabe17a6971"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMDozNToyMVrOGKihYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMDozOTo1NlrOGKis-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzcwNDU0Nw==", "bodyText": "Rename to EntryChecker?", "url": "https://github.com/JabRef/jabref/pull/6333#discussion_r413704547", "createdAt": "2020-04-23T10:35:21Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/logic/integrity/Checker.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package org.jabref.logic.integrity;\n+\n+import java.util.List;\n+\n+import org.jabref.model.entry.BibEntry;\n+\n+@FunctionalInterface\n+public interface Checker {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c9e687a0f2181704ba08f0eff9edbabe17a6971"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzcwNTY2MQ==", "bodyText": "I think \"The same DOI is used...\" is better", "url": "https://github.com/JabRef/jabref/pull/6333#discussion_r413705661", "createdAt": "2020-04-23T10:37:04Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/logic/integrity/DoiDuplicationChecker.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package org.jabref.logic.integrity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import javafx.collections.ObservableList;\n+\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.model.database.BibDatabase;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+import org.jabref.model.entry.identifier.DOI;\n+\n+import com.google.common.collect.BiMap;\n+import com.google.common.collect.HashBiMap;\n+\n+public class DoiDuplicationChecker implements DatabaseChecker {\n+\n+    @Override\n+    public List<IntegrityMessage> check(BibDatabase database) {\n+        ObservableList<BibEntry> bibEntries = database.getEntries();\n+        BiMap<DOI, List<BibEntry>> duplicateMap = HashBiMap.create(bibEntries.size());\n+        for (BibEntry bibEntry : bibEntries) {\n+            bibEntry.getDOI().ifPresent(doi ->\n+                    duplicateMap.computeIfAbsent(doi, absentDoi -> new ArrayList<>()).add(bibEntry));\n+        }\n+\n+        return duplicateMap.inverse().keySet().stream()\n+                           .filter(list -> list.size() > 1)\n+                           .flatMap(list -> list.stream())\n+                           .map(item -> new IntegrityMessage(Localization.lang(\"Unique DOI used in multiple entries\"), item, StandardField.DOI))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c9e687a0f2181704ba08f0eff9edbabe17a6971"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzcwNzUxMw==", "bodyText": "Name it simply check?", "url": "https://github.com/JabRef/jabref/pull/6333#discussion_r413707513", "createdAt": "2020-04-23T10:39:56Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/logic/integrity/IntegrityCheck.java", "diffHunk": "@@ -14,75 +15,77 @@\n public class IntegrityCheck {\n \n     private final BibDatabaseContext bibDatabaseContext;\n-    private final FilePreferences filePreferences;\n-    private final BibtexKeyPatternPreferences bibtexKeyPatternPreferences;\n-    private final JournalAbbreviationRepository journalAbbreviationRepository;\n-    private final boolean enforceLegalKey;\n-    private final boolean allowIntegerEdition;\n+    private final FieldCheckers fieldCheckers;\n+    private final List<Checker> entryCheckers;\n \n     public IntegrityCheck(BibDatabaseContext bibDatabaseContext,\n                           FilePreferences filePreferences,\n                           BibtexKeyPatternPreferences bibtexKeyPatternPreferences,\n                           JournalAbbreviationRepository journalAbbreviationRepository,\n                           boolean enforceLegalKey,\n                           boolean allowIntegerEdition) {\n-        this.bibDatabaseContext = Objects.requireNonNull(bibDatabaseContext);\n-        this.filePreferences = Objects.requireNonNull(filePreferences);\n-        this.bibtexKeyPatternPreferences = Objects.requireNonNull(bibtexKeyPatternPreferences);\n-        this.journalAbbreviationRepository = Objects.requireNonNull(journalAbbreviationRepository);\n-        this.enforceLegalKey = enforceLegalKey;\n-        this.allowIntegerEdition = allowIntegerEdition;\n+        this.bibDatabaseContext = bibDatabaseContext;\n+\n+        fieldCheckers = new FieldCheckers(bibDatabaseContext,\n+                filePreferences,\n+                journalAbbreviationRepository,\n+                enforceLegalKey,\n+                allowIntegerEdition);\n+\n+        entryCheckers = new ArrayList<>(List.of(\n+                new BibtexKeyChecker(),\n+                new TypeChecker(),\n+                new BibStringChecker(),\n+                new HTMLCharacterChecker(),\n+                new EntryLinkChecker(bibDatabaseContext.getDatabase()),\n+                new BibtexkeyDeviationChecker(bibDatabaseContext, bibtexKeyPatternPreferences),\n+                new BibtexKeyDuplicationChecker(bibDatabaseContext.getDatabase())\n+        ));\n+\n+        if (!bibDatabaseContext.isBiblatexMode()) {\n+            entryCheckers.add(new JournalInAbbreviationListChecker(StandardField.JOURNALTITLE, journalAbbreviationRepository));\n+        } else {\n+            entryCheckers.addAll(List.of(\n+                    new JournalInAbbreviationListChecker(StandardField.JOURNAL, journalAbbreviationRepository),\n+                    new ASCIICharacterChecker(),\n+                    new NoBibtexFieldChecker(),\n+                    new BibTeXEntryTypeChecker())\n+            );\n+        }\n     }\n \n-    public List<IntegrityMessage> checkDatabase() {\n+    List<IntegrityMessage> executeAllCheckers() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c9e687a0f2181704ba08f0eff9edbabe17a6971"}, "originalPosition": 69}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97b9cbed797fb1fea62f8f8f3c75ae4ed6dd6ffb", "author": {"user": {"login": "koppor", "name": "Oliver Kopp"}}, "url": "https://github.com/JabRef/jabref/commit/97b9cbed797fb1fea62f8f8f3c75ae4ed6dd6ffb", "committedDate": "2020-04-23T20:09:31Z", "message": "Move comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eaebdf53011881f70e4b81601f3140cf3f3c84de", "author": {"user": {"login": "jmoosmann", "name": "Jonas Moosmann"}}, "url": "https://github.com/JabRef/jabref/commit/eaebdf53011881f70e4b81601f3140cf3f3c84de", "committedDate": "2020-05-15T08:22:46Z", "message": "remove unused import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c72d52bccddf0fdfcb243c45f95775e35a0774a", "author": {"user": {"login": "jmoosmann", "name": "Jonas Moosmann"}}, "url": "https://github.com/JabRef/jabref/commit/7c72d52bccddf0fdfcb243c45f95775e35a0774a", "committedDate": "2020-05-15T08:43:57Z", "message": "Merge remote-tracking branch 'upstream/master' into check-duplicate-doi\n\n# Conflicts:\n#\tsrc/main/java/org/jabref/logic/integrity/IntegrityCheck.java\n#\tsrc/test/java/org/jabref/logic/integrity/IntegrityCheckTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8296c3a08b76320147a3bfd5ea6b3c08a173f67", "author": {"user": {"login": "jmoosmann", "name": "Jonas Moosmann"}}, "url": "https://github.com/JabRef/jabref/commit/c8296c3a08b76320147a3bfd5ea6b3c08a173f67", "committedDate": "2020-05-15T08:45:26Z", "message": "Merge branch 'check-duplicate-doi' of https://github.com/JabRef/jabref into check-duplicate-doi"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6597dc65a790517d9ae4308b707cd16fd9100b19", "author": {"user": {"login": "jmoosmann", "name": "Jonas Moosmann"}}, "url": "https://github.com/JabRef/jabref/commit/6597dc65a790517d9ae4308b707cd16fd9100b19", "committedDate": "2020-05-15T09:01:49Z", "message": "fix filename of DoiValidityCheckerTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de629d20f902c570dcd7402a93f66ce3eea644b9", "author": {"user": {"login": "jmoosmann", "name": "Jonas Moosmann"}}, "url": "https://github.com/JabRef/jabref/commit/de629d20f902c570dcd7402a93f66ce3eea644b9", "committedDate": "2020-05-15T09:08:00Z", "message": "fix condition"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a5046c32592a979659d1ece339f1fb6b727ee8c", "author": {"user": {"login": "jmoosmann", "name": "Jonas Moosmann"}}, "url": "https://github.com/JabRef/jabref/commit/5a5046c32592a979659d1ece339f1fb6b727ee8c", "committedDate": "2020-05-15T09:22:02Z", "message": "address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyNDkxMTk2", "url": "https://github.com/JabRef/jabref/pull/6333#pullrequestreview-412491196", "createdAt": "2020-05-15T09:29:51Z", "commit": {"oid": "5a5046c32592a979659d1ece339f1fb6b727ee8c"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 348, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}