{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0NTc2OTQ5", "number": 6799, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMDowOToyNVrOEdJz_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMTowMjo1OFrOEeQtKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MDA0OTI1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/importer/QueryConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMDowOToyNVrOHIJjIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMDowOToyNVrOHIJjIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMwNzEwNw==", "bodyText": "I would call this QueryParser. I guess parser is more common for conversion from string to some object (its also the name used in Lucene).", "url": "https://github.com/JabRef/jabref/pull/6799#discussion_r478307107", "createdAt": "2020-08-27T10:09:25Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/logic/importer/QueryConverter.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package org.jabref.logic.importer;\n+\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.jabref.logic.importer.fetcher.ComplexSearchQuery;\n+\n+import org.apache.lucene.index.Term;\n+import org.apache.lucene.queryparser.flexible.core.QueryNodeException;\n+import org.apache.lucene.queryparser.flexible.standard.StandardQueryParser;\n+import org.apache.lucene.search.Query;\n+import org.apache.lucene.search.QueryVisitor;\n+\n+/**\n+ * This class converts a query string written in lucene syntax into a complex search query.\n+ *\n+ * For simplicity this is limited to fielded data and the boolean AND operator.\n+ */\n+public class QueryConverter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d592a47b853ae6978696d635776e32e8e105e478"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MDA1NjYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/importer/QueryConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMDoxMTozMlrOHIJnmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMDoxMTozMlrOHIJnmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMwODI1MA==", "bodyText": "Is the QueryNodeException helpful in diagnosing where the syntax error is, i.e. can it be converted to a meaningful error message shown to the user? If not, I would propose to catch it in the main body, change the return value to Optional<Query> and return an empty optional in case of a syntax error.", "url": "https://github.com/JabRef/jabref/pull/6799#discussion_r478308250", "createdAt": "2020-08-27T10:11:32Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/logic/importer/QueryConverter.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package org.jabref.logic.importer;\n+\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.jabref.logic.importer.fetcher.ComplexSearchQuery;\n+\n+import org.apache.lucene.index.Term;\n+import org.apache.lucene.queryparser.flexible.core.QueryNodeException;\n+import org.apache.lucene.queryparser.flexible.standard.StandardQueryParser;\n+import org.apache.lucene.search.Query;\n+import org.apache.lucene.search.QueryVisitor;\n+\n+/**\n+ * This class converts a query string written in lucene syntax into a complex search query.\n+ *\n+ * For simplicity this is limited to fielded data and the boolean AND operator.\n+ */\n+public class QueryConverter {\n+\n+    /**\n+     * Converts the given query string into a complex query using lucene.\n+     * Note: For unique fields, the alphabetically first instance in the query string is used in the complex query.\n+     *\n+     * @param queryString The given query string\n+     * @return A complex query containing all fields of the query string\n+     * @throws QueryNodeException Error during parsing\n+     */\n+    public ComplexSearchQuery convertQueryStringIntoComplexQuery(String queryString) throws QueryNodeException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d592a47b853ae6978696d635776e32e8e105e478"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MDA1OTE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/importer/fetcher/ComplexSearchQuery.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMDoxMjoyMlrOHIJpMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMDoxMjoyMlrOHIJpMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMwODY1Nw==", "bodyText": "It's considered bad practice to have an optional around a list. Just return an empty list, instead of an empty optional.", "url": "https://github.com/JabRef/jabref/pull/6799#discussion_r478308657", "createdAt": "2020-08-27T10:12:22Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/logic/importer/fetcher/ComplexSearchQuery.java", "diffHunk": "@@ -28,7 +31,7 @@ private ComplexSearchQuery(String defaultField, List<String> authors, List<Strin\n         this.singleYear = singleYear;\n     }\n \n-    public Optional<String> getDefaultField() {\n+    public Optional<List<String>> getDefaultFieldPhrases() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d592a47b853ae6978696d635776e32e8e105e478"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MDA3Njg5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/importer/fetcher/ComplexSearchQuery.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMDoxNzo0OVrOHIJ0LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMDoxNzo0OVrOHIJ0LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMxMTQ2OQ==", "bodyText": "I would add this directly as a constructor, or if you want to have a more descriptive name as a static ComplexSearchQuery fromTerms(Collection<Term> terms) method in ComplexSearchQuery. The builder pattern is only useful if you have a lot of possible constructor arguments, and want to create a nice interface for it. I actually think the builder interface is mostly outdated since IDEs are now intelligent enough to show named constructor arguments, e.g", "url": "https://github.com/JabRef/jabref/pull/6799#discussion_r478311469", "createdAt": "2020-08-27T10:17:49Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/logic/importer/fetcher/ComplexSearchQuery.java", "diffHunk": "@@ -135,6 +142,21 @@ public ComplexSearchQueryBuilder journal(String journal) {\n             return this;\n         }\n \n+        public ComplexSearchQueryBuilder terms(Collection<Term> terms) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d592a47b853ae6978696d635776e32e8e105e478"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MDA3OTkzOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/jabref/logic/importer/QueryConverterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMDoxODo1OVrOHIJ2Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMDoxODo1OVrOHIJ2Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMxMTk5NA==", "bodyText": "Reuse converter here and in the other tests.", "url": "https://github.com/JabRef/jabref/pull/6799#discussion_r478311994", "createdAt": "2020-08-27T10:18:59Z", "author": {"login": "tobiasdiez"}, "path": "src/test/java/org/jabref/logic/importer/QueryConverterTest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.jabref.logic.importer;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.jabref.logic.importer.fetcher.ComplexSearchQuery;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+class QueryConverterTest {\n+    QueryConverter converter = new QueryConverter();\n+\n+    @Test\n+    public void convertAuthorField() throws Exception {\n+        ComplexSearchQuery searchQuery = new QueryConverter().convertQueryStringIntoComplexQuery(\"author:\\\"Igor Steinmacher\\\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d592a47b853ae6978696d635776e32e8e105e478"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MDA4NjU3OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/jabref/logic/importer/QueryConverterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMDoyMDo1N1rOHIJ6Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMDoyMDo1N1rOHIJ6Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMxMjk3OA==", "bodyText": "Please create a new expected complex search query, and test against this. For example, the current test also passes if searchQuery has a non-empty title because this field is not checked in this test.", "url": "https://github.com/JabRef/jabref/pull/6799#discussion_r478312978", "createdAt": "2020-08-27T10:20:57Z", "author": {"login": "tobiasdiez"}, "path": "src/test/java/org/jabref/logic/importer/QueryConverterTest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.jabref.logic.importer;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.jabref.logic.importer.fetcher.ComplexSearchQuery;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+class QueryConverterTest {\n+    QueryConverter converter = new QueryConverter();\n+\n+    @Test\n+    public void convertAuthorField() throws Exception {\n+        ComplexSearchQuery searchQuery = new QueryConverter().convertQueryStringIntoComplexQuery(\"author:\\\"Igor Steinmacher\\\"\");\n+        assertEquals(List.of(\"\\\"Igor Steinmacher\\\"\"), searchQuery.getAuthors().get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d592a47b853ae6978696d635776e32e8e105e478"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MDc1NTU4OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/jabref/logic/importer/QueryParserTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMzoyNDoyM1rOHIQM5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMzoyNDoyM1rOHIQM5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQxNjEwMw==", "bodyText": "rename to parser", "url": "https://github.com/JabRef/jabref/pull/6799#discussion_r478416103", "createdAt": "2020-08-27T13:24:23Z", "author": {"login": "tobiasdiez"}, "path": "src/test/java/org/jabref/logic/importer/QueryParserTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package org.jabref.logic.importer;\n+\n+import org.jabref.logic.importer.fetcher.ComplexSearchQuery;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+class QueryParserTest {\n+    QueryParser converter = new QueryParser();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4610451ff908accf977328100f4a5f578fed9dd7"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MDc1OTI3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/importer/QueryParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMzoyNToxMVrOHIQPNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMzoyNToxMVrOHIQPNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQxNjY5Mw==", "bodyText": "rename to parse?", "url": "https://github.com/JabRef/jabref/pull/6799#discussion_r478416693", "createdAt": "2020-08-27T13:25:11Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/logic/importer/QueryParser.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.jabref.logic.importer;\n+\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.jabref.logic.importer.fetcher.ComplexSearchQuery;\n+\n+import org.apache.lucene.index.Term;\n+import org.apache.lucene.queryparser.flexible.core.QueryNodeException;\n+import org.apache.lucene.queryparser.flexible.standard.StandardQueryParser;\n+import org.apache.lucene.search.Query;\n+import org.apache.lucene.search.QueryVisitor;\n+\n+/**\n+ * This class converts a query string written in lucene syntax into a complex search query.\n+ *\n+ * For simplicity this is limited to fielded data and the boolean AND operator.\n+ */\n+public class QueryParser {\n+\n+    /**\n+     * Converts the given query string into a complex query using lucene.\n+     * Note: For unique fields, the alphabetically first instance in the query string is used in the complex query.\n+     *\n+     * @param queryString The given query string\n+     * @return A complex query containing all fields of the query string\n+     * @throws QueryNodeException Error during parsing\n+     */\n+    public Optional<ComplexSearchQuery> convertQueryStringIntoComplexQuery(String queryString) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4610451ff908accf977328100f4a5f578fed9dd7"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTYyNDMwOnYy", "diffSide": "RIGHT", "path": "docs/adr/0015-support-an-abstract-query-syntax-for-query-conversion.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDo1NjoxOFrOHJz4gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDo1NjoxOFrOHJz4gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA0OTI4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              * \\[author:\"Igor Steinmacher\" author:\"Christoph Treude\" year:2017\\] will be converted to\n          \n          \n            \n              * `author:\"Igor Steinmacher\" author:\"Christoph Treude\" year:2017` will be converted to", "url": "https://github.com/JabRef/jabref/pull/6799#discussion_r480049283", "createdAt": "2020-08-31T10:56:18Z", "author": {"login": "koppor"}, "path": "docs/adr/0015-support-an-abstract-query-syntax-for-query-conversion.md", "diffHunk": "@@ -0,0 +1,56 @@\n+# Query syntax design\n+\n+## Context and Problem Statement\n+\n+All libraries use their own query syntax for advanced search options. To increase usability, users should be able to formulate their (abstract) search queries in a query syntax that can be mapped to the library specific search queries. To achieve this, the query has to be parsed into an AST.\n+\n+Which query syntax should be used for the abstract queries?\n+Which features should the syntax support?\n+\n+## Considered Options\n+\n+* Use a simplified syntax that is derived of the [lucene](https://lucene.apache.org/core/8_6_1/queryparser/org/apache/lucene/queryparser/classic/package-summary.html) query syntax\n+* Formulate a own query syntax\n+\n+## Decision Outcome\n+\n+Chosen option: \"Use a syntax that is derived of the lucene query syntax\", because only option that is already known, and easy to implemenent.\n+Furthermore parsers for lucene already exist and are tested.\n+For simplicitly, and lack of universal capabilities across fetchers, only basic query features and therefor syntax is supported:\n+\n+* All terms in the query are whitespace separated and will be ANDed\n+* Default and certain fielded terms are supported\n+* Fielded Terms:\n+  * author\n+  * title\n+  * journal\n+  * year (for single year)\n+  * year-range (for range e.g. year-range:2012-2015)\n+* The journal, year, and year-range fields should only be populated once in each query\n+* Example:\n+  * \\[author:\"Igor Steinmacher\" author:\"Christoph Treude\" year:2017\\] will be converted to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "467cbfc0171a789f8fff20506077948707eff8ec"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTYyNTAyOnYy", "diffSide": "RIGHT", "path": "docs/adr/0015-support-an-abstract-query-syntax-for-query-conversion.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDo1NjozMlrOHJz46A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDo1NjozMlrOHJz46A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA0OTM4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              * \\[author:\"Igor Steinmacher\" AND author:\"Christoph Treude\" AND year:2017\\]\n          \n          \n            \n              * `author:\"Igor Steinmacher\" AND author:\"Christoph Treude\" AND year:2017`", "url": "https://github.com/JabRef/jabref/pull/6799#discussion_r480049384", "createdAt": "2020-08-31T10:56:32Z", "author": {"login": "koppor"}, "path": "docs/adr/0015-support-an-abstract-query-syntax-for-query-conversion.md", "diffHunk": "@@ -0,0 +1,56 @@\n+# Query syntax design\n+\n+## Context and Problem Statement\n+\n+All libraries use their own query syntax for advanced search options. To increase usability, users should be able to formulate their (abstract) search queries in a query syntax that can be mapped to the library specific search queries. To achieve this, the query has to be parsed into an AST.\n+\n+Which query syntax should be used for the abstract queries?\n+Which features should the syntax support?\n+\n+## Considered Options\n+\n+* Use a simplified syntax that is derived of the [lucene](https://lucene.apache.org/core/8_6_1/queryparser/org/apache/lucene/queryparser/classic/package-summary.html) query syntax\n+* Formulate a own query syntax\n+\n+## Decision Outcome\n+\n+Chosen option: \"Use a syntax that is derived of the lucene query syntax\", because only option that is already known, and easy to implemenent.\n+Furthermore parsers for lucene already exist and are tested.\n+For simplicitly, and lack of universal capabilities across fetchers, only basic query features and therefor syntax is supported:\n+\n+* All terms in the query are whitespace separated and will be ANDed\n+* Default and certain fielded terms are supported\n+* Fielded Terms:\n+  * author\n+  * title\n+  * journal\n+  * year (for single year)\n+  * year-range (for range e.g. year-range:2012-2015)\n+* The journal, year, and year-range fields should only be populated once in each query\n+* Example:\n+  * \\[author:\"Igor Steinmacher\" author:\"Christoph Treude\" year:2017\\] will be converted to\n+  * \\[author:\"Igor Steinmacher\" AND author:\"Christoph Treude\" AND year:2017\\]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "467cbfc0171a789f8fff20506077948707eff8ec"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTYyNTUzOnYy", "diffSide": "RIGHT", "path": "docs/adr/0015-support-an-abstract-query-syntax-for-query-conversion.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDo1Njo0NFrOHJz5NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDo1Njo0NFrOHJz5NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA0OTQ2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Well Known\n          \n          \n            \n            * Well known", "url": "https://github.com/JabRef/jabref/pull/6799#discussion_r480049461", "createdAt": "2020-08-31T10:56:44Z", "author": {"login": "koppor"}, "path": "docs/adr/0015-support-an-abstract-query-syntax-for-query-conversion.md", "diffHunk": "@@ -0,0 +1,56 @@\n+# Query syntax design\n+\n+## Context and Problem Statement\n+\n+All libraries use their own query syntax for advanced search options. To increase usability, users should be able to formulate their (abstract) search queries in a query syntax that can be mapped to the library specific search queries. To achieve this, the query has to be parsed into an AST.\n+\n+Which query syntax should be used for the abstract queries?\n+Which features should the syntax support?\n+\n+## Considered Options\n+\n+* Use a simplified syntax that is derived of the [lucene](https://lucene.apache.org/core/8_6_1/queryparser/org/apache/lucene/queryparser/classic/package-summary.html) query syntax\n+* Formulate a own query syntax\n+\n+## Decision Outcome\n+\n+Chosen option: \"Use a syntax that is derived of the lucene query syntax\", because only option that is already known, and easy to implemenent.\n+Furthermore parsers for lucene already exist and are tested.\n+For simplicitly, and lack of universal capabilities across fetchers, only basic query features and therefor syntax is supported:\n+\n+* All terms in the query are whitespace separated and will be ANDed\n+* Default and certain fielded terms are supported\n+* Fielded Terms:\n+  * author\n+  * title\n+  * journal\n+  * year (for single year)\n+  * year-range (for range e.g. year-range:2012-2015)\n+* The journal, year, and year-range fields should only be populated once in each query\n+* Example:\n+  * \\[author:\"Igor Steinmacher\" author:\"Christoph Treude\" year:2017\\] will be converted to\n+  * \\[author:\"Igor Steinmacher\" AND author:\"Christoph Treude\" AND year:2017\\]\n+\n+### Positive Consequences\n+\n+* Already tested\n+* Well Known", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "467cbfc0171a789f8fff20506077948707eff8ec"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTYyNjU0OnYy", "diffSide": "RIGHT", "path": "docs/adr/0015-support-an-abstract-query-syntax-for-query-conversion.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDo1NzowMFrOHJz52A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDo1NzowMFrOHJz52A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA0OTYyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              * author\n          \n          \n            \n              * `author`", "url": "https://github.com/JabRef/jabref/pull/6799#discussion_r480049624", "createdAt": "2020-08-31T10:57:00Z", "author": {"login": "koppor"}, "path": "docs/adr/0015-support-an-abstract-query-syntax-for-query-conversion.md", "diffHunk": "@@ -0,0 +1,56 @@\n+# Query syntax design\n+\n+## Context and Problem Statement\n+\n+All libraries use their own query syntax for advanced search options. To increase usability, users should be able to formulate their (abstract) search queries in a query syntax that can be mapped to the library specific search queries. To achieve this, the query has to be parsed into an AST.\n+\n+Which query syntax should be used for the abstract queries?\n+Which features should the syntax support?\n+\n+## Considered Options\n+\n+* Use a simplified syntax that is derived of the [lucene](https://lucene.apache.org/core/8_6_1/queryparser/org/apache/lucene/queryparser/classic/package-summary.html) query syntax\n+* Formulate a own query syntax\n+\n+## Decision Outcome\n+\n+Chosen option: \"Use a syntax that is derived of the lucene query syntax\", because only option that is already known, and easy to implemenent.\n+Furthermore parsers for lucene already exist and are tested.\n+For simplicitly, and lack of universal capabilities across fetchers, only basic query features and therefor syntax is supported:\n+\n+* All terms in the query are whitespace separated and will be ANDed\n+* Default and certain fielded terms are supported\n+* Fielded Terms:\n+  * author", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "467cbfc0171a789f8fff20506077948707eff8ec"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTYyNzMxOnYy", "diffSide": "RIGHT", "path": "docs/adr/0015-support-an-abstract-query-syntax-for-query-conversion.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDo1NzowOFrOHJz6Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDo1NzowOFrOHJz6Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA0OTczNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              * title\n          \n          \n            \n              * `title`", "url": "https://github.com/JabRef/jabref/pull/6799#discussion_r480049734", "createdAt": "2020-08-31T10:57:08Z", "author": {"login": "koppor"}, "path": "docs/adr/0015-support-an-abstract-query-syntax-for-query-conversion.md", "diffHunk": "@@ -0,0 +1,56 @@\n+# Query syntax design\n+\n+## Context and Problem Statement\n+\n+All libraries use their own query syntax for advanced search options. To increase usability, users should be able to formulate their (abstract) search queries in a query syntax that can be mapped to the library specific search queries. To achieve this, the query has to be parsed into an AST.\n+\n+Which query syntax should be used for the abstract queries?\n+Which features should the syntax support?\n+\n+## Considered Options\n+\n+* Use a simplified syntax that is derived of the [lucene](https://lucene.apache.org/core/8_6_1/queryparser/org/apache/lucene/queryparser/classic/package-summary.html) query syntax\n+* Formulate a own query syntax\n+\n+## Decision Outcome\n+\n+Chosen option: \"Use a syntax that is derived of the lucene query syntax\", because only option that is already known, and easy to implemenent.\n+Furthermore parsers for lucene already exist and are tested.\n+For simplicitly, and lack of universal capabilities across fetchers, only basic query features and therefor syntax is supported:\n+\n+* All terms in the query are whitespace separated and will be ANDed\n+* Default and certain fielded terms are supported\n+* Fielded Terms:\n+  * author\n+  * title", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "467cbfc0171a789f8fff20506077948707eff8ec"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTYyODM2OnYy", "diffSide": "RIGHT", "path": "docs/adr/0015-support-an-abstract-query-syntax-for-query-conversion.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDo1NzoxN1rOHJz64g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDo1NzoxN1rOHJz64g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA0OTg5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              * journal\n          \n          \n            \n              * `journal`", "url": "https://github.com/JabRef/jabref/pull/6799#discussion_r480049890", "createdAt": "2020-08-31T10:57:17Z", "author": {"login": "koppor"}, "path": "docs/adr/0015-support-an-abstract-query-syntax-for-query-conversion.md", "diffHunk": "@@ -0,0 +1,56 @@\n+# Query syntax design\n+\n+## Context and Problem Statement\n+\n+All libraries use their own query syntax for advanced search options. To increase usability, users should be able to formulate their (abstract) search queries in a query syntax that can be mapped to the library specific search queries. To achieve this, the query has to be parsed into an AST.\n+\n+Which query syntax should be used for the abstract queries?\n+Which features should the syntax support?\n+\n+## Considered Options\n+\n+* Use a simplified syntax that is derived of the [lucene](https://lucene.apache.org/core/8_6_1/queryparser/org/apache/lucene/queryparser/classic/package-summary.html) query syntax\n+* Formulate a own query syntax\n+\n+## Decision Outcome\n+\n+Chosen option: \"Use a syntax that is derived of the lucene query syntax\", because only option that is already known, and easy to implemenent.\n+Furthermore parsers for lucene already exist and are tested.\n+For simplicitly, and lack of universal capabilities across fetchers, only basic query features and therefor syntax is supported:\n+\n+* All terms in the query are whitespace separated and will be ANDed\n+* Default and certain fielded terms are supported\n+* Fielded Terms:\n+  * author\n+  * title\n+  * journal", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "467cbfc0171a789f8fff20506077948707eff8ec"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTYyOTIzOnYy", "diffSide": "RIGHT", "path": "docs/adr/0015-support-an-abstract-query-syntax-for-query-conversion.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDo1NzoyN1rOHJz7YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDo1NzoyN1rOHJz7YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA1MDAxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              * year (for single year)\n          \n          \n            \n              * `year` (for single year)", "url": "https://github.com/JabRef/jabref/pull/6799#discussion_r480050017", "createdAt": "2020-08-31T10:57:27Z", "author": {"login": "koppor"}, "path": "docs/adr/0015-support-an-abstract-query-syntax-for-query-conversion.md", "diffHunk": "@@ -0,0 +1,56 @@\n+# Query syntax design\n+\n+## Context and Problem Statement\n+\n+All libraries use their own query syntax for advanced search options. To increase usability, users should be able to formulate their (abstract) search queries in a query syntax that can be mapped to the library specific search queries. To achieve this, the query has to be parsed into an AST.\n+\n+Which query syntax should be used for the abstract queries?\n+Which features should the syntax support?\n+\n+## Considered Options\n+\n+* Use a simplified syntax that is derived of the [lucene](https://lucene.apache.org/core/8_6_1/queryparser/org/apache/lucene/queryparser/classic/package-summary.html) query syntax\n+* Formulate a own query syntax\n+\n+## Decision Outcome\n+\n+Chosen option: \"Use a syntax that is derived of the lucene query syntax\", because only option that is already known, and easy to implemenent.\n+Furthermore parsers for lucene already exist and are tested.\n+For simplicitly, and lack of universal capabilities across fetchers, only basic query features and therefor syntax is supported:\n+\n+* All terms in the query are whitespace separated and will be ANDed\n+* Default and certain fielded terms are supported\n+* Fielded Terms:\n+  * author\n+  * title\n+  * journal\n+  * year (for single year)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "467cbfc0171a789f8fff20506077948707eff8ec"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTYzMjA3OnYy", "diffSide": "RIGHT", "path": "docs/adr/0015-support-an-abstract-query-syntax-for-query-conversion.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDo1Nzo1NVrOHJz9IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDo1Nzo1NVrOHJz9IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA1MDQ2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              * year-range (for range e.g. year-range:2012-2015)\n          \n          \n            \n              * `year-range` (for range e.g. `year-range:2012-2015`)", "url": "https://github.com/JabRef/jabref/pull/6799#discussion_r480050464", "createdAt": "2020-08-31T10:57:55Z", "author": {"login": "koppor"}, "path": "docs/adr/0015-support-an-abstract-query-syntax-for-query-conversion.md", "diffHunk": "@@ -0,0 +1,56 @@\n+# Query syntax design\n+\n+## Context and Problem Statement\n+\n+All libraries use their own query syntax for advanced search options. To increase usability, users should be able to formulate their (abstract) search queries in a query syntax that can be mapped to the library specific search queries. To achieve this, the query has to be parsed into an AST.\n+\n+Which query syntax should be used for the abstract queries?\n+Which features should the syntax support?\n+\n+## Considered Options\n+\n+* Use a simplified syntax that is derived of the [lucene](https://lucene.apache.org/core/8_6_1/queryparser/org/apache/lucene/queryparser/classic/package-summary.html) query syntax\n+* Formulate a own query syntax\n+\n+## Decision Outcome\n+\n+Chosen option: \"Use a syntax that is derived of the lucene query syntax\", because only option that is already known, and easy to implemenent.\n+Furthermore parsers for lucene already exist and are tested.\n+For simplicitly, and lack of universal capabilities across fetchers, only basic query features and therefor syntax is supported:\n+\n+* All terms in the query are whitespace separated and will be ANDed\n+* Default and certain fielded terms are supported\n+* Fielded Terms:\n+  * author\n+  * title\n+  * journal\n+  * year (for single year)\n+  * year-range (for range e.g. year-range:2012-2015)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "467cbfc0171a789f8fff20506077948707eff8ec"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTYzMzcwOnYy", "diffSide": "RIGHT", "path": "docs/adr/0015-support-an-abstract-query-syntax-for-query-conversion.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDo1ODoxMVrOHJz-QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDo1ODoxMVrOHJz-QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA1MDc1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * The journal, year, and year-range fields should only be populated once in each query\n          \n          \n            \n            * The `journal`, `year`, and `year-range` fields should only be populated once in each query", "url": "https://github.com/JabRef/jabref/pull/6799#discussion_r480050752", "createdAt": "2020-08-31T10:58:11Z", "author": {"login": "koppor"}, "path": "docs/adr/0015-support-an-abstract-query-syntax-for-query-conversion.md", "diffHunk": "@@ -0,0 +1,56 @@\n+# Query syntax design\n+\n+## Context and Problem Statement\n+\n+All libraries use their own query syntax for advanced search options. To increase usability, users should be able to formulate their (abstract) search queries in a query syntax that can be mapped to the library specific search queries. To achieve this, the query has to be parsed into an AST.\n+\n+Which query syntax should be used for the abstract queries?\n+Which features should the syntax support?\n+\n+## Considered Options\n+\n+* Use a simplified syntax that is derived of the [lucene](https://lucene.apache.org/core/8_6_1/queryparser/org/apache/lucene/queryparser/classic/package-summary.html) query syntax\n+* Formulate a own query syntax\n+\n+## Decision Outcome\n+\n+Chosen option: \"Use a syntax that is derived of the lucene query syntax\", because only option that is already known, and easy to implemenent.\n+Furthermore parsers for lucene already exist and are tested.\n+For simplicitly, and lack of universal capabilities across fetchers, only basic query features and therefor syntax is supported:\n+\n+* All terms in the query are whitespace separated and will be ANDed\n+* Default and certain fielded terms are supported\n+* Fielded Terms:\n+  * author\n+  * title\n+  * journal\n+  * year (for single year)\n+  * year-range (for range e.g. year-range:2012-2015)\n+* The journal, year, and year-range fields should only be populated once in each query", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "467cbfc0171a789f8fff20506077948707eff8ec"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTY0Mjc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/importer/SearchBasedFetcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDo1OTozNlrOHJ0D_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDo1OTozNlrOHJ0D_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA1MjIyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // Default Implementation behaves like perform search using the default field phrases as query\n          \n          \n            \n                    // Default implementation behaves as performSearch using the default field phrases as query", "url": "https://github.com/JabRef/jabref/pull/6799#discussion_r480052222", "createdAt": "2020-08-31T10:59:36Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/importer/SearchBasedFetcher.java", "diffHunk": "@@ -26,7 +26,8 @@\n      * @return a list of {@link BibEntry}, which are matched by the query (may be empty)\n      */\n     default List<BibEntry> performComplexSearch(ComplexSearchQuery complexSearchQuery) throws FetcherException {\n-        // Default Implementation behaves like perform search using the default field as query\n-        return performSearch(complexSearchQuery.getDefaultField().orElse(\"\"));\n+        // Default Implementation behaves like perform search using the default field phrases as query", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "467cbfc0171a789f8fff20506077948707eff8ec"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTY0NTQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/importer/SearchBasedParserFetcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDo1OTo1N1rOHJ0FaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDo1OTo1N1rOHJ0FaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA1MjU4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // Default Implementation behaves like getURLForQuery using the default field phrases as query\n          \n          \n            \n                    // Default implementation behaves as getURLForQuery using the default field phrases as query", "url": "https://github.com/JabRef/jabref/pull/6799#discussion_r480052585", "createdAt": "2020-08-31T10:59:57Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/importer/SearchBasedParserFetcher.java", "diffHunk": "@@ -83,8 +83,9 @@\n     }\n \n     default URL getComplexQueryURL(ComplexSearchQuery complexSearchQuery) throws URISyntaxException, MalformedURLException, FetcherException {\n-        // Default Implementation behaves like getURLForQuery using the default field as query\n-        return this.getURLForQuery(complexSearchQuery.getDefaultField().orElse(\"\"));\n+        // Default Implementation behaves like getURLForQuery using the default field phrases as query", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "467cbfc0171a789f8fff20506077948707eff8ec"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTY2NDQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/importer/fetcher/ComplexSearchQuery.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMTowMjo1OFrOHJ0Q2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMTowMjo1OFrOHJ0Q2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA1NTUxMg==", "bodyText": "NumberFormatException should be catched here.\nSee https://docs.oracle.com/javase/7/docs/api/java/lang/Integer.html#valueOf(java.lang.String). I would use 0 and 9999 as default valuesto keep the search going.", "url": "https://github.com/JabRef/jabref/pull/6799#discussion_r480055512", "createdAt": "2020-08-31T11:02:58Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/importer/fetcher/ComplexSearchQuery.java", "diffHunk": "@@ -28,16 +31,32 @@ private ComplexSearchQuery(String defaultField, List<String> authors, List<Strin\n         this.singleYear = singleYear;\n     }\n \n-    public Optional<String> getDefaultField() {\n-        return Optional.ofNullable(defaultField);\n+    public static ComplexSearchQuery fromTerms(Collection<Term> terms) {\n+        ComplexSearchQueryBuilder builder = ComplexSearchQuery.builder();\n+        terms.forEach(term -> {\n+            String termText = term.text();\n+            switch (term.field().toLowerCase()) {\n+                case \"author\" -> builder.author(termText);\n+                case \"title\" -> builder.titlePhrase(termText);\n+                case \"journal\" -> builder.journal(termText);\n+                case \"year\" -> builder.singleYear(Integer.valueOf(termText));\n+                case \"year-range\" -> builder.fromYearAndToYear(Integer.valueOf(termText.split(\"-\")[0]), Integer.valueOf(termText.split(\"-\")[1]));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "467cbfc0171a789f8fff20506077948707eff8ec"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1697, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}