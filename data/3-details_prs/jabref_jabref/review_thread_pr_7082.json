{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3MTM0OTIz", "number": 7082, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QxMzozODo0NlrOE2WsRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMTo0NzoyMVrOE3MJpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NDMwMzQyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/importer/fetcher/GoogleScholar.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QxMzozODo0NlrOHvII9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QxNjowNjozM1rOHvI8-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE3ODQ4Nw==", "bodyText": "This struck me recently, isn't there a way to check if the exception is a more specific exception so that one could check for the status code number?", "url": "https://github.com/JabRef/jabref/pull/7082#discussion_r519178487", "createdAt": "2020-11-07T13:38:46Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/logic/importer/fetcher/GoogleScholar.java", "diffHunk": "@@ -259,4 +230,46 @@ private void obtainAndModifyCookie() throws FetcherException {\n             throw new FetcherException(\"Cookie configuration for Google Scholar failed.\", e);\n         }\n     }\n+\n+    @Override\n+    public Page<BibEntry> performSearchPaged(String query, int pageNumber) throws FetcherException {\n+        LOGGER.debug(\"Using URL {}\", query);\n+        obtainAndModifyCookie();\n+        List<BibEntry> foundEntries = new ArrayList<>(20);\n+\n+        URIBuilder uriBuilder = null;\n+        try {\n+            uriBuilder = new URIBuilder(BASIC_SEARCH_URL);\n+        } catch (URISyntaxException e) {\n+            throw new FetcherException(\"Error while fetching from \" + getName() + \" at URL \" + BASIC_SEARCH_URL, e);\n+        }\n+\n+        uriBuilder.addParameter(\"hl\", \"en\");\n+        uriBuilder.addParameter(\"start\", String.valueOf(pageNumber * getPageSize()));\n+        uriBuilder.addParameter(\"num\", String.valueOf(getPageSize()));\n+        uriBuilder.addParameter(\"btnG\", \"Search\");\n+        uriBuilder.addParameter(\"q\", query);\n+        String queryURL = uriBuilder.toString();\n+\n+        try {\n+            addHitsFromQuery(foundEntries, queryURL);\n+        } catch (IOException e) {\n+            // if there are too much requests from the same IP address google is answering with a 503 and redirecting to a captcha challenge\n+            // The caught IOException looks for example like this:\n+            // java.io.IOException: Server returned HTTP response code: 503 for URL: https://ipv4.google.com/sorry/index?continue=https://scholar.google.com/scholar%3Fhl%3Den%26btnG%3DSearch%26q%3Dbpmn&hl=en&q=CGMSBI0NBDkYuqy9wAUiGQDxp4NLQCWbIEY1HjpH5zFJhv4ANPGdWj0\n+            if (e.getMessage().contains(\"Server returned HTTP response code: 503 for URL\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "215c1772311e6c9e004685e935013bba4f066aab"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE5MTgwMg==", "bodyText": "I do not quite understand what the benefits of that would be.\nCould you provide me with an example to grasp your idea, please? :)", "url": "https://github.com/JabRef/jabref/pull/7082#discussion_r519191802", "createdAt": "2020-11-07T16:06:33Z", "author": {"login": "DominikVoigt"}, "path": "src/main/java/org/jabref/logic/importer/fetcher/GoogleScholar.java", "diffHunk": "@@ -259,4 +230,46 @@ private void obtainAndModifyCookie() throws FetcherException {\n             throw new FetcherException(\"Cookie configuration for Google Scholar failed.\", e);\n         }\n     }\n+\n+    @Override\n+    public Page<BibEntry> performSearchPaged(String query, int pageNumber) throws FetcherException {\n+        LOGGER.debug(\"Using URL {}\", query);\n+        obtainAndModifyCookie();\n+        List<BibEntry> foundEntries = new ArrayList<>(20);\n+\n+        URIBuilder uriBuilder = null;\n+        try {\n+            uriBuilder = new URIBuilder(BASIC_SEARCH_URL);\n+        } catch (URISyntaxException e) {\n+            throw new FetcherException(\"Error while fetching from \" + getName() + \" at URL \" + BASIC_SEARCH_URL, e);\n+        }\n+\n+        uriBuilder.addParameter(\"hl\", \"en\");\n+        uriBuilder.addParameter(\"start\", String.valueOf(pageNumber * getPageSize()));\n+        uriBuilder.addParameter(\"num\", String.valueOf(getPageSize()));\n+        uriBuilder.addParameter(\"btnG\", \"Search\");\n+        uriBuilder.addParameter(\"q\", query);\n+        String queryURL = uriBuilder.toString();\n+\n+        try {\n+            addHitsFromQuery(foundEntries, queryURL);\n+        } catch (IOException e) {\n+            // if there are too much requests from the same IP address google is answering with a 503 and redirecting to a captcha challenge\n+            // The caught IOException looks for example like this:\n+            // java.io.IOException: Server returned HTTP response code: 503 for URL: https://ipv4.google.com/sorry/index?continue=https://scholar.google.com/scholar%3Fhl%3Den%26btnG%3DSearch%26q%3Dbpmn&hl=en&q=CGMSBI0NBDkYuqy9wAUiGQDxp4NLQCWbIEY1HjpH5zFJhv4ANPGdWj0\n+            if (e.getMessage().contains(\"Server returned HTTP response code: 503 for URL\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE3ODQ4Nw=="}, "originalCommit": {"oid": "215c1772311e6c9e004685e935013bba4f066aab"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MzA1NTczOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/logic/importer/fetcher/IEEE.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMTo0NToyM1rOHwY2tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNTowNTowNVrOHyx4JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUwMDkxNw==", "bodyText": "This should be the default implementation, i.e. push to PagedSearchBasedParserFetcher", "url": "https://github.com/JabRef/jabref/pull/7082#discussion_r520500917", "createdAt": "2020-11-10T11:45:23Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/logic/importer/fetcher/IEEE.java", "diffHunk": "@@ -234,8 +228,31 @@ public String getName() {\n \n     @Override\n     public URL getComplexQueryURL(ComplexSearchQuery complexSearchQuery) throws URISyntaxException, MalformedURLException {\n+        return getComplexQueryURL(complexSearchQuery, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d862650dcd87cc45344770b73225d78c8dcc2d1"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQzMjE2MA==", "bodyText": "You have currently quite a lot of code duplications. The main sources are:\n\nComplex and string-based queries have to be implemented separately, leading to mostly the same code. Suggestion: remove string-based queries completely\nUnpaged search methods always fall back to paged search method with page number 0. Suggestion: put these fallbacks in the general PagedSearchFetcher interface.\n\n\nThanks for your feedback! :)\nRegarding 1:\nI think that this is a good idea but will require more work than just replacing the method.\nThis is because for the WebSearchPane for instance the normal string-based search is used as a fallback case when the query could not be parsed.\nTherefore I do not feel comfortable just tossing the string-based version.\nHowever, I will address this in the upcoming weeks :)!", "url": "https://github.com/JabRef/jabref/pull/7082#discussion_r521432160", "createdAt": "2020-11-11T15:20:42Z", "author": {"login": "DominikVoigt"}, "path": "src/main/java/org/jabref/logic/importer/fetcher/IEEE.java", "diffHunk": "@@ -234,8 +228,31 @@ public String getName() {\n \n     @Override\n     public URL getComplexQueryURL(ComplexSearchQuery complexSearchQuery) throws URISyntaxException, MalformedURLException {\n+        return getComplexQueryURL(complexSearchQuery, 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUwMDkxNw=="}, "originalCommit": {"oid": "4d862650dcd87cc45344770b73225d78c8dcc2d1"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQzMjM5Mw==", "bodyText": "I implemented all other suggestions", "url": "https://github.com/JabRef/jabref/pull/7082#discussion_r521432393", "createdAt": "2020-11-11T15:21:05Z", "author": {"login": "DominikVoigt"}, "path": "src/main/java/org/jabref/logic/importer/fetcher/IEEE.java", "diffHunk": "@@ -234,8 +228,31 @@ public String getName() {\n \n     @Override\n     public URL getComplexQueryURL(ComplexSearchQuery complexSearchQuery) throws URISyntaxException, MalformedURLException {\n+        return getComplexQueryURL(complexSearchQuery, 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUwMDkxNw=="}, "originalCommit": {"oid": "4d862650dcd87cc45344770b73225d78c8dcc2d1"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ4ODU2Mg==", "bodyText": "Good!\nConcerning the first point, doesn't it work to parse the queries as follows:\nauthor=me and title=something -> ComplexQuery[author: \"me\", title: \"something\", rest: \"\"]\nauthor=me something -> ComplexQuery[author: \"me\", title: \"\", rest: \"something\"]\nsomething -> ComplexQuery[author: \"\", title: \"\", rest: \"\"something]\nThen you don't need any fall-back to a purely string-based search.\nIn my opinion, this question should be resolved before changing the fetcher in other ways. Otherwise you have a lot of overhead/code duplication now, that will be removed later.", "url": "https://github.com/JabRef/jabref/pull/7082#discussion_r521488562", "createdAt": "2020-11-11T16:39:35Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/logic/importer/fetcher/IEEE.java", "diffHunk": "@@ -234,8 +228,31 @@ public String getName() {\n \n     @Override\n     public URL getComplexQueryURL(ComplexSearchQuery complexSearchQuery) throws URISyntaxException, MalformedURLException {\n+        return getComplexQueryURL(complexSearchQuery, 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUwMDkxNw=="}, "originalCommit": {"oid": "4d862650dcd87cc45344770b73225d78c8dcc2d1"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEyOTAzNQ==", "bodyText": "I now removed the normal performSearch all together :)", "url": "https://github.com/JabRef/jabref/pull/7082#discussion_r522129035", "createdAt": "2020-11-12T14:04:35Z", "author": {"login": "DominikVoigt"}, "path": "src/main/java/org/jabref/logic/importer/fetcher/IEEE.java", "diffHunk": "@@ -234,8 +228,31 @@ public String getName() {\n \n     @Override\n     public URL getComplexQueryURL(ComplexSearchQuery complexSearchQuery) throws URISyntaxException, MalformedURLException {\n+        return getComplexQueryURL(complexSearchQuery, 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUwMDkxNw=="}, "originalCommit": {"oid": "4d862650dcd87cc45344770b73225d78c8dcc2d1"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ0ODU0MQ==", "bodyText": "Thanks a lot! If you now also remove the \"complex\" in the names, I'm super happy ;-)", "url": "https://github.com/JabRef/jabref/pull/7082#discussion_r522448541", "createdAt": "2020-11-12T21:51:22Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/logic/importer/fetcher/IEEE.java", "diffHunk": "@@ -234,8 +228,31 @@ public String getName() {\n \n     @Override\n     public URL getComplexQueryURL(ComplexSearchQuery complexSearchQuery) throws URISyntaxException, MalformedURLException {\n+        return getComplexQueryURL(complexSearchQuery, 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUwMDkxNw=="}, "originalCommit": {"oid": "4d862650dcd87cc45344770b73225d78c8dcc2d1"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAwODAzNw==", "bodyText": "I now removed the complex from perform search :)\nRegarding the query object, I believe that it is sensible to keep that name as it will be extended in the future such as structured information.", "url": "https://github.com/JabRef/jabref/pull/7082#discussion_r523008037", "createdAt": "2020-11-13T15:05:05Z", "author": {"login": "DominikVoigt"}, "path": "src/main/java/org/jabref/logic/importer/fetcher/IEEE.java", "diffHunk": "@@ -234,8 +228,31 @@ public String getName() {\n \n     @Override\n     public URL getComplexQueryURL(ComplexSearchQuery complexSearchQuery) throws URISyntaxException, MalformedURLException {\n+        return getComplexQueryURL(complexSearchQuery, 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUwMDkxNw=="}, "originalCommit": {"oid": "4d862650dcd87cc45344770b73225d78c8dcc2d1"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MzA2MjE1OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/jabref/logic/importer/fetcher/SpringerFetcherTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMTo0NzoyMVrOHwY6uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMTo0NzoyMVrOHwY6uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUwMTk0Nw==", "bodyText": "That is a good general test that should exist for every paged fetcher, thus I suggest to move it to the general test class (not sure about the name, maybe PagedSearchFetcherTests?)", "url": "https://github.com/JabRef/jabref/pull/7082#discussion_r520501947", "createdAt": "2020-11-10T11:47:21Z", "author": {"login": "tobiasdiez"}, "path": "src/test/java/org/jabref/logic/importer/fetcher/SpringerFetcherTest.java", "diffHunk": "@@ -132,6 +134,20 @@ public void supportsBooleanANDSearch() throws Exception {\n                           .map(Optional::get).forEach(authorField -> assertTrue(authorField.contains(\"Redmiles\")));\n     }\n \n+    /**\n+     * Ensure that different page return different entries\n+     */\n+    @Test\n+    public void pageSearchReturnsUniqueResultsPerPage() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d862650dcd87cc45344770b73225d78c8dcc2d1"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2187, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}