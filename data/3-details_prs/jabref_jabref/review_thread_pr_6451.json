{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1NDU1MzEx", "number": 6451, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwOToxODoyMVrOD7kH7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNjowNjoxMlrOEAk4BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzg0NDI4OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/jabref/gui/externalfiles/AutoSetFileLinksUtilTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwOToxODoyMVrOGT9vlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMzo1NDowNlrOGUHxoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU4NzczMw==", "bodyText": "Why did you move the mockings here?", "url": "https://github.com/JabRef/jabref/pull/6451#discussion_r423587733", "createdAt": "2020-05-12T09:18:21Z", "author": {"login": "Siedlerchr"}, "path": "src/test/java/org/jabref/gui/externalfiles/AutoSetFileLinksUtilTest.java", "diffHunk": "@@ -30,24 +30,33 @@\n     private final BibDatabaseContext databaseContext = mock(BibDatabaseContext.class);\n     private final ExternalFileTypes externalFileTypes = mock(ExternalFileTypes.class);\n     private final BibEntry entry = new BibEntry(StandardEntryType.Article);\n+    private Path path = null;\n \n     @BeforeEach\n     public void setUp(@TempDir Path folder) throws Exception {\n-        Path path = folder.resolve(\"CiteKey.pdf\");\n+        path = folder.resolve(\"CiteKey.pdf\");\n         Files.createFile(path);\n         entry.setCiteKey(\"CiteKey\");\n-        when(databaseContext.getFileDirectoriesAsPaths(any())).thenReturn(Collections.singletonList(path.getParent()));\n-        when(externalFileTypes.getExternalFileTypeSelection()).thenReturn(new TreeSet<>(ExternalFileTypes.getDefaultExternalFileTypes()));\n     }\n \n     @Test\n-    public void test() throws Exception {\n+    public void testFindAssociatedNotLinkedFilesSuccess() throws Exception {\n         // Due to mocking the externalFileType class, the file extension will not be found\n \n+        when(databaseContext.getFileDirectoriesAsPaths(any())).thenReturn(Collections.singletonList(path.getParent()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3df1342bdb84ae24cb8233039f4791d67650c4ec"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc0MzgyMw==", "bodyText": "This mocking of getFileDirectoriesAsPaths method returns non empty values, which is not applicable for the newly added test case testFindAssociatedNotLinkedFilesForEmptySearchDir. The new test case expects that getFileDirectoriesAsPaths would return empty list.", "url": "https://github.com/JabRef/jabref/pull/6451#discussion_r423743823", "createdAt": "2020-05-12T13:43:37Z", "author": {"login": "silverhorse"}, "path": "src/test/java/org/jabref/gui/externalfiles/AutoSetFileLinksUtilTest.java", "diffHunk": "@@ -30,24 +30,33 @@\n     private final BibDatabaseContext databaseContext = mock(BibDatabaseContext.class);\n     private final ExternalFileTypes externalFileTypes = mock(ExternalFileTypes.class);\n     private final BibEntry entry = new BibEntry(StandardEntryType.Article);\n+    private Path path = null;\n \n     @BeforeEach\n     public void setUp(@TempDir Path folder) throws Exception {\n-        Path path = folder.resolve(\"CiteKey.pdf\");\n+        path = folder.resolve(\"CiteKey.pdf\");\n         Files.createFile(path);\n         entry.setCiteKey(\"CiteKey\");\n-        when(databaseContext.getFileDirectoriesAsPaths(any())).thenReturn(Collections.singletonList(path.getParent()));\n-        when(externalFileTypes.getExternalFileTypeSelection()).thenReturn(new TreeSet<>(ExternalFileTypes.getDefaultExternalFileTypes()));\n     }\n \n     @Test\n-    public void test() throws Exception {\n+    public void testFindAssociatedNotLinkedFilesSuccess() throws Exception {\n         // Due to mocking the externalFileType class, the file extension will not be found\n \n+        when(databaseContext.getFileDirectoriesAsPaths(any())).thenReturn(Collections.singletonList(path.getParent()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU4NzczMw=="}, "originalCommit": {"oid": "3df1342bdb84ae24cb8233039f4791d67650c4ec"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc0ODE4Nw==", "bodyText": "Okay, but the externalFileType should be independent of this", "url": "https://github.com/JabRef/jabref/pull/6451#discussion_r423748187", "createdAt": "2020-05-12T13:49:14Z", "author": {"login": "Siedlerchr"}, "path": "src/test/java/org/jabref/gui/externalfiles/AutoSetFileLinksUtilTest.java", "diffHunk": "@@ -30,24 +30,33 @@\n     private final BibDatabaseContext databaseContext = mock(BibDatabaseContext.class);\n     private final ExternalFileTypes externalFileTypes = mock(ExternalFileTypes.class);\n     private final BibEntry entry = new BibEntry(StandardEntryType.Article);\n+    private Path path = null;\n \n     @BeforeEach\n     public void setUp(@TempDir Path folder) throws Exception {\n-        Path path = folder.resolve(\"CiteKey.pdf\");\n+        path = folder.resolve(\"CiteKey.pdf\");\n         Files.createFile(path);\n         entry.setCiteKey(\"CiteKey\");\n-        when(databaseContext.getFileDirectoriesAsPaths(any())).thenReturn(Collections.singletonList(path.getParent()));\n-        when(externalFileTypes.getExternalFileTypeSelection()).thenReturn(new TreeSet<>(ExternalFileTypes.getDefaultExternalFileTypes()));\n     }\n \n     @Test\n-    public void test() throws Exception {\n+    public void testFindAssociatedNotLinkedFilesSuccess() throws Exception {\n         // Due to mocking the externalFileType class, the file extension will not be found\n \n+        when(databaseContext.getFileDirectoriesAsPaths(any())).thenReturn(Collections.singletonList(path.getParent()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU4NzczMw=="}, "originalCommit": {"oid": "3df1342bdb84ae24cb8233039f4791d67650c4ec"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc1MjA5Ng==", "bodyText": "yeah, agreed. I will move that one back to setup.", "url": "https://github.com/JabRef/jabref/pull/6451#discussion_r423752096", "createdAt": "2020-05-12T13:54:06Z", "author": {"login": "silverhorse"}, "path": "src/test/java/org/jabref/gui/externalfiles/AutoSetFileLinksUtilTest.java", "diffHunk": "@@ -30,24 +30,33 @@\n     private final BibDatabaseContext databaseContext = mock(BibDatabaseContext.class);\n     private final ExternalFileTypes externalFileTypes = mock(ExternalFileTypes.class);\n     private final BibEntry entry = new BibEntry(StandardEntryType.Article);\n+    private Path path = null;\n \n     @BeforeEach\n     public void setUp(@TempDir Path folder) throws Exception {\n-        Path path = folder.resolve(\"CiteKey.pdf\");\n+        path = folder.resolve(\"CiteKey.pdf\");\n         Files.createFile(path);\n         entry.setCiteKey(\"CiteKey\");\n-        when(databaseContext.getFileDirectoriesAsPaths(any())).thenReturn(Collections.singletonList(path.getParent()));\n-        when(externalFileTypes.getExternalFileTypeSelection()).thenReturn(new TreeSet<>(ExternalFileTypes.getDefaultExternalFileTypes()));\n     }\n \n     @Test\n-    public void test() throws Exception {\n+    public void testFindAssociatedNotLinkedFilesSuccess() throws Exception {\n         // Due to mocking the externalFileType class, the file extension will not be found\n \n+        when(databaseContext.getFileDirectoriesAsPaths(any())).thenReturn(Collections.singletonList(path.getParent()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU4NzczMw=="}, "originalCommit": {"oid": "3df1342bdb84ae24cb8233039f4791d67650c4ec"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDM5NjIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/preferences/FileTab.fxml", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNjowNjoxMlrOGb8Thw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNjozMzoxNVrOGb9auA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk1Mjc3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                <CheckBox fx:id=\"useBibLocationAsPrimary\" text=\"%Search for files relative to BIB file location\">\n          \n          \n            \n                <CheckBox fx:id=\"useBibLocationAsPrimary\" text=\"%Search and store files relative to BIB file location\">", "url": "https://github.com/JabRef/jabref/pull/6451#discussion_r431952775", "createdAt": "2020-05-28T16:06:12Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/gui/preferences/FileTab.fxml", "diffHunk": "@@ -43,7 +43,7 @@\n         <TextField fx:id=\"mainFileDir\" HBox.hgrow=\"ALWAYS\"/>\n         <Button onAction=\"#mainFileDirBrowse\" text=\"%Browse\"/>\n     </HBox>\n-    <CheckBox fx:id=\"useBibLocationAsPrimary\" text=\"%Use the BIB file location as primary file directory\">\n+    <CheckBox fx:id=\"useBibLocationAsPrimary\" text=\"%Search for files relative to BIB file location\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5668049e6fef7a7c25d84cb9b8119da472a67090"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk1ODEyNA==", "bodyText": "and maybe replace \"bib file\" with \"library file\" to be consistent with the more recent usage", "url": "https://github.com/JabRef/jabref/pull/6451#discussion_r431958124", "createdAt": "2020-05-28T16:13:39Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/preferences/FileTab.fxml", "diffHunk": "@@ -43,7 +43,7 @@\n         <TextField fx:id=\"mainFileDir\" HBox.hgrow=\"ALWAYS\"/>\n         <Button onAction=\"#mainFileDirBrowse\" text=\"%Browse\"/>\n     </HBox>\n-    <CheckBox fx:id=\"useBibLocationAsPrimary\" text=\"%Use the BIB file location as primary file directory\">\n+    <CheckBox fx:id=\"useBibLocationAsPrimary\" text=\"%Search for files relative to BIB file location\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk1Mjc3NQ=="}, "originalCommit": {"oid": "5668049e6fef7a7c25d84cb9b8119da472a67090"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk3MTAwMA==", "bodyText": "done", "url": "https://github.com/JabRef/jabref/pull/6451#discussion_r431971000", "createdAt": "2020-05-28T16:33:15Z", "author": {"login": "abadar"}, "path": "src/main/java/org/jabref/gui/preferences/FileTab.fxml", "diffHunk": "@@ -43,7 +43,7 @@\n         <TextField fx:id=\"mainFileDir\" HBox.hgrow=\"ALWAYS\"/>\n         <Button onAction=\"#mainFileDirBrowse\" text=\"%Browse\"/>\n     </HBox>\n-    <CheckBox fx:id=\"useBibLocationAsPrimary\" text=\"%Use the BIB file location as primary file directory\">\n+    <CheckBox fx:id=\"useBibLocationAsPrimary\" text=\"%Search for files relative to BIB file location\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk1Mjc3NQ=="}, "originalCommit": {"oid": "5668049e6fef7a7c25d84cb9b8119da472a67090"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1826, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}