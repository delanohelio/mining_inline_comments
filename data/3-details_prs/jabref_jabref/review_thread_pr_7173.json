{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0NTU5NTc5", "number": 7173, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOToyNjoxNlrOFFKtcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxNjoyNTo1MFrOFNT4Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTYyNjczOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/maintable/BibEntryTableViewModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOToyNjoxNlrOIFiiAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOToyNjoxNlrOIFiiAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY3OTU1NA==", "bodyText": "Here we can change the dependence to only be on StandardField.GROUPS again. It could be argued that this change is out of the scope of this PR and has potential performance effects.", "url": "https://github.com/JabRef/jabref/pull/7173#discussion_r542679554", "createdAt": "2020-12-14T19:26:16Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/main/java/org/jabref/gui/maintable/BibEntryTableViewModel.java", "diffHunk": "@@ -68,18 +71,29 @@ public BibEntry getEntry() {\n     }\n \n     private static ObservableValue<List<AbstractGroup>> createMatchedGroupsBinding(BibDatabaseContext database, BibEntry entry) {\n-        Optional<GroupTreeNode> root = database.getMetaData().getGroups();\n-        if (root.isPresent()) {\n-            return EasyBind.map(entry.getFieldBinding(StandardField.GROUPS), field -> {\n-                List<AbstractGroup> groups = root.get().getMatchingGroups(entry)\n-                                                 .stream()\n-                                                 .map(GroupTreeNode::getGroup)\n-                                                 .collect(Collectors.toList());\n-                groups.remove(root.get().getGroup());\n-                return groups;\n-            });\n-        }\n-        return new SimpleObjectProperty<>(Collections.emptyList());\n+        ObservableValue<List<AbstractGroup>> groupsBinding = new ObjectBinding<List<AbstractGroup>>() {\n+            {\n+                bind(entry.getFieldsObservable(), entry.typeProperty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42dc97bf2c7f88fdc07ec219d5a0dc451c71f9ad"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MzMxMDkwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/model/groups/TexGroup.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQxMzo0MTowNVrOIM--Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wM1QyMjoxNjo1MlrOINiHow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ4NTUwNg==", "bodyText": "In the best case, the invalidation would bubble up automatically from the group along the whole tree. So somehing along the following lines:\n\nMake each Group an observable value that is invalidated when it's properties change. Could be done by making AbstractGroup derive from PreboundBinding, change keysUsedInAux to an observable set, and invoke super(keysUsedInAux) in the constructor\nInvalidate the grouptreenode as soon as the group is invalidated. Should be possible by letting TreeNode derive from PreboundBinding, and then use an extractor here https://github.com/JabRef/jabref/blob/master/src/main/java/org/jabref/model/TreeNode.java#L59 to invalidate the list, when one of the nodes changes.\nThen the root should be invalidated whenever one of the groups reports that is invalidate/changed.\n\nHowever, that is more work, so I'm fine with this top-down-approach for now as well.", "url": "https://github.com/JabRef/jabref/pull/7173#discussion_r550485506", "createdAt": "2020-12-31T13:41:05Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/model/groups/TexGroup.java", "diffHunk": "@@ -119,6 +120,7 @@ public Path getFilePath() {\n     public void fileUpdated() {\n         // Reset previous parse result\n         keysUsedInAux = null;\n+        DefaultTaskExecutor.runInJavaFXThread(() -> metaData.groupsBinding().invalidate());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d9af99c25b1f07dfe70c0119c43f400a47568b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ5NTk0MA==", "bodyText": "I think I'll skip making it observable. It feels like a rabbit-hole that I don't believe I have the JavaFX know-how to dig myself out of (yet). Making GroupTreeNode#getMatchingGroups observable after extending with PreboundBinding would be another low hanging fruit.\nThe remaining question would be if from a MVVC point-of-view, does it make more sense to implement the fileUpdate method \n  \n    \n      jabref/src/main/java/org/jabref/model/groups/TexGroup.java\n    \n    \n         Line 119\n      in\n      afdb194\n    \n    \n    \n    \n\n        \n          \n           public void fileUpdated() { \n        \n    \n  \n\n\nin the GroupNodeViewModel, i.e., \"initialize\" it similar to the AutomaticPersonsGroup\n\n  \n    \n      jabref/src/main/java/org/jabref/gui/groups/GroupNodeViewModel.java\n    \n    \n         Line 73\n      in\n      afdb194\n    \n    \n    \n    \n\n        \n          \n           if (groupNode.getGroup() instanceof AutomaticGroup) { \n        \n    \n  \n\n\nand then \"invalidate\" (keysUsedInAux = null) from the ViewModel?", "url": "https://github.com/JabRef/jabref/pull/7173#discussion_r550495940", "createdAt": "2020-12-31T14:38:09Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/main/java/org/jabref/model/groups/TexGroup.java", "diffHunk": "@@ -119,6 +120,7 @@ public Path getFilePath() {\n     public void fileUpdated() {\n         // Reset previous parse result\n         keysUsedInAux = null;\n+        DefaultTaskExecutor.runInJavaFXThread(() -> metaData.groupsBinding().invalidate());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ4NTUwNg=="}, "originalCommit": {"oid": "73d9af99c25b1f07dfe70c0119c43f400a47568b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc3OTYwNg==", "bodyText": "No, it's fine that the texgroup invalidates the root - that's actually good design, as both of these life in the model. You don't want to take care of this through the UI classes (ViewModel).\nCan you please remove the DefaultTaskExecutor.runInJavaFXThread part. The BindingsHelper has a forUI helper method that allows you consume change events on the JavaFX thread.", "url": "https://github.com/JabRef/jabref/pull/7173#discussion_r550779606", "createdAt": "2021-01-01T15:42:34Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/model/groups/TexGroup.java", "diffHunk": "@@ -119,6 +120,7 @@ public Path getFilePath() {\n     public void fileUpdated() {\n         // Reset previous parse result\n         keysUsedInAux = null;\n+        DefaultTaskExecutor.runInJavaFXThread(() -> metaData.groupsBinding().invalidate());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ4NTUwNg=="}, "originalCommit": {"oid": "73d9af99c25b1f07dfe70c0119c43f400a47568b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgwMDEzNA==", "bodyText": "Sure! I'll create an UiThreadOptionalBinding wrapper and add a BindingsHelper#forUI method for it. I might have to make some additional changes so that MetaData can be created without running an update on the UI thread.", "url": "https://github.com/JabRef/jabref/pull/7173#discussion_r550800134", "createdAt": "2021-01-01T19:46:01Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/main/java/org/jabref/model/groups/TexGroup.java", "diffHunk": "@@ -119,6 +120,7 @@ public Path getFilePath() {\n     public void fileUpdated() {\n         // Reset previous parse result\n         keysUsedInAux = null;\n+        DefaultTaskExecutor.runInJavaFXThread(() -> metaData.groupsBinding().invalidate());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ4NTUwNg=="}, "originalCommit": {"oid": "73d9af99c25b1f07dfe70c0119c43f400a47568b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTAyOTUwNQ==", "bodyText": "I remember we talked once in a devcall about abandoning the google event bus and using observables or properties instead, but I think this is stuff for some far future changes...", "url": "https://github.com/JabRef/jabref/pull/7173#discussion_r551029505", "createdAt": "2021-01-03T16:57:39Z", "author": {"login": "calixtus"}, "path": "src/main/java/org/jabref/model/groups/TexGroup.java", "diffHunk": "@@ -119,6 +120,7 @@ public Path getFilePath() {\n     public void fileUpdated() {\n         // Reset previous parse result\n         keysUsedInAux = null;\n+        DefaultTaskExecutor.runInJavaFXThread(() -> metaData.groupsBinding().invalidate());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ4NTUwNg=="}, "originalCommit": {"oid": "73d9af99c25b1f07dfe70c0119c43f400a47568b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTA2MTQxMQ==", "bodyText": "I might return and look more at it for groups at a later point. I just feel that my JavaFX knowledge is not up to task for it yet. I need to experiment with it more, on something less impactful \ud83d\ude1d", "url": "https://github.com/JabRef/jabref/pull/7173#discussion_r551061411", "createdAt": "2021-01-03T22:16:52Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/main/java/org/jabref/model/groups/TexGroup.java", "diffHunk": "@@ -119,6 +120,7 @@ public Path getFilePath() {\n     public void fileUpdated() {\n         // Reset previous parse result\n         keysUsedInAux = null;\n+        DefaultTaskExecutor.runInJavaFXThread(() -> metaData.groupsBinding().invalidate());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ4NTUwNg=="}, "originalCommit": {"oid": "73d9af99c25b1f07dfe70c0119c43f400a47568b"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4OTY3NzE5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/model/metadata/MetaData.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOVQxMTo1Nzo1M1rOIQuDAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOVQxMjowMjowMVrOIQuKmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQwMjU2Mw==", "bodyText": "The model and logic packages need to be free of gui stuff. The wrapping on the JavaFX thread should happen right before it is displayed.", "url": "https://github.com/JabRef/jabref/pull/7173#discussion_r554402563", "createdAt": "2021-01-09T11:57:53Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/model/metadata/MetaData.java", "diffHunk": "@@ -9,7 +9,11 @@\n import java.util.Objects;\n import java.util.Optional;\n \n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+\n import org.jabref.architecture.AllowedToUseLogic;\n+import org.jabref.gui.util.uithreadaware.UiThreadOptionalBinding;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4d051d2893f16146fdfb2093386c6369588accf"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQwNDUwNw==", "bodyText": "@JabRef/developers Our architecture tests don't work anymore?! This is clearly a violation but the tests pass.", "url": "https://github.com/JabRef/jabref/pull/7173#discussion_r554404507", "createdAt": "2021-01-09T12:02:01Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/model/metadata/MetaData.java", "diffHunk": "@@ -9,7 +9,11 @@\n import java.util.Objects;\n import java.util.Optional;\n \n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+\n import org.jabref.architecture.AllowedToUseLogic;\n+import org.jabref.gui.util.uithreadaware.UiThreadOptionalBinding;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQwMjU2Mw=="}, "originalCommit": {"oid": "f4d051d2893f16146fdfb2093386c6369588accf"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4OTY4Mjc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/model/metadata/MetaData.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOVQxMTo1OTo1NVrOIQuG_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQyMTo1NjozOVrOISW-Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQwMzU4MQ==", "bodyText": "I would make groupsRoot already an OptionalObjectProperty", "url": "https://github.com/JabRef/jabref/pull/7173#discussion_r554403581", "createdAt": "2021-01-09T11:59:55Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/model/metadata/MetaData.java", "diffHunk": "@@ -51,7 +57,8 @@\n     private final Map<EntryType, String> citeKeyPatterns = new HashMap<>(); // <BibType, Pattern>\n     private final Map<String, String> userFileDirectory = new HashMap<>(); // <User, FilePath>\n     private final Map<String, Path> laTexFileDirectory = new HashMap<>(); // <User, FilePath>\n-    private GroupTreeNode groupsRoot;\n+    private final ObjectProperty<GroupTreeNode> groupsRoot = new SimpleObjectProperty<>(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4d051d2893f16146fdfb2093386c6369588accf"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjExMjA3OQ==", "bodyText": "I'll have to think more about this one. I keep ending up with OptionalWrapper<Optional<GroupTreeNode>> \ud83d\ude1b", "url": "https://github.com/JabRef/jabref/pull/7173#discussion_r556112079", "createdAt": "2021-01-12T21:38:05Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/main/java/org/jabref/model/metadata/MetaData.java", "diffHunk": "@@ -51,7 +57,8 @@\n     private final Map<EntryType, String> citeKeyPatterns = new HashMap<>(); // <BibType, Pattern>\n     private final Map<String, String> userFileDirectory = new HashMap<>(); // <User, FilePath>\n     private final Map<String, Path> laTexFileDirectory = new HashMap<>(); // <User, FilePath>\n-    private GroupTreeNode groupsRoot;\n+    private final ObjectProperty<GroupTreeNode> groupsRoot = new SimpleObjectProperty<>(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQwMzU4MQ=="}, "originalCommit": {"oid": "f4d051d2893f16146fdfb2093386c6369588accf"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjEyMTY5OQ==", "bodyText": "OptionalObjectProperty<GroupTreeNode> groupsRoot = OptionalObjectProperty.empty();\nOptionalBinding<GroupTreeNode> groupsRootBinding = new OptionalWrapper<>(groupsRoot.orElse(null));\n\nThis is what ends up making the most sense to me. I'll add it to my todo-list for the follow up PR.", "url": "https://github.com/JabRef/jabref/pull/7173#discussion_r556121699", "createdAt": "2021-01-12T21:56:39Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/main/java/org/jabref/model/metadata/MetaData.java", "diffHunk": "@@ -51,7 +57,8 @@\n     private final Map<EntryType, String> citeKeyPatterns = new HashMap<>(); // <BibType, Pattern>\n     private final Map<String, String> userFileDirectory = new HashMap<>(); // <User, FilePath>\n     private final Map<String, Path> laTexFileDirectory = new HashMap<>(); // <User, FilePath>\n-    private GroupTreeNode groupsRoot;\n+    private final ObjectProperty<GroupTreeNode> groupsRoot = new SimpleObjectProperty<>(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQwMzU4MQ=="}, "originalCommit": {"oid": "f4d051d2893f16146fdfb2093386c6369588accf"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NTAxNDY3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/maintable/BibEntryTableViewModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxNjoyNTo1MFrOIRdLVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxOTo1NTo0M1rOIRk4jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTE3NDc0Mw==", "bodyText": "Should this binding be modified to depend on any changes in the bibentry? #7325 depends on keyword field, instead of group field. Free text search depends on all fields. Should it be in a different PR? Personally I'd prefer if createMatchedGroupsBinding could be changed to return a FilteredList, but that would likely take me a while to implement...", "url": "https://github.com/JabRef/jabref/pull/7173#discussion_r555174743", "createdAt": "2021-01-11T16:25:50Z", "author": {"login": "k3KAW8Pnf7mkmdSMPHz27"}, "path": "src/main/java/org/jabref/gui/maintable/BibEntryTableViewModel.java", "diffHunk": "@@ -67,19 +69,15 @@ public BibEntry getEntry() {\n         return entry;\n     }\n \n-    private static ObservableValue<List<AbstractGroup>> createMatchedGroupsBinding(BibDatabaseContext database, BibEntry entry) {\n-        Optional<GroupTreeNode> root = database.getMetaData().getGroups();\n-        if (root.isPresent()) {\n-            return EasyBind.map(entry.getFieldBinding(StandardField.GROUPS), field -> {\n-                List<AbstractGroup> groups = root.get().getMatchingGroups(entry)\n-                                                 .stream()\n-                                                 .map(GroupTreeNode::getGroup)\n-                                                 .collect(Collectors.toList());\n-                groups.remove(root.get().getGroup());\n-                return groups;\n-            });\n-        }\n-        return new SimpleObjectProperty<>(Collections.emptyList());\n+    private static Binding<List<AbstractGroup>> createMatchedGroupsBinding(BibDatabaseContext database, BibEntry entry) {\n+        return new UiThreadBinding<>(EasyBind.combine(entry.getFieldBinding(StandardField.GROUPS), database.getMetaData().groupsBinding(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c98807db4bbe878efb8278268f2a0dbf182ca59"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMwMTAwNg==", "bodyText": "Yes, I think it's a good idea to listen to changes of the entry. Let's discuss this in a follow-up PR, since this one looks already good.", "url": "https://github.com/JabRef/jabref/pull/7173#discussion_r555301006", "createdAt": "2021-01-11T19:55:43Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/gui/maintable/BibEntryTableViewModel.java", "diffHunk": "@@ -67,19 +69,15 @@ public BibEntry getEntry() {\n         return entry;\n     }\n \n-    private static ObservableValue<List<AbstractGroup>> createMatchedGroupsBinding(BibDatabaseContext database, BibEntry entry) {\n-        Optional<GroupTreeNode> root = database.getMetaData().getGroups();\n-        if (root.isPresent()) {\n-            return EasyBind.map(entry.getFieldBinding(StandardField.GROUPS), field -> {\n-                List<AbstractGroup> groups = root.get().getMatchingGroups(entry)\n-                                                 .stream()\n-                                                 .map(GroupTreeNode::getGroup)\n-                                                 .collect(Collectors.toList());\n-                groups.remove(root.get().getGroup());\n-                return groups;\n-            });\n-        }\n-        return new SimpleObjectProperty<>(Collections.emptyList());\n+    private static Binding<List<AbstractGroup>> createMatchedGroupsBinding(BibDatabaseContext database, BibEntry entry) {\n+        return new UiThreadBinding<>(EasyBind.combine(entry.getFieldBinding(StandardField.GROUPS), database.getMetaData().groupsBinding(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTE3NDc0Mw=="}, "originalCommit": {"oid": "6c98807db4bbe878efb8278268f2a0dbf182ca59"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2128, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}