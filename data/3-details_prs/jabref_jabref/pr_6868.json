{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc5NDM0NzA0", "number": 6868, "title": "Fixes Shared Database: Changes filtering in CoarseChangeFilter to attribute property", "bodyText": "WIth further investigations on the already closed issue #6663 I changed the function of CoarseChangeFilter.java. Following problems I encountered with the actual version:\n\nThe database sometimes hangs up when an actual event (directly via eventBus.post) triggers database synchronization at the same time as a delayed event (delayed via delayPost.schedule). Apparently, this should be avoided.\nDelaying an event post via DelayTaskThrottler causes the subsequent actions on event listening (e.g. in DBMSSynchronizer) to run on a new thread concurrently. If I have a large shared library (~5600 entries), it takes some seconds to pull changes. A delayed event that induces database synchronization ignores all field changes within synchronization time. These are then lost.\nThere is no other option fetching non-saved field changes because these events are completely filtered out. DBMSSynchronizer does not see them at all.\n\nMy new proposal includes an additional attribute filteredOut in BibDatabaseContextChangedEvent. You can set it if the event may be filtered out by a listening method. The corresponding constructor has to be called in every child class (e.g. MetaDataChangedEvent or EntriesEvent). The according functionality has been updated in AutosaveManager and BackupManager.\nHow can the remaining field changes be saved that are marked by filteredOut == true? I tried to introduce a lastEntryChanged attribute in DBMSSynchronizer that indicate which BibEntry these unsaved changes are bound to. At every event that has been listened to last entry changes are synchronized via pullWithLastEntry. Finally, unsaved field changes are also caught at closing the shared database. So DBMSSynchronizer.closeSharedDatabase calls pullLastEntryChanges. This method only synchronizes the database if unsaved field changes still remain.\nMaybe you could look at the proposals. The main reason for that changes is that delayed event post does not work with synchronization of large shared databases.\nPS: DelayTaskThrottler has been extended by a method to immediately run a previously scheduled task. This had be done in accordance to the possibility of the executor service ScheduledThreadPoolExecutor.\n\n\n Change in CHANGELOG.md described (if applicable)\n Tests created for changes (if applicable)\n Manually tested changed features in running JabRef (always required)\n Checked documentation: Is the information available and up to date? If not created an issue at https://github.com/JabRef/user-documentation/issues or, even better, submitted a pull request to the documentation repository.", "createdAt": "2020-09-04T08:24:38Z", "url": "https://github.com/JabRef/jabref/pull/6868", "merged": true, "mergeCommit": {"oid": "a0ca87530991900db5b34df3683aa010dffe97c8"}, "closed": true, "closedAt": "2020-09-26T05:39:16Z", "author": {"login": "m-mauersberger"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdFgOjhgH2gAyNDc5NDM0NzA0OjU3NTllMDFhNjU4Njg3YmU3OTU2MDhjNjQ3ZGM0NWM1MzVhYjEyOTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdMjr5WgFqTQ5Njk0MzcyOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5759e01a658687be795608c647dc45c535ab1293", "author": {"user": {"login": "m-mauersberger", "name": "Michael Mauersberger"}}, "url": "https://github.com/JabRef/jabref/commit/5759e01a658687be795608c647dc45c535ab1293", "committedDate": "2020-09-04T07:39:43Z", "message": "Filtering collapsed to assigning an attribute of a BibDatabaseContextChangedEvent (filteredOut): true - event may be filtered out, false - event may not be filtered out\n\nBibDatabaseContextChangedEvent got a filteredOut attribute to account for general event filtering. Super class constructors are called within inheriting classes.\n\nLast FieldChangedEvents that has not been synchronized (due to filteredOut==true) are synchronized at any other event in DBMSSynchronizer or closing the database( DBMSSynchronizer.closeSharedDatabase)."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ae59d7a66c9001fb880477ed73a28a441ec9841", "author": {"user": {"login": "m-mauersberger", "name": "Michael Mauersberger"}}, "url": "https://github.com/JabRef/jabref/commit/8ae59d7a66c9001fb880477ed73a28a441ec9841", "committedDate": "2020-09-04T08:28:12Z", "message": "Remove unused imports"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMjAxOTY5", "url": "https://github.com/JabRef/jabref/pull/6868#pullrequestreview-492201969", "createdAt": "2020-09-20T15:25:27Z", "commit": {"oid": "8ae59d7a66c9001fb880477ed73a28a441ec9841"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQxNToyNToyOFrOHU7HCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQxNTozMDo1MlrOHU7I4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcwMjAyNg==", "bodyText": "Minor: checkstyle: No empty line at method begin", "url": "https://github.com/JabRef/jabref/pull/6868#discussion_r491702026", "createdAt": "2020-09-20T15:25:28Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/util/CoarseChangeFilter.java", "diffHunk": "@@ -17,34 +17,23 @@\n \n     private final BibDatabaseContext context;\n     private final EventBus eventBus = new EventBus();\n-    private final DelayTaskThrottler delayPost;\n \n     private Optional<Field> lastFieldChanged;\n     private int totalDelta;\n \n     public CoarseChangeFilter(BibDatabaseContext bibDatabaseContext) {\n         // Listen for change events\n-        bibDatabaseContext.getDatabase().registerListener(this);\n-        bibDatabaseContext.getMetaData().registerListener(this);\n         this.context = bibDatabaseContext;\n-        // Delay event post by 5 seconds\n-        this.delayPost = new DelayTaskThrottler(5000);\n+        context.getDatabase().registerListener(this);\n+        context.getMetaData().registerListener(this);\n         this.lastFieldChanged = Optional.empty();\n         this.totalDelta = 0;\n     }\n \n     @Subscribe\n     public synchronized void listen(BibDatabaseContextChangedEvent event) {\n-        Runnable eventPost = () -> {\n-            // Reset total change delta\n-            totalDelta = 0;\n-            // Post event\n-            eventBus.post(event);\n-        };\n-\n-        if (!(event instanceof FieldChangedEvent)) {\n-            eventPost.run();\n-        } else {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae59d7a66c9001fb880477ed73a28a441ec9841"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcwMjA1Nw==", "bodyText": "Minor: checkstyle: } else {. Doesn't the IntelliJ auto formatter fix that automatically?", "url": "https://github.com/JabRef/jabref/pull/6868#discussion_r491702057", "createdAt": "2020-09-20T15:25:55Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/util/CoarseChangeFilter.java", "diffHunk": "@@ -53,19 +42,30 @@ public synchronized void listen(BibDatabaseContextChangedEvent event) {\n             // If editing is started\n             boolean isNewEdit = lastFieldChanged.isEmpty();\n             // If other field is edited\n-            boolean isEditOnOtherField = !isNewEdit && !lastFieldChanged.get().equals(fieldChange.getField());\n+            boolean isEditChanged = !isNewEdit && !lastFieldChanged.get().equals(fieldChange.getField());\n             // Only deltas of 1 registered by fieldChange, major change means editing much content\n-            boolean isMajorChange = totalDelta >= 100;\n-\n-            if ((isEditOnOtherField && !isNewEdit) || isMajorChange) {\n-                // Submit old changes immediately\n-                eventPost.run();\n-            } else {\n-                delayPost.schedule(eventPost);\n-            }\n+            boolean isMajorChange = totalDelta >= 30;\n+\n+            // Event is filtered out if neither the edited field has changed nor a major change has occurred\n+            fieldChange.setFilteredOut(!(isEditChanged || isMajorChange));\n+            // Post every FieldChangedEvent, but some have been marked (filtered)\n+            eventPost(fieldChange);\n             // Set new last field\n             lastFieldChanged = Optional.of(fieldChange.getField());\n+\n         }\n+        else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae59d7a66c9001fb880477ed73a28a441ec9841"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcwMjA5Ng==", "bodyText": "Do you have an idea why this happens? If not, you can delete the comment. It says the same as the statement below", "url": "https://github.com/JabRef/jabref/pull/6868#discussion_r491702096", "createdAt": "2020-09-20T15:26:27Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/util/CoarseChangeFilter.java", "diffHunk": "@@ -53,19 +42,30 @@ public synchronized void listen(BibDatabaseContextChangedEvent event) {\n             // If editing is started\n             boolean isNewEdit = lastFieldChanged.isEmpty();\n             // If other field is edited\n-            boolean isEditOnOtherField = !isNewEdit && !lastFieldChanged.get().equals(fieldChange.getField());\n+            boolean isEditChanged = !isNewEdit && !lastFieldChanged.get().equals(fieldChange.getField());\n             // Only deltas of 1 registered by fieldChange, major change means editing much content\n-            boolean isMajorChange = totalDelta >= 100;\n-\n-            if ((isEditOnOtherField && !isNewEdit) || isMajorChange) {\n-                // Submit old changes immediately\n-                eventPost.run();\n-            } else {\n-                delayPost.schedule(eventPost);\n-            }\n+            boolean isMajorChange = totalDelta >= 30;\n+\n+            // Event is filtered out if neither the edited field has changed nor a major change has occurred\n+            fieldChange.setFilteredOut(!(isEditChanged || isMajorChange));\n+            // Post every FieldChangedEvent, but some have been marked (filtered)\n+            eventPost(fieldChange);\n             // Set new last field\n             lastFieldChanged = Optional.of(fieldChange.getField());\n+\n         }\n+        else {\n+            eventPost(event);\n+        }\n+    }\n+\n+    private void eventPost(BibDatabaseContextChangedEvent event) {\n+        // Reset total change delta", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae59d7a66c9001fb880477ed73a28a441ec9841"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcwMjEwOA==", "bodyText": "Do you have an idea why this happens? If not, you can delete the comment. It says the same as the statement below", "url": "https://github.com/JabRef/jabref/pull/6868#discussion_r491702108", "createdAt": "2020-09-20T15:26:34Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/util/CoarseChangeFilter.java", "diffHunk": "@@ -53,19 +42,30 @@ public synchronized void listen(BibDatabaseContextChangedEvent event) {\n             // If editing is started\n             boolean isNewEdit = lastFieldChanged.isEmpty();\n             // If other field is edited\n-            boolean isEditOnOtherField = !isNewEdit && !lastFieldChanged.get().equals(fieldChange.getField());\n+            boolean isEditChanged = !isNewEdit && !lastFieldChanged.get().equals(fieldChange.getField());\n             // Only deltas of 1 registered by fieldChange, major change means editing much content\n-            boolean isMajorChange = totalDelta >= 100;\n-\n-            if ((isEditOnOtherField && !isNewEdit) || isMajorChange) {\n-                // Submit old changes immediately\n-                eventPost.run();\n-            } else {\n-                delayPost.schedule(eventPost);\n-            }\n+            boolean isMajorChange = totalDelta >= 30;\n+\n+            // Event is filtered out if neither the edited field has changed nor a major change has occurred\n+            fieldChange.setFilteredOut(!(isEditChanged || isMajorChange));\n+            // Post every FieldChangedEvent, but some have been marked (filtered)\n+            eventPost(fieldChange);\n             // Set new last field\n             lastFieldChanged = Optional.of(fieldChange.getField());\n+\n         }\n+        else {\n+            eventPost(event);\n+        }\n+    }\n+\n+    private void eventPost(BibDatabaseContextChangedEvent event) {\n+        // Reset total change delta\n+        totalDelta = 0;\n+        // Reset last field that changed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae59d7a66c9001fb880477ed73a28a441ec9841"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcwMjE0Mg==", "bodyText": "This comment can be deleted, because it is just stating what happens in the next line", "url": "https://github.com/JabRef/jabref/pull/6868#discussion_r491702142", "createdAt": "2020-09-20T15:26:49Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/util/CoarseChangeFilter.java", "diffHunk": "@@ -53,19 +42,30 @@ public synchronized void listen(BibDatabaseContextChangedEvent event) {\n             // If editing is started\n             boolean isNewEdit = lastFieldChanged.isEmpty();\n             // If other field is edited\n-            boolean isEditOnOtherField = !isNewEdit && !lastFieldChanged.get().equals(fieldChange.getField());\n+            boolean isEditChanged = !isNewEdit && !lastFieldChanged.get().equals(fieldChange.getField());\n             // Only deltas of 1 registered by fieldChange, major change means editing much content\n-            boolean isMajorChange = totalDelta >= 100;\n-\n-            if ((isEditOnOtherField && !isNewEdit) || isMajorChange) {\n-                // Submit old changes immediately\n-                eventPost.run();\n-            } else {\n-                delayPost.schedule(eventPost);\n-            }\n+            boolean isMajorChange = totalDelta >= 30;\n+\n+            // Event is filtered out if neither the edited field has changed nor a major change has occurred\n+            fieldChange.setFilteredOut(!(isEditChanged || isMajorChange));\n+            // Post every FieldChangedEvent, but some have been marked (filtered)\n+            eventPost(fieldChange);\n             // Set new last field\n             lastFieldChanged = Optional.of(fieldChange.getField());\n+\n         }\n+        else {\n+            eventPost(event);\n+        }\n+    }\n+\n+    private void eventPost(BibDatabaseContextChangedEvent event) {\n+        // Reset total change delta\n+        totalDelta = 0;\n+        // Reset last field that changed\n+        lastFieldChanged = Optional.empty();\n+        // Post event", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae59d7a66c9001fb880477ed73a28a441ec9841"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcwMjI2Nw==", "bodyText": "Can you state why the magic number 30 has been chosen?\n(Java by Comparison: \"Replace Comments with Constants\")", "url": "https://github.com/JabRef/jabref/pull/6868#discussion_r491702267", "createdAt": "2020-09-20T15:28:33Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/util/CoarseChangeFilter.java", "diffHunk": "@@ -53,19 +42,30 @@ public synchronized void listen(BibDatabaseContextChangedEvent event) {\n             // If editing is started\n             boolean isNewEdit = lastFieldChanged.isEmpty();\n             // If other field is edited\n-            boolean isEditOnOtherField = !isNewEdit && !lastFieldChanged.get().equals(fieldChange.getField());\n+            boolean isEditChanged = !isNewEdit && !lastFieldChanged.get().equals(fieldChange.getField());\n             // Only deltas of 1 registered by fieldChange, major change means editing much content\n-            boolean isMajorChange = totalDelta >= 100;\n-\n-            if ((isEditOnOtherField && !isNewEdit) || isMajorChange) {\n-                // Submit old changes immediately\n-                eventPost.run();\n-            } else {\n-                delayPost.schedule(eventPost);\n-            }\n+            boolean isMajorChange = totalDelta >= 30;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae59d7a66c9001fb880477ed73a28a441ec9841"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcwMjQ5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // Post every FieldChangedEvent, but some have been marked (filtered)\n          \n          \n            \n                        // Post each FieldChangedEvent - even the ones being marked as \"filtered\"", "url": "https://github.com/JabRef/jabref/pull/6868#discussion_r491702498", "createdAt": "2020-09-20T15:30:52Z", "author": {"login": "koppor"}, "path": "src/main/java/org/jabref/logic/util/CoarseChangeFilter.java", "diffHunk": "@@ -53,19 +42,30 @@ public synchronized void listen(BibDatabaseContextChangedEvent event) {\n             // If editing is started\n             boolean isNewEdit = lastFieldChanged.isEmpty();\n             // If other field is edited\n-            boolean isEditOnOtherField = !isNewEdit && !lastFieldChanged.get().equals(fieldChange.getField());\n+            boolean isEditChanged = !isNewEdit && !lastFieldChanged.get().equals(fieldChange.getField());\n             // Only deltas of 1 registered by fieldChange, major change means editing much content\n-            boolean isMajorChange = totalDelta >= 100;\n-\n-            if ((isEditOnOtherField && !isNewEdit) || isMajorChange) {\n-                // Submit old changes immediately\n-                eventPost.run();\n-            } else {\n-                delayPost.schedule(eventPost);\n-            }\n+            boolean isMajorChange = totalDelta >= 30;\n+\n+            // Event is filtered out if neither the edited field has changed nor a major change has occurred\n+            fieldChange.setFilteredOut(!(isEditChanged || isMajorChange));\n+            // Post every FieldChangedEvent, but some have been marked (filtered)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae59d7a66c9001fb880477ed73a28a441ec9841"}, "originalPosition": 58}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e6c967750cbf7da464f9548cfc2ee01bf19beff", "author": {"user": {"login": "m-mauersberger", "name": "Michael Mauersberger"}}, "url": "https://github.com/JabRef/jabref/commit/2e6c967750cbf7da464f9548cfc2ee01bf19beff", "committedDate": "2020-09-25T08:16:14Z", "message": "Update src/main/java/org/jabref/logic/util/CoarseChangeFilter.java\r\n\r\nWording\n\nCo-authored-by: Oliver Kopp <kopp.dev@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7382ba60b2101e807d46b63c257100339c96c8ac", "author": {"user": {"login": "m-mauersberger", "name": "Michael Mauersberger"}}, "url": "https://github.com/JabRef/jabref/commit/7382ba60b2101e807d46b63c257100339c96c8ac", "committedDate": "2020-09-25T13:37:42Z", "message": "Remove unused imports.\nCoarseChangeFilter: Remove totalDelta due to restriction to pasting and deleting more than one character. Handle changed field.\nDBMSSynchronizer: Pull remaining changes at every entry-related event."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4015ab89b3fe6f62ed8170ed4ef4b884b45250df", "author": {"user": {"login": "m-mauersberger", "name": "Michael Mauersberger"}}, "url": "https://github.com/JabRef/jabref/commit/4015ab89b3fe6f62ed8170ed4ef4b884b45250df", "committedDate": "2020-09-25T13:41:56Z", "message": "Remove unused imports.\nCoarseChangeFilter: Remove totalDelta due to restriction to pasting and deleting more than one character. Handle changed field.\nDBMSSynchronizer: Pull remaining changes at every entry-related event."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8168038aed9e8a7808c0a277c9627a13d568058", "author": {"user": {"login": "m-mauersberger", "name": "Michael Mauersberger"}}, "url": "https://github.com/JabRef/jabref/commit/c8168038aed9e8a7808c0a277c9627a13d568058", "committedDate": "2020-09-25T13:43:21Z", "message": "Merge remote-tracking branch 'origin/socketTimeOut' into socketTimeOut\n\n# Conflicts:\n#\tsrc/main/java/org/jabref/logic/util/CoarseChangeFilter.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2OTQzNzI4", "url": "https://github.com/JabRef/jabref/pull/6868#pullrequestreview-496943728", "createdAt": "2020-09-26T05:38:57Z", "commit": {"oid": "c8168038aed9e8a7808c0a277c9627a13d568058"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 152, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}