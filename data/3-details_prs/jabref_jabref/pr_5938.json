{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczOTYwOTkw", "number": 5938, "title": "Fix not escaping special characters in search pattern", "bodyText": "fixes #5892\nThe error when searching for \"DOI 10.1210/endrev/bnz006\" (or any phrases containing special javascript regular expression characters) is caused by not escaping special characters before passing search  pattern to javascript script used for highlighting words in preview view.\n\n\n\n Change in CHANGELOG.md described (if applicable)\n Tests created for changes (if applicable)\n Manually tested changed features in running JabRef (always required)\n Screenshots added in PR description (for bigger UI changes)\n Checked documentation: Is the information available and up to date? If not: Issue created at https://github.com/JabRef/user-documentation/issues.", "createdAt": "2020-02-11T23:12:47Z", "url": "https://github.com/JabRef/jabref/pull/5938", "merged": true, "mergeCommit": {"oid": "ec93ad3fd492c706575af1ca00299ddfc87df770"}, "closed": true, "closedAt": "2020-02-14T20:09:59Z", "author": {"login": "dawidm"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDZ7Y4gH2gAyMzczOTYwOTkwOjJmNjg1MjA4ODAxMjcwM2IyZjNhM2EwZDNlMTllODhiZmU4MmFlM2E=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcEUfiuAFqTM1OTE2MTA0NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2f6852088012703b2f3a3a0d3e19e88bfe82ae3a", "author": {"user": {"login": "dawidm", "name": "Dawid Motyka"}}, "url": "https://github.com/JabRef/jabref/commit/2f6852088012703b2f3a3a0d3e19e88bfe82ae3a", "committedDate": "2020-02-11T23:00:21Z", "message": "Fix not escaping special characters in search pattern\n\nfixes #5892\n\n* add method to get search pattern for searched words with escaped\n javascript regexp special characters (for search without regular\n expressions)\n\n* in preview viewer use search pattern with escaped javascript regexp\n special characters"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3MjQxNDc0", "url": "https://github.com/JabRef/jabref/pull/5938#pullrequestreview-357241474", "createdAt": "2020-02-12T07:45:49Z", "commit": {"oid": "2f6852088012703b2f3a3a0d3e19e88bfe82ae3a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNzo0NTo0OVrOFokY5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNzo0NTo0OVrOFokY5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA4MzU1Nw==", "bodyText": "Better is to use an enum here, eg.. EscapMode, with java and javascript as values:\nhttps://www.teamten.com/lawrence/programming/prefer-enums-over-booleans.html", "url": "https://github.com/JabRef/jabref/pull/5938#discussion_r378083557", "createdAt": "2020-02-12T07:45:49Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/logic/search/SearchQuery.java", "diffHunk": "@@ -124,6 +127,18 @@ public boolean isRegularExpression() {\n \n     // Returns a regular expression pattern in the form (w1)|(w2)| ... wi are escaped if no regular expression search is enabled\n     public Optional<Pattern> getPatternForWords() {\n+        return joinWordsToPattern(false);\n+    }\n+\n+    // Returns a regular expression pattern in the form (w1)|(w2)| ... wi are escaped for javascript if no regular expression search is enabled\n+    public Optional<Pattern> getJsPatternForWords() {\n+        return joinWordsToPattern(true);\n+    }\n+\n+    /* Returns a regular expression pattern in the form (w1)|(w2)| ... wi are escaped if no regular expression search is enabled\n+     * @param escapeSpecialCharsForJS whether to escape characters in wi for javascript regexp (escaping all special characters) or for java (using \\Q and \\E)\n+     */\n+    private Optional<Pattern> joinWordsToPattern(boolean escapeSpecialCharsForJS) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6852088012703b2f3a3a0d3e19e88bfe82ae3a"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3MjQxOTc2", "url": "https://github.com/JabRef/jabref/pull/5938#pullrequestreview-357241976", "createdAt": "2020-02-12T07:47:02Z", "commit": {"oid": "2f6852088012703b2f3a3a0d3e19e88bfe82ae3a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNzo0NzowM1rOFokaYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNzo0Nzo0MVrOFokbKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA4MzkzOQ==", "bodyText": "You can use Pattern.compile to gain some performace improvements here", "url": "https://github.com/JabRef/jabref/pull/5938#discussion_r378083939", "createdAt": "2020-02-12T07:47:03Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/logic/search/SearchQuery.java", "diffHunk": "@@ -18,6 +18,9 @@\n \n public class SearchQuery implements SearchMatcher {\n \n+    // regexp pattern for escaping special characters in javascript regex\n+    public static final String JAVASCRIPT_ESCAPED_CHARS_PATTERN = \"[\\\\.\\\\*\\\\+\\\\?\\\\^\\\\$\\\\{\\\\}\\\\(\\\\)\\\\|\\\\[\\\\]\\\\\\\\/]\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6852088012703b2f3a3a0d3e19e88bfe82ae3a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA4NDEzOQ==", "bodyText": "Please extract this to a regular if-else, it's easier to understand on the first look than this chained conditions", "url": "https://github.com/JabRef/jabref/pull/5938#discussion_r378084139", "createdAt": "2020-02-12T07:47:41Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/logic/search/SearchQuery.java", "diffHunk": "@@ -133,7 +148,7 @@ public boolean isRegularExpression() {\n         // compile the words to a regular expression in the form (w1)|(w2)|(w3)\n         StringJoiner joiner = new StringJoiner(\")|(\", \"(\", \")\");\n         for (String word : words) {\n-            joiner.add(regularExpression ? word : Pattern.quote(word));\n+            joiner.add(regularExpression ? word : (escapeSpecialCharsForJS ? word.replaceAll(JAVASCRIPT_ESCAPED_CHARS_PATTERN, \"\\\\\\\\$0\") : Pattern.quote(word)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6852088012703b2f3a3a0d3e19e88bfe82ae3a"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c2925dcac0f92c9e709d50673dfb3d50f05b4b3", "author": {"user": {"login": "dawidm", "name": "Dawid Motyka"}}, "url": "https://github.com/JabRef/jabref/commit/5c2925dcac0f92c9e709d50673dfb3d50f05b4b3", "committedDate": "2020-02-12T14:05:33Z", "message": "Refactoring and performance improvement\n\n* use enum to specify special characters escape mode\n\n* use compiled regex pattern instead of string"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89c72c05dd881133ee6a667d9c78ec503566cf5a", "author": {"user": {"login": "dawidm", "name": "Dawid Motyka"}}, "url": "https://github.com/JabRef/jabref/commit/89c72c05dd881133ee6a667d9c78ec503566cf5a", "committedDate": "2020-02-12T14:26:39Z", "message": "Refactoring: braces in if..else"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NTE5ODYy", "url": "https://github.com/JabRef/jabref/pull/5938#pullrequestreview-357519862", "createdAt": "2020-02-12T14:58:02Z", "commit": {"oid": "89c72c05dd881133ee6a667d9c78ec503566cf5a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NTM1Nzcw", "url": "https://github.com/JabRef/jabref/pull/5938#pullrequestreview-357535770", "createdAt": "2020-02-12T15:16:28Z", "commit": {"oid": "89c72c05dd881133ee6a667d9c78ec503566cf5a"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNToxNjoyOFrOFoylCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNToyNTozOFrOFoy80A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMxNjA0MA==", "bodyText": "Isn't checkstyle complaining about putting this in two lines? Has no effect, but looks somewhat odd...", "url": "https://github.com/JabRef/jabref/pull/5938#discussion_r378316040", "createdAt": "2020-02-12T15:16:28Z", "author": {"login": "calixtus"}, "path": "src/main/java/org/jabref/logic/search/SearchQuery.java", "diffHunk": "@@ -133,7 +164,21 @@ public boolean isRegularExpression() {\n         // compile the words to a regular expression in the form (w1)|(w2)|(w3)\n         StringJoiner joiner = new StringJoiner(\")|(\", \"(\", \")\");\n         for (String word : words) {\n-            joiner.add(regularExpression ? word : Pattern.quote(word));\n+            if (regularExpression) {\n+                joiner.add(word);\n+            }\n+            else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89c72c05dd881133ee6a667d9c78ec503566cf5a"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMyMjEyOA==", "bodyText": "IMHO, although \"Js\" is quite obvious, I would reword that to getJavaScriptPatternForWords, since you are creating a new Method just for the sole purpose to make its use more obvious in it's name. So why not go all the way?", "url": "https://github.com/JabRef/jabref/pull/5938#discussion_r378322128", "createdAt": "2020-02-12T15:25:38Z", "author": {"login": "calixtus"}, "path": "src/main/java/org/jabref/logic/search/SearchQuery.java", "diffHunk": "@@ -124,6 +143,18 @@ public boolean isRegularExpression() {\n \n     // Returns a regular expression pattern in the form (w1)|(w2)| ... wi are escaped if no regular expression search is enabled\n     public Optional<Pattern> getPatternForWords() {\n+        return joinWordsToPattern(EscapeMode.JAVA);\n+    }\n+\n+    // Returns a regular expression pattern in the form (w1)|(w2)| ... wi are escaped for javascript if no regular expression search is enabled\n+    public Optional<Pattern> getJsPatternForWords() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89c72c05dd881133ee6a667d9c78ec503566cf5a"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NjkwNTY4", "url": "https://github.com/JabRef/jabref/pull/5938#pullrequestreview-357690568", "createdAt": "2020-02-12T18:35:49Z", "commit": {"oid": "89c72c05dd881133ee6a667d9c78ec503566cf5a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODozNTo0OVrOFo59rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODozNTo0OVrOFo59rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQzNzAzNw==", "bodyText": "Method", "url": "https://github.com/JabRef/jabref/pull/5938#discussion_r378437037", "createdAt": "2020-02-12T18:35:49Z", "author": {"login": "stefan-kolb"}, "path": "src/main/java/org/jabref/logic/search/SearchQuery.java", "diffHunk": "@@ -18,6 +18,25 @@\n \n public class SearchQuery implements SearchMatcher {\n \n+    /**\n+     * Regex pattern for escaping special characters in javascript regular expressions\n+     */\n+    public static final Pattern JAVASCRIPT_ESCAPED_CHARS_PATTERN = Pattern.compile(\"[\\\\.\\\\*\\\\+\\\\?\\\\^\\\\$\\\\{\\\\}\\\\(\\\\)\\\\|\\\\[\\\\]\\\\\\\\/]\");\n+\n+    /**\n+     * Metod for escaping special characters in regular expressions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89c72c05dd881133ee6a667d9c78ec503566cf5a"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f39cbc6b035d5d2c07ba176b95e2b54139fc109", "author": {"user": {"login": "dawidm", "name": "Dawid Motyka"}}, "url": "https://github.com/JabRef/jabref/commit/6f39cbc6b035d5d2c07ba176b95e2b54139fc109", "committedDate": "2020-02-12T22:05:16Z", "message": "Refactoring, minor changes: names, comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "266bfc8029d7f37f41897e4f0d47c7fdcb33bbd5", "author": {"user": {"login": "dawidm", "name": "Dawid Motyka"}}, "url": "https://github.com/JabRef/jabref/commit/266bfc8029d7f37f41897e4f0d47c7fdcb33bbd5", "committedDate": "2020-02-14T16:08:42Z", "message": "Add tests of escaping special characters in search patterns"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MDU0NDU0", "url": "https://github.com/JabRef/jabref/pull/5938#pullrequestreview-359054454", "createdAt": "2020-02-14T16:14:55Z", "commit": {"oid": "266bfc8029d7f37f41897e4f0d47c7fdcb33bbd5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNjoxNDo1NVrOFp772w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNjoxNDo1NVrOFp772w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUxNzkxNQ==", "bodyText": "I've created tests but I'm not sure about readbility of this approach.", "url": "https://github.com/JabRef/jabref/pull/5938#discussion_r379517915", "createdAt": "2020-02-14T16:14:55Z", "author": {"login": "dawidm"}, "path": "src/test/java/org/jabref/logic/search/SearchQueryTest.java", "diffHunk": "@@ -203,4 +203,38 @@ public void testGetPattern() {\n         //We can't directly compare the pattern objects\n         assertEquals(Optional.of(pattern.toString()), result.getPatternForWords().map(Pattern::toString));\n     }\n+\n+    @Test\n+    public void testGetRegexpPattern() {\n+        String queryText = \"[a-c]\\\\d* \\\\d*\";\n+        SearchQuery regexQuery = new SearchQuery(queryText, false, true);\n+        Pattern pattern = Pattern.compile(\"([a-c]\\\\d* \\\\d*)\");\n+        assertEquals(Optional.of(pattern.toString()), regexQuery.getPatternForWords().map(Pattern::toString));\n+    }\n+\n+    @Test\n+    public void testGetRegexpJavascriptPattern() {\n+        String queryText = \"[a-c]\\\\d* \\\\d*\";\n+        SearchQuery regexQuery = new SearchQuery(queryText, false, true);\n+        Pattern pattern = Pattern.compile(\"([a-c]\\\\d* \\\\d*)\");\n+        assertEquals(Optional.of(pattern.toString()), regexQuery.getJavaScriptPatternForWords().map(Pattern::toString));\n+    }\n+\n+    @Test\n+    public void testEscapingInPattern() {\n+        //first word contain all java special regex characters\n+        String queryText = \"<([{\\\\\\\\^-=$!|]})?*+.> word1 word2.\";\n+        SearchQuery textQueryWithSpecialChars = new SearchQuery(queryText, false, false);\n+        String pattern = \"(\\\\Q<([{\\\\^-=$!|]})?*+.>\\\\E)|(\\\\Qword1\\\\E)|(\\\\Qword2.\\\\E)\";\n+        assertEquals(Optional.of(pattern), textQueryWithSpecialChars.getPatternForWords().map(Pattern::toString));\n+    }\n+\n+    @Test\n+    public void testEscapingInJavascriptPattern() {\n+        //first word contain all javascript special regex characters that should be escaped individually in text based search\n+        String queryText = \"([{\\\\\\\\^$|]})?*+./ word1 word2.\";\n+        SearchQuery textQueryWithSpecialChars = new SearchQuery(queryText, false, false);\n+        String pattern = \"(\\\\(\\\\[\\\\{\\\\\\\\\\\\^\\\\$\\\\|\\\\]\\\\}\\\\)\\\\?\\\\*\\\\+\\\\.\\\\/)|(word1)|(word2\\\\.)\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "266bfc8029d7f37f41897e4f0d47c7fdcb33bbd5"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MTU3MzIw", "url": "https://github.com/JabRef/jabref/pull/5938#pullrequestreview-359157320", "createdAt": "2020-02-14T19:07:57Z", "commit": {"oid": "266bfc8029d7f37f41897e4f0d47c7fdcb33bbd5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MTYxMDQ1", "url": "https://github.com/JabRef/jabref/pull/5938#pullrequestreview-359161045", "createdAt": "2020-02-14T19:14:20Z", "commit": {"oid": "266bfc8029d7f37f41897e4f0d47c7fdcb33bbd5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 473, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}