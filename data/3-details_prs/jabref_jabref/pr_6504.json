{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwNzY4NTU1", "number": 6504, "title": "Enable users to simultaneously search all SearchBasedFetchers", "bodyText": "This PR enables users can send queries to all E-libraries simultaneously through the WebSearchPane.\nRef #369\nIt adds a new SearchBasedFetcher called CompositeSearchBasedFetcher that delegates the query to all of the fetchers it is composed of, and merges the fetched results.\nIn  WebFetchers.getSearchBasedFetchers  a CompositeSearchBasedFetcher is added that contains all SearchBasedFetchers.\nIf this PR gets approved an additional documentation entry has to be added.\n\n Change in CHANGELOG.md described (if applicable)\n Tests created for changes (if applicable)\n Manually tested changed features in running JabRef (always required)\n Screenshots added in PR description (for UI changes)\n Checked documentation: Is the information available and up to date? If not created an issue at https://github.com/JabRef/user-documentation/issues or, even better, submitted a pull request to the documentation repository.", "createdAt": "2020-05-20T13:56:34Z", "url": "https://github.com/JabRef/jabref/pull/6504", "merged": true, "mergeCommit": {"oid": "47846bf3792679ad54eeab1afaf0b77983393a41"}, "closed": true, "closedAt": "2020-05-27T22:15:52Z", "author": {"login": "DominikVoigt"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABci4GnYgH2gAyNDIwNzY4NTU1OjcwM2QwMDAyYzg0NGQwMzMzMjAzMWRkMjM3YWJhOGU3ZGJmYTdhYzI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABclgz20gH2gAyNDIwNzY4NTU1OmQ5NDU0YzUzODBkYjJhNjc3ZTRkZTM4N2UxODA4MDkxYWY5NjZhNWY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "703d0002c844d03332031dd237aba8e7dbfa7ac2", "author": {"user": {"login": "DominikVoigt", "name": "Dominik Voigt"}}, "url": "https://github.com/JabRef/jabref/commit/703d0002c844d03332031dd237aba8e7dbfa7ac2", "committedDate": "2020-05-19T17:41:25Z", "message": "Add CompositeSearchBasedFetcher to offer the option to query all libraries together in the Web Search Pane.\n\nSigned-off-by: DominikVoigt <dominik.ingo.voigt@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3045da14e7eabfe720dbf5e7b7c5cfde7277d4d5", "author": {"user": {"login": "DominikVoigt", "name": "Dominik Voigt"}}, "url": "https://github.com/JabRef/jabref/commit/3045da14e7eabfe720dbf5e7b7c5cfde7277d4d5", "committedDate": "2020-05-19T18:24:56Z", "message": "Add Test for CompositeSearchBasedFetcher.\n\nSigned-off-by: DominikVoigt <dominik.ingo.voigt@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6838a562c7ed1fd7b5d28de8013606f03834254", "author": {"user": {"login": "DominikVoigt", "name": "Dominik Voigt"}}, "url": "https://github.com/JabRef/jabref/commit/c6838a562c7ed1fd7b5d28de8013606f03834254", "committedDate": "2020-05-20T09:40:19Z", "message": "Reformat stream to increase readability.\n\nSigned-off-by: DominikVoigt <dominik.ingo.voigt@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81c4d817d7626183c734825a3d29e45e7234f62b", "author": {"user": {"login": "DominikVoigt", "name": "Dominik Voigt"}}, "url": "https://github.com/JabRef/jabref/commit/81c4d817d7626183c734825a3d29e45e7234f62b", "committedDate": "2020-05-20T13:56:11Z", "message": "Add CHANGELOG entry under Added.\nAdd linebreak for checkstyle.\nModify Testcase.\n\nSigned-off-by: DominikVoigt <dominik.ingo.voigt@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6cf33add066b40f18b65264ee41dcc9d224bf09", "author": {"user": {"login": "DominikVoigt", "name": "Dominik Voigt"}}, "url": "https://github.com/JabRef/jabref/commit/a6cf33add066b40f18b65264ee41dcc9d224bf09", "committedDate": "2020-05-20T13:59:40Z", "message": "Add Linebreak to CHANGELOG.\n\nSigned-off-by: DominikVoigt <dominik.ingo.voigt@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abf47018b0cdf1500b103fe1f5286834267edd7f", "author": {"user": {"login": "DominikVoigt", "name": "Dominik Voigt"}}, "url": "https://github.com/JabRef/jabref/commit/abf47018b0cdf1500b103fe1f5286834267edd7f", "committedDate": "2020-05-21T19:21:06Z", "message": "Add Linebreak to CompositeSearchBasedFetcherTest to fix checkstyle issue.\n\nSigned-off-by: DominikVoigt <dominik.ingo.voigt@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NDExMTgx", "url": "https://github.com/JabRef/jabref/pull/6504#pullrequestreview-415411181", "createdAt": "2020-05-20T14:43:59Z", "commit": {"oid": "a6cf33add066b40f18b65264ee41dcc9d224bf09"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDo0Mzo1OVrOGYPV7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDo0Mzo1OVrOGYPV7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA3MDM4MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - We added a new fetcher to enable users to search all available E-Libraries simultaneously. [#369](https://github.com/koppor/jabref/issues/369)\n          \n          \n            \n            - We added a new fetcher to enable users to search all available E-Libraries simultaneously. [koppor#369](https://github.com/koppor/jabref/issues/369)", "url": "https://github.com/JabRef/jabref/pull/6504#discussion_r428070380", "createdAt": "2020-05-20T14:43:59Z", "author": {"login": "Siedlerchr"}, "path": "CHANGELOG.md", "diffHunk": "@@ -24,6 +24,7 @@ Note that this project **does not** adhere to [Semantic Versioning](http://semve\n - We fixed the bug when strike the delete key in the text field. [#6421](https://github.com/JabRef/jabref/issues/6421)\n - We added a BibTex key modifier for truncating strings. [#3915](https://github.com/JabRef/jabref/issues/3915)\n - We added support for jumping to target entry when typing letter/digit after sorting a column in maintable [#6146](https://github.com/JabRef/jabref/issues/6146)\n+- We added a new fetcher to enable users to search all available E-Libraries simultaneously. [#369](https://github.com/koppor/jabref/issues/369)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6cf33add066b40f18b65264ee41dcc9d224bf09"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MDU2MTMw", "url": "https://github.com/JabRef/jabref/pull/6504#pullrequestreview-417056130", "createdAt": "2020-05-22T16:54:36Z", "commit": {"oid": "abf47018b0cdf1500b103fe1f5286834267edd7f"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51ec0204188541f51b61700502674bf00ab1a758", "author": {"user": {"login": "DominikVoigt", "name": "Dominik Voigt"}}, "url": "https://github.com/JabRef/jabref/commit/51ec0204188541f51b61700502674bf00ab1a758", "committedDate": "2020-05-22T17:14:08Z", "message": "Update CHANGELOG.md\n\nCo-authored-by: Christoph <cschwentker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55ac9be703628c668bef0554b755c03c2347a493", "author": {"user": {"login": "DominikVoigt", "name": "Dominik Voigt"}}, "url": "https://github.com/JabRef/jabref/commit/55ac9be703628c668bef0554b755c03c2347a493", "committedDate": "2020-05-23T18:35:24Z", "message": "Add parameterized tests for CompositeSearchBasedFetcher.\n\nSigned-off-by: DominikVoigt <dominik.ingo.voigt@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3c0b65f44a39eecf6a39ee1dac8dddf1f978cc1", "author": {"user": {"login": "DominikVoigt", "name": "Dominik Voigt"}}, "url": "https://github.com/JabRef/jabref/commit/c3c0b65f44a39eecf6a39ee1dac8dddf1f978cc1", "committedDate": "2020-05-23T19:28:52Z", "message": "Add better parameterized test naming.\nAdd test case: empty set of fetchers\n\nSigned-off-by: DominikVoigt <dominik.ingo.voigt@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7fa24e48d63a50a5b4551baf20fd1926411fc6ea", "author": {"user": {"login": "DominikVoigt", "name": "Dominik Voigt"}}, "url": "https://github.com/JabRef/jabref/commit/7fa24e48d63a50a5b4551baf20fd1926411fc6ea", "committedDate": "2020-05-24T10:23:09Z", "message": "Implement requested change.\n\nSigned-off-by: DominikVoigt <dominik.ingo.voigt@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1947b1ff057b3b7fa74d6662e43ddca4277766b0", "author": {"user": {"login": "DominikVoigt", "name": "Dominik Voigt"}}, "url": "https://github.com/JabRef/jabref/commit/1947b1ff057b3b7fa74d6662e43ddca4277766b0", "committedDate": "2020-05-24T10:24:41Z", "message": "Merge branch 'feature/add-option-to-fetch-from-all-sources' of https://github.com/DominikVoigt/jabref into feature/add-option-to-fetch-from-all-sources"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "836fc31da990b370a871f1927949bf71b62499fe", "author": {"user": {"login": "DominikVoigt", "name": "Dominik Voigt"}}, "url": "https://github.com/JabRef/jabref/commit/836fc31da990b370a871f1927949bf71b62499fe", "committedDate": "2020-05-25T12:01:51Z", "message": "Merge branch 'master' into feature/add-option-to-fetch-from-all-sources"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1acd5aa0bfd310c8fda79fecde126200c3bfa046", "author": {"user": {"login": "DominikVoigt", "name": "Dominik Voigt"}}, "url": "https://github.com/JabRef/jabref/commit/1acd5aa0bfd310c8fda79fecde126200c3bfa046", "committedDate": "2020-05-25T12:06:37Z", "message": "Remove GrobidCitationFetcher from test set as it was removed from set in the Webfetcher.\n\nSigned-off-by: DominikVoigt <dominik.ingo.voigt@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NzgwMzU4", "url": "https://github.com/JabRef/jabref/pull/6504#pullrequestreview-417780358", "createdAt": "2020-05-25T15:31:21Z", "commit": {"oid": "1acd5aa0bfd310c8fda79fecde126200c3bfa046"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNTozMToyMVrOGaEnXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNTozNTozNlrOGaEtgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk5MTc3Mg==", "bodyText": "Maybe, debug would be more appropriate then?", "url": "https://github.com/JabRef/jabref/pull/6504#discussion_r429991772", "createdAt": "2020-05-25T15:31:21Z", "author": {"login": "koppor"}, "path": "src/test/java/org/jabref/logic/importer/fetcher/CompositeSearchBasedFetcherTest.java", "diffHunk": "@@ -0,0 +1,110 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import org.jabref.logic.bibtex.FieldContentFormatterPreferences;\n+import org.jabref.logic.importer.FetcherException;\n+import org.jabref.logic.importer.ImportFormatPreferences;\n+import org.jabref.logic.importer.SearchBasedFetcher;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.testutils.category.FetcherTest;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@FetcherTest\n+public class CompositeSearchBasedFetcherTest {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CompositeSearchBasedFetcherTest.class);\n+\n+    @Test\n+    public void performSearchWithoutFetchers() {\n+        Set<SearchBasedFetcher> empty = new HashSet<>();\n+        CompositeSearchBasedFetcher fetcher = new CompositeSearchBasedFetcher(empty);\n+\n+        List<BibEntry> result = fetcher.performSearch(\"quantum\");\n+\n+        Assertions.assertTrue(result.isEmpty());\n+    }\n+\n+    @ParameterizedTest(name = \"Perform Search on empty query.\")\n+    @MethodSource(\"performSearchParameters\")\n+    public void performSearchOnEmptyQuery(Set<SearchBasedFetcher> fetchers) {\n+        CompositeSearchBasedFetcher compositeFetcher = new CompositeSearchBasedFetcher(fetchers);\n+\n+        List<BibEntry> queryResult = compositeFetcher.performSearch(\"\");\n+\n+        Assertions.assertTrue(queryResult.isEmpty());\n+    }\n+\n+    @ParameterizedTest(name = \"Perform search on query \\\"quantum\\\". Using the CompositeFetcher of the following \" +\n+            \"Fetchers: {arguments}\")\n+    @MethodSource(\"performSearchParameters\")\n+    public void performSearchOnNonEmptyQuery(Set<SearchBasedFetcher> fetchers) {\n+        CompositeSearchBasedFetcher compositeFetcher = new CompositeSearchBasedFetcher(fetchers);\n+\n+        List<BibEntry> compositeResult = compositeFetcher.performSearch(\"quantum\");\n+\n+        for (SearchBasedFetcher fetcher : fetchers) {\n+            try {\n+                Assertions.assertTrue(compositeResult.containsAll(fetcher.performSearch(\"quantum\")));\n+            } catch (FetcherException e) {\n+                /* We catch the Fetcher exception here, since the failing fetcher also fails in the CompositeFetcher\n+                 * and just leads to no additional results in the returned list. Therefor the test should not fail\n+                 * due to the fetcher exception\n+                 */\n+                LOGGER.warn(String.format(\"Fetcher %s failed \", fetcher.getName()), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1acd5aa0bfd310c8fda79fecde126200c3bfa046"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk5MTg2MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                             * and just leads to no additional results in the returned list. Therefor the test should not fail\n          \n          \n            \n                             * and just leads to no additional results in the returned list. Therefore the test should not fail", "url": "https://github.com/JabRef/jabref/pull/6504#discussion_r429991861", "createdAt": "2020-05-25T15:31:34Z", "author": {"login": "koppor"}, "path": "src/test/java/org/jabref/logic/importer/fetcher/CompositeSearchBasedFetcherTest.java", "diffHunk": "@@ -0,0 +1,110 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import org.jabref.logic.bibtex.FieldContentFormatterPreferences;\n+import org.jabref.logic.importer.FetcherException;\n+import org.jabref.logic.importer.ImportFormatPreferences;\n+import org.jabref.logic.importer.SearchBasedFetcher;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.testutils.category.FetcherTest;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@FetcherTest\n+public class CompositeSearchBasedFetcherTest {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CompositeSearchBasedFetcherTest.class);\n+\n+    @Test\n+    public void performSearchWithoutFetchers() {\n+        Set<SearchBasedFetcher> empty = new HashSet<>();\n+        CompositeSearchBasedFetcher fetcher = new CompositeSearchBasedFetcher(empty);\n+\n+        List<BibEntry> result = fetcher.performSearch(\"quantum\");\n+\n+        Assertions.assertTrue(result.isEmpty());\n+    }\n+\n+    @ParameterizedTest(name = \"Perform Search on empty query.\")\n+    @MethodSource(\"performSearchParameters\")\n+    public void performSearchOnEmptyQuery(Set<SearchBasedFetcher> fetchers) {\n+        CompositeSearchBasedFetcher compositeFetcher = new CompositeSearchBasedFetcher(fetchers);\n+\n+        List<BibEntry> queryResult = compositeFetcher.performSearch(\"\");\n+\n+        Assertions.assertTrue(queryResult.isEmpty());\n+    }\n+\n+    @ParameterizedTest(name = \"Perform search on query \\\"quantum\\\". Using the CompositeFetcher of the following \" +\n+            \"Fetchers: {arguments}\")\n+    @MethodSource(\"performSearchParameters\")\n+    public void performSearchOnNonEmptyQuery(Set<SearchBasedFetcher> fetchers) {\n+        CompositeSearchBasedFetcher compositeFetcher = new CompositeSearchBasedFetcher(fetchers);\n+\n+        List<BibEntry> compositeResult = compositeFetcher.performSearch(\"quantum\");\n+\n+        for (SearchBasedFetcher fetcher : fetchers) {\n+            try {\n+                Assertions.assertTrue(compositeResult.containsAll(fetcher.performSearch(\"quantum\")));\n+            } catch (FetcherException e) {\n+                /* We catch the Fetcher exception here, since the failing fetcher also fails in the CompositeFetcher\n+                 * and just leads to no additional results in the returned list. Therefor the test should not fail", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1acd5aa0bfd310c8fda79fecde126200c3bfa046"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk5MjAwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * This method provides other methods with different sized sets of Searchbased fetchers wrapped in Arguments.\n          \n          \n            \n                 * This method provides other methods with different sized sets of search-based fetchers wrapped in arguments.", "url": "https://github.com/JabRef/jabref/pull/6504#discussion_r429992008", "createdAt": "2020-05-25T15:32:01Z", "author": {"login": "koppor"}, "path": "src/test/java/org/jabref/logic/importer/fetcher/CompositeSearchBasedFetcherTest.java", "diffHunk": "@@ -0,0 +1,110 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import org.jabref.logic.bibtex.FieldContentFormatterPreferences;\n+import org.jabref.logic.importer.FetcherException;\n+import org.jabref.logic.importer.ImportFormatPreferences;\n+import org.jabref.logic.importer.SearchBasedFetcher;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.testutils.category.FetcherTest;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@FetcherTest\n+public class CompositeSearchBasedFetcherTest {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CompositeSearchBasedFetcherTest.class);\n+\n+    @Test\n+    public void performSearchWithoutFetchers() {\n+        Set<SearchBasedFetcher> empty = new HashSet<>();\n+        CompositeSearchBasedFetcher fetcher = new CompositeSearchBasedFetcher(empty);\n+\n+        List<BibEntry> result = fetcher.performSearch(\"quantum\");\n+\n+        Assertions.assertTrue(result.isEmpty());\n+    }\n+\n+    @ParameterizedTest(name = \"Perform Search on empty query.\")\n+    @MethodSource(\"performSearchParameters\")\n+    public void performSearchOnEmptyQuery(Set<SearchBasedFetcher> fetchers) {\n+        CompositeSearchBasedFetcher compositeFetcher = new CompositeSearchBasedFetcher(fetchers);\n+\n+        List<BibEntry> queryResult = compositeFetcher.performSearch(\"\");\n+\n+        Assertions.assertTrue(queryResult.isEmpty());\n+    }\n+\n+    @ParameterizedTest(name = \"Perform search on query \\\"quantum\\\". Using the CompositeFetcher of the following \" +\n+            \"Fetchers: {arguments}\")\n+    @MethodSource(\"performSearchParameters\")\n+    public void performSearchOnNonEmptyQuery(Set<SearchBasedFetcher> fetchers) {\n+        CompositeSearchBasedFetcher compositeFetcher = new CompositeSearchBasedFetcher(fetchers);\n+\n+        List<BibEntry> compositeResult = compositeFetcher.performSearch(\"quantum\");\n+\n+        for (SearchBasedFetcher fetcher : fetchers) {\n+            try {\n+                Assertions.assertTrue(compositeResult.containsAll(fetcher.performSearch(\"quantum\")));\n+            } catch (FetcherException e) {\n+                /* We catch the Fetcher exception here, since the failing fetcher also fails in the CompositeFetcher\n+                 * and just leads to no additional results in the returned list. Therefor the test should not fail\n+                 * due to the fetcher exception\n+                 */\n+                LOGGER.warn(String.format(\"Fetcher %s failed \", fetcher.getName()), e);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * This method provides other methods with different sized sets of Searchbased fetchers wrapped in Arguments.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1acd5aa0bfd310c8fda79fecde126200c3bfa046"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk5MjEwMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return A stream of Arguments wrapping the sets.\n          \n          \n            \n                 * @return A stream of Arguments wrapping sets of fetchers.", "url": "https://github.com/JabRef/jabref/pull/6504#discussion_r429992102", "createdAt": "2020-05-25T15:32:15Z", "author": {"login": "koppor"}, "path": "src/test/java/org/jabref/logic/importer/fetcher/CompositeSearchBasedFetcherTest.java", "diffHunk": "@@ -0,0 +1,110 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import org.jabref.logic.bibtex.FieldContentFormatterPreferences;\n+import org.jabref.logic.importer.FetcherException;\n+import org.jabref.logic.importer.ImportFormatPreferences;\n+import org.jabref.logic.importer.SearchBasedFetcher;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.testutils.category.FetcherTest;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@FetcherTest\n+public class CompositeSearchBasedFetcherTest {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CompositeSearchBasedFetcherTest.class);\n+\n+    @Test\n+    public void performSearchWithoutFetchers() {\n+        Set<SearchBasedFetcher> empty = new HashSet<>();\n+        CompositeSearchBasedFetcher fetcher = new CompositeSearchBasedFetcher(empty);\n+\n+        List<BibEntry> result = fetcher.performSearch(\"quantum\");\n+\n+        Assertions.assertTrue(result.isEmpty());\n+    }\n+\n+    @ParameterizedTest(name = \"Perform Search on empty query.\")\n+    @MethodSource(\"performSearchParameters\")\n+    public void performSearchOnEmptyQuery(Set<SearchBasedFetcher> fetchers) {\n+        CompositeSearchBasedFetcher compositeFetcher = new CompositeSearchBasedFetcher(fetchers);\n+\n+        List<BibEntry> queryResult = compositeFetcher.performSearch(\"\");\n+\n+        Assertions.assertTrue(queryResult.isEmpty());\n+    }\n+\n+    @ParameterizedTest(name = \"Perform search on query \\\"quantum\\\". Using the CompositeFetcher of the following \" +\n+            \"Fetchers: {arguments}\")\n+    @MethodSource(\"performSearchParameters\")\n+    public void performSearchOnNonEmptyQuery(Set<SearchBasedFetcher> fetchers) {\n+        CompositeSearchBasedFetcher compositeFetcher = new CompositeSearchBasedFetcher(fetchers);\n+\n+        List<BibEntry> compositeResult = compositeFetcher.performSearch(\"quantum\");\n+\n+        for (SearchBasedFetcher fetcher : fetchers) {\n+            try {\n+                Assertions.assertTrue(compositeResult.containsAll(fetcher.performSearch(\"quantum\")));\n+            } catch (FetcherException e) {\n+                /* We catch the Fetcher exception here, since the failing fetcher also fails in the CompositeFetcher\n+                 * and just leads to no additional results in the returned list. Therefor the test should not fail\n+                 * due to the fetcher exception\n+                 */\n+                LOGGER.warn(String.format(\"Fetcher %s failed \", fetcher.getName()), e);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * This method provides other methods with different sized sets of Searchbased fetchers wrapped in Arguments.\n+     *\n+     * @return A stream of Arguments wrapping the sets.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1acd5aa0bfd310c8fda79fecde126200c3bfa046"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk5MjY1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    /* Disabled due to issue regarding Comparison: Title fields of the entries that otherwise are equivalent differ\n          \n          \n            \n                    /* Disabled due to an issue regarding comparison: Title fields of the entries that otherwise are equivalent differ", "url": "https://github.com/JabRef/jabref/pull/6504#discussion_r429992655", "createdAt": "2020-05-25T15:33:42Z", "author": {"login": "koppor"}, "path": "src/test/java/org/jabref/logic/importer/fetcher/CompositeSearchBasedFetcherTest.java", "diffHunk": "@@ -0,0 +1,110 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import org.jabref.logic.bibtex.FieldContentFormatterPreferences;\n+import org.jabref.logic.importer.FetcherException;\n+import org.jabref.logic.importer.ImportFormatPreferences;\n+import org.jabref.logic.importer.SearchBasedFetcher;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.testutils.category.FetcherTest;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@FetcherTest\n+public class CompositeSearchBasedFetcherTest {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CompositeSearchBasedFetcherTest.class);\n+\n+    @Test\n+    public void performSearchWithoutFetchers() {\n+        Set<SearchBasedFetcher> empty = new HashSet<>();\n+        CompositeSearchBasedFetcher fetcher = new CompositeSearchBasedFetcher(empty);\n+\n+        List<BibEntry> result = fetcher.performSearch(\"quantum\");\n+\n+        Assertions.assertTrue(result.isEmpty());\n+    }\n+\n+    @ParameterizedTest(name = \"Perform Search on empty query.\")\n+    @MethodSource(\"performSearchParameters\")\n+    public void performSearchOnEmptyQuery(Set<SearchBasedFetcher> fetchers) {\n+        CompositeSearchBasedFetcher compositeFetcher = new CompositeSearchBasedFetcher(fetchers);\n+\n+        List<BibEntry> queryResult = compositeFetcher.performSearch(\"\");\n+\n+        Assertions.assertTrue(queryResult.isEmpty());\n+    }\n+\n+    @ParameterizedTest(name = \"Perform search on query \\\"quantum\\\". Using the CompositeFetcher of the following \" +\n+            \"Fetchers: {arguments}\")\n+    @MethodSource(\"performSearchParameters\")\n+    public void performSearchOnNonEmptyQuery(Set<SearchBasedFetcher> fetchers) {\n+        CompositeSearchBasedFetcher compositeFetcher = new CompositeSearchBasedFetcher(fetchers);\n+\n+        List<BibEntry> compositeResult = compositeFetcher.performSearch(\"quantum\");\n+\n+        for (SearchBasedFetcher fetcher : fetchers) {\n+            try {\n+                Assertions.assertTrue(compositeResult.containsAll(fetcher.performSearch(\"quantum\")));\n+            } catch (FetcherException e) {\n+                /* We catch the Fetcher exception here, since the failing fetcher also fails in the CompositeFetcher\n+                 * and just leads to no additional results in the returned list. Therefor the test should not fail\n+                 * due to the fetcher exception\n+                 */\n+                LOGGER.warn(String.format(\"Fetcher %s failed \", fetcher.getName()), e);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * This method provides other methods with different sized sets of Searchbased fetchers wrapped in Arguments.\n+     *\n+     * @return A stream of Arguments wrapping the sets.\n+     */\n+    static Stream<Arguments> performSearchParameters() {\n+        ImportFormatPreferences importFormatPreferences = mock(ImportFormatPreferences.class);\n+        when(importFormatPreferences.getFieldContentFormatterPreferences())\n+                .thenReturn(mock(FieldContentFormatterPreferences.class));\n+        List<Set<SearchBasedFetcher>> fetcherParameters = new ArrayList<>();\n+        List<SearchBasedFetcher> list = new ArrayList<>();\n+\n+        list.add(new ArXiv(importFormatPreferences));\n+        list.add(new INSPIREFetcher(importFormatPreferences));\n+        list.add(new GvkFetcher());\n+        list.add(new AstrophysicsDataSystem(importFormatPreferences));\n+        list.add(new MathSciNet(importFormatPreferences));\n+        list.add(new ZbMATH(importFormatPreferences));\n+        list.add(new GoogleScholar(importFormatPreferences));\n+        list.add(new DBLPFetcher(importFormatPreferences));\n+        list.add(new SpringerFetcher());\n+        list.add(new CrossRef());\n+        list.add(new CiteSeer());\n+        list.add(new DOAJFetcher(importFormatPreferences));\n+        list.add(new IEEE(importFormatPreferences));\n+        /* Disabled due to issue regarding Comparison: Title fields of the entries that otherwise are equivalent differ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1acd5aa0bfd310c8fda79fecde126200c3bfa046"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk5MjgwNg==", "bodyText": "Can you provide me the concreete example? Maybe, we need to fix the MedlineFetcher?", "url": "https://github.com/JabRef/jabref/pull/6504#discussion_r429992806", "createdAt": "2020-05-25T15:34:09Z", "author": {"login": "koppor"}, "path": "src/test/java/org/jabref/logic/importer/fetcher/CompositeSearchBasedFetcherTest.java", "diffHunk": "@@ -0,0 +1,110 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import org.jabref.logic.bibtex.FieldContentFormatterPreferences;\n+import org.jabref.logic.importer.FetcherException;\n+import org.jabref.logic.importer.ImportFormatPreferences;\n+import org.jabref.logic.importer.SearchBasedFetcher;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.testutils.category.FetcherTest;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@FetcherTest\n+public class CompositeSearchBasedFetcherTest {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CompositeSearchBasedFetcherTest.class);\n+\n+    @Test\n+    public void performSearchWithoutFetchers() {\n+        Set<SearchBasedFetcher> empty = new HashSet<>();\n+        CompositeSearchBasedFetcher fetcher = new CompositeSearchBasedFetcher(empty);\n+\n+        List<BibEntry> result = fetcher.performSearch(\"quantum\");\n+\n+        Assertions.assertTrue(result.isEmpty());\n+    }\n+\n+    @ParameterizedTest(name = \"Perform Search on empty query.\")\n+    @MethodSource(\"performSearchParameters\")\n+    public void performSearchOnEmptyQuery(Set<SearchBasedFetcher> fetchers) {\n+        CompositeSearchBasedFetcher compositeFetcher = new CompositeSearchBasedFetcher(fetchers);\n+\n+        List<BibEntry> queryResult = compositeFetcher.performSearch(\"\");\n+\n+        Assertions.assertTrue(queryResult.isEmpty());\n+    }\n+\n+    @ParameterizedTest(name = \"Perform search on query \\\"quantum\\\". Using the CompositeFetcher of the following \" +\n+            \"Fetchers: {arguments}\")\n+    @MethodSource(\"performSearchParameters\")\n+    public void performSearchOnNonEmptyQuery(Set<SearchBasedFetcher> fetchers) {\n+        CompositeSearchBasedFetcher compositeFetcher = new CompositeSearchBasedFetcher(fetchers);\n+\n+        List<BibEntry> compositeResult = compositeFetcher.performSearch(\"quantum\");\n+\n+        for (SearchBasedFetcher fetcher : fetchers) {\n+            try {\n+                Assertions.assertTrue(compositeResult.containsAll(fetcher.performSearch(\"quantum\")));\n+            } catch (FetcherException e) {\n+                /* We catch the Fetcher exception here, since the failing fetcher also fails in the CompositeFetcher\n+                 * and just leads to no additional results in the returned list. Therefor the test should not fail\n+                 * due to the fetcher exception\n+                 */\n+                LOGGER.warn(String.format(\"Fetcher %s failed \", fetcher.getName()), e);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * This method provides other methods with different sized sets of Searchbased fetchers wrapped in Arguments.\n+     *\n+     * @return A stream of Arguments wrapping the sets.\n+     */\n+    static Stream<Arguments> performSearchParameters() {\n+        ImportFormatPreferences importFormatPreferences = mock(ImportFormatPreferences.class);\n+        when(importFormatPreferences.getFieldContentFormatterPreferences())\n+                .thenReturn(mock(FieldContentFormatterPreferences.class));\n+        List<Set<SearchBasedFetcher>> fetcherParameters = new ArrayList<>();\n+        List<SearchBasedFetcher> list = new ArrayList<>();\n+\n+        list.add(new ArXiv(importFormatPreferences));\n+        list.add(new INSPIREFetcher(importFormatPreferences));\n+        list.add(new GvkFetcher());\n+        list.add(new AstrophysicsDataSystem(importFormatPreferences));\n+        list.add(new MathSciNet(importFormatPreferences));\n+        list.add(new ZbMATH(importFormatPreferences));\n+        list.add(new GoogleScholar(importFormatPreferences));\n+        list.add(new DBLPFetcher(importFormatPreferences));\n+        list.add(new SpringerFetcher());\n+        list.add(new CrossRef());\n+        list.add(new CiteSeer());\n+        list.add(new DOAJFetcher(importFormatPreferences));\n+        list.add(new IEEE(importFormatPreferences));\n+        /* Disabled due to issue regarding Comparison: Title fields of the entries that otherwise are equivalent differ\n+         * due to different JAXBElements.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1acd5aa0bfd310c8fda79fecde126200c3bfa046"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk5MzM0NQ==", "bodyText": "Can we do some different sub sets? Not always include the first one, but something like: Always +3 and then use the subsets matched by the respective bits?\n6543210\n0110001 --> list entry 5,4,0 are used\n\n(Not sure what the others think of it)", "url": "https://github.com/JabRef/jabref/pull/6504#discussion_r429993345", "createdAt": "2020-05-25T15:35:36Z", "author": {"login": "koppor"}, "path": "src/test/java/org/jabref/logic/importer/fetcher/CompositeSearchBasedFetcherTest.java", "diffHunk": "@@ -0,0 +1,110 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import org.jabref.logic.bibtex.FieldContentFormatterPreferences;\n+import org.jabref.logic.importer.FetcherException;\n+import org.jabref.logic.importer.ImportFormatPreferences;\n+import org.jabref.logic.importer.SearchBasedFetcher;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.testutils.category.FetcherTest;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@FetcherTest\n+public class CompositeSearchBasedFetcherTest {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CompositeSearchBasedFetcherTest.class);\n+\n+    @Test\n+    public void performSearchWithoutFetchers() {\n+        Set<SearchBasedFetcher> empty = new HashSet<>();\n+        CompositeSearchBasedFetcher fetcher = new CompositeSearchBasedFetcher(empty);\n+\n+        List<BibEntry> result = fetcher.performSearch(\"quantum\");\n+\n+        Assertions.assertTrue(result.isEmpty());\n+    }\n+\n+    @ParameterizedTest(name = \"Perform Search on empty query.\")\n+    @MethodSource(\"performSearchParameters\")\n+    public void performSearchOnEmptyQuery(Set<SearchBasedFetcher> fetchers) {\n+        CompositeSearchBasedFetcher compositeFetcher = new CompositeSearchBasedFetcher(fetchers);\n+\n+        List<BibEntry> queryResult = compositeFetcher.performSearch(\"\");\n+\n+        Assertions.assertTrue(queryResult.isEmpty());\n+    }\n+\n+    @ParameterizedTest(name = \"Perform search on query \\\"quantum\\\". Using the CompositeFetcher of the following \" +\n+            \"Fetchers: {arguments}\")\n+    @MethodSource(\"performSearchParameters\")\n+    public void performSearchOnNonEmptyQuery(Set<SearchBasedFetcher> fetchers) {\n+        CompositeSearchBasedFetcher compositeFetcher = new CompositeSearchBasedFetcher(fetchers);\n+\n+        List<BibEntry> compositeResult = compositeFetcher.performSearch(\"quantum\");\n+\n+        for (SearchBasedFetcher fetcher : fetchers) {\n+            try {\n+                Assertions.assertTrue(compositeResult.containsAll(fetcher.performSearch(\"quantum\")));\n+            } catch (FetcherException e) {\n+                /* We catch the Fetcher exception here, since the failing fetcher also fails in the CompositeFetcher\n+                 * and just leads to no additional results in the returned list. Therefor the test should not fail\n+                 * due to the fetcher exception\n+                 */\n+                LOGGER.warn(String.format(\"Fetcher %s failed \", fetcher.getName()), e);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * This method provides other methods with different sized sets of Searchbased fetchers wrapped in Arguments.\n+     *\n+     * @return A stream of Arguments wrapping the sets.\n+     */\n+    static Stream<Arguments> performSearchParameters() {\n+        ImportFormatPreferences importFormatPreferences = mock(ImportFormatPreferences.class);\n+        when(importFormatPreferences.getFieldContentFormatterPreferences())\n+                .thenReturn(mock(FieldContentFormatterPreferences.class));\n+        List<Set<SearchBasedFetcher>> fetcherParameters = new ArrayList<>();\n+        List<SearchBasedFetcher> list = new ArrayList<>();\n+\n+        list.add(new ArXiv(importFormatPreferences));\n+        list.add(new INSPIREFetcher(importFormatPreferences));\n+        list.add(new GvkFetcher());\n+        list.add(new AstrophysicsDataSystem(importFormatPreferences));\n+        list.add(new MathSciNet(importFormatPreferences));\n+        list.add(new ZbMATH(importFormatPreferences));\n+        list.add(new GoogleScholar(importFormatPreferences));\n+        list.add(new DBLPFetcher(importFormatPreferences));\n+        list.add(new SpringerFetcher());\n+        list.add(new CrossRef());\n+        list.add(new CiteSeer());\n+        list.add(new DOAJFetcher(importFormatPreferences));\n+        list.add(new IEEE(importFormatPreferences));\n+        /* Disabled due to issue regarding Comparison: Title fields of the entries that otherwise are equivalent differ\n+         * due to different JAXBElements.\n+         */\n+        // list.add(new MedlineFetcher());\n+\n+        // Create different sized sets of fetchers to use in the composite fetcher.\n+        for (int i = 1; i < list.size(); i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1acd5aa0bfd310c8fda79fecde126200c3bfa046"}, "originalPosition": 104}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3ODE0NTU2", "url": "https://github.com/JabRef/jabref/pull/6504#pullrequestreview-417814556", "createdAt": "2020-05-25T17:03:03Z", "commit": {"oid": "1acd5aa0bfd310c8fda79fecde126200c3bfa046"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNzowMzowNFrOGaGYkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNzowNjoyNVrOGaGb6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAyMDc1Mg==", "bodyText": "I think we should add a limit(...) of say 30 items here, at least unless paged fetcher are implemented.", "url": "https://github.com/JabRef/jabref/pull/6504#discussion_r430020752", "createdAt": "2020-05-25T17:03:04Z", "author": {"login": "tobiasdiez"}, "path": "src/main/java/org/jabref/logic/importer/fetcher/CompositeSearchBasedFetcher.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.jabref.logic.help.HelpFile;\n+import org.jabref.logic.importer.FetcherException;\n+import org.jabref.logic.importer.SearchBasedFetcher;\n+import org.jabref.model.entry.BibEntry;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class CompositeSearchBasedFetcher implements SearchBasedFetcher {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CompositeSearchBasedFetcher.class);\n+\n+    private final Set<SearchBasedFetcher> fetchers;\n+\n+    public CompositeSearchBasedFetcher(Set<SearchBasedFetcher> searchBasedFetchers) {\n+        // Remove the Composite Fetcher instance from its own fetcher set to prevent a StackOverflow\n+        this.fetchers = searchBasedFetchers.stream()\n+                .filter(searchBasedFetcher -> searchBasedFetcher != this)\n+                .collect(Collectors.toSet());\n+    }\n+\n+    @Override\n+    public List<BibEntry> performSearch(String query) {\n+        return fetchers.stream().flatMap(searchBasedFetcher -> {\n+            try {\n+                return searchBasedFetcher.performSearch(query).stream();\n+            } catch (FetcherException e) {\n+                LOGGER.warn(String.format(\"%s API request failed\", searchBasedFetcher.getName()), e);\n+                return Stream.empty();\n+            }\n+        }).parallel().collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1acd5aa0bfd310c8fda79fecde126200c3bfa046"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAyMTYxMQ==", "bodyText": "please don't use assertTrue(empty) but assertEquals(..., emptyList) since this gives a better error message", "url": "https://github.com/JabRef/jabref/pull/6504#discussion_r430021611", "createdAt": "2020-05-25T17:06:25Z", "author": {"login": "tobiasdiez"}, "path": "src/test/java/org/jabref/logic/importer/fetcher/CompositeSearchBasedFetcherTest.java", "diffHunk": "@@ -0,0 +1,110 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import org.jabref.logic.bibtex.FieldContentFormatterPreferences;\n+import org.jabref.logic.importer.FetcherException;\n+import org.jabref.logic.importer.ImportFormatPreferences;\n+import org.jabref.logic.importer.SearchBasedFetcher;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.testutils.category.FetcherTest;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@FetcherTest\n+public class CompositeSearchBasedFetcherTest {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CompositeSearchBasedFetcherTest.class);\n+\n+    @Test\n+    public void performSearchWithoutFetchers() {\n+        Set<SearchBasedFetcher> empty = new HashSet<>();\n+        CompositeSearchBasedFetcher fetcher = new CompositeSearchBasedFetcher(empty);\n+\n+        List<BibEntry> result = fetcher.performSearch(\"quantum\");\n+\n+        Assertions.assertTrue(result.isEmpty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1acd5aa0bfd310c8fda79fecde126200c3bfa046"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da09f97d9b46e2f0f9e193c18e03be4aae19dbdf", "author": {"user": {"login": "DominikVoigt", "name": "Dominik Voigt"}}, "url": "https://github.com/JabRef/jabref/commit/da09f97d9b46e2f0f9e193c18e03be4aae19dbdf", "committedDate": "2020-05-25T22:41:51Z", "message": "Add null check for CompositeSearchBasedFetcher.\nAdd null test for CompositeSearchBasedFetcher.\nAdapt most change requests\n\nSigned-off-by: DominikVoigt <dominik.ingo.voigt@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f07fa3390043511b276b31a678b7c98b93e7f823", "author": {"user": {"login": "DominikVoigt", "name": "Dominik Voigt"}}, "url": "https://github.com/JabRef/jabref/commit/f07fa3390043511b276b31a678b7c98b93e7f823", "committedDate": "2020-05-27T13:31:12Z", "message": "Modify Stream of Arguments according to recommendation.\n\nSigned-off-by: DominikVoigt <dominik.ingo.voigt@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c70b3f81b6feff5c5a02433aff3b9e7fe4b3c49", "author": {"user": {"login": "DominikVoigt", "name": "Dominik Voigt"}}, "url": "https://github.com/JabRef/jabref/commit/2c70b3f81b6feff5c5a02433aff3b9e7fe4b3c49", "committedDate": "2020-05-27T19:04:05Z", "message": "Change size of inkrement from 3 to 273 due to too many test arguments getting created otherwise.\n\nSigned-off-by: DominikVoigt <dominik.ingo.voigt@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NTk4NjI5", "url": "https://github.com/JabRef/jabref/pull/6504#pullrequestreview-419598629", "createdAt": "2020-05-27T20:51:51Z", "commit": {"oid": "2c70b3f81b6feff5c5a02433aff3b9e7fe4b3c49"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b278178b78cf293aece58446e2534a7383b7c31f", "author": {"user": {"login": "DominikVoigt", "name": "Dominik Voigt"}}, "url": "https://github.com/JabRef/jabref/commit/b278178b78cf293aece58446e2534a7383b7c31f", "committedDate": "2020-05-27T21:17:47Z", "message": "Move zBMathFetcher to set of CI fetchers.\n\nSigned-off-by: DominikVoigt <dominik.ingo.voigt@gmail.com>"}, "afterCommit": {"oid": "2c70b3f81b6feff5c5a02433aff3b9e7fe4b3c49", "author": {"user": {"login": "DominikVoigt", "name": "Dominik Voigt"}}, "url": "https://github.com/JabRef/jabref/commit/2c70b3f81b6feff5c5a02433aff3b9e7fe4b3c49", "committedDate": "2020-05-27T19:04:05Z", "message": "Change size of inkrement from 3 to 273 due to too many test arguments getting created otherwise.\n\nSigned-off-by: DominikVoigt <dominik.ingo.voigt@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d2b006a775a2d9dbad1570c7645623610fadb42", "author": {"user": {"login": "DominikVoigt", "name": "Dominik Voigt"}}, "url": "https://github.com/JabRef/jabref/commit/7d2b006a775a2d9dbad1570c7645623610fadb42", "committedDate": "2020-05-27T22:04:04Z", "message": "Merge branch 'master' into feature/add-option-to-fetch-from-all-sources"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f446c15efd72613079d8ce3095b6435adefa03a", "author": {"user": {"login": "DominikVoigt", "name": "Dominik Voigt"}}, "url": "https://github.com/JabRef/jabref/commit/5f446c15efd72613079d8ce3095b6435adefa03a", "committedDate": "2020-05-27T22:13:05Z", "message": "Reformat steam operators.\nRemove Annotation from IEEETest.\n\nSigned-off-by: DominikVoigt <dominik.ingo.voigt@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9454c5380db2a677e4de387e1808091af966a5f", "author": {"user": {"login": "koppor", "name": "Oliver Kopp"}}, "url": "https://github.com/JabRef/jabref/commit/d9454c5380db2a677e4de387e1808091af966a5f", "committedDate": "2020-05-27T22:14:53Z", "message": "Merge branch 'master' into feature/add-option-to-fetch-from-all-sources"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 282, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}