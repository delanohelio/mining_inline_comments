{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyMTYyMjkz", "number": 6779, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMDo0NzoxOVrOEed5vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMDo0NzoxOVrOEed5vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzgyNjU1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/jabref/gui/preferences/LinkedFilesTabViewModel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMDo0NzoxOVrOHKIrUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMDo0NzoxOVrOHKIrUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM4OTk3MQ==", "bodyText": "default missing?", "url": "https://github.com/JabRef/jabref/pull/6779#discussion_r480389971", "createdAt": "2020-08-31T20:47:19Z", "author": {"login": "Siedlerchr"}, "path": "src/main/java/org/jabref/gui/preferences/LinkedFilesTabViewModel.java", "diffHunk": "@@ -0,0 +1,192 @@\n+package org.jabref.gui.preferences;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javafx.beans.property.BooleanProperty;\n+import javafx.beans.property.ListProperty;\n+import javafx.beans.property.SimpleBooleanProperty;\n+import javafx.beans.property.SimpleListProperty;\n+import javafx.beans.property.SimpleStringProperty;\n+import javafx.beans.property.StringProperty;\n+import javafx.collections.FXCollections;\n+\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.util.DirectoryDialogConfiguration;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.logic.util.io.AutoLinkPreferences;\n+import org.jabref.model.metadata.FilePreferences;\n+import org.jabref.preferences.PreferencesService;\n+\n+import de.saxsys.mvvmfx.utils.validation.FunctionBasedValidator;\n+import de.saxsys.mvvmfx.utils.validation.ValidationMessage;\n+import de.saxsys.mvvmfx.utils.validation.ValidationStatus;\n+import de.saxsys.mvvmfx.utils.validation.Validator;\n+\n+public class LinkedFilesTabViewModel implements PreferenceTabViewModel {\n+\n+    private final StringProperty mainFileDirectoryProperty = new SimpleStringProperty(\"\");\n+    private final BooleanProperty useBibLocationAsPrimaryProperty = new SimpleBooleanProperty();\n+    private final BooleanProperty autolinkFileStartsBibtexProperty = new SimpleBooleanProperty();\n+    private final BooleanProperty autolinkFileExactBibtexProperty = new SimpleBooleanProperty();\n+    private final BooleanProperty autolinkUseRegexProperty = new SimpleBooleanProperty();\n+    private final StringProperty autolinkRegexKeyProperty = new SimpleStringProperty(\"\");\n+    private final BooleanProperty searchFilesOnOpenProperty = new SimpleBooleanProperty();\n+    private final BooleanProperty openBrowseOnCreateProperty = new SimpleBooleanProperty();\n+    private final ListProperty<String> defaultFileNamePatternsProperty =\n+            new SimpleListProperty<>(FXCollections.observableArrayList(FilePreferences.DEFAULT_FILENAME_PATTERNS));\n+    private final StringProperty fileNamePatternProperty = new SimpleStringProperty();\n+    private final StringProperty fileDirectoryPatternProperty = new SimpleStringProperty();\n+\n+    private final Validator mainFileDirValidator;\n+\n+    private final DialogService dialogService;\n+    private final PreferencesService preferences;\n+    private final FilePreferences initialFilePreferences;\n+    private final AutoLinkPreferences initialAutoLinkPreferences;\n+\n+    public LinkedFilesTabViewModel(DialogService dialogService, PreferencesService preferences) {\n+        this.dialogService = dialogService;\n+        this.preferences = preferences;\n+        this.initialFilePreferences = preferences.getFilePreferences();\n+        this.initialAutoLinkPreferences = preferences.getAutoLinkPreferences();\n+\n+        mainFileDirValidator = new FunctionBasedValidator<>(\n+                mainFileDirectoryProperty,\n+                input -> {\n+                    Path path = Path.of(mainFileDirectoryProperty.getValue());\n+                    return (Files.exists(path) && Files.isDirectory(path));\n+                },\n+                ValidationMessage.error(String.format(\"%s > %s > %s %n %n %s\",\n+                        Localization.lang(\"File\"),\n+                        Localization.lang(\"External file links\"),\n+                        Localization.lang(\"Main file directory\"),\n+                        Localization.lang(\"Directory not found\")\n+                        )\n+                )\n+        );\n+    }\n+\n+    @Override\n+    public void setValues() {\n+        // External files preferences / Attached files preferences / File preferences\n+        mainFileDirectoryProperty.setValue(initialFilePreferences.getFileDirectory().orElse(Path.of(\"\")).toString());\n+        useBibLocationAsPrimaryProperty.setValue(initialFilePreferences.isBibLocationAsPrimary());\n+        searchFilesOnOpenProperty.setValue(initialFilePreferences.shouldSearchFilesOnOpen());\n+        openBrowseOnCreateProperty.setValue(initialFilePreferences.shouldOpenBrowseOnCreate());\n+        fileNamePatternProperty.setValue(initialFilePreferences.getFileNamePattern());\n+        fileDirectoryPatternProperty.setValue(initialFilePreferences.getFileDirectoryPattern());\n+\n+        // Autolink preferences\n+        switch (initialAutoLinkPreferences.getCitationKeyDependency()) {\n+            case START -> autolinkFileStartsBibtexProperty.setValue(true);\n+            case EXACT -> autolinkFileExactBibtexProperty.setValue(true);\n+            case REGEX -> autolinkUseRegexProperty.setValue(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352417d8fa73b0ff9d1c4ebdee87c7ed563e1e1d"}, "originalPosition": 86}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1681, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}