{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2OTg2ODIz", "number": 1508, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDo0MTo1MlrOE1QSUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMzoxOToxMFrOE2_gQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0Mjc2ODE4OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/NonHealthyToReadOnlyHealthyNodeHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDo0MTo1MlrOHtbKiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwNTo1MjowN1rOHuhABg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM5MzAzMw==", "bodyText": "Is that right we just log an error log here and doesn't take action for the read-only node?\nSuppose here we should let these pipelines only allowed to be used for read operations rather than write operations.", "url": "https://github.com/apache/ozone/pull/1508#discussion_r517393033", "createdAt": "2020-11-04T14:41:52Z", "author": {"login": "linyiqun"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/NonHealthyToReadOnlyHealthyNodeHandler.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hdds.scm.node;\n+\n+import java.util.Set;\n+\n+import org.apache.hadoop.hdds.conf.ConfigurationSource;\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.protocol.DatanodeDetails;\n+import org.apache.hadoop.hdds.scm.pipeline.PipelineID;\n+import org.apache.hadoop.hdds.scm.pipeline.PipelineManager;\n+import org.apache.hadoop.hdds.server.events.EventHandler;\n+import org.apache.hadoop.hdds.server.events.EventPublisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles Stale node event.\n+ */\n+public class NonHealthyToReadOnlyHealthyNodeHandler\n+    implements EventHandler<DatanodeDetails> {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(NonHealthyToReadOnlyHealthyNodeHandler.class);\n+  private final PipelineManager pipelineManager;\n+  private final NodeManager nodeManager;\n+  private final ConfigurationSource conf;\n+\n+  public NonHealthyToReadOnlyHealthyNodeHandler(\n+      NodeManager nodeManager, PipelineManager pipelineManager,\n+      OzoneConfiguration conf) {\n+    this.pipelineManager = pipelineManager;\n+    this.nodeManager = nodeManager;\n+    this.conf = conf;\n+  }\n+\n+  @Override\n+  public void onMessage(DatanodeDetails datanodeDetails,\n+      EventPublisher publisher) {\n+    Set<PipelineID> pipelineIds =\n+        nodeManager.getPipelines(datanodeDetails);\n+    LOG.info(\"Datanode {} moved to HEALTH READ ONLY state.\",\n+        datanodeDetails);\n+    if (!pipelineIds.isEmpty()) {\n+      LOG.error(\"Datanode {} is part of pipelines {} in HEALTH READ ONLY \" +\n+              \"state.\",\n+          datanodeDetails, pipelineIds);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbabe0ff063836ff596d71d9cce2f8cdc7a9ad45"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUzNzIyMg==", "bodyText": "Yes, because this condition should never happen. Nodes are moved to this state as part of finalizeUpgrade process on SCM. This will be another PR on of this one.", "url": "https://github.com/apache/ozone/pull/1508#discussion_r518537222", "createdAt": "2020-11-06T05:52:07Z", "author": {"login": "prashantpogde"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/NonHealthyToReadOnlyHealthyNodeHandler.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hdds.scm.node;\n+\n+import java.util.Set;\n+\n+import org.apache.hadoop.hdds.conf.ConfigurationSource;\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.protocol.DatanodeDetails;\n+import org.apache.hadoop.hdds.scm.pipeline.PipelineID;\n+import org.apache.hadoop.hdds.scm.pipeline.PipelineManager;\n+import org.apache.hadoop.hdds.server.events.EventHandler;\n+import org.apache.hadoop.hdds.server.events.EventPublisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles Stale node event.\n+ */\n+public class NonHealthyToReadOnlyHealthyNodeHandler\n+    implements EventHandler<DatanodeDetails> {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(NonHealthyToReadOnlyHealthyNodeHandler.class);\n+  private final PipelineManager pipelineManager;\n+  private final NodeManager nodeManager;\n+  private final ConfigurationSource conf;\n+\n+  public NonHealthyToReadOnlyHealthyNodeHandler(\n+      NodeManager nodeManager, PipelineManager pipelineManager,\n+      OzoneConfiguration conf) {\n+    this.pipelineManager = pipelineManager;\n+    this.nodeManager = nodeManager;\n+    this.conf = conf;\n+  }\n+\n+  @Override\n+  public void onMessage(DatanodeDetails datanodeDetails,\n+      EventPublisher publisher) {\n+    Set<PipelineID> pipelineIds =\n+        nodeManager.getPipelines(datanodeDetails);\n+    LOG.info(\"Datanode {} moved to HEALTH READ ONLY state.\",\n+        datanodeDetails);\n+    if (!pipelineIds.isEmpty()) {\n+      LOG.error(\"Datanode {} is part of pipelines {} in HEALTH READ ONLY \" +\n+              \"state.\",\n+          datanodeDetails, pipelineIds);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM5MzAzMw=="}, "originalCommit": {"oid": "bbabe0ff063836ff596d71d9cce2f8cdc7a9ad45"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDYxNzA5OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/DatanodeInfo.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMToxODowM1rOHwB-AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxODozNjozNFrOHy6noA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEyNTk1Mg==", "bodyText": "Why cannot we pass the layout version from DN registration to this 'DatanodeInfo' constructor? Instead of initializing with layout version '0'.", "url": "https://github.com/apache/ozone/pull/1508#discussion_r520125952", "createdAt": "2020-11-09T21:18:03Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/DatanodeInfo.java", "diffHunk": "@@ -53,6 +56,11 @@ public DatanodeInfo(DatanodeDetails datanodeDetails) {\n     super(datanodeDetails);\n     this.lock = new ReentrantReadWriteLock();\n     this.lastHeartbeatTime = Time.monotonicNow();\n+    lastKnownLayoutVersion =\n+        LayoutVersionProto.newBuilder()\n+            .setMetadataLayoutVersion(0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbabe0ff063836ff596d71d9cce2f8cdc7a9ad45"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgxMjQyOA==", "bodyText": "because register may not even be called when the datanode comes up. The very first message from datanode could be directly a heartbeat message.", "url": "https://github.com/apache/ozone/pull/1508#discussion_r520812428", "createdAt": "2020-11-10T19:14:51Z", "author": {"login": "prashantpogde"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/DatanodeInfo.java", "diffHunk": "@@ -53,6 +56,11 @@ public DatanodeInfo(DatanodeDetails datanodeDetails) {\n     super(datanodeDetails);\n     this.lock = new ReentrantReadWriteLock();\n     this.lastHeartbeatTime = Time.monotonicNow();\n+    lastKnownLayoutVersion =\n+        LayoutVersionProto.newBuilder()\n+            .setMetadataLayoutVersion(0)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEyNTk1Mg=="}, "originalCommit": {"oid": "bbabe0ff063836ff596d71d9cce2f8cdc7a9ad45"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTczODAyNw==", "bodyText": "The first request from a DN has to be a registration request. If SCM has lost the in memory state of a Datanode while it was down, then it has to re-register again. In any case, we should be able to use the layout version from the DN's heartbeat/registration payload right?", "url": "https://github.com/apache/ozone/pull/1508#discussion_r521738027", "createdAt": "2020-11-12T00:39:51Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/DatanodeInfo.java", "diffHunk": "@@ -53,6 +56,11 @@ public DatanodeInfo(DatanodeDetails datanodeDetails) {\n     super(datanodeDetails);\n     this.lock = new ReentrantReadWriteLock();\n     this.lastHeartbeatTime = Time.monotonicNow();\n+    lastKnownLayoutVersion =\n+        LayoutVersionProto.newBuilder()\n+            .setMetadataLayoutVersion(0)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEyNTk1Mg=="}, "originalCommit": {"oid": "bbabe0ff063836ff596d71d9cce2f8cdc7a9ad45"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE1MTI2NA==", "bodyText": "yup. I will upload the changes.", "url": "https://github.com/apache/ozone/pull/1508#discussion_r523151264", "createdAt": "2020-11-13T18:36:34Z", "author": {"login": "prashantpogde"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/DatanodeInfo.java", "diffHunk": "@@ -53,6 +56,11 @@ public DatanodeInfo(DatanodeDetails datanodeDetails) {\n     super(datanodeDetails);\n     this.lock = new ReentrantReadWriteLock();\n     this.lastHeartbeatTime = Time.monotonicNow();\n+    lastKnownLayoutVersion =\n+        LayoutVersionProto.newBuilder()\n+            .setMetadataLayoutVersion(0)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEyNTk1Mg=="}, "originalCommit": {"oid": "bbabe0ff063836ff596d71d9cce2f8cdc7a9ad45"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDYyMjAyOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/DatanodeInfo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMToxOToyN1rOHwCA6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOToxODozNlrOHwsAMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEyNjY5OQ==", "bodyText": "Nit. Should we combine this with the operation in 'updateLastHeartbeatTime'? We are taking a write lock in both the cases and doing minimal work.", "url": "https://github.com/apache/ozone/pull/1508#discussion_r520126699", "createdAt": "2020-11-09T21:19:27Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/DatanodeInfo.java", "diffHunk": "@@ -69,6 +77,24 @@ public void updateLastHeartbeatTime() {\n     }\n   }\n \n+  /**\n+   * Updates the last LayoutVersion.\n+   */\n+  public void updateLastKnownLayoutVersion(LayoutVersionProto version) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbabe0ff063836ff596d71d9cce2f8cdc7a9ad45"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgxNDY0Mg==", "bodyText": "it is doable. The reason I kept layout version info and its handling separate from the rest of the heartbeat processing is because I wanted to play with the idea that later on, we do not need to send layout version to SCM all the time but only when needed.", "url": "https://github.com/apache/ozone/pull/1508#discussion_r520814642", "createdAt": "2020-11-10T19:18:36Z", "author": {"login": "prashantpogde"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/DatanodeInfo.java", "diffHunk": "@@ -69,6 +77,24 @@ public void updateLastHeartbeatTime() {\n     }\n   }\n \n+  /**\n+   * Updates the last LayoutVersion.\n+   */\n+  public void updateLastKnownLayoutVersion(LayoutVersionProto version) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEyNjY5OQ=="}, "originalCommit": {"oid": "bbabe0ff063836ff596d71d9cce2f8cdc7a9ad45"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDY0NTM1OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/NonHealthyToReadOnlyHealthyNodeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMToyNjowOVrOHwCOtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOToxOToxNVrOHwsBqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEzMDIzMA==", "bodyText": "Nit. Javadoc needs update.", "url": "https://github.com/apache/ozone/pull/1508#discussion_r520130230", "createdAt": "2020-11-09T21:26:09Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/NonHealthyToReadOnlyHealthyNodeHandler.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hdds.scm.node;\n+\n+import java.util.Set;\n+\n+import org.apache.hadoop.hdds.conf.ConfigurationSource;\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.protocol.DatanodeDetails;\n+import org.apache.hadoop.hdds.scm.pipeline.PipelineID;\n+import org.apache.hadoop.hdds.scm.pipeline.PipelineManager;\n+import org.apache.hadoop.hdds.server.events.EventHandler;\n+import org.apache.hadoop.hdds.server.events.EventPublisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles Stale node event.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbabe0ff063836ff596d71d9cce2f8cdc7a9ad45"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgxNTAxOA==", "bodyText": "yup, will do.", "url": "https://github.com/apache/ozone/pull/1508#discussion_r520815018", "createdAt": "2020-11-10T19:19:15Z", "author": {"login": "prashantpogde"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/NonHealthyToReadOnlyHealthyNodeHandler.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hdds.scm.node;\n+\n+import java.util.Set;\n+\n+import org.apache.hadoop.hdds.conf.ConfigurationSource;\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.protocol.DatanodeDetails;\n+import org.apache.hadoop.hdds.scm.pipeline.PipelineID;\n+import org.apache.hadoop.hdds.scm.pipeline.PipelineManager;\n+import org.apache.hadoop.hdds.server.events.EventHandler;\n+import org.apache.hadoop.hdds.server.events.EventPublisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles Stale node event.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEzMDIzMA=="}, "originalCommit": {"oid": "bbabe0ff063836ff596d71d9cce2f8cdc7a9ad45"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDk5MDA5OnYy", "diffSide": "LEFT", "path": "hadoop-hdds/server-scm/src/test/java/org/apache/hadoop/ozone/scm/node/TestSCMNodeMetrics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMzoxOToxMFrOHwFdHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOTo1NDo0M1rOHwtSLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE4MzA2OA==", "bodyText": "Can we change the test so that it still verifies the presence of \"HealthyNodes\" in the SCM eventually?", "url": "https://github.com/apache/ozone/pull/1508#discussion_r520183068", "createdAt": "2020-11-09T23:19:10Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-hdds/server-scm/src/test/java/org/apache/hadoop/ozone/scm/node/TestSCMNodeMetrics.java", "diffHunk": "@@ -182,7 +196,7 @@ public void testNodeCountAndInfoMetricsReported() throws Exception {\n \n     MetricsRecordBuilder metricsSource = getMetrics(SCMNodeMetrics.SOURCE_NAME);\n \n-    assertGauge(\"HealthyNodes\", 1, metricsSource);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbabe0ff063836ff596d71d9cce2f8cdc7a9ad45"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgzNTYzMA==", "bodyText": "yup. done.", "url": "https://github.com/apache/ozone/pull/1508#discussion_r520835630", "createdAt": "2020-11-10T19:54:43Z", "author": {"login": "prashantpogde"}, "path": "hadoop-hdds/server-scm/src/test/java/org/apache/hadoop/ozone/scm/node/TestSCMNodeMetrics.java", "diffHunk": "@@ -182,7 +196,7 @@ public void testNodeCountAndInfoMetricsReported() throws Exception {\n \n     MetricsRecordBuilder metricsSource = getMetrics(SCMNodeMetrics.SOURCE_NAME);\n \n-    assertGauge(\"HealthyNodes\", 1, metricsSource);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE4MzA2OA=="}, "originalCommit": {"oid": "bbabe0ff063836ff596d71d9cce2f8cdc7a9ad45"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4646, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}