{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUxMjQ2MjQ0", "number": 1212, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwOTozNjo0MlrOEQ-Dww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMzo0MjoxOFrOETQngQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MjI5NDQzOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/client/src/main/java/org/apache/hadoop/ozone/client/io/KeyInputStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwOTozNjo0MlrOG1auUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMjo0MjoyOVrOG1gnvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY2NTU1NQ==", "bodyText": "add unit test for skip.", "url": "https://github.com/apache/ozone/pull/1212#discussion_r458665555", "createdAt": "2020-07-22T09:36:42Z", "author": {"login": "runzhiwang"}, "path": "hadoop-ozone/client/src/main/java/org/apache/hadoop/ozone/client/io/KeyInputStream.java", "diffHunk": "@@ -325,62 +323,14 @@ public long getRemainingOfIndex(int index) throws IOException {\n     return blockStreams.get(index).getRemaining();\n   }\n \n-  /**\n-   * Copies some or all bytes from a large (over 2GB) <code>InputStream</code>\n-   * to an <code>OutputStream</code>, optionally skipping input bytes.\n-   * <p>\n-   * Copy the method from IOUtils of commons-io to reimplement skip by seek\n-   * rather than read. The reason why IOUtils of commons-io implement skip\n-   * by read can be found at\n-   * <a href=\"https://issues.apache.org/jira/browse/IO-203\">IO-203</a>.\n-   * </p>\n-   * <p>\n-   * This method uses the provided buffer, so there is no need to use a\n-   * <code>BufferedInputStream</code>.\n-   * </p>\n-   *\n-   * @param output the <code>OutputStream</code> to write to\n-   * @param inputOffset : number of bytes to skip from input before copying\n-   * -ve values are ignored\n-   * @param length : number of bytes to copy. -ve means all\n-   * @param buffer the buffer to use for the copy\n-   * @return the number of bytes copied\n-   * @throws NullPointerException if the input or output is null\n-   * @throws IOException          if an I/O error occurs\n-   */\n-  public long copyLarge(final OutputStream output,\n-      final long inputOffset, final long len, final byte[] buffer)\n-      throws IOException {\n-    if (inputOffset > 0) {\n-      seek(inputOffset);\n-    }\n-\n-    if (len == 0) {\n+  @Override\n+  public long skip(long n) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49ca2904f75d6e067a691e46e2888a001f54ffeb"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc2MjE3Mg==", "bodyText": "Ok, done.", "url": "https://github.com/apache/ozone/pull/1212#discussion_r458762172", "createdAt": "2020-07-22T12:42:29Z", "author": {"login": "maobaolong"}, "path": "hadoop-ozone/client/src/main/java/org/apache/hadoop/ozone/client/io/KeyInputStream.java", "diffHunk": "@@ -325,62 +323,14 @@ public long getRemainingOfIndex(int index) throws IOException {\n     return blockStreams.get(index).getRemaining();\n   }\n \n-  /**\n-   * Copies some or all bytes from a large (over 2GB) <code>InputStream</code>\n-   * to an <code>OutputStream</code>, optionally skipping input bytes.\n-   * <p>\n-   * Copy the method from IOUtils of commons-io to reimplement skip by seek\n-   * rather than read. The reason why IOUtils of commons-io implement skip\n-   * by read can be found at\n-   * <a href=\"https://issues.apache.org/jira/browse/IO-203\">IO-203</a>.\n-   * </p>\n-   * <p>\n-   * This method uses the provided buffer, so there is no need to use a\n-   * <code>BufferedInputStream</code>.\n-   * </p>\n-   *\n-   * @param output the <code>OutputStream</code> to write to\n-   * @param inputOffset : number of bytes to skip from input before copying\n-   * -ve values are ignored\n-   * @param length : number of bytes to copy. -ve means all\n-   * @param buffer the buffer to use for the copy\n-   * @return the number of bytes copied\n-   * @throws NullPointerException if the input or output is null\n-   * @throws IOException          if an I/O error occurs\n-   */\n-  public long copyLarge(final OutputStream output,\n-      final long inputOffset, final long len, final byte[] buffer)\n-      throws IOException {\n-    if (inputOffset > 0) {\n-      seek(inputOffset);\n-    }\n-\n-    if (len == 0) {\n+  @Override\n+  public long skip(long n) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY2NTU1NQ=="}, "originalCommit": {"oid": "49ca2904f75d6e067a691e46e2888a001f54ffeb"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2Mjg3NTE1OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/client/rpc/TestKeyInputStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMjozMzoxOVrOG1gTUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMjo0MzoxMFrOG1gpLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc1Njk0NA==", "bodyText": "why { ?", "url": "https://github.com/apache/ozone/pull/1212#discussion_r458756944", "createdAt": "2020-07-22T12:33:19Z", "author": {"login": "runzhiwang"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/client/rpc/TestKeyInputStream.java", "diffHunk": "@@ -395,4 +334,64 @@ public void testReadChunk() throws Exception {\n     }\n     keyInputStream.close();\n   }\n+\n+  @Test\n+  public void testSkip() throws Exception {\n+    {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "635a8741311a5d839988f7ffe57ea32cd4fcc464"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc2MjU0MQ==", "bodyText": "Sorry, my bad, already fixed it.", "url": "https://github.com/apache/ozone/pull/1212#discussion_r458762541", "createdAt": "2020-07-22T12:43:10Z", "author": {"login": "maobaolong"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/client/rpc/TestKeyInputStream.java", "diffHunk": "@@ -395,4 +334,64 @@ public void testReadChunk() throws Exception {\n     }\n     keyInputStream.close();\n   }\n+\n+  @Test\n+  public void testSkip() throws Exception {\n+    {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc1Njk0NA=="}, "originalCommit": {"oid": "635a8741311a5d839988f7ffe57ea32cd4fcc464"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2Mjg3NjgzOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/client/rpc/TestKeyInputStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMjozMzo0NlrOG1gUZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMjo0MzoxOFrOG1gpcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc1NzIyMw==", "bodyText": "4 space ?", "url": "https://github.com/apache/ozone/pull/1212#discussion_r458757223", "createdAt": "2020-07-22T12:33:46Z", "author": {"login": "runzhiwang"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/client/rpc/TestKeyInputStream.java", "diffHunk": "@@ -395,4 +334,64 @@ public void testReadChunk() throws Exception {\n     }\n     keyInputStream.close();\n   }\n+\n+  @Test\n+  public void testSkip() throws Exception {\n+    {\n+      XceiverClientManager.resetXceiverClientMetrics();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "635a8741311a5d839988f7ffe57ea32cd4fcc464"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc2MjYxMA==", "bodyText": "Sorry, my bad, already fixed it.", "url": "https://github.com/apache/ozone/pull/1212#discussion_r458762610", "createdAt": "2020-07-22T12:43:18Z", "author": {"login": "maobaolong"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/client/rpc/TestKeyInputStream.java", "diffHunk": "@@ -395,4 +334,64 @@ public void testReadChunk() throws Exception {\n     }\n     keyInputStream.close();\n   }\n+\n+  @Test\n+  public void testSkip() throws Exception {\n+    {\n+      XceiverClientManager.resetXceiverClientMetrics();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc1NzIyMw=="}, "originalCommit": {"oid": "635a8741311a5d839988f7ffe57ea32cd4fcc464"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MjkxOTU4OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/common/src/main/resources/ozone-default.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMjo0NTo1MlrOG1gvbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMjo0NTo1MlrOG1gvbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc2NDE0MA==", "bodyText": "We can describe what size can achieve best performance.", "url": "https://github.com/apache/ozone/pull/1212#discussion_r458764140", "createdAt": "2020-07-22T12:45:52Z", "author": {"login": "runzhiwang"}, "path": "hadoop-hdds/common/src/main/resources/ozone-default.xml", "diffHunk": "@@ -2421,6 +2421,14 @@\n       information will be extracted\n     </description>\n   </property>\n+  <property>\n+    <name>ozone.client.buffer.size</name>\n+    <tag>OZONE, S3GATEWAY</tag>\n+    <value>4KB</value>\n+    <description>\n+      The size of the buffer which is for read block. (4KB by default).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae006e920aab139c0454d4dea513166efc01627d"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjI5OTk3OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/OzoneConfigKeys.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMzo0MDo0NlrOG4488A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNjoyNzoxMlrOG5qpwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMwNjU0NA==", "bodyText": "Two things:\n\nozone.client.buffer.size seems to be confusing. This configuration for the Ozone client of the s3g. As we have a global list of configuration keys, I guess we need a s3g prefix here. (For example ozone.s3g.client.buffer.size)\nUsually, I prefer to use annotation based configuration, if possible. (It can be harder here as S3g uses CDI injections. If it's too complex, you can ignore...)", "url": "https://github.com/apache/ozone/pull/1212#discussion_r462306544", "createdAt": "2020-07-29T13:40:46Z", "author": {"login": "elek"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/OzoneConfigKeys.java", "diffHunk": "@@ -465,6 +465,12 @@\n   public static final String  OZONE_CLIENT_HTTPS_NEED_AUTH_KEY =\n       \"ozone.https.client.need-auth\";\n   public static final boolean OZONE_CLIENT_HTTPS_NEED_AUTH_DEFAULT = false;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9edbae595866265c25fca2419a44cbf982be2e1f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEyMDgzNA==", "bodyText": "Thank you for give me this task,  i have create a ticket for it, and take it, https://issues.apache.org/jira/browse/HDDS-4049\nFor this PR, lets just correct the key name.", "url": "https://github.com/apache/ozone/pull/1212#discussion_r463120834", "createdAt": "2020-07-30T16:27:12Z", "author": {"login": "maobaolong"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/OzoneConfigKeys.java", "diffHunk": "@@ -465,6 +465,12 @@\n   public static final String  OZONE_CLIENT_HTTPS_NEED_AUTH_KEY =\n       \"ozone.https.client.need-auth\";\n   public static final boolean OZONE_CLIENT_HTTPS_NEED_AUTH_DEFAULT = false;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMwNjU0NA=="}, "originalCommit": {"oid": "9edbae595866265c25fca2419a44cbf982be2e1f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjMwNjU3OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/ObjectEndpoint.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMzo0MjoxOFrOG45BNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNjoxNjo0MFrOG5qOww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMwNzYzOQ==", "bodyText": "NIT: It can be slightly better to use\n  @Inject\n  private OzoneConfiguration ozoneConfiguration;\n\nAnd you don't need to expose getClient() in the EndpointBase.\n(Didn't try, but it should work, IMHO).", "url": "https://github.com/apache/ozone/pull/1212#discussion_r462307639", "createdAt": "2020-07-29T13:42:18Z", "author": {"login": "elek"}, "path": "hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/ObjectEndpoint.java", "diffHunk": "@@ -114,6 +120,13 @@ public ObjectEndpoint() {\n     customizableGetHeaders.add(\"Content-Encoding\");\n   }\n \n+  @PostConstruct\n+  public void init() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9edbae595866265c25fca2419a44cbf982be2e1f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzExMzkyMw==", "bodyText": "Thank you for let me know this high technology", "url": "https://github.com/apache/ozone/pull/1212#discussion_r463113923", "createdAt": "2020-07-30T16:16:40Z", "author": {"login": "maobaolong"}, "path": "hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/ObjectEndpoint.java", "diffHunk": "@@ -114,6 +120,13 @@ public ObjectEndpoint() {\n     customizableGetHeaders.add(\"Content-Encoding\");\n   }\n \n+  @PostConstruct\n+  public void init() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMwNzYzOQ=="}, "originalCommit": {"oid": "9edbae595866265c25fca2419a44cbf982be2e1f"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3992, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}