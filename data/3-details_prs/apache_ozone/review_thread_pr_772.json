{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4OTE2MzM1", "number": 772, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxOTozNDoxNVrODvRm4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwODozMjowMFrODv44Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODk4MTQ1OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/recon/src/test/java/org/apache/hadoop/ozone/recon/ReconTestInjector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxOTozNDoxNVrOGBm2fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxOTozNDoxNVrOGBm2fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMzODMwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      if (reconOMMetadataManager != null) {\n          \n          \n            \n                        bind(ReconOMMetadataManager.class)\n          \n          \n            \n                            .toInstance(reconOMMetadataManager);\n          \n          \n            \n                      }", "url": "https://github.com/apache/ozone/pull/772#discussion_r404338301", "createdAt": "2020-04-06T19:34:15Z", "author": {"login": "vivekratnavel"}, "path": "hadoop-ozone/recon/src/test/java/org/apache/hadoop/ozone/recon/ReconTestInjector.java", "diffHunk": "@@ -0,0 +1,341 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.recon;\n+\n+import static org.apache.hadoop.hdds.recon.ReconConfigKeys.OZONE_RECON_DATANODE_ADDRESS_KEY;\n+import static org.apache.hadoop.ozone.recon.ReconServerConfigKeys.OZONE_RECON_DB_DIR;\n+import static org.apache.hadoop.ozone.recon.ReconServerConfigKeys.OZONE_RECON_OM_SNAPSHOT_DB_DIR;\n+import static org.apache.hadoop.ozone.recon.ReconServerConfigKeys.OZONE_RECON_SCM_DB_DIR;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.scm.server.OzoneStorageContainerManager;\n+import org.apache.hadoop.hdds.utils.db.DBStore;\n+import org.apache.hadoop.ozone.recon.persistence.AbstractReconSqlDBTest;\n+import org.apache.hadoop.ozone.recon.recovery.ReconOMMetadataManager;\n+import org.apache.hadoop.ozone.recon.spi.ContainerDBServiceProvider;\n+import org.apache.hadoop.ozone.recon.spi.OzoneManagerServiceProvider;\n+import org.apache.hadoop.ozone.recon.spi.impl.ContainerDBServiceProviderImpl;\n+import org.apache.hadoop.ozone.recon.spi.impl.ReconContainerDBProvider;\n+import org.junit.Assert;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.google.inject.AbstractModule;\n+import com.google.inject.Guice;\n+import com.google.inject.Injector;\n+import com.google.inject.Module;\n+import com.google.inject.Singleton;\n+\n+/**\n+ * Class to setup a recon test injector, with any combination of sub modules\n+ * that are specified. This Recon specific abstraction to Guice API has\n+ * been created to simplify the process of setting up a test environment for\n+ * unit testing.\n+ */\n+public class ReconTestInjector {\n+\n+  private Injector injector;\n+  private OzoneManagerServiceProvider ozoneManagerServiceProvider;\n+  private ReconOMMetadataManager reconOMMetadataManager;\n+  private OzoneStorageContainerManager reconScm;\n+  private AbstractReconSqlDBTest reconSqlDB;\n+  private boolean withContainerDB = false;\n+  private List<Module> additionalModules = new ArrayList<>();\n+  private boolean withReconSqlDb = false;\n+  private TemporaryFolder temporaryFolder;\n+  private Map<Class, Class> extraInheritedBindings = new HashMap<>();\n+  private Map<Class, Object> extraInstanceBindings = new HashMap<>();\n+  private Set<Class> extraClassBindings = new HashSet<>();\n+\n+  public ReconTestInjector(TemporaryFolder temporaryFolder) {\n+    this.temporaryFolder = temporaryFolder;\n+  }\n+\n+  public void setWithReconSqlDb(boolean withReconSqlDb) {\n+    this.withReconSqlDb = withReconSqlDb;\n+  }\n+\n+  public void setOzoneManagerServiceProvider(\n+      OzoneManagerServiceProvider ozoneManagerServiceProvider) {\n+    this.ozoneManagerServiceProvider = ozoneManagerServiceProvider;\n+  }\n+\n+  public void setReconOMMetadataManager(\n+      ReconOMMetadataManager reconOMMetadataManager) {\n+    this.reconOMMetadataManager = reconOMMetadataManager;\n+  }\n+\n+  public void setReconScm(OzoneStorageContainerManager reconScm) {\n+    this.reconScm = reconScm;\n+  }\n+\n+  public void withContainerDB(boolean containerDbIncluded) {\n+    this.withContainerDB = containerDbIncluded;\n+  }\n+\n+  public OzoneManagerServiceProvider getOzoneManagerServiceProvider() {\n+    return ozoneManagerServiceProvider;\n+  }\n+\n+  public ReconOMMetadataManager getReconOMMetadataManager() {\n+    return reconOMMetadataManager;\n+  }\n+\n+  public OzoneStorageContainerManager getReconScm() {\n+    return reconScm;\n+  }\n+\n+  public List<Module> getAdditionalModules() {\n+    return additionalModules;\n+  }\n+\n+  public Map<Class, Object> getExtraInstanceBindings() {\n+    return extraInstanceBindings;\n+  }\n+\n+  public Map<Class, Class> getExtraInheritedBindings() {\n+    return extraInheritedBindings;\n+  }\n+\n+  public Set<Class> getExtraClassBindings() {\n+    return extraClassBindings;\n+  }\n+\n+  /**\n+   * Wrapper to get the bound instance.\n+   * @param type type\n+   * @param <T> type\n+   * @return bound instance of type T.\n+   */\n+  public <T> T getInstance(Class<T> type) {\n+    return injector.getInstance(type);\n+  }\n+\n+  /**\n+   * The goal of the class is to discourage the use of injector to\n+   * create more child injectors explicitly.\n+   * Use this API wisely!\n+   * @return injector.\n+   */\n+  public Injector getInjector() {\n+    return injector;\n+  }\n+\n+  void setupInjector() throws IOException {\n+    List<Module> modules = new ArrayList<>();\n+\n+    modules.add(new AbstractModule() {\n+      @Override\n+      protected void configure() {\n+        try {\n+          bind(OzoneConfiguration.class).toInstance(\n+              getTestOzoneConfiguration(temporaryFolder.newFolder()));\n+\n+          if (reconOMMetadataManager != null) {\n+            bind(ReconOMMetadataManager.class)\n+                .toInstance(reconOMMetadataManager);\n+          }\n+          if (reconOMMetadataManager != null) {\n+            bind(ReconOMMetadataManager.class)\n+                .toInstance(reconOMMetadataManager);\n+          }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2a68112ead6ba4c93aa86ec5d3baebb9d3c3b1f"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTQxNjAyOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/recon/src/test/java/org/apache/hadoop/ozone/recon/fsck/TestMissingContainerTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwODozMjowMFrOGCkm_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjoxMDo0OFrOGC2eiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MDE0MA==", "bodyText": "Do we need to get the dao again?  missingContainersTableHandle already has an instance.", "url": "https://github.com/apache/ozone/pull/772#discussion_r405350140", "createdAt": "2020-04-08T08:32:00Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/recon/src/test/java/org/apache/hadoop/ozone/recon/fsck/TestMissingContainerTask.java", "diffHunk": "@@ -93,12 +82,13 @@ public void testRun() throws Exception {\n     when(containerManagerMock.getContainerReplicas(new ContainerID(3L)))\n         .thenReturn(Collections.emptySet());\n \n-    List<MissingContainers> all = missingContainersTableHandle.findAll();\n+    MissingContainersDao missingContainersDao =\n+        getDao(MissingContainersDao.class);\n+    List<MissingContainers> all = missingContainersDao.findAll();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6354f7f7591300993c8f907b27f2c2c505eb3f37"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0Mjg4OA==", "bodyText": "Thank you @adoroszlai. Fixed it.", "url": "https://github.com/apache/ozone/pull/772#discussion_r405642888", "createdAt": "2020-04-08T16:10:48Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/recon/src/test/java/org/apache/hadoop/ozone/recon/fsck/TestMissingContainerTask.java", "diffHunk": "@@ -93,12 +82,13 @@ public void testRun() throws Exception {\n     when(containerManagerMock.getContainerReplicas(new ContainerID(3L)))\n         .thenReturn(Collections.emptySet());\n \n-    List<MissingContainers> all = missingContainersTableHandle.findAll();\n+    MissingContainersDao missingContainersDao =\n+        getDao(MissingContainersDao.class);\n+    List<MissingContainers> all = missingContainersDao.findAll();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MDE0MA=="}, "originalCommit": {"oid": "6354f7f7591300993c8f907b27f2c2c505eb3f37"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4345, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}