{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwMTYwOTM1", "number": 692, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxODoxMDo1NlrODpOYWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOToxNTozMVrODppLcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTUzODE3OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManagerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxODoxMDo1NlrOF4RLPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxODoxMDo1NlrOF4RLPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU0NTk4Mw==", "bodyText": "Can we use a set instead of a list to avoid the overhead of contains call for large Key? You can convert to a list at the end if that is easier to pass over RPC.", "url": "https://github.com/apache/ozone/pull/692#discussion_r394545983", "createdAt": "2020-03-18T18:10:56Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManagerImpl.java", "diffHunk": "@@ -687,36 +687,49 @@ public OmKeyInfo lookupKey(OmKeyArgs args, String clientAddress)\n    */\n   @VisibleForTesting\n   protected void refreshPipeline(OmKeyInfo value) throws IOException {\n-    if (value != null &&\n-        CollectionUtils.isNotEmpty(value.getKeyLocationVersions())) {\n-      Map<Long, ContainerWithPipeline> containerWithPipelineMap =\n-          new HashMap<>();\n-      for (OmKeyLocationInfoGroup key : value.getKeyLocationVersions()) {\n-        for (OmKeyLocationInfo k : key.getLocationList()) {\n-          // TODO: fix Some tests that may not initialize container client\n-          // The production should always have containerClient initialized.\n-          if (scmClient.getContainerClient() != null) {\n-            try {\n-              if (!containerWithPipelineMap.containsKey(k.getContainerID())) {\n-                ContainerWithPipeline containerWithPipeline = scmClient\n-                    .getContainerClient()\n-                    .getContainerWithPipeline(k.getContainerID());\n-                containerWithPipelineMap.put(k.getContainerID(),\n-                    containerWithPipeline);\n-              }\n-            } catch (IOException ioEx) {\n-              LOG.debug(\"Get containerPipeline failed for volume:{} bucket:{} \"\n+    // TODO: fix Some tests that may not initialize container client\n+    // The production should always have containerClient initialized.\n+    if (scmClient.getContainerClient() == null) {\n+      return;\n+    }\n+\n+    if (value == null\n+            || CollectionUtils.isEmpty(value.getKeyLocationVersions())) {\n+      return;\n+    }\n+\n+    List<Long> containerIDs = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de04499af4466e71ce1522e73fd860e798a47625"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTg2Mjc3OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManagerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODo1NTo1NFrOF48Mkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODo1NTo1NFrOF48Mkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI1MDgzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (scmClient.getContainerClient() == null) {\n          \n          \n            \n                  return;\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                if (value == null\n          \n          \n            \n                        || CollectionUtils.isEmpty(value.getKeyLocationVersions())) {\n          \n          \n            \n                  return;\n          \n          \n            \n                }\n          \n          \n            \n                final List<OmKeyLocationInfoGroup> locationGroups = value == null ?\n          \n          \n            \n                    null : value.getKeyLocationVersions();\n          \n          \n            \n            \n          \n          \n            \n                if (scmClient.getContainerClient() == null ||\n          \n          \n            \n                    CollectionUtils.isEmpty(locationGroups)) {\n          \n          \n            \n                  return;\n          \n          \n            \n                }", "url": "https://github.com/apache/ozone/pull/692#discussion_r395250835", "createdAt": "2020-03-19T18:55:54Z", "author": {"login": "nandakumar131"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManagerImpl.java", "diffHunk": "@@ -687,36 +688,46 @@ public OmKeyInfo lookupKey(OmKeyArgs args, String clientAddress)\n    */\n   @VisibleForTesting\n   protected void refreshPipeline(OmKeyInfo value) throws IOException {\n-    if (value != null &&\n-        CollectionUtils.isNotEmpty(value.getKeyLocationVersions())) {\n-      Map<Long, ContainerWithPipeline> containerWithPipelineMap =\n-          new HashMap<>();\n-      for (OmKeyLocationInfoGroup key : value.getKeyLocationVersions()) {\n-        for (OmKeyLocationInfo k : key.getLocationList()) {\n-          // TODO: fix Some tests that may not initialize container client\n-          // The production should always have containerClient initialized.\n-          if (scmClient.getContainerClient() != null) {\n-            try {\n-              if (!containerWithPipelineMap.containsKey(k.getContainerID())) {\n-                ContainerWithPipeline containerWithPipeline = scmClient\n-                    .getContainerClient()\n-                    .getContainerWithPipeline(k.getContainerID());\n-                containerWithPipelineMap.put(k.getContainerID(),\n-                    containerWithPipeline);\n-              }\n-            } catch (IOException ioEx) {\n-              LOG.debug(\"Get containerPipeline failed for volume:{} bucket:{} \"\n+    // TODO: fix Some tests that may not initialize container client\n+    // The production should always have containerClient initialized.\n+    if (scmClient.getContainerClient() == null) {\n+      return;\n+    }\n+\n+    if (value == null\n+            || CollectionUtils.isEmpty(value.getKeyLocationVersions())) {\n+      return;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c43beed00ded7c1c859904f70b0c70534ed991c"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTg2NTAyOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManagerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODo1NjozM1rOF48OEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODo1NjozM1rOF48OEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI1MTIxOQ==", "bodyText": "No need to call value.getKeyLocationVersions() again, we can use locationGroups here.", "url": "https://github.com/apache/ozone/pull/692#discussion_r395251219", "createdAt": "2020-03-19T18:56:33Z", "author": {"login": "nandakumar131"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManagerImpl.java", "diffHunk": "@@ -687,36 +688,46 @@ public OmKeyInfo lookupKey(OmKeyArgs args, String clientAddress)\n    */\n   @VisibleForTesting\n   protected void refreshPipeline(OmKeyInfo value) throws IOException {\n-    if (value != null &&\n-        CollectionUtils.isNotEmpty(value.getKeyLocationVersions())) {\n-      Map<Long, ContainerWithPipeline> containerWithPipelineMap =\n-          new HashMap<>();\n-      for (OmKeyLocationInfoGroup key : value.getKeyLocationVersions()) {\n-        for (OmKeyLocationInfo k : key.getLocationList()) {\n-          // TODO: fix Some tests that may not initialize container client\n-          // The production should always have containerClient initialized.\n-          if (scmClient.getContainerClient() != null) {\n-            try {\n-              if (!containerWithPipelineMap.containsKey(k.getContainerID())) {\n-                ContainerWithPipeline containerWithPipeline = scmClient\n-                    .getContainerClient()\n-                    .getContainerWithPipeline(k.getContainerID());\n-                containerWithPipelineMap.put(k.getContainerID(),\n-                    containerWithPipeline);\n-              }\n-            } catch (IOException ioEx) {\n-              LOG.debug(\"Get containerPipeline failed for volume:{} bucket:{} \"\n+    // TODO: fix Some tests that may not initialize container client\n+    // The production should always have containerClient initialized.\n+    if (scmClient.getContainerClient() == null) {\n+      return;\n+    }\n+\n+    if (value == null\n+            || CollectionUtils.isEmpty(value.getKeyLocationVersions())) {\n+      return;\n+    }\n+\n+    Set<Long> containerIDs = new HashSet<>();\n+    for (OmKeyLocationInfoGroup key : value.getKeyLocationVersions()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c43beed00ded7c1c859904f70b0c70534ed991c"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTkyODgzOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/server/SCMClientProtocolServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOToxNTozMlrOF482rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOToxNTozMlrOF482rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI2MTYxMw==", "bodyText": "This logic can be extracted into a separate method and can be reused by getContainerWithPipeline and getContainerWithPipelineBatch", "url": "https://github.com/apache/ozone/pull/692#discussion_r395261613", "createdAt": "2020-03-19T19:15:32Z", "author": {"login": "nandakumar131"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/server/SCMClientProtocolServer.java", "diffHunk": "@@ -275,6 +275,66 @@ public ContainerWithPipeline getContainerWithPipeline(long containerID)\n     }\n   }\n \n+  @Override\n+  public List<ContainerWithPipeline> getContainerWithPipelineBatch(\n+      List<Long> containerIDs) throws IOException {\n+    getScm().checkAdminAccess(null);\n+\n+    List<ContainerWithPipeline> cpList = new ArrayList<>();\n+\n+    for (Long containerID : containerIDs) {\n+      final ContainerID cid = ContainerID.valueof(containerID);\n+      try {\n+        final ContainerInfo container = scm.getContainerManager()\n+                .getContainer(cid);\n+\n+        if (safeModePrecheck.isInSafeMode()) {\n+          if (container.isOpen()) {\n+            if (!hasRequiredReplicas(container)) {\n+              throw new SCMException(\"Open container \" + containerID\n+                      + \" doesn't have enough replicas to service this\"\n+                      + \" operation in Safe mode.\",\n+                      ResultCodes.SAFE_MODE_EXCEPTION);\n+            }\n+          }\n+        }\n+\n+        Pipeline pipeline;\n+        try {\n+          pipeline = container.isOpen() ? scm.getPipelineManager()\n+                  .getPipeline(container.getPipelineID()) : null;\n+        } catch (PipelineNotFoundException ex) {\n+          // The pipeline is destroyed.\n+          pipeline = null;\n+        }\n+\n+        if (pipeline == null) {\n+          pipeline = scm.getPipelineManager().createPipeline(\n+                  HddsProtos.ReplicationType.STAND_ALONE,\n+                  container.getReplicationFactor(),\n+                  scm.getContainerManager()\n+                          .getContainerReplicas(cid).stream()\n+                          .map(ContainerReplica::getDatanodeDetails)\n+                          .collect(Collectors.toList()));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c43beed00ded7c1c859904f70b0c70534ed991c"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4852, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}