{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzMDI4ODUy", "number": 1725, "reviewThreads": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNjozMjoxNlrOFIbS2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQwNzozMTo0MVrOFP4Xlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MzgwMTIzOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMStateMachine.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNjozMjoxNlrOIKVcmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwODoyOToyMlrOISkbJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcwODA1Ng==", "bodyText": "You have to call BaseStateMachine#updateLastAppliedTermIndex() to make BaseStateMachine#getLastAppliedTermIndex () to take effect.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r547708056", "createdAt": "2020-12-23T06:32:16Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMStateMachine.java", "diffHunk": "@@ -89,4 +98,12 @@ private Message process(final SCMRatisRequest request)\n     }\n   }\n \n+  @Override\n+  public long takeSnapshot() throws IOException {\n+    LOG.info(\"Current Snapshot Index {}\", getLastAppliedTermIndex());\n+    TermIndex lastTermIndex = getLastAppliedTermIndex();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTk0MzczOA==", "bodyText": "I believe we don't need to.\n    public TermIndex getLastAppliedTermIndex() {\n        return (TermIndex)this.lastAppliedTermIndex.get();\n    }\n\n    protected boolean updateLastAppliedTermIndex(long term, long index) {\n        TermIndex newTI = TermIndex.newTermIndex(term, index);\n        TermIndex oldTI = (TermIndex)this.lastAppliedTermIndex.getAndSet(newTI);\n         ....\n\nBoth function access this.lastAppliedTermIndex.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r549943738", "createdAt": "2020-12-30T05:54:28Z", "author": {"login": "amaliujia"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMStateMachine.java", "diffHunk": "@@ -89,4 +98,12 @@ private Message process(final SCMRatisRequest request)\n     }\n   }\n \n+  @Override\n+  public long takeSnapshot() throws IOException {\n+    LOG.info(\"Current Snapshot Index {}\", getLastAppliedTermIndex());\n+    TermIndex lastTermIndex = getLastAppliedTermIndex();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcwODA1Ng=="}, "originalCommit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM4MzMyOQ==", "bodyText": "Since all rocksdb writes are batched to write to disk in takesnapshot,  we need to change takesnapshot default frequency of ratis during scm ratis server creation.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r550383329", "createdAt": "2020-12-31T03:00:26Z", "author": {"login": "ChenSammi"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMStateMachine.java", "diffHunk": "@@ -89,4 +98,12 @@ private Message process(final SCMRatisRequest request)\n     }\n   }\n \n+  @Override\n+  public long takeSnapshot() throws IOException {\n+    LOG.info(\"Current Snapshot Index {}\", getLastAppliedTermIndex());\n+    TermIndex lastTermIndex = getLastAppliedTermIndex();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcwODA1Ng=="}, "originalCommit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQwNjQyOQ==", "bodyText": "Since all rocksdb writes are batched to write to disk in takesnapshot, we need to change takesnapshot default frequency of ratis during scm ratis server creation.\n\nhttps://issues.apache.org/jira/browse/HDDS-4636 I will prefer to handle separately.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r550406429", "createdAt": "2020-12-31T06:16:03Z", "author": {"login": "amaliujia"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMStateMachine.java", "diffHunk": "@@ -89,4 +98,12 @@ private Message process(final SCMRatisRequest request)\n     }\n   }\n \n+  @Override\n+  public long takeSnapshot() throws IOException {\n+    LOG.info(\"Current Snapshot Index {}\", getLastAppliedTermIndex());\n+    TermIndex lastTermIndex = getLastAppliedTermIndex();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcwODA1Ng=="}, "originalCommit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM0MjA1NA==", "bodyText": "You need call updateLastAppliedTermIndex  in applyTransaction(), the lastAppliedTermIndex in BaseStateMachine should be updated manually when apply a entry.\nPlease double check applyTransaction in BaseStateMachine\n  @Override\n  public CompletableFuture<Message> applyTransaction(TransactionContext trx) {\n    // return the same message contained in the entry\n    RaftProtos.LogEntryProto entry = Objects.requireNonNull(trx.getLogEntry());\n    updateLastAppliedTermIndex(entry.getTerm(), entry.getIndex());\n    return CompletableFuture.completedFuture(\n        Message.valueOf(trx.getLogEntry().getStateMachineLogEntry().getLogData()));\n  }\n\nand  applyTransaction in ArithmeticStateMachine.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r556342054", "createdAt": "2021-01-13T08:29:22Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMStateMachine.java", "diffHunk": "@@ -89,4 +98,12 @@ private Message process(final SCMRatisRequest request)\n     }\n   }\n \n+  @Override\n+  public long takeSnapshot() throws IOException {\n+    LOG.info(\"Current Snapshot Index {}\", getLastAppliedTermIndex());\n+    TermIndex lastTermIndex = getLastAppliedTermIndex();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcwODA1Ng=="}, "originalCommit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MzgyMTgzOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/container/ContainerStateManagerImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNjozNjoyMFrOIKVp8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQwNjowMzoxN1rOIM6Cmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcxMTQ3Mg==", "bodyText": "Can we remove the 'else {}' branch ? When we will migrate to batch operations, there will be no other way to do db writes.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r547711472", "createdAt": "2020-12-23T06:36:20Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/container/ContainerStateManagerImpl.java", "diffHunk": "@@ -275,12 +278,24 @@ public void addContainer(final ContainerInfoProto containerInfo)\n \n     if (!containers.contains(containerID)) {\n       ExecutionUtil.create(() -> {\n-        containerStore.put(containerID, container);\n+        if (transactionBuffer != null) {\n+          containerStore.putWithBatch(\n+              transactionBuffer.getCurrentBatchOperation(),\n+              containerID, container);\n+        } else {\n+          containerStore.put(containerID, container);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODEzMTA5Mw==", "bodyText": "This is left for MockHAManager code path in which the buffer is NULL :)\nIf we choose to update MockHAManager to have a sort of MockBuffer implementation, then we can move this else branch because at that time I think all existing code will access this buffer.\nI can create a JIRA to track that add buffer to MockHAManager and remove this else :-)", "url": "https://github.com/apache/ozone/pull/1725#discussion_r548131093", "createdAt": "2020-12-23T18:44:50Z", "author": {"login": "amaliujia"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/container/ContainerStateManagerImpl.java", "diffHunk": "@@ -275,12 +278,24 @@ public void addContainer(final ContainerInfoProto containerInfo)\n \n     if (!containers.contains(containerID)) {\n       ExecutionUtil.create(() -> {\n-        containerStore.put(containerID, container);\n+        if (transactionBuffer != null) {\n+          containerStore.putWithBatch(\n+              transactionBuffer.getCurrentBatchOperation(),\n+              containerID, container);\n+        } else {\n+          containerStore.put(containerID, container);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcxMTQ3Mg=="}, "originalCommit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQwNDc2Mw==", "bodyText": "https://issues.apache.org/jira/browse/HDDS-4634\nCreate JIRA to add buffer in MockHAManager thus we can remove else", "url": "https://github.com/apache/ozone/pull/1725#discussion_r550404763", "createdAt": "2020-12-31T06:03:17Z", "author": {"login": "amaliujia"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/container/ContainerStateManagerImpl.java", "diffHunk": "@@ -275,12 +278,24 @@ public void addContainer(final ContainerInfoProto containerInfo)\n \n     if (!containers.contains(containerID)) {\n       ExecutionUtil.create(() -> {\n-        containerStore.put(containerID, container);\n+        if (transactionBuffer != null) {\n+          containerStore.putWithBatch(\n+              transactionBuffer.getCurrentBatchOperation(),\n+              containerID, container);\n+        } else {\n+          containerStore.put(containerID, container);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcxMTQ3Mg=="}, "originalCommit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MzgyODI1OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMDBTransactionBuffer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNjozNzozOFrOIKVuJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNjozNzozOFrOIKVuJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcxMjU0OQ==", "bodyText": "Good Job!", "url": "https://github.com/apache/ozone/pull/1725#discussion_r547712549", "createdAt": "2020-12-23T06:37:38Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMDBTransactionBuffer.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p/>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p/>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import org.apache.hadoop.hdds.scm.metadata.SCMMetadataStore;\n+import org.apache.hadoop.hdds.utils.db.BatchOperation;\n+import org.apache.hadoop.hdds.utils.db.Table;\n+\n+import java.io.IOException;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.TRANSACTION_INFO_KEY;\n+\n+public class SCMDBTransactionBuffer {\n+  private final SCMMetadataStore metadataStore;\n+  private BatchOperation currentBatchOperation;\n+  private SCMTransactionInfo latestTrxInfo;\n+\n+  public SCMDBTransactionBuffer(SCMMetadataStore store) {\n+    this.metadataStore = store;\n+\n+    // initialize a batch operation during construction time\n+    currentBatchOperation = this.metadataStore.getStore().initBatchOperation();\n+    latestTrxInfo =\n+        SCMTransactionInfo\n+            .builder()\n+            .setTransactionIndex(-1)\n+            .setCurrentTerm(-1)\n+            .build();\n+  }\n+\n+  public BatchOperation getCurrentBatchOperation() {\n+    return currentBatchOperation;\n+  }\n+\n+  public void updateLatestTrxInfo(SCMTransactionInfo info) {\n+    this.latestTrxInfo = info;\n+  }\n+\n+  public SCMTransactionInfo getLatestTrxInfo() {\n+    return this.latestTrxInfo;\n+  }\n+\n+  public void flush() throws IOException {\n+    // write latest trx info into trx table in the same batch\n+    Table<String, SCMTransactionInfo> transactionInfoTable\n+        = metadataStore.getTransactionInfoTable();\n+    transactionInfoTable.putWithBatch(currentBatchOperation,\n+        TRANSACTION_INFO_KEY, latestTrxInfo);\n+\n+    metadataStore.getStore().commitBatchOperation(currentBatchOperation);\n+    currentBatchOperation.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MzgzNjcwOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMStateMachine.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNjozOTozMFrOIKVzkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQwNjoxNDozNVrOIM6IVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcxMzkzNg==", "bodyText": "Better calculate the time cost during takeSnapshot().", "url": "https://github.com/apache/ozone/pull/1725#discussion_r547713936", "createdAt": "2020-12-23T06:39:30Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMStateMachine.java", "diffHunk": "@@ -89,4 +98,12 @@ private Message process(final SCMRatisRequest request)\n     }\n   }\n \n+  @Override\n+  public long takeSnapshot() throws IOException {\n+    LOG.info(\"Current Snapshot Index {}\", getLastAppliedTermIndex());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODEzMTUzNg==", "bodyText": "makes sense.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r548131536", "createdAt": "2020-12-23T18:45:21Z", "author": {"login": "amaliujia"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMStateMachine.java", "diffHunk": "@@ -89,4 +98,12 @@ private Message process(final SCMRatisRequest request)\n     }\n   }\n \n+  @Override\n+  public long takeSnapshot() throws IOException {\n+    LOG.info(\"Current Snapshot Index {}\", getLastAppliedTermIndex());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcxMzkzNg=="}, "originalCommit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQwNjIyOQ==", "bodyText": "Done", "url": "https://github.com/apache/ozone/pull/1725#discussion_r550406229", "createdAt": "2020-12-31T06:14:35Z", "author": {"login": "amaliujia"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMStateMachine.java", "diffHunk": "@@ -89,4 +98,12 @@ private Message process(final SCMRatisRequest request)\n     }\n   }\n \n+  @Override\n+  public long takeSnapshot() throws IOException {\n+    LOG.info(\"Current Snapshot Index {}\", getLastAppliedTermIndex());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcxMzkzNg=="}, "originalCommit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0Mzg2Mzg1OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMTransactionInfo.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNjo0NToyNFrOIKWFdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQyMDoxNzozNFrOIQf2gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcxODUxNw==", "bodyText": "Will it be better to put SCMTransactionInfo near OMTransactionInfo, under interface-storage ?\n\n\nCan we reuse the OMTransactionInfo? For example, rename OMTransactionInfo to TransactionInfo, and use them in both OM and SCM ?", "url": "https://github.com/apache/ozone/pull/1725#discussion_r547718517", "createdAt": "2020-12-23T06:45:24Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMTransactionInfo.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * <p>http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * <p>Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.hadoop.hdds.StringUtils;\n+\n+import java.util.Objects;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.TRANSACTION_INFO_SPLIT_KEY;\n+\n+final public class SCMTransactionInfo {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODEyOTIzMQ==", "bodyText": "To reuse OMTransactionInfo, my current answer is probably no.\nThough both OMTransactionInfo and SCMTransactionInfo seems are doing the same thing for now, decoupling is good when there is a need that either OMTransactionInfo or SCMTransactionInfo needs to add(drop) new(existing) fields while the other does not need. Especially at this moment that SCM snapshot is still under development.\nI think we can consider this after SCM snapshot is stable. I can create a JIRA though to track the merge of two transaction info.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r548129231", "createdAt": "2020-12-23T18:42:26Z", "author": {"login": "amaliujia"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMTransactionInfo.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * <p>http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * <p>Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.hadoop.hdds.StringUtils;\n+\n+import java.util.Objects;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.TRANSACTION_INFO_SPLIT_KEY;\n+\n+final public class SCMTransactionInfo {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcxODUxNw=="}, "originalCommit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzY4Mzc1Nw==", "bodyText": "Sorry, I'm not clear why we can not reuse OMTransactionInfo. They has the same fields.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r553683757", "createdAt": "2021-01-08T01:10:34Z", "author": {"login": "runzhiwang"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMTransactionInfo.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * <p>http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * <p>Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.hadoop.hdds.StringUtils;\n+\n+import java.util.Objects;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.TRANSACTION_INFO_SPLIT_KEY;\n+\n+final public class SCMTransactionInfo {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcxODUxNw=="}, "originalCommit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzc2NTg0OQ==", "bodyText": "I think we are better to reuse OMTransactionInfo after merge HDDS-2823 back to master.\nNot reusing OMTransactionInfo is to try to reduce the risk that have conflicts after syncing master int HDDS-2823. Also, to reuse OMTransactionInfo, I think we'd better to update the name to TransactionInfo, which will be a source of conflicts , unless we can change it in the master branch first. And I also add some more functions in SCMTransactionInfo, if we reuse OMTransactionInfo, those new functions will also become source of conflicts.\nTo conclude a bit, we can reuse it after merging SCM HA back to master, the goal is try to reduce potential conflicts if there could be any.\nSCM HA is in developing branch anyway and I am sure we will need to clean up lots of stuff eventually. As long as we have JIRAs to not lose track of such work.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r553765849", "createdAt": "2021-01-08T06:30:58Z", "author": {"login": "amaliujia"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMTransactionInfo.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * <p>http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * <p>Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.hadoop.hdds.StringUtils;\n+\n+import java.util.Objects;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.TRANSACTION_INFO_SPLIT_KEY;\n+\n+final public class SCMTransactionInfo {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcxODUxNw=="}, "originalCommit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzc4MTUyMQ==", "bodyText": "OMTransactionInfo is written by Bharat, since SCM and OM has a quite similar requirement, we may have a talk with him, to determine whether OM and SCM can share the same TransactionInfo and the Codec. @amaliujia  What do you think ?", "url": "https://github.com/apache/ozone/pull/1725#discussion_r553781521", "createdAt": "2021-01-08T07:24:55Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMTransactionInfo.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * <p>http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * <p>Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.hadoop.hdds.StringUtils;\n+\n+import java.util.Objects;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.TRANSACTION_INFO_SPLIT_KEY;\n+\n+final public class SCMTransactionInfo {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcxODUxNw=="}, "originalCommit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDE2OTk4Ng==", "bodyText": "Sure we can do that. I will need add some changes in main branch, and then sync that to HDDS-2823 and then reuse in SCM.\nI think we should do that separately as that will take time. I have created https://issues.apache.org/jira/browse/HDDS-4660 to track this effort.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r554169986", "createdAt": "2021-01-08T20:17:34Z", "author": {"login": "amaliujia"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMTransactionInfo.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * <p>http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * <p>Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.hadoop.hdds.StringUtils;\n+\n+import java.util.Objects;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.TRANSACTION_INFO_SPLIT_KEY;\n+\n+final public class SCMTransactionInfo {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcxODUxNw=="}, "originalCommit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0Mzk2OTUzOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/container/ContainerManagerImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNzowNzowOVrOIKXJIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwNzozMjo0N1rOISircQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzczNTg0MQ==", "bodyText": "Could we avoid using this Ctor ? We may need to change the related test cases.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r547735841", "createdAt": "2020-12-23T07:07:09Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/container/ContainerManagerImpl.java", "diffHunk": "@@ -101,6 +102,16 @@ public ContainerManagerImpl(\n       final PipelineManager pipelineManager,\n       final Table<ContainerID, ContainerInfo> containerStore)\n       throws IOException {\n+    this(conf, scmHaManager, pipelineManager, containerStore, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQwNDk5Ng==", "bodyText": "Same https://issues.apache.org/jira/browse/HDDS-4634.\nThis is because MockHAManager does not have a mock buffer implementation.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r550404996", "createdAt": "2020-12-31T06:05:17Z", "author": {"login": "amaliujia"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/container/ContainerManagerImpl.java", "diffHunk": "@@ -101,6 +102,16 @@ public ContainerManagerImpl(\n       final PipelineManager pipelineManager,\n       final Table<ContainerID, ContainerInfo> containerStore)\n       throws IOException {\n+    this(conf, scmHaManager, pipelineManager, containerStore, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzczNTg0MQ=="}, "originalCommit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjMxMzQ1Nw==", "bodyText": "Could we implement the mock buffer in this PR ? Since missing this change will pollute the production code, and will also give a burden to the on-going PR of deleted block log.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r556313457", "createdAt": "2021-01-13T07:32:47Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/container/ContainerManagerImpl.java", "diffHunk": "@@ -101,6 +102,16 @@ public ContainerManagerImpl(\n       final PipelineManager pipelineManager,\n       final Table<ContainerID, ContainerInfo> containerStore)\n       throws IOException {\n+    this(conf, scmHaManager, pipelineManager, containerStore, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzczNTg0MQ=="}, "originalCommit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0Mzk3MjkzOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/metadata/SCMTransactionInfoCodec.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNzowODowMFrOIKXLbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNzowODowMFrOIKXLbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzczNjQyOA==", "bodyText": "Ditto,  could we reuse OMTransactionInfoCodec ?", "url": "https://github.com/apache/ozone/pull/1725#discussion_r547736428", "createdAt": "2020-12-23T07:08:00Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/metadata/SCMTransactionInfoCodec.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.\u2002\u2002See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.\u2002\u2002The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ *  with the License.\u2002\u2002You may obtain a copy of the License at\n+ *\n+ * \u2002\u2002\u2002\u2002 http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hdds.scm.metadata;\n+\n+import org.apache.hadoop.hdds.scm.ha.SCMTransactionInfo;\n+import org.apache.hadoop.hdds.utils.db.Codec;\n+\n+import java.io.IOException;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+public class SCMTransactionInfoCodec implements Codec<SCMTransactionInfo> {\n+\n+  @Override\n+  public byte[] toPersistedFormat(SCMTransactionInfo object)\n+      throws IOException {\n+    checkNotNull(object, \"Null object can't be converted to byte array.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0Mzk3NTA4OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelineManagerV2Impl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNzowODoyNlrOIKXMzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNzowODoyNlrOIKXMzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzczNjc4Mg==", "bodyText": "Ditto, may we remove this Ctor ?", "url": "https://github.com/apache/ozone/pull/1725#discussion_r547736782", "createdAt": "2020-12-23T07:08:26Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelineManagerV2Impl.java", "diffHunk": "@@ -114,11 +115,21 @@ public static PipelineManagerV2Impl newPipelineManager(\n       ConfigurationSource conf, SCMHAManager scmhaManager,\n       NodeManager nodeManager, Table<PipelineID, Pipeline> pipelineStore,\n       EventPublisher eventPublisher) throws IOException {\n+    return newPipelineManager(conf, scmhaManager, nodeManager, pipelineStore,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NDAxMjk5OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMDBTransactionBuffer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNzoxNjo1MlrOIKXkhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNzoxNjo1MlrOIKXkhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc0Mjg1Mg==", "bodyText": ".setCurrentTerm(0). The first leader will be elected from term 1.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r547742852", "createdAt": "2020-12-23T07:16:52Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMDBTransactionBuffer.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p/>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p/>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import org.apache.hadoop.hdds.scm.metadata.SCMMetadataStore;\n+import org.apache.hadoop.hdds.utils.db.BatchOperation;\n+import org.apache.hadoop.hdds.utils.db.Table;\n+\n+import java.io.IOException;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.TRANSACTION_INFO_KEY;\n+\n+public class SCMDBTransactionBuffer {\n+  private final SCMMetadataStore metadataStore;\n+  private BatchOperation currentBatchOperation;\n+  private SCMTransactionInfo latestTrxInfo;\n+\n+  public SCMDBTransactionBuffer(SCMMetadataStore store) {\n+    this.metadataStore = store;\n+\n+    // initialize a batch operation during construction time\n+    currentBatchOperation = this.metadataStore.getStore().initBatchOperation();\n+    latestTrxInfo =\n+        SCMTransactionInfo\n+            .builder()\n+            .setTransactionIndex(-1)\n+            .setCurrentTerm(-1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTQwODgwOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMDBTransactionBuffer.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjo0MToxNVrOIMcPIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQyMToyNToyOFrOIV3hWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxNjQ0OQ==", "bodyText": "Shall we add some checks here to guarantee new info is greater than current lastTrxInfo?", "url": "https://github.com/apache/ozone/pull/1725#discussion_r549916449", "createdAt": "2020-12-30T02:41:15Z", "author": {"login": "ChenSammi"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMDBTransactionBuffer.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p/>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p/>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import org.apache.hadoop.hdds.scm.metadata.SCMMetadataStore;\n+import org.apache.hadoop.hdds.utils.db.BatchOperation;\n+import org.apache.hadoop.hdds.utils.db.Table;\n+\n+import java.io.IOException;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.TRANSACTION_INFO_KEY;\n+\n+public class SCMDBTransactionBuffer {\n+  private final SCMMetadataStore metadataStore;\n+  private BatchOperation currentBatchOperation;\n+  private SCMTransactionInfo latestTrxInfo;\n+\n+  public SCMDBTransactionBuffer(SCMMetadataStore store) {\n+    this.metadataStore = store;\n+\n+    // initialize a batch operation during construction time\n+    currentBatchOperation = this.metadataStore.getStore().initBatchOperation();\n+    latestTrxInfo =\n+        SCMTransactionInfo\n+            .builder()\n+            .setTransactionIndex(-1)\n+            .setCurrentTerm(-1)\n+            .build();\n+  }\n+\n+  public BatchOperation getCurrentBatchOperation() {\n+    return currentBatchOperation;\n+  }\n+\n+  public void updateLatestTrxInfo(SCMTransactionInfo info) {\n+    this.latestTrxInfo = info;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxNzMyMw==", "bodyText": "Good point. I will add a check or a LOG.error for that case.\nTheoretically, the Ratis log will be applied with index monotonically increasing thus the new info is supposed to greater than current  lastTrxInfo. But have a check or a LOG will better handle rare cases or bugs.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r549917323", "createdAt": "2020-12-30T02:47:20Z", "author": {"login": "amaliujia"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMDBTransactionBuffer.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p/>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p/>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import org.apache.hadoop.hdds.scm.metadata.SCMMetadataStore;\n+import org.apache.hadoop.hdds.utils.db.BatchOperation;\n+import org.apache.hadoop.hdds.utils.db.Table;\n+\n+import java.io.IOException;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.TRANSACTION_INFO_KEY;\n+\n+public class SCMDBTransactionBuffer {\n+  private final SCMMetadataStore metadataStore;\n+  private BatchOperation currentBatchOperation;\n+  private SCMTransactionInfo latestTrxInfo;\n+\n+  public SCMDBTransactionBuffer(SCMMetadataStore store) {\n+    this.metadataStore = store;\n+\n+    // initialize a batch operation during construction time\n+    currentBatchOperation = this.metadataStore.getStore().initBatchOperation();\n+    latestTrxInfo =\n+        SCMTransactionInfo\n+            .builder()\n+            .setTransactionIndex(-1)\n+            .setCurrentTerm(-1)\n+            .build();\n+  }\n+\n+  public BatchOperation getCurrentBatchOperation() {\n+    return currentBatchOperation;\n+  }\n+\n+  public void updateLatestTrxInfo(SCMTransactionInfo info) {\n+    this.latestTrxInfo = info;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxNjQ0OQ=="}, "originalCommit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQwNjE4NQ==", "bodyText": "Done", "url": "https://github.com/apache/ozone/pull/1725#discussion_r550406185", "createdAt": "2020-12-31T06:14:19Z", "author": {"login": "amaliujia"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMDBTransactionBuffer.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p/>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p/>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import org.apache.hadoop.hdds.scm.metadata.SCMMetadataStore;\n+import org.apache.hadoop.hdds.utils.db.BatchOperation;\n+import org.apache.hadoop.hdds.utils.db.Table;\n+\n+import java.io.IOException;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.TRANSACTION_INFO_KEY;\n+\n+public class SCMDBTransactionBuffer {\n+  private final SCMMetadataStore metadataStore;\n+  private BatchOperation currentBatchOperation;\n+  private SCMTransactionInfo latestTrxInfo;\n+\n+  public SCMDBTransactionBuffer(SCMMetadataStore store) {\n+    this.metadataStore = store;\n+\n+    // initialize a batch operation during construction time\n+    currentBatchOperation = this.metadataStore.getStore().initBatchOperation();\n+    latestTrxInfo =\n+        SCMTransactionInfo\n+            .builder()\n+            .setTransactionIndex(-1)\n+            .setCurrentTerm(-1)\n+            .build();\n+  }\n+\n+  public BatchOperation getCurrentBatchOperation() {\n+    return currentBatchOperation;\n+  }\n+\n+  public void updateLatestTrxInfo(SCMTransactionInfo info) {\n+    this.latestTrxInfo = info;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxNjQ0OQ=="}, "originalCommit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODE0NTQzMg==", "bodyText": "In my opinion, we should stop the ratis server here if such a case arise. It is fatal case where we cannot move ahead from here.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r558145432", "createdAt": "2021-01-15T09:45:13Z", "author": {"login": "bshashikant"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMDBTransactionBuffer.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p/>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p/>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import org.apache.hadoop.hdds.scm.metadata.SCMMetadataStore;\n+import org.apache.hadoop.hdds.utils.db.BatchOperation;\n+import org.apache.hadoop.hdds.utils.db.Table;\n+\n+import java.io.IOException;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.TRANSACTION_INFO_KEY;\n+\n+public class SCMDBTransactionBuffer {\n+  private final SCMMetadataStore metadataStore;\n+  private BatchOperation currentBatchOperation;\n+  private SCMTransactionInfo latestTrxInfo;\n+\n+  public SCMDBTransactionBuffer(SCMMetadataStore store) {\n+    this.metadataStore = store;\n+\n+    // initialize a batch operation during construction time\n+    currentBatchOperation = this.metadataStore.getStore().initBatchOperation();\n+    latestTrxInfo =\n+        SCMTransactionInfo\n+            .builder()\n+            .setTransactionIndex(-1)\n+            .setCurrentTerm(-1)\n+            .build();\n+  }\n+\n+  public BatchOperation getCurrentBatchOperation() {\n+    return currentBatchOperation;\n+  }\n+\n+  public void updateLatestTrxInfo(SCMTransactionInfo info) {\n+    this.latestTrxInfo = info;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxNjQ0OQ=="}, "originalCommit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTgwMDY2Ng==", "bodyText": "Such case should be considered as a bug and be fixed.\nI created a JIRA to further discuss how to deal with such case: https://issues.apache.org/jira/browse/HDDS-4723", "url": "https://github.com/apache/ozone/pull/1725#discussion_r559800666", "createdAt": "2021-01-18T21:25:28Z", "author": {"login": "amaliujia"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMDBTransactionBuffer.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p/>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p/>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import org.apache.hadoop.hdds.scm.metadata.SCMMetadataStore;\n+import org.apache.hadoop.hdds.utils.db.BatchOperation;\n+import org.apache.hadoop.hdds.utils.db.Table;\n+\n+import java.io.IOException;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.TRANSACTION_INFO_KEY;\n+\n+public class SCMDBTransactionBuffer {\n+  private final SCMMetadataStore metadataStore;\n+  private BatchOperation currentBatchOperation;\n+  private SCMTransactionInfo latestTrxInfo;\n+\n+  public SCMDBTransactionBuffer(SCMMetadataStore store) {\n+    this.metadataStore = store;\n+\n+    // initialize a batch operation during construction time\n+    currentBatchOperation = this.metadataStore.getStore().initBatchOperation();\n+    latestTrxInfo =\n+        SCMTransactionInfo\n+            .builder()\n+            .setTransactionIndex(-1)\n+            .setCurrentTerm(-1)\n+            .build();\n+  }\n+\n+  public BatchOperation getCurrentBatchOperation() {\n+    return currentBatchOperation;\n+  }\n+\n+  public void updateLatestTrxInfo(SCMTransactionInfo info) {\n+    this.latestTrxInfo = info;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxNjQ0OQ=="}, "originalCommit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTQ5MTIyOnYy", "diffSide": "LEFT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/metadata/SCMDBDefinition.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMzo1NjoxNFrOIMc4WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQwNjoxMToyN1rOIM6GxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkyNzAwMQ==", "bodyText": "Since we add a new table in SCM DB,  we need a JIRA to track how to handle back compatibility during upgrade non HA SCM to HA SCM.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r549927001", "createdAt": "2020-12-30T03:56:14Z", "author": {"login": "ChenSammi"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/metadata/SCMDBDefinition.java", "diffHunk": "@@ -93,6 +104,6 @@ public String getLocationConfigKey() {\n   @Override\n   public DBColumnFamilyDefinition[] getColumnFamilies() {\n     return new DBColumnFamilyDefinition[] {DELETED_BLOCKS, VALID_CERTS,\n-        REVOKED_CERTS, PIPELINES, CONTAINERS};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQwNTgyOQ==", "bodyText": "https://issues.apache.org/jira/browse/HDDS-4635", "url": "https://github.com/apache/ozone/pull/1725#discussion_r550405829", "createdAt": "2020-12-31T06:11:27Z", "author": {"login": "amaliujia"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/metadata/SCMDBDefinition.java", "diffHunk": "@@ -93,6 +104,6 @@ public String getLocationConfigKey() {\n   @Override\n   public DBColumnFamilyDefinition[] getColumnFamilies() {\n     return new DBColumnFamilyDefinition[] {DELETED_BLOCKS, VALID_CERTS,\n-        REVOKED_CERTS, PIPELINES, CONTAINERS};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkyNzAwMQ=="}, "originalCommit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTQ5Mjg5OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/metadata/SCMMetadataStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMzo1NzowNlrOIMc5Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMzo1NzowNlrOIMc5Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkyNzE5NA==", "bodyText": "Are we missing some comments here?", "url": "https://github.com/apache/ozone/pull/1725#discussion_r549927194", "createdAt": "2020-12-30T03:57:06Z", "author": {"login": "ChenSammi"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/metadata/SCMMetadataStore.java", "diffHunk": "@@ -110,6 +111,11 @@\n    */\n   Table<PipelineID, Pipeline> getPipelineTable();\n \n+  /**\n+   *\n+   */\n+  Table <String, SCMTransactionInfo> getTransactionInfoTable();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MDk3Mzc1OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/metadata/SCMDBDefinition.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMTo0Mjo0MFrOIMrcig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMTo0Mjo0MFrOIMrcig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE2NTY0Mg==", "bodyText": "scmTransactionInfoTable -> scmTransactionInfos", "url": "https://github.com/apache/ozone/pull/1725#discussion_r550165642", "createdAt": "2020-12-30T11:42:40Z", "author": {"login": "ChenSammi"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/metadata/SCMDBDefinition.java", "diffHunk": "@@ -80,6 +82,15 @@\n           ContainerInfo.class,\n           new ContainerInfoCodec());\n \n+  public static final DBColumnFamilyDefinition<String, SCMTransactionInfo>\n+      TRANSACTIONINFO =\n+      new DBColumnFamilyDefinition<>(\n+          \"scmTransactionInfoTable\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NjQwNzAxOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMDBTransactionBuffer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQxNTo0NjozMlrOINX3sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQxNTo0NjozMlrOINX3sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDg5MzQ4OA==", "bodyText": "Could we document javadoc for this? That will be easier understood by others. At lease, we should document the purpose for this transaction buffer.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r550893488", "createdAt": "2021-01-02T15:46:32Z", "author": {"login": "linyiqun"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMDBTransactionBuffer.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p/>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p/>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import org.apache.hadoop.hdds.scm.metadata.SCMMetadataStore;\n+import org.apache.hadoop.hdds.utils.db.BatchOperation;\n+import org.apache.hadoop.hdds.utils.db.Table;\n+\n+import java.io.IOException;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.TRANSACTION_INFO_KEY;\n+\n+public class SCMDBTransactionBuffer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfddaedf1a7a22d03e92f79cb52009eee114258c"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NjQwODI4OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMTransactionInfo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQxNTo0ODowNlrOINX4Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQxNTo0ODowNlrOINX4Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDg5MzYzNA==", "bodyText": "Also would be great to add javadoc for this class.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r550893634", "createdAt": "2021-01-02T15:48:06Z", "author": {"login": "linyiqun"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMTransactionInfo.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * <p>http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * <p>Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.hadoop.hdds.StringUtils;\n+\n+import java.util.Objects;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.TRANSACTION_INFO_SPLIT_KEY;\n+\n+final public class SCMTransactionInfo {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfddaedf1a7a22d03e92f79cb52009eee114258c"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MjYxNDcyOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMStateMachine.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMzoxMTowOVrOIPr1ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxOTo1MDowNFrOIP6Jiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMxNzczMw==", "bodyText": "Maybe flush should return SCMTransactionInfo, and this return SCMTransactionInfo#transactionIndex ?", "url": "https://github.com/apache/ozone/pull/1725#discussion_r553317733", "createdAt": "2021-01-07T13:11:09Z", "author": {"login": "runzhiwang"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMStateMachine.java", "diffHunk": "@@ -89,4 +99,15 @@ private Message process(final SCMRatisRequest request)\n     }\n   }\n \n+  @Override\n+  public long takeSnapshot() throws IOException {\n+    LOG.info(\"Current Snapshot Index {}\", getLastAppliedTermIndex());\n+    long startTime = Time.monotonicNow();\n+    TermIndex lastTermIndex = getLastAppliedTermIndex();\n+    long lastAppliedIndex = lastTermIndex.getIndex();\n+    transactionBuffer.flush();\n+    LOG.debug(\"SCM takeSnapshot: {} took {} ms\",\n+        Time.monotonicNow() - startTime);\n+    return lastAppliedIndex;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfddaedf1a7a22d03e92f79cb52009eee114258c"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzU1MjI2Nw==", "bodyText": "Code changes a bit. Maybe take another look?", "url": "https://github.com/apache/ozone/pull/1725#discussion_r553552267", "createdAt": "2021-01-07T19:50:04Z", "author": {"login": "amaliujia"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMStateMachine.java", "diffHunk": "@@ -89,4 +99,15 @@ private Message process(final SCMRatisRequest request)\n     }\n   }\n \n+  @Override\n+  public long takeSnapshot() throws IOException {\n+    LOG.info(\"Current Snapshot Index {}\", getLastAppliedTermIndex());\n+    long startTime = Time.monotonicNow();\n+    TermIndex lastTermIndex = getLastAppliedTermIndex();\n+    long lastAppliedIndex = lastTermIndex.getIndex();\n+    transactionBuffer.flush();\n+    LOG.debug(\"SCM takeSnapshot: {} took {} ms\",\n+        Time.monotonicNow() - startTime);\n+    return lastAppliedIndex;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMxNzczMw=="}, "originalCommit": {"oid": "dfddaedf1a7a22d03e92f79cb52009eee114258c"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MjYyMTIxOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMDBTransactionBuffer.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMzoxMzoxN1rOIPr5TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQyMDoyMDoyNlrOIQf7Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMxODczMg==", "bodyText": "Expose currentBatchOperation has a risk, if someone commit this batch operation not by calling flush(), then applyIndex did not wrote into RocksDB.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r553318732", "createdAt": "2021-01-07T13:13:17Z", "author": {"login": "runzhiwang"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMDBTransactionBuffer.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p/>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p/>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import org.apache.hadoop.hdds.scm.metadata.SCMMetadataStore;\n+import org.apache.hadoop.hdds.utils.db.BatchOperation;\n+import org.apache.hadoop.hdds.utils.db.Table;\n+\n+import java.io.IOException;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.TRANSACTION_INFO_KEY;\n+\n+public class SCMDBTransactionBuffer {\n+  private final SCMMetadataStore metadataStore;\n+  private BatchOperation currentBatchOperation;\n+  private SCMTransactionInfo latestTrxInfo;\n+\n+  public SCMDBTransactionBuffer(SCMMetadataStore store) {\n+    this.metadataStore = store;\n+\n+    // initialize a batch operation during construction time\n+    currentBatchOperation = this.metadataStore.getStore().initBatchOperation();\n+    latestTrxInfo =\n+        SCMTransactionInfo\n+            .builder()\n+            .setTransactionIndex(-1)\n+            .setCurrentTerm(0)\n+            .build();\n+  }\n+\n+  public BatchOperation getCurrentBatchOperation() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfddaedf1a7a22d03e92f79cb52009eee114258c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzU1MTI2Nw==", "bodyText": "hmm I think the goal here is commiting batch operations won't need to flush DB. The flushing is controlled by takeSnapshot().\nIs there a case that committing will have a following flush?", "url": "https://github.com/apache/ozone/pull/1725#discussion_r553551267", "createdAt": "2021-01-07T19:47:59Z", "author": {"login": "amaliujia"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMDBTransactionBuffer.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p/>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p/>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import org.apache.hadoop.hdds.scm.metadata.SCMMetadataStore;\n+import org.apache.hadoop.hdds.utils.db.BatchOperation;\n+import org.apache.hadoop.hdds.utils.db.Table;\n+\n+import java.io.IOException;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.TRANSACTION_INFO_KEY;\n+\n+public class SCMDBTransactionBuffer {\n+  private final SCMMetadataStore metadataStore;\n+  private BatchOperation currentBatchOperation;\n+  private SCMTransactionInfo latestTrxInfo;\n+\n+  public SCMDBTransactionBuffer(SCMMetadataStore store) {\n+    this.metadataStore = store;\n+\n+    // initialize a batch operation during construction time\n+    currentBatchOperation = this.metadataStore.getStore().initBatchOperation();\n+    latestTrxInfo =\n+        SCMTransactionInfo\n+            .builder()\n+            .setTransactionIndex(-1)\n+            .setCurrentTerm(0)\n+            .build();\n+  }\n+\n+  public BatchOperation getCurrentBatchOperation() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMxODczMg=="}, "originalCommit": {"oid": "dfddaedf1a7a22d03e92f79cb52009eee114258c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzY3NTQ2Mw==", "bodyText": "I'm afraid if someone do not know must call flush() to sync, but sync currentBatchOperation directly, then inconsistent will happen.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r553675463", "createdAt": "2021-01-08T00:45:45Z", "author": {"login": "runzhiwang"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMDBTransactionBuffer.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p/>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p/>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import org.apache.hadoop.hdds.scm.metadata.SCMMetadataStore;\n+import org.apache.hadoop.hdds.utils.db.BatchOperation;\n+import org.apache.hadoop.hdds.utils.db.Table;\n+\n+import java.io.IOException;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.TRANSACTION_INFO_KEY;\n+\n+public class SCMDBTransactionBuffer {\n+  private final SCMMetadataStore metadataStore;\n+  private BatchOperation currentBatchOperation;\n+  private SCMTransactionInfo latestTrxInfo;\n+\n+  public SCMDBTransactionBuffer(SCMMetadataStore store) {\n+    this.metadataStore = store;\n+\n+    // initialize a batch operation during construction time\n+    currentBatchOperation = this.metadataStore.getStore().initBatchOperation();\n+    latestTrxInfo =\n+        SCMTransactionInfo\n+            .builder()\n+            .setTransactionIndex(-1)\n+            .setCurrentTerm(0)\n+            .build();\n+  }\n+\n+  public BatchOperation getCurrentBatchOperation() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMxODczMg=="}, "originalCommit": {"oid": "dfddaedf1a7a22d03e92f79cb52009eee114258c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzc0MzI0Nw==", "bodyText": "Do you know is there a better mechanism to achieve the buffering?\nI studied what OM does and that is different from SCM. OM just buffer entry and then apply entries in a batch, but SCM need to router such entry to handlers and then different handler will apply the entry.\nSo if we change to the way that OM is doing, there will be a good amount of refactoring needs happen, which might be not appropriate in this PR. E.g. We will need to move handlers to the buffer class and insert entries into buffer. Buffer will be the place to trouter entries to right state managers.\nWhat do you think? I can create a PR to track such refactoring thus we won't need to expose  currentBatchOperation", "url": "https://github.com/apache/ozone/pull/1725#discussion_r553743247", "createdAt": "2021-01-08T05:03:18Z", "author": {"login": "amaliujia"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMDBTransactionBuffer.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p/>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p/>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import org.apache.hadoop.hdds.scm.metadata.SCMMetadataStore;\n+import org.apache.hadoop.hdds.utils.db.BatchOperation;\n+import org.apache.hadoop.hdds.utils.db.Table;\n+\n+import java.io.IOException;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.TRANSACTION_INFO_KEY;\n+\n+public class SCMDBTransactionBuffer {\n+  private final SCMMetadataStore metadataStore;\n+  private BatchOperation currentBatchOperation;\n+  private SCMTransactionInfo latestTrxInfo;\n+\n+  public SCMDBTransactionBuffer(SCMMetadataStore store) {\n+    this.metadataStore = store;\n+\n+    // initialize a batch operation during construction time\n+    currentBatchOperation = this.metadataStore.getStore().initBatchOperation();\n+    latestTrxInfo =\n+        SCMTransactionInfo\n+            .builder()\n+            .setTransactionIndex(-1)\n+            .setCurrentTerm(0)\n+            .build();\n+  }\n+\n+  public BatchOperation getCurrentBatchOperation() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMxODczMg=="}, "originalCommit": {"oid": "dfddaedf1a7a22d03e92f79cb52009eee114258c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzc1OTQzOQ==", "bodyText": "How about return an anonymous subclass of RDBBatchOperation whose commit() will throw RuntimeException, which means you can only write to the batch, but there is no way to commit this batch ?\nRDBBatchOperation#commit() is called by RDBStore#commitBatchOperation().\nAlso add javadoc to this getCurrentBatchOperation(), notifying that this returned batch can not be commited.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r553759439", "createdAt": "2021-01-08T06:07:37Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMDBTransactionBuffer.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p/>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p/>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import org.apache.hadoop.hdds.scm.metadata.SCMMetadataStore;\n+import org.apache.hadoop.hdds.utils.db.BatchOperation;\n+import org.apache.hadoop.hdds.utils.db.Table;\n+\n+import java.io.IOException;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.TRANSACTION_INFO_KEY;\n+\n+public class SCMDBTransactionBuffer {\n+  private final SCMMetadataStore metadataStore;\n+  private BatchOperation currentBatchOperation;\n+  private SCMTransactionInfo latestTrxInfo;\n+\n+  public SCMDBTransactionBuffer(SCMMetadataStore store) {\n+    this.metadataStore = store;\n+\n+    // initialize a batch operation during construction time\n+    currentBatchOperation = this.metadataStore.getStore().initBatchOperation();\n+    latestTrxInfo =\n+        SCMTransactionInfo\n+            .builder()\n+            .setTransactionIndex(-1)\n+            .setCurrentTerm(0)\n+            .build();\n+  }\n+\n+  public BatchOperation getCurrentBatchOperation() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMxODczMg=="}, "originalCommit": {"oid": "dfddaedf1a7a22d03e92f79cb52009eee114258c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDE3MTE4Nw==", "bodyText": "Glen's idea might be much easier. That's a good option.\nI think I will separate it to:\n\nadd javadoc to getCurrentBatchOperation() to remind that do not use this batch to commit.\nApply a solution to fix this issue. Created https://issues.apache.org/jira/browse/HDDS-4661 to track it.\n\nBecause getCurrentBatchOperation() is not a user-facing API, so only Ozone developer could make such mistakes, and in short term we have code review process to catch those. But I agree we should apply a fix for the longer term.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r554171187", "createdAt": "2021-01-08T20:20:26Z", "author": {"login": "amaliujia"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMDBTransactionBuffer.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p/>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p/>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import org.apache.hadoop.hdds.scm.metadata.SCMMetadataStore;\n+import org.apache.hadoop.hdds.utils.db.BatchOperation;\n+import org.apache.hadoop.hdds.utils.db.Table;\n+\n+import java.io.IOException;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.TRANSACTION_INFO_KEY;\n+\n+public class SCMDBTransactionBuffer {\n+  private final SCMMetadataStore metadataStore;\n+  private BatchOperation currentBatchOperation;\n+  private SCMTransactionInfo latestTrxInfo;\n+\n+  public SCMDBTransactionBuffer(SCMMetadataStore store) {\n+    this.metadataStore = store;\n+\n+    // initialize a batch operation during construction time\n+    currentBatchOperation = this.metadataStore.getStore().initBatchOperation();\n+    latestTrxInfo =\n+        SCMTransactionInfo\n+            .builder()\n+            .setTransactionIndex(-1)\n+            .setCurrentTerm(0)\n+            .build();\n+  }\n+\n+  public BatchOperation getCurrentBatchOperation() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMxODczMg=="}, "originalCommit": {"oid": "dfddaedf1a7a22d03e92f79cb52009eee114258c"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5MDU1OTcyOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMRatisSnapshotInfo.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMFQwNTowMzoxN1rOIQ0tsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQyMToyMjo0NlrOIV3eQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDUxMTc5NQ==", "bodyText": "I don't see this method is used in this PR. Will this be used in follow-up task? If not we could remove this and remove volatile keyword for term/snapshotIndex as well. Because I didn't find the concurrent update for this two variables.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r554511795", "createdAt": "2021-01-10T05:03:17Z", "author": {"login": "linyiqun"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMRatisSnapshotInfo.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * <p>http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * <p>Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import org.apache.ratis.server.protocol.TermIndex;\n+import org.apache.ratis.server.storage.FileInfo;\n+import org.apache.ratis.statemachine.SnapshotInfo;\n+\n+import java.util.List;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.TRANSACTION_INFO_SPLIT_KEY;\n+\n+/**\n+ * This class captures the snapshotIndex and term of the latest snapshot in\n+ * the SCM\n+ * Ratis server loads the snapshotInfo during startup and updates the\n+ * lastApplied index to this snapshotIndex. SCM SnapshotInfo does not contain\n+ * any files. It is used only to store/ update the last applied index and term.\n+ */\n+public class SCMRatisSnapshotInfo implements SnapshotInfo {\n+  private volatile long term;\n+  private volatile long snapshotIndex;\n+\n+  public SCMRatisSnapshotInfo(long term, long index) {\n+    this.term = term;\n+    this.snapshotIndex = index;\n+  }\n+\n+  public void updateTermIndex(long newTerm, long newIndex) {\n+    this.term = newTerm;\n+    this.snapshotIndex = newIndex;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22b07be1da6560d929c7cdeda374db4db5f61680"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM5Mzc2MQ==", "bodyText": "got it. Will remove this method.\nThe volatile is a good point. I am also looking for comments to point me out whether there are potential concurrent operations.  I will remove volatile if there is no comment about this situation.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r555393761", "createdAt": "2021-01-11T22:58:33Z", "author": {"login": "amaliujia"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMRatisSnapshotInfo.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * <p>http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * <p>Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import org.apache.ratis.server.protocol.TermIndex;\n+import org.apache.ratis.server.storage.FileInfo;\n+import org.apache.ratis.statemachine.SnapshotInfo;\n+\n+import java.util.List;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.TRANSACTION_INFO_SPLIT_KEY;\n+\n+/**\n+ * This class captures the snapshotIndex and term of the latest snapshot in\n+ * the SCM\n+ * Ratis server loads the snapshotInfo during startup and updates the\n+ * lastApplied index to this snapshotIndex. SCM SnapshotInfo does not contain\n+ * any files. It is used only to store/ update the last applied index and term.\n+ */\n+public class SCMRatisSnapshotInfo implements SnapshotInfo {\n+  private volatile long term;\n+  private volatile long snapshotIndex;\n+\n+  public SCMRatisSnapshotInfo(long term, long index) {\n+    this.term = term;\n+    this.snapshotIndex = index;\n+  }\n+\n+  public void updateTermIndex(long newTerm, long newIndex) {\n+    this.term = newTerm;\n+    this.snapshotIndex = newIndex;\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDUxMTc5NQ=="}, "originalCommit": {"oid": "22b07be1da6560d929c7cdeda374db4db5f61680"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTM3MDA3Ng==", "bodyText": "The SCMRatisSnapshotInfo is an immutable object after being created. How about make term and snapshotIndex be final and remove updateTermIndex() ?", "url": "https://github.com/apache/ozone/pull/1725#discussion_r559370076", "createdAt": "2021-01-18T07:50:47Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMRatisSnapshotInfo.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * <p>http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * <p>Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import org.apache.ratis.server.protocol.TermIndex;\n+import org.apache.ratis.server.storage.FileInfo;\n+import org.apache.ratis.statemachine.SnapshotInfo;\n+\n+import java.util.List;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.TRANSACTION_INFO_SPLIT_KEY;\n+\n+/**\n+ * This class captures the snapshotIndex and term of the latest snapshot in\n+ * the SCM\n+ * Ratis server loads the snapshotInfo during startup and updates the\n+ * lastApplied index to this snapshotIndex. SCM SnapshotInfo does not contain\n+ * any files. It is used only to store/ update the last applied index and term.\n+ */\n+public class SCMRatisSnapshotInfo implements SnapshotInfo {\n+  private volatile long term;\n+  private volatile long snapshotIndex;\n+\n+  public SCMRatisSnapshotInfo(long term, long index) {\n+    this.term = term;\n+    this.snapshotIndex = index;\n+  }\n+\n+  public void updateTermIndex(long newTerm, long newIndex) {\n+    this.term = newTerm;\n+    this.snapshotIndex = newIndex;\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDUxMTc5NQ=="}, "originalCommit": {"oid": "22b07be1da6560d929c7cdeda374db4db5f61680"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTc5OTg3NQ==", "bodyText": "That makes sense. Done", "url": "https://github.com/apache/ozone/pull/1725#discussion_r559799875", "createdAt": "2021-01-18T21:22:46Z", "author": {"login": "amaliujia"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMRatisSnapshotInfo.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * <p>http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * <p>Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import org.apache.ratis.server.protocol.TermIndex;\n+import org.apache.ratis.server.storage.FileInfo;\n+import org.apache.ratis.statemachine.SnapshotInfo;\n+\n+import java.util.List;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.TRANSACTION_INFO_SPLIT_KEY;\n+\n+/**\n+ * This class captures the snapshotIndex and term of the latest snapshot in\n+ * the SCM\n+ * Ratis server loads the snapshotInfo during startup and updates the\n+ * lastApplied index to this snapshotIndex. SCM SnapshotInfo does not contain\n+ * any files. It is used only to store/ update the last applied index and term.\n+ */\n+public class SCMRatisSnapshotInfo implements SnapshotInfo {\n+  private volatile long term;\n+  private volatile long snapshotIndex;\n+\n+  public SCMRatisSnapshotInfo(long term, long index) {\n+    this.term = term;\n+    this.snapshotIndex = index;\n+  }\n+\n+  public void updateTermIndex(long newTerm, long newIndex) {\n+    this.term = newTerm;\n+    this.snapshotIndex = newIndex;\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDUxMTc5NQ=="}, "originalCommit": {"oid": "22b07be1da6560d929c7cdeda374db4db5f61680"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMjU2NzUyOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMDBTransactionBuffer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwODoxMToxMlrOISjzRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQwODowMToxNVrOITVjww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjMzMTg0NQ==", "bodyText": "Will it be better to call latestSnapshot = latestTrxInfo.toSnapshotInfo(); here, and remove the setLatestSnapshot () method ?\nIf caller always has to call flush() and setLatestSnapshot() together, better to merge them to avoid  human mistake.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r556331845", "createdAt": "2021-01-13T08:11:12Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMDBTransactionBuffer.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p/>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p/>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import org.apache.hadoop.hdds.scm.metadata.SCMMetadataStore;\n+import org.apache.hadoop.hdds.utils.db.BatchOperation;\n+import org.apache.hadoop.hdds.utils.db.Table;\n+import org.apache.ratis.statemachine.SnapshotInfo;\n+\n+import java.io.IOException;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.TRANSACTION_INFO_KEY;\n+\n+/**\n+ * This is a transaction buffer that buffers SCM DB operations for Pipeline and\n+ * Container. When flush this buffer to DB, a transaction info will also be\n+ * written into DB to indicate the term and transaction index for the latest\n+ * operation in DB.\n+ */\n+public class SCMDBTransactionBuffer {\n+  private final SCMMetadataStore metadataStore;\n+  private BatchOperation currentBatchOperation;\n+  private SCMTransactionInfo latestTrxInfo;\n+  private SnapshotInfo latestSnapshot;\n+\n+  public SCMDBTransactionBuffer(SCMMetadataStore store) throws IOException {\n+    this.metadataStore = store;\n+\n+    // initialize a batch operation during construction time\n+    currentBatchOperation = this.metadataStore.getStore().initBatchOperation();\n+    latestTrxInfo = store.getTransactionInfoTable().get(TRANSACTION_INFO_KEY);\n+    if (latestTrxInfo == null) {\n+      // transaction table is empty\n+      latestTrxInfo =\n+          SCMTransactionInfo\n+              .builder()\n+              .setTransactionIndex(-1)\n+              .setCurrentTerm(0)\n+              .build();\n+    }\n+    latestSnapshot = latestTrxInfo.toSnapshotInfo();\n+  }\n+\n+  public BatchOperation getCurrentBatchOperation() {\n+    return currentBatchOperation;\n+  }\n+\n+  public void updateLatestTrxInfo(SCMTransactionInfo info) {\n+    if (info.compareTo(this.latestTrxInfo) <= 0) {\n+      throw new IllegalArgumentException(\n+          \"Updating DB buffer transaction info by an older transaction info, \"\n+          + \"current: \" + this.latestTrxInfo + \", updating to: \" + info);\n+    }\n+    this.latestTrxInfo = info;\n+  }\n+\n+  public SCMTransactionInfo getLatestTrxInfo() {\n+    return this.latestTrxInfo;\n+  }\n+\n+  public SnapshotInfo getLatestSnapshot() {\n+    return latestSnapshot;\n+  }\n+\n+  public void setLatestSnapshot(SnapshotInfo latestSnapshot) {\n+    this.latestSnapshot = latestSnapshot;\n+  }\n+\n+  public void flush() throws IOException {\n+    // write latest trx info into trx table in the same batch\n+    Table<String, SCMTransactionInfo> transactionInfoTable\n+        = metadataStore.getTransactionInfoTable();\n+    transactionInfoTable.putWithBatch(currentBatchOperation,\n+        TRANSACTION_INFO_KEY, latestTrxInfo);\n+\n+    metadataStore.getStore().commitBatchOperation(currentBatchOperation);\n+    currentBatchOperation.close();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22b07be1da6560d929c7cdeda374db4db5f61680"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzE0NzA3NQ==", "bodyText": "The snapshot info is set also during the initialization. So not only flush() will need to update that information.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r557147075", "createdAt": "2021-01-14T08:01:15Z", "author": {"login": "amaliujia"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMDBTransactionBuffer.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p/>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p/>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import org.apache.hadoop.hdds.scm.metadata.SCMMetadataStore;\n+import org.apache.hadoop.hdds.utils.db.BatchOperation;\n+import org.apache.hadoop.hdds.utils.db.Table;\n+import org.apache.ratis.statemachine.SnapshotInfo;\n+\n+import java.io.IOException;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.TRANSACTION_INFO_KEY;\n+\n+/**\n+ * This is a transaction buffer that buffers SCM DB operations for Pipeline and\n+ * Container. When flush this buffer to DB, a transaction info will also be\n+ * written into DB to indicate the term and transaction index for the latest\n+ * operation in DB.\n+ */\n+public class SCMDBTransactionBuffer {\n+  private final SCMMetadataStore metadataStore;\n+  private BatchOperation currentBatchOperation;\n+  private SCMTransactionInfo latestTrxInfo;\n+  private SnapshotInfo latestSnapshot;\n+\n+  public SCMDBTransactionBuffer(SCMMetadataStore store) throws IOException {\n+    this.metadataStore = store;\n+\n+    // initialize a batch operation during construction time\n+    currentBatchOperation = this.metadataStore.getStore().initBatchOperation();\n+    latestTrxInfo = store.getTransactionInfoTable().get(TRANSACTION_INFO_KEY);\n+    if (latestTrxInfo == null) {\n+      // transaction table is empty\n+      latestTrxInfo =\n+          SCMTransactionInfo\n+              .builder()\n+              .setTransactionIndex(-1)\n+              .setCurrentTerm(0)\n+              .build();\n+    }\n+    latestSnapshot = latestTrxInfo.toSnapshotInfo();\n+  }\n+\n+  public BatchOperation getCurrentBatchOperation() {\n+    return currentBatchOperation;\n+  }\n+\n+  public void updateLatestTrxInfo(SCMTransactionInfo info) {\n+    if (info.compareTo(this.latestTrxInfo) <= 0) {\n+      throw new IllegalArgumentException(\n+          \"Updating DB buffer transaction info by an older transaction info, \"\n+          + \"current: \" + this.latestTrxInfo + \", updating to: \" + info);\n+    }\n+    this.latestTrxInfo = info;\n+  }\n+\n+  public SCMTransactionInfo getLatestTrxInfo() {\n+    return this.latestTrxInfo;\n+  }\n+\n+  public SnapshotInfo getLatestSnapshot() {\n+    return latestSnapshot;\n+  }\n+\n+  public void setLatestSnapshot(SnapshotInfo latestSnapshot) {\n+    this.latestSnapshot = latestSnapshot;\n+  }\n+\n+  public void flush() throws IOException {\n+    // write latest trx info into trx table in the same batch\n+    Table<String, SCMTransactionInfo> transactionInfoTable\n+        = metadataStore.getTransactionInfoTable();\n+    transactionInfoTable.putWithBatch(currentBatchOperation,\n+        TRANSACTION_INFO_KEY, latestTrxInfo);\n+\n+    metadataStore.getStore().commitBatchOperation(currentBatchOperation);\n+    currentBatchOperation.close();\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjMzMTg0NQ=="}, "originalCommit": {"oid": "22b07be1da6560d929c7cdeda374db4db5f61680"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMjU4MTY5OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMStateMachine.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwODoxNTowMFrOISj75Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQwODowMDoyN1rOITVfUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjMzNDA1Mw==", "bodyText": "How about revert the change to process() and change like this ?\napplyTransactionFuture.complete(process(request));\ntransactionBuffer.updateLatestTrxInfo(SCMTransactionInfo.builder()\n                   .setCurrentTerm(trx.getLogEntry().getTerm())\n                   .setTransactionIndex(trx.getLogEntry().getIndex())\n                   .build()));\n\nthe process() does not needs to know about the trxInfo", "url": "https://github.com/apache/ozone/pull/1725#discussion_r556334053", "createdAt": "2021-01-13T08:15:00Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMStateMachine.java", "diffHunk": "@@ -55,15 +84,25 @@ public void registerHandler(RequestType type, Object handler) {\n     try {\n       final SCMRatisRequest request = SCMRatisRequest.decode(\n           Message.valueOf(trx.getStateMachineLogEntry().getLogData()));\n-      applyTransactionFuture.complete(process(request));\n+      applyTransactionFuture.complete(\n+          process(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22b07be1da6560d929c7cdeda374db4db5f61680"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzE0NTkzNw==", "bodyText": "+1", "url": "https://github.com/apache/ozone/pull/1725#discussion_r557145937", "createdAt": "2021-01-14T08:00:27Z", "author": {"login": "amaliujia"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMStateMachine.java", "diffHunk": "@@ -55,15 +84,25 @@ public void registerHandler(RequestType type, Object handler) {\n     try {\n       final SCMRatisRequest request = SCMRatisRequest.decode(\n           Message.valueOf(trx.getStateMachineLogEntry().getLogData()));\n-      applyTransactionFuture.complete(process(request));\n+      applyTransactionFuture.complete(\n+          process(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjMzNDA1Mw=="}, "originalCommit": {"oid": "22b07be1da6560d929c7cdeda374db4db5f61680"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMjU5OTI0OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMStateMachine.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwODoyMDowMFrOISkGTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQwODowMToyOVrOITVlEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjMzNjcxNw==", "bodyText": "How about move this shouldUpdate() in to SCMTransactionInfo, as a method isEmpty()? We'd better encapulate  the magic number 0 and -1 into SCMTransactionInfo .", "url": "https://github.com/apache/ozone/pull/1725#discussion_r556336717", "createdAt": "2021-01-13T08:20:00Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMStateMachine.java", "diffHunk": "@@ -55,15 +84,25 @@ public void registerHandler(RequestType type, Object handler) {\n     try {\n       final SCMRatisRequest request = SCMRatisRequest.decode(\n           Message.valueOf(trx.getStateMachineLogEntry().getLogData()));\n-      applyTransactionFuture.complete(process(request));\n+      applyTransactionFuture.complete(\n+          process(\n+              request,\n+              SCMTransactionInfo.builder()\n+                  .setCurrentTerm(trx.getLogEntry().getTerm())\n+                  .setTransactionIndex(trx.getLogEntry().getIndex())\n+                  .build()));\n     } catch (Exception ex) {\n       applyTransactionFuture.completeExceptionally(ex);\n     }\n     return applyTransactionFuture;\n   }\n \n-  private Message process(final SCMRatisRequest request)\n-      throws Exception {\n+  private boolean shouldUpdate(SCMTransactionInfo info) {\n+    return !(info.getTransactionIndex() == -1 && info.getTerm() == 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22b07be1da6560d929c7cdeda374db4db5f61680"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzE0NzQxMA==", "bodyText": "Makes sense", "url": "https://github.com/apache/ozone/pull/1725#discussion_r557147410", "createdAt": "2021-01-14T08:01:29Z", "author": {"login": "amaliujia"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMStateMachine.java", "diffHunk": "@@ -55,15 +84,25 @@ public void registerHandler(RequestType type, Object handler) {\n     try {\n       final SCMRatisRequest request = SCMRatisRequest.decode(\n           Message.valueOf(trx.getStateMachineLogEntry().getLogData()));\n-      applyTransactionFuture.complete(process(request));\n+      applyTransactionFuture.complete(\n+          process(\n+              request,\n+              SCMTransactionInfo.builder()\n+                  .setCurrentTerm(trx.getLogEntry().getTerm())\n+                  .setTransactionIndex(trx.getLogEntry().getIndex())\n+                  .build()));\n     } catch (Exception ex) {\n       applyTransactionFuture.completeExceptionally(ex);\n     }\n     return applyTransactionFuture;\n   }\n \n-  private Message process(final SCMRatisRequest request)\n-      throws Exception {\n+  private boolean shouldUpdate(SCMTransactionInfo info) {\n+    return !(info.getTransactionIndex() == -1 && info.getTerm() == 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjMzNjcxNw=="}, "originalCommit": {"oid": "22b07be1da6560d929c7cdeda374db4db5f61680"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMjYwODE2OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMStateMachine.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwODoyMjozMVrOISkLlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQwODowMDoyMlrOITVe4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjMzODA2OA==", "bodyText": "Better remove the info in line 133 and replace 156 as\nLOG.info(\"Current Snapshot Index {}, takeSnapshot took {} ms\", \n    getLastAppliedTermIndex(), Time.monotonicNow() - startTime);", "url": "https://github.com/apache/ozone/pull/1725#discussion_r556338068", "createdAt": "2021-01-13T08:22:31Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMStateMachine.java", "diffHunk": "@@ -89,4 +128,33 @@ private Message process(final SCMRatisRequest request)\n     }\n   }\n \n+  @Override\n+  public long takeSnapshot() throws IOException {\n+    LOG.info(\"Current Snapshot Index {}\", getLastAppliedTermIndex());\n+    long startTime = Time.monotonicNow();\n+    TermIndex lastTermIndex = getLastAppliedTermIndex();\n+    long lastAppliedIndex = lastTermIndex.getIndex();\n+    SCMTransactionInfo lastAppliedTrxInfo =\n+        SCMTransactionInfo.fromTermIndex(lastTermIndex);\n+    if (transactionBuffer.getLatestTrxInfo()\n+        .compareTo(lastAppliedTrxInfo) < 0) {\n+      transactionBuffer.updateLatestTrxInfo(\n+          SCMTransactionInfo.builder()\n+              .setCurrentTerm(lastTermIndex.getTerm())\n+              .setTransactionIndex(lastTermIndex.getIndex())\n+              .build());\n+      transactionBuffer.setLatestSnapshot(\n+          transactionBuffer.getLatestTrxInfo().toSnapshotInfo());\n+    } else {\n+      lastAppliedIndex =\n+          transactionBuffer.getLatestTrxInfo().getTransactionIndex();\n+    }\n+\n+    transactionBuffer.flush();\n+    transactionBuffer.setLatestSnapshot(\n+        transactionBuffer.getLatestTrxInfo().toSnapshotInfo());\n+    LOG.debug(\"SCM takeSnapshot: {} took {} ms\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22b07be1da6560d929c7cdeda374db4db5f61680"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzE0NTgyNw==", "bodyText": "Done", "url": "https://github.com/apache/ozone/pull/1725#discussion_r557145827", "createdAt": "2021-01-14T08:00:22Z", "author": {"login": "amaliujia"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMStateMachine.java", "diffHunk": "@@ -89,4 +128,33 @@ private Message process(final SCMRatisRequest request)\n     }\n   }\n \n+  @Override\n+  public long takeSnapshot() throws IOException {\n+    LOG.info(\"Current Snapshot Index {}\", getLastAppliedTermIndex());\n+    long startTime = Time.monotonicNow();\n+    TermIndex lastTermIndex = getLastAppliedTermIndex();\n+    long lastAppliedIndex = lastTermIndex.getIndex();\n+    SCMTransactionInfo lastAppliedTrxInfo =\n+        SCMTransactionInfo.fromTermIndex(lastTermIndex);\n+    if (transactionBuffer.getLatestTrxInfo()\n+        .compareTo(lastAppliedTrxInfo) < 0) {\n+      transactionBuffer.updateLatestTrxInfo(\n+          SCMTransactionInfo.builder()\n+              .setCurrentTerm(lastTermIndex.getTerm())\n+              .setTransactionIndex(lastTermIndex.getIndex())\n+              .build());\n+      transactionBuffer.setLatestSnapshot(\n+          transactionBuffer.getLatestTrxInfo().toSnapshotInfo());\n+    } else {\n+      lastAppliedIndex =\n+          transactionBuffer.getLatestTrxInfo().getTransactionIndex();\n+    }\n+\n+    transactionBuffer.flush();\n+    transactionBuffer.setLatestSnapshot(\n+        transactionBuffer.getLatestTrxInfo().toSnapshotInfo());\n+    LOG.debug(\"SCM takeSnapshot: {} took {} ms\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjMzODA2OA=="}, "originalCommit": {"oid": "22b07be1da6560d929c7cdeda374db4db5f61680"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwODQyMDgwOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMTransactionInfo.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQwOTozNzowM1rOITcdow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMzoxMjoxMVrOIT68Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzI2MDE5NQ==", "bodyText": "shouldUpdate() is not very intuitive in the context of SCMTransactionInfo, how about isInitialized() or something like this ?", "url": "https://github.com/apache/ozone/pull/1725#discussion_r557260195", "createdAt": "2021-01-14T09:37:03Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMTransactionInfo.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * <p>http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * <p>Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.hadoop.hdds.StringUtils;\n+import org.apache.ratis.server.protocol.TermIndex;\n+import org.apache.ratis.statemachine.SnapshotInfo;\n+\n+import java.util.Objects;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.TRANSACTION_INFO_SPLIT_KEY;\n+\n+/**\n+ * SCMTransactionInfo saves two fields for a transaction:\n+ *  1. term, of which the transaction belongs to\n+ *  2. transactionIndex, which is a monotonic increasing index\n+ *     (e.g. Raft Log index)\n+ */\n+final public class SCMTransactionInfo {\n+  private long term;\n+  private long transactionIndex;\n+\n+  private SCMTransactionInfo(String transactionInfo) {\n+    String[] tInfo =\n+        transactionInfo.split(TRANSACTION_INFO_SPLIT_KEY);\n+    Preconditions.checkState(tInfo.length == 2,\n+        \"Incorrect TransactionInfo value\");\n+\n+    term = Long.parseLong(tInfo[0]);\n+    transactionIndex = Long.parseLong(tInfo[1]);\n+  }\n+\n+  private SCMTransactionInfo(long currentTerm, long transactionIndex) {\n+    this.term = currentTerm;\n+    this.transactionIndex = transactionIndex;\n+  }\n+\n+  public boolean shouldUpdate() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5083347c29f3f207fcc19f9519dc65e05a7eed"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzc1OTUwMg==", "bodyText": "isInitialized is a good naming.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r557759502", "createdAt": "2021-01-14T23:12:11Z", "author": {"login": "amaliujia"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMTransactionInfo.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * <p>http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * <p>Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.hadoop.hdds.StringUtils;\n+import org.apache.ratis.server.protocol.TermIndex;\n+import org.apache.ratis.statemachine.SnapshotInfo;\n+\n+import java.util.Objects;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.TRANSACTION_INFO_SPLIT_KEY;\n+\n+/**\n+ * SCMTransactionInfo saves two fields for a transaction:\n+ *  1. term, of which the transaction belongs to\n+ *  2. transactionIndex, which is a monotonic increasing index\n+ *     (e.g. Raft Log index)\n+ */\n+final public class SCMTransactionInfo {\n+  private long term;\n+  private long transactionIndex;\n+\n+  private SCMTransactionInfo(String transactionInfo) {\n+    String[] tInfo =\n+        transactionInfo.split(TRANSACTION_INFO_SPLIT_KEY);\n+    Preconditions.checkState(tInfo.length == 2,\n+        \"Incorrect TransactionInfo value\");\n+\n+    term = Long.parseLong(tInfo[0]);\n+    transactionIndex = Long.parseLong(tInfo[1]);\n+  }\n+\n+  private SCMTransactionInfo(long currentTerm, long transactionIndex) {\n+    this.term = currentTerm;\n+    this.transactionIndex = transactionIndex;\n+  }\n+\n+  public boolean shouldUpdate() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzI2MDE5NQ=="}, "originalCommit": {"oid": "ce5083347c29f3f207fcc19f9519dc65e05a7eed"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwODY0NzEyOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelineManagerV2Impl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMDozMTo0N1rOITem3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMzoxMTozN1rOIT67bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzI5NTMyNQ==", "bodyText": "DBTransactionBuffer can be fetched by calling SCMHAManager#getDBTransactionBuffer, so this function newPipelineManagerWithMockBuffer is not needed.\n// Create PipelineStateManager\nStateManager stateManager = PipelineStateManagerV2Impl\n    .newBuilder().setPipelineStore(pipelineStore)\n    .setRatisServer(scmhaManager.getRatisServer())\n    .setNodeManager(nodeManager)\n    .setSCMDBTransactionBuffer(scmhaManager.getDBTransactionBuffer())\n    .build()", "url": "https://github.com/apache/ozone/pull/1725#discussion_r557295325", "createdAt": "2021-01-14T10:31:47Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelineManagerV2Impl.java", "diffHunk": "@@ -111,15 +113,25 @@ private PipelineManagerV2Impl(ConfigurationSource conf,\n     this.pipelineCreationAllowed = new AtomicBoolean(!this.isInSafeMode.get());\n   }\n \n-  public static PipelineManagerV2Impl newPipelineManager(\n+  public static PipelineManagerV2Impl newPipelineManagerWithMockBuffer(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5083347c29f3f207fcc19f9519dc65e05a7eed"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzc1OTM0MA==", "bodyText": "This is a very good point.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r557759340", "createdAt": "2021-01-14T23:11:37Z", "author": {"login": "amaliujia"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelineManagerV2Impl.java", "diffHunk": "@@ -111,15 +113,25 @@ private PipelineManagerV2Impl(ConfigurationSource conf,\n     this.pipelineCreationAllowed = new AtomicBoolean(!this.isInSafeMode.get());\n   }\n \n-  public static PipelineManagerV2Impl newPipelineManager(\n+  public static PipelineManagerV2Impl newPipelineManagerWithMockBuffer(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzI5NTMyNQ=="}, "originalCommit": {"oid": "ce5083347c29f3f207fcc19f9519dc65e05a7eed"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMjA0NzQyOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMStateMachine.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwMjo1MToxNVrOIT_PNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwNToxNDo0M1rOIUBeIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzgyOTk0MA==", "bodyText": "It should be\nif (latestTrxInfo.isInitialized()) {\n  updateLastAppliedTermIndex(...)\n}\n\n?", "url": "https://github.com/apache/ozone/pull/1725#discussion_r557829940", "createdAt": "2021-01-15T02:51:15Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMStateMachine.java", "diffHunk": "@@ -54,7 +54,7 @@ public SCMStateMachine(SCMDBTransactionBuffer buffer) throws SCMException {\n     this.handlers = new EnumMap<>(RequestType.class);\n     this.transactionBuffer = buffer;\n     SCMTransactionInfo latestTrxInfo = buffer.getLatestTrxInfo();\n-    if (latestTrxInfo.shouldUpdate()) {\n+    if (!latestTrxInfo.isInitialized()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e45b347ee8c7ddaa6ea47128c3a4e8439428c38d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg2NjUyOA==", "bodyText": "Actually it is !latestTrxInfo.isInitialized().\nSCMTransactionInfo latestTrxInfo = buffer.getLatestTrxInfo(); comes from the buffer. The buffer will load the SCMTransactionInfo from the DB. If there was no snapshot taken before (e.g. brand new SCM), there isn't a SCMTransactionInfo from DB thus buffer will create a default one.\nSo we only need to updateLastAppliedTermIndex when latestTrxInfo is not initialized (thus it is loaded from DB and it's meaningful).", "url": "https://github.com/apache/ozone/pull/1725#discussion_r557866528", "createdAt": "2021-01-15T05:14:43Z", "author": {"login": "amaliujia"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMStateMachine.java", "diffHunk": "@@ -54,7 +54,7 @@ public SCMStateMachine(SCMDBTransactionBuffer buffer) throws SCMException {\n     this.handlers = new EnumMap<>(RequestType.class);\n     this.transactionBuffer = buffer;\n     SCMTransactionInfo latestTrxInfo = buffer.getLatestTrxInfo();\n-    if (latestTrxInfo.shouldUpdate()) {\n+    if (!latestTrxInfo.isInitialized()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzgyOTk0MA=="}, "originalCommit": {"oid": "e45b347ee8c7ddaa6ea47128c3a4e8439428c38d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxNDAzNzQwOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMDBTransactionBuffer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwOTo1NTo1OFrOIUTj_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQwNTo0MDowOFrOIVao5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODE2Mjk0Mg==", "bodyText": "i think, reset of the rocks db batch operation should be made independent of flush. We may/may not require to reinitialise every time we call flush. For example, shutting down the raft server instance may initiate the last snapshot but will not require the batch reinitialisation.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r558162942", "createdAt": "2021-01-15T09:55:58Z", "author": {"login": "bshashikant"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMDBTransactionBuffer.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p/>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p/>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import org.apache.hadoop.hdds.scm.metadata.SCMMetadataStore;\n+import org.apache.hadoop.hdds.utils.db.BatchOperation;\n+import org.apache.hadoop.hdds.utils.db.Table;\n+import org.apache.ratis.statemachine.SnapshotInfo;\n+\n+import java.io.IOException;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.TRANSACTION_INFO_KEY;\n+\n+/**\n+ * This is a transaction buffer that buffers SCM DB operations for Pipeline and\n+ * Container. When flush this buffer to DB, a transaction info will also be\n+ * written into DB to indicate the term and transaction index for the latest\n+ * operation in DB.\n+ */\n+public class SCMDBTransactionBuffer implements DBTransactionBuffer {\n+  private final SCMMetadataStore metadataStore;\n+  private BatchOperation currentBatchOperation;\n+  private SCMTransactionInfo latestTrxInfo;\n+  private SnapshotInfo latestSnapshot;\n+\n+  public SCMDBTransactionBuffer(SCMMetadataStore store) throws IOException {\n+    this.metadataStore = store;\n+\n+    // initialize a batch operation during construction time\n+    currentBatchOperation = this.metadataStore.getStore().initBatchOperation();\n+    latestTrxInfo = store.getTransactionInfoTable().get(TRANSACTION_INFO_KEY);\n+    if (latestTrxInfo == null) {\n+      // transaction table is empty\n+      latestTrxInfo =\n+          SCMTransactionInfo\n+              .builder()\n+              .setTransactionIndex(-1)\n+              .setCurrentTerm(0)\n+              .build();\n+    }\n+    latestSnapshot = latestTrxInfo.toSnapshotInfo();\n+  }\n+\n+  @Override\n+  public BatchOperation getCurrentBatchOperation() {\n+    return currentBatchOperation;\n+  }\n+\n+  @Override\n+  public void updateLatestTrxInfo(SCMTransactionInfo info) {\n+    if (info.compareTo(this.latestTrxInfo) <= 0) {\n+      throw new IllegalArgumentException(\n+          \"Updating DB buffer transaction info by an older transaction info, \"\n+          + \"current: \" + this.latestTrxInfo + \", updating to: \" + info);\n+    }\n+    this.latestTrxInfo = info;\n+  }\n+\n+  @Override\n+  public SCMTransactionInfo getLatestTrxInfo() {\n+    return this.latestTrxInfo;\n+  }\n+\n+  @Override\n+  public SnapshotInfo getLatestSnapshot() {\n+    return latestSnapshot;\n+  }\n+\n+  @Override\n+  public void setLatestSnapshot(SnapshotInfo latestSnapshot) {\n+    this.latestSnapshot = latestSnapshot;\n+  }\n+\n+  @Override\n+  public void flush() throws IOException {\n+    // write latest trx info into trx table in the same batch\n+    Table<String, SCMTransactionInfo> transactionInfoTable\n+        = metadataStore.getTransactionInfoTable();\n+    transactionInfoTable.putWithBatch(currentBatchOperation,\n+        TRANSACTION_INFO_KEY, latestTrxInfo);\n+\n+    metadataStore.getStore().commitBatchOperation(currentBatchOperation);\n+    currentBatchOperation.close();\n+    this.latestSnapshot = latestTrxInfo.toSnapshotInfo();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "865bcb18cb5e0dd25f73a34f4d62e70950975a20"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODYwOTUxMg==", "bodyText": "I agree with it :-)\nIn fact we have discussed not to expose batch operation above and I created  https://issues.apache.org/jira/browse/HDDS-4661.\nAs this PR becomes larger and larger so I am planning to address this batch operation related comments in HDDS-4661, including when to init and close it.\nHow do you feel? Do you agree with my idea?", "url": "https://github.com/apache/ozone/pull/1725#discussion_r558609512", "createdAt": "2021-01-15T21:46:37Z", "author": {"login": "amaliujia"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMDBTransactionBuffer.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p/>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p/>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import org.apache.hadoop.hdds.scm.metadata.SCMMetadataStore;\n+import org.apache.hadoop.hdds.utils.db.BatchOperation;\n+import org.apache.hadoop.hdds.utils.db.Table;\n+import org.apache.ratis.statemachine.SnapshotInfo;\n+\n+import java.io.IOException;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.TRANSACTION_INFO_KEY;\n+\n+/**\n+ * This is a transaction buffer that buffers SCM DB operations for Pipeline and\n+ * Container. When flush this buffer to DB, a transaction info will also be\n+ * written into DB to indicate the term and transaction index for the latest\n+ * operation in DB.\n+ */\n+public class SCMDBTransactionBuffer implements DBTransactionBuffer {\n+  private final SCMMetadataStore metadataStore;\n+  private BatchOperation currentBatchOperation;\n+  private SCMTransactionInfo latestTrxInfo;\n+  private SnapshotInfo latestSnapshot;\n+\n+  public SCMDBTransactionBuffer(SCMMetadataStore store) throws IOException {\n+    this.metadataStore = store;\n+\n+    // initialize a batch operation during construction time\n+    currentBatchOperation = this.metadataStore.getStore().initBatchOperation();\n+    latestTrxInfo = store.getTransactionInfoTable().get(TRANSACTION_INFO_KEY);\n+    if (latestTrxInfo == null) {\n+      // transaction table is empty\n+      latestTrxInfo =\n+          SCMTransactionInfo\n+              .builder()\n+              .setTransactionIndex(-1)\n+              .setCurrentTerm(0)\n+              .build();\n+    }\n+    latestSnapshot = latestTrxInfo.toSnapshotInfo();\n+  }\n+\n+  @Override\n+  public BatchOperation getCurrentBatchOperation() {\n+    return currentBatchOperation;\n+  }\n+\n+  @Override\n+  public void updateLatestTrxInfo(SCMTransactionInfo info) {\n+    if (info.compareTo(this.latestTrxInfo) <= 0) {\n+      throw new IllegalArgumentException(\n+          \"Updating DB buffer transaction info by an older transaction info, \"\n+          + \"current: \" + this.latestTrxInfo + \", updating to: \" + info);\n+    }\n+    this.latestTrxInfo = info;\n+  }\n+\n+  @Override\n+  public SCMTransactionInfo getLatestTrxInfo() {\n+    return this.latestTrxInfo;\n+  }\n+\n+  @Override\n+  public SnapshotInfo getLatestSnapshot() {\n+    return latestSnapshot;\n+  }\n+\n+  @Override\n+  public void setLatestSnapshot(SnapshotInfo latestSnapshot) {\n+    this.latestSnapshot = latestSnapshot;\n+  }\n+\n+  @Override\n+  public void flush() throws IOException {\n+    // write latest trx info into trx table in the same batch\n+    Table<String, SCMTransactionInfo> transactionInfoTable\n+        = metadataStore.getTransactionInfoTable();\n+    transactionInfoTable.putWithBatch(currentBatchOperation,\n+        TRANSACTION_INFO_KEY, latestTrxInfo);\n+\n+    metadataStore.getStore().commitBatchOperation(currentBatchOperation);\n+    currentBatchOperation.close();\n+    this.latestSnapshot = latestTrxInfo.toSnapshotInfo();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODE2Mjk0Mg=="}, "originalCommit": {"oid": "865bcb18cb5e0dd25f73a34f4d62e70950975a20"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTMyNzQ2Mw==", "bodyText": "I am ok with addressing in a different PR.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r559327463", "createdAt": "2021-01-18T05:40:08Z", "author": {"login": "bshashikant"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMDBTransactionBuffer.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p/>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p/>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import org.apache.hadoop.hdds.scm.metadata.SCMMetadataStore;\n+import org.apache.hadoop.hdds.utils.db.BatchOperation;\n+import org.apache.hadoop.hdds.utils.db.Table;\n+import org.apache.ratis.statemachine.SnapshotInfo;\n+\n+import java.io.IOException;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.TRANSACTION_INFO_KEY;\n+\n+/**\n+ * This is a transaction buffer that buffers SCM DB operations for Pipeline and\n+ * Container. When flush this buffer to DB, a transaction info will also be\n+ * written into DB to indicate the term and transaction index for the latest\n+ * operation in DB.\n+ */\n+public class SCMDBTransactionBuffer implements DBTransactionBuffer {\n+  private final SCMMetadataStore metadataStore;\n+  private BatchOperation currentBatchOperation;\n+  private SCMTransactionInfo latestTrxInfo;\n+  private SnapshotInfo latestSnapshot;\n+\n+  public SCMDBTransactionBuffer(SCMMetadataStore store) throws IOException {\n+    this.metadataStore = store;\n+\n+    // initialize a batch operation during construction time\n+    currentBatchOperation = this.metadataStore.getStore().initBatchOperation();\n+    latestTrxInfo = store.getTransactionInfoTable().get(TRANSACTION_INFO_KEY);\n+    if (latestTrxInfo == null) {\n+      // transaction table is empty\n+      latestTrxInfo =\n+          SCMTransactionInfo\n+              .builder()\n+              .setTransactionIndex(-1)\n+              .setCurrentTerm(0)\n+              .build();\n+    }\n+    latestSnapshot = latestTrxInfo.toSnapshotInfo();\n+  }\n+\n+  @Override\n+  public BatchOperation getCurrentBatchOperation() {\n+    return currentBatchOperation;\n+  }\n+\n+  @Override\n+  public void updateLatestTrxInfo(SCMTransactionInfo info) {\n+    if (info.compareTo(this.latestTrxInfo) <= 0) {\n+      throw new IllegalArgumentException(\n+          \"Updating DB buffer transaction info by an older transaction info, \"\n+          + \"current: \" + this.latestTrxInfo + \", updating to: \" + info);\n+    }\n+    this.latestTrxInfo = info;\n+  }\n+\n+  @Override\n+  public SCMTransactionInfo getLatestTrxInfo() {\n+    return this.latestTrxInfo;\n+  }\n+\n+  @Override\n+  public SnapshotInfo getLatestSnapshot() {\n+    return latestSnapshot;\n+  }\n+\n+  @Override\n+  public void setLatestSnapshot(SnapshotInfo latestSnapshot) {\n+    this.latestSnapshot = latestSnapshot;\n+  }\n+\n+  @Override\n+  public void flush() throws IOException {\n+    // write latest trx info into trx table in the same batch\n+    Table<String, SCMTransactionInfo> transactionInfoTable\n+        = metadataStore.getTransactionInfoTable();\n+    transactionInfoTable.putWithBatch(currentBatchOperation,\n+        TRANSACTION_INFO_KEY, latestTrxInfo);\n+\n+    metadataStore.getStore().commitBatchOperation(currentBatchOperation);\n+    currentBatchOperation.close();\n+    this.latestSnapshot = latestTrxInfo.toSnapshotInfo();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODE2Mjk0Mg=="}, "originalCommit": {"oid": "865bcb18cb5e0dd25f73a34f4d62e70950975a20"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxNDEyNTU4OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMStateMachine.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMDowNTozNVrOIUUhYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQwNTozNToxNFrOIVajwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODE3ODY1OQ==", "bodyText": "why the lastApplied index returned here is the one derived from transaction buffer? Once the snapshot is taken, the last applied index should be given by getLastAppliedTermIndex() not transaction buffer which may be behind actual last applied index in ratis?", "url": "https://github.com/apache/ozone/pull/1725#discussion_r558178659", "createdAt": "2021-01-15T10:05:35Z", "author": {"login": "bshashikant"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMStateMachine.java", "diffHunk": "@@ -89,4 +119,30 @@ private Message process(final SCMRatisRequest request)\n     }\n   }\n \n+  @Override\n+  public long takeSnapshot() throws IOException {\n+    long startTime = Time.monotonicNow();\n+    TermIndex lastTermIndex = getLastAppliedTermIndex();\n+    long lastAppliedIndex = lastTermIndex.getIndex();\n+    SCMTransactionInfo lastAppliedTrxInfo =\n+        SCMTransactionInfo.fromTermIndex(lastTermIndex);\n+    if (transactionBuffer.getLatestTrxInfo()\n+        .compareTo(lastAppliedTrxInfo) < 0) {\n+      transactionBuffer.updateLatestTrxInfo(\n+          SCMTransactionInfo.builder()\n+              .setCurrentTerm(lastTermIndex.getTerm())\n+              .setTransactionIndex(lastTermIndex.getIndex())\n+              .build());\n+      transactionBuffer.setLatestSnapshot(\n+          transactionBuffer.getLatestTrxInfo().toSnapshotInfo());\n+    } else {\n+      lastAppliedIndex =\n+          transactionBuffer.getLatestTrxInfo().getTransactionIndex();\n+    }\n+\n+    transactionBuffer.flush();\n+    LOG.info(\"Current Snapshot Index {}, takeSnapshot took {} ms\",\n+        getLastAppliedTermIndex(), Time.monotonicNow() - startTime);\n+    return lastAppliedIndex;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "865bcb18cb5e0dd25f73a34f4d62e70950975a20"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODYxMzYxNg==", "bodyText": "O the code here is keeping the lastAppliedIndex in buffer to equal to the getLastAppliedTermIndex() actually.\n    LOG.info(\"Current Snapshot Index {}, takeSnapshot took {} ms\",\n        getLastAppliedTermIndex(), Time.monotonicNow() - startTime);\n\nis wrong.\nI should replace getLastAppliedTermIndex() with lastAppliedIndex to make it clear.\nWe need the lastAppliedIndex in buffer keep updated so that will be written into DB.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r558613616", "createdAt": "2021-01-15T21:56:28Z", "author": {"login": "amaliujia"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMStateMachine.java", "diffHunk": "@@ -89,4 +119,30 @@ private Message process(final SCMRatisRequest request)\n     }\n   }\n \n+  @Override\n+  public long takeSnapshot() throws IOException {\n+    long startTime = Time.monotonicNow();\n+    TermIndex lastTermIndex = getLastAppliedTermIndex();\n+    long lastAppliedIndex = lastTermIndex.getIndex();\n+    SCMTransactionInfo lastAppliedTrxInfo =\n+        SCMTransactionInfo.fromTermIndex(lastTermIndex);\n+    if (transactionBuffer.getLatestTrxInfo()\n+        .compareTo(lastAppliedTrxInfo) < 0) {\n+      transactionBuffer.updateLatestTrxInfo(\n+          SCMTransactionInfo.builder()\n+              .setCurrentTerm(lastTermIndex.getTerm())\n+              .setTransactionIndex(lastTermIndex.getIndex())\n+              .build());\n+      transactionBuffer.setLatestSnapshot(\n+          transactionBuffer.getLatestTrxInfo().toSnapshotInfo());\n+    } else {\n+      lastAppliedIndex =\n+          transactionBuffer.getLatestTrxInfo().getTransactionIndex();\n+    }\n+\n+    transactionBuffer.flush();\n+    LOG.info(\"Current Snapshot Index {}, takeSnapshot took {} ms\",\n+        getLastAppliedTermIndex(), Time.monotonicNow() - startTime);\n+    return lastAppliedIndex;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODE3ODY1OQ=="}, "originalCommit": {"oid": "865bcb18cb5e0dd25f73a34f4d62e70950975a20"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTMyNjE0NQ==", "bodyText": "I see the buffer getting updated with applied index only after applyTransaction is called. ApplyTransaction is not invoked for every log transaction in Ratis. So, its better to rely on getLastAppliedTermIndex() rather than the buffer for the latest applied index.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r559326145", "createdAt": "2021-01-18T05:35:14Z", "author": {"login": "bshashikant"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMStateMachine.java", "diffHunk": "@@ -89,4 +119,30 @@ private Message process(final SCMRatisRequest request)\n     }\n   }\n \n+  @Override\n+  public long takeSnapshot() throws IOException {\n+    long startTime = Time.monotonicNow();\n+    TermIndex lastTermIndex = getLastAppliedTermIndex();\n+    long lastAppliedIndex = lastTermIndex.getIndex();\n+    SCMTransactionInfo lastAppliedTrxInfo =\n+        SCMTransactionInfo.fromTermIndex(lastTermIndex);\n+    if (transactionBuffer.getLatestTrxInfo()\n+        .compareTo(lastAppliedTrxInfo) < 0) {\n+      transactionBuffer.updateLatestTrxInfo(\n+          SCMTransactionInfo.builder()\n+              .setCurrentTerm(lastTermIndex.getTerm())\n+              .setTransactionIndex(lastTermIndex.getIndex())\n+              .build());\n+      transactionBuffer.setLatestSnapshot(\n+          transactionBuffer.getLatestTrxInfo().toSnapshotInfo());\n+    } else {\n+      lastAppliedIndex =\n+          transactionBuffer.getLatestTrxInfo().getTransactionIndex();\n+    }\n+\n+    transactionBuffer.flush();\n+    LOG.info(\"Current Snapshot Index {}, takeSnapshot took {} ms\",\n+        getLastAppliedTermIndex(), Time.monotonicNow() - startTime);\n+    return lastAppliedIndex;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODE3ODY1OQ=="}, "originalCommit": {"oid": "865bcb18cb5e0dd25f73a34f4d62e70950975a20"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxNDE0NjA1OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelineManagerV2Impl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMDowODowOVrOIUUvYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQyMTo0Nzo1OFrOIUu20A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODE4MjI0Mg==", "bodyText": "unintended change??", "url": "https://github.com/apache/ozone/pull/1725#discussion_r558182242", "createdAt": "2021-01-15T10:08:09Z", "author": {"login": "bshashikant"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelineManagerV2Impl.java", "diffHunk": "@@ -114,12 +114,14 @@ private PipelineManagerV2Impl(ConfigurationSource conf,\n   public static PipelineManagerV2Impl newPipelineManager(\n       ConfigurationSource conf, SCMHAManager scmhaManager,\n       NodeManager nodeManager, Table<PipelineID, Pipeline> pipelineStore,\n-      EventPublisher eventPublisher) throws IOException {\n+      EventPublisher eventPublisher)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "865bcb18cb5e0dd25f73a34f4d62e70950975a20"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODYxMDEyOA==", "bodyText": "Yes :) will undo it.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r558610128", "createdAt": "2021-01-15T21:47:58Z", "author": {"login": "amaliujia"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelineManagerV2Impl.java", "diffHunk": "@@ -114,12 +114,14 @@ private PipelineManagerV2Impl(ConfigurationSource conf,\n   public static PipelineManagerV2Impl newPipelineManager(\n       ConfigurationSource conf, SCMHAManager scmhaManager,\n       NodeManager nodeManager, Table<PipelineID, Pipeline> pipelineStore,\n-      EventPublisher eventPublisher) throws IOException {\n+      EventPublisher eventPublisher)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODE4MjI0Mg=="}, "originalCommit": {"oid": "865bcb18cb5e0dd25f73a34f4d62e70950975a20"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyMTcyMjI5OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMStateMachine.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQwNTozNzoyNFrOIVamJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQyMToxOToxN1rOIV3aHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTMyNjc1OA==", "bodyText": "Can we rename applyTransaction to applyTansactionSerial as this is a serialized operation anyways?", "url": "https://github.com/apache/ozone/pull/1725#discussion_r559326758", "createdAt": "2021-01-18T05:37:24Z", "author": {"login": "bshashikant"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMStateMachine.java", "diffHunk": "@@ -26,27 +26,55 @@\n import java.util.concurrent.CompletableFuture;\n \n import com.google.protobuf.InvalidProtocolBufferException;\n+import org.apache.hadoop.hdds.scm.exceptions.SCMException;\n+import org.apache.hadoop.util.Time;\n import org.apache.ratis.protocol.Message;\n+import org.apache.ratis.server.protocol.TermIndex;\n+import org.apache.ratis.statemachine.SnapshotInfo;\n import org.apache.ratis.statemachine.TransactionContext;\n import org.apache.ratis.statemachine.impl.BaseStateMachine;\n \n import org.apache.hadoop.hdds.protocol.proto.SCMRatisProtocol.RequestType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.hadoop.hdds.scm.exceptions.SCMException.ResultCodes.SCM_NOT_INITIALIZED;\n \n /**\n  * TODO.\n  */\n public class SCMStateMachine extends BaseStateMachine {\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(BaseStateMachine.class);\n \n   private final Map<RequestType, Object> handlers;\n+  private final SCMDBTransactionBuffer transactionBuffer;\n \n-  public SCMStateMachine() {\n+  public SCMStateMachine(SCMDBTransactionBuffer buffer) throws SCMException {\n     this.handlers = new EnumMap<>(RequestType.class);\n+    this.transactionBuffer = buffer;\n+    SCMTransactionInfo latestTrxInfo = buffer.getLatestTrxInfo();\n+    if (!latestTrxInfo.isInitialized()) {\n+      if (!updateLastAppliedTermIndex(latestTrxInfo.getTerm(),\n+          latestTrxInfo.getTransactionIndex())) {\n+        throw new SCMException(\n+            String.format(\"Failed to update LastAppliedTermIndex \" +\n+                    \"in StateMachine to term:{} index:{}\",\n+                latestTrxInfo.getTerm(), latestTrxInfo.getTransactionIndex()\n+            ), SCM_NOT_INITIALIZED);\n+      }\n+    }\n   }\n \n   public void registerHandler(RequestType type, Object handler) {\n     handlers.put(type, handler);\n   }\n \n+  @Override\n+  public SnapshotInfo getLatestSnapshot() {\n+    return transactionBuffer.getLatestSnapshot();\n+  }\n+\n   @Override\n   public CompletableFuture<Message> applyTransaction(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ad0a9899110a392f600c0f8651a832576f6fa5b"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTc5ODgxNQ==", "bodyText": "I created https://issues.apache.org/jira/browse/HDDS-4684.\nAfter check the Ratis state machine interface, I can see two functions:\n  /**\n   * Called for transactions that have been committed to the RAFT log. This step is called\n   * sequentially in strict serial order that the transactions have been committed in the log.\n   * The SM is expected to do only necessary work, and leave the actual apply operation to the\n   * applyTransaction calls that can happen concurrently.\n   * @param trx the transaction state including the log entry that has been committed to a quorum\n   *            of the raft peers\n   * @return The Transaction context.\n   */\n  TransactionContext applyTransactionSerial(TransactionContext trx);\n\n  /**\n   * Apply a committed log entry to the state machine. This method can be called concurrently with\n   * the other calls, and there is no guarantee that the calls will be ordered according to the\n   * log commit order.\n   * @param trx the transaction state including the log entry that has been committed to a quorum\n   *            of the raft peers\n   */\n  CompletableFuture<Message> applyTransaction(TransactionContext trx);\n\nSo there is no API as the following\n  Message applyTransactionSerial(TransactionContext trx);\n\nBasically a function to apply transaction in strict serial order where it returns a Message.\nI am planning to send an email to Ratis community to discuss the intention of only having one applyTransaction that returns Message (CompletableFuture) but can be called concurrently.\nWe can address this API change in HDDS-4684.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r559798815", "createdAt": "2021-01-18T21:19:17Z", "author": {"login": "amaliujia"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMStateMachine.java", "diffHunk": "@@ -26,27 +26,55 @@\n import java.util.concurrent.CompletableFuture;\n \n import com.google.protobuf.InvalidProtocolBufferException;\n+import org.apache.hadoop.hdds.scm.exceptions.SCMException;\n+import org.apache.hadoop.util.Time;\n import org.apache.ratis.protocol.Message;\n+import org.apache.ratis.server.protocol.TermIndex;\n+import org.apache.ratis.statemachine.SnapshotInfo;\n import org.apache.ratis.statemachine.TransactionContext;\n import org.apache.ratis.statemachine.impl.BaseStateMachine;\n \n import org.apache.hadoop.hdds.protocol.proto.SCMRatisProtocol.RequestType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.hadoop.hdds.scm.exceptions.SCMException.ResultCodes.SCM_NOT_INITIALIZED;\n \n /**\n  * TODO.\n  */\n public class SCMStateMachine extends BaseStateMachine {\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(BaseStateMachine.class);\n \n   private final Map<RequestType, Object> handlers;\n+  private final SCMDBTransactionBuffer transactionBuffer;\n \n-  public SCMStateMachine() {\n+  public SCMStateMachine(SCMDBTransactionBuffer buffer) throws SCMException {\n     this.handlers = new EnumMap<>(RequestType.class);\n+    this.transactionBuffer = buffer;\n+    SCMTransactionInfo latestTrxInfo = buffer.getLatestTrxInfo();\n+    if (!latestTrxInfo.isInitialized()) {\n+      if (!updateLastAppliedTermIndex(latestTrxInfo.getTerm(),\n+          latestTrxInfo.getTransactionIndex())) {\n+        throw new SCMException(\n+            String.format(\"Failed to update LastAppliedTermIndex \" +\n+                    \"in StateMachine to term:{} index:{}\",\n+                latestTrxInfo.getTerm(), latestTrxInfo.getTransactionIndex()\n+            ), SCM_NOT_INITIALIZED);\n+      }\n+    }\n   }\n \n   public void registerHandler(RequestType type, Object handler) {\n     handlers.put(type, handler);\n   }\n \n+  @Override\n+  public SnapshotInfo getLatestSnapshot() {\n+    return transactionBuffer.getLatestSnapshot();\n+  }\n+\n   @Override\n   public CompletableFuture<Message> applyTransaction(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTMyNjc1OA=="}, "originalCommit": {"oid": "1ad0a9899110a392f600c0f8651a832576f6fa5b"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyMTk2NTAzOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/container/ContainerManagerImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQwNzozMTo0MVrOIVcv9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQyMToyMTo0NFrOIV3dGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTM2MjAzNg==", "bodyText": "Please add an annotation of @VisibleForTesting.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r559362036", "createdAt": "2021-01-18T07:31:41Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/container/ContainerManagerImpl.java", "diffHunk": "@@ -397,4 +396,8 @@ public void close() throws IOException {\n   protected ContainerStateManagerV2 getContainerStateManager() {\n     return containerStateManager;\n   }\n+\n+  public SCMHAManager getSCMHAManager() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ad0a9899110a392f600c0f8651a832576f6fa5b"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTc5OTU3OQ==", "bodyText": "Done", "url": "https://github.com/apache/ozone/pull/1725#discussion_r559799579", "createdAt": "2021-01-18T21:21:44Z", "author": {"login": "amaliujia"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/container/ContainerManagerImpl.java", "diffHunk": "@@ -397,4 +396,8 @@ public void close() throws IOException {\n   protected ContainerStateManagerV2 getContainerStateManager() {\n     return containerStateManager;\n   }\n+\n+  public SCMHAManager getSCMHAManager() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTM2MjAzNg=="}, "originalCommit": {"oid": "1ad0a9899110a392f600c0f8651a832576f6fa5b"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4473, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}