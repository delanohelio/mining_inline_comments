{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzMjM3MzM5", "number": 1600, "title": "HDDS-4475.Extend DatanodeChunkGenerator to write all on all pipelines\u2026", "bodyText": "What changes were proposed in this pull request?\nCurrently, DatanodeChunkGenerator takes a single pipeline as a parameter. This will allow passing a list of pipelines as comma-separated by their pipeline ids and the load will be generated on the dns of the provided pipelines.\nWhat is the link to the Apache JIRA\nhttps://issues.apache.org/jira/browse/HDDS-4475\nHow was this patch tested?\nTested on docker.", "createdAt": "2020-11-18T14:46:45Z", "url": "https://github.com/apache/ozone/pull/1600", "merged": true, "mergeCommit": {"oid": "bc9d4d1e820343bdff92d51dacc46d9f3b201e76"}, "closed": true, "closedAt": "2021-01-12T08:35:12Z", "author": {"login": "sadanand48"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABddvP3BAH2gAyNTIzMjM3MzM5OjYwM2UzZThlNTBjZDE1Yjg0ODljMzA3N2VjZmJhZDJlYmQ0MjQ0ZWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdvW7VoAFqTU2NjAzNzQxMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "603e3e8e50cd15b8489c3077ecfbad2ebd4244ef", "author": {"user": {"login": "sadanand48", "name": "Sadanand Shenoy"}}, "url": "https://github.com/apache/ozone/commit/603e3e8e50cd15b8489c3077ecfbad2ebd4244ef", "committedDate": "2020-11-18T14:43:54Z", "message": "HDDS-4475.Extend DatanodeChunkGenerator to write all on all pipelines of a set of dns"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8224b05dea7e8f53ece0bbd03275c241d155ebe", "author": {"user": {"login": "sadanand48", "name": "Sadanand Shenoy"}}, "url": "https://github.com/apache/ozone/commit/e8224b05dea7e8f53ece0bbd03275c241d155ebe", "committedDate": "2020-11-30T14:02:28Z", "message": "Addressed review comments. added datanodes argument"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxMDAzNjE3", "url": "https://github.com/apache/ozone/pull/1600#pullrequestreview-541003617", "createdAt": "2020-11-30T15:14:06Z", "commit": {"oid": "e8224b05dea7e8f53ece0bbd03275c241d155ebe"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b0870365d8a1fa02ba4adb8abaf05a1d50d80b2", "author": {"user": {"login": "sadanand48", "name": "Sadanand Shenoy"}}, "url": "https://github.com/apache/ozone/commit/8b0870365d8a1fa02ba4adb8abaf05a1d50d80b2", "committedDate": "2020-12-23T21:04:07Z", "message": "addressed comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e084ee6c4e1bf32a0ff03a4fb18ffcbd2b3eabf", "author": {"user": {"login": "sadanand48", "name": "Sadanand Shenoy"}}, "url": "https://github.com/apache/ozone/commit/9e084ee6c4e1bf32a0ff03a4fb18ffcbd2b3eabf", "committedDate": "2021-01-07T12:55:40Z", "message": "addressed comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY1NDc3ODY0", "url": "https://github.com/apache/ozone/pull/1600#pullrequestreview-565477864", "createdAt": "2021-01-11T15:43:20Z", "commit": {"oid": "9e084ee6c4e1bf32a0ff03a4fb18ffcbd2b3eabf"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxNTo0MzoyMFrOIRa5iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxNTo0NjoyOVrOIRbCvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTEzNzQxNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          \"Coudln't find the any/the selected pipeline\");\n          \n          \n            \n                          \"Couldn't find the any/the selected pipeline\");", "url": "https://github.com/apache/ozone/pull/1600#discussion_r555137416", "createdAt": "2021-01-11T15:43:20Z", "author": {"login": "elek"}, "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/freon/DatanodeChunkGenerator.java", "diffHunk": "@@ -75,70 +82,120 @@\n       description = \"Pipeline to use. By default the first RATIS/THREE \"\n           + \"pipeline will be used.\",\n       defaultValue = \"\")\n-  private String pipelineId;\n+  private String pipelineIds;\n \n-  private XceiverClientSpi xceiverClientSpi;\n+  @Option(names = {\"-d\", \"--datanodes\"},\n+      description = \"Datanodes to use. \",\n+      defaultValue = \"\")\n+  private String datanodes;\n+\n+  private XceiverClientManager xceiverClientManager;\n+  private List<XceiverClientSpi> xceiverClients;\n \n   private Timer timer;\n \n   private ByteString dataToWrite;\n   private ChecksumData checksumProtobuf;\n \n+\n   @Override\n   public Void call() throws Exception {\n \n-    init();\n \n     OzoneConfiguration ozoneConf = createOzoneConfiguration();\n+    xceiverClientManager =\n+        new XceiverClientManager(ozoneConf);\n     if (OzoneSecurityUtil.isSecurityEnabled(ozoneConf)) {\n       throw new IllegalArgumentException(\n           \"Datanode chunk generator is not supported in secure environment\");\n     }\n \n-    try (StorageContainerLocationProtocol scmLocationClient =\n-        createStorageContainerLocationClient(ozoneConf)) {\n-      List<Pipeline> pipelines = scmLocationClient.listPipelines();\n-      Pipeline pipeline;\n-      if (pipelineId != null && pipelineId.length() > 0) {\n-        pipeline = pipelines.stream()\n-            .filter(p -> p.getId().toString().equals(pipelineId))\n-            .findFirst()\n-            .orElseThrow(() -> new IllegalArgumentException(\n-                \"Pipeline ID is defined, but there is no such pipeline: \"\n-                    + pipelineId));\n+    List<String> pipelinesFromCmd = Arrays.asList(pipelineIds.split(\",\"));\n \n+    List<String> datanodeHosts = Arrays.asList(this.datanodes.split(\",\"));\n+\n+    Set<Pipeline> pipelines;\n+\n+    try (StorageContainerLocationProtocol scmLocationClient =\n+               createStorageContainerLocationClient(ozoneConf)) {\n+      List<Pipeline> pipelinesFromSCM = scmLocationClient.listPipelines();\n+      Pipeline firstPipeline;\n+      init();\n+      if (!arePipelinesOrDatanodesProvided()) {\n+        //default behaviour if no arguments provided\n+        firstPipeline = pipelinesFromSCM.stream()\n+              .filter(p -> p.getFactor() == ReplicationFactor.THREE)\n+              .findFirst()\n+              .orElseThrow(() -> new IllegalArgumentException(\n+                  \"Pipeline ID is NOT defined, and no pipeline \" +\n+                      \"has been found with factor=THREE\"));\n+        XceiverClientSpi xceiverClientSpi = xceiverClientManager\n+            .acquireClient(firstPipeline);\n+        xceiverClients = new ArrayList<>();\n+        xceiverClients.add(xceiverClientSpi);\n+        LOG.info(\"Using pipeline {}\", firstPipeline.getId());\n+        runTest();\n       } else {\n-        pipeline = pipelines.stream()\n-            .filter(p -> p.getFactor() == ReplicationFactor.THREE)\n-            .findFirst()\n-            .orElseThrow(() -> new IllegalArgumentException(\n-                \"Pipeline ID is NOT defined, and no pipeline \" +\n-                    \"has been found with factor=THREE\"));\n-        LOG.info(\"Using pipeline {}\", pipeline.getId());\n+        xceiverClients = new ArrayList<>();\n+        pipelines = new HashSet<>();\n+        for(String pipelineId:pipelinesFromCmd){\n+          List<Pipeline> selectedPipelines =  pipelinesFromSCM.stream()\n+              .filter((p -> p.getId().toString()\n+                  .equals(\"PipelineID=\" + pipelineId)\n+                  || pipelineContainsDatanode(p, datanodeHosts)))\n+               .collect(Collectors.toList());\n+          pipelines.addAll(selectedPipelines);\n+        }\n+        for (Pipeline p:pipelines){\n+          LOG.info(\"Writing to pipeline: \" + p.getId());\n+          xceiverClients.add(xceiverClientManager.acquireClient(p));\n+        }\n+        if (pipelines.isEmpty()){\n+          throw new IllegalArgumentException(\n+              \"Coudln't find the any/the selected pipeline\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e084ee6c4e1bf32a0ff03a4fb18ffcbd2b3eabf"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTEzODAxMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    LOG.info(\"Using pipeline {}\", firstPipeline.getId());\n          \n      \n    \n    \n  \n\nYou don't need this line as you log the same information in the loop bellow.", "url": "https://github.com/apache/ozone/pull/1600#discussion_r555138010", "createdAt": "2021-01-11T15:44:07Z", "author": {"login": "elek"}, "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/freon/DatanodeChunkGenerator.java", "diffHunk": "@@ -75,70 +82,120 @@\n       description = \"Pipeline to use. By default the first RATIS/THREE \"\n           + \"pipeline will be used.\",\n       defaultValue = \"\")\n-  private String pipelineId;\n+  private String pipelineIds;\n \n-  private XceiverClientSpi xceiverClientSpi;\n+  @Option(names = {\"-d\", \"--datanodes\"},\n+      description = \"Datanodes to use. \",\n+      defaultValue = \"\")\n+  private String datanodes;\n+\n+  private XceiverClientManager xceiverClientManager;\n+  private List<XceiverClientSpi> xceiverClients;\n \n   private Timer timer;\n \n   private ByteString dataToWrite;\n   private ChecksumData checksumProtobuf;\n \n+\n   @Override\n   public Void call() throws Exception {\n \n-    init();\n \n     OzoneConfiguration ozoneConf = createOzoneConfiguration();\n+    xceiverClientManager =\n+        new XceiverClientManager(ozoneConf);\n     if (OzoneSecurityUtil.isSecurityEnabled(ozoneConf)) {\n       throw new IllegalArgumentException(\n           \"Datanode chunk generator is not supported in secure environment\");\n     }\n \n-    try (StorageContainerLocationProtocol scmLocationClient =\n-        createStorageContainerLocationClient(ozoneConf)) {\n-      List<Pipeline> pipelines = scmLocationClient.listPipelines();\n-      Pipeline pipeline;\n-      if (pipelineId != null && pipelineId.length() > 0) {\n-        pipeline = pipelines.stream()\n-            .filter(p -> p.getId().toString().equals(pipelineId))\n-            .findFirst()\n-            .orElseThrow(() -> new IllegalArgumentException(\n-                \"Pipeline ID is defined, but there is no such pipeline: \"\n-                    + pipelineId));\n+    List<String> pipelinesFromCmd = Arrays.asList(pipelineIds.split(\",\"));\n \n+    List<String> datanodeHosts = Arrays.asList(this.datanodes.split(\",\"));\n+\n+    Set<Pipeline> pipelines;\n+\n+    try (StorageContainerLocationProtocol scmLocationClient =\n+               createStorageContainerLocationClient(ozoneConf)) {\n+      List<Pipeline> pipelinesFromSCM = scmLocationClient.listPipelines();\n+      Pipeline firstPipeline;\n+      init();\n+      if (!arePipelinesOrDatanodesProvided()) {\n+        //default behaviour if no arguments provided\n+        firstPipeline = pipelinesFromSCM.stream()\n+              .filter(p -> p.getFactor() == ReplicationFactor.THREE)\n+              .findFirst()\n+              .orElseThrow(() -> new IllegalArgumentException(\n+                  \"Pipeline ID is NOT defined, and no pipeline \" +\n+                      \"has been found with factor=THREE\"));\n+        XceiverClientSpi xceiverClientSpi = xceiverClientManager\n+            .acquireClient(firstPipeline);\n+        xceiverClients = new ArrayList<>();\n+        xceiverClients.add(xceiverClientSpi);\n+        LOG.info(\"Using pipeline {}\", firstPipeline.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e084ee6c4e1bf32a0ff03a4fb18ffcbd2b3eabf"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTEzOTc3NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  description = \"Datanodes to use. \",\n          \n          \n            \n                  description = \"Datanodes to use. Test will write to all the existing pipelines which this datanode is member of.\",", "url": "https://github.com/apache/ozone/pull/1600#discussion_r555139775", "createdAt": "2021-01-11T15:46:29Z", "author": {"login": "elek"}, "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/freon/DatanodeChunkGenerator.java", "diffHunk": "@@ -75,70 +82,120 @@\n       description = \"Pipeline to use. By default the first RATIS/THREE \"\n           + \"pipeline will be used.\",\n       defaultValue = \"\")\n-  private String pipelineId;\n+  private String pipelineIds;\n \n-  private XceiverClientSpi xceiverClientSpi;\n+  @Option(names = {\"-d\", \"--datanodes\"},\n+      description = \"Datanodes to use. \",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e084ee6c4e1bf32a0ff03a4fb18ffcbd2b3eabf"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a0d7970269d8300f86f11ee9dd318411b1482e5", "author": {"user": {"login": "sadanand48", "name": "Sadanand Shenoy"}}, "url": "https://github.com/apache/ozone/commit/8a0d7970269d8300f86f11ee9dd318411b1482e5", "committedDate": "2021-01-12T04:58:42Z", "message": "fixed typos & addressed comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY2MDM3NDEx", "url": "https://github.com/apache/ozone/pull/1600#pullrequestreview-566037411", "createdAt": "2021-01-12T08:34:24Z", "commit": {"oid": "8a0d7970269d8300f86f11ee9dd318411b1482e5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2312, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}