{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwODA5MDQ5", "number": 1706, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNDo0NjoyMVrOFGvkEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzoyNTo1NVrOFHDKzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNjE1MDU5OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/client/rpc/TestOzoneRpcClientAbstract.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNDo0NjoyMVrOIH5Atg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNDo0NjoyMVrOIH5Atg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE0NTAxNA==", "bodyText": "countException is not actually needed, we could add fail() after writeKey and ensure this exception should be happened.\n try {\n      writeKey(bucket, key3, ONE, value, value.length());\n      Assert.fail(\"Write key should be failed\")\n    } catch (IOException ex) {", "url": "https://github.com/apache/ozone/pull/1706#discussion_r545145014", "createdAt": "2020-12-17T14:46:21Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/client/rpc/TestOzoneRpcClientAbstract.java", "diffHunk": "@@ -932,6 +932,50 @@ public void testVolumeUsedNamespace() throws IOException {\n     Assert.assertEquals(0L, volume.getUsedNamespace());\n   }\n \n+  @Test\n+  public void testBucketUsedNamespace() throws IOException {\n+    String volumeName = UUID.randomUUID().toString();\n+    String bucketName = UUID.randomUUID().toString();\n+    String key1 = UUID.randomUUID().toString();\n+    String key2 = UUID.randomUUID().toString();\n+    String key3 = UUID.randomUUID().toString();\n+    OzoneVolume volume = null;\n+    OzoneBucket bucket = null;\n+\n+    String value = \"sample value\";\n+    int countException = 0;\n+\n+    store.createVolume(volumeName);\n+    volume = store.getVolume(volumeName);\n+    volume.createBucket(bucketName);\n+    bucket = volume.getBucket(bucketName);\n+    bucket.setQuota(OzoneQuota.parseQuota(Long.MAX_VALUE + \" Bytes\", 2));\n+\n+    writeKey(bucket, key1, ONE, value, value.length());\n+    Assert.assertEquals(1L,\n+        store.getVolume(volumeName).getBucket(bucketName).getUsedNamespace());\n+\n+    writeKey(bucket, key2, ONE, value, value.length());\n+    Assert.assertEquals(2L,\n+        store.getVolume(volumeName).getBucket(bucketName).getUsedNamespace());\n+\n+    try {\n+      writeKey(bucket, key3, ONE, value, value.length());\n+    } catch (IOException ex) {\n+      countException++;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926e30ec6b98747c39160fed547ab60cb520c54d"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNjE1MzAyOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/client/rpc/TestOzoneRpcClientAbstract.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNDo0Njo0OVrOIH5CKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNDo0Njo0OVrOIH5CKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE0NTM4Nw==", "bodyText": "This comment should be updated", "url": "https://github.com/apache/ozone/pull/1706#discussion_r545145387", "createdAt": "2020-12-17T14:46:49Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/client/rpc/TestOzoneRpcClientAbstract.java", "diffHunk": "@@ -932,6 +932,50 @@ public void testVolumeUsedNamespace() throws IOException {\n     Assert.assertEquals(0L, volume.getUsedNamespace());\n   }\n \n+  @Test\n+  public void testBucketUsedNamespace() throws IOException {\n+    String volumeName = UUID.randomUUID().toString();\n+    String bucketName = UUID.randomUUID().toString();\n+    String key1 = UUID.randomUUID().toString();\n+    String key2 = UUID.randomUUID().toString();\n+    String key3 = UUID.randomUUID().toString();\n+    OzoneVolume volume = null;\n+    OzoneBucket bucket = null;\n+\n+    String value = \"sample value\";\n+    int countException = 0;\n+\n+    store.createVolume(volumeName);\n+    volume = store.getVolume(volumeName);\n+    volume.createBucket(bucketName);\n+    bucket = volume.getBucket(bucketName);\n+    bucket.setQuota(OzoneQuota.parseQuota(Long.MAX_VALUE + \" Bytes\", 2));\n+\n+    writeKey(bucket, key1, ONE, value, value.length());\n+    Assert.assertEquals(1L,\n+        store.getVolume(volumeName).getBucket(bucketName).getUsedNamespace());\n+\n+    writeKey(bucket, key2, ONE, value, value.length());\n+    Assert.assertEquals(2L,\n+        store.getVolume(volumeName).getBucket(bucketName).getUsedNamespace());\n+\n+    try {\n+      writeKey(bucket, key3, ONE, value, value.length());\n+    } catch (IOException ex) {\n+      countException++;\n+      GenericTestUtils.assertExceptionContains(\"QUOTA_EXCEEDED\", ex);\n+    }\n+\n+    // Write failed, bucket usedBytes should remain as 1\n+    Assert.assertEquals(2L,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926e30ec6b98747c39160fed547ab60cb520c54d"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNjE3NjY2OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileCreateRequest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNDo1MToxNFrOIH5P5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzoyMTowOVrOIIM0BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE0ODkwMA==", "bodyText": "We should move checkBucketQuotaInNamespace check after checkBucketQuotaInBytes. Here we add cache entry before quota check, this will lead the dirty data.", "url": "https://github.com/apache/ozone/pull/1706#discussion_r545148900", "createdAt": "2020-12-17T14:51:14Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileCreateRequest.java", "diffHunk": "@@ -299,6 +299,10 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n \n       omBucketInfo.incrUsedBytes(preAllocatedSpace);\n \n+      // Update namespace quota\n+      checkBucketQuotaInNamespace(omBucketInfo, 1L);\n+      omBucketInfo.incrUsedNamespace(1L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926e30ec6b98747c39160fed547ab60cb520c54d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ2OTQ0NQ==", "bodyText": "O I see.", "url": "https://github.com/apache/ozone/pull/1706#discussion_r545469445", "createdAt": "2020-12-17T23:21:09Z", "author": {"login": "amaliujia"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileCreateRequest.java", "diffHunk": "@@ -299,6 +299,10 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n \n       omBucketInfo.incrUsedBytes(preAllocatedSpace);\n \n+      // Update namespace quota\n+      checkBucketQuotaInNamespace(omBucketInfo, 1L);\n+      omBucketInfo.incrUsedNamespace(1L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE0ODkwMA=="}, "originalCommit": {"oid": "926e30ec6b98747c39160fed547ab60cb520c54d"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNjE4Mjc1OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyCreateRequest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNDo1MjoxOVrOIH5TbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNDo1MjoxOVrOIH5TbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE0OTgwNQ==", "bodyText": "Same comment like above.", "url": "https://github.com/apache/ozone/pull/1706#discussion_r545149805", "createdAt": "2020-12-17T14:52:19Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyCreateRequest.java", "diffHunk": "@@ -309,6 +309,10 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n \n       omBucketInfo.incrUsedBytes(preAllocatedSpace);\n \n+      // Update namespace quota\n+      checkBucketQuotaInNamespace(omBucketInfo, 1L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926e30ec6b98747c39160fed547ab60cb520c54d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODc1Njk0OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/client/rpc/TestOzoneRpcClientAbstract.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMjozMjowN1rOIIQu2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMjozMjowN1rOIIQu2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTUzMzY1Nw==", "bodyText": "Nit: usedBytes -> usedNamespace", "url": "https://github.com/apache/ozone/pull/1706#discussion_r545533657", "createdAt": "2020-12-18T02:32:07Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/client/rpc/TestOzoneRpcClientAbstract.java", "diffHunk": "@@ -961,19 +960,18 @@ public void testBucketUsedNamespace() throws IOException {\n \n     try {\n       writeKey(bucket, key3, ONE, value, value.length());\n+      Assert.fail(\"Write key should be failed\");\n     } catch (IOException ex) {\n-      countException++;\n       GenericTestUtils.assertExceptionContains(\"QUOTA_EXCEEDED\", ex);\n     }\n \n-    // Write failed, bucket usedBytes should remain as 1\n+    // Write failed, bucket usedBytes should remain as 2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a57c74b558aa3905849302312c14d03bc073c816"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyOTM1MTg5OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyCreateRequest.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzoyMTo1MFrOIIVzLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxODozMDoyM1rOIKE8bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYxNjY4Ng==", "bodyText": "If the key is created successfully, but write failed before the commit key (for example, client crashes), then the key should not be counted.\nWe'd better  incrUsedNamespace(-1L), when we clean up this key in the background.", "url": "https://github.com/apache/ozone/pull/1706#discussion_r545616686", "createdAt": "2020-12-18T07:21:50Z", "author": {"login": "captainzmc"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyCreateRequest.java", "diffHunk": "@@ -308,6 +309,8 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n           new CacheValue<>(Optional.of(omKeyInfo), trxnLogIndex));\n \n       omBucketInfo.incrUsedBytes(preAllocatedSpace);\n+      // Update namespace quota\n+      omBucketInfo.incrUsedNamespace(1L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10762abbbb48fe396c17f6ab7bf2cda728e5e6f6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE3NDk3OQ==", "bodyText": "I see.\nDo you know where is the place that does such failed key cleanup?", "url": "https://github.com/apache/ozone/pull/1706#discussion_r546174979", "createdAt": "2020-12-19T02:03:14Z", "author": {"login": "amaliujia"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyCreateRequest.java", "diffHunk": "@@ -308,6 +309,8 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n           new CacheValue<>(Optional.of(omKeyInfo), trxnLogIndex));\n \n       omBucketInfo.incrUsedBytes(preAllocatedSpace);\n+      // Update namespace quota\n+      omBucketInfo.incrUsedNamespace(1L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYxNjY4Ng=="}, "originalCommit": {"oid": "10762abbbb48fe396c17f6ab7bf2cda728e5e6f6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk3NTE5OQ==", "bodyText": "@captainzmc  do you have an idea how does the background cleanup happen on keys that failed to commit?", "url": "https://github.com/apache/ozone/pull/1706#discussion_r546975199", "createdAt": "2020-12-21T23:06:03Z", "author": {"login": "amaliujia"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyCreateRequest.java", "diffHunk": "@@ -308,6 +309,8 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n           new CacheValue<>(Optional.of(omKeyInfo), trxnLogIndex));\n \n       omBucketInfo.incrUsedBytes(preAllocatedSpace);\n+      // Update namespace quota\n+      omBucketInfo.incrUsedNamespace(1L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYxNjY4Ng=="}, "originalCommit": {"oid": "10762abbbb48fe396c17f6ab7bf2cda728e5e6f6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE0ODU1MA==", "bodyText": "There is a PR #1511 currently cleaning open key. I think we can use this. Update quota during cleanup.\nBut this PR is not merged yet, and we do not need to block here. We can fix this after #1511 is merged.", "url": "https://github.com/apache/ozone/pull/1706#discussion_r547148550", "createdAt": "2020-12-22T08:53:05Z", "author": {"login": "captainzmc"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyCreateRequest.java", "diffHunk": "@@ -308,6 +309,8 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n           new CacheValue<>(Optional.of(omKeyInfo), trxnLogIndex));\n \n       omBucketInfo.incrUsedBytes(preAllocatedSpace);\n+      // Update namespace quota\n+      omBucketInfo.incrUsedNamespace(1L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYxNjY4Ng=="}, "originalCommit": {"oid": "10762abbbb48fe396c17f6ab7bf2cda728e5e6f6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQzNzY3OQ==", "bodyText": "Got it. Have filed a jira to track it: https://issues.apache.org/jira/browse/HDDS-4620", "url": "https://github.com/apache/ozone/pull/1706#discussion_r547437679", "createdAt": "2020-12-22T18:30:23Z", "author": {"login": "amaliujia"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyCreateRequest.java", "diffHunk": "@@ -308,6 +309,8 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n           new CacheValue<>(Optional.of(omKeyInfo), trxnLogIndex));\n \n       omBucketInfo.incrUsedBytes(preAllocatedSpace);\n+      // Update namespace quota\n+      omBucketInfo.incrUsedNamespace(1L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYxNjY4Ng=="}, "originalCommit": {"oid": "10762abbbb48fe396c17f6ab7bf2cda728e5e6f6"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyOTM2MjY4OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzoyNTo1NVrOIIV5IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxODozMDo0MlrOIKE83Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYxODIwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (omBucketInfo.getQuotaInNamespace() != OzoneConsts.QUOTA_RESET) {\n          \n          \n            \n                if (omBucketInfo.getQuotaInNamespace() > OzoneConsts.QUOTA_RESET) {\n          \n      \n    \n    \n  \n\nThis unity has been changed: #1677 (comment)", "url": "https://github.com/apache/ozone/pull/1706#discussion_r545618208", "createdAt": "2020-12-18T07:25:55Z", "author": {"login": "captainzmc"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyRequest.java", "diffHunk": "@@ -589,6 +589,25 @@ protected void checkBucketQuotaInBytes(OmBucketInfo omBucketInfo,\n     }\n   }\n \n+  /**\n+   * Check namespace quota.\n+   */\n+  protected void checkBucketQuotaInNamespace(OmBucketInfo omBucketInfo,\n+      long allocatedNamespace) throws IOException {\n+    if (omBucketInfo.getQuotaInNamespace() != OzoneConsts.QUOTA_RESET) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13f3daa5d8a566a60823884ea5c8b29cdc231593"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQzNzc4OQ==", "bodyText": "Done!", "url": "https://github.com/apache/ozone/pull/1706#discussion_r547437789", "createdAt": "2020-12-22T18:30:42Z", "author": {"login": "amaliujia"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyRequest.java", "diffHunk": "@@ -589,6 +589,25 @@ protected void checkBucketQuotaInBytes(OmBucketInfo omBucketInfo,\n     }\n   }\n \n+  /**\n+   * Check namespace quota.\n+   */\n+  protected void checkBucketQuotaInNamespace(OmBucketInfo omBucketInfo,\n+      long allocatedNamespace) throws IOException {\n+    if (omBucketInfo.getQuotaInNamespace() != OzoneConsts.QUOTA_RESET) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYxODIwOA=="}, "originalCommit": {"oid": "13f3daa5d8a566a60823884ea5c8b29cdc231593"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4639, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}