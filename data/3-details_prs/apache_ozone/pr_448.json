{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzMzkzOTAz", "number": 448, "title": "HDDS-2870. Handle replay of KeyCreate requests.", "bodyText": "What changes were proposed in this pull request?\nTo ensure that key creation operation is idempotent, compare the transactionID with the objectID and updateID to make sure that the transaction is not a replay. If the transactionID <= updateID, then it implies that the transaction is a replay and hence it should be skipped.\nOMKeyCreateRequest and OMFileCreateRequest are made idempotent in this Jira.\nhttps://issues.apache.org/jira/browse/HDDS-2870\nHow was this patch tested?\nUnit tests to verify replayed transactions return expected response.", "createdAt": "2020-01-16T00:05:35Z", "url": "https://github.com/apache/ozone/pull/448", "merged": true, "mergeCommit": {"oid": "66abf65c18fdf2577cd3db055a09263c47b2ec9d"}, "closed": true, "closedAt": "2020-01-28T21:20:19Z", "author": {"login": "hanishakoneru"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb7GsJtgFqTM0NDM1Mzg5Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb-3Z9ZAFqTM0OTY4MDk3Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0MzUzODky", "url": "https://github.com/apache/ozone/pull/448#pullrequestreview-344353892", "createdAt": "2020-01-17T04:04:07Z", "commit": {"oid": "21a5e17655c5cd779609a02996edc48a003d6601"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNDowNDowN1rOFeuUww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNDowNDowN1rOFeuUww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc2MDU3OQ==", "bodyText": "We can pass the dbKeyInfo to prepareKeyInfo, as for override keys we read from DB. As anyway to check whether it is replay or not we read from DB above we can use that.", "url": "https://github.com/apache/ozone/pull/448#discussion_r367760579", "createdAt": "2020-01-17T04:04:07Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileCreateRequest.java", "diffHunk": "@@ -254,29 +276,23 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       OmBucketInfo bucketInfo = omMetadataManager.getBucketTable().get(\n           omMetadataManager.getBucketKey(volumeName, bucketName));\n       encryptionInfo = getFileEncryptionInfo(ozoneManager, bucketInfo);\n-      omKeyInfo = prepareKeyInfo(omMetadataManager, keyArgs,\n-          omMetadataManager.getOzoneKey(volumeName, bucketName,\n-              keyName), keyArgs.getDataSize(), locations,\n-          encryptionInfo.orNull(), ozoneManager.getPrefixManager(),\n-          bucketInfo, transactionLogIndex);\n-\n-      omClientResponse =  prepareCreateKeyResponse(keyArgs, omKeyInfo,\n-          locations, encryptionInfo.orNull(), exception,\n-          createFileRequest.getClientID(), transactionLogIndex, volumeName,\n+      omKeyInfo = prepareKeyInfo(omMetadataManager, keyArgs, ozoneKey,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21a5e17655c5cd779609a02996edc48a003d6601"}, "originalPosition": 123}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0MzU1MDY0", "url": "https://github.com/apache/ozone/pull/448#pullrequestreview-344355064", "createdAt": "2020-01-17T04:10:44Z", "commit": {"oid": "21a5e17655c5cd779609a02996edc48a003d6601"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNDoxMDo0NFrOFeuYxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNDoxMDo0NFrOFeuYxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc2MTYwNA==", "bodyText": "We can pass the dbKeyInfo to prepareKeyInfo, as for override keys we read from DB. As anyway to check whether it is replay or not we read from DB above we can use that.", "url": "https://github.com/apache/ozone/pull/448#discussion_r367761604", "createdAt": "2020-01-17T04:10:44Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyCreateRequest.java", "diffHunk": "@@ -174,26 +182,40 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       // bucket encryptionInfo will be not set. If this assumption holds\n       // true, we can avoid get from bucket table.\n \n+      // Check if Key already exists\n+      String dbKeyName = omMetadataManager.getOzoneKey(volumeName, bucketName,\n+          keyName);\n+      OmKeyInfo dbKeyInfo = omMetadataManager.getKeyTable().get(dbKeyName);\n+      if (dbKeyInfo != null) {\n+        // Check if this transaction is a replay of ratis logs.\n+        if (isReplay(ozoneManager, dbKeyInfo.getUpdateID(),\n+            transactionLogIndex)) {\n+          // Replay implies the response has already been returned to\n+          // the client. So take no further action and return a dummy\n+          // OMClientResponse.\n+          LOG.debug(\"Replayed Transaction {} ignored. Request: {}\",\n+              transactionLogIndex, createKeyRequest);\n+          return new OMKeyCreateResponse(createReplayOMResponse(omResponse));\n+        }\n+      }\n+\n       OmBucketInfo bucketInfo = omMetadataManager.getBucketTable().get(\n               omMetadataManager.getBucketKey(volumeName, bucketName));\n \n       encryptionInfo = getFileEncryptionInfo(ozoneManager, bucketInfo);\n \n-      omKeyInfo = prepareKeyInfo(omMetadataManager, keyArgs,\n-          omMetadataManager.getOzoneKey(volumeName, bucketName, keyName),\n+      omKeyInfo = prepareKeyInfo(omMetadataManager, keyArgs, dbKeyName,\n           keyArgs.getDataSize(), locations, encryptionInfo.orNull(),\n           ozoneManager.getPrefixManager(), bucketInfo, transactionLogIndex);\n-      omClientResponse = prepareCreateKeyResponse(keyArgs, omKeyInfo,\n-          locations, encryptionInfo.orNull(), exception,\n+      omClientResponse = prepareCreateKeyResponse(omResponse, keyArgs,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21a5e17655c5cd779609a02996edc48a003d6601"}, "originalPosition": 96}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MjEyMjcx", "url": "https://github.com/apache/ozone/pull/448#pullrequestreview-348212271", "createdAt": "2020-01-24T20:41:27Z", "commit": {"oid": "9bf0ec6dd3795cd3a5ced9e9f6de1e9f387046bf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMDo0MToyN1rOFhp2Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMDo0MToyN1rOFhp2Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgzMjkyNw==", "bodyText": "We are adding blocks twice for the case when keyInfo != null, as once in prepareKeyInfo and here again.\nSo, can we move the creation of KeyInfo logic to prepareKeyInfo and use prepareCreateKeyResponse just to generate OmClientResponse.", "url": "https://github.com/apache/ozone/pull/448#discussion_r370832927", "createdAt": "2020-01-24T20:41:27Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyRequest.java", "diffHunk": "@@ -250,91 +249,113 @@ public EncryptedKeyVersion run() throws IOException {\n    * @return OMClientResponse\n    */\n   @SuppressWarnings(\"parameternumber\")\n-  protected OMClientResponse prepareCreateKeyResponse(@Nonnull KeyArgs keyArgs,\n+  protected OMClientResponse prepareCreateKeyResponse(\n+      @Nonnull OMResponse.Builder omResponse, @Nonnull KeyArgs keyArgs,\n       OmKeyInfo omKeyInfo, @Nonnull List<OmKeyLocationInfo> locations,\n-      FileEncryptionInfo encryptionInfo, @Nullable IOException exception,\n+      FileEncryptionInfo encryptionInfo,\n       long clientID, long transactionLogIndex, @Nonnull String volumeName,\n       @Nonnull String bucketName, @Nonnull String keyName,\n       @Nonnull OzoneManager ozoneManager, @Nonnull OMAction omAction,\n       @Nonnull PrefixManager prefixManager,\n       @Nullable OmBucketInfo omBucketInfo) {\n \n-    OMResponse.Builder omResponse = OMResponse.newBuilder()\n-        .setStatus(OzoneManagerProtocolProtos.Status.OK);\n     OMMetadataManager omMetadataManager = ozoneManager.getMetadataManager();\n-\n-    Map<String, String> auditMap = buildKeyArgsAuditMap(keyArgs);\n-\n     OMClientResponse omClientResponse = null;\n-    if (exception == null) {\n-      if (omKeyInfo == null) {\n-        // the key does not exist, create a new object, the new blocks are the\n-        // version 0\n-        omKeyInfo = createKeyInfo(keyArgs, locations, keyArgs.getFactor(),\n-            keyArgs.getType(), keyArgs.getDataSize(), encryptionInfo,\n-            prefixManager, omBucketInfo, transactionLogIndex);\n-      }\n+    IOException exception = null;\n \n-      long openVersion = omKeyInfo.getLatestVersionLocations().getVersion();\n+    Map<String, String> auditMap = buildKeyArgsAuditMap(keyArgs);\n \n-      // Append blocks\n-      try {\n-        omKeyInfo.appendNewBlocks(keyArgs.getKeyLocationsList().stream()\n-            .map(OmKeyLocationInfo::getFromProtobuf)\n-            .collect(Collectors.toList()), false);\n+    if (omKeyInfo == null) {\n+      // the key does not exist, create a new object, the new blocks are the\n+      // version 0\n+      omKeyInfo = createKeyInfo(keyArgs, locations, keyArgs.getFactor(),\n+          keyArgs.getType(), keyArgs.getDataSize(), encryptionInfo,\n+          prefixManager, omBucketInfo, transactionLogIndex);\n+    }\n \n-      } catch (IOException ex) {\n-        exception = ex;\n-      }\n+    long openVersion = omKeyInfo.getLatestVersionLocations().getVersion();\n \n-      if (exception != null) {\n-        LOG.error(\"{} failed for Key: {} in volume/bucket:{}/{}\",\n-            omAction.getAction(), keyName, bucketName, volumeName, exception);\n-        omClientResponse = createKeyErrorResponse(ozoneManager.getMetrics(),\n-            omAction, exception, omResponse);\n+    // Append blocks", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bf0ec6dd3795cd3a5ced9e9f6de1e9f387046bf"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MjEzNTAw", "url": "https://github.com/apache/ozone/pull/448#pullrequestreview-348213500", "createdAt": "2020-01-24T20:43:59Z", "commit": {"oid": "9bf0ec6dd3795cd3a5ced9e9f6de1e9f387046bf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMDo0Mzo1OVrOFhp5rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMDo0Mzo1OVrOFhp5rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgzMzgzOQ==", "bodyText": "NIT: public -> protected. (In Base class addToBatch is protected)", "url": "https://github.com/apache/ozone/pull/448#discussion_r370833839", "createdAt": "2020-01-24T20:43:59Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/key/OMKeyCreateResponse.java", "diffHunk": "@@ -38,26 +36,30 @@\n   private OmKeyInfo omKeyInfo;\n   private long openKeySessionID;\n \n-  public OMKeyCreateResponse(@Nullable OmKeyInfo omKeyInfo,\n-      long openKeySessionID, @Nonnull OMResponse omResponse) {\n+  public OMKeyCreateResponse(@Nonnull OMResponse omResponse,\n+      @Nonnull OmKeyInfo omKeyInfo, long openKeySessionID) {\n     super(omResponse);\n     this.omKeyInfo = omKeyInfo;\n     this.openKeySessionID = openKeySessionID;\n   }\n \n+  /**\n+   * For when the request is not successful or it is a replay transaction.\n+   * For a successful request, the other constructor should be used.\n+   */\n+  public OMKeyCreateResponse(@Nonnull OMResponse omResponse) {\n+    super(omResponse);\n+    checkStatusNotOK();\n+  }\n+\n   @Override\n   public void addToDBBatch(OMMetadataManager omMetadataManager,\n       BatchOperation batchOperation) throws IOException {\n \n-    // For OmResponse with failure, this should do nothing. This method is\n-    // not called in failure scenario in OM code.\n-    if (getOMResponse().getStatus() == OzoneManagerProtocolProtos.Status.OK) {\n-      String openKey = omMetadataManager.getOpenKey(omKeyInfo.getVolumeName(),\n-          omKeyInfo.getBucketName(), omKeyInfo.getKeyName(),\n-          openKeySessionID);\n-      omMetadataManager.getOpenKeyTable().putWithBatch(batchOperation,\n-          openKey, omKeyInfo);\n-    }\n+    String openKey = omMetadataManager.getOpenKey(omKeyInfo.getVolumeName(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bf0ec6dd3795cd3a5ced9e9f6de1e9f387046bf"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MjE4MDEw", "url": "https://github.com/apache/ozone/pull/448#pullrequestreview-348218010", "createdAt": "2020-01-24T20:53:18Z", "commit": {"oid": "9bf0ec6dd3795cd3a5ced9e9f6de1e9f387046bf"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1a8ac0f671d11ea516717b93f6bebd7ad37b721", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/f1a8ac0f671d11ea516717b93f6bebd7ad37b721", "committedDate": "2020-01-27T23:22:06Z", "message": "HDDS-2870. Handle replay of KeyCreate requests.\n\nHDDS-2870. Unit tests\n\nHDDS-2870. checkstyle fixes\n\nHDDS-2870. Unit test for FileCreateRequest\n\nreview comments\n\nRefactored OMKeyRequest#prepareKeyInfo and OMKeyRequest#prepareCreateKeyResponse\n\ncheckstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e573284e39e2bf24d8e021fdefb7b81bab1df7d0", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/e573284e39e2bf24d8e021fdefb7b81bab1df7d0", "committedDate": "2020-01-28T18:41:08Z", "message": "HDDS-2870. Adding OMReplayException to handle replay case"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8c110d71cbedf37e3d8f627e1d879e1ae81fd90f", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/8c110d71cbedf37e3d8f627e1d879e1ae81fd90f", "committedDate": "2020-01-27T17:19:04Z", "message": "checkstyle"}, "afterCommit": {"oid": "e573284e39e2bf24d8e021fdefb7b81bab1df7d0", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/e573284e39e2bf24d8e021fdefb7b81bab1df7d0", "committedDate": "2020-01-28T18:41:08Z", "message": "HDDS-2870. Adding OMReplayException to handle replay case"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5NjU0MDk1", "url": "https://github.com/apache/ozone/pull/448#pullrequestreview-349654095", "createdAt": "2020-01-28T19:47:18Z", "commit": {"oid": "e573284e39e2bf24d8e021fdefb7b81bab1df7d0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxOTo0NzoxOFrOFiyPsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxOTo0NzoxOFrOFiyPsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAxOTEyMg==", "bodyText": "Minor: Duplicate  // Check if this transaction is a replay of ratis logs.\nWe can remove one.", "url": "https://github.com/apache/ozone/pull/448#discussion_r372019122", "createdAt": "2020-01-28T19:47:18Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileCreateRequest.java", "diffHunk": "@@ -194,6 +212,28 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n             OMException.ResultCodes.NOT_A_FILE);\n       }\n \n+      // Check if Key already exists in KeyTable and this transaction is a\n+      // replay.\n+      String ozoneKey = omMetadataManager.getOzoneKey(volumeName, bucketName,\n+          keyName);\n+      OmKeyInfo dbKeyInfo = omMetadataManager.getKeyTable().get(ozoneKey);\n+      if (dbKeyInfo != null) {\n+        // Check if this transaction is a replay of ratis logs.\n+        // Check if this transaction is a replay of ratis logs.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e573284e39e2bf24d8e021fdefb7b81bab1df7d0"}, "originalPosition": 100}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5NjYwOTAy", "url": "https://github.com/apache/ozone/pull/448#pullrequestreview-349660902", "createdAt": "2020-01-28T19:57:51Z", "commit": {"oid": "e573284e39e2bf24d8e021fdefb7b81bab1df7d0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxOTo1Nzo1MVrOFiykaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxOTo1Nzo1MVrOFiykaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAyNDQyNA==", "bodyText": "L302-L318 is common for FileCreate and KeyCreate can we move into a method and use it.\nOr we can move these to prepareKeyInfo from 302-310 and add new method to add to cache and response. In this way OmKeyInfo will be generated by prepareKeyInfo and response and adding to cache will be in a new method.", "url": "https://github.com/apache/ozone/pull/448#discussion_r372024424", "createdAt": "2020-01-28T19:57:51Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileCreateRequest.java", "diffHunk": "@@ -254,36 +294,88 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       OmBucketInfo bucketInfo = omMetadataManager.getBucketTable().get(\n           omMetadataManager.getBucketKey(volumeName, bucketName));\n       encryptionInfo = getFileEncryptionInfo(ozoneManager, bucketInfo);\n-      omKeyInfo = prepareKeyInfo(omMetadataManager, keyArgs,\n-          omMetadataManager.getOzoneKey(volumeName, bucketName,\n-              keyName), keyArgs.getDataSize(), locations,\n-          encryptionInfo.orNull(), ozoneManager.getPrefixManager(),\n-          bucketInfo, transactionLogIndex);\n-\n-      omClientResponse =  prepareCreateKeyResponse(keyArgs, omKeyInfo,\n-          locations, encryptionInfo.orNull(), exception,\n-          createFileRequest.getClientID(), transactionLogIndex, volumeName,\n-          bucketName, keyName, ozoneManager,\n-          OMAction.CREATE_FILE, ozoneManager.getPrefixManager(), bucketInfo);\n+\n+      omKeyInfo = prepareKeyInfo(omMetadataManager, keyArgs, dbKeyInfo,\n+          keyArgs.getDataSize(), locations, encryptionInfo.orNull(),\n+          ozoneManager.getPrefixManager(), bucketInfo, trxnLogIndex);\n+\n+      long openVersion = omKeyInfo.getLatestVersionLocations().getVersion();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e573284e39e2bf24d8e021fdefb7b81bab1df7d0"}, "originalPosition": 164}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "717b0ffab355f86f86c4aa800f1f1b586f418c97", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/717b0ffab355f86f86c4aa800f1f1b586f418c97", "committedDate": "2020-01-28T20:00:04Z", "message": "review and checkstyle fix"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fa50cb74cb7d57a7a8ccbc64d99c1bc4ff824475", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/fa50cb74cb7d57a7a8ccbc64d99c1bc4ff824475", "committedDate": "2020-01-28T19:52:49Z", "message": "review and checkstyle fix"}, "afterCommit": {"oid": "717b0ffab355f86f86c4aa800f1f1b586f418c97", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/717b0ffab355f86f86c4aa800f1f1b586f418c97", "committedDate": "2020-01-28T20:00:04Z", "message": "review and checkstyle fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5NjcwODc5", "url": "https://github.com/apache/ozone/pull/448#pullrequestreview-349670879", "createdAt": "2020-01-28T20:14:13Z", "commit": {"oid": "717b0ffab355f86f86c4aa800f1f1b586f418c97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMDoxNDoxM1rOFizCKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMDoxNDoxM1rOFizCKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAzMjA0Mw==", "bodyText": "Minor: Missing checkStatusNotOK() and also can we add similar javadoc as OMKeyCreateResponse.", "url": "https://github.com/apache/ozone/pull/448#discussion_r372032043", "createdAt": "2020-01-28T20:14:13Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/file/OMFileCreateResponse.java", "diffHunk": "@@ -18,24 +18,25 @@\n \n package org.apache.hadoop.ozone.om.response.file;\n \n-import javax.annotation.Nullable;\n import javax.annotation.Nonnull;\n \n import org.apache.hadoop.ozone.om.helpers.OmKeyInfo;\n import org.apache.hadoop.ozone.om.response.key.OMKeyCreateResponse;\n import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos\n     .OMResponse;\n \n-\n-\n /**\n  * Response for crate file request.\n  */\n public class OMFileCreateResponse extends OMKeyCreateResponse {\n \n-  public OMFileCreateResponse(@Nullable OmKeyInfo omKeyInfo,\n-      long openKeySessionID, @Nonnull OMResponse omResponse) {\n-    super(omKeyInfo, openKeySessionID, omResponse);\n+  public OMFileCreateResponse(@Nonnull OMResponse omResponse,\n+      @Nonnull OmKeyInfo omKeyInfo, long openKeySessionID) {\n+    super(omResponse, omKeyInfo, openKeySessionID);\n+  }\n+\n+  public OMFileCreateResponse(@Nonnull OMResponse omResponse) {\n+    super(omResponse);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "717b0ffab355f86f86c4aa800f1f1b586f418c97"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5NjgwOTcz", "url": "https://github.com/apache/ozone/pull/448#pullrequestreview-349680973", "createdAt": "2020-01-28T20:31:22Z", "commit": {"oid": "717b0ffab355f86f86c4aa800f1f1b586f418c97"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3952, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}