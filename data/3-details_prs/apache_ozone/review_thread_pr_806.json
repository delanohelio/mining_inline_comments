{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxODg5NTQ4", "number": 806, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzo0MTowNlrODw0Dxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNToyOToxOFrODxs1YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTExMTc0OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/volume/OMVolumeRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzo0MTowNlrOGEBFwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODozNzoxMVrOGECfGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg2NTM0NQ==", "bodyText": "Instead of throwing exception here, I was wondering if we can instead perform the subsequent \"add new volume to list\" if !prevVolList.contains(volume) and complement with WARN log.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Sanity check, a user should not own same volume twice\n          \n          \n            \n                //  TODO: May want to remove this due to perf if user owns a lot of volumes.\n          \n          \n            \n                if (prevVolList.contains(volume)) {\n          \n          \n            \n                  throw new IOException(\"Invalid operation: User \" + owner +\n          \n          \n            \n                      \" is about to own a same volume \" + volume + \" twice!\" +\n          \n          \n            \n                      \" Check for DB consistency error.\");\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                // Add the new volume to the list\n          \n          \n            \n                prevVolList.add(volume);\n          \n          \n            \n                // Avoid adding a user to the same volume twice\n          \n          \n            \n                if (!prevVolList.contains(volume)) {\n          \n          \n            \n                  // Add the new volume to the list\n          \n          \n            \n                  prevVolList.add(volume);\n          \n          \n            \n                  UserVolumeInfo newVolList = UserVolumeInfo.newBuilder()\n          \n          \n            \n                      .setObjectID(objectID)\n          \n          \n            \n                      .setUpdateID(txID)\n          \n          \n            \n                      .addAllVolumeNames(prevVolList).build();\n          \n          \n            \n                }", "url": "https://github.com/apache/ozone/pull/806#discussion_r406865345", "createdAt": "2020-04-10T17:41:06Z", "author": {"login": "dineshchitlangia"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/volume/OMVolumeRequest.java", "diffHunk": "@@ -106,6 +106,13 @@ protected UserVolumeInfo addVolumeToOwnerList(UserVolumeInfo volumeList,\n       objectID = volumeList.getObjectID();\n     }\n \n+    // Sanity check, a user should not own same volume twice\n+    //  TODO: May want to remove this due to perf if user owns a lot of volumes.\n+    if (prevVolList.contains(volume)) {\n+      throw new IOException(\"Invalid operation: User \" + owner +\n+          \" is about to own a same volume \" + volume + \" twice!\" +\n+          \" Check for DB consistency error.\");\n+    }\n \n     // Add the new volume to the list\n     prevVolList.add(volume);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ec933472213f4204edd2a4c7ded798402cb1149"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg4ODIxNw==", "bodyText": "Will do. Thanks :)", "url": "https://github.com/apache/ozone/pull/806#discussion_r406888217", "createdAt": "2020-04-10T18:37:11Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/volume/OMVolumeRequest.java", "diffHunk": "@@ -106,6 +106,13 @@ protected UserVolumeInfo addVolumeToOwnerList(UserVolumeInfo volumeList,\n       objectID = volumeList.getObjectID();\n     }\n \n+    // Sanity check, a user should not own same volume twice\n+    //  TODO: May want to remove this due to perf if user owns a lot of volumes.\n+    if (prevVolList.contains(volume)) {\n+      throw new IOException(\"Invalid operation: User \" + owner +\n+          \" is about to own a same volume \" + volume + \" twice!\" +\n+          \" Check for DB consistency error.\");\n+    }\n \n     // Add the new volume to the list\n     prevVolList.add(volume);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg2NTM0NQ=="}, "originalCommit": {"oid": "3ec933472213f4204edd2a4c7ded798402cb1149"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTExODE1OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/volume/OMVolumeSetOwnerRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzo0MzoyNVrOGEBJpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzo0MzoyNVrOGEBJpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg2NjM0Mw==", "bodyText": "Like previous comment, we can make similar change here too.", "url": "https://github.com/apache/ozone/pull/806#discussion_r406866343", "createdAt": "2020-04-10T17:43:25Z", "author": {"login": "dineshchitlangia"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/volume/OMVolumeSetOwnerRequest.java", "diffHunk": "@@ -143,6 +143,11 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n \n       oldOwner = omVolumeArgs.getOwnerName();\n \n+      if (oldOwner.equals(newOwner)) {\n+        throw new OMException(\"Owner of volume \" + volume + \" is already \" +\n+            newOwner, OMException.ResultCodes.ACCESS_DENIED);\n+      }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ec933472213f4204edd2a4c7ded798402cb1149"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTEyMTE1OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/volume/OMVolumeRequest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzo0NDozOFrOGEBLhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwMzoxMjo0MVrOGEbdKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg2NjgyMw==", "bodyText": "I am thinking instead of returning an error like AccessDenied, can we return a code that this owner is already owner for this volume.\nBecause access Denied looks not proper here.", "url": "https://github.com/apache/ozone/pull/806#discussion_r406866823", "createdAt": "2020-04-10T17:44:38Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/volume/OMVolumeRequest.java", "diffHunk": "@@ -106,6 +106,13 @@ protected UserVolumeInfo addVolumeToOwnerList(UserVolumeInfo volumeList,\n       objectID = volumeList.getObjectID();\n     }\n \n+    // Sanity check, a user should not own same volume twice\n+    //  TODO: May want to remove this due to perf if user owns a lot of volumes.\n+    if (prevVolList.contains(volume)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ec933472213f4204edd2a4c7ded798402cb1149"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg4ODAxMw==", "bodyText": "I was also thinking of adding a new type of exception. But now I think @dineshchitlangia 's suggestion might be better -- handle it silently and maybe throw a warning.", "url": "https://github.com/apache/ozone/pull/806#discussion_r406888013", "createdAt": "2020-04-10T18:36:41Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/volume/OMVolumeRequest.java", "diffHunk": "@@ -106,6 +106,13 @@ protected UserVolumeInfo addVolumeToOwnerList(UserVolumeInfo volumeList,\n       objectID = volumeList.getObjectID();\n     }\n \n+    // Sanity check, a user should not own same volume twice\n+    //  TODO: May want to remove this due to perf if user owns a lot of volumes.\n+    if (prevVolList.contains(volume)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg2NjgyMw=="}, "originalCommit": {"oid": "3ec933472213f4204edd2a4c7ded798402cb1149"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk3MzYzMg==", "bodyText": "Can we document this behavior, so that the end-user knows about this behavior?", "url": "https://github.com/apache/ozone/pull/806#discussion_r406973632", "createdAt": "2020-04-10T22:49:27Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/volume/OMVolumeRequest.java", "diffHunk": "@@ -106,6 +106,13 @@ protected UserVolumeInfo addVolumeToOwnerList(UserVolumeInfo volumeList,\n       objectID = volumeList.getObjectID();\n     }\n \n+    // Sanity check, a user should not own same volume twice\n+    //  TODO: May want to remove this due to perf if user owns a lot of volumes.\n+    if (prevVolList.contains(volume)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg2NjgyMw=="}, "originalCommit": {"oid": "3ec933472213f4204edd2a4c7ded798402cb1149"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI5NzMyMg==", "bodyText": "IMO the client shouldn't notice this. The warnings should only show up on the server (if any).", "url": "https://github.com/apache/ozone/pull/806#discussion_r407297322", "createdAt": "2020-04-13T03:12:41Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/volume/OMVolumeRequest.java", "diffHunk": "@@ -106,6 +106,13 @@ protected UserVolumeInfo addVolumeToOwnerList(UserVolumeInfo volumeList,\n       objectID = volumeList.getObjectID();\n     }\n \n+    // Sanity check, a user should not own same volume twice\n+    //  TODO: May want to remove this due to perf if user owns a lot of volumes.\n+    if (prevVolList.contains(volume)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg2NjgyMw=="}, "originalCommit": {"oid": "3ec933472213f4204edd2a4c7ded798402cb1149"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTEyMzcwOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/om/TestOzoneManagerSetOwner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzo0NTozOFrOGEBNGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODozNDoyOVrOGECa1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg2NzIyNw==", "bodyText": "We don't need an IT test to test this behavior. We have a UT TestOMVolumeSetOwnerRequest which we can use this to cover this test.", "url": "https://github.com/apache/ozone/pull/806#discussion_r406867227", "createdAt": "2020-04-10T17:45:38Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/om/TestOzoneManagerSetOwner.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om;\n+\n+import java.io.IOException;\n+import java.util.UUID;\n+\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.ozone.MiniOzoneCluster;\n+import org.apache.hadoop.ozone.client.ObjectStore;\n+import org.apache.hadoop.ozone.client.OzoneClient;\n+import org.apache.hadoop.ozone.client.protocol.ClientProtocol;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.security.UserGroupInformation;\n+\n+import static org.apache.hadoop.hdds.scm.ScmConfigKeys.OZONE_SCM_RATIS_PIPELINE_LIMIT;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_ACL_AUTHORIZER_CLASS;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_ACL_AUTHORIZER_CLASS_NATIVE;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_ACL_ENABLED;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_ADMINISTRATORS;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_OPEN_KEY_EXPIRE_THRESHOLD_SECONDS;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+\n+/**\n+ * Test OzoneManager list volume operation under combinations of configs.\n+ */\n+public class TestOzoneManagerSetOwner {\n+\n+  @Rule\n+  public Timeout timeout = new Timeout(120_000);\n+\n+  private UserGroupInformation loginUser;\n+\n+  @Before\n+  public void init() throws Exception {\n+    loginUser = UserGroupInformation.getLoginUser();\n+  }\n+\n+  /**\n+   * Create a MiniDFSCluster for testing.\n+   */\n+  private MiniOzoneCluster startCluster(boolean aclEnabled) throws Exception {\n+\n+    OzoneConfiguration conf = new OzoneConfiguration();\n+    String clusterId = UUID.randomUUID().toString();\n+    String scmId = UUID.randomUUID().toString();\n+    String omId = UUID.randomUUID().toString();\n+    conf.setInt(OZONE_OPEN_KEY_EXPIRE_THRESHOLD_SECONDS, 2);\n+    conf.set(OZONE_ADMINISTRATORS, \"user1\");\n+    conf.setInt(OZONE_SCM_RATIS_PIPELINE_LIMIT, 10);\n+\n+    // Use native impl here, default impl doesn't do actual checks\n+    conf.set(OZONE_ACL_AUTHORIZER_CLASS, OZONE_ACL_AUTHORIZER_CLASS_NATIVE);\n+    // Note: OM doesn't support live config reloading\n+    conf.setBoolean(OZONE_ACL_ENABLED, aclEnabled);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ec933472213f4204edd2a4c7ded798402cb1149"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg4NzEyNw==", "bodyText": "Yes I acknowledge that. This integration test is a quick hack from #696 's test since I discovered this issue when debugging that PR. Just a POC for now. Will figure out a way to write this in TestOMVolumeSetOwnerRequest.", "url": "https://github.com/apache/ozone/pull/806#discussion_r406887127", "createdAt": "2020-04-10T18:34:29Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/om/TestOzoneManagerSetOwner.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om;\n+\n+import java.io.IOException;\n+import java.util.UUID;\n+\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.ozone.MiniOzoneCluster;\n+import org.apache.hadoop.ozone.client.ObjectStore;\n+import org.apache.hadoop.ozone.client.OzoneClient;\n+import org.apache.hadoop.ozone.client.protocol.ClientProtocol;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.security.UserGroupInformation;\n+\n+import static org.apache.hadoop.hdds.scm.ScmConfigKeys.OZONE_SCM_RATIS_PIPELINE_LIMIT;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_ACL_AUTHORIZER_CLASS;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_ACL_AUTHORIZER_CLASS_NATIVE;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_ACL_ENABLED;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_ADMINISTRATORS;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_OPEN_KEY_EXPIRE_THRESHOLD_SECONDS;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+\n+/**\n+ * Test OzoneManager list volume operation under combinations of configs.\n+ */\n+public class TestOzoneManagerSetOwner {\n+\n+  @Rule\n+  public Timeout timeout = new Timeout(120_000);\n+\n+  private UserGroupInformation loginUser;\n+\n+  @Before\n+  public void init() throws Exception {\n+    loginUser = UserGroupInformation.getLoginUser();\n+  }\n+\n+  /**\n+   * Create a MiniDFSCluster for testing.\n+   */\n+  private MiniOzoneCluster startCluster(boolean aclEnabled) throws Exception {\n+\n+    OzoneConfiguration conf = new OzoneConfiguration();\n+    String clusterId = UUID.randomUUID().toString();\n+    String scmId = UUID.randomUUID().toString();\n+    String omId = UUID.randomUUID().toString();\n+    conf.setInt(OZONE_OPEN_KEY_EXPIRE_THRESHOLD_SECONDS, 2);\n+    conf.set(OZONE_ADMINISTRATORS, \"user1\");\n+    conf.setInt(OZONE_SCM_RATIS_PIPELINE_LIMIT, 10);\n+\n+    // Use native impl here, default impl doesn't do actual checks\n+    conf.set(OZONE_ACL_AUTHORIZER_CLASS, OZONE_ACL_AUTHORIZER_CLASS_NATIVE);\n+    // Note: OM doesn't support live config reloading\n+    conf.setBoolean(OZONE_ACL_ENABLED, aclEnabled);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg2NzIyNw=="}, "originalCommit": {"oid": "3ec933472213f4204edd2a4c7ded798402cb1149"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDQxMzc3OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/volume/OMVolumeSetOwnerResponse.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNToyOToxOFrOGFUWQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzo1Mzo0N1rOGFaRxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIyOTQ0Mg==", "bodyText": "should we remove this comment as checkStatusNotOK is now conditioned with success=true? Also, do we redirect existing callers for success=false case appropriately?", "url": "https://github.com/apache/ozone/pull/806#discussion_r408229442", "createdAt": "2020-04-14T15:29:18Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/volume/OMVolumeSetOwnerResponse.java", "diffHunk": "@@ -55,11 +56,27 @@ public OMVolumeSetOwnerResponse(@Nonnull OMResponse omResponse,\n \n   /**\n    * For when the request is not successful or it is a replay transaction.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b1d26e5e8c823dd3edcb9210da29bb37a9bfbcb"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIzMzUwOA==", "bodyText": "I think the reply response is taken care by createReplayOMResponse now. So we can safely clean up the comments above.", "url": "https://github.com/apache/ozone/pull/806#discussion_r408233508", "createdAt": "2020-04-14T15:34:51Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/volume/OMVolumeSetOwnerResponse.java", "diffHunk": "@@ -55,11 +56,27 @@ public OMVolumeSetOwnerResponse(@Nonnull OMResponse omResponse,\n \n   /**\n    * For when the request is not successful or it is a replay transaction.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIyOTQ0Mg=="}, "originalCommit": {"oid": "5b1d26e5e8c823dd3edcb9210da29bb37a9bfbcb"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1MTA0OQ==", "bodyText": "I believe the comment is still accurate. There are four places that use this constructor at the moment:\n\nINVALID_REQUEST\n\n    // In production this will never happen, this request will be called only\n    // when we have ownerName in setVolumePropertyRequest.\n    if (!setVolumePropertyRequest.hasOwnerName()) {\n      omResponse.setStatus(OzoneManagerProtocolProtos.Status.INVALID_REQUEST)\n          .setSuccess(false);\n      return new OMVolumeSetOwnerResponse(omResponse.build());\n    }\n\nReplay\n\n      // Check if this transaction is a replay of ratis logs.\n      // If this is a replay, then the response has already been returned to\n      // the client. So take no further action and return a dummy\n      // OMClientResponse.\n      if (isReplay(ozoneManager, omVolumeArgs, transactionLogIndex)) {\n        LOG.debug(\"Replayed Transaction {} ignored. Request: {}\",\n            transactionLogIndex, setVolumePropertyRequest);\n        return new OMVolumeSetOwnerResponse(createReplayOMResponse(omResponse));\n      }\n\nnewOwner is the same as oldOwner (added in this PR)\n\n      // Return OK immediately if newOwner is the same as oldOwner.\n      if (oldOwner.equals(newOwner)) {\n        LOG.warn(\"Volume '{}' owner is already user '{}'.\", volume, oldOwner);\n        omResponse.setStatus(OzoneManagerProtocolProtos.Status.OK)\n          .setMessage(\n            \"Volume '\" + volume + \"' owner is already '\" + newOwner + \"'.\")\n          .setSuccess(false);\n        return new OMVolumeSetOwnerResponse(omResponse.build());\n      }\n\nIOException\n\n    } catch (IOException ex) {\n      exception = ex;\n      omClientResponse = new OMVolumeSetOwnerResponse(\n          createErrorOMResponse(omResponse, exception));\n    } finally {", "url": "https://github.com/apache/ozone/pull/806#discussion_r408251049", "createdAt": "2020-04-14T15:58:29Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/volume/OMVolumeSetOwnerResponse.java", "diffHunk": "@@ -55,11 +56,27 @@ public OMVolumeSetOwnerResponse(@Nonnull OMResponse omResponse,\n \n   /**\n    * For when the request is not successful or it is a replay transaction.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIyOTQ0Mg=="}, "originalCommit": {"oid": "5b1d26e5e8c823dd3edcb9210da29bb37a9bfbcb"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1MTc0NQ==", "bodyText": "Though in all four cases the success flag is set to false, rendering the condition around checkStatusNotOK() (seemingly) pointless.\nStill, this should act to prevent new code from calling this constructor when success is true and status is OK.", "url": "https://github.com/apache/ozone/pull/806#discussion_r408251745", "createdAt": "2020-04-14T15:59:25Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/volume/OMVolumeSetOwnerResponse.java", "diffHunk": "@@ -55,11 +56,27 @@ public OMVolumeSetOwnerResponse(@Nonnull OMResponse omResponse,\n \n   /**\n    * For when the request is not successful or it is a replay transaction.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIyOTQ0Mg=="}, "originalCommit": {"oid": "5b1d26e5e8c823dd3edcb9210da29bb37a9bfbcb"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1NzAzOQ==", "bodyText": "Just BTW in a discussion with @bharatviswa504 we conclude the reason of setting success to false for \"newOwner equals to oldOwner\" case is that in addAcl we have some logic to print different results on the client side depending on the success flag. Though the success flag of setOwner isn't utilized at the moment, we might be able to use it later.\nAnd reason of returning status OK is that the client will throw exception if the status isn't OK.", "url": "https://github.com/apache/ozone/pull/806#discussion_r408257039", "createdAt": "2020-04-14T16:06:48Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/volume/OMVolumeSetOwnerResponse.java", "diffHunk": "@@ -55,11 +56,27 @@ public OMVolumeSetOwnerResponse(@Nonnull OMResponse omResponse,\n \n   /**\n    * For when the request is not successful or it is a replay transaction.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIyOTQ0Mg=="}, "originalCommit": {"oid": "5b1d26e5e8c823dd3edcb9210da29bb37a9bfbcb"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI2MjM0OA==", "bodyText": "Just to add more info, we set the success flag and also there is a response which we return that is used by the end client which has a response flag which is set based on the result of the operation.\n  OMClientResponse onSuccess(OMResponse.Builder omResponse,\n      OmBucketInfo omBucketInfo, boolean operationResult) {\n    omResponse.setSuccess(operationResult);\n    omResponse.setAddAclResponse(AddAclResponse.newBuilder()\n         .setResponse(operationResult));\n\nBut in OmVolumeSetOwner case, there is no such flag. If we can introduce a flag in SetVolumePropertyResponse, we can use the success flag.\n  omResponse.setSetVolumePropertyResponse(\n      SetVolumePropertyResponse.newBuilder().build());", "url": "https://github.com/apache/ozone/pull/806#discussion_r408262348", "createdAt": "2020-04-14T16:14:15Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/volume/OMVolumeSetOwnerResponse.java", "diffHunk": "@@ -55,11 +56,27 @@ public OMVolumeSetOwnerResponse(@Nonnull OMResponse omResponse,\n \n   /**\n    * For when the request is not successful or it is a replay transaction.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIyOTQ0Mg=="}, "originalCommit": {"oid": "5b1d26e5e8c823dd3edcb9210da29bb37a9bfbcb"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI3OTA5OA==", "bodyText": "Just to add more info, we set the success flag and also there is a response which we return that is used by the end client which has a response flag which is set based on the result of the operation.\n  OMClientResponse onSuccess(OMResponse.Builder omResponse,\n      OmBucketInfo omBucketInfo, boolean operationResult) {\n    omResponse.setSuccess(operationResult);\n    omResponse.setAddAclResponse(AddAclResponse.newBuilder()\n         .setResponse(operationResult));\n\nBut in OmVolumeSetOwner case, there is no such flag. If we can introduce a flag in SetVolumePropertyResponse, we can use the success flag.\n  omResponse.setSetVolumePropertyResponse(\n      SetVolumePropertyResponse.newBuilder().build());\n\n\nGood idea we can add optional bool response = 1; in here in another jira.", "url": "https://github.com/apache/ozone/pull/806#discussion_r408279098", "createdAt": "2020-04-14T16:38:49Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/volume/OMVolumeSetOwnerResponse.java", "diffHunk": "@@ -55,11 +56,27 @@ public OMVolumeSetOwnerResponse(@Nonnull OMResponse omResponse,\n \n   /**\n    * For when the request is not successful or it is a replay transaction.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIyOTQ0Mg=="}, "originalCommit": {"oid": "5b1d26e5e8c823dd3edcb9210da29bb37a9bfbcb"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMyNjU5Ng==", "bodyText": "Discussed with @xiaoyuyao and we agree the comment don't need to be changed at the moment.\nResolving this conversation. Will commit shortly.", "url": "https://github.com/apache/ozone/pull/806#discussion_r408326596", "createdAt": "2020-04-14T17:53:47Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/volume/OMVolumeSetOwnerResponse.java", "diffHunk": "@@ -55,11 +56,27 @@ public OMVolumeSetOwnerResponse(@Nonnull OMResponse omResponse,\n \n   /**\n    * For when the request is not successful or it is a replay transaction.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIyOTQ0Mg=="}, "originalCommit": {"oid": "5b1d26e5e8c823dd3edcb9210da29bb37a9bfbcb"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4379, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}