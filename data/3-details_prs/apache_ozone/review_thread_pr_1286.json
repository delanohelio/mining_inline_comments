{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyMTAwNjU3", "number": 1286, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMzoyMjowMlrOEU1GsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwNzo1MTo0M1rOEWbT0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjc3MDQxOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/fs/ozone/TestRootedOzoneFileSystem.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMzoyMjowMlrOG7Ppww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNzoxNDoyMFrOG7UAQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc3NTYxOQ==", "bodyText": "Make this test parameterized to test with  \"ozone.om.enable.filesystem.paths\" enabled and disabled similar to TestOzoneFileSystem", "url": "https://github.com/apache/ozone/pull/1286#discussion_r464775619", "createdAt": "2020-08-04T03:22:02Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/fs/ozone/TestRootedOzoneFileSystem.java", "diffHunk": "@@ -1038,4 +1043,41 @@ public void testRenameToTrashDisabled() throws IOException {\n     ofs.delete(trashRoot, true);\n   }\n \n+  @Test\n+  public void testFileDelete() throws Exception {\n+    Path grandparent = new Path(bucketPath, \"testBatchDelete\");\n+    Path parent = new Path(grandparent, \"parent\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdbc71cdabcfa846d538878f80bb602a37a63528"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg0NjkxMg==", "bodyText": "done", "url": "https://github.com/apache/ozone/pull/1286#discussion_r464846912", "createdAt": "2020-08-04T07:14:20Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/fs/ozone/TestRootedOzoneFileSystem.java", "diffHunk": "@@ -1038,4 +1043,41 @@ public void testRenameToTrashDisabled() throws IOException {\n     ofs.delete(trashRoot, true);\n   }\n \n+  @Test\n+  public void testFileDelete() throws Exception {\n+    Path grandparent = new Path(bucketPath, \"testBatchDelete\");\n+    Path parent = new Path(grandparent, \"parent\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc3NTYxOQ=="}, "originalCommit": {"oid": "fdbc71cdabcfa846d538878f80bb602a37a63528"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDQ3Mjk3OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozonefs-common/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODozMzo0MlrOG8_iOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODoyMDo1N1rOG9jllw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwODY5OA==", "bodyText": "Is there a reason for return false, because BasicOzoneFileSystem does not return false when key list is empty.\nhttps://github.com/apache/hadoop-ozone/blob/master/hadoop-ozone/ozonefs-common/src/main/java/org/apache/hadoop/fs/ozone/BasicOzoneClientAdapterImpl.java#L287", "url": "https://github.com/apache/ozone/pull/1286#discussion_r466608698", "createdAt": "2020-08-06T18:33:42Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozonefs-common/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "diffHunk": "@@ -457,38 +458,79 @@ public boolean deleteObject(String path) {\n     }\n   }\n \n+  /**\n+   * Helper function to check if the list of key paths are in the same volume\n+   * and same bucket.\n+   */\n+  private boolean areInSameBucket(List<String> keyNameList) {\n+    if (keyNameList.size() == 0) {\n+      return true;\n+    }\n+    String firstKeyPath = keyNameList.get(0);\n+    final String volAndBucket = new OFSPath(firstKeyPath).getNonKeyPath();\n+    // If any key path's volume and bucket from the second element and on\n+    // in the list doesn't match the first element's, hasDifferentVolAndBucket\n+    // would be true\n+    boolean hasDifferentVolAndBucket = keyNameList.stream().skip(1)\n+        .anyMatch(p -> !(new OFSPath(p).getNonKeyPath().equals(volAndBucket)));\n+    return !hasDifferentVolAndBucket;\n+  }\n+\n   /**\n    * Helper method to delete an object specified by key name in bucket.\n    *\n-   * @param pathList key name list to be deleted\n+   * Only supports deleting keys in the same bucket in one call.\n+   *\n+   * Each item in the given list should be the String of an OFS path:\n+   * e.g. ofs://om/vol1/buck1/k1\n+   *\n+   * @param keyNameList key name list to be deleted\n    * @return true if the key is deleted, false otherwise\n    */\n   @Override\n-  public boolean deleteObjects(List<String> pathList) {\n-    // TODO: we will support deleteObjects in ofs.\n-    LOG.error(\"ofs currently does not support deleteObjects\");\n-    return false;\n+  public boolean deleteObjects(List<String> keyNameList) {\n+    LOG.trace(\"issuing delete for keys: {}\", keyNameList);\n+    if (keyNameList.size() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a130357be16e518f9f56b5b2ead99f2a68e844a"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5OTM4Mw==", "bodyText": "Good catch. Yes should return true here. Also changed the javadoc a bit.", "url": "https://github.com/apache/ozone/pull/1286#discussion_r467199383", "createdAt": "2020-08-07T18:20:57Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/ozonefs-common/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "diffHunk": "@@ -457,38 +458,79 @@ public boolean deleteObject(String path) {\n     }\n   }\n \n+  /**\n+   * Helper function to check if the list of key paths are in the same volume\n+   * and same bucket.\n+   */\n+  private boolean areInSameBucket(List<String> keyNameList) {\n+    if (keyNameList.size() == 0) {\n+      return true;\n+    }\n+    String firstKeyPath = keyNameList.get(0);\n+    final String volAndBucket = new OFSPath(firstKeyPath).getNonKeyPath();\n+    // If any key path's volume and bucket from the second element and on\n+    // in the list doesn't match the first element's, hasDifferentVolAndBucket\n+    // would be true\n+    boolean hasDifferentVolAndBucket = keyNameList.stream().skip(1)\n+        .anyMatch(p -> !(new OFSPath(p).getNonKeyPath().equals(volAndBucket)));\n+    return !hasDifferentVolAndBucket;\n+  }\n+\n   /**\n    * Helper method to delete an object specified by key name in bucket.\n    *\n-   * @param pathList key name list to be deleted\n+   * Only supports deleting keys in the same bucket in one call.\n+   *\n+   * Each item in the given list should be the String of an OFS path:\n+   * e.g. ofs://om/vol1/buck1/k1\n+   *\n+   * @param keyNameList key name list to be deleted\n    * @return true if the key is deleted, false otherwise\n    */\n   @Override\n-  public boolean deleteObjects(List<String> pathList) {\n-    // TODO: we will support deleteObjects in ofs.\n-    LOG.error(\"ofs currently does not support deleteObjects\");\n-    return false;\n+  public boolean deleteObjects(List<String> keyNameList) {\n+    LOG.trace(\"issuing delete for keys: {}\", keyNameList);\n+    if (keyNameList.size() == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwODY5OA=="}, "originalCommit": {"oid": "5a130357be16e518f9f56b5b2ead99f2a68e844a"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODAyMzExOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozonefs-common/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNjo0ODo0NVrOG9g1vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODo0OTowMFrOG9kWeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE1NDM2Nw==", "bodyText": "should incrementCount for deletes by the number of keys in the list instead of 1?\nAlso, should we move the counter update if deleteKeys succeed", "url": "https://github.com/apache/ozone/pull/1286#discussion_r467154367", "createdAt": "2020-08-07T16:48:45Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-ozone/ozonefs-common/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "diffHunk": "@@ -457,38 +458,79 @@ public boolean deleteObject(String path) {\n     }\n   }\n \n+  /**\n+   * Helper function to check if the list of key paths are in the same volume\n+   * and same bucket.\n+   */\n+  private boolean areInSameBucket(List<String> keyNameList) {\n+    if (keyNameList.size() == 0) {\n+      return true;\n+    }\n+    String firstKeyPath = keyNameList.get(0);\n+    final String volAndBucket = new OFSPath(firstKeyPath).getNonKeyPath();\n+    // If any key path's volume and bucket from the second element and on\n+    // in the list doesn't match the first element's, hasDifferentVolAndBucket\n+    // would be true\n+    boolean hasDifferentVolAndBucket = keyNameList.stream().skip(1)\n+        .anyMatch(p -> !(new OFSPath(p).getNonKeyPath().equals(volAndBucket)));\n+    return !hasDifferentVolAndBucket;\n+  }\n+\n   /**\n    * Helper method to delete an object specified by key name in bucket.\n    *\n-   * @param pathList key name list to be deleted\n+   * Only supports deleting keys in the same bucket in one call.\n+   *\n+   * Each item in the given list should be the String of an OFS path:\n+   * e.g. ofs://om/vol1/buck1/k1\n+   *\n+   * @param keyNameList key name list to be deleted\n    * @return true if the key is deleted, false otherwise\n    */\n   @Override\n-  public boolean deleteObjects(List<String> pathList) {\n-    // TODO: we will support deleteObjects in ofs.\n-    LOG.error(\"ofs currently does not support deleteObjects\");\n-    return false;\n+  public boolean deleteObjects(List<String> keyNameList) {\n+    LOG.trace(\"issuing delete for keys: {}\", keyNameList);\n+    if (keyNameList.size() == 0) {\n+      return false;\n+    }\n+    // Sanity check. Support only deleting a list of keys in the same bucket\n+    if (!areInSameBucket(keyNameList)) {\n+      LOG.error(\"Deleting keys from different buckets in a single batch \"\n+          + \"is not supported.\");\n+      return false;\n+    }\n+    try {\n+      OFSPath firstKeyPath = new OFSPath(keyNameList.get(0));\n+      OzoneBucket bucket = getBucket(firstKeyPath, false);\n+      return deleteObjects(bucket, keyNameList);\n+    } catch (IOException ioe) {\n+      LOG.error(\"delete key failed: {}\", ioe.getMessage());\n+      return false;\n+    }\n   }\n \n   /**\n    * Package-private helper function to reduce calls to getBucket().\n+   *\n+   * This will be faster than the public variant of the method since this\n+   * doesn't verify the same-bucket condition.\n+   *\n    * @param bucket Bucket to operate in.\n-   * @param path Path to delete.\n-   * @return true if operation succeeded, false upon IOException.\n+   * @param keyNameList key name list to be deleted.\n+   * @return true if operation succeeded, false on IOException.\n    */\n-  boolean deleteObject(OzoneBucket bucket, String path) {\n-    LOG.trace(\"issuing delete for path to key: {}\", path);\n-    incrementCounter(Statistic.OBJECTS_DELETED);\n-    OFSPath ofsPath = new OFSPath(path);\n-    String keyName = ofsPath.getKeyName();\n-    if (keyName.length() == 0) {\n-      return false;\n-    }\n+  boolean deleteObjects(OzoneBucket bucket, List<String> keyNameList) {\n+    LOG.trace(\"issuing delete in volume: {}, bucket: {} for keys: {}\",\n+        bucket.getVolumeName(), bucket.getName(), keyNameList);\n+    List<String> keyList = keyNameList.stream()\n+        .map(p -> new OFSPath(p).getKeyName())\n+        .collect(Collectors.toList());\n     try {\n-      bucket.deleteKey(keyName);\n+      incrementCounter(Statistic.OBJECTS_DELETED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b0a7d9db47365585c2921e7b667b59648fc552a"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5NDY4Nw==", "bodyText": "Yes you are right. I do notice this when making the patch. I was just trying to make it consistent with the o3fs code.\nShould I make the change in both o3fs and ofs here in this PR? One point is I may need to add a new method to increment the stat by X rather than only 1 (for a more elegant solution).", "url": "https://github.com/apache/ozone/pull/1286#discussion_r467194687", "createdAt": "2020-08-07T18:10:54Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/ozonefs-common/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "diffHunk": "@@ -457,38 +458,79 @@ public boolean deleteObject(String path) {\n     }\n   }\n \n+  /**\n+   * Helper function to check if the list of key paths are in the same volume\n+   * and same bucket.\n+   */\n+  private boolean areInSameBucket(List<String> keyNameList) {\n+    if (keyNameList.size() == 0) {\n+      return true;\n+    }\n+    String firstKeyPath = keyNameList.get(0);\n+    final String volAndBucket = new OFSPath(firstKeyPath).getNonKeyPath();\n+    // If any key path's volume and bucket from the second element and on\n+    // in the list doesn't match the first element's, hasDifferentVolAndBucket\n+    // would be true\n+    boolean hasDifferentVolAndBucket = keyNameList.stream().skip(1)\n+        .anyMatch(p -> !(new OFSPath(p).getNonKeyPath().equals(volAndBucket)));\n+    return !hasDifferentVolAndBucket;\n+  }\n+\n   /**\n    * Helper method to delete an object specified by key name in bucket.\n    *\n-   * @param pathList key name list to be deleted\n+   * Only supports deleting keys in the same bucket in one call.\n+   *\n+   * Each item in the given list should be the String of an OFS path:\n+   * e.g. ofs://om/vol1/buck1/k1\n+   *\n+   * @param keyNameList key name list to be deleted\n    * @return true if the key is deleted, false otherwise\n    */\n   @Override\n-  public boolean deleteObjects(List<String> pathList) {\n-    // TODO: we will support deleteObjects in ofs.\n-    LOG.error(\"ofs currently does not support deleteObjects\");\n-    return false;\n+  public boolean deleteObjects(List<String> keyNameList) {\n+    LOG.trace(\"issuing delete for keys: {}\", keyNameList);\n+    if (keyNameList.size() == 0) {\n+      return false;\n+    }\n+    // Sanity check. Support only deleting a list of keys in the same bucket\n+    if (!areInSameBucket(keyNameList)) {\n+      LOG.error(\"Deleting keys from different buckets in a single batch \"\n+          + \"is not supported.\");\n+      return false;\n+    }\n+    try {\n+      OFSPath firstKeyPath = new OFSPath(keyNameList.get(0));\n+      OzoneBucket bucket = getBucket(firstKeyPath, false);\n+      return deleteObjects(bucket, keyNameList);\n+    } catch (IOException ioe) {\n+      LOG.error(\"delete key failed: {}\", ioe.getMessage());\n+      return false;\n+    }\n   }\n \n   /**\n    * Package-private helper function to reduce calls to getBucket().\n+   *\n+   * This will be faster than the public variant of the method since this\n+   * doesn't verify the same-bucket condition.\n+   *\n    * @param bucket Bucket to operate in.\n-   * @param path Path to delete.\n-   * @return true if operation succeeded, false upon IOException.\n+   * @param keyNameList key name list to be deleted.\n+   * @return true if operation succeeded, false on IOException.\n    */\n-  boolean deleteObject(OzoneBucket bucket, String path) {\n-    LOG.trace(\"issuing delete for path to key: {}\", path);\n-    incrementCounter(Statistic.OBJECTS_DELETED);\n-    OFSPath ofsPath = new OFSPath(path);\n-    String keyName = ofsPath.getKeyName();\n-    if (keyName.length() == 0) {\n-      return false;\n-    }\n+  boolean deleteObjects(OzoneBucket bucket, List<String> keyNameList) {\n+    LOG.trace(\"issuing delete in volume: {}, bucket: {} for keys: {}\",\n+        bucket.getVolumeName(), bucket.getName(), keyNameList);\n+    List<String> keyList = keyNameList.stream()\n+        .map(p -> new OFSPath(p).getKeyName())\n+        .collect(Collectors.toList());\n     try {\n-      bucket.deleteKey(keyName);\n+      incrementCounter(Statistic.OBJECTS_DELETED);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE1NDM2Nw=="}, "originalCommit": {"oid": "4b0a7d9db47365585c2921e7b667b59648fc552a"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIxMTg5Nw==", "bodyText": "I have made the attempt in e65e0d5 + 8a01be1. Pls take a look :)", "url": "https://github.com/apache/ozone/pull/1286#discussion_r467211897", "createdAt": "2020-08-07T18:49:00Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/ozonefs-common/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "diffHunk": "@@ -457,38 +458,79 @@ public boolean deleteObject(String path) {\n     }\n   }\n \n+  /**\n+   * Helper function to check if the list of key paths are in the same volume\n+   * and same bucket.\n+   */\n+  private boolean areInSameBucket(List<String> keyNameList) {\n+    if (keyNameList.size() == 0) {\n+      return true;\n+    }\n+    String firstKeyPath = keyNameList.get(0);\n+    final String volAndBucket = new OFSPath(firstKeyPath).getNonKeyPath();\n+    // If any key path's volume and bucket from the second element and on\n+    // in the list doesn't match the first element's, hasDifferentVolAndBucket\n+    // would be true\n+    boolean hasDifferentVolAndBucket = keyNameList.stream().skip(1)\n+        .anyMatch(p -> !(new OFSPath(p).getNonKeyPath().equals(volAndBucket)));\n+    return !hasDifferentVolAndBucket;\n+  }\n+\n   /**\n    * Helper method to delete an object specified by key name in bucket.\n    *\n-   * @param pathList key name list to be deleted\n+   * Only supports deleting keys in the same bucket in one call.\n+   *\n+   * Each item in the given list should be the String of an OFS path:\n+   * e.g. ofs://om/vol1/buck1/k1\n+   *\n+   * @param keyNameList key name list to be deleted\n    * @return true if the key is deleted, false otherwise\n    */\n   @Override\n-  public boolean deleteObjects(List<String> pathList) {\n-    // TODO: we will support deleteObjects in ofs.\n-    LOG.error(\"ofs currently does not support deleteObjects\");\n-    return false;\n+  public boolean deleteObjects(List<String> keyNameList) {\n+    LOG.trace(\"issuing delete for keys: {}\", keyNameList);\n+    if (keyNameList.size() == 0) {\n+      return false;\n+    }\n+    // Sanity check. Support only deleting a list of keys in the same bucket\n+    if (!areInSameBucket(keyNameList)) {\n+      LOG.error(\"Deleting keys from different buckets in a single batch \"\n+          + \"is not supported.\");\n+      return false;\n+    }\n+    try {\n+      OFSPath firstKeyPath = new OFSPath(keyNameList.get(0));\n+      OzoneBucket bucket = getBucket(firstKeyPath, false);\n+      return deleteObjects(bucket, keyNameList);\n+    } catch (IOException ioe) {\n+      LOG.error(\"delete key failed: {}\", ioe.getMessage());\n+      return false;\n+    }\n   }\n \n   /**\n    * Package-private helper function to reduce calls to getBucket().\n+   *\n+   * This will be faster than the public variant of the method since this\n+   * doesn't verify the same-bucket condition.\n+   *\n    * @param bucket Bucket to operate in.\n-   * @param path Path to delete.\n-   * @return true if operation succeeded, false upon IOException.\n+   * @param keyNameList key name list to be deleted.\n+   * @return true if operation succeeded, false on IOException.\n    */\n-  boolean deleteObject(OzoneBucket bucket, String path) {\n-    LOG.trace(\"issuing delete for path to key: {}\", path);\n-    incrementCounter(Statistic.OBJECTS_DELETED);\n-    OFSPath ofsPath = new OFSPath(path);\n-    String keyName = ofsPath.getKeyName();\n-    if (keyName.length() == 0) {\n-      return false;\n-    }\n+  boolean deleteObjects(OzoneBucket bucket, List<String> keyNameList) {\n+    LOG.trace(\"issuing delete in volume: {}, bucket: {} for keys: {}\",\n+        bucket.getVolumeName(), bucket.getName(), keyNameList);\n+    List<String> keyList = keyNameList.stream()\n+        .map(p -> new OFSPath(p).getKeyName())\n+        .collect(Collectors.toList());\n     try {\n-      bucket.deleteKey(keyName);\n+      incrementCounter(Statistic.OBJECTS_DELETED);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE1NDM2Nw=="}, "originalCommit": {"oid": "4b0a7d9db47365585c2921e7b667b59648fc552a"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODAzMzgyOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozonefs-common/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneFileSystem.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNjo1MjoxMVrOG9g8RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODoxNjoyMlrOG9jdUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE1NjAzNw==", "bodyText": "Do we have a follow up JIRA to fix rename once the batch rename is ready?", "url": "https://github.com/apache/ozone/pull/1286#discussion_r467156037", "createdAt": "2020-08-07T16:52:11Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-ozone/ozonefs-common/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneFileSystem.java", "diffHunk": "@@ -255,9 +258,11 @@ public FSDataOutputStream append(Path f, int bufferSize,\n     }\n \n     @Override\n-    boolean processKeyPath(String keyPath) throws IOException {\n-      String newPath = dstPath.concat(keyPath.substring(srcPath.length()));\n-      adapterImpl.rename(this.bucket, keyPath, newPath);\n+    boolean processKeyPath(List<String> keyPathList) throws IOException {\n+      for (String keyPath : keyPathList) {\n+        String newPath = dstPath.concat(keyPath.substring(srcPath.length()));\n+        adapterImpl.rename(this.bucket, keyPath, newPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b0a7d9db47365585c2921e7b667b59648fc552a"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5NzI2Ng==", "bodyText": "Filed HDDS-4090", "url": "https://github.com/apache/ozone/pull/1286#discussion_r467197266", "createdAt": "2020-08-07T18:16:22Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/ozonefs-common/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneFileSystem.java", "diffHunk": "@@ -255,9 +258,11 @@ public FSDataOutputStream append(Path f, int bufferSize,\n     }\n \n     @Override\n-    boolean processKeyPath(String keyPath) throws IOException {\n-      String newPath = dstPath.concat(keyPath.substring(srcPath.length()));\n-      adapterImpl.rename(this.bucket, keyPath, newPath);\n+    boolean processKeyPath(List<String> keyPathList) throws IOException {\n+      for (String keyPath : keyPathList) {\n+        String newPath = dstPath.concat(keyPath.substring(srcPath.length()));\n+        adapterImpl.rename(this.bucket, keyPath, newPath);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE1NjAzNw=="}, "originalCommit": {"oid": "4b0a7d9db47365585c2921e7b667b59648fc552a"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODA0MzQ2OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozonefs-common/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNjo1NToxOVrOG9hCOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODoyODozMFrOG9jzNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE1NzU2Mg==", "bodyText": "LOG.trace a keyNameList address does not provide much useful info. I would suggest either remove or expand the list.", "url": "https://github.com/apache/ozone/pull/1286#discussion_r467157562", "createdAt": "2020-08-07T16:55:19Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-ozone/ozonefs-common/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "diffHunk": "@@ -457,38 +458,79 @@ public boolean deleteObject(String path) {\n     }\n   }\n \n+  /**\n+   * Helper function to check if the list of key paths are in the same volume\n+   * and same bucket.\n+   */\n+  private boolean areInSameBucket(List<String> keyNameList) {\n+    if (keyNameList.size() == 0) {\n+      return true;\n+    }\n+    String firstKeyPath = keyNameList.get(0);\n+    final String volAndBucket = new OFSPath(firstKeyPath).getNonKeyPath();\n+    // If any key path's volume and bucket from the second element and on\n+    // in the list doesn't match the first element's, hasDifferentVolAndBucket\n+    // would be true\n+    boolean hasDifferentVolAndBucket = keyNameList.stream().skip(1)\n+        .anyMatch(p -> !(new OFSPath(p).getNonKeyPath().equals(volAndBucket)));\n+    return !hasDifferentVolAndBucket;\n+  }\n+\n   /**\n    * Helper method to delete an object specified by key name in bucket.\n    *\n-   * @param pathList key name list to be deleted\n+   * Only supports deleting keys in the same bucket in one call.\n+   *\n+   * Each item in the given list should be the String of an OFS path:\n+   * e.g. ofs://om/vol1/buck1/k1\n+   *\n+   * @param keyNameList key name list to be deleted\n    * @return true if the key is deleted, false otherwise\n    */\n   @Override\n-  public boolean deleteObjects(List<String> pathList) {\n-    // TODO: we will support deleteObjects in ofs.\n-    LOG.error(\"ofs currently does not support deleteObjects\");\n-    return false;\n+  public boolean deleteObjects(List<String> keyNameList) {\n+    LOG.trace(\"issuing delete for keys: {}\", keyNameList);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b0a7d9db47365585c2921e7b667b59648fc552a"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwMjg3MQ==", "bodyText": "I removed this trace log from both o3fs and ofs. IMO expanding it needs have to have an extra if (LOG.isTraceEnabled()) condition to prevent unnecessary evaluation which I think is not worth it.", "url": "https://github.com/apache/ozone/pull/1286#discussion_r467202871", "createdAt": "2020-08-07T18:28:30Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/ozonefs-common/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "diffHunk": "@@ -457,38 +458,79 @@ public boolean deleteObject(String path) {\n     }\n   }\n \n+  /**\n+   * Helper function to check if the list of key paths are in the same volume\n+   * and same bucket.\n+   */\n+  private boolean areInSameBucket(List<String> keyNameList) {\n+    if (keyNameList.size() == 0) {\n+      return true;\n+    }\n+    String firstKeyPath = keyNameList.get(0);\n+    final String volAndBucket = new OFSPath(firstKeyPath).getNonKeyPath();\n+    // If any key path's volume and bucket from the second element and on\n+    // in the list doesn't match the first element's, hasDifferentVolAndBucket\n+    // would be true\n+    boolean hasDifferentVolAndBucket = keyNameList.stream().skip(1)\n+        .anyMatch(p -> !(new OFSPath(p).getNonKeyPath().equals(volAndBucket)));\n+    return !hasDifferentVolAndBucket;\n+  }\n+\n   /**\n    * Helper method to delete an object specified by key name in bucket.\n    *\n-   * @param pathList key name list to be deleted\n+   * Only supports deleting keys in the same bucket in one call.\n+   *\n+   * Each item in the given list should be the String of an OFS path:\n+   * e.g. ofs://om/vol1/buck1/k1\n+   *\n+   * @param keyNameList key name list to be deleted\n    * @return true if the key is deleted, false otherwise\n    */\n   @Override\n-  public boolean deleteObjects(List<String> pathList) {\n-    // TODO: we will support deleteObjects in ofs.\n-    LOG.error(\"ofs currently does not support deleteObjects\");\n-    return false;\n+  public boolean deleteObjects(List<String> keyNameList) {\n+    LOG.trace(\"issuing delete for keys: {}\", keyNameList);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE1NzU2Mg=="}, "originalCommit": {"oid": "4b0a7d9db47365585c2921e7b667b59648fc552a"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxOTQ0ODAyOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozonefs-common/src/main/java/org/apache/hadoop/fs/ozone/BasicOzoneClientAdapterImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwNjowOToyN1rOG9t4sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMTozMzoxOFrOG_KA7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM2ODExNA==", "bodyText": "Why is this being deprecated?  It could delegate to the new method.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              @Deprecated\n          \n          \n            \n              protected void incrementCounter(Statistic objectsRead) {\n          \n          \n            \n                //noop: Use OzoneClientAdapterImpl which supports statistics.\n          \n          \n            \n              protected void incrementCounter(Statistic objectsRead) {\n          \n          \n            \n                incrementCounter(objectsRead, 1);", "url": "https://github.com/apache/ozone/pull/1286#discussion_r467368114", "createdAt": "2020-08-08T06:09:27Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/ozonefs-common/src/main/java/org/apache/hadoop/fs/ozone/BasicOzoneClientAdapterImpl.java", "diffHunk": "@@ -190,14 +190,19 @@ public InputStream readFile(String key) throws IOException {\n     }\n   }\n \n+  @Deprecated\n   protected void incrementCounter(Statistic objectsRead) {\n     //noop: Use OzoneClientAdapterImpl which supports statistics.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a01be17ef294eabba10844ad4c18cb05cd2e240"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE3MzkxNQ==", "bodyText": "My intention is to encourage new code to explicitly specify count since incrementing by 1 is now \"old\" with the introduction of batch delete / batch rename.\nAnd all the existing calls have been migrated to the new one incrementCounter(Statistic objectsRead, long count).\nActually I can just remove the old method since it is protected?", "url": "https://github.com/apache/ozone/pull/1286#discussion_r468173915", "createdAt": "2020-08-10T20:42:05Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/ozonefs-common/src/main/java/org/apache/hadoop/fs/ozone/BasicOzoneClientAdapterImpl.java", "diffHunk": "@@ -190,14 +190,19 @@ public InputStream readFile(String key) throws IOException {\n     }\n   }\n \n+  @Deprecated\n   protected void incrementCounter(Statistic objectsRead) {\n     //noop: Use OzoneClientAdapterImpl which supports statistics.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM2ODExNA=="}, "originalCommit": {"oid": "8a01be17ef294eabba10844ad4c18cb05cd2e240"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg3NzU0OQ==", "bodyText": "Done. Removed deprecated annotation.", "url": "https://github.com/apache/ozone/pull/1286#discussion_r468877549", "createdAt": "2020-08-11T21:33:18Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/ozonefs-common/src/main/java/org/apache/hadoop/fs/ozone/BasicOzoneClientAdapterImpl.java", "diffHunk": "@@ -190,14 +190,19 @@ public InputStream readFile(String key) throws IOException {\n     }\n   }\n \n+  @Deprecated\n   protected void incrementCounter(Statistic objectsRead) {\n     //noop: Use OzoneClientAdapterImpl which supports statistics.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM2ODExNA=="}, "originalCommit": {"oid": "8a01be17ef294eabba10844ad4c18cb05cd2e240"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxOTQ0ODQ5OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozonefs-common/src/main/java/org/apache/hadoop/fs/ozone/BasicOzoneFileSystem.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwNjoxMDowNFrOG9t46g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMToyODo1MVrOG_J4sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM2ODE3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              @Deprecated\n          \n          \n            \n              protected void incrementCounter(Statistic statistic) {\n          \n          \n            \n                //don't do anyting in this default implementation.\n          \n          \n            \n              protected void incrementCounter(Statistic statistic) {\n          \n          \n            \n                incrementCounter(statistic, 1);", "url": "https://github.com/apache/ozone/pull/1286#discussion_r467368170", "createdAt": "2020-08-08T06:10:04Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/ozonefs-common/src/main/java/org/apache/hadoop/fs/ozone/BasicOzoneFileSystem.java", "diffHunk": "@@ -220,17 +220,22 @@ protected InputStream createFSInputStream(InputStream inputStream) {\n     return new OzoneFSInputStream(inputStream, statistics);\n   }\n \n+  @Deprecated\n   protected void incrementCounter(Statistic statistic) {\n     //don't do anyting in this default implementation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a01be17ef294eabba10844ad4c18cb05cd2e240"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE3NjY4Ng==", "bodyText": "This method body is intentionally left empty in HDDS-1333 for compatibility fix I believe. Is this no longer the case? should be fine since the change is only calling another empty method. but I don't see the point of doing this as we are overriding this in OzoneFileSystem?", "url": "https://github.com/apache/ozone/pull/1286#discussion_r468176686", "createdAt": "2020-08-10T20:47:43Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/ozonefs-common/src/main/java/org/apache/hadoop/fs/ozone/BasicOzoneFileSystem.java", "diffHunk": "@@ -220,17 +220,22 @@ protected InputStream createFSInputStream(InputStream inputStream) {\n     return new OzoneFSInputStream(inputStream, statistics);\n   }\n \n+  @Deprecated\n   protected void incrementCounter(Statistic statistic) {\n     //don't do anyting in this default implementation.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM2ODE3MA=="}, "originalCommit": {"oid": "8a01be17ef294eabba10844ad4c18cb05cd2e240"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg3NTQ0MA==", "bodyText": "Updated in 5145690.", "url": "https://github.com/apache/ozone/pull/1286#discussion_r468875440", "createdAt": "2020-08-11T21:28:51Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/ozonefs-common/src/main/java/org/apache/hadoop/fs/ozone/BasicOzoneFileSystem.java", "diffHunk": "@@ -220,17 +220,22 @@ protected InputStream createFSInputStream(InputStream inputStream) {\n     return new OzoneFSInputStream(inputStream, statistics);\n   }\n \n+  @Deprecated\n   protected void incrementCounter(Statistic statistic) {\n     //don't do anyting in this default implementation.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM2ODE3MA=="}, "originalCommit": {"oid": "8a01be17ef294eabba10844ad4c18cb05cd2e240"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxOTQ0ODg2OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozonefs-common/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwNjoxMDozNFrOG9t5FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMTozMTo1NlrOG_J-aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM2ODIxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              @Deprecated\n          \n          \n            \n              protected void incrementCounter(Statistic objectsRead) {\n          \n          \n            \n                //noop: Use OzoneClientAdapterImpl which supports statistics.\n          \n          \n            \n              protected void incrementCounter(Statistic objectsRead) {\n          \n          \n            \n                incrementCounter(objectsRead, 1);", "url": "https://github.com/apache/ozone/pull/1286#discussion_r467368213", "createdAt": "2020-08-08T06:10:34Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/ozonefs-common/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "diffHunk": "@@ -301,14 +302,19 @@ public InputStream readFile(String pathStr) throws IOException {\n     }\n   }\n \n+  @Deprecated\n   protected void incrementCounter(Statistic objectsRead) {\n     //noop: Use OzoneClientAdapterImpl which supports statistics.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a01be17ef294eabba10844ad4c18cb05cd2e240"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg3NjkwNw==", "bodyText": "I have removed the old method from all Impls. Only kept it in BasicOzoneFileSystem/BasicRootedOzoneFileSystem.", "url": "https://github.com/apache/ozone/pull/1286#discussion_r468876907", "createdAt": "2020-08-11T21:31:56Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/ozonefs-common/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "diffHunk": "@@ -301,14 +302,19 @@ public InputStream readFile(String pathStr) throws IOException {\n     }\n   }\n \n+  @Deprecated\n   protected void incrementCounter(Statistic objectsRead) {\n     //noop: Use OzoneClientAdapterImpl which supports statistics.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM2ODIxMw=="}, "originalCommit": {"oid": "8a01be17ef294eabba10844ad4c18cb05cd2e240"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxOTQ0OTMwOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozonefs-common/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneFileSystem.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwNjoxMToxMFrOG9t5RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwNjoxMToxMFrOG9t5RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM2ODI2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              @Deprecated\n          \n          \n            \n              protected void incrementCounter(Statistic statistic) {\n          \n          \n            \n                //don't do anything in this default implementation.\n          \n          \n            \n              protected void incrementCounter(Statistic statistic) {\n          \n          \n            \n                incrementCounter(statistic, 1);", "url": "https://github.com/apache/ozone/pull/1286#discussion_r467368261", "createdAt": "2020-08-08T06:11:10Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/ozonefs-common/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneFileSystem.java", "diffHunk": "@@ -183,25 +186,30 @@ public String getScheme() {\n \n   @Override\n   public FSDataInputStream open(Path path, int bufferSize) throws IOException {\n-    incrementCounter(Statistic.INVOCATION_OPEN);\n+    incrementCounter(Statistic.INVOCATION_OPEN, 1);\n     statistics.incrementReadOps(1);\n     LOG.trace(\"open() path: {}\", path);\n     final String key = pathToKey(path);\n     return new FSDataInputStream(\n         new OzoneFSInputStream(adapter.readFile(key), statistics));\n   }\n \n+  @Deprecated\n   protected void incrementCounter(Statistic statistic) {\n     //don't do anything in this default implementation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a01be17ef294eabba10844ad4c18cb05cd2e240"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxOTUxNTMwOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozonefs-common/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwNzo1MDo1NVrOG9uXgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDo1Nzo0OVrOG-fjJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM3NjAwMQ==", "bodyText": "Nit: we could save two negations by using allMatch().", "url": "https://github.com/apache/ozone/pull/1286#discussion_r467376001", "createdAt": "2020-08-08T07:50:55Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/ozonefs-common/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "diffHunk": "@@ -457,45 +463,83 @@ public boolean deleteObject(String path) {\n     }\n   }\n \n+  /**\n+   * Helper function to check if the list of key paths are in the same volume\n+   * and same bucket.\n+   */\n+  private boolean areInSameBucket(List<String> keyNameList) {\n+    if (keyNameList.size() == 0) {\n+      return true;\n+    }\n+    String firstKeyPath = keyNameList.get(0);\n+    final String volAndBucket = new OFSPath(firstKeyPath).getNonKeyPath();\n+    // If any key path's volume and bucket from the second element and on\n+    // in the list doesn't match the first element's, hasDifferentVolAndBucket\n+    // would be true\n+    boolean hasDifferentVolAndBucket = keyNameList.stream().skip(1)\n+        .anyMatch(p -> !(new OFSPath(p).getNonKeyPath().equals(volAndBucket)));\n+    return !hasDifferentVolAndBucket;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a01be17ef294eabba10844ad4c18cb05cd2e240"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE4MTc5Ng==", "bodyText": "Good catch!", "url": "https://github.com/apache/ozone/pull/1286#discussion_r468181796", "createdAt": "2020-08-10T20:57:49Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/ozonefs-common/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "diffHunk": "@@ -457,45 +463,83 @@ public boolean deleteObject(String path) {\n     }\n   }\n \n+  /**\n+   * Helper function to check if the list of key paths are in the same volume\n+   * and same bucket.\n+   */\n+  private boolean areInSameBucket(List<String> keyNameList) {\n+    if (keyNameList.size() == 0) {\n+      return true;\n+    }\n+    String firstKeyPath = keyNameList.get(0);\n+    final String volAndBucket = new OFSPath(firstKeyPath).getNonKeyPath();\n+    // If any key path's volume and bucket from the second element and on\n+    // in the list doesn't match the first element's, hasDifferentVolAndBucket\n+    // would be true\n+    boolean hasDifferentVolAndBucket = keyNameList.stream().skip(1)\n+        .anyMatch(p -> !(new OFSPath(p).getNonKeyPath().equals(volAndBucket)));\n+    return !hasDifferentVolAndBucket;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM3NjAwMQ=="}, "originalCommit": {"oid": "8a01be17ef294eabba10844ad4c18cb05cd2e240"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxOTUxNTcwOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozonefs-common/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwNzo1MTo0M1rOG9uXuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwNzo1MTo0M1rOG9uXuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM3NjA1Ng==", "bodyText": "Nit: Sonar prefers isEmpty() over size() == 0.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (keyNameList.size() == 0) {\n          \n          \n            \n                if (keyNameList.isEmpty()) {", "url": "https://github.com/apache/ozone/pull/1286#discussion_r467376056", "createdAt": "2020-08-08T07:51:43Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/ozonefs-common/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "diffHunk": "@@ -457,45 +463,83 @@ public boolean deleteObject(String path) {\n     }\n   }\n \n+  /**\n+   * Helper function to check if the list of key paths are in the same volume\n+   * and same bucket.\n+   */\n+  private boolean areInSameBucket(List<String> keyNameList) {\n+    if (keyNameList.size() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a01be17ef294eabba10844ad4c18cb05cd2e240"}, "originalPosition": 83}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4979, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}