{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2ODYzMTU4", "number": 1507, "title": "HDDS-4307.Start Trash Emptier in Ozone Manager", "bodyText": "What changes were proposed in this pull request?\nThe change here is to implement a Trash emptier for Trash Deletion. This feature basically introduces Trash for Ozone File System by leveraging the hadoop code for Trash ( Trash.java) . When a client does a delete on the filesystem, it calls the fs.rename( src,dst,Options) api which does a rename to the Trash Path. As an initial approach all operations are on the KeyTable itself.\nThis pr starts a TrashEmptier and deletes all the files obtained by fs.getTrashRoots(). By passing an OFS uri pointing to the root to this fs  instance covering all volumes and buckets will be ensured.  Thus  the background service starts the emptier thread which basically iterates through the trash roots and does the checkpointing and then deletion from checkpointed directories.\nbin/ozone fs -rm  o3fs://buck1.vol1/Test2\n2020-10-20 18:42:12,779 [main] INFO fs.TrashPolicyDefault: Moved: 'o3fs://buck1.vol1/Test2' to trash at: /.Trash/sadanand.shenoy/Current/Test2\nbin/ozone fs -ls -R  o3fs://buck1.vol1/\n-rw-rw-rw-   1 sadanand.shenoy sadanand.shenoy          0 2020-10-20 18:42 o3fs://buck1.vol1/.Trash/sadanand.shenoy/Current/Test2\nafter checkpoint interval\n-rw-rw-rw-   1 sadanand.shenoy sadanand.shenoy          0 2020-10-20 18:45 o3fs://buck1.vol1/.Trash/sadanand.shenoy/201020184500/Test2\nThe key gets deleted after the trash interval.\nWhat is the link to the Apache JIRA\nhttps://issues.apache.org/jira/browse/HDDS-4307\nHow was this patch tested?\nManually as well as few unit Tests.", "createdAt": "2020-10-20T14:43:51Z", "url": "https://github.com/apache/ozone/pull/1507", "merged": true, "mergeCommit": {"oid": "90190f50f42470ea25c68ee3db42e7294e8b44eb"}, "closed": true, "closedAt": "2020-11-11T12:19:10Z", "author": {"login": "sadanand48"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdUZc9rgH2gAyNTA2ODYzMTU4OmIwN2VlYmQyMjQyNTg3OGQ0NjA4NTYxOGJmNzFlODg0MGIxZGM4YmM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdbc9YxgFqTUyODEyMDU1MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b07eebd22425878d46085618bf71e8840b1dc8bc", "author": {"user": {"login": "sadanand48", "name": "Sadanand Shenoy"}}, "url": "https://github.com/apache/ozone/commit/b07eebd22425878d46085618bf71e8840b1dc8bc", "committedDate": "2020-10-20T14:14:59Z", "message": "HDDS-4307.Start Background Service for Trash Deletion in Ozone Manager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9341b92ccb4e7416aa5881896035d8b2300cf939", "author": {"user": {"login": "sadanand48", "name": "Sadanand Shenoy"}}, "url": "https://github.com/apache/ozone/commit/9341b92ccb4e7416aa5881896035d8b2300cf939", "committedDate": "2020-10-20T14:54:57Z", "message": "remove wildcard import"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyODc3OTA4", "url": "https://github.com/apache/ozone/pull/1507#pullrequestreview-512877908", "createdAt": "2020-10-20T15:43:37Z", "commit": {"oid": "9341b92ccb4e7416aa5881896035d8b2300cf939"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTo0MzozOFrOHlENMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNzozMzozMlrOHlJZag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYyODI3NA==", "bodyText": "The indentation is at 4, it should be at 2.", "url": "https://github.com/apache/ozone/pull/1507#discussion_r508628274", "createdAt": "2020-10-20T15:43:38Z", "author": {"login": "mukul1987"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/TrashDeletingService.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.CommonConfigurationKeysPublic;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Trash;\n+import org.apache.hadoop.hdds.utils.BackgroundService;\n+import org.apache.hadoop.hdds.utils.BackgroundTask;\n+import org.apache.hadoop.hdds.utils.BackgroundTaskQueue;\n+import org.apache.hadoop.hdds.utils.BackgroundTaskResult;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+import org.apache.hadoop.security.SecurityUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.PrivilegedExceptionAction;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_ADDRESS_KEY;\n+\n+/**\n+ * Background Service to empty keys that are moved to Trash.\n+ */\n+public class TrashDeletingService extends BackgroundService {\n+\n+    private static final Logger LOG =\n+            LoggerFactory.getLogger(TrashDeletingService.class);\n+\n+    // Use single thread for  now\n+    private final static int KEY_DELETING_CORE_POOL_SIZE = 1;\n+\n+    private OzoneManager ozoneManager;\n+\n+    public void setFsConf(Configuration fsConf) {\n+        this.fsConf = fsConf;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9341b92ccb4e7416aa5881896035d8b2300cf939"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcxMzMyMg==", "bodyText": "This will start 1 thread for the entire filesystem for every run? why do we need this a background service ?", "url": "https://github.com/apache/ozone/pull/1507#discussion_r508713322", "createdAt": "2020-10-20T17:33:32Z", "author": {"login": "mukul1987"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/TrashDeletingService.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.CommonConfigurationKeysPublic;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Trash;\n+import org.apache.hadoop.hdds.utils.BackgroundService;\n+import org.apache.hadoop.hdds.utils.BackgroundTask;\n+import org.apache.hadoop.hdds.utils.BackgroundTaskQueue;\n+import org.apache.hadoop.hdds.utils.BackgroundTaskResult;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+import org.apache.hadoop.security.SecurityUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.PrivilegedExceptionAction;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_ADDRESS_KEY;\n+\n+/**\n+ * Background Service to empty keys that are moved to Trash.\n+ */\n+public class TrashDeletingService extends BackgroundService {\n+\n+    private static final Logger LOG =\n+            LoggerFactory.getLogger(TrashDeletingService.class);\n+\n+    // Use single thread for  now\n+    private final static int KEY_DELETING_CORE_POOL_SIZE = 1;\n+\n+    private OzoneManager ozoneManager;\n+\n+    public void setFsConf(Configuration fsConf) {\n+        this.fsConf = fsConf;\n+    }\n+\n+    private Configuration fsConf;\n+\n+    public TrashDeletingService(long interval, long serviceTimeout,OzoneManager ozoneManager) {\n+        super(\"TrashDeletingService\", interval, TimeUnit.MILLISECONDS, KEY_DELETING_CORE_POOL_SIZE, serviceTimeout);\n+        this.ozoneManager = ozoneManager;\n+        fsConf = new Configuration();\n+    }\n+\n+\n+    @Override\n+    public BackgroundTaskQueue getTasks() {\n+        BackgroundTaskQueue queue = new BackgroundTaskQueue();\n+        String rootPath = String.format(\"%s://%s/\",\n+                OzoneConsts.OZONE_OFS_URI_SCHEME, ozoneManager.getConfiguration().get(OZONE_OM_ADDRESS_KEY));\n+        // Configuration object where the rootpath is set to an OFS Uri.\n+        fsConf.set(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY, rootPath);\n+        FileSystem fs = null;\n+        try {\n+            fs = SecurityUtil.doAsLoginUser(\n+                    new PrivilegedExceptionAction<FileSystem>() {\n+                        @Override\n+                        public FileSystem run() throws IOException {\n+                            return FileSystem.get(fsConf);\n+                        }\n+                    });\n+        } catch (IOException e) {\n+            LOG.error(\"Cannot instantiate filesystem instance\");\n+        }\n+        queue.add(new TrashDeletingTask(fs,fsConf));\n+        return queue;\n+    }\n+\n+    /**\n+     * This task creates an emptier thread that deletes all keys obtained from the trashRoots (fs.getTrashRoots)\n+     */\n+    private class TrashDeletingTask implements BackgroundTask {\n+\n+        FileSystem fs;\n+        Configuration conf;\n+\n+        public TrashDeletingTask(FileSystem fs, Configuration conf) {\n+            this.fs = fs;\n+            this.conf = conf;\n+        }\n+\n+        @Override\n+        public BackgroundTaskResult call() throws Exception {\n+            Thread emptier = new Thread(new Trash(fs,conf).getEmptier(),\"Trash Emptier\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9341b92ccb4e7416aa5881896035d8b2300cf939"}, "originalPosition": 103}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzMjk0NzYw", "url": "https://github.com/apache/ozone/pull/1507#pullrequestreview-513294760", "createdAt": "2020-10-21T04:17:25Z", "commit": {"oid": "9341b92ccb4e7416aa5881896035d8b2300cf939"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNDoxNzoyNVrOHlZpfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNDoxNzoyNVrOHlZpfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk3OTU4MA==", "bodyText": "wouldnt 60s default be too frequent ?", "url": "https://github.com/apache/ozone/pull/1507#discussion_r508979580", "createdAt": "2020-10-21T04:17:25Z", "author": {"login": "prashantpogde"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/OzoneConfigKeys.java", "diffHunk": "@@ -197,6 +197,12 @@\n   public static final String OZONE_BLOCK_DELETING_SERVICE_INTERVAL_DEFAULT\n       = \"60s\";\n \n+  public static final String OZONE_TRASH_DELETING_SERVICE_INTERVAL =\n+          \"ozone.trash.deleting.service.interval\";\n+  public static final String OZONE_TRASH_DELETING_SERVICE_INTERVAL_DEFAULT\n+          = \"60s\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9341b92ccb4e7416aa5881896035d8b2300cf939"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0MzQ0MjQy", "url": "https://github.com/apache/ozone/pull/1507#pullrequestreview-514344242", "createdAt": "2020-10-22T04:03:46Z", "commit": {"oid": "9341b92ccb4e7416aa5881896035d8b2300cf939"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNDowMzo0N1rOHmPz-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNDoyMToyM1rOHmQDMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg2NzAwMg==", "bodyText": "Please add failure message -> Assert.fail(\"Delete from Trash Failed\");", "url": "https://github.com/apache/ozone/pull/1507#discussion_r509867002", "createdAt": "2020-10-22T04:03:47Z", "author": {"login": "rakeshadr"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/fs/ozone/TestRootedOzoneFileSystem.java", "diffHunk": "@@ -1170,4 +1172,50 @@ public void testFileDelete() throws Exception {\n     Boolean falseResult = fs.delete(parent, true);\n     assertFalse(falseResult);\n   }\n+\n+  /**\n+   * @throws Exception\n+   * 1.Move a Key to Trash\n+   * 2.Start TrashDeletingService\n+   * 3.Verify that the TrashDeletingService purges the key after minimum set TrashInterval of 1 min.\n+   */\n+  @Test\n+  public void testTrashDeletingService() throws Exception {\n+    String testKeyName = \"keyToBeDeleted\";\n+    Path path = new Path(bucketPath, testKeyName);\n+    try (FSDataOutputStream stream = fs.create(path)) {\n+      stream.write(1);\n+    }\n+    // Call moveToTrash. We can't call protected fs.rename() directly\n+    trash.moveToTrash(path);\n+    TrashDeletingService trashDeletingService = new\n+            TrashDeletingService(60,300,cluster.getOzoneManager());\n+    conf.setLong(FS_TRASH_INTERVAL_KEY,1);\n+    trashDeletingService.setFsConf(conf);\n+    trashDeletingService.start();\n+\n+\n+    // Construct paths\n+    String username = UserGroupInformation.getCurrentUser().getShortUserName();\n+    Path trashRoot = new Path(bucketPath, TRASH_PREFIX);\n+    Path userTrash = new Path(trashRoot, username);\n+    Path userTrashCurrent = new Path(userTrash, \"Current\");\n+    String key = path.toString().substring(1);\n+    Path trashPath = new Path(userTrashCurrent, key);\n+\n+    // Wait until the TrashDeletingService purges the key\n+    GenericTestUtils.waitFor(()-> {\n+      try {\n+        return !ofs.exists(trashPath);\n+      } catch (IOException e) {\n+        LOG.error(\"Delete from Trash Failed\");\n+        Assert.fail();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9341b92ccb4e7416aa5881896035d8b2300cf939"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg3MDMxMQ==", "bodyText": "Please shutdown the trashDeletingService during OM stop.", "url": "https://github.com/apache/ozone/pull/1507#discussion_r509870311", "createdAt": "2020-10-22T04:18:58Z", "author": {"login": "rakeshadr"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -1228,17 +1236,34 @@ public void restart() throws IOException {\n       // Allow OM to start as Http Server failure is not fatal.\n       LOG.error(\"OM HttpServer failed to start.\", ex);\n     }\n-\n     omRpcServer.start();\n+\n     isOmRpcServerRunning = true;\n \n+    startTrashDeletingService();\n+\n     registerMXBean();\n \n     startJVMPauseMonitor();\n     setStartTime();\n     omState = State.RUNNING;\n   }\n \n+  private void startTrashDeletingService() {\n+    if (trashDeletingService == null) {\n+      long serviceTimeout = configuration.getTimeDuration(\n+              OZONE_TRASH_DELETING_SERVICE_TIMEOUT,\n+              OZONE_TRASH_DELETING_SERVICE_TIMEOUT_DEFAULT,\n+              TimeUnit.MILLISECONDS);\n+      long trashDeletionInterval = configuration.getTimeDuration(\n+              OZONE_TRASH_DELETING_SERVICE_INTERVAL,\n+              OZONE_TRASH_DELETING_SERVICE_INTERVAL_DEFAULT,\n+              TimeUnit.MILLISECONDS);\n+      trashDeletingService = new TrashDeletingService(trashDeletionInterval, serviceTimeout, this);\n+      trashDeletingService.start();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9341b92ccb4e7416aa5881896035d8b2300cf939"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg3MDg5Nw==", "bodyText": "I saw you are setting fsConf.set(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY, rootPath); to get FS. Is that the reason for creating new Configuration() instead of using ozoneManager.getConfiguration() ?\nIf yes, can you please add comments mentioning the reason.", "url": "https://github.com/apache/ozone/pull/1507#discussion_r509870897", "createdAt": "2020-10-22T04:21:23Z", "author": {"login": "rakeshadr"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/TrashDeletingService.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.CommonConfigurationKeysPublic;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Trash;\n+import org.apache.hadoop.hdds.utils.BackgroundService;\n+import org.apache.hadoop.hdds.utils.BackgroundTask;\n+import org.apache.hadoop.hdds.utils.BackgroundTaskQueue;\n+import org.apache.hadoop.hdds.utils.BackgroundTaskResult;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+import org.apache.hadoop.security.SecurityUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.PrivilegedExceptionAction;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_ADDRESS_KEY;\n+\n+/**\n+ * Background Service to empty keys that are moved to Trash.\n+ */\n+public class TrashDeletingService extends BackgroundService {\n+\n+    private static final Logger LOG =\n+            LoggerFactory.getLogger(TrashDeletingService.class);\n+\n+    // Use single thread for  now\n+    private final static int KEY_DELETING_CORE_POOL_SIZE = 1;\n+\n+    private OzoneManager ozoneManager;\n+\n+    public void setFsConf(Configuration fsConf) {\n+        this.fsConf = fsConf;\n+    }\n+\n+    private Configuration fsConf;\n+\n+    public TrashDeletingService(long interval, long serviceTimeout,OzoneManager ozoneManager) {\n+        super(\"TrashDeletingService\", interval, TimeUnit.MILLISECONDS, KEY_DELETING_CORE_POOL_SIZE, serviceTimeout);\n+        this.ozoneManager = ozoneManager;\n+        fsConf = new Configuration();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9341b92ccb4e7416aa5881896035d8b2300cf939"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0MzczMzg2", "url": "https://github.com/apache/ozone/pull/1507#pullrequestreview-514373386", "createdAt": "2020-10-22T05:38:40Z", "commit": {"oid": "9341b92ccb4e7416aa5881896035d8b2300cf939"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNTozODo0MFrOHmRTVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNjoxMzoxNlrOHmR__A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg5MTQxNA==", "bodyText": "Please add the new configs to ozone-default.xml. Thats the reason for TestOzoneConfigurationFields unit test failure.", "url": "https://github.com/apache/ozone/pull/1507#discussion_r509891414", "createdAt": "2020-10-22T05:38:40Z", "author": {"login": "rakeshadr"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/OzoneConfigKeys.java", "diffHunk": "@@ -197,6 +197,12 @@\n   public static final String OZONE_BLOCK_DELETING_SERVICE_INTERVAL_DEFAULT\n       = \"60s\";\n \n+  public static final String OZONE_TRASH_DELETING_SERVICE_INTERVAL =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9341b92ccb4e7416aa5881896035d8b2300cf939"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg5Nzk0Nw==", "bodyText": "Please add exception trace to log like,\nLOG.error(\"Cannot instantiate filesystem instance\", e);\n\n\nShould we proceed to add TrashDeletingTask to queue as fs instantiation has failed ?", "url": "https://github.com/apache/ozone/pull/1507#discussion_r509897947", "createdAt": "2020-10-22T05:59:57Z", "author": {"login": "rakeshadr"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/TrashDeletingService.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.CommonConfigurationKeysPublic;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Trash;\n+import org.apache.hadoop.hdds.utils.BackgroundService;\n+import org.apache.hadoop.hdds.utils.BackgroundTask;\n+import org.apache.hadoop.hdds.utils.BackgroundTaskQueue;\n+import org.apache.hadoop.hdds.utils.BackgroundTaskResult;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+import org.apache.hadoop.security.SecurityUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.PrivilegedExceptionAction;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_ADDRESS_KEY;\n+\n+/**\n+ * Background Service to empty keys that are moved to Trash.\n+ */\n+public class TrashDeletingService extends BackgroundService {\n+\n+    private static final Logger LOG =\n+            LoggerFactory.getLogger(TrashDeletingService.class);\n+\n+    // Use single thread for  now\n+    private final static int KEY_DELETING_CORE_POOL_SIZE = 1;\n+\n+    private OzoneManager ozoneManager;\n+\n+    public void setFsConf(Configuration fsConf) {\n+        this.fsConf = fsConf;\n+    }\n+\n+    private Configuration fsConf;\n+\n+    public TrashDeletingService(long interval, long serviceTimeout,OzoneManager ozoneManager) {\n+        super(\"TrashDeletingService\", interval, TimeUnit.MILLISECONDS, KEY_DELETING_CORE_POOL_SIZE, serviceTimeout);\n+        this.ozoneManager = ozoneManager;\n+        fsConf = new Configuration();\n+    }\n+\n+\n+    @Override\n+    public BackgroundTaskQueue getTasks() {\n+        BackgroundTaskQueue queue = new BackgroundTaskQueue();\n+        String rootPath = String.format(\"%s://%s/\",\n+                OzoneConsts.OZONE_OFS_URI_SCHEME, ozoneManager.getConfiguration().get(OZONE_OM_ADDRESS_KEY));\n+        // Configuration object where the rootpath is set to an OFS Uri.\n+        fsConf.set(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY, rootPath);\n+        FileSystem fs = null;\n+        try {\n+            fs = SecurityUtil.doAsLoginUser(\n+                    new PrivilegedExceptionAction<FileSystem>() {\n+                        @Override\n+                        public FileSystem run() throws IOException {\n+                            return FileSystem.get(fsConf);\n+                        }\n+                    });\n+        } catch (IOException e) {\n+            LOG.error(\"Cannot instantiate filesystem instance\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9341b92ccb4e7416aa5881896035d8b2300cf939"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkwMTkyNw==", "bodyText": "would fs be created/instantiated for every iteration ? Can we resuse fs ?", "url": "https://github.com/apache/ozone/pull/1507#discussion_r509901927", "createdAt": "2020-10-22T06:10:59Z", "author": {"login": "rakeshadr"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/TrashDeletingService.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.CommonConfigurationKeysPublic;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Trash;\n+import org.apache.hadoop.hdds.utils.BackgroundService;\n+import org.apache.hadoop.hdds.utils.BackgroundTask;\n+import org.apache.hadoop.hdds.utils.BackgroundTaskQueue;\n+import org.apache.hadoop.hdds.utils.BackgroundTaskResult;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+import org.apache.hadoop.security.SecurityUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.PrivilegedExceptionAction;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_ADDRESS_KEY;\n+\n+/**\n+ * Background Service to empty keys that are moved to Trash.\n+ */\n+public class TrashDeletingService extends BackgroundService {\n+\n+    private static final Logger LOG =\n+            LoggerFactory.getLogger(TrashDeletingService.class);\n+\n+    // Use single thread for  now\n+    private final static int KEY_DELETING_CORE_POOL_SIZE = 1;\n+\n+    private OzoneManager ozoneManager;\n+\n+    public void setFsConf(Configuration fsConf) {\n+        this.fsConf = fsConf;\n+    }\n+\n+    private Configuration fsConf;\n+\n+    public TrashDeletingService(long interval, long serviceTimeout,OzoneManager ozoneManager) {\n+        super(\"TrashDeletingService\", interval, TimeUnit.MILLISECONDS, KEY_DELETING_CORE_POOL_SIZE, serviceTimeout);\n+        this.ozoneManager = ozoneManager;\n+        fsConf = new Configuration();\n+    }\n+\n+\n+    @Override\n+    public BackgroundTaskQueue getTasks() {\n+        BackgroundTaskQueue queue = new BackgroundTaskQueue();\n+        String rootPath = String.format(\"%s://%s/\",\n+                OzoneConsts.OZONE_OFS_URI_SCHEME, ozoneManager.getConfiguration().get(OZONE_OM_ADDRESS_KEY));\n+        // Configuration object where the rootpath is set to an OFS Uri.\n+        fsConf.set(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY, rootPath);\n+        FileSystem fs = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9341b92ccb4e7416aa5881896035d8b2300cf939"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkwMjg0NA==", "bodyText": "I saw setFsConf used only in test. Please add @VisibleForTesting.", "url": "https://github.com/apache/ozone/pull/1507#discussion_r509902844", "createdAt": "2020-10-22T06:13:16Z", "author": {"login": "rakeshadr"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/TrashDeletingService.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.CommonConfigurationKeysPublic;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Trash;\n+import org.apache.hadoop.hdds.utils.BackgroundService;\n+import org.apache.hadoop.hdds.utils.BackgroundTask;\n+import org.apache.hadoop.hdds.utils.BackgroundTaskQueue;\n+import org.apache.hadoop.hdds.utils.BackgroundTaskResult;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+import org.apache.hadoop.security.SecurityUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.PrivilegedExceptionAction;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_ADDRESS_KEY;\n+\n+/**\n+ * Background Service to empty keys that are moved to Trash.\n+ */\n+public class TrashDeletingService extends BackgroundService {\n+\n+    private static final Logger LOG =\n+            LoggerFactory.getLogger(TrashDeletingService.class);\n+\n+    // Use single thread for  now\n+    private final static int KEY_DELETING_CORE_POOL_SIZE = 1;\n+\n+    private OzoneManager ozoneManager;\n+\n+    public void setFsConf(Configuration fsConf) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9341b92ccb4e7416aa5881896035d8b2300cf939"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51ef97259e5f47993ace8f3854121406e31e8ddb", "author": {"user": {"login": "sadanand48", "name": "Sadanand Shenoy"}}, "url": "https://github.com/apache/ozone/commit/51ef97259e5f47993ace8f3854121406e31e8ddb", "committedDate": "2020-10-23T13:39:41Z", "message": "Not using background service for a single thread for now"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NjU4NDk0", "url": "https://github.com/apache/ozone/pull/1507#pullrequestreview-516658494", "createdAt": "2020-10-26T10:50:12Z", "commit": {"oid": "51ef97259e5f47993ace8f3854121406e31e8ddb"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MzY3MzY4", "url": "https://github.com/apache/ozone/pull/1507#pullrequestreview-517367368", "createdAt": "2020-10-27T05:54:42Z", "commit": {"oid": "51ef97259e5f47993ace8f3854121406e31e8ddb"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNTo1NDo0MlrOHosZfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOToxMzo0NlrOHoyC-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQzMjUxMQ==", "bodyText": "Please add a warn or even  a lighter info log message to make the behavior loud to the users as this will disable trash emptier.", "url": "https://github.com/apache/ozone/pull/1507#discussion_r512432511", "createdAt": "2020-10-27T05:54:42Z", "author": {"login": "rakeshadr"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -1228,17 +1238,57 @@ public void restart() throws IOException {\n       // Allow OM to start as Http Server failure is not fatal.\n       LOG.error(\"OM HttpServer failed to start.\", ex);\n     }\n-\n     omRpcServer.start();\n+\n     isOmRpcServerRunning = true;\n \n+    startTrashEmptier(configuration);\n+\n     registerMXBean();\n \n     startJVMPauseMonitor();\n     setStartTime();\n     omState = State.RUNNING;\n   }\n \n+\n+  /**\n+   * @param conf\n+   * @throws IOException\n+   * Starts a Trash Emptier thread that does an fs.trashRoots and performs\n+   * checkpointing & deletion\n+   */\n+  private void startTrashEmptier(Configuration conf) throws IOException {\n+    long trashInterval =\n+            conf.getLong(FS_TRASH_INTERVAL_KEY, FS_TRASH_INTERVAL_DEFAULT);\n+    if (trashInterval == 0) {\n+      return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51ef97259e5f47993ace8f3854121406e31e8ddb"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUyNTA0OA==", "bodyText": "Please follow general guidelines for the javadoc.\n\nBegins with function details.\nProvide @param details.\nThen @return info.\nEnding with @throws exception cases.", "url": "https://github.com/apache/ozone/pull/1507#discussion_r512525048", "createdAt": "2020-10-27T09:13:46Z", "author": {"login": "rakeshadr"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -1228,17 +1238,57 @@ public void restart() throws IOException {\n       // Allow OM to start as Http Server failure is not fatal.\n       LOG.error(\"OM HttpServer failed to start.\", ex);\n     }\n-\n     omRpcServer.start();\n+\n     isOmRpcServerRunning = true;\n \n+    startTrashEmptier(configuration);\n+\n     registerMXBean();\n \n     startJVMPauseMonitor();\n     setStartTime();\n     omState = State.RUNNING;\n   }\n \n+\n+  /**\n+   * @param conf\n+   * @throws IOException\n+   * Starts a Trash Emptier thread that does an fs.trashRoots and performs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51ef97259e5f47993ace8f3854121406e31e8ddb"}, "originalPosition": 81}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16e7ba1575a02486e9289202135ae096024f36d8", "author": {"user": {"login": "sadanand48", "name": "Sadanand Shenoy"}}, "url": "https://github.com/apache/ozone/commit/16e7ba1575a02486e9289202135ae096024f36d8", "committedDate": "2020-10-27T10:15:37Z", "message": "Addressed review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b8873e1200a21b2c268b212aef53e2e70f1fe58", "author": {"user": {"login": "sadanand48", "name": "Sadanand Shenoy"}}, "url": "https://github.com/apache/ozone/commit/4b8873e1200a21b2c268b212aef53e2e70f1fe58", "committedDate": "2020-10-27T10:17:08Z", "message": "Addressed review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ddf8fab48ac2735253206c2901dc1716b9d3923a", "author": {"user": {"login": "sadanand48", "name": "Sadanand Shenoy"}}, "url": "https://github.com/apache/ozone/commit/ddf8fab48ac2735253206c2901dc1716b9d3923a", "committedDate": "2020-10-27T14:04:24Z", "message": "fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed0fc93878eee314b362eb5178bfd26b53eb446d", "author": {"user": {"login": "sadanand48", "name": "Sadanand Shenoy"}}, "url": "https://github.com/apache/ozone/commit/ed0fc93878eee314b362eb5178bfd26b53eb446d", "committedDate": "2020-10-29T04:57:43Z", "message": "Run the trash emptier only on the leader OM"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55a47e643fcb980b64a3898ab68918022a824456", "author": {"user": {"login": "sadanand48", "name": "Sadanand Shenoy"}}, "url": "https://github.com/apache/ozone/commit/55a47e643fcb980b64a3898ab68918022a824456", "committedDate": "2020-10-29T16:59:59Z", "message": "trigger new CI check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df54544293407e7b88795eea79418ba429c3b0c9", "author": {"user": {"login": "sadanand48", "name": "Sadanand Shenoy"}}, "url": "https://github.com/apache/ozone/commit/df54544293407e7b88795eea79418ba429c3b0c9", "committedDate": "2020-10-29T17:00:35Z", "message": "trigger new CI check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f09fff75ada76c0daf214c94aca2d8a72750d1ea", "author": {"user": {"login": "sadanand48", "name": "Sadanand Shenoy"}}, "url": "https://github.com/apache/ozone/commit/f09fff75ada76c0daf214c94aca2d8a72750d1ea", "committedDate": "2020-11-11T10:18:22Z", "message": "remove isLeader check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dda26bb8bda3f13a96fd3590a54ae4ab866405cc", "author": {"user": {"login": "sadanand48", "name": "Sadanand Shenoy"}}, "url": "https://github.com/apache/ozone/commit/dda26bb8bda3f13a96fd3590a54ae4ab866405cc", "committedDate": "2020-11-11T10:20:59Z", "message": "Update OzoneManager.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4MTIwNTUw", "url": "https://github.com/apache/ozone/pull/1507#pullrequestreview-528120550", "createdAt": "2020-11-11T12:17:35Z", "commit": {"oid": "dda26bb8bda3f13a96fd3590a54ae4ab866405cc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2146, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}