{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4ODUyNDI5", "number": 590, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwOTowMzoxNFrODiP62g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODozNjoxNFrODi-5Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MjM5MDAyOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/BasicOzoneClientAdapterImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwOTowMzoxNFrOFtZKRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNjo0NDozMVrOFt6SiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE0MjQ2OQ==", "bodyText": "replicationFactor can now be a local variable.", "url": "https://github.com/apache/ozone/pull/590#discussion_r383142469", "createdAt": "2020-02-24T09:03:14Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/BasicOzoneClientAdapterImpl.java", "diffHunk": "@@ -210,10 +210,14 @@ protected void incrementCounter(Statistic objectsRead) {\n   }\n \n   @Override\n-  public OzoneFSOutputStream createFile(String key, boolean overWrite,\n+  public OzoneFSOutputStream createFile(String key, short replication, boolean overWrite,\n       boolean recursive) throws IOException {\n     incrementCounter(Statistic.OBJECTS_CREATED);\n     try {\n+      if (replication == ReplicationFactor.ONE.getValue()\n+          || replication == ReplicationFactor.THREE.getValue()) {\n+        replicationFactor = ReplicationFactor.valueOf(replication);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c9fc7fa4ca9be5bec2d865d5f9c93d68a49cdd3"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI2MjQxMg==", "bodyText": "The replicationFactor is initialized in the constructor. When user-set Replication is invalid (neither 1 nor 3), the previous default is used.", "url": "https://github.com/apache/ozone/pull/590#discussion_r383262412", "createdAt": "2020-02-24T13:25:47Z", "author": {"login": "captainzmc"}, "path": "hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/BasicOzoneClientAdapterImpl.java", "diffHunk": "@@ -210,10 +210,14 @@ protected void incrementCounter(Statistic objectsRead) {\n   }\n \n   @Override\n-  public OzoneFSOutputStream createFile(String key, boolean overWrite,\n+  public OzoneFSOutputStream createFile(String key, short replication, boolean overWrite,\n       boolean recursive) throws IOException {\n     incrementCounter(Statistic.OBJECTS_CREATED);\n     try {\n+      if (replication == ReplicationFactor.ONE.getValue()\n+          || replication == ReplicationFactor.THREE.getValue()) {\n+        replicationFactor = ReplicationFactor.valueOf(replication);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE0MjQ2OQ=="}, "originalCommit": {"oid": "3c9fc7fa4ca9be5bec2d865d5f9c93d68a49cdd3"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3Njc3NA==", "bodyText": "Please correct me, but it looks like requests with valid replication will override the default value for later invalid requests.  Let's say that the cluster has replicationFactor=3 configured and create requests with the following replication values are issued:\n\nreplication=2\nreplication=1\nreplication=2\n\nThe requests in step 1 and 3 will behave differently, since replicationFactor was changed by the request in step 2.\n(It could be argued that requests with replication=2 or other invalid value should be rejected, but that's another topic.)", "url": "https://github.com/apache/ozone/pull/590#discussion_r383676774", "createdAt": "2020-02-25T06:14:04Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/BasicOzoneClientAdapterImpl.java", "diffHunk": "@@ -210,10 +210,14 @@ protected void incrementCounter(Statistic objectsRead) {\n   }\n \n   @Override\n-  public OzoneFSOutputStream createFile(String key, boolean overWrite,\n+  public OzoneFSOutputStream createFile(String key, short replication, boolean overWrite,\n       boolean recursive) throws IOException {\n     incrementCounter(Statistic.OBJECTS_CREATED);\n     try {\n+      if (replication == ReplicationFactor.ONE.getValue()\n+          || replication == ReplicationFactor.THREE.getValue()) {\n+        replicationFactor = ReplicationFactor.valueOf(replication);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE0MjQ2OQ=="}, "originalCommit": {"oid": "3c9fc7fa4ca9be5bec2d865d5f9c93d68a49cdd3"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY4NTI1Ng==", "bodyText": "Yes, you're right. This is a place where it is possible to override the default replication. I'm going to add a local variable here to avoid this problem.", "url": "https://github.com/apache/ozone/pull/590#discussion_r383685256", "createdAt": "2020-02-25T06:44:31Z", "author": {"login": "captainzmc"}, "path": "hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/BasicOzoneClientAdapterImpl.java", "diffHunk": "@@ -210,10 +210,14 @@ protected void incrementCounter(Statistic objectsRead) {\n   }\n \n   @Override\n-  public OzoneFSOutputStream createFile(String key, boolean overWrite,\n+  public OzoneFSOutputStream createFile(String key, short replication, boolean overWrite,\n       boolean recursive) throws IOException {\n     incrementCounter(Statistic.OBJECTS_CREATED);\n     try {\n+      if (replication == ReplicationFactor.ONE.getValue()\n+          || replication == ReplicationFactor.THREE.getValue()) {\n+        replicationFactor = ReplicationFactor.valueOf(replication);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE0MjQ2OQ=="}, "originalCommit": {"oid": "3c9fc7fa4ca9be5bec2d865d5f9c93d68a49cdd3"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDA3ODAyOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/BasicOzoneClientAdapterImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODozMzozNFrOFuiHbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODozMzozNFrOFuiHbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMzNzc3NQ==", "bodyText": "Please try to put parameters in the same line. One line one parameter is not recommended.\nSame comment for all the following piece of code.", "url": "https://github.com/apache/ozone/pull/590#discussion_r384337775", "createdAt": "2020-02-26T08:33:34Z", "author": {"login": "ChenSammi"}, "path": "hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/BasicOzoneClientAdapterImpl.java", "diffHunk": "@@ -210,13 +210,33 @@ protected void incrementCounter(Statistic objectsRead) {\n   }\n \n   @Override\n-  public OzoneFSOutputStream createFile(String key, boolean overWrite,\n+  public OzoneFSOutputStream createFile(String key,\n+      short replication,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9daf5814238935596fd5ef9673ac2a469067bd2"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDA4NTg2OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/BasicOzoneClientAdapterImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODozNjoxNFrOFuiMWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMTo0MTo1OVrOFvCjow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMzOTAzMg==", "bodyText": "If the replicationFactor is 2, will the bucket create the key using system default replication here?", "url": "https://github.com/apache/ozone/pull/590#discussion_r384339032", "createdAt": "2020-02-26T08:36:14Z", "author": {"login": "ChenSammi"}, "path": "hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/BasicOzoneClientAdapterImpl.java", "diffHunk": "@@ -210,13 +210,33 @@ protected void incrementCounter(Statistic objectsRead) {\n   }\n \n   @Override\n-  public OzoneFSOutputStream createFile(String key, boolean overWrite,\n+  public OzoneFSOutputStream createFile(String key,\n+      short replication,\n+      boolean overWrite,\n       boolean recursive) throws IOException {\n     incrementCounter(Statistic.OBJECTS_CREATED);\n     try {\n-      OzoneOutputStream ozoneOutputStream = bucket\n-          .createFile(key, 0, replicationType, replicationFactor, overWrite,\n-              recursive);\n+      OzoneOutputStream ozoneOutputStream = null;\n+      if (replication == ReplicationFactor.ONE.getValue()\n+          || replication == ReplicationFactor.THREE.getValue()) {\n+        ReplicationFactor clientReplication\n+            = ReplicationFactor.valueOf(replication);\n+        ozoneOutputStream = bucket.createFile(\n+            key,\n+            0,\n+            replicationType,\n+            clientReplication,\n+            overWrite,\n+            recursive);\n+      } else {\n+        ozoneOutputStream = bucket.createFile(\n+            key,\n+            0,\n+            replicationType,\n+            replicationFactor,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9daf5814238935596fd5ef9673ac2a469067bd2"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg2OTI4Mw==", "bodyText": "Yes, if the replicationFactor is not 1 or 3, the default value is used.", "url": "https://github.com/apache/ozone/pull/590#discussion_r384869283", "createdAt": "2020-02-27T01:41:59Z", "author": {"login": "captainzmc"}, "path": "hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/BasicOzoneClientAdapterImpl.java", "diffHunk": "@@ -210,13 +210,33 @@ protected void incrementCounter(Statistic objectsRead) {\n   }\n \n   @Override\n-  public OzoneFSOutputStream createFile(String key, boolean overWrite,\n+  public OzoneFSOutputStream createFile(String key,\n+      short replication,\n+      boolean overWrite,\n       boolean recursive) throws IOException {\n     incrementCounter(Statistic.OBJECTS_CREATED);\n     try {\n-      OzoneOutputStream ozoneOutputStream = bucket\n-          .createFile(key, 0, replicationType, replicationFactor, overWrite,\n-              recursive);\n+      OzoneOutputStream ozoneOutputStream = null;\n+      if (replication == ReplicationFactor.ONE.getValue()\n+          || replication == ReplicationFactor.THREE.getValue()) {\n+        ReplicationFactor clientReplication\n+            = ReplicationFactor.valueOf(replication);\n+        ozoneOutputStream = bucket.createFile(\n+            key,\n+            0,\n+            replicationType,\n+            clientReplication,\n+            overWrite,\n+            recursive);\n+      } else {\n+        ozoneOutputStream = bucket.createFile(\n+            key,\n+            0,\n+            replicationType,\n+            replicationFactor,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMzOTAzMg=="}, "originalCommit": {"oid": "b9daf5814238935596fd5ef9673ac2a469067bd2"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4915, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}