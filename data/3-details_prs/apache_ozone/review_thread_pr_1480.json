{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4ODgzNTEx", "number": 1480, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMToyODo0OFrOErafYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMTo1NTo0NVrOEz-Tqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTU4MjQzOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMToyODo0OFrOHeK7_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMToyODo0OFrOHeK7_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM5ODUyNA==", "bodyText": "I am thinking for this extreme case, user cannot write object anymore when TransactionID exceeds MAX_TRXN_ID, right? So what can we do for this, have to setup a new Ozone cluster to use?", "url": "https://github.com/apache/ozone/pull/1480#discussion_r501398524", "createdAt": "2020-10-08T01:28:48Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java", "diffHunk": "@@ -523,6 +531,32 @@ public static OmKeyInfo prepareKeyForRecover(OmKeyInfo keyInfo,\n     }\n   }\n \n+  /**\n+   * Get the valid base object id given the transaction id.\n+   * @param id of the transaction. This value cannot exceed 2^40 - 1 as\n+   *           out of the 64 bits for a long, 16 are reserved for the epoch\n+   *           and 8 for recursive directory creation.\n+   * @return base object id allocated against the transaction\n+   */\n+  public static long getObjectIdFromTxId(long epoch, long id) {\n+    Preconditions.checkArgument(id <= MAX_TRXN_ID, \"TransactionID \" +\n+        \"exceeds max limit of \" + MAX_TRXN_ID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0bef37d1448e483c317c293308040a165b5b7bd"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NjM4MTU5OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTo0NjozOFrOHmoU6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjo0MDoyOFrOHtDB1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI2ODY0OA==", "bodyText": "Can we rename id -> trxnId", "url": "https://github.com/apache/ozone/pull/1480#discussion_r510268648", "createdAt": "2020-10-22T15:46:38Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java", "diffHunk": "@@ -524,6 +535,48 @@ public static OmKeyInfo prepareKeyForRecover(OmKeyInfo keyInfo,\n     }\n   }\n \n+  public static int getOMEpoch(boolean isRatisEnabled) {\n+    return isRatisEnabled ? EPOCH_WHEN_RATIS_ENABLED :\n+        EPOCH_WHEN_RATIS_NOT_ENABLED;\n+  }\n+\n+  /**\n+   * Get the valid base object id given the transaction id.\n+   * @param epoch a 2 bit epoch number. The 2 most significant bits of the\n+   *              object will be set to this epoch.\n+   * @param id of the transaction. This value cannot exceed 2^54 - 1 as\n+   *           out of the 64 bits for a long, 2 are reserved for the epoch\n+   *           and 8 for recursive directory creation.\n+   * @return base object id allocated against the transaction\n+   */\n+  public static long getObjectIdFromTxId(long epoch, long id) {\n+    Preconditions.checkArgument(id <= MAX_TRXN_ID, \"TransactionID \" +\n+        \"exceeds max limit of \" + MAX_TRXN_ID);\n+    return addEpochToObjectId(epoch, id);\n+  }\n+\n+  /**\n+   * Note - This function should not be called directly. It is directly called\n+   * only from OzoneManager#addS3GVolumeToDB() which is a one time operation\n+   * when OM is started first time to add S3G volume. In call other cases,\n+   * getObjectIdFromTxId() should be called to append epoch to objectID.\n+   */\n+  public static long addEpochToObjectId(long epoch, long id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c1526ae7dcce5e0ce927b275851b6b01046a697"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk5NzU5MA==", "bodyText": "Done.", "url": "https://github.com/apache/ozone/pull/1480#discussion_r516997590", "createdAt": "2020-11-03T22:40:28Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java", "diffHunk": "@@ -524,6 +535,48 @@ public static OmKeyInfo prepareKeyForRecover(OmKeyInfo keyInfo,\n     }\n   }\n \n+  public static int getOMEpoch(boolean isRatisEnabled) {\n+    return isRatisEnabled ? EPOCH_WHEN_RATIS_ENABLED :\n+        EPOCH_WHEN_RATIS_NOT_ENABLED;\n+  }\n+\n+  /**\n+   * Get the valid base object id given the transaction id.\n+   * @param epoch a 2 bit epoch number. The 2 most significant bits of the\n+   *              object will be set to this epoch.\n+   * @param id of the transaction. This value cannot exceed 2^54 - 1 as\n+   *           out of the 64 bits for a long, 2 are reserved for the epoch\n+   *           and 8 for recursive directory creation.\n+   * @return base object id allocated against the transaction\n+   */\n+  public static long getObjectIdFromTxId(long epoch, long id) {\n+    Preconditions.checkArgument(id <= MAX_TRXN_ID, \"TransactionID \" +\n+        \"exceeds max limit of \" + MAX_TRXN_ID);\n+    return addEpochToObjectId(epoch, id);\n+  }\n+\n+  /**\n+   * Note - This function should not be called directly. It is directly called\n+   * only from OzoneManager#addS3GVolumeToDB() which is a one time operation\n+   * when OM is started first time to add S3G volume. In call other cases,\n+   * getObjectIdFromTxId() should be called to append epoch to objectID.\n+   */\n+  public static long addEpochToObjectId(long epoch, long id) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI2ODY0OA=="}, "originalCommit": {"oid": "3c1526ae7dcce5e0ce927b275851b6b01046a697"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NjQwNjkzOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTo1MjowMVrOHmokmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjo0MDoyMlrOHtDBog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MjY2NQ==", "bodyText": "I prefer to reuse metadataManager#getOmEpoch to set epoch value, so that epoch number is from one same place.", "url": "https://github.com/apache/ozone/pull/1480#discussion_r510272665", "createdAt": "2020-10-22T15:52:01Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -394,6 +403,8 @@ private OzoneManager(OzoneConfiguration conf) throws IOException,\n         OMConfigKeys.OZONE_OM_RATIS_ENABLE_KEY,\n         OMConfigKeys.OZONE_OM_RATIS_ENABLE_DEFAULT);\n \n+    omEpoch = OmUtils.getOMEpoch(isRatisEnabled);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c1526ae7dcce5e0ce927b275851b6b01046a697"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk5NzUzOA==", "bodyText": "Done.", "url": "https://github.com/apache/ozone/pull/1480#discussion_r516997538", "createdAt": "2020-11-03T22:40:22Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -394,6 +403,8 @@ private OzoneManager(OzoneConfiguration conf) throws IOException,\n         OMConfigKeys.OZONE_OM_RATIS_ENABLE_KEY,\n         OMConfigKeys.OZONE_OM_RATIS_ENABLE_DEFAULT);\n \n+    omEpoch = OmUtils.getOMEpoch(isRatisEnabled);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MjY2NQ=="}, "originalCommit": {"oid": "3c1526ae7dcce5e0ce927b275851b6b01046a697"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTI5MzAxOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMTozNjowNVrOHrhHlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjo0MDoxN1rOHtDBfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM5MzQyOA==", "bodyText": "can we use  1 << 54  instead of Math.pow ?", "url": "https://github.com/apache/ozone/pull/1480#discussion_r515393428", "createdAt": "2020-10-30T21:36:05Z", "author": {"login": "prashantpogde"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java", "diffHunk": "@@ -76,6 +78,17 @@\n   private static final SecureRandom SRAND = new SecureRandom();\n   private static byte[] randomBytes = new byte[32];\n \n+  private static final long TRANSACTION_ID_SHIFT = 8;\n+  // from the 64 bits of ObjectID (long variable), 2 bits are reserved for\n+  // epoch and 8 bits for recursive directory creation, if required. This\n+  // leaves 54 bits for the transaction ID. Also, the last transaction ID is\n+  // reserved for creating S3G volume on OM start {@link\n+  // OzoneManager#addS3GVolumeToDB()}.\n+  public static final long EPOCH_ID_SHIFT = 62; // 64 - 2\n+  public static final long MAX_TRXN_ID = (long) (Math.pow(2, 54) - 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c1526ae7dcce5e0ce927b275851b6b01046a697"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk5NzUwMA==", "bodyText": "Done.", "url": "https://github.com/apache/ozone/pull/1480#discussion_r516997500", "createdAt": "2020-11-03T22:40:17Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java", "diffHunk": "@@ -76,6 +78,17 @@\n   private static final SecureRandom SRAND = new SecureRandom();\n   private static byte[] randomBytes = new byte[32];\n \n+  private static final long TRANSACTION_ID_SHIFT = 8;\n+  // from the 64 bits of ObjectID (long variable), 2 bits are reserved for\n+  // epoch and 8 bits for recursive directory creation, if required. This\n+  // leaves 54 bits for the transaction ID. Also, the last transaction ID is\n+  // reserved for creating S3G volume on OM start {@link\n+  // OzoneManager#addS3GVolumeToDB()}.\n+  public static final long EPOCH_ID_SHIFT = 62; // 64 - 2\n+  public static final long MAX_TRXN_ID = (long) (Math.pow(2, 54) - 2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM5MzQyOA=="}, "originalCommit": {"oid": "3c1526ae7dcce5e0ce927b275851b6b01046a697"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTI5NzI5OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMTozODowMVrOHrhKBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjozNzowMlrOHtC8mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM5NDA1Mw==", "bodyText": "Don't we want these values to be 0 and 1 instead of 1 & 2 ?", "url": "https://github.com/apache/ozone/pull/1480#discussion_r515394053", "createdAt": "2020-10-30T21:38:01Z", "author": {"login": "prashantpogde"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java", "diffHunk": "@@ -76,6 +78,17 @@\n   private static final SecureRandom SRAND = new SecureRandom();\n   private static byte[] randomBytes = new byte[32];\n \n+  private static final long TRANSACTION_ID_SHIFT = 8;\n+  // from the 64 bits of ObjectID (long variable), 2 bits are reserved for\n+  // epoch and 8 bits for recursive directory creation, if required. This\n+  // leaves 54 bits for the transaction ID. Also, the last transaction ID is\n+  // reserved for creating S3G volume on OM start {@link\n+  // OzoneManager#addS3GVolumeToDB()}.\n+  public static final long EPOCH_ID_SHIFT = 62; // 64 - 2\n+  public static final long MAX_TRXN_ID = (long) (Math.pow(2, 54) - 2);\n+  public static final int EPOCH_WHEN_RATIS_NOT_ENABLED = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c1526ae7dcce5e0ce927b275851b6b01046a697"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk5NjI0OA==", "bodyText": "Wanted to avoid 0 as we can assume that currently it is 0. This would give us a way to separate out objectIds created before this fix. If ever, these non-unique objectIds need to be fixed, it would be easy to identify them.", "url": "https://github.com/apache/ozone/pull/1480#discussion_r516996248", "createdAt": "2020-11-03T22:37:02Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java", "diffHunk": "@@ -76,6 +78,17 @@\n   private static final SecureRandom SRAND = new SecureRandom();\n   private static byte[] randomBytes = new byte[32];\n \n+  private static final long TRANSACTION_ID_SHIFT = 8;\n+  // from the 64 bits of ObjectID (long variable), 2 bits are reserved for\n+  // epoch and 8 bits for recursive directory creation, if required. This\n+  // leaves 54 bits for the transaction ID. Also, the last transaction ID is\n+  // reserved for creating S3G volume on OM start {@link\n+  // OzoneManager#addS3GVolumeToDB()}.\n+  public static final long EPOCH_ID_SHIFT = 62; // 64 - 2\n+  public static final long MAX_TRXN_ID = (long) (Math.pow(2, 54) - 2);\n+  public static final int EPOCH_WHEN_RATIS_NOT_ENABLED = 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM5NDA1Mw=="}, "originalCommit": {"oid": "3c1526ae7dcce5e0ce927b275851b6b01046a697"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTMxMDYzOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMTo0NDowM1rOHrhSGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjo0MDoxMFrOHtDBUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM5NjEyMg==", "bodyText": "nit : s/addEpochToObjectId /addEpochToTxnId since your definition is ObjectId = EpochId+TxnId", "url": "https://github.com/apache/ozone/pull/1480#discussion_r515396122", "createdAt": "2020-10-30T21:44:03Z", "author": {"login": "prashantpogde"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java", "diffHunk": "@@ -524,6 +535,48 @@ public static OmKeyInfo prepareKeyForRecover(OmKeyInfo keyInfo,\n     }\n   }\n \n+  public static int getOMEpoch(boolean isRatisEnabled) {\n+    return isRatisEnabled ? EPOCH_WHEN_RATIS_ENABLED :\n+        EPOCH_WHEN_RATIS_NOT_ENABLED;\n+  }\n+\n+  /**\n+   * Get the valid base object id given the transaction id.\n+   * @param epoch a 2 bit epoch number. The 2 most significant bits of the\n+   *              object will be set to this epoch.\n+   * @param id of the transaction. This value cannot exceed 2^54 - 1 as\n+   *           out of the 64 bits for a long, 2 are reserved for the epoch\n+   *           and 8 for recursive directory creation.\n+   * @return base object id allocated against the transaction\n+   */\n+  public static long getObjectIdFromTxId(long epoch, long id) {\n+    Preconditions.checkArgument(id <= MAX_TRXN_ID, \"TransactionID \" +\n+        \"exceeds max limit of \" + MAX_TRXN_ID);\n+    return addEpochToObjectId(epoch, id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c1526ae7dcce5e0ce927b275851b6b01046a697"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk5NzQ1Nw==", "bodyText": "Done.", "url": "https://github.com/apache/ozone/pull/1480#discussion_r516997457", "createdAt": "2020-11-03T22:40:10Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java", "diffHunk": "@@ -524,6 +535,48 @@ public static OmKeyInfo prepareKeyForRecover(OmKeyInfo keyInfo,\n     }\n   }\n \n+  public static int getOMEpoch(boolean isRatisEnabled) {\n+    return isRatisEnabled ? EPOCH_WHEN_RATIS_ENABLED :\n+        EPOCH_WHEN_RATIS_NOT_ENABLED;\n+  }\n+\n+  /**\n+   * Get the valid base object id given the transaction id.\n+   * @param epoch a 2 bit epoch number. The 2 most significant bits of the\n+   *              object will be set to this epoch.\n+   * @param id of the transaction. This value cannot exceed 2^54 - 1 as\n+   *           out of the 64 bits for a long, 2 are reserved for the epoch\n+   *           and 8 for recursive directory creation.\n+   * @return base object id allocated against the transaction\n+   */\n+  public static long getObjectIdFromTxId(long epoch, long id) {\n+    Preconditions.checkArgument(id <= MAX_TRXN_ID, \"TransactionID \" +\n+        \"exceeds max limit of \" + MAX_TRXN_ID);\n+    return addEpochToObjectId(epoch, id);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM5NjEyMg=="}, "originalCommit": {"oid": "3c1526ae7dcce5e0ce927b275851b6b01046a697"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTMyMDE2OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMTo0ODoxM1rOHrhXwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjo0MDowMVrOHtDBGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM5NzU2OA==", "bodyText": "consider EpochIdShift and TRANSACTION_ID_SHIFT here instead of hardcoded value.", "url": "https://github.com/apache/ozone/pull/1480#discussion_r515397568", "createdAt": "2020-10-30T21:48:13Z", "author": {"login": "prashantpogde"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java", "diffHunk": "@@ -524,6 +535,48 @@ public static OmKeyInfo prepareKeyForRecover(OmKeyInfo keyInfo,\n     }\n   }\n \n+  public static int getOMEpoch(boolean isRatisEnabled) {\n+    return isRatisEnabled ? EPOCH_WHEN_RATIS_ENABLED :\n+        EPOCH_WHEN_RATIS_NOT_ENABLED;\n+  }\n+\n+  /**\n+   * Get the valid base object id given the transaction id.\n+   * @param epoch a 2 bit epoch number. The 2 most significant bits of the\n+   *              object will be set to this epoch.\n+   * @param id of the transaction. This value cannot exceed 2^54 - 1 as\n+   *           out of the 64 bits for a long, 2 are reserved for the epoch\n+   *           and 8 for recursive directory creation.\n+   * @return base object id allocated against the transaction\n+   */\n+  public static long getObjectIdFromTxId(long epoch, long id) {\n+    Preconditions.checkArgument(id <= MAX_TRXN_ID, \"TransactionID \" +\n+        \"exceeds max limit of \" + MAX_TRXN_ID);\n+    return addEpochToObjectId(epoch, id);\n+  }\n+\n+  /**\n+   * Note - This function should not be called directly. It is directly called\n+   * only from OzoneManager#addS3GVolumeToDB() which is a one time operation\n+   * when OM is started first time to add S3G volume. In call other cases,\n+   * getObjectIdFromTxId() should be called to append epoch to objectID.\n+   */\n+  public static long addEpochToObjectId(long epoch, long id) {\n+    long lsb54 = id << TRANSACTION_ID_SHIFT;\n+    long msb2 = epoch << EPOCH_ID_SHIFT;\n+\n+    return msb2 | lsb54;\n+  }\n+\n+  /**\n+   * Given an objectId, unset the 2 most significant bits to get the\n+   * corresponding transaction index.\n+   */\n+  @VisibleForTesting\n+  public static long getTxIdFromObjectId(long objectId) {\n+    return ((Long.MAX_VALUE >> 2) & objectId) >> 8;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c1526ae7dcce5e0ce927b275851b6b01046a697"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk5NzQwMA==", "bodyText": "Done.", "url": "https://github.com/apache/ozone/pull/1480#discussion_r516997400", "createdAt": "2020-11-03T22:40:01Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java", "diffHunk": "@@ -524,6 +535,48 @@ public static OmKeyInfo prepareKeyForRecover(OmKeyInfo keyInfo,\n     }\n   }\n \n+  public static int getOMEpoch(boolean isRatisEnabled) {\n+    return isRatisEnabled ? EPOCH_WHEN_RATIS_ENABLED :\n+        EPOCH_WHEN_RATIS_NOT_ENABLED;\n+  }\n+\n+  /**\n+   * Get the valid base object id given the transaction id.\n+   * @param epoch a 2 bit epoch number. The 2 most significant bits of the\n+   *              object will be set to this epoch.\n+   * @param id of the transaction. This value cannot exceed 2^54 - 1 as\n+   *           out of the 64 bits for a long, 2 are reserved for the epoch\n+   *           and 8 for recursive directory creation.\n+   * @return base object id allocated against the transaction\n+   */\n+  public static long getObjectIdFromTxId(long epoch, long id) {\n+    Preconditions.checkArgument(id <= MAX_TRXN_ID, \"TransactionID \" +\n+        \"exceeds max limit of \" + MAX_TRXN_ID);\n+    return addEpochToObjectId(epoch, id);\n+  }\n+\n+  /**\n+   * Note - This function should not be called directly. It is directly called\n+   * only from OzoneManager#addS3GVolumeToDB() which is a one time operation\n+   * when OM is started first time to add S3G volume. In call other cases,\n+   * getObjectIdFromTxId() should be called to append epoch to objectID.\n+   */\n+  public static long addEpochToObjectId(long epoch, long id) {\n+    long lsb54 = id << TRANSACTION_ID_SHIFT;\n+    long msb2 = epoch << EPOCH_ID_SHIFT;\n+\n+    return msb2 | lsb54;\n+  }\n+\n+  /**\n+   * Given an objectId, unset the 2 most significant bits to get the\n+   * corresponding transaction index.\n+   */\n+  @VisibleForTesting\n+  public static long getTxIdFromObjectId(long objectId) {\n+    return ((Long.MAX_VALUE >> 2) & objectId) >> 8;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM5NzU2OA=="}, "originalCommit": {"oid": "3c1526ae7dcce5e0ce927b275851b6b01046a697"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTMzNjc1OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMTo1NTo0NVrOHrhhpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjozOTo1NFrOHtDA4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQwMDEwMg==", "bodyText": "why differentiate between epoch before this change and non-ratis OM cluster ? both can be 0 ?", "url": "https://github.com/apache/ozone/pull/1480#discussion_r515400102", "createdAt": "2020-10-30T21:55:45Z", "author": {"login": "prashantpogde"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -306,6 +306,15 @@\n   private final Map<String, RatisDropwizardExports> ratisMetricsMap =\n       new ConcurrentHashMap<>();\n \n+  // Epoch is used to generate the objectIDs. The most significant 2 bits of\n+  // objectIDs is set to this epoch. For clusters before HDDS-4315 there is\n+  // no epoch as such. But it can be safely assumed that the most significant\n+  // 2 bits of the objectID will be 00. From HDDS-4315 onwards, the Epoch for\n+  // non-ratis OM clusters will be binary 01 (= decimal 1)  and for ratis", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c1526ae7dcce5e0ce927b275851b6b01046a697"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk5NzM0Nw==", "bodyText": "It would help if we ever wanted to update the non-unique objectIds to maintain uniqueness throughout.", "url": "https://github.com/apache/ozone/pull/1480#discussion_r516997347", "createdAt": "2020-11-03T22:39:54Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -306,6 +306,15 @@\n   private final Map<String, RatisDropwizardExports> ratisMetricsMap =\n       new ConcurrentHashMap<>();\n \n+  // Epoch is used to generate the objectIDs. The most significant 2 bits of\n+  // objectIDs is set to this epoch. For clusters before HDDS-4315 there is\n+  // no epoch as such. But it can be safely assumed that the most significant\n+  // 2 bits of the objectID will be 00. From HDDS-4315 onwards, the Epoch for\n+  // non-ratis OM clusters will be binary 01 (= decimal 1)  and for ratis", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQwMDEwMg=="}, "originalCommit": {"oid": "3c1526ae7dcce5e0ce927b275851b6b01046a697"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4764, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}