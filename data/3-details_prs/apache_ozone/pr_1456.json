{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1MjExNDM1", "number": 1456, "title": "HDDS-4172. Implement Finalize command in Ozone Manager server.", "bodyText": "What changes were proposed in this pull request?\nServer side implementation of the finalization logic is implemented in this pull request.\nThe initial idea in the client side implementation is to issue an initiating request, then monitor the process with client side polling.\nThis is reflected in the server side code, but due to complications, in the server side, the background finalization of layoutfeatures one by one, is postponed and tracked in HDDS-4286.\nThe problem with the backround finalization is that it has to be synced between the OMs, and we need to ensure that once requests are in the state machine for finalizing a layout feature, the requests processed by the master before the finalization requests, and after the finalization requests are in sync and in order.\nThis means that we need to post separate requests into the state machine internally on the leader OM, to have a flow, where the a specific request type or change to a request handling, once its activated, it is on all OMs activated at the same transaction. We do not really have such a logic for now, and it requires some further review. I will post a design doc on this one into HDDS-4286 in the near future about possible solutions.\nWith that, in this patch, the finalization of the features is happening inside the initiating UpgradeFinalizeRequest RPC call handling, and it has to finish on at least two OMs. So we process the finalization inside the statemachine in one batch.\nAfter this, the client gets a STARTING_FINALIZATION status back, and after the 500ms delay on the client side, the client will grab the results.\nWhat is the link to the Apache JIRA\nhttps://issues.apache.org/jira/browse/HDDS-4172\nHow was this patch tested?\nQuick manual test for the very basic workflow so far.\nJUnit tests to be added to the PR, but wanted to share to have reviews on the approach while I am working on the tests.", "createdAt": "2020-09-30T02:21:42Z", "url": "https://github.com/apache/ozone/pull/1456", "merged": true, "mergeCommit": {"oid": "bfce8b93ca6d79d7997dc66ae1816dc4f1bba472"}, "closed": true, "closedAt": "2020-10-13T03:49:18Z", "author": {"login": "fapifta"}, "timelineItems": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdFeYwdgH2gAyNDk1MjExNDM1OmQ2NTgyN2M0ZTE4ODMzODU5MzQ3YmVmMjE5MTM4YzRiNzg0NDA1Y2E=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdR7c24AH2gAyNDk1MjExNDM1OmIwMGYyZmZmY2ZiMGYzMjVlZTQ4YzM3NDg4NjA4MzBjMGNjNjU3YTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d65827c4e18833859347bef219138c4b784405ca", "author": {"user": {"login": "avijayanhwx", "name": null}}, "url": "https://github.com/apache/ozone/commit/d65827c4e18833859347bef219138c4b784405ca", "committedDate": "2020-09-04T05:31:03Z", "message": "HDDS-3829. Introduce Layout Feature interface in Ozone. (#1322)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "073109869bbf2791ec2cc9dee35e2eb51cb4e2a5", "author": {"user": {"login": "prashantpogde", "name": null}}, "url": "https://github.com/apache/ozone/commit/073109869bbf2791ec2cc9dee35e2eb51cb4e2a5", "committedDate": "2020-09-09T16:46:18Z", "message": "HDDS-4173.  Implement HDDS Version management using the LayoutVersionManager interface. (#1392)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54e5982073e4751e1ab405e7d359be9b241e56c3", "author": {"user": {"login": "fapifta", "name": "Istvan Fajth"}}, "url": "https://github.com/apache/ozone/commit/54e5982073e4751e1ab405e7d359be9b241e56c3", "committedDate": "2020-09-09T19:02:24Z", "message": "HDDS-4141. Implement Finalize command in Ozone Manager client. (#1400)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75ea5bf64b5ca86726871fe8de8786c384239237", "author": {"user": {"login": "prashantpogde", "name": null}}, "url": "https://github.com/apache/ozone/commit/75ea5bf64b5ca86726871fe8de8786c384239237", "committedDate": "2020-09-15T01:40:05Z", "message": "HDDS-4174. Add current HDDS layout version to Datanode heartbeat/registration (#1421)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86c4c9b628e266706f80aedc09ed520723cf283c", "author": {"user": {"login": "avijayanhwx", "name": null}}, "url": "https://github.com/apache/ozone/commit/86c4c9b628e266706f80aedc09ed520723cf283c", "committedDate": "2020-09-15T17:40:24Z", "message": "HDDS-4143. Implement a factory for OM Requests that returns an instance based on layout version. (#1405)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6f51ee3aa304ed42d4aee6f0606d2134ab09164", "author": {"user": {"login": "prashantpogde", "name": null}}, "url": "https://github.com/apache/ozone/commit/c6f51ee3aa304ed42d4aee6f0606d2134ab09164", "committedDate": "2020-09-28T18:28:22Z", "message": "HDDS-4252. Add the current layout versions to DN - SCM proto payload. (#1432)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2788b72cf068ab1723cd1c64670acca4db78e8f", "author": {"user": {"login": "avijayanhwx", "name": null}}, "url": "https://github.com/apache/ozone/commit/a2788b72cf068ab1723cd1c64670acca4db78e8f", "committedDate": "2020-09-29T16:41:43Z", "message": "HDDS-4227. Implement a 'Prepare For Upgrade' step in OM that applies all committed Ratis transactions. (#1430)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3244bd46f97efd24921481ed9de989574c3e948", "author": {"user": {"login": "fapifta", "name": "Istvan Fajth"}}, "url": "https://github.com/apache/ozone/commit/d3244bd46f97efd24921481ed9de989574c3e948", "committedDate": "2020-09-30T00:39:01Z", "message": "HDDS-4172. Implement Finalize command in Ozone Manager server.\n\nChanged the finalizeUpgradeProgress request to be a read request.\nRemoved classes represented the write request handling.\nIn a recent dicussion it turned out that this implemenataion failed for me\nbefore because of some other reason, and there is no need to handle the\nprogress request as a write request."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0f7c8ad636baceb5d65999f1293c5a5dda88cf0", "author": {"user": {"login": "fapifta", "name": "Istvan Fajth"}}, "url": "https://github.com/apache/ozone/commit/d0f7c8ad636baceb5d65999f1293c5a5dda88cf0", "committedDate": "2020-09-30T00:44:57Z", "message": "HDDS-4172. Implement Finalize command in Ozone Manager server.\n\nAdded UpgradeFinalizer to serve as the encapsulation for the finalization logic.\nRemoved unnecessary METADATA_VERSION_IS_NEWER_THAN_SOFTWARE constant.\nNamed softwareBehindMetadata condition and extracted it to a method.\nFixed javadoc of OmLayoutVersionManagerImpl#registerRequestType.\nIntroduced Proto Independent implementation above the proto layer for upgrade\nfinalization requests and responses, added proto message creation in the\nrequest handler and response provider code."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d06ff8b0f4c6966274192677a43bbdf27878f95", "author": {"user": {"login": "fapifta", "name": "Istvan Fajth"}}, "url": "https://github.com/apache/ozone/commit/6d06ff8b0f4c6966274192677a43bbdf27878f95", "committedDate": "2020-09-30T00:49:48Z", "message": "HDDS-4172. Implement Finalize command in Ozone Manager server.\n\nAdded StatusAndMessage to decouple from protobuf structures inside high level\ncode.\nImplemented finalization logic in UpgradeFinalizer and OMUpgradeFinalizer:\n- the implementation now does one serial finalization of features at the\n    initial call to FinalizeUpgradeRequest processing\n- there are facilities added to separate this to individual Ratis requests\n    later on, HDDS-4286 filed for follow up on this\n- Removed doFinalize logic from OMVersionManager\n- Added state and metadata layout version preservation logic to Storage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af0b49147f822163c8e8223a45268682ee9ccca7", "author": {"user": {"login": "fapifta", "name": "Istvan Fajth"}}, "url": "https://github.com/apache/ozone/commit/af0b49147f822163c8e8223a45268682ee9ccca7", "committedDate": "2020-09-30T00:49:48Z", "message": "HDDS-4172. Implement Finalize command in Ozone Manager server.\n\nRename upgradeToLayoutVersion persistance related error codes.\nAdd new error codes to the proto structure as well."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9f3071fb4629b63aae741cb4caba651482c9695", "author": {"user": {"login": "fapifta", "name": "Istvan Fajth"}}, "url": "https://github.com/apache/ozone/commit/b9f3071fb4629b63aae741cb4caba651482c9695", "committedDate": "2020-09-30T00:49:48Z", "message": "HDDS-4172. Implement Finalize command in Ozone Manager server.\n\nFixed checkstyle issues.\nAdded client exclusivity check in OMUpgradeFinalizer."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa51b0141d0aeb66978dfd2fe9356e6e30dbbed7", "author": {"user": {"login": "fapifta", "name": "Istvan Fajth"}}, "url": "https://github.com/apache/ozone/commit/aa51b0141d0aeb66978dfd2fe9356e6e30dbbed7", "committedDate": "2020-09-30T00:54:02Z", "message": "HDDS-4172. Implement Finalize command in Ozone Manager server.\n\nRebase to apache branch, and and fix changes lost during merge."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05f8c4c7b1539b5f14f9511864fe9df96888aa50", "author": {"user": {"login": "fapifta", "name": "Istvan Fajth"}}, "url": "https://github.com/apache/ozone/commit/05f8c4c7b1539b5f14f9511864fe9df96888aa50", "committedDate": "2020-09-30T02:15:47Z", "message": "HDDS-4172. Implement Finalize command in Ozone Manager server.\n\nFixed a JUnit failure, moved back version checking to abstract version\nmanager's init.\nFixed exit condition of the loop while gathering status messages in\nOMUpgradeFinalizer."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c9a789e63a149320adfc88eb09bc5bc0684436a", "author": {"user": {"login": "fapifta", "name": "Istvan Fajth"}}, "url": "https://github.com/apache/ozone/commit/4c9a789e63a149320adfc88eb09bc5bc0684436a", "committedDate": "2020-09-30T02:26:19Z", "message": "HDDS-4172. Implement Finalize command in Ozone Manager server.\n\nAdded license to UpgradeFinalizer, and OMUpgradeFinalizer. Thanks to rat test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7bb3ef5fb34dafb67d98cddb3a4c48ef183fa9da", "author": {"user": {"login": "fapifta", "name": "Istvan Fajth"}}, "url": "https://github.com/apache/ozone/commit/7bb3ef5fb34dafb67d98cddb3a4c48ef183fa9da", "committedDate": "2020-09-30T10:24:43Z", "message": "HDDS-4172. Implement Finalize command in Ozone Manager server.\n\nFix JUnit errors from CI run.\nThe implementation missed to update the request factory under OM's version\nmanager, this is fixed, and the tests are modified to accomodate the changes."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5NDM5MTA3", "url": "https://github.com/apache/ozone/pull/1456#pullrequestreview-499439107", "createdAt": "2020-09-30T13:38:08Z", "commit": {"oid": "7bb3ef5fb34dafb67d98cddb3a4c48ef183fa9da"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMzozODowOFrOHad95Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMzozODo1NFrOHaeARQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUxNjAwNQ==", "bodyText": "Nit. Can this be moved to the interface for reuse in other implementations?", "url": "https://github.com/apache/ozone/pull/1456#discussion_r497516005", "createdAt": "2020-09-30T13:38:08Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/upgrade/OMUpgradeFinalizer.java", "diffHunk": "@@ -0,0 +1,303 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.upgrade;\n+\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes;\n+import org.apache.hadoop.ozone.upgrade.UpgradeFinalizer;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.INVALID_REQUEST;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.PERSIST_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.REMOVE_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.UPDATE_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.ALREADY_FINALIZED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_DONE;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_IN_PROGRESS;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_REQUIRED;\n+\n+/**\n+ * UpgradeFinalizer implementation for the Ozone Manager service.\n+ */\n+public class OMUpgradeFinalizer implements UpgradeFinalizer<OzoneManager> {\n+\n+  private Status status = ALREADY_FINALIZED;\n+  private OMLayoutVersionManagerImpl versionManager;\n+  private String clientID;\n+\n+  private Queue<String> msgs = new ConcurrentLinkedQueue<>();\n+  private boolean isDone = false;\n+\n+  private static final OmUpgradeAction NOOP = a -> {};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bb3ef5fb34dafb67d98cddb3a4c48ef183fa9da"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUxNjYxMw==", "bodyText": "Nit. Class needs a Javadoc.", "url": "https://github.com/apache/ozone/pull/1456#discussion_r497516613", "createdAt": "2020-09-30T13:38:54Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/upgrade/OMUpgradeFinalizer.java", "diffHunk": "@@ -0,0 +1,303 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.upgrade;\n+\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes;\n+import org.apache.hadoop.ozone.upgrade.UpgradeFinalizer;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.INVALID_REQUEST;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.PERSIST_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.REMOVE_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.UPDATE_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.ALREADY_FINALIZED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_DONE;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_IN_PROGRESS;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_REQUIRED;\n+\n+/**\n+ * UpgradeFinalizer implementation for the Ozone Manager service.\n+ */\n+public class OMUpgradeFinalizer implements UpgradeFinalizer<OzoneManager> {\n+\n+  private Status status = ALREADY_FINALIZED;\n+  private OMLayoutVersionManagerImpl versionManager;\n+  private String clientID;\n+\n+  private Queue<String> msgs = new ConcurrentLinkedQueue<>();\n+  private boolean isDone = false;\n+\n+  private static final OmUpgradeAction NOOP = a -> {};\n+\n+  public OMUpgradeFinalizer(OMLayoutVersionManagerImpl versionManager) {\n+    this.versionManager = versionManager;\n+    if (versionManager.needsFinalization()) {\n+      status = FINALIZATION_REQUIRED;\n+    }\n+  }\n+\n+  @Override\n+  public StatusAndMessages finalize(String upgradeClientID, OzoneManager om)\n+      throws IOException {\n+    if (!versionManager.needsFinalization()) {\n+      return FINALIZED_MSG;\n+    }\n+    clientID = upgradeClientID;\n+\n+// This requires some more investigation on how to do it properly while\n+// requests are on the fly, and post finalize features one by one.\n+// Until that is done, monitoring is not really doing anything meaningful\n+// but this is a tradoff we can take for the first iteration either if needed,\n+// as the finalization of the first few features should not take that long.\n+// Follow up JIRA is in HDDS-4286\n+//    String threadName = \"OzoneManager-Upgrade-Finalizer\";\n+//    ExecutorService executor =\n+//        Executors.newSingleThreadExecutor(r -> new Thread(threadName));\n+//    executor.submit(new Worker(om));\n+    new Worker(om).call();\n+    return STARTING_MSG;\n+  }\n+\n+  @Override\n+  public StatusAndMessages reportStatus(\n+      String upgradeClientID, boolean takeover\n+  ) throws IOException {\n+    if (takeover) {\n+      clientID = upgradeClientID;\n+    }\n+    assertClientId(upgradeClientID);\n+    List<String> returningMsgs = new ArrayList<>(msgs.size()+10);\n+    status = isDone ? FINALIZATION_DONE : FINALIZATION_IN_PROGRESS;\n+    while (msgs.size() > 0) {\n+      returningMsgs.add(msgs.poll());\n+    }\n+    return new StatusAndMessages(status, returningMsgs);\n+  }\n+\n+  private void assertClientId(String id) throws OMException {\n+    if (!this.clientID.equals(id)) {\n+      throw new OMException(\"Unknown client tries to get finalization status.\\n\"\n+          + \"The requestor is not the initiating client of the finalization,\"\n+          + \" if you want to take over, and get unsent status messages, check\"\n+          + \" -takeover option.\", INVALID_REQUEST);\n+    }\n+  }\n+\n+\n+\n+\n+  private class Worker implements Callable<Void> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bb3ef5fb34dafb67d98cddb3a4c48ef183fa9da"}, "originalPosition": 113}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwMDg4MDY5", "url": "https://github.com/apache/ozone/pull/1456#pullrequestreview-500088069", "createdAt": "2020-10-01T07:48:17Z", "commit": {"oid": "7bb3ef5fb34dafb67d98cddb3a4c48ef183fa9da"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwNzo1NDo1MVrOHa-q-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwODoxODoxOFrOHa_eUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA1MTgzMg==", "bodyText": "Do we really need to persist version to storage every time? Why not persist storage only once for the final finalization version? We already update current layout version on memory value (StorageInfo#LAYOUT_VERSION) each time Other place can get this value to know which feature is now on finalizing.", "url": "https://github.com/apache/ozone/pull/1456#discussion_r498051832", "createdAt": "2020-10-01T07:54:51Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/upgrade/OMUpgradeFinalizer.java", "diffHunk": "@@ -0,0 +1,303 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.upgrade;\n+\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes;\n+import org.apache.hadoop.ozone.upgrade.UpgradeFinalizer;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.INVALID_REQUEST;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.PERSIST_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.REMOVE_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.UPDATE_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.ALREADY_FINALIZED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_DONE;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_IN_PROGRESS;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_REQUIRED;\n+\n+/**\n+ * UpgradeFinalizer implementation for the Ozone Manager service.\n+ */\n+public class OMUpgradeFinalizer implements UpgradeFinalizer<OzoneManager> {\n+\n+  private Status status = ALREADY_FINALIZED;\n+  private OMLayoutVersionManagerImpl versionManager;\n+  private String clientID;\n+\n+  private Queue<String> msgs = new ConcurrentLinkedQueue<>();\n+  private boolean isDone = false;\n+\n+  private static final OmUpgradeAction NOOP = a -> {};\n+\n+  public OMUpgradeFinalizer(OMLayoutVersionManagerImpl versionManager) {\n+    this.versionManager = versionManager;\n+    if (versionManager.needsFinalization()) {\n+      status = FINALIZATION_REQUIRED;\n+    }\n+  }\n+\n+  @Override\n+  public StatusAndMessages finalize(String upgradeClientID, OzoneManager om)\n+      throws IOException {\n+    if (!versionManager.needsFinalization()) {\n+      return FINALIZED_MSG;\n+    }\n+    clientID = upgradeClientID;\n+\n+// This requires some more investigation on how to do it properly while\n+// requests are on the fly, and post finalize features one by one.\n+// Until that is done, monitoring is not really doing anything meaningful\n+// but this is a tradoff we can take for the first iteration either if needed,\n+// as the finalization of the first few features should not take that long.\n+// Follow up JIRA is in HDDS-4286\n+//    String threadName = \"OzoneManager-Upgrade-Finalizer\";\n+//    ExecutorService executor =\n+//        Executors.newSingleThreadExecutor(r -> new Thread(threadName));\n+//    executor.submit(new Worker(om));\n+    new Worker(om).call();\n+    return STARTING_MSG;\n+  }\n+\n+  @Override\n+  public StatusAndMessages reportStatus(\n+      String upgradeClientID, boolean takeover\n+  ) throws IOException {\n+    if (takeover) {\n+      clientID = upgradeClientID;\n+    }\n+    assertClientId(upgradeClientID);\n+    List<String> returningMsgs = new ArrayList<>(msgs.size()+10);\n+    status = isDone ? FINALIZATION_DONE : FINALIZATION_IN_PROGRESS;\n+    while (msgs.size() > 0) {\n+      returningMsgs.add(msgs.poll());\n+    }\n+    return new StatusAndMessages(status, returningMsgs);\n+  }\n+\n+  private void assertClientId(String id) throws OMException {\n+    if (!this.clientID.equals(id)) {\n+      throw new OMException(\"Unknown client tries to get finalization status.\\n\"\n+          + \"The requestor is not the initiating client of the finalization,\"\n+          + \" if you want to take over, and get unsent status messages, check\"\n+          + \" -takeover option.\", INVALID_REQUEST);\n+    }\n+  }\n+\n+\n+\n+\n+  private class Worker implements Callable<Void> {\n+    private OzoneManager ozoneManager;\n+\n+    Worker(OzoneManager om) {\n+      ozoneManager = om;\n+    }\n+\n+    @Override\n+    public Void call() throws OMException {\n+      try {\n+        emitStartingMsg();\n+\n+        for (OMLayoutFeature f : versionManager.unfinalizedFeatures()) {\n+          finalizeFeature(f);\n+          updateLayoutVersionInVersionFile(f);\n+          versionManager.finalized(f);\n+        }\n+\n+        emitFinishedMsg();\n+      } finally {\n+        isDone = true;\n+      }\n+      return null;\n+    }\n+\n+    private void finalizeFeature(OMLayoutFeature feature)\n+        throws OMException {\n+      OmUpgradeAction action = feature.onFinalizeAction().orElse(NOOP);\n+\n+      if (action == NOOP) {\n+        emitNOOPMsg(feature.name());\n+        return;\n+      }\n+\n+      putFinalizationMarkIntoVersionFile(feature);\n+\n+      emitStartingFinalizationActionMsg(feature.name());\n+      action.executeAction(ozoneManager);\n+      emitFinishFinalizationActionMsg(feature.name());\n+\n+      removeFinalizationMarkFromVersionFile(feature);\n+    }\n+\n+    private void updateLayoutVersionInVersionFile(OMLayoutFeature feature)\n+        throws OMException {\n+      int prevLayoutVersion = currentStoredLayoutVersion();\n+\n+      updateStorageLayoutVersion(feature.layoutVersion());\n+      try {\n+        persistStorage();\n+      } catch (IOException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bb3ef5fb34dafb67d98cddb3a4c48ef183fa9da"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA1NjI4OQ==", "bodyText": "Should we do the safe layout check here? We should ensure the feature layout is increasing between OMLayoutFeature, otherwise versionManager#finalized will throw IllegalArgumentException error.", "url": "https://github.com/apache/ozone/pull/1456#discussion_r498056289", "createdAt": "2020-10-01T08:02:44Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/upgrade/OMUpgradeFinalizer.java", "diffHunk": "@@ -0,0 +1,303 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.upgrade;\n+\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes;\n+import org.apache.hadoop.ozone.upgrade.UpgradeFinalizer;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.INVALID_REQUEST;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.PERSIST_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.REMOVE_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.UPDATE_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.ALREADY_FINALIZED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_DONE;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_IN_PROGRESS;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_REQUIRED;\n+\n+/**\n+ * UpgradeFinalizer implementation for the Ozone Manager service.\n+ */\n+public class OMUpgradeFinalizer implements UpgradeFinalizer<OzoneManager> {\n+\n+  private Status status = ALREADY_FINALIZED;\n+  private OMLayoutVersionManagerImpl versionManager;\n+  private String clientID;\n+\n+  private Queue<String> msgs = new ConcurrentLinkedQueue<>();\n+  private boolean isDone = false;\n+\n+  private static final OmUpgradeAction NOOP = a -> {};\n+\n+  public OMUpgradeFinalizer(OMLayoutVersionManagerImpl versionManager) {\n+    this.versionManager = versionManager;\n+    if (versionManager.needsFinalization()) {\n+      status = FINALIZATION_REQUIRED;\n+    }\n+  }\n+\n+  @Override\n+  public StatusAndMessages finalize(String upgradeClientID, OzoneManager om)\n+      throws IOException {\n+    if (!versionManager.needsFinalization()) {\n+      return FINALIZED_MSG;\n+    }\n+    clientID = upgradeClientID;\n+\n+// This requires some more investigation on how to do it properly while\n+// requests are on the fly, and post finalize features one by one.\n+// Until that is done, monitoring is not really doing anything meaningful\n+// but this is a tradoff we can take for the first iteration either if needed,\n+// as the finalization of the first few features should not take that long.\n+// Follow up JIRA is in HDDS-4286\n+//    String threadName = \"OzoneManager-Upgrade-Finalizer\";\n+//    ExecutorService executor =\n+//        Executors.newSingleThreadExecutor(r -> new Thread(threadName));\n+//    executor.submit(new Worker(om));\n+    new Worker(om).call();\n+    return STARTING_MSG;\n+  }\n+\n+  @Override\n+  public StatusAndMessages reportStatus(\n+      String upgradeClientID, boolean takeover\n+  ) throws IOException {\n+    if (takeover) {\n+      clientID = upgradeClientID;\n+    }\n+    assertClientId(upgradeClientID);\n+    List<String> returningMsgs = new ArrayList<>(msgs.size()+10);\n+    status = isDone ? FINALIZATION_DONE : FINALIZATION_IN_PROGRESS;\n+    while (msgs.size() > 0) {\n+      returningMsgs.add(msgs.poll());\n+    }\n+    return new StatusAndMessages(status, returningMsgs);\n+  }\n+\n+  private void assertClientId(String id) throws OMException {\n+    if (!this.clientID.equals(id)) {\n+      throw new OMException(\"Unknown client tries to get finalization status.\\n\"\n+          + \"The requestor is not the initiating client of the finalization,\"\n+          + \" if you want to take over, and get unsent status messages, check\"\n+          + \" -takeover option.\", INVALID_REQUEST);\n+    }\n+  }\n+\n+\n+\n+\n+  private class Worker implements Callable<Void> {\n+    private OzoneManager ozoneManager;\n+\n+    Worker(OzoneManager om) {\n+      ozoneManager = om;\n+    }\n+\n+    @Override\n+    public Void call() throws OMException {\n+      try {\n+        emitStartingMsg();\n+\n+        for (OMLayoutFeature f : versionManager.unfinalizedFeatures()) {\n+          finalizeFeature(f);\n+          updateLayoutVersionInVersionFile(f);\n+          versionManager.finalized(f);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bb3ef5fb34dafb67d98cddb3a4c48ef183fa9da"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA1ODExOQ==", "bodyText": "Nit: Missing a whitespace before 'finalized'.", "url": "https://github.com/apache/ozone/pull/1456#discussion_r498058119", "createdAt": "2020-10-01T08:06:07Z", "author": {"login": "linyiqun"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/upgrade/AbstractLayoutVersionManager.java", "diffHunk": "@@ -65,53 +64,66 @@ protected void initializeFeatures(LayoutFeature[] lfs) {\n     });\n   }\n \n+  protected void reset() {\n+    metadataLayoutVersion = 0;\n+    softwareLayoutVersion = 0;\n+    featureMap.clear();\n+    features.clear();\n+    isInitialized = false;\n+  }\n+\n+  public void finalized(T layoutFeature) {\n+    if (layoutFeature.layoutVersion() > metadataLayoutVersion) {\n+      metadataLayoutVersion = layoutFeature.layoutVersion();\n+    } else {\n+      throw new IllegalArgumentException(\n+          \"Finalize attempt on a layoutFeature which has already been\"\n+              + \"finalized. Software Layout version: \" + softwareLayoutVersion", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bb3ef5fb34dafb67d98cddb3a4c48ef183fa9da"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA1OTEzNA==", "bodyText": "Nit: Missing a whitespace before 'a LayoutFeature upgrade'.", "url": "https://github.com/apache/ozone/pull/1456#discussion_r498059134", "createdAt": "2020-10-01T08:07:59Z", "author": {"login": "linyiqun"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/common/StorageInfo.java", "diffHunk": "@@ -150,6 +179,16 @@ private void verifyClusterId()\n     }\n   }\n \n+  private void verifyUpgradingToLayoutVersion()\n+      throws InconsistentStorageStateException {\n+    int upgradeMark = getUpgradingToLayoutVersion();\n+    if (upgradeMark != INVALID_LAYOUT_VERSION) {\n+      throw new InconsistentStorageStateException(\"Ozone Manager died during\"\n+          + \"a LayoutFeature upgrade.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bb3ef5fb34dafb67d98cddb3a4c48ef183fa9da"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA2NDk3Ng==", "bodyText": "Same comment for persistStorage like above.", "url": "https://github.com/apache/ozone/pull/1456#discussion_r498064976", "createdAt": "2020-10-01T08:18:18Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/upgrade/OMUpgradeFinalizer.java", "diffHunk": "@@ -0,0 +1,303 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.upgrade;\n+\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes;\n+import org.apache.hadoop.ozone.upgrade.UpgradeFinalizer;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.INVALID_REQUEST;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.PERSIST_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.REMOVE_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.UPDATE_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.ALREADY_FINALIZED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_DONE;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_IN_PROGRESS;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_REQUIRED;\n+\n+/**\n+ * UpgradeFinalizer implementation for the Ozone Manager service.\n+ */\n+public class OMUpgradeFinalizer implements UpgradeFinalizer<OzoneManager> {\n+\n+  private Status status = ALREADY_FINALIZED;\n+  private OMLayoutVersionManagerImpl versionManager;\n+  private String clientID;\n+\n+  private Queue<String> msgs = new ConcurrentLinkedQueue<>();\n+  private boolean isDone = false;\n+\n+  private static final OmUpgradeAction NOOP = a -> {};\n+\n+  public OMUpgradeFinalizer(OMLayoutVersionManagerImpl versionManager) {\n+    this.versionManager = versionManager;\n+    if (versionManager.needsFinalization()) {\n+      status = FINALIZATION_REQUIRED;\n+    }\n+  }\n+\n+  @Override\n+  public StatusAndMessages finalize(String upgradeClientID, OzoneManager om)\n+      throws IOException {\n+    if (!versionManager.needsFinalization()) {\n+      return FINALIZED_MSG;\n+    }\n+    clientID = upgradeClientID;\n+\n+// This requires some more investigation on how to do it properly while\n+// requests are on the fly, and post finalize features one by one.\n+// Until that is done, monitoring is not really doing anything meaningful\n+// but this is a tradoff we can take for the first iteration either if needed,\n+// as the finalization of the first few features should not take that long.\n+// Follow up JIRA is in HDDS-4286\n+//    String threadName = \"OzoneManager-Upgrade-Finalizer\";\n+//    ExecutorService executor =\n+//        Executors.newSingleThreadExecutor(r -> new Thread(threadName));\n+//    executor.submit(new Worker(om));\n+    new Worker(om).call();\n+    return STARTING_MSG;\n+  }\n+\n+  @Override\n+  public StatusAndMessages reportStatus(\n+      String upgradeClientID, boolean takeover\n+  ) throws IOException {\n+    if (takeover) {\n+      clientID = upgradeClientID;\n+    }\n+    assertClientId(upgradeClientID);\n+    List<String> returningMsgs = new ArrayList<>(msgs.size()+10);\n+    status = isDone ? FINALIZATION_DONE : FINALIZATION_IN_PROGRESS;\n+    while (msgs.size() > 0) {\n+      returningMsgs.add(msgs.poll());\n+    }\n+    return new StatusAndMessages(status, returningMsgs);\n+  }\n+\n+  private void assertClientId(String id) throws OMException {\n+    if (!this.clientID.equals(id)) {\n+      throw new OMException(\"Unknown client tries to get finalization status.\\n\"\n+          + \"The requestor is not the initiating client of the finalization,\"\n+          + \" if you want to take over, and get unsent status messages, check\"\n+          + \" -takeover option.\", INVALID_REQUEST);\n+    }\n+  }\n+\n+\n+\n+\n+  private class Worker implements Callable<Void> {\n+    private OzoneManager ozoneManager;\n+\n+    Worker(OzoneManager om) {\n+      ozoneManager = om;\n+    }\n+\n+    @Override\n+    public Void call() throws OMException {\n+      try {\n+        emitStartingMsg();\n+\n+        for (OMLayoutFeature f : versionManager.unfinalizedFeatures()) {\n+          finalizeFeature(f);\n+          updateLayoutVersionInVersionFile(f);\n+          versionManager.finalized(f);\n+        }\n+\n+        emitFinishedMsg();\n+      } finally {\n+        isDone = true;\n+      }\n+      return null;\n+    }\n+\n+    private void finalizeFeature(OMLayoutFeature feature)\n+        throws OMException {\n+      OmUpgradeAction action = feature.onFinalizeAction().orElse(NOOP);\n+\n+      if (action == NOOP) {\n+        emitNOOPMsg(feature.name());\n+        return;\n+      }\n+\n+      putFinalizationMarkIntoVersionFile(feature);\n+\n+      emitStartingFinalizationActionMsg(feature.name());\n+      action.executeAction(ozoneManager);\n+      emitFinishFinalizationActionMsg(feature.name());\n+\n+      removeFinalizationMarkFromVersionFile(feature);\n+    }\n+\n+    private void updateLayoutVersionInVersionFile(OMLayoutFeature feature)\n+        throws OMException {\n+      int prevLayoutVersion = currentStoredLayoutVersion();\n+\n+      updateStorageLayoutVersion(feature.layoutVersion());\n+      try {\n+        persistStorage();\n+      } catch (IOException e) {\n+        updateStorageLayoutVersion(prevLayoutVersion);\n+        logLayoutVersionUpdateFailureAndThrow(e);\n+      }\n+    }\n+\n+    private void putFinalizationMarkIntoVersionFile(OMLayoutFeature feature)\n+        throws OMException {\n+      try {\n+        emitUpgradeToLayoutVersionPersistingMsg(feature.name());\n+\n+        setUpgradeToLayoutVersionInStorage(feature.layoutVersion());\n+        persistStorage();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bb3ef5fb34dafb67d98cddb3a4c48ef183fa9da"}, "originalPosition": 175}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNDQwMDE5", "url": "https://github.com/apache/ozone/pull/1456#pullrequestreview-500440019", "createdAt": "2020-10-01T14:59:57Z", "commit": {"oid": "7bb3ef5fb34dafb67d98cddb3a4c48ef183fa9da"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDo1OTo1N1rOHbOmCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDo1OTo1N1rOHbOmCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMxMjcxMg==", "bodyText": "Here clientID should be thread-safe to update, can we make clientID as a volatile variable?", "url": "https://github.com/apache/ozone/pull/1456#discussion_r498312712", "createdAt": "2020-10-01T14:59:57Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/upgrade/OMUpgradeFinalizer.java", "diffHunk": "@@ -0,0 +1,303 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.upgrade;\n+\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes;\n+import org.apache.hadoop.ozone.upgrade.UpgradeFinalizer;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.INVALID_REQUEST;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.PERSIST_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.REMOVE_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.UPDATE_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.ALREADY_FINALIZED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_DONE;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_IN_PROGRESS;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_REQUIRED;\n+\n+/**\n+ * UpgradeFinalizer implementation for the Ozone Manager service.\n+ */\n+public class OMUpgradeFinalizer implements UpgradeFinalizer<OzoneManager> {\n+\n+  private Status status = ALREADY_FINALIZED;\n+  private OMLayoutVersionManagerImpl versionManager;\n+  private String clientID;\n+\n+  private Queue<String> msgs = new ConcurrentLinkedQueue<>();\n+  private boolean isDone = false;\n+\n+  private static final OmUpgradeAction NOOP = a -> {};\n+\n+  public OMUpgradeFinalizer(OMLayoutVersionManagerImpl versionManager) {\n+    this.versionManager = versionManager;\n+    if (versionManager.needsFinalization()) {\n+      status = FINALIZATION_REQUIRED;\n+    }\n+  }\n+\n+  @Override\n+  public StatusAndMessages finalize(String upgradeClientID, OzoneManager om)\n+      throws IOException {\n+    if (!versionManager.needsFinalization()) {\n+      return FINALIZED_MSG;\n+    }\n+    clientID = upgradeClientID;\n+\n+// This requires some more investigation on how to do it properly while\n+// requests are on the fly, and post finalize features one by one.\n+// Until that is done, monitoring is not really doing anything meaningful\n+// but this is a tradoff we can take for the first iteration either if needed,\n+// as the finalization of the first few features should not take that long.\n+// Follow up JIRA is in HDDS-4286\n+//    String threadName = \"OzoneManager-Upgrade-Finalizer\";\n+//    ExecutorService executor =\n+//        Executors.newSingleThreadExecutor(r -> new Thread(threadName));\n+//    executor.submit(new Worker(om));\n+    new Worker(om).call();\n+    return STARTING_MSG;\n+  }\n+\n+  @Override\n+  public StatusAndMessages reportStatus(\n+      String upgradeClientID, boolean takeover\n+  ) throws IOException {\n+    if (takeover) {\n+      clientID = upgradeClientID;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bb3ef5fb34dafb67d98cddb3a4c48ef183fa9da"}, "originalPosition": 90}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a410f522195e2efd123c8c7f4ad3ccafe724f09", "author": {"user": {"login": "fapifta", "name": "Istvan Fajth"}}, "url": "https://github.com/apache/ozone/commit/0a410f522195e2efd123c8c7f4ad3ccafe724f09", "committedDate": "2020-10-02T11:14:28Z", "message": "HDDS-4172. Implement Finalize command in Ozone Manager server.\n\nAddressing review comments:\n  - added JavaDoc for UpgradeFinalizer#Worker\n  - moved OMUpgradeFinalizer#NOOP to OMUpgradeAction\n  - fixed missing whitespaces in log messages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dab34f95b4e0b4daf2486890cc449dab1ca257e1", "author": {"user": {"login": "fapifta", "name": "Istvan Fajth"}}, "url": "https://github.com/apache/ozone/commit/dab34f95b4e0b4daf2486890cc449dab1ca257e1", "committedDate": "2020-10-02T12:46:13Z", "message": "HDDS-4172. Implement Finalize command in Ozone Manager server.\n\nSynchronize the reportStatus call, to avoid weird race conditions in between\nclients that try to take over and the original client."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ea98ede5e0b466bd55326d609c0df2552bc3054", "author": {"user": {"login": "fapifta", "name": "Istvan Fajth"}}, "url": "https://github.com/apache/ozone/commit/9ea98ede5e0b466bd55326d609c0df2552bc3054", "committedDate": "2020-10-02T14:25:46Z", "message": "HDDS-4172. Implement Finalize command in Ozone Manager server.\n\nMoving back NOOP to the UpgradeFinalizer, to fix a checkstyle warning,\nin OMUpgradeAction as there are no methods there, we can not have just\na constant as interfaces with just constants is a bad practice."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0f1e40a266355d9b8341bb1171f85dc22f055f1", "author": {"user": {"login": "fapifta", "name": "Istvan Fajth"}}, "url": "https://github.com/apache/ozone/commit/a0f1e40a266355d9b8341bb1171f85dc22f055f1", "committedDate": "2020-10-06T23:49:11Z", "message": "HDDS-4172. Implement Finalize command in Ozone Manager server.\n\nAdded tests for the new AbstractLayoutVersionManager methods.\nDeclared to throw Exception from UpgradeActions belongs to LayoutFeatures.\nAdded exception handling in the finalizer for the UpgradeAction exceptions.\nAdded finalization failure status in OMException and related proto.\nAdded tests for OMUpgradeFinalizer."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4de2ea5698602a2bcdf11591d9615855ebffe706", "author": {"user": {"login": "fapifta", "name": "Istvan Fajth"}}, "url": "https://github.com/apache/ozone/commit/4de2ea5698602a2bcdf11591d9615855ebffe706", "committedDate": "2020-10-07T01:18:27Z", "message": "Merge remote-tracking branch 'apache/HDDS-3698-upgrade' into upgrade"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf22eabba2a26ee8dc104aa7ff475ce9e3be800e", "author": {"user": {"login": "fapifta", "name": "Istvan Fajth"}}, "url": "https://github.com/apache/ozone/commit/cf22eabba2a26ee8dc104aa7ff475ce9e3be800e", "committedDate": "2020-10-07T01:23:38Z", "message": "Fixed missing license."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5aecceaf920ec6ef64c0a2bad56151c3d3c96b3a", "author": {"user": {"login": "fapifta", "name": "Istvan Fajth"}}, "url": "https://github.com/apache/ozone/commit/5aecceaf920ec6ef64c0a2bad56151c3d3c96b3a", "committedDate": "2020-10-07T12:04:10Z", "message": "HDDS-4172. Implement Finalize command in Ozone Manager server.\n\nRemoved some merge related leftovers in OzoneConsts\nAdded closing newline to SCMDatanodeProtocolServer\nFixed JUnit test failure\nRemoved unnecessarily added dependency from hadoop-ozone/ozone-manager\n\nJUnit failure's was caused by the finalness of HDDSLayoutVersionManager.\nI tried to upgrade to Mockito 2.x, but it tunred out because of we are\n  depending on hadoop-common's MetricsAsserts class, which uses old\n  Mockito 1 ArgumentMatcher extension, and Mockito 2 made it to an\n  interface, it results in an IncompatibleClassChange, and fails other\n  tests, besides other incompatible changes.\nWe may revisit the update to Mockito 2 after that we can add final to the\n  HDDSLAyoutVersionManager class, as with that mocking final classes became\n  possible, as with OmLayoutVersionManager in hadoop-ozone where we can\n  use Mockito 2's capability to mock finals properly."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d8186c9072fe1025875541c713bbddd57d8499b", "author": {"user": {"login": "fapifta", "name": "Istvan Fajth"}}, "url": "https://github.com/apache/ozone/commit/2d8186c9072fe1025875541c713bbddd57d8499b", "committedDate": "2020-10-12T20:48:20Z", "message": "Merge remote-tracking branch 'apache/HDDS-3698-upgrade' into upgrade"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2OTI0NTUz", "url": "https://github.com/apache/ozone/pull/1456#pullrequestreview-506924553", "createdAt": "2020-10-12T21:23:07Z", "commit": {"oid": "2d8186c9072fe1025875541c713bbddd57d8499b"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMToyMzowN1rOHgNkLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMTo0MDo0MVrOHgOLew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUzODczMw==", "bodyText": "Can this be moved to the individual layout version update methods above, so that the caller does not need to invoke the persist explicitly every time? As a caller, if I do storage.updateStorageLayoutVersion(), I can expect it to be persisted, right? I don't have a strong opinion about this, just a suggestion.", "url": "https://github.com/apache/ozone/pull/1456#discussion_r503538733", "createdAt": "2020-10-12T21:23:07Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/upgrade/OMUpgradeFinalizer.java", "diffHunk": "@@ -0,0 +1,328 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.upgrade;\n+\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes;\n+import org.apache.hadoop.ozone.upgrade.UpgradeFinalizer;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.*;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.INVALID_REQUEST;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.PERSIST_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.REMOVE_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.UPDATE_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_DONE;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_IN_PROGRESS;\n+\n+/**\n+ * UpgradeFinalizer implementation for the Ozone Manager service.\n+ */\n+public class OMUpgradeFinalizer implements UpgradeFinalizer<OzoneManager> {\n+\n+  private  static final OmUpgradeAction NOOP = a -> {};\n+\n+  private OMLayoutVersionManagerImpl versionManager;\n+  private String clientID;\n+\n+  private Queue<String> msgs = new ConcurrentLinkedQueue<>();\n+  private boolean isDone = false;\n+\n+  public OMUpgradeFinalizer(OMLayoutVersionManagerImpl versionManager) {\n+    this.versionManager = versionManager;\n+  }\n+\n+  @Override\n+  public StatusAndMessages finalize(String upgradeClientID, OzoneManager om)\n+      throws IOException {\n+    if (!versionManager.needsFinalization()) {\n+      return FINALIZED_MSG;\n+    }\n+    clientID = upgradeClientID;\n+\n+// This requires some more investigation on how to do it properly while\n+// requests are on the fly, and post finalize features one by one.\n+// Until that is done, monitoring is not really doing anything meaningful\n+// but this is a tradoff we can take for the first iteration either if needed,\n+// as the finalization of the first few features should not take that long.\n+// Follow up JIRA is in HDDS-4286\n+//    String threadName = \"OzoneManager-Upgrade-Finalizer\";\n+//    ExecutorService executor =\n+//        Executors.newSingleThreadExecutor(r -> new Thread(threadName));\n+//    executor.submit(new Worker(om));\n+    new Worker(om).call();\n+    return STARTING_MSG;\n+  }\n+\n+  @Override\n+  public synchronized StatusAndMessages reportStatus(\n+      String upgradeClientID, boolean takeover\n+  ) throws IOException {\n+    if (takeover) {\n+      clientID = upgradeClientID;\n+    }\n+    assertClientId(upgradeClientID);\n+    List<String> returningMsgs = new ArrayList<>(msgs.size()+10);\n+    Status status = isDone ? FINALIZATION_DONE : FINALIZATION_IN_PROGRESS;\n+    while (msgs.size() > 0) {\n+      returningMsgs.add(msgs.poll());\n+    }\n+    return new StatusAndMessages(status, returningMsgs);\n+  }\n+\n+  private void assertClientId(String id) throws OMException {\n+    if (!this.clientID.equals(id)) {\n+      throw new OMException(\"Unknown client tries to get finalization status.\\n\"\n+          + \"The requestor is not the initiating client of the finalization,\"\n+          + \" if you want to take over, and get unsent status messages, check\"\n+          + \" -takeover option.\", INVALID_REQUEST);\n+    }\n+  }\n+\n+  /**\n+   * This class implements the finalization logic applied to every\n+   * LayoutFeature that needs to be finalized.\n+   *\n+   * For the first approach this happens synchronously within the state machine\n+   * during the FinalizeUpgrade request, but ideally this has to be moved to\n+   * individual calls that are going into the StateMaching one by one.\n+   * The prerequisits for this to happen in the background are the following:\n+   * - more fine grained control for LayoutFeatures to prepare the\n+   *    finalization outside the state machine, do the switch from old to new\n+   *    logic inside the statemachine and apply the finalization, and then do\n+   *    any cleanup necessary outside the state machine\n+   * - a way to post a request to the state machine that is not part of the\n+   *    client API, so basically not an OMRequest, but preferably an internal\n+   *    request, which is posted from the leader OM to the follower OMs only.\n+   * - ensure that there is a possibility to implement a rollback logic if\n+   *    something goes wrong inside the state machine, to avoid OM stuck in an\n+   *    intermediate state due to an error.\n+   */\n+  private class Worker implements Callable<Void> {\n+    private OzoneManager ozoneManager;\n+\n+    /**\n+     * Initiates the Worker, for the specified OM instance.\n+     * @param om the OzoneManager instance on which to finalize the new\n+     *           LayoutFeatures.\n+     */\n+    Worker(OzoneManager om) {\n+      ozoneManager = om;\n+    }\n+\n+    @Override\n+    public Void call() throws OMException {\n+      try {\n+        emitStartingMsg();\n+\n+        for (OMLayoutFeature f : versionManager.unfinalizedFeatures()) {\n+          finalizeFeature(f);\n+          updateLayoutVersionInVersionFile(f);\n+          versionManager.finalized(f);\n+        }\n+\n+        emitFinishedMsg();\n+      } finally {\n+        isDone = true;\n+      }\n+      return null;\n+    }\n+\n+    private void finalizeFeature(OMLayoutFeature feature)\n+        throws OMException {\n+      OmUpgradeAction action = feature.onFinalizeAction().orElse(NOOP);\n+\n+      if (action == NOOP) {\n+        emitNOOPMsg(feature.name());\n+        return;\n+      }\n+\n+      putFinalizationMarkIntoVersionFile(feature);\n+\n+      emitStartingFinalizationActionMsg(feature.name());\n+      try {\n+        action.executeAction(ozoneManager);\n+      } catch (Exception e) {\n+        logFinalizationFailureAndThrow(e, feature.name());\n+      }\n+      emitFinishFinalizationActionMsg(feature.name());\n+\n+      removeFinalizationMarkFromVersionFile(feature);\n+    }\n+\n+    private void updateLayoutVersionInVersionFile(OMLayoutFeature feature)\n+        throws OMException {\n+      int prevLayoutVersion = currentStoredLayoutVersion();\n+\n+      updateStorageLayoutVersion(feature.layoutVersion());\n+      try {\n+        persistStorage();\n+      } catch (IOException e) {\n+        updateStorageLayoutVersion(prevLayoutVersion);\n+        logLayoutVersionUpdateFailureAndThrow(e);\n+      }\n+    }\n+\n+    private void putFinalizationMarkIntoVersionFile(OMLayoutFeature feature)\n+        throws OMException {\n+      try {\n+        emitUpgradeToLayoutVersionPersistingMsg(feature.name());\n+\n+        setUpgradeToLayoutVersionInStorage(feature.layoutVersion());\n+        persistStorage();\n+\n+        emitUpgradeToLayoutVersionPersistedMsg();\n+      } catch (IOException e) {\n+        logUpgradeToLayoutVersionPersistingFailureAndThrow(feature.name(), e);\n+      }\n+    }\n+\n+    private void removeFinalizationMarkFromVersionFile(OMLayoutFeature feature)\n+        throws OMException {\n+      try {\n+        emitRemovingUpgradeToLayoutVersionMsg(feature.name());\n+\n+        unsetUpgradeToLayoutVersionInStorage();\n+        persistStorage();\n+\n+        emitRemovedUpgradeToLayoutVersionMsg();\n+      } catch (IOException e) {\n+        logUpgradeToLayoutVersionRemovalFailureAndThrow(feature.name(), e);\n+      }\n+    }\n+\n+\n+\n+\n+\n+    private void setUpgradeToLayoutVersionInStorage(int version) {\n+      ozoneManager.getOmStorage().setUpgradeToLayoutVersion(version);\n+    }\n+\n+    private void unsetUpgradeToLayoutVersionInStorage() {\n+      ozoneManager.getOmStorage().unsetUpgradeToLayoutVersion();\n+    }\n+\n+    private int currentStoredLayoutVersion() {\n+      return ozoneManager.getOmStorage().getLayoutVersion();\n+    }\n+\n+    private void updateStorageLayoutVersion(int version) {\n+      ozoneManager.getOmStorage().setLayoutVersion(version);\n+    }\n+\n+    private void persistStorage() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d8186c9072fe1025875541c713bbddd57d8499b"}, "originalPosition": 237}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU0MjI2Mg==", "bodyText": "Line 54 has a debug log line left.", "url": "https://github.com/apache/ozone/pull/1456#discussion_r503542262", "createdAt": "2020-10-12T21:31:37Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/upgrade/OMFinalizeUpgradeRequest.java", "diffHunk": "@@ -63,11 +64,20 @@ public OMClientResponse validateAndUpdateCache(\n \n       String upgradeClientID = request.getUpgradeClientId();\n \n-      UpgradeFinalizationStatus status =\n+      StatusAndMessages omStatus =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d8186c9072fe1025875541c713bbddd57d8499b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU0ODc5NQ==", "bodyText": "Just an observation. By the time we return 'STARTING_MSG' at 77, we are already done with Finalization right? Is this return message left as it is for a future refactoring through HDDS-3286 where async finalization will be done?", "url": "https://github.com/apache/ozone/pull/1456#discussion_r503548795", "createdAt": "2020-10-12T21:40:41Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/upgrade/OMUpgradeFinalizer.java", "diffHunk": "@@ -0,0 +1,328 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.upgrade;\n+\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes;\n+import org.apache.hadoop.ozone.upgrade.UpgradeFinalizer;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.*;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.INVALID_REQUEST;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.PERSIST_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.REMOVE_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.UPDATE_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_DONE;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_IN_PROGRESS;\n+\n+/**\n+ * UpgradeFinalizer implementation for the Ozone Manager service.\n+ */\n+public class OMUpgradeFinalizer implements UpgradeFinalizer<OzoneManager> {\n+\n+  private  static final OmUpgradeAction NOOP = a -> {};\n+\n+  private OMLayoutVersionManagerImpl versionManager;\n+  private String clientID;\n+\n+  private Queue<String> msgs = new ConcurrentLinkedQueue<>();\n+  private boolean isDone = false;\n+\n+  public OMUpgradeFinalizer(OMLayoutVersionManagerImpl versionManager) {\n+    this.versionManager = versionManager;\n+  }\n+\n+  @Override\n+  public StatusAndMessages finalize(String upgradeClientID, OzoneManager om)\n+      throws IOException {\n+    if (!versionManager.needsFinalization()) {\n+      return FINALIZED_MSG;\n+    }\n+    clientID = upgradeClientID;\n+\n+// This requires some more investigation on how to do it properly while\n+// requests are on the fly, and post finalize features one by one.\n+// Until that is done, monitoring is not really doing anything meaningful\n+// but this is a tradoff we can take for the first iteration either if needed,\n+// as the finalization of the first few features should not take that long.\n+// Follow up JIRA is in HDDS-4286\n+//    String threadName = \"OzoneManager-Upgrade-Finalizer\";\n+//    ExecutorService executor =\n+//        Executors.newSingleThreadExecutor(r -> new Thread(threadName));\n+//    executor.submit(new Worker(om));\n+    new Worker(om).call();\n+    return STARTING_MSG;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d8186c9072fe1025875541c713bbddd57d8499b"}, "originalPosition": 77}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b00f2fffcfb0f325ee48c3748860830c0cc657a6", "author": {"user": {"login": "fapifta", "name": "Istvan Fajth"}}, "url": "https://github.com/apache/ozone/commit/b00f2fffcfb0f325ee48c3748860830c0cc657a6", "committedDate": "2020-10-12T22:09:52Z", "message": "HDDS-4172. Implement Finalize command in Ozone Manager server.\n\nRemoved forgotten debug log on INFO level from OMFinalizeUpgradeRequest."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2580, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}