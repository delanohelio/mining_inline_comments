{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxMjk5NzU0", "number": 1650, "title": "HDDS-3684. Add tests for replication annotation", "bodyText": "What changes were proposed in this pull request?\nAdd tests for replication annotation\nWhat is the link to the Apache JIRA\nhttps://issues.apache.org/jira/browse/HDDS-3684\nHow was this patch tested?\nUnit Test", "createdAt": "2020-12-02T21:26:36Z", "url": "https://github.com/apache/ozone/pull/1650", "merged": true, "mergeCommit": {"oid": "13f2eceb92f0f92f33dcf4c2bac0ef6c538914c2"}, "closed": true, "closedAt": "2021-01-04T06:38:10Z", "author": {"login": "amaliujia"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdiWo53gFqTU0MzMwNDc1NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdswd0bgFqTU2MDgwNDA5Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzMzA0NzU0", "url": "https://github.com/apache/ozone/pull/1650#pullrequestreview-543304754", "createdAt": "2020-12-02T22:53:14Z", "commit": {"oid": "06c4c234f6f81bf596b477810ad852ea3ffe7843"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMjo1MzoxNVrOH9xhfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMjo1MzoxNVrOH9xhfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDUzNjU3Mw==", "bodyText": "Should I actually mock a InvocationHandler and add a request type RequestType.Test? Then make sure replicatedOperation is eventually called.", "url": "https://github.com/apache/ozone/pull/1650#discussion_r534536573", "createdAt": "2020-12-02T22:53:15Z", "author": {"login": "amaliujia"}, "path": "hadoop-hdds/server-scm/src/test/java/org/apache/hadoop/hdds/scm/ha/TestRelicationAnnotation.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p/>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p/>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import java.io.IOException;\n+import org.apache.hadoop.hdds.protocol.proto.SCMRatisProtocol.RequestType;\n+import org.apache.hadoop.hdds.scm.metadata.Replicate;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Tests on {@link org.apache.hadoop.hdds.scm.metadata.Replicate}.\n+ */\n+public class TestRelicationAnnotation {\n+  private SCMHAInvocationHandler scmhaInvocationHandler;\n+\n+  @Before\n+  public void setup() {\n+    scmhaInvocationHandler = new SCMHAInvocationHandler(\n+        RequestType.CONTAINER,\n+        null,\n+        new MockRatisServer());\n+  }\n+\n+  @Test(expected = IOException.class)\n+  public void testReplicateAnnotationBasic() throws Throwable {\n+    // test whether replicatedOperation will hit the Ratis based replication\n+    // code path in SCMHAInvocationHandler. Expect to see a IOException cause\n+    // no handler is added yet.\n+    scmhaInvocationHandler.invoke(new Object(),\n+        this.getClass().getMethod(\"replicatedOperation\"), new Object[0]);\n+  }\n+\n+  @Replicate\n+  public void replicatedOperation() { }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c4c234f6f81bf596b477810ad852ea3ffe7843"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzOTExOTM1", "url": "https://github.com/apache/ozone/pull/1650#pullrequestreview-543911935", "createdAt": "2020-12-03T12:39:39Z", "commit": {"oid": "06c4c234f6f81bf596b477810ad852ea3ffe7843"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMjozOTozOVrOH-ZqsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMjozOTozOVrOH-ZqsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE5NDI4OQ==", "bodyText": "typo Relication -> Replication", "url": "https://github.com/apache/ozone/pull/1650#discussion_r535194289", "createdAt": "2020-12-03T12:39:39Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/test/java/org/apache/hadoop/hdds/scm/ha/TestRelicationAnnotation.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p/>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p/>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import java.io.IOException;\n+import org.apache.hadoop.hdds.protocol.proto.SCMRatisProtocol.RequestType;\n+import org.apache.hadoop.hdds.scm.metadata.Replicate;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Tests on {@link org.apache.hadoop.hdds.scm.metadata.Replicate}.\n+ */\n+public class TestRelicationAnnotation {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c4c234f6f81bf596b477810ad852ea3ffe7843"}, "originalPosition": 28}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "06c4c234f6f81bf596b477810ad852ea3ffe7843", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/ozone/commit/06c4c234f6f81bf596b477810ad852ea3ffe7843", "committedDate": "2020-12-02T22:20:35Z", "message": "fixup! fix style"}, "afterCommit": {"oid": "6f32d212a6d86bdee2580ade5dd7509aa4845bed", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/ozone/commit/6f32d212a6d86bdee2580ade5dd7509aa4845bed", "committedDate": "2020-12-02T21:24:47Z", "message": "HDDS-3684. Add tests for replication annotation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f2344a11e95a08ffc3b3354850c6eda316a5aee", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/ozone/commit/2f2344a11e95a08ffc3b3354850c6eda316a5aee", "committedDate": "2020-12-29T06:56:13Z", "message": "HDDS-3684. Add tests for replication annotation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6f32d212a6d86bdee2580ade5dd7509aa4845bed", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/ozone/commit/6f32d212a6d86bdee2580ade5dd7509aa4845bed", "committedDate": "2020-12-02T21:24:47Z", "message": "HDDS-3684. Add tests for replication annotation"}, "afterCommit": {"oid": "2f2344a11e95a08ffc3b3354850c6eda316a5aee", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/ozone/commit/2f2344a11e95a08ffc3b3354850c6eda316a5aee", "committedDate": "2020-12-29T06:56:13Z", "message": "HDDS-3684. Add tests for replication annotation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f99519c03e0c1c213ef2a2549de82da7819d1f1b", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/ozone/commit/f99519c03e0c1c213ef2a2549de82da7819d1f1b", "committedDate": "2020-12-29T07:03:57Z", "message": "fixup! fix typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67b653010e15d74b7d8d05fee1ff745ac91827aa", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/ozone/commit/67b653010e15d74b7d8d05fee1ff745ac91827aa", "committedDate": "2020-12-29T07:57:43Z", "message": "fixup! fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f502a85f6d20f77235d4736efb1ae9ba644f9f6d", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/ozone/commit/f502a85f6d20f77235d4736efb1ae9ba644f9f6d", "committedDate": "2020-12-29T08:14:41Z", "message": "fixup! update test case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be72174ba5dc256af5b9b083ce3b996e99707fe5", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/ozone/commit/be72174ba5dc256af5b9b083ce3b996e99707fe5", "committedDate": "2020-12-29T08:15:34Z", "message": "fixup! fix type"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5OTY4MjM5", "url": "https://github.com/apache/ozone/pull/1650#pullrequestreview-559968239", "createdAt": "2020-12-30T09:19:09Z", "commit": {"oid": "be72174ba5dc256af5b9b083ce3b996e99707fe5"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwOToxOTowOVrOIMljIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMTozNzo0M1rOIMrXbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDA2OTAyNg==", "bodyText": "Hey Rui, Why we need to move MockRatisServer out of MockSCMHAManager ? My concern is\n// TODO: Move this class to test package after fixing Recon, I would like to separate them until they are moved back to test dir.\nYou duplicated the licenses.", "url": "https://github.com/apache/ozone/pull/1650#discussion_r550069026", "createdAt": "2020-12-30T09:19:09Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/MockSCMHAManager.java", "diffHunk": "@@ -15,29 +15,28 @@\n  * the License.\n  */\n \n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be72174ba5dc256af5b9b083ce3b996e99707fe5"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE2NDMzNA==", "bodyText": "Hey Rui, I suggested to simulate the real ratis call, what do you think ?\npublic class TestReplicationAnnotation {\n  @Test\n  public void testReplicateAnnotationBasic() throws Throwable {\n\n    final ContainerStateManagerV2 csm = new ContainerStateManagerV2() {\n\n      @Override\n      public boolean contains(HddsProtos.ContainerID containerID) {\n        return false;\n      }\n\n      @Override\n      public Set<ContainerID> getContainerIDs() {\n        return null;\n      }\n\n      @Override\n      public Set<ContainerID> getContainerIDs(HddsProtos.LifeCycleState state) {\n        return null;\n      }\n\n      @Override\n      public ContainerInfo getContainer(HddsProtos.ContainerID id) {\n        return null;\n      }\n\n      @Override\n      public Set<ContainerReplica> getContainerReplicas(HddsProtos.ContainerID id) {\n        return null;\n      }\n\n      @Override\n      public void updateContainerReplica(HddsProtos.ContainerID id, ContainerReplica replica) {\n\n      }\n\n      @Override\n      public void removeContainerReplica(HddsProtos.ContainerID id, ContainerReplica replica) {\n\n      }\n\n      @Override\n      public void addContainer(HddsProtos.ContainerInfoProto containerInfo) throws IOException {\n\n      }\n\n      @Override\n      public void updateContainerState(HddsProtos.ContainerID id, HddsProtos.LifeCycleEvent event) throws IOException, InvalidStateTransitionException {\n\n      }\n\n      @Override\n      public void updateDeleteTransactionId(Map<ContainerID, Long> deleteTransactionMap) throws IOException {\n\n      }\n\n      @Override\n      public ContainerInfo getMatchingContainer(long size, String owner, PipelineID pipelineID, NavigableSet<ContainerID> containerIDs) {\n        return null;\n      }\n\n      @Override\n      public void removeContainer(HddsProtos.ContainerID containerInfo) throws IOException {\n\n      }\n\n      @Override\n      public void close() throws IOException {\n\n      }\n    };\n\n    SCMRatisServer ratisServer = new SCMRatisServer() {\n      @Override\n      public void start() throws IOException {\n\n      }\n\n      @Override\n      public void registerStateMachineHandler(SCMRatisProtocol.RequestType handlerType, Object handler) {\n\n      }\n\n      @Override\n      public SCMRatisResponse submitRequest(SCMRatisRequest request) throws IOException, ExecutionException, InterruptedException {\n        throw new IOException(\"submitRequest is called.\");\n      }\n\n      @Override\n      public void stop() throws IOException {\n\n      }\n\n      @Override\n      public RaftServer.Division getDivision() {\n        return null;\n      }\n\n      @Override\n      public List<String> getRatisRoles() {\n        return null;\n      }\n\n      @Override\n      public NotLeaderException triggerNotLeaderException() {\n        return null;\n      }\n    };\n\n    final SCMHAInvocationHandler invocationHandler =\n        new SCMHAInvocationHandler(\n            SCMRatisProtocol.RequestType.CONTAINER, csm, ratisServer);\n\n    ContainerStateManagerV2 proxy = (ContainerStateManagerV2) Proxy.newProxyInstance(\n        SCMHAInvocationHandler.class.getClassLoader(),\n        new Class<?>[]{ContainerStateManagerV2.class}, invocationHandler);\n\n    try {\n      proxy.addContainer(HddsProtos.ContainerInfoProto.getDefaultInstance());\n      Assert.fail();\n    } catch (IOException ignore) {\n\n    }\n  }\n}", "url": "https://github.com/apache/ozone/pull/1650#discussion_r550164334", "createdAt": "2020-12-30T11:37:43Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/test/java/org/apache/hadoop/hdds/scm/ha/TestReplicationAnnotation.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p/>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p/>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import org.apache.hadoop.hdds.protocol.proto.SCMRatisProtocol.RequestType;\n+import org.apache.hadoop.hdds.scm.metadata.Replicate;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Tests on {@link org.apache.hadoop.hdds.scm.metadata.Replicate}.\n+ */\n+public class TestReplicationAnnotation {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be72174ba5dc256af5b9b083ce3b996e99707fe5"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4d7a23ca557dd9863d2d878bf690c40d6d0cb3e", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/ozone/commit/f4d7a23ca557dd9863d2d878bf690c40d6d0cb3e", "committedDate": "2020-12-31T05:59:18Z", "message": "fixup! address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "391d7ba04f4ee2189bcd9cb0cf1d990523b7d5e2", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/ozone/commit/391d7ba04f4ee2189bcd9cb0cf1d990523b7d5e2", "committedDate": "2020-12-31T06:23:22Z", "message": "fixup! fix findsbug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e03abcf040140b83cb8fed036bb13d1af5aceb11", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/ozone/commit/e03abcf040140b83cb8fed036bb13d1af5aceb11", "committedDate": "2020-12-31T06:34:04Z", "message": "fixup! remove duplicate license header"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbf055ef0da1d0338a9c4d43de2aa2e3d61b455c", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/ozone/commit/cbf055ef0da1d0338a9c4d43de2aa2e3d61b455c", "committedDate": "2020-12-31T06:35:11Z", "message": "fixup! fix style"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwMjc0Nzkz", "url": "https://github.com/apache/ozone/pull/1650#pullrequestreview-560274793", "createdAt": "2020-12-31T06:42:27Z", "commit": {"oid": "cbf055ef0da1d0338a9c4d43de2aa2e3d61b455c"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQwNjo0MjoyN1rOIM6Xyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQwNjo0NjoyMlrOIM6aUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQxMDE4Nw==", "bodyText": "Hey Rui, changes in MockSCMHAManager.java may not be needed, since MockRatisServer is an inner class of MockSCMHAManager,", "url": "https://github.com/apache/ozone/pull/1650#discussion_r550410187", "createdAt": "2020-12-31T06:42:27Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/MockSCMHAManager.java", "diffHunk": "@@ -92,11 +92,20 @@ public void shutdown() throws IOException {\n     ratisServer.stop();\n   }\n \n-  private class MockRatisServer implements SCMRatisServer {\n+  /**\n+   * Mock RatisServer implementation for testing.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbf055ef0da1d0338a9c4d43de2aa2e3d61b455c"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQxMDgzMg==", "bodyText": "Hey Rui, I consider you have to use my anonymous version of SCMRatisServer,\nbecause of\n\n      @Override\n      public SCMRatisResponse submitRequest(SCMRatisRequest request) throws IOException, ExecutionException, InterruptedException {\n        throw new IOException(\"submitRequest is called.\");\n      }\n\n,\nfrom the IOException\n    ContainerStateManagerV2 proxy = (ContainerStateManagerV2) Proxy.newProxyInstance(\n        SCMHAInvocationHandler.class.getClassLoader(),\n        new Class<?>[]{ContainerStateManagerV2.class}, invocationHandler);\n\n    try {\n      proxy.addContainer(HddsProtos.ContainerInfoProto.getDefaultInstance());\n      Assert.fail();\n    } catch (IOException ignore) {\n\n    }\n\nwe can know that invokeRatis() is called, due to the annotation.", "url": "https://github.com/apache/ozone/pull/1650#discussion_r550410832", "createdAt": "2020-12-31T06:46:22Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/test/java/org/apache/hadoop/hdds/scm/ha/TestReplicationAnnotation.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p/>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p/>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n+import org.apache.hadoop.hdds.protocol.proto.SCMRatisProtocol.RequestType;\n+import org.apache.hadoop.hdds.scm.container.ContainerID;\n+import org.apache.hadoop.hdds.scm.container.ContainerInfo;\n+import org.apache.hadoop.hdds.scm.container.ContainerReplica;\n+import org.apache.hadoop.hdds.scm.container.ContainerStateManagerV2;\n+import org.apache.hadoop.hdds.scm.pipeline.PipelineID;\n+import org.apache.hadoop.ozone.common.statemachine.InvalidStateTransitionException;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.NavigableSet;\n+import java.util.Set;\n+\n+/**\n+ * Tests on {@link org.apache.hadoop.hdds.scm.metadata.Replicate}.\n+ */\n+public class TestReplicationAnnotation {\n+  private SCMHAInvocationHandler scmhaInvocationHandler;\n+  private ContainerStateManagerV2 mockCSM;\n+\n+  @Before\n+  public void setup() {\n+    SCMHAManager mock = MockSCMHAManager.getInstance(true);\n+    mockCSM = new ContainerStateManagerV2() {\n+      @Override\n+      public boolean contains(HddsProtos.ContainerID containerID) {\n+        return false;\n+      }\n+\n+      @Override\n+      public Set<ContainerID> getContainerIDs() {\n+        return null;\n+      }\n+\n+      @Override\n+      public Set<ContainerID> getContainerIDs(\n+          HddsProtos.LifeCycleState state) {\n+        return null;\n+      }\n+\n+      @Override\n+      public ContainerInfo getContainer(HddsProtos.ContainerID id) {\n+        return null;\n+      }\n+\n+      @Override\n+      public Set<ContainerReplica> getContainerReplicas(\n+          HddsProtos.ContainerID id) {\n+        return null;\n+      }\n+\n+      @Override\n+      public void updateContainerReplica(\n+          HddsProtos.ContainerID id, ContainerReplica replica) {\n+\n+      }\n+\n+      @Override\n+      public void removeContainerReplica(\n+          HddsProtos.ContainerID id, ContainerReplica replica) {\n+\n+      }\n+\n+      @Override\n+      public void addContainer(HddsProtos.ContainerInfoProto containerInfo)\n+          throws IOException {\n+\n+      }\n+\n+      @Override\n+      public void updateContainerState(\n+          HddsProtos.ContainerID id, HddsProtos.LifeCycleEvent event)\n+          throws IOException, InvalidStateTransitionException {\n+\n+      }\n+\n+      @Override\n+      public void updateDeleteTransactionId(\n+          Map<ContainerID, Long> deleteTransactionMap) throws IOException {\n+\n+      }\n+\n+      @Override\n+      public ContainerInfo getMatchingContainer(\n+          long size, String owner, PipelineID pipelineID,\n+          NavigableSet<ContainerID> containerIDs) {\n+        return null;\n+      }\n+\n+      @Override\n+      public void removeContainer(HddsProtos.ContainerID containerInfo)\n+          throws IOException {\n+      }\n+\n+      @Override\n+      public void close() throws IOException {\n+\n+      }\n+    };\n+\n+    scmhaInvocationHandler = new SCMHAInvocationHandler(\n+        RequestType.CONTAINER, mockCSM, mock.getRatisServer());\n+  }\n+\n+  @Test\n+  public void testReplicateAnnotationBasic() throws Throwable {\n+    // test whether this call will hit the Ratis based replication\n+    // code path in SCMHAInvocationHandler. The invoke() can return means the\n+    // request is handled properly thus response is successful. Expected\n+    // result is null because the function returns nothing.\n+    Object[] arguments = {HddsProtos.ContainerInfoProto.getDefaultInstance()};\n+    Assert.assertEquals(null, scmhaInvocationHandler.invoke(new Object(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbf055ef0da1d0338a9c4d43de2aa2e3d61b455c"}, "originalPosition": 134}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e10e0ce8c20dfa538232d9bbc858f98e97db2ed", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/ozone/commit/9e10e0ce8c20dfa538232d9bbc858f98e97db2ed", "committedDate": "2020-12-31T07:51:43Z", "message": "fixup! address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwMjg1ODk5", "url": "https://github.com/apache/ozone/pull/1650#pullrequestreview-560285899", "createdAt": "2020-12-31T07:53:20Z", "commit": {"oid": "9e10e0ce8c20dfa538232d9bbc858f98e97db2ed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQwNzo1MzoyMFrOIM7EPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQwNzo1MzoyMFrOIM7EPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQyMTU2Ng==", "bodyText": "@GlenGeng\nDone.", "url": "https://github.com/apache/ozone/pull/1650#discussion_r550421566", "createdAt": "2020-12-31T07:53:20Z", "author": {"login": "amaliujia"}, "path": "hadoop-hdds/server-scm/src/test/java/org/apache/hadoop/hdds/scm/ha/TestReplicationAnnotation.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p/>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p/>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n+import org.apache.hadoop.hdds.protocol.proto.SCMRatisProtocol;\n+import org.apache.hadoop.hdds.protocol.proto.SCMRatisProtocol.RequestType;\n+import org.apache.hadoop.hdds.scm.container.ContainerStateManagerV2;\n+import org.apache.ratis.protocol.exceptions.NotLeaderException;\n+import org.apache.ratis.server.RaftServer;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Proxy;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+/**\n+ * Tests on {@link org.apache.hadoop.hdds.scm.metadata.Replicate}.\n+ */\n+public class TestReplicationAnnotation {\n+  private SCMHAInvocationHandler scmhaInvocationHandler;\n+\n+  @Before\n+  public void setup() {\n+    SCMRatisServer ratisServer = new SCMRatisServer() {\n+      @Override\n+      public void start() throws IOException {\n+      }\n+\n+      @Override\n+      public void registerStateMachineHandler(\n+          SCMRatisProtocol.RequestType handlerType, Object handler) {\n+      }\n+\n+      @Override\n+      public SCMRatisResponse submitRequest(SCMRatisRequest request)\n+          throws IOException, ExecutionException, InterruptedException {\n+        throw new IOException(\"submitRequest is called.\");\n+      }\n+\n+      @Override\n+      public void stop() throws IOException {\n+      }\n+\n+      @Override\n+      public RaftServer.Division getDivision() {\n+        return null;\n+      }\n+\n+      @Override\n+      public List<String> getRatisRoles() {\n+        return null;\n+      }\n+\n+      @Override\n+      public NotLeaderException triggerNotLeaderException() {\n+        return null;\n+      }\n+    };\n+\n+    scmhaInvocationHandler = new SCMHAInvocationHandler(\n+        RequestType.CONTAINER, null, ratisServer);\n+  }\n+\n+  @Test\n+  public void testReplicateAnnotationBasic() throws Throwable {\n+    ContainerStateManagerV2 proxy =\n+        (ContainerStateManagerV2) Proxy.newProxyInstance(\n+        SCMHAInvocationHandler.class.getClassLoader(),\n+        new Class<?>[]{ContainerStateManagerV2.class}, scmhaInvocationHandler);\n+\n+    try {\n+      proxy.addContainer(HddsProtos.ContainerInfoProto.getDefaultInstance());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e10e0ce8c20dfa538232d9bbc858f98e97db2ed"}, "originalPosition": 90}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwMjg1OTk0", "url": "https://github.com/apache/ozone/pull/1650#pullrequestreview-560285994", "createdAt": "2020-12-31T07:54:00Z", "commit": {"oid": "9e10e0ce8c20dfa538232d9bbc858f98e97db2ed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQwNzo1NDowMFrOIM7Esg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQwNzo1NDowMFrOIM7Esg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQyMTY4Mg==", "bodyText": "We only want to see that it will hit SCMHAInvocationHandler.invokeRatis() so there is no need to implement a ContainerStateManagerV2.", "url": "https://github.com/apache/ozone/pull/1650#discussion_r550421682", "createdAt": "2020-12-31T07:54:00Z", "author": {"login": "amaliujia"}, "path": "hadoop-hdds/server-scm/src/test/java/org/apache/hadoop/hdds/scm/ha/TestReplicationAnnotation.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p/>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p/>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n+import org.apache.hadoop.hdds.protocol.proto.SCMRatisProtocol;\n+import org.apache.hadoop.hdds.protocol.proto.SCMRatisProtocol.RequestType;\n+import org.apache.hadoop.hdds.scm.container.ContainerStateManagerV2;\n+import org.apache.ratis.protocol.exceptions.NotLeaderException;\n+import org.apache.ratis.server.RaftServer;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Proxy;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+/**\n+ * Tests on {@link org.apache.hadoop.hdds.scm.metadata.Replicate}.\n+ */\n+public class TestReplicationAnnotation {\n+  private SCMHAInvocationHandler scmhaInvocationHandler;\n+\n+  @Before\n+  public void setup() {\n+    SCMRatisServer ratisServer = new SCMRatisServer() {\n+      @Override\n+      public void start() throws IOException {\n+      }\n+\n+      @Override\n+      public void registerStateMachineHandler(\n+          SCMRatisProtocol.RequestType handlerType, Object handler) {\n+      }\n+\n+      @Override\n+      public SCMRatisResponse submitRequest(SCMRatisRequest request)\n+          throws IOException, ExecutionException, InterruptedException {\n+        throw new IOException(\"submitRequest is called.\");\n+      }\n+\n+      @Override\n+      public void stop() throws IOException {\n+      }\n+\n+      @Override\n+      public RaftServer.Division getDivision() {\n+        return null;\n+      }\n+\n+      @Override\n+      public List<String> getRatisRoles() {\n+        return null;\n+      }\n+\n+      @Override\n+      public NotLeaderException triggerNotLeaderException() {\n+        return null;\n+      }\n+    };\n+\n+    scmhaInvocationHandler = new SCMHAInvocationHandler(\n+        RequestType.CONTAINER, null, ratisServer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e10e0ce8c20dfa538232d9bbc858f98e97db2ed"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwODAzMDA5", "url": "https://github.com/apache/ozone/pull/1650#pullrequestreview-560803009", "createdAt": "2021-01-04T06:34:04Z", "commit": {"oid": "9e10e0ce8c20dfa538232d9bbc858f98e97db2ed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwNjozNDowNVrOINmyNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwNjozNDowNVrOINmyNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTEzNzg0NA==", "bodyText": "Please add some message such as Assert.fail(\"xxxxx\");. You can do it in next pr, I will merge this first.", "url": "https://github.com/apache/ozone/pull/1650#discussion_r551137844", "createdAt": "2021-01-04T06:34:05Z", "author": {"login": "runzhiwang"}, "path": "hadoop-hdds/server-scm/src/test/java/org/apache/hadoop/hdds/scm/ha/TestReplicationAnnotation.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p/>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p/>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n+import org.apache.hadoop.hdds.protocol.proto.SCMRatisProtocol;\n+import org.apache.hadoop.hdds.protocol.proto.SCMRatisProtocol.RequestType;\n+import org.apache.hadoop.hdds.scm.container.ContainerStateManagerV2;\n+import org.apache.ratis.protocol.exceptions.NotLeaderException;\n+import org.apache.ratis.server.RaftServer;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Proxy;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+/**\n+ * Tests on {@link org.apache.hadoop.hdds.scm.metadata.Replicate}.\n+ */\n+public class TestReplicationAnnotation {\n+  private SCMHAInvocationHandler scmhaInvocationHandler;\n+\n+  @Before\n+  public void setup() {\n+    SCMRatisServer ratisServer = new SCMRatisServer() {\n+      @Override\n+      public void start() throws IOException {\n+      }\n+\n+      @Override\n+      public void registerStateMachineHandler(\n+          SCMRatisProtocol.RequestType handlerType, Object handler) {\n+      }\n+\n+      @Override\n+      public SCMRatisResponse submitRequest(SCMRatisRequest request)\n+          throws IOException, ExecutionException, InterruptedException {\n+        throw new IOException(\"submitRequest is called.\");\n+      }\n+\n+      @Override\n+      public void stop() throws IOException {\n+      }\n+\n+      @Override\n+      public RaftServer.Division getDivision() {\n+        return null;\n+      }\n+\n+      @Override\n+      public List<String> getRatisRoles() {\n+        return null;\n+      }\n+\n+      @Override\n+      public NotLeaderException triggerNotLeaderException() {\n+        return null;\n+      }\n+    };\n+\n+    scmhaInvocationHandler = new SCMHAInvocationHandler(\n+        RequestType.CONTAINER, null, ratisServer);\n+  }\n+\n+  @Test\n+  public void testReplicateAnnotationBasic() throws Throwable {\n+    ContainerStateManagerV2 proxy =\n+        (ContainerStateManagerV2) Proxy.newProxyInstance(\n+        SCMHAInvocationHandler.class.getClassLoader(),\n+        new Class<?>[]{ContainerStateManagerV2.class}, scmhaInvocationHandler);\n+\n+    try {\n+      proxy.addContainer(HddsProtos.ContainerInfoProto.getDefaultInstance());\n+      // Should have seen a IOException.\n+      Assert.fail();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e10e0ce8c20dfa538232d9bbc858f98e97db2ed"}, "originalPosition": 92}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwODA0MDkz", "url": "https://github.com/apache/ozone/pull/1650#pullrequestreview-560804093", "createdAt": "2021-01-04T06:37:55Z", "commit": {"oid": "9e10e0ce8c20dfa538232d9bbc858f98e97db2ed"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2015, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}