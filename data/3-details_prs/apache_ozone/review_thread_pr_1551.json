{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0ODMxNjk2", "number": 1551, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMjozNTowNVrOE3r5UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNTo1OTowOFrOE-uHcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODI2MzIxOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/container-service/src/test/java/org/apache/hadoop/ozone/container/replication/TestSimpleContainerDownloader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMjozNTowNVrOHxLTKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwOToyMToxNlrOHxxoow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMyNzQwMA==", "bodyText": "downloadContainer may fail in two ways: IOException may be thrown immediately or the returned CompletableFuture may be completed exceptionally.  These hit different code paths in getContainerDataFromReplicas.  I think we should cover both cases.", "url": "https://github.com/apache/ozone/pull/1551#discussion_r521327400", "createdAt": "2020-11-11T12:35:05Z", "author": {"login": "adoroszlai"}, "path": "hadoop-hdds/container-service/src/test/java/org/apache/hadoop/ozone/container/replication/TestSimpleContainerDownloader.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.container.replication;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.hadoop.hdds.conf.ConfigurationSource;\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.protocol.DatanodeDetails;\n+import org.apache.hadoop.hdds.protocol.MockDatanodeDetails;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * Test SimpleContainerDownloader.\n+ */\n+public class TestSimpleContainerDownloader {\n+\n+  @Test\n+  public void testGetContainerDataFromReplicasHappyPath() throws Exception {\n+\n+    //GIVEN\n+    List<DatanodeDetails> datanodes = createDatanodes();\n+\n+    SimpleContainerDownloader downloader =\n+        createDownloaderWithPredefinedFailures();\n+\n+    //WHEN\n+    final Path result =\n+        downloader.getContainerDataFromReplicas(1L, datanodes)\n+            .get(1L, TimeUnit.SECONDS);\n+\n+    //THEN\n+    Assert.assertEquals(datanodes.get(0).getUuidString(), result.toString());\n+  }\n+\n+  @Test\n+  public void testGetContainerDataFromReplicasOneFailure() throws Exception {\n+\n+    //GIVEN\n+    List<DatanodeDetails> datanodes = createDatanodes();\n+\n+    SimpleContainerDownloader downloader =\n+        createDownloaderWithPredefinedFailures(datanodes.get(0));\n+\n+    //WHEN\n+    final Path result =\n+        downloader.getContainerDataFromReplicas(1L, datanodes)\n+            .get(1L, TimeUnit.SECONDS);\n+\n+    //THEN\n+    //first datanode is failed, second worked\n+    Assert.assertEquals(datanodes.get(1).getUuidString(), result.toString());\n+  }\n+\n+  /**\n+   * Creates downloader which fails with datanodes in the arguments.\n+   */\n+  private SimpleContainerDownloader createDownloaderWithPredefinedFailures(\n+      DatanodeDetails... failedDatanodes\n+  ) {\n+\n+    ConfigurationSource conf = new OzoneConfiguration();\n+\n+    final List<DatanodeDetails> datanodes =\n+        Arrays.asList(failedDatanodes);\n+\n+    return new SimpleContainerDownloader(conf, null) {\n+\n+      @Override\n+      protected CompletableFuture<Path> downloadContainer(\n+          long containerId,\n+          DatanodeDetails datanode\n+      ) throws IOException {\n+\n+        if (datanodes.contains(datanode)) {\n+          throw new IOException(\"Unavailable datanode\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e15cf31aa4eb484ced6f24f2430725a8b163ebb"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk1NTQ5MQ==", "bodyText": "Good point. Added a new test case.\n(As the test method is already simplified with helper methods, seems to be more simple to create a new method instead of introducing a new parametrized Junit test)", "url": "https://github.com/apache/ozone/pull/1551#discussion_r521955491", "createdAt": "2020-11-12T09:21:16Z", "author": {"login": "elek"}, "path": "hadoop-hdds/container-service/src/test/java/org/apache/hadoop/ozone/container/replication/TestSimpleContainerDownloader.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.container.replication;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.hadoop.hdds.conf.ConfigurationSource;\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.protocol.DatanodeDetails;\n+import org.apache.hadoop.hdds.protocol.MockDatanodeDetails;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * Test SimpleContainerDownloader.\n+ */\n+public class TestSimpleContainerDownloader {\n+\n+  @Test\n+  public void testGetContainerDataFromReplicasHappyPath() throws Exception {\n+\n+    //GIVEN\n+    List<DatanodeDetails> datanodes = createDatanodes();\n+\n+    SimpleContainerDownloader downloader =\n+        createDownloaderWithPredefinedFailures();\n+\n+    //WHEN\n+    final Path result =\n+        downloader.getContainerDataFromReplicas(1L, datanodes)\n+            .get(1L, TimeUnit.SECONDS);\n+\n+    //THEN\n+    Assert.assertEquals(datanodes.get(0).getUuidString(), result.toString());\n+  }\n+\n+  @Test\n+  public void testGetContainerDataFromReplicasOneFailure() throws Exception {\n+\n+    //GIVEN\n+    List<DatanodeDetails> datanodes = createDatanodes();\n+\n+    SimpleContainerDownloader downloader =\n+        createDownloaderWithPredefinedFailures(datanodes.get(0));\n+\n+    //WHEN\n+    final Path result =\n+        downloader.getContainerDataFromReplicas(1L, datanodes)\n+            .get(1L, TimeUnit.SECONDS);\n+\n+    //THEN\n+    //first datanode is failed, second worked\n+    Assert.assertEquals(datanodes.get(1).getUuidString(), result.toString());\n+  }\n+\n+  /**\n+   * Creates downloader which fails with datanodes in the arguments.\n+   */\n+  private SimpleContainerDownloader createDownloaderWithPredefinedFailures(\n+      DatanodeDetails... failedDatanodes\n+  ) {\n+\n+    ConfigurationSource conf = new OzoneConfiguration();\n+\n+    final List<DatanodeDetails> datanodes =\n+        Arrays.asList(failedDatanodes);\n+\n+    return new SimpleContainerDownloader(conf, null) {\n+\n+      @Override\n+      protected CompletableFuture<Path> downloadContainer(\n+          long containerId,\n+          DatanodeDetails datanode\n+      ) throws IOException {\n+\n+        if (datanodes.contains(datanode)) {\n+          throw new IOException(\"Unavailable datanode\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMyNzQwMA=="}, "originalCommit": {"oid": "9e15cf31aa4eb484ced6f24f2430725a8b163ebb"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODI5NDQ0OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/replication/SimpleContainerDownloader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMjo0NDowOFrOHxLmWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwOTowNzo1M1rOHxxGAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMzMjMxMw==", "bodyText": "Not introduced in this patch, but I think this should be:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            } catch (IOException e) {\n          \n          \n            \n                              LOG.error(\"Error on replicating container: \" + containerId,\n          \n          \n            \n                                  t);\n          \n          \n            \n                            } catch (IOException e) {\n          \n          \n            \n                              LOG.error(\"Error on replicating container: \" + containerId,\n          \n          \n            \n                                  e);", "url": "https://github.com/apache/ozone/pull/1551#discussion_r521332313", "createdAt": "2020-11-11T12:44:08Z", "author": {"login": "adoroszlai"}, "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/replication/SimpleContainerDownloader.java", "diffHunk": "@@ -74,21 +75,13 @@ public SimpleContainerDownloader(ConfigurationSource conf,\n     for (DatanodeDetails datanode : sourceDatanodes) {\n       try {\n         if (result == null) {\n-          GrpcReplicationClient grpcReplicationClient =\n-              new GrpcReplicationClient(datanode.getIpAddress(),\n-                  datanode.getPort(Name.STANDALONE).getValue(),\n-                  workingDirectory, securityConfig, caCert);\n-          result = grpcReplicationClient.download(containerId);\n+          result = downloadContainer(containerId, datanode);\n         } else {\n           result = result.thenApply(CompletableFuture::completedFuture)\n               .exceptionally(t -> {\n                 LOG.error(\"Error on replicating container: \" + containerId, t);\n                 try {\n-                  GrpcReplicationClient grpcReplicationClient =\n-                      new GrpcReplicationClient(datanode.getIpAddress(),\n-                          datanode.getPort(Name.STANDALONE).getValue(),\n-                          workingDirectory, securityConfig, caCert);\n-                  return grpcReplicationClient.download(containerId);\n+                  return downloadContainer(containerId, datanode);\n                 } catch (IOException e) {\n                   LOG.error(\"Error on replicating container: \" + containerId,\n                       t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e15cf31aa4eb484ced6f24f2430725a8b163ebb"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk0NjYyNQ==", "bodyText": "Nice catch, thx.", "url": "https://github.com/apache/ozone/pull/1551#discussion_r521946625", "createdAt": "2020-11-12T09:07:53Z", "author": {"login": "elek"}, "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/replication/SimpleContainerDownloader.java", "diffHunk": "@@ -74,21 +75,13 @@ public SimpleContainerDownloader(ConfigurationSource conf,\n     for (DatanodeDetails datanode : sourceDatanodes) {\n       try {\n         if (result == null) {\n-          GrpcReplicationClient grpcReplicationClient =\n-              new GrpcReplicationClient(datanode.getIpAddress(),\n-                  datanode.getPort(Name.STANDALONE).getValue(),\n-                  workingDirectory, securityConfig, caCert);\n-          result = grpcReplicationClient.download(containerId);\n+          result = downloadContainer(containerId, datanode);\n         } else {\n           result = result.thenApply(CompletableFuture::completedFuture)\n               .exceptionally(t -> {\n                 LOG.error(\"Error on replicating container: \" + containerId, t);\n                 try {\n-                  GrpcReplicationClient grpcReplicationClient =\n-                      new GrpcReplicationClient(datanode.getIpAddress(),\n-                          datanode.getPort(Name.STANDALONE).getValue(),\n-                          workingDirectory, securityConfig, caCert);\n-                  return grpcReplicationClient.download(containerId);\n+                  return downloadContainer(containerId, datanode);\n                 } catch (IOException e) {\n                   LOG.error(\"Error on replicating container: \" + containerId,\n                       t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMzMjMxMw=="}, "originalCommit": {"oid": "9e15cf31aa4eb484ced6f24f2430725a8b163ebb"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMDA1OTE3OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/container-service/src/test/java/org/apache/hadoop/ozone/container/replication/TestSimpleContainerDownloader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxODo1NToxNVrOH19X0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMjoxMToyNFrOH4KxSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM0MjA5Nw==", "bodyText": "Actually, these checks are no longer valid after 5e8aaee since SimpleContainerDownloader shuffles the datanodes.\n\n  \n    \n      ozone/hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/replication/SimpleContainerDownloader.java\n    \n    \n        Lines 79 to 84\n      in\n      0aca5c7\n    \n    \n    \n    \n\n        \n          \n           //There is a chance for the download is successful but import is failed, \n        \n\n        \n          \n           //due to data corruption. We need a random selected datanode to have a \n        \n\n        \n          \n           //chance to succeed next time. \n        \n\n        \n          \n           final ArrayList<DatanodeDetails> shuffledDatanodes = \n        \n\n        \n          \n               new ArrayList<>(sourceDatanodes); \n        \n\n        \n          \n           Collections.shuffle(shuffledDatanodes);", "url": "https://github.com/apache/ozone/pull/1551#discussion_r526342097", "createdAt": "2020-11-18T18:55:15Z", "author": {"login": "adoroszlai"}, "path": "hadoop-hdds/container-service/src/test/java/org/apache/hadoop/ozone/container/replication/TestSimpleContainerDownloader.java", "diffHunk": "@@ -21,24 +21,84 @@\n import java.nio.file.Path;\n import java.nio.file.Paths;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n \n+import org.apache.hadoop.hdds.conf.ConfigurationSource;\n import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n import org.apache.hadoop.hdds.protocol.DatanodeDetails;\n import org.apache.hadoop.hdds.protocol.MockDatanodeDetails;\n \n import org.junit.Assert;\n import org.junit.Test;\n \n-/**\n- * Test container downloader.\n+/*\n+ * Test SimpleContainerDownloader.\n  */\n public class TestSimpleContainerDownloader {\n \n   private static final String SUCCESS_PATH = \"downloaded\";\n \n+  @Test\n+  public void testGetContainerDataFromReplicasHappyPath() throws Exception {\n+\n+    //GIVEN\n+    List<DatanodeDetails> datanodes = createDatanodes();\n+\n+    SimpleContainerDownloader downloader =\n+        createDownloaderWithPredefinedFailures(true);\n+\n+    //WHEN\n+    final Path result =\n+        downloader.getContainerDataFromReplicas(1L, datanodes)\n+            .get(1L, TimeUnit.SECONDS);\n+\n+    //THEN\n+    Assert.assertEquals(datanodes.get(0).getUuidString(), result.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7fc88b29efc156909344de37b9897102a414bb7"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY1ODc2Mg==", "bodyText": "Looking into it. Seems I stepped in my own trap ;-)", "url": "https://github.com/apache/ozone/pull/1551#discussion_r528658762", "createdAt": "2020-11-23T12:11:24Z", "author": {"login": "elek"}, "path": "hadoop-hdds/container-service/src/test/java/org/apache/hadoop/ozone/container/replication/TestSimpleContainerDownloader.java", "diffHunk": "@@ -21,24 +21,84 @@\n import java.nio.file.Path;\n import java.nio.file.Paths;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n \n+import org.apache.hadoop.hdds.conf.ConfigurationSource;\n import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n import org.apache.hadoop.hdds.protocol.DatanodeDetails;\n import org.apache.hadoop.hdds.protocol.MockDatanodeDetails;\n \n import org.junit.Assert;\n import org.junit.Test;\n \n-/**\n- * Test container downloader.\n+/*\n+ * Test SimpleContainerDownloader.\n  */\n public class TestSimpleContainerDownloader {\n \n   private static final String SUCCESS_PATH = \"downloaded\";\n \n+  @Test\n+  public void testGetContainerDataFromReplicasHappyPath() throws Exception {\n+\n+    //GIVEN\n+    List<DatanodeDetails> datanodes = createDatanodes();\n+\n+    SimpleContainerDownloader downloader =\n+        createDownloaderWithPredefinedFailures(true);\n+\n+    //WHEN\n+    final Path result =\n+        downloader.getContainerDataFromReplicas(1L, datanodes)\n+            .get(1L, TimeUnit.SECONDS);\n+\n+    //THEN\n+    Assert.assertEquals(datanodes.get(0).getUuidString(), result.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM0MjA5Nw=="}, "originalCommit": {"oid": "a7fc88b29efc156909344de37b9897102a414bb7"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjAyNzM2OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/replication/SimpleContainerDownloader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNTo1OTowOFrOH8Bw1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNTo1OTowOFrOH8Bw1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcwNTQ5NA==", "bodyText": "So if replication was slow, the previous version may have closed the client prematurely?", "url": "https://github.com/apache/ozone/pull/1551#discussion_r532705494", "createdAt": "2020-11-30T15:59:08Z", "author": {"login": "adoroszlai"}, "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/replication/SimpleContainerDownloader.java", "diffHunk": "@@ -128,12 +130,20 @@ public SimpleContainerDownloader(ConfigurationSource conf,\n       DatanodeDetails datanode\n   ) throws Exception {\n     CompletableFuture<Path> result;\n-    try (GrpcReplicationClient grpcReplicationClient =\n+    GrpcReplicationClient grpcReplicationClient =\n         new GrpcReplicationClient(datanode.getIpAddress(),\n             datanode.getPort(Name.STANDALONE).getValue(),\n-            workingDirectory, securityConfig, caCert)) {\n-      result = grpcReplicationClient.download(containerId);\n-    }\n+            workingDirectory, securityConfig, caCert);\n+    result = grpcReplicationClient.download(containerId)\n+        .thenApply(r -> {\n+          try {\n+            grpcReplicationClient.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a280682b6a9301f73d8a5d2d2f832790b2dccd62"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4689, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}