{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMDcxNzIy", "number": 628, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzoxNDozNlrODlCfnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzozMDoxMlrODlC0oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTY0NzY1OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/volume/VolumeSet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzoxNDozNlrOFxsvuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNzo1MTowMlrOFyJRtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1NzY1Ng==", "bodyText": "This can probably be done outside the writeLock - should be safe.\nalso, we can invoke the listener outside the for loop - perhaps like:\nif (!failedVolumes.isEmpty()) {failedVolumeListener.run();}", "url": "https://github.com/apache/ozone/pull/628#discussion_r387657656", "createdAt": "2020-03-04T13:14:36Z", "author": {"login": "supratimdeka"}, "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/volume/VolumeSet.java", "diffHunk": "@@ -239,23 +249,24 @@ private void checkAllVolumes() throws IOException {\n    * @param failedVolumes\n    */\n   private void handleVolumeFailures(Set<HddsVolume> failedVolumes) {\n-    for (HddsVolume v: failedVolumes) {\n-      this.writeLock();\n-      try {\n+    this.writeLock();\n+    try {\n+      for (HddsVolume v : failedVolumes) {\n         // Immediately mark the volume as failed so it is unavailable\n         // for new containers.\n-        volumeMap.remove(v.getHddsRootDir().getPath());\n-        failedVolumeMap.putIfAbsent(v.getHddsRootDir().getPath(), v);\n-      } finally {\n-        this.writeUnlock();\n+        failVolume(v.getHddsRootDir().getPath());\n       }\n-\n-      // TODO:\n-      // 1. Mark all closed containers on the volume as unhealthy.\n-      // 2. Consider stopping IO on open containers and tearing down\n-      //    active pipelines.\n-      // 3. Handle Ratis log disk failure.\n+      if (failedVolumeListener != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "513ff182fae284020e9d7be386d87bc932ec1ee9"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEyNTExMQ==", "bodyText": "Yes we can move it outside. But I think there is a race condition in marking a volume as failed. A container in process of creation can still get created on the failed volume. We can handle it as part of separate jira though.", "url": "https://github.com/apache/ozone/pull/628#discussion_r388125111", "createdAt": "2020-03-05T07:51:02Z", "author": {"login": "lokeshj1703"}, "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/volume/VolumeSet.java", "diffHunk": "@@ -239,23 +249,24 @@ private void checkAllVolumes() throws IOException {\n    * @param failedVolumes\n    */\n   private void handleVolumeFailures(Set<HddsVolume> failedVolumes) {\n-    for (HddsVolume v: failedVolumes) {\n-      this.writeLock();\n-      try {\n+    this.writeLock();\n+    try {\n+      for (HddsVolume v : failedVolumes) {\n         // Immediately mark the volume as failed so it is unavailable\n         // for new containers.\n-        volumeMap.remove(v.getHddsRootDir().getPath());\n-        failedVolumeMap.putIfAbsent(v.getHddsRootDir().getPath(), v);\n-      } finally {\n-        this.writeUnlock();\n+        failVolume(v.getHddsRootDir().getPath());\n       }\n-\n-      // TODO:\n-      // 1. Mark all closed containers on the volume as unhealthy.\n-      // 2. Consider stopping IO on open containers and tearing down\n-      //    active pipelines.\n-      // 3. Handle Ratis log disk failure.\n+      if (failedVolumeListener != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1NzY1Ng=="}, "originalCommit": {"oid": "513ff182fae284020e9d7be386d87bc932ec1ee9"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTY3MzM0OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/keyvalue/KeyValueContainer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzoyMjoxM1rOFxs_lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNzoyMzo1OFrOFyItyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY2MTcxOQ==", "bodyText": "Good point. But, I think this is how it is already implemented. updateContainerData() on encountering an exception, does not reset the state if the state is UNHEALTHY. Or did I get that wrong?", "url": "https://github.com/apache/ozone/pull/628#discussion_r387661719", "createdAt": "2020-03-04T13:22:13Z", "author": {"login": "supratimdeka"}, "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/keyvalue/KeyValueContainer.java", "diffHunk": "@@ -298,6 +298,8 @@ public void markContainerForClose() throws StorageContainerException {\n   public void markContainerUnhealthy() throws StorageContainerException {\n     writeLock();\n     try {\n+      // TODO: container should be marked UNHEALTHY in memory even if container", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "513ff182fae284020e9d7be386d87bc932ec1ee9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODExNTkxNQ==", "bodyText": "You are right. I missed the state check.", "url": "https://github.com/apache/ozone/pull/628#discussion_r388115915", "createdAt": "2020-03-05T07:23:58Z", "author": {"login": "lokeshj1703"}, "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/keyvalue/KeyValueContainer.java", "diffHunk": "@@ -298,6 +298,8 @@ public void markContainerForClose() throws StorageContainerException {\n   public void markContainerUnhealthy() throws StorageContainerException {\n     writeLock();\n     try {\n+      // TODO: container should be marked UNHEALTHY in memory even if container", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY2MTcxOQ=="}, "originalCommit": {"oid": "513ff182fae284020e9d7be386d87bc932ec1ee9"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTY5MDQyOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/container-service/src/test/java/org/apache/hadoop/ozone/container/common/volume/TestVolumeSet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzoyNjo1NlrOFxtKCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNzo1MTozMlrOFyJShQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY2NDM5Mg==", "bodyText": "any reason why we are migrating to this constructor with the additional argument?\nsame question applies to all the other places where this change has been made.", "url": "https://github.com/apache/ozone/pull/628#discussion_r387664392", "createdAt": "2020-03-04T13:26:56Z", "author": {"login": "supratimdeka"}, "path": "hadoop-hdds/container-service/src/test/java/org/apache/hadoop/ozone/container/common/volume/TestVolumeSet.java", "diffHunk": "@@ -64,7 +64,7 @@\n   private static final String DUMMY_IP_ADDR = \"0.0.0.0\";\n \n   private void initializeVolumeSet() throws Exception {\n-    volumeSet = new VolumeSet(UUID.randomUUID().toString(), conf);\n+    volumeSet = new VolumeSet(UUID.randomUUID().toString(), null, conf);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "513ff182fae284020e9d7be386d87bc932ec1ee9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEyNTMxNw==", "bodyText": "This is change related to old commit. Will fix it.", "url": "https://github.com/apache/ozone/pull/628#discussion_r388125317", "createdAt": "2020-03-05T07:51:32Z", "author": {"login": "lokeshj1703"}, "path": "hadoop-hdds/container-service/src/test/java/org/apache/hadoop/ozone/container/common/volume/TestVolumeSet.java", "diffHunk": "@@ -64,7 +64,7 @@\n   private static final String DUMMY_IP_ADDR = \"0.0.0.0\";\n \n   private void initializeVolumeSet() throws Exception {\n-    volumeSet = new VolumeSet(UUID.randomUUID().toString(), conf);\n+    volumeSet = new VolumeSet(UUID.randomUUID().toString(), null, conf);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY2NDM5Mg=="}, "originalCommit": {"oid": "513ff182fae284020e9d7be386d87bc932ec1ee9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTcwMTQ1OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/impl/ContainerSet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzozMDoxMlrOFxtQ1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzozMDoxMlrOFxtQ1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY2NjEzMg==", "bodyText": "might make sense to add the container id and the volume in this error log.", "url": "https://github.com/apache/ozone/pull/628#discussion_r387666132", "createdAt": "2020-03-04T13:30:12Z", "author": {"login": "supratimdeka"}, "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/impl/ContainerSet.java", "diffHunk": "@@ -122,6 +122,18 @@ public int containerCount() {\n     return containerMap.size();\n   }\n \n+  public void handleVolumeFailures() {\n+    containerMap.values().forEach(c -> {\n+      if (c.getContainerData().getVolume().isFailed()) {\n+        try {\n+          c.markContainerUnhealthy();\n+        } catch (StorageContainerException e) {\n+          LOG.error(\"Failed to move container to UNHEALTHY state\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "513ff182fae284020e9d7be386d87bc932ec1ee9"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4948, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}