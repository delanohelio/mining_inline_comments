{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNDUyMzI5", "number": 821, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMzo1ODozNlrODx3U9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMTo1NzoyOVrODx4p1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjEzMzAyOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/om/TestOzoneManagerSetOwner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMzo1ODozNlrOGFlDsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMDo1ODo0OVrOGFmHJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUwMzIxNg==", "bodyText": "Can we add this test in TestOzoneRpcClient?", "url": "https://github.com/apache/ozone/pull/821#discussion_r408503216", "createdAt": "2020-04-14T23:58:36Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/om/TestOzoneManagerSetOwner.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om;\n+\n+import java.util.UUID;\n+\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.ozone.MiniOzoneCluster;\n+import org.apache.hadoop.ozone.client.ObjectStore;\n+import org.apache.hadoop.ozone.client.OzoneClient;\n+import org.apache.hadoop.ozone.client.protocol.ClientProtocol;\n+\n+import static org.apache.hadoop.fs.CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY;\n+import static org.apache.hadoop.fs.CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_RETRY_INTERVAL_KEY;\n+import static org.apache.hadoop.hdds.scm.ScmConfigKeys.OZONE_SCM_RATIS_PIPELINE_LIMIT;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_ACL_AUTHORIZER_CLASS;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_ACL_AUTHORIZER_CLASS_NATIVE;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_ACL_ENABLED;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_ADMINISTRATORS;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_CLIENT_FAILOVER_MAX_ATTEMPTS_KEY;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_OPEN_KEY_EXPIRE_THRESHOLD_SECONDS;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+\n+/**\n+ * Test OzoneManager setOwner command.\n+ */\n+public class TestOzoneManagerSetOwner {\n+\n+  @Rule\n+  public Timeout timeout = new Timeout(120_000);\n+\n+  /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4741130b959f47e9452bf1b7ea3a2e91235f5a7b"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUyMDQ4Nw==", "bodyText": "done", "url": "https://github.com/apache/ozone/pull/821#discussion_r408520487", "createdAt": "2020-04-15T00:58:49Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/om/TestOzoneManagerSetOwner.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om;\n+\n+import java.util.UUID;\n+\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.ozone.MiniOzoneCluster;\n+import org.apache.hadoop.ozone.client.ObjectStore;\n+import org.apache.hadoop.ozone.client.OzoneClient;\n+import org.apache.hadoop.ozone.client.protocol.ClientProtocol;\n+\n+import static org.apache.hadoop.fs.CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY;\n+import static org.apache.hadoop.fs.CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_RETRY_INTERVAL_KEY;\n+import static org.apache.hadoop.hdds.scm.ScmConfigKeys.OZONE_SCM_RATIS_PIPELINE_LIMIT;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_ACL_AUTHORIZER_CLASS;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_ACL_AUTHORIZER_CLASS_NATIVE;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_ACL_ENABLED;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_ADMINISTRATORS;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_CLIENT_FAILOVER_MAX_ATTEMPTS_KEY;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_OPEN_KEY_EXPIRE_THRESHOLD_SECONDS;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+\n+/**\n+ * Test OzoneManager setOwner command.\n+ */\n+public class TestOzoneManagerSetOwner {\n+\n+  @Rule\n+  public Timeout timeout = new Timeout(120_000);\n+\n+  /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUwMzIxNg=="}, "originalCommit": {"oid": "4741130b959f47e9452bf1b7ea3a2e91235f5a7b"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjEzNDI5OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/volume/OMVolumeSetOwnerRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMzo1OTowOFrOGFlEbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMDo0Mjo1MVrOGFl2EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUwMzQwNQ==", "bodyText": "Instead of return response here, set it to omClientResponse, and let finally block take care of it.", "url": "https://github.com/apache/ozone/pull/821#discussion_r408503405", "createdAt": "2020-04-14T23:59:08Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/volume/OMVolumeSetOwnerRequest.java", "diffHunk": "@@ -147,18 +145,20 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n           .setMessage(\n             \"Volume '\" + volume + \"' owner is already '\" + newOwner + \"'.\")\n           .setSuccess(false);\n-        return new OMVolumeSetOwnerResponse(omResponse.build());\n+        omResponse.setSetVolumePropertyResponse(\n+            SetVolumePropertyResponse.newBuilder().build());\n+        omClientResponse = new OMVolumeSetOwnerResponse(omResponse.build());\n+        addResponseToDoubleBuffer(transactionLogIndex, omClientResponse,\n+            ozoneManagerDoubleBufferHelper);\n+        return omClientResponse;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4741130b959f47e9452bf1b7ea3a2e91235f5a7b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUxNjExMw==", "bodyText": "done", "url": "https://github.com/apache/ozone/pull/821#discussion_r408516113", "createdAt": "2020-04-15T00:42:51Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/volume/OMVolumeSetOwnerRequest.java", "diffHunk": "@@ -147,18 +145,20 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n           .setMessage(\n             \"Volume '\" + volume + \"' owner is already '\" + newOwner + \"'.\")\n           .setSuccess(false);\n-        return new OMVolumeSetOwnerResponse(omResponse.build());\n+        omResponse.setSetVolumePropertyResponse(\n+            SetVolumePropertyResponse.newBuilder().build());\n+        omClientResponse = new OMVolumeSetOwnerResponse(omResponse.build());\n+        addResponseToDoubleBuffer(transactionLogIndex, omClientResponse,\n+            ozoneManagerDoubleBufferHelper);\n+        return omClientResponse;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUwMzQwNQ=="}, "originalCommit": {"oid": "4741130b959f47e9452bf1b7ea3a2e91235f5a7b"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjM1MDMwOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/client/rpc/TestOzoneRpcClientAbstract.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMTo1NzoyOVrOGFnD_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMjo1NzozMVrOGFoCZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUzNjA2MQ==", "bodyText": "Minor NIT: We don't need this comment, as this PR fixes the bug in the code :)", "url": "https://github.com/apache/ozone/pull/821#discussion_r408536061", "createdAt": "2020-04-15T01:57:29Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/client/rpc/TestOzoneRpcClientAbstract.java", "diffHunk": "@@ -241,6 +242,19 @@ public void testOMClientProxyProvider() {\n         ozoneManager.getOmRpcServerAddr()));\n   }\n \n+  @Test\n+  public void testVolumeSetOwner() throws IOException {\n+    String volumeName = UUID.randomUUID().toString();\n+    store.createVolume(volumeName);\n+\n+    String ownerName = \"someRandomUser1\";\n+\n+    ClientProtocol proxy = store.getClientProxy();\n+    proxy.setVolumeOwner(volumeName, ownerName);\n+    // Set owner again. Expect no NPEs nor timeouts", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb0a929d18e42db05bbd49caa6f235749a6e8da0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU0NjY2Nw==", "bodyText": "well, my intention is to remind someone in the future in case this breaks again by some new code.", "url": "https://github.com/apache/ozone/pull/821#discussion_r408546667", "createdAt": "2020-04-15T02:37:11Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/client/rpc/TestOzoneRpcClientAbstract.java", "diffHunk": "@@ -241,6 +242,19 @@ public void testOMClientProxyProvider() {\n         ozoneManager.getOmRpcServerAddr()));\n   }\n \n+  @Test\n+  public void testVolumeSetOwner() throws IOException {\n+    String volumeName = UUID.randomUUID().toString();\n+    store.createVolume(volumeName);\n+\n+    String ownerName = \"someRandomUser1\";\n+\n+    ClientProtocol proxy = store.getClientProxy();\n+    proxy.setVolumeOwner(volumeName, ownerName);\n+    // Set owner again. Expect no NPEs nor timeouts", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUzNjA2MQ=="}, "originalCommit": {"oid": "eb0a929d18e42db05bbd49caa6f235749a6e8da0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU1MjAzOA==", "bodyText": "Revised comment.", "url": "https://github.com/apache/ozone/pull/821#discussion_r408552038", "createdAt": "2020-04-15T02:57:31Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/client/rpc/TestOzoneRpcClientAbstract.java", "diffHunk": "@@ -241,6 +242,19 @@ public void testOMClientProxyProvider() {\n         ozoneManager.getOmRpcServerAddr()));\n   }\n \n+  @Test\n+  public void testVolumeSetOwner() throws IOException {\n+    String volumeName = UUID.randomUUID().toString();\n+    store.createVolume(volumeName);\n+\n+    String ownerName = \"someRandomUser1\";\n+\n+    ClientProtocol proxy = store.getClientProxy();\n+    proxy.setVolumeOwner(volumeName, ownerName);\n+    // Set owner again. Expect no NPEs nor timeouts", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUzNjA2MQ=="}, "originalCommit": {"oid": "eb0a929d18e42db05bbd49caa6f235749a6e8da0"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4397, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}