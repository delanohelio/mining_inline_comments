{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2NzM0ODY0", "number": 1369, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwODo1ODowOFrOEeztbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMTo1NDoyNFrOEf9KUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzM5OTUwOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/config/src/test/java/org/apache/hadoop/hdds/conf/TestConfigurationReflectionUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwODo1ODowOFrOHKszbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNjowNTo0M1rOHL2eYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4MTg3MA==", "bodyText": "Can you please also add test cases for:\n\n\"field from parent class\" (eg. ConfigurationExample.class, \"secure\"),\n\"non-existent field\" (eg. ConfigurationExample.class, \"no-such-field\"), and\n\"field without @Config annotation\" (eg. ConfigFileAppender.class, \"document\")?", "url": "https://github.com/apache/ozone/pull/1369#discussion_r480981870", "createdAt": "2020-09-01T08:58:08Z", "author": {"login": "adoroszlai"}, "path": "hadoop-hdds/config/src/test/java/org/apache/hadoop/hdds/conf/TestConfigurationReflectionUtil.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hdds.conf;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Test the configuration reflection utility class.\n+ */\n+public class TestConfigurationReflectionUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fc00a3e630c2c2d160fa6459f55f19e85fa327c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE4ODg5OA==", "bodyText": "Ok, that's good cases, I have add them.", "url": "https://github.com/apache/ozone/pull/1369#discussion_r482188898", "createdAt": "2020-09-02T16:05:43Z", "author": {"login": "maobaolong"}, "path": "hadoop-hdds/config/src/test/java/org/apache/hadoop/hdds/conf/TestConfigurationReflectionUtil.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hdds.conf;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Test the configuration reflection utility class.\n+ */\n+public class TestConfigurationReflectionUtil {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4MTg3MA=="}, "originalCommit": {"oid": "1fc00a3e630c2c2d160fa6459f55f19e85fa327c"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzQxNDc2OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/config/src/test/java/org/apache/hadoop/hdds/conf/TestConfigurationReflectionUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOTowMjowM1rOHKs8tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOTowMjowM1rOHKs8tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4NDI0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Assert.assertTrue(actualKey.isPresent());\n          \n          \n            \n                Assert.assertTrue(actualDefaultValue.isPresent());", "url": "https://github.com/apache/ozone/pull/1369#discussion_r480984246", "createdAt": "2020-09-01T09:02:03Z", "author": {"login": "adoroszlai"}, "path": "hadoop-hdds/config/src/test/java/org/apache/hadoop/hdds/conf/TestConfigurationReflectionUtil.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hdds.conf;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Test the configuration reflection utility class.\n+ */\n+public class TestConfigurationReflectionUtil {\n+\n+  @Test\n+  public void testClassWithConfigGroup() {\n+    Optional<ConfigType> actualType =\n+        ConfigurationReflectionUtil.getType(\n+            ConfigurationExample.class, \"waitTime\");\n+    Assert.assertTrue(actualType.isPresent());\n+    Assert.assertEquals(ConfigType.TIME, actualType.get());\n+\n+    Optional<String> actualKey =\n+        ConfigurationReflectionUtil.getKey(\n+        ConfigurationExample.class, \"waitTime\");\n+    Assert.assertTrue(actualKey.isPresent());\n+    Assert.assertEquals(\"ozone.scm.client.wait\", actualKey.get());\n+\n+    Optional<String> actualDefaultValue =\n+        ConfigurationReflectionUtil.getDefaultValue(\n+            ConfigurationExample.class, \"waitTime\");\n+    Assert.assertTrue(actualKey.isPresent());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fc00a3e630c2c2d160fa6459f55f19e85fa327c"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzQxNTMxOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/config/src/test/java/org/apache/hadoop/hdds/conf/TestConfigurationReflectionUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOTowMjoxMVrOHKs9CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOTowMjoxMVrOHKs9CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4NDMyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Assert.assertTrue(actualKey.isPresent());\n          \n          \n            \n                Assert.assertTrue(actualDefaultValue.isPresent());", "url": "https://github.com/apache/ozone/pull/1369#discussion_r480984328", "createdAt": "2020-09-01T09:02:11Z", "author": {"login": "adoroszlai"}, "path": "hadoop-hdds/config/src/test/java/org/apache/hadoop/hdds/conf/TestConfigurationReflectionUtil.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hdds.conf;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Test the configuration reflection utility class.\n+ */\n+public class TestConfigurationReflectionUtil {\n+\n+  @Test\n+  public void testClassWithConfigGroup() {\n+    Optional<ConfigType> actualType =\n+        ConfigurationReflectionUtil.getType(\n+            ConfigurationExample.class, \"waitTime\");\n+    Assert.assertTrue(actualType.isPresent());\n+    Assert.assertEquals(ConfigType.TIME, actualType.get());\n+\n+    Optional<String> actualKey =\n+        ConfigurationReflectionUtil.getKey(\n+        ConfigurationExample.class, \"waitTime\");\n+    Assert.assertTrue(actualKey.isPresent());\n+    Assert.assertEquals(\"ozone.scm.client.wait\", actualKey.get());\n+\n+    Optional<String> actualDefaultValue =\n+        ConfigurationReflectionUtil.getDefaultValue(\n+            ConfigurationExample.class, \"waitTime\");\n+    Assert.assertTrue(actualKey.isPresent());\n+    Assert.assertEquals(\"30m\", actualDefaultValue.get());\n+  }\n+\n+  @Test\n+  public void testClassWithoutConfigGroup() {\n+    Optional<ConfigType> actualType =\n+        ConfigurationReflectionUtil.getType(\n+            ConfigurationExampleGrandParent.class, \"number\");\n+    Assert.assertTrue(actualType.isPresent());\n+    Assert.assertEquals(ConfigType.AUTO, actualType.get());\n+\n+    Optional<String> actualKey =\n+        ConfigurationReflectionUtil.getKey(\n+            ConfigurationExampleGrandParent.class, \"number\");\n+    Assert.assertTrue(actualKey.isPresent());\n+    Assert.assertEquals(\"number\", actualKey.get());\n+\n+    Optional<String> actualDefaultValue =\n+        ConfigurationReflectionUtil.getDefaultValue(\n+            ConfigurationExampleGrandParent.class, \"number\");\n+    Assert.assertTrue(actualKey.isPresent());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fc00a3e630c2c2d160fa6459f55f19e85fa327c"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzQ0Njg1OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/config/src/main/java/org/apache/hadoop/hdds/conf/ConfigurationReflectionUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOToxMDoyN1rOHKtPuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNjoyMTo1NVrOHL3HSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4OTExNQ==", "bodyText": "findFieldConfigAnnotationByName could return Optional<Config> instead of Config or null:\n        .findFirst()\n        .map(field -> field.getAnnotation(Config.class));\nThis would let the other new methods (getType, etc.) to be simplified to:\n    return findFieldConfigAnnotationByName(configClass, fieldName)\n        .map(Config::type);", "url": "https://github.com/apache/ozone/pull/1369#discussion_r480989115", "createdAt": "2020-09-01T09:10:27Z", "author": {"login": "adoroszlai"}, "path": "hadoop-hdds/config/src/main/java/org/apache/hadoop/hdds/conf/ConfigurationReflectionUtil.java", "diffHunk": "@@ -240,4 +242,52 @@ private static ConfigType detectConfigType(Class<?> parameterType,\n       }\n     }\n   }\n+\n+  public static Optional<String> getDefaultValue(Class<?> configClass,\n+      String fieldName) {\n+    Config annotation = findFieldConfigAnnotationByName(configClass,\n+        fieldName);\n+    if (annotation != null) {\n+      return Optional.of(annotation.defaultValue());\n+    }\n+    return Optional.empty();\n+  }\n+\n+  public static Optional<String> getKey(Class<?> configClass,\n+      String fieldName) {\n+    ConfigGroup configGroup =\n+        configClass.getAnnotation(ConfigGroup.class);\n+\n+    Config annotation = findFieldConfigAnnotationByName(configClass,\n+        fieldName);\n+    if (annotation != null) {\n+      String key = annotation.key();\n+      if (configGroup != null) {\n+        key = configGroup.prefix() + \".\" + annotation.key();\n+      }\n+      return Optional.of(key);\n+    }\n+    return Optional.empty();\n+  }\n+\n+  public static Optional<ConfigType> getType(Class<?> configClass,\n+      String fieldName) {\n+    Config config = findFieldConfigAnnotationByName(configClass,\n+        fieldName);\n+    if (config != null) {\n+      return Optional.of(config.type());\n+    }\n+    return Optional.empty();\n+  }\n+\n+  private static Config findFieldConfigAnnotationByName(Class<?> configClass,\n+      String fieldName) {\n+    Optional<Field> field = Stream.of(configClass.getDeclaredFields())\n+        .filter(f -> f.getName().equals(fieldName))\n+        .findFirst();\n+    if (field.isPresent()) {\n+      return field.get().getAnnotation(Config.class);\n+    }\n+    return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fc00a3e630c2c2d160fa6459f55f19e85fa327c"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE5OTM2OA==", "bodyText": "It looks more clear than before, thanks, done.", "url": "https://github.com/apache/ozone/pull/1369#discussion_r482199368", "createdAt": "2020-09-02T16:21:55Z", "author": {"login": "maobaolong"}, "path": "hadoop-hdds/config/src/main/java/org/apache/hadoop/hdds/conf/ConfigurationReflectionUtil.java", "diffHunk": "@@ -240,4 +242,52 @@ private static ConfigType detectConfigType(Class<?> parameterType,\n       }\n     }\n   }\n+\n+  public static Optional<String> getDefaultValue(Class<?> configClass,\n+      String fieldName) {\n+    Config annotation = findFieldConfigAnnotationByName(configClass,\n+        fieldName);\n+    if (annotation != null) {\n+      return Optional.of(annotation.defaultValue());\n+    }\n+    return Optional.empty();\n+  }\n+\n+  public static Optional<String> getKey(Class<?> configClass,\n+      String fieldName) {\n+    ConfigGroup configGroup =\n+        configClass.getAnnotation(ConfigGroup.class);\n+\n+    Config annotation = findFieldConfigAnnotationByName(configClass,\n+        fieldName);\n+    if (annotation != null) {\n+      String key = annotation.key();\n+      if (configGroup != null) {\n+        key = configGroup.prefix() + \".\" + annotation.key();\n+      }\n+      return Optional.of(key);\n+    }\n+    return Optional.empty();\n+  }\n+\n+  public static Optional<ConfigType> getType(Class<?> configClass,\n+      String fieldName) {\n+    Config config = findFieldConfigAnnotationByName(configClass,\n+        fieldName);\n+    if (config != null) {\n+      return Optional.of(config.type());\n+    }\n+    return Optional.empty();\n+  }\n+\n+  private static Config findFieldConfigAnnotationByName(Class<?> configClass,\n+      String fieldName) {\n+    Optional<Field> field = Stream.of(configClass.getDeclaredFields())\n+        .filter(f -> f.getName().equals(fieldName))\n+        .findFirst();\n+    if (field.isPresent()) {\n+      return field.get().getAnnotation(Config.class);\n+    }\n+    return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4OTExNQ=="}, "originalCommit": {"oid": "1fc00a3e630c2c2d160fa6459f55f19e85fa327c"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNTE2MDY1OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/dev-support/intellij/ozone-site.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNzowMzo1NVrOHL4unQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzozMjozMFrOHMPhWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIyNTgyMQ==", "bodyText": "I think this is unintended change in this PR.", "url": "https://github.com/apache/ozone/pull/1369#discussion_r482225821", "createdAt": "2020-09-02T17:03:55Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/dev-support/intellij/ozone-site.xml", "diffHunk": "@@ -59,12 +59,12 @@\n     <name>hdds.prometheus.endpoint.enabled</name>\n     <value>true</value>\n   </property>\n-  <property>\n-    <name>ozone.recon.address</name>\n-    <value>localhost:9891</value>\n-  </property>\n-  <property>\n-    <name>ozone.recon.db.dir</name>\n-    <value>/tmp/recon</value>\n-  </property>\n+<!--  <property>-->\n+<!--    <name>ozone.recon.address</name>-->\n+<!--    <value>localhost:9891</value>-->\n+<!--  </property>-->\n+<!--  <property>-->\n+<!--    <name>ozone.recon.db.dir</name>-->\n+<!--    <value>/tmp/recon</value>-->\n+<!--  </property>-->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67c37ebfaf77aef946752b517086d1451ab7c8cd"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU5OTI1Nw==", "bodyText": "Sorry for that", "url": "https://github.com/apache/ozone/pull/1369#discussion_r482599257", "createdAt": "2020-09-02T23:32:30Z", "author": {"login": "maobaolong"}, "path": "hadoop-ozone/dev-support/intellij/ozone-site.xml", "diffHunk": "@@ -59,12 +59,12 @@\n     <name>hdds.prometheus.endpoint.enabled</name>\n     <value>true</value>\n   </property>\n-  <property>\n-    <name>ozone.recon.address</name>\n-    <value>localhost:9891</value>\n-  </property>\n-  <property>\n-    <name>ozone.recon.db.dir</name>\n-    <value>/tmp/recon</value>\n-  </property>\n+<!--  <property>-->\n+<!--    <name>ozone.recon.address</name>-->\n+<!--    <value>localhost:9891</value>-->\n+<!--  </property>-->\n+<!--  <property>-->\n+<!--    <name>ozone.recon.db.dir</name>-->\n+<!--    <value>/tmp/recon</value>-->\n+<!--  </property>-->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIyNTgyMQ=="}, "originalCommit": {"oid": "67c37ebfaf77aef946752b517086d1451ab7c8cd"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxOTQzMzc5OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/config/src/main/java/org/apache/hadoop/hdds/conf/ConfigurationReflectionUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMTo1NDoyNFrOHMjHKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMTo1NDoyNFrOHMjHKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkyMDIzMw==", "bodyText": "The following change makes this method safe to invoke with Object.class directly (current code produces NPE).  It may be unlikely that someone does this, so I think it's OK to commit as is.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (!theClass.getSuperclass().equals(Object.class)) {\n          \n          \n            \n                    theClass = theClass.getSuperclass();\n          \n          \n            \n                  } else {\n          \n          \n            \n                    theClass = null;\n          \n          \n            \n                  }\n          \n          \n            \n                  theClass = theClass.getSuperclass();\n          \n          \n            \n                  if (Object.class.equals(theClass)) {\n          \n          \n            \n                    theClass = null;\n          \n          \n            \n                  }", "url": "https://github.com/apache/ozone/pull/1369#discussion_r482920233", "createdAt": "2020-09-03T11:54:24Z", "author": {"login": "adoroszlai"}, "path": "hadoop-hdds/config/src/main/java/org/apache/hadoop/hdds/conf/ConfigurationReflectionUtil.java", "diffHunk": "@@ -240,4 +242,49 @@ private static ConfigType detectConfigType(Class<?> parameterType,\n       }\n     }\n   }\n+\n+  public static Optional<String> getDefaultValue(Class<?> configClass,\n+      String fieldName) {\n+    return findFieldConfigAnnotationByName(configClass, fieldName)\n+        .map(Config::defaultValue);\n+  }\n+\n+  public static Optional<String> getKey(Class<?> configClass,\n+      String fieldName) {\n+    ConfigGroup configGroup =\n+        configClass.getAnnotation(ConfigGroup.class);\n+\n+    return findFieldConfigAnnotationByName(configClass,\n+        fieldName).map(\n+            config -> configGroup == null ? config.key()\n+                : configGroup.prefix() + \".\" + config.key());\n+  }\n+\n+  public static Optional<ConfigType> getType(Class<?> configClass,\n+      String fieldName) {\n+    return findFieldConfigAnnotationByName(configClass, fieldName)\n+        .map(Config::type);\n+  }\n+\n+  private static Optional<Config> findFieldConfigAnnotationByName(\n+      final Class<?> configClass, String fieldName) {\n+    Class<?> theClass = configClass;\n+    while (theClass != null) {\n+      Optional<Config> config = Stream.of(theClass.getDeclaredFields())\n+          .filter(f -> f.getName().equals(fieldName))\n+          .findFirst()\n+          .map(f -> f.getAnnotation(Config.class));\n+\n+      if (config.isPresent()) {\n+        return config;\n+      }\n+\n+      if (!theClass.getSuperclass().equals(Object.class)) {\n+        theClass = theClass.getSuperclass();\n+      } else {\n+        theClass = null;\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e409d54ec852aea4399a12626f0c99fbc3a5e36f"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3942, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}