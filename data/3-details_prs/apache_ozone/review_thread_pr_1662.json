{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzMDIwODg1", "number": 1662, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNjo0Njo1OFrOFBn2Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNTowMTozMlrOFGPMbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MjQ1NzgzOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/server/SCMCertStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNjo0Njo1OFrOIAYLYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNjoxOToxMVrOICEVTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI2NzA0Mg==", "bodyText": "Show we throw out the IOException here? The caller may not be aware of the exception happened here from the returned results.", "url": "https://github.com/apache/ozone/pull/1662#discussion_r537267042", "createdAt": "2020-12-07T06:46:58Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/server/SCMCertStore.java", "diffHunk": "@@ -112,4 +117,39 @@ public X509Certificate getCertificateByID(BigInteger serialID,\n       return scmMetadataStore.getRevokedCertsTable().get(serialID);\n     }\n   }\n+\n+  @Override\n+  public List<X509Certificate> listCertificate(HddsProtos.NodeType role,\n+      BigInteger startSerialID, int count, CertType certType)\n+      throws IOException {\n+    // TODO: Filter by role\n+    List<? extends Table.KeyValue<BigInteger, X509Certificate>> certs;\n+    if (startSerialID.longValue() == 0) {\n+      startSerialID = null;\n+    }\n+    if (certType == CertType.VALID_CERTS) {\n+      certs = scmMetadataStore.getValidCertsTable().getRangeKVs(\n+          startSerialID, count);\n+    } else {\n+      certs = scmMetadataStore.getRevokedCertsTable().getRangeKVs(\n+          startSerialID, count);\n+    }\n+    List<X509Certificate> results = new ArrayList<>(certs.size());\n+    for (Table.KeyValue<BigInteger, X509Certificate> kv : certs) {\n+      try {\n+        X509Certificate cert = kv.getValue();\n+        // TODO: filter certificate based on CN and specified role.\n+        // This requires change of the approved subject CN format:\n+        // Subject: O=CID-e66d4728-32bb-4282-9770-351a7e913f07,\n+        // OU=9a7c4f86-c862-4067-b12c-e7bca51d3dfe, CN=root@98dba189d5f0\n+\n+        // The new format will look like below that are easier to filter.\n+        // CN=FQDN/user=root/role=datanode/...\n+        results.add(cert);\n+      } catch (IOException e) {\n+        LOG.error(\"Fail to get certificate from SCM metadata store\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "171250a2448bb8e3a01939250a5f6fef9caced01"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzOTA1Mg==", "bodyText": "Fixed in the new commits.", "url": "https://github.com/apache/ozone/pull/1662#discussion_r539039052", "createdAt": "2020-12-09T06:19:11Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/server/SCMCertStore.java", "diffHunk": "@@ -112,4 +117,39 @@ public X509Certificate getCertificateByID(BigInteger serialID,\n       return scmMetadataStore.getRevokedCertsTable().get(serialID);\n     }\n   }\n+\n+  @Override\n+  public List<X509Certificate> listCertificate(HddsProtos.NodeType role,\n+      BigInteger startSerialID, int count, CertType certType)\n+      throws IOException {\n+    // TODO: Filter by role\n+    List<? extends Table.KeyValue<BigInteger, X509Certificate>> certs;\n+    if (startSerialID.longValue() == 0) {\n+      startSerialID = null;\n+    }\n+    if (certType == CertType.VALID_CERTS) {\n+      certs = scmMetadataStore.getValidCertsTable().getRangeKVs(\n+          startSerialID, count);\n+    } else {\n+      certs = scmMetadataStore.getRevokedCertsTable().getRangeKVs(\n+          startSerialID, count);\n+    }\n+    List<X509Certificate> results = new ArrayList<>(certs.size());\n+    for (Table.KeyValue<BigInteger, X509Certificate> kv : certs) {\n+      try {\n+        X509Certificate cert = kv.getValue();\n+        // TODO: filter certificate based on CN and specified role.\n+        // This requires change of the approved subject CN format:\n+        // Subject: O=CID-e66d4728-32bb-4282-9770-351a7e913f07,\n+        // OU=9a7c4f86-c862-4067-b12c-e7bca51d3dfe, CN=root@98dba189d5f0\n+\n+        // The new format will look like below that are easier to filter.\n+        // CN=FQDN/user=root/role=datanode/...\n+        results.add(cert);\n+      } catch (IOException e) {\n+        LOG.error(\"Fail to get certificate from SCM metadata store\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI2NzA0Mg=="}, "originalCommit": {"oid": "171250a2448bb8e3a01939250a5f6fef9caced01"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MjQ2NjkwOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/server/SCMSecurityProtocolServer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNjo1MDoyMFrOIAYQQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNjoxOToyMFrOICEVlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI2ODI5MA==", "bodyText": "ditto", "url": "https://github.com/apache/ozone/pull/1662#discussion_r537268290", "createdAt": "2020-12-07T06:50:20Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/server/SCMSecurityProtocolServer.java", "diffHunk": "@@ -192,6 +195,33 @@ public String getCACertificate() throws IOException {\n     }\n   }\n \n+  /**\n+   *\n+   * @param role            - node role: OM/SCM/DN.\n+   * @param startSerialId   - start certificate serial id.\n+   * @param count           - max number of certificates returned in a batch.\n+   * @param isRevoked       - whether list for revoked certs only.\n+   * @return\n+   * @throws IOException\n+   */\n+  @Override\n+  public List<String> listCertificate(HddsProtos.NodeType role,\n+      long startSerialId, int count, boolean isRevoked) throws IOException {\n+    List<X509Certificate> certificates =\n+        certificateServer.listCertificate(role, startSerialId, count,\n+            isRevoked);\n+    List<String> results = new ArrayList<>(certificates.size());\n+    for (X509Certificate cert : certificates) {\n+      try {\n+        String certStr = CertificateCodec.getPEMEncodedString(cert);\n+        results.add(certStr);\n+      } catch (SCMSecurityException e) {\n+        LOGGER.error(\"listCertificate fail to encode certificate.\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "171250a2448bb8e3a01939250a5f6fef9caced01"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzOTEyNQ==", "bodyText": "Fixed.", "url": "https://github.com/apache/ozone/pull/1662#discussion_r539039125", "createdAt": "2020-12-09T06:19:20Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/server/SCMSecurityProtocolServer.java", "diffHunk": "@@ -192,6 +195,33 @@ public String getCACertificate() throws IOException {\n     }\n   }\n \n+  /**\n+   *\n+   * @param role            - node role: OM/SCM/DN.\n+   * @param startSerialId   - start certificate serial id.\n+   * @param count           - max number of certificates returned in a batch.\n+   * @param isRevoked       - whether list for revoked certs only.\n+   * @return\n+   * @throws IOException\n+   */\n+  @Override\n+  public List<String> listCertificate(HddsProtos.NodeType role,\n+      long startSerialId, int count, boolean isRevoked) throws IOException {\n+    List<X509Certificate> certificates =\n+        certificateServer.listCertificate(role, startSerialId, count,\n+            isRevoked);\n+    List<String> results = new ArrayList<>(certificates.size());\n+    for (X509Certificate cert : certificates) {\n+      try {\n+        String certStr = CertificateCodec.getPEMEncodedString(cert);\n+        results.add(certStr);\n+      } catch (SCMSecurityException e) {\n+        LOGGER.error(\"listCertificate fail to encode certificate.\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI2ODI5MA=="}, "originalCommit": {"oid": "171250a2448bb8e3a01939250a5f6fef9caced01"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMTAzODE3OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/framework/src/main/java/org/apache/hadoop/hdds/protocol/SCMSecurityProtocol.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMzowMjo0NVrOIFwesg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMDo1MjowNVrOIGmqUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkwODA4Mg==", "bodyText": "Nit: getCertificates may be a better name here\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              List<String> listCertificate(HddsProtos.NodeType type, long startSerialId,\n          \n          \n            \n              List<String> getCertificates(HddsProtos.NodeType type, long startSerialId,", "url": "https://github.com/apache/ozone/pull/1662#discussion_r542908082", "createdAt": "2020-12-14T23:02:45Z", "author": {"login": "vivekratnavel"}, "path": "hadoop-hdds/framework/src/main/java/org/apache/hadoop/hdds/protocol/SCMSecurityProtocol.java", "diffHunk": "@@ -77,4 +80,16 @@ String getOMCertificate(OzoneManagerDetailsProto omDetails,\n    */\n   String getCACertificate() throws IOException;\n \n+  /**\n+   * Get list of certificates meet the query criteria.\n+   *\n+   * @param type            - node type: OM/SCM/DN.\n+   * @param startSerialId   - start certificate serial id.\n+   * @param count           - max number of certificates returned in a batch.\n+   * @param isRevoked       - whether list for revoked certs only.\n+   * @return list of PEM encoded certificate strings.\n+   */\n+  List<String> listCertificate(HddsProtos.NodeType type, long startSerialId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "351a85a10ffcc7bb6061cd189a250744aebd3f39"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc5NTc5Mg==", "bodyText": "list is chosen here instead of get to be consistent with similar API/CLI for pipeline/container/blocks.", "url": "https://github.com/apache/ozone/pull/1662#discussion_r543795792", "createdAt": "2020-12-16T00:52:05Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-hdds/framework/src/main/java/org/apache/hadoop/hdds/protocol/SCMSecurityProtocol.java", "diffHunk": "@@ -77,4 +80,16 @@ String getOMCertificate(OzoneManagerDetailsProto omDetails,\n    */\n   String getCACertificate() throws IOException;\n \n+  /**\n+   * Get list of certificates meet the query criteria.\n+   *\n+   * @param type            - node type: OM/SCM/DN.\n+   * @param startSerialId   - start certificate serial id.\n+   * @param count           - max number of certificates returned in a batch.\n+   * @param isRevoked       - whether list for revoked certs only.\n+   * @return list of PEM encoded certificate strings.\n+   */\n+  List<String> listCertificate(HddsProtos.NodeType type, long startSerialId,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkwODA4Mg=="}, "originalCommit": {"oid": "351a85a10ffcc7bb6061cd189a250744aebd3f39"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMTA2MjQyOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/framework/src/main/java/org/apache/hadoop/hdds/security/x509/certificate/authority/CertificateServer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMzowNzo0N1rOIFwuIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMDo1MjoxNVrOIGmqkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkxMjAzNA==", "bodyText": "Nit: getCertificates may be a better name here\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              List<X509Certificate> listCertificate(HddsProtos.NodeType type,\n          \n          \n            \n              List<X509Certificate> getCertificates(HddsProtos.NodeType type,", "url": "https://github.com/apache/ozone/pull/1662#discussion_r542912034", "createdAt": "2020-12-14T23:07:47Z", "author": {"login": "vivekratnavel"}, "path": "hadoop-hdds/framework/src/main/java/org/apache/hadoop/hdds/security/x509/certificate/authority/CertificateServer.java", "diffHunk": "@@ -112,6 +114,16 @@ X509Certificate getCertificate(String certSerialId)\n    * framework.\n    */\n \n+  /**\n+   * List certificates.\n+   * @param type            - node type: OM/SCM/DN\n+   * @param startSerialId   - start certificate serial id\n+   * @param count           - max number of certificates returned in a batch\n+   * @return\n+   * @throws IOException\n+   */\n+  List<X509Certificate> listCertificate(HddsProtos.NodeType type,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "351a85a10ffcc7bb6061cd189a250744aebd3f39"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc5NTg1Nw==", "bodyText": "Same as above.", "url": "https://github.com/apache/ozone/pull/1662#discussion_r543795857", "createdAt": "2020-12-16T00:52:15Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-hdds/framework/src/main/java/org/apache/hadoop/hdds/security/x509/certificate/authority/CertificateServer.java", "diffHunk": "@@ -112,6 +114,16 @@ X509Certificate getCertificate(String certSerialId)\n    * framework.\n    */\n \n+  /**\n+   * List certificates.\n+   * @param type            - node type: OM/SCM/DN\n+   * @param startSerialId   - start certificate serial id\n+   * @param count           - max number of certificates returned in a batch\n+   * @return\n+   * @throws IOException\n+   */\n+  List<X509Certificate> listCertificate(HddsProtos.NodeType type,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkxMjAzNA=="}, "originalCommit": {"oid": "351a85a10ffcc7bb6061cd189a250744aebd3f39"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMTE5NTI2OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/tools/src/main/java/org/apache/hadoop/hdds/scm/cli/cert/InfoSubcommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMzo1MDoxNFrOIFx3jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMDo1NDozOVrOIGmuJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkzMDgzMQ==", "bodyText": "Nit\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                description = \"Show detail information of a specific certificate\",\n          \n          \n            \n                description = \"Show detailed information for a specific certificate\",", "url": "https://github.com/apache/ozone/pull/1662#discussion_r542930831", "createdAt": "2020-12-14T23:50:14Z", "author": {"login": "vivekratnavel"}, "path": "hadoop-hdds/tools/src/main/java/org/apache/hadoop/hdds/scm/cli/cert/InfoSubcommand.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hdds.scm.cli.cert;\n+\n+import java.io.IOException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.hadoop.hdds.cli.GenericParentCommand;\n+import org.apache.hadoop.hdds.cli.HddsVersionProvider;\n+import org.apache.hadoop.hdds.protocol.SCMSecurityProtocol;\n+\n+import org.apache.hadoop.hdds.security.x509.certificate.utils.CertificateCodec;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Model.CommandSpec;\n+import picocli.CommandLine.Parameters;\n+import picocli.CommandLine.Spec;\n+\n+/**\n+ * This is the handler that process certificate info command.\n+ */\n+@Command(\n+    name = \"info\",\n+    description = \"Show detail information of a specific certificate\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "351a85a10ffcc7bb6061cd189a250744aebd3f39"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc5Njc3Mg==", "bodyText": "Fixed.", "url": "https://github.com/apache/ozone/pull/1662#discussion_r543796772", "createdAt": "2020-12-16T00:54:39Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-hdds/tools/src/main/java/org/apache/hadoop/hdds/scm/cli/cert/InfoSubcommand.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hdds.scm.cli.cert;\n+\n+import java.io.IOException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.hadoop.hdds.cli.GenericParentCommand;\n+import org.apache.hadoop.hdds.cli.HddsVersionProvider;\n+import org.apache.hadoop.hdds.protocol.SCMSecurityProtocol;\n+\n+import org.apache.hadoop.hdds.security.x509.certificate.utils.CertificateCodec;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Model.CommandSpec;\n+import picocli.CommandLine.Parameters;\n+import picocli.CommandLine.Spec;\n+\n+/**\n+ * This is the handler that process certificate info command.\n+ */\n+@Command(\n+    name = \"info\",\n+    description = \"Show detail information of a specific certificate\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkzMDgzMQ=="}, "originalCommit": {"oid": "351a85a10ffcc7bb6061cd189a250744aebd3f39"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMTE5OTMxOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/tools/src/main/java/org/apache/hadoop/hdds/scm/cli/cert/InfoSubcommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMzo1MTozNlrOIFx5tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMDo1Mjo0MFrOIGmrNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkzMTM4MA==", "bodyText": "Nit\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  LOG.error(\"Fail to get certificate id \" + serialId);\n          \n          \n            \n                  LOG.error(\"Failed to get certificate id \" + serialId);", "url": "https://github.com/apache/ozone/pull/1662#discussion_r542931380", "createdAt": "2020-12-14T23:51:36Z", "author": {"login": "vivekratnavel"}, "path": "hadoop-hdds/tools/src/main/java/org/apache/hadoop/hdds/scm/cli/cert/InfoSubcommand.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hdds.scm.cli.cert;\n+\n+import java.io.IOException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.hadoop.hdds.cli.GenericParentCommand;\n+import org.apache.hadoop.hdds.cli.HddsVersionProvider;\n+import org.apache.hadoop.hdds.protocol.SCMSecurityProtocol;\n+\n+import org.apache.hadoop.hdds.security.x509.certificate.utils.CertificateCodec;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Model.CommandSpec;\n+import picocli.CommandLine.Parameters;\n+import picocli.CommandLine.Spec;\n+\n+/**\n+ * This is the handler that process certificate info command.\n+ */\n+@Command(\n+    name = \"info\",\n+    description = \"Show detail information of a specific certificate\",\n+    mixinStandardHelpOptions = true,\n+    versionProvider = HddsVersionProvider.class)\n+\n+class InfoSubcommand extends ScmCertSubcommand {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(InfoSubcommand.class);\n+\n+  @Spec\n+  private CommandSpec spec;\n+\n+  @Parameters(description = \"Serial id of the certificate in decimal.\")\n+  private String serialId;\n+\n+  @Override\n+  public void execute(SCMSecurityProtocol client) throws IOException {\n+    final String certPemStr =\n+        client.getCertificate(serialId);\n+    Preconditions.checkNotNull(certPemStr,\n+        \"Certificate can't be found\");\n+\n+    // Print container report info.\n+    LOG.info(\"Certificate id: {}\", serialId);\n+    boolean verbose = spec.root().userObject() instanceof GenericParentCommand\n+        && ((GenericParentCommand) spec.root().userObject()).isVerbose();\n+    try {\n+      X509Certificate cert = CertificateCodec.getX509Cert(certPemStr);\n+      LOG.info(cert.toString());\n+    } catch (CertificateException ex) {\n+      LOG.error(\"Fail to get certificate id \" + serialId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "351a85a10ffcc7bb6061cd189a250744aebd3f39"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc5NjAyMg==", "bodyText": "Fixed.", "url": "https://github.com/apache/ozone/pull/1662#discussion_r543796022", "createdAt": "2020-12-16T00:52:40Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-hdds/tools/src/main/java/org/apache/hadoop/hdds/scm/cli/cert/InfoSubcommand.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hdds.scm.cli.cert;\n+\n+import java.io.IOException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.hadoop.hdds.cli.GenericParentCommand;\n+import org.apache.hadoop.hdds.cli.HddsVersionProvider;\n+import org.apache.hadoop.hdds.protocol.SCMSecurityProtocol;\n+\n+import org.apache.hadoop.hdds.security.x509.certificate.utils.CertificateCodec;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Model.CommandSpec;\n+import picocli.CommandLine.Parameters;\n+import picocli.CommandLine.Spec;\n+\n+/**\n+ * This is the handler that process certificate info command.\n+ */\n+@Command(\n+    name = \"info\",\n+    description = \"Show detail information of a specific certificate\",\n+    mixinStandardHelpOptions = true,\n+    versionProvider = HddsVersionProvider.class)\n+\n+class InfoSubcommand extends ScmCertSubcommand {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(InfoSubcommand.class);\n+\n+  @Spec\n+  private CommandSpec spec;\n+\n+  @Parameters(description = \"Serial id of the certificate in decimal.\")\n+  private String serialId;\n+\n+  @Override\n+  public void execute(SCMSecurityProtocol client) throws IOException {\n+    final String certPemStr =\n+        client.getCertificate(serialId);\n+    Preconditions.checkNotNull(certPemStr,\n+        \"Certificate can't be found\");\n+\n+    // Print container report info.\n+    LOG.info(\"Certificate id: {}\", serialId);\n+    boolean verbose = spec.root().userObject() instanceof GenericParentCommand\n+        && ((GenericParentCommand) spec.root().userObject()).isVerbose();\n+    try {\n+      X509Certificate cert = CertificateCodec.getX509Cert(certPemStr);\n+      LOG.info(cert.toString());\n+    } catch (CertificateException ex) {\n+      LOG.error(\"Fail to get certificate id \" + serialId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkzMTM4MA=="}, "originalCommit": {"oid": "351a85a10ffcc7bb6061cd189a250744aebd3f39"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMTIwMDQwOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/tools/src/main/java/org/apache/hadoop/hdds/scm/cli/cert/InfoSubcommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMzo1MTo1OFrOIFx6TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMDo1NDoxMlrOIGmtTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkzMTUzMw==", "bodyText": "Nit\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  throw new IOException(\"Fail to get certificate id \" + serialId, ex);\n          \n          \n            \n                  throw new IOException(\"Failed to get certificate id \" + serialId, ex);", "url": "https://github.com/apache/ozone/pull/1662#discussion_r542931533", "createdAt": "2020-12-14T23:51:58Z", "author": {"login": "vivekratnavel"}, "path": "hadoop-hdds/tools/src/main/java/org/apache/hadoop/hdds/scm/cli/cert/InfoSubcommand.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hdds.scm.cli.cert;\n+\n+import java.io.IOException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.hadoop.hdds.cli.GenericParentCommand;\n+import org.apache.hadoop.hdds.cli.HddsVersionProvider;\n+import org.apache.hadoop.hdds.protocol.SCMSecurityProtocol;\n+\n+import org.apache.hadoop.hdds.security.x509.certificate.utils.CertificateCodec;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Model.CommandSpec;\n+import picocli.CommandLine.Parameters;\n+import picocli.CommandLine.Spec;\n+\n+/**\n+ * This is the handler that process certificate info command.\n+ */\n+@Command(\n+    name = \"info\",\n+    description = \"Show detail information of a specific certificate\",\n+    mixinStandardHelpOptions = true,\n+    versionProvider = HddsVersionProvider.class)\n+\n+class InfoSubcommand extends ScmCertSubcommand {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(InfoSubcommand.class);\n+\n+  @Spec\n+  private CommandSpec spec;\n+\n+  @Parameters(description = \"Serial id of the certificate in decimal.\")\n+  private String serialId;\n+\n+  @Override\n+  public void execute(SCMSecurityProtocol client) throws IOException {\n+    final String certPemStr =\n+        client.getCertificate(serialId);\n+    Preconditions.checkNotNull(certPemStr,\n+        \"Certificate can't be found\");\n+\n+    // Print container report info.\n+    LOG.info(\"Certificate id: {}\", serialId);\n+    boolean verbose = spec.root().userObject() instanceof GenericParentCommand\n+        && ((GenericParentCommand) spec.root().userObject()).isVerbose();\n+    try {\n+      X509Certificate cert = CertificateCodec.getX509Cert(certPemStr);\n+      LOG.info(cert.toString());\n+    } catch (CertificateException ex) {\n+      LOG.error(\"Fail to get certificate id \" + serialId);\n+      throw new IOException(\"Fail to get certificate id \" + serialId, ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "351a85a10ffcc7bb6061cd189a250744aebd3f39"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc5NjU1OQ==", "bodyText": "Fixed.", "url": "https://github.com/apache/ozone/pull/1662#discussion_r543796559", "createdAt": "2020-12-16T00:54:12Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-hdds/tools/src/main/java/org/apache/hadoop/hdds/scm/cli/cert/InfoSubcommand.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hdds.scm.cli.cert;\n+\n+import java.io.IOException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.hadoop.hdds.cli.GenericParentCommand;\n+import org.apache.hadoop.hdds.cli.HddsVersionProvider;\n+import org.apache.hadoop.hdds.protocol.SCMSecurityProtocol;\n+\n+import org.apache.hadoop.hdds.security.x509.certificate.utils.CertificateCodec;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Model.CommandSpec;\n+import picocli.CommandLine.Parameters;\n+import picocli.CommandLine.Spec;\n+\n+/**\n+ * This is the handler that process certificate info command.\n+ */\n+@Command(\n+    name = \"info\",\n+    description = \"Show detail information of a specific certificate\",\n+    mixinStandardHelpOptions = true,\n+    versionProvider = HddsVersionProvider.class)\n+\n+class InfoSubcommand extends ScmCertSubcommand {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(InfoSubcommand.class);\n+\n+  @Spec\n+  private CommandSpec spec;\n+\n+  @Parameters(description = \"Serial id of the certificate in decimal.\")\n+  private String serialId;\n+\n+  @Override\n+  public void execute(SCMSecurityProtocol client) throws IOException {\n+    final String certPemStr =\n+        client.getCertificate(serialId);\n+    Preconditions.checkNotNull(certPemStr,\n+        \"Certificate can't be found\");\n+\n+    // Print container report info.\n+    LOG.info(\"Certificate id: {}\", serialId);\n+    boolean verbose = spec.root().userObject() instanceof GenericParentCommand\n+        && ((GenericParentCommand) spec.root().userObject()).isVerbose();\n+    try {\n+      X509Certificate cert = CertificateCodec.getX509Cert(certPemStr);\n+      LOG.info(cert.toString());\n+    } catch (CertificateException ex) {\n+      LOG.error(\"Fail to get certificate id \" + serialId);\n+      throw new IOException(\"Fail to get certificate id \" + serialId, ex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkzMTUzMw=="}, "originalCommit": {"oid": "351a85a10ffcc7bb6061cd189a250744aebd3f39"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMTIxMTE5OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/tools/src/main/java/org/apache/hadoop/hdds/scm/cli/cert/ListSubcommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMzo1NTo1N1rOIFyAOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMDo1MzoyN1rOIGmsPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkzMzA0OA==", "bodyText": "Nit: May be \"Valid Until\" or \"Expiry\" will suit better here. And instead of subjectDN, can we use subject?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                LOG.info(\"SerialNumber\\t\\tValid From\\t\\tValid To\\t\\tSubjectDN\");\n          \n          \n            \n                LOG.info(\"SerialNumber\\t\\tValid From\\t\\tExpiry\\t\\tSubject\");", "url": "https://github.com/apache/ozone/pull/1662#discussion_r542933048", "createdAt": "2020-12-14T23:55:57Z", "author": {"login": "vivekratnavel"}, "path": "hadoop-hdds/tools/src/main/java/org/apache/hadoop/hdds/scm/cli/cert/ListSubcommand.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hdds.scm.cli.cert;\n+\n+import java.io.IOException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+import java.util.List;\n+\n+import org.apache.hadoop.hdds.cli.HddsVersionProvider;\n+import org.apache.hadoop.hdds.protocol.SCMSecurityProtocol;\n+\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n+import org.apache.hadoop.hdds.security.x509.certificate.utils.CertificateCodec;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Help.Visibility;\n+import picocli.CommandLine.Option;\n+\n+/**\n+ * This is the handler that process certificate list command.\n+ */\n+@Command(\n+    name = \"list\",\n+    description = \"List certificates\",\n+    mixinStandardHelpOptions = true,\n+    versionProvider = HddsVersionProvider.class)\n+public class ListSubcommand extends ScmCertSubcommand {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(ListSubcommand.class);\n+\n+  @Option(names = {\"-s\", \"--start\"},\n+      description = \"Certificate serial id to start the iteration\",\n+      defaultValue = \"0\", showDefaultValue = Visibility.ALWAYS)\n+  private long startSerialId;\n+\n+  @Option(names = {\"-c\", \"--count\"},\n+      description = \"Maximum number of certificates to list\",\n+      defaultValue = \"20\", showDefaultValue = Visibility.ALWAYS)\n+  private int count;\n+\n+  @Option(names = {\"-r\", \"--role\"},\n+      description = \"Filter certificate by the role: om/datanode\",\n+      defaultValue = \"datanode\", showDefaultValue = Visibility.ALWAYS)\n+  private String role;\n+\n+  @Option(names = {\"-t\", \"--type\"},\n+      description = \"Filter certificate by the type: valid or revoked\",\n+      defaultValue = \"valid\", showDefaultValue = Visibility.ALWAYS)\n+  private String type;\n+\n+  private HddsProtos.NodeType parseCertRole(String r) {\n+    if (r.equalsIgnoreCase(\"om\")) {\n+      return HddsProtos.NodeType.OM;\n+    } else if (r.equalsIgnoreCase(\"scm\")) {\n+      return HddsProtos.NodeType.SCM;\n+    } else {\n+      return HddsProtos.NodeType.DATANODE;\n+    }\n+  }\n+\n+  private void printCert(X509Certificate cert) {\n+    LOG.info(\"{}\\t{}\\t{}\\t{}\", cert.getSerialNumber(), cert.getNotBefore(),\n+        cert.getNotAfter(), cert.getSubjectDN());\n+  }\n+\n+  @Override\n+  protected void execute(SCMSecurityProtocol client) throws IOException {\n+    boolean isRevoked = type.equalsIgnoreCase(\"revoked\");\n+    List<String> certPemList = client.listCertificate(\n+        parseCertRole(role), startSerialId, count, isRevoked);\n+    LOG.info(\"Total {} {} certificates: \", certPemList.size(), type);\n+    LOG.info(\"SerialNumber\\t\\tValid From\\t\\tValid To\\t\\tSubjectDN\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "351a85a10ffcc7bb6061cd189a250744aebd3f39"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc5NjI4Nw==", "bodyText": "Fixed.", "url": "https://github.com/apache/ozone/pull/1662#discussion_r543796287", "createdAt": "2020-12-16T00:53:27Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-hdds/tools/src/main/java/org/apache/hadoop/hdds/scm/cli/cert/ListSubcommand.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hdds.scm.cli.cert;\n+\n+import java.io.IOException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+import java.util.List;\n+\n+import org.apache.hadoop.hdds.cli.HddsVersionProvider;\n+import org.apache.hadoop.hdds.protocol.SCMSecurityProtocol;\n+\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n+import org.apache.hadoop.hdds.security.x509.certificate.utils.CertificateCodec;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Help.Visibility;\n+import picocli.CommandLine.Option;\n+\n+/**\n+ * This is the handler that process certificate list command.\n+ */\n+@Command(\n+    name = \"list\",\n+    description = \"List certificates\",\n+    mixinStandardHelpOptions = true,\n+    versionProvider = HddsVersionProvider.class)\n+public class ListSubcommand extends ScmCertSubcommand {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(ListSubcommand.class);\n+\n+  @Option(names = {\"-s\", \"--start\"},\n+      description = \"Certificate serial id to start the iteration\",\n+      defaultValue = \"0\", showDefaultValue = Visibility.ALWAYS)\n+  private long startSerialId;\n+\n+  @Option(names = {\"-c\", \"--count\"},\n+      description = \"Maximum number of certificates to list\",\n+      defaultValue = \"20\", showDefaultValue = Visibility.ALWAYS)\n+  private int count;\n+\n+  @Option(names = {\"-r\", \"--role\"},\n+      description = \"Filter certificate by the role: om/datanode\",\n+      defaultValue = \"datanode\", showDefaultValue = Visibility.ALWAYS)\n+  private String role;\n+\n+  @Option(names = {\"-t\", \"--type\"},\n+      description = \"Filter certificate by the type: valid or revoked\",\n+      defaultValue = \"valid\", showDefaultValue = Visibility.ALWAYS)\n+  private String type;\n+\n+  private HddsProtos.NodeType parseCertRole(String r) {\n+    if (r.equalsIgnoreCase(\"om\")) {\n+      return HddsProtos.NodeType.OM;\n+    } else if (r.equalsIgnoreCase(\"scm\")) {\n+      return HddsProtos.NodeType.SCM;\n+    } else {\n+      return HddsProtos.NodeType.DATANODE;\n+    }\n+  }\n+\n+  private void printCert(X509Certificate cert) {\n+    LOG.info(\"{}\\t{}\\t{}\\t{}\", cert.getSerialNumber(), cert.getNotBefore(),\n+        cert.getNotAfter(), cert.getSubjectDN());\n+  }\n+\n+  @Override\n+  protected void execute(SCMSecurityProtocol client) throws IOException {\n+    boolean isRevoked = type.equalsIgnoreCase(\"revoked\");\n+    List<String> certPemList = client.listCertificate(\n+        parseCertRole(role), startSerialId, count, isRevoked);\n+    LOG.info(\"Total {} {} certificates: \", certPemList.size(), type);\n+    LOG.info(\"SerialNumber\\t\\tValid From\\t\\tValid To\\t\\tSubjectDN\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkzMzA0OA=="}, "originalCommit": {"oid": "351a85a10ffcc7bb6061cd189a250744aebd3f39"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMTIxMjUwOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/tools/src/main/java/org/apache/hadoop/hdds/scm/cli/cert/ListSubcommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMzo1NjoyNFrOIFyA7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMDo1Mzo0NlrOIGmsrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkzMzIyOA==", "bodyText": "Nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    LOG.error(\"Fail to parse certificate.\");\n          \n          \n            \n                    LOG.error(\"Failed to parse certificate.\");", "url": "https://github.com/apache/ozone/pull/1662#discussion_r542933228", "createdAt": "2020-12-14T23:56:24Z", "author": {"login": "vivekratnavel"}, "path": "hadoop-hdds/tools/src/main/java/org/apache/hadoop/hdds/scm/cli/cert/ListSubcommand.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hdds.scm.cli.cert;\n+\n+import java.io.IOException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+import java.util.List;\n+\n+import org.apache.hadoop.hdds.cli.HddsVersionProvider;\n+import org.apache.hadoop.hdds.protocol.SCMSecurityProtocol;\n+\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n+import org.apache.hadoop.hdds.security.x509.certificate.utils.CertificateCodec;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Help.Visibility;\n+import picocli.CommandLine.Option;\n+\n+/**\n+ * This is the handler that process certificate list command.\n+ */\n+@Command(\n+    name = \"list\",\n+    description = \"List certificates\",\n+    mixinStandardHelpOptions = true,\n+    versionProvider = HddsVersionProvider.class)\n+public class ListSubcommand extends ScmCertSubcommand {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(ListSubcommand.class);\n+\n+  @Option(names = {\"-s\", \"--start\"},\n+      description = \"Certificate serial id to start the iteration\",\n+      defaultValue = \"0\", showDefaultValue = Visibility.ALWAYS)\n+  private long startSerialId;\n+\n+  @Option(names = {\"-c\", \"--count\"},\n+      description = \"Maximum number of certificates to list\",\n+      defaultValue = \"20\", showDefaultValue = Visibility.ALWAYS)\n+  private int count;\n+\n+  @Option(names = {\"-r\", \"--role\"},\n+      description = \"Filter certificate by the role: om/datanode\",\n+      defaultValue = \"datanode\", showDefaultValue = Visibility.ALWAYS)\n+  private String role;\n+\n+  @Option(names = {\"-t\", \"--type\"},\n+      description = \"Filter certificate by the type: valid or revoked\",\n+      defaultValue = \"valid\", showDefaultValue = Visibility.ALWAYS)\n+  private String type;\n+\n+  private HddsProtos.NodeType parseCertRole(String r) {\n+    if (r.equalsIgnoreCase(\"om\")) {\n+      return HddsProtos.NodeType.OM;\n+    } else if (r.equalsIgnoreCase(\"scm\")) {\n+      return HddsProtos.NodeType.SCM;\n+    } else {\n+      return HddsProtos.NodeType.DATANODE;\n+    }\n+  }\n+\n+  private void printCert(X509Certificate cert) {\n+    LOG.info(\"{}\\t{}\\t{}\\t{}\", cert.getSerialNumber(), cert.getNotBefore(),\n+        cert.getNotAfter(), cert.getSubjectDN());\n+  }\n+\n+  @Override\n+  protected void execute(SCMSecurityProtocol client) throws IOException {\n+    boolean isRevoked = type.equalsIgnoreCase(\"revoked\");\n+    List<String> certPemList = client.listCertificate(\n+        parseCertRole(role), startSerialId, count, isRevoked);\n+    LOG.info(\"Total {} {} certificates: \", certPemList.size(), type);\n+    LOG.info(\"SerialNumber\\t\\tValid From\\t\\tValid To\\t\\tSubjectDN\");\n+    for (String certPemStr : certPemList) {\n+      try {\n+        X509Certificate cert = CertificateCodec.getX509Certificate(certPemStr);\n+        printCert(cert);\n+      } catch (CertificateException ex) {\n+        LOG.error(\"Fail to parse certificate.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "351a85a10ffcc7bb6061cd189a250744aebd3f39"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc5NjM5OA==", "bodyText": "Fixed.", "url": "https://github.com/apache/ozone/pull/1662#discussion_r543796398", "createdAt": "2020-12-16T00:53:46Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-hdds/tools/src/main/java/org/apache/hadoop/hdds/scm/cli/cert/ListSubcommand.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hdds.scm.cli.cert;\n+\n+import java.io.IOException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+import java.util.List;\n+\n+import org.apache.hadoop.hdds.cli.HddsVersionProvider;\n+import org.apache.hadoop.hdds.protocol.SCMSecurityProtocol;\n+\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n+import org.apache.hadoop.hdds.security.x509.certificate.utils.CertificateCodec;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Help.Visibility;\n+import picocli.CommandLine.Option;\n+\n+/**\n+ * This is the handler that process certificate list command.\n+ */\n+@Command(\n+    name = \"list\",\n+    description = \"List certificates\",\n+    mixinStandardHelpOptions = true,\n+    versionProvider = HddsVersionProvider.class)\n+public class ListSubcommand extends ScmCertSubcommand {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(ListSubcommand.class);\n+\n+  @Option(names = {\"-s\", \"--start\"},\n+      description = \"Certificate serial id to start the iteration\",\n+      defaultValue = \"0\", showDefaultValue = Visibility.ALWAYS)\n+  private long startSerialId;\n+\n+  @Option(names = {\"-c\", \"--count\"},\n+      description = \"Maximum number of certificates to list\",\n+      defaultValue = \"20\", showDefaultValue = Visibility.ALWAYS)\n+  private int count;\n+\n+  @Option(names = {\"-r\", \"--role\"},\n+      description = \"Filter certificate by the role: om/datanode\",\n+      defaultValue = \"datanode\", showDefaultValue = Visibility.ALWAYS)\n+  private String role;\n+\n+  @Option(names = {\"-t\", \"--type\"},\n+      description = \"Filter certificate by the type: valid or revoked\",\n+      defaultValue = \"valid\", showDefaultValue = Visibility.ALWAYS)\n+  private String type;\n+\n+  private HddsProtos.NodeType parseCertRole(String r) {\n+    if (r.equalsIgnoreCase(\"om\")) {\n+      return HddsProtos.NodeType.OM;\n+    } else if (r.equalsIgnoreCase(\"scm\")) {\n+      return HddsProtos.NodeType.SCM;\n+    } else {\n+      return HddsProtos.NodeType.DATANODE;\n+    }\n+  }\n+\n+  private void printCert(X509Certificate cert) {\n+    LOG.info(\"{}\\t{}\\t{}\\t{}\", cert.getSerialNumber(), cert.getNotBefore(),\n+        cert.getNotAfter(), cert.getSubjectDN());\n+  }\n+\n+  @Override\n+  protected void execute(SCMSecurityProtocol client) throws IOException {\n+    boolean isRevoked = type.equalsIgnoreCase(\"revoked\");\n+    List<String> certPemList = client.listCertificate(\n+        parseCertRole(role), startSerialId, count, isRevoked);\n+    LOG.info(\"Total {} {} certificates: \", certPemList.size(), type);\n+    LOG.info(\"SerialNumber\\t\\tValid From\\t\\tValid To\\t\\tSubjectDN\");\n+    for (String certPemStr : certPemList) {\n+      try {\n+        X509Certificate cert = CertificateCodec.getX509Certificate(certPemStr);\n+        printCert(cert);\n+      } catch (CertificateException ex) {\n+        LOG.error(\"Fail to parse certificate.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkzMzIyOA=="}, "originalCommit": {"oid": "351a85a10ffcc7bb6061cd189a250744aebd3f39"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDcxMjA3OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/tools/src/main/java/org/apache/hadoop/hdds/scm/cli/cert/InfoSubcommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNDozNzozMlrOIHIZ2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQxOTo1OTo1N1rOIJHYUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM0ODYzMw==", "bodyText": "verbose is unused.", "url": "https://github.com/apache/ozone/pull/1662#discussion_r544348633", "createdAt": "2020-12-16T14:37:32Z", "author": {"login": "adoroszlai"}, "path": "hadoop-hdds/tools/src/main/java/org/apache/hadoop/hdds/scm/cli/cert/InfoSubcommand.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hdds.scm.cli.cert;\n+\n+import java.io.IOException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.hadoop.hdds.cli.GenericParentCommand;\n+import org.apache.hadoop.hdds.cli.HddsVersionProvider;\n+import org.apache.hadoop.hdds.protocol.SCMSecurityProtocol;\n+\n+import org.apache.hadoop.hdds.security.x509.certificate.utils.CertificateCodec;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Model.CommandSpec;\n+import picocli.CommandLine.Parameters;\n+import picocli.CommandLine.Spec;\n+\n+/**\n+ * This is the handler that process certificate info command.\n+ */\n+@Command(\n+    name = \"info\",\n+    description = \"Show detailed information for a specific certificate\",\n+    mixinStandardHelpOptions = true,\n+    versionProvider = HddsVersionProvider.class)\n+\n+class InfoSubcommand extends ScmCertSubcommand {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(InfoSubcommand.class);\n+\n+  @Spec\n+  private CommandSpec spec;\n+\n+  @Parameters(description = \"Serial id of the certificate in decimal.\")\n+  private String serialId;\n+\n+  @Override\n+  public void execute(SCMSecurityProtocol client) throws IOException {\n+    final String certPemStr =\n+        client.getCertificate(serialId);\n+    Preconditions.checkNotNull(certPemStr,\n+        \"Certificate can't be found\");\n+\n+    // Print container report info.\n+    LOG.info(\"Certificate id: {}\", serialId);\n+    boolean verbose = spec.root().userObject() instanceof GenericParentCommand\n+        && ((GenericParentCommand) spec.root().userObject()).isVerbose();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d54471123b321e074778e9a28263bc8531bdec5b"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQyOTAxMQ==", "bodyText": "Fixed.", "url": "https://github.com/apache/ozone/pull/1662#discussion_r546429011", "createdAt": "2020-12-20T19:59:57Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-hdds/tools/src/main/java/org/apache/hadoop/hdds/scm/cli/cert/InfoSubcommand.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hdds.scm.cli.cert;\n+\n+import java.io.IOException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.hadoop.hdds.cli.GenericParentCommand;\n+import org.apache.hadoop.hdds.cli.HddsVersionProvider;\n+import org.apache.hadoop.hdds.protocol.SCMSecurityProtocol;\n+\n+import org.apache.hadoop.hdds.security.x509.certificate.utils.CertificateCodec;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Model.CommandSpec;\n+import picocli.CommandLine.Parameters;\n+import picocli.CommandLine.Spec;\n+\n+/**\n+ * This is the handler that process certificate info command.\n+ */\n+@Command(\n+    name = \"info\",\n+    description = \"Show detailed information for a specific certificate\",\n+    mixinStandardHelpOptions = true,\n+    versionProvider = HddsVersionProvider.class)\n+\n+class InfoSubcommand extends ScmCertSubcommand {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(InfoSubcommand.class);\n+\n+  @Spec\n+  private CommandSpec spec;\n+\n+  @Parameters(description = \"Serial id of the certificate in decimal.\")\n+  private String serialId;\n+\n+  @Override\n+  public void execute(SCMSecurityProtocol client) throws IOException {\n+    final String certPemStr =\n+        client.getCertificate(serialId);\n+    Preconditions.checkNotNull(certPemStr,\n+        \"Certificate can't be found\");\n+\n+    // Print container report info.\n+    LOG.info(\"Certificate id: {}\", serialId);\n+    boolean verbose = spec.root().userObject() instanceof GenericParentCommand\n+        && ((GenericParentCommand) spec.root().userObject()).isVerbose();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM0ODYzMw=="}, "originalCommit": {"oid": "d54471123b321e074778e9a28263bc8531bdec5b"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDczMzE3OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/framework/src/test/java/org/apache/hadoop/hdds/security/x509/certificate/authority/MockCAStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNDo0MTozMFrOIHImLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQyMDowMDowNVrOIJHYXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM1MTc4OQ==", "bodyText": "Should we return emptyList() instead?", "url": "https://github.com/apache/ozone/pull/1662#discussion_r544351789", "createdAt": "2020-12-16T14:41:30Z", "author": {"login": "adoroszlai"}, "path": "hadoop-hdds/framework/src/test/java/org/apache/hadoop/hdds/security/x509/certificate/authority/MockCAStore.java", "diffHunk": "@@ -51,4 +54,11 @@ public X509Certificate getCertificateByID(BigInteger serialID,\n       throws IOException {\n     return null;\n   }\n+\n+  @Override\n+  public List<X509Certificate> listCertificate(HddsProtos.NodeType role,\n+      BigInteger startSerialID, int count, CertType certType)\n+      throws IOException {\n+    return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d54471123b321e074778e9a28263bc8531bdec5b"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQyOTAyMQ==", "bodyText": "Fixed.", "url": "https://github.com/apache/ozone/pull/1662#discussion_r546429021", "createdAt": "2020-12-20T20:00:05Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-hdds/framework/src/test/java/org/apache/hadoop/hdds/security/x509/certificate/authority/MockCAStore.java", "diffHunk": "@@ -51,4 +54,11 @@ public X509Certificate getCertificateByID(BigInteger serialID,\n       throws IOException {\n     return null;\n   }\n+\n+  @Override\n+  public List<X509Certificate> listCertificate(HddsProtos.NodeType role,\n+      BigInteger startSerialID, int count, CertType certType)\n+      throws IOException {\n+    return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM1MTc4OQ=="}, "originalCommit": {"oid": "d54471123b321e074778e9a28263bc8531bdec5b"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDc4ODAwOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/tools/src/main/java/org/apache/hadoop/hdds/scm/cli/cert/ListSubcommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNDo1MDozNlrOIHJGLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQyMDowMDozMFrOIJHYlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM1OTk4Mw==", "bodyText": "Headers and data don't really line up:\nSerialNumber\t\tValid From\t\tExpiry\t\tSubject\n2205019573485754\tWed Dec 16 00:00:00 UTC 2020\tThu Dec 16 00:00:00 UTC 2021\tO=CID-fe48b3e3-f808-4cbd-86a9-847465f6f617, OU=b4fb9f43-c2ad-454a-b204-ba13d05bff63, CN=root@55967653af5c\n\nshould be something like:\nSerialNumber\t\tValid From\t\t\tExpiry\t\t\t\tSubject\n2205019573485754\tWed Dec 16 00:00:00 UTC 2020\tThu Dec 16 00:00:00 UTC 2021\tO=CID-fe48b3e3-f808-4cbd-86a9-847465f6f617, OU=b4fb9f43-c2ad-454a-b204-ba13d05bff63, CN=root@55967653af5c", "url": "https://github.com/apache/ozone/pull/1662#discussion_r544359983", "createdAt": "2020-12-16T14:50:36Z", "author": {"login": "adoroszlai"}, "path": "hadoop-hdds/tools/src/main/java/org/apache/hadoop/hdds/scm/cli/cert/ListSubcommand.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hdds.scm.cli.cert;\n+\n+import java.io.IOException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+import java.util.List;\n+\n+import org.apache.hadoop.hdds.cli.HddsVersionProvider;\n+import org.apache.hadoop.hdds.protocol.SCMSecurityProtocol;\n+\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n+import org.apache.hadoop.hdds.security.x509.certificate.utils.CertificateCodec;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Help.Visibility;\n+import picocli.CommandLine.Option;\n+\n+/**\n+ * This is the handler that process certificate list command.\n+ */\n+@Command(\n+    name = \"list\",\n+    description = \"List certificates\",\n+    mixinStandardHelpOptions = true,\n+    versionProvider = HddsVersionProvider.class)\n+public class ListSubcommand extends ScmCertSubcommand {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(ListSubcommand.class);\n+\n+  @Option(names = {\"-s\", \"--start\"},\n+      description = \"Certificate serial id to start the iteration\",\n+      defaultValue = \"0\", showDefaultValue = Visibility.ALWAYS)\n+  private long startSerialId;\n+\n+  @Option(names = {\"-c\", \"--count\"},\n+      description = \"Maximum number of certificates to list\",\n+      defaultValue = \"20\", showDefaultValue = Visibility.ALWAYS)\n+  private int count;\n+\n+  @Option(names = {\"-r\", \"--role\"},\n+      description = \"Filter certificate by the role: om/datanode\",\n+      defaultValue = \"datanode\", showDefaultValue = Visibility.ALWAYS)\n+  private String role;\n+\n+  @Option(names = {\"-t\", \"--type\"},\n+      description = \"Filter certificate by the type: valid or revoked\",\n+      defaultValue = \"valid\", showDefaultValue = Visibility.ALWAYS)\n+  private String type;\n+\n+  private HddsProtos.NodeType parseCertRole(String r) {\n+    if (r.equalsIgnoreCase(\"om\")) {\n+      return HddsProtos.NodeType.OM;\n+    } else if (r.equalsIgnoreCase(\"scm\")) {\n+      return HddsProtos.NodeType.SCM;\n+    } else {\n+      return HddsProtos.NodeType.DATANODE;\n+    }\n+  }\n+\n+  private void printCert(X509Certificate cert) {\n+    LOG.info(\"{}\\t{}\\t{}\\t{}\", cert.getSerialNumber(), cert.getNotBefore(),\n+        cert.getNotAfter(), cert.getSubjectDN());\n+  }\n+\n+  @Override\n+  protected void execute(SCMSecurityProtocol client) throws IOException {\n+    boolean isRevoked = type.equalsIgnoreCase(\"revoked\");\n+    List<String> certPemList = client.listCertificate(\n+        parseCertRole(role), startSerialId, count, isRevoked);\n+    LOG.info(\"Total {} {} certificates: \", certPemList.size(), type);\n+    LOG.info(\"SerialNumber\\t\\tValid From\\t\\tExpiry\\t\\tSubject\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d54471123b321e074778e9a28263bc8531bdec5b"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQyOTA3OA==", "bodyText": "Fixed.\nTotal 2 valid certificates: \nSerialNumber      Valid From                     Expiry                         Subject                                                                                                       \n170901133690402   Sun Dec 20 00:00:00 UTC 2020   Mon Dec 20 00:00:00 UTC 2021   O=CID-4b97ad93-f91c-4700-83b8-62df6a24e12a, OU=e25f8f9c-9292-4731-8406-4d0e5e522757, CN=root@a65bf462da45     \n170904253373102   Sun Dec 20 00:00:00 UTC 2020   Mon Dec 20 00:00:00 UTC 2021   O=CID-4b97ad93-f91c-4700-83b8-62df6a24e12a, OU=e25f8f9c-9292-4731-8406-4d0e5e522757, CN=root@om", "url": "https://github.com/apache/ozone/pull/1662#discussion_r546429078", "createdAt": "2020-12-20T20:00:30Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-hdds/tools/src/main/java/org/apache/hadoop/hdds/scm/cli/cert/ListSubcommand.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hdds.scm.cli.cert;\n+\n+import java.io.IOException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+import java.util.List;\n+\n+import org.apache.hadoop.hdds.cli.HddsVersionProvider;\n+import org.apache.hadoop.hdds.protocol.SCMSecurityProtocol;\n+\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n+import org.apache.hadoop.hdds.security.x509.certificate.utils.CertificateCodec;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Help.Visibility;\n+import picocli.CommandLine.Option;\n+\n+/**\n+ * This is the handler that process certificate list command.\n+ */\n+@Command(\n+    name = \"list\",\n+    description = \"List certificates\",\n+    mixinStandardHelpOptions = true,\n+    versionProvider = HddsVersionProvider.class)\n+public class ListSubcommand extends ScmCertSubcommand {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(ListSubcommand.class);\n+\n+  @Option(names = {\"-s\", \"--start\"},\n+      description = \"Certificate serial id to start the iteration\",\n+      defaultValue = \"0\", showDefaultValue = Visibility.ALWAYS)\n+  private long startSerialId;\n+\n+  @Option(names = {\"-c\", \"--count\"},\n+      description = \"Maximum number of certificates to list\",\n+      defaultValue = \"20\", showDefaultValue = Visibility.ALWAYS)\n+  private int count;\n+\n+  @Option(names = {\"-r\", \"--role\"},\n+      description = \"Filter certificate by the role: om/datanode\",\n+      defaultValue = \"datanode\", showDefaultValue = Visibility.ALWAYS)\n+  private String role;\n+\n+  @Option(names = {\"-t\", \"--type\"},\n+      description = \"Filter certificate by the type: valid or revoked\",\n+      defaultValue = \"valid\", showDefaultValue = Visibility.ALWAYS)\n+  private String type;\n+\n+  private HddsProtos.NodeType parseCertRole(String r) {\n+    if (r.equalsIgnoreCase(\"om\")) {\n+      return HddsProtos.NodeType.OM;\n+    } else if (r.equalsIgnoreCase(\"scm\")) {\n+      return HddsProtos.NodeType.SCM;\n+    } else {\n+      return HddsProtos.NodeType.DATANODE;\n+    }\n+  }\n+\n+  private void printCert(X509Certificate cert) {\n+    LOG.info(\"{}\\t{}\\t{}\\t{}\", cert.getSerialNumber(), cert.getNotBefore(),\n+        cert.getNotAfter(), cert.getSubjectDN());\n+  }\n+\n+  @Override\n+  protected void execute(SCMSecurityProtocol client) throws IOException {\n+    boolean isRevoked = type.equalsIgnoreCase(\"revoked\");\n+    List<String> certPemList = client.listCertificate(\n+        parseCertRole(role), startSerialId, count, isRevoked);\n+    LOG.info(\"Total {} {} certificates: \", certPemList.size(), type);\n+    LOG.info(\"SerialNumber\\t\\tValid From\\t\\tExpiry\\t\\tSubject\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM1OTk4Mw=="}, "originalCommit": {"oid": "d54471123b321e074778e9a28263bc8531bdec5b"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDg0NzE5OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/dist/src/main/smoketest/security/admin-cert.robot", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNTowMTozMlrOIHJqAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQyMDowMDo0OVrOIJHYpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM2OTE1Mg==", "bodyText": "Nit: would it be enough to check only the first certificate to save a few seconds?\nozone admin cert list |grep UTC|awk '{print $1}'| head -1 | xargs ozone admin cert info", "url": "https://github.com/apache/ozone/pull/1662#discussion_r544369152", "createdAt": "2020-12-16T15:01:32Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/dist/src/main/smoketest/security/admin-cert.robot", "diffHunk": "@@ -0,0 +1,44 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+*** Settings ***\n+Documentation       Test for ozone admin cert command\n+Library             BuiltIn\n+Library             String\n+Resource            ../commonlib.robot\n+Resource            ../lib/os.robot\n+Resource            ../ozone-lib/shell.robot\n+Suite Setup         Setup Test\n+Test Timeout        5 minutes\n+\n+*** Variables ***\n+\n+*** Keywords ***\n+Setup Test\n+    Run Keyword     Kinit test user     testuser     testuser.keytab\n+\n+*** Test Cases ***\n+List valid certificates\n+    ${output} =      Execute    ozone admin cert list\n+                     Should Contain    ${output}    valid certificates\n+\n+List revoked certificates\n+    ${output} =      Execute    ozone admin cert list -t revoked\n+                     Should Contain    ${output}    Total 0 revoked certificates\n+\n+Info of the cert\n+    ${output} =      Execute   for id in $(ozone admin cert list |grep UTC|awk '{print $1}'); do ozone admin cert info $id; done", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d54471123b321e074778e9a28263bc8531bdec5b"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQyOTA5Mg==", "bodyText": "Fixed with a \"-c 1\"", "url": "https://github.com/apache/ozone/pull/1662#discussion_r546429092", "createdAt": "2020-12-20T20:00:49Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-ozone/dist/src/main/smoketest/security/admin-cert.robot", "diffHunk": "@@ -0,0 +1,44 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+*** Settings ***\n+Documentation       Test for ozone admin cert command\n+Library             BuiltIn\n+Library             String\n+Resource            ../commonlib.robot\n+Resource            ../lib/os.robot\n+Resource            ../ozone-lib/shell.robot\n+Suite Setup         Setup Test\n+Test Timeout        5 minutes\n+\n+*** Variables ***\n+\n+*** Keywords ***\n+Setup Test\n+    Run Keyword     Kinit test user     testuser     testuser.keytab\n+\n+*** Test Cases ***\n+List valid certificates\n+    ${output} =      Execute    ozone admin cert list\n+                     Should Contain    ${output}    valid certificates\n+\n+List revoked certificates\n+    ${output} =      Execute    ozone admin cert list -t revoked\n+                     Should Contain    ${output}    Total 0 revoked certificates\n+\n+Info of the cert\n+    ${output} =      Execute   for id in $(ozone admin cert list |grep UTC|awk '{print $1}'); do ozone admin cert info $id; done", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM2OTE1Mg=="}, "originalCommit": {"oid": "d54471123b321e074778e9a28263bc8531bdec5b"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4559, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}