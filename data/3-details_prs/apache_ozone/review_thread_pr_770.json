{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MzkzOTIy", "number": 770, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOTo0NDo0M1rOD075cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOTo0NDo0M1rOD075cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODMzOTA0OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/request/security/TestOMGetDelegationTokenRequest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOTo0NDo0M1rOGKIHIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNjowOTo1MVrOGObAtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI3MTg0Mg==", "bodyText": "Do we need to set the secretManager again? OzoneManager.getDelegationTokenMgr is going to return the same object again.", "url": "https://github.com/apache/ozone/pull/770#discussion_r413271842", "createdAt": "2020-04-22T19:44:43Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/request/security/TestOMGetDelegationTokenRequest.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.request.security;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Optional;\n+import java.util.UUID;\n+import org.apache.hadoop.ozone.om.response.OMClientResponse;\n+import org.apache.hadoop.ozone.security.OzoneDelegationTokenSecretManager;\n+import org.apache.hadoop.ozone.security.OzoneTokenIdentifier;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.Type;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.Status;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos\n+    .OMRequest;\n+import static org.apache.hadoop.ozone.security.OzoneTokenIdentifier.KIND_NAME;\n+import org.apache.hadoop.security.token.Token;\n+import org.apache.hadoop.security.proto.SecurityProtos.GetDelegationTokenRequestProto;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.hadoop.io.Text;\n+import org.mockito.Mockito;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyLong;\n+import static org.mockito.Mockito.when;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * The class tests OMGetDelegationTokenRequest.\n+ */\n+public class TestOMGetDelegationTokenRequest extends\n+    TestOMDelegationTokenRequest {\n+\n+  private OzoneDelegationTokenSecretManager secretManager;\n+  private OzoneTokenIdentifier identifier;\n+  private Token<OzoneTokenIdentifier> token;\n+  private Text tester;\n+  private OMRequest originalRequest;\n+  private OMRequest modifiedRequest;\n+  private OMGetDelegationTokenRequest omGetDelegationTokenRequest;\n+  final private String checkResponse = \"\";\n+\n+  @Before\n+  public void setupGetDelegationToken() {\n+    secretManager = Mockito.mock(OzoneDelegationTokenSecretManager.class);\n+    when(ozoneManager.getDelegationTokenMgr()).thenReturn(secretManager);\n+    secretManager = ozoneManager.getDelegationTokenMgr();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa498ddb06539a18d54f65f35d73f532de83f48f"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc3NTc5Nw==", "bodyText": "Thank you @hanishakoneru for the review.\nYes, we don't need secretManager here.\nUpdated.", "url": "https://github.com/apache/ozone/pull/770#discussion_r417775797", "createdAt": "2020-04-30T06:09:51Z", "author": {"login": "cxorm"}, "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/request/security/TestOMGetDelegationTokenRequest.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.request.security;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Optional;\n+import java.util.UUID;\n+import org.apache.hadoop.ozone.om.response.OMClientResponse;\n+import org.apache.hadoop.ozone.security.OzoneDelegationTokenSecretManager;\n+import org.apache.hadoop.ozone.security.OzoneTokenIdentifier;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.Type;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.Status;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos\n+    .OMRequest;\n+import static org.apache.hadoop.ozone.security.OzoneTokenIdentifier.KIND_NAME;\n+import org.apache.hadoop.security.token.Token;\n+import org.apache.hadoop.security.proto.SecurityProtos.GetDelegationTokenRequestProto;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.hadoop.io.Text;\n+import org.mockito.Mockito;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyLong;\n+import static org.mockito.Mockito.when;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * The class tests OMGetDelegationTokenRequest.\n+ */\n+public class TestOMGetDelegationTokenRequest extends\n+    TestOMDelegationTokenRequest {\n+\n+  private OzoneDelegationTokenSecretManager secretManager;\n+  private OzoneTokenIdentifier identifier;\n+  private Token<OzoneTokenIdentifier> token;\n+  private Text tester;\n+  private OMRequest originalRequest;\n+  private OMRequest modifiedRequest;\n+  private OMGetDelegationTokenRequest omGetDelegationTokenRequest;\n+  final private String checkResponse = \"\";\n+\n+  @Before\n+  public void setupGetDelegationToken() {\n+    secretManager = Mockito.mock(OzoneDelegationTokenSecretManager.class);\n+    when(ozoneManager.getDelegationTokenMgr()).thenReturn(secretManager);\n+    secretManager = ozoneManager.getDelegationTokenMgr();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI3MTg0Mg=="}, "originalCommit": {"oid": "aa498ddb06539a18d54f65f35d73f532de83f48f"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4342, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}