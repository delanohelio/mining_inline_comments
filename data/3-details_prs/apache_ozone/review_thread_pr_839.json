{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0ODk4NDcx", "number": 839, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNDowODozMVrODywkyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzo0OToyNFrOD1hpDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTUxMjQwOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/recon-codegen/src/main/java/org/hadoop/ozone/recon/codegen/ReconSqlDbConfig.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNDowODozMVrOGG_SCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMToxOTowMVrOGLpnGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk4MTQ0OQ==", "bodyText": "Why does this class only provide 1 configuration item? The JooqPersistence module properties should not be moved here?", "url": "https://github.com/apache/ozone/pull/839#discussion_r409981449", "createdAt": "2020-04-17T04:08:31Z", "author": {"login": "swagle"}, "path": "hadoop-ozone/recon-codegen/src/main/java/org/hadoop/ozone/recon/codegen/ReconSqlDbConfig.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.hadoop.ozone.recon.codegen;\n+\n+import org.apache.hadoop.hdds.conf.Config;\n+import org.apache.hadoop.hdds.conf.ConfigGroup;\n+import org.apache.hadoop.hdds.conf.ConfigTag;\n+import org.apache.hadoop.hdds.conf.ConfigType;\n+\n+/**\n+ * The configuration class for the Recon SQL DB.\n+ */\n+@ConfigGroup(prefix = \"ozone.recon.sql.db\")\n+public class ReconSqlDbConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d822d7218d2eadc04da0609874ea9ca17391a74"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM2NTIxOA==", "bodyText": "Yes, but the Java configuration based API is for new config items generally. The code looks at ozone-default.xml and also Java based configuration classes and creates a master list for the default xml during assembly.", "url": "https://github.com/apache/ozone/pull/839#discussion_r410365218", "createdAt": "2020-04-17T17:25:12Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/recon-codegen/src/main/java/org/hadoop/ozone/recon/codegen/ReconSqlDbConfig.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.hadoop.ozone.recon.codegen;\n+\n+import org.apache.hadoop.hdds.conf.Config;\n+import org.apache.hadoop.hdds.conf.ConfigGroup;\n+import org.apache.hadoop.hdds.conf.ConfigTag;\n+import org.apache.hadoop.hdds.conf.ConfigType;\n+\n+/**\n+ * The configuration class for the Recon SQL DB.\n+ */\n+@ConfigGroup(prefix = \"ozone.recon.sql.db\")\n+public class ReconSqlDbConfig {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk4MTQ0OQ=="}, "originalCommit": {"oid": "1d822d7218d2eadc04da0609874ea9ca17391a74"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM2NDg3Nw==", "bodyText": "I am 100% happy with the answer...\n... but as @anuengineer is not here I feel the responsibility to decorate pull requests with random external literature. \ud83d\ude04\nSlow migration to Java based configuration API can happen at any time:\n\nTHE BOY SCOUTS HAVE A RULE: \u201cAlways leave the campground cleaner than you found it.\u201d If you find a mess on the ground, you clean it up regardless of who might have made it. You intentionally improve the environment for the next group of campers. (Actually, the original form of that rule, written by Robert Stephenson Smyth Baden-Powell, the father of scouting, was \u201cTry and leave this world a little better than you found it.\u201d)\n\n\nWhat if we followed a similar rule in our code: \u201cAlways check a module in cleaner than when you checked it out\u201d? Regardless of who the original author was, what if we always made some effort, no matter how small, to improve the module? What would be the result?\n\nhttps://www.oreilly.com/library/view/97-things-every/9780596809515/ch08.html\n(Again, It's fine with me as is, I do the same. I skip the migration when it makes the patch harder to understand. But I never skip to add funny comments... \ud83d\ude09 )", "url": "https://github.com/apache/ozone/pull/839#discussion_r414364877", "createdAt": "2020-04-24T07:42:20Z", "author": {"login": "elek"}, "path": "hadoop-ozone/recon-codegen/src/main/java/org/hadoop/ozone/recon/codegen/ReconSqlDbConfig.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.hadoop.ozone.recon.codegen;\n+\n+import org.apache.hadoop.hdds.conf.Config;\n+import org.apache.hadoop.hdds.conf.ConfigGroup;\n+import org.apache.hadoop.hdds.conf.ConfigTag;\n+import org.apache.hadoop.hdds.conf.ConfigType;\n+\n+/**\n+ * The configuration class for the Recon SQL DB.\n+ */\n+@ConfigGroup(prefix = \"ozone.recon.sql.db\")\n+public class ReconSqlDbConfig {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk4MTQ0OQ=="}, "originalCommit": {"oid": "1d822d7218d2eadc04da0609874ea9ca17391a74"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDcwNDgzOQ==", "bodyText": "@elek and here comes the random quote, You can always tag me and I will show up; even if it is only for a random quote \ud83e\udd26\n\u201cWithout change, something sleeps inside us, and seldom awakens. The sleeper must awaken -- Frank Herbert, Dune \"\nThank you for doing your part :), and wake up call.", "url": "https://github.com/apache/ozone/pull/839#discussion_r414704839", "createdAt": "2020-04-24T16:27:22Z", "author": {"login": "anuengineer"}, "path": "hadoop-ozone/recon-codegen/src/main/java/org/hadoop/ozone/recon/codegen/ReconSqlDbConfig.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.hadoop.ozone.recon.codegen;\n+\n+import org.apache.hadoop.hdds.conf.Config;\n+import org.apache.hadoop.hdds.conf.ConfigGroup;\n+import org.apache.hadoop.hdds.conf.ConfigTag;\n+import org.apache.hadoop.hdds.conf.ConfigType;\n+\n+/**\n+ * The configuration class for the Recon SQL DB.\n+ */\n+@ConfigGroup(prefix = \"ozone.recon.sql.db\")\n+public class ReconSqlDbConfig {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk4MTQ0OQ=="}, "originalCommit": {"oid": "1d822d7218d2eadc04da0609874ea9ca17391a74"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg2OTI3NQ==", "bodyText": "Ok guys I am convinced :) I will move all the Recon SQL DB related configs to Java in this PR. These configs are very good candidates for hiding inside the code.  They are not expected to change often.", "url": "https://github.com/apache/ozone/pull/839#discussion_r414869275", "createdAt": "2020-04-24T21:19:01Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/recon-codegen/src/main/java/org/hadoop/ozone/recon/codegen/ReconSqlDbConfig.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.hadoop.ozone.recon.codegen;\n+\n+import org.apache.hadoop.hdds.conf.Config;\n+import org.apache.hadoop.hdds.conf.ConfigGroup;\n+import org.apache.hadoop.hdds.conf.ConfigTag;\n+import org.apache.hadoop.hdds.conf.ConfigType;\n+\n+/**\n+ * The configuration class for the Recon SQL DB.\n+ */\n+@ConfigGroup(prefix = \"ozone.recon.sql.db\")\n+public class ReconSqlDbConfig {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk4MTQ0OQ=="}, "originalCommit": {"oid": "1d822d7218d2eadc04da0609874ea9ca17391a74"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTUxNjU5OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/recon-codegen/src/main/java/org/hadoop/ozone/recon/codegen/JooqCodeGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNDoxMToyMVrOGG_UbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzoyMzo0NFrOGHWqBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk4MjA2MQ==", "bodyText": "Generally, schemas are lowercase.", "url": "https://github.com/apache/ozone/pull/839#discussion_r409982061", "createdAt": "2020-04-17T04:11:21Z", "author": {"login": "swagle"}, "path": "hadoop-ozone/recon-codegen/src/main/java/org/hadoop/ozone/recon/codegen/JooqCodeGenerator.java", "diffHunk": "@@ -55,10 +60,11 @@\n   private static final Logger LOG =\n       LoggerFactory.getLogger(JooqCodeGenerator.class);\n \n-  private static final String SQLITE_DB =\n-      System.getProperty(\"java.io.tmpdir\") + \"/recon-generated-schema\";\n-  private static final String JDBC_URL = \"jdbc:sqlite:\" + SQLITE_DB;\n-\n+  private static final String DB = Paths.get(\n+      System.getProperty(\"java.io.tmpdir\"),\n+      \"recon-generated-schema-\" + Time.monotonicNow()).toString();\n+  public static final String RECON_SCHEMA_NAME = \"RECON\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d822d7218d2eadc04da0609874ea9ca17391a74"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM2NDQyMA==", "bodyText": "Yes, but internally, I found that it becomes uppercase in the DB metadata. Hence, if I keep it as \"recon\", I have to do .toUpperCase() in Jooq code gen setSchemaName for it to find our classes.", "url": "https://github.com/apache/ozone/pull/839#discussion_r410364420", "createdAt": "2020-04-17T17:23:44Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/recon-codegen/src/main/java/org/hadoop/ozone/recon/codegen/JooqCodeGenerator.java", "diffHunk": "@@ -55,10 +60,11 @@\n   private static final Logger LOG =\n       LoggerFactory.getLogger(JooqCodeGenerator.class);\n \n-  private static final String SQLITE_DB =\n-      System.getProperty(\"java.io.tmpdir\") + \"/recon-generated-schema\";\n-  private static final String JDBC_URL = \"jdbc:sqlite:\" + SQLITE_DB;\n-\n+  private static final String DB = Paths.get(\n+      System.getProperty(\"java.io.tmpdir\"),\n+      \"recon-generated-schema-\" + Time.monotonicNow()).toString();\n+  public static final String RECON_SCHEMA_NAME = \"RECON\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk4MjA2MQ=="}, "originalCommit": {"oid": "1d822d7218d2eadc04da0609874ea9ca17391a74"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTUxNzUxOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/recon-codegen/src/main/java/org/hadoop/ozone/recon/codegen/JooqCodeGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNDoxMjowOFrOGG_VEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzoyMjozOVrOGHWn0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk4MjIyNw==", "bodyText": "Any reason to use a timestamp-based path?", "url": "https://github.com/apache/ozone/pull/839#discussion_r409982227", "createdAt": "2020-04-17T04:12:08Z", "author": {"login": "swagle"}, "path": "hadoop-ozone/recon-codegen/src/main/java/org/hadoop/ozone/recon/codegen/JooqCodeGenerator.java", "diffHunk": "@@ -55,10 +60,11 @@\n   private static final Logger LOG =\n       LoggerFactory.getLogger(JooqCodeGenerator.class);\n \n-  private static final String SQLITE_DB =\n-      System.getProperty(\"java.io.tmpdir\") + \"/recon-generated-schema\";\n-  private static final String JDBC_URL = \"jdbc:sqlite:\" + SQLITE_DB;\n-\n+  private static final String DB = Paths.get(\n+      System.getProperty(\"java.io.tmpdir\"),\n+      \"recon-generated-schema-\" + Time.monotonicNow()).toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d822d7218d2eadc04da0609874ea9ca17391a74"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM2Mzg1OQ==", "bodyText": "If we have a failed build on a host (which I experienced), re-building fails with database already found always.", "url": "https://github.com/apache/ozone/pull/839#discussion_r410363859", "createdAt": "2020-04-17T17:22:39Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/recon-codegen/src/main/java/org/hadoop/ozone/recon/codegen/JooqCodeGenerator.java", "diffHunk": "@@ -55,10 +60,11 @@\n   private static final Logger LOG =\n       LoggerFactory.getLogger(JooqCodeGenerator.class);\n \n-  private static final String SQLITE_DB =\n-      System.getProperty(\"java.io.tmpdir\") + \"/recon-generated-schema\";\n-  private static final String JDBC_URL = \"jdbc:sqlite:\" + SQLITE_DB;\n-\n+  private static final String DB = Paths.get(\n+      System.getProperty(\"java.io.tmpdir\"),\n+      \"recon-generated-schema-\" + Time.monotonicNow()).toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk4MjIyNw=="}, "originalCommit": {"oid": "1d822d7218d2eadc04da0609874ea9ca17391a74"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTUyMzQzOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/persistence/DefaultDataSourceProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNDoxNTo0MFrOGG_Ydg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzoyMTozMlrOGHWlbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk4MzA5NA==", "bodyText": "This is actually an antipattern :-) Although I am guilty of this as well. Instead of the if we should have a DerbyDataSourceProvider, SqliteDataSourceProvider and Default one. Can be left as a TODO for later as well, upto you.", "url": "https://github.com/apache/ozone/pull/839#discussion_r409983094", "createdAt": "2020-04-17T04:15:40Z", "author": {"login": "swagle"}, "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/persistence/DefaultDataSourceProvider.java", "diffHunk": "@@ -43,14 +52,26 @@\n    */\n   @Override\n   public DataSource get() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d822d7218d2eadc04da0609874ea9ca17391a74"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM2MzI0Nw==", "bodyText": "Yeah, I agree. Will look into this change. Maybe I can create 2 different datasource providers and re-use in the test.", "url": "https://github.com/apache/ozone/pull/839#discussion_r410363247", "createdAt": "2020-04-17T17:21:32Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/persistence/DefaultDataSourceProvider.java", "diffHunk": "@@ -43,14 +52,26 @@\n    */\n   @Override\n   public DataSource get() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk4MzA5NA=="}, "originalCommit": {"oid": "1d822d7218d2eadc04da0609874ea9ca17391a74"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTc2MTkyOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/recon/src/test/java/org/apache/hadoop/ozone/recon/persistence/TestReconWithDifferentSqlDBs.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNjo0MDo1N1rOGHBsfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzoxNzo0OVrOGHWd0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAyMDk4OA==", "bodyText": "License is missing.", "url": "https://github.com/apache/ozone/pull/839#discussion_r410020988", "createdAt": "2020-04-17T06:40:57Z", "author": {"login": "vivekratnavel"}, "path": "hadoop-ozone/recon/src/test/java/org/apache/hadoop/ozone/recon/persistence/TestReconWithDifferentSqlDBs.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.apache.hadoop.ozone.recon.persistence;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d822d7218d2eadc04da0609874ea9ca17391a74"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM2MTI5OQ==", "bodyText": "Thanks, will fix it.", "url": "https://github.com/apache/ozone/pull/839#discussion_r410361299", "createdAt": "2020-04-17T17:17:49Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/recon/src/test/java/org/apache/hadoop/ozone/recon/persistence/TestReconWithDifferentSqlDBs.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.apache.hadoop.ozone.recon.persistence;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAyMDk4OA=="}, "originalCommit": {"oid": "1d822d7218d2eadc04da0609874ea9ca17391a74"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTc2NDYxOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/recon-codegen/src/main/java/org/hadoop/ozone/recon/codegen/JooqCodeGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNjo0MjowOFrOGHBuNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzoxNzo0MFrOGHWdeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAyMTQzMQ==", "bodyText": "Why should we set schema name as user?", "url": "https://github.com/apache/ozone/pull/839#discussion_r410021431", "createdAt": "2020-04-17T06:42:08Z", "author": {"login": "vivekratnavel"}, "path": "hadoop-ozone/recon-codegen/src/main/java/org/hadoop/ozone/recon/codegen/JooqCodeGenerator.java", "diffHunk": "@@ -109,20 +113,25 @@ private void generateSourceCode(String outputDir) throws Exception {\n    * Provider for embedded datasource.\n    */\n   static class LocalDataSourceProvider implements Provider<DataSource> {\n-    private static SQLiteDataSource db;\n-\n+    private static EmbeddedDataSource dataSource;\n     static {\n-      db = new SQLiteDataSource();\n-      db.setUrl(JDBC_URL);\n+      try {\n+        createNewDerbyDatabase(JDBC_URL, RECON_SCHEMA_NAME);\n+      } catch (Exception e) {\n+        LOG.error(\"Error creating Recon Derby DB.\", e);\n+      }\n+      dataSource = new EmbeddedDataSource();\n+      dataSource.setDatabaseName(DB);\n+      dataSource.setUser(RECON_SCHEMA_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d822d7218d2eadc04da0609874ea9ca17391a74"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM2MTIwOQ==", "bodyText": "In derby (at least), user name becomes the schema.", "url": "https://github.com/apache/ozone/pull/839#discussion_r410361209", "createdAt": "2020-04-17T17:17:40Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/recon-codegen/src/main/java/org/hadoop/ozone/recon/codegen/JooqCodeGenerator.java", "diffHunk": "@@ -109,20 +113,25 @@ private void generateSourceCode(String outputDir) throws Exception {\n    * Provider for embedded datasource.\n    */\n   static class LocalDataSourceProvider implements Provider<DataSource> {\n-    private static SQLiteDataSource db;\n-\n+    private static EmbeddedDataSource dataSource;\n     static {\n-      db = new SQLiteDataSource();\n-      db.setUrl(JDBC_URL);\n+      try {\n+        createNewDerbyDatabase(JDBC_URL, RECON_SCHEMA_NAME);\n+      } catch (Exception e) {\n+        LOG.error(\"Error creating Recon Derby DB.\", e);\n+      }\n+      dataSource = new EmbeddedDataSource();\n+      dataSource.setDatabaseName(DB);\n+      dataSource.setUser(RECON_SCHEMA_NAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAyMTQzMQ=="}, "originalCommit": {"oid": "1d822d7218d2eadc04da0609874ea9ca17391a74"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTkxMTUxOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/recon/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNzozNjowMVrOGHDJzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzo0OTo1MFrOGHXfOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA0NDg3Ng==", "bodyText": "Thanks the patch @avijayanhwx\nCan we remove old sqlite dependency from here and from hadoop-ozone/dist/src/main/license/LICENSE.txt?\nIs it still required?\nOne other question: do you have any performance numbers between sqlite vs derby? (I don't think it's a big problem, just interested if you know sg.)", "url": "https://github.com/apache/ozone/pull/839#discussion_r410044876", "createdAt": "2020-04-17T07:36:01Z", "author": {"login": "elek"}, "path": "hadoop-ozone/recon/pom.xml", "diffHunk": "@@ -331,6 +331,11 @@\n       <artifactId>bonecp</artifactId>\n       <version>0.8.0.RELEASE</version>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apache.derby</groupId>\n+      <artifactId>derby</artifactId>\n+      <version>10.14.2.0</version>\n+    </dependency>\n     <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d822d7218d2eadc04da0609874ea9ca17391a74"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3ODA0Mw==", "bodyText": "@elek Thanks for the review.  We have not done perf testing on our SQL DB yet since we don't have a scale issue there (hopefully :) ) We will take up a task to try perf analysis between the 2 DBs. Until then, we can assume the performance between Derby vs Sqlite is similar as seen in some online references.\nRegarding the sqlite dependency that has been left around, I wanted to retain the out of the box support for sqlite in Recon (without JAR being supplied by the user). Also, we have sqlite JAR dependency in the unit tests.", "url": "https://github.com/apache/ozone/pull/839#discussion_r410378043", "createdAt": "2020-04-17T17:49:50Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/recon/pom.xml", "diffHunk": "@@ -331,6 +331,11 @@\n       <artifactId>bonecp</artifactId>\n       <version>0.8.0.RELEASE</version>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apache.derby</groupId>\n+      <artifactId>derby</artifactId>\n+      <version>10.14.2.0</version>\n+    </dependency>\n     <dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA0NDg3Ng=="}, "originalCommit": {"oid": "1d822d7218d2eadc04da0609874ea9ca17391a74"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDUxNTg5OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/recon-codegen/src/main/java/org/hadoop/ozone/recon/schema/ReconTaskSchemaDefinition.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzo0Njo1MVrOGLAmcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxOTozMzowMFrOGM0OLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5NzM2Mw==", "bodyText": "Can we rename to createReconTaskStatusTable for consistency?", "url": "https://github.com/apache/ozone/pull/839#discussion_r414197363", "createdAt": "2020-04-23T23:46:51Z", "author": {"login": "vivekratnavel"}, "path": "hadoop-ozone/recon-codegen/src/main/java/org/hadoop/ozone/recon/schema/ReconTaskSchemaDefinition.java", "diffHunk": "@@ -48,7 +50,9 @@\n   @Override\n   public void initializeSchema() throws SQLException {\n     Connection conn = dataSource.getConnection();\n-    createReconTaskStatus(conn);\n+    if (!TABLE_EXISTS_CHECK.test(conn, RECON_TASK_STATUS_TABLE_NAME)) {\n+      createReconTaskStatus(conn);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a85a6c96160c56ef7b0962f9f4acf4fc131c74"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA5MTY5Mw==", "bodyText": "Done.", "url": "https://github.com/apache/ozone/pull/839#discussion_r416091693", "createdAt": "2020-04-27T19:33:00Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/recon-codegen/src/main/java/org/hadoop/ozone/recon/schema/ReconTaskSchemaDefinition.java", "diffHunk": "@@ -48,7 +50,9 @@\n   @Override\n   public void initializeSchema() throws SQLException {\n     Connection conn = dataSource.getConnection();\n-    createReconTaskStatus(conn);\n+    if (!TABLE_EXISTS_CHECK.test(conn, RECON_TASK_STATUS_TABLE_NAME)) {\n+      createReconTaskStatus(conn);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5NzM2Mw=="}, "originalCommit": {"oid": "83a85a6c96160c56ef7b0962f9f4acf4fc131c74"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDUyMzAwOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/recon-codegen/src/main/java/org/hadoop/ozone/recon/schema/UtilizationSchemaDefinition.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzo0OToyNFrOGLAqQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxOTozMjo1NFrOGM0N5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5ODMzOA==", "bodyText": "Can we rename to createFileSizeCountTable for consistency?", "url": "https://github.com/apache/ozone/pull/839#discussion_r414198338", "createdAt": "2020-04-23T23:49:24Z", "author": {"login": "vivekratnavel"}, "path": "hadoop-ozone/recon-codegen/src/main/java/org/hadoop/ozone/recon/schema/UtilizationSchemaDefinition.java", "diffHunk": "@@ -52,8 +59,12 @@\n   @Transactional\n   public void initializeSchema() throws SQLException {\n     Connection conn = dataSource.getConnection();\n-    createClusterGrowthTable(conn);\n-    createFileSizeCount(conn);\n+    if (!TABLE_EXISTS_CHECK.test(conn, FILE_COUNT_BY_SIZE_TABLE_NAME)) {\n+      createFileSizeCount(conn);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a85a6c96160c56ef7b0962f9f4acf4fc131c74"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA5MTYyMw==", "bodyText": "Done.", "url": "https://github.com/apache/ozone/pull/839#discussion_r416091623", "createdAt": "2020-04-27T19:32:54Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/recon-codegen/src/main/java/org/hadoop/ozone/recon/schema/UtilizationSchemaDefinition.java", "diffHunk": "@@ -52,8 +59,12 @@\n   @Transactional\n   public void initializeSchema() throws SQLException {\n     Connection conn = dataSource.getConnection();\n-    createClusterGrowthTable(conn);\n-    createFileSizeCount(conn);\n+    if (!TABLE_EXISTS_CHECK.test(conn, FILE_COUNT_BY_SIZE_TABLE_NAME)) {\n+      createFileSizeCount(conn);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5ODMzOA=="}, "originalCommit": {"oid": "83a85a6c96160c56ef7b0962f9f4acf4fc131c74"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4407, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}