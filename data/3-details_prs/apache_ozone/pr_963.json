{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyMTg5MzQ5", "number": 963, "title": "HDDS-3646. Add a copy command to copy key to a new one.", "bodyText": "What changes were proposed in this pull request?\nA copy command can copy an exist key into a new one, It should support specify the replication factor and type. Cross-bucket copy is not supported.\nWhat is the link to the Apache JIRA\nhttps://issues.apache.org/jira/browse/HDDS-3646\nHow was this patch tested?\nozone sh key cp <bucket URI> <fromKey> <toKey>", "createdAt": "2020-05-23T01:23:57Z", "url": "https://github.com/apache/ozone/pull/963", "merged": true, "mergeCommit": {"oid": "2ce74070f024cf3ff00a7e43fff24932d9ba1e9e"}, "closed": true, "closedAt": "2020-05-27T15:14:58Z", "author": {"login": "maobaolong"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcj9R4HAH2gAyNDIyMTg5MzQ5OmNiNmVjYjFmYWEzOTVmODU2NGU4M2M5M2M2NmVlNDM5NDQzZTkyNGY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABclazShAFqTQxOTMyNjI2Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "cb6ecb1faa395f8564e83c93c66ee439443e924f", "author": {"user": {"login": "maobaolong", "name": "maobaolong"}}, "url": "https://github.com/apache/ozone/commit/cb6ecb1faa395f8564e83c93c66ee439443e924f", "committedDate": "2020-05-23T02:17:10Z", "message": "HDDS-3646. Add a copy command to copy key to a new one."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "57d4fe82fe01690de7d5d65ce972662bf897aff0", "author": {"user": {"login": "maobaolong", "name": "maobaolong"}}, "url": "https://github.com/apache/ozone/commit/57d4fe82fe01690de7d5d65ce972662bf897aff0", "committedDate": "2020-05-23T01:19:03Z", "message": "HDDS-3646. Add a copy command to copy key to a new one."}, "afterCommit": {"oid": "cb6ecb1faa395f8564e83c93c66ee439443e924f", "author": {"user": {"login": "maobaolong", "name": "maobaolong"}}, "url": "https://github.com/apache/ozone/commit/cb6ecb1faa395f8564e83c93c66ee439443e924f", "committedDate": "2020-05-23T02:17:10Z", "message": "HDDS-3646. Add a copy command to copy key to a new one."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NDEwMDg4", "url": "https://github.com/apache/ozone/pull/963#pullrequestreview-417410088", "createdAt": "2020-05-25T00:49:28Z", "commit": {"oid": "cb6ecb1faa395f8564e83c93c66ee439443e924f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMDo0OToyOFrOGZybgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMDo0OToyOFrOGZybgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY5MzgyNg==", "bodyText": "Redundant import statements.\nAvoid using * and instead import the specific classes/members needed.", "url": "https://github.com/apache/ozone/pull/963#discussion_r429693826", "createdAt": "2020-05-25T00:49:28Z", "author": {"login": "dineshchitlangia"}, "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/shell/keys/CpKeyHandler.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.shell.keys;\n+\n+import org.apache.hadoop.conf.StorageUnit;\n+import org.apache.hadoop.hdds.client.ReplicationFactor;\n+import org.apache.hadoop.hdds.client.ReplicationType;\n+import org.apache.hadoop.io.IOUtils;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+import org.apache.hadoop.ozone.client.OzoneBucket;\n+import org.apache.hadoop.ozone.client.OzoneClient;\n+import org.apache.hadoop.ozone.client.OzoneClientException;\n+import org.apache.hadoop.ozone.client.OzoneVolume;\n+import org.apache.hadoop.ozone.shell.OzoneAddress;\n+import org.apache.hadoop.ozone.shell.bucket.BucketHandler;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Option;\n+import picocli.CommandLine.Parameters;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.apache.hadoop.hdds.scm.ScmConfigKeys.OZONE_SCM_CHUNK_SIZE_DEFAULT;\n+import static org.apache.hadoop.hdds.scm.ScmConfigKeys.OZONE_SCM_CHUNK_SIZE_KEY;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.*;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_REPLICATION_TYPE_DEFAULT;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb6ecb1faa395f8564e83c93c66ee439443e924f"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NDEwMTY3", "url": "https://github.com/apache/ozone/pull/963#pullrequestreview-417410167", "createdAt": "2020-05-25T00:50:06Z", "commit": {"oid": "cb6ecb1faa395f8564e83c93c66ee439443e924f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMDo1MDowNlrOGZyb2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMTowMDo1N1rOGZygxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY5MzkxNQ==", "bodyText": "Can we rename the class to CopyKeyHandler ?", "url": "https://github.com/apache/ozone/pull/963#discussion_r429693915", "createdAt": "2020-05-25T00:50:06Z", "author": {"login": "dineshchitlangia"}, "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/shell/keys/CpKeyHandler.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.shell.keys;\n+\n+import org.apache.hadoop.conf.StorageUnit;\n+import org.apache.hadoop.hdds.client.ReplicationFactor;\n+import org.apache.hadoop.hdds.client.ReplicationType;\n+import org.apache.hadoop.io.IOUtils;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+import org.apache.hadoop.ozone.client.OzoneBucket;\n+import org.apache.hadoop.ozone.client.OzoneClient;\n+import org.apache.hadoop.ozone.client.OzoneClientException;\n+import org.apache.hadoop.ozone.client.OzoneVolume;\n+import org.apache.hadoop.ozone.shell.OzoneAddress;\n+import org.apache.hadoop.ozone.shell.bucket.BucketHandler;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Option;\n+import picocli.CommandLine.Parameters;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.apache.hadoop.hdds.scm.ScmConfigKeys.OZONE_SCM_CHUNK_SIZE_DEFAULT;\n+import static org.apache.hadoop.hdds.scm.ScmConfigKeys.OZONE_SCM_CHUNK_SIZE_KEY;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.*;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_REPLICATION_TYPE_DEFAULT;\n+\n+/**\n+ * Copy an existing key to another one.\n+ */\n+@Command(name = \"cp\",\n+    description = \"copies an existing key to another one\")\n+public class CpKeyHandler extends BucketHandler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb6ecb1faa395f8564e83c93c66ee439443e924f"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY5NTE3MQ==", "bodyText": "Since we are assuming that the copy command is to copy a key in within the same bucket, this GDPR piece of code won't cause any problem.\nCan we pls add comments in the javadoc to state the copy will only for copying keys within the same bucket?\nThis will be a safeguard for users attempting to doing something like:\nozone sh key cp /vol1/bucket1/key1 /vol1/bucket5/newkey", "url": "https://github.com/apache/ozone/pull/963#discussion_r429695171", "createdAt": "2020-05-25T01:00:56Z", "author": {"login": "dineshchitlangia"}, "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/shell/keys/CpKeyHandler.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.shell.keys;\n+\n+import org.apache.hadoop.conf.StorageUnit;\n+import org.apache.hadoop.hdds.client.ReplicationFactor;\n+import org.apache.hadoop.hdds.client.ReplicationType;\n+import org.apache.hadoop.io.IOUtils;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+import org.apache.hadoop.ozone.client.OzoneBucket;\n+import org.apache.hadoop.ozone.client.OzoneClient;\n+import org.apache.hadoop.ozone.client.OzoneClientException;\n+import org.apache.hadoop.ozone.client.OzoneVolume;\n+import org.apache.hadoop.ozone.shell.OzoneAddress;\n+import org.apache.hadoop.ozone.shell.bucket.BucketHandler;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Option;\n+import picocli.CommandLine.Parameters;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.apache.hadoop.hdds.scm.ScmConfigKeys.OZONE_SCM_CHUNK_SIZE_DEFAULT;\n+import static org.apache.hadoop.hdds.scm.ScmConfigKeys.OZONE_SCM_CHUNK_SIZE_KEY;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.*;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_REPLICATION_TYPE_DEFAULT;\n+\n+/**\n+ * Copy an existing key to another one.\n+ */\n+@Command(name = \"cp\",\n+    description = \"copies an existing key to another one\")\n+public class CpKeyHandler extends BucketHandler {\n+\n+  @Parameters(index = \"1\", arity = \"1..1\",\n+      description = \"The existing key to be renamed\")\n+  private String fromKey;\n+\n+  @Parameters(index = \"2\", arity = \"1..1\",\n+      description = \"The new desired name of the key\")\n+  private String toKey;\n+\n+  @Option(names = {\"-r\", \"--replication\"},\n+      description = \"Replication factor of the new key. (use ONE or THREE) \"\n+          + \"Default is specified in the cluster-wide config.\")\n+  private ReplicationFactor replicationFactor;\n+\n+  @Option(names = {\"-t\", \"--type\"},\n+      description = \"Replication type of the new key. (use RATIS or \" +\n+          \"STAND_ALONE) Default is specified in the cluster-wide config.\")\n+  private ReplicationType replicationType;\n+\n+  @Override\n+  protected void execute(OzoneClient client, OzoneAddress address)\n+      throws IOException, OzoneClientException {\n+\n+    String volumeName = address.getVolumeName();\n+    String bucketName = address.getBucketName();\n+\n+    OzoneVolume vol = client.getObjectStore().getVolume(volumeName);\n+    OzoneBucket bucket = vol.getBucket(bucketName);\n+\n+    if (replicationFactor == null) {\n+      replicationFactor = ReplicationFactor.valueOf(\n+          getConf().getInt(OZONE_REPLICATION, OZONE_REPLICATION_DEFAULT));\n+    }\n+\n+    if (replicationType == null) {\n+      replicationType = ReplicationType.valueOf(\n+          getConf().get(OZONE_REPLICATION_TYPE,\n+              OZONE_REPLICATION_TYPE_DEFAULT));\n+    }\n+\n+    Map<String, String> keyMetadata = new HashMap<>();\n+    String gdprEnabled = bucket.getMetadata().get(OzoneConsts.GDPR_FLAG);\n+    if (Boolean.parseBoolean(gdprEnabled)) {\n+      keyMetadata.put(OzoneConsts.GDPR_FLAG, Boolean.TRUE.toString());\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb6ecb1faa395f8564e83c93c66ee439443e924f"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY5NTE3NA==", "bodyText": "Why is the size hardcoded as 0 ?", "url": "https://github.com/apache/ozone/pull/963#discussion_r429695174", "createdAt": "2020-05-25T01:00:57Z", "author": {"login": "dineshchitlangia"}, "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/shell/keys/CpKeyHandler.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.shell.keys;\n+\n+import org.apache.hadoop.conf.StorageUnit;\n+import org.apache.hadoop.hdds.client.ReplicationFactor;\n+import org.apache.hadoop.hdds.client.ReplicationType;\n+import org.apache.hadoop.io.IOUtils;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+import org.apache.hadoop.ozone.client.OzoneBucket;\n+import org.apache.hadoop.ozone.client.OzoneClient;\n+import org.apache.hadoop.ozone.client.OzoneClientException;\n+import org.apache.hadoop.ozone.client.OzoneVolume;\n+import org.apache.hadoop.ozone.shell.OzoneAddress;\n+import org.apache.hadoop.ozone.shell.bucket.BucketHandler;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Option;\n+import picocli.CommandLine.Parameters;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.apache.hadoop.hdds.scm.ScmConfigKeys.OZONE_SCM_CHUNK_SIZE_DEFAULT;\n+import static org.apache.hadoop.hdds.scm.ScmConfigKeys.OZONE_SCM_CHUNK_SIZE_KEY;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.*;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_REPLICATION_TYPE_DEFAULT;\n+\n+/**\n+ * Copy an existing key to another one.\n+ */\n+@Command(name = \"cp\",\n+    description = \"copies an existing key to another one\")\n+public class CpKeyHandler extends BucketHandler {\n+\n+  @Parameters(index = \"1\", arity = \"1..1\",\n+      description = \"The existing key to be renamed\")\n+  private String fromKey;\n+\n+  @Parameters(index = \"2\", arity = \"1..1\",\n+      description = \"The new desired name of the key\")\n+  private String toKey;\n+\n+  @Option(names = {\"-r\", \"--replication\"},\n+      description = \"Replication factor of the new key. (use ONE or THREE) \"\n+          + \"Default is specified in the cluster-wide config.\")\n+  private ReplicationFactor replicationFactor;\n+\n+  @Option(names = {\"-t\", \"--type\"},\n+      description = \"Replication type of the new key. (use RATIS or \" +\n+          \"STAND_ALONE) Default is specified in the cluster-wide config.\")\n+  private ReplicationType replicationType;\n+\n+  @Override\n+  protected void execute(OzoneClient client, OzoneAddress address)\n+      throws IOException, OzoneClientException {\n+\n+    String volumeName = address.getVolumeName();\n+    String bucketName = address.getBucketName();\n+\n+    OzoneVolume vol = client.getObjectStore().getVolume(volumeName);\n+    OzoneBucket bucket = vol.getBucket(bucketName);\n+\n+    if (replicationFactor == null) {\n+      replicationFactor = ReplicationFactor.valueOf(\n+          getConf().getInt(OZONE_REPLICATION, OZONE_REPLICATION_DEFAULT));\n+    }\n+\n+    if (replicationType == null) {\n+      replicationType = ReplicationType.valueOf(\n+          getConf().get(OZONE_REPLICATION_TYPE,\n+              OZONE_REPLICATION_TYPE_DEFAULT));\n+    }\n+\n+    Map<String, String> keyMetadata = new HashMap<>();\n+    String gdprEnabled = bucket.getMetadata().get(OzoneConsts.GDPR_FLAG);\n+    if (Boolean.parseBoolean(gdprEnabled)) {\n+      keyMetadata.put(OzoneConsts.GDPR_FLAG, Boolean.TRUE.toString());\n+    }\n+\n+    int chunkSize = (int) getConf().getStorageSize(OZONE_SCM_CHUNK_SIZE_KEY,\n+        OZONE_SCM_CHUNK_SIZE_DEFAULT, StorageUnit.BYTES);\n+    try (InputStream input = bucket.readKey(fromKey);\n+         OutputStream output = bucket.createKey(toKey, 0,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb6ecb1faa395f8564e83c93c66ee439443e924f"}, "originalPosition": 101}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc292969e79e9a8d865dbbed1e643c27eadf43fd", "author": {"user": {"login": "maobaolong", "name": "maobaolong"}}, "url": "https://github.com/apache/ozone/commit/cc292969e79e9a8d865dbbed1e643c27eadf43fd", "committedDate": "2020-05-25T03:28:23Z", "message": "HDDS-3646. Address comments. Update javadoc, add test, fix style."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NDQ5ODg5", "url": "https://github.com/apache/ozone/pull/963#pullrequestreview-417449889", "createdAt": "2020-05-25T04:28:02Z", "commit": {"oid": "cc292969e79e9a8d865dbbed1e643c27eadf43fd"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNDoyODowMlrOGZ0bng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNDoyODowMlrOGZ0bng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcyNjYyMg==", "bodyText": "Your previous code was fine. The bucket metadata object may have properties that may not be needed for the key. So, if we copy the bucket metadata to be saved as key metadata, that is basically the piece of data which is mostly irrelevant for the key.\nSo you can replace bucket.getMetadata() with keyMetadata.", "url": "https://github.com/apache/ozone/pull/963#discussion_r429726622", "createdAt": "2020-05-25T04:28:02Z", "author": {"login": "dineshchitlangia"}, "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/shell/keys/CopyKeyHandler.java", "diffHunk": "@@ -89,17 +89,11 @@ protected void execute(OzoneClient client, OzoneAddress address)\n               OZONE_REPLICATION_TYPE_DEFAULT));\n     }\n \n-    Map<String, String> keyMetadata = new HashMap<>();\n-    String gdprEnabled = bucket.getMetadata().get(OzoneConsts.GDPR_FLAG);\n-    if (Boolean.parseBoolean(gdprEnabled)) {\n-      keyMetadata.put(OzoneConsts.GDPR_FLAG, Boolean.TRUE.toString());\n-    }\n-\n     int chunkSize = (int) getConf().getStorageSize(OZONE_SCM_CHUNK_SIZE_KEY,\n         OZONE_SCM_CHUNK_SIZE_DEFAULT, StorageUnit.BYTES);\n     try (InputStream input = bucket.readKey(fromKey);\n-         OutputStream output = bucket.createKey(toKey, 0,\n-             replicationType, replicationFactor, keyMetadata)) {\n+         OutputStream output = bucket.createKey(toKey, input.available(),\n+             replicationType, replicationFactor, bucket.getMetadata())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc292969e79e9a8d865dbbed1e643c27eadf43fd"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7768690f1570931deb8b1a5f66e53d6163b6bfe9", "author": {"user": {"login": "maobaolong", "name": "maobaolong"}}, "url": "https://github.com/apache/ozone/commit/7768690f1570931deb8b1a5f66e53d6163b6bfe9", "committedDate": "2020-05-25T07:38:35Z", "message": "HDDS-3646. Address comments. revert to the keyMetadata."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MTE5Mjgy", "url": "https://github.com/apache/ozone/pull/963#pullrequestreview-419119282", "createdAt": "2020-05-27T11:58:20Z", "commit": {"oid": "7768690f1570931deb8b1a5f66e53d6163b6bfe9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMTo1ODoyMFrOGbF6NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMTo1ODoyMFrOGbF6NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA2MTU1Nw==", "bodyText": "cp requires bucket URI and key names to be supplied separately:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                Execute             ozone sh key cp ${protocol}${server}/${volume}/bb1/key1 ${protocol}${server}/${volume}/bb1/key1-copy\n          \n          \n            \n                                Execute             ozone sh key cp ${protocol}${server}/${volume}/bb1 key1 key1-copy", "url": "https://github.com/apache/ozone/pull/963#discussion_r431061557", "createdAt": "2020-05-27T11:58:20Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/dist/src/main/smoketest/basic/ozone-shell.robot", "diffHunk": "@@ -114,6 +114,10 @@ Test key handling\n                     Execute             rm -f /tmp/NOTICE.txt.1\n                     Execute             ozone sh key get ${protocol}${server}/${volume}/bb1/key1 /tmp/NOTICE.txt.1\n                     Execute             diff -q /opt/hadoop/NOTICE.txt /tmp/NOTICE.txt.1\n+                    Execute             ozone sh key cp ${protocol}${server}/${volume}/bb1/key1 ${protocol}${server}/${volume}/bb1/key1-copy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7768690f1570931deb8b1a5f66e53d6163b6bfe9"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a07fbb7688dfc10d349581bb1422f19abefaab87", "author": {"user": {"login": "maobaolong", "name": "maobaolong"}}, "url": "https://github.com/apache/ozone/commit/a07fbb7688dfc10d349581bb1422f19abefaab87", "committedDate": "2020-05-27T12:47:26Z", "message": "Update hadoop-ozone/dist/src/main/smoketest/basic/ozone-shell.robot\n\nCo-authored-by: Doroszlai, Attila <6454655+adoroszlai@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b2e273cc2445a48edcb7ccc83b6b790c0a1d320", "author": {"user": {"login": "maobaolong", "name": "maobaolong"}}, "url": "https://github.com/apache/ozone/commit/4b2e273cc2445a48edcb7ccc83b6b790c0a1d320", "committedDate": "2020-05-27T12:50:21Z", "message": "HDDS-3646. Add the missed changed file to git"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MTc2MzIy", "url": "https://github.com/apache/ozone/pull/963#pullrequestreview-419176322", "createdAt": "2020-05-27T12:57:04Z", "commit": {"oid": "7768690f1570931deb8b1a5f66e53d6163b6bfe9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMjo1NzowNFrOGbH_zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMjo1NzowNFrOGbH_zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA5NTc1OA==", "bodyText": "One more thing: I think instead of building key metadata from scratch, cp should copy actual metadata of the existing key, which it can get via OzoneKeyDetails (except GDPR_SECRET and GDPR_ALGORITHM should be removed).  This would ensure that any user-supplied custom metadata is transferred, as well as reduce the need for future changes in case new default metadata is added in PutKeyHandler.", "url": "https://github.com/apache/ozone/pull/963#discussion_r431095758", "createdAt": "2020-05-27T12:57:04Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/shell/keys/CopyKeyHandler.java", "diffHunk": "@@ -89,11 +92,17 @@ protected void execute(OzoneClient client, OzoneAddress address)\n               OZONE_REPLICATION_TYPE_DEFAULT));\n     }\n \n+    Map<String, String> keyMetadata = new HashMap<>();\n+    String gdprEnabled = bucket.getMetadata().get(OzoneConsts.GDPR_FLAG);\n+    if (Boolean.parseBoolean(gdprEnabled)) {\n+      keyMetadata.put(OzoneConsts.GDPR_FLAG, Boolean.TRUE.toString());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7768690f1570931deb8b1a5f66e53d6163b6bfe9"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15f9496335b022567944240e31716e0795266285", "author": {"user": {"login": "maobaolong", "name": "maobaolong"}}, "url": "https://github.com/apache/ozone/commit/15f9496335b022567944240e31716e0795266285", "committedDate": "2020-05-27T13:45:11Z", "message": "Update ozone-shell.robot"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa34312a0c072c22ccb551d6e3ba83224b74c1b1", "author": {"user": {"login": "maobaolong", "name": "maobaolong"}}, "url": "https://github.com/apache/ozone/commit/aa34312a0c072c22ccb551d6e3ba83224b74c1b1", "committedDate": "2020-05-27T13:54:25Z", "message": "HDDS-3646. Address comments."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MzI2MjYz", "url": "https://github.com/apache/ozone/pull/963#pullrequestreview-419326263", "createdAt": "2020-05-27T15:14:50Z", "commit": {"oid": "aa34312a0c072c22ccb551d6e3ba83224b74c1b1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3302, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}