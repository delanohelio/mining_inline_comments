{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyNTQ3ODE3", "number": 1598, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMzozMTo1NlrOE6R4EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMzo0ODo0OVrOE6SHZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTQ1NzQ1OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/file/OMFileCreateResponse.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMzozMTo1NlrOH1Pxow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMDoyMjoxMVrOH1Q3TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU5NTA0Mw==", "bodyText": "KEY_TABLE is needed for KeyCreate also, as when ozone.om.enable.filesystem.paths is true, directories are created for KeyCreate also.", "url": "https://github.com/apache/ozone/pull/1598#discussion_r525595043", "createdAt": "2020-11-17T23:31:56Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/file/OMFileCreateResponse.java", "diffHunk": "@@ -23,15 +23,20 @@\n import org.apache.hadoop.ozone.om.helpers.OmBucketInfo;\n import org.apache.hadoop.ozone.om.helpers.OmKeyInfo;\n import org.apache.hadoop.ozone.om.helpers.OmVolumeArgs;\n+import org.apache.hadoop.ozone.om.response.CleanupTableInfo;\n import org.apache.hadoop.ozone.om.response.key.OMKeyCreateResponse;\n import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos\n     .OMResponse;\n \n import java.util.List;\n \n+import static org.apache.hadoop.ozone.om.OmMetadataManagerImpl.KEY_TABLE;\n+import static org.apache.hadoop.ozone.om.OmMetadataManagerImpl.OPEN_KEY_TABLE;\n+\n /**\n  * Response for crate file request.\n  */\n+@CleanupTableInfo(cleanupTables = {KEY_TABLE, OPEN_KEY_TABLE})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "763b1620dca909d297c2566ce55b70ae2971dddc"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYxMjg3Nw==", "bodyText": "Hmm... yes, you are right, key create I have missed for this one...\nLet me add that along with a test tomorrow.", "url": "https://github.com/apache/ozone/pull/1598#discussion_r525612877", "createdAt": "2020-11-18T00:22:11Z", "author": {"login": "fapifta"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/file/OMFileCreateResponse.java", "diffHunk": "@@ -23,15 +23,20 @@\n import org.apache.hadoop.ozone.om.helpers.OmBucketInfo;\n import org.apache.hadoop.ozone.om.helpers.OmKeyInfo;\n import org.apache.hadoop.ozone.om.helpers.OmVolumeArgs;\n+import org.apache.hadoop.ozone.om.response.CleanupTableInfo;\n import org.apache.hadoop.ozone.om.response.key.OMKeyCreateResponse;\n import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos\n     .OMResponse;\n \n import java.util.List;\n \n+import static org.apache.hadoop.ozone.om.OmMetadataManagerImpl.KEY_TABLE;\n+import static org.apache.hadoop.ozone.om.OmMetadataManagerImpl.OPEN_KEY_TABLE;\n+\n /**\n  * Response for crate file request.\n  */\n+@CleanupTableInfo(cleanupTables = {KEY_TABLE, OPEN_KEY_TABLE})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU5NTA0Mw=="}, "originalCommit": {"oid": "763b1620dca909d297c2566ce55b70ae2971dddc"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTQ5NjcwOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/response/TestCleanupTableInfo.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMzo0ODo0OVrOH1QJDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNDowMDo0MlrOH1aC9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYwMTAzOA==", "bodyText": "Here we have checked only tables which are not part of FileCreateResponse cleanupTable annotation.\nDo we want to check tables which are affected also.\nJust a question, not got what these lines are testing? (Is it just to see any tables which are not affected have same size in Cache) But how this is verifying fix, not sure if i am missing something basic here.", "url": "https://github.com/apache/ozone/pull/1598#discussion_r525601038", "createdAt": "2020-11-17T23:48:49Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/response/TestCleanupTableInfo.java", "diffHunk": "@@ -66,4 +105,188 @@ public void checkAnnotationAndTableName() throws Exception {\n       }\n     });\n   }\n+\n+  @Test\n+  public void testHDDS4478() throws Exception {\n+    HddsProtos.BlockID blockID = new BlockID(1, 1).getProtobuf();\n+    String volume = \"testVol\";\n+    String bucket = \"testBuck\";\n+    String key = \"/foo/bar/baz/key\";\n+\n+\n+    OMFileCreateRequest request =\n+        anOmFileCreateRequest(blockID, volume, bucket, key);\n+\n+    OMMetadataManager omMetaMgr = createOMMetadataManagerSpy();\n+    OMMetrics omMetrics = mock(OMMetrics.class);\n+    OzoneManager om =\n+        createOzoneManagerMock(volume, bucket, request, omMetaMgr, omMetrics);\n+\n+    OmVolumeArgs volumeArgs = aVolumeArgs(volume);\n+    OmBucketInfo bucketInfo = aBucketInfo(volume, bucket);\n+    addVolumeToMetaTable(volume, volumeArgs, omMetaMgr);\n+    addBucketToMetaTable(volume, bucket, bucketInfo, omMetaMgr);\n+\n+    OzoneManagerDoubleBufferHelper dbh =\n+        mock(OzoneManagerDoubleBufferHelper.class);\n+\n+    Map<String, Integer> cacheItemCount = new HashMap<>();\n+    for (String tableName : omMetaMgr.listTableNames()){\n+      cacheItemCount.put(tableName,\n+          Iterators.size(omMetaMgr.getTable(tableName).cacheIterator()));\n+    }\n+\n+\n+    request.validateAndUpdateCache(om, 1, dbh);\n+\n+\n+    CleanupTableInfo ann =\n+        OMFileCreateResponse.class.getAnnotation(CleanupTableInfo.class);\n+    List<String> cleanup = Arrays.asList(ann.cleanupTables());\n+    for (String tableName : omMetaMgr.listTableNames()) {\n+      if (!cleanup.contains(tableName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "763b1620dca909d297c2566ce55b70ae2971dddc"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYxNDcyMA==", "bodyText": "Yes, the test does what you have summarized.\nThe basic idea is the following:\nThe issue is that we have certain epochs that are pushing entries to unexpected table caches. Unexpected in a way that eviction for those epochs on particular tables is not called when the DoubleBuffer flushes, because of the missing table name in the annotation.\nI think it is sufficient to check whether we have added any unexpected cache entries to any other table's cache during applyTransaction. I might be wrong on this one, or there might be an easier way though.", "url": "https://github.com/apache/ozone/pull/1598#discussion_r525614720", "createdAt": "2020-11-18T00:27:35Z", "author": {"login": "fapifta"}, "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/response/TestCleanupTableInfo.java", "diffHunk": "@@ -66,4 +105,188 @@ public void checkAnnotationAndTableName() throws Exception {\n       }\n     });\n   }\n+\n+  @Test\n+  public void testHDDS4478() throws Exception {\n+    HddsProtos.BlockID blockID = new BlockID(1, 1).getProtobuf();\n+    String volume = \"testVol\";\n+    String bucket = \"testBuck\";\n+    String key = \"/foo/bar/baz/key\";\n+\n+\n+    OMFileCreateRequest request =\n+        anOmFileCreateRequest(blockID, volume, bucket, key);\n+\n+    OMMetadataManager omMetaMgr = createOMMetadataManagerSpy();\n+    OMMetrics omMetrics = mock(OMMetrics.class);\n+    OzoneManager om =\n+        createOzoneManagerMock(volume, bucket, request, omMetaMgr, omMetrics);\n+\n+    OmVolumeArgs volumeArgs = aVolumeArgs(volume);\n+    OmBucketInfo bucketInfo = aBucketInfo(volume, bucket);\n+    addVolumeToMetaTable(volume, volumeArgs, omMetaMgr);\n+    addBucketToMetaTable(volume, bucket, bucketInfo, omMetaMgr);\n+\n+    OzoneManagerDoubleBufferHelper dbh =\n+        mock(OzoneManagerDoubleBufferHelper.class);\n+\n+    Map<String, Integer> cacheItemCount = new HashMap<>();\n+    for (String tableName : omMetaMgr.listTableNames()){\n+      cacheItemCount.put(tableName,\n+          Iterators.size(omMetaMgr.getTable(tableName).cacheIterator()));\n+    }\n+\n+\n+    request.validateAndUpdateCache(om, 1, dbh);\n+\n+\n+    CleanupTableInfo ann =\n+        OMFileCreateResponse.class.getAnnotation(CleanupTableInfo.class);\n+    List<String> cleanup = Arrays.asList(ann.cleanupTables());\n+    for (String tableName : omMetaMgr.listTableNames()) {\n+      if (!cleanup.contains(tableName)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYwMTAzOA=="}, "originalCommit": {"oid": "763b1620dca909d297c2566ce55b70ae2971dddc"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc2MzMxOQ==", "bodyText": "Ya, it makes sense to me. It is basically checking all other table cache entries should be what it has an initial value, which should not be changed.", "url": "https://github.com/apache/ozone/pull/1598#discussion_r525763319", "createdAt": "2020-11-18T04:00:42Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/response/TestCleanupTableInfo.java", "diffHunk": "@@ -66,4 +105,188 @@ public void checkAnnotationAndTableName() throws Exception {\n       }\n     });\n   }\n+\n+  @Test\n+  public void testHDDS4478() throws Exception {\n+    HddsProtos.BlockID blockID = new BlockID(1, 1).getProtobuf();\n+    String volume = \"testVol\";\n+    String bucket = \"testBuck\";\n+    String key = \"/foo/bar/baz/key\";\n+\n+\n+    OMFileCreateRequest request =\n+        anOmFileCreateRequest(blockID, volume, bucket, key);\n+\n+    OMMetadataManager omMetaMgr = createOMMetadataManagerSpy();\n+    OMMetrics omMetrics = mock(OMMetrics.class);\n+    OzoneManager om =\n+        createOzoneManagerMock(volume, bucket, request, omMetaMgr, omMetrics);\n+\n+    OmVolumeArgs volumeArgs = aVolumeArgs(volume);\n+    OmBucketInfo bucketInfo = aBucketInfo(volume, bucket);\n+    addVolumeToMetaTable(volume, volumeArgs, omMetaMgr);\n+    addBucketToMetaTable(volume, bucket, bucketInfo, omMetaMgr);\n+\n+    OzoneManagerDoubleBufferHelper dbh =\n+        mock(OzoneManagerDoubleBufferHelper.class);\n+\n+    Map<String, Integer> cacheItemCount = new HashMap<>();\n+    for (String tableName : omMetaMgr.listTableNames()){\n+      cacheItemCount.put(tableName,\n+          Iterators.size(omMetaMgr.getTable(tableName).cacheIterator()));\n+    }\n+\n+\n+    request.validateAndUpdateCache(om, 1, dbh);\n+\n+\n+    CleanupTableInfo ann =\n+        OMFileCreateResponse.class.getAnnotation(CleanupTableInfo.class);\n+    List<String> cleanup = Arrays.asList(ann.cleanupTables());\n+    for (String tableName : omMetaMgr.listTableNames()) {\n+      if (!cleanup.contains(tableName)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYwMTAzOA=="}, "originalCommit": {"oid": "763b1620dca909d297c2566ce55b70ae2971dddc"}, "originalPosition": 101}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4735, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}