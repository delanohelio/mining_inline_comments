{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczNjI0NzE3", "number": 1353, "title": "HDDS-4148. Add servlet to return SCM DB checkpoint.", "bodyText": "What changes were proposed in this pull request?\nAdd servlet to return SCM DB checkpoint.\nWhat is the link to the Apache JIRA\nhttps://issues.apache.org/jira/browse/HDDS-4148\nHow was this patch tested?\nAdded a unit test for the servlet.", "createdAt": "2020-08-26T03:46:13Z", "url": "https://github.com/apache/ozone/pull/1353", "merged": true, "mergeCommit": {"oid": "dd61b1761016e5aa193db6f416ad8e21b98da662"}, "closed": true, "closedAt": "2021-02-20T09:43:06Z", "author": {"login": "prashantpogde"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdCjaW2gH2gAyNDczNjI0NzE3OjMzYjRmZDg1MGRiY2MyYTM2M2I5ODlhMGVhZmU2ZGQyNTk5OGE4Mzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABd742VgAH2gAyNDczNjI0NzE3OjQ3ZjVkMmU2ZTFlMzJjMTVkMjY0NzE0M2Y5YTYyNTE1MzA3MWI2YTA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "33b4fd850dbcc2a363b989a0eafe6dd25998a837", "author": {"user": {"login": "prashantpogde", "name": null}}, "url": "https://github.com/apache/ozone/commit/33b4fd850dbcc2a363b989a0eafe6dd25998a837", "committedDate": "2020-08-26T03:40:33Z", "message": "HDDS-4148. Add servlet to return SCM DB checkpoint."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1MTQzMDAz", "url": "https://github.com/apache/ozone/pull/1353#pullrequestreview-475143003", "createdAt": "2020-08-26T04:31:47Z", "commit": {"oid": "33b4fd850dbcc2a363b989a0eafe6dd25998a837"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNDozMTo0N1rOHG7cvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNDo0MTowMlrOHG7l2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAyNzUxOQ==", "bodyText": "Can we avoid duplication and use the same String constant for both OM and SCM servlet endpoints?", "url": "https://github.com/apache/ozone/pull/1353#discussion_r477027519", "createdAt": "2020-08-26T04:31:47Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/OzoneConsts.java", "diffHunk": "@@ -79,6 +79,10 @@\n   public static final String OZONE_USER = \"user\";\n   public static final String OZONE_REQUEST = \"request\";\n \n+  // SCM Http server endpoints\n+  public static final String OZONE_SCM_DB_CHECKPOINT_HTTP_ENDPOINT =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33b4fd850dbcc2a363b989a0eafe6dd25998a837"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAyODMwOQ==", "bodyText": "Most of the code between the OM and SCM servlet is common. We should be able to abstract out common logic between the two and have just one copy. How about a super DBCheckpointServlet class from which both the servlets inherit logic?", "url": "https://github.com/apache/ozone/pull/1353#discussion_r477028309", "createdAt": "2020-08-26T04:34:59Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/server/SCMDBCheckpointServlet.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hdds.scm.server;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.scm.ScmConfigKeys;\n+import org.apache.hadoop.hdds.scm.container.placement.metrics.SCMMetrics;\n+import org.apache.hadoop.hdds.utils.db.DBCheckpoint;\n+import org.apache.hadoop.hdds.utils.db.DBStore;\n+import org.apache.hadoop.hdfs.util.DataTransferThrottler;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+\n+import org.apache.commons.compress.archivers.ArchiveEntry;\n+import org.apache.commons.compress.archivers.ArchiveOutputStream;\n+import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;\n+import org.apache.commons.compress.compressors.CompressorException;\n+import org.apache.commons.compress.compressors.CompressorOutputStream;\n+import org.apache.commons.compress.compressors.CompressorStreamFactory;\n+import org.apache.commons.compress.utils.IOUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import static org.apache.hadoop.ozone.OzoneConsts.OZONE_DB_CHECKPOINT_REQUEST_FLUSH;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Provides the current checkpoint Snapshot of the OM DB. (tar.gz)\n+ */\n+public class SCMDBCheckpointServlet extends HttpServlet {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(SCMDBCheckpointServlet.class);\n+  private static final long serialVersionUID = 1L;\n+\n+  private transient StorageContainerManager scm;\n+  private transient DBStore scmDbStore;\n+  private transient SCMMetrics scmMetrics;\n+  private transient DataTransferThrottler throttler = null;\n+\n+  @Override\n+  public void init() throws ServletException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33b4fd850dbcc2a363b989a0eafe6dd25998a837"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAyODg3MQ==", "bodyText": "Same here. All this code is common. We should avoid duplication.", "url": "https://github.com/apache/ozone/pull/1353#discussion_r477028871", "createdAt": "2020-08-26T04:37:10Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/server/SCMDBCheckpointServlet.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hdds.scm.server;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.scm.ScmConfigKeys;\n+import org.apache.hadoop.hdds.scm.container.placement.metrics.SCMMetrics;\n+import org.apache.hadoop.hdds.utils.db.DBCheckpoint;\n+import org.apache.hadoop.hdds.utils.db.DBStore;\n+import org.apache.hadoop.hdfs.util.DataTransferThrottler;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+\n+import org.apache.commons.compress.archivers.ArchiveEntry;\n+import org.apache.commons.compress.archivers.ArchiveOutputStream;\n+import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;\n+import org.apache.commons.compress.compressors.CompressorException;\n+import org.apache.commons.compress.compressors.CompressorOutputStream;\n+import org.apache.commons.compress.compressors.CompressorStreamFactory;\n+import org.apache.commons.compress.utils.IOUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import static org.apache.hadoop.ozone.OzoneConsts.OZONE_DB_CHECKPOINT_REQUEST_FLUSH;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Provides the current checkpoint Snapshot of the OM DB. (tar.gz)\n+ */\n+public class SCMDBCheckpointServlet extends HttpServlet {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(SCMDBCheckpointServlet.class);\n+  private static final long serialVersionUID = 1L;\n+\n+  private transient StorageContainerManager scm;\n+  private transient DBStore scmDbStore;\n+  private transient SCMMetrics scmMetrics;\n+  private transient DataTransferThrottler throttler = null;\n+\n+  @Override\n+  public void init() throws ServletException {\n+\n+    scm = (StorageContainerManager) getServletContext()\n+        .getAttribute(OzoneConsts.SCM_CONTEXT_ATTRIBUTE);\n+\n+    if (scm == null) {\n+      LOG.error(\"Unable to initialize SCMDBCheckpointServlet. SCM is null\");\n+      return;\n+    }\n+\n+    scmDbStore = scm.getScmMetadataStore().getStore();\n+    scmMetrics= scm.getMetrics();\n+\n+    OzoneConfiguration configuration = scm.getConfiguration();\n+    long transferBandwidth = configuration.getLongBytes(\n+        ScmConfigKeys.SCM_DB_CHECKPOINT_TRANSFER_RATE_KEY,\n+        ScmConfigKeys.SCM_DB_CHECKPOINT_TRANSFER_RATE_DEFAULT);\n+\n+    if (transferBandwidth > 0) {\n+      throttler = new DataTransferThrottler(transferBandwidth);\n+    }\n+  }\n+\n+  /**\n+   * Process a GET request for the SCM DB checkpoint snapshot.\n+   *\n+   * @param request  The servlet request we are processing\n+   * @param response The servlet response we are creating\n+   */\n+  @Override\n+  public void doGet(HttpServletRequest request, HttpServletResponse response) {\n+\n+    LOG.info(\"Received request to obtain SCM DB checkpoint snapshot\");\n+    if (scmDbStore == null) {\n+      LOG.error(\n+          \"Unable to process metadata snapshot request. DB Store is null\");\n+      response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n+      return;\n+    }\n+\n+    DBCheckpoint checkpoint = null;\n+    try {\n+\n+      boolean flush = false;\n+      String flushParam =\n+          request.getParameter(OZONE_DB_CHECKPOINT_REQUEST_FLUSH);\n+      if (StringUtils.isNotEmpty(flushParam)) {\n+        flush = Boolean.valueOf(flushParam);\n+      }\n+\n+      checkpoint = scmDbStore.getCheckpoint(flush);\n+      if (checkpoint == null || checkpoint.getCheckpointLocation() == null) {\n+        LOG.error(\"Unable to process metadata snapshot request. \" +\n+            \"Checkpoint request returned null.\");\n+        response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n+        return;\n+      }\n+      scmMetrics.setLastCheckpointCreationTimeTaken(\n+          checkpoint.checkpointCreationTimeTaken());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33b4fd850dbcc2a363b989a0eafe6dd25998a837"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAyOTg0OA==", "bodyText": "If we abstract out the common logic, we don't need 2 different test classes.", "url": "https://github.com/apache/ozone/pull/1353#discussion_r477029848", "createdAt": "2020-08-26T04:41:02Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/hdds/scm/TestSCMDbCheckpointServlet.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hdds.scm;\n+\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.WriteListener;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.UUID;\n+\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.scm.container.placement.metrics.SCMMetrics;\n+import org.apache.hadoop.hdds.scm.server.SCMDBCheckpointServlet;\n+import org.apache.hadoop.hdds.utils.db.DBCheckpoint;\n+import org.apache.hadoop.io.IOUtils;\n+import org.apache.hadoop.ozone.MiniOzoneCluster;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+\n+import org.apache.commons.io.FileUtils;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_ACL_ENABLED;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_OPEN_KEY_EXPIRE_THRESHOLD_SECONDS;\n+import static org.apache.hadoop.ozone.OzoneConsts.OZONE_DB_CHECKPOINT_REQUEST_FLUSH;\n+import static org.apache.hadoop.ozone.om.OMDBCheckpointServlet.writeOmDBCheckpointToStream;\n+import org.junit.After;\n+import org.junit.Assert;\n+import static org.junit.Assert.assertNotNull;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.rules.Timeout;\n+import org.mockito.Matchers;\n+import static org.mockito.Mockito.doCallRealMethod;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Class used for testing the OM DB Checkpoint provider servlet.\n+ */\n+public class TestSCMDbCheckpointServlet {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33b4fd850dbcc2a363b989a0eafe6dd25998a837"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1Mzk3NjY0", "url": "https://github.com/apache/ozone/pull/1353#pullrequestreview-475397664", "createdAt": "2020-08-26T11:30:17Z", "commit": {"oid": "33b4fd850dbcc2a363b989a0eafe6dd25998a837"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMTozMDoxN1rOHHHzrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMTozMDoxN1rOHHHzrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIyOTk5Nw==", "bodyText": "Can you please use Java based configuration API:\nhttps://cwiki.apache.org/confluence/display/HADOOP/Java-based+configuration+API", "url": "https://github.com/apache/ozone/pull/1353#discussion_r477229997", "createdAt": "2020-08-26T11:30:17Z", "author": {"login": "elek"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/scm/ScmConfigKeys.java", "diffHunk": "@@ -352,6 +352,11 @@\n   public static final String HDDS_TRACING_ENABLED = \"hdds.tracing.enabled\";\n   public static final boolean HDDS_TRACING_ENABLED_DEFAULT = false;\n \n+  public static final String SCM_DB_CHECKPOINT_TRANSFER_RATE_KEY =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33b4fd850dbcc2a363b989a0eafe6dd25998a837"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff3ffe56f6ecda121ee5588582d2209871317839", "author": {"user": {"login": "prashantpogde", "name": null}}, "url": "https://github.com/apache/ozone/commit/ff3ffe56f6ecda121ee5588582d2209871317839", "committedDate": "2020-08-27T06:42:43Z", "message": "HDDS-4148. Addressing all the review comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84a16bc2994d5103ecacc9f1908e83736ae8b6dc", "author": {"user": {"login": "prashantpogde", "name": null}}, "url": "https://github.com/apache/ozone/commit/84a16bc2994d5103ecacc9f1908e83736ae8b6dc", "committedDate": "2020-08-28T03:21:02Z", "message": "HDDS-4148. Cleaning up."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3OTkxNTI2", "url": "https://github.com/apache/ozone/pull/1353#pullrequestreview-477991526", "createdAt": "2020-08-28T19:57:33Z", "commit": {"oid": "84a16bc2994d5103ecacc9f1908e83736ae8b6dc"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxOTo1NzozM1rOHJS1DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMDowMzoxM1rOHJS-FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUwNzcyNA==", "bodyText": "Can we make DBCheckpointMetrics as a super class, and move these metrics up to that class? Since the metric names are same in OM and SCM, we can maintain them in one place.", "url": "https://github.com/apache/ozone/pull/1353#discussion_r479507724", "createdAt": "2020-08-28T19:57:33Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/container/placement/metrics/SCMMetrics.java", "diffHunk": "@@ -52,6 +55,11 @@\n   @Metric private MutableCounterLong containerReportReadCount;\n   @Metric private MutableCounterLong containerReportWriteCount;\n \n+  @Metric private MutableGaugeLong lastCheckpointCreationTimeTaken;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84a16bc2994d5103ecacc9f1908e83736ae8b6dc"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUwOTU4MA==", "bodyText": "This test can be removed. It is already present in TestOMDbCheckpointServlet.", "url": "https://github.com/apache/ozone/pull/1353#discussion_r479509580", "createdAt": "2020-08-28T20:02:07Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/hdds/scm/TestSCMDbCheckpointServlet.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hdds.scm;\n+\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.WriteListener;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.UUID;\n+\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.scm.container.placement.metrics.SCMMetrics;\n+import org.apache.hadoop.hdds.scm.server.SCMDBCheckpointServlet;\n+import org.apache.hadoop.hdds.utils.db.DBCheckpoint;\n+import org.apache.hadoop.io.IOUtils;\n+import org.apache.hadoop.ozone.MiniOzoneCluster;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+\n+import org.apache.commons.io.FileUtils;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_ACL_ENABLED;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_OPEN_KEY_EXPIRE_THRESHOLD_SECONDS;\n+import static org.apache.hadoop.ozone.OzoneConsts.OZONE_DB_CHECKPOINT_REQUEST_FLUSH;\n+import static org.apache.hadoop.ozone.om.OMDBCheckpointServlet.writeOmDBCheckpointToStream;\n+import org.junit.After;\n+import org.junit.Assert;\n+import static org.junit.Assert.assertNotNull;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.rules.Timeout;\n+import org.mockito.Matchers;\n+import static org.mockito.Mockito.doCallRealMethod;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Class used for testing the OM DB Checkpoint provider servlet.\n+ */\n+public class TestSCMDbCheckpointServlet {\n+  private MiniOzoneCluster cluster = null;\n+  private SCMMetrics scmMetrics;\n+  private OzoneConfiguration conf;\n+  private String clusterId;\n+  private String scmId;\n+  private String omId;\n+\n+  @Rule\n+  public Timeout timeout = new Timeout(240000);\n+\n+  @Rule\n+  public TemporaryFolder folder = new TemporaryFolder();\n+  /**\n+   * Create a MiniDFSCluster for testing.\n+   * <p>\n+   * Ozone is made active by setting OZONE_ENABLED = true\n+   *\n+   * @throws IOException\n+   */\n+  @Before\n+  public void init() throws Exception {\n+    conf = new OzoneConfiguration();\n+    clusterId = UUID.randomUUID().toString();\n+    scmId = UUID.randomUUID().toString();\n+    omId = UUID.randomUUID().toString();\n+    conf.setBoolean(OZONE_ACL_ENABLED, true);\n+    conf.setInt(OZONE_OPEN_KEY_EXPIRE_THRESHOLD_SECONDS, 2);\n+    cluster = MiniOzoneCluster.newBuilder(conf)\n+        .setClusterId(clusterId)\n+        .setScmId(scmId)\n+        .setOmId(omId)\n+        .build();\n+    cluster.waitForClusterToBeReady();\n+    scmMetrics = cluster.getStorageContainerManager().getMetrics();\n+  }\n+\n+  /**\n+   * Shutdown MiniDFSCluster.\n+   */\n+  @After\n+  public void shutdown() {\n+    if (cluster != null) {\n+      cluster.shutdown();\n+    }\n+  }\n+\n+  @Test\n+  public void testDoGet() throws ServletException, IOException {\n+\n+    File tempFile = null;\n+    try {\n+      SCMDBCheckpointServlet scmDbCheckpointServletMock =\n+          mock(SCMDBCheckpointServlet.class);\n+\n+      doCallRealMethod().when(scmDbCheckpointServletMock).init();\n+      doCallRealMethod().when(scmDbCheckpointServletMock).initialize(\n+          cluster.getStorageContainerManager().getScmMetadataStore().getStore(),\n+          cluster.getStorageContainerManager().getMetrics());\n+\n+      HttpServletRequest requestMock = mock(HttpServletRequest.class);\n+      HttpServletResponse responseMock = mock(HttpServletResponse.class);\n+\n+      ServletContext servletContextMock = mock(ServletContext.class);\n+      when(scmDbCheckpointServletMock.getServletContext())\n+          .thenReturn(servletContextMock);\n+\n+      when(servletContextMock.getAttribute(OzoneConsts.SCM_CONTEXT_ATTRIBUTE))\n+          .thenReturn(cluster.getStorageContainerManager());\n+      when(requestMock.getParameter(OZONE_DB_CHECKPOINT_REQUEST_FLUSH))\n+          .thenReturn(\"true\");\n+      doNothing().when(responseMock).setContentType(\"application/x-tgz\");\n+      doNothing().when(responseMock).setHeader(Matchers.anyString(),\n+          Matchers.anyString());\n+\n+      tempFile = File.createTempFile(\"testDoGet_\" + System\n+          .currentTimeMillis(), \".tar.gz\");\n+\n+      FileOutputStream fileOutputStream = new FileOutputStream(tempFile);\n+      when(responseMock.getOutputStream()).thenReturn(\n+          new ServletOutputStream() {\n+            @Override\n+            public boolean isReady() {\n+              return true;\n+            }\n+\n+            @Override\n+            public void setWriteListener(WriteListener writeListener) {\n+            }\n+\n+            @Override\n+            public void write(int b) throws IOException {\n+              fileOutputStream.write(b);\n+            }\n+          });\n+\n+      doCallRealMethod().when(scmDbCheckpointServletMock).doGet(requestMock,\n+          responseMock);\n+\n+      scmDbCheckpointServletMock.init();\n+      long initialCheckpointCount = scmMetrics.getNumCheckpoints();\n+\n+      scmDbCheckpointServletMock.doGet(requestMock, responseMock);\n+\n+      Assert.assertTrue(tempFile.length() > 0);\n+      Assert.assertTrue(\n+          scmMetrics.getLastCheckpointCreationTimeTaken() > 0);\n+      Assert.assertTrue(\n+          scmMetrics.getLastCheckpointStreamingTimeTaken() > 0);\n+      Assert.assertTrue(scmMetrics.getNumCheckpoints() >\n+          initialCheckpointCount);\n+    } finally {\n+      FileUtils.deleteQuietly(tempFile);\n+    }\n+\n+  }\n+\n+  @Test\n+  public void testWriteCheckpointToOutputStream() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84a16bc2994d5103ecacc9f1908e83736ae8b6dc"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUwOTk1MQ==", "bodyText": "Class can be removed.", "url": "https://github.com/apache/ozone/pull/1353#discussion_r479509951", "createdAt": "2020-08-28T20:03:00Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/hdds/scm/TestSCMDbCheckpointServlet.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hdds.scm;\n+\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.WriteListener;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.UUID;\n+\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.scm.container.placement.metrics.SCMMetrics;\n+import org.apache.hadoop.hdds.scm.server.SCMDBCheckpointServlet;\n+import org.apache.hadoop.hdds.utils.db.DBCheckpoint;\n+import org.apache.hadoop.io.IOUtils;\n+import org.apache.hadoop.ozone.MiniOzoneCluster;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+\n+import org.apache.commons.io.FileUtils;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_ACL_ENABLED;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_OPEN_KEY_EXPIRE_THRESHOLD_SECONDS;\n+import static org.apache.hadoop.ozone.OzoneConsts.OZONE_DB_CHECKPOINT_REQUEST_FLUSH;\n+import static org.apache.hadoop.ozone.om.OMDBCheckpointServlet.writeOmDBCheckpointToStream;\n+import org.junit.After;\n+import org.junit.Assert;\n+import static org.junit.Assert.assertNotNull;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.rules.Timeout;\n+import org.mockito.Matchers;\n+import static org.mockito.Mockito.doCallRealMethod;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Class used for testing the OM DB Checkpoint provider servlet.\n+ */\n+public class TestSCMDbCheckpointServlet {\n+  private MiniOzoneCluster cluster = null;\n+  private SCMMetrics scmMetrics;\n+  private OzoneConfiguration conf;\n+  private String clusterId;\n+  private String scmId;\n+  private String omId;\n+\n+  @Rule\n+  public Timeout timeout = new Timeout(240000);\n+\n+  @Rule\n+  public TemporaryFolder folder = new TemporaryFolder();\n+  /**\n+   * Create a MiniDFSCluster for testing.\n+   * <p>\n+   * Ozone is made active by setting OZONE_ENABLED = true\n+   *\n+   * @throws IOException\n+   */\n+  @Before\n+  public void init() throws Exception {\n+    conf = new OzoneConfiguration();\n+    clusterId = UUID.randomUUID().toString();\n+    scmId = UUID.randomUUID().toString();\n+    omId = UUID.randomUUID().toString();\n+    conf.setBoolean(OZONE_ACL_ENABLED, true);\n+    conf.setInt(OZONE_OPEN_KEY_EXPIRE_THRESHOLD_SECONDS, 2);\n+    cluster = MiniOzoneCluster.newBuilder(conf)\n+        .setClusterId(clusterId)\n+        .setScmId(scmId)\n+        .setOmId(omId)\n+        .build();\n+    cluster.waitForClusterToBeReady();\n+    scmMetrics = cluster.getStorageContainerManager().getMetrics();\n+  }\n+\n+  /**\n+   * Shutdown MiniDFSCluster.\n+   */\n+  @After\n+  public void shutdown() {\n+    if (cluster != null) {\n+      cluster.shutdown();\n+    }\n+  }\n+\n+  @Test\n+  public void testDoGet() throws ServletException, IOException {\n+\n+    File tempFile = null;\n+    try {\n+      SCMDBCheckpointServlet scmDbCheckpointServletMock =\n+          mock(SCMDBCheckpointServlet.class);\n+\n+      doCallRealMethod().when(scmDbCheckpointServletMock).init();\n+      doCallRealMethod().when(scmDbCheckpointServletMock).initialize(\n+          cluster.getStorageContainerManager().getScmMetadataStore().getStore(),\n+          cluster.getStorageContainerManager().getMetrics());\n+\n+      HttpServletRequest requestMock = mock(HttpServletRequest.class);\n+      HttpServletResponse responseMock = mock(HttpServletResponse.class);\n+\n+      ServletContext servletContextMock = mock(ServletContext.class);\n+      when(scmDbCheckpointServletMock.getServletContext())\n+          .thenReturn(servletContextMock);\n+\n+      when(servletContextMock.getAttribute(OzoneConsts.SCM_CONTEXT_ATTRIBUTE))\n+          .thenReturn(cluster.getStorageContainerManager());\n+      when(requestMock.getParameter(OZONE_DB_CHECKPOINT_REQUEST_FLUSH))\n+          .thenReturn(\"true\");\n+      doNothing().when(responseMock).setContentType(\"application/x-tgz\");\n+      doNothing().when(responseMock).setHeader(Matchers.anyString(),\n+          Matchers.anyString());\n+\n+      tempFile = File.createTempFile(\"testDoGet_\" + System\n+          .currentTimeMillis(), \".tar.gz\");\n+\n+      FileOutputStream fileOutputStream = new FileOutputStream(tempFile);\n+      when(responseMock.getOutputStream()).thenReturn(\n+          new ServletOutputStream() {\n+            @Override\n+            public boolean isReady() {\n+              return true;\n+            }\n+\n+            @Override\n+            public void setWriteListener(WriteListener writeListener) {\n+            }\n+\n+            @Override\n+            public void write(int b) throws IOException {\n+              fileOutputStream.write(b);\n+            }\n+          });\n+\n+      doCallRealMethod().when(scmDbCheckpointServletMock).doGet(requestMock,\n+          responseMock);\n+\n+      scmDbCheckpointServletMock.init();\n+      long initialCheckpointCount = scmMetrics.getNumCheckpoints();\n+\n+      scmDbCheckpointServletMock.doGet(requestMock, responseMock);\n+\n+      Assert.assertTrue(tempFile.length() > 0);\n+      Assert.assertTrue(\n+          scmMetrics.getLastCheckpointCreationTimeTaken() > 0);\n+      Assert.assertTrue(\n+          scmMetrics.getLastCheckpointStreamingTimeTaken() > 0);\n+      Assert.assertTrue(scmMetrics.getNumCheckpoints() >\n+          initialCheckpointCount);\n+    } finally {\n+      FileUtils.deleteQuietly(tempFile);\n+    }\n+\n+  }\n+\n+  @Test\n+  public void testWriteCheckpointToOutputStream() throws Exception {\n+\n+    FileInputStream fis = null;\n+    FileOutputStream fos = null;\n+\n+    try {\n+      String testDirName = folder.newFolder().getAbsolutePath();\n+      File file = new File(testDirName + \"/temp1.txt\");\n+      FileWriter writer = new FileWriter(file);\n+      writer.write(\"Test data 1\");\n+      writer.close();\n+\n+      file = new File(testDirName + \"/temp2.txt\");\n+      writer = new FileWriter(file);\n+      writer.write(\"Test data 2\");\n+      writer.close();\n+\n+      File outputFile =\n+          new File(Paths.get(testDirName, \"output_file.tgz\").toString());\n+      TestDBCheckpoint dbCheckpoint = new TestDBCheckpoint(\n+          Paths.get(testDirName));\n+      writeOmDBCheckpointToStream(dbCheckpoint,\n+          new FileOutputStream(outputFile));\n+      assertNotNull(outputFile);\n+    } finally {\n+      IOUtils.closeStream(fis);\n+      IOUtils.closeStream(fos);\n+    }\n+  }\n+}\n+\n+class TestDBCheckpoint implements DBCheckpoint {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84a16bc2994d5103ecacc9f1908e83736ae8b6dc"}, "originalPosition": 215}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUxMDAzNg==", "bodyText": "Why do we need to increase timeout here?\nInstead, since only 1 of the 2 tests need the MiniOzoneCluster, we can change the cluster init to @BeforeClass or pull it into the test method. We can also add .setNumDatanodes(1) since we do not need 3 DNs. On my local host, I can see a significant perf improvement.\n(Similarly for the corresponding test)", "url": "https://github.com/apache/ozone/pull/1353#discussion_r479510036", "createdAt": "2020-08-28T20:03:13Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/om/TestOMDbCheckpointServlet.java", "diffHunk": "@@ -70,7 +70,7 @@\n   private String omId;\n \n   @Rule\n-  public Timeout timeout = new Timeout(60000);\n+  public Timeout timeout = new Timeout(240000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84a16bc2994d5103ecacc9f1908e83736ae8b6dc"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9cb5b159a06a6a398c1e85691ae7d0670ae6982", "author": {"user": {"login": "prashantpogde", "name": null}}, "url": "https://github.com/apache/ozone/commit/b9cb5b159a06a6a398c1e85691ae7d0670ae6982", "committedDate": "2020-08-29T04:20:40Z", "message": "HDDS-4148. Adding DBCheckpointMetrics in both SCMMetric and OMMetric."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "937212a11988918e8a98d1ac750211ac231ced3f", "author": {"user": {"login": "prashantpogde", "name": null}}, "url": "https://github.com/apache/ozone/commit/937212a11988918e8a98d1ac750211ac231ced3f", "committedDate": "2020-08-29T09:09:37Z", "message": "HDDS-4148. Fixing findbugs warning."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4OTA3OTgy", "url": "https://github.com/apache/ozone/pull/1353#pullrequestreview-478907982", "createdAt": "2020-08-31T19:52:29Z", "commit": {"oid": "937212a11988918e8a98d1ac750211ac231ced3f"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTo1MjozMFrOHKHCTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTo1Mzo0N1rOHKHE7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM2MzA4Ng==", "bodyText": "nit. writeOmDBCheckpointToStream --> writeDBCheckpointToStream", "url": "https://github.com/apache/ozone/pull/1353#discussion_r480363086", "createdAt": "2020-08-31T19:52:30Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-hdds/framework/src/main/java/org/apache/hadoop/hdds/utils/DBCheckpointServlet.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hdds.utils;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.hadoop.hdds.utils.db.DBCheckpoint;\n+import org.apache.hadoop.hdds.utils.db.DBStore;\n+\n+import org.apache.commons.compress.archivers.ArchiveEntry;\n+import org.apache.commons.compress.archivers.ArchiveOutputStream;\n+import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;\n+import org.apache.commons.compress.compressors.CompressorException;\n+import org.apache.commons.compress.compressors.CompressorOutputStream;\n+import org.apache.commons.compress.compressors.CompressorStreamFactory;\n+import org.apache.commons.compress.utils.IOUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import static org.apache.hadoop.ozone.OzoneConsts.OZONE_DB_CHECKPOINT_REQUEST_FLUSH;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Provides the current checkpoint Snapshot of the OM/SCM DB. (tar.gz)\n+ */\n+public class DBCheckpointServlet extends HttpServlet {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(DBCheckpointServlet.class);\n+  private static final long serialVersionUID = 1L;\n+\n+  private transient DBStore dbStore;\n+  private transient DBCheckpointMetrics dbMetrics;\n+\n+  public void initialize(DBStore store, DBCheckpointMetrics metrics)\n+      throws ServletException {\n+\n+    dbStore = store;\n+    dbMetrics = metrics;\n+    if (dbStore == null) {\n+      LOG.error(\n+          \"Unable to set metadata snapshot request. DB Store is null\");\n+    }\n+  }\n+\n+  /**\n+   * Process a GET request for the DB checkpoint snapshot.\n+   *\n+   * @param request  The servlet request we are processing\n+   * @param response The servlet response we are creating\n+   */\n+  @Override\n+  public void doGet(HttpServletRequest request, HttpServletResponse response) {\n+\n+    LOG.info(\"Received request to obtain DB checkpoint snapshot\");\n+    if (dbStore == null) {\n+      LOG.error(\n+          \"Unable to process metadata snapshot request. DB Store is null\");\n+      response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n+      return;\n+    }\n+\n+    DBCheckpoint checkpoint = null;\n+    try {\n+\n+      boolean flush = false;\n+      String flushParam =\n+          request.getParameter(OZONE_DB_CHECKPOINT_REQUEST_FLUSH);\n+      if (StringUtils.isNotEmpty(flushParam)) {\n+        flush = Boolean.valueOf(flushParam);\n+      }\n+\n+      checkpoint = dbStore.getCheckpoint(flush);\n+      if (checkpoint == null || checkpoint.getCheckpointLocation() == null) {\n+        LOG.error(\"Unable to process metadata snapshot request. \" +\n+            \"Checkpoint request returned null.\");\n+        response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n+        return;\n+      }\n+      dbMetrics.setLastCheckpointCreationTimeTaken(\n+          checkpoint.checkpointCreationTimeTaken());\n+\n+      Path file = checkpoint.getCheckpointLocation().getFileName();\n+      if (file == null) {\n+        return;\n+      }\n+      response.setContentType(\"application/x-tgz\");\n+      response.setHeader(\"Content-Disposition\",\n+          \"attachment; filename=\\\"\" +\n+               file.toString() + \".tgz\\\"\");\n+\n+      Instant start = Instant.now();\n+      writeOmDBCheckpointToStream(checkpoint,\n+          response.getOutputStream());\n+      Instant end = Instant.now();\n+\n+      long duration = Duration.between(start, end).toMillis();\n+      LOG.info(\"Time taken to write the checkpoint to response output \" +\n+          \"stream: {} milliseconds\", duration);\n+      dbMetrics.setLastCheckpointStreamingTimeTaken(duration);\n+      dbMetrics.incNumCheckpoints();\n+    } catch (Exception e) {\n+      LOG.error(\n+          \"Unable to process metadata snapshot request. \", e);\n+      response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n+      dbMetrics.incNumCheckpointFails();\n+    } finally {\n+      if (checkpoint != null) {\n+        try {\n+          checkpoint.cleanupCheckpoint();\n+        } catch (IOException e) {\n+          LOG.error(\"Error trying to clean checkpoint at {} .\",\n+              checkpoint.getCheckpointLocation().toString());\n+        }\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Write DB Checkpoint to an output stream as a compressed file (tgz).\n+   *\n+   * @param checkpoint  checkpoint file\n+   * @param destination desination output stream.\n+   * @throws IOException\n+   */\n+  public static void writeOmDBCheckpointToStream(DBCheckpoint checkpoint,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "937212a11988918e8a98d1ac750211ac231ced3f"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM2Mzc1Nw==", "bodyText": "nit. move method down (after constructor)", "url": "https://github.com/apache/ozone/pull/1353#discussion_r480363757", "createdAt": "2020-08-31T19:53:47Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OMMetrics.java", "diffHunk": "@@ -137,7 +129,14 @@\n   private @Metric MutableCounterLong numListMultipartUploadFails;\n   private @Metric MutableCounterLong numListMultipartUploads;\n \n+  private DBCheckpointMetrics dbCheckpointMetrics;\n+\n+  public DBCheckpointMetrics getDBCheckpointMetrics() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "937212a11988918e8a98d1ac750211ac231ced3f"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "831127056f4cec0a81c86b966d17dbe95a99835f", "author": {"user": {"login": "prashantpogde", "name": null}}, "url": "https://github.com/apache/ozone/commit/831127056f4cec0a81c86b966d17dbe95a99835f", "committedDate": "2020-09-01T03:29:59Z", "message": "HDDS-4148. Addressing comments."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMDk3Njg4", "url": "https://github.com/apache/ozone/pull/1353#pullrequestreview-480097688", "createdAt": "2020-09-01T20:38:48Z", "commit": {"oid": "831127056f4cec0a81c86b966d17dbe95a99835f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDozODo0OVrOHLHW9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDozODo0OVrOHLHW9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQxNjk0OA==", "bodyText": "There are many overlaps between OMDBCheckpointServlet and OMDBCheckpointServlet. Do we have a followup JIRA to refactor OMDBCheckpointServlet to use OMDBCheckpointServlet?", "url": "https://github.com/apache/ozone/pull/1353#discussion_r481416948", "createdAt": "2020-09-01T20:38:49Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-hdds/framework/src/main/java/org/apache/hadoop/hdds/utils/DBCheckpointServlet.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hdds.utils;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.hadoop.hdds.utils.db.DBCheckpoint;\n+import org.apache.hadoop.hdds.utils.db.DBStore;\n+\n+import org.apache.commons.compress.archivers.ArchiveEntry;\n+import org.apache.commons.compress.archivers.ArchiveOutputStream;\n+import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;\n+import org.apache.commons.compress.compressors.CompressorException;\n+import org.apache.commons.compress.compressors.CompressorOutputStream;\n+import org.apache.commons.compress.compressors.CompressorStreamFactory;\n+import org.apache.commons.compress.utils.IOUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import static org.apache.hadoop.ozone.OzoneConsts.OZONE_DB_CHECKPOINT_REQUEST_FLUSH;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Provides the current checkpoint Snapshot of the OM/SCM DB. (tar.gz)\n+ */\n+public class DBCheckpointServlet extends HttpServlet {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "831127056f4cec0a81c86b966d17dbe95a99835f"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMTAyNTc2", "url": "https://github.com/apache/ozone/pull/1353#pullrequestreview-480102576", "createdAt": "2020-09-01T20:46:20Z", "commit": {"oid": "831127056f4cec0a81c86b966d17dbe95a99835f"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMDIyMDYz", "url": "https://github.com/apache/ozone/pull/1353#pullrequestreview-481022063", "createdAt": "2020-09-02T17:01:23Z", "commit": {"oid": "831127056f4cec0a81c86b966d17dbe95a99835f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNzowMToyM1rOHL4onA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNzowMToyM1rOHL4onA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIyNDI4NA==", "bodyText": "Passing half initialized this to another constructor can cause tricky timing related bugs that are hard to debug at runtime. For example, the metrics are registered on line 368 after line 335.\nBased on the servlet code, we can minimize the dependency with just MetaStore and the DBCheckPointMetrics here, and set/get them into/from the webAppContext.\ninitialize(scm.getScmMetadataStore().getStore(),\n    scm.getMetrics().getDBCheckpointMetrics());", "url": "https://github.com/apache/ozone/pull/1353#discussion_r482224284", "createdAt": "2020-09-02T17:01:23Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/server/StorageContainerManager.java", "diffHunk": "@@ -333,7 +332,7 @@ public StorageContainerManager(OzoneConfiguration conf,\n         eventQueue);\n     blockProtocolServer = new SCMBlockProtocolServer(conf, this);\n     clientProtocolServer = new SCMClientProtocolServer(conf, this);\n-    httpServer = new StorageContainerManagerHttpServer(conf);\n+    httpServer = new StorageContainerManagerHttpServer(conf, this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "831127056f4cec0a81c86b966d17dbe95a99835f"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMDk5MzQ5", "url": "https://github.com/apache/ozone/pull/1353#pullrequestreview-481099349", "createdAt": "2020-09-02T17:55:17Z", "commit": {"oid": "831127056f4cec0a81c86b966d17dbe95a99835f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNzo1NToxN1rOHL6xaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNzo1NToxN1rOHL6xaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI1OTMwNA==", "bodyText": "Can we revert the timeout change?", "url": "https://github.com/apache/ozone/pull/1353#discussion_r482259304", "createdAt": "2020-09-02T17:55:17Z", "author": {"login": "vivekratnavel"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/om/TestOMDbCheckpointServlet.java", "diffHunk": "@@ -62,15 +62,15 @@\n  * Class used for testing the OM DB Checkpoint provider servlet.\n  */\n public class TestOMDbCheckpointServlet {\n-  private MiniOzoneCluster cluster = null;\n-  private OMMetrics omMetrics;\n-  private OzoneConfiguration conf;\n-  private String clusterId;\n-  private String scmId;\n-  private String omId;\n+  private static MiniOzoneCluster cluster = null;\n+  private static OMMetrics omMetrics;\n+  private static OzoneConfiguration conf;\n+  private static String clusterId;\n+  private static String scmId;\n+  private static String omId;\n \n   @Rule\n-  public Timeout timeout = new Timeout(60000);\n+  public Timeout timeout = new Timeout(240000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "831127056f4cec0a81c86b966d17dbe95a99835f"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNDEzNzU5", "url": "https://github.com/apache/ozone/pull/1353#pullrequestreview-521413759", "createdAt": "2020-11-02T08:26:13Z", "commit": {"oid": "831127056f4cec0a81c86b966d17dbe95a99835f"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "feb230fca12bb104190c054b3c32d3abfc719bc0", "author": {"user": {"login": "smengcl", "name": "Siyao Meng"}}, "url": "https://github.com/apache/ozone/commit/feb230fca12bb104190c054b3c32d3abfc719bc0", "committedDate": "2021-02-04T17:47:00Z", "message": "Rebased to latest master branch. OMDBCheckpointServlet and DBCheckpointServlet has non-trivial changes due to conflict with HDDS-4704.\n\nMerge remote-tracking branch 'asf/master' into HDDS-4148\n\nConflicts:\nhadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/server/StorageContainerManager.java\nhadoop-hdds/server-scm/src/test/java/org/apache/hadoop/hdds/scm/TestStorageContainerManagerHttpServer.java\nhadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/om/TestOMDbCheckpointServlet.java\nhadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OMDBCheckpointServlet.java\nhadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OMMetrics.java\n\nChange-Id: Ia1ed82fac4bb4baee8a9694df6e774e05edeb738"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c29e2e2de6790f0beb54363006277b3b03faf01", "author": {"user": {"login": "smengcl", "name": "Siyao Meng"}}, "url": "https://github.com/apache/ozone/commit/1c29e2e2de6790f0beb54363006277b3b03faf01", "committedDate": "2021-02-04T17:51:50Z", "message": "Fix test.\n\nChange-Id: Id72d75231bd23f17957755bef0d5134f7cdee06b"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "435765bcb3c7b7d93ea8e2862c50ffc26e2039af", "author": {"user": {"login": "smengcl", "name": "Siyao Meng"}}, "url": "https://github.com/apache/ozone/commit/435765bcb3c7b7d93ea8e2862c50ffc26e2039af", "committedDate": "2021-02-04T17:53:44Z", "message": "Fix TestOMDbCheckpointServlet.\n\nChange-Id: I268351318cb83f38f0e306bdecda1f9758352e68"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a39003e8b28650558b4bd0e7c7daceb83008b1df", "author": {"user": {"login": "smengcl", "name": "Siyao Meng"}}, "url": "https://github.com/apache/ozone/commit/a39003e8b28650558b4bd0e7c7daceb83008b1df", "committedDate": "2021-02-08T19:40:09Z", "message": "findbugs and checkstyle.\n\nChange-Id: Ib68a94ae3cd986ff1aeed89545e819da01171bb7"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0cdc650da8c48449feec785d3eabc0dd1dff2946", "author": {"user": {"login": "smengcl", "name": "Siyao Meng"}}, "url": "https://github.com/apache/ozone/commit/0cdc650da8c48449feec785d3eabc0dd1dff2946", "committedDate": "2021-02-10T17:29:47Z", "message": "checkstyle.\n\nChange-Id: I147bb3dbdae31d4e55f29bb34cf07339ace7f081"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a67f3ebcbf2e5f95bfda27ce428058a2de599520", "author": {"user": {"login": "smengcl", "name": "Siyao Meng"}}, "url": "https://github.com/apache/ozone/commit/a67f3ebcbf2e5f95bfda27ce428058a2de599520", "committedDate": "2021-02-19T08:43:03Z", "message": "Cleanup license header.\n\nChange-Id: I2cd82433be29350c0f0c0e7a03e396b1c031fdca"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a575935d52502339e821638a7dff8518f6f988d", "author": {"user": {"login": "smengcl", "name": "Siyao Meng"}}, "url": "https://github.com/apache/ozone/commit/7a575935d52502339e821638a7dff8518f6f988d", "committedDate": "2021-02-19T08:43:22Z", "message": "Remove unused config key.\n\nChange-Id: I09ae614e6e27f54d0aab6e34750c26fbd8007b35"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1544654a77116b26bb9cd84ea87c24a1850fac0a", "author": {"user": {"login": "smengcl", "name": "Siyao Meng"}}, "url": "https://github.com/apache/ozone/commit/1544654a77116b26bb9cd84ea87c24a1850fac0a", "committedDate": "2021-02-19T09:30:01Z", "message": "Move SCM httpServer init out of SCM constructor into start() to avoid potential race.\n\nChange-Id: Iecc02758cef4694c399d914c34d216a70ef2d000"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "708f3117c45fcbc3081e0eda967952dcd3f970ba", "author": {"user": {"login": "smengcl", "name": "Siyao Meng"}}, "url": "https://github.com/apache/ozone/commit/708f3117c45fcbc3081e0eda967952dcd3f970ba", "committedDate": "2021-02-19T10:12:16Z", "message": "Revert \"Remove unused config key.\"\n\nThis reverts commit 7a575935d52502339e821638a7dff8518f6f988d.\n\nChange-Id: I403a8654b66941f30925f8fd6421e469671a781a"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "815d373bcd52c83ad39efd7afa6e4a1e7e5be338", "author": {"user": {"login": "smengcl", "name": "Siyao Meng"}}, "url": "https://github.com/apache/ozone/commit/815d373bcd52c83ad39efd7afa6e4a1e7e5be338", "committedDate": "2021-02-19T11:47:42Z", "message": "Recheck\n\nChange-Id: Iaf157113900b40be79adc04a4eb096086b98307f"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7adb50040ab08cf7a8532e8ff34556d96161181", "author": {"user": {"login": "smengcl", "name": "Siyao Meng"}}, "url": "https://github.com/apache/ozone/commit/c7adb50040ab08cf7a8532e8ff34556d96161181", "committedDate": "2021-02-19T23:21:01Z", "message": "Recheck\n\nChange-Id: I4009e1e58ab083a71cef733eadec7b1f456da6cf"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47f5d2e6e1e32c15d2647143f9a625153071b6a0", "author": {"user": {"login": "smengcl", "name": "Siyao Meng"}}, "url": "https://github.com/apache/ozone/commit/47f5d2e6e1e32c15d2647143f9a625153071b6a0", "committedDate": "2021-02-20T06:52:48Z", "message": "Recheck\n\nChange-Id: Ic26e7b5c1e34d673af7d4e8edad800c4f3eb0add"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2775, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}