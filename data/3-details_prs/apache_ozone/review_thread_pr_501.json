{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4MzI5ODE0", "number": 501, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwNzowNDowMlrODcJnvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMzoyMjozNFrODdKcPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODQ0MzQ4OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMDirectoryCreateRequest.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwNzowNDowMlrOFkC4KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjo0MToxN1rOFn4RlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM0MDIwMA==", "bodyText": "Is this the expected behavior, as the original code has returned normal OMResponse.", "url": "https://github.com/apache/ozone/pull/501#discussion_r373340200", "createdAt": "2020-01-31T07:04:02Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMDirectoryCreateRequest.java", "diffHunk": "@@ -126,16 +143,17 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n     boolean acquiredLock = false;\n     IOException exception = null;\n     OMClientResponse omClientResponse = null;\n+    Result result = null;\n     try {\n       // check Acl\n       checkKeyAcls(ozoneManager, volumeName, bucketName, keyName,\n           IAccessAuthorizer.ACLType.CREATE, OzoneObj.ResourceType.KEY);\n \n       // Check if this is the root of the filesystem.\n       if (keyName.length() == 0) {\n-        return new OMDirectoryCreateResponse(null,\n-            omResponse.setCreateDirectoryResponse(\n-                CreateDirectoryResponse.newBuilder()).build());\n+        throw new OMException(\"Directory create failed. Cannot create \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83c18d1346863a3dfd822dd4154bc1137ef8a345"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYwMjg5MA==", "bodyText": "I thought the previous response was wrong. We should return the correct error code, right?", "url": "https://github.com/apache/ozone/pull/501#discussion_r373602890", "createdAt": "2020-01-31T17:46:06Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMDirectoryCreateRequest.java", "diffHunk": "@@ -126,16 +143,17 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n     boolean acquiredLock = false;\n     IOException exception = null;\n     OMClientResponse omClientResponse = null;\n+    Result result = null;\n     try {\n       // check Acl\n       checkKeyAcls(ozoneManager, volumeName, bucketName, keyName,\n           IAccessAuthorizer.ACLType.CREATE, OzoneObj.ResourceType.KEY);\n \n       // Check if this is the root of the filesystem.\n       if (keyName.length() == 0) {\n-        return new OMDirectoryCreateResponse(null,\n-            omResponse.setCreateDirectoryResponse(\n-                CreateDirectoryResponse.newBuilder()).build());\n+        throw new OMException(\"Directory create failed. Cannot create \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM0MDIwMA=="}, "originalCommit": {"oid": "83c18d1346863a3dfd822dd4154bc1137ef8a345"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI1OTI0OA==", "bodyText": "Yeah the change seems correct to me. @bharatviswa504 what do you think?", "url": "https://github.com/apache/ozone/pull/501#discussion_r374259248", "createdAt": "2020-02-03T18:16:20Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMDirectoryCreateRequest.java", "diffHunk": "@@ -126,16 +143,17 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n     boolean acquiredLock = false;\n     IOException exception = null;\n     OMClientResponse omClientResponse = null;\n+    Result result = null;\n     try {\n       // check Acl\n       checkKeyAcls(ozoneManager, volumeName, bucketName, keyName,\n           IAccessAuthorizer.ACLType.CREATE, OzoneObj.ResourceType.KEY);\n \n       // Check if this is the root of the filesystem.\n       if (keyName.length() == 0) {\n-        return new OMDirectoryCreateResponse(null,\n-            omResponse.setCreateDirectoryResponse(\n-                CreateDirectoryResponse.newBuilder()).build());\n+        throw new OMException(\"Directory create failed. Cannot create \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM0MDIwMA=="}, "originalCommit": {"oid": "83c18d1346863a3dfd822dd4154bc1137ef8a345"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMxMDY0Mg==", "bodyText": "Looks like hdfs does the same\nTried on a HDFS cluster.\n[root@ozone-test-bh-2 ~]# hdfs dfs -mkdir hdfs://ozone-test-bh-6.vpc.cloudera.com:8020\nmkdir: Call From ozone-test-bh-2.vpc.cloudera.com/10.65.51.138 to ozone-test-bh-6.vpc.cloudera.com:8020 failed on connection exception: java.net.ConnectException: Connection refused; For more details see:  http://wiki.apache.org/hadoop/ConnectionRefused\n[root@ozone-test-bh-2 ~]# hdfs dfs -mkdir hdfs://ozone-test-bh-2.vpc.cloudera.com:8020\nmkdir: Item: hdfs://ozone-test-bh-2.vpc.cloudera.com:8020 parent's path is null. This can happen if mkdir is called on root, so there's no parent.': No such file or directory [root@ozone-test-bh-2 ~]# hdfs dfs -mkdir hdfs://ozone-test-bh-2.vpc.cloudera.com:8020/ mkdir: hdfs://ozone-test-bh-2.vpc.cloudera.com:8020/': File exists", "url": "https://github.com/apache/ozone/pull/501#discussion_r374310642", "createdAt": "2020-02-03T20:00:25Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMDirectoryCreateRequest.java", "diffHunk": "@@ -126,16 +143,17 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n     boolean acquiredLock = false;\n     IOException exception = null;\n     OMClientResponse omClientResponse = null;\n+    Result result = null;\n     try {\n       // check Acl\n       checkKeyAcls(ozoneManager, volumeName, bucketName, keyName,\n           IAccessAuthorizer.ACLType.CREATE, OzoneObj.ResourceType.KEY);\n \n       // Check if this is the root of the filesystem.\n       if (keyName.length() == 0) {\n-        return new OMDirectoryCreateResponse(null,\n-            omResponse.setCreateDirectoryResponse(\n-                CreateDirectoryResponse.newBuilder()).build());\n+        throw new OMException(\"Directory create failed. Cannot create \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM0MDIwMA=="}, "originalCommit": {"oid": "83c18d1346863a3dfd822dd4154bc1137ef8a345"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2MDc4OQ==", "bodyText": "This change breaks Contract tests too.\nSo instead of throwing an exception, I am returning a Result code. Currently, the createDirectory client API returns a void. And added a TODO to return a boolean instead and then we can pass false when directory already exists.", "url": "https://github.com/apache/ozone/pull/501#discussion_r377360789", "createdAt": "2020-02-10T22:41:17Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMDirectoryCreateRequest.java", "diffHunk": "@@ -126,16 +143,17 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n     boolean acquiredLock = false;\n     IOException exception = null;\n     OMClientResponse omClientResponse = null;\n+    Result result = null;\n     try {\n       // check Acl\n       checkKeyAcls(ozoneManager, volumeName, bucketName, keyName,\n           IAccessAuthorizer.ACLType.CREATE, OzoneObj.ResourceType.KEY);\n \n       // Check if this is the root of the filesystem.\n       if (keyName.length() == 0) {\n-        return new OMDirectoryCreateResponse(null,\n-            omResponse.setCreateDirectoryResponse(\n-                CreateDirectoryResponse.newBuilder()).build());\n+        throw new OMException(\"Directory create failed. Cannot create \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM0MDIwMA=="}, "originalCommit": {"oid": "83c18d1346863a3dfd822dd4154bc1137ef8a345"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTAxNjYwOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMDirectoryCreateRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMzowMjoxNVrOFlmjVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMzowMjoxNVrOFlmjVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk3MzI3MA==", "bodyText": "Minor NIT:\nwe can set result = Result.Failure in the beginning, in that way we don't need if check.", "url": "https://github.com/apache/ozone/pull/501#discussion_r374973270", "createdAt": "2020-02-04T23:02:15Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMDirectoryCreateRequest.java", "diffHunk": "@@ -160,52 +178,86 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       } else if (omDirectoryResult == DIRECTORY_EXISTS_IN_GIVENPATH ||\n           omDirectoryResult == NONE) {\n         dirKeyInfo = createDirectoryKeyInfo(ozoneManager, omBucketInfo,\n-            volumeName, bucketName, keyName, keyArgs, transactionLogIndex);\n+            volumeName, bucketName, keyName, keyArgs, trxnLogIndex);\n \n         omMetadataManager.getKeyTable().addCacheEntry(\n             new CacheKey<>(omMetadataManager.getOzoneKey(volumeName, bucketName,\n                 dirKeyInfo.getKeyName())),\n-            new CacheValue<>(Optional.of(dirKeyInfo), transactionLogIndex));\n+            new CacheValue<>(Optional.of(dirKeyInfo), trxnLogIndex));\n+\n+        omClientResponse = new OMDirectoryCreateResponse(omResponse.build(),\n+            dirKeyInfo);\n+      } else {\n+        // omDirectoryResult == DIRECTORY_EXITS\n+        // Check if this is a replay of ratis logs\n+        String dirKey = omMetadataManager.getOzoneDirKey(volumeName,\n+            bucketName, keyName);\n+        OmKeyInfo dbKeyInfo = omMetadataManager.getKeyTable().get(dirKey);\n+        if (isReplay(ozoneManager, dbKeyInfo.getUpdateID(), trxnLogIndex)) {\n+          throw new OMReplayException();\n+        } else {\n+          result = Result.DIRECTORY_ALREADY_EXISTS;\n+          throw new OMException(\"Directory \" + dirKey + \"already exists in \" +\n+              \"volume/bucket: \" + volumeName + \"/\" + bucketName,\n+              DIRECTORY_ALREADY_EXISTS);\n+        }\n       }\n-      // if directory already exists do nothing or do we need to throw\n-      // exception? Current KeyManagerImpl code does just return, following\n-      // similar approach.\n-\n-      omResponse.setCreateDirectoryResponse(\n-          CreateDirectoryResponse.newBuilder());\n-      omClientResponse = new OMDirectoryCreateResponse(dirKeyInfo,\n-          omResponse.build());\n \n+      result = Result.SUCCESS;\n     } catch (IOException ex) {\n-      exception = ex;\n-      omClientResponse = new OMDirectoryCreateResponse(null,\n-          createErrorOMResponse(omResponse, exception));\n+      if (ex instanceof OMReplayException) {\n+        result = Result.REPLAY;\n+        omClientResponse = new OMDirectoryCreateResponse(\n+            createReplayOMResponse(omResponse));\n+      } else {\n+        if (result == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83c18d1346863a3dfd822dd4154bc1137ef8a345"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTAxODE0OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMDirectoryCreateRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMzowMjo1NVrOFlmkVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMzowMjo1NVrOFlmkVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk3MzUyNw==", "bodyText": "Minor:\nisDebugEnabled check.", "url": "https://github.com/apache/ozone/pull/501#discussion_r374973527", "createdAt": "2020-02-04T23:02:55Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMDirectoryCreateRequest.java", "diffHunk": "@@ -160,52 +178,86 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       } else if (omDirectoryResult == DIRECTORY_EXISTS_IN_GIVENPATH ||\n           omDirectoryResult == NONE) {\n         dirKeyInfo = createDirectoryKeyInfo(ozoneManager, omBucketInfo,\n-            volumeName, bucketName, keyName, keyArgs, transactionLogIndex);\n+            volumeName, bucketName, keyName, keyArgs, trxnLogIndex);\n \n         omMetadataManager.getKeyTable().addCacheEntry(\n             new CacheKey<>(omMetadataManager.getOzoneKey(volumeName, bucketName,\n                 dirKeyInfo.getKeyName())),\n-            new CacheValue<>(Optional.of(dirKeyInfo), transactionLogIndex));\n+            new CacheValue<>(Optional.of(dirKeyInfo), trxnLogIndex));\n+\n+        omClientResponse = new OMDirectoryCreateResponse(omResponse.build(),\n+            dirKeyInfo);\n+      } else {\n+        // omDirectoryResult == DIRECTORY_EXITS\n+        // Check if this is a replay of ratis logs\n+        String dirKey = omMetadataManager.getOzoneDirKey(volumeName,\n+            bucketName, keyName);\n+        OmKeyInfo dbKeyInfo = omMetadataManager.getKeyTable().get(dirKey);\n+        if (isReplay(ozoneManager, dbKeyInfo.getUpdateID(), trxnLogIndex)) {\n+          throw new OMReplayException();\n+        } else {\n+          result = Result.DIRECTORY_ALREADY_EXISTS;\n+          throw new OMException(\"Directory \" + dirKey + \"already exists in \" +\n+              \"volume/bucket: \" + volumeName + \"/\" + bucketName,\n+              DIRECTORY_ALREADY_EXISTS);\n+        }\n       }\n-      // if directory already exists do nothing or do we need to throw\n-      // exception? Current KeyManagerImpl code does just return, following\n-      // similar approach.\n-\n-      omResponse.setCreateDirectoryResponse(\n-          CreateDirectoryResponse.newBuilder());\n-      omClientResponse = new OMDirectoryCreateResponse(dirKeyInfo,\n-          omResponse.build());\n \n+      result = Result.SUCCESS;\n     } catch (IOException ex) {\n-      exception = ex;\n-      omClientResponse = new OMDirectoryCreateResponse(null,\n-          createErrorOMResponse(omResponse, exception));\n+      if (ex instanceof OMReplayException) {\n+        result = Result.REPLAY;\n+        omClientResponse = new OMDirectoryCreateResponse(\n+            createReplayOMResponse(omResponse));\n+      } else {\n+        if (result == null) {\n+          result = Result.FAILURE;\n+        }\n+        exception = ex;\n+        omClientResponse = new OMDirectoryCreateResponse(\n+            createErrorOMResponse(omResponse, exception));\n+      }\n     } finally {\n       if (omClientResponse != null) {\n         omClientResponse.setFlushFuture(\n-            ozoneManagerDoubleBufferHelper.add(omClientResponse,\n-                transactionLogIndex));\n+            omDoubleBufferHelper.add(omClientResponse,\n+                trxnLogIndex));\n       }\n       if (acquiredLock) {\n         omMetadataManager.getLock().releaseWriteLock(BUCKET_LOCK, volumeName,\n             bucketName);\n       }\n     }\n \n-    auditLog(auditLogger, buildAuditMessage(OMAction.CREATE_DIRECTORY,\n-        auditMap, exception, userInfo));\n+    if (result != Result.REPLAY) {\n+      auditLog(auditLogger, buildAuditMessage(OMAction.CREATE_DIRECTORY,\n+          auditMap, exception, userInfo));\n+    }\n \n-    if (exception == null) {\n-      LOG.debug(\"Directory is successfully created for Key: {} in \" +\n-              \"volume/bucket:{}/{}\", keyName, volumeName, bucketName);\n+    switch (result) {\n+    case SUCCESS:\n       omMetrics.incNumKeys();\n-      return omClientResponse;\n-    } else {\n-      LOG.error(\"CreateDirectory failed for Key: {} in volume/bucket:{}/{}\",\n-          keyName, volumeName, bucketName, exception);\n-      omMetrics.incNumCreateDirectoryFails();\n-      return omClientResponse;\n+      LOG.debug(\"Directory created. Volume:{}, Bucket:{}, Key:{}\", volumeName,\n+          bucketName, keyName);\n+      break;\n+    case REPLAY:\n+      LOG.debug(\"Replayed Transaction {} ignored. Request: {}\", trxnLogIndex,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83c18d1346863a3dfd822dd4154bc1137ef8a345"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTA2MzY0OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMDirectoryCreateRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMzoyMjozNFrOFlnANg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMzoyMjozNFrOFlnANg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4MDY2Mg==", "bodyText": "omMetrics.incNumCreateDirectoryFails(); this is missing.", "url": "https://github.com/apache/ozone/pull/501#discussion_r374980662", "createdAt": "2020-02-04T23:22:34Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMDirectoryCreateRequest.java", "diffHunk": "@@ -160,52 +178,86 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       } else if (omDirectoryResult == DIRECTORY_EXISTS_IN_GIVENPATH ||\n           omDirectoryResult == NONE) {\n         dirKeyInfo = createDirectoryKeyInfo(ozoneManager, omBucketInfo,\n-            volumeName, bucketName, keyName, keyArgs, transactionLogIndex);\n+            volumeName, bucketName, keyName, keyArgs, trxnLogIndex);\n \n         omMetadataManager.getKeyTable().addCacheEntry(\n             new CacheKey<>(omMetadataManager.getOzoneKey(volumeName, bucketName,\n                 dirKeyInfo.getKeyName())),\n-            new CacheValue<>(Optional.of(dirKeyInfo), transactionLogIndex));\n+            new CacheValue<>(Optional.of(dirKeyInfo), trxnLogIndex));\n+\n+        omClientResponse = new OMDirectoryCreateResponse(omResponse.build(),\n+            dirKeyInfo);\n+      } else {\n+        // omDirectoryResult == DIRECTORY_EXITS\n+        // Check if this is a replay of ratis logs\n+        String dirKey = omMetadataManager.getOzoneDirKey(volumeName,\n+            bucketName, keyName);\n+        OmKeyInfo dbKeyInfo = omMetadataManager.getKeyTable().get(dirKey);\n+        if (isReplay(ozoneManager, dbKeyInfo.getUpdateID(), trxnLogIndex)) {\n+          throw new OMReplayException();\n+        } else {\n+          result = Result.DIRECTORY_ALREADY_EXISTS;\n+          throw new OMException(\"Directory \" + dirKey + \"already exists in \" +\n+              \"volume/bucket: \" + volumeName + \"/\" + bucketName,\n+              DIRECTORY_ALREADY_EXISTS);\n+        }\n       }\n-      // if directory already exists do nothing or do we need to throw\n-      // exception? Current KeyManagerImpl code does just return, following\n-      // similar approach.\n-\n-      omResponse.setCreateDirectoryResponse(\n-          CreateDirectoryResponse.newBuilder());\n-      omClientResponse = new OMDirectoryCreateResponse(dirKeyInfo,\n-          omResponse.build());\n \n+      result = Result.SUCCESS;\n     } catch (IOException ex) {\n-      exception = ex;\n-      omClientResponse = new OMDirectoryCreateResponse(null,\n-          createErrorOMResponse(omResponse, exception));\n+      if (ex instanceof OMReplayException) {\n+        result = Result.REPLAY;\n+        omClientResponse = new OMDirectoryCreateResponse(\n+            createReplayOMResponse(omResponse));\n+      } else {\n+        if (result == null) {\n+          result = Result.FAILURE;\n+        }\n+        exception = ex;\n+        omClientResponse = new OMDirectoryCreateResponse(\n+            createErrorOMResponse(omResponse, exception));\n+      }\n     } finally {\n       if (omClientResponse != null) {\n         omClientResponse.setFlushFuture(\n-            ozoneManagerDoubleBufferHelper.add(omClientResponse,\n-                transactionLogIndex));\n+            omDoubleBufferHelper.add(omClientResponse,\n+                trxnLogIndex));\n       }\n       if (acquiredLock) {\n         omMetadataManager.getLock().releaseWriteLock(BUCKET_LOCK, volumeName,\n             bucketName);\n       }\n     }\n \n-    auditLog(auditLogger, buildAuditMessage(OMAction.CREATE_DIRECTORY,\n-        auditMap, exception, userInfo));\n+    if (result != Result.REPLAY) {\n+      auditLog(auditLogger, buildAuditMessage(OMAction.CREATE_DIRECTORY,\n+          auditMap, exception, userInfo));\n+    }\n \n-    if (exception == null) {\n-      LOG.debug(\"Directory is successfully created for Key: {} in \" +\n-              \"volume/bucket:{}/{}\", keyName, volumeName, bucketName);\n+    switch (result) {\n+    case SUCCESS:\n       omMetrics.incNumKeys();\n-      return omClientResponse;\n-    } else {\n-      LOG.error(\"CreateDirectory failed for Key: {} in volume/bucket:{}/{}\",\n-          keyName, volumeName, bucketName, exception);\n-      omMetrics.incNumCreateDirectoryFails();\n-      return omClientResponse;\n+      LOG.debug(\"Directory created. Volume:{}, Bucket:{}, Key:{}\", volumeName,\n+          bucketName, keyName);\n+      break;\n+    case REPLAY:\n+      LOG.debug(\"Replayed Transaction {} ignored. Request: {}\", trxnLogIndex,\n+          createDirectoryRequest);\n+      break;\n+    case DIRECTORY_ALREADY_EXISTS:\n+      LOG.error(\"Directory already exists. Volume:{}, Bucket:{}, Key{}\",\n+          volumeName, bucketName, keyName, exception);\n+      break;\n+    case FAILURE:\n+      LOG.error(\"Directory creation failed. Volume:{}, Bucket:{}, Key{}. \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83c18d1346863a3dfd822dd4154bc1137ef8a345"}, "originalPosition": 187}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 15, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}