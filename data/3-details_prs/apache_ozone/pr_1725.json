{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzMDI4ODUy", "number": 1725, "title": "HDDS-3208. Implement Ratis snapshot on SCM", "bodyText": "What changes were proposed in this pull request?\nDesign doc: https://docs.google.com/document/d/1uy4_ER2V6nNQJ7_5455Wz8NmI142JHPnif6Y1OdPi8E/edit?usp=sharing\nWhat is the link to the Apache JIRA\nhttps://issues.apache.org/jira/browse/HDDS-3208\nHow was this patch tested?\nUT", "createdAt": "2020-12-20T07:15:36Z", "url": "https://github.com/apache/ozone/pull/1725", "merged": true, "mergeCommit": {"oid": "3ff677d9400fe3c033e011a8a3bbc91cfb13684f"}, "closed": true, "closedAt": "2021-01-20T17:54:25Z", "author": {"login": "amaliujia"}, "timelineItems": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdo59aAAFqTU1NzY2NzM2NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdyA-bNAFqTU3MjI4NzYyNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3NjY3MzY0", "url": "https://github.com/apache/ozone/pull/1725#pullrequestreview-557667364", "createdAt": "2020-12-23T06:32:16Z", "commit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNjozMjoxNlrOIKVcmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNzoxNjo1MlrOIKXkhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcwODA1Ng==", "bodyText": "You have to call BaseStateMachine#updateLastAppliedTermIndex() to make BaseStateMachine#getLastAppliedTermIndex () to take effect.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r547708056", "createdAt": "2020-12-23T06:32:16Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMStateMachine.java", "diffHunk": "@@ -89,4 +98,12 @@ private Message process(final SCMRatisRequest request)\n     }\n   }\n \n+  @Override\n+  public long takeSnapshot() throws IOException {\n+    LOG.info(\"Current Snapshot Index {}\", getLastAppliedTermIndex());\n+    TermIndex lastTermIndex = getLastAppliedTermIndex();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcxMTQ3Mg==", "bodyText": "Can we remove the 'else {}' branch ? When we will migrate to batch operations, there will be no other way to do db writes.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r547711472", "createdAt": "2020-12-23T06:36:20Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/container/ContainerStateManagerImpl.java", "diffHunk": "@@ -275,12 +278,24 @@ public void addContainer(final ContainerInfoProto containerInfo)\n \n     if (!containers.contains(containerID)) {\n       ExecutionUtil.create(() -> {\n-        containerStore.put(containerID, container);\n+        if (transactionBuffer != null) {\n+          containerStore.putWithBatch(\n+              transactionBuffer.getCurrentBatchOperation(),\n+              containerID, container);\n+        } else {\n+          containerStore.put(containerID, container);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcxMjU0OQ==", "bodyText": "Good Job!", "url": "https://github.com/apache/ozone/pull/1725#discussion_r547712549", "createdAt": "2020-12-23T06:37:38Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMDBTransactionBuffer.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p/>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p/>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import org.apache.hadoop.hdds.scm.metadata.SCMMetadataStore;\n+import org.apache.hadoop.hdds.utils.db.BatchOperation;\n+import org.apache.hadoop.hdds.utils.db.Table;\n+\n+import java.io.IOException;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.TRANSACTION_INFO_KEY;\n+\n+public class SCMDBTransactionBuffer {\n+  private final SCMMetadataStore metadataStore;\n+  private BatchOperation currentBatchOperation;\n+  private SCMTransactionInfo latestTrxInfo;\n+\n+  public SCMDBTransactionBuffer(SCMMetadataStore store) {\n+    this.metadataStore = store;\n+\n+    // initialize a batch operation during construction time\n+    currentBatchOperation = this.metadataStore.getStore().initBatchOperation();\n+    latestTrxInfo =\n+        SCMTransactionInfo\n+            .builder()\n+            .setTransactionIndex(-1)\n+            .setCurrentTerm(-1)\n+            .build();\n+  }\n+\n+  public BatchOperation getCurrentBatchOperation() {\n+    return currentBatchOperation;\n+  }\n+\n+  public void updateLatestTrxInfo(SCMTransactionInfo info) {\n+    this.latestTrxInfo = info;\n+  }\n+\n+  public SCMTransactionInfo getLatestTrxInfo() {\n+    return this.latestTrxInfo;\n+  }\n+\n+  public void flush() throws IOException {\n+    // write latest trx info into trx table in the same batch\n+    Table<String, SCMTransactionInfo> transactionInfoTable\n+        = metadataStore.getTransactionInfoTable();\n+    transactionInfoTable.putWithBatch(currentBatchOperation,\n+        TRANSACTION_INFO_KEY, latestTrxInfo);\n+\n+    metadataStore.getStore().commitBatchOperation(currentBatchOperation);\n+    currentBatchOperation.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcxMzkzNg==", "bodyText": "Better calculate the time cost during takeSnapshot().", "url": "https://github.com/apache/ozone/pull/1725#discussion_r547713936", "createdAt": "2020-12-23T06:39:30Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMStateMachine.java", "diffHunk": "@@ -89,4 +98,12 @@ private Message process(final SCMRatisRequest request)\n     }\n   }\n \n+  @Override\n+  public long takeSnapshot() throws IOException {\n+    LOG.info(\"Current Snapshot Index {}\", getLastAppliedTermIndex());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcxODUxNw==", "bodyText": "Will it be better to put SCMTransactionInfo near OMTransactionInfo, under interface-storage ?\n\n\nCan we reuse the OMTransactionInfo? For example, rename OMTransactionInfo to TransactionInfo, and use them in both OM and SCM ?", "url": "https://github.com/apache/ozone/pull/1725#discussion_r547718517", "createdAt": "2020-12-23T06:45:24Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMTransactionInfo.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * <p>http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * <p>Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.hadoop.hdds.StringUtils;\n+\n+import java.util.Objects;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.TRANSACTION_INFO_SPLIT_KEY;\n+\n+final public class SCMTransactionInfo {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzczNTg0MQ==", "bodyText": "Could we avoid using this Ctor ? We may need to change the related test cases.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r547735841", "createdAt": "2020-12-23T07:07:09Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/container/ContainerManagerImpl.java", "diffHunk": "@@ -101,6 +102,16 @@ public ContainerManagerImpl(\n       final PipelineManager pipelineManager,\n       final Table<ContainerID, ContainerInfo> containerStore)\n       throws IOException {\n+    this(conf, scmHaManager, pipelineManager, containerStore, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzczNjQyOA==", "bodyText": "Ditto,  could we reuse OMTransactionInfoCodec ?", "url": "https://github.com/apache/ozone/pull/1725#discussion_r547736428", "createdAt": "2020-12-23T07:08:00Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/metadata/SCMTransactionInfoCodec.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.\u2002\u2002See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.\u2002\u2002The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ *  with the License.\u2002\u2002You may obtain a copy of the License at\n+ *\n+ * \u2002\u2002\u2002\u2002 http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hdds.scm.metadata;\n+\n+import org.apache.hadoop.hdds.scm.ha.SCMTransactionInfo;\n+import org.apache.hadoop.hdds.utils.db.Codec;\n+\n+import java.io.IOException;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+public class SCMTransactionInfoCodec implements Codec<SCMTransactionInfo> {\n+\n+  @Override\n+  public byte[] toPersistedFormat(SCMTransactionInfo object)\n+      throws IOException {\n+    checkNotNull(object, \"Null object can't be converted to byte array.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzczNjc4Mg==", "bodyText": "Ditto, may we remove this Ctor ?", "url": "https://github.com/apache/ozone/pull/1725#discussion_r547736782", "createdAt": "2020-12-23T07:08:26Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelineManagerV2Impl.java", "diffHunk": "@@ -114,11 +115,21 @@ public static PipelineManagerV2Impl newPipelineManager(\n       ConfigurationSource conf, SCMHAManager scmhaManager,\n       NodeManager nodeManager, Table<PipelineID, Pipeline> pipelineStore,\n       EventPublisher eventPublisher) throws IOException {\n+    return newPipelineManager(conf, scmhaManager, nodeManager, pipelineStore,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc0Mjg1Mg==", "bodyText": ".setCurrentTerm(0). The first leader will be elected from term 1.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r547742852", "createdAt": "2020-12-23T07:16:52Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMDBTransactionBuffer.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p/>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p/>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import org.apache.hadoop.hdds.scm.metadata.SCMMetadataStore;\n+import org.apache.hadoop.hdds.utils.db.BatchOperation;\n+import org.apache.hadoop.hdds.utils.db.Table;\n+\n+import java.io.IOException;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.TRANSACTION_INFO_KEY;\n+\n+public class SCMDBTransactionBuffer {\n+  private final SCMMetadataStore metadataStore;\n+  private BatchOperation currentBatchOperation;\n+  private SCMTransactionInfo latestTrxInfo;\n+\n+  public SCMDBTransactionBuffer(SCMMetadataStore store) {\n+    this.metadataStore = store;\n+\n+    // initialize a batch operation during construction time\n+    currentBatchOperation = this.metadataStore.getStore().initBatchOperation();\n+    latestTrxInfo =\n+        SCMTransactionInfo\n+            .builder()\n+            .setTransactionIndex(-1)\n+            .setCurrentTerm(-1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5NzYzMDAx", "url": "https://github.com/apache/ozone/pull/1725#pullrequestreview-559763001", "createdAt": "2020-12-30T02:41:15Z", "commit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjo0MToxNVrOIMcPIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjo0MToxNVrOIMcPIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxNjQ0OQ==", "bodyText": "Shall we add some checks here to guarantee new info is greater than current lastTrxInfo?", "url": "https://github.com/apache/ozone/pull/1725#discussion_r549916449", "createdAt": "2020-12-30T02:41:15Z", "author": {"login": "ChenSammi"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMDBTransactionBuffer.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p/>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p/>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import org.apache.hadoop.hdds.scm.metadata.SCMMetadataStore;\n+import org.apache.hadoop.hdds.utils.db.BatchOperation;\n+import org.apache.hadoop.hdds.utils.db.Table;\n+\n+import java.io.IOException;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.TRANSACTION_INFO_KEY;\n+\n+public class SCMDBTransactionBuffer {\n+  private final SCMMetadataStore metadataStore;\n+  private BatchOperation currentBatchOperation;\n+  private SCMTransactionInfo latestTrxInfo;\n+\n+  public SCMDBTransactionBuffer(SCMMetadataStore store) {\n+    this.metadataStore = store;\n+\n+    // initialize a batch operation during construction time\n+    currentBatchOperation = this.metadataStore.getStore().initBatchOperation();\n+    latestTrxInfo =\n+        SCMTransactionInfo\n+            .builder()\n+            .setTransactionIndex(-1)\n+            .setCurrentTerm(-1)\n+            .build();\n+  }\n+\n+  public BatchOperation getCurrentBatchOperation() {\n+    return currentBatchOperation;\n+  }\n+\n+  public void updateLatestTrxInfo(SCMTransactionInfo info) {\n+    this.latestTrxInfo = info;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5NzcyMzI5", "url": "https://github.com/apache/ozone/pull/1725#pullrequestreview-559772329", "createdAt": "2020-12-30T03:56:14Z", "commit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMzo1NjoxNFrOIMc4WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMzo1NjoxNFrOIMc4WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkyNzAwMQ==", "bodyText": "Since we add a new table in SCM DB,  we need a JIRA to track how to handle back compatibility during upgrade non HA SCM to HA SCM.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r549927001", "createdAt": "2020-12-30T03:56:14Z", "author": {"login": "ChenSammi"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/metadata/SCMDBDefinition.java", "diffHunk": "@@ -93,6 +104,6 @@ public String getLocationConfigKey() {\n   @Override\n   public DBColumnFamilyDefinition[] getColumnFamilies() {\n     return new DBColumnFamilyDefinition[] {DELETED_BLOCKS, VALID_CERTS,\n-        REVOKED_CERTS, PIPELINES, CONTAINERS};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5NzcyNDQ4", "url": "https://github.com/apache/ozone/pull/1725#pullrequestreview-559772448", "createdAt": "2020-12-30T03:57:06Z", "commit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMzo1NzowNlrOIMc5Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMzo1NzowNlrOIMc5Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkyNzE5NA==", "bodyText": "Are we missing some comments here?", "url": "https://github.com/apache/ozone/pull/1725#discussion_r549927194", "createdAt": "2020-12-30T03:57:06Z", "author": {"login": "ChenSammi"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/metadata/SCMMetadataStore.java", "diffHunk": "@@ -110,6 +111,11 @@\n    */\n   Table<PipelineID, Pipeline> getPipelineTable();\n \n+  /**\n+   *\n+   */\n+  Table <String, SCMTransactionInfo> getTransactionInfoTable();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwMDE0ODUw", "url": "https://github.com/apache/ozone/pull/1725#pullrequestreview-560014850", "createdAt": "2020-12-30T11:42:40Z", "commit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMTo0Mjo0MFrOIMrcig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMTo0Mjo0MFrOIMrcig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE2NTY0Mg==", "bodyText": "scmTransactionInfoTable -> scmTransactionInfos", "url": "https://github.com/apache/ozone/pull/1725#discussion_r550165642", "createdAt": "2020-12-30T11:42:40Z", "author": {"login": "ChenSammi"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/metadata/SCMDBDefinition.java", "diffHunk": "@@ -80,6 +82,15 @@\n           ContainerInfo.class,\n           new ContainerInfoCodec());\n \n+  public static final DBColumnFamilyDefinition<String, SCMTransactionInfo>\n+      TRANSACTIONINFO =\n+      new DBColumnFamilyDefinition<>(\n+          \"scmTransactionInfoTable\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwNjQxOTY4", "url": "https://github.com/apache/ozone/pull/1725#pullrequestreview-560641968", "createdAt": "2021-01-02T15:46:32Z", "commit": {"oid": "dfddaedf1a7a22d03e92f79cb52009eee114258c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQxNTo0NjozMlrOINX3sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQxNTo0NjozMlrOINX3sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDg5MzQ4OA==", "bodyText": "Could we document javadoc for this? That will be easier understood by others. At lease, we should document the purpose for this transaction buffer.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r550893488", "createdAt": "2021-01-02T15:46:32Z", "author": {"login": "linyiqun"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMDBTransactionBuffer.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p/>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p/>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import org.apache.hadoop.hdds.scm.metadata.SCMMetadataStore;\n+import org.apache.hadoop.hdds.utils.db.BatchOperation;\n+import org.apache.hadoop.hdds.utils.db.Table;\n+\n+import java.io.IOException;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.TRANSACTION_INFO_KEY;\n+\n+public class SCMDBTransactionBuffer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfddaedf1a7a22d03e92f79cb52009eee114258c"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwNjQyMDUw", "url": "https://github.com/apache/ozone/pull/1725#pullrequestreview-560642050", "createdAt": "2021-01-02T15:48:06Z", "commit": {"oid": "dfddaedf1a7a22d03e92f79cb52009eee114258c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQxNTo0ODowNlrOINX4Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQxNTo0ODowNlrOINX4Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDg5MzYzNA==", "bodyText": "Also would be great to add javadoc for this class.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r550893634", "createdAt": "2021-01-02T15:48:06Z", "author": {"login": "linyiqun"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMTransactionInfo.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * <p>http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * <p>Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.hadoop.hdds.StringUtils;\n+\n+import java.util.Objects;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.TRANSACTION_INFO_SPLIT_KEY;\n+\n+final public class SCMTransactionInfo {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfddaedf1a7a22d03e92f79cb52009eee114258c"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYzNDcyMTg3", "url": "https://github.com/apache/ozone/pull/1725#pullrequestreview-563472187", "createdAt": "2021-01-07T13:11:09Z", "commit": {"oid": "dfddaedf1a7a22d03e92f79cb52009eee114258c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMzoxMTowOVrOIPr1ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMzoxMTowOVrOIPr1ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMxNzczMw==", "bodyText": "Maybe flush should return SCMTransactionInfo, and this return SCMTransactionInfo#transactionIndex ?", "url": "https://github.com/apache/ozone/pull/1725#discussion_r553317733", "createdAt": "2021-01-07T13:11:09Z", "author": {"login": "runzhiwang"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMStateMachine.java", "diffHunk": "@@ -89,4 +99,15 @@ private Message process(final SCMRatisRequest request)\n     }\n   }\n \n+  @Override\n+  public long takeSnapshot() throws IOException {\n+    LOG.info(\"Current Snapshot Index {}\", getLastAppliedTermIndex());\n+    long startTime = Time.monotonicNow();\n+    TermIndex lastTermIndex = getLastAppliedTermIndex();\n+    long lastAppliedIndex = lastTermIndex.getIndex();\n+    transactionBuffer.flush();\n+    LOG.debug(\"SCM takeSnapshot: {} took {} ms\",\n+        Time.monotonicNow() - startTime);\n+    return lastAppliedIndex;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfddaedf1a7a22d03e92f79cb52009eee114258c"}, "originalPosition": 70}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYzNDczNTI0", "url": "https://github.com/apache/ozone/pull/1725#pullrequestreview-563473524", "createdAt": "2021-01-07T13:13:17Z", "commit": {"oid": "dfddaedf1a7a22d03e92f79cb52009eee114258c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMzoxMzoxN1rOIPr5TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMzoxMzoxN1rOIPr5TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMxODczMg==", "bodyText": "Expose currentBatchOperation has a risk, if someone commit this batch operation not by calling flush(), then applyIndex did not wrote into RocksDB.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r553318732", "createdAt": "2021-01-07T13:13:17Z", "author": {"login": "runzhiwang"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMDBTransactionBuffer.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p/>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p/>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import org.apache.hadoop.hdds.scm.metadata.SCMMetadataStore;\n+import org.apache.hadoop.hdds.utils.db.BatchOperation;\n+import org.apache.hadoop.hdds.utils.db.Table;\n+\n+import java.io.IOException;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.TRANSACTION_INFO_KEY;\n+\n+public class SCMDBTransactionBuffer {\n+  private final SCMMetadataStore metadataStore;\n+  private BatchOperation currentBatchOperation;\n+  private SCMTransactionInfo latestTrxInfo;\n+\n+  public SCMDBTransactionBuffer(SCMMetadataStore store) {\n+    this.metadataStore = store;\n+\n+    // initialize a batch operation during construction time\n+    currentBatchOperation = this.metadataStore.getStore().initBatchOperation();\n+    latestTrxInfo =\n+        SCMTransactionInfo\n+            .builder()\n+            .setTransactionIndex(-1)\n+            .setCurrentTerm(0)\n+            .build();\n+  }\n+\n+  public BatchOperation getCurrentBatchOperation() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfddaedf1a7a22d03e92f79cb52009eee114258c"}, "originalPosition": 45}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dfddaedf1a7a22d03e92f79cb52009eee114258c", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/ozone/commit/dfddaedf1a7a22d03e92f79cb52009eee114258c", "committedDate": "2020-12-31T06:13:48Z", "message": "fixup! address comments"}, "afterCommit": {"oid": "1e0787a321afcbc6880696babc36c4941f5c0339", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/ozone/commit/1e0787a321afcbc6880696babc36c4941f5c0339", "committedDate": "2021-01-07T19:41:02Z", "message": "HDDS-3208. Implement Ratis Snapshots on SCM"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY0ODI5MjYw", "url": "https://github.com/apache/ozone/pull/1725#pullrequestreview-564829260", "createdAt": "2021-01-10T05:02:07Z", "commit": {"oid": "22b07be1da6560d929c7cdeda374db4db5f61680"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMFQwNTowMzoxN1rOIQ0tsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMFQwNTowMzoxN1rOIQ0tsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDUxMTc5NQ==", "bodyText": "I don't see this method is used in this PR. Will this be used in follow-up task? If not we could remove this and remove volatile keyword for term/snapshotIndex as well. Because I didn't find the concurrent update for this two variables.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r554511795", "createdAt": "2021-01-10T05:03:17Z", "author": {"login": "linyiqun"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMRatisSnapshotInfo.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * <p>http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * <p>Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import org.apache.ratis.server.protocol.TermIndex;\n+import org.apache.ratis.server.storage.FileInfo;\n+import org.apache.ratis.statemachine.SnapshotInfo;\n+\n+import java.util.List;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.TRANSACTION_INFO_SPLIT_KEY;\n+\n+/**\n+ * This class captures the snapshotIndex and term of the latest snapshot in\n+ * the SCM\n+ * Ratis server loads the snapshotInfo during startup and updates the\n+ * lastApplied index to this snapshotIndex. SCM SnapshotInfo does not contain\n+ * any files. It is used only to store/ update the last applied index and term.\n+ */\n+public class SCMRatisSnapshotInfo implements SnapshotInfo {\n+  private volatile long term;\n+  private volatile long snapshotIndex;\n+\n+  public SCMRatisSnapshotInfo(long term, long index) {\n+    this.term = term;\n+    this.snapshotIndex = index;\n+  }\n+\n+  public void updateTermIndex(long newTerm, long newIndex) {\n+    this.term = newTerm;\n+    this.snapshotIndex = newIndex;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22b07be1da6560d929c7cdeda374db4db5f61680"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY2OTc1MzQ1", "url": "https://github.com/apache/ozone/pull/1725#pullrequestreview-566975345", "createdAt": "2021-01-13T08:11:11Z", "commit": {"oid": "22b07be1da6560d929c7cdeda374db4db5f61680"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwODoxMToxMlrOISjzRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwODoyOToyMlrOISkbJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjMzMTg0NQ==", "bodyText": "Will it be better to call latestSnapshot = latestTrxInfo.toSnapshotInfo(); here, and remove the setLatestSnapshot () method ?\nIf caller always has to call flush() and setLatestSnapshot() together, better to merge them to avoid  human mistake.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r556331845", "createdAt": "2021-01-13T08:11:12Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMDBTransactionBuffer.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p/>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p/>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import org.apache.hadoop.hdds.scm.metadata.SCMMetadataStore;\n+import org.apache.hadoop.hdds.utils.db.BatchOperation;\n+import org.apache.hadoop.hdds.utils.db.Table;\n+import org.apache.ratis.statemachine.SnapshotInfo;\n+\n+import java.io.IOException;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.TRANSACTION_INFO_KEY;\n+\n+/**\n+ * This is a transaction buffer that buffers SCM DB operations for Pipeline and\n+ * Container. When flush this buffer to DB, a transaction info will also be\n+ * written into DB to indicate the term and transaction index for the latest\n+ * operation in DB.\n+ */\n+public class SCMDBTransactionBuffer {\n+  private final SCMMetadataStore metadataStore;\n+  private BatchOperation currentBatchOperation;\n+  private SCMTransactionInfo latestTrxInfo;\n+  private SnapshotInfo latestSnapshot;\n+\n+  public SCMDBTransactionBuffer(SCMMetadataStore store) throws IOException {\n+    this.metadataStore = store;\n+\n+    // initialize a batch operation during construction time\n+    currentBatchOperation = this.metadataStore.getStore().initBatchOperation();\n+    latestTrxInfo = store.getTransactionInfoTable().get(TRANSACTION_INFO_KEY);\n+    if (latestTrxInfo == null) {\n+      // transaction table is empty\n+      latestTrxInfo =\n+          SCMTransactionInfo\n+              .builder()\n+              .setTransactionIndex(-1)\n+              .setCurrentTerm(0)\n+              .build();\n+    }\n+    latestSnapshot = latestTrxInfo.toSnapshotInfo();\n+  }\n+\n+  public BatchOperation getCurrentBatchOperation() {\n+    return currentBatchOperation;\n+  }\n+\n+  public void updateLatestTrxInfo(SCMTransactionInfo info) {\n+    if (info.compareTo(this.latestTrxInfo) <= 0) {\n+      throw new IllegalArgumentException(\n+          \"Updating DB buffer transaction info by an older transaction info, \"\n+          + \"current: \" + this.latestTrxInfo + \", updating to: \" + info);\n+    }\n+    this.latestTrxInfo = info;\n+  }\n+\n+  public SCMTransactionInfo getLatestTrxInfo() {\n+    return this.latestTrxInfo;\n+  }\n+\n+  public SnapshotInfo getLatestSnapshot() {\n+    return latestSnapshot;\n+  }\n+\n+  public void setLatestSnapshot(SnapshotInfo latestSnapshot) {\n+    this.latestSnapshot = latestSnapshot;\n+  }\n+\n+  public void flush() throws IOException {\n+    // write latest trx info into trx table in the same batch\n+    Table<String, SCMTransactionInfo> transactionInfoTable\n+        = metadataStore.getTransactionInfoTable();\n+    transactionInfoTable.putWithBatch(currentBatchOperation,\n+        TRANSACTION_INFO_KEY, latestTrxInfo);\n+\n+    metadataStore.getStore().commitBatchOperation(currentBatchOperation);\n+    currentBatchOperation.close();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22b07be1da6560d929c7cdeda374db4db5f61680"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjMzNDA1Mw==", "bodyText": "How about revert the change to process() and change like this ?\napplyTransactionFuture.complete(process(request));\ntransactionBuffer.updateLatestTrxInfo(SCMTransactionInfo.builder()\n                   .setCurrentTerm(trx.getLogEntry().getTerm())\n                   .setTransactionIndex(trx.getLogEntry().getIndex())\n                   .build()));\n\nthe process() does not needs to know about the trxInfo", "url": "https://github.com/apache/ozone/pull/1725#discussion_r556334053", "createdAt": "2021-01-13T08:15:00Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMStateMachine.java", "diffHunk": "@@ -55,15 +84,25 @@ public void registerHandler(RequestType type, Object handler) {\n     try {\n       final SCMRatisRequest request = SCMRatisRequest.decode(\n           Message.valueOf(trx.getStateMachineLogEntry().getLogData()));\n-      applyTransactionFuture.complete(process(request));\n+      applyTransactionFuture.complete(\n+          process(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22b07be1da6560d929c7cdeda374db4db5f61680"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjMzNjcxNw==", "bodyText": "How about move this shouldUpdate() in to SCMTransactionInfo, as a method isEmpty()? We'd better encapulate  the magic number 0 and -1 into SCMTransactionInfo .", "url": "https://github.com/apache/ozone/pull/1725#discussion_r556336717", "createdAt": "2021-01-13T08:20:00Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMStateMachine.java", "diffHunk": "@@ -55,15 +84,25 @@ public void registerHandler(RequestType type, Object handler) {\n     try {\n       final SCMRatisRequest request = SCMRatisRequest.decode(\n           Message.valueOf(trx.getStateMachineLogEntry().getLogData()));\n-      applyTransactionFuture.complete(process(request));\n+      applyTransactionFuture.complete(\n+          process(\n+              request,\n+              SCMTransactionInfo.builder()\n+                  .setCurrentTerm(trx.getLogEntry().getTerm())\n+                  .setTransactionIndex(trx.getLogEntry().getIndex())\n+                  .build()));\n     } catch (Exception ex) {\n       applyTransactionFuture.completeExceptionally(ex);\n     }\n     return applyTransactionFuture;\n   }\n \n-  private Message process(final SCMRatisRequest request)\n-      throws Exception {\n+  private boolean shouldUpdate(SCMTransactionInfo info) {\n+    return !(info.getTransactionIndex() == -1 && info.getTerm() == 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22b07be1da6560d929c7cdeda374db4db5f61680"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjMzODA2OA==", "bodyText": "Better remove the info in line 133 and replace 156 as\nLOG.info(\"Current Snapshot Index {}, takeSnapshot took {} ms\", \n    getLastAppliedTermIndex(), Time.monotonicNow() - startTime);", "url": "https://github.com/apache/ozone/pull/1725#discussion_r556338068", "createdAt": "2021-01-13T08:22:31Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMStateMachine.java", "diffHunk": "@@ -89,4 +128,33 @@ private Message process(final SCMRatisRequest request)\n     }\n   }\n \n+  @Override\n+  public long takeSnapshot() throws IOException {\n+    LOG.info(\"Current Snapshot Index {}\", getLastAppliedTermIndex());\n+    long startTime = Time.monotonicNow();\n+    TermIndex lastTermIndex = getLastAppliedTermIndex();\n+    long lastAppliedIndex = lastTermIndex.getIndex();\n+    SCMTransactionInfo lastAppliedTrxInfo =\n+        SCMTransactionInfo.fromTermIndex(lastTermIndex);\n+    if (transactionBuffer.getLatestTrxInfo()\n+        .compareTo(lastAppliedTrxInfo) < 0) {\n+      transactionBuffer.updateLatestTrxInfo(\n+          SCMTransactionInfo.builder()\n+              .setCurrentTerm(lastTermIndex.getTerm())\n+              .setTransactionIndex(lastTermIndex.getIndex())\n+              .build());\n+      transactionBuffer.setLatestSnapshot(\n+          transactionBuffer.getLatestTrxInfo().toSnapshotInfo());\n+    } else {\n+      lastAppliedIndex =\n+          transactionBuffer.getLatestTrxInfo().getTransactionIndex();\n+    }\n+\n+    transactionBuffer.flush();\n+    transactionBuffer.setLatestSnapshot(\n+        transactionBuffer.getLatestTrxInfo().toSnapshotInfo());\n+    LOG.debug(\"SCM takeSnapshot: {} took {} ms\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22b07be1da6560d929c7cdeda374db4db5f61680"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM0MjA1NA==", "bodyText": "You need call updateLastAppliedTermIndex  in applyTransaction(), the lastAppliedTermIndex in BaseStateMachine should be updated manually when apply a entry.\nPlease double check applyTransaction in BaseStateMachine\n  @Override\n  public CompletableFuture<Message> applyTransaction(TransactionContext trx) {\n    // return the same message contained in the entry\n    RaftProtos.LogEntryProto entry = Objects.requireNonNull(trx.getLogEntry());\n    updateLastAppliedTermIndex(entry.getTerm(), entry.getIndex());\n    return CompletableFuture.completedFuture(\n        Message.valueOf(trx.getLogEntry().getStateMachineLogEntry().getLogData()));\n  }\n\nand  applyTransaction in ArithmeticStateMachine.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r556342054", "createdAt": "2021-01-13T08:29:22Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMStateMachine.java", "diffHunk": "@@ -89,4 +98,12 @@ private Message process(final SCMRatisRequest request)\n     }\n   }\n \n+  @Override\n+  public long takeSnapshot() throws IOException {\n+    LOG.info(\"Current Snapshot Index {}\", getLastAppliedTermIndex());\n+    TermIndex lastTermIndex = getLastAppliedTermIndex();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcwODA1Ng=="}, "originalCommit": {"oid": "6903b0070a85a5eef0926687cef8ed388f74433c"}, "originalPosition": 62}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "22b07be1da6560d929c7cdeda374db4db5f61680", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/ozone/commit/22b07be1da6560d929c7cdeda374db4db5f61680", "committedDate": "2021-01-08T05:05:58Z", "message": "fixup! update latest snapshot"}, "afterCommit": {"oid": "b1aa53efe9366d6d21edef6235ebc1bfaba75672", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/ozone/commit/b1aa53efe9366d6d21edef6235ebc1bfaba75672", "committedDate": "2021-01-14T05:45:05Z", "message": "fixup! address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY4MDYwNDE0", "url": "https://github.com/apache/ozone/pull/1725#pullrequestreview-568060414", "createdAt": "2021-01-14T09:37:03Z", "commit": {"oid": "ce5083347c29f3f207fcc19f9519dc65e05a7eed"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQwOTozNzowM1rOITcdow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMDozMTo0N1rOITem3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzI2MDE5NQ==", "bodyText": "shouldUpdate() is not very intuitive in the context of SCMTransactionInfo, how about isInitialized() or something like this ?", "url": "https://github.com/apache/ozone/pull/1725#discussion_r557260195", "createdAt": "2021-01-14T09:37:03Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMTransactionInfo.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * <p>http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * <p>Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.hadoop.hdds.StringUtils;\n+import org.apache.ratis.server.protocol.TermIndex;\n+import org.apache.ratis.statemachine.SnapshotInfo;\n+\n+import java.util.Objects;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.TRANSACTION_INFO_SPLIT_KEY;\n+\n+/**\n+ * SCMTransactionInfo saves two fields for a transaction:\n+ *  1. term, of which the transaction belongs to\n+ *  2. transactionIndex, which is a monotonic increasing index\n+ *     (e.g. Raft Log index)\n+ */\n+final public class SCMTransactionInfo {\n+  private long term;\n+  private long transactionIndex;\n+\n+  private SCMTransactionInfo(String transactionInfo) {\n+    String[] tInfo =\n+        transactionInfo.split(TRANSACTION_INFO_SPLIT_KEY);\n+    Preconditions.checkState(tInfo.length == 2,\n+        \"Incorrect TransactionInfo value\");\n+\n+    term = Long.parseLong(tInfo[0]);\n+    transactionIndex = Long.parseLong(tInfo[1]);\n+  }\n+\n+  private SCMTransactionInfo(long currentTerm, long transactionIndex) {\n+    this.term = currentTerm;\n+    this.transactionIndex = transactionIndex;\n+  }\n+\n+  public boolean shouldUpdate() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5083347c29f3f207fcc19f9519dc65e05a7eed"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzI5NTMyNQ==", "bodyText": "DBTransactionBuffer can be fetched by calling SCMHAManager#getDBTransactionBuffer, so this function newPipelineManagerWithMockBuffer is not needed.\n// Create PipelineStateManager\nStateManager stateManager = PipelineStateManagerV2Impl\n    .newBuilder().setPipelineStore(pipelineStore)\n    .setRatisServer(scmhaManager.getRatisServer())\n    .setNodeManager(nodeManager)\n    .setSCMDBTransactionBuffer(scmhaManager.getDBTransactionBuffer())\n    .build()", "url": "https://github.com/apache/ozone/pull/1725#discussion_r557295325", "createdAt": "2021-01-14T10:31:47Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelineManagerV2Impl.java", "diffHunk": "@@ -111,15 +113,25 @@ private PipelineManagerV2Impl(ConfigurationSource conf,\n     this.pipelineCreationAllowed = new AtomicBoolean(!this.isInSafeMode.get());\n   }\n \n-  public static PipelineManagerV2Impl newPipelineManager(\n+  public static PipelineManagerV2Impl newPipelineManagerWithMockBuffer(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5083347c29f3f207fcc19f9519dc65e05a7eed"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY4NzgxNjI2", "url": "https://github.com/apache/ozone/pull/1725#pullrequestreview-568781626", "createdAt": "2021-01-15T02:51:15Z", "commit": {"oid": "e45b347ee8c7ddaa6ea47128c3a4e8439428c38d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwMjo1MToxNVrOIT_PNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwMjo1MToxNVrOIT_PNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzgyOTk0MA==", "bodyText": "It should be\nif (latestTrxInfo.isInitialized()) {\n  updateLastAppliedTermIndex(...)\n}\n\n?", "url": "https://github.com/apache/ozone/pull/1725#discussion_r557829940", "createdAt": "2021-01-15T02:51:15Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMStateMachine.java", "diffHunk": "@@ -54,7 +54,7 @@ public SCMStateMachine(SCMDBTransactionBuffer buffer) throws SCMException {\n     this.handlers = new EnumMap<>(RequestType.class);\n     this.transactionBuffer = buffer;\n     SCMTransactionInfo latestTrxInfo = buffer.getLatestTrxInfo();\n-    if (latestTrxInfo.shouldUpdate()) {\n+    if (!latestTrxInfo.isInitialized()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e45b347ee8c7ddaa6ea47128c3a4e8439428c38d"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY5MTE1NjU2", "url": "https://github.com/apache/ozone/pull/1725#pullrequestreview-569115656", "createdAt": "2021-01-15T09:55:58Z", "commit": {"oid": "865bcb18cb5e0dd25f73a34f4d62e70950975a20"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwOTo1NTo1OFrOIUTj_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMDowODowOVrOIUUvYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODE2Mjk0Mg==", "bodyText": "i think, reset of the rocks db batch operation should be made independent of flush. We may/may not require to reinitialise every time we call flush. For example, shutting down the raft server instance may initiate the last snapshot but will not require the batch reinitialisation.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r558162942", "createdAt": "2021-01-15T09:55:58Z", "author": {"login": "bshashikant"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMDBTransactionBuffer.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p/>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p/>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import org.apache.hadoop.hdds.scm.metadata.SCMMetadataStore;\n+import org.apache.hadoop.hdds.utils.db.BatchOperation;\n+import org.apache.hadoop.hdds.utils.db.Table;\n+import org.apache.ratis.statemachine.SnapshotInfo;\n+\n+import java.io.IOException;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.TRANSACTION_INFO_KEY;\n+\n+/**\n+ * This is a transaction buffer that buffers SCM DB operations for Pipeline and\n+ * Container. When flush this buffer to DB, a transaction info will also be\n+ * written into DB to indicate the term and transaction index for the latest\n+ * operation in DB.\n+ */\n+public class SCMDBTransactionBuffer implements DBTransactionBuffer {\n+  private final SCMMetadataStore metadataStore;\n+  private BatchOperation currentBatchOperation;\n+  private SCMTransactionInfo latestTrxInfo;\n+  private SnapshotInfo latestSnapshot;\n+\n+  public SCMDBTransactionBuffer(SCMMetadataStore store) throws IOException {\n+    this.metadataStore = store;\n+\n+    // initialize a batch operation during construction time\n+    currentBatchOperation = this.metadataStore.getStore().initBatchOperation();\n+    latestTrxInfo = store.getTransactionInfoTable().get(TRANSACTION_INFO_KEY);\n+    if (latestTrxInfo == null) {\n+      // transaction table is empty\n+      latestTrxInfo =\n+          SCMTransactionInfo\n+              .builder()\n+              .setTransactionIndex(-1)\n+              .setCurrentTerm(0)\n+              .build();\n+    }\n+    latestSnapshot = latestTrxInfo.toSnapshotInfo();\n+  }\n+\n+  @Override\n+  public BatchOperation getCurrentBatchOperation() {\n+    return currentBatchOperation;\n+  }\n+\n+  @Override\n+  public void updateLatestTrxInfo(SCMTransactionInfo info) {\n+    if (info.compareTo(this.latestTrxInfo) <= 0) {\n+      throw new IllegalArgumentException(\n+          \"Updating DB buffer transaction info by an older transaction info, \"\n+          + \"current: \" + this.latestTrxInfo + \", updating to: \" + info);\n+    }\n+    this.latestTrxInfo = info;\n+  }\n+\n+  @Override\n+  public SCMTransactionInfo getLatestTrxInfo() {\n+    return this.latestTrxInfo;\n+  }\n+\n+  @Override\n+  public SnapshotInfo getLatestSnapshot() {\n+    return latestSnapshot;\n+  }\n+\n+  @Override\n+  public void setLatestSnapshot(SnapshotInfo latestSnapshot) {\n+    this.latestSnapshot = latestSnapshot;\n+  }\n+\n+  @Override\n+  public void flush() throws IOException {\n+    // write latest trx info into trx table in the same batch\n+    Table<String, SCMTransactionInfo> transactionInfoTable\n+        = metadataStore.getTransactionInfoTable();\n+    transactionInfoTable.putWithBatch(currentBatchOperation,\n+        TRANSACTION_INFO_KEY, latestTrxInfo);\n+\n+    metadataStore.getStore().commitBatchOperation(currentBatchOperation);\n+    currentBatchOperation.close();\n+    this.latestSnapshot = latestTrxInfo.toSnapshotInfo();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "865bcb18cb5e0dd25f73a34f4d62e70950975a20"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODE3ODY1OQ==", "bodyText": "why the lastApplied index returned here is the one derived from transaction buffer? Once the snapshot is taken, the last applied index should be given by getLastAppliedTermIndex() not transaction buffer which may be behind actual last applied index in ratis?", "url": "https://github.com/apache/ozone/pull/1725#discussion_r558178659", "createdAt": "2021-01-15T10:05:35Z", "author": {"login": "bshashikant"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMStateMachine.java", "diffHunk": "@@ -89,4 +119,30 @@ private Message process(final SCMRatisRequest request)\n     }\n   }\n \n+  @Override\n+  public long takeSnapshot() throws IOException {\n+    long startTime = Time.monotonicNow();\n+    TermIndex lastTermIndex = getLastAppliedTermIndex();\n+    long lastAppliedIndex = lastTermIndex.getIndex();\n+    SCMTransactionInfo lastAppliedTrxInfo =\n+        SCMTransactionInfo.fromTermIndex(lastTermIndex);\n+    if (transactionBuffer.getLatestTrxInfo()\n+        .compareTo(lastAppliedTrxInfo) < 0) {\n+      transactionBuffer.updateLatestTrxInfo(\n+          SCMTransactionInfo.builder()\n+              .setCurrentTerm(lastTermIndex.getTerm())\n+              .setTransactionIndex(lastTermIndex.getIndex())\n+              .build());\n+      transactionBuffer.setLatestSnapshot(\n+          transactionBuffer.getLatestTrxInfo().toSnapshotInfo());\n+    } else {\n+      lastAppliedIndex =\n+          transactionBuffer.getLatestTrxInfo().getTransactionIndex();\n+    }\n+\n+    transactionBuffer.flush();\n+    LOG.info(\"Current Snapshot Index {}, takeSnapshot took {} ms\",\n+        getLastAppliedTermIndex(), Time.monotonicNow() - startTime);\n+    return lastAppliedIndex;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "865bcb18cb5e0dd25f73a34f4d62e70950975a20"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODE4MjI0Mg==", "bodyText": "unintended change??", "url": "https://github.com/apache/ozone/pull/1725#discussion_r558182242", "createdAt": "2021-01-15T10:08:09Z", "author": {"login": "bshashikant"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelineManagerV2Impl.java", "diffHunk": "@@ -114,12 +114,14 @@ private PipelineManagerV2Impl(ConfigurationSource conf,\n   public static PipelineManagerV2Impl newPipelineManager(\n       ConfigurationSource conf, SCMHAManager scmhaManager,\n       NodeManager nodeManager, Table<PipelineID, Pipeline> pipelineStore,\n-      EventPublisher eventPublisher) throws IOException {\n+      EventPublisher eventPublisher)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "865bcb18cb5e0dd25f73a34f4d62e70950975a20"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwMTgyMTkw", "url": "https://github.com/apache/ozone/pull/1725#pullrequestreview-570182190", "createdAt": "2021-01-18T05:37:24Z", "commit": {"oid": "1ad0a9899110a392f600c0f8651a832576f6fa5b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQwNTozNzoyNFrOIVamJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQwNTozNzoyNFrOIVamJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTMyNjc1OA==", "bodyText": "Can we rename applyTransaction to applyTansactionSerial as this is a serialized operation anyways?", "url": "https://github.com/apache/ozone/pull/1725#discussion_r559326758", "createdAt": "2021-01-18T05:37:24Z", "author": {"login": "bshashikant"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMStateMachine.java", "diffHunk": "@@ -26,27 +26,55 @@\n import java.util.concurrent.CompletableFuture;\n \n import com.google.protobuf.InvalidProtocolBufferException;\n+import org.apache.hadoop.hdds.scm.exceptions.SCMException;\n+import org.apache.hadoop.util.Time;\n import org.apache.ratis.protocol.Message;\n+import org.apache.ratis.server.protocol.TermIndex;\n+import org.apache.ratis.statemachine.SnapshotInfo;\n import org.apache.ratis.statemachine.TransactionContext;\n import org.apache.ratis.statemachine.impl.BaseStateMachine;\n \n import org.apache.hadoop.hdds.protocol.proto.SCMRatisProtocol.RequestType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.hadoop.hdds.scm.exceptions.SCMException.ResultCodes.SCM_NOT_INITIALIZED;\n \n /**\n  * TODO.\n  */\n public class SCMStateMachine extends BaseStateMachine {\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(BaseStateMachine.class);\n \n   private final Map<RequestType, Object> handlers;\n+  private final SCMDBTransactionBuffer transactionBuffer;\n \n-  public SCMStateMachine() {\n+  public SCMStateMachine(SCMDBTransactionBuffer buffer) throws SCMException {\n     this.handlers = new EnumMap<>(RequestType.class);\n+    this.transactionBuffer = buffer;\n+    SCMTransactionInfo latestTrxInfo = buffer.getLatestTrxInfo();\n+    if (!latestTrxInfo.isInitialized()) {\n+      if (!updateLastAppliedTermIndex(latestTrxInfo.getTerm(),\n+          latestTrxInfo.getTransactionIndex())) {\n+        throw new SCMException(\n+            String.format(\"Failed to update LastAppliedTermIndex \" +\n+                    \"in StateMachine to term:{} index:{}\",\n+                latestTrxInfo.getTerm(), latestTrxInfo.getTransactionIndex()\n+            ), SCM_NOT_INITIALIZED);\n+      }\n+    }\n   }\n \n   public void registerHandler(RequestType type, Object handler) {\n     handlers.put(type, handler);\n   }\n \n+  @Override\n+  public SnapshotInfo getLatestSnapshot() {\n+    return transactionBuffer.getLatestSnapshot();\n+  }\n+\n   @Override\n   public CompletableFuture<Message> applyTransaction(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ad0a9899110a392f600c0f8651a832576f6fa5b"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwMjI1OTYy", "url": "https://github.com/apache/ozone/pull/1725#pullrequestreview-570225962", "createdAt": "2021-01-18T07:31:41Z", "commit": {"oid": "1ad0a9899110a392f600c0f8651a832576f6fa5b"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQwNzozMTo0MVrOIVcv9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQwNzo1MDo0N1rOIVdPXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTM2MjAzNg==", "bodyText": "Please add an annotation of @VisibleForTesting.", "url": "https://github.com/apache/ozone/pull/1725#discussion_r559362036", "createdAt": "2021-01-18T07:31:41Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/container/ContainerManagerImpl.java", "diffHunk": "@@ -397,4 +396,8 @@ public void close() throws IOException {\n   protected ContainerStateManagerV2 getContainerStateManager() {\n     return containerStateManager;\n   }\n+\n+  public SCMHAManager getSCMHAManager() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ad0a9899110a392f600c0f8651a832576f6fa5b"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTM3MDA3Ng==", "bodyText": "The SCMRatisSnapshotInfo is an immutable object after being created. How about make term and snapshotIndex be final and remove updateTermIndex() ?", "url": "https://github.com/apache/ozone/pull/1725#discussion_r559370076", "createdAt": "2021-01-18T07:50:47Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMRatisSnapshotInfo.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * <p>http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * <p>Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.hdds.scm.ha;\n+\n+import org.apache.ratis.server.protocol.TermIndex;\n+import org.apache.ratis.server.storage.FileInfo;\n+import org.apache.ratis.statemachine.SnapshotInfo;\n+\n+import java.util.List;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.TRANSACTION_INFO_SPLIT_KEY;\n+\n+/**\n+ * This class captures the snapshotIndex and term of the latest snapshot in\n+ * the SCM\n+ * Ratis server loads the snapshotInfo during startup and updates the\n+ * lastApplied index to this snapshotIndex. SCM SnapshotInfo does not contain\n+ * any files. It is used only to store/ update the last applied index and term.\n+ */\n+public class SCMRatisSnapshotInfo implements SnapshotInfo {\n+  private volatile long term;\n+  private volatile long snapshotIndex;\n+\n+  public SCMRatisSnapshotInfo(long term, long index) {\n+    this.term = term;\n+    this.snapshotIndex = index;\n+  }\n+\n+  public void updateTermIndex(long newTerm, long newIndex) {\n+    this.term = newTerm;\n+    this.snapshotIndex = newIndex;\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDUxMTc5NQ=="}, "originalCommit": {"oid": "22b07be1da6560d929c7cdeda374db4db5f61680"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78fb54cb63a4ac1a92148d05329bbbddadc0833d", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/ozone/commit/78fb54cb63a4ac1a92148d05329bbbddadc0833d", "committedDate": "2021-01-19T03:53:21Z", "message": "HDDS-3208. Implement Ratis Snapshots on SCM"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76509c8ec4ad037389b5ae2c7373be81f8631ceb", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/ozone/commit/76509c8ec4ad037389b5ae2c7373be81f8631ceb", "committedDate": "2021-01-19T04:18:08Z", "message": "fixup! fix comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0d51d787f246e401549abd050b2a82fc8fc49130", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/ozone/commit/0d51d787f246e401549abd050b2a82fc8fc49130", "committedDate": "2021-01-18T21:21:30Z", "message": "fixup! address comments"}, "afterCommit": {"oid": "76509c8ec4ad037389b5ae2c7373be81f8631ceb", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/ozone/commit/76509c8ec4ad037389b5ae2c7373be81f8631ceb", "committedDate": "2021-01-19T04:18:08Z", "message": "fixup! fix comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1751c5c66d663832c407fd093a0e896b77525b29", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/ozone/commit/1751c5c66d663832c407fd093a0e896b77525b29", "committedDate": "2021-01-19T04:32:19Z", "message": "fixup! fix UT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f22d5ead9482dfde3812be68135783471f7c0997", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/ozone/commit/f22d5ead9482dfde3812be68135783471f7c0997", "committedDate": "2021-01-19T05:10:34Z", "message": "trigger new CI check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cde59965a3b5edb54469fd9df01b5b348417ddb3", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/ozone/commit/cde59965a3b5edb54469fd9df01b5b348417ddb3", "committedDate": "2021-01-19T05:29:32Z", "message": "fixup! fix NPE"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbd561d97648ed5212fc591de254f1c8f7debfd1", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/ozone/commit/bbd561d97648ed5212fc591de254f1c8f7debfd1", "committedDate": "2021-01-19T07:11:04Z", "message": "trigger new CI check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb4d4f4d71525e5745d140dd75a91b370425b941", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/ozone/commit/cb4d4f4d71525e5745d140dd75a91b370425b941", "committedDate": "2021-01-19T18:04:30Z", "message": "trigger new CI check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68e02fa7ee7eac8c0e6a3ff2e946c2c70b7a9ec8", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/ozone/commit/68e02fa7ee7eac8c0e6a3ff2e946c2c70b7a9ec8", "committedDate": "2021-01-19T19:44:23Z", "message": "trigger new CI check"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcyMjg3NjI1", "url": "https://github.com/apache/ozone/pull/1725#pullrequestreview-572287625", "createdAt": "2021-01-20T14:41:38Z", "commit": {"oid": "68e02fa7ee7eac8c0e6a3ff2e946c2c70b7a9ec8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1888, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}