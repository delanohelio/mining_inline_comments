{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1MDA0MDc1", "number": 1305, "title": "HDDS-4009. Recon Overview page: The volume, bucket and key counts are not accurate", "bodyText": "What changes were proposed in this pull request?\n\nAdd a new task in Recon to keep track of the count of all the OM DB tables\nAdd / update unit tests\nAdd a new method \"getSkipCache\" in Table interface to get value from the table by skipping the cache. This is required for Recon, since recon never adds entries to cache of any table.\nUpdate ClusterStateEndpoint to get the counts of volume, bucket, and key from global stats table and not rely on \"rocksdb.estimate-num-keys\"\n\nWhat is the link to the Apache JIRA\nhttps://issues.apache.org/jira/browse/HDDS-4009\nHow was this patch tested?\nManually tested in a real cluster and also added unit tests.", "createdAt": "2020-08-08T08:23:48Z", "url": "https://github.com/apache/ozone/pull/1305", "merged": true, "mergeCommit": {"oid": "eb70d9ee8482f5e2deb4dabef0d801b147dc980f"}, "closed": true, "closedAt": "2020-08-12T14:25:17Z", "author": {"login": "vivekratnavel"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc80iBpAH2gAyNDY1MDA0MDc1OjQ3OTAwZWFlYzRiYTdjN2E2ODhhZjUxZGQyM2NjMDYzNzMzZGU4MDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-C1DsgFqTQ2NTU2NjIwNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "47900eaec4ba7c7a688af51dd23cc063733de801", "author": {"user": {"login": "vivekratnavel", "name": "Vivek Ratnavel Subramanian"}}, "url": "https://github.com/apache/ozone/commit/47900eaec4ba7c7a688af51dd23cc063733de801", "committedDate": "2020-08-08T08:13:46Z", "message": "HDDS-4009. Recon Overview page: The volume, bucket and key counts are not accurate"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzODE3MjE1", "url": "https://github.com/apache/ozone/pull/1305#pullrequestreview-463817215", "createdAt": "2020-08-08T17:43:35Z", "commit": {"oid": "47900eaec4ba7c7a688af51dd23cc063733de801"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxNzo0MzozNlrOG91LZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNDo0NzoyNlrOG-7eLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4NzU5MQ==", "bodyText": "Can we add Javadoc for the new methods?", "url": "https://github.com/apache/ozone/pull/1305#discussion_r467487591", "createdAt": "2020-08-08T17:43:36Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-hdds/framework/src/main/java/org/apache/hadoop/hdds/utils/db/DBDefinition.java", "diffHunk": "@@ -43,4 +47,15 @@\n    */\n   DBColumnFamilyDefinition[] getColumnFamilies();\n \n+  default Optional<Class> getKeyType(String table) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47900eaec4ba7c7a688af51dd23cc063733de801"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4NzY4OQ==", "bodyText": "We should default to get() method or provide implementation in org.apache.hadoop.hdds.utils.db.RDBTable as well.", "url": "https://github.com/apache/ozone/pull/1305#discussion_r467487689", "createdAt": "2020-08-08T17:44:47Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-hdds/framework/src/main/java/org/apache/hadoop/hdds/utils/db/Table.java", "diffHunk": "@@ -82,6 +82,19 @@ void putWithBatch(BatchOperation batch, KEY key, VALUE value)\n   VALUE get(KEY key) throws IOException;\n \n \n+  /**\n+   * Skip checking cache and get the value mapped to the given key in byte\n+   * array or returns null if the key is not found.\n+   *\n+   * @param key metadata key\n+   * @return value in byte array or null if the key is not found.\n+   * @throws IOException on Failure\n+   */\n+  default VALUE getSkipCache(KEY key) throws IOException {\n+    throw new NotImplementedException(\"getSkipCache is not implemented\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47900eaec4ba7c7a688af51dd23cc063733de801"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYzMDQ4Nw==", "bodyText": "The 'dslContext' is common across tables. Do we need to add specific getters inside the individual table definitions? Can we just get the 'datasource' instance from the test injector and get hold of the dslcontext?", "url": "https://github.com/apache/ozone/pull/1305#discussion_r468630487", "createdAt": "2020-08-11T14:35:38Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/recon-codegen/src/main/java/org/hadoop/ozone/recon/schema/StatsSchemaDefinition.java", "diffHunk": "@@ -46,22 +48,31 @@\n   @Override\n   public void initializeSchema() throws SQLException {\n     Connection conn = dataSource.getConnection();\n+    dslContext = DSL.using(conn);\n     if (!TABLE_EXISTS_CHECK.test(conn, GLOBAL_STATS_TABLE_NAME)) {\n-      createGlobalStatsTable(conn);\n+      createGlobalStatsTable();\n     }\n   }\n \n   /**\n    * Create the Ozone Global Stats table.\n-   * @param conn connection\n    */\n-  private void createGlobalStatsTable(Connection conn) {\n-    DSL.using(conn).createTableIfNotExists(GLOBAL_STATS_TABLE_NAME)\n+  private void createGlobalStatsTable() {\n+    dslContext.createTableIfNotExists(GLOBAL_STATS_TABLE_NAME)\n         .column(\"key\", SQLDataType.VARCHAR(255))\n         .column(\"value\", SQLDataType.BIGINT)\n         .column(\"last_updated_timestamp\", SQLDataType.TIMESTAMP)\n         .constraint(DSL.constraint(\"pk_key\")\n             .primaryKey(\"key\"))\n         .execute();\n   }\n+\n+  /**\n+   * Returns the DSL context.\n+   *\n+   * @return dslContext\n+   */\n+  public DSLContext getDSLContext() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47900eaec4ba7c7a688af51dd23cc063733de801"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYzNzEwNQ==", "bodyText": "Nit. We can get rid of these single line methods.", "url": "https://github.com/apache/ozone/pull/1305#discussion_r468637105", "createdAt": "2020-08-11T14:44:34Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/tasks/OMDBUpdatesHandler.java", "diffHunk": "@@ -262,12 +270,13 @@ public void markCommit(byte[] bytes) throws RocksDBException {\n   }\n \n   /**\n-   * Return Key type class for a given table name.\n-   * @param name table name.\n-   * @return String.class by default.\n+   * Return Key type class for the given table.\n+   *\n+   * @return keyType class.\n    */\n-  private Class<String> getKeyType() {\n-    return String.class;\n+  @VisibleForTesting\n+  Optional<Class> getKeyType(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47900eaec4ba7c7a688af51dd23cc063733de801"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYzOTI3OQ==", "bodyText": "This can be a method local variable in process().", "url": "https://github.com/apache/ozone/pull/1305#discussion_r468639279", "createdAt": "2020-08-11T14:47:26Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/tasks/TableCountTask.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.recon.tasks;\n+\n+import com.google.inject.Inject;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.hadoop.hdds.utils.db.Table;\n+import org.apache.hadoop.hdds.utils.db.TableIterator;\n+import org.apache.hadoop.ozone.om.OMMetadataManager;\n+import org.apache.hadoop.ozone.recon.ReconUtils;\n+import org.apache.hadoop.ozone.recon.recovery.ReconOMMetadataManager;\n+import org.hadoop.ozone.recon.schema.tables.daos.GlobalStatsDao;\n+import org.hadoop.ozone.recon.schema.tables.pojos.GlobalStats;\n+import org.jooq.Configuration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map.Entry;\n+\n+/**\n+ * Class to iterate over the OM DB and store the total counts of volumes,\n+ * buckets, keys, open keys, deleted keys, etc.\n+ */\n+public class TableCountTask implements ReconOmTask {\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(TableCountTask.class);\n+\n+  private GlobalStatsDao globalStatsDao;\n+  private Configuration sqlConfiguration;\n+  private HashMap<String, Long> objectCountMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47900eaec4ba7c7a688af51dd23cc063733de801"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fcd8a5f64568e3d4a871017628c1dedffdb4cb9", "author": {"user": {"login": "vivekratnavel", "name": "Vivek Ratnavel Subramanian"}}, "url": "https://github.com/apache/ozone/commit/4fcd8a5f64568e3d4a871017628c1dedffdb4cb9", "committedDate": "2020-08-11T22:34:16Z", "message": "Address review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NTY2MjA1", "url": "https://github.com/apache/ozone/pull/1305#pullrequestreview-465566205", "createdAt": "2020-08-12T03:27:09Z", "commit": {"oid": "4fcd8a5f64568e3d4a871017628c1dedffdb4cb9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2697, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}