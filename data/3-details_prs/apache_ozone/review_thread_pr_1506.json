{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2NjkwMTkx", "number": 1506, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDo0ODoyOVrOEv0dhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDo0ODoyOVrOEv0dhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTc4MDUzOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/volume/VolumeIOStats.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDo0ODoyOVrOHlA73g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxODoyOToyMFrOHlLgyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU3NDY4Ng==", "bodyText": "We should have the corresponding VolumeIOStats  unregister method to unregister these metric.", "url": "https://github.com/apache/ozone/pull/1506#discussion_r508574686", "createdAt": "2020-10-20T14:48:29Z", "author": {"login": "linyiqun"}, "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/volume/VolumeIOStats.java", "diffHunk": "@@ -18,121 +18,135 @@\n \n package org.apache.hadoop.ozone.container.common.volume;\n \n-import java.util.concurrent.atomic.AtomicLong;\n+import org.apache.hadoop.metrics2.MetricsSystem;\n+import org.apache.hadoop.metrics2.annotation.Metric;\n+import org.apache.hadoop.metrics2.lib.DefaultMetricsSystem;\n+import org.apache.hadoop.metrics2.lib.MetricsRegistry;\n+import org.apache.hadoop.metrics2.lib.MutableCounterLong;\n \n /**\n  * This class is used to track Volume IO stats for each HDDS Volume.\n  */\n public class VolumeIOStats {\n+  private String name = VolumeIOStats.class.getSimpleName();\n \n-  private final AtomicLong readBytes;\n-  private final AtomicLong readOpCount;\n-  private final AtomicLong writeBytes;\n-  private final AtomicLong writeOpCount;\n-  private final AtomicLong readTime;\n-  private final AtomicLong writeTime;\n+  private @Metric MutableCounterLong readBytes;\n+  private @Metric MutableCounterLong readOpCount;\n+  private @Metric MutableCounterLong writeBytes;\n+  private @Metric MutableCounterLong writeOpCount;\n+  private @Metric MutableCounterLong readTime;\n+  private @Metric MutableCounterLong writeTime;\n+  private MetricsRegistry registry;\n \n   public VolumeIOStats() {\n-    readBytes = new AtomicLong(0);\n-    readOpCount = new AtomicLong(0);\n-    writeBytes = new AtomicLong(0);\n-    writeOpCount = new AtomicLong(0);\n-    readTime = new AtomicLong(0);\n-    writeTime = new AtomicLong(0);\n+    init();\n+  }\n+\n+  public VolumeIOStats(String identifier) {\n+    this.name += '-' + identifier;\n+    init();\n+  }\n+\n+  public void init() {\n+    DefaultMetricsSystem.initialize(name);\n+    MetricsSystem ms = DefaultMetricsSystem.instance();\n+    ms.register(name, \"Volume I/O Statistics\", this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a362947511469fb39884232061e1e5fb4b341e47"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc0Nzk3Nw==", "bodyText": "oops. thanks for the reminder!", "url": "https://github.com/apache/ozone/pull/1506#discussion_r508747977", "createdAt": "2020-10-20T18:29:20Z", "author": {"login": "smengcl"}, "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/volume/VolumeIOStats.java", "diffHunk": "@@ -18,121 +18,135 @@\n \n package org.apache.hadoop.ozone.container.common.volume;\n \n-import java.util.concurrent.atomic.AtomicLong;\n+import org.apache.hadoop.metrics2.MetricsSystem;\n+import org.apache.hadoop.metrics2.annotation.Metric;\n+import org.apache.hadoop.metrics2.lib.DefaultMetricsSystem;\n+import org.apache.hadoop.metrics2.lib.MetricsRegistry;\n+import org.apache.hadoop.metrics2.lib.MutableCounterLong;\n \n /**\n  * This class is used to track Volume IO stats for each HDDS Volume.\n  */\n public class VolumeIOStats {\n+  private String name = VolumeIOStats.class.getSimpleName();\n \n-  private final AtomicLong readBytes;\n-  private final AtomicLong readOpCount;\n-  private final AtomicLong writeBytes;\n-  private final AtomicLong writeOpCount;\n-  private final AtomicLong readTime;\n-  private final AtomicLong writeTime;\n+  private @Metric MutableCounterLong readBytes;\n+  private @Metric MutableCounterLong readOpCount;\n+  private @Metric MutableCounterLong writeBytes;\n+  private @Metric MutableCounterLong writeOpCount;\n+  private @Metric MutableCounterLong readTime;\n+  private @Metric MutableCounterLong writeTime;\n+  private MetricsRegistry registry;\n \n   public VolumeIOStats() {\n-    readBytes = new AtomicLong(0);\n-    readOpCount = new AtomicLong(0);\n-    writeBytes = new AtomicLong(0);\n-    writeOpCount = new AtomicLong(0);\n-    readTime = new AtomicLong(0);\n-    writeTime = new AtomicLong(0);\n+    init();\n+  }\n+\n+  public VolumeIOStats(String identifier) {\n+    this.name += '-' + identifier;\n+    init();\n+  }\n+\n+  public void init() {\n+    DefaultMetricsSystem.initialize(name);\n+    MetricsSystem ms = DefaultMetricsSystem.instance();\n+    ms.register(name, \"Volume I/O Statistics\", this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU3NDY4Ng=="}, "originalCommit": {"oid": "a362947511469fb39884232061e1e5fb4b341e47"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4806, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}