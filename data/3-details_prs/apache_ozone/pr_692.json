{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwMTYwOTM1", "number": 692, "title": "HDDS-3168. Improve read efficiency by merging a lot of RPC call getContainerWithPipeline into one", "bodyText": "What changes were proposed in this pull request?\nWhat's the problem ?\n\nIf download a big file, there will be a lot of RPC call getContainerWithPipeline at https://github.com/apache/hadoop-ozone/blob/master/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManagerImpl.java#L703.\nUse jaeger trace the download operation. Download 187MB will be splited into 24 GET requests, each request will send  24 RPC call  getContainerWithPipeline, the average cost of 24 GET requests is about 57 ms.\n\n\n\nHow to fix ?\n\nI merge the 24 RPC call  getContainerWithPipeline into one by getContainerWithPipelineBatch\nUse jaeger trace the download operation. The average cost of 24 GET requests is about 47 ms, improve about 17%\n\n\n\nWhat is the link to the Apache JIRA\nhttps://issues.apache.org/jira/browse/HDDS-3168\nHow was this patch tested?\nChange existed UT to test it.", "createdAt": "2020-03-18T01:22:41Z", "url": "https://github.com/apache/ozone/pull/692", "merged": true, "mergeCommit": {"oid": "706fe1be4af499b9a2779ca1129f2d5ab0f168a9"}, "closed": true, "closedAt": "2020-04-22T05:46:49Z", "author": {"login": "runzhiwang"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcOtGJkABqjMxMzk2MjUwMjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaBsP8gFqTM5Nzg1OTY2MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1c966755ecf3343039b5bc1defa6ff477c23e97f", "author": {"user": {"login": "runzhiwang", "name": null}}, "url": "https://github.com/apache/ozone/commit/1c966755ecf3343039b5bc1defa6ff477c23e97f", "committedDate": "2020-03-18T00:19:02Z", "message": "HDDS-3168. Merge a lot of RPC call getContainerWithPipeline into one"}, "afterCommit": {"oid": "de04499af4466e71ce1522e73fd860e798a47625", "author": {"user": {"login": "runzhiwang", "name": null}}, "url": "https://github.com/apache/ozone/commit/de04499af4466e71ce1522e73fd860e798a47625", "committedDate": "2020-03-18T01:32:47Z", "message": "HDDS-3168. Improve read efficiency by merging a lot of RPC call getContainerWithPipeline into one"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MTE3ODQ5", "url": "https://github.com/apache/ozone/pull/692#pullrequestreview-377117849", "createdAt": "2020-03-18T18:10:56Z", "commit": {"oid": "de04499af4466e71ce1522e73fd860e798a47625"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxODoxMDo1NlrOF4RLPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxODoxMDo1NlrOF4RLPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU0NTk4Mw==", "bodyText": "Can we use a set instead of a list to avoid the overhead of contains call for large Key? You can convert to a list at the end if that is easier to pass over RPC.", "url": "https://github.com/apache/ozone/pull/692#discussion_r394545983", "createdAt": "2020-03-18T18:10:56Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManagerImpl.java", "diffHunk": "@@ -687,36 +687,49 @@ public OmKeyInfo lookupKey(OmKeyArgs args, String clientAddress)\n    */\n   @VisibleForTesting\n   protected void refreshPipeline(OmKeyInfo value) throws IOException {\n-    if (value != null &&\n-        CollectionUtils.isNotEmpty(value.getKeyLocationVersions())) {\n-      Map<Long, ContainerWithPipeline> containerWithPipelineMap =\n-          new HashMap<>();\n-      for (OmKeyLocationInfoGroup key : value.getKeyLocationVersions()) {\n-        for (OmKeyLocationInfo k : key.getLocationList()) {\n-          // TODO: fix Some tests that may not initialize container client\n-          // The production should always have containerClient initialized.\n-          if (scmClient.getContainerClient() != null) {\n-            try {\n-              if (!containerWithPipelineMap.containsKey(k.getContainerID())) {\n-                ContainerWithPipeline containerWithPipeline = scmClient\n-                    .getContainerClient()\n-                    .getContainerWithPipeline(k.getContainerID());\n-                containerWithPipelineMap.put(k.getContainerID(),\n-                    containerWithPipeline);\n-              }\n-            } catch (IOException ioEx) {\n-              LOG.debug(\"Get containerPipeline failed for volume:{} bucket:{} \"\n+    // TODO: fix Some tests that may not initialize container client\n+    // The production should always have containerClient initialized.\n+    if (scmClient.getContainerClient() == null) {\n+      return;\n+    }\n+\n+    if (value == null\n+            || CollectionUtils.isEmpty(value.getKeyLocationVersions())) {\n+      return;\n+    }\n+\n+    List<Long> containerIDs = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de04499af4466e71ce1522e73fd860e798a47625"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MDA2ODQ5", "url": "https://github.com/apache/ozone/pull/692#pullrequestreview-378006849", "createdAt": "2020-03-19T18:55:54Z", "commit": {"oid": "7c43beed00ded7c1c859904f70b0c70534ed991c"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODo1NTo1NFrOF48Mkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOToxNTozMlrOF482rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI1MDgzNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (scmClient.getContainerClient() == null) {\n          \n          \n            \n                  return;\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                if (value == null\n          \n          \n            \n                        || CollectionUtils.isEmpty(value.getKeyLocationVersions())) {\n          \n          \n            \n                  return;\n          \n          \n            \n                }\n          \n          \n            \n                final List<OmKeyLocationInfoGroup> locationGroups = value == null ?\n          \n          \n            \n                    null : value.getKeyLocationVersions();\n          \n          \n            \n            \n          \n          \n            \n                if (scmClient.getContainerClient() == null ||\n          \n          \n            \n                    CollectionUtils.isEmpty(locationGroups)) {\n          \n          \n            \n                  return;\n          \n          \n            \n                }", "url": "https://github.com/apache/ozone/pull/692#discussion_r395250835", "createdAt": "2020-03-19T18:55:54Z", "author": {"login": "nandakumar131"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManagerImpl.java", "diffHunk": "@@ -687,36 +688,46 @@ public OmKeyInfo lookupKey(OmKeyArgs args, String clientAddress)\n    */\n   @VisibleForTesting\n   protected void refreshPipeline(OmKeyInfo value) throws IOException {\n-    if (value != null &&\n-        CollectionUtils.isNotEmpty(value.getKeyLocationVersions())) {\n-      Map<Long, ContainerWithPipeline> containerWithPipelineMap =\n-          new HashMap<>();\n-      for (OmKeyLocationInfoGroup key : value.getKeyLocationVersions()) {\n-        for (OmKeyLocationInfo k : key.getLocationList()) {\n-          // TODO: fix Some tests that may not initialize container client\n-          // The production should always have containerClient initialized.\n-          if (scmClient.getContainerClient() != null) {\n-            try {\n-              if (!containerWithPipelineMap.containsKey(k.getContainerID())) {\n-                ContainerWithPipeline containerWithPipeline = scmClient\n-                    .getContainerClient()\n-                    .getContainerWithPipeline(k.getContainerID());\n-                containerWithPipelineMap.put(k.getContainerID(),\n-                    containerWithPipeline);\n-              }\n-            } catch (IOException ioEx) {\n-              LOG.debug(\"Get containerPipeline failed for volume:{} bucket:{} \"\n+    // TODO: fix Some tests that may not initialize container client\n+    // The production should always have containerClient initialized.\n+    if (scmClient.getContainerClient() == null) {\n+      return;\n+    }\n+\n+    if (value == null\n+            || CollectionUtils.isEmpty(value.getKeyLocationVersions())) {\n+      return;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c43beed00ded7c1c859904f70b0c70534ed991c"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI1MTIxOQ==", "bodyText": "No need to call value.getKeyLocationVersions() again, we can use locationGroups here.", "url": "https://github.com/apache/ozone/pull/692#discussion_r395251219", "createdAt": "2020-03-19T18:56:33Z", "author": {"login": "nandakumar131"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManagerImpl.java", "diffHunk": "@@ -687,36 +688,46 @@ public OmKeyInfo lookupKey(OmKeyArgs args, String clientAddress)\n    */\n   @VisibleForTesting\n   protected void refreshPipeline(OmKeyInfo value) throws IOException {\n-    if (value != null &&\n-        CollectionUtils.isNotEmpty(value.getKeyLocationVersions())) {\n-      Map<Long, ContainerWithPipeline> containerWithPipelineMap =\n-          new HashMap<>();\n-      for (OmKeyLocationInfoGroup key : value.getKeyLocationVersions()) {\n-        for (OmKeyLocationInfo k : key.getLocationList()) {\n-          // TODO: fix Some tests that may not initialize container client\n-          // The production should always have containerClient initialized.\n-          if (scmClient.getContainerClient() != null) {\n-            try {\n-              if (!containerWithPipelineMap.containsKey(k.getContainerID())) {\n-                ContainerWithPipeline containerWithPipeline = scmClient\n-                    .getContainerClient()\n-                    .getContainerWithPipeline(k.getContainerID());\n-                containerWithPipelineMap.put(k.getContainerID(),\n-                    containerWithPipeline);\n-              }\n-            } catch (IOException ioEx) {\n-              LOG.debug(\"Get containerPipeline failed for volume:{} bucket:{} \"\n+    // TODO: fix Some tests that may not initialize container client\n+    // The production should always have containerClient initialized.\n+    if (scmClient.getContainerClient() == null) {\n+      return;\n+    }\n+\n+    if (value == null\n+            || CollectionUtils.isEmpty(value.getKeyLocationVersions())) {\n+      return;\n+    }\n+\n+    Set<Long> containerIDs = new HashSet<>();\n+    for (OmKeyLocationInfoGroup key : value.getKeyLocationVersions()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c43beed00ded7c1c859904f70b0c70534ed991c"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI2MTYxMw==", "bodyText": "This logic can be extracted into a separate method and can be reused by getContainerWithPipeline and getContainerWithPipelineBatch", "url": "https://github.com/apache/ozone/pull/692#discussion_r395261613", "createdAt": "2020-03-19T19:15:32Z", "author": {"login": "nandakumar131"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/server/SCMClientProtocolServer.java", "diffHunk": "@@ -275,6 +275,66 @@ public ContainerWithPipeline getContainerWithPipeline(long containerID)\n     }\n   }\n \n+  @Override\n+  public List<ContainerWithPipeline> getContainerWithPipelineBatch(\n+      List<Long> containerIDs) throws IOException {\n+    getScm().checkAdminAccess(null);\n+\n+    List<ContainerWithPipeline> cpList = new ArrayList<>();\n+\n+    for (Long containerID : containerIDs) {\n+      final ContainerID cid = ContainerID.valueof(containerID);\n+      try {\n+        final ContainerInfo container = scm.getContainerManager()\n+                .getContainer(cid);\n+\n+        if (safeModePrecheck.isInSafeMode()) {\n+          if (container.isOpen()) {\n+            if (!hasRequiredReplicas(container)) {\n+              throw new SCMException(\"Open container \" + containerID\n+                      + \" doesn't have enough replicas to service this\"\n+                      + \" operation in Safe mode.\",\n+                      ResultCodes.SAFE_MODE_EXCEPTION);\n+            }\n+          }\n+        }\n+\n+        Pipeline pipeline;\n+        try {\n+          pipeline = container.isOpen() ? scm.getPipelineManager()\n+                  .getPipeline(container.getPipelineID()) : null;\n+        } catch (PipelineNotFoundException ex) {\n+          // The pipeline is destroyed.\n+          pipeline = null;\n+        }\n+\n+        if (pipeline == null) {\n+          pipeline = scm.getPipelineManager().createPipeline(\n+                  HddsProtos.ReplicationType.STAND_ALONE,\n+                  container.getReplicationFactor(),\n+                  scm.getContainerManager()\n+                          .getContainerReplicas(cid).stream()\n+                          .map(ContainerReplica::getDatanodeDetails)\n+                          .collect(Collectors.toList()));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c43beed00ded7c1c859904f70b0c70534ed991c"}, "originalPosition": 45}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "31e1e78e3d53347bc52ab6958907f78ca8f07c41", "author": {"user": {"login": "runzhiwang", "name": null}}, "url": "https://github.com/apache/ozone/commit/31e1e78e3d53347bc52ab6958907f78ca8f07c41", "committedDate": "2020-03-19T23:54:53Z", "message": "Update hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManagerImpl.java\n\nCo-Authored-By: Nanda kumar <nanda@apache.org>"}, "afterCommit": {"oid": "7c43beed00ded7c1c859904f70b0c70534ed991c", "author": {"user": {"login": "runzhiwang", "name": null}}, "url": "https://github.com/apache/ozone/commit/7c43beed00ded7c1c859904f70b0c70534ed991c", "committedDate": "2020-03-19T00:24:38Z", "message": "convert list to set"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "46d91cd7cd02116575bb6ebbb45f935915059f4e", "author": {"user": {"login": "runzhiwang", "name": null}}, "url": "https://github.com/apache/ozone/commit/46d91cd7cd02116575bb6ebbb45f935915059f4e", "committedDate": "2020-03-20T02:33:25Z", "message": "fix code style"}, "afterCommit": {"oid": "cc2ba5830ced31809806c35c7318271d020aae9e", "author": {"user": {"login": "runzhiwang", "name": null}}, "url": "https://github.com/apache/ozone/commit/cc2ba5830ced31809806c35c7318271d020aae9e", "committedDate": "2020-03-20T02:38:39Z", "message": "fix code style"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cc2ba5830ced31809806c35c7318271d020aae9e", "author": {"user": {"login": "runzhiwang", "name": null}}, "url": "https://github.com/apache/ozone/commit/cc2ba5830ced31809806c35c7318271d020aae9e", "committedDate": "2020-03-20T02:38:39Z", "message": "fix code style"}, "afterCommit": {"oid": "29a71dd90ecc7cf3c96fa20fb7834a23256fca37", "author": {"user": {"login": "runzhiwang", "name": null}}, "url": "https://github.com/apache/ozone/commit/29a71dd90ecc7cf3c96fa20fb7834a23256fca37", "committedDate": "2020-03-20T03:43:31Z", "message": "fix code style"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "427ba9db33a0f3c4592ac2cb10147d705312d7aa", "author": {"user": {"login": "runzhiwang", "name": null}}, "url": "https://github.com/apache/ozone/commit/427ba9db33a0f3c4592ac2cb10147d705312d7aa", "committedDate": "2020-03-20T05:26:21Z", "message": "fix code style"}, "afterCommit": {"oid": "4b4e04ec29d81db2048dd091f9fb96c3f1783f09", "author": {"user": {"login": "runzhiwang", "name": null}}, "url": "https://github.com/apache/ozone/commit/4b4e04ec29d81db2048dd091f9fb96c3f1783f09", "committedDate": "2020-04-16T23:45:33Z", "message": "fix code style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1281a49e1b606685e14c3fd2f532ddadb086b104", "author": {"user": {"login": "runzhiwang", "name": null}}, "url": "https://github.com/apache/ozone/commit/1281a49e1b606685e14c3fd2f532ddadb086b104", "committedDate": "2020-04-16T23:45:33Z", "message": "HDDS-3168. Improve read efficiency by merging a lot of RPC call getContainerWithPipeline into one"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d749c605fd8988beae66badc4bfb341f342cc3f4", "author": {"user": {"login": "runzhiwang", "name": null}}, "url": "https://github.com/apache/ozone/commit/d749c605fd8988beae66badc4bfb341f342cc3f4", "committedDate": "2020-04-16T23:45:33Z", "message": "convert list to set"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcee28edb5e7d1306c0eef75fbb5c9d78e75d8bd", "author": {"user": {"login": "runzhiwang", "name": null}}, "url": "https://github.com/apache/ozone/commit/fcee28edb5e7d1306c0eef75fbb5c9d78e75d8bd", "committedDate": "2020-04-16T23:45:33Z", "message": "fix code review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfb12b0a821d5f01d10cab283a0b33c658c1b61e", "author": {"user": {"login": "runzhiwang", "name": null}}, "url": "https://github.com/apache/ozone/commit/dfb12b0a821d5f01d10cab283a0b33c658c1b61e", "committedDate": "2020-04-16T23:45:33Z", "message": "fix code style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b046c1cfda666a86d5d540bcd5892e303fc4de8", "author": {"user": {"login": "runzhiwang", "name": null}}, "url": "https://github.com/apache/ozone/commit/6b046c1cfda666a86d5d540bcd5892e303fc4de8", "committedDate": "2020-04-16T23:45:33Z", "message": "fix code style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b4e04ec29d81db2048dd091f9fb96c3f1783f09", "author": {"user": {"login": "runzhiwang", "name": null}}, "url": "https://github.com/apache/ozone/commit/4b4e04ec29d81db2048dd091f9fb96c3f1783f09", "committedDate": "2020-04-16T23:45:33Z", "message": "fix code style"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3ODU5NjYx", "url": "https://github.com/apache/ozone/pull/692#pullrequestreview-397859661", "createdAt": "2020-04-22T05:46:21Z", "commit": {"oid": "4b4e04ec29d81db2048dd091f9fb96c3f1783f09"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3494, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}