{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1MTQwNDUz", "number": 1679, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjoxMjowOVrOFDAfpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMjo1Mzo1OVrOFH9YXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4Njk4MTUwOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/key/OMAllocateBlockResponseV1.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjoxMjowOVrOICc1oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNzozODozMVrOIChJMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ0MDU0NQ==", "bodyText": "volume usedbytes update can be removed", "url": "https://github.com/apache/ozone/pull/1679#discussion_r539440545", "createdAt": "2020-12-09T16:12:09Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/key/OMAllocateBlockResponseV1.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.response.key;\n+\n+import org.apache.hadoop.hdds.utils.db.BatchOperation;\n+import org.apache.hadoop.ozone.om.OMMetadataManager;\n+import org.apache.hadoop.ozone.om.helpers.OmBucketInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmKeyInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmVolumeArgs;\n+import org.apache.hadoop.ozone.om.request.file.OMFileRequest;\n+import org.apache.hadoop.ozone.om.response.CleanupTableInfo;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMResponse;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+\n+import static org.apache.hadoop.ozone.om.OmMetadataManagerImpl.OPEN_FILE_TABLE;\n+\n+/**\n+ * Response for AllocateBlock request layout version V1.\n+ */\n+@CleanupTableInfo(cleanupTables = {OPEN_FILE_TABLE})\n+public class OMAllocateBlockResponseV1 extends OMAllocateBlockResponse {\n+\n+  public OMAllocateBlockResponseV1(@Nonnull OMResponse omResponse,\n+      @Nonnull OmKeyInfo omKeyInfo, long clientID,\n+      @Nonnull OmVolumeArgs omVolumeArgs, @Nonnull OmBucketInfo omBucketInfo) {\n+    super(omResponse, omKeyInfo, clientID, omVolumeArgs, omBucketInfo);\n+  }\n+\n+  @Override\n+  public void addToDBBatch(OMMetadataManager omMetadataManager,\n+      BatchOperation batchOperation) throws IOException {\n+\n+    OMFileRequest.addToOpenFileTable(omMetadataManager, batchOperation,\n+            getOmKeyInfo(), getClientID());\n+\n+    // update volume usedBytes.\n+    omMetadataManager.getVolumeTable().putWithBatch(batchOperation,\n+            omMetadataManager.getVolumeKey(getOmVolumeArgs().getVolume()),\n+            getOmVolumeArgs());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab5ea12ad5ed7d2b6bd3d8780866d11ee645733"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUxMTA5MA==", "bodyText": "Thanks @linyiqun  for the review comments. Fixed in latest commit.", "url": "https://github.com/apache/ozone/pull/1679#discussion_r539511090", "createdAt": "2020-12-09T17:38:31Z", "author": {"login": "rakeshadr"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/key/OMAllocateBlockResponseV1.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.response.key;\n+\n+import org.apache.hadoop.hdds.utils.db.BatchOperation;\n+import org.apache.hadoop.ozone.om.OMMetadataManager;\n+import org.apache.hadoop.ozone.om.helpers.OmBucketInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmKeyInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmVolumeArgs;\n+import org.apache.hadoop.ozone.om.request.file.OMFileRequest;\n+import org.apache.hadoop.ozone.om.response.CleanupTableInfo;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMResponse;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+\n+import static org.apache.hadoop.ozone.om.OmMetadataManagerImpl.OPEN_FILE_TABLE;\n+\n+/**\n+ * Response for AllocateBlock request layout version V1.\n+ */\n+@CleanupTableInfo(cleanupTables = {OPEN_FILE_TABLE})\n+public class OMAllocateBlockResponseV1 extends OMAllocateBlockResponse {\n+\n+  public OMAllocateBlockResponseV1(@Nonnull OMResponse omResponse,\n+      @Nonnull OmKeyInfo omKeyInfo, long clientID,\n+      @Nonnull OmVolumeArgs omVolumeArgs, @Nonnull OmBucketInfo omBucketInfo) {\n+    super(omResponse, omKeyInfo, clientID, omVolumeArgs, omBucketInfo);\n+  }\n+\n+  @Override\n+  public void addToDBBatch(OMMetadataManager omMetadataManager,\n+      BatchOperation batchOperation) throws IOException {\n+\n+    OMFileRequest.addToOpenFileTable(omMetadataManager, batchOperation,\n+            getOmKeyInfo(), getClientID());\n+\n+    // update volume usedBytes.\n+    omMetadataManager.getVolumeTable().putWithBatch(batchOperation,\n+            omMetadataManager.getVolumeKey(getOmVolumeArgs().getVolume()),\n+            getOmVolumeArgs());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ0MDU0NQ=="}, "originalCommit": {"oid": "8ab5ea12ad5ed7d2b6bd3d8780866d11ee645733"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDg5NDQxOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMAllocateBlockRequestV1.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMToxMTozN1rOIDkmsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODowMjo0MlrOIED5XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYxNjM2OQ==", "bodyText": "Question:\nV1 only supports filesystem.paths.enabled true only and old code will be used when filesystem.paths.enabled false.\nI think, we had a discussion some time back, can you provide info.\nIs that is the reason only code for true mode is only handled in V1?", "url": "https://github.com/apache/ozone/pull/1679#discussion_r540616369", "createdAt": "2020-12-11T01:11:37Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMAllocateBlockRequestV1.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.request.key;\n+\n+import org.apache.hadoop.ozone.om.OMMetadataManager;\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.helpers.OmBucketInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmKeyInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmVolumeArgs;\n+import org.apache.hadoop.ozone.om.helpers.OzoneFSUtils;\n+import org.apache.hadoop.ozone.om.request.file.OMFileRequest;\n+import org.apache.hadoop.ozone.om.response.OMClientResponse;\n+import org.apache.hadoop.ozone.om.response.key.OMAllocateBlockResponseV1;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMRequest;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMResponse;\n+import org.jetbrains.annotations.NotNull;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Iterator;\n+\n+/**\n+ * Handles allocate block request layout version V1.\n+ */\n+public class OMAllocateBlockRequestV1 extends OMAllocateBlockRequest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6130b4dae2c92a2eeb58b490d6c08f40bb4b32a"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA3MDY1OQ==", "bodyText": "Thanks @bharatviswa504  for the review comments.\nI've HDDS-4486 jira task to make proper feature configuration. Presently, I followed same pattern for the V1 classes. Hope thats fine for you?", "url": "https://github.com/apache/ozone/pull/1679#discussion_r541070659", "createdAt": "2020-12-11T16:29:49Z", "author": {"login": "rakeshadr"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMAllocateBlockRequestV1.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.request.key;\n+\n+import org.apache.hadoop.ozone.om.OMMetadataManager;\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.helpers.OmBucketInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmKeyInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmVolumeArgs;\n+import org.apache.hadoop.ozone.om.helpers.OzoneFSUtils;\n+import org.apache.hadoop.ozone.om.request.file.OMFileRequest;\n+import org.apache.hadoop.ozone.om.response.OMClientResponse;\n+import org.apache.hadoop.ozone.om.response.key.OMAllocateBlockResponseV1;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMRequest;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMResponse;\n+import org.jetbrains.annotations.NotNull;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Iterator;\n+\n+/**\n+ * Handles allocate block request layout version V1.\n+ */\n+public class OMAllocateBlockRequestV1 extends OMAllocateBlockRequest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYxNjM2OQ=="}, "originalCommit": {"oid": "d6130b4dae2c92a2eeb58b490d6c08f40bb4b32a"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEyOTA1Mg==", "bodyText": "Yes. I will take one final look at it (as previously skimmed the entire patch) and post my comments.", "url": "https://github.com/apache/ozone/pull/1679#discussion_r541129052", "createdAt": "2020-12-11T18:02:42Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMAllocateBlockRequestV1.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.request.key;\n+\n+import org.apache.hadoop.ozone.om.OMMetadataManager;\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.helpers.OmBucketInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmKeyInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmVolumeArgs;\n+import org.apache.hadoop.ozone.om.helpers.OzoneFSUtils;\n+import org.apache.hadoop.ozone.om.request.file.OMFileRequest;\n+import org.apache.hadoop.ozone.om.response.OMClientResponse;\n+import org.apache.hadoop.ozone.om.response.key.OMAllocateBlockResponseV1;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMRequest;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMResponse;\n+import org.jetbrains.annotations.NotNull;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Iterator;\n+\n+/**\n+ * Handles allocate block request layout version V1.\n+ */\n+public class OMAllocateBlockRequestV1 extends OMAllocateBlockRequest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYxNjM2OQ=="}, "originalCommit": {"oid": "d6130b4dae2c92a2eeb58b490d6c08f40bb4b32a"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDkyNTMzOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMAllocateBlockRequestV1.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMToyMjozNVrOIDk20Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxODowNzozMFrOIGY43w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYyMDQ5Nw==", "bodyText": "Not holding bucket lock during traversing of key to get parentID\nDo you think we will have a race condition with delete or any parent directories?", "url": "https://github.com/apache/ozone/pull/1679#discussion_r540620497", "createdAt": "2020-12-11T01:22:35Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMAllocateBlockRequestV1.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.request.key;\n+\n+import org.apache.hadoop.ozone.om.OMMetadataManager;\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.helpers.OmBucketInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmKeyInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmVolumeArgs;\n+import org.apache.hadoop.ozone.om.helpers.OzoneFSUtils;\n+import org.apache.hadoop.ozone.om.request.file.OMFileRequest;\n+import org.apache.hadoop.ozone.om.response.OMClientResponse;\n+import org.apache.hadoop.ozone.om.response.key.OMAllocateBlockResponseV1;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMRequest;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMResponse;\n+import org.jetbrains.annotations.NotNull;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Iterator;\n+\n+/**\n+ * Handles allocate block request layout version V1.\n+ */\n+public class OMAllocateBlockRequestV1 extends OMAllocateBlockRequest {\n+\n+  private static final Logger LOG =\n+          LoggerFactory.getLogger(OMAllocateBlockRequestV1.class);\n+\n+  public OMAllocateBlockRequestV1(OMRequest omRequest) {\n+    super(omRequest);\n+  }\n+\n+  protected OmKeyInfo getOpenKeyInfo(OMMetadataManager omMetadataManager,\n+      String openKeyName, String keyName) throws IOException {\n+    String fileName = OzoneFSUtils.getFileName(keyName);\n+    return OMFileRequest.getOmKeyInfoFromFileTable(true,\n+            omMetadataManager, openKeyName, fileName);\n+  }\n+\n+  protected String getOpenKeyName(String volumeName, String bucketName,\n+      String keyName, long clientID, OzoneManager ozoneManager)\n+          throws IOException {\n+    OMMetadataManager omMetadataManager = ozoneManager.getMetadataManager();\n+    String bucketKey = omMetadataManager.getBucketKey(volumeName, bucketName);\n+    OmBucketInfo omBucketInfo =\n+            omMetadataManager.getBucketTable().get(bucketKey);\n+    long bucketId = omBucketInfo.getObjectID();\n+    String fileName = OzoneFSUtils.getFileName(keyName);\n+    Iterator<Path> pathComponents = Paths.get(keyName).iterator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6130b4dae2c92a2eeb58b490d6c08f40bb4b32a"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYyMTM0NA==", "bodyText": "On a side note anyway I think it will be handled during commit Key anyway.\nThoughts?", "url": "https://github.com/apache/ozone/pull/1679#discussion_r540621344", "createdAt": "2020-12-11T01:24:54Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMAllocateBlockRequestV1.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.request.key;\n+\n+import org.apache.hadoop.ozone.om.OMMetadataManager;\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.helpers.OmBucketInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmKeyInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmVolumeArgs;\n+import org.apache.hadoop.ozone.om.helpers.OzoneFSUtils;\n+import org.apache.hadoop.ozone.om.request.file.OMFileRequest;\n+import org.apache.hadoop.ozone.om.response.OMClientResponse;\n+import org.apache.hadoop.ozone.om.response.key.OMAllocateBlockResponseV1;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMRequest;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMResponse;\n+import org.jetbrains.annotations.NotNull;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Iterator;\n+\n+/**\n+ * Handles allocate block request layout version V1.\n+ */\n+public class OMAllocateBlockRequestV1 extends OMAllocateBlockRequest {\n+\n+  private static final Logger LOG =\n+          LoggerFactory.getLogger(OMAllocateBlockRequestV1.class);\n+\n+  public OMAllocateBlockRequestV1(OMRequest omRequest) {\n+    super(omRequest);\n+  }\n+\n+  protected OmKeyInfo getOpenKeyInfo(OMMetadataManager omMetadataManager,\n+      String openKeyName, String keyName) throws IOException {\n+    String fileName = OzoneFSUtils.getFileName(keyName);\n+    return OMFileRequest.getOmKeyInfoFromFileTable(true,\n+            omMetadataManager, openKeyName, fileName);\n+  }\n+\n+  protected String getOpenKeyName(String volumeName, String bucketName,\n+      String keyName, long clientID, OzoneManager ozoneManager)\n+          throws IOException {\n+    OMMetadataManager omMetadataManager = ozoneManager.getMetadataManager();\n+    String bucketKey = omMetadataManager.getBucketKey(volumeName, bucketName);\n+    OmBucketInfo omBucketInfo =\n+            omMetadataManager.getBucketTable().get(bucketKey);\n+    long bucketId = omBucketInfo.getObjectID();\n+    String fileName = OzoneFSUtils.getFileName(keyName);\n+    Iterator<Path> pathComponents = Paths.get(keyName).iterator();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYyMDQ5Nw=="}, "originalCommit": {"oid": "d6130b4dae2c92a2eeb58b490d6c08f40bb4b32a"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEwNDY0Ng==", "bodyText": "Good catch. Yes, during commit it will throw exception. But somehow I feel it is safer to move #getOpenKeyInfo() under BUCKET_LOCK and this would avoid race conditions and will make consistency to the system. What do you say?\nOn the other side, moving getOpenKeyInfo() inside lock is adding any additional overhead and performance penalty ? If not, then I will move it inside the lock.", "url": "https://github.com/apache/ozone/pull/1679#discussion_r541104646", "createdAt": "2020-12-11T17:22:02Z", "author": {"login": "rakeshadr"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMAllocateBlockRequestV1.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.request.key;\n+\n+import org.apache.hadoop.ozone.om.OMMetadataManager;\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.helpers.OmBucketInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmKeyInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmVolumeArgs;\n+import org.apache.hadoop.ozone.om.helpers.OzoneFSUtils;\n+import org.apache.hadoop.ozone.om.request.file.OMFileRequest;\n+import org.apache.hadoop.ozone.om.response.OMClientResponse;\n+import org.apache.hadoop.ozone.om.response.key.OMAllocateBlockResponseV1;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMRequest;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMResponse;\n+import org.jetbrains.annotations.NotNull;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Iterator;\n+\n+/**\n+ * Handles allocate block request layout version V1.\n+ */\n+public class OMAllocateBlockRequestV1 extends OMAllocateBlockRequest {\n+\n+  private static final Logger LOG =\n+          LoggerFactory.getLogger(OMAllocateBlockRequestV1.class);\n+\n+  public OMAllocateBlockRequestV1(OMRequest omRequest) {\n+    super(omRequest);\n+  }\n+\n+  protected OmKeyInfo getOpenKeyInfo(OMMetadataManager omMetadataManager,\n+      String openKeyName, String keyName) throws IOException {\n+    String fileName = OzoneFSUtils.getFileName(keyName);\n+    return OMFileRequest.getOmKeyInfoFromFileTable(true,\n+            omMetadataManager, openKeyName, fileName);\n+  }\n+\n+  protected String getOpenKeyName(String volumeName, String bucketName,\n+      String keyName, long clientID, OzoneManager ozoneManager)\n+          throws IOException {\n+    OMMetadataManager omMetadataManager = ozoneManager.getMetadataManager();\n+    String bucketKey = omMetadataManager.getBucketKey(volumeName, bucketName);\n+    OmBucketInfo omBucketInfo =\n+            omMetadataManager.getBucketTable().get(bucketKey);\n+    long bucketId = omBucketInfo.getObjectID();\n+    String fileName = OzoneFSUtils.getFileName(keyName);\n+    Iterator<Path> pathComponents = Paths.get(keyName).iterator();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYyMDQ5Nw=="}, "originalCommit": {"oid": "d6130b4dae2c92a2eeb58b490d6c08f40bb4b32a"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEyODExNQ==", "bodyText": "Yes, I agree the ideal thing should be doing this under bucket lock whole operation. But that will have performance impact, as previously allocate block was done with out lock. Previous code has a similar issue, even then during key commit, it might not be found out, and also before we don't have atomic delete, so nothing can be really guaranteed.\nIn new approach deletes are atomic, and when delete only parent dir is removed, and childs are deleted asynchronously. With new approach, this will be figured out during key commit (As we iterate the entire path again). But it will have impact on performance, and client may write some additional block data even when parent dir's are removed. (This is the only a problem for fs semantics, not object-store semantics). This will be eventually figured out during the next allocateblock, keycommit.\nSo, here we need to make a choice, do we want to detect during allocate block or during commit Key.\ncc @mukul1987 @arp7 for comments\nReading code more, only bucket lock is not there when key check, so we should be okay I believe holding lock during traversal? ( I think this is changed during quota change, previously in allocate block we are not holding lock", "url": "https://github.com/apache/ozone/pull/1679#discussion_r541128115", "createdAt": "2020-12-11T18:01:04Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMAllocateBlockRequestV1.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.request.key;\n+\n+import org.apache.hadoop.ozone.om.OMMetadataManager;\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.helpers.OmBucketInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmKeyInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmVolumeArgs;\n+import org.apache.hadoop.ozone.om.helpers.OzoneFSUtils;\n+import org.apache.hadoop.ozone.om.request.file.OMFileRequest;\n+import org.apache.hadoop.ozone.om.response.OMClientResponse;\n+import org.apache.hadoop.ozone.om.response.key.OMAllocateBlockResponseV1;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMRequest;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMResponse;\n+import org.jetbrains.annotations.NotNull;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Iterator;\n+\n+/**\n+ * Handles allocate block request layout version V1.\n+ */\n+public class OMAllocateBlockRequestV1 extends OMAllocateBlockRequest {\n+\n+  private static final Logger LOG =\n+          LoggerFactory.getLogger(OMAllocateBlockRequestV1.class);\n+\n+  public OMAllocateBlockRequestV1(OMRequest omRequest) {\n+    super(omRequest);\n+  }\n+\n+  protected OmKeyInfo getOpenKeyInfo(OMMetadataManager omMetadataManager,\n+      String openKeyName, String keyName) throws IOException {\n+    String fileName = OzoneFSUtils.getFileName(keyName);\n+    return OMFileRequest.getOmKeyInfoFromFileTable(true,\n+            omMetadataManager, openKeyName, fileName);\n+  }\n+\n+  protected String getOpenKeyName(String volumeName, String bucketName,\n+      String keyName, long clientID, OzoneManager ozoneManager)\n+          throws IOException {\n+    OMMetadataManager omMetadataManager = ozoneManager.getMetadataManager();\n+    String bucketKey = omMetadataManager.getBucketKey(volumeName, bucketName);\n+    OmBucketInfo omBucketInfo =\n+            omMetadataManager.getBucketTable().get(bucketKey);\n+    long bucketId = omBucketInfo.getObjectID();\n+    String fileName = OzoneFSUtils.getFileName(keyName);\n+    Iterator<Path> pathComponents = Paths.get(keyName).iterator();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYyMDQ5Nw=="}, "originalCommit": {"oid": "d6130b4dae2c92a2eeb58b490d6c08f40bb4b32a"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU2MTg2Nw==", "bodyText": "As per the offline discussion with @mukul1987 and @arp7, it is not required to do the get parentID check under BUCKET_LOCK. With this current code flow, it won't make fast fail during race condition case, anyway later it will fail at the key commit operation time and there won't be any correctness issues. Basically it would be good to avoid any extra performance overhead and in future this part can be revisited if someone has any potential issue and required fast fail in allocate block request.\nFollowing is the expected behavior during race condition. Here op-2 arrived first in OM server and simultaneously op-3 also arrived in OM server.\n    op-1:   client-1) Creates openFile  - /a/b/c/d/file1 and written block1\n    op-2:   client-2) Invoked delete /a/b/c. This acquired BUCKET_LOCK and performing deletion.\n    op-3:   client-1) Invoked AllocateBlock - block2 for /a/b/c/d/file1. Since getParent(\"/a/b/c/d/file1\") is not under BUCKET_LOCK, it saw \"/a/b/c/d\" parent ID and proceeds to successfully allocate block2.\n    op-4:   client-1) CommitKey /a/b/c/d/file1 - Fail as parent doesn't exist.\n\n@bharatviswa504, does this sound good to you?", "url": "https://github.com/apache/ozone/pull/1679#discussion_r543561867", "createdAt": "2020-12-15T17:55:53Z", "author": {"login": "rakeshadr"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMAllocateBlockRequestV1.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.request.key;\n+\n+import org.apache.hadoop.ozone.om.OMMetadataManager;\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.helpers.OmBucketInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmKeyInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmVolumeArgs;\n+import org.apache.hadoop.ozone.om.helpers.OzoneFSUtils;\n+import org.apache.hadoop.ozone.om.request.file.OMFileRequest;\n+import org.apache.hadoop.ozone.om.response.OMClientResponse;\n+import org.apache.hadoop.ozone.om.response.key.OMAllocateBlockResponseV1;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMRequest;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMResponse;\n+import org.jetbrains.annotations.NotNull;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Iterator;\n+\n+/**\n+ * Handles allocate block request layout version V1.\n+ */\n+public class OMAllocateBlockRequestV1 extends OMAllocateBlockRequest {\n+\n+  private static final Logger LOG =\n+          LoggerFactory.getLogger(OMAllocateBlockRequestV1.class);\n+\n+  public OMAllocateBlockRequestV1(OMRequest omRequest) {\n+    super(omRequest);\n+  }\n+\n+  protected OmKeyInfo getOpenKeyInfo(OMMetadataManager omMetadataManager,\n+      String openKeyName, String keyName) throws IOException {\n+    String fileName = OzoneFSUtils.getFileName(keyName);\n+    return OMFileRequest.getOmKeyInfoFromFileTable(true,\n+            omMetadataManager, openKeyName, fileName);\n+  }\n+\n+  protected String getOpenKeyName(String volumeName, String bucketName,\n+      String keyName, long clientID, OzoneManager ozoneManager)\n+          throws IOException {\n+    OMMetadataManager omMetadataManager = ozoneManager.getMetadataManager();\n+    String bucketKey = omMetadataManager.getBucketKey(volumeName, bucketName);\n+    OmBucketInfo omBucketInfo =\n+            omMetadataManager.getBucketTable().get(bucketKey);\n+    long bucketId = omBucketInfo.getObjectID();\n+    String fileName = OzoneFSUtils.getFileName(keyName);\n+    Iterator<Path> pathComponents = Paths.get(keyName).iterator();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYyMDQ5Nw=="}, "originalCommit": {"oid": "d6130b4dae2c92a2eeb58b490d6c08f40bb4b32a"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU2Mzc2MQ==", "bodyText": "I am fine with that, if we have consensus.\nAs, previous thought of not acquiring bucket lock for allocateBlock is the same reason.", "url": "https://github.com/apache/ozone/pull/1679#discussion_r543563761", "createdAt": "2020-12-15T17:58:26Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMAllocateBlockRequestV1.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.request.key;\n+\n+import org.apache.hadoop.ozone.om.OMMetadataManager;\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.helpers.OmBucketInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmKeyInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmVolumeArgs;\n+import org.apache.hadoop.ozone.om.helpers.OzoneFSUtils;\n+import org.apache.hadoop.ozone.om.request.file.OMFileRequest;\n+import org.apache.hadoop.ozone.om.response.OMClientResponse;\n+import org.apache.hadoop.ozone.om.response.key.OMAllocateBlockResponseV1;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMRequest;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMResponse;\n+import org.jetbrains.annotations.NotNull;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Iterator;\n+\n+/**\n+ * Handles allocate block request layout version V1.\n+ */\n+public class OMAllocateBlockRequestV1 extends OMAllocateBlockRequest {\n+\n+  private static final Logger LOG =\n+          LoggerFactory.getLogger(OMAllocateBlockRequestV1.class);\n+\n+  public OMAllocateBlockRequestV1(OMRequest omRequest) {\n+    super(omRequest);\n+  }\n+\n+  protected OmKeyInfo getOpenKeyInfo(OMMetadataManager omMetadataManager,\n+      String openKeyName, String keyName) throws IOException {\n+    String fileName = OzoneFSUtils.getFileName(keyName);\n+    return OMFileRequest.getOmKeyInfoFromFileTable(true,\n+            omMetadataManager, openKeyName, fileName);\n+  }\n+\n+  protected String getOpenKeyName(String volumeName, String bucketName,\n+      String keyName, long clientID, OzoneManager ozoneManager)\n+          throws IOException {\n+    OMMetadataManager omMetadataManager = ozoneManager.getMetadataManager();\n+    String bucketKey = omMetadataManager.getBucketKey(volumeName, bucketName);\n+    OmBucketInfo omBucketInfo =\n+            omMetadataManager.getBucketTable().get(bucketKey);\n+    long bucketId = omBucketInfo.getObjectID();\n+    String fileName = OzoneFSUtils.getFileName(keyName);\n+    Iterator<Path> pathComponents = Paths.get(keyName).iterator();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYyMDQ5Nw=="}, "originalCommit": {"oid": "d6130b4dae2c92a2eeb58b490d6c08f40bb4b32a"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU3MDE0Mw==", "bodyText": "Thanks @bharatviswa504 for the quick response.", "url": "https://github.com/apache/ozone/pull/1679#discussion_r543570143", "createdAt": "2020-12-15T18:07:30Z", "author": {"login": "rakeshadr"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMAllocateBlockRequestV1.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.request.key;\n+\n+import org.apache.hadoop.ozone.om.OMMetadataManager;\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.helpers.OmBucketInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmKeyInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmVolumeArgs;\n+import org.apache.hadoop.ozone.om.helpers.OzoneFSUtils;\n+import org.apache.hadoop.ozone.om.request.file.OMFileRequest;\n+import org.apache.hadoop.ozone.om.response.OMClientResponse;\n+import org.apache.hadoop.ozone.om.response.key.OMAllocateBlockResponseV1;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMRequest;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMResponse;\n+import org.jetbrains.annotations.NotNull;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Iterator;\n+\n+/**\n+ * Handles allocate block request layout version V1.\n+ */\n+public class OMAllocateBlockRequestV1 extends OMAllocateBlockRequest {\n+\n+  private static final Logger LOG =\n+          LoggerFactory.getLogger(OMAllocateBlockRequestV1.class);\n+\n+  public OMAllocateBlockRequestV1(OMRequest omRequest) {\n+    super(omRequest);\n+  }\n+\n+  protected OmKeyInfo getOpenKeyInfo(OMMetadataManager omMetadataManager,\n+      String openKeyName, String keyName) throws IOException {\n+    String fileName = OzoneFSUtils.getFileName(keyName);\n+    return OMFileRequest.getOmKeyInfoFromFileTable(true,\n+            omMetadataManager, openKeyName, fileName);\n+  }\n+\n+  protected String getOpenKeyName(String volumeName, String bucketName,\n+      String keyName, long clientID, OzoneManager ozoneManager)\n+          throws IOException {\n+    OMMetadataManager omMetadataManager = ozoneManager.getMetadataManager();\n+    String bucketKey = omMetadataManager.getBucketKey(volumeName, bucketName);\n+    OmBucketInfo omBucketInfo =\n+            omMetadataManager.getBucketTable().get(bucketKey);\n+    long bucketId = omBucketInfo.getObjectID();\n+    String fileName = OzoneFSUtils.getFileName(keyName);\n+    Iterator<Path> pathComponents = Paths.get(keyName).iterator();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYyMDQ5Nw=="}, "originalCommit": {"oid": "d6130b4dae2c92a2eeb58b490d6c08f40bb4b32a"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODQ5NzIyOnYy", "diffSide": "LEFT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODoxNDowOVrOIEETag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNTozNzo0NFrOIJMz4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEzNTcyMg==", "bodyText": "Why do we need this copyObject here?\nBecause get() always returns new object. (if it exists in cache, it returns copyObject, if in DB, get new parsed Object from bytes.\n  public VALUE get(KEY key) throws IOException {\n    // Here the metadata lock will guarantee that cache is not updated for same\n    // key during get key.\n\n    CacheResult<CacheValue<VALUE>> cacheResult =\n        cache.lookup(new CacheKey<>(key));\n\n    if (cacheResult.getCacheStatus() == EXISTS) {\n      return codecRegistry.copyObject(cacheResult.getValue().getCacheValue(),\n          valueType);\n    } else if (cacheResult.getCacheStatus() == NOT_EXIST) {\n      return null;\n    } else {\n      return getFromTable(key);\n    }\n  }", "url": "https://github.com/apache/ozone/pull/1679#discussion_r541135722", "createdAt": "2020-12-11T18:14:09Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileRequest.java", "diffHunk": "@@ -556,9 +560,10 @@ public static OmKeyInfo getOmKeyInfoFromFileTable(boolean openFileTable,\n     // For example, the user given key path is '/a/b/c/d/e/file1', then in DB\n     // keyName field stores only the leaf node name, which is 'file1'.\n     if (dbOmKeyInfo != null) {\n-      dbOmKeyInfo.setKeyName(keyName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6130b4dae2c92a2eeb58b490d6c08f40bb4b32a"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUxNzk4NQ==", "bodyText": "Agreed, Done the changes!", "url": "https://github.com/apache/ozone/pull/1679#discussion_r546517985", "createdAt": "2020-12-21T05:37:44Z", "author": {"login": "rakeshadr"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileRequest.java", "diffHunk": "@@ -556,9 +560,10 @@ public static OmKeyInfo getOmKeyInfoFromFileTable(boolean openFileTable,\n     // For example, the user given key path is '/a/b/c/d/e/file1', then in DB\n     // keyName field stores only the leaf node name, which is 'file1'.\n     if (dbOmKeyInfo != null) {\n-      dbOmKeyInfo.setKeyName(keyName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEzNTcyMg=="}, "originalCommit": {"oid": "d6130b4dae2c92a2eeb58b490d6c08f40bb4b32a"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODUxMTk5OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileRequest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODoxNzo0NVrOIEEb0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNTozNzo0OVrOIJMz7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEzNzg3NQ==", "bodyText": "Minor: Comment says Returns its parentID.\nIn code we just check if lastComponent is true and fileSystem enabled, we return exception.\nAnd also as current V1 always assumes fs enabled true, do we need && ozoneManager.getEnableFileSystemPaths() check?\nAnd also these 3 lines can be in the calling method, as it is not a utility method which is called by different classes.", "url": "https://github.com/apache/ozone/pull/1679#discussion_r541137875", "createdAt": "2020-12-11T18:17:45Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileRequest.java", "diffHunk": "@@ -851,4 +856,72 @@ private static boolean checkSubFileExists(OmKeyInfo omKeyInfo,\n   public static boolean isImmediateChild(long parentId, long ancestorId) {\n     return parentId == ancestorId;\n   }\n+\n+\n+  /**\n+   * Check for directory exists with same name, if it exists throw error.\n+   *\n+   * @param keyName                  key name\n+   * @param ozoneManager             Ozone Manager\n+   * @param reachedLastPathComponent true if the path component is a fileName\n+   * @throws IOException if directory exists with same name\n+   */\n+  private static void checkDirectoryAlreadyExists(String keyName,\n+      OzoneManager ozoneManager, boolean reachedLastPathComponent)\n+          throws IOException {\n+    // Reached last component, which would be a file. Returns its parentID.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6130b4dae2c92a2eeb58b490d6c08f40bb4b32a"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUxNzk5OA==", "bodyText": "Agreed, Done the changes!", "url": "https://github.com/apache/ozone/pull/1679#discussion_r546517998", "createdAt": "2020-12-21T05:37:49Z", "author": {"login": "rakeshadr"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileRequest.java", "diffHunk": "@@ -851,4 +856,72 @@ private static boolean checkSubFileExists(OmKeyInfo omKeyInfo,\n   public static boolean isImmediateChild(long parentId, long ancestorId) {\n     return parentId == ancestorId;\n   }\n+\n+\n+  /**\n+   * Check for directory exists with same name, if it exists throw error.\n+   *\n+   * @param keyName                  key name\n+   * @param ozoneManager             Ozone Manager\n+   * @param reachedLastPathComponent true if the path component is a fileName\n+   * @throws IOException if directory exists with same name\n+   */\n+  private static void checkDirectoryAlreadyExists(String keyName,\n+      OzoneManager ozoneManager, boolean reachedLastPathComponent)\n+          throws IOException {\n+    // Reached last component, which would be a file. Returns its parentID.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEzNzg3NQ=="}, "originalCommit": {"oid": "d6130b4dae2c92a2eeb58b490d6c08f40bb4b32a"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODU3ODk4OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMAllocateBlockRequest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODozNToyNlrOIEFDPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODozNToyNlrOIEFDPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0Nzk2NA==", "bodyText": "We don't update omVolumeArgs, but still reading and passing to Response, which is not required.\nNot related to your patch BTW, we can fix this in master and get to branch.", "url": "https://github.com/apache/ozone/pull/1679#discussion_r541147964", "createdAt": "2020-12-11T18:35:26Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMAllocateBlockRequest.java", "diffHunk": "@@ -216,17 +216,15 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       openKeyInfo.setUpdateID(trxnLogIndex, ozoneManager.isRatisEnabled());\n \n       // Add to cache.\n-      omMetadataManager.getOpenKeyTable().addCacheEntry(\n-          new CacheKey<>(openKeyName),\n-          new CacheValue<>(Optional.of(openKeyInfo), trxnLogIndex));\n-\n+      addOpenTableCacheEntry(trxnLogIndex, omMetadataManager, openKeyName,\n+          openKeyInfo);\n       omBucketInfo.incrUsedBytes(preAllocatedSpace);\n \n       omResponse.setAllocateBlockResponse(AllocateBlockResponse.newBuilder()\n           .setKeyLocation(blockLocation).build());\n-      omClientResponse = new OMAllocateBlockResponse(omResponse.build(),\n-          openKeyInfo, clientID, omVolumeArgs, omBucketInfo.copyObject());\n \n+      omClientResponse = getOmClientResponse(clientID, omResponse,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6130b4dae2c92a2eeb58b490d6c08f40bb4b32a"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODYzNjk0OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/response/key/TestOMAllocateBlockResponseV1.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODo1MToxM1rOIEFlDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNTozODoxM1rOIJM0Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE1NjYyMw==", "bodyText": "Not understood this comment and why we need to do this, and is there in many tests, can you provide info why we need to do this?", "url": "https://github.com/apache/ozone/pull/1679#discussion_r541156623", "createdAt": "2020-12-11T18:51:13Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/response/key/TestOMAllocateBlockResponseV1.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.response.key;\n+\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+import org.apache.hadoop.ozone.om.OMConfigKeys;\n+import org.apache.hadoop.ozone.om.helpers.OmBucketInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmKeyInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmVolumeArgs;\n+import org.apache.hadoop.ozone.om.ratis.utils.OzoneManagerRatisUtils;\n+import org.apache.hadoop.ozone.om.request.TestOMRequestUtils;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMResponse;\n+import org.apache.hadoop.util.Time;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * Tests OMAllocateBlockResponse layout version V1.\n+ */\n+public class TestOMAllocateBlockResponseV1\n+        extends TestOMAllocateBlockResponse {\n+\n+  // logical ID, which really doesn't exist in dirTable\n+  private long parentID = 10;\n+  private String fileName = \"file1\";\n+\n+  protected OmKeyInfo createOmKeyInfo() throws Exception {\n+    // need to initialize parentID\n+    String parentDir = keyName;\n+    keyName = parentDir + OzoneConsts.OM_KEY_PREFIX + fileName;\n+\n+    long txnId = 50;\n+    long objectId = parentID + 1;\n+\n+    OmKeyInfo omKeyInfoV1 =\n+            TestOMRequestUtils.createOmKeyInfo(volumeName, bucketName, keyName,\n+                    HddsProtos.ReplicationType.RATIS,\n+                    HddsProtos.ReplicationFactor.ONE, objectId, parentID, txnId,\n+                    Time.now());\n+    return omKeyInfoV1;\n+  }\n+\n+  protected String getOpenKey() throws Exception {\n+    return omMetadataManager.getOpenFileName(\n+            parentID, fileName, clientID);\n+  }\n+\n+  @NotNull\n+  protected OMAllocateBlockResponse getOmAllocateBlockResponse(\n+          OmKeyInfo omKeyInfo, OmVolumeArgs omVolumeArgs,\n+          OmBucketInfo omBucketInfo, OMResponse omResponse) {\n+    return new OMAllocateBlockResponseV1(omResponse, omKeyInfo, clientID,\n+            omVolumeArgs, omBucketInfo);\n+  }\n+\n+  @NotNull\n+  @Override\n+  protected OzoneConfiguration getOzoneConfiguration() {\n+    OzoneConfiguration config = super.getOzoneConfiguration();\n+    config.set(OMConfigKeys.OZONE_OM_LAYOUT_VERSION, \"V1\");\n+    // OzoneManager#start() is not invoked in this test cases. Hence need to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6130b4dae2c92a2eeb58b490d6c08f40bb4b32a"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE1NzczNA==", "bodyText": "Is this for getKeyTable where we used this in metadatamanager?", "url": "https://github.com/apache/ozone/pull/1679#discussion_r541157734", "createdAt": "2020-12-11T18:53:05Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/response/key/TestOMAllocateBlockResponseV1.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.response.key;\n+\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+import org.apache.hadoop.ozone.om.OMConfigKeys;\n+import org.apache.hadoop.ozone.om.helpers.OmBucketInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmKeyInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmVolumeArgs;\n+import org.apache.hadoop.ozone.om.ratis.utils.OzoneManagerRatisUtils;\n+import org.apache.hadoop.ozone.om.request.TestOMRequestUtils;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMResponse;\n+import org.apache.hadoop.util.Time;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * Tests OMAllocateBlockResponse layout version V1.\n+ */\n+public class TestOMAllocateBlockResponseV1\n+        extends TestOMAllocateBlockResponse {\n+\n+  // logical ID, which really doesn't exist in dirTable\n+  private long parentID = 10;\n+  private String fileName = \"file1\";\n+\n+  protected OmKeyInfo createOmKeyInfo() throws Exception {\n+    // need to initialize parentID\n+    String parentDir = keyName;\n+    keyName = parentDir + OzoneConsts.OM_KEY_PREFIX + fileName;\n+\n+    long txnId = 50;\n+    long objectId = parentID + 1;\n+\n+    OmKeyInfo omKeyInfoV1 =\n+            TestOMRequestUtils.createOmKeyInfo(volumeName, bucketName, keyName,\n+                    HddsProtos.ReplicationType.RATIS,\n+                    HddsProtos.ReplicationFactor.ONE, objectId, parentID, txnId,\n+                    Time.now());\n+    return omKeyInfoV1;\n+  }\n+\n+  protected String getOpenKey() throws Exception {\n+    return omMetadataManager.getOpenFileName(\n+            parentID, fileName, clientID);\n+  }\n+\n+  @NotNull\n+  protected OMAllocateBlockResponse getOmAllocateBlockResponse(\n+          OmKeyInfo omKeyInfo, OmVolumeArgs omVolumeArgs,\n+          OmBucketInfo omBucketInfo, OMResponse omResponse) {\n+    return new OMAllocateBlockResponseV1(omResponse, omKeyInfo, clientID,\n+            omVolumeArgs, omBucketInfo);\n+  }\n+\n+  @NotNull\n+  @Override\n+  protected OzoneConfiguration getOzoneConfiguration() {\n+    OzoneConfiguration config = super.getOzoneConfiguration();\n+    config.set(OMConfigKeys.OZONE_OM_LAYOUT_VERSION, \"V1\");\n+    // OzoneManager#start() is not invoked in this test cases. Hence need to", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE1NjYyMw=="}, "originalCommit": {"oid": "d6130b4dae2c92a2eeb58b490d6c08f40bb4b32a"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUxODExNQ==", "bodyText": "Yes, its basically for initializing prefix tables. I've updated comment, hope its clear now.", "url": "https://github.com/apache/ozone/pull/1679#discussion_r546518115", "createdAt": "2020-12-21T05:38:13Z", "author": {"login": "rakeshadr"}, "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/response/key/TestOMAllocateBlockResponseV1.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.response.key;\n+\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+import org.apache.hadoop.ozone.om.OMConfigKeys;\n+import org.apache.hadoop.ozone.om.helpers.OmBucketInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmKeyInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmVolumeArgs;\n+import org.apache.hadoop.ozone.om.ratis.utils.OzoneManagerRatisUtils;\n+import org.apache.hadoop.ozone.om.request.TestOMRequestUtils;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMResponse;\n+import org.apache.hadoop.util.Time;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * Tests OMAllocateBlockResponse layout version V1.\n+ */\n+public class TestOMAllocateBlockResponseV1\n+        extends TestOMAllocateBlockResponse {\n+\n+  // logical ID, which really doesn't exist in dirTable\n+  private long parentID = 10;\n+  private String fileName = \"file1\";\n+\n+  protected OmKeyInfo createOmKeyInfo() throws Exception {\n+    // need to initialize parentID\n+    String parentDir = keyName;\n+    keyName = parentDir + OzoneConsts.OM_KEY_PREFIX + fileName;\n+\n+    long txnId = 50;\n+    long objectId = parentID + 1;\n+\n+    OmKeyInfo omKeyInfoV1 =\n+            TestOMRequestUtils.createOmKeyInfo(volumeName, bucketName, keyName,\n+                    HddsProtos.ReplicationType.RATIS,\n+                    HddsProtos.ReplicationFactor.ONE, objectId, parentID, txnId,\n+                    Time.now());\n+    return omKeyInfoV1;\n+  }\n+\n+  protected String getOpenKey() throws Exception {\n+    return omMetadataManager.getOpenFileName(\n+            parentID, fileName, clientID);\n+  }\n+\n+  @NotNull\n+  protected OMAllocateBlockResponse getOmAllocateBlockResponse(\n+          OmKeyInfo omKeyInfo, OmVolumeArgs omVolumeArgs,\n+          OmBucketInfo omBucketInfo, OMResponse omResponse) {\n+    return new OMAllocateBlockResponseV1(omResponse, omKeyInfo, clientID,\n+            omVolumeArgs, omBucketInfo);\n+  }\n+\n+  @NotNull\n+  @Override\n+  protected OzoneConfiguration getOzoneConfiguration() {\n+    OzoneConfiguration config = super.getOzoneConfiguration();\n+    config.set(OMConfigKeys.OZONE_OM_LAYOUT_VERSION, \"V1\");\n+    // OzoneManager#start() is not invoked in this test cases. Hence need to", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE1NjYyMw=="}, "originalCommit": {"oid": "d6130b4dae2c92a2eeb58b490d6c08f40bb4b32a"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzODkwMDE1OnYy", "diffSide": "LEFT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMAllocateBlockRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMjo1Mzo1OVrOIJoZsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwMjowODo0OVrOIJr2xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk3MDAzNQ==", "bodyText": "Just space only changes.", "url": "https://github.com/apache/ozone/pull/1679#discussion_r546970035", "createdAt": "2020-12-21T22:53:59Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMAllocateBlockRequest.java", "diffHunk": "@@ -219,14 +219,13 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       omMetadataManager.getOpenKeyTable().addCacheEntry(\n           new CacheKey<>(openKeyName),\n           new CacheValue<>(Optional.of(openKeyInfo), trxnLogIndex));\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82cec8d1873f6d5cd1a8210076eba623996f665e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAyNjYzMA==", "bodyText": "Removed unnecessary spaces!", "url": "https://github.com/apache/ozone/pull/1679#discussion_r547026630", "createdAt": "2020-12-22T02:08:49Z", "author": {"login": "rakeshadr"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMAllocateBlockRequest.java", "diffHunk": "@@ -219,14 +219,13 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       omMetadataManager.getOpenKeyTable().addCacheEntry(\n           new CacheKey<>(openKeyName),\n           new CacheValue<>(Optional.of(openKeyInfo), trxnLogIndex));\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk3MDAzNQ=="}, "originalCommit": {"oid": "82cec8d1873f6d5cd1a8210076eba623996f665e"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4592, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}