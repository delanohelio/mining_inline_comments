{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyNzI5OTI4", "number": 1494, "title": "HDDS-4330. Bootstrap new OM node", "bodyText": "What changes were proposed in this pull request?\nIn a ratis enabled OM cluster, add support to bootstrap a new OM node and add it to OM ratis ring.\u00a0\nFirst step would be to update the ozone-site.xml with the configs (nodeId, address, ports etc.) for the new OM.\nThe new node(s) should be started in BOOTSTRAP mode using the following command. This command will also initialize the OM. Hence, no need to run om init command before this command.\nozone om --bootstrap\nWhen this command is run, it starts the OM in bootstrap mode. The new OM starts up its Ratis server and sends a request to existing OMs to perform a SetConfiguration operation. After the SetConfiguration operation is successful, the new OM is bootstrapped and part of the OM Ratis ring.\nWhat is the link to the Apache JIRA\nhttps://issues.apache.org/jira/browse/HDDS-4330\nHow was this patch tested?\nAdded unit tests", "createdAt": "2020-10-13T19:21:29Z", "url": "https://github.com/apache/ozone/pull/1494", "merged": true, "mergeCommit": {"oid": "839fc94e1b09f93a8fe3f3aee025332ad1997932"}, "closed": true, "closedAt": "2021-07-23T16:18:51Z", "author": {"login": "hanishakoneru"}, "timelineItems": {"totalCount": 40, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdefcGngBqjQwMjMwNTY3NjI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABes9S99gFqTcxMzA2ODE0NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7cdf67ca35daf4f6f08fbbdb4c4b1f73dec30b12", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/7cdf67ca35daf4f6f08fbbdb4c4b1f73dec30b12", "committedDate": "2020-10-13T18:17:43Z", "message": "HDDS-4330. Bootstrap new OM node"}, "afterCommit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/c44fba2cf4b6287dff743268335ac17c38db5d45", "committedDate": "2020-11-20T22:52:25Z", "message": "unit tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwNjc0OTAx", "url": "https://github.com/apache/ozone/pull/1494#pullrequestreview-550674901", "createdAt": "2020-12-12T01:36:18Z", "commit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwMTozNjoxOFrOIEYs-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwMTozNjoxOFrOIEYs-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ2OTk0Ng==", "bodyText": "General question why are specializing IllegalArgumentException if no other state/behavior added to it :)", "url": "https://github.com/apache/ozone/pull/1494#discussion_r541469946", "createdAt": "2020-12-12T01:36:18Z", "author": {"login": "swagle"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OzoneIllegalArgumentException.java", "diffHunk": "@@ -37,4 +37,8 @@\n   public OzoneIllegalArgumentException(final String message) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwNjc2NTA2", "url": "https://github.com/apache/ozone/pull/1494#pullrequestreview-550676506", "createdAt": "2020-12-12T01:49:13Z", "commit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwMTo0OToxNFrOIEY3OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwMTo0OToxNFrOIEY3OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ3MjU2OA==", "bodyText": "Why is the number of newOMs an argument? I was expecting this to read based on the new HA configuration", "url": "https://github.com/apache/ozone/pull/1494#discussion_r541472568", "createdAt": "2020-12-12T01:49:14Z", "author": {"login": "swagle"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/MiniOzoneHAClusterImpl.java", "diffHunk": "@@ -442,7 +457,169 @@ private void initHAConfig(int basePort) throws IOException {\n         conf.setInt(omRatisPortKey, port + 4);\n       }\n \n-      conf.set(omNodesKey, omNodesKeyValue.substring(1));\n+      conf.set(omNodesKey, String.join(\",\", omNodeIds));\n+    }\n+  }\n+\n+  /**\n+   * Bootstrap new OMs and add them to existing OM ring.\n+   * @param numNewOMs number of new OMs to bootstrap\n+   * @return list of new OMs nodeIds\n+   */\n+  public List<String> bootstrapOzoneManagers(int numNewOMs) throws IOException,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45"}, "originalPosition": 139}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyMTA5NTI4", "url": "https://github.com/apache/ozone/pull/1494#pullrequestreview-552109528", "createdAt": "2020-12-15T05:07:48Z", "commit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNTowNzo0OVrOIF5J_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNTowNzo0OVrOIF5J_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA1MDIzNw==", "bodyText": "nit: old log4j habit, we should not need this check as parameters are evaluated only if debug is enabled with this format. same is true for line 384", "url": "https://github.com/apache/ozone/pull/1494#discussion_r543050237", "createdAt": "2020-12-15T05:07:49Z", "author": {"login": "fapifta"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerRatisServer.java", "diffHunk": "@@ -137,6 +141,59 @@ public OMResponse submitRequest(OMRequest omRequest) throws ServiceException {\n     return processReply(omRequest, raftClientReply);\n   }\n \n+  /**\n+   * Add a new OM to the Ratis ring.\n+   * @return true if the new OM is successfully added to the ratis ring,\n+   * false otherwise.\n+   */\n+  public boolean bootstrapNewOMs(List<OMNodeDetails> newOMNodes) {\n+    StringBuilder newOMNodeIdsBuilder = new StringBuilder();\n+    newOMNodes.stream().forEach(newOMNode ->\n+        newOMNodeIdsBuilder.append(\", \").append(newOMNode.getOMNodeId()));\n+    String newOMNodeIds = newOMNodeIdsBuilder.toString().substring(2);\n+    LOG.info(\"Bootstrapping new OM(s): {}\", newOMNodeIds);\n+\n+    List<RaftPeer> newRaftPeerList = new ArrayList<>();\n+    newRaftPeerList.addAll(raftPeers);\n+\n+    for (OMNodeDetails newOMNode : newOMNodes) {\n+      String newOMNodeId = newOMNode.getOMNodeId();\n+      RaftPeerId newOMRaftPeerId = RaftPeerId.valueOf(newOMNodeId);\n+      InetSocketAddress newOMRatisAddr = new InetSocketAddress(\n+          newOMNode.getHostName(), newOMNode.getRatisPort());\n+\n+      newRaftPeerList.add(RaftPeer.newBuilder()\n+          .setId(newOMRaftPeerId)\n+          .setAddress(newOMRatisAddr)\n+          .build());\n+    }\n+\n+    if (LOG.isDebugEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyMTA5NjEw", "url": "https://github.com/apache/ozone/pull/1494#pullrequestreview-552109610", "createdAt": "2020-12-15T05:08:03Z", "commit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNTowODowM1rOIF5KOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNTowODowM1rOIF5KOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA1MDI5Ng==", "bodyText": "nit: again old log4j habit", "url": "https://github.com/apache/ozone/pull/1494#discussion_r543050296", "createdAt": "2020-12-15T05:08:03Z", "author": {"login": "fapifta"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java", "diffHunk": "@@ -164,6 +167,27 @@ public void notifyTermIndexUpdated(long currentTerm, long index) {\n     computeAndUpdateLastAppliedIndex(index, currentTerm, null, false);\n   }\n \n+  /**\n+   * Called from Ratis to notify state machine about configuration changes.\n+   */\n+  @Override\n+  public void notifyConfigurationChanged(long term, long index,\n+      RaftConfigurationProto newRaftConfiguration) {\n+    List<RaftPeerProto> newPeers = newRaftConfiguration.getPeersList();\n+    LOG.info(\"Received Configuration change notification from Ratis. New Peer\" +\n+        \" list:\\n{}\", newPeers);\n+    for (RaftProtos.RaftPeerProto raftPeerProto : newPeers) {\n+      String omNodeId = RaftPeerId.valueOf(raftPeerProto.getId()).toString();\n+      if (!ozoneManager.doesPeerExist(omNodeId)) {\n+        LOG.info(\"Adding new OM {} to the cluster.\", omNodeId);\n+        ozoneManager.addNewOMNode(omNodeId);\n+      } else if(LOG.isDebugEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyNzcwNjcz", "url": "https://github.com/apache/ozone/pull/1494#pullrequestreview-552770673", "createdAt": "2020-12-15T18:55:15Z", "commit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxODo1NToxNlrOIGa32g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMzoyNTowN1rOIGkiBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYwMjY1MA==", "bodyText": "Minor: Add javadoc", "url": "https://github.com/apache/ozone/pull/1494#discussion_r543602650", "createdAt": "2020-12-15T18:55:16Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/protocolPB/OmTransport.java", "diffHunk": "@@ -33,6 +35,9 @@\n    */\n   OMResponse submitRequest(OMRequest payload) throws IOException;\n \n+  BootstrapResponse bootstrapRequest(BootstrapRequest bootstrapRequest)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYwNTI0OA==", "bodyText": "In Hadoop3OMTransport, we have done some additional steps which are missing here.\n(And also right now Hadoop27OMTransport does not support OM HA, not related to this, is that is the reason for not adding here, as failOverproxy is not configured in Hadoop2 module?)", "url": "https://github.com/apache/ozone/pull/1494#discussion_r543605248", "createdAt": "2020-12-15T18:59:07Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozonefs-hadoop2/src/main/java/org/apache/hadoop/fs/ozone/Hadoop27RpcTransport.java", "diffHunk": "@@ -71,6 +73,16 @@ public OMResponse submitRequest(OMRequest payload) throws IOException {\n     }\n   }\n \n+  @Override\n+  public BootstrapResponse bootstrapRequest(BootstrapRequest bootstrapRequest)\n+      throws IOException {\n+    try {\n+      return proxy.bootstrap(NULL_RPC_CONTROLLER, bootstrapRequest);\n+    } catch (ServiceException e) {\n+      throw new IOException(\"Service exception during the bootstrap\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYxMTM0MQ==", "bodyText": "We are directly using proto classes, can we have helper classes like how we have done for all other requests.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r543611341", "createdAt": "2020-12-15T19:05:58Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/protocolPB/OzoneManagerProtocolClientSideTranslatorPB.java", "diffHunk": "@@ -192,6 +195,51 @@ public void close() throws IOException {\n     transport.close();\n   }\n \n+\n+  public List<ServiceInfo> getServiceList() throws IOException {\n+    ServiceListRequest req = ServiceListRequest.newBuilder().build();\n+\n+    OMRequest omRequest = createOMRequest(Type.ServiceList)\n+        .setServiceListRequest(req)\n+        .build();\n+\n+    final ServiceListResponse resp = handleError(submitRequest(omRequest))\n+        .getServiceListResponse();\n+\n+    return resp.getServiceInfoList().stream()\n+        .map(ServiceInfo::getFromProtobuf)\n+        .collect(Collectors.toList());\n+\n+  }\n+\n+  @Override\n+  public ServiceInfoEx getServiceInfo() throws IOException {\n+    ServiceListRequest req = ServiceListRequest.newBuilder().build();\n+\n+    OMRequest omRequest = createOMRequest(Type.ServiceList)\n+        .setServiceListRequest(req)\n+        .build();\n+\n+    final ServiceListResponse resp = handleError(submitRequest(omRequest))\n+        .getServiceListResponse();\n+\n+    return new ServiceInfoEx(\n+        resp.getServiceInfoList().stream()\n+            .map(ServiceInfo::getFromProtobuf)\n+            .collect(Collectors.toList()),\n+        resp.getCaCertificate());\n+  }\n+\n+  @Override\n+  public boolean bootstrap(List<OMNodeInfo> omNodeInfos) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYzODA5NQ==", "bodyText": "This is newly bootstrapped OM, so when it starts it has loaded new config, why do we need to do this?", "url": "https://github.com/apache/ozone/pull/1494#discussion_r543638095", "createdAt": "2020-12-15T19:46:28Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -2707,6 +2728,57 @@ public ServiceInfoEx getServiceInfo() throws IOException {\n     return new ServiceInfoEx(getServiceList(), caCertPem);\n   }\n \n+  @Override\n+  public boolean bootstrap(List<OMNodeInfo> omNodeInfos) throws IOException {\n+    LOG.error(\"OM bootstrap command should be received via the RPC server\");\n+    throw new UnsupportedOperationException(\"OM bootstrap command should be \" +\n+        \"received via the RPC server\");\n+  }\n+\n+  /**\n+   * Add a new OM Node to the HA cluster.\n+   */\n+  public void addNewOMNode(String newOMNodeId) {\n+    OMNodeDetails newOMNodeDetails = OMNodeDetails.getOMNodeDetailsFromConf(\n+        getConfiguration(), getOMServiceId(), newOMNodeId);\n+    if (newOMNodeDetails == null) {\n+      // Load new configuration object to read in new peer information\n+      setConfiguration(new OzoneConfiguration());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY0Njk5NA==", "bodyText": "We are not using httpAddrress, httpsAddress, rpcPort, serviceID which are sent thru bootStraprequest\nAnd in notifyConfigurationChanged finally reading from the current OM config. So, I see there is no real use in sending these information only required thing need looks like nodeID. Not sure If I am missing something here.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r543646994", "createdAt": "2020-12-15T19:59:59Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerRatisServer.java", "diffHunk": "@@ -137,6 +141,59 @@ public OMResponse submitRequest(OMRequest omRequest) throws ServiceException {\n     return processReply(omRequest, raftClientReply);\n   }\n \n+  /**\n+   * Add a new OM to the Ratis ring.\n+   * @return true if the new OM is successfully added to the ratis ring,\n+   * false otherwise.\n+   */\n+  public boolean bootstrapNewOMs(List<OMNodeDetails> newOMNodes) {\n+    StringBuilder newOMNodeIdsBuilder = new StringBuilder();\n+    newOMNodes.stream().forEach(newOMNode ->\n+        newOMNodeIdsBuilder.append(\", \").append(newOMNode.getOMNodeId()));\n+    String newOMNodeIds = newOMNodeIdsBuilder.toString().substring(2);\n+    LOG.info(\"Bootstrapping new OM(s): {}\", newOMNodeIds);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY0NzU3NA==", "bodyText": "Just a question:\nIf OM is started normally, and prepareBootStrapRequest is performed will it cause any issues?", "url": "https://github.com/apache/ozone/pull/1494#discussion_r543647574", "createdAt": "2020-12-15T20:00:58Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerRatisServer.java", "diffHunk": "@@ -317,8 +377,18 @@ public static OzoneManagerRatisServer newOMRatisServer(\n         .build();\n \n     List<RaftPeer> raftPeers = new ArrayList<>();\n-    // Add this Ratis server to the Ratis ring\n-    raftPeers.add(localRaftPeer);\n+\n+    // If the OM is started in bootstrap mode, do not add it to the ratis ring.\n+    // It will be added later using SetConfiguration from the leader OM.\n+    if (isBootstrapping) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc1NTQwNA==", "bodyText": "Here first we need to check for not null, as in few code paths getNewNodeInfos returns null.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r543755404", "createdAt": "2020-12-15T23:12:56Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/admin/om/AddOMSubcommand.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.admin.om;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import org.apache.hadoop.hdds.cli.HddsVersionProvider;\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n+import org.apache.hadoop.net.NetUtils;\n+import org.apache.hadoop.ozone.OmUtils;\n+import org.apache.hadoop.ozone.client.OzoneClientException;\n+import org.apache.hadoop.ozone.om.helpers.ServiceInfo;\n+import org.apache.hadoop.ozone.om.protocol.OzoneManagerProtocol;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMNodeInfo;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMRoleInfo;\n+import org.apache.hadoop.util.StringUtils;\n+import picocli.CommandLine;\n+\n+import java.util.concurrent.Callable;\n+\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_ADDRESS_KEY;\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_HTTPS_ADDRESS_KEY;\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_HTTP_ADDRESS_KEY;\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_NODES_KEY;\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_RATIS_PORT_DEFAULT;\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_RATIS_PORT_KEY;\n+\n+/**\n+ * Handler of om roles command.\n+ */\n+@CommandLine.Command(\n+    name = \"addom\", aliases = \"addoms, addnewom, addnewoms\",\n+    description = \"Adds newly Bootstrapped OM(s) to the cluster. \" +\n+        \"\\nNote - New OM(s) should be started in bootstrap mode before \" +\n+        \"running this command.\" +\n+        \"\\nNote - Configuration files of all existing \" +\n+        \"OM(s) MUST be updated with information about the new OM(s) (\" +\n+        OZONE_OM_NODES_KEY + \", \" + OZONE_OM_ADDRESS_KEY + \", \" +\n+        OZONE_OM_HTTP_ADDRESS_KEY + \", \" + OZONE_OM_HTTPS_ADDRESS_KEY + \", \" +\n+        OZONE_OM_RATIS_PORT_KEY + \").\",\n+    mixinStandardHelpOptions = true,\n+    versionProvider = HddsVersionProvider.class)\n+public class AddOMSubcommand implements Callable<Void> {\n+\n+  @CommandLine.ParentCommand\n+  private OMAdmin parent;\n+\n+  @CommandLine.Option(names = {\"-id\", \"--service-id\"},\n+      description = \"OM Service ID\",\n+      required = true)\n+  private String omServiceId;\n+\n+  @CommandLine.Option(names = {\"-nodeid\", \"-nodeids\", \"--new-node-ids\"},\n+      description = \"A comma separated list of node IDs of the new OM(s). \",\n+      required = true)\n+  private String newNodeIds;\n+\n+  private OzoneManagerProtocol ozoneManagerClient;\n+\n+  @Override\n+  public Void call() throws Exception {\n+    boolean success = false;\n+    try {\n+      ozoneManagerClient =  parent.createOmClient(omServiceId);\n+\n+      List<OMNodeInfo> newOMNodeInfos = getNewNodeInfos();\n+\n+      if (!newOMNodeInfos.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc1NjM0Ng==", "bodyText": "Can we call this AddOMRequest, as this is an admin command submitted to add new OM's to the cluster.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r543756346", "createdAt": "2020-12-15T23:14:56Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/interface-client/src/main/proto/OmClientProtocol.proto", "diffHunk": "@@ -1203,11 +1203,41 @@ message UpdateGetS3SecretRequest {\n     required string awsSecret = 2;\n }\n \n+message OMNodeInfo {\n+    required string nodeId = 1;\n+    required string hostAddress = 2;\n+    required uint32 rpcPort = 3;\n+    required uint32 ratisPort = 4;\n+    required string httpAddr = 5;\n+    required string httpsAddr = 6;\n+    optional string serviceId = 7;\n+}\n+\n+enum BootstrapErrorCode {\n+    RATIS_NOT_ENABLED = 1;\n+    LEADER_UNDETERMINED = 2;\n+    RATIS_BOOTSTRAP_ERROR = 3;\n+}\n+\n+message BootstrapRequest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc1NjY2Mw==", "bodyText": "We are not using rpcPort, httpAddr, httpsAddr, serviceId these can be removed from this.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r543756663", "createdAt": "2020-12-15T23:15:44Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/interface-client/src/main/proto/OmClientProtocol.proto", "diffHunk": "@@ -1203,11 +1203,41 @@ message UpdateGetS3SecretRequest {\n     required string awsSecret = 2;\n }\n \n+message OMNodeInfo {\n+    required string nodeId = 1;\n+    required string hostAddress = 2;\n+    required uint32 rpcPort = 3;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc2MDkwMA==", "bodyText": "Question:\nI see this is called from Ratis, when any StateMachine has hit exception.\nIn this case, do we want to terminate OM, is this handled to handle any failure of notifyConfigurationChanged where we are throwing OzoneIllegalArgumentException?", "url": "https://github.com/apache/ozone/pull/1494#discussion_r543760900", "createdAt": "2020-12-15T23:25:07Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java", "diffHunk": "@@ -388,6 +412,15 @@ public String toStateMachineLogEntryString(StateMachineLogEntryProto proto) {\n     return OMRatisHelper.smProtoToString(proto);\n   }\n \n+  @Override\n+  public void close() throws IOException {\n+    // OM should be shutdown as the StateMachine has shutdown.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45"}, "originalPosition": 49}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/c44fba2cf4b6287dff743268335ac17c38db5d45", "committedDate": "2020-11-20T22:52:25Z", "message": "unit tests"}, "afterCommit": {"oid": "881cb6e77e22ff5c12aac652d3e73659bf0e7ab8", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/881cb6e77e22ff5c12aac652d3e73659bf0e7ab8", "committedDate": "2020-12-17T01:25:33Z", "message": "review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "881cb6e77e22ff5c12aac652d3e73659bf0e7ab8", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/881cb6e77e22ff5c12aac652d3e73659bf0e7ab8", "committedDate": "2020-12-17T01:25:33Z", "message": "review comments"}, "afterCommit": {"oid": "4e9e1e8498dd9d1418f321a9e3b60cdcffd9fbb1", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/4e9e1e8498dd9d1418f321a9e3b60cdcffd9fbb1", "committedDate": "2020-12-17T01:26:07Z", "message": "review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "791d47092248c9d89d68e37b51467168c5ea41fb", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/791d47092248c9d89d68e37b51467168c5ea41fb", "committedDate": "2020-12-21T21:45:44Z", "message": "checkstyle fixes"}, "afterCommit": {"oid": "f9244cb9b389ee2befa0745ec6bc2c8b0ae74909", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/f9244cb9b389ee2befa0745ec6bc2c8b0ae74909", "committedDate": "2021-01-06T23:07:00Z", "message": "rebase and CI fixes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f9244cb9b389ee2befa0745ec6bc2c8b0ae74909", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/f9244cb9b389ee2befa0745ec6bc2c8b0ae74909", "committedDate": "2021-01-06T23:07:00Z", "message": "rebase and CI fixes"}, "afterCommit": {"oid": "38978377d0ba2bc1cd223d7fd95c1b90de4a5821", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/38978377d0ba2bc1cd223d7fd95c1b90de4a5821", "committedDate": "2021-04-20T22:31:29Z", "message": "HDDS-4330. Bootstrap new OM node"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4eba1afee054f9e7af42520c8dec374d1061973e", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/4eba1afee054f9e7af42520c8dec374d1061973e", "committedDate": "2021-04-22T22:50:21Z", "message": "CI fix 4"}, "afterCommit": {"oid": "c1b64ed0f78b3cabba65260aa53c2ae117ce0df4", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/c1b64ed0f78b3cabba65260aa53c2ae117ce0df4", "committedDate": "2021-04-23T17:55:34Z", "message": "CI fixes 1"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c1b64ed0f78b3cabba65260aa53c2ae117ce0df4", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/c1b64ed0f78b3cabba65260aa53c2ae117ce0df4", "committedDate": "2021-04-23T17:55:34Z", "message": "CI fixes 1"}, "afterCommit": {"oid": "f39d8d2daed922fa508eb577985795d63ad5ad60", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/f39d8d2daed922fa508eb577985795d63ad5ad60", "committedDate": "2021-04-23T22:35:20Z", "message": "CI fixes 2"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f39d8d2daed922fa508eb577985795d63ad5ad60", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/f39d8d2daed922fa508eb577985795d63ad5ad60", "committedDate": "2021-04-23T22:35:20Z", "message": "CI fixes 2"}, "afterCommit": {"oid": "b97fe2d44632d3c575bff16b2a8394c75802a04a", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/b97fe2d44632d3c575bff16b2a8394c75802a04a", "committedDate": "2021-05-25T16:41:56Z", "message": "CI fixes 2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjY5ODQ2MzY3", "url": "https://github.com/apache/ozone/pull/1494#pullrequestreview-669846367", "createdAt": "2021-05-27T07:45:00Z", "commit": {"oid": "9b804603308088b06211f384aee4c4e376dd791e"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yN1QwNzo0NTowMFrOJitCqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yN1QxMDowOToxMVrOJi0FdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDM2OTMyMQ==", "bodyText": "Looks like we need to add this new service to OMPolicyProvider and add the ACL property to ozone-default.xml\nTo allow service-level authorization for this rpc service.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r640369321", "createdAt": "2021-05-27T07:45:00Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/protocolPB/OMInterServiceProtocolPB.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.om.protocolPB;\n+\n+import org.apache.hadoop.hdds.annotation.InterfaceAudience;\n+import org.apache.hadoop.ozone.om.OMConfigKeys;\n+import org.apache.hadoop.ipc.ProtocolInfo;\n+import org.apache.hadoop.ozone.protocol.proto\n+    .OzoneManagerInterServiceProtocolProtos.OzoneManagerInterService;\n+import org.apache.hadoop.security.KerberosInfo;\n+import org.apache.hadoop.security.token.TokenInfo;\n+import org.apache.hadoop.ozone.security.OzoneDelegationTokenSelector;\n+\n+/**\n+ * Protocol used for communication between OMs.\n+ */\n+@ProtocolInfo(protocolName =\n+    \"org.apache.hadoop.ozone.om.protocol.OMInterServiceProtocol\",\n+    protocolVersion = 1)\n+@KerberosInfo(\n+    serverPrincipal = OMConfigKeys.OZONE_OM_KERBEROS_PRINCIPAL_KEY)\n+@TokenInfo(OzoneDelegationTokenSelector.class)\n+@InterfaceAudience.Private", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b804603308088b06211f384aee4c4e376dd791e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDM3Mjc1OQ==", "bodyText": "Question: Do we need to add TokenInfo for this Protocol?\nAs for this, the user should come with a Kerberos credential only for bootstrap right? Or in general when do we add TokenInfo only when we allow that service with token auth?\ncc @xiaoyuyao", "url": "https://github.com/apache/ozone/pull/1494#discussion_r640372759", "createdAt": "2021-05-27T07:49:51Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/protocolPB/OMInterServiceProtocolPB.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.om.protocolPB;\n+\n+import org.apache.hadoop.hdds.annotation.InterfaceAudience;\n+import org.apache.hadoop.ozone.om.OMConfigKeys;\n+import org.apache.hadoop.ipc.ProtocolInfo;\n+import org.apache.hadoop.ozone.protocol.proto\n+    .OzoneManagerInterServiceProtocolProtos.OzoneManagerInterService;\n+import org.apache.hadoop.security.KerberosInfo;\n+import org.apache.hadoop.security.token.TokenInfo;\n+import org.apache.hadoop.ozone.security.OzoneDelegationTokenSelector;\n+\n+/**\n+ * Protocol used for communication between OMs.\n+ */\n+@ProtocolInfo(protocolName =\n+    \"org.apache.hadoop.ozone.om.protocol.OMInterServiceProtocol\",\n+    protocolVersion = 1)\n+@KerberosInfo(\n+    serverPrincipal = OMConfigKeys.OZONE_OM_KERBEROS_PRINCIPAL_KEY)\n+@TokenInfo(OzoneDelegationTokenSelector.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b804603308088b06211f384aee4c4e376dd791e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDM3NjU3NA==", "bodyText": "Do we need to add here also KerberosInfo.\nFrom other Protocol classes which are there in ozone, we have the info here also. Not sure mandatory or not here.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r640376574", "createdAt": "2021-05-27T07:55:15Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/protocol/OMInterServiceProtocol.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.om.protocol;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import org.apache.hadoop.ozone.om.helpers.OMNodeDetails;\n+\n+/**\n+ * Protocol for inter OM communication.\n+ */\n+public interface OMInterServiceProtocol extends Closeable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b804603308088b06211f384aee4c4e376dd791e"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDM4NzU1Nw==", "bodyText": "Minor:\nActiveOMs -> ActiiiveSCMs\nOMs -> SCMs", "url": "https://github.com/apache/ozone/pull/1494#discussion_r640387557", "createdAt": "2021-05-27T08:10:16Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/MiniOzoneHAClusterImpl.java", "diffHunk": "@@ -352,7 +361,12 @@ public MiniOzoneCluster build() throws IOException {\n         numOfActiveOMs = numOfOMs;\n       }\n \n-      // If num of ActiveOMs is not set, set it to numOfOMs.\n+      // If num of OMs it not set, set it to 1.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b804603308088b06211f384aee4c4e376dd791e"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDQ3MTYxMQ==", "bodyText": "This is reading the values from config, I think if all required information is passed like httpAddress, httpsAddress and any other required info, we can bootstrap OM's with out restart.  (As now if we read from config, we except the new OM details should be in config before)", "url": "https://github.com/apache/ozone/pull/1494#discussion_r640471611", "createdAt": "2021-05-27T09:51:25Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java", "diffHunk": "@@ -166,6 +167,29 @@ public void notifyTermIndexUpdated(long currentTerm, long index) {\n     computeAndUpdateLastAppliedIndex(index, currentTerm, null, false);\n   }\n \n+  /**\n+   * Called to notify state machine about configuration changes.\n+   * Configurations changes include addition of newly bootstrapped OM.\n+   */\n+  @Override\n+  public void notifyConfigurationChanged(long term, long index,\n+      RaftProtos.RaftConfigurationProto newRaftConfiguration) {\n+    List<RaftProtos.RaftPeerProto> newPeers =\n+        newRaftConfiguration.getPeersList();\n+    LOG.info(\"Received Configuration change notification from Ratis. New Peer\" +\n+        \" list:\\n{}\", newPeers);\n+    for (RaftProtos.RaftPeerProto raftPeerProto : newPeers) {\n+      String omNodeId = RaftPeerId.valueOf(raftPeerProto.getId()).toString();\n+      if (!ozoneManager.doesPeerExist(omNodeId)) {\n+        LOG.info(\"Adding new OM {} to the Peer list.\", omNodeId);\n+        ozoneManager.addOMNodeToPeers(omNodeId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b804603308088b06211f384aee4c4e376dd791e"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDQ3OTY5Mg==", "bodyText": "We commit to DB once double buffer flushes. Do you think we need some wait or read from StateMachine and getLastAppliedIndex?", "url": "https://github.com/apache/ozone/pull/1494#discussion_r640479692", "createdAt": "2021-05-27T10:02:11Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/om/TestOzoneManagerBootstrap.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om;\n+\n+import com.google.common.base.Supplier;\n+import java.io.File;\n+import java.io.FileFilter;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdfs.server.common.Storage;\n+import org.apache.hadoop.ozone.MiniOzoneCluster;\n+import org.apache.hadoop.ozone.MiniOzoneHAClusterImpl;\n+import org.apache.hadoop.ozone.client.ObjectStore;\n+import org.apache.hadoop.ozone.client.OzoneBucket;\n+import org.apache.hadoop.ozone.client.OzoneClientFactory;\n+import org.apache.hadoop.ozone.client.OzoneVolume;\n+import org.apache.hadoop.ozone.om.ratis.OzoneManagerRatisServer;\n+import org.apache.hadoop.test.GenericTestUtils;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.rules.Timeout;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.SCM_DUMMY_SERVICE_ID;\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_RATIS_SERVER_REQUEST_TIMEOUT_DEFAULT;\n+import static org.apache.hadoop.ozone.om.TestOzoneManagerHA.createKey;\n+\n+public class TestOzoneManagerBootstrap {\n+\n+  @Rule\n+  public ExpectedException exception = ExpectedException.none();\n+\n+  @Rule\n+  public Timeout timeout = new Timeout(500_000);\n+\n+  private MiniOzoneHAClusterImpl cluster = null;\n+  private ObjectStore objectStore;\n+  private OzoneConfiguration conf;\n+  private final String clusterId = UUID.randomUUID().toString();\n+  private final String scmId = UUID.randomUUID().toString();\n+\n+  private static final int NUM_INITIAL_OMS = 3;\n+\n+  private static final String OM_SERVICE_ID = \"om-bootstrap\";\n+  private static final String VOLUME_NAME;\n+  private static final String BUCKET_NAME;\n+\n+  private long lastTransactionIndex;\n+\n+  static {\n+    VOLUME_NAME = \"volume\" + RandomStringUtils.randomNumeric(5);\n+    BUCKET_NAME = \"bucket\" + RandomStringUtils.randomNumeric(5);\n+  }\n+\n+  private void setupCluster() throws Exception {\n+    setupCluster(NUM_INITIAL_OMS);\n+  }\n+\n+  private void setupCluster(int numInitialOMs) throws Exception {\n+    conf = new OzoneConfiguration();\n+    cluster = (MiniOzoneHAClusterImpl) MiniOzoneCluster.newHABuilder(conf)\n+        .setClusterId(clusterId)\n+        .setScmId(scmId)\n+        .setSCMServiceId(SCM_DUMMY_SERVICE_ID)\n+        .setOMServiceId(OM_SERVICE_ID)\n+        .setNumOfOzoneManagers(numInitialOMs)\n+        .build();\n+    cluster.waitForClusterToBeReady();\n+    objectStore = OzoneClientFactory.getRpcClient(OM_SERVICE_ID, conf)\n+        .getObjectStore();\n+\n+    // Perform some transactions\n+    objectStore.createVolume(VOLUME_NAME);\n+    OzoneVolume volume = objectStore.getVolume(VOLUME_NAME);\n+    volume.createBucket(BUCKET_NAME);\n+    OzoneBucket bucket = volume.getBucket(BUCKET_NAME);\n+    createKey(bucket);\n+\n+    lastTransactionIndex = cluster.getOMLeader().getRatisSnapshotIndex();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b804603308088b06211f384aee4c4e376dd791e"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDQ4MjA4OA==", "bodyText": "Question:\nNot understood the reason to do this.\nAs our MiniOzoneHACluster is only used in non-secure, why certClient is being set here?", "url": "https://github.com/apache/ozone/pull/1494#discussion_r640482088", "createdAt": "2021-05-27T10:05:34Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/MiniOzoneHAClusterImpl.java", "diffHunk": "@@ -652,10 +667,158 @@ private void initOMHAConfig(int basePort) throws IOException {\n         conf.setInt(omRatisPortKey, port + 4);\n       }\n \n-      conf.set(omNodesKey, omNodesKeyValue.substring(1));\n+      conf.set(omNodesKey, String.join(\",\", omNodeIds));\n+    }\n+  }\n+\n+  /**\n+   * Bootstrap new OM and add to existing OM HA service ring.\n+   * @return new OM nodeId\n+   */\n+  public void bootstrapOzoneManager(String omNodeId) throws Exception {\n+\n+    int basePort;\n+    int retryCount = 0;\n+\n+    OzoneManager om = null;\n+\n+    long leaderSnapshotIndex = getOMLeader().getRatisSnapshotIndex();\n+\n+    while (true) {\n+      try {\n+        basePort = 10000 + RANDOM.nextInt(1000) * 4;\n+        OzoneConfiguration newConf = addNewOMToConfig(getOMServiceId(),\n+            omNodeId, basePort);\n+\n+        om = bootstrapNewOM(omNodeId);\n+\n+        // Get the CertClient from an existing OM and set for new OM\n+        if (omhaService.getServiceByIndex(0).getCertificateClient() != null) {\n+          om.setCertClient(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b804603308088b06211f384aee4c4e376dd791e"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDQ4NDcyNA==", "bodyText": "Increase time duration here to avoid flakiness in CI runs.\nAnd also as method name says check OM Exists in peerList, can we check from ratis server peer info also?", "url": "https://github.com/apache/ozone/pull/1494#discussion_r640484724", "createdAt": "2021-05-27T10:09:11Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/om/TestOzoneManagerBootstrap.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om;\n+\n+import com.google.common.base.Supplier;\n+import java.io.File;\n+import java.io.FileFilter;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdfs.server.common.Storage;\n+import org.apache.hadoop.ozone.MiniOzoneCluster;\n+import org.apache.hadoop.ozone.MiniOzoneHAClusterImpl;\n+import org.apache.hadoop.ozone.client.ObjectStore;\n+import org.apache.hadoop.ozone.client.OzoneBucket;\n+import org.apache.hadoop.ozone.client.OzoneClientFactory;\n+import org.apache.hadoop.ozone.client.OzoneVolume;\n+import org.apache.hadoop.ozone.om.ratis.OzoneManagerRatisServer;\n+import org.apache.hadoop.test.GenericTestUtils;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.rules.Timeout;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.SCM_DUMMY_SERVICE_ID;\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_RATIS_SERVER_REQUEST_TIMEOUT_DEFAULT;\n+import static org.apache.hadoop.ozone.om.TestOzoneManagerHA.createKey;\n+\n+public class TestOzoneManagerBootstrap {\n+\n+  @Rule\n+  public ExpectedException exception = ExpectedException.none();\n+\n+  @Rule\n+  public Timeout timeout = new Timeout(500_000);\n+\n+  private MiniOzoneHAClusterImpl cluster = null;\n+  private ObjectStore objectStore;\n+  private OzoneConfiguration conf;\n+  private final String clusterId = UUID.randomUUID().toString();\n+  private final String scmId = UUID.randomUUID().toString();\n+\n+  private static final int NUM_INITIAL_OMS = 3;\n+\n+  private static final String OM_SERVICE_ID = \"om-bootstrap\";\n+  private static final String VOLUME_NAME;\n+  private static final String BUCKET_NAME;\n+\n+  private long lastTransactionIndex;\n+\n+  static {\n+    VOLUME_NAME = \"volume\" + RandomStringUtils.randomNumeric(5);\n+    BUCKET_NAME = \"bucket\" + RandomStringUtils.randomNumeric(5);\n+  }\n+\n+  private void setupCluster() throws Exception {\n+    setupCluster(NUM_INITIAL_OMS);\n+  }\n+\n+  private void setupCluster(int numInitialOMs) throws Exception {\n+    conf = new OzoneConfiguration();\n+    cluster = (MiniOzoneHAClusterImpl) MiniOzoneCluster.newHABuilder(conf)\n+        .setClusterId(clusterId)\n+        .setScmId(scmId)\n+        .setSCMServiceId(SCM_DUMMY_SERVICE_ID)\n+        .setOMServiceId(OM_SERVICE_ID)\n+        .setNumOfOzoneManagers(numInitialOMs)\n+        .build();\n+    cluster.waitForClusterToBeReady();\n+    objectStore = OzoneClientFactory.getRpcClient(OM_SERVICE_ID, conf)\n+        .getObjectStore();\n+\n+    // Perform some transactions\n+    objectStore.createVolume(VOLUME_NAME);\n+    OzoneVolume volume = objectStore.getVolume(VOLUME_NAME);\n+    volume.createBucket(BUCKET_NAME);\n+    OzoneBucket bucket = volume.getBucket(BUCKET_NAME);\n+    createKey(bucket);\n+\n+    lastTransactionIndex = cluster.getOMLeader().getRatisSnapshotIndex();\n+  }\n+\n+  @After\n+  public void shutdown() throws Exception {\n+    if (cluster != null) {\n+      cluster.shutdown();\n+    }\n+  }\n+\n+  private void assertNewOMExistsInPeerList(String nodeId) throws Exception {\n+    for (OzoneManager om : cluster.getOzoneManagersList()) {\n+      Assert.assertTrue(\"New OM node \" + nodeId + \" not present in Peer list \" +\n+              \"of OM \" + om.getOMNodeId(), om.doesPeerExist(nodeId));\n+    }\n+    OzoneManager newOM = cluster.getOzoneManager(nodeId);\n+    GenericTestUtils.waitFor(new Supplier<Boolean>() {\n+      @Override\n+      public Boolean get() {\n+        try {\n+          return newOM.getRatisSnapshotIndex() >= lastTransactionIndex;\n+        } catch (IOException e) {\n+          return false;\n+        }\n+      }\n+    }, 100, 10000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b804603308088b06211f384aee4c4e376dd791e"}, "originalPosition": 127}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjcwMDA3MzI0", "url": "https://github.com/apache/ozone/pull/1494#pullrequestreview-670007324", "createdAt": "2021-05-27T10:22:26Z", "commit": {"oid": "9b804603308088b06211f384aee4c4e376dd791e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yN1QxMDoyMjoyNlrOJi0n9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yN1QxMDoyMjoyNlrOJi0n9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDQ5MzU1Ng==", "bodyText": "Question: Here comments changed, but actual values not changed.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r640493556", "createdAt": "2021-05-27T10:22:26Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/MiniOzoneHAClusterImpl.java", "diffHunk": "@@ -65,11 +65,13 @@\n   private final OMHAService omhaService;\n   private final SCMHAService scmhaService;\n \n+  private final String clusterMetaPath;\n+\n   private int waitForClusterToBeReadyTimeout = 120000; // 2 min\n \n   private static final Random RANDOM = new Random();\n-  private static final int RATIS_RPC_TIMEOUT = 1000; // 1 second\n-  public static final int NODE_FAILURE_TIMEOUT = 2000; // 2 seconds\n+  private static final int RATIS_RPC_TIMEOUT = 1000; // 10 second", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b804603308088b06211f384aee4c4e376dd791e"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjcxOTM1NjY1", "url": "https://github.com/apache/ozone/pull/1494#pullrequestreview-671935665", "createdAt": "2021-05-31T04:13:09Z", "commit": {"oid": "70676be28b5751b82837377224ad6aaa0b3169ff"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0zMVQwNDoxMzowOVrOJkcskQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0zMVQwNDoxMzowOVrOJkcskQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MjE5ODY3Mw==", "bodyText": "Question: Why in exception case logging and return null, can't we throw an exception?\nAnd also can we add JavaDoc for this?", "url": "https://github.com/apache/ozone/pull/1494#discussion_r642198673", "createdAt": "2021-05-31T04:13:09Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerRatisServer.java", "diffHunk": "@@ -671,6 +672,21 @@ public RaftServerStatus checkLeaderStatus() {\n     return RaftServerStatus.NOT_LEADER;\n   }\n \n+  @VisibleForTesting\n+  public List<String> getCurrentPeersFromRaftConf() {\n+    try {\n+      Collection<RaftPeer> currentPeers =\n+          server.getDivision(raftGroupId).getRaftConf().getCurrentPeers();\n+      List<String> currentPeerList = new ArrayList<>();\n+      currentPeers.forEach(e -> currentPeerList.add(e.getId().toString()));\n+      return currentPeerList;\n+    } catch (IOException e) {\n+      // In this case we return not a leader.\n+      LOG.error(\"Failed to get RaftServer information. \", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70676be28b5751b82837377224ad6aaa0b3169ff"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjcxOTY4MTEw", "url": "https://github.com/apache/ozone/pull/1494#pullrequestreview-671968110", "createdAt": "2021-05-31T05:49:54Z", "commit": {"oid": "70676be28b5751b82837377224ad6aaa0b3169ff"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0zMVQwNTo0OTo1NFrOJkeVow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0zMVQwNTo0OTo1NFrOJkeVow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MjIyNTU3MQ==", "bodyText": "Looks like we need to call computeAndUpdateLastAppliedIndex. As applyLogToStateMachine in StateMachineUpdater when configEntry, we call\nstateMachine.event().notifyConfigurationChanged(next.getTerm(), next.getIndex(), next.getConfigurationEntry());\nAs in OM StateMachine, we update lastAppliedIndex using computeAndUpdateLastAppliedIndex.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r642225571", "createdAt": "2021-05-31T05:49:54Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java", "diffHunk": "@@ -166,6 +167,29 @@ public void notifyTermIndexUpdated(long currentTerm, long index) {\n     computeAndUpdateLastAppliedIndex(index, currentTerm, null, false);\n   }\n \n+  /**\n+   * Called to notify state machine about configuration changes.\n+   * Configurations changes include addition of newly bootstrapped OM.\n+   */\n+  @Override\n+  public void notifyConfigurationChanged(long term, long index,\n+      RaftProtos.RaftConfigurationProto newRaftConfiguration) {\n+    List<RaftProtos.RaftPeerProto> newPeers =\n+        newRaftConfiguration.getPeersList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70676be28b5751b82837377224ad6aaa0b3169ff"}, "originalPosition": 20}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "70676be28b5751b82837377224ad6aaa0b3169ff", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/70676be28b5751b82837377224ad6aaa0b3169ff", "committedDate": "2021-05-27T22:06:07Z", "message": "Review comments fixes"}, "afterCommit": {"oid": "3e1e5cf683a3ceff28d6b7856336bb3c6119c2a9", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/3e1e5cf683a3ceff28d6b7856336bb3c6119c2a9", "committedDate": "2021-06-09T17:37:33Z", "message": "Review comment fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njg4MDUxNDk3", "url": "https://github.com/apache/ozone/pull/1494#pullrequestreview-688051497", "createdAt": "2021-06-21T05:56:15Z", "commit": {"oid": "7c89974b47d1654ab7cdc36a504689bc41907218"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yMVQwNTo1NjoxNVrOJwvtlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yMVQwNjoxMDo0NlrOJwwDhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NTA5MzE0Mg==", "bodyText": "Just got a question:\nWhy only new node being added is not added here, but other nodes in-ring are added here? (Is it okay to add other nodes here it self, or they also can be discovered during setConf?)\nI remember there was a reason behind this, can you provide info or if you are having another update to PR add some comments it will be easy to understand the reason behind it?", "url": "https://github.com/apache/ozone/pull/1494#discussion_r655093142", "createdAt": "2021-06-21T05:56:15Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerRatisServer.java", "diffHunk": "@@ -104,9 +104,127 @@\n   private final RaftGroupId raftGroupId;\n   private final RaftGroup raftGroup;\n   private final RaftPeerId raftPeerId;\n+  private final List<RaftPeer> raftPeers;\n \n   private final OzoneManager ozoneManager;\n   private final OzoneManagerStateMachine omStateMachine;\n+  private final String ratisStorageDir;\n+\n+  private final ClientId clientId = ClientId.randomId();\n+  private static final AtomicLong CALL_ID_COUNTER = new AtomicLong();\n+\n+  private static long nextCallId() {\n+    return CALL_ID_COUNTER.getAndIncrement() & Long.MAX_VALUE;\n+  }\n+\n+  /**\n+   * Returns an OM Ratis server.\n+   * @param conf configuration\n+   * @param om the OM instance starting the ratis server\n+   * @param raftGroupIdStr raft group id string\n+   * @param localRaftPeerId raft peer id of this Ratis server\n+   * @param addr address of the ratis server\n+   * @param peers peer nodes in the raft ring\n+   * @throws IOException\n+   */\n+  @SuppressWarnings({\"parameternumber\", \"java:S107\"})\n+  private OzoneManagerRatisServer(ConfigurationSource conf, OzoneManager om,\n+      String raftGroupIdStr, RaftPeerId localRaftPeerId,\n+      InetSocketAddress addr, List<RaftPeer> peers,\n+      SecurityConfig secConfig, CertificateClient certClient)\n+      throws IOException {\n+    this.ozoneManager = om;\n+    this.omRatisAddress = addr;\n+    this.port = addr.getPort();\n+    this.ratisStorageDir = OzoneManagerRatisUtils.getOMRatisDirectory(conf);\n+    RaftProperties serverProperties = newRaftProperties(conf);\n+\n+    this.raftPeerId = localRaftPeerId;\n+    this.raftGroupId = RaftGroupId.valueOf(\n+        getRaftGroupIdFromOmServiceId(raftGroupIdStr));\n+    this.raftPeers = Lists.newArrayList();\n+    this.raftPeers.addAll(peers);\n+    this.raftGroup = RaftGroup.valueOf(raftGroupId, peers);\n+\n+    StringBuilder raftPeersStr = new StringBuilder();\n+    for (RaftPeer peer : peers) {\n+      raftPeersStr.append(\", \").append(peer.getAddress());\n+    }\n+    LOG.info(\"Instantiating OM Ratis server with groupID: {} and \" +\n+        \"peers: {}\", raftGroupIdStr, raftPeersStr.toString().substring(2));\n+\n+    this.omStateMachine = getStateMachine(conf);\n+\n+    Parameters parameters = createServerTlsParameters(secConfig, certClient);\n+    this.server = RaftServer.newBuilder()\n+        .setServerId(this.raftPeerId)\n+        .setGroup(this.raftGroup)\n+        .setProperties(serverProperties)\n+        .setParameters(parameters)\n+        .setStateMachine(omStateMachine)\n+        .build();\n+  }\n+\n+  /**\n+   * Creates an instance of OzoneManagerRatisServer.\n+   */\n+  public static OzoneManagerRatisServer newOMRatisServer(\n+      ConfigurationSource ozoneConf, OzoneManager omProtocol,\n+      OMNodeDetails omNodeDetails, List<OMNodeDetails> peerNodes,\n+      SecurityConfig secConfig, CertificateClient certClient,\n+      boolean isBootstrapping) throws IOException {\n+\n+    // RaftGroupId is the omServiceId\n+    String omServiceId = omNodeDetails.getServiceId();\n+\n+    String omNodeId = omNodeDetails.getNodeId();\n+    RaftPeerId localRaftPeerId = RaftPeerId.getRaftPeerId(omNodeId);\n+\n+    InetSocketAddress ratisAddr = new InetSocketAddress(\n+        omNodeDetails.getInetAddress(), omNodeDetails.getRatisPort());\n+\n+    RaftPeer localRaftPeer = RaftPeer.newBuilder()\n+        .setId(localRaftPeerId)\n+        .setAddress(ratisAddr)\n+        .build();\n+\n+    List<RaftPeer> raftPeers = new ArrayList<>();\n+\n+    // If the OM is started in bootstrap mode, do not add it to the ratis ring.\n+    // It will be added later using SetConfiguration from the leader OM.\n+    if (isBootstrapping) {\n+      LOG.debug(\"OM started in Bootstrap mode and hence will not be added \" +\n+          \"to Ratis group during startup.\");\n+    } else {\n+      // On regular startup, add current OM to Ratis ring\n+      raftPeers.add(localRaftPeer);\n+    }\n+\n+    for (OMNodeDetails peerInfo : peerNodes) {\n+      String peerNodeId = peerInfo.getNodeId();\n+      RaftPeerId raftPeerId = RaftPeerId.valueOf(peerNodeId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c89974b47d1654ab7cdc36a504689bc41907218"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NTA5ODc1Ng==", "bodyText": "Add javadocs to public methods", "url": "https://github.com/apache/ozone/pull/1494#discussion_r655098756", "createdAt": "2021-06-21T06:10:46Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/utils/OzoneManagerRatisUtils.java", "diffHunk": "@@ -340,4 +359,70 @@ public static boolean isBucketFSOptimized() {\n     return isBucketFSOptimized;\n   }\n \n+  /**\n+   * Get the local directory where ratis logs will be stored.\n+   */\n+  public static String getOMRatisDirectory(ConfigurationSource conf) {\n+    String storageDir = conf.get(OMConfigKeys.OZONE_OM_RATIS_STORAGE_DIR);\n+\n+    if (Strings.isNullOrEmpty(storageDir)) {\n+      storageDir = ServerUtils.getDefaultRatisDirectory(conf);\n+    }\n+    return storageDir;\n+  }\n+\n+  public static String getOMRatisSnapshotDirectory(ConfigurationSource conf) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c89974b47d1654ab7cdc36a504689bc41907218"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzAzNzg3NjAz", "url": "https://github.com/apache/ozone/pull/1494#pullrequestreview-703787603", "createdAt": "2021-07-12T07:17:55Z", "commit": {"oid": "cdb9dfd27201844e01f71150dafb6f7a5208bdfe"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xMlQwNzoxNzo1NlrOJ8wIQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xMlQwNzoyNDozMlrOJ8wYUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NzY4Mjg4Mg==", "bodyText": "In normal OM start node, ratisServer peer list has local + peer.\n if (!isBootstrapping) {\n      // On regular startup, add all OMs to Ratis ring\n      raftPeers.add(localRaftPeer);\n\nIn bootstrap case, local node is not added to ratis server peer list.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r667682882", "createdAt": "2021-07-12T07:17:56Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -1339,7 +1339,38 @@ public void bootstrap(OMNodeDetails newOMNode) throws IOException {\n   }\n \n   /**\n-   * Add a new OM Node to the HA cluster. This call comes from OMRatisServer\n+   * When OMStateMachine receives a configuration change update, it calls\n+   * this function to update the peers list, if required.\n+   */\n+  public void updatePeerList(List<String> omNodeIds) {\n+    List<String> ratisServerPeerIdsList = omRatisServer.getPeerIds();\n+    for (String omNodeId : omNodeIds) {\n+      if (getOMNodeId().equals(omNodeId)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdb9dfd27201844e01f71150dafb6f7a5208bdfe"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NzY4Njk5Mg==", "bodyText": "While reading more, I have observed that before this change, we have not added local OM node to peer node  list before(raftPeers). Should we have the same behavior?. So, should we remove adding local node to peer list?\n      // On regular startup, add all OMs to Ratis ring\n      raftPeers.add(localRaftPeer);", "url": "https://github.com/apache/ozone/pull/1494#discussion_r667686992", "createdAt": "2021-07-12T07:24:32Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -1339,7 +1339,38 @@ public void bootstrap(OMNodeDetails newOMNode) throws IOException {\n   }\n \n   /**\n-   * Add a new OM Node to the HA cluster. This call comes from OMRatisServer\n+   * When OMStateMachine receives a configuration change update, it calls\n+   * this function to update the peers list, if required.\n+   */\n+  public void updatePeerList(List<String> omNodeIds) {\n+    List<String> ratisServerPeerIdsList = omRatisServer.getPeerIds();\n+    for (String omNodeId : omNodeIds) {\n+      if (getOMNodeId().equals(omNodeId)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NzY4Mjg4Mg=="}, "originalCommit": {"oid": "cdb9dfd27201844e01f71150dafb6f7a5208bdfe"}, "originalPosition": 11}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "77036dfc94432bdf3dd7a926ebc43265e4db4e78", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/77036dfc94432bdf3dd7a926ebc43265e4db4e78", "committedDate": "2021-06-22T23:25:49Z", "message": "checkstyle fix"}, "afterCommit": {"oid": "368f5ce9a971cb25698693acad3a7850cc766d98", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/368f5ce9a971cb25698693acad3a7850cc766d98", "committedDate": "2021-07-14T20:05:20Z", "message": "Rebase changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzA3NzM4NjU0", "url": "https://github.com/apache/ozone/pull/1494#pullrequestreview-707738654", "createdAt": "2021-07-15T19:21:31Z", "commit": {"oid": "84e45b7ddc04fe002a0b7a9a528e1a8d3f3951fb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xNVQxOToyMTozMVrOJ_q_VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xNVQxOToyMTozMVrOJ_q_VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MDc0NDQwNQ==", "bodyText": "@bharatviswa504, in old code too, local OM node is added to raftPeers list.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r670744405", "createdAt": "2021-07-15T19:21:31Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerRatisServer.java", "diffHunk": "@@ -273,106 +483,6 @@ private OMResponse processReply(OMRequest omRequest, RaftClientReply reply)\n     }\n   }\n \n-\n-  /**\n-   * Returns an OM Ratis server.\n-   * @param conf configuration\n-   * @param om the OM instance starting the ratis server\n-   * @param raftGroupIdStr raft group id string\n-   * @param localRaftPeerId raft peer id of this Ratis server\n-   * @param addr address of the ratis server\n-   * @param raftPeers peer nodes in the raft ring\n-   * @throws IOException\n-   */\n-  @SuppressWarnings({\"parameternumber\", \"java:S107\"})\n-  private OzoneManagerRatisServer(ConfigurationSource conf,\n-      OzoneManager om,\n-      String raftGroupIdStr, RaftPeerId localRaftPeerId,\n-      InetSocketAddress addr, List<RaftPeer> raftPeers,\n-      SecurityConfig secConfig, CertificateClient certClient)\n-      throws IOException {\n-    this.ozoneManager = om;\n-    this.omRatisAddress = addr;\n-    this.port = addr.getPort();\n-    RaftProperties serverProperties = newRaftProperties(conf);\n-\n-    this.raftPeerId = localRaftPeerId;\n-    this.raftGroupId = RaftGroupId.valueOf(\n-        getRaftGroupIdFromOmServiceId(raftGroupIdStr));\n-    this.raftGroup = RaftGroup.valueOf(raftGroupId, raftPeers);\n-\n-    StringBuilder raftPeersStr = new StringBuilder();\n-    for (RaftPeer peer : raftPeers) {\n-      raftPeersStr.append(\", \").append(peer.getAddress());\n-    }\n-    LOG.info(\"Instantiating OM Ratis server with GroupID: {} and \" +\n-        \"Raft Peers: {}\", raftGroupIdStr, raftPeersStr.toString().substring(2));\n-\n-    this.omStateMachine = getStateMachine(conf);\n-\n-    Parameters parameters = createServerTlsParameters(secConfig, certClient);\n-    this.server = RaftServer.newBuilder()\n-        .setServerId(this.raftPeerId)\n-        .setGroup(this.raftGroup)\n-        .setProperties(serverProperties)\n-        .setParameters(parameters)\n-        .setStateMachine(omStateMachine)\n-        .build();\n-  }\n-\n-  /**\n-   * Creates an instance of OzoneManagerRatisServer.\n-   */\n-  public static OzoneManagerRatisServer newOMRatisServer(\n-      ConfigurationSource ozoneConf, OzoneManager omProtocol,\n-      OMNodeDetails omNodeDetails, List<OMNodeDetails> peerNodes,\n-      SecurityConfig secConfig, CertificateClient certClient)\n-      throws IOException {\n-\n-    // RaftGroupId is the omServiceId\n-    String omServiceId = omNodeDetails.getServiceId();\n-\n-    String omNodeId = omNodeDetails.getNodeId();\n-    RaftPeerId localRaftPeerId = RaftPeerId.getRaftPeerId(omNodeId);\n-\n-    InetSocketAddress ratisAddr = new InetSocketAddress(\n-        omNodeDetails.getInetAddress(), omNodeDetails.getRatisPort());\n-\n-    RaftPeer localRaftPeer = RaftPeer.newBuilder()\n-        .setId(localRaftPeerId)\n-        .setAddress(ratisAddr)\n-        .build();\n-\n-    List<RaftPeer> raftPeers = new ArrayList<>();\n-    // Add this Ratis server to the Ratis ring\n-    raftPeers.add(localRaftPeer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84e45b7ddc04fe002a0b7a9a528e1a8d3f3951fb"}, "originalPosition": 378}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzEwMzU1Nzcy", "url": "https://github.com/apache/ozone/pull/1494#pullrequestreview-710355772", "createdAt": "2021-07-20T09:13:15Z", "commit": {"oid": "e0292247376152c3dc61952da5646eca9e79f751"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e9068e5a3c83731aeb1d7d2e9ebc607261fd8e3", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/4e9068e5a3c83731aeb1d7d2e9ebc607261fd8e3", "committedDate": "2021-07-20T22:32:51Z", "message": "HDDS-4330. Bootstrap new OM node"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "369b5ccb9b288a7b7578d5f8341e4099b0754448", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/369b5ccb9b288a7b7578d5f8341e4099b0754448", "committedDate": "2021-07-20T22:32:51Z", "message": "CI fixes 1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4c147b2ff799a3715944e00216530fdcd062cdc", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/f4c147b2ff799a3715944e00216530fdcd062cdc", "committedDate": "2021-07-20T22:32:51Z", "message": "CI fixes 2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6532008e1aa14b40d4997d45bf9b42c77602f0a0", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/6532008e1aa14b40d4997d45bf9b42c77602f0a0", "committedDate": "2021-07-20T22:32:51Z", "message": "Generalize Bootstrap error code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64974a84c4cfe11e347b7a3b1074c25d468fc3eb", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/64974a84c4cfe11e347b7a3b1074c25d468fc3eb", "committedDate": "2021-07-20T22:32:51Z", "message": "Review comments fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aada9bbc654419173ec9ddd8eba073d207b6cc2d", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/aada9bbc654419173ec9ddd8eba073d207b6cc2d", "committedDate": "2021-07-20T22:32:51Z", "message": "Review comment fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8bd425d9f09e73bc5ee00f676bf7de692e70edf", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/e8bd425d9f09e73bc5ee00f676bf7de692e70edf", "committedDate": "2021-07-20T22:32:51Z", "message": "CI fixes + Remove Token authorization for the new protocol"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "522023112e681a00bb95bfb4e73c8acef71e88ba", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/522023112e681a00bb95bfb4e73c8acef71e88ba", "committedDate": "2021-07-20T22:32:51Z", "message": "checkstyle fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fbcba69d07be24819758ecbd960bddfa2303f221", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/fbcba69d07be24819758ecbd960bddfa2303f221", "committedDate": "2021-07-20T22:32:51Z", "message": "Do not add peers to bootstrapping OM ratis server during initialization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdb5ac7e2bc8f65c011bc4aa630698cb33125024", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/cdb5ac7e2bc8f65c011bc4aa630698cb33125024", "committedDate": "2021-07-20T22:32:51Z", "message": "checkstyle fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6f0011e4a97e918da367c9fa9747c4c0c2f369c", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/c6f0011e4a97e918da367c9fa9747c4c0c2f369c", "committedDate": "2021-07-20T22:32:51Z", "message": "Rebase changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8b89425e7b7e7a2222215c94970d4427556b6d0", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/c8b89425e7b7e7a2222215c94970d4427556b6d0", "committedDate": "2021-07-20T22:32:51Z", "message": "CI fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fdfe7a0291c188e7a89d479c5250fd0cd8a8a68c", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/fdfe7a0291c188e7a89d479c5250fd0cd8a8a68c", "committedDate": "2021-07-20T22:32:51Z", "message": "Add bootstrapping node to peer list on receiving notifyConfigurationChange"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c8f4ce00f8d34264d25b5324f7f1979cd10d55a", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/4c8f4ce00f8d34264d25b5324f7f1979cd10d55a", "committedDate": "2021-07-20T22:32:51Z", "message": "Checkstyle fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca81e1f9e92ac8e0c3e90f64f3657d579942f0e8", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/ca81e1f9e92ac8e0c3e90f64f3657d579942f0e8", "committedDate": "2021-07-20T22:32:51Z", "message": "Fixed TestOMBootstrap"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e0292247376152c3dc61952da5646eca9e79f751", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/e0292247376152c3dc61952da5646eca9e79f751", "committedDate": "2021-07-19T14:58:55Z", "message": "Checkstyle fix"}, "afterCommit": {"oid": "ca81e1f9e92ac8e0c3e90f64f3657d579942f0e8", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/ca81e1f9e92ac8e0c3e90f64f3657d579942f0e8", "committedDate": "2021-07-20T22:32:51Z", "message": "Fixed TestOMBootstrap"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzEzMDY4MTQ1", "url": "https://github.com/apache/ozone/pull/1494#pullrequestreview-713068145", "createdAt": "2021-07-22T17:45:59Z", "commit": {"oid": "ca81e1f9e92ac8e0c3e90f64f3657d579942f0e8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2373, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}