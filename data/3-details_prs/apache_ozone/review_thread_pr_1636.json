{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5NTY0NjM4", "number": 1636, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMTo1MzozNVrOE_WsyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMjoxMDozOVrOE_XCbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODY3NjU3OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/replication/ReplicationServer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMTo1MzozNVrOH9BQxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMTo0ODo0NVrOH_Ndyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc0NTg2MQ==", "bodyText": "Just curious in which case we will get a 0 here after netty server starts. If each server has a non-zero known port for replication server, this should work.\nHowever, if the replication server returns port 0, DatanodeDetails#Name.Replication will be set 0 as well in OzoneContainer#start. How does other DNs figure out the proper port number to connect. Do we have other way to figure out the actual random port number and populate it properly to DatanodeDetails?", "url": "https://github.com/apache/ozone/pull/1636#discussion_r533745861", "createdAt": "2020-12-01T21:53:35Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/replication/ReplicationServer.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.container.replication;\n+\n+import javax.net.ssl.SSLException;\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.hadoop.hdds.conf.Config;\n+import org.apache.hadoop.hdds.conf.ConfigGroup;\n+import org.apache.hadoop.hdds.conf.ConfigTag;\n+import org.apache.hadoop.hdds.security.x509.SecurityConfig;\n+import org.apache.hadoop.hdds.security.x509.certificate.client.CertificateClient;\n+import org.apache.hadoop.hdds.tracing.GrpcServerInterceptor;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+import org.apache.hadoop.ozone.container.ozoneimpl.ContainerController;\n+\n+import org.apache.ratis.thirdparty.io.grpc.Server;\n+import org.apache.ratis.thirdparty.io.grpc.ServerBuilder;\n+import org.apache.ratis.thirdparty.io.grpc.ServerInterceptors;\n+import org.apache.ratis.thirdparty.io.grpc.netty.GrpcSslContexts;\n+import org.apache.ratis.thirdparty.io.grpc.netty.NettyServerBuilder;\n+import org.apache.ratis.thirdparty.io.netty.handler.ssl.ClientAuth;\n+import org.apache.ratis.thirdparty.io.netty.handler.ssl.SslContextBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Separated network server for server2server container replication.\n+ */\n+public class ReplicationServer {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(ReplicationServer.class);\n+\n+  private Server server;\n+\n+  private SecurityConfig secConf;\n+\n+  private CertificateClient caClient;\n+\n+  private ContainerController controller;\n+\n+  private int port;\n+\n+  public ReplicationServer(\n+      ContainerController controller,\n+      ReplicationConfig replicationConfig,\n+      SecurityConfig secConf,\n+      CertificateClient caClient\n+  ) {\n+    this.secConf = secConf;\n+    this.caClient = caClient;\n+    this.controller = controller;\n+    this.port = replicationConfig.getPort();\n+    init();\n+  }\n+\n+  public void init() {\n+    NettyServerBuilder nettyServerBuilder =\n+        ((NettyServerBuilder) ServerBuilder.forPort(port))\n+            .maxInboundMessageSize(OzoneConsts.OZONE_SCM_CHUNK_MAX_SIZE);\n+\n+    GrpcServerInterceptor tracingInterceptor = new GrpcServerInterceptor();\n+    nettyServerBuilder\n+        .addService(ServerInterceptors.intercept(new GrpcReplicationService(\n+            new OnDemandContainerReplicationSource(controller)\n+        ), tracingInterceptor));\n+\n+    if (secConf.isSecurityEnabled()) {\n+      try {\n+        SslContextBuilder sslContextBuilder = SslContextBuilder.forServer(\n+            caClient.getPrivateKey(), caClient.getCertificate());\n+\n+        sslContextBuilder = GrpcSslContexts.configure(\n+            sslContextBuilder, secConf.getGrpcSslProvider());\n+\n+        sslContextBuilder.clientAuth(ClientAuth.REQUIRE);\n+        sslContextBuilder.trustManager(caClient.getCACertificate());\n+\n+        nettyServerBuilder.sslContext(sslContextBuilder.build());\n+      } catch (SSLException ex) {\n+        throw new IllegalArgumentException(\n+            \"Unable to setup TLS for secure datanode replication GRPC \"\n+                + \"endpoint.\", ex);\n+      }\n+    }\n+\n+    server = nettyServerBuilder.build();\n+  }\n+\n+  public void start() throws IOException {\n+    server.start();\n+\n+    port = server.getPort();\n+\n+    if (port == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a05b2657bcad3a17a6506ba48939954b4018260b"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA0Mjk1NQ==", "bodyText": "That's my fault. This is in the wrong order. here the server.getPort() should never be 0. port includes the final port number which is used in  datanodeDetails.setPort(Name.REPLICATION, replicationServer.getPort());.\nBut it was not clear as I used the wrong order. port check should be done before setting the variable. Fixed with:\n    if (port == 0) {\n      LOG.info(\"{} is started using port {}\", getClass().getSimpleName(), server.getPort());\n    }\n\n    port = server.getPort();", "url": "https://github.com/apache/ozone/pull/1636#discussion_r536042955", "createdAt": "2020-12-04T11:48:45Z", "author": {"login": "elek"}, "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/replication/ReplicationServer.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.container.replication;\n+\n+import javax.net.ssl.SSLException;\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.hadoop.hdds.conf.Config;\n+import org.apache.hadoop.hdds.conf.ConfigGroup;\n+import org.apache.hadoop.hdds.conf.ConfigTag;\n+import org.apache.hadoop.hdds.security.x509.SecurityConfig;\n+import org.apache.hadoop.hdds.security.x509.certificate.client.CertificateClient;\n+import org.apache.hadoop.hdds.tracing.GrpcServerInterceptor;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+import org.apache.hadoop.ozone.container.ozoneimpl.ContainerController;\n+\n+import org.apache.ratis.thirdparty.io.grpc.Server;\n+import org.apache.ratis.thirdparty.io.grpc.ServerBuilder;\n+import org.apache.ratis.thirdparty.io.grpc.ServerInterceptors;\n+import org.apache.ratis.thirdparty.io.grpc.netty.GrpcSslContexts;\n+import org.apache.ratis.thirdparty.io.grpc.netty.NettyServerBuilder;\n+import org.apache.ratis.thirdparty.io.netty.handler.ssl.ClientAuth;\n+import org.apache.ratis.thirdparty.io.netty.handler.ssl.SslContextBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Separated network server for server2server container replication.\n+ */\n+public class ReplicationServer {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(ReplicationServer.class);\n+\n+  private Server server;\n+\n+  private SecurityConfig secConf;\n+\n+  private CertificateClient caClient;\n+\n+  private ContainerController controller;\n+\n+  private int port;\n+\n+  public ReplicationServer(\n+      ContainerController controller,\n+      ReplicationConfig replicationConfig,\n+      SecurityConfig secConf,\n+      CertificateClient caClient\n+  ) {\n+    this.secConf = secConf;\n+    this.caClient = caClient;\n+    this.controller = controller;\n+    this.port = replicationConfig.getPort();\n+    init();\n+  }\n+\n+  public void init() {\n+    NettyServerBuilder nettyServerBuilder =\n+        ((NettyServerBuilder) ServerBuilder.forPort(port))\n+            .maxInboundMessageSize(OzoneConsts.OZONE_SCM_CHUNK_MAX_SIZE);\n+\n+    GrpcServerInterceptor tracingInterceptor = new GrpcServerInterceptor();\n+    nettyServerBuilder\n+        .addService(ServerInterceptors.intercept(new GrpcReplicationService(\n+            new OnDemandContainerReplicationSource(controller)\n+        ), tracingInterceptor));\n+\n+    if (secConf.isSecurityEnabled()) {\n+      try {\n+        SslContextBuilder sslContextBuilder = SslContextBuilder.forServer(\n+            caClient.getPrivateKey(), caClient.getCertificate());\n+\n+        sslContextBuilder = GrpcSslContexts.configure(\n+            sslContextBuilder, secConf.getGrpcSslProvider());\n+\n+        sslContextBuilder.clientAuth(ClientAuth.REQUIRE);\n+        sslContextBuilder.trustManager(caClient.getCACertificate());\n+\n+        nettyServerBuilder.sslContext(sslContextBuilder.build());\n+      } catch (SSLException ex) {\n+        throw new IllegalArgumentException(\n+            \"Unable to setup TLS for secure datanode replication GRPC \"\n+                + \"endpoint.\", ex);\n+      }\n+    }\n+\n+    server = nettyServerBuilder.build();\n+  }\n+\n+  public void start() throws IOException {\n+    server.start();\n+\n+    port = server.getPort();\n+\n+    if (port == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc0NTg2MQ=="}, "originalCommit": {"oid": "a05b2657bcad3a17a6506ba48939954b4018260b"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODcxNDQzOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/replication/ReplicationServer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMjowNTowOVrOH9Bo4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMTo0OTowMlrOH_NeYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1MjAzNA==", "bodyText": "To be consistent with existing replication related configurations, should we move this Configuration key as part of DatanodeConfiguration.java class under the prefix as hdds.datanode.replication.*?", "url": "https://github.com/apache/ozone/pull/1636#discussion_r533752034", "createdAt": "2020-12-01T22:05:09Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/replication/ReplicationServer.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.container.replication;\n+\n+import javax.net.ssl.SSLException;\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.hadoop.hdds.conf.Config;\n+import org.apache.hadoop.hdds.conf.ConfigGroup;\n+import org.apache.hadoop.hdds.conf.ConfigTag;\n+import org.apache.hadoop.hdds.security.x509.SecurityConfig;\n+import org.apache.hadoop.hdds.security.x509.certificate.client.CertificateClient;\n+import org.apache.hadoop.hdds.tracing.GrpcServerInterceptor;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+import org.apache.hadoop.ozone.container.ozoneimpl.ContainerController;\n+\n+import org.apache.ratis.thirdparty.io.grpc.Server;\n+import org.apache.ratis.thirdparty.io.grpc.ServerBuilder;\n+import org.apache.ratis.thirdparty.io.grpc.ServerInterceptors;\n+import org.apache.ratis.thirdparty.io.grpc.netty.GrpcSslContexts;\n+import org.apache.ratis.thirdparty.io.grpc.netty.NettyServerBuilder;\n+import org.apache.ratis.thirdparty.io.netty.handler.ssl.ClientAuth;\n+import org.apache.ratis.thirdparty.io.netty.handler.ssl.SslContextBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Separated network server for server2server container replication.\n+ */\n+public class ReplicationServer {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(ReplicationServer.class);\n+\n+  private Server server;\n+\n+  private SecurityConfig secConf;\n+\n+  private CertificateClient caClient;\n+\n+  private ContainerController controller;\n+\n+  private int port;\n+\n+  public ReplicationServer(\n+      ContainerController controller,\n+      ReplicationConfig replicationConfig,\n+      SecurityConfig secConf,\n+      CertificateClient caClient\n+  ) {\n+    this.secConf = secConf;\n+    this.caClient = caClient;\n+    this.controller = controller;\n+    this.port = replicationConfig.getPort();\n+    init();\n+  }\n+\n+  public void init() {\n+    NettyServerBuilder nettyServerBuilder =\n+        ((NettyServerBuilder) ServerBuilder.forPort(port))\n+            .maxInboundMessageSize(OzoneConsts.OZONE_SCM_CHUNK_MAX_SIZE);\n+\n+    GrpcServerInterceptor tracingInterceptor = new GrpcServerInterceptor();\n+    nettyServerBuilder\n+        .addService(ServerInterceptors.intercept(new GrpcReplicationService(\n+            new OnDemandContainerReplicationSource(controller)\n+        ), tracingInterceptor));\n+\n+    if (secConf.isSecurityEnabled()) {\n+      try {\n+        SslContextBuilder sslContextBuilder = SslContextBuilder.forServer(\n+            caClient.getPrivateKey(), caClient.getCertificate());\n+\n+        sslContextBuilder = GrpcSslContexts.configure(\n+            sslContextBuilder, secConf.getGrpcSslProvider());\n+\n+        sslContextBuilder.clientAuth(ClientAuth.REQUIRE);\n+        sslContextBuilder.trustManager(caClient.getCACertificate());\n+\n+        nettyServerBuilder.sslContext(sslContextBuilder.build());\n+      } catch (SSLException ex) {\n+        throw new IllegalArgumentException(\n+            \"Unable to setup TLS for secure datanode replication GRPC \"\n+                + \"endpoint.\", ex);\n+      }\n+    }\n+\n+    server = nettyServerBuilder.build();\n+  }\n+\n+  public void start() throws IOException {\n+    server.start();\n+\n+    port = server.getPort();\n+\n+    if (port == 0) {\n+      LOG.info(\"{} is started using port {}\", getClass().getSimpleName(), port);\n+    }\n+  }\n+\n+  public void stop() {\n+    try {\n+      server.shutdown().awaitTermination(10L, TimeUnit.SECONDS);\n+    } catch (InterruptedException ex) {\n+      LOG.warn(\"{} couldn't be stopped gracefully\", getClass().getSimpleName());\n+    }\n+  }\n+\n+  public int getPort() {\n+    return port;\n+  }\n+\n+  @ConfigGroup(prefix = \"datanode.replication\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a05b2657bcad3a17a6506ba48939954b4018260b"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA0MzEwNQ==", "bodyText": "YES. Thanks the suggestion.", "url": "https://github.com/apache/ozone/pull/1636#discussion_r536043105", "createdAt": "2020-12-04T11:49:02Z", "author": {"login": "elek"}, "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/replication/ReplicationServer.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.container.replication;\n+\n+import javax.net.ssl.SSLException;\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.hadoop.hdds.conf.Config;\n+import org.apache.hadoop.hdds.conf.ConfigGroup;\n+import org.apache.hadoop.hdds.conf.ConfigTag;\n+import org.apache.hadoop.hdds.security.x509.SecurityConfig;\n+import org.apache.hadoop.hdds.security.x509.certificate.client.CertificateClient;\n+import org.apache.hadoop.hdds.tracing.GrpcServerInterceptor;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+import org.apache.hadoop.ozone.container.ozoneimpl.ContainerController;\n+\n+import org.apache.ratis.thirdparty.io.grpc.Server;\n+import org.apache.ratis.thirdparty.io.grpc.ServerBuilder;\n+import org.apache.ratis.thirdparty.io.grpc.ServerInterceptors;\n+import org.apache.ratis.thirdparty.io.grpc.netty.GrpcSslContexts;\n+import org.apache.ratis.thirdparty.io.grpc.netty.NettyServerBuilder;\n+import org.apache.ratis.thirdparty.io.netty.handler.ssl.ClientAuth;\n+import org.apache.ratis.thirdparty.io.netty.handler.ssl.SslContextBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Separated network server for server2server container replication.\n+ */\n+public class ReplicationServer {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(ReplicationServer.class);\n+\n+  private Server server;\n+\n+  private SecurityConfig secConf;\n+\n+  private CertificateClient caClient;\n+\n+  private ContainerController controller;\n+\n+  private int port;\n+\n+  public ReplicationServer(\n+      ContainerController controller,\n+      ReplicationConfig replicationConfig,\n+      SecurityConfig secConf,\n+      CertificateClient caClient\n+  ) {\n+    this.secConf = secConf;\n+    this.caClient = caClient;\n+    this.controller = controller;\n+    this.port = replicationConfig.getPort();\n+    init();\n+  }\n+\n+  public void init() {\n+    NettyServerBuilder nettyServerBuilder =\n+        ((NettyServerBuilder) ServerBuilder.forPort(port))\n+            .maxInboundMessageSize(OzoneConsts.OZONE_SCM_CHUNK_MAX_SIZE);\n+\n+    GrpcServerInterceptor tracingInterceptor = new GrpcServerInterceptor();\n+    nettyServerBuilder\n+        .addService(ServerInterceptors.intercept(new GrpcReplicationService(\n+            new OnDemandContainerReplicationSource(controller)\n+        ), tracingInterceptor));\n+\n+    if (secConf.isSecurityEnabled()) {\n+      try {\n+        SslContextBuilder sslContextBuilder = SslContextBuilder.forServer(\n+            caClient.getPrivateKey(), caClient.getCertificate());\n+\n+        sslContextBuilder = GrpcSslContexts.configure(\n+            sslContextBuilder, secConf.getGrpcSslProvider());\n+\n+        sslContextBuilder.clientAuth(ClientAuth.REQUIRE);\n+        sslContextBuilder.trustManager(caClient.getCACertificate());\n+\n+        nettyServerBuilder.sslContext(sslContextBuilder.build());\n+      } catch (SSLException ex) {\n+        throw new IllegalArgumentException(\n+            \"Unable to setup TLS for secure datanode replication GRPC \"\n+                + \"endpoint.\", ex);\n+      }\n+    }\n+\n+    server = nettyServerBuilder.build();\n+  }\n+\n+  public void start() throws IOException {\n+    server.start();\n+\n+    port = server.getPort();\n+\n+    if (port == 0) {\n+      LOG.info(\"{} is started using port {}\", getClass().getSimpleName(), port);\n+    }\n+  }\n+\n+  public void stop() {\n+    try {\n+      server.shutdown().awaitTermination(10L, TimeUnit.SECONDS);\n+    } catch (InterruptedException ex) {\n+      LOG.warn(\"{} couldn't be stopped gracefully\", getClass().getSimpleName());\n+    }\n+  }\n+\n+  public int getPort() {\n+    return port;\n+  }\n+\n+  @ConfigGroup(prefix = \"datanode.replication\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1MjAzNA=="}, "originalCommit": {"oid": "a05b2657bcad3a17a6506ba48939954b4018260b"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODczMTk5OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/replication/ReplicationServer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMjoxMDozOVrOH9Bz5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMToyMzo1MlrOIA7VZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1NDg1NA==", "bodyText": "NIT: separate line 44 from the *.", "url": "https://github.com/apache/ozone/pull/1636#discussion_r533754854", "createdAt": "2020-12-01T22:10:39Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/replication/ReplicationServer.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.container.replication;\n+\n+import javax.net.ssl.SSLException;\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.hadoop.hdds.conf.Config;\n+import org.apache.hadoop.hdds.conf.ConfigGroup;\n+import org.apache.hadoop.hdds.conf.ConfigTag;\n+import org.apache.hadoop.hdds.security.x509.SecurityConfig;\n+import org.apache.hadoop.hdds.security.x509.certificate.client.CertificateClient;\n+import org.apache.hadoop.hdds.tracing.GrpcServerInterceptor;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+import org.apache.hadoop.ozone.container.ozoneimpl.ContainerController;\n+\n+import org.apache.ratis.thirdparty.io.grpc.Server;\n+import org.apache.ratis.thirdparty.io.grpc.ServerBuilder;\n+import org.apache.ratis.thirdparty.io.grpc.ServerInterceptors;\n+import org.apache.ratis.thirdparty.io.grpc.netty.GrpcSslContexts;\n+import org.apache.ratis.thirdparty.io.grpc.netty.NettyServerBuilder;\n+import org.apache.ratis.thirdparty.io.netty.handler.ssl.ClientAuth;\n+import org.apache.ratis.thirdparty.io.netty.handler.ssl.SslContextBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Separated network server for server2server container replication.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a05b2657bcad3a17a6506ba48939954b4018260b"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA0NTQ0Mg==", "bodyText": "Sorry, I don't get it. Seems to be a normal Javadoc for me. Must be a typo but I don't see it. (can be the reason why I wrote it ;-) )", "url": "https://github.com/apache/ozone/pull/1636#discussion_r536045442", "createdAt": "2020-12-04T11:53:16Z", "author": {"login": "elek"}, "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/replication/ReplicationServer.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.container.replication;\n+\n+import javax.net.ssl.SSLException;\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.hadoop.hdds.conf.Config;\n+import org.apache.hadoop.hdds.conf.ConfigGroup;\n+import org.apache.hadoop.hdds.conf.ConfigTag;\n+import org.apache.hadoop.hdds.security.x509.SecurityConfig;\n+import org.apache.hadoop.hdds.security.x509.certificate.client.CertificateClient;\n+import org.apache.hadoop.hdds.tracing.GrpcServerInterceptor;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+import org.apache.hadoop.ozone.container.ozoneimpl.ContainerController;\n+\n+import org.apache.ratis.thirdparty.io.grpc.Server;\n+import org.apache.ratis.thirdparty.io.grpc.ServerBuilder;\n+import org.apache.ratis.thirdparty.io.grpc.ServerInterceptors;\n+import org.apache.ratis.thirdparty.io.grpc.netty.GrpcSslContexts;\n+import org.apache.ratis.thirdparty.io.grpc.netty.NettyServerBuilder;\n+import org.apache.ratis.thirdparty.io.netty.handler.ssl.ClientAuth;\n+import org.apache.ratis.thirdparty.io.netty.handler.ssl.SslContextBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Separated network server for server2server container replication.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1NDg1NA=="}, "originalCommit": {"oid": "a05b2657bcad3a17a6506ba48939954b4018260b"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0MzA0Ng==", "bodyText": "The two lines of the class description in the previous commits somehow wraps into the same line as indicated the * in the middle between two sentences. I see this comments has be simplified and not an issue any more.", "url": "https://github.com/apache/ozone/pull/1636#discussion_r537843046", "createdAt": "2020-12-07T21:23:52Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/replication/ReplicationServer.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.container.replication;\n+\n+import javax.net.ssl.SSLException;\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.hadoop.hdds.conf.Config;\n+import org.apache.hadoop.hdds.conf.ConfigGroup;\n+import org.apache.hadoop.hdds.conf.ConfigTag;\n+import org.apache.hadoop.hdds.security.x509.SecurityConfig;\n+import org.apache.hadoop.hdds.security.x509.certificate.client.CertificateClient;\n+import org.apache.hadoop.hdds.tracing.GrpcServerInterceptor;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+import org.apache.hadoop.ozone.container.ozoneimpl.ContainerController;\n+\n+import org.apache.ratis.thirdparty.io.grpc.Server;\n+import org.apache.ratis.thirdparty.io.grpc.ServerBuilder;\n+import org.apache.ratis.thirdparty.io.grpc.ServerInterceptors;\n+import org.apache.ratis.thirdparty.io.grpc.netty.GrpcSslContexts;\n+import org.apache.ratis.thirdparty.io.grpc.netty.NettyServerBuilder;\n+import org.apache.ratis.thirdparty.io.netty.handler.ssl.ClientAuth;\n+import org.apache.ratis.thirdparty.io.netty.handler.ssl.SslContextBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Separated network server for server2server container replication.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1NDg1NA=="}, "originalCommit": {"oid": "a05b2657bcad3a17a6506ba48939954b4018260b"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4538, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}