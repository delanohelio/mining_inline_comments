{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3MTQzNjQ4", "number": 1425, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNzozOToxNVrOEmaReA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNToyNjoyOVrOErBC2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NzExODAwOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/helpers/TestInstanceHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNzozOToxNVrOHWaaIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOTozMTozNlrOHWg4yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI2MzM5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private  TestInstanceHelper(){\n          \n          \n            \n              private TestInstanceHelper() {", "url": "https://github.com/apache/ozone/pull/1425#discussion_r493263395", "createdAt": "2020-09-23T07:39:15Z", "author": {"login": "cxorm"}, "path": "hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/helpers/TestInstanceHelper.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.helpers;\n+\n+import com.google.protobuf.ByteString;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n+import org.apache.hadoop.ozone.OzoneAcl;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos;\n+\n+\n+/**\n+ * Test TestInstanceHelper.\n+ *\n+ * Utility methods to create test instances of protobuf related classes\n+ */\n+public final class TestInstanceHelper {\n+\n+  private  TestInstanceHelper(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a01af2e66f81c1e26eeadfd7354e8ef37cde075f"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM2OTU0NA==", "bodyText": "done", "url": "https://github.com/apache/ozone/pull/1425#discussion_r493369544", "createdAt": "2020-09-23T09:31:36Z", "author": {"login": "llemec"}, "path": "hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/helpers/TestInstanceHelper.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.helpers;\n+\n+import com.google.protobuf.ByteString;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n+import org.apache.hadoop.ozone.OzoneAcl;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos;\n+\n+\n+/**\n+ * Test TestInstanceHelper.\n+ *\n+ * Utility methods to create test instances of protobuf related classes\n+ */\n+public final class TestInstanceHelper {\n+\n+  private  TestInstanceHelper(){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI2MzM5NQ=="}, "originalCommit": {"oid": "a01af2e66f81c1e26eeadfd7354e8ef37cde075f"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NzIwOTA5OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/helpers/TestOmPrefixInfo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNzo1Nzo0NFrOHWbQzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOTozMTo0MVrOHWg5Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI3NzM4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  OzoneAcl.AclScope scope){\n          \n          \n            \n                  OzoneAcl.AclScope scope) {", "url": "https://github.com/apache/ozone/pull/1425#discussion_r493277388", "createdAt": "2020-09-23T07:57:44Z", "author": {"login": "cxorm"}, "path": "hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/helpers/TestOmPrefixInfo.java", "diffHunk": "@@ -18,39 +18,91 @@\n \n package org.apache.hadoop.ozone.om.helpers;\n \n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n import org.apache.hadoop.ozone.OzoneAcl;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos;\n import org.apache.hadoop.ozone.security.acl.IAccessAuthorizer;\n import org.junit.Assert;\n import org.junit.Test;\n \n import java.util.Collections;\n import java.util.HashMap;\n \n+\n import static org.apache.hadoop.ozone.OzoneAcl.AclScope.ACCESS;\n \n /**\n  * Class to test OmPrefixInfo.\n  */\n public class TestOmPrefixInfo {\n \n-  @Test\n-  public void testCopyObject() {\n-    OmPrefixInfo omPrefixInfo = new OmPrefixInfo(\"/path\",\n+  public OmPrefixInfo getOmPrefixInfoForTest(String path,\n+      IAccessAuthorizer.ACLIdentityType identityType,\n+      String identityString,\n+      IAccessAuthorizer.ACLType aclType,\n+      OzoneAcl.AclScope scope){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a01af2e66f81c1e26eeadfd7354e8ef37cde075f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM2OTY1NA==", "bodyText": "done", "url": "https://github.com/apache/ozone/pull/1425#discussion_r493369654", "createdAt": "2020-09-23T09:31:41Z", "author": {"login": "llemec"}, "path": "hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/helpers/TestOmPrefixInfo.java", "diffHunk": "@@ -18,39 +18,91 @@\n \n package org.apache.hadoop.ozone.om.helpers;\n \n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n import org.apache.hadoop.ozone.OzoneAcl;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos;\n import org.apache.hadoop.ozone.security.acl.IAccessAuthorizer;\n import org.junit.Assert;\n import org.junit.Test;\n \n import java.util.Collections;\n import java.util.HashMap;\n \n+\n import static org.apache.hadoop.ozone.OzoneAcl.AclScope.ACCESS;\n \n /**\n  * Class to test OmPrefixInfo.\n  */\n public class TestOmPrefixInfo {\n \n-  @Test\n-  public void testCopyObject() {\n-    OmPrefixInfo omPrefixInfo = new OmPrefixInfo(\"/path\",\n+  public OmPrefixInfo getOmPrefixInfoForTest(String path,\n+      IAccessAuthorizer.ACLIdentityType identityType,\n+      String identityString,\n+      IAccessAuthorizer.ACLType aclType,\n+      OzoneAcl.AclScope scope){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI3NzM4OA=="}, "originalCommit": {"oid": "a01af2e66f81c1e26eeadfd7354e8ef37cde075f"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NzIxMDM2OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/helpers/TestOmPrefixInfo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNzo1Nzo1OFrOHWbRsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOTozMTo0N1rOHWg5oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI3NzYxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void testgetFromProtobufOneMetadataOneAcl(){\n          \n          \n            \n              public void testgetFromProtobufOneMetadataOneAcl() {", "url": "https://github.com/apache/ozone/pull/1425#discussion_r493277616", "createdAt": "2020-09-23T07:57:58Z", "author": {"login": "cxorm"}, "path": "hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/helpers/TestOmPrefixInfo.java", "diffHunk": "@@ -18,39 +18,91 @@\n \n package org.apache.hadoop.ozone.om.helpers;\n \n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n import org.apache.hadoop.ozone.OzoneAcl;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos;\n import org.apache.hadoop.ozone.security.acl.IAccessAuthorizer;\n import org.junit.Assert;\n import org.junit.Test;\n \n import java.util.Collections;\n import java.util.HashMap;\n \n+\n import static org.apache.hadoop.ozone.OzoneAcl.AclScope.ACCESS;\n \n /**\n  * Class to test OmPrefixInfo.\n  */\n public class TestOmPrefixInfo {\n \n-  @Test\n-  public void testCopyObject() {\n-    OmPrefixInfo omPrefixInfo = new OmPrefixInfo(\"/path\",\n+  public OmPrefixInfo getOmPrefixInfoForTest(String path,\n+      IAccessAuthorizer.ACLIdentityType identityType,\n+      String identityString,\n+      IAccessAuthorizer.ACLType aclType,\n+      OzoneAcl.AclScope scope){\n+    return new OmPrefixInfo(path,\n         Collections.singletonList(new OzoneAcl(\n-        IAccessAuthorizer.ACLIdentityType.USER, \"user1\",\n-        IAccessAuthorizer.ACLType.WRITE, ACCESS)), new HashMap<>(), 10, 100);\n+            identityType, identityString,\n+            aclType, scope)), new HashMap<>(), 10, 100);\n+  }\n \n+\n+  @Test\n+  public void testCopyObject() {\n+    String testPath = \"/my/custom/path\";\n+    String username = \"myuser\";\n+    OmPrefixInfo omPrefixInfo = getOmPrefixInfoForTest(testPath,\n+        IAccessAuthorizer.ACLIdentityType.USER,\n+        username,\n+        IAccessAuthorizer.ACLType.WRITE,\n+        ACCESS);\n     OmPrefixInfo clonePrefixInfo = omPrefixInfo.copyObject();\n \n     Assert.assertEquals(omPrefixInfo, clonePrefixInfo);\n \n \n     // Change acls and check.\n     omPrefixInfo.addAcl(new OzoneAcl(\n-        IAccessAuthorizer.ACLIdentityType.USER, \"user1\",\n+        IAccessAuthorizer.ACLIdentityType.USER, username,\n         IAccessAuthorizer.ACLType.READ, ACCESS));\n \n     Assert.assertNotEquals(omPrefixInfo, clonePrefixInfo);\n \n   }\n+\n+  @Test\n+  public void testgetFromProtobufOneMetadataOneAcl(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a01af2e66f81c1e26eeadfd7354e8ef37cde075f"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM2OTc2MQ==", "bodyText": "done", "url": "https://github.com/apache/ozone/pull/1425#discussion_r493369761", "createdAt": "2020-09-23T09:31:47Z", "author": {"login": "llemec"}, "path": "hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/helpers/TestOmPrefixInfo.java", "diffHunk": "@@ -18,39 +18,91 @@\n \n package org.apache.hadoop.ozone.om.helpers;\n \n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n import org.apache.hadoop.ozone.OzoneAcl;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos;\n import org.apache.hadoop.ozone.security.acl.IAccessAuthorizer;\n import org.junit.Assert;\n import org.junit.Test;\n \n import java.util.Collections;\n import java.util.HashMap;\n \n+\n import static org.apache.hadoop.ozone.OzoneAcl.AclScope.ACCESS;\n \n /**\n  * Class to test OmPrefixInfo.\n  */\n public class TestOmPrefixInfo {\n \n-  @Test\n-  public void testCopyObject() {\n-    OmPrefixInfo omPrefixInfo = new OmPrefixInfo(\"/path\",\n+  public OmPrefixInfo getOmPrefixInfoForTest(String path,\n+      IAccessAuthorizer.ACLIdentityType identityType,\n+      String identityString,\n+      IAccessAuthorizer.ACLType aclType,\n+      OzoneAcl.AclScope scope){\n+    return new OmPrefixInfo(path,\n         Collections.singletonList(new OzoneAcl(\n-        IAccessAuthorizer.ACLIdentityType.USER, \"user1\",\n-        IAccessAuthorizer.ACLType.WRITE, ACCESS)), new HashMap<>(), 10, 100);\n+            identityType, identityString,\n+            aclType, scope)), new HashMap<>(), 10, 100);\n+  }\n \n+\n+  @Test\n+  public void testCopyObject() {\n+    String testPath = \"/my/custom/path\";\n+    String username = \"myuser\";\n+    OmPrefixInfo omPrefixInfo = getOmPrefixInfoForTest(testPath,\n+        IAccessAuthorizer.ACLIdentityType.USER,\n+        username,\n+        IAccessAuthorizer.ACLType.WRITE,\n+        ACCESS);\n     OmPrefixInfo clonePrefixInfo = omPrefixInfo.copyObject();\n \n     Assert.assertEquals(omPrefixInfo, clonePrefixInfo);\n \n \n     // Change acls and check.\n     omPrefixInfo.addAcl(new OzoneAcl(\n-        IAccessAuthorizer.ACLIdentityType.USER, \"user1\",\n+        IAccessAuthorizer.ACLIdentityType.USER, username,\n         IAccessAuthorizer.ACLType.READ, ACCESS));\n \n     Assert.assertNotEquals(omPrefixInfo, clonePrefixInfo);\n \n   }\n+\n+  @Test\n+  public void testgetFromProtobufOneMetadataOneAcl(){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI3NzYxNg=="}, "originalCommit": {"oid": "a01af2e66f81c1e26eeadfd7354e8ef37cde075f"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NzIxMTM0OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/helpers/TestOmPrefixInfo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNzo1ODowOFrOHWbSRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNzo1ODowOFrOHWbSRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI3Nzc2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void testGetProtobuf(){\n          \n          \n            \n              public void testGetProtobuf() {", "url": "https://github.com/apache/ozone/pull/1425#discussion_r493277765", "createdAt": "2020-09-23T07:58:08Z", "author": {"login": "cxorm"}, "path": "hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/helpers/TestOmPrefixInfo.java", "diffHunk": "@@ -18,39 +18,91 @@\n \n package org.apache.hadoop.ozone.om.helpers;\n \n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n import org.apache.hadoop.ozone.OzoneAcl;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos;\n import org.apache.hadoop.ozone.security.acl.IAccessAuthorizer;\n import org.junit.Assert;\n import org.junit.Test;\n \n import java.util.Collections;\n import java.util.HashMap;\n \n+\n import static org.apache.hadoop.ozone.OzoneAcl.AclScope.ACCESS;\n \n /**\n  * Class to test OmPrefixInfo.\n  */\n public class TestOmPrefixInfo {\n \n-  @Test\n-  public void testCopyObject() {\n-    OmPrefixInfo omPrefixInfo = new OmPrefixInfo(\"/path\",\n+  public OmPrefixInfo getOmPrefixInfoForTest(String path,\n+      IAccessAuthorizer.ACLIdentityType identityType,\n+      String identityString,\n+      IAccessAuthorizer.ACLType aclType,\n+      OzoneAcl.AclScope scope){\n+    return new OmPrefixInfo(path,\n         Collections.singletonList(new OzoneAcl(\n-        IAccessAuthorizer.ACLIdentityType.USER, \"user1\",\n-        IAccessAuthorizer.ACLType.WRITE, ACCESS)), new HashMap<>(), 10, 100);\n+            identityType, identityString,\n+            aclType, scope)), new HashMap<>(), 10, 100);\n+  }\n \n+\n+  @Test\n+  public void testCopyObject() {\n+    String testPath = \"/my/custom/path\";\n+    String username = \"myuser\";\n+    OmPrefixInfo omPrefixInfo = getOmPrefixInfoForTest(testPath,\n+        IAccessAuthorizer.ACLIdentityType.USER,\n+        username,\n+        IAccessAuthorizer.ACLType.WRITE,\n+        ACCESS);\n     OmPrefixInfo clonePrefixInfo = omPrefixInfo.copyObject();\n \n     Assert.assertEquals(omPrefixInfo, clonePrefixInfo);\n \n \n     // Change acls and check.\n     omPrefixInfo.addAcl(new OzoneAcl(\n-        IAccessAuthorizer.ACLIdentityType.USER, \"user1\",\n+        IAccessAuthorizer.ACLIdentityType.USER, username,\n         IAccessAuthorizer.ACLType.READ, ACCESS));\n \n     Assert.assertNotEquals(omPrefixInfo, clonePrefixInfo);\n \n   }\n+\n+  @Test\n+  public void testgetFromProtobufOneMetadataOneAcl(){\n+    String prefixInfoPath = \"/mypath/path\";\n+    String aclString = \"user:myuser:rw\";\n+    String metakey = \"metakey\";\n+    String metaval = \"metaval\";\n+    HddsProtos.KeyValue metadata = TestInstanceHelper\n+        .getDefaultTestMetadata(metakey, metaval);\n+    OzoneManagerProtocolProtos.PrefixInfo prefixInfo =\n+        TestInstanceHelper.getDefaultTestPrefixInfo(prefixInfoPath,\n+            aclString, metadata);\n+\n+    OmPrefixInfo ompri = OmPrefixInfo.getFromProtobuf(prefixInfo);\n+\n+    Assert.assertEquals(prefixInfoPath, ompri.getName());\n+    Assert.assertEquals(1, ompri.getMetadata().size());\n+    Assert.assertEquals(metaval, ompri.getMetadata().get(metakey));\n+    Assert.assertEquals(1, ompri.getAcls().size());\n+  }\n+\n+  @Test\n+  public void testGetProtobuf(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a01af2e66f81c1e26eeadfd7354e8ef37cde075f"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NzIxMzE4OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/helpers/TestInstanceHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNzo1ODoyN1rOHWbTcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOTozMTo1OFrOHWg6Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI3ODA2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  String name, String aclString, HddsProtos.KeyValue metadata){\n          \n          \n            \n                  String name, String aclString, HddsProtos.KeyValue metadata) {", "url": "https://github.com/apache/ozone/pull/1425#discussion_r493278065", "createdAt": "2020-09-23T07:58:27Z", "author": {"login": "cxorm"}, "path": "hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/helpers/TestInstanceHelper.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.helpers;\n+\n+import com.google.protobuf.ByteString;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n+import org.apache.hadoop.ozone.OzoneAcl;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos;\n+\n+\n+/**\n+ * Test TestInstanceHelper.\n+ *\n+ * Utility methods to create test instances of protobuf related classes\n+ */\n+public final class TestInstanceHelper {\n+\n+  private  TestInstanceHelper(){\n+    super();\n+  }\n+\n+  public static OzoneManagerProtocolProtos.OzoneAclInfo buildTestOzoneAclInfo(\n+      String aclString){\n+    OzoneAcl oacl = OzoneAcl.parseAcl(aclString);\n+    ByteString rights = ByteString.copyFrom(oacl.getAclBitSet().toByteArray());\n+    return OzoneManagerProtocolProtos.OzoneAclInfo.newBuilder()\n+        .setType(OzoneManagerProtocolProtos.OzoneAclInfo.OzoneAclType.USER)\n+        .setName(oacl.getName())\n+        .setRights(rights)\n+        .setAclScope(OzoneManagerProtocolProtos.\n+            OzoneAclInfo.OzoneAclScope.ACCESS)\n+        .build();\n+  }\n+\n+  public static HddsProtos.KeyValue getDefaultTestMetadata(\n+      String key, String value){\n+    return HddsProtos.KeyValue.newBuilder()\n+        .setKey(key)\n+        .setValue(value)\n+        .build();\n+  }\n+\n+  public static OzoneManagerProtocolProtos.PrefixInfo getDefaultTestPrefixInfo(\n+      String name, String aclString, HddsProtos.KeyValue metadata){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a01af2e66f81c1e26eeadfd7354e8ef37cde075f"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM2OTkzNQ==", "bodyText": "done", "url": "https://github.com/apache/ozone/pull/1425#discussion_r493369935", "createdAt": "2020-09-23T09:31:58Z", "author": {"login": "llemec"}, "path": "hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/helpers/TestInstanceHelper.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.helpers;\n+\n+import com.google.protobuf.ByteString;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n+import org.apache.hadoop.ozone.OzoneAcl;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos;\n+\n+\n+/**\n+ * Test TestInstanceHelper.\n+ *\n+ * Utility methods to create test instances of protobuf related classes\n+ */\n+public final class TestInstanceHelper {\n+\n+  private  TestInstanceHelper(){\n+    super();\n+  }\n+\n+  public static OzoneManagerProtocolProtos.OzoneAclInfo buildTestOzoneAclInfo(\n+      String aclString){\n+    OzoneAcl oacl = OzoneAcl.parseAcl(aclString);\n+    ByteString rights = ByteString.copyFrom(oacl.getAclBitSet().toByteArray());\n+    return OzoneManagerProtocolProtos.OzoneAclInfo.newBuilder()\n+        .setType(OzoneManagerProtocolProtos.OzoneAclInfo.OzoneAclType.USER)\n+        .setName(oacl.getName())\n+        .setRights(rights)\n+        .setAclScope(OzoneManagerProtocolProtos.\n+            OzoneAclInfo.OzoneAclScope.ACCESS)\n+        .build();\n+  }\n+\n+  public static HddsProtos.KeyValue getDefaultTestMetadata(\n+      String key, String value){\n+    return HddsProtos.KeyValue.newBuilder()\n+        .setKey(key)\n+        .setValue(value)\n+        .build();\n+  }\n+\n+  public static OzoneManagerProtocolProtos.PrefixInfo getDefaultTestPrefixInfo(\n+      String name, String aclString, HddsProtos.KeyValue metadata){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI3ODA2NQ=="}, "originalCommit": {"oid": "a01af2e66f81c1e26eeadfd7354e8ef37cde075f"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NzIxMzg0OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/helpers/TestInstanceHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNzo1ODozM1rOHWbT4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOTozMjowNFrOHWg6oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI3ODE3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  String key, String value){\n          \n          \n            \n                  String key, String value) {", "url": "https://github.com/apache/ozone/pull/1425#discussion_r493278178", "createdAt": "2020-09-23T07:58:33Z", "author": {"login": "cxorm"}, "path": "hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/helpers/TestInstanceHelper.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.helpers;\n+\n+import com.google.protobuf.ByteString;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n+import org.apache.hadoop.ozone.OzoneAcl;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos;\n+\n+\n+/**\n+ * Test TestInstanceHelper.\n+ *\n+ * Utility methods to create test instances of protobuf related classes\n+ */\n+public final class TestInstanceHelper {\n+\n+  private  TestInstanceHelper(){\n+    super();\n+  }\n+\n+  public static OzoneManagerProtocolProtos.OzoneAclInfo buildTestOzoneAclInfo(\n+      String aclString){\n+    OzoneAcl oacl = OzoneAcl.parseAcl(aclString);\n+    ByteString rights = ByteString.copyFrom(oacl.getAclBitSet().toByteArray());\n+    return OzoneManagerProtocolProtos.OzoneAclInfo.newBuilder()\n+        .setType(OzoneManagerProtocolProtos.OzoneAclInfo.OzoneAclType.USER)\n+        .setName(oacl.getName())\n+        .setRights(rights)\n+        .setAclScope(OzoneManagerProtocolProtos.\n+            OzoneAclInfo.OzoneAclScope.ACCESS)\n+        .build();\n+  }\n+\n+  public static HddsProtos.KeyValue getDefaultTestMetadata(\n+      String key, String value){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a01af2e66f81c1e26eeadfd7354e8ef37cde075f"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM3MDAxNw==", "bodyText": "done", "url": "https://github.com/apache/ozone/pull/1425#discussion_r493370017", "createdAt": "2020-09-23T09:32:04Z", "author": {"login": "llemec"}, "path": "hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/helpers/TestInstanceHelper.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.helpers;\n+\n+import com.google.protobuf.ByteString;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n+import org.apache.hadoop.ozone.OzoneAcl;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos;\n+\n+\n+/**\n+ * Test TestInstanceHelper.\n+ *\n+ * Utility methods to create test instances of protobuf related classes\n+ */\n+public final class TestInstanceHelper {\n+\n+  private  TestInstanceHelper(){\n+    super();\n+  }\n+\n+  public static OzoneManagerProtocolProtos.OzoneAclInfo buildTestOzoneAclInfo(\n+      String aclString){\n+    OzoneAcl oacl = OzoneAcl.parseAcl(aclString);\n+    ByteString rights = ByteString.copyFrom(oacl.getAclBitSet().toByteArray());\n+    return OzoneManagerProtocolProtos.OzoneAclInfo.newBuilder()\n+        .setType(OzoneManagerProtocolProtos.OzoneAclInfo.OzoneAclType.USER)\n+        .setName(oacl.getName())\n+        .setRights(rights)\n+        .setAclScope(OzoneManagerProtocolProtos.\n+            OzoneAclInfo.OzoneAclScope.ACCESS)\n+        .build();\n+  }\n+\n+  public static HddsProtos.KeyValue getDefaultTestMetadata(\n+      String key, String value){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI3ODE3OA=="}, "originalCommit": {"oid": "a01af2e66f81c1e26eeadfd7354e8ef37cde075f"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NzIxNDQ1OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/helpers/TestInstanceHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNzo1ODo0MFrOHWbUYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOTozMjowOVrOHWg67A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI3ODMwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  String aclString){\n          \n          \n            \n                  String aclString) {", "url": "https://github.com/apache/ozone/pull/1425#discussion_r493278304", "createdAt": "2020-09-23T07:58:40Z", "author": {"login": "cxorm"}, "path": "hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/helpers/TestInstanceHelper.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.helpers;\n+\n+import com.google.protobuf.ByteString;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n+import org.apache.hadoop.ozone.OzoneAcl;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos;\n+\n+\n+/**\n+ * Test TestInstanceHelper.\n+ *\n+ * Utility methods to create test instances of protobuf related classes\n+ */\n+public final class TestInstanceHelper {\n+\n+  private  TestInstanceHelper(){\n+    super();\n+  }\n+\n+  public static OzoneManagerProtocolProtos.OzoneAclInfo buildTestOzoneAclInfo(\n+      String aclString){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a01af2e66f81c1e26eeadfd7354e8ef37cde075f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM3MDA5Mg==", "bodyText": "done", "url": "https://github.com/apache/ozone/pull/1425#discussion_r493370092", "createdAt": "2020-09-23T09:32:09Z", "author": {"login": "llemec"}, "path": "hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/helpers/TestInstanceHelper.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.helpers;\n+\n+import com.google.protobuf.ByteString;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n+import org.apache.hadoop.ozone.OzoneAcl;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos;\n+\n+\n+/**\n+ * Test TestInstanceHelper.\n+ *\n+ * Utility methods to create test instances of protobuf related classes\n+ */\n+public final class TestInstanceHelper {\n+\n+  private  TestInstanceHelper(){\n+    super();\n+  }\n+\n+  public static OzoneManagerProtocolProtos.OzoneAclInfo buildTestOzoneAclInfo(\n+      String aclString){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI3ODMwNA=="}, "originalCommit": {"oid": "a01af2e66f81c1e26eeadfd7354e8ef37cde075f"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzg4MTE4OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/helpers/TestInstanceHelper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODo1Mzo0NVrOHb4TVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODo1Mzo0NVrOHb4TVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk5NjA1Mg==", "bodyText": "I think using OzoneAcl.toProtobuf for testing protobuf conversion of objects other than OzoneAcl is valid.  TestOzoneAcl of course needs to avoid that.\nNote: this would also fix the problem that buildTestOzoneAclInfo currently ignores identity type (user/group) in the input and returns a user ACL even for \"group:...\".\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                ByteString rights = ByteString.copyFrom(oacl.getAclBitSet().toByteArray());\n          \n          \n            \n                return OzoneManagerProtocolProtos.OzoneAclInfo.newBuilder()\n          \n          \n            \n                    .setType(OzoneManagerProtocolProtos.OzoneAclInfo.OzoneAclType.USER)\n          \n          \n            \n                    .setName(oacl.getName())\n          \n          \n            \n                    .setRights(rights)\n          \n          \n            \n                    .setAclScope(OzoneManagerProtocolProtos.\n          \n          \n            \n                        OzoneAclInfo.OzoneAclScope.ACCESS)\n          \n          \n            \n                    .build();\n          \n          \n            \n                return OzoneAcl.toProtobuf(oacl);", "url": "https://github.com/apache/ozone/pull/1425#discussion_r498996052", "createdAt": "2020-10-02T18:53:45Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/helpers/TestInstanceHelper.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.helpers;\n+\n+import com.google.protobuf.ByteString;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n+import org.apache.hadoop.ozone.OzoneAcl;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos;\n+\n+\n+/**\n+ * Test TestInstanceHelper.\n+ *\n+ * Utility methods to create test instances of protobuf related classes\n+ */\n+public final class TestInstanceHelper {\n+\n+  private TestInstanceHelper(){\n+    super();\n+  }\n+\n+  public static OzoneManagerProtocolProtos.OzoneAclInfo buildTestOzoneAclInfo(\n+      String aclString){\n+    OzoneAcl oacl = OzoneAcl.parseAcl(aclString);\n+    ByteString rights = ByteString.copyFrom(oacl.getAclBitSet().toByteArray());\n+    return OzoneManagerProtocolProtos.OzoneAclInfo.newBuilder()\n+        .setType(OzoneManagerProtocolProtos.OzoneAclInfo.OzoneAclType.USER)\n+        .setName(oacl.getName())\n+        .setRights(rights)\n+        .setAclScope(OzoneManagerProtocolProtos.\n+            OzoneAclInfo.OzoneAclScope.ACCESS)\n+        .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c95bc0b6a069cf92dff5283421fa7504c1f39208"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzk1MTcyOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/helpers/TestInstanceHelper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxOToyMDoyMlrOHb5AOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxOToyMDoyMlrOHb5AOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAwNzU0Ng==", "bodyText": "I don't think there is much \"default\" in these getDefaultTest... methods, as (most) data still has to be provided.  They are just factory methods wrapping the builders, trading flexibility and readability for slightly shorter code.  (Builder is more flexible since it can accept eg. multiple ACLs, and more readable because each argument is passed to a named method instead of a bunch of arguments to a single constructor.)\nInstead of such generic factory methods, I suggest adding:\n\nones that create objects with specific properties relevant for the tests\nones that fill irrelevant properties with random data (eg. for the metadata key-value pair)", "url": "https://github.com/apache/ozone/pull/1425#discussion_r499007546", "createdAt": "2020-10-02T19:20:22Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/helpers/TestInstanceHelper.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.helpers;\n+\n+import com.google.protobuf.ByteString;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n+import org.apache.hadoop.ozone.OzoneAcl;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos;\n+\n+\n+/**\n+ * Test TestInstanceHelper.\n+ *\n+ * Utility methods to create test instances of protobuf related classes\n+ */\n+public final class TestInstanceHelper {\n+\n+  private TestInstanceHelper(){\n+    super();\n+  }\n+\n+  public static OzoneManagerProtocolProtos.OzoneAclInfo buildTestOzoneAclInfo(\n+      String aclString){\n+    OzoneAcl oacl = OzoneAcl.parseAcl(aclString);\n+    ByteString rights = ByteString.copyFrom(oacl.getAclBitSet().toByteArray());\n+    return OzoneManagerProtocolProtos.OzoneAclInfo.newBuilder()\n+        .setType(OzoneManagerProtocolProtos.OzoneAclInfo.OzoneAclType.USER)\n+        .setName(oacl.getName())\n+        .setRights(rights)\n+        .setAclScope(OzoneManagerProtocolProtos.\n+            OzoneAclInfo.OzoneAclScope.ACCESS)\n+        .build();\n+  }\n+\n+  public static HddsProtos.KeyValue getDefaultTestMetadata(\n+      String key, String value) {\n+    return HddsProtos.KeyValue.newBuilder()\n+        .setKey(key)\n+        .setValue(value)\n+        .build();\n+  }\n+\n+  public static OzoneManagerProtocolProtos.PrefixInfo getDefaultTestPrefixInfo(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c95bc0b6a069cf92dff5283421fa7504c1f39208"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzk3NDA0OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/helpers/TestOmPrefixInfo.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxOToyODo1MlrOHb5OhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxOToyODo1MlrOHb5OhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAxMTIwNA==", "bodyText": "Nit: unnecessary new empty line.", "url": "https://github.com/apache/ozone/pull/1425#discussion_r499011204", "createdAt": "2020-10-02T19:28:52Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/helpers/TestOmPrefixInfo.java", "diffHunk": "@@ -18,39 +18,91 @@\n \n package org.apache.hadoop.ozone.om.helpers;\n \n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n import org.apache.hadoop.ozone.OzoneAcl;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos;\n import org.apache.hadoop.ozone.security.acl.IAccessAuthorizer;\n import org.junit.Assert;\n import org.junit.Test;\n \n import java.util.Collections;\n import java.util.HashMap;\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c95bc0b6a069cf92dff5283421fa7504c1f39208"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTQxMzM2OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/helpers/TestOmPrefixInfo.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNToyNjoyOVrOHdjDxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNToyNjoyOVrOHdjDxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc0NTE1Nw==", "bodyText": "It could be improved by accepting an OzoneAcl instead of a group ACL-related parameters.", "url": "https://github.com/apache/ozone/pull/1425#discussion_r500745157", "createdAt": "2020-10-07T05:26:29Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/helpers/TestOmPrefixInfo.java", "diffHunk": "@@ -18,39 +18,91 @@\n \n package org.apache.hadoop.ozone.om.helpers;\n \n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n import org.apache.hadoop.ozone.OzoneAcl;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos;\n import org.apache.hadoop.ozone.security.acl.IAccessAuthorizer;\n import org.junit.Assert;\n import org.junit.Test;\n \n import java.util.Collections;\n import java.util.HashMap;\n \n+\n import static org.apache.hadoop.ozone.OzoneAcl.AclScope.ACCESS;\n \n /**\n  * Class to test OmPrefixInfo.\n  */\n public class TestOmPrefixInfo {\n \n-  @Test\n-  public void testCopyObject() {\n-    OmPrefixInfo omPrefixInfo = new OmPrefixInfo(\"/path\",\n+  public OmPrefixInfo getOmPrefixInfoForTest(String path,\n+      IAccessAuthorizer.ACLIdentityType identityType,\n+      String identityString,\n+      IAccessAuthorizer.ACLType aclType,\n+      OzoneAcl.AclScope scope) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c95bc0b6a069cf92dff5283421fa7504c1f39208"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4902, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}