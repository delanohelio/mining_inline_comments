{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwNjc5MDY0", "number": 696, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjowMzowN1rODq_Ntw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMDo0MDoyMFrODyqrXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDAyNDg3OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/common/src/main/resources/ozone-default.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjowMzowN1rOF7EziQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNzowMjo0M1rOF7lKng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ4OTAzMw==", "bodyText": "Remove .user", "url": "https://github.com/apache/ozone/pull/696#discussion_r397489033", "createdAt": "2020-03-24T22:03:07Z", "author": {"login": "smengcl"}, "path": "hadoop-hdds/common/src/main/resources/ozone-default.xml", "diffHunk": "@@ -583,6 +583,16 @@\n       metadata to be cached in memory. This makes OM operations faster.\n     </description>\n   </property>\n+  <property>\n+    <name>ozone.om.user.volume.listall.allowed</name>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f732a8c1a95c4dae209ec8aae5261101ef8de57b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAxOTIzMA==", "bodyText": "3c9ba6b", "url": "https://github.com/apache/ozone/pull/696#discussion_r398019230", "createdAt": "2020-03-25T17:02:43Z", "author": {"login": "smengcl"}, "path": "hadoop-hdds/common/src/main/resources/ozone-default.xml", "diffHunk": "@@ -583,6 +583,16 @@\n       metadata to be cached in memory. This makes OM operations faster.\n     </description>\n   </property>\n+  <property>\n+    <name>ozone.om.user.volume.listall.allowed</name>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ4OTAzMw=="}, "originalCommit": {"oid": "f732a8c1a95c4dae209ec8aae5261101ef8de57b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODMxMTIwOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/OMConfigKeys.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMTo1OTo1M1rOF-pzVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMTo1OTo1M1rOF-pzVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI0MDkxOA==", "bodyText": "Remove _USER.", "url": "https://github.com/apache/ozone/pull/696#discussion_r401240918", "createdAt": "2020-03-31T21:59:53Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/OMConfigKeys.java", "diffHunk": "@@ -76,6 +76,10 @@ private OMConfigKeys() {\n       \"ozone.om.db.cache.size.mb\";\n   public static final int OZONE_OM_DB_CACHE_SIZE_DEFAULT = 128;\n \n+  public static final String OZONE_OM_USER_VOLUME_LISTALL_ALLOWED =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e880d579718c576c7e548cc4d73d15f26a196e49"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODMyMjc0OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMjowNDozNlrOF-p7Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMjowNDozNlrOF-p7Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI0MjkwNg==", "bodyText": "Remove log", "url": "https://github.com/apache/ozone/pull/696#discussion_r401242906", "createdAt": "2020-03-31T22:04:36Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -1819,7 +1823,30 @@ public void deleteVolume(String volume) throws IOException {\n     auditMap.put(OzoneConsts.USERNAME, userName);\n     try {\n       metrics.incNumVolumeLists();\n-      return volumeManager.listVolumes(userName, prefix, prevKey, maxKeys);\n+      if (isAclEnabled) {\n+        if (LOG.isDebugEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e880d579718c576c7e548cc4d73d15f26a196e49"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODMzOTEwOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMjoxMDozMFrOF-qFFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMjoxMDozMFrOF-qFFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI0NTQ2Mw==", "bodyText": "Use accessAuthorizer.checkAccess", "url": "https://github.com/apache/ozone/pull/696#discussion_r401245463", "createdAt": "2020-03-31T22:10:30Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -1819,7 +1823,30 @@ public void deleteVolume(String volume) throws IOException {\n     auditMap.put(OzoneConsts.USERNAME, userName);\n     try {\n       metrics.incNumVolumeLists();\n-      return volumeManager.listVolumes(userName, prefix, prevKey, maxKeys);\n+      if (isAclEnabled) {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"ACL is enabled. Listing volumes accessible by user. \"\n+                  + \"Principal: {}, keytab: {}\",\n+              configuration.get(OZONE_OM_KERBEROS_PRINCIPAL_KEY),\n+              configuration.get(OZONE_OM_KERBEROS_KEYTAB_FILE_KEY));\n+        }\n+        // List all volumes first\n+        List<OmVolumeArgs> listOfAllVolumes = volumeManager.listVolumes(\n+            null, prefix, prevKey, maxKeys);\n+        // Filter all volumes by ACL LIST permission of UGI\n+        return listOfAllVolumes.stream().filter(v -> v.getAclMap()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e880d579718c576c7e548cc4d73d15f26a196e49"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODMzOTM4OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMjoxMDozN1rOF-qFRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMjoxMDozN1rOF-qFRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI0NTUxMA==", "bodyText": "Remove log", "url": "https://github.com/apache/ozone/pull/696#discussion_r401245510", "createdAt": "2020-03-31T22:10:37Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -1819,7 +1823,30 @@ public void deleteVolume(String volume) throws IOException {\n     auditMap.put(OzoneConsts.USERNAME, userName);\n     try {\n       metrics.incNumVolumeLists();\n-      return volumeManager.listVolumes(userName, prefix, prevKey, maxKeys);\n+      if (isAclEnabled) {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"ACL is enabled. Listing volumes accessible by user. \"\n+                  + \"Principal: {}, keytab: {}\",\n+              configuration.get(OZONE_OM_KERBEROS_PRINCIPAL_KEY),\n+              configuration.get(OZONE_OM_KERBEROS_KEYTAB_FILE_KEY));\n+        }\n+        // List all volumes first\n+        List<OmVolumeArgs> listOfAllVolumes = volumeManager.listVolumes(\n+            null, prefix, prevKey, maxKeys);\n+        // Filter all volumes by ACL LIST permission of UGI\n+        return listOfAllVolumes.stream().filter(v -> v.getAclMap()\n+            .hasAccess(IAccessAuthorizer.ACLType.LIST, remoteUserUgi))\n+            .collect(Collectors.toList());\n+      } else {\n+        if (LOG.isDebugEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e880d579718c576c7e548cc4d73d15f26a196e49"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjM3NjE1OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/web/ozShell/volume/ListVolumeHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDoyMDozOFrOF_RIsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDoyMDozOFrOF_RIsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg4NTM2Mw==", "bodyText": "Improve the description.", "url": "https://github.com/apache/ozone/pull/696#discussion_r401885363", "createdAt": "2020-04-01T20:20:38Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/web/ozShell/volume/ListVolumeHandler.java", "diffHunk": "@@ -63,6 +63,10 @@\n       description = \"Owner of the volumes to list.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e880d579718c576c7e548cc4d73d15f26a196e49"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDUzNTAzOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/om/TestOzoneManagerListVolumes.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMDozNzoxN1rOGG2PLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMzowMzowOFrOGG6LiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgzMzI2MQ==", "bodyText": "can we wrap the stopCluster inside the try/final block in case the check failure the cluster will be stopped properly.", "url": "https://github.com/apache/ozone/pull/696#discussion_r409833261", "createdAt": "2020-04-16T20:37:17Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/om/TestOzoneManagerListVolumes.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.ozone.MiniOzoneCluster;\n+import org.apache.hadoop.ozone.OzoneAcl;\n+import org.apache.hadoop.ozone.client.ObjectStore;\n+import org.apache.hadoop.ozone.client.OzoneClient;\n+import org.apache.hadoop.ozone.client.OzoneVolume;\n+import org.apache.hadoop.ozone.client.protocol.ClientProtocol;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.security.acl.OzoneObj;\n+import org.apache.hadoop.ozone.security.acl.OzoneObjInfo;\n+import org.apache.hadoop.security.UserGroupInformation;\n+\n+import static org.apache.hadoop.hdds.scm.ScmConfigKeys.OZONE_SCM_RATIS_PIPELINE_LIMIT;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_ACL_AUTHORIZER_CLASS;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_ACL_AUTHORIZER_CLASS_NATIVE;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_ACL_ENABLED;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_ADMINISTRATORS;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_OPEN_KEY_EXPIRE_THRESHOLD_SECONDS;\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_VOLUME_LISTALL_ALLOWED;\n+import static org.apache.hadoop.ozone.security.acl.OzoneObj.StoreType.OZONE;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+\n+/**\n+ * Test OzoneManager list volume operation under combinations of configs.\n+ */\n+public class TestOzoneManagerListVolumes {\n+\n+  @Rule\n+  public Timeout timeout = new Timeout(120_000);\n+\n+  private UserGroupInformation loginUser;\n+  private UserGroupInformation user1 =\n+      UserGroupInformation.createRemoteUser(\"user1\");  // Admin user\n+  private UserGroupInformation user2 =\n+      UserGroupInformation.createRemoteUser(\"user2\");  // Non-admin user\n+\n+  @Before\n+  public void init() throws Exception {\n+    loginUser = UserGroupInformation.getLoginUser();\n+  }\n+\n+  /**\n+   * Create a MiniDFSCluster for testing.\n+   */\n+  private MiniOzoneCluster startCluster(boolean aclEnabled,\n+      boolean volListAllAllowed) throws Exception {\n+\n+    OzoneConfiguration conf = new OzoneConfiguration();\n+    String clusterId = UUID.randomUUID().toString();\n+    String scmId = UUID.randomUUID().toString();\n+    String omId = UUID.randomUUID().toString();\n+    conf.setInt(OZONE_OPEN_KEY_EXPIRE_THRESHOLD_SECONDS, 2);\n+    conf.set(OZONE_ADMINISTRATORS, \"user1\");\n+    conf.setInt(OZONE_SCM_RATIS_PIPELINE_LIMIT, 10);\n+\n+    // Use native impl here, default impl doesn't do actual checks\n+    conf.set(OZONE_ACL_AUTHORIZER_CLASS, OZONE_ACL_AUTHORIZER_CLASS_NATIVE);\n+    // Note: OM doesn't support live config reloading\n+    conf.setBoolean(OZONE_ACL_ENABLED, aclEnabled);\n+    conf.setBoolean(OZONE_OM_VOLUME_LISTALL_ALLOWED, volListAllAllowed);\n+\n+    MiniOzoneCluster cluster = MiniOzoneCluster.newBuilder(conf)\n+        .setClusterId(clusterId).setScmId(scmId).setOmId(omId).build();\n+    cluster.waitForClusterToBeReady();\n+\n+    // loginUser is the user running this test.\n+    // Implication: loginUser is automatically added to the OM admin list.\n+    UserGroupInformation.setLoginUser(loginUser);\n+    // Create volumes with non-default owners and ACLs\n+    OzoneClient client = cluster.getClient();\n+    ObjectStore objectStore = client.getObjectStore();\n+\n+    /* r = READ, w = WRITE, c = CREATE, d = DELETE\n+       l = LIST, a = ALL, n = NONE, x = READ_ACL, y = WRITE_ACL */\n+    String aclUser1All = \"user:user1:a\";\n+    String aclUser2All = \"user:user2:a\";\n+    String aclWorldAll = \"world::a\";\n+    createVolumeWithOwnerAndAcl(objectStore, \"volume1\", \"user1\", aclUser1All);\n+    createVolumeWithOwnerAndAcl(objectStore, \"volume2\", \"user2\", aclUser2All);\n+    createVolumeWithOwnerAndAcl(objectStore, \"volume3\", \"user1\", aclUser2All);\n+    createVolumeWithOwnerAndAcl(objectStore, \"volume4\", \"user2\", aclUser1All);\n+    createVolumeWithOwnerAndAcl(objectStore, \"volume5\", \"user1\", aclWorldAll);\n+\n+    return cluster;\n+  }\n+\n+  private void stopCluster(MiniOzoneCluster cluster) {\n+    if (cluster != null) {\n+      cluster.shutdown();\n+    }\n+  }\n+\n+  private void createVolumeWithOwnerAndAcl(ObjectStore objectStore,\n+      String volumeName, String ownerName, String aclString)\n+      throws IOException {\n+    ClientProtocol proxy = objectStore.getClientProxy();\n+    objectStore.createVolume(volumeName);\n+    proxy.setVolumeOwner(volumeName, ownerName);\n+    setVolumeAcl(objectStore, volumeName, aclString);\n+  }\n+\n+  /**\n+   * Helper function to set volume ACL.\n+   */\n+  private void setVolumeAcl(ObjectStore objectStore, String volumeName,\n+      String aclString) throws IOException {\n+    OzoneObj obj = OzoneObjInfo.Builder.newBuilder().setVolumeName(volumeName)\n+        .setResType(OzoneObj.ResourceType.VOLUME).setStoreType(OZONE).build();\n+    Assert.assertTrue(objectStore.setAcl(obj, OzoneAcl.parseAcls(aclString)));\n+  }\n+\n+  /**\n+   * Helper function to reduce code redundancy for test checks with each user\n+   * under different config combination.\n+   */\n+  private void checkUser(MiniOzoneCluster cluster, UserGroupInformation user,\n+      List<String> expectVol, boolean expectListAllSuccess) throws IOException {\n+\n+    UserGroupInformation.setLoginUser(user);\n+    OzoneClient client = cluster.getClient();\n+    ObjectStore objectStore = client.getObjectStore();\n+\n+    // `ozone sh volume list` shall return volumes with LIST permission of user.\n+    Iterator<? extends OzoneVolume> it = objectStore.listVolumesByUser(\n+        null, \"\", \"\");\n+    Set<String> accessibleVolumes = new HashSet<>();\n+    while (it.hasNext()) {\n+      OzoneVolume vol = it.next();\n+      String volumeName = vol.getName();\n+      accessibleVolumes.add(volumeName);\n+    }\n+    Assert.assertEquals(new HashSet<>(expectVol), accessibleVolumes);\n+\n+    // `ozone sh volume list --all` returns all volumes,\n+    //  or throws exception (for non-admin if acl enabled & listall disallowed).\n+    if (expectListAllSuccess) {\n+      it = objectStore.listVolumes(\"volume\");\n+      int count = 0;\n+      while (it.hasNext()) {\n+        it.next();\n+        count++;\n+      }\n+      Assert.assertEquals(5, count);\n+    } else {\n+      try {\n+        objectStore.listVolumes(\"volume\");\n+        Assert.fail(\"listAllVolumes should fail for \" + user.getUserName());\n+      } catch (RuntimeException ex) {\n+        // Current listAllVolumes throws RuntimeException\n+        if (ex.getCause() instanceof OMException) {\n+          // Expect PERMISSION_DENIED\n+          if (((OMException) ex.getCause()).getResult() !=\n+              OMException.ResultCodes.PERMISSION_DENIED) {\n+            throw ex;\n+          }\n+        } else {\n+          throw ex;\n+        }\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testAclEnabledListAllAllowed() throws Exception {\n+    // ozone.acl.enabled = true, ozone.om.volume.listall.allowed = true\n+    MiniOzoneCluster cluster = startCluster(true, true);\n+    checkUser(cluster, user1, Arrays.asList(\"volume1\", \"volume4\", \"volume5\"),\n+        true);\n+    checkUser(cluster, user2, Arrays.asList(\"volume2\", \"volume3\", \"volume5\"),\n+        true);\n+    stopCluster(cluster);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eec9d23d7030f030cd9cbf72f39ca3bbe35592a"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg5Nzg2NQ==", "bodyText": "Sure will do", "url": "https://github.com/apache/ozone/pull/696#discussion_r409897865", "createdAt": "2020-04-16T23:03:08Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/om/TestOzoneManagerListVolumes.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.ozone.MiniOzoneCluster;\n+import org.apache.hadoop.ozone.OzoneAcl;\n+import org.apache.hadoop.ozone.client.ObjectStore;\n+import org.apache.hadoop.ozone.client.OzoneClient;\n+import org.apache.hadoop.ozone.client.OzoneVolume;\n+import org.apache.hadoop.ozone.client.protocol.ClientProtocol;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.security.acl.OzoneObj;\n+import org.apache.hadoop.ozone.security.acl.OzoneObjInfo;\n+import org.apache.hadoop.security.UserGroupInformation;\n+\n+import static org.apache.hadoop.hdds.scm.ScmConfigKeys.OZONE_SCM_RATIS_PIPELINE_LIMIT;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_ACL_AUTHORIZER_CLASS;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_ACL_AUTHORIZER_CLASS_NATIVE;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_ACL_ENABLED;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_ADMINISTRATORS;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_OPEN_KEY_EXPIRE_THRESHOLD_SECONDS;\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_VOLUME_LISTALL_ALLOWED;\n+import static org.apache.hadoop.ozone.security.acl.OzoneObj.StoreType.OZONE;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+\n+/**\n+ * Test OzoneManager list volume operation under combinations of configs.\n+ */\n+public class TestOzoneManagerListVolumes {\n+\n+  @Rule\n+  public Timeout timeout = new Timeout(120_000);\n+\n+  private UserGroupInformation loginUser;\n+  private UserGroupInformation user1 =\n+      UserGroupInformation.createRemoteUser(\"user1\");  // Admin user\n+  private UserGroupInformation user2 =\n+      UserGroupInformation.createRemoteUser(\"user2\");  // Non-admin user\n+\n+  @Before\n+  public void init() throws Exception {\n+    loginUser = UserGroupInformation.getLoginUser();\n+  }\n+\n+  /**\n+   * Create a MiniDFSCluster for testing.\n+   */\n+  private MiniOzoneCluster startCluster(boolean aclEnabled,\n+      boolean volListAllAllowed) throws Exception {\n+\n+    OzoneConfiguration conf = new OzoneConfiguration();\n+    String clusterId = UUID.randomUUID().toString();\n+    String scmId = UUID.randomUUID().toString();\n+    String omId = UUID.randomUUID().toString();\n+    conf.setInt(OZONE_OPEN_KEY_EXPIRE_THRESHOLD_SECONDS, 2);\n+    conf.set(OZONE_ADMINISTRATORS, \"user1\");\n+    conf.setInt(OZONE_SCM_RATIS_PIPELINE_LIMIT, 10);\n+\n+    // Use native impl here, default impl doesn't do actual checks\n+    conf.set(OZONE_ACL_AUTHORIZER_CLASS, OZONE_ACL_AUTHORIZER_CLASS_NATIVE);\n+    // Note: OM doesn't support live config reloading\n+    conf.setBoolean(OZONE_ACL_ENABLED, aclEnabled);\n+    conf.setBoolean(OZONE_OM_VOLUME_LISTALL_ALLOWED, volListAllAllowed);\n+\n+    MiniOzoneCluster cluster = MiniOzoneCluster.newBuilder(conf)\n+        .setClusterId(clusterId).setScmId(scmId).setOmId(omId).build();\n+    cluster.waitForClusterToBeReady();\n+\n+    // loginUser is the user running this test.\n+    // Implication: loginUser is automatically added to the OM admin list.\n+    UserGroupInformation.setLoginUser(loginUser);\n+    // Create volumes with non-default owners and ACLs\n+    OzoneClient client = cluster.getClient();\n+    ObjectStore objectStore = client.getObjectStore();\n+\n+    /* r = READ, w = WRITE, c = CREATE, d = DELETE\n+       l = LIST, a = ALL, n = NONE, x = READ_ACL, y = WRITE_ACL */\n+    String aclUser1All = \"user:user1:a\";\n+    String aclUser2All = \"user:user2:a\";\n+    String aclWorldAll = \"world::a\";\n+    createVolumeWithOwnerAndAcl(objectStore, \"volume1\", \"user1\", aclUser1All);\n+    createVolumeWithOwnerAndAcl(objectStore, \"volume2\", \"user2\", aclUser2All);\n+    createVolumeWithOwnerAndAcl(objectStore, \"volume3\", \"user1\", aclUser2All);\n+    createVolumeWithOwnerAndAcl(objectStore, \"volume4\", \"user2\", aclUser1All);\n+    createVolumeWithOwnerAndAcl(objectStore, \"volume5\", \"user1\", aclWorldAll);\n+\n+    return cluster;\n+  }\n+\n+  private void stopCluster(MiniOzoneCluster cluster) {\n+    if (cluster != null) {\n+      cluster.shutdown();\n+    }\n+  }\n+\n+  private void createVolumeWithOwnerAndAcl(ObjectStore objectStore,\n+      String volumeName, String ownerName, String aclString)\n+      throws IOException {\n+    ClientProtocol proxy = objectStore.getClientProxy();\n+    objectStore.createVolume(volumeName);\n+    proxy.setVolumeOwner(volumeName, ownerName);\n+    setVolumeAcl(objectStore, volumeName, aclString);\n+  }\n+\n+  /**\n+   * Helper function to set volume ACL.\n+   */\n+  private void setVolumeAcl(ObjectStore objectStore, String volumeName,\n+      String aclString) throws IOException {\n+    OzoneObj obj = OzoneObjInfo.Builder.newBuilder().setVolumeName(volumeName)\n+        .setResType(OzoneObj.ResourceType.VOLUME).setStoreType(OZONE).build();\n+    Assert.assertTrue(objectStore.setAcl(obj, OzoneAcl.parseAcls(aclString)));\n+  }\n+\n+  /**\n+   * Helper function to reduce code redundancy for test checks with each user\n+   * under different config combination.\n+   */\n+  private void checkUser(MiniOzoneCluster cluster, UserGroupInformation user,\n+      List<String> expectVol, boolean expectListAllSuccess) throws IOException {\n+\n+    UserGroupInformation.setLoginUser(user);\n+    OzoneClient client = cluster.getClient();\n+    ObjectStore objectStore = client.getObjectStore();\n+\n+    // `ozone sh volume list` shall return volumes with LIST permission of user.\n+    Iterator<? extends OzoneVolume> it = objectStore.listVolumesByUser(\n+        null, \"\", \"\");\n+    Set<String> accessibleVolumes = new HashSet<>();\n+    while (it.hasNext()) {\n+      OzoneVolume vol = it.next();\n+      String volumeName = vol.getName();\n+      accessibleVolumes.add(volumeName);\n+    }\n+    Assert.assertEquals(new HashSet<>(expectVol), accessibleVolumes);\n+\n+    // `ozone sh volume list --all` returns all volumes,\n+    //  or throws exception (for non-admin if acl enabled & listall disallowed).\n+    if (expectListAllSuccess) {\n+      it = objectStore.listVolumes(\"volume\");\n+      int count = 0;\n+      while (it.hasNext()) {\n+        it.next();\n+        count++;\n+      }\n+      Assert.assertEquals(5, count);\n+    } else {\n+      try {\n+        objectStore.listVolumes(\"volume\");\n+        Assert.fail(\"listAllVolumes should fail for \" + user.getUserName());\n+      } catch (RuntimeException ex) {\n+        // Current listAllVolumes throws RuntimeException\n+        if (ex.getCause() instanceof OMException) {\n+          // Expect PERMISSION_DENIED\n+          if (((OMException) ex.getCause()).getResult() !=\n+              OMException.ResultCodes.PERMISSION_DENIED) {\n+            throw ex;\n+          }\n+        } else {\n+          throw ex;\n+        }\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testAclEnabledListAllAllowed() throws Exception {\n+    // ozone.acl.enabled = true, ozone.om.volume.listall.allowed = true\n+    MiniOzoneCluster cluster = startCluster(true, true);\n+    checkUser(cluster, user1, Arrays.asList(\"volume1\", \"volume4\", \"volume5\"),\n+        true);\n+    checkUser(cluster, user2, Arrays.asList(\"volume2\", \"volume3\", \"volume5\"),\n+        true);\n+    stopCluster(cluster);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgzMzI2MQ=="}, "originalCommit": {"oid": "3eec9d23d7030f030cd9cbf72f39ca3bbe35592a"}, "originalPosition": 203}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDU0NjIwOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/VolumeManagerImpl.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMDo0MDoyMFrOGG2Vsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzoxMDowMlrOGHWNfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgzNDkzMQ==", "bodyText": "Do we really need a write lock for list volume operation?", "url": "https://github.com/apache/ozone/pull/696#discussion_r409834931", "createdAt": "2020-04-16T20:40:20Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/VolumeManagerImpl.java", "diffHunk": "@@ -453,23 +449,11 @@ public boolean checkVolumeAccess(String volume, OzoneAclInfo userAcl)\n   @Override\n   public List<OmVolumeArgs> listVolumes(String userName,\n       String prefix, String startKey, int maxKeys) throws IOException {\n-    metadataManager.getLock().acquireLock(USER_LOCK, userName);\n+    metadataManager.getLock().acquireWriteLock(USER_LOCK, userName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eec9d23d7030f030cd9cbf72f39ca3bbe35592a"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg5NzgxMA==", "bodyText": "This is merely cleaning up the deprecated call.", "url": "https://github.com/apache/ozone/pull/696#discussion_r409897810", "createdAt": "2020-04-16T23:02:58Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/VolumeManagerImpl.java", "diffHunk": "@@ -453,23 +449,11 @@ public boolean checkVolumeAccess(String volume, OzoneAclInfo userAcl)\n   @Override\n   public List<OmVolumeArgs> listVolumes(String userName,\n       String prefix, String startKey, int maxKeys) throws IOException {\n-    metadataManager.getLock().acquireLock(USER_LOCK, userName);\n+    metadataManager.getLock().acquireWriteLock(USER_LOCK, userName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgzNDkzMQ=="}, "originalCommit": {"oid": "3eec9d23d7030f030cd9cbf72f39ca3bbe35592a"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkwNTY0MQ==", "bodyText": "I could either leave it alone, or change it to acquireReadLock. The latter should be fine though.", "url": "https://github.com/apache/ozone/pull/696#discussion_r409905641", "createdAt": "2020-04-16T23:26:29Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/VolumeManagerImpl.java", "diffHunk": "@@ -453,23 +449,11 @@ public boolean checkVolumeAccess(String volume, OzoneAclInfo userAcl)\n   @Override\n   public List<OmVolumeArgs> listVolumes(String userName,\n       String prefix, String startKey, int maxKeys) throws IOException {\n-    metadataManager.getLock().acquireLock(USER_LOCK, userName);\n+    metadataManager.getLock().acquireWriteLock(USER_LOCK, userName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgzNDkzMQ=="}, "originalCommit": {"oid": "3eec9d23d7030f030cd9cbf72f39ca3bbe35592a"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk3NzIxMA==", "bodyText": "I think we should change it to acquireReadLock.", "url": "https://github.com/apache/ozone/pull/696#discussion_r409977210", "createdAt": "2020-04-17T03:51:10Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/VolumeManagerImpl.java", "diffHunk": "@@ -453,23 +449,11 @@ public boolean checkVolumeAccess(String volume, OzoneAclInfo userAcl)\n   @Override\n   public List<OmVolumeArgs> listVolumes(String userName,\n       String prefix, String startKey, int maxKeys) throws IOException {\n-    metadataManager.getLock().acquireLock(USER_LOCK, userName);\n+    metadataManager.getLock().acquireWriteLock(USER_LOCK, userName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgzNDkzMQ=="}, "originalCommit": {"oid": "3eec9d23d7030f030cd9cbf72f39ca3bbe35592a"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM1NzExNg==", "bodyText": "done: c9a9291", "url": "https://github.com/apache/ozone/pull/696#discussion_r410357116", "createdAt": "2020-04-17T17:10:02Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/VolumeManagerImpl.java", "diffHunk": "@@ -453,23 +449,11 @@ public boolean checkVolumeAccess(String volume, OzoneAclInfo userAcl)\n   @Override\n   public List<OmVolumeArgs> listVolumes(String userName,\n       String prefix, String startKey, int maxKeys) throws IOException {\n-    metadataManager.getLock().acquireLock(USER_LOCK, userName);\n+    metadataManager.getLock().acquireWriteLock(USER_LOCK, userName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgzNDkzMQ=="}, "originalCommit": {"oid": "3eec9d23d7030f030cd9cbf72f39ca3bbe35592a"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4861, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}