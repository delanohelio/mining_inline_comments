{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4NzM5NjY3", "number": 684, "title": "HDDS-3134. Debug Tool that gives chunk location information given a key.", "bodyText": "What changes were proposed in this pull request?\nDebug tool to display chunk information given a key.Apart from Chunks ,it also displays information about the container on which the chunks are present and the pipeline info\nNon-Verbose output:\n\nVerbose Output:\n\nWhat is the link to the Apache JIRA\nhttps://issues.apache.org/jira/browse/HDDS-3134\nHow was this patch tested?\nIncluded robot tests in ozone-shell.robot", "createdAt": "2020-03-15T15:23:40Z", "url": "https://github.com/apache/ozone/pull/684", "merged": true, "mergeCommit": {"oid": "506778f48db56812afde7e8040eec335d582489a"}, "closed": true, "closedAt": "2020-04-15T14:42:04Z", "author": {"login": "sadanand48"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTpPeLgFqTM4NjI2MDM1OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcX5JFTgFqTM5Mzg0MTU3OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MjYwMzU4", "url": "https://github.com/apache/ozone/pull/684#pullrequestreview-386260358", "createdAt": "2020-04-02T09:36:29Z", "commit": {"oid": "ac0c457b594834300326b637a70e8daf0e77f790"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTozNjozMFrOF_jLAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTo1MzoyMFrOF_jykw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4MDg2Ng==", "bodyText": "plz Fix the imports", "url": "https://github.com/apache/ozone/pull/684#discussion_r402180866", "createdAt": "2020-04-02T09:36:30Z", "author": {"login": "bshashikant"}, "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/keyvalue/KeyValueContainerData.java", "diffHunk": "@@ -20,6 +20,8 @@\n \n import com.google.common.base.Preconditions;\n import com.google.common.collect.Lists;\n+\n+import java.awt.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac0c457b594834300326b637a70e8daf0e77f790"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4MTQ2NQ==", "bodyText": "Unrelated change.", "url": "https://github.com/apache/ozone/pull/684#discussion_r402181465", "createdAt": "2020-04-02T09:37:32Z", "author": {"login": "bshashikant"}, "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/admin/OzoneAdmin.java", "diffHunk": "@@ -1,4 +1,4 @@\n-/**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac0c457b594834300326b637a70e8daf0e77f790"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4NTk2OQ==", "bodyText": "we should use keyLocation.getBlockId() here", "url": "https://github.com/apache/ozone/pull/684#discussion_r402185969", "createdAt": "2020-04-02T09:44:48Z", "author": {"login": "bshashikant"}, "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/debug/ChunkKeyHandler.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.debug;\n+/*\n+Class that provides chunk information given a specific key\n+ */\n+\n+import com.google.common.base.Preconditions;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.hadoop.hdds.client.BlockID;\n+import org.apache.hadoop.hdds.protocol.DatanodeDetails;\n+import org.apache.hadoop.hdds.protocol.datanode.proto.ContainerProtos;\n+import org.apache.hadoop.hdds.scm.XceiverClientManager;\n+import org.apache.hadoop.hdds.scm.XceiverClientSpi;\n+import org.apache.hadoop.hdds.scm.cli.ContainerOperationClient;\n+import org.apache.hadoop.hdds.scm.client.ScmClient;\n+import org.apache.hadoop.hdds.scm.container.common.helpers.ContainerWithPipeline;\n+import org.apache.hadoop.hdds.scm.storage.ContainerProtocolCalls;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+import org.apache.hadoop.ozone.client.*;\n+import org.apache.hadoop.ozone.web.ozShell.Handler;\n+import org.apache.hadoop.ozone.web.ozShell.OzoneAddress;\n+import org.apache.hadoop.ozone.web.ozShell.Shell;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Parameters;\n+\n+/**\n+ * Gives chunk information given key as parameter.\n+ */\n+@Command(name = \"chunkinfo\",\n+        description = \"returns chunk location information\"\n+                + \" about an existing key\")\n+public class ChunkKeyHandler  extends  Handler {\n+\n+  @Parameters(arity = \"1..1\", description = Shell.OZONE_KEY_URI_DESCRIPTION)\n+    private String uri;\n+\n+  private ContainerOperationClient containerOperationClient;\n+  private  XceiverClientManager xceiverClientManager;\n+  private XceiverClientSpi xceiverClient;\n+\n+  private String getChunkLocationPath(String containerLocation) {\n+    return containerLocation + File.separator + OzoneConsts.STORAGE_DIR_CHUNKS;\n+  }\n+\n+  @Override\n+    public Void call() throws Exception {\n+    OzoneAddress address = new OzoneAddress(uri);\n+    containerOperationClient = new ContainerOperationClient(\n+            createOzoneConfiguration());\n+    xceiverClientManager = new XceiverClientManager(\n+            createOzoneConfiguration());\n+    address.ensureKeyAddress();\n+    JsonObject jsonObj = new JsonObject();\n+    JsonElement element;\n+    try (OzoneClient client = address.createClient(\n+            createOzoneConfiguration())) {\n+      String volumeName = address.getVolumeName();\n+      String bucketName = address.getBucketName();\n+      String keyName = address.getKeyName();\n+      List<ContainerProtos.ChunkInfo> tempchunks = null;\n+      List<ChunkDetails> chunkDetailsList = new ArrayList<ChunkDetails>();\n+      List<String> chunkPaths = new ArrayList<String>();\n+      OzoneVolume vol = client.getObjectStore().getVolume(volumeName);\n+      OzoneBucket bucket = vol.getBucket(bucketName);\n+      OzoneKeyDetails key = bucket.getKey(keyName);\n+      // querying  the keyLocations.The OM is queried to get containerID and\n+      // localID pertaining to a given key\n+      List<OzoneKeyLocation> keyLocationList = key.getOzoneKeyLocations();\n+      for (OzoneKeyLocation keyLocation:keyLocationList) {\n+        ContainerChunkInfo containerChunkInfoVerbose = new\n+                ContainerChunkInfo();\n+        ContainerChunkInfo containerChunkInfo = new ContainerChunkInfo();\n+        chunkPaths.clear();\n+        chunkDetailsList.clear();\n+        long containerId = keyLocation.getContainerID();\n+        BlockID blockID = new BlockID(containerId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac0c457b594834300326b637a70e8daf0e77f790"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4NjI0OQ==", "bodyText": "Not required..Can you plz remove it?", "url": "https://github.com/apache/ozone/pull/684#discussion_r402186249", "createdAt": "2020-04-02T09:45:16Z", "author": {"login": "bshashikant"}, "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/debug/ChunkKeyHandler.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.debug;\n+/*\n+Class that provides chunk information given a specific key\n+ */\n+\n+import com.google.common.base.Preconditions;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.hadoop.hdds.client.BlockID;\n+import org.apache.hadoop.hdds.protocol.DatanodeDetails;\n+import org.apache.hadoop.hdds.protocol.datanode.proto.ContainerProtos;\n+import org.apache.hadoop.hdds.scm.XceiverClientManager;\n+import org.apache.hadoop.hdds.scm.XceiverClientSpi;\n+import org.apache.hadoop.hdds.scm.cli.ContainerOperationClient;\n+import org.apache.hadoop.hdds.scm.client.ScmClient;\n+import org.apache.hadoop.hdds.scm.container.common.helpers.ContainerWithPipeline;\n+import org.apache.hadoop.hdds.scm.storage.ContainerProtocolCalls;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+import org.apache.hadoop.ozone.client.*;\n+import org.apache.hadoop.ozone.web.ozShell.Handler;\n+import org.apache.hadoop.ozone.web.ozShell.OzoneAddress;\n+import org.apache.hadoop.ozone.web.ozShell.Shell;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Parameters;\n+\n+/**\n+ * Gives chunk information given key as parameter.\n+ */\n+@Command(name = \"chunkinfo\",\n+        description = \"returns chunk location information\"\n+                + \" about an existing key\")\n+public class ChunkKeyHandler  extends  Handler {\n+\n+  @Parameters(arity = \"1..1\", description = Shell.OZONE_KEY_URI_DESCRIPTION)\n+    private String uri;\n+\n+  private ContainerOperationClient containerOperationClient;\n+  private  XceiverClientManager xceiverClientManager;\n+  private XceiverClientSpi xceiverClient;\n+\n+  private String getChunkLocationPath(String containerLocation) {\n+    return containerLocation + File.separator + OzoneConsts.STORAGE_DIR_CHUNKS;\n+  }\n+\n+  @Override\n+    public Void call() throws Exception {\n+    OzoneAddress address = new OzoneAddress(uri);\n+    containerOperationClient = new ContainerOperationClient(\n+            createOzoneConfiguration());\n+    xceiverClientManager = new XceiverClientManager(\n+            createOzoneConfiguration());\n+    address.ensureKeyAddress();\n+    JsonObject jsonObj = new JsonObject();\n+    JsonElement element;\n+    try (OzoneClient client = address.createClient(\n+            createOzoneConfiguration())) {\n+      String volumeName = address.getVolumeName();\n+      String bucketName = address.getBucketName();\n+      String keyName = address.getKeyName();\n+      List<ContainerProtos.ChunkInfo> tempchunks = null;\n+      List<ChunkDetails> chunkDetailsList = new ArrayList<ChunkDetails>();\n+      List<String> chunkPaths = new ArrayList<String>();\n+      OzoneVolume vol = client.getObjectStore().getVolume(volumeName);\n+      OzoneBucket bucket = vol.getBucket(bucketName);\n+      OzoneKeyDetails key = bucket.getKey(keyName);\n+      // querying  the keyLocations.The OM is queried to get containerID and\n+      // localID pertaining to a given key\n+      List<OzoneKeyLocation> keyLocationList = key.getOzoneKeyLocations();\n+      for (OzoneKeyLocation keyLocation:keyLocationList) {\n+        ContainerChunkInfo containerChunkInfoVerbose = new\n+                ContainerChunkInfo();\n+        ContainerChunkInfo containerChunkInfo = new ContainerChunkInfo();\n+        chunkPaths.clear();\n+        chunkDetailsList.clear();\n+        long containerId = keyLocation.getContainerID();\n+        BlockID blockID = new BlockID(containerId,\n+                keyLocation.getLocalID());\n+        try (ScmClient scmClient = containerOperationClient) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac0c457b594834300326b637a70e8daf0e77f790"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE5MDk5NQ==", "bodyText": "Add blockId to containerChunkInfo as well.", "url": "https://github.com/apache/ozone/pull/684#discussion_r402190995", "createdAt": "2020-04-02T09:53:20Z", "author": {"login": "bshashikant"}, "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/debug/ChunkKeyHandler.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.debug;\n+/*\n+Class that provides chunk information given a specific key\n+ */\n+\n+import com.google.common.base.Preconditions;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.hadoop.hdds.client.BlockID;\n+import org.apache.hadoop.hdds.protocol.DatanodeDetails;\n+import org.apache.hadoop.hdds.protocol.datanode.proto.ContainerProtos;\n+import org.apache.hadoop.hdds.scm.XceiverClientManager;\n+import org.apache.hadoop.hdds.scm.XceiverClientSpi;\n+import org.apache.hadoop.hdds.scm.cli.ContainerOperationClient;\n+import org.apache.hadoop.hdds.scm.client.ScmClient;\n+import org.apache.hadoop.hdds.scm.container.common.helpers.ContainerWithPipeline;\n+import org.apache.hadoop.hdds.scm.storage.ContainerProtocolCalls;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+import org.apache.hadoop.ozone.client.*;\n+import org.apache.hadoop.ozone.web.ozShell.Handler;\n+import org.apache.hadoop.ozone.web.ozShell.OzoneAddress;\n+import org.apache.hadoop.ozone.web.ozShell.Shell;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Parameters;\n+\n+/**\n+ * Gives chunk information given key as parameter.\n+ */\n+@Command(name = \"chunkinfo\",\n+        description = \"returns chunk location information\"\n+                + \" about an existing key\")\n+public class ChunkKeyHandler  extends  Handler {\n+\n+  @Parameters(arity = \"1..1\", description = Shell.OZONE_KEY_URI_DESCRIPTION)\n+    private String uri;\n+\n+  private ContainerOperationClient containerOperationClient;\n+  private  XceiverClientManager xceiverClientManager;\n+  private XceiverClientSpi xceiverClient;\n+\n+  private String getChunkLocationPath(String containerLocation) {\n+    return containerLocation + File.separator + OzoneConsts.STORAGE_DIR_CHUNKS;\n+  }\n+\n+  @Override\n+    public Void call() throws Exception {\n+    OzoneAddress address = new OzoneAddress(uri);\n+    containerOperationClient = new ContainerOperationClient(\n+            createOzoneConfiguration());\n+    xceiverClientManager = new XceiverClientManager(\n+            createOzoneConfiguration());\n+    address.ensureKeyAddress();\n+    JsonObject jsonObj = new JsonObject();\n+    JsonElement element;\n+    try (OzoneClient client = address.createClient(\n+            createOzoneConfiguration())) {\n+      String volumeName = address.getVolumeName();\n+      String bucketName = address.getBucketName();\n+      String keyName = address.getKeyName();\n+      List<ContainerProtos.ChunkInfo> tempchunks = null;\n+      List<ChunkDetails> chunkDetailsList = new ArrayList<ChunkDetails>();\n+      List<String> chunkPaths = new ArrayList<String>();\n+      OzoneVolume vol = client.getObjectStore().getVolume(volumeName);\n+      OzoneBucket bucket = vol.getBucket(bucketName);\n+      OzoneKeyDetails key = bucket.getKey(keyName);\n+      // querying  the keyLocations.The OM is queried to get containerID and\n+      // localID pertaining to a given key\n+      List<OzoneKeyLocation> keyLocationList = key.getOzoneKeyLocations();\n+      for (OzoneKeyLocation keyLocation:keyLocationList) {\n+        ContainerChunkInfo containerChunkInfoVerbose = new\n+                ContainerChunkInfo();\n+        ContainerChunkInfo containerChunkInfo = new ContainerChunkInfo();\n+        chunkPaths.clear();\n+        chunkDetailsList.clear();\n+        long containerId = keyLocation.getContainerID();\n+        BlockID blockID = new BlockID(containerId,\n+                keyLocation.getLocalID());\n+        try (ScmClient scmClient = containerOperationClient) {\n+          // scmClient is used to get container specific information like\n+          // ContainerPath amd so on\n+          ContainerWithPipeline container = scmClient\n+                  .getContainerWithPipeline(containerId);\n+          xceiverClient = xceiverClientManager.acquireClient(\n+                  container.getPipeline());\n+          // Datanode is queried to get chunk information.Thus querying\n+          // the OM,SCM and datanode helps us get chunk location information\n+          ContainerProtos.DatanodeBlockID datanodeBlockID = blockID\n+                            .getDatanodeBlockIDProtobuf();\n+          ContainerProtos.GetBlockResponseProto response =\n+                  ContainerProtocolCalls.getBlock(xceiverClient,\n+                          datanodeBlockID);\n+          tempchunks = response.getBlockData().getChunksList();\n+          Preconditions.checkNotNull(container, \"Container cannot be null\");\n+          ContainerProtos.ContainerDataProto containerData = scmClient\n+                  .readContainer(container\n+                            .getContainerInfo().getContainerID(),\n+                  container.getPipeline());\n+          for (ContainerProtos.ChunkInfo chunkInfo:tempchunks) {\n+            ChunkDetails chunkDetails = new ChunkDetails();\n+            chunkDetails.setChunkName(chunkInfo.getChunkName());\n+            chunkDetails.setChunkOffset(chunkInfo.getOffset());\n+            chunkDetailsList.add(chunkDetails);\n+            chunkPaths.add(getChunkLocationPath(\n+                    containerData.getContainerPath())\n+                    + File.separator\n+                    + chunkInfo.getChunkName());\n+          }\n+          containerChunkInfoVerbose.setContainerPath(\n+                  containerData.getContainerPath());\n+          containerChunkInfoVerbose.setDataNodeList(\n+                  container.getPipeline().getNodes());\n+          containerChunkInfoVerbose.setPipeline(container.getPipeline());\n+          containerChunkInfoVerbose.setChunkInfos(chunkDetailsList);\n+          containerChunkInfo.setChunks(chunkPaths);\n+          List<ChunkDataNodeDetails> chunkDataNodeDetails = new", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac0c457b594834300326b637a70e8daf0e77f790"}, "originalPosition": 138}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MjczNjQ0", "url": "https://github.com/apache/ozone/pull/684#pullrequestreview-386273644", "createdAt": "2020-04-02T09:54:30Z", "commit": {"oid": "ac0c457b594834300326b637a70e8daf0e77f790"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MTEyNzMz", "url": "https://github.com/apache/ozone/pull/684#pullrequestreview-388112733", "createdAt": "2020-04-06T10:16:27Z", "commit": {"oid": "f81217ca2bf5efad9727e6cc7207d40f787a59c0"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMDoxNjoyN1rOGBQ-0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMDoyMDoxMVrOGBRHmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk3OTk4Ng==", "bodyText": "unintended change", "url": "https://github.com/apache/ozone/pull/684#discussion_r403979986", "createdAt": "2020-04-06T10:16:27Z", "author": {"login": "bshashikant"}, "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/keyvalue/KeyValueContainerData.java", "diffHunk": "@@ -24,7 +24,7 @@\n \n import org.apache.hadoop.hdds.protocol.datanode.proto.ContainerProtos;\n import org.apache.hadoop.hdds.protocol.datanode.proto.ContainerProtos\n-    .ContainerDataProto;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f81217ca2bf5efad9727e6cc7207d40f787a59c0"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk4MDM3MA==", "bodyText": "unintended change", "url": "https://github.com/apache/ozone/pull/684#discussion_r403980370", "createdAt": "2020-04-06T10:17:06Z", "author": {"login": "bshashikant"}, "path": "hadoop-ozone/dist/src/main/smoketest/basic/ozone-shell.robot", "diffHunk": "@@ -60,7 +60,7 @@ Test ozone shell\n                     Should contain      ${result}       creationTime\n     ${result} =     Execute             ozone sh volume list | jq -r '. | select(.name==\"${volume}\")'\n                     Should contain      ${result}       creationTime\n-# TODO: Disable updating the owner, acls should be used to give access to other user.        ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f81217ca2bf5efad9727e6cc7207d40f787a59c0"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk4MDY5Mw==", "bodyText": "unwanted empty line", "url": "https://github.com/apache/ozone/pull/684#discussion_r403980693", "createdAt": "2020-04-06T10:17:39Z", "author": {"login": "bshashikant"}, "path": "hadoop-ozone/dist/src/main/smoketest/basic/ozone-shell.robot", "diffHunk": "@@ -116,13 +117,16 @@ Test key handling\n                     Execute             ls -l /tmp/NOTICE.txt.1\n     ${result} =     Execute             ozone sh key info ${protocol}${server}/${volume}/bb1/key1 | jq -r '. | select(.name==\"key1\")'\n                     Should contain      ${result}       creationTime\n+    ${result} =     Execute             ozone debug chunkinfo ${protocol}${server}/${volume}/bb1/key1 | jq  '.[]'\n+                    Should contain      ${result}       chunks\n     ${result} =     Execute             ozone sh key list ${protocol}${server}/${volume}/bb1 | jq -r '. | select(.name==\"key1\") | .name'\n                     Should Be Equal     ${result}       key1\n                     Execute             ozone sh key rename ${protocol}${server}/${volume}/bb1 key1 key2\n     ${result} =     Execute             ozone sh key list ${protocol}${server}/${volume}/bb1 | jq -r '.name'\n                     Should Be Equal     ${result}       key2\n                     Execute             ozone sh key delete ${protocol}${server}/${volume}/bb1/key2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f81217ca2bf5efad9727e6cc7207d40f787a59c0"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk4MjIzNA==", "bodyText": "Can we change the code here to directly use keyLocation.getBlockID()", "url": "https://github.com/apache/ozone/pull/684#discussion_r403982234", "createdAt": "2020-04-06T10:20:11Z", "author": {"login": "bshashikant"}, "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/debug/ChunkKeyHandler.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.debug;\n+/*\n+Class that provides chunk information given a specific key\n+ */\n+\n+import com.google.common.base.Preconditions;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.hadoop.hdds.client.BlockID;\n+import org.apache.hadoop.hdds.protocol.DatanodeDetails;\n+import org.apache.hadoop.hdds.protocol.datanode.proto.ContainerProtos;\n+import org.apache.hadoop.hdds.scm.XceiverClientManager;\n+import org.apache.hadoop.hdds.scm.XceiverClientSpi;\n+import org.apache.hadoop.hdds.scm.cli.ContainerOperationClient;\n+import org.apache.hadoop.hdds.scm.client.ScmClient;\n+import org.apache.hadoop.hdds.scm.container.common.helpers.ContainerWithPipeline;\n+import org.apache.hadoop.hdds.scm.storage.ContainerProtocolCalls;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+import org.apache.hadoop.ozone.client.*;\n+import org.apache.hadoop.ozone.web.ozShell.Handler;\n+import org.apache.hadoop.ozone.web.ozShell.OzoneAddress;\n+import org.apache.hadoop.ozone.web.ozShell.Shell;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Parameters;\n+\n+/**\n+ * Gives chunk information given key as parameter.\n+ */\n+@Command(name = \"chunkinfo\",\n+        description = \"returns chunk location information\"\n+                + \" about an existing key\")\n+public class ChunkKeyHandler  extends  Handler {\n+\n+  @Parameters(arity = \"1..1\", description = Shell.OZONE_KEY_URI_DESCRIPTION)\n+    private String uri;\n+\n+  private ContainerOperationClient containerOperationClient;\n+  private  XceiverClientManager xceiverClientManager;\n+  private XceiverClientSpi xceiverClient;\n+\n+  private String getChunkLocationPath(String containerLocation) {\n+    return containerLocation + File.separator + OzoneConsts.STORAGE_DIR_CHUNKS;\n+  }\n+\n+  @Override\n+    public Void call() throws Exception {\n+    OzoneAddress address = new OzoneAddress(uri);\n+    containerOperationClient = new ContainerOperationClient(\n+            createOzoneConfiguration());\n+    xceiverClientManager = new XceiverClientManager(\n+            createOzoneConfiguration());\n+    address.ensureKeyAddress();\n+    JsonObject jsonObj = new JsonObject();\n+    JsonElement element;\n+    try (OzoneClient client = address.createClient(\n+            createOzoneConfiguration())) {\n+      String volumeName = address.getVolumeName();\n+      String bucketName = address.getBucketName();\n+      String keyName = address.getKeyName();\n+      List<ContainerProtos.ChunkInfo> tempchunks = null;\n+      List<ChunkDetails> chunkDetailsList = new ArrayList<ChunkDetails>();\n+      List<String> chunkPaths = new ArrayList<String>();\n+      OzoneVolume vol = client.getObjectStore().getVolume(volumeName);\n+      OzoneBucket bucket = vol.getBucket(bucketName);\n+      OzoneKeyDetails key = bucket.getKey(keyName);\n+      // querying  the keyLocations.The OM is queried to get containerID and\n+      // localID pertaining to a given key\n+      List<OzoneKeyLocation> keyLocationList = key.getOzoneKeyLocations();\n+      for (OzoneKeyLocation keyLocation:keyLocationList) {\n+        ContainerChunkInfo containerChunkInfoVerbose = new\n+                ContainerChunkInfo();\n+        ContainerChunkInfo containerChunkInfo = new ContainerChunkInfo();\n+        chunkPaths.clear();\n+        chunkDetailsList.clear();\n+        long containerId = keyLocation.getContainerID();\n+        BlockID blockID = new BlockID(containerId,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4NTk2OQ=="}, "originalCommit": {"oid": "ac0c457b594834300326b637a70e8daf0e77f790"}, "originalPosition": 99}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5ODQ5NDEx", "url": "https://github.com/apache/ozone/pull/684#pullrequestreview-389849411", "createdAt": "2020-04-08T10:30:38Z", "commit": {"oid": "be01dd5f224d6f7839377a45a08bd73c2e5f9686"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMDozMDozOFrOGCpGQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMDozNDoyOFrOGCpOGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQyMzY4Mg==", "bodyText": "change it to ozone debug tool", "url": "https://github.com/apache/ozone/pull/684#discussion_r405423682", "createdAt": "2020-04-08T10:30:38Z", "author": {"login": "bshashikant"}, "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/debug/package-info.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * <p>\n+ * SCM related cli tools.\n+ */\n+\n+/**\n+ * Ozone Admin tools.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be01dd5f224d6f7839377a45a08bd73c2e5f9686"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQyNTQ1Mw==", "bodyText": "do we really need instance of xceiveClient here? Also, we need to explicitly release it at the end", "url": "https://github.com/apache/ozone/pull/684#discussion_r405425453", "createdAt": "2020-04-08T10:33:59Z", "author": {"login": "bshashikant"}, "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/debug/ChunkKeyHandler.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.debug;\n+/*\n+Class that provides chunk information given a specific key\n+ */\n+\n+import com.google.common.base.Preconditions;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.hadoop.hdds.client.BlockID;\n+import org.apache.hadoop.hdds.protocol.DatanodeDetails;\n+import org.apache.hadoop.hdds.protocol.datanode.proto.ContainerProtos;\n+import org.apache.hadoop.hdds.scm.XceiverClientManager;\n+import org.apache.hadoop.hdds.scm.XceiverClientSpi;\n+import org.apache.hadoop.hdds.scm.cli.ContainerOperationClient;\n+import org.apache.hadoop.hdds.scm.container.common.helpers.ContainerWithPipeline;\n+import org.apache.hadoop.hdds.scm.storage.ContainerProtocolCalls;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+import org.apache.hadoop.ozone.client.*;\n+import org.apache.hadoop.ozone.web.ozShell.Handler;\n+import org.apache.hadoop.ozone.web.ozShell.OzoneAddress;\n+import org.apache.hadoop.ozone.web.ozShell.Shell;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Parameters;\n+\n+/**\n+ * Gives chunk information given key as parameter.\n+ */\n+@Command(name = \"chunkinfo\",\n+        description = \"returns chunk location information\"\n+                + \" about an existing key\")\n+public class ChunkKeyHandler  extends  Handler {\n+\n+  @Parameters(arity = \"1..1\", description = Shell.OZONE_KEY_URI_DESCRIPTION)\n+    private String uri;\n+\n+  private ContainerOperationClient containerOperationClient;\n+  private  XceiverClientManager xceiverClientManager;\n+  private XceiverClientSpi xceiverClient;\n+\n+  private String getChunkLocationPath(String containerLocation) {\n+    return containerLocation + File.separator + OzoneConsts.STORAGE_DIR_CHUNKS;\n+  }\n+\n+  @Override\n+    public Void call() throws Exception {\n+    OzoneAddress address = new OzoneAddress(uri);\n+    containerOperationClient = new ContainerOperationClient(\n+            createOzoneConfiguration());\n+    xceiverClientManager = new XceiverClientManager(\n+            createOzoneConfiguration());\n+    address.ensureKeyAddress();\n+    JsonObject jsonObj = new JsonObject();\n+    JsonElement element;\n+    try (OzoneClient client = address.createClient(\n+            createOzoneConfiguration())) {\n+      String volumeName = address.getVolumeName();\n+      String bucketName = address.getBucketName();\n+      String keyName = address.getKeyName();\n+      List<ContainerProtos.ChunkInfo> tempchunks = null;\n+      List<ChunkDetails> chunkDetailsList = new ArrayList<ChunkDetails>();\n+      List<String> chunkPaths = new ArrayList<String>();\n+      OzoneVolume vol = client.getObjectStore().getVolume(volumeName);\n+      OzoneBucket bucket = vol.getBucket(bucketName);\n+      OzoneKeyDetails key = bucket.getKey(keyName);\n+      // querying  the keyLocations.The OM is queried to get containerID and\n+      // localID pertaining to a given key\n+      List<OzoneKeyLocation> keyLocationList = key.getOzoneKeyLocations();\n+      for (OzoneKeyLocation keyLocation:keyLocationList) {\n+        ContainerChunkInfo containerChunkInfoVerbose = new\n+                ContainerChunkInfo();\n+        ContainerChunkInfo containerChunkInfo = new ContainerChunkInfo();\n+        chunkPaths.clear();\n+        chunkDetailsList.clear();\n+        long containerId = keyLocation.getContainerID();\n+        long blockId = keyLocation.getLocalID();\n+        // scmClient is used to get container specific information like\n+        // ContainerPath amd so on\n+        ContainerWithPipeline container = containerOperationClient\n+                .getContainerWithPipeline(containerId);\n+        xceiverClient = xceiverClientManager.acquireClient(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be01dd5f224d6f7839377a45a08bd73c2e5f9686"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQyNTY5MA==", "bodyText": "remove the empty line", "url": "https://github.com/apache/ozone/pull/684#discussion_r405425690", "createdAt": "2020-04-08T10:34:28Z", "author": {"login": "bshashikant"}, "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/debug/ChunkKeyHandler.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.debug;\n+/*\n+Class that provides chunk information given a specific key\n+ */\n+\n+import com.google.common.base.Preconditions;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.hadoop.hdds.client.BlockID;\n+import org.apache.hadoop.hdds.protocol.DatanodeDetails;\n+import org.apache.hadoop.hdds.protocol.datanode.proto.ContainerProtos;\n+import org.apache.hadoop.hdds.scm.XceiverClientManager;\n+import org.apache.hadoop.hdds.scm.XceiverClientSpi;\n+import org.apache.hadoop.hdds.scm.cli.ContainerOperationClient;\n+import org.apache.hadoop.hdds.scm.container.common.helpers.ContainerWithPipeline;\n+import org.apache.hadoop.hdds.scm.storage.ContainerProtocolCalls;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+import org.apache.hadoop.ozone.client.*;\n+import org.apache.hadoop.ozone.web.ozShell.Handler;\n+import org.apache.hadoop.ozone.web.ozShell.OzoneAddress;\n+import org.apache.hadoop.ozone.web.ozShell.Shell;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Parameters;\n+\n+/**\n+ * Gives chunk information given key as parameter.\n+ */\n+@Command(name = \"chunkinfo\",\n+        description = \"returns chunk location information\"\n+                + \" about an existing key\")\n+public class ChunkKeyHandler  extends  Handler {\n+\n+  @Parameters(arity = \"1..1\", description = Shell.OZONE_KEY_URI_DESCRIPTION)\n+    private String uri;\n+\n+  private ContainerOperationClient containerOperationClient;\n+  private  XceiverClientManager xceiverClientManager;\n+  private XceiverClientSpi xceiverClient;\n+\n+  private String getChunkLocationPath(String containerLocation) {\n+    return containerLocation + File.separator + OzoneConsts.STORAGE_DIR_CHUNKS;\n+  }\n+\n+  @Override\n+    public Void call() throws Exception {\n+    OzoneAddress address = new OzoneAddress(uri);\n+    containerOperationClient = new ContainerOperationClient(\n+            createOzoneConfiguration());\n+    xceiverClientManager = new XceiverClientManager(\n+            createOzoneConfiguration());\n+    address.ensureKeyAddress();\n+    JsonObject jsonObj = new JsonObject();\n+    JsonElement element;\n+    try (OzoneClient client = address.createClient(\n+            createOzoneConfiguration())) {\n+      String volumeName = address.getVolumeName();\n+      String bucketName = address.getBucketName();\n+      String keyName = address.getKeyName();\n+      List<ContainerProtos.ChunkInfo> tempchunks = null;\n+      List<ChunkDetails> chunkDetailsList = new ArrayList<ChunkDetails>();\n+      List<String> chunkPaths = new ArrayList<String>();\n+      OzoneVolume vol = client.getObjectStore().getVolume(volumeName);\n+      OzoneBucket bucket = vol.getBucket(bucketName);\n+      OzoneKeyDetails key = bucket.getKey(keyName);\n+      // querying  the keyLocations.The OM is queried to get containerID and\n+      // localID pertaining to a given key\n+      List<OzoneKeyLocation> keyLocationList = key.getOzoneKeyLocations();\n+      for (OzoneKeyLocation keyLocation:keyLocationList) {\n+        ContainerChunkInfo containerChunkInfoVerbose = new\n+                ContainerChunkInfo();\n+        ContainerChunkInfo containerChunkInfo = new ContainerChunkInfo();\n+        chunkPaths.clear();\n+        chunkDetailsList.clear();\n+        long containerId = keyLocation.getContainerID();\n+        long blockId = keyLocation.getLocalID();\n+        // scmClient is used to get container specific information like\n+        // ContainerPath amd so on\n+        ContainerWithPipeline container = containerOperationClient\n+                .getContainerWithPipeline(containerId);\n+        xceiverClient = xceiverClientManager.acquireClient(\n+                container.getPipeline());\n+        // Datanode is queried to get chunk information.Thus querying\n+        // the OM,SCM and datanode helps us get chunk location information\n+        ContainerProtos.DatanodeBlockID datanodeBlockID =\n+                new BlockID(containerId, keyLocation.getLocalID())\n+                .getDatanodeBlockIDProtobuf();\n+        ContainerProtos.GetBlockResponseProto response =\n+                ContainerProtocolCalls.getBlock(xceiverClient,\n+                        datanodeBlockID);\n+        tempchunks = response.getBlockData().getChunksList();\n+        Preconditions.checkNotNull(container, \"Container cannot be null\");\n+        ContainerProtos.ContainerDataProto containerData =\n+                containerOperationClient.readContainer(container\n+                                .getContainerInfo().getContainerID(),\n+                        container.getPipeline());\n+        for (ContainerProtos.ChunkInfo chunkInfo:tempchunks) {\n+          ChunkDetails chunkDetails = new ChunkDetails();\n+          chunkDetails.setChunkName(chunkInfo.getChunkName());\n+          chunkDetails.setChunkOffset(chunkInfo.getOffset());\n+          chunkDetailsList.add(chunkDetails);\n+          chunkPaths.add(getChunkLocationPath(\n+                  containerData.getContainerPath())\n+                  + File.separator\n+                  + chunkInfo.getChunkName());\n+        }\n+        containerChunkInfoVerbose.setContainerPath(\n+                containerData.getContainerPath());\n+        containerChunkInfoVerbose.setDataNodeList(\n+                container.getPipeline().getNodes());\n+        containerChunkInfoVerbose.setPipeline(container.getPipeline());\n+        containerChunkInfoVerbose.setChunkInfos(chunkDetailsList);\n+        containerChunkInfo.setChunks(chunkPaths);\n+        List<ChunkDataNodeDetails> chunkDataNodeDetails = new\n+                ArrayList<ChunkDataNodeDetails>();\n+        for (DatanodeDetails datanodeDetails:container\n+                .getPipeline().getNodes()) {\n+          chunkDataNodeDetails.add(new ChunkDataNodeDetails(datanodeDetails\n+                  .getIpAddress(), datanodeDetails.getHostName()));\n+        }\n+        containerChunkInfo.setChunkDataNodeDetails(chunkDataNodeDetails);\n+        containerChunkInfo.setPipelineID(container.getPipeline()\n+                .getId().getId());\n+        Gson gson = new GsonBuilder().create();\n+        if (isVerbose()) {\n+          element = gson.toJsonTree(containerChunkInfoVerbose);\n+          jsonObj.add(\"block Id :\" + blockId + \"\", element);\n+        } else {\n+          element = gson.toJsonTree(containerChunkInfo);\n+          jsonObj.add(\"container Id :\" + containerId + \"  \" + \"block Id:\"\n+                  + blockId, element);\n+        }\n+\n+      }\n+      Gson gson = new GsonBuilder().setPrettyPrinting().create();\n+      String prettyJson = gson.toJson(jsonObj);\n+      System.out.println(prettyJson);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be01dd5f224d6f7839377a45a08bd73c2e5f9686"}, "originalPosition": 160}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "98f71c5999ddb813e199294051a452234677dc2a", "author": {"user": {"login": "sadanand48", "name": "Sadanand Shenoy"}}, "url": "https://github.com/apache/ozone/commit/98f71c5999ddb813e199294051a452234677dc2a", "committedDate": "2020-04-08T14:59:23Z", "message": "HDDS-3134. Debug Tool that gives chunk location information given a key."}, "afterCommit": {"oid": "aae0fd314c28aed20aaabe5cb923e9b701f39527", "author": {"user": {"login": "elek", "name": "Elek, M\u00e1rton"}}, "url": "https://github.com/apache/ozone/commit/aae0fd314c28aed20aaabe5cb923e9b701f39527", "committedDate": "2020-04-08T20:33:58Z", "message": "HDDS-3290. REVERT: Disable all the freon integration tests. (#786)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwODU5MzYw", "url": "https://github.com/apache/ozone/pull/684#pullrequestreview-390859360", "createdAt": "2020-04-09T14:44:22Z", "commit": {"oid": "062b0db11a1a4cbee81a2ab4c19cd2d2c0099b92"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwOTExMzc4", "url": "https://github.com/apache/ozone/pull/684#pullrequestreview-390911378", "createdAt": "2020-04-09T15:42:55Z", "commit": {"oid": "062b0db11a1a4cbee81a2ab4c19cd2d2c0099b92"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14a5106081c8121086ae9317224f93fc1db42f3e", "author": {"user": {"login": "sadanand48", "name": "Sadanand Shenoy"}}, "url": "https://github.com/apache/ozone/commit/14a5106081c8121086ae9317224f93fc1db42f3e", "committedDate": "2020-04-14T05:37:48Z", "message": "adressed review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be619564e7e691c51bc26e2663244be77b8f3da9", "author": {"user": {"login": "sadanand48", "name": "Sadanand Shenoy"}}, "url": "https://github.com/apache/ozone/commit/be619564e7e691c51bc26e2663244be77b8f3da9", "committedDate": "2020-04-14T05:37:48Z", "message": "adressed some failing checks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "810b4d9cc3547996207006f633f2913aa814b3ca", "author": {"user": {"login": "sadanand48", "name": "Sadanand Shenoy"}}, "url": "https://github.com/apache/ozone/commit/810b4d9cc3547996207006f633f2913aa814b3ca", "committedDate": "2020-04-14T05:37:48Z", "message": "adressed some failing checks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57606ce363190bd34c382225498ba71df04640e7", "author": {"user": {"login": "sadanand48", "name": "Sadanand Shenoy"}}, "url": "https://github.com/apache/ozone/commit/57606ce363190bd34c382225498ba71df04640e7", "committedDate": "2020-04-14T05:37:48Z", "message": "addressed checks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "196b6799ad5771e3a749fc05b01786265cd4a5a3", "author": {"user": {"login": "sadanand48", "name": "Sadanand Shenoy"}}, "url": "https://github.com/apache/ozone/commit/196b6799ad5771e3a749fc05b01786265cd4a5a3", "committedDate": "2020-04-14T05:40:49Z", "message": "addressed merging issues"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "86f20858a6d22394a5bf3b2b9997911cb3e78334", "author": {"user": {"login": "sadanand48", "name": "Sadanand Shenoy"}}, "url": "https://github.com/apache/ozone/commit/86f20858a6d22394a5bf3b2b9997911cb3e78334", "committedDate": "2020-04-13T12:50:28Z", "message": "addressed checks"}, "afterCommit": {"oid": "196b6799ad5771e3a749fc05b01786265cd4a5a3", "author": {"user": {"login": "sadanand48", "name": "Sadanand Shenoy"}}, "url": "https://github.com/apache/ozone/commit/196b6799ad5771e3a749fc05b01786265cd4a5a3", "committedDate": "2020-04-14T05:40:49Z", "message": "addressed merging issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ed89570af9756a2e1f40c53313dce9be6f7eede", "author": {"user": {"login": "sadanand48", "name": "Sadanand Shenoy"}}, "url": "https://github.com/apache/ozone/commit/7ed89570af9756a2e1f40c53313dce9be6f7eede", "committedDate": "2020-04-14T09:11:15Z", "message": "addressed failing check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34278d9075e47818facb0f0c03a1c6d5aed92649", "author": {"user": {"login": "sadanand48", "name": "Sadanand Shenoy"}}, "url": "https://github.com/apache/ozone/commit/34278d9075e47818facb0f0c03a1c6d5aed92649", "committedDate": "2020-04-14T11:58:22Z", "message": "addressed failed check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29acd42726c213a0dd5742d3b8127c5b721592b5", "author": {"user": {"login": "sadanand48", "name": "Sadanand Shenoy"}}, "url": "https://github.com/apache/ozone/commit/29acd42726c213a0dd5742d3b8127c5b721592b5", "committedDate": "2020-04-15T10:27:02Z", "message": "did some code cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33389dcab612022dca0c4ba4fff4e0150be7b88d", "author": {"user": {"login": "sadanand48", "name": "Sadanand Shenoy"}}, "url": "https://github.com/apache/ozone/commit/33389dcab612022dca0c4ba4fff4e0150be7b88d", "committedDate": "2020-04-15T10:32:22Z", "message": "did some code cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22a3d976944155326b01e84c5619ef1be0f74283", "author": {"user": {"login": "sadanand48", "name": "Sadanand Shenoy"}}, "url": "https://github.com/apache/ozone/commit/22a3d976944155326b01e84c5619ef1be0f74283", "committedDate": "2020-04-15T10:41:32Z", "message": "did some code cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "381c8edd8c7891cd8b43179bd772bdfc16c29174", "author": {"user": {"login": "sadanand48", "name": "Sadanand Shenoy"}}, "url": "https://github.com/apache/ozone/commit/381c8edd8c7891cd8b43179bd772bdfc16c29174", "committedDate": "2020-04-15T11:56:35Z", "message": "did some code cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzODQxNTc4", "url": "https://github.com/apache/ozone/pull/684#pullrequestreview-393841578", "createdAt": "2020-04-15T14:40:51Z", "commit": {"oid": "381c8edd8c7891cd8b43179bd772bdfc16c29174"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3478, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}