{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1NjAyNDAw", "number": 471, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxODo0OTo0OFrODaRnwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxODo1ODozOFrODaRxzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODc4MjczOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/security/x509/certificate/utils/CRLCodec.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxODo0OTo0OFrOFhI5bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxOToyMjoyOVrOFhJ1qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5MzEwMg==", "bodyText": "NIT: should we rename the method from get509CRL to getX509CRL?", "url": "https://github.com/apache/ozone/pull/471#discussion_r370293102", "createdAt": "2020-01-23T18:49:48Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/security/x509/certificate/utils/CRLCodec.java", "diffHunk": "@@ -78,7 +78,7 @@ public CRLCodec(SecurityConfig securityConfig) {\n    * Returns a X509 CRL from the CRL Holder.\n    *\n    * @param holder - Holder\n-   * @return X509Certificate.\n+   * @return X509CRL - X509 CRL.\n    * @throws CRLException - on Error.\n    */\n   public static X509CRL get509CRL(X509CRLHolder holder)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3fbe6f4338d6bb4184a1d929e1e5f2f14244a00"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMwODUyMQ==", "bodyText": "Good point. Done.", "url": "https://github.com/apache/ozone/pull/471#discussion_r370308521", "createdAt": "2020-01-23T19:22:29Z", "author": {"login": "abhishekaypurohit"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/security/x509/certificate/utils/CRLCodec.java", "diffHunk": "@@ -78,7 +78,7 @@ public CRLCodec(SecurityConfig securityConfig) {\n    * Returns a X509 CRL from the CRL Holder.\n    *\n    * @param holder - Holder\n-   * @return X509Certificate.\n+   * @return X509CRL - X509 CRL.\n    * @throws CRLException - on Error.\n    */\n   public static X509CRL get509CRL(X509CRLHolder holder)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5MzEwMg=="}, "originalCommit": {"oid": "b3fbe6f4338d6bb4184a1d929e1e5f2f14244a00"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODgwODQ0OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/common/src/test/java/org/apache/hadoop/hdds/security/x509/certificate/utils/TestCRLCodec.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxODo1ODozOFrOFhJJxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxOToyMjoxMVrOFhJ1Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5NzI4NA==", "bodyText": "NIT: the InputStream can be wrapped with try-with-resource.", "url": "https://github.com/apache/ozone/pull/471#discussion_r370297284", "createdAt": "2020-01-23T18:58:38Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-hdds/common/src/test/java/org/apache/hadoop/hdds/security/x509/certificate/utils/TestCRLCodec.java", "diffHunk": "@@ -101,11 +122,124 @@ public void testWriteCRL() throws IOException, OperatorCreationException {\n         builder.build(contentSignerBuilder.build(privateKey));\n \n     CRLCodec crlCodec = new CRLCodec(securityConfig);\n-    crlCodec.writeCRL(cRLHolder, CRL_FILE_NAME, true);\n+    crlCodec.writeCRL(cRLHolder, this.securityConfig.getCrlName(), true);\n \n     X509CRLEntryHolder entryHolder =\n         cRLHolder.getRevokedCertificate(BigInteger.ONE);\n     assertNotNull(entryHolder);\n+\n+    // verify file generation\n+    File crlFile =\n+        Paths.get(crlCodec.getLocation().toString(),\n+                  this.securityConfig.getCrlName()).toFile();\n+    assertTrue(crlFile.exists());\n+\n+    try (BufferedReader reader = new BufferedReader(new FileReader(crlFile))){\n+\n+      // Verify contents of the file\n+      String header = reader.readLine();\n+      assertEquals(\"-----BEGIN X509 CRL-----\", header);\n+\n+      String footer = null;\n+      String line = null;\n+      while ((line = reader.readLine()) != null) {\n+        footer = line;\n+      }\n+      assertEquals(\"-----END X509 CRL-----\", footer);\n+    }\n+  }\n+\n+  @Test\n+  public void testWriteCRLX509() throws IOException,\n+      OperatorCreationException, CertificateException, CRLException {\n+\n+    X500Name issuer = x509CertificateHolder.getIssuer();\n+    Date now = new Date();\n+    X509v2CRLBuilder builder = new X509v2CRLBuilder(issuer, now);\n+    builder.addCRLEntry(x509CertificateHolder.getSerialNumber(), now,\n+                        CRLReason.cACompromise);\n+\n+    InputStream inStream = null;\n+    byte[] crlBytes = TMP_CRL_ENTRY.getBytes();\n+    try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3fbe6f4338d6bb4184a1d929e1e5f2f14244a00"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMwODM4Mw==", "bodyText": "Done.", "url": "https://github.com/apache/ozone/pull/471#discussion_r370308383", "createdAt": "2020-01-23T19:22:11Z", "author": {"login": "abhishekaypurohit"}, "path": "hadoop-hdds/common/src/test/java/org/apache/hadoop/hdds/security/x509/certificate/utils/TestCRLCodec.java", "diffHunk": "@@ -101,11 +122,124 @@ public void testWriteCRL() throws IOException, OperatorCreationException {\n         builder.build(contentSignerBuilder.build(privateKey));\n \n     CRLCodec crlCodec = new CRLCodec(securityConfig);\n-    crlCodec.writeCRL(cRLHolder, CRL_FILE_NAME, true);\n+    crlCodec.writeCRL(cRLHolder, this.securityConfig.getCrlName(), true);\n \n     X509CRLEntryHolder entryHolder =\n         cRLHolder.getRevokedCertificate(BigInteger.ONE);\n     assertNotNull(entryHolder);\n+\n+    // verify file generation\n+    File crlFile =\n+        Paths.get(crlCodec.getLocation().toString(),\n+                  this.securityConfig.getCrlName()).toFile();\n+    assertTrue(crlFile.exists());\n+\n+    try (BufferedReader reader = new BufferedReader(new FileReader(crlFile))){\n+\n+      // Verify contents of the file\n+      String header = reader.readLine();\n+      assertEquals(\"-----BEGIN X509 CRL-----\", header);\n+\n+      String footer = null;\n+      String line = null;\n+      while ((line = reader.readLine()) != null) {\n+        footer = line;\n+      }\n+      assertEquals(\"-----END X509 CRL-----\", footer);\n+    }\n+  }\n+\n+  @Test\n+  public void testWriteCRLX509() throws IOException,\n+      OperatorCreationException, CertificateException, CRLException {\n+\n+    X500Name issuer = x509CertificateHolder.getIssuer();\n+    Date now = new Date();\n+    X509v2CRLBuilder builder = new X509v2CRLBuilder(issuer, now);\n+    builder.addCRLEntry(x509CertificateHolder.getSerialNumber(), now,\n+                        CRLReason.cACompromise);\n+\n+    InputStream inStream = null;\n+    byte[] crlBytes = TMP_CRL_ENTRY.getBytes();\n+    try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5NzI4NA=="}, "originalCommit": {"oid": "b3fbe6f4338d6bb4184a1d929e1e5f2f14244a00"}, "originalPosition": 96}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4975, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}