{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0NzczMzQz", "number": 1078, "title": "HDDS-3794. Topology Aware read does not work correctly in XceiverClientGrpc", "bodyText": "What changes were proposed in this pull request?\nIn XceiverClientGrpc.java, the calls to read a block or chunks for a Datanode end up in the private method sendCommandWithRetry(). In this method it decides which datanode it should send the request to. To do that, it checks if there is a cached DN connection for the given block and if so it uses that. If there is no cached connection, it should take network topology into account or shuffle the nodes:\n   List<DatanodeDetails> datanodeList = null;\n\n    DatanodeBlockID blockID = null;\n    if (request.getCmdType() == ContainerProtos.Type.ReadChunk) {\n      blockID = request.getReadChunk().getBlockID();\n    } else if (request.getCmdType() == ContainerProtos.Type.GetSmallFile) {\n      blockID = request.getGetSmallFile().getBlock().getBlockID();\n    }\n\n    if (blockID != null) {\n      // Check if the DN to which the GetBlock command was sent has been cached.\n      DatanodeDetails cachedDN = getBlockDNcache.get(blockID);\n      if (cachedDN != null) {\n        datanodeList = pipeline.getNodes();\n        int getBlockDNCacheIndex = datanodeList.indexOf(cachedDN);\n        if (getBlockDNCacheIndex > 0) {\n          // Pull the Cached DN to the top of the DN list\n          Collections.swap(datanodeList, 0, getBlockDNCacheIndex);\n        }\n      } else if (topologyAwareRead) {\n        datanodeList = pipeline.getNodesInOrder();\n      }\n    }\n    if (datanodeList == null) {\n      datanodeList = pipeline.getNodes();\n      // Shuffle datanode list so that clients do not read in the same order\n      // every time.\n      Collections.shuffle(datanodeList);\n    }\n    <call to DN after here>\n\nThe normal flow for the client is to first make a getBlock() call to the DN and then a readChunk() call.\nDue to the logic at the top of the block above, blockID is always going to be null for the getBlock() call, then it never checks the topologyAwareRead section and shuffles the node.\nThen for readChunk, it will find the blockID, find a cached DN, which was the result of the shuffle, and then it reuses that DN.\nTherefore the topologyAwareRead does not work as expected.\nWhat is the link to the Apache JIRA\nhttps://issues.apache.org/jira/browse/HDDS-3794\nHow was this patch tested?\nNew unit tests added to reproduce the issue and then prove it is fixed.", "createdAt": "2020-06-15T20:36:05Z", "url": "https://github.com/apache/ozone/pull/1078", "merged": true, "mergeCommit": {"oid": "8b2f9f41eeec9ed29ebc45adfe11a713f29bdc28"}, "closed": true, "closedAt": "2020-06-19T20:46:32Z", "author": {"login": "sodonnel"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcrmvNZgH2gAyNDM0NzczMzQzOmQwMWE5MzJmNWY4OGM1MGY1ZThkNjJiOTI2OTFhOWU5NDY3ZDQ2NzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcsfbmMgFqTQzMzM0ODk4Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d01a932f5f88c50f5e8d62b92691a9e9467d4674", "author": {"user": null}, "url": "https://github.com/apache/ozone/commit/d01a932f5f88c50f5e8d62b92691a9e9467d4674", "committedDate": "2020-06-15T20:32:47Z", "message": "Fixed issue and added tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99ef7a27975e0cc475c3b8caf7895054e0a60244", "author": {"user": null}, "url": "https://github.com/apache/ozone/commit/99ef7a27975e0cc475c3b8caf7895054e0a60244", "committedDate": "2020-06-15T22:14:54Z", "message": "Retest"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNzU3MDkx", "url": "https://github.com/apache/ozone/pull/1078#pullrequestreview-431757091", "createdAt": "2020-06-16T17:58:13Z", "commit": {"oid": "99ef7a27975e0cc475c3b8caf7895054e0a60244"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxOTA3NTAw", "url": "https://github.com/apache/ozone/pull/1078#pullrequestreview-431907500", "createdAt": "2020-06-16T21:32:18Z", "commit": {"oid": "99ef7a27975e0cc475c3b8caf7895054e0a60244"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTozMjoxOFrOGkt70Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTozMjoxOFrOGkt70Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE1NDUxMw==", "bodyText": "Good catch @sodonnel . The fix LGTM overall. I just have one question:\nHave you consider populating blockID properly for the first getBlock() call with additional else if on the top?\nelse if (request.getCmdType() == ContainerProtos.Type.GetBlock) {\nblockID = request.getGetBlock().getBlockID();\n}", "url": "https://github.com/apache/ozone/pull/1078#discussion_r441154513", "createdAt": "2020-06-16T21:32:18Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-hdds/client/src/main/java/org/apache/hadoop/hdds/scm/XceiverClientGrpc.java", "diffHunk": "@@ -314,15 +314,17 @@ private XceiverClientReply sendCommandWithRetry(\n           // Pull the Cached DN to the top of the DN list\n           Collections.swap(datanodeList, 0, getBlockDNCacheIndex);\n         }\n-      } else if (topologyAwareRead) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ef7a27975e0cc475c3b8caf7895054e0a60244"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9bb9c927b3b5bece58041b972d5645c9cbd14627", "author": {"user": null}, "url": "https://github.com/apache/ozone/commit/9bb9c927b3b5bece58041b972d5645c9cbd14627", "committedDate": "2020-06-17T09:23:36Z", "message": "Check for cached connection on getBlock command too"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7fd71cfee55f6a9dd2d46fb0619eafe68e36a320", "author": {"user": null}, "url": "https://github.com/apache/ozone/commit/7fd71cfee55f6a9dd2d46fb0619eafe68e36a320", "committedDate": "2020-06-17T11:45:23Z", "message": "Trigger CI"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzMzQ4OTgz", "url": "https://github.com/apache/ozone/pull/1078#pullrequestreview-433348983", "createdAt": "2020-06-18T14:35:57Z", "commit": {"oid": "7fd71cfee55f6a9dd2d46fb0619eafe68e36a320"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2956, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}