{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxODMwNTY3", "number": 438, "title": "HDDS-2878. Refactor MiniOzoneLoadGenerator to add more load generators to chaos testing.", "bodyText": "What changes were proposed in this pull request?\nThis jira refactors the current MiniOzoneLoadGenerator to make it more pluggable.\nWhat is the link to the Apache JIRA\nhttps://issues.apache.org/jira/browse/HDDS-2878\nHow was this patch tested?\nTested by running MiniOzoneChaosCluster.", "createdAt": "2020-01-12T13:32:50Z", "url": "https://github.com/apache/ozone/pull/438", "merged": true, "mergeCommit": {"oid": "ad7cd6a0815d346227511847c3e5bb36176e11b3"}, "closed": true, "closedAt": "2020-03-24T09:08:59Z", "author": {"login": "mukul1987"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_dRFeAFqTM1MDk0MjgyNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQfu-NAFqTM3OTUyMDI4MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwOTQyODI1", "url": "https://github.com/apache/ozone/pull/438#pullrequestreview-350942825", "createdAt": "2020-01-30T16:04:54Z", "commit": {"oid": "5b5f9acdd455b855639d2e071eac926543ac5fe4"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNjowNDo1NVrOFjwj8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNjozNTozOVrOFjxttg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA0MDExNQ==", "bodyText": "Typo: defautl", "url": "https://github.com/apache/ozone/pull/438#discussion_r373040115", "createdAt": "2020-01-30T16:04:55Z", "author": {"login": "nandakumar131"}, "path": "hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/loadgenerators/AgedLoadGenerator.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.loadgenerators;\n+\n+import org.apache.commons.lang3.RandomUtils;\n+import org.apache.hadoop.ozone.MiniOzoneLoadGenerator;\n+import org.apache.hadoop.ozone.utils.LoadBucket;\n+import org.apache.hadoop.ozone.utils.TestProbability;\n+import org.apache.hadoop.util.ExitUtil;\n+import org.apache.hadoop.util.Time;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.nio.ByteBuffer;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Aged Load Generator for Ozone.\n+ *\n+ * This Load Generator reads and write key to an Ozone bucket.\n+ *\n+ * The defautl writes to read ratio is 10:90.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5f9acdd455b855639d2e071eac926543ac5fe4"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA0MTI1OA==", "bodyText": "Typo: Suffex", "url": "https://github.com/apache/ozone/pull/438#discussion_r373041258", "createdAt": "2020-01-30T16:06:52Z", "author": {"login": "nandakumar131"}, "path": "hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/loadgenerators/AgedLoadGenerator.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.loadgenerators;\n+\n+import org.apache.commons.lang3.RandomUtils;\n+import org.apache.hadoop.ozone.MiniOzoneLoadGenerator;\n+import org.apache.hadoop.ozone.utils.LoadBucket;\n+import org.apache.hadoop.ozone.utils.TestProbability;\n+import org.apache.hadoop.util.ExitUtil;\n+import org.apache.hadoop.util.Time;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.nio.ByteBuffer;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Aged Load Generator for Ozone.\n+ *\n+ * This Load Generator reads and write key to an Ozone bucket.\n+ *\n+ * The defautl writes to read ratio is 10:90.\n+ */\n+public class AgedLoadGenerator implements LoadGenerator {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(AgedLoadGenerator.class);\n+  private static String fileSuffex = \"aged\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5f9acdd455b855639d2e071eac926543ac5fe4"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA0NTk3Ng==", "bodyText": "Typo: pluggable", "url": "https://github.com/apache/ozone/pull/438#discussion_r373045976", "createdAt": "2020-01-30T16:14:13Z", "author": {"login": "nandakumar131"}, "path": "hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/loadgenerators/LoadExecutors.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.loadgenerators;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Load executors for Ozone, this class provides a pluggable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5f9acdd455b855639d2e071eac926543ac5fe4"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA1NDc5MQ==", "bodyText": "numClients actually mean the max number of buckets that will be used by RandomLoadGenerator ?\nCorrect me if I'm wrong, we got numThreads which actually means the number of client threads.", "url": "https://github.com/apache/ozone/pull/438#discussion_r373054791", "createdAt": "2020-01-30T16:28:42Z", "author": {"login": "nandakumar131"}, "path": "hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/MiniOzoneLoadGenerator.java", "diffHunk": "@@ -47,212 +42,61 @@\n       LoggerFactory.getLogger(MiniOzoneLoadGenerator.class);\n \n   private static String keyNameDelimiter = \"_\";\n-\n-  private ThreadPoolExecutor writeExecutor;\n-  private int numThreads;\n-  // number of buffer to be allocated, each is allocated with length which\n-  // is multiple of 2, each buffer is populated with random data.\n-  private int numBuffers;\n-  private List<ByteBuffer> buffers;\n-\n-  private AtomicBoolean isIOThreadRunning;\n-\n-  private final List<LoadBucket> ozoneBuckets;\n-\n-  private final AtomicInteger agedFileWrittenIndex;\n-  private final ExecutorService agedFileExecutor;\n-  private final LoadBucket agedLoadBucket;\n-  private final TestProbability agedWriteProbability;\n-\n-  private final ThreadPoolExecutor fsExecutor;\n-  private final LoadBucket fsBucket;\n-\n-  MiniOzoneLoadGenerator(List<LoadBucket> bucket,\n-                         LoadBucket agedLoadBucket, LoadBucket fsBucket,\n-                         int numThreads, int numBuffers) {\n-    this.ozoneBuckets = bucket;\n-    this.numThreads = numThreads;\n-    this.numBuffers = numBuffers;\n-    this.writeExecutor = createExecutor();\n-\n-    this.agedFileWrittenIndex = new AtomicInteger(0);\n-    this.agedFileExecutor = Executors.newSingleThreadExecutor();\n-    this.agedLoadBucket = agedLoadBucket;\n-    this.agedWriteProbability = TestProbability.valueOf(10);\n-\n-    this.fsExecutor = createExecutor();\n-    this.fsBucket = fsBucket;\n-\n-    this.isIOThreadRunning = new AtomicBoolean(false);\n-\n-    // allocate buffers and populate random data.\n-    buffers = new ArrayList<>();\n-    for (int i = 0; i < numBuffers; i++) {\n-      int size = (int) StorageUnit.KB.toBytes(1 << i);\n-      ByteBuffer buffer = ByteBuffer.allocate(size);\n-      buffer.put(RandomUtils.nextBytes(size));\n-      buffers.add(buffer);\n-    }\n-  }\n-\n-  private ThreadPoolExecutor createExecutor() {\n-    ThreadPoolExecutor executor = new ThreadPoolExecutor(numThreads, numThreads,\n-        100, TimeUnit.SECONDS, new ArrayBlockingQueue<>(1024),\n-        new ThreadPoolExecutor.CallerRunsPolicy());\n-    executor.prestartAllCoreThreads();\n-    return executor;\n-\n-  }\n-\n-  // Start IO load on an Ozone bucket.\n-  private void load(long runTimeMillis) {\n-    long threadID = Thread.currentThread().getId();\n-    LOG.info(\"Started Mixed IO Thread:{}.\", threadID);\n-    String threadName = Thread.currentThread().getName();\n-    long startTime = Time.monotonicNow();\n-\n-    while (isIOThreadRunning.get() &&\n-        (Time.monotonicNow() < startTime + runTimeMillis)) {\n-      LoadBucket bucket =\n-          ozoneBuckets.get((int) (Math.random() * ozoneBuckets.size()));\n-      try {\n-        int index = RandomUtils.nextInt();\n-        ByteBuffer buffer = getBuffer(index);\n-        String keyName = getKeyName(index, threadName);\n-        bucket.writeKey(buffer, keyName);\n-\n-        bucket.readKey(buffer, keyName);\n-\n-        bucket.deleteKey(keyName);\n-      } catch (Exception e) {\n-        LOG.error(\"LOADGEN: Exiting due to exception\", e);\n-        break;\n-      }\n-    }\n-    // This will terminate other threads too.\n-    isIOThreadRunning.set(false);\n-    LOG.info(\"Terminating IO thread:{}.\", threadID);\n-  }\n-\n-  private Optional<Integer> randomKeyToRead() {\n-    int currentIndex = agedFileWrittenIndex.get();\n-    return currentIndex != 0\n-      ? Optional.of(RandomUtils.nextInt(0, currentIndex))\n-      : Optional.empty();\n-  }\n-\n-  private void startAgedLoad(long runTimeMillis) {\n-    long threadID = Thread.currentThread().getId();\n-    LOG.info(\"AGED LOADGEN: Started Aged IO Thread:{}.\", threadID);\n-    String threadName = Thread.currentThread().getName();\n-    long startTime = Time.monotonicNow();\n-\n-    while (isIOThreadRunning.get() &&\n-        (Time.monotonicNow() < startTime + runTimeMillis)) {\n-\n-      String keyName = null;\n-      try {\n-        if (agedWriteProbability.isTrue()) {\n-          int index = agedFileWrittenIndex.getAndIncrement();\n-          ByteBuffer buffer = getBuffer(index);\n-          keyName = getKeyName(index, threadName);\n-\n-          agedLoadBucket.writeKey(buffer, keyName);\n-        } else {\n-          Optional<Integer> index = randomKeyToRead();\n-          if (index.isPresent()) {\n-            ByteBuffer buffer = getBuffer(index.get());\n-            keyName = getKeyName(index.get(), threadName);\n-            agedLoadBucket.readKey(buffer, keyName);\n-          }\n-        }\n-      } catch (Throwable t) {\n-        LOG.error(\"AGED LOADGEN: {} Exiting due to exception\", keyName, t);\n-        break;\n-      }\n-    }\n-    // This will terminate other threads too.\n-    isIOThreadRunning.set(false);\n-    LOG.info(\"Terminating IO thread:{}.\", threadID);\n-  }\n-\n-  // Start IO load on an Ozone bucket.\n-  private void startFsLoad(long runTimeMillis) {\n-    long threadID = Thread.currentThread().getId();\n-    LOG.info(\"Started Filesystem IO Thread:{}.\", threadID);\n-    String threadName = Thread.currentThread().getName();\n-    long startTime = Time.monotonicNow();\n-\n-    while (isIOThreadRunning.get() &&\n-      (Time.monotonicNow() < startTime + runTimeMillis)) {\n-      try {\n-        int index = RandomUtils.nextInt();\n-        ByteBuffer buffer = getBuffer(index);\n-        String keyName = getKeyName(index, threadName);\n-        fsBucket.writeKey(true, buffer, keyName);\n-\n-        fsBucket.readKey(true, buffer, keyName);\n-\n-        fsBucket.deleteKey(true, keyName);\n-      } catch (Exception e) {\n-        LOG.error(\"LOADGEN: Exiting due to exception\", e);\n-        break;\n-      }\n+  private final List<LoadExecutors> loadExecutors;\n+\n+  MiniOzoneLoadGenerator(OzoneVolume volume, int numClients, int numThreads,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5f9acdd455b855639d2e071eac926543ac5fe4"}, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA1NzkyMg==", "bodyText": "The numThreads option given is used by all the generators separately. So if the numThreads value is 5, we will be ideally starting\n5 - RandomLoadGenerator Threads\n5 - AgedLoadGenerator Threads\n5 - FilesystemLoadGenerator Threads\nTotal of 15 threads, everything parallel?", "url": "https://github.com/apache/ozone/pull/438#discussion_r373057922", "createdAt": "2020-01-30T16:33:41Z", "author": {"login": "nandakumar131"}, "path": "hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/MiniOzoneLoadGenerator.java", "diffHunk": "@@ -47,212 +42,61 @@\n       LoggerFactory.getLogger(MiniOzoneLoadGenerator.class);\n \n   private static String keyNameDelimiter = \"_\";\n-\n-  private ThreadPoolExecutor writeExecutor;\n-  private int numThreads;\n-  // number of buffer to be allocated, each is allocated with length which\n-  // is multiple of 2, each buffer is populated with random data.\n-  private int numBuffers;\n-  private List<ByteBuffer> buffers;\n-\n-  private AtomicBoolean isIOThreadRunning;\n-\n-  private final List<LoadBucket> ozoneBuckets;\n-\n-  private final AtomicInteger agedFileWrittenIndex;\n-  private final ExecutorService agedFileExecutor;\n-  private final LoadBucket agedLoadBucket;\n-  private final TestProbability agedWriteProbability;\n-\n-  private final ThreadPoolExecutor fsExecutor;\n-  private final LoadBucket fsBucket;\n-\n-  MiniOzoneLoadGenerator(List<LoadBucket> bucket,\n-                         LoadBucket agedLoadBucket, LoadBucket fsBucket,\n-                         int numThreads, int numBuffers) {\n-    this.ozoneBuckets = bucket;\n-    this.numThreads = numThreads;\n-    this.numBuffers = numBuffers;\n-    this.writeExecutor = createExecutor();\n-\n-    this.agedFileWrittenIndex = new AtomicInteger(0);\n-    this.agedFileExecutor = Executors.newSingleThreadExecutor();\n-    this.agedLoadBucket = agedLoadBucket;\n-    this.agedWriteProbability = TestProbability.valueOf(10);\n-\n-    this.fsExecutor = createExecutor();\n-    this.fsBucket = fsBucket;\n-\n-    this.isIOThreadRunning = new AtomicBoolean(false);\n-\n-    // allocate buffers and populate random data.\n-    buffers = new ArrayList<>();\n-    for (int i = 0; i < numBuffers; i++) {\n-      int size = (int) StorageUnit.KB.toBytes(1 << i);\n-      ByteBuffer buffer = ByteBuffer.allocate(size);\n-      buffer.put(RandomUtils.nextBytes(size));\n-      buffers.add(buffer);\n-    }\n-  }\n-\n-  private ThreadPoolExecutor createExecutor() {\n-    ThreadPoolExecutor executor = new ThreadPoolExecutor(numThreads, numThreads,\n-        100, TimeUnit.SECONDS, new ArrayBlockingQueue<>(1024),\n-        new ThreadPoolExecutor.CallerRunsPolicy());\n-    executor.prestartAllCoreThreads();\n-    return executor;\n-\n-  }\n-\n-  // Start IO load on an Ozone bucket.\n-  private void load(long runTimeMillis) {\n-    long threadID = Thread.currentThread().getId();\n-    LOG.info(\"Started Mixed IO Thread:{}.\", threadID);\n-    String threadName = Thread.currentThread().getName();\n-    long startTime = Time.monotonicNow();\n-\n-    while (isIOThreadRunning.get() &&\n-        (Time.monotonicNow() < startTime + runTimeMillis)) {\n-      LoadBucket bucket =\n-          ozoneBuckets.get((int) (Math.random() * ozoneBuckets.size()));\n-      try {\n-        int index = RandomUtils.nextInt();\n-        ByteBuffer buffer = getBuffer(index);\n-        String keyName = getKeyName(index, threadName);\n-        bucket.writeKey(buffer, keyName);\n-\n-        bucket.readKey(buffer, keyName);\n-\n-        bucket.deleteKey(keyName);\n-      } catch (Exception e) {\n-        LOG.error(\"LOADGEN: Exiting due to exception\", e);\n-        break;\n-      }\n-    }\n-    // This will terminate other threads too.\n-    isIOThreadRunning.set(false);\n-    LOG.info(\"Terminating IO thread:{}.\", threadID);\n-  }\n-\n-  private Optional<Integer> randomKeyToRead() {\n-    int currentIndex = agedFileWrittenIndex.get();\n-    return currentIndex != 0\n-      ? Optional.of(RandomUtils.nextInt(0, currentIndex))\n-      : Optional.empty();\n-  }\n-\n-  private void startAgedLoad(long runTimeMillis) {\n-    long threadID = Thread.currentThread().getId();\n-    LOG.info(\"AGED LOADGEN: Started Aged IO Thread:{}.\", threadID);\n-    String threadName = Thread.currentThread().getName();\n-    long startTime = Time.monotonicNow();\n-\n-    while (isIOThreadRunning.get() &&\n-        (Time.monotonicNow() < startTime + runTimeMillis)) {\n-\n-      String keyName = null;\n-      try {\n-        if (agedWriteProbability.isTrue()) {\n-          int index = agedFileWrittenIndex.getAndIncrement();\n-          ByteBuffer buffer = getBuffer(index);\n-          keyName = getKeyName(index, threadName);\n-\n-          agedLoadBucket.writeKey(buffer, keyName);\n-        } else {\n-          Optional<Integer> index = randomKeyToRead();\n-          if (index.isPresent()) {\n-            ByteBuffer buffer = getBuffer(index.get());\n-            keyName = getKeyName(index.get(), threadName);\n-            agedLoadBucket.readKey(buffer, keyName);\n-          }\n-        }\n-      } catch (Throwable t) {\n-        LOG.error(\"AGED LOADGEN: {} Exiting due to exception\", keyName, t);\n-        break;\n-      }\n-    }\n-    // This will terminate other threads too.\n-    isIOThreadRunning.set(false);\n-    LOG.info(\"Terminating IO thread:{}.\", threadID);\n-  }\n-\n-  // Start IO load on an Ozone bucket.\n-  private void startFsLoad(long runTimeMillis) {\n-    long threadID = Thread.currentThread().getId();\n-    LOG.info(\"Started Filesystem IO Thread:{}.\", threadID);\n-    String threadName = Thread.currentThread().getName();\n-    long startTime = Time.monotonicNow();\n-\n-    while (isIOThreadRunning.get() &&\n-      (Time.monotonicNow() < startTime + runTimeMillis)) {\n-      try {\n-        int index = RandomUtils.nextInt();\n-        ByteBuffer buffer = getBuffer(index);\n-        String keyName = getKeyName(index, threadName);\n-        fsBucket.writeKey(true, buffer, keyName);\n-\n-        fsBucket.readKey(true, buffer, keyName);\n-\n-        fsBucket.deleteKey(true, keyName);\n-      } catch (Exception e) {\n-        LOG.error(\"LOADGEN: Exiting due to exception\", e);\n-        break;\n-      }\n+  private final List<LoadExecutors> loadExecutors;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5f9acdd455b855639d2e071eac926543ac5fe4"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA1ODk5OA==", "bodyText": "Why do we need to synchronize here?", "url": "https://github.com/apache/ozone/pull/438#discussion_r373058998", "createdAt": "2020-01-30T16:35:39Z", "author": {"login": "nandakumar131"}, "path": "hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/loadgenerators/AgedLoadGenerator.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.loadgenerators;\n+\n+import org.apache.commons.lang3.RandomUtils;\n+import org.apache.hadoop.ozone.MiniOzoneLoadGenerator;\n+import org.apache.hadoop.ozone.utils.LoadBucket;\n+import org.apache.hadoop.ozone.utils.TestProbability;\n+import org.apache.hadoop.util.ExitUtil;\n+import org.apache.hadoop.util.Time;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.nio.ByteBuffer;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Aged Load Generator for Ozone.\n+ *\n+ * This Load Generator reads and write key to an Ozone bucket.\n+ *\n+ * The defautl writes to read ratio is 10:90.\n+ */\n+public class AgedLoadGenerator implements LoadGenerator {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(AgedLoadGenerator.class);\n+  private static String fileSuffex = \"aged\";\n+\n+  private final AtomicInteger agedFileWrittenIndex;\n+  private final AtomicInteger agedFileAllocationIndex;\n+  private final LoadBucket agedLoadBucket;\n+  private final TestProbability agedWriteProbability;\n+  private final DataBuffer dataBuffer;\n+\n+  public AgedLoadGenerator(DataBuffer data, LoadBucket agedLoadBucket) {\n+    this.dataBuffer = data;\n+    this.agedFileWrittenIndex = new AtomicInteger(0);\n+    this.agedFileAllocationIndex = new AtomicInteger(0);\n+    this.agedLoadBucket = agedLoadBucket;\n+    this.agedWriteProbability = TestProbability.valueOf(10);\n+  }\n+\n+  public void startLoad(long runTimeMillis) {\n+    long threadID = Thread.currentThread().getId();\n+    LOG.info(\"AGED LOADGEN: Started Aged IO Thread:{}.\", threadID);\n+    long startTime = Time.monotonicNow();\n+\n+    while (Time.monotonicNow() < startTime + runTimeMillis) {\n+\n+      String keyName = null;\n+      try {\n+        if (agedWriteProbability.isTrue()) {\n+          synchronized (agedFileAllocationIndex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5f9acdd455b855639d2e071eac926543ac5fe4"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMjA4MTEy", "url": "https://github.com/apache/ozone/pull/438#pullrequestreview-360208112", "createdAt": "2020-02-18T10:02:57Z", "commit": {"oid": "5b5f9acdd455b855639d2e071eac926543ac5fe4"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a91875e43ab7a6c5fd4821513f012394462d8b7f", "author": {"user": {"login": "mukul1987", "name": "Mukul Kumar Singh"}}, "url": "https://github.com/apache/ozone/commit/a91875e43ab7a6c5fd4821513f012394462d8b7f", "committedDate": "2020-03-15T18:02:37Z", "message": "fix review comments"}, "afterCommit": {"oid": "51489c5aa4b6ed5113c8be708549a2aa78534316", "author": {"user": {"login": "mukul1987", "name": "Mukul Kumar Singh"}}, "url": "https://github.com/apache/ozone/commit/51489c5aa4b6ed5113c8be708549a2aa78534316", "committedDate": "2020-03-15T18:05:51Z", "message": "fix review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MDIzMjU3", "url": "https://github.com/apache/ozone/pull/438#pullrequestreview-377023257", "createdAt": "2020-03-18T16:16:25Z", "commit": {"oid": "51489c5aa4b6ed5113c8be708549a2aa78534316"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjoxNjoyNlrOF4Mnvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjoxNjoyNlrOF4Mnvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ3MTM1OQ==", "bodyText": "NIT: line 65-84 can be refactored to dedup the same create loadgenerator and added to load executors.", "url": "https://github.com/apache/ozone/pull/438#discussion_r394471359", "createdAt": "2020-03-18T16:16:26Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/MiniOzoneLoadGenerator.java", "diffHunk": "@@ -47,212 +42,61 @@\n       LoggerFactory.getLogger(MiniOzoneLoadGenerator.class);\n \n   private static String keyNameDelimiter = \"_\";\n-\n-  private ThreadPoolExecutor writeExecutor;\n-  private int numThreads;\n-  // number of buffer to be allocated, each is allocated with length which\n-  // is multiple of 2, each buffer is populated with random data.\n-  private int numBuffers;\n-  private List<ByteBuffer> buffers;\n-\n-  private AtomicBoolean isIOThreadRunning;\n-\n-  private final List<LoadBucket> ozoneBuckets;\n-\n-  private final AtomicInteger agedFileWrittenIndex;\n-  private final ExecutorService agedFileExecutor;\n-  private final LoadBucket agedLoadBucket;\n-  private final TestProbability agedWriteProbability;\n-\n-  private final ThreadPoolExecutor fsExecutor;\n-  private final LoadBucket fsBucket;\n-\n-  MiniOzoneLoadGenerator(List<LoadBucket> bucket,\n-                         LoadBucket agedLoadBucket, LoadBucket fsBucket,\n-                         int numThreads, int numBuffers) {\n-    this.ozoneBuckets = bucket;\n-    this.numThreads = numThreads;\n-    this.numBuffers = numBuffers;\n-    this.writeExecutor = createExecutor();\n-\n-    this.agedFileWrittenIndex = new AtomicInteger(0);\n-    this.agedFileExecutor = Executors.newSingleThreadExecutor();\n-    this.agedLoadBucket = agedLoadBucket;\n-    this.agedWriteProbability = TestProbability.valueOf(10);\n-\n-    this.fsExecutor = createExecutor();\n-    this.fsBucket = fsBucket;\n-\n-    this.isIOThreadRunning = new AtomicBoolean(false);\n-\n-    // allocate buffers and populate random data.\n-    buffers = new ArrayList<>();\n-    for (int i = 0; i < numBuffers; i++) {\n-      int size = (int) StorageUnit.KB.toBytes(1 << i);\n-      ByteBuffer buffer = ByteBuffer.allocate(size);\n-      buffer.put(RandomUtils.nextBytes(size));\n-      buffers.add(buffer);\n-    }\n-  }\n-\n-  private ThreadPoolExecutor createExecutor() {\n-    ThreadPoolExecutor executor = new ThreadPoolExecutor(numThreads, numThreads,\n-        100, TimeUnit.SECONDS, new ArrayBlockingQueue<>(1024),\n-        new ThreadPoolExecutor.CallerRunsPolicy());\n-    executor.prestartAllCoreThreads();\n-    return executor;\n-\n-  }\n-\n-  // Start IO load on an Ozone bucket.\n-  private void load(long runTimeMillis) {\n-    long threadID = Thread.currentThread().getId();\n-    LOG.info(\"Started Mixed IO Thread:{}.\", threadID);\n-    String threadName = Thread.currentThread().getName();\n-    long startTime = Time.monotonicNow();\n-\n-    while (isIOThreadRunning.get() &&\n-        (Time.monotonicNow() < startTime + runTimeMillis)) {\n-      LoadBucket bucket =\n-          ozoneBuckets.get((int) (Math.random() * ozoneBuckets.size()));\n-      try {\n-        int index = RandomUtils.nextInt();\n-        ByteBuffer buffer = getBuffer(index);\n-        String keyName = getKeyName(index, threadName);\n-        bucket.writeKey(buffer, keyName);\n-\n-        bucket.readKey(buffer, keyName);\n-\n-        bucket.deleteKey(keyName);\n-      } catch (Exception e) {\n-        LOG.error(\"LOADGEN: Exiting due to exception\", e);\n-        break;\n-      }\n-    }\n-    // This will terminate other threads too.\n-    isIOThreadRunning.set(false);\n-    LOG.info(\"Terminating IO thread:{}.\", threadID);\n-  }\n-\n-  private Optional<Integer> randomKeyToRead() {\n-    int currentIndex = agedFileWrittenIndex.get();\n-    return currentIndex != 0\n-      ? Optional.of(RandomUtils.nextInt(0, currentIndex))\n-      : Optional.empty();\n-  }\n-\n-  private void startAgedLoad(long runTimeMillis) {\n-    long threadID = Thread.currentThread().getId();\n-    LOG.info(\"AGED LOADGEN: Started Aged IO Thread:{}.\", threadID);\n-    String threadName = Thread.currentThread().getName();\n-    long startTime = Time.monotonicNow();\n-\n-    while (isIOThreadRunning.get() &&\n-        (Time.monotonicNow() < startTime + runTimeMillis)) {\n-\n-      String keyName = null;\n-      try {\n-        if (agedWriteProbability.isTrue()) {\n-          int index = agedFileWrittenIndex.getAndIncrement();\n-          ByteBuffer buffer = getBuffer(index);\n-          keyName = getKeyName(index, threadName);\n-\n-          agedLoadBucket.writeKey(buffer, keyName);\n-        } else {\n-          Optional<Integer> index = randomKeyToRead();\n-          if (index.isPresent()) {\n-            ByteBuffer buffer = getBuffer(index.get());\n-            keyName = getKeyName(index.get(), threadName);\n-            agedLoadBucket.readKey(buffer, keyName);\n-          }\n-        }\n-      } catch (Throwable t) {\n-        LOG.error(\"AGED LOADGEN: {} Exiting due to exception\", keyName, t);\n-        break;\n-      }\n-    }\n-    // This will terminate other threads too.\n-    isIOThreadRunning.set(false);\n-    LOG.info(\"Terminating IO thread:{}.\", threadID);\n-  }\n-\n-  // Start IO load on an Ozone bucket.\n-  private void startFsLoad(long runTimeMillis) {\n-    long threadID = Thread.currentThread().getId();\n-    LOG.info(\"Started Filesystem IO Thread:{}.\", threadID);\n-    String threadName = Thread.currentThread().getName();\n-    long startTime = Time.monotonicNow();\n-\n-    while (isIOThreadRunning.get() &&\n-      (Time.monotonicNow() < startTime + runTimeMillis)) {\n-      try {\n-        int index = RandomUtils.nextInt();\n-        ByteBuffer buffer = getBuffer(index);\n-        String keyName = getKeyName(index, threadName);\n-        fsBucket.writeKey(true, buffer, keyName);\n-\n-        fsBucket.readKey(true, buffer, keyName);\n-\n-        fsBucket.deleteKey(true, keyName);\n-      } catch (Exception e) {\n-        LOG.error(\"LOADGEN: Exiting due to exception\", e);\n-        break;\n-      }\n+  private final List<LoadExecutors> loadExecutors;\n+\n+  MiniOzoneLoadGenerator(OzoneVolume volume, int numClients, int numThreads,\n+                         int numBuffers, OzoneConfiguration conf)\n+      throws Exception {\n+    DataBuffer buffer = new DataBuffer(numBuffers);\n+    loadExecutors = new ArrayList<>();\n+\n+    // Random Load\n+    String mixBucketName = RandomStringUtils.randomAlphabetic(10).toLowerCase();\n+    volume.createBucket(mixBucketName);\n+    List<LoadBucket> ozoneBuckets = new ArrayList<>(numClients);\n+    for (int i = 0; i < numClients; i++) {\n+      ozoneBuckets.add(new LoadBucket(volume.getBucket(mixBucketName),\n+          conf));\n     }\n-    // This will terminate other threads too.\n-    isIOThreadRunning.set(false);\n-    LOG.info(\"Terminating IO thread:{}.\", threadID);\n+    RandomLoadGenerator loadGenerator =\n+        new RandomLoadGenerator(buffer, ozoneBuckets);\n+    loadExecutors.add(new LoadExecutors(numThreads, loadGenerator));\n+\n+    // Aged Load", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51489c5aa4b6ed5113c8be708549a2aa78534316"}, "originalPosition": 213}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MDM4NTE3", "url": "https://github.com/apache/ozone/pull/438#pullrequestreview-377038517", "createdAt": "2020-03-18T16:33:52Z", "commit": {"oid": "51489c5aa4b6ed5113c8be708549a2aa78534316"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjozMzo1M1rOF4NXNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjozMzo1M1rOF4NXNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ4MzUxMQ==", "bodyText": "Can we generate only 1 random byte array of size 1<<(numBuffers+10) and use List of ByteBuffer to wrap 0~1<<i part of the same array with wrap(byte[]\u00a0array, int\u00a0offset, int\u00a0length)?", "url": "https://github.com/apache/ozone/pull/438#discussion_r394483511", "createdAt": "2020-03-18T16:33:53Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/loadgenerators/DataBuffer.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.loadgenerators;\n+\n+import org.apache.commons.lang3.RandomUtils;\n+import org.apache.hadoop.conf.StorageUnit;\n+\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * List of buffers used by the load generators.\n+ */\n+public class DataBuffer {\n+  private List<ByteBuffer> buffers;\n+  // number of buffer to be allocated, each is allocated with length which\n+  // is multiple of 2, each buffer is populated with random data.\n+  private int numBuffers;\n+\n+  public DataBuffer(int numBuffers) {\n+    // allocate buffers and populate random data.\n+    this.numBuffers = numBuffers;\n+    this.buffers = new ArrayList<>();\n+    for (int i = 0; i < numBuffers; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51489c5aa4b6ed5113c8be708549a2aa78534316"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3NTc0MDYx", "url": "https://github.com/apache/ozone/pull/438#pullrequestreview-377574061", "createdAt": "2020-03-19T10:02:22Z", "commit": {"oid": "51489c5aa4b6ed5113c8be708549a2aa78534316"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMDowMjoyM1rOF4ngWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMDo1Nzo1OVrOF4pZrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkxMTgzMg==", "bodyText": "Would it make sense to use ThreadLocalRandom (also in other generators) to avoid contention among load generator threads?", "url": "https://github.com/apache/ozone/pull/438#discussion_r394911832", "createdAt": "2020-03-19T10:02:23Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/loadgenerators/FilesystemLoadGenerator.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.loadgenerators;\n+\n+import org.apache.commons.lang3.RandomUtils;\n+import org.apache.hadoop.ozone.MiniOzoneLoadGenerator;\n+import org.apache.hadoop.ozone.utils.LoadBucket;\n+import org.apache.hadoop.util.ExitUtil;\n+import org.apache.hadoop.util.Time;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.nio.ByteBuffer;\n+\n+/**\n+ * Filesystem load generator for Ozone.\n+ *\n+ * This load generator read, writes and deletes data using the filesystem\n+ * apis.\n+ */\n+public class FilesystemLoadGenerator implements LoadGenerator {\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(FilesystemLoadGenerator.class);\n+\n+\n+  private final LoadBucket fsBucket;\n+  private final DataBuffer dataBuffer;\n+\n+  public FilesystemLoadGenerator(DataBuffer dataBuffer, LoadBucket fsBucket) {\n+    this.dataBuffer = dataBuffer;\n+    this.fsBucket = fsBucket;\n+  }\n+\n+  // Start IO load on an Ozone bucket.\n+  public void startLoad(long runTimeMillis) {\n+    long threadID = Thread.currentThread().getId();\n+    LOG.info(\"Started Filesystem IO Thread:{}.\", threadID);\n+    String threadName = Thread.currentThread().getName();\n+    long startTime = Time.monotonicNow();\n+\n+    while (Time.monotonicNow() < startTime + runTimeMillis) {\n+      try {\n+        int index = RandomUtils.nextInt();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51489c5aa4b6ed5113c8be708549a2aa78534316"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkyOTkxMA==", "bodyText": "Nit: can be moved to LoadGenerator.", "url": "https://github.com/apache/ozone/pull/438#discussion_r394929910", "createdAt": "2020-03-19T10:34:07Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/MiniOzoneLoadGenerator.java", "diffHunk": "@@ -47,212 +42,61 @@\n       LoggerFactory.getLogger(MiniOzoneLoadGenerator.class);\n \n   private static String keyNameDelimiter = \"_\";\n-\n-  private ThreadPoolExecutor writeExecutor;\n-  private int numThreads;\n-  // number of buffer to be allocated, each is allocated with length which\n-  // is multiple of 2, each buffer is populated with random data.\n-  private int numBuffers;\n-  private List<ByteBuffer> buffers;\n-\n-  private AtomicBoolean isIOThreadRunning;\n-\n-  private final List<LoadBucket> ozoneBuckets;\n-\n-  private final AtomicInteger agedFileWrittenIndex;\n-  private final ExecutorService agedFileExecutor;\n-  private final LoadBucket agedLoadBucket;\n-  private final TestProbability agedWriteProbability;\n-\n-  private final ThreadPoolExecutor fsExecutor;\n-  private final LoadBucket fsBucket;\n-\n-  MiniOzoneLoadGenerator(List<LoadBucket> bucket,\n-                         LoadBucket agedLoadBucket, LoadBucket fsBucket,\n-                         int numThreads, int numBuffers) {\n-    this.ozoneBuckets = bucket;\n-    this.numThreads = numThreads;\n-    this.numBuffers = numBuffers;\n-    this.writeExecutor = createExecutor();\n-\n-    this.agedFileWrittenIndex = new AtomicInteger(0);\n-    this.agedFileExecutor = Executors.newSingleThreadExecutor();\n-    this.agedLoadBucket = agedLoadBucket;\n-    this.agedWriteProbability = TestProbability.valueOf(10);\n-\n-    this.fsExecutor = createExecutor();\n-    this.fsBucket = fsBucket;\n-\n-    this.isIOThreadRunning = new AtomicBoolean(false);\n-\n-    // allocate buffers and populate random data.\n-    buffers = new ArrayList<>();\n-    for (int i = 0; i < numBuffers; i++) {\n-      int size = (int) StorageUnit.KB.toBytes(1 << i);\n-      ByteBuffer buffer = ByteBuffer.allocate(size);\n-      buffer.put(RandomUtils.nextBytes(size));\n-      buffers.add(buffer);\n-    }\n-  }\n-\n-  private ThreadPoolExecutor createExecutor() {\n-    ThreadPoolExecutor executor = new ThreadPoolExecutor(numThreads, numThreads,\n-        100, TimeUnit.SECONDS, new ArrayBlockingQueue<>(1024),\n-        new ThreadPoolExecutor.CallerRunsPolicy());\n-    executor.prestartAllCoreThreads();\n-    return executor;\n-\n-  }\n-\n-  // Start IO load on an Ozone bucket.\n-  private void load(long runTimeMillis) {\n-    long threadID = Thread.currentThread().getId();\n-    LOG.info(\"Started Mixed IO Thread:{}.\", threadID);\n-    String threadName = Thread.currentThread().getName();\n-    long startTime = Time.monotonicNow();\n-\n-    while (isIOThreadRunning.get() &&\n-        (Time.monotonicNow() < startTime + runTimeMillis)) {\n-      LoadBucket bucket =\n-          ozoneBuckets.get((int) (Math.random() * ozoneBuckets.size()));\n-      try {\n-        int index = RandomUtils.nextInt();\n-        ByteBuffer buffer = getBuffer(index);\n-        String keyName = getKeyName(index, threadName);\n-        bucket.writeKey(buffer, keyName);\n-\n-        bucket.readKey(buffer, keyName);\n-\n-        bucket.deleteKey(keyName);\n-      } catch (Exception e) {\n-        LOG.error(\"LOADGEN: Exiting due to exception\", e);\n-        break;\n-      }\n-    }\n-    // This will terminate other threads too.\n-    isIOThreadRunning.set(false);\n-    LOG.info(\"Terminating IO thread:{}.\", threadID);\n-  }\n-\n-  private Optional<Integer> randomKeyToRead() {\n-    int currentIndex = agedFileWrittenIndex.get();\n-    return currentIndex != 0\n-      ? Optional.of(RandomUtils.nextInt(0, currentIndex))\n-      : Optional.empty();\n-  }\n-\n-  private void startAgedLoad(long runTimeMillis) {\n-    long threadID = Thread.currentThread().getId();\n-    LOG.info(\"AGED LOADGEN: Started Aged IO Thread:{}.\", threadID);\n-    String threadName = Thread.currentThread().getName();\n-    long startTime = Time.monotonicNow();\n-\n-    while (isIOThreadRunning.get() &&\n-        (Time.monotonicNow() < startTime + runTimeMillis)) {\n-\n-      String keyName = null;\n-      try {\n-        if (agedWriteProbability.isTrue()) {\n-          int index = agedFileWrittenIndex.getAndIncrement();\n-          ByteBuffer buffer = getBuffer(index);\n-          keyName = getKeyName(index, threadName);\n-\n-          agedLoadBucket.writeKey(buffer, keyName);\n-        } else {\n-          Optional<Integer> index = randomKeyToRead();\n-          if (index.isPresent()) {\n-            ByteBuffer buffer = getBuffer(index.get());\n-            keyName = getKeyName(index.get(), threadName);\n-            agedLoadBucket.readKey(buffer, keyName);\n-          }\n-        }\n-      } catch (Throwable t) {\n-        LOG.error(\"AGED LOADGEN: {} Exiting due to exception\", keyName, t);\n-        break;\n-      }\n-    }\n-    // This will terminate other threads too.\n-    isIOThreadRunning.set(false);\n-    LOG.info(\"Terminating IO thread:{}.\", threadID);\n-  }\n-\n-  // Start IO load on an Ozone bucket.\n-  private void startFsLoad(long runTimeMillis) {\n-    long threadID = Thread.currentThread().getId();\n-    LOG.info(\"Started Filesystem IO Thread:{}.\", threadID);\n-    String threadName = Thread.currentThread().getName();\n-    long startTime = Time.monotonicNow();\n-\n-    while (isIOThreadRunning.get() &&\n-      (Time.monotonicNow() < startTime + runTimeMillis)) {\n-      try {\n-        int index = RandomUtils.nextInt();\n-        ByteBuffer buffer = getBuffer(index);\n-        String keyName = getKeyName(index, threadName);\n-        fsBucket.writeKey(true, buffer, keyName);\n-\n-        fsBucket.readKey(true, buffer, keyName);\n-\n-        fsBucket.deleteKey(true, keyName);\n-      } catch (Exception e) {\n-        LOG.error(\"LOADGEN: Exiting due to exception\", e);\n-        break;\n-      }\n+  private final List<LoadExecutors> loadExecutors;\n+\n+  MiniOzoneLoadGenerator(OzoneVolume volume, int numClients, int numThreads,\n+                         int numBuffers, OzoneConfiguration conf)\n+      throws Exception {\n+    DataBuffer buffer = new DataBuffer(numBuffers);\n+    loadExecutors = new ArrayList<>();\n+\n+    // Random Load\n+    String mixBucketName = RandomStringUtils.randomAlphabetic(10).toLowerCase();\n+    volume.createBucket(mixBucketName);\n+    List<LoadBucket> ozoneBuckets = new ArrayList<>(numClients);\n+    for (int i = 0; i < numClients; i++) {\n+      ozoneBuckets.add(new LoadBucket(volume.getBucket(mixBucketName),\n+          conf));\n     }\n-    // This will terminate other threads too.\n-    isIOThreadRunning.set(false);\n-    LOG.info(\"Terminating IO thread:{}.\", threadID);\n+    RandomLoadGenerator loadGenerator =\n+        new RandomLoadGenerator(buffer, ozoneBuckets);\n+    loadExecutors.add(new LoadExecutors(numThreads, loadGenerator));\n+\n+    // Aged Load\n+    String agedBucketName =\n+        RandomStringUtils.randomAlphabetic(10).toLowerCase();\n+    volume.createBucket(agedBucketName);\n+    LoadBucket agedLoadBucket =\n+        new LoadBucket(volume.getBucket(agedBucketName), conf);\n+    AgedLoadGenerator agedLoadGenerator =\n+        new AgedLoadGenerator(buffer, agedLoadBucket);\n+    loadExecutors.add(new LoadExecutors(numThreads, agedLoadGenerator));\n+\n+    //Filesystem Load\n+    String fsBucketName =\n+        RandomStringUtils.randomAlphabetic(10).toLowerCase();\n+\n+    volume.createBucket(fsBucketName);\n+    LoadBucket fsBucket =\n+        new LoadBucket(volume.getBucket(fsBucketName), conf);\n+    FilesystemLoadGenerator filesystemLoadGenerator =\n+        new FilesystemLoadGenerator(buffer, fsBucket);\n+    loadExecutors.add(new LoadExecutors(numThreads, filesystemLoadGenerator));\n   }\n \n   void startIO(long time, TimeUnit timeUnit) {\n-    List<CompletableFuture<Void>> writeFutures = new ArrayList<>();\n-    LOG.info(\"Starting MiniOzoneLoadGenerator for time {}:{} with {} buffers \" +\n-            \"and {} threads\", time, timeUnit, numBuffers, numThreads);\n-    if (isIOThreadRunning.compareAndSet(false, true)) {\n-      // Start the IO thread\n-      for (int i = 0; i < numThreads; i++) {\n-        writeFutures.add(\n-            CompletableFuture.runAsync(() -> load(timeUnit.toMillis(time)),\n-                writeExecutor));\n-      }\n-\n-      for (int i = 0; i < numThreads; i++) {\n-        writeFutures.add(\n-            CompletableFuture.runAsync(() -> startAgedLoad(\n-                timeUnit.toMillis(time)), agedFileExecutor));\n-      }\n-\n-      for (int i = 0; i < numThreads; i++) {\n-        writeFutures.add(\n-            CompletableFuture.runAsync(() -> startFsLoad(\n-              timeUnit.toMillis(time)), fsExecutor));\n-      }\n-\n-      // Wait for IO to complete\n-      for (CompletableFuture<Void> f : writeFutures) {\n-        try {\n-          f.get();\n-        } catch (Throwable t) {\n-          LOG.error(\"startIO failed with exception\", t);\n-        }\n-      }\n-    }\n-  }\n-\n-  public void shutdownLoadGenerator() {\n-    try {\n-      writeExecutor.shutdown();\n-      writeExecutor.awaitTermination(1, TimeUnit.DAYS);\n-    } catch (Exception e) {\n-      LOG.error(\"error while closing \", e);\n-    }\n+    LOG.info(\"Starting MiniOzoneLoadGenerator for time {}:{}\", time, timeUnit);\n+    long runTime = timeUnit.toMillis(time);\n+    // start and wait for executors to finish\n+    loadExecutors.forEach(le -> le.startLoad(runTime));\n+    loadExecutors.forEach(LoadExecutors::waitForCompletion);\n   }\n \n-  private ByteBuffer getBuffer(int keyIndex) {\n-    return buffers.get(keyIndex % numBuffers);\n+  void shutdownLoadGenerator() {\n+    loadExecutors.forEach(LoadExecutors::shutdown);\n   }\n \n-  private String getKeyName(int keyIndex, String threadName) {\n-    return threadName + keyNameDelimiter + keyIndex;\n+  public static String getKeyName(int keyIndex, String prefix) {\n+    return prefix + keyNameDelimiter + keyIndex;\n   }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51489c5aa4b6ed5113c8be708549a2aa78534316"}, "originalPosition": 294}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkzMzc0Mw==", "bodyText": "System#nanoTime says timestamps should be compared in the form: t1 - t0 < ..., so I think this should be:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                while (Time.monotonicNow() < startTime + runTimeMillis) {\n          \n          \n            \n                while (Time.monotonicNow() - startTime < runTimeMillis) {", "url": "https://github.com/apache/ozone/pull/438#discussion_r394933743", "createdAt": "2020-03-19T10:41:20Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/loadgenerators/AgedLoadGenerator.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.loadgenerators;\n+\n+import org.apache.commons.lang3.RandomUtils;\n+import org.apache.hadoop.ozone.MiniOzoneLoadGenerator;\n+import org.apache.hadoop.ozone.utils.LoadBucket;\n+import org.apache.hadoop.ozone.utils.TestProbability;\n+import org.apache.hadoop.util.ExitUtil;\n+import org.apache.hadoop.util.Time;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.nio.ByteBuffer;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Aged Load Generator for Ozone.\n+ *\n+ * This Load Generator reads and write key to an Ozone bucket.\n+ *\n+ * The default writes to read ratio is 10:90.\n+ */\n+public class AgedLoadGenerator implements LoadGenerator {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(AgedLoadGenerator.class);\n+  private static String agedSuffix = \"aged\";\n+\n+  private final AtomicInteger agedFileWrittenIndex;\n+  private final AtomicInteger agedFileAllocationIndex;\n+  private final LoadBucket agedLoadBucket;\n+  private final TestProbability agedWriteProbability;\n+  private final DataBuffer dataBuffer;\n+\n+  public AgedLoadGenerator(DataBuffer data, LoadBucket agedLoadBucket) {\n+    this.dataBuffer = data;\n+    this.agedFileWrittenIndex = new AtomicInteger(0);\n+    this.agedFileAllocationIndex = new AtomicInteger(0);\n+    this.agedLoadBucket = agedLoadBucket;\n+    this.agedWriteProbability = TestProbability.valueOf(10);\n+  }\n+\n+  public void startLoad(long runTimeMillis) {\n+    long threadID = Thread.currentThread().getId();\n+    LOG.info(\"AGED LOADGEN: Started Aged IO Thread:{}.\", threadID);\n+    long startTime = Time.monotonicNow();\n+\n+    while (Time.monotonicNow() < startTime + runTimeMillis) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51489c5aa4b6ed5113c8be708549a2aa78534316"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkzNzYyMg==", "bodyText": "Can you please extract common structure from all 3 generators?  Only <perform operation> is changing.\npublic void startLoad(long runTimeMillis) {\n  ...\n  while (...) {\n    try {\n      <perform operation>\n    } catch (...) {\n      ..\n    }\n  }\n}", "url": "https://github.com/apache/ozone/pull/438#discussion_r394937622", "createdAt": "2020-03-19T10:48:19Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/loadgenerators/RandomLoadGenerator.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.loadgenerators;\n+\n+import org.apache.commons.lang3.RandomUtils;\n+import org.apache.hadoop.ozone.MiniOzoneLoadGenerator;\n+import org.apache.hadoop.ozone.utils.LoadBucket;\n+import org.apache.hadoop.util.ExitUtil;\n+import org.apache.hadoop.util.Time;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.nio.ByteBuffer;\n+import java.util.List;\n+\n+/**\n+ * Random load generator which writes, read and deletes keys from\n+ * the bucket.\n+ */\n+public class RandomLoadGenerator implements LoadGenerator {\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(RandomLoadGenerator.class);\n+\n+  private final List<LoadBucket> ozoneBuckets;\n+  private final DataBuffer dataBuffer;\n+\n+  public RandomLoadGenerator(DataBuffer dataBuffer, List<LoadBucket> buckets) {\n+    this.ozoneBuckets = buckets;\n+    this.dataBuffer = dataBuffer;\n+  }\n+\n+  // Start IO load on an Ozone bucket.\n+  public void startLoad(long runTimeMillis) {\n+    long threadID = Thread.currentThread().getId();\n+    LOG.info(\"Started Mixed IO Thread:{}.\", threadID);\n+    String threadName = Thread.currentThread().getName();\n+    long startTime = Time.monotonicNow();\n+\n+    while (Time.monotonicNow() < startTime + runTimeMillis) {\n+      LoadBucket bucket =\n+          ozoneBuckets.get((int) (Math.random() * ozoneBuckets.size()));\n+      try {\n+        int index = RandomUtils.nextInt();\n+        ByteBuffer buffer = dataBuffer.getBuffer(index);\n+        String keyName = MiniOzoneLoadGenerator.getKeyName(index, threadName);\n+        bucket.writeKey(buffer, keyName);\n+\n+        bucket.readKey(buffer, keyName);\n+\n+        bucket.deleteKey(keyName);\n+      } catch (Throwable t) {\n+        LOG.error(\"LOADGEN: Exiting due to exception\", t);\n+        ExitUtil.terminate(new ExitUtil.ExitException(3, t));\n+      }\n+    }\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51489c5aa4b6ed5113c8be708549a2aa78534316"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk0Mjg5Mg==", "bodyText": "Since the number of threads (both core and max) and number of tasks is the same, do we need to specify keepAliveTime, queue limit and policy?  I don't think these parameters will be applied in any case.  I think using Executors.newFixedThreadPool(numThreads) would be simpler.  Sure, ExecutorService provides no way to prestart threads, but this is not a short-running performance test, so the overhead of starting threads as tasks are added does not seem to matter.", "url": "https://github.com/apache/ozone/pull/438#discussion_r394942892", "createdAt": "2020-03-19T10:57:59Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/loadgenerators/LoadExecutors.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.loadgenerators;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Load executors for Ozone, this class provides a plugable\n+ * executor for different load generators.\n+ */\n+public class LoadExecutors {\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(LoadExecutors.class);\n+\n+  private final LoadGenerator generator;\n+  private final int numThreads;\n+  private final ThreadPoolExecutor executor;\n+  private final List<CompletableFuture<Void>> futures = new ArrayList<>();\n+\n+  public LoadExecutors(int numThreads, LoadGenerator generator) {\n+    this.numThreads = numThreads;\n+    this.generator = generator;\n+    this.executor = new ThreadPoolExecutor(numThreads, numThreads,\n+        100, TimeUnit.SECONDS, new ArrayBlockingQueue<>(1024),\n+        new ThreadPoolExecutor.CallerRunsPolicy());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51489c5aa4b6ed5113c8be708549a2aa78534316"}, "originalPosition": 49}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "51489c5aa4b6ed5113c8be708549a2aa78534316", "author": {"user": {"login": "mukul1987", "name": "Mukul Kumar Singh"}}, "url": "https://github.com/apache/ozone/commit/51489c5aa4b6ed5113c8be708549a2aa78534316", "committedDate": "2020-03-15T18:05:51Z", "message": "fix review comments"}, "afterCommit": {"oid": "235ff220c6738a8f46ee109cc296dd02b507b1d7", "author": {"user": {"login": "mukul1987", "name": "Mukul Kumar Singh"}}, "url": "https://github.com/apache/ozone/commit/235ff220c6738a8f46ee109cc296dd02b507b1d7", "committedDate": "2020-03-19T17:55:50Z", "message": "address review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4bf7b16dee85c370983fb10f8a9b7dc1ddd8c0a2", "author": {"user": {"login": "mukul1987", "name": "Mukul Kumar Singh"}}, "url": "https://github.com/apache/ozone/commit/4bf7b16dee85c370983fb10f8a9b7dc1ddd8c0a2", "committedDate": "2020-03-23T13:49:13Z", "message": "address review comments"}, "afterCommit": {"oid": "03206f91753b633a77f8c4b35091881fb4dc50c4", "author": {"user": {"login": "mukul1987", "name": "Mukul Kumar Singh"}}, "url": "https://github.com/apache/ozone/commit/03206f91753b633a77f8c4b35091881fb4dc50c4", "committedDate": "2020-03-23T14:16:00Z", "message": "fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bdb4a32e8a584f74b82792df3bc3cabdcd589c07", "author": {"user": {"login": "mukul1987", "name": "Mukul Kumar Singh"}}, "url": "https://github.com/apache/ozone/commit/bdb4a32e8a584f74b82792df3bc3cabdcd589c07", "committedDate": "2020-03-23T14:30:27Z", "message": "HDDS-2878. Refactor MiniOzoneLoadGenerator to add more load generators to chaos testing."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17b6494999ee5e76a5e3eb36a373a28be935176f", "author": {"user": {"login": "mukul1987", "name": "Mukul Kumar Singh"}}, "url": "https://github.com/apache/ozone/commit/17b6494999ee5e76a5e3eb36a373a28be935176f", "committedDate": "2020-03-23T14:30:27Z", "message": "fix checkstyle issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1426459ce45a4c3c0189f2cc6b6f44a184260b8", "author": {"user": {"login": "mukul1987", "name": "Mukul Kumar Singh"}}, "url": "https://github.com/apache/ozone/commit/a1426459ce45a4c3c0189f2cc6b6f44a184260b8", "committedDate": "2020-03-23T14:30:28Z", "message": "fix review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa0535afef472017d9940a71cc98724b18c6bf0f", "author": {"user": {"login": "mukul1987", "name": "Mukul Kumar Singh"}}, "url": "https://github.com/apache/ozone/commit/fa0535afef472017d9940a71cc98724b18c6bf0f", "committedDate": "2020-03-23T14:30:28Z", "message": "address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ac706adb358fc4b415e6d195dfe60f15952f87e", "author": {"user": {"login": "mukul1987", "name": "Mukul Kumar Singh"}}, "url": "https://github.com/apache/ozone/commit/3ac706adb358fc4b415e6d195dfe60f15952f87e", "committedDate": "2020-03-23T14:30:28Z", "message": "address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c9a42de0a1698a5e9ecf257ab13636bce164d77", "author": {"user": {"login": "mukul1987", "name": "Mukul Kumar Singh"}}, "url": "https://github.com/apache/ozone/commit/8c9a42de0a1698a5e9ecf257ab13636bce164d77", "committedDate": "2020-03-23T14:30:28Z", "message": "fix checkstyle"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "03206f91753b633a77f8c4b35091881fb4dc50c4", "author": {"user": {"login": "mukul1987", "name": "Mukul Kumar Singh"}}, "url": "https://github.com/apache/ozone/commit/03206f91753b633a77f8c4b35091881fb4dc50c4", "committedDate": "2020-03-23T14:16:00Z", "message": "fix checkstyle"}, "afterCommit": {"oid": "8c9a42de0a1698a5e9ecf257ab13636bce164d77", "author": {"user": {"login": "mukul1987", "name": "Mukul Kumar Singh"}}, "url": "https://github.com/apache/ozone/commit/8c9a42de0a1698a5e9ecf257ab13636bce164d77", "committedDate": "2020-03-23T14:30:28Z", "message": "fix checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NTIwMjgw", "url": "https://github.com/apache/ozone/pull/438#pullrequestreview-379520280", "createdAt": "2020-03-23T15:07:14Z", "commit": {"oid": "8c9a42de0a1698a5e9ecf257ab13636bce164d77"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3931, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}