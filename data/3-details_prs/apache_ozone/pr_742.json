{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2NTU5MzM3", "number": 742, "title": "HDDS-3217. Datanode startup is slow due to iterating container DB 2-3 times.", "bodyText": "What changes were proposed in this pull request?\nReduce the time spent during DN restart. Commit the required info which is needed during DN restart commit it to container DB.\nWhat is the link to the Apache JIRA\nhttps://issues.apache.org/jira/browse/HDDS-3217\nHow was this patch tested?\nUpdated Block Deletion test, will check if any more tests can be added.", "createdAt": "2020-03-31T19:46:33Z", "url": "https://github.com/apache/ozone/pull/742", "merged": true, "mergeCommit": {"oid": "a2ab8d6e35f60af9762a191265942071755329be"}, "closed": true, "closedAt": "2020-05-07T23:37:00Z", "author": {"login": "bharatviswa504"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcVLypXABqjMyMDgxNTcxODY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcfFC2DABqjMzMTQ4ODgyOTE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "049d8a31fb62021d6b882773917fb67bccdcc62d", "author": {"user": {"login": "adoroszlai", "name": "Doroszlai, Attila"}}, "url": "https://github.com/apache/ozone/commit/049d8a31fb62021d6b882773917fb67bccdcc62d", "committedDate": "2020-04-06T07:16:06Z", "message": "trigger new CI check"}, "afterCommit": {"oid": "6848e5f3220150fc0a1c84b76f533ba3470cfbc7", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/6848e5f3220150fc0a1c84b76f533ba3470cfbc7", "committedDate": "2020-04-07T04:42:16Z", "message": "remove unused import."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMDcwMTIx", "url": "https://github.com/apache/ozone/pull/742#pullrequestreview-392070121", "createdAt": "2020-04-13T10:24:32Z", "commit": {"oid": "6848e5f3220150fc0a1c84b76f533ba3470cfbc7"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6848e5f3220150fc0a1c84b76f533ba3470cfbc7", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/6848e5f3220150fc0a1c84b76f533ba3470cfbc7", "committedDate": "2020-04-07T04:42:16Z", "message": "remove unused import."}, "afterCommit": {"oid": "32792479d6bbf3cdbea3c8141833846bf7650160", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/32792479d6bbf3cdbea3c8141833846bf7650160", "committedDate": "2020-04-16T01:19:17Z", "message": "remove unused import."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "32792479d6bbf3cdbea3c8141833846bf7650160", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/32792479d6bbf3cdbea3c8141833846bf7650160", "committedDate": "2020-04-16T01:19:17Z", "message": "remove unused import."}, "afterCommit": {"oid": "d2140125022148c2f508b345dfbe4e04cb1bd01b", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/d2140125022148c2f508b345dfbe4e04cb1bd01b", "committedDate": "2020-04-16T21:22:15Z", "message": "add changes missing during handling layout version"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d2140125022148c2f508b345dfbe4e04cb1bd01b", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/d2140125022148c2f508b345dfbe4e04cb1bd01b", "committedDate": "2020-04-16T21:22:15Z", "message": "add changes missing during handling layout version"}, "afterCommit": {"oid": "1a45c09e23ed7bd56d35fefd206a2cc580c43bd4", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/1a45c09e23ed7bd56d35fefd206a2cc580c43bd4", "committedDate": "2020-04-17T19:31:23Z", "message": "explain not to use newer version automatically"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e4e3e03a2fc7981a9bc32bd2e1f4cda99875c10a", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/e4e3e03a2fc7981a9bc32bd2e1f4cda99875c10a", "committedDate": "2020-04-17T19:32:56Z", "message": "revert unneeded"}, "afterCommit": {"oid": "3b7ada28fa19992945a81fe7a16d76db43f69bb9", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/3b7ada28fa19992945a81fe7a16d76db43f69bb9", "committedDate": "2020-04-20T23:20:59Z", "message": "revert unneeded"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3b7ada28fa19992945a81fe7a16d76db43f69bb9", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/3b7ada28fa19992945a81fe7a16d76db43f69bb9", "committedDate": "2020-04-20T23:20:59Z", "message": "revert unneeded"}, "afterCommit": {"oid": "2190396738190e2bf7b92ad93a4e15625fa441d0", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/2190396738190e2bf7b92ad93a4e15625fa441d0", "committedDate": "2020-04-23T00:44:51Z", "message": "revert unneeded"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4ODAwMDkw", "url": "https://github.com/apache/ozone/pull/742#pullrequestreview-398800090", "createdAt": "2020-04-23T06:43:17Z", "commit": {"oid": "1fc005422aa41db71e1b0ff8513beee65c654ccb"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b7bfbfe485c7c9b13132ee4156d1099622dc69d9", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/b7bfbfe485c7c9b13132ee4156d1099622dc69d9", "committedDate": "2020-04-23T06:30:13Z", "message": "review comment"}, "afterCommit": {"oid": "7e69e9b230a8911902e8e9d171e0fbcafe51d707", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/7e69e9b230a8911902e8e9d171e0fbcafe51d707", "committedDate": "2020-05-05T19:06:04Z", "message": "Add test for container reader"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MDQ5NzI5", "url": "https://github.com/apache/ozone/pull/742#pullrequestreview-407049729", "createdAt": "2020-05-06T23:14:47Z", "commit": {"oid": "7e69e9b230a8911902e8e9d171e0fbcafe51d707"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMzoxNDo0N1rOGRosvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMzo1ODowMVrOGRpibQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE0NTc5MA==", "bodyText": "updateDeleteTransactionId() updates the deleteTransactionId only if it more than the current deleteTransactionId. This check is not done before updating the DB. This could lead to different states in DB and in memory, right? I am not sure when it could be possible that new deleteTransactionId is less than the current one.\nWe could probably combine containerData.updateDeleteTransactionId and containerData.incrPendingDeletionBlocks with the batch put operation by making these functions return the updated values.", "url": "https://github.com/apache/ozone/pull/742#discussion_r421145790", "createdAt": "2020-05-06T23:14:47Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/statemachine/commandhandler/DeleteBlocksCommandHandler.java", "diffHunk": "@@ -251,12 +253,23 @@ private void deleteKeyValueContainerBlocks(\n         }\n       }\n \n-      containerDB.getStore()\n-          .put(DFSUtil.string2Bytes(OzoneConsts.DELETE_TRANSACTION_KEY_PREFIX),\n-              Longs.toByteArray(delTX.getTxID()));\n-      containerData\n-          .updateDeleteTransactionId(delTX.getTxID());\n-      // update pending deletion blocks count in in-memory container status\n+      // Finally commit the DB counters.\n+      BatchOperation batchOperation = new BatchOperation();\n+\n+      // Update in DB pending delete key count and delete transaction ID.\n+      batchOperation.put(DB_CONTAINER_DELETE_TRANSACTION_KEY,\n+          Longs.toByteArray(delTX.getTxID()));\n+\n+      batchOperation.put(DB_PENDING_DELETE_BLOCK_COUNT_KEY, Longs.toByteArray(\n+          containerData.getNumPendingDeletionBlocks() + newDeletionBlocks));\n+\n+      containerDB.getStore().writeBatch(batchOperation);\n+\n+\n+      // update pending deletion blocks count and delete transaction ID in\n+      // in-memory container status\n+      containerData.updateDeleteTransactionId(delTX.getTxID());\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e69e9b230a8911902e8e9d171e0fbcafe51d707"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE1MzM0NQ==", "bodyText": "Just a NIT - We can optimize the code by using blockIter.hasNext() as the while condition check instead of instantiating another variable.", "url": "https://github.com/apache/ozone/pull/742#discussion_r421153345", "createdAt": "2020-05-06T23:38:17Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/keyvalue/helpers/KeyValueContainerUtil.java", "diffHunk": "@@ -150,29 +160,109 @@ public static void parseKVContainerData(KeyValueContainerData kvContainerData,\n     }\n     kvContainerData.setDbFile(dbFile);\n \n-    try(ReferenceCountedDB metadata =\n-            BlockUtils.getDB(kvContainerData, config)) {\n-      long bytesUsed = 0;\n-      List<Map.Entry<byte[], byte[]>> liveKeys = metadata.getStore()\n-          .getRangeKVs(null, Integer.MAX_VALUE,\n-              MetadataKeyFilters.getNormalKeyFilter());\n \n-      bytesUsed = liveKeys.parallelStream().mapToLong(e-> {\n-        BlockData blockData;\n+    boolean isBlockMetadataSet = false;\n+\n+    try(ReferenceCountedDB containerDB = BlockUtils.getDB(kvContainerData,\n+        config)) {\n+\n+      // Set pending deleted block count.\n+      byte[] pendingDeleteBlockCount =\n+          containerDB.getStore().get(DB_PENDING_DELETE_BLOCK_COUNT_KEY);\n+      if (pendingDeleteBlockCount != null) {\n+        kvContainerData.incrPendingDeletionBlocks(\n+            Ints.fromByteArray(pendingDeleteBlockCount));\n+      } else {\n+        // Set pending deleted block count.\n+        MetadataKeyFilters.KeyPrefixFilter filter =\n+            new MetadataKeyFilters.KeyPrefixFilter()\n+                .addFilter(OzoneConsts.DELETING_KEY_PREFIX);\n+        int numPendingDeletionBlocks =\n+            containerDB.getStore().getSequentialRangeKVs(null,\n+                Integer.MAX_VALUE, filter)\n+                .size();\n+        kvContainerData.incrPendingDeletionBlocks(numPendingDeletionBlocks);\n+      }\n+\n+      // Set delete transaction id.\n+      byte[] delTxnId =\n+          containerDB.getStore().get(DB_CONTAINER_DELETE_TRANSACTION_KEY);\n+      if (delTxnId != null) {\n+        kvContainerData\n+            .updateDeleteTransactionId(Longs.fromByteArray(delTxnId));\n+      }\n+\n+      // Set BlockCommitSequenceId.\n+      byte[] bcsId = containerDB.getStore().get(\n+          DB_BLOCK_COMMIT_SEQUENCE_ID_KEY);\n+      if (bcsId != null) {\n+        kvContainerData\n+            .updateBlockCommitSequenceId(Longs.fromByteArray(bcsId));\n+      }\n+\n+      // Set bytes used.\n+      // commitSpace for Open Containers relies on usedBytes\n+      byte[] bytesUsed =\n+          containerDB.getStore().get(DB_CONTAINER_BYTES_USED_KEY);\n+      if (bytesUsed != null) {\n+        isBlockMetadataSet = true;\n+        kvContainerData.setBytesUsed(Longs.fromByteArray(bytesUsed));\n+      }\n+\n+      // Set block count.\n+      byte[] blockCount = containerDB.getStore().get(DB_BLOCK_COUNT_KEY);\n+      if (blockCount != null) {\n+        isBlockMetadataSet = true;\n+        kvContainerData.setKeyCount(Longs.fromByteArray(blockCount));\n+      }\n+    }\n+\n+    if (!isBlockMetadataSet) {\n+      initializeUsedBytesAndBlockCount(kvContainerData);\n+    }\n+  }\n+\n+\n+  /**\n+   * Initialize bytes used and block count.\n+   * @param kvContainerData\n+   * @throws IOException\n+   */\n+  private static void initializeUsedBytesAndBlockCount(\n+      KeyValueContainerData kvContainerData) throws IOException {\n+\n+    long blockCount = 0;\n+    try (KeyValueBlockIterator blockIter = new KeyValueBlockIterator(\n+        kvContainerData.getContainerID(),\n+        new File(kvContainerData.getContainerPath()))) {\n+      long usedBytes = 0;\n+\n+\n+      boolean success = true;\n+      while (success) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e69e9b230a8911902e8e9d171e0fbcafe51d707"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE1NTQ3NQ==", "bodyText": "If there was an error in parsing the block data, we might end up updating incorrect values for usedBytes and blockCount. Previously, we would fail to parse that container and not add it to containerSet. With this change, we would add wrongly parsed containers also to containerSet.", "url": "https://github.com/apache/ozone/pull/742#discussion_r421155475", "createdAt": "2020-05-06T23:44:59Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/keyvalue/helpers/KeyValueContainerUtil.java", "diffHunk": "@@ -150,29 +160,109 @@ public static void parseKVContainerData(KeyValueContainerData kvContainerData,\n     }\n     kvContainerData.setDbFile(dbFile);\n \n-    try(ReferenceCountedDB metadata =\n-            BlockUtils.getDB(kvContainerData, config)) {\n-      long bytesUsed = 0;\n-      List<Map.Entry<byte[], byte[]>> liveKeys = metadata.getStore()\n-          .getRangeKVs(null, Integer.MAX_VALUE,\n-              MetadataKeyFilters.getNormalKeyFilter());\n \n-      bytesUsed = liveKeys.parallelStream().mapToLong(e-> {\n-        BlockData blockData;\n+    boolean isBlockMetadataSet = false;\n+\n+    try(ReferenceCountedDB containerDB = BlockUtils.getDB(kvContainerData,\n+        config)) {\n+\n+      // Set pending deleted block count.\n+      byte[] pendingDeleteBlockCount =\n+          containerDB.getStore().get(DB_PENDING_DELETE_BLOCK_COUNT_KEY);\n+      if (pendingDeleteBlockCount != null) {\n+        kvContainerData.incrPendingDeletionBlocks(\n+            Ints.fromByteArray(pendingDeleteBlockCount));\n+      } else {\n+        // Set pending deleted block count.\n+        MetadataKeyFilters.KeyPrefixFilter filter =\n+            new MetadataKeyFilters.KeyPrefixFilter()\n+                .addFilter(OzoneConsts.DELETING_KEY_PREFIX);\n+        int numPendingDeletionBlocks =\n+            containerDB.getStore().getSequentialRangeKVs(null,\n+                Integer.MAX_VALUE, filter)\n+                .size();\n+        kvContainerData.incrPendingDeletionBlocks(numPendingDeletionBlocks);\n+      }\n+\n+      // Set delete transaction id.\n+      byte[] delTxnId =\n+          containerDB.getStore().get(DB_CONTAINER_DELETE_TRANSACTION_KEY);\n+      if (delTxnId != null) {\n+        kvContainerData\n+            .updateDeleteTransactionId(Longs.fromByteArray(delTxnId));\n+      }\n+\n+      // Set BlockCommitSequenceId.\n+      byte[] bcsId = containerDB.getStore().get(\n+          DB_BLOCK_COMMIT_SEQUENCE_ID_KEY);\n+      if (bcsId != null) {\n+        kvContainerData\n+            .updateBlockCommitSequenceId(Longs.fromByteArray(bcsId));\n+      }\n+\n+      // Set bytes used.\n+      // commitSpace for Open Containers relies on usedBytes\n+      byte[] bytesUsed =\n+          containerDB.getStore().get(DB_CONTAINER_BYTES_USED_KEY);\n+      if (bytesUsed != null) {\n+        isBlockMetadataSet = true;\n+        kvContainerData.setBytesUsed(Longs.fromByteArray(bytesUsed));\n+      }\n+\n+      // Set block count.\n+      byte[] blockCount = containerDB.getStore().get(DB_BLOCK_COUNT_KEY);\n+      if (blockCount != null) {\n+        isBlockMetadataSet = true;\n+        kvContainerData.setKeyCount(Longs.fromByteArray(blockCount));\n+      }\n+    }\n+\n+    if (!isBlockMetadataSet) {\n+      initializeUsedBytesAndBlockCount(kvContainerData);\n+    }\n+  }\n+\n+\n+  /**\n+   * Initialize bytes used and block count.\n+   * @param kvContainerData\n+   * @throws IOException\n+   */\n+  private static void initializeUsedBytesAndBlockCount(\n+      KeyValueContainerData kvContainerData) throws IOException {\n+\n+    long blockCount = 0;\n+    try (KeyValueBlockIterator blockIter = new KeyValueBlockIterator(\n+        kvContainerData.getContainerID(),\n+        new File(kvContainerData.getContainerPath()))) {\n+      long usedBytes = 0;\n+\n+\n+      boolean success = true;\n+      while (success) {\n         try {\n-          blockData = BlockUtils.getBlockData(e.getValue());\n-          return blockData.getSize();\n+          if (blockIter.hasNext()) {\n+            BlockData block = blockIter.nextBlock();\n+            long blockLen = 0;\n+\n+            List< ContainerProtos.ChunkInfo > chunkInfoList = block.getChunks();\n+            for (ContainerProtos.ChunkInfo chunk : chunkInfoList) {\n+              ChunkInfo info = ChunkInfo.getFromProtoBuf(chunk);\n+              blockLen += info.getLen();\n+            }\n+\n+            usedBytes += blockLen;\n+            blockCount++;\n+          } else {\n+            success = false;\n+          }\n         } catch (IOException ex) {\n-          return 0L;\n+          LOG.error(\"Failed to parse block data for Container {}\",\n+              kvContainerData.getContainerID());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e69e9b230a8911902e8e9d171e0fbcafe51d707"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE1OTUzMw==", "bodyText": "There are two places where blocks are deleted - BlockManagerImpl#deleteBlock and BlockDeletingService.\nI am trying to understand when which is used.\nWhen is BlockManagerImpl#deleteBlock called? Is it always called after the chunk is deleted? Otherwise there would not be any change in bytesUsed.", "url": "https://github.com/apache/ozone/pull/742#discussion_r421159533", "createdAt": "2020-05-06T23:58:01Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/keyvalue/impl/BlockManagerImpl.java", "diffHunk": "@@ -224,11 +239,20 @@ public void deleteBlock(Container container, BlockID blockID) throws\n       // are not atomic. Leaving it here since the impact is refusing\n       // to delete a Block which might have just gotten inserted after\n       // the get check.\n-      byte[] kKey = Longs.toByteArray(blockID.getLocalID());\n+      byte[] blockKey = Longs.toByteArray(blockID.getLocalID());\n \n       getBlockByID(db, blockID);\n-      db.getStore().delete(kKey);\n-      // Decrement blockcount here\n+\n+      // Update DB to delete block and set block count and bytes used.\n+      BatchOperation batch = new BatchOperation();\n+      batch.delete(blockKey);\n+      batch.put(DB_CONTAINER_BYTES_USED_KEY,\n+          Longs.toByteArray(container.getContainerData().getBytesUsed()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e69e9b230a8911902e8e9d171e0fbcafe51d707"}, "originalPosition": 74}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7e69e9b230a8911902e8e9d171e0fbcafe51d707", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/7e69e9b230a8911902e8e9d171e0fbcafe51d707", "committedDate": "2020-05-05T19:06:04Z", "message": "Add test for container reader"}, "afterCommit": {"oid": "6c2807cb3b9a1df829fa3eac5e6f4db3c248c374", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/6c2807cb3b9a1df829fa3eac5e6f4db3c248c374", "committedDate": "2020-05-07T18:09:20Z", "message": "review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3ODY3Mzk1", "url": "https://github.com/apache/ozone/pull/742#pullrequestreview-407867395", "createdAt": "2020-05-07T21:59:28Z", "commit": {"oid": "6c2807cb3b9a1df829fa3eac5e6f4db3c248c374"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMTo1OToyOFrOGSR0gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMTo1OToyOFrOGSR0gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgxOTUyMw==", "bodyText": "Should be if (delTx.getTxID > containerData.getDeleteTransactionId())", "url": "https://github.com/apache/ozone/pull/742#discussion_r421819523", "createdAt": "2020-05-07T21:59:28Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/statemachine/commandhandler/DeleteBlocksCommandHandler.java", "diffHunk": "@@ -256,9 +256,14 @@ private void deleteKeyValueContainerBlocks(\n       // Finally commit the DB counters.\n       BatchOperation batchOperation = new BatchOperation();\n \n-      // Update in DB pending delete key count and delete transaction ID.\n-      batchOperation.put(DB_CONTAINER_DELETE_TRANSACTION_KEY,\n-          Longs.toByteArray(delTX.getTxID()));\n+\n+      // In memory is updated only when existing delete transactionID is\n+      // greater.\n+      if (containerData.getDeleteTransactionId() > delTX.getTxID()) {\n+        // Update in DB pending delete key count and delete transaction ID.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c2807cb3b9a1df829fa3eac5e6f4db3c248c374"}, "originalPosition": 11}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "697b08f0ef753cd152e5727b5a7465e237a3b310", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/697b08f0ef753cd152e5727b5a7465e237a3b310", "committedDate": "2020-05-07T22:28:05Z", "message": "HDDS-3217. Datanode startup is slow due to iterating container DB 2-3 times."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66f33262d508717210d389b137b022eda952c40d", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/66f33262d508717210d389b137b022eda952c40d", "committedDate": "2020-05-07T22:29:56Z", "message": "review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6c2807cb3b9a1df829fa3eac5e6f4db3c248c374", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/6c2807cb3b9a1df829fa3eac5e6f4db3c248c374", "committedDate": "2020-05-07T18:09:20Z", "message": "review comments"}, "afterCommit": {"oid": "66f33262d508717210d389b137b022eda952c40d", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/66f33262d508717210d389b137b022eda952c40d", "committedDate": "2020-05-07T22:29:56Z", "message": "review comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3563, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}