{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM3MjkzNzk4", "number": 1692, "title": "HDDS-4564. Prepare client should check every OM individually for the prepared check based on Txn ID.", "bodyText": "What changes were proposed in this pull request?\n\nAfter getting a successful response for the OMPrepareRequest, the prepare client should use the Txn ID from the response to check every OM's preparation completeness.\nThis JIRA is partially dependent on HDDS-4569 which plans to introduce a marker file at the end of preparation. In a follow up JIRA, this will be refined to take up that logic, along with an integration test.\nA basic acceptance test for prepare has been added.\nUser facing message screenshot has been attached (om1, om2, om3 are actually hostnames in the screenshot).\n\n\nWhat is the link to the Apache JIRA\nhttps://issues.apache.org/jira/browse/HDDS-4564\nHow was this patch tested?\nManually tested.\nAdded acceptance test.", "createdAt": "2020-12-11T19:14:02Z", "url": "https://github.com/apache/ozone/pull/1692", "merged": true, "mergeCommit": {"oid": "bdd00a7bb5b4c0b8e5c49985826c984c19dc6a8f"}, "closed": true, "closedAt": "2020-12-16T17:33:19Z", "author": {"login": "avijayanhwx"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdk7m4zgH2gAyNTM3MjkzNzk4OmVjMzdjNDFlNjk1YTMyNzdkZDMwMDQ5MDY4ODU4ZTQ4OGMxODUxZmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmhJ_MAH2gAyNTM3MjkzNzk4Ojc3Njc3Yzc1ZDJhNmIxNmZhOWIxNWFjYWJkMzcyNGFjNWNlZmVjY2Q=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ec37c41e695a3277dd30049068858e488c1851ff", "author": {"user": {"login": "avijayanhwx", "name": null}}, "url": "https://github.com/apache/ozone/commit/ec37c41e695a3277dd30049068858e488c1851ff", "committedDate": "2020-12-10T23:05:23Z", "message": "HDDS-4564. Prepare client should check every OM individually for the prepared check based on Txn Id."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cff7e6030989383bcd05c2c25234b5c426c9a6c6", "author": {"user": {"login": "avijayanhwx", "name": null}}, "url": "https://github.com/apache/ozone/commit/cff7e6030989383bcd05c2c25234b5c426c9a6c6", "committedDate": "2020-12-10T23:38:29Z", "message": "Checkstyle fix."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08e5e56e11d256d46adf84f6ce9d6b39f8a62c19", "author": {"user": {"login": "avijayanhwx", "name": null}}, "url": "https://github.com/apache/ozone/commit/08e5e56e11d256d46adf84f6ce9d6b39f8a62c19", "committedDate": "2020-12-11T19:06:11Z", "message": "Proto reefactor. Add acceptance test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "046b9cd5a8f44b4f8d3ad926f348bb17b3fe26af", "author": {"user": {"login": "avijayanhwx", "name": null}}, "url": "https://github.com/apache/ozone/commit/046b9cd5a8f44b4f8d3ad926f348bb17b3fe26af", "committedDate": "2020-12-11T20:17:26Z", "message": "Move helper method to common util class."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "331c4af46093ba3ca4d640846d285474ce0746ba", "author": {"user": {"login": "avijayanhwx", "name": null}}, "url": "https://github.com/apache/ozone/commit/331c4af46093ba3ca4d640846d285474ce0746ba", "committedDate": "2020-12-11T21:44:48Z", "message": "Prepare command should not exit when an OM is unresponsive."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwODgwMDY2", "url": "https://github.com/apache/ozone/pull/1692#pullrequestreview-550880066", "createdAt": "2020-12-13T03:09:38Z", "commit": {"oid": "331c4af46093ba3ca4d640846d285474ce0746ba"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMzowOTozOFrOIEuvbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMzoxNjozMFrOIEuzZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgzMTAyMw==", "bodyText": "Please also document this javadoc for this method.", "url": "https://github.com/apache/ozone/pull/1692#discussion_r541831023", "createdAt": "2020-12-13T03:09:38Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/protocol/OzoneManagerProtocol.java", "diffHunk": "@@ -602,4 +604,12 @@ default long prepareOzoneManager(\n       throws IOException {\n     return -1;\n   }\n+\n+  default PrepareStatusResponse getOzoneManagerPrepareStatus(long txnId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "331c4af46093ba3ca4d640846d285474ce0746ba"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgzMTA3Nw==", "bodyText": "Can you add the @OverRide here that will let us know this is a protocol method?", "url": "https://github.com/apache/ozone/pull/1692#discussion_r541831077", "createdAt": "2020-12-13T03:09:50Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/protocolPB/OzoneManagerProtocolClientSideTranslatorPB.java", "diffHunk": "@@ -1574,6 +1574,17 @@ public long prepareOzoneManager(\n     return prepareResponse.getTxnID();\n   }\n \n+  public PrepareStatusResponse getOzoneManagerPrepareStatus(long txnId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "331c4af46093ba3ca4d640846d285474ce0746ba"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgzMjAzOA==", "bodyText": "As this is the command for admin users, can we print out this message instead of throwing an exception? That will be more friendly to users.", "url": "https://github.com/apache/ozone/pull/1692#discussion_r541832038", "createdAt": "2020-12-13T03:16:30Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/admin/om/PrepareSubCommand.java", "diffHunk": "@@ -67,13 +78,85 @@\n   )\n   private long txnApplyCheckIntervalSeconds;\n \n+  @CommandLine.Option(\n+      names = {\"-pct\", \"--prepare-check-interval\"},\n+      description = \"Time in SECONDS to wait between successive checks for OM\" +\n+          \" preparation.\",\n+      defaultValue = \"10\",\n+      hidden = true\n+  )\n+  private long prepareCheckInterval;\n+\n+  @CommandLine.Option(\n+      names = {\"-pt\", \"--prepare-timeout\"},\n+      description = \"Max time in SECONDS to wait for all OMs to be prepared\",\n+      defaultValue = \"300\",\n+      hidden = true\n+  )\n+  private long prepareTimeOut;\n+\n   @Override\n   public Void call() throws Exception {\n     OzoneManagerProtocol client = parent.createOmClient(omServiceId);\n     long prepareTxnId = client.prepareOzoneManager(txnApplyWaitTimeSeconds,\n         txnApplyCheckIntervalSeconds);\n     System.out.println(\"Ozone Manager Prepare Request successfully returned \" +\n-        \"with Txn Id \" + prepareTxnId);\n+        \"with Transaction Id : [\" + prepareTxnId + \"].\");\n+\n+    Map<String, Boolean> omPreparedStatusMap = new HashMap<>();\n+    Set<String> omHosts = getOmHostsFromConfig(\n+        parent.getParent().getOzoneConf(), omServiceId);\n+    omHosts.forEach(h -> omPreparedStatusMap.put(h, false));\n+    Duration pTimeout = Duration.of(prepareTimeOut, ChronoUnit.SECONDS);\n+    Duration pInterval = Duration.of(prepareCheckInterval, ChronoUnit.SECONDS);\n+\n+    System.out.println();\n+    System.out.println(\"Checking individual OM instances for prepare request \" +\n+        \"completion...\");\n+    long endTime = System.currentTimeMillis() + pTimeout.toMillis();\n+    int expectedNumPreparedOms = omPreparedStatusMap.size();\n+    int currentNumPreparedOms = 0;\n+    while (System.currentTimeMillis() < endTime &&\n+        currentNumPreparedOms < expectedNumPreparedOms) {\n+      for (Map.Entry<String, Boolean> e : omPreparedStatusMap.entrySet()) {\n+        if (!e.getValue()) {\n+          String omHost = e.getKey();\n+          try (OzoneManagerProtocol singleOmClient =\n+                    parent.createOmClient(omServiceId, omHost, false)) {\n+            PrepareStatusResponse response =\n+                singleOmClient.getOzoneManagerPrepareStatus(prepareTxnId);\n+            PrepareStatus status = response.getStatus();\n+            System.out.println(\"OM : [\" + omHost + \"], Prepare \" +\n+                \"Status : [\" + status.name() + \"], Current Transaction Id : [\" +\n+                response.getCurrentTxnIndex() + \"]\");\n+            if (status.equals(PREPARE_COMPLETED)) {\n+              e.setValue(true);\n+              currentNumPreparedOms++;\n+            }\n+          } catch (IOException ioEx) {\n+            System.out.println(\"Exception while checking preparation \" +\n+                \"completeness for [\" + omHost +\n+                \"], Error : [\" + ioEx.getMessage() + \"]\");\n+          }\n+        }\n+      }\n+      if (currentNumPreparedOms < expectedNumPreparedOms) {\n+        System.out.println(\"Waiting for \" + prepareCheckInterval +\n+            \" seconds before retrying...\");\n+        Thread.sleep(pInterval.toMillis());\n+      }\n+    }\n+    if (currentNumPreparedOms < expectedNumPreparedOms) {\n+      throw new Exception(\"OM Preparation failed since all OMs are not \" +\n+          \"prepared yet.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "331c4af46093ba3ca4d640846d285474ce0746ba"}, "originalPosition": 106}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e4b3a24fde634a8175bc0bbcceb682a25423ff4", "author": {"user": {"login": "avijayanhwx", "name": null}}, "url": "https://github.com/apache/ozone/commit/4e4b3a24fde634a8175bc0bbcceb682a25423ff4", "committedDate": "2020-12-14T06:04:54Z", "message": "Add Javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNTAxNjU0", "url": "https://github.com/apache/ozone/pull/1692#pullrequestreview-551501654", "createdAt": "2020-12-14T15:49:28Z", "commit": {"oid": "4e4b3a24fde634a8175bc0bbcceb682a25423ff4"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjowNToxN1rOIFXzyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjoxOTo0MVrOIFYfGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwMzg4MA==", "bodyText": "I'm a bit confused on the currentTxnIndex field. If this is really the current transaction index of the system, that will always exist, so why would that be optional? If it is instead being used as the prepare index, it makes sense that it would be optional and omitted if the OM is not prepared, but in that case we should probably change the name to preparedIndex or something like that.\nAssuming this is the prepare index, we should probably document what is expected of this field in relation to the different prepareStatuses. This was my thought but let me know what you think:\n\nPREPARE_NOT_STARTED -> prepare index empty\nPREPARE_IN_PROGRESS -> prepare index present, but this is the index we are waiting to be prepared on (index of the prepare request)\nPREPARE_COMPLETED -> OM is prepared at the prepare index.", "url": "https://github.com/apache/ozone/pull/1692#discussion_r542503880", "createdAt": "2020-12-14T16:05:17Z", "author": {"login": "errose28"}, "path": "hadoop-ozone/interface-client/src/main/proto/OmClientProtocol.proto", "diffHunk": "@@ -1091,6 +1094,23 @@ message PrepareResponse {\n     required uint64 txnID = 1;\n }\n \n+message PrepareStatusRequest {\n+    required uint64 txnID = 1;\n+}\n+\n+message PrepareStatusResponse {\n+    enum PrepareStatus {\n+        // TODO\n+        // HDDS-4569 may introduce new states here, like marker file found\n+        // but with different txn id. We can add them as make sense.\n+        PREPARE_NOT_STARTED = 1;\n+        PREPARE_IN_PROGRESS = 2;\n+        PREPARE_COMPLETED = 3;\n+    }\n+    required PrepareStatus status = 1;\n+    optional uint64 currentTxnIndex = 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b3a24fde634a8175bc0bbcceb682a25423ff4"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUxMDIyMA==", "bodyText": "I think that should be != in the log message. Also can we add some more context to this message, like \"Received prepare status request while last txn index <index> != last snapshot index <snapshot index>\".", "url": "https://github.com/apache/ozone/pull/1692#discussion_r542510220", "createdAt": "2020-12-14T16:13:30Z", "author": {"login": "errose28"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/protocolPB/OzoneManagerRequestHandler.java", "diffHunk": "@@ -623,6 +633,24 @@ private FinalizeUpgradeProgressResponse reportUpgradeProgress(\n         .build();\n   }\n \n+  private PrepareStatusResponse getPrepareStatus(PrepareStatusRequest request)\n+      throws IOException {\n+    // TODO After HDDS-4569,\n+    // When there is a global \"prepared\" state in OM, we can return\n+    // PREPARE_NOT_STARTED instead of PREPARE_IN_PROGRESS appropriately.\n+    PrepareStatus prepareStatus = null;\n+    long txnID = request.getTxnID();\n+    long ratisSnapshotIndex = impl.getRatisSnapshotIndex();\n+    if (ratisSnapshotIndex != txnID) {\n+      LOG.info(\"Last Txn Index = {}\", ratisSnapshotIndex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b3a24fde634a8175bc0bbcceb682a25423ff4"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUxNDk2OQ==", "bodyText": "Just for clarification as I am working on HDDS-4569, is this the expected interpretations of status?\nflag on && (txn index == snapshot index) -> PREPARE_COMPLETED\nflag on && (txn index != snapshot index) -> PREPARE_IN_PROGRESS\nflag off  -> PREPARE_NOT_STARTED", "url": "https://github.com/apache/ozone/pull/1692#discussion_r542514969", "createdAt": "2020-12-14T16:19:41Z", "author": {"login": "errose28"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/protocolPB/OzoneManagerRequestHandler.java", "diffHunk": "@@ -623,6 +633,24 @@ private FinalizeUpgradeProgressResponse reportUpgradeProgress(\n         .build();\n   }\n \n+  private PrepareStatusResponse getPrepareStatus(PrepareStatusRequest request)\n+      throws IOException {\n+    // TODO After HDDS-4569,\n+    // When there is a global \"prepared\" state in OM, we can return\n+    // PREPARE_NOT_STARTED instead of PREPARE_IN_PROGRESS appropriately.\n+    PrepareStatus prepareStatus = null;\n+    long txnID = request.getTxnID();\n+    long ratisSnapshotIndex = impl.getRatisSnapshotIndex();\n+    if (ratisSnapshotIndex != txnID) {\n+      LOG.info(\"Last Txn Index = {}\", ratisSnapshotIndex);\n+      prepareStatus =  PREPARE_IN_PROGRESS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b3a24fde634a8175bc0bbcceb682a25423ff4"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7465dbc38d96084be5e917e7bdee341c3a0118b6", "author": {"user": {"login": "avijayanhwx", "name": null}}, "url": "https://github.com/apache/ozone/commit/7465dbc38d96084be5e917e7bdee341c3a0118b6", "committedDate": "2020-12-14T19:28:57Z", "message": "Add more log lines to debug integration test failure."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76de713c8ad7e84a42dca51efeb5a23ed8039d8f", "author": {"user": {"login": "avijayanhwx", "name": null}}, "url": "https://github.com/apache/ozone/commit/76de713c8ad7e84a42dca51efeb5a23ed8039d8f", "committedDate": "2020-12-14T21:50:29Z", "message": "Remove log index = snapshot index condition."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyNzc0ODc3", "url": "https://github.com/apache/ozone/pull/1692#pullrequestreview-552774877", "createdAt": "2020-12-15T19:00:27Z", "commit": {"oid": "76de713c8ad7e84a42dca51efeb5a23ed8039d8f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77677c75d2a6b16fa9b15acabd3724ac5cefeccd", "author": {"user": {"login": "avijayanhwx", "name": null}}, "url": "https://github.com/apache/ozone/commit/77677c75d2a6b16fa9b15acabd3724ac5cefeccd", "committedDate": "2020-12-15T21:24:08Z", "message": "Fix checkstyle."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2095, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}