{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2NDExNTU5", "number": 1005, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNDoxNzo0NVrOEClV2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNjo0MDo1M1rOED99bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTQ0NDA5OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNDoxNzo0NVrOGfIOzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMTo1NjoxOVrOGfrg_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI5MzkwMA==", "bodyText": "Is this a duplicate of HDDS-3350? Let's decouple the Ratis version update from the rest of the changes.", "url": "https://github.com/apache/ozone/pull/1005#discussion_r435293900", "createdAt": "2020-06-04T14:17:45Z", "author": {"login": "arp7"}, "path": "pom.xml", "diffHunk": "@@ -79,7 +79,7 @@ xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xs\n     <declared.ozone.version>${ozone.version}</declared.ozone.version>\n \n     <!-- Apache Ratis version -->\n-    <ratis.version>0.6.0-cac3336-SNAPSHOT</ratis.version>\n+    <ratis.version>0.6.0-6ab75ae-SNAPSHOT</ratis.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30106806086a61cbda4e54ba36cbfa85a8e69044"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI5NzA3OA==", "bodyText": "Duplicate of HDDS-3564 maybe.", "url": "https://github.com/apache/ozone/pull/1005#discussion_r435297078", "createdAt": "2020-06-04T14:21:51Z", "author": {"login": "adoroszlai"}, "path": "pom.xml", "diffHunk": "@@ -79,7 +79,7 @@ xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xs\n     <declared.ozone.version>${ozone.version}</declared.ozone.version>\n \n     <!-- Apache Ratis version -->\n-    <ratis.version>0.6.0-cac3336-SNAPSHOT</ratis.version>\n+    <ratis.version>0.6.0-6ab75ae-SNAPSHOT</ratis.version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI5MzkwMA=="}, "originalCommit": {"oid": "30106806086a61cbda4e54ba36cbfa85a8e69044"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg3MDIwOA==", "bodyText": "Ratis snapshot version update is required for compilation. Once HDDS-3654 is committed, I'll remove these changes.", "url": "https://github.com/apache/ozone/pull/1005#discussion_r435870208", "createdAt": "2020-06-05T11:52:35Z", "author": {"login": "lokeshj1703"}, "path": "pom.xml", "diffHunk": "@@ -79,7 +79,7 @@ xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xs\n     <declared.ozone.version>${ozone.version}</declared.ozone.version>\n \n     <!-- Apache Ratis version -->\n-    <ratis.version>0.6.0-cac3336-SNAPSHOT</ratis.version>\n+    <ratis.version>0.6.0-6ab75ae-SNAPSHOT</ratis.version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI5MzkwMA=="}, "originalCommit": {"oid": "30106806086a61cbda4e54ba36cbfa85a8e69044"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg3MTk5Nw==", "bodyText": "Marking it as pending until 3654 is committed.", "url": "https://github.com/apache/ozone/pull/1005#discussion_r435871997", "createdAt": "2020-06-05T11:56:19Z", "author": {"login": "lokeshj1703"}, "path": "pom.xml", "diffHunk": "@@ -79,7 +79,7 @@ xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xs\n     <declared.ozone.version>${ozone.version}</declared.ozone.version>\n \n     <!-- Apache Ratis version -->\n-    <ratis.version>0.6.0-cac3336-SNAPSHOT</ratis.version>\n+    <ratis.version>0.6.0-6ab75ae-SNAPSHOT</ratis.version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI5MzkwMA=="}, "originalCommit": {"oid": "30106806086a61cbda4e54ba36cbfa85a8e69044"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTkzODU1OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/ratis/RatisHelper.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNjozNDoxOFrOGhS8jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNTozODoyOFrOGijJvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2NjYwNQ==", "bodyText": "Instead of explicitly adding no retry for specific exception , can we define a static list of exceptions for which there will be no retry and iterate here. ?", "url": "https://github.com/apache/ozone/pull/1005#discussion_r437566605", "createdAt": "2020-06-09T16:34:18Z", "author": {"login": "bshashikant"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/ratis/RatisHelper.java", "diffHunk": "@@ -269,23 +282,76 @@ static GrpcTlsConfig createTlsClientConfig(SecurityConfig conf,\n     return tlsConfig;\n   }\n \n-  static RetryPolicy createRetryPolicy(ConfigurationSource conf) {\n-    int maxRetryCount =\n-        conf.getInt(OzoneConfigKeys.DFS_RATIS_CLIENT_REQUEST_MAX_RETRIES_KEY,\n+  public static RetryPolicy createRetryPolicy(ConfigurationSource conf) {\n+    ExponentialBackoffRetry exponentialBackoffRetry =\n+        createExponentialBackoffPolicy(conf);\n+    MultipleLinearRandomRetry multipleLinearRandomRetry =\n+        MultipleLinearRandomRetry.parseCommaSeparated(conf.get(\n+            OzoneConfigKeys.DFS_RATIS_CLIENT_MULTILINEAR_RANDOM_RETRY_POLICY,\n             OzoneConfigKeys.\n-                DFS_RATIS_CLIENT_REQUEST_MAX_RETRIES_DEFAULT);\n-    long retryInterval = conf.getTimeDuration(OzoneConfigKeys.\n-        DFS_RATIS_CLIENT_REQUEST_RETRY_INTERVAL_KEY, OzoneConfigKeys.\n-        DFS_RATIS_CLIENT_REQUEST_RETRY_INTERVAL_DEFAULT\n-        .toIntExact(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS);\n-    TimeDuration sleepDuration =\n-        TimeDuration.valueOf(retryInterval, TimeUnit.MILLISECONDS);\n-    RetryPolicy retryPolicy = RetryPolicies\n-        .retryUpToMaximumCountWithFixedSleep(maxRetryCount, sleepDuration);\n-    return retryPolicy;\n+                DFS_RATIS_CLIENT_MULTILINEAR_RANDOM_RETRY_POLICY_DEFAULT));\n+\n+    long writeTimeout = conf.getTimeDuration(\n+        OzoneConfigKeys.DFS_RATIS_CLIENT_REQUEST_WRITE_TIMEOUT, OzoneConfigKeys.\n+            DFS_RATIS_CLIENT_REQUEST_WRITE_TIMEOUT_DEFAULT\n+            .toIntExact(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS);\n+    long watchTimeout = conf.getTimeDuration(\n+        OzoneConfigKeys.DFS_RATIS_CLIENT_REQUEST_WATCH_TIMEOUT, OzoneConfigKeys.\n+            DFS_RATIS_CLIENT_REQUEST_WATCH_TIMEOUT_DEFAULT\n+            .toIntExact(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS);\n+\n+    return RequestTypeDependentRetryPolicy.newBuilder()\n+        .setRetryPolicy(RaftProtos.RaftClientRequestProto.TypeCase.WRITE,\n+            createExceptionDependentPolicy(exponentialBackoffRetry,\n+                multipleLinearRandomRetry, exponentialBackoffRetry))\n+        .setRetryPolicy(RaftProtos.RaftClientRequestProto.TypeCase.WATCH,\n+            createExceptionDependentPolicy(exponentialBackoffRetry,\n+                multipleLinearRandomRetry, RetryPolicies.noRetry()))\n+        .setTimeout(RaftProtos.RaftClientRequestProto.TypeCase.WRITE,\n+            TimeDuration.valueOf(writeTimeout, TimeUnit.MILLISECONDS))\n+        .setTimeout(RaftProtos.RaftClientRequestProto.TypeCase.WATCH,\n+            TimeDuration.valueOf(watchTimeout, TimeUnit.MILLISECONDS))\n+        .build();\n+  }\n+\n+  private static ExponentialBackoffRetry createExponentialBackoffPolicy(\n+      ConfigurationSource conf) {\n+    long exponentialBaseSleep = conf.getTimeDuration(\n+        OzoneConfigKeys.DFS_RATIS_CLIENT_EXPONENTIAL_BACKOFF_BASE_SLEEP,\n+        OzoneConfigKeys.DFS_RATIS_CLIENT_EXPONENTIAL_BACKOFF_BASE_SLEEP_DEFAULT\n+            .toIntExact(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS);\n+    long exponentialMaxSleep = conf.getTimeDuration(\n+        OzoneConfigKeys.DFS_RATIS_CLIENT_EXPONENTIAL_BACKOFF_MAX_SLEEP,\n+        OzoneConfigKeys.\n+            DFS_RATIS_CLIENT_EXPONENTIAL_BACKOFF_MAX_SLEEP_DEFAULT\n+            .toIntExact(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS);\n+    return ExponentialBackoffRetry.newBuilder()\n+        .setBaseSleepTime(\n+            TimeDuration.valueOf(exponentialBaseSleep, TimeUnit.MILLISECONDS))\n+        .setMaxSleepTime(\n+            TimeDuration.valueOf(exponentialMaxSleep, TimeUnit.MILLISECONDS))\n+        .build();\n+  }\n+\n+  private static ExceptionDependentRetry createExceptionDependentPolicy(\n+      ExponentialBackoffRetry exponentialBackoffRetry,\n+      MultipleLinearRandomRetry multipleLinearRandomRetry,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb7802dad9f7c3a3bc369560a2f46b7d6575003b"}, "originalPosition": 294}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2ODY0NQ==", "bodyText": "I think we need to add AlreadyClosedException to the list of no retry here( as this can be generated from ratis server as well). Also, for RfatLogIOException , the policy should be of no retry.", "url": "https://github.com/apache/ozone/pull/1005#discussion_r437568645", "createdAt": "2020-06-09T16:37:32Z", "author": {"login": "bshashikant"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/ratis/RatisHelper.java", "diffHunk": "@@ -269,23 +282,76 @@ static GrpcTlsConfig createTlsClientConfig(SecurityConfig conf,\n     return tlsConfig;\n   }\n \n-  static RetryPolicy createRetryPolicy(ConfigurationSource conf) {\n-    int maxRetryCount =\n-        conf.getInt(OzoneConfigKeys.DFS_RATIS_CLIENT_REQUEST_MAX_RETRIES_KEY,\n+  public static RetryPolicy createRetryPolicy(ConfigurationSource conf) {\n+    ExponentialBackoffRetry exponentialBackoffRetry =\n+        createExponentialBackoffPolicy(conf);\n+    MultipleLinearRandomRetry multipleLinearRandomRetry =\n+        MultipleLinearRandomRetry.parseCommaSeparated(conf.get(\n+            OzoneConfigKeys.DFS_RATIS_CLIENT_MULTILINEAR_RANDOM_RETRY_POLICY,\n             OzoneConfigKeys.\n-                DFS_RATIS_CLIENT_REQUEST_MAX_RETRIES_DEFAULT);\n-    long retryInterval = conf.getTimeDuration(OzoneConfigKeys.\n-        DFS_RATIS_CLIENT_REQUEST_RETRY_INTERVAL_KEY, OzoneConfigKeys.\n-        DFS_RATIS_CLIENT_REQUEST_RETRY_INTERVAL_DEFAULT\n-        .toIntExact(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS);\n-    TimeDuration sleepDuration =\n-        TimeDuration.valueOf(retryInterval, TimeUnit.MILLISECONDS);\n-    RetryPolicy retryPolicy = RetryPolicies\n-        .retryUpToMaximumCountWithFixedSleep(maxRetryCount, sleepDuration);\n-    return retryPolicy;\n+                DFS_RATIS_CLIENT_MULTILINEAR_RANDOM_RETRY_POLICY_DEFAULT));\n+\n+    long writeTimeout = conf.getTimeDuration(\n+        OzoneConfigKeys.DFS_RATIS_CLIENT_REQUEST_WRITE_TIMEOUT, OzoneConfigKeys.\n+            DFS_RATIS_CLIENT_REQUEST_WRITE_TIMEOUT_DEFAULT\n+            .toIntExact(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS);\n+    long watchTimeout = conf.getTimeDuration(\n+        OzoneConfigKeys.DFS_RATIS_CLIENT_REQUEST_WATCH_TIMEOUT, OzoneConfigKeys.\n+            DFS_RATIS_CLIENT_REQUEST_WATCH_TIMEOUT_DEFAULT\n+            .toIntExact(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS);\n+\n+    return RequestTypeDependentRetryPolicy.newBuilder()\n+        .setRetryPolicy(RaftProtos.RaftClientRequestProto.TypeCase.WRITE,\n+            createExceptionDependentPolicy(exponentialBackoffRetry,\n+                multipleLinearRandomRetry, exponentialBackoffRetry))\n+        .setRetryPolicy(RaftProtos.RaftClientRequestProto.TypeCase.WATCH,\n+            createExceptionDependentPolicy(exponentialBackoffRetry,\n+                multipleLinearRandomRetry, RetryPolicies.noRetry()))\n+        .setTimeout(RaftProtos.RaftClientRequestProto.TypeCase.WRITE,\n+            TimeDuration.valueOf(writeTimeout, TimeUnit.MILLISECONDS))\n+        .setTimeout(RaftProtos.RaftClientRequestProto.TypeCase.WATCH,\n+            TimeDuration.valueOf(watchTimeout, TimeUnit.MILLISECONDS))\n+        .build();\n+  }\n+\n+  private static ExponentialBackoffRetry createExponentialBackoffPolicy(\n+      ConfigurationSource conf) {\n+    long exponentialBaseSleep = conf.getTimeDuration(\n+        OzoneConfigKeys.DFS_RATIS_CLIENT_EXPONENTIAL_BACKOFF_BASE_SLEEP,\n+        OzoneConfigKeys.DFS_RATIS_CLIENT_EXPONENTIAL_BACKOFF_BASE_SLEEP_DEFAULT\n+            .toIntExact(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS);\n+    long exponentialMaxSleep = conf.getTimeDuration(\n+        OzoneConfigKeys.DFS_RATIS_CLIENT_EXPONENTIAL_BACKOFF_MAX_SLEEP,\n+        OzoneConfigKeys.\n+            DFS_RATIS_CLIENT_EXPONENTIAL_BACKOFF_MAX_SLEEP_DEFAULT\n+            .toIntExact(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS);\n+    return ExponentialBackoffRetry.newBuilder()\n+        .setBaseSleepTime(\n+            TimeDuration.valueOf(exponentialBaseSleep, TimeUnit.MILLISECONDS))\n+        .setMaxSleepTime(\n+            TimeDuration.valueOf(exponentialMaxSleep, TimeUnit.MILLISECONDS))\n+        .build();\n+  }\n+\n+  private static ExceptionDependentRetry createExceptionDependentPolicy(\n+      ExponentialBackoffRetry exponentialBackoffRetry,\n+      MultipleLinearRandomRetry multipleLinearRandomRetry,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2NjYwNQ=="}, "originalCommit": {"oid": "cb7802dad9f7c3a3bc369560a2f46b7d6575003b"}, "originalPosition": 294}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE0MzkxOQ==", "bodyText": "RaftLogIOException is never received at raft client. I have added AlreadyClosedException.", "url": "https://github.com/apache/ozone/pull/1005#discussion_r438143919", "createdAt": "2020-06-10T13:59:01Z", "author": {"login": "lokeshj1703"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/ratis/RatisHelper.java", "diffHunk": "@@ -269,23 +282,76 @@ static GrpcTlsConfig createTlsClientConfig(SecurityConfig conf,\n     return tlsConfig;\n   }\n \n-  static RetryPolicy createRetryPolicy(ConfigurationSource conf) {\n-    int maxRetryCount =\n-        conf.getInt(OzoneConfigKeys.DFS_RATIS_CLIENT_REQUEST_MAX_RETRIES_KEY,\n+  public static RetryPolicy createRetryPolicy(ConfigurationSource conf) {\n+    ExponentialBackoffRetry exponentialBackoffRetry =\n+        createExponentialBackoffPolicy(conf);\n+    MultipleLinearRandomRetry multipleLinearRandomRetry =\n+        MultipleLinearRandomRetry.parseCommaSeparated(conf.get(\n+            OzoneConfigKeys.DFS_RATIS_CLIENT_MULTILINEAR_RANDOM_RETRY_POLICY,\n             OzoneConfigKeys.\n-                DFS_RATIS_CLIENT_REQUEST_MAX_RETRIES_DEFAULT);\n-    long retryInterval = conf.getTimeDuration(OzoneConfigKeys.\n-        DFS_RATIS_CLIENT_REQUEST_RETRY_INTERVAL_KEY, OzoneConfigKeys.\n-        DFS_RATIS_CLIENT_REQUEST_RETRY_INTERVAL_DEFAULT\n-        .toIntExact(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS);\n-    TimeDuration sleepDuration =\n-        TimeDuration.valueOf(retryInterval, TimeUnit.MILLISECONDS);\n-    RetryPolicy retryPolicy = RetryPolicies\n-        .retryUpToMaximumCountWithFixedSleep(maxRetryCount, sleepDuration);\n-    return retryPolicy;\n+                DFS_RATIS_CLIENT_MULTILINEAR_RANDOM_RETRY_POLICY_DEFAULT));\n+\n+    long writeTimeout = conf.getTimeDuration(\n+        OzoneConfigKeys.DFS_RATIS_CLIENT_REQUEST_WRITE_TIMEOUT, OzoneConfigKeys.\n+            DFS_RATIS_CLIENT_REQUEST_WRITE_TIMEOUT_DEFAULT\n+            .toIntExact(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS);\n+    long watchTimeout = conf.getTimeDuration(\n+        OzoneConfigKeys.DFS_RATIS_CLIENT_REQUEST_WATCH_TIMEOUT, OzoneConfigKeys.\n+            DFS_RATIS_CLIENT_REQUEST_WATCH_TIMEOUT_DEFAULT\n+            .toIntExact(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS);\n+\n+    return RequestTypeDependentRetryPolicy.newBuilder()\n+        .setRetryPolicy(RaftProtos.RaftClientRequestProto.TypeCase.WRITE,\n+            createExceptionDependentPolicy(exponentialBackoffRetry,\n+                multipleLinearRandomRetry, exponentialBackoffRetry))\n+        .setRetryPolicy(RaftProtos.RaftClientRequestProto.TypeCase.WATCH,\n+            createExceptionDependentPolicy(exponentialBackoffRetry,\n+                multipleLinearRandomRetry, RetryPolicies.noRetry()))\n+        .setTimeout(RaftProtos.RaftClientRequestProto.TypeCase.WRITE,\n+            TimeDuration.valueOf(writeTimeout, TimeUnit.MILLISECONDS))\n+        .setTimeout(RaftProtos.RaftClientRequestProto.TypeCase.WATCH,\n+            TimeDuration.valueOf(watchTimeout, TimeUnit.MILLISECONDS))\n+        .build();\n+  }\n+\n+  private static ExponentialBackoffRetry createExponentialBackoffPolicy(\n+      ConfigurationSource conf) {\n+    long exponentialBaseSleep = conf.getTimeDuration(\n+        OzoneConfigKeys.DFS_RATIS_CLIENT_EXPONENTIAL_BACKOFF_BASE_SLEEP,\n+        OzoneConfigKeys.DFS_RATIS_CLIENT_EXPONENTIAL_BACKOFF_BASE_SLEEP_DEFAULT\n+            .toIntExact(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS);\n+    long exponentialMaxSleep = conf.getTimeDuration(\n+        OzoneConfigKeys.DFS_RATIS_CLIENT_EXPONENTIAL_BACKOFF_MAX_SLEEP,\n+        OzoneConfigKeys.\n+            DFS_RATIS_CLIENT_EXPONENTIAL_BACKOFF_MAX_SLEEP_DEFAULT\n+            .toIntExact(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS);\n+    return ExponentialBackoffRetry.newBuilder()\n+        .setBaseSleepTime(\n+            TimeDuration.valueOf(exponentialBaseSleep, TimeUnit.MILLISECONDS))\n+        .setMaxSleepTime(\n+            TimeDuration.valueOf(exponentialMaxSleep, TimeUnit.MILLISECONDS))\n+        .build();\n+  }\n+\n+  private static ExceptionDependentRetry createExceptionDependentPolicy(\n+      ExponentialBackoffRetry exponentialBackoffRetry,\n+      MultipleLinearRandomRetry multipleLinearRandomRetry,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2NjYwNQ=="}, "originalCommit": {"oid": "cb7802dad9f7c3a3bc369560a2f46b7d6575003b"}, "originalPosition": 294}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg4MDcwMQ==", "bodyText": "Adding NoRetry for AlreadyClosedException was leading to test failures. This exception is generated for closed connections in Ratis. I have removed NoRetry policy for this exception.", "url": "https://github.com/apache/ozone/pull/1005#discussion_r438880701", "createdAt": "2020-06-11T15:38:28Z", "author": {"login": "lokeshj1703"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/ratis/RatisHelper.java", "diffHunk": "@@ -269,23 +282,76 @@ static GrpcTlsConfig createTlsClientConfig(SecurityConfig conf,\n     return tlsConfig;\n   }\n \n-  static RetryPolicy createRetryPolicy(ConfigurationSource conf) {\n-    int maxRetryCount =\n-        conf.getInt(OzoneConfigKeys.DFS_RATIS_CLIENT_REQUEST_MAX_RETRIES_KEY,\n+  public static RetryPolicy createRetryPolicy(ConfigurationSource conf) {\n+    ExponentialBackoffRetry exponentialBackoffRetry =\n+        createExponentialBackoffPolicy(conf);\n+    MultipleLinearRandomRetry multipleLinearRandomRetry =\n+        MultipleLinearRandomRetry.parseCommaSeparated(conf.get(\n+            OzoneConfigKeys.DFS_RATIS_CLIENT_MULTILINEAR_RANDOM_RETRY_POLICY,\n             OzoneConfigKeys.\n-                DFS_RATIS_CLIENT_REQUEST_MAX_RETRIES_DEFAULT);\n-    long retryInterval = conf.getTimeDuration(OzoneConfigKeys.\n-        DFS_RATIS_CLIENT_REQUEST_RETRY_INTERVAL_KEY, OzoneConfigKeys.\n-        DFS_RATIS_CLIENT_REQUEST_RETRY_INTERVAL_DEFAULT\n-        .toIntExact(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS);\n-    TimeDuration sleepDuration =\n-        TimeDuration.valueOf(retryInterval, TimeUnit.MILLISECONDS);\n-    RetryPolicy retryPolicy = RetryPolicies\n-        .retryUpToMaximumCountWithFixedSleep(maxRetryCount, sleepDuration);\n-    return retryPolicy;\n+                DFS_RATIS_CLIENT_MULTILINEAR_RANDOM_RETRY_POLICY_DEFAULT));\n+\n+    long writeTimeout = conf.getTimeDuration(\n+        OzoneConfigKeys.DFS_RATIS_CLIENT_REQUEST_WRITE_TIMEOUT, OzoneConfigKeys.\n+            DFS_RATIS_CLIENT_REQUEST_WRITE_TIMEOUT_DEFAULT\n+            .toIntExact(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS);\n+    long watchTimeout = conf.getTimeDuration(\n+        OzoneConfigKeys.DFS_RATIS_CLIENT_REQUEST_WATCH_TIMEOUT, OzoneConfigKeys.\n+            DFS_RATIS_CLIENT_REQUEST_WATCH_TIMEOUT_DEFAULT\n+            .toIntExact(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS);\n+\n+    return RequestTypeDependentRetryPolicy.newBuilder()\n+        .setRetryPolicy(RaftProtos.RaftClientRequestProto.TypeCase.WRITE,\n+            createExceptionDependentPolicy(exponentialBackoffRetry,\n+                multipleLinearRandomRetry, exponentialBackoffRetry))\n+        .setRetryPolicy(RaftProtos.RaftClientRequestProto.TypeCase.WATCH,\n+            createExceptionDependentPolicy(exponentialBackoffRetry,\n+                multipleLinearRandomRetry, RetryPolicies.noRetry()))\n+        .setTimeout(RaftProtos.RaftClientRequestProto.TypeCase.WRITE,\n+            TimeDuration.valueOf(writeTimeout, TimeUnit.MILLISECONDS))\n+        .setTimeout(RaftProtos.RaftClientRequestProto.TypeCase.WATCH,\n+            TimeDuration.valueOf(watchTimeout, TimeUnit.MILLISECONDS))\n+        .build();\n+  }\n+\n+  private static ExponentialBackoffRetry createExponentialBackoffPolicy(\n+      ConfigurationSource conf) {\n+    long exponentialBaseSleep = conf.getTimeDuration(\n+        OzoneConfigKeys.DFS_RATIS_CLIENT_EXPONENTIAL_BACKOFF_BASE_SLEEP,\n+        OzoneConfigKeys.DFS_RATIS_CLIENT_EXPONENTIAL_BACKOFF_BASE_SLEEP_DEFAULT\n+            .toIntExact(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS);\n+    long exponentialMaxSleep = conf.getTimeDuration(\n+        OzoneConfigKeys.DFS_RATIS_CLIENT_EXPONENTIAL_BACKOFF_MAX_SLEEP,\n+        OzoneConfigKeys.\n+            DFS_RATIS_CLIENT_EXPONENTIAL_BACKOFF_MAX_SLEEP_DEFAULT\n+            .toIntExact(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS);\n+    return ExponentialBackoffRetry.newBuilder()\n+        .setBaseSleepTime(\n+            TimeDuration.valueOf(exponentialBaseSleep, TimeUnit.MILLISECONDS))\n+        .setMaxSleepTime(\n+            TimeDuration.valueOf(exponentialMaxSleep, TimeUnit.MILLISECONDS))\n+        .build();\n+  }\n+\n+  private static ExceptionDependentRetry createExceptionDependentPolicy(\n+      ExponentialBackoffRetry exponentialBackoffRetry,\n+      MultipleLinearRandomRetry multipleLinearRandomRetry,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2NjYwNQ=="}, "originalCommit": {"oid": "cb7802dad9f7c3a3bc369560a2f46b7d6575003b"}, "originalPosition": 294}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTk1NjM1OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/ratis/RatisHelper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNjozOTowNFrOGhTH7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMzo1OToyOVrOGh2NGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2OTUxOA==", "bodyText": "can we add a table defining the exception to retry policy relationship for better understanding?", "url": "https://github.com/apache/ozone/pull/1005#discussion_r437569518", "createdAt": "2020-06-09T16:39:04Z", "author": {"login": "bshashikant"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/ratis/RatisHelper.java", "diffHunk": "@@ -269,23 +282,76 @@ static GrpcTlsConfig createTlsClientConfig(SecurityConfig conf,\n     return tlsConfig;\n   }\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb7802dad9f7c3a3bc369560a2f46b7d6575003b"}, "originalPosition": 227}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE0NDI4MQ==", "bodyText": "Done.", "url": "https://github.com/apache/ozone/pull/1005#discussion_r438144281", "createdAt": "2020-06-10T13:59:29Z", "author": {"login": "lokeshj1703"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/ratis/RatisHelper.java", "diffHunk": "@@ -269,23 +282,76 @@ static GrpcTlsConfig createTlsClientConfig(SecurityConfig conf,\n     return tlsConfig;\n   }\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2OTUxOA=="}, "originalCommit": {"oid": "cb7802dad9f7c3a3bc369560a2f46b7d6575003b"}, "originalPosition": 227}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTk2MzMzOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/OzoneConfigKeys.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNjo0MDo1M1rOGhTMOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMzo1OTozNlrOGh2NeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU3MDYxOA==", "bodyText": "i guess it would be better to define these configs in RatisClientConfig instead of defining here.", "url": "https://github.com/apache/ozone/pull/1005#discussion_r437570618", "createdAt": "2020-06-09T16:40:53Z", "author": {"login": "bshashikant"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/OzoneConfigKeys.java", "diffHunk": "@@ -281,15 +281,33 @@\n \n   public static final String DFS_CONTAINER_RATIS_DATANODE_STORAGE_DIR =\n       \"dfs.container.ratis.datanode.storage.dir\";\n-  public static final String DFS_RATIS_CLIENT_REQUEST_MAX_RETRIES_KEY =\n-      ScmConfigKeys.DFS_RATIS_CLIENT_REQUEST_MAX_RETRIES_KEY;\n-  public static final int DFS_RATIS_CLIENT_REQUEST_MAX_RETRIES_DEFAULT =\n-      ScmConfigKeys.DFS_RATIS_CLIENT_REQUEST_MAX_RETRIES_DEFAULT;\n-  public static final String DFS_RATIS_CLIENT_REQUEST_RETRY_INTERVAL_KEY =\n-      ScmConfigKeys.DFS_RATIS_CLIENT_REQUEST_RETRY_INTERVAL_KEY;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb7802dad9f7c3a3bc369560a2f46b7d6575003b"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE0NDM3Ng==", "bodyText": "Done.", "url": "https://github.com/apache/ozone/pull/1005#discussion_r438144376", "createdAt": "2020-06-10T13:59:36Z", "author": {"login": "lokeshj1703"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/OzoneConfigKeys.java", "diffHunk": "@@ -281,15 +281,33 @@\n \n   public static final String DFS_CONTAINER_RATIS_DATANODE_STORAGE_DIR =\n       \"dfs.container.ratis.datanode.storage.dir\";\n-  public static final String DFS_RATIS_CLIENT_REQUEST_MAX_RETRIES_KEY =\n-      ScmConfigKeys.DFS_RATIS_CLIENT_REQUEST_MAX_RETRIES_KEY;\n-  public static final int DFS_RATIS_CLIENT_REQUEST_MAX_RETRIES_DEFAULT =\n-      ScmConfigKeys.DFS_RATIS_CLIENT_REQUEST_MAX_RETRIES_DEFAULT;\n-  public static final String DFS_RATIS_CLIENT_REQUEST_RETRY_INTERVAL_KEY =\n-      ScmConfigKeys.DFS_RATIS_CLIENT_REQUEST_RETRY_INTERVAL_KEY;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU3MDYxOA=="}, "originalCommit": {"oid": "cb7802dad9f7c3a3bc369560a2f46b7d6575003b"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4214, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}