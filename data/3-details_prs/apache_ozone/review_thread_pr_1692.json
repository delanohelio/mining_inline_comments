{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM3MjkzNzk4", "number": 1692, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMzowOTozOFrOFEkpDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjoxOTo0MVrOFFEPbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMzM4OTU3OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/protocol/OzoneManagerProtocol.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMzowOTozOFrOIEuvbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNjowNToxM1rOIFBLFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgzMTAyMw==", "bodyText": "Please also document this javadoc for this method.", "url": "https://github.com/apache/ozone/pull/1692#discussion_r541831023", "createdAt": "2020-12-13T03:09:38Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/protocol/OzoneManagerProtocol.java", "diffHunk": "@@ -602,4 +604,12 @@ default long prepareOzoneManager(\n       throws IOException {\n     return -1;\n   }\n+\n+  default PrepareStatusResponse getOzoneManagerPrepareStatus(long txnId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "331c4af46093ba3ca4d640846d285474ce0746ba"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEzMzAxNA==", "bodyText": "Fixed.", "url": "https://github.com/apache/ozone/pull/1692#discussion_r542133014", "createdAt": "2020-12-14T06:05:13Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/protocol/OzoneManagerProtocol.java", "diffHunk": "@@ -602,4 +604,12 @@ default long prepareOzoneManager(\n       throws IOException {\n     return -1;\n   }\n+\n+  default PrepareStatusResponse getOzoneManagerPrepareStatus(long txnId)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgzMTAyMw=="}, "originalCommit": {"oid": "331c4af46093ba3ca4d640846d285474ce0746ba"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMzM5MDEwOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/protocolPB/OzoneManagerProtocolClientSideTranslatorPB.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMzowOTo1MFrOIEuvpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNjowNToyMlrOIFBLWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgzMTA3Nw==", "bodyText": "Can you add the @OverRide here that will let us know this is a protocol method?", "url": "https://github.com/apache/ozone/pull/1692#discussion_r541831077", "createdAt": "2020-12-13T03:09:50Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/protocolPB/OzoneManagerProtocolClientSideTranslatorPB.java", "diffHunk": "@@ -1574,6 +1574,17 @@ public long prepareOzoneManager(\n     return prepareResponse.getTxnID();\n   }\n \n+  public PrepareStatusResponse getOzoneManagerPrepareStatus(long txnId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "331c4af46093ba3ca4d640846d285474ce0746ba"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEzMzA4MA==", "bodyText": "Fixed.", "url": "https://github.com/apache/ozone/pull/1692#discussion_r542133080", "createdAt": "2020-12-14T06:05:22Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/protocolPB/OzoneManagerProtocolClientSideTranslatorPB.java", "diffHunk": "@@ -1574,6 +1574,17 @@ public long prepareOzoneManager(\n     return prepareResponse.getTxnID();\n   }\n \n+  public PrepareStatusResponse getOzoneManagerPrepareStatus(long txnId)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgzMTA3Nw=="}, "originalCommit": {"oid": "331c4af46093ba3ca4d640846d285474ce0746ba"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMzM5OTE1OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/admin/om/PrepareSubCommand.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMzoxNjozMFrOIEuzZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwOTozODoyMlrOIFHu3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgzMjAzOA==", "bodyText": "As this is the command for admin users, can we print out this message instead of throwing an exception? That will be more friendly to users.", "url": "https://github.com/apache/ozone/pull/1692#discussion_r541832038", "createdAt": "2020-12-13T03:16:30Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/admin/om/PrepareSubCommand.java", "diffHunk": "@@ -67,13 +78,85 @@\n   )\n   private long txnApplyCheckIntervalSeconds;\n \n+  @CommandLine.Option(\n+      names = {\"-pct\", \"--prepare-check-interval\"},\n+      description = \"Time in SECONDS to wait between successive checks for OM\" +\n+          \" preparation.\",\n+      defaultValue = \"10\",\n+      hidden = true\n+  )\n+  private long prepareCheckInterval;\n+\n+  @CommandLine.Option(\n+      names = {\"-pt\", \"--prepare-timeout\"},\n+      description = \"Max time in SECONDS to wait for all OMs to be prepared\",\n+      defaultValue = \"300\",\n+      hidden = true\n+  )\n+  private long prepareTimeOut;\n+\n   @Override\n   public Void call() throws Exception {\n     OzoneManagerProtocol client = parent.createOmClient(omServiceId);\n     long prepareTxnId = client.prepareOzoneManager(txnApplyWaitTimeSeconds,\n         txnApplyCheckIntervalSeconds);\n     System.out.println(\"Ozone Manager Prepare Request successfully returned \" +\n-        \"with Txn Id \" + prepareTxnId);\n+        \"with Transaction Id : [\" + prepareTxnId + \"].\");\n+\n+    Map<String, Boolean> omPreparedStatusMap = new HashMap<>();\n+    Set<String> omHosts = getOmHostsFromConfig(\n+        parent.getParent().getOzoneConf(), omServiceId);\n+    omHosts.forEach(h -> omPreparedStatusMap.put(h, false));\n+    Duration pTimeout = Duration.of(prepareTimeOut, ChronoUnit.SECONDS);\n+    Duration pInterval = Duration.of(prepareCheckInterval, ChronoUnit.SECONDS);\n+\n+    System.out.println();\n+    System.out.println(\"Checking individual OM instances for prepare request \" +\n+        \"completion...\");\n+    long endTime = System.currentTimeMillis() + pTimeout.toMillis();\n+    int expectedNumPreparedOms = omPreparedStatusMap.size();\n+    int currentNumPreparedOms = 0;\n+    while (System.currentTimeMillis() < endTime &&\n+        currentNumPreparedOms < expectedNumPreparedOms) {\n+      for (Map.Entry<String, Boolean> e : omPreparedStatusMap.entrySet()) {\n+        if (!e.getValue()) {\n+          String omHost = e.getKey();\n+          try (OzoneManagerProtocol singleOmClient =\n+                    parent.createOmClient(omServiceId, omHost, false)) {\n+            PrepareStatusResponse response =\n+                singleOmClient.getOzoneManagerPrepareStatus(prepareTxnId);\n+            PrepareStatus status = response.getStatus();\n+            System.out.println(\"OM : [\" + omHost + \"], Prepare \" +\n+                \"Status : [\" + status.name() + \"], Current Transaction Id : [\" +\n+                response.getCurrentTxnIndex() + \"]\");\n+            if (status.equals(PREPARE_COMPLETED)) {\n+              e.setValue(true);\n+              currentNumPreparedOms++;\n+            }\n+          } catch (IOException ioEx) {\n+            System.out.println(\"Exception while checking preparation \" +\n+                \"completeness for [\" + omHost +\n+                \"], Error : [\" + ioEx.getMessage() + \"]\");\n+          }\n+        }\n+      }\n+      if (currentNumPreparedOms < expectedNumPreparedOms) {\n+        System.out.println(\"Waiting for \" + prepareCheckInterval +\n+            \" seconds before retrying...\");\n+        Thread.sleep(pInterval.toMillis());\n+      }\n+    }\n+    if (currentNumPreparedOms < expectedNumPreparedOms) {\n+      throw new Exception(\"OM Preparation failed since all OMs are not \" +\n+          \"prepared yet.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "331c4af46093ba3ca4d640846d285474ce0746ba"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEzMzU5NA==", "bodyText": "Thanks for the review @linyiqun. I believe throwing an exception is better since the return code for the command will be non-zero. This will help in higher level applications automating this call figure out the result of the command decisively.\n\nException while checking preparation completeness for [om2], Error : [Invalid host name: local host is: (unknown); >destination host is: \"om2\":9862; java.net.UnknownHostException; For more details see:  >http://wiki.apache.org/hadoop/UnknownHost]\nWaiting for 10 seconds before retrying...\nOM Preparation failed since all OMs are not prepared yet.\nbash-4.2$ echo $?\n255", "url": "https://github.com/apache/ozone/pull/1692#discussion_r542133594", "createdAt": "2020-12-14T06:06:55Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/admin/om/PrepareSubCommand.java", "diffHunk": "@@ -67,13 +78,85 @@\n   )\n   private long txnApplyCheckIntervalSeconds;\n \n+  @CommandLine.Option(\n+      names = {\"-pct\", \"--prepare-check-interval\"},\n+      description = \"Time in SECONDS to wait between successive checks for OM\" +\n+          \" preparation.\",\n+      defaultValue = \"10\",\n+      hidden = true\n+  )\n+  private long prepareCheckInterval;\n+\n+  @CommandLine.Option(\n+      names = {\"-pt\", \"--prepare-timeout\"},\n+      description = \"Max time in SECONDS to wait for all OMs to be prepared\",\n+      defaultValue = \"300\",\n+      hidden = true\n+  )\n+  private long prepareTimeOut;\n+\n   @Override\n   public Void call() throws Exception {\n     OzoneManagerProtocol client = parent.createOmClient(omServiceId);\n     long prepareTxnId = client.prepareOzoneManager(txnApplyWaitTimeSeconds,\n         txnApplyCheckIntervalSeconds);\n     System.out.println(\"Ozone Manager Prepare Request successfully returned \" +\n-        \"with Txn Id \" + prepareTxnId);\n+        \"with Transaction Id : [\" + prepareTxnId + \"].\");\n+\n+    Map<String, Boolean> omPreparedStatusMap = new HashMap<>();\n+    Set<String> omHosts = getOmHostsFromConfig(\n+        parent.getParent().getOzoneConf(), omServiceId);\n+    omHosts.forEach(h -> omPreparedStatusMap.put(h, false));\n+    Duration pTimeout = Duration.of(prepareTimeOut, ChronoUnit.SECONDS);\n+    Duration pInterval = Duration.of(prepareCheckInterval, ChronoUnit.SECONDS);\n+\n+    System.out.println();\n+    System.out.println(\"Checking individual OM instances for prepare request \" +\n+        \"completion...\");\n+    long endTime = System.currentTimeMillis() + pTimeout.toMillis();\n+    int expectedNumPreparedOms = omPreparedStatusMap.size();\n+    int currentNumPreparedOms = 0;\n+    while (System.currentTimeMillis() < endTime &&\n+        currentNumPreparedOms < expectedNumPreparedOms) {\n+      for (Map.Entry<String, Boolean> e : omPreparedStatusMap.entrySet()) {\n+        if (!e.getValue()) {\n+          String omHost = e.getKey();\n+          try (OzoneManagerProtocol singleOmClient =\n+                    parent.createOmClient(omServiceId, omHost, false)) {\n+            PrepareStatusResponse response =\n+                singleOmClient.getOzoneManagerPrepareStatus(prepareTxnId);\n+            PrepareStatus status = response.getStatus();\n+            System.out.println(\"OM : [\" + omHost + \"], Prepare \" +\n+                \"Status : [\" + status.name() + \"], Current Transaction Id : [\" +\n+                response.getCurrentTxnIndex() + \"]\");\n+            if (status.equals(PREPARE_COMPLETED)) {\n+              e.setValue(true);\n+              currentNumPreparedOms++;\n+            }\n+          } catch (IOException ioEx) {\n+            System.out.println(\"Exception while checking preparation \" +\n+                \"completeness for [\" + omHost +\n+                \"], Error : [\" + ioEx.getMessage() + \"]\");\n+          }\n+        }\n+      }\n+      if (currentNumPreparedOms < expectedNumPreparedOms) {\n+        System.out.println(\"Waiting for \" + prepareCheckInterval +\n+            \" seconds before retrying...\");\n+        Thread.sleep(pInterval.toMillis());\n+      }\n+    }\n+    if (currentNumPreparedOms < expectedNumPreparedOms) {\n+      throw new Exception(\"OM Preparation failed since all OMs are not \" +\n+          \"prepared yet.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgzMjAzOA=="}, "originalCommit": {"oid": "331c4af46093ba3ca4d640846d285474ce0746ba"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI0MDQ3OQ==", "bodyText": "Okay, make sense.", "url": "https://github.com/apache/ozone/pull/1692#discussion_r542240479", "createdAt": "2020-12-14T09:38:22Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/admin/om/PrepareSubCommand.java", "diffHunk": "@@ -67,13 +78,85 @@\n   )\n   private long txnApplyCheckIntervalSeconds;\n \n+  @CommandLine.Option(\n+      names = {\"-pct\", \"--prepare-check-interval\"},\n+      description = \"Time in SECONDS to wait between successive checks for OM\" +\n+          \" preparation.\",\n+      defaultValue = \"10\",\n+      hidden = true\n+  )\n+  private long prepareCheckInterval;\n+\n+  @CommandLine.Option(\n+      names = {\"-pt\", \"--prepare-timeout\"},\n+      description = \"Max time in SECONDS to wait for all OMs to be prepared\",\n+      defaultValue = \"300\",\n+      hidden = true\n+  )\n+  private long prepareTimeOut;\n+\n   @Override\n   public Void call() throws Exception {\n     OzoneManagerProtocol client = parent.createOmClient(omServiceId);\n     long prepareTxnId = client.prepareOzoneManager(txnApplyWaitTimeSeconds,\n         txnApplyCheckIntervalSeconds);\n     System.out.println(\"Ozone Manager Prepare Request successfully returned \" +\n-        \"with Txn Id \" + prepareTxnId);\n+        \"with Transaction Id : [\" + prepareTxnId + \"].\");\n+\n+    Map<String, Boolean> omPreparedStatusMap = new HashMap<>();\n+    Set<String> omHosts = getOmHostsFromConfig(\n+        parent.getParent().getOzoneConf(), omServiceId);\n+    omHosts.forEach(h -> omPreparedStatusMap.put(h, false));\n+    Duration pTimeout = Duration.of(prepareTimeOut, ChronoUnit.SECONDS);\n+    Duration pInterval = Duration.of(prepareCheckInterval, ChronoUnit.SECONDS);\n+\n+    System.out.println();\n+    System.out.println(\"Checking individual OM instances for prepare request \" +\n+        \"completion...\");\n+    long endTime = System.currentTimeMillis() + pTimeout.toMillis();\n+    int expectedNumPreparedOms = omPreparedStatusMap.size();\n+    int currentNumPreparedOms = 0;\n+    while (System.currentTimeMillis() < endTime &&\n+        currentNumPreparedOms < expectedNumPreparedOms) {\n+      for (Map.Entry<String, Boolean> e : omPreparedStatusMap.entrySet()) {\n+        if (!e.getValue()) {\n+          String omHost = e.getKey();\n+          try (OzoneManagerProtocol singleOmClient =\n+                    parent.createOmClient(omServiceId, omHost, false)) {\n+            PrepareStatusResponse response =\n+                singleOmClient.getOzoneManagerPrepareStatus(prepareTxnId);\n+            PrepareStatus status = response.getStatus();\n+            System.out.println(\"OM : [\" + omHost + \"], Prepare \" +\n+                \"Status : [\" + status.name() + \"], Current Transaction Id : [\" +\n+                response.getCurrentTxnIndex() + \"]\");\n+            if (status.equals(PREPARE_COMPLETED)) {\n+              e.setValue(true);\n+              currentNumPreparedOms++;\n+            }\n+          } catch (IOException ioEx) {\n+            System.out.println(\"Exception while checking preparation \" +\n+                \"completeness for [\" + omHost +\n+                \"], Error : [\" + ioEx.getMessage() + \"]\");\n+          }\n+        }\n+      }\n+      if (currentNumPreparedOms < expectedNumPreparedOms) {\n+        System.out.println(\"Waiting for \" + prepareCheckInterval +\n+            \" seconds before retrying...\");\n+        Thread.sleep(pInterval.toMillis());\n+      }\n+    }\n+    if (currentNumPreparedOms < expectedNumPreparedOms) {\n+      throw new Exception(\"OM Preparation failed since all OMs are not \" +\n+          \"prepared yet.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgzMjAzOA=="}, "originalCommit": {"oid": "331c4af46093ba3ca4d640846d285474ce0746ba"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODQ5MzA4OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/interface-client/src/main/proto/OmClientProtocol.proto", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjowNToxN1rOIFXzyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNzozMzoxN1rOIFb-Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwMzg4MA==", "bodyText": "I'm a bit confused on the currentTxnIndex field. If this is really the current transaction index of the system, that will always exist, so why would that be optional? If it is instead being used as the prepare index, it makes sense that it would be optional and omitted if the OM is not prepared, but in that case we should probably change the name to preparedIndex or something like that.\nAssuming this is the prepare index, we should probably document what is expected of this field in relation to the different prepareStatuses. This was my thought but let me know what you think:\n\nPREPARE_NOT_STARTED -> prepare index empty\nPREPARE_IN_PROGRESS -> prepare index present, but this is the index we are waiting to be prepared on (index of the prepare request)\nPREPARE_COMPLETED -> OM is prepared at the prepare index.", "url": "https://github.com/apache/ozone/pull/1692#discussion_r542503880", "createdAt": "2020-12-14T16:05:17Z", "author": {"login": "errose28"}, "path": "hadoop-ozone/interface-client/src/main/proto/OmClientProtocol.proto", "diffHunk": "@@ -1091,6 +1094,23 @@ message PrepareResponse {\n     required uint64 txnID = 1;\n }\n \n+message PrepareStatusRequest {\n+    required uint64 txnID = 1;\n+}\n+\n+message PrepareStatusResponse {\n+    enum PrepareStatus {\n+        // TODO\n+        // HDDS-4569 may introduce new states here, like marker file found\n+        // but with different txn id. We can add them as make sense.\n+        PREPARE_NOT_STARTED = 1;\n+        PREPARE_IN_PROGRESS = 2;\n+        PREPARE_COMPLETED = 3;\n+    }\n+    required PrepareStatus status = 1;\n+    optional uint64 currentTxnIndex = 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b3a24fde634a8175bc0bbcceb682a25423ff4"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU2NDQ3Mw==", "bodyText": "@errose28 Yes, I agree. Since I expect some changes in the status enum fields as well as the logic in OzoneManagerRequestHandler#getPrepareStatus (usage of marker file vs OM transaction info), I believe we can punt the documentation to a follow up patch after HDDS-4569. That is the reason I have not added an integration test as well.", "url": "https://github.com/apache/ozone/pull/1692#discussion_r542564473", "createdAt": "2020-12-14T17:23:06Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/interface-client/src/main/proto/OmClientProtocol.proto", "diffHunk": "@@ -1091,6 +1094,23 @@ message PrepareResponse {\n     required uint64 txnID = 1;\n }\n \n+message PrepareStatusRequest {\n+    required uint64 txnID = 1;\n+}\n+\n+message PrepareStatusResponse {\n+    enum PrepareStatus {\n+        // TODO\n+        // HDDS-4569 may introduce new states here, like marker file found\n+        // but with different txn id. We can add them as make sense.\n+        PREPARE_NOT_STARTED = 1;\n+        PREPARE_IN_PROGRESS = 2;\n+        PREPARE_COMPLETED = 3;\n+    }\n+    required PrepareStatus status = 1;\n+    optional uint64 currentTxnIndex = 2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwMzg4MA=="}, "originalCommit": {"oid": "4e4b3a24fde634a8175bc0bbcceb682a25423ff4"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU3MjExMA==", "bodyText": "Ok makes sense. Good for me to keep in mind while doing HDDS-4569.", "url": "https://github.com/apache/ozone/pull/1692#discussion_r542572110", "createdAt": "2020-12-14T17:33:17Z", "author": {"login": "errose28"}, "path": "hadoop-ozone/interface-client/src/main/proto/OmClientProtocol.proto", "diffHunk": "@@ -1091,6 +1094,23 @@ message PrepareResponse {\n     required uint64 txnID = 1;\n }\n \n+message PrepareStatusRequest {\n+    required uint64 txnID = 1;\n+}\n+\n+message PrepareStatusResponse {\n+    enum PrepareStatus {\n+        // TODO\n+        // HDDS-4569 may introduce new states here, like marker file found\n+        // but with different txn id. We can add them as make sense.\n+        PREPARE_NOT_STARTED = 1;\n+        PREPARE_IN_PROGRESS = 2;\n+        PREPARE_COMPLETED = 3;\n+    }\n+    required PrepareStatus status = 1;\n+    optional uint64 currentTxnIndex = 2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwMzg4MA=="}, "originalCommit": {"oid": "4e4b3a24fde634a8175bc0bbcceb682a25423ff4"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODUzNTIyOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/protocolPB/OzoneManagerRequestHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjoxMzozMFrOIFYMjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNzoyNDoyNVrOIFbkQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUxMDIyMA==", "bodyText": "I think that should be != in the log message. Also can we add some more context to this message, like \"Received prepare status request while last txn index <index> != last snapshot index <snapshot index>\".", "url": "https://github.com/apache/ozone/pull/1692#discussion_r542510220", "createdAt": "2020-12-14T16:13:30Z", "author": {"login": "errose28"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/protocolPB/OzoneManagerRequestHandler.java", "diffHunk": "@@ -623,6 +633,24 @@ private FinalizeUpgradeProgressResponse reportUpgradeProgress(\n         .build();\n   }\n \n+  private PrepareStatusResponse getPrepareStatus(PrepareStatusRequest request)\n+      throws IOException {\n+    // TODO After HDDS-4569,\n+    // When there is a global \"prepared\" state in OM, we can return\n+    // PREPARE_NOT_STARTED instead of PREPARE_IN_PROGRESS appropriately.\n+    PrepareStatus prepareStatus = null;\n+    long txnID = request.getTxnID();\n+    long ratisSnapshotIndex = impl.getRatisSnapshotIndex();\n+    if (ratisSnapshotIndex != txnID) {\n+      LOG.info(\"Last Txn Index = {}\", ratisSnapshotIndex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b3a24fde634a8175bc0bbcceb682a25423ff4"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU2NTQ0MQ==", "bodyText": "Yes, I can add that log line.", "url": "https://github.com/apache/ozone/pull/1692#discussion_r542565441", "createdAt": "2020-12-14T17:24:25Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/protocolPB/OzoneManagerRequestHandler.java", "diffHunk": "@@ -623,6 +633,24 @@ private FinalizeUpgradeProgressResponse reportUpgradeProgress(\n         .build();\n   }\n \n+  private PrepareStatusResponse getPrepareStatus(PrepareStatusRequest request)\n+      throws IOException {\n+    // TODO After HDDS-4569,\n+    // When there is a global \"prepared\" state in OM, we can return\n+    // PREPARE_NOT_STARTED instead of PREPARE_IN_PROGRESS appropriately.\n+    PrepareStatus prepareStatus = null;\n+    long txnID = request.getTxnID();\n+    long ratisSnapshotIndex = impl.getRatisSnapshotIndex();\n+    if (ratisSnapshotIndex != txnID) {\n+      LOG.info(\"Last Txn Index = {}\", ratisSnapshotIndex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUxMDIyMA=="}, "originalCommit": {"oid": "4e4b3a24fde634a8175bc0bbcceb682a25423ff4"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODU2Njg3OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/protocolPB/OzoneManagerRequestHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjoxOTo0MVrOIFYfGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNzoyOToyMVrOIFbzQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUxNDk2OQ==", "bodyText": "Just for clarification as I am working on HDDS-4569, is this the expected interpretations of status?\nflag on && (txn index == snapshot index) -> PREPARE_COMPLETED\nflag on && (txn index != snapshot index) -> PREPARE_IN_PROGRESS\nflag off  -> PREPARE_NOT_STARTED", "url": "https://github.com/apache/ozone/pull/1692#discussion_r542514969", "createdAt": "2020-12-14T16:19:41Z", "author": {"login": "errose28"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/protocolPB/OzoneManagerRequestHandler.java", "diffHunk": "@@ -623,6 +633,24 @@ private FinalizeUpgradeProgressResponse reportUpgradeProgress(\n         .build();\n   }\n \n+  private PrepareStatusResponse getPrepareStatus(PrepareStatusRequest request)\n+      throws IOException {\n+    // TODO After HDDS-4569,\n+    // When there is a global \"prepared\" state in OM, we can return\n+    // PREPARE_NOT_STARTED instead of PREPARE_IN_PROGRESS appropriately.\n+    PrepareStatus prepareStatus = null;\n+    long txnID = request.getTxnID();\n+    long ratisSnapshotIndex = impl.getRatisSnapshotIndex();\n+    if (ratisSnapshotIndex != txnID) {\n+      LOG.info(\"Last Txn Index = {}\", ratisSnapshotIndex);\n+      prepareStatus =  PREPARE_IN_PROGRESS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b3a24fde634a8175bc0bbcceb682a25423ff4"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU2OTI4Mw==", "bodyText": "As mentioned in an earlier comment, this can undergo some minor changes after HDDS-4569. Currently, in my mind, an OM in prepared flag disabled state (state maintained in global OM level) does not know about a OmPrepareRequest (think slow follower). When the flag has been enabled but still is waiting for the flush, then it is likely in PREPARE_IN_PROGRESS mode. When the flag is enabled, and the flush is done (OMPR apply txn is fully complete), then we are expected to be PREPARE_COMPLETED state. Of course there are some edge cases that can be caused by subsequent OMPrepareRequests coming in the pipeline, but I don't expect them to be a big problem to the fundamental problem the prepare operation is trying to solve.", "url": "https://github.com/apache/ozone/pull/1692#discussion_r542569283", "createdAt": "2020-12-14T17:29:21Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/protocolPB/OzoneManagerRequestHandler.java", "diffHunk": "@@ -623,6 +633,24 @@ private FinalizeUpgradeProgressResponse reportUpgradeProgress(\n         .build();\n   }\n \n+  private PrepareStatusResponse getPrepareStatus(PrepareStatusRequest request)\n+      throws IOException {\n+    // TODO After HDDS-4569,\n+    // When there is a global \"prepared\" state in OM, we can return\n+    // PREPARE_NOT_STARTED instead of PREPARE_IN_PROGRESS appropriately.\n+    PrepareStatus prepareStatus = null;\n+    long txnID = request.getTxnID();\n+    long ratisSnapshotIndex = impl.getRatisSnapshotIndex();\n+    if (ratisSnapshotIndex != txnID) {\n+      LOG.info(\"Last Txn Index = {}\", ratisSnapshotIndex);\n+      prepareStatus =  PREPARE_IN_PROGRESS;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUxNDk2OQ=="}, "originalCommit": {"oid": "4e4b3a24fde634a8175bc0bbcceb682a25423ff4"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4607, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}