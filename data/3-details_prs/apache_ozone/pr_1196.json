{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3Njc1ODI4", "number": 1196, "title": "HDDS-3955. Unable to list intermediate paths on keys created using S3G.", "bodyText": "What changes were proposed in this pull request?\nKeys created via the S3 Gateway currently use the createKey OM API to create the ozone key. Hence, when using a hdfs client to list intermediate directories in the key, OM returns key not found error. This was encountered while using fluentd to write Hive logs to Ozone via the s3 gateway.\nAdded a new config in OM to control the behavior of key create to create intermediate directories or not. In this way, keys created via ozone S3G can be accessed through fs API.\nWhat is the link to the Apache JIRA\nhttps://issues.apache.org/jira/browse/HDDS-3955\nHow was this patch tested?\nAdded UT and IT.", "createdAt": "2020-07-10T22:59:57Z", "url": "https://github.com/apache/ozone/pull/1196", "merged": true, "mergeCommit": {"oid": "715aed2d158d2c6708af8b6a9b8270766103ee52"}, "closed": true, "closedAt": "2020-07-18T17:15:46Z", "author": {"login": "bharatviswa504"}, "timelineItems": {"totalCount": 51, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc0jtqlAFqTQ0NzM5Mjg4MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc2LsZ5gFqTQ1MTA3MDMwOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3MzkyODgx", "url": "https://github.com/apache/ozone/pull/1196#pullrequestreview-447392881", "createdAt": "2020-07-13T16:06:42Z", "commit": {"oid": "a0aa715d900398d19f68b78ebf9e6686c1e6ca0b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjowNjo0MlrOGwvbYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjowNjo0MlrOGwvbYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc2MTg4OQ==", "bodyText": "used via FileSystem API (reword comment).", "url": "https://github.com/apache/ozone/pull/1196#discussion_r453761889", "createdAt": "2020-07-13T16:06:42Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/OMConfigKeys.java", "diffHunk": "@@ -239,4 +239,11 @@ private OMConfigKeys() {\n           \"ozone.om.keyname.character.check.enabled\";\n   public static final boolean OZONE_OM_KEYNAME_CHARACTER_CHECK_ENABLED_DEFAULT =\n           false;\n+\n+  // This config needs to be enabled, when S3G created objects will be used\n+  // FileSystem.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0aa715d900398d19f68b78ebf9e6686c1e6ca0b"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NDA4NTY1", "url": "https://github.com/apache/ozone/pull/1196#pullrequestreview-447408565", "createdAt": "2020-07-13T16:26:29Z", "commit": {"oid": "a0aa715d900398d19f68b78ebf9e6686c1e6ca0b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjoyNjozMFrOGwwLng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjoyNjozMFrOGwwLng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc3NDIzOA==", "bodyText": "Let's make the exception message slightly more descriptive to explain what is really going on. We can mention that createIntermediateDirs behavior is enabled and hence / has special interpretation.", "url": "https://github.com/apache/ozone/pull/1196#discussion_r453774238", "createdAt": "2020-07-13T16:26:30Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyCreateRequest.java", "diffHunk": "@@ -221,8 +233,45 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       OmBucketInfo bucketInfo = omMetadataManager.getBucketTable().get(\n           omMetadataManager.getBucketKey(volumeName, bucketName));\n \n+      boolean createIntermediateDir =\n+          ozoneManager.getConfiguration().getBoolean(\n+              OZONE_OM_CREATE_INTERMEDIATE_DIRECTORY,\n+              OZONE_OM_CREATE_INTERMEDIATE_DIRECTORY_DEFAULT);\n+\n+      // If FILE_EXISTS we just override like how we used to do for Key Create.\n+      List< OzoneAcl > inheritAcls;\n+      if (createIntermediateDir) {\n+        OMFileRequest.OMPathInfo pathInfo =\n+            OMFileRequest.verifyFilesInPath(omMetadataManager, volumeName,\n+                bucketName, keyName, Paths.get(keyName));\n+        OMFileRequest.OMDirectoryResult omDirectoryResult =\n+            pathInfo.getDirectoryResult();\n+        inheritAcls = pathInfo.getAcls();\n+\n+        // Check if a file or directory exists with same key name.\n+        if (omDirectoryResult == DIRECTORY_EXISTS) {\n+          throw new OMException(\"Can not write to directory: \" + keyName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0aa715d900398d19f68b78ebf9e6686c1e6ca0b"}, "originalPosition": 70}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NDEwNDE2", "url": "https://github.com/apache/ozone/pull/1196#pullrequestreview-447410416", "createdAt": "2020-07-13T16:28:40Z", "commit": {"oid": "a0aa715d900398d19f68b78ebf9e6686c1e6ca0b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjoyODo0MFrOGwwRag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjoyODo0MFrOGwwRag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc3NTcyMg==", "bodyText": "@bharatviswa504 , one q. We are adding intermediate cache entries right away instead of at the end on success. Could this be a potential issue on the failure path?", "url": "https://github.com/apache/ozone/pull/1196#discussion_r453775722", "createdAt": "2020-07-13T16:28:40Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyCreateRequest.java", "diffHunk": "@@ -221,8 +233,45 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       OmBucketInfo bucketInfo = omMetadataManager.getBucketTable().get(\n           omMetadataManager.getBucketKey(volumeName, bucketName));\n \n+      boolean createIntermediateDir =\n+          ozoneManager.getConfiguration().getBoolean(\n+              OZONE_OM_CREATE_INTERMEDIATE_DIRECTORY,\n+              OZONE_OM_CREATE_INTERMEDIATE_DIRECTORY_DEFAULT);\n+\n+      // If FILE_EXISTS we just override like how we used to do for Key Create.\n+      List< OzoneAcl > inheritAcls;\n+      if (createIntermediateDir) {\n+        OMFileRequest.OMPathInfo pathInfo =\n+            OMFileRequest.verifyFilesInPath(omMetadataManager, volumeName,\n+                bucketName, keyName, Paths.get(keyName));\n+        OMFileRequest.OMDirectoryResult omDirectoryResult =\n+            pathInfo.getDirectoryResult();\n+        inheritAcls = pathInfo.getAcls();\n+\n+        // Check if a file or directory exists with same key name.\n+        if (omDirectoryResult == DIRECTORY_EXISTS) {\n+          throw new OMException(\"Can not write to directory: \" + keyName,\n+              NOT_A_FILE);\n+        } else\n+          if (omDirectoryResult == FILE_EXISTS_IN_GIVENPATH) {\n+            throw new OMException(\"Can not create file: \" + keyName +\n+                \" as there is already file in the given path\", NOT_A_FILE);\n+          }\n+\n+        missingParentInfos = OMDirectoryCreateRequest\n+            .getAllParentInfo(ozoneManager, keyArgs,\n+                pathInfo.getMissingParents(), inheritAcls, trxnLogIndex);\n+\n+        // Add cache entries for the prefix directories.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0aa715d900398d19f68b78ebf9e6686c1e6ca0b"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NDE1MTEx", "url": "https://github.com/apache/ozone/pull/1196#pullrequestreview-447415111", "createdAt": "2020-07-13T16:34:47Z", "commit": {"oid": "a0aa715d900398d19f68b78ebf9e6686c1e6ca0b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjozNDo0OFrOGwwg2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjozNDo0OFrOGwwg2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc3OTY3Mg==", "bodyText": "Can we change this to fs.getFileStatus(keypath) so that returns status.isDir() ?", "url": "https://github.com/apache/ozone/pull/1196#discussion_r453779672", "createdAt": "2020-07-13T16:34:48Z", "author": {"login": "mukul1987"}, "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/request/key/TestOMKeyCreateRequest.java", "diffHunk": "@@ -328,6 +342,73 @@ private OMRequest createKeyRequest(boolean isMultipartKey, int partNumber) {\n         .setCmdType(OzoneManagerProtocolProtos.Type.CreateKey)\n         .setClientId(UUID.randomUUID().toString())\n         .setCreateKeyRequest(createKeyRequest).build();\n+  }\n+\n+  @Test\n+  public void testKeyCreateWithIntermediateDir() throws Exception {\n+\n+    String keyName = \"a/b/c/file1\";\n+    OMRequest omRequest = createKeyRequest(false, 0, keyName);\n+\n+    OzoneConfiguration configuration = new OzoneConfiguration();\n+    configuration.setBoolean(OZONE_OM_CREATE_INTERMEDIATE_DIRECTORY, true);\n+    when(ozoneManager.getConfiguration()).thenReturn(configuration);\n+    OMKeyCreateRequest omKeyCreateRequest = new OMKeyCreateRequest(omRequest);\n+\n+    omRequest = omKeyCreateRequest.preExecute(ozoneManager);\n+\n+    omKeyCreateRequest = new OMKeyCreateRequest(omRequest);\n+\n+    // Add volume and bucket entries to DB.\n+    addVolumeAndBucketToDB(volumeName, bucketName,\n+        omMetadataManager);\n+\n+    OMClientResponse omClientResponse =\n+        omKeyCreateRequest.validateAndUpdateCache(ozoneManager,\n+        100L, ozoneManagerDoubleBufferHelper);\n+\n+    Assert.assertEquals(omClientResponse.getOMResponse().getStatus(), OK);\n+\n+    Path keyPath = Paths.get(keyName);\n+\n+    // Check intermediate paths are created\n+    keyPath = keyPath.getParent();\n+    while(keyPath != null) {\n+      Assert.assertNotNull(omMetadataManager.getKeyTable().get(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0aa715d900398d19f68b78ebf9e6686c1e6ca0b"}, "originalPosition": 85}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f17a10d3a5c146f366062637b456a577a1be020d", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/f17a10d3a5c146f366062637b456a577a1be020d", "committedDate": "2020-07-13T19:01:41Z", "message": "address leading /"}, "afterCommit": {"oid": "879cc1bb1f01c86613dced52b55562a93cf0f710", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/879cc1bb1f01c86613dced52b55562a93cf0f710", "committedDate": "2020-07-14T01:03:31Z", "message": "add getFileStatus test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bc2ca692c18b2ff1b3d994dac37afe7e63facd78", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/bc2ca692c18b2ff1b3d994dac37afe7e63facd78", "committedDate": "2020-07-14T01:06:39Z", "message": "address review comments"}, "afterCommit": {"oid": "51c6a9021f956583a8a4a46df62d71df21b36021", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/51c6a9021f956583a8a4a46df62d71df21b36021", "committedDate": "2020-07-14T04:46:37Z", "message": "address review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aeae1bb64f098a7e4d5ade8f2de225c696f704c0", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/aeae1bb64f098a7e4d5ade8f2de225c696f704c0", "committedDate": "2020-07-14T05:09:40Z", "message": "cs"}, "afterCommit": {"oid": "d173db00aa9333a0d49b185fd2364212eb2e7824", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/d173db00aa9333a0d49b185fd2364212eb2e7824", "committedDate": "2020-07-15T00:23:21Z", "message": "address leading / to follow fs semantics"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5MTg5ODU5", "url": "https://github.com/apache/ozone/pull/1196#pullrequestreview-449189859", "createdAt": "2020-07-15T17:43:27Z", "commit": {"oid": "9028b91739b58319bf7df010a06ce757e5e0e865"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNzo0MzoyN1rOGyI9fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNzo0OTo0MlrOGyJL7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIyODc5OA==", "bodyText": "Can we print normalizedKeyName.substring(1) given we return that?", "url": "https://github.com/apache/ozone/pull/1196#discussion_r455228798", "createdAt": "2020-07-15T17:43:27Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/OMClientRequest.java", "diffHunk": "@@ -265,4 +272,24 @@ public AuditMessage buildAuditMessage(AuditAction op,\n     auditMap.put(OzoneConsts.VOLUME, volume);\n     return auditMap;\n   }\n+\n+  @SuppressFBWarnings(\"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n+  public static String getNormalizedKey(boolean enableFileSystemPaths,\n+      String keyName) {\n+    if (enableFileSystemPaths) {\n+      String normalizedKeyName;\n+      if (keyName.startsWith(OM_KEY_PREFIX)) {\n+        normalizedKeyName = Paths.get(keyName).toUri().normalize().getPath();\n+      } else {\n+        normalizedKeyName = Paths.get(OM_KEY_PREFIX, keyName).toUri()\n+            .normalize().getPath();\n+      }\n+      if (!keyName.equals(normalizedKeyName)) {\n+        LOG.debug(\"Normalized key {} to {} \", keyName, normalizedKeyName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9028b91739b58319bf7df010a06ce757e5e0e865"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIzMTAwNQ==", "bodyText": "What about moving the 'enableFileSystemPaths' flag outside, and call the method conditionally? In that way, the getNormalizedKey will stay a simple util function without knowing about application logic.", "url": "https://github.com/apache/ozone/pull/1196#discussion_r455231005", "createdAt": "2020-07-15T17:47:09Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/OMClientRequest.java", "diffHunk": "@@ -265,4 +272,24 @@ public AuditMessage buildAuditMessage(AuditAction op,\n     auditMap.put(OzoneConsts.VOLUME, volume);\n     return auditMap;\n   }\n+\n+  @SuppressFBWarnings(\"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n+  public static String getNormalizedKey(boolean enableFileSystemPaths,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9028b91739b58319bf7df010a06ce757e5e0e865"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIzMjQ5Mg==", "bodyText": "Nit. Can we add a test for key with length = 1? Since we return .substring(1) in the method, trying to be cautious here.", "url": "https://github.com/apache/ozone/pull/1196#discussion_r455232492", "createdAt": "2020-07-15T17:49:42Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/request/TestNormalizePaths.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.hadoop.ozone.om.request;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static org.apache.hadoop.ozone.om.request.OMClientRequest.getNormalizedKey;\n+\n+/**\n+ * Class to test normalize paths.\n+ */\n+public class TestNormalizePaths {\n+\n+  @Test\n+  public void testNormalizePathsEnabled() {\n+\n+    Assert.assertEquals(\"a/b/c/d\",\n+        getNormalizedKey(true, \"a/b/c/d\"));\n+    Assert.assertEquals(\"a/b/c/d\",\n+        getNormalizedKey(true, \"/a/b/c/d\"));\n+    Assert.assertEquals(\"a/b/c/d\",\n+        getNormalizedKey(true, \"////a/b/c/d\"));\n+    Assert.assertEquals(\"a/b/c/d\",\n+        getNormalizedKey(true, \"////a/b/////c/d\"));\n+    Assert.assertEquals(\"a/b/c/...../d\",\n+        getNormalizedKey(true, \"////a/b/////c/...../d\"));\n+    Assert.assertEquals(\"a/b/d\",\n+        getNormalizedKey(true, \"/a/b/c/../d\"));\n+    Assert.assertEquals(\"a/d\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9028b91739b58319bf7df010a06ce757e5e0e865"}, "originalPosition": 47}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9028b91739b58319bf7df010a06ce757e5e0e865", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/9028b91739b58319bf7df010a06ce757e5e0e865", "committedDate": "2020-07-15T05:25:01Z", "message": "fb"}, "afterCommit": {"oid": "bff5c4a802544d586cb5ae9b87553941147b48ec", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/bff5c4a802544d586cb5ae9b87553941147b48ec", "committedDate": "2020-07-15T22:54:12Z", "message": "add / test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NDM0OTE0", "url": "https://github.com/apache/ozone/pull/1196#pullrequestreview-449434914", "createdAt": "2020-07-16T00:47:00Z", "commit": {"oid": "7e4532764b1f9727339e9a07c03ae2ff9106843c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMDo0NzowMFrOGyWLzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMDo0NzowMFrOGyWLzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ0NTQ1NQ==", "bodyText": "I would rephrase first sentence a bit to state that key names will be interpreted as file system paths. / will be treated as a special character and paths will be normalized and must follow Unix filesystem path naming conventions.", "url": "https://github.com/apache/ozone/pull/1196#discussion_r455445455", "createdAt": "2020-07-16T00:47:00Z", "author": {"login": "arp7"}, "path": "hadoop-hdds/common/src/main/resources/ozone-default.xml", "diffHunk": "@@ -2478,4 +2478,18 @@\n       rules in Amazon S3's object key naming guide.\n     </description>\n   </property>\n+\n+  <property>\n+    <name>ozone.om.enable.filesystem.paths</name>\n+    <tag>OZONE, OM</tag>\n+    <value>false</value>\n+    <description>If true, OM will normalize the key paths and also create", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e4532764b1f9727339e9a07c03ae2ff9106843c"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMDY3NDUz", "url": "https://github.com/apache/ozone/pull/1196#pullrequestreview-450067453", "createdAt": "2020-07-16T17:34:31Z", "commit": {"oid": "7e4532764b1f9727339e9a07c03ae2ff9106843c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNzozNDozMVrOGy1V5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNzozNDozMVrOGy1V5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk1NTk0MA==", "bodyText": "Thanks for adding this log message. It will be super useful!", "url": "https://github.com/apache/ozone/pull/1196#discussion_r455955940", "createdAt": "2020-07-16T17:34:31Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/OMClientRequest.java", "diffHunk": "@@ -265,4 +272,30 @@ public AuditMessage buildAuditMessage(AuditAction op,\n     auditMap.put(OzoneConsts.VOLUME, volume);\n     return auditMap;\n   }\n+\n+\n+  public static String getNormalizedKey(boolean enableFileSystemPaths,\n+      String keyName) {\n+    if (enableFileSystemPaths) {\n+      return getNormalizedKey(keyName);\n+    } else {\n+      return keyName;\n+    }\n+  }\n+\n+  @SuppressFBWarnings(\"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n+  public static String getNormalizedKey(String keyName) {\n+    String normalizedKeyName;\n+    if (keyName.startsWith(OM_KEY_PREFIX)) {\n+      normalizedKeyName = Paths.get(keyName).toUri().normalize().getPath();\n+    } else {\n+      normalizedKeyName = Paths.get(OM_KEY_PREFIX, keyName).toUri()\n+          .normalize().getPath();\n+    }\n+    if (!keyName.equals(normalizedKeyName)) {\n+      LOG.debug(\"Normalized key {} to {} \", keyName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e4532764b1f9727339e9a07c03ae2ff9106843c"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMDczMzQy", "url": "https://github.com/apache/ozone/pull/1196#pullrequestreview-450073342", "createdAt": "2020-07-16T17:42:18Z", "commit": {"oid": "7e4532764b1f9727339e9a07c03ae2ff9106843c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNzo0MjoxOVrOGy1nQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNzo0MjoxOVrOGy1nQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2MDM4NQ==", "bodyText": "Leading / in path should be dropped at this point, right?", "url": "https://github.com/apache/ozone/pull/1196#discussion_r455960385", "createdAt": "2020-07-16T17:42:19Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileRequest.java", "diffHunk": "@@ -79,15 +79,11 @@ public static OMPathInfo verifyFilesInPath(\n       String dbDirKeyName = omMetadataManager.getOzoneDirKey(volumeName,\n           bucketName, pathName);\n \n-      if (omMetadataManager.getKeyTable().isExist(dbKeyName)) {\n-        // Found a file in the given path.\n-        // Check if this is actual file or a file in the given path\n-        if (dbKeyName.equals(fileNameFromDetails)) {\n-          result = OMDirectoryResult.FILE_EXISTS;\n-        } else {\n-          result = OMDirectoryResult.FILE_EXISTS_IN_GIVENPATH;\n-        }\n-      } else if (omMetadataManager.getKeyTable().isExist(dbDirKeyName)) {\n+      // Check first for dir. This is to handle leading \"/\" in path, which", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e4532764b1f9727339e9a07c03ae2ff9106843c"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMDc0NTA5", "url": "https://github.com/apache/ozone/pull/1196#pullrequestreview-450074509", "createdAt": "2020-07-16T17:43:56Z", "commit": {"oid": "7e4532764b1f9727339e9a07c03ae2ff9106843c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNzo0Mzo1NlrOGy1q3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNzo0Mzo1NlrOGy1q3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2MTMxMA==", "bodyText": "I am a little bit worried about changes to OMFileRequest. There is a risk of changing the behavior and invalidating the app-compat testing we have done so far.", "url": "https://github.com/apache/ozone/pull/1196#discussion_r455961310", "createdAt": "2020-07-16T17:43:56Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileRequest.java", "diffHunk": "@@ -79,15 +79,11 @@ public static OMPathInfo verifyFilesInPath(\n       String dbDirKeyName = omMetadataManager.getOzoneDirKey(volumeName,\n           bucketName, pathName);\n \n-      if (omMetadataManager.getKeyTable().isExist(dbKeyName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e4532764b1f9727339e9a07c03ae2ff9106843c"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7e4532764b1f9727339e9a07c03ae2ff9106843c", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/7e4532764b1f9727339e9a07c03ae2ff9106843c", "committedDate": "2020-07-15T22:58:10Z", "message": "make empty key normal to key create also"}, "afterCommit": {"oid": "6e0cd7a633e98d2e736a0bc9fc0395495e49e390", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/6e0cd7a633e98d2e736a0bc9fc0395495e49e390", "committedDate": "2020-07-16T21:55:26Z", "message": "address review comment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c9194af80abd2efdfd665e6b2a16e19f817e9676", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/c9194af80abd2efdfd665e6b2a16e19f817e9676", "committedDate": "2020-07-16T22:00:40Z", "message": "cs"}, "afterCommit": {"oid": "285d0db3c49d3dfb621ba7a5659b27f8656f0255", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/285d0db3c49d3dfb621ba7a5659b27f8656f0255", "committedDate": "2020-07-17T17:42:18Z", "message": "cs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwODUyNzIx", "url": "https://github.com/apache/ozone/pull/1196#pullrequestreview-450852721", "createdAt": "2020-07-17T17:56:16Z", "commit": {"oid": "285d0db3c49d3dfb621ba7a5659b27f8656f0255"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwODkxNzc0", "url": "https://github.com/apache/ozone/pull/1196#pullrequestreview-450891774", "createdAt": "2020-07-17T19:01:40Z", "commit": {"oid": "285d0db3c49d3dfb621ba7a5659b27f8656f0255"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOTowMTo0MFrOGzeBSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOTowMTo0MFrOGzeBSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYyMjQxMA==", "bodyText": "Does this mean we are allowing trailing /?", "url": "https://github.com/apache/ozone/pull/1196#discussion_r456622410", "createdAt": "2020-07-17T19:01:40Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/OMClientRequest.java", "diffHunk": "@@ -265,4 +273,72 @@ public AuditMessage buildAuditMessage(AuditAction op,\n     auditMap.put(OzoneConsts.VOLUME, volume);\n     return auditMap;\n   }\n+\n+\n+  public static String validateAndNormalizeKey(boolean enableFileSystemPaths,\n+      String keyName) throws OMException {\n+    if (enableFileSystemPaths) {\n+      return validateAndNormalizeKey(keyName);\n+    } else {\n+      return keyName;\n+    }\n+  }\n+\n+  @SuppressFBWarnings(\"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n+  public static String validateAndNormalizeKey(String keyName)\n+      throws OMException {\n+    String normalizedKeyName;\n+    if (keyName.startsWith(OM_KEY_PREFIX)) {\n+      normalizedKeyName = Paths.get(keyName).toUri().normalize().getPath();\n+    } else {\n+      normalizedKeyName = Paths.get(OM_KEY_PREFIX, keyName).toUri()\n+          .normalize().getPath();\n+    }\n+    if (!keyName.equals(normalizedKeyName)) {\n+      LOG.debug(\"Normalized key {} to {} \", keyName,\n+          normalizedKeyName.substring(1));\n+    }\n+    return isValidKeyPath(normalizedKeyName.substring(1));\n+  }\n+\n+  /**\n+   * Whether the pathname is valid.  Check key names which contain a\n+   * \":\", \".\", \"..\", \"//\", \"\". If it has any of these characters throws\n+   * OMException, else return the path.\n+   */\n+  private static String isValidKeyPath(String path) throws OMException {\n+    boolean isValid = true;\n+\n+    // If keyName is empty string throw error.\n+    if (path.length() == 0) {\n+      throw new OMException(\"Invalid KeyPath, empty keyName\" + path,\n+          INVALID_KEY_NAME);\n+    } else if(path.startsWith(\"/\")) {\n+      isValid = false;\n+    } else {\n+      // Check for \"..\" \".\" \":\" \"/\"\n+      String[] components = StringUtils.split(path, '/');\n+      for (int i = 0; i < components.length; i++) {\n+        String element = components[i];\n+        if (element.equals(\".\") ||\n+            (element.contains(\":\")) ||\n+            (element.contains(\"/\") || element.equals(\"..\"))) {\n+          isValid = false;\n+          break;\n+        }\n+\n+        // The string may end with a /, but not have", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "285d0db3c49d3dfb621ba7a5659b27f8656f0255"}, "originalPosition": 94}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwODk1MjUx", "url": "https://github.com/apache/ozone/pull/1196#pullrequestreview-450895251", "createdAt": "2020-07-17T19:07:42Z", "commit": {"oid": "285d0db3c49d3dfb621ba7a5659b27f8656f0255"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOTowNzo0M1rOGzeMAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOTowNzo0M1rOGzeMAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYyNTE1NQ==", "bodyText": "Spurious change?", "url": "https://github.com/apache/ozone/pull/1196#discussion_r456625155", "createdAt": "2020-07-17T19:07:43Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileCreateRequest.java", "diffHunk": "@@ -141,7 +141,6 @@ public OMRequest preExecute(OzoneManager ozoneManager) throws IOException {\n               ozoneManager.getPreallocateBlocksMax(),\n               ozoneManager.isGrpcBlockTokenEnabled(),\n               ozoneManager.getOMNodeId());\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "285d0db3c49d3dfb621ba7a5659b27f8656f0255"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwODk2Mzc5", "url": "https://github.com/apache/ozone/pull/1196#pullrequestreview-450896379", "createdAt": "2020-07-17T19:09:35Z", "commit": {"oid": "285d0db3c49d3dfb621ba7a5659b27f8656f0255"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOTowOTozNVrOGzePPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOTowOTozNVrOGzePPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYyNTk4Mg==", "bodyText": "Let's also mention why it is invalid, else user may be scratching their head. \ud83d\ude42", "url": "https://github.com/apache/ozone/pull/1196#discussion_r456625982", "createdAt": "2020-07-17T19:09:35Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyCreateRequest.java", "diffHunk": "@@ -91,6 +99,19 @@ public OMRequest preExecute(OzoneManager ozoneManager) throws IOException {\n     if(checkKeyNameEnabled){\n       OmUtils.validateKeyName(keyArgs.getKeyName());\n     }\n+\n+    String keyPath = keyArgs.getKeyName();\n+    if (ozoneManager.getEnableFileSystemPaths()) {\n+      // If enabled, disallow keys with trailing /. As in fs semantics\n+      // directories end with trailing /.\n+      keyPath = validateAndNormalizeKey(\n+          ozoneManager.getEnableFileSystemPaths(), keyPath);\n+      if (keyPath.endsWith(\"/\")) {\n+        throw new OMException(\"Invalid KeyPath: \" + keyPath,\n+            OMException.ResultCodes.INVALID_KEY_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "285d0db3c49d3dfb621ba7a5659b27f8656f0255"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwOTAyNTI4", "url": "https://github.com/apache/ozone/pull/1196#pullrequestreview-450902528", "createdAt": "2020-07-17T19:20:37Z", "commit": {"oid": "285d0db3c49d3dfb621ba7a5659b27f8656f0255"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOToyMDozN1rOGzehzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOToyMDozN1rOGzehzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMDczNA==", "bodyText": "Why is this converted to ../d1/d2/d3? Should it be failed instead due to trailing /?", "url": "https://github.com/apache/ozone/pull/1196#discussion_r456630734", "createdAt": "2020-07-17T19:20:37Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/request/key/TestOMKeyCreateRequest.java", "diffHunk": "@@ -327,7 +344,164 @@ private OMRequest createKeyRequest(boolean isMultipartKey, int partNumber) {\n         .setCmdType(OzoneManagerProtocolProtos.Type.CreateKey)\n         .setClientId(UUID.randomUUID().toString())\n         .setCreateKeyRequest(createKeyRequest).build();\n+  }\n+\n+  @Test\n+  public void testKeyCreateWithFileSystemPathsEnabled() throws Exception {\n+\n+    OzoneConfiguration configuration = new OzoneConfiguration();\n+    configuration.setBoolean(OZONE_OM_ENABLE_FILESYSTEM_PATHS, true);\n+    when(ozoneManager.getConfiguration()).thenReturn(configuration);\n+    when(ozoneManager.getEnableFileSystemPaths()).thenReturn(true);\n+\n+    // Add volume and bucket entries to DB.\n+    addVolumeAndBucketToDB(volumeName, bucketName,\n+        omMetadataManager);\n+\n+\n+    keyName = \"dir1/dir2/dir3/file1\";\n+    createAndCheck(keyName);\n+\n+    // Key with leading '/'.\n+    String keyName = \"/a/b/c/file1\";\n+    createAndCheck(keyName);\n+\n+    // Commit openKey entry.\n+    TestOMRequestUtils.addKeyToTable(false, volumeName, bucketName,\n+        keyName.substring(1), 0L, RATIS, THREE, omMetadataManager);\n+\n+    // Now create another file in same dir path.\n+    keyName = \"/a/b/c/file2\";\n+    createAndCheck(keyName);\n+\n+    // Create key with multiple /'s\n+    // converted to a/b/c/file5\n+    keyName = \"///a/b///c///file5\";\n+    createAndCheck(keyName);\n+\n+    // converted to a/b/c/.../file3\n+    keyName = \"///a/b///c//.../file3\";\n+    createAndCheck(keyName);\n+\n+    // converted to r1/r2\n+    keyName = \"././r1/r2/\";\n+    createAndCheck(keyName);\n+\n+    // converted to ..d1/d2/d3", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "285d0db3c49d3dfb621ba7a5659b27f8656f0255"}, "originalPosition": 99}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwOTAyOTYz", "url": "https://github.com/apache/ozone/pull/1196#pullrequestreview-450902963", "createdAt": "2020-07-17T19:21:29Z", "commit": {"oid": "285d0db3c49d3dfb621ba7a5659b27f8656f0255"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOToyMToyOVrOGzejLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOToyMToyOVrOGzejLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMTA4Ng==", "bodyText": "Also let's add a check for ../a/b and /../a/b.", "url": "https://github.com/apache/ozone/pull/1196#discussion_r456631086", "createdAt": "2020-07-17T19:21:29Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/request/key/TestOMKeyCreateRequest.java", "diffHunk": "@@ -327,7 +344,164 @@ private OMRequest createKeyRequest(boolean isMultipartKey, int partNumber) {\n         .setCmdType(OzoneManagerProtocolProtos.Type.CreateKey)\n         .setClientId(UUID.randomUUID().toString())\n         .setCreateKeyRequest(createKeyRequest).build();\n+  }\n+\n+  @Test\n+  public void testKeyCreateWithFileSystemPathsEnabled() throws Exception {\n+\n+    OzoneConfiguration configuration = new OzoneConfiguration();\n+    configuration.setBoolean(OZONE_OM_ENABLE_FILESYSTEM_PATHS, true);\n+    when(ozoneManager.getConfiguration()).thenReturn(configuration);\n+    when(ozoneManager.getEnableFileSystemPaths()).thenReturn(true);\n+\n+    // Add volume and bucket entries to DB.\n+    addVolumeAndBucketToDB(volumeName, bucketName,\n+        omMetadataManager);\n+\n+\n+    keyName = \"dir1/dir2/dir3/file1\";\n+    createAndCheck(keyName);\n+\n+    // Key with leading '/'.\n+    String keyName = \"/a/b/c/file1\";\n+    createAndCheck(keyName);\n+\n+    // Commit openKey entry.\n+    TestOMRequestUtils.addKeyToTable(false, volumeName, bucketName,\n+        keyName.substring(1), 0L, RATIS, THREE, omMetadataManager);\n+\n+    // Now create another file in same dir path.\n+    keyName = \"/a/b/c/file2\";\n+    createAndCheck(keyName);\n+\n+    // Create key with multiple /'s\n+    // converted to a/b/c/file5\n+    keyName = \"///a/b///c///file5\";\n+    createAndCheck(keyName);\n+\n+    // converted to a/b/c/.../file3\n+    keyName = \"///a/b///c//.../file3\";\n+    createAndCheck(keyName);\n+\n+    // converted to r1/r2\n+    keyName = \"././r1/r2/\";\n+    createAndCheck(keyName);\n+\n+    // converted to ..d1/d2/d3\n+    keyName = \"..d1/d2/d3/\";\n+    createAndCheck(keyName);\n+\n+    // Create a file, where a file already exists in the path.\n+    // Now try with a file exists in path. Should fail.\n+    keyName = \"/a/b/c/file1/file3\";\n+    checkNotAFile(keyName);\n+\n+    // Empty keyName.\n+    keyName = \"\";\n+    checkNotAValidPath(keyName);\n+\n+    // Key name ends with /\n+    keyName = \"/a/./\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \"/////\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \"../../b/c\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "285d0db3c49d3dfb621ba7a5659b27f8656f0255"}, "originalPosition": 119}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwOTA0MDE1", "url": "https://github.com/apache/ozone/pull/1196#pullrequestreview-450904015", "createdAt": "2020-07-17T19:23:23Z", "commit": {"oid": "285d0db3c49d3dfb621ba7a5659b27f8656f0255"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOToyMzoyNFrOGzemPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOToyMzoyNFrOGzemPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMTg3MA==", "bodyText": "Let's add a separate test case for validateAndNormalizeKey itself. All it does is call validateAndNormalizeKey with bunch of hard-coded input and asserts on the expected output.", "url": "https://github.com/apache/ozone/pull/1196#discussion_r456631870", "createdAt": "2020-07-17T19:23:24Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/request/key/TestOMKeyCreateRequest.java", "diffHunk": "@@ -327,7 +344,164 @@ private OMRequest createKeyRequest(boolean isMultipartKey, int partNumber) {\n         .setCmdType(OzoneManagerProtocolProtos.Type.CreateKey)\n         .setClientId(UUID.randomUUID().toString())\n         .setCreateKeyRequest(createKeyRequest).build();\n+  }\n+\n+  @Test\n+  public void testKeyCreateWithFileSystemPathsEnabled() throws Exception {\n+\n+    OzoneConfiguration configuration = new OzoneConfiguration();\n+    configuration.setBoolean(OZONE_OM_ENABLE_FILESYSTEM_PATHS, true);\n+    when(ozoneManager.getConfiguration()).thenReturn(configuration);\n+    when(ozoneManager.getEnableFileSystemPaths()).thenReturn(true);\n+\n+    // Add volume and bucket entries to DB.\n+    addVolumeAndBucketToDB(volumeName, bucketName,\n+        omMetadataManager);\n+\n+\n+    keyName = \"dir1/dir2/dir3/file1\";\n+    createAndCheck(keyName);\n+\n+    // Key with leading '/'.\n+    String keyName = \"/a/b/c/file1\";\n+    createAndCheck(keyName);\n+\n+    // Commit openKey entry.\n+    TestOMRequestUtils.addKeyToTable(false, volumeName, bucketName,\n+        keyName.substring(1), 0L, RATIS, THREE, omMetadataManager);\n+\n+    // Now create another file in same dir path.\n+    keyName = \"/a/b/c/file2\";\n+    createAndCheck(keyName);\n+\n+    // Create key with multiple /'s\n+    // converted to a/b/c/file5\n+    keyName = \"///a/b///c///file5\";\n+    createAndCheck(keyName);\n+\n+    // converted to a/b/c/.../file3\n+    keyName = \"///a/b///c//.../file3\";\n+    createAndCheck(keyName);\n+\n+    // converted to r1/r2\n+    keyName = \"././r1/r2/\";\n+    createAndCheck(keyName);\n+\n+    // converted to ..d1/d2/d3\n+    keyName = \"..d1/d2/d3/\";\n+    createAndCheck(keyName);\n+\n+    // Create a file, where a file already exists in the path.\n+    // Now try with a file exists in path. Should fail.\n+    keyName = \"/a/b/c/file1/file3\";\n+    checkNotAFile(keyName);\n+\n+    // Empty keyName.\n+    keyName = \"\";\n+    checkNotAValidPath(keyName);\n+\n+    // Key name ends with /\n+    keyName = \"/a/./\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \"/////\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \"../../b/c\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \"../../b/c/\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \"../../b:/c/\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \":/c/\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \"\";\n+    checkNotAValidPath(keyName);\n+\n+  }\n+\n \n+  private void checkNotAValidPath(String keyName) {\n+    OMRequest omRequest = createKeyRequest(false, 0, keyName);\n+    OMKeyCreateRequest omKeyCreateRequest = new OMKeyCreateRequest(omRequest);\n+\n+    try {\n+      omKeyCreateRequest.preExecute(ozoneManager);\n+      fail(\"checkNotAValidPath failed for path\" + keyName);\n+    } catch (IOException ex) {\n+      Assert.assertTrue(ex instanceof OMException);\n+      OMException omException = (OMException) ex;\n+      Assert.assertEquals(OMException.ResultCodes.INVALID_KEY_NAME,\n+          omException.getResult());\n+    }\n+\n+\n+  }\n+  private void checkNotAFile(String keyName) throws Exception {\n+    OMRequest omRequest = createKeyRequest(false, 0, keyName);\n+\n+    OMKeyCreateRequest omKeyCreateRequest = new OMKeyCreateRequest(omRequest);\n+\n+    omRequest = omKeyCreateRequest.preExecute(ozoneManager);\n+\n+    omKeyCreateRequest = new OMKeyCreateRequest(omRequest);\n+\n+    OMClientResponse omClientResponse =\n+        omKeyCreateRequest.validateAndUpdateCache(ozoneManager,\n+            101L, ozoneManagerDoubleBufferHelper);\n+\n+    Assert.assertEquals(NOT_A_FILE,\n+        omClientResponse.getOMResponse().getStatus());\n+  }\n+\n+\n+  private void createAndCheck(String keyName) throws Exception {\n+    OMRequest omRequest = createKeyRequest(false, 0, keyName);\n+\n+    OMKeyCreateRequest omKeyCreateRequest = new OMKeyCreateRequest(omRequest);\n+\n+    omRequest = omKeyCreateRequest.preExecute(ozoneManager);\n+\n+    omKeyCreateRequest = new OMKeyCreateRequest(omRequest);\n+\n+    OMClientResponse omClientResponse =\n+        omKeyCreateRequest.validateAndUpdateCache(ozoneManager,\n+            101L, ozoneManagerDoubleBufferHelper);\n+\n+    Assert.assertEquals(OK, omClientResponse.getOMResponse().getStatus());\n+\n+    checkCreatedPaths(omKeyCreateRequest, omRequest, keyName);\n+  }\n+\n+  private void checkCreatedPaths(OMKeyCreateRequest omKeyCreateRequest,\n+      OMRequest omRequest, String keyName) throws Exception {\n+    keyName = omKeyCreateRequest.validateAndNormalizeKey(true, keyName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "285d0db3c49d3dfb621ba7a5659b27f8656f0255"}, "originalPosition": 191}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwOTA0MTE2", "url": "https://github.com/apache/ozone/pull/1196#pullrequestreview-450904116", "createdAt": "2020-07-17T19:23:34Z", "commit": {"oid": "285d0db3c49d3dfb621ba7a5659b27f8656f0255"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOToyMzozNFrOGzemkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOToyMzozNFrOGzemkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMTk1NA==", "bodyText": "Nice!", "url": "https://github.com/apache/ozone/pull/1196#discussion_r456631954", "createdAt": "2020-07-17T19:23:34Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/request/key/TestOMKeyCreateRequest.java", "diffHunk": "@@ -327,7 +344,164 @@ private OMRequest createKeyRequest(boolean isMultipartKey, int partNumber) {\n         .setCmdType(OzoneManagerProtocolProtos.Type.CreateKey)\n         .setClientId(UUID.randomUUID().toString())\n         .setCreateKeyRequest(createKeyRequest).build();\n+  }\n+\n+  @Test\n+  public void testKeyCreateWithFileSystemPathsEnabled() throws Exception {\n+\n+    OzoneConfiguration configuration = new OzoneConfiguration();\n+    configuration.setBoolean(OZONE_OM_ENABLE_FILESYSTEM_PATHS, true);\n+    when(ozoneManager.getConfiguration()).thenReturn(configuration);\n+    when(ozoneManager.getEnableFileSystemPaths()).thenReturn(true);\n+\n+    // Add volume and bucket entries to DB.\n+    addVolumeAndBucketToDB(volumeName, bucketName,\n+        omMetadataManager);\n+\n+\n+    keyName = \"dir1/dir2/dir3/file1\";\n+    createAndCheck(keyName);\n+\n+    // Key with leading '/'.\n+    String keyName = \"/a/b/c/file1\";\n+    createAndCheck(keyName);\n+\n+    // Commit openKey entry.\n+    TestOMRequestUtils.addKeyToTable(false, volumeName, bucketName,\n+        keyName.substring(1), 0L, RATIS, THREE, omMetadataManager);\n+\n+    // Now create another file in same dir path.\n+    keyName = \"/a/b/c/file2\";\n+    createAndCheck(keyName);\n+\n+    // Create key with multiple /'s\n+    // converted to a/b/c/file5\n+    keyName = \"///a/b///c///file5\";\n+    createAndCheck(keyName);\n+\n+    // converted to a/b/c/.../file3\n+    keyName = \"///a/b///c//.../file3\";\n+    createAndCheck(keyName);\n+\n+    // converted to r1/r2\n+    keyName = \"././r1/r2/\";\n+    createAndCheck(keyName);\n+\n+    // converted to ..d1/d2/d3\n+    keyName = \"..d1/d2/d3/\";\n+    createAndCheck(keyName);\n+\n+    // Create a file, where a file already exists in the path.\n+    // Now try with a file exists in path. Should fail.\n+    keyName = \"/a/b/c/file1/file3\";\n+    checkNotAFile(keyName);\n+\n+    // Empty keyName.\n+    keyName = \"\";\n+    checkNotAValidPath(keyName);\n+\n+    // Key name ends with /\n+    keyName = \"/a/./\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \"/////\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \"../../b/c\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \"../../b/c/\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \"../../b:/c/\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \":/c/\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \"\";\n+    checkNotAValidPath(keyName);\n+\n+  }\n+\n \n+  private void checkNotAValidPath(String keyName) {\n+    OMRequest omRequest = createKeyRequest(false, 0, keyName);\n+    OMKeyCreateRequest omKeyCreateRequest = new OMKeyCreateRequest(omRequest);\n+\n+    try {\n+      omKeyCreateRequest.preExecute(ozoneManager);\n+      fail(\"checkNotAValidPath failed for path\" + keyName);\n+    } catch (IOException ex) {\n+      Assert.assertTrue(ex instanceof OMException);\n+      OMException omException = (OMException) ex;\n+      Assert.assertEquals(OMException.ResultCodes.INVALID_KEY_NAME,\n+          omException.getResult());\n+    }\n+\n+\n+  }\n+  private void checkNotAFile(String keyName) throws Exception {\n+    OMRequest omRequest = createKeyRequest(false, 0, keyName);\n+\n+    OMKeyCreateRequest omKeyCreateRequest = new OMKeyCreateRequest(omRequest);\n+\n+    omRequest = omKeyCreateRequest.preExecute(ozoneManager);\n+\n+    omKeyCreateRequest = new OMKeyCreateRequest(omRequest);\n+\n+    OMClientResponse omClientResponse =\n+        omKeyCreateRequest.validateAndUpdateCache(ozoneManager,\n+            101L, ozoneManagerDoubleBufferHelper);\n+\n+    Assert.assertEquals(NOT_A_FILE,\n+        omClientResponse.getOMResponse().getStatus());\n+  }\n+\n+\n+  private void createAndCheck(String keyName) throws Exception {\n+    OMRequest omRequest = createKeyRequest(false, 0, keyName);\n+\n+    OMKeyCreateRequest omKeyCreateRequest = new OMKeyCreateRequest(omRequest);\n+\n+    omRequest = omKeyCreateRequest.preExecute(ozoneManager);\n+\n+    omKeyCreateRequest = new OMKeyCreateRequest(omRequest);\n+\n+    OMClientResponse omClientResponse =\n+        omKeyCreateRequest.validateAndUpdateCache(ozoneManager,\n+            101L, ozoneManagerDoubleBufferHelper);\n+\n+    Assert.assertEquals(OK, omClientResponse.getOMResponse().getStatus());\n+\n+    checkCreatedPaths(omKeyCreateRequest, omRequest, keyName);\n+  }\n+\n+  private void checkCreatedPaths(OMKeyCreateRequest omKeyCreateRequest,\n+      OMRequest omRequest, String keyName) throws Exception {\n+    keyName = omKeyCreateRequest.validateAndNormalizeKey(true, keyName);\n+    // Check intermediate directories created or not.\n+    Path keyPath = Paths.get(keyName);\n+    checkIntermediatePaths(keyPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "285d0db3c49d3dfb621ba7a5659b27f8656f0255"}, "originalPosition": 194}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwOTA2MzA0", "url": "https://github.com/apache/ozone/pull/1196#pullrequestreview-450906304", "createdAt": "2020-07-17T19:27:50Z", "commit": {"oid": "285d0db3c49d3dfb621ba7a5659b27f8656f0255"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOToyNzo1MFrOGzetVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOToyNzo1MFrOGzetVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMzY4Ng==", "bodyText": "Bharat, more than two dots should normalize to itself. In Unix I can create a dir named ... or ......", "url": "https://github.com/apache/ozone/pull/1196#discussion_r456633686", "createdAt": "2020-07-17T19:27:50Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/request/TestNormalizePaths.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.hadoop.ozone.om.request;\n+\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import static org.apache.hadoop.ozone.om.request.OMClientRequest.validateAndNormalizeKey;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Class to test normalize paths.\n+ */\n+public class TestNormalizePaths {\n+\n+  @Rule\n+  public ExpectedException exceptionRule = ExpectedException.none();\n+\n+  @Test\n+  public void testNormalizePathsEnabled() throws Exception {\n+\n+    Assert.assertEquals(\"a/b/c/d\",\n+        validateAndNormalizeKey(true, \"a/b/c/d\"));\n+    Assert.assertEquals(\"a/b/c/d\",\n+        validateAndNormalizeKey(true, \"/a/b/c/d\"));\n+    Assert.assertEquals(\"a/b/c/d\",\n+        validateAndNormalizeKey(true, \"////a/b/c/d\"));\n+    Assert.assertEquals(\"a/b/c/d\",\n+        validateAndNormalizeKey(true, \"////a/b/////c/d\"));\n+    Assert.assertEquals(\"a/b/c/...../d\",\n+        validateAndNormalizeKey(true, \"////a/b/////c/...../d\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "285d0db3c49d3dfb621ba7a5659b27f8656f0255"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwOTA3MTQy", "url": "https://github.com/apache/ozone/pull/1196#pullrequestreview-450907142", "createdAt": "2020-07-17T19:29:27Z", "commit": {"oid": "285d0db3c49d3dfb621ba7a5659b27f8656f0255"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "669102ea9bf94e471db1279efd2c265005801c2a", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/669102ea9bf94e471db1279efd2c265005801c2a", "committedDate": "2020-07-17T21:05:21Z", "message": "Add create intermediate dir in key create"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "773bfd2e6f25dcc9a86e2ced891d5e644987ad1a", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/773bfd2e6f25dcc9a86e2ced891d5e644987ad1a", "committedDate": "2020-07-17T21:05:21Z", "message": "add config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9489bb5399ac90e98722d080af40db4b3974f8a", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/a9489bb5399ac90e98722d080af40db4b3974f8a", "committedDate": "2020-07-17T21:05:21Z", "message": "add already file exists"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7eae28042af0928a3bc8f78002a244c95734ab3", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/e7eae28042af0928a3bc8f78002a244c95734ab3", "committedDate": "2020-07-17T21:05:22Z", "message": "fix cs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5d67e7c2f341afa76501d03c7cd42e380b6f32c", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/e5d67e7c2f341afa76501d03c7cd42e380b6f32c", "committedDate": "2020-07-17T21:05:22Z", "message": "address leading /"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9ebe996de6be06a80ff709a9a39b0d1c2b810b9", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/d9ebe996de6be06a80ff709a9a39b0d1c2b810b9", "committedDate": "2020-07-17T21:05:22Z", "message": "add getFileStatus test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afb0f5ccc37296ba95eb62483bda2bb09b5b5ca1", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/afb0f5ccc37296ba95eb62483bda2bb09b5b5ca1", "committedDate": "2020-07-17T21:05:22Z", "message": "address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da4ed948bbd1c803354cae1fdd21ba21f299a9d3", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/da4ed948bbd1c803354cae1fdd21ba21f299a9d3", "committedDate": "2020-07-17T21:05:22Z", "message": "cs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "010da1b8eb13830f8bbaa6465a127fd778cf443b", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/010da1b8eb13830f8bbaa6465a127fd778cf443b", "committedDate": "2020-07-17T21:05:22Z", "message": "filesystem api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d916ee4bba1b8ee044e017e599d7cad47b156c2d", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/d916ee4bba1b8ee044e017e599d7cad47b156c2d", "committedDate": "2020-07-17T21:05:23Z", "message": "cs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c020f4a6474ff424f1b0163b353fdca22455504b", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/c020f4a6474ff424f1b0163b353fdca22455504b", "committedDate": "2020-07-17T21:06:22Z", "message": "address leading / to follow fs semantics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28b7d7eafe4b1a0b82eecd3685401c3a53b15329", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/28b7d7eafe4b1a0b82eecd3685401c3a53b15329", "committedDate": "2020-07-17T21:06:22Z", "message": "add disable test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c85c11c821438956d0a82eabd5b72356d0341bf", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/8c85c11c821438956d0a82eabd5b72356d0341bf", "committedDate": "2020-07-17T21:06:22Z", "message": "cs and fb"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "711343a401a00b225c9a7a34ab48a04819235e8a", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/711343a401a00b225c9a7a34ab48a04819235e8a", "committedDate": "2020-07-17T21:06:22Z", "message": "fb"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e55f1e303aa5959ea9edb992dcf3cb6785fcb6e", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/1e55f1e303aa5959ea9edb992dcf3cb6785fcb6e", "committedDate": "2020-07-17T21:06:22Z", "message": "some corner case tests address review comments and handle empty keyName"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edd38aac043b39beef2548446c2ae915c75109da", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/edd38aac043b39beef2548446c2ae915c75109da", "committedDate": "2020-07-17T21:06:23Z", "message": "add / test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8458f67c6a7a3372546b247b7b40bbeae9fb9693", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/8458f67c6a7a3372546b247b7b40bbeae9fb9693", "committedDate": "2020-07-17T21:06:23Z", "message": "make empty key normal to key create also"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75780f01435076ce60f27534ae161733567496f6", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/75780f01435076ce60f27534ae161733567496f6", "committedDate": "2020-07-17T21:06:23Z", "message": "remove file request code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcd5b783642d25276065d2daff3595e0263c7caf", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/bcd5b783642d25276065d2daff3595e0263c7caf", "committedDate": "2020-07-17T21:06:23Z", "message": "add validatecheck and add tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f8e72a9ead6ee9cc8c2aae3e5d2c59858f01b79", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/5f8e72a9ead6ee9cc8c2aae3e5d2c59858f01b79", "committedDate": "2020-07-17T21:06:23Z", "message": "address review comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "083c2247799113f21582381757420d4e0d1a04ed", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/083c2247799113f21582381757420d4e0d1a04ed", "committedDate": "2020-07-17T21:06:23Z", "message": "cs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "301b6d05a4a381837b0876b548b8b478ad444c11", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/301b6d05a4a381837b0876b548b8b478ad444c11", "committedDate": "2020-07-17T21:06:24Z", "message": "remove spurious change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0389acc8f808c19c46f17df10851fe87e2787f3", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/f0389acc8f808c19c46f17df10851fe87e2787f3", "committedDate": "2020-07-17T21:06:24Z", "message": "add test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "629563cc587db82fbf8e1257354aa5aad4870715", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/629563cc587db82fbf8e1257354aa5aad4870715", "committedDate": "2020-07-17T20:51:33Z", "message": "add test"}, "afterCommit": {"oid": "f0389acc8f808c19c46f17df10851fe87e2787f3", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/f0389acc8f808c19c46f17df10851fe87e2787f3", "committedDate": "2020-07-17T21:06:24Z", "message": "add test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15b9e5cd28b52f4ee4ae390fe8fac350f8bafdac", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/15b9e5cd28b52f4ee4ae390fe8fac350f8bafdac", "committedDate": "2020-07-17T21:07:56Z", "message": "fix bug during rebase"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMDcwMzA4", "url": "https://github.com/apache/ozone/pull/1196#pullrequestreview-451070308", "createdAt": "2020-07-18T17:15:27Z", "commit": {"oid": "15b9e5cd28b52f4ee4ae390fe8fac350f8bafdac"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2851, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}