{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5OTE4MTYy", "number": 516, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQxNzoyMjoyMFrODcephQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQwNzowNzo0MVrODeQeDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMTg4ODY5OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelinePlacementPolicy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQxNzoyMjoyMFrOFkis8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMzo1NTo0M1rOFmOntA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg2MTYxOA==", "bodyText": "NIT: I think we can change to check positive instead and let the for loop handle the remaining node picking naturally based on the results set size.\nboolean rackAwareness = false;\nif (nextNode != null) {\n  rackAwareness = true;\n  results.add(nextNode);\n  exclude.add(nextNode);\n}", "url": "https://github.com/apache/ozone/pull/516#discussion_r373861618", "createdAt": "2020-02-02T17:22:20Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelinePlacementPolicy.java", "diffHunk": "@@ -241,29 +269,30 @@ boolean meetCriteria(DatanodeDetails datanodeDetails, int nodesRequired) {\n     exclude.add(anchor);\n \n     // Choose the second node on different racks from anchor.\n-    DatanodeDetails nodeOnDifferentRack = chooseNodeBasedOnRackAwareness(\n+    DatanodeDetails nextNode = chooseNodeBasedOnRackAwareness(\n         healthyNodes, exclude,\n         nodeManager.getClusterNetworkTopologyMap(), anchor);\n-    if (nodeOnDifferentRack == null) {\n-      LOG.warn(\"Pipeline Placement: Unable to find 2nd node on different \" +\n-          \"racks that meets the criteria. Required nodes: {}, Found nodes:\" +\n-          \" {}\", nodesRequired, results.size());\n-      throw new SCMException(\"Unable to find required number of nodes.\",\n-          SCMException.ResultCodes.FAILED_TO_FIND_SUITABLE_NODE);\n+    if (nextNode == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23f6c8bf2a1765635b0d097415513eed50bc1646"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYyOTc0OA==", "bodyText": "Updated.", "url": "https://github.com/apache/ozone/pull/516#discussion_r375629748", "createdAt": "2020-02-06T03:55:43Z", "author": {"login": "timmylicheng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelinePlacementPolicy.java", "diffHunk": "@@ -241,29 +269,30 @@ boolean meetCriteria(DatanodeDetails datanodeDetails, int nodesRequired) {\n     exclude.add(anchor);\n \n     // Choose the second node on different racks from anchor.\n-    DatanodeDetails nodeOnDifferentRack = chooseNodeBasedOnRackAwareness(\n+    DatanodeDetails nextNode = chooseNodeBasedOnRackAwareness(\n         healthyNodes, exclude,\n         nodeManager.getClusterNetworkTopologyMap(), anchor);\n-    if (nodeOnDifferentRack == null) {\n-      LOG.warn(\"Pipeline Placement: Unable to find 2nd node on different \" +\n-          \"racks that meets the criteria. Required nodes: {}, Found nodes:\" +\n-          \" {}\", nodesRequired, results.size());\n-      throw new SCMException(\"Unable to find required number of nodes.\",\n-          SCMException.ResultCodes.FAILED_TO_FIND_SUITABLE_NODE);\n+    if (nextNode == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg2MTYxOA=="}, "originalCommit": {"oid": "23f6c8bf2a1765635b0d097415513eed50bc1646"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMTg5MDEyOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/test/java/org/apache/hadoop/hdds/scm/pipeline/TestPipelinePlacementPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQxNzoyNDo1OFrOFkitog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMzo1NTo1OVrOFmOn6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg2MTc5NA==", "bodyText": "can we add a test simple test case with topology that all nodes on the same rack with topology aware and fall back enabled?", "url": "https://github.com/apache/ozone/pull/516#discussion_r373861794", "createdAt": "2020-02-02T17:24:58Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-hdds/server-scm/src/test/java/org/apache/hadoop/hdds/scm/pipeline/TestPipelinePlacementPolicy.java", "diffHunk": "@@ -83,10 +83,36 @@ public void testChooseNodeBasedOnRackAwareness() {\n     DatanodeDetails nextNode = placementPolicy.chooseNodeBasedOnRackAwareness(\n         healthyNodes, new ArrayList<>(PIPELINE_PLACEMENT_MAX_NODES_COUNT),\n         topologyWithDifRacks, anchor);\n+    Assert.assertNotNull(nextNode);\n     Assert.assertFalse(anchor.getNetworkLocation().equals(\n         nextNode.getNetworkLocation()));\n   }\n \n+  @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23f6c8bf2a1765635b0d097415513eed50bc1646"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYyOTgwMA==", "bodyText": "I add a test. Please check the latest commit.", "url": "https://github.com/apache/ozone/pull/516#discussion_r375629800", "createdAt": "2020-02-06T03:55:59Z", "author": {"login": "timmylicheng"}, "path": "hadoop-hdds/server-scm/src/test/java/org/apache/hadoop/hdds/scm/pipeline/TestPipelinePlacementPolicy.java", "diffHunk": "@@ -83,10 +83,36 @@ public void testChooseNodeBasedOnRackAwareness() {\n     DatanodeDetails nextNode = placementPolicy.chooseNodeBasedOnRackAwareness(\n         healthyNodes, new ArrayList<>(PIPELINE_PLACEMENT_MAX_NODES_COUNT),\n         topologyWithDifRacks, anchor);\n+    Assert.assertNotNull(nextNode);\n     Assert.assertFalse(anchor.getNetworkLocation().equals(\n         nextNode.getNetworkLocation()));\n   }\n \n+  @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg2MTc5NA=="}, "originalCommit": {"oid": "23f6c8bf2a1765635b0d097415513eed50bc1646"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDUzNzEwOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelinePlacementPolicy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQwNzowNzo0MVrOFnTo_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQxMDoxMDozNFrOFnURSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc2MDU3NA==", "bodyText": "Better to move this if statement into if (nextNode != null).", "url": "https://github.com/apache/ozone/pull/516#discussion_r376760574", "createdAt": "2020-02-09T07:07:41Z", "author": {"login": "ChenSammi"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelinePlacementPolicy.java", "diffHunk": "@@ -220,50 +243,57 @@ boolean meetCriteria(DatanodeDetails datanodeDetails, int nodesRequired) {\n   public List<DatanodeDetails> getResultSet(\n       int nodesRequired, List<DatanodeDetails> healthyNodes)\n       throws SCMException {\n+    if (nodesRequired != HddsProtos.ReplicationFactor.THREE.getNumber()) {\n+      throw new SCMException(\"Nodes required number is not supported: \" +\n+          nodesRequired, SCMException.ResultCodes.INVALID_CAPACITY);\n+    }\n+\n+    // Assume rack awareness is not enabled.\n+    boolean rackAwareness = false;\n     List <DatanodeDetails> results = new ArrayList<>(nodesRequired);\n     // Since nodes are widely distributed, the results should be selected\n     // base on distance in topology, rack awareness and load balancing.\n     List<DatanodeDetails> exclude = new ArrayList<>();\n     // First choose an anchor nodes randomly\n     DatanodeDetails anchor = chooseNode(healthyNodes);\n-    if (anchor == null) {\n-      LOG.warn(\"Unable to find healthy node for anchor(first) node.\" +\n-              \" Required nodes: {}, Found nodes: {}\",\n-          nodesRequired, results.size());\n-      throw new SCMException(\"Unable to find required number of nodes.\",\n+    if (anchor != null) {\n+      results.add(anchor);\n+      exclude.add(anchor);\n+    } else {\n+      LOG.warn(\"Unable to find healthy node for anchor(first) node.\");\n+      throw new SCMException(\"Unable to find anchor node.\",\n           SCMException.ResultCodes.FAILED_TO_FIND_SUITABLE_NODE);\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"First node chosen: {}\", anchor);\n     }\n \n-    results.add(anchor);\n-    exclude.add(anchor);\n \n     // Choose the second node on different racks from anchor.\n-    DatanodeDetails nodeOnDifferentRack = chooseNodeBasedOnRackAwareness(\n+    DatanodeDetails nextNode = chooseNodeBasedOnRackAwareness(\n         healthyNodes, exclude,\n         nodeManager.getClusterNetworkTopologyMap(), anchor);\n-    if (nodeOnDifferentRack == null) {\n-      LOG.warn(\"Pipeline Placement: Unable to find 2nd node on different \" +\n-          \"racks that meets the criteria. Required nodes: {}, Found nodes:\" +\n-          \" {}\", nodesRequired, results.size());\n-      throw new SCMException(\"Unable to find required number of nodes.\",\n-          SCMException.ResultCodes.FAILED_TO_FIND_SUITABLE_NODE);\n+    if (nextNode != null) {\n+      // Rack awareness is detected.\n+      rackAwareness = true;\n+      results.add(nextNode);\n+      exclude.add(nextNode);\n+    } else {\n+      LOG.debug(\"Pipeline Placement: Unable to find 2nd node on different \" +\n+          \"rack based on rack awareness.\");\n     }\n     if (LOG.isDebugEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "572195da277f70d9db62ec76a4516fd6a7692c6e"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc3MDg4OQ==", "bodyText": "Sure. Updated.", "url": "https://github.com/apache/ozone/pull/516#discussion_r376770889", "createdAt": "2020-02-09T10:10:34Z", "author": {"login": "timmylicheng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelinePlacementPolicy.java", "diffHunk": "@@ -220,50 +243,57 @@ boolean meetCriteria(DatanodeDetails datanodeDetails, int nodesRequired) {\n   public List<DatanodeDetails> getResultSet(\n       int nodesRequired, List<DatanodeDetails> healthyNodes)\n       throws SCMException {\n+    if (nodesRequired != HddsProtos.ReplicationFactor.THREE.getNumber()) {\n+      throw new SCMException(\"Nodes required number is not supported: \" +\n+          nodesRequired, SCMException.ResultCodes.INVALID_CAPACITY);\n+    }\n+\n+    // Assume rack awareness is not enabled.\n+    boolean rackAwareness = false;\n     List <DatanodeDetails> results = new ArrayList<>(nodesRequired);\n     // Since nodes are widely distributed, the results should be selected\n     // base on distance in topology, rack awareness and load balancing.\n     List<DatanodeDetails> exclude = new ArrayList<>();\n     // First choose an anchor nodes randomly\n     DatanodeDetails anchor = chooseNode(healthyNodes);\n-    if (anchor == null) {\n-      LOG.warn(\"Unable to find healthy node for anchor(first) node.\" +\n-              \" Required nodes: {}, Found nodes: {}\",\n-          nodesRequired, results.size());\n-      throw new SCMException(\"Unable to find required number of nodes.\",\n+    if (anchor != null) {\n+      results.add(anchor);\n+      exclude.add(anchor);\n+    } else {\n+      LOG.warn(\"Unable to find healthy node for anchor(first) node.\");\n+      throw new SCMException(\"Unable to find anchor node.\",\n           SCMException.ResultCodes.FAILED_TO_FIND_SUITABLE_NODE);\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"First node chosen: {}\", anchor);\n     }\n \n-    results.add(anchor);\n-    exclude.add(anchor);\n \n     // Choose the second node on different racks from anchor.\n-    DatanodeDetails nodeOnDifferentRack = chooseNodeBasedOnRackAwareness(\n+    DatanodeDetails nextNode = chooseNodeBasedOnRackAwareness(\n         healthyNodes, exclude,\n         nodeManager.getClusterNetworkTopologyMap(), anchor);\n-    if (nodeOnDifferentRack == null) {\n-      LOG.warn(\"Pipeline Placement: Unable to find 2nd node on different \" +\n-          \"racks that meets the criteria. Required nodes: {}, Found nodes:\" +\n-          \" {}\", nodesRequired, results.size());\n-      throw new SCMException(\"Unable to find required number of nodes.\",\n-          SCMException.ResultCodes.FAILED_TO_FIND_SUITABLE_NODE);\n+    if (nextNode != null) {\n+      // Rack awareness is detected.\n+      rackAwareness = true;\n+      results.add(nextNode);\n+      exclude.add(nextNode);\n+    } else {\n+      LOG.debug(\"Pipeline Placement: Unable to find 2nd node on different \" +\n+          \"rack based on rack awareness.\");\n     }\n     if (LOG.isDebugEnabled()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc2MDU3NA=="}, "originalCommit": {"oid": "572195da277f70d9db62ec76a4516fd6a7692c6e"}, "originalPosition": 87}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 46, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}