{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0NTM2MjM1", "number": 1451, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMToyMzoxN1rOEqRhiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMToyNTo0MVrOEqRk8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzYyNzYwOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManagerImpl.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMToyMzoxN1rOHcYpIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMjo1ODoxMlrOHlUGPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUyNTkyMg==", "bodyText": "NIT:\nI think it's easier to follow to move the condition to here:\n     if (enableFileSystemPaths) {\n       startKey = normalizeListKeyPath(startKey);\n       keyPrefix = normalizeListKeyPath(keyPrefix);\n    }\n\nDespite the name, the startKey and keyPrefix are not normalized if enableFileSystemPaths is false", "url": "https://github.com/apache/ozone/pull/1451#discussion_r499525922", "createdAt": "2020-10-05T11:23:17Z", "author": {"login": "elek"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManagerImpl.java", "diffHunk": "@@ -919,12 +920,32 @@ private boolean isKeyEmpty(OmKeyInfo keyInfo) {\n     // underlying table using an iterator. That automatically creates a\n     // snapshot of the data, so we don't need these locks at a higher level\n     // when we iterate.\n+\n+    startKey = normalizeListKeyPath(startKey);\n+    keyPrefix = normalizeListKeyPath(keyPrefix);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2be2252dc049911afdba0e8645579f03da7f1ffb"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgwNjE0OQ==", "bodyText": "As anyway this condition needs to be checked inside normalizeListKeyPath, so not performed check again here.", "url": "https://github.com/apache/ozone/pull/1451#discussion_r499806149", "createdAt": "2020-10-05T18:57:31Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManagerImpl.java", "diffHunk": "@@ -919,12 +920,32 @@ private boolean isKeyEmpty(OmKeyInfo keyInfo) {\n     // underlying table using an iterator. That automatically creates a\n     // snapshot of the data, so we don't need these locks at a higher level\n     // when we iterate.\n+\n+    startKey = normalizeListKeyPath(startKey);\n+    keyPrefix = normalizeListKeyPath(keyPrefix);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUyNTkyMg=="}, "originalCommit": {"oid": "2be2252dc049911afdba0e8645579f03da7f1ffb"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM1MjM0OQ==", "bodyText": "Sorry, I don't get it. Why do we need to check it inside normalizeListKeyPath.\nAs I wrote it's a very minor thing, but it seems to be better to move out the check from the method because it improves the readability (IMHO!).\nWhen somebody read the listKeys method it suggest the the keys are normalized. but in fact it's normalized only if enableFileSystemPaths. This can be confusing as the method name is normalizeListKeyPath and not something like normalizeListKeyPathIfNormalizationIsEnabled.\nI suggested moving out this condition from this method to improve the readibility, but if you think it's a bad idea, it can be ignored.", "url": "https://github.com/apache/ozone/pull/1451#discussion_r502352349", "createdAt": "2020-10-09T11:03:25Z", "author": {"login": "elek"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManagerImpl.java", "diffHunk": "@@ -919,12 +920,32 @@ private boolean isKeyEmpty(OmKeyInfo keyInfo) {\n     // underlying table using an iterator. That automatically creates a\n     // snapshot of the data, so we don't need these locks at a higher level\n     // when we iterate.\n+\n+    startKey = normalizeListKeyPath(startKey);\n+    keyPrefix = normalizeListKeyPath(keyPrefix);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUyNTkyMg=="}, "originalCommit": {"oid": "2be2252dc049911afdba0e8645579f03da7f1ffb"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg4ODYzOA==", "bodyText": "Thanks to explain it. I understood your point. Updated the code.", "url": "https://github.com/apache/ozone/pull/1451#discussion_r508888638", "createdAt": "2020-10-20T22:58:12Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManagerImpl.java", "diffHunk": "@@ -919,12 +920,32 @@ private boolean isKeyEmpty(OmKeyInfo keyInfo) {\n     // underlying table using an iterator. That automatically creates a\n     // snapshot of the data, so we don't need these locks at a higher level\n     // when we iterate.\n+\n+    startKey = normalizeListKeyPath(startKey);\n+    keyPrefix = normalizeListKeyPath(keyPrefix);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUyNTkyMg=="}, "originalCommit": {"oid": "2be2252dc049911afdba0e8645579f03da7f1ffb"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzYzMDMwOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManagerImpl.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMToyNDowMFrOHcYqoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMzowNTo1NVrOHlUQKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUyNjMwNQ==", "bodyText": "Is there any reason to keep these two features (return empty string for empty string + keep closing /) in here intead of moving to  OmUtils.normalizeKey(keyPath)", "url": "https://github.com/apache/ozone/pull/1451#discussion_r499526305", "createdAt": "2020-10-05T11:24:00Z", "author": {"login": "elek"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManagerImpl.java", "diffHunk": "@@ -919,12 +920,32 @@ private boolean isKeyEmpty(OmKeyInfo keyInfo) {\n     // underlying table using an iterator. That automatically creates a\n     // snapshot of the data, so we don't need these locks at a higher level\n     // when we iterate.\n+\n+    startKey = normalizeListKeyPath(startKey);\n+    keyPrefix = normalizeListKeyPath(keyPrefix);\n+\n     List<OmKeyInfo> keyList = metadataManager.listKeys(volumeName, bucketName,\n         startKey, keyPrefix, maxKeys);\n     refreshPipeline(keyList);\n     return keyList;\n   }\n \n+  private String normalizeListKeyPath(String keyPath) {\n+\n+    String normalizeKeyPath = keyPath;\n+    if (enableFileSystemPaths) {\n+      // For empty strings do nothing.\n+      if (StringUtils.isBlank(keyPath)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2be2252dc049911afdba0e8645579f03da7f1ffb"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgwNTU1NA==", "bodyText": "For key ending with \"/\" after normalizing it will return the key without trailing \"/\". As here the key intended to be searched is, I have added it back here. In my view removing \"/\" at the end when the user explicitly asked to search for keys end with \"/\", it might return results differently, as I don't want to change current semantics.\nExample:\nthe prefix is \"/a/b/c/d/\" -> after Normalize \"/a/b/c/d\"\nSo if we don't add \"/\" back, it will return keys with prefix \"/a/b/c/d\", but user intention here is to get keys in \"/a/b/c/d/\" so not to change semantics for this case handled in this method instead of common method used by all classes.\nAnd also for null not calling OmUtils.normalizeKey(keyPath), the Paths method will fail with NPE, so this is also considered a special case and handled it in this method.", "url": "https://github.com/apache/ozone/pull/1451#discussion_r499805554", "createdAt": "2020-10-05T18:56:21Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManagerImpl.java", "diffHunk": "@@ -919,12 +920,32 @@ private boolean isKeyEmpty(OmKeyInfo keyInfo) {\n     // underlying table using an iterator. That automatically creates a\n     // snapshot of the data, so we don't need these locks at a higher level\n     // when we iterate.\n+\n+    startKey = normalizeListKeyPath(startKey);\n+    keyPrefix = normalizeListKeyPath(keyPrefix);\n+\n     List<OmKeyInfo> keyList = metadataManager.listKeys(volumeName, bucketName,\n         startKey, keyPrefix, maxKeys);\n     refreshPipeline(keyList);\n     return keyList;\n   }\n \n+  private String normalizeListKeyPath(String keyPath) {\n+\n+    String normalizeKeyPath = keyPath;\n+    if (enableFileSystemPaths) {\n+      // For empty strings do nothing.\n+      if (StringUtils.isBlank(keyPath)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUyNjMwNQ=="}, "originalCommit": {"oid": "2be2252dc049911afdba0e8645579f03da7f1ffb"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM1Nzc3OA==", "bodyText": "Thanks to explain it.\n\nthe Paths method will fail with NPE, so this is also\n\nNot a big deal, but if we move the empty check, to normalizeKey, the method will be safe forever, and we don't need to do the empty check all the time when we need to call it.", "url": "https://github.com/apache/ozone/pull/1451#discussion_r502357778", "createdAt": "2020-10-09T11:15:25Z", "author": {"login": "elek"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManagerImpl.java", "diffHunk": "@@ -919,12 +920,32 @@ private boolean isKeyEmpty(OmKeyInfo keyInfo) {\n     // underlying table using an iterator. That automatically creates a\n     // snapshot of the data, so we don't need these locks at a higher level\n     // when we iterate.\n+\n+    startKey = normalizeListKeyPath(startKey);\n+    keyPrefix = normalizeListKeyPath(keyPrefix);\n+\n     List<OmKeyInfo> keyList = metadataManager.listKeys(volumeName, bucketName,\n         startKey, keyPrefix, maxKeys);\n     refreshPipeline(keyList);\n     return keyList;\n   }\n \n+  private String normalizeListKeyPath(String keyPath) {\n+\n+    String normalizeKeyPath = keyPath;\n+    if (enableFileSystemPaths) {\n+      // For empty strings do nothing.\n+      if (StringUtils.isBlank(keyPath)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUyNjMwNQ=="}, "originalCommit": {"oid": "2be2252dc049911afdba0e8645579f03da7f1ffb"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM1ODg2Mw==", "bodyText": "BTW (just a discussion not a code review comment): it can be useful to differentiate between normalization (removing/resolving .., //) and handling closing /. My impression is that we need different rules for them.\nThis is a good example here: you need the first (\"normalization\") but not the second. (Maybe two different method?)", "url": "https://github.com/apache/ozone/pull/1451#discussion_r502358863", "createdAt": "2020-10-09T11:17:45Z", "author": {"login": "elek"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManagerImpl.java", "diffHunk": "@@ -919,12 +920,32 @@ private boolean isKeyEmpty(OmKeyInfo keyInfo) {\n     // underlying table using an iterator. That automatically creates a\n     // snapshot of the data, so we don't need these locks at a higher level\n     // when we iterate.\n+\n+    startKey = normalizeListKeyPath(startKey);\n+    keyPrefix = normalizeListKeyPath(keyPrefix);\n+\n     List<OmKeyInfo> keyList = metadataManager.listKeys(volumeName, bucketName,\n         startKey, keyPrefix, maxKeys);\n     refreshPipeline(keyList);\n     return keyList;\n   }\n \n+  private String normalizeListKeyPath(String keyPath) {\n+\n+    String normalizeKeyPath = keyPath;\n+    if (enableFileSystemPaths) {\n+      // For empty strings do nothing.\n+      if (StringUtils.isBlank(keyPath)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUyNjMwNQ=="}, "originalCommit": {"oid": "2be2252dc049911afdba0e8645579f03da7f1ffb"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg5MTE3Nw==", "bodyText": "Thanks for clear explanation, I have updated to move null check to normalizeKey method.\n\nBTW (just a discussion not a code review comment): it can be useful to differentiate between normalization\n(removing/resolving .., //) and handling closing /. My impression is that we need different rules for them.\n\nUpdated OmUtils.normalizeKey to take the boolean flag to preseverTralingSlash if true will preserve it. In this way, this method can be used in listKey case with true, rest all code with false. Have a look in to it, and share ur suggestions on the approach.", "url": "https://github.com/apache/ozone/pull/1451#discussion_r508891177", "createdAt": "2020-10-20T23:05:55Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManagerImpl.java", "diffHunk": "@@ -919,12 +920,32 @@ private boolean isKeyEmpty(OmKeyInfo keyInfo) {\n     // underlying table using an iterator. That automatically creates a\n     // snapshot of the data, so we don't need these locks at a higher level\n     // when we iterate.\n+\n+    startKey = normalizeListKeyPath(startKey);\n+    keyPrefix = normalizeListKeyPath(keyPrefix);\n+\n     List<OmKeyInfo> keyList = metadataManager.listKeys(volumeName, bucketName,\n         startKey, keyPrefix, maxKeys);\n     refreshPipeline(keyList);\n     return keyList;\n   }\n \n+  private String normalizeListKeyPath(String keyPath) {\n+\n+    String normalizeKeyPath = keyPath;\n+    if (enableFileSystemPaths) {\n+      // For empty strings do nothing.\n+      if (StringUtils.isBlank(keyPath)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUyNjMwNQ=="}, "originalCommit": {"oid": "2be2252dc049911afdba0e8645579f03da7f1ffb"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzYzNjMyOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/OMClientRequest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMToyNTo0MVrOHcYuFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMToxMzozMVrOHfFb3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUyNzE4OA==", "bodyText": "Do we need this method at all? Is it possible to have invalid key path after OmUtils.normalizeKey? Seems to be an unnecessary additional step.", "url": "https://github.com/apache/ozone/pull/1451#discussion_r499527188", "createdAt": "2020-10-05T11:25:41Z", "author": {"login": "elek"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/OMClientRequest.java", "diffHunk": "@@ -298,21 +296,11 @@ public static String validateAndNormalizeKey(boolean enableFileSystemPaths,\n     }\n   }\n \n-  @SuppressFBWarnings(\"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n+\n   public static String validateAndNormalizeKey(String keyName)\n       throws OMException {\n-    String normalizedKeyName;\n-    if (keyName.startsWith(OM_KEY_PREFIX)) {\n-      normalizedKeyName = Paths.get(keyName).toUri().normalize().getPath();\n-    } else {\n-      normalizedKeyName = Paths.get(OM_KEY_PREFIX, keyName).toUri()\n-          .normalize().getPath();\n-    }\n-    if (!keyName.equals(normalizedKeyName)) {\n-      LOG.debug(\"Normalized key {} to {} \", keyName,\n-          normalizedKeyName.substring(1));\n-    }\n-    return isValidKeyPath(normalizedKeyName.substring(1));\n+    String normalizedKeyName = OmUtils.normalizeKey(keyName);\n+    return isValidKeyPath(normalizedKeyName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2be2252dc049911afdba0e8645579f03da7f1ffb"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgwMDkxNw==", "bodyText": "Yes, there are a few cases.\nFor examples refer testNormalizeKeyInvalidPaths test in TestNormalizePaths.java\nhttps://github.com/apache/hadoop-ozone/blob/master/hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/request/TestNormalizePaths.java#L71", "url": "https://github.com/apache/ozone/pull/1451#discussion_r499800917", "createdAt": "2020-10-05T18:47:47Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/OMClientRequest.java", "diffHunk": "@@ -298,21 +296,11 @@ public static String validateAndNormalizeKey(boolean enableFileSystemPaths,\n     }\n   }\n \n-  @SuppressFBWarnings(\"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n+\n   public static String validateAndNormalizeKey(String keyName)\n       throws OMException {\n-    String normalizedKeyName;\n-    if (keyName.startsWith(OM_KEY_PREFIX)) {\n-      normalizedKeyName = Paths.get(keyName).toUri().normalize().getPath();\n-    } else {\n-      normalizedKeyName = Paths.get(OM_KEY_PREFIX, keyName).toUri()\n-          .normalize().getPath();\n-    }\n-    if (!keyName.equals(normalizedKeyName)) {\n-      LOG.debug(\"Normalized key {} to {} \", keyName,\n-          normalizedKeyName.substring(1));\n-    }\n-    return isValidKeyPath(normalizedKeyName.substring(1));\n+    String normalizedKeyName = OmUtils.normalizeKey(keyName);\n+    return isValidKeyPath(normalizedKeyName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUyNzE4OA=="}, "originalCommit": {"oid": "2be2252dc049911afdba0e8645579f03da7f1ffb"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM1Njk1Ng==", "bodyText": "Got it, thanks a lot. These are the cases where the normalization will result an invalid path due to the too many .. (for example)", "url": "https://github.com/apache/ozone/pull/1451#discussion_r502356956", "createdAt": "2020-10-09T11:13:31Z", "author": {"login": "elek"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/OMClientRequest.java", "diffHunk": "@@ -298,21 +296,11 @@ public static String validateAndNormalizeKey(boolean enableFileSystemPaths,\n     }\n   }\n \n-  @SuppressFBWarnings(\"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n+\n   public static String validateAndNormalizeKey(String keyName)\n       throws OMException {\n-    String normalizedKeyName;\n-    if (keyName.startsWith(OM_KEY_PREFIX)) {\n-      normalizedKeyName = Paths.get(keyName).toUri().normalize().getPath();\n-    } else {\n-      normalizedKeyName = Paths.get(OM_KEY_PREFIX, keyName).toUri()\n-          .normalize().getPath();\n-    }\n-    if (!keyName.equals(normalizedKeyName)) {\n-      LOG.debug(\"Normalized key {} to {} \", keyName,\n-          normalizedKeyName.substring(1));\n-    }\n-    return isValidKeyPath(normalizedKeyName.substring(1));\n+    String normalizedKeyName = OmUtils.normalizeKey(keyName);\n+    return isValidKeyPath(normalizedKeyName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUyNzE4OA=="}, "originalCommit": {"oid": "2be2252dc049911afdba0e8645579f03da7f1ffb"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4938, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}