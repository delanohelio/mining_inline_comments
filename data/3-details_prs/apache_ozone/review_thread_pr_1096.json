{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2ODQ5NDQ0", "number": 1096, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNjoyNjo1MFrOERhk5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwOToyNzowNVrOESTuuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODExMzY0OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/scm/ScmConfigKeys.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNjoyNjo1MFrOG2SQTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNToxNjo0NlrOG2jXRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU3NTM3Mw==", "bodyText": "nit. Suggest rename ozone.scm.pipeline.choose.impl --> ozone.scm.pipeline.choose.policy.impl", "url": "https://github.com/apache/ozone/pull/1096#discussion_r459575373", "createdAt": "2020-07-23T16:26:50Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/scm/ScmConfigKeys.java", "diffHunk": "@@ -287,6 +287,9 @@\n   public static final String OZONE_SCM_PIPELINE_OWNER_CONTAINER_COUNT =\n       \"ozone.scm.pipeline.owner.container.count\";\n   public static final int OZONE_SCM_PIPELINE_OWNER_CONTAINER_COUNT_DEFAULT = 3;\n+  // Pipeline choose policy:\n+  public static final String OZONE_SCM_PIPELINE_CHOOSE_IMPL_KEY =\n+      \"ozone.scm.pipeline.choose.impl\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dfadd99d7b8320bb454d74863cadb5146345b0e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg1NTY4NQ==", "bodyText": "Done.", "url": "https://github.com/apache/ozone/pull/1096#discussion_r459855685", "createdAt": "2020-07-24T05:16:46Z", "author": {"login": "maobaolong"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/scm/ScmConfigKeys.java", "diffHunk": "@@ -287,6 +287,9 @@\n   public static final String OZONE_SCM_PIPELINE_OWNER_CONTAINER_COUNT =\n       \"ozone.scm.pipeline.owner.container.count\";\n   public static final int OZONE_SCM_PIPELINE_OWNER_CONTAINER_COUNT_DEFAULT = 3;\n+  // Pipeline choose policy:\n+  public static final String OZONE_SCM_PIPELINE_CHOOSE_IMPL_KEY =\n+      \"ozone.scm.pipeline.choose.impl\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU3NTM3Mw=="}, "originalCommit": {"oid": "8dfadd99d7b8320bb454d74863cadb5146345b0e"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODEyOTM1OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/scm/PipelineChoosePolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNjozMTowM1rOG2Sajg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMzo0OToxM1rOG2wD_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU3Nzk5OA==", "bodyText": "@maobaolong For my knowledge, can you list a few pipeline selection policies that you envision? I am wondering if we are OK with just a List<Pipeline> as an argument.", "url": "https://github.com/apache/ozone/pull/1096#discussion_r459577998", "createdAt": "2020-07-23T16:31:03Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/scm/PipelineChoosePolicy.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.hadoop.hdds.scm;\n+\n+import org.apache.hadoop.hdds.scm.pipeline.Pipeline;\n+\n+import java.util.List;\n+\n+/**\n+ * A {@link PipelineChoosePolicy} support choosing pipeline from exist list.\n+ */\n+public interface PipelineChoosePolicy {\n+\n+  /**\n+   * Given an initial list of pipelines, return one of the pipelines.\n+   *\n+   * @param pipelineList list of pipelines.\n+   * @return one of the pipelines.\n+   */\n+  Pipeline choosePipeline(List<Pipeline> pipelineList);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dfadd99d7b8320bb454d74863cadb5146345b0e"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA2Mzc0Mg==", "bodyText": "@avijayanhwx Thank you for your suggestion, I add a arguments map, for extension purpose, i use Object type as value type.", "url": "https://github.com/apache/ozone/pull/1096#discussion_r460063742", "createdAt": "2020-07-24T13:49:13Z", "author": {"login": "maobaolong"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/scm/PipelineChoosePolicy.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.hadoop.hdds.scm;\n+\n+import org.apache.hadoop.hdds.scm.pipeline.Pipeline;\n+\n+import java.util.List;\n+\n+/**\n+ * A {@link PipelineChoosePolicy} support choosing pipeline from exist list.\n+ */\n+public interface PipelineChoosePolicy {\n+\n+  /**\n+   * Given an initial list of pipelines, return one of the pipelines.\n+   *\n+   * @param pipelineList list of pipelines.\n+   * @return one of the pipelines.\n+   */\n+  Pipeline choosePipeline(List<Pipeline> pipelineList);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU3Nzk5OA=="}, "originalCommit": {"oid": "8dfadd99d7b8320bb454d74863cadb5146345b0e"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODEzMjgzOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/block/BlockManagerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNjozMjowNVrOG2Sc2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNToyODoxMFrOG2jgkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU3ODU4Ng==", "bodyText": "We could get a runtime exception from a plugged in policy. Can we have to fallback to default (Random) on error after logging?", "url": "https://github.com/apache/ozone/pull/1096#discussion_r459578586", "createdAt": "2020-07-23T16:32:05Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/block/BlockManagerImpl.java", "diffHunk": "@@ -222,9 +224,7 @@ public AllocatedBlock allocateBlock(final long size, ReplicationType type,\n       }\n \n       if (null == pipeline) {\n-        // TODO: #CLUTIL Make the selection policy driven.\n-        pipeline = availablePipelines\n-            .get((int) (Math.random() * availablePipelines.size()));\n+        pipeline = pipelineChoosePolicy.choosePipeline(availablePipelines);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dfadd99d7b8320bb454d74863cadb5146345b0e"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg1ODA2NA==", "bodyText": "Done.", "url": "https://github.com/apache/ozone/pull/1096#discussion_r459858064", "createdAt": "2020-07-24T05:28:10Z", "author": {"login": "maobaolong"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/block/BlockManagerImpl.java", "diffHunk": "@@ -222,9 +224,7 @@ public AllocatedBlock allocateBlock(final long size, ReplicationType type,\n       }\n \n       if (null == pipeline) {\n-        // TODO: #CLUTIL Make the selection policy driven.\n-        pipeline = availablePipelines\n-            .get((int) (Math.random() * availablePipelines.size()));\n+        pipeline = pipelineChoosePolicy.choosePipeline(availablePipelines);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU3ODU4Ng=="}, "originalCommit": {"oid": "8dfadd99d7b8320bb454d74863cadb5146345b0e"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODE4NzI4OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/choose/algorithms/PipelineChoosePolicyFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNjo0Njo1N1rOG2S_Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMzo1NTowMlrOG2wRlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU4NzM5NA==", "bodyText": "We are relying on default constructor here. And we pass in only List<Pipeline> through the API. We may have policies that need more information like the topology, client address etc as well. Can we make sure we support them without change of interface later?", "url": "https://github.com/apache/ozone/pull/1096#discussion_r459587394", "createdAt": "2020-07-23T16:46:57Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/choose/algorithms/PipelineChoosePolicyFactory.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hdds.scm.pipeline.choose.algorithms;\n+\n+import org.apache.hadoop.hdds.conf.ConfigurationSource;\n+import org.apache.hadoop.hdds.scm.PipelineChoosePolicy;\n+import org.apache.hadoop.hdds.scm.ScmConfigKeys;\n+import org.apache.hadoop.hdds.scm.exceptions.SCMException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.Constructor;\n+\n+/**\n+ * A factory to create pipeline choose policy instance based on configuration\n+ * property {@link ScmConfigKeys#OZONE_SCM_PIPELINE_CHOOSE_IMPL_KEY}.\n+ */\n+public final class PipelineChoosePolicyFactory {\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(PipelineChoosePolicyFactory.class);\n+\n+  private static final Class<? extends PipelineChoosePolicy>\n+      OZONE_SCM_PIPELINE_CHOOSE_IMPL_DEFAULT =\n+      RandomPipelineChoosePolicy.class;\n+\n+  private PipelineChoosePolicyFactory() {\n+  }\n+\n+  public static PipelineChoosePolicy getPolicy(\n+      ConfigurationSource conf) throws SCMException {\n+    final Class<? extends PipelineChoosePolicy> policyClass = conf\n+        .getClass(ScmConfigKeys.OZONE_SCM_PIPELINE_CHOOSE_IMPL_KEY,\n+            OZONE_SCM_PIPELINE_CHOOSE_IMPL_DEFAULT,\n+            PipelineChoosePolicy.class);\n+    Constructor<? extends PipelineChoosePolicy> constructor;\n+    try {\n+      constructor = policyClass.getDeclaredConstructor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dfadd99d7b8320bb454d74863cadb5146345b0e"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA2NzIyMQ==", "bodyText": "Now it cannot get the client address while allocate block. After this PR, we can create a new ticket to add client parameter to the allocateblock method, then, I can write a localFirstPolicy. Also, I plan to let datanode report its utilized to scm, so i can implement a LowLoadFirstPolicy, we can also collect the pipeline vote count, batch size, use these information, we can get write many kind of choose pipeline policy.", "url": "https://github.com/apache/ozone/pull/1096#discussion_r460067221", "createdAt": "2020-07-24T13:55:02Z", "author": {"login": "maobaolong"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/choose/algorithms/PipelineChoosePolicyFactory.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hdds.scm.pipeline.choose.algorithms;\n+\n+import org.apache.hadoop.hdds.conf.ConfigurationSource;\n+import org.apache.hadoop.hdds.scm.PipelineChoosePolicy;\n+import org.apache.hadoop.hdds.scm.ScmConfigKeys;\n+import org.apache.hadoop.hdds.scm.exceptions.SCMException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.Constructor;\n+\n+/**\n+ * A factory to create pipeline choose policy instance based on configuration\n+ * property {@link ScmConfigKeys#OZONE_SCM_PIPELINE_CHOOSE_IMPL_KEY}.\n+ */\n+public final class PipelineChoosePolicyFactory {\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(PipelineChoosePolicyFactory.class);\n+\n+  private static final Class<? extends PipelineChoosePolicy>\n+      OZONE_SCM_PIPELINE_CHOOSE_IMPL_DEFAULT =\n+      RandomPipelineChoosePolicy.class;\n+\n+  private PipelineChoosePolicyFactory() {\n+  }\n+\n+  public static PipelineChoosePolicy getPolicy(\n+      ConfigurationSource conf) throws SCMException {\n+    final Class<? extends PipelineChoosePolicy> policyClass = conf\n+        .getClass(ScmConfigKeys.OZONE_SCM_PIPELINE_CHOOSE_IMPL_KEY,\n+            OZONE_SCM_PIPELINE_CHOOSE_IMPL_DEFAULT,\n+            PipelineChoosePolicy.class);\n+    Constructor<? extends PipelineChoosePolicy> constructor;\n+    try {\n+      constructor = policyClass.getDeclaredConstructor();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU4NzM5NA=="}, "originalCommit": {"oid": "8dfadd99d7b8320bb454d74863cadb5146345b0e"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjMxMzQ0OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/common/src/main/resources/ozone-default.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwOToyMjoxOVrOG3aidA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwOToyMjoxOVrOG3aidA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc1OTY2OA==", "bodyText": "I would prefer to use the new, Java based configuration API:\nhttps://cwiki.apache.org/confluence/display/HADOOP/Java-based+configuration+API", "url": "https://github.com/apache/ozone/pull/1096#discussion_r460759668", "createdAt": "2020-07-27T09:22:19Z", "author": {"login": "elek"}, "path": "hadoop-hdds/common/src/main/resources/ozone-default.xml", "diffHunk": "@@ -814,6 +814,20 @@\n       value.\n     </description>\n   </property>\n+  <property>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bdcbb95a31a18382e2b6b9c14f8722916e5525c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjMxMzcxOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/interface-server/src/main/resources/proto.lock", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwOToyMjoyMlrOG3aimA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwOToyMjoyMlrOG3aimA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc1OTcwNA==", "bodyText": "Proto.lock file change should be excluded. the proto.lock should represent and old state: the last released state to use it as a base for comparison.\nRebase to the latest master and you won't see the changed proto lock files (which makes it easy to add lock files accidentally)", "url": "https://github.com/apache/ozone/pull/1096#discussion_r460759704", "createdAt": "2020-07-27T09:22:22Z", "author": {"login": "elek"}, "path": "hadoop-hdds/interface-server/src/main/resources/proto.lock", "diffHunk": "@@ -1209,6 +1209,10 @@\n               {\n                 \"name\": \"INTERNAL_ERROR\",\n                 \"integer\": 29\n+              },", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bdcbb95a31a18382e2b6b9c14f8722916e5525c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjMzMDgzOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/block/BlockManagerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwOToyNzowNVrOG3atbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwOToyNzowNVrOG3atbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc2MjQ3Ng==", "bodyText": "It seems to be a standard parameter which is added to all the implementation. Wouldn't be better to add it as a type-safe field? Or we can use a PipelineRequestInformation class instead of the Map<String,Object> if you would like to make it easier to add more information latest.", "url": "https://github.com/apache/ozone/pull/1096#discussion_r460762476", "createdAt": "2020-07-27T09:27:05Z", "author": {"login": "elek"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/block/BlockManagerImpl.java", "diffHunk": "@@ -222,9 +224,11 @@ public AllocatedBlock allocateBlock(final long size, ReplicationType type,\n       }\n \n       if (null == pipeline) {\n-        // TODO: #CLUTIL Make the selection policy driven.\n-        pipeline = availablePipelines\n-            .get((int) (Math.random() * availablePipelines.size()));\n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\n+            PipelineChoosePolicy.PIPELINE_CHOOSE_POLICY_PARAM_SIZE, size);\n+        pipeline = pipelineChoosePolicy.choosePipeline(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bdcbb95a31a18382e2b6b9c14f8722916e5525c"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4078, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}