{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwMjc1NDU1", "number": 1339, "title": "HDDS-4131. Container report should update container key count and bytes used if they differ in SCM", "bodyText": "What changes were proposed in this pull request?\nIn HDDS-4037 it was noted that when blocks are deleted from closed containers, the bytesUsed and Key Count metrics on the SCM container are not updated correctly.\nThese stats should be updated via the container reports issued by the DNs to SCM periodically. However, in AbstractContainerReportHandler#updateContainerStats, the code assumes the values are always increasing and it will not update them if they are decreasing:\n  private void updateContainerStats(final ContainerID containerId,\n                                    final ContainerReplicaProto replicaProto)\n      throws ContainerNotFoundException {\n    if (isHealthy(replicaProto::getState)) {\n      final ContainerInfo containerInfo = containerManager\n          .getContainer(containerId);\n\n      if (containerInfo.getSequenceId() <\n          replicaProto.getBlockCommitSequenceId()) {\n        containerInfo.updateSequenceId(\n            replicaProto.getBlockCommitSequenceId());\n      }\n      if (containerInfo.getUsedBytes() < replicaProto.getUsed()) {\n        containerInfo.setUsedBytes(replicaProto.getUsed());\n      }\n      if (containerInfo.getNumberOfKeys() < replicaProto.getKeyCount()) {\n        containerInfo.setNumberOfKeys(replicaProto.getKeyCount());\n      }\n    }\n  }\n\nIn HDDS-4037 a change was made to the Replication Manager, so it updates the stats. However I don't believe that is the correct place to perform this check, and the issue is caused by the logic shared above.\nIn this Jira, I have removed the changes to Replication Manager in HDDS-4037 (but retained the other changes in that Jira), ensuring the problem statistics are only updated via the containers reports if they are different in SCM from what is reported.\nWhat is the link to the Apache JIRA\nhttps://issues.apache.org/jira/browse/HDDS-4131\nHow was this patch tested?\nSmall change to existing unit test. Used it to reproduce the problem before making the changed.", "createdAt": "2020-08-19T16:16:02Z", "url": "https://github.com/apache/ozone/pull/1339", "merged": true, "mergeCommit": {"oid": "199512b42d6744f56d49462b90e25f5eaf7ac731"}, "closed": true, "closedAt": "2020-09-02T06:10:55Z", "author": {"login": "sodonnel"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdAd9mdAH2gAyNDcwMjc1NDU1OjYyZmMyOGU3N2IzNmFlNTgyNGFkMGZjOTBiODIzN2MzZjczZTg3Zjc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdDVppLAH2gAyNDcwMjc1NDU1OmFkMGJlYmUyZmRlYjQ0MGI4M2YwMjk4ZTQ0ZjRjODk3MzNlNmU1ZjI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "62fc28e77b36ae5824ad0fc90b8237c3f73e87f7", "author": {"user": null}, "url": "https://github.com/apache/ozone/commit/62fc28e77b36ae5824ad0fc90b8237c3f73e87f7", "committedDate": "2020-08-19T16:11:46Z", "message": "Changes to fix the issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77ebff109d4ffa310b8d37049dc9d39babc27582", "author": {"user": null}, "url": "https://github.com/apache/ozone/commit/77ebff109d4ffa310b8d37049dc9d39babc27582", "committedDate": "2020-08-21T14:34:59Z", "message": "Consider all replicas when adjusting keyCount and UsedBytes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2870dc6841090d9706f080391841fa1fdd6cddd0", "author": {"user": null}, "url": "https://github.com/apache/ozone/commit/2870dc6841090d9706f080391841fa1fdd6cddd0", "committedDate": "2020-08-23T13:31:24Z", "message": "Added tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczMzY1NjU2", "url": "https://github.com/apache/ozone/pull/1339#pullrequestreview-473365656", "createdAt": "2020-08-24T11:08:08Z", "commit": {"oid": "77ebff109d4ffa310b8d37049dc9d39babc27582"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowODozN1rOHFfr2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToyNDoyMFrOHFgIUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyNDA1Nw==", "bodyText": "I think we can skip filtering the replicas for \"others\" (and omit the code for that), since the resulting count/bytes values are the min/max of all replicas, including this one, either way.  If we loop over all replicas, the iteration for the current replica will be a \"no-op\", not change the result.", "url": "https://github.com/apache/ozone/pull/1339#discussion_r475524057", "createdAt": "2020-08-24T11:08:37Z", "author": {"login": "adoroszlai"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/container/AbstractContainerReportHandler.java", "diffHunk": "@@ -103,14 +108,44 @@ private void updateContainerStats(final ContainerID containerId,\n         containerInfo.updateSequenceId(\n             replicaProto.getBlockCommitSequenceId());\n       }\n+      List<ContainerReplica> otherReplicas =\n+          getOtherReplicas(containerId, datanodeDetails);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2870dc6841090d9706f080391841fa1fdd6cddd0"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUzMTM0Nw==", "bodyText": "Note: not a big deal, but it seems usedBytes and keyCount values are swapped compared to the original.", "url": "https://github.com/apache/ozone/pull/1339#discussion_r475531347", "createdAt": "2020-08-24T11:24:20Z", "author": {"login": "adoroszlai"}, "path": "hadoop-hdds/server-scm/src/test/java/org/apache/hadoop/hdds/scm/container/TestContainerReportHandler.java", "diffHunk": "@@ -483,9 +485,167 @@ public void testQuasiClosedToClosed()\n     Assert.assertEquals(LifeCycleState.CLOSED, containerOne.getState());\n   }\n \n+  @Test\n+  public void openContainerKeyAndBytesUsedUpdatedToMinimumOfAllReplicas()\n+      throws SCMException {\n+    final ContainerReportHandler reportHandler = new ContainerReportHandler(\n+        nodeManager, containerManager);\n+    final Iterator<DatanodeDetails> nodeIterator = nodeManager.getNodes(\n+        NodeState.HEALTHY).iterator();\n+\n+    final DatanodeDetails datanodeOne = nodeIterator.next();\n+    final DatanodeDetails datanodeTwo = nodeIterator.next();\n+    final DatanodeDetails datanodeThree = nodeIterator.next();\n+\n+    final ContainerReplicaProto.State replicaState\n+        = ContainerReplicaProto.State.OPEN;\n+    final ContainerInfo containerOne = getContainer(LifeCycleState.OPEN);\n+\n+    final Set<ContainerID> containerIDSet = new HashSet<>();\n+    containerIDSet.add(containerOne.containerID());\n+\n+    containerStateManager.loadContainer(containerOne);\n+    // Container loaded, no replicas reported from DNs. Expect zeros for\n+    // usage values.\n+    assertEquals(0L, containerOne.getUsedBytes());\n+    assertEquals(0L, containerOne.getNumberOfKeys());\n+\n+    reportHandler.onMessage(getContainerReportFromDatanode(\n+        containerOne.containerID(), replicaState,\n+        datanodeOne, 50L, 60L), publisher);\n+\n+    // Single replica reported - ensure values are updated\n+    assertEquals(50L, containerOne.getUsedBytes());\n+    assertEquals(60L, containerOne.getNumberOfKeys());\n+\n+    reportHandler.onMessage(getContainerReportFromDatanode(\n+        containerOne.containerID(), replicaState,\n+        datanodeTwo, 50L, 60L), publisher);\n+    reportHandler.onMessage(getContainerReportFromDatanode(\n+        containerOne.containerID(), replicaState,\n+        datanodeThree, 50L, 60L), publisher);\n+\n+    // All 3 DNs are reporting the same values. Counts should be as expected.\n+    assertEquals(50L, containerOne.getUsedBytes());\n+    assertEquals(60L, containerOne.getNumberOfKeys());\n+\n+    // Now each DN reports a different lesser value. Counts should be the min\n+    // reported.\n+    reportHandler.onMessage(getContainerReportFromDatanode(\n+        containerOne.containerID(), replicaState,\n+        datanodeOne, 1L, 10L), publisher);\n+    reportHandler.onMessage(getContainerReportFromDatanode(\n+        containerOne.containerID(), replicaState,\n+        datanodeTwo, 2L, 11L), publisher);\n+    reportHandler.onMessage(getContainerReportFromDatanode(\n+        containerOne.containerID(), replicaState,\n+        datanodeThree, 3L, 12L), publisher);\n+\n+    // All 3 DNs are reporting different values. The actual value should be the\n+    // minimum.\n+    assertEquals(1L, containerOne.getUsedBytes());\n+    assertEquals(10L, containerOne.getNumberOfKeys());\n+\n+    // Have the lowest value report a higher value and ensure the new value\n+    // is the minimum\n+    reportHandler.onMessage(getContainerReportFromDatanode(\n+        containerOne.containerID(), replicaState,\n+        datanodeOne, 3L, 12L), publisher);\n+\n+    assertEquals(2L, containerOne.getUsedBytes());\n+    assertEquals(11L, containerOne.getNumberOfKeys());\n+  }\n+\n+  @Test\n+  public void notOpenContainerKeyAndBytesUsedUpdatedToMaximumOfAllReplicas()\n+      throws SCMException {\n+    final ContainerReportHandler reportHandler = new ContainerReportHandler(\n+        nodeManager, containerManager);\n+    final Iterator<DatanodeDetails> nodeIterator = nodeManager.getNodes(\n+        NodeState.HEALTHY).iterator();\n+\n+    final DatanodeDetails datanodeOne = nodeIterator.next();\n+    final DatanodeDetails datanodeTwo = nodeIterator.next();\n+    final DatanodeDetails datanodeThree = nodeIterator.next();\n+\n+    final ContainerReplicaProto.State replicaState\n+        = ContainerReplicaProto.State.CLOSED;\n+    final ContainerInfo containerOne = getContainer(LifeCycleState.CLOSED);\n+\n+    final Set<ContainerID> containerIDSet = new HashSet<>();\n+    containerIDSet.add(containerOne.containerID());\n+\n+    containerStateManager.loadContainer(containerOne);\n+    // Container loaded, no replicas reported from DNs. Expect zeros for\n+    // usage values.\n+    assertEquals(0L, containerOne.getUsedBytes());\n+    assertEquals(0L, containerOne.getNumberOfKeys());\n+\n+    reportHandler.onMessage(getContainerReportFromDatanode(\n+        containerOne.containerID(), replicaState,\n+        datanodeOne, 50L, 60L), publisher);\n+\n+    // Single replica reported - ensure values are updated\n+    assertEquals(50L, containerOne.getUsedBytes());\n+    assertEquals(60L, containerOne.getNumberOfKeys());\n+\n+    reportHandler.onMessage(getContainerReportFromDatanode(\n+        containerOne.containerID(), replicaState,\n+        datanodeTwo, 50L, 60L), publisher);\n+    reportHandler.onMessage(getContainerReportFromDatanode(\n+        containerOne.containerID(), replicaState,\n+        datanodeThree, 50L, 60L), publisher);\n+\n+    // All 3 DNs are reporting the same values. Counts should be as expected.\n+    assertEquals(50L, containerOne.getUsedBytes());\n+    assertEquals(60L, containerOne.getNumberOfKeys());\n+\n+    // Now each DN reports a different lesser value. Counts should be the max\n+    // reported.\n+    reportHandler.onMessage(getContainerReportFromDatanode(\n+        containerOne.containerID(), replicaState,\n+        datanodeOne, 1L, 10L), publisher);\n+    reportHandler.onMessage(getContainerReportFromDatanode(\n+        containerOne.containerID(), replicaState,\n+        datanodeTwo, 2L, 11L), publisher);\n+    reportHandler.onMessage(getContainerReportFromDatanode(\n+        containerOne.containerID(), replicaState,\n+        datanodeThree, 3L, 12L), publisher);\n+\n+    // All 3 DNs are reporting different values. The actual value should be the\n+    // maximum.\n+    assertEquals(3L, containerOne.getUsedBytes());\n+    assertEquals(12L, containerOne.getNumberOfKeys());\n+\n+    // Have the highest value report a lower value and ensure the new value\n+    // is the new maximumu\n+    reportHandler.onMessage(getContainerReportFromDatanode(\n+        containerOne.containerID(), replicaState,\n+        datanodeThree, 1L, 10L), publisher);\n+\n+    assertEquals(2L, containerOne.getUsedBytes());\n+    assertEquals(11L, containerOne.getNumberOfKeys());\n+  }\n+\n+  private ContainerReportFromDatanode getContainerReportFromDatanode(\n+      ContainerID containerId, ContainerReplicaProto.State state,\n+      DatanodeDetails dn, long bytesUsed, long keyCount) {\n+    ContainerReportsProto containerReport = getContainerReportsProto(\n+        containerId, state, dn.getUuidString(), bytesUsed, keyCount);\n+\n+    return new ContainerReportFromDatanode(dn, containerReport);\n+  }\n+\n   private static ContainerReportsProto getContainerReportsProto(\n       final ContainerID containerId, final ContainerReplicaProto.State state,\n       final String originNodeId) {\n+    return getContainerReportsProto(containerId, state, originNodeId,\n+        100000000L, 2000000000L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2870dc6841090d9706f080391841fa1fdd6cddd0"}, "originalPosition": 173}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67e1cb2f80ed13a2de9acdb1a18b14cc17eda168", "author": {"user": null}, "url": "https://github.com/apache/ozone/commit/67e1cb2f80ed13a2de9acdb1a18b14cc17eda168", "committedDate": "2020-08-24T12:03:56Z", "message": "Fixed swapped values in test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NDMzNTM5", "url": "https://github.com/apache/ozone/pull/1339#pullrequestreview-476433539", "createdAt": "2020-08-27T06:54:56Z", "commit": {"oid": "67e1cb2f80ed13a2de9acdb1a18b14cc17eda168"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNjo1NDo1NlrOHICz6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNjo1NDo1NlrOHICz6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE5NjcxNA==", "bodyText": "Prefer to keep the KeyCount and UsedKeys persist action here.", "url": "https://github.com/apache/ozone/pull/1339#discussion_r478196714", "createdAt": "2020-08-27T06:54:56Z", "author": {"login": "ChenSammi"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/container/SCMContainerManager.java", "diffHunk": "@@ -398,8 +398,6 @@ public void updateDeleteTransactionId(Map<Long, Long> deleteTransactionMap)\n               SCMException.ResultCodes.FAILED_TO_FIND_CONTAINER);\n         }\n         containerInfo.updateDeleteTransactionId(entry.getValue());\n-        containerInfo.setNumberOfKeys(containerInfoInMem.getNumberOfKeys());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67e1cb2f80ed13a2de9acdb1a18b14cc17eda168"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f4136c1c62e5353a343d1460cab1b978ed25826", "author": {"user": null}, "url": "https://github.com/apache/ozone/commit/0f4136c1c62e5353a343d1460cab1b978ed25826", "committedDate": "2020-08-28T09:31:01Z", "message": "Replace numberOfKeys and getUsedBytes in updateDeleteTransactionId"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad0bebe2fdeb440b83f0298e44f4c89733e6e5f2", "author": {"user": null}, "url": "https://github.com/apache/ozone/commit/ad0bebe2fdeb440b83f0298e44f4c89733e6e5f2", "committedDate": "2020-08-28T14:12:30Z", "message": "Trigger build"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2747, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}