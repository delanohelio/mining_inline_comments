{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2ODI2MjU4", "number": 1322, "title": "HDDS-3829. Introduce Layout Feature interface in Ozone.", "bodyText": "What changes were proposed in this pull request?\n\nImplement the concept of a 'Layout Feature' in Ozone (with sample usage in Ozone Manager), which defines a specific change in on-disk layout in Ozone.\nEvery feature is associated with a layout version, and an API corresponding to the feature cannot be invoked (throws NOT_SUPPORTED_OPERATION) before finalization.\nCreated an annotation based 'aspect' for \"guarding\" new APIs that are introduced by Layout Features. Check out TestOMLayoutFeatureAspect#testCheckLayoutFeature.\nAdded sample features and tests for ease of review (To be removed before commit).\nCreated an abstract VersionManager and an inherited OM Version manager to initialize features, check if feature is allowed, check need to finalize, do finalization.\n\nWhat is the link to the Apache JIRA\nhttps://issues.apache.org/jira/browse/HDDS-3829\nHow was this patch tested?\nUnit tested.", "createdAt": "2020-08-12T14:56:27Z", "url": "https://github.com/apache/ozone/pull/1322", "merged": true, "mergeCommit": {"oid": "7bbd4805423933064c11b39dc91b5abfdd9c6c7a"}, "closed": true, "closedAt": "2020-08-26T00:26:43Z", "author": {"login": "avijayanhwx"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-MrJ3gH2gAyNDY2ODI2MjU4OjNmOGU3YjJiZjY3NzAzNDBlYWEzYzdjNTRhMjNjYTJiZjhlOTkwZTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdDMm_-AFqTQ3NzIyMDE2NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3f8e7b2bf6770340eaa3c7c54a23ca2bf8e990e5", "author": {"user": {"login": "avijayanhwx", "name": null}}, "url": "https://github.com/apache/ozone/commit/3f8e7b2bf6770340eaa3c7c54a23ca2bf8e990e5", "committedDate": "2020-08-12T14:55:23Z", "message": "HDDS-3829. Introduce Layout Feature interface in Ozone."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5349fa8ed7027ace8d79225814ef1e13ce9856e3", "author": {"user": {"login": "avijayanhwx", "name": null}}, "url": "https://github.com/apache/ozone/commit/5349fa8ed7027ace8d79225814ef1e13ce9856e3", "committedDate": "2020-08-12T15:07:47Z", "message": "Fix rat and checkstyle."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4MjU1NjE0", "url": "https://github.com/apache/ozone/pull/1322#pullrequestreview-468255614", "createdAt": "2020-08-17T08:13:12Z", "commit": {"oid": "5349fa8ed7027ace8d79225814ef1e13ce9856e3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwODoxMzoxMlrOHBeuCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwODoxMzoxMlrOHBeuCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMxMzkyOA==", "bodyText": "This might go into a separate pull request and we may commit it way before the branch is commited.", "url": "https://github.com/apache/ozone/pull/1322#discussion_r471313928", "createdAt": "2020-08-17T08:13:12Z", "author": {"login": "fapifta"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/s3/security/package-info.java", "diffHunk": "@@ -19,4 +19,4 @@\n /**\n  * Package contains classes related to S3 security responses.\n  */\n-package org.apache.hadoop.ozone.om.request.s3.security;\n+package org.apache.hadoop.ozone.om.response.s3.security;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5349fa8ed7027ace8d79225814ef1e13ce9856e3"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4Mjc4NjQ5", "url": "https://github.com/apache/ozone/pull/1322#pullrequestreview-468278649", "createdAt": "2020-08-17T08:46:47Z", "commit": {"oid": "5349fa8ed7027ace8d79225814ef1e13ce9856e3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwODo0Njo0OFrOHBf2Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwODo0Njo0OFrOHBf2Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMzMjQ1MQ==", "bodyText": "Can you please elaborate what will this line do in the test, and why it has to be here? It is unclear whether it tests anything, or this is just a leftover from a thought.", "url": "https://github.com/apache/ozone/pull/1322#discussion_r471332451", "createdAt": "2020-08-17T08:46:48Z", "author": {"login": "fapifta"}, "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/upgrade/TestOMVersionManager.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.upgrade;\n+\n+import static org.apache.hadoop.ozone.om.upgrade.OMLayoutFeatureCatalog.OMLayoutFeature.CREATE_EC;\n+import static org.apache.hadoop.ozone.om.upgrade.OMLayoutFeatureCatalog.OMLayoutFeature.INITIAL_VERSION;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.IOException;\n+\n+import org.apache.hadoop.ozone.om.OMStorage;\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.upgrade.OMLayoutFeatureCatalog.OMLayoutFeature;\n+import org.apache.hadoop.ozone.upgrade.LayoutFeature;\n+import org.junit.Test;\n+\n+/**\n+ * Test OM layout version management.\n+ */\n+public class TestOMVersionManager {\n+\n+  @Test\n+  public void testOMLayoutVersionManager() throws IOException {\n+    OMStorage omStorage = mock(OMStorage.class);\n+    when(omStorage.getLayoutVersion()).thenReturn(0);\n+    OMVersionManager.init(omStorage);\n+    assertTrue(OMVersionManager.isAllowed(INITIAL_VERSION));\n+    assertFalse(OMVersionManager.isAllowed(CREATE_EC));\n+    assertEquals(0, OMVersionManager.getMetadataLayoutVersion());\n+    assertTrue(OMVersionManager.needsFinalization());\n+    OMVersionManager.doFinalize(mock(OzoneManager.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5349fa8ed7027ace8d79225814ef1e13ce9856e3"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4Mjk1NzAw", "url": "https://github.com/apache/ozone/pull/1322#pullrequestreview-468295700", "createdAt": "2020-08-17T09:11:46Z", "commit": {"oid": "5349fa8ed7027ace8d79225814ef1e13ce9856e3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwOToxMTo0NlrOHBgr5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwOToxMTo0NlrOHBgr5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM0NjE0OA==", "bodyText": "If we use an enum to store the list of features in a component, why do we need the enclosing class here? Is there a future intent hidden here, or it is just a leftover from an earlier implementation?", "url": "https://github.com/apache/ozone/pull/1322#discussion_r471346148", "createdAt": "2020-08-17T09:11:46Z", "author": {"login": "fapifta"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/upgrade/OMLayoutFeatureCatalog.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.upgrade;\n+\n+import java.util.Optional;\n+\n+import org.apache.hadoop.ozone.upgrade.LayoutFeature;\n+\n+/**\n+ * Catalog of Ozone Manager features.\n+ */\n+public class OMLayoutFeatureCatalog {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5349fa8ed7027ace8d79225814ef1e13ce9856e3"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczNjY1NjUy", "url": "https://github.com/apache/ozone/pull/1322#pullrequestreview-473665652", "createdAt": "2020-08-24T16:32:28Z", "commit": {"oid": "5349fa8ed7027ace8d79225814ef1e13ce9856e3"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjozMjoyOFrOHFs-Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjozMzoyM1rOHFtBCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc0MTc1NA==", "bodyText": "Agreed. I had to include this since the plugin that was added for scanning annotations fails the build due to this discrepancy. I will create a separate JIRA to fix this on master, but since it is a tiny change, I would like to leave it here until then to keep the build green.", "url": "https://github.com/apache/ozone/pull/1322#discussion_r475741754", "createdAt": "2020-08-24T16:32:28Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/s3/security/package-info.java", "diffHunk": "@@ -19,4 +19,4 @@\n /**\n  * Package contains classes related to S3 security responses.\n  */\n-package org.apache.hadoop.ozone.om.request.s3.security;\n+package org.apache.hadoop.ozone.om.response.s3.security;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMxMzkyOA=="}, "originalCommit": {"oid": "5349fa8ed7027ace8d79225814ef1e13ce9856e3"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc0MjQ3Mw==", "bodyText": "I am sure it is a leftover line ;) I will remove it.", "url": "https://github.com/apache/ozone/pull/1322#discussion_r475742473", "createdAt": "2020-08-24T16:33:23Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/upgrade/TestOMVersionManager.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.upgrade;\n+\n+import static org.apache.hadoop.ozone.om.upgrade.OMLayoutFeatureCatalog.OMLayoutFeature.CREATE_EC;\n+import static org.apache.hadoop.ozone.om.upgrade.OMLayoutFeatureCatalog.OMLayoutFeature.INITIAL_VERSION;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.IOException;\n+\n+import org.apache.hadoop.ozone.om.OMStorage;\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.upgrade.OMLayoutFeatureCatalog.OMLayoutFeature;\n+import org.apache.hadoop.ozone.upgrade.LayoutFeature;\n+import org.junit.Test;\n+\n+/**\n+ * Test OM layout version management.\n+ */\n+public class TestOMVersionManager {\n+\n+  @Test\n+  public void testOMLayoutVersionManager() throws IOException {\n+    OMStorage omStorage = mock(OMStorage.class);\n+    when(omStorage.getLayoutVersion()).thenReturn(0);\n+    OMVersionManager.init(omStorage);\n+    assertTrue(OMVersionManager.isAllowed(INITIAL_VERSION));\n+    assertFalse(OMVersionManager.isAllowed(CREATE_EC));\n+    assertEquals(0, OMVersionManager.getMetadataLayoutVersion());\n+    assertTrue(OMVersionManager.needsFinalization());\n+    OMVersionManager.doFinalize(mock(OzoneManager.class));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMzMjQ1MQ=="}, "originalCommit": {"oid": "5349fa8ed7027ace8d79225814ef1e13ce9856e3"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68127fe034ef9dabab25e6b87c4fe383959e4cad", "author": {"user": {"login": "avijayanhwx", "name": null}}, "url": "https://github.com/apache/ozone/commit/68127fe034ef9dabab25e6b87c4fe383959e4cad", "committedDate": "2020-08-24T22:21:18Z", "message": "Refactoring based on review comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a41d917d326f7233f8e9a0b5701ee9e1dccd395d", "author": {"user": {"login": "avijayanhwx", "name": null}}, "url": "https://github.com/apache/ozone/commit/a41d917d326f7233f8e9a0b5701ee9e1dccd395d", "committedDate": "2020-08-24T23:32:43Z", "message": "Fix CS and Rat issues."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f68135a48ee4d26b6884abd7adb8f94b4b95d3d", "author": {"user": {"login": "avijayanhwx", "name": null}}, "url": "https://github.com/apache/ozone/commit/1f68135a48ee4d26b6884abd7adb8f94b4b95d3d", "committedDate": "2020-08-25T19:47:34Z", "message": "Fix unit test and findbug."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27154adc9898b7c5debfcecc5f527fcb768fe38b", "author": {"user": {"login": "avijayanhwx", "name": null}}, "url": "https://github.com/apache/ozone/commit/27154adc9898b7c5debfcecc5f527fcb768fe38b", "committedDate": "2020-08-25T22:16:58Z", "message": "trigger new CI check"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0OTczODIx", "url": "https://github.com/apache/ozone/pull/1322#pullrequestreview-474973821", "createdAt": "2020-08-25T22:22:15Z", "commit": {"oid": "27154adc9898b7c5debfcecc5f527fcb768fe38b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2ODcwNDYw", "url": "https://github.com/apache/ozone/pull/1322#pullrequestreview-476870460", "createdAt": "2020-08-27T16:05:12Z", "commit": {"oid": "27154adc9898b7c5debfcecc5f527fcb768fe38b"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNjowNToxM1rOHIXPMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNjowODoxMlrOHIXWtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODUzMTM3Nw==", "bodyText": "Sometimes metadataLayoutVersion is not always updated during rolling, we should have one variable called lastSoftwareLayoutVersion to compare with softwareLayoutVersion. And then to decide if we need to finalized.", "url": "https://github.com/apache/ozone/pull/1322#discussion_r478531377", "createdAt": "2020-08-27T16:05:13Z", "author": {"login": "linyiqun"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/upgrade/AbstractLayoutVersionManager.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.upgrade;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.TreeMap;\n+\n+import com.google.common.base.Preconditions;\n+\n+/**\n+ * Layout Version Manager containing generic method implementations.\n+ */\n+@SuppressWarnings(\"visibilitymodifier\")\n+public abstract class AbstractLayoutVersionManager implements\n+    LayoutVersionManager {\n+\n+  protected int metadataLayoutVersion; // MLV.\n+  protected int softwareLayoutVersion; // SLV.\n+  protected TreeMap<Integer, LayoutFeature> features = new TreeMap<>();\n+  protected Map<String, LayoutFeature> featureMap = new HashMap<>();\n+  protected volatile boolean isInitialized = false;\n+\n+  protected void init(int version, LayoutFeature[] lfs) {\n+    if (!isInitialized) {\n+      metadataLayoutVersion = version;\n+      initializeFeatures(lfs);\n+      softwareLayoutVersion = features.lastKey();\n+      isInitialized = true;\n+    }\n+  }\n+\n+  protected void initializeFeatures(LayoutFeature[] lfs) {\n+    Arrays.stream(lfs).forEach(f -> {\n+      Preconditions.checkArgument(!featureMap.containsKey(f.name()));\n+      Preconditions.checkArgument(!features.containsKey(f.layoutVersion()));\n+      features.put(f.layoutVersion(), f);\n+      featureMap.put(f.name(), f);\n+    });\n+  }\n+\n+  public int getMetadataLayoutVersion() {\n+    return metadataLayoutVersion;\n+  }\n+\n+  public int getSoftwareLayoutVersion() {\n+    return softwareLayoutVersion;\n+  }\n+\n+  public boolean needsFinalization() {\n+    return metadataLayoutVersion < softwareLayoutVersion;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27154adc9898b7c5debfcecc5f527fcb768fe38b"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODUzMzMwMA==", "bodyText": "Here softwareLayoutVersion is extracted from LayoutFeature, this seems also like a metadataLayoutVersion. is this true? It looks a little confused here.", "url": "https://github.com/apache/ozone/pull/1322#discussion_r478533300", "createdAt": "2020-08-27T16:08:12Z", "author": {"login": "linyiqun"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/upgrade/AbstractLayoutVersionManager.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.upgrade;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.TreeMap;\n+\n+import com.google.common.base.Preconditions;\n+\n+/**\n+ * Layout Version Manager containing generic method implementations.\n+ */\n+@SuppressWarnings(\"visibilitymodifier\")\n+public abstract class AbstractLayoutVersionManager implements\n+    LayoutVersionManager {\n+\n+  protected int metadataLayoutVersion; // MLV.\n+  protected int softwareLayoutVersion; // SLV.\n+  protected TreeMap<Integer, LayoutFeature> features = new TreeMap<>();\n+  protected Map<String, LayoutFeature> featureMap = new HashMap<>();\n+  protected volatile boolean isInitialized = false;\n+\n+  protected void init(int version, LayoutFeature[] lfs) {\n+    if (!isInitialized) {\n+      metadataLayoutVersion = version;\n+      initializeFeatures(lfs);\n+      softwareLayoutVersion = features.lastKey();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27154adc9898b7c5debfcecc5f527fcb768fe38b"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MjIwMTY1", "url": "https://github.com/apache/ozone/pull/1322#pullrequestreview-477220165", "createdAt": "2020-08-28T03:39:51Z", "commit": {"oid": "27154adc9898b7c5debfcecc5f527fcb768fe38b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMzozOTo1MlrOHIobmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMzozOTo1MlrOHIobmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgxMzA4Mw==", "bodyText": "I am looking into for this logic again. If new version is not finalized, metadataLayoutVersion will still older than new SLV = max(version(feature)), that means this new introduced features contained in new Ozone version cannot work until we do the finalize. But actually sometimes, some features can have a minimal compatible version, it can allow to run >=  minimal compatible MLV.\nFor the first step implementation, we could make each minimal compatible MLV as their current layout version, like\npublic enum OMLayoutFeature implements LayoutFeature {\nINITIAL_VERSION(0, 0, \"Initial Layout Version\"),\nCREATE_EC(1, 1, \"\"),\nNEW_FEATURE(2, 2, \"new feature\", new NewOmFeatureUpgradeAction());\nprivate int layoutVersion;\nprivate int minCompatLayoutVersion\n\nAnd then use minCompatLayoutVersion to do compatibility check. Not sure if this change is expected to do in next step.", "url": "https://github.com/apache/ozone/pull/1322#discussion_r478813083", "createdAt": "2020-08-28T03:39:52Z", "author": {"login": "linyiqun"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/upgrade/AbstractLayoutVersionManager.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.upgrade;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.TreeMap;\n+\n+import com.google.common.base.Preconditions;\n+\n+/**\n+ * Layout Version Manager containing generic method implementations.\n+ */\n+@SuppressWarnings(\"visibilitymodifier\")\n+public abstract class AbstractLayoutVersionManager implements\n+    LayoutVersionManager {\n+\n+  protected int metadataLayoutVersion; // MLV.\n+  protected int softwareLayoutVersion; // SLV.\n+  protected TreeMap<Integer, LayoutFeature> features = new TreeMap<>();\n+  protected Map<String, LayoutFeature> featureMap = new HashMap<>();\n+  protected volatile boolean isInitialized = false;\n+\n+  protected void init(int version, LayoutFeature[] lfs) {\n+    if (!isInitialized) {\n+      metadataLayoutVersion = version;\n+      initializeFeatures(lfs);\n+      softwareLayoutVersion = features.lastKey();\n+      isInitialized = true;\n+    }\n+  }\n+\n+  protected void initializeFeatures(LayoutFeature[] lfs) {\n+    Arrays.stream(lfs).forEach(f -> {\n+      Preconditions.checkArgument(!featureMap.containsKey(f.name()));\n+      Preconditions.checkArgument(!features.containsKey(f.layoutVersion()));\n+      features.put(f.layoutVersion(), f);\n+      featureMap.put(f.name(), f);\n+    });\n+  }\n+\n+  public int getMetadataLayoutVersion() {\n+    return metadataLayoutVersion;\n+  }\n+\n+  public int getSoftwareLayoutVersion() {\n+    return softwareLayoutVersion;\n+  }\n+\n+  public boolean needsFinalization() {\n+    return metadataLayoutVersion < softwareLayoutVersion;\n+  }\n+\n+  public boolean isAllowed(LayoutFeature layoutFeature) {\n+    return layoutFeature.layoutVersion() <= metadataLayoutVersion;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27154adc9898b7c5debfcecc5f527fcb768fe38b"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2721, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}