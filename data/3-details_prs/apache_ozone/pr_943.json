{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5ODUwOTgy", "number": 943, "title": "HDDS-3615. Call cleanup on tables only when double buffer has transactions related to tables.", "bodyText": "Call cleanup on tables only when the double buffer has transactions related to tables.\nWhat changes were proposed in this pull request?\n(Please fill in changes proposed in this fix)\nWhat is the link to the Apache JIRA\nhttps://issues.apache.org/jira/browse/HDDS-3615\nHow was this patch tested?\nExisting tests. Will see if I can add any tests.", "createdAt": "2020-05-19T03:16:44Z", "url": "https://github.com/apache/ozone/pull/943", "merged": true, "mergeCommit": {"oid": "90c17ca6aeeb8742f4a3f4080ff27f48c49947a7"}, "closed": true, "closedAt": "2020-06-26T22:13:15Z", "author": {"login": "bharatviswa504"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcjnXYWAFqTQxNjU4MTI4OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcvKwFvAFqTQzODYyMzQwMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NTgxMjg4", "url": "https://github.com/apache/ozone/pull/943#pullrequestreview-416581288", "createdAt": "2020-05-22T00:45:16Z", "commit": {"oid": "50320fb628a1cdd9a2f43c912967f55a12379067"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMDo0NToxNlrOGZHUcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMDo0NToxNlrOGZHUcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk4NzUwNA==", "bodyText": "What are the difference is the operation is not volume bucket delete? It seems the txIndex are added the same anyway.", "url": "https://github.com/apache/ozone/pull/943#discussion_r428987504", "createdAt": "2020-05-22T00:45:16Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerDoubleBuffer.java", "diffHunk": "@@ -286,30 +301,45 @@ private void flushTransactions() {\n     }\n   }\n \n-  private void cleanupCache(List<Long> lastRatisTransactionIndex) {\n-    // As now only volume and bucket transactions are handled only called\n-    // cleanupCache on bucketTable.\n-    // TODO: After supporting all write operations we need to call\n-    //  cleanupCache on the tables only when buffer has entries for that table.\n-    omMetadataManager.getBucketTable().cleanupCache(lastRatisTransactionIndex);\n-    omMetadataManager.getVolumeTable().cleanupCache(lastRatisTransactionIndex);\n-    omMetadataManager.getUserTable().cleanupCache(lastRatisTransactionIndex);\n-\n-    //TODO: Optimization we can do here is for key transactions we can only\n-    // cleanup cache when it is key commit transaction. In this way all\n-    // intermediate transactions for a key will be read from in-memory cache.\n-    omMetadataManager.getOpenKeyTable().cleanupCache(lastRatisTransactionIndex);\n-    omMetadataManager.getKeyTable().cleanupCache(lastRatisTransactionIndex);\n-    omMetadataManager.getDeletedTable().cleanupCache(lastRatisTransactionIndex);\n-    omMetadataManager.getS3Table().cleanupCache(lastRatisTransactionIndex);\n-    omMetadataManager.getMultipartInfoTable().cleanupCache(\n-        lastRatisTransactionIndex);\n-    omMetadataManager.getS3SecretTable().cleanupCache(\n-        lastRatisTransactionIndex);\n-    omMetadataManager.getDelegationTokenTable().cleanupCache(\n-        lastRatisTransactionIndex);\n-    omMetadataManager.getPrefixTable().cleanupCache(lastRatisTransactionIndex);\n+  /**\n+   * Set cleanup epoch for the DoubleBufferEntry.\n+   * @param entry\n+   * @param cleanupEpochs\n+   */\n+  private void setCleanupEpoch(DoubleBufferEntry entry, Map<String,\n+      List<Long>> cleanupEpochs) {\n+    // Add epochs depending on operated tables. In this way\n+    // cleanup will be called only when required.\n+\n+    // As bucket and volume table is full cache add cleanup\n+    // epochs only when request is delete to cleanup deleted\n+    // entries.\n+\n+    String opName =\n+        entry.getResponse().getOMResponse().getCmdType().name();\n+\n+    if (opName.toLowerCase().contains(VOLUME) ||\n+        opName.toLowerCase().contains(BUCKET)) {\n+      if (DeleteBucket.name().equals(opName)\n+          || DeleteVolume.name().equals(opName)) {\n+        entry.getResponse().operatedTables().forEach(\n+            table -> cleanupEpochs.get(table)\n+                .add(entry.getTrxLogIndex()));\n+      }\n+    } else {\n+      entry.getResponse().operatedTables().forEach(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50320fb628a1cdd9a2f43c912967f55a12379067"}, "originalPosition": 108}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NTgxODU3", "url": "https://github.com/apache/ozone/pull/943#pullrequestreview-416581857", "createdAt": "2020-05-22T00:47:09Z", "commit": {"oid": "50320fb628a1cdd9a2f43c912967f55a12379067"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMDo0NzowOVrOGZHWRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMDo0NzowOVrOGZHWRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk4Nzk3Mg==", "bodyText": "As an alternative, you might achieve the same by adding a class annotation with table name string.", "url": "https://github.com/apache/ozone/pull/943#discussion_r428987972", "createdAt": "2020-05-22T00:47:09Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/bucket/OMBucketCreateResponse.java", "diffHunk": "@@ -30,11 +32,16 @@\n import javax.annotation.Nullable;\n import javax.annotation.Nonnull;\n \n+import static org.apache.hadoop.ozone.om.OmMetadataManagerImpl.BUCKET_TABLE;\n+\n /**\n  * Response for CreateBucket request.\n  */\n public final class OMBucketCreateResponse extends OMClientResponse {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50320fb628a1cdd9a2f43c912967f55a12379067"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NTgxOTc1", "url": "https://github.com/apache/ozone/pull/943#pullrequestreview-416581975", "createdAt": "2020-05-22T00:47:34Z", "commit": {"oid": "50320fb628a1cdd9a2f43c912967f55a12379067"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "50320fb628a1cdd9a2f43c912967f55a12379067", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/50320fb628a1cdd9a2f43c912967f55a12379067", "committedDate": "2020-05-19T04:24:08Z", "message": "fix checkstyle"}, "afterCommit": {"oid": "16508287169c52734db75a6034100e8618c86c96", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/16508287169c52734db75a6034100e8618c86c96", "committedDate": "2020-06-19T02:18:06Z", "message": "use annotation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c48f1622130ffd568cf6702d1fdc3e31af16de3", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/7c48f1622130ffd568cf6702d1fdc3e31af16de3", "committedDate": "2020-06-26T17:21:09Z", "message": "HDDS-3615. Call cleanup on tables only when double buffer has transactions related to tables."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9eb68a2815a57fdae4c76ac444a18be2b3ceaa3", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/c9eb68a2815a57fdae4c76ac444a18be2b3ceaa3", "committedDate": "2020-06-26T17:21:10Z", "message": "use annotation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ad1eb15e72bddd2dd673e89fca11c6c0c12b02a", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/6ad1eb15e72bddd2dd673e89fca11c6c0c12b02a", "committedDate": "2020-06-26T17:21:10Z", "message": "fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9ca7351adc8539c461f7d6d2d8ef0e936c0c612", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/e9ca7351adc8539c461f7d6d2d8ef0e936c0c612", "committedDate": "2020-06-26T17:21:10Z", "message": "add test and do some more code changes in doublebuffer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37fc5b924eb8467d79019c87636f926e06320ca8", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/37fc5b924eb8467d79019c87636f926e06320ca8", "committedDate": "2020-06-26T17:21:10Z", "message": "fix CI issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac2b771177401a46ecba4e27e6bf53b179d9f1b1", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/ac2b771177401a46ecba4e27e6bf53b179d9f1b1", "committedDate": "2020-06-26T17:35:02Z", "message": "add cleanup table to new class"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6d14ee9ece65833e818b5c8cf68211db1c4e882d", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/6d14ee9ece65833e818b5c8cf68211db1c4e882d", "committedDate": "2020-06-19T19:42:27Z", "message": "fix CI issues"}, "afterCommit": {"oid": "ac2b771177401a46ecba4e27e6bf53b179d9f1b1", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/ac2b771177401a46ecba4e27e6bf53b179d9f1b1", "committedDate": "2020-06-26T17:35:02Z", "message": "add cleanup table to new class"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NDg2Mjg5", "url": "https://github.com/apache/ozone/pull/943#pullrequestreview-438486289", "createdAt": "2020-06-26T17:50:53Z", "commit": {"oid": "ac2b771177401a46ecba4e27e6bf53b179d9f1b1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzo1MDo1M1rOGppoxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzo1MDo1M1rOGppoxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyNjk4Mw==", "bodyText": "Should this be removed after we add the annotation?", "url": "https://github.com/apache/ozone/pull/943#discussion_r446326983", "createdAt": "2020-06-26T17:50:53Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/bucket/OMBucketDeleteResponse.java", "diffHunk": "@@ -19,20 +19,29 @@\n package org.apache.hadoop.ozone.om.response.bucket;\n \n import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n \n import org.apache.hadoop.ozone.om.OMMetadataManager;\n+import org.apache.hadoop.ozone.om.response.CleanupTableInfo;\n import org.apache.hadoop.ozone.om.response.OMClientResponse;\n import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos\n     .OMResponse;\n import org.apache.hadoop.hdds.utils.db.BatchOperation;\n \n import javax.annotation.Nonnull;\n \n+import static org.apache.hadoop.ozone.om.OmMetadataManagerImpl.BUCKET_TABLE;\n+\n /**\n  * Response for DeleteBucket request.\n  */\n+@CleanupTableInfo(cleanupTables = {BUCKET_TABLE})\n public final class OMBucketDeleteResponse extends OMClientResponse {\n \n+  private static final List<String> OPERATED_TABLES =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac2b771177401a46ecba4e27e6bf53b179d9f1b1"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NDg2NTEz", "url": "https://github.com/apache/ozone/pull/943#pullrequestreview-438486513", "createdAt": "2020-06-26T17:51:14Z", "commit": {"oid": "ac2b771177401a46ecba4e27e6bf53b179d9f1b1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzo1MToxNFrOGpppYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzo1MToxNFrOGpppYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyNzEzOQ==", "bodyText": "Same as above.", "url": "https://github.com/apache/ozone/pull/943#discussion_r446327139", "createdAt": "2020-06-26T17:51:14Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/bucket/OMBucketSetPropertyResponse.java", "diffHunk": "@@ -18,22 +18,31 @@\n package org.apache.hadoop.ozone.om.response.bucket;\n \n import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n \n import org.apache.hadoop.ozone.om.OMMetadataManager;\n import org.apache.hadoop.ozone.om.helpers.OmBucketInfo;\n+import org.apache.hadoop.ozone.om.response.CleanupTableInfo;\n import org.apache.hadoop.ozone.om.response.OMClientResponse;\n import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos\n     .OMResponse;\n import org.apache.hadoop.hdds.utils.db.BatchOperation;\n \n import javax.annotation.Nonnull;\n \n+import static org.apache.hadoop.ozone.om.OmMetadataManagerImpl.BUCKET_TABLE;\n+\n /**\n  * Response for SetBucketProperty request.\n  */\n+@CleanupTableInfo(cleanupTables = {BUCKET_TABLE})\n public class OMBucketSetPropertyResponse extends OMClientResponse {\n   private OmBucketInfo omBucketInfo;\n \n+  private static final List<String> OPERATED_TABLES =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac2b771177401a46ecba4e27e6bf53b179d9f1b1"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NDg5Nzgy", "url": "https://github.com/apache/ozone/pull/943#pullrequestreview-438489782", "createdAt": "2020-06-26T17:56:32Z", "commit": {"oid": "ac2b771177401a46ecba4e27e6bf53b179d9f1b1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzo1NjozMlrOGppzPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzo1NjozMlrOGppzPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyOTY2MQ==", "bodyText": "Can we add a unit test on response class that misses annotation?", "url": "https://github.com/apache/ozone/pull/943#discussion_r446329661", "createdAt": "2020-06-26T17:56:32Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerDoubleBuffer.java", "diffHunk": "@@ -353,29 +368,62 @@ private void flushTransactions() {\n     }\n   }\n \n-  private void cleanupCache(List<Long> lastRatisTransactionIndex) {\n-    // As now only volume and bucket transactions are handled only called\n-    // cleanupCache on bucketTable.\n-    // TODO: After supporting all write operations we need to call\n-    //  cleanupCache on the tables only when buffer has entries for that table.\n-    omMetadataManager.getBucketTable().cleanupCache(lastRatisTransactionIndex);\n-    omMetadataManager.getVolumeTable().cleanupCache(lastRatisTransactionIndex);\n-    omMetadataManager.getUserTable().cleanupCache(lastRatisTransactionIndex);\n-\n-    //TODO: Optimization we can do here is for key transactions we can only\n-    // cleanup cache when it is key commit transaction. In this way all\n-    // intermediate transactions for a key will be read from in-memory cache.\n-    omMetadataManager.getOpenKeyTable().cleanupCache(lastRatisTransactionIndex);\n-    omMetadataManager.getKeyTable().cleanupCache(lastRatisTransactionIndex);\n-    omMetadataManager.getDeletedTable().cleanupCache(lastRatisTransactionIndex);\n-    omMetadataManager.getMultipartInfoTable().cleanupCache(\n-        lastRatisTransactionIndex);\n-    omMetadataManager.getS3SecretTable().cleanupCache(\n-        lastRatisTransactionIndex);\n-    omMetadataManager.getDelegationTokenTable().cleanupCache(\n-        lastRatisTransactionIndex);\n-    omMetadataManager.getPrefixTable().cleanupCache(lastRatisTransactionIndex);\n+  /**\n+   * Set cleanup epoch for the DoubleBufferEntry.\n+   * @param entry\n+   * @param cleanupEpochs\n+   */\n+  private void setCleanupEpoch(DoubleBufferEntry entry, Map<String,\n+      List<Long>> cleanupEpochs) {\n+    // Add epochs depending on operated tables. In this way\n+    // cleanup will be called only when required.\n+\n+    // As bucket and volume table is full cache add cleanup\n+    // epochs only when request is delete to cleanup deleted\n+    // entries.\n+\n+    String opName =\n+        entry.getResponse().getOMResponse().getCmdType().name();\n+\n+    if (opName.toLowerCase().contains(VOLUME) ||\n+        opName.toLowerCase().contains(BUCKET)) {\n+      if (DeleteBucket.name().equals(opName)\n+          || DeleteVolume.name().equals(opName)) {\n+        addCleanupEntry(entry, cleanupEpochs);\n+      }\n+    } else {\n+      addCleanupEntry(entry, cleanupEpochs);\n+    }\n+  }\n+\n+\n+  private void addCleanupEntry(DoubleBufferEntry entry, Map<String,\n+      List<Long>> cleanupEpochs) {\n+    Class<? extends OMClientResponse> responseClass =\n+        entry.getResponse().getClass();\n+    CleanupTableInfo cleanupTableInfo =\n+        responseClass.getAnnotation(CleanupTableInfo.class);\n+    if (cleanupTableInfo != null) {\n+      String[] cleanupTables = cleanupTableInfo.cleanupTables();\n+      for (String table : cleanupTables) {\n+        cleanupEpochs.computeIfAbsent(table, list -> new ArrayList<>())\n+            .add(entry.getTrxLogIndex());\n+      }\n+    } else {\n+      // This is to catch early errors, when an new response class missed to\n+      // add CleanupTableInfo annotation.\n+      throw new RuntimeException(\"CleanupTableInfo Annotation is missing \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac2b771177401a46ecba4e27e6bf53b179d9f1b1"}, "originalPosition": 133}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c2e326c4763065496f533f269d05e963bce0519", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/9c2e326c4763065496f533f269d05e963bce0519", "committedDate": "2020-06-26T17:56:48Z", "message": "review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NDkwNzk4", "url": "https://github.com/apache/ozone/pull/943#pullrequestreview-438490798", "createdAt": "2020-06-26T17:58:08Z", "commit": {"oid": "9c2e326c4763065496f533f269d05e963bce0519"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f4f817d34d8a6261162f171f3034fabdb07142b", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/7f4f817d34d8a6261162f171f3034fabdb07142b", "committedDate": "2020-06-26T18:02:39Z", "message": "add class name which does not have annotation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35b07d391cd0f970ea530437a940a412e5d640fa", "author": {"user": {"login": "bharatviswa504", "name": "Bharat Viswanadham"}}, "url": "https://github.com/apache/ozone/commit/35b07d391cd0f970ea530437a940a412e5d640fa", "committedDate": "2020-06-26T18:03:31Z", "message": "fix checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NjIzNDAw", "url": "https://github.com/apache/ozone/pull/943#pullrequestreview-438623400", "createdAt": "2020-06-26T22:12:06Z", "commit": {"oid": "35b07d391cd0f970ea530437a940a412e5d640fa"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3281, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}