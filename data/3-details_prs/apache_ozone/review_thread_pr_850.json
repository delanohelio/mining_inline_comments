{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NTAzMDA5", "number": 850, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNDowMzowNVrOD1FGLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNzo0OTo1NlrOD1ZkDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2OTg0NjIyOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/recon/TestReconAsPassiveScm.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNDowMzowNVrOGKVkFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNjozODoxMlrOGKxmIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ5MjI0Ng==", "bodyText": "We should have some timeout value, it's ok to increase it if needed.", "url": "https://github.com/apache/ozone/pull/850#discussion_r413492246", "createdAt": "2020-04-23T04:03:05Z", "author": {"login": "swagle"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/recon/TestReconAsPassiveScm.java", "diffHunk": "@@ -81,7 +81,7 @@ public void shutdown() {\n     }\n   }\n \n-  @Test(timeout = 120000)\n+  @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95d1dd7576b7c80e76d5ce7be872ae15444245b3"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk1MTUyMQ==", "bodyText": "Timeout is implicitly enforced through LambdaTestUtils.", "url": "https://github.com/apache/ozone/pull/850#discussion_r413951521", "createdAt": "2020-04-23T16:38:12Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/recon/TestReconAsPassiveScm.java", "diffHunk": "@@ -81,7 +81,7 @@ public void shutdown() {\n     }\n   }\n \n-  @Test(timeout = 120000)\n+  @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ5MjI0Ng=="}, "originalCommit": {"oid": "95d1dd7576b7c80e76d5ce7be872ae15444245b3"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2OTg1ODg1OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/fsck/MissingContainerTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNDowODo1N1rOGKVrJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNjozOTo1OFrOGKxqwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ5NDA1Mg==", "bodyText": "Minor nit: should declare refs as final.", "url": "https://github.com/apache/ozone/pull/850#discussion_r413494052", "createdAt": "2020-04-23T04:08:57Z", "author": {"login": "swagle"}, "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/fsck/MissingContainerTask.java", "diffHunk": "@@ -47,16 +47,18 @@\n \n   private ContainerManager containerManager;\n   private ContainerSchemaManager containerSchemaManager;\n-  private static final long INTERVAL = 5 * 60 * 1000L;\n+  private long interval;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95d1dd7576b7c80e76d5ce7be872ae15444245b3"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk1MjcwNA==", "bodyText": "+1, will change this.", "url": "https://github.com/apache/ozone/pull/850#discussion_r413952704", "createdAt": "2020-04-23T16:39:58Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/fsck/MissingContainerTask.java", "diffHunk": "@@ -47,16 +47,18 @@\n \n   private ContainerManager containerManager;\n   private ContainerSchemaManager containerSchemaManager;\n-  private static final long INTERVAL = 5 * 60 * 1000L;\n+  private long interval;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ5NDA1Mg=="}, "originalCommit": {"oid": "95d1dd7576b7c80e76d5ce7be872ae15444245b3"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2OTkyMTc2OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/scm/ReconScmTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNDozNzo0N1rOGKWMtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNzozMjo0NFrOGKz7iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUwMjY0Nw==", "bodyText": "If the task is persistent, restarting the task thread while keeping Recon running (which I don't know if is a possible scenario currently) will always check the DB.  If so, registered flag is unnecessary if DB check is cheap, otherwise it should be set outside of if.", "url": "https://github.com/apache/ozone/pull/850#discussion_r413502647", "createdAt": "2020-04-23T04:37:47Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/scm/ReconScmTask.java", "diffHunk": "@@ -34,26 +32,30 @@\n   private Thread taskThread;\n   private ReconTaskStatusDao reconTaskStatusDao;\n   private volatile boolean running;\n+  private volatile boolean registered;\n \n-  @Inject\n-  public ReconScmTask(ReconTaskStatusDao reconTaskStatusDao) {\n+  protected ReconScmTask(ReconTaskStatusDao reconTaskStatusDao) {\n     this.reconTaskStatusDao = reconTaskStatusDao;\n   }\n \n-  public void register() {\n+  private void register() {\n     String taskName = getTaskName();\n     if (!reconTaskStatusDao.existsById(taskName)) {\n       ReconTaskStatus reconTaskStatusRecord = new ReconTaskStatus(\n           taskName, 0L, 0L);\n       reconTaskStatusDao.insert(reconTaskStatusRecord);\n       LOG.info(\"Registered {} task \", taskName);\n+      registered = true;\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95d1dd7576b7c80e76d5ce7be872ae15444245b3"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk4OTc2OQ==", "bodyText": "Good catch... I will fix it by removing the flag since the DB check is not expected to be costly.", "url": "https://github.com/apache/ozone/pull/850#discussion_r413989769", "createdAt": "2020-04-23T17:32:44Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/scm/ReconScmTask.java", "diffHunk": "@@ -34,26 +32,30 @@\n   private Thread taskThread;\n   private ReconTaskStatusDao reconTaskStatusDao;\n   private volatile boolean running;\n+  private volatile boolean registered;\n \n-  @Inject\n-  public ReconScmTask(ReconTaskStatusDao reconTaskStatusDao) {\n+  protected ReconScmTask(ReconTaskStatusDao reconTaskStatusDao) {\n     this.reconTaskStatusDao = reconTaskStatusDao;\n   }\n \n-  public void register() {\n+  private void register() {\n     String taskName = getTaskName();\n     if (!reconTaskStatusDao.existsById(taskName)) {\n       ReconTaskStatus reconTaskStatusRecord = new ReconTaskStatus(\n           taskName, 0L, 0L);\n       reconTaskStatusDao.insert(reconTaskStatusRecord);\n       LOG.info(\"Registered {} task \", taskName);\n+      registered = true;\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUwMjY0Nw=="}, "originalCommit": {"oid": "95d1dd7576b7c80e76d5ce7be872ae15444245b3"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2OTk1OTY3OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/tasks/ReconTaskConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNDo1NDoxOVrOGKWhNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNDo1NDoxOVrOGKWhNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUwNzg5NA==", "bodyText": "How about something like \"The time interval of periodic sync of pipeline state from SCM to Recon\"?  I think that's more friendly.\nAlso, as config type is time, values can be specified with units for clarity, eg. 10m (= 600s), so text doesn't need to state it's \"in seconds\".", "url": "https://github.com/apache/ozone/pull/850#discussion_r413507894", "createdAt": "2020-04-23T04:54:19Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/tasks/ReconTaskConfig.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.recon.tasks;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.hadoop.hdds.conf.Config;\n+import org.apache.hadoop.hdds.conf.ConfigGroup;\n+import org.apache.hadoop.hdds.conf.ConfigTag;\n+import org.apache.hadoop.hdds.conf.ConfigType;\n+\n+/**\n+ * The configuration class for the Recon tasks.\n+ */\n+@ConfigGroup(prefix = \"ozone.recon.task\")\n+public class ReconTaskConfig {\n+\n+  @Config(key = \"pipelinesync.interval\",\n+      type = ConfigType.TIME, timeUnit = TimeUnit.SECONDS,\n+      defaultValue = \"600\",\n+      tags = { ConfigTag.RECON, ConfigTag.OZONE },\n+      description = \"Interval of the PipelineSyncTask in seconds.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95d1dd7576b7c80e76d5ce7be872ae15444245b3"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2OTk2OTI5OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/recon/TestReconTasks.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNDo1ODo0MVrOGKWmlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNDo1ODo0MVrOGKWmlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUwOTI2OA==", "bodyText": ">= 1 may be safer (don't know if multiple pipelines are allowed for single datanode).", "url": "https://github.com/apache/ozone/pull/850#discussion_r413509268", "createdAt": "2020-04-23T04:58:41Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/recon/TestReconTasks.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.hadoop.ozone.recon;\n+\n+import static org.apache.hadoop.hdds.HddsConfigKeys.HDDS_CONTAINER_REPORT_INTERVAL;\n+import static org.apache.hadoop.hdds.HddsConfigKeys.HDDS_PIPELINE_REPORT_INTERVAL;\n+import static org.apache.hadoop.hdds.protocol.proto.HddsProtos.ReplicationFactor.ONE;\n+import static org.apache.hadoop.hdds.protocol.proto.HddsProtos.ReplicationType.RATIS;\n+import static org.apache.hadoop.ozone.container.ozoneimpl.TestOzoneContainer.runTestOzoneContainerViaDataNode;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.List;\n+\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.scm.XceiverClientGrpc;\n+import org.apache.hadoop.hdds.scm.container.ContainerInfo;\n+import org.apache.hadoop.hdds.scm.container.ContainerManager;\n+import org.apache.hadoop.hdds.scm.pipeline.Pipeline;\n+import org.apache.hadoop.hdds.scm.pipeline.PipelineManager;\n+import org.apache.hadoop.hdds.scm.server.StorageContainerManager;\n+import org.apache.hadoop.ozone.MiniOzoneCluster;\n+import org.apache.hadoop.ozone.recon.scm.ReconContainerManager;\n+import org.apache.hadoop.ozone.recon.scm.ReconStorageContainerManagerFacade;\n+import org.apache.hadoop.test.LambdaTestUtils;\n+import org.hadoop.ozone.recon.schema.tables.pojos.MissingContainers;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+/**\n+ * Integration Tests for Recon's tasks.\n+ */\n+public class TestReconTasks {\n+\n+  private MiniOzoneCluster cluster = null;\n+  private OzoneConfiguration conf;\n+\n+  @Rule\n+  public TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+  @Before\n+  public void init() throws Exception {\n+    conf = new OzoneConfiguration();\n+    conf.set(HDDS_CONTAINER_REPORT_INTERVAL, \"5s\");\n+    conf.set(HDDS_PIPELINE_REPORT_INTERVAL, \"5s\");\n+    conf.set(\"ozone.recon.task.missingcontainer.interval\", \"15s\");\n+    conf.set(\"ozone.scm.stale.node.interval\", \"10s\");\n+    conf.set(\"ozone.scm.dead.node.interval\", \"20s\");\n+    cluster =  MiniOzoneCluster.newBuilder(conf).setNumDatanodes(1)\n+        .includeRecon(true).build();\n+    cluster.waitForClusterToBeReady();\n+  }\n+\n+  @After\n+  public void shutdown() {\n+    if (cluster != null) {\n+      cluster.shutdown();\n+    }\n+  }\n+\n+  @Test\n+  public void testMissingContainerDownNode() throws Exception {\n+    ReconStorageContainerManagerFacade reconScm =\n+        (ReconStorageContainerManagerFacade)\n+            cluster.getReconServer().getReconStorageContainerManager();\n+    StorageContainerManager scm = cluster.getStorageContainerManager();\n+    PipelineManager reconPipelineManager = reconScm.getPipelineManager();\n+    PipelineManager scmPipelineManager = scm.getPipelineManager();\n+\n+    // Make sure Recon's pipeline state is initialized.\n+    LambdaTestUtils.await(60000, 5000,\n+        () -> (reconPipelineManager.getPipelines().size() == 1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95d1dd7576b7c80e76d5ce7be872ae15444245b3"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzE5OTUxOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/tasks/ReconTaskConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNzo0OTo1NlrOGK0oRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNzo0OTo1NlrOGK0oRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAwMTIyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  description = \"The time interval of the period check for  \" +\n          \n          \n            \n                      \" containers with zero replicas in the cluster as reported by \" +\n          \n          \n            \n                  description = \"The time interval of the periodic check for \" +\n          \n          \n            \n                      \"containers with zero replicas in the cluster as reported by \" +", "url": "https://github.com/apache/ozone/pull/850#discussion_r414001223", "createdAt": "2020-04-23T17:49:56Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/tasks/ReconTaskConfig.java", "diffHunk": "@@ -51,7 +52,9 @@ public void setPipelineSyncTaskInterval(long pipelineSyncTaskInterval) {\n       type = ConfigType.TIME, timeUnit = TimeUnit.SECONDS,\n       defaultValue = \"300\",\n       tags = { ConfigTag.RECON, ConfigTag.OZONE },\n-      description = \"Interval of the Missing Container Task in seconds.\"\n+      description = \"The time interval of the period check for  \" +\n+          \" containers with zero replicas in the cluster as reported by \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e21702a9265fb93c5ae28f20b0616c50fdc8d56"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4417, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}