{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzNzg2NzEw", "number": 1669, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjozOToxMFrOFDt6gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjozOToxMFrOFDt6gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDQyMzA1OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/replication/MeasuredReplicator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjozOToxMFrOIDgixg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMDo0NjoyNVrOIO6AvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU0OTgzMA==", "bodyText": "did you forget a pair of brackets here? Like\n(Instant.now().getNano() - task.getQueued().getNano()) / 1_000_000;", "url": "https://github.com/apache/ozone/pull/1669#discussion_r540549830", "createdAt": "2020-12-10T22:39:10Z", "author": {"login": "jojochuang"}, "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/replication/MeasuredReplicator.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.container.replication;\n+\n+import java.time.Instant;\n+\n+import org.apache.hadoop.metrics2.annotation.Metric;\n+import org.apache.hadoop.metrics2.annotation.Metrics;\n+import org.apache.hadoop.metrics2.lib.DefaultMetricsSystem;\n+import org.apache.hadoop.metrics2.lib.MutableCounterLong;\n+import org.apache.hadoop.metrics2.lib.MutableGaugeLong;\n+import org.apache.hadoop.ozone.container.replication.ReplicationTask.Status;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+\n+/**\n+ * ContainerReplicator wrapper with additional metrics.\n+ */\n+@Metrics(about = \"Closed container replication metrics\", context = \"dfs\")\n+public class MeasuredReplicator implements ContainerReplicator, AutoCloseable {\n+\n+  private static final String NAME = ContainerReplicator.class.toString();\n+\n+  private final ContainerReplicator delegate;\n+\n+  @Metric\n+  private MutableCounterLong success;\n+\n+  @Metric\n+  private MutableGaugeLong successTime;\n+\n+  @Metric\n+  private MutableCounterLong failure;\n+\n+  @Metric\n+  private MutableGaugeLong queueTime;\n+\n+  @Metric\n+  private MutableGaugeLong transferredBytes;\n+\n+  public MeasuredReplicator(ContainerReplicator delegate) {\n+    this.delegate = delegate;\n+    DefaultMetricsSystem.instance()\n+        .register(NAME, \"Closed container replication\", this);\n+  }\n+\n+  @Override\n+  public void replicate(ReplicationTask task) {\n+    long start = System.currentTimeMillis();\n+\n+    long msInQueue =\n+        Instant.now().getNano() - task.getQueued().getNano() / 1_000_000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "284f302473c2362188d8fffa50e2a99ec2d4a420"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUwMTQzNw==", "bodyText": "OMG.\nFixed, thanks to save me ;-)", "url": "https://github.com/apache/ozone/pull/1669#discussion_r552501437", "createdAt": "2021-01-06T10:46:25Z", "author": {"login": "elek"}, "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/replication/MeasuredReplicator.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.container.replication;\n+\n+import java.time.Instant;\n+\n+import org.apache.hadoop.metrics2.annotation.Metric;\n+import org.apache.hadoop.metrics2.annotation.Metrics;\n+import org.apache.hadoop.metrics2.lib.DefaultMetricsSystem;\n+import org.apache.hadoop.metrics2.lib.MutableCounterLong;\n+import org.apache.hadoop.metrics2.lib.MutableGaugeLong;\n+import org.apache.hadoop.ozone.container.replication.ReplicationTask.Status;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+\n+/**\n+ * ContainerReplicator wrapper with additional metrics.\n+ */\n+@Metrics(about = \"Closed container replication metrics\", context = \"dfs\")\n+public class MeasuredReplicator implements ContainerReplicator, AutoCloseable {\n+\n+  private static final String NAME = ContainerReplicator.class.toString();\n+\n+  private final ContainerReplicator delegate;\n+\n+  @Metric\n+  private MutableCounterLong success;\n+\n+  @Metric\n+  private MutableGaugeLong successTime;\n+\n+  @Metric\n+  private MutableCounterLong failure;\n+\n+  @Metric\n+  private MutableGaugeLong queueTime;\n+\n+  @Metric\n+  private MutableGaugeLong transferredBytes;\n+\n+  public MeasuredReplicator(ContainerReplicator delegate) {\n+    this.delegate = delegate;\n+    DefaultMetricsSystem.instance()\n+        .register(NAME, \"Closed container replication\", this);\n+  }\n+\n+  @Override\n+  public void replicate(ReplicationTask task) {\n+    long start = System.currentTimeMillis();\n+\n+    long msInQueue =\n+        Instant.now().getNano() - task.getQueued().getNano() / 1_000_000;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU0OTgzMA=="}, "originalCommit": {"oid": "284f302473c2362188d8fffa50e2a99ec2d4a420"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4578, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}