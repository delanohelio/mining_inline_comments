{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5NjYwNzE4", "number": 874, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMTo1NzoxN1rOD9XKCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNToxMDowOVrOD9b9wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjY5MTMxOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/MiniOzoneChaosCluster.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMTo1NzoxN1rOGWz3ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzo0MDoxN1rOGXBR3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU3MTcxNQ==", "bodyText": "Duplicate config setting.  Did you intend to set some other property?", "url": "https://github.com/apache/ozone/pull/874#discussion_r426571715", "createdAt": "2020-05-18T11:57:17Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/MiniOzoneChaosCluster.java", "diffHunk": "@@ -358,6 +233,11 @@ protected void initializeConfiguration() throws IOException {\n       conf.setInt(\"hdds.scm.replication.event.timeout\", 20 * 1000);\n       conf.setInt(OzoneConfigKeys.DFS_RATIS_SNAPSHOT_THRESHOLD_KEY, 100);\n       conf.setInt(OzoneConfigKeys.DFS_CONTAINER_RATIS_LOG_PURGE_GAP, 100);\n+\n+      conf.setInt(OMConfigKeys.\n+              OZONE_OM_RATIS_SNAPSHOT_AUTO_TRIGGER_THRESHOLD_KEY, 100);\n+      conf.setInt(OMConfigKeys.\n+              OZONE_OM_RATIS_SNAPSHOT_AUTO_TRIGGER_THRESHOLD_KEY, 100);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be2ef962388f8d3cd50baadc23cd09b8b06bc853"}, "originalPosition": 296}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc5MTM4OQ==", "bodyText": "yes, this was supposed to be purge gap.", "url": "https://github.com/apache/ozone/pull/874#discussion_r426791389", "createdAt": "2020-05-18T17:40:17Z", "author": {"login": "mukul1987"}, "path": "hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/MiniOzoneChaosCluster.java", "diffHunk": "@@ -358,6 +233,11 @@ protected void initializeConfiguration() throws IOException {\n       conf.setInt(\"hdds.scm.replication.event.timeout\", 20 * 1000);\n       conf.setInt(OzoneConfigKeys.DFS_RATIS_SNAPSHOT_THRESHOLD_KEY, 100);\n       conf.setInt(OzoneConfigKeys.DFS_CONTAINER_RATIS_LOG_PURGE_GAP, 100);\n+\n+      conf.setInt(OMConfigKeys.\n+              OZONE_OM_RATIS_SNAPSHOT_AUTO_TRIGGER_THRESHOLD_KEY, 100);\n+      conf.setInt(OMConfigKeys.\n+              OZONE_OM_RATIS_SNAPSHOT_AUTO_TRIGGER_THRESHOLD_KEY, 100);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU3MTcxNQ=="}, "originalCommit": {"oid": "be2ef962388f8d3cd50baadc23cd09b8b06bc853"}, "originalPosition": 296}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjcwNjE0OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/MiniOzoneChaosCluster.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMjowMTo0MFrOGW0A_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxODoxNzowMFrOGXCdxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU3NDA3OQ==", "bodyText": "This can add the same OM multiple times to the list.  Is that OK?", "url": "https://github.com/apache/ozone/pull/874#discussion_r426574079", "createdAt": "2020-05-18T12:01:40Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/MiniOzoneChaosCluster.java", "diffHunk": "@@ -406,19 +280,71 @@ public MiniOzoneChaosCluster build() throws IOException {\n       final List<HddsDatanodeService> hddsDatanodes = createHddsDatanodes(\n           scm, null);\n \n-      MiniOzoneChaosCluster cluster;\n-      if (failureService == FailureService.DATANODE) {\n-        cluster = new MiniOzoneDatanodeChaosCluster(conf, omList, scm,\n-            hddsDatanodes, omServiceId);\n-      } else {\n-        cluster = new MiniOzoneOMChaosCluster(conf, omList, scm,\n-            hddsDatanodes, omServiceId);\n-      }\n+      MiniOzoneChaosCluster cluster =\n+          new MiniOzoneChaosCluster(conf, omList, scm, hddsDatanodes,\n+              omServiceId, clazzes);\n \n       if (startDataNodes) {\n         cluster.startHddsDatanodes();\n       }\n       return cluster;\n     }\n   }\n+\n+  // OzoneManager specifc\n+  public List<OzoneManager> omToFail() {\n+    int numNodesToFail = FailureManager.getNumberOfOmToFail();\n+    if (failedOmSet.size() >= numOzoneManagers/2) {\n+      return Collections.emptyList();\n+    }\n+\n+    int numOms = getOzoneManagersList().size();\n+    List<OzoneManager> oms = new ArrayList<>(numNodesToFail);\n+    for (int i = 0; i < numNodesToFail; i++) {\n+      int failedNodeIndex = FailureManager.getBoundedRandomIndex(numOms);\n+      oms.add(getOzoneManager(failedNodeIndex));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be2ef962388f8d3cd50baadc23cd09b8b06bc853"}, "originalPosition": 347}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc5MTQ5NQ==", "bodyText": "Coverted into hashset.", "url": "https://github.com/apache/ozone/pull/874#discussion_r426791495", "createdAt": "2020-05-18T17:40:29Z", "author": {"login": "mukul1987"}, "path": "hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/MiniOzoneChaosCluster.java", "diffHunk": "@@ -406,19 +280,71 @@ public MiniOzoneChaosCluster build() throws IOException {\n       final List<HddsDatanodeService> hddsDatanodes = createHddsDatanodes(\n           scm, null);\n \n-      MiniOzoneChaosCluster cluster;\n-      if (failureService == FailureService.DATANODE) {\n-        cluster = new MiniOzoneDatanodeChaosCluster(conf, omList, scm,\n-            hddsDatanodes, omServiceId);\n-      } else {\n-        cluster = new MiniOzoneOMChaosCluster(conf, omList, scm,\n-            hddsDatanodes, omServiceId);\n-      }\n+      MiniOzoneChaosCluster cluster =\n+          new MiniOzoneChaosCluster(conf, omList, scm, hddsDatanodes,\n+              omServiceId, clazzes);\n \n       if (startDataNodes) {\n         cluster.startHddsDatanodes();\n       }\n       return cluster;\n     }\n   }\n+\n+  // OzoneManager specifc\n+  public List<OzoneManager> omToFail() {\n+    int numNodesToFail = FailureManager.getNumberOfOmToFail();\n+    if (failedOmSet.size() >= numOzoneManagers/2) {\n+      return Collections.emptyList();\n+    }\n+\n+    int numOms = getOzoneManagersList().size();\n+    List<OzoneManager> oms = new ArrayList<>(numNodesToFail);\n+    for (int i = 0; i < numNodesToFail; i++) {\n+      int failedNodeIndex = FailureManager.getBoundedRandomIndex(numOms);\n+      oms.add(getOzoneManager(failedNodeIndex));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU3NDA3OQ=="}, "originalCommit": {"oid": "be2ef962388f8d3cd50baadc23cd09b8b06bc853"}, "originalPosition": 347}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgxMDgyMQ==", "bodyText": "There are two concerns with adding same node multiple times:\n\ntrying to fail the same nodes multiple times\nnot failing the required number of nodes\n\nI think using a set addresses the first item, but not the second one.  This could be fixed by generating a random combination of the required size instead of generating multiple independent random indexes.\nI guess that's OK to address in a followup, because this was broken previously, too.", "url": "https://github.com/apache/ozone/pull/874#discussion_r426810821", "createdAt": "2020-05-18T18:17:00Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/MiniOzoneChaosCluster.java", "diffHunk": "@@ -406,19 +280,71 @@ public MiniOzoneChaosCluster build() throws IOException {\n       final List<HddsDatanodeService> hddsDatanodes = createHddsDatanodes(\n           scm, null);\n \n-      MiniOzoneChaosCluster cluster;\n-      if (failureService == FailureService.DATANODE) {\n-        cluster = new MiniOzoneDatanodeChaosCluster(conf, omList, scm,\n-            hddsDatanodes, omServiceId);\n-      } else {\n-        cluster = new MiniOzoneOMChaosCluster(conf, omList, scm,\n-            hddsDatanodes, omServiceId);\n-      }\n+      MiniOzoneChaosCluster cluster =\n+          new MiniOzoneChaosCluster(conf, omList, scm, hddsDatanodes,\n+              omServiceId, clazzes);\n \n       if (startDataNodes) {\n         cluster.startHddsDatanodes();\n       }\n       return cluster;\n     }\n   }\n+\n+  // OzoneManager specifc\n+  public List<OzoneManager> omToFail() {\n+    int numNodesToFail = FailureManager.getNumberOfOmToFail();\n+    if (failedOmSet.size() >= numOzoneManagers/2) {\n+      return Collections.emptyList();\n+    }\n+\n+    int numOms = getOzoneManagersList().size();\n+    List<OzoneManager> oms = new ArrayList<>(numNodesToFail);\n+    for (int i = 0; i < numNodesToFail; i++) {\n+      int failedNodeIndex = FailureManager.getBoundedRandomIndex(numOms);\n+      oms.add(getOzoneManager(failedNodeIndex));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU3NDA3OQ=="}, "originalCommit": {"oid": "be2ef962388f8d3cd50baadc23cd09b8b06bc853"}, "originalPosition": 347}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjcxMzU0OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/MiniOzoneChaosCluster.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMjowNDowMlrOGW0Fhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxODozNzo0NVrOGXDGww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU3NTIzOQ==", "bodyText": "Do we need these overrides?", "url": "https://github.com/apache/ozone/pull/874#discussion_r426575239", "createdAt": "2020-05-18T12:04:02Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/MiniOzoneChaosCluster.java", "diffHunk": "@@ -406,19 +280,71 @@ public MiniOzoneChaosCluster build() throws IOException {\n       final List<HddsDatanodeService> hddsDatanodes = createHddsDatanodes(\n           scm, null);\n \n-      MiniOzoneChaosCluster cluster;\n-      if (failureService == FailureService.DATANODE) {\n-        cluster = new MiniOzoneDatanodeChaosCluster(conf, omList, scm,\n-            hddsDatanodes, omServiceId);\n-      } else {\n-        cluster = new MiniOzoneOMChaosCluster(conf, omList, scm,\n-            hddsDatanodes, omServiceId);\n-      }\n+      MiniOzoneChaosCluster cluster =\n+          new MiniOzoneChaosCluster(conf, omList, scm, hddsDatanodes,\n+              omServiceId, clazzes);\n \n       if (startDataNodes) {\n         cluster.startHddsDatanodes();\n       }\n       return cluster;\n     }\n   }\n+\n+  // OzoneManager specifc\n+  public List<OzoneManager> omToFail() {\n+    int numNodesToFail = FailureManager.getNumberOfOmToFail();\n+    if (failedOmSet.size() >= numOzoneManagers/2) {\n+      return Collections.emptyList();\n+    }\n+\n+    int numOms = getOzoneManagersList().size();\n+    List<OzoneManager> oms = new ArrayList<>(numNodesToFail);\n+    for (int i = 0; i < numNodesToFail; i++) {\n+      int failedNodeIndex = FailureManager.getBoundedRandomIndex(numOms);\n+      oms.add(getOzoneManager(failedNodeIndex));\n+    }\n+    return oms;\n+  }\n+\n+  public void shutdownOzoneManager(OzoneManager om) {\n+    super.shutdownOzoneManager(om);\n+    failedOmSet.add(om);\n+  }\n+\n+  public void restartOzoneManager(OzoneManager om, boolean waitForOM)\n+      throws IOException, TimeoutException, InterruptedException {\n+    super.restartOzoneManager(om, waitForOM);\n+    failedOmSet.remove(om);\n+  }\n+\n+  // Should the selected node be stopped or started.\n+  public boolean shouldStop() {\n+    if (failedOmSet.size() >= numOzoneManagers/2) {\n+      return false;\n+    }\n+    return RandomUtils.nextBoolean();\n+  }\n+\n+  public List<DatanodeDetails> dnToFail() {\n+    int numNodesToFail = FailureManager.getNumberOfDnToFail();\n+    int numDns = getHddsDatanodes().size();\n+    List<DatanodeDetails> dns = new ArrayList<>(numNodesToFail);\n+    for (int i = 0; i < numNodesToFail; i++) {\n+      int failedNodeIndex = FailureManager.getBoundedRandomIndex(numDns);\n+      dns.add(getHddsDatanodes().get(failedNodeIndex).getDatanodeDetails());\n+    }\n+    return dns;\n+  }\n+  \n+  @Override\n+  public void restartHddsDatanode(DatanodeDetails dn, boolean waitForDatanode)\n+      throws InterruptedException, TimeoutException, IOException {\n+    super.restartHddsDatanode(dn, waitForDatanode);\n+  }\n+\n+  @Override\n+  public void shutdownHddsDatanode(int i) {\n+    super.shutdownHddsDatanode(i);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be2ef962388f8d3cd50baadc23cd09b8b06bc853"}, "originalPosition": 391}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgyMTMxNQ==", "bodyText": "Yes, they are getting this used now.", "url": "https://github.com/apache/ozone/pull/874#discussion_r426821315", "createdAt": "2020-05-18T18:37:45Z", "author": {"login": "mukul1987"}, "path": "hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/MiniOzoneChaosCluster.java", "diffHunk": "@@ -406,19 +280,71 @@ public MiniOzoneChaosCluster build() throws IOException {\n       final List<HddsDatanodeService> hddsDatanodes = createHddsDatanodes(\n           scm, null);\n \n-      MiniOzoneChaosCluster cluster;\n-      if (failureService == FailureService.DATANODE) {\n-        cluster = new MiniOzoneDatanodeChaosCluster(conf, omList, scm,\n-            hddsDatanodes, omServiceId);\n-      } else {\n-        cluster = new MiniOzoneOMChaosCluster(conf, omList, scm,\n-            hddsDatanodes, omServiceId);\n-      }\n+      MiniOzoneChaosCluster cluster =\n+          new MiniOzoneChaosCluster(conf, omList, scm, hddsDatanodes,\n+              omServiceId, clazzes);\n \n       if (startDataNodes) {\n         cluster.startHddsDatanodes();\n       }\n       return cluster;\n     }\n   }\n+\n+  // OzoneManager specifc\n+  public List<OzoneManager> omToFail() {\n+    int numNodesToFail = FailureManager.getNumberOfOmToFail();\n+    if (failedOmSet.size() >= numOzoneManagers/2) {\n+      return Collections.emptyList();\n+    }\n+\n+    int numOms = getOzoneManagersList().size();\n+    List<OzoneManager> oms = new ArrayList<>(numNodesToFail);\n+    for (int i = 0; i < numNodesToFail; i++) {\n+      int failedNodeIndex = FailureManager.getBoundedRandomIndex(numOms);\n+      oms.add(getOzoneManager(failedNodeIndex));\n+    }\n+    return oms;\n+  }\n+\n+  public void shutdownOzoneManager(OzoneManager om) {\n+    super.shutdownOzoneManager(om);\n+    failedOmSet.add(om);\n+  }\n+\n+  public void restartOzoneManager(OzoneManager om, boolean waitForOM)\n+      throws IOException, TimeoutException, InterruptedException {\n+    super.restartOzoneManager(om, waitForOM);\n+    failedOmSet.remove(om);\n+  }\n+\n+  // Should the selected node be stopped or started.\n+  public boolean shouldStop() {\n+    if (failedOmSet.size() >= numOzoneManagers/2) {\n+      return false;\n+    }\n+    return RandomUtils.nextBoolean();\n+  }\n+\n+  public List<DatanodeDetails> dnToFail() {\n+    int numNodesToFail = FailureManager.getNumberOfDnToFail();\n+    int numDns = getHddsDatanodes().size();\n+    List<DatanodeDetails> dns = new ArrayList<>(numNodesToFail);\n+    for (int i = 0; i < numNodesToFail; i++) {\n+      int failedNodeIndex = FailureManager.getBoundedRandomIndex(numDns);\n+      dns.add(getHddsDatanodes().get(failedNodeIndex).getDatanodeDetails());\n+    }\n+    return dns;\n+  }\n+  \n+  @Override\n+  public void restartHddsDatanode(DatanodeDetails dn, boolean waitForDatanode)\n+      throws InterruptedException, TimeoutException, IOException {\n+    super.restartHddsDatanode(dn, waitForDatanode);\n+  }\n+\n+  @Override\n+  public void shutdownHddsDatanode(int i) {\n+    super.shutdownHddsDatanode(i);\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU3NTIzOQ=="}, "originalCommit": {"oid": "be2ef962388f8d3cd50baadc23cd09b8b06bc853"}, "originalPosition": 391}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjcyNDk0OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/MiniOzoneChaosCluster.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMjowNzozNlrOGW0Mtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMjowNzozNlrOGW0Mtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU3NzA3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void waitForClusterToBeReady()\n          \n          \n            \n              @Override\n          \n          \n            \n              public void waitForClusterToBeReady()", "url": "https://github.com/apache/ozone/pull/874#discussion_r426577079", "createdAt": "2020-05-18T12:07:36Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/MiniOzoneChaosCluster.java", "diffHunk": "@@ -264,12 +121,30 @@ public void shutdown() {\n     }\n   }\n \n+  /**\n+   * Check if cluster is ready for a restart or shutdown of an OM node. If\n+   * yes, then set isClusterReady to false so that another thread cannot\n+   * restart/ shutdown OM till all OMs are up again.\n+   */\n+  public void waitForClusterToBeReady()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be2ef962388f8d3cd50baadc23cd09b8b06bc853"}, "originalPosition": 254}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NzQ3OTA0OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/failure/FailureManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNToxMDowOVrOGW7kaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxODoxMTozOVrOGXCSrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY5NzgzMw==", "bodyText": "Nit: fail seems to be an overloaded term here (refers to both managed failure and unexpected failure while trying to induce failure).", "url": "https://github.com/apache/ozone/pull/874#discussion_r426697833", "createdAt": "2020-05-18T15:10:09Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/failure/FailureManager.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.failure;\n+\n+import org.apache.commons.lang3.RandomUtils;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.ozone.MiniOzoneChaosCluster;\n+import org.apache.hadoop.util.ReflectionUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Manages all the failures in the MiniOzoneChaosCluster.\n+ */\n+public class FailureManager {\n+\n+  static final Logger LOG =\n+      LoggerFactory.getLogger(Failures.class);\n+\n+  private final MiniOzoneChaosCluster cluster;\n+  private final List<Failures> failures;\n+  private ScheduledFuture scheduledFuture;\n+  private final ScheduledExecutorService executorService;\n+  public FailureManager(MiniOzoneChaosCluster cluster,\n+                        Configuration conf,\n+                        List<Class<? extends Failures>> clazzes) {\n+    this.cluster = cluster;\n+    this.executorService = Executors.newSingleThreadScheduledExecutor();\n+\n+    failures = new ArrayList<>();\n+    for (Class<? extends Failures> clazz : clazzes) {\n+      Failures f = ReflectionUtils.newInstance(clazz, conf);\n+      f.validateFailure(cluster.getOzoneManagersList(),\n+          cluster.getStorageContainerManager(),\n+          cluster.getHddsDatanodes());\n+      failures.add(f);\n+    }\n+\n+  }\n+\n+\n+  // Fail nodes randomly at configured timeout period.\n+  private void fail() {\n+    try {\n+      Failures f = failures.get(getBoundedRandomIndex(failures.size()));\n+      LOG.info(\"time failure with {}\", f.getName());\n+      f.fail(cluster);\n+    } catch (Throwable t) {\n+      LOG.info(\"failing with \", t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be2ef962388f8d3cd50baadc23cd09b8b06bc853"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgwNzk4Mg==", "bodyText": "changed the logging here.", "url": "https://github.com/apache/ozone/pull/874#discussion_r426807982", "createdAt": "2020-05-18T18:11:39Z", "author": {"login": "mukul1987"}, "path": "hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/failure/FailureManager.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.failure;\n+\n+import org.apache.commons.lang3.RandomUtils;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.ozone.MiniOzoneChaosCluster;\n+import org.apache.hadoop.util.ReflectionUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Manages all the failures in the MiniOzoneChaosCluster.\n+ */\n+public class FailureManager {\n+\n+  static final Logger LOG =\n+      LoggerFactory.getLogger(Failures.class);\n+\n+  private final MiniOzoneChaosCluster cluster;\n+  private final List<Failures> failures;\n+  private ScheduledFuture scheduledFuture;\n+  private final ScheduledExecutorService executorService;\n+  public FailureManager(MiniOzoneChaosCluster cluster,\n+                        Configuration conf,\n+                        List<Class<? extends Failures>> clazzes) {\n+    this.cluster = cluster;\n+    this.executorService = Executors.newSingleThreadScheduledExecutor();\n+\n+    failures = new ArrayList<>();\n+    for (Class<? extends Failures> clazz : clazzes) {\n+      Failures f = ReflectionUtils.newInstance(clazz, conf);\n+      f.validateFailure(cluster.getOzoneManagersList(),\n+          cluster.getStorageContainerManager(),\n+          cluster.getHddsDatanodes());\n+      failures.add(f);\n+    }\n+\n+  }\n+\n+\n+  // Fail nodes randomly at configured timeout period.\n+  private void fail() {\n+    try {\n+      Failures f = failures.get(getBoundedRandomIndex(failures.size()));\n+      LOG.info(\"time failure with {}\", f.getName());\n+      f.fail(cluster);\n+    } catch (Throwable t) {\n+      LOG.info(\"failing with \", t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY5NzgzMw=="}, "originalCommit": {"oid": "be2ef962388f8d3cd50baadc23cd09b8b06bc853"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4262, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}