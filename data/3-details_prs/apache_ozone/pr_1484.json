{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5NDk1MzU1", "number": 1484, "title": "HDDS-4322. Add integration tests for Decommission and resolve issues detected by the tests.", "bodyText": "What changes were proposed in this pull request?\nAdd a series of integration tests to prove decommission works, and that decommission can survive a restart of SCM.\nAs part of adding these tests, some issues were discover that were fixed in the process of debugging the tests.\nWhat is the link to the Apache JIRA\nhttps://issues.apache.org/jira/browse/HDDS-4322\nHow was this patch tested?\nNew integration tests added", "createdAt": "2020-10-07T20:21:44Z", "url": "https://github.com/apache/ozone/pull/1484", "merged": true, "mergeCommit": {"oid": "f74d73ada0db79a3a14df89d9d6474ef39465424"}, "closed": true, "closedAt": "2020-10-14T08:03:59Z", "author": {"login": "sodonnel"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdQSu3JAH2gAyNDk5NDk1MzU1OjNhY2FmOWMzNzM4NjQ1NDBiNDcwNzdiZWIxMDQyMzRhYzQ0ZWI1MzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSSpVtgFqTUwNzkyODgwNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3acaf9c373864540b47077beb104234ac44eb533", "author": {"user": null}, "url": "https://github.com/apache/ozone/commit/3acaf9c373864540b47077beb104234ac44eb533", "committedDate": "2020-10-07T20:09:30Z", "message": "Add integration tests to prove datanodes can be decommissioned successfully"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdd5c9723bbc6f170fd39944ce052673cb6fb89b", "author": {"user": null}, "url": "https://github.com/apache/ozone/commit/cdd5c9723bbc6f170fd39944ce052673cb6fb89b", "committedDate": "2020-10-07T20:52:11Z", "message": "Fixed checkstyle issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1NjYwMzkw", "url": "https://github.com/apache/ozone/pull/1484#pullrequestreview-505660390", "createdAt": "2020-10-09T13:14:17Z", "commit": {"oid": "cdd5c9723bbc6f170fd39944ce052673cb6fb89b"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1NjYxNjg1", "url": "https://github.com/apache/ozone/pull/1484#pullrequestreview-505661685", "createdAt": "2020-10-09T13:15:42Z", "commit": {"oid": "cdd5c9723bbc6f170fd39944ce052673cb6fb89b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMzoxNTo0MlrOHfJOsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMzoxNTo0MlrOHfJOsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQxOTEyMw==", "bodyText": "Do we need it on info level? What is the expected frequency of this message?\nI can create a decom insight point to make it easier to see this message, if it's required for debugging...", "url": "https://github.com/apache/ozone/pull/1484#discussion_r502419123", "createdAt": "2020-10-09T13:15:42Z", "author": {"login": "elek"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/DatanodeAdminMonitorImpl.java", "diffHunk": "@@ -294,6 +294,9 @@ private boolean checkContainersReplicatedOnNode(DatanodeDetails dn)\n             \"in containerManager\", cid, dn);\n       }\n     }\n+    LOG.info(\"{} has {} sufficientlyReplicated, {} underReplicated and {} \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd5c9723bbc6f170fd39944ce052673cb6fb89b"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1Njk2NzUz", "url": "https://github.com/apache/ozone/pull/1484#pullrequestreview-505696753", "createdAt": "2020-10-09T13:57:07Z", "commit": {"oid": "cdd5c9723bbc6f170fd39944ce052673cb6fb89b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMzo1NzowOFrOHfK1Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMzo1NzowOFrOHfK1Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ0NTMxNA==", "bodyText": "These fields had been missed from the DatanodeDetails builder object, so when the DN reported back its \"persisted state\" the DN was always IN_SERVICE. Adding this change fixed that problem and allowed the state to be returned correctly.", "url": "https://github.com/apache/ozone/pull/1484#discussion_r502445314", "createdAt": "2020-10-09T13:57:08Z", "author": {"login": "sodonnel"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/protocol/DatanodeDetails.java", "diffHunk": "@@ -476,6 +476,9 @@ public Builder setDatanodeDetails(DatanodeDetails details) {\n       this.setupTime = details.getSetupTime();\n       this.revision = details.getRevision();\n       this.buildDate = details.getBuildDate();\n+      this.persistedOpState = details.getPersistedOpState();\n+      this.persistedOpStateExpiryEpochSec =\n+          details.getPersistedOpStateExpiryEpochSec();\n       return this;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd5c9723bbc6f170fd39944ce052673cb6fb89b"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1Njk4OTQ5", "url": "https://github.com/apache/ozone/pull/1484#pullrequestreview-505698949", "createdAt": "2020-10-09T13:59:31Z", "commit": {"oid": "cdd5c9723bbc6f170fd39944ce052673cb6fb89b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMzo1OTozMVrOHfK7cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMzo1OTozMVrOHfK7cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ0Njk2Mg==", "bodyText": "If a DN is DECOMMISSIONING, and then SCM is restarted, SCM will forget all about the decommission nodes. Then the nodes will re-register with SCM and report they are DECOMMISSIONING. If the node is DECOMMISSIONING rather than DECOMMISSIONED, we need to get it back into the decommission workflow. This NewNodeHandler is invoked for a new registration of a Node, so this change continues the decom process.", "url": "https://github.com/apache/ozone/pull/1484#discussion_r502446962", "createdAt": "2020-10-09T13:59:31Z", "author": {"login": "sodonnel"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/NewNodeHandler.java", "diffHunk": "@@ -20,27 +20,49 @@\n \n import org.apache.hadoop.hdds.conf.ConfigurationSource;\n import org.apache.hadoop.hdds.protocol.DatanodeDetails;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n+import org.apache.hadoop.hdds.scm.node.states.NodeNotFoundException;\n import org.apache.hadoop.hdds.scm.pipeline.PipelineManager;\n import org.apache.hadoop.hdds.server.events.EventHandler;\n import org.apache.hadoop.hdds.server.events.EventPublisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * Handles New Node event.\n  */\n public class NewNodeHandler implements EventHandler<DatanodeDetails> {\n \n   private final PipelineManager pipelineManager;\n+  private final NodeDecommissionManager decommissionManager;\n   private final ConfigurationSource conf;\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(NewNodeHandler.class);\n \n   public NewNodeHandler(PipelineManager pipelineManager,\n+      NodeDecommissionManager decommissionManager,\n       ConfigurationSource conf) {\n     this.pipelineManager = pipelineManager;\n+    this.decommissionManager = decommissionManager;\n     this.conf = conf;\n   }\n \n   @Override\n   public void onMessage(DatanodeDetails datanodeDetails,\n       EventPublisher publisher) {\n     pipelineManager.triggerPipelineCreation();\n+    HddsProtos.NodeOperationalState opState\n+        = datanodeDetails.getPersistedOpState();\n+    if (datanodeDetails.getPersistedOpState()\n+        != HddsProtos.NodeOperationalState.IN_SERVICE) {\n+      try {\n+        decommissionManager.continueAdminForNode(datanodeDetails);\n+      } catch (NodeNotFoundException e) {\n+        // Should not happen, as the node has just registered to call this event\n+        // handler.\n+        LOG.warn(\"NodeNotFound when adding the node to the decommissionManager\",\n+            e);\n+      }\n+    }\n   }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd5c9723bbc6f170fd39944ce052673cb6fb89b"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1Njk5NDk1", "url": "https://github.com/apache/ozone/pull/1484#pullrequestreview-505699495", "createdAt": "2020-10-09T14:00:09Z", "commit": {"oid": "cdd5c9723bbc6f170fd39944ce052673cb6fb89b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNDowMDowOVrOHfK88Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNDowMDowOVrOHfK88Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ0NzM0NQ==", "bodyText": "This facilitates nodes re-joining the workflow - will be called from NewNodeHandler.", "url": "https://github.com/apache/ozone/pull/1484#discussion_r502447345", "createdAt": "2020-10-09T14:00:09Z", "author": {"login": "sodonnel"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/NodeDecommissionManager.java", "diffHunk": "@@ -233,6 +233,22 @@ public synchronized void decommissionNodes(List nodes)\n     }\n   }\n \n+  /**\n+   * If a SCM is restarted, then upon re-registration the datanode will already\n+   * be in DECOMMISSIONING or ENTERING_MAINTENANCE state. In that case, it\n+   * needs to be added back into the monitor to track its progress.\n+   * @param dn Datanode to add back to tracking.\n+   * @throws NodeNotFoundException\n+   */\n+  public synchronized void continueAdminForNode(DatanodeDetails dn)\n+      throws NodeNotFoundException {\n+    NodeOperationalState opState = getNodeStatus(dn).getOperationalState();\n+    if (opState == NodeOperationalState.DECOMMISSIONING\n+        || opState == NodeOperationalState.ENTERING_MAINTENANCE) {\n+      monitor.startMonitoring(dn, 0);\n+    }\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd5c9723bbc6f170fd39944ce052673cb6fb89b"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1NzAyMjU0", "url": "https://github.com/apache/ozone/pull/1484#pullrequestreview-505702254", "createdAt": "2020-10-09T14:02:30Z", "commit": {"oid": "cdd5c9723bbc6f170fd39944ce052673cb6fb89b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNDowMjozMFrOHfLD3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNDowMjozMFrOHfLD3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ0OTExOQ==", "bodyText": "This code was lifted out of SCMNodeManager as it fits better here. The NodeStatus is now set as part of registration and before any events are triggered (eg PipelineCreation). Before there was a race condition, where the NodeStatus was IN_SERVICE and pipeline creation could be triggered. Then the state was quickly changed to DECOMMISSIONED etc.", "url": "https://github.com/apache/ozone/pull/1484#discussion_r502449119", "createdAt": "2020-10-09T14:02:30Z", "author": {"login": "sodonnel"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/NodeStateManager.java", "diffHunk": "@@ -239,11 +239,32 @@ private void initializeStateMachines() {\n    */\n   public void addNode(DatanodeDetails datanodeDetails)\n       throws NodeAlreadyExistsException {\n-    nodeStateMap.addNode(datanodeDetails, new NodeStatus(\n-        NodeOperationalState.IN_SERVICE, nodeHealthSM.getInitialState()));\n+    NodeStatus newNodeStatus = newNodeStatus(datanodeDetails);\n+    nodeStateMap.addNode(datanodeDetails, newNodeStatus);\n     eventPublisher.fireEvent(SCMEvents.NEW_NODE, datanodeDetails);\n   }\n \n+  /**\n+   * When a node registers with SCM, the operational state stored on the\n+   * datanode is the source of truth. Therefore, if the datanode reports\n+   * anything other than IN_SERVICE on registration, the state in SCM should be\n+   * updated to reflect the datanode state.\n+   * @param dn DatanodeDetails reported by the datanode\n+   */\n+  private NodeStatus newNodeStatus(DatanodeDetails dn) {\n+    HddsProtos.NodeOperationalState dnOpState = dn.getPersistedOpState();\n+    if (dnOpState != NodeOperationalState.IN_SERVICE) {\n+      LOG.info(\"Updating nodeOperationalState on registration as the \" +\n+              \"datanode has a persisted state of {} and expiry of {}\",\n+          dnOpState, dn.getPersistedOpStateExpiryEpochSec());\n+      return new NodeStatus(dnOpState, nodeHealthSM.getInitialState(),\n+          dn.getPersistedOpStateExpiryEpochSec());\n+    } else {\n+      return new NodeStatus(\n+          NodeOperationalState.IN_SERVICE, nodeHealthSM.getInitialState());\n+    }\n+  }\n+\n   /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd5c9723bbc6f170fd39944ce052673cb6fb89b"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3OTI4ODA1", "url": "https://github.com/apache/ozone/pull/1484#pullrequestreview-507928805", "createdAt": "2020-10-14T01:11:19Z", "commit": {"oid": "cdd5c9723bbc6f170fd39944ce052673cb6fb89b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2350, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}