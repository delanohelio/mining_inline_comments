{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1MTQwNDUz", "number": 1679, "title": "HDDS-4514. AllocateBlock : lookup and update open file table for the given path", "bodyText": "What changes were proposed in this pull request?\nThis task is to use open file table for the allocate block operations. This has been identified as part of Hive TPCDS benchmark test\nWhat is the link to the Apache JIRA\nhttps://issues.apache.org/jira/browse/HDDS-4514\nHow was this patch tested?\nAdded UT cases. Also, verified by running hive tpcds test", "createdAt": "2020-12-09T12:20:34Z", "url": "https://github.com/apache/ozone/pull/1679", "merged": true, "mergeCommit": {"oid": "9618c5f7e7068986e9f5cfae10a34a413f51ace5"}, "closed": true, "closedAt": "2020-12-22T03:37:26Z", "author": {"login": "rakeshadr"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdkdur8gH2gAyNTM1MTQwNDUzOjJlYmE4YTcwYTliNTU4YWU3MDcxMjYwZTgyOWRlYzg4YTkxMzFmODE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdogziwAH2gAyNTM1MTQwNDUzOmFhZjc3ZjQ0OTRiMjIxM2E1MzY5ZGVhY2U0ZTlkNzAwNjcxYTA4YmM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2eba8a70a9b558ae7071260e829dec88a9131f81", "author": {"user": {"login": "rakeshadr", "name": "Rakesh Radhakrishnan"}}, "url": "https://github.com/apache/ozone/commit/2eba8a70a9b558ae7071260e829dec88a9131f81", "committedDate": "2020-12-09T12:16:45Z", "message": "HDDS-4514. AllocateBlock : lookup and update open file table for the given path"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ab5ea12ad5ed7d2b6bd3d8780866d11ee645733", "author": {"user": {"login": "rakeshadr", "name": "Rakesh Radhakrishnan"}}, "url": "https://github.com/apache/ozone/commit/8ab5ea12ad5ed7d2b6bd3d8780866d11ee645733", "committedDate": "2020-12-09T12:39:51Z", "message": "Updated RequestV1 test case to use new prefix tables"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4MzQ4Nzg0", "url": "https://github.com/apache/ozone/pull/1679#pullrequestreview-548348784", "createdAt": "2020-12-09T16:12:08Z", "commit": {"oid": "8ab5ea12ad5ed7d2b6bd3d8780866d11ee645733"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjoxMjowOVrOICc1oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjoxMjowOVrOICc1oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ0MDU0NQ==", "bodyText": "volume usedbytes update can be removed", "url": "https://github.com/apache/ozone/pull/1679#discussion_r539440545", "createdAt": "2020-12-09T16:12:09Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/key/OMAllocateBlockResponseV1.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.response.key;\n+\n+import org.apache.hadoop.hdds.utils.db.BatchOperation;\n+import org.apache.hadoop.ozone.om.OMMetadataManager;\n+import org.apache.hadoop.ozone.om.helpers.OmBucketInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmKeyInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmVolumeArgs;\n+import org.apache.hadoop.ozone.om.request.file.OMFileRequest;\n+import org.apache.hadoop.ozone.om.response.CleanupTableInfo;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMResponse;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+\n+import static org.apache.hadoop.ozone.om.OmMetadataManagerImpl.OPEN_FILE_TABLE;\n+\n+/**\n+ * Response for AllocateBlock request layout version V1.\n+ */\n+@CleanupTableInfo(cleanupTables = {OPEN_FILE_TABLE})\n+public class OMAllocateBlockResponseV1 extends OMAllocateBlockResponse {\n+\n+  public OMAllocateBlockResponseV1(@Nonnull OMResponse omResponse,\n+      @Nonnull OmKeyInfo omKeyInfo, long clientID,\n+      @Nonnull OmVolumeArgs omVolumeArgs, @Nonnull OmBucketInfo omBucketInfo) {\n+    super(omResponse, omKeyInfo, clientID, omVolumeArgs, omBucketInfo);\n+  }\n+\n+  @Override\n+  public void addToDBBatch(OMMetadataManager omMetadataManager,\n+      BatchOperation batchOperation) throws IOException {\n+\n+    OMFileRequest.addToOpenFileTable(omMetadataManager, batchOperation,\n+            getOmKeyInfo(), getClientID());\n+\n+    // update volume usedBytes.\n+    omMetadataManager.getVolumeTable().putWithBatch(batchOperation,\n+            omMetadataManager.getVolumeKey(getOmVolumeArgs().getVolume()),\n+            getOmVolumeArgs());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab5ea12ad5ed7d2b6bd3d8780866d11ee645733"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc40da0723b2318f155ec15be77978708983b640", "author": {"user": {"login": "rakeshadr", "name": "Rakesh Radhakrishnan"}}, "url": "https://github.com/apache/ozone/commit/dc40da0723b2318f155ec15be77978708983b640", "committedDate": "2020-12-09T17:37:59Z", "message": "Fixed review comment - removed volume usedbytes and added logs to check UT failure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37d20395cdcaa9799bc26b675ee0b2bea0a4f2ef", "author": {"user": {"login": "rakeshadr", "name": "Rakesh Radhakrishnan"}}, "url": "https://github.com/apache/ozone/commit/37d20395cdcaa9799bc26b675ee0b2bea0a4f2ef", "committedDate": "2020-12-10T02:57:20Z", "message": "Added rootDirCleanup on TestOzoneFileSystem#testListStatusOnLargeDirectory to fix failure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6130b4dae2c92a2eeb58b490d6c08f40bb4b32a", "author": {"user": {"login": "rakeshadr", "name": "Rakesh Radhakrishnan"}}, "url": "https://github.com/apache/ozone/commit/d6130b4dae2c92a2eeb58b490d6c08f40bb4b32a", "committedDate": "2020-12-10T07:55:20Z", "message": "Fixed checkstyle warning"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5MzQ3Mjk2", "url": "https://github.com/apache/ozone/pull/1679#pullrequestreview-549347296", "createdAt": "2020-12-10T15:59:49Z", "commit": {"oid": "d6130b4dae2c92a2eeb58b490d6c08f40bb4b32a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NzMyNjE2", "url": "https://github.com/apache/ozone/pull/1679#pullrequestreview-549732616", "createdAt": "2020-12-11T01:11:36Z", "commit": {"oid": "d6130b4dae2c92a2eeb58b490d6c08f40bb4b32a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMToxMTozN1rOIDkmsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMToxMTozN1rOIDkmsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYxNjM2OQ==", "bodyText": "Question:\nV1 only supports filesystem.paths.enabled true only and old code will be used when filesystem.paths.enabled false.\nI think, we had a discussion some time back, can you provide info.\nIs that is the reason only code for true mode is only handled in V1?", "url": "https://github.com/apache/ozone/pull/1679#discussion_r540616369", "createdAt": "2020-12-11T01:11:37Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMAllocateBlockRequestV1.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.request.key;\n+\n+import org.apache.hadoop.ozone.om.OMMetadataManager;\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.helpers.OmBucketInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmKeyInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmVolumeArgs;\n+import org.apache.hadoop.ozone.om.helpers.OzoneFSUtils;\n+import org.apache.hadoop.ozone.om.request.file.OMFileRequest;\n+import org.apache.hadoop.ozone.om.response.OMClientResponse;\n+import org.apache.hadoop.ozone.om.response.key.OMAllocateBlockResponseV1;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMRequest;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMResponse;\n+import org.jetbrains.annotations.NotNull;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Iterator;\n+\n+/**\n+ * Handles allocate block request layout version V1.\n+ */\n+public class OMAllocateBlockRequestV1 extends OMAllocateBlockRequest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6130b4dae2c92a2eeb58b490d6c08f40bb4b32a"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NzM2NDM3", "url": "https://github.com/apache/ozone/pull/1679#pullrequestreview-549736437", "createdAt": "2020-12-11T01:22:35Z", "commit": {"oid": "d6130b4dae2c92a2eeb58b490d6c08f40bb4b32a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMToyMjozNVrOIDk20Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMToyMjozNVrOIDk20Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYyMDQ5Nw==", "bodyText": "Not holding bucket lock during traversing of key to get parentID\nDo you think we will have a race condition with delete or any parent directories?", "url": "https://github.com/apache/ozone/pull/1679#discussion_r540620497", "createdAt": "2020-12-11T01:22:35Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMAllocateBlockRequestV1.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.request.key;\n+\n+import org.apache.hadoop.ozone.om.OMMetadataManager;\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.helpers.OmBucketInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmKeyInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmVolumeArgs;\n+import org.apache.hadoop.ozone.om.helpers.OzoneFSUtils;\n+import org.apache.hadoop.ozone.om.request.file.OMFileRequest;\n+import org.apache.hadoop.ozone.om.response.OMClientResponse;\n+import org.apache.hadoop.ozone.om.response.key.OMAllocateBlockResponseV1;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMRequest;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMResponse;\n+import org.jetbrains.annotations.NotNull;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Iterator;\n+\n+/**\n+ * Handles allocate block request layout version V1.\n+ */\n+public class OMAllocateBlockRequestV1 extends OMAllocateBlockRequest {\n+\n+  private static final Logger LOG =\n+          LoggerFactory.getLogger(OMAllocateBlockRequestV1.class);\n+\n+  public OMAllocateBlockRequestV1(OMRequest omRequest) {\n+    super(omRequest);\n+  }\n+\n+  protected OmKeyInfo getOpenKeyInfo(OMMetadataManager omMetadataManager,\n+      String openKeyName, String keyName) throws IOException {\n+    String fileName = OzoneFSUtils.getFileName(keyName);\n+    return OMFileRequest.getOmKeyInfoFromFileTable(true,\n+            omMetadataManager, openKeyName, fileName);\n+  }\n+\n+  protected String getOpenKeyName(String volumeName, String bucketName,\n+      String keyName, long clientID, OzoneManager ozoneManager)\n+          throws IOException {\n+    OMMetadataManager omMetadataManager = ozoneManager.getMetadataManager();\n+    String bucketKey = omMetadataManager.getBucketKey(volumeName, bucketName);\n+    OmBucketInfo omBucketInfo =\n+            omMetadataManager.getBucketTable().get(bucketKey);\n+    long bucketId = omBucketInfo.getObjectID();\n+    String fileName = OzoneFSUtils.getFileName(keyName);\n+    Iterator<Path> pathComponents = Paths.get(keyName).iterator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6130b4dae2c92a2eeb58b490d6c08f40bb4b32a"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwNDA3Mzgw", "url": "https://github.com/apache/ozone/pull/1679#pullrequestreview-550407380", "createdAt": "2020-12-11T18:14:09Z", "commit": {"oid": "d6130b4dae2c92a2eeb58b490d6c08f40bb4b32a"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODoxNDowOVrOIEETag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODo1MzowNVrOIEFpZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEzNTcyMg==", "bodyText": "Why do we need this copyObject here?\nBecause get() always returns new object. (if it exists in cache, it returns copyObject, if in DB, get new parsed Object from bytes.\n  public VALUE get(KEY key) throws IOException {\n    // Here the metadata lock will guarantee that cache is not updated for same\n    // key during get key.\n\n    CacheResult<CacheValue<VALUE>> cacheResult =\n        cache.lookup(new CacheKey<>(key));\n\n    if (cacheResult.getCacheStatus() == EXISTS) {\n      return codecRegistry.copyObject(cacheResult.getValue().getCacheValue(),\n          valueType);\n    } else if (cacheResult.getCacheStatus() == NOT_EXIST) {\n      return null;\n    } else {\n      return getFromTable(key);\n    }\n  }", "url": "https://github.com/apache/ozone/pull/1679#discussion_r541135722", "createdAt": "2020-12-11T18:14:09Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileRequest.java", "diffHunk": "@@ -556,9 +560,10 @@ public static OmKeyInfo getOmKeyInfoFromFileTable(boolean openFileTable,\n     // For example, the user given key path is '/a/b/c/d/e/file1', then in DB\n     // keyName field stores only the leaf node name, which is 'file1'.\n     if (dbOmKeyInfo != null) {\n-      dbOmKeyInfo.setKeyName(keyName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6130b4dae2c92a2eeb58b490d6c08f40bb4b32a"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEzNzg3NQ==", "bodyText": "Minor: Comment says Returns its parentID.\nIn code we just check if lastComponent is true and fileSystem enabled, we return exception.\nAnd also as current V1 always assumes fs enabled true, do we need && ozoneManager.getEnableFileSystemPaths() check?\nAnd also these 3 lines can be in the calling method, as it is not a utility method which is called by different classes.", "url": "https://github.com/apache/ozone/pull/1679#discussion_r541137875", "createdAt": "2020-12-11T18:17:45Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileRequest.java", "diffHunk": "@@ -851,4 +856,72 @@ private static boolean checkSubFileExists(OmKeyInfo omKeyInfo,\n   public static boolean isImmediateChild(long parentId, long ancestorId) {\n     return parentId == ancestorId;\n   }\n+\n+\n+  /**\n+   * Check for directory exists with same name, if it exists throw error.\n+   *\n+   * @param keyName                  key name\n+   * @param ozoneManager             Ozone Manager\n+   * @param reachedLastPathComponent true if the path component is a fileName\n+   * @throws IOException if directory exists with same name\n+   */\n+  private static void checkDirectoryAlreadyExists(String keyName,\n+      OzoneManager ozoneManager, boolean reachedLastPathComponent)\n+          throws IOException {\n+    // Reached last component, which would be a file. Returns its parentID.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6130b4dae2c92a2eeb58b490d6c08f40bb4b32a"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0Nzk2NA==", "bodyText": "We don't update omVolumeArgs, but still reading and passing to Response, which is not required.\nNot related to your patch BTW, we can fix this in master and get to branch.", "url": "https://github.com/apache/ozone/pull/1679#discussion_r541147964", "createdAt": "2020-12-11T18:35:26Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMAllocateBlockRequest.java", "diffHunk": "@@ -216,17 +216,15 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       openKeyInfo.setUpdateID(trxnLogIndex, ozoneManager.isRatisEnabled());\n \n       // Add to cache.\n-      omMetadataManager.getOpenKeyTable().addCacheEntry(\n-          new CacheKey<>(openKeyName),\n-          new CacheValue<>(Optional.of(openKeyInfo), trxnLogIndex));\n-\n+      addOpenTableCacheEntry(trxnLogIndex, omMetadataManager, openKeyName,\n+          openKeyInfo);\n       omBucketInfo.incrUsedBytes(preAllocatedSpace);\n \n       omResponse.setAllocateBlockResponse(AllocateBlockResponse.newBuilder()\n           .setKeyLocation(blockLocation).build());\n-      omClientResponse = new OMAllocateBlockResponse(omResponse.build(),\n-          openKeyInfo, clientID, omVolumeArgs, omBucketInfo.copyObject());\n \n+      omClientResponse = getOmClientResponse(clientID, omResponse,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6130b4dae2c92a2eeb58b490d6c08f40bb4b32a"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE1NjYyMw==", "bodyText": "Not understood this comment and why we need to do this, and is there in many tests, can you provide info why we need to do this?", "url": "https://github.com/apache/ozone/pull/1679#discussion_r541156623", "createdAt": "2020-12-11T18:51:13Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/response/key/TestOMAllocateBlockResponseV1.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.response.key;\n+\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+import org.apache.hadoop.ozone.om.OMConfigKeys;\n+import org.apache.hadoop.ozone.om.helpers.OmBucketInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmKeyInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmVolumeArgs;\n+import org.apache.hadoop.ozone.om.ratis.utils.OzoneManagerRatisUtils;\n+import org.apache.hadoop.ozone.om.request.TestOMRequestUtils;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMResponse;\n+import org.apache.hadoop.util.Time;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * Tests OMAllocateBlockResponse layout version V1.\n+ */\n+public class TestOMAllocateBlockResponseV1\n+        extends TestOMAllocateBlockResponse {\n+\n+  // logical ID, which really doesn't exist in dirTable\n+  private long parentID = 10;\n+  private String fileName = \"file1\";\n+\n+  protected OmKeyInfo createOmKeyInfo() throws Exception {\n+    // need to initialize parentID\n+    String parentDir = keyName;\n+    keyName = parentDir + OzoneConsts.OM_KEY_PREFIX + fileName;\n+\n+    long txnId = 50;\n+    long objectId = parentID + 1;\n+\n+    OmKeyInfo omKeyInfoV1 =\n+            TestOMRequestUtils.createOmKeyInfo(volumeName, bucketName, keyName,\n+                    HddsProtos.ReplicationType.RATIS,\n+                    HddsProtos.ReplicationFactor.ONE, objectId, parentID, txnId,\n+                    Time.now());\n+    return omKeyInfoV1;\n+  }\n+\n+  protected String getOpenKey() throws Exception {\n+    return omMetadataManager.getOpenFileName(\n+            parentID, fileName, clientID);\n+  }\n+\n+  @NotNull\n+  protected OMAllocateBlockResponse getOmAllocateBlockResponse(\n+          OmKeyInfo omKeyInfo, OmVolumeArgs omVolumeArgs,\n+          OmBucketInfo omBucketInfo, OMResponse omResponse) {\n+    return new OMAllocateBlockResponseV1(omResponse, omKeyInfo, clientID,\n+            omVolumeArgs, omBucketInfo);\n+  }\n+\n+  @NotNull\n+  @Override\n+  protected OzoneConfiguration getOzoneConfiguration() {\n+    OzoneConfiguration config = super.getOzoneConfiguration();\n+    config.set(OMConfigKeys.OZONE_OM_LAYOUT_VERSION, \"V1\");\n+    // OzoneManager#start() is not invoked in this test cases. Hence need to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6130b4dae2c92a2eeb58b490d6c08f40bb4b32a"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE1NzczNA==", "bodyText": "Is this for getKeyTable where we used this in metadatamanager?", "url": "https://github.com/apache/ozone/pull/1679#discussion_r541157734", "createdAt": "2020-12-11T18:53:05Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/response/key/TestOMAllocateBlockResponseV1.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.response.key;\n+\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+import org.apache.hadoop.ozone.om.OMConfigKeys;\n+import org.apache.hadoop.ozone.om.helpers.OmBucketInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmKeyInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmVolumeArgs;\n+import org.apache.hadoop.ozone.om.ratis.utils.OzoneManagerRatisUtils;\n+import org.apache.hadoop.ozone.om.request.TestOMRequestUtils;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMResponse;\n+import org.apache.hadoop.util.Time;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * Tests OMAllocateBlockResponse layout version V1.\n+ */\n+public class TestOMAllocateBlockResponseV1\n+        extends TestOMAllocateBlockResponse {\n+\n+  // logical ID, which really doesn't exist in dirTable\n+  private long parentID = 10;\n+  private String fileName = \"file1\";\n+\n+  protected OmKeyInfo createOmKeyInfo() throws Exception {\n+    // need to initialize parentID\n+    String parentDir = keyName;\n+    keyName = parentDir + OzoneConsts.OM_KEY_PREFIX + fileName;\n+\n+    long txnId = 50;\n+    long objectId = parentID + 1;\n+\n+    OmKeyInfo omKeyInfoV1 =\n+            TestOMRequestUtils.createOmKeyInfo(volumeName, bucketName, keyName,\n+                    HddsProtos.ReplicationType.RATIS,\n+                    HddsProtos.ReplicationFactor.ONE, objectId, parentID, txnId,\n+                    Time.now());\n+    return omKeyInfoV1;\n+  }\n+\n+  protected String getOpenKey() throws Exception {\n+    return omMetadataManager.getOpenFileName(\n+            parentID, fileName, clientID);\n+  }\n+\n+  @NotNull\n+  protected OMAllocateBlockResponse getOmAllocateBlockResponse(\n+          OmKeyInfo omKeyInfo, OmVolumeArgs omVolumeArgs,\n+          OmBucketInfo omBucketInfo, OMResponse omResponse) {\n+    return new OMAllocateBlockResponseV1(omResponse, omKeyInfo, clientID,\n+            omVolumeArgs, omBucketInfo);\n+  }\n+\n+  @NotNull\n+  @Override\n+  protected OzoneConfiguration getOzoneConfiguration() {\n+    OzoneConfiguration config = super.getOzoneConfiguration();\n+    config.set(OMConfigKeys.OZONE_OM_LAYOUT_VERSION, \"V1\");\n+    // OzoneManager#start() is not invoked in this test cases. Hence need to", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE1NjYyMw=="}, "originalCommit": {"oid": "d6130b4dae2c92a2eeb58b490d6c08f40bb4b32a"}, "originalPosition": 78}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b0c26b7b947d63ff182e17219cedd9ba030326b", "author": {"user": {"login": "rakeshadr", "name": "Rakesh Radhakrishnan"}}, "url": "https://github.com/apache/ozone/commit/4b0c26b7b947d63ff182e17219cedd9ba030326b", "committedDate": "2020-12-21T05:37:09Z", "message": "Fixed Bharat's review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c46fb1807d3bbeb22e8fcca466acb8dbf6fdac0", "author": {"user": {"login": "rakeshadr", "name": "Rakesh Radhakrishnan"}}, "url": "https://github.com/apache/ozone/commit/3c46fb1807d3bbeb22e8fcca466acb8dbf6fdac0", "committedDate": "2020-12-21T06:14:55Z", "message": "Fixed compilation error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "702e038a39f255e5e3d0a91ab53c3ef019e0ef1d", "author": {"user": {"login": "rakeshadr", "name": "Rakesh Radhakrishnan"}}, "url": "https://github.com/apache/ozone/commit/702e038a39f255e5e3d0a91ab53c3ef019e0ef1d", "committedDate": "2020-12-21T06:17:35Z", "message": "Fixed checkstyle warnings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82cec8d1873f6d5cd1a8210076eba623996f665e", "author": {"user": {"login": "rakeshadr", "name": "Rakesh Radhakrishnan"}}, "url": "https://github.com/apache/ozone/commit/82cec8d1873f6d5cd1a8210076eba623996f665e", "committedDate": "2020-12-21T13:52:17Z", "message": "Added omBucketInfo.copyObject() in OMAllocateBlockRequest"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2NzEzODM0", "url": "https://github.com/apache/ozone/pull/1679#pullrequestreview-556713834", "createdAt": "2020-12-21T22:53:59Z", "commit": {"oid": "82cec8d1873f6d5cd1a8210076eba623996f665e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMjo1Mzo1OVrOIJoZsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMjo1Mzo1OVrOIJoZsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk3MDAzNQ==", "bodyText": "Just space only changes.", "url": "https://github.com/apache/ozone/pull/1679#discussion_r546970035", "createdAt": "2020-12-21T22:53:59Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMAllocateBlockRequest.java", "diffHunk": "@@ -219,14 +219,13 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       omMetadataManager.getOpenKeyTable().addCacheEntry(\n           new CacheKey<>(openKeyName),\n           new CacheValue<>(Optional.of(openKeyInfo), trxnLogIndex));\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82cec8d1873f6d5cd1a8210076eba623996f665e"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aaf77f4494b2213a5369deace4e9d700671a08bc", "author": {"user": {"login": "rakeshadr", "name": "Rakesh Radhakrishnan"}}, "url": "https://github.com/apache/ozone/commit/aaf77f4494b2213a5369deace4e9d700671a08bc", "committedDate": "2020-12-22T02:07:28Z", "message": "Removed unnecessary spaces in OMAllocateBlockRequest"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2075, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}