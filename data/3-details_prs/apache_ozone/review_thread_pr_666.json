{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2OTcyNTk3", "number": 666, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMzo1MjowN1rODnU0Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNDowOTo0OFrODnU8sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTYyMDU5OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/recon/TestReconWithOzoneManagerHA.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMzo1MjowN1rOF1QdOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNDoxNjo0MVrOF1Qv3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM4ODQ3NQ==", "bodyText": "We don't need to set the Recon HTTP and RPC port. By default a free port is assigned. The setters are needed in case the test needs to know the port that was assigned.", "url": "https://github.com/apache/ozone/pull/666#discussion_r391388475", "createdAt": "2020-03-12T03:52:07Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/recon/TestReconWithOzoneManagerHA.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.recon;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.OZONE_OM_DB_CHECKPOINT_HTTP_ENDPOINT;\n+\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.net.NetUtils;\n+import org.apache.hadoop.ozone.MiniOzoneCluster;\n+import org.apache.hadoop.ozone.MiniOzoneHAClusterImpl;\n+import org.apache.hadoop.ozone.client.ObjectStore;\n+import org.apache.hadoop.ozone.client.OzoneClientFactory;\n+import org.apache.hadoop.ozone.om.OMConfigKeys;\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.recon.spi.impl.OzoneManagerServiceProviderImpl;\n+import org.apache.hadoop.test.GenericTestUtils;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+\n+/**\n+ * This class sets up a MiniOzoneHACluster to test with Recon.\n+ */\n+public class TestReconWithOzoneManagerHA {\n+  @Rule\n+  public Timeout timeout = new Timeout(300_000);\n+\n+  private MiniOzoneHAClusterImpl cluster;\n+  private ObjectStore objectStore;\n+  private final String omServiceId = \"omService1\";\n+\n+  @Before\n+  public void setup() throws Exception {\n+    OzoneConfiguration conf = new OzoneConfiguration();\n+    conf.set(OMConfigKeys.OZONE_OM_RATIS_ENABLE_KEY, Boolean.TRUE.toString());\n+    cluster = (MiniOzoneHAClusterImpl) MiniOzoneCluster.newHABuilder(conf)\n+        .setClusterId(UUID.randomUUID().toString())\n+        .setScmId(UUID.randomUUID().toString())\n+        .setOMServiceId(omServiceId)\n+        .setNumDatanodes(1)\n+        .setNumOfOzoneManagers(3)\n+        .includeRecon(true)\n+        .setReconHttpPort(NetUtils.getFreeSocketPort())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2368839aa86a5e49cec5e72e57be4159b6d913de"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM5MzI0NQ==", "bodyText": "Fair enough.", "url": "https://github.com/apache/ozone/pull/666#discussion_r391393245", "createdAt": "2020-03-12T04:16:41Z", "author": {"login": "swagle"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/recon/TestReconWithOzoneManagerHA.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.recon;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.OZONE_OM_DB_CHECKPOINT_HTTP_ENDPOINT;\n+\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.net.NetUtils;\n+import org.apache.hadoop.ozone.MiniOzoneCluster;\n+import org.apache.hadoop.ozone.MiniOzoneHAClusterImpl;\n+import org.apache.hadoop.ozone.client.ObjectStore;\n+import org.apache.hadoop.ozone.client.OzoneClientFactory;\n+import org.apache.hadoop.ozone.om.OMConfigKeys;\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.recon.spi.impl.OzoneManagerServiceProviderImpl;\n+import org.apache.hadoop.test.GenericTestUtils;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+\n+/**\n+ * This class sets up a MiniOzoneHACluster to test with Recon.\n+ */\n+public class TestReconWithOzoneManagerHA {\n+  @Rule\n+  public Timeout timeout = new Timeout(300_000);\n+\n+  private MiniOzoneHAClusterImpl cluster;\n+  private ObjectStore objectStore;\n+  private final String omServiceId = \"omService1\";\n+\n+  @Before\n+  public void setup() throws Exception {\n+    OzoneConfiguration conf = new OzoneConfiguration();\n+    conf.set(OMConfigKeys.OZONE_OM_RATIS_ENABLE_KEY, Boolean.TRUE.toString());\n+    cluster = (MiniOzoneHAClusterImpl) MiniOzoneCluster.newHABuilder(conf)\n+        .setClusterId(UUID.randomUUID().toString())\n+        .setScmId(UUID.randomUUID().toString())\n+        .setOMServiceId(omServiceId)\n+        .setNumDatanodes(1)\n+        .setNumOfOzoneManagers(3)\n+        .includeRecon(true)\n+        .setReconHttpPort(NetUtils.getFreeSocketPort())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM4ODQ3NQ=="}, "originalCommit": {"oid": "2368839aa86a5e49cec5e72e57be4159b6d913de"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTY0MDk4OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/recon/TestReconWithOzoneManagerHA.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNDowODowOVrOF1QpZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNDoxNzozMlrOF1Qwgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM5MTU5MA==", "bodyText": "Do we need to trigger an OM DB sync here and see if the sync is working?", "url": "https://github.com/apache/ozone/pull/666#discussion_r391391590", "createdAt": "2020-03-12T04:08:09Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/recon/TestReconWithOzoneManagerHA.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.recon;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.OZONE_OM_DB_CHECKPOINT_HTTP_ENDPOINT;\n+\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.net.NetUtils;\n+import org.apache.hadoop.ozone.MiniOzoneCluster;\n+import org.apache.hadoop.ozone.MiniOzoneHAClusterImpl;\n+import org.apache.hadoop.ozone.client.ObjectStore;\n+import org.apache.hadoop.ozone.client.OzoneClientFactory;\n+import org.apache.hadoop.ozone.om.OMConfigKeys;\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.recon.spi.impl.OzoneManagerServiceProviderImpl;\n+import org.apache.hadoop.test.GenericTestUtils;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+\n+/**\n+ * This class sets up a MiniOzoneHACluster to test with Recon.\n+ */\n+public class TestReconWithOzoneManagerHA {\n+  @Rule\n+  public Timeout timeout = new Timeout(300_000);\n+\n+  private MiniOzoneHAClusterImpl cluster;\n+  private ObjectStore objectStore;\n+  private final String omServiceId = \"omService1\";\n+\n+  @Before\n+  public void setup() throws Exception {\n+    OzoneConfiguration conf = new OzoneConfiguration();\n+    conf.set(OMConfigKeys.OZONE_OM_RATIS_ENABLE_KEY, Boolean.TRUE.toString());\n+    cluster = (MiniOzoneHAClusterImpl) MiniOzoneCluster.newHABuilder(conf)\n+        .setClusterId(UUID.randomUUID().toString())\n+        .setScmId(UUID.randomUUID().toString())\n+        .setOMServiceId(omServiceId)\n+        .setNumDatanodes(1)\n+        .setNumOfOzoneManagers(3)\n+        .includeRecon(true)\n+        .setReconHttpPort(NetUtils.getFreeSocketPort())\n+        .setReconDatanodePort(NetUtils.getFreeSocketPort())\n+        .build();\n+    cluster.waitForClusterToBeReady();\n+    objectStore = OzoneClientFactory.getRpcClient(omServiceId, conf)\n+        .getObjectStore();\n+  }\n+\n+  @After\n+  public void tearDown() throws Exception {\n+    if (cluster != null) {\n+      cluster.shutdown();\n+    }\n+  }\n+\n+  @Test\n+  public void testReconGetsSnapshotFromLeader() throws Exception {\n+    AtomicReference<OzoneManager> ozoneManager = new AtomicReference<>();\n+    // Wait for OM leader election to finish\n+    GenericTestUtils.waitFor(() -> {\n+      OzoneManager om = cluster.getOMLeader();\n+      ozoneManager.set(om);\n+      return om != null;\n+    }, 100, 120000);\n+    Assert.assertNotNull(\"Timed out waiting OM leader election to finish: \"\n+        + \"no leader or more than one leader.\", ozoneManager);\n+    Assert.assertTrue(\"Should have gotten the leader!\",\n+        ozoneManager.get().isLeader());\n+\n+    OzoneManagerServiceProviderImpl impl = (OzoneManagerServiceProviderImpl)\n+        cluster.getReconServer().getOzoneManagerServiceProvider();\n+\n+    String hostname =\n+        ozoneManager.get().getHttpServer().getHttpAddress().getHostName();\n+    String expectedUrl = \"http://\" +\n+        (hostname.equals(\"0.0.0.0\") ? \"localhost\" : hostname) + \":\" +\n+        ozoneManager.get().getHttpServer().getHttpAddress().getPort() +\n+        OZONE_OM_DB_CHECKPOINT_HTTP_ENDPOINT;\n+    String snapshotUrl = impl.getOzoneManagerSnapshotUrl();\n+    Assert.assertEquals(\"OM Snapshot should be requested from the leader.\",\n+        expectedUrl, snapshotUrl);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2368839aa86a5e49cec5e72e57be4159b6d913de"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM5MzQxMA==", "bodyText": "I intended to test only changes I made but this Test class I envision can easily extend to add more tests for HA but those can be separate Jiras, IMO.", "url": "https://github.com/apache/ozone/pull/666#discussion_r391393410", "createdAt": "2020-03-12T04:17:32Z", "author": {"login": "swagle"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/recon/TestReconWithOzoneManagerHA.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.recon;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.OZONE_OM_DB_CHECKPOINT_HTTP_ENDPOINT;\n+\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.net.NetUtils;\n+import org.apache.hadoop.ozone.MiniOzoneCluster;\n+import org.apache.hadoop.ozone.MiniOzoneHAClusterImpl;\n+import org.apache.hadoop.ozone.client.ObjectStore;\n+import org.apache.hadoop.ozone.client.OzoneClientFactory;\n+import org.apache.hadoop.ozone.om.OMConfigKeys;\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.recon.spi.impl.OzoneManagerServiceProviderImpl;\n+import org.apache.hadoop.test.GenericTestUtils;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+\n+/**\n+ * This class sets up a MiniOzoneHACluster to test with Recon.\n+ */\n+public class TestReconWithOzoneManagerHA {\n+  @Rule\n+  public Timeout timeout = new Timeout(300_000);\n+\n+  private MiniOzoneHAClusterImpl cluster;\n+  private ObjectStore objectStore;\n+  private final String omServiceId = \"omService1\";\n+\n+  @Before\n+  public void setup() throws Exception {\n+    OzoneConfiguration conf = new OzoneConfiguration();\n+    conf.set(OMConfigKeys.OZONE_OM_RATIS_ENABLE_KEY, Boolean.TRUE.toString());\n+    cluster = (MiniOzoneHAClusterImpl) MiniOzoneCluster.newHABuilder(conf)\n+        .setClusterId(UUID.randomUUID().toString())\n+        .setScmId(UUID.randomUUID().toString())\n+        .setOMServiceId(omServiceId)\n+        .setNumDatanodes(1)\n+        .setNumOfOzoneManagers(3)\n+        .includeRecon(true)\n+        .setReconHttpPort(NetUtils.getFreeSocketPort())\n+        .setReconDatanodePort(NetUtils.getFreeSocketPort())\n+        .build();\n+    cluster.waitForClusterToBeReady();\n+    objectStore = OzoneClientFactory.getRpcClient(omServiceId, conf)\n+        .getObjectStore();\n+  }\n+\n+  @After\n+  public void tearDown() throws Exception {\n+    if (cluster != null) {\n+      cluster.shutdown();\n+    }\n+  }\n+\n+  @Test\n+  public void testReconGetsSnapshotFromLeader() throws Exception {\n+    AtomicReference<OzoneManager> ozoneManager = new AtomicReference<>();\n+    // Wait for OM leader election to finish\n+    GenericTestUtils.waitFor(() -> {\n+      OzoneManager om = cluster.getOMLeader();\n+      ozoneManager.set(om);\n+      return om != null;\n+    }, 100, 120000);\n+    Assert.assertNotNull(\"Timed out waiting OM leader election to finish: \"\n+        + \"no leader or more than one leader.\", ozoneManager);\n+    Assert.assertTrue(\"Should have gotten the leader!\",\n+        ozoneManager.get().isLeader());\n+\n+    OzoneManagerServiceProviderImpl impl = (OzoneManagerServiceProviderImpl)\n+        cluster.getReconServer().getOzoneManagerServiceProvider();\n+\n+    String hostname =\n+        ozoneManager.get().getHttpServer().getHttpAddress().getHostName();\n+    String expectedUrl = \"http://\" +\n+        (hostname.equals(\"0.0.0.0\") ? \"localhost\" : hostname) + \":\" +\n+        ozoneManager.get().getHttpServer().getHttpAddress().getPort() +\n+        OZONE_OM_DB_CHECKPOINT_HTTP_ENDPOINT;\n+    String snapshotUrl = impl.getOzoneManagerSnapshotUrl();\n+    Assert.assertEquals(\"OM Snapshot should be requested from the leader.\",\n+        expectedUrl, snapshotUrl);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM5MTU5MA=="}, "originalCommit": {"oid": "2368839aa86a5e49cec5e72e57be4159b6d913de"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTY0MjcyOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/spi/impl/OzoneManagerServiceProviderImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNDowOTo0OFrOF1Qqig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNDoxODoyOVrOF1QxJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM5MTg4Mg==", "bodyText": "For single node RATIS, we can still use the regular URL.", "url": "https://github.com/apache/ozone/pull/666#discussion_r391391882", "createdAt": "2020-03-12T04:09:48Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/spi/impl/OzoneManagerServiceProviderImpl.java", "diffHunk": "@@ -237,19 +241,47 @@ public void stop() throws Exception {\n     scheduler.shutdownNow();\n   }\n \n+  /**\n+   * Find the OM leader's address to get the snapshot from.\n+   */\n+  @VisibleForTesting\n+  public String getOzoneManagerSnapshotUrl() throws IOException {\n+    if (!configuration.getBoolean(\n+        OMConfigKeys.OZONE_OM_RATIS_ENABLE_KEY, false)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2368839aa86a5e49cec5e72e57be4159b6d913de"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM5MzU3NQ==", "bodyText": "OM AFAIK is either 3 node RATIS or no HA based on this configuration, although not sure why we cannot check, the result should be the same.", "url": "https://github.com/apache/ozone/pull/666#discussion_r391393575", "createdAt": "2020-03-12T04:18:29Z", "author": {"login": "swagle"}, "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/spi/impl/OzoneManagerServiceProviderImpl.java", "diffHunk": "@@ -237,19 +241,47 @@ public void stop() throws Exception {\n     scheduler.shutdownNow();\n   }\n \n+  /**\n+   * Find the OM leader's address to get the snapshot from.\n+   */\n+  @VisibleForTesting\n+  public String getOzoneManagerSnapshotUrl() throws IOException {\n+    if (!configuration.getBoolean(\n+        OMConfigKeys.OZONE_OM_RATIS_ENABLE_KEY, false)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM5MTg4Mg=="}, "originalCommit": {"oid": "2368839aa86a5e49cec5e72e57be4159b6d913de"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4817, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}