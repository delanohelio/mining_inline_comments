{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2ODYzMTU4", "number": 1507, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTo0MzozOFrOEv2clg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOToxMzo0NlrOEyQAMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NjEwNTgyOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/TrashDeletingService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTo0MzozOFrOHlENMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTo0MzozOFrOHlENMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYyODI3NA==", "bodyText": "The indentation is at 4, it should be at 2.", "url": "https://github.com/apache/ozone/pull/1507#discussion_r508628274", "createdAt": "2020-10-20T15:43:38Z", "author": {"login": "mukul1987"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/TrashDeletingService.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.CommonConfigurationKeysPublic;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Trash;\n+import org.apache.hadoop.hdds.utils.BackgroundService;\n+import org.apache.hadoop.hdds.utils.BackgroundTask;\n+import org.apache.hadoop.hdds.utils.BackgroundTaskQueue;\n+import org.apache.hadoop.hdds.utils.BackgroundTaskResult;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+import org.apache.hadoop.security.SecurityUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.PrivilegedExceptionAction;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_ADDRESS_KEY;\n+\n+/**\n+ * Background Service to empty keys that are moved to Trash.\n+ */\n+public class TrashDeletingService extends BackgroundService {\n+\n+    private static final Logger LOG =\n+            LoggerFactory.getLogger(TrashDeletingService.class);\n+\n+    // Use single thread for  now\n+    private final static int KEY_DELETING_CORE_POOL_SIZE = 1;\n+\n+    private OzoneManager ozoneManager;\n+\n+    public void setFsConf(Configuration fsConf) {\n+        this.fsConf = fsConf;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9341b92ccb4e7416aa5881896035d8b2300cf939"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NjYzMTIzOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/TrashDeletingService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNzozMzozMlrOHlJZag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNzozMzozMlrOHlJZag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcxMzMyMg==", "bodyText": "This will start 1 thread for the entire filesystem for every run? why do we need this a background service ?", "url": "https://github.com/apache/ozone/pull/1507#discussion_r508713322", "createdAt": "2020-10-20T17:33:32Z", "author": {"login": "mukul1987"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/TrashDeletingService.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.CommonConfigurationKeysPublic;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Trash;\n+import org.apache.hadoop.hdds.utils.BackgroundService;\n+import org.apache.hadoop.hdds.utils.BackgroundTask;\n+import org.apache.hadoop.hdds.utils.BackgroundTaskQueue;\n+import org.apache.hadoop.hdds.utils.BackgroundTaskResult;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+import org.apache.hadoop.security.SecurityUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.PrivilegedExceptionAction;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_ADDRESS_KEY;\n+\n+/**\n+ * Background Service to empty keys that are moved to Trash.\n+ */\n+public class TrashDeletingService extends BackgroundService {\n+\n+    private static final Logger LOG =\n+            LoggerFactory.getLogger(TrashDeletingService.class);\n+\n+    // Use single thread for  now\n+    private final static int KEY_DELETING_CORE_POOL_SIZE = 1;\n+\n+    private OzoneManager ozoneManager;\n+\n+    public void setFsConf(Configuration fsConf) {\n+        this.fsConf = fsConf;\n+    }\n+\n+    private Configuration fsConf;\n+\n+    public TrashDeletingService(long interval, long serviceTimeout,OzoneManager ozoneManager) {\n+        super(\"TrashDeletingService\", interval, TimeUnit.MILLISECONDS, KEY_DELETING_CORE_POOL_SIZE, serviceTimeout);\n+        this.ozoneManager = ozoneManager;\n+        fsConf = new Configuration();\n+    }\n+\n+\n+    @Override\n+    public BackgroundTaskQueue getTasks() {\n+        BackgroundTaskQueue queue = new BackgroundTaskQueue();\n+        String rootPath = String.format(\"%s://%s/\",\n+                OzoneConsts.OZONE_OFS_URI_SCHEME, ozoneManager.getConfiguration().get(OZONE_OM_ADDRESS_KEY));\n+        // Configuration object where the rootpath is set to an OFS Uri.\n+        fsConf.set(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY, rootPath);\n+        FileSystem fs = null;\n+        try {\n+            fs = SecurityUtil.doAsLoginUser(\n+                    new PrivilegedExceptionAction<FileSystem>() {\n+                        @Override\n+                        public FileSystem run() throws IOException {\n+                            return FileSystem.get(fsConf);\n+                        }\n+                    });\n+        } catch (IOException e) {\n+            LOG.error(\"Cannot instantiate filesystem instance\");\n+        }\n+        queue.add(new TrashDeletingTask(fs,fsConf));\n+        return queue;\n+    }\n+\n+    /**\n+     * This task creates an emptier thread that deletes all keys obtained from the trashRoots (fs.getTrashRoots)\n+     */\n+    private class TrashDeletingTask implements BackgroundTask {\n+\n+        FileSystem fs;\n+        Configuration conf;\n+\n+        public TrashDeletingTask(FileSystem fs, Configuration conf) {\n+            this.fs = fs;\n+            this.conf = conf;\n+        }\n+\n+        @Override\n+        public BackgroundTaskResult call() throws Exception {\n+            Thread emptier = new Thread(new Trash(fs,conf).getEmptier(),\"Trash Emptier\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9341b92ccb4e7416aa5881896035d8b2300cf939"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODM1NTk4OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/OzoneConfigKeys.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNDoxNzoyNVrOHlZpfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNDoxNzoyNVrOHlZpfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk3OTU4MA==", "bodyText": "wouldnt 60s default be too frequent ?", "url": "https://github.com/apache/ozone/pull/1507#discussion_r508979580", "createdAt": "2020-10-21T04:17:25Z", "author": {"login": "prashantpogde"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/OzoneConfigKeys.java", "diffHunk": "@@ -197,6 +197,12 @@\n   public static final String OZONE_BLOCK_DELETING_SERVICE_INTERVAL_DEFAULT\n       = \"60s\";\n \n+  public static final String OZONE_TRASH_DELETING_SERVICE_INTERVAL =\n+          \"ozone.trash.deleting.service.interval\";\n+  public static final String OZONE_TRASH_DELETING_SERVICE_INTERVAL_DEFAULT\n+          = \"60s\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9341b92ccb4e7416aa5881896035d8b2300cf939"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MzgzMDI2OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/fs/ozone/TestRootedOzoneFileSystem.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNDowMzo0N1rOHmPz-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNDowMzo0N1rOHmPz-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg2NzAwMg==", "bodyText": "Please add failure message -> Assert.fail(\"Delete from Trash Failed\");", "url": "https://github.com/apache/ozone/pull/1507#discussion_r509867002", "createdAt": "2020-10-22T04:03:47Z", "author": {"login": "rakeshadr"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/fs/ozone/TestRootedOzoneFileSystem.java", "diffHunk": "@@ -1170,4 +1172,50 @@ public void testFileDelete() throws Exception {\n     Boolean falseResult = fs.delete(parent, true);\n     assertFalse(falseResult);\n   }\n+\n+  /**\n+   * @throws Exception\n+   * 1.Move a Key to Trash\n+   * 2.Start TrashDeletingService\n+   * 3.Verify that the TrashDeletingService purges the key after minimum set TrashInterval of 1 min.\n+   */\n+  @Test\n+  public void testTrashDeletingService() throws Exception {\n+    String testKeyName = \"keyToBeDeleted\";\n+    Path path = new Path(bucketPath, testKeyName);\n+    try (FSDataOutputStream stream = fs.create(path)) {\n+      stream.write(1);\n+    }\n+    // Call moveToTrash. We can't call protected fs.rename() directly\n+    trash.moveToTrash(path);\n+    TrashDeletingService trashDeletingService = new\n+            TrashDeletingService(60,300,cluster.getOzoneManager());\n+    conf.setLong(FS_TRASH_INTERVAL_KEY,1);\n+    trashDeletingService.setFsConf(conf);\n+    trashDeletingService.start();\n+\n+\n+    // Construct paths\n+    String username = UserGroupInformation.getCurrentUser().getShortUserName();\n+    Path trashRoot = new Path(bucketPath, TRASH_PREFIX);\n+    Path userTrash = new Path(trashRoot, username);\n+    Path userTrashCurrent = new Path(userTrash, \"Current\");\n+    String key = path.toString().substring(1);\n+    Path trashPath = new Path(userTrashCurrent, key);\n+\n+    // Wait until the TrashDeletingService purges the key\n+    GenericTestUtils.waitFor(()-> {\n+      try {\n+        return !ofs.exists(trashPath);\n+      } catch (IOException e) {\n+        LOG.error(\"Delete from Trash Failed\");\n+        Assert.fail();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9341b92ccb4e7416aa5881896035d8b2300cf939"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5Mzg1Mzg4OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNDoxODo1OFrOHmQA5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNDoxODo1OFrOHmQA5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg3MDMxMQ==", "bodyText": "Please shutdown the trashDeletingService during OM stop.", "url": "https://github.com/apache/ozone/pull/1507#discussion_r509870311", "createdAt": "2020-10-22T04:18:58Z", "author": {"login": "rakeshadr"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -1228,17 +1236,34 @@ public void restart() throws IOException {\n       // Allow OM to start as Http Server failure is not fatal.\n       LOG.error(\"OM HttpServer failed to start.\", ex);\n     }\n-\n     omRpcServer.start();\n+\n     isOmRpcServerRunning = true;\n \n+    startTrashDeletingService();\n+\n     registerMXBean();\n \n     startJVMPauseMonitor();\n     setStartTime();\n     omState = State.RUNNING;\n   }\n \n+  private void startTrashDeletingService() {\n+    if (trashDeletingService == null) {\n+      long serviceTimeout = configuration.getTimeDuration(\n+              OZONE_TRASH_DELETING_SERVICE_TIMEOUT,\n+              OZONE_TRASH_DELETING_SERVICE_TIMEOUT_DEFAULT,\n+              TimeUnit.MILLISECONDS);\n+      long trashDeletionInterval = configuration.getTimeDuration(\n+              OZONE_TRASH_DELETING_SERVICE_INTERVAL,\n+              OZONE_TRASH_DELETING_SERVICE_INTERVAL_DEFAULT,\n+              TimeUnit.MILLISECONDS);\n+      trashDeletingService = new TrashDeletingService(trashDeletionInterval, serviceTimeout, this);\n+      trashDeletingService.start();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9341b92ccb4e7416aa5881896035d8b2300cf939"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5Mzg1ODAyOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/TrashDeletingService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNDoyMToyM1rOHmQDMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNDoyMToyM1rOHmQDMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg3MDg5Nw==", "bodyText": "I saw you are setting fsConf.set(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY, rootPath); to get FS. Is that the reason for creating new Configuration() instead of using ozoneManager.getConfiguration() ?\nIf yes, can you please add comments mentioning the reason.", "url": "https://github.com/apache/ozone/pull/1507#discussion_r509870897", "createdAt": "2020-10-22T04:21:23Z", "author": {"login": "rakeshadr"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/TrashDeletingService.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.CommonConfigurationKeysPublic;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Trash;\n+import org.apache.hadoop.hdds.utils.BackgroundService;\n+import org.apache.hadoop.hdds.utils.BackgroundTask;\n+import org.apache.hadoop.hdds.utils.BackgroundTaskQueue;\n+import org.apache.hadoop.hdds.utils.BackgroundTaskResult;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+import org.apache.hadoop.security.SecurityUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.PrivilegedExceptionAction;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_ADDRESS_KEY;\n+\n+/**\n+ * Background Service to empty keys that are moved to Trash.\n+ */\n+public class TrashDeletingService extends BackgroundService {\n+\n+    private static final Logger LOG =\n+            LoggerFactory.getLogger(TrashDeletingService.class);\n+\n+    // Use single thread for  now\n+    private final static int KEY_DELETING_CORE_POOL_SIZE = 1;\n+\n+    private OzoneManager ozoneManager;\n+\n+    public void setFsConf(Configuration fsConf) {\n+        this.fsConf = fsConf;\n+    }\n+\n+    private Configuration fsConf;\n+\n+    public TrashDeletingService(long interval, long serviceTimeout,OzoneManager ozoneManager) {\n+        super(\"TrashDeletingService\", interval, TimeUnit.MILLISECONDS, KEY_DELETING_CORE_POOL_SIZE, serviceTimeout);\n+        this.ozoneManager = ozoneManager;\n+        fsConf = new Configuration();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9341b92ccb4e7416aa5881896035d8b2300cf939"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5Mzk5NTg3OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/OzoneConfigKeys.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNTozODo0MFrOHmRTVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNTozODo0MFrOHmRTVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg5MTQxNA==", "bodyText": "Please add the new configs to ozone-default.xml. Thats the reason for TestOzoneConfigurationFields unit test failure.", "url": "https://github.com/apache/ozone/pull/1507#discussion_r509891414", "createdAt": "2020-10-22T05:38:40Z", "author": {"login": "rakeshadr"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/OzoneConfigKeys.java", "diffHunk": "@@ -197,6 +197,12 @@\n   public static final String OZONE_BLOCK_DELETING_SERVICE_INTERVAL_DEFAULT\n       = \"60s\";\n \n+  public static final String OZONE_TRASH_DELETING_SERVICE_INTERVAL =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9341b92ccb4e7416aa5881896035d8b2300cf939"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDAzOTM4OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/TrashDeletingService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNTo1OTo1N1rOHmRs2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNTo1OTo1N1rOHmRs2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg5Nzk0Nw==", "bodyText": "Please add exception trace to log like,\nLOG.error(\"Cannot instantiate filesystem instance\", e);\n\n\nShould we proceed to add TrashDeletingTask to queue as fs instantiation has failed ?", "url": "https://github.com/apache/ozone/pull/1507#discussion_r509897947", "createdAt": "2020-10-22T05:59:57Z", "author": {"login": "rakeshadr"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/TrashDeletingService.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.CommonConfigurationKeysPublic;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Trash;\n+import org.apache.hadoop.hdds.utils.BackgroundService;\n+import org.apache.hadoop.hdds.utils.BackgroundTask;\n+import org.apache.hadoop.hdds.utils.BackgroundTaskQueue;\n+import org.apache.hadoop.hdds.utils.BackgroundTaskResult;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+import org.apache.hadoop.security.SecurityUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.PrivilegedExceptionAction;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_ADDRESS_KEY;\n+\n+/**\n+ * Background Service to empty keys that are moved to Trash.\n+ */\n+public class TrashDeletingService extends BackgroundService {\n+\n+    private static final Logger LOG =\n+            LoggerFactory.getLogger(TrashDeletingService.class);\n+\n+    // Use single thread for  now\n+    private final static int KEY_DELETING_CORE_POOL_SIZE = 1;\n+\n+    private OzoneManager ozoneManager;\n+\n+    public void setFsConf(Configuration fsConf) {\n+        this.fsConf = fsConf;\n+    }\n+\n+    private Configuration fsConf;\n+\n+    public TrashDeletingService(long interval, long serviceTimeout,OzoneManager ozoneManager) {\n+        super(\"TrashDeletingService\", interval, TimeUnit.MILLISECONDS, KEY_DELETING_CORE_POOL_SIZE, serviceTimeout);\n+        this.ozoneManager = ozoneManager;\n+        fsConf = new Configuration();\n+    }\n+\n+\n+    @Override\n+    public BackgroundTaskQueue getTasks() {\n+        BackgroundTaskQueue queue = new BackgroundTaskQueue();\n+        String rootPath = String.format(\"%s://%s/\",\n+                OzoneConsts.OZONE_OFS_URI_SCHEME, ozoneManager.getConfiguration().get(OZONE_OM_ADDRESS_KEY));\n+        // Configuration object where the rootpath is set to an OFS Uri.\n+        fsConf.set(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY, rootPath);\n+        FileSystem fs = null;\n+        try {\n+            fs = SecurityUtil.doAsLoginUser(\n+                    new PrivilegedExceptionAction<FileSystem>() {\n+                        @Override\n+                        public FileSystem run() throws IOException {\n+                            return FileSystem.get(fsConf);\n+                        }\n+                    });\n+        } catch (IOException e) {\n+            LOG.error(\"Cannot instantiate filesystem instance\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9341b92ccb4e7416aa5881896035d8b2300cf939"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDA2NTYwOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/TrashDeletingService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNjoxMDo1OVrOHmR8Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNjoxMDo1OVrOHmR8Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkwMTkyNw==", "bodyText": "would fs be created/instantiated for every iteration ? Can we resuse fs ?", "url": "https://github.com/apache/ozone/pull/1507#discussion_r509901927", "createdAt": "2020-10-22T06:10:59Z", "author": {"login": "rakeshadr"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/TrashDeletingService.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.CommonConfigurationKeysPublic;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Trash;\n+import org.apache.hadoop.hdds.utils.BackgroundService;\n+import org.apache.hadoop.hdds.utils.BackgroundTask;\n+import org.apache.hadoop.hdds.utils.BackgroundTaskQueue;\n+import org.apache.hadoop.hdds.utils.BackgroundTaskResult;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+import org.apache.hadoop.security.SecurityUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.PrivilegedExceptionAction;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_ADDRESS_KEY;\n+\n+/**\n+ * Background Service to empty keys that are moved to Trash.\n+ */\n+public class TrashDeletingService extends BackgroundService {\n+\n+    private static final Logger LOG =\n+            LoggerFactory.getLogger(TrashDeletingService.class);\n+\n+    // Use single thread for  now\n+    private final static int KEY_DELETING_CORE_POOL_SIZE = 1;\n+\n+    private OzoneManager ozoneManager;\n+\n+    public void setFsConf(Configuration fsConf) {\n+        this.fsConf = fsConf;\n+    }\n+\n+    private Configuration fsConf;\n+\n+    public TrashDeletingService(long interval, long serviceTimeout,OzoneManager ozoneManager) {\n+        super(\"TrashDeletingService\", interval, TimeUnit.MILLISECONDS, KEY_DELETING_CORE_POOL_SIZE, serviceTimeout);\n+        this.ozoneManager = ozoneManager;\n+        fsConf = new Configuration();\n+    }\n+\n+\n+    @Override\n+    public BackgroundTaskQueue getTasks() {\n+        BackgroundTaskQueue queue = new BackgroundTaskQueue();\n+        String rootPath = String.format(\"%s://%s/\",\n+                OzoneConsts.OZONE_OFS_URI_SCHEME, ozoneManager.getConfiguration().get(OZONE_OM_ADDRESS_KEY));\n+        // Configuration object where the rootpath is set to an OFS Uri.\n+        fsConf.set(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY, rootPath);\n+        FileSystem fs = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9341b92ccb4e7416aa5881896035d8b2300cf939"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDA3MjAwOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/TrashDeletingService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNjoxMzoxNlrOHmR__A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNjoxMzoxNlrOHmR__A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkwMjg0NA==", "bodyText": "I saw setFsConf used only in test. Please add @VisibleForTesting.", "url": "https://github.com/apache/ozone/pull/1507#discussion_r509902844", "createdAt": "2020-10-22T06:13:16Z", "author": {"login": "rakeshadr"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/TrashDeletingService.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.CommonConfigurationKeysPublic;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Trash;\n+import org.apache.hadoop.hdds.utils.BackgroundService;\n+import org.apache.hadoop.hdds.utils.BackgroundTask;\n+import org.apache.hadoop.hdds.utils.BackgroundTaskQueue;\n+import org.apache.hadoop.hdds.utils.BackgroundTaskResult;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+import org.apache.hadoop.security.SecurityUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.PrivilegedExceptionAction;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_ADDRESS_KEY;\n+\n+/**\n+ * Background Service to empty keys that are moved to Trash.\n+ */\n+public class TrashDeletingService extends BackgroundService {\n+\n+    private static final Logger LOG =\n+            LoggerFactory.getLogger(TrashDeletingService.class);\n+\n+    // Use single thread for  now\n+    private final static int KEY_DELETING_CORE_POOL_SIZE = 1;\n+\n+    private OzoneManager ozoneManager;\n+\n+    public void setFsConf(Configuration fsConf) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9341b92ccb4e7416aa5881896035d8b2300cf939"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDY2MjE5OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNTo1NDo0MlrOHosZfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMDoxODoyOFrOHo0o5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQzMjUxMQ==", "bodyText": "Please add a warn or even  a lighter info log message to make the behavior loud to the users as this will disable trash emptier.", "url": "https://github.com/apache/ozone/pull/1507#discussion_r512432511", "createdAt": "2020-10-27T05:54:42Z", "author": {"login": "rakeshadr"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -1228,17 +1238,57 @@ public void restart() throws IOException {\n       // Allow OM to start as Http Server failure is not fatal.\n       LOG.error(\"OM HttpServer failed to start.\", ex);\n     }\n-\n     omRpcServer.start();\n+\n     isOmRpcServerRunning = true;\n \n+    startTrashEmptier(configuration);\n+\n     registerMXBean();\n \n     startJVMPauseMonitor();\n     setStartTime();\n     omState = State.RUNNING;\n   }\n \n+\n+  /**\n+   * @param conf\n+   * @throws IOException\n+   * Starts a Trash Emptier thread that does an fs.trashRoots and performs\n+   * checkpointing & deletion\n+   */\n+  private void startTrashEmptier(Configuration conf) throws IOException {\n+    long trashInterval =\n+            conf.getLong(FS_TRASH_INTERVAL_KEY, FS_TRASH_INTERVAL_DEFAULT);\n+    if (trashInterval == 0) {\n+      return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51ef97259e5f47993ace8f3854121406e31e8ddb"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU2NzUyNQ==", "bodyText": "Done.", "url": "https://github.com/apache/ozone/pull/1507#discussion_r512567525", "createdAt": "2020-10-27T10:18:28Z", "author": {"login": "sadanand48"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -1228,17 +1238,57 @@ public void restart() throws IOException {\n       // Allow OM to start as Http Server failure is not fatal.\n       LOG.error(\"OM HttpServer failed to start.\", ex);\n     }\n-\n     omRpcServer.start();\n+\n     isOmRpcServerRunning = true;\n \n+    startTrashEmptier(configuration);\n+\n     registerMXBean();\n \n     startJVMPauseMonitor();\n     setStartTime();\n     omState = State.RUNNING;\n   }\n \n+\n+  /**\n+   * @param conf\n+   * @throws IOException\n+   * Starts a Trash Emptier thread that does an fs.trashRoots and performs\n+   * checkpointing & deletion\n+   */\n+  private void startTrashEmptier(Configuration conf) throws IOException {\n+    long trashInterval =\n+            conf.getLong(FS_TRASH_INTERVAL_KEY, FS_TRASH_INTERVAL_DEFAULT);\n+    if (trashInterval == 0) {\n+      return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQzMjUxMQ=="}, "originalCommit": {"oid": "51ef97259e5f47993ace8f3854121406e31e8ddb"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMTI2NDUxOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOToxMzo0NlrOHoyC-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMDoxODozNlrOHo0pQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUyNTA0OA==", "bodyText": "Please follow general guidelines for the javadoc.\n\nBegins with function details.\nProvide @param details.\nThen @return info.\nEnding with @throws exception cases.", "url": "https://github.com/apache/ozone/pull/1507#discussion_r512525048", "createdAt": "2020-10-27T09:13:46Z", "author": {"login": "rakeshadr"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -1228,17 +1238,57 @@ public void restart() throws IOException {\n       // Allow OM to start as Http Server failure is not fatal.\n       LOG.error(\"OM HttpServer failed to start.\", ex);\n     }\n-\n     omRpcServer.start();\n+\n     isOmRpcServerRunning = true;\n \n+    startTrashEmptier(configuration);\n+\n     registerMXBean();\n \n     startJVMPauseMonitor();\n     setStartTime();\n     omState = State.RUNNING;\n   }\n \n+\n+  /**\n+   * @param conf\n+   * @throws IOException\n+   * Starts a Trash Emptier thread that does an fs.trashRoots and performs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51ef97259e5f47993ace8f3854121406e31e8ddb"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU2NzYxNg==", "bodyText": "Done", "url": "https://github.com/apache/ozone/pull/1507#discussion_r512567616", "createdAt": "2020-10-27T10:18:36Z", "author": {"login": "sadanand48"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -1228,17 +1238,57 @@ public void restart() throws IOException {\n       // Allow OM to start as Http Server failure is not fatal.\n       LOG.error(\"OM HttpServer failed to start.\", ex);\n     }\n-\n     omRpcServer.start();\n+\n     isOmRpcServerRunning = true;\n \n+    startTrashEmptier(configuration);\n+\n     registerMXBean();\n \n     startJVMPauseMonitor();\n     setStartTime();\n     omState = State.RUNNING;\n   }\n \n+\n+  /**\n+   * @param conf\n+   * @throws IOException\n+   * Starts a Trash Emptier thread that does an fs.trashRoots and performs", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUyNTA0OA=="}, "originalCommit": {"oid": "51ef97259e5f47993ace8f3854121406e31e8ddb"}, "originalPosition": 81}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4642, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}