{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3NjMyMDIx", "number": 859, "title": "HDDS-3465. OM Failover retry happens too quickly when new leader suggested and retrying on same OM.", "bodyText": "What changes were proposed in this pull request?\nWhen leader was suggested, we are updating lastAttemptedOMid correctly, so that waitTime can be calculated by incrementing if failover to same OM.\nWhat is the link to the Apache JIRA\nhttps://issues.apache.org/jira/browse/HDDS-3465\nHow was this patch tested?\nAdded 2 tests which reproduce the case and after fix, they both passed.", "createdAt": "2020-04-23T01:42:01Z", "url": "https://github.com/apache/ozone/pull/859", "merged": true, "mergeCommit": {"oid": "4b1fa1099b3996525c86bdf1ba14d9a926667166"}, "closed": true, "closedAt": "2020-04-25T00:19:42Z", "author": {"login": "umamaheswararao"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcaSsTsAH2gAyNDA3NjMyMDIxOjJlOGFlZmVlYTU5MTdkZDllNjA4NDRjMjM5YjhmNjMwOTQ3MTAzYzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABca4e_lgH2gAyNDA3NjMyMDIxOjM1NjcwNDQ2NTg1OGI3MTg0YmZhZDI0ZjYyYjQzNzc5MzcyODc0YTE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2e8aefeea5917dd9e60844c239b8f630947103c0", "author": {"user": {"login": "umamaheswararao", "name": "Uma Maheswara Rao G"}}, "url": "https://github.com/apache/ozone/commit/2e8aefeea5917dd9e60844c239b8f630947103c0", "committedDate": "2020-04-23T01:34:48Z", "message": "HDDS-3465. OM Failover retry happens too quickly when new leader suggested and retrying on same OM"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f37a8c73fe26e5fff7978e79968fbcc17be0152", "author": {"user": {"login": "umamaheswararao", "name": "Uma Maheswara Rao G"}}, "url": "https://github.com/apache/ozone/commit/0f37a8c73fe26e5fff7978e79968fbcc17be0152", "committedDate": "2020-04-23T05:14:35Z", "message": "HDDS-3465. OM Failover retry happens too quickly when new leader suggested and retrying on same OM"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4ODA3OTYz", "url": "https://github.com/apache/ozone/pull/859#pullrequestreview-398807963", "createdAt": "2020-04-23T06:55:15Z", "commit": {"oid": "0f37a8c73fe26e5fff7978e79968fbcc17be0152"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNjo1NToxNVrOGKZlxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNjo1Njo1MFrOGKZpDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU1ODIxMw==", "bodyText": "This method tests wait time with both same node and other node failover.  I think these should be separate test cases, both for independence and to match test method name.", "url": "https://github.com/apache/ozone/pull/859#discussion_r413558213", "createdAt": "2020-04-23T06:55:15Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/ha/TestOMFailoverProxyProvider.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.om.ha;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+\n+import org.apache.hadoop.security.UserGroupInformation;\n+import org.apache.hadoop.ozone.OmUtils;\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_ADDRESS_KEY;\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_NODES_KEY;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.\n+    OZONE_CLIENT_WAIT_BETWEEN_RETRIES_MILLIS_KEY;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.\n+    OZONE_CLIENT_WAIT_BETWEEN_RETRIES_MILLIS_DEFAULT;\n+\n+/**\n+ * Test OMFailoverProxyProvider failover behaviour.\n+ */\n+public class TestOMFailoverProxyProvider {\n+  private final static String OM_SERVICE_ID = \"om-service-test1\";\n+  private final static String NODE_ID_BASE_STR = \"omNode-\";\n+  private final static String DUMMY_NODE_ADDR = \"0.0.0.0:8080\";\n+\n+  /**\n+   * 1. Create FailoverProvider with 3 OMs.\n+   * 2. Try failover to different node: WaitTime should be 0.\n+   * 3. Try failover to same node: wiatTime should increment\n+   * attempts*waitBetweenRetries\n+   */\n+  @Test\n+  public void testWaitTimeWithSameNodeFailover() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f37a8c73fe26e5fff7978e79968fbcc17be0152"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU1OTA1Mw==", "bodyText": "Would be nice to avoid duplication by setting up nodes in a loop (and preferably in a helper method).", "url": "https://github.com/apache/ozone/pull/859#discussion_r413559053", "createdAt": "2020-04-23T06:56:50Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/ha/TestOMFailoverProxyProvider.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.om.ha;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+\n+import org.apache.hadoop.security.UserGroupInformation;\n+import org.apache.hadoop.ozone.OmUtils;\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_ADDRESS_KEY;\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_NODES_KEY;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.\n+    OZONE_CLIENT_WAIT_BETWEEN_RETRIES_MILLIS_KEY;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.\n+    OZONE_CLIENT_WAIT_BETWEEN_RETRIES_MILLIS_DEFAULT;\n+\n+/**\n+ * Test OMFailoverProxyProvider failover behaviour.\n+ */\n+public class TestOMFailoverProxyProvider {\n+  private final static String OM_SERVICE_ID = \"om-service-test1\";\n+  private final static String NODE_ID_BASE_STR = \"omNode-\";\n+  private final static String DUMMY_NODE_ADDR = \"0.0.0.0:8080\";\n+\n+  /**\n+   * 1. Create FailoverProvider with 3 OMs.\n+   * 2. Try failover to different node: WaitTime should be 0.\n+   * 3. Try failover to same node: wiatTime should increment\n+   * attempts*waitBetweenRetries\n+   */\n+  @Test\n+  public void testWaitTimeWithSameNodeFailover() throws IOException {\n+    String nodeId1 = NODE_ID_BASE_STR + 1;\n+    String nodeId2 = NODE_ID_BASE_STR + 2;\n+    String nodeId3 = NODE_ID_BASE_STR + 3;\n+    OzoneConfiguration config = new OzoneConfiguration();\n+    config.set(OmUtils.addKeySuffixes(OZONE_OM_NODES_KEY, OM_SERVICE_ID),\n+        String.join(\",\", nodeId1, nodeId2, nodeId3));\n+    config.set(OmUtils.addKeySuffixes(OZONE_OM_ADDRESS_KEY, OM_SERVICE_ID,\n+        nodeId1), DUMMY_NODE_ADDR);\n+    config.set(OmUtils.addKeySuffixes(OZONE_OM_ADDRESS_KEY, OM_SERVICE_ID,\n+        nodeId2), DUMMY_NODE_ADDR);\n+    config.set(OmUtils.addKeySuffixes(OZONE_OM_ADDRESS_KEY, OM_SERVICE_ID,\n+        nodeId3), DUMMY_NODE_ADDR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f37a8c73fe26e5fff7978e79968fbcc17be0152"}, "originalPosition": 63}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "510f511b12473edf493ac7ff3e5664b53c2c9c2c", "author": {"user": {"login": "umamaheswararao", "name": "Uma Maheswara Rao G"}}, "url": "https://github.com/apache/ozone/commit/510f511b12473edf493ac7ff3e5664b53c2c9c2c", "committedDate": "2020-04-23T22:18:01Z", "message": "HDDS-3465. OM Failover retry happens too quickly when new leader suggested and retrying on same OM.: Added few more tests and fixed comments."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NjcxNzQy", "url": "https://github.com/apache/ozone/pull/859#pullrequestreview-399671742", "createdAt": "2020-04-24T06:28:50Z", "commit": {"oid": "510f511b12473edf493ac7ff3e5664b53c2c9c2c"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNjoyODo1MFrOGLIhZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNjozNDo0M1rOGLIrRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMyNzE0MQ==", "bodyText": "It seems this is basically the same test case as testWaitTimeResetWhenNextNodeFailoverAfterSameNode.  If you agree, I think we can drop this one.", "url": "https://github.com/apache/ozone/pull/859#discussion_r414327141", "createdAt": "2020-04-24T06:28:50Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/ha/TestOMFailoverProxyProvider.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.om.ha;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.Before;\n+\n+import java.util.StringJoiner;\n+\n+import org.apache.hadoop.security.UserGroupInformation;\n+import org.apache.hadoop.ozone.OmUtils;\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_ADDRESS_KEY;\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_NODES_KEY;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.\n+    OZONE_CLIENT_WAIT_BETWEEN_RETRIES_MILLIS_KEY;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.\n+    OZONE_CLIENT_WAIT_BETWEEN_RETRIES_MILLIS_DEFAULT;\n+\n+/**\n+ * Tests OMFailoverProxyProvider failover behaviour.\n+ */\n+public class TestOMFailoverProxyProvider {\n+  private final static String OM_SERVICE_ID = \"om-service-test1\";\n+  private final static String NODE_ID_BASE_STR = \"omNode-\";\n+  private final static String DUMMY_NODE_ADDR = \"0.0.0.0:8080\";\n+  private OMFailoverProxyProvider provider;\n+  private long waitBetweenRetries;\n+\n+  @Before\n+  public void init() throws Exception {\n+    OzoneConfiguration config = new OzoneConfiguration();\n+    long numNodes = 3;\n+    waitBetweenRetries = config.getLong(\n+        OZONE_CLIENT_WAIT_BETWEEN_RETRIES_MILLIS_KEY,\n+        OZONE_CLIENT_WAIT_BETWEEN_RETRIES_MILLIS_DEFAULT);\n+    StringJoiner allNodeIds = new StringJoiner(\",\");\n+    for (int i = 1; i <= numNodes; i++) {\n+      String nodeId = NODE_ID_BASE_STR + i;\n+      config.set(OmUtils.addKeySuffixes(OZONE_OM_ADDRESS_KEY, OM_SERVICE_ID,\n+          nodeId), DUMMY_NODE_ADDR);\n+      allNodeIds.add(nodeId);\n+    }\n+    config.set(OmUtils.addKeySuffixes(OZONE_OM_NODES_KEY, OM_SERVICE_ID),\n+        allNodeIds.toString());\n+    provider = new OMFailoverProxyProvider(config,\n+        UserGroupInformation.getCurrentUser(), OM_SERVICE_ID);\n+  }\n+\n+  /**\n+   * Tests waitTime when fail over to next node.\n+   */\n+  @Test\n+  public void testWaitTimeWithNextNode() {\n+    failoverToNextNode(2, 0);\n+    // After 3 attempts done, wait time should be waitBetweenRetries.\n+    failoverToNextNode(1, waitBetweenRetries);\n+    // From 4th Attempt waitTime should reset to 0.\n+    failoverToNextNode(2, 0);\n+    // After 2nd round of 3attempts done, wait time should be\n+    // waitBetweenRetries.\n+    failoverToNextNode(1, waitBetweenRetries);\n+  }\n+\n+  /**\n+   * 1. Try failover to same node: wiatTime should increment\n+   * attempts*waitBetweenRetries.\n+   * 2. Try failover to next node: waitTime should be 0.\n+   */\n+  @Test\n+  public void testWaitTimeWithSameNodeFailover() {\n+    // Failover attempt 1 to same OM, waitTime should increase.\n+    failoverToSameNode(4);\n+    // 2 same node failovers, waitTime should be 0.\n+    failoverToNextNode(2, 0);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "510f511b12473edf493ac7ff3e5664b53c2c9c2c"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMyOTY3MA==", "bodyText": "A couple of test cases depend on this value by attempting 2 failovers to next node.  I think it should be a member variable and tests should use failoverToNextNode(numNodes - 1, 0) instead of failoverToNextNode(2, 0).\nNote that failoverToSameNode(2) should be kept as is, since in that case the failover number is arbitrary.", "url": "https://github.com/apache/ozone/pull/859#discussion_r414329670", "createdAt": "2020-04-24T06:34:43Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/ha/TestOMFailoverProxyProvider.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.om.ha;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.Before;\n+\n+import java.util.StringJoiner;\n+\n+import org.apache.hadoop.security.UserGroupInformation;\n+import org.apache.hadoop.ozone.OmUtils;\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_ADDRESS_KEY;\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_NODES_KEY;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.\n+    OZONE_CLIENT_WAIT_BETWEEN_RETRIES_MILLIS_KEY;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.\n+    OZONE_CLIENT_WAIT_BETWEEN_RETRIES_MILLIS_DEFAULT;\n+\n+/**\n+ * Tests OMFailoverProxyProvider failover behaviour.\n+ */\n+public class TestOMFailoverProxyProvider {\n+  private final static String OM_SERVICE_ID = \"om-service-test1\";\n+  private final static String NODE_ID_BASE_STR = \"omNode-\";\n+  private final static String DUMMY_NODE_ADDR = \"0.0.0.0:8080\";\n+  private OMFailoverProxyProvider provider;\n+  private long waitBetweenRetries;\n+\n+  @Before\n+  public void init() throws Exception {\n+    OzoneConfiguration config = new OzoneConfiguration();\n+    long numNodes = 3;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "510f511b12473edf493ac7ff3e5664b53c2c9c2c"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb61f5501508fd0a593d58e3da08eef70ddd5539", "author": {"user": {"login": "umamaheswararao", "name": "Uma Maheswara Rao G"}}, "url": "https://github.com/apache/ozone/commit/cb61f5501508fd0a593d58e3da08eef70ddd5539", "committedDate": "2020-04-24T08:21:14Z", "message": "Few test nits"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "098094e02aebb7d128c2935c7e70b5a99460b506", "author": {"user": {"login": "adoroszlai", "name": "Doroszlai, Attila"}}, "url": "https://github.com/apache/ozone/commit/098094e02aebb7d128c2935c7e70b5a99460b506", "committedDate": "2020-04-24T09:37:12Z", "message": "trigger new CI check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49c370a2f4d09358011dc8af51327de2ac921830", "author": {"user": {"login": "adoroszlai", "name": "Doroszlai, Attila"}}, "url": "https://github.com/apache/ozone/commit/49c370a2f4d09358011dc8af51327de2ac921830", "committedDate": "2020-04-24T11:32:59Z", "message": "trigger new CI check"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMjM2NzI2", "url": "https://github.com/apache/ozone/pull/859#pullrequestreview-400236726", "createdAt": "2020-04-24T20:05:21Z", "commit": {"oid": "49c370a2f4d09358011dc8af51327de2ac921830"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMDowNToyMVrOGLnUjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMDowNToyMVrOGLnUjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzMTc1OA==", "bodyText": "We are updating lastAttemptedOM to the new OM which will be tried after failover. The assignment should happen before the currentProxyOMNodeId is updated with newLeaderOMNodeId.", "url": "https://github.com/apache/ozone/pull/859#discussion_r414831758", "createdAt": "2020-04-24T20:05:21Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/ha/OMFailoverProxyProvider.java", "diffHunk": "@@ -318,9 +318,12 @@ synchronized boolean updateLeaderOMNodeId(String newLeaderOMNodeId) {\n     if (!currentProxyOMNodeId.equals(newLeaderOMNodeId)) {\n       if (omProxies.containsKey(newLeaderOMNodeId)) {\n         currentProxyOMNodeId = newLeaderOMNodeId;\n+        lastAttemptedOM = currentProxyOMNodeId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49c370a2f4d09358011dc8af51327de2ac921830"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6155028e2ff281809ee5e3f1adadb12e2eac62f", "author": {"user": {"login": "umamaheswararao", "name": "Uma Maheswara Rao G"}}, "url": "https://github.com/apache/ozone/commit/e6155028e2ff281809ee5e3f1adadb12e2eac62f", "committedDate": "2020-04-24T21:34:04Z", "message": "Fixed a comment and added a test case to capture the case."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "356704465858b7184bfad24f62b43779372874a1", "author": {"user": {"login": "umamaheswararao", "name": "Uma Maheswara Rao G"}}, "url": "https://github.com/apache/ozone/commit/356704465858b7184bfad24f62b43779372874a1", "committedDate": "2020-04-24T21:36:39Z", "message": "Merge branch 'HDDS-3465' of https://github.com/umamaheswararao/hadoop-ozone into HDDS-3465"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3414, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}