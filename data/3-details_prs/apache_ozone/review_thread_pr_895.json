{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzMDM0Nzgw", "number": 895, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoxNjo0MFrOD5hd-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoyMzoxMVrOD5hnXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjQzNzY4OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/freon/TestHadoopDirTreeGenerator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoxNjo0MFrOGQ10Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMjoxNjo0NlrOGRr-Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxMjEyMw==", "bodyText": "Can we wrap this with try {} finally {shutdown (cluster)} so that the cluster is ensured to shutdown if any verification failed?", "url": "https://github.com/apache/ozone/pull/895#discussion_r420312123", "createdAt": "2020-05-05T18:16:40Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/freon/TestHadoopDirTreeGenerator.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.ozone.freon;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.ozone.MiniOzoneCluster;\n+import org.apache.hadoop.ozone.client.ObjectStore;\n+import org.apache.hadoop.ozone.client.OzoneClientFactory;\n+import org.apache.hadoop.ozone.client.OzoneVolume;\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.test.GenericTestUtils;\n+import org.apache.ratis.server.impl.RaftServerImpl;\n+import org.apache.ratis.server.raftlog.RaftLog;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.slf4j.event.Level;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URI;\n+\n+/**\n+ * Test for HadoopNestedDirTreeGenerator.\n+ */\n+public class TestHadoopDirTreeGenerator {\n+\n+  private String path;\n+\n+  /**\n+   * Create a MiniDFSCluster for testing.\n+   *\n+   * @throws IOException\n+   */\n+  @Before\n+  public void setup() {\n+    path = GenericTestUtils\n+            .getTempPath(TestOzoneClientKeyGenerator.class.getSimpleName());\n+    GenericTestUtils.setLogLevel(RaftLog.LOG, Level.DEBUG);\n+    GenericTestUtils.setLogLevel(RaftServerImpl.LOG, Level.DEBUG);\n+    File baseDir = new File(path);\n+    baseDir.mkdirs();\n+  }\n+\n+  /**\n+   * Shutdown MiniDFSCluster.\n+   */\n+  private void shutdown(MiniOzoneCluster cluster) throws IOException {\n+    if (cluster != null) {\n+      cluster.shutdown();\n+      FileUtils.deleteDirectory(new File(path));\n+    }\n+  }\n+\n+  private MiniOzoneCluster startCluster(OzoneConfiguration conf)\n+          throws Exception {\n+    if (conf == null) {\n+      conf = new OzoneConfiguration();\n+    }\n+    MiniOzoneCluster cluster = MiniOzoneCluster.newBuilder(conf)\n+            .setNumDatanodes(5)\n+            .build();\n+\n+    cluster.waitForClusterToBeReady();\n+    cluster.waitTobeOutOfSafeMode();\n+    return cluster;\n+  }\n+\n+  @Test\n+  public void testNestedDirTreeGeneration() throws Exception {\n+    OzoneConfiguration conf = new OzoneConfiguration();\n+    MiniOzoneCluster cluster = startCluster(conf);\n+    ObjectStore store =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed4308008971edeef256152c43914dd538c7ace8"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUyMjE0OA==", "bodyText": "Sure, I will update this in next PR commit.", "url": "https://github.com/apache/ozone/pull/895#discussion_r420522148", "createdAt": "2020-05-06T03:08:33Z", "author": {"login": "rakeshadr"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/freon/TestHadoopDirTreeGenerator.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.ozone.freon;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.ozone.MiniOzoneCluster;\n+import org.apache.hadoop.ozone.client.ObjectStore;\n+import org.apache.hadoop.ozone.client.OzoneClientFactory;\n+import org.apache.hadoop.ozone.client.OzoneVolume;\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.test.GenericTestUtils;\n+import org.apache.ratis.server.impl.RaftServerImpl;\n+import org.apache.ratis.server.raftlog.RaftLog;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.slf4j.event.Level;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URI;\n+\n+/**\n+ * Test for HadoopNestedDirTreeGenerator.\n+ */\n+public class TestHadoopDirTreeGenerator {\n+\n+  private String path;\n+\n+  /**\n+   * Create a MiniDFSCluster for testing.\n+   *\n+   * @throws IOException\n+   */\n+  @Before\n+  public void setup() {\n+    path = GenericTestUtils\n+            .getTempPath(TestOzoneClientKeyGenerator.class.getSimpleName());\n+    GenericTestUtils.setLogLevel(RaftLog.LOG, Level.DEBUG);\n+    GenericTestUtils.setLogLevel(RaftServerImpl.LOG, Level.DEBUG);\n+    File baseDir = new File(path);\n+    baseDir.mkdirs();\n+  }\n+\n+  /**\n+   * Shutdown MiniDFSCluster.\n+   */\n+  private void shutdown(MiniOzoneCluster cluster) throws IOException {\n+    if (cluster != null) {\n+      cluster.shutdown();\n+      FileUtils.deleteDirectory(new File(path));\n+    }\n+  }\n+\n+  private MiniOzoneCluster startCluster(OzoneConfiguration conf)\n+          throws Exception {\n+    if (conf == null) {\n+      conf = new OzoneConfiguration();\n+    }\n+    MiniOzoneCluster cluster = MiniOzoneCluster.newBuilder(conf)\n+            .setNumDatanodes(5)\n+            .build();\n+\n+    cluster.waitForClusterToBeReady();\n+    cluster.waitTobeOutOfSafeMode();\n+    return cluster;\n+  }\n+\n+  @Test\n+  public void testNestedDirTreeGeneration() throws Exception {\n+    OzoneConfiguration conf = new OzoneConfiguration();\n+    MiniOzoneCluster cluster = startCluster(conf);\n+    ObjectStore store =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxMjEyMw=="}, "originalCommit": {"oid": "ed4308008971edeef256152c43914dd538c7ace8"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE5OTM5NA==", "bodyText": "Done!", "url": "https://github.com/apache/ozone/pull/895#discussion_r421199394", "createdAt": "2020-05-07T02:16:46Z", "author": {"login": "rakeshadr"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/freon/TestHadoopDirTreeGenerator.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.ozone.freon;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.ozone.MiniOzoneCluster;\n+import org.apache.hadoop.ozone.client.ObjectStore;\n+import org.apache.hadoop.ozone.client.OzoneClientFactory;\n+import org.apache.hadoop.ozone.client.OzoneVolume;\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.test.GenericTestUtils;\n+import org.apache.ratis.server.impl.RaftServerImpl;\n+import org.apache.ratis.server.raftlog.RaftLog;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.slf4j.event.Level;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URI;\n+\n+/**\n+ * Test for HadoopNestedDirTreeGenerator.\n+ */\n+public class TestHadoopDirTreeGenerator {\n+\n+  private String path;\n+\n+  /**\n+   * Create a MiniDFSCluster for testing.\n+   *\n+   * @throws IOException\n+   */\n+  @Before\n+  public void setup() {\n+    path = GenericTestUtils\n+            .getTempPath(TestOzoneClientKeyGenerator.class.getSimpleName());\n+    GenericTestUtils.setLogLevel(RaftLog.LOG, Level.DEBUG);\n+    GenericTestUtils.setLogLevel(RaftServerImpl.LOG, Level.DEBUG);\n+    File baseDir = new File(path);\n+    baseDir.mkdirs();\n+  }\n+\n+  /**\n+   * Shutdown MiniDFSCluster.\n+   */\n+  private void shutdown(MiniOzoneCluster cluster) throws IOException {\n+    if (cluster != null) {\n+      cluster.shutdown();\n+      FileUtils.deleteDirectory(new File(path));\n+    }\n+  }\n+\n+  private MiniOzoneCluster startCluster(OzoneConfiguration conf)\n+          throws Exception {\n+    if (conf == null) {\n+      conf = new OzoneConfiguration();\n+    }\n+    MiniOzoneCluster cluster = MiniOzoneCluster.newBuilder(conf)\n+            .setNumDatanodes(5)\n+            .build();\n+\n+    cluster.waitForClusterToBeReady();\n+    cluster.waitTobeOutOfSafeMode();\n+    return cluster;\n+  }\n+\n+  @Test\n+  public void testNestedDirTreeGeneration() throws Exception {\n+    OzoneConfiguration conf = new OzoneConfiguration();\n+    MiniOzoneCluster cluster = startCluster(conf);\n+    ObjectStore store =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxMjEyMw=="}, "originalCommit": {"oid": "ed4308008971edeef256152c43914dd538c7ace8"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjQ2MTc0OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/freon/HadoopDirTreeGenerator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoyMzoxMVrOGQ2Deg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMjoxNjo1MVrOGRr-Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxNjAyNg==", "bodyText": "\"Hadoop FS directory system path\" is a bit confusing, do you mean \"Hadoop FS root path\"?", "url": "https://github.com/apache/ozone/pull/895#discussion_r420316026", "createdAt": "2020-05-05T18:23:11Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/freon/HadoopDirTreeGenerator.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.ozone.freon;\n+\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.hadoop.fs.FSDataOutputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hdds.cli.HddsVersionProvider;\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Option;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Random;\n+import java.util.concurrent.Callable;\n+\n+/**\n+ * Directory & File Generator tool to test OM performance.\n+ */\n+@Command(name = \"dtsg\",\n+    aliases = \"dfs-tree-generator\",\n+    description =\n+        \"Create nested directories and create given number of files in each \" +\n+                \"dir in any dfs compatible file system.\",\n+    versionProvider = HddsVersionProvider.class,\n+    mixinStandardHelpOptions = true,\n+    showDefaultValues = true)\n+public class HadoopDirTreeGenerator extends BaseFreonGenerator\n+    implements Callable<Void> {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(HadoopDirTreeGenerator.class);\n+\n+  @Option(names = {\"-r\", \"--rpath\"},\n+      description = \"Hadoop FS directory system path\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed4308008971edeef256152c43914dd538c7ace8"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUyMTk1Mg==", "bodyText": "Thanks @xiaoyuyao for the reviews.\nYes, its \"Hadoop FS root path\". I will modify to make it clear.", "url": "https://github.com/apache/ozone/pull/895#discussion_r420521952", "createdAt": "2020-05-06T03:07:28Z", "author": {"login": "rakeshadr"}, "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/freon/HadoopDirTreeGenerator.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.ozone.freon;\n+\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.hadoop.fs.FSDataOutputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hdds.cli.HddsVersionProvider;\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Option;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Random;\n+import java.util.concurrent.Callable;\n+\n+/**\n+ * Directory & File Generator tool to test OM performance.\n+ */\n+@Command(name = \"dtsg\",\n+    aliases = \"dfs-tree-generator\",\n+    description =\n+        \"Create nested directories and create given number of files in each \" +\n+                \"dir in any dfs compatible file system.\",\n+    versionProvider = HddsVersionProvider.class,\n+    mixinStandardHelpOptions = true,\n+    showDefaultValues = true)\n+public class HadoopDirTreeGenerator extends BaseFreonGenerator\n+    implements Callable<Void> {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(HadoopDirTreeGenerator.class);\n+\n+  @Option(names = {\"-r\", \"--rpath\"},\n+      description = \"Hadoop FS directory system path\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxNjAyNg=="}, "originalCommit": {"oid": "ed4308008971edeef256152c43914dd538c7ace8"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE5OTQwNw==", "bodyText": "Done!", "url": "https://github.com/apache/ozone/pull/895#discussion_r421199407", "createdAt": "2020-05-07T02:16:51Z", "author": {"login": "rakeshadr"}, "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/freon/HadoopDirTreeGenerator.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.ozone.freon;\n+\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.hadoop.fs.FSDataOutputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hdds.cli.HddsVersionProvider;\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Option;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Random;\n+import java.util.concurrent.Callable;\n+\n+/**\n+ * Directory & File Generator tool to test OM performance.\n+ */\n+@Command(name = \"dtsg\",\n+    aliases = \"dfs-tree-generator\",\n+    description =\n+        \"Create nested directories and create given number of files in each \" +\n+                \"dir in any dfs compatible file system.\",\n+    versionProvider = HddsVersionProvider.class,\n+    mixinStandardHelpOptions = true,\n+    showDefaultValues = true)\n+public class HadoopDirTreeGenerator extends BaseFreonGenerator\n+    implements Callable<Void> {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(HadoopDirTreeGenerator.class);\n+\n+  @Option(names = {\"-r\", \"--rpath\"},\n+      description = \"Hadoop FS directory system path\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxNjAyNg=="}, "originalCommit": {"oid": "ed4308008971edeef256152c43914dd538c7ace8"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4285, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}