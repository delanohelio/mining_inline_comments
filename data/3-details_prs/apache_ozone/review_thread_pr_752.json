{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3MzA4MDAy", "number": 752, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNDo1MDowN1rODty0kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNToyMzo1N1rODtzLLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzQ1MTcxOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/client/src/main/java/org/apache/hadoop/ozone/client/OzoneClientFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNDo1MDowN1rOF_bLHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjo1NzoxNlrOF_dpuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA0OTgyMQ==", "bodyText": "Now with this change, we have an assumption that client can never use OM_SERVICE_ID_DEFAULT value when configuring HA. As previously in single node OM with ratis enabled, we need raftGroupID to get that we have used this default serviceID.", "url": "https://github.com/apache/ozone/pull/752#discussion_r402049821", "createdAt": "2020-04-02T04:50:07Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/client/src/main/java/org/apache/hadoop/ozone/client/OzoneClientFactory.java", "diffHunk": "@@ -159,6 +163,47 @@ private static OzoneClient getRpcClient(ClientProtocol clientProtocol,\n     return new OzoneClient(config, proxy);\n   }\n \n+  /**\n+   * Create OzoneClient for token renew/cancel operations.\n+   * @param conf Configuration to be used for OzoneCient creation\n+   * @param token ozone token is involved\n+   * @return\n+   * @throws IOException\n+   */\n+  public static OzoneClient getOzoneClient(Configuration conf,\n+      Token<OzoneTokenIdentifier> token) throws IOException {\n+    Preconditions.checkNotNull(token, \"Null token is not allowed\");\n+    String omServiceId = token.decodeIdentifier().getOmServiceId();\n+    if (StringUtils.isNotEmpty(omServiceId)) {\n+      // new OM should always issue token with omServiceId\n+      if (omServiceId.equals(OzoneConsts.OM_SERVICE_ID_DEFAULT)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e0b790dc923e7735fc6c039c60ea51e20f16fe4"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA1NzQwMQ==", "bodyText": "Do we need to update it to something like this  if (omServiceId.equals(OzoneConsts.OM_SERVICE_ID_DEFAULT) && !OmUtils.isOmHAServiceId(conf, omServiceId))", "url": "https://github.com/apache/ozone/pull/752#discussion_r402057401", "createdAt": "2020-04-02T05:20:24Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/client/src/main/java/org/apache/hadoop/ozone/client/OzoneClientFactory.java", "diffHunk": "@@ -159,6 +163,47 @@ private static OzoneClient getRpcClient(ClientProtocol clientProtocol,\n     return new OzoneClient(config, proxy);\n   }\n \n+  /**\n+   * Create OzoneClient for token renew/cancel operations.\n+   * @param conf Configuration to be used for OzoneCient creation\n+   * @param token ozone token is involved\n+   * @return\n+   * @throws IOException\n+   */\n+  public static OzoneClient getOzoneClient(Configuration conf,\n+      Token<OzoneTokenIdentifier> token) throws IOException {\n+    Preconditions.checkNotNull(token, \"Null token is not allowed\");\n+    String omServiceId = token.decodeIdentifier().getOmServiceId();\n+    if (StringUtils.isNotEmpty(omServiceId)) {\n+      // new OM should always issue token with omServiceId\n+      if (omServiceId.equals(OzoneConsts.OM_SERVICE_ID_DEFAULT)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA0OTgyMQ=="}, "originalCommit": {"oid": "0e0b790dc923e7735fc6c039c60ea51e20f16fe4"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA5MDQyNw==", "bodyText": "Do we use the OM_SERVICE_ID_DEFAULT for non-HA case? My first version does not have the following logic and I thought this is purely for non-HA where we don't need this serviceID to create RPC client.\nif (omServiceId.equals(OzoneConsts.OM_SERVICE_ID_DEFAULT)) {\n// Non-HA\nreturn OzoneClientFactory.getRpcClient(conf);\n}\nIf all the HA and HA are unified, we can skip those lines and only use the second if when the omServiceId match with the local configure. Still, the default om service id is risky in cross cluster operations like distcp as I mentioned below.", "url": "https://github.com/apache/ozone/pull/752#discussion_r402090427", "createdAt": "2020-04-02T06:57:16Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-ozone/client/src/main/java/org/apache/hadoop/ozone/client/OzoneClientFactory.java", "diffHunk": "@@ -159,6 +163,47 @@ private static OzoneClient getRpcClient(ClientProtocol clientProtocol,\n     return new OzoneClient(config, proxy);\n   }\n \n+  /**\n+   * Create OzoneClient for token renew/cancel operations.\n+   * @param conf Configuration to be used for OzoneCient creation\n+   * @param token ozone token is involved\n+   * @return\n+   * @throws IOException\n+   */\n+  public static OzoneClient getOzoneClient(Configuration conf,\n+      Token<OzoneTokenIdentifier> token) throws IOException {\n+    Preconditions.checkNotNull(token, \"Null token is not allowed\");\n+    String omServiceId = token.decodeIdentifier().getOmServiceId();\n+    if (StringUtils.isNotEmpty(omServiceId)) {\n+      // new OM should always issue token with omServiceId\n+      if (omServiceId.equals(OzoneConsts.OM_SERVICE_ID_DEFAULT)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA0OTgyMQ=="}, "originalCommit": {"oid": "0e0b790dc923e7735fc6c039c60ea51e20f16fe4"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzQ1ODE5OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/client/src/main/java/org/apache/hadoop/ozone/client/OzoneClientFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNDo1Mzo1M1rOF_bOxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjo0OTozOVrOF_dc-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA1MDc1OQ==", "bodyText": "This else, says when new client talking to old OM with HA, we are failing is my understanding correct here?", "url": "https://github.com/apache/ozone/pull/752#discussion_r402050759", "createdAt": "2020-04-02T04:53:53Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/client/src/main/java/org/apache/hadoop/ozone/client/OzoneClientFactory.java", "diffHunk": "@@ -159,6 +163,47 @@ private static OzoneClient getRpcClient(ClientProtocol clientProtocol,\n     return new OzoneClient(config, proxy);\n   }\n \n+  /**\n+   * Create OzoneClient for token renew/cancel operations.\n+   * @param conf Configuration to be used for OzoneCient creation\n+   * @param token ozone token is involved\n+   * @return\n+   * @throws IOException\n+   */\n+  public static OzoneClient getOzoneClient(Configuration conf,\n+      Token<OzoneTokenIdentifier> token) throws IOException {\n+    Preconditions.checkNotNull(token, \"Null token is not allowed\");\n+    String omServiceId = token.decodeIdentifier().getOmServiceId();\n+    if (StringUtils.isNotEmpty(omServiceId)) {\n+      // new OM should always issue token with omServiceId\n+      if (omServiceId.equals(OzoneConsts.OM_SERVICE_ID_DEFAULT)) {\n+        // Non-HA\n+        return OzoneClientFactory.getRpcClient(conf);\n+      } else if (OmUtils.isOmHAServiceId(conf, omServiceId)) {\n+        // HA with matching service id\n+        return OzoneClientFactory.getRpcClient(omServiceId, conf);\n+      } else {\n+        // HA with mismatched service id\n+        throw new IOException(\"Service ID specified does not match\" +\n+            \" with \" + OZONE_OM_SERVICE_IDS_KEY + \" defined in the \" +\n+            \"configuration. Configured \" + OZONE_OM_SERVICE_IDS_KEY +\n+            \" are\" + conf.getTrimmedStringCollection(\n+            OZONE_OM_SERVICE_IDS_KEY));\n+      }\n+    } else {\n+      // Old OM may issue token without omServiceId that should work\n+      // with non-HA case\n+      if (!OmUtils.isServiceIdsDefined(conf)) {\n+        return OzoneClientFactory.getRpcClient(conf);\n+      } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e0b790dc923e7735fc6c039c60ea51e20f16fe4"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA4NzE2MQ==", "bodyText": "The serviceID must be unique to support distcp cross clusters. In the case when token does not provide omServiceId or only the default serviceID is provided. Token renew/cancel may not be able to figure out the right OM clusters to talk to. That's the main reason that we fail here.", "url": "https://github.com/apache/ozone/pull/752#discussion_r402087161", "createdAt": "2020-04-02T06:49:39Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-ozone/client/src/main/java/org/apache/hadoop/ozone/client/OzoneClientFactory.java", "diffHunk": "@@ -159,6 +163,47 @@ private static OzoneClient getRpcClient(ClientProtocol clientProtocol,\n     return new OzoneClient(config, proxy);\n   }\n \n+  /**\n+   * Create OzoneClient for token renew/cancel operations.\n+   * @param conf Configuration to be used for OzoneCient creation\n+   * @param token ozone token is involved\n+   * @return\n+   * @throws IOException\n+   */\n+  public static OzoneClient getOzoneClient(Configuration conf,\n+      Token<OzoneTokenIdentifier> token) throws IOException {\n+    Preconditions.checkNotNull(token, \"Null token is not allowed\");\n+    String omServiceId = token.decodeIdentifier().getOmServiceId();\n+    if (StringUtils.isNotEmpty(omServiceId)) {\n+      // new OM should always issue token with omServiceId\n+      if (omServiceId.equals(OzoneConsts.OM_SERVICE_ID_DEFAULT)) {\n+        // Non-HA\n+        return OzoneClientFactory.getRpcClient(conf);\n+      } else if (OmUtils.isOmHAServiceId(conf, omServiceId)) {\n+        // HA with matching service id\n+        return OzoneClientFactory.getRpcClient(omServiceId, conf);\n+      } else {\n+        // HA with mismatched service id\n+        throw new IOException(\"Service ID specified does not match\" +\n+            \" with \" + OZONE_OM_SERVICE_IDS_KEY + \" defined in the \" +\n+            \"configuration. Configured \" + OZONE_OM_SERVICE_IDS_KEY +\n+            \" are\" + conf.getTrimmedStringCollection(\n+            OZONE_OM_SERVICE_IDS_KEY));\n+      }\n+    } else {\n+      // Old OM may issue token without omServiceId that should work\n+      // with non-HA case\n+      if (!OmUtils.isServiceIdsDefined(conf)) {\n+        return OzoneClientFactory.getRpcClient(conf);\n+      } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA1MDc1OQ=="}, "originalCommit": {"oid": "0e0b790dc923e7735fc6c039c60ea51e20f16fe4"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzQ5NzQzOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/web/ozShell/token/GetTokenHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNToxNzowOVrOF_blMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNzowODowMFrOF_d80g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA1NjQ5OQ==", "bodyText": "OZONE_BUCKET_URI_DESCRIPTION -> need to be updated as o3://om or o3://serviceid", "url": "https://github.com/apache/ozone/pull/752#discussion_r402056499", "createdAt": "2020-04-02T05:17:09Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/web/ozShell/token/GetTokenHandler.java", "diffHunk": "@@ -39,7 +40,9 @@\n     description = \"get a delegation token.\")\n public class GetTokenHandler extends Handler {\n \n-\n+  @CommandLine.Parameters(arity = \"1..1\",\n+      description = Shell.OZONE_BUCKET_URI_DESCRIPTION)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e0b790dc923e7735fc6c039c60ea51e20f16fe4"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA5NTMxNA==", "bodyText": "Fixed.", "url": "https://github.com/apache/ozone/pull/752#discussion_r402095314", "createdAt": "2020-04-02T07:08:00Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/web/ozShell/token/GetTokenHandler.java", "diffHunk": "@@ -39,7 +40,9 @@\n     description = \"get a delegation token.\")\n public class GetTokenHandler extends Handler {\n \n-\n+  @CommandLine.Parameters(arity = \"1..1\",\n+      description = Shell.OZONE_BUCKET_URI_DESCRIPTION)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA1NjQ5OQ=="}, "originalCommit": {"oid": "0e0b790dc923e7735fc6c039c60ea51e20f16fe4"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzUwOTU3OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/client/src/main/java/org/apache/hadoop/ozone/client/OzoneClientFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNToyMzo1N1rOF_bsfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjo1MjoxMFrOF_dg5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA1ODM2Ng==", "bodyText": "Minor: Can we also found service ID which helps during debug", "url": "https://github.com/apache/ozone/pull/752#discussion_r402058366", "createdAt": "2020-04-02T05:23:57Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/client/src/main/java/org/apache/hadoop/ozone/client/OzoneClientFactory.java", "diffHunk": "@@ -159,6 +163,47 @@ private static OzoneClient getRpcClient(ClientProtocol clientProtocol,\n     return new OzoneClient(config, proxy);\n   }\n \n+  /**\n+   * Create OzoneClient for token renew/cancel operations.\n+   * @param conf Configuration to be used for OzoneCient creation\n+   * @param token ozone token is involved\n+   * @return\n+   * @throws IOException\n+   */\n+  public static OzoneClient getOzoneClient(Configuration conf,\n+      Token<OzoneTokenIdentifier> token) throws IOException {\n+    Preconditions.checkNotNull(token, \"Null token is not allowed\");\n+    String omServiceId = token.decodeIdentifier().getOmServiceId();\n+    if (StringUtils.isNotEmpty(omServiceId)) {\n+      // new OM should always issue token with omServiceId\n+      if (omServiceId.equals(OzoneConsts.OM_SERVICE_ID_DEFAULT)) {\n+        // Non-HA\n+        return OzoneClientFactory.getRpcClient(conf);\n+      } else if (OmUtils.isOmHAServiceId(conf, omServiceId)) {\n+        // HA with matching service id\n+        return OzoneClientFactory.getRpcClient(omServiceId, conf);\n+      } else {\n+        // HA with mismatched service id\n+        throw new IOException(\"Service ID specified does not match\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e0b790dc923e7735fc6c039c60ea51e20f16fe4"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA4ODE2NQ==", "bodyText": "good point, will fix in the next commit.", "url": "https://github.com/apache/ozone/pull/752#discussion_r402088165", "createdAt": "2020-04-02T06:52:10Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-ozone/client/src/main/java/org/apache/hadoop/ozone/client/OzoneClientFactory.java", "diffHunk": "@@ -159,6 +163,47 @@ private static OzoneClient getRpcClient(ClientProtocol clientProtocol,\n     return new OzoneClient(config, proxy);\n   }\n \n+  /**\n+   * Create OzoneClient for token renew/cancel operations.\n+   * @param conf Configuration to be used for OzoneCient creation\n+   * @param token ozone token is involved\n+   * @return\n+   * @throws IOException\n+   */\n+  public static OzoneClient getOzoneClient(Configuration conf,\n+      Token<OzoneTokenIdentifier> token) throws IOException {\n+    Preconditions.checkNotNull(token, \"Null token is not allowed\");\n+    String omServiceId = token.decodeIdentifier().getOmServiceId();\n+    if (StringUtils.isNotEmpty(omServiceId)) {\n+      // new OM should always issue token with omServiceId\n+      if (omServiceId.equals(OzoneConsts.OM_SERVICE_ID_DEFAULT)) {\n+        // Non-HA\n+        return OzoneClientFactory.getRpcClient(conf);\n+      } else if (OmUtils.isOmHAServiceId(conf, omServiceId)) {\n+        // HA with matching service id\n+        return OzoneClientFactory.getRpcClient(omServiceId, conf);\n+      } else {\n+        // HA with mismatched service id\n+        throw new IOException(\"Service ID specified does not match\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA1ODM2Ng=="}, "originalCommit": {"oid": "0e0b790dc923e7735fc6c039c60ea51e20f16fe4"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4436, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}