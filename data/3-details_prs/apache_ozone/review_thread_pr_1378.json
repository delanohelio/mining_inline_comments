{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4MDgzODE2", "number": 1378, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNzo0NDowN1rOEjAG9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwODo1ODo0NVrOFE3zaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTM3Mzk4OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/scm/container/ContainerID.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNzo0NDowN1rOHRHqyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODoyNjoxNFrOHZKjsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzcxMzQ4Mw==", "bodyText": "Is 0 a valid containerID ?", "url": "https://github.com/apache/ozone/pull/1378#discussion_r487713483", "createdAt": "2020-09-14T07:44:07Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/scm/container/ContainerID.java", "diffHunk": "@@ -41,8 +41,8 @@\n    * @param id int\n    */\n   private ContainerID(long id) {\n-    Preconditions.checkState(id > 0,\n-        \"Container ID should be a positive. %s.\", id);\n+    Preconditions.checkState(id >= 0,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a824b1b4dd3829f451cf8828d93914646e9ca0ba"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE0OTQyNQ==", "bodyText": "We don't create a container with ID 0, but 0 is a valid ID.\nThe reason for allowing 0 as a value for container ID is to avoid the explicit null check that we do in HDDS-1302.", "url": "https://github.com/apache/ozone/pull/1378#discussion_r496149425", "createdAt": "2020-09-28T18:26:14Z", "author": {"login": "nandakumar131"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/scm/container/ContainerID.java", "diffHunk": "@@ -41,8 +41,8 @@\n    * @param id int\n    */\n   private ContainerID(long id) {\n-    Preconditions.checkState(id > 0,\n-        \"Container ID should be a positive. %s.\", id);\n+    Preconditions.checkState(id >= 0,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzcxMzQ4Mw=="}, "originalCommit": {"oid": "a824b1b4dd3829f451cf8828d93914646e9ca0ba"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTkyODY4OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/container/ContainerManagerImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNjowOToxNVrOHRyHAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODozMDowMFrOHZKr5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQwODgzMw==", "bodyText": "why not synchronize on pipeline ?", "url": "https://github.com/apache/ozone/pull/1378#discussion_r488408833", "createdAt": "2020-09-15T06:09:15Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/container/ContainerManagerImpl.java", "diffHunk": "@@ -242,19 +286,82 @@ public void removeContainerReplica(final ContainerID id,\n   @Override\n   public void updateDeleteTransactionId(\n       final Map<ContainerID, Long> deleteTransactionMap) throws IOException {\n-    throw new UnsupportedOperationException(\"Not yet implemented!\");\n+    lock.writeLock().lock();\n+    try {\n+      containerStateManager.updateDeleteTransactionId(deleteTransactionMap);\n+    } finally {\n+      lock.writeLock().unlock();\n+    }\n   }\n \n   @Override\n   public ContainerInfo getMatchingContainer(final long size, final String owner,\n-      final Pipeline pipeline, final List<ContainerID> excludedContainerIDS) {\n-    throw new UnsupportedOperationException(\"Not yet implemented!\");\n+      final Pipeline pipeline, final Set<ContainerID> excludedContainerIDs) {\n+    NavigableSet<ContainerID> containerIDs;\n+    ContainerInfo containerInfo;\n+    try {\n+      synchronized (pipeline.getId()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a824b1b4dd3829f451cf8828d93914646e9ca0ba"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE1MTUyNQ==", "bodyText": "This is to avoid the warning that we get when we synchronize on the method parameter. This is just to fool the IDE.\nIn general, synchronizing on method parameter is bad. We have to fix this in a better way.", "url": "https://github.com/apache/ozone/pull/1378#discussion_r496151525", "createdAt": "2020-09-28T18:30:00Z", "author": {"login": "nandakumar131"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/container/ContainerManagerImpl.java", "diffHunk": "@@ -242,19 +286,82 @@ public void removeContainerReplica(final ContainerID id,\n   @Override\n   public void updateDeleteTransactionId(\n       final Map<ContainerID, Long> deleteTransactionMap) throws IOException {\n-    throw new UnsupportedOperationException(\"Not yet implemented!\");\n+    lock.writeLock().lock();\n+    try {\n+      containerStateManager.updateDeleteTransactionId(deleteTransactionMap);\n+    } finally {\n+      lock.writeLock().unlock();\n+    }\n   }\n \n   @Override\n   public ContainerInfo getMatchingContainer(final long size, final String owner,\n-      final Pipeline pipeline, final List<ContainerID> excludedContainerIDS) {\n-    throw new UnsupportedOperationException(\"Not yet implemented!\");\n+      final Pipeline pipeline, final Set<ContainerID> excludedContainerIDs) {\n+    NavigableSet<ContainerID> containerIDs;\n+    ContainerInfo containerInfo;\n+    try {\n+      synchronized (pipeline.getId()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQwODgzMw=="}, "originalCommit": {"oid": "a824b1b4dd3829f451cf8828d93914646e9ca0ba"}, "originalPosition": 184}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNjUyOTA1OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/container/ContainerManagerImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwODo1ODo0NVrOIFGG9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMjowODo0M1rOIFNgpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIxMzg3OQ==", "bodyText": "Why call incNumListContainersOps() twice here ?", "url": "https://github.com/apache/ozone/pull/1378#discussion_r542213879", "createdAt": "2020-12-14T08:58:45Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/container/ContainerManagerImpl.java", "diffHunk": "@@ -111,14 +135,18 @@ public ContainerInfo getContainer(final ContainerID id)\n   }\n \n   @Override\n-  public List<ContainerInfo> listContainers(final ContainerID startID,\n-                                            final int count) {\n+  public List<ContainerInfo> getContainers(final ContainerID startID,\n+                                           final int count) {\n     lock.readLock().lock();\n+    scmContainerManagerMetrics.incNumListContainersOps();\n     try {\n+      // TODO: Remove the null check, startID should not be null. Fix the unit\n+      //  test before removing the check.\n       final long start = startID == null ? 0 : startID.getId();\n       final List<ContainerID> containersIds =\n           new ArrayList<>(containerStateManager.getContainerIDs());\n       Collections.sort(containersIds);\n+      scmContainerManagerMetrics.incNumListContainersOps();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b523583bbae485564781d5a60107f5764b2c05aa"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMzNTE0MQ==", "bodyText": "My bad, thanks for catching it.", "url": "https://github.com/apache/ozone/pull/1378#discussion_r542335141", "createdAt": "2020-12-14T12:08:43Z", "author": {"login": "nandakumar131"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/container/ContainerManagerImpl.java", "diffHunk": "@@ -111,14 +135,18 @@ public ContainerInfo getContainer(final ContainerID id)\n   }\n \n   @Override\n-  public List<ContainerInfo> listContainers(final ContainerID startID,\n-                                            final int count) {\n+  public List<ContainerInfo> getContainers(final ContainerID startID,\n+                                           final int count) {\n     lock.readLock().lock();\n+    scmContainerManagerMetrics.incNumListContainersOps();\n     try {\n+      // TODO: Remove the null check, startID should not be null. Fix the unit\n+      //  test before removing the check.\n       final long start = startID == null ? 0 : startID.getId();\n       final List<ContainerID> containersIds =\n           new ArrayList<>(containerStateManager.getContainerIDs());\n       Collections.sort(containersIds);\n+      scmContainerManagerMetrics.incNumListContainersOps();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIxMzg3OQ=="}, "originalCommit": {"oid": "b523583bbae485564781d5a60107f5764b2c05aa"}, "originalPosition": 84}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4826, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}