{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1MDk4NzM1", "number": 466, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzo0Mzo0NFrODbD8Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMjoyMjo0OFrODbZJ6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzAyNjg3OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelineFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzo0Mzo0NFrOFiVSXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMDoxNjoyMlrOFiV1cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0NDY2OA==", "bodyText": "The access can be made package-private?", "url": "https://github.com/apache/ozone/pull/466#discussion_r371544668", "createdAt": "2020-01-27T23:43:44Z", "author": {"login": "swagle"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelineFactory.java", "diffHunk": "@@ -35,7 +35,7 @@\n /**\n  * Creates pipeline based on replication type.\n  */\n-public final class PipelineFactory {\n+public class PipelineFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8ffb3edce4817dc708470dce9b1839ba14c3ee5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MzY1MQ==", "bodyText": "This is extended in org.apache.hadoop.ozone.recon.scm.ReconPipelineFactory.", "url": "https://github.com/apache/ozone/pull/466#discussion_r371553651", "createdAt": "2020-01-28T00:16:22Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelineFactory.java", "diffHunk": "@@ -35,7 +35,7 @@\n /**\n  * Creates pipeline based on replication type.\n  */\n-public final class PipelineFactory {\n+public class PipelineFactory {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0NDY2OA=="}, "originalCommit": {"oid": "e8ffb3edce4817dc708470dce9b1839ba14c3ee5"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzAzMTkzOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelineReportHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzo0Njo0NVrOFiVViQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNToyODoxMFrOFipT4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0NTQ4MQ==", "bodyText": "For cleaner semantics, this can be renamed to setReportedDatanode.", "url": "https://github.com/apache/ozone/pull/466#discussion_r371545481", "createdAt": "2020-01-27T23:46:45Z", "author": {"login": "swagle"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelineReportHandler.java", "diffHunk": "@@ -120,4 +116,24 @@ private void processPipelineReport(PipelineReport report, DatanodeDetails dn,\n       }\n     }\n   }\n+\n+\n+  protected void reportDatanode(Pipeline pipeline, DatanodeDetails dn)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8ffb3edce4817dc708470dce9b1839ba14c3ee5"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg3MjczOA==", "bodyText": "Done", "url": "https://github.com/apache/ozone/pull/466#discussion_r371872738", "createdAt": "2020-01-28T15:28:10Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelineReportHandler.java", "diffHunk": "@@ -120,4 +116,24 @@ private void processPipelineReport(PipelineReport report, DatanodeDetails dn,\n       }\n     }\n   }\n+\n+\n+  protected void reportDatanode(Pipeline pipeline, DatanodeDetails dn)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0NTQ4MQ=="}, "originalCommit": {"oid": "e8ffb3edce4817dc708470dce9b1839ba14c3ee5"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzA0MDQwOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/SCMPipelineManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzo1MToxNlrOFiVanQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxODoyOTowNlrOFiv1hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0Njc4MQ==", "bodyText": "Instead of contains, we could have made the get return an Optional", "url": "https://github.com/apache/ozone/pull/466#discussion_r371546781", "createdAt": "2020-01-27T23:51:16Z", "author": {"login": "swagle"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/SCMPipelineManager.java", "diffHunk": "@@ -200,6 +210,16 @@ public Pipeline getPipeline(PipelineID pipelineID)\n     }\n   }\n \n+  @Override\n+  public boolean containsPipeline(PipelineID pipelineID) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8ffb3edce4817dc708470dce9b1839ba14c3ee5"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg3NDc0MA==", "bodyText": "Since the API is \"contains\", I wanted to keep it true/false. Can I address this in the next patch?", "url": "https://github.com/apache/ozone/pull/466#discussion_r371874740", "createdAt": "2020-01-28T15:31:11Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/SCMPipelineManager.java", "diffHunk": "@@ -200,6 +210,16 @@ public Pipeline getPipeline(PipelineID pipelineID)\n     }\n   }\n \n+  @Override\n+  public boolean containsPipeline(PipelineID pipelineID) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0Njc4MQ=="}, "originalCommit": {"oid": "e8ffb3edce4817dc708470dce9b1839ba14c3ee5"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk3OTY1NQ==", "bodyText": "It's a minor nit, I am ok with it asis. More of a preference thing, returning Optional already sets the contract and reduces code dup.", "url": "https://github.com/apache/ozone/pull/466#discussion_r371979655", "createdAt": "2020-01-28T18:29:06Z", "author": {"login": "swagle"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/SCMPipelineManager.java", "diffHunk": "@@ -200,6 +210,16 @@ public Pipeline getPipeline(PipelineID pipelineID)\n     }\n   }\n \n+  @Override\n+  public boolean containsPipeline(PipelineID pipelineID) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0Njc4MQ=="}, "originalCommit": {"oid": "e8ffb3edce4817dc708470dce9b1839ba14c3ee5"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzA0NjAxOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/SCMPipelineManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzo1NDoxMFrOFiVd9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxODoyOTo0MFrOFiv2lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0NzYzOA==", "bodyText": "Instead of a get on a lock object, it would make sense to make the reference accessible.", "url": "https://github.com/apache/ozone/pull/466#discussion_r371547638", "createdAt": "2020-01-27T23:54:10Z", "author": {"login": "swagle"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/SCMPipelineManager.java", "diffHunk": "@@ -523,4 +543,21 @@ protected File getPipelineDBPath(Configuration configuration) {\n     File metaDir = ServerUtils.getScmDbDir(configuration);\n     return new File(metaDir, SCM_PIPELINE_DB);\n   }\n+\n+  protected ReadWriteLock getLock() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8ffb3edce4817dc708470dce9b1839ba14c3ee5"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg2MjYwOQ==", "bodyText": "That will lead to findbug violation. Do you see any issues using a getter?", "url": "https://github.com/apache/ozone/pull/466#discussion_r371862609", "createdAt": "2020-01-28T15:12:37Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/SCMPipelineManager.java", "diffHunk": "@@ -523,4 +543,21 @@ protected File getPipelineDBPath(Configuration configuration) {\n     File metaDir = ServerUtils.getScmDbDir(configuration);\n     return new File(metaDir, SCM_PIPELINE_DB);\n   }\n+\n+  protected ReadWriteLock getLock() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0NzYzOA=="}, "originalCommit": {"oid": "e8ffb3edce4817dc708470dce9b1839ba14c3ee5"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk3OTkyNQ==", "bodyText": "I see, ok let's ignore this comment.", "url": "https://github.com/apache/ozone/pull/466#discussion_r371979925", "createdAt": "2020-01-28T18:29:40Z", "author": {"login": "swagle"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/SCMPipelineManager.java", "diffHunk": "@@ -523,4 +543,21 @@ protected File getPipelineDBPath(Configuration configuration) {\n     File metaDir = ServerUtils.getScmDbDir(configuration);\n     return new File(metaDir, SCM_PIPELINE_DB);\n   }\n+\n+  protected ReadWriteLock getLock() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0NzYzOA=="}, "originalCommit": {"oid": "e8ffb3edce4817dc708470dce9b1839ba14c3ee5"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzA0ODA4OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/server/SCMClientProtocolServer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzo1NToyNVrOFiVfSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNTozMjowM1rOFipd2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0Nzk3Nw==", "bodyText": "This might not be appropriate for Audit since it is not client access, we should log it in debug mode IMO.", "url": "https://github.com/apache/ozone/pull/466#discussion_r371547977", "createdAt": "2020-01-27T23:55:25Z", "author": {"login": "swagle"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/server/SCMClientProtocolServer.java", "diffHunk": "@@ -408,6 +408,15 @@ public Pipeline createReplicationPipeline(HddsProtos.ReplicationType type,\n     return scm.getPipelineManager().getPipelines();\n   }\n \n+  @Override\n+  public Pipeline getPipeline(HddsProtos.PipelineID pipelineID)\n+      throws IOException {\n+    AUDIT.logReadSuccess(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8ffb3edce4817dc708470dce9b1839ba14c3ee5"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg3NTI5MQ==", "bodyText": "Done", "url": "https://github.com/apache/ozone/pull/466#discussion_r371875291", "createdAt": "2020-01-28T15:32:03Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/server/SCMClientProtocolServer.java", "diffHunk": "@@ -408,6 +408,15 @@ public Pipeline createReplicationPipeline(HddsProtos.ReplicationType type,\n     return scm.getPipelineManager().getPipelines();\n   }\n \n+  @Override\n+  public Pipeline getPipeline(HddsProtos.PipelineID pipelineID)\n+      throws IOException {\n+    AUDIT.logReadSuccess(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0Nzk3Nw=="}, "originalCommit": {"oid": "e8ffb3edce4817dc708470dce9b1839ba14c3ee5"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzA1MDI3OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/scm/ReconPipelineFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzo1NjozNVrOFiVgmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNToxMTo1MFrOFioqbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0ODMxNQ==", "bodyText": "Should we consider throwing a RuntimeException instead?", "url": "https://github.com/apache/ozone/pull/466#discussion_r371548315", "createdAt": "2020-01-27T23:56:35Z", "author": {"login": "swagle"}, "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/scm/ReconPipelineFactory.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.recon.scm;\n+\n+import java.util.List;\n+\n+import org.apache.commons.collections.map.DefaultedMap;\n+import org.apache.hadoop.hdds.protocol.DatanodeDetails;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n+import org.apache.hadoop.hdds.scm.pipeline.Pipeline;\n+import org.apache.hadoop.hdds.scm.pipeline.PipelineFactory;\n+import org.apache.hadoop.hdds.scm.pipeline.PipelineProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class to stub out SCM's pipeline providers. This makes sure Recon can\n+ * never be on the pipeline CREATE or CLOSE path.\n+ */\n+public class ReconPipelineFactory extends PipelineFactory {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(ReconPipelineFactory.class);\n+\n+  ReconPipelineFactory() {\n+    ReconMockPipelineProvider reconMockPipelineProvider =\n+        new ReconMockPipelineProvider();\n+    setProviders(new DefaultedMap(reconMockPipelineProvider));\n+  }\n+\n+  static class ReconMockPipelineProvider implements PipelineProvider {\n+\n+    @Override\n+    public Pipeline create(HddsProtos.ReplicationFactor factor){\n+      LOG.warn(\"Trying to create pipeline in Recon, which is prohibited!\");\n+      return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8ffb3edce4817dc708470dce9b1839ba14c3ee5"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg2MjEyNw==", "bodyText": "We don't need to do this since this class protects us against any unintended actions from Recon.", "url": "https://github.com/apache/ozone/pull/466#discussion_r371862127", "createdAt": "2020-01-28T15:11:50Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/scm/ReconPipelineFactory.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.recon.scm;\n+\n+import java.util.List;\n+\n+import org.apache.commons.collections.map.DefaultedMap;\n+import org.apache.hadoop.hdds.protocol.DatanodeDetails;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n+import org.apache.hadoop.hdds.scm.pipeline.Pipeline;\n+import org.apache.hadoop.hdds.scm.pipeline.PipelineFactory;\n+import org.apache.hadoop.hdds.scm.pipeline.PipelineProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class to stub out SCM's pipeline providers. This makes sure Recon can\n+ * never be on the pipeline CREATE or CLOSE path.\n+ */\n+public class ReconPipelineFactory extends PipelineFactory {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(ReconPipelineFactory.class);\n+\n+  ReconPipelineFactory() {\n+    ReconMockPipelineProvider reconMockPipelineProvider =\n+        new ReconMockPipelineProvider();\n+    setProviders(new DefaultedMap(reconMockPipelineProvider));\n+  }\n+\n+  static class ReconMockPipelineProvider implements PipelineProvider {\n+\n+    @Override\n+    public Pipeline create(HddsProtos.ReplicationFactor factor){\n+      LOG.warn(\"Trying to create pipeline in Recon, which is prohibited!\");\n+      return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0ODMxNQ=="}, "originalCommit": {"oid": "e8ffb3edce4817dc708470dce9b1839ba14c3ee5"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzA1MjA2OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/scm/ReconPipelineFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzo1Nzo0MVrOFiVhvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzo1Nzo0MVrOFiVhvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0ODYwNA==", "bodyText": "I would avoid calling this a Mock since unit tests mocks have a different meaning as they return stubbed data structures.", "url": "https://github.com/apache/ozone/pull/466#discussion_r371548604", "createdAt": "2020-01-27T23:57:41Z", "author": {"login": "swagle"}, "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/scm/ReconPipelineFactory.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.recon.scm;\n+\n+import java.util.List;\n+\n+import org.apache.commons.collections.map.DefaultedMap;\n+import org.apache.hadoop.hdds.protocol.DatanodeDetails;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n+import org.apache.hadoop.hdds.scm.pipeline.Pipeline;\n+import org.apache.hadoop.hdds.scm.pipeline.PipelineFactory;\n+import org.apache.hadoop.hdds.scm.pipeline.PipelineProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class to stub out SCM's pipeline providers. This makes sure Recon can\n+ * never be on the pipeline CREATE or CLOSE path.\n+ */\n+public class ReconPipelineFactory extends PipelineFactory {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(ReconPipelineFactory.class);\n+\n+  ReconPipelineFactory() {\n+    ReconMockPipelineProvider reconMockPipelineProvider =\n+        new ReconMockPipelineProvider();\n+    setProviders(new DefaultedMap(reconMockPipelineProvider));\n+  }\n+\n+  static class ReconMockPipelineProvider implements PipelineProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8ffb3edce4817dc708470dce9b1839ba14c3ee5"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzA2MTQyOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/spi/impl/StorageContainerServiceProviderImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMDowMjo1NlrOFiVnag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMDowMjo1NlrOFiVnag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MDA1OA==", "bodyText": "How about calling initialize from the constructor and make that idempotent using the flag.", "url": "https://github.com/apache/ozone/pull/466#discussion_r371550058", "createdAt": "2020-01-28T00:02:56Z", "author": {"login": "swagle"}, "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/spi/impl/StorageContainerServiceProviderImpl.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.recon.spi.impl;\n+\n+import static org.apache.hadoop.hdds.scm.client.ContainerOperationClient.newContainerRpcClient;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n+import org.apache.hadoop.hdds.scm.pipeline.Pipeline;\n+import org.apache.hadoop.hdds.scm.protocol.StorageContainerLocationProtocol;\n+import org.apache.hadoop.ozone.recon.spi.StorageContainerServiceProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Implementation for StorageContainerServiceProvider that talks with actual\n+ * cluster SCM.\n+ */\n+public class StorageContainerServiceProviderImpl\n+    implements StorageContainerServiceProvider {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(StorageContainerServiceProviderImpl.class);\n+\n+  private OzoneConfiguration configuration;\n+  private StorageContainerLocationProtocol scmClient;\n+  private boolean isInitialized = false;\n+\n+  @Inject\n+  public StorageContainerServiceProviderImpl(OzoneConfiguration configuration,\n+      StorageContainerLocationProtocol scmClient) {\n+    this.configuration = configuration;\n+    this.scmClient = scmClient;\n+    if (this.scmClient != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8ffb3edce4817dc708470dce9b1839ba14c3ee5"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzA2MjA0OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/spi/impl/StorageContainerServiceProviderImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMDowMzoxNVrOFiVnyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNToyODo0M1rOFipVZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MDE1NA==", "bodyText": "This should be declared volatile.", "url": "https://github.com/apache/ozone/pull/466#discussion_r371550154", "createdAt": "2020-01-28T00:03:15Z", "author": {"login": "swagle"}, "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/spi/impl/StorageContainerServiceProviderImpl.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.recon.spi.impl;\n+\n+import static org.apache.hadoop.hdds.scm.client.ContainerOperationClient.newContainerRpcClient;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n+import org.apache.hadoop.hdds.scm.pipeline.Pipeline;\n+import org.apache.hadoop.hdds.scm.protocol.StorageContainerLocationProtocol;\n+import org.apache.hadoop.ozone.recon.spi.StorageContainerServiceProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Implementation for StorageContainerServiceProvider that talks with actual\n+ * cluster SCM.\n+ */\n+public class StorageContainerServiceProviderImpl\n+    implements StorageContainerServiceProvider {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(StorageContainerServiceProviderImpl.class);\n+\n+  private OzoneConfiguration configuration;\n+  private StorageContainerLocationProtocol scmClient;\n+  private boolean isInitialized = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8ffb3edce4817dc708470dce9b1839ba14c3ee5"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg3MzEyNA==", "bodyText": "Done", "url": "https://github.com/apache/ozone/pull/466#discussion_r371873124", "createdAt": "2020-01-28T15:28:43Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/spi/impl/StorageContainerServiceProviderImpl.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.recon.spi.impl;\n+\n+import static org.apache.hadoop.hdds.scm.client.ContainerOperationClient.newContainerRpcClient;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n+import org.apache.hadoop.hdds.scm.pipeline.Pipeline;\n+import org.apache.hadoop.hdds.scm.protocol.StorageContainerLocationProtocol;\n+import org.apache.hadoop.ozone.recon.spi.StorageContainerServiceProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Implementation for StorageContainerServiceProvider that talks with actual\n+ * cluster SCM.\n+ */\n+public class StorageContainerServiceProviderImpl\n+    implements StorageContainerServiceProvider {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(StorageContainerServiceProviderImpl.class);\n+\n+  private OzoneConfiguration configuration;\n+  private StorageContainerLocationProtocol scmClient;\n+  private boolean isInitialized = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MDE1NA=="}, "originalCommit": {"oid": "e8ffb3edce4817dc708470dce9b1839ba14c3ee5"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzA2MzM3OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/spi/impl/StorageContainerServiceProviderImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMDowMzo1NVrOFiVojw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMDowMzo1NVrOFiVojw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MDM1MQ==", "bodyText": "Same here, and next check becomes redundant.", "url": "https://github.com/apache/ozone/pull/466#discussion_r371550351", "createdAt": "2020-01-28T00:03:55Z", "author": {"login": "swagle"}, "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/spi/impl/StorageContainerServiceProviderImpl.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.recon.spi.impl;\n+\n+import static org.apache.hadoop.hdds.scm.client.ContainerOperationClient.newContainerRpcClient;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n+import org.apache.hadoop.hdds.scm.pipeline.Pipeline;\n+import org.apache.hadoop.hdds.scm.protocol.StorageContainerLocationProtocol;\n+import org.apache.hadoop.ozone.recon.spi.StorageContainerServiceProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Implementation for StorageContainerServiceProvider that talks with actual\n+ * cluster SCM.\n+ */\n+public class StorageContainerServiceProviderImpl\n+    implements StorageContainerServiceProvider {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(StorageContainerServiceProviderImpl.class);\n+\n+  private OzoneConfiguration configuration;\n+  private StorageContainerLocationProtocol scmClient;\n+  private boolean isInitialized = false;\n+\n+  @Inject\n+  public StorageContainerServiceProviderImpl(OzoneConfiguration configuration,\n+      StorageContainerLocationProtocol scmClient) {\n+    this.configuration = configuration;\n+    this.scmClient = scmClient;\n+    if (this.scmClient != null) {\n+      isInitialized = true;\n+    }\n+  }\n+\n+  private void initialize() {\n+    try {\n+      this.scmClient = newContainerRpcClient(configuration);\n+    } catch (IOException ioEx) {\n+      LOG.error(\"Exception encountered while creating SCM client.\", ioEx);\n+    }\n+    isInitialized = true;\n+  }\n+\n+  @Override\n+  public List<Pipeline> getPipelines() throws IOException {\n+    if (!isInitialized) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8ffb3edce4817dc708470dce9b1839ba14c3ee5"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMDQ5ODg0OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/audit/SCMAction.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMjoyMToxNlrOFi2rRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMjozMjozOVrOFi29Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA5MTcxOA==", "bodyText": "Usually we add new fields at the end of enums.", "url": "https://github.com/apache/ozone/pull/466#discussion_r372091718", "createdAt": "2020-01-28T22:21:16Z", "author": {"login": "arp7"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/audit/SCMAction.java", "diffHunk": "@@ -32,6 +32,7 @@\n   GET_CONTAINER_WITH_PIPELINE,\n   LIST_CONTAINER,\n   LIST_PIPELINE,\n+  GET_PIPELINE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2758f46cb7dac0e6f1aaf31d2deef78f42eaa970"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA5MzQ0NA==", "bodyText": "Sure, I can move it to the end.", "url": "https://github.com/apache/ozone/pull/466#discussion_r372093444", "createdAt": "2020-01-28T22:25:41Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/audit/SCMAction.java", "diffHunk": "@@ -32,6 +32,7 @@\n   GET_CONTAINER_WITH_PIPELINE,\n   LIST_CONTAINER,\n   LIST_PIPELINE,\n+  GET_PIPELINE,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA5MTcxOA=="}, "originalCommit": {"oid": "2758f46cb7dac0e6f1aaf31d2deef78f42eaa970"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA5NjI5OQ==", "bodyText": "I think it is okay for now as we don't have to maintain compatibility.", "url": "https://github.com/apache/ozone/pull/466#discussion_r372096299", "createdAt": "2020-01-28T22:32:39Z", "author": {"login": "arp7"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/audit/SCMAction.java", "diffHunk": "@@ -32,6 +32,7 @@\n   GET_CONTAINER_WITH_PIPELINE,\n   LIST_CONTAINER,\n   LIST_PIPELINE,\n+  GET_PIPELINE,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA5MTcxOA=="}, "originalCommit": {"oid": "2758f46cb7dac0e6f1aaf31d2deef78f42eaa970"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMDUwMjI2OnYy", "diffSide": "LEFT", "path": "hadoop-ozone/dist/src/main/compose/ozone/docker-compose.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMjoyMjozOVrOFi2tcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMjoyNTowNFrOFi2xDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA5MjI3Mg==", "bodyText": "Why is this removed?", "url": "https://github.com/apache/ozone/pull/466#discussion_r372092272", "createdAt": "2020-01-28T22:22:39Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/dist/src/main/compose/ozone/docker-compose.yaml", "diffHunk": "@@ -67,6 +67,5 @@ services:\n     ports:\n       - 9888:9888\n     environment:\n-      WAITFOR: om:9874", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2758f46cb7dac0e6f1aaf31d2deef78f42eaa970"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA5MzE5OQ==", "bodyText": "I just stumbled upon this while testing. We no longer need this. Recon can start up anytime and can learn OM and SCM state.", "url": "https://github.com/apache/ozone/pull/466#discussion_r372093199", "createdAt": "2020-01-28T22:25:04Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/dist/src/main/compose/ozone/docker-compose.yaml", "diffHunk": "@@ -67,6 +67,5 @@ services:\n     ports:\n       - 9888:9888\n     environment:\n-      WAITFOR: om:9874", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA5MjI3Mg=="}, "originalCommit": {"oid": "2758f46cb7dac0e6f1aaf31d2deef78f42eaa970"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMDUwMjgyOnYy", "diffSide": "LEFT", "path": "hadoop-ozone/dist/src/main/compose/ozonesecure/docker-compose.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMjoyMjo0OFrOFi2tvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMjoyMjo0OFrOFi2tvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA5MjM0OA==", "bodyText": "Same.", "url": "https://github.com/apache/ozone/pull/466#discussion_r372092348", "createdAt": "2020-01-28T22:22:48Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/dist/src/main/compose/ozonesecure/docker-compose.yaml", "diffHunk": "@@ -79,7 +79,6 @@ services:\n     env_file:\n       - ./docker-config\n     environment:\n-      WAITFOR: om:9874", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2758f46cb7dac0e6f1aaf31d2deef78f42eaa970"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4972, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}