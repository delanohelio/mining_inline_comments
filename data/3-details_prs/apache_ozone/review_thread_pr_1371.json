{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2NzY5NzYz", "number": 1371, "reviewThreads": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNjowNTo1MlrOEh9q0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwODozNDo0N1rOEocIDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDQ4ODQ5OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/protocol/DatanodeDetails.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNjowNTo1MlrOHPkVgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNjowNTo1MlrOHPkVgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA4NjAxOA==", "bodyText": "miss java doc for these public method.", "url": "https://github.com/apache/ozone/pull/1371#discussion_r486086018", "createdAt": "2020-09-10T06:05:52Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/protocol/DatanodeDetails.java", "diffHunk": "@@ -190,6 +195,18 @@ public Port getPort(Port.Name name) {\n     return null;\n   }\n \n+  public int getSuggestedLeaderCount() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b58df38136f0b76262cfc5b6a0fe4282375462d3"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDUxNzM5OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/ratis/RatisHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNjoxNzoyNlrOHPkmSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNjoxNzoyNlrOHPkmSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA5MDMxMw==", "bodyText": "sanity check for peers.size() == priorityList.size()", "url": "https://github.com/apache/ozone/pull/1371#discussion_r486090313", "createdAt": "2020-09-10T06:17:26Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/ratis/RatisHelper.java", "diffHunk": "@@ -125,6 +131,17 @@ private static RaftGroup newRaftGroup(Collection<RaftPeer> peers) {\n         : RaftGroup.valueOf(DUMMY_GROUP_ID, peers);\n   }\n \n+  public static RaftGroup newRaftGroup(RaftGroupId groupId,\n+      List<DatanodeDetails> peers, List<Integer> priorityList) {\n+    final List<RaftPeer> newPeers = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b58df38136f0b76262cfc5b6a0fe4282375462d3"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDUyNjc4OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/scm/pipeline/Pipeline.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNjoyMDo1N1rOHPkruw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNjoyMDo1N1rOHPkruw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA5MTcwNw==", "bodyText": "how about suggestedLeaderId ?", "url": "https://github.com/apache/ozone/pull/1371#discussion_r486091707", "createdAt": "2020-09-10T06:20:57Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/scm/pipeline/Pipeline.java", "diffHunk": "@@ -61,6 +61,7 @@\n   private UUID leaderId;\n   // Timestamp for pipeline upon creation\n   private Instant creationTimestamp;\n+  private UUID suggestedLeader;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b58df38136f0b76262cfc5b6a0fe4282375462d3"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDUyOTQ5OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/scm/pipeline/Pipeline.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNjoyMjowOVrOHPktbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNjoyMjowOVrOHPktbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA5MjE0Mw==", "bodyText": "miss java doc for public method.\nWhy not set suggestedLeader in Ctor and remove the getter/setter ? I guess, it would be final/immutable after creating, just like type/factor.", "url": "https://github.com/apache/ozone/pull/1371#discussion_r486092143", "createdAt": "2020-09-10T06:22:09Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/scm/pipeline/Pipeline.java", "diffHunk": "@@ -123,6 +124,14 @@ public Instant getCreationTimestamp() {\n     return creationTimestamp;\n   }\n \n+  public void setSuggestedLeader(UUID suggestedLeader) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b58df38136f0b76262cfc5b6a0fe4282375462d3"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDU2NzUwOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/statemachine/commandhandler/CreatePipelineCommandHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNjozNjozNFrOHPlEVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNjozNjozNFrOHPlEVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA5ODAwNg==", "bodyText": "increase the counter after successfully created the pipeline ? Might throw exception during the creation.", "url": "https://github.com/apache/ozone/pull/1371#discussion_r486098006", "createdAt": "2020-09-10T06:36:34Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/statemachine/commandhandler/CreatePipelineCommandHandler.java", "diffHunk": "@@ -82,18 +104,22 @@ public void handle(SCMCommand command, OzoneContainer ozoneContainer,\n     final CreatePipelineCommandProto createCommand =\n         ((CreatePipelineCommand)command).getProto();\n     final HddsProtos.PipelineID pipelineID = createCommand.getPipelineID();\n-    final Collection<DatanodeDetails> peers =\n+    final List<DatanodeDetails> peers =\n         createCommand.getDatanodeList().stream()\n             .map(DatanodeDetails::getFromProtoBuf)\n             .collect(Collectors.toList());\n+    final List<Integer> priorityList = createCommand.getPriorityList();\n+\n+    incSuggestedLeaderCount(priorityList, peers, dn);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b58df38136f0b76262cfc5b6a0fe4282375462d3"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDU5ODc2OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/transport/server/ratis/XceiverServerRatis.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNjo0NzoxOFrOHPlXfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNjo0NzoxOFrOHPlXfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjEwMjkxMA==", "bodyText": "List<Integer> priorityList = new ArrayList<>(peers.size()); for (...)\nso that won't be bothered by unused var dn", "url": "https://github.com/apache/ozone/pull/1371#discussion_r486102910", "createdAt": "2020-09-10T06:47:18Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/transport/server/ratis/XceiverServerRatis.java", "diffHunk": "@@ -711,10 +711,23 @@ private long calculatePipelineBytesWritten(HddsProtos.PipelineID pipelineID) {\n \n   @Override\n   public void addGroup(HddsProtos.PipelineID pipelineId,\n-      Collection<DatanodeDetails> peers) throws IOException {\n+      List<DatanodeDetails> peers) throws IOException {\n+    List<Integer> priorityList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b58df38136f0b76262cfc5b6a0fe4282375462d3"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDYwOTYyOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/protocol/commands/CreatePipelineCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNjo1MDo0OFrOHPleBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNjo1MDo0OFrOHPleBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjEwNDU4MQ==", "bodyText": "ditto", "url": "https://github.com/apache/ozone/pull/1371#discussion_r486104581", "createdAt": "2020-09-10T06:50:48Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/protocol/commands/CreatePipelineCommand.java", "diffHunk": "@@ -48,16 +50,34 @@ public CreatePipelineCommand(final PipelineID pipelineID,\n     this.factor = factor;\n     this.type = type;\n     this.nodelist = datanodeList;\n+    this.priorityList = new ArrayList<>();\n+    for (DatanodeDetails dn : datanodeList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b58df38136f0b76262cfc5b6a0fe4282375462d3"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDYzNTYwOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/RatisPipelineProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNjo1OTowMVrOHPltcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNjo1OTowMVrOHPltcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjEwODUyOQ==", "bodyText": "as suggested by idea, range for\nfor (dn : dns)", "url": "https://github.com/apache/ozone/pull/1371#discussion_r486108529", "createdAt": "2020-09-10T06:59:01Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/RatisPipelineProvider.java", "diffHunk": "@@ -98,8 +102,40 @@ private boolean exceedPipelineNumberLimit(ReplicationFactor factor) {\n     return false;\n   }\n \n+  private DatanodeDetails getSuggestedLeader(List<DatanodeDetails> dns) {\n+    int minLeaderCount = Integer.MAX_VALUE;\n+    DatanodeDetails suggestedLeader = null;\n+\n+    for (int i = 0; i < dns.size(); i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b58df38136f0b76262cfc5b6a0fe4282375462d3"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1Njc2MjIwOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/hdds/scm/pipeline/TestRatisPipelineCreateAndDestroy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwOTo1NjozOVrOHR6J9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwOTo1NjozOVrOHR6J9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU0MDY2MA==", "bodyText": "can we remove this commented out lines?", "url": "https://github.com/apache/ozone/pull/1371#discussion_r488540660", "createdAt": "2020-09-15T09:56:39Z", "author": {"login": "bshashikant"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/hdds/scm/pipeline/TestRatisPipelineCreateAndDestroy.java", "diffHunk": "@@ -92,11 +98,128 @@ public void testAutomaticPipelineCreationOnPipelineDestroy()\n     waitForPipelines(2);\n   }\n \n+  private void checkLeaderBalance(int dnNum, int leaderNumOfEachDn)\n+      throws Exception {\n+    List<Pipeline> pipelines = pipelineManager\n+        .getPipelines(HddsProtos.ReplicationType.RATIS,\n+            HddsProtos.ReplicationFactor.THREE, Pipeline.PipelineState.OPEN);\n+\n+    for (Pipeline pipeline : pipelines) {\n+      LambdaTestUtils.await(30000, 500, () ->\n+          pipeline.getLeaderId().equals(pipeline.getSuggestedLeaderId()));\n+    }\n+\n+    Map<UUID, Integer> leaderCount = new HashMap<>();\n+    for (Pipeline pipeline : pipelines) {\n+      UUID leader = pipeline.getLeaderId();\n+      if (!leaderCount.containsKey(leader)) {\n+        leaderCount.put(leader, 0);\n+      }\n+\n+      leaderCount.put(leader, leaderCount.get(leader) + 1);\n+    }\n+\n+    Assert.assertTrue(leaderCount.size() == dnNum);\n+    for (UUID key : leaderCount.keySet()) {\n+      Assert.assertTrue(leaderCount.get(key) == leaderNumOfEachDn);\n+    }\n+  }\n+\n+  @Test(timeout = 360000)\n+  public void testRestoreSuggestedLeader() throws Exception {\n+    conf.setBoolean(OZONE_SCM_PIPELINE_AUTO_CREATE_FACTOR_ONE, false);\n+    int dnNum = 3;\n+    int dnPipelineLimit = 3;\n+    int leaderNumOfEachDn = dnPipelineLimit / dnNum;\n+    int pipelineNum = 3;\n+\n+    init(dnNum, dnPipelineLimit);\n+    // make sure two pipelines are created\n+    waitForPipelines(pipelineNum);\n+    // No Factor ONE pipeline is auto created.\n+    Assert.assertEquals(0, pipelineManager.getPipelines(\n+        HddsProtos.ReplicationType.RATIS,\n+        HddsProtos.ReplicationFactor.ONE).size());\n+\n+    // pipelineNum pipelines in 3 datanodes,\n+    // each datanode has leaderNumOfEachDn leaders after balance\n+    checkLeaderBalance(dnNum, leaderNumOfEachDn);\n+    List<Pipeline> pipelinesBeforeRestart =\n+        cluster.getStorageContainerManager().getPipelineManager()\n+            .getPipelines();\n+\n+    cluster.restartStorageContainerManager(true);\n+\n+    checkLeaderBalance(dnNum, leaderNumOfEachDn);\n+    List<Pipeline> pipelinesAfterRestart =\n+        cluster.getStorageContainerManager().getPipelineManager()\n+            .getPipelines();\n+\n+    Assert.assertEquals(\n+        pipelinesBeforeRestart.size(), pipelinesAfterRestart.size());\n+\n+    for (Pipeline p : pipelinesBeforeRestart) {\n+      boolean equal = false;\n+      for (Pipeline q : pipelinesAfterRestart) {\n+        if (p.getId().equals(q.getId())\n+            && p.getSuggestedLeaderId().equals(q.getSuggestedLeaderId())) {\n+          equal = true;\n+        }\n+      }\n+\n+      Assert.assertTrue(equal);\n+    }\n+  }\n+\n+  @Test(timeout = 360000)\n+  public void testPipelineLeaderBalance() throws Exception {\n+    conf.setBoolean(OZONE_SCM_PIPELINE_AUTO_CREATE_FACTOR_ONE, false);\n+    int dnNum = 3;\n+    int dnPipelineLimit = 3;\n+    int leaderNumOfEachDn = dnPipelineLimit / dnNum;\n+    int pipelineNum = 3;\n+\n+    init(dnNum, dnPipelineLimit);\n+    // make sure two pipelines are created\n+    waitForPipelines(pipelineNum);\n+    // No Factor ONE pipeline is auto created.\n+    Assert.assertEquals(0, pipelineManager.getPipelines(\n+        HddsProtos.ReplicationType.RATIS,\n+        HddsProtos.ReplicationFactor.ONE).size());\n+\n+    // pipelineNum pipelines in 3 datanodes,\n+    // each datanode has leaderNumOfEachDn leaders after balance\n+    checkLeaderBalance(dnNum, leaderNumOfEachDn);\n+\n+    //cluster.restartStorageContainerManager(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1a7f4e22dd8b1cdf16f839b3678acadf534ec30"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1Njc3Nzk4OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/RatisPipelineProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMDowMDozNFrOHR6TZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwOToyNjozM1rOHVxoXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU0MzA3OQ==", "bodyText": "I think suggested leader selection can be made a policy driven change.\n\ndefault policy can be Min leader election count\nIt can also be driven by factors like memory/resource availability on a datanode\nCan be determined by the topology as well. The node nearest to the client can be made the leader .\n\nIts better to make it a pluggable model like this.", "url": "https://github.com/apache/ozone/pull/1371#discussion_r488543079", "createdAt": "2020-09-15T10:00:34Z", "author": {"login": "bshashikant"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/RatisPipelineProvider.java", "diffHunk": "@@ -98,8 +105,65 @@ private boolean exceedPipelineNumberLimit(ReplicationFactor factor) {\n     return false;\n   }\n \n+  private Map<DatanodeDetails, Integer> getSuggestedLeaderCount(\n+      List<DatanodeDetails> dns) {\n+    Map<DatanodeDetails, Integer> suggestedLeaderCount = new HashMap<>();\n+    for (DatanodeDetails dn : dns) {\n+      suggestedLeaderCount.put(dn, 0);\n+\n+      Set<PipelineID> pipelineIDSet = getNodeManager().getPipelines(dn);\n+      for (PipelineID pipelineID : pipelineIDSet) {\n+        try {\n+          Pipeline pipeline = getPipelineStateManager().getPipeline(pipelineID);\n+          if (!pipeline.isClosed()\n+              && dn.getUuid().equals(pipeline.getSuggestedLeaderId())) {\n+            suggestedLeaderCount.put(dn, suggestedLeaderCount.get(dn) + 1);\n+          }\n+        } catch (PipelineNotFoundException e) {\n+          LOG.debug(\"Pipeline not found in pipeline state manager : {}\",\n+              pipelineID, e);\n+        }\n+      }\n+    }\n+\n+    return suggestedLeaderCount;\n+  }\n+\n+  private DatanodeDetails getSuggestedLeader(List<DatanodeDetails> dns) {\n+    Map<DatanodeDetails, Integer> suggestedLeaderCount =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1a7f4e22dd8b1cdf16f839b3678acadf534ec30"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU5NTI5NA==", "bodyText": "@bshashikant I agree. @xiaoyuyao What do you think of this suggestion?", "url": "https://github.com/apache/ozone/pull/1371#discussion_r492595294", "createdAt": "2020-09-22T09:26:33Z", "author": {"login": "runzhiwang"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/RatisPipelineProvider.java", "diffHunk": "@@ -98,8 +105,65 @@ private boolean exceedPipelineNumberLimit(ReplicationFactor factor) {\n     return false;\n   }\n \n+  private Map<DatanodeDetails, Integer> getSuggestedLeaderCount(\n+      List<DatanodeDetails> dns) {\n+    Map<DatanodeDetails, Integer> suggestedLeaderCount = new HashMap<>();\n+    for (DatanodeDetails dn : dns) {\n+      suggestedLeaderCount.put(dn, 0);\n+\n+      Set<PipelineID> pipelineIDSet = getNodeManager().getPipelines(dn);\n+      for (PipelineID pipelineID : pipelineIDSet) {\n+        try {\n+          Pipeline pipeline = getPipelineStateManager().getPipeline(pipelineID);\n+          if (!pipeline.isClosed()\n+              && dn.getUuid().equals(pipeline.getSuggestedLeaderId())) {\n+            suggestedLeaderCount.put(dn, suggestedLeaderCount.get(dn) + 1);\n+          }\n+        } catch (PipelineNotFoundException e) {\n+          LOG.debug(\"Pipeline not found in pipeline state manager : {}\",\n+              pipelineID, e);\n+        }\n+      }\n+    }\n+\n+    return suggestedLeaderCount;\n+  }\n+\n+  private DatanodeDetails getSuggestedLeader(List<DatanodeDetails> dns) {\n+    Map<DatanodeDetails, Integer> suggestedLeaderCount =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU0MzA3OQ=="}, "originalCommit": {"oid": "a1a7f4e22dd8b1cdf16f839b3678acadf534ec30"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDQ3NzIxOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/transport/server/ratis/XceiverServerRatis.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMTo0NDoxNFrOHTFTdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMDozMjoxOFrOHTIogQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3MTg5Mw==", "bodyText": "NIT: can we have a static default priority list here?", "url": "https://github.com/apache/ozone/pull/1371#discussion_r489771893", "createdAt": "2020-09-16T21:44:14Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/transport/server/ratis/XceiverServerRatis.java", "diffHunk": "@@ -711,10 +712,20 @@ private long calculatePipelineBytesWritten(HddsProtos.PipelineID pipelineID) {\n \n   @Override\n   public void addGroup(HddsProtos.PipelineID pipelineId,\n-      Collection<DatanodeDetails> peers) throws IOException {\n+      List<DatanodeDetails> peers) throws IOException {\n+    List<Integer> priorityList =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1a7f4e22dd8b1cdf16f839b3678acadf534ec30"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgyNjQzMw==", "bodyText": "Updated", "url": "https://github.com/apache/ozone/pull/1371#discussion_r489826433", "createdAt": "2020-09-17T00:32:18Z", "author": {"login": "runzhiwang"}, "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/transport/server/ratis/XceiverServerRatis.java", "diffHunk": "@@ -711,10 +712,20 @@ private long calculatePipelineBytesWritten(HddsProtos.PipelineID pipelineID) {\n \n   @Override\n   public void addGroup(HddsProtos.PipelineID pipelineId,\n-      Collection<DatanodeDetails> peers) throws IOException {\n+      List<DatanodeDetails> peers) throws IOException {\n+    List<Integer> priorityList =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3MTg5Mw=="}, "originalCommit": {"oid": "a1a7f4e22dd8b1cdf16f839b3678acadf534ec30"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDUxNjkyOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/RatisPipelineProvider.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMTo1ODo0NlrOHTFrjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMDoyNDo0OVrOHVmvnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3ODA2Mg==", "bodyText": "should we use getLeaderId() instead of getSuggestedLeaderId() here to reflect the actual leader count?", "url": "https://github.com/apache/ozone/pull/1371#discussion_r489778062", "createdAt": "2020-09-16T21:58:46Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/RatisPipelineProvider.java", "diffHunk": "@@ -98,8 +105,65 @@ private boolean exceedPipelineNumberLimit(ReplicationFactor factor) {\n     return false;\n   }\n \n+  private Map<DatanodeDetails, Integer> getSuggestedLeaderCount(\n+      List<DatanodeDetails> dns) {\n+    Map<DatanodeDetails, Integer> suggestedLeaderCount = new HashMap<>();\n+    for (DatanodeDetails dn : dns) {\n+      suggestedLeaderCount.put(dn, 0);\n+\n+      Set<PipelineID> pipelineIDSet = getNodeManager().getPipelines(dn);\n+      for (PipelineID pipelineID : pipelineIDSet) {\n+        try {\n+          Pipeline pipeline = getPipelineStateManager().getPipeline(pipelineID);\n+          if (!pipeline.isClosed()\n+              && dn.getUuid().equals(pipeline.getSuggestedLeaderId())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1a7f4e22dd8b1cdf16f839b3678acadf534ec30"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3OTM0OQ==", "bodyText": "And the method name can be changed to getLeaderCount() so that the suggest leader is determined by the actual leader count.", "url": "https://github.com/apache/ozone/pull/1371#discussion_r489779349", "createdAt": "2020-09-16T22:02:01Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/RatisPipelineProvider.java", "diffHunk": "@@ -98,8 +105,65 @@ private boolean exceedPipelineNumberLimit(ReplicationFactor factor) {\n     return false;\n   }\n \n+  private Map<DatanodeDetails, Integer> getSuggestedLeaderCount(\n+      List<DatanodeDetails> dns) {\n+    Map<DatanodeDetails, Integer> suggestedLeaderCount = new HashMap<>();\n+    for (DatanodeDetails dn : dns) {\n+      suggestedLeaderCount.put(dn, 0);\n+\n+      Set<PipelineID> pipelineIDSet = getNodeManager().getPipelines(dn);\n+      for (PipelineID pipelineID : pipelineIDSet) {\n+        try {\n+          Pipeline pipeline = getPipelineStateManager().getPipeline(pipelineID);\n+          if (!pipeline.isClosed()\n+              && dn.getUuid().equals(pipeline.getSuggestedLeaderId())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3ODA2Mg=="}, "originalCommit": {"oid": "a1a7f4e22dd8b1cdf16f839b3678acadf534ec30"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgzMzEzNg==", "bodyText": "RATIS-967 guarantee the highpriority node act as leader when create pipeline. In a long running cluster, the leader maybe crash, then some follower will take the leadership, but when the old leader restart and catch up with current leader's log, the old leader can grab the leadership again by RATIS-967.\nSo let me suppose the following case, there are 3 servers: s1, s2, s3, there are 2 pipelines now,  the first pipeline's leader is s1, the second pipeline's leader is s2, both the 2 leaders are suggested leader with high priority. Then s1 crash, suppose s3 will take the first pipline's leader.  Then s1 restart, but has not grab leadership of the first pipeline. If we use getLeaderId() instead of getSuggestedLeaderId() to reflect the actual leader count, when we create the 3 third pipeline, we find the leader number on s1, s2, s3 is 0, 1, 1, so we will select s1 as the suggest leader,  then s1 grab the leadership of the first pipeline by RATIS-967, so the leader number on s1, s2, s3 will be 2, 1, 0, it's not balance.", "url": "https://github.com/apache/ozone/pull/1371#discussion_r489833136", "createdAt": "2020-09-17T00:53:54Z", "author": {"login": "runzhiwang"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/RatisPipelineProvider.java", "diffHunk": "@@ -98,8 +105,65 @@ private boolean exceedPipelineNumberLimit(ReplicationFactor factor) {\n     return false;\n   }\n \n+  private Map<DatanodeDetails, Integer> getSuggestedLeaderCount(\n+      List<DatanodeDetails> dns) {\n+    Map<DatanodeDetails, Integer> suggestedLeaderCount = new HashMap<>();\n+    for (DatanodeDetails dn : dns) {\n+      suggestedLeaderCount.put(dn, 0);\n+\n+      Set<PipelineID> pipelineIDSet = getNodeManager().getPipelines(dn);\n+      for (PipelineID pipelineID : pipelineIDSet) {\n+        try {\n+          Pipeline pipeline = getPipelineStateManager().getPipeline(pipelineID);\n+          if (!pipeline.isClosed()\n+              && dn.getUuid().equals(pipeline.getSuggestedLeaderId())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3ODA2Mg=="}, "originalCommit": {"oid": "a1a7f4e22dd8b1cdf16f839b3678acadf534ec30"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY2Njg3Mg==", "bodyText": "bq.  then s1 grab the leadership of the first pipeline by RATIS-967,\nDoes RATIS-967 always gives up its leader when s1 is back online even the current leader works fine? I think this is more specific to RATIS-967 wrt. how the priority is enforced. Any performance impact on the pipeline of forcing leader to be the original one?\nI'm thinking of instead of forcing leader of pipeline P1, P2, P3 like\nS1   S2   S3\nP1   P2\nP3\nIn the case of S1 temporarily down, why don't we keep P1 leader on S3 and create P3 with leader on S1, this gives more flexibility for higher level to choose leader?\nS1   S2   S3\nP2\nP1\nP3\nAnother situation I'm thinking of is writers on pipeline with slow leader(e.g., hardware slowness) may not be able to recover by leader change.", "url": "https://github.com/apache/ozone/pull/1371#discussion_r490666872", "createdAt": "2020-09-18T02:38:03Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/RatisPipelineProvider.java", "diffHunk": "@@ -98,8 +105,65 @@ private boolean exceedPipelineNumberLimit(ReplicationFactor factor) {\n     return false;\n   }\n \n+  private Map<DatanodeDetails, Integer> getSuggestedLeaderCount(\n+      List<DatanodeDetails> dns) {\n+    Map<DatanodeDetails, Integer> suggestedLeaderCount = new HashMap<>();\n+    for (DatanodeDetails dn : dns) {\n+      suggestedLeaderCount.put(dn, 0);\n+\n+      Set<PipelineID> pipelineIDSet = getNodeManager().getPipelines(dn);\n+      for (PipelineID pipelineID : pipelineIDSet) {\n+        try {\n+          Pipeline pipeline = getPipelineStateManager().getPipeline(pipelineID);\n+          if (!pipeline.isClosed()\n+              && dn.getUuid().equals(pipeline.getSuggestedLeaderId())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3ODA2Mg=="}, "originalCommit": {"oid": "a1a7f4e22dd8b1cdf16f839b3678acadf534ec30"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY3NTM3NA==", "bodyText": "@xiaoyuyao Good point, I also have thought this.\n\nAny performance impact on the pipeline of forcing leader to be the original one.\n\nIf there is performance problem, I can improve forcing leader change within 1 second. I already know how to improve it, but has not implemented it.\n\nAnother situation I'm thinking of is writers on pipeline with slow leader(e.g., hardware slowness) may not be able to recover by leader change.\n\nWe can find slow leader by some metric, decrease the priority of the slow leader, select one faster datanode and increase it's priority, so the faster datanode will grab the leadership from the slow leader.\n\nIn the case of S1 temporarily down, why don't we keep P1 leader on S3 and create P3 with leader on S1, this gives more flexibility for higher level to choose leader?\n\nI want the cluster leader distribution as we planned, if the plan is not appropriate, we can adjust the plan by change priority.\nIf the leader distribution totally depends on hardware rather than plan, we maybe lost control of the leader distribution. Because the leaderId in scm was reported by datanode, it maybe a delayed leaderId. For example, datanode report:\nS1  ..  S2 ..   S3\nP1  ..  P2\nthen P1's leader transfer to S3, but SCM has not received this report, SCM allocate P3's leader to S3, then\nS1 .. S2 .. S3\n........P2 ..  P1\n...............P3\nIt's not balance now.", "url": "https://github.com/apache/ozone/pull/1371#discussion_r490675374", "createdAt": "2020-09-18T03:12:43Z", "author": {"login": "runzhiwang"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/RatisPipelineProvider.java", "diffHunk": "@@ -98,8 +105,65 @@ private boolean exceedPipelineNumberLimit(ReplicationFactor factor) {\n     return false;\n   }\n \n+  private Map<DatanodeDetails, Integer> getSuggestedLeaderCount(\n+      List<DatanodeDetails> dns) {\n+    Map<DatanodeDetails, Integer> suggestedLeaderCount = new HashMap<>();\n+    for (DatanodeDetails dn : dns) {\n+      suggestedLeaderCount.put(dn, 0);\n+\n+      Set<PipelineID> pipelineIDSet = getNodeManager().getPipelines(dn);\n+      for (PipelineID pipelineID : pipelineIDSet) {\n+        try {\n+          Pipeline pipeline = getPipelineStateManager().getPipeline(pipelineID);\n+          if (!pipeline.isClosed()\n+              && dn.getUuid().equals(pipeline.getSuggestedLeaderId())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3ODA2Mg=="}, "originalCommit": {"oid": "a1a7f4e22dd8b1cdf16f839b3678acadf534ec30"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxODMwMg==", "bodyText": "Good point, planed leader distribution should work with RATIS-967. How do we scale with this. Plan weight for each of node as a leader when the cluster has thousands of nodes can be difficult.", "url": "https://github.com/apache/ozone/pull/1371#discussion_r492218302", "createdAt": "2020-09-21T17:11:33Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/RatisPipelineProvider.java", "diffHunk": "@@ -98,8 +105,65 @@ private boolean exceedPipelineNumberLimit(ReplicationFactor factor) {\n     return false;\n   }\n \n+  private Map<DatanodeDetails, Integer> getSuggestedLeaderCount(\n+      List<DatanodeDetails> dns) {\n+    Map<DatanodeDetails, Integer> suggestedLeaderCount = new HashMap<>();\n+    for (DatanodeDetails dn : dns) {\n+      suggestedLeaderCount.put(dn, 0);\n+\n+      Set<PipelineID> pipelineIDSet = getNodeManager().getPipelines(dn);\n+      for (PipelineID pipelineID : pipelineIDSet) {\n+        try {\n+          Pipeline pipeline = getPipelineStateManager().getPipeline(pipelineID);\n+          if (!pipeline.isClosed()\n+              && dn.getUuid().equals(pipeline.getSuggestedLeaderId())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3ODA2Mg=="}, "originalCommit": {"oid": "a1a7f4e22dd8b1cdf16f839b3678acadf534ec30"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQxNjkyNQ==", "bodyText": "Plan weight for each of node as a leader when the cluster has thousands of nodes can be difficult.\n\nIf each node has similar hardware, i.e. CPU, memory, we just plan weight as now, assign each node with same leader number, it is cheap and reasonable.\nI think the only case we need to consider is that some nodes' hardware is weaker than other nodes' obviously.  I think the weeker datanodes should engage in less pipeline than the stronger datanodes,  but ozone does not support this now. If we can support this, the maxum leader number of each datanode should be less or equal to ((1/3) * the pipeline number it engaged in),  and we select the datanode as the leader which has lowest value of (leader number / pipeline number it engaged in) in 3 datanodes,  this is also cheap. We can change this if there is requirement in the future, but now it is enough to allocate the same leader number in each datanode.", "url": "https://github.com/apache/ozone/pull/1371#discussion_r492416925", "createdAt": "2020-09-22T00:24:49Z", "author": {"login": "runzhiwang"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/RatisPipelineProvider.java", "diffHunk": "@@ -98,8 +105,65 @@ private boolean exceedPipelineNumberLimit(ReplicationFactor factor) {\n     return false;\n   }\n \n+  private Map<DatanodeDetails, Integer> getSuggestedLeaderCount(\n+      List<DatanodeDetails> dns) {\n+    Map<DatanodeDetails, Integer> suggestedLeaderCount = new HashMap<>();\n+    for (DatanodeDetails dn : dns) {\n+      suggestedLeaderCount.put(dn, 0);\n+\n+      Set<PipelineID> pipelineIDSet = getNodeManager().getPipelines(dn);\n+      for (PipelineID pipelineID : pipelineIDSet) {\n+        try {\n+          Pipeline pipeline = getPipelineStateManager().getPipeline(pipelineID);\n+          if (!pipeline.isClosed()\n+              && dn.getUuid().equals(pipeline.getSuggestedLeaderId())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3ODA2Mg=="}, "originalCommit": {"oid": "a1a7f4e22dd8b1cdf16f839b3678acadf534ec30"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDUzMzM2OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/RatisPipelineProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMjowNTo0M1rOHTF1wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMDozMzoyOFrOHTIpyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4MDY3NA==", "bodyText": "Does Ratis have guarantee to have the highpriority node act as leader?", "url": "https://github.com/apache/ozone/pull/1371#discussion_r489780674", "createdAt": "2020-09-16T22:05:43Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/RatisPipelineProvider.java", "diffHunk": "@@ -98,8 +105,65 @@ private boolean exceedPipelineNumberLimit(ReplicationFactor factor) {\n     return false;\n   }\n \n+  private Map<DatanodeDetails, Integer> getSuggestedLeaderCount(\n+      List<DatanodeDetails> dns) {\n+    Map<DatanodeDetails, Integer> suggestedLeaderCount = new HashMap<>();\n+    for (DatanodeDetails dn : dns) {\n+      suggestedLeaderCount.put(dn, 0);\n+\n+      Set<PipelineID> pipelineIDSet = getNodeManager().getPipelines(dn);\n+      for (PipelineID pipelineID : pipelineIDSet) {\n+        try {\n+          Pipeline pipeline = getPipelineStateManager().getPipeline(pipelineID);\n+          if (!pipeline.isClosed()\n+              && dn.getUuid().equals(pipeline.getSuggestedLeaderId())) {\n+            suggestedLeaderCount.put(dn, suggestedLeaderCount.get(dn) + 1);\n+          }\n+        } catch (PipelineNotFoundException e) {\n+          LOG.debug(\"Pipeline not found in pipeline state manager : {}\",\n+              pipelineID, e);\n+        }\n+      }\n+    }\n+\n+    return suggestedLeaderCount;\n+  }\n+\n+  private DatanodeDetails getSuggestedLeader(List<DatanodeDetails> dns) {\n+    Map<DatanodeDetails, Integer> suggestedLeaderCount =\n+        getSuggestedLeaderCount(dns);\n+    int minLeaderCount = Integer.MAX_VALUE;\n+    DatanodeDetails suggestedLeader = null;\n+\n+    for (Map.Entry<DatanodeDetails, Integer> entry :\n+        suggestedLeaderCount.entrySet()) {\n+      if (entry.getValue() < minLeaderCount) {\n+        minLeaderCount = entry.getValue();\n+        suggestedLeader = entry.getKey();\n+      }\n+    }\n+\n+    return suggestedLeader;\n+  }\n+\n+  private List<Integer> getPriorityList(\n+      List<DatanodeDetails> dns, DatanodeDetails suggestedLeader) {\n+    List<Integer> priorityList = new ArrayList<>();\n+\n+    for (DatanodeDetails dn : dns) {\n+      if (dn.getUuid().equals(suggestedLeader.getUuid())) {\n+        priorityList.add(HIGH_PRIORITY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1a7f4e22dd8b1cdf16f839b3678acadf534ec30"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgyNjc2MA==", "bodyText": "Yes, RATIS-967 guarantee the highpriority node act as leader", "url": "https://github.com/apache/ozone/pull/1371#discussion_r489826760", "createdAt": "2020-09-17T00:33:28Z", "author": {"login": "runzhiwang"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/RatisPipelineProvider.java", "diffHunk": "@@ -98,8 +105,65 @@ private boolean exceedPipelineNumberLimit(ReplicationFactor factor) {\n     return false;\n   }\n \n+  private Map<DatanodeDetails, Integer> getSuggestedLeaderCount(\n+      List<DatanodeDetails> dns) {\n+    Map<DatanodeDetails, Integer> suggestedLeaderCount = new HashMap<>();\n+    for (DatanodeDetails dn : dns) {\n+      suggestedLeaderCount.put(dn, 0);\n+\n+      Set<PipelineID> pipelineIDSet = getNodeManager().getPipelines(dn);\n+      for (PipelineID pipelineID : pipelineIDSet) {\n+        try {\n+          Pipeline pipeline = getPipelineStateManager().getPipeline(pipelineID);\n+          if (!pipeline.isClosed()\n+              && dn.getUuid().equals(pipeline.getSuggestedLeaderId())) {\n+            suggestedLeaderCount.put(dn, suggestedLeaderCount.get(dn) + 1);\n+          }\n+        } catch (PipelineNotFoundException e) {\n+          LOG.debug(\"Pipeline not found in pipeline state manager : {}\",\n+              pipelineID, e);\n+        }\n+      }\n+    }\n+\n+    return suggestedLeaderCount;\n+  }\n+\n+  private DatanodeDetails getSuggestedLeader(List<DatanodeDetails> dns) {\n+    Map<DatanodeDetails, Integer> suggestedLeaderCount =\n+        getSuggestedLeaderCount(dns);\n+    int minLeaderCount = Integer.MAX_VALUE;\n+    DatanodeDetails suggestedLeader = null;\n+\n+    for (Map.Entry<DatanodeDetails, Integer> entry :\n+        suggestedLeaderCount.entrySet()) {\n+      if (entry.getValue() < minLeaderCount) {\n+        minLeaderCount = entry.getValue();\n+        suggestedLeader = entry.getKey();\n+      }\n+    }\n+\n+    return suggestedLeader;\n+  }\n+\n+  private List<Integer> getPriorityList(\n+      List<DatanodeDetails> dns, DatanodeDetails suggestedLeader) {\n+    List<Integer> priorityList = new ArrayList<>();\n+\n+    for (DatanodeDetails dn : dns) {\n+      if (dn.getUuid().equals(suggestedLeader.getUuid())) {\n+        priorityList.add(HIGH_PRIORITY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4MDY3NA=="}, "originalCommit": {"oid": "a1a7f4e22dd8b1cdf16f839b3678acadf534ec30"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDUzOTI1OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/TestMiniOzoneCluster.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMjowODowNVrOHTF5cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMDozNjowM1rOHTIsiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4MTYxNg==", "bodyText": "Does the new logic cause more timeout without increasing this?", "url": "https://github.com/apache/ozone/pull/1371#discussion_r489781616", "createdAt": "2020-09-16T22:08:05Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/TestMiniOzoneCluster.java", "diffHunk": "@@ -102,7 +102,7 @@ public static void afterClass() {\n     FileUtils.deleteQuietly(READ_TMP);\n   }\n \n-  @Test(timeout = 30000)\n+  @Test(timeout = 60000)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1a7f4e22dd8b1cdf16f839b3678acadf534ec30"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgyNzQ2Nw==", "bodyText": "Yes, the highpriority node act as leader will increase the time of leader election,  but almost the increased time is within 10 seconds.", "url": "https://github.com/apache/ozone/pull/1371#discussion_r489827467", "createdAt": "2020-09-17T00:36:03Z", "author": {"login": "runzhiwang"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/TestMiniOzoneCluster.java", "diffHunk": "@@ -102,7 +102,7 @@ public static void afterClass() {\n     FileUtils.deleteQuietly(READ_TMP);\n   }\n \n-  @Test(timeout = 30000)\n+  @Test(timeout = 60000)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4MTYxNg=="}, "originalCommit": {"oid": "a1a7f4e22dd8b1cdf16f839b3678acadf534ec30"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODA4OTAwOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/scm/pipeline/Pipeline.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNzo0MDoyMFrOHZe5ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNzo0MDoyMFrOHZe5ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ4Mjc0Ng==", "bodyText": "Return the suggested leaderId which has a high priority among DNs of the pipeline.", "url": "https://github.com/apache/ozone/pull/1371#discussion_r496482746", "createdAt": "2020-09-29T07:40:20Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/scm/pipeline/Pipeline.java", "diffHunk": "@@ -123,6 +126,15 @@ public Instant getCreationTimestamp() {\n     return creationTimestamp;\n   }\n \n+  /**\n+   * Return the suggested leaderId with high priority of pipeline.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "317591ba9b3ab855305ad9095381001be4ae298c"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODE1MDAwOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/transport/server/ratis/XceiverServerRatis.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNzo1NjozM1rOHZff1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMTowMTo0M1rOHZnxtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ5MjUwMg==", "bodyText": "why we need this DEFAULT_PRIORITY_LIST ?\nAt all the locations it appears, it dn number does not equal to it, you always create a new list.\nSuggest to remove this static var.", "url": "https://github.com/apache/ozone/pull/1371#discussion_r496492502", "createdAt": "2020-09-29T07:56:33Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/transport/server/ratis/XceiverServerRatis.java", "diffHunk": "@@ -115,6 +116,9 @@\n   private static final Logger LOG = LoggerFactory\n       .getLogger(XceiverServerRatis.class);\n   private static final AtomicLong CALL_ID_COUNTER = new AtomicLong();\n+  public static final List<Integer> DEFAULT_PRIORITY_LIST =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "317591ba9b3ab855305ad9095381001be4ae298c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYyODE0OA==", "bodyText": "why always create a new list ? The size of DEFAULT_PRIORITY_LIST is 3, most case the size of datanode list is 3, their size are equal.", "url": "https://github.com/apache/ozone/pull/1371#discussion_r496628148", "createdAt": "2020-09-29T11:01:43Z", "author": {"login": "runzhiwang"}, "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/transport/server/ratis/XceiverServerRatis.java", "diffHunk": "@@ -115,6 +116,9 @@\n   private static final Logger LOG = LoggerFactory\n       .getLogger(XceiverServerRatis.class);\n   private static final AtomicLong CALL_ID_COUNTER = new AtomicLong();\n+  public static final List<Integer> DEFAULT_PRIORITY_LIST =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ5MjUwMg=="}, "originalCommit": {"oid": "317591ba9b3ab855305ad9095381001be4ae298c"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODE3MzQwOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/protocol/commands/CreatePipelineCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwODowMDoyNFrOHZfvkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMTowMjoxOFrOHZnyyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ5NjUzMQ==", "bodyText": "just forward to the Ctor with priorityList .\nthis(pipelineID, factor, type, datanodeList,\n    new ArrayList<>(Collections.nCopies(datanodeList.size(), 0))", "url": "https://github.com/apache/ozone/pull/1371#discussion_r496496531", "createdAt": "2020-09-29T08:00:24Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/protocol/commands/CreatePipelineCommand.java", "diffHunk": "@@ -48,16 +52,37 @@ public CreatePipelineCommand(final PipelineID pipelineID,\n     this.factor = factor;\n     this.type = type;\n     this.nodelist = datanodeList;\n+    if (datanodeList.size() ==\n+        XceiverServerRatis.DEFAULT_PRIORITY_LIST.size()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "317591ba9b3ab855305ad9095381001be4ae298c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYyODQyNA==", "bodyText": "always new is a waste.", "url": "https://github.com/apache/ozone/pull/1371#discussion_r496628424", "createdAt": "2020-09-29T11:02:18Z", "author": {"login": "runzhiwang"}, "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/protocol/commands/CreatePipelineCommand.java", "diffHunk": "@@ -48,16 +52,37 @@ public CreatePipelineCommand(final PipelineID pipelineID,\n     this.factor = factor;\n     this.type = type;\n     this.nodelist = datanodeList;\n+    if (datanodeList.size() ==\n+        XceiverServerRatis.DEFAULT_PRIORITY_LIST.size()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ5NjUzMQ=="}, "originalCommit": {"oid": "317591ba9b3ab855305ad9095381001be4ae298c"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODE5MjAxOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelineStateManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwODowMzoyNVrOHZf76A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDo1NDo1NlrOHZni4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ5OTY4OA==", "bodyText": "revert unnecessary change.", "url": "https://github.com/apache/ozone/pull/1371#discussion_r496499688", "createdAt": "2020-09-29T08:03:25Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelineStateManager.java", "diffHunk": "@@ -59,7 +59,8 @@ void addContainerToPipeline(PipelineID pipelineId, ContainerID containerID)\n     pipelineStateMap.addContainerToPipeline(pipelineId, containerID);\n   }\n \n-  Pipeline getPipeline(PipelineID pipelineID) throws PipelineNotFoundException {\n+  public Pipeline getPipeline(PipelineID pipelineID)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "317591ba9b3ab855305ad9095381001be4ae298c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYyNDM1Mw==", "bodyText": "This is necessary, otherwise we can not call getPipeline in MinLeaderCountChoosePolicy", "url": "https://github.com/apache/ozone/pull/1371#discussion_r496624353", "createdAt": "2020-09-29T10:54:56Z", "author": {"login": "runzhiwang"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelineStateManager.java", "diffHunk": "@@ -59,7 +59,8 @@ void addContainerToPipeline(PipelineID pipelineId, ContainerID containerID)\n     pipelineStateMap.addContainerToPipeline(pipelineId, containerID);\n   }\n \n-  Pipeline getPipeline(PipelineID pipelineID) throws PipelineNotFoundException {\n+  public Pipeline getPipeline(PipelineID pipelineID)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ5OTY4OA=="}, "originalCommit": {"oid": "317591ba9b3ab855305ad9095381001be4ae298c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODIzOTA2OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/RatisPipelineProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwODoxMDo1M1rOHZgaQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwODoxMDo1M1rOHZgaQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUwNzQ1Ng==", "bodyText": "why not use DatanodeDetails.equals() ?", "url": "https://github.com/apache/ozone/pull/1371#discussion_r496507456", "createdAt": "2020-09-29T08:10:53Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/RatisPipelineProvider.java", "diffHunk": "@@ -98,8 +115,28 @@ private boolean exceedPipelineNumberLimit(ReplicationFactor factor) {\n     return false;\n   }\n \n+  @VisibleForTesting\n+  public LeaderChoosePolicy getLeaderChoosePolicy() {\n+    return leaderChoosePolicy;\n+  }\n+  private List<Integer> getPriorityList(\n+      List<DatanodeDetails> dns, DatanodeDetails suggestedLeader) {\n+    List<Integer> priorityList = new ArrayList<>();\n+\n+    for (DatanodeDetails dn : dns) {\n+      if (dn.getUuid().equals(suggestedLeader.getUuid())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "317591ba9b3ab855305ad9095381001be4ae298c"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODI2NTU4OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/RatisPipelineProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwODoxNTowNVrOHZgsVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwODoxNTowNVrOHZgsVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUxMjA4Ng==", "bodyText": "make node manager and pipeline manager be member of leaderChoosePolicy, so that leaderChoosePolicy can has it own state, which will make future extension easier.", "url": "https://github.com/apache/ozone/pull/1371#discussion_r496512086", "createdAt": "2020-09-29T08:15:05Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/RatisPipelineProvider.java", "diffHunk": "@@ -121,18 +158,24 @@ public Pipeline create(ReplicationFactor factor) throws IOException {\n       throw new IllegalStateException(\"Unknown factor: \" + factor.name());\n     }\n \n+    DatanodeDetails suggestedLeader = leaderChoosePolicy.chooseLeader(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "317591ba9b3ab855305ad9095381001be4ae298c"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODI4MjgwOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/SCMPipelineManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwODoxNzo0MVrOHZg3dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwODoxNzo0MVrOHZg3dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUxNDkzMg==", "bodyText": "why need this change ?  The sequence of sending SCMCommand and removing state may affect SCM HA.", "url": "https://github.com/apache/ozone/pull/1371#discussion_r496514932", "createdAt": "2020-09-29T08:17:41Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/SCMPipelineManager.java", "diffHunk": "@@ -619,9 +619,9 @@ private void finalizePipeline(PipelineID pipelineId) throws IOException {\n    * @throws IOException\n    */\n   protected void destroyPipeline(Pipeline pipeline) throws IOException {\n-    pipelineFactory.close(pipeline.getType(), pipeline);\n     // remove the pipeline from the pipeline manager\n     removePipeline(pipeline.getId());\n+    pipelineFactory.close(pipeline.getType(), pipeline);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "317591ba9b3ab855305ad9095381001be4ae298c"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODM5MzExOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/protocol/commands/CreatePipelineCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwODozNDo0N1rOHZiADA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwODozNDo0N1rOHZiADA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUzMzUxNg==", "bodyText": "I consider that, should move RatisPipelineProvider.getPriorityList(), HIGH_PRIORITY, LOW_PRIORITY here, and replace priorityList in Ctor param as suggestedLeader.\nWe can minimize the existence of priorityList, and the calculation logic of priority in RatisPipelineProvider is a little bit weird.", "url": "https://github.com/apache/ozone/pull/1371#discussion_r496533516", "createdAt": "2020-09-29T08:34:47Z", "author": {"login": "GlenGeng"}, "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/protocol/commands/CreatePipelineCommand.java", "diffHunk": "@@ -39,6 +42,7 @@\n   private final ReplicationFactor factor;\n   private final ReplicationType type;\n   private final List<DatanodeDetails> nodelist;\n+  private final List<Integer> priorityList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "317591ba9b3ab855305ad9095381001be4ae298c"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4817, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}