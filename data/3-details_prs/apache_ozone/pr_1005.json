{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2NDExNTU5", "number": 1005, "title": "HDDS-3350. Ozone Retry Policy Improvements.", "bodyText": "What changes were proposed in this pull request?\nCurrently any ozone client request can spend a huge amount of time in retries and ozone client can retry its requests very aggressively. The waiting time can thus be very high before a client request fails. Further aggressive retries by ratis client used by ozone can bog down a ratis pipeline leader. The Jira aims to make changes to the current retry behavior in Ozone client.\nWhat is the link to the Apache JIRA\nhttps://issues.apache.org/jira/browse/HDDS-3350\nHow was this patch tested?\nTeragen results were compared with and without the new retry policy. The results are uploaded in Apache jira.", "createdAt": "2020-06-02T07:48:25Z", "url": "https://github.com/apache/ozone/pull/1005", "merged": true, "mergeCommit": {"oid": "e25c7a6b6503224bb0b74fbcc142a953a5cc9480"}, "closed": true, "closedAt": "2020-06-16T06:00:17Z", "author": {"login": "lokeshj1703"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcnqEXzgBqjM0MDIzNjM5MzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcru2DdAFqTQzMTE4MTE1OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "72a92d503bf2b06b96c719d12c97d6b3c4287f3f", "author": {"user": {"login": "lokeshj1703", "name": "Lokesh Jain"}}, "url": "https://github.com/apache/ozone/commit/72a92d503bf2b06b96c719d12c97d6b3c4287f3f", "committedDate": "2020-06-03T13:38:20Z", "message": "Fix unit test"}, "afterCommit": {"oid": "b29e208a419962a1db585da5ddce5757895d6949", "author": {"user": {"login": "lokeshj1703", "name": "Lokesh Jain"}}, "url": "https://github.com/apache/ozone/commit/b29e208a419962a1db585da5ddce5757895d6949", "committedDate": "2020-06-03T13:50:40Z", "message": "Rebase and Fix unit test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NDk3MTYz", "url": "https://github.com/apache/ozone/pull/1005#pullrequestreview-424497163", "createdAt": "2020-06-04T14:17:45Z", "commit": {"oid": "30106806086a61cbda4e54ba36cbfa85a8e69044"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNDoxNzo0NVrOGfIOzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNDoxNzo0NVrOGfIOzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI5MzkwMA==", "bodyText": "Is this a duplicate of HDDS-3350? Let's decouple the Ratis version update from the rest of the changes.", "url": "https://github.com/apache/ozone/pull/1005#discussion_r435293900", "createdAt": "2020-06-04T14:17:45Z", "author": {"login": "arp7"}, "path": "pom.xml", "diffHunk": "@@ -79,7 +79,7 @@ xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xs\n     <declared.ozone.version>${ozone.version}</declared.ozone.version>\n \n     <!-- Apache Ratis version -->\n-    <ratis.version>0.6.0-cac3336-SNAPSHOT</ratis.version>\n+    <ratis.version>0.6.0-6ab75ae-SNAPSHOT</ratis.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30106806086a61cbda4e54ba36cbfa85a8e69044"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1MjMxNTYw", "url": "https://github.com/apache/ozone/pull/1005#pullrequestreview-425231560", "createdAt": "2020-06-05T11:54:03Z", "commit": {"oid": "30106806086a61cbda4e54ba36cbfa85a8e69044"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b308df05157cb77791eb4383c1745c004ccca8c", "author": {"user": {"login": "lokeshj1703", "name": "Lokesh Jain"}}, "url": "https://github.com/apache/ozone/commit/6b308df05157cb77791eb4383c1745c004ccca8c", "committedDate": "2020-06-09T12:10:56Z", "message": "HDDS-3350. Ozone Retry Policy Improvements."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c4b838aa08014d7a97174df7fe5d181eb40e06f", "author": {"user": {"login": "lokeshj1703", "name": "Lokesh Jain"}}, "url": "https://github.com/apache/ozone/commit/9c4b838aa08014d7a97174df7fe5d181eb40e06f", "committedDate": "2020-06-09T12:12:28Z", "message": "Rebase and Fix unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fffb8505b6ae77ed9c9cad5f51628e8b747b5a1", "author": {"user": {"login": "lokeshj1703", "name": "Lokesh Jain"}}, "url": "https://github.com/apache/ozone/commit/3fffb8505b6ae77ed9c9cad5f51628e8b747b5a1", "committedDate": "2020-06-09T12:12:28Z", "message": "Rebase and update ratis snapshot"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e83fe30c841f0eefe786ab1d2b9611025f2ce43a", "author": {"user": {"login": "lokeshj1703", "name": "Lokesh Jain"}}, "url": "https://github.com/apache/ozone/commit/e83fe30c841f0eefe786ab1d2b9611025f2ce43a", "committedDate": "2020-06-09T12:12:28Z", "message": "Fix checkstyle issues"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d80b50ada45e4d6428dfb340f988a638ed0e030a", "author": {"user": {"login": "lokeshj1703", "name": "Lokesh Jain"}}, "url": "https://github.com/apache/ozone/commit/d80b50ada45e4d6428dfb340f988a638ed0e030a", "committedDate": "2020-06-08T09:57:37Z", "message": "Fix checkstyle issues"}, "afterCommit": {"oid": "e83fe30c841f0eefe786ab1d2b9611025f2ce43a", "author": {"user": {"login": "lokeshj1703", "name": "Lokesh Jain"}}, "url": "https://github.com/apache/ozone/commit/e83fe30c841f0eefe786ab1d2b9611025f2ce43a", "committedDate": "2020-06-09T12:12:28Z", "message": "Fix checkstyle issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb7802dad9f7c3a3bc369560a2f46b7d6575003b", "author": {"user": {"login": "lokeshj1703", "name": "Lokesh Jain"}}, "url": "https://github.com/apache/ozone/commit/cb7802dad9f7c3a3bc369560a2f46b7d6575003b", "committedDate": "2020-06-09T12:19:10Z", "message": "Rebase and fix unit test."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MzQzNTM5", "url": "https://github.com/apache/ozone/pull/1005#pullrequestreview-427343539", "createdAt": "2020-06-09T16:34:18Z", "commit": {"oid": "cb7802dad9f7c3a3bc369560a2f46b7d6575003b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNjozNDoxOFrOGhS8jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNjo0MDo1M1rOGhTMOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2NjYwNQ==", "bodyText": "Instead of explicitly adding no retry for specific exception , can we define a static list of exceptions for which there will be no retry and iterate here. ?", "url": "https://github.com/apache/ozone/pull/1005#discussion_r437566605", "createdAt": "2020-06-09T16:34:18Z", "author": {"login": "bshashikant"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/ratis/RatisHelper.java", "diffHunk": "@@ -269,23 +282,76 @@ static GrpcTlsConfig createTlsClientConfig(SecurityConfig conf,\n     return tlsConfig;\n   }\n \n-  static RetryPolicy createRetryPolicy(ConfigurationSource conf) {\n-    int maxRetryCount =\n-        conf.getInt(OzoneConfigKeys.DFS_RATIS_CLIENT_REQUEST_MAX_RETRIES_KEY,\n+  public static RetryPolicy createRetryPolicy(ConfigurationSource conf) {\n+    ExponentialBackoffRetry exponentialBackoffRetry =\n+        createExponentialBackoffPolicy(conf);\n+    MultipleLinearRandomRetry multipleLinearRandomRetry =\n+        MultipleLinearRandomRetry.parseCommaSeparated(conf.get(\n+            OzoneConfigKeys.DFS_RATIS_CLIENT_MULTILINEAR_RANDOM_RETRY_POLICY,\n             OzoneConfigKeys.\n-                DFS_RATIS_CLIENT_REQUEST_MAX_RETRIES_DEFAULT);\n-    long retryInterval = conf.getTimeDuration(OzoneConfigKeys.\n-        DFS_RATIS_CLIENT_REQUEST_RETRY_INTERVAL_KEY, OzoneConfigKeys.\n-        DFS_RATIS_CLIENT_REQUEST_RETRY_INTERVAL_DEFAULT\n-        .toIntExact(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS);\n-    TimeDuration sleepDuration =\n-        TimeDuration.valueOf(retryInterval, TimeUnit.MILLISECONDS);\n-    RetryPolicy retryPolicy = RetryPolicies\n-        .retryUpToMaximumCountWithFixedSleep(maxRetryCount, sleepDuration);\n-    return retryPolicy;\n+                DFS_RATIS_CLIENT_MULTILINEAR_RANDOM_RETRY_POLICY_DEFAULT));\n+\n+    long writeTimeout = conf.getTimeDuration(\n+        OzoneConfigKeys.DFS_RATIS_CLIENT_REQUEST_WRITE_TIMEOUT, OzoneConfigKeys.\n+            DFS_RATIS_CLIENT_REQUEST_WRITE_TIMEOUT_DEFAULT\n+            .toIntExact(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS);\n+    long watchTimeout = conf.getTimeDuration(\n+        OzoneConfigKeys.DFS_RATIS_CLIENT_REQUEST_WATCH_TIMEOUT, OzoneConfigKeys.\n+            DFS_RATIS_CLIENT_REQUEST_WATCH_TIMEOUT_DEFAULT\n+            .toIntExact(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS);\n+\n+    return RequestTypeDependentRetryPolicy.newBuilder()\n+        .setRetryPolicy(RaftProtos.RaftClientRequestProto.TypeCase.WRITE,\n+            createExceptionDependentPolicy(exponentialBackoffRetry,\n+                multipleLinearRandomRetry, exponentialBackoffRetry))\n+        .setRetryPolicy(RaftProtos.RaftClientRequestProto.TypeCase.WATCH,\n+            createExceptionDependentPolicy(exponentialBackoffRetry,\n+                multipleLinearRandomRetry, RetryPolicies.noRetry()))\n+        .setTimeout(RaftProtos.RaftClientRequestProto.TypeCase.WRITE,\n+            TimeDuration.valueOf(writeTimeout, TimeUnit.MILLISECONDS))\n+        .setTimeout(RaftProtos.RaftClientRequestProto.TypeCase.WATCH,\n+            TimeDuration.valueOf(watchTimeout, TimeUnit.MILLISECONDS))\n+        .build();\n+  }\n+\n+  private static ExponentialBackoffRetry createExponentialBackoffPolicy(\n+      ConfigurationSource conf) {\n+    long exponentialBaseSleep = conf.getTimeDuration(\n+        OzoneConfigKeys.DFS_RATIS_CLIENT_EXPONENTIAL_BACKOFF_BASE_SLEEP,\n+        OzoneConfigKeys.DFS_RATIS_CLIENT_EXPONENTIAL_BACKOFF_BASE_SLEEP_DEFAULT\n+            .toIntExact(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS);\n+    long exponentialMaxSleep = conf.getTimeDuration(\n+        OzoneConfigKeys.DFS_RATIS_CLIENT_EXPONENTIAL_BACKOFF_MAX_SLEEP,\n+        OzoneConfigKeys.\n+            DFS_RATIS_CLIENT_EXPONENTIAL_BACKOFF_MAX_SLEEP_DEFAULT\n+            .toIntExact(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS);\n+    return ExponentialBackoffRetry.newBuilder()\n+        .setBaseSleepTime(\n+            TimeDuration.valueOf(exponentialBaseSleep, TimeUnit.MILLISECONDS))\n+        .setMaxSleepTime(\n+            TimeDuration.valueOf(exponentialMaxSleep, TimeUnit.MILLISECONDS))\n+        .build();\n+  }\n+\n+  private static ExceptionDependentRetry createExceptionDependentPolicy(\n+      ExponentialBackoffRetry exponentialBackoffRetry,\n+      MultipleLinearRandomRetry multipleLinearRandomRetry,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb7802dad9f7c3a3bc369560a2f46b7d6575003b"}, "originalPosition": 294}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2ODY0NQ==", "bodyText": "I think we need to add AlreadyClosedException to the list of no retry here( as this can be generated from ratis server as well). Also, for RfatLogIOException , the policy should be of no retry.", "url": "https://github.com/apache/ozone/pull/1005#discussion_r437568645", "createdAt": "2020-06-09T16:37:32Z", "author": {"login": "bshashikant"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/ratis/RatisHelper.java", "diffHunk": "@@ -269,23 +282,76 @@ static GrpcTlsConfig createTlsClientConfig(SecurityConfig conf,\n     return tlsConfig;\n   }\n \n-  static RetryPolicy createRetryPolicy(ConfigurationSource conf) {\n-    int maxRetryCount =\n-        conf.getInt(OzoneConfigKeys.DFS_RATIS_CLIENT_REQUEST_MAX_RETRIES_KEY,\n+  public static RetryPolicy createRetryPolicy(ConfigurationSource conf) {\n+    ExponentialBackoffRetry exponentialBackoffRetry =\n+        createExponentialBackoffPolicy(conf);\n+    MultipleLinearRandomRetry multipleLinearRandomRetry =\n+        MultipleLinearRandomRetry.parseCommaSeparated(conf.get(\n+            OzoneConfigKeys.DFS_RATIS_CLIENT_MULTILINEAR_RANDOM_RETRY_POLICY,\n             OzoneConfigKeys.\n-                DFS_RATIS_CLIENT_REQUEST_MAX_RETRIES_DEFAULT);\n-    long retryInterval = conf.getTimeDuration(OzoneConfigKeys.\n-        DFS_RATIS_CLIENT_REQUEST_RETRY_INTERVAL_KEY, OzoneConfigKeys.\n-        DFS_RATIS_CLIENT_REQUEST_RETRY_INTERVAL_DEFAULT\n-        .toIntExact(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS);\n-    TimeDuration sleepDuration =\n-        TimeDuration.valueOf(retryInterval, TimeUnit.MILLISECONDS);\n-    RetryPolicy retryPolicy = RetryPolicies\n-        .retryUpToMaximumCountWithFixedSleep(maxRetryCount, sleepDuration);\n-    return retryPolicy;\n+                DFS_RATIS_CLIENT_MULTILINEAR_RANDOM_RETRY_POLICY_DEFAULT));\n+\n+    long writeTimeout = conf.getTimeDuration(\n+        OzoneConfigKeys.DFS_RATIS_CLIENT_REQUEST_WRITE_TIMEOUT, OzoneConfigKeys.\n+            DFS_RATIS_CLIENT_REQUEST_WRITE_TIMEOUT_DEFAULT\n+            .toIntExact(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS);\n+    long watchTimeout = conf.getTimeDuration(\n+        OzoneConfigKeys.DFS_RATIS_CLIENT_REQUEST_WATCH_TIMEOUT, OzoneConfigKeys.\n+            DFS_RATIS_CLIENT_REQUEST_WATCH_TIMEOUT_DEFAULT\n+            .toIntExact(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS);\n+\n+    return RequestTypeDependentRetryPolicy.newBuilder()\n+        .setRetryPolicy(RaftProtos.RaftClientRequestProto.TypeCase.WRITE,\n+            createExceptionDependentPolicy(exponentialBackoffRetry,\n+                multipleLinearRandomRetry, exponentialBackoffRetry))\n+        .setRetryPolicy(RaftProtos.RaftClientRequestProto.TypeCase.WATCH,\n+            createExceptionDependentPolicy(exponentialBackoffRetry,\n+                multipleLinearRandomRetry, RetryPolicies.noRetry()))\n+        .setTimeout(RaftProtos.RaftClientRequestProto.TypeCase.WRITE,\n+            TimeDuration.valueOf(writeTimeout, TimeUnit.MILLISECONDS))\n+        .setTimeout(RaftProtos.RaftClientRequestProto.TypeCase.WATCH,\n+            TimeDuration.valueOf(watchTimeout, TimeUnit.MILLISECONDS))\n+        .build();\n+  }\n+\n+  private static ExponentialBackoffRetry createExponentialBackoffPolicy(\n+      ConfigurationSource conf) {\n+    long exponentialBaseSleep = conf.getTimeDuration(\n+        OzoneConfigKeys.DFS_RATIS_CLIENT_EXPONENTIAL_BACKOFF_BASE_SLEEP,\n+        OzoneConfigKeys.DFS_RATIS_CLIENT_EXPONENTIAL_BACKOFF_BASE_SLEEP_DEFAULT\n+            .toIntExact(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS);\n+    long exponentialMaxSleep = conf.getTimeDuration(\n+        OzoneConfigKeys.DFS_RATIS_CLIENT_EXPONENTIAL_BACKOFF_MAX_SLEEP,\n+        OzoneConfigKeys.\n+            DFS_RATIS_CLIENT_EXPONENTIAL_BACKOFF_MAX_SLEEP_DEFAULT\n+            .toIntExact(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS);\n+    return ExponentialBackoffRetry.newBuilder()\n+        .setBaseSleepTime(\n+            TimeDuration.valueOf(exponentialBaseSleep, TimeUnit.MILLISECONDS))\n+        .setMaxSleepTime(\n+            TimeDuration.valueOf(exponentialMaxSleep, TimeUnit.MILLISECONDS))\n+        .build();\n+  }\n+\n+  private static ExceptionDependentRetry createExceptionDependentPolicy(\n+      ExponentialBackoffRetry exponentialBackoffRetry,\n+      MultipleLinearRandomRetry multipleLinearRandomRetry,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2NjYwNQ=="}, "originalCommit": {"oid": "cb7802dad9f7c3a3bc369560a2f46b7d6575003b"}, "originalPosition": 294}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2OTUxOA==", "bodyText": "can we add a table defining the exception to retry policy relationship for better understanding?", "url": "https://github.com/apache/ozone/pull/1005#discussion_r437569518", "createdAt": "2020-06-09T16:39:04Z", "author": {"login": "bshashikant"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/ratis/RatisHelper.java", "diffHunk": "@@ -269,23 +282,76 @@ static GrpcTlsConfig createTlsClientConfig(SecurityConfig conf,\n     return tlsConfig;\n   }\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb7802dad9f7c3a3bc369560a2f46b7d6575003b"}, "originalPosition": 227}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU3MDYxOA==", "bodyText": "i guess it would be better to define these configs in RatisClientConfig instead of defining here.", "url": "https://github.com/apache/ozone/pull/1005#discussion_r437570618", "createdAt": "2020-06-09T16:40:53Z", "author": {"login": "bshashikant"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/OzoneConfigKeys.java", "diffHunk": "@@ -281,15 +281,33 @@\n \n   public static final String DFS_CONTAINER_RATIS_DATANODE_STORAGE_DIR =\n       \"dfs.container.ratis.datanode.storage.dir\";\n-  public static final String DFS_RATIS_CLIENT_REQUEST_MAX_RETRIES_KEY =\n-      ScmConfigKeys.DFS_RATIS_CLIENT_REQUEST_MAX_RETRIES_KEY;\n-  public static final int DFS_RATIS_CLIENT_REQUEST_MAX_RETRIES_DEFAULT =\n-      ScmConfigKeys.DFS_RATIS_CLIENT_REQUEST_MAX_RETRIES_DEFAULT;\n-  public static final String DFS_RATIS_CLIENT_REQUEST_RETRY_INTERVAL_KEY =\n-      ScmConfigKeys.DFS_RATIS_CLIENT_REQUEST_RETRY_INTERVAL_KEY;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb7802dad9f7c3a3bc369560a2f46b7d6575003b"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53e8cc4b6b99c4574152edcd532bfb3ab73f2361", "author": {"user": {"login": "lokeshj1703", "name": "Lokesh Jain"}}, "url": "https://github.com/apache/ozone/commit/53e8cc4b6b99c4574152edcd532bfb3ab73f2361", "committedDate": "2020-06-10T13:57:30Z", "message": "Address review comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f3afc3df5458a967f14554f1c28bc396e201566", "author": {"user": {"login": "lokeshj1703", "name": "Lokesh Jain"}}, "url": "https://github.com/apache/ozone/commit/3f3afc3df5458a967f14554f1c28bc396e201566", "committedDate": "2020-06-11T11:00:03Z", "message": "Fix unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd91a4ac00c02c4ef568d8f239ded9a45677fdb4", "author": {"user": {"login": "lokeshj1703", "name": "Lokesh Jain"}}, "url": "https://github.com/apache/ozone/commit/bd91a4ac00c02c4ef568d8f239ded9a45677fdb4", "committedDate": "2020-06-11T15:36:08Z", "message": "Fix unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ecf43c9d8de4e0067ac2d79e9f3a31c6f453e95", "author": {"user": {"login": "lokeshj1703", "name": "Lokesh Jain"}}, "url": "https://github.com/apache/ozone/commit/8ecf43c9d8de4e0067ac2d79e9f3a31c6f453e95", "committedDate": "2020-06-11T15:42:14Z", "message": "Fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcd7c3394b1b60f3f05a2f83d9834691932f0e70", "author": {"user": {"login": "lokeshj1703", "name": "Lokesh Jain"}}, "url": "https://github.com/apache/ozone/commit/fcd7c3394b1b60f3f05a2f83d9834691932f0e70", "committedDate": "2020-06-12T08:10:28Z", "message": "Fix unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0ce87146534453d20a8ae25cc61f5519d282207", "author": {"user": {"login": "lokeshj1703", "name": "Lokesh Jain"}}, "url": "https://github.com/apache/ozone/commit/d0ce87146534453d20a8ae25cc61f5519d282207", "committedDate": "2020-06-12T09:40:42Z", "message": "Fix unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f615b48f6100ca11c35f3a032b2386ec44d88706", "author": {"user": {"login": "lokeshj1703", "name": "Lokesh Jain"}}, "url": "https://github.com/apache/ozone/commit/f615b48f6100ca11c35f3a032b2386ec44d88706", "committedDate": "2020-06-12T09:49:01Z", "message": "Remove unnecessary logging"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMTgxMTU5", "url": "https://github.com/apache/ozone/pull/1005#pullrequestreview-431181159", "createdAt": "2020-06-16T05:59:30Z", "commit": {"oid": "f615b48f6100ca11c35f3a032b2386ec44d88706"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3128, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}