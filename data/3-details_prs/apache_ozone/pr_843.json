{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1Nzg1OTAw", "number": 843, "title": "HDDS-3223. Improve s3g read 1GB object efficiency by 100 times", "bodyText": "What changes were proposed in this pull request?\nWhat's the problem ?\nUse dd to read 1000M object from ozone bucket mounted by goofys, it cost about 470 seconds, i.e. 2.2M/s, which is too slow.\n\nI also use tcpdump to capture the packet when I  read 200M object. As the image shows, the 1st GET request cost about 1 second, but the 10th GET request cost about 22 seconds. The GET request become slower and slower.\n\nWhat's the reason ?\nWhen read 1000M object, there are 50 GET requests, each GET request read 20M. When do GET, the stack is: IOUtils::copyLarge -> IOUtils::skipFully -> IOUtils::skip -> InputStream::read.\nIt means, the 50th GET request which should read 980M-1000M, but to skip 0-980M, it also InputStream::read 0-980M. So the 1st GET request read 0-20M, the 2nd GET request read 0-40M, the 3rd GET request read 0-60M, ..., the 50th GET request read 0-1000M. So the GET  request from 1st-50th become slower and slower.\nYou can also refer IO-203 and IO-355 why IOUtils implement skip by read rather than real skip, e.g. seek.\n\nHow to improve ?\nCopy IOUtils::copyLarge to S3WrapperInputStream, and replace IOUtils::skipFully  with S3WrapperInputStream::seek.  No other changes of IOUtils::copyLarge.\nAfter improving, read 1000M object cost 4.79 seconds, i.e. 219M/s, about 100 times faster.\n\nWhat is the link to the Apache JIRA\nhttps://issues.apache.org/jira/browse/HDDS-3223\nHow was this patch tested?\nExisted UT and IT.", "createdAt": "2020-04-20T02:19:04Z", "url": "https://github.com/apache/ozone/pull/843", "merged": true, "mergeCommit": {"oid": "5fbb045dc991776bffd98f7cf5804d7ed14c8b53"}, "closed": true, "closedAt": "2020-04-29T05:56:59Z", "author": {"login": "runzhiwang"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZV6jWgBqjMyNDk4NjE3MTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaJXGAgFqTM5ODI2Mzk5OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3621e6888ec2fed6ab6c0d67e6a6dbeaf7a1d5bc", "author": {"user": {"login": "runzhiwang", "name": null}}, "url": "https://github.com/apache/ozone/commit/3621e6888ec2fed6ab6c0d67e6a6dbeaf7a1d5bc", "committedDate": "2020-04-20T02:19:19Z", "message": "HDDS-3223. Improve s3g read 1GB object efficiency by 100 times"}, "afterCommit": {"oid": "24df66dde6775c7177c63d7f33b53bc1f90703cb", "author": {"user": {"login": "runzhiwang", "name": null}}, "url": "https://github.com/apache/ozone/commit/24df66dde6775c7177c63d7f33b53bc1f90703cb", "committedDate": "2020-04-20T02:45:20Z", "message": "HDDS-3223. Improve s3g read 1GB object efficiency by 100 times"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ced02e6149582f41907a138c3426cc9c102881a3", "author": {"user": {"login": "runzhiwang", "name": null}}, "url": "https://github.com/apache/ozone/commit/ced02e6149582f41907a138c3426cc9c102881a3", "committedDate": "2020-04-20T03:50:22Z", "message": "java doc"}, "afterCommit": {"oid": "2388d620511404c4de8f99ce8a37e0c411294c8d", "author": {"user": {"login": "runzhiwang", "name": null}}, "url": "https://github.com/apache/ozone/commit/2388d620511404c4de8f99ce8a37e0c411294c8d", "committedDate": "2020-04-20T06:00:07Z", "message": "HDDS-3223. Improve s3g read 1GB object efficiency by 100 times"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2388d620511404c4de8f99ce8a37e0c411294c8d", "author": {"user": {"login": "runzhiwang", "name": null}}, "url": "https://github.com/apache/ozone/commit/2388d620511404c4de8f99ce8a37e0c411294c8d", "committedDate": "2020-04-20T06:00:07Z", "message": "HDDS-3223. Improve s3g read 1GB object efficiency by 100 times"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3MDAwMzYz", "url": "https://github.com/apache/ozone/pull/843#pullrequestreview-397000363", "createdAt": "2020-04-21T05:39:06Z", "commit": {"oid": "2388d620511404c4de8f99ce8a37e0c411294c8d"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3MDAwNjE1", "url": "https://github.com/apache/ozone/pull/843#pullrequestreview-397000615", "createdAt": "2020-04-21T05:39:51Z", "commit": {"oid": "2388d620511404c4de8f99ce8a37e0c411294c8d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNTozOTo1MVrOGIzZQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNTozOTo1MVrOGIzZQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg4Mzg0MQ==", "bodyText": "-ve means all, so if I say -1/-2, read entire file till end?.\nBut I don't see that handled in the code.", "url": "https://github.com/apache/ozone/pull/843#discussion_r411883841", "createdAt": "2020-04-21T05:39:51Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/io/S3WrapperInputStream.java", "diffHunk": "@@ -76,4 +79,87 @@ public long getPos() throws IOException {\n   public boolean seekToNewSource(long targetPos) throws IOException {\n     return false;\n   }\n+\n+  /**\n+   * Copies some or all bytes from a large (over 2GB) <code>InputStream</code>\n+   * to an <code>OutputStream</code>, optionally skipping input bytes.\n+   * <p>\n+   * Copy the method from IOUtils of commons-io to reimplement skip by seek\n+   * rather than read. The reason why IOUtils of commons-io implement skip\n+   * by read can be found at\n+   * <a href=\"https://issues.apache.org/jira/browse/IO-203\">IO-203</a>.\n+   * </p>\n+   * <p>\n+   * This method buffers the input internally, so there is no need to use a\n+   * <code>BufferedInputStream</code>.\n+   * </p>\n+   * The buffer size is given by {@link #DEFAULT_BUFFER_SIZE}.\n+   *\n+   * @param output the <code>OutputStream</code> to write to\n+   * @param inputOffset : number of bytes to skip from input before copying\n+   * -ve values are ignored\n+   * @param length : number of bytes to copy. -ve means all\n+   * @return the number of bytes copied\n+   * @throws NullPointerException if the input or output is null\n+   * @throws IOException          if an I/O error occurs\n+   */\n+  public long copyLarge(final OutputStream output, final long inputOffset,\n+      final long length) throws IOException {\n+    return copyLarge(output, inputOffset, length,\n+        new byte[DEFAULT_BUFFER_SIZE]);\n+  }\n+\n+  /**\n+   * Copies some or all bytes from a large (over 2GB) <code>InputStream</code>\n+   * to an <code>OutputStream</code>, optionally skipping input bytes.\n+   * <p>\n+   * Copy the method from IOUtils of commons-io to reimplement skip by seek\n+   * rather than read. The reason why IOUtils of commons-io implement skip\n+   * by read can be found at\n+   * <a href=\"https://issues.apache.org/jira/browse/IO-203\">IO-203</a>.\n+   * </p>\n+   * <p>\n+   * This method uses the provided buffer, so there is no need to use a\n+   * <code>BufferedInputStream</code>.\n+   * </p>\n+   *\n+   * @param output the <code>OutputStream</code> to write to\n+   * @param inputOffset : number of bytes to skip from input before copying\n+   * -ve values are ignored\n+   * @param length : number of bytes to copy. -ve means all", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2388d620511404c4de8f99ce8a37e0c411294c8d"}, "originalPosition": 72}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7d948ba8f428b7481bb6eae8bc6cfee9c015081", "author": {"user": {"login": "runzhiwang", "name": null}}, "url": "https://github.com/apache/ozone/commit/f7d948ba8f428b7481bb6eae8bc6cfee9c015081", "committedDate": "2020-04-22T13:47:16Z", "message": "fix code review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4MjYzOTk5", "url": "https://github.com/apache/ozone/pull/843#pullrequestreview-398263999", "createdAt": "2020-04-22T14:42:29Z", "commit": {"oid": "f7d948ba8f428b7481bb6eae8bc6cfee9c015081"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3400, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}