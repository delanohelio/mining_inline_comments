{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5NTYxNzQx", "number": 1635, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMzo0Mjo0N1rOFDvS3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMzo0NDo0NFrOFDvU8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDY0OTI2OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/freon/ClosedContainerReplicator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMzo0Mjo0N1rOIDijZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMzo0Mjo0N1rOIDijZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4Mjc1Ng==", "bodyText": "specified.", "url": "https://github.com/apache/ozone/pull/1635#discussion_r540582756", "createdAt": "2020-12-10T23:42:47Z", "author": {"login": "jojochuang"}, "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/freon/ClosedContainerReplicator.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.ozone.freon;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.Callable;\n+import java.util.stream.Collectors;\n+\n+import org.apache.hadoop.hdds.cli.HddsVersionProvider;\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.protocol.DatanodeDetails;\n+import org.apache.hadoop.hdds.protocol.datanode.proto.ContainerProtos.ContainerType;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos.LifeCycleState;\n+import org.apache.hadoop.hdds.scm.cli.ContainerOperationClient;\n+import org.apache.hadoop.hdds.scm.container.ContainerInfo;\n+import org.apache.hadoop.hdds.scm.container.common.helpers.ContainerWithPipeline;\n+import org.apache.hadoop.ozone.container.common.helpers.ContainerMetrics;\n+import org.apache.hadoop.ozone.container.common.impl.ContainerSet;\n+import org.apache.hadoop.ozone.container.common.interfaces.Handler;\n+import org.apache.hadoop.ozone.container.common.volume.MutableVolumeSet;\n+import org.apache.hadoop.ozone.container.keyvalue.TarContainerPacker;\n+import org.apache.hadoop.ozone.container.ozoneimpl.ContainerController;\n+import org.apache.hadoop.ozone.container.replication.ContainerReplicator;\n+import org.apache.hadoop.ozone.container.replication.DownloadAndImportReplicator;\n+import org.apache.hadoop.ozone.container.replication.ReplicationSupervisor;\n+import org.apache.hadoop.ozone.container.replication.ReplicationTask;\n+import org.apache.hadoop.ozone.container.replication.SimpleContainerDownloader;\n+\n+import com.codahale.metrics.Timer;\n+import org.jetbrains.annotations.NotNull;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Option;\n+\n+/**\n+ * Utility to replicated closed container with datanode code.\n+ */\n+@Command(name = \"cr\",\n+    aliases = \"container-replicator\",\n+    description = \"Replicate / download closed containers.\",\n+    versionProvider = HddsVersionProvider.class,\n+    mixinStandardHelpOptions = true,\n+    showDefaultValues = true)\n+public class ClosedContainerReplicator extends BaseFreonGenerator implements\n+    Callable<Void> {\n+\n+  @Option(names = {\"--datanode\"},\n+      description = \"Replicate only containers on this specific datanode.\",\n+      defaultValue = \"\")\n+  private String datanode;\n+\n+  private ReplicationSupervisor supervisor;\n+\n+  private Timer timer;\n+\n+  private List<ReplicationTask> replicationTasks;\n+\n+  @Override\n+  public Void call() throws Exception {\n+\n+    //logic same as the download+import on the destination datanode\n+    OzoneConfiguration conf = initializeReplicationSupervisor();\n+\n+    final ContainerOperationClient containerOperationClient =\n+        new ContainerOperationClient(conf);\n+\n+    final List<ContainerInfo> containerInfos =\n+        containerOperationClient.listContainer(0L, 1_000_000);\n+\n+    replicationTasks = new ArrayList<>();\n+\n+    for (ContainerInfo container : containerInfos) {\n+\n+      final ContainerWithPipeline containerWithPipeline =\n+          containerOperationClient\n+              .getContainerWithPipeline(container.getContainerID());\n+\n+      if (container.getState() == LifeCycleState.CLOSED) {\n+\n+        final List<DatanodeDetails> datanodesWithContainer =\n+            containerWithPipeline.getPipeline().getNodes();\n+\n+        final List<String> datanodeUUIDs =\n+            datanodesWithContainer\n+                .stream().map(DatanodeDetails::getUuidString)\n+                .collect(Collectors.toList());\n+\n+        //if datanode is specific replicate only container if has a replica.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99c4b387759d7bce6086999cc6a222dbefdeaff0"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDY1MzExOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/freon/ClosedContainerReplicator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMzo0NDoxOFrOIDillQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMzo0NDoxOFrOIDillQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4MzMxNw==", "bodyText": "typically ppl use String.isEmpty() instead.", "url": "https://github.com/apache/ozone/pull/1635#discussion_r540583317", "createdAt": "2020-12-10T23:44:18Z", "author": {"login": "jojochuang"}, "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/freon/ClosedContainerReplicator.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.ozone.freon;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.Callable;\n+import java.util.stream.Collectors;\n+\n+import org.apache.hadoop.hdds.cli.HddsVersionProvider;\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.protocol.DatanodeDetails;\n+import org.apache.hadoop.hdds.protocol.datanode.proto.ContainerProtos.ContainerType;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos.LifeCycleState;\n+import org.apache.hadoop.hdds.scm.cli.ContainerOperationClient;\n+import org.apache.hadoop.hdds.scm.container.ContainerInfo;\n+import org.apache.hadoop.hdds.scm.container.common.helpers.ContainerWithPipeline;\n+import org.apache.hadoop.ozone.container.common.helpers.ContainerMetrics;\n+import org.apache.hadoop.ozone.container.common.impl.ContainerSet;\n+import org.apache.hadoop.ozone.container.common.interfaces.Handler;\n+import org.apache.hadoop.ozone.container.common.volume.MutableVolumeSet;\n+import org.apache.hadoop.ozone.container.keyvalue.TarContainerPacker;\n+import org.apache.hadoop.ozone.container.ozoneimpl.ContainerController;\n+import org.apache.hadoop.ozone.container.replication.ContainerReplicator;\n+import org.apache.hadoop.ozone.container.replication.DownloadAndImportReplicator;\n+import org.apache.hadoop.ozone.container.replication.ReplicationSupervisor;\n+import org.apache.hadoop.ozone.container.replication.ReplicationTask;\n+import org.apache.hadoop.ozone.container.replication.SimpleContainerDownloader;\n+\n+import com.codahale.metrics.Timer;\n+import org.jetbrains.annotations.NotNull;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Option;\n+\n+/**\n+ * Utility to replicated closed container with datanode code.\n+ */\n+@Command(name = \"cr\",\n+    aliases = \"container-replicator\",\n+    description = \"Replicate / download closed containers.\",\n+    versionProvider = HddsVersionProvider.class,\n+    mixinStandardHelpOptions = true,\n+    showDefaultValues = true)\n+public class ClosedContainerReplicator extends BaseFreonGenerator implements\n+    Callable<Void> {\n+\n+  @Option(names = {\"--datanode\"},\n+      description = \"Replicate only containers on this specific datanode.\",\n+      defaultValue = \"\")\n+  private String datanode;\n+\n+  private ReplicationSupervisor supervisor;\n+\n+  private Timer timer;\n+\n+  private List<ReplicationTask> replicationTasks;\n+\n+  @Override\n+  public Void call() throws Exception {\n+\n+    //logic same as the download+import on the destination datanode\n+    OzoneConfiguration conf = initializeReplicationSupervisor();\n+\n+    final ContainerOperationClient containerOperationClient =\n+        new ContainerOperationClient(conf);\n+\n+    final List<ContainerInfo> containerInfos =\n+        containerOperationClient.listContainer(0L, 1_000_000);\n+\n+    replicationTasks = new ArrayList<>();\n+\n+    for (ContainerInfo container : containerInfos) {\n+\n+      final ContainerWithPipeline containerWithPipeline =\n+          containerOperationClient\n+              .getContainerWithPipeline(container.getContainerID());\n+\n+      if (container.getState() == LifeCycleState.CLOSED) {\n+\n+        final List<DatanodeDetails> datanodesWithContainer =\n+            containerWithPipeline.getPipeline().getNodes();\n+\n+        final List<String> datanodeUUIDs =\n+            datanodesWithContainer\n+                .stream().map(DatanodeDetails::getUuidString)\n+                .collect(Collectors.toList());\n+\n+        //if datanode is specific replicate only container if has a replica.\n+        if (datanode.equals(\"\") || datanodeUUIDs.contains(datanode)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99c4b387759d7bce6086999cc6a222dbefdeaff0"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDY1NDU5OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/freon/ClosedContainerReplicator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMzo0NDo0NVrOIDimWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMzo0NDo0NVrOIDimWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4MzUxNQ==", "bodyText": "String.isEmpty()?", "url": "https://github.com/apache/ozone/pull/1635#discussion_r540583515", "createdAt": "2020-12-10T23:44:45Z", "author": {"login": "jojochuang"}, "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/freon/ClosedContainerReplicator.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.ozone.freon;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.Callable;\n+import java.util.stream.Collectors;\n+\n+import org.apache.hadoop.hdds.cli.HddsVersionProvider;\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.protocol.DatanodeDetails;\n+import org.apache.hadoop.hdds.protocol.datanode.proto.ContainerProtos.ContainerType;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos.LifeCycleState;\n+import org.apache.hadoop.hdds.scm.cli.ContainerOperationClient;\n+import org.apache.hadoop.hdds.scm.container.ContainerInfo;\n+import org.apache.hadoop.hdds.scm.container.common.helpers.ContainerWithPipeline;\n+import org.apache.hadoop.ozone.container.common.helpers.ContainerMetrics;\n+import org.apache.hadoop.ozone.container.common.impl.ContainerSet;\n+import org.apache.hadoop.ozone.container.common.interfaces.Handler;\n+import org.apache.hadoop.ozone.container.common.volume.MutableVolumeSet;\n+import org.apache.hadoop.ozone.container.keyvalue.TarContainerPacker;\n+import org.apache.hadoop.ozone.container.ozoneimpl.ContainerController;\n+import org.apache.hadoop.ozone.container.replication.ContainerReplicator;\n+import org.apache.hadoop.ozone.container.replication.DownloadAndImportReplicator;\n+import org.apache.hadoop.ozone.container.replication.ReplicationSupervisor;\n+import org.apache.hadoop.ozone.container.replication.ReplicationTask;\n+import org.apache.hadoop.ozone.container.replication.SimpleContainerDownloader;\n+\n+import com.codahale.metrics.Timer;\n+import org.jetbrains.annotations.NotNull;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Option;\n+\n+/**\n+ * Utility to replicated closed container with datanode code.\n+ */\n+@Command(name = \"cr\",\n+    aliases = \"container-replicator\",\n+    description = \"Replicate / download closed containers.\",\n+    versionProvider = HddsVersionProvider.class,\n+    mixinStandardHelpOptions = true,\n+    showDefaultValues = true)\n+public class ClosedContainerReplicator extends BaseFreonGenerator implements\n+    Callable<Void> {\n+\n+  @Option(names = {\"--datanode\"},\n+      description = \"Replicate only containers on this specific datanode.\",\n+      defaultValue = \"\")\n+  private String datanode;\n+\n+  private ReplicationSupervisor supervisor;\n+\n+  private Timer timer;\n+\n+  private List<ReplicationTask> replicationTasks;\n+\n+  @Override\n+  public Void call() throws Exception {\n+\n+    //logic same as the download+import on the destination datanode\n+    OzoneConfiguration conf = initializeReplicationSupervisor();\n+\n+    final ContainerOperationClient containerOperationClient =\n+        new ContainerOperationClient(conf);\n+\n+    final List<ContainerInfo> containerInfos =\n+        containerOperationClient.listContainer(0L, 1_000_000);\n+\n+    replicationTasks = new ArrayList<>();\n+\n+    for (ContainerInfo container : containerInfos) {\n+\n+      final ContainerWithPipeline containerWithPipeline =\n+          containerOperationClient\n+              .getContainerWithPipeline(container.getContainerID());\n+\n+      if (container.getState() == LifeCycleState.CLOSED) {\n+\n+        final List<DatanodeDetails> datanodesWithContainer =\n+            containerWithPipeline.getPipeline().getNodes();\n+\n+        final List<String> datanodeUUIDs =\n+            datanodesWithContainer\n+                .stream().map(DatanodeDetails::getUuidString)\n+                .collect(Collectors.toList());\n+\n+        //if datanode is specific replicate only container if has a replica.\n+        if (datanode.equals(\"\") || datanodeUUIDs.contains(datanode)) {\n+          replicationTasks.add(new ReplicationTask(container.getContainerID(),\n+              datanodesWithContainer));\n+        }\n+      }\n+\n+    }\n+\n+    //important: override the max number of tasks.\n+    setTestNo(replicationTasks.size());\n+\n+    init();\n+\n+    timer = getMetrics().timer(\"replicate-container\");\n+    runTests(this::replicateContainer);\n+    return null;\n+  }\n+\n+  @NotNull\n+  private OzoneConfiguration initializeReplicationSupervisor()\n+      throws IOException {\n+    String fakeDatanodeUuid = datanode;\n+\n+    if (fakeDatanodeUuid.equals(\"\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99c4b387759d7bce6086999cc6a222dbefdeaff0"}, "originalPosition": 130}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4535, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}