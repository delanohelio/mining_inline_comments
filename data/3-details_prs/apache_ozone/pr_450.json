{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzNjk4NDM2", "number": 450, "title": "HDDS-2893. Handle replay of KeyPurge Request.", "bodyText": "What changes were proposed in this pull request?\nIf KeyPurgeRequest is replayed, we do not want to purge the keys which were created after the original purge request was received. This could happen if a key was deleted, purged and then created and deleted again. The the purge request was replayed, it would purge the key deleted after the original purge request was completed.\nHence, to maintain idempotence, we should only purge those keys from DeletedKeys table that have updateID < transactionLogIndex of the request.\nWhat is the link to the Apache JIRA\nhttps://issues.apache.org/jira/browse/HDDS-2893\nHow was this patch tested?\nUnit tests to verify replayed transactions are executed as expected.", "createdAt": "2020-01-16T15:16:05Z", "url": "https://github.com/apache/ozone/pull/450", "merged": true, "mergeCommit": {"oid": "bb574424f96a5ef685de11aa7694c9f38d51f14a"}, "closed": true, "closedAt": "2020-02-01T00:49:06Z", "author": {"login": "hanishakoneru"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb-5qtEABqjI5ODc2Mjc4NzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_44uYAFqTM1MTg0OTYxNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1665e235500247b90fe66b868250c604435d476d", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/1665e235500247b90fe66b868250c604435d476d", "committedDate": "2020-01-24T00:43:22Z", "message": "Unit test for KeyPurgeRequest replay"}, "afterCommit": {"oid": "f0a9ba7849112d8e497e47e0d8c51841e9da41c5", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/f0a9ba7849112d8e497e47e0d8c51841e9da41c5", "committedDate": "2020-01-28T21:49:12Z", "message": "Unit test for KeyPurgeRequest replay"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5NzkwNjk0", "url": "https://github.com/apache/ozone/pull/450#pullrequestreview-349790694", "createdAt": "2020-01-29T00:07:48Z", "commit": {"oid": "f0a9ba7849112d8e497e47e0d8c51841e9da41c5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMDowNzo0OFrOFi45gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMDowNzo0OFrOFi45gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEyODEzMQ==", "bodyText": "objectID  -> updatedID", "url": "https://github.com/apache/ozone/pull/450#discussion_r372128131", "createdAt": "2020-01-29T00:07:48Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyPurgeRequest.java", "diffHunk": "@@ -49,25 +57,76 @@ public OMKeyPurgeRequest(OMRequest omRequest) {\n   public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       long transactionLogIndex,\n       OzoneManagerDoubleBufferHelper ozoneManagerDoubleBufferHelper) {\n-    PurgeKeysRequest purgeKeysRequest = getOmRequest().getPurgeKeysRequest();\n-    List<String> purgeKeysList = purgeKeysRequest.getKeysList();\n \n-    LOG.debug(\"Processing Purge Keys for {} number of keys.\",\n-        purgeKeysList.size());\n+    OMMetadataManager omMetadataManager = ozoneManager.getMetadataManager();\n+\n+    PurgeKeysRequest purgeKeysRequest = getOmRequest().getPurgeKeysRequest();\n+    List<DeletedKeys> bucketDeletedKeysList = purgeKeysRequest\n+        .getDeletedKeysList();\n+    List<String> keysToBePurgedList = new ArrayList<>();\n \n-    OMResponse omResponse = OMResponse.newBuilder()\n+    OMResponse.Builder omResponse = OMResponse.newBuilder()\n         .setCmdType(Type.PurgeKeys)\n-        .setPurgeKeysResponse(\n-            OzoneManagerProtocolProtos.PurgeKeysResponse.newBuilder().build())\n+        .setPurgeKeysResponse(PurgeKeysResponse.newBuilder().build())\n         .setStatus(Status.OK)\n-        .setSuccess(true)\n-        .build();\n+        .setSuccess(true);\n+    OMClientResponse omClientResponse = null;\n+    boolean success = true;\n+    IOException exception = null;\n+\n+    // Filter the keys that objectID > transactionLogIndex. This is done so", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0a9ba7849112d8e497e47e0d8c51841e9da41c5"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5ODAzOTkz", "url": "https://github.com/apache/ozone/pull/450#pullrequestreview-349803993", "createdAt": "2020-01-29T00:51:38Z", "commit": {"oid": "f0a9ba7849112d8e497e47e0d8c51841e9da41c5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMDo1MTozOFrOFi5ksw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMDo1MTozOFrOFi5ksw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEzOTE4Nw==", "bodyText": "As discussed offline.\nHere there is a chance of not deleting the old keyInfo from RepeatedKeyInfo when a new Key with transaction ID greater than the transactionLogIndex of purgeKeyRequest.", "url": "https://github.com/apache/ozone/pull/450#discussion_r372139187", "createdAt": "2020-01-29T00:51:38Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyPurgeRequest.java", "diffHunk": "@@ -49,25 +57,76 @@ public OMKeyPurgeRequest(OMRequest omRequest) {\n   public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       long transactionLogIndex,\n       OzoneManagerDoubleBufferHelper ozoneManagerDoubleBufferHelper) {\n-    PurgeKeysRequest purgeKeysRequest = getOmRequest().getPurgeKeysRequest();\n-    List<String> purgeKeysList = purgeKeysRequest.getKeysList();\n \n-    LOG.debug(\"Processing Purge Keys for {} number of keys.\",\n-        purgeKeysList.size());\n+    OMMetadataManager omMetadataManager = ozoneManager.getMetadataManager();\n+\n+    PurgeKeysRequest purgeKeysRequest = getOmRequest().getPurgeKeysRequest();\n+    List<DeletedKeys> bucketDeletedKeysList = purgeKeysRequest\n+        .getDeletedKeysList();\n+    List<String> keysToBePurgedList = new ArrayList<>();\n \n-    OMResponse omResponse = OMResponse.newBuilder()\n+    OMResponse.Builder omResponse = OMResponse.newBuilder()\n         .setCmdType(Type.PurgeKeys)\n-        .setPurgeKeysResponse(\n-            OzoneManagerProtocolProtos.PurgeKeysResponse.newBuilder().build())\n+        .setPurgeKeysResponse(PurgeKeysResponse.newBuilder().build())\n         .setStatus(Status.OK)\n-        .setSuccess(true)\n-        .build();\n+        .setSuccess(true);\n+    OMClientResponse omClientResponse = null;\n+    boolean success = true;\n+    IOException exception = null;\n+\n+    // Filter the keys that objectID > transactionLogIndex. This is done so\n+    // that in case this transaction is a replay, we do not purge keys\n+    // created after the original purge request.\n+    // PurgeKeys request has keys belonging to same bucket grouped together.\n+    // We get each bucket lock and check the above condition.\n+    for (DeletedKeys bucketWithDeleteKeys : bucketDeletedKeysList) {\n+      boolean acquiredLock = false;\n+      String volumeName = bucketWithDeleteKeys.getVolumeName();\n+      String bucketName = bucketWithDeleteKeys.getBucketName();\n+      try {\n+        acquiredLock = omMetadataManager.getLock().acquireWriteLock(BUCKET_LOCK,\n+            volumeName, bucketName);\n+        for (String deletedKey : bucketWithDeleteKeys.getKeysList()) {\n+          RepeatedOmKeyInfo repeatedOmKeyInfo =\n+              omMetadataManager.getDeletedTable().get(deletedKey);\n+          boolean purgeKey = true;\n+          if (repeatedOmKeyInfo != null) {\n+            for (OmKeyInfo omKeyInfo : repeatedOmKeyInfo.getOmKeyInfoList()) {\n+              // Discard those keys whose updateID is > transactionLogIndex.\n+              // This could happen when the PurgeRequest is replayed.\n+              if (isReplay(ozoneManager, omKeyInfo.getUpdateID(),\n+                  transactionLogIndex)) {\n+                purgeKey = false;\n+                break;\n+              }\n+            }\n+            if (purgeKey) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0a9ba7849112d8e497e47e0d8c51841e9da41c5"}, "originalPosition": 87}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5ODA2NjIx", "url": "https://github.com/apache/ozone/pull/450#pullrequestreview-349806621", "createdAt": "2020-01-29T01:00:14Z", "commit": {"oid": "f0a9ba7849112d8e497e47e0d8c51841e9da41c5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMTowMDoxNVrOFi5tew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMTowMDoxNVrOFi5tew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE0MTQzNQ==", "bodyText": "Can we add some logging for replay case and normal logging also which will help in debugging", "url": "https://github.com/apache/ozone/pull/450#discussion_r372141435", "createdAt": "2020-01-29T01:00:15Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyPurgeRequest.java", "diffHunk": "@@ -49,25 +57,76 @@ public OMKeyPurgeRequest(OMRequest omRequest) {\n   public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       long transactionLogIndex,\n       OzoneManagerDoubleBufferHelper ozoneManagerDoubleBufferHelper) {\n-    PurgeKeysRequest purgeKeysRequest = getOmRequest().getPurgeKeysRequest();\n-    List<String> purgeKeysList = purgeKeysRequest.getKeysList();\n \n-    LOG.debug(\"Processing Purge Keys for {} number of keys.\",\n-        purgeKeysList.size());\n+    OMMetadataManager omMetadataManager = ozoneManager.getMetadataManager();\n+\n+    PurgeKeysRequest purgeKeysRequest = getOmRequest().getPurgeKeysRequest();\n+    List<DeletedKeys> bucketDeletedKeysList = purgeKeysRequest\n+        .getDeletedKeysList();\n+    List<String> keysToBePurgedList = new ArrayList<>();\n \n-    OMResponse omResponse = OMResponse.newBuilder()\n+    OMResponse.Builder omResponse = OMResponse.newBuilder()\n         .setCmdType(Type.PurgeKeys)\n-        .setPurgeKeysResponse(\n-            OzoneManagerProtocolProtos.PurgeKeysResponse.newBuilder().build())\n+        .setPurgeKeysResponse(PurgeKeysResponse.newBuilder().build())\n         .setStatus(Status.OK)\n-        .setSuccess(true)\n-        .build();\n+        .setSuccess(true);\n+    OMClientResponse omClientResponse = null;\n+    boolean success = true;\n+    IOException exception = null;\n+\n+    // Filter the keys that objectID > transactionLogIndex. This is done so\n+    // that in case this transaction is a replay, we do not purge keys\n+    // created after the original purge request.\n+    // PurgeKeys request has keys belonging to same bucket grouped together.\n+    // We get each bucket lock and check the above condition.\n+    for (DeletedKeys bucketWithDeleteKeys : bucketDeletedKeysList) {\n+      boolean acquiredLock = false;\n+      String volumeName = bucketWithDeleteKeys.getVolumeName();\n+      String bucketName = bucketWithDeleteKeys.getBucketName();\n+      try {\n+        acquiredLock = omMetadataManager.getLock().acquireWriteLock(BUCKET_LOCK,\n+            volumeName, bucketName);\n+        for (String deletedKey : bucketWithDeleteKeys.getKeysList()) {\n+          RepeatedOmKeyInfo repeatedOmKeyInfo =\n+              omMetadataManager.getDeletedTable().get(deletedKey);\n+          boolean purgeKey = true;\n+          if (repeatedOmKeyInfo != null) {\n+            for (OmKeyInfo omKeyInfo : repeatedOmKeyInfo.getOmKeyInfoList()) {\n+              // Discard those keys whose updateID is > transactionLogIndex.\n+              // This could happen when the PurgeRequest is replayed.\n+              if (isReplay(ozoneManager, omKeyInfo.getUpdateID(),\n+                  transactionLogIndex)) {\n+                purgeKey = false;\n+                break;\n+              }\n+            }\n+            if (purgeKey) {\n+              keysToBePurgedList.add(deletedKey);\n+            }\n+          }\n+        }\n+      } catch (IOException ex) {\n+        success = false;\n+        exception = ex;\n+        break;\n+      } finally {\n+        if (acquiredLock) {\n+          omMetadataManager.getLock().releaseWriteLock(BUCKET_LOCK, volumeName,\n+              bucketName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0a9ba7849112d8e497e47e0d8c51841e9da41c5"}, "originalPosition": 99}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5ODExMzI0", "url": "https://github.com/apache/ozone/pull/450#pullrequestreview-349811324", "createdAt": "2020-01-29T01:16:13Z", "commit": {"oid": "f0a9ba7849112d8e497e47e0d8c51841e9da41c5"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7612b4f4c9facea6b413f7d113286ea1eff3b054", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/7612b4f4c9facea6b413f7d113286ea1eff3b054", "committedDate": "2020-01-30T17:31:31Z", "message": "HDDS-2893. Handle replay of KeyPurge Request."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "174ee6947784a5ccca9d7912a346850d847acdd7", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/174ee6947784a5ccca9d7912a346850d847acdd7", "committedDate": "2020-01-30T17:31:31Z", "message": "Unit test for KeyPurgeRequest replay"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d39192f9be7c0cd64e8fa2021e46c81a850de31", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/4d39192f9be7c0cd64e8fa2021e46c81a850de31", "committedDate": "2020-01-30T17:31:31Z", "message": "review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52c33306d3425b4818e119ab141f40f1f880ffd7", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/52c33306d3425b4818e119ab141f40f1f880ffd7", "committedDate": "2020-01-30T17:31:31Z", "message": "compile fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7340374159ba98035c9d78942ab094741d4ceb92", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/7340374159ba98035c9d78942ab094741d4ceb92", "committedDate": "2020-01-30T17:31:31Z", "message": "checkstyle fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03dc581617ca3cf26473a936f26a23f5e9cf2d79", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/03dc581617ca3cf26473a936f26a23f5e9cf2d79", "committedDate": "2020-01-30T18:02:44Z", "message": "rebase fixes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ecc77001d008cad4089c58e60f7616114d1e5f22", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/ecc77001d008cad4089c58e60f7616114d1e5f22", "committedDate": "2020-01-29T21:58:49Z", "message": "checkstyle fix"}, "afterCommit": {"oid": "03dc581617ca3cf26473a936f26a23f5e9cf2d79", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/03dc581617ca3cf26473a936f26a23f5e9cf2d79", "committedDate": "2020-01-30T18:02:44Z", "message": "rebase fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMjY2MzE1", "url": "https://github.com/apache/ozone/pull/450#pullrequestreview-351266315", "createdAt": "2020-01-31T02:40:50Z", "commit": {"oid": "4d39192f9be7c0cd64e8fa2021e46c81a850de31"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwMjo0MDo1MFrOFkACIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwMjo0MDo1MFrOFkACIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI5MzYwMQ==", "bodyText": "Minor: We can use the Java8 String method String.join(\", list)", "url": "https://github.com/apache/ozone/pull/450#discussion_r373293601", "createdAt": "2020-01-31T02:40:50Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyPurgeRequest.java", "diffHunk": "@@ -115,18 +126,42 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n               bucketName);\n         }\n       }\n+\n+      if (result == Result.REPLAY) {\n+        LOG.debug(\"Replayed Transaction {}. Request: {}\", trxnLogIndex,\n+            purgeKeysRequest);\n+        if (!keysNotPurged.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d39192f9be7c0cd64e8fa2021e46c81a850de31"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMjY2ODAx", "url": "https://github.com/apache/ozone/pull/450#pullrequestreview-351266801", "createdAt": "2020-01-31T02:43:15Z", "commit": {"oid": "03dc581617ca3cf26473a936f26a23f5e9cf2d79"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a82c9f51076baa23393e46cf5bd83076dc5d882", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/0a82c9f51076baa23393e46cf5bd83076dc5d882", "committedDate": "2020-01-31T23:44:01Z", "message": "Check Debug Log enabled"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxODQ5NjE1", "url": "https://github.com/apache/ozone/pull/450#pullrequestreview-351849615", "createdAt": "2020-02-01T00:48:48Z", "commit": {"oid": "0a82c9f51076baa23393e46cf5bd83076dc5d882"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3960, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}