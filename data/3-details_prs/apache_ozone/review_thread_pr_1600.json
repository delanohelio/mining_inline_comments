{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzMjM3MzM5", "number": 1600, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxNTo0MzoyMFrOFNSfnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxNTo0NjoyOVrOFNSljg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NDc4ODEzOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/freon/DatanodeChunkGenerator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxNTo0MzoyMFrOIRa5iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxNTo0MzoyMFrOIRa5iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTEzNzQxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          \"Coudln't find the any/the selected pipeline\");\n          \n          \n            \n                          \"Couldn't find the any/the selected pipeline\");", "url": "https://github.com/apache/ozone/pull/1600#discussion_r555137416", "createdAt": "2021-01-11T15:43:20Z", "author": {"login": "elek"}, "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/freon/DatanodeChunkGenerator.java", "diffHunk": "@@ -75,70 +82,120 @@\n       description = \"Pipeline to use. By default the first RATIS/THREE \"\n           + \"pipeline will be used.\",\n       defaultValue = \"\")\n-  private String pipelineId;\n+  private String pipelineIds;\n \n-  private XceiverClientSpi xceiverClientSpi;\n+  @Option(names = {\"-d\", \"--datanodes\"},\n+      description = \"Datanodes to use. \",\n+      defaultValue = \"\")\n+  private String datanodes;\n+\n+  private XceiverClientManager xceiverClientManager;\n+  private List<XceiverClientSpi> xceiverClients;\n \n   private Timer timer;\n \n   private ByteString dataToWrite;\n   private ChecksumData checksumProtobuf;\n \n+\n   @Override\n   public Void call() throws Exception {\n \n-    init();\n \n     OzoneConfiguration ozoneConf = createOzoneConfiguration();\n+    xceiverClientManager =\n+        new XceiverClientManager(ozoneConf);\n     if (OzoneSecurityUtil.isSecurityEnabled(ozoneConf)) {\n       throw new IllegalArgumentException(\n           \"Datanode chunk generator is not supported in secure environment\");\n     }\n \n-    try (StorageContainerLocationProtocol scmLocationClient =\n-        createStorageContainerLocationClient(ozoneConf)) {\n-      List<Pipeline> pipelines = scmLocationClient.listPipelines();\n-      Pipeline pipeline;\n-      if (pipelineId != null && pipelineId.length() > 0) {\n-        pipeline = pipelines.stream()\n-            .filter(p -> p.getId().toString().equals(pipelineId))\n-            .findFirst()\n-            .orElseThrow(() -> new IllegalArgumentException(\n-                \"Pipeline ID is defined, but there is no such pipeline: \"\n-                    + pipelineId));\n+    List<String> pipelinesFromCmd = Arrays.asList(pipelineIds.split(\",\"));\n \n+    List<String> datanodeHosts = Arrays.asList(this.datanodes.split(\",\"));\n+\n+    Set<Pipeline> pipelines;\n+\n+    try (StorageContainerLocationProtocol scmLocationClient =\n+               createStorageContainerLocationClient(ozoneConf)) {\n+      List<Pipeline> pipelinesFromSCM = scmLocationClient.listPipelines();\n+      Pipeline firstPipeline;\n+      init();\n+      if (!arePipelinesOrDatanodesProvided()) {\n+        //default behaviour if no arguments provided\n+        firstPipeline = pipelinesFromSCM.stream()\n+              .filter(p -> p.getFactor() == ReplicationFactor.THREE)\n+              .findFirst()\n+              .orElseThrow(() -> new IllegalArgumentException(\n+                  \"Pipeline ID is NOT defined, and no pipeline \" +\n+                      \"has been found with factor=THREE\"));\n+        XceiverClientSpi xceiverClientSpi = xceiverClientManager\n+            .acquireClient(firstPipeline);\n+        xceiverClients = new ArrayList<>();\n+        xceiverClients.add(xceiverClientSpi);\n+        LOG.info(\"Using pipeline {}\", firstPipeline.getId());\n+        runTest();\n       } else {\n-        pipeline = pipelines.stream()\n-            .filter(p -> p.getFactor() == ReplicationFactor.THREE)\n-            .findFirst()\n-            .orElseThrow(() -> new IllegalArgumentException(\n-                \"Pipeline ID is NOT defined, and no pipeline \" +\n-                    \"has been found with factor=THREE\"));\n-        LOG.info(\"Using pipeline {}\", pipeline.getId());\n+        xceiverClients = new ArrayList<>();\n+        pipelines = new HashSet<>();\n+        for(String pipelineId:pipelinesFromCmd){\n+          List<Pipeline> selectedPipelines =  pipelinesFromSCM.stream()\n+              .filter((p -> p.getId().toString()\n+                  .equals(\"PipelineID=\" + pipelineId)\n+                  || pipelineContainsDatanode(p, datanodeHosts)))\n+               .collect(Collectors.toList());\n+          pipelines.addAll(selectedPipelines);\n+        }\n+        for (Pipeline p:pipelines){\n+          LOG.info(\"Writing to pipeline: \" + p.getId());\n+          xceiverClients.add(xceiverClientManager.acquireClient(p));\n+        }\n+        if (pipelines.isEmpty()){\n+          throw new IllegalArgumentException(\n+              \"Coudln't find the any/the selected pipeline\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e084ee6c4e1bf32a0ff03a4fb18ffcbd2b3eabf"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NDc5MjA4OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/freon/DatanodeChunkGenerator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxNTo0NDowN1rOIRa72g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxNTo0NDowN1rOIRa72g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTEzODAxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    LOG.info(\"Using pipeline {}\", firstPipeline.getId());\n          \n      \n    \n    \n  \n\nYou don't need this line as you log the same information in the loop bellow.", "url": "https://github.com/apache/ozone/pull/1600#discussion_r555138010", "createdAt": "2021-01-11T15:44:07Z", "author": {"login": "elek"}, "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/freon/DatanodeChunkGenerator.java", "diffHunk": "@@ -75,70 +82,120 @@\n       description = \"Pipeline to use. By default the first RATIS/THREE \"\n           + \"pipeline will be used.\",\n       defaultValue = \"\")\n-  private String pipelineId;\n+  private String pipelineIds;\n \n-  private XceiverClientSpi xceiverClientSpi;\n+  @Option(names = {\"-d\", \"--datanodes\"},\n+      description = \"Datanodes to use. \",\n+      defaultValue = \"\")\n+  private String datanodes;\n+\n+  private XceiverClientManager xceiverClientManager;\n+  private List<XceiverClientSpi> xceiverClients;\n \n   private Timer timer;\n \n   private ByteString dataToWrite;\n   private ChecksumData checksumProtobuf;\n \n+\n   @Override\n   public Void call() throws Exception {\n \n-    init();\n \n     OzoneConfiguration ozoneConf = createOzoneConfiguration();\n+    xceiverClientManager =\n+        new XceiverClientManager(ozoneConf);\n     if (OzoneSecurityUtil.isSecurityEnabled(ozoneConf)) {\n       throw new IllegalArgumentException(\n           \"Datanode chunk generator is not supported in secure environment\");\n     }\n \n-    try (StorageContainerLocationProtocol scmLocationClient =\n-        createStorageContainerLocationClient(ozoneConf)) {\n-      List<Pipeline> pipelines = scmLocationClient.listPipelines();\n-      Pipeline pipeline;\n-      if (pipelineId != null && pipelineId.length() > 0) {\n-        pipeline = pipelines.stream()\n-            .filter(p -> p.getId().toString().equals(pipelineId))\n-            .findFirst()\n-            .orElseThrow(() -> new IllegalArgumentException(\n-                \"Pipeline ID is defined, but there is no such pipeline: \"\n-                    + pipelineId));\n+    List<String> pipelinesFromCmd = Arrays.asList(pipelineIds.split(\",\"));\n \n+    List<String> datanodeHosts = Arrays.asList(this.datanodes.split(\",\"));\n+\n+    Set<Pipeline> pipelines;\n+\n+    try (StorageContainerLocationProtocol scmLocationClient =\n+               createStorageContainerLocationClient(ozoneConf)) {\n+      List<Pipeline> pipelinesFromSCM = scmLocationClient.listPipelines();\n+      Pipeline firstPipeline;\n+      init();\n+      if (!arePipelinesOrDatanodesProvided()) {\n+        //default behaviour if no arguments provided\n+        firstPipeline = pipelinesFromSCM.stream()\n+              .filter(p -> p.getFactor() == ReplicationFactor.THREE)\n+              .findFirst()\n+              .orElseThrow(() -> new IllegalArgumentException(\n+                  \"Pipeline ID is NOT defined, and no pipeline \" +\n+                      \"has been found with factor=THREE\"));\n+        XceiverClientSpi xceiverClientSpi = xceiverClientManager\n+            .acquireClient(firstPipeline);\n+        xceiverClients = new ArrayList<>();\n+        xceiverClients.add(xceiverClientSpi);\n+        LOG.info(\"Using pipeline {}\", firstPipeline.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e084ee6c4e1bf32a0ff03a4fb18ffcbd2b3eabf"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NDgwMzM0OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/freon/DatanodeChunkGenerator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxNTo0NjoyOVrOIRbCvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxNTo0NjoyOVrOIRbCvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTEzOTc3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  description = \"Datanodes to use. \",\n          \n          \n            \n                  description = \"Datanodes to use. Test will write to all the existing pipelines which this datanode is member of.\",", "url": "https://github.com/apache/ozone/pull/1600#discussion_r555139775", "createdAt": "2021-01-11T15:46:29Z", "author": {"login": "elek"}, "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/freon/DatanodeChunkGenerator.java", "diffHunk": "@@ -75,70 +82,120 @@\n       description = \"Pipeline to use. By default the first RATIS/THREE \"\n           + \"pipeline will be used.\",\n       defaultValue = \"\")\n-  private String pipelineId;\n+  private String pipelineIds;\n \n-  private XceiverClientSpi xceiverClientSpi;\n+  @Option(names = {\"-d\", \"--datanodes\"},\n+      description = \"Datanodes to use. \",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e084ee6c4e1bf32a0ff03a4fb18ffcbd2b3eabf"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4739, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}