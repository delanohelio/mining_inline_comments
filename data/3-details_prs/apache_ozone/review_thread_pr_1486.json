{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwNzUzNDE1", "number": 1486, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNTozMjoyNlrOEsSvUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNDowMjozOVrOEwyF4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODc5ODI0OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/upgrade/AbstractLayoutVersionManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNTozMjoyNlrOHfgnaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwMDoxMjo0NVrOHfr0UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgwMjI4MQ==", "bodyText": "param not used here.", "url": "https://github.com/apache/ozone/pull/1486#discussion_r502802281", "createdAt": "2020-10-10T15:32:26Z", "author": {"login": "linyiqun"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/upgrade/AbstractLayoutVersionManager.java", "diffHunk": "@@ -107,6 +121,10 @@ public void doFinalize(Object param) {\n     }\n   }\n \n+  public void completeFinalize(Object param) {\n+    currentUpgradeState = Finalized;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6030f093d5418e59de19a7afd97bfaedc6c413da"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk4NTgwOA==", "bodyText": "@linyiqun  thanks for the review.\nyup. I would remove it.", "url": "https://github.com/apache/ozone/pull/1486#discussion_r502985808", "createdAt": "2020-10-12T00:12:45Z", "author": {"login": "prashantpogde"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/upgrade/AbstractLayoutVersionManager.java", "diffHunk": "@@ -107,6 +121,10 @@ public void doFinalize(Object param) {\n     }\n   }\n \n+  public void completeFinalize(Object param) {\n+    currentUpgradeState = Finalized;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgwMjI4MQ=="}, "originalCommit": {"oid": "6030f093d5418e59de19a7afd97bfaedc6c413da"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODgwMDI0OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/upgrade/OzoneUpgradeState.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNTozNDo1NFrOHfgoXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwMDoxMzo0N1rOHfr0xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgwMjUyNA==", "bodyText": "Can we use uppercase letter here, like INVALID, PRE_FINALIZE.. FINALIZED.", "url": "https://github.com/apache/ozone/pull/1486#discussion_r502802524", "createdAt": "2020-10-10T15:34:54Z", "author": {"login": "linyiqun"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/upgrade/OzoneUpgradeState.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.upgrade;\n+\n+/**\n+ * Generic UpgradeState or Ozone.\n+ */\n+public enum OzoneUpgradeState {\n+\n+  InValid(0, \"Invalid State\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6030f093d5418e59de19a7afd97bfaedc6c413da"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk4NTkyNQ==", "bodyText": "yup", "url": "https://github.com/apache/ozone/pull/1486#discussion_r502985925", "createdAt": "2020-10-12T00:13:47Z", "author": {"login": "prashantpogde"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/upgrade/OzoneUpgradeState.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.upgrade;\n+\n+/**\n+ * Generic UpgradeState or Ozone.\n+ */\n+public enum OzoneUpgradeState {\n+\n+  InValid(0, \"Invalid State\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgwMjUyNA=="}, "originalCommit": {"oid": "6030f093d5418e59de19a7afd97bfaedc6c413da"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODgwMTExOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/LayoutVersionReportHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNTozNTo0N1rOHfgoxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwMDoxNDoxM1rOHfr1BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgwMjYyOA==", "bodyText": "Wrong log instance name used.", "url": "https://github.com/apache/ozone/pull/1486#discussion_r502802628", "createdAt": "2020-10-10T15:35:47Z", "author": {"login": "linyiqun"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/LayoutVersionReportHandler.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hdds.scm.node;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.hadoop.hdds.protocol.DatanodeDetails;\n+import org.apache.hadoop.hdds.scm.server.SCMDatanodeHeartbeatDispatcher.LayoutReportFromDatanode;\n+import org.apache.hadoop.hdds.server.events.EventHandler;\n+import org.apache.hadoop.hdds.server.events.EventPublisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles Node Layout Version Reports from DataNode.\n+ */\n+public class LayoutVersionReportHandler implements\n+    EventHandler<LayoutReportFromDatanode> {\n+\n+  private static final Logger LOGGER = LoggerFactory\n+      .getLogger(NodeReportHandler.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6030f093d5418e59de19a7afd97bfaedc6c413da"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk4NTk4OA==", "bodyText": "yup.", "url": "https://github.com/apache/ozone/pull/1486#discussion_r502985988", "createdAt": "2020-10-12T00:14:13Z", "author": {"login": "prashantpogde"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/LayoutVersionReportHandler.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hdds.scm.node;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.hadoop.hdds.protocol.DatanodeDetails;\n+import org.apache.hadoop.hdds.scm.server.SCMDatanodeHeartbeatDispatcher.LayoutReportFromDatanode;\n+import org.apache.hadoop.hdds.server.events.EventHandler;\n+import org.apache.hadoop.hdds.server.events.EventPublisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles Node Layout Version Reports from DataNode.\n+ */\n+public class LayoutVersionReportHandler implements\n+    EventHandler<LayoutReportFromDatanode> {\n+\n+  private static final Logger LOGGER = LoggerFactory\n+      .getLogger(NodeReportHandler.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgwMjYyOA=="}, "originalCommit": {"oid": "6030f093d5418e59de19a7afd97bfaedc6c413da"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODgwNzk4OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/SCMNodeManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNTo0NDoyM1rOHfgr-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwMDoxNTozNFrOHfr1wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgwMzQ1MA==", "bodyText": "Here the dnSlv is returned in finalize command, is that right? should be scmSlv/scmMlv?", "url": "https://github.com/apache/ozone/pull/1486#discussion_r502803450", "createdAt": "2020-10-10T15:44:23Z", "author": {"login": "linyiqun"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/SCMNodeManager.java", "diffHunk": "@@ -400,6 +405,66 @@ public void processNodeReport(DatanodeDetails datanodeDetails,\n     }\n   }\n \n+  /**\n+   * Process Layout Version report.\n+   *\n+   * @param datanodeDetails\n+   * @param layoutVersionReport\n+   */\n+  @Override\n+  public void processLayoutVersionReport(DatanodeDetails datanodeDetails,\n+                                LayoutVersionProto layoutVersionReport) {\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Processing Layout Version report from [datanode={}]\",\n+          datanodeDetails.getHostName());\n+    }\n+    if (LOG.isTraceEnabled()) {\n+      LOG.trace(\"HB is received from [datanode={}]: <json>{}</json>\",\n+          datanodeDetails.getHostName(),\n+          layoutVersionReport.toString().replaceAll(\"\\n\", \"\\\\\\\\n\"));\n+    }\n+\n+    if (layoutVersionReport != null) {\n+      int scmSlv = scmLayoutVersionManager.getSoftwareLayoutVersion();\n+      int scmMlv = scmLayoutVersionManager.getMetadataLayoutVersion();\n+      OzoneUpgradeState scmUpgradeState =\n+          scmLayoutVersionManager.getUpgradeState();\n+      int dnSlv = layoutVersionReport.getSoftwareLayoutVersion();\n+      int dnMlv = layoutVersionReport.getMetadataLayoutVersion();\n+\n+      // If the data node slv is > scm slv => log error condition\n+      if (dnSlv > scmSlv) {\n+        LOG.error(\"Rogue data node {} in the cluster. \" +\n+                \"DataNode SoftwareLayoutVersion = {}, SCM \" +\n+                \"SoftwareLayoutVersion = {}\",\n+            datanodeDetails.getHostName(), dnSlv, scmSlv);\n+      }\n+\n+      // If the datanode slv < scm slv, it can not be allowed to be part of\n+      // any pipeline. However it can be allowed to join the cluster\n+      if (dnMlv < scmMlv) {\n+        LOG.warn(\"Data node {} can not be used in any pipeline in the \" +\n+                \"cluster. \" + \"DataNode MetadataLayoutVersion = {}, SCM \" +\n+                \"MetadataLayoutVersion = {}\",\n+            datanodeDetails.getHostName(), dnMlv, scmMlv);\n+\n+        // TBD: Add NEED_UPGRADE state and fill out state transitions\n+        // around this state. Fire event to move this data node to\n+        // NEED_UPGRADE state. The DataNode will be considered HEALTHY in\n+        // this state but it can not be made part of any Pipeline.\n+\n+        // Also send Finalize command to the data node. Its OK to\n+        // send Finalize command multiple times.\n+        scmNodeEventPublisher.fireEvent(SCMEvents.DATANODE_COMMAND,\n+            new CommandForDatanode<>(datanodeDetails.getUuid(),\n+                new FinalizeNewLayoutVersionCommand(true,\n+                    LayoutVersionProto.newBuilder()\n+                        .setSoftwareLayoutVersion(dnSlv)\n+                        .setMetadataLayoutVersion(dnSlv).build())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6030f093d5418e59de19a7afd97bfaedc6c413da"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk4NjE3Ng==", "bodyText": "yes, its asking datanode to move to dnSlv because thats the software version datanode is running. Its possible that its lower than the SCM slv but dnSlv is the correct version for that particular datanode,.", "url": "https://github.com/apache/ozone/pull/1486#discussion_r502986176", "createdAt": "2020-10-12T00:15:34Z", "author": {"login": "prashantpogde"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/SCMNodeManager.java", "diffHunk": "@@ -400,6 +405,66 @@ public void processNodeReport(DatanodeDetails datanodeDetails,\n     }\n   }\n \n+  /**\n+   * Process Layout Version report.\n+   *\n+   * @param datanodeDetails\n+   * @param layoutVersionReport\n+   */\n+  @Override\n+  public void processLayoutVersionReport(DatanodeDetails datanodeDetails,\n+                                LayoutVersionProto layoutVersionReport) {\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Processing Layout Version report from [datanode={}]\",\n+          datanodeDetails.getHostName());\n+    }\n+    if (LOG.isTraceEnabled()) {\n+      LOG.trace(\"HB is received from [datanode={}]: <json>{}</json>\",\n+          datanodeDetails.getHostName(),\n+          layoutVersionReport.toString().replaceAll(\"\\n\", \"\\\\\\\\n\"));\n+    }\n+\n+    if (layoutVersionReport != null) {\n+      int scmSlv = scmLayoutVersionManager.getSoftwareLayoutVersion();\n+      int scmMlv = scmLayoutVersionManager.getMetadataLayoutVersion();\n+      OzoneUpgradeState scmUpgradeState =\n+          scmLayoutVersionManager.getUpgradeState();\n+      int dnSlv = layoutVersionReport.getSoftwareLayoutVersion();\n+      int dnMlv = layoutVersionReport.getMetadataLayoutVersion();\n+\n+      // If the data node slv is > scm slv => log error condition\n+      if (dnSlv > scmSlv) {\n+        LOG.error(\"Rogue data node {} in the cluster. \" +\n+                \"DataNode SoftwareLayoutVersion = {}, SCM \" +\n+                \"SoftwareLayoutVersion = {}\",\n+            datanodeDetails.getHostName(), dnSlv, scmSlv);\n+      }\n+\n+      // If the datanode slv < scm slv, it can not be allowed to be part of\n+      // any pipeline. However it can be allowed to join the cluster\n+      if (dnMlv < scmMlv) {\n+        LOG.warn(\"Data node {} can not be used in any pipeline in the \" +\n+                \"cluster. \" + \"DataNode MetadataLayoutVersion = {}, SCM \" +\n+                \"MetadataLayoutVersion = {}\",\n+            datanodeDetails.getHostName(), dnMlv, scmMlv);\n+\n+        // TBD: Add NEED_UPGRADE state and fill out state transitions\n+        // around this state. Fire event to move this data node to\n+        // NEED_UPGRADE state. The DataNode will be considered HEALTHY in\n+        // this state but it can not be made part of any Pipeline.\n+\n+        // Also send Finalize command to the data node. Its OK to\n+        // send Finalize command multiple times.\n+        scmNodeEventPublisher.fireEvent(SCMEvents.DATANODE_COMMAND,\n+            new CommandForDatanode<>(datanodeDetails.getUuid(),\n+                new FinalizeNewLayoutVersionCommand(true,\n+                    LayoutVersionProto.newBuilder()\n+                        .setSoftwareLayoutVersion(dnSlv)\n+                        .setMetadataLayoutVersion(dnSlv).build())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgwMzQ1MA=="}, "originalCommit": {"oid": "6030f093d5418e59de19a7afd97bfaedc6c413da"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODgxMDUwOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/SCMNodeManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNTo0NzoxN1rOHfgtKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwMDoyMDowNFrOHfr3xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgwMzc1NQ==", "bodyText": "Can we put this node into exclude list temporarily?  For the lower version, it can be tolerated by SCM. But for high version, SCM should take some action I think.\nAnother question: SCM uses heartbeat to return finalize command to DNs only during DN rolling upgrade step, right? For the normal case, it actually does nothing.", "url": "https://github.com/apache/ozone/pull/1486#discussion_r502803755", "createdAt": "2020-10-10T15:47:17Z", "author": {"login": "linyiqun"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/SCMNodeManager.java", "diffHunk": "@@ -400,6 +405,66 @@ public void processNodeReport(DatanodeDetails datanodeDetails,\n     }\n   }\n \n+  /**\n+   * Process Layout Version report.\n+   *\n+   * @param datanodeDetails\n+   * @param layoutVersionReport\n+   */\n+  @Override\n+  public void processLayoutVersionReport(DatanodeDetails datanodeDetails,\n+                                LayoutVersionProto layoutVersionReport) {\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Processing Layout Version report from [datanode={}]\",\n+          datanodeDetails.getHostName());\n+    }\n+    if (LOG.isTraceEnabled()) {\n+      LOG.trace(\"HB is received from [datanode={}]: <json>{}</json>\",\n+          datanodeDetails.getHostName(),\n+          layoutVersionReport.toString().replaceAll(\"\\n\", \"\\\\\\\\n\"));\n+    }\n+\n+    if (layoutVersionReport != null) {\n+      int scmSlv = scmLayoutVersionManager.getSoftwareLayoutVersion();\n+      int scmMlv = scmLayoutVersionManager.getMetadataLayoutVersion();\n+      OzoneUpgradeState scmUpgradeState =\n+          scmLayoutVersionManager.getUpgradeState();\n+      int dnSlv = layoutVersionReport.getSoftwareLayoutVersion();\n+      int dnMlv = layoutVersionReport.getMetadataLayoutVersion();\n+\n+      // If the data node slv is > scm slv => log error condition\n+      if (dnSlv > scmSlv) {\n+        LOG.error(\"Rogue data node {} in the cluster. \" +\n+                \"DataNode SoftwareLayoutVersion = {}, SCM \" +\n+                \"SoftwareLayoutVersion = {}\",\n+            datanodeDetails.getHostName(), dnSlv, scmSlv);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6030f093d5418e59de19a7afd97bfaedc6c413da"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk4NjYyMg==", "bodyText": "Not sure what the temporary would be. Eventually the plan is that rogue data-node would be highlighted with the Recon as well and admins would be able to take some action on such nodes.\nFor normal cases, Finalize would be a no-op for datanode.", "url": "https://github.com/apache/ozone/pull/1486#discussion_r502986622", "createdAt": "2020-10-12T00:19:35Z", "author": {"login": "prashantpogde"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/SCMNodeManager.java", "diffHunk": "@@ -400,6 +405,66 @@ public void processNodeReport(DatanodeDetails datanodeDetails,\n     }\n   }\n \n+  /**\n+   * Process Layout Version report.\n+   *\n+   * @param datanodeDetails\n+   * @param layoutVersionReport\n+   */\n+  @Override\n+  public void processLayoutVersionReport(DatanodeDetails datanodeDetails,\n+                                LayoutVersionProto layoutVersionReport) {\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Processing Layout Version report from [datanode={}]\",\n+          datanodeDetails.getHostName());\n+    }\n+    if (LOG.isTraceEnabled()) {\n+      LOG.trace(\"HB is received from [datanode={}]: <json>{}</json>\",\n+          datanodeDetails.getHostName(),\n+          layoutVersionReport.toString().replaceAll(\"\\n\", \"\\\\\\\\n\"));\n+    }\n+\n+    if (layoutVersionReport != null) {\n+      int scmSlv = scmLayoutVersionManager.getSoftwareLayoutVersion();\n+      int scmMlv = scmLayoutVersionManager.getMetadataLayoutVersion();\n+      OzoneUpgradeState scmUpgradeState =\n+          scmLayoutVersionManager.getUpgradeState();\n+      int dnSlv = layoutVersionReport.getSoftwareLayoutVersion();\n+      int dnMlv = layoutVersionReport.getMetadataLayoutVersion();\n+\n+      // If the data node slv is > scm slv => log error condition\n+      if (dnSlv > scmSlv) {\n+        LOG.error(\"Rogue data node {} in the cluster. \" +\n+                \"DataNode SoftwareLayoutVersion = {}, SCM \" +\n+                \"SoftwareLayoutVersion = {}\",\n+            datanodeDetails.getHostName(), dnSlv, scmSlv);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgwMzc1NQ=="}, "originalCommit": {"oid": "6030f093d5418e59de19a7afd97bfaedc6c413da"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk4NjY5Mg==", "bodyText": "I will upload the changes together with all review comments addressed.", "url": "https://github.com/apache/ozone/pull/1486#discussion_r502986692", "createdAt": "2020-10-12T00:20:04Z", "author": {"login": "prashantpogde"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/SCMNodeManager.java", "diffHunk": "@@ -400,6 +405,66 @@ public void processNodeReport(DatanodeDetails datanodeDetails,\n     }\n   }\n \n+  /**\n+   * Process Layout Version report.\n+   *\n+   * @param datanodeDetails\n+   * @param layoutVersionReport\n+   */\n+  @Override\n+  public void processLayoutVersionReport(DatanodeDetails datanodeDetails,\n+                                LayoutVersionProto layoutVersionReport) {\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Processing Layout Version report from [datanode={}]\",\n+          datanodeDetails.getHostName());\n+    }\n+    if (LOG.isTraceEnabled()) {\n+      LOG.trace(\"HB is received from [datanode={}]: <json>{}</json>\",\n+          datanodeDetails.getHostName(),\n+          layoutVersionReport.toString().replaceAll(\"\\n\", \"\\\\\\\\n\"));\n+    }\n+\n+    if (layoutVersionReport != null) {\n+      int scmSlv = scmLayoutVersionManager.getSoftwareLayoutVersion();\n+      int scmMlv = scmLayoutVersionManager.getMetadataLayoutVersion();\n+      OzoneUpgradeState scmUpgradeState =\n+          scmLayoutVersionManager.getUpgradeState();\n+      int dnSlv = layoutVersionReport.getSoftwareLayoutVersion();\n+      int dnMlv = layoutVersionReport.getMetadataLayoutVersion();\n+\n+      // If the data node slv is > scm slv => log error condition\n+      if (dnSlv > scmSlv) {\n+        LOG.error(\"Rogue data node {} in the cluster. \" +\n+                \"DataNode SoftwareLayoutVersion = {}, SCM \" +\n+                \"SoftwareLayoutVersion = {}\",\n+            datanodeDetails.getHostName(), dnSlv, scmSlv);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgwMzc1NQ=="}, "originalCommit": {"oid": "6030f093d5418e59de19a7afd97bfaedc6c413da"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NTg3ODExOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/SCMNodeManager.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNDowMjozOVrOHmjYFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODoxMDozNVrOHocT7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE4NzU0Mw==", "bodyText": "Do we also need to add the condition (dnMLV > scmMLV) here (and at register step)?", "url": "https://github.com/apache/ozone/pull/1486#discussion_r510187543", "createdAt": "2020-10-22T14:02:39Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/SCMNodeManager.java", "diffHunk": "@@ -400,6 +405,66 @@ public void processNodeReport(DatanodeDetails datanodeDetails,\n     }\n   }\n \n+  /**\n+   * Process Layout Version report.\n+   *\n+   * @param datanodeDetails\n+   * @param layoutVersionReport\n+   */\n+  @Override\n+  public void processLayoutVersionReport(DatanodeDetails datanodeDetails,\n+                                LayoutVersionProto layoutVersionReport) {\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Processing Layout Version report from [datanode={}]\",\n+          datanodeDetails.getHostName());\n+    }\n+    if (LOG.isTraceEnabled()) {\n+      LOG.trace(\"HB is received from [datanode={}]: <json>{}</json>\",\n+          datanodeDetails.getHostName(),\n+          layoutVersionReport.toString().replaceAll(\"\\n\", \"\\\\\\\\n\"));\n+    }\n+\n+    if (layoutVersionReport != null) {\n+      int scmSlv = scmLayoutVersionManager.getSoftwareLayoutVersion();\n+      int scmMlv = scmLayoutVersionManager.getMetadataLayoutVersion();\n+      UpgradeFinalizer.Status scmUpgradeState =\n+          scmLayoutVersionManager.getUpgradeState();\n+      int dnSlv = layoutVersionReport.getSoftwareLayoutVersion();\n+      int dnMlv = layoutVersionReport.getMetadataLayoutVersion();\n+\n+      // If the data node slv is > scm slv => log error condition\n+      if (dnSlv > scmSlv) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8053652a8927d19585c3c29cb37299451e1b5a3b"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwNTEwOA==", "bodyText": "yes, we need the additional check here. The nodes that are already registered they will send the heartbeat when they are booted.\nI will add an end to end test case for this once the workflow is complete.", "url": "https://github.com/apache/ozone/pull/1486#discussion_r510505108", "createdAt": "2020-10-22T23:02:21Z", "author": {"login": "prashantpogde"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/SCMNodeManager.java", "diffHunk": "@@ -400,6 +405,66 @@ public void processNodeReport(DatanodeDetails datanodeDetails,\n     }\n   }\n \n+  /**\n+   * Process Layout Version report.\n+   *\n+   * @param datanodeDetails\n+   * @param layoutVersionReport\n+   */\n+  @Override\n+  public void processLayoutVersionReport(DatanodeDetails datanodeDetails,\n+                                LayoutVersionProto layoutVersionReport) {\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Processing Layout Version report from [datanode={}]\",\n+          datanodeDetails.getHostName());\n+    }\n+    if (LOG.isTraceEnabled()) {\n+      LOG.trace(\"HB is received from [datanode={}]: <json>{}</json>\",\n+          datanodeDetails.getHostName(),\n+          layoutVersionReport.toString().replaceAll(\"\\n\", \"\\\\\\\\n\"));\n+    }\n+\n+    if (layoutVersionReport != null) {\n+      int scmSlv = scmLayoutVersionManager.getSoftwareLayoutVersion();\n+      int scmMlv = scmLayoutVersionManager.getMetadataLayoutVersion();\n+      UpgradeFinalizer.Status scmUpgradeState =\n+          scmLayoutVersionManager.getUpgradeState();\n+      int dnSlv = layoutVersionReport.getSoftwareLayoutVersion();\n+      int dnMlv = layoutVersionReport.getMetadataLayoutVersion();\n+\n+      // If the data node slv is > scm slv => log error condition\n+      if (dnSlv > scmSlv) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE4NzU0Mw=="}, "originalCommit": {"oid": "8053652a8927d19585c3c29cb37299451e1b5a3b"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE0MDE0Ng==", "bodyText": "@prashantpogde End to End test cases make sense for integration or acceptance tests. Is it possible to add a unit test just for the SCMNodeManager.processLayoutVersion method? Since it has a few condition checks (path flows), it may be a good candidate for a unit test based on mocks.", "url": "https://github.com/apache/ozone/pull/1486#discussion_r511140146", "createdAt": "2020-10-23T20:27:54Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/SCMNodeManager.java", "diffHunk": "@@ -400,6 +405,66 @@ public void processNodeReport(DatanodeDetails datanodeDetails,\n     }\n   }\n \n+  /**\n+   * Process Layout Version report.\n+   *\n+   * @param datanodeDetails\n+   * @param layoutVersionReport\n+   */\n+  @Override\n+  public void processLayoutVersionReport(DatanodeDetails datanodeDetails,\n+                                LayoutVersionProto layoutVersionReport) {\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Processing Layout Version report from [datanode={}]\",\n+          datanodeDetails.getHostName());\n+    }\n+    if (LOG.isTraceEnabled()) {\n+      LOG.trace(\"HB is received from [datanode={}]: <json>{}</json>\",\n+          datanodeDetails.getHostName(),\n+          layoutVersionReport.toString().replaceAll(\"\\n\", \"\\\\\\\\n\"));\n+    }\n+\n+    if (layoutVersionReport != null) {\n+      int scmSlv = scmLayoutVersionManager.getSoftwareLayoutVersion();\n+      int scmMlv = scmLayoutVersionManager.getMetadataLayoutVersion();\n+      UpgradeFinalizer.Status scmUpgradeState =\n+          scmLayoutVersionManager.getUpgradeState();\n+      int dnSlv = layoutVersionReport.getSoftwareLayoutVersion();\n+      int dnMlv = layoutVersionReport.getMetadataLayoutVersion();\n+\n+      // If the data node slv is > scm slv => log error condition\n+      if (dnSlv > scmSlv) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE4NzU0Mw=="}, "originalCommit": {"oid": "8053652a8927d19585c3c29cb37299451e1b5a3b"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2ODk0MQ==", "bodyText": "yup", "url": "https://github.com/apache/ozone/pull/1486#discussion_r512168941", "createdAt": "2020-10-26T18:10:35Z", "author": {"login": "prashantpogde"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/SCMNodeManager.java", "diffHunk": "@@ -400,6 +405,66 @@ public void processNodeReport(DatanodeDetails datanodeDetails,\n     }\n   }\n \n+  /**\n+   * Process Layout Version report.\n+   *\n+   * @param datanodeDetails\n+   * @param layoutVersionReport\n+   */\n+  @Override\n+  public void processLayoutVersionReport(DatanodeDetails datanodeDetails,\n+                                LayoutVersionProto layoutVersionReport) {\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Processing Layout Version report from [datanode={}]\",\n+          datanodeDetails.getHostName());\n+    }\n+    if (LOG.isTraceEnabled()) {\n+      LOG.trace(\"HB is received from [datanode={}]: <json>{}</json>\",\n+          datanodeDetails.getHostName(),\n+          layoutVersionReport.toString().replaceAll(\"\\n\", \"\\\\\\\\n\"));\n+    }\n+\n+    if (layoutVersionReport != null) {\n+      int scmSlv = scmLayoutVersionManager.getSoftwareLayoutVersion();\n+      int scmMlv = scmLayoutVersionManager.getMetadataLayoutVersion();\n+      UpgradeFinalizer.Status scmUpgradeState =\n+          scmLayoutVersionManager.getUpgradeState();\n+      int dnSlv = layoutVersionReport.getSoftwareLayoutVersion();\n+      int dnMlv = layoutVersionReport.getMetadataLayoutVersion();\n+\n+      // If the data node slv is > scm slv => log error condition\n+      if (dnSlv > scmSlv) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE4NzU0Mw=="}, "originalCommit": {"oid": "8053652a8927d19585c3c29cb37299451e1b5a3b"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4773, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}