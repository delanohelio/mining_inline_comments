{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4MzQ0NTEz", "number": 1272, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMTozODozN1rOEWwbvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMTo1NjozNVrOEWwv8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjk3NjYxOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/insight/src/main/java/org/apache/hadoop/ozone/insight/datanode/DatanodeDispatcherInsight.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMTozODozN1rOG-LCyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMTo1OToxOFrOHHItFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg0NTgzNQ==", "bodyText": "Seems to be leftover from ScmProtocolBlockLocationInsight.  I think it should be something like Type.DATANODE, ContainerProtos.Type.values() instead.  (BaseInsightPoint needs to be tweaked to allow it.)", "url": "https://github.com/apache/ozone/pull/1272#discussion_r467845835", "createdAt": "2020-08-10T11:38:37Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/insight/src/main/java/org/apache/hadoop/ozone/insight/datanode/DatanodeDispatcherInsight.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.insight.datanode;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.protocol.proto.ScmBlockLocationProtocolProtos;\n+import org.apache.hadoop.hdds.scm.client.ScmClient;\n+import org.apache.hadoop.ozone.container.common.impl.HddsDispatcher;\n+import org.apache.hadoop.ozone.insight.BaseInsightPoint;\n+import org.apache.hadoop.ozone.insight.Component.Type;\n+import org.apache.hadoop.ozone.insight.InsightPoint;\n+import org.apache.hadoop.ozone.insight.LoggerSource;\n+import org.apache.hadoop.ozone.insight.MetricGroupDisplay;\n+\n+import static org.apache.hadoop.ozone.insight.datanode.PipelineComponentUtil.getPipelineIdFromFilters;\n+import static org.apache.hadoop.ozone.insight.datanode.PipelineComponentUtil.withDatanodesFromPipeline;\n+\n+/**\n+ * Insight definition for datanode/pipline metrics.\n+ */\n+public class DatanodeDispatcherInsight extends BaseInsightPoint\n+    implements InsightPoint {\n+\n+  private OzoneConfiguration conf;\n+\n+  public DatanodeDispatcherInsight(\n+      OzoneConfiguration conf) {\n+    this.conf = conf;\n+  }\n+\n+  @Override\n+  public List<LoggerSource> getRelatedLoggers(boolean verbose,\n+      Map<String, String> filters) {\n+\n+    List<LoggerSource> result = new ArrayList<>();\n+\n+    try (ScmClient scmClient = createScmClient(conf)) {\n+      withDatanodesFromPipeline(scmClient,\n+          getPipelineIdFromFilters(filters),\n+          dn -> {\n+            result\n+                .add(new LoggerSource(dn,\n+                    HddsDispatcher.class.getCanonicalName(),\n+                    defaultLevel(verbose)));\n+            return null;\n+          });\n+    } catch (IOException e) {\n+      throw new UncheckedIOException(\"Can't enumerate required logs\", e);\n+    }\n+    return result;\n+  }\n+\n+  @Override\n+  public List<MetricGroupDisplay> getMetrics() {\n+    List<MetricGroupDisplay> metrics = new ArrayList<>();\n+\n+    addProtocolMessageMetrics(metrics, \"hdds_dispatcher\",\n+        Type.SCM, ScmBlockLocationProtocolProtos.Type.values());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3c140e6ac99c3109ce5e2c182042773df4a91d6"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI0NDY5Mw==", "bodyText": "This is something which couldn't be easily fixed. Type.DATANODE is not supported for metrics. I can throw and UnsupportedOperationException instead of showing the metrics.", "url": "https://github.com/apache/ozone/pull/1272#discussion_r477244693", "createdAt": "2020-08-26T11:59:18Z", "author": {"login": "elek"}, "path": "hadoop-ozone/insight/src/main/java/org/apache/hadoop/ozone/insight/datanode/DatanodeDispatcherInsight.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.insight.datanode;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.protocol.proto.ScmBlockLocationProtocolProtos;\n+import org.apache.hadoop.hdds.scm.client.ScmClient;\n+import org.apache.hadoop.ozone.container.common.impl.HddsDispatcher;\n+import org.apache.hadoop.ozone.insight.BaseInsightPoint;\n+import org.apache.hadoop.ozone.insight.Component.Type;\n+import org.apache.hadoop.ozone.insight.InsightPoint;\n+import org.apache.hadoop.ozone.insight.LoggerSource;\n+import org.apache.hadoop.ozone.insight.MetricGroupDisplay;\n+\n+import static org.apache.hadoop.ozone.insight.datanode.PipelineComponentUtil.getPipelineIdFromFilters;\n+import static org.apache.hadoop.ozone.insight.datanode.PipelineComponentUtil.withDatanodesFromPipeline;\n+\n+/**\n+ * Insight definition for datanode/pipline metrics.\n+ */\n+public class DatanodeDispatcherInsight extends BaseInsightPoint\n+    implements InsightPoint {\n+\n+  private OzoneConfiguration conf;\n+\n+  public DatanodeDispatcherInsight(\n+      OzoneConfiguration conf) {\n+    this.conf = conf;\n+  }\n+\n+  @Override\n+  public List<LoggerSource> getRelatedLoggers(boolean verbose,\n+      Map<String, String> filters) {\n+\n+    List<LoggerSource> result = new ArrayList<>();\n+\n+    try (ScmClient scmClient = createScmClient(conf)) {\n+      withDatanodesFromPipeline(scmClient,\n+          getPipelineIdFromFilters(filters),\n+          dn -> {\n+            result\n+                .add(new LoggerSource(dn,\n+                    HddsDispatcher.class.getCanonicalName(),\n+                    defaultLevel(verbose)));\n+            return null;\n+          });\n+    } catch (IOException e) {\n+      throw new UncheckedIOException(\"Can't enumerate required logs\", e);\n+    }\n+    return result;\n+  }\n+\n+  @Override\n+  public List<MetricGroupDisplay> getMetrics() {\n+    List<MetricGroupDisplay> metrics = new ArrayList<>();\n+\n+    addProtocolMessageMetrics(metrics, \"hdds_dispatcher\",\n+        Type.SCM, ScmBlockLocationProtocolProtos.Type.values());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg0NTgzNQ=="}, "originalCommit": {"oid": "f3c140e6ac99c3109ce5e2c182042773df4a91d6"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMzAyNTgxOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/insight/src/main/java/org/apache/hadoop/ozone/insight/datanode/DatanodeDispatcherInsight.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMTo1NTo0M1rOG-Lflw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNToxNToxM1rOG-S_bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg1MzIwNw==", "bodyText": "Can you please explain why this is needed?  I think this may cause logs from other pipelines to be printed.\nFor example, I ran ozone insight logs on a 3-node pipeline, then:\n$ ozone sh key put -r ONE /vol1/bucket1/passwd /etc/passwd\n\nand the logs from the single datanode to which this block was written (part of the 3-node pipeline, too) appeared in the console.", "url": "https://github.com/apache/ozone/pull/1272#discussion_r467853207", "createdAt": "2020-08-10T11:55:43Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/insight/src/main/java/org/apache/hadoop/ozone/insight/datanode/DatanodeDispatcherInsight.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.insight.datanode;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.protocol.proto.ScmBlockLocationProtocolProtos;\n+import org.apache.hadoop.hdds.scm.client.ScmClient;\n+import org.apache.hadoop.ozone.container.common.impl.HddsDispatcher;\n+import org.apache.hadoop.ozone.insight.BaseInsightPoint;\n+import org.apache.hadoop.ozone.insight.Component.Type;\n+import org.apache.hadoop.ozone.insight.InsightPoint;\n+import org.apache.hadoop.ozone.insight.LoggerSource;\n+import org.apache.hadoop.ozone.insight.MetricGroupDisplay;\n+\n+import static org.apache.hadoop.ozone.insight.datanode.PipelineComponentUtil.getPipelineIdFromFilters;\n+import static org.apache.hadoop.ozone.insight.datanode.PipelineComponentUtil.withDatanodesFromPipeline;\n+\n+/**\n+ * Insight definition for datanode/pipline metrics.\n+ */\n+public class DatanodeDispatcherInsight extends BaseInsightPoint\n+    implements InsightPoint {\n+\n+  private OzoneConfiguration conf;\n+\n+  public DatanodeDispatcherInsight(\n+      OzoneConfiguration conf) {\n+    this.conf = conf;\n+  }\n+\n+  @Override\n+  public List<LoggerSource> getRelatedLoggers(boolean verbose,\n+      Map<String, String> filters) {\n+\n+    List<LoggerSource> result = new ArrayList<>();\n+\n+    try (ScmClient scmClient = createScmClient(conf)) {\n+      withDatanodesFromPipeline(scmClient,\n+          getPipelineIdFromFilters(filters),\n+          dn -> {\n+            result\n+                .add(new LoggerSource(dn,\n+                    HddsDispatcher.class.getCanonicalName(),\n+                    defaultLevel(verbose)));\n+            return null;\n+          });\n+    } catch (IOException e) {\n+      throw new UncheckedIOException(\"Can't enumerate required logs\", e);\n+    }\n+    return result;\n+  }\n+\n+  @Override\n+  public List<MetricGroupDisplay> getMetrics() {\n+    List<MetricGroupDisplay> metrics = new ArrayList<>();\n+\n+    addProtocolMessageMetrics(metrics, \"hdds_dispatcher\",\n+        Type.SCM, ScmBlockLocationProtocolProtos.Type.values());\n+\n+    return metrics;\n+  }\n+\n+  @Override\n+  public String getDescription() {\n+    return \"Datanode client protocol\";\n+  }\n+\n+  @Override\n+  public boolean filterLog(Map<String, String> filters, String logLine) {\n+    return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3c140e6ac99c3109ce5e2c182042773df4a91d6"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk3NjA0Nw==", "bodyText": "There are two parts of the filtering:\n\nwhere to connect\nwhat to display (based on [...] text from the log\n\nUnfortunately the pipeline id is not available in the  HddsDispatcher, therefore we couldn't filter out the other pipelines (and we need this code segment to show all the lines)", "url": "https://github.com/apache/ozone/pull/1272#discussion_r467976047", "createdAt": "2020-08-10T15:15:13Z", "author": {"login": "elek"}, "path": "hadoop-ozone/insight/src/main/java/org/apache/hadoop/ozone/insight/datanode/DatanodeDispatcherInsight.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.insight.datanode;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.protocol.proto.ScmBlockLocationProtocolProtos;\n+import org.apache.hadoop.hdds.scm.client.ScmClient;\n+import org.apache.hadoop.ozone.container.common.impl.HddsDispatcher;\n+import org.apache.hadoop.ozone.insight.BaseInsightPoint;\n+import org.apache.hadoop.ozone.insight.Component.Type;\n+import org.apache.hadoop.ozone.insight.InsightPoint;\n+import org.apache.hadoop.ozone.insight.LoggerSource;\n+import org.apache.hadoop.ozone.insight.MetricGroupDisplay;\n+\n+import static org.apache.hadoop.ozone.insight.datanode.PipelineComponentUtil.getPipelineIdFromFilters;\n+import static org.apache.hadoop.ozone.insight.datanode.PipelineComponentUtil.withDatanodesFromPipeline;\n+\n+/**\n+ * Insight definition for datanode/pipline metrics.\n+ */\n+public class DatanodeDispatcherInsight extends BaseInsightPoint\n+    implements InsightPoint {\n+\n+  private OzoneConfiguration conf;\n+\n+  public DatanodeDispatcherInsight(\n+      OzoneConfiguration conf) {\n+    this.conf = conf;\n+  }\n+\n+  @Override\n+  public List<LoggerSource> getRelatedLoggers(boolean verbose,\n+      Map<String, String> filters) {\n+\n+    List<LoggerSource> result = new ArrayList<>();\n+\n+    try (ScmClient scmClient = createScmClient(conf)) {\n+      withDatanodesFromPipeline(scmClient,\n+          getPipelineIdFromFilters(filters),\n+          dn -> {\n+            result\n+                .add(new LoggerSource(dn,\n+                    HddsDispatcher.class.getCanonicalName(),\n+                    defaultLevel(verbose)));\n+            return null;\n+          });\n+    } catch (IOException e) {\n+      throw new UncheckedIOException(\"Can't enumerate required logs\", e);\n+    }\n+    return result;\n+  }\n+\n+  @Override\n+  public List<MetricGroupDisplay> getMetrics() {\n+    List<MetricGroupDisplay> metrics = new ArrayList<>();\n+\n+    addProtocolMessageMetrics(metrics, \"hdds_dispatcher\",\n+        Type.SCM, ScmBlockLocationProtocolProtos.Type.values());\n+\n+    return metrics;\n+  }\n+\n+  @Override\n+  public String getDescription() {\n+    return \"Datanode client protocol\";\n+  }\n+\n+  @Override\n+  public boolean filterLog(Map<String, String> filters, String logLine) {\n+    return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg1MzIwNw=="}, "originalCommit": {"oid": "f3c140e6ac99c3109ce5e2c182042773df4a91d6"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMzAyODMzOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/insight/src/main/java/org/apache/hadoop/ozone/insight/datanode/DatanodeDispatcherInsight.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMTo1NjozNVrOG-LhEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMTo1NjozNVrOG-LhEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg1MzU4NA==", "bodyText": "Seems to be leftover from RatisInsight.", "url": "https://github.com/apache/ozone/pull/1272#discussion_r467853584", "createdAt": "2020-08-10T11:56:35Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/insight/src/main/java/org/apache/hadoop/ozone/insight/datanode/DatanodeDispatcherInsight.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.insight.datanode;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.protocol.proto.ScmBlockLocationProtocolProtos;\n+import org.apache.hadoop.hdds.scm.client.ScmClient;\n+import org.apache.hadoop.ozone.container.common.impl.HddsDispatcher;\n+import org.apache.hadoop.ozone.insight.BaseInsightPoint;\n+import org.apache.hadoop.ozone.insight.Component.Type;\n+import org.apache.hadoop.ozone.insight.InsightPoint;\n+import org.apache.hadoop.ozone.insight.LoggerSource;\n+import org.apache.hadoop.ozone.insight.MetricGroupDisplay;\n+\n+import static org.apache.hadoop.ozone.insight.datanode.PipelineComponentUtil.getPipelineIdFromFilters;\n+import static org.apache.hadoop.ozone.insight.datanode.PipelineComponentUtil.withDatanodesFromPipeline;\n+\n+/**\n+ * Insight definition for datanode/pipline metrics.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3c140e6ac99c3109ce5e2c182042773df4a91d6"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4964, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}