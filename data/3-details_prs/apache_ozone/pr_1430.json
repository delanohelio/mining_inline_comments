{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4MjY3Mzg5", "number": 1430, "title": "HDDS-4227. Implement a 'Prepare For Upgrade' step in OM that applies all committed Ratis transactions.", "bodyText": "What changes were proposed in this pull request?\nThrough HDDS-4143, we have a generic factory to handle multiple versions of apply transaction implementations based on layout version. Hence, this factory can be used to handle versioned requests across layout versions, whenever both the versions need to exist in the code (Let's say for HDDS-2939).\nHowever, it has been noticed that the OM ratis requests are still undergoing lot of minor changes (HDDS-4006, HDDS-4007, HDDS-3903), and in these cases it will become hard to maintain 2 versions of the code just to support clean upgrades.\nHence, this patch adds a pre-upgrade utility (client API) that makes sure that an OM instance has no \"un-applied\" transactions in its Raft log. Invoking this client API before updating the software version makes sure that the upgrade starts with a clean state. Of course, this would be needed only in a HA setup. In a non HA setup, this can either be skipped, or when invoked will be a No-Op (Non Ratis) or cause no harm (Single node Ratis).\nMore details in JIRA.\nWhat is the link to the Apache JIRA\nhttps://issues.apache.org/jira/browse/HDDS-4227\nHow was this patch tested?\nManually tested.\nUnit/Acceptance tests pending.", "createdAt": "2020-09-16T21:58:17Z", "url": "https://github.com/apache/ozone/pull/1430", "merged": true, "mergeCommit": {"oid": "a2788b72cf068ab1723cd1c64670acca4db78e8f"}, "closed": true, "closedAt": "2020-09-29T16:41:43Z", "author": {"login": "avijayanhwx"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdJjp_pAH2gAyNDg4MjY3Mzg5OmZiZTE0MDNlNDk1M2I4N2FmMTg4ZmU3NjkxMTljY2I2OTA2YTRhMDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdNq8y0AFqTQ5ODY4MTY4Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "fbe1403e4953b87af188fe769119ccb6906a4a05", "author": {"user": {"login": "avijayanhwx", "name": null}}, "url": "https://github.com/apache/ozone/commit/fbe1403e4953b87af188fe769119ccb6906a4a05", "committedDate": "2020-09-16T21:55:06Z", "message": "HDDS-4227. Implement a prepareForUpgrade step that applies all committed transactions onto the OM state machine."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwMzM2MTE4", "url": "https://github.com/apache/ozone/pull/1430#pullrequestreview-490336118", "createdAt": "2020-09-17T07:57:55Z", "commit": {"oid": "fbe1403e4953b87af188fe769119ccb6906a4a05"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwNzo1Nzo1NlrOHTWB_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwODowMjo1M1rOHTWNdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA0NTk0OA==", "bodyText": "Can we make maxTimeToWaitSeconds configurable?", "url": "https://github.com/apache/ozone/pull/1430#discussion_r490045948", "createdAt": "2020-09-17T07:57:56Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -994,6 +1005,45 @@ public static boolean omInit(OzoneConfiguration conf) throws IOException,\n     }\n   }\n \n+  public boolean applyAllPendingTransactions()\n+      throws InterruptedException, IOException {\n+\n+    if (!isRatisEnabled) {\n+      LOG.info(\"Ratis not enabled. Nothing to do.\");\n+      return true;\n+    }\n+\n+    String purgeConfig = omRatisServer.getServer()\n+        .getProperties().get(PURGE_UPTO_SNAPSHOT_INDEX_KEY);\n+    if (!Boolean.parseBoolean(purgeConfig)) {\n+      throw new IllegalStateException(\"Cannot prepare OM for Upgrade since  \" +\n+          \"raft.server.log.purge.upto.snapshot.index is not true\");\n+    }\n+\n+    waitForAllTxnsApplied(omRatisServer.getOmStateMachine(),\n+        omRatisServer.getRaftGroup(),\n+        (RaftServerProxy) omRatisServer.getServer(),\n+        TimeUnit.MINUTES.toSeconds(5));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbe1403e4953b87af188fe769119ccb6906a4a05"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA0ODg4NQ==", "bodyText": "During prepareForUpgrade, the RPC server is not stared. So we should also have the corresponding command to trigger to restart RPC server. Otherwise after all txns applied, new requests still cannot get in.", "url": "https://github.com/apache/ozone/pull/1430#discussion_r490048885", "createdAt": "2020-09-17T08:02:53Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -1179,15 +1229,22 @@ public void start() throws IOException {\n       // Allow OM to start as Http Server failure is not fatal.\n       LOG.error(\"OM HttpServer failed to start.\", ex);\n     }\n-    omRpcServer.start();\n-    isOmRpcServerRunning = true;\n \n+    if (!prepareForUpgrade) {\n+      omRpcServer.start();\n+      isOmRpcServerRunning = true;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbe1403e4953b87af188fe769119ccb6906a4a05"}, "originalPosition": 123}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwMzU5OTE2", "url": "https://github.com/apache/ozone/pull/1430#pullrequestreview-490359916", "createdAt": "2020-09-17T08:27:36Z", "commit": {"oid": "fbe1403e4953b87af188fe769119ccb6906a4a05"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwODoyNzozNlrOHTXKDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwODoyNzozNlrOHTXKDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA2NDM5OA==", "bodyText": "Will prepareForUpgrade command send multiple OMs simultaneously here? Or we should trigger prepareForUpgrade command for each OM service.", "url": "https://github.com/apache/ozone/pull/1430#discussion_r490064398", "createdAt": "2020-09-17T08:27:36Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManagerStarter.java", "diffHunk": "@@ -98,6 +98,28 @@ public void initOm()\n     }\n   }\n \n+\n+  /**\n+   * This function implements a sub-command to allow the OM to be\n+   * \"prepared for upgrade\".\n+   */\n+  @CommandLine.Command(name = \"--prepareForUpgrade\",\n+      aliases = {\"--prepareForDowngrade\", \"--flushTransactions\"},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbe1403e4953b87af188fe769119ccb6906a4a05"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzNjA2OTg2", "url": "https://github.com/apache/ozone/pull/1430#pullrequestreview-493606986", "createdAt": "2020-09-22T15:48:12Z", "commit": {"oid": "fbe1403e4953b87af188fe769119ccb6906a4a05"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNTo0ODoxMlrOHWA6Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNTo0ODoxMlrOHWA6Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg0NTY1OQ==", "bodyText": "OMRatisServer always sets this property to true. It is not configurable. Is this check still needed?", "url": "https://github.com/apache/ozone/pull/1430#discussion_r492845659", "createdAt": "2020-09-22T15:48:12Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -994,6 +1005,45 @@ public static boolean omInit(OzoneConfiguration conf) throws IOException,\n     }\n   }\n \n+  public boolean applyAllPendingTransactions()\n+      throws InterruptedException, IOException {\n+\n+    if (!isRatisEnabled) {\n+      LOG.info(\"Ratis not enabled. Nothing to do.\");\n+      return true;\n+    }\n+\n+    String purgeConfig = omRatisServer.getServer()\n+        .getProperties().get(PURGE_UPTO_SNAPSHOT_INDEX_KEY);\n+    if (!Boolean.parseBoolean(purgeConfig)) {\n+      throw new IllegalStateException(\"Cannot prepare OM for Upgrade since  \" +\n+          \"raft.server.log.purge.upto.snapshot.index is not true\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbe1403e4953b87af188fe769119ccb6906a4a05"}, "originalPosition": 84}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d673af2bae60e8667422130faff24ff42761f98", "author": {"user": {"login": "avijayanhwx", "name": null}}, "url": "https://github.com/apache/ozone/commit/1d673af2bae60e8667422130faff24ff42761f98", "committedDate": "2020-09-22T22:14:00Z", "message": "Add tests."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0NTQ4NjA3", "url": "https://github.com/apache/ozone/pull/1430#pullrequestreview-494548607", "createdAt": "2020-09-23T11:13:17Z", "commit": {"oid": "1d673af2bae60e8667422130faff24ff42761f98"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMToxMzoxN1rOHWmm2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMToxMzoxN1rOHWmm2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ2MzI1Nw==", "bodyText": "For OZONE_OM_FLUSH_TXNS_RETRY_INTERVAL_SECONDS , here should be 5. On RatisUpgradeUtils#waitForAllTxnsApplied, we already do the convert:\n\nlong intervalTime = TimeUnit.SECONDS.toMillis(timeBetweenRetryInSeconds);", "url": "https://github.com/apache/ozone/pull/1430#discussion_r493463257", "createdAt": "2020-09-23T11:13:17Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/OMConfigKeys.java", "diffHunk": "@@ -246,4 +246,9 @@ private OMConfigKeys() {\n       \"ozone.om.enable.filesystem.paths\";\n   public static final boolean OZONE_OM_ENABLE_FILESYSTEM_PATHS_DEFAULT =\n       false;\n+\n+  public static final long OZONE_OM_MAX_TIME_TO_WAIT_FLUSH_TXNS =\n+      TimeUnit.MINUTES.toSeconds(5);\n+  public static final long OZONE_OM_FLUSH_TXNS_RETRY_INTERVAL_SECONDS =\n+      TimeUnit.SECONDS.toMillis(5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d673af2bae60e8667422130faff24ff42761f98"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0afcfb397c0c54a15c6b5c9e1878206d362d7628", "author": {"user": {"login": "avijayanhwx", "name": null}}, "url": "https://github.com/apache/ozone/commit/0afcfb397c0c54a15c6b5c9e1878206d362d7628", "committedDate": "2020-09-23T16:27:58Z", "message": "Change default value for interval."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MTQzNTE3", "url": "https://github.com/apache/ozone/pull/1430#pullrequestreview-495143517", "createdAt": "2020-09-24T00:29:38Z", "commit": {"oid": "0afcfb397c0c54a15c6b5c9e1878206d362d7628"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc80c48efebf2cfccacee1094268db25568380de", "author": {"user": {"login": "avijayanhwx", "name": null}}, "url": "https://github.com/apache/ozone/commit/cc80c48efebf2cfccacee1094268db25568380de", "committedDate": "2020-09-24T20:44:38Z", "message": "trigger new CI check"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4MDIwNjQ5", "url": "https://github.com/apache/ozone/pull/1430#pullrequestreview-498020649", "createdAt": "2020-09-29T02:26:17Z", "commit": {"oid": "cc80c48efebf2cfccacee1094268db25568380de"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMjoyNjoxN1rOHZWQlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMjoyNjoxN1rOHZWQlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM0MTE0MQ==", "bodyText": "Wouldn't this always be true? [ curr < curr + num ]", "url": "https://github.com/apache/ozone/pull/1430#discussion_r496341141", "createdAt": "2020-09-29T02:26:17Z", "author": {"login": "swagle"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/ratis/RatisUpgradeUtils.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.hadoop.hdds.ratis;\n+\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.ratis.protocol.RaftGroup;\n+import org.apache.ratis.server.impl.RaftServerImpl;\n+import org.apache.ratis.server.impl.RaftServerProxy;\n+import org.apache.ratis.statemachine.StateMachine;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Ratis utility functions.\n+ */\n+public final class RatisUpgradeUtils {\n+\n+  private RatisUpgradeUtils() {\n+  }\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(RatisUpgradeUtils.class);\n+\n+  /**\n+   * Flush all committed transactions in a given Raft Server for a given group.\n+   * @param stateMachine state machine to use\n+   * @param raftGroup raft group\n+   * @param server Raft server proxy instance.\n+   * @param maxTimeToWaitSeconds Max time to wait before declaring failure.\n+   * @throws InterruptedException when interrupted\n+   * @throws IOException on error while waiting\n+   */\n+  public static void waitForAllTxnsApplied(\n+      StateMachine stateMachine,\n+      RaftGroup raftGroup,\n+      RaftServerProxy server,\n+      long maxTimeToWaitSeconds,\n+      long timeBetweenRetryInSeconds)\n+      throws InterruptedException, IOException {\n+\n+    long intervalTime = TimeUnit.SECONDS.toMillis(timeBetweenRetryInSeconds);\n+    long endTime = System.currentTimeMillis() +\n+        TimeUnit.SECONDS.toMillis(maxTimeToWaitSeconds);\n+    boolean success = false;\n+    while (System.currentTimeMillis() < endTime) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc80c48efebf2cfccacee1094268db25568380de"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NjgxNjgy", "url": "https://github.com/apache/ozone/pull/1430#pullrequestreview-498681682", "createdAt": "2020-09-29T16:40:40Z", "commit": {"oid": "cc80c48efebf2cfccacee1094268db25568380de"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2535, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}