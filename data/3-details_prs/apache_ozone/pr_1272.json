{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4MzQ0NTEz", "number": 1272, "title": "HDDS-2660. Create insight point for datanode container protocol", "bodyText": "What changes were proposed in this pull request?\nThe goal of this task is to create a new insight point for the datanode container protocol (HddsDispatcher) to be able to debug client<->datanode communication.\nWhat is the link to the Apache JIRA\nhttps://issues.apache.org/jira/browse/HDDS-2660\nHow was this patch tested?\nManually. See the video:\nhttps://www.youtube.com/watch?v=msQgfF95ivc&list=PLCaV-jpCBO8UK5Ged2A_iv3eHuozzMsYv&index=7&t=0s\n;-)", "createdAt": "2020-07-29T10:29:12Z", "url": "https://github.com/apache/ozone/pull/1272", "merged": true, "mergeCommit": {"oid": "64026dd494a3d5109c16d2b521d726da5e4608da"}, "closed": true, "closedAt": "2020-09-24T11:08:44Z", "author": {"login": "elek"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3sN8NAH2gAyNDU4MzQ0NTEzOmI5NGRkYjI2MzMxYjgzY2E0NzAzNzM1MTY4MzgyMmJjNWQxNmRjOTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLrczjgFqTQ5NDU4Nzc3MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b94ddb26331b83ca47037351683822bc5d16dc92", "author": {"user": {"login": "elek", "name": "Elek, M\u00e1rton"}}, "url": "https://github.com/apache/ozone/commit/b94ddb26331b83ca47037351683822bc5d16dc92", "committedDate": "2020-07-23T09:42:58Z", "message": "datanode-protocol-inside"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04e5ebdef9b84c857803708b9728e760bf2b5461", "author": {"user": {"login": "elek", "name": "Elek, M\u00e1rton"}}, "url": "https://github.com/apache/ozone/commit/04e5ebdef9b84c857803708b9728e760bf2b5461", "committedDate": "2020-07-23T09:42:58Z", "message": "add optional parameter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d03229aceabf81d685dc0d3fad6cf52d1749e978", "author": {"user": {"login": "elek", "name": "Elek, M\u00e1rton"}}, "url": "https://github.com/apache/ozone/commit/d03229aceabf81d685dc0d3fad6cf52d1749e978", "committedDate": "2020-07-24T08:27:37Z", "message": "fix datanode insight"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3efb135abe27ff0c2d9f76395ce2ef03afaa9bc0", "author": {"user": {"login": "elek", "name": "Elek, M\u00e1rton"}}, "url": "https://github.com/apache/ozone/commit/3efb135abe27ff0c2d9f76395ce2ef03afaa9bc0", "committedDate": "2020-07-27T09:55:48Z", "message": "checkstyle fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cacbcc6eeac39084e534439ff872ab594cb133c", "author": {"user": {"login": "elek", "name": "Elek, M\u00e1rton"}}, "url": "https://github.com/apache/ozone/commit/7cacbcc6eeac39084e534439ff872ab594cb133c", "committedDate": "2020-07-29T10:20:18Z", "message": "Merge remote-tracking branch 'origin/master' into HDDS-2660"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3c140e6ac99c3109ce5e2c182042773df4a91d6", "author": {"user": {"login": "elek", "name": "Elek, M\u00e1rton"}}, "url": "https://github.com/apache/ozone/commit/f3c140e6ac99c3109ce5e2c182042773df4a91d6", "committedDate": "2020-07-29T10:26:44Z", "message": "checkstyle and findbug fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0MTU0Njk1", "url": "https://github.com/apache/ozone/pull/1272#pullrequestreview-464154695", "createdAt": "2020-08-10T11:38:37Z", "commit": {"oid": "f3c140e6ac99c3109ce5e2c182042773df4a91d6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMTozODozN1rOG-LCyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMTo1NjozNVrOG-LhEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg0NTgzNQ==", "bodyText": "Seems to be leftover from ScmProtocolBlockLocationInsight.  I think it should be something like Type.DATANODE, ContainerProtos.Type.values() instead.  (BaseInsightPoint needs to be tweaked to allow it.)", "url": "https://github.com/apache/ozone/pull/1272#discussion_r467845835", "createdAt": "2020-08-10T11:38:37Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/insight/src/main/java/org/apache/hadoop/ozone/insight/datanode/DatanodeDispatcherInsight.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.insight.datanode;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.protocol.proto.ScmBlockLocationProtocolProtos;\n+import org.apache.hadoop.hdds.scm.client.ScmClient;\n+import org.apache.hadoop.ozone.container.common.impl.HddsDispatcher;\n+import org.apache.hadoop.ozone.insight.BaseInsightPoint;\n+import org.apache.hadoop.ozone.insight.Component.Type;\n+import org.apache.hadoop.ozone.insight.InsightPoint;\n+import org.apache.hadoop.ozone.insight.LoggerSource;\n+import org.apache.hadoop.ozone.insight.MetricGroupDisplay;\n+\n+import static org.apache.hadoop.ozone.insight.datanode.PipelineComponentUtil.getPipelineIdFromFilters;\n+import static org.apache.hadoop.ozone.insight.datanode.PipelineComponentUtil.withDatanodesFromPipeline;\n+\n+/**\n+ * Insight definition for datanode/pipline metrics.\n+ */\n+public class DatanodeDispatcherInsight extends BaseInsightPoint\n+    implements InsightPoint {\n+\n+  private OzoneConfiguration conf;\n+\n+  public DatanodeDispatcherInsight(\n+      OzoneConfiguration conf) {\n+    this.conf = conf;\n+  }\n+\n+  @Override\n+  public List<LoggerSource> getRelatedLoggers(boolean verbose,\n+      Map<String, String> filters) {\n+\n+    List<LoggerSource> result = new ArrayList<>();\n+\n+    try (ScmClient scmClient = createScmClient(conf)) {\n+      withDatanodesFromPipeline(scmClient,\n+          getPipelineIdFromFilters(filters),\n+          dn -> {\n+            result\n+                .add(new LoggerSource(dn,\n+                    HddsDispatcher.class.getCanonicalName(),\n+                    defaultLevel(verbose)));\n+            return null;\n+          });\n+    } catch (IOException e) {\n+      throw new UncheckedIOException(\"Can't enumerate required logs\", e);\n+    }\n+    return result;\n+  }\n+\n+  @Override\n+  public List<MetricGroupDisplay> getMetrics() {\n+    List<MetricGroupDisplay> metrics = new ArrayList<>();\n+\n+    addProtocolMessageMetrics(metrics, \"hdds_dispatcher\",\n+        Type.SCM, ScmBlockLocationProtocolProtos.Type.values());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3c140e6ac99c3109ce5e2c182042773df4a91d6"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg1MzIwNw==", "bodyText": "Can you please explain why this is needed?  I think this may cause logs from other pipelines to be printed.\nFor example, I ran ozone insight logs on a 3-node pipeline, then:\n$ ozone sh key put -r ONE /vol1/bucket1/passwd /etc/passwd\n\nand the logs from the single datanode to which this block was written (part of the 3-node pipeline, too) appeared in the console.", "url": "https://github.com/apache/ozone/pull/1272#discussion_r467853207", "createdAt": "2020-08-10T11:55:43Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/insight/src/main/java/org/apache/hadoop/ozone/insight/datanode/DatanodeDispatcherInsight.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.insight.datanode;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.protocol.proto.ScmBlockLocationProtocolProtos;\n+import org.apache.hadoop.hdds.scm.client.ScmClient;\n+import org.apache.hadoop.ozone.container.common.impl.HddsDispatcher;\n+import org.apache.hadoop.ozone.insight.BaseInsightPoint;\n+import org.apache.hadoop.ozone.insight.Component.Type;\n+import org.apache.hadoop.ozone.insight.InsightPoint;\n+import org.apache.hadoop.ozone.insight.LoggerSource;\n+import org.apache.hadoop.ozone.insight.MetricGroupDisplay;\n+\n+import static org.apache.hadoop.ozone.insight.datanode.PipelineComponentUtil.getPipelineIdFromFilters;\n+import static org.apache.hadoop.ozone.insight.datanode.PipelineComponentUtil.withDatanodesFromPipeline;\n+\n+/**\n+ * Insight definition for datanode/pipline metrics.\n+ */\n+public class DatanodeDispatcherInsight extends BaseInsightPoint\n+    implements InsightPoint {\n+\n+  private OzoneConfiguration conf;\n+\n+  public DatanodeDispatcherInsight(\n+      OzoneConfiguration conf) {\n+    this.conf = conf;\n+  }\n+\n+  @Override\n+  public List<LoggerSource> getRelatedLoggers(boolean verbose,\n+      Map<String, String> filters) {\n+\n+    List<LoggerSource> result = new ArrayList<>();\n+\n+    try (ScmClient scmClient = createScmClient(conf)) {\n+      withDatanodesFromPipeline(scmClient,\n+          getPipelineIdFromFilters(filters),\n+          dn -> {\n+            result\n+                .add(new LoggerSource(dn,\n+                    HddsDispatcher.class.getCanonicalName(),\n+                    defaultLevel(verbose)));\n+            return null;\n+          });\n+    } catch (IOException e) {\n+      throw new UncheckedIOException(\"Can't enumerate required logs\", e);\n+    }\n+    return result;\n+  }\n+\n+  @Override\n+  public List<MetricGroupDisplay> getMetrics() {\n+    List<MetricGroupDisplay> metrics = new ArrayList<>();\n+\n+    addProtocolMessageMetrics(metrics, \"hdds_dispatcher\",\n+        Type.SCM, ScmBlockLocationProtocolProtos.Type.values());\n+\n+    return metrics;\n+  }\n+\n+  @Override\n+  public String getDescription() {\n+    return \"Datanode client protocol\";\n+  }\n+\n+  @Override\n+  public boolean filterLog(Map<String, String> filters, String logLine) {\n+    return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3c140e6ac99c3109ce5e2c182042773df4a91d6"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg1MzU4NA==", "bodyText": "Seems to be leftover from RatisInsight.", "url": "https://github.com/apache/ozone/pull/1272#discussion_r467853584", "createdAt": "2020-08-10T11:56:35Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/insight/src/main/java/org/apache/hadoop/ozone/insight/datanode/DatanodeDispatcherInsight.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.insight.datanode;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.protocol.proto.ScmBlockLocationProtocolProtos;\n+import org.apache.hadoop.hdds.scm.client.ScmClient;\n+import org.apache.hadoop.ozone.container.common.impl.HddsDispatcher;\n+import org.apache.hadoop.ozone.insight.BaseInsightPoint;\n+import org.apache.hadoop.ozone.insight.Component.Type;\n+import org.apache.hadoop.ozone.insight.InsightPoint;\n+import org.apache.hadoop.ozone.insight.LoggerSource;\n+import org.apache.hadoop.ozone.insight.MetricGroupDisplay;\n+\n+import static org.apache.hadoop.ozone.insight.datanode.PipelineComponentUtil.getPipelineIdFromFilters;\n+import static org.apache.hadoop.ozone.insight.datanode.PipelineComponentUtil.withDatanodesFromPipeline;\n+\n+/**\n+ * Insight definition for datanode/pipline metrics.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3c140e6ac99c3109ce5e2c182042773df4a91d6"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b69d24a9f78652e8017f32470750934f319f2741", "author": {"user": {"login": "elek", "name": "Elek, M\u00e1rton"}}, "url": "https://github.com/apache/ozone/commit/b69d24a9f78652e8017f32470750934f319f2741", "committedDate": "2020-08-10T17:05:27Z", "message": "address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd76a4a89accf869972b98d52a20f17d3552be17", "author": {"user": {"login": "elek", "name": "Elek, M\u00e1rton"}}, "url": "https://github.com/apache/ozone/commit/bd76a4a89accf869972b98d52a20f17d3552be17", "committedDate": "2020-09-03T12:52:33Z", "message": "support filter for metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58ecf10c6c6cb06a7378762e5fb08a0d35dd4e6a", "author": {"user": {"login": "elek", "name": "Elek, M\u00e1rton"}}, "url": "https://github.com/apache/ozone/commit/58ecf10c6c6cb06a7378762e5fb08a0d35dd4e6a", "committedDate": "2020-09-03T14:10:18Z", "message": "fix hdds dispatcher metrics and logger"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0NTg3Nzcx", "url": "https://github.com/apache/ozone/pull/1272#pullrequestreview-494587771", "createdAt": "2020-09-23T12:07:47Z", "commit": {"oid": "58ecf10c6c6cb06a7378762e5fb08a0d35dd4e6a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2612, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}