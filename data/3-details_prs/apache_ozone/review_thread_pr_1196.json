{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3Njc1ODI4", "number": 1196, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjowNjo0MlrOEN4vyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOToyNzo1MFrOEPpqSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyOTk2NjgwOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/OMConfigKeys.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjowNjo0MlrOGwvbYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNTowMzo1OFrOGxEOMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc2MTg4OQ==", "bodyText": "used via FileSystem API (reword comment).", "url": "https://github.com/apache/ozone/pull/1196#discussion_r453761889", "createdAt": "2020-07-13T16:06:42Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/OMConfigKeys.java", "diffHunk": "@@ -239,4 +239,11 @@ private OMConfigKeys() {\n           \"ozone.om.keyname.character.check.enabled\";\n   public static final boolean OZONE_OM_KEYNAME_CHARACTER_CHECK_ENABLED_DEFAULT =\n           false;\n+\n+  // This config needs to be enabled, when S3G created objects will be used\n+  // FileSystem.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0aa715d900398d19f68b78ebf9e6686c1e6ca0b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEwMjU3Ng==", "bodyText": "done", "url": "https://github.com/apache/ozone/pull/1196#discussion_r454102576", "createdAt": "2020-07-14T05:03:58Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/OMConfigKeys.java", "diffHunk": "@@ -239,4 +239,11 @@ private OMConfigKeys() {\n           \"ozone.om.keyname.character.check.enabled\";\n   public static final boolean OZONE_OM_KEYNAME_CHARACTER_CHECK_ENABLED_DEFAULT =\n           false;\n+\n+  // This config needs to be enabled, when S3G created objects will be used\n+  // FileSystem.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc2MTg4OQ=="}, "originalCommit": {"oid": "a0aa715d900398d19f68b78ebf9e6686c1e6ca0b"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDA0MzkxOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyCreateRequest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjoyNjozMFrOGwwLng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNTowMzo1M1rOGxEOFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc3NDIzOA==", "bodyText": "Let's make the exception message slightly more descriptive to explain what is really going on. We can mention that createIntermediateDirs behavior is enabled and hence / has special interpretation.", "url": "https://github.com/apache/ozone/pull/1196#discussion_r453774238", "createdAt": "2020-07-13T16:26:30Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyCreateRequest.java", "diffHunk": "@@ -221,8 +233,45 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       OmBucketInfo bucketInfo = omMetadataManager.getBucketTable().get(\n           omMetadataManager.getBucketKey(volumeName, bucketName));\n \n+      boolean createIntermediateDir =\n+          ozoneManager.getConfiguration().getBoolean(\n+              OZONE_OM_CREATE_INTERMEDIATE_DIRECTORY,\n+              OZONE_OM_CREATE_INTERMEDIATE_DIRECTORY_DEFAULT);\n+\n+      // If FILE_EXISTS we just override like how we used to do for Key Create.\n+      List< OzoneAcl > inheritAcls;\n+      if (createIntermediateDir) {\n+        OMFileRequest.OMPathInfo pathInfo =\n+            OMFileRequest.verifyFilesInPath(omMetadataManager, volumeName,\n+                bucketName, keyName, Paths.get(keyName));\n+        OMFileRequest.OMDirectoryResult omDirectoryResult =\n+            pathInfo.getDirectoryResult();\n+        inheritAcls = pathInfo.getAcls();\n+\n+        // Check if a file or directory exists with same key name.\n+        if (omDirectoryResult == DIRECTORY_EXISTS) {\n+          throw new OMException(\"Can not write to directory: \" + keyName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0aa715d900398d19f68b78ebf9e6686c1e6ca0b"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEwMjU1MA==", "bodyText": "Done", "url": "https://github.com/apache/ozone/pull/1196#discussion_r454102550", "createdAt": "2020-07-14T05:03:53Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyCreateRequest.java", "diffHunk": "@@ -221,8 +233,45 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       OmBucketInfo bucketInfo = omMetadataManager.getBucketTable().get(\n           omMetadataManager.getBucketKey(volumeName, bucketName));\n \n+      boolean createIntermediateDir =\n+          ozoneManager.getConfiguration().getBoolean(\n+              OZONE_OM_CREATE_INTERMEDIATE_DIRECTORY,\n+              OZONE_OM_CREATE_INTERMEDIATE_DIRECTORY_DEFAULT);\n+\n+      // If FILE_EXISTS we just override like how we used to do for Key Create.\n+      List< OzoneAcl > inheritAcls;\n+      if (createIntermediateDir) {\n+        OMFileRequest.OMPathInfo pathInfo =\n+            OMFileRequest.verifyFilesInPath(omMetadataManager, volumeName,\n+                bucketName, keyName, Paths.get(keyName));\n+        OMFileRequest.OMDirectoryResult omDirectoryResult =\n+            pathInfo.getDirectoryResult();\n+        inheritAcls = pathInfo.getAcls();\n+\n+        // Check if a file or directory exists with same key name.\n+        if (omDirectoryResult == DIRECTORY_EXISTS) {\n+          throw new OMException(\"Can not write to directory: \" + keyName,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc3NDIzOA=="}, "originalCommit": {"oid": "a0aa715d900398d19f68b78ebf9e6686c1e6ca0b"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDA1MzUzOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyCreateRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjoyODo0MFrOGwwRag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMzoyMjoxMFrOGw-E1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc3NTcyMg==", "bodyText": "@bharatviswa504 , one q. We are adding intermediate cache entries right away instead of at the end on success. Could this be a potential issue on the failure path?", "url": "https://github.com/apache/ozone/pull/1196#discussion_r453775722", "createdAt": "2020-07-13T16:28:40Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyCreateRequest.java", "diffHunk": "@@ -221,8 +233,45 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       OmBucketInfo bucketInfo = omMetadataManager.getBucketTable().get(\n           omMetadataManager.getBucketKey(volumeName, bucketName));\n \n+      boolean createIntermediateDir =\n+          ozoneManager.getConfiguration().getBoolean(\n+              OZONE_OM_CREATE_INTERMEDIATE_DIRECTORY,\n+              OZONE_OM_CREATE_INTERMEDIATE_DIRECTORY_DEFAULT);\n+\n+      // If FILE_EXISTS we just override like how we used to do for Key Create.\n+      List< OzoneAcl > inheritAcls;\n+      if (createIntermediateDir) {\n+        OMFileRequest.OMPathInfo pathInfo =\n+            OMFileRequest.verifyFilesInPath(omMetadataManager, volumeName,\n+                bucketName, keyName, Paths.get(keyName));\n+        OMFileRequest.OMDirectoryResult omDirectoryResult =\n+            pathInfo.getDirectoryResult();\n+        inheritAcls = pathInfo.getAcls();\n+\n+        // Check if a file or directory exists with same key name.\n+        if (omDirectoryResult == DIRECTORY_EXISTS) {\n+          throw new OMException(\"Can not write to directory: \" + keyName,\n+              NOT_A_FILE);\n+        } else\n+          if (omDirectoryResult == FILE_EXISTS_IN_GIVENPATH) {\n+            throw new OMException(\"Can not create file: \" + keyName +\n+                \" as there is already file in the given path\", NOT_A_FILE);\n+          }\n+\n+        missingParentInfos = OMDirectoryCreateRequest\n+            .getAllParentInfo(ozoneManager, keyArgs,\n+                pathInfo.getMissingParents(), inheritAcls, trxnLogIndex);\n+\n+        // Add cache entries for the prefix directories.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0aa715d900398d19f68b78ebf9e6686c1e6ca0b"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAwMTg3OA==", "bodyText": "Yes, there will be some intermediate directories left in DB, key commit failed. There will be intermediate directories created.\nBut I don't see that causing an issue. But cleaner thing is cleaning up entries.\nBut this is a common issue for FileCreate and KeyCreate.\nAnd in the case lets say key create itself failed in DB flush, we terminate DB.", "url": "https://github.com/apache/ozone/pull/1196#discussion_r454001878", "createdAt": "2020-07-13T23:22:10Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyCreateRequest.java", "diffHunk": "@@ -221,8 +233,45 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       OmBucketInfo bucketInfo = omMetadataManager.getBucketTable().get(\n           omMetadataManager.getBucketKey(volumeName, bucketName));\n \n+      boolean createIntermediateDir =\n+          ozoneManager.getConfiguration().getBoolean(\n+              OZONE_OM_CREATE_INTERMEDIATE_DIRECTORY,\n+              OZONE_OM_CREATE_INTERMEDIATE_DIRECTORY_DEFAULT);\n+\n+      // If FILE_EXISTS we just override like how we used to do for Key Create.\n+      List< OzoneAcl > inheritAcls;\n+      if (createIntermediateDir) {\n+        OMFileRequest.OMPathInfo pathInfo =\n+            OMFileRequest.verifyFilesInPath(omMetadataManager, volumeName,\n+                bucketName, keyName, Paths.get(keyName));\n+        OMFileRequest.OMDirectoryResult omDirectoryResult =\n+            pathInfo.getDirectoryResult();\n+        inheritAcls = pathInfo.getAcls();\n+\n+        // Check if a file or directory exists with same key name.\n+        if (omDirectoryResult == DIRECTORY_EXISTS) {\n+          throw new OMException(\"Can not write to directory: \" + keyName,\n+              NOT_A_FILE);\n+        } else\n+          if (omDirectoryResult == FILE_EXISTS_IN_GIVENPATH) {\n+            throw new OMException(\"Can not create file: \" + keyName +\n+                \" as there is already file in the given path\", NOT_A_FILE);\n+          }\n+\n+        missingParentInfos = OMDirectoryCreateRequest\n+            .getAllParentInfo(ozoneManager, keyArgs,\n+                pathInfo.getMissingParents(), inheritAcls, trxnLogIndex);\n+\n+        // Add cache entries for the prefix directories.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc3NTcyMg=="}, "originalCommit": {"oid": "a0aa715d900398d19f68b78ebf9e6686c1e6ca0b"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDA3OTYwOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/request/key/TestOMKeyCreateRequest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjozNDo0OFrOGwwg2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNTowNDowNFrOGxEOTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc3OTY3Mg==", "bodyText": "Can we change this to fs.getFileStatus(keypath) so that returns status.isDir() ?", "url": "https://github.com/apache/ozone/pull/1196#discussion_r453779672", "createdAt": "2020-07-13T16:34:48Z", "author": {"login": "mukul1987"}, "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/request/key/TestOMKeyCreateRequest.java", "diffHunk": "@@ -328,6 +342,73 @@ private OMRequest createKeyRequest(boolean isMultipartKey, int partNumber) {\n         .setCmdType(OzoneManagerProtocolProtos.Type.CreateKey)\n         .setClientId(UUID.randomUUID().toString())\n         .setCreateKeyRequest(createKeyRequest).build();\n+  }\n+\n+  @Test\n+  public void testKeyCreateWithIntermediateDir() throws Exception {\n+\n+    String keyName = \"a/b/c/file1\";\n+    OMRequest omRequest = createKeyRequest(false, 0, keyName);\n+\n+    OzoneConfiguration configuration = new OzoneConfiguration();\n+    configuration.setBoolean(OZONE_OM_CREATE_INTERMEDIATE_DIRECTORY, true);\n+    when(ozoneManager.getConfiguration()).thenReturn(configuration);\n+    OMKeyCreateRequest omKeyCreateRequest = new OMKeyCreateRequest(omRequest);\n+\n+    omRequest = omKeyCreateRequest.preExecute(ozoneManager);\n+\n+    omKeyCreateRequest = new OMKeyCreateRequest(omRequest);\n+\n+    // Add volume and bucket entries to DB.\n+    addVolumeAndBucketToDB(volumeName, bucketName,\n+        omMetadataManager);\n+\n+    OMClientResponse omClientResponse =\n+        omKeyCreateRequest.validateAndUpdateCache(ozoneManager,\n+        100L, ozoneManagerDoubleBufferHelper);\n+\n+    Assert.assertEquals(omClientResponse.getOMResponse().getStatus(), OK);\n+\n+    Path keyPath = Paths.get(keyName);\n+\n+    // Check intermediate paths are created\n+    keyPath = keyPath.getParent();\n+    while(keyPath != null) {\n+      Assert.assertNotNull(omMetadataManager.getKeyTable().get(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0aa715d900398d19f68b78ebf9e6686c1e6ca0b"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEwMjYwNA==", "bodyText": "Added test", "url": "https://github.com/apache/ozone/pull/1196#discussion_r454102604", "createdAt": "2020-07-14T05:04:04Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/request/key/TestOMKeyCreateRequest.java", "diffHunk": "@@ -328,6 +342,73 @@ private OMRequest createKeyRequest(boolean isMultipartKey, int partNumber) {\n         .setCmdType(OzoneManagerProtocolProtos.Type.CreateKey)\n         .setClientId(UUID.randomUUID().toString())\n         .setCreateKeyRequest(createKeyRequest).build();\n+  }\n+\n+  @Test\n+  public void testKeyCreateWithIntermediateDir() throws Exception {\n+\n+    String keyName = \"a/b/c/file1\";\n+    OMRequest omRequest = createKeyRequest(false, 0, keyName);\n+\n+    OzoneConfiguration configuration = new OzoneConfiguration();\n+    configuration.setBoolean(OZONE_OM_CREATE_INTERMEDIATE_DIRECTORY, true);\n+    when(ozoneManager.getConfiguration()).thenReturn(configuration);\n+    OMKeyCreateRequest omKeyCreateRequest = new OMKeyCreateRequest(omRequest);\n+\n+    omRequest = omKeyCreateRequest.preExecute(ozoneManager);\n+\n+    omKeyCreateRequest = new OMKeyCreateRequest(omRequest);\n+\n+    // Add volume and bucket entries to DB.\n+    addVolumeAndBucketToDB(volumeName, bucketName,\n+        omMetadataManager);\n+\n+    OMClientResponse omClientResponse =\n+        omKeyCreateRequest.validateAndUpdateCache(ozoneManager,\n+        100L, ozoneManagerDoubleBufferHelper);\n+\n+    Assert.assertEquals(omClientResponse.getOMResponse().getStatus(), OK);\n+\n+    Path keyPath = Paths.get(keyName);\n+\n+    // Check intermediate paths are created\n+    keyPath = keyPath.getParent();\n+    while(keyPath != null) {\n+      Assert.assertNotNull(omMetadataManager.getKeyTable().get(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc3OTY3Mg=="}, "originalCommit": {"oid": "a0aa715d900398d19f68b78ebf9e6686c1e6ca0b"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzOTQ0MDg2OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/OMClientRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNzo0MzoyN1rOGyI9fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMjo1NDo0M1rOGyUEfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIyODc5OA==", "bodyText": "Can we print normalizedKeyName.substring(1) given we return that?", "url": "https://github.com/apache/ozone/pull/1196#discussion_r455228798", "createdAt": "2020-07-15T17:43:27Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/OMClientRequest.java", "diffHunk": "@@ -265,4 +272,24 @@ public AuditMessage buildAuditMessage(AuditAction op,\n     auditMap.put(OzoneConsts.VOLUME, volume);\n     return auditMap;\n   }\n+\n+  @SuppressFBWarnings(\"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n+  public static String getNormalizedKey(boolean enableFileSystemPaths,\n+      String keyName) {\n+    if (enableFileSystemPaths) {\n+      String normalizedKeyName;\n+      if (keyName.startsWith(OM_KEY_PREFIX)) {\n+        normalizedKeyName = Paths.get(keyName).toUri().normalize().getPath();\n+      } else {\n+        normalizedKeyName = Paths.get(OM_KEY_PREFIX, keyName).toUri()\n+            .normalize().getPath();\n+      }\n+      if (!keyName.equals(normalizedKeyName)) {\n+        LOG.debug(\"Normalized key {} to {} \", keyName, normalizedKeyName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9028b91739b58319bf7df010a06ce757e5e0e865"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQxMDgxNQ==", "bodyText": "Done", "url": "https://github.com/apache/ozone/pull/1196#discussion_r455410815", "createdAt": "2020-07-15T22:54:43Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/OMClientRequest.java", "diffHunk": "@@ -265,4 +272,24 @@ public AuditMessage buildAuditMessage(AuditAction op,\n     auditMap.put(OzoneConsts.VOLUME, volume);\n     return auditMap;\n   }\n+\n+  @SuppressFBWarnings(\"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n+  public static String getNormalizedKey(boolean enableFileSystemPaths,\n+      String keyName) {\n+    if (enableFileSystemPaths) {\n+      String normalizedKeyName;\n+      if (keyName.startsWith(OM_KEY_PREFIX)) {\n+        normalizedKeyName = Paths.get(keyName).toUri().normalize().getPath();\n+      } else {\n+        normalizedKeyName = Paths.get(OM_KEY_PREFIX, keyName).toUri()\n+            .normalize().getPath();\n+      }\n+      if (!keyName.equals(normalizedKeyName)) {\n+        LOG.debug(\"Normalized key {} to {} \", keyName, normalizedKeyName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIyODc5OA=="}, "originalCommit": {"oid": "9028b91739b58319bf7df010a06ce757e5e0e865"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzOTQ1NDY5OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/OMClientRequest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNzo0NzowOVrOGyJGHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMjo1NDozOVrOGyUEbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIzMTAwNQ==", "bodyText": "What about moving the 'enableFileSystemPaths' flag outside, and call the method conditionally? In that way, the getNormalizedKey will stay a simple util function without knowing about application logic.", "url": "https://github.com/apache/ozone/pull/1196#discussion_r455231005", "createdAt": "2020-07-15T17:47:09Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/OMClientRequest.java", "diffHunk": "@@ -265,4 +272,24 @@ public AuditMessage buildAuditMessage(AuditAction op,\n     auditMap.put(OzoneConsts.VOLUME, volume);\n     return auditMap;\n   }\n+\n+  @SuppressFBWarnings(\"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n+  public static String getNormalizedKey(boolean enableFileSystemPaths,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9028b91739b58319bf7df010a06ce757e5e0e865"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIzNjA1OQ==", "bodyText": "That requires in all over the code, we need to check this flag and call this. I feel this is better way.\nIf needed I can move the code of actual Normalize, to another utility if you expect this to be used else where.", "url": "https://github.com/apache/ozone/pull/1196#discussion_r455236059", "createdAt": "2020-07-15T17:55:30Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/OMClientRequest.java", "diffHunk": "@@ -265,4 +272,24 @@ public AuditMessage buildAuditMessage(AuditAction op,\n     auditMap.put(OzoneConsts.VOLUME, volume);\n     return auditMap;\n   }\n+\n+  @SuppressFBWarnings(\"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n+  public static String getNormalizedKey(boolean enableFileSystemPaths,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIzMTAwNQ=="}, "originalCommit": {"oid": "9028b91739b58319bf7df010a06ce757e5e0e865"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQxMDc5Nw==", "bodyText": "Moved common logic to a new method.", "url": "https://github.com/apache/ozone/pull/1196#discussion_r455410797", "createdAt": "2020-07-15T22:54:39Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/OMClientRequest.java", "diffHunk": "@@ -265,4 +272,24 @@ public AuditMessage buildAuditMessage(AuditAction op,\n     auditMap.put(OzoneConsts.VOLUME, volume);\n     return auditMap;\n   }\n+\n+  @SuppressFBWarnings(\"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n+  public static String getNormalizedKey(boolean enableFileSystemPaths,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIzMTAwNQ=="}, "originalCommit": {"oid": "9028b91739b58319bf7df010a06ce757e5e0e865"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzOTQ2NDM4OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/request/TestNormalizePaths.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNzo0OTo0MlrOGyJL7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMjo1NDoyOFrOGyUEMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIzMjQ5Mg==", "bodyText": "Nit. Can we add a test for key with length = 1? Since we return .substring(1) in the method, trying to be cautious here.", "url": "https://github.com/apache/ozone/pull/1196#discussion_r455232492", "createdAt": "2020-07-15T17:49:42Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/request/TestNormalizePaths.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.hadoop.ozone.om.request;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static org.apache.hadoop.ozone.om.request.OMClientRequest.getNormalizedKey;\n+\n+/**\n+ * Class to test normalize paths.\n+ */\n+public class TestNormalizePaths {\n+\n+  @Test\n+  public void testNormalizePathsEnabled() {\n+\n+    Assert.assertEquals(\"a/b/c/d\",\n+        getNormalizedKey(true, \"a/b/c/d\"));\n+    Assert.assertEquals(\"a/b/c/d\",\n+        getNormalizedKey(true, \"/a/b/c/d\"));\n+    Assert.assertEquals(\"a/b/c/d\",\n+        getNormalizedKey(true, \"////a/b/c/d\"));\n+    Assert.assertEquals(\"a/b/c/d\",\n+        getNormalizedKey(true, \"////a/b/////c/d\"));\n+    Assert.assertEquals(\"a/b/c/...../d\",\n+        getNormalizedKey(true, \"////a/b/////c/...../d\"));\n+    Assert.assertEquals(\"a/b/d\",\n+        getNormalizedKey(true, \"/a/b/c/../d\"));\n+    Assert.assertEquals(\"a/d\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9028b91739b58319bf7df010a06ce757e5e0e865"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQxMDczNg==", "bodyText": "Done", "url": "https://github.com/apache/ozone/pull/1196#discussion_r455410736", "createdAt": "2020-07-15T22:54:28Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/request/TestNormalizePaths.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.hadoop.ozone.om.request;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static org.apache.hadoop.ozone.om.request.OMClientRequest.getNormalizedKey;\n+\n+/**\n+ * Class to test normalize paths.\n+ */\n+public class TestNormalizePaths {\n+\n+  @Test\n+  public void testNormalizePathsEnabled() {\n+\n+    Assert.assertEquals(\"a/b/c/d\",\n+        getNormalizedKey(true, \"a/b/c/d\"));\n+    Assert.assertEquals(\"a/b/c/d\",\n+        getNormalizedKey(true, \"/a/b/c/d\"));\n+    Assert.assertEquals(\"a/b/c/d\",\n+        getNormalizedKey(true, \"////a/b/c/d\"));\n+    Assert.assertEquals(\"a/b/c/d\",\n+        getNormalizedKey(true, \"////a/b/////c/d\"));\n+    Assert.assertEquals(\"a/b/c/...../d\",\n+        getNormalizedKey(true, \"////a/b/////c/...../d\"));\n+    Assert.assertEquals(\"a/b/d\",\n+        getNormalizedKey(true, \"/a/b/c/../d\"));\n+    Assert.assertEquals(\"a/d\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIzMjQ5Mg=="}, "originalCommit": {"oid": "9028b91739b58319bf7df010a06ce757e5e0e865"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MDgxMzQ1OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/common/src/main/resources/ozone-default.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMDo0NzowMFrOGyWLzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMDo0NzowMFrOGyWLzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ0NTQ1NQ==", "bodyText": "I would rephrase first sentence a bit to state that key names will be interpreted as file system paths. / will be treated as a special character and paths will be normalized and must follow Unix filesystem path naming conventions.", "url": "https://github.com/apache/ozone/pull/1196#discussion_r455445455", "createdAt": "2020-07-16T00:47:00Z", "author": {"login": "arp7"}, "path": "hadoop-hdds/common/src/main/resources/ozone-default.xml", "diffHunk": "@@ -2478,4 +2478,18 @@\n       rules in Amazon S3's object key naming guide.\n     </description>\n   </property>\n+\n+  <property>\n+    <name>ozone.om.enable.filesystem.paths</name>\n+    <tag>OZONE, OM</tag>\n+    <value>false</value>\n+    <description>If true, OM will normalize the key paths and also create", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e4532764b1f9727339e9a07c03ae2ff9106843c"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDA3MTg5OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/OMClientRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNzozNDozMVrOGy1V5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNzozNDozMVrOGy1V5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk1NTk0MA==", "bodyText": "Thanks for adding this log message. It will be super useful!", "url": "https://github.com/apache/ozone/pull/1196#discussion_r455955940", "createdAt": "2020-07-16T17:34:31Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/OMClientRequest.java", "diffHunk": "@@ -265,4 +272,30 @@ public AuditMessage buildAuditMessage(AuditAction op,\n     auditMap.put(OzoneConsts.VOLUME, volume);\n     return auditMap;\n   }\n+\n+\n+  public static String getNormalizedKey(boolean enableFileSystemPaths,\n+      String keyName) {\n+    if (enableFileSystemPaths) {\n+      return getNormalizedKey(keyName);\n+    } else {\n+      return keyName;\n+    }\n+  }\n+\n+  @SuppressFBWarnings(\"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n+  public static String getNormalizedKey(String keyName) {\n+    String normalizedKeyName;\n+    if (keyName.startsWith(OM_KEY_PREFIX)) {\n+      normalizedKeyName = Paths.get(keyName).toUri().normalize().getPath();\n+    } else {\n+      normalizedKeyName = Paths.get(OM_KEY_PREFIX, keyName).toUri()\n+          .normalize().getPath();\n+    }\n+    if (!keyName.equals(normalizedKeyName)) {\n+      LOG.debug(\"Normalized key {} to {} \", keyName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e4532764b1f9727339e9a07c03ae2ff9106843c"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDA5OTcwOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileRequest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNzo0MjoxOVrOGy1nQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNzo1NTo1MVrOGy2H_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2MDM4NQ==", "bodyText": "Leading / in path should be dropped at this point, right?", "url": "https://github.com/apache/ozone/pull/1196#discussion_r455960385", "createdAt": "2020-07-16T17:42:19Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileRequest.java", "diffHunk": "@@ -79,15 +79,11 @@ public static OMPathInfo verifyFilesInPath(\n       String dbDirKeyName = omMetadataManager.getOzoneDirKey(volumeName,\n           bucketName, pathName);\n \n-      if (omMetadataManager.getKeyTable().isExist(dbKeyName)) {\n-        // Found a file in the given path.\n-        // Check if this is actual file or a file in the given path\n-        if (dbKeyName.equals(fileNameFromDetails)) {\n-          result = OMDirectoryResult.FILE_EXISTS;\n-        } else {\n-          result = OMDirectoryResult.FILE_EXISTS_IN_GIVENPATH;\n-        }\n-      } else if (omMetadataManager.getKeyTable().isExist(dbDirKeyName)) {\n+      // Check first for dir. This is to handle leading \"/\" in path, which", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e4532764b1f9727339e9a07c03ae2ff9106843c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2ODc2Nw==", "bodyText": "Yes. This change was required, when we are allowing leading / in keyName. I will revert the change", "url": "https://github.com/apache/ozone/pull/1196#discussion_r455968767", "createdAt": "2020-07-16T17:55:51Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileRequest.java", "diffHunk": "@@ -79,15 +79,11 @@ public static OMPathInfo verifyFilesInPath(\n       String dbDirKeyName = omMetadataManager.getOzoneDirKey(volumeName,\n           bucketName, pathName);\n \n-      if (omMetadataManager.getKeyTable().isExist(dbKeyName)) {\n-        // Found a file in the given path.\n-        // Check if this is actual file or a file in the given path\n-        if (dbKeyName.equals(fileNameFromDetails)) {\n-          result = OMDirectoryResult.FILE_EXISTS;\n-        } else {\n-          result = OMDirectoryResult.FILE_EXISTS_IN_GIVENPATH;\n-        }\n-      } else if (omMetadataManager.getKeyTable().isExist(dbDirKeyName)) {\n+      // Check first for dir. This is to handle leading \"/\" in path, which", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2MDM4NQ=="}, "originalCommit": {"oid": "7e4532764b1f9727339e9a07c03ae2ff9106843c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDEwNTcyOnYy", "diffSide": "LEFT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileRequest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNzo0Mzo1NlrOGy1q3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNzo1NToyNlrOGy2HDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2MTMxMA==", "bodyText": "I am a little bit worried about changes to OMFileRequest. There is a risk of changing the behavior and invalidating the app-compat testing we have done so far.", "url": "https://github.com/apache/ozone/pull/1196#discussion_r455961310", "createdAt": "2020-07-16T17:43:56Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileRequest.java", "diffHunk": "@@ -79,15 +79,11 @@ public static OMPathInfo verifyFilesInPath(\n       String dbDirKeyName = omMetadataManager.getOzoneDirKey(volumeName,\n           bucketName, pathName);\n \n-      if (omMetadataManager.getKeyTable().isExist(dbKeyName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e4532764b1f9727339e9a07c03ae2ff9106843c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2ODUyNA==", "bodyText": "This change can be reverted as now we don't allow leading / in path names when OMConfig enable.filesystems is set to true. Will updated in my next PR update.", "url": "https://github.com/apache/ozone/pull/1196#discussion_r455968524", "createdAt": "2020-07-16T17:55:26Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileRequest.java", "diffHunk": "@@ -79,15 +79,11 @@ public static OMPathInfo verifyFilesInPath(\n       String dbDirKeyName = omMetadataManager.getOzoneDirKey(volumeName,\n           bucketName, pathName);\n \n-      if (omMetadataManager.getKeyTable().isExist(dbKeyName)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2MTMxMA=="}, "originalCommit": {"oid": "7e4532764b1f9727339e9a07c03ae2ff9106843c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODM5NTAwOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/OMClientRequest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOTowMTo0MFrOGzeBSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMDozMjowNlrOGzgXNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYyMjQxMA==", "bodyText": "Does this mean we are allowing trailing /?", "url": "https://github.com/apache/ozone/pull/1196#discussion_r456622410", "createdAt": "2020-07-17T19:01:40Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/OMClientRequest.java", "diffHunk": "@@ -265,4 +273,72 @@ public AuditMessage buildAuditMessage(AuditAction op,\n     auditMap.put(OzoneConsts.VOLUME, volume);\n     return auditMap;\n   }\n+\n+\n+  public static String validateAndNormalizeKey(boolean enableFileSystemPaths,\n+      String keyName) throws OMException {\n+    if (enableFileSystemPaths) {\n+      return validateAndNormalizeKey(keyName);\n+    } else {\n+      return keyName;\n+    }\n+  }\n+\n+  @SuppressFBWarnings(\"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n+  public static String validateAndNormalizeKey(String keyName)\n+      throws OMException {\n+    String normalizedKeyName;\n+    if (keyName.startsWith(OM_KEY_PREFIX)) {\n+      normalizedKeyName = Paths.get(keyName).toUri().normalize().getPath();\n+    } else {\n+      normalizedKeyName = Paths.get(OM_KEY_PREFIX, keyName).toUri()\n+          .normalize().getPath();\n+    }\n+    if (!keyName.equals(normalizedKeyName)) {\n+      LOG.debug(\"Normalized key {} to {} \", keyName,\n+          normalizedKeyName.substring(1));\n+    }\n+    return isValidKeyPath(normalizedKeyName.substring(1));\n+  }\n+\n+  /**\n+   * Whether the pathname is valid.  Check key names which contain a\n+   * \":\", \".\", \"..\", \"//\", \"\". If it has any of these characters throws\n+   * OMException, else return the path.\n+   */\n+  private static String isValidKeyPath(String path) throws OMException {\n+    boolean isValid = true;\n+\n+    // If keyName is empty string throw error.\n+    if (path.length() == 0) {\n+      throw new OMException(\"Invalid KeyPath, empty keyName\" + path,\n+          INVALID_KEY_NAME);\n+    } else if(path.startsWith(\"/\")) {\n+      isValid = false;\n+    } else {\n+      // Check for \"..\" \".\" \":\" \"/\"\n+      String[] components = StringUtils.split(path, '/');\n+      for (int i = 0; i < components.length; i++) {\n+        String element = components[i];\n+        if (element.equals(\".\") ||\n+            (element.contains(\":\")) ||\n+            (element.contains(\"/\") || element.equals(\"..\"))) {\n+          isValid = false;\n+          break;\n+        }\n+\n+        // The string may end with a /, but not have", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "285d0db3c49d3dfb621ba7a5659b27f8656f0255"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYyNTYwNg==", "bodyText": "I realized this is checked later in OmKeyCreateRequest.", "url": "https://github.com/apache/ozone/pull/1196#discussion_r456625606", "createdAt": "2020-07-17T19:08:43Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/OMClientRequest.java", "diffHunk": "@@ -265,4 +273,72 @@ public AuditMessage buildAuditMessage(AuditAction op,\n     auditMap.put(OzoneConsts.VOLUME, volume);\n     return auditMap;\n   }\n+\n+\n+  public static String validateAndNormalizeKey(boolean enableFileSystemPaths,\n+      String keyName) throws OMException {\n+    if (enableFileSystemPaths) {\n+      return validateAndNormalizeKey(keyName);\n+    } else {\n+      return keyName;\n+    }\n+  }\n+\n+  @SuppressFBWarnings(\"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n+  public static String validateAndNormalizeKey(String keyName)\n+      throws OMException {\n+    String normalizedKeyName;\n+    if (keyName.startsWith(OM_KEY_PREFIX)) {\n+      normalizedKeyName = Paths.get(keyName).toUri().normalize().getPath();\n+    } else {\n+      normalizedKeyName = Paths.get(OM_KEY_PREFIX, keyName).toUri()\n+          .normalize().getPath();\n+    }\n+    if (!keyName.equals(normalizedKeyName)) {\n+      LOG.debug(\"Normalized key {} to {} \", keyName,\n+          normalizedKeyName.substring(1));\n+    }\n+    return isValidKeyPath(normalizedKeyName.substring(1));\n+  }\n+\n+  /**\n+   * Whether the pathname is valid.  Check key names which contain a\n+   * \":\", \".\", \"..\", \"//\", \"\". If it has any of these characters throws\n+   * OMException, else return the path.\n+   */\n+  private static String isValidKeyPath(String path) throws OMException {\n+    boolean isValid = true;\n+\n+    // If keyName is empty string throw error.\n+    if (path.length() == 0) {\n+      throw new OMException(\"Invalid KeyPath, empty keyName\" + path,\n+          INVALID_KEY_NAME);\n+    } else if(path.startsWith(\"/\")) {\n+      isValid = false;\n+    } else {\n+      // Check for \"..\" \".\" \":\" \"/\"\n+      String[] components = StringUtils.split(path, '/');\n+      for (int i = 0; i < components.length; i++) {\n+        String element = components[i];\n+        if (element.equals(\".\") ||\n+            (element.contains(\":\")) ||\n+            (element.contains(\"/\") || element.equals(\"..\"))) {\n+          isValid = false;\n+          break;\n+        }\n+\n+        // The string may end with a /, but not have", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYyMjQxMA=="}, "originalCommit": {"oid": "285d0db3c49d3dfb621ba7a5659b27f8656f0255"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY2MDc4OA==", "bodyText": "Yes, we don't allow for a keyName with trailing /. This method can return after normalization in some cases. So, we checked in OmKeyCreateRequest", "url": "https://github.com/apache/ozone/pull/1196#discussion_r456660788", "createdAt": "2020-07-17T20:32:06Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/OMClientRequest.java", "diffHunk": "@@ -265,4 +273,72 @@ public AuditMessage buildAuditMessage(AuditAction op,\n     auditMap.put(OzoneConsts.VOLUME, volume);\n     return auditMap;\n   }\n+\n+\n+  public static String validateAndNormalizeKey(boolean enableFileSystemPaths,\n+      String keyName) throws OMException {\n+    if (enableFileSystemPaths) {\n+      return validateAndNormalizeKey(keyName);\n+    } else {\n+      return keyName;\n+    }\n+  }\n+\n+  @SuppressFBWarnings(\"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n+  public static String validateAndNormalizeKey(String keyName)\n+      throws OMException {\n+    String normalizedKeyName;\n+    if (keyName.startsWith(OM_KEY_PREFIX)) {\n+      normalizedKeyName = Paths.get(keyName).toUri().normalize().getPath();\n+    } else {\n+      normalizedKeyName = Paths.get(OM_KEY_PREFIX, keyName).toUri()\n+          .normalize().getPath();\n+    }\n+    if (!keyName.equals(normalizedKeyName)) {\n+      LOG.debug(\"Normalized key {} to {} \", keyName,\n+          normalizedKeyName.substring(1));\n+    }\n+    return isValidKeyPath(normalizedKeyName.substring(1));\n+  }\n+\n+  /**\n+   * Whether the pathname is valid.  Check key names which contain a\n+   * \":\", \".\", \"..\", \"//\", \"\". If it has any of these characters throws\n+   * OMException, else return the path.\n+   */\n+  private static String isValidKeyPath(String path) throws OMException {\n+    boolean isValid = true;\n+\n+    // If keyName is empty string throw error.\n+    if (path.length() == 0) {\n+      throw new OMException(\"Invalid KeyPath, empty keyName\" + path,\n+          INVALID_KEY_NAME);\n+    } else if(path.startsWith(\"/\")) {\n+      isValid = false;\n+    } else {\n+      // Check for \"..\" \".\" \":\" \"/\"\n+      String[] components = StringUtils.split(path, '/');\n+      for (int i = 0; i < components.length; i++) {\n+        String element = components[i];\n+        if (element.equals(\".\") ||\n+            (element.contains(\":\")) ||\n+            (element.contains(\"/\") || element.equals(\"..\"))) {\n+          isValid = false;\n+          break;\n+        }\n+\n+        // The string may end with a /, but not have", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYyMjQxMA=="}, "originalCommit": {"oid": "285d0db3c49d3dfb621ba7a5659b27f8656f0255"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODQxMjEwOnYy", "diffSide": "LEFT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileCreateRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOTowNzo0M1rOGzeMAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMTowOTowMlrOGzhQmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYyNTE1NQ==", "bodyText": "Spurious change?", "url": "https://github.com/apache/ozone/pull/1196#discussion_r456625155", "createdAt": "2020-07-17T19:07:43Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileCreateRequest.java", "diffHunk": "@@ -141,7 +141,6 @@ public OMRequest preExecute(OzoneManager ozoneManager) throws IOException {\n               ozoneManager.getPreallocateBlocksMax(),\n               ozoneManager.isGrpcBlockTokenEnabled(),\n               ozoneManager.getOMNodeId());\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "285d0db3c49d3dfb621ba7a5659b27f8656f0255"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY3NTQ4MA==", "bodyText": "Removed it", "url": "https://github.com/apache/ozone/pull/1196#discussion_r456675480", "createdAt": "2020-07-17T21:09:02Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileCreateRequest.java", "diffHunk": "@@ -141,7 +141,6 @@ public OMRequest preExecute(OzoneManager ozoneManager) throws IOException {\n               ozoneManager.getPreallocateBlocksMax(),\n               ozoneManager.isGrpcBlockTokenEnabled(),\n               ozoneManager.getOMNodeId());\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYyNTE1NQ=="}, "originalCommit": {"oid": "285d0db3c49d3dfb621ba7a5659b27f8656f0255"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODQxNzU1OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyCreateRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOTowOTozNVrOGzePPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMTowODo1OFrOGzhQew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYyNTk4Mg==", "bodyText": "Let's also mention why it is invalid, else user may be scratching their head. \ud83d\ude42", "url": "https://github.com/apache/ozone/pull/1196#discussion_r456625982", "createdAt": "2020-07-17T19:09:35Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyCreateRequest.java", "diffHunk": "@@ -91,6 +99,19 @@ public OMRequest preExecute(OzoneManager ozoneManager) throws IOException {\n     if(checkKeyNameEnabled){\n       OmUtils.validateKeyName(keyArgs.getKeyName());\n     }\n+\n+    String keyPath = keyArgs.getKeyName();\n+    if (ozoneManager.getEnableFileSystemPaths()) {\n+      // If enabled, disallow keys with trailing /. As in fs semantics\n+      // directories end with trailing /.\n+      keyPath = validateAndNormalizeKey(\n+          ozoneManager.getEnableFileSystemPaths(), keyPath);\n+      if (keyPath.endsWith(\"/\")) {\n+        throw new OMException(\"Invalid KeyPath: \" + keyPath,\n+            OMException.ResultCodes.INVALID_KEY_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "285d0db3c49d3dfb621ba7a5659b27f8656f0255"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY3NTQ1MQ==", "bodyText": "Done", "url": "https://github.com/apache/ozone/pull/1196#discussion_r456675451", "createdAt": "2020-07-17T21:08:58Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyCreateRequest.java", "diffHunk": "@@ -91,6 +99,19 @@ public OMRequest preExecute(OzoneManager ozoneManager) throws IOException {\n     if(checkKeyNameEnabled){\n       OmUtils.validateKeyName(keyArgs.getKeyName());\n     }\n+\n+    String keyPath = keyArgs.getKeyName();\n+    if (ozoneManager.getEnableFileSystemPaths()) {\n+      // If enabled, disallow keys with trailing /. As in fs semantics\n+      // directories end with trailing /.\n+      keyPath = validateAndNormalizeKey(\n+          ozoneManager.getEnableFileSystemPaths(), keyPath);\n+      if (keyPath.endsWith(\"/\")) {\n+        throw new OMException(\"Invalid KeyPath: \" + keyPath,\n+            OMException.ResultCodes.INVALID_KEY_NAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYyNTk4Mg=="}, "originalCommit": {"oid": "285d0db3c49d3dfb621ba7a5659b27f8656f0255"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODQ0NzQ4OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/request/key/TestOMKeyCreateRequest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOToyMDozN1rOGzehzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMDo0NzoxOFrOGzgvQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMDczNA==", "bodyText": "Why is this converted to ../d1/d2/d3? Should it be failed instead due to trailing /?", "url": "https://github.com/apache/ozone/pull/1196#discussion_r456630734", "createdAt": "2020-07-17T19:20:37Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/request/key/TestOMKeyCreateRequest.java", "diffHunk": "@@ -327,7 +344,164 @@ private OMRequest createKeyRequest(boolean isMultipartKey, int partNumber) {\n         .setCmdType(OzoneManagerProtocolProtos.Type.CreateKey)\n         .setClientId(UUID.randomUUID().toString())\n         .setCreateKeyRequest(createKeyRequest).build();\n+  }\n+\n+  @Test\n+  public void testKeyCreateWithFileSystemPathsEnabled() throws Exception {\n+\n+    OzoneConfiguration configuration = new OzoneConfiguration();\n+    configuration.setBoolean(OZONE_OM_ENABLE_FILESYSTEM_PATHS, true);\n+    when(ozoneManager.getConfiguration()).thenReturn(configuration);\n+    when(ozoneManager.getEnableFileSystemPaths()).thenReturn(true);\n+\n+    // Add volume and bucket entries to DB.\n+    addVolumeAndBucketToDB(volumeName, bucketName,\n+        omMetadataManager);\n+\n+\n+    keyName = \"dir1/dir2/dir3/file1\";\n+    createAndCheck(keyName);\n+\n+    // Key with leading '/'.\n+    String keyName = \"/a/b/c/file1\";\n+    createAndCheck(keyName);\n+\n+    // Commit openKey entry.\n+    TestOMRequestUtils.addKeyToTable(false, volumeName, bucketName,\n+        keyName.substring(1), 0L, RATIS, THREE, omMetadataManager);\n+\n+    // Now create another file in same dir path.\n+    keyName = \"/a/b/c/file2\";\n+    createAndCheck(keyName);\n+\n+    // Create key with multiple /'s\n+    // converted to a/b/c/file5\n+    keyName = \"///a/b///c///file5\";\n+    createAndCheck(keyName);\n+\n+    // converted to a/b/c/.../file3\n+    keyName = \"///a/b///c//.../file3\";\n+    createAndCheck(keyName);\n+\n+    // converted to r1/r2\n+    keyName = \"././r1/r2/\";\n+    createAndCheck(keyName);\n+\n+    // converted to ..d1/d2/d3", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "285d0db3c49d3dfb621ba7a5659b27f8656f0255"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY2Njc2MA==", "bodyText": "..d1/d2/d3/ -> ../d1/d2/d3 it removed trailing /. Normalize will take care of removing additional /", "url": "https://github.com/apache/ozone/pull/1196#discussion_r456666760", "createdAt": "2020-07-17T20:46:53Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/request/key/TestOMKeyCreateRequest.java", "diffHunk": "@@ -327,7 +344,164 @@ private OMRequest createKeyRequest(boolean isMultipartKey, int partNumber) {\n         .setCmdType(OzoneManagerProtocolProtos.Type.CreateKey)\n         .setClientId(UUID.randomUUID().toString())\n         .setCreateKeyRequest(createKeyRequest).build();\n+  }\n+\n+  @Test\n+  public void testKeyCreateWithFileSystemPathsEnabled() throws Exception {\n+\n+    OzoneConfiguration configuration = new OzoneConfiguration();\n+    configuration.setBoolean(OZONE_OM_ENABLE_FILESYSTEM_PATHS, true);\n+    when(ozoneManager.getConfiguration()).thenReturn(configuration);\n+    when(ozoneManager.getEnableFileSystemPaths()).thenReturn(true);\n+\n+    // Add volume and bucket entries to DB.\n+    addVolumeAndBucketToDB(volumeName, bucketName,\n+        omMetadataManager);\n+\n+\n+    keyName = \"dir1/dir2/dir3/file1\";\n+    createAndCheck(keyName);\n+\n+    // Key with leading '/'.\n+    String keyName = \"/a/b/c/file1\";\n+    createAndCheck(keyName);\n+\n+    // Commit openKey entry.\n+    TestOMRequestUtils.addKeyToTable(false, volumeName, bucketName,\n+        keyName.substring(1), 0L, RATIS, THREE, omMetadataManager);\n+\n+    // Now create another file in same dir path.\n+    keyName = \"/a/b/c/file2\";\n+    createAndCheck(keyName);\n+\n+    // Create key with multiple /'s\n+    // converted to a/b/c/file5\n+    keyName = \"///a/b///c///file5\";\n+    createAndCheck(keyName);\n+\n+    // converted to a/b/c/.../file3\n+    keyName = \"///a/b///c//.../file3\";\n+    createAndCheck(keyName);\n+\n+    // converted to r1/r2\n+    keyName = \"././r1/r2/\";\n+    createAndCheck(keyName);\n+\n+    // converted to ..d1/d2/d3", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMDczNA=="}, "originalCommit": {"oid": "285d0db3c49d3dfb621ba7a5659b27f8656f0255"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY2Njk0Nw==", "bodyText": "we will fail, even after normalize if we have a case like /a/. -> a/", "url": "https://github.com/apache/ozone/pull/1196#discussion_r456666947", "createdAt": "2020-07-17T20:47:18Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/request/key/TestOMKeyCreateRequest.java", "diffHunk": "@@ -327,7 +344,164 @@ private OMRequest createKeyRequest(boolean isMultipartKey, int partNumber) {\n         .setCmdType(OzoneManagerProtocolProtos.Type.CreateKey)\n         .setClientId(UUID.randomUUID().toString())\n         .setCreateKeyRequest(createKeyRequest).build();\n+  }\n+\n+  @Test\n+  public void testKeyCreateWithFileSystemPathsEnabled() throws Exception {\n+\n+    OzoneConfiguration configuration = new OzoneConfiguration();\n+    configuration.setBoolean(OZONE_OM_ENABLE_FILESYSTEM_PATHS, true);\n+    when(ozoneManager.getConfiguration()).thenReturn(configuration);\n+    when(ozoneManager.getEnableFileSystemPaths()).thenReturn(true);\n+\n+    // Add volume and bucket entries to DB.\n+    addVolumeAndBucketToDB(volumeName, bucketName,\n+        omMetadataManager);\n+\n+\n+    keyName = \"dir1/dir2/dir3/file1\";\n+    createAndCheck(keyName);\n+\n+    // Key with leading '/'.\n+    String keyName = \"/a/b/c/file1\";\n+    createAndCheck(keyName);\n+\n+    // Commit openKey entry.\n+    TestOMRequestUtils.addKeyToTable(false, volumeName, bucketName,\n+        keyName.substring(1), 0L, RATIS, THREE, omMetadataManager);\n+\n+    // Now create another file in same dir path.\n+    keyName = \"/a/b/c/file2\";\n+    createAndCheck(keyName);\n+\n+    // Create key with multiple /'s\n+    // converted to a/b/c/file5\n+    keyName = \"///a/b///c///file5\";\n+    createAndCheck(keyName);\n+\n+    // converted to a/b/c/.../file3\n+    keyName = \"///a/b///c//.../file3\";\n+    createAndCheck(keyName);\n+\n+    // converted to r1/r2\n+    keyName = \"././r1/r2/\";\n+    createAndCheck(keyName);\n+\n+    // converted to ..d1/d2/d3", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMDczNA=="}, "originalCommit": {"oid": "285d0db3c49d3dfb621ba7a5659b27f8656f0255"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODQ0OTc3OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/request/key/TestOMKeyCreateRequest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOToyMToyOVrOGzejLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMDo1MTo1OFrOGzg2HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMTA4Ng==", "bodyText": "Also let's add a check for ../a/b and /../a/b.", "url": "https://github.com/apache/ozone/pull/1196#discussion_r456631086", "createdAt": "2020-07-17T19:21:29Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/request/key/TestOMKeyCreateRequest.java", "diffHunk": "@@ -327,7 +344,164 @@ private OMRequest createKeyRequest(boolean isMultipartKey, int partNumber) {\n         .setCmdType(OzoneManagerProtocolProtos.Type.CreateKey)\n         .setClientId(UUID.randomUUID().toString())\n         .setCreateKeyRequest(createKeyRequest).build();\n+  }\n+\n+  @Test\n+  public void testKeyCreateWithFileSystemPathsEnabled() throws Exception {\n+\n+    OzoneConfiguration configuration = new OzoneConfiguration();\n+    configuration.setBoolean(OZONE_OM_ENABLE_FILESYSTEM_PATHS, true);\n+    when(ozoneManager.getConfiguration()).thenReturn(configuration);\n+    when(ozoneManager.getEnableFileSystemPaths()).thenReturn(true);\n+\n+    // Add volume and bucket entries to DB.\n+    addVolumeAndBucketToDB(volumeName, bucketName,\n+        omMetadataManager);\n+\n+\n+    keyName = \"dir1/dir2/dir3/file1\";\n+    createAndCheck(keyName);\n+\n+    // Key with leading '/'.\n+    String keyName = \"/a/b/c/file1\";\n+    createAndCheck(keyName);\n+\n+    // Commit openKey entry.\n+    TestOMRequestUtils.addKeyToTable(false, volumeName, bucketName,\n+        keyName.substring(1), 0L, RATIS, THREE, omMetadataManager);\n+\n+    // Now create another file in same dir path.\n+    keyName = \"/a/b/c/file2\";\n+    createAndCheck(keyName);\n+\n+    // Create key with multiple /'s\n+    // converted to a/b/c/file5\n+    keyName = \"///a/b///c///file5\";\n+    createAndCheck(keyName);\n+\n+    // converted to a/b/c/.../file3\n+    keyName = \"///a/b///c//.../file3\";\n+    createAndCheck(keyName);\n+\n+    // converted to r1/r2\n+    keyName = \"././r1/r2/\";\n+    createAndCheck(keyName);\n+\n+    // converted to ..d1/d2/d3\n+    keyName = \"..d1/d2/d3/\";\n+    createAndCheck(keyName);\n+\n+    // Create a file, where a file already exists in the path.\n+    // Now try with a file exists in path. Should fail.\n+    keyName = \"/a/b/c/file1/file3\";\n+    checkNotAFile(keyName);\n+\n+    // Empty keyName.\n+    keyName = \"\";\n+    checkNotAValidPath(keyName);\n+\n+    // Key name ends with /\n+    keyName = \"/a/./\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \"/////\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \"../../b/c\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "285d0db3c49d3dfb621ba7a5659b27f8656f0255"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY2ODcwMQ==", "bodyText": "Done", "url": "https://github.com/apache/ozone/pull/1196#discussion_r456668701", "createdAt": "2020-07-17T20:51:58Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/request/key/TestOMKeyCreateRequest.java", "diffHunk": "@@ -327,7 +344,164 @@ private OMRequest createKeyRequest(boolean isMultipartKey, int partNumber) {\n         .setCmdType(OzoneManagerProtocolProtos.Type.CreateKey)\n         .setClientId(UUID.randomUUID().toString())\n         .setCreateKeyRequest(createKeyRequest).build();\n+  }\n+\n+  @Test\n+  public void testKeyCreateWithFileSystemPathsEnabled() throws Exception {\n+\n+    OzoneConfiguration configuration = new OzoneConfiguration();\n+    configuration.setBoolean(OZONE_OM_ENABLE_FILESYSTEM_PATHS, true);\n+    when(ozoneManager.getConfiguration()).thenReturn(configuration);\n+    when(ozoneManager.getEnableFileSystemPaths()).thenReturn(true);\n+\n+    // Add volume and bucket entries to DB.\n+    addVolumeAndBucketToDB(volumeName, bucketName,\n+        omMetadataManager);\n+\n+\n+    keyName = \"dir1/dir2/dir3/file1\";\n+    createAndCheck(keyName);\n+\n+    // Key with leading '/'.\n+    String keyName = \"/a/b/c/file1\";\n+    createAndCheck(keyName);\n+\n+    // Commit openKey entry.\n+    TestOMRequestUtils.addKeyToTable(false, volumeName, bucketName,\n+        keyName.substring(1), 0L, RATIS, THREE, omMetadataManager);\n+\n+    // Now create another file in same dir path.\n+    keyName = \"/a/b/c/file2\";\n+    createAndCheck(keyName);\n+\n+    // Create key with multiple /'s\n+    // converted to a/b/c/file5\n+    keyName = \"///a/b///c///file5\";\n+    createAndCheck(keyName);\n+\n+    // converted to a/b/c/.../file3\n+    keyName = \"///a/b///c//.../file3\";\n+    createAndCheck(keyName);\n+\n+    // converted to r1/r2\n+    keyName = \"././r1/r2/\";\n+    createAndCheck(keyName);\n+\n+    // converted to ..d1/d2/d3\n+    keyName = \"..d1/d2/d3/\";\n+    createAndCheck(keyName);\n+\n+    // Create a file, where a file already exists in the path.\n+    // Now try with a file exists in path. Should fail.\n+    keyName = \"/a/b/c/file1/file3\";\n+    checkNotAFile(keyName);\n+\n+    // Empty keyName.\n+    keyName = \"\";\n+    checkNotAValidPath(keyName);\n+\n+    // Key name ends with /\n+    keyName = \"/a/./\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \"/////\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \"../../b/c\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMTA4Ng=="}, "originalCommit": {"oid": "285d0db3c49d3dfb621ba7a5659b27f8656f0255"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODQ1NDU5OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/request/key/TestOMKeyCreateRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOToyMzoyNFrOGzemPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOToyNjo0MlrOGzerYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMTg3MA==", "bodyText": "Let's add a separate test case for validateAndNormalizeKey itself. All it does is call validateAndNormalizeKey with bunch of hard-coded input and asserts on the expected output.", "url": "https://github.com/apache/ozone/pull/1196#discussion_r456631870", "createdAt": "2020-07-17T19:23:24Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/request/key/TestOMKeyCreateRequest.java", "diffHunk": "@@ -327,7 +344,164 @@ private OMRequest createKeyRequest(boolean isMultipartKey, int partNumber) {\n         .setCmdType(OzoneManagerProtocolProtos.Type.CreateKey)\n         .setClientId(UUID.randomUUID().toString())\n         .setCreateKeyRequest(createKeyRequest).build();\n+  }\n+\n+  @Test\n+  public void testKeyCreateWithFileSystemPathsEnabled() throws Exception {\n+\n+    OzoneConfiguration configuration = new OzoneConfiguration();\n+    configuration.setBoolean(OZONE_OM_ENABLE_FILESYSTEM_PATHS, true);\n+    when(ozoneManager.getConfiguration()).thenReturn(configuration);\n+    when(ozoneManager.getEnableFileSystemPaths()).thenReturn(true);\n+\n+    // Add volume and bucket entries to DB.\n+    addVolumeAndBucketToDB(volumeName, bucketName,\n+        omMetadataManager);\n+\n+\n+    keyName = \"dir1/dir2/dir3/file1\";\n+    createAndCheck(keyName);\n+\n+    // Key with leading '/'.\n+    String keyName = \"/a/b/c/file1\";\n+    createAndCheck(keyName);\n+\n+    // Commit openKey entry.\n+    TestOMRequestUtils.addKeyToTable(false, volumeName, bucketName,\n+        keyName.substring(1), 0L, RATIS, THREE, omMetadataManager);\n+\n+    // Now create another file in same dir path.\n+    keyName = \"/a/b/c/file2\";\n+    createAndCheck(keyName);\n+\n+    // Create key with multiple /'s\n+    // converted to a/b/c/file5\n+    keyName = \"///a/b///c///file5\";\n+    createAndCheck(keyName);\n+\n+    // converted to a/b/c/.../file3\n+    keyName = \"///a/b///c//.../file3\";\n+    createAndCheck(keyName);\n+\n+    // converted to r1/r2\n+    keyName = \"././r1/r2/\";\n+    createAndCheck(keyName);\n+\n+    // converted to ..d1/d2/d3\n+    keyName = \"..d1/d2/d3/\";\n+    createAndCheck(keyName);\n+\n+    // Create a file, where a file already exists in the path.\n+    // Now try with a file exists in path. Should fail.\n+    keyName = \"/a/b/c/file1/file3\";\n+    checkNotAFile(keyName);\n+\n+    // Empty keyName.\n+    keyName = \"\";\n+    checkNotAValidPath(keyName);\n+\n+    // Key name ends with /\n+    keyName = \"/a/./\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \"/////\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \"../../b/c\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \"../../b/c/\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \"../../b:/c/\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \":/c/\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \"\";\n+    checkNotAValidPath(keyName);\n+\n+  }\n+\n \n+  private void checkNotAValidPath(String keyName) {\n+    OMRequest omRequest = createKeyRequest(false, 0, keyName);\n+    OMKeyCreateRequest omKeyCreateRequest = new OMKeyCreateRequest(omRequest);\n+\n+    try {\n+      omKeyCreateRequest.preExecute(ozoneManager);\n+      fail(\"checkNotAValidPath failed for path\" + keyName);\n+    } catch (IOException ex) {\n+      Assert.assertTrue(ex instanceof OMException);\n+      OMException omException = (OMException) ex;\n+      Assert.assertEquals(OMException.ResultCodes.INVALID_KEY_NAME,\n+          omException.getResult());\n+    }\n+\n+\n+  }\n+  private void checkNotAFile(String keyName) throws Exception {\n+    OMRequest omRequest = createKeyRequest(false, 0, keyName);\n+\n+    OMKeyCreateRequest omKeyCreateRequest = new OMKeyCreateRequest(omRequest);\n+\n+    omRequest = omKeyCreateRequest.preExecute(ozoneManager);\n+\n+    omKeyCreateRequest = new OMKeyCreateRequest(omRequest);\n+\n+    OMClientResponse omClientResponse =\n+        omKeyCreateRequest.validateAndUpdateCache(ozoneManager,\n+            101L, ozoneManagerDoubleBufferHelper);\n+\n+    Assert.assertEquals(NOT_A_FILE,\n+        omClientResponse.getOMResponse().getStatus());\n+  }\n+\n+\n+  private void createAndCheck(String keyName) throws Exception {\n+    OMRequest omRequest = createKeyRequest(false, 0, keyName);\n+\n+    OMKeyCreateRequest omKeyCreateRequest = new OMKeyCreateRequest(omRequest);\n+\n+    omRequest = omKeyCreateRequest.preExecute(ozoneManager);\n+\n+    omKeyCreateRequest = new OMKeyCreateRequest(omRequest);\n+\n+    OMClientResponse omClientResponse =\n+        omKeyCreateRequest.validateAndUpdateCache(ozoneManager,\n+            101L, ozoneManagerDoubleBufferHelper);\n+\n+    Assert.assertEquals(OK, omClientResponse.getOMResponse().getStatus());\n+\n+    checkCreatedPaths(omKeyCreateRequest, omRequest, keyName);\n+  }\n+\n+  private void checkCreatedPaths(OMKeyCreateRequest omKeyCreateRequest,\n+      OMRequest omRequest, String keyName) throws Exception {\n+    keyName = omKeyCreateRequest.validateAndNormalizeKey(true, keyName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "285d0db3c49d3dfb621ba7a5659b27f8656f0255"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMzE4NQ==", "bodyText": "Ignore this comment, I see it above now. Was reviewing files out of order.", "url": "https://github.com/apache/ozone/pull/1196#discussion_r456633185", "createdAt": "2020-07-17T19:26:42Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/request/key/TestOMKeyCreateRequest.java", "diffHunk": "@@ -327,7 +344,164 @@ private OMRequest createKeyRequest(boolean isMultipartKey, int partNumber) {\n         .setCmdType(OzoneManagerProtocolProtos.Type.CreateKey)\n         .setClientId(UUID.randomUUID().toString())\n         .setCreateKeyRequest(createKeyRequest).build();\n+  }\n+\n+  @Test\n+  public void testKeyCreateWithFileSystemPathsEnabled() throws Exception {\n+\n+    OzoneConfiguration configuration = new OzoneConfiguration();\n+    configuration.setBoolean(OZONE_OM_ENABLE_FILESYSTEM_PATHS, true);\n+    when(ozoneManager.getConfiguration()).thenReturn(configuration);\n+    when(ozoneManager.getEnableFileSystemPaths()).thenReturn(true);\n+\n+    // Add volume and bucket entries to DB.\n+    addVolumeAndBucketToDB(volumeName, bucketName,\n+        omMetadataManager);\n+\n+\n+    keyName = \"dir1/dir2/dir3/file1\";\n+    createAndCheck(keyName);\n+\n+    // Key with leading '/'.\n+    String keyName = \"/a/b/c/file1\";\n+    createAndCheck(keyName);\n+\n+    // Commit openKey entry.\n+    TestOMRequestUtils.addKeyToTable(false, volumeName, bucketName,\n+        keyName.substring(1), 0L, RATIS, THREE, omMetadataManager);\n+\n+    // Now create another file in same dir path.\n+    keyName = \"/a/b/c/file2\";\n+    createAndCheck(keyName);\n+\n+    // Create key with multiple /'s\n+    // converted to a/b/c/file5\n+    keyName = \"///a/b///c///file5\";\n+    createAndCheck(keyName);\n+\n+    // converted to a/b/c/.../file3\n+    keyName = \"///a/b///c//.../file3\";\n+    createAndCheck(keyName);\n+\n+    // converted to r1/r2\n+    keyName = \"././r1/r2/\";\n+    createAndCheck(keyName);\n+\n+    // converted to ..d1/d2/d3\n+    keyName = \"..d1/d2/d3/\";\n+    createAndCheck(keyName);\n+\n+    // Create a file, where a file already exists in the path.\n+    // Now try with a file exists in path. Should fail.\n+    keyName = \"/a/b/c/file1/file3\";\n+    checkNotAFile(keyName);\n+\n+    // Empty keyName.\n+    keyName = \"\";\n+    checkNotAValidPath(keyName);\n+\n+    // Key name ends with /\n+    keyName = \"/a/./\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \"/////\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \"../../b/c\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \"../../b/c/\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \"../../b:/c/\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \":/c/\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \"\";\n+    checkNotAValidPath(keyName);\n+\n+  }\n+\n \n+  private void checkNotAValidPath(String keyName) {\n+    OMRequest omRequest = createKeyRequest(false, 0, keyName);\n+    OMKeyCreateRequest omKeyCreateRequest = new OMKeyCreateRequest(omRequest);\n+\n+    try {\n+      omKeyCreateRequest.preExecute(ozoneManager);\n+      fail(\"checkNotAValidPath failed for path\" + keyName);\n+    } catch (IOException ex) {\n+      Assert.assertTrue(ex instanceof OMException);\n+      OMException omException = (OMException) ex;\n+      Assert.assertEquals(OMException.ResultCodes.INVALID_KEY_NAME,\n+          omException.getResult());\n+    }\n+\n+\n+  }\n+  private void checkNotAFile(String keyName) throws Exception {\n+    OMRequest omRequest = createKeyRequest(false, 0, keyName);\n+\n+    OMKeyCreateRequest omKeyCreateRequest = new OMKeyCreateRequest(omRequest);\n+\n+    omRequest = omKeyCreateRequest.preExecute(ozoneManager);\n+\n+    omKeyCreateRequest = new OMKeyCreateRequest(omRequest);\n+\n+    OMClientResponse omClientResponse =\n+        omKeyCreateRequest.validateAndUpdateCache(ozoneManager,\n+            101L, ozoneManagerDoubleBufferHelper);\n+\n+    Assert.assertEquals(NOT_A_FILE,\n+        omClientResponse.getOMResponse().getStatus());\n+  }\n+\n+\n+  private void createAndCheck(String keyName) throws Exception {\n+    OMRequest omRequest = createKeyRequest(false, 0, keyName);\n+\n+    OMKeyCreateRequest omKeyCreateRequest = new OMKeyCreateRequest(omRequest);\n+\n+    omRequest = omKeyCreateRequest.preExecute(ozoneManager);\n+\n+    omKeyCreateRequest = new OMKeyCreateRequest(omRequest);\n+\n+    OMClientResponse omClientResponse =\n+        omKeyCreateRequest.validateAndUpdateCache(ozoneManager,\n+            101L, ozoneManagerDoubleBufferHelper);\n+\n+    Assert.assertEquals(OK, omClientResponse.getOMResponse().getStatus());\n+\n+    checkCreatedPaths(omKeyCreateRequest, omRequest, keyName);\n+  }\n+\n+  private void checkCreatedPaths(OMKeyCreateRequest omKeyCreateRequest,\n+      OMRequest omRequest, String keyName) throws Exception {\n+    keyName = omKeyCreateRequest.validateAndNormalizeKey(true, keyName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMTg3MA=="}, "originalCommit": {"oid": "285d0db3c49d3dfb621ba7a5659b27f8656f0255"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODQ1NTIxOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/request/key/TestOMKeyCreateRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOToyMzozNFrOGzemkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOToyMzozNFrOGzemkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMTk1NA==", "bodyText": "Nice!", "url": "https://github.com/apache/ozone/pull/1196#discussion_r456631954", "createdAt": "2020-07-17T19:23:34Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/request/key/TestOMKeyCreateRequest.java", "diffHunk": "@@ -327,7 +344,164 @@ private OMRequest createKeyRequest(boolean isMultipartKey, int partNumber) {\n         .setCmdType(OzoneManagerProtocolProtos.Type.CreateKey)\n         .setClientId(UUID.randomUUID().toString())\n         .setCreateKeyRequest(createKeyRequest).build();\n+  }\n+\n+  @Test\n+  public void testKeyCreateWithFileSystemPathsEnabled() throws Exception {\n+\n+    OzoneConfiguration configuration = new OzoneConfiguration();\n+    configuration.setBoolean(OZONE_OM_ENABLE_FILESYSTEM_PATHS, true);\n+    when(ozoneManager.getConfiguration()).thenReturn(configuration);\n+    when(ozoneManager.getEnableFileSystemPaths()).thenReturn(true);\n+\n+    // Add volume and bucket entries to DB.\n+    addVolumeAndBucketToDB(volumeName, bucketName,\n+        omMetadataManager);\n+\n+\n+    keyName = \"dir1/dir2/dir3/file1\";\n+    createAndCheck(keyName);\n+\n+    // Key with leading '/'.\n+    String keyName = \"/a/b/c/file1\";\n+    createAndCheck(keyName);\n+\n+    // Commit openKey entry.\n+    TestOMRequestUtils.addKeyToTable(false, volumeName, bucketName,\n+        keyName.substring(1), 0L, RATIS, THREE, omMetadataManager);\n+\n+    // Now create another file in same dir path.\n+    keyName = \"/a/b/c/file2\";\n+    createAndCheck(keyName);\n+\n+    // Create key with multiple /'s\n+    // converted to a/b/c/file5\n+    keyName = \"///a/b///c///file5\";\n+    createAndCheck(keyName);\n+\n+    // converted to a/b/c/.../file3\n+    keyName = \"///a/b///c//.../file3\";\n+    createAndCheck(keyName);\n+\n+    // converted to r1/r2\n+    keyName = \"././r1/r2/\";\n+    createAndCheck(keyName);\n+\n+    // converted to ..d1/d2/d3\n+    keyName = \"..d1/d2/d3/\";\n+    createAndCheck(keyName);\n+\n+    // Create a file, where a file already exists in the path.\n+    // Now try with a file exists in path. Should fail.\n+    keyName = \"/a/b/c/file1/file3\";\n+    checkNotAFile(keyName);\n+\n+    // Empty keyName.\n+    keyName = \"\";\n+    checkNotAValidPath(keyName);\n+\n+    // Key name ends with /\n+    keyName = \"/a/./\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \"/////\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \"../../b/c\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \"../../b/c/\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \"../../b:/c/\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \":/c/\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \"\";\n+    checkNotAValidPath(keyName);\n+\n+  }\n+\n \n+  private void checkNotAValidPath(String keyName) {\n+    OMRequest omRequest = createKeyRequest(false, 0, keyName);\n+    OMKeyCreateRequest omKeyCreateRequest = new OMKeyCreateRequest(omRequest);\n+\n+    try {\n+      omKeyCreateRequest.preExecute(ozoneManager);\n+      fail(\"checkNotAValidPath failed for path\" + keyName);\n+    } catch (IOException ex) {\n+      Assert.assertTrue(ex instanceof OMException);\n+      OMException omException = (OMException) ex;\n+      Assert.assertEquals(OMException.ResultCodes.INVALID_KEY_NAME,\n+          omException.getResult());\n+    }\n+\n+\n+  }\n+  private void checkNotAFile(String keyName) throws Exception {\n+    OMRequest omRequest = createKeyRequest(false, 0, keyName);\n+\n+    OMKeyCreateRequest omKeyCreateRequest = new OMKeyCreateRequest(omRequest);\n+\n+    omRequest = omKeyCreateRequest.preExecute(ozoneManager);\n+\n+    omKeyCreateRequest = new OMKeyCreateRequest(omRequest);\n+\n+    OMClientResponse omClientResponse =\n+        omKeyCreateRequest.validateAndUpdateCache(ozoneManager,\n+            101L, ozoneManagerDoubleBufferHelper);\n+\n+    Assert.assertEquals(NOT_A_FILE,\n+        omClientResponse.getOMResponse().getStatus());\n+  }\n+\n+\n+  private void createAndCheck(String keyName) throws Exception {\n+    OMRequest omRequest = createKeyRequest(false, 0, keyName);\n+\n+    OMKeyCreateRequest omKeyCreateRequest = new OMKeyCreateRequest(omRequest);\n+\n+    omRequest = omKeyCreateRequest.preExecute(ozoneManager);\n+\n+    omKeyCreateRequest = new OMKeyCreateRequest(omRequest);\n+\n+    OMClientResponse omClientResponse =\n+        omKeyCreateRequest.validateAndUpdateCache(ozoneManager,\n+            101L, ozoneManagerDoubleBufferHelper);\n+\n+    Assert.assertEquals(OK, omClientResponse.getOMResponse().getStatus());\n+\n+    checkCreatedPaths(omKeyCreateRequest, omRequest, keyName);\n+  }\n+\n+  private void checkCreatedPaths(OMKeyCreateRequest omKeyCreateRequest,\n+      OMRequest omRequest, String keyName) throws Exception {\n+    keyName = omKeyCreateRequest.validateAndNormalizeKey(true, keyName);\n+    // Check intermediate directories created or not.\n+    Path keyPath = Paths.get(keyName);\n+    checkIntermediatePaths(keyPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "285d0db3c49d3dfb621ba7a5659b27f8656f0255"}, "originalPosition": 194}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODQ2NjY2OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/request/TestNormalizePaths.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOToyNzo1MFrOGzetVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQxNzoxNDo1MFrOGzpbog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMzY4Ng==", "bodyText": "Bharat, more than two dots should normalize to itself. In Unix I can create a dir named ... or ......", "url": "https://github.com/apache/ozone/pull/1196#discussion_r456633686", "createdAt": "2020-07-17T19:27:50Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/request/TestNormalizePaths.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.hadoop.ozone.om.request;\n+\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import static org.apache.hadoop.ozone.om.request.OMClientRequest.validateAndNormalizeKey;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Class to test normalize paths.\n+ */\n+public class TestNormalizePaths {\n+\n+  @Rule\n+  public ExpectedException exceptionRule = ExpectedException.none();\n+\n+  @Test\n+  public void testNormalizePathsEnabled() throws Exception {\n+\n+    Assert.assertEquals(\"a/b/c/d\",\n+        validateAndNormalizeKey(true, \"a/b/c/d\"));\n+    Assert.assertEquals(\"a/b/c/d\",\n+        validateAndNormalizeKey(true, \"/a/b/c/d\"));\n+    Assert.assertEquals(\"a/b/c/d\",\n+        validateAndNormalizeKey(true, \"////a/b/c/d\"));\n+    Assert.assertEquals(\"a/b/c/d\",\n+        validateAndNormalizeKey(true, \"////a/b/////c/d\"));\n+    Assert.assertEquals(\"a/b/c/...../d\",\n+        validateAndNormalizeKey(true, \"////a/b/////c/...../d\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "285d0db3c49d3dfb621ba7a5659b27f8656f0255"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY2NjI2Nw==", "bodyText": "yes, you are right. It is the samething right, we are checking a/b/c/...../d, just it has removed additional and leading /", "url": "https://github.com/apache/ozone/pull/1196#discussion_r456666267", "createdAt": "2020-07-17T20:45:40Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/request/TestNormalizePaths.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.hadoop.ozone.om.request;\n+\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import static org.apache.hadoop.ozone.om.request.OMClientRequest.validateAndNormalizeKey;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Class to test normalize paths.\n+ */\n+public class TestNormalizePaths {\n+\n+  @Rule\n+  public ExpectedException exceptionRule = ExpectedException.none();\n+\n+  @Test\n+  public void testNormalizePathsEnabled() throws Exception {\n+\n+    Assert.assertEquals(\"a/b/c/d\",\n+        validateAndNormalizeKey(true, \"a/b/c/d\"));\n+    Assert.assertEquals(\"a/b/c/d\",\n+        validateAndNormalizeKey(true, \"/a/b/c/d\"));\n+    Assert.assertEquals(\"a/b/c/d\",\n+        validateAndNormalizeKey(true, \"////a/b/c/d\"));\n+    Assert.assertEquals(\"a/b/c/d\",\n+        validateAndNormalizeKey(true, \"////a/b/////c/d\"));\n+    Assert.assertEquals(\"a/b/c/...../d\",\n+        validateAndNormalizeKey(true, \"////a/b/////c/...../d\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMzY4Ng=="}, "originalCommit": {"oid": "285d0db3c49d3dfb621ba7a5659b27f8656f0255"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjgwOTM3OA==", "bodyText": "Right, I got confused.", "url": "https://github.com/apache/ozone/pull/1196#discussion_r456809378", "createdAt": "2020-07-18T17:14:50Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/request/TestNormalizePaths.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.hadoop.ozone.om.request;\n+\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import static org.apache.hadoop.ozone.om.request.OMClientRequest.validateAndNormalizeKey;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Class to test normalize paths.\n+ */\n+public class TestNormalizePaths {\n+\n+  @Rule\n+  public ExpectedException exceptionRule = ExpectedException.none();\n+\n+  @Test\n+  public void testNormalizePathsEnabled() throws Exception {\n+\n+    Assert.assertEquals(\"a/b/c/d\",\n+        validateAndNormalizeKey(true, \"a/b/c/d\"));\n+    Assert.assertEquals(\"a/b/c/d\",\n+        validateAndNormalizeKey(true, \"/a/b/c/d\"));\n+    Assert.assertEquals(\"a/b/c/d\",\n+        validateAndNormalizeKey(true, \"////a/b/c/d\"));\n+    Assert.assertEquals(\"a/b/c/d\",\n+        validateAndNormalizeKey(true, \"////a/b/////c/d\"));\n+    Assert.assertEquals(\"a/b/c/...../d\",\n+        validateAndNormalizeKey(true, \"////a/b/////c/...../d\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMzY4Ng=="}, "originalCommit": {"oid": "285d0db3c49d3dfb621ba7a5659b27f8656f0255"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3975, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}