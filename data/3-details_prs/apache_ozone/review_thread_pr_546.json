{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0MDEwNDQ5", "number": 546, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDo0Mzo1M1rODfA1Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMTozMzo0OFrODhOtyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODQ2MDUxOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/recon/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDo0Mzo1M1rOFoeUEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNToyNzoyMVrOFoiIMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4NDAxNw==", "bodyText": "Is this block commented out by mistake?", "url": "https://github.com/apache/ozone/pull/546#discussion_r377984017", "createdAt": "2020-02-12T00:43:53Z", "author": {"login": "vivekratnavel"}, "path": "hadoop-ozone/recon/pom.xml", "diffHunk": "@@ -88,83 +88,83 @@\n       2. to install dependencies with yarn install\n       3. building the frontend application\n       -->\n-      <plugin>\n-        <groupId>com.github.eirslett</groupId>\n-        <artifactId>frontend-maven-plugin</artifactId>\n-        <version>1.6</version>\n-        <configuration>\n-          <installDirectory>target</installDirectory>\n-          <workingDirectory>${basedir}/src/main/resources/webapps/recon/ozone-recon-web</workingDirectory>\n-        </configuration>\n-        <executions>\n-          <execution>\n-            <id>Install node and yarn locally to the project</id>\n-            <goals>\n-              <goal>install-node-and-yarn</goal>\n-            </goals>\n-            <configuration>\n-              <nodeVersion>v12.1.0</nodeVersion>\n-              <yarnVersion>v1.9.2</yarnVersion>\n-            </configuration>\n-          </execution>\n-          <execution>\n-            <id>yarn install</id>\n-            <goals>\n-              <goal>yarn</goal>\n-            </goals>\n-            <configuration>\n-              <arguments>install</arguments>\n-            </configuration>\n-          </execution>\n-          <execution>\n-            <id>Build frontend</id>\n-            <goals>\n-              <goal>yarn</goal>\n-            </goals>\n-            <configuration>\n-              <arguments>run build</arguments>\n-            </configuration>\n-          </execution>\n-        </executions>\n-      </plugin>\n-      <plugin>\n-        <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-resources-plugin</artifactId>\n-        <executions>\n-          <execution>\n-            <id>Copy frontend build to target</id>\n-            <phase>process-resources</phase>\n-            <goals>\n-              <goal>copy-resources</goal>\n-            </goals>\n-            <configuration>\n-              <outputDirectory>${project.build.outputDirectory}/webapps/recon</outputDirectory>\n-              <resources>\n-                <resource>\n-                  <directory>${basedir}/src/main/resources/webapps/recon/ozone-recon-web/build</directory>\n-                  <filtering>true</filtering>\n-                </resource>\n-              </resources>\n-            </configuration>\n-          </execution>\n-          <execution>\n-            <id>Copy frontend static files to target</id>\n-            <phase>process-resources</phase>\n-            <goals>\n-              <goal>copy-resources</goal>\n-            </goals>\n-            <configuration>\n-              <outputDirectory>${project.build.outputDirectory}/webapps/static</outputDirectory>\n-              <resources>\n-                <resource>\n-                  <directory>${basedir}/src/main/resources/webapps/recon/ozone-recon-web/build/static</directory>\n-                  <filtering>true</filtering>\n-                </resource>\n-              </resources>\n-            </configuration>\n-          </execution>\n-        </executions>\n-      </plugin>\n+<!--      <plugin>-->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44899bb2c2e7cd71bff9a8f775a7179e729f706c"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA0NjUxNQ==", "bodyText": "Yes, I had commented out the UI cod for my local build. Removed the change now.", "url": "https://github.com/apache/ozone/pull/546#discussion_r378046515", "createdAt": "2020-02-12T05:27:21Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/recon/pom.xml", "diffHunk": "@@ -88,83 +88,83 @@\n       2. to install dependencies with yarn install\n       3. building the frontend application\n       -->\n-      <plugin>\n-        <groupId>com.github.eirslett</groupId>\n-        <artifactId>frontend-maven-plugin</artifactId>\n-        <version>1.6</version>\n-        <configuration>\n-          <installDirectory>target</installDirectory>\n-          <workingDirectory>${basedir}/src/main/resources/webapps/recon/ozone-recon-web</workingDirectory>\n-        </configuration>\n-        <executions>\n-          <execution>\n-            <id>Install node and yarn locally to the project</id>\n-            <goals>\n-              <goal>install-node-and-yarn</goal>\n-            </goals>\n-            <configuration>\n-              <nodeVersion>v12.1.0</nodeVersion>\n-              <yarnVersion>v1.9.2</yarnVersion>\n-            </configuration>\n-          </execution>\n-          <execution>\n-            <id>yarn install</id>\n-            <goals>\n-              <goal>yarn</goal>\n-            </goals>\n-            <configuration>\n-              <arguments>install</arguments>\n-            </configuration>\n-          </execution>\n-          <execution>\n-            <id>Build frontend</id>\n-            <goals>\n-              <goal>yarn</goal>\n-            </goals>\n-            <configuration>\n-              <arguments>run build</arguments>\n-            </configuration>\n-          </execution>\n-        </executions>\n-      </plugin>\n-      <plugin>\n-        <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-resources-plugin</artifactId>\n-        <executions>\n-          <execution>\n-            <id>Copy frontend build to target</id>\n-            <phase>process-resources</phase>\n-            <goals>\n-              <goal>copy-resources</goal>\n-            </goals>\n-            <configuration>\n-              <outputDirectory>${project.build.outputDirectory}/webapps/recon</outputDirectory>\n-              <resources>\n-                <resource>\n-                  <directory>${basedir}/src/main/resources/webapps/recon/ozone-recon-web/build</directory>\n-                  <filtering>true</filtering>\n-                </resource>\n-              </resources>\n-            </configuration>\n-          </execution>\n-          <execution>\n-            <id>Copy frontend static files to target</id>\n-            <phase>process-resources</phase>\n-            <goals>\n-              <goal>copy-resources</goal>\n-            </goals>\n-            <configuration>\n-              <outputDirectory>${project.build.outputDirectory}/webapps/static</outputDirectory>\n-              <resources>\n-                <resource>\n-                  <directory>${basedir}/src/main/resources/webapps/recon/ozone-recon-web/build/static</directory>\n-                  <filtering>true</filtering>\n-                </resource>\n-              </resources>\n-            </configuration>\n-          </execution>\n-        </executions>\n-      </plugin>\n+<!--      <plugin>-->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4NDAxNw=="}, "originalCommit": {"oid": "44899bb2c2e7cd71bff9a8f775a7179e729f706c"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0OTYzMTcxOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/recon-codegen/src/main/java/org/hadoop/ozone/recon/schema/UtilizationSchemaDefinition.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwNTowMzo1NVrOFqJHzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwNTowMzo1NVrOFqJHzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTczMzk2NQ==", "bodyText": "Minor code org nit: Possibly doesn't belong in this class.", "url": "https://github.com/apache/ozone/pull/546#discussion_r379733965", "createdAt": "2020-02-15T05:03:55Z", "author": {"login": "swagle"}, "path": "hadoop-ozone/recon-codegen/src/main/java/org/hadoop/ozone/recon/schema/UtilizationSchemaDefinition.java", "diffHunk": "@@ -77,4 +81,13 @@ void createFileSizeCount(Connection conn) {\n             .primaryKey(\"file_size\"))\n         .execute();\n   }\n+\n+  void createMissingContainersTable(Connection conn) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbf5fefb43d6a2adbfe7ee5d13af381ce5ac3a51"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0OTYzMzc0OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/recon-codegen/src/main/java/org/hadoop/ozone/recon/schema/UtilizationSchemaDefinition.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwNTowNDozN1rOFqJI4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwNTowNDozN1rOFqJI4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTczNDI0Mg==", "bodyText": "Index on timestamp for lookups?", "url": "https://github.com/apache/ozone/pull/546#discussion_r379734242", "createdAt": "2020-02-15T05:04:37Z", "author": {"login": "swagle"}, "path": "hadoop-ozone/recon-codegen/src/main/java/org/hadoop/ozone/recon/schema/UtilizationSchemaDefinition.java", "diffHunk": "@@ -77,4 +81,13 @@ void createFileSizeCount(Connection conn) {\n             .primaryKey(\"file_size\"))\n         .execute();\n   }\n+\n+  void createMissingContainersTable(Connection conn) {\n+    DSL.using(conn).createTableIfNotExists(MISSING_CONTAINERS_TABLE_NAME)\n+        .column(\"container_id\", SQLDataType.BIGINT)\n+        .column(\"missing_since\", SQLDataType.BIGINT)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbf5fefb43d6a2adbfe7ee5d13af381ce5ac3a51"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0OTY1MDE2OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/fsck/MissingContainerTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwNToxMDoxMVrOFqJQWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwNToxMDoxMVrOFqJQWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTczNjE1NQ==", "bodyText": "Why don't we inject DAOs?", "url": "https://github.com/apache/ozone/pull/546#discussion_r379736155", "createdAt": "2020-02-15T05:10:11Z", "author": {"login": "swagle"}, "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/fsck/MissingContainerTask.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.recon.fsck;\n+\n+import java.util.Set;\n+\n+import org.apache.hadoop.hdds.scm.container.ContainerID;\n+import org.apache.hadoop.hdds.scm.container.ContainerManager;\n+import org.apache.hadoop.hdds.scm.container.ContainerNotFoundException;\n+import org.apache.hadoop.hdds.scm.container.ContainerReplica;\n+import org.apache.hadoop.hdds.scm.server.OzoneStorageContainerManager;\n+import org.apache.hadoop.ozone.recon.scm.ReconStorageContainerManagerFacade;\n+import org.apache.hadoop.util.ExitUtil;\n+import org.apache.hadoop.util.Time;\n+import org.hadoop.ozone.recon.schema.tables.daos.MissingContainersDao;\n+import org.hadoop.ozone.recon.schema.tables.daos.ReconTaskStatusDao;\n+import org.hadoop.ozone.recon.schema.tables.pojos.MissingContainers;\n+import org.hadoop.ozone.recon.schema.tables.pojos.ReconTaskStatus;\n+import org.jooq.Configuration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.util.CollectionUtils;\n+\n+/**\n+ * Class that scans the list of containers and keeps track of containers with\n+ * no replicas in a SQL table.\n+ */\n+public class MissingContainerTask {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(MissingContainerTask.class);\n+\n+  private OzoneStorageContainerManager scm;\n+  private MissingContainersDao missingContainersDao;\n+  private ReconTaskStatusDao reconTaskStatusDao;\n+  private static final long INTERVAL = 5 * 60 * 1000L;\n+\n+  private Thread fsckMonitor;\n+  private volatile boolean running;\n+\n+  public MissingContainerTask(ReconStorageContainerManagerFacade scm,\n+                              Configuration sqlConfiguration) {\n+    this.scm = scm;\n+    this.missingContainersDao = new MissingContainersDao(sqlConfiguration);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbf5fefb43d6a2adbfe7ee5d13af381ce5ac3a51"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0OTY1NTU3OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/fsck/MissingContainerTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwNToxMTo1MFrOFqJS2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwNTo0MjozMVrOFqJ9Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTczNjc5Mg==", "bodyText": "Code with side effects should be in a lifecycle method that can throw checked exceptions, why not move this to start?", "url": "https://github.com/apache/ozone/pull/546#discussion_r379736792", "createdAt": "2020-02-15T05:11:50Z", "author": {"login": "swagle"}, "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/fsck/MissingContainerTask.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.recon.fsck;\n+\n+import java.util.Set;\n+\n+import org.apache.hadoop.hdds.scm.container.ContainerID;\n+import org.apache.hadoop.hdds.scm.container.ContainerManager;\n+import org.apache.hadoop.hdds.scm.container.ContainerNotFoundException;\n+import org.apache.hadoop.hdds.scm.container.ContainerReplica;\n+import org.apache.hadoop.hdds.scm.server.OzoneStorageContainerManager;\n+import org.apache.hadoop.ozone.recon.scm.ReconStorageContainerManagerFacade;\n+import org.apache.hadoop.util.ExitUtil;\n+import org.apache.hadoop.util.Time;\n+import org.hadoop.ozone.recon.schema.tables.daos.MissingContainersDao;\n+import org.hadoop.ozone.recon.schema.tables.daos.ReconTaskStatusDao;\n+import org.hadoop.ozone.recon.schema.tables.pojos.MissingContainers;\n+import org.hadoop.ozone.recon.schema.tables.pojos.ReconTaskStatus;\n+import org.jooq.Configuration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.util.CollectionUtils;\n+\n+/**\n+ * Class that scans the list of containers and keeps track of containers with\n+ * no replicas in a SQL table.\n+ */\n+public class MissingContainerTask {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(MissingContainerTask.class);\n+\n+  private OzoneStorageContainerManager scm;\n+  private MissingContainersDao missingContainersDao;\n+  private ReconTaskStatusDao reconTaskStatusDao;\n+  private static final long INTERVAL = 5 * 60 * 1000L;\n+\n+  private Thread fsckMonitor;\n+  private volatile boolean running;\n+\n+  public MissingContainerTask(ReconStorageContainerManagerFacade scm,\n+                              Configuration sqlConfiguration) {\n+    this.scm = scm;\n+    this.missingContainersDao = new MissingContainersDao(sqlConfiguration);\n+    this.reconTaskStatusDao = new ReconTaskStatusDao(sqlConfiguration);\n+    String taskName = getClass().getSimpleName();\n+    ReconTaskStatus reconTaskStatusRecord = new ReconTaskStatus(\n+        taskName, 0L, 0L);\n+    if (!reconTaskStatusDao.existsById(taskName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbf5fefb43d6a2adbfe7ee5d13af381ce5ac3a51"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTc0NzU5MQ==", "bodyText": "Agreed, will move it.", "url": "https://github.com/apache/ozone/pull/546#discussion_r379747591", "createdAt": "2020-02-15T05:42:31Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/fsck/MissingContainerTask.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.recon.fsck;\n+\n+import java.util.Set;\n+\n+import org.apache.hadoop.hdds.scm.container.ContainerID;\n+import org.apache.hadoop.hdds.scm.container.ContainerManager;\n+import org.apache.hadoop.hdds.scm.container.ContainerNotFoundException;\n+import org.apache.hadoop.hdds.scm.container.ContainerReplica;\n+import org.apache.hadoop.hdds.scm.server.OzoneStorageContainerManager;\n+import org.apache.hadoop.ozone.recon.scm.ReconStorageContainerManagerFacade;\n+import org.apache.hadoop.util.ExitUtil;\n+import org.apache.hadoop.util.Time;\n+import org.hadoop.ozone.recon.schema.tables.daos.MissingContainersDao;\n+import org.hadoop.ozone.recon.schema.tables.daos.ReconTaskStatusDao;\n+import org.hadoop.ozone.recon.schema.tables.pojos.MissingContainers;\n+import org.hadoop.ozone.recon.schema.tables.pojos.ReconTaskStatus;\n+import org.jooq.Configuration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.util.CollectionUtils;\n+\n+/**\n+ * Class that scans the list of containers and keeps track of containers with\n+ * no replicas in a SQL table.\n+ */\n+public class MissingContainerTask {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(MissingContainerTask.class);\n+\n+  private OzoneStorageContainerManager scm;\n+  private MissingContainersDao missingContainersDao;\n+  private ReconTaskStatusDao reconTaskStatusDao;\n+  private static final long INTERVAL = 5 * 60 * 1000L;\n+\n+  private Thread fsckMonitor;\n+  private volatile boolean running;\n+\n+  public MissingContainerTask(ReconStorageContainerManagerFacade scm,\n+                              Configuration sqlConfiguration) {\n+    this.scm = scm;\n+    this.missingContainersDao = new MissingContainersDao(sqlConfiguration);\n+    this.reconTaskStatusDao = new ReconTaskStatusDao(sqlConfiguration);\n+    String taskName = getClass().getSimpleName();\n+    ReconTaskStatus reconTaskStatusRecord = new ReconTaskStatus(\n+        taskName, 0L, 0L);\n+    if (!reconTaskStatusDao.existsById(taskName)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTczNjc5Mg=="}, "originalCommit": {"oid": "cbf5fefb43d6a2adbfe7ee5d13af381ce5ac3a51"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0OTY1NzY1OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/fsck/MissingContainerTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwNToxMjoyNVrOFqJTsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwNTo0MjoxOVrOFqJ81A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTczNzAxMQ==", "bodyText": "Why not use a single-threaded executor?", "url": "https://github.com/apache/ozone/pull/546#discussion_r379737011", "createdAt": "2020-02-15T05:12:25Z", "author": {"login": "swagle"}, "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/fsck/MissingContainerTask.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.recon.fsck;\n+\n+import java.util.Set;\n+\n+import org.apache.hadoop.hdds.scm.container.ContainerID;\n+import org.apache.hadoop.hdds.scm.container.ContainerManager;\n+import org.apache.hadoop.hdds.scm.container.ContainerNotFoundException;\n+import org.apache.hadoop.hdds.scm.container.ContainerReplica;\n+import org.apache.hadoop.hdds.scm.server.OzoneStorageContainerManager;\n+import org.apache.hadoop.ozone.recon.scm.ReconStorageContainerManagerFacade;\n+import org.apache.hadoop.util.ExitUtil;\n+import org.apache.hadoop.util.Time;\n+import org.hadoop.ozone.recon.schema.tables.daos.MissingContainersDao;\n+import org.hadoop.ozone.recon.schema.tables.daos.ReconTaskStatusDao;\n+import org.hadoop.ozone.recon.schema.tables.pojos.MissingContainers;\n+import org.hadoop.ozone.recon.schema.tables.pojos.ReconTaskStatus;\n+import org.jooq.Configuration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.util.CollectionUtils;\n+\n+/**\n+ * Class that scans the list of containers and keeps track of containers with\n+ * no replicas in a SQL table.\n+ */\n+public class MissingContainerTask {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(MissingContainerTask.class);\n+\n+  private OzoneStorageContainerManager scm;\n+  private MissingContainersDao missingContainersDao;\n+  private ReconTaskStatusDao reconTaskStatusDao;\n+  private static final long INTERVAL = 5 * 60 * 1000L;\n+\n+  private Thread fsckMonitor;\n+  private volatile boolean running;\n+\n+  public MissingContainerTask(ReconStorageContainerManagerFacade scm,\n+                              Configuration sqlConfiguration) {\n+    this.scm = scm;\n+    this.missingContainersDao = new MissingContainersDao(sqlConfiguration);\n+    this.reconTaskStatusDao = new ReconTaskStatusDao(sqlConfiguration);\n+    String taskName = getClass().getSimpleName();\n+    ReconTaskStatus reconTaskStatusRecord = new ReconTaskStatus(\n+        taskName, 0L, 0L);\n+    if (!reconTaskStatusDao.existsById(taskName)) {\n+      reconTaskStatusDao.insert(reconTaskStatusRecord);\n+      LOG.info(\"Registered {} task \", taskName);\n+    }\n+  }\n+\n+  public void start() {\n+    if (!isRunning()) {\n+      LOG.info(\"Starting Missing Container Monitor Thread.\");\n+      running = true;\n+      fsckMonitor = new Thread(this::run);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbf5fefb43d6a2adbfe7ee5d13af381ce5ac3a51"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTc0NzU0MA==", "bodyText": "Since this is very similar to the ReplicationManager, I borrowed the code from there.", "url": "https://github.com/apache/ozone/pull/546#discussion_r379747540", "createdAt": "2020-02-15T05:42:19Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/fsck/MissingContainerTask.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.recon.fsck;\n+\n+import java.util.Set;\n+\n+import org.apache.hadoop.hdds.scm.container.ContainerID;\n+import org.apache.hadoop.hdds.scm.container.ContainerManager;\n+import org.apache.hadoop.hdds.scm.container.ContainerNotFoundException;\n+import org.apache.hadoop.hdds.scm.container.ContainerReplica;\n+import org.apache.hadoop.hdds.scm.server.OzoneStorageContainerManager;\n+import org.apache.hadoop.ozone.recon.scm.ReconStorageContainerManagerFacade;\n+import org.apache.hadoop.util.ExitUtil;\n+import org.apache.hadoop.util.Time;\n+import org.hadoop.ozone.recon.schema.tables.daos.MissingContainersDao;\n+import org.hadoop.ozone.recon.schema.tables.daos.ReconTaskStatusDao;\n+import org.hadoop.ozone.recon.schema.tables.pojos.MissingContainers;\n+import org.hadoop.ozone.recon.schema.tables.pojos.ReconTaskStatus;\n+import org.jooq.Configuration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.util.CollectionUtils;\n+\n+/**\n+ * Class that scans the list of containers and keeps track of containers with\n+ * no replicas in a SQL table.\n+ */\n+public class MissingContainerTask {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(MissingContainerTask.class);\n+\n+  private OzoneStorageContainerManager scm;\n+  private MissingContainersDao missingContainersDao;\n+  private ReconTaskStatusDao reconTaskStatusDao;\n+  private static final long INTERVAL = 5 * 60 * 1000L;\n+\n+  private Thread fsckMonitor;\n+  private volatile boolean running;\n+\n+  public MissingContainerTask(ReconStorageContainerManagerFacade scm,\n+                              Configuration sqlConfiguration) {\n+    this.scm = scm;\n+    this.missingContainersDao = new MissingContainersDao(sqlConfiguration);\n+    this.reconTaskStatusDao = new ReconTaskStatusDao(sqlConfiguration);\n+    String taskName = getClass().getSimpleName();\n+    ReconTaskStatus reconTaskStatusRecord = new ReconTaskStatus(\n+        taskName, 0L, 0L);\n+    if (!reconTaskStatusDao.existsById(taskName)) {\n+      reconTaskStatusDao.insert(reconTaskStatusRecord);\n+      LOG.info(\"Registered {} task \", taskName);\n+    }\n+  }\n+\n+  public void start() {\n+    if (!isRunning()) {\n+      LOG.info(\"Starting Missing Container Monitor Thread.\");\n+      running = true;\n+      fsckMonitor = new Thread(this::run);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTczNzAxMQ=="}, "originalCommit": {"oid": "cbf5fefb43d6a2adbfe7ee5d13af381ce5ac3a51"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0OTY2Mzc1OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/fsck/MissingContainerTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwNToxNDowNFrOFqJWIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwNTo0MDo0NVrOFqJ6jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTczNzYzNA==", "bodyText": "start() should also be synchronized.", "url": "https://github.com/apache/ozone/pull/546#discussion_r379737634", "createdAt": "2020-02-15T05:14:04Z", "author": {"login": "swagle"}, "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/fsck/MissingContainerTask.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.recon.fsck;\n+\n+import java.util.Set;\n+\n+import org.apache.hadoop.hdds.scm.container.ContainerID;\n+import org.apache.hadoop.hdds.scm.container.ContainerManager;\n+import org.apache.hadoop.hdds.scm.container.ContainerNotFoundException;\n+import org.apache.hadoop.hdds.scm.container.ContainerReplica;\n+import org.apache.hadoop.hdds.scm.server.OzoneStorageContainerManager;\n+import org.apache.hadoop.ozone.recon.scm.ReconStorageContainerManagerFacade;\n+import org.apache.hadoop.util.ExitUtil;\n+import org.apache.hadoop.util.Time;\n+import org.hadoop.ozone.recon.schema.tables.daos.MissingContainersDao;\n+import org.hadoop.ozone.recon.schema.tables.daos.ReconTaskStatusDao;\n+import org.hadoop.ozone.recon.schema.tables.pojos.MissingContainers;\n+import org.hadoop.ozone.recon.schema.tables.pojos.ReconTaskStatus;\n+import org.jooq.Configuration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.util.CollectionUtils;\n+\n+/**\n+ * Class that scans the list of containers and keeps track of containers with\n+ * no replicas in a SQL table.\n+ */\n+public class MissingContainerTask {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(MissingContainerTask.class);\n+\n+  private OzoneStorageContainerManager scm;\n+  private MissingContainersDao missingContainersDao;\n+  private ReconTaskStatusDao reconTaskStatusDao;\n+  private static final long INTERVAL = 5 * 60 * 1000L;\n+\n+  private Thread fsckMonitor;\n+  private volatile boolean running;\n+\n+  public MissingContainerTask(ReconStorageContainerManagerFacade scm,\n+                              Configuration sqlConfiguration) {\n+    this.scm = scm;\n+    this.missingContainersDao = new MissingContainersDao(sqlConfiguration);\n+    this.reconTaskStatusDao = new ReconTaskStatusDao(sqlConfiguration);\n+    String taskName = getClass().getSimpleName();\n+    ReconTaskStatus reconTaskStatusRecord = new ReconTaskStatus(\n+        taskName, 0L, 0L);\n+    if (!reconTaskStatusDao.existsById(taskName)) {\n+      reconTaskStatusDao.insert(reconTaskStatusRecord);\n+      LOG.info(\"Registered {} task \", taskName);\n+    }\n+  }\n+\n+  public void start() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbf5fefb43d6a2adbfe7ee5d13af381ce5ac3a51"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTc0Njk1OQ==", "bodyText": "Good catch, will fix it.", "url": "https://github.com/apache/ozone/pull/546#discussion_r379746959", "createdAt": "2020-02-15T05:40:45Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/fsck/MissingContainerTask.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.recon.fsck;\n+\n+import java.util.Set;\n+\n+import org.apache.hadoop.hdds.scm.container.ContainerID;\n+import org.apache.hadoop.hdds.scm.container.ContainerManager;\n+import org.apache.hadoop.hdds.scm.container.ContainerNotFoundException;\n+import org.apache.hadoop.hdds.scm.container.ContainerReplica;\n+import org.apache.hadoop.hdds.scm.server.OzoneStorageContainerManager;\n+import org.apache.hadoop.ozone.recon.scm.ReconStorageContainerManagerFacade;\n+import org.apache.hadoop.util.ExitUtil;\n+import org.apache.hadoop.util.Time;\n+import org.hadoop.ozone.recon.schema.tables.daos.MissingContainersDao;\n+import org.hadoop.ozone.recon.schema.tables.daos.ReconTaskStatusDao;\n+import org.hadoop.ozone.recon.schema.tables.pojos.MissingContainers;\n+import org.hadoop.ozone.recon.schema.tables.pojos.ReconTaskStatus;\n+import org.jooq.Configuration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.util.CollectionUtils;\n+\n+/**\n+ * Class that scans the list of containers and keeps track of containers with\n+ * no replicas in a SQL table.\n+ */\n+public class MissingContainerTask {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(MissingContainerTask.class);\n+\n+  private OzoneStorageContainerManager scm;\n+  private MissingContainersDao missingContainersDao;\n+  private ReconTaskStatusDao reconTaskStatusDao;\n+  private static final long INTERVAL = 5 * 60 * 1000L;\n+\n+  private Thread fsckMonitor;\n+  private volatile boolean running;\n+\n+  public MissingContainerTask(ReconStorageContainerManagerFacade scm,\n+                              Configuration sqlConfiguration) {\n+    this.scm = scm;\n+    this.missingContainersDao = new MissingContainersDao(sqlConfiguration);\n+    this.reconTaskStatusDao = new ReconTaskStatusDao(sqlConfiguration);\n+    String taskName = getClass().getSimpleName();\n+    ReconTaskStatus reconTaskStatusRecord = new ReconTaskStatus(\n+        taskName, 0L, 0L);\n+    if (!reconTaskStatusDao.existsById(taskName)) {\n+      reconTaskStatusDao.insert(reconTaskStatusRecord);\n+      LOG.info(\"Registered {} task \", taskName);\n+    }\n+  }\n+\n+  public void start() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTczNzYzNA=="}, "originalCommit": {"oid": "cbf5fefb43d6a2adbfe7ee5d13af381ce5ac3a51"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0OTY4OTgxOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/fsck/MissingContainerTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwNToyMjoxOFrOFqJhHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwNTo0MDo1OFrOFqJ65Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTc0MDQ0Ng==", "bodyText": "Is that necessarily true for Recon, could there be a benign problem that we could recover from?", "url": "https://github.com/apache/ozone/pull/546#discussion_r379740446", "createdAt": "2020-02-15T05:22:18Z", "author": {"login": "swagle"}, "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/fsck/MissingContainerTask.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.recon.fsck;\n+\n+import java.util.Set;\n+\n+import org.apache.hadoop.hdds.scm.container.ContainerID;\n+import org.apache.hadoop.hdds.scm.container.ContainerManager;\n+import org.apache.hadoop.hdds.scm.container.ContainerNotFoundException;\n+import org.apache.hadoop.hdds.scm.container.ContainerReplica;\n+import org.apache.hadoop.hdds.scm.server.OzoneStorageContainerManager;\n+import org.apache.hadoop.ozone.recon.scm.ReconStorageContainerManagerFacade;\n+import org.apache.hadoop.util.ExitUtil;\n+import org.apache.hadoop.util.Time;\n+import org.hadoop.ozone.recon.schema.tables.daos.MissingContainersDao;\n+import org.hadoop.ozone.recon.schema.tables.daos.ReconTaskStatusDao;\n+import org.hadoop.ozone.recon.schema.tables.pojos.MissingContainers;\n+import org.hadoop.ozone.recon.schema.tables.pojos.ReconTaskStatus;\n+import org.jooq.Configuration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.util.CollectionUtils;\n+\n+/**\n+ * Class that scans the list of containers and keeps track of containers with\n+ * no replicas in a SQL table.\n+ */\n+public class MissingContainerTask {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(MissingContainerTask.class);\n+\n+  private OzoneStorageContainerManager scm;\n+  private MissingContainersDao missingContainersDao;\n+  private ReconTaskStatusDao reconTaskStatusDao;\n+  private static final long INTERVAL = 5 * 60 * 1000L;\n+\n+  private Thread fsckMonitor;\n+  private volatile boolean running;\n+\n+  public MissingContainerTask(ReconStorageContainerManagerFacade scm,\n+                              Configuration sqlConfiguration) {\n+    this.scm = scm;\n+    this.missingContainersDao = new MissingContainersDao(sqlConfiguration);\n+    this.reconTaskStatusDao = new ReconTaskStatusDao(sqlConfiguration);\n+    String taskName = getClass().getSimpleName();\n+    ReconTaskStatus reconTaskStatusRecord = new ReconTaskStatus(\n+        taskName, 0L, 0L);\n+    if (!reconTaskStatusDao.existsById(taskName)) {\n+      reconTaskStatusDao.insert(reconTaskStatusRecord);\n+      LOG.info(\"Registered {} task \", taskName);\n+    }\n+  }\n+\n+  public void start() {\n+    if (!isRunning()) {\n+      LOG.info(\"Starting Missing Container Monitor Thread.\");\n+      running = true;\n+      fsckMonitor = new Thread(this::run);\n+      fsckMonitor.setName(\"MissingContainerMonitor\");\n+      fsckMonitor.setDaemon(true);\n+      fsckMonitor.start();\n+    } else {\n+      LOG.info(\"Missing Container Monitor Thread is already running.\");\n+    }\n+  }\n+\n+  /**\n+   * Stops Replication Monitor thread.\n+   */\n+  public synchronized void stop() {\n+    if (running) {\n+      LOG.info(\"Stopping Missing Container Monitor Thread.\");\n+      running = false;\n+      notifyAll();\n+    } else {\n+      LOG.info(\"Missing Container Monitor Thread is not running.\");\n+    }\n+  }\n+\n+  public synchronized void run() {\n+    try {\n+      while (running) {\n+        long start = Time.monotonicNow();\n+        long currentTime = System.currentTimeMillis();\n+        ContainerManager containerManager = scm.getContainerManager();\n+        final Set<ContainerID> containerIds =\n+            containerManager.getContainerIDs();\n+        containerManager.getContainerIDs().forEach(containerID ->\n+            processContainer(containerID, currentTime));\n+\n+        LOG.info(\"Missing Container Monitor Thread took {} milliseconds for\" +\n+                \" processing {} containers.\", Time.monotonicNow() - start,\n+            containerIds.size());\n+        wait(INTERVAL);\n+      }\n+    } catch (Throwable t) {\n+      // When we get runtime exception, we should terminate SCM.\n+      LOG.error(\"Exception in Replication Monitor Thread.\", t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbf5fefb43d6a2adbfe7ee5d13af381ce5ac3a51"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTc0NzA0NQ==", "bodyText": "We dont need to terminate Recon. Will remove it.", "url": "https://github.com/apache/ozone/pull/546#discussion_r379747045", "createdAt": "2020-02-15T05:40:58Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/fsck/MissingContainerTask.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.recon.fsck;\n+\n+import java.util.Set;\n+\n+import org.apache.hadoop.hdds.scm.container.ContainerID;\n+import org.apache.hadoop.hdds.scm.container.ContainerManager;\n+import org.apache.hadoop.hdds.scm.container.ContainerNotFoundException;\n+import org.apache.hadoop.hdds.scm.container.ContainerReplica;\n+import org.apache.hadoop.hdds.scm.server.OzoneStorageContainerManager;\n+import org.apache.hadoop.ozone.recon.scm.ReconStorageContainerManagerFacade;\n+import org.apache.hadoop.util.ExitUtil;\n+import org.apache.hadoop.util.Time;\n+import org.hadoop.ozone.recon.schema.tables.daos.MissingContainersDao;\n+import org.hadoop.ozone.recon.schema.tables.daos.ReconTaskStatusDao;\n+import org.hadoop.ozone.recon.schema.tables.pojos.MissingContainers;\n+import org.hadoop.ozone.recon.schema.tables.pojos.ReconTaskStatus;\n+import org.jooq.Configuration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.util.CollectionUtils;\n+\n+/**\n+ * Class that scans the list of containers and keeps track of containers with\n+ * no replicas in a SQL table.\n+ */\n+public class MissingContainerTask {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(MissingContainerTask.class);\n+\n+  private OzoneStorageContainerManager scm;\n+  private MissingContainersDao missingContainersDao;\n+  private ReconTaskStatusDao reconTaskStatusDao;\n+  private static final long INTERVAL = 5 * 60 * 1000L;\n+\n+  private Thread fsckMonitor;\n+  private volatile boolean running;\n+\n+  public MissingContainerTask(ReconStorageContainerManagerFacade scm,\n+                              Configuration sqlConfiguration) {\n+    this.scm = scm;\n+    this.missingContainersDao = new MissingContainersDao(sqlConfiguration);\n+    this.reconTaskStatusDao = new ReconTaskStatusDao(sqlConfiguration);\n+    String taskName = getClass().getSimpleName();\n+    ReconTaskStatus reconTaskStatusRecord = new ReconTaskStatus(\n+        taskName, 0L, 0L);\n+    if (!reconTaskStatusDao.existsById(taskName)) {\n+      reconTaskStatusDao.insert(reconTaskStatusRecord);\n+      LOG.info(\"Registered {} task \", taskName);\n+    }\n+  }\n+\n+  public void start() {\n+    if (!isRunning()) {\n+      LOG.info(\"Starting Missing Container Monitor Thread.\");\n+      running = true;\n+      fsckMonitor = new Thread(this::run);\n+      fsckMonitor.setName(\"MissingContainerMonitor\");\n+      fsckMonitor.setDaemon(true);\n+      fsckMonitor.start();\n+    } else {\n+      LOG.info(\"Missing Container Monitor Thread is already running.\");\n+    }\n+  }\n+\n+  /**\n+   * Stops Replication Monitor thread.\n+   */\n+  public synchronized void stop() {\n+    if (running) {\n+      LOG.info(\"Stopping Missing Container Monitor Thread.\");\n+      running = false;\n+      notifyAll();\n+    } else {\n+      LOG.info(\"Missing Container Monitor Thread is not running.\");\n+    }\n+  }\n+\n+  public synchronized void run() {\n+    try {\n+      while (running) {\n+        long start = Time.monotonicNow();\n+        long currentTime = System.currentTimeMillis();\n+        ContainerManager containerManager = scm.getContainerManager();\n+        final Set<ContainerID> containerIds =\n+            containerManager.getContainerIDs();\n+        containerManager.getContainerIDs().forEach(containerID ->\n+            processContainer(containerID, currentTime));\n+\n+        LOG.info(\"Missing Container Monitor Thread took {} milliseconds for\" +\n+                \" processing {} containers.\", Time.monotonicNow() - start,\n+            containerIds.size());\n+        wait(INTERVAL);\n+      }\n+    } catch (Throwable t) {\n+      // When we get runtime exception, we should terminate SCM.\n+      LOG.error(\"Exception in Replication Monitor Thread.\", t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTc0MDQ0Ng=="}, "originalCommit": {"oid": "cbf5fefb43d6a2adbfe7ee5d13af381ce5ac3a51"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzIyOTM5OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/ReconControllerModule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODoyMDowOVrOFrNSFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMjoxNDoyMVrOFrUbLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1MDcxMA==", "bodyText": "AFAIK, DAOs are in-expensive to create so enforcing Singleton's might be an anti-pattern.", "url": "https://github.com/apache/ozone/pull/546#discussion_r380850710", "createdAt": "2020-02-18T18:20:09Z", "author": {"login": "swagle"}, "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/ReconControllerModule.java", "diffHunk": "@@ -96,6 +106,34 @@ protected void configure() {\n         .to(ReconStorageContainerManagerFacade.class).in(Singleton.class);\n   }\n \n+  @Provides\n+  @Singleton", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33f115a65675e4e0f6cc53a2607f7bbc79e469c4"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk2NzcyNg==", "bodyText": "Fixed.", "url": "https://github.com/apache/ozone/pull/546#discussion_r380967726", "createdAt": "2020-02-18T22:14:21Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/ReconControllerModule.java", "diffHunk": "@@ -96,6 +106,34 @@ protected void configure() {\n         .to(ReconStorageContainerManagerFacade.class).in(Singleton.class);\n   }\n \n+  @Provides\n+  @Singleton", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1MDcxMA=="}, "originalCommit": {"oid": "33f115a65675e4e0f6cc53a2607f7bbc79e469c4"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzQ2NjI4OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/scm/ReconContainerReportHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxOTozMzoyNFrOFrPnmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMjoxNDoxOVrOFrUbEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg4ODk4Ng==", "bodyText": "Looks like too many LOG.info messages!", "url": "https://github.com/apache/ozone/pull/546#discussion_r380888986", "createdAt": "2020-02-18T19:33:24Z", "author": {"login": "swagle"}, "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/scm/ReconContainerReportHandler.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.recon.scm;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import org.apache.hadoop.hdds.protocol.proto.StorageContainerDatanodeProtocolProtos.ContainerReplicaProto;\n+import org.apache.hadoop.hdds.protocol.proto.StorageContainerDatanodeProtocolProtos.ContainerReportsProto;\n+import org.apache.hadoop.hdds.scm.container.ContainerID;\n+import org.apache.hadoop.hdds.scm.container.ContainerManager;\n+import org.apache.hadoop.hdds.scm.container.ContainerReportHandler;\n+import org.apache.hadoop.hdds.scm.container.common.helpers.ContainerWithPipeline;\n+import org.apache.hadoop.hdds.scm.node.NodeManager;\n+import org.apache.hadoop.hdds.scm.server.SCMDatanodeHeartbeatDispatcher.ContainerReportFromDatanode;\n+import org.apache.hadoop.hdds.server.events.EventPublisher;\n+import org.apache.hadoop.ozone.recon.spi.StorageContainerServiceProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Recon's container report handler.\n+ */\n+public class ReconContainerReportHandler extends ContainerReportHandler {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(ReconContainerReportHandler.class);\n+  private StorageContainerServiceProvider scmClient;\n+\n+  public ReconContainerReportHandler(NodeManager nodeManager,\n+                                     ContainerManager containerManager,\n+                                     StorageContainerServiceProvider scm) {\n+    super(nodeManager, containerManager);\n+    this.scmClient = scm;\n+  }\n+\n+  @Override\n+  public void onMessage(final ContainerReportFromDatanode reportFromDatanode,\n+                        final EventPublisher publisher) {\n+\n+    final ContainerReportsProto containerReport =\n+        reportFromDatanode.getReport();\n+    ReconContainerManager containerManager =\n+        (ReconContainerManager) getContainerManager();\n+\n+    List<ContainerReplicaProto> reportsList = containerReport.getReportsList();\n+    for (ContainerReplicaProto containerReplicaProto : reportsList) {\n+      final ContainerID id = ContainerID.valueof(\n+          containerReplicaProto.getContainerID());\n+      if (!getContainerManager().exists(id)) {\n+        LOG.info(\"New container {} got from {}.\", id,\n+            reportFromDatanode.getDatanodeDetails());\n+        try {\n+          ContainerWithPipeline containerWithPipeline =\n+              scmClient.getContainerWithPipeline(id.getId());\n+          LOG.info(\"Verified new container from SCM {} \",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33f115a65675e4e0f6cc53a2607f7bbc79e469c4"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk2NzY5Nw==", "bodyText": "Fixed.", "url": "https://github.com/apache/ozone/pull/546#discussion_r380967697", "createdAt": "2020-02-18T22:14:19Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/scm/ReconContainerReportHandler.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.recon.scm;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import org.apache.hadoop.hdds.protocol.proto.StorageContainerDatanodeProtocolProtos.ContainerReplicaProto;\n+import org.apache.hadoop.hdds.protocol.proto.StorageContainerDatanodeProtocolProtos.ContainerReportsProto;\n+import org.apache.hadoop.hdds.scm.container.ContainerID;\n+import org.apache.hadoop.hdds.scm.container.ContainerManager;\n+import org.apache.hadoop.hdds.scm.container.ContainerReportHandler;\n+import org.apache.hadoop.hdds.scm.container.common.helpers.ContainerWithPipeline;\n+import org.apache.hadoop.hdds.scm.node.NodeManager;\n+import org.apache.hadoop.hdds.scm.server.SCMDatanodeHeartbeatDispatcher.ContainerReportFromDatanode;\n+import org.apache.hadoop.hdds.server.events.EventPublisher;\n+import org.apache.hadoop.ozone.recon.spi.StorageContainerServiceProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Recon's container report handler.\n+ */\n+public class ReconContainerReportHandler extends ContainerReportHandler {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(ReconContainerReportHandler.class);\n+  private StorageContainerServiceProvider scmClient;\n+\n+  public ReconContainerReportHandler(NodeManager nodeManager,\n+                                     ContainerManager containerManager,\n+                                     StorageContainerServiceProvider scm) {\n+    super(nodeManager, containerManager);\n+    this.scmClient = scm;\n+  }\n+\n+  @Override\n+  public void onMessage(final ContainerReportFromDatanode reportFromDatanode,\n+                        final EventPublisher publisher) {\n+\n+    final ContainerReportsProto containerReport =\n+        reportFromDatanode.getReport();\n+    ReconContainerManager containerManager =\n+        (ReconContainerManager) getContainerManager();\n+\n+    List<ContainerReplicaProto> reportsList = containerReport.getReportsList();\n+    for (ContainerReplicaProto containerReplicaProto : reportsList) {\n+      final ContainerID id = ContainerID.valueof(\n+          containerReplicaProto.getContainerID());\n+      if (!getContainerManager().exists(id)) {\n+        LOG.info(\"New container {} got from {}.\", id,\n+            reportFromDatanode.getDatanodeDetails());\n+        try {\n+          ContainerWithPipeline containerWithPipeline =\n+              scmClient.getContainerWithPipeline(id.getId());\n+          LOG.info(\"Verified new container from SCM {} \",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg4ODk4Ng=="}, "originalCommit": {"oid": "33f115a65675e4e0f6cc53a2607f7bbc79e469c4"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTY2MzE2OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/fsck/MissingContainerTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMToxOTo0MVrOFr3_9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMjo1NDo1MFrOFr6ssQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU1MDU4MA==", "bodyText": "Shouldn't this process containerIds instead of getting the set again?", "url": "https://github.com/apache/ozone/pull/546#discussion_r381550580", "createdAt": "2020-02-19T21:19:41Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/fsck/MissingContainerTask.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.recon.fsck;\n+\n+import java.util.Set;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.hadoop.hdds.scm.container.ContainerID;\n+import org.apache.hadoop.hdds.scm.container.ContainerManager;\n+import org.apache.hadoop.hdds.scm.container.ContainerNotFoundException;\n+import org.apache.hadoop.hdds.scm.container.ContainerReplica;\n+import org.apache.hadoop.hdds.scm.server.OzoneStorageContainerManager;\n+import org.apache.hadoop.ozone.recon.scm.ReconScmTask;\n+import org.apache.hadoop.util.Time;\n+import org.hadoop.ozone.recon.schema.tables.daos.MissingContainersDao;\n+import org.hadoop.ozone.recon.schema.tables.daos.ReconTaskStatusDao;\n+import org.hadoop.ozone.recon.schema.tables.pojos.MissingContainers;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.util.CollectionUtils;\n+\n+/**\n+ * Class that scans the list of containers and keeps track of containers with\n+ * no replicas in a SQL table.\n+ */\n+public class MissingContainerTask extends ReconScmTask {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(MissingContainerTask.class);\n+\n+  private ContainerManager containerManager;\n+  private MissingContainersDao missingContainersDao;\n+  private static final long INTERVAL = 5 * 60 * 1000L;\n+\n+  @Inject\n+  public MissingContainerTask(\n+      OzoneStorageContainerManager ozoneStorageContainerManager,\n+      ReconTaskStatusDao reconTaskStatusDao,\n+      MissingContainersDao missingContainersDao) {\n+    super(reconTaskStatusDao);\n+    this.missingContainersDao = missingContainersDao;\n+    this.containerManager = ozoneStorageContainerManager.getContainerManager();\n+  }\n+\n+  public synchronized void run() {\n+    try {\n+      while (canRun()) {\n+        long start = Time.monotonicNow();\n+        long currentTime = System.currentTimeMillis();\n+        final Set<ContainerID> containerIds =\n+            containerManager.getContainerIDs();\n+        containerManager.getContainerIDs().forEach(containerID ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f4bba09d4634da93ea4cdb30fc39dbf4bbf9b0c"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU5NDgwMQ==", "bodyText": "Will fix it.", "url": "https://github.com/apache/ozone/pull/546#discussion_r381594801", "createdAt": "2020-02-19T22:54:50Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/fsck/MissingContainerTask.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.recon.fsck;\n+\n+import java.util.Set;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.hadoop.hdds.scm.container.ContainerID;\n+import org.apache.hadoop.hdds.scm.container.ContainerManager;\n+import org.apache.hadoop.hdds.scm.container.ContainerNotFoundException;\n+import org.apache.hadoop.hdds.scm.container.ContainerReplica;\n+import org.apache.hadoop.hdds.scm.server.OzoneStorageContainerManager;\n+import org.apache.hadoop.ozone.recon.scm.ReconScmTask;\n+import org.apache.hadoop.util.Time;\n+import org.hadoop.ozone.recon.schema.tables.daos.MissingContainersDao;\n+import org.hadoop.ozone.recon.schema.tables.daos.ReconTaskStatusDao;\n+import org.hadoop.ozone.recon.schema.tables.pojos.MissingContainers;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.util.CollectionUtils;\n+\n+/**\n+ * Class that scans the list of containers and keeps track of containers with\n+ * no replicas in a SQL table.\n+ */\n+public class MissingContainerTask extends ReconScmTask {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(MissingContainerTask.class);\n+\n+  private ContainerManager containerManager;\n+  private MissingContainersDao missingContainersDao;\n+  private static final long INTERVAL = 5 * 60 * 1000L;\n+\n+  @Inject\n+  public MissingContainerTask(\n+      OzoneStorageContainerManager ozoneStorageContainerManager,\n+      ReconTaskStatusDao reconTaskStatusDao,\n+      MissingContainersDao missingContainersDao) {\n+    super(reconTaskStatusDao);\n+    this.missingContainersDao = missingContainersDao;\n+    this.containerManager = ozoneStorageContainerManager.getContainerManager();\n+  }\n+\n+  public synchronized void run() {\n+    try {\n+      while (canRun()) {\n+        long start = Time.monotonicNow();\n+        long currentTime = System.currentTimeMillis();\n+        final Set<ContainerID> containerIds =\n+            containerManager.getContainerIDs();\n+        containerManager.getContainerIDs().forEach(containerID ->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU1MDU4MA=="}, "originalCommit": {"oid": "6f4bba09d4634da93ea4cdb30fc39dbf4bbf9b0c"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTY3MTM4OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/scm/ReconScmTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMToyMjozNVrOFr4FTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMjo1MzoxNFrOFr6qUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU1MTk0OA==", "bodyText": "Do we need to always create ReconTaskStatus, or only if it is being inserted?", "url": "https://github.com/apache/ozone/pull/546#discussion_r381551948", "createdAt": "2020-02-19T21:22:35Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/scm/ReconScmTask.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.recon.scm;\n+\n+import org.hadoop.ozone.recon.schema.tables.daos.ReconTaskStatusDao;\n+import org.hadoop.ozone.recon.schema.tables.pojos.ReconTaskStatus;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * Any background task that keeps SCM's metadata up to date.\n+ */\n+public abstract class ReconScmTask {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(ReconScmTask.class);\n+  private Thread taskThread;\n+  private ReconTaskStatusDao reconTaskStatusDao;\n+  private volatile boolean running;\n+\n+  @Inject\n+  public ReconScmTask(ReconTaskStatusDao reconTaskStatusDao) {\n+    this.reconTaskStatusDao = reconTaskStatusDao;\n+  }\n+\n+  public void register() {\n+    String taskName = getClass().getSimpleName();\n+    ReconTaskStatus reconTaskStatusRecord = new ReconTaskStatus(\n+        taskName, 0L, 0L);\n+    if (!reconTaskStatusDao.existsById(taskName)) {\n+      reconTaskStatusDao.insert(reconTaskStatusRecord);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f4bba09d4634da93ea4cdb30fc39dbf4bbf9b0c"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU5NDE5NQ==", "bodyText": "Good catch, will fix it.", "url": "https://github.com/apache/ozone/pull/546#discussion_r381594195", "createdAt": "2020-02-19T22:53:14Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/scm/ReconScmTask.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.recon.scm;\n+\n+import org.hadoop.ozone.recon.schema.tables.daos.ReconTaskStatusDao;\n+import org.hadoop.ozone.recon.schema.tables.pojos.ReconTaskStatus;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * Any background task that keeps SCM's metadata up to date.\n+ */\n+public abstract class ReconScmTask {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(ReconScmTask.class);\n+  private Thread taskThread;\n+  private ReconTaskStatusDao reconTaskStatusDao;\n+  private volatile boolean running;\n+\n+  @Inject\n+  public ReconScmTask(ReconTaskStatusDao reconTaskStatusDao) {\n+    this.reconTaskStatusDao = reconTaskStatusDao;\n+  }\n+\n+  public void register() {\n+    String taskName = getClass().getSimpleName();\n+    ReconTaskStatus reconTaskStatusRecord = new ReconTaskStatus(\n+        taskName, 0L, 0L);\n+    if (!reconTaskStatusDao.existsById(taskName)) {\n+      reconTaskStatusDao.insert(reconTaskStatusRecord);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU1MTk0OA=="}, "originalCommit": {"oid": "6f4bba09d4634da93ea4cdb30fc39dbf4bbf9b0c"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTY3Njk0OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/scm/ReconScmTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMToyNDoyM1rOFr4IuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMjo1MjowNlrOFr6onA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU1MjgyNA==", "bodyText": "Leftover comment.", "url": "https://github.com/apache/ozone/pull/546#discussion_r381552824", "createdAt": "2020-02-19T21:24:23Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/scm/ReconScmTask.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.recon.scm;\n+\n+import org.hadoop.ozone.recon.schema.tables.daos.ReconTaskStatusDao;\n+import org.hadoop.ozone.recon.schema.tables.pojos.ReconTaskStatus;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * Any background task that keeps SCM's metadata up to date.\n+ */\n+public abstract class ReconScmTask {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(ReconScmTask.class);\n+  private Thread taskThread;\n+  private ReconTaskStatusDao reconTaskStatusDao;\n+  private volatile boolean running;\n+\n+  @Inject\n+  public ReconScmTask(ReconTaskStatusDao reconTaskStatusDao) {\n+    this.reconTaskStatusDao = reconTaskStatusDao;\n+  }\n+\n+  public void register() {\n+    String taskName = getClass().getSimpleName();\n+    ReconTaskStatus reconTaskStatusRecord = new ReconTaskStatus(\n+        taskName, 0L, 0L);\n+    if (!reconTaskStatusDao.existsById(taskName)) {\n+      reconTaskStatusDao.insert(reconTaskStatusRecord);\n+      LOG.info(\"Registered {} task \", taskName);\n+    }\n+  }\n+\n+  public synchronized void start() {\n+    if (!isRunning()) {\n+      LOG.info(\"Starting {} Thread.\", getTaskName());\n+      running = true;\n+      taskThread = new Thread(this::run);\n+      taskThread.setName(getTaskName());\n+      taskThread.setDaemon(true);\n+      taskThread.start();\n+    } else {\n+      LOG.info(\"{} Thread is already running.\", getTaskName());\n+    }\n+  }\n+\n+  /**\n+   * Stops Replication Monitor thread.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f4bba09d4634da93ea4cdb30fc39dbf4bbf9b0c"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU5Mzc1Ng==", "bodyText": "Will remove.", "url": "https://github.com/apache/ozone/pull/546#discussion_r381593756", "createdAt": "2020-02-19T22:52:06Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/scm/ReconScmTask.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.recon.scm;\n+\n+import org.hadoop.ozone.recon.schema.tables.daos.ReconTaskStatusDao;\n+import org.hadoop.ozone.recon.schema.tables.pojos.ReconTaskStatus;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * Any background task that keeps SCM's metadata up to date.\n+ */\n+public abstract class ReconScmTask {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(ReconScmTask.class);\n+  private Thread taskThread;\n+  private ReconTaskStatusDao reconTaskStatusDao;\n+  private volatile boolean running;\n+\n+  @Inject\n+  public ReconScmTask(ReconTaskStatusDao reconTaskStatusDao) {\n+    this.reconTaskStatusDao = reconTaskStatusDao;\n+  }\n+\n+  public void register() {\n+    String taskName = getClass().getSimpleName();\n+    ReconTaskStatus reconTaskStatusRecord = new ReconTaskStatus(\n+        taskName, 0L, 0L);\n+    if (!reconTaskStatusDao.existsById(taskName)) {\n+      reconTaskStatusDao.insert(reconTaskStatusRecord);\n+      LOG.info(\"Registered {} task \", taskName);\n+    }\n+  }\n+\n+  public synchronized void start() {\n+    if (!isRunning()) {\n+      LOG.info(\"Starting {} Thread.\", getTaskName());\n+      running = true;\n+      taskThread = new Thread(this::run);\n+      taskThread.setName(getTaskName());\n+      taskThread.setDaemon(true);\n+      taskThread.start();\n+    } else {\n+      LOG.info(\"{} Thread is already running.\", getTaskName());\n+    }\n+  }\n+\n+  /**\n+   * Stops Replication Monitor thread.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU1MjgyNA=="}, "originalCommit": {"oid": "6f4bba09d4634da93ea4cdb30fc39dbf4bbf9b0c"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTcwNjk5OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/scm/ReconPipelineFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMTozMzo0OFrOFr4a8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMjo1MzozOFrOFr6q_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU1NzQ4OQ==", "bodyText": "I think UnsupportedOperationException would be more appropriate.\nAlso, what about the other create method below?", "url": "https://github.com/apache/ozone/pull/546#discussion_r381557489", "createdAt": "2020-02-19T21:33:48Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/scm/ReconPipelineFactory.java", "diffHunk": "@@ -48,8 +48,8 @@\n \n     @Override\n     public Pipeline create(HddsProtos.ReplicationFactor factor){\n-      LOG.warn(\"Trying to create pipeline in Recon, which is prohibited!\");\n-      return null;\n+      throw new RuntimeException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f4bba09d4634da93ea4cdb30fc39dbf4bbf9b0c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU5NDM2NA==", "bodyText": "Good catch, will add it.", "url": "https://github.com/apache/ozone/pull/546#discussion_r381594364", "createdAt": "2020-02-19T22:53:38Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/scm/ReconPipelineFactory.java", "diffHunk": "@@ -48,8 +48,8 @@\n \n     @Override\n     public Pipeline create(HddsProtos.ReplicationFactor factor){\n-      LOG.warn(\"Trying to create pipeline in Recon, which is prohibited!\");\n-      return null;\n+      throw new RuntimeException(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU1NzQ4OQ=="}, "originalCommit": {"oid": "6f4bba09d4634da93ea4cdb30fc39dbf4bbf9b0c"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 69, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}