{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgwMjQ1ODkx", "number": 1400, "title": "HDDS-4141. Implement Finalize command in Ozone Manager client.", "bodyText": "What changes were proposed in this pull request?\nAs part of the upgrade development, this addition is aiming to create the client side implementation of the finalizeUpgrade initiation and monitoring parts.\nIn order to test it the PR has some classes and some modifications that are related to the server side development, but are added here, to be able to test out the command implemented in FinalizeUpgradeSubCommand class.\nThe PR also contains the proto message additions for the two newly implemented requests, finalieUpgrade and finalizeUpgreadeProgress request and response pair, and a status message sent between the client and server with these requests.\nThe idea is the following:\nonly one client can initialize and monitor the finalization, so that we have a client ID with the requests, but in case of a client side failure the command allows a takeover from the original initiator to finish the monitoring.\nThe finalization is a write request, that potentially affects all table caches in OM, so CleanupTableInfo annotation was extended with a cleanupAll option. And the tests were added to accommodate that.\nOmMetaDataManager was extended with an ALL_TABLES psf field, to have the full table list at the same place.\nI was exploring the idea of using OmDbDefinition#getColumnFamilies here, but in order to use that we need to change the annotation in all the response classes to use DBColumnFamilyDefinition instead of String in cleanupTables field, as in the annotation it is impossible to point to a definition's getTableName method, and refactoring that should be done in a separate task, it affects too many files and code paths to include it here.\nAlso during toying with the idea it turned out that OmDbDefinition#getColumnFamilies returns S3_TABLE that is not there anymore in OM as I found, so probably we should remove it.\nThe server side handling is purely just toying with some ideas, and in a state where I got to a few problems/questions. At that point we have decided that the minimum viable solution is something like this:\n\nfinalizeUpgrade will post one request to Ratis, and all OMs will start finalization and finish finalization as part of that request.\nmonitoring will be supplied status from the request handling in the Leader and will emit finalization done when OM reached majority processing the finalization request.\nfinalization itself will ensure to run the finalization of all the new LayoutFeature-s that are enabled and applied, and will update the MLV in all 3 OMs\nA proposal that describes problems stemming from this approach and with a few possibilities to make this more robust will be added in a follow up JIRA later on as we finished the minimalistic first version, as ideas explore messaging between OMs outside Ratis, posting finalize requests for LayoutFeatures in a lazy manner one by one to ratis, just to mention a few from a couple possible approaches, and this for sure requires a lot of time and exploration and a consensus on how deep we want to go down this rabbit hole.\n\nWhat is the link to the Apache JIRA\nhttps://issues.apache.org/jira/browse/HDDS-4141\nHow was this patch tested?\nIn ha and non-ha docker environments possible scenarios to run the command was tested by hand.", "createdAt": "2020-09-04T23:03:27Z", "url": "https://github.com/apache/ozone/pull/1400", "merged": true, "mergeCommit": {"oid": "54e5982073e4751e1ab405e7d359be9b241e56c3"}, "closed": true, "closedAt": "2020-09-09T19:02:25Z", "author": {"login": "fapifta"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdFsmq1gH2gAyNDgwMjQ1ODkxOmU3OGY5N2FkYTBkMDlkNzkzODJkNDA0YTQxZGEyMDhjM2M3NjA0NGU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHQ-tggFqTQ4NTMxMDkxMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e78f97ada0d09d79382d404a41da208c3c76044e", "author": {"user": {"login": "fapifta", "name": "Istvan Fajth"}}, "url": "https://github.com/apache/ozone/commit/e78f97ada0d09d79382d404a41da208c3c76044e", "committedDate": "2020-09-04T22:04:55Z", "message": "HDDS-4141. Implement Finalize command in Ozone Manager client.\n\nServer side parts are added to be able to test out the client side.\nChanges has to come there under HDDS-4172."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMDU4NDgx", "url": "https://github.com/apache/ozone/pull/1400#pullrequestreview-483058481", "createdAt": "2020-09-05T14:26:31Z", "commit": {"oid": "e78f97ada0d09d79382d404a41da208c3c76044e"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQxNDoyNjozMlrOHNiUwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQxNDo0Mzo1NlrOHNiZwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1NTkwNA==", "bodyText": "INVALID_REQUEST is a coarse-grained result code, why not define more understandable code in OMException#ResultCodes for matching current scenario?", "url": "https://github.com/apache/ozone/pull/1400#discussion_r483955904", "createdAt": "2020-09-05T14:26:32Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/protocol/OzoneManagerProtocol.java", "diffHunk": "@@ -310,6 +311,69 @@ OmKeyLocationInfo allocateBlock(OmKeyArgs args, long clientID,\n \n   ServiceInfoEx getServiceInfo() throws IOException;\n \n+  /**\n+   * Initiate metadata upgrade finalization.\n+   * This method when called, initiates finalization of Ozone Manager metadata\n+   * during an upgrade. The status returned contains the status\n+   * - ALREADY_FINALIZED with empty message list when the software layout\n+   *    version and the metadata layout version are equal\n+   * - STARTING_FINALIZATION with empty message list when the finalization\n+   *    has been started successfully\n+   * - If a finalization is already in progress, then the method throws an\n+   *    {@link OMException} with a result code INVALID_REQUEST\n+   *\n+   *\n+   * The leader Ozone Manager initiates finalization of the followers via\n+   * the Raft protocol in other Ozone Managers, and reports progress to the\n+   * client via the {@link #queryUpgradeFinalizationProgress(String, boolean)}\n+   * call.\n+   *\n+   * The follower Ozone Managers reject this request and directs the client to\n+   * the leader.\n+   *\n+   * @param upgradeClientID String identifier of the upgrade finalizer client\n+   * @return the finalization status.\n+   * @throws IOException\n+   *            when finalization is failed, or this Ozone Manager is not the\n+   *                leader.\n+   * @throws OMException\n+   *            when finalization is already in progress.\n+   */\n+  UpgradeFinalizationStatus finalizeUpgrade(\n+      String upgradeClientID\n+  ) throws IOException;\n+\n+  /**\n+   * Queries the current status of finalization.\n+   * This method when called, returns the status messages from the finalization\n+   * progress, if any. The status returned is\n+   * - FINALIZATION_IN_PROGRESS, and the messages since the last query if the\n+   *    finalization is still running\n+   * - FINALIZATION_DONE with a message list containing the messages since\n+   *    the last query, if the finalization ended but the messages were not\n+   *    yet emitted to the client.\n+   * - ALREADY_FINALIZED with an empty message list otherwise\n+   * - If finalization is not in progress, but software layout version and\n+   *    metadata layout version are different, the method will throw an\n+   *    {@link OMException} with a result code INVALID_REQUEST", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e78f97ada0d09d79382d404a41da208c3c76044e"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1NjU2Mw==", "bodyText": "Two comments for above status defined:\n\nWould be better rename FINALIZATION_REQUIRED to FINALIZATION_NOT_STARTED?\nJust from the status name, I don't see obvious difference between ALREADY_FINALIZED and FINALIZATION_DONE and I notice that ALREADY_FINALIZED is not set anywhere.", "url": "https://github.com/apache/ozone/pull/1400#discussion_r483956563", "createdAt": "2020-09-05T14:35:14Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/interface-client/src/main/proto/OmClientProtocol.proto", "diffHunk": "@@ -1003,6 +1009,36 @@ message DBUpdatesResponse {\n     repeated bytes data = 2;\n }\n \n+\n+message UpgradeFinalizationStatus {\n+  enum Status {\n+    ALREADY_FINALIZED = 1;\n+    STARTING_FINALIZATION = 2;\n+    FINALIZATION_IN_PROGRESS = 3;\n+    FINALIZATION_DONE = 4;\n+    FINALIZATION_REQUIRED = 5;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e78f97ada0d09d79382d404a41da208c3c76044e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1NjY2Nw==", "bodyText": "As I commented, FINALIZATION_REQUIRED and INVALID_REQUEST could use a better more understandable name, : ).", "url": "https://github.com/apache/ozone/pull/1400#discussion_r483956667", "createdAt": "2020-09-05T14:36:49Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -2613,6 +2615,73 @@ public ServiceInfoEx getServiceInfo() throws IOException {\n     return new ServiceInfoEx(getServiceList(), caCertPem);\n   }\n \n+  private final List<String> finalizationMsgs = new ArrayList<>();\n+  private UpgradeFinalizationStatus.Status finalizationStatus =\n+      UpgradeFinalizationStatus.Status.FINALIZATION_REQUIRED;\n+\n+  @Override\n+  public UpgradeFinalizationStatus finalizeUpgrade(String upgradeClientID)\n+      throws IOException {\n+    if (!finalizationStatus\n+        .equals(UpgradeFinalizationStatus.Status.FINALIZATION_REQUIRED)){\n+      throw new OMException(\"Finalization is not needed.\", INVALID_REQUEST);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e78f97ada0d09d79382d404a41da208c3c76044e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1NjgwNg==", "bodyText": "finalizeUpgrade -> FinalizeUpgrade", "url": "https://github.com/apache/ozone/pull/1400#discussion_r483956806", "createdAt": "2020-09-05T14:38:46Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -2613,6 +2615,73 @@ public ServiceInfoEx getServiceInfo() throws IOException {\n     return new ServiceInfoEx(getServiceList(), caCertPem);\n   }\n \n+  private final List<String> finalizationMsgs = new ArrayList<>();\n+  private UpgradeFinalizationStatus.Status finalizationStatus =\n+      UpgradeFinalizationStatus.Status.FINALIZATION_REQUIRED;\n+\n+  @Override\n+  public UpgradeFinalizationStatus finalizeUpgrade(String upgradeClientID)\n+      throws IOException {\n+    if (!finalizationStatus\n+        .equals(UpgradeFinalizationStatus.Status.FINALIZATION_REQUIRED)){\n+      throw new OMException(\"Finalization is not needed.\", INVALID_REQUEST);\n+    }\n+    finalizationStatus = UpgradeFinalizationStatus.Status.STARTING_FINALIZATION;\n+    UpgradeFinalizationStatus status = UpgradeFinalizationStatus.newBuilder()\n+        .setStatus(finalizationStatus)\n+        .build();\n+    LOG.info(\"finalizeUpgrade initiated by client: {}.\", upgradeClientID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e78f97ada0d09d79382d404a41da208c3c76044e"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1Njk4OQ==", "bodyText": "force parameter is not actually used here, this parameter is related to the client takeover behavior.", "url": "https://github.com/apache/ozone/pull/1400#discussion_r483956989", "createdAt": "2020-09-05T14:41:05Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -2613,6 +2615,73 @@ public ServiceInfoEx getServiceInfo() throws IOException {\n     return new ServiceInfoEx(getServiceList(), caCertPem);\n   }\n \n+  private final List<String> finalizationMsgs = new ArrayList<>();\n+  private UpgradeFinalizationStatus.Status finalizationStatus =\n+      UpgradeFinalizationStatus.Status.FINALIZATION_REQUIRED;\n+\n+  @Override\n+  public UpgradeFinalizationStatus finalizeUpgrade(String upgradeClientID)\n+      throws IOException {\n+    if (!finalizationStatus\n+        .equals(UpgradeFinalizationStatus.Status.FINALIZATION_REQUIRED)){\n+      throw new OMException(\"Finalization is not needed.\", INVALID_REQUEST);\n+    }\n+    finalizationStatus = UpgradeFinalizationStatus.Status.STARTING_FINALIZATION;\n+    UpgradeFinalizationStatus status = UpgradeFinalizationStatus.newBuilder()\n+        .setStatus(finalizationStatus)\n+        .build();\n+    LOG.info(\"finalizeUpgrade initiated by client: {}.\", upgradeClientID);\n+    if (isLeader()) {\n+      finalizationMsgs.add(\"Finalization started.\");\n+      finalizationStatus =\n+          UpgradeFinalizationStatus.Status.FINALIZATION_IN_PROGRESS;\n+\n+      new Thread(() -> {\n+        LOG.info(\"Finalization thread started.\");\n+        int i = 0;\n+        Random random = new Random(0xafaf);\n+        while (i < 50) {\n+          int rand = random.nextInt(Math.min(10, 50 - i)) + 1;\n+          synchronized (finalizationMsgs) {\n+            LOG.info(\"Emitting {} messages\", rand);\n+            for (int j = 0; j < rand; j++) {\n+              LOG.info(\"Upgrade MSG: {} - added.\", \"Message \" + i + \".\");\n+              finalizationMsgs.add(\"Message \" + i + \".\");\n+              i++;\n+            }\n+          }\n+          try {\n+            int sleep = random.nextInt(1200);\n+            LOG.info(\"Sleeping {}ms before emit messages again.\", sleep);\n+            Thread.sleep(sleep);\n+          } catch (InterruptedException e) {\n+            LOG.info(\"Finalization thread interrupted.\", e);\n+            return;\n+          }\n+        }\n+        LOG.info(\"Finalization done.\");\n+        finalizationStatus = UpgradeFinalizationStatus.Status.FINALIZATION_DONE;\n+      }, \"Finalization-Thread\").start();\n+    }\n+    return status;\n+  }\n+\n+  @Override\n+  public UpgradeFinalizationStatus queryUpgradeFinalizationProgress(\n+      String upgradeClientID, boolean force", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e78f97ada0d09d79382d404a41da208c3c76044e"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1NzE4NQ==", "bodyText": "Sometimes users just want to query immediate upgrade status and don't want to wait and monitor finalization finished. Can we add one additionally option that we can skip monitorAndWaitFinalization?", "url": "https://github.com/apache/ozone/pull/1400#discussion_r483957185", "createdAt": "2020-09-05T14:43:56Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/admin/om/FinalizeUpgradeSubCommand.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.hadoop.ozone.admin.om;\n+\n+import org.apache.hadoop.hdds.cli.HddsVersionProvider;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.om.protocol.OzoneManagerProtocol;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.UpgradeFinalizationStatus;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.util.UUID;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.INVALID_REQUEST;\n+\n+/**\n+ * Handler of ozone admin om finalizeUpgrade command.\n+ */\n+@CommandLine.Command(\n+    name = \"finalizeupgrade\",\n+    description = \"Finalizes Ozone Manager's metadata changes and enables new \"\n+        + \"features after a software upgrade.\\n\"\n+        + \"It is possible to specify the service ID for an HA environment, \"\n+        + \"or the Ozone manager host in a non-HA environment, if none provided \"\n+        + \"the default from configuration is being used if not ambiguous.\",\n+    mixinStandardHelpOptions = true,\n+    versionProvider = HddsVersionProvider.class\n+)\n+public class FinalizeUpgradeSubCommand implements Callable<Void> {\n+\n+  @CommandLine.ParentCommand\n+  private OMAdmin parent;\n+\n+  @CommandLine.Option(\n+      names = {\"-id\", \"--service-id\"},\n+      description = \"Ozone Manager Service ID\"\n+  )\n+  private String omServiceId;\n+\n+  @CommandLine.Option(\n+      names = {\"-host\", \"--service-host\"},\n+      description = \"Ozone Manager Host\"\n+  )\n+  private String omHost;\n+\n+  @CommandLine.Option(\n+      names = {\"--takeover\"},\n+      description = \"Forces takeover of monitoring from an other client, if \"\n+          + \"finalization has already been started and did not finished yet.\"\n+  )\n+  private boolean force;\n+\n+  @Override\n+  public Void call() throws Exception {\n+    boolean forceHA = false;\n+    OzoneManagerProtocol client =\n+        parent.createOmClient(omServiceId, omHost, forceHA);\n+    String upgradeClientID = \"Upgrade-Client-\" + UUID.randomUUID().toString();\n+    try {\n+      UpgradeFinalizationStatus status =\n+          client.finalizeUpgrade(upgradeClientID);\n+      if (isFinalized(status)){\n+        System.out.println(\"Upgrade has already been finalized.\");\n+        emitExitMsg();\n+        return null;\n+      } else if (!isStarting(status)){\n+        System.err.println(\"Invalid response from Ozone Manager.\");\n+        System.err.println(\n+            \"Current finalization status is: \" + status.getStatus()\n+        );\n+        throw new IOException(\"Exiting...\");\n+      }\n+    } catch (OMException e) {\n+      handleInvalidRequestAfterInitiatingFinalization(e);\n+    }\n+    monitorAndWaitFinalization(client, upgradeClientID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e78f97ada0d09d79382d404a41da208c3c76044e"}, "originalPosition": 97}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "697366ac5a1c145599e412566639743cac64f5d8", "author": {"user": {"login": "fapifta", "name": "Istvan Fajth"}}, "url": "https://github.com/apache/ozone/commit/697366ac5a1c145599e412566639743cac64f5d8", "committedDate": "2020-09-07T13:19:05Z", "message": "HDDS-4141. Implement Finalize command in Ozone Manager client.\n\nAddress typo in OM log message.\nIn the client, force option was renamed to takeover instead, this rename\nwas not properly done on the server side, and in the proto layer, adding\na fix for that and rename force to takeover there also."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzNjMzNjYx", "url": "https://github.com/apache/ozone/pull/1400#pullrequestreview-483633661", "createdAt": "2020-09-07T15:31:04Z", "commit": {"oid": "697366ac5a1c145599e412566639743cac64f5d8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8721dfcee1713fcbd0300b9e30cab20310022563", "author": {"user": {"login": "fapifta", "name": "Istvan Fajth"}}, "url": "https://github.com/apache/ozone/commit/8721dfcee1713fcbd0300b9e30cab20310022563", "committedDate": "2020-09-08T10:50:16Z", "message": "HDDS-4141. Implement Finalize command in Ozone Manager client.\n\nAdded newlines to the end of the file in package-info.java files.\nRemoved an unnecessary string concatenation from TestCleanupTableInfo."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NDEwOTE5", "url": "https://github.com/apache/ozone/pull/1400#pullrequestreview-484410919", "createdAt": "2020-09-08T18:56:05Z", "commit": {"oid": "8721dfcee1713fcbd0300b9e30cab20310022563"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo1NjowNVrOHOqBUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo1NzoyM1rOHOqEEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEzMDU3OQ==", "bodyText": "Can we confirm that this will not have a \"side effect\"? Is there a better way to do this, like passing an empty array and handling it as a special case in test?", "url": "https://github.com/apache/ozone/pull/1400#discussion_r485130579", "createdAt": "2020-09-08T18:56:05Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/upgrade/OMFinalizeUpgradeProgressResponse.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.response.upgrade;\n+\n+import org.apache.hadoop.hdds.utils.db.BatchOperation;\n+import org.apache.hadoop.ozone.om.OMMetadataManager;\n+import org.apache.hadoop.ozone.om.OmMetadataManagerImpl;\n+import org.apache.hadoop.ozone.om.response.CleanupTableInfo;\n+import org.apache.hadoop.ozone.om.response.OMClientResponse;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Response for finalizeUpgradeProgress request.\n+ */\n+// yepp this will not be a write request, adding a table here to the annotation\n+// just to pass tests related to this annotation.\n+@CleanupTableInfo(cleanupTables = { OmMetadataManagerImpl.USER_TABLE })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8721dfcee1713fcbd0300b9e30cab20310022563"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEzMTI4Mg==", "bodyText": "As discussed offline, this can be a READ request. I am ok with doing it in the next patch (HDDS-4172).", "url": "https://github.com/apache/ozone/pull/1400#discussion_r485131282", "createdAt": "2020-09-08T18:57:23Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/upgrade/OMFinalizeUpgradeProgressRequest.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.request.upgrade;\n+\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.ratis.utils.OzoneManagerDoubleBufferHelper;\n+import org.apache.hadoop.ozone.om.request.OMClientRequest;\n+import org.apache.hadoop.ozone.om.request.util.OmResponseUtil;\n+import org.apache.hadoop.ozone.om.response.OMClientResponse;\n+import org.apache.hadoop.ozone.om.response.upgrade.OMFinalizeUpgradeProgressResponse;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.FinalizeUpgradeProgressRequest;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.FinalizeUpgradeProgressResponse;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMRequest;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.UpgradeFinalizationStatus;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Handles finalizeUpgradeProgress request that serves to query the status\n+ * of the async finalization progress.\n+ */\n+public class OMFinalizeUpgradeProgressRequest extends OMClientRequest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8721dfcee1713fcbd0300b9e30cab20310022563"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0Nzg3Mjk4", "url": "https://github.com/apache/ozone/pull/1400#pullrequestreview-484787298", "createdAt": "2020-09-09T08:41:37Z", "commit": {"oid": "8721dfcee1713fcbd0300b9e30cab20310022563"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1MzEwOTEz", "url": "https://github.com/apache/ozone/pull/1400#pullrequestreview-485310913", "createdAt": "2020-09-09T19:01:41Z", "commit": {"oid": "8721dfcee1713fcbd0300b9e30cab20310022563"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2470, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}