{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4ODgzNTEx", "number": 1480, "title": "HDDS-4315. Use Epoch to generate unique ObjectIDs", "bodyText": "What changes were proposed in this pull request?\nIn a non-Ratis OM, the transaction index used to generate ObjectID is reset on OM restart. This can lead to duplicate ObjectIDs when the OM is restarted. ObjectIDs should be unique.\nFor HDDS-2939 and NFS are some of the features which depend on ObjectIds being unique.\nThis Jira aims to introduce an epoch number in OM which is incremented on OM restarts. The epoch is persisted on disk. This epoch will be used to set the first 16 bits of the objectID to ensure that objectIDs are unique even after OM restart.\nThe highest epoch number is reserved for transactions coming through ratis. This will take care of the scenario where OM ratis is enabled on an existing cluster.\nTo ensure that objectIDs are unique across restarts in non-ratis OM cluster, the transaction index should be updated in DB on every flush to DB. This can be done in a similar fashion to what is being done for ratis enabled cluster today. TransactionInfo table is updated with transaction index as part of every batch write operation to DB.\nAlso, and epoch number is introduced to ensure that objectIDs do not clash with older clusters in which this fix does not exist. From the 64 bits of ObjectID (long variable), 2 bits are reserved for epoch and 8 bits for recursive directory creation, if required. The most significant 2 bits of objectIDs is set to epoch. For clusters before HDDS-4315 there is no epoch as such. But it can be safely assumed that the most significant 2 bits of the objectID will be 00 (as it unlikely to reach trxn index > 2^62 in an existing cluster). From HDDS-4315 onwards, the Epoch for non-ratis OM clusters will be binary 01 (= decimal 1) and for ratis enabled OM cluster will be binary 10 (= decimal 2).\nWhat is the link to the Apache JIRA\nhttps://issues.apache.org/jira/browse/HDDS-4315\nHow was this patch tested?\nAdded unit tests.", "createdAt": "2020-10-06T23:09:36Z", "url": "https://github.com/apache/ozone/pull/1480", "merged": true, "mergeCommit": {"oid": "e56d7bc97933add97145afc3633ad2a3326668ed"}, "closed": true, "closedAt": "2020-11-12T19:42:33Z", "author": {"login": "hanishakoneru"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdQXUScAFqTUwNDM3MTU4OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdb2msuAFqTUyOTM1Nzg0OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0MzcxNTg5", "url": "https://github.com/apache/ozone/pull/1480#pullrequestreview-504371589", "createdAt": "2020-10-08T01:28:47Z", "commit": {"oid": "a0bef37d1448e483c317c293308040a165b5b7bd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMToyODo0OFrOHeK7_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMToyODo0OFrOHeK7_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM5ODUyNA==", "bodyText": "I am thinking for this extreme case, user cannot write object anymore when TransactionID exceeds MAX_TRXN_ID, right? So what can we do for this, have to setup a new Ozone cluster to use?", "url": "https://github.com/apache/ozone/pull/1480#discussion_r501398524", "createdAt": "2020-10-08T01:28:48Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java", "diffHunk": "@@ -523,6 +531,32 @@ public static OmKeyInfo prepareKeyForRecover(OmKeyInfo keyInfo,\n     }\n   }\n \n+  /**\n+   * Get the valid base object id given the transaction id.\n+   * @param id of the transaction. This value cannot exceed 2^40 - 1 as\n+   *           out of the 64 bits for a long, 16 are reserved for the epoch\n+   *           and 8 for recursive directory creation.\n+   * @return base object id allocated against the transaction\n+   */\n+  public static long getObjectIdFromTxId(long epoch, long id) {\n+    Preconditions.checkArgument(id <= MAX_TRXN_ID, \"TransactionID \" +\n+        \"exceeds max limit of \" + MAX_TRXN_ID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0bef37d1448e483c317c293308040a165b5b7bd"}, "originalPosition": 46}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a0bef37d1448e483c317c293308040a165b5b7bd", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/a0bef37d1448e483c317c293308040a165b5b7bd", "committedDate": "2020-10-07T23:09:31Z", "message": "unit test and fix"}, "afterCommit": {"oid": "00959ae891d09b2cc2be1b82490781fdbd02a389", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/00959ae891d09b2cc2be1b82490781fdbd02a389", "committedDate": "2020-10-20T20:43:04Z", "message": "HDDS-4315. Ensure ObjectIDs are unique across restarts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb1fd322d51700e932d9cf8b0fe605419f7a838d", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/bb1fd322d51700e932d9cf8b0fe605419f7a838d", "committedDate": "2020-10-20T22:40:06Z", "message": "HDDS-4315. Ensure ObjectIDs are unique across restarts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c1526ae7dcce5e0ce927b275851b6b01046a697", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/3c1526ae7dcce5e0ce927b275851b6b01046a697", "committedDate": "2020-10-20T22:40:06Z", "message": "CI fixes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "00959ae891d09b2cc2be1b82490781fdbd02a389", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/00959ae891d09b2cc2be1b82490781fdbd02a389", "committedDate": "2020-10-20T20:43:04Z", "message": "HDDS-4315. Ensure ObjectIDs are unique across restarts"}, "afterCommit": {"oid": "3c1526ae7dcce5e0ce927b275851b6b01046a697", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/3c1526ae7dcce5e0ce927b275851b6b01046a697", "committedDate": "2020-10-20T22:40:06Z", "message": "CI fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0ODcxMjAz", "url": "https://github.com/apache/ozone/pull/1480#pullrequestreview-514871203", "createdAt": "2020-10-22T15:45:42Z", "commit": {"oid": "3c1526ae7dcce5e0ce927b275851b6b01046a697"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTo0NjozOFrOHmoU6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTo1MjowMVrOHmokmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI2ODY0OA==", "bodyText": "Can we rename id -> trxnId", "url": "https://github.com/apache/ozone/pull/1480#discussion_r510268648", "createdAt": "2020-10-22T15:46:38Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java", "diffHunk": "@@ -524,6 +535,48 @@ public static OmKeyInfo prepareKeyForRecover(OmKeyInfo keyInfo,\n     }\n   }\n \n+  public static int getOMEpoch(boolean isRatisEnabled) {\n+    return isRatisEnabled ? EPOCH_WHEN_RATIS_ENABLED :\n+        EPOCH_WHEN_RATIS_NOT_ENABLED;\n+  }\n+\n+  /**\n+   * Get the valid base object id given the transaction id.\n+   * @param epoch a 2 bit epoch number. The 2 most significant bits of the\n+   *              object will be set to this epoch.\n+   * @param id of the transaction. This value cannot exceed 2^54 - 1 as\n+   *           out of the 64 bits for a long, 2 are reserved for the epoch\n+   *           and 8 for recursive directory creation.\n+   * @return base object id allocated against the transaction\n+   */\n+  public static long getObjectIdFromTxId(long epoch, long id) {\n+    Preconditions.checkArgument(id <= MAX_TRXN_ID, \"TransactionID \" +\n+        \"exceeds max limit of \" + MAX_TRXN_ID);\n+    return addEpochToObjectId(epoch, id);\n+  }\n+\n+  /**\n+   * Note - This function should not be called directly. It is directly called\n+   * only from OzoneManager#addS3GVolumeToDB() which is a one time operation\n+   * when OM is started first time to add S3G volume. In call other cases,\n+   * getObjectIdFromTxId() should be called to append epoch to objectID.\n+   */\n+  public static long addEpochToObjectId(long epoch, long id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c1526ae7dcce5e0ce927b275851b6b01046a697"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MjY2NQ==", "bodyText": "I prefer to reuse metadataManager#getOmEpoch to set epoch value, so that epoch number is from one same place.", "url": "https://github.com/apache/ozone/pull/1480#discussion_r510272665", "createdAt": "2020-10-22T15:52:01Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -394,6 +403,8 @@ private OzoneManager(OzoneConfiguration conf) throws IOException,\n         OMConfigKeys.OZONE_OM_RATIS_ENABLE_KEY,\n         OMConfigKeys.OZONE_OM_RATIS_ENABLE_DEFAULT);\n \n+    omEpoch = OmUtils.getOMEpoch(isRatisEnabled);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c1526ae7dcce5e0ce927b275851b6b01046a697"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMDQ5NTYz", "url": "https://github.com/apache/ozone/pull/1480#pullrequestreview-521049563", "createdAt": "2020-10-30T21:36:05Z", "commit": {"oid": "3c1526ae7dcce5e0ce927b275851b6b01046a697"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMTozNjowNVrOHrhHlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMTo1NTo0NVrOHrhhpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM5MzQyOA==", "bodyText": "can we use  1 << 54  instead of Math.pow ?", "url": "https://github.com/apache/ozone/pull/1480#discussion_r515393428", "createdAt": "2020-10-30T21:36:05Z", "author": {"login": "prashantpogde"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java", "diffHunk": "@@ -76,6 +78,17 @@\n   private static final SecureRandom SRAND = new SecureRandom();\n   private static byte[] randomBytes = new byte[32];\n \n+  private static final long TRANSACTION_ID_SHIFT = 8;\n+  // from the 64 bits of ObjectID (long variable), 2 bits are reserved for\n+  // epoch and 8 bits for recursive directory creation, if required. This\n+  // leaves 54 bits for the transaction ID. Also, the last transaction ID is\n+  // reserved for creating S3G volume on OM start {@link\n+  // OzoneManager#addS3GVolumeToDB()}.\n+  public static final long EPOCH_ID_SHIFT = 62; // 64 - 2\n+  public static final long MAX_TRXN_ID = (long) (Math.pow(2, 54) - 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c1526ae7dcce5e0ce927b275851b6b01046a697"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM5NDA1Mw==", "bodyText": "Don't we want these values to be 0 and 1 instead of 1 & 2 ?", "url": "https://github.com/apache/ozone/pull/1480#discussion_r515394053", "createdAt": "2020-10-30T21:38:01Z", "author": {"login": "prashantpogde"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java", "diffHunk": "@@ -76,6 +78,17 @@\n   private static final SecureRandom SRAND = new SecureRandom();\n   private static byte[] randomBytes = new byte[32];\n \n+  private static final long TRANSACTION_ID_SHIFT = 8;\n+  // from the 64 bits of ObjectID (long variable), 2 bits are reserved for\n+  // epoch and 8 bits for recursive directory creation, if required. This\n+  // leaves 54 bits for the transaction ID. Also, the last transaction ID is\n+  // reserved for creating S3G volume on OM start {@link\n+  // OzoneManager#addS3GVolumeToDB()}.\n+  public static final long EPOCH_ID_SHIFT = 62; // 64 - 2\n+  public static final long MAX_TRXN_ID = (long) (Math.pow(2, 54) - 2);\n+  public static final int EPOCH_WHEN_RATIS_NOT_ENABLED = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c1526ae7dcce5e0ce927b275851b6b01046a697"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM5NjEyMg==", "bodyText": "nit : s/addEpochToObjectId /addEpochToTxnId since your definition is ObjectId = EpochId+TxnId", "url": "https://github.com/apache/ozone/pull/1480#discussion_r515396122", "createdAt": "2020-10-30T21:44:03Z", "author": {"login": "prashantpogde"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java", "diffHunk": "@@ -524,6 +535,48 @@ public static OmKeyInfo prepareKeyForRecover(OmKeyInfo keyInfo,\n     }\n   }\n \n+  public static int getOMEpoch(boolean isRatisEnabled) {\n+    return isRatisEnabled ? EPOCH_WHEN_RATIS_ENABLED :\n+        EPOCH_WHEN_RATIS_NOT_ENABLED;\n+  }\n+\n+  /**\n+   * Get the valid base object id given the transaction id.\n+   * @param epoch a 2 bit epoch number. The 2 most significant bits of the\n+   *              object will be set to this epoch.\n+   * @param id of the transaction. This value cannot exceed 2^54 - 1 as\n+   *           out of the 64 bits for a long, 2 are reserved for the epoch\n+   *           and 8 for recursive directory creation.\n+   * @return base object id allocated against the transaction\n+   */\n+  public static long getObjectIdFromTxId(long epoch, long id) {\n+    Preconditions.checkArgument(id <= MAX_TRXN_ID, \"TransactionID \" +\n+        \"exceeds max limit of \" + MAX_TRXN_ID);\n+    return addEpochToObjectId(epoch, id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c1526ae7dcce5e0ce927b275851b6b01046a697"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM5NzU2OA==", "bodyText": "consider EpochIdShift and TRANSACTION_ID_SHIFT here instead of hardcoded value.", "url": "https://github.com/apache/ozone/pull/1480#discussion_r515397568", "createdAt": "2020-10-30T21:48:13Z", "author": {"login": "prashantpogde"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java", "diffHunk": "@@ -524,6 +535,48 @@ public static OmKeyInfo prepareKeyForRecover(OmKeyInfo keyInfo,\n     }\n   }\n \n+  public static int getOMEpoch(boolean isRatisEnabled) {\n+    return isRatisEnabled ? EPOCH_WHEN_RATIS_ENABLED :\n+        EPOCH_WHEN_RATIS_NOT_ENABLED;\n+  }\n+\n+  /**\n+   * Get the valid base object id given the transaction id.\n+   * @param epoch a 2 bit epoch number. The 2 most significant bits of the\n+   *              object will be set to this epoch.\n+   * @param id of the transaction. This value cannot exceed 2^54 - 1 as\n+   *           out of the 64 bits for a long, 2 are reserved for the epoch\n+   *           and 8 for recursive directory creation.\n+   * @return base object id allocated against the transaction\n+   */\n+  public static long getObjectIdFromTxId(long epoch, long id) {\n+    Preconditions.checkArgument(id <= MAX_TRXN_ID, \"TransactionID \" +\n+        \"exceeds max limit of \" + MAX_TRXN_ID);\n+    return addEpochToObjectId(epoch, id);\n+  }\n+\n+  /**\n+   * Note - This function should not be called directly. It is directly called\n+   * only from OzoneManager#addS3GVolumeToDB() which is a one time operation\n+   * when OM is started first time to add S3G volume. In call other cases,\n+   * getObjectIdFromTxId() should be called to append epoch to objectID.\n+   */\n+  public static long addEpochToObjectId(long epoch, long id) {\n+    long lsb54 = id << TRANSACTION_ID_SHIFT;\n+    long msb2 = epoch << EPOCH_ID_SHIFT;\n+\n+    return msb2 | lsb54;\n+  }\n+\n+  /**\n+   * Given an objectId, unset the 2 most significant bits to get the\n+   * corresponding transaction index.\n+   */\n+  @VisibleForTesting\n+  public static long getTxIdFromObjectId(long objectId) {\n+    return ((Long.MAX_VALUE >> 2) & objectId) >> 8;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c1526ae7dcce5e0ce927b275851b6b01046a697"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQwMDEwMg==", "bodyText": "why differentiate between epoch before this change and non-ratis OM cluster ? both can be 0 ?", "url": "https://github.com/apache/ozone/pull/1480#discussion_r515400102", "createdAt": "2020-10-30T21:55:45Z", "author": {"login": "prashantpogde"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -306,6 +306,15 @@\n   private final Map<String, RatisDropwizardExports> ratisMetricsMap =\n       new ConcurrentHashMap<>();\n \n+  // Epoch is used to generate the objectIDs. The most significant 2 bits of\n+  // objectIDs is set to this epoch. For clusters before HDDS-4315 there is\n+  // no epoch as such. But it can be safely assumed that the most significant\n+  // 2 bits of the objectID will be 00. From HDDS-4315 onwards, the Epoch for\n+  // non-ratis OM clusters will be binary 01 (= decimal 1)  and for ratis", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c1526ae7dcce5e0ce927b275851b6b01046a697"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94d50565e67d5cfd8416a41f2f9ba0067ebffa63", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/94d50565e67d5cfd8416a41f2f9ba0067ebffa63", "committedDate": "2020-11-03T23:00:26Z", "message": "review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b0caa20ea8028c74ebfb064926821c15e83294c", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/7b0caa20ea8028c74ebfb064926821c15e83294c", "committedDate": "2020-11-03T23:37:05Z", "message": "compile fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMDA3NjMw", "url": "https://github.com/apache/ozone/pull/1480#pullrequestreview-523007630", "createdAt": "2020-11-04T02:41:01Z", "commit": {"oid": "7b0caa20ea8028c74ebfb064926821c15e83294c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0ODcxNzcy", "url": "https://github.com/apache/ozone/pull/1480#pullrequestreview-524871772", "createdAt": "2020-11-06T05:48:33Z", "commit": {"oid": "7b0caa20ea8028c74ebfb064926821c15e83294c"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MzU3ODQ4", "url": "https://github.com/apache/ozone/pull/1480#pullrequestreview-529357848", "createdAt": "2020-11-12T18:10:20Z", "commit": {"oid": "7b0caa20ea8028c74ebfb064926821c15e83294c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2343, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}