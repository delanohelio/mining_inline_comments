{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4ODkxOTc0", "number": 1390, "title": "HDDS-4196. Add an endpoint in Recon to query Prometheus", "bodyText": "What changes were proposed in this pull request?\n\nAdd a metrics proxy endpoint to query metrics service providers like prometheus.\nExample: <recon_endpoint>/api/v1/metrics/query?query=ratis_leader_election_electionCount will be proxied to <prometheus_endpoint>/api/v1/query?query=ratis_leader_election_electionCount\nAdd a new config \"ozone.recon.prometheus.http.endpoint\" to configure Prometheus endpoint. The proxy endpoint (/api/v1/metrics) will respond with an error if Prometheus endpoint is not configured.\nInclude ratis_leader_election_electionCount and ratis_leader_election_lastLeaderElectionTime metrics as part of the pipeline endpoint response if prometheus is configured.\nNote: At this point ratis_leader_election_lastLeaderElectionTime is still not available and is tracked via https://issues.apache.org/jira/browse/RATIS-1049\nAdd unit tests\n\nWhat is the link to the Apache JIRA\nhttps://issues.apache.org/jira/browse/HDDS-4196\nHow was this patch tested?\nThis patch was tested with unit tests and by verifying the Recon UI in a docker-compose cluster.", "createdAt": "2020-09-03T20:00:31Z", "url": "https://github.com/apache/ozone/pull/1390", "merged": true, "mergeCommit": {"oid": "a7c72fb7868dd54fd36c113d27daa4bc9e6757fa"}, "closed": true, "closedAt": "2020-09-10T18:50:21Z", "author": {"login": "vivekratnavel"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdFWBvQAH2gAyNDc4ODkxOTc0OmRkZjFmMjExY2U0NGI1YzkyZGYxMTE3NGJmMmVmYzcyNDA4MmZiMDA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdG8Cp1gFqTQ4NDM5ODU1MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ddf1f211ce44b5c92df11174bf2efc724082fb00", "author": {"user": {"login": "vivekratnavel", "name": "Vivek Ratnavel Subramanian"}}, "url": "https://github.com/apache/ozone/commit/ddf1f211ce44b5c92df11174bf2efc724082fb00", "committedDate": "2020-09-03T19:46:40Z", "message": "HDDS-4196. Add an endpoint in Recon to query Prometheus"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19e35f6b3a39d67ab4c40c301348a44f9b10670c", "author": {"user": {"login": "vivekratnavel", "name": "Vivek Ratnavel Subramanian"}}, "url": "https://github.com/apache/ozone/commit/19e35f6b3a39d67ab4c40c301348a44f9b10670c", "committedDate": "2020-09-04T01:24:10Z", "message": "Fix rat and integration test failure"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyODE5NjE4", "url": "https://github.com/apache/ozone/pull/1390#pullrequestreview-482819618", "createdAt": "2020-09-04T17:03:04Z", "commit": {"oid": "19e35f6b3a39d67ab4c40c301348a44f9b10670c"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzowMzowNVrOHNVuoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzoxMzo0MFrOHNWAQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc0OTUzNw==", "bodyText": "Nit. can be StringUtils.isEmpty(prometheusEndpoint)\nNit. Let's add a log line saying we are choosing \"Prometheus\" as the configured Metrics provider here or inside the constructor of PrometheusServiceProviderImpl.", "url": "https://github.com/apache/ozone/pull/1390#discussion_r483749537", "createdAt": "2020-09-04T17:03:05Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/MetricsServiceProviderFactory.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.recon;\n+\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.recon.ReconConfigKeys;\n+import org.apache.hadoop.ozone.recon.spi.MetricsServiceProvider;\n+import org.apache.hadoop.ozone.recon.spi.impl.PrometheusServiceProviderImpl;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+/**\n+ * Factory class that is used to get the instance of configured Metrics Service\n+ * Provider.\n+ */\n+@Singleton\n+public class MetricsServiceProviderFactory {\n+\n+  private OzoneConfiguration configuration;\n+  private ReconUtils reconUtils;\n+\n+  @Inject\n+  public MetricsServiceProviderFactory(OzoneConfiguration configuration,\n+                                       ReconUtils reconUtils) {\n+    this.configuration = configuration;\n+    this.reconUtils = reconUtils;\n+  }\n+\n+  /**\n+   * Returns the configured MetricsServiceProvider implementation (defaults\n+   * to prometheus).\n+   * If no metrics service providers are configured, returns null.\n+   *\n+   * @return MetricsServiceProvider instance that is configured.\n+   */\n+  public MetricsServiceProvider getMetricsServiceProvider() {\n+    String prometheusEndpoint = getPrometheusEndpoint();\n+    if (prometheusEndpoint != null && !prometheusEndpoint.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19e35f6b3a39d67ab4c40c301348a44f9b10670c"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc1MDQ4Mw==", "bodyText": "Nit. These constants can go inside PrometheusServiceProviderImpl.", "url": "https://github.com/apache/ozone/pull/1390#discussion_r483750483", "createdAt": "2020-09-04T17:05:19Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/ReconConstants.java", "diffHunk": "@@ -52,6 +52,9 @@ private ReconConstants() {\n   public static final String RECON_QUERY_BUCKET = \"bucket\";\n   public static final String RECON_QUERY_FILE_SIZE = \"fileSize\";\n \n+  public static final String PROMETHEUS_INSTANT_QUERY_API = \"query\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19e35f6b3a39d67ab4c40c301348a44f9b10670c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc1MTg2Nw==", "bodyText": "Nit. getEndpointConfigKey() can be a method on the MetricsServiceProvider interface.", "url": "https://github.com/apache/ozone/pull/1390#discussion_r483751867", "createdAt": "2020-09-04T17:08:40Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/api/MetricsProxyEndpoint.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.recon.api;\n+\n+import org.apache.hadoop.ozone.recon.MetricsServiceProviderFactory;\n+import org.apache.hadoop.ozone.recon.spi.MetricsServiceProvider;\n+import org.apache.hadoop.ozone.recon.spi.impl.PrometheusServiceProviderImpl;\n+\n+import javax.inject.Inject;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.UriInfo;\n+\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.channels.WritableByteChannel;\n+\n+import static org.apache.hadoop.ozone.recon.ReconConstants.PROMETHEUS_INSTANT_QUERY_API;\n+\n+/**\n+ * Endpoint to fetch metrics data from Prometheus HTTP endpoint.\n+ */\n+@Path(\"/metrics\")\n+public class MetricsProxyEndpoint {\n+\n+  private MetricsServiceProvider metricsServiceProvider;\n+\n+  @Inject\n+  public MetricsProxyEndpoint(\n+      MetricsServiceProviderFactory metricsServiceProviderFactory) {\n+    this.metricsServiceProvider =\n+        metricsServiceProviderFactory.getMetricsServiceProvider();\n+  }\n+\n+  /**\n+   * Return a response from the configured metrics endpoint.\n+   */\n+  @GET\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @Path(\"/{api}\")\n+  public void getMetricsResponse(\n+      @DefaultValue (PROMETHEUS_INSTANT_QUERY_API) @PathParam(\"api\") String api,\n+      @Context UriInfo uriInfo,\n+      @Context HttpServletResponse httpServletResponse\n+  ) throws Exception {\n+    if (metricsServiceProvider != null) {\n+      HttpURLConnection connection = metricsServiceProvider.getMetricsResponse(\n+          api, uriInfo.getRequestUri().getQuery());\n+      InputStream inputStream;\n+      if (Response.Status.fromStatusCode(connection.getResponseCode())\n+          .getFamily() == Response.Status.Family.SUCCESSFUL) {\n+        inputStream = connection.getInputStream();\n+      } else {\n+        // Throw a bad gateway error if HttpResponseCode is not 2xx\n+        httpServletResponse.setStatus(HttpServletResponse.SC_BAD_GATEWAY);\n+        inputStream = connection.getErrorStream();\n+      }\n+      try (\n+          OutputStream outputStream =\n+              httpServletResponse.getOutputStream();\n+          ReadableByteChannel inputChannel =\n+              Channels.newChannel(inputStream);\n+          WritableByteChannel outputChannel =\n+              Channels.newChannel(outputStream)\n+        ) {\n+        final ByteBuffer buffer = ByteBuffer.allocateDirect(16 * 1024);\n+\n+        while(inputChannel.read(buffer) != -1) {\n+          buffer.flip();\n+          outputChannel.write(buffer);\n+          buffer.compact();\n+        }\n+\n+        buffer.flip();\n+\n+        while(buffer.hasRemaining()) {\n+          outputChannel.write(buffer);\n+        }\n+      } finally {\n+        inputStream.close();\n+      }\n+    } else {\n+      // Throw a Bad Gateway Error\n+      httpServletResponse.sendError(HttpServletResponse.SC_BAD_GATEWAY,\n+          \"Metrics endpoint is not configured. Configure \" +\n+              PrometheusServiceProviderImpl.getEndpointConfigKey() + \" and \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19e35f6b3a39d67ab4c40c301348a44f9b10670c"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc1MjM2OA==", "bodyText": "We should do values.addAll() or Collections. unmodifiableMap() here, since the caller may mutate the passed in reference.", "url": "https://github.com/apache/ozone/pull/1390#discussion_r483752368", "createdAt": "2020-09-04T17:09:46Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/metrics/Metric.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.recon.metrics;\n+\n+import org.apache.hadoop.hdds.annotation.InterfaceAudience;\n+\n+import java.util.Map;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+/**\n+ * Class for wrapping a metric response from\n+ * {@link org.apache.hadoop.ozone.recon.spi.MetricsServiceProvider}.\n+ */\n+@InterfaceAudience.Private\n+public final class Metric {\n+\n+  private Map<String, String> metadata;\n+  private TreeMap<Double, Double> values;\n+\n+  public Metric(Map<String, String> metadata,\n+                SortedMap<Double, Double> values) {\n+    this.metadata = metadata;\n+    this.values = (TreeMap<Double, Double>) values;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19e35f6b3a39d67ab4c40c301348a44f9b10670c"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc1Mzg1OA==", "bodyText": "Nit. Can be final fields.", "url": "https://github.com/apache/ozone/pull/1390#discussion_r483753858", "createdAt": "2020-09-04T17:13:14Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/metrics/Metric.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.recon.metrics;\n+\n+import org.apache.hadoop.hdds.annotation.InterfaceAudience;\n+\n+import java.util.Map;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+/**\n+ * Class for wrapping a metric response from\n+ * {@link org.apache.hadoop.ozone.recon.spi.MetricsServiceProvider}.\n+ */\n+@InterfaceAudience.Private\n+public final class Metric {\n+\n+  private Map<String, String> metadata;\n+  private TreeMap<Double, Double> values;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19e35f6b3a39d67ab4c40c301348a44f9b10670c"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc1NDA1MA==", "bodyText": "Nit. Do we need setters in a Metric class?", "url": "https://github.com/apache/ozone/pull/1390#discussion_r483754050", "createdAt": "2020-09-04T17:13:40Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/metrics/Metric.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.recon.metrics;\n+\n+import org.apache.hadoop.hdds.annotation.InterfaceAudience;\n+\n+import java.util.Map;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+/**\n+ * Class for wrapping a metric response from\n+ * {@link org.apache.hadoop.ozone.recon.spi.MetricsServiceProvider}.\n+ */\n+@InterfaceAudience.Private\n+public final class Metric {\n+\n+  private Map<String, String> metadata;\n+  private TreeMap<Double, Double> values;\n+\n+  public Metric(Map<String, String> metadata,\n+                SortedMap<Double, Double> values) {\n+    this.metadata = metadata;\n+    this.values = (TreeMap<Double, Double>) values;\n+  }\n+\n+  public Map<String, String> getMetadata() {\n+    return metadata;\n+  }\n+\n+  public void setMetadata(Map<String, String> metadata) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19e35f6b3a39d67ab4c40c301348a44f9b10670c"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd1a5a978cb2270e1da2e6ec8feb577c713b27e2", "author": {"user": {"login": "vivekratnavel", "name": "Vivek Ratnavel Subramanian"}}, "url": "https://github.com/apache/ozone/commit/cd1a5a978cb2270e1da2e6ec8feb577c713b27e2", "committedDate": "2020-09-04T21:29:44Z", "message": "Address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d87ba9cdf02b9be9944b38f21c171e7830640d3d", "author": {"user": {"login": "vivekratnavel", "name": "Vivek Ratnavel Subramanian"}}, "url": "https://github.com/apache/ozone/commit/d87ba9cdf02b9be9944b38f21c171e7830640d3d", "committedDate": "2020-09-04T21:36:48Z", "message": "Fix error message in PipelineEndpoint."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0Mzk4NTUw", "url": "https://github.com/apache/ozone/pull/1390#pullrequestreview-484398550", "createdAt": "2020-09-08T18:37:27Z", "commit": {"oid": "d87ba9cdf02b9be9944b38f21c171e7830640d3d"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODozNzoyN1rOHOpaCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODozNzoyN1rOHOpaCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyMDUyMw==", "bodyText": "@vivekratnavel Makes sense, thanks!", "url": "https://github.com/apache/ozone/pull/1390#discussion_r485120523", "createdAt": "2020-09-08T18:37:27Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/api/MetricsProxyEndpoint.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.recon.api;\n+\n+import org.apache.hadoop.ozone.recon.MetricsServiceProviderFactory;\n+import org.apache.hadoop.ozone.recon.spi.MetricsServiceProvider;\n+import org.apache.hadoop.ozone.recon.spi.impl.PrometheusServiceProviderImpl;\n+\n+import javax.inject.Inject;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.UriInfo;\n+\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.channels.WritableByteChannel;\n+\n+import static org.apache.hadoop.ozone.recon.ReconConstants.PROMETHEUS_INSTANT_QUERY_API;\n+\n+/**\n+ * Endpoint to fetch metrics data from Prometheus HTTP endpoint.\n+ */\n+@Path(\"/metrics\")\n+public class MetricsProxyEndpoint {\n+\n+  private MetricsServiceProvider metricsServiceProvider;\n+\n+  @Inject\n+  public MetricsProxyEndpoint(\n+      MetricsServiceProviderFactory metricsServiceProviderFactory) {\n+    this.metricsServiceProvider =\n+        metricsServiceProviderFactory.getMetricsServiceProvider();\n+  }\n+\n+  /**\n+   * Return a response from the configured metrics endpoint.\n+   */\n+  @GET\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @Path(\"/{api}\")\n+  public void getMetricsResponse(\n+      @DefaultValue (PROMETHEUS_INSTANT_QUERY_API) @PathParam(\"api\") String api,\n+      @Context UriInfo uriInfo,\n+      @Context HttpServletResponse httpServletResponse\n+  ) throws Exception {\n+    if (metricsServiceProvider != null) {\n+      HttpURLConnection connection = metricsServiceProvider.getMetricsResponse(\n+          api, uriInfo.getRequestUri().getQuery());\n+      InputStream inputStream;\n+      if (Response.Status.fromStatusCode(connection.getResponseCode())\n+          .getFamily() == Response.Status.Family.SUCCESSFUL) {\n+        inputStream = connection.getInputStream();\n+      } else {\n+        // Throw a bad gateway error if HttpResponseCode is not 2xx\n+        httpServletResponse.setStatus(HttpServletResponse.SC_BAD_GATEWAY);\n+        inputStream = connection.getErrorStream();\n+      }\n+      try (\n+          OutputStream outputStream =\n+              httpServletResponse.getOutputStream();\n+          ReadableByteChannel inputChannel =\n+              Channels.newChannel(inputStream);\n+          WritableByteChannel outputChannel =\n+              Channels.newChannel(outputStream)\n+        ) {\n+        final ByteBuffer buffer = ByteBuffer.allocateDirect(16 * 1024);\n+\n+        while(inputChannel.read(buffer) != -1) {\n+          buffer.flip();\n+          outputChannel.write(buffer);\n+          buffer.compact();\n+        }\n+\n+        buffer.flip();\n+\n+        while(buffer.hasRemaining()) {\n+          outputChannel.write(buffer);\n+        }\n+      } finally {\n+        inputStream.close();\n+      }\n+    } else {\n+      // Throw a Bad Gateway Error\n+      httpServletResponse.sendError(HttpServletResponse.SC_BAD_GATEWAY,\n+          \"Metrics endpoint is not configured. Configure \" +\n+              PrometheusServiceProviderImpl.getEndpointConfigKey() + \" and \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc1MTg2Nw=="}, "originalCommit": {"oid": "19e35f6b3a39d67ab4c40c301348a44f9b10670c"}, "originalPosition": 113}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2449, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}