{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwMjc2MjQ2", "number": 1129, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMTo0NTo0N1rOEJ15iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMDozNjo1OVrOEO612A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NzU1NzIxOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMTo0NTo0N1rOGqjWUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMTo0NTo0N1rOGqjWUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI3MjUyOA==", "bodyText": "Let's log an error here.", "url": "https://github.com/apache/ozone/pull/1129#discussion_r447272528", "createdAt": "2020-06-29T21:45:47Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -2999,32 +3000,15 @@ public TermIndex installSnapshot(String leaderId) {\n     }\n \n     DBCheckpoint omDBcheckpoint = getDBCheckpointFromLeader(leaderId);\n-    Path newDBlocation = omDBcheckpoint.getCheckpointLocation();\n+    Path newDBLocation = omDBcheckpoint.getCheckpointLocation();\n \n     LOG.info(\"Downloaded checkpoint from Leader {}, in to the location {}\",\n-        leaderId, newDBlocation);\n+        leaderId, newDBLocation);\n \n-    // Check if current ratis log index is smaller than the downloaded\n-    // checkpoint transaction index. If yes, proceed by stopping the ratis\n-    // server so that the OM state can be re-initialized. If no, then do not\n-    // proceed with installSnapshot.\n+    OMTransactionInfo omTransactionInfo = getTransactionInfoFromDB(\n+        newDBLocation);\n \n-    OMTransactionInfo omTransactionInfo = null;\n-\n-    Path dbDir = newDBlocation.getParent();\n-    if (dbDir == null) {\n-      LOG.error(\"Incorrect DB location path {} received from checkpoint.\",\n-          newDBlocation);\n-      return null;\n-    }\n-\n-    try {\n-      omTransactionInfo =\n-          OzoneManagerRatisUtils.getTransactionInfoFromDownloadedSnapshot(\n-              configuration, dbDir);\n-    } catch (Exception ex) {\n-      LOG.error(\"Failed during opening downloaded snapshot from \" +\n-          \"{} to obtain transaction index\", newDBlocation, ex);\n+    if (omTransactionInfo == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4326767238fca5b3170adb81989f87327d127b0"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NzYwNjc2OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMjowMzoyNVrOGqjzqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMjowMzoyNVrOGqjzqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI4MDA0MA==", "bodyText": "Before calling reloadState check for existence of temp_marker file. Also on OM restart.", "url": "https://github.com/apache/ozone/pull/1129#discussion_r447280040", "createdAt": "2020-06-29T22:03:25Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -3040,45 +3024,61 @@ public TermIndex installSnapshot(String leaderId) {\n     } catch (Exception e) {\n       LOG.error(\"Failed to stop/ pause the services. Cannot proceed with \" +\n           \"installing the new checkpoint.\", e);\n+\n+      // During stopServices, if KeyManager was stopped successfully and\n+      // OMMetadataManager stop failed, we should restart the KeyManager.\n+      keyManager.start(configuration);\n+\n       return null;\n     }\n \n-    //TODO: un-pause SM if any failures and retry?\n+    File dbBackup;\n+    TermIndex termIndex = omRatisServer.getLastAppliedTermIndex();\n+    long currentTerm = termIndex.getTerm();\n+    long lastAppliedIndex = termIndex.getIndex();\n+    boolean loadSuccess = false;\n \n-    long lastAppliedIndex = omRatisServer.getLastAppliedTermIndex().getIndex();\n+    try {\n+      // Check if current applied log index is smaller than the downloaded\n+      // checkpoint transaction index. If yes, proceed by stopping the ratis\n+      // server so that the OM state can be re-initialized. If no then do not\n+      // proceed with installSnapshot.\n+      boolean canProceed = OzoneManagerRatisUtils.verifyTransactionInfo(\n+          omTransactionInfo, lastAppliedIndex, leaderId, newDBLocation);\n+      if (!canProceed) {\n+        return null;\n+      }\n \n-    boolean canProceed =\n-        OzoneManagerRatisUtils.verifyTransactionInfo(omTransactionInfo,\n-        lastAppliedIndex, leaderId, newDBlocation);\n+      try {\n+        dbBackup = replaceOMDBWithCheckpoint(lastAppliedIndex, oldDBLocation,\n+            newDBLocation);\n+      } catch (Exception e) {\n+        LOG.error(\"OM DB checkpoint replacement with new downloaded \" +\n+            \"checkpoint failed.\", e);\n+        return null;\n+      }\n \n-    // If downloaded DB has transaction info less than current one, return.\n-    if (!canProceed) {\n-      return null;\n+      loadSuccess = true;\n+    } finally {\n+      if (!loadSuccess) {\n+        omRatisServer.getOmStateMachine().unpause(lastAppliedIndex,\n+            currentTerm);\n+      }\n     }\n \n     long leaderIndex = omTransactionInfo.getTransactionIndex();\n     long leaderTerm = omTransactionInfo.getCurrentTerm();\n \n-\n-    File dbBackup;\n-    try {\n-      dbBackup = replaceOMDBWithCheckpoint(lastAppliedIndex, oldDBLocation,\n-          newDBlocation);\n-    } catch (Exception e) {\n-      LOG.error(\"OM DB checkpoint replacement with new downloaded checkpoint \" +\n-          \"failed.\", e);\n-      return null;\n-    }\n-\n     // Reload the OM DB store with the new checkpoint.\n     // Restart (unpause) the state machine and update its last applied index\n     // to the installed checkpoint's snapshot index.\n     try {\n       reloadOMState(leaderIndex, leaderTerm);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4326767238fca5b3170adb81989f87327d127b0"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NzYwOTgzOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMjowNDoyNVrOGqj1aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMjoxMzoxMFrOGqkF6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI4MDQ4OQ==", "bodyText": "replaceOMDBWithCheckpoint contract should be that it either leaves the current state or the old state. If it leaves inconsistent state then it should also leave some persistent marker on disk so OM doesn't try to restart with a bad checkpoint.", "url": "https://github.com/apache/ozone/pull/1129#discussion_r447280489", "createdAt": "2020-06-29T22:04:25Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -3040,45 +3024,61 @@ public TermIndex installSnapshot(String leaderId) {\n     } catch (Exception e) {\n       LOG.error(\"Failed to stop/ pause the services. Cannot proceed with \" +\n           \"installing the new checkpoint.\", e);\n+\n+      // During stopServices, if KeyManager was stopped successfully and\n+      // OMMetadataManager stop failed, we should restart the KeyManager.\n+      keyManager.start(configuration);\n+\n       return null;\n     }\n \n-    //TODO: un-pause SM if any failures and retry?\n+    File dbBackup;\n+    TermIndex termIndex = omRatisServer.getLastAppliedTermIndex();\n+    long currentTerm = termIndex.getTerm();\n+    long lastAppliedIndex = termIndex.getIndex();\n+    boolean loadSuccess = false;\n \n-    long lastAppliedIndex = omRatisServer.getLastAppliedTermIndex().getIndex();\n+    try {\n+      // Check if current applied log index is smaller than the downloaded\n+      // checkpoint transaction index. If yes, proceed by stopping the ratis\n+      // server so that the OM state can be re-initialized. If no then do not\n+      // proceed with installSnapshot.\n+      boolean canProceed = OzoneManagerRatisUtils.verifyTransactionInfo(\n+          omTransactionInfo, lastAppliedIndex, leaderId, newDBLocation);\n+      if (!canProceed) {\n+        return null;\n+      }\n \n-    boolean canProceed =\n-        OzoneManagerRatisUtils.verifyTransactionInfo(omTransactionInfo,\n-        lastAppliedIndex, leaderId, newDBlocation);\n+      try {\n+        dbBackup = replaceOMDBWithCheckpoint(lastAppliedIndex, oldDBLocation,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4326767238fca5b3170adb81989f87327d127b0"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI4NDcxMg==", "bodyText": "Also the marker file should be created before starting the move operations, and deleted on success.", "url": "https://github.com/apache/ozone/pull/1129#discussion_r447284712", "createdAt": "2020-06-29T22:13:10Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -3040,45 +3024,61 @@ public TermIndex installSnapshot(String leaderId) {\n     } catch (Exception e) {\n       LOG.error(\"Failed to stop/ pause the services. Cannot proceed with \" +\n           \"installing the new checkpoint.\", e);\n+\n+      // During stopServices, if KeyManager was stopped successfully and\n+      // OMMetadataManager stop failed, we should restart the KeyManager.\n+      keyManager.start(configuration);\n+\n       return null;\n     }\n \n-    //TODO: un-pause SM if any failures and retry?\n+    File dbBackup;\n+    TermIndex termIndex = omRatisServer.getLastAppliedTermIndex();\n+    long currentTerm = termIndex.getTerm();\n+    long lastAppliedIndex = termIndex.getIndex();\n+    boolean loadSuccess = false;\n \n-    long lastAppliedIndex = omRatisServer.getLastAppliedTermIndex().getIndex();\n+    try {\n+      // Check if current applied log index is smaller than the downloaded\n+      // checkpoint transaction index. If yes, proceed by stopping the ratis\n+      // server so that the OM state can be re-initialized. If no then do not\n+      // proceed with installSnapshot.\n+      boolean canProceed = OzoneManagerRatisUtils.verifyTransactionInfo(\n+          omTransactionInfo, lastAppliedIndex, leaderId, newDBLocation);\n+      if (!canProceed) {\n+        return null;\n+      }\n \n-    boolean canProceed =\n-        OzoneManagerRatisUtils.verifyTransactionInfo(omTransactionInfo,\n-        lastAppliedIndex, leaderId, newDBlocation);\n+      try {\n+        dbBackup = replaceOMDBWithCheckpoint(lastAppliedIndex, oldDBLocation,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI4MDQ4OQ=="}, "originalCommit": {"oid": "f4326767238fca5b3170adb81989f87327d127b0"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NzYxMTI5OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMjowNDo1MVrOGqj2MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMjowNDo1MVrOGqj2MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI4MDY4OQ==", "bodyText": "Remove this unpause, we already do a reload and unpause below.", "url": "https://github.com/apache/ozone/pull/1129#discussion_r447280689", "createdAt": "2020-06-29T22:04:51Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -3040,45 +3024,61 @@ public TermIndex installSnapshot(String leaderId) {\n     } catch (Exception e) {\n       LOG.error(\"Failed to stop/ pause the services. Cannot proceed with \" +\n           \"installing the new checkpoint.\", e);\n+\n+      // During stopServices, if KeyManager was stopped successfully and\n+      // OMMetadataManager stop failed, we should restart the KeyManager.\n+      keyManager.start(configuration);\n+\n       return null;\n     }\n \n-    //TODO: un-pause SM if any failures and retry?\n+    File dbBackup;\n+    TermIndex termIndex = omRatisServer.getLastAppliedTermIndex();\n+    long currentTerm = termIndex.getTerm();\n+    long lastAppliedIndex = termIndex.getIndex();\n+    boolean loadSuccess = false;\n \n-    long lastAppliedIndex = omRatisServer.getLastAppliedTermIndex().getIndex();\n+    try {\n+      // Check if current applied log index is smaller than the downloaded\n+      // checkpoint transaction index. If yes, proceed by stopping the ratis\n+      // server so that the OM state can be re-initialized. If no then do not\n+      // proceed with installSnapshot.\n+      boolean canProceed = OzoneManagerRatisUtils.verifyTransactionInfo(\n+          omTransactionInfo, lastAppliedIndex, leaderId, newDBLocation);\n+      if (!canProceed) {\n+        return null;\n+      }\n \n-    boolean canProceed =\n-        OzoneManagerRatisUtils.verifyTransactionInfo(omTransactionInfo,\n-        lastAppliedIndex, leaderId, newDBlocation);\n+      try {\n+        dbBackup = replaceOMDBWithCheckpoint(lastAppliedIndex, oldDBLocation,\n+            newDBLocation);\n+      } catch (Exception e) {\n+        LOG.error(\"OM DB checkpoint replacement with new downloaded \" +\n+            \"checkpoint failed.\", e);\n+        return null;\n+      }\n \n-    // If downloaded DB has transaction info less than current one, return.\n-    if (!canProceed) {\n-      return null;\n+      loadSuccess = true;\n+    } finally {\n+      if (!loadSuccess) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4326767238fca5b3170adb81989f87327d127b0"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NzYxNjQ5OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMjowNjoxOVrOGqj5Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMjowNjoxOVrOGqj5Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI4MTQyMg==", "bodyText": "Move these inside the try block, just after you invoke replaceOMDBWithCheckpoint. Else these variables should be left to values that reflect the old checkpoint.", "url": "https://github.com/apache/ozone/pull/1129#discussion_r447281422", "createdAt": "2020-06-29T22:06:19Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -3040,45 +3024,61 @@ public TermIndex installSnapshot(String leaderId) {\n     } catch (Exception e) {\n       LOG.error(\"Failed to stop/ pause the services. Cannot proceed with \" +\n           \"installing the new checkpoint.\", e);\n+\n+      // During stopServices, if KeyManager was stopped successfully and\n+      // OMMetadataManager stop failed, we should restart the KeyManager.\n+      keyManager.start(configuration);\n+\n       return null;\n     }\n \n-    //TODO: un-pause SM if any failures and retry?\n+    File dbBackup;\n+    TermIndex termIndex = omRatisServer.getLastAppliedTermIndex();\n+    long currentTerm = termIndex.getTerm();\n+    long lastAppliedIndex = termIndex.getIndex();\n+    boolean loadSuccess = false;\n \n-    long lastAppliedIndex = omRatisServer.getLastAppliedTermIndex().getIndex();\n+    try {\n+      // Check if current applied log index is smaller than the downloaded\n+      // checkpoint transaction index. If yes, proceed by stopping the ratis\n+      // server so that the OM state can be re-initialized. If no then do not\n+      // proceed with installSnapshot.\n+      boolean canProceed = OzoneManagerRatisUtils.verifyTransactionInfo(\n+          omTransactionInfo, lastAppliedIndex, leaderId, newDBLocation);\n+      if (!canProceed) {\n+        return null;\n+      }\n \n-    boolean canProceed =\n-        OzoneManagerRatisUtils.verifyTransactionInfo(omTransactionInfo,\n-        lastAppliedIndex, leaderId, newDBlocation);\n+      try {\n+        dbBackup = replaceOMDBWithCheckpoint(lastAppliedIndex, oldDBLocation,\n+            newDBLocation);\n+      } catch (Exception e) {\n+        LOG.error(\"OM DB checkpoint replacement with new downloaded \" +\n+            \"checkpoint failed.\", e);\n+        return null;\n+      }\n \n-    // If downloaded DB has transaction info less than current one, return.\n-    if (!canProceed) {\n-      return null;\n+      loadSuccess = true;\n+    } finally {\n+      if (!loadSuccess) {\n+        omRatisServer.getOmStateMachine().unpause(lastAppliedIndex,\n+            currentTerm);\n+      }\n     }\n \n     long leaderIndex = omTransactionInfo.getTransactionIndex();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4326767238fca5b3170adb81989f87327d127b0"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NzYxNzQxOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMjowNjozNlrOGqj5kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMjowNjozNlrOGqj5kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI4MTU1Mw==", "bodyText": "Don't need loadSuccess any more.", "url": "https://github.com/apache/ozone/pull/1129#discussion_r447281553", "createdAt": "2020-06-29T22:06:36Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -3040,45 +3024,61 @@ public TermIndex installSnapshot(String leaderId) {\n     } catch (Exception e) {\n       LOG.error(\"Failed to stop/ pause the services. Cannot proceed with \" +\n           \"installing the new checkpoint.\", e);\n+\n+      // During stopServices, if KeyManager was stopped successfully and\n+      // OMMetadataManager stop failed, we should restart the KeyManager.\n+      keyManager.start(configuration);\n+\n       return null;\n     }\n \n-    //TODO: un-pause SM if any failures and retry?\n+    File dbBackup;\n+    TermIndex termIndex = omRatisServer.getLastAppliedTermIndex();\n+    long currentTerm = termIndex.getTerm();\n+    long lastAppliedIndex = termIndex.getIndex();\n+    boolean loadSuccess = false;\n \n-    long lastAppliedIndex = omRatisServer.getLastAppliedTermIndex().getIndex();\n+    try {\n+      // Check if current applied log index is smaller than the downloaded\n+      // checkpoint transaction index. If yes, proceed by stopping the ratis\n+      // server so that the OM state can be re-initialized. If no then do not\n+      // proceed with installSnapshot.\n+      boolean canProceed = OzoneManagerRatisUtils.verifyTransactionInfo(\n+          omTransactionInfo, lastAppliedIndex, leaderId, newDBLocation);\n+      if (!canProceed) {\n+        return null;\n+      }\n \n-    boolean canProceed =\n-        OzoneManagerRatisUtils.verifyTransactionInfo(omTransactionInfo,\n-        lastAppliedIndex, leaderId, newDBlocation);\n+      try {\n+        dbBackup = replaceOMDBWithCheckpoint(lastAppliedIndex, oldDBLocation,\n+            newDBLocation);\n+      } catch (Exception e) {\n+        LOG.error(\"OM DB checkpoint replacement with new downloaded \" +\n+            \"checkpoint failed.\", e);\n+        return null;\n+      }\n \n-    // If downloaded DB has transaction info less than current one, return.\n-    if (!canProceed) {\n-      return null;\n+      loadSuccess = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4326767238fca5b3170adb81989f87327d127b0"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTQ0MjA2OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQwMToyNzoxMlrOGwJXWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQwMToyNzoxMlrOGwJXWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEzODI2Ng==", "bodyText": "Can you add a @VisibleForTesting annotation here?", "url": "https://github.com/apache/ozone/pull/1129#discussion_r453138266", "createdAt": "2020-07-11T01:27:12Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -3314,4 +3352,8 @@ private void startJVMPauseMonitor() {\n     jvmPauseMonitor.init(configuration);\n     jvmPauseMonitor.start();\n   }\n+\n+  void setExitManagerForTesting(ExitManager exitManagerForTesting) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a026c6b7049405755da0c40c75a579145ae1bc44"}, "originalPosition": 280}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTQ0NTEzOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OmMetadataManagerImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQwMTozMDo0N1rOGwJY3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQwMTozMDo0N1rOGwJY3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEzODY1NQ==", "bodyText": "Should we use ExitManager here?", "url": "https://github.com/apache/ozone/pull/1129#discussion_r453138655", "createdAt": "2020-07-11T01:30:47Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OmMetadataManagerImpl.java", "diffHunk": "@@ -249,6 +252,20 @@ public void start(OzoneConfiguration configuration) throws IOException {\n     if (store == null) {\n       File metaDir = OMStorage.getOmDbDir(configuration);\n \n+      // Check if there is a DB Inconsistent Marker in the metaDir. This\n+      // marker indicates that the DB is in an inconsistent state and hence\n+      // the OM process should be terminated.\n+      File markerFile = new File(metaDir, DB_TRANSIENT_MARKER);\n+      if (Files.exists(markerFile.toPath())) {\n+        LOG.error(\"File {} marks that OM DB is in an inconsistent state.\");\n+        // Note - The marker file should be deleted only after fixing the DB.\n+        // In an HA setup, this can be done by replacing this DB with a\n+        // checkpoint from another OM.\n+        String errorMsg = \"Cannot load OM DB as it is in an inconsistent \" +\n+            \"state.\";\n+        ExitUtils.terminate(1, errorMsg, LOG);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a026c6b7049405755da0c40c75a579145ae1bc44"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MDczMjc4OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OmMetadataManagerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMDowNDo0MlrOGyVdbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMDowNDo0MlrOGyVdbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQzMzU4Mg==", "bodyText": "Nitpick: why not just markerFile.exists()?", "url": "https://github.com/apache/ozone/pull/1129#discussion_r455433582", "createdAt": "2020-07-16T00:04:42Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OmMetadataManagerImpl.java", "diffHunk": "@@ -249,6 +252,20 @@ public void start(OzoneConfiguration configuration) throws IOException {\n     if (store == null) {\n       File metaDir = OMStorage.getOmDbDir(configuration);\n \n+      // Check if there is a DB Inconsistent Marker in the metaDir. This\n+      // marker indicates that the DB is in an inconsistent state and hence\n+      // the OM process should be terminated.\n+      File markerFile = new File(metaDir, DB_TRANSIENT_MARKER);\n+      if (Files.exists(markerFile.toPath())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a026c6b7049405755da0c40c75a579145ae1bc44"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MDc0MDI5OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/utils/OzoneManagerRatisUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMDowODozMFrOGyVhtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMDowODozMFrOGyVhtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQzNDY3Ng==", "bodyText": "Print the dbPath in the exception message to make debugging easier in case this happens.", "url": "https://github.com/apache/ozone/pull/1129#discussion_r455434676", "createdAt": "2020-07-16T00:08:30Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/utils/OzoneManagerRatisUtils.java", "diffHunk": "@@ -228,15 +228,34 @@ public static Status exceptionToResponseStatus(IOException exception) {\n   }\n \n   /**\n-   * Obtain Transaction info from downloaded snapshot DB.\n+   * Obtain OMTransactionInfo from Checkpoint.\n+   */\n+  public static OMTransactionInfo getTrxnInfoFromCheckpoint(\n+      OzoneConfiguration conf, Path dbPath) throws Exception {\n+    Path dbDir = dbPath.getParent();\n+    String dbName = dbPath.getFileName().toString();\n+    if (dbDir == null) {\n+      throw new IOException(\"Checkpoint {} does not have proper DB location\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a026c6b7049405755da0c40c75a579145ae1bc44"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MDc1MzU4OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/snapshot/OzoneManagerSnapshotProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMDoxNDo1OFrOGyVpZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMDoxNDo1OFrOGyVpZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQzNjY0NA==", "bodyText": "Did we change the snapshot file name convention in this jira?", "url": "https://github.com/apache/ozone/pull/1129#discussion_r455436644", "createdAt": "2020-07-16T00:14:58Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/snapshot/OzoneManagerSnapshotProvider.java", "diffHunk": "@@ -113,8 +113,10 @@ public OzoneManagerSnapshotProvider(MutableConfigurationSource conf,\n   public DBCheckpoint getOzoneManagerDBSnapshot(String leaderOMNodeID)\n       throws IOException {\n     String snapshotTime = Long.toString(System.currentTimeMillis());\n-    String snapshotFileName = Paths.get(omSnapshotDir.getAbsolutePath(),\n-        snapshotTime, OM_DB_NAME).toFile().getAbsolutePath();\n+    String snapshotFileName = OM_DB_NAME + \"-\" + leaderOMNodeID", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a026c6b7049405755da0c40c75a579145ae1bc44"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MDc5NTc2OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMDozNjo1OVrOGyWBnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNzoyNDo1MlrOGy0_Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ0Mjg0Nw==", "bodyText": "On successful restart we should clear any old backups.", "url": "https://github.com/apache/ozone/pull/1129#discussion_r455442847", "createdAt": "2020-07-16T00:36:59Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -3041,58 +3047,74 @@ public TermIndex installSnapshot(String leaderId) {\n       omRatisServer.getOmStateMachine().pause();\n     } catch (Exception e) {\n       LOG.error(\"Failed to stop/ pause the services. Cannot proceed with \" +\n-          \"installing the new checkpoint.\", e);\n-      return null;\n-    }\n-\n-    //TODO: un-pause SM if any failures and retry?\n-\n-    long lastAppliedIndex = omRatisServer.getLastAppliedTermIndex().getIndex();\n-\n-    boolean canProceed =\n-        OzoneManagerRatisUtils.verifyTransactionInfo(omTransactionInfo,\n-        lastAppliedIndex, leaderId, newDBlocation);\n-\n-    // If downloaded DB has transaction info less than current one, return.\n-    if (!canProceed) {\n-      return null;\n+          \"installing the new checkpoint.\");\n+      // During stopServices, if KeyManager was stopped successfully and\n+      // OMMetadataManager stop failed, we should restart the KeyManager.\n+      keyManager.start(configuration);\n+      throw e;\n     }\n \n-    long leaderIndex = omTransactionInfo.getTransactionIndex();\n-    long leaderTerm = omTransactionInfo.getCurrentTerm();\n+    File dbBackup = null;\n+    TermIndex termIndex = omRatisServer.getLastAppliedTermIndex();\n+    long term = termIndex.getTerm();\n+    long lastAppliedIndex = termIndex.getIndex();\n \n+    // Check if current applied log index is smaller than the downloaded\n+    // checkpoint transaction index. If yes, proceed by stopping the ratis\n+    // server so that the OM state can be re-initialized. If no then do not\n+    // proceed with installSnapshot.\n+    boolean canProceed = OzoneManagerRatisUtils.verifyTransactionInfo(\n+        checkpointTrxnInfo, lastAppliedIndex, leaderId, checkpointLocation);\n \n-    File dbBackup;\n-    try {\n-      dbBackup = replaceOMDBWithCheckpoint(lastAppliedIndex, oldDBLocation,\n-          newDBlocation);\n-    } catch (Exception e) {\n-      LOG.error(\"OM DB checkpoint replacement with new downloaded checkpoint \" +\n-          \"failed.\", e);\n-      return null;\n+    if (canProceed) {\n+      try {\n+        dbBackup = replaceOMDBWithCheckpoint(lastAppliedIndex, oldDBLocation,\n+            checkpointLocation);\n+        term = checkpointTrxnInfo.getTerm();\n+        lastAppliedIndex = checkpointTrxnInfo.getTransactionIndex();\n+        LOG.info(\"Replaced DB with checkpoint from OM: {}, term: {}, index: {}\",\n+            leaderId, term, lastAppliedIndex);\n+      } catch (Exception e) {\n+        LOG.error(\"Failed to install Snapshot from {} as OM failed to replace\" +\n+            \" DB with downloaded checkpoint. Reloading old OM state.\", e);\n+      }\n+    } else {\n+      LOG.warn(\"Cannot proceed with InstallSnapshot as OM is at TermIndex {} \" +\n+          \"and checkpoint has lower TermIndex {}. Reloading old state of OM.\",\n+          termIndex, checkpointTrxnInfo.getTermIndex());\n     }\n \n     // Reload the OM DB store with the new checkpoint.\n     // Restart (unpause) the state machine and update its last applied index\n     // to the installed checkpoint's snapshot index.\n     try {\n-      reloadOMState(leaderIndex, leaderTerm);\n-      omRatisServer.getOmStateMachine().unpause(leaderIndex, leaderTerm);\n-    } catch (IOException e) {\n-      LOG.error(\"Failed to reload OM state with new DB checkpoint.\", e);\n-      return null;\n+      reloadOMState(lastAppliedIndex, term);\n+      omRatisServer.getOmStateMachine().unpause(lastAppliedIndex, term);\n+      LOG.info(\"Reloaded OM state with Term: {} and Index: {}\", term,\n+          lastAppliedIndex);\n+    } catch (IOException ex) {\n+      String errorMsg = \"Failed to reload OM state and instantiate services.\";\n+      exitManager.exitSystem(1, errorMsg, ex, LOG);\n     }\n \n     // Delete the backup DB\n     try {\n-      FileUtils.deleteFully(dbBackup);\n+      if (dbBackup != null) {\n+        FileUtils.deleteFully(dbBackup);\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a026c6b7049405755da0c40c75a579145ae1bc44"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk1MDA5NQ==", "bodyText": "Let's do this in a followup jira. Ok to commit this one.", "url": "https://github.com/apache/ozone/pull/1129#discussion_r455950095", "createdAt": "2020-07-16T17:24:52Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -3041,58 +3047,74 @@ public TermIndex installSnapshot(String leaderId) {\n       omRatisServer.getOmStateMachine().pause();\n     } catch (Exception e) {\n       LOG.error(\"Failed to stop/ pause the services. Cannot proceed with \" +\n-          \"installing the new checkpoint.\", e);\n-      return null;\n-    }\n-\n-    //TODO: un-pause SM if any failures and retry?\n-\n-    long lastAppliedIndex = omRatisServer.getLastAppliedTermIndex().getIndex();\n-\n-    boolean canProceed =\n-        OzoneManagerRatisUtils.verifyTransactionInfo(omTransactionInfo,\n-        lastAppliedIndex, leaderId, newDBlocation);\n-\n-    // If downloaded DB has transaction info less than current one, return.\n-    if (!canProceed) {\n-      return null;\n+          \"installing the new checkpoint.\");\n+      // During stopServices, if KeyManager was stopped successfully and\n+      // OMMetadataManager stop failed, we should restart the KeyManager.\n+      keyManager.start(configuration);\n+      throw e;\n     }\n \n-    long leaderIndex = omTransactionInfo.getTransactionIndex();\n-    long leaderTerm = omTransactionInfo.getCurrentTerm();\n+    File dbBackup = null;\n+    TermIndex termIndex = omRatisServer.getLastAppliedTermIndex();\n+    long term = termIndex.getTerm();\n+    long lastAppliedIndex = termIndex.getIndex();\n \n+    // Check if current applied log index is smaller than the downloaded\n+    // checkpoint transaction index. If yes, proceed by stopping the ratis\n+    // server so that the OM state can be re-initialized. If no then do not\n+    // proceed with installSnapshot.\n+    boolean canProceed = OzoneManagerRatisUtils.verifyTransactionInfo(\n+        checkpointTrxnInfo, lastAppliedIndex, leaderId, checkpointLocation);\n \n-    File dbBackup;\n-    try {\n-      dbBackup = replaceOMDBWithCheckpoint(lastAppliedIndex, oldDBLocation,\n-          newDBlocation);\n-    } catch (Exception e) {\n-      LOG.error(\"OM DB checkpoint replacement with new downloaded checkpoint \" +\n-          \"failed.\", e);\n-      return null;\n+    if (canProceed) {\n+      try {\n+        dbBackup = replaceOMDBWithCheckpoint(lastAppliedIndex, oldDBLocation,\n+            checkpointLocation);\n+        term = checkpointTrxnInfo.getTerm();\n+        lastAppliedIndex = checkpointTrxnInfo.getTransactionIndex();\n+        LOG.info(\"Replaced DB with checkpoint from OM: {}, term: {}, index: {}\",\n+            leaderId, term, lastAppliedIndex);\n+      } catch (Exception e) {\n+        LOG.error(\"Failed to install Snapshot from {} as OM failed to replace\" +\n+            \" DB with downloaded checkpoint. Reloading old OM state.\", e);\n+      }\n+    } else {\n+      LOG.warn(\"Cannot proceed with InstallSnapshot as OM is at TermIndex {} \" +\n+          \"and checkpoint has lower TermIndex {}. Reloading old state of OM.\",\n+          termIndex, checkpointTrxnInfo.getTermIndex());\n     }\n \n     // Reload the OM DB store with the new checkpoint.\n     // Restart (unpause) the state machine and update its last applied index\n     // to the installed checkpoint's snapshot index.\n     try {\n-      reloadOMState(leaderIndex, leaderTerm);\n-      omRatisServer.getOmStateMachine().unpause(leaderIndex, leaderTerm);\n-    } catch (IOException e) {\n-      LOG.error(\"Failed to reload OM state with new DB checkpoint.\", e);\n-      return null;\n+      reloadOMState(lastAppliedIndex, term);\n+      omRatisServer.getOmStateMachine().unpause(lastAppliedIndex, term);\n+      LOG.info(\"Reloaded OM state with Term: {} and Index: {}\", term,\n+          lastAppliedIndex);\n+    } catch (IOException ex) {\n+      String errorMsg = \"Failed to reload OM state and instantiate services.\";\n+      exitManager.exitSystem(1, errorMsg, ex, LOG);\n     }\n \n     // Delete the backup DB\n     try {\n-      FileUtils.deleteFully(dbBackup);\n+      if (dbBackup != null) {\n+        FileUtils.deleteFully(dbBackup);\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ0Mjg0Nw=="}, "originalCommit": {"oid": "a026c6b7049405755da0c40c75a579145ae1bc44"}, "originalPosition": 206}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4121, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}