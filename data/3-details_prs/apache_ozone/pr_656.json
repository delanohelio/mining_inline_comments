{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2MDg1MDgx", "number": 656, "title": "HDDS-3142. Create isolated enviornment for OM to test it without SCM.", "bodyText": "What changes were proposed in this pull request?\nOmKeyGenerator class from Freon can generate keys (open key + commit key). But this test tests both OM and SCM performance. It seems to be useful to have a method to test only the OM performance with faking the response from SCM.\nCan be done easily with the same approach what we have in HDDS-3023: A simple utility class can be implemented and with byteman we can replace the client calls with the fake method.\nWhat is the link to the Apache JIRA\nhttps://issues.apache.org/jira/browse/HDDS-3142\nHow was this patch tested?\n\nDownload byteman\nStart a pure OM (ozone om --init + ozone om) with the following JVM parameters: (change the path)\n\n-javaagent:/home/elek/prog/byteman/lib/byteman.jar=script:/home/elek/projects/ozone/dev-support/byteman/mock-scm.btm,boot:/home/elek/prog/byteman/lib/byteman.jar\n-Dorg.jboss.byteman.transform.all\n\n\nStart a simple freon test: ozone freon omkg\n\nExpected result: It should be possible to init and start OM without SCM and test it with the key generator)", "createdAt": "2020-03-10T11:43:02Z", "url": "https://github.com/apache/ozone/pull/656", "merged": true, "mergeCommit": {"oid": "281faf3a2ee4cd624ece0ed05165c164d5b4774f"}, "closed": true, "closedAt": "2020-03-19T07:30:16Z", "author": {"login": "elek"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcL9XCIgH2gAyMzg2MDg1MDgxOjk3N2Y3NDBiMGZjMWY4NjExODZhYmRkZGU1YjJmYjBjNzM1ZDlkZDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcO6LFCgH2gAyMzg2MDg1MDgxOjE2M2Y0MDBiZWZmNTJkYTkzOTllODM5Y2MyZWU0NWUyZDlhZWQwY2M=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "977f740b0fc1f861186abddde5b2fb0c735d9dd4", "author": {"user": {"login": "elek", "name": "Elek, M\u00e1rton"}}, "url": "https://github.com/apache/ozone/commit/977f740b0fc1f861186abddde5b2fb0c735d9dd4", "committedDate": "2020-03-09T12:48:37Z", "message": "HDDS-3142. Fake scm implementation for OM tests\n\ncleanup fake topology"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df300450f9b6786d7184b73bfbe717267cb24cac", "author": {"user": {"login": "elek", "name": "Elek, M\u00e1rton"}}, "url": "https://github.com/apache/ozone/commit/df300450f9b6786d7184b73bfbe717267cb24cac", "committedDate": "2020-03-10T17:24:11Z", "message": "Merge remote-tracking branch 'origin/master' into HDDS-3142"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38ea07cdd78fac2c50c840573a371c3118ea3ea5", "author": {"user": {"login": "elek", "name": "Elek, M\u00e1rton"}}, "url": "https://github.com/apache/ozone/commit/38ea07cdd78fac2c50c840573a371c3118ea3ea5", "committedDate": "2020-03-10T18:48:20Z", "message": "bumping rocksdb version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "266387121d1ec6b79ba60e612800d9167d64c8ce", "author": {"user": {"login": "elek", "name": "Elek, M\u00e1rton"}}, "url": "https://github.com/apache/ozone/commit/266387121d1ec6b79ba60e612800d9167d64c8ce", "committedDate": "2020-03-11T09:18:06Z", "message": "do not cache index and filter blocks"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyOTcxMzc3", "url": "https://github.com/apache/ozone/pull/656#pullrequestreview-372971377", "createdAt": "2020-03-11T17:24:26Z", "commit": {"oid": "977f740b0fc1f861186abddde5b2fb0c735d9dd4"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNzoyNDoyNlrOF1BKaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNzozNzoxOFrOF1Btsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEzNzg5Ng==", "bodyText": "Intended to be BLOCK_PER_CONTAINER?", "url": "https://github.com/apache/ozone/pull/656#discussion_r391137896", "createdAt": "2020-03-11T17:24:26Z", "author": {"login": "adoroszlai"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/freon/FakeScmBlockLocationProtocolClient.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hdds.freon;\n+\n+import java.io.IOException;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos.ContainerBlockID;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos.GetScmInfoResponseProto;\n+import org.apache.hadoop.hdds.protocol.proto.ScmBlockLocationProtocolProtos.AllocateBlockResponse;\n+import org.apache.hadoop.hdds.protocol.proto.ScmBlockLocationProtocolProtos.AllocateScmBlockResponseProto;\n+import org.apache.hadoop.hdds.protocol.proto.ScmBlockLocationProtocolProtos.AllocateScmBlockResponseProto.Builder;\n+import org.apache.hadoop.hdds.protocol.proto.ScmBlockLocationProtocolProtos.SCMBlockLocationRequest;\n+import org.apache.hadoop.hdds.protocol.proto.ScmBlockLocationProtocolProtos.SCMBlockLocationResponse;\n+import org.apache.hadoop.hdds.protocol.proto.ScmBlockLocationProtocolProtos.Status;\n+import org.apache.hadoop.hdds.protocol.proto.ScmBlockLocationProtocolProtos.Type;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Fake SCM client to return a simulated block location.\n+ */\n+public final class FakeScmBlockLocationProtocolClient {\n+\n+  private static final Logger LOGGER =\n+      LoggerFactory.getLogger(FakeScmBlockLocationProtocolClient.class);\n+\n+  public static final int BLOCK_PER_COUNTER = 1000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "977f740b0fc1f861186abddde5b2fb0c735d9dd4"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEzOTMzMg==", "bodyText": "Isn't node 1 added in the loop, too?", "url": "https://github.com/apache/ozone/pull/656#discussion_r391139332", "createdAt": "2020-03-11T17:26:35Z", "author": {"login": "adoroszlai"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/freon/FakeScmContainerLocationProtocolClient.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hdds.freon;\n+\n+import java.io.IOException;\n+\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos.DatanodeDetailsProto;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos.Node;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos.NodeState;\n+import org.apache.hadoop.hdds.protocol.proto.StorageContainerLocationProtocolProtos.NodeQueryResponseProto;\n+import org.apache.hadoop.hdds.protocol.proto.StorageContainerLocationProtocolProtos.NodeQueryResponseProto.Builder;\n+import org.apache.hadoop.hdds.protocol.proto.StorageContainerLocationProtocolProtos.ScmContainerLocationRequest;\n+import org.apache.hadoop.hdds.protocol.proto.StorageContainerLocationProtocolProtos.ScmContainerLocationResponse;\n+import org.apache.hadoop.hdds.protocol.proto.StorageContainerLocationProtocolProtos.ScmContainerLocationResponse.Status;\n+import org.apache.hadoop.hdds.protocol.proto.StorageContainerLocationProtocolProtos.Type;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Fake SCM client to return a simulated block location.\n+ */\n+public final class FakeScmContainerLocationProtocolClient {\n+\n+  private static final Logger LOGGER =\n+      LoggerFactory.getLogger(FakeScmContainerLocationProtocolClient.class);\n+\n+  private FakeScmContainerLocationProtocolClient() {\n+  }\n+\n+  public static ScmContainerLocationResponse submitRequest(\n+      ScmContainerLocationRequest req)\n+      throws IOException {\n+    try {\n+      if (req.getCmdType() == Type.QueryNode) {\n+        Builder builder = NodeQueryResponseProto.newBuilder()\n+            .addDatanodes(Node.newBuilder()\n+                .setNodeID(FakeClusterTopology.INSTANCE.getDatanode(1))\n+                .addNodeStates(NodeState.HEALTHY)\n+                .build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "977f740b0fc1f861186abddde5b2fb0c735d9dd4"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE0NjkzMA==", "bodyText": "typo: piplines -> pipelines", "url": "https://github.com/apache/ozone/pull/656#discussion_r391146930", "createdAt": "2020-03-11T17:37:18Z", "author": {"login": "adoroszlai"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/freon/FakeClusterTopology.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hdds.freon;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.UUID;\n+\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos.DatanodeDetailsProto;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos.Pipeline;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos.Port;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos.ReplicationFactor;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos.ReplicationType;\n+import org.apache.hadoop.hdds.scm.pipeline.PipelineID;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class to store pre-generated topology information for load-tests.\n+ */\n+public class FakeClusterTopology {\n+\n+  private static final Logger LOGGER =\n+      LoggerFactory.getLogger(FakeClusterTopology.class);\n+\n+  public static final FakeClusterTopology INSTANCE = new FakeClusterTopology();\n+\n+  private List<DatanodeDetailsProto> datanodes = new ArrayList<>();\n+\n+  private List<Pipeline> piplines = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "977f740b0fc1f861186abddde5b2fb0c735d9dd4"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "163f400beff52da9399e839cc2ee45e2d9aed0cc", "author": {"user": {"login": "elek", "name": "Elek, M\u00e1rton"}}, "url": "https://github.com/apache/ozone/commit/163f400beff52da9399e839cc2ee45e2d9aed0cc", "committedDate": "2020-03-18T16:47:37Z", "message": "address reviews / typo fixes"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3450, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}