{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyMTc0Nzc1", "number": 1445, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNzoyNzoyN1rOEm6PqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwNDoyMjo0N1rOFEVGHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MjM1NjI1OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmVolumeArgs.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNzoyNzoyN1rOHXNNFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxOTo1ODo0NlrOHXqilA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA5NTYzNg==", "bodyText": "How about we update the comment of this constructor by add @param usedNamespace - volume quota usage in counts\nThe description of the parameter is IMHO, feel free to correct it if you have an idea.", "url": "https://github.com/apache/ozone/pull/1445#discussion_r494095636", "createdAt": "2020-09-24T07:27:27Z", "author": {"login": "cxorm"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmVolumeArgs.java", "diffHunk": "@@ -68,15 +69,16 @@\n       \"builder.\"})\n   private OmVolumeArgs(String adminName, String ownerName, String volume,\n       long quotaInBytes, long quotaInCounts, Map<String, String> metadata,\n-      long usedBytes, OmOzoneAclMap aclMap, long creationTime,\n-      long modificationTime, long objectID, long updateID) {\n+      long usedBytes, long usedNamespace, OmOzoneAclMap aclMap,\n+      long creationTime, long modificationTime, long objectID, long updateID) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964463dfcb39a29e90639ae7300f992d7b2c6513"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU3NjI3Ng==", "bodyText": "I see. @param usedNamespace and updated both description of @param usedNamespace  and @param usedBytes", "url": "https://github.com/apache/ozone/pull/1445#discussion_r494576276", "createdAt": "2020-09-24T19:58:46Z", "author": {"login": "amaliujia"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmVolumeArgs.java", "diffHunk": "@@ -68,15 +69,16 @@\n       \"builder.\"})\n   private OmVolumeArgs(String adminName, String ownerName, String volume,\n       long quotaInBytes, long quotaInCounts, Map<String, String> metadata,\n-      long usedBytes, OmOzoneAclMap aclMap, long creationTime,\n-      long modificationTime, long objectID, long updateID) {\n+      long usedBytes, long usedNamespace, OmOzoneAclMap aclMap,\n+      long creationTime, long modificationTime, long objectID, long updateID) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA5NTYzNg=="}, "originalCommit": {"oid": "964463dfcb39a29e90639ae7300f992d7b2c6513"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MjM3OTc2OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketCreateRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNzozMzo0OFrOHXNbRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxOTo1ODoxNFrOHXqhaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA5OTI2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  omClientResponse = new OMBucketCreateResponse(omResponse.build(),\n          \n          \n            \n                      omBucketInfo);\n          \n          \n            \n                          omBucketInfo, omVolumeArgs);\n          \n          \n            \n                  omClientResponse = new OMBucketCreateResponse(omResponse.build(),\n          \n          \n            \n                      omBucketInfo, omVolumeArgs);\n          \n      \n    \n    \n  \n\nIt's my nit : could we use less indent here to keep consistent with this file", "url": "https://github.com/apache/ozone/pull/1445#discussion_r494099269", "createdAt": "2020-09-24T07:33:48Z", "author": {"login": "cxorm"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketCreateRequest.java", "diffHunk": "@@ -209,7 +211,7 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       omResponse.setCreateBucketResponse(\n           CreateBucketResponse.newBuilder().build());\n       omClientResponse = new OMBucketCreateResponse(omResponse.build(),\n-          omBucketInfo);\n+              omBucketInfo, omVolumeArgs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964463dfcb39a29e90639ae7300f992d7b2c6513"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU3NTk3OQ==", "bodyText": "+1", "url": "https://github.com/apache/ozone/pull/1445#discussion_r494575979", "createdAt": "2020-09-24T19:58:14Z", "author": {"login": "amaliujia"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketCreateRequest.java", "diffHunk": "@@ -209,7 +211,7 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       omResponse.setCreateBucketResponse(\n           CreateBucketResponse.newBuilder().build());\n       omClientResponse = new OMBucketCreateResponse(omResponse.build(),\n-          omBucketInfo);\n+              omBucketInfo, omVolumeArgs);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA5OTI2OQ=="}, "originalCommit": {"oid": "964463dfcb39a29e90639ae7300f992d7b2c6513"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5Mjc3MzIyOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/OzoneConsts.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwOToxMjowNlrOHXRMag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxOTo1ODowOFrOHXqhOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE2MTAwMg==", "bodyText": "Seems we don't use this variable,\nCould you be so kind as to let me know its usage if I miss something.", "url": "https://github.com/apache/ozone/pull/1445#discussion_r494161002", "createdAt": "2020-09-24T09:12:06Z", "author": {"login": "cxorm"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/OzoneConsts.java", "diffHunk": "@@ -270,6 +270,7 @@ private OzoneConsts() {\n   public static final String SRC_KEY = \"srcKey\";\n   public static final String DST_KEY = \"dstKey\";\n   public static final String USED_BYTES = \"usedBytes\";\n+  public static final String USED_NAMESPACE = \"usedNamespace\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964463dfcb39a29e90639ae7300f992d7b2c6513"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU3NTkzMA==", "bodyText": "Indeed it is not used. Removed this constant and we can add it in the future when there is a need.", "url": "https://github.com/apache/ozone/pull/1445#discussion_r494575930", "createdAt": "2020-09-24T19:58:08Z", "author": {"login": "amaliujia"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/OzoneConsts.java", "diffHunk": "@@ -270,6 +270,7 @@ private OzoneConsts() {\n   public static final String SRC_KEY = \"srcKey\";\n   public static final String DST_KEY = \"dstKey\";\n   public static final String USED_BYTES = \"usedBytes\";\n+  public static final String USED_NAMESPACE = \"usedNamespace\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE2MTAwMg=="}, "originalCommit": {"oid": "964463dfcb39a29e90639ae7300f992d7b2c6513"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5Mjc4MTExOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/bucket/OMBucketCreateResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwOToxNDoxNlrOHXRRbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxOTo1Nzo0MlrOHXqgbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE2MjI4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          omMetadataManager.getVolumeKey(omVolumeArgs.getVolume()),\n          \n          \n            \n                          omVolumeArgs);\n          \n          \n            \n                      omMetadataManager.getVolumeKey(omVolumeArgs.getVolume()),\n          \n          \n            \n                      omVolumeArgs);\n          \n      \n    \n    \n  \n\nJust nits.", "url": "https://github.com/apache/ozone/pull/1445#discussion_r494162287", "createdAt": "2020-09-24T09:14:16Z", "author": {"login": "cxorm"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/bucket/OMBucketCreateResponse.java", "diffHunk": "@@ -66,6 +77,12 @@ public void addToDBBatch(OMMetadataManager omMetadataManager,\n             omBucketInfo.getBucketName());\n     omMetadataManager.getBucketTable().putWithBatch(batchOperation,\n         dbBucketKey, omBucketInfo);\n+    // update volume usedNamespace\n+    if (omVolumeArgs != null) {\n+      omMetadataManager.getVolumeTable().putWithBatch(batchOperation,\n+              omMetadataManager.getVolumeKey(omVolumeArgs.getVolume()),\n+              omVolumeArgs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964463dfcb39a29e90639ae7300f992d7b2c6513"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU3NTcyNg==", "bodyText": "makes sense \ud83d\udc4d", "url": "https://github.com/apache/ozone/pull/1445#discussion_r494575726", "createdAt": "2020-09-24T19:57:42Z", "author": {"login": "amaliujia"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/bucket/OMBucketCreateResponse.java", "diffHunk": "@@ -66,6 +77,12 @@ public void addToDBBatch(OMMetadataManager omMetadataManager,\n             omBucketInfo.getBucketName());\n     omMetadataManager.getBucketTable().putWithBatch(batchOperation,\n         dbBucketKey, omBucketInfo);\n+    // update volume usedNamespace\n+    if (omVolumeArgs != null) {\n+      omMetadataManager.getVolumeTable().putWithBatch(batchOperation,\n+              omMetadataManager.getVolumeKey(omVolumeArgs.getVolume()),\n+              omVolumeArgs);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE2MjI4Nw=="}, "originalCommit": {"oid": "964463dfcb39a29e90639ae7300f992d7b2c6513"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MjgzNzUzOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketCreateRequest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwOToyOTowNFrOHXR04w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxOTo1NzozNVrOHXqgJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE3MTM2Mw==", "bodyText": "How about we update it this to add quota of used namespace or the same as update used namespace for volume in OMBucketDeleteRequest  ?", "url": "https://github.com/apache/ozone/pull/1445#discussion_r494171363", "createdAt": "2020-09-24T09:29:04Z", "author": {"login": "cxorm"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketCreateRequest.java", "diffHunk": "@@ -201,6 +201,8 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       // Add default acls from volume.\n       addDefaultAcls(omBucketInfo, omVolumeArgs);\n \n+      // quotaAdd used namespace", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964463dfcb39a29e90639ae7300f992d7b2c6513"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU3NTY1NA==", "bodyText": "used update used namespace for volume for both now.", "url": "https://github.com/apache/ozone/pull/1445#discussion_r494575654", "createdAt": "2020-09-24T19:57:35Z", "author": {"login": "amaliujia"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketCreateRequest.java", "diffHunk": "@@ -201,6 +201,8 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       // Add default acls from volume.\n       addDefaultAcls(omBucketInfo, omVolumeArgs);\n \n+      // quotaAdd used namespace", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE3MTM2Mw=="}, "originalCommit": {"oid": "964463dfcb39a29e90639ae7300f992d7b2c6513"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5Mjg1NTUyOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketDeleteRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwOTozMzo0NVrOHXSAFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwOTozMzo0NVrOHXSAFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE3NDIzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  // update used namespace for volumn\n          \n          \n            \n                  // update used namespace for volume", "url": "https://github.com/apache/ozone/pull/1445#discussion_r494174230", "createdAt": "2020-09-24T09:33:45Z", "author": {"login": "cxorm"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketDeleteRequest.java", "diffHunk": "@@ -134,6 +135,12 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       omResponse.setDeleteBucketResponse(\n           DeleteBucketResponse.newBuilder().build());\n \n+      // update used namespace for volumn", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964463dfcb39a29e90639ae7300f992d7b2c6513"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzYzMjMwOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/bucket/OMBucketDeleteResponse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzowMDozOVrOHXZfug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzowMDozOVrOHXZfug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI5NzAxOA==", "bodyText": "indent", "url": "https://github.com/apache/ozone/pull/1445#discussion_r494297018", "createdAt": "2020-09-24T13:00:39Z", "author": {"login": "captainzmc"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/bucket/OMBucketDeleteResponse.java", "diffHunk": "@@ -64,6 +76,12 @@ public void addToDBBatch(OMMetadataManager omMetadataManager,\n         omMetadataManager.getBucketKey(volumeName, bucketName);\n     omMetadataManager.getBucketTable().deleteWithBatch(batchOperation,\n         dbBucketKey);\n+    // update volume usedNamespace\n+    if (omVolumeArgs != null) {\n+      omMetadataManager.getVolumeTable().putWithBatch(batchOperation,\n+              omMetadataManager.getVolumeKey(omVolumeArgs.getVolume()),\n+              omVolumeArgs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964463dfcb39a29e90639ae7300f992d7b2c6513"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NTczODEzOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketDeleteRequest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNjo1NTowMFrOIDriSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNjo1NTowMFrOIDriSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDcyOTkyOA==", "bodyText": "indent", "url": "https://github.com/apache/ozone/pull/1445#discussion_r540729928", "createdAt": "2020-12-11T06:55:00Z", "author": {"login": "captainzmc"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketDeleteRequest.java", "diffHunk": "@@ -134,9 +135,15 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       omResponse.setDeleteBucketResponse(\n           DeleteBucketResponse.newBuilder().build());\n \n+      // update used namespace for volume\n+      String volumeKey = omMetadataManager.getVolumeKey(volumeName);\n+      OmVolumeArgs omVolumeArgs =\n+              omMetadataManager.getVolumeTable().getReadCopy(volumeKey);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f28ad7892f97a1f1d04c443b05340c5721d25c48"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NTczOTM2OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/client/rpc/TestOzoneRpcClientAbstract.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNjo1NTozNFrOIDri9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNjo1NTozNFrOIDri9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDczMDEwMw==", "bodyText": "indent", "url": "https://github.com/apache/ozone/pull/1445#discussion_r540730103", "createdAt": "2020-12-11T06:55:34Z", "author": {"login": "captainzmc"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/client/rpc/TestOzoneRpcClientAbstract.java", "diffHunk": "@@ -885,6 +885,42 @@ public void testCheckUsedBytesQuota() throws IOException {\n     Assert.assertEquals(3, countException);\n   }\n \n+  @Test\n+  public void testVolumnUsedNamespace() throws IOException {\n+    String volumeName = UUID.randomUUID().toString();\n+    String bucketName = UUID.randomUUID().toString();\n+    OzoneVolume volume = null;\n+\n+    store.createVolume(volumeName);\n+    volume = store.getVolume(volumeName);\n+    // The initial value should be 0\n+    Assert.assertEquals(0L, volume.getUsedNamespace());\n+    volume.createBucket(bucketName);\n+    // Used namespace should be 1\n+    volume = store.getVolume(volumeName);\n+    Assert.assertEquals(1L, volume.getUsedNamespace());\n+\n+    // test linked bucket\n+    String targetVolName = UUID.randomUUID().toString();\n+    store.createVolume(targetVolName);\n+    OzoneVolume volumeWithLinkedBucket = store.getVolume(targetVolName);\n+    String targetBucketName = UUID.randomUUID().toString();\n+    BucketArgs.Builder argsBuilder = new BucketArgs.Builder()\n+            .setStorageType(StorageType.DEFAULT)\n+            .setVersioning(false)\n+            .setSourceVolume(volumeName)\n+            .setSourceBucket(bucketName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f28ad7892f97a1f1d04c443b05340c5721d25c48"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5Nzg2NDM2OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/OzoneConsts.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNTo0NTo0MVrOID-gDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwNDoyODozNlrOIEaahA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0MDY1Mg==", "bodyText": "As I see we defined usedBytes corresponding to quotaInBytes, so quotaInCounts  expected to be  quotaInNamespace. This is just my first feeling for this variable name. We could revisit these later in a separate JIRA to make this more understandable.", "url": "https://github.com/apache/ozone/pull/1445#discussion_r541040652", "createdAt": "2020-12-11T15:45:41Z", "author": {"login": "linyiqun"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/OzoneConsts.java", "diffHunk": "@@ -270,6 +270,7 @@ private OzoneConsts() {\n   public static final String SRC_KEY = \"srcKey\";\n   public static final String DST_KEY = \"dstKey\";\n   public static final String USED_BYTES = \"usedBytes\";\n+  public static final String USED_NAMESPACE = \"usedNamespace\";\n   public static final String QUOTA_IN_BYTES = \"quotaInBytes\";\n   public static final String QUOTA_IN_COUNTS = \"quotaInCounts\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f28ad7892f97a1f1d04c443b05340c5721d25c48"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI5OTg4NQ==", "bodyText": "Yes. quotaInCounts seems not very readable to me as well :) I didn't change it in this PR as it is not relevant.\nCreated https://issues.apache.org/jira/browse/HDDS-4582 to revisit it later.", "url": "https://github.com/apache/ozone/pull/1445#discussion_r541299885", "createdAt": "2020-12-11T21:16:16Z", "author": {"login": "amaliujia"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/OzoneConsts.java", "diffHunk": "@@ -270,6 +270,7 @@ private OzoneConsts() {\n   public static final String SRC_KEY = \"srcKey\";\n   public static final String DST_KEY = \"dstKey\";\n   public static final String USED_BYTES = \"usedBytes\";\n+  public static final String USED_NAMESPACE = \"usedNamespace\";\n   public static final String QUOTA_IN_BYTES = \"quotaInBytes\";\n   public static final String QUOTA_IN_COUNTS = \"quotaInCounts\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0MDY1Mg=="}, "originalCommit": {"oid": "f28ad7892f97a1f1d04c443b05340c5721d25c48"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMzNTc4OQ==", "bodyText": "I started to use quotaInNamespace in my new code. HDDS-4582 will be replacing existing quotaInCounts to quotaInNamesapce", "url": "https://github.com/apache/ozone/pull/1445#discussion_r541335789", "createdAt": "2020-12-11T21:55:55Z", "author": {"login": "amaliujia"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/OzoneConsts.java", "diffHunk": "@@ -270,6 +270,7 @@ private OzoneConsts() {\n   public static final String SRC_KEY = \"srcKey\";\n   public static final String DST_KEY = \"dstKey\";\n   public static final String USED_BYTES = \"usedBytes\";\n+  public static final String USED_NAMESPACE = \"usedNamespace\";\n   public static final String QUOTA_IN_BYTES = \"quotaInBytes\";\n   public static final String QUOTA_IN_COUNTS = \"quotaInCounts\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0MDY1Mg=="}, "originalCommit": {"oid": "f28ad7892f97a1f1d04c443b05340c5721d25c48"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ5Nzk4OA==", "bodyText": "Makes sense to me.", "url": "https://github.com/apache/ozone/pull/1445#discussion_r541497988", "createdAt": "2020-12-12T04:28:36Z", "author": {"login": "linyiqun"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/OzoneConsts.java", "diffHunk": "@@ -270,6 +270,7 @@ private OzoneConsts() {\n   public static final String SRC_KEY = \"srcKey\";\n   public static final String DST_KEY = \"dstKey\";\n   public static final String USED_BYTES = \"usedBytes\";\n+  public static final String USED_NAMESPACE = \"usedNamespace\";\n   public static final String QUOTA_IN_BYTES = \"quotaInBytes\";\n   public static final String QUOTA_IN_COUNTS = \"quotaInCounts\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0MDY1Mg=="}, "originalCommit": {"oid": "f28ad7892f97a1f1d04c443b05340c5721d25c48"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5Nzg4MzkyOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/client/rpc/TestOzoneRpcClientAbstract.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNTo1MDowMFrOID-rsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMToxOToxMVrOIEOeiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0MzYzNQ==", "bodyText": "Not fully get this point, why this bucket create way will not increased the namespace quota? Just curious for this.", "url": "https://github.com/apache/ozone/pull/1445#discussion_r541043635", "createdAt": "2020-12-11T15:50:00Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/client/rpc/TestOzoneRpcClientAbstract.java", "diffHunk": "@@ -885,6 +885,42 @@ public void testCheckUsedBytesQuota() throws IOException {\n     Assert.assertEquals(3, countException);\n   }\n \n+  @Test\n+  public void testVolumnUsedNamespace() throws IOException {\n+    String volumeName = UUID.randomUUID().toString();\n+    String bucketName = UUID.randomUUID().toString();\n+    OzoneVolume volume = null;\n+\n+    store.createVolume(volumeName);\n+    volume = store.getVolume(volumeName);\n+    // The initial value should be 0\n+    Assert.assertEquals(0L, volume.getUsedNamespace());\n+    volume.createBucket(bucketName);\n+    // Used namespace should be 1\n+    volume = store.getVolume(volumeName);\n+    Assert.assertEquals(1L, volume.getUsedNamespace());\n+\n+    // test linked bucket\n+    String targetVolName = UUID.randomUUID().toString();\n+    store.createVolume(targetVolName);\n+    OzoneVolume volumeWithLinkedBucket = store.getVolume(targetVolName);\n+    String targetBucketName = UUID.randomUUID().toString();\n+    BucketArgs.Builder argsBuilder = new BucketArgs.Builder()\n+            .setStorageType(StorageType.DEFAULT)\n+            .setVersioning(false)\n+            .setSourceVolume(volumeName)\n+            .setSourceBucket(bucketName);\n+    volumeWithLinkedBucket.createBucket(targetBucketName, argsBuilder.build());\n+    // Used namespace should be 0 because linked bucket does not consume\n+    // namespace quota\n+    Assert.assertEquals(0L, volumeWithLinkedBucket.getUsedNamespace());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f28ad7892f97a1f1d04c443b05340c5721d25c48"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMwMjQwOA==", "bodyText": "@amaliujia , could you add a new UT for bucket link case? Linked bucket should not be counted in the namespace quota.\n\nThis comes from one of the comment above. I consider this is more like a decision that linked bucket should not consume quota. At least linked bucket should not consume space quota. I think to make consistent, do not apply namespace quota also makes sense.", "url": "https://github.com/apache/ozone/pull/1445#discussion_r541302408", "createdAt": "2020-12-11T21:19:11Z", "author": {"login": "amaliujia"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/client/rpc/TestOzoneRpcClientAbstract.java", "diffHunk": "@@ -885,6 +885,42 @@ public void testCheckUsedBytesQuota() throws IOException {\n     Assert.assertEquals(3, countException);\n   }\n \n+  @Test\n+  public void testVolumnUsedNamespace() throws IOException {\n+    String volumeName = UUID.randomUUID().toString();\n+    String bucketName = UUID.randomUUID().toString();\n+    OzoneVolume volume = null;\n+\n+    store.createVolume(volumeName);\n+    volume = store.getVolume(volumeName);\n+    // The initial value should be 0\n+    Assert.assertEquals(0L, volume.getUsedNamespace());\n+    volume.createBucket(bucketName);\n+    // Used namespace should be 1\n+    volume = store.getVolume(volumeName);\n+    Assert.assertEquals(1L, volume.getUsedNamespace());\n+\n+    // test linked bucket\n+    String targetVolName = UUID.randomUUID().toString();\n+    store.createVolume(targetVolName);\n+    OzoneVolume volumeWithLinkedBucket = store.getVolume(targetVolName);\n+    String targetBucketName = UUID.randomUUID().toString();\n+    BucketArgs.Builder argsBuilder = new BucketArgs.Builder()\n+            .setStorageType(StorageType.DEFAULT)\n+            .setVersioning(false)\n+            .setSourceVolume(volumeName)\n+            .setSourceBucket(bucketName);\n+    volumeWithLinkedBucket.createBucket(targetBucketName, argsBuilder.build());\n+    // Used namespace should be 0 because linked bucket does not consume\n+    // namespace quota\n+    Assert.assertEquals(0L, volumeWithLinkedBucket.getUsedNamespace());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0MzYzNQ=="}, "originalCommit": {"oid": "f28ad7892f97a1f1d04c443b05340c5721d25c48"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5Nzg5MTMwOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketDeleteRequest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNTo1MTozMVrOID-wBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNTo1MTozMVrOID-wBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0NDc0MQ==", "bodyText": "Can you add an empty check for omVolumeArgs before updating the namespace used?\n    if (volumeArgs == null) {\n      throw new OMException(\"Volume \" + volume + \" is not found\",\n          OMException.ResultCodes.VOLUME_NOT_FOUND);\n    }", "url": "https://github.com/apache/ozone/pull/1445#discussion_r541044741", "createdAt": "2020-12-11T15:51:31Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketDeleteRequest.java", "diffHunk": "@@ -134,9 +135,15 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       omResponse.setDeleteBucketResponse(\n           DeleteBucketResponse.newBuilder().build());\n \n+      // update used namespace for volume\n+      String volumeKey = omMetadataManager.getVolumeKey(volumeName);\n+      OmVolumeArgs omVolumeArgs =\n+              omMetadataManager.getVolumeTable().getReadCopy(volumeKey);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f28ad7892f97a1f1d04c443b05340c5721d25c48"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NzkxMTAyOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketCreateRequest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNTo1NTo1OVrOID-76Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMToyMjowOVrOIEOpPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0Nzc4NQ==", "bodyText": "We should also update the volume table cache like above, as omVolumeArgs be updated.", "url": "https://github.com/apache/ozone/pull/1445#discussion_r541047785", "createdAt": "2020-12-11T15:55:59Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketCreateRequest.java", "diffHunk": "@@ -205,14 +205,17 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       // Add default acls from volume.\n       addDefaultAcls(omBucketInfo, omVolumeArgs);\n \n+      // update used namespace for volume\n+      omVolumeArgs.incrUsedNamespace(1L);\n+\n       // Update table cache.\n       metadataManager.getBucketTable().addCacheEntry(new CacheKey<>(bucketKey),\n           new CacheValue<>(Optional.of(omBucketInfo), transactionLogIndex));\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f28ad7892f97a1f1d04c443b05340c5721d25c48"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMwNTE0OQ==", "bodyText": "O I see. it make senses.", "url": "https://github.com/apache/ozone/pull/1445#discussion_r541305149", "createdAt": "2020-12-11T21:22:09Z", "author": {"login": "amaliujia"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketCreateRequest.java", "diffHunk": "@@ -205,14 +205,17 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       // Add default acls from volume.\n       addDefaultAcls(omBucketInfo, omVolumeArgs);\n \n+      // update used namespace for volume\n+      omVolumeArgs.incrUsedNamespace(1L);\n+\n       // Update table cache.\n       metadataManager.getBucketTable().addCacheEntry(new CacheKey<>(bucketKey),\n           new CacheValue<>(Optional.of(omBucketInfo), transactionLogIndex));\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0Nzc4NQ=="}, "originalCommit": {"oid": "f28ad7892f97a1f1d04c443b05340c5721d25c48"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NzkxNDg0OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketDeleteRequest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNTo1Njo0MlrOID--MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNTo1Njo0MlrOID--MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0ODM2OA==", "bodyText": "Volume  table cache also need to be updated here as we update table cache in OMBucketCreateRequest.java", "url": "https://github.com/apache/ozone/pull/1445#discussion_r541048368", "createdAt": "2020-12-11T15:56:42Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketDeleteRequest.java", "diffHunk": "@@ -134,9 +135,15 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       omResponse.setDeleteBucketResponse(\n           DeleteBucketResponse.newBuilder().build());\n \n+      // update used namespace for volume\n+      String volumeKey = omMetadataManager.getVolumeKey(volumeName);\n+      OmVolumeArgs omVolumeArgs =\n+              omMetadataManager.getVolumeTable().getReadCopy(volumeKey);\n+      omVolumeArgs.incrUsedNamespace(-1L);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f28ad7892f97a1f1d04c443b05340c5721d25c48"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NzkzMDUxOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketCreateRequest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjowMDowOFrOID_Hvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMTo1Njo0MFrOIEQj7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA1MDgxNQ==", "bodyText": "Before this update, we need to do the namespace quota check in checkQuotaBytesValid.", "url": "https://github.com/apache/ozone/pull/1445#discussion_r541050815", "createdAt": "2020-12-11T16:00:08Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketCreateRequest.java", "diffHunk": "@@ -205,14 +205,17 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       // Add default acls from volume.\n       addDefaultAcls(omBucketInfo, omVolumeArgs);\n \n+      // update used namespace for volume\n+      omVolumeArgs.incrUsedNamespace(1L);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f28ad7892f97a1f1d04c443b05340c5721d25c48"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMzNjU1Nw==", "bodyText": "Also updated the test to test quota exceed case.", "url": "https://github.com/apache/ozone/pull/1445#discussion_r541336557", "createdAt": "2020-12-11T21:56:40Z", "author": {"login": "amaliujia"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketCreateRequest.java", "diffHunk": "@@ -205,14 +205,17 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       // Add default acls from volume.\n       addDefaultAcls(omBucketInfo, omVolumeArgs);\n \n+      // update used namespace for volume\n+      omVolumeArgs.incrUsedNamespace(1L);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA1MDgxNQ=="}, "originalCommit": {"oid": "f28ad7892f97a1f1d04c443b05340c5721d25c48"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMDg0MDE1OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketCreateRequest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwNDoyMToxOFrOIEaWlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwNzoyOTo0N1rOIEb-yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ5Njk4MA==", "bodyText": "Can you use omVolumeArgs.getQuotaInCounts() != OzoneConsts.QUOTA_RESET to replace above condition check? That will be the better check in case maybe OzoneConsts.QUOTA_RESET value can be changed to the positive number.", "url": "https://github.com/apache/ozone/pull/1445#discussion_r541496980", "createdAt": "2020-12-12T04:21:18Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketCreateRequest.java", "diffHunk": "@@ -301,6 +309,25 @@ private BucketEncryptionInfoProto getBeinfo(\n     return bekb.build();\n   }\n \n+  /**\n+   * Check namespace quota.\n+   */\n+  private void checkQuotaInNamespace(OmVolumeArgs omVolumeArgs,\n+      long allocatedNamespace) throws IOException {\n+    if (omVolumeArgs.getQuotaInCounts() > OzoneConsts.QUOTA_RESET) {\n+      long usedNamespace = omVolumeArgs.getUsedNamespace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "505bf7b840090cba7127b4db6506dbb85a22bddd"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTUyMzY1OA==", "bodyText": "make senses! Done!", "url": "https://github.com/apache/ozone/pull/1445#discussion_r541523658", "createdAt": "2020-12-12T07:29:47Z", "author": {"login": "amaliujia"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketCreateRequest.java", "diffHunk": "@@ -301,6 +309,25 @@ private BucketEncryptionInfoProto getBeinfo(\n     return bekb.build();\n   }\n \n+  /**\n+   * Check namespace quota.\n+   */\n+  private void checkQuotaInNamespace(OmVolumeArgs omVolumeArgs,\n+      long allocatedNamespace) throws IOException {\n+    if (omVolumeArgs.getQuotaInCounts() > OzoneConsts.QUOTA_RESET) {\n+      long usedNamespace = omVolumeArgs.getUsedNamespace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ5Njk4MA=="}, "originalCommit": {"oid": "505bf7b840090cba7127b4db6506dbb85a22bddd"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMDg0MjUyOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketDeleteRequest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwNDoyMjo0N1rOIEaXjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwNzozMDowOFrOIEb--A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ5NzIyOQ==", "bodyText": "We could directly use volumeKey, don't need to invoke omMetadataManager.getVolumeKey again.", "url": "https://github.com/apache/ozone/pull/1445#discussion_r541497229", "createdAt": "2020-12-12T04:22:47Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketDeleteRequest.java", "diffHunk": "@@ -134,9 +135,23 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       omResponse.setDeleteBucketResponse(\n           DeleteBucketResponse.newBuilder().build());\n \n+      // update used namespace for volume\n+      String volumeKey = omMetadataManager.getVolumeKey(volumeName);\n+      OmVolumeArgs omVolumeArgs =\n+          omMetadataManager.getVolumeTable().getReadCopy(volumeKey);\n+      if (omVolumeArgs == null) {\n+        throw new OMException(\"Volume \" + volumeName + \" is not found\",\n+            OMException.ResultCodes.VOLUME_NOT_FOUND);\n+      }\n+      omVolumeArgs.incrUsedNamespace(-1L);\n+      // Update table cache.\n+      omMetadataManager.getVolumeTable().addCacheEntry(\n+          new CacheKey<>(omMetadataManager.getVolumeKey(volumeName)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "505bf7b840090cba7127b4db6506dbb85a22bddd"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTUyMzcwNA==", "bodyText": "O yes :)", "url": "https://github.com/apache/ozone/pull/1445#discussion_r541523704", "createdAt": "2020-12-12T07:30:08Z", "author": {"login": "amaliujia"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketDeleteRequest.java", "diffHunk": "@@ -134,9 +135,23 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       omResponse.setDeleteBucketResponse(\n           DeleteBucketResponse.newBuilder().build());\n \n+      // update used namespace for volume\n+      String volumeKey = omMetadataManager.getVolumeKey(volumeName);\n+      OmVolumeArgs omVolumeArgs =\n+          omMetadataManager.getVolumeTable().getReadCopy(volumeKey);\n+      if (omVolumeArgs == null) {\n+        throw new OMException(\"Volume \" + volumeName + \" is not found\",\n+            OMException.ResultCodes.VOLUME_NOT_FOUND);\n+      }\n+      omVolumeArgs.incrUsedNamespace(-1L);\n+      // Update table cache.\n+      omMetadataManager.getVolumeTable().addCacheEntry(\n+          new CacheKey<>(omMetadataManager.getVolumeKey(volumeName)),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ5NzIyOQ=="}, "originalCommit": {"oid": "505bf7b840090cba7127b4db6506dbb85a22bddd"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4933, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}