{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzMjgwOTkx", "number": 719, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDo1ODo1NFrODs2eRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDo1OTowM1rODs2ejQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzU2NDIxOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/SCMPipelineManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDo1ODo1NFrOF979jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMTo1ODozMlrOF99xjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4OTg2OA==", "bodyText": "I would suggest to use pipelineCreationAllowed as the internal state name, it makes the code easier to read out as I I see.\nI know this is a regular getter and and setter pair, but...\nIn the tests, the set method is always called with true as the parameter, so I suggest to call this method simply allowPipelineCreation() without a parameter, the getter part of the pair in this case can be called as isPipelineCreationAllowed().\nThis suggestion is simply about expressions from the usage point of view, and I don't have a strong opinion on this, however if we want to keep this name and want to name it as a regular getter setter as it is suggested by the books then we should use isAllowPipelineCreation as the getter name.", "url": "https://github.com/apache/ozone/pull/719#discussion_r400489868", "createdAt": "2020-03-30T20:58:54Z", "author": {"login": "fapifta"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/SCMPipelineManager.java", "diffHunk": "@@ -146,6 +152,16 @@ public void setPipelineProvider(ReplicationType replicationType,\n     pipelineFactory.setProvider(replicationType, provider);\n   }\n \n+  @VisibleForTesting\n+  public void setAllowPipelineCreation(boolean newState) {\n+    this.allowPipelineCreation.set(newState);\n+  }\n+\n+  @VisibleForTesting\n+  public boolean getAllowPipelineCreation() {\n+    return allowPipelineCreation.get();\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88837ef5a9a253eb330e52b9da3362b16038008f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUxOTU2Ng==", "bodyText": "I think your naming is better. I will push a new commit for that change.", "url": "https://github.com/apache/ozone/pull/719#discussion_r400519566", "createdAt": "2020-03-30T21:58:32Z", "author": {"login": "sodonnel"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/SCMPipelineManager.java", "diffHunk": "@@ -146,6 +152,16 @@ public void setPipelineProvider(ReplicationType replicationType,\n     pipelineFactory.setProvider(replicationType, provider);\n   }\n \n+  @VisibleForTesting\n+  public void setAllowPipelineCreation(boolean newState) {\n+    this.allowPipelineCreation.set(newState);\n+  }\n+\n+  @VisibleForTesting\n+  public boolean getAllowPipelineCreation() {\n+    return allowPipelineCreation.get();\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4OTg2OA=="}, "originalCommit": {"oid": "88837ef5a9a253eb330e52b9da3362b16038008f"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzU2NDkzOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/SCMPipelineManager.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDo1OTowM1rOF9798g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMToxNzo1M1rOF-olwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4OTk3MA==", "bodyText": "Let me understand a bit this part of the code:\nwe trigger pipelines in two cases:\n1: the pipeline creation was not allowed before, but now it is allowed, effectively when precheck is complete\n2: safemode is transitioning to off, and currently we are in safe mode\nLooking at the code of triggerPipelineCreation, it is calling the same method from the BackgroundPipelineCreator, which is doing this only after the creator itself is started.\nNow this means that we are effectively doing the same as the old code, and trigger pipeline creation after leaving safe mode, am I understand this well?", "url": "https://github.com/apache/ozone/pull/719#discussion_r400489970", "createdAt": "2020-03-30T20:59:03Z", "author": {"login": "fapifta"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/SCMPipelineManager.java", "diffHunk": "@@ -641,13 +663,26 @@ public boolean getSafeModeStatus() {\n   }\n \n   @Override\n-  public void handleSafeModeTransition(\n+  public synchronized void handleSafeModeTransition(\n       SCMSafeModeManager.SafeModeStatus status) {\n-    this.isInSafeMode.set(status.getSafeModeStatus());\n-    if (!status.getSafeModeStatus()) {\n-      // TODO: #CLUTIL if we reenter safe mode the fixed interval pipeline\n-      // creation job needs to stop\n+    // TODO: #CLUTIL - handle safemode getting re-enabled\n+    boolean currentAllowPipelines =\n+        allowPipelineCreation.getAndSet(status.isPreCheckComplete());\n+    boolean currentlyInSafeMode =\n+        isInSafeMode.getAndSet(status.isInSafeMode());\n+    boolean triggerPipelines = false;\n+\n+    // Trigger pipeline creation only if the preCheck status has changed to\n+    // complete.\n+    if (allowPipelineCreation.get() && !currentAllowPipelines) {\n+      triggerPipelines = true;\n+    }\n+    // Start the pipeline creation thread only when safemode switches off\n+    if (!getSafeModeStatus() && currentlyInSafeMode) {\n       startPipelineCreator();\n+      triggerPipelines = true;\n+    }\n+    if (triggerPipelines) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88837ef5a9a253eb330e52b9da3362b16038008f"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUxNDA1Nw==", "bodyText": "In the logic prior to this patch, BackgroundPipelineCreator only gets started when safemode exits. However, the creator does not need to be started for pipelines to get created. Infact, in order to exit safemode, there must be a replication factor 3 pipeline created, and that must happen without the creator running.\nThere are actually two ways a pipeline can be created:\n\n\nWhen the backgroundPipelineCreator is running, it starts every 2 minutes and tries to create pipelines.\n\n\nWhen a node registers with SCM, it triggers an event and calls backgroundPipelineCreator.triggerPipelineCreation(); which tries to create pipelines immediately - even if the BackgroundPipelineCreator has already been started.\n\n\nTherefore in safemode, before this patch, pipelines are initially created by (2) above. However now we want to stop that happening. Therefore whenever the precheck completes (enough nodes registered) we trigger the pipeline creation, but hold off on starting the background creator thread. Then it is started when safemode exits.\nNow that you have highlighted this, it is possibly valid to just start the BackgroundPipeLineCreator in both cases. However there is one further detail - in the existing implementation, there is a delay for safemode exiting. Once the rules have passed some services are not started for a delay of 5 minutes and the BackgroundPipelineCreator thread is one of them. I am not sure on the history of that so it probably makes sense to keep that logic for now.", "url": "https://github.com/apache/ozone/pull/719#discussion_r400514057", "createdAt": "2020-03-30T21:46:29Z", "author": {"login": "sodonnel"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/SCMPipelineManager.java", "diffHunk": "@@ -641,13 +663,26 @@ public boolean getSafeModeStatus() {\n   }\n \n   @Override\n-  public void handleSafeModeTransition(\n+  public synchronized void handleSafeModeTransition(\n       SCMSafeModeManager.SafeModeStatus status) {\n-    this.isInSafeMode.set(status.getSafeModeStatus());\n-    if (!status.getSafeModeStatus()) {\n-      // TODO: #CLUTIL if we reenter safe mode the fixed interval pipeline\n-      // creation job needs to stop\n+    // TODO: #CLUTIL - handle safemode getting re-enabled\n+    boolean currentAllowPipelines =\n+        allowPipelineCreation.getAndSet(status.isPreCheckComplete());\n+    boolean currentlyInSafeMode =\n+        isInSafeMode.getAndSet(status.isInSafeMode());\n+    boolean triggerPipelines = false;\n+\n+    // Trigger pipeline creation only if the preCheck status has changed to\n+    // complete.\n+    if (allowPipelineCreation.get() && !currentAllowPipelines) {\n+      triggerPipelines = true;\n+    }\n+    // Start the pipeline creation thread only when safemode switches off\n+    if (!getSafeModeStatus() && currentlyInSafeMode) {\n       startPipelineCreator();\n+      triggerPipelines = true;\n+    }\n+    if (triggerPipelines) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4OTk3MA=="}, "originalCommit": {"oid": "88837ef5a9a253eb330e52b9da3362b16038008f"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgxOTI0NA==", "bodyText": "Oh, I missed one small detail in the shouldSchedulePipelineCreator method... and misinterpreted it sorry about that... So triggerPipelineCreation will create pipelines if the safemode precheck is finished and allowPipelineCreation is already true in SCMPipelineManager.\nWith that it makes perfect sense, that we want to trigger the pipeline creation once when precheck is complete, and start the scheduled runs after the safe mode is exited.\nBut in this case, it would be enough to call triggerPipelineCreation when we arrived to the end of the precheck stage, and start the background pipeline creator schedule when we left safe mode.\nNow what I understand happens at a startup when this is interesting is the following:\nfor (0..nodecount) {\ntriggerPipelineCreation() // noop as allowPipelineCreation is false\n}\nprecheck finished\ntriggerPipelineCreation // runs and creates pipelines\nsafe mode exit\nstartFixedIntervalPipelineCreator // calls createPipelines right away once at start\ntriggerPipelineCreation // tries to call createPipelines if it is not running from the prev. call\nI think we don't need this last call, which makes the triggerPipelines boolean unnecessary and the code a bit simpler. Is it correct, or I am still missing something? :)", "url": "https://github.com/apache/ozone/pull/719#discussion_r400819244", "createdAt": "2020-03-31T10:52:46Z", "author": {"login": "fapifta"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/SCMPipelineManager.java", "diffHunk": "@@ -641,13 +663,26 @@ public boolean getSafeModeStatus() {\n   }\n \n   @Override\n-  public void handleSafeModeTransition(\n+  public synchronized void handleSafeModeTransition(\n       SCMSafeModeManager.SafeModeStatus status) {\n-    this.isInSafeMode.set(status.getSafeModeStatus());\n-    if (!status.getSafeModeStatus()) {\n-      // TODO: #CLUTIL if we reenter safe mode the fixed interval pipeline\n-      // creation job needs to stop\n+    // TODO: #CLUTIL - handle safemode getting re-enabled\n+    boolean currentAllowPipelines =\n+        allowPipelineCreation.getAndSet(status.isPreCheckComplete());\n+    boolean currentlyInSafeMode =\n+        isInSafeMode.getAndSet(status.isInSafeMode());\n+    boolean triggerPipelines = false;\n+\n+    // Trigger pipeline creation only if the preCheck status has changed to\n+    // complete.\n+    if (allowPipelineCreation.get() && !currentAllowPipelines) {\n+      triggerPipelines = true;\n+    }\n+    // Start the pipeline creation thread only when safemode switches off\n+    if (!getSafeModeStatus() && currentlyInSafeMode) {\n       startPipelineCreator();\n+      triggerPipelines = true;\n+    }\n+    if (triggerPipelines) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4OTk3MA=="}, "originalCommit": {"oid": "88837ef5a9a253eb330e52b9da3362b16038008f"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIyMTA1OA==", "bodyText": "Good observation - you are correct. I have simplified this as you suggested.", "url": "https://github.com/apache/ozone/pull/719#discussion_r401221058", "createdAt": "2020-03-31T21:17:53Z", "author": {"login": "sodonnel"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/SCMPipelineManager.java", "diffHunk": "@@ -641,13 +663,26 @@ public boolean getSafeModeStatus() {\n   }\n \n   @Override\n-  public void handleSafeModeTransition(\n+  public synchronized void handleSafeModeTransition(\n       SCMSafeModeManager.SafeModeStatus status) {\n-    this.isInSafeMode.set(status.getSafeModeStatus());\n-    if (!status.getSafeModeStatus()) {\n-      // TODO: #CLUTIL if we reenter safe mode the fixed interval pipeline\n-      // creation job needs to stop\n+    // TODO: #CLUTIL - handle safemode getting re-enabled\n+    boolean currentAllowPipelines =\n+        allowPipelineCreation.getAndSet(status.isPreCheckComplete());\n+    boolean currentlyInSafeMode =\n+        isInSafeMode.getAndSet(status.isInSafeMode());\n+    boolean triggerPipelines = false;\n+\n+    // Trigger pipeline creation only if the preCheck status has changed to\n+    // complete.\n+    if (allowPipelineCreation.get() && !currentAllowPipelines) {\n+      triggerPipelines = true;\n+    }\n+    // Start the pipeline creation thread only when safemode switches off\n+    if (!getSafeModeStatus() && currentlyInSafeMode) {\n       startPipelineCreator();\n+      triggerPipelines = true;\n+    }\n+    if (triggerPipelines) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4OTk3MA=="}, "originalCommit": {"oid": "88837ef5a9a253eb330e52b9da3362b16038008f"}, "originalPosition": 78}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4879, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}