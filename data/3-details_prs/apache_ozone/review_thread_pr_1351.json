{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczNDg5MDcz", "number": 1351, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMToxNToyNlrOEcPvMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxOTo1NDoxOVrOEd3wqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDUzNDI1OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMToxNToyNlrOHGqAFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMTozMDozNlrOHGqxBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc0MTY1Mw==", "bodyText": "Here, we can collect just expired KeyNames.", "url": "https://github.com/apache/ozone/pull/1351#discussion_r476741653", "createdAt": "2020-08-25T21:15:26Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManager.java", "diffHunk": "@@ -186,10 +186,11 @@ OmKeyLocationInfo allocateBlock(OmKeyArgs args, long clientID,\n    * the key name and all its associated block IDs. A pending open key has\n    * prefix #open# in OM DB.\n    *\n+   * @param count The maximum number of expired opne keys to return.\n    * @return a list of {@link BlockGroup} representing keys and blocks.\n    * @throws IOException\n    */\n-  List<BlockGroup> getExpiredOpenKeys() throws IOException;\n+  List<BlockGroup> getExpiredOpenKeys(int count) throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a2578ec3f898c0d5b9f12f727d8da762d11d7c3"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc0MTkyMQ==", "bodyText": "And also I think we might need last expired key also, as in next iteration we need to start from that one.", "url": "https://github.com/apache/ozone/pull/1351#discussion_r476741921", "createdAt": "2020-08-25T21:15:57Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManager.java", "diffHunk": "@@ -186,10 +186,11 @@ OmKeyLocationInfo allocateBlock(OmKeyArgs args, long clientID,\n    * the key name and all its associated block IDs. A pending open key has\n    * prefix #open# in OM DB.\n    *\n+   * @param count The maximum number of expired opne keys to return.\n    * @return a list of {@link BlockGroup} representing keys and blocks.\n    * @throws IOException\n    */\n-  List<BlockGroup> getExpiredOpenKeys() throws IOException;\n+  List<BlockGroup> getExpiredOpenKeys(int count) throws IOException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc0MTY1Mw=="}, "originalCommit": {"oid": "4a2578ec3f898c0d5b9f12f727d8da762d11d7c3"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc1NDE4MQ==", "bodyText": "You can ignore my 2nd comment, as delete expiredKeys will be done in a single iteration, those expired keys will not be there in the openKeyTable.", "url": "https://github.com/apache/ozone/pull/1351#discussion_r476754181", "createdAt": "2020-08-25T21:30:36Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManager.java", "diffHunk": "@@ -186,10 +186,11 @@ OmKeyLocationInfo allocateBlock(OmKeyArgs args, long clientID,\n    * the key name and all its associated block IDs. A pending open key has\n    * prefix #open# in OM DB.\n    *\n+   * @param count The maximum number of expired opne keys to return.\n    * @return a list of {@link BlockGroup} representing keys and blocks.\n    * @throws IOException\n    */\n-  List<BlockGroup> getExpiredOpenKeys() throws IOException;\n+  List<BlockGroup> getExpiredOpenKeys(int count) throws IOException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc0MTY1Mw=="}, "originalCommit": {"oid": "4a2578ec3f898c0d5b9f12f727d8da762d11d7c3"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDU0MDQ2OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMToxNzoyMVrOHGqD-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMToxNzoyMVrOHGqD-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc0MjY0OA==", "bodyText": "opne -> open", "url": "https://github.com/apache/ozone/pull/1351#discussion_r476742648", "createdAt": "2020-08-25T21:17:21Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManager.java", "diffHunk": "@@ -186,10 +186,11 @@ OmKeyLocationInfo allocateBlock(OmKeyArgs args, long clientID,\n    * the key name and all its associated block IDs. A pending open key has\n    * prefix #open# in OM DB.\n    *\n+   * @param count The maximum number of expired opne keys to return.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a2578ec3f898c0d5b9f12f727d8da762d11d7c3"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NDIwNTkyOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNDoxNDo0MVrOHHONNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNDoxNDo0MVrOHHONNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMzNDgzNw==", "bodyText": "Is this line in the original documentation still relevant? It looks like open keys are placed in the open key table unprefixed.", "url": "https://github.com/apache/ozone/pull/1351#discussion_r477334837", "createdAt": "2020-08-26T14:14:41Z", "author": {"login": "errose28"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManager.java", "diffHunk": "@@ -186,10 +186,11 @@ OmKeyLocationInfo allocateBlock(OmKeyArgs args, long clientID,\n    * the key name and all its associated block IDs. A pending open key has\n    * prefix #open# in OM DB.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a2578ec3f898c0d5b9f12f727d8da762d11d7c3"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NzU3NzM2OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/TestOmMetadataManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxOTo1NDoxOVrOHJSvrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMDoxMTo0MFrOHJTLUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUwNjM1MQ==", "bodyText": "Unused code line", "url": "https://github.com/apache/ozone/pull/1351#discussion_r479506351", "createdAt": "2020-08-28T19:54:19Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/TestOmMetadataManager.java", "diffHunk": "@@ -521,6 +527,80 @@ public void testListKeysWithFewDeleteEntriesInCache() throws Exception {\n \n   }\n \n+  @Test\n+  public void testGetExpiredOpenKeys() throws Exception {\n+    final String bucketName = \"bucket\";\n+    final String volumeName = \"volume\";\n+    final int numExpiredOpenKeys = 4;\n+    final int numUnexpiredOpenKeys = 1;\n+    final long clientID = 1000L;\n+    // To create expired keys, they will be assigned a creation time twice as\n+    // old as the minimum expiration time.\n+    final long minExpiredTimeSeconds = ozoneConfiguration.getInt(\n+            OZONE_OPEN_KEY_EXPIRE_THRESHOLD_SECONDS,\n+            OZONE_OPEN_KEY_EXPIRE_THRESHOLD_SECONDS_DEFAULT);\n+    final long expiredAgeMillis =\n+            Instant.now().minus(minExpiredTimeSeconds * 2,\n+                    ChronoUnit.SECONDS).toEpochMilli();\n+\n+    // Add expired keys to open key table.\n+    // The method under test does not check for expired open keys in the\n+    // cache, since they will be picked up once the cache is flushed.\n+    Set<String> expiredKeys = new HashSet<>();\n+    for (int i = 0; i < numExpiredOpenKeys; i++) {\n+      OmKeyInfo keyInfo = TestOMRequestUtils.createOmKeyInfo(volumeName,\n+              bucketName, \"expired\" + i, HddsProtos.ReplicationType.RATIS,\n+              HddsProtos.ReplicationFactor.ONE, 0L, expiredAgeMillis);\n+\n+      TestOMRequestUtils.addKeyToTable(true, false,\n+              keyInfo, clientID, 0L, omMetadataManager);\n+\n+      String groupID = omMetadataManager.getOpenKey(volumeName, bucketName,\n+              keyInfo.getKeyName(), clientID);\n+      expiredKeys.add(groupID);\n+    }\n+\n+    // Add unexpired keys to open key table.\n+    for (int i = 0; i < numUnexpiredOpenKeys; i++) {\n+      OmKeyInfo keyInfo = TestOMRequestUtils.createOmKeyInfo(volumeName,\n+              bucketName, \"unexpired\" + i, HddsProtos.ReplicationType.RATIS,\n+              HddsProtos.ReplicationFactor.ONE);\n+\n+      TestOMRequestUtils.addKeyToTable(true, false,\n+              keyInfo, clientID, 0L, omMetadataManager);\n+\n+      String groupID = omMetadataManager.getOpenKey(volumeName, bucketName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9a0d418c9fecddf758c4e19add96529c442a1cc"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUxMzQyNg==", "bodyText": "Yeah. Removed it and pushing again.", "url": "https://github.com/apache/ozone/pull/1351#discussion_r479513426", "createdAt": "2020-08-28T20:11:40Z", "author": {"login": "errose28"}, "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/TestOmMetadataManager.java", "diffHunk": "@@ -521,6 +527,80 @@ public void testListKeysWithFewDeleteEntriesInCache() throws Exception {\n \n   }\n \n+  @Test\n+  public void testGetExpiredOpenKeys() throws Exception {\n+    final String bucketName = \"bucket\";\n+    final String volumeName = \"volume\";\n+    final int numExpiredOpenKeys = 4;\n+    final int numUnexpiredOpenKeys = 1;\n+    final long clientID = 1000L;\n+    // To create expired keys, they will be assigned a creation time twice as\n+    // old as the minimum expiration time.\n+    final long minExpiredTimeSeconds = ozoneConfiguration.getInt(\n+            OZONE_OPEN_KEY_EXPIRE_THRESHOLD_SECONDS,\n+            OZONE_OPEN_KEY_EXPIRE_THRESHOLD_SECONDS_DEFAULT);\n+    final long expiredAgeMillis =\n+            Instant.now().minus(minExpiredTimeSeconds * 2,\n+                    ChronoUnit.SECONDS).toEpochMilli();\n+\n+    // Add expired keys to open key table.\n+    // The method under test does not check for expired open keys in the\n+    // cache, since they will be picked up once the cache is flushed.\n+    Set<String> expiredKeys = new HashSet<>();\n+    for (int i = 0; i < numExpiredOpenKeys; i++) {\n+      OmKeyInfo keyInfo = TestOMRequestUtils.createOmKeyInfo(volumeName,\n+              bucketName, \"expired\" + i, HddsProtos.ReplicationType.RATIS,\n+              HddsProtos.ReplicationFactor.ONE, 0L, expiredAgeMillis);\n+\n+      TestOMRequestUtils.addKeyToTable(true, false,\n+              keyInfo, clientID, 0L, omMetadataManager);\n+\n+      String groupID = omMetadataManager.getOpenKey(volumeName, bucketName,\n+              keyInfo.getKeyName(), clientID);\n+      expiredKeys.add(groupID);\n+    }\n+\n+    // Add unexpired keys to open key table.\n+    for (int i = 0; i < numUnexpiredOpenKeys; i++) {\n+      OmKeyInfo keyInfo = TestOMRequestUtils.createOmKeyInfo(volumeName,\n+              bucketName, \"unexpired\" + i, HddsProtos.ReplicationType.RATIS,\n+              HddsProtos.ReplicationFactor.ONE);\n+\n+      TestOMRequestUtils.addKeyToTable(true, false,\n+              keyInfo, clientID, 0L, omMetadataManager);\n+\n+      String groupID = omMetadataManager.getOpenKey(volumeName, bucketName,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUwNjM1MQ=="}, "originalCommit": {"oid": "f9a0d418c9fecddf758c4e19add96529c442a1cc"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3916, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}