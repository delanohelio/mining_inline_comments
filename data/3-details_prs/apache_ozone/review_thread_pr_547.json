{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0MDY0NTE2", "number": 547, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxOTozODozNlrODhp4EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMDowMTo1OFrODhqVIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjE1Njk3OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/fs/ozone/TestRootedOzoneFileSystem.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxOTozODozNlrOFsgmaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMToxOTo0NlrOFsjhwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIxNTc4NA==", "bodyText": "NIT: can we refactor to dedup line 501-517.", "url": "https://github.com/apache/ozone/pull/547#discussion_r382215784", "createdAt": "2020-02-20T19:38:36Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/fs/ozone/TestRootedOzoneFileSystem.java", "diffHunk": "@@ -492,4 +493,42 @@ private void assertKeyNotFoundException(IOException ex) {\n     GenericTestUtils.assertExceptionContains(\"KEY_NOT_FOUND\", ex);\n   }\n \n+  /**\n+   * OFS: Test recursive listStatus on root.\n+   */\n+  @Test\n+  public void testListStatusRootAndVolumeNonRecursive() throws Exception {\n+    String volume1 = getRandomNonExistVolumeName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d9b2acd2a56c9a9bb6189cfdda895a073c7a0bd"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI2Mzc0NQ==", "bodyText": "done in ab03db6", "url": "https://github.com/apache/ozone/pull/547#discussion_r382263745", "createdAt": "2020-02-20T21:19:46Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/fs/ozone/TestRootedOzoneFileSystem.java", "diffHunk": "@@ -492,4 +493,42 @@ private void assertKeyNotFoundException(IOException ex) {\n     GenericTestUtils.assertExceptionContains(\"KEY_NOT_FOUND\", ex);\n   }\n \n+  /**\n+   * OFS: Test recursive listStatus on root.\n+   */\n+  @Test\n+  public void testListStatusRootAndVolumeNonRecursive() throws Exception {\n+    String volume1 = getRandomNonExistVolumeName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIxNTc4NA=="}, "originalCommit": {"oid": "1d9b2acd2a56c9a9bb6189cfdda895a073c7a0bd"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjE2MDg0OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/fs/ozone/TestRootedOzoneFileSystem.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxOTozOTo1MFrOFsgo0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNjoyNzo1NlrOFs82YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIxNjQwMw==", "bodyText": "Can we add a test case to cover recursive list status?", "url": "https://github.com/apache/ozone/pull/547#discussion_r382216403", "createdAt": "2020-02-20T19:39:50Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/fs/ozone/TestRootedOzoneFileSystem.java", "diffHunk": "@@ -492,4 +493,42 @@ private void assertKeyNotFoundException(IOException ex) {\n     GenericTestUtils.assertExceptionContains(\"KEY_NOT_FOUND\", ex);\n   }\n \n+  /**\n+   * OFS: Test recursive listStatus on root.\n+   */\n+  @Test\n+  public void testListStatusRootAndVolumeNonRecursive() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d9b2acd2a56c9a9bb6189cfdda895a073c7a0bd"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3ODYyNA==", "bodyText": "Done in 5048760", "url": "https://github.com/apache/ozone/pull/547#discussion_r382678624", "createdAt": "2020-02-21T16:27:56Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/fs/ozone/TestRootedOzoneFileSystem.java", "diffHunk": "@@ -492,4 +493,42 @@ private void assertKeyNotFoundException(IOException ex) {\n     GenericTestUtils.assertExceptionContains(\"KEY_NOT_FOUND\", ex);\n   }\n \n+  /**\n+   * OFS: Test recursive listStatus on root.\n+   */\n+  @Test\n+  public void testListStatusRootAndVolumeNonRecursive() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIxNjQwMw=="}, "originalCommit": {"oid": "1d9b2acd2a56c9a9bb6189cfdda895a073c7a0bd"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjE2NjYwOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxOTo0MTozMlrOFsgsTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNjozODoxMVrOFs9MYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIxNzI5NA==", "bodyText": "NIT: Can we wrap the logic into OFSPath#isRoot?", "url": "https://github.com/apache/ozone/pull/547#discussion_r382217294", "createdAt": "2020-02-20T19:41:32Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "diffHunk": "@@ -439,11 +440,15 @@ public FileStatusAdapter getFileStatus(String path, URI uri,\n     incrementCounter(Statistic.OBJECTS_QUERY);\n     OFSPath ofsPath = new OFSPath(path);\n     String key = ofsPath.getKeyName();\n-    // getFileStatus is called for root\n+    // path is root\n     if (ofsPath.getVolumeName().isEmpty() &&\n         ofsPath.getBucketName().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d9b2acd2a56c9a9bb6189cfdda895a073c7a0bd"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI0ODI5OQ==", "bodyText": "Good idea. Cleaner that way.", "url": "https://github.com/apache/ozone/pull/547#discussion_r382248299", "createdAt": "2020-02-20T20:47:05Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "diffHunk": "@@ -439,11 +440,15 @@ public FileStatusAdapter getFileStatus(String path, URI uri,\n     incrementCounter(Statistic.OBJECTS_QUERY);\n     OFSPath ofsPath = new OFSPath(path);\n     String key = ofsPath.getKeyName();\n-    // getFileStatus is called for root\n+    // path is root\n     if (ofsPath.getVolumeName().isEmpty() &&\n         ofsPath.getBucketName().isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIxNzI5NA=="}, "originalCommit": {"oid": "1d9b2acd2a56c9a9bb6189cfdda895a073c7a0bd"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY4NDI1OQ==", "bodyText": "Done in f003b87", "url": "https://github.com/apache/ozone/pull/547#discussion_r382684259", "createdAt": "2020-02-21T16:38:11Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "diffHunk": "@@ -439,11 +440,15 @@ public FileStatusAdapter getFileStatus(String path, URI uri,\n     incrementCounter(Statistic.OBJECTS_QUERY);\n     OFSPath ofsPath = new OFSPath(path);\n     String key = ofsPath.getKeyName();\n-    // getFileStatus is called for root\n+    // path is root\n     if (ofsPath.getVolumeName().isEmpty() &&\n         ofsPath.getBucketName().isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIxNzI5NA=="}, "originalCommit": {"oid": "1d9b2acd2a56c9a9bb6189cfdda895a073c7a0bd"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjE2ODkyOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxOTo0MjowOFrOFsgtnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNjozODoyMlrOFs9Myw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIxNzYzMQ==", "bodyText": "Same as above. Can we wrap with OFSPath#isVolume?", "url": "https://github.com/apache/ozone/pull/547#discussion_r382217631", "createdAt": "2020-02-20T19:42:08Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "diffHunk": "@@ -439,11 +440,15 @@ public FileStatusAdapter getFileStatus(String path, URI uri,\n     incrementCounter(Statistic.OBJECTS_QUERY);\n     OFSPath ofsPath = new OFSPath(path);\n     String key = ofsPath.getKeyName();\n-    // getFileStatus is called for root\n+    // path is root\n     if (ofsPath.getVolumeName().isEmpty() &&\n         ofsPath.getBucketName().isEmpty()) {\n-      // Generate a FileStatusAdapter for root\n-      return rootFileStatusAdapter();\n+      return getFileStatusAdapterForRoot(uri);\n+    }\n+    // path is a volume\n+    if (ofsPath.getBucketName().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d9b2acd2a56c9a9bb6189cfdda895a073c7a0bd"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY4NDM2Mw==", "bodyText": "Done in f003b87", "url": "https://github.com/apache/ozone/pull/547#discussion_r382684363", "createdAt": "2020-02-21T16:38:22Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "diffHunk": "@@ -439,11 +440,15 @@ public FileStatusAdapter getFileStatus(String path, URI uri,\n     incrementCounter(Statistic.OBJECTS_QUERY);\n     OFSPath ofsPath = new OFSPath(path);\n     String key = ofsPath.getKeyName();\n-    // getFileStatus is called for root\n+    // path is root\n     if (ofsPath.getVolumeName().isEmpty() &&\n         ofsPath.getBucketName().isEmpty()) {\n-      // Generate a FileStatusAdapter for root\n-      return rootFileStatusAdapter();\n+      return getFileStatusAdapterForRoot(uri);\n+    }\n+    // path is a volume\n+    if (ofsPath.getBucketName().isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIxNzYzMQ=="}, "originalCommit": {"oid": "1d9b2acd2a56c9a9bb6189cfdda895a073c7a0bd"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjE3OTQwOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxOTo0NTowMlrOFsgz5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMjoyNjoyN1rOFtyJhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIxOTIzOA==", "bodyText": "Can we have a single static RootFileStatusAdapter for all?", "url": "https://github.com/apache/ozone/pull/547#discussion_r382219238", "createdAt": "2020-02-20T19:45:02Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "diffHunk": "@@ -664,17 +732,73 @@ private FileStatusAdapter toFileStatusAdapter(OzoneFileStatus status) {\n     );\n   }\n \n+  /**\n+   * Generate a FileStatusAdapter for a volume.\n+   * @param ozoneVolume OzoneVolume object\n+   * @param uri Full URI to OFS root.\n+   * @return FileStatusAdapter for a volume.\n+   */\n+  private static FileStatusAdapter getFileStatusAdapterForVolume(\n+      OzoneVolume ozoneVolume, URI uri) {\n+    String pathStr = uri.toString() +\n+        OZONE_URI_DELIMITER + ozoneVolume.getName();\n+    LOG.debug(\"getFileStatusAdapterForVolume(pathStr=\" + pathStr);\n+    Path path = new Path(pathStr);\n+    return new FileStatusAdapter(\n+        0L,\n+        path,\n+        true,\n+        (short)0,\n+        0L,\n+        ozoneVolume.getCreationTime().getEpochSecond() * 1000,\n+        0L,\n+        (short)00755,  // Default directory permission, derive from ACLs later?\n+        ozoneVolume.getOwner(),\n+        ozoneVolume.getAdmin(),  // TODO: Get group of whom?\n+        path\n+    );\n+  }\n+\n+  /**\n+   * Generate a FileStatusAdapter for a bucket.\n+   * @param ozoneBucket OzoneBucket object.\n+   * @param uri Full URI to OFS root.\n+   * @return FileStatusAdapter for a bucket.\n+   */\n+  private static FileStatusAdapter getFileStatusAdapterForBucket(\n+      OzoneBucket ozoneBucket, URI uri, String username) {\n+    String pathStr = uri.toString() +\n+        OZONE_URI_DELIMITER + ozoneBucket.getVolumeName() +\n+        OZONE_URI_DELIMITER + ozoneBucket.getName();\n+    LOG.debug(\"getFileStatusAdapterForBucket(pathStr=\" + pathStr);\n+    Path path = new Path(pathStr);\n+    return new FileStatusAdapter(\n+        0L,\n+        path,\n+        true,\n+        (short)0,\n+        0L,\n+        ozoneBucket.getCreationTime().getEpochSecond() * 1000,\n+        0L,\n+        (short)00755,  // Default directory permission, derive from ACLs later?\n+        username,  // TODO: owner and group.\n+        username,\n+        path\n+    );\n+  }\n+\n   /**\n    * Generate a FileStatusAdapter for OFS root.\n+   * @param uri Full URI to OFS root.\n    * @return FileStatusAdapter for root.\n    */\n-  private static FileStatusAdapter rootFileStatusAdapter() {\n+  private static FileStatusAdapter getFileStatusAdapterForRoot(URI uri) {\n     // Note that most fields are mimicked from HDFS FileStatus for root,\n     //  except modification time, permission, owner and group.\n-    // TODO: Revisit the return value.\n+    Path path = new Path(uri.toString() + OZONE_URI_DELIMITER);\n     return new FileStatusAdapter(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d9b2acd2a56c9a9bb6189cfdda895a073c7a0bd"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY4Nzg1OQ==", "bodyText": "The URI part (ofs://localhost:54607) can differ each time the client application initializes FileSystem. So I'd say we can't have a static RootFileStatusAdapter with the current impl.\nActually, the uri can be different each time getFileStatus is called, so we can't even have a class global variable to hold rootFileStatusAdapter.", "url": "https://github.com/apache/ozone/pull/547#discussion_r382687859", "createdAt": "2020-02-21T16:44:40Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "diffHunk": "@@ -664,17 +732,73 @@ private FileStatusAdapter toFileStatusAdapter(OzoneFileStatus status) {\n     );\n   }\n \n+  /**\n+   * Generate a FileStatusAdapter for a volume.\n+   * @param ozoneVolume OzoneVolume object\n+   * @param uri Full URI to OFS root.\n+   * @return FileStatusAdapter for a volume.\n+   */\n+  private static FileStatusAdapter getFileStatusAdapterForVolume(\n+      OzoneVolume ozoneVolume, URI uri) {\n+    String pathStr = uri.toString() +\n+        OZONE_URI_DELIMITER + ozoneVolume.getName();\n+    LOG.debug(\"getFileStatusAdapterForVolume(pathStr=\" + pathStr);\n+    Path path = new Path(pathStr);\n+    return new FileStatusAdapter(\n+        0L,\n+        path,\n+        true,\n+        (short)0,\n+        0L,\n+        ozoneVolume.getCreationTime().getEpochSecond() * 1000,\n+        0L,\n+        (short)00755,  // Default directory permission, derive from ACLs later?\n+        ozoneVolume.getOwner(),\n+        ozoneVolume.getAdmin(),  // TODO: Get group of whom?\n+        path\n+    );\n+  }\n+\n+  /**\n+   * Generate a FileStatusAdapter for a bucket.\n+   * @param ozoneBucket OzoneBucket object.\n+   * @param uri Full URI to OFS root.\n+   * @return FileStatusAdapter for a bucket.\n+   */\n+  private static FileStatusAdapter getFileStatusAdapterForBucket(\n+      OzoneBucket ozoneBucket, URI uri, String username) {\n+    String pathStr = uri.toString() +\n+        OZONE_URI_DELIMITER + ozoneBucket.getVolumeName() +\n+        OZONE_URI_DELIMITER + ozoneBucket.getName();\n+    LOG.debug(\"getFileStatusAdapterForBucket(pathStr=\" + pathStr);\n+    Path path = new Path(pathStr);\n+    return new FileStatusAdapter(\n+        0L,\n+        path,\n+        true,\n+        (short)0,\n+        0L,\n+        ozoneBucket.getCreationTime().getEpochSecond() * 1000,\n+        0L,\n+        (short)00755,  // Default directory permission, derive from ACLs later?\n+        username,  // TODO: owner and group.\n+        username,\n+        path\n+    );\n+  }\n+\n   /**\n    * Generate a FileStatusAdapter for OFS root.\n+   * @param uri Full URI to OFS root.\n    * @return FileStatusAdapter for root.\n    */\n-  private static FileStatusAdapter rootFileStatusAdapter() {\n+  private static FileStatusAdapter getFileStatusAdapterForRoot(URI uri) {\n     // Note that most fields are mimicked from HDFS FileStatus for root,\n     //  except modification time, permission, owner and group.\n-    // TODO: Revisit the return value.\n+    Path path = new Path(uri.toString() + OZONE_URI_DELIMITER);\n     return new FileStatusAdapter(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIxOTIzOA=="}, "originalCommit": {"oid": "1d9b2acd2a56c9a9bb6189cfdda895a073c7a0bd"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU1MTg3OA==", "bodyText": "Agree.", "url": "https://github.com/apache/ozone/pull/547#discussion_r383551878", "createdAt": "2020-02-24T22:26:27Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "diffHunk": "@@ -664,17 +732,73 @@ private FileStatusAdapter toFileStatusAdapter(OzoneFileStatus status) {\n     );\n   }\n \n+  /**\n+   * Generate a FileStatusAdapter for a volume.\n+   * @param ozoneVolume OzoneVolume object\n+   * @param uri Full URI to OFS root.\n+   * @return FileStatusAdapter for a volume.\n+   */\n+  private static FileStatusAdapter getFileStatusAdapterForVolume(\n+      OzoneVolume ozoneVolume, URI uri) {\n+    String pathStr = uri.toString() +\n+        OZONE_URI_DELIMITER + ozoneVolume.getName();\n+    LOG.debug(\"getFileStatusAdapterForVolume(pathStr=\" + pathStr);\n+    Path path = new Path(pathStr);\n+    return new FileStatusAdapter(\n+        0L,\n+        path,\n+        true,\n+        (short)0,\n+        0L,\n+        ozoneVolume.getCreationTime().getEpochSecond() * 1000,\n+        0L,\n+        (short)00755,  // Default directory permission, derive from ACLs later?\n+        ozoneVolume.getOwner(),\n+        ozoneVolume.getAdmin(),  // TODO: Get group of whom?\n+        path\n+    );\n+  }\n+\n+  /**\n+   * Generate a FileStatusAdapter for a bucket.\n+   * @param ozoneBucket OzoneBucket object.\n+   * @param uri Full URI to OFS root.\n+   * @return FileStatusAdapter for a bucket.\n+   */\n+  private static FileStatusAdapter getFileStatusAdapterForBucket(\n+      OzoneBucket ozoneBucket, URI uri, String username) {\n+    String pathStr = uri.toString() +\n+        OZONE_URI_DELIMITER + ozoneBucket.getVolumeName() +\n+        OZONE_URI_DELIMITER + ozoneBucket.getName();\n+    LOG.debug(\"getFileStatusAdapterForBucket(pathStr=\" + pathStr);\n+    Path path = new Path(pathStr);\n+    return new FileStatusAdapter(\n+        0L,\n+        path,\n+        true,\n+        (short)0,\n+        0L,\n+        ozoneBucket.getCreationTime().getEpochSecond() * 1000,\n+        0L,\n+        (short)00755,  // Default directory permission, derive from ACLs later?\n+        username,  // TODO: owner and group.\n+        username,\n+        path\n+    );\n+  }\n+\n   /**\n    * Generate a FileStatusAdapter for OFS root.\n+   * @param uri Full URI to OFS root.\n    * @return FileStatusAdapter for root.\n    */\n-  private static FileStatusAdapter rootFileStatusAdapter() {\n+  private static FileStatusAdapter getFileStatusAdapterForRoot(URI uri) {\n     // Note that most fields are mimicked from HDFS FileStatus for root,\n     //  except modification time, permission, owner and group.\n-    // TODO: Revisit the return value.\n+    Path path = new Path(uri.toString() + OZONE_URI_DELIMITER);\n     return new FileStatusAdapter(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIxOTIzOA=="}, "originalCommit": {"oid": "1d9b2acd2a56c9a9bb6189cfdda895a073c7a0bd"}, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjE4MTYxOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxOTo0NTo0OVrOFsg1VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNjo1MzozNFrOFs9tOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIxOTYwNQ==", "bodyText": "NIT: can we define as a const?", "url": "https://github.com/apache/ozone/pull/547#discussion_r382219605", "createdAt": "2020-02-20T19:45:49Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "diffHunk": "@@ -664,17 +732,73 @@ private FileStatusAdapter toFileStatusAdapter(OzoneFileStatus status) {\n     );\n   }\n \n+  /**\n+   * Generate a FileStatusAdapter for a volume.\n+   * @param ozoneVolume OzoneVolume object\n+   * @param uri Full URI to OFS root.\n+   * @return FileStatusAdapter for a volume.\n+   */\n+  private static FileStatusAdapter getFileStatusAdapterForVolume(\n+      OzoneVolume ozoneVolume, URI uri) {\n+    String pathStr = uri.toString() +\n+        OZONE_URI_DELIMITER + ozoneVolume.getName();\n+    LOG.debug(\"getFileStatusAdapterForVolume(pathStr=\" + pathStr);\n+    Path path = new Path(pathStr);\n+    return new FileStatusAdapter(\n+        0L,\n+        path,\n+        true,\n+        (short)0,\n+        0L,\n+        ozoneVolume.getCreationTime().getEpochSecond() * 1000,\n+        0L,\n+        (short)00755,  // Default directory permission, derive from ACLs later?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d9b2acd2a56c9a9bb6189cfdda895a073c7a0bd"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY5MjY2Ng==", "bodyText": "Done in b5cc3e4", "url": "https://github.com/apache/ozone/pull/547#discussion_r382692666", "createdAt": "2020-02-21T16:53:34Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "diffHunk": "@@ -664,17 +732,73 @@ private FileStatusAdapter toFileStatusAdapter(OzoneFileStatus status) {\n     );\n   }\n \n+  /**\n+   * Generate a FileStatusAdapter for a volume.\n+   * @param ozoneVolume OzoneVolume object\n+   * @param uri Full URI to OFS root.\n+   * @return FileStatusAdapter for a volume.\n+   */\n+  private static FileStatusAdapter getFileStatusAdapterForVolume(\n+      OzoneVolume ozoneVolume, URI uri) {\n+    String pathStr = uri.toString() +\n+        OZONE_URI_DELIMITER + ozoneVolume.getName();\n+    LOG.debug(\"getFileStatusAdapterForVolume(pathStr=\" + pathStr);\n+    Path path = new Path(pathStr);\n+    return new FileStatusAdapter(\n+        0L,\n+        path,\n+        true,\n+        (short)0,\n+        0L,\n+        ozoneVolume.getCreationTime().getEpochSecond() * 1000,\n+        0L,\n+        (short)00755,  // Default directory permission, derive from ACLs later?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIxOTYwNQ=="}, "originalCommit": {"oid": "1d9b2acd2a56c9a9bb6189cfdda895a073c7a0bd"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjE4NjYyOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxOTo0NzoyMFrOFsg4dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNzowMTo0NVrOFs9-oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIyMDQwNQ==", "bodyText": "Let do this with\nif (LOG.isDebugEnabled()) {\nLOG.debug(\"getFileStatusAdapterForBucket(pathStr={}\", pathStr);\n}", "url": "https://github.com/apache/ozone/pull/547#discussion_r382220405", "createdAt": "2020-02-20T19:47:20Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "diffHunk": "@@ -664,17 +732,73 @@ private FileStatusAdapter toFileStatusAdapter(OzoneFileStatus status) {\n     );\n   }\n \n+  /**\n+   * Generate a FileStatusAdapter for a volume.\n+   * @param ozoneVolume OzoneVolume object\n+   * @param uri Full URI to OFS root.\n+   * @return FileStatusAdapter for a volume.\n+   */\n+  private static FileStatusAdapter getFileStatusAdapterForVolume(\n+      OzoneVolume ozoneVolume, URI uri) {\n+    String pathStr = uri.toString() +\n+        OZONE_URI_DELIMITER + ozoneVolume.getName();\n+    LOG.debug(\"getFileStatusAdapterForVolume(pathStr=\" + pathStr);\n+    Path path = new Path(pathStr);\n+    return new FileStatusAdapter(\n+        0L,\n+        path,\n+        true,\n+        (short)0,\n+        0L,\n+        ozoneVolume.getCreationTime().getEpochSecond() * 1000,\n+        0L,\n+        (short)00755,  // Default directory permission, derive from ACLs later?\n+        ozoneVolume.getOwner(),\n+        ozoneVolume.getAdmin(),  // TODO: Get group of whom?\n+        path\n+    );\n+  }\n+\n+  /**\n+   * Generate a FileStatusAdapter for a bucket.\n+   * @param ozoneBucket OzoneBucket object.\n+   * @param uri Full URI to OFS root.\n+   * @return FileStatusAdapter for a bucket.\n+   */\n+  private static FileStatusAdapter getFileStatusAdapterForBucket(\n+      OzoneBucket ozoneBucket, URI uri, String username) {\n+    String pathStr = uri.toString() +\n+        OZONE_URI_DELIMITER + ozoneBucket.getVolumeName() +\n+        OZONE_URI_DELIMITER + ozoneBucket.getName();\n+    LOG.debug(\"getFileStatusAdapterForBucket(pathStr=\" + pathStr);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d9b2acd2a56c9a9bb6189cfdda895a073c7a0bd"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY5NzEyMA==", "bodyText": "done in 936f874", "url": "https://github.com/apache/ozone/pull/547#discussion_r382697120", "createdAt": "2020-02-21T17:01:45Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "diffHunk": "@@ -664,17 +732,73 @@ private FileStatusAdapter toFileStatusAdapter(OzoneFileStatus status) {\n     );\n   }\n \n+  /**\n+   * Generate a FileStatusAdapter for a volume.\n+   * @param ozoneVolume OzoneVolume object\n+   * @param uri Full URI to OFS root.\n+   * @return FileStatusAdapter for a volume.\n+   */\n+  private static FileStatusAdapter getFileStatusAdapterForVolume(\n+      OzoneVolume ozoneVolume, URI uri) {\n+    String pathStr = uri.toString() +\n+        OZONE_URI_DELIMITER + ozoneVolume.getName();\n+    LOG.debug(\"getFileStatusAdapterForVolume(pathStr=\" + pathStr);\n+    Path path = new Path(pathStr);\n+    return new FileStatusAdapter(\n+        0L,\n+        path,\n+        true,\n+        (short)0,\n+        0L,\n+        ozoneVolume.getCreationTime().getEpochSecond() * 1000,\n+        0L,\n+        (short)00755,  // Default directory permission, derive from ACLs later?\n+        ozoneVolume.getOwner(),\n+        ozoneVolume.getAdmin(),  // TODO: Get group of whom?\n+        path\n+    );\n+  }\n+\n+  /**\n+   * Generate a FileStatusAdapter for a bucket.\n+   * @param ozoneBucket OzoneBucket object.\n+   * @param uri Full URI to OFS root.\n+   * @return FileStatusAdapter for a bucket.\n+   */\n+  private static FileStatusAdapter getFileStatusAdapterForBucket(\n+      OzoneBucket ozoneBucket, URI uri, String username) {\n+    String pathStr = uri.toString() +\n+        OZONE_URI_DELIMITER + ozoneBucket.getVolumeName() +\n+        OZONE_URI_DELIMITER + ozoneBucket.getName();\n+    LOG.debug(\"getFileStatusAdapterForBucket(pathStr=\" + pathStr);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIyMDQwNQ=="}, "originalCommit": {"oid": "1d9b2acd2a56c9a9bb6189cfdda895a073c7a0bd"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjE5NDE2OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxOTo0OTo1MVrOFsg9Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNzowNToxMFrOFs-FOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIyMTYyMw==", "bodyText": "similar to the one below, please add conditional debug output with parameterized log.", "url": "https://github.com/apache/ozone/pull/547#discussion_r382221623", "createdAt": "2020-02-20T19:49:51Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "diffHunk": "@@ -664,17 +732,73 @@ private FileStatusAdapter toFileStatusAdapter(OzoneFileStatus status) {\n     );\n   }\n \n+  /**\n+   * Generate a FileStatusAdapter for a volume.\n+   * @param ozoneVolume OzoneVolume object\n+   * @param uri Full URI to OFS root.\n+   * @return FileStatusAdapter for a volume.\n+   */\n+  private static FileStatusAdapter getFileStatusAdapterForVolume(\n+      OzoneVolume ozoneVolume, URI uri) {\n+    String pathStr = uri.toString() +\n+        OZONE_URI_DELIMITER + ozoneVolume.getName();\n+    LOG.debug(\"getFileStatusAdapterForVolume(pathStr=\" + pathStr);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d9b2acd2a56c9a9bb6189cfdda895a073c7a0bd"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY5ODgwOA==", "bodyText": "done in 3553f63", "url": "https://github.com/apache/ozone/pull/547#discussion_r382698808", "createdAt": "2020-02-21T17:05:10Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "diffHunk": "@@ -664,17 +732,73 @@ private FileStatusAdapter toFileStatusAdapter(OzoneFileStatus status) {\n     );\n   }\n \n+  /**\n+   * Generate a FileStatusAdapter for a volume.\n+   * @param ozoneVolume OzoneVolume object\n+   * @param uri Full URI to OFS root.\n+   * @return FileStatusAdapter for a volume.\n+   */\n+  private static FileStatusAdapter getFileStatusAdapterForVolume(\n+      OzoneVolume ozoneVolume, URI uri) {\n+    String pathStr = uri.toString() +\n+        OZONE_URI_DELIMITER + ozoneVolume.getName();\n+    LOG.debug(\"getFileStatusAdapterForVolume(pathStr=\" + pathStr);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIyMTYyMw=="}, "originalCommit": {"oid": "1d9b2acd2a56c9a9bb6189cfdda895a073c7a0bd"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjIzMDA3OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMDowMTozM1rOFshT4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNzozMjowOFrOFs-3EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIyNzQyNg==", "bodyText": "should we use startBucket as parameter to avoid creating OFSPath unnecessarily?", "url": "https://github.com/apache/ozone/pull/547#discussion_r382227426", "createdAt": "2020-02-20T20:01:33Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "diffHunk": "@@ -486,6 +491,57 @@ public void makeQualified(FileStatus status, URI uri, Path path,\n     return new IteratorAdapter(bucket.listKeys(key));\n   }\n \n+  /**\n+   * Helper for OFS listStatus on root.\n+   */\n+  private List<FileStatusAdapter> listStatusRoot(\n+      boolean recursive, String startPath, long numEntries,\n+      URI uri, Path workingDir, String username) throws IOException {\n+    OFSPath ofsStartPath = new OFSPath(startPath);\n+    // list volumes for user\n+    Iterator<? extends OzoneVolume> iter = objectStore.listVolumesByUser(\n+        username, null, ofsStartPath.getVolumeName());\n+    List<FileStatusAdapter> res = new ArrayList<>();\n+    // TODO: Test continuation\n+    while (iter.hasNext() && res.size() <= numEntries) {\n+      OzoneVolume volume = iter.next();\n+      res.add(getFileStatusAdapterForVolume(volume, uri));\n+      if (recursive) {\n+        String next = volume.getName();\n+        // TODO: Check startPath\n+        res.addAll(listStatus(next, recursive, startPath,\n+            numEntries - res.size(), uri, workingDir, username));\n+      }\n+    }\n+    return res;\n+  }\n+\n+  /**\n+   * Helper for OFS listStatus on a volume.\n+   */\n+  private List<FileStatusAdapter> listStatusVolume(String volumeStr,\n+      boolean recursive, String startPath, long numEntries,\n+      URI uri, Path workingDir, String username) throws IOException {\n+    OFSPath ofsStartPath = new OFSPath(startPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d9b2acd2a56c9a9bb6189cfdda895a073c7a0bd"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIyODczMg==", "bodyText": "I think we can implement this with either next or startPath but not necessarily both.", "url": "https://github.com/apache/ozone/pull/547#discussion_r382228732", "createdAt": "2020-02-20T20:04:20Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "diffHunk": "@@ -486,6 +491,57 @@ public void makeQualified(FileStatus status, URI uri, Path path,\n     return new IteratorAdapter(bucket.listKeys(key));\n   }\n \n+  /**\n+   * Helper for OFS listStatus on root.\n+   */\n+  private List<FileStatusAdapter> listStatusRoot(\n+      boolean recursive, String startPath, long numEntries,\n+      URI uri, Path workingDir, String username) throws IOException {\n+    OFSPath ofsStartPath = new OFSPath(startPath);\n+    // list volumes for user\n+    Iterator<? extends OzoneVolume> iter = objectStore.listVolumesByUser(\n+        username, null, ofsStartPath.getVolumeName());\n+    List<FileStatusAdapter> res = new ArrayList<>();\n+    // TODO: Test continuation\n+    while (iter.hasNext() && res.size() <= numEntries) {\n+      OzoneVolume volume = iter.next();\n+      res.add(getFileStatusAdapterForVolume(volume, uri));\n+      if (recursive) {\n+        String next = volume.getName();\n+        // TODO: Check startPath\n+        res.addAll(listStatus(next, recursive, startPath,\n+            numEntries - res.size(), uri, workingDir, username));\n+      }\n+    }\n+    return res;\n+  }\n+\n+  /**\n+   * Helper for OFS listStatus on a volume.\n+   */\n+  private List<FileStatusAdapter> listStatusVolume(String volumeStr,\n+      boolean recursive, String startPath, long numEntries,\n+      URI uri, Path workingDir, String username) throws IOException {\n+    OFSPath ofsStartPath = new OFSPath(startPath);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIyNzQyNg=="}, "originalCommit": {"oid": "1d9b2acd2a56c9a9bb6189cfdda895a073c7a0bd"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcwMzI2Ng==", "bodyText": "should we use startBucket as parameter to avoid creating OFSPath unnecessarily?\n\nDone in 41c081f", "url": "https://github.com/apache/ozone/pull/547#discussion_r382703266", "createdAt": "2020-02-21T17:14:17Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "diffHunk": "@@ -486,6 +491,57 @@ public void makeQualified(FileStatus status, URI uri, Path path,\n     return new IteratorAdapter(bucket.listKeys(key));\n   }\n \n+  /**\n+   * Helper for OFS listStatus on root.\n+   */\n+  private List<FileStatusAdapter> listStatusRoot(\n+      boolean recursive, String startPath, long numEntries,\n+      URI uri, Path workingDir, String username) throws IOException {\n+    OFSPath ofsStartPath = new OFSPath(startPath);\n+    // list volumes for user\n+    Iterator<? extends OzoneVolume> iter = objectStore.listVolumesByUser(\n+        username, null, ofsStartPath.getVolumeName());\n+    List<FileStatusAdapter> res = new ArrayList<>();\n+    // TODO: Test continuation\n+    while (iter.hasNext() && res.size() <= numEntries) {\n+      OzoneVolume volume = iter.next();\n+      res.add(getFileStatusAdapterForVolume(volume, uri));\n+      if (recursive) {\n+        String next = volume.getName();\n+        // TODO: Check startPath\n+        res.addAll(listStatus(next, recursive, startPath,\n+            numEntries - res.size(), uri, workingDir, username));\n+      }\n+    }\n+    return res;\n+  }\n+\n+  /**\n+   * Helper for OFS listStatus on a volume.\n+   */\n+  private List<FileStatusAdapter> listStatusVolume(String volumeStr,\n+      boolean recursive, String startPath, long numEntries,\n+      URI uri, Path workingDir, String username) throws IOException {\n+    OFSPath ofsStartPath = new OFSPath(startPath);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIyNzQyNg=="}, "originalCommit": {"oid": "1d9b2acd2a56c9a9bb6189cfdda895a073c7a0bd"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcxMTU2OA==", "bodyText": "I think we can implement this with either next or startPath but not necessarily both.\n\nI just realized that the current implementation with both continuation (startPath) and recursion might not work as expected.\ne.g. if such call is made: listStatus(pathStr=\"/\", recursive=true, startPath=\"/volume2/bucket2/dir2\"), the result won't be what we expect.\nActually, as I think again. It should just work. I just need to change listStatusVolume back to startPath. done in f94b95c", "url": "https://github.com/apache/ozone/pull/547#discussion_r382711568", "createdAt": "2020-02-21T17:32:08Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "diffHunk": "@@ -486,6 +491,57 @@ public void makeQualified(FileStatus status, URI uri, Path path,\n     return new IteratorAdapter(bucket.listKeys(key));\n   }\n \n+  /**\n+   * Helper for OFS listStatus on root.\n+   */\n+  private List<FileStatusAdapter> listStatusRoot(\n+      boolean recursive, String startPath, long numEntries,\n+      URI uri, Path workingDir, String username) throws IOException {\n+    OFSPath ofsStartPath = new OFSPath(startPath);\n+    // list volumes for user\n+    Iterator<? extends OzoneVolume> iter = objectStore.listVolumesByUser(\n+        username, null, ofsStartPath.getVolumeName());\n+    List<FileStatusAdapter> res = new ArrayList<>();\n+    // TODO: Test continuation\n+    while (iter.hasNext() && res.size() <= numEntries) {\n+      OzoneVolume volume = iter.next();\n+      res.add(getFileStatusAdapterForVolume(volume, uri));\n+      if (recursive) {\n+        String next = volume.getName();\n+        // TODO: Check startPath\n+        res.addAll(listStatus(next, recursive, startPath,\n+            numEntries - res.size(), uri, workingDir, username));\n+      }\n+    }\n+    return res;\n+  }\n+\n+  /**\n+   * Helper for OFS listStatus on a volume.\n+   */\n+  private List<FileStatusAdapter> listStatusVolume(String volumeStr,\n+      boolean recursive, String startPath, long numEntries,\n+      URI uri, Path workingDir, String username) throws IOException {\n+    OFSPath ofsStartPath = new OFSPath(startPath);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIyNzQyNg=="}, "originalCommit": {"oid": "1d9b2acd2a56c9a9bb6189cfdda895a073c7a0bd"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjIzMTM3OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMDowMTo1OFrOFshUsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNzowNzoyNVrOFs-Jzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIyNzYzNA==", "bodyText": "Can we add OFSPath helpers as suggested above?", "url": "https://github.com/apache/ozone/pull/547#discussion_r382227634", "createdAt": "2020-02-20T20:01:58Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "diffHunk": "@@ -511,10 +567,22 @@ public void makeQualified(FileStatus status, URI uri, Path path,\n \n     incrementCounter(Statistic.OBJECTS_LIST);\n     OFSPath ofsPath = new OFSPath(pathStr);\n-    // TODO: Subject to change in HDDS-2928.\n+\n+    // listStatus root\n+    if (ofsPath.getVolumeName().isEmpty()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d9b2acd2a56c9a9bb6189cfdda895a073c7a0bd"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY5OTk4Mg==", "bodyText": "done in ada1ac4", "url": "https://github.com/apache/ozone/pull/547#discussion_r382699982", "createdAt": "2020-02-21T17:07:25Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "diffHunk": "@@ -511,10 +567,22 @@ public void makeQualified(FileStatus status, URI uri, Path path,\n \n     incrementCounter(Statistic.OBJECTS_LIST);\n     OFSPath ofsPath = new OFSPath(pathStr);\n-    // TODO: Subject to change in HDDS-2928.\n+\n+    // listStatus root\n+    if (ofsPath.getVolumeName().isEmpty()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIyNzYzNA=="}, "originalCommit": {"oid": "1d9b2acd2a56c9a9bb6189cfdda895a073c7a0bd"}, "originalPosition": 92}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 73, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}