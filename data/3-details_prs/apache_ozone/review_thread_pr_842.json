{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1Njc3NjYz", "number": 842, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNTo0MTo0M1rOD004ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMTo0NzoyOFrOD2o2nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzE4OTQ5OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/loadgenerators/LoadExecutors.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNTo0MTo0M1rOGJ9Sgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwOToyNzowM1rOGMBu2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA5NDUzMA==", "bodyText": "If some generator fails to initialize(), should we still consider it in load(long)?  I think it would be more safe to add each generator to a separate list, from which load(long) should choose, only after successful initialization.", "url": "https://github.com/apache/ozone/pull/842#discussion_r413094530", "createdAt": "2020-04-22T15:41:43Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/loadgenerators/LoadExecutors.java", "diffHunk": "@@ -70,15 +73,19 @@ private void load(long runTimeMillis) {\n \n \n   public void startLoad(long time) {\n-    LOG.info(\"Starting {} threads for {}\", numThreads, generator);\n-    try {\n-      generator.initialize();\n-      for (int i = 0; i < numThreads; i++) {\n-        futures.add(CompletableFuture.runAsync(\n-            () -> load(time), executor));\n+    LOG.info(\"Starting {} threads for {} genrators\", numThreads,\n+        generators.size());\n+    for (LoadGenerator gen : generators) {\n+      try {\n+        LOG.info(\"Initializing {} generator\", gen);\n+        gen.initialize();\n+      } catch (Throwable t) {\n+        LOG.error(\"Failed to initialize loadgen:{}\", gen, t);\n       }\n-    } catch (Throwable t) {\n-      LOG.error(\"Failed to initialize loadgen:{}\", generator, t);\n+    }\n+\n+    for (int i = 0; i < numThreads; i++) {\n+      futures.add(CompletableFuture.runAsync(() -> load(time), executor));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "976f181d10c0bf9723909b67a4e635896e2ccdb0"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI2NDQ3NQ==", "bodyText": "done, if the initialization fails. ane exception is thrown to stop the chaos cluster.", "url": "https://github.com/apache/ozone/pull/842#discussion_r415264475", "createdAt": "2020-04-26T09:27:03Z", "author": {"login": "mukul1987"}, "path": "hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/loadgenerators/LoadExecutors.java", "diffHunk": "@@ -70,15 +73,19 @@ private void load(long runTimeMillis) {\n \n \n   public void startLoad(long time) {\n-    LOG.info(\"Starting {} threads for {}\", numThreads, generator);\n-    try {\n-      generator.initialize();\n-      for (int i = 0; i < numThreads; i++) {\n-        futures.add(CompletableFuture.runAsync(\n-            () -> load(time), executor));\n+    LOG.info(\"Starting {} threads for {} genrators\", numThreads,\n+        generators.size());\n+    for (LoadGenerator gen : generators) {\n+      try {\n+        LOG.info(\"Initializing {} generator\", gen);\n+        gen.initialize();\n+      } catch (Throwable t) {\n+        LOG.error(\"Failed to initialize loadgen:{}\", gen, t);\n       }\n-    } catch (Throwable t) {\n-      LOG.error(\"Failed to initialize loadgen:{}\", generator, t);\n+    }\n+\n+    for (int i = 0; i < numThreads; i++) {\n+      futures.add(CompletableFuture.runAsync(() -> load(time), executor));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA5NDUzMA=="}, "originalCommit": {"oid": "976f181d10c0bf9723909b67a4e635896e2ccdb0"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzIwMTcwOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/MiniOzoneLoadGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNTo0Mzo1OFrOGJ9ZoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwOTozMTowMlrOGMBxgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA5NjM1Mg==", "bodyText": "Can you please document the required signature for the constructors of LoadGenerator implementations in the interface?", "url": "https://github.com/apache/ozone/pull/842#discussion_r413096352", "createdAt": "2020-04-22T15:43:58Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/MiniOzoneLoadGenerator.java", "diffHunk": "@@ -44,66 +39,99 @@\n   private static final Logger LOG =\n       LoggerFactory.getLogger(MiniOzoneLoadGenerator.class);\n \n-  private final List<LoadExecutors> loadExecutors;\n+  private final List<LoadGenerator> loadGenerators;\n+  private final LoadExecutors loadExecutor;\n \n   private final OzoneVolume volume;\n   private final OzoneConfiguration conf;\n   private final String omServiceID;\n \n-  MiniOzoneLoadGenerator(OzoneVolume volume, int numClients, int numThreads,\n-      int numBuffers, OzoneConfiguration conf, String omServiceId)\n+  MiniOzoneLoadGenerator(OzoneVolume volume, int numThreads,\n+      int numBuffers, OzoneConfiguration conf, String omServiceId,\n+      List<Class<? extends LoadGenerator>> loadGenratorClazzes)\n       throws Exception {\n     DataBuffer buffer = new DataBuffer(numBuffers);\n-    loadExecutors = new ArrayList<>();\n+    loadGenerators = new ArrayList<>();\n     this.volume = volume;\n     this.conf = conf;\n     this.omServiceID = omServiceId;\n \n-    // Random Load\n-    String mixBucketName = RandomStringUtils.randomAlphabetic(10).toLowerCase();\n-    volume.createBucket(mixBucketName);\n-    List<LoadBucket> ozoneBuckets = new ArrayList<>(numClients);\n-    for (int i = 0; i < numClients; i++) {\n-      ozoneBuckets.add(new LoadBucket(volume.getBucket(mixBucketName),\n-          conf, omServiceId));\n+    for(Class<? extends LoadGenerator> clazz : loadGenratorClazzes) {\n+      addLoads(clazz, buffer);\n     }\n-    RandomLoadGenerator loadGenerator =\n-        new RandomLoadGenerator(buffer, ozoneBuckets);\n-    loadExecutors.add(new LoadExecutors(numThreads, loadGenerator));\n \n-    // Aged Load\n-    addLoads(numThreads,\n-        bucket -> new AgedLoadGenerator(buffer, bucket));\n-\n-    //Filesystem Load\n-    addLoads(numThreads,\n-        bucket -> new FilesystemLoadGenerator(buffer, bucket));\n-\n-    //Repl Load\n-    addLoads(numThreads,\n-        bucket -> new ReadOnlyLoadGenerator(buffer, bucket, 20));\n+    this.loadExecutor = new LoadExecutors(numThreads, loadGenerators);\n   }\n \n-  private void addLoads(int numThreads,\n-                        Function<LoadBucket, LoadGenerator> function)\n-      throws Exception {\n+  private void addLoads(Class<? extends LoadGenerator> clazz,\n+                        DataBuffer buffer) throws Exception {\n     String bucketName = RandomStringUtils.randomAlphabetic(10).toLowerCase();\n     volume.createBucket(bucketName);\n-    LoadBucket bucket = new LoadBucket(volume.getBucket(bucketName), conf,\n-        omServiceID);\n-    LoadGenerator loadGenerator = function.apply(bucket);\n-    loadExecutors.add(new LoadExecutors(numThreads, loadGenerator));\n+    LoadBucket ozoneBucket = new LoadBucket(volume.getBucket(bucketName),\n+        conf, omServiceID);\n+\n+    LoadGenerator loadGenerator = clazz\n+        .getConstructor(DataBuffer.class, LoadBucket.class)\n+        .newInstance(buffer, ozoneBucket);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "976f181d10c0bf9723909b67a4e635896e2ccdb0"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI2NTE1NQ==", "bodyText": "done, great comment :)", "url": "https://github.com/apache/ozone/pull/842#discussion_r415265155", "createdAt": "2020-04-26T09:31:02Z", "author": {"login": "mukul1987"}, "path": "hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/MiniOzoneLoadGenerator.java", "diffHunk": "@@ -44,66 +39,99 @@\n   private static final Logger LOG =\n       LoggerFactory.getLogger(MiniOzoneLoadGenerator.class);\n \n-  private final List<LoadExecutors> loadExecutors;\n+  private final List<LoadGenerator> loadGenerators;\n+  private final LoadExecutors loadExecutor;\n \n   private final OzoneVolume volume;\n   private final OzoneConfiguration conf;\n   private final String omServiceID;\n \n-  MiniOzoneLoadGenerator(OzoneVolume volume, int numClients, int numThreads,\n-      int numBuffers, OzoneConfiguration conf, String omServiceId)\n+  MiniOzoneLoadGenerator(OzoneVolume volume, int numThreads,\n+      int numBuffers, OzoneConfiguration conf, String omServiceId,\n+      List<Class<? extends LoadGenerator>> loadGenratorClazzes)\n       throws Exception {\n     DataBuffer buffer = new DataBuffer(numBuffers);\n-    loadExecutors = new ArrayList<>();\n+    loadGenerators = new ArrayList<>();\n     this.volume = volume;\n     this.conf = conf;\n     this.omServiceID = omServiceId;\n \n-    // Random Load\n-    String mixBucketName = RandomStringUtils.randomAlphabetic(10).toLowerCase();\n-    volume.createBucket(mixBucketName);\n-    List<LoadBucket> ozoneBuckets = new ArrayList<>(numClients);\n-    for (int i = 0; i < numClients; i++) {\n-      ozoneBuckets.add(new LoadBucket(volume.getBucket(mixBucketName),\n-          conf, omServiceId));\n+    for(Class<? extends LoadGenerator> clazz : loadGenratorClazzes) {\n+      addLoads(clazz, buffer);\n     }\n-    RandomLoadGenerator loadGenerator =\n-        new RandomLoadGenerator(buffer, ozoneBuckets);\n-    loadExecutors.add(new LoadExecutors(numThreads, loadGenerator));\n \n-    // Aged Load\n-    addLoads(numThreads,\n-        bucket -> new AgedLoadGenerator(buffer, bucket));\n-\n-    //Filesystem Load\n-    addLoads(numThreads,\n-        bucket -> new FilesystemLoadGenerator(buffer, bucket));\n-\n-    //Repl Load\n-    addLoads(numThreads,\n-        bucket -> new ReadOnlyLoadGenerator(buffer, bucket, 20));\n+    this.loadExecutor = new LoadExecutors(numThreads, loadGenerators);\n   }\n \n-  private void addLoads(int numThreads,\n-                        Function<LoadBucket, LoadGenerator> function)\n-      throws Exception {\n+  private void addLoads(Class<? extends LoadGenerator> clazz,\n+                        DataBuffer buffer) throws Exception {\n     String bucketName = RandomStringUtils.randomAlphabetic(10).toLowerCase();\n     volume.createBucket(bucketName);\n-    LoadBucket bucket = new LoadBucket(volume.getBucket(bucketName), conf,\n-        omServiceID);\n-    LoadGenerator loadGenerator = function.apply(bucket);\n-    loadExecutors.add(new LoadExecutors(numThreads, loadGenerator));\n+    LoadBucket ozoneBucket = new LoadBucket(volume.getBucket(bucketName),\n+        conf, omServiceID);\n+\n+    LoadGenerator loadGenerator = clazz\n+        .getConstructor(DataBuffer.class, LoadBucket.class)\n+        .newInstance(buffer, ozoneBucket);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA5NjM1Mg=="}, "originalCommit": {"oid": "976f181d10c0bf9723909b67a4e635896e2ccdb0"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NjE5MDM3OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/loadgenerators/LoadGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMTo0NzoyOVrOGMe_PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMTo0NzoyOVrOGMe_PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc0MzgwNA==", "bodyText": "This is not a javadoc for keyNameDelimiter.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /**\n          \n          \n            \n              /*", "url": "https://github.com/apache/ozone/pull/842#discussion_r415743804", "createdAt": "2020-04-27T11:47:29Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/loadgenerators/LoadGenerator.java", "diffHunk": "@@ -22,6 +22,16 @@\n  * Interface for load generator.\n  */\n public abstract class LoadGenerator {\n+  /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40262d343758ef970a974b1f7cdd8730c6384415"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4411, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}