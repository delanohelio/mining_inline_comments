{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgwMjQ1ODkx", "number": 1400, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQxNDoyNjozMlrOEgmzRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo1NzoyM1rOEhYBbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNjI1NjA3OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/protocol/OzoneManagerProtocol.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQxNDoyNjozMlrOHNiUwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMjo1MzozMlrOHN-VmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1NTkwNA==", "bodyText": "INVALID_REQUEST is a coarse-grained result code, why not define more understandable code in OMException#ResultCodes for matching current scenario?", "url": "https://github.com/apache/ozone/pull/1400#discussion_r483955904", "createdAt": "2020-09-05T14:26:32Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/protocol/OzoneManagerProtocol.java", "diffHunk": "@@ -310,6 +311,69 @@ OmKeyLocationInfo allocateBlock(OmKeyArgs args, long clientID,\n \n   ServiceInfoEx getServiceInfo() throws IOException;\n \n+  /**\n+   * Initiate metadata upgrade finalization.\n+   * This method when called, initiates finalization of Ozone Manager metadata\n+   * during an upgrade. The status returned contains the status\n+   * - ALREADY_FINALIZED with empty message list when the software layout\n+   *    version and the metadata layout version are equal\n+   * - STARTING_FINALIZATION with empty message list when the finalization\n+   *    has been started successfully\n+   * - If a finalization is already in progress, then the method throws an\n+   *    {@link OMException} with a result code INVALID_REQUEST\n+   *\n+   *\n+   * The leader Ozone Manager initiates finalization of the followers via\n+   * the Raft protocol in other Ozone Managers, and reports progress to the\n+   * client via the {@link #queryUpgradeFinalizationProgress(String, boolean)}\n+   * call.\n+   *\n+   * The follower Ozone Managers reject this request and directs the client to\n+   * the leader.\n+   *\n+   * @param upgradeClientID String identifier of the upgrade finalizer client\n+   * @return the finalization status.\n+   * @throws IOException\n+   *            when finalization is failed, or this Ozone Manager is not the\n+   *                leader.\n+   * @throws OMException\n+   *            when finalization is already in progress.\n+   */\n+  UpgradeFinalizationStatus finalizeUpgrade(\n+      String upgradeClientID\n+  ) throws IOException;\n+\n+  /**\n+   * Queries the current status of finalization.\n+   * This method when called, returns the status messages from the finalization\n+   * progress, if any. The status returned is\n+   * - FINALIZATION_IN_PROGRESS, and the messages since the last query if the\n+   *    finalization is still running\n+   * - FINALIZATION_DONE with a message list containing the messages since\n+   *    the last query, if the finalization ended but the messages were not\n+   *    yet emitted to the client.\n+   * - ALREADY_FINALIZED with an empty message list otherwise\n+   * - If finalization is not in progress, but software layout version and\n+   *    metadata layout version are different, the method will throw an\n+   *    {@link OMException} with a result code INVALID_REQUEST", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e78f97ada0d09d79382d404a41da208c3c76044e"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQxNDg3Mg==", "bodyText": "Yepp, this is an initial choice to use something that is already there, to test out the client, this should be changed with HDDS-4172 when the server side implementation is happening. I thought it is easier to add server side error message together with the real server side logic as there might be multiple values turning out to be required for clear error messages, but I can change this here if needed.", "url": "https://github.com/apache/ozone/pull/1400#discussion_r484414872", "createdAt": "2020-09-07T12:53:32Z", "author": {"login": "fapifta"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/protocol/OzoneManagerProtocol.java", "diffHunk": "@@ -310,6 +311,69 @@ OmKeyLocationInfo allocateBlock(OmKeyArgs args, long clientID,\n \n   ServiceInfoEx getServiceInfo() throws IOException;\n \n+  /**\n+   * Initiate metadata upgrade finalization.\n+   * This method when called, initiates finalization of Ozone Manager metadata\n+   * during an upgrade. The status returned contains the status\n+   * - ALREADY_FINALIZED with empty message list when the software layout\n+   *    version and the metadata layout version are equal\n+   * - STARTING_FINALIZATION with empty message list when the finalization\n+   *    has been started successfully\n+   * - If a finalization is already in progress, then the method throws an\n+   *    {@link OMException} with a result code INVALID_REQUEST\n+   *\n+   *\n+   * The leader Ozone Manager initiates finalization of the followers via\n+   * the Raft protocol in other Ozone Managers, and reports progress to the\n+   * client via the {@link #queryUpgradeFinalizationProgress(String, boolean)}\n+   * call.\n+   *\n+   * The follower Ozone Managers reject this request and directs the client to\n+   * the leader.\n+   *\n+   * @param upgradeClientID String identifier of the upgrade finalizer client\n+   * @return the finalization status.\n+   * @throws IOException\n+   *            when finalization is failed, or this Ozone Manager is not the\n+   *                leader.\n+   * @throws OMException\n+   *            when finalization is already in progress.\n+   */\n+  UpgradeFinalizationStatus finalizeUpgrade(\n+      String upgradeClientID\n+  ) throws IOException;\n+\n+  /**\n+   * Queries the current status of finalization.\n+   * This method when called, returns the status messages from the finalization\n+   * progress, if any. The status returned is\n+   * - FINALIZATION_IN_PROGRESS, and the messages since the last query if the\n+   *    finalization is still running\n+   * - FINALIZATION_DONE with a message list containing the messages since\n+   *    the last query, if the finalization ended but the messages were not\n+   *    yet emitted to the client.\n+   * - ALREADY_FINALIZED with an empty message list otherwise\n+   * - If finalization is not in progress, but software layout version and\n+   *    metadata layout version are different, the method will throw an\n+   *    {@link OMException} with a result code INVALID_REQUEST", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1NTkwNA=="}, "originalCommit": {"oid": "e78f97ada0d09d79382d404a41da208c3c76044e"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNjI2MTY5OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/interface-client/src/main/proto/OmClientProtocol.proto", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQxNDozNToxNFrOHNiXUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNDozNTowMVrOHOBmOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1NjU2Mw==", "bodyText": "Two comments for above status defined:\n\nWould be better rename FINALIZATION_REQUIRED to FINALIZATION_NOT_STARTED?\nJust from the status name, I don't see obvious difference between ALREADY_FINALIZED and FINALIZATION_DONE and I notice that ALREADY_FINALIZED is not set anywhere.", "url": "https://github.com/apache/ozone/pull/1400#discussion_r483956563", "createdAt": "2020-09-05T14:35:14Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/interface-client/src/main/proto/OmClientProtocol.proto", "diffHunk": "@@ -1003,6 +1009,36 @@ message DBUpdatesResponse {\n     repeated bytes data = 2;\n }\n \n+\n+message UpgradeFinalizationStatus {\n+  enum Status {\n+    ALREADY_FINALIZED = 1;\n+    STARTING_FINALIZATION = 2;\n+    FINALIZATION_IN_PROGRESS = 3;\n+    FINALIZATION_DONE = 4;\n+    FINALIZATION_REQUIRED = 5;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e78f97ada0d09d79382d404a41da208c3c76044e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQxMzM3Nw==", "bodyText": "There are a few different states here that we need to handle and signal.\n\nWhen Ozone Manager starts with an MLV < SLV that is the FINALIZATION_REQUIRED state, where we know that the software was updated and was not finalized yet.\nWhen Ozone Manager starts with an MLV = SLV that is the state when we are ALREADY_FINALIZED, this is not set so far, as the server side code is there in this patch to be able to demo and test the client functionality.\nFrom ALREADY_FINALIZED, there should be no way out until the MLV = SLV is true, and that can only be changed normally during a restart if software is updated, and SLV is increasing. (MLV can be manipulated on the disk as well, but that does not considered as normal.)\nThere is a chance that MLV >= SLV in which case Ozone Manager should not start until we do not support downgrade after finalization, and tbh it does not really makes sense to support downgrade after finalizing metadata changes, as that easily can become an impossible scenario especially during runtime.\n\nFrom FINALIZATION_REQUIRED, there are one valid state change, STARTING_FINALIZATION, from which after sending the response, the OM should immediately switch forward to FINALIZATION_IN_PROGRESS.\nWhen finalization is finished, then the state shoudl be FINALIZATION_DONE. One might argue this is the same as ALREADY_FINALIZED, but there is a slight difference here. In FINALIZATION_DONE state there might still be messages to be emitted to the monitoring client, while when ALREADY_FINALIZED, the progress request is also invalid.\nDuring the implementation of HDDS-4172 this should be cleaned up much more, and when the last message is emitted then status should be switched to ALREADY_FINALIZED making subsequent progress monitoring requests to result in proper status, it was not really a consideration for the server side of things in this patch which is just there to see how the communication happens.\nOne more thing you may notice, there is no error status here. The reason is that at this stage, we plan to go with the simplest solution first, and commit the finalization work into the raft log in one step. Which means if it fails, it throws an exception, and MLV should not change as that is the final step. So when there is an error, next time the OM comes up, a new finalization attempt can be started.\nThere are a lot of ideas how to separate finalization into more steps, but there are certain problems that has to be solved there. I will also post a proposal about this later this week, describing why we choose the single transaction finalization approach first and how we can evolve it to be more system and developer friendly.\nAlso when both sides of the system is ready, I plan to add a detailed documentation on the different states to preserve this knowledge for the future as the last step, as there are still may experimenting is going on to explore how this is best done.\nLet me know if this makes naming more clear and reasonable.", "url": "https://github.com/apache/ozone/pull/1400#discussion_r484413377", "createdAt": "2020-09-07T12:50:34Z", "author": {"login": "fapifta"}, "path": "hadoop-ozone/interface-client/src/main/proto/OmClientProtocol.proto", "diffHunk": "@@ -1003,6 +1009,36 @@ message DBUpdatesResponse {\n     repeated bytes data = 2;\n }\n \n+\n+message UpgradeFinalizationStatus {\n+  enum Status {\n+    ALREADY_FINALIZED = 1;\n+    STARTING_FINALIZATION = 2;\n+    FINALIZATION_IN_PROGRESS = 3;\n+    FINALIZATION_DONE = 4;\n+    FINALIZATION_REQUIRED = 5;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1NjU2Mw=="}, "originalCommit": {"oid": "e78f97ada0d09d79382d404a41da208c3c76044e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ2ODI4Mg==", "bodyText": "Comments makes sense to me.", "url": "https://github.com/apache/ozone/pull/1400#discussion_r484468282", "createdAt": "2020-09-07T14:35:01Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/interface-client/src/main/proto/OmClientProtocol.proto", "diffHunk": "@@ -1003,6 +1009,36 @@ message DBUpdatesResponse {\n     repeated bytes data = 2;\n }\n \n+\n+message UpgradeFinalizationStatus {\n+  enum Status {\n+    ALREADY_FINALIZED = 1;\n+    STARTING_FINALIZATION = 2;\n+    FINALIZATION_IN_PROGRESS = 3;\n+    FINALIZATION_DONE = 4;\n+    FINALIZATION_REQUIRED = 5;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1NjU2Mw=="}, "originalCommit": {"oid": "e78f97ada0d09d79382d404a41da208c3c76044e"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNjI2MjU1OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQxNDozNjo0OVrOHNiXuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNDozNToxN1rOHOBmtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1NjY2Nw==", "bodyText": "As I commented, FINALIZATION_REQUIRED and INVALID_REQUEST could use a better more understandable name, : ).", "url": "https://github.com/apache/ozone/pull/1400#discussion_r483956667", "createdAt": "2020-09-05T14:36:49Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -2613,6 +2615,73 @@ public ServiceInfoEx getServiceInfo() throws IOException {\n     return new ServiceInfoEx(getServiceList(), caCertPem);\n   }\n \n+  private final List<String> finalizationMsgs = new ArrayList<>();\n+  private UpgradeFinalizationStatus.Status finalizationStatus =\n+      UpgradeFinalizationStatus.Status.FINALIZATION_REQUIRED;\n+\n+  @Override\n+  public UpgradeFinalizationStatus finalizeUpgrade(String upgradeClientID)\n+      throws IOException {\n+    if (!finalizationStatus\n+        .equals(UpgradeFinalizationStatus.Status.FINALIZATION_REQUIRED)){\n+      throw new OMException(\"Finalization is not needed.\", INVALID_REQUEST);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e78f97ada0d09d79382d404a41da208c3c76044e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQxNjI3OQ==", "bodyText": "As written to the previous comments, this part of the code will be changed with the server side logic implemented where we are still experimenting with a few things. But yes error messages has to be better, though states might remain as they are just handled fully as described in the comment for the CientProtocol.proto", "url": "https://github.com/apache/ozone/pull/1400#discussion_r484416279", "createdAt": "2020-09-07T12:56:10Z", "author": {"login": "fapifta"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -2613,6 +2615,73 @@ public ServiceInfoEx getServiceInfo() throws IOException {\n     return new ServiceInfoEx(getServiceList(), caCertPem);\n   }\n \n+  private final List<String> finalizationMsgs = new ArrayList<>();\n+  private UpgradeFinalizationStatus.Status finalizationStatus =\n+      UpgradeFinalizationStatus.Status.FINALIZATION_REQUIRED;\n+\n+  @Override\n+  public UpgradeFinalizationStatus finalizeUpgrade(String upgradeClientID)\n+      throws IOException {\n+    if (!finalizationStatus\n+        .equals(UpgradeFinalizationStatus.Status.FINALIZATION_REQUIRED)){\n+      throw new OMException(\"Finalization is not needed.\", INVALID_REQUEST);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1NjY2Nw=="}, "originalCommit": {"oid": "e78f97ada0d09d79382d404a41da208c3c76044e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ2ODQwNg==", "bodyText": "Comments makes sense to me.", "url": "https://github.com/apache/ozone/pull/1400#discussion_r484468406", "createdAt": "2020-09-07T14:35:17Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -2613,6 +2615,73 @@ public ServiceInfoEx getServiceInfo() throws IOException {\n     return new ServiceInfoEx(getServiceList(), caCertPem);\n   }\n \n+  private final List<String> finalizationMsgs = new ArrayList<>();\n+  private UpgradeFinalizationStatus.Status finalizationStatus =\n+      UpgradeFinalizationStatus.Status.FINALIZATION_REQUIRED;\n+\n+  @Override\n+  public UpgradeFinalizationStatus finalizeUpgrade(String upgradeClientID)\n+      throws IOException {\n+    if (!finalizationStatus\n+        .equals(UpgradeFinalizationStatus.Status.FINALIZATION_REQUIRED)){\n+      throw new OMException(\"Finalization is not needed.\", INVALID_REQUEST);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1NjY2Nw=="}, "originalCommit": {"oid": "e78f97ada0d09d79382d404a41da208c3c76044e"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNjI2MzYyOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQxNDozODo0NlrOHNiYRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMzowOToyMVrOHN-0nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1NjgwNg==", "bodyText": "finalizeUpgrade -> FinalizeUpgrade", "url": "https://github.com/apache/ozone/pull/1400#discussion_r483956806", "createdAt": "2020-09-05T14:38:46Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -2613,6 +2615,73 @@ public ServiceInfoEx getServiceInfo() throws IOException {\n     return new ServiceInfoEx(getServiceList(), caCertPem);\n   }\n \n+  private final List<String> finalizationMsgs = new ArrayList<>();\n+  private UpgradeFinalizationStatus.Status finalizationStatus =\n+      UpgradeFinalizationStatus.Status.FINALIZATION_REQUIRED;\n+\n+  @Override\n+  public UpgradeFinalizationStatus finalizeUpgrade(String upgradeClientID)\n+      throws IOException {\n+    if (!finalizationStatus\n+        .equals(UpgradeFinalizationStatus.Status.FINALIZATION_REQUIRED)){\n+      throw new OMException(\"Finalization is not needed.\", INVALID_REQUEST);\n+    }\n+    finalizationStatus = UpgradeFinalizationStatus.Status.STARTING_FINALIZATION;\n+    UpgradeFinalizationStatus status = UpgradeFinalizationStatus.newBuilder()\n+        .setStatus(finalizationStatus)\n+        .build();\n+    LOG.info(\"finalizeUpgrade initiated by client: {}.\", upgradeClientID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e78f97ada0d09d79382d404a41da208c3c76044e"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQyMjgxNQ==", "bodyText": "thank you for spotting this, I am fixing it in the follow up commit I am preparing shortly.", "url": "https://github.com/apache/ozone/pull/1400#discussion_r484422815", "createdAt": "2020-09-07T13:09:21Z", "author": {"login": "fapifta"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -2613,6 +2615,73 @@ public ServiceInfoEx getServiceInfo() throws IOException {\n     return new ServiceInfoEx(getServiceList(), caCertPem);\n   }\n \n+  private final List<String> finalizationMsgs = new ArrayList<>();\n+  private UpgradeFinalizationStatus.Status finalizationStatus =\n+      UpgradeFinalizationStatus.Status.FINALIZATION_REQUIRED;\n+\n+  @Override\n+  public UpgradeFinalizationStatus finalizeUpgrade(String upgradeClientID)\n+      throws IOException {\n+    if (!finalizationStatus\n+        .equals(UpgradeFinalizationStatus.Status.FINALIZATION_REQUIRED)){\n+      throw new OMException(\"Finalization is not needed.\", INVALID_REQUEST);\n+    }\n+    finalizationStatus = UpgradeFinalizationStatus.Status.STARTING_FINALIZATION;\n+    UpgradeFinalizationStatus status = UpgradeFinalizationStatus.newBuilder()\n+        .setStatus(finalizationStatus)\n+        .build();\n+    LOG.info(\"finalizeUpgrade initiated by client: {}.\", upgradeClientID);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1NjgwNg=="}, "originalCommit": {"oid": "e78f97ada0d09d79382d404a41da208c3c76044e"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNjI2NTIwOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQxNDo0MTowNVrOHNiY_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNDozNzowMlrOHOBp_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1Njk4OQ==", "bodyText": "force parameter is not actually used here, this parameter is related to the client takeover behavior.", "url": "https://github.com/apache/ozone/pull/1400#discussion_r483956989", "createdAt": "2020-09-05T14:41:05Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -2613,6 +2615,73 @@ public ServiceInfoEx getServiceInfo() throws IOException {\n     return new ServiceInfoEx(getServiceList(), caCertPem);\n   }\n \n+  private final List<String> finalizationMsgs = new ArrayList<>();\n+  private UpgradeFinalizationStatus.Status finalizationStatus =\n+      UpgradeFinalizationStatus.Status.FINALIZATION_REQUIRED;\n+\n+  @Override\n+  public UpgradeFinalizationStatus finalizeUpgrade(String upgradeClientID)\n+      throws IOException {\n+    if (!finalizationStatus\n+        .equals(UpgradeFinalizationStatus.Status.FINALIZATION_REQUIRED)){\n+      throw new OMException(\"Finalization is not needed.\", INVALID_REQUEST);\n+    }\n+    finalizationStatus = UpgradeFinalizationStatus.Status.STARTING_FINALIZATION;\n+    UpgradeFinalizationStatus status = UpgradeFinalizationStatus.newBuilder()\n+        .setStatus(finalizationStatus)\n+        .build();\n+    LOG.info(\"finalizeUpgrade initiated by client: {}.\", upgradeClientID);\n+    if (isLeader()) {\n+      finalizationMsgs.add(\"Finalization started.\");\n+      finalizationStatus =\n+          UpgradeFinalizationStatus.Status.FINALIZATION_IN_PROGRESS;\n+\n+      new Thread(() -> {\n+        LOG.info(\"Finalization thread started.\");\n+        int i = 0;\n+        Random random = new Random(0xafaf);\n+        while (i < 50) {\n+          int rand = random.nextInt(Math.min(10, 50 - i)) + 1;\n+          synchronized (finalizationMsgs) {\n+            LOG.info(\"Emitting {} messages\", rand);\n+            for (int j = 0; j < rand; j++) {\n+              LOG.info(\"Upgrade MSG: {} - added.\", \"Message \" + i + \".\");\n+              finalizationMsgs.add(\"Message \" + i + \".\");\n+              i++;\n+            }\n+          }\n+          try {\n+            int sleep = random.nextInt(1200);\n+            LOG.info(\"Sleeping {}ms before emit messages again.\", sleep);\n+            Thread.sleep(sleep);\n+          } catch (InterruptedException e) {\n+            LOG.info(\"Finalization thread interrupted.\", e);\n+            return;\n+          }\n+        }\n+        LOG.info(\"Finalization done.\");\n+        finalizationStatus = UpgradeFinalizationStatus.Status.FINALIZATION_DONE;\n+      }, \"Finalization-Thread\").start();\n+    }\n+    return status;\n+  }\n+\n+  @Override\n+  public UpgradeFinalizationStatus queryUpgradeFinalizationProgress(\n+      String upgradeClientID, boolean force", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e78f97ada0d09d79382d404a41da208c3c76044e"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQyMjUzNQ==", "bodyText": "In the PR that is forming for HDDS-4172 (the server side implementation), the parameter should be used to validate if we are getting the progress monitoring request from the same client, and error out if we do not.\nBut in the demo code, I haven't spent time on this part.\nOn the other hand as from the client side this has changed to be the -takeover parameter, I am renaming the parameter name to takeover here and in proto as well.", "url": "https://github.com/apache/ozone/pull/1400#discussion_r484422535", "createdAt": "2020-09-07T13:08:49Z", "author": {"login": "fapifta"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -2613,6 +2615,73 @@ public ServiceInfoEx getServiceInfo() throws IOException {\n     return new ServiceInfoEx(getServiceList(), caCertPem);\n   }\n \n+  private final List<String> finalizationMsgs = new ArrayList<>();\n+  private UpgradeFinalizationStatus.Status finalizationStatus =\n+      UpgradeFinalizationStatus.Status.FINALIZATION_REQUIRED;\n+\n+  @Override\n+  public UpgradeFinalizationStatus finalizeUpgrade(String upgradeClientID)\n+      throws IOException {\n+    if (!finalizationStatus\n+        .equals(UpgradeFinalizationStatus.Status.FINALIZATION_REQUIRED)){\n+      throw new OMException(\"Finalization is not needed.\", INVALID_REQUEST);\n+    }\n+    finalizationStatus = UpgradeFinalizationStatus.Status.STARTING_FINALIZATION;\n+    UpgradeFinalizationStatus status = UpgradeFinalizationStatus.newBuilder()\n+        .setStatus(finalizationStatus)\n+        .build();\n+    LOG.info(\"finalizeUpgrade initiated by client: {}.\", upgradeClientID);\n+    if (isLeader()) {\n+      finalizationMsgs.add(\"Finalization started.\");\n+      finalizationStatus =\n+          UpgradeFinalizationStatus.Status.FINALIZATION_IN_PROGRESS;\n+\n+      new Thread(() -> {\n+        LOG.info(\"Finalization thread started.\");\n+        int i = 0;\n+        Random random = new Random(0xafaf);\n+        while (i < 50) {\n+          int rand = random.nextInt(Math.min(10, 50 - i)) + 1;\n+          synchronized (finalizationMsgs) {\n+            LOG.info(\"Emitting {} messages\", rand);\n+            for (int j = 0; j < rand; j++) {\n+              LOG.info(\"Upgrade MSG: {} - added.\", \"Message \" + i + \".\");\n+              finalizationMsgs.add(\"Message \" + i + \".\");\n+              i++;\n+            }\n+          }\n+          try {\n+            int sleep = random.nextInt(1200);\n+            LOG.info(\"Sleeping {}ms before emit messages again.\", sleep);\n+            Thread.sleep(sleep);\n+          } catch (InterruptedException e) {\n+            LOG.info(\"Finalization thread interrupted.\", e);\n+            return;\n+          }\n+        }\n+        LOG.info(\"Finalization done.\");\n+        finalizationStatus = UpgradeFinalizationStatus.Status.FINALIZATION_DONE;\n+      }, \"Finalization-Thread\").start();\n+    }\n+    return status;\n+  }\n+\n+  @Override\n+  public UpgradeFinalizationStatus queryUpgradeFinalizationProgress(\n+      String upgradeClientID, boolean force", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1Njk4OQ=="}, "originalCommit": {"oid": "e78f97ada0d09d79382d404a41da208c3c76044e"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ2OTI0Nw==", "bodyText": "I have seen that force has been renamed to -takeover. I will look into server side implementation in HDDS-4172 once you attach the new PR there.", "url": "https://github.com/apache/ozone/pull/1400#discussion_r484469247", "createdAt": "2020-09-07T14:37:02Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -2613,6 +2615,73 @@ public ServiceInfoEx getServiceInfo() throws IOException {\n     return new ServiceInfoEx(getServiceList(), caCertPem);\n   }\n \n+  private final List<String> finalizationMsgs = new ArrayList<>();\n+  private UpgradeFinalizationStatus.Status finalizationStatus =\n+      UpgradeFinalizationStatus.Status.FINALIZATION_REQUIRED;\n+\n+  @Override\n+  public UpgradeFinalizationStatus finalizeUpgrade(String upgradeClientID)\n+      throws IOException {\n+    if (!finalizationStatus\n+        .equals(UpgradeFinalizationStatus.Status.FINALIZATION_REQUIRED)){\n+      throw new OMException(\"Finalization is not needed.\", INVALID_REQUEST);\n+    }\n+    finalizationStatus = UpgradeFinalizationStatus.Status.STARTING_FINALIZATION;\n+    UpgradeFinalizationStatus status = UpgradeFinalizationStatus.newBuilder()\n+        .setStatus(finalizationStatus)\n+        .build();\n+    LOG.info(\"finalizeUpgrade initiated by client: {}.\", upgradeClientID);\n+    if (isLeader()) {\n+      finalizationMsgs.add(\"Finalization started.\");\n+      finalizationStatus =\n+          UpgradeFinalizationStatus.Status.FINALIZATION_IN_PROGRESS;\n+\n+      new Thread(() -> {\n+        LOG.info(\"Finalization thread started.\");\n+        int i = 0;\n+        Random random = new Random(0xafaf);\n+        while (i < 50) {\n+          int rand = random.nextInt(Math.min(10, 50 - i)) + 1;\n+          synchronized (finalizationMsgs) {\n+            LOG.info(\"Emitting {} messages\", rand);\n+            for (int j = 0; j < rand; j++) {\n+              LOG.info(\"Upgrade MSG: {} - added.\", \"Message \" + i + \".\");\n+              finalizationMsgs.add(\"Message \" + i + \".\");\n+              i++;\n+            }\n+          }\n+          try {\n+            int sleep = random.nextInt(1200);\n+            LOG.info(\"Sleeping {}ms before emit messages again.\", sleep);\n+            Thread.sleep(sleep);\n+          } catch (InterruptedException e) {\n+            LOG.info(\"Finalization thread interrupted.\", e);\n+            return;\n+          }\n+        }\n+        LOG.info(\"Finalization done.\");\n+        finalizationStatus = UpgradeFinalizationStatus.Status.FINALIZATION_DONE;\n+      }, \"Finalization-Thread\").start();\n+    }\n+    return status;\n+  }\n+\n+  @Override\n+  public UpgradeFinalizationStatus queryUpgradeFinalizationProgress(\n+      String upgradeClientID, boolean force", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1Njk4OQ=="}, "originalCommit": {"oid": "e78f97ada0d09d79382d404a41da208c3c76044e"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNjI2NjgzOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/admin/om/FinalizeUpgradeSubCommand.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQxNDo0Mzo1NlrOHNiZwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNDozOTo1M1rOHOBviA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1NzE4NQ==", "bodyText": "Sometimes users just want to query immediate upgrade status and don't want to wait and monitor finalization finished. Can we add one additionally option that we can skip monitorAndWaitFinalization?", "url": "https://github.com/apache/ozone/pull/1400#discussion_r483957185", "createdAt": "2020-09-05T14:43:56Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/admin/om/FinalizeUpgradeSubCommand.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.hadoop.ozone.admin.om;\n+\n+import org.apache.hadoop.hdds.cli.HddsVersionProvider;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.om.protocol.OzoneManagerProtocol;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.UpgradeFinalizationStatus;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.util.UUID;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.INVALID_REQUEST;\n+\n+/**\n+ * Handler of ozone admin om finalizeUpgrade command.\n+ */\n+@CommandLine.Command(\n+    name = \"finalizeupgrade\",\n+    description = \"Finalizes Ozone Manager's metadata changes and enables new \"\n+        + \"features after a software upgrade.\\n\"\n+        + \"It is possible to specify the service ID for an HA environment, \"\n+        + \"or the Ozone manager host in a non-HA environment, if none provided \"\n+        + \"the default from configuration is being used if not ambiguous.\",\n+    mixinStandardHelpOptions = true,\n+    versionProvider = HddsVersionProvider.class\n+)\n+public class FinalizeUpgradeSubCommand implements Callable<Void> {\n+\n+  @CommandLine.ParentCommand\n+  private OMAdmin parent;\n+\n+  @CommandLine.Option(\n+      names = {\"-id\", \"--service-id\"},\n+      description = \"Ozone Manager Service ID\"\n+  )\n+  private String omServiceId;\n+\n+  @CommandLine.Option(\n+      names = {\"-host\", \"--service-host\"},\n+      description = \"Ozone Manager Host\"\n+  )\n+  private String omHost;\n+\n+  @CommandLine.Option(\n+      names = {\"--takeover\"},\n+      description = \"Forces takeover of monitoring from an other client, if \"\n+          + \"finalization has already been started and did not finished yet.\"\n+  )\n+  private boolean force;\n+\n+  @Override\n+  public Void call() throws Exception {\n+    boolean forceHA = false;\n+    OzoneManagerProtocol client =\n+        parent.createOmClient(omServiceId, omHost, forceHA);\n+    String upgradeClientID = \"Upgrade-Client-\" + UUID.randomUUID().toString();\n+    try {\n+      UpgradeFinalizationStatus status =\n+          client.finalizeUpgrade(upgradeClientID);\n+      if (isFinalized(status)){\n+        System.out.println(\"Upgrade has already been finalized.\");\n+        emitExitMsg();\n+        return null;\n+      } else if (!isStarting(status)){\n+        System.err.println(\"Invalid response from Ozone Manager.\");\n+        System.err.println(\n+            \"Current finalization status is: \" + status.getStatus()\n+        );\n+        throw new IOException(\"Exiting...\");\n+      }\n+    } catch (OMException e) {\n+      handleInvalidRequestAfterInitiatingFinalization(e);\n+    }\n+    monitorAndWaitFinalization(client, upgradeClientID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e78f97ada0d09d79382d404a41da208c3c76044e"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQxODk0Ng==", "bodyText": "There is a plan to expose the current status via JMX(HDDS-4142), would that be a sufficient way to provide this functionality?\nIf JMX is not enough to expose a queryable state, this might come in as an improvement for the client side. I am happy to implement it here but I would get back to this after the core logic is working in a separate JIRA if you don't mind, let me know if that works for you, and I will file the JIRA.", "url": "https://github.com/apache/ozone/pull/1400#discussion_r484418946", "createdAt": "2020-09-07T13:01:23Z", "author": {"login": "fapifta"}, "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/admin/om/FinalizeUpgradeSubCommand.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.hadoop.ozone.admin.om;\n+\n+import org.apache.hadoop.hdds.cli.HddsVersionProvider;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.om.protocol.OzoneManagerProtocol;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.UpgradeFinalizationStatus;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.util.UUID;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.INVALID_REQUEST;\n+\n+/**\n+ * Handler of ozone admin om finalizeUpgrade command.\n+ */\n+@CommandLine.Command(\n+    name = \"finalizeupgrade\",\n+    description = \"Finalizes Ozone Manager's metadata changes and enables new \"\n+        + \"features after a software upgrade.\\n\"\n+        + \"It is possible to specify the service ID for an HA environment, \"\n+        + \"or the Ozone manager host in a non-HA environment, if none provided \"\n+        + \"the default from configuration is being used if not ambiguous.\",\n+    mixinStandardHelpOptions = true,\n+    versionProvider = HddsVersionProvider.class\n+)\n+public class FinalizeUpgradeSubCommand implements Callable<Void> {\n+\n+  @CommandLine.ParentCommand\n+  private OMAdmin parent;\n+\n+  @CommandLine.Option(\n+      names = {\"-id\", \"--service-id\"},\n+      description = \"Ozone Manager Service ID\"\n+  )\n+  private String omServiceId;\n+\n+  @CommandLine.Option(\n+      names = {\"-host\", \"--service-host\"},\n+      description = \"Ozone Manager Host\"\n+  )\n+  private String omHost;\n+\n+  @CommandLine.Option(\n+      names = {\"--takeover\"},\n+      description = \"Forces takeover of monitoring from an other client, if \"\n+          + \"finalization has already been started and did not finished yet.\"\n+  )\n+  private boolean force;\n+\n+  @Override\n+  public Void call() throws Exception {\n+    boolean forceHA = false;\n+    OzoneManagerProtocol client =\n+        parent.createOmClient(omServiceId, omHost, forceHA);\n+    String upgradeClientID = \"Upgrade-Client-\" + UUID.randomUUID().toString();\n+    try {\n+      UpgradeFinalizationStatus status =\n+          client.finalizeUpgrade(upgradeClientID);\n+      if (isFinalized(status)){\n+        System.out.println(\"Upgrade has already been finalized.\");\n+        emitExitMsg();\n+        return null;\n+      } else if (!isStarting(status)){\n+        System.err.println(\"Invalid response from Ozone Manager.\");\n+        System.err.println(\n+            \"Current finalization status is: \" + status.getStatus()\n+        );\n+        throw new IOException(\"Exiting...\");\n+      }\n+    } catch (OMException e) {\n+      handleInvalidRequestAfterInitiatingFinalization(e);\n+    }\n+    monitorAndWaitFinalization(client, upgradeClientID);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1NzE4NQ=="}, "originalCommit": {"oid": "e78f97ada0d09d79382d404a41da208c3c76044e"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ3MDY2NA==", "bodyText": "Yes, of course, we can address above suggestion later. That's just an improvement.", "url": "https://github.com/apache/ozone/pull/1400#discussion_r484470664", "createdAt": "2020-09-07T14:39:53Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/admin/om/FinalizeUpgradeSubCommand.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.hadoop.ozone.admin.om;\n+\n+import org.apache.hadoop.hdds.cli.HddsVersionProvider;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.om.protocol.OzoneManagerProtocol;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.UpgradeFinalizationStatus;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.util.UUID;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.INVALID_REQUEST;\n+\n+/**\n+ * Handler of ozone admin om finalizeUpgrade command.\n+ */\n+@CommandLine.Command(\n+    name = \"finalizeupgrade\",\n+    description = \"Finalizes Ozone Manager's metadata changes and enables new \"\n+        + \"features after a software upgrade.\\n\"\n+        + \"It is possible to specify the service ID for an HA environment, \"\n+        + \"or the Ozone manager host in a non-HA environment, if none provided \"\n+        + \"the default from configuration is being used if not ambiguous.\",\n+    mixinStandardHelpOptions = true,\n+    versionProvider = HddsVersionProvider.class\n+)\n+public class FinalizeUpgradeSubCommand implements Callable<Void> {\n+\n+  @CommandLine.ParentCommand\n+  private OMAdmin parent;\n+\n+  @CommandLine.Option(\n+      names = {\"-id\", \"--service-id\"},\n+      description = \"Ozone Manager Service ID\"\n+  )\n+  private String omServiceId;\n+\n+  @CommandLine.Option(\n+      names = {\"-host\", \"--service-host\"},\n+      description = \"Ozone Manager Host\"\n+  )\n+  private String omHost;\n+\n+  @CommandLine.Option(\n+      names = {\"--takeover\"},\n+      description = \"Forces takeover of monitoring from an other client, if \"\n+          + \"finalization has already been started and did not finished yet.\"\n+  )\n+  private boolean force;\n+\n+  @Override\n+  public Void call() throws Exception {\n+    boolean forceHA = false;\n+    OzoneManagerProtocol client =\n+        parent.createOmClient(omServiceId, omHost, forceHA);\n+    String upgradeClientID = \"Upgrade-Client-\" + UUID.randomUUID().toString();\n+    try {\n+      UpgradeFinalizationStatus status =\n+          client.finalizeUpgrade(upgradeClientID);\n+      if (isFinalized(status)){\n+        System.out.println(\"Upgrade has already been finalized.\");\n+        emitExitMsg();\n+        return null;\n+      } else if (!isStarting(status)){\n+        System.err.println(\"Invalid response from Ozone Manager.\");\n+        System.err.println(\n+            \"Current finalization status is: \" + status.getStatus()\n+        );\n+        throw new IOException(\"Exiting...\");\n+      }\n+    } catch (OMException e) {\n+      handleInvalidRequestAfterInitiatingFinalization(e);\n+    }\n+    monitorAndWaitFinalization(client, upgradeClientID);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1NzE4NQ=="}, "originalCommit": {"oid": "e78f97ada0d09d79382d404a41da208c3c76044e"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDMxNTg4OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/upgrade/OMFinalizeUpgradeProgressResponse.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo1NjowNVrOHOqBUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOTowMToxM1rOHPVoiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEzMDU3OQ==", "bodyText": "Can we confirm that this will not have a \"side effect\"? Is there a better way to do this, like passing an empty array and handling it as a special case in test?", "url": "https://github.com/apache/ozone/pull/1400#discussion_r485130579", "createdAt": "2020-09-08T18:56:05Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/upgrade/OMFinalizeUpgradeProgressResponse.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.response.upgrade;\n+\n+import org.apache.hadoop.hdds.utils.db.BatchOperation;\n+import org.apache.hadoop.ozone.om.OMMetadataManager;\n+import org.apache.hadoop.ozone.om.OmMetadataManagerImpl;\n+import org.apache.hadoop.ozone.om.response.CleanupTableInfo;\n+import org.apache.hadoop.ozone.om.response.OMClientResponse;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Response for finalizeUpgradeProgress request.\n+ */\n+// yepp this will not be a write request, adding a table here to the annotation\n+// just to pass tests related to this annotation.\n+@CleanupTableInfo(cleanupTables = { OmMetadataManagerImpl.USER_TABLE })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8721dfcee1713fcbd0300b9e30cab20310022563"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxOTg0Mg==", "bodyText": "I already started to work on the server side, one of the first steps is to make this reguest a read request and delete this class, as read requests are handled in an other way. I can push that commit to this PR or it will be addressed in the PR coming for HDDS-4172.", "url": "https://github.com/apache/ozone/pull/1400#discussion_r485819842", "createdAt": "2020-09-09T18:14:27Z", "author": {"login": "fapifta"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/upgrade/OMFinalizeUpgradeProgressResponse.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.response.upgrade;\n+\n+import org.apache.hadoop.hdds.utils.db.BatchOperation;\n+import org.apache.hadoop.ozone.om.OMMetadataManager;\n+import org.apache.hadoop.ozone.om.OmMetadataManagerImpl;\n+import org.apache.hadoop.ozone.om.response.CleanupTableInfo;\n+import org.apache.hadoop.ozone.om.response.OMClientResponse;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Response for finalizeUpgradeProgress request.\n+ */\n+// yepp this will not be a write request, adding a table here to the annotation\n+// just to pass tests related to this annotation.\n+@CleanupTableInfo(cleanupTables = { OmMetadataManagerImpl.USER_TABLE })", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEzMDU3OQ=="}, "originalCommit": {"oid": "8721dfcee1713fcbd0300b9e30cab20310022563"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0NTEyOQ==", "bodyText": "@fapifta I am Ok with handling this in a follow up patch.", "url": "https://github.com/apache/ozone/pull/1400#discussion_r485845129", "createdAt": "2020-09-09T19:01:13Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/upgrade/OMFinalizeUpgradeProgressResponse.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.response.upgrade;\n+\n+import org.apache.hadoop.hdds.utils.db.BatchOperation;\n+import org.apache.hadoop.ozone.om.OMMetadataManager;\n+import org.apache.hadoop.ozone.om.OmMetadataManagerImpl;\n+import org.apache.hadoop.ozone.om.response.CleanupTableInfo;\n+import org.apache.hadoop.ozone.om.response.OMClientResponse;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Response for finalizeUpgradeProgress request.\n+ */\n+// yepp this will not be a write request, adding a table here to the annotation\n+// just to pass tests related to this annotation.\n+@CleanupTableInfo(cleanupTables = { OmMetadataManagerImpl.USER_TABLE })", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEzMDU3OQ=="}, "originalCommit": {"oid": "8721dfcee1713fcbd0300b9e30cab20310022563"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDMyMDQ3OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/upgrade/OMFinalizeUpgradeProgressRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo1NzoyM1rOHOqEEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo1NzoyM1rOHOqEEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEzMTI4Mg==", "bodyText": "As discussed offline, this can be a READ request. I am ok with doing it in the next patch (HDDS-4172).", "url": "https://github.com/apache/ozone/pull/1400#discussion_r485131282", "createdAt": "2020-09-08T18:57:23Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/upgrade/OMFinalizeUpgradeProgressRequest.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.request.upgrade;\n+\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.ratis.utils.OzoneManagerDoubleBufferHelper;\n+import org.apache.hadoop.ozone.om.request.OMClientRequest;\n+import org.apache.hadoop.ozone.om.request.util.OmResponseUtil;\n+import org.apache.hadoop.ozone.om.response.OMClientResponse;\n+import org.apache.hadoop.ozone.om.response.upgrade.OMFinalizeUpgradeProgressResponse;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.FinalizeUpgradeProgressRequest;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.FinalizeUpgradeProgressResponse;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMRequest;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.UpgradeFinalizationStatus;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Handles finalizeUpgradeProgress request that serves to query the status\n+ * of the async finalization progress.\n+ */\n+public class OMFinalizeUpgradeProgressRequest extends OMClientRequest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8721dfcee1713fcbd0300b9e30cab20310022563"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4863, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}