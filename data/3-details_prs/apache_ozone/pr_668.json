{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3MDgyNDMy", "number": 668, "title": "HDDS-3139. Pipeline placement should max out pipeline usage", "bodyText": "What changes were proposed in this pull request?\nPipeline placement should select lowest load datanode as anchor.\nWhat is the link to the Apache JIRA\nhttps://issues.apache.org/jira/browse/HDDS-3139\nHow was this patch tested?\nUT", "createdAt": "2020-03-12T07:25:14Z", "url": "https://github.com/apache/ozone/pull/668", "merged": true, "mergeCommit": {"oid": "fac26e134b6ec6c0cc85e1dc867d66aea82c0b8a"}, "closed": true, "closedAt": "2020-04-21T15:15:33Z", "author": {"login": "timmylicheng"}, "timelineItems": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcM2j_5ABqjMxMjE2ODI0OTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcZyWGhgBqjMyNTU4NzY1NjM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4c5525671c3849cccddf4d061f9b3324d631bd0d", "author": {"user": {"login": "timmylicheng", "name": "Li Cheng"}}, "url": "https://github.com/apache/ozone/commit/4c5525671c3849cccddf4d061f9b3324d631bd0d", "committedDate": "2020-03-12T07:12:30Z", "message": "HDDS-3139 Pipeline placement should select lowest load datanode as anchor."}, "afterCommit": {"oid": "0350a9a17be64b08cdf0eb438811c60d82e68eef", "author": {"user": {"login": "timmylicheng", "name": "Li Cheng"}}, "url": "https://github.com/apache/ozone/commit/0350a9a17be64b08cdf0eb438811c60d82e68eef", "committedDate": "2020-03-12T07:27:06Z", "message": "HDDS-3139 Pipeline placement should select lowest load datanode as anchor."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0350a9a17be64b08cdf0eb438811c60d82e68eef", "author": {"user": {"login": "timmylicheng", "name": "Li Cheng"}}, "url": "https://github.com/apache/ozone/commit/0350a9a17be64b08cdf0eb438811c60d82e68eef", "committedDate": "2020-03-12T07:27:06Z", "message": "HDDS-3139 Pipeline placement should select lowest load datanode as anchor."}, "afterCommit": {"oid": "29d74c3bf283e7166f37d1e0b2739742c0dc5a04", "author": {"user": {"login": "timmylicheng", "name": "Li Cheng"}}, "url": "https://github.com/apache/ozone/commit/29d74c3bf283e7166f37d1e0b2739742c0dc5a04", "committedDate": "2020-03-12T07:29:14Z", "message": "HDDS-3139 Pipeline placement should select lowest load datanode as anchor."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "29d74c3bf283e7166f37d1e0b2739742c0dc5a04", "author": {"user": {"login": "timmylicheng", "name": "Li Cheng"}}, "url": "https://github.com/apache/ozone/commit/29d74c3bf283e7166f37d1e0b2739742c0dc5a04", "committedDate": "2020-03-12T07:29:14Z", "message": "HDDS-3139 Pipeline placement should select lowest load datanode as anchor."}, "afterCommit": {"oid": "e8506dc31a14b2938a5bbdb8dcabd62a1f9546e4", "author": {"user": {"login": "timmylicheng", "name": "Li Cheng"}}, "url": "https://github.com/apache/ozone/commit/e8506dc31a14b2938a5bbdb8dcabd62a1f9546e4", "committedDate": "2020-03-12T09:54:07Z", "message": "HDDS-3139 Pipeline placement should select lowest load datanode as anchor."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NDEzNjY5", "url": "https://github.com/apache/ozone/pull/668#pullrequestreview-378413669", "createdAt": "2020-03-20T11:42:52Z", "commit": {"oid": "e8506dc31a14b2938a5bbdb8dcabd62a1f9546e4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMTo0Mjo1MlrOF5QfEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMTo0Mjo1MlrOF5QfEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU4MzI0OA==", "bodyText": "Could this be simplified to just nodes.get(0)? In the else branch we already know the list is not empty, so I think we can just pick the first node in the list safely.", "url": "https://github.com/apache/ozone/pull/668#discussion_r395583248", "createdAt": "2020-03-20T11:42:52Z", "author": {"login": "sodonnel"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelinePlacementPolicy.java", "diffHunk": "@@ -315,6 +314,50 @@ DatanodeDetails fallBackPickNodes(\n     return results;\n   }\n \n+  private DatanodeDetails randomPick(List<DatanodeDetails> healthyNodes) {\n+    DatanodeDetails datanodeDetails;\n+    int firstNodeNdx = getRand().nextInt(healthyNodes.size());\n+    int secondNodeNdx = getRand().nextInt(healthyNodes.size());\n+\n+    // There is a possibility that both numbers will be same.\n+    // if that is so, we just return the node.\n+    if (firstNodeNdx == secondNodeNdx) {\n+      datanodeDetails = healthyNodes.get(firstNodeNdx);\n+    } else {\n+      DatanodeDetails firstNodeDetails = healthyNodes.get(firstNodeNdx);\n+      DatanodeDetails secondNodeDetails = healthyNodes.get(secondNodeNdx);\n+      datanodeDetails = nodeManager.getPipelinesCount(firstNodeDetails)\n+          >= nodeManager.getPipelinesCount(secondNodeDetails)\n+          ? secondNodeDetails : firstNodeDetails;\n+    }\n+    return datanodeDetails;\n+  }\n+\n+  private List<DatanodeDetails> getLowerLoadNodes(\n+      List<DatanodeDetails> nodes, int num) {\n+    int maxPipelineUsage = nodes.size() * heavyNodeCriteria /\n+        HddsProtos.ReplicationFactor.THREE.getNumber();\n+    return nodes.stream()\n+        // Skip the nodes which exceeds the load limit.\n+        .filter(p -> nodeManager.getPipelinesCount(p) < num - maxPipelineUsage)\n+        .collect(Collectors.toList());\n+  }\n+\n+  private DatanodeDetails lowerLoadPick(List<DatanodeDetails> healthyNodes) {\n+    int curPipelineCounts =  stateManager\n+        .getPipelines(HddsProtos.ReplicationType.RATIS).size();\n+    DatanodeDetails datanodeDetails;\n+    List<DatanodeDetails> nodes = getLowerLoadNodes(\n+        healthyNodes, curPipelineCounts);\n+    if (nodes.isEmpty()) {\n+      // random pick node if nodes load is at same level.\n+      datanodeDetails = randomPick(healthyNodes);\n+    } else {\n+      datanodeDetails = nodes.stream().findFirst().get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8506dc31a14b2938a5bbdb8dcabd62a1f9546e4"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NDE1OTA1", "url": "https://github.com/apache/ozone/pull/668#pullrequestreview-378415905", "createdAt": "2020-03-20T11:47:04Z", "commit": {"oid": "e8506dc31a14b2938a5bbdb8dcabd62a1f9546e4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMTo0NzowNVrOF5QllA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMTo0NzowNVrOF5QllA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU4NDkxNg==", "bodyText": "I think a Java doc would be useful for this method to explain how it works. It seems to pick two random nodes and then return the one with the less load - is that correct?", "url": "https://github.com/apache/ozone/pull/668#discussion_r395584916", "createdAt": "2020-03-20T11:47:05Z", "author": {"login": "sodonnel"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelinePlacementPolicy.java", "diffHunk": "@@ -315,6 +314,50 @@ DatanodeDetails fallBackPickNodes(\n     return results;\n   }\n \n+  private DatanodeDetails randomPick(List<DatanodeDetails> healthyNodes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8506dc31a14b2938a5bbdb8dcabd62a1f9546e4"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NDUyNjgy", "url": "https://github.com/apache/ozone/pull/668#pullrequestreview-378452682", "createdAt": "2020-03-20T12:48:55Z", "commit": {"oid": "e8506dc31a14b2938a5bbdb8dcabd62a1f9546e4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjo0ODo1NVrOF5SVXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjo0ODo1NVrOF5SVXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYxMzUzMg==", "bodyText": "I think there is a bug here. I put some debug in and ran the test you added as part of this change, and this method always returned an empty list.\nmaxPipelineUsage starts at 13, so we have:\n\"0 < 3 - 13\" -> \"0 < -10 \" -> false and all the nodes are filtered out.\n\nShould this be:\n .filter(p -> nodeManager.getPipelinesCount(p) < maxPipelineUsage - num)", "url": "https://github.com/apache/ozone/pull/668#discussion_r395613532", "createdAt": "2020-03-20T12:48:55Z", "author": {"login": "sodonnel"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelinePlacementPolicy.java", "diffHunk": "@@ -315,6 +314,50 @@ DatanodeDetails fallBackPickNodes(\n     return results;\n   }\n \n+  private DatanodeDetails randomPick(List<DatanodeDetails> healthyNodes) {\n+    DatanodeDetails datanodeDetails;\n+    int firstNodeNdx = getRand().nextInt(healthyNodes.size());\n+    int secondNodeNdx = getRand().nextInt(healthyNodes.size());\n+\n+    // There is a possibility that both numbers will be same.\n+    // if that is so, we just return the node.\n+    if (firstNodeNdx == secondNodeNdx) {\n+      datanodeDetails = healthyNodes.get(firstNodeNdx);\n+    } else {\n+      DatanodeDetails firstNodeDetails = healthyNodes.get(firstNodeNdx);\n+      DatanodeDetails secondNodeDetails = healthyNodes.get(secondNodeNdx);\n+      datanodeDetails = nodeManager.getPipelinesCount(firstNodeDetails)\n+          >= nodeManager.getPipelinesCount(secondNodeDetails)\n+          ? secondNodeDetails : firstNodeDetails;\n+    }\n+    return datanodeDetails;\n+  }\n+\n+  private List<DatanodeDetails> getLowerLoadNodes(\n+      List<DatanodeDetails> nodes, int num) {\n+    int maxPipelineUsage = nodes.size() * heavyNodeCriteria /\n+        HddsProtos.ReplicationFactor.THREE.getNumber();\n+    return nodes.stream()\n+        // Skip the nodes which exceeds the load limit.\n+        .filter(p -> nodeManager.getPipelinesCount(p) < num - maxPipelineUsage)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8506dc31a14b2938a5bbdb8dcabd62a1f9546e4"}, "originalPosition": 37}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a7729cbb9c559f53fa73a2aff6c9719ba88be855", "author": {"user": {"login": "timmylicheng", "name": "Li Cheng"}}, "url": "https://github.com/apache/ozone/commit/a7729cbb9c559f53fa73a2aff6c9719ba88be855", "committedDate": "2020-03-25T13:35:27Z", "message": "Add java doc."}, "afterCommit": {"oid": "a3171b9a7d62e9925d683eadcfc2dc3039a613ac", "author": {"user": {"login": "timmylicheng", "name": "Li Cheng"}}, "url": "https://github.com/apache/ozone/commit/a3171b9a7d62e9925d683eadcfc2dc3039a613ac", "committedDate": "2020-03-26T06:32:26Z", "message": "Add java doc."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a3171b9a7d62e9925d683eadcfc2dc3039a613ac", "author": {"user": {"login": "timmylicheng", "name": "Li Cheng"}}, "url": "https://github.com/apache/ozone/commit/a3171b9a7d62e9925d683eadcfc2dc3039a613ac", "committedDate": "2020-03-26T06:32:26Z", "message": "Add java doc."}, "afterCommit": {"oid": "95848da894d7be3996ba51e282c43e833c1d55a0", "author": {"user": {"login": "timmylicheng", "name": "Li Cheng"}}, "url": "https://github.com/apache/ozone/commit/95848da894d7be3996ba51e282c43e833c1d55a0", "committedDate": "2020-03-26T11:30:11Z", "message": "Add java doc."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "95848da894d7be3996ba51e282c43e833c1d55a0", "author": {"user": {"login": "timmylicheng", "name": "Li Cheng"}}, "url": "https://github.com/apache/ozone/commit/95848da894d7be3996ba51e282c43e833c1d55a0", "committedDate": "2020-03-26T11:30:11Z", "message": "Add java doc."}, "afterCommit": {"oid": "201869a7c92dd05f6b1d84675abc0a1ae0696819", "author": {"user": {"login": "timmylicheng", "name": "Li Cheng"}}, "url": "https://github.com/apache/ozone/commit/201869a7c92dd05f6b1d84675abc0a1ae0696819", "committedDate": "2020-03-27T02:39:07Z", "message": "Add java doc."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "201869a7c92dd05f6b1d84675abc0a1ae0696819", "author": {"user": {"login": "timmylicheng", "name": "Li Cheng"}}, "url": "https://github.com/apache/ozone/commit/201869a7c92dd05f6b1d84675abc0a1ae0696819", "committedDate": "2020-03-27T02:39:07Z", "message": "Add java doc."}, "afterCommit": {"oid": "d766d7fa7331dbf93595bf1083404302a76bfae4", "author": {"user": {"login": "timmylicheng", "name": "Li Cheng"}}, "url": "https://github.com/apache/ozone/commit/d766d7fa7331dbf93595bf1083404302a76bfae4", "committedDate": "2020-03-27T08:16:36Z", "message": "Add java doc."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d766d7fa7331dbf93595bf1083404302a76bfae4", "author": {"user": {"login": "timmylicheng", "name": "Li Cheng"}}, "url": "https://github.com/apache/ozone/commit/d766d7fa7331dbf93595bf1083404302a76bfae4", "committedDate": "2020-03-27T08:16:36Z", "message": "Add java doc."}, "afterCommit": {"oid": "201869a7c92dd05f6b1d84675abc0a1ae0696819", "author": {"user": {"login": "timmylicheng", "name": "Li Cheng"}}, "url": "https://github.com/apache/ozone/commit/201869a7c92dd05f6b1d84675abc0a1ae0696819", "committedDate": "2020-03-27T02:39:07Z", "message": "Add java doc."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzODQ0OTcy", "url": "https://github.com/apache/ozone/pull/668#pullrequestreview-383844972", "createdAt": "2020-03-30T13:20:22Z", "commit": {"oid": "201869a7c92dd05f6b1d84675abc0a1ae0696819"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMzoyMDoyMlrOF9pVLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMzoyMDoyMlrOF9pVLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE4NDYyMg==", "bodyText": "I am not sure if this calculation is correct. The reason is that the healthy node list is already filtered to include only nodes with fewer than heavyNodeCritera pipelines in filterViableNodes(). Therefore the size of the list passed into this method gets smaller as the nodes are used up and eventually it stops returning any nodes, even though there are nodes valid to return. From some debug messages I added:\n2020-03-30 14:18:31,682 INFO  pipeline.PipelinePlacementPolicy (PipelinePlacementPolicy.java:chooseDatanodes(202)) - There is no topology\n2020-03-30 14:18:31,682 INFO  pipeline.PipelinePlacementPolicy (PipelinePlacementPolicy.java:chooseNode(391)) - In chooseNode\n2020-03-30 14:18:31,682 INFO  pipeline.PipelinePlacementPolicy (PipelinePlacementPolicy.java:getLowerLoadNodes(351)) - Max pipeline usage is: 8\n2020-03-30 14:18:31,682 INFO  pipeline.PipelinePlacementPolicy (PipelinePlacementPolicy.java:lowerLoadPick(368)) - getLowerLoadNodes() returned empty list\n2020-03-30 14:18:31,682 INFO  pipeline.PipelinePlacementPolicy (PipelinePlacementPolicy.java:chooseNode(391)) - In chooseNode\n2020-03-30 14:18:31,682 INFO  pipeline.PipelinePlacementPolicy (PipelinePlacementPolicy.java:getLowerLoadNodes(351)) - Max pipeline usage is: 6\n2020-03-30 14:18:31,682 INFO  pipeline.PipelinePlacementPolicy (PipelinePlacementPolicy.java:lowerLoadPick(368)) - getLowerLoadNodes() returned empty list\n2020-03-30 14:18:31,682 INFO  pipeline.PipelinePlacementPolicy (PipelinePlacementPolicy.java:chooseNode(391)) - In chooseNode\n2020-03-30 14:18:31,683 INFO  pipeline.PipelinePlacementPolicy (PipelinePlacementPolicy.java:getLowerLoadNodes(351)) - Max pipeline usage is: 5\n2020-03-30 14:18:31,683 INFO  pipeline.PipelinePlacementPolicy (PipelinePlacementPolicy.java:lowerLoadPick(368)) - getLowerLoadNodes() returned empty list\n2020-03-30 14:18:31,683 INFO  pipeline.PipelineStateManager (PipelineStateManager.java:addPipeline(54)) - Created pipeline Pipeline[ Id: 3da2deda-7839-4e5c-88e0-a613729b99fd, Nodes: 0cbe69da-7ef6-43ff-a11a-7ba716ec7c9c{ip: 242.96.90.116, host: localhost-242.96.90.116, networkLocation: /default-rack, certSerialId: null}b4d70058-fb84-410a-8ca8-cc4e8e944fae{ip: 28.158.147.87, host: localhost-28.158.147.87, networkLocation: /default-rack, certSerialId: null}03846f48-f6e5-4dba-97b2-5ab8a7be1564{ip: 128.200.5.118, host: localhost-128.200.5.118, networkLocation: /default-rack, certSerialId: null}, Type:RATIS, Factor:THREE, State:ALLOCATED, leaderId:null, CreationTimestamp2020-03-30T13:18:31.683Z]\n2020-03-30 14:18:31,683 INFO  pipeline.TestPipelinePlacementPolicy (TestPipelinePlacementPolicy.java:testPickLowestLoadAnchor(112)) - Pipeline count for this node is 5\n2020-03-30 14:18:31,683 INFO  pipeline.TestPipelinePlacementPolicy (TestPipelinePlacementPolicy.java:testPickLowestLoadAnchor(112)) - Pipeline count for this node is 5\n2020-03-30 14:18:31,683 INFO  pipeline.TestPipelinePlacementPolicy (TestPipelinePlacementPolicy.java:testPickLowestLoadAnchor(112)) - Pipeline count for this node is 5\n2020-03-30 14:18:31,683 INFO  pipeline.TestPipelinePlacementPolicy (TestPipelinePlacementPolicy.java:testPickLowestLoadAnchor(112)) - Pipeline count for this node is 3\n2020-03-30 14:18:31,683 INFO  pipeline.TestPipelinePlacementPolicy (TestPipelinePlacementPolicy.java:testPickLowestLoadAnchor(112)) - Pipeline count for this node is 2\n2020-03-30 14:18:31,683 INFO  pipeline.TestPipelinePlacementPolicy (TestPipelinePlacementPolicy.java:testPickLowestLoadAnchor(112)) - Pipeline count for this node is 2\n2020-03-30 14:18:31,683 INFO  pipeline.TestPipelinePlacementPolicy (TestPipelinePlacementPolicy.java:testPickLowestLoadAnchor(112)) - Pipeline count for this node is 3\n2020-03-30 14:18:31,684 INFO  pipeline.TestPipelinePlacementPolicy (TestPipelinePlacementPolicy.java:testPickLowestLoadAnchor(112)) - Pipeline count for this node is 2\n\nIf the nodes are filtered by load count in filterViableNodes, do we actually need this getLowerLoadNodes method?", "url": "https://github.com/apache/ozone/pull/668#discussion_r400184622", "createdAt": "2020-03-30T13:20:22Z", "author": {"login": "sodonnel"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelinePlacementPolicy.java", "diffHunk": "@@ -316,36 +315,75 @@ DatanodeDetails fallBackPickNodes(\n   }\n \n   /**\n-   * Find a node from the healthy list and return it after removing it from the\n-   * list that we are operating on.\n-   *\n-   * @param healthyNodes - Set of healthy nodes we can choose from.\n-   * @return chosen datanodDetails\n+   * Random pick two nodes and compare with the pipeline load.\n+   * Return the node with lower pipeline load.\n+   * @param healthyNodes healthy nodes\n+   * @return node\n    */\n-  @Override\n-  public DatanodeDetails chooseNode(\n-      List<DatanodeDetails> healthyNodes) {\n-    if (healthyNodes == null || healthyNodes.isEmpty()) {\n-      return null;\n-    }\n+  private DatanodeDetails randomPick(List<DatanodeDetails> healthyNodes) {\n+    DatanodeDetails datanodeDetails;\n     int firstNodeNdx = getRand().nextInt(healthyNodes.size());\n     int secondNodeNdx = getRand().nextInt(healthyNodes.size());\n \n-    DatanodeDetails datanodeDetails;\n     // There is a possibility that both numbers will be same.\n     // if that is so, we just return the node.\n     if (firstNodeNdx == secondNodeNdx) {\n       datanodeDetails = healthyNodes.get(firstNodeNdx);\n     } else {\n       DatanodeDetails firstNodeDetails = healthyNodes.get(firstNodeNdx);\n       DatanodeDetails secondNodeDetails = healthyNodes.get(secondNodeNdx);\n-      SCMNodeMetric firstNodeMetric =\n-          nodeManager.getNodeStat(firstNodeDetails);\n-      SCMNodeMetric secondNodeMetric =\n-          nodeManager.getNodeStat(secondNodeDetails);\n-      datanodeDetails = firstNodeMetric.isGreater(secondNodeMetric.get())\n-          ? firstNodeDetails : secondNodeDetails;\n+      datanodeDetails = nodeManager.getPipelinesCount(firstNodeDetails)\n+          >= nodeManager.getPipelinesCount(secondNodeDetails)\n+          ? secondNodeDetails : firstNodeDetails;\n     }\n+    return datanodeDetails;\n+  }\n+\n+  /**\n+   * Get a list of nodes with lower load than max pipeline number.\n+   */\n+  private List<DatanodeDetails> getLowerLoadNodes(\n+      List<DatanodeDetails> nodes, int num) {\n+    int maxPipelineUsage = nodes.size() * heavyNodeCriteria /", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "201869a7c92dd05f6b1d84675abc0a1ae0696819"}, "originalPosition": 59}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "201869a7c92dd05f6b1d84675abc0a1ae0696819", "author": {"user": {"login": "timmylicheng", "name": "Li Cheng"}}, "url": "https://github.com/apache/ozone/commit/201869a7c92dd05f6b1d84675abc0a1ae0696819", "committedDate": "2020-03-27T02:39:07Z", "message": "Add java doc."}, "afterCommit": {"oid": "b84e494d023903ae4df27a33035dbca86010fd39", "author": {"user": {"login": "timmylicheng", "name": "Li Cheng"}}, "url": "https://github.com/apache/ozone/commit/b84e494d023903ae4df27a33035dbca86010fd39", "committedDate": "2020-03-31T08:09:57Z", "message": "Add higher load node range for picking node based on topology."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b84e494d023903ae4df27a33035dbca86010fd39", "author": {"user": {"login": "timmylicheng", "name": "Li Cheng"}}, "url": "https://github.com/apache/ozone/commit/b84e494d023903ae4df27a33035dbca86010fd39", "committedDate": "2020-03-31T08:09:57Z", "message": "Add higher load node range for picking node based on topology."}, "afterCommit": {"oid": "e476e8080630e7082d9f8dc551cab0b6e4842289", "author": {"user": {"login": "timmylicheng", "name": "Li Cheng"}}, "url": "https://github.com/apache/ozone/commit/e476e8080630e7082d9f8dc551cab0b6e4842289", "committedDate": "2020-03-31T09:00:47Z", "message": "Add higher load node range for picking node based on topology."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c4e2eb79d269a26a6fd7cd35473dbcd0d885e088", "author": {"user": {"login": "timmylicheng", "name": "Li Cheng"}}, "url": "https://github.com/apache/ozone/commit/c4e2eb79d269a26a6fd7cd35473dbcd0d885e088", "committedDate": "2020-04-10T08:01:57Z", "message": "Sort datanode with pipeline for average allocation."}, "afterCommit": {"oid": "7dbf0d60767aa6a59c25f67b4a4e70788868e7be", "author": {"user": {"login": "timmylicheng", "name": "Li Cheng"}}, "url": "https://github.com/apache/ozone/commit/7dbf0d60767aa6a59c25f67b4a4e70788868e7be", "committedDate": "2020-04-13T11:42:33Z", "message": "Sort datanode with pipeline for average allocation."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7dbf0d60767aa6a59c25f67b4a4e70788868e7be", "author": {"user": {"login": "timmylicheng", "name": "Li Cheng"}}, "url": "https://github.com/apache/ozone/commit/7dbf0d60767aa6a59c25f67b4a4e70788868e7be", "committedDate": "2020-04-13T11:42:33Z", "message": "Sort datanode with pipeline for average allocation."}, "afterCommit": {"oid": "1049922fc9aab42bcda48830f2f210cf92504831", "author": {"user": {"login": "timmylicheng", "name": "Li Cheng"}}, "url": "https://github.com/apache/ozone/commit/1049922fc9aab42bcda48830f2f210cf92504831", "committedDate": "2020-04-14T03:48:34Z", "message": "Sort datanode with pipeline for average allocation."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1049922fc9aab42bcda48830f2f210cf92504831", "author": {"user": {"login": "timmylicheng", "name": "Li Cheng"}}, "url": "https://github.com/apache/ozone/commit/1049922fc9aab42bcda48830f2f210cf92504831", "committedDate": "2020-04-14T03:48:34Z", "message": "Sort datanode with pipeline for average allocation."}, "afterCommit": {"oid": "1ebecf2505fd0588eb7054ff7f76fabf595eec09", "author": {"user": {"login": "timmylicheng", "name": "Li Cheng"}}, "url": "https://github.com/apache/ozone/commit/1ebecf2505fd0588eb7054ff7f76fabf595eec09", "committedDate": "2020-04-14T08:11:52Z", "message": "Sort datanode with pipeline for average allocation."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyODQ5OTgw", "url": "https://github.com/apache/ozone/pull/668#pullrequestreview-392849980", "createdAt": "2020-04-14T11:48:07Z", "commit": {"oid": "1ebecf2505fd0588eb7054ff7f76fabf595eec09"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMTo0ODowN1rOGFK24Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMTo0ODowN1rOGFK24Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA3Mzk1Mw==", "bodyText": "Can you rename nodeOnOtherRack to nodesOnSameRack here please?", "url": "https://github.com/apache/ozone/pull/668#discussion_r408073953", "createdAt": "2020-04-14T11:48:07Z", "author": {"login": "sodonnel"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelinePlacementPolicy.java", "diffHunk": "@@ -373,13 +354,31 @@ protected DatanodeDetails chooseNodeBasedOnRackAwareness(\n       return null;\n     }\n \n-    for (DatanodeDetails node : healthyNodes) {\n-      if (excludedNodes.contains(node) ||\n-          anchor.getNetworkLocation().equals(node.getNetworkLocation())) {\n-        continue;\n-      } else {\n-        return node;\n-      }\n+    List<DatanodeDetails> nodesOnOtherRack = healthyNodes.stream().filter(\n+        p -> !excludedNodes.contains(p)\n+            && !anchor.getNetworkLocation().equals(p.getNetworkLocation()))\n+        .collect(Collectors.toList());\n+    if (!nodesOnOtherRack.isEmpty()) {\n+      return nodesOnOtherRack.get(0);\n+    }\n+    return null;\n+  }\n+\n+  @VisibleForTesting\n+  protected DatanodeDetails chooseNodeBasedOnSameRack(\n+      List<DatanodeDetails> healthyNodes,  List<DatanodeDetails> excludedNodes,\n+      NetworkTopology networkTopology, DatanodeDetails anchor) {\n+    Preconditions.checkArgument(networkTopology != null);\n+    if (checkAllNodesAreEqual(networkTopology)) {\n+      return null;\n+    }\n+\n+    List<DatanodeDetails> nodesOnOtherRack = healthyNodes.stream().filter(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ebecf2505fd0588eb7054ff7f76fabf595eec09"}, "originalPosition": 161}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyODUxMTQz", "url": "https://github.com/apache/ozone/pull/668#pullrequestreview-392851143", "createdAt": "2020-04-14T11:49:57Z", "commit": {"oid": "1ebecf2505fd0588eb7054ff7f76fabf595eec09"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMTo0OTo1N1rOGFK6rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMTo0OTo1N1rOGFK6rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA3NDkyNA==", "bodyText": "We should add a note to this Java doc that the returned list is sorted in order of pipeline count, starting with the lowest to highest.", "url": "https://github.com/apache/ozone/pull/668#discussion_r408074924", "createdAt": "2020-04-14T11:49:57Z", "author": {"login": "sodonnel"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelinePlacementPolicy.java", "diffHunk": "@@ -110,17 +97,11 @@ boolean meetCriteria(DatanodeDetails datanodeDetails, int nodesRequired) {\n         pipelineNumDeductable++;\n       }\n     }\n-    boolean meet = (nodeManager.getPipelinesCount(datanodeDetails)\n-        - pipelineNumDeductable) < heavyNodeCriteria;\n-    if (!meet && LOG.isDebugEnabled()) {\n-      LOG.debug(\"Pipeline Placement: can't place more pipeline on heavy \" +\n-          \"datanode\uff1a \" + datanodeDetails.getUuid().toString() +\n-          \" Heaviness: \" + nodeManager.getPipelinesCount(datanodeDetails) +\n-          \" limit: \" + heavyNodeCriteria);\n-    }\n-    return meet;\n+    return pipelines.size() - pipelineNumDeductable;\n   }\n \n+\n+\n   /**\n    * Filter out viable nodes based on\n    * 1. nodes that are healthy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ebecf2505fd0588eb7054ff7f76fabf595eec09"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "827a550fc4e6d05d269e8fad7c670d47cfc6f539", "author": {"user": {"login": "timmylicheng", "name": "Li Cheng"}}, "url": "https://github.com/apache/ozone/commit/827a550fc4e6d05d269e8fad7c670d47cfc6f539", "committedDate": "2020-04-21T11:39:58Z", "message": "HDDS-3179 Pipeline placement based on Topology does not have fall back protection."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e12cae10ebe14c6f96d3d24974bf3851e19600c", "author": {"user": {"login": "timmylicheng", "name": "Li Cheng"}}, "url": "https://github.com/apache/ozone/commit/1e12cae10ebe14c6f96d3d24974bf3851e19600c", "committedDate": "2020-04-21T11:39:58Z", "message": "Add a test for single node rack case."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11ac800e683920d15fbcf0407aaa7b4e729b373f", "author": {"user": {"login": "timmylicheng", "name": "Li Cheng"}}, "url": "https://github.com/apache/ozone/commit/11ac800e683920d15fbcf0407aaa7b4e729b373f", "committedDate": "2020-04-21T11:40:58Z", "message": "HDDS-3139 Pipeline placement should select lowest load datanode as anchor."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b38b053dc7018b55f8bc16d4ed1f3563af20a973", "author": {"user": {"login": "timmylicheng", "name": "Li Cheng"}}, "url": "https://github.com/apache/ozone/commit/b38b053dc7018b55f8bc16d4ed1f3563af20a973", "committedDate": "2020-04-21T11:40:58Z", "message": "Add java doc."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "759c963219354ea22fc2ab0ceb1af9d4cfefe2ba", "author": {"user": {"login": "timmylicheng", "name": "Li Cheng"}}, "url": "https://github.com/apache/ozone/commit/759c963219354ea22fc2ab0ceb1af9d4cfefe2ba", "committedDate": "2020-04-21T11:40:58Z", "message": "Add higher load node range for picking node based on topology."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b76a6295c52d4cb4a44e336cdee1358701afbf4", "author": {"user": {"login": "timmylicheng", "name": "Li Cheng"}}, "url": "https://github.com/apache/ozone/commit/6b76a6295c52d4cb4a44e336cdee1358701afbf4", "committedDate": "2020-04-21T11:40:58Z", "message": "Sort datanode with pipeline for average allocation."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a0e319e8beed3d145143b65fb9fc2f6e4374251", "author": {"user": {"login": "timmylicheng", "name": "Li Cheng"}}, "url": "https://github.com/apache/ozone/commit/2a0e319e8beed3d145143b65fb9fc2f6e4374251", "committedDate": "2020-04-21T11:40:58Z", "message": "Address some minor comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa11ff5f088a6ffca031165369308eacce71e074", "author": {"user": {"login": "timmylicheng", "name": "Li Cheng"}}, "url": "https://github.com/apache/ozone/commit/fa11ff5f088a6ffca031165369308eacce71e074", "committedDate": "2020-04-21T11:53:00Z", "message": "Track potential performance issue."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "397565788f772d16e0e6eda450e427d5a77c5df7", "author": {"user": {"login": "timmylicheng", "name": "Li Cheng"}}, "url": "https://github.com/apache/ozone/commit/397565788f772d16e0e6eda450e427d5a77c5df7", "committedDate": "2020-04-21T02:41:12Z", "message": "Track potential performance issue."}, "afterCommit": {"oid": "fa11ff5f088a6ffca031165369308eacce71e074", "author": {"user": {"login": "timmylicheng", "name": "Li Cheng"}}, "url": "https://github.com/apache/ozone/commit/fa11ff5f088a6ffca031165369308eacce71e074", "committedDate": "2020-04-21T11:53:00Z", "message": "Track potential performance issue."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3458, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}