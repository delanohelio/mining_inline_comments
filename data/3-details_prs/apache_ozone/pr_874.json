{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5NjYwNzE4", "number": 874, "title": "HDDS-3493. Refactor Failures in MiniOzoneChaosCluster into pluggable model.", "bodyText": "What changes were proposed in this pull request?\nThis PR refactors Failures in MiniOzoneChaosCluster into pluggable model so that multiple failure models can be setup.\nWhat is the link to the Apache JIRA\nhttps://issues.apache.org/jira/browse/HDDS-3493\nHow was this patch tested?\nRan MiniOzoneChaosCluster.", "createdAt": "2020-04-27T18:11:13Z", "url": "https://github.com/apache/ozone/pull/874", "merged": true, "mergeCommit": {"oid": "676610ef40b0f8701d950b347fb916d28268f1da"}, "closed": true, "closedAt": "2020-05-19T04:31:31Z", "author": {"login": "mukul1987"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABccZvmlgH2gAyNDA5NjYwNzE4OmQ1MDAyYjI2YTFlNzU3Mzg3ZDRhMzA4YWU5ZWNiNjhmYjRkMGQwYTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcimHicAFqTQxMzkyNTkwMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d5002b26a1e757387d4a308ae9ecb68fb4d0d0a6", "author": {"user": null}, "url": "https://github.com/apache/ozone/commit/d5002b26a1e757387d4a308ae9ecb68fb4d0d0a6", "committedDate": "2020-04-29T14:55:35Z", "message": "HDDS-3493. Refactor Failures in MiniOzoneChaosCluster into pluggable model."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c7c85ef3377716751a524d814252375d9da7654", "author": {"user": null}, "url": "https://github.com/apache/ozone/commit/1c7c85ef3377716751a524d814252375d9da7654", "committedDate": "2020-04-30T07:26:58Z", "message": "fix checkstyle"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "39d817089212e9eab763b78adbc001027f1f20eb", "author": {"user": null}, "url": "https://github.com/apache/ozone/commit/39d817089212e9eab763b78adbc001027f1f20eb", "committedDate": "2020-04-27T17:58:54Z", "message": "HDDS-3493. Refactor Failures in MiniOzoneChaosCluster into pluggable model."}, "afterCommit": {"oid": "1c7c85ef3377716751a524d814252375d9da7654", "author": {"user": null}, "url": "https://github.com/apache/ozone/commit/1c7c85ef3377716751a524d814252375d9da7654", "committedDate": "2020-04-30T07:26:58Z", "message": "fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be2ef962388f8d3cd50baadc23cd09b8b06bc853", "author": {"user": null}, "url": "https://github.com/apache/ozone/commit/be2ef962388f8d3cd50baadc23cd09b8b06bc853", "committedDate": "2020-05-03T14:45:26Z", "message": "fix unit tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNTIzNTI3", "url": "https://github.com/apache/ozone/pull/874#pullrequestreview-413523527", "createdAt": "2020-05-18T11:57:17Z", "commit": {"oid": "be2ef962388f8d3cd50baadc23cd09b8b06bc853"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMTo1NzoxN1rOGWz3ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNToxMDowOVrOGW7kaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU3MTcxNQ==", "bodyText": "Duplicate config setting.  Did you intend to set some other property?", "url": "https://github.com/apache/ozone/pull/874#discussion_r426571715", "createdAt": "2020-05-18T11:57:17Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/MiniOzoneChaosCluster.java", "diffHunk": "@@ -358,6 +233,11 @@ protected void initializeConfiguration() throws IOException {\n       conf.setInt(\"hdds.scm.replication.event.timeout\", 20 * 1000);\n       conf.setInt(OzoneConfigKeys.DFS_RATIS_SNAPSHOT_THRESHOLD_KEY, 100);\n       conf.setInt(OzoneConfigKeys.DFS_CONTAINER_RATIS_LOG_PURGE_GAP, 100);\n+\n+      conf.setInt(OMConfigKeys.\n+              OZONE_OM_RATIS_SNAPSHOT_AUTO_TRIGGER_THRESHOLD_KEY, 100);\n+      conf.setInt(OMConfigKeys.\n+              OZONE_OM_RATIS_SNAPSHOT_AUTO_TRIGGER_THRESHOLD_KEY, 100);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be2ef962388f8d3cd50baadc23cd09b8b06bc853"}, "originalPosition": 296}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU3NDA3OQ==", "bodyText": "This can add the same OM multiple times to the list.  Is that OK?", "url": "https://github.com/apache/ozone/pull/874#discussion_r426574079", "createdAt": "2020-05-18T12:01:40Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/MiniOzoneChaosCluster.java", "diffHunk": "@@ -406,19 +280,71 @@ public MiniOzoneChaosCluster build() throws IOException {\n       final List<HddsDatanodeService> hddsDatanodes = createHddsDatanodes(\n           scm, null);\n \n-      MiniOzoneChaosCluster cluster;\n-      if (failureService == FailureService.DATANODE) {\n-        cluster = new MiniOzoneDatanodeChaosCluster(conf, omList, scm,\n-            hddsDatanodes, omServiceId);\n-      } else {\n-        cluster = new MiniOzoneOMChaosCluster(conf, omList, scm,\n-            hddsDatanodes, omServiceId);\n-      }\n+      MiniOzoneChaosCluster cluster =\n+          new MiniOzoneChaosCluster(conf, omList, scm, hddsDatanodes,\n+              omServiceId, clazzes);\n \n       if (startDataNodes) {\n         cluster.startHddsDatanodes();\n       }\n       return cluster;\n     }\n   }\n+\n+  // OzoneManager specifc\n+  public List<OzoneManager> omToFail() {\n+    int numNodesToFail = FailureManager.getNumberOfOmToFail();\n+    if (failedOmSet.size() >= numOzoneManagers/2) {\n+      return Collections.emptyList();\n+    }\n+\n+    int numOms = getOzoneManagersList().size();\n+    List<OzoneManager> oms = new ArrayList<>(numNodesToFail);\n+    for (int i = 0; i < numNodesToFail; i++) {\n+      int failedNodeIndex = FailureManager.getBoundedRandomIndex(numOms);\n+      oms.add(getOzoneManager(failedNodeIndex));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be2ef962388f8d3cd50baadc23cd09b8b06bc853"}, "originalPosition": 347}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU3NTIzOQ==", "bodyText": "Do we need these overrides?", "url": "https://github.com/apache/ozone/pull/874#discussion_r426575239", "createdAt": "2020-05-18T12:04:02Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/MiniOzoneChaosCluster.java", "diffHunk": "@@ -406,19 +280,71 @@ public MiniOzoneChaosCluster build() throws IOException {\n       final List<HddsDatanodeService> hddsDatanodes = createHddsDatanodes(\n           scm, null);\n \n-      MiniOzoneChaosCluster cluster;\n-      if (failureService == FailureService.DATANODE) {\n-        cluster = new MiniOzoneDatanodeChaosCluster(conf, omList, scm,\n-            hddsDatanodes, omServiceId);\n-      } else {\n-        cluster = new MiniOzoneOMChaosCluster(conf, omList, scm,\n-            hddsDatanodes, omServiceId);\n-      }\n+      MiniOzoneChaosCluster cluster =\n+          new MiniOzoneChaosCluster(conf, omList, scm, hddsDatanodes,\n+              omServiceId, clazzes);\n \n       if (startDataNodes) {\n         cluster.startHddsDatanodes();\n       }\n       return cluster;\n     }\n   }\n+\n+  // OzoneManager specifc\n+  public List<OzoneManager> omToFail() {\n+    int numNodesToFail = FailureManager.getNumberOfOmToFail();\n+    if (failedOmSet.size() >= numOzoneManagers/2) {\n+      return Collections.emptyList();\n+    }\n+\n+    int numOms = getOzoneManagersList().size();\n+    List<OzoneManager> oms = new ArrayList<>(numNodesToFail);\n+    for (int i = 0; i < numNodesToFail; i++) {\n+      int failedNodeIndex = FailureManager.getBoundedRandomIndex(numOms);\n+      oms.add(getOzoneManager(failedNodeIndex));\n+    }\n+    return oms;\n+  }\n+\n+  public void shutdownOzoneManager(OzoneManager om) {\n+    super.shutdownOzoneManager(om);\n+    failedOmSet.add(om);\n+  }\n+\n+  public void restartOzoneManager(OzoneManager om, boolean waitForOM)\n+      throws IOException, TimeoutException, InterruptedException {\n+    super.restartOzoneManager(om, waitForOM);\n+    failedOmSet.remove(om);\n+  }\n+\n+  // Should the selected node be stopped or started.\n+  public boolean shouldStop() {\n+    if (failedOmSet.size() >= numOzoneManagers/2) {\n+      return false;\n+    }\n+    return RandomUtils.nextBoolean();\n+  }\n+\n+  public List<DatanodeDetails> dnToFail() {\n+    int numNodesToFail = FailureManager.getNumberOfDnToFail();\n+    int numDns = getHddsDatanodes().size();\n+    List<DatanodeDetails> dns = new ArrayList<>(numNodesToFail);\n+    for (int i = 0; i < numNodesToFail; i++) {\n+      int failedNodeIndex = FailureManager.getBoundedRandomIndex(numDns);\n+      dns.add(getHddsDatanodes().get(failedNodeIndex).getDatanodeDetails());\n+    }\n+    return dns;\n+  }\n+  \n+  @Override\n+  public void restartHddsDatanode(DatanodeDetails dn, boolean waitForDatanode)\n+      throws InterruptedException, TimeoutException, IOException {\n+    super.restartHddsDatanode(dn, waitForDatanode);\n+  }\n+\n+  @Override\n+  public void shutdownHddsDatanode(int i) {\n+    super.shutdownHddsDatanode(i);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be2ef962388f8d3cd50baadc23cd09b8b06bc853"}, "originalPosition": 391}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU3NzA3OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void waitForClusterToBeReady()\n          \n          \n            \n              @Override\n          \n          \n            \n              public void waitForClusterToBeReady()", "url": "https://github.com/apache/ozone/pull/874#discussion_r426577079", "createdAt": "2020-05-18T12:07:36Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/MiniOzoneChaosCluster.java", "diffHunk": "@@ -264,12 +121,30 @@ public void shutdown() {\n     }\n   }\n \n+  /**\n+   * Check if cluster is ready for a restart or shutdown of an OM node. If\n+   * yes, then set isClusterReady to false so that another thread cannot\n+   * restart/ shutdown OM till all OMs are up again.\n+   */\n+  public void waitForClusterToBeReady()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be2ef962388f8d3cd50baadc23cd09b8b06bc853"}, "originalPosition": 254}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY5NzgzMw==", "bodyText": "Nit: fail seems to be an overloaded term here (refers to both managed failure and unexpected failure while trying to induce failure).", "url": "https://github.com/apache/ozone/pull/874#discussion_r426697833", "createdAt": "2020-05-18T15:10:09Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/failure/FailureManager.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.failure;\n+\n+import org.apache.commons.lang3.RandomUtils;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.ozone.MiniOzoneChaosCluster;\n+import org.apache.hadoop.util.ReflectionUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Manages all the failures in the MiniOzoneChaosCluster.\n+ */\n+public class FailureManager {\n+\n+  static final Logger LOG =\n+      LoggerFactory.getLogger(Failures.class);\n+\n+  private final MiniOzoneChaosCluster cluster;\n+  private final List<Failures> failures;\n+  private ScheduledFuture scheduledFuture;\n+  private final ScheduledExecutorService executorService;\n+  public FailureManager(MiniOzoneChaosCluster cluster,\n+                        Configuration conf,\n+                        List<Class<? extends Failures>> clazzes) {\n+    this.cluster = cluster;\n+    this.executorService = Executors.newSingleThreadScheduledExecutor();\n+\n+    failures = new ArrayList<>();\n+    for (Class<? extends Failures> clazz : clazzes) {\n+      Failures f = ReflectionUtils.newInstance(clazz, conf);\n+      f.validateFailure(cluster.getOzoneManagersList(),\n+          cluster.getStorageContainerManager(),\n+          cluster.getHddsDatanodes());\n+      failures.add(f);\n+    }\n+\n+  }\n+\n+\n+  // Fail nodes randomly at configured timeout period.\n+  private void fail() {\n+    try {\n+      Failures f = failures.get(getBoundedRandomIndex(failures.size()));\n+      LOG.info(\"time failure with {}\", f.getName());\n+      f.fail(cluster);\n+    } catch (Throwable t) {\n+      LOG.info(\"failing with \", t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be2ef962388f8d3cd50baadc23cd09b8b06bc853"}, "originalPosition": 72}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1899005caf8ceda7238ec2d1800bde61772b458", "author": {"user": {"login": "mukul1987", "name": "Mukul Kumar Singh"}}, "url": "https://github.com/apache/ozone/commit/b1899005caf8ceda7238ec2d1800bde61772b458", "committedDate": "2020-05-18T18:43:43Z", "message": "address review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzOTI1OTAz", "url": "https://github.com/apache/ozone/pull/874#pullrequestreview-413925903", "createdAt": "2020-05-18T20:44:08Z", "commit": {"oid": "b1899005caf8ceda7238ec2d1800bde61772b458"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3196, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}