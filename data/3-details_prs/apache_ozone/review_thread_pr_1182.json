{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2Njk2NTUw", "number": 1182, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMjo1NTo1N1rOENFUqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNTozMzo0MlrOEO-AqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTU0MTUzOnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/interface-client/src/main/proto/proto.lock", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMjo1NTo1N1rOGvkdCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQwMDo1NzowMlrOGwJJsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUzMzUxMg==", "bodyText": "The proto.lock change seems unrelated to this PR.", "url": "https://github.com/apache/ozone/pull/1182#discussion_r452533512", "createdAt": "2020-07-09T22:55:57Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-hdds/interface-client/src/main/proto/proto.lock", "diffHunk": "@@ -1476,6 +1476,21 @@\n           }\n         ],\n         \"messages\": [\n+          {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ca26b27e26e96eaccbdd1e8f04a247b2d0be1b8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU3MzMxMQ==", "bodyText": "It was auto generated. I did not modify anything here in this file.", "url": "https://github.com/apache/ozone/pull/1182#discussion_r452573311", "createdAt": "2020-07-10T01:22:33Z", "author": {"login": "prashantpogde"}, "path": "hadoop-hdds/interface-client/src/main/proto/proto.lock", "diffHunk": "@@ -1476,6 +1476,21 @@\n           }\n         ],\n         \"messages\": [\n+          {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUzMzUxMg=="}, "originalCommit": {"oid": "5ca26b27e26e96eaccbdd1e8f04a247b2d0be1b8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU3MzQ0NQ==", "bodyText": "Integration test failure seems unrelated to the changes here.", "url": "https://github.com/apache/ozone/pull/1182#discussion_r452573445", "createdAt": "2020-07-10T01:23:06Z", "author": {"login": "prashantpogde"}, "path": "hadoop-hdds/interface-client/src/main/proto/proto.lock", "diffHunk": "@@ -1476,6 +1476,21 @@\n           }\n         ],\n         \"messages\": [\n+          {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUzMzUxMg=="}, "originalCommit": {"oid": "5ca26b27e26e96eaccbdd1e8f04a247b2d0be1b8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY0NDU2Mw==", "bodyText": "It was auto generated. I did not modify anything here in this file.\n\nPlease exclude both proto.lock files from the patch.", "url": "https://github.com/apache/ozone/pull/1182#discussion_r452644563", "createdAt": "2020-07-10T06:22:29Z", "author": {"login": "adoroszlai"}, "path": "hadoop-hdds/interface-client/src/main/proto/proto.lock", "diffHunk": "@@ -1476,6 +1476,21 @@\n           }\n         ],\n         \"messages\": [\n+          {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUzMzUxMg=="}, "originalCommit": {"oid": "5ca26b27e26e96eaccbdd1e8f04a247b2d0be1b8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEzNDczMA==", "bodyText": "It was auto generated. I did not modify anything here in this file.\n\nPlease exclude both proto.lock files from the patch.\n\ndone", "url": "https://github.com/apache/ozone/pull/1182#discussion_r453134730", "createdAt": "2020-07-11T00:56:45Z", "author": {"login": "prashantpogde"}, "path": "hadoop-hdds/interface-client/src/main/proto/proto.lock", "diffHunk": "@@ -1476,6 +1476,21 @@\n           }\n         ],\n         \"messages\": [\n+          {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUzMzUxMg=="}, "originalCommit": {"oid": "5ca26b27e26e96eaccbdd1e8f04a247b2d0be1b8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEzNDc2OA==", "bodyText": "The proto.lock change seems unrelated to this PR.\n\nthese files are reverted.", "url": "https://github.com/apache/ozone/pull/1182#discussion_r453134768", "createdAt": "2020-07-11T00:57:02Z", "author": {"login": "prashantpogde"}, "path": "hadoop-hdds/interface-client/src/main/proto/proto.lock", "diffHunk": "@@ -1476,6 +1476,21 @@\n           }\n         ],\n         \"messages\": [\n+          {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUzMzUxMg=="}, "originalCommit": {"oid": "5ca26b27e26e96eaccbdd1e8f04a247b2d0be1b8"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjI3MDQyOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/security/OzoneTokenIdentifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNjoxNzowMVrOGvrIbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQwMDo1NzoyNlrOGwJJ0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY0MjkyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public byte[] toUniqueSerilizedKey() {\n          \n          \n            \n              public byte[] toUniqueSerializedKey() {", "url": "https://github.com/apache/ozone/pull/1182#discussion_r452642927", "createdAt": "2020-07-10T06:17:01Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/security/OzoneTokenIdentifier.java", "diffHunk": "@@ -77,6 +79,119 @@ public Text getKind() {\n     return KIND_NAME;\n   }\n \n+  /** Instead of relying on proto serialization, this\n+   *  provides  explicit serialization for OzoneTokenIdentifier.\n+   * @return byte[]\n+   */\n+  public byte[] toUniqueSerilizedKey() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edd6079730477978713e3bcdd46c31c61ca3fbff"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEzNDgwMg==", "bodyText": "done", "url": "https://github.com/apache/ozone/pull/1182#discussion_r453134802", "createdAt": "2020-07-11T00:57:26Z", "author": {"login": "prashantpogde"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/security/OzoneTokenIdentifier.java", "diffHunk": "@@ -77,6 +79,119 @@ public Text getKind() {\n     return KIND_NAME;\n   }\n \n+  /** Instead of relying on proto serialization, this\n+   *  provides  explicit serialization for OzoneTokenIdentifier.\n+   * @return byte[]\n+   */\n+  public byte[] toUniqueSerilizedKey() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY0MjkyNw=="}, "originalCommit": {"oid": "edd6079730477978713e3bcdd46c31c61ca3fbff"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjI3MDczOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/security/OzoneTokenIdentifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNjoxNzoxNVrOGvrIqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQwMDo1Nzo0M1rOGwJJ8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY0Mjk4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static OzoneTokenIdentifier fromUniqueSerilizedKey(byte[] rawData) {\n          \n          \n            \n              public static OzoneTokenIdentifier fromUniqueSerializedKey(byte[] rawData) {", "url": "https://github.com/apache/ozone/pull/1182#discussion_r452642985", "createdAt": "2020-07-10T06:17:15Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/security/OzoneTokenIdentifier.java", "diffHunk": "@@ -77,6 +79,119 @@ public Text getKind() {\n     return KIND_NAME;\n   }\n \n+  /** Instead of relying on proto serialization, this\n+   *  provides  explicit serialization for OzoneTokenIdentifier.\n+   * @return byte[]\n+   */\n+  public byte[] toUniqueSerilizedKey() {\n+    ByteBuffer result =\n+        ByteBuffer.allocate(4096);\n+    result.order(ByteOrder.BIG_ENDIAN);\n+    try {\n+      result.putLong(getIssueDate());\n+      result.putInt(getMasterKeyId());\n+      result.putInt(getSequenceNumber());\n+\n+      result.putLong(getMaxDate());\n+\n+      result.putInt(getOwner().toString().length());\n+      result.put(getOwner().toString().getBytes());\n+\n+      result.putInt(getRealUser().toString().length());\n+      result.put(getRealUser().toString().getBytes());\n+\n+      result.putInt(getRenewer().toString().length());\n+      result.put(getRenewer().toString().getBytes());\n+\n+      result.putInt(getTokenType().getNumber());\n+      // Set s3 specific fields.\n+      if (getTokenType().equals(S3AUTHINFO)) {\n+        result.putInt(getAwsAccessId().length());\n+        result.put(getAwsAccessId().getBytes());\n+\n+        result.putInt(getSignature().length());\n+        result.put(getSignature().getBytes());\n+\n+        result.putInt(getStrToSign().length());\n+        result.put(getStrToSign().getBytes());\n+      } else {\n+        result.putInt(getOmCertSerialId().length());\n+        result.put(getOmCertSerialId().getBytes());\n+        if (getOmServiceId() != null) {\n+          result.putInt(getOmServiceId().length());\n+          result.put(getOmServiceId().getBytes());\n+        } else {\n+          result.putInt(0);\n+        }\n+      }\n+    } catch (IndexOutOfBoundsException e) {\n+      throw new IllegalArgumentException(\n+          \"Can't encode the the raw data \", e);\n+    }\n+    return result.array();\n+  }\n+\n+  /** Instead of relying on proto deserialization, this\n+   *  provides  explicit deserialization for OzoneTokenIdentifier.\n+   * @return byte[]\n+   */\n+  public static OzoneTokenIdentifier fromUniqueSerilizedKey(byte[] rawData) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edd6079730477978713e3bcdd46c31c61ca3fbff"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEzNDgzMg==", "bodyText": "done", "url": "https://github.com/apache/ozone/pull/1182#discussion_r453134832", "createdAt": "2020-07-11T00:57:43Z", "author": {"login": "prashantpogde"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/security/OzoneTokenIdentifier.java", "diffHunk": "@@ -77,6 +79,119 @@ public Text getKind() {\n     return KIND_NAME;\n   }\n \n+  /** Instead of relying on proto serialization, this\n+   *  provides  explicit serialization for OzoneTokenIdentifier.\n+   * @return byte[]\n+   */\n+  public byte[] toUniqueSerilizedKey() {\n+    ByteBuffer result =\n+        ByteBuffer.allocate(4096);\n+    result.order(ByteOrder.BIG_ENDIAN);\n+    try {\n+      result.putLong(getIssueDate());\n+      result.putInt(getMasterKeyId());\n+      result.putInt(getSequenceNumber());\n+\n+      result.putLong(getMaxDate());\n+\n+      result.putInt(getOwner().toString().length());\n+      result.put(getOwner().toString().getBytes());\n+\n+      result.putInt(getRealUser().toString().length());\n+      result.put(getRealUser().toString().getBytes());\n+\n+      result.putInt(getRenewer().toString().length());\n+      result.put(getRenewer().toString().getBytes());\n+\n+      result.putInt(getTokenType().getNumber());\n+      // Set s3 specific fields.\n+      if (getTokenType().equals(S3AUTHINFO)) {\n+        result.putInt(getAwsAccessId().length());\n+        result.put(getAwsAccessId().getBytes());\n+\n+        result.putInt(getSignature().length());\n+        result.put(getSignature().getBytes());\n+\n+        result.putInt(getStrToSign().length());\n+        result.put(getStrToSign().getBytes());\n+      } else {\n+        result.putInt(getOmCertSerialId().length());\n+        result.put(getOmCertSerialId().getBytes());\n+        if (getOmServiceId() != null) {\n+          result.putInt(getOmServiceId().length());\n+          result.put(getOmServiceId().getBytes());\n+        } else {\n+          result.putInt(0);\n+        }\n+      }\n+    } catch (IndexOutOfBoundsException e) {\n+      throw new IllegalArgumentException(\n+          \"Can't encode the the raw data \", e);\n+    }\n+    return result.array();\n+  }\n+\n+  /** Instead of relying on proto deserialization, this\n+   *  provides  explicit deserialization for OzoneTokenIdentifier.\n+   * @return byte[]\n+   */\n+  public static OzoneTokenIdentifier fromUniqueSerilizedKey(byte[] rawData) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY0Mjk4NQ=="}, "originalCommit": {"oid": "edd6079730477978713e3bcdd46c31c61ca3fbff"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjI3NTY1OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/codec/TokenIdentifierCodec.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNjoxOTo0MVrOGvrLbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQwMDo1Nzo1N1rOGwJKJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY0MzY5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return object.toUniqueSerilizedKey();\n          \n          \n            \n                return object.toUniqueSerializedKey();", "url": "https://github.com/apache/ozone/pull/1182#discussion_r452643692", "createdAt": "2020-07-10T06:19:41Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/codec/TokenIdentifierCodec.java", "diffHunk": "@@ -33,7 +33,7 @@\n   public byte[] toPersistedFormat(OzoneTokenIdentifier object) {\n     Preconditions\n         .checkNotNull(object, \"Null object can't be converted to byte array.\");\n-    return object.getBytes();\n+    return object.toUniqueSerilizedKey();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edd6079730477978713e3bcdd46c31c61ca3fbff"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEzNDg4Ng==", "bodyText": "done", "url": "https://github.com/apache/ozone/pull/1182#discussion_r453134886", "createdAt": "2020-07-11T00:57:57Z", "author": {"login": "prashantpogde"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/codec/TokenIdentifierCodec.java", "diffHunk": "@@ -33,7 +33,7 @@\n   public byte[] toPersistedFormat(OzoneTokenIdentifier object) {\n     Preconditions\n         .checkNotNull(object, \"Null object can't be converted to byte array.\");\n-    return object.getBytes();\n+    return object.toUniqueSerilizedKey();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY0MzY5Mg=="}, "originalCommit": {"oid": "edd6079730477978713e3bcdd46c31c61ca3fbff"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjI3NTkyOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/codec/TokenIdentifierCodec.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNjoxOTo1MFrOGvrLmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQwMDo1ODowNVrOGwJKOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY0MzczNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  return OzoneTokenIdentifier.fromUniqueSerilizedKey(rawData);\n          \n          \n            \n                  return OzoneTokenIdentifier.fromUniqueSerializedKey(rawData);", "url": "https://github.com/apache/ozone/pull/1182#discussion_r452643736", "createdAt": "2020-07-10T06:19:50Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/codec/TokenIdentifierCodec.java", "diffHunk": "@@ -42,8 +42,8 @@ public OzoneTokenIdentifier fromPersistedFormat(byte[] rawData)\n     Preconditions.checkNotNull(rawData,\n         \"Null byte array can't converted to real object.\");\n     try {\n-      return OzoneTokenIdentifier.readProtoBuf(rawData);\n-    } catch (InvalidProtocolBufferException e) {\n+      return OzoneTokenIdentifier.fromUniqueSerilizedKey(rawData);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edd6079730477978713e3bcdd46c31c61ca3fbff"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEzNDkwNg==", "bodyText": "done", "url": "https://github.com/apache/ozone/pull/1182#discussion_r453134906", "createdAt": "2020-07-11T00:58:05Z", "author": {"login": "prashantpogde"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/codec/TokenIdentifierCodec.java", "diffHunk": "@@ -42,8 +42,8 @@ public OzoneTokenIdentifier fromPersistedFormat(byte[] rawData)\n     Preconditions.checkNotNull(rawData,\n         \"Null byte array can't converted to real object.\");\n     try {\n-      return OzoneTokenIdentifier.readProtoBuf(rawData);\n-    } catch (InvalidProtocolBufferException e) {\n+      return OzoneTokenIdentifier.fromUniqueSerilizedKey(rawData);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY0MzczNg=="}, "originalCommit": {"oid": "edd6079730477978713e3bcdd46c31c61ca3fbff"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjc5OTgzOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/security/OzoneTokenIdentifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwOToxMzo0OFrOGvwG9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQwMDo1ODoxOFrOGwJKTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcyNDQ3MA==", "bodyText": "Findbugs:\nH I Dm: Found reliance on default encoding in org.apache.hadoop.ozone.security.OzoneTokenIdentifier.toUniqueSerilizedKey(): String.getBytes()  At OzoneTokenIdentifier.java:[line 98]", "url": "https://github.com/apache/ozone/pull/1182#discussion_r452724470", "createdAt": "2020-07-10T09:13:48Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/security/OzoneTokenIdentifier.java", "diffHunk": "@@ -77,6 +79,119 @@ public Text getKind() {\n     return KIND_NAME;\n   }\n \n+  /** Instead of relying on proto serialization, this\n+   *  provides  explicit serialization for OzoneTokenIdentifier.\n+   * @return byte[]\n+   */\n+  public byte[] toUniqueSerilizedKey() {\n+    ByteBuffer result =\n+        ByteBuffer.allocate(4096);\n+    result.order(ByteOrder.BIG_ENDIAN);\n+    try {\n+      result.putLong(getIssueDate());\n+      result.putInt(getMasterKeyId());\n+      result.putInt(getSequenceNumber());\n+\n+      result.putLong(getMaxDate());\n+\n+      result.putInt(getOwner().toString().length());\n+      result.put(getOwner().toString().getBytes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edd6079730477978713e3bcdd46c31c61ca3fbff"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEzNDkyNA==", "bodyText": "done", "url": "https://github.com/apache/ozone/pull/1182#discussion_r453134924", "createdAt": "2020-07-11T00:58:18Z", "author": {"login": "prashantpogde"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/security/OzoneTokenIdentifier.java", "diffHunk": "@@ -77,6 +79,119 @@ public Text getKind() {\n     return KIND_NAME;\n   }\n \n+  /** Instead of relying on proto serialization, this\n+   *  provides  explicit serialization for OzoneTokenIdentifier.\n+   * @return byte[]\n+   */\n+  public byte[] toUniqueSerilizedKey() {\n+    ByteBuffer result =\n+        ByteBuffer.allocate(4096);\n+    result.order(ByteOrder.BIG_ENDIAN);\n+    try {\n+      result.putLong(getIssueDate());\n+      result.putInt(getMasterKeyId());\n+      result.putInt(getSequenceNumber());\n+\n+      result.putLong(getMaxDate());\n+\n+      result.putInt(getOwner().toString().length());\n+      result.put(getOwner().toString().getBytes());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcyNDQ3MA=="}, "originalCommit": {"oid": "edd6079730477978713e3bcdd46c31c61ca3fbff"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjgwMDU5OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/security/OzoneTokenIdentifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwOToxNDowN1rOGvwHfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQwMDo1ODoyN1rOGwJKXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcyNDYwNA==", "bodyText": "Findbugs:\nH I Dm: Found reliance on default encoding in org.apache.hadoop.ozone.security.OzoneTokenIdentifier.fromUniqueSerilizedKey(byte[]): new String(byte[])  At OzoneTokenIdentifier.java:[line 169]", "url": "https://github.com/apache/ozone/pull/1182#discussion_r452724604", "createdAt": "2020-07-10T09:14:07Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/security/OzoneTokenIdentifier.java", "diffHunk": "@@ -77,6 +79,119 @@ public Text getKind() {\n     return KIND_NAME;\n   }\n \n+  /** Instead of relying on proto serialization, this\n+   *  provides  explicit serialization for OzoneTokenIdentifier.\n+   * @return byte[]\n+   */\n+  public byte[] toUniqueSerilizedKey() {\n+    ByteBuffer result =\n+        ByteBuffer.allocate(4096);\n+    result.order(ByteOrder.BIG_ENDIAN);\n+    try {\n+      result.putLong(getIssueDate());\n+      result.putInt(getMasterKeyId());\n+      result.putInt(getSequenceNumber());\n+\n+      result.putLong(getMaxDate());\n+\n+      result.putInt(getOwner().toString().length());\n+      result.put(getOwner().toString().getBytes());\n+\n+      result.putInt(getRealUser().toString().length());\n+      result.put(getRealUser().toString().getBytes());\n+\n+      result.putInt(getRenewer().toString().length());\n+      result.put(getRenewer().toString().getBytes());\n+\n+      result.putInt(getTokenType().getNumber());\n+      // Set s3 specific fields.\n+      if (getTokenType().equals(S3AUTHINFO)) {\n+        result.putInt(getAwsAccessId().length());\n+        result.put(getAwsAccessId().getBytes());\n+\n+        result.putInt(getSignature().length());\n+        result.put(getSignature().getBytes());\n+\n+        result.putInt(getStrToSign().length());\n+        result.put(getStrToSign().getBytes());\n+      } else {\n+        result.putInt(getOmCertSerialId().length());\n+        result.put(getOmCertSerialId().getBytes());\n+        if (getOmServiceId() != null) {\n+          result.putInt(getOmServiceId().length());\n+          result.put(getOmServiceId().getBytes());\n+        } else {\n+          result.putInt(0);\n+        }\n+      }\n+    } catch (IndexOutOfBoundsException e) {\n+      throw new IllegalArgumentException(\n+          \"Can't encode the the raw data \", e);\n+    }\n+    return result.array();\n+  }\n+\n+  /** Instead of relying on proto deserialization, this\n+   *  provides  explicit deserialization for OzoneTokenIdentifier.\n+   * @return byte[]\n+   */\n+  public static OzoneTokenIdentifier fromUniqueSerilizedKey(byte[] rawData) {\n+    OzoneTokenIdentifier result = newInstance();\n+    ByteBuffer inbuf = ByteBuffer.wrap(rawData);\n+    inbuf.order(ByteOrder.BIG_ENDIAN);\n+    result.setIssueDate(inbuf.getLong());\n+    result.setMasterKeyId(inbuf.getInt());\n+    result.setSequenceNumber(inbuf.getInt());\n+\n+    result.setMaxDate(inbuf.getLong());\n+\n+    int strsize = 0;\n+    strsize = inbuf.getInt();\n+    byte[] ownerBytes = new byte[strsize];\n+    inbuf.get(ownerBytes);\n+    result.setOwner(new Text(ownerBytes));\n+\n+    strsize = inbuf.getInt();\n+    byte[] ruserBytes = new byte[strsize];\n+    inbuf.get(ruserBytes);\n+    result.setRealUser(new Text(ruserBytes));\n+\n+    strsize = inbuf.getInt();\n+    byte[] renewerBytes = new byte[strsize];\n+    inbuf.get(renewerBytes);\n+    result.setRenewer(new Text(renewerBytes));\n+\n+    // Set s3 specific fields.\n+    if (inbuf.getInt() == S3AUTHINFO.getNumber()) {\n+      strsize = inbuf.getInt();\n+      byte[] awsAccessIdBytes = new byte[strsize];\n+      inbuf.get(awsAccessIdBytes);\n+      result.setAwsAccessId(new String(awsAccessIdBytes));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edd6079730477978713e3bcdd46c31c61ca3fbff"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEzNDk0Mw==", "bodyText": "done", "url": "https://github.com/apache/ozone/pull/1182#discussion_r453134943", "createdAt": "2020-07-11T00:58:27Z", "author": {"login": "prashantpogde"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/security/OzoneTokenIdentifier.java", "diffHunk": "@@ -77,6 +79,119 @@ public Text getKind() {\n     return KIND_NAME;\n   }\n \n+  /** Instead of relying on proto serialization, this\n+   *  provides  explicit serialization for OzoneTokenIdentifier.\n+   * @return byte[]\n+   */\n+  public byte[] toUniqueSerilizedKey() {\n+    ByteBuffer result =\n+        ByteBuffer.allocate(4096);\n+    result.order(ByteOrder.BIG_ENDIAN);\n+    try {\n+      result.putLong(getIssueDate());\n+      result.putInt(getMasterKeyId());\n+      result.putInt(getSequenceNumber());\n+\n+      result.putLong(getMaxDate());\n+\n+      result.putInt(getOwner().toString().length());\n+      result.put(getOwner().toString().getBytes());\n+\n+      result.putInt(getRealUser().toString().length());\n+      result.put(getRealUser().toString().getBytes());\n+\n+      result.putInt(getRenewer().toString().length());\n+      result.put(getRenewer().toString().getBytes());\n+\n+      result.putInt(getTokenType().getNumber());\n+      // Set s3 specific fields.\n+      if (getTokenType().equals(S3AUTHINFO)) {\n+        result.putInt(getAwsAccessId().length());\n+        result.put(getAwsAccessId().getBytes());\n+\n+        result.putInt(getSignature().length());\n+        result.put(getSignature().getBytes());\n+\n+        result.putInt(getStrToSign().length());\n+        result.put(getStrToSign().getBytes());\n+      } else {\n+        result.putInt(getOmCertSerialId().length());\n+        result.put(getOmCertSerialId().getBytes());\n+        if (getOmServiceId() != null) {\n+          result.putInt(getOmServiceId().length());\n+          result.put(getOmServiceId().getBytes());\n+        } else {\n+          result.putInt(0);\n+        }\n+      }\n+    } catch (IndexOutOfBoundsException e) {\n+      throw new IllegalArgumentException(\n+          \"Can't encode the the raw data \", e);\n+    }\n+    return result.array();\n+  }\n+\n+  /** Instead of relying on proto deserialization, this\n+   *  provides  explicit deserialization for OzoneTokenIdentifier.\n+   * @return byte[]\n+   */\n+  public static OzoneTokenIdentifier fromUniqueSerilizedKey(byte[] rawData) {\n+    OzoneTokenIdentifier result = newInstance();\n+    ByteBuffer inbuf = ByteBuffer.wrap(rawData);\n+    inbuf.order(ByteOrder.BIG_ENDIAN);\n+    result.setIssueDate(inbuf.getLong());\n+    result.setMasterKeyId(inbuf.getInt());\n+    result.setSequenceNumber(inbuf.getInt());\n+\n+    result.setMaxDate(inbuf.getLong());\n+\n+    int strsize = 0;\n+    strsize = inbuf.getInt();\n+    byte[] ownerBytes = new byte[strsize];\n+    inbuf.get(ownerBytes);\n+    result.setOwner(new Text(ownerBytes));\n+\n+    strsize = inbuf.getInt();\n+    byte[] ruserBytes = new byte[strsize];\n+    inbuf.get(ruserBytes);\n+    result.setRealUser(new Text(ruserBytes));\n+\n+    strsize = inbuf.getInt();\n+    byte[] renewerBytes = new byte[strsize];\n+    inbuf.get(renewerBytes);\n+    result.setRenewer(new Text(renewerBytes));\n+\n+    // Set s3 specific fields.\n+    if (inbuf.getInt() == S3AUTHINFO.getNumber()) {\n+      strsize = inbuf.getInt();\n+      byte[] awsAccessIdBytes = new byte[strsize];\n+      inbuf.get(awsAccessIdBytes);\n+      result.setAwsAccessId(new String(awsAccessIdBytes));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcyNDYwNA=="}, "originalCommit": {"oid": "edd6079730477978713e3bcdd46c31c61ca3fbff"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzcwMjExOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/security/OzoneTokenIdentifier.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwMzoyODo1OVrOGwaUgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMTozNjowMlrOGxmPFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQxNjA2Ng==", "bodyText": "I see there is StrToSign if it's S3 auth. I 'm curious about how big this StrToSign can be? And whether 4096 bytes can hold all these.", "url": "https://github.com/apache/ozone/pull/1182#discussion_r453416066", "createdAt": "2020-07-13T03:28:59Z", "author": {"login": "ChenSammi"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/security/OzoneTokenIdentifier.java", "diffHunk": "@@ -77,6 +80,122 @@ public Text getKind() {\n     return KIND_NAME;\n   }\n \n+  /** Instead of relying on proto serialization, this\n+   *  provides  explicit serialization for OzoneTokenIdentifier.\n+   * @return byte[]\n+   */\n+  public byte[] toUniqueSerializedKey() {\n+    ByteBuffer result =\n+        ByteBuffer.allocate(4096);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e644a17a8b18115327cab0585c940d6566374cd7"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgyOTIxNg==", "bodyText": "I see there is StrToSign if it's S3 auth. I 'm curious about how big this StrToSign can be? And whether 4096 bytes can hold all these.\n\nIt should not be too big and not cause overflow.\nhttps://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html\nI saw something similar in other places too e.g.\norg/apache/hadoop/security/token/TokenIdentifier.class with 4096 bytes limit.", "url": "https://github.com/apache/ozone/pull/1182#discussion_r453829216", "createdAt": "2020-07-13T17:57:38Z", "author": {"login": "prashantpogde"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/security/OzoneTokenIdentifier.java", "diffHunk": "@@ -77,6 +80,122 @@ public Text getKind() {\n     return KIND_NAME;\n   }\n \n+  /** Instead of relying on proto serialization, this\n+   *  provides  explicit serialization for OzoneTokenIdentifier.\n+   * @return byte[]\n+   */\n+  public byte[] toUniqueSerializedKey() {\n+    ByteBuffer result =\n+        ByteBuffer.allocate(4096);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQxNjA2Ng=="}, "originalCommit": {"oid": "e644a17a8b18115327cab0585c940d6566374cd7"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY1OTg2Mg==", "bodyText": "This issue is no longer valid in the newer version of the patch. cc @ChenSammi.", "url": "https://github.com/apache/ozone/pull/1182#discussion_r454659862", "createdAt": "2020-07-14T21:36:02Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/security/OzoneTokenIdentifier.java", "diffHunk": "@@ -77,6 +80,122 @@ public Text getKind() {\n     return KIND_NAME;\n   }\n \n+  /** Instead of relying on proto serialization, this\n+   *  provides  explicit serialization for OzoneTokenIdentifier.\n+   * @return byte[]\n+   */\n+  public byte[] toUniqueSerializedKey() {\n+    ByteBuffer result =\n+        ByteBuffer.allocate(4096);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQxNjA2Ng=="}, "originalCommit": {"oid": "e644a17a8b18115327cab0585c940d6566374cd7"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTYwMjI0OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/security/OzoneTokenIdentifier.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMzozOToxOFrOGw-jWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNToxNzo0NlrOGxEfFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAwOTY5MQ==", "bodyText": "Thanks @prashantpogde for working on this. The patch LGTM overall. Have a few questions:\nHave you consider leverage the readFields from parent class to handle the basic non-protoc serialization which seems to be much simpler.\npublic byte[] toUniqueSerializedKey() throws IOException {\n    DataOutputBuffer buf = new DataOutputBuffer();\n    super.write(buf);\n    WritableUtils.writeEnum(buf, getTokenType());\n    // Set s3 specific fields.\n    if (getTokenType().equals(S3AUTHINFO)) {\n      WritableUtils.writeString(buf, getAwsAccessId());\n      WritableUtils.writeString(buf, getSignature());\n      WritableUtils.writeString(buf, getStrToSign());\n    } else {\n      WritableUtils.writeString(buf, getOmCertSerialId());\n    }\n    return buf.getData();\n  }", "url": "https://github.com/apache/ozone/pull/1182#discussion_r454009691", "createdAt": "2020-07-13T23:39:18Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/security/OzoneTokenIdentifier.java", "diffHunk": "@@ -77,6 +80,122 @@ public Text getKind() {\n     return KIND_NAME;\n   }\n \n+  /** Instead of relying on proto serialization, this\n+   *  provides  explicit serialization for OzoneTokenIdentifier.\n+   * @return byte[]\n+   */\n+  public byte[] toUniqueSerializedKey() {\n+    ByteBuffer result =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e644a17a8b18115327cab0585c940d6566374cd7"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEwNjU5Mg==", "bodyText": "didn't try this. This looks simpler. Let me try this.", "url": "https://github.com/apache/ozone/pull/1182#discussion_r454106592", "createdAt": "2020-07-14T05:16:39Z", "author": {"login": "prashantpogde"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/security/OzoneTokenIdentifier.java", "diffHunk": "@@ -77,6 +80,122 @@ public Text getKind() {\n     return KIND_NAME;\n   }\n \n+  /** Instead of relying on proto serialization, this\n+   *  provides  explicit serialization for OzoneTokenIdentifier.\n+   * @return byte[]\n+   */\n+  public byte[] toUniqueSerializedKey() {\n+    ByteBuffer result =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAwOTY5MQ=="}, "originalCommit": {"oid": "e644a17a8b18115327cab0585c940d6566374cd7"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEwNjkwMQ==", "bodyText": "I wanted to do explicit serialization. But this also looks safe serialization.", "url": "https://github.com/apache/ozone/pull/1182#discussion_r454106901", "createdAt": "2020-07-14T05:17:46Z", "author": {"login": "prashantpogde"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/security/OzoneTokenIdentifier.java", "diffHunk": "@@ -77,6 +80,122 @@ public Text getKind() {\n     return KIND_NAME;\n   }\n \n+  /** Instead of relying on proto serialization, this\n+   *  provides  explicit serialization for OzoneTokenIdentifier.\n+   * @return byte[]\n+   */\n+  public byte[] toUniqueSerializedKey() {\n+    ByteBuffer result =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAwOTY5MQ=="}, "originalCommit": {"oid": "e644a17a8b18115327cab0585c940d6566374cd7"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTYxNDAwOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/security/OzoneTokenIdentifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMzo0MTo1MlrOGw-pKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNToxODowOFrOGxEfmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxMTE3OQ==", "bodyText": "NIT: The Text class is a UTF-8 bytes + length wrapper class. You can use getLength()/getBytes() without toString() conversion. Same apply to owner, realuser and renewer.", "url": "https://github.com/apache/ozone/pull/1182#discussion_r454011179", "createdAt": "2020-07-13T23:41:52Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/security/OzoneTokenIdentifier.java", "diffHunk": "@@ -77,6 +80,122 @@ public Text getKind() {\n     return KIND_NAME;\n   }\n \n+  /** Instead of relying on proto serialization, this\n+   *  provides  explicit serialization for OzoneTokenIdentifier.\n+   * @return byte[]\n+   */\n+  public byte[] toUniqueSerializedKey() {\n+    ByteBuffer result =\n+        ByteBuffer.allocate(4096);\n+    result.order(ByteOrder.BIG_ENDIAN);\n+    try {\n+      result.putLong(getIssueDate());\n+      result.putInt(getMasterKeyId());\n+      result.putInt(getSequenceNumber());\n+\n+      result.putLong(getMaxDate());\n+\n+      result.putInt(getOwner().toString().length());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e644a17a8b18115327cab0585c940d6566374cd7"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEwNzAzMg==", "bodyText": "this will change after I use super.write()", "url": "https://github.com/apache/ozone/pull/1182#discussion_r454107032", "createdAt": "2020-07-14T05:18:08Z", "author": {"login": "prashantpogde"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/security/OzoneTokenIdentifier.java", "diffHunk": "@@ -77,6 +80,122 @@ public Text getKind() {\n     return KIND_NAME;\n   }\n \n+  /** Instead of relying on proto serialization, this\n+   *  provides  explicit serialization for OzoneTokenIdentifier.\n+   * @return byte[]\n+   */\n+  public byte[] toUniqueSerializedKey() {\n+    ByteBuffer result =\n+        ByteBuffer.allocate(4096);\n+    result.order(ByteOrder.BIG_ENDIAN);\n+    try {\n+      result.putLong(getIssueDate());\n+      result.putInt(getMasterKeyId());\n+      result.putInt(getSequenceNumber());\n+\n+      result.putLong(getMaxDate());\n+\n+      result.putInt(getOwner().toString().length());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxMTE3OQ=="}, "originalCommit": {"oid": "e644a17a8b18115327cab0585c940d6566374cd7"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTYxODIxOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/security/OzoneTokenIdentifier.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMzo0MzozNVrOGw-rjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwODo1MTowM1rOGxKbiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxMTc5MQ==", "bodyText": "We could simplify the code by leveraging the readFields from parent class to deserialize non-protoc token id.", "url": "https://github.com/apache/ozone/pull/1182#discussion_r454011791", "createdAt": "2020-07-13T23:43:35Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/security/OzoneTokenIdentifier.java", "diffHunk": "@@ -77,6 +80,122 @@ public Text getKind() {\n     return KIND_NAME;\n   }\n \n+  /** Instead of relying on proto serialization, this\n+   *  provides  explicit serialization for OzoneTokenIdentifier.\n+   * @return byte[]\n+   */\n+  public byte[] toUniqueSerializedKey() {\n+    ByteBuffer result =\n+        ByteBuffer.allocate(4096);\n+    result.order(ByteOrder.BIG_ENDIAN);\n+    try {\n+      result.putLong(getIssueDate());\n+      result.putInt(getMasterKeyId());\n+      result.putInt(getSequenceNumber());\n+\n+      result.putLong(getMaxDate());\n+\n+      result.putInt(getOwner().toString().length());\n+      result.put(getOwner().toString().getBytes(StandardCharsets.UTF_8));\n+\n+      result.putInt(getRealUser().toString().length());\n+      result.put(getRealUser().toString().getBytes(StandardCharsets.UTF_8));\n+\n+      result.putInt(getRenewer().toString().length());\n+      result.put(getRenewer().toString().getBytes(StandardCharsets.UTF_8));\n+\n+      result.putInt(getTokenType().getNumber());\n+      // Set s3 specific fields.\n+      if (getTokenType().equals(S3AUTHINFO)) {\n+        result.putInt(getAwsAccessId().length());\n+        result.put(getAwsAccessId().getBytes(StandardCharsets.UTF_8));\n+\n+        result.putInt(getSignature().length());\n+        result.put(getSignature().getBytes(StandardCharsets.UTF_8));\n+\n+        result.putInt(getStrToSign().length());\n+        result.put(getStrToSign().getBytes(StandardCharsets.UTF_8));\n+      } else {\n+        result.putInt(getOmCertSerialId().length());\n+        result.put(getOmCertSerialId().getBytes(StandardCharsets.UTF_8));\n+        if (getOmServiceId() != null) {\n+          result.putInt(getOmServiceId().length());\n+          result.put(getOmServiceId().getBytes(StandardCharsets.UTF_8));\n+        } else {\n+          result.putInt(0);\n+        }\n+      }\n+    } catch (IndexOutOfBoundsException e) {\n+      throw new IllegalArgumentException(\n+          \"Can't encode the the raw data \", e);\n+    }\n+    return result.array();\n+  }\n+\n+  /** Instead of relying on proto deserialization, this\n+   *  provides  explicit deserialization for OzoneTokenIdentifier.\n+   * @return byte[]\n+   */\n+  public static OzoneTokenIdentifier fromUniqueSerializedKey(byte[] rawData) {\n+    OzoneTokenIdentifier result = newInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e644a17a8b18115327cab0585c940d6566374cd7"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEwNzE4NQ==", "bodyText": "Earlier I wanted to do explicit serialization, but your suggestion looks simpler. I will try this.", "url": "https://github.com/apache/ozone/pull/1182#discussion_r454107185", "createdAt": "2020-07-14T05:18:39Z", "author": {"login": "prashantpogde"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/security/OzoneTokenIdentifier.java", "diffHunk": "@@ -77,6 +80,122 @@ public Text getKind() {\n     return KIND_NAME;\n   }\n \n+  /** Instead of relying on proto serialization, this\n+   *  provides  explicit serialization for OzoneTokenIdentifier.\n+   * @return byte[]\n+   */\n+  public byte[] toUniqueSerializedKey() {\n+    ByteBuffer result =\n+        ByteBuffer.allocate(4096);\n+    result.order(ByteOrder.BIG_ENDIAN);\n+    try {\n+      result.putLong(getIssueDate());\n+      result.putInt(getMasterKeyId());\n+      result.putInt(getSequenceNumber());\n+\n+      result.putLong(getMaxDate());\n+\n+      result.putInt(getOwner().toString().length());\n+      result.put(getOwner().toString().getBytes(StandardCharsets.UTF_8));\n+\n+      result.putInt(getRealUser().toString().length());\n+      result.put(getRealUser().toString().getBytes(StandardCharsets.UTF_8));\n+\n+      result.putInt(getRenewer().toString().length());\n+      result.put(getRenewer().toString().getBytes(StandardCharsets.UTF_8));\n+\n+      result.putInt(getTokenType().getNumber());\n+      // Set s3 specific fields.\n+      if (getTokenType().equals(S3AUTHINFO)) {\n+        result.putInt(getAwsAccessId().length());\n+        result.put(getAwsAccessId().getBytes(StandardCharsets.UTF_8));\n+\n+        result.putInt(getSignature().length());\n+        result.put(getSignature().getBytes(StandardCharsets.UTF_8));\n+\n+        result.putInt(getStrToSign().length());\n+        result.put(getStrToSign().getBytes(StandardCharsets.UTF_8));\n+      } else {\n+        result.putInt(getOmCertSerialId().length());\n+        result.put(getOmCertSerialId().getBytes(StandardCharsets.UTF_8));\n+        if (getOmServiceId() != null) {\n+          result.putInt(getOmServiceId().length());\n+          result.put(getOmServiceId().getBytes(StandardCharsets.UTF_8));\n+        } else {\n+          result.putInt(0);\n+        }\n+      }\n+    } catch (IndexOutOfBoundsException e) {\n+      throw new IllegalArgumentException(\n+          \"Can't encode the the raw data \", e);\n+    }\n+    return result.array();\n+  }\n+\n+  /** Instead of relying on proto deserialization, this\n+   *  provides  explicit deserialization for OzoneTokenIdentifier.\n+   * @return byte[]\n+   */\n+  public static OzoneTokenIdentifier fromUniqueSerializedKey(byte[] rawData) {\n+    OzoneTokenIdentifier result = newInstance();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxMTc5MQ=="}, "originalCommit": {"oid": "e644a17a8b18115327cab0585c940d6566374cd7"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE2NTM5Ng==", "bodyText": "I have uploaded the changes as suggested by @xiaoyuyao Please take a look..", "url": "https://github.com/apache/ozone/pull/1182#discussion_r454165396", "createdAt": "2020-07-14T07:41:56Z", "author": {"login": "prashantpogde"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/security/OzoneTokenIdentifier.java", "diffHunk": "@@ -77,6 +80,122 @@ public Text getKind() {\n     return KIND_NAME;\n   }\n \n+  /** Instead of relying on proto serialization, this\n+   *  provides  explicit serialization for OzoneTokenIdentifier.\n+   * @return byte[]\n+   */\n+  public byte[] toUniqueSerializedKey() {\n+    ByteBuffer result =\n+        ByteBuffer.allocate(4096);\n+    result.order(ByteOrder.BIG_ENDIAN);\n+    try {\n+      result.putLong(getIssueDate());\n+      result.putInt(getMasterKeyId());\n+      result.putInt(getSequenceNumber());\n+\n+      result.putLong(getMaxDate());\n+\n+      result.putInt(getOwner().toString().length());\n+      result.put(getOwner().toString().getBytes(StandardCharsets.UTF_8));\n+\n+      result.putInt(getRealUser().toString().length());\n+      result.put(getRealUser().toString().getBytes(StandardCharsets.UTF_8));\n+\n+      result.putInt(getRenewer().toString().length());\n+      result.put(getRenewer().toString().getBytes(StandardCharsets.UTF_8));\n+\n+      result.putInt(getTokenType().getNumber());\n+      // Set s3 specific fields.\n+      if (getTokenType().equals(S3AUTHINFO)) {\n+        result.putInt(getAwsAccessId().length());\n+        result.put(getAwsAccessId().getBytes(StandardCharsets.UTF_8));\n+\n+        result.putInt(getSignature().length());\n+        result.put(getSignature().getBytes(StandardCharsets.UTF_8));\n+\n+        result.putInt(getStrToSign().length());\n+        result.put(getStrToSign().getBytes(StandardCharsets.UTF_8));\n+      } else {\n+        result.putInt(getOmCertSerialId().length());\n+        result.put(getOmCertSerialId().getBytes(StandardCharsets.UTF_8));\n+        if (getOmServiceId() != null) {\n+          result.putInt(getOmServiceId().length());\n+          result.put(getOmServiceId().getBytes(StandardCharsets.UTF_8));\n+        } else {\n+          result.putInt(0);\n+        }\n+      }\n+    } catch (IndexOutOfBoundsException e) {\n+      throw new IllegalArgumentException(\n+          \"Can't encode the the raw data \", e);\n+    }\n+    return result.array();\n+  }\n+\n+  /** Instead of relying on proto deserialization, this\n+   *  provides  explicit deserialization for OzoneTokenIdentifier.\n+   * @return byte[]\n+   */\n+  public static OzoneTokenIdentifier fromUniqueSerializedKey(byte[] rawData) {\n+    OzoneTokenIdentifier result = newInstance();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxMTc5MQ=="}, "originalCommit": {"oid": "e644a17a8b18115327cab0585c940d6566374cd7"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIwNDI5Ng==", "bodyText": "One failure in coverage check looks unreleted.", "url": "https://github.com/apache/ozone/pull/1182#discussion_r454204296", "createdAt": "2020-07-14T08:51:03Z", "author": {"login": "prashantpogde"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/security/OzoneTokenIdentifier.java", "diffHunk": "@@ -77,6 +80,122 @@ public Text getKind() {\n     return KIND_NAME;\n   }\n \n+  /** Instead of relying on proto serialization, this\n+   *  provides  explicit serialization for OzoneTokenIdentifier.\n+   * @return byte[]\n+   */\n+  public byte[] toUniqueSerializedKey() {\n+    ByteBuffer result =\n+        ByteBuffer.allocate(4096);\n+    result.order(ByteOrder.BIG_ENDIAN);\n+    try {\n+      result.putLong(getIssueDate());\n+      result.putInt(getMasterKeyId());\n+      result.putInt(getSequenceNumber());\n+\n+      result.putLong(getMaxDate());\n+\n+      result.putInt(getOwner().toString().length());\n+      result.put(getOwner().toString().getBytes(StandardCharsets.UTF_8));\n+\n+      result.putInt(getRealUser().toString().length());\n+      result.put(getRealUser().toString().getBytes(StandardCharsets.UTF_8));\n+\n+      result.putInt(getRenewer().toString().length());\n+      result.put(getRenewer().toString().getBytes(StandardCharsets.UTF_8));\n+\n+      result.putInt(getTokenType().getNumber());\n+      // Set s3 specific fields.\n+      if (getTokenType().equals(S3AUTHINFO)) {\n+        result.putInt(getAwsAccessId().length());\n+        result.put(getAwsAccessId().getBytes(StandardCharsets.UTF_8));\n+\n+        result.putInt(getSignature().length());\n+        result.put(getSignature().getBytes(StandardCharsets.UTF_8));\n+\n+        result.putInt(getStrToSign().length());\n+        result.put(getStrToSign().getBytes(StandardCharsets.UTF_8));\n+      } else {\n+        result.putInt(getOmCertSerialId().length());\n+        result.put(getOmCertSerialId().getBytes(StandardCharsets.UTF_8));\n+        if (getOmServiceId() != null) {\n+          result.putInt(getOmServiceId().length());\n+          result.put(getOmServiceId().getBytes(StandardCharsets.UTF_8));\n+        } else {\n+          result.putInt(0);\n+        }\n+      }\n+    } catch (IndexOutOfBoundsException e) {\n+      throw new IllegalArgumentException(\n+          \"Can't encode the the raw data \", e);\n+    }\n+    return result.array();\n+  }\n+\n+  /** Instead of relying on proto deserialization, this\n+   *  provides  explicit deserialization for OzoneTokenIdentifier.\n+   * @return byte[]\n+   */\n+  public static OzoneTokenIdentifier fromUniqueSerializedKey(byte[] rawData) {\n+    OzoneTokenIdentifier result = newInstance();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxMTc5MQ=="}, "originalCommit": {"oid": "e644a17a8b18115327cab0585c940d6566374cd7"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDYwNTY0OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/security/OzoneTokenIdentifier.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjoxMjo1OVrOGxa6Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjoxMjo1OVrOGxa6Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ3NDI1NQ==", "bodyText": "Thanks @prashantpogde  for the update. LGTM overall. Only one question: the null check on line100 should be removed. WritableUtils.writeString will write len=-1 for null and the WritableUtils.readString will populate null back during de-serialization. This way, we will have matched deserialization code on the code in line129-130.\n+1 after that being fixed.", "url": "https://github.com/apache/ozone/pull/1182#discussion_r454474255", "createdAt": "2020-07-14T16:12:59Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/security/OzoneTokenIdentifier.java", "diffHunk": "@@ -77,6 +81,57 @@ public Text getKind() {\n     return KIND_NAME;\n   }\n \n+  /** Instead of relying on proto serialization, this\n+   *  provides  explicit serialization for OzoneTokenIdentifier.\n+   * @return byte[]\n+   */\n+  public byte[] toUniqueSerializedKey() {\n+    DataOutputBuffer buf = new DataOutputBuffer();\n+    try {\n+      super.write(buf);\n+      WritableUtils.writeVInt(buf, getTokenType().getNumber());\n+      // Set s3 specific fields.\n+      if (getTokenType().equals(S3AUTHINFO)) {\n+        WritableUtils.writeString(buf, getAwsAccessId());\n+        WritableUtils.writeString(buf, getSignature());\n+        WritableUtils.writeString(buf, getStrToSign());\n+      } else {\n+        WritableUtils.writeString(buf, getOmCertSerialId());\n+        if (getOmServiceId() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45030d9f654d6ec60fb7d71e2a7906e154dcc89c"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTMxMTA1OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/codec/TokenIdentifierCodec.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNTozMToyMFrOGyar3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxODowNTo1OFrOGy2gNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUxOTE5Nw==", "bodyText": "We should catch IOException here and fall back to reading the old format to avoid OM failures to load tokens in old format upon upgrade/restart. We can rewrite the loaded token with the new format like HDDS-3925 upon hitting tokens in old format to avoid future fallbacks. But I'm OK without it given old tokens in old format will be expired in 7 days anyway (unlike the pipeline id) and the new tokens will be written in new format.\nI also suggest we add a unit test like below that can repro the loading failure cases in TestOzoneTokenIdentifier.java.\n  @Test\n  public void testTokenPersistence() throws IOException {\n    OzoneTokenIdentifier idWrite = getIdentifierInst();\n    idWrite.setOmServiceId(\"defaultServiceId\");\n\n    byte[] oldIdBytes = idWrite.getBytes();\n    TokenIdentifierCodec idCodec = new TokenIdentifierCodec();\n\n    OzoneTokenIdentifier idRead = null;\n    try {\n      idRead =  idCodec.fromPersistedFormat(oldIdBytes);\n    } catch (IOException ex) {\n      Assert.fail(\"Should not fail to load old token format\");\n    }\n    Assert.assertEquals(\"Deserialize Serialized Token should equal.\",\n        idWrite, idRead);\n  }", "url": "https://github.com/apache/ozone/pull/1182#discussion_r455519197", "createdAt": "2020-07-16T05:31:20Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/codec/TokenIdentifierCodec.java", "diffHunk": "@@ -42,8 +42,9 @@ public OzoneTokenIdentifier fromPersistedFormat(byte[] rawData)\n     Preconditions.checkNotNull(rawData,\n         \"Null byte array can't converted to real object.\");\n     try {\n-      return OzoneTokenIdentifier.readProtoBuf(rawData);\n-    } catch (InvalidProtocolBufferException e) {\n+      OzoneTokenIdentifier object = OzoneTokenIdentifier.newInstance();\n+      return object.fromUniqueSerializedKey(rawData);\n+    } catch (BufferUnderflowException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a164a675f953579b7226e298a829f15ff1bfc87e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk3NDk2NQ==", "bodyText": "done", "url": "https://github.com/apache/ozone/pull/1182#discussion_r455974965", "createdAt": "2020-07-16T18:05:58Z", "author": {"login": "prashantpogde"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/codec/TokenIdentifierCodec.java", "diffHunk": "@@ -42,8 +42,9 @@ public OzoneTokenIdentifier fromPersistedFormat(byte[] rawData)\n     Preconditions.checkNotNull(rawData,\n         \"Null byte array can't converted to real object.\");\n     try {\n-      return OzoneTokenIdentifier.readProtoBuf(rawData);\n-    } catch (InvalidProtocolBufferException e) {\n+      OzoneTokenIdentifier object = OzoneTokenIdentifier.newInstance();\n+      return object.fromUniqueSerializedKey(rawData);\n+    } catch (BufferUnderflowException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUxOTE5Nw=="}, "originalCommit": {"oid": "a164a675f953579b7226e298a829f15ff1bfc87e"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTMxNDk3OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/codec/TokenIdentifierCodec.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNTozMzo0MlrOGyauYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxODowNjowNFrOGy2gdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUxOTg0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                } catch (BufferUnderflowException e) {\n          \n          \n            \n                } catch (IOException ex) {\n          \n          \n            \n                  return OzoneTokenIdentifier.readProtoBuf(rawData);\n          \n          \n            \n                } catch (BufferUnderflowException e) {", "url": "https://github.com/apache/ozone/pull/1182#discussion_r455519840", "createdAt": "2020-07-16T05:33:42Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/codec/TokenIdentifierCodec.java", "diffHunk": "@@ -42,8 +42,9 @@ public OzoneTokenIdentifier fromPersistedFormat(byte[] rawData)\n     Preconditions.checkNotNull(rawData,\n         \"Null byte array can't converted to real object.\");\n     try {\n-      return OzoneTokenIdentifier.readProtoBuf(rawData);\n-    } catch (InvalidProtocolBufferException e) {\n+      OzoneTokenIdentifier object = OzoneTokenIdentifier.newInstance();\n+      return object.fromUniqueSerializedKey(rawData);\n+    } catch (BufferUnderflowException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a164a675f953579b7226e298a829f15ff1bfc87e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk3NTAzMQ==", "bodyText": "done", "url": "https://github.com/apache/ozone/pull/1182#discussion_r455975031", "createdAt": "2020-07-16T18:06:04Z", "author": {"login": "prashantpogde"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/codec/TokenIdentifierCodec.java", "diffHunk": "@@ -42,8 +42,9 @@ public OzoneTokenIdentifier fromPersistedFormat(byte[] rawData)\n     Preconditions.checkNotNull(rawData,\n         \"Null byte array can't converted to real object.\");\n     try {\n-      return OzoneTokenIdentifier.readProtoBuf(rawData);\n-    } catch (InvalidProtocolBufferException e) {\n+      OzoneTokenIdentifier object = OzoneTokenIdentifier.newInstance();\n+      return object.fromUniqueSerializedKey(rawData);\n+    } catch (BufferUnderflowException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUxOTg0MA=="}, "originalCommit": {"oid": "a164a675f953579b7226e298a829f15ff1bfc87e"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3955, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}