{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2MTA1NDI2", "number": 1089, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxOTo0NjowNFrOEMN9UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMDowNjowMVrOEMOWnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjQ3MDU3OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/fs/ozone/TestRootedOzoneFileSystem.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxOTo0NjowNFrOGuNGcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMDowNzozNFrOGuNx-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEwMjMyMQ==", "bodyText": "NIT: forEach is unnecessary as we have assert the size is 1.", "url": "https://github.com/apache/ozone/pull/1089#discussion_r451102321", "createdAt": "2020-07-07T19:46:04Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/fs/ozone/TestRootedOzoneFileSystem.java", "diffHunk": "@@ -871,4 +876,103 @@ public void testFailToDeleteRoot() throws IOException {\n     Assert.assertFalse(fs.delete(new Path(\"/\"), true));\n   }\n \n+  /**\n+   * Test getTrashRoots() in OFS. Different from the existing test for o3fs.\n+   */\n+  @Test\n+  public void testGetTrashRoots() throws IOException {\n+    String username = UserGroupInformation.getCurrentUser().getShortUserName();\n+    OzoneVolume volume1 = objectStore.getVolume(volumeName);\n+    String prevOwner = volume1.getOwner();\n+    // Set owner of the volume to current user, so it will show up in vol list\n+    Assert.assertTrue(volume1.setOwner(username));\n+\n+    Path trashRoot1 = new Path(bucketPath, TRASH_PREFIX);\n+    Path user1Trash1 = new Path(trashRoot1, username);\n+    // When user trash dir isn't been created\n+    Assert.assertEquals(0, fs.getTrashRoots(false).size());\n+    Assert.assertEquals(0, fs.getTrashRoots(true).size());\n+    // Let's create our first user1 (current user) trash dir.\n+    fs.mkdirs(user1Trash1);\n+    // Results should be getTrashRoots(false)=1, gTR(true)=1\n+    Collection<FileStatus> res = fs.getTrashRoots(false);\n+    Assert.assertEquals(1, res.size());\n+    res.forEach(e -> Assert.assertEquals(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e163f2c26ea5ed74150dc19a68a4eaeeb40fe780"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTExMzQ2Nw==", "bodyText": "done d997ac0", "url": "https://github.com/apache/ozone/pull/1089#discussion_r451113467", "createdAt": "2020-07-07T20:07:34Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/fs/ozone/TestRootedOzoneFileSystem.java", "diffHunk": "@@ -871,4 +876,103 @@ public void testFailToDeleteRoot() throws IOException {\n     Assert.assertFalse(fs.delete(new Path(\"/\"), true));\n   }\n \n+  /**\n+   * Test getTrashRoots() in OFS. Different from the existing test for o3fs.\n+   */\n+  @Test\n+  public void testGetTrashRoots() throws IOException {\n+    String username = UserGroupInformation.getCurrentUser().getShortUserName();\n+    OzoneVolume volume1 = objectStore.getVolume(volumeName);\n+    String prevOwner = volume1.getOwner();\n+    // Set owner of the volume to current user, so it will show up in vol list\n+    Assert.assertTrue(volume1.setOwner(username));\n+\n+    Path trashRoot1 = new Path(bucketPath, TRASH_PREFIX);\n+    Path user1Trash1 = new Path(trashRoot1, username);\n+    // When user trash dir isn't been created\n+    Assert.assertEquals(0, fs.getTrashRoots(false).size());\n+    Assert.assertEquals(0, fs.getTrashRoots(true).size());\n+    // Let's create our first user1 (current user) trash dir.\n+    fs.mkdirs(user1Trash1);\n+    // Results should be getTrashRoots(false)=1, gTR(true)=1\n+    Collection<FileStatus> res = fs.getTrashRoots(false);\n+    Assert.assertEquals(1, res.size());\n+    res.forEach(e -> Assert.assertEquals(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEwMjMyMQ=="}, "originalCommit": {"oid": "e163f2c26ea5ed74150dc19a68a4eaeeb40fe780"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjQ3NjE1OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/fs/ozone/TestRootedOzoneFileSystem.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxOTo0Nzo0MVrOGuNJ5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMDozNDowMVrOGuOmRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEwMzIwNw==", "bodyText": "Can we assert the trash roots is for user one with invoke getTrashRoots(false)?", "url": "https://github.com/apache/ozone/pull/1089#discussion_r451103207", "createdAt": "2020-07-07T19:47:41Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/fs/ozone/TestRootedOzoneFileSystem.java", "diffHunk": "@@ -871,4 +876,103 @@ public void testFailToDeleteRoot() throws IOException {\n     Assert.assertFalse(fs.delete(new Path(\"/\"), true));\n   }\n \n+  /**\n+   * Test getTrashRoots() in OFS. Different from the existing test for o3fs.\n+   */\n+  @Test\n+  public void testGetTrashRoots() throws IOException {\n+    String username = UserGroupInformation.getCurrentUser().getShortUserName();\n+    OzoneVolume volume1 = objectStore.getVolume(volumeName);\n+    String prevOwner = volume1.getOwner();\n+    // Set owner of the volume to current user, so it will show up in vol list\n+    Assert.assertTrue(volume1.setOwner(username));\n+\n+    Path trashRoot1 = new Path(bucketPath, TRASH_PREFIX);\n+    Path user1Trash1 = new Path(trashRoot1, username);\n+    // When user trash dir isn't been created\n+    Assert.assertEquals(0, fs.getTrashRoots(false).size());\n+    Assert.assertEquals(0, fs.getTrashRoots(true).size());\n+    // Let's create our first user1 (current user) trash dir.\n+    fs.mkdirs(user1Trash1);\n+    // Results should be getTrashRoots(false)=1, gTR(true)=1\n+    Collection<FileStatus> res = fs.getTrashRoots(false);\n+    Assert.assertEquals(1, res.size());\n+    res.forEach(e -> Assert.assertEquals(\n+        user1Trash1.toString(), e.getPath().toUri().getPath()));\n+    res = fs.getTrashRoots(true);\n+    Assert.assertEquals(1, res.size());\n+    res.forEach(e -> Assert.assertEquals(\n+        user1Trash1.toString(), e.getPath().toUri().getPath()));\n+\n+    // Create one more trash for user2 in the same bucket\n+    Path user2Trash1 = new Path(trashRoot1, \"testuser2\");\n+    fs.mkdirs(user2Trash1);\n+    // Results should be getTrashRoots(false)=1, gTR(true)=2\n+    Assert.assertEquals(1, fs.getTrashRoots(false).size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e163f2c26ea5ed74150dc19a68a4eaeeb40fe780"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEyNjg1Mg==", "bodyText": "sure thing. done in ebf104b", "url": "https://github.com/apache/ozone/pull/1089#discussion_r451126852", "createdAt": "2020-07-07T20:34:01Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/fs/ozone/TestRootedOzoneFileSystem.java", "diffHunk": "@@ -871,4 +876,103 @@ public void testFailToDeleteRoot() throws IOException {\n     Assert.assertFalse(fs.delete(new Path(\"/\"), true));\n   }\n \n+  /**\n+   * Test getTrashRoots() in OFS. Different from the existing test for o3fs.\n+   */\n+  @Test\n+  public void testGetTrashRoots() throws IOException {\n+    String username = UserGroupInformation.getCurrentUser().getShortUserName();\n+    OzoneVolume volume1 = objectStore.getVolume(volumeName);\n+    String prevOwner = volume1.getOwner();\n+    // Set owner of the volume to current user, so it will show up in vol list\n+    Assert.assertTrue(volume1.setOwner(username));\n+\n+    Path trashRoot1 = new Path(bucketPath, TRASH_PREFIX);\n+    Path user1Trash1 = new Path(trashRoot1, username);\n+    // When user trash dir isn't been created\n+    Assert.assertEquals(0, fs.getTrashRoots(false).size());\n+    Assert.assertEquals(0, fs.getTrashRoots(true).size());\n+    // Let's create our first user1 (current user) trash dir.\n+    fs.mkdirs(user1Trash1);\n+    // Results should be getTrashRoots(false)=1, gTR(true)=1\n+    Collection<FileStatus> res = fs.getTrashRoots(false);\n+    Assert.assertEquals(1, res.size());\n+    res.forEach(e -> Assert.assertEquals(\n+        user1Trash1.toString(), e.getPath().toUri().getPath()));\n+    res = fs.getTrashRoots(true);\n+    Assert.assertEquals(1, res.size());\n+    res.forEach(e -> Assert.assertEquals(\n+        user1Trash1.toString(), e.getPath().toUri().getPath()));\n+\n+    // Create one more trash for user2 in the same bucket\n+    Path user2Trash1 = new Path(trashRoot1, \"testuser2\");\n+    fs.mkdirs(user2Trash1);\n+    // Results should be getTrashRoots(false)=1, gTR(true)=2\n+    Assert.assertEquals(1, fs.getTrashRoots(false).size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEwMzIwNw=="}, "originalCommit": {"oid": "e163f2c26ea5ed74150dc19a68a4eaeeb40fe780"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjQ3OTExOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/fs/ozone/TestRootedOzoneFileSystem.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxOTo0ODozNVrOGuNLwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxOTo0ODozNVrOGuNLwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEwMzY4Mg==", "bodyText": "I see you have the assertion here for user1Trash1. So you can ignore the previous comment.", "url": "https://github.com/apache/ozone/pull/1089#discussion_r451103682", "createdAt": "2020-07-07T19:48:35Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/fs/ozone/TestRootedOzoneFileSystem.java", "diffHunk": "@@ -871,4 +876,103 @@ public void testFailToDeleteRoot() throws IOException {\n     Assert.assertFalse(fs.delete(new Path(\"/\"), true));\n   }\n \n+  /**\n+   * Test getTrashRoots() in OFS. Different from the existing test for o3fs.\n+   */\n+  @Test\n+  public void testGetTrashRoots() throws IOException {\n+    String username = UserGroupInformation.getCurrentUser().getShortUserName();\n+    OzoneVolume volume1 = objectStore.getVolume(volumeName);\n+    String prevOwner = volume1.getOwner();\n+    // Set owner of the volume to current user, so it will show up in vol list\n+    Assert.assertTrue(volume1.setOwner(username));\n+\n+    Path trashRoot1 = new Path(bucketPath, TRASH_PREFIX);\n+    Path user1Trash1 = new Path(trashRoot1, username);\n+    // When user trash dir isn't been created\n+    Assert.assertEquals(0, fs.getTrashRoots(false).size());\n+    Assert.assertEquals(0, fs.getTrashRoots(true).size());\n+    // Let's create our first user1 (current user) trash dir.\n+    fs.mkdirs(user1Trash1);\n+    // Results should be getTrashRoots(false)=1, gTR(true)=1\n+    Collection<FileStatus> res = fs.getTrashRoots(false);\n+    Assert.assertEquals(1, res.size());\n+    res.forEach(e -> Assert.assertEquals(\n+        user1Trash1.toString(), e.getPath().toUri().getPath()));\n+    res = fs.getTrashRoots(true);\n+    Assert.assertEquals(1, res.size());\n+    res.forEach(e -> Assert.assertEquals(\n+        user1Trash1.toString(), e.getPath().toUri().getPath()));\n+\n+    // Create one more trash for user2 in the same bucket\n+    Path user2Trash1 = new Path(trashRoot1, \"testuser2\");\n+    fs.mkdirs(user2Trash1);\n+    // Results should be getTrashRoots(false)=1, gTR(true)=2\n+    Assert.assertEquals(1, fs.getTrashRoots(false).size());\n+    Assert.assertEquals(2, fs.getTrashRoots(true).size());\n+\n+    // Create a new bucket in the same volume\n+    final String bucketName2 = \"trashroottest2\";\n+    volume1.createBucket(bucketName2);\n+    Path bucketPath2 = new Path(volumePath, bucketName2);\n+    Path trashRoot2 = new Path(bucketPath2, TRASH_PREFIX);\n+    Path user1Trash2 = new Path(trashRoot2, username);\n+    // Create a file at the trash location, it shouldn't be recognized as trash\n+    try (FSDataOutputStream out1 = fs.create(user1Trash2)) {\n+      out1.write(123);\n+    }\n+    // Results should still be getTrashRoots(false)=1, gTR(true)=2\n+    Assert.assertEquals(1, fs.getTrashRoots(false).size());\n+    res.forEach(e -> Assert.assertEquals(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e163f2c26ea5ed74150dc19a68a4eaeeb40fe780"}, "originalPosition": 185}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjUzNTM1OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozonefs-common/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMDowNjowMVrOGuNvBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMDozODozOFrOGuOvNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTExMjcxMQ==", "bodyText": "I don't think we should throw RuntimeException here. We can log a warning and return an empty collection instead.", "url": "https://github.com/apache/ozone/pull/1089#discussion_r451112711", "createdAt": "2020-07-07T20:06:01Z", "author": {"login": "xiaoyuyao"}, "path": "hadoop-ozone/ozonefs-common/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "diffHunk": "@@ -516,6 +520,62 @@ public FileStatusAdapter getFileStatus(String path, URI uri,\n     }\n   }\n \n+  /**\n+   * Get trash roots for current user or all users.\n+   *\n+   * Note:\n+   * 1. When allUsers flag is false, this only returns the trash roots for\n+   * those that the current user has access to.\n+   * 2. Also it is not particularly efficient to use this API when there are\n+   * a lot of volumes and buckets as the client has to iterate through all\n+   * buckets in all volumes.\n+   *\n+   * @param allUsers return trashRoots of all users if true, used by emptier\n+   * @param fs Pointer to the current OFS FileSystem\n+   * @return\n+   */\n+  public Collection<FileStatus> getTrashRoots(boolean allUsers,\n+      BasicRootedOzoneFileSystem fs) {\n+    List<FileStatus> ret = new ArrayList<>();\n+    try {\n+      Iterator<? extends OzoneVolume> iterVol;\n+      String username = UserGroupInformation.getCurrentUser().getUserName();\n+      if (allUsers) {\n+        iterVol = objectStore.listVolumes(\"\");\n+      } else {\n+        iterVol = objectStore.listVolumesByUser(username, \"\", \"\");\n+      }\n+      while (iterVol.hasNext()) {\n+        OzoneVolume volume = iterVol.next();\n+        Path volumePath = new Path(OZONE_URI_DELIMITER, volume.getName());\n+        Iterator<? extends OzoneBucket> bucketIter = volume.listBuckets(\"\");\n+        while (bucketIter.hasNext()) {\n+          OzoneBucket bucket = bucketIter.next();\n+          Path bucketPath = new Path(volumePath, bucket.getName());\n+          Path trashRoot = new Path(bucketPath, FileSystem.TRASH_PREFIX);\n+          if (allUsers) {\n+            if (fs.exists(trashRoot)) {\n+              for (FileStatus candidate : fs.listStatus(trashRoot)) {\n+                if (fs.exists(candidate.getPath()) && candidate.isDirectory()) {\n+                  ret.add(candidate);\n+                }\n+              }\n+            }\n+          } else {\n+            Path userTrash = new Path(trashRoot, username);\n+            if (fs.exists(userTrash) &&\n+                fs.getFileStatus(userTrash).isDirectory()) {\n+              ret.add(fs.getFileStatus(userTrash));\n+            }\n+          }\n+        }\n+      }\n+    } catch (IOException ex) {\n+      throw new RuntimeException(ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e163f2c26ea5ed74150dc19a68a4eaeeb40fe780"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEyOTE0Mg==", "bodyText": "done 1940f99", "url": "https://github.com/apache/ozone/pull/1089#discussion_r451129142", "createdAt": "2020-07-07T20:38:38Z", "author": {"login": "smengcl"}, "path": "hadoop-ozone/ozonefs-common/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "diffHunk": "@@ -516,6 +520,62 @@ public FileStatusAdapter getFileStatus(String path, URI uri,\n     }\n   }\n \n+  /**\n+   * Get trash roots for current user or all users.\n+   *\n+   * Note:\n+   * 1. When allUsers flag is false, this only returns the trash roots for\n+   * those that the current user has access to.\n+   * 2. Also it is not particularly efficient to use this API when there are\n+   * a lot of volumes and buckets as the client has to iterate through all\n+   * buckets in all volumes.\n+   *\n+   * @param allUsers return trashRoots of all users if true, used by emptier\n+   * @param fs Pointer to the current OFS FileSystem\n+   * @return\n+   */\n+  public Collection<FileStatus> getTrashRoots(boolean allUsers,\n+      BasicRootedOzoneFileSystem fs) {\n+    List<FileStatus> ret = new ArrayList<>();\n+    try {\n+      Iterator<? extends OzoneVolume> iterVol;\n+      String username = UserGroupInformation.getCurrentUser().getUserName();\n+      if (allUsers) {\n+        iterVol = objectStore.listVolumes(\"\");\n+      } else {\n+        iterVol = objectStore.listVolumesByUser(username, \"\", \"\");\n+      }\n+      while (iterVol.hasNext()) {\n+        OzoneVolume volume = iterVol.next();\n+        Path volumePath = new Path(OZONE_URI_DELIMITER, volume.getName());\n+        Iterator<? extends OzoneBucket> bucketIter = volume.listBuckets(\"\");\n+        while (bucketIter.hasNext()) {\n+          OzoneBucket bucket = bucketIter.next();\n+          Path bucketPath = new Path(volumePath, bucket.getName());\n+          Path trashRoot = new Path(bucketPath, FileSystem.TRASH_PREFIX);\n+          if (allUsers) {\n+            if (fs.exists(trashRoot)) {\n+              for (FileStatus candidate : fs.listStatus(trashRoot)) {\n+                if (fs.exists(candidate.getPath()) && candidate.isDirectory()) {\n+                  ret.add(candidate);\n+                }\n+              }\n+            }\n+          } else {\n+            Path userTrash = new Path(trashRoot, username);\n+            if (fs.exists(userTrash) &&\n+                fs.getFileStatus(userTrash).isDirectory()) {\n+              ret.add(fs.getFileStatus(userTrash));\n+            }\n+          }\n+        }\n+      }\n+    } catch (IOException ex) {\n+      throw new RuntimeException(ex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTExMjcxMQ=="}, "originalCommit": {"oid": "e163f2c26ea5ed74150dc19a68a4eaeeb40fe780"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4077, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}