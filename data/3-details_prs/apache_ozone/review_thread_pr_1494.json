{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyNzI5OTI4", "number": 1494, "reviewThreads": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwMTozNjoxOFrOFEToXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xNVQxOToyMTozMVrOGWlxtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMDYwMjUzOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OzoneIllegalArgumentException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwMTozNjoxOFrOIEYs-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMToyNjo1MVrOIHgdFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ2OTk0Ng==", "bodyText": "General question why are specializing IllegalArgumentException if no other state/behavior added to it :)", "url": "https://github.com/apache/ozone/pull/1494#discussion_r541469946", "createdAt": "2020-12-12T01:36:18Z", "author": {"login": "swagle"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OzoneIllegalArgumentException.java", "diffHunk": "@@ -37,4 +37,8 @@\n   public OzoneIllegalArgumentException(final String message) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc0MjY3Nw==", "bodyText": "Good point. Removed this from current patch.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r544742677", "createdAt": "2020-12-17T01:26:51Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OzoneIllegalArgumentException.java", "diffHunk": "@@ -37,4 +37,8 @@\n   public OzoneIllegalArgumentException(final String message) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ2OTk0Ng=="}, "originalCommit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMDYyNDQ2OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/MiniOzoneHAClusterImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwMTo0OToxNFrOIEY3OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNzo0MjoxMVrOIHRX8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ3MjU2OA==", "bodyText": "Why is the number of newOMs an argument? I was expecting this to read based on the new HA configuration", "url": "https://github.com/apache/ozone/pull/1494#discussion_r541472568", "createdAt": "2020-12-12T01:49:14Z", "author": {"login": "swagle"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/MiniOzoneHAClusterImpl.java", "diffHunk": "@@ -442,7 +457,169 @@ private void initHAConfig(int basePort) throws IOException {\n         conf.setInt(omRatisPortKey, port + 4);\n       }\n \n-      conf.set(omNodesKey, omNodesKeyValue.substring(1));\n+      conf.set(omNodesKey, String.join(\",\", omNodeIds));\n+    }\n+  }\n+\n+  /**\n+   * Bootstrap new OMs and add them to existing OM ring.\n+   * @param numNewOMs number of new OMs to bootstrap\n+   * @return list of new OMs nodeIds\n+   */\n+  public List<String> bootstrapOzoneManagers(int numNewOMs) throws IOException,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ5NTYwMA==", "bodyText": "Giving numNewOMs as parameter to test different scenarios - adding OMs one by one and adding two OMs together. This is the function which generates the new HA configuration for the new nodes.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r544495600", "createdAt": "2020-12-16T17:42:11Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/MiniOzoneHAClusterImpl.java", "diffHunk": "@@ -442,7 +457,169 @@ private void initHAConfig(int basePort) throws IOException {\n         conf.setInt(omRatisPortKey, port + 4);\n       }\n \n-      conf.set(omNodesKey, omNodesKeyValue.substring(1));\n+      conf.set(omNodesKey, String.join(\",\", omNodeIds));\n+    }\n+  }\n+\n+  /**\n+   * Bootstrap new OMs and add them to existing OM ring.\n+   * @param numNewOMs number of new OMs to bootstrap\n+   * @return list of new OMs nodeIds\n+   */\n+  public List<String> bootstrapOzoneManagers(int numNewOMs) throws IOException,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ3MjU2OA=="}, "originalCommit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjA1MDY0OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerRatisServer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNTowNzo0OVrOIF5J_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMToyNjo1OFrOIHgdRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA1MDIzNw==", "bodyText": "nit: old log4j habit, we should not need this check as parameters are evaluated only if debug is enabled with this format. same is true for line 384", "url": "https://github.com/apache/ozone/pull/1494#discussion_r543050237", "createdAt": "2020-12-15T05:07:49Z", "author": {"login": "fapifta"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerRatisServer.java", "diffHunk": "@@ -137,6 +141,59 @@ public OMResponse submitRequest(OMRequest omRequest) throws ServiceException {\n     return processReply(omRequest, raftClientReply);\n   }\n \n+  /**\n+   * Add a new OM to the Ratis ring.\n+   * @return true if the new OM is successfully added to the ratis ring,\n+   * false otherwise.\n+   */\n+  public boolean bootstrapNewOMs(List<OMNodeDetails> newOMNodes) {\n+    StringBuilder newOMNodeIdsBuilder = new StringBuilder();\n+    newOMNodes.stream().forEach(newOMNode ->\n+        newOMNodeIdsBuilder.append(\", \").append(newOMNode.getOMNodeId()));\n+    String newOMNodeIds = newOMNodeIdsBuilder.toString().substring(2);\n+    LOG.info(\"Bootstrapping new OM(s): {}\", newOMNodeIds);\n+\n+    List<RaftPeer> newRaftPeerList = new ArrayList<>();\n+    newRaftPeerList.addAll(raftPeers);\n+\n+    for (OMNodeDetails newOMNode : newOMNodes) {\n+      String newOMNodeId = newOMNode.getOMNodeId();\n+      RaftPeerId newOMRaftPeerId = RaftPeerId.valueOf(newOMNodeId);\n+      InetSocketAddress newOMRatisAddr = new InetSocketAddress(\n+          newOMNode.getHostName(), newOMNode.getRatisPort());\n+\n+      newRaftPeerList.add(RaftPeer.newBuilder()\n+          .setId(newOMRaftPeerId)\n+          .setAddress(newOMRatisAddr)\n+          .build());\n+    }\n+\n+    if (LOG.isDebugEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc0MjcyNg==", "bodyText": "Done", "url": "https://github.com/apache/ozone/pull/1494#discussion_r544742726", "createdAt": "2020-12-17T01:26:58Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerRatisServer.java", "diffHunk": "@@ -137,6 +141,59 @@ public OMResponse submitRequest(OMRequest omRequest) throws ServiceException {\n     return processReply(omRequest, raftClientReply);\n   }\n \n+  /**\n+   * Add a new OM to the Ratis ring.\n+   * @return true if the new OM is successfully added to the ratis ring,\n+   * false otherwise.\n+   */\n+  public boolean bootstrapNewOMs(List<OMNodeDetails> newOMNodes) {\n+    StringBuilder newOMNodeIdsBuilder = new StringBuilder();\n+    newOMNodes.stream().forEach(newOMNode ->\n+        newOMNodeIdsBuilder.append(\", \").append(newOMNode.getOMNodeId()));\n+    String newOMNodeIds = newOMNodeIdsBuilder.toString().substring(2);\n+    LOG.info(\"Bootstrapping new OM(s): {}\", newOMNodeIds);\n+\n+    List<RaftPeer> newRaftPeerList = new ArrayList<>();\n+    newRaftPeerList.addAll(raftPeers);\n+\n+    for (OMNodeDetails newOMNode : newOMNodes) {\n+      String newOMNodeId = newOMNode.getOMNodeId();\n+      RaftPeerId newOMRaftPeerId = RaftPeerId.valueOf(newOMNodeId);\n+      InetSocketAddress newOMRatisAddr = new InetSocketAddress(\n+          newOMNode.getHostName(), newOMNode.getRatisPort());\n+\n+      newRaftPeerList.add(RaftPeer.newBuilder()\n+          .setId(newOMRaftPeerId)\n+          .setAddress(newOMRatisAddr)\n+          .build());\n+    }\n+\n+    if (LOG.isDebugEnabled()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA1MDIzNw=="}, "originalCommit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjA1MDk1OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNTowODowM1rOIF5KOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMToyNzowN1rOIHgdfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA1MDI5Ng==", "bodyText": "nit: again old log4j habit", "url": "https://github.com/apache/ozone/pull/1494#discussion_r543050296", "createdAt": "2020-12-15T05:08:03Z", "author": {"login": "fapifta"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java", "diffHunk": "@@ -164,6 +167,27 @@ public void notifyTermIndexUpdated(long currentTerm, long index) {\n     computeAndUpdateLastAppliedIndex(index, currentTerm, null, false);\n   }\n \n+  /**\n+   * Called from Ratis to notify state machine about configuration changes.\n+   */\n+  @Override\n+  public void notifyConfigurationChanged(long term, long index,\n+      RaftConfigurationProto newRaftConfiguration) {\n+    List<RaftPeerProto> newPeers = newRaftConfiguration.getPeersList();\n+    LOG.info(\"Received Configuration change notification from Ratis. New Peer\" +\n+        \" list:\\n{}\", newPeers);\n+    for (RaftProtos.RaftPeerProto raftPeerProto : newPeers) {\n+      String omNodeId = RaftPeerId.valueOf(raftPeerProto.getId()).toString();\n+      if (!ozoneManager.doesPeerExist(omNodeId)) {\n+        LOG.info(\"Adding new OM {} to the cluster.\", omNodeId);\n+        ozoneManager.addNewOMNode(omNodeId);\n+      } else if(LOG.isDebugEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc0Mjc4Mw==", "bodyText": "Done", "url": "https://github.com/apache/ozone/pull/1494#discussion_r544742783", "createdAt": "2020-12-17T01:27:07Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java", "diffHunk": "@@ -164,6 +167,27 @@ public void notifyTermIndexUpdated(long currentTerm, long index) {\n     computeAndUpdateLastAppliedIndex(index, currentTerm, null, false);\n   }\n \n+  /**\n+   * Called from Ratis to notify state machine about configuration changes.\n+   */\n+  @Override\n+  public void notifyConfigurationChanged(long term, long index,\n+      RaftConfigurationProto newRaftConfiguration) {\n+    List<RaftPeerProto> newPeers = newRaftConfiguration.getPeersList();\n+    LOG.info(\"Received Configuration change notification from Ratis. New Peer\" +\n+        \" list:\\n{}\", newPeers);\n+    for (RaftProtos.RaftPeerProto raftPeerProto : newPeers) {\n+      String omNodeId = RaftPeerId.valueOf(raftPeerProto.getId()).toString();\n+      if (!ozoneManager.doesPeerExist(omNodeId)) {\n+        LOG.info(\"Adding new OM {} to the cluster.\", omNodeId);\n+        ozoneManager.addNewOMNode(omNodeId);\n+      } else if(LOG.isDebugEnabled()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA1MDI5Ng=="}, "originalCommit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNTc2NTAwOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/protocolPB/OmTransport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxODo1NToxNlrOIGa32g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMToyNzoxNlrOIHgdtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYwMjY1MA==", "bodyText": "Minor: Add javadoc", "url": "https://github.com/apache/ozone/pull/1494#discussion_r543602650", "createdAt": "2020-12-15T18:55:16Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/protocolPB/OmTransport.java", "diffHunk": "@@ -33,6 +35,9 @@\n    */\n   OMResponse submitRequest(OMRequest payload) throws IOException;\n \n+  BootstrapResponse bootstrapRequest(BootstrapRequest bootstrapRequest)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc0MjgzOA==", "bodyText": "Done", "url": "https://github.com/apache/ozone/pull/1494#discussion_r544742838", "createdAt": "2020-12-17T01:27:16Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/protocolPB/OmTransport.java", "diffHunk": "@@ -33,6 +35,9 @@\n    */\n   OMResponse submitRequest(OMRequest payload) throws IOException;\n \n+  BootstrapResponse bootstrapRequest(BootstrapRequest bootstrapRequest)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYwMjY1MA=="}, "originalCommit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNTc4MjM0OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozonefs-hadoop2/src/main/java/org/apache/hadoop/fs/ozone/Hadoop27RpcTransport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxODo1OTowN1rOIGbCAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMToyODowNFrOIHge9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYwNTI0OA==", "bodyText": "In Hadoop3OMTransport, we have done some additional steps which are missing here.\n(And also right now Hadoop27OMTransport does not support OM HA, not related to this, is that is the reason for not adding here, as failOverproxy is not configured in Hadoop2 module?)", "url": "https://github.com/apache/ozone/pull/1494#discussion_r543605248", "createdAt": "2020-12-15T18:59:07Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozonefs-hadoop2/src/main/java/org/apache/hadoop/fs/ozone/Hadoop27RpcTransport.java", "diffHunk": "@@ -71,6 +73,16 @@ public OMResponse submitRequest(OMRequest payload) throws IOException {\n     }\n   }\n \n+  @Override\n+  public BootstrapResponse bootstrapRequest(BootstrapRequest bootstrapRequest)\n+      throws IOException {\n+    try {\n+      return proxy.bootstrap(NULL_RPC_CONTROLLER, bootstrapRequest);\n+    } catch (ServiceException e) {\n+      throw new IOException(\"Service exception during the bootstrap\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc0MzE1Ng==", "bodyText": "Yes, Hadoop27OMTransport does not support it. Replicated the behavior as is in submitRequest.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r544743156", "createdAt": "2020-12-17T01:28:04Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/ozonefs-hadoop2/src/main/java/org/apache/hadoop/fs/ozone/Hadoop27RpcTransport.java", "diffHunk": "@@ -71,6 +73,16 @@ public OMResponse submitRequest(OMRequest payload) throws IOException {\n     }\n   }\n \n+  @Override\n+  public BootstrapResponse bootstrapRequest(BootstrapRequest bootstrapRequest)\n+      throws IOException {\n+    try {\n+      return proxy.bootstrap(NULL_RPC_CONTROLLER, bootstrapRequest);\n+    } catch (ServiceException e) {\n+      throw new IOException(\"Service exception during the bootstrap\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYwNTI0OA=="}, "originalCommit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNTgyMzI5OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/protocolPB/OzoneManagerProtocolClientSideTranslatorPB.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxOTowNTo1OFrOIGbZzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMToyODoyMVrOIHgfZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYxMTM0MQ==", "bodyText": "We are directly using proto classes, can we have helper classes like how we have done for all other requests.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r543611341", "createdAt": "2020-12-15T19:05:58Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/protocolPB/OzoneManagerProtocolClientSideTranslatorPB.java", "diffHunk": "@@ -192,6 +195,51 @@ public void close() throws IOException {\n     transport.close();\n   }\n \n+\n+  public List<ServiceInfo> getServiceList() throws IOException {\n+    ServiceListRequest req = ServiceListRequest.newBuilder().build();\n+\n+    OMRequest omRequest = createOMRequest(Type.ServiceList)\n+        .setServiceListRequest(req)\n+        .build();\n+\n+    final ServiceListResponse resp = handleError(submitRequest(omRequest))\n+        .getServiceListResponse();\n+\n+    return resp.getServiceInfoList().stream()\n+        .map(ServiceInfo::getFromProtobuf)\n+        .collect(Collectors.toList());\n+\n+  }\n+\n+  @Override\n+  public ServiceInfoEx getServiceInfo() throws IOException {\n+    ServiceListRequest req = ServiceListRequest.newBuilder().build();\n+\n+    OMRequest omRequest = createOMRequest(Type.ServiceList)\n+        .setServiceListRequest(req)\n+        .build();\n+\n+    final ServiceListResponse resp = handleError(submitRequest(omRequest))\n+        .getServiceListResponse();\n+\n+    return new ServiceInfoEx(\n+        resp.getServiceInfoList().stream()\n+            .map(ServiceInfo::getFromProtobuf)\n+            .collect(Collectors.toList()),\n+        resp.getCaCertificate());\n+  }\n+\n+  @Override\n+  public boolean bootstrap(List<OMNodeInfo> omNodeInfos) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc0MzI2OA==", "bodyText": "Done. Using OMNodeDetails instead.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r544743268", "createdAt": "2020-12-17T01:28:21Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/protocolPB/OzoneManagerProtocolClientSideTranslatorPB.java", "diffHunk": "@@ -192,6 +195,51 @@ public void close() throws IOException {\n     transport.close();\n   }\n \n+\n+  public List<ServiceInfo> getServiceList() throws IOException {\n+    ServiceListRequest req = ServiceListRequest.newBuilder().build();\n+\n+    OMRequest omRequest = createOMRequest(Type.ServiceList)\n+        .setServiceListRequest(req)\n+        .build();\n+\n+    final ServiceListResponse resp = handleError(submitRequest(omRequest))\n+        .getServiceListResponse();\n+\n+    return resp.getServiceInfoList().stream()\n+        .map(ServiceInfo::getFromProtobuf)\n+        .collect(Collectors.toList());\n+\n+  }\n+\n+  @Override\n+  public ServiceInfoEx getServiceInfo() throws IOException {\n+    ServiceListRequest req = ServiceListRequest.newBuilder().build();\n+\n+    OMRequest omRequest = createOMRequest(Type.ServiceList)\n+        .setServiceListRequest(req)\n+        .build();\n+\n+    final ServiceListResponse resp = handleError(submitRequest(omRequest))\n+        .getServiceListResponse();\n+\n+    return new ServiceInfoEx(\n+        resp.getServiceInfoList().stream()\n+            .map(ServiceInfo::getFromProtobuf)\n+            .collect(Collectors.toList()),\n+        resp.getCaCertificate());\n+  }\n+\n+  @Override\n+  public boolean bootstrap(List<OMNodeInfo> omNodeInfos) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYxMTM0MQ=="}, "originalCommit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjAwMjY5OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxOTo0NjoyOFrOIGdCTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMzoyMjo0N1rOIHdj0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYzODA5NQ==", "bodyText": "This is newly bootstrapped OM, so when it starts it has loaded new config, why do we need to do this?", "url": "https://github.com/apache/ozone/pull/1494#discussion_r543638095", "createdAt": "2020-12-15T19:46:28Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -2707,6 +2728,57 @@ public ServiceInfoEx getServiceInfo() throws IOException {\n     return new ServiceInfoEx(getServiceList(), caCertPem);\n   }\n \n+  @Override\n+  public boolean bootstrap(List<OMNodeInfo> omNodeInfos) throws IOException {\n+    LOG.error(\"OM bootstrap command should be received via the RPC server\");\n+    throw new UnsupportedOperationException(\"OM bootstrap command should be \" +\n+        \"received via the RPC server\");\n+  }\n+\n+  /**\n+   * Add a new OM Node to the HA cluster.\n+   */\n+  public void addNewOMNode(String newOMNodeId) {\n+    OMNodeDetails newOMNodeDetails = OMNodeDetails.getOMNodeDetailsFromConf(\n+        getConfiguration(), getOMServiceId(), newOMNodeId);\n+    if (newOMNodeDetails == null) {\n+      // Load new configuration object to read in new peer information\n+      setConfiguration(new OzoneConfiguration());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDY5NTI1MA==", "bodyText": "This is run on all OMs (old OMs also). OzoneManager#addNewOMNode() is called when Ratis sends notifyConfigurationChanged(). And since the old OMs are not necessarily restarted, we need to reload the configuration.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r544695250", "createdAt": "2020-12-16T23:22:47Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -2707,6 +2728,57 @@ public ServiceInfoEx getServiceInfo() throws IOException {\n     return new ServiceInfoEx(getServiceList(), caCertPem);\n   }\n \n+  @Override\n+  public boolean bootstrap(List<OMNodeInfo> omNodeInfos) throws IOException {\n+    LOG.error(\"OM bootstrap command should be received via the RPC server\");\n+    throw new UnsupportedOperationException(\"OM bootstrap command should be \" +\n+        \"received via the RPC server\");\n+  }\n+\n+  /**\n+   * Add a new OM Node to the HA cluster.\n+   */\n+  public void addNewOMNode(String newOMNodeId) {\n+    OMNodeDetails newOMNodeDetails = OMNodeDetails.getOMNodeDetailsFromConf(\n+        getConfiguration(), getOMServiceId(), newOMNodeId);\n+    if (newOMNodeDetails == null) {\n+      // Load new configuration object to read in new peer information\n+      setConfiguration(new OzoneConfiguration());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYzODA5NQ=="}, "originalCommit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjA2MTA3OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerRatisServer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxOTo1OTo1OVrOIGdlEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMToyODo1OVrOIHggLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY0Njk5NA==", "bodyText": "We are not using httpAddrress, httpsAddress, rpcPort, serviceID which are sent thru bootStraprequest\nAnd in notifyConfigurationChanged finally reading from the current OM config. So, I see there is no real use in sending these information only required thing need looks like nodeID. Not sure If I am missing something here.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r543646994", "createdAt": "2020-12-15T19:59:59Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerRatisServer.java", "diffHunk": "@@ -137,6 +141,59 @@ public OMResponse submitRequest(OMRequest omRequest) throws ServiceException {\n     return processReply(omRequest, raftClientReply);\n   }\n \n+  /**\n+   * Add a new OM to the Ratis ring.\n+   * @return true if the new OM is successfully added to the ratis ring,\n+   * false otherwise.\n+   */\n+  public boolean bootstrapNewOMs(List<OMNodeDetails> newOMNodes) {\n+    StringBuilder newOMNodeIdsBuilder = new StringBuilder();\n+    newOMNodes.stream().forEach(newOMNode ->\n+        newOMNodeIdsBuilder.append(\", \").append(newOMNode.getOMNodeId()));\n+    String newOMNodeIds = newOMNodeIdsBuilder.toString().substring(2);\n+    LOG.info(\"Bootstrapping new OM(s): {}\", newOMNodeIds);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc0MzQ3MA==", "bodyText": "Done. Not propagating the unused data anymore.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r544743470", "createdAt": "2020-12-17T01:28:59Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerRatisServer.java", "diffHunk": "@@ -137,6 +141,59 @@ public OMResponse submitRequest(OMRequest omRequest) throws ServiceException {\n     return processReply(omRequest, raftClientReply);\n   }\n \n+  /**\n+   * Add a new OM to the Ratis ring.\n+   * @return true if the new OM is successfully added to the ratis ring,\n+   * false otherwise.\n+   */\n+  public boolean bootstrapNewOMs(List<OMNodeDetails> newOMNodes) {\n+    StringBuilder newOMNodeIdsBuilder = new StringBuilder();\n+    newOMNodes.stream().forEach(newOMNode ->\n+        newOMNodeIdsBuilder.append(\", \").append(newOMNode.getOMNodeId()));\n+    String newOMNodeIds = newOMNodeIdsBuilder.toString().substring(2);\n+    LOG.info(\"Bootstrapping new OM(s): {}\", newOMNodeIds);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY0Njk5NA=="}, "originalCommit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjA2NDgyOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerRatisServer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMDowMDo1OFrOIGdnVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMToyOToyOVrOIHgg8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY0NzU3NA==", "bodyText": "Just a question:\nIf OM is started normally, and prepareBootStrapRequest is performed will it cause any issues?", "url": "https://github.com/apache/ozone/pull/1494#discussion_r543647574", "createdAt": "2020-12-15T20:00:58Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerRatisServer.java", "diffHunk": "@@ -317,8 +377,18 @@ public static OzoneManagerRatisServer newOMRatisServer(\n         .build();\n \n     List<RaftPeer> raftPeers = new ArrayList<>();\n-    // Add this Ratis server to the Ratis ring\n-    raftPeers.add(localRaftPeer);\n+\n+    // If the OM is started in bootstrap mode, do not add it to the ratis ring.\n+    // It will be added later using SetConfiguration from the leader OM.\n+    if (isBootstrapping) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc0MzY2NQ==", "bodyText": "It could possibly cause a different ring to form with the new OMs.\nThe most likely scenario is that the new OMs would shutdown. But we need to find a mechanism to find this erroneous scenario and address it.\nI think it should be done in a different Jira though.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r544743665", "createdAt": "2020-12-17T01:29:29Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerRatisServer.java", "diffHunk": "@@ -317,8 +377,18 @@ public static OzoneManagerRatisServer newOMRatisServer(\n         .build();\n \n     List<RaftPeer> raftPeers = new ArrayList<>();\n-    // Add this Ratis server to the Ratis ring\n-    raftPeers.add(localRaftPeer);\n+\n+    // If the OM is started in bootstrap mode, do not add it to the ratis ring.\n+    // It will be added later using SetConfiguration from the leader OM.\n+    if (isBootstrapping) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY0NzU3NA=="}, "originalCommit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjc5OTcxOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/admin/om/AddOMSubcommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMzoxMjo1NlrOIGkMjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMTozMDo0NFrOIHgi0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc1NTQwNA==", "bodyText": "Here first we need to check for not null, as in few code paths getNewNodeInfos returns null.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r543755404", "createdAt": "2020-12-15T23:12:56Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/admin/om/AddOMSubcommand.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.admin.om;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import org.apache.hadoop.hdds.cli.HddsVersionProvider;\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n+import org.apache.hadoop.net.NetUtils;\n+import org.apache.hadoop.ozone.OmUtils;\n+import org.apache.hadoop.ozone.client.OzoneClientException;\n+import org.apache.hadoop.ozone.om.helpers.ServiceInfo;\n+import org.apache.hadoop.ozone.om.protocol.OzoneManagerProtocol;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMNodeInfo;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMRoleInfo;\n+import org.apache.hadoop.util.StringUtils;\n+import picocli.CommandLine;\n+\n+import java.util.concurrent.Callable;\n+\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_ADDRESS_KEY;\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_HTTPS_ADDRESS_KEY;\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_HTTP_ADDRESS_KEY;\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_NODES_KEY;\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_RATIS_PORT_DEFAULT;\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_RATIS_PORT_KEY;\n+\n+/**\n+ * Handler of om roles command.\n+ */\n+@CommandLine.Command(\n+    name = \"addom\", aliases = \"addoms, addnewom, addnewoms\",\n+    description = \"Adds newly Bootstrapped OM(s) to the cluster. \" +\n+        \"\\nNote - New OM(s) should be started in bootstrap mode before \" +\n+        \"running this command.\" +\n+        \"\\nNote - Configuration files of all existing \" +\n+        \"OM(s) MUST be updated with information about the new OM(s) (\" +\n+        OZONE_OM_NODES_KEY + \", \" + OZONE_OM_ADDRESS_KEY + \", \" +\n+        OZONE_OM_HTTP_ADDRESS_KEY + \", \" + OZONE_OM_HTTPS_ADDRESS_KEY + \", \" +\n+        OZONE_OM_RATIS_PORT_KEY + \").\",\n+    mixinStandardHelpOptions = true,\n+    versionProvider = HddsVersionProvider.class)\n+public class AddOMSubcommand implements Callable<Void> {\n+\n+  @CommandLine.ParentCommand\n+  private OMAdmin parent;\n+\n+  @CommandLine.Option(names = {\"-id\", \"--service-id\"},\n+      description = \"OM Service ID\",\n+      required = true)\n+  private String omServiceId;\n+\n+  @CommandLine.Option(names = {\"-nodeid\", \"-nodeids\", \"--new-node-ids\"},\n+      description = \"A comma separated list of node IDs of the new OM(s). \",\n+      required = true)\n+  private String newNodeIds;\n+\n+  private OzoneManagerProtocol ozoneManagerClient;\n+\n+  @Override\n+  public Void call() throws Exception {\n+    boolean success = false;\n+    try {\n+      ozoneManagerClient =  parent.createOmClient(omServiceId);\n+\n+      List<OMNodeInfo> newOMNodeInfos = getNewNodeInfos();\n+\n+      if (!newOMNodeInfos.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc0NDE0NQ==", "bodyText": "Done.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r544744145", "createdAt": "2020-12-17T01:30:44Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/admin/om/AddOMSubcommand.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.admin.om;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import org.apache.hadoop.hdds.cli.HddsVersionProvider;\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n+import org.apache.hadoop.net.NetUtils;\n+import org.apache.hadoop.ozone.OmUtils;\n+import org.apache.hadoop.ozone.client.OzoneClientException;\n+import org.apache.hadoop.ozone.om.helpers.ServiceInfo;\n+import org.apache.hadoop.ozone.om.protocol.OzoneManagerProtocol;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMNodeInfo;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMRoleInfo;\n+import org.apache.hadoop.util.StringUtils;\n+import picocli.CommandLine;\n+\n+import java.util.concurrent.Callable;\n+\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_ADDRESS_KEY;\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_HTTPS_ADDRESS_KEY;\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_HTTP_ADDRESS_KEY;\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_NODES_KEY;\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_RATIS_PORT_DEFAULT;\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_RATIS_PORT_KEY;\n+\n+/**\n+ * Handler of om roles command.\n+ */\n+@CommandLine.Command(\n+    name = \"addom\", aliases = \"addoms, addnewom, addnewoms\",\n+    description = \"Adds newly Bootstrapped OM(s) to the cluster. \" +\n+        \"\\nNote - New OM(s) should be started in bootstrap mode before \" +\n+        \"running this command.\" +\n+        \"\\nNote - Configuration files of all existing \" +\n+        \"OM(s) MUST be updated with information about the new OM(s) (\" +\n+        OZONE_OM_NODES_KEY + \", \" + OZONE_OM_ADDRESS_KEY + \", \" +\n+        OZONE_OM_HTTP_ADDRESS_KEY + \", \" + OZONE_OM_HTTPS_ADDRESS_KEY + \", \" +\n+        OZONE_OM_RATIS_PORT_KEY + \").\",\n+    mixinStandardHelpOptions = true,\n+    versionProvider = HddsVersionProvider.class)\n+public class AddOMSubcommand implements Callable<Void> {\n+\n+  @CommandLine.ParentCommand\n+  private OMAdmin parent;\n+\n+  @CommandLine.Option(names = {\"-id\", \"--service-id\"},\n+      description = \"OM Service ID\",\n+      required = true)\n+  private String omServiceId;\n+\n+  @CommandLine.Option(names = {\"-nodeid\", \"-nodeids\", \"--new-node-ids\"},\n+      description = \"A comma separated list of node IDs of the new OM(s). \",\n+      required = true)\n+  private String newNodeIds;\n+\n+  private OzoneManagerProtocol ozoneManagerClient;\n+\n+  @Override\n+  public Void call() throws Exception {\n+    boolean success = false;\n+    try {\n+      ozoneManagerClient =  parent.createOmClient(omServiceId);\n+\n+      List<OMNodeInfo> newOMNodeInfos = getNewNodeInfos();\n+\n+      if (!newOMNodeInfos.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc1NTQwNA=="}, "originalCommit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjgwNjM4OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/interface-client/src/main/proto/OmClientProtocol.proto", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMzoxNDo1NlrOIGkQOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMTozMDo1MlrOIHgi_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc1NjM0Ng==", "bodyText": "Can we call this AddOMRequest, as this is an admin command submitted to add new OM's to the cluster.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r543756346", "createdAt": "2020-12-15T23:14:56Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/interface-client/src/main/proto/OmClientProtocol.proto", "diffHunk": "@@ -1203,11 +1203,41 @@ message UpdateGetS3SecretRequest {\n     required string awsSecret = 2;\n }\n \n+message OMNodeInfo {\n+    required string nodeId = 1;\n+    required string hostAddress = 2;\n+    required uint32 rpcPort = 3;\n+    required uint32 ratisPort = 4;\n+    required string httpAddr = 5;\n+    required string httpsAddr = 6;\n+    optional string serviceId = 7;\n+}\n+\n+enum BootstrapErrorCode {\n+    RATIS_NOT_ENABLED = 1;\n+    LEADER_UNDETERMINED = 2;\n+    RATIS_BOOTSTRAP_ERROR = 3;\n+}\n+\n+message BootstrapRequest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc0NDE4OQ==", "bodyText": "Done.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r544744189", "createdAt": "2020-12-17T01:30:52Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/interface-client/src/main/proto/OmClientProtocol.proto", "diffHunk": "@@ -1203,11 +1203,41 @@ message UpdateGetS3SecretRequest {\n     required string awsSecret = 2;\n }\n \n+message OMNodeInfo {\n+    required string nodeId = 1;\n+    required string hostAddress = 2;\n+    required uint32 rpcPort = 3;\n+    required uint32 ratisPort = 4;\n+    required string httpAddr = 5;\n+    required string httpsAddr = 6;\n+    optional string serviceId = 7;\n+}\n+\n+enum BootstrapErrorCode {\n+    RATIS_NOT_ENABLED = 1;\n+    LEADER_UNDETERMINED = 2;\n+    RATIS_BOOTSTRAP_ERROR = 3;\n+}\n+\n+message BootstrapRequest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc1NjM0Ng=="}, "originalCommit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjgwODY1OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/interface-client/src/main/proto/OmClientProtocol.proto", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMzoxNTo0NFrOIGkRdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMTozMTowMVrOIHgjKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc1NjY2Mw==", "bodyText": "We are not using rpcPort, httpAddr, httpsAddr, serviceId these can be removed from this.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r543756663", "createdAt": "2020-12-15T23:15:44Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/interface-client/src/main/proto/OmClientProtocol.proto", "diffHunk": "@@ -1203,11 +1203,41 @@ message UpdateGetS3SecretRequest {\n     required string awsSecret = 2;\n }\n \n+message OMNodeInfo {\n+    required string nodeId = 1;\n+    required string hostAddress = 2;\n+    required uint32 rpcPort = 3;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc0NDIzMg==", "bodyText": "Done.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r544744232", "createdAt": "2020-12-17T01:31:01Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/interface-client/src/main/proto/OmClientProtocol.proto", "diffHunk": "@@ -1203,11 +1203,41 @@ message UpdateGetS3SecretRequest {\n     required string awsSecret = 2;\n }\n \n+message OMNodeInfo {\n+    required string nodeId = 1;\n+    required string hostAddress = 2;\n+    required uint32 rpcPort = 3;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc1NjY2Mw=="}, "originalCommit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjgzODQ2OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMzoyNTowN1rOIGkiBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMzozMjoyOVrOIHdzeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc2MDkwMA==", "bodyText": "Question:\nI see this is called from Ratis, when any StateMachine has hit exception.\nIn this case, do we want to terminate OM, is this handled to handle any failure of notifyConfigurationChanged where we are throwing OzoneIllegalArgumentException?", "url": "https://github.com/apache/ozone/pull/1494#discussion_r543760900", "createdAt": "2020-12-15T23:25:07Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java", "diffHunk": "@@ -388,6 +412,15 @@ public String toStateMachineLogEntryString(StateMachineLogEntryProto proto) {\n     return OMRatisHelper.smProtoToString(proto);\n   }\n \n+  @Override\n+  public void close() throws IOException {\n+    // OM should be shutdown as the StateMachine has shutdown.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDY5OTI1Ng==", "bodyText": "If the StateMachine has terminated for any reason, then the OM should also be terminated.\nThis is not just for notifyConfigurationChanged exception. If the RaftServer shutsdown for reason, we want the OM also to shutdown. Though the OM would not service write requests any more, the shutdown would not be visible to user as OM is still running.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r544699256", "createdAt": "2020-12-16T23:32:29Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java", "diffHunk": "@@ -388,6 +412,15 @@ public String toStateMachineLogEntryString(StateMachineLogEntryProto proto) {\n     return OMRatisHelper.smProtoToString(proto);\n   }\n \n+  @Override\n+  public void close() throws IOException {\n+    // OM should be shutdown as the StateMachine has shutdown.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc2MDkwMA=="}, "originalCommit": {"oid": "c44fba2cf4b6287dff743268335ac17c38db5d45"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA2MTE3NDcwOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/protocolPB/OMInterServiceProtocolPB.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yN1QwNzo0NTowMFrOJitCqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yN1QwNzo0NTowMFrOJitCqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDM2OTMyMQ==", "bodyText": "Looks like we need to add this new service to OMPolicyProvider and add the ACL property to ozone-default.xml\nTo allow service-level authorization for this rpc service.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r640369321", "createdAt": "2021-05-27T07:45:00Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/protocolPB/OMInterServiceProtocolPB.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.om.protocolPB;\n+\n+import org.apache.hadoop.hdds.annotation.InterfaceAudience;\n+import org.apache.hadoop.ozone.om.OMConfigKeys;\n+import org.apache.hadoop.ipc.ProtocolInfo;\n+import org.apache.hadoop.ozone.protocol.proto\n+    .OzoneManagerInterServiceProtocolProtos.OzoneManagerInterService;\n+import org.apache.hadoop.security.KerberosInfo;\n+import org.apache.hadoop.security.token.TokenInfo;\n+import org.apache.hadoop.ozone.security.OzoneDelegationTokenSelector;\n+\n+/**\n+ * Protocol used for communication between OMs.\n+ */\n+@ProtocolInfo(protocolName =\n+    \"org.apache.hadoop.ozone.om.protocol.OMInterServiceProtocol\",\n+    protocolVersion = 1)\n+@KerberosInfo(\n+    serverPrincipal = OMConfigKeys.OZONE_OM_KERBEROS_PRINCIPAL_KEY)\n+@TokenInfo(OzoneDelegationTokenSelector.class)\n+@InterfaceAudience.Private", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b804603308088b06211f384aee4c4e376dd791e"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA2MTE5NjM4OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/protocolPB/OMInterServiceProtocolPB.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yN1QwNzo0OTo1MVrOJitQFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xMVQwNDozMzo1NlrOJrlgsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDM3Mjc1OQ==", "bodyText": "Question: Do we need to add TokenInfo for this Protocol?\nAs for this, the user should come with a Kerberos credential only for bootstrap right? Or in general when do we add TokenInfo only when we allow that service with token auth?\ncc @xiaoyuyao", "url": "https://github.com/apache/ozone/pull/1494#discussion_r640372759", "createdAt": "2021-05-27T07:49:51Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/protocolPB/OMInterServiceProtocolPB.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.om.protocolPB;\n+\n+import org.apache.hadoop.hdds.annotation.InterfaceAudience;\n+import org.apache.hadoop.ozone.om.OMConfigKeys;\n+import org.apache.hadoop.ipc.ProtocolInfo;\n+import org.apache.hadoop.ozone.protocol.proto\n+    .OzoneManagerInterServiceProtocolProtos.OzoneManagerInterService;\n+import org.apache.hadoop.security.KerberosInfo;\n+import org.apache.hadoop.security.token.TokenInfo;\n+import org.apache.hadoop.ozone.security.OzoneDelegationTokenSelector;\n+\n+/**\n+ * Protocol used for communication between OMs.\n+ */\n+@ProtocolInfo(protocolName =\n+    \"org.apache.hadoop.ozone.om.protocol.OMInterServiceProtocol\",\n+    protocolVersion = 1)\n+@KerberosInfo(\n+    serverPrincipal = OMConfigKeys.OZONE_OM_KERBEROS_PRINCIPAL_KEY)\n+@TokenInfo(OzoneDelegationTokenSelector.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b804603308088b06211f384aee4c4e376dd791e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODUzMDg2Ng==", "bodyText": "I am not sure.\n@xiaoyuyao can you please help with this?", "url": "https://github.com/apache/ozone/pull/1494#discussion_r648530866", "createdAt": "2021-06-09T17:40:27Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/protocolPB/OMInterServiceProtocolPB.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.om.protocolPB;\n+\n+import org.apache.hadoop.hdds.annotation.InterfaceAudience;\n+import org.apache.hadoop.ozone.om.OMConfigKeys;\n+import org.apache.hadoop.ipc.ProtocolInfo;\n+import org.apache.hadoop.ozone.protocol.proto\n+    .OzoneManagerInterServiceProtocolProtos.OzoneManagerInterService;\n+import org.apache.hadoop.security.KerberosInfo;\n+import org.apache.hadoop.security.token.TokenInfo;\n+import org.apache.hadoop.ozone.security.OzoneDelegationTokenSelector;\n+\n+/**\n+ * Protocol used for communication between OMs.\n+ */\n+@ProtocolInfo(protocolName =\n+    \"org.apache.hadoop.ozone.om.protocol.OMInterServiceProtocol\",\n+    protocolVersion = 1)\n+@KerberosInfo(\n+    serverPrincipal = OMConfigKeys.OZONE_OM_KERBEROS_PRINCIPAL_KEY)\n+@TokenInfo(OzoneDelegationTokenSelector.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDM3Mjc1OQ=="}, "originalCommit": {"oid": "9b804603308088b06211f384aee4c4e376dd791e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0OTY4MzEyMQ==", "bodyText": "Thank you @xiaoyuyao for the offline discussion.\n@bharatviswa504, you are right. We do not need to add TokenInfo for this protocol. Since this is inter OM service, OMs can use their Kerberos principal to authenticate. We do not need to provide Token authorization also.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r649683121", "createdAt": "2021-06-11T04:33:56Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/protocolPB/OMInterServiceProtocolPB.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.om.protocolPB;\n+\n+import org.apache.hadoop.hdds.annotation.InterfaceAudience;\n+import org.apache.hadoop.ozone.om.OMConfigKeys;\n+import org.apache.hadoop.ipc.ProtocolInfo;\n+import org.apache.hadoop.ozone.protocol.proto\n+    .OzoneManagerInterServiceProtocolProtos.OzoneManagerInterService;\n+import org.apache.hadoop.security.KerberosInfo;\n+import org.apache.hadoop.security.token.TokenInfo;\n+import org.apache.hadoop.ozone.security.OzoneDelegationTokenSelector;\n+\n+/**\n+ * Protocol used for communication between OMs.\n+ */\n+@ProtocolInfo(protocolName =\n+    \"org.apache.hadoop.ozone.om.protocol.OMInterServiceProtocol\",\n+    protocolVersion = 1)\n+@KerberosInfo(\n+    serverPrincipal = OMConfigKeys.OZONE_OM_KERBEROS_PRINCIPAL_KEY)\n+@TokenInfo(OzoneDelegationTokenSelector.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDM3Mjc1OQ=="}, "originalCommit": {"oid": "9b804603308088b06211f384aee4c4e376dd791e"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA2MTIyMDk1OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/protocol/OMInterServiceProtocol.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yN1QwNzo1NToxNVrOJite_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wOVQxNzozOToxOVrOJqfIfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDM3NjU3NA==", "bodyText": "Do we need to add here also KerberosInfo.\nFrom other Protocol classes which are there in ozone, we have the info here also. Not sure mandatory or not here.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r640376574", "createdAt": "2021-05-27T07:55:15Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/protocol/OMInterServiceProtocol.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.om.protocol;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import org.apache.hadoop.ozone.om.helpers.OMNodeDetails;\n+\n+/**\n+ * Protocol for inter OM communication.\n+ */\n+public interface OMInterServiceProtocol extends Closeable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b804603308088b06211f384aee4c4e376dd791e"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODUzMDA0NQ==", "bodyText": "Done.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r648530045", "createdAt": "2021-06-09T17:39:19Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/protocol/OMInterServiceProtocol.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.om.protocol;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import org.apache.hadoop.ozone.om.helpers.OMNodeDetails;\n+\n+/**\n+ * Protocol for inter OM communication.\n+ */\n+public interface OMInterServiceProtocol extends Closeable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDM3NjU3NA=="}, "originalCommit": {"oid": "9b804603308088b06211f384aee4c4e376dd791e"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA2MTI4OTkzOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/MiniOzoneHAClusterImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yN1QwODoxMDoxNlrOJiuJ5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yN1QwODoxMDoxNlrOJiuJ5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDM4NzU1Nw==", "bodyText": "Minor:\nActiveOMs -> ActiiiveSCMs\nOMs -> SCMs", "url": "https://github.com/apache/ozone/pull/1494#discussion_r640387557", "createdAt": "2021-05-27T08:10:16Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/MiniOzoneHAClusterImpl.java", "diffHunk": "@@ -352,7 +361,12 @@ public MiniOzoneCluster build() throws IOException {\n         numOfActiveOMs = numOfOMs;\n       }\n \n-      // If num of ActiveOMs is not set, set it to numOfOMs.\n+      // If num of OMs it not set, set it to 1.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b804603308088b06211f384aee4c4e376dd791e"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA2MTgxMzY0OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yN1QwOTo1MToyNVrOJizSOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0zMVQwNDoxNTo1MFrOJkcvNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDQ3MTYxMQ==", "bodyText": "This is reading the values from config, I think if all required information is passed like httpAddress, httpsAddress and any other required info, we can bootstrap OM's with out restart.  (As now if we read from config, we except the new OM details should be in config before)", "url": "https://github.com/apache/ozone/pull/1494#discussion_r640471611", "createdAt": "2021-05-27T09:51:25Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java", "diffHunk": "@@ -166,6 +167,29 @@ public void notifyTermIndexUpdated(long currentTerm, long index) {\n     computeAndUpdateLastAppliedIndex(index, currentTerm, null, false);\n   }\n \n+  /**\n+   * Called to notify state machine about configuration changes.\n+   * Configurations changes include addition of newly bootstrapped OM.\n+   */\n+  @Override\n+  public void notifyConfigurationChanged(long term, long index,\n+      RaftProtos.RaftConfigurationProto newRaftConfiguration) {\n+    List<RaftProtos.RaftPeerProto> newPeers =\n+        newRaftConfiguration.getPeersList();\n+    LOG.info(\"Received Configuration change notification from Ratis. New Peer\" +\n+        \" list:\\n{}\", newPeers);\n+    for (RaftProtos.RaftPeerProto raftPeerProto : newPeers) {\n+      String omNodeId = RaftPeerId.valueOf(raftPeerProto.getId()).toString();\n+      if (!ozoneManager.doesPeerExist(omNodeId)) {\n+        LOG.info(\"Adding new OM {} to the Peer list.\", omNodeId);\n+        ozoneManager.addOMNodeToPeers(omNodeId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b804603308088b06211f384aee4c4e376dd791e"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDUwNzYxOA==", "bodyText": "Looks like this is taken care of. With this       // Load new configuration object to read in new peer information\nsetConfiguration(new OzoneConfiguration());\nSo, here it reloads config from disk again? Have you tried on a docker/cluster to verify this. (From reading code looks like config load has taken care) Just curious.\nThe only thing is when they add a new node, the users should change the config on all nodes.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r640507618", "createdAt": "2021-05-27T10:44:30Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java", "diffHunk": "@@ -166,6 +167,29 @@ public void notifyTermIndexUpdated(long currentTerm, long index) {\n     computeAndUpdateLastAppliedIndex(index, currentTerm, null, false);\n   }\n \n+  /**\n+   * Called to notify state machine about configuration changes.\n+   * Configurations changes include addition of newly bootstrapped OM.\n+   */\n+  @Override\n+  public void notifyConfigurationChanged(long term, long index,\n+      RaftProtos.RaftConfigurationProto newRaftConfiguration) {\n+    List<RaftProtos.RaftPeerProto> newPeers =\n+        newRaftConfiguration.getPeersList();\n+    LOG.info(\"Received Configuration change notification from Ratis. New Peer\" +\n+        \" list:\\n{}\", newPeers);\n+    for (RaftProtos.RaftPeerProto raftPeerProto : newPeers) {\n+      String omNodeId = RaftPeerId.valueOf(raftPeerProto.getId()).toString();\n+      if (!ozoneManager.doesPeerExist(omNodeId)) {\n+        LOG.info(\"Adding new OM {} to the Peer list.\", omNodeId);\n+        ozoneManager.addOMNodeToPeers(omNodeId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDQ3MTYxMQ=="}, "originalCommit": {"oid": "9b804603308088b06211f384aee4c4e376dd791e"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDkwOTYxMA==", "bodyText": "Yes, tried it out on a docker cluster and the config is reloaded from disk.\n\nThe only thing is when they add a new node, the users should change the config on all nodes.\nYes that is a requirement to ensure that if the cluster is restarted, the old nodes have information about the new node.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r640909610", "createdAt": "2021-05-27T19:31:21Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java", "diffHunk": "@@ -166,6 +167,29 @@ public void notifyTermIndexUpdated(long currentTerm, long index) {\n     computeAndUpdateLastAppliedIndex(index, currentTerm, null, false);\n   }\n \n+  /**\n+   * Called to notify state machine about configuration changes.\n+   * Configurations changes include addition of newly bootstrapped OM.\n+   */\n+  @Override\n+  public void notifyConfigurationChanged(long term, long index,\n+      RaftProtos.RaftConfigurationProto newRaftConfiguration) {\n+    List<RaftProtos.RaftPeerProto> newPeers =\n+        newRaftConfiguration.getPeersList();\n+    LOG.info(\"Received Configuration change notification from Ratis. New Peer\" +\n+        \" list:\\n{}\", newPeers);\n+    for (RaftProtos.RaftPeerProto raftPeerProto : newPeers) {\n+      String omNodeId = RaftPeerId.valueOf(raftPeerProto.getId()).toString();\n+      if (!ozoneManager.doesPeerExist(omNodeId)) {\n+        LOG.info(\"Adding new OM {} to the Peer list.\", omNodeId);\n+        ozoneManager.addOMNodeToPeers(omNodeId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDQ3MTYxMQ=="}, "originalCommit": {"oid": "9b804603308088b06211f384aee4c4e376dd791e"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MjE5OTM0OQ==", "bodyText": "We can revisit this if we want to support with out change in config.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r642199349", "createdAt": "2021-05-31T04:15:50Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java", "diffHunk": "@@ -166,6 +167,29 @@ public void notifyTermIndexUpdated(long currentTerm, long index) {\n     computeAndUpdateLastAppliedIndex(index, currentTerm, null, false);\n   }\n \n+  /**\n+   * Called to notify state machine about configuration changes.\n+   * Configurations changes include addition of newly bootstrapped OM.\n+   */\n+  @Override\n+  public void notifyConfigurationChanged(long term, long index,\n+      RaftProtos.RaftConfigurationProto newRaftConfiguration) {\n+    List<RaftProtos.RaftPeerProto> newPeers =\n+        newRaftConfiguration.getPeersList();\n+    LOG.info(\"Received Configuration change notification from Ratis. New Peer\" +\n+        \" list:\\n{}\", newPeers);\n+    for (RaftProtos.RaftPeerProto raftPeerProto : newPeers) {\n+      String omNodeId = RaftPeerId.valueOf(raftPeerProto.getId()).toString();\n+      if (!ozoneManager.doesPeerExist(omNodeId)) {\n+        LOG.info(\"Adding new OM {} to the Peer list.\", omNodeId);\n+        ozoneManager.addOMNodeToPeers(omNodeId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDQ3MTYxMQ=="}, "originalCommit": {"oid": "9b804603308088b06211f384aee4c4e376dd791e"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA2MTg2NTAzOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/om/TestOzoneManagerBootstrap.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yN1QxMDowMjoxMVrOJizxzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yN1QyMToxNzo0MlrOJjR56w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDQ3OTY5Mg==", "bodyText": "We commit to DB once double buffer flushes. Do you think we need some wait or read from StateMachine and getLastAppliedIndex?", "url": "https://github.com/apache/ozone/pull/1494#discussion_r640479692", "createdAt": "2021-05-27T10:02:11Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/om/TestOzoneManagerBootstrap.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om;\n+\n+import com.google.common.base.Supplier;\n+import java.io.File;\n+import java.io.FileFilter;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdfs.server.common.Storage;\n+import org.apache.hadoop.ozone.MiniOzoneCluster;\n+import org.apache.hadoop.ozone.MiniOzoneHAClusterImpl;\n+import org.apache.hadoop.ozone.client.ObjectStore;\n+import org.apache.hadoop.ozone.client.OzoneBucket;\n+import org.apache.hadoop.ozone.client.OzoneClientFactory;\n+import org.apache.hadoop.ozone.client.OzoneVolume;\n+import org.apache.hadoop.ozone.om.ratis.OzoneManagerRatisServer;\n+import org.apache.hadoop.test.GenericTestUtils;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.rules.Timeout;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.SCM_DUMMY_SERVICE_ID;\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_RATIS_SERVER_REQUEST_TIMEOUT_DEFAULT;\n+import static org.apache.hadoop.ozone.om.TestOzoneManagerHA.createKey;\n+\n+public class TestOzoneManagerBootstrap {\n+\n+  @Rule\n+  public ExpectedException exception = ExpectedException.none();\n+\n+  @Rule\n+  public Timeout timeout = new Timeout(500_000);\n+\n+  private MiniOzoneHAClusterImpl cluster = null;\n+  private ObjectStore objectStore;\n+  private OzoneConfiguration conf;\n+  private final String clusterId = UUID.randomUUID().toString();\n+  private final String scmId = UUID.randomUUID().toString();\n+\n+  private static final int NUM_INITIAL_OMS = 3;\n+\n+  private static final String OM_SERVICE_ID = \"om-bootstrap\";\n+  private static final String VOLUME_NAME;\n+  private static final String BUCKET_NAME;\n+\n+  private long lastTransactionIndex;\n+\n+  static {\n+    VOLUME_NAME = \"volume\" + RandomStringUtils.randomNumeric(5);\n+    BUCKET_NAME = \"bucket\" + RandomStringUtils.randomNumeric(5);\n+  }\n+\n+  private void setupCluster() throws Exception {\n+    setupCluster(NUM_INITIAL_OMS);\n+  }\n+\n+  private void setupCluster(int numInitialOMs) throws Exception {\n+    conf = new OzoneConfiguration();\n+    cluster = (MiniOzoneHAClusterImpl) MiniOzoneCluster.newHABuilder(conf)\n+        .setClusterId(clusterId)\n+        .setScmId(scmId)\n+        .setSCMServiceId(SCM_DUMMY_SERVICE_ID)\n+        .setOMServiceId(OM_SERVICE_ID)\n+        .setNumOfOzoneManagers(numInitialOMs)\n+        .build();\n+    cluster.waitForClusterToBeReady();\n+    objectStore = OzoneClientFactory.getRpcClient(OM_SERVICE_ID, conf)\n+        .getObjectStore();\n+\n+    // Perform some transactions\n+    objectStore.createVolume(VOLUME_NAME);\n+    OzoneVolume volume = objectStore.getVolume(VOLUME_NAME);\n+    volume.createBucket(BUCKET_NAME);\n+    OzoneBucket bucket = volume.getBucket(BUCKET_NAME);\n+    createKey(bucket);\n+\n+    lastTransactionIndex = cluster.getOMLeader().getRatisSnapshotIndex();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b804603308088b06211f384aee4c4e376dd791e"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDk3MzI5MQ==", "bodyText": "Done. Getting SM's last applied index.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r640973291", "createdAt": "2021-05-27T21:17:42Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/om/TestOzoneManagerBootstrap.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om;\n+\n+import com.google.common.base.Supplier;\n+import java.io.File;\n+import java.io.FileFilter;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdfs.server.common.Storage;\n+import org.apache.hadoop.ozone.MiniOzoneCluster;\n+import org.apache.hadoop.ozone.MiniOzoneHAClusterImpl;\n+import org.apache.hadoop.ozone.client.ObjectStore;\n+import org.apache.hadoop.ozone.client.OzoneBucket;\n+import org.apache.hadoop.ozone.client.OzoneClientFactory;\n+import org.apache.hadoop.ozone.client.OzoneVolume;\n+import org.apache.hadoop.ozone.om.ratis.OzoneManagerRatisServer;\n+import org.apache.hadoop.test.GenericTestUtils;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.rules.Timeout;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.SCM_DUMMY_SERVICE_ID;\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_RATIS_SERVER_REQUEST_TIMEOUT_DEFAULT;\n+import static org.apache.hadoop.ozone.om.TestOzoneManagerHA.createKey;\n+\n+public class TestOzoneManagerBootstrap {\n+\n+  @Rule\n+  public ExpectedException exception = ExpectedException.none();\n+\n+  @Rule\n+  public Timeout timeout = new Timeout(500_000);\n+\n+  private MiniOzoneHAClusterImpl cluster = null;\n+  private ObjectStore objectStore;\n+  private OzoneConfiguration conf;\n+  private final String clusterId = UUID.randomUUID().toString();\n+  private final String scmId = UUID.randomUUID().toString();\n+\n+  private static final int NUM_INITIAL_OMS = 3;\n+\n+  private static final String OM_SERVICE_ID = \"om-bootstrap\";\n+  private static final String VOLUME_NAME;\n+  private static final String BUCKET_NAME;\n+\n+  private long lastTransactionIndex;\n+\n+  static {\n+    VOLUME_NAME = \"volume\" + RandomStringUtils.randomNumeric(5);\n+    BUCKET_NAME = \"bucket\" + RandomStringUtils.randomNumeric(5);\n+  }\n+\n+  private void setupCluster() throws Exception {\n+    setupCluster(NUM_INITIAL_OMS);\n+  }\n+\n+  private void setupCluster(int numInitialOMs) throws Exception {\n+    conf = new OzoneConfiguration();\n+    cluster = (MiniOzoneHAClusterImpl) MiniOzoneCluster.newHABuilder(conf)\n+        .setClusterId(clusterId)\n+        .setScmId(scmId)\n+        .setSCMServiceId(SCM_DUMMY_SERVICE_ID)\n+        .setOMServiceId(OM_SERVICE_ID)\n+        .setNumOfOzoneManagers(numInitialOMs)\n+        .build();\n+    cluster.waitForClusterToBeReady();\n+    objectStore = OzoneClientFactory.getRpcClient(OM_SERVICE_ID, conf)\n+        .getObjectStore();\n+\n+    // Perform some transactions\n+    objectStore.createVolume(VOLUME_NAME);\n+    OzoneVolume volume = objectStore.getVolume(VOLUME_NAME);\n+    volume.createBucket(BUCKET_NAME);\n+    OzoneBucket bucket = volume.getBucket(BUCKET_NAME);\n+    createKey(bucket);\n+\n+    lastTransactionIndex = cluster.getOMLeader().getRatisSnapshotIndex();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDQ3OTY5Mg=="}, "originalCommit": {"oid": "9b804603308088b06211f384aee4c4e376dd791e"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA2MTg4MDY3OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/MiniOzoneHAClusterImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yN1QxMDowNTozNFrOJiz7KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yN1QyMDowMDoyOVrOJjPIRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDQ4MjA4OA==", "bodyText": "Question:\nNot understood the reason to do this.\nAs our MiniOzoneHACluster is only used in non-secure, why certClient is being set here?", "url": "https://github.com/apache/ozone/pull/1494#discussion_r640482088", "createdAt": "2021-05-27T10:05:34Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/MiniOzoneHAClusterImpl.java", "diffHunk": "@@ -652,10 +667,158 @@ private void initOMHAConfig(int basePort) throws IOException {\n         conf.setInt(omRatisPortKey, port + 4);\n       }\n \n-      conf.set(omNodesKey, omNodesKeyValue.substring(1));\n+      conf.set(omNodesKey, String.join(\",\", omNodeIds));\n+    }\n+  }\n+\n+  /**\n+   * Bootstrap new OM and add to existing OM HA service ring.\n+   * @return new OM nodeId\n+   */\n+  public void bootstrapOzoneManager(String omNodeId) throws Exception {\n+\n+    int basePort;\n+    int retryCount = 0;\n+\n+    OzoneManager om = null;\n+\n+    long leaderSnapshotIndex = getOMLeader().getRatisSnapshotIndex();\n+\n+    while (true) {\n+      try {\n+        basePort = 10000 + RANDOM.nextInt(1000) * 4;\n+        OzoneConfiguration newConf = addNewOMToConfig(getOMServiceId(),\n+            omNodeId, basePort);\n+\n+        om = bootstrapNewOM(omNodeId);\n+\n+        // Get the CertClient from an existing OM and set for new OM\n+        if (omhaService.getServiceByIndex(0).getCertificateClient() != null) {\n+          om.setCertClient(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b804603308088b06211f384aee4c4e376dd791e"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDkyNzgxMw==", "bodyText": "You are right. I replicated this from MiniOzoneCluster. Will remove it.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r640927813", "createdAt": "2021-05-27T20:00:29Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/MiniOzoneHAClusterImpl.java", "diffHunk": "@@ -652,10 +667,158 @@ private void initOMHAConfig(int basePort) throws IOException {\n         conf.setInt(omRatisPortKey, port + 4);\n       }\n \n-      conf.set(omNodesKey, omNodesKeyValue.substring(1));\n+      conf.set(omNodesKey, String.join(\",\", omNodeIds));\n+    }\n+  }\n+\n+  /**\n+   * Bootstrap new OM and add to existing OM HA service ring.\n+   * @return new OM nodeId\n+   */\n+  public void bootstrapOzoneManager(String omNodeId) throws Exception {\n+\n+    int basePort;\n+    int retryCount = 0;\n+\n+    OzoneManager om = null;\n+\n+    long leaderSnapshotIndex = getOMLeader().getRatisSnapshotIndex();\n+\n+    while (true) {\n+      try {\n+        basePort = 10000 + RANDOM.nextInt(1000) * 4;\n+        OzoneConfiguration newConf = addNewOMToConfig(getOMServiceId(),\n+            omNodeId, basePort);\n+\n+        om = bootstrapNewOM(omNodeId);\n+\n+        // Get the CertClient from an existing OM and set for new OM\n+        if (omhaService.getServiceByIndex(0).getCertificateClient() != null) {\n+          om.setCertClient(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDQ4MjA4OA=="}, "originalCommit": {"oid": "9b804603308088b06211f384aee4c4e376dd791e"}, "originalPosition": 183}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA2MTg5Nzg1OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/om/TestOzoneManagerBootstrap.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yN1QxMDowOToxMVrOJi0FdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yN1QyMToxNzowOVrOJjR45w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDQ4NDcyNA==", "bodyText": "Increase time duration here to avoid flakiness in CI runs.\nAnd also as method name says check OM Exists in peerList, can we check from ratis server peer info also?", "url": "https://github.com/apache/ozone/pull/1494#discussion_r640484724", "createdAt": "2021-05-27T10:09:11Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/om/TestOzoneManagerBootstrap.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om;\n+\n+import com.google.common.base.Supplier;\n+import java.io.File;\n+import java.io.FileFilter;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdfs.server.common.Storage;\n+import org.apache.hadoop.ozone.MiniOzoneCluster;\n+import org.apache.hadoop.ozone.MiniOzoneHAClusterImpl;\n+import org.apache.hadoop.ozone.client.ObjectStore;\n+import org.apache.hadoop.ozone.client.OzoneBucket;\n+import org.apache.hadoop.ozone.client.OzoneClientFactory;\n+import org.apache.hadoop.ozone.client.OzoneVolume;\n+import org.apache.hadoop.ozone.om.ratis.OzoneManagerRatisServer;\n+import org.apache.hadoop.test.GenericTestUtils;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.rules.Timeout;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.SCM_DUMMY_SERVICE_ID;\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_RATIS_SERVER_REQUEST_TIMEOUT_DEFAULT;\n+import static org.apache.hadoop.ozone.om.TestOzoneManagerHA.createKey;\n+\n+public class TestOzoneManagerBootstrap {\n+\n+  @Rule\n+  public ExpectedException exception = ExpectedException.none();\n+\n+  @Rule\n+  public Timeout timeout = new Timeout(500_000);\n+\n+  private MiniOzoneHAClusterImpl cluster = null;\n+  private ObjectStore objectStore;\n+  private OzoneConfiguration conf;\n+  private final String clusterId = UUID.randomUUID().toString();\n+  private final String scmId = UUID.randomUUID().toString();\n+\n+  private static final int NUM_INITIAL_OMS = 3;\n+\n+  private static final String OM_SERVICE_ID = \"om-bootstrap\";\n+  private static final String VOLUME_NAME;\n+  private static final String BUCKET_NAME;\n+\n+  private long lastTransactionIndex;\n+\n+  static {\n+    VOLUME_NAME = \"volume\" + RandomStringUtils.randomNumeric(5);\n+    BUCKET_NAME = \"bucket\" + RandomStringUtils.randomNumeric(5);\n+  }\n+\n+  private void setupCluster() throws Exception {\n+    setupCluster(NUM_INITIAL_OMS);\n+  }\n+\n+  private void setupCluster(int numInitialOMs) throws Exception {\n+    conf = new OzoneConfiguration();\n+    cluster = (MiniOzoneHAClusterImpl) MiniOzoneCluster.newHABuilder(conf)\n+        .setClusterId(clusterId)\n+        .setScmId(scmId)\n+        .setSCMServiceId(SCM_DUMMY_SERVICE_ID)\n+        .setOMServiceId(OM_SERVICE_ID)\n+        .setNumOfOzoneManagers(numInitialOMs)\n+        .build();\n+    cluster.waitForClusterToBeReady();\n+    objectStore = OzoneClientFactory.getRpcClient(OM_SERVICE_ID, conf)\n+        .getObjectStore();\n+\n+    // Perform some transactions\n+    objectStore.createVolume(VOLUME_NAME);\n+    OzoneVolume volume = objectStore.getVolume(VOLUME_NAME);\n+    volume.createBucket(BUCKET_NAME);\n+    OzoneBucket bucket = volume.getBucket(BUCKET_NAME);\n+    createKey(bucket);\n+\n+    lastTransactionIndex = cluster.getOMLeader().getRatisSnapshotIndex();\n+  }\n+\n+  @After\n+  public void shutdown() throws Exception {\n+    if (cluster != null) {\n+      cluster.shutdown();\n+    }\n+  }\n+\n+  private void assertNewOMExistsInPeerList(String nodeId) throws Exception {\n+    for (OzoneManager om : cluster.getOzoneManagersList()) {\n+      Assert.assertTrue(\"New OM node \" + nodeId + \" not present in Peer list \" +\n+              \"of OM \" + om.getOMNodeId(), om.doesPeerExist(nodeId));\n+    }\n+    OzoneManager newOM = cluster.getOzoneManager(nodeId);\n+    GenericTestUtils.waitFor(new Supplier<Boolean>() {\n+      @Override\n+      public Boolean get() {\n+        try {\n+          return newOM.getRatisSnapshotIndex() >= lastTransactionIndex;\n+        } catch (IOException e) {\n+          return false;\n+        }\n+      }\n+    }, 100, 10000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b804603308088b06211f384aee4c4e376dd791e"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDk3MzAzMQ==", "bodyText": "Done", "url": "https://github.com/apache/ozone/pull/1494#discussion_r640973031", "createdAt": "2021-05-27T21:17:09Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/om/TestOzoneManagerBootstrap.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om;\n+\n+import com.google.common.base.Supplier;\n+import java.io.File;\n+import java.io.FileFilter;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdfs.server.common.Storage;\n+import org.apache.hadoop.ozone.MiniOzoneCluster;\n+import org.apache.hadoop.ozone.MiniOzoneHAClusterImpl;\n+import org.apache.hadoop.ozone.client.ObjectStore;\n+import org.apache.hadoop.ozone.client.OzoneBucket;\n+import org.apache.hadoop.ozone.client.OzoneClientFactory;\n+import org.apache.hadoop.ozone.client.OzoneVolume;\n+import org.apache.hadoop.ozone.om.ratis.OzoneManagerRatisServer;\n+import org.apache.hadoop.test.GenericTestUtils;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.rules.Timeout;\n+\n+import static org.apache.hadoop.ozone.OzoneConsts.SCM_DUMMY_SERVICE_ID;\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_RATIS_SERVER_REQUEST_TIMEOUT_DEFAULT;\n+import static org.apache.hadoop.ozone.om.TestOzoneManagerHA.createKey;\n+\n+public class TestOzoneManagerBootstrap {\n+\n+  @Rule\n+  public ExpectedException exception = ExpectedException.none();\n+\n+  @Rule\n+  public Timeout timeout = new Timeout(500_000);\n+\n+  private MiniOzoneHAClusterImpl cluster = null;\n+  private ObjectStore objectStore;\n+  private OzoneConfiguration conf;\n+  private final String clusterId = UUID.randomUUID().toString();\n+  private final String scmId = UUID.randomUUID().toString();\n+\n+  private static final int NUM_INITIAL_OMS = 3;\n+\n+  private static final String OM_SERVICE_ID = \"om-bootstrap\";\n+  private static final String VOLUME_NAME;\n+  private static final String BUCKET_NAME;\n+\n+  private long lastTransactionIndex;\n+\n+  static {\n+    VOLUME_NAME = \"volume\" + RandomStringUtils.randomNumeric(5);\n+    BUCKET_NAME = \"bucket\" + RandomStringUtils.randomNumeric(5);\n+  }\n+\n+  private void setupCluster() throws Exception {\n+    setupCluster(NUM_INITIAL_OMS);\n+  }\n+\n+  private void setupCluster(int numInitialOMs) throws Exception {\n+    conf = new OzoneConfiguration();\n+    cluster = (MiniOzoneHAClusterImpl) MiniOzoneCluster.newHABuilder(conf)\n+        .setClusterId(clusterId)\n+        .setScmId(scmId)\n+        .setSCMServiceId(SCM_DUMMY_SERVICE_ID)\n+        .setOMServiceId(OM_SERVICE_ID)\n+        .setNumOfOzoneManagers(numInitialOMs)\n+        .build();\n+    cluster.waitForClusterToBeReady();\n+    objectStore = OzoneClientFactory.getRpcClient(OM_SERVICE_ID, conf)\n+        .getObjectStore();\n+\n+    // Perform some transactions\n+    objectStore.createVolume(VOLUME_NAME);\n+    OzoneVolume volume = objectStore.getVolume(VOLUME_NAME);\n+    volume.createBucket(BUCKET_NAME);\n+    OzoneBucket bucket = volume.getBucket(BUCKET_NAME);\n+    createKey(bucket);\n+\n+    lastTransactionIndex = cluster.getOMLeader().getRatisSnapshotIndex();\n+  }\n+\n+  @After\n+  public void shutdown() throws Exception {\n+    if (cluster != null) {\n+      cluster.shutdown();\n+    }\n+  }\n+\n+  private void assertNewOMExistsInPeerList(String nodeId) throws Exception {\n+    for (OzoneManager om : cluster.getOzoneManagersList()) {\n+      Assert.assertTrue(\"New OM node \" + nodeId + \" not present in Peer list \" +\n+              \"of OM \" + om.getOMNodeId(), om.doesPeerExist(nodeId));\n+    }\n+    OzoneManager newOM = cluster.getOzoneManager(nodeId);\n+    GenericTestUtils.waitFor(new Supplier<Boolean>() {\n+      @Override\n+      public Boolean get() {\n+        try {\n+          return newOM.getRatisSnapshotIndex() >= lastTransactionIndex;\n+        } catch (IOException e) {\n+          return false;\n+        }\n+      }\n+    }, 100, 10000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDQ4NDcyNA=="}, "originalCommit": {"oid": "9b804603308088b06211f384aee4c4e376dd791e"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA2MTk1NTI5OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/MiniOzoneHAClusterImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yN1QxMDoyMjoyNlrOJi0n9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yN1QxMDoyMjoyNlrOJi0n9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDQ5MzU1Ng==", "bodyText": "Question: Here comments changed, but actual values not changed.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r640493556", "createdAt": "2021-05-27T10:22:26Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/MiniOzoneHAClusterImpl.java", "diffHunk": "@@ -65,11 +65,13 @@\n   private final OMHAService omhaService;\n   private final SCMHAService scmhaService;\n \n+  private final String clusterMetaPath;\n+\n   private int waitForClusterToBeReadyTimeout = 120000; // 2 min\n \n   private static final Random RANDOM = new Random();\n-  private static final int RATIS_RPC_TIMEOUT = 1000; // 1 second\n-  public static final int NODE_FAILURE_TIMEOUT = 2000; // 2 seconds\n+  private static final int RATIS_RPC_TIMEOUT = 1000; // 10 second", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b804603308088b06211f384aee4c4e376dd791e"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA3Mzc4MTc2OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerRatisServer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0zMVQwNDoxMzowOVrOJkcskQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wOVQxNzozNzoxN1rOJqfC3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MjE5ODY3Mw==", "bodyText": "Question: Why in exception case logging and return null, can't we throw an exception?\nAnd also can we add JavaDoc for this?", "url": "https://github.com/apache/ozone/pull/1494#discussion_r642198673", "createdAt": "2021-05-31T04:13:09Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerRatisServer.java", "diffHunk": "@@ -671,6 +672,21 @@ public RaftServerStatus checkLeaderStatus() {\n     return RaftServerStatus.NOT_LEADER;\n   }\n \n+  @VisibleForTesting\n+  public List<String> getCurrentPeersFromRaftConf() {\n+    try {\n+      Collection<RaftPeer> currentPeers =\n+          server.getDivision(raftGroupId).getRaftConf().getCurrentPeers();\n+      List<String> currentPeerList = new ArrayList<>();\n+      currentPeers.forEach(e -> currentPeerList.add(e.getId().toString()));\n+      return currentPeerList;\n+    } catch (IOException e) {\n+      // In this case we return not a leader.\n+      LOG.error(\"Failed to get RaftServer information. \", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70676be28b5751b82837377224ad6aaa0b3169ff"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODUyODYwNw==", "bodyText": "Done.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r648528607", "createdAt": "2021-06-09T17:37:17Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerRatisServer.java", "diffHunk": "@@ -671,6 +672,21 @@ public RaftServerStatus checkLeaderStatus() {\n     return RaftServerStatus.NOT_LEADER;\n   }\n \n+  @VisibleForTesting\n+  public List<String> getCurrentPeersFromRaftConf() {\n+    try {\n+      Collection<RaftPeer> currentPeers =\n+          server.getDivision(raftGroupId).getRaftConf().getCurrentPeers();\n+      List<String> currentPeerList = new ArrayList<>();\n+      currentPeers.forEach(e -> currentPeerList.add(e.getId().toString()));\n+      return currentPeerList;\n+    } catch (IOException e) {\n+      // In this case we return not a leader.\n+      LOG.error(\"Failed to get RaftServer information. \", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MjE5ODY3Mw=="}, "originalCommit": {"oid": "70676be28b5751b82837377224ad6aaa0b3169ff"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA3Mzk2Njc2OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0zMVQwNTo0OTo1NFrOJkeVow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wOVQxNzozNzoxMFrOJqfCjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MjIyNTU3MQ==", "bodyText": "Looks like we need to call computeAndUpdateLastAppliedIndex. As applyLogToStateMachine in StateMachineUpdater when configEntry, we call\nstateMachine.event().notifyConfigurationChanged(next.getTerm(), next.getIndex(), next.getConfigurationEntry());\nAs in OM StateMachine, we update lastAppliedIndex using computeAndUpdateLastAppliedIndex.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r642225571", "createdAt": "2021-05-31T05:49:54Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java", "diffHunk": "@@ -166,6 +167,29 @@ public void notifyTermIndexUpdated(long currentTerm, long index) {\n     computeAndUpdateLastAppliedIndex(index, currentTerm, null, false);\n   }\n \n+  /**\n+   * Called to notify state machine about configuration changes.\n+   * Configurations changes include addition of newly bootstrapped OM.\n+   */\n+  @Override\n+  public void notifyConfigurationChanged(long term, long index,\n+      RaftProtos.RaftConfigurationProto newRaftConfiguration) {\n+    List<RaftProtos.RaftPeerProto> newPeers =\n+        newRaftConfiguration.getPeersList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70676be28b5751b82837377224ad6aaa0b3169ff"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MjIyODkxMw==", "bodyText": "Sorry reading more looks we should be fine, as for any no state machine log entry we call notifyTermIndexUpdated.\nif (!next.hasStateMachineLogEntry()) {\n  stateMachine.event().notifyTermIndexUpdated(next.getTerm(), next.getIndex());\n}\n\nCan you also confirm once?", "url": "https://github.com/apache/ozone/pull/1494#discussion_r642228913", "createdAt": "2021-05-31T05:59:30Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java", "diffHunk": "@@ -166,6 +167,29 @@ public void notifyTermIndexUpdated(long currentTerm, long index) {\n     computeAndUpdateLastAppliedIndex(index, currentTerm, null, false);\n   }\n \n+  /**\n+   * Called to notify state machine about configuration changes.\n+   * Configurations changes include addition of newly bootstrapped OM.\n+   */\n+  @Override\n+  public void notifyConfigurationChanged(long term, long index,\n+      RaftProtos.RaftConfigurationProto newRaftConfiguration) {\n+    List<RaftProtos.RaftPeerProto> newPeers =\n+        newRaftConfiguration.getPeersList();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MjIyNTU3MQ=="}, "originalCommit": {"oid": "70676be28b5751b82837377224ad6aaa0b3169ff"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODUyODUyNw==", "bodyText": "Correct. If the log entry is a configurationEntry or a metadataEntry, then RaftServerImpl calls notifyTermIndexUpdated on StateMachine.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r648528527", "createdAt": "2021-06-09T17:37:10Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java", "diffHunk": "@@ -166,6 +167,29 @@ public void notifyTermIndexUpdated(long currentTerm, long index) {\n     computeAndUpdateLastAppliedIndex(index, currentTerm, null, false);\n   }\n \n+  /**\n+   * Called to notify state machine about configuration changes.\n+   * Configurations changes include addition of newly bootstrapped OM.\n+   */\n+  @Override\n+  public void notifyConfigurationChanged(long term, long index,\n+      RaftProtos.RaftConfigurationProto newRaftConfiguration) {\n+    List<RaftProtos.RaftPeerProto> newPeers =\n+        newRaftConfiguration.getPeersList();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MjIyNTU3MQ=="}, "originalCommit": {"oid": "70676be28b5751b82837377224ad6aaa0b3169ff"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDE1OTU3MTE5OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerRatisServer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yMVQwNTo1NjoxNVrOJwvtlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yM1QxNTowODoyN1rOJywQ8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NTA5MzE0Mg==", "bodyText": "Just got a question:\nWhy only new node being added is not added here, but other nodes in-ring are added here? (Is it okay to add other nodes here it self, or they also can be discovered during setConf?)\nI remember there was a reason behind this, can you provide info or if you are having another update to PR add some comments it will be easy to understand the reason behind it?", "url": "https://github.com/apache/ozone/pull/1494#discussion_r655093142", "createdAt": "2021-06-21T05:56:15Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerRatisServer.java", "diffHunk": "@@ -104,9 +104,127 @@\n   private final RaftGroupId raftGroupId;\n   private final RaftGroup raftGroup;\n   private final RaftPeerId raftPeerId;\n+  private final List<RaftPeer> raftPeers;\n \n   private final OzoneManager ozoneManager;\n   private final OzoneManagerStateMachine omStateMachine;\n+  private final String ratisStorageDir;\n+\n+  private final ClientId clientId = ClientId.randomId();\n+  private static final AtomicLong CALL_ID_COUNTER = new AtomicLong();\n+\n+  private static long nextCallId() {\n+    return CALL_ID_COUNTER.getAndIncrement() & Long.MAX_VALUE;\n+  }\n+\n+  /**\n+   * Returns an OM Ratis server.\n+   * @param conf configuration\n+   * @param om the OM instance starting the ratis server\n+   * @param raftGroupIdStr raft group id string\n+   * @param localRaftPeerId raft peer id of this Ratis server\n+   * @param addr address of the ratis server\n+   * @param peers peer nodes in the raft ring\n+   * @throws IOException\n+   */\n+  @SuppressWarnings({\"parameternumber\", \"java:S107\"})\n+  private OzoneManagerRatisServer(ConfigurationSource conf, OzoneManager om,\n+      String raftGroupIdStr, RaftPeerId localRaftPeerId,\n+      InetSocketAddress addr, List<RaftPeer> peers,\n+      SecurityConfig secConfig, CertificateClient certClient)\n+      throws IOException {\n+    this.ozoneManager = om;\n+    this.omRatisAddress = addr;\n+    this.port = addr.getPort();\n+    this.ratisStorageDir = OzoneManagerRatisUtils.getOMRatisDirectory(conf);\n+    RaftProperties serverProperties = newRaftProperties(conf);\n+\n+    this.raftPeerId = localRaftPeerId;\n+    this.raftGroupId = RaftGroupId.valueOf(\n+        getRaftGroupIdFromOmServiceId(raftGroupIdStr));\n+    this.raftPeers = Lists.newArrayList();\n+    this.raftPeers.addAll(peers);\n+    this.raftGroup = RaftGroup.valueOf(raftGroupId, peers);\n+\n+    StringBuilder raftPeersStr = new StringBuilder();\n+    for (RaftPeer peer : peers) {\n+      raftPeersStr.append(\", \").append(peer.getAddress());\n+    }\n+    LOG.info(\"Instantiating OM Ratis server with groupID: {} and \" +\n+        \"peers: {}\", raftGroupIdStr, raftPeersStr.toString().substring(2));\n+\n+    this.omStateMachine = getStateMachine(conf);\n+\n+    Parameters parameters = createServerTlsParameters(secConfig, certClient);\n+    this.server = RaftServer.newBuilder()\n+        .setServerId(this.raftPeerId)\n+        .setGroup(this.raftGroup)\n+        .setProperties(serverProperties)\n+        .setParameters(parameters)\n+        .setStateMachine(omStateMachine)\n+        .build();\n+  }\n+\n+  /**\n+   * Creates an instance of OzoneManagerRatisServer.\n+   */\n+  public static OzoneManagerRatisServer newOMRatisServer(\n+      ConfigurationSource ozoneConf, OzoneManager omProtocol,\n+      OMNodeDetails omNodeDetails, List<OMNodeDetails> peerNodes,\n+      SecurityConfig secConfig, CertificateClient certClient,\n+      boolean isBootstrapping) throws IOException {\n+\n+    // RaftGroupId is the omServiceId\n+    String omServiceId = omNodeDetails.getServiceId();\n+\n+    String omNodeId = omNodeDetails.getNodeId();\n+    RaftPeerId localRaftPeerId = RaftPeerId.getRaftPeerId(omNodeId);\n+\n+    InetSocketAddress ratisAddr = new InetSocketAddress(\n+        omNodeDetails.getInetAddress(), omNodeDetails.getRatisPort());\n+\n+    RaftPeer localRaftPeer = RaftPeer.newBuilder()\n+        .setId(localRaftPeerId)\n+        .setAddress(ratisAddr)\n+        .build();\n+\n+    List<RaftPeer> raftPeers = new ArrayList<>();\n+\n+    // If the OM is started in bootstrap mode, do not add it to the ratis ring.\n+    // It will be added later using SetConfiguration from the leader OM.\n+    if (isBootstrapping) {\n+      LOG.debug(\"OM started in Bootstrap mode and hence will not be added \" +\n+          \"to Ratis group during startup.\");\n+    } else {\n+      // On regular startup, add current OM to Ratis ring\n+      raftPeers.add(localRaftPeer);\n+    }\n+\n+    for (OMNodeDetails peerInfo : peerNodes) {\n+      String peerNodeId = peerInfo.getNodeId();\n+      RaftPeerId raftPeerId = RaftPeerId.valueOf(peerNodeId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c89974b47d1654ab7cdc36a504689bc41907218"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NTY5ODc5Nw==", "bodyText": "The existing peers can either be added to the RaftServer (of Bootstrapping node) during initialization or they can be added later when the bootstrapping node gets the setConf log entry from leader. AFAIK, either way should work the same.\nNow that you mention it, if we do not add the peers during initialization, then we can update the config once for with all new OM nodes. This would be useful when we want to bootstrap multiple OMs.\nWill update the PR to use the 2nd approach. Thanks.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r655698797", "createdAt": "2021-06-21T20:56:32Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerRatisServer.java", "diffHunk": "@@ -104,9 +104,127 @@\n   private final RaftGroupId raftGroupId;\n   private final RaftGroup raftGroup;\n   private final RaftPeerId raftPeerId;\n+  private final List<RaftPeer> raftPeers;\n \n   private final OzoneManager ozoneManager;\n   private final OzoneManagerStateMachine omStateMachine;\n+  private final String ratisStorageDir;\n+\n+  private final ClientId clientId = ClientId.randomId();\n+  private static final AtomicLong CALL_ID_COUNTER = new AtomicLong();\n+\n+  private static long nextCallId() {\n+    return CALL_ID_COUNTER.getAndIncrement() & Long.MAX_VALUE;\n+  }\n+\n+  /**\n+   * Returns an OM Ratis server.\n+   * @param conf configuration\n+   * @param om the OM instance starting the ratis server\n+   * @param raftGroupIdStr raft group id string\n+   * @param localRaftPeerId raft peer id of this Ratis server\n+   * @param addr address of the ratis server\n+   * @param peers peer nodes in the raft ring\n+   * @throws IOException\n+   */\n+  @SuppressWarnings({\"parameternumber\", \"java:S107\"})\n+  private OzoneManagerRatisServer(ConfigurationSource conf, OzoneManager om,\n+      String raftGroupIdStr, RaftPeerId localRaftPeerId,\n+      InetSocketAddress addr, List<RaftPeer> peers,\n+      SecurityConfig secConfig, CertificateClient certClient)\n+      throws IOException {\n+    this.ozoneManager = om;\n+    this.omRatisAddress = addr;\n+    this.port = addr.getPort();\n+    this.ratisStorageDir = OzoneManagerRatisUtils.getOMRatisDirectory(conf);\n+    RaftProperties serverProperties = newRaftProperties(conf);\n+\n+    this.raftPeerId = localRaftPeerId;\n+    this.raftGroupId = RaftGroupId.valueOf(\n+        getRaftGroupIdFromOmServiceId(raftGroupIdStr));\n+    this.raftPeers = Lists.newArrayList();\n+    this.raftPeers.addAll(peers);\n+    this.raftGroup = RaftGroup.valueOf(raftGroupId, peers);\n+\n+    StringBuilder raftPeersStr = new StringBuilder();\n+    for (RaftPeer peer : peers) {\n+      raftPeersStr.append(\", \").append(peer.getAddress());\n+    }\n+    LOG.info(\"Instantiating OM Ratis server with groupID: {} and \" +\n+        \"peers: {}\", raftGroupIdStr, raftPeersStr.toString().substring(2));\n+\n+    this.omStateMachine = getStateMachine(conf);\n+\n+    Parameters parameters = createServerTlsParameters(secConfig, certClient);\n+    this.server = RaftServer.newBuilder()\n+        .setServerId(this.raftPeerId)\n+        .setGroup(this.raftGroup)\n+        .setProperties(serverProperties)\n+        .setParameters(parameters)\n+        .setStateMachine(omStateMachine)\n+        .build();\n+  }\n+\n+  /**\n+   * Creates an instance of OzoneManagerRatisServer.\n+   */\n+  public static OzoneManagerRatisServer newOMRatisServer(\n+      ConfigurationSource ozoneConf, OzoneManager omProtocol,\n+      OMNodeDetails omNodeDetails, List<OMNodeDetails> peerNodes,\n+      SecurityConfig secConfig, CertificateClient certClient,\n+      boolean isBootstrapping) throws IOException {\n+\n+    // RaftGroupId is the omServiceId\n+    String omServiceId = omNodeDetails.getServiceId();\n+\n+    String omNodeId = omNodeDetails.getNodeId();\n+    RaftPeerId localRaftPeerId = RaftPeerId.getRaftPeerId(omNodeId);\n+\n+    InetSocketAddress ratisAddr = new InetSocketAddress(\n+        omNodeDetails.getInetAddress(), omNodeDetails.getRatisPort());\n+\n+    RaftPeer localRaftPeer = RaftPeer.newBuilder()\n+        .setId(localRaftPeerId)\n+        .setAddress(ratisAddr)\n+        .build();\n+\n+    List<RaftPeer> raftPeers = new ArrayList<>();\n+\n+    // If the OM is started in bootstrap mode, do not add it to the ratis ring.\n+    // It will be added later using SetConfiguration from the leader OM.\n+    if (isBootstrapping) {\n+      LOG.debug(\"OM started in Bootstrap mode and hence will not be added \" +\n+          \"to Ratis group during startup.\");\n+    } else {\n+      // On regular startup, add current OM to Ratis ring\n+      raftPeers.add(localRaftPeer);\n+    }\n+\n+    for (OMNodeDetails peerInfo : peerNodes) {\n+      String peerNodeId = peerInfo.getNodeId();\n+      RaftPeerId raftPeerId = RaftPeerId.valueOf(peerNodeId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NTA5MzE0Mg=="}, "originalCommit": {"oid": "7c89974b47d1654ab7cdc36a504689bc41907218"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NzE5OTM0Ng==", "bodyText": "Updated the patch. Please take a look. Thanks.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r657199346", "createdAt": "2021-06-23T15:08:27Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerRatisServer.java", "diffHunk": "@@ -104,9 +104,127 @@\n   private final RaftGroupId raftGroupId;\n   private final RaftGroup raftGroup;\n   private final RaftPeerId raftPeerId;\n+  private final List<RaftPeer> raftPeers;\n \n   private final OzoneManager ozoneManager;\n   private final OzoneManagerStateMachine omStateMachine;\n+  private final String ratisStorageDir;\n+\n+  private final ClientId clientId = ClientId.randomId();\n+  private static final AtomicLong CALL_ID_COUNTER = new AtomicLong();\n+\n+  private static long nextCallId() {\n+    return CALL_ID_COUNTER.getAndIncrement() & Long.MAX_VALUE;\n+  }\n+\n+  /**\n+   * Returns an OM Ratis server.\n+   * @param conf configuration\n+   * @param om the OM instance starting the ratis server\n+   * @param raftGroupIdStr raft group id string\n+   * @param localRaftPeerId raft peer id of this Ratis server\n+   * @param addr address of the ratis server\n+   * @param peers peer nodes in the raft ring\n+   * @throws IOException\n+   */\n+  @SuppressWarnings({\"parameternumber\", \"java:S107\"})\n+  private OzoneManagerRatisServer(ConfigurationSource conf, OzoneManager om,\n+      String raftGroupIdStr, RaftPeerId localRaftPeerId,\n+      InetSocketAddress addr, List<RaftPeer> peers,\n+      SecurityConfig secConfig, CertificateClient certClient)\n+      throws IOException {\n+    this.ozoneManager = om;\n+    this.omRatisAddress = addr;\n+    this.port = addr.getPort();\n+    this.ratisStorageDir = OzoneManagerRatisUtils.getOMRatisDirectory(conf);\n+    RaftProperties serverProperties = newRaftProperties(conf);\n+\n+    this.raftPeerId = localRaftPeerId;\n+    this.raftGroupId = RaftGroupId.valueOf(\n+        getRaftGroupIdFromOmServiceId(raftGroupIdStr));\n+    this.raftPeers = Lists.newArrayList();\n+    this.raftPeers.addAll(peers);\n+    this.raftGroup = RaftGroup.valueOf(raftGroupId, peers);\n+\n+    StringBuilder raftPeersStr = new StringBuilder();\n+    for (RaftPeer peer : peers) {\n+      raftPeersStr.append(\", \").append(peer.getAddress());\n+    }\n+    LOG.info(\"Instantiating OM Ratis server with groupID: {} and \" +\n+        \"peers: {}\", raftGroupIdStr, raftPeersStr.toString().substring(2));\n+\n+    this.omStateMachine = getStateMachine(conf);\n+\n+    Parameters parameters = createServerTlsParameters(secConfig, certClient);\n+    this.server = RaftServer.newBuilder()\n+        .setServerId(this.raftPeerId)\n+        .setGroup(this.raftGroup)\n+        .setProperties(serverProperties)\n+        .setParameters(parameters)\n+        .setStateMachine(omStateMachine)\n+        .build();\n+  }\n+\n+  /**\n+   * Creates an instance of OzoneManagerRatisServer.\n+   */\n+  public static OzoneManagerRatisServer newOMRatisServer(\n+      ConfigurationSource ozoneConf, OzoneManager omProtocol,\n+      OMNodeDetails omNodeDetails, List<OMNodeDetails> peerNodes,\n+      SecurityConfig secConfig, CertificateClient certClient,\n+      boolean isBootstrapping) throws IOException {\n+\n+    // RaftGroupId is the omServiceId\n+    String omServiceId = omNodeDetails.getServiceId();\n+\n+    String omNodeId = omNodeDetails.getNodeId();\n+    RaftPeerId localRaftPeerId = RaftPeerId.getRaftPeerId(omNodeId);\n+\n+    InetSocketAddress ratisAddr = new InetSocketAddress(\n+        omNodeDetails.getInetAddress(), omNodeDetails.getRatisPort());\n+\n+    RaftPeer localRaftPeer = RaftPeer.newBuilder()\n+        .setId(localRaftPeerId)\n+        .setAddress(ratisAddr)\n+        .build();\n+\n+    List<RaftPeer> raftPeers = new ArrayList<>();\n+\n+    // If the OM is started in bootstrap mode, do not add it to the ratis ring.\n+    // It will be added later using SetConfiguration from the leader OM.\n+    if (isBootstrapping) {\n+      LOG.debug(\"OM started in Bootstrap mode and hence will not be added \" +\n+          \"to Ratis group during startup.\");\n+    } else {\n+      // On regular startup, add current OM to Ratis ring\n+      raftPeers.add(localRaftPeer);\n+    }\n+\n+    for (OMNodeDetails peerInfo : peerNodes) {\n+      String peerNodeId = peerInfo.getNodeId();\n+      RaftPeerId raftPeerId = RaftPeerId.valueOf(peerNodeId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NTA5MzE0Mg=="}, "originalCommit": {"oid": "7c89974b47d1654ab7cdc36a504689bc41907218"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDE1OTYwODYxOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/utils/OzoneManagerRatisUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yMVQwNjoxMDo0NlrOJwwDhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yM1QxNTowODowN1rOJywPRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NTA5ODc1Ng==", "bodyText": "Add javadocs to public methods", "url": "https://github.com/apache/ozone/pull/1494#discussion_r655098756", "createdAt": "2021-06-21T06:10:46Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/utils/OzoneManagerRatisUtils.java", "diffHunk": "@@ -340,4 +359,70 @@ public static boolean isBucketFSOptimized() {\n     return isBucketFSOptimized;\n   }\n \n+  /**\n+   * Get the local directory where ratis logs will be stored.\n+   */\n+  public static String getOMRatisDirectory(ConfigurationSource conf) {\n+    String storageDir = conf.get(OMConfigKeys.OZONE_OM_RATIS_STORAGE_DIR);\n+\n+    if (Strings.isNullOrEmpty(storageDir)) {\n+      storageDir = ServerUtils.getDefaultRatisDirectory(conf);\n+    }\n+    return storageDir;\n+  }\n+\n+  public static String getOMRatisSnapshotDirectory(ConfigurationSource conf) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c89974b47d1654ab7cdc36a504689bc41907218"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NzE5ODkxNw==", "bodyText": "Done.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r657198917", "createdAt": "2021-06-23T15:08:07Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/utils/OzoneManagerRatisUtils.java", "diffHunk": "@@ -340,4 +359,70 @@ public static boolean isBucketFSOptimized() {\n     return isBucketFSOptimized;\n   }\n \n+  /**\n+   * Get the local directory where ratis logs will be stored.\n+   */\n+  public static String getOMRatisDirectory(ConfigurationSource conf) {\n+    String storageDir = conf.get(OMConfigKeys.OZONE_OM_RATIS_STORAGE_DIR);\n+\n+    if (Strings.isNullOrEmpty(storageDir)) {\n+      storageDir = ServerUtils.getDefaultRatisDirectory(conf);\n+    }\n+    return storageDir;\n+  }\n+\n+  public static String getOMRatisSnapshotDirectory(ConfigurationSource conf) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NTA5ODc1Ng=="}, "originalCommit": {"oid": "7c89974b47d1654ab7cdc36a504689bc41907218"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDI0MzQ4NDI2OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xMlQwNzoxNzo1NlrOJ8wIQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xNlQyMzowMzozN1rOKAc-CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NzY4Mjg4Mg==", "bodyText": "In normal OM start node, ratisServer peer list has local + peer.\n if (!isBootstrapping) {\n      // On regular startup, add all OMs to Ratis ring\n      raftPeers.add(localRaftPeer);\n\nIn bootstrap case, local node is not added to ratis server peer list.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r667682882", "createdAt": "2021-07-12T07:17:56Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -1339,7 +1339,38 @@ public void bootstrap(OMNodeDetails newOMNode) throws IOException {\n   }\n \n   /**\n-   * Add a new OM Node to the HA cluster. This call comes from OMRatisServer\n+   * When OMStateMachine receives a configuration change update, it calls\n+   * this function to update the peers list, if required.\n+   */\n+  public void updatePeerList(List<String> omNodeIds) {\n+    List<String> ratisServerPeerIdsList = omRatisServer.getPeerIds();\n+    for (String omNodeId : omNodeIds) {\n+      if (getOMNodeId().equals(omNodeId)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdb9dfd27201844e01f71150dafb6f7a5208bdfe"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NzY4Njk5Mg==", "bodyText": "While reading more, I have observed that before this change, we have not added local OM node to peer node  list before(raftPeers). Should we have the same behavior?. So, should we remove adding local node to peer list?\n      // On regular startup, add all OMs to Ratis ring\n      raftPeers.add(localRaftPeer);", "url": "https://github.com/apache/ozone/pull/1494#discussion_r667686992", "createdAt": "2021-07-12T07:24:32Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -1339,7 +1339,38 @@ public void bootstrap(OMNodeDetails newOMNode) throws IOException {\n   }\n \n   /**\n-   * Add a new OM Node to the HA cluster. This call comes from OMRatisServer\n+   * When OMStateMachine receives a configuration change update, it calls\n+   * this function to update the peers list, if required.\n+   */\n+  public void updatePeerList(List<String> omNodeIds) {\n+    List<String> ratisServerPeerIdsList = omRatisServer.getPeerIds();\n+    for (String omNodeId : omNodeIds) {\n+      if (getOMNodeId().equals(omNodeId)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NzY4Mjg4Mg=="}, "originalCommit": {"oid": "cdb9dfd27201844e01f71150dafb6f7a5208bdfe"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTkxNTc4NA==", "bodyText": "In bootstrap case, local node is not added to ratis server peer list.\n\nYes. This is because the local node is not part of the ratis ring yet. When the SetConfiguration is executed, this node would be added to the peer list.\n\nWhile reading more, I have observed that before this change, we have not added local OM node to peer node list before(raftPeers). Should we have the same behavior?. So, should we remove adding local node to peer list?\n\nBefore this change also the local OM node was added to the peer list in OMRatisServer. Are you referring to any other class?", "url": "https://github.com/apache/ozone/pull/1494#discussion_r669915784", "createdAt": "2021-07-14T20:04:28Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -1339,7 +1339,38 @@ public void bootstrap(OMNodeDetails newOMNode) throws IOException {\n   }\n \n   /**\n-   * Add a new OM Node to the HA cluster. This call comes from OMRatisServer\n+   * When OMStateMachine receives a configuration change update, it calls\n+   * this function to update the peers list, if required.\n+   */\n+  public void updatePeerList(List<String> omNodeIds) {\n+    List<String> ratisServerPeerIdsList = omRatisServer.getPeerIds();\n+    for (String omNodeId : omNodeIds) {\n+      if (getOMNodeId().equals(omNodeId)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NzY4Mjg4Mg=="}, "originalCommit": {"oid": "cdb9dfd27201844e01f71150dafb6f7a5208bdfe"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MDE0NjM4NA==", "bodyText": "newOMRatisServer\n    for (OMNodeDetails peerInfo : peerNodes) {\n      String peerNodeId = peerInfo.getNodeId();\n      RaftPeerId raftPeerId = RaftPeerId.valueOf(peerNodeId);\n      RaftPeer raftPeer;\n      if (peerInfo.isHostUnresolved()) {\n        raftPeer = RaftPeer.newBuilder()\n            .setId(raftPeerId)\n            .setAddress(peerInfo.getRatisHostPortStr())\n            .build();\n      } else {\n        InetSocketAddress peerRatisAddr = new InetSocketAddress(\n            peerInfo.getInetAddress(), peerInfo.getRatisPort());\n        raftPeer = RaftPeer.newBuilder()\n            .setId(raftPeerId)\n            .setAddress(peerRatisAddr)\n            .build();\n      }\n\n      // Add other OM nodes belonging to the same OM service to the Ratis ring\n      raftPeers.add(raftPeer);\n    }\n\n    return new OzoneManagerRatisServer(ozoneConf, omProtocol, omServiceId,\n        localRaftPeerId, ratisAddr, raftPeers, secConfig, certClient);\n\nLooks like previously we don't save raftPeers in OzoneManagerRatisServer.\nBut now with this PR, on old node all nodes peer+local will be in peer list.\n\nif (!isBootstrapping) { \n// On regular startup, add all OMs to Ratis ring \nraftPeers.add(localRaftPeer);\n\nWhere as for bootstrap due to this skip, we don't add\nif (getOMNodeId().equals(omNodeId)) {\ncontinue;\n}\n\nDue to this on bootstrap node peerlist does not include local node\nThere is a difference in raftPeers list in bootstrap and old node.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r670146384", "createdAt": "2021-07-15T05:34:23Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -1339,7 +1339,38 @@ public void bootstrap(OMNodeDetails newOMNode) throws IOException {\n   }\n \n   /**\n-   * Add a new OM Node to the HA cluster. This call comes from OMRatisServer\n+   * When OMStateMachine receives a configuration change update, it calls\n+   * this function to update the peers list, if required.\n+   */\n+  public void updatePeerList(List<String> omNodeIds) {\n+    List<String> ratisServerPeerIdsList = omRatisServer.getPeerIds();\n+    for (String omNodeId : omNodeIds) {\n+      if (getOMNodeId().equals(omNodeId)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NzY4Mjg4Mg=="}, "originalCommit": {"oid": "cdb9dfd27201844e01f71150dafb6f7a5208bdfe"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MDc0NjgyNg==", "bodyText": "There is a difference in raftPeers list in bootstrap and old node.\n\nCorrect. On a bootstrapping node, we do not add the local node to raftPeer list. This is done later when a setConfiguration request is executed and it calls OMRatisServer#addRaftPeer().\n  /**\n   * Add given node to list of RaftPeers.\n   */\n  public void addRaftPeer(OMNodeDetails omNodeDetails) {\n    InetSocketAddress newOMRatisAddr = new InetSocketAddress(\n        omNodeDetails.getHostAddress(), omNodeDetails.getRatisPort());\n\n    raftPeers.add(RaftPeer.newBuilder()\n        .setId(RaftPeerId.valueOf(omNodeDetails.getNodeId()))\n        .setAddress(newOMRatisAddr)\n        .build());\n\n    LOG.info(\"Added OM {} to Ratis Peers list.\", omNodeDetails.getNodeId());\n  }\n\nAs for the old code, the local node was added to raftPeers there too (OzoneManagerRatisServer Line#348 in old code).", "url": "https://github.com/apache/ozone/pull/1494#discussion_r670746826", "createdAt": "2021-07-15T19:25:51Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -1339,7 +1339,38 @@ public void bootstrap(OMNodeDetails newOMNode) throws IOException {\n   }\n \n   /**\n-   * Add a new OM Node to the HA cluster. This call comes from OMRatisServer\n+   * When OMStateMachine receives a configuration change update, it calls\n+   * this function to update the peers list, if required.\n+   */\n+  public void updatePeerList(List<String> omNodeIds) {\n+    List<String> ratisServerPeerIdsList = omRatisServer.getPeerIds();\n+    for (String omNodeId : omNodeIds) {\n+      if (getOMNodeId().equals(omNodeId)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NzY4Mjg4Mg=="}, "originalCommit": {"oid": "cdb9dfd27201844e01f71150dafb6f7a5208bdfe"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MDk1Nzg2MQ==", "bodyText": "This is done later when a setConfiguration request is executed and it calls\n\n\nOMRatisServer#addRaftPeer().\n\nYes, but notifyConfigurationChanged calls updatePeerList\n@Override\n  public void notifyConfigurationChanged(long term, long index,\n      RaftProtos.RaftConfigurationProto newRaftConfiguration) {\n    List<RaftProtos.RaftPeerProto> newPeers =\n        newRaftConfiguration.getPeersList();\n    LOG.info(\"Received Configuration change notification from Ratis. New Peer\" +\n        \" list:\\n{}\", newPeers);\n\n    List<String> newPeerIds = new ArrayList<>();\n    for (RaftProtos.RaftPeerProto raftPeerProto : newPeers) {\n      newPeerIds.add(RaftPeerId.valueOf(raftPeerProto.getId()).toString());\n    }\n    // Check and update the peer list in OzoneManager\n    ozoneManager.updatePeerList(newPeerIds);\n  }\n\nAnd in updatePeerList we have\n public void updatePeerList(List<String> omNodeIds) {\n    List<String> ratisServerPeerIdsList = omRatisServer.getPeerIds();\n    for (String omNodeId : omNodeIds) {\n      if (getOMNodeId().equals(omNodeId)) {\n        continue;\n      }\n\nWhich skips calling addRaftPeer, when it is matching with localNode ID. Let me know if I am missing something here.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r670957861", "createdAt": "2021-07-16T04:32:24Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -1339,7 +1339,38 @@ public void bootstrap(OMNodeDetails newOMNode) throws IOException {\n   }\n \n   /**\n-   * Add a new OM Node to the HA cluster. This call comes from OMRatisServer\n+   * When OMStateMachine receives a configuration change update, it calls\n+   * this function to update the peers list, if required.\n+   */\n+  public void updatePeerList(List<String> omNodeIds) {\n+    List<String> ratisServerPeerIdsList = omRatisServer.getPeerIds();\n+    for (String omNodeId : omNodeIds) {\n+      if (getOMNodeId().equals(omNodeId)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NzY4Mjg4Mg=="}, "originalCommit": {"oid": "cdb9dfd27201844e01f71150dafb6f7a5208bdfe"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTU2MzI3Mg==", "bodyText": "Thanks Bharat. I get it now. Should not skip the checks for local node. I have updated the patch. Thanks for catching this.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r671563272", "createdAt": "2021-07-16T23:03:37Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -1339,7 +1339,38 @@ public void bootstrap(OMNodeDetails newOMNode) throws IOException {\n   }\n \n   /**\n-   * Add a new OM Node to the HA cluster. This call comes from OMRatisServer\n+   * When OMStateMachine receives a configuration change update, it calls\n+   * this function to update the peers list, if required.\n+   */\n+  public void updatePeerList(List<String> omNodeIds) {\n+    List<String> ratisServerPeerIdsList = omRatisServer.getPeerIds();\n+    for (String omNodeId : omNodeIds) {\n+      if (getOMNodeId().equals(omNodeId)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NzY4Mjg4Mg=="}, "originalCommit": {"oid": "cdb9dfd27201844e01f71150dafb6f7a5208bdfe"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDI2MzQwNzkxOnYy", "diffSide": "LEFT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerRatisServer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xNVQxOToyMTozMVrOJ_q_VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xNlQwNDozMzo1NVrOJ_4CnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MDc0NDQwNQ==", "bodyText": "@bharatviswa504, in old code too, local OM node is added to raftPeers list.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r670744405", "createdAt": "2021-07-15T19:21:31Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerRatisServer.java", "diffHunk": "@@ -273,106 +483,6 @@ private OMResponse processReply(OMRequest omRequest, RaftClientReply reply)\n     }\n   }\n \n-\n-  /**\n-   * Returns an OM Ratis server.\n-   * @param conf configuration\n-   * @param om the OM instance starting the ratis server\n-   * @param raftGroupIdStr raft group id string\n-   * @param localRaftPeerId raft peer id of this Ratis server\n-   * @param addr address of the ratis server\n-   * @param raftPeers peer nodes in the raft ring\n-   * @throws IOException\n-   */\n-  @SuppressWarnings({\"parameternumber\", \"java:S107\"})\n-  private OzoneManagerRatisServer(ConfigurationSource conf,\n-      OzoneManager om,\n-      String raftGroupIdStr, RaftPeerId localRaftPeerId,\n-      InetSocketAddress addr, List<RaftPeer> raftPeers,\n-      SecurityConfig secConfig, CertificateClient certClient)\n-      throws IOException {\n-    this.ozoneManager = om;\n-    this.omRatisAddress = addr;\n-    this.port = addr.getPort();\n-    RaftProperties serverProperties = newRaftProperties(conf);\n-\n-    this.raftPeerId = localRaftPeerId;\n-    this.raftGroupId = RaftGroupId.valueOf(\n-        getRaftGroupIdFromOmServiceId(raftGroupIdStr));\n-    this.raftGroup = RaftGroup.valueOf(raftGroupId, raftPeers);\n-\n-    StringBuilder raftPeersStr = new StringBuilder();\n-    for (RaftPeer peer : raftPeers) {\n-      raftPeersStr.append(\", \").append(peer.getAddress());\n-    }\n-    LOG.info(\"Instantiating OM Ratis server with GroupID: {} and \" +\n-        \"Raft Peers: {}\", raftGroupIdStr, raftPeersStr.toString().substring(2));\n-\n-    this.omStateMachine = getStateMachine(conf);\n-\n-    Parameters parameters = createServerTlsParameters(secConfig, certClient);\n-    this.server = RaftServer.newBuilder()\n-        .setServerId(this.raftPeerId)\n-        .setGroup(this.raftGroup)\n-        .setProperties(serverProperties)\n-        .setParameters(parameters)\n-        .setStateMachine(omStateMachine)\n-        .build();\n-  }\n-\n-  /**\n-   * Creates an instance of OzoneManagerRatisServer.\n-   */\n-  public static OzoneManagerRatisServer newOMRatisServer(\n-      ConfigurationSource ozoneConf, OzoneManager omProtocol,\n-      OMNodeDetails omNodeDetails, List<OMNodeDetails> peerNodes,\n-      SecurityConfig secConfig, CertificateClient certClient)\n-      throws IOException {\n-\n-    // RaftGroupId is the omServiceId\n-    String omServiceId = omNodeDetails.getServiceId();\n-\n-    String omNodeId = omNodeDetails.getNodeId();\n-    RaftPeerId localRaftPeerId = RaftPeerId.getRaftPeerId(omNodeId);\n-\n-    InetSocketAddress ratisAddr = new InetSocketAddress(\n-        omNodeDetails.getInetAddress(), omNodeDetails.getRatisPort());\n-\n-    RaftPeer localRaftPeer = RaftPeer.newBuilder()\n-        .setId(localRaftPeerId)\n-        .setAddress(ratisAddr)\n-        .build();\n-\n-    List<RaftPeer> raftPeers = new ArrayList<>();\n-    // Add this Ratis server to the Ratis ring\n-    raftPeers.add(localRaftPeer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84e45b7ddc04fe002a0b7a9a528e1a8d3f3951fb"}, "originalPosition": 378}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MDk1ODIzNw==", "bodyText": "Yes, ur correct. Thanks some how i missed this part.", "url": "https://github.com/apache/ozone/pull/1494#discussion_r670958237", "createdAt": "2021-07-16T04:33:55Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerRatisServer.java", "diffHunk": "@@ -273,106 +483,6 @@ private OMResponse processReply(OMRequest omRequest, RaftClientReply reply)\n     }\n   }\n \n-\n-  /**\n-   * Returns an OM Ratis server.\n-   * @param conf configuration\n-   * @param om the OM instance starting the ratis server\n-   * @param raftGroupIdStr raft group id string\n-   * @param localRaftPeerId raft peer id of this Ratis server\n-   * @param addr address of the ratis server\n-   * @param raftPeers peer nodes in the raft ring\n-   * @throws IOException\n-   */\n-  @SuppressWarnings({\"parameternumber\", \"java:S107\"})\n-  private OzoneManagerRatisServer(ConfigurationSource conf,\n-      OzoneManager om,\n-      String raftGroupIdStr, RaftPeerId localRaftPeerId,\n-      InetSocketAddress addr, List<RaftPeer> raftPeers,\n-      SecurityConfig secConfig, CertificateClient certClient)\n-      throws IOException {\n-    this.ozoneManager = om;\n-    this.omRatisAddress = addr;\n-    this.port = addr.getPort();\n-    RaftProperties serverProperties = newRaftProperties(conf);\n-\n-    this.raftPeerId = localRaftPeerId;\n-    this.raftGroupId = RaftGroupId.valueOf(\n-        getRaftGroupIdFromOmServiceId(raftGroupIdStr));\n-    this.raftGroup = RaftGroup.valueOf(raftGroupId, raftPeers);\n-\n-    StringBuilder raftPeersStr = new StringBuilder();\n-    for (RaftPeer peer : raftPeers) {\n-      raftPeersStr.append(\", \").append(peer.getAddress());\n-    }\n-    LOG.info(\"Instantiating OM Ratis server with GroupID: {} and \" +\n-        \"Raft Peers: {}\", raftGroupIdStr, raftPeersStr.toString().substring(2));\n-\n-    this.omStateMachine = getStateMachine(conf);\n-\n-    Parameters parameters = createServerTlsParameters(secConfig, certClient);\n-    this.server = RaftServer.newBuilder()\n-        .setServerId(this.raftPeerId)\n-        .setGroup(this.raftGroup)\n-        .setProperties(serverProperties)\n-        .setParameters(parameters)\n-        .setStateMachine(omStateMachine)\n-        .build();\n-  }\n-\n-  /**\n-   * Creates an instance of OzoneManagerRatisServer.\n-   */\n-  public static OzoneManagerRatisServer newOMRatisServer(\n-      ConfigurationSource ozoneConf, OzoneManager omProtocol,\n-      OMNodeDetails omNodeDetails, List<OMNodeDetails> peerNodes,\n-      SecurityConfig secConfig, CertificateClient certClient)\n-      throws IOException {\n-\n-    // RaftGroupId is the omServiceId\n-    String omServiceId = omNodeDetails.getServiceId();\n-\n-    String omNodeId = omNodeDetails.getNodeId();\n-    RaftPeerId localRaftPeerId = RaftPeerId.getRaftPeerId(omNodeId);\n-\n-    InetSocketAddress ratisAddr = new InetSocketAddress(\n-        omNodeDetails.getInetAddress(), omNodeDetails.getRatisPort());\n-\n-    RaftPeer localRaftPeer = RaftPeer.newBuilder()\n-        .setId(localRaftPeerId)\n-        .setAddress(ratisAddr)\n-        .build();\n-\n-    List<RaftPeer> raftPeers = new ArrayList<>();\n-    // Add this Ratis server to the Ratis ring\n-    raftPeers.add(localRaftPeer);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MDc0NDQwNQ=="}, "originalCommit": {"oid": "84e45b7ddc04fe002a0b7a9a528e1a8d3f3951fb"}, "originalPosition": 378}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4788, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}