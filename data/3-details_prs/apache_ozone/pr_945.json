{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwMjc2MzI1", "number": 945, "title": "HDDS-3622. Implement rocksdb tool to parse scm db", "bodyText": "What changes were proposed in this pull request?\nThis tool parses rocksdb file for SCM and dumps specified table data. Also there is a list command which parses any db file and lists the columnFamilies(tables).\nWhat is the link to the Apache JIRA\nhttps://issues.apache.org/jira/browse/HDDS-3622\nHow was this patch tested?\nManually Tested.\nHere are the commands:\n1.bin/ozone debug ldb --db=/tmp/ozone/data/metadata/scm.db/ list_column_families\ndefault\nvalidCerts\ndeletedBlocks\npipelines\nrevokedCerts\ncontainers\n2.bin/ozone debug ldb --db=/tmp/ozone/data/metadata/scm.db/ scan --column_family=containers", "createdAt": "2020-05-19T17:59:27Z", "url": "https://github.com/apache/ozone/pull/945", "merged": true, "mergeCommit": {"oid": "ef24b119e42cdbc8369b55c8fa6f63133215cc0e"}, "closed": true, "closedAt": "2020-06-10T10:11:34Z", "author": {"login": "sadanand48"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABci4Q5lgH2gAyNDIwMjc2MzI1OjFmMTMwMTBhZDQwMDlmMTA5OWUwMjVhMmE2OTYxZTg3NmE2MWM1YWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcp22F4AFqTQyNzkwOTg0OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1f13010ad4009f1099e025a2a6961e876a61c5aa", "author": {"user": {"login": "sadanand48", "name": "Sadanand Shenoy"}}, "url": "https://github.com/apache/ozone/commit/1f13010ad4009f1099e025a2a6961e876a61c5aa", "committedDate": "2020-05-19T17:52:39Z", "message": "HDDS-3622.Implement rocksdb tool to parse scm db"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0Njk2MTU5", "url": "https://github.com/apache/ozone/pull/945#pullrequestreview-414696159", "createdAt": "2020-05-19T18:03:08Z", "commit": {"oid": "1f13010ad4009f1099e025a2a6961e876a61c5aa"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODowMzowOVrOGXsXrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODowOToyM1rOGXsmAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5NzM5MA==", "bodyText": "Please expand wildcard imports.", "url": "https://github.com/apache/ozone/pull/945#discussion_r427497390", "createdAt": "2020-05-19T18:03:09Z", "author": {"login": "mukul1987"}, "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/debug/ListTables.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.debug;\n+\n+import org.rocksdb.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f13010ad4009f1099e025a2a6961e876a61c5aa"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5ODUzNQ==", "bodyText": "after extending GenericCli, we will not need this change.", "url": "https://github.com/apache/ozone/pull/945#discussion_r427498535", "createdAt": "2020-05-19T18:05:09Z", "author": {"login": "mukul1987"}, "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/debug/ListTables.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.debug;\n+\n+import org.rocksdb.*;\n+import picocli.CommandLine;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+\n+/**\n+ * List all column Families/Tables in db.\n+ */\n+@CommandLine.Command(\n+        name = \"list\",\n+        description = \"list all tables in db.\"\n+)\n+public class ListTables implements Callable<Void> {\n+\n+  @CommandLine.ParentCommand\n+  private RDBParser parent;\n+\n+  @Override\n+  public Void call() throws Exception {\n+    List<byte[]> cfList = getColumnFamilyList(parent.getDbPath());\n+    for (byte[] b : cfList) {\n+      System.out.println(new String(b, StandardCharsets.UTF_8));\n+    }\n+    return null;\n+  }\n+\n+  private static List<byte[]> getColumnFamilyList(String dbPath) {\n+    List<byte[]> cfList = null;\n+    try {\n+      cfList = RocksDB.listColumnFamilies(new Options(), dbPath);\n+    } catch (RocksDBException e) {\n+      e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f13010ad4009f1099e025a2a6961e876a61c5aa"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5OTYxNg==", "bodyText": "lets check for null here as if the table name doesn't match, we can throw NPE.", "url": "https://github.com/apache/ozone/pull/945#discussion_r427499616", "createdAt": "2020-05-19T18:06:55Z", "author": {"login": "mukul1987"}, "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/debug/SCMDBParser.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.debug;\n+\n+import org.apache.hadoop.hdds.utils.db.DBColumnFamilyDefinition;\n+import org.rocksdb.*;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+\n+/**\n+ * Parser for scm.db file.\n+ */\n+@CommandLine.Command(\n+        name = \"scmdbparser\",\n+        description = \"Parse specified metadataTable\"\n+)\n+public class SCMDBParser implements Callable<Void> {\n+\n+  @CommandLine.Option(names = {\"-table\"},\n+            description = \"Table name\")\n+  private String tableName;\n+\n+  @CommandLine.ParentCommand\n+  private RDBParser parent;\n+\n+\n+  private static void displayTable(RocksDB rocksDB,\n+        DBColumnFamilyDefinition dbColumnFamilyDefinition,\n+        List<ColumnFamilyHandle> list) throws IOException {\n+    ColumnFamilyHandle columnFamilyHandle = getColumnFamilyHandle(\n+            dbColumnFamilyDefinition.getTableName()\n+                    .getBytes(StandardCharsets.UTF_8), list);\n+    RocksIterator iterator = rocksDB.newIterator(columnFamilyHandle);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f13010ad4009f1099e025a2a6961e876a61c5aa"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUwMDM0Nw==", "bodyText": "This map should be constructed from SCM DB definition.", "url": "https://github.com/apache/ozone/pull/945#discussion_r427500347", "createdAt": "2020-05-19T18:08:09Z", "author": {"login": "mukul1987"}, "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/debug/RDBParser.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.debug;\n+\n+import org.apache.hadoop.hdds.cli.GenericCli;\n+import org.apache.hadoop.hdds.scm.metadata.SCMDBDefinition;\n+import org.apache.hadoop.hdds.utils.db.DBColumnFamilyDefinition;\n+import picocli.CommandLine;\n+\n+import java.util.HashMap;\n+\n+/**\n+ * Tool that parses rocksdb file.\n+ */\n+@CommandLine.Command(\n+        name = \"rdbparser\",\n+        description = \"Parse rocksdb file content\",\n+        subcommands = {\n+                SCMDBParser.class,\n+                ListTables.class\n+        })\n+public class RDBParser extends GenericCli {\n+\n+  @CommandLine.Option(names = {\"-path\"},\n+            description = \"Database File Path\")\n+    private String dbPath;\n+\n+  public static HashMap<String, DBColumnFamilyDefinition>\n+      getColumnFamilyMap() {\n+    return columnFamilyMap;\n+  }\n+\n+  private static HashMap<String, DBColumnFamilyDefinition>  columnFamilyMap;\n+\n+  public String getDbPath() {\n+    return dbPath;\n+  }\n+\n+  static {\n+    columnFamilyMap = constructColumnFamilyMap();\n+  }\n+\n+  private static HashMap<String, DBColumnFamilyDefinition>\n+      constructColumnFamilyMap() {\n+    columnFamilyMap = new HashMap<String, DBColumnFamilyDefinition>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f13010ad4009f1099e025a2a6961e876a61c5aa"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUwMTA1OQ==", "bodyText": "This can be replaced with getColumnFamilies, and then a table created out of that.", "url": "https://github.com/apache/ozone/pull/945#discussion_r427501059", "createdAt": "2020-05-19T18:09:23Z", "author": {"login": "mukul1987"}, "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/debug/RDBParser.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.debug;\n+\n+import org.apache.hadoop.hdds.cli.GenericCli;\n+import org.apache.hadoop.hdds.scm.metadata.SCMDBDefinition;\n+import org.apache.hadoop.hdds.utils.db.DBColumnFamilyDefinition;\n+import picocli.CommandLine;\n+\n+import java.util.HashMap;\n+\n+/**\n+ * Tool that parses rocksdb file.\n+ */\n+@CommandLine.Command(\n+        name = \"rdbparser\",\n+        description = \"Parse rocksdb file content\",\n+        subcommands = {\n+                SCMDBParser.class,\n+                ListTables.class\n+        })\n+public class RDBParser extends GenericCli {\n+\n+  @CommandLine.Option(names = {\"-path\"},\n+            description = \"Database File Path\")\n+    private String dbPath;\n+\n+  public static HashMap<String, DBColumnFamilyDefinition>\n+      getColumnFamilyMap() {\n+    return columnFamilyMap;\n+  }\n+\n+  private static HashMap<String, DBColumnFamilyDefinition>  columnFamilyMap;\n+\n+  public String getDbPath() {\n+    return dbPath;\n+  }\n+\n+  static {\n+    columnFamilyMap = constructColumnFamilyMap();\n+  }\n+\n+  private static HashMap<String, DBColumnFamilyDefinition>\n+      constructColumnFamilyMap() {\n+    columnFamilyMap = new HashMap<String, DBColumnFamilyDefinition>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUwMDM0Nw=="}, "originalCommit": {"oid": "1f13010ad4009f1099e025a2a6961e876a61c5aa"}, "originalPosition": 61}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0de770297d492206904ebb5547bd6c64fb0cc8ae", "author": {"user": {"login": "sadanand48", "name": "Sadanand Shenoy"}}, "url": "https://github.com/apache/ozone/commit/0de770297d492206904ebb5547bd6c64fb0cc8ae", "committedDate": "2020-05-20T06:11:34Z", "message": "addressed review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2MTQ3MzMz", "url": "https://github.com/apache/ozone/pull/945#pullrequestreview-416147333", "createdAt": "2020-05-21T13:32:46Z", "commit": {"oid": "0de770297d492206904ebb5547bd6c64fb0cc8ae"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMzozMjo0NlrOGYy6FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMzozNzoxNlrOGYzESA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY1MzA3Nw==", "bodyText": "Nit1: I am not sure if we need a separated method just to call this function.\nList<byte[]> columnFamilies = RocksDB.listColumnFamilies(new Options(), parent.getDbPath);\nNit2: I tend to agree with Uncle Bob, that we don't need to include the type of a variable in the name of the variable:\n\nHungarian Notation was considered to be pretty important back in the Windows C API, when everything was an integer handle or a long pointer or a void pointer, or one of several implementations of \u201cstring\u201d (with different uses and attributes). The compiler did not check types in those days, so the programmers needed a crutch to help them remember the types.\n\n\nIn modern languages we have much richer type systems, and the compilers remember and enforce the types. What\u2019s more, there is a trend toward smaller classes and shorter functions so that people can usually see the point of declaration of each variable they\u2019re using.\n\n\nJava programmers don\u2019t need type encoding. Objects are strongly typed, and editing environments have advanced such that they detect a type error long before you can run a compile! So nowadays HN and other forms of type encoding are simply impediments. They make it harder to change the name or type of a variable, function, or class. They make it harder to read the code. And they create the possibility that the encoding system will mislead the reader.\n\n(In: Clean Code / Chapter 2. Meaningful name)", "url": "https://github.com/apache/ozone/pull/945#discussion_r428653077", "createdAt": "2020-05-21T13:32:46Z", "author": {"login": "elek"}, "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/debug/ListTables.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.debug;\n+\n+import org.rocksdb.Options;\n+import org.rocksdb.RocksDB;\n+import org.rocksdb.RocksDBException;\n+import picocli.CommandLine;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+\n+/**\n+ * List all column Families/Tables in db.\n+ */\n+@CommandLine.Command(\n+        name = \"list\",\n+        description = \"list all tables in db.\"\n+)\n+public class ListTables implements Callable<Void> {\n+\n+  @CommandLine.ParentCommand\n+  private RDBParser parent;\n+\n+  @Override\n+  public Void call() throws Exception {\n+    List<byte[]> cfList = getColumnFamilyList(parent.getDbPath());\n+    for (byte[] b : cfList) {\n+      System.out.println(new String(b, StandardCharsets.UTF_8));\n+    }\n+    return null;\n+  }\n+\n+  private static List<byte[]> getColumnFamilyList(String dbPath)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0de770297d492206904ebb5547bd6c64fb0cc8ae"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY1NTEwMg==", "bodyText": "If there is an exception, we are in trouble anyway. I would throw the exception without printing out the problem and GenericCli will handle all the remaining parts.", "url": "https://github.com/apache/ozone/pull/945#discussion_r428655102", "createdAt": "2020-05-21T13:36:13Z", "author": {"login": "elek"}, "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/debug/SCMDBParser.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.debug;\n+\n+import org.apache.hadoop.hdds.utils.db.DBColumnFamilyDefinition;\n+import org.rocksdb.*;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+\n+/**\n+ * Parser for scm.db file.\n+ */\n+@CommandLine.Command(\n+        name = \"scmdbparser\",\n+        description = \"Parse specified metadataTable\"\n+)\n+public class SCMDBParser implements Callable<Void> {\n+\n+  @CommandLine.Option(names = {\"-table\"},\n+            description = \"Table name\")\n+  private String tableName;\n+\n+  @CommandLine.ParentCommand\n+  private RDBParser parent;\n+\n+\n+  private static void displayTable(RocksDB rocksDB,\n+        DBColumnFamilyDefinition dbColumnFamilyDefinition,\n+        List<ColumnFamilyHandle> list) throws IOException {\n+    ColumnFamilyHandle columnFamilyHandle = getColumnFamilyHandle(\n+            dbColumnFamilyDefinition.getTableName()\n+                    .getBytes(StandardCharsets.UTF_8), list);\n+    if (columnFamilyHandle==null){\n+      throw new IllegalArgumentException(\"columnFamilyHandle is null\");\n+    }\n+    RocksIterator iterator = rocksDB.newIterator(columnFamilyHandle);\n+    iterator.seekToFirst();\n+    while (iterator.isValid()){\n+      Object o = dbColumnFamilyDefinition.getValueCodec()\n+              .fromPersistedFormat(iterator.value());\n+      System.out.println(o);\n+      iterator.next();\n+    }\n+  }\n+\n+  private static ColumnFamilyHandle getColumnFamilyHandle(\n+            byte[] name, List<ColumnFamilyHandle> columnFamilyHandles) {\n+    return columnFamilyHandles\n+            .stream()\n+            .filter(\n+              handle -> {\n+                try {\n+                  return Arrays.equals(handle.getName(), name);\n+                    } catch (Exception ex) {\n+                  throw new RuntimeException(ex);\n+                    }\n+              })\n+            .findAny()\n+            .orElse(null);\n+  }\n+\n+  @Override\n+  public Void call() throws Exception {\n+    List<ColumnFamilyDescriptor> cfs = new ArrayList<>();\n+    final List<ColumnFamilyHandle> columnFamilyHandleList =\n+            new ArrayList<>();\n+    List<byte[]> cfList = null;\n+    try {\n+      cfList = RocksDB.listColumnFamilies(new Options(),\n+                    parent.getDbPath());\n+    } catch (Exception e) {\n+      e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0de770297d492206904ebb5547bd6c64fb0cc8ae"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY1NTY4OA==", "bodyText": "Nit: Can you please use --table. It's more standard (or use -t and --table as an alias)", "url": "https://github.com/apache/ozone/pull/945#discussion_r428655688", "createdAt": "2020-05-21T13:37:16Z", "author": {"login": "elek"}, "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/debug/SCMDBParser.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.debug;\n+\n+import org.apache.hadoop.hdds.utils.db.DBColumnFamilyDefinition;\n+import org.rocksdb.*;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+\n+/**\n+ * Parser for scm.db file.\n+ */\n+@CommandLine.Command(\n+        name = \"scmdbparser\",\n+        description = \"Parse specified metadataTable\"\n+)\n+public class SCMDBParser implements Callable<Void> {\n+\n+  @CommandLine.Option(names = {\"-table\"},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0de770297d492206904ebb5547bd6c64fb0cc8ae"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41790d7e1e6bf56f4af4e7592783ba734e6673ae", "author": {"user": {"login": "sadanand48", "name": "Sadanand Shenoy"}}, "url": "https://github.com/apache/ozone/commit/41790d7e1e6bf56f4af4e7592783ba734e6673ae", "committedDate": "2020-05-29T14:59:12Z", "message": "Reading DBDefinition from db file name"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3OTA5ODQ5", "url": "https://github.com/apache/ozone/pull/945#pullrequestreview-427909849", "createdAt": "2020-06-10T10:10:56Z", "commit": {"oid": "41790d7e1e6bf56f4af4e7592783ba734e6673ae"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3286, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}