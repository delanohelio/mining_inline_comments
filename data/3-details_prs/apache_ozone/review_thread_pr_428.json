{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxMjM4NTYz", "number": 428, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwNjo0NjoxMlrODXEHjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNToxNTo0MFrODbdDng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NTExMzEwOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwNjo0NjoxMlrOFcLdIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxOTo0Mjo1OVrOFceSjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA5MjEyOA==", "bodyText": "NIT: primitive type, we dont need @nonnull", "url": "https://github.com/apache/ozone/pull/428#discussion_r365092128", "createdAt": "2020-01-10T06:46:12Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyRequest.java", "diffHunk": "@@ -349,7 +349,8 @@ protected OmKeyInfo createKeyInfo(@Nonnull KeyArgs keyArgs,\n       @Nonnull HddsProtos.ReplicationType type, long size,\n       @Nullable FileEncryptionInfo encInfo,\n       @Nonnull PrefixManager prefixManager,\n-      @Nullable OmBucketInfo omBucketInfo) {\n+      @Nullable OmBucketInfo omBucketInfo,\n+      @Nonnull long transactionLogIndex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70f086e69cf3375f51d92a70e092df44eefa976f"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQwMDcxOQ==", "bodyText": "done", "url": "https://github.com/apache/ozone/pull/428#discussion_r365400719", "createdAt": "2020-01-10T19:42:59Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyRequest.java", "diffHunk": "@@ -349,7 +349,8 @@ protected OmKeyInfo createKeyInfo(@Nonnull KeyArgs keyArgs,\n       @Nonnull HddsProtos.ReplicationType type, long size,\n       @Nullable FileEncryptionInfo encInfo,\n       @Nonnull PrefixManager prefixManager,\n-      @Nullable OmBucketInfo omBucketInfo) {\n+      @Nullable OmBucketInfo omBucketInfo,\n+      @Nonnull long transactionLogIndex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA5MjEyOA=="}, "originalCommit": {"oid": "70f086e69cf3375f51d92a70e092df44eefa976f"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NTExMzY2OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwNjo0NjozMVrOFcLdZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxOTo0MzowNFrOFceStw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA5MjE5OQ==", "bodyText": "NIT: primitive type, we dont need @nonnull", "url": "https://github.com/apache/ozone/pull/428#discussion_r365092199", "createdAt": "2020-01-10T06:46:31Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyRequest.java", "diffHunk": "@@ -416,12 +419,14 @@ protected OmKeyInfo prepareKeyInfo(\n       @Nonnull KeyArgs keyArgs, @Nonnull String dbKeyName, long size,\n       @Nonnull List<OmKeyLocationInfo> locations,\n       @Nullable FileEncryptionInfo encInfo,\n-      @Nonnull PrefixManager prefixManager, @Nullable OmBucketInfo omBucketInfo)\n+      @Nonnull PrefixManager prefixManager,\n+      @Nullable OmBucketInfo omBucketInfo,\n+      @Nonnull long transactionLogIndex)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70f086e69cf3375f51d92a70e092df44eefa976f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQwMDc1OQ==", "bodyText": "done", "url": "https://github.com/apache/ozone/pull/428#discussion_r365400759", "createdAt": "2020-01-10T19:43:04Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyRequest.java", "diffHunk": "@@ -416,12 +419,14 @@ protected OmKeyInfo prepareKeyInfo(\n       @Nonnull KeyArgs keyArgs, @Nonnull String dbKeyName, long size,\n       @Nonnull List<OmKeyLocationInfo> locations,\n       @Nullable FileEncryptionInfo encInfo,\n-      @Nonnull PrefixManager prefixManager, @Nullable OmBucketInfo omBucketInfo)\n+      @Nonnull PrefixManager prefixManager,\n+      @Nullable OmBucketInfo omBucketInfo,\n+      @Nonnull long transactionLogIndex)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA5MjE5OQ=="}, "originalCommit": {"oid": "70f086e69cf3375f51d92a70e092df44eefa976f"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NTEyMTU2OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/s3/multipart/S3InitiateMultipartUploadRequest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwNjo1MTo0N1rOFcLh4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxOTo0MzoxOVrOFceTJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA5MzM0NQ==", "bodyText": "Missing to add objectID and updateID in multipartKeyInfo", "url": "https://github.com/apache/ozone/pull/428#discussion_r365093345", "createdAt": "2020-01-10T06:51:47Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/s3/multipart/S3InitiateMultipartUploadRequest.java", "diffHunk": "@@ -158,9 +158,10 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n           .setOmKeyLocationInfos(Collections.singletonList(\n               new OmKeyLocationInfoGroup(0, new ArrayList<>())))\n           .setAcls(OzoneAclUtil.fromProtobuf(keyArgs.getAclsList()))\n+          .setObjectID(transactionLogIndex)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70f086e69cf3375f51d92a70e092df44eefa976f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQwMDg2OA==", "bodyText": "Thanks for catching this. Updated the patch.", "url": "https://github.com/apache/ozone/pull/428#discussion_r365400868", "createdAt": "2020-01-10T19:43:19Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/s3/multipart/S3InitiateMultipartUploadRequest.java", "diffHunk": "@@ -158,9 +158,10 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n           .setOmKeyLocationInfos(Collections.singletonList(\n               new OmKeyLocationInfoGroup(0, new ArrayList<>())))\n           .setAcls(OzoneAclUtil.fromProtobuf(keyArgs.getAclsList()))\n+          .setObjectID(transactionLogIndex)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA5MzM0NQ=="}, "originalCommit": {"oid": "70f086e69cf3375f51d92a70e092df44eefa976f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NTEyNDIxOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/s3/multipart/S3MultipartUploadAbortRequest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwNjo1MzozN1rOFcLjbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxOTo0MjoxNVrOFceRbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA5Mzc0MQ==", "bodyText": "Not understood the reason of setting updateID here, as below we are setting Optional.absent(), so it  means entry is deleted from DB.", "url": "https://github.com/apache/ozone/pull/428#discussion_r365093741", "createdAt": "2020-01-10T06:53:37Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/s3/multipart/S3MultipartUploadAbortRequest.java", "diffHunk": "@@ -120,6 +124,21 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n         multipartKeyInfo = omMetadataManager\n             .getMultipartInfoTable().get(multipartKey);\n \n+        // Set updateID to current transactionLogIndex for all parts\n+        TreeMap<Integer, PartKeyInfo> partKeyInfoMap = multipartKeyInfo\n+            .getPartKeyInfoMap();\n+        for (Map.Entry<Integer, PartKeyInfo> partKeyInfoEntry :\n+            partKeyInfoMap.entrySet()) {\n+          PartKeyInfo partKeyInfo = partKeyInfoEntry.getValue();\n+          OmKeyInfo currentKeyPartInfo = OmKeyInfo.getFromProtobuf(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70f086e69cf3375f51d92a70e092df44eefa976f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQwMDQyOA==", "bodyText": "Yes, but this entry is added to DeletedTable. So I thought we should keep a record of the transaction which deleted the Key.", "url": "https://github.com/apache/ozone/pull/428#discussion_r365400428", "createdAt": "2020-01-10T19:42:15Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/s3/multipart/S3MultipartUploadAbortRequest.java", "diffHunk": "@@ -120,6 +124,21 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n         multipartKeyInfo = omMetadataManager\n             .getMultipartInfoTable().get(multipartKey);\n \n+        // Set updateID to current transactionLogIndex for all parts\n+        TreeMap<Integer, PartKeyInfo> partKeyInfoMap = multipartKeyInfo\n+            .getPartKeyInfoMap();\n+        for (Map.Entry<Integer, PartKeyInfo> partKeyInfoEntry :\n+            partKeyInfoMap.entrySet()) {\n+          PartKeyInfo partKeyInfo = partKeyInfoEntry.getValue();\n+          OmKeyInfo currentKeyPartInfo = OmKeyInfo.getFromProtobuf(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA5Mzc0MQ=="}, "originalCommit": {"oid": "70f086e69cf3375f51d92a70e092df44eefa976f"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODczMzQ4OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmKeyInfo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwMTo1NjoxMFrOFcsR4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDowNToxMlrOFdkORA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYyOTkyMQ==", "bodyText": "assert that it is greater than current updateID?", "url": "https://github.com/apache/ozone/pull/428#discussion_r365629921", "createdAt": "2020-01-13T01:56:10Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmKeyInfo.java", "diffHunk": "@@ -135,6 +141,47 @@ public void updateModifcationTime() {\n     this.modificationTime = Time.monotonicNow();\n   }\n \n+  /**\n+   * Set the Object ID. If this value is already set then this function throws.\n+   * There is a reason why we cannot use the final here. The OMKeyInfo is\n+   * deserialized from the protobuf in many places in code. We need to set\n+   * this object ID, after it is deserialized.\n+   *\n+   * @param obId - long\n+   */\n+  public void setObjectID(long obId) {\n+    if(this.objectID != 0) {\n+      throw new UnsupportedOperationException(\"Attempt to modify object ID \" +\n+          \"which is not zero. Current Object ID is \" + this.objectID);\n+    }\n+    this.objectID = obId;\n+  }\n+\n+  /**\n+   * Sets the update ID. For each modification of this object, we will set\n+   * this to a value greater than the current value.\n+   * @param updateID  long\n+   */\n+  public void setUpdateID(long updateID) {\n+    this.updateID = updateID;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "979d8a226b839f23dfcb5ea281d0c014781c6051"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU0NjUwMA==", "bodyText": "Added the check.", "url": "https://github.com/apache/ozone/pull/428#discussion_r366546500", "createdAt": "2020-01-14T20:05:12Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmKeyInfo.java", "diffHunk": "@@ -135,6 +141,47 @@ public void updateModifcationTime() {\n     this.modificationTime = Time.monotonicNow();\n   }\n \n+  /**\n+   * Set the Object ID. If this value is already set then this function throws.\n+   * There is a reason why we cannot use the final here. The OMKeyInfo is\n+   * deserialized from the protobuf in many places in code. We need to set\n+   * this object ID, after it is deserialized.\n+   *\n+   * @param obId - long\n+   */\n+  public void setObjectID(long obId) {\n+    if(this.objectID != 0) {\n+      throw new UnsupportedOperationException(\"Attempt to modify object ID \" +\n+          \"which is not zero. Current Object ID is \" + this.objectID);\n+    }\n+    this.objectID = obId;\n+  }\n+\n+  /**\n+   * Sets the update ID. For each modification of this object, we will set\n+   * this to a value greater than the current value.\n+   * @param updateID  long\n+   */\n+  public void setUpdateID(long updateID) {\n+    this.updateID = updateID;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYyOTkyMQ=="}, "originalCommit": {"oid": "979d8a226b839f23dfcb5ea281d0c014781c6051"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODczMzY1OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmKeyInfo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwMTo1NjozMFrOFcsR-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxOTozNDo0MFrOFdjYHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYyOTk0Nw==", "bodyText": "Is 0 an invalid object ID and update id?", "url": "https://github.com/apache/ozone/pull/428#discussion_r365629947", "createdAt": "2020-01-13T01:56:30Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmKeyInfo.java", "diffHunk": "@@ -52,6 +52,9 @@\n   private HddsProtos.ReplicationType type;\n   private HddsProtos.ReplicationFactor factor;\n   private FileEncryptionInfo encInfo;\n+  private long objectID;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "979d8a226b839f23dfcb5ea281d0c014781c6051"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUzMjYzNg==", "bodyText": "If there are any old objects in the DB, then those will have objectId and updateId as 0. It is not invalid but if it is 0, then we cannot determine if a corresponding transaction is a replay.", "url": "https://github.com/apache/ozone/pull/428#discussion_r366532636", "createdAt": "2020-01-14T19:34:40Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmKeyInfo.java", "diffHunk": "@@ -52,6 +52,9 @@\n   private HddsProtos.ReplicationType type;\n   private HddsProtos.ReplicationFactor factor;\n   private FileEncryptionInfo encInfo;\n+  private long objectID;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYyOTk0Nw=="}, "originalCommit": {"oid": "979d8a226b839f23dfcb5ea281d0c014781c6051"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODczNzY1OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManagerImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwMjowNDoxNFrOFcsUJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMTozMToxOVrOFeHFGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYzMDUwMw==", "bodyText": "Is this code still used? @bharatviswa504", "url": "https://github.com/apache/ozone/pull/428#discussion_r365630503", "createdAt": "2020-01-13T02:04:14Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManagerImpl.java", "diffHunk": "@@ -943,9 +943,13 @@ private OmMultipartInfo createMultipartInfo(OmKeyArgs keyArgs,\n \n       long currentTime = Time.now();\n       Map<Integer, PartKeyInfo> partKeyInfoMap = new HashMap<>();\n-      OmMultipartKeyInfo multipartKeyInfo = new OmMultipartKeyInfo(\n-          multipartUploadID, currentTime, keyArgs.getType(),\n-          keyArgs.getFactor(), partKeyInfoMap);\n+      OmMultipartKeyInfo multipartKeyInfo = new OmMultipartKeyInfo.Builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "979d8a226b839f23dfcb5ea281d0c014781c6051"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAxMTQzNw==", "bodyText": "No @arp7. For write requests new OM HA code is used. (The new code is used for both OM HA and non-HA)", "url": "https://github.com/apache/ozone/pull/428#discussion_r366011437", "createdAt": "2020-01-13T20:27:54Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManagerImpl.java", "diffHunk": "@@ -943,9 +943,13 @@ private OmMultipartInfo createMultipartInfo(OmKeyArgs keyArgs,\n \n       long currentTime = Time.now();\n       Map<Integer, PartKeyInfo> partKeyInfoMap = new HashMap<>();\n-      OmMultipartKeyInfo multipartKeyInfo = new OmMultipartKeyInfo(\n-          multipartUploadID, currentTime, keyArgs.getType(),\n-          keyArgs.getFactor(), partKeyInfoMap);\n+      OmMultipartKeyInfo multipartKeyInfo = new OmMultipartKeyInfo.Builder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYzMDUwMw=="}, "originalCommit": {"oid": "979d8a226b839f23dfcb5ea281d0c014781c6051"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzExNzU5Mg==", "bodyText": "Should we file a separate jira to delete this code now?", "url": "https://github.com/apache/ozone/pull/428#discussion_r367117592", "createdAt": "2020-01-15T21:31:19Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManagerImpl.java", "diffHunk": "@@ -943,9 +943,13 @@ private OmMultipartInfo createMultipartInfo(OmKeyArgs keyArgs,\n \n       long currentTime = Time.now();\n       Map<Integer, PartKeyInfo> partKeyInfoMap = new HashMap<>();\n-      OmMultipartKeyInfo multipartKeyInfo = new OmMultipartKeyInfo(\n-          multipartUploadID, currentTime, keyArgs.getType(),\n-          keyArgs.getFactor(), partKeyInfoMap);\n+      OmMultipartKeyInfo multipartKeyInfo = new OmMultipartKeyInfo.Builder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYzMDUwMw=="}, "originalCommit": {"oid": "979d8a226b839f23dfcb5ea281d0c014781c6051"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODczODA2OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMDirectoryCreateRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwMjowNTowNVrOFcsUYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxOTozNTozMlrOFdjZwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYzMDU2Mg==", "bodyText": "Is the transaction log index reset when the Ratis term changes?", "url": "https://github.com/apache/ozone/pull/428#discussion_r365630562", "createdAt": "2020-01-13T02:05:05Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMDirectoryCreateRequest.java", "diffHunk": "@@ -210,7 +210,7 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n \n   private OmKeyInfo createDirectoryKeyInfo(OzoneManager ozoneManager,\n       OmBucketInfo omBucketInfo, String volumeName, String bucketName,\n-      String keyName, KeyArgs keyArgs)\n+      String keyName, KeyArgs keyArgs, long transactionLogIndex)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "979d8a226b839f23dfcb5ea281d0c014781c6051"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUzMzA1Nw==", "bodyText": "No Arpit. Transaction log index is the ratis log index. It is monotonically increasing always.", "url": "https://github.com/apache/ozone/pull/428#discussion_r366533057", "createdAt": "2020-01-14T19:35:32Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMDirectoryCreateRequest.java", "diffHunk": "@@ -210,7 +210,7 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n \n   private OmKeyInfo createDirectoryKeyInfo(OzoneManager ozoneManager,\n       OmBucketInfo omBucketInfo, String volumeName, String bucketName,\n-      String keyName, KeyArgs keyArgs)\n+      String keyName, KeyArgs keyArgs, long transactionLogIndex)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYzMDU2Mg=="}, "originalCommit": {"oid": "979d8a226b839f23dfcb5ea281d0c014781c6051"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODczODg2OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmKeyInfo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwMjowNjoxNVrOFcsU0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxOTozNjoxOFrOFdjbRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYzMDY3NQ==", "bodyText": "Also what happens for deployed clusters where the persisted keys have no object Id or update ID? What do we initialize it to?", "url": "https://github.com/apache/ozone/pull/428#discussion_r365630675", "createdAt": "2020-01-13T02:06:15Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmKeyInfo.java", "diffHunk": "@@ -52,6 +52,9 @@\n   private HddsProtos.ReplicationType type;\n   private HddsProtos.ReplicationFactor factor;\n   private FileEncryptionInfo encInfo;\n+  private long objectID;\n+  private long updateID;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "979d8a226b839f23dfcb5ea281d0c014781c6051"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUzMzQ0Nw==", "bodyText": "It will default to 0 as we use long primitive type here.", "url": "https://github.com/apache/ozone/pull/428#discussion_r366533447", "createdAt": "2020-01-14T19:36:18Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmKeyInfo.java", "diffHunk": "@@ -52,6 +52,9 @@\n   private HddsProtos.ReplicationType type;\n   private HddsProtos.ReplicationFactor factor;\n   private FileEncryptionInfo encInfo;\n+  private long objectID;\n+  private long updateID;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYzMDY3NQ=="}, "originalCommit": {"oid": "979d8a226b839f23dfcb5ea281d0c014781c6051"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODczOTY5OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyRenameRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwMjowNzo0NlrOFcsVRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDowNDo1NlrOFdkN4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYzMDc5MA==", "bodyText": "It may be safer to initialize success to false, and set it to true at the end of the try block when all operations are complete.", "url": "https://github.com/apache/ozone/pull/428#discussion_r365630790", "createdAt": "2020-01-13T02:07:46Z", "author": {"login": "arp7"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyRenameRequest.java", "diffHunk": "@@ -112,6 +112,7 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n     OMMetadataManager omMetadataManager = ozoneManager.getMetadataManager();\n     boolean acquiredLock = false;\n     OMClientResponse omClientResponse = null;\n+    boolean success = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "979d8a226b839f23dfcb5ea281d0c014781c6051"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU0NjQwMA==", "bodyText": "Done.", "url": "https://github.com/apache/ozone/pull/428#discussion_r366546400", "createdAt": "2020-01-14T20:04:56Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyRenameRequest.java", "diffHunk": "@@ -112,6 +112,7 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n     OMMetadataManager omMetadataManager = ozoneManager.getMetadataManager();\n     boolean acquiredLock = false;\n     OMClientResponse omClientResponse = null;\n+    boolean success = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYzMDc5MA=="}, "originalCommit": {"oid": "979d8a226b839f23dfcb5ea281d0c014781c6051"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTIwMDgwOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmMultipartKeyInfo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMDoyMjoxOFrOFdDbeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDowNDo0OFrOFdkNpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAwOTIxMA==", "bodyText": "Minor NIT: OmKeyInfo -> OmMultipartKeyInfo", "url": "https://github.com/apache/ozone/pull/428#discussion_r366009210", "createdAt": "2020-01-13T20:22:18Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmMultipartKeyInfo.java", "diffHunk": "@@ -83,6 +128,72 @@ public ReplicationFactor getReplicationFactor() {\n     return replicationFactor;\n   }\n \n+  /**\n+   * Builder of OmKeyInfo.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "979d8a226b839f23dfcb5ea281d0c014781c6051"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU0NjM0MA==", "bodyText": "Done.", "url": "https://github.com/apache/ozone/pull/428#discussion_r366546340", "createdAt": "2020-01-14T20:04:48Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmMultipartKeyInfo.java", "diffHunk": "@@ -83,6 +128,72 @@ public ReplicationFactor getReplicationFactor() {\n     return replicationFactor;\n   }\n \n+  /**\n+   * Builder of OmKeyInfo.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAwOTIxMA=="}, "originalCommit": {"oid": "979d8a226b839f23dfcb5ea281d0c014781c6051"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTMxOTQ2OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyDeleteRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMTowNzoxOVrOFdElEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxOTo1NTozNlrOFdj9rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAyODA1MQ==", "bodyText": "I think, we don't need to set updateID, as we delete this entry from KeyTable anyway. (As we set Optional.absent() below, which will be deleted from OM DB eventually when double buffer picks). Or is there any scenario by setting this helps.\nExample: Create key Key1 - 1, Delete Key Key1 - 2 Create Key Key1 (again) - 3 Now replay happening from 1, as now in KeyTable it will have updateID 3, we think it as replay just by checking OmKeyInfo.getUpdateID, similar to Bucket/Volume delete.", "url": "https://github.com/apache/ozone/pull/428#discussion_r366028051", "createdAt": "2020-01-13T21:07:19Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyDeleteRequest.java", "diffHunk": "@@ -126,6 +126,8 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       if (omKeyInfo == null) {\n         throw new OMException(\"Key not found\", KEY_NOT_FOUND);\n       }\n+      // Set the UpdateID to current transactionLogIndex\n+      omKeyInfo.setUpdateID(transactionLogIndex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "979d8a226b839f23dfcb5ea281d0c014781c6051"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU0MjI1Mw==", "bodyText": "Deleted Keys are put in DeletedKey Table and then purged when we get KeyPurgeRequest. As the purge request could also be a replay, we should only delete the keys which were deleted before the purge request. For this check, we need to set the updateID here.", "url": "https://github.com/apache/ozone/pull/428#discussion_r366542253", "createdAt": "2020-01-14T19:55:36Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyDeleteRequest.java", "diffHunk": "@@ -126,6 +126,8 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       if (omKeyInfo == null) {\n         throw new OMException(\"Key not found\", KEY_NOT_FOUND);\n       }\n+      // Set the UpdateID to current transactionLogIndex\n+      omKeyInfo.setUpdateID(transactionLogIndex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAyODA1MQ=="}, "originalCommit": {"oid": "979d8a226b839f23dfcb5ea281d0c014781c6051"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTMzNDAzOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/s3/multipart/S3MultipartUploadAbortRequest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMToxMjoxOVrOFdEt6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMToxMjoxOVrOFdEt6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAzMDMxMg==", "bodyText": "Same as above, I think we don't need to set updateID here, as anyway we are removing entry from multipartInfo table. Is there is any use case that will help in the detection of replay by setting here?", "url": "https://github.com/apache/ozone/pull/428#discussion_r366030312", "createdAt": "2020-01-13T21:12:19Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/s3/multipart/S3MultipartUploadAbortRequest.java", "diffHunk": "@@ -120,6 +124,7 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n         multipartKeyInfo = omMetadataManager\n             .getMultipartInfoTable().get(multipartKey);\n \n+        multipartKeyInfo.setUpdateID(transactionLogIndex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "979d8a226b839f23dfcb5ea281d0c014781c6051"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTY1MDAzOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyRenameRequest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMzoxNjozMlrOFdHvfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMTozOTo1MlrOFeHTBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA3OTg3MA==", "bodyText": "As this is like new key is getting created, so do we need to set objectID also here?", "url": "https://github.com/apache/ozone/pull/428#discussion_r366079870", "createdAt": "2020-01-13T23:16:32Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyRenameRequest.java", "diffHunk": "@@ -155,6 +156,9 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       //Set modification time\n       fromKeyValue.setModificationTime(renameKeyArgs.getModificationTime());\n \n+      // Set the UpdateID to current transactionLogIndex\n+      fromKeyValue.setUpdateID(transactionLogIndex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "979d8a226b839f23dfcb5ea281d0c014781c6051"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU0NDAyMw==", "bodyText": "I think either way should be ok. I thought since its the same key being renamed, we could have the same objectID. But I am ok changing it to current transactionLogIndex. Let me know what you think.", "url": "https://github.com/apache/ozone/pull/428#discussion_r366544023", "createdAt": "2020-01-14T19:59:25Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyRenameRequest.java", "diffHunk": "@@ -155,6 +156,9 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       //Set modification time\n       fromKeyValue.setModificationTime(renameKeyArgs.getModificationTime());\n \n+      // Set the UpdateID to current transactionLogIndex\n+      fromKeyValue.setUpdateID(transactionLogIndex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA3OTg3MA=="}, "originalCommit": {"oid": "979d8a226b839f23dfcb5ea281d0c014781c6051"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyMTE1OA==", "bodyText": "As discussed offline, we can change this when we use them in finding a transaction is replay or not.", "url": "https://github.com/apache/ozone/pull/428#discussion_r367121158", "createdAt": "2020-01-15T21:39:52Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyRenameRequest.java", "diffHunk": "@@ -155,6 +156,9 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       //Set modification time\n       fromKeyValue.setModificationTime(renameKeyArgs.getModificationTime());\n \n+      // Set the UpdateID to current transactionLogIndex\n+      fromKeyValue.setUpdateID(transactionLogIndex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA3OTg3MA=="}, "originalCommit": {"oid": "979d8a226b839f23dfcb5ea281d0c014781c6051"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTcyNjQ1OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/s3/multipart/S3MultipartUploadCompleteRequest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMzo1Nzo0NFrOFdIdxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDowNDozMlrOFdkNLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA5MTcxOQ==", "bodyText": "As discussed offline, for this we can set ObjectID, which we have in the dbOpenKeyInfo.", "url": "https://github.com/apache/ozone/pull/428#discussion_r366091719", "createdAt": "2020-01-13T23:57:44Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/s3/multipart/S3MultipartUploadCompleteRequest.java", "diffHunk": "@@ -229,17 +229,33 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n           // This is a newly added key, it does not have any versions.\n           OmKeyLocationInfoGroup keyLocationInfoGroup = new\n               OmKeyLocationInfoGroup(0, partLocationInfos);\n+\n+          // Get the objectID of the key from OpenKeyTable\n+          OmKeyInfo dbOpenKeyInfo = omMetadataManager.getOpenKeyTable()\n+              .get(multipartKey);\n+\n           // A newly created key, this is the first version.\n-          omKeyInfo = new OmKeyInfo.Builder().setVolumeName(volumeName)\n+          OmKeyInfo.Builder builder =\n+              new OmKeyInfo.Builder().setVolumeName(volumeName)\n               .setBucketName(bucketName).setKeyName(keyName)\n               .setReplicationFactor(factor).setReplicationType(type)\n               .setCreationTime(keyArgs.getModificationTime())\n               .setModificationTime(keyArgs.getModificationTime())\n               .setDataSize(dataSize)\n               .setOmKeyLocationInfos(\n                   Collections.singletonList(keyLocationInfoGroup))\n-              .setAcls(OzoneAclUtil.fromProtobuf(keyArgs.getAclsList()))\n-              .build();\n+              .setAcls(OzoneAclUtil.fromProtobuf(keyArgs.getAclsList()));\n+          // Check if db entry has ObjectID. This check is required because\n+          // it is possible that between multipart key uploads and complete,\n+          // we had an upgrade.\n+          // TODO: If on upgrades we do not consider the non-completed multipart\n+          //  uploads, then this check can be removed.\n+          if (dbOpenKeyInfo.getObjectID() != 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "979d8a226b839f23dfcb5ea281d0c014781c6051"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU0NjIyMw==", "bodyText": "Done.", "url": "https://github.com/apache/ozone/pull/428#discussion_r366546223", "createdAt": "2020-01-14T20:04:32Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/s3/multipart/S3MultipartUploadCompleteRequest.java", "diffHunk": "@@ -229,17 +229,33 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n           // This is a newly added key, it does not have any versions.\n           OmKeyLocationInfoGroup keyLocationInfoGroup = new\n               OmKeyLocationInfoGroup(0, partLocationInfos);\n+\n+          // Get the objectID of the key from OpenKeyTable\n+          OmKeyInfo dbOpenKeyInfo = omMetadataManager.getOpenKeyTable()\n+              .get(multipartKey);\n+\n           // A newly created key, this is the first version.\n-          omKeyInfo = new OmKeyInfo.Builder().setVolumeName(volumeName)\n+          OmKeyInfo.Builder builder =\n+              new OmKeyInfo.Builder().setVolumeName(volumeName)\n               .setBucketName(bucketName).setKeyName(keyName)\n               .setReplicationFactor(factor).setReplicationType(type)\n               .setCreationTime(keyArgs.getModificationTime())\n               .setModificationTime(keyArgs.getModificationTime())\n               .setDataSize(dataSize)\n               .setOmKeyLocationInfos(\n                   Collections.singletonList(keyLocationInfoGroup))\n-              .setAcls(OzoneAclUtil.fromProtobuf(keyArgs.getAclsList()))\n-              .build();\n+              .setAcls(OzoneAclUtil.fromProtobuf(keyArgs.getAclsList()));\n+          // Check if db entry has ObjectID. This check is required because\n+          // it is possible that between multipart key uploads and complete,\n+          // we had an upgrade.\n+          // TODO: If on upgrades we do not consider the non-completed multipart\n+          //  uploads, then this check can be removed.\n+          if (dbOpenKeyInfo.getObjectID() != 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA5MTcxOQ=="}, "originalCommit": {"oid": "979d8a226b839f23dfcb5ea281d0c014781c6051"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTczMTcwOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmMultipartKeyInfo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMDowMTowMFrOFdIhBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDowNDoyMVrOFdkM5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA5MjU1MA==", "bodyText": "This method is not called any where, as we use builder methods.", "url": "https://github.com/apache/ozone/pull/428#discussion_r366092550", "createdAt": "2020-01-14T00:01:00Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmMultipartKeyInfo.java", "diffHunk": "@@ -35,22 +35,67 @@\n   private final ReplicationType replicationType;\n   private final ReplicationFactor replicationFactor;\n   private TreeMap<Integer, PartKeyInfo> partKeyInfoList;\n+  private long objectID;\n+  private long updateID;\n \n   /**\n    * Construct OmMultipartKeyInfo object which holds multipart upload\n    * information for a key.\n    */\n   public OmMultipartKeyInfo(String id, long creationTime,\n-                            ReplicationType replicationType,\n-                            ReplicationFactor replicationFactor,\n-                            Map<Integer, PartKeyInfo> list) {\n+      ReplicationType replicationType, ReplicationFactor replicationFactor,\n+      Map<Integer, PartKeyInfo> list, long objectID, long updateID) {\n     this.uploadID = id;\n     this.creationTime = creationTime;\n     this.replicationType = replicationType;\n     this.replicationFactor = replicationFactor;\n     this.partKeyInfoList = new TreeMap<>(list);\n+    this.objectID = objectID;\n+    this.updateID = updateID;\n   }\n \n+  /**\n+   * Set the Object ID. If this value is already set then this function throws.\n+   * There is a reason why we cannot use the final here. The\n+   * OMMultipartKeyInfo is deserialized from the protobuf in many places in\n+   * code. We need to set this object ID, after it is deserialized.\n+   *\n+   * @param obId - long\n+   */\n+  public void setObjectID(long obId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "979d8a226b839f23dfcb5ea281d0c014781c6051"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU0NjE0OQ==", "bodyText": "Removed.", "url": "https://github.com/apache/ozone/pull/428#discussion_r366546149", "createdAt": "2020-01-14T20:04:21Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmMultipartKeyInfo.java", "diffHunk": "@@ -35,22 +35,67 @@\n   private final ReplicationType replicationType;\n   private final ReplicationFactor replicationFactor;\n   private TreeMap<Integer, PartKeyInfo> partKeyInfoList;\n+  private long objectID;\n+  private long updateID;\n \n   /**\n    * Construct OmMultipartKeyInfo object which holds multipart upload\n    * information for a key.\n    */\n   public OmMultipartKeyInfo(String id, long creationTime,\n-                            ReplicationType replicationType,\n-                            ReplicationFactor replicationFactor,\n-                            Map<Integer, PartKeyInfo> list) {\n+      ReplicationType replicationType, ReplicationFactor replicationFactor,\n+      Map<Integer, PartKeyInfo> list, long objectID, long updateID) {\n     this.uploadID = id;\n     this.creationTime = creationTime;\n     this.replicationType = replicationType;\n     this.replicationFactor = replicationFactor;\n     this.partKeyInfoList = new TreeMap<>(list);\n+    this.objectID = objectID;\n+    this.updateID = updateID;\n   }\n \n+  /**\n+   * Set the Object ID. If this value is already set then this function throws.\n+   * There is a reason why we cannot use the final here. The\n+   * OMMultipartKeyInfo is deserialized from the protobuf in many places in\n+   * code. We need to set this object ID, after it is deserialized.\n+   *\n+   * @param obId - long\n+   */\n+  public void setObjectID(long obId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA5MjU1MA=="}, "originalCommit": {"oid": "979d8a226b839f23dfcb5ea281d0c014781c6051"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTczMzIwOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmKeyInfo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMDowMTo1NVrOFdIh8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDowNDoxNFrOFdkMvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA5Mjc4NA==", "bodyText": "This method is not called anywhere, as we use builder methods.", "url": "https://github.com/apache/ozone/pull/428#discussion_r366092784", "createdAt": "2020-01-14T00:01:55Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmKeyInfo.java", "diffHunk": "@@ -135,6 +141,47 @@ public void updateModifcationTime() {\n     this.modificationTime = Time.monotonicNow();\n   }\n \n+  /**\n+   * Set the Object ID. If this value is already set then this function throws.\n+   * There is a reason why we cannot use the final here. The OMKeyInfo is\n+   * deserialized from the protobuf in many places in code. We need to set\n+   * this object ID, after it is deserialized.\n+   *\n+   * @param obId - long\n+   */\n+  public void setObjectID(long obId) {\n+    if(this.objectID != 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "979d8a226b839f23dfcb5ea281d0c014781c6051"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU0NjExMQ==", "bodyText": "Removed", "url": "https://github.com/apache/ozone/pull/428#discussion_r366546111", "createdAt": "2020-01-14T20:04:14Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmKeyInfo.java", "diffHunk": "@@ -135,6 +141,47 @@ public void updateModifcationTime() {\n     this.modificationTime = Time.monotonicNow();\n   }\n \n+  /**\n+   * Set the Object ID. If this value is already set then this function throws.\n+   * There is a reason why we cannot use the final here. The OMKeyInfo is\n+   * deserialized from the protobuf in many places in code. We need to set\n+   * this object ID, after it is deserialized.\n+   *\n+   * @param obId - long\n+   */\n+  public void setObjectID(long obId) {\n+    if(this.objectID != 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA5Mjc4NA=="}, "originalCommit": {"oid": "979d8a226b839f23dfcb5ea281d0c014781c6051"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTE0MjA2OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMDirectoryCreateRequest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNToxNTo0MFrOFi8yPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNToxNTo0MFrOFi8yPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5MTgwNQ==", "bodyText": "Can transactionLogIndex be used as a unique objectId over time ?", "url": "https://github.com/apache/ozone/pull/428#discussion_r372191805", "createdAt": "2020-01-29T05:15:40Z", "author": {"login": "prashantpogde"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMDirectoryCreateRequest.java", "diffHunk": "@@ -210,7 +210,7 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n \n   private OmKeyInfo createDirectoryKeyInfo(OzoneManager ozoneManager,\n       OmBucketInfo omBucketInfo, String volumeName, String bucketName,\n-      String keyName, KeyArgs keyArgs)\n+      String keyName, KeyArgs keyArgs, long transactionLogIndex)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ff22114b9fea4e46d886e460330be0bde2f62c6"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 92, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}