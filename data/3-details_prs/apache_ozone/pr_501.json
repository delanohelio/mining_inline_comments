{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4MzI5ODE0", "number": 501, "title": "HDDS-2944. Handle replay of KeyCommitRequest and DirectoryCreateRequest", "bodyText": "What changes were proposed in this pull request?\nTo ensure that key commit operations are idempotent, compare the transactionID with the objectID and updateID to make sure that the transaction is not a replay. If the transactionID <= updateID, then it implies that the transaction is a replay and hence it should be skipped.\nOMKeyCommitRequest and OMDirectoryCreateRequest are made idempotent in this Jira.\nWhat is the link to the Apache JIRA\nhttps://issues.apache.org/jira/browse/HDDS-2944\nHow was this patch tested?\nUnit tests are added.", "createdAt": "2020-01-29T01:32:24Z", "url": "https://github.com/apache/ozone/pull/501", "merged": true, "mergeCommit": {"oid": "322120c439bfce1fd6dd6efe8cd87aee3f76312e"}, "closed": true, "closedAt": "2020-02-11T01:02:29Z", "author": {"login": "hanishakoneru"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_P60ngBqjI5OTE2NDE2NzY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDHEqagFqTM1NjM3MDc1MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "10cb6a7b2ee25b13818147631c53612699fd0a30", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/10cb6a7b2ee25b13818147631c53612699fd0a30", "committedDate": "2020-01-30T00:05:27Z", "message": "checkstyle"}, "afterCommit": {"oid": "83c18d1346863a3dfd822dd4154bc1137ef8a345", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/83c18d1346863a3dfd822dd4154bc1137ef8a345", "committedDate": "2020-01-30T01:04:44Z", "message": "rebase"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMzIyNDMz", "url": "https://github.com/apache/ozone/pull/501#pullrequestreview-351322433", "createdAt": "2020-01-31T07:04:02Z", "commit": {"oid": "83c18d1346863a3dfd822dd4154bc1137ef8a345"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwNzowNDowMlrOFkC4KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwNzowNDowMlrOFkC4KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM0MDIwMA==", "bodyText": "Is this the expected behavior, as the original code has returned normal OMResponse.", "url": "https://github.com/apache/ozone/pull/501#discussion_r373340200", "createdAt": "2020-01-31T07:04:02Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMDirectoryCreateRequest.java", "diffHunk": "@@ -126,16 +143,17 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n     boolean acquiredLock = false;\n     IOException exception = null;\n     OMClientResponse omClientResponse = null;\n+    Result result = null;\n     try {\n       // check Acl\n       checkKeyAcls(ozoneManager, volumeName, bucketName, keyName,\n           IAccessAuthorizer.ACLType.CREATE, OzoneObj.ResourceType.KEY);\n \n       // Check if this is the root of the filesystem.\n       if (keyName.length() == 0) {\n-        return new OMDirectoryCreateResponse(null,\n-            omResponse.setCreateDirectoryResponse(\n-                CreateDirectoryResponse.newBuilder()).build());\n+        throw new OMException(\"Directory create failed. Cannot create \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83c18d1346863a3dfd822dd4154bc1137ef8a345"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMzY0ODQ5", "url": "https://github.com/apache/ozone/pull/501#pullrequestreview-353364849", "createdAt": "2020-02-04T23:02:15Z", "commit": {"oid": "83c18d1346863a3dfd822dd4154bc1137ef8a345"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMzowMjoxNVrOFlmjVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMzowMjoxNVrOFlmjVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk3MzI3MA==", "bodyText": "Minor NIT:\nwe can set result = Result.Failure in the beginning, in that way we don't need if check.", "url": "https://github.com/apache/ozone/pull/501#discussion_r374973270", "createdAt": "2020-02-04T23:02:15Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMDirectoryCreateRequest.java", "diffHunk": "@@ -160,52 +178,86 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       } else if (omDirectoryResult == DIRECTORY_EXISTS_IN_GIVENPATH ||\n           omDirectoryResult == NONE) {\n         dirKeyInfo = createDirectoryKeyInfo(ozoneManager, omBucketInfo,\n-            volumeName, bucketName, keyName, keyArgs, transactionLogIndex);\n+            volumeName, bucketName, keyName, keyArgs, trxnLogIndex);\n \n         omMetadataManager.getKeyTable().addCacheEntry(\n             new CacheKey<>(omMetadataManager.getOzoneKey(volumeName, bucketName,\n                 dirKeyInfo.getKeyName())),\n-            new CacheValue<>(Optional.of(dirKeyInfo), transactionLogIndex));\n+            new CacheValue<>(Optional.of(dirKeyInfo), trxnLogIndex));\n+\n+        omClientResponse = new OMDirectoryCreateResponse(omResponse.build(),\n+            dirKeyInfo);\n+      } else {\n+        // omDirectoryResult == DIRECTORY_EXITS\n+        // Check if this is a replay of ratis logs\n+        String dirKey = omMetadataManager.getOzoneDirKey(volumeName,\n+            bucketName, keyName);\n+        OmKeyInfo dbKeyInfo = omMetadataManager.getKeyTable().get(dirKey);\n+        if (isReplay(ozoneManager, dbKeyInfo.getUpdateID(), trxnLogIndex)) {\n+          throw new OMReplayException();\n+        } else {\n+          result = Result.DIRECTORY_ALREADY_EXISTS;\n+          throw new OMException(\"Directory \" + dirKey + \"already exists in \" +\n+              \"volume/bucket: \" + volumeName + \"/\" + bucketName,\n+              DIRECTORY_ALREADY_EXISTS);\n+        }\n       }\n-      // if directory already exists do nothing or do we need to throw\n-      // exception? Current KeyManagerImpl code does just return, following\n-      // similar approach.\n-\n-      omResponse.setCreateDirectoryResponse(\n-          CreateDirectoryResponse.newBuilder());\n-      omClientResponse = new OMDirectoryCreateResponse(dirKeyInfo,\n-          omResponse.build());\n \n+      result = Result.SUCCESS;\n     } catch (IOException ex) {\n-      exception = ex;\n-      omClientResponse = new OMDirectoryCreateResponse(null,\n-          createErrorOMResponse(omResponse, exception));\n+      if (ex instanceof OMReplayException) {\n+        result = Result.REPLAY;\n+        omClientResponse = new OMDirectoryCreateResponse(\n+            createReplayOMResponse(omResponse));\n+      } else {\n+        if (result == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83c18d1346863a3dfd822dd4154bc1137ef8a345"}, "originalPosition": 135}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMzY1MTUy", "url": "https://github.com/apache/ozone/pull/501#pullrequestreview-353365152", "createdAt": "2020-02-04T23:02:55Z", "commit": {"oid": "83c18d1346863a3dfd822dd4154bc1137ef8a345"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMzowMjo1NVrOFlmkVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMzowMjo1NVrOFlmkVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk3MzUyNw==", "bodyText": "Minor:\nisDebugEnabled check.", "url": "https://github.com/apache/ozone/pull/501#discussion_r374973527", "createdAt": "2020-02-04T23:02:55Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMDirectoryCreateRequest.java", "diffHunk": "@@ -160,52 +178,86 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       } else if (omDirectoryResult == DIRECTORY_EXISTS_IN_GIVENPATH ||\n           omDirectoryResult == NONE) {\n         dirKeyInfo = createDirectoryKeyInfo(ozoneManager, omBucketInfo,\n-            volumeName, bucketName, keyName, keyArgs, transactionLogIndex);\n+            volumeName, bucketName, keyName, keyArgs, trxnLogIndex);\n \n         omMetadataManager.getKeyTable().addCacheEntry(\n             new CacheKey<>(omMetadataManager.getOzoneKey(volumeName, bucketName,\n                 dirKeyInfo.getKeyName())),\n-            new CacheValue<>(Optional.of(dirKeyInfo), transactionLogIndex));\n+            new CacheValue<>(Optional.of(dirKeyInfo), trxnLogIndex));\n+\n+        omClientResponse = new OMDirectoryCreateResponse(omResponse.build(),\n+            dirKeyInfo);\n+      } else {\n+        // omDirectoryResult == DIRECTORY_EXITS\n+        // Check if this is a replay of ratis logs\n+        String dirKey = omMetadataManager.getOzoneDirKey(volumeName,\n+            bucketName, keyName);\n+        OmKeyInfo dbKeyInfo = omMetadataManager.getKeyTable().get(dirKey);\n+        if (isReplay(ozoneManager, dbKeyInfo.getUpdateID(), trxnLogIndex)) {\n+          throw new OMReplayException();\n+        } else {\n+          result = Result.DIRECTORY_ALREADY_EXISTS;\n+          throw new OMException(\"Directory \" + dirKey + \"already exists in \" +\n+              \"volume/bucket: \" + volumeName + \"/\" + bucketName,\n+              DIRECTORY_ALREADY_EXISTS);\n+        }\n       }\n-      // if directory already exists do nothing or do we need to throw\n-      // exception? Current KeyManagerImpl code does just return, following\n-      // similar approach.\n-\n-      omResponse.setCreateDirectoryResponse(\n-          CreateDirectoryResponse.newBuilder());\n-      omClientResponse = new OMDirectoryCreateResponse(dirKeyInfo,\n-          omResponse.build());\n \n+      result = Result.SUCCESS;\n     } catch (IOException ex) {\n-      exception = ex;\n-      omClientResponse = new OMDirectoryCreateResponse(null,\n-          createErrorOMResponse(omResponse, exception));\n+      if (ex instanceof OMReplayException) {\n+        result = Result.REPLAY;\n+        omClientResponse = new OMDirectoryCreateResponse(\n+            createReplayOMResponse(omResponse));\n+      } else {\n+        if (result == null) {\n+          result = Result.FAILURE;\n+        }\n+        exception = ex;\n+        omClientResponse = new OMDirectoryCreateResponse(\n+            createErrorOMResponse(omResponse, exception));\n+      }\n     } finally {\n       if (omClientResponse != null) {\n         omClientResponse.setFlushFuture(\n-            ozoneManagerDoubleBufferHelper.add(omClientResponse,\n-                transactionLogIndex));\n+            omDoubleBufferHelper.add(omClientResponse,\n+                trxnLogIndex));\n       }\n       if (acquiredLock) {\n         omMetadataManager.getLock().releaseWriteLock(BUCKET_LOCK, volumeName,\n             bucketName);\n       }\n     }\n \n-    auditLog(auditLogger, buildAuditMessage(OMAction.CREATE_DIRECTORY,\n-        auditMap, exception, userInfo));\n+    if (result != Result.REPLAY) {\n+      auditLog(auditLogger, buildAuditMessage(OMAction.CREATE_DIRECTORY,\n+          auditMap, exception, userInfo));\n+    }\n \n-    if (exception == null) {\n-      LOG.debug(\"Directory is successfully created for Key: {} in \" +\n-              \"volume/bucket:{}/{}\", keyName, volumeName, bucketName);\n+    switch (result) {\n+    case SUCCESS:\n       omMetrics.incNumKeys();\n-      return omClientResponse;\n-    } else {\n-      LOG.error(\"CreateDirectory failed for Key: {} in volume/bucket:{}/{}\",\n-          keyName, volumeName, bucketName, exception);\n-      omMetrics.incNumCreateDirectoryFails();\n-      return omClientResponse;\n+      LOG.debug(\"Directory created. Volume:{}, Bucket:{}, Key:{}\", volumeName,\n+          bucketName, keyName);\n+      break;\n+    case REPLAY:\n+      LOG.debug(\"Replayed Transaction {} ignored. Request: {}\", trxnLogIndex,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83c18d1346863a3dfd822dd4154bc1137ef8a345"}, "originalPosition": 179}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMzczNjky", "url": "https://github.com/apache/ozone/pull/501#pullrequestreview-353373692", "createdAt": "2020-02-04T23:22:34Z", "commit": {"oid": "83c18d1346863a3dfd822dd4154bc1137ef8a345"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMzoyMjozNFrOFlnANg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMzoyMjozNFrOFlnANg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4MDY2Mg==", "bodyText": "omMetrics.incNumCreateDirectoryFails(); this is missing.", "url": "https://github.com/apache/ozone/pull/501#discussion_r374980662", "createdAt": "2020-02-04T23:22:34Z", "author": {"login": "bharatviswa504"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMDirectoryCreateRequest.java", "diffHunk": "@@ -160,52 +178,86 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       } else if (omDirectoryResult == DIRECTORY_EXISTS_IN_GIVENPATH ||\n           omDirectoryResult == NONE) {\n         dirKeyInfo = createDirectoryKeyInfo(ozoneManager, omBucketInfo,\n-            volumeName, bucketName, keyName, keyArgs, transactionLogIndex);\n+            volumeName, bucketName, keyName, keyArgs, trxnLogIndex);\n \n         omMetadataManager.getKeyTable().addCacheEntry(\n             new CacheKey<>(omMetadataManager.getOzoneKey(volumeName, bucketName,\n                 dirKeyInfo.getKeyName())),\n-            new CacheValue<>(Optional.of(dirKeyInfo), transactionLogIndex));\n+            new CacheValue<>(Optional.of(dirKeyInfo), trxnLogIndex));\n+\n+        omClientResponse = new OMDirectoryCreateResponse(omResponse.build(),\n+            dirKeyInfo);\n+      } else {\n+        // omDirectoryResult == DIRECTORY_EXITS\n+        // Check if this is a replay of ratis logs\n+        String dirKey = omMetadataManager.getOzoneDirKey(volumeName,\n+            bucketName, keyName);\n+        OmKeyInfo dbKeyInfo = omMetadataManager.getKeyTable().get(dirKey);\n+        if (isReplay(ozoneManager, dbKeyInfo.getUpdateID(), trxnLogIndex)) {\n+          throw new OMReplayException();\n+        } else {\n+          result = Result.DIRECTORY_ALREADY_EXISTS;\n+          throw new OMException(\"Directory \" + dirKey + \"already exists in \" +\n+              \"volume/bucket: \" + volumeName + \"/\" + bucketName,\n+              DIRECTORY_ALREADY_EXISTS);\n+        }\n       }\n-      // if directory already exists do nothing or do we need to throw\n-      // exception? Current KeyManagerImpl code does just return, following\n-      // similar approach.\n-\n-      omResponse.setCreateDirectoryResponse(\n-          CreateDirectoryResponse.newBuilder());\n-      omClientResponse = new OMDirectoryCreateResponse(dirKeyInfo,\n-          omResponse.build());\n \n+      result = Result.SUCCESS;\n     } catch (IOException ex) {\n-      exception = ex;\n-      omClientResponse = new OMDirectoryCreateResponse(null,\n-          createErrorOMResponse(omResponse, exception));\n+      if (ex instanceof OMReplayException) {\n+        result = Result.REPLAY;\n+        omClientResponse = new OMDirectoryCreateResponse(\n+            createReplayOMResponse(omResponse));\n+      } else {\n+        if (result == null) {\n+          result = Result.FAILURE;\n+        }\n+        exception = ex;\n+        omClientResponse = new OMDirectoryCreateResponse(\n+            createErrorOMResponse(omResponse, exception));\n+      }\n     } finally {\n       if (omClientResponse != null) {\n         omClientResponse.setFlushFuture(\n-            ozoneManagerDoubleBufferHelper.add(omClientResponse,\n-                transactionLogIndex));\n+            omDoubleBufferHelper.add(omClientResponse,\n+                trxnLogIndex));\n       }\n       if (acquiredLock) {\n         omMetadataManager.getLock().releaseWriteLock(BUCKET_LOCK, volumeName,\n             bucketName);\n       }\n     }\n \n-    auditLog(auditLogger, buildAuditMessage(OMAction.CREATE_DIRECTORY,\n-        auditMap, exception, userInfo));\n+    if (result != Result.REPLAY) {\n+      auditLog(auditLogger, buildAuditMessage(OMAction.CREATE_DIRECTORY,\n+          auditMap, exception, userInfo));\n+    }\n \n-    if (exception == null) {\n-      LOG.debug(\"Directory is successfully created for Key: {} in \" +\n-              \"volume/bucket:{}/{}\", keyName, volumeName, bucketName);\n+    switch (result) {\n+    case SUCCESS:\n       omMetrics.incNumKeys();\n-      return omClientResponse;\n-    } else {\n-      LOG.error(\"CreateDirectory failed for Key: {} in volume/bucket:{}/{}\",\n-          keyName, volumeName, bucketName, exception);\n-      omMetrics.incNumCreateDirectoryFails();\n-      return omClientResponse;\n+      LOG.debug(\"Directory created. Volume:{}, Bucket:{}, Key:{}\", volumeName,\n+          bucketName, keyName);\n+      break;\n+    case REPLAY:\n+      LOG.debug(\"Replayed Transaction {} ignored. Request: {}\", trxnLogIndex,\n+          createDirectoryRequest);\n+      break;\n+    case DIRECTORY_ALREADY_EXISTS:\n+      LOG.error(\"Directory already exists. Volume:{}, Bucket:{}, Key{}\",\n+          volumeName, bucketName, keyName, exception);\n+      break;\n+    case FAILURE:\n+      LOG.error(\"Directory creation failed. Volume:{}, Bucket:{}, Key{}. \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83c18d1346863a3dfd822dd4154bc1137ef8a345"}, "originalPosition": 187}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51705ccc8c01225039ce59fa85cc91940e84d6c8", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/51705ccc8c01225039ce59fa85cc91940e84d6c8", "committedDate": "2020-02-10T20:05:13Z", "message": "HDDS-2944. Handle replay of KeyCommit Requests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d532b3c25c1c720497637f8ab15353958092252a", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/d532b3c25c1c720497637f8ab15353958092252a", "committedDate": "2020-02-10T20:05:13Z", "message": "HDDS-2944. OMReplayException"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a3aebe8832b8c42e2d790e14a298d4495965768", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/5a3aebe8832b8c42e2d790e14a298d4495965768", "committedDate": "2020-02-10T20:05:13Z", "message": "OMDirectoryCreateRequest and pending changes to KeyCreate and FileCreate requests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "844774d029c448f3520f396f87e5a44b7f32bb80", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/844774d029c448f3520f396f87e5a44b7f32bb80", "committedDate": "2020-02-10T20:05:13Z", "message": "unit test and checkstyle fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4709797a89109806c814e1976a7adfbdcc7ed0a", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/e4709797a89109806c814e1976a7adfbdcc7ed0a", "committedDate": "2020-02-10T20:05:13Z", "message": "checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c8ecdaaf49e429a4721fe22d8c66b6a7ce7c324", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/2c8ecdaaf49e429a4721fe22d8c66b6a7ce7c324", "committedDate": "2020-02-10T20:05:13Z", "message": "rebase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b6fc6237839120869db774aa24413168b8032f3", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/2b6fc6237839120869db774aa24413168b8032f3", "committedDate": "2020-02-10T20:05:13Z", "message": "review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1098a5b13c6861d1da7d0e0a4422c88d5a2016db", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/1098a5b13c6861d1da7d0e0a4422c88d5a2016db", "committedDate": "2020-02-10T20:05:13Z", "message": "it-icontract test fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4165271c53662bf9cd87a5c353506d48079b6b02", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/4165271c53662bf9cd87a5c353506d48079b6b02", "committedDate": "2020-02-10T20:18:27Z", "message": "rebase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73791f513647e237abbe47b7bd7c26d0e59464e0", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/73791f513647e237abbe47b7bd7c26d0e59464e0", "committedDate": "2020-02-10T20:37:04Z", "message": "Reverting changes to OM Key/File Create Request to add appenBlock to prepareKeyInfo as it breaks Multipart upload."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c83d678caa3f6ec3a4cd076198af68d2b33b54f7", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/c83d678caa3f6ec3a4cd076198af68d2b33b54f7", "committedDate": "2020-02-05T00:00:54Z", "message": "review comments"}, "afterCommit": {"oid": "73791f513647e237abbe47b7bd7c26d0e59464e0", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/73791f513647e237abbe47b7bd7c26d0e59464e0", "committedDate": "2020-02-10T20:37:04Z", "message": "Reverting changes to OM Key/File Create Request to add appenBlock to prepareKeyInfo as it breaks Multipart upload."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce75e620bdf77fe500a1231a593660986ff54ece", "author": {"user": {"login": "hanishakoneru", "name": "Hanisha Koneru"}}, "url": "https://github.com/apache/ozone/commit/ce75e620bdf77fe500a1231a593660986ff54ece", "committedDate": "2020-02-10T21:03:14Z", "message": "unit test fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MzcwNzUw", "url": "https://github.com/apache/ozone/pull/501#pullrequestreview-356370750", "createdAt": "2020-02-11T01:02:17Z", "commit": {"oid": "ce75e620bdf77fe500a1231a593660986ff54ece"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3775, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}