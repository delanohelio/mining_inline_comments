{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1MjExNDM1", "number": 1456, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMzozODowOFrOEpCNYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMTo0MDo0MVrOEsyfjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNDYzMjY2OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/upgrade/OMUpgradeFinalizer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMzozODowOFrOHad95Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNDozNjoxMVrOHbwFxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUxNjAwNQ==", "bodyText": "Nit. Can this be moved to the interface for reuse in other implementations?", "url": "https://github.com/apache/ozone/pull/1456#discussion_r497516005", "createdAt": "2020-09-30T13:38:08Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/upgrade/OMUpgradeFinalizer.java", "diffHunk": "@@ -0,0 +1,303 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.upgrade;\n+\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes;\n+import org.apache.hadoop.ozone.upgrade.UpgradeFinalizer;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.INVALID_REQUEST;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.PERSIST_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.REMOVE_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.UPDATE_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.ALREADY_FINALIZED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_DONE;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_IN_PROGRESS;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_REQUIRED;\n+\n+/**\n+ * UpgradeFinalizer implementation for the Ozone Manager service.\n+ */\n+public class OMUpgradeFinalizer implements UpgradeFinalizer<OzoneManager> {\n+\n+  private Status status = ALREADY_FINALIZED;\n+  private OMLayoutVersionManagerImpl versionManager;\n+  private String clientID;\n+\n+  private Queue<String> msgs = new ConcurrentLinkedQueue<>();\n+  private boolean isDone = false;\n+\n+  private static final OmUpgradeAction NOOP = a -> {};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bb3ef5fb34dafb67d98cddb3a4c48ef183fa9da"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc2MDc4NQ==", "bodyText": "I moved it to OmUpgradeAction, I believe that is the best place. Thank you for catching this one.", "url": "https://github.com/apache/ozone/pull/1456#discussion_r498760785", "createdAt": "2020-10-02T11:16:36Z", "author": {"login": "fapifta"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/upgrade/OMUpgradeFinalizer.java", "diffHunk": "@@ -0,0 +1,303 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.upgrade;\n+\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes;\n+import org.apache.hadoop.ozone.upgrade.UpgradeFinalizer;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.INVALID_REQUEST;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.PERSIST_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.REMOVE_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.UPDATE_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.ALREADY_FINALIZED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_DONE;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_IN_PROGRESS;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_REQUIRED;\n+\n+/**\n+ * UpgradeFinalizer implementation for the Ozone Manager service.\n+ */\n+public class OMUpgradeFinalizer implements UpgradeFinalizer<OzoneManager> {\n+\n+  private Status status = ALREADY_FINALIZED;\n+  private OMLayoutVersionManagerImpl versionManager;\n+  private String clientID;\n+\n+  private Queue<String> msgs = new ConcurrentLinkedQueue<>();\n+  private boolean isDone = false;\n+\n+  private static final OmUpgradeAction NOOP = a -> {};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUxNjAwNQ=="}, "originalCommit": {"oid": "7bb3ef5fb34dafb67d98cddb3a4c48ef183fa9da"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg2MTUwOA==", "bodyText": "Ok, it turned out that if OMUpgradeAction has just one constants, that qualifies as a bad practice, as if an interface does contain just constants, that can have some disadvantages according to seemingly more clever ppl than me. :)\nI moved it back to OMUpgradeFinalizer, as due to the logic we need to preserve the OMUpgradeAction-ness of the NOOP to work well there, as we want to push OzoneManager instances to the executeAction, and the type system is against having a simple UpgradeAction as a NOOP. We can thin about adding this to OMLayoutFeature instead, but as we do not use it elsewhere at the moment, and because we use Optional and we provide just a null in case the finalize action is a noop, we do not need it elsewhere as it seems...\nAn other approach can be an orElse(null), but with that we can even leave out the Optional in the OMLayoutFeature and LayoutFeature implementations/definitions, and instead checking if it is a NOOP, we can check for null.\nWhat do you think?", "url": "https://github.com/apache/ozone/pull/1456#discussion_r498861508", "createdAt": "2020-10-02T14:36:11Z", "author": {"login": "fapifta"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/upgrade/OMUpgradeFinalizer.java", "diffHunk": "@@ -0,0 +1,303 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.upgrade;\n+\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes;\n+import org.apache.hadoop.ozone.upgrade.UpgradeFinalizer;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.INVALID_REQUEST;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.PERSIST_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.REMOVE_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.UPDATE_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.ALREADY_FINALIZED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_DONE;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_IN_PROGRESS;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_REQUIRED;\n+\n+/**\n+ * UpgradeFinalizer implementation for the Ozone Manager service.\n+ */\n+public class OMUpgradeFinalizer implements UpgradeFinalizer<OzoneManager> {\n+\n+  private Status status = ALREADY_FINALIZED;\n+  private OMLayoutVersionManagerImpl versionManager;\n+  private String clientID;\n+\n+  private Queue<String> msgs = new ConcurrentLinkedQueue<>();\n+  private boolean isDone = false;\n+\n+  private static final OmUpgradeAction NOOP = a -> {};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUxNjAwNQ=="}, "originalCommit": {"oid": "7bb3ef5fb34dafb67d98cddb3a4c48ef183fa9da"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNDYzNjQ2OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/upgrade/OMUpgradeFinalizer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMzozODo1NFrOHaeARQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMToxNzowN1rOHbp9EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUxNjYxMw==", "bodyText": "Nit. Class needs a Javadoc.", "url": "https://github.com/apache/ozone/pull/1456#discussion_r497516613", "createdAt": "2020-09-30T13:38:54Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/upgrade/OMUpgradeFinalizer.java", "diffHunk": "@@ -0,0 +1,303 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.upgrade;\n+\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes;\n+import org.apache.hadoop.ozone.upgrade.UpgradeFinalizer;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.INVALID_REQUEST;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.PERSIST_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.REMOVE_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.UPDATE_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.ALREADY_FINALIZED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_DONE;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_IN_PROGRESS;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_REQUIRED;\n+\n+/**\n+ * UpgradeFinalizer implementation for the Ozone Manager service.\n+ */\n+public class OMUpgradeFinalizer implements UpgradeFinalizer<OzoneManager> {\n+\n+  private Status status = ALREADY_FINALIZED;\n+  private OMLayoutVersionManagerImpl versionManager;\n+  private String clientID;\n+\n+  private Queue<String> msgs = new ConcurrentLinkedQueue<>();\n+  private boolean isDone = false;\n+\n+  private static final OmUpgradeAction NOOP = a -> {};\n+\n+  public OMUpgradeFinalizer(OMLayoutVersionManagerImpl versionManager) {\n+    this.versionManager = versionManager;\n+    if (versionManager.needsFinalization()) {\n+      status = FINALIZATION_REQUIRED;\n+    }\n+  }\n+\n+  @Override\n+  public StatusAndMessages finalize(String upgradeClientID, OzoneManager om)\n+      throws IOException {\n+    if (!versionManager.needsFinalization()) {\n+      return FINALIZED_MSG;\n+    }\n+    clientID = upgradeClientID;\n+\n+// This requires some more investigation on how to do it properly while\n+// requests are on the fly, and post finalize features one by one.\n+// Until that is done, monitoring is not really doing anything meaningful\n+// but this is a tradoff we can take for the first iteration either if needed,\n+// as the finalization of the first few features should not take that long.\n+// Follow up JIRA is in HDDS-4286\n+//    String threadName = \"OzoneManager-Upgrade-Finalizer\";\n+//    ExecutorService executor =\n+//        Executors.newSingleThreadExecutor(r -> new Thread(threadName));\n+//    executor.submit(new Worker(om));\n+    new Worker(om).call();\n+    return STARTING_MSG;\n+  }\n+\n+  @Override\n+  public StatusAndMessages reportStatus(\n+      String upgradeClientID, boolean takeover\n+  ) throws IOException {\n+    if (takeover) {\n+      clientID = upgradeClientID;\n+    }\n+    assertClientId(upgradeClientID);\n+    List<String> returningMsgs = new ArrayList<>(msgs.size()+10);\n+    status = isDone ? FINALIZATION_DONE : FINALIZATION_IN_PROGRESS;\n+    while (msgs.size() > 0) {\n+      returningMsgs.add(msgs.poll());\n+    }\n+    return new StatusAndMessages(status, returningMsgs);\n+  }\n+\n+  private void assertClientId(String id) throws OMException {\n+    if (!this.clientID.equals(id)) {\n+      throw new OMException(\"Unknown client tries to get finalization status.\\n\"\n+          + \"The requestor is not the initiating client of the finalization,\"\n+          + \" if you want to take over, and get unsent status messages, check\"\n+          + \" -takeover option.\", INVALID_REQUEST);\n+    }\n+  }\n+\n+\n+\n+\n+  private class Worker implements Callable<Void> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bb3ef5fb34dafb67d98cddb3a4c48ef183fa9da"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc2MDk3Nw==", "bodyText": "Added doc to the Worker class as well.", "url": "https://github.com/apache/ozone/pull/1456#discussion_r498760977", "createdAt": "2020-10-02T11:17:07Z", "author": {"login": "fapifta"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/upgrade/OMUpgradeFinalizer.java", "diffHunk": "@@ -0,0 +1,303 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.upgrade;\n+\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes;\n+import org.apache.hadoop.ozone.upgrade.UpgradeFinalizer;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.INVALID_REQUEST;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.PERSIST_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.REMOVE_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.UPDATE_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.ALREADY_FINALIZED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_DONE;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_IN_PROGRESS;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_REQUIRED;\n+\n+/**\n+ * UpgradeFinalizer implementation for the Ozone Manager service.\n+ */\n+public class OMUpgradeFinalizer implements UpgradeFinalizer<OzoneManager> {\n+\n+  private Status status = ALREADY_FINALIZED;\n+  private OMLayoutVersionManagerImpl versionManager;\n+  private String clientID;\n+\n+  private Queue<String> msgs = new ConcurrentLinkedQueue<>();\n+  private boolean isDone = false;\n+\n+  private static final OmUpgradeAction NOOP = a -> {};\n+\n+  public OMUpgradeFinalizer(OMLayoutVersionManagerImpl versionManager) {\n+    this.versionManager = versionManager;\n+    if (versionManager.needsFinalization()) {\n+      status = FINALIZATION_REQUIRED;\n+    }\n+  }\n+\n+  @Override\n+  public StatusAndMessages finalize(String upgradeClientID, OzoneManager om)\n+      throws IOException {\n+    if (!versionManager.needsFinalization()) {\n+      return FINALIZED_MSG;\n+    }\n+    clientID = upgradeClientID;\n+\n+// This requires some more investigation on how to do it properly while\n+// requests are on the fly, and post finalize features one by one.\n+// Until that is done, monitoring is not really doing anything meaningful\n+// but this is a tradoff we can take for the first iteration either if needed,\n+// as the finalization of the first few features should not take that long.\n+// Follow up JIRA is in HDDS-4286\n+//    String threadName = \"OzoneManager-Upgrade-Finalizer\";\n+//    ExecutorService executor =\n+//        Executors.newSingleThreadExecutor(r -> new Thread(threadName));\n+//    executor.submit(new Worker(om));\n+    new Worker(om).call();\n+    return STARTING_MSG;\n+  }\n+\n+  @Override\n+  public StatusAndMessages reportStatus(\n+      String upgradeClientID, boolean takeover\n+  ) throws IOException {\n+    if (takeover) {\n+      clientID = upgradeClientID;\n+    }\n+    assertClientId(upgradeClientID);\n+    List<String> returningMsgs = new ArrayList<>(msgs.size()+10);\n+    status = isDone ? FINALIZATION_DONE : FINALIZATION_IN_PROGRESS;\n+    while (msgs.size() > 0) {\n+      returningMsgs.add(msgs.poll());\n+    }\n+    return new StatusAndMessages(status, returningMsgs);\n+  }\n+\n+  private void assertClientId(String id) throws OMException {\n+    if (!this.clientID.equals(id)) {\n+      throw new OMException(\"Unknown client tries to get finalization status.\\n\"\n+          + \"The requestor is not the initiating client of the finalization,\"\n+          + \" if you want to take over, and get unsent status messages, check\"\n+          + \" -takeover option.\", INVALID_REQUEST);\n+    }\n+  }\n+\n+\n+\n+\n+  private class Worker implements Callable<Void> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUxNjYxMw=="}, "originalCommit": {"oid": "7bb3ef5fb34dafb67d98cddb3a4c48ef183fa9da"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExODAyMjEzOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/upgrade/OMUpgradeFinalizer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwNzo1NDo1MVrOHa-q-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwODo1MDo1MFrOHcAd5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA1MTgzMg==", "bodyText": "Do we really need to persist version to storage every time? Why not persist storage only once for the final finalization version? We already update current layout version on memory value (StorageInfo#LAYOUT_VERSION) each time Other place can get this value to know which feature is now on finalizing.", "url": "https://github.com/apache/ozone/pull/1456#discussion_r498051832", "createdAt": "2020-10-01T07:54:51Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/upgrade/OMUpgradeFinalizer.java", "diffHunk": "@@ -0,0 +1,303 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.upgrade;\n+\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes;\n+import org.apache.hadoop.ozone.upgrade.UpgradeFinalizer;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.INVALID_REQUEST;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.PERSIST_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.REMOVE_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.UPDATE_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.ALREADY_FINALIZED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_DONE;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_IN_PROGRESS;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_REQUIRED;\n+\n+/**\n+ * UpgradeFinalizer implementation for the Ozone Manager service.\n+ */\n+public class OMUpgradeFinalizer implements UpgradeFinalizer<OzoneManager> {\n+\n+  private Status status = ALREADY_FINALIZED;\n+  private OMLayoutVersionManagerImpl versionManager;\n+  private String clientID;\n+\n+  private Queue<String> msgs = new ConcurrentLinkedQueue<>();\n+  private boolean isDone = false;\n+\n+  private static final OmUpgradeAction NOOP = a -> {};\n+\n+  public OMUpgradeFinalizer(OMLayoutVersionManagerImpl versionManager) {\n+    this.versionManager = versionManager;\n+    if (versionManager.needsFinalization()) {\n+      status = FINALIZATION_REQUIRED;\n+    }\n+  }\n+\n+  @Override\n+  public StatusAndMessages finalize(String upgradeClientID, OzoneManager om)\n+      throws IOException {\n+    if (!versionManager.needsFinalization()) {\n+      return FINALIZED_MSG;\n+    }\n+    clientID = upgradeClientID;\n+\n+// This requires some more investigation on how to do it properly while\n+// requests are on the fly, and post finalize features one by one.\n+// Until that is done, monitoring is not really doing anything meaningful\n+// but this is a tradoff we can take for the first iteration either if needed,\n+// as the finalization of the first few features should not take that long.\n+// Follow up JIRA is in HDDS-4286\n+//    String threadName = \"OzoneManager-Upgrade-Finalizer\";\n+//    ExecutorService executor =\n+//        Executors.newSingleThreadExecutor(r -> new Thread(threadName));\n+//    executor.submit(new Worker(om));\n+    new Worker(om).call();\n+    return STARTING_MSG;\n+  }\n+\n+  @Override\n+  public StatusAndMessages reportStatus(\n+      String upgradeClientID, boolean takeover\n+  ) throws IOException {\n+    if (takeover) {\n+      clientID = upgradeClientID;\n+    }\n+    assertClientId(upgradeClientID);\n+    List<String> returningMsgs = new ArrayList<>(msgs.size()+10);\n+    status = isDone ? FINALIZATION_DONE : FINALIZATION_IN_PROGRESS;\n+    while (msgs.size() > 0) {\n+      returningMsgs.add(msgs.poll());\n+    }\n+    return new StatusAndMessages(status, returningMsgs);\n+  }\n+\n+  private void assertClientId(String id) throws OMException {\n+    if (!this.clientID.equals(id)) {\n+      throw new OMException(\"Unknown client tries to get finalization status.\\n\"\n+          + \"The requestor is not the initiating client of the finalization,\"\n+          + \" if you want to take over, and get unsent status messages, check\"\n+          + \" -takeover option.\", INVALID_REQUEST);\n+    }\n+  }\n+\n+\n+\n+\n+  private class Worker implements Callable<Void> {\n+    private OzoneManager ozoneManager;\n+\n+    Worker(OzoneManager om) {\n+      ozoneManager = om;\n+    }\n+\n+    @Override\n+    public Void call() throws OMException {\n+      try {\n+        emitStartingMsg();\n+\n+        for (OMLayoutFeature f : versionManager.unfinalizedFeatures()) {\n+          finalizeFeature(f);\n+          updateLayoutVersionInVersionFile(f);\n+          versionManager.finalized(f);\n+        }\n+\n+        emitFinishedMsg();\n+      } finally {\n+        isDone = true;\n+      }\n+      return null;\n+    }\n+\n+    private void finalizeFeature(OMLayoutFeature feature)\n+        throws OMException {\n+      OmUpgradeAction action = feature.onFinalizeAction().orElse(NOOP);\n+\n+      if (action == NOOP) {\n+        emitNOOPMsg(feature.name());\n+        return;\n+      }\n+\n+      putFinalizationMarkIntoVersionFile(feature);\n+\n+      emitStartingFinalizationActionMsg(feature.name());\n+      action.executeAction(ozoneManager);\n+      emitFinishFinalizationActionMsg(feature.name());\n+\n+      removeFinalizationMarkFromVersionFile(feature);\n+    }\n+\n+    private void updateLayoutVersionInVersionFile(OMLayoutFeature feature)\n+        throws OMException {\n+      int prevLayoutVersion = currentStoredLayoutVersion();\n+\n+      updateStorageLayoutVersion(feature.layoutVersion());\n+      try {\n+        persistStorage();\n+      } catch (IOException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bb3ef5fb34dafb67d98cddb3a4c48ef183fa9da"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc2NjM3NQ==", "bodyText": "The main things we want to ensure here:\n\nat any point in time there can be a failure point, so we would better persist where we are at before and after every major step, that is what we can not loose, as all the in-memory states can be lost at any point in time.\nThe finalization action that we do for LayoutFeatures does the modifications required by the LayoutFeature inside our internal structures, so we need to know when we have started one such a step but we have not finished it due to a catastrophic failure, as in that case we are potentially in an inconsistent state, and OM should not proceed with anything until the state is examined and we are free to move further.\nIf the finalization action is a NOOP, we skip this part, and just update the LayoutVersion and persist the update\nAfter a LayoutFeature is finalized we need to update and persist the LayoutVersion, as if the next finalize action ends in a catastrophic failure, we need to know where to catch up from.\n\nSo In this particular case, we persisting the LayoutFeature's LayoutVersion to Storage to ensure point 4, so we never redo the finalization of a LayoutFeature, as redoing it might lead to an issue as the start state of a second finalization would be unexpected after it finished once.", "url": "https://github.com/apache/ozone/pull/1456#discussion_r498766375", "createdAt": "2020-10-02T11:31:20Z", "author": {"login": "fapifta"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/upgrade/OMUpgradeFinalizer.java", "diffHunk": "@@ -0,0 +1,303 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.upgrade;\n+\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes;\n+import org.apache.hadoop.ozone.upgrade.UpgradeFinalizer;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.INVALID_REQUEST;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.PERSIST_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.REMOVE_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.UPDATE_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.ALREADY_FINALIZED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_DONE;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_IN_PROGRESS;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_REQUIRED;\n+\n+/**\n+ * UpgradeFinalizer implementation for the Ozone Manager service.\n+ */\n+public class OMUpgradeFinalizer implements UpgradeFinalizer<OzoneManager> {\n+\n+  private Status status = ALREADY_FINALIZED;\n+  private OMLayoutVersionManagerImpl versionManager;\n+  private String clientID;\n+\n+  private Queue<String> msgs = new ConcurrentLinkedQueue<>();\n+  private boolean isDone = false;\n+\n+  private static final OmUpgradeAction NOOP = a -> {};\n+\n+  public OMUpgradeFinalizer(OMLayoutVersionManagerImpl versionManager) {\n+    this.versionManager = versionManager;\n+    if (versionManager.needsFinalization()) {\n+      status = FINALIZATION_REQUIRED;\n+    }\n+  }\n+\n+  @Override\n+  public StatusAndMessages finalize(String upgradeClientID, OzoneManager om)\n+      throws IOException {\n+    if (!versionManager.needsFinalization()) {\n+      return FINALIZED_MSG;\n+    }\n+    clientID = upgradeClientID;\n+\n+// This requires some more investigation on how to do it properly while\n+// requests are on the fly, and post finalize features one by one.\n+// Until that is done, monitoring is not really doing anything meaningful\n+// but this is a tradoff we can take for the first iteration either if needed,\n+// as the finalization of the first few features should not take that long.\n+// Follow up JIRA is in HDDS-4286\n+//    String threadName = \"OzoneManager-Upgrade-Finalizer\";\n+//    ExecutorService executor =\n+//        Executors.newSingleThreadExecutor(r -> new Thread(threadName));\n+//    executor.submit(new Worker(om));\n+    new Worker(om).call();\n+    return STARTING_MSG;\n+  }\n+\n+  @Override\n+  public StatusAndMessages reportStatus(\n+      String upgradeClientID, boolean takeover\n+  ) throws IOException {\n+    if (takeover) {\n+      clientID = upgradeClientID;\n+    }\n+    assertClientId(upgradeClientID);\n+    List<String> returningMsgs = new ArrayList<>(msgs.size()+10);\n+    status = isDone ? FINALIZATION_DONE : FINALIZATION_IN_PROGRESS;\n+    while (msgs.size() > 0) {\n+      returningMsgs.add(msgs.poll());\n+    }\n+    return new StatusAndMessages(status, returningMsgs);\n+  }\n+\n+  private void assertClientId(String id) throws OMException {\n+    if (!this.clientID.equals(id)) {\n+      throw new OMException(\"Unknown client tries to get finalization status.\\n\"\n+          + \"The requestor is not the initiating client of the finalization,\"\n+          + \" if you want to take over, and get unsent status messages, check\"\n+          + \" -takeover option.\", INVALID_REQUEST);\n+    }\n+  }\n+\n+\n+\n+\n+  private class Worker implements Callable<Void> {\n+    private OzoneManager ozoneManager;\n+\n+    Worker(OzoneManager om) {\n+      ozoneManager = om;\n+    }\n+\n+    @Override\n+    public Void call() throws OMException {\n+      try {\n+        emitStartingMsg();\n+\n+        for (OMLayoutFeature f : versionManager.unfinalizedFeatures()) {\n+          finalizeFeature(f);\n+          updateLayoutVersionInVersionFile(f);\n+          versionManager.finalized(f);\n+        }\n+\n+        emitFinishedMsg();\n+      } finally {\n+        isDone = true;\n+      }\n+      return null;\n+    }\n+\n+    private void finalizeFeature(OMLayoutFeature feature)\n+        throws OMException {\n+      OmUpgradeAction action = feature.onFinalizeAction().orElse(NOOP);\n+\n+      if (action == NOOP) {\n+        emitNOOPMsg(feature.name());\n+        return;\n+      }\n+\n+      putFinalizationMarkIntoVersionFile(feature);\n+\n+      emitStartingFinalizationActionMsg(feature.name());\n+      action.executeAction(ozoneManager);\n+      emitFinishFinalizationActionMsg(feature.name());\n+\n+      removeFinalizationMarkFromVersionFile(feature);\n+    }\n+\n+    private void updateLayoutVersionInVersionFile(OMLayoutFeature feature)\n+        throws OMException {\n+      int prevLayoutVersion = currentStoredLayoutVersion();\n+\n+      updateStorageLayoutVersion(feature.layoutVersion());\n+      try {\n+        persistStorage();\n+      } catch (IOException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA1MTgzMg=="}, "originalCommit": {"oid": "7bb3ef5fb34dafb67d98cddb3a4c48ef183fa9da"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEyOTgzMA==", "bodyText": "Comment makes sense to me.", "url": "https://github.com/apache/ozone/pull/1456#discussion_r499129830", "createdAt": "2020-10-03T08:50:50Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/upgrade/OMUpgradeFinalizer.java", "diffHunk": "@@ -0,0 +1,303 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.upgrade;\n+\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes;\n+import org.apache.hadoop.ozone.upgrade.UpgradeFinalizer;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.INVALID_REQUEST;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.PERSIST_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.REMOVE_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.UPDATE_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.ALREADY_FINALIZED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_DONE;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_IN_PROGRESS;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_REQUIRED;\n+\n+/**\n+ * UpgradeFinalizer implementation for the Ozone Manager service.\n+ */\n+public class OMUpgradeFinalizer implements UpgradeFinalizer<OzoneManager> {\n+\n+  private Status status = ALREADY_FINALIZED;\n+  private OMLayoutVersionManagerImpl versionManager;\n+  private String clientID;\n+\n+  private Queue<String> msgs = new ConcurrentLinkedQueue<>();\n+  private boolean isDone = false;\n+\n+  private static final OmUpgradeAction NOOP = a -> {};\n+\n+  public OMUpgradeFinalizer(OMLayoutVersionManagerImpl versionManager) {\n+    this.versionManager = versionManager;\n+    if (versionManager.needsFinalization()) {\n+      status = FINALIZATION_REQUIRED;\n+    }\n+  }\n+\n+  @Override\n+  public StatusAndMessages finalize(String upgradeClientID, OzoneManager om)\n+      throws IOException {\n+    if (!versionManager.needsFinalization()) {\n+      return FINALIZED_MSG;\n+    }\n+    clientID = upgradeClientID;\n+\n+// This requires some more investigation on how to do it properly while\n+// requests are on the fly, and post finalize features one by one.\n+// Until that is done, monitoring is not really doing anything meaningful\n+// but this is a tradoff we can take for the first iteration either if needed,\n+// as the finalization of the first few features should not take that long.\n+// Follow up JIRA is in HDDS-4286\n+//    String threadName = \"OzoneManager-Upgrade-Finalizer\";\n+//    ExecutorService executor =\n+//        Executors.newSingleThreadExecutor(r -> new Thread(threadName));\n+//    executor.submit(new Worker(om));\n+    new Worker(om).call();\n+    return STARTING_MSG;\n+  }\n+\n+  @Override\n+  public StatusAndMessages reportStatus(\n+      String upgradeClientID, boolean takeover\n+  ) throws IOException {\n+    if (takeover) {\n+      clientID = upgradeClientID;\n+    }\n+    assertClientId(upgradeClientID);\n+    List<String> returningMsgs = new ArrayList<>(msgs.size()+10);\n+    status = isDone ? FINALIZATION_DONE : FINALIZATION_IN_PROGRESS;\n+    while (msgs.size() > 0) {\n+      returningMsgs.add(msgs.poll());\n+    }\n+    return new StatusAndMessages(status, returningMsgs);\n+  }\n+\n+  private void assertClientId(String id) throws OMException {\n+    if (!this.clientID.equals(id)) {\n+      throw new OMException(\"Unknown client tries to get finalization status.\\n\"\n+          + \"The requestor is not the initiating client of the finalization,\"\n+          + \" if you want to take over, and get unsent status messages, check\"\n+          + \" -takeover option.\", INVALID_REQUEST);\n+    }\n+  }\n+\n+\n+\n+\n+  private class Worker implements Callable<Void> {\n+    private OzoneManager ozoneManager;\n+\n+    Worker(OzoneManager om) {\n+      ozoneManager = om;\n+    }\n+\n+    @Override\n+    public Void call() throws OMException {\n+      try {\n+        emitStartingMsg();\n+\n+        for (OMLayoutFeature f : versionManager.unfinalizedFeatures()) {\n+          finalizeFeature(f);\n+          updateLayoutVersionInVersionFile(f);\n+          versionManager.finalized(f);\n+        }\n+\n+        emitFinishedMsg();\n+      } finally {\n+        isDone = true;\n+      }\n+      return null;\n+    }\n+\n+    private void finalizeFeature(OMLayoutFeature feature)\n+        throws OMException {\n+      OmUpgradeAction action = feature.onFinalizeAction().orElse(NOOP);\n+\n+      if (action == NOOP) {\n+        emitNOOPMsg(feature.name());\n+        return;\n+      }\n+\n+      putFinalizationMarkIntoVersionFile(feature);\n+\n+      emitStartingFinalizationActionMsg(feature.name());\n+      action.executeAction(ozoneManager);\n+      emitFinishFinalizationActionMsg(feature.name());\n+\n+      removeFinalizationMarkFromVersionFile(feature);\n+    }\n+\n+    private void updateLayoutVersionInVersionFile(OMLayoutFeature feature)\n+        throws OMException {\n+      int prevLayoutVersion = currentStoredLayoutVersion();\n+\n+      updateStorageLayoutVersion(feature.layoutVersion());\n+      try {\n+        persistStorage();\n+      } catch (IOException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA1MTgzMg=="}, "originalCommit": {"oid": "7bb3ef5fb34dafb67d98cddb3a4c48ef183fa9da"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExODA0OTgwOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/upgrade/OMUpgradeFinalizer.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwODowMjo0NFrOHa-8YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwMDoyNjoxOFrOHcLKRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA1NjI4OQ==", "bodyText": "Should we do the safe layout check here? We should ensure the feature layout is increasing between OMLayoutFeature, otherwise versionManager#finalized will throw IllegalArgumentException error.", "url": "https://github.com/apache/ozone/pull/1456#discussion_r498056289", "createdAt": "2020-10-01T08:02:44Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/upgrade/OMUpgradeFinalizer.java", "diffHunk": "@@ -0,0 +1,303 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.upgrade;\n+\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes;\n+import org.apache.hadoop.ozone.upgrade.UpgradeFinalizer;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.INVALID_REQUEST;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.PERSIST_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.REMOVE_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.UPDATE_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.ALREADY_FINALIZED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_DONE;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_IN_PROGRESS;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_REQUIRED;\n+\n+/**\n+ * UpgradeFinalizer implementation for the Ozone Manager service.\n+ */\n+public class OMUpgradeFinalizer implements UpgradeFinalizer<OzoneManager> {\n+\n+  private Status status = ALREADY_FINALIZED;\n+  private OMLayoutVersionManagerImpl versionManager;\n+  private String clientID;\n+\n+  private Queue<String> msgs = new ConcurrentLinkedQueue<>();\n+  private boolean isDone = false;\n+\n+  private static final OmUpgradeAction NOOP = a -> {};\n+\n+  public OMUpgradeFinalizer(OMLayoutVersionManagerImpl versionManager) {\n+    this.versionManager = versionManager;\n+    if (versionManager.needsFinalization()) {\n+      status = FINALIZATION_REQUIRED;\n+    }\n+  }\n+\n+  @Override\n+  public StatusAndMessages finalize(String upgradeClientID, OzoneManager om)\n+      throws IOException {\n+    if (!versionManager.needsFinalization()) {\n+      return FINALIZED_MSG;\n+    }\n+    clientID = upgradeClientID;\n+\n+// This requires some more investigation on how to do it properly while\n+// requests are on the fly, and post finalize features one by one.\n+// Until that is done, monitoring is not really doing anything meaningful\n+// but this is a tradoff we can take for the first iteration either if needed,\n+// as the finalization of the first few features should not take that long.\n+// Follow up JIRA is in HDDS-4286\n+//    String threadName = \"OzoneManager-Upgrade-Finalizer\";\n+//    ExecutorService executor =\n+//        Executors.newSingleThreadExecutor(r -> new Thread(threadName));\n+//    executor.submit(new Worker(om));\n+    new Worker(om).call();\n+    return STARTING_MSG;\n+  }\n+\n+  @Override\n+  public StatusAndMessages reportStatus(\n+      String upgradeClientID, boolean takeover\n+  ) throws IOException {\n+    if (takeover) {\n+      clientID = upgradeClientID;\n+    }\n+    assertClientId(upgradeClientID);\n+    List<String> returningMsgs = new ArrayList<>(msgs.size()+10);\n+    status = isDone ? FINALIZATION_DONE : FINALIZATION_IN_PROGRESS;\n+    while (msgs.size() > 0) {\n+      returningMsgs.add(msgs.poll());\n+    }\n+    return new StatusAndMessages(status, returningMsgs);\n+  }\n+\n+  private void assertClientId(String id) throws OMException {\n+    if (!this.clientID.equals(id)) {\n+      throw new OMException(\"Unknown client tries to get finalization status.\\n\"\n+          + \"The requestor is not the initiating client of the finalization,\"\n+          + \" if you want to take over, and get unsent status messages, check\"\n+          + \" -takeover option.\", INVALID_REQUEST);\n+    }\n+  }\n+\n+\n+\n+\n+  private class Worker implements Callable<Void> {\n+    private OzoneManager ozoneManager;\n+\n+    Worker(OzoneManager om) {\n+      ozoneManager = om;\n+    }\n+\n+    @Override\n+    public Void call() throws OMException {\n+      try {\n+        emitStartingMsg();\n+\n+        for (OMLayoutFeature f : versionManager.unfinalizedFeatures()) {\n+          finalizeFeature(f);\n+          updateLayoutVersionInVersionFile(f);\n+          versionManager.finalized(f);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bb3ef5fb34dafb67d98cddb3a4c48ef183fa9da"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc3NDM1MA==", "bodyText": "AbstractLayoutVersionManager gives the insurance for us here, as that has a map for the features with the feature's LayoutVersion as a key, and unfinalizedFeatures() works based off of that map.\nSo the internal structure, and the overall design should ensure that there can be only one LayoutFeature associated with one LayoutVersion.\nIt would be beneficial to work based on the ordinal of the OMLayoutFeature enum, but this is not the case for now, I think that is an improvement we can add there, so that a wrongly defined enum member can not hide an other LayoutFeature, or we can ensure that with a test. I filed HDDS-4303 to track this.", "url": "https://github.com/apache/ozone/pull/1456#discussion_r498774350", "createdAt": "2020-10-02T11:51:47Z", "author": {"login": "fapifta"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/upgrade/OMUpgradeFinalizer.java", "diffHunk": "@@ -0,0 +1,303 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.upgrade;\n+\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes;\n+import org.apache.hadoop.ozone.upgrade.UpgradeFinalizer;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.INVALID_REQUEST;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.PERSIST_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.REMOVE_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.UPDATE_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.ALREADY_FINALIZED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_DONE;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_IN_PROGRESS;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_REQUIRED;\n+\n+/**\n+ * UpgradeFinalizer implementation for the Ozone Manager service.\n+ */\n+public class OMUpgradeFinalizer implements UpgradeFinalizer<OzoneManager> {\n+\n+  private Status status = ALREADY_FINALIZED;\n+  private OMLayoutVersionManagerImpl versionManager;\n+  private String clientID;\n+\n+  private Queue<String> msgs = new ConcurrentLinkedQueue<>();\n+  private boolean isDone = false;\n+\n+  private static final OmUpgradeAction NOOP = a -> {};\n+\n+  public OMUpgradeFinalizer(OMLayoutVersionManagerImpl versionManager) {\n+    this.versionManager = versionManager;\n+    if (versionManager.needsFinalization()) {\n+      status = FINALIZATION_REQUIRED;\n+    }\n+  }\n+\n+  @Override\n+  public StatusAndMessages finalize(String upgradeClientID, OzoneManager om)\n+      throws IOException {\n+    if (!versionManager.needsFinalization()) {\n+      return FINALIZED_MSG;\n+    }\n+    clientID = upgradeClientID;\n+\n+// This requires some more investigation on how to do it properly while\n+// requests are on the fly, and post finalize features one by one.\n+// Until that is done, monitoring is not really doing anything meaningful\n+// but this is a tradoff we can take for the first iteration either if needed,\n+// as the finalization of the first few features should not take that long.\n+// Follow up JIRA is in HDDS-4286\n+//    String threadName = \"OzoneManager-Upgrade-Finalizer\";\n+//    ExecutorService executor =\n+//        Executors.newSingleThreadExecutor(r -> new Thread(threadName));\n+//    executor.submit(new Worker(om));\n+    new Worker(om).call();\n+    return STARTING_MSG;\n+  }\n+\n+  @Override\n+  public StatusAndMessages reportStatus(\n+      String upgradeClientID, boolean takeover\n+  ) throws IOException {\n+    if (takeover) {\n+      clientID = upgradeClientID;\n+    }\n+    assertClientId(upgradeClientID);\n+    List<String> returningMsgs = new ArrayList<>(msgs.size()+10);\n+    status = isDone ? FINALIZATION_DONE : FINALIZATION_IN_PROGRESS;\n+    while (msgs.size() > 0) {\n+      returningMsgs.add(msgs.poll());\n+    }\n+    return new StatusAndMessages(status, returningMsgs);\n+  }\n+\n+  private void assertClientId(String id) throws OMException {\n+    if (!this.clientID.equals(id)) {\n+      throw new OMException(\"Unknown client tries to get finalization status.\\n\"\n+          + \"The requestor is not the initiating client of the finalization,\"\n+          + \" if you want to take over, and get unsent status messages, check\"\n+          + \" -takeover option.\", INVALID_REQUEST);\n+    }\n+  }\n+\n+\n+\n+\n+  private class Worker implements Callable<Void> {\n+    private OzoneManager ozoneManager;\n+\n+    Worker(OzoneManager om) {\n+      ozoneManager = om;\n+    }\n+\n+    @Override\n+    public Void call() throws OMException {\n+      try {\n+        emitStartingMsg();\n+\n+        for (OMLayoutFeature f : versionManager.unfinalizedFeatures()) {\n+          finalizeFeature(f);\n+          updateLayoutVersionInVersionFile(f);\n+          versionManager.finalized(f);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA1NjI4OQ=="}, "originalCommit": {"oid": "7bb3ef5fb34dafb67d98cddb3a4c48ef183fa9da"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEyOTc4Nw==", "bodyText": "Okay, let's do the further track on HDDS-4303", "url": "https://github.com/apache/ozone/pull/1456#discussion_r499129787", "createdAt": "2020-10-03T08:50:00Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/upgrade/OMUpgradeFinalizer.java", "diffHunk": "@@ -0,0 +1,303 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.upgrade;\n+\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes;\n+import org.apache.hadoop.ozone.upgrade.UpgradeFinalizer;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.INVALID_REQUEST;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.PERSIST_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.REMOVE_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.UPDATE_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.ALREADY_FINALIZED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_DONE;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_IN_PROGRESS;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_REQUIRED;\n+\n+/**\n+ * UpgradeFinalizer implementation for the Ozone Manager service.\n+ */\n+public class OMUpgradeFinalizer implements UpgradeFinalizer<OzoneManager> {\n+\n+  private Status status = ALREADY_FINALIZED;\n+  private OMLayoutVersionManagerImpl versionManager;\n+  private String clientID;\n+\n+  private Queue<String> msgs = new ConcurrentLinkedQueue<>();\n+  private boolean isDone = false;\n+\n+  private static final OmUpgradeAction NOOP = a -> {};\n+\n+  public OMUpgradeFinalizer(OMLayoutVersionManagerImpl versionManager) {\n+    this.versionManager = versionManager;\n+    if (versionManager.needsFinalization()) {\n+      status = FINALIZATION_REQUIRED;\n+    }\n+  }\n+\n+  @Override\n+  public StatusAndMessages finalize(String upgradeClientID, OzoneManager om)\n+      throws IOException {\n+    if (!versionManager.needsFinalization()) {\n+      return FINALIZED_MSG;\n+    }\n+    clientID = upgradeClientID;\n+\n+// This requires some more investigation on how to do it properly while\n+// requests are on the fly, and post finalize features one by one.\n+// Until that is done, monitoring is not really doing anything meaningful\n+// but this is a tradoff we can take for the first iteration either if needed,\n+// as the finalization of the first few features should not take that long.\n+// Follow up JIRA is in HDDS-4286\n+//    String threadName = \"OzoneManager-Upgrade-Finalizer\";\n+//    ExecutorService executor =\n+//        Executors.newSingleThreadExecutor(r -> new Thread(threadName));\n+//    executor.submit(new Worker(om));\n+    new Worker(om).call();\n+    return STARTING_MSG;\n+  }\n+\n+  @Override\n+  public StatusAndMessages reportStatus(\n+      String upgradeClientID, boolean takeover\n+  ) throws IOException {\n+    if (takeover) {\n+      clientID = upgradeClientID;\n+    }\n+    assertClientId(upgradeClientID);\n+    List<String> returningMsgs = new ArrayList<>(msgs.size()+10);\n+    status = isDone ? FINALIZATION_DONE : FINALIZATION_IN_PROGRESS;\n+    while (msgs.size() > 0) {\n+      returningMsgs.add(msgs.poll());\n+    }\n+    return new StatusAndMessages(status, returningMsgs);\n+  }\n+\n+  private void assertClientId(String id) throws OMException {\n+    if (!this.clientID.equals(id)) {\n+      throw new OMException(\"Unknown client tries to get finalization status.\\n\"\n+          + \"The requestor is not the initiating client of the finalization,\"\n+          + \" if you want to take over, and get unsent status messages, check\"\n+          + \" -takeover option.\", INVALID_REQUEST);\n+    }\n+  }\n+\n+\n+\n+\n+  private class Worker implements Callable<Void> {\n+    private OzoneManager ozoneManager;\n+\n+    Worker(OzoneManager om) {\n+      ozoneManager = om;\n+    }\n+\n+    @Override\n+    public Void call() throws OMException {\n+      try {\n+        emitStartingMsg();\n+\n+        for (OMLayoutFeature f : versionManager.unfinalizedFeatures()) {\n+          finalizeFeature(f);\n+          updateLayoutVersionInVersionFile(f);\n+          versionManager.finalized(f);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA1NjI4OQ=="}, "originalCommit": {"oid": "7bb3ef5fb34dafb67d98cddb3a4c48ef183fa9da"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTMwNTAyOQ==", "bodyText": "There is a test that covers this check (in a way) --> TestOMVersionManager#testOMLayoutFeatureCatalog. Maybe, we can build on that.", "url": "https://github.com/apache/ozone/pull/1456#discussion_r499305029", "createdAt": "2020-10-05T00:26:18Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/upgrade/OMUpgradeFinalizer.java", "diffHunk": "@@ -0,0 +1,303 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.upgrade;\n+\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes;\n+import org.apache.hadoop.ozone.upgrade.UpgradeFinalizer;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.INVALID_REQUEST;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.PERSIST_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.REMOVE_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.UPDATE_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.ALREADY_FINALIZED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_DONE;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_IN_PROGRESS;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_REQUIRED;\n+\n+/**\n+ * UpgradeFinalizer implementation for the Ozone Manager service.\n+ */\n+public class OMUpgradeFinalizer implements UpgradeFinalizer<OzoneManager> {\n+\n+  private Status status = ALREADY_FINALIZED;\n+  private OMLayoutVersionManagerImpl versionManager;\n+  private String clientID;\n+\n+  private Queue<String> msgs = new ConcurrentLinkedQueue<>();\n+  private boolean isDone = false;\n+\n+  private static final OmUpgradeAction NOOP = a -> {};\n+\n+  public OMUpgradeFinalizer(OMLayoutVersionManagerImpl versionManager) {\n+    this.versionManager = versionManager;\n+    if (versionManager.needsFinalization()) {\n+      status = FINALIZATION_REQUIRED;\n+    }\n+  }\n+\n+  @Override\n+  public StatusAndMessages finalize(String upgradeClientID, OzoneManager om)\n+      throws IOException {\n+    if (!versionManager.needsFinalization()) {\n+      return FINALIZED_MSG;\n+    }\n+    clientID = upgradeClientID;\n+\n+// This requires some more investigation on how to do it properly while\n+// requests are on the fly, and post finalize features one by one.\n+// Until that is done, monitoring is not really doing anything meaningful\n+// but this is a tradoff we can take for the first iteration either if needed,\n+// as the finalization of the first few features should not take that long.\n+// Follow up JIRA is in HDDS-4286\n+//    String threadName = \"OzoneManager-Upgrade-Finalizer\";\n+//    ExecutorService executor =\n+//        Executors.newSingleThreadExecutor(r -> new Thread(threadName));\n+//    executor.submit(new Worker(om));\n+    new Worker(om).call();\n+    return STARTING_MSG;\n+  }\n+\n+  @Override\n+  public StatusAndMessages reportStatus(\n+      String upgradeClientID, boolean takeover\n+  ) throws IOException {\n+    if (takeover) {\n+      clientID = upgradeClientID;\n+    }\n+    assertClientId(upgradeClientID);\n+    List<String> returningMsgs = new ArrayList<>(msgs.size()+10);\n+    status = isDone ? FINALIZATION_DONE : FINALIZATION_IN_PROGRESS;\n+    while (msgs.size() > 0) {\n+      returningMsgs.add(msgs.poll());\n+    }\n+    return new StatusAndMessages(status, returningMsgs);\n+  }\n+\n+  private void assertClientId(String id) throws OMException {\n+    if (!this.clientID.equals(id)) {\n+      throw new OMException(\"Unknown client tries to get finalization status.\\n\"\n+          + \"The requestor is not the initiating client of the finalization,\"\n+          + \" if you want to take over, and get unsent status messages, check\"\n+          + \" -takeover option.\", INVALID_REQUEST);\n+    }\n+  }\n+\n+\n+\n+\n+  private class Worker implements Callable<Void> {\n+    private OzoneManager ozoneManager;\n+\n+    Worker(OzoneManager om) {\n+      ozoneManager = om;\n+    }\n+\n+    @Override\n+    public Void call() throws OMException {\n+      try {\n+        emitStartingMsg();\n+\n+        for (OMLayoutFeature f : versionManager.unfinalizedFeatures()) {\n+          finalizeFeature(f);\n+          updateLayoutVersionInVersionFile(f);\n+          versionManager.finalized(f);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA1NjI4OQ=="}, "originalCommit": {"oid": "7bb3ef5fb34dafb67d98cddb3a4c48ef183fa9da"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExODA2MTE5OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/upgrade/AbstractLayoutVersionManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwODowNjowN1rOHa_Dhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMToxNzoyMFrOHbp9Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA1ODExOQ==", "bodyText": "Nit: Missing a whitespace before 'finalized'.", "url": "https://github.com/apache/ozone/pull/1456#discussion_r498058119", "createdAt": "2020-10-01T08:06:07Z", "author": {"login": "linyiqun"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/upgrade/AbstractLayoutVersionManager.java", "diffHunk": "@@ -65,53 +64,66 @@ protected void initializeFeatures(LayoutFeature[] lfs) {\n     });\n   }\n \n+  protected void reset() {\n+    metadataLayoutVersion = 0;\n+    softwareLayoutVersion = 0;\n+    featureMap.clear();\n+    features.clear();\n+    isInitialized = false;\n+  }\n+\n+  public void finalized(T layoutFeature) {\n+    if (layoutFeature.layoutVersion() > metadataLayoutVersion) {\n+      metadataLayoutVersion = layoutFeature.layoutVersion();\n+    } else {\n+      throw new IllegalArgumentException(\n+          \"Finalize attempt on a layoutFeature which has already been\"\n+              + \"finalized. Software Layout version: \" + softwareLayoutVersion", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bb3ef5fb34dafb67d98cddb3a4c48ef183fa9da"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc2MTA1NA==", "bodyText": "fixed", "url": "https://github.com/apache/ozone/pull/1456#discussion_r498761054", "createdAt": "2020-10-02T11:17:20Z", "author": {"login": "fapifta"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/upgrade/AbstractLayoutVersionManager.java", "diffHunk": "@@ -65,53 +64,66 @@ protected void initializeFeatures(LayoutFeature[] lfs) {\n     });\n   }\n \n+  protected void reset() {\n+    metadataLayoutVersion = 0;\n+    softwareLayoutVersion = 0;\n+    featureMap.clear();\n+    features.clear();\n+    isInitialized = false;\n+  }\n+\n+  public void finalized(T layoutFeature) {\n+    if (layoutFeature.layoutVersion() > metadataLayoutVersion) {\n+      metadataLayoutVersion = layoutFeature.layoutVersion();\n+    } else {\n+      throw new IllegalArgumentException(\n+          \"Finalize attempt on a layoutFeature which has already been\"\n+              + \"finalized. Software Layout version: \" + softwareLayoutVersion", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA1ODExOQ=="}, "originalCommit": {"oid": "7bb3ef5fb34dafb67d98cddb3a4c48ef183fa9da"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExODA2NzM1OnYy", "diffSide": "RIGHT", "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/common/StorageInfo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwODowNzo1OVrOHa_Hfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMToxNzozM1rOHbp9sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA1OTEzNA==", "bodyText": "Nit: Missing a whitespace before 'a LayoutFeature upgrade'.", "url": "https://github.com/apache/ozone/pull/1456#discussion_r498059134", "createdAt": "2020-10-01T08:07:59Z", "author": {"login": "linyiqun"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/common/StorageInfo.java", "diffHunk": "@@ -150,6 +179,16 @@ private void verifyClusterId()\n     }\n   }\n \n+  private void verifyUpgradingToLayoutVersion()\n+      throws InconsistentStorageStateException {\n+    int upgradeMark = getUpgradingToLayoutVersion();\n+    if (upgradeMark != INVALID_LAYOUT_VERSION) {\n+      throw new InconsistentStorageStateException(\"Ozone Manager died during\"\n+          + \"a LayoutFeature upgrade.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bb3ef5fb34dafb67d98cddb3a4c48ef183fa9da"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc2MTEzOA==", "bodyText": "fixed", "url": "https://github.com/apache/ozone/pull/1456#discussion_r498761138", "createdAt": "2020-10-02T11:17:33Z", "author": {"login": "fapifta"}, "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/common/StorageInfo.java", "diffHunk": "@@ -150,6 +179,16 @@ private void verifyClusterId()\n     }\n   }\n \n+  private void verifyUpgradingToLayoutVersion()\n+      throws InconsistentStorageStateException {\n+    int upgradeMark = getUpgradingToLayoutVersion();\n+    if (upgradeMark != INVALID_LAYOUT_VERSION) {\n+      throw new InconsistentStorageStateException(\"Ozone Manager died during\"\n+          + \"a LayoutFeature upgrade.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA1OTEzNA=="}, "originalCommit": {"oid": "7bb3ef5fb34dafb67d98cddb3a4c48ef183fa9da"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExODEwNTM5OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/upgrade/OMUpgradeFinalizer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwODoxODoxOFrOHa_eUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwODo1MToxOVrOHcAeEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA2NDk3Ng==", "bodyText": "Same comment for persistStorage like above.", "url": "https://github.com/apache/ozone/pull/1456#discussion_r498064976", "createdAt": "2020-10-01T08:18:18Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/upgrade/OMUpgradeFinalizer.java", "diffHunk": "@@ -0,0 +1,303 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.upgrade;\n+\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes;\n+import org.apache.hadoop.ozone.upgrade.UpgradeFinalizer;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.INVALID_REQUEST;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.PERSIST_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.REMOVE_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.UPDATE_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.ALREADY_FINALIZED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_DONE;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_IN_PROGRESS;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_REQUIRED;\n+\n+/**\n+ * UpgradeFinalizer implementation for the Ozone Manager service.\n+ */\n+public class OMUpgradeFinalizer implements UpgradeFinalizer<OzoneManager> {\n+\n+  private Status status = ALREADY_FINALIZED;\n+  private OMLayoutVersionManagerImpl versionManager;\n+  private String clientID;\n+\n+  private Queue<String> msgs = new ConcurrentLinkedQueue<>();\n+  private boolean isDone = false;\n+\n+  private static final OmUpgradeAction NOOP = a -> {};\n+\n+  public OMUpgradeFinalizer(OMLayoutVersionManagerImpl versionManager) {\n+    this.versionManager = versionManager;\n+    if (versionManager.needsFinalization()) {\n+      status = FINALIZATION_REQUIRED;\n+    }\n+  }\n+\n+  @Override\n+  public StatusAndMessages finalize(String upgradeClientID, OzoneManager om)\n+      throws IOException {\n+    if (!versionManager.needsFinalization()) {\n+      return FINALIZED_MSG;\n+    }\n+    clientID = upgradeClientID;\n+\n+// This requires some more investigation on how to do it properly while\n+// requests are on the fly, and post finalize features one by one.\n+// Until that is done, monitoring is not really doing anything meaningful\n+// but this is a tradoff we can take for the first iteration either if needed,\n+// as the finalization of the first few features should not take that long.\n+// Follow up JIRA is in HDDS-4286\n+//    String threadName = \"OzoneManager-Upgrade-Finalizer\";\n+//    ExecutorService executor =\n+//        Executors.newSingleThreadExecutor(r -> new Thread(threadName));\n+//    executor.submit(new Worker(om));\n+    new Worker(om).call();\n+    return STARTING_MSG;\n+  }\n+\n+  @Override\n+  public StatusAndMessages reportStatus(\n+      String upgradeClientID, boolean takeover\n+  ) throws IOException {\n+    if (takeover) {\n+      clientID = upgradeClientID;\n+    }\n+    assertClientId(upgradeClientID);\n+    List<String> returningMsgs = new ArrayList<>(msgs.size()+10);\n+    status = isDone ? FINALIZATION_DONE : FINALIZATION_IN_PROGRESS;\n+    while (msgs.size() > 0) {\n+      returningMsgs.add(msgs.poll());\n+    }\n+    return new StatusAndMessages(status, returningMsgs);\n+  }\n+\n+  private void assertClientId(String id) throws OMException {\n+    if (!this.clientID.equals(id)) {\n+      throw new OMException(\"Unknown client tries to get finalization status.\\n\"\n+          + \"The requestor is not the initiating client of the finalization,\"\n+          + \" if you want to take over, and get unsent status messages, check\"\n+          + \" -takeover option.\", INVALID_REQUEST);\n+    }\n+  }\n+\n+\n+\n+\n+  private class Worker implements Callable<Void> {\n+    private OzoneManager ozoneManager;\n+\n+    Worker(OzoneManager om) {\n+      ozoneManager = om;\n+    }\n+\n+    @Override\n+    public Void call() throws OMException {\n+      try {\n+        emitStartingMsg();\n+\n+        for (OMLayoutFeature f : versionManager.unfinalizedFeatures()) {\n+          finalizeFeature(f);\n+          updateLayoutVersionInVersionFile(f);\n+          versionManager.finalized(f);\n+        }\n+\n+        emitFinishedMsg();\n+      } finally {\n+        isDone = true;\n+      }\n+      return null;\n+    }\n+\n+    private void finalizeFeature(OMLayoutFeature feature)\n+        throws OMException {\n+      OmUpgradeAction action = feature.onFinalizeAction().orElse(NOOP);\n+\n+      if (action == NOOP) {\n+        emitNOOPMsg(feature.name());\n+        return;\n+      }\n+\n+      putFinalizationMarkIntoVersionFile(feature);\n+\n+      emitStartingFinalizationActionMsg(feature.name());\n+      action.executeAction(ozoneManager);\n+      emitFinishFinalizationActionMsg(feature.name());\n+\n+      removeFinalizationMarkFromVersionFile(feature);\n+    }\n+\n+    private void updateLayoutVersionInVersionFile(OMLayoutFeature feature)\n+        throws OMException {\n+      int prevLayoutVersion = currentStoredLayoutVersion();\n+\n+      updateStorageLayoutVersion(feature.layoutVersion());\n+      try {\n+        persistStorage();\n+      } catch (IOException e) {\n+        updateStorageLayoutVersion(prevLayoutVersion);\n+        logLayoutVersionUpdateFailureAndThrow(e);\n+      }\n+    }\n+\n+    private void putFinalizationMarkIntoVersionFile(OMLayoutFeature feature)\n+        throws OMException {\n+      try {\n+        emitUpgradeToLayoutVersionPersistingMsg(feature.name());\n+\n+        setUpgradeToLayoutVersionInStorage(feature.layoutVersion());\n+        persistStorage();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bb3ef5fb34dafb67d98cddb3a4c48ef183fa9da"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc2NjQxMA==", "bodyText": "From the comment for the previous persisting related comment point 2 is relevant here, we need to know if we have started the finalization of a LayoutFeature but never finished it, and we need to know it even if there is a catastrophic failure, and OM has been restarted due to that failure, and persisting this information to disk seems to be the way to fullfil this requirement.", "url": "https://github.com/apache/ozone/pull/1456#discussion_r498766410", "createdAt": "2020-10-02T11:31:27Z", "author": {"login": "fapifta"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/upgrade/OMUpgradeFinalizer.java", "diffHunk": "@@ -0,0 +1,303 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.upgrade;\n+\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes;\n+import org.apache.hadoop.ozone.upgrade.UpgradeFinalizer;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.INVALID_REQUEST;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.PERSIST_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.REMOVE_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.UPDATE_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.ALREADY_FINALIZED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_DONE;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_IN_PROGRESS;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_REQUIRED;\n+\n+/**\n+ * UpgradeFinalizer implementation for the Ozone Manager service.\n+ */\n+public class OMUpgradeFinalizer implements UpgradeFinalizer<OzoneManager> {\n+\n+  private Status status = ALREADY_FINALIZED;\n+  private OMLayoutVersionManagerImpl versionManager;\n+  private String clientID;\n+\n+  private Queue<String> msgs = new ConcurrentLinkedQueue<>();\n+  private boolean isDone = false;\n+\n+  private static final OmUpgradeAction NOOP = a -> {};\n+\n+  public OMUpgradeFinalizer(OMLayoutVersionManagerImpl versionManager) {\n+    this.versionManager = versionManager;\n+    if (versionManager.needsFinalization()) {\n+      status = FINALIZATION_REQUIRED;\n+    }\n+  }\n+\n+  @Override\n+  public StatusAndMessages finalize(String upgradeClientID, OzoneManager om)\n+      throws IOException {\n+    if (!versionManager.needsFinalization()) {\n+      return FINALIZED_MSG;\n+    }\n+    clientID = upgradeClientID;\n+\n+// This requires some more investigation on how to do it properly while\n+// requests are on the fly, and post finalize features one by one.\n+// Until that is done, monitoring is not really doing anything meaningful\n+// but this is a tradoff we can take for the first iteration either if needed,\n+// as the finalization of the first few features should not take that long.\n+// Follow up JIRA is in HDDS-4286\n+//    String threadName = \"OzoneManager-Upgrade-Finalizer\";\n+//    ExecutorService executor =\n+//        Executors.newSingleThreadExecutor(r -> new Thread(threadName));\n+//    executor.submit(new Worker(om));\n+    new Worker(om).call();\n+    return STARTING_MSG;\n+  }\n+\n+  @Override\n+  public StatusAndMessages reportStatus(\n+      String upgradeClientID, boolean takeover\n+  ) throws IOException {\n+    if (takeover) {\n+      clientID = upgradeClientID;\n+    }\n+    assertClientId(upgradeClientID);\n+    List<String> returningMsgs = new ArrayList<>(msgs.size()+10);\n+    status = isDone ? FINALIZATION_DONE : FINALIZATION_IN_PROGRESS;\n+    while (msgs.size() > 0) {\n+      returningMsgs.add(msgs.poll());\n+    }\n+    return new StatusAndMessages(status, returningMsgs);\n+  }\n+\n+  private void assertClientId(String id) throws OMException {\n+    if (!this.clientID.equals(id)) {\n+      throw new OMException(\"Unknown client tries to get finalization status.\\n\"\n+          + \"The requestor is not the initiating client of the finalization,\"\n+          + \" if you want to take over, and get unsent status messages, check\"\n+          + \" -takeover option.\", INVALID_REQUEST);\n+    }\n+  }\n+\n+\n+\n+\n+  private class Worker implements Callable<Void> {\n+    private OzoneManager ozoneManager;\n+\n+    Worker(OzoneManager om) {\n+      ozoneManager = om;\n+    }\n+\n+    @Override\n+    public Void call() throws OMException {\n+      try {\n+        emitStartingMsg();\n+\n+        for (OMLayoutFeature f : versionManager.unfinalizedFeatures()) {\n+          finalizeFeature(f);\n+          updateLayoutVersionInVersionFile(f);\n+          versionManager.finalized(f);\n+        }\n+\n+        emitFinishedMsg();\n+      } finally {\n+        isDone = true;\n+      }\n+      return null;\n+    }\n+\n+    private void finalizeFeature(OMLayoutFeature feature)\n+        throws OMException {\n+      OmUpgradeAction action = feature.onFinalizeAction().orElse(NOOP);\n+\n+      if (action == NOOP) {\n+        emitNOOPMsg(feature.name());\n+        return;\n+      }\n+\n+      putFinalizationMarkIntoVersionFile(feature);\n+\n+      emitStartingFinalizationActionMsg(feature.name());\n+      action.executeAction(ozoneManager);\n+      emitFinishFinalizationActionMsg(feature.name());\n+\n+      removeFinalizationMarkFromVersionFile(feature);\n+    }\n+\n+    private void updateLayoutVersionInVersionFile(OMLayoutFeature feature)\n+        throws OMException {\n+      int prevLayoutVersion = currentStoredLayoutVersion();\n+\n+      updateStorageLayoutVersion(feature.layoutVersion());\n+      try {\n+        persistStorage();\n+      } catch (IOException e) {\n+        updateStorageLayoutVersion(prevLayoutVersion);\n+        logLayoutVersionUpdateFailureAndThrow(e);\n+      }\n+    }\n+\n+    private void putFinalizationMarkIntoVersionFile(OMLayoutFeature feature)\n+        throws OMException {\n+      try {\n+        emitUpgradeToLayoutVersionPersistingMsg(feature.name());\n+\n+        setUpgradeToLayoutVersionInStorage(feature.layoutVersion());\n+        persistStorage();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA2NDk3Ng=="}, "originalCommit": {"oid": "7bb3ef5fb34dafb67d98cddb3a4c48ef183fa9da"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEyOTg3Mw==", "bodyText": "Comment makes sense to me.", "url": "https://github.com/apache/ozone/pull/1456#discussion_r499129873", "createdAt": "2020-10-03T08:51:19Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/upgrade/OMUpgradeFinalizer.java", "diffHunk": "@@ -0,0 +1,303 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.upgrade;\n+\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes;\n+import org.apache.hadoop.ozone.upgrade.UpgradeFinalizer;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.INVALID_REQUEST;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.PERSIST_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.REMOVE_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.UPDATE_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.ALREADY_FINALIZED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_DONE;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_IN_PROGRESS;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_REQUIRED;\n+\n+/**\n+ * UpgradeFinalizer implementation for the Ozone Manager service.\n+ */\n+public class OMUpgradeFinalizer implements UpgradeFinalizer<OzoneManager> {\n+\n+  private Status status = ALREADY_FINALIZED;\n+  private OMLayoutVersionManagerImpl versionManager;\n+  private String clientID;\n+\n+  private Queue<String> msgs = new ConcurrentLinkedQueue<>();\n+  private boolean isDone = false;\n+\n+  private static final OmUpgradeAction NOOP = a -> {};\n+\n+  public OMUpgradeFinalizer(OMLayoutVersionManagerImpl versionManager) {\n+    this.versionManager = versionManager;\n+    if (versionManager.needsFinalization()) {\n+      status = FINALIZATION_REQUIRED;\n+    }\n+  }\n+\n+  @Override\n+  public StatusAndMessages finalize(String upgradeClientID, OzoneManager om)\n+      throws IOException {\n+    if (!versionManager.needsFinalization()) {\n+      return FINALIZED_MSG;\n+    }\n+    clientID = upgradeClientID;\n+\n+// This requires some more investigation on how to do it properly while\n+// requests are on the fly, and post finalize features one by one.\n+// Until that is done, monitoring is not really doing anything meaningful\n+// but this is a tradoff we can take for the first iteration either if needed,\n+// as the finalization of the first few features should not take that long.\n+// Follow up JIRA is in HDDS-4286\n+//    String threadName = \"OzoneManager-Upgrade-Finalizer\";\n+//    ExecutorService executor =\n+//        Executors.newSingleThreadExecutor(r -> new Thread(threadName));\n+//    executor.submit(new Worker(om));\n+    new Worker(om).call();\n+    return STARTING_MSG;\n+  }\n+\n+  @Override\n+  public StatusAndMessages reportStatus(\n+      String upgradeClientID, boolean takeover\n+  ) throws IOException {\n+    if (takeover) {\n+      clientID = upgradeClientID;\n+    }\n+    assertClientId(upgradeClientID);\n+    List<String> returningMsgs = new ArrayList<>(msgs.size()+10);\n+    status = isDone ? FINALIZATION_DONE : FINALIZATION_IN_PROGRESS;\n+    while (msgs.size() > 0) {\n+      returningMsgs.add(msgs.poll());\n+    }\n+    return new StatusAndMessages(status, returningMsgs);\n+  }\n+\n+  private void assertClientId(String id) throws OMException {\n+    if (!this.clientID.equals(id)) {\n+      throw new OMException(\"Unknown client tries to get finalization status.\\n\"\n+          + \"The requestor is not the initiating client of the finalization,\"\n+          + \" if you want to take over, and get unsent status messages, check\"\n+          + \" -takeover option.\", INVALID_REQUEST);\n+    }\n+  }\n+\n+\n+\n+\n+  private class Worker implements Callable<Void> {\n+    private OzoneManager ozoneManager;\n+\n+    Worker(OzoneManager om) {\n+      ozoneManager = om;\n+    }\n+\n+    @Override\n+    public Void call() throws OMException {\n+      try {\n+        emitStartingMsg();\n+\n+        for (OMLayoutFeature f : versionManager.unfinalizedFeatures()) {\n+          finalizeFeature(f);\n+          updateLayoutVersionInVersionFile(f);\n+          versionManager.finalized(f);\n+        }\n+\n+        emitFinishedMsg();\n+      } finally {\n+        isDone = true;\n+      }\n+      return null;\n+    }\n+\n+    private void finalizeFeature(OMLayoutFeature feature)\n+        throws OMException {\n+      OmUpgradeAction action = feature.onFinalizeAction().orElse(NOOP);\n+\n+      if (action == NOOP) {\n+        emitNOOPMsg(feature.name());\n+        return;\n+      }\n+\n+      putFinalizationMarkIntoVersionFile(feature);\n+\n+      emitStartingFinalizationActionMsg(feature.name());\n+      action.executeAction(ozoneManager);\n+      emitFinishFinalizationActionMsg(feature.name());\n+\n+      removeFinalizationMarkFromVersionFile(feature);\n+    }\n+\n+    private void updateLayoutVersionInVersionFile(OMLayoutFeature feature)\n+        throws OMException {\n+      int prevLayoutVersion = currentStoredLayoutVersion();\n+\n+      updateStorageLayoutVersion(feature.layoutVersion());\n+      try {\n+        persistStorage();\n+      } catch (IOException e) {\n+        updateStorageLayoutVersion(prevLayoutVersion);\n+        logLayoutVersionUpdateFailureAndThrow(e);\n+      }\n+    }\n+\n+    private void putFinalizationMarkIntoVersionFile(OMLayoutFeature feature)\n+        throws OMException {\n+      try {\n+        emitUpgradeToLayoutVersionPersistingMsg(feature.name());\n+\n+        setUpgradeToLayoutVersionInStorage(feature.layoutVersion());\n+        persistStorage();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA2NDk3Ng=="}, "originalCommit": {"oid": "7bb3ef5fb34dafb67d98cddb3a4c48ef183fa9da"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTY3NzY0OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/upgrade/OMUpgradeFinalizer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDo1OTo1N1rOHbOmCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwODo0ODoxN1rOHcAdNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMxMjcxMg==", "bodyText": "Here clientID should be thread-safe to update, can we make clientID as a volatile variable?", "url": "https://github.com/apache/ozone/pull/1456#discussion_r498312712", "createdAt": "2020-10-01T14:59:57Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/upgrade/OMUpgradeFinalizer.java", "diffHunk": "@@ -0,0 +1,303 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.upgrade;\n+\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes;\n+import org.apache.hadoop.ozone.upgrade.UpgradeFinalizer;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.INVALID_REQUEST;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.PERSIST_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.REMOVE_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.UPDATE_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.ALREADY_FINALIZED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_DONE;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_IN_PROGRESS;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_REQUIRED;\n+\n+/**\n+ * UpgradeFinalizer implementation for the Ozone Manager service.\n+ */\n+public class OMUpgradeFinalizer implements UpgradeFinalizer<OzoneManager> {\n+\n+  private Status status = ALREADY_FINALIZED;\n+  private OMLayoutVersionManagerImpl versionManager;\n+  private String clientID;\n+\n+  private Queue<String> msgs = new ConcurrentLinkedQueue<>();\n+  private boolean isDone = false;\n+\n+  private static final OmUpgradeAction NOOP = a -> {};\n+\n+  public OMUpgradeFinalizer(OMLayoutVersionManagerImpl versionManager) {\n+    this.versionManager = versionManager;\n+    if (versionManager.needsFinalization()) {\n+      status = FINALIZATION_REQUIRED;\n+    }\n+  }\n+\n+  @Override\n+  public StatusAndMessages finalize(String upgradeClientID, OzoneManager om)\n+      throws IOException {\n+    if (!versionManager.needsFinalization()) {\n+      return FINALIZED_MSG;\n+    }\n+    clientID = upgradeClientID;\n+\n+// This requires some more investigation on how to do it properly while\n+// requests are on the fly, and post finalize features one by one.\n+// Until that is done, monitoring is not really doing anything meaningful\n+// but this is a tradoff we can take for the first iteration either if needed,\n+// as the finalization of the first few features should not take that long.\n+// Follow up JIRA is in HDDS-4286\n+//    String threadName = \"OzoneManager-Upgrade-Finalizer\";\n+//    ExecutorService executor =\n+//        Executors.newSingleThreadExecutor(r -> new Thread(threadName));\n+//    executor.submit(new Worker(om));\n+    new Worker(om).call();\n+    return STARTING_MSG;\n+  }\n+\n+  @Override\n+  public StatusAndMessages reportStatus(\n+      String upgradeClientID, boolean takeover\n+  ) throws IOException {\n+    if (takeover) {\n+      clientID = upgradeClientID;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bb3ef5fb34dafb67d98cddb3a4c48ef183fa9da"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgwMjI1NA==", "bodyText": "Good point, though making clientID volatile, does not really help to solve a race condition here I believe, so I propose to synchronize the whole reportStatus method.\nThe reasons is that, if there is the original client that polls together with a client that does a takeover, then both can step on each others toes, as if for the original client we are already processing the message queue when an other client takes over, then returning status might change as well, and also there might be missing messages in the responses sent to the clients.\nFortunately we don't have to worry about isDone and messages at least, as even if isDone is being updated late, and the final message is polled from the msgs queue with an IN_PROGRES state, the client in the next cycle gets a DONE state without messages, and that is acceptable.", "url": "https://github.com/apache/ozone/pull/1456#discussion_r498802254", "createdAt": "2020-10-02T12:53:42Z", "author": {"login": "fapifta"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/upgrade/OMUpgradeFinalizer.java", "diffHunk": "@@ -0,0 +1,303 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.upgrade;\n+\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes;\n+import org.apache.hadoop.ozone.upgrade.UpgradeFinalizer;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.INVALID_REQUEST;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.PERSIST_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.REMOVE_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.UPDATE_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.ALREADY_FINALIZED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_DONE;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_IN_PROGRESS;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_REQUIRED;\n+\n+/**\n+ * UpgradeFinalizer implementation for the Ozone Manager service.\n+ */\n+public class OMUpgradeFinalizer implements UpgradeFinalizer<OzoneManager> {\n+\n+  private Status status = ALREADY_FINALIZED;\n+  private OMLayoutVersionManagerImpl versionManager;\n+  private String clientID;\n+\n+  private Queue<String> msgs = new ConcurrentLinkedQueue<>();\n+  private boolean isDone = false;\n+\n+  private static final OmUpgradeAction NOOP = a -> {};\n+\n+  public OMUpgradeFinalizer(OMLayoutVersionManagerImpl versionManager) {\n+    this.versionManager = versionManager;\n+    if (versionManager.needsFinalization()) {\n+      status = FINALIZATION_REQUIRED;\n+    }\n+  }\n+\n+  @Override\n+  public StatusAndMessages finalize(String upgradeClientID, OzoneManager om)\n+      throws IOException {\n+    if (!versionManager.needsFinalization()) {\n+      return FINALIZED_MSG;\n+    }\n+    clientID = upgradeClientID;\n+\n+// This requires some more investigation on how to do it properly while\n+// requests are on the fly, and post finalize features one by one.\n+// Until that is done, monitoring is not really doing anything meaningful\n+// but this is a tradoff we can take for the first iteration either if needed,\n+// as the finalization of the first few features should not take that long.\n+// Follow up JIRA is in HDDS-4286\n+//    String threadName = \"OzoneManager-Upgrade-Finalizer\";\n+//    ExecutorService executor =\n+//        Executors.newSingleThreadExecutor(r -> new Thread(threadName));\n+//    executor.submit(new Worker(om));\n+    new Worker(om).call();\n+    return STARTING_MSG;\n+  }\n+\n+  @Override\n+  public StatusAndMessages reportStatus(\n+      String upgradeClientID, boolean takeover\n+  ) throws IOException {\n+    if (takeover) {\n+      clientID = upgradeClientID;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMxMjcxMg=="}, "originalCommit": {"oid": "7bb3ef5fb34dafb67d98cddb3a4c48ef183fa9da"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEyOTY1NA==", "bodyText": "To synchronize the whole reportStatus method looks good to me.", "url": "https://github.com/apache/ozone/pull/1456#discussion_r499129654", "createdAt": "2020-10-03T08:48:17Z", "author": {"login": "linyiqun"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/upgrade/OMUpgradeFinalizer.java", "diffHunk": "@@ -0,0 +1,303 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.upgrade;\n+\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes;\n+import org.apache.hadoop.ozone.upgrade.UpgradeFinalizer;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.INVALID_REQUEST;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.PERSIST_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.REMOVE_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.UPDATE_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.ALREADY_FINALIZED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_DONE;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_IN_PROGRESS;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_REQUIRED;\n+\n+/**\n+ * UpgradeFinalizer implementation for the Ozone Manager service.\n+ */\n+public class OMUpgradeFinalizer implements UpgradeFinalizer<OzoneManager> {\n+\n+  private Status status = ALREADY_FINALIZED;\n+  private OMLayoutVersionManagerImpl versionManager;\n+  private String clientID;\n+\n+  private Queue<String> msgs = new ConcurrentLinkedQueue<>();\n+  private boolean isDone = false;\n+\n+  private static final OmUpgradeAction NOOP = a -> {};\n+\n+  public OMUpgradeFinalizer(OMLayoutVersionManagerImpl versionManager) {\n+    this.versionManager = versionManager;\n+    if (versionManager.needsFinalization()) {\n+      status = FINALIZATION_REQUIRED;\n+    }\n+  }\n+\n+  @Override\n+  public StatusAndMessages finalize(String upgradeClientID, OzoneManager om)\n+      throws IOException {\n+    if (!versionManager.needsFinalization()) {\n+      return FINALIZED_MSG;\n+    }\n+    clientID = upgradeClientID;\n+\n+// This requires some more investigation on how to do it properly while\n+// requests are on the fly, and post finalize features one by one.\n+// Until that is done, monitoring is not really doing anything meaningful\n+// but this is a tradoff we can take for the first iteration either if needed,\n+// as the finalization of the first few features should not take that long.\n+// Follow up JIRA is in HDDS-4286\n+//    String threadName = \"OzoneManager-Upgrade-Finalizer\";\n+//    ExecutorService executor =\n+//        Executors.newSingleThreadExecutor(r -> new Thread(threadName));\n+//    executor.submit(new Worker(om));\n+    new Worker(om).call();\n+    return STARTING_MSG;\n+  }\n+\n+  @Override\n+  public StatusAndMessages reportStatus(\n+      String upgradeClientID, boolean takeover\n+  ) throws IOException {\n+    if (takeover) {\n+      clientID = upgradeClientID;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMxMjcxMg=="}, "originalCommit": {"oid": "7bb3ef5fb34dafb67d98cddb3a4c48ef183fa9da"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzkzODE0OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/upgrade/OMUpgradeFinalizer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMToyMzowN1rOHgNkLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMjowMjo1NFrOHgOq0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUzODczMw==", "bodyText": "Can this be moved to the individual layout version update methods above, so that the caller does not need to invoke the persist explicitly every time? As a caller, if I do storage.updateStorageLayoutVersion(), I can expect it to be persisted, right? I don't have a strong opinion about this, just a suggestion.", "url": "https://github.com/apache/ozone/pull/1456#discussion_r503538733", "createdAt": "2020-10-12T21:23:07Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/upgrade/OMUpgradeFinalizer.java", "diffHunk": "@@ -0,0 +1,328 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.upgrade;\n+\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes;\n+import org.apache.hadoop.ozone.upgrade.UpgradeFinalizer;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.*;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.INVALID_REQUEST;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.PERSIST_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.REMOVE_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.UPDATE_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_DONE;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_IN_PROGRESS;\n+\n+/**\n+ * UpgradeFinalizer implementation for the Ozone Manager service.\n+ */\n+public class OMUpgradeFinalizer implements UpgradeFinalizer<OzoneManager> {\n+\n+  private  static final OmUpgradeAction NOOP = a -> {};\n+\n+  private OMLayoutVersionManagerImpl versionManager;\n+  private String clientID;\n+\n+  private Queue<String> msgs = new ConcurrentLinkedQueue<>();\n+  private boolean isDone = false;\n+\n+  public OMUpgradeFinalizer(OMLayoutVersionManagerImpl versionManager) {\n+    this.versionManager = versionManager;\n+  }\n+\n+  @Override\n+  public StatusAndMessages finalize(String upgradeClientID, OzoneManager om)\n+      throws IOException {\n+    if (!versionManager.needsFinalization()) {\n+      return FINALIZED_MSG;\n+    }\n+    clientID = upgradeClientID;\n+\n+// This requires some more investigation on how to do it properly while\n+// requests are on the fly, and post finalize features one by one.\n+// Until that is done, monitoring is not really doing anything meaningful\n+// but this is a tradoff we can take for the first iteration either if needed,\n+// as the finalization of the first few features should not take that long.\n+// Follow up JIRA is in HDDS-4286\n+//    String threadName = \"OzoneManager-Upgrade-Finalizer\";\n+//    ExecutorService executor =\n+//        Executors.newSingleThreadExecutor(r -> new Thread(threadName));\n+//    executor.submit(new Worker(om));\n+    new Worker(om).call();\n+    return STARTING_MSG;\n+  }\n+\n+  @Override\n+  public synchronized StatusAndMessages reportStatus(\n+      String upgradeClientID, boolean takeover\n+  ) throws IOException {\n+    if (takeover) {\n+      clientID = upgradeClientID;\n+    }\n+    assertClientId(upgradeClientID);\n+    List<String> returningMsgs = new ArrayList<>(msgs.size()+10);\n+    Status status = isDone ? FINALIZATION_DONE : FINALIZATION_IN_PROGRESS;\n+    while (msgs.size() > 0) {\n+      returningMsgs.add(msgs.poll());\n+    }\n+    return new StatusAndMessages(status, returningMsgs);\n+  }\n+\n+  private void assertClientId(String id) throws OMException {\n+    if (!this.clientID.equals(id)) {\n+      throw new OMException(\"Unknown client tries to get finalization status.\\n\"\n+          + \"The requestor is not the initiating client of the finalization,\"\n+          + \" if you want to take over, and get unsent status messages, check\"\n+          + \" -takeover option.\", INVALID_REQUEST);\n+    }\n+  }\n+\n+  /**\n+   * This class implements the finalization logic applied to every\n+   * LayoutFeature that needs to be finalized.\n+   *\n+   * For the first approach this happens synchronously within the state machine\n+   * during the FinalizeUpgrade request, but ideally this has to be moved to\n+   * individual calls that are going into the StateMaching one by one.\n+   * The prerequisits for this to happen in the background are the following:\n+   * - more fine grained control for LayoutFeatures to prepare the\n+   *    finalization outside the state machine, do the switch from old to new\n+   *    logic inside the statemachine and apply the finalization, and then do\n+   *    any cleanup necessary outside the state machine\n+   * - a way to post a request to the state machine that is not part of the\n+   *    client API, so basically not an OMRequest, but preferably an internal\n+   *    request, which is posted from the leader OM to the follower OMs only.\n+   * - ensure that there is a possibility to implement a rollback logic if\n+   *    something goes wrong inside the state machine, to avoid OM stuck in an\n+   *    intermediate state due to an error.\n+   */\n+  private class Worker implements Callable<Void> {\n+    private OzoneManager ozoneManager;\n+\n+    /**\n+     * Initiates the Worker, for the specified OM instance.\n+     * @param om the OzoneManager instance on which to finalize the new\n+     *           LayoutFeatures.\n+     */\n+    Worker(OzoneManager om) {\n+      ozoneManager = om;\n+    }\n+\n+    @Override\n+    public Void call() throws OMException {\n+      try {\n+        emitStartingMsg();\n+\n+        for (OMLayoutFeature f : versionManager.unfinalizedFeatures()) {\n+          finalizeFeature(f);\n+          updateLayoutVersionInVersionFile(f);\n+          versionManager.finalized(f);\n+        }\n+\n+        emitFinishedMsg();\n+      } finally {\n+        isDone = true;\n+      }\n+      return null;\n+    }\n+\n+    private void finalizeFeature(OMLayoutFeature feature)\n+        throws OMException {\n+      OmUpgradeAction action = feature.onFinalizeAction().orElse(NOOP);\n+\n+      if (action == NOOP) {\n+        emitNOOPMsg(feature.name());\n+        return;\n+      }\n+\n+      putFinalizationMarkIntoVersionFile(feature);\n+\n+      emitStartingFinalizationActionMsg(feature.name());\n+      try {\n+        action.executeAction(ozoneManager);\n+      } catch (Exception e) {\n+        logFinalizationFailureAndThrow(e, feature.name());\n+      }\n+      emitFinishFinalizationActionMsg(feature.name());\n+\n+      removeFinalizationMarkFromVersionFile(feature);\n+    }\n+\n+    private void updateLayoutVersionInVersionFile(OMLayoutFeature feature)\n+        throws OMException {\n+      int prevLayoutVersion = currentStoredLayoutVersion();\n+\n+      updateStorageLayoutVersion(feature.layoutVersion());\n+      try {\n+        persistStorage();\n+      } catch (IOException e) {\n+        updateStorageLayoutVersion(prevLayoutVersion);\n+        logLayoutVersionUpdateFailureAndThrow(e);\n+      }\n+    }\n+\n+    private void putFinalizationMarkIntoVersionFile(OMLayoutFeature feature)\n+        throws OMException {\n+      try {\n+        emitUpgradeToLayoutVersionPersistingMsg(feature.name());\n+\n+        setUpgradeToLayoutVersionInStorage(feature.layoutVersion());\n+        persistStorage();\n+\n+        emitUpgradeToLayoutVersionPersistedMsg();\n+      } catch (IOException e) {\n+        logUpgradeToLayoutVersionPersistingFailureAndThrow(feature.name(), e);\n+      }\n+    }\n+\n+    private void removeFinalizationMarkFromVersionFile(OMLayoutFeature feature)\n+        throws OMException {\n+      try {\n+        emitRemovingUpgradeToLayoutVersionMsg(feature.name());\n+\n+        unsetUpgradeToLayoutVersionInStorage();\n+        persistStorage();\n+\n+        emitRemovedUpgradeToLayoutVersionMsg();\n+      } catch (IOException e) {\n+        logUpgradeToLayoutVersionRemovalFailureAndThrow(feature.name(), e);\n+      }\n+    }\n+\n+\n+\n+\n+\n+    private void setUpgradeToLayoutVersionInStorage(int version) {\n+      ozoneManager.getOmStorage().setUpgradeToLayoutVersion(version);\n+    }\n+\n+    private void unsetUpgradeToLayoutVersionInStorage() {\n+      ozoneManager.getOmStorage().unsetUpgradeToLayoutVersion();\n+    }\n+\n+    private int currentStoredLayoutVersion() {\n+      return ozoneManager.getOmStorage().getLayoutVersion();\n+    }\n+\n+    private void updateStorageLayoutVersion(int version) {\n+      ozoneManager.getOmStorage().setLayoutVersion(version);\n+    }\n+\n+    private void persistStorage() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d8186c9072fe1025875541c713bbddd57d8499b"}, "originalPosition": 237}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU1NjgxNg==", "bodyText": "Storage and OMStorage chose to have an implementation for setters where the setter does not persist the change to the disk, these are the two that I have checked, and decided to remain consistent with this behaviour. This is the sole reason for controlling this from outside the Storage class implementation. Here it is extracted into a method to make it easier to follow the flow, and to hide the implementation detail of how to persist the storage from the reader when he reads the backbone of the internal logic of the methods with a higher layer in the abstractions.", "url": "https://github.com/apache/ozone/pull/1456#discussion_r503556816", "createdAt": "2020-10-12T22:02:54Z", "author": {"login": "fapifta"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/upgrade/OMUpgradeFinalizer.java", "diffHunk": "@@ -0,0 +1,328 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.upgrade;\n+\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes;\n+import org.apache.hadoop.ozone.upgrade.UpgradeFinalizer;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.*;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.INVALID_REQUEST;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.PERSIST_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.REMOVE_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.UPDATE_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_DONE;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_IN_PROGRESS;\n+\n+/**\n+ * UpgradeFinalizer implementation for the Ozone Manager service.\n+ */\n+public class OMUpgradeFinalizer implements UpgradeFinalizer<OzoneManager> {\n+\n+  private  static final OmUpgradeAction NOOP = a -> {};\n+\n+  private OMLayoutVersionManagerImpl versionManager;\n+  private String clientID;\n+\n+  private Queue<String> msgs = new ConcurrentLinkedQueue<>();\n+  private boolean isDone = false;\n+\n+  public OMUpgradeFinalizer(OMLayoutVersionManagerImpl versionManager) {\n+    this.versionManager = versionManager;\n+  }\n+\n+  @Override\n+  public StatusAndMessages finalize(String upgradeClientID, OzoneManager om)\n+      throws IOException {\n+    if (!versionManager.needsFinalization()) {\n+      return FINALIZED_MSG;\n+    }\n+    clientID = upgradeClientID;\n+\n+// This requires some more investigation on how to do it properly while\n+// requests are on the fly, and post finalize features one by one.\n+// Until that is done, monitoring is not really doing anything meaningful\n+// but this is a tradoff we can take for the first iteration either if needed,\n+// as the finalization of the first few features should not take that long.\n+// Follow up JIRA is in HDDS-4286\n+//    String threadName = \"OzoneManager-Upgrade-Finalizer\";\n+//    ExecutorService executor =\n+//        Executors.newSingleThreadExecutor(r -> new Thread(threadName));\n+//    executor.submit(new Worker(om));\n+    new Worker(om).call();\n+    return STARTING_MSG;\n+  }\n+\n+  @Override\n+  public synchronized StatusAndMessages reportStatus(\n+      String upgradeClientID, boolean takeover\n+  ) throws IOException {\n+    if (takeover) {\n+      clientID = upgradeClientID;\n+    }\n+    assertClientId(upgradeClientID);\n+    List<String> returningMsgs = new ArrayList<>(msgs.size()+10);\n+    Status status = isDone ? FINALIZATION_DONE : FINALIZATION_IN_PROGRESS;\n+    while (msgs.size() > 0) {\n+      returningMsgs.add(msgs.poll());\n+    }\n+    return new StatusAndMessages(status, returningMsgs);\n+  }\n+\n+  private void assertClientId(String id) throws OMException {\n+    if (!this.clientID.equals(id)) {\n+      throw new OMException(\"Unknown client tries to get finalization status.\\n\"\n+          + \"The requestor is not the initiating client of the finalization,\"\n+          + \" if you want to take over, and get unsent status messages, check\"\n+          + \" -takeover option.\", INVALID_REQUEST);\n+    }\n+  }\n+\n+  /**\n+   * This class implements the finalization logic applied to every\n+   * LayoutFeature that needs to be finalized.\n+   *\n+   * For the first approach this happens synchronously within the state machine\n+   * during the FinalizeUpgrade request, but ideally this has to be moved to\n+   * individual calls that are going into the StateMaching one by one.\n+   * The prerequisits for this to happen in the background are the following:\n+   * - more fine grained control for LayoutFeatures to prepare the\n+   *    finalization outside the state machine, do the switch from old to new\n+   *    logic inside the statemachine and apply the finalization, and then do\n+   *    any cleanup necessary outside the state machine\n+   * - a way to post a request to the state machine that is not part of the\n+   *    client API, so basically not an OMRequest, but preferably an internal\n+   *    request, which is posted from the leader OM to the follower OMs only.\n+   * - ensure that there is a possibility to implement a rollback logic if\n+   *    something goes wrong inside the state machine, to avoid OM stuck in an\n+   *    intermediate state due to an error.\n+   */\n+  private class Worker implements Callable<Void> {\n+    private OzoneManager ozoneManager;\n+\n+    /**\n+     * Initiates the Worker, for the specified OM instance.\n+     * @param om the OzoneManager instance on which to finalize the new\n+     *           LayoutFeatures.\n+     */\n+    Worker(OzoneManager om) {\n+      ozoneManager = om;\n+    }\n+\n+    @Override\n+    public Void call() throws OMException {\n+      try {\n+        emitStartingMsg();\n+\n+        for (OMLayoutFeature f : versionManager.unfinalizedFeatures()) {\n+          finalizeFeature(f);\n+          updateLayoutVersionInVersionFile(f);\n+          versionManager.finalized(f);\n+        }\n+\n+        emitFinishedMsg();\n+      } finally {\n+        isDone = true;\n+      }\n+      return null;\n+    }\n+\n+    private void finalizeFeature(OMLayoutFeature feature)\n+        throws OMException {\n+      OmUpgradeAction action = feature.onFinalizeAction().orElse(NOOP);\n+\n+      if (action == NOOP) {\n+        emitNOOPMsg(feature.name());\n+        return;\n+      }\n+\n+      putFinalizationMarkIntoVersionFile(feature);\n+\n+      emitStartingFinalizationActionMsg(feature.name());\n+      try {\n+        action.executeAction(ozoneManager);\n+      } catch (Exception e) {\n+        logFinalizationFailureAndThrow(e, feature.name());\n+      }\n+      emitFinishFinalizationActionMsg(feature.name());\n+\n+      removeFinalizationMarkFromVersionFile(feature);\n+    }\n+\n+    private void updateLayoutVersionInVersionFile(OMLayoutFeature feature)\n+        throws OMException {\n+      int prevLayoutVersion = currentStoredLayoutVersion();\n+\n+      updateStorageLayoutVersion(feature.layoutVersion());\n+      try {\n+        persistStorage();\n+      } catch (IOException e) {\n+        updateStorageLayoutVersion(prevLayoutVersion);\n+        logLayoutVersionUpdateFailureAndThrow(e);\n+      }\n+    }\n+\n+    private void putFinalizationMarkIntoVersionFile(OMLayoutFeature feature)\n+        throws OMException {\n+      try {\n+        emitUpgradeToLayoutVersionPersistingMsg(feature.name());\n+\n+        setUpgradeToLayoutVersionInStorage(feature.layoutVersion());\n+        persistStorage();\n+\n+        emitUpgradeToLayoutVersionPersistedMsg();\n+      } catch (IOException e) {\n+        logUpgradeToLayoutVersionPersistingFailureAndThrow(feature.name(), e);\n+      }\n+    }\n+\n+    private void removeFinalizationMarkFromVersionFile(OMLayoutFeature feature)\n+        throws OMException {\n+      try {\n+        emitRemovingUpgradeToLayoutVersionMsg(feature.name());\n+\n+        unsetUpgradeToLayoutVersionInStorage();\n+        persistStorage();\n+\n+        emitRemovedUpgradeToLayoutVersionMsg();\n+      } catch (IOException e) {\n+        logUpgradeToLayoutVersionRemovalFailureAndThrow(feature.name(), e);\n+      }\n+    }\n+\n+\n+\n+\n+\n+    private void setUpgradeToLayoutVersionInStorage(int version) {\n+      ozoneManager.getOmStorage().setUpgradeToLayoutVersion(version);\n+    }\n+\n+    private void unsetUpgradeToLayoutVersionInStorage() {\n+      ozoneManager.getOmStorage().unsetUpgradeToLayoutVersion();\n+    }\n+\n+    private int currentStoredLayoutVersion() {\n+      return ozoneManager.getOmStorage().getLayoutVersion();\n+    }\n+\n+    private void updateStorageLayoutVersion(int version) {\n+      ozoneManager.getOmStorage().setLayoutVersion(version);\n+    }\n+\n+    private void persistStorage() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUzODczMw=="}, "originalCommit": {"oid": "2d8186c9072fe1025875541c713bbddd57d8499b"}, "originalPosition": 237}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Mzk2MTEwOnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/upgrade/OMFinalizeUpgradeRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMTozMTozN1rOHgNx9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMjowOTo0NFrOHgOz0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU0MjI2Mg==", "bodyText": "Line 54 has a debug log line left.", "url": "https://github.com/apache/ozone/pull/1456#discussion_r503542262", "createdAt": "2020-10-12T21:31:37Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/upgrade/OMFinalizeUpgradeRequest.java", "diffHunk": "@@ -63,11 +64,20 @@ public OMClientResponse validateAndUpdateCache(\n \n       String upgradeClientID = request.getUpgradeClientId();\n \n-      UpgradeFinalizationStatus status =\n+      StatusAndMessages omStatus =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d8186c9072fe1025875541c713bbddd57d8499b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU1OTEyMw==", "bodyText": "Nice catch, it seems I forgot to remove this one. I am pushing the deletion of this line.", "url": "https://github.com/apache/ozone/pull/1456#discussion_r503559123", "createdAt": "2020-10-12T22:09:44Z", "author": {"login": "fapifta"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/upgrade/OMFinalizeUpgradeRequest.java", "diffHunk": "@@ -63,11 +64,20 @@ public OMClientResponse validateAndUpdateCache(\n \n       String upgradeClientID = request.getUpgradeClientId();\n \n-      UpgradeFinalizationStatus status =\n+      StatusAndMessages omStatus =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU0MjI2Mg=="}, "originalCommit": {"oid": "2d8186c9072fe1025875541c713bbddd57d8499b"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NDAwMDc3OnYy", "diffSide": "RIGHT", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/upgrade/OMUpgradeFinalizer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMTo0MDo0MVrOHgOLew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMTo1MjoxM1rOHgOb0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU0ODc5NQ==", "bodyText": "Just an observation. By the time we return 'STARTING_MSG' at 77, we are already done with Finalization right? Is this return message left as it is for a future refactoring through HDDS-3286 where async finalization will be done?", "url": "https://github.com/apache/ozone/pull/1456#discussion_r503548795", "createdAt": "2020-10-12T21:40:41Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/upgrade/OMUpgradeFinalizer.java", "diffHunk": "@@ -0,0 +1,328 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.upgrade;\n+\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes;\n+import org.apache.hadoop.ozone.upgrade.UpgradeFinalizer;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.*;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.INVALID_REQUEST;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.PERSIST_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.REMOVE_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.UPDATE_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_DONE;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_IN_PROGRESS;\n+\n+/**\n+ * UpgradeFinalizer implementation for the Ozone Manager service.\n+ */\n+public class OMUpgradeFinalizer implements UpgradeFinalizer<OzoneManager> {\n+\n+  private  static final OmUpgradeAction NOOP = a -> {};\n+\n+  private OMLayoutVersionManagerImpl versionManager;\n+  private String clientID;\n+\n+  private Queue<String> msgs = new ConcurrentLinkedQueue<>();\n+  private boolean isDone = false;\n+\n+  public OMUpgradeFinalizer(OMLayoutVersionManagerImpl versionManager) {\n+    this.versionManager = versionManager;\n+  }\n+\n+  @Override\n+  public StatusAndMessages finalize(String upgradeClientID, OzoneManager om)\n+      throws IOException {\n+    if (!versionManager.needsFinalization()) {\n+      return FINALIZED_MSG;\n+    }\n+    clientID = upgradeClientID;\n+\n+// This requires some more investigation on how to do it properly while\n+// requests are on the fly, and post finalize features one by one.\n+// Until that is done, monitoring is not really doing anything meaningful\n+// but this is a tradoff we can take for the first iteration either if needed,\n+// as the finalization of the first few features should not take that long.\n+// Follow up JIRA is in HDDS-4286\n+//    String threadName = \"OzoneManager-Upgrade-Finalizer\";\n+//    ExecutorService executor =\n+//        Executors.newSingleThreadExecutor(r -> new Thread(threadName));\n+//    executor.submit(new Worker(om));\n+    new Worker(om).call();\n+    return STARTING_MSG;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d8186c9072fe1025875541c713bbddd57d8499b"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU1Mjk3Nw==", "bodyText": "yes, I did not wanted to change the overall flow of messages and statusas that I came up with, but technically at this point we already done in the current implementation.", "url": "https://github.com/apache/ozone/pull/1456#discussion_r503552977", "createdAt": "2020-10-12T21:52:13Z", "author": {"login": "fapifta"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/upgrade/OMUpgradeFinalizer.java", "diffHunk": "@@ -0,0 +1,328 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.upgrade;\n+\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes;\n+import org.apache.hadoop.ozone.upgrade.UpgradeFinalizer;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.*;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.INVALID_REQUEST;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.PERSIST_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.REMOVE_UPGRADE_TO_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.UPDATE_LAYOUT_VERSION_FAILED;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_DONE;\n+import static org.apache.hadoop.ozone.upgrade.UpgradeFinalizer.Status.FINALIZATION_IN_PROGRESS;\n+\n+/**\n+ * UpgradeFinalizer implementation for the Ozone Manager service.\n+ */\n+public class OMUpgradeFinalizer implements UpgradeFinalizer<OzoneManager> {\n+\n+  private  static final OmUpgradeAction NOOP = a -> {};\n+\n+  private OMLayoutVersionManagerImpl versionManager;\n+  private String clientID;\n+\n+  private Queue<String> msgs = new ConcurrentLinkedQueue<>();\n+  private boolean isDone = false;\n+\n+  public OMUpgradeFinalizer(OMLayoutVersionManagerImpl versionManager) {\n+    this.versionManager = versionManager;\n+  }\n+\n+  @Override\n+  public StatusAndMessages finalize(String upgradeClientID, OzoneManager om)\n+      throws IOException {\n+    if (!versionManager.needsFinalization()) {\n+      return FINALIZED_MSG;\n+    }\n+    clientID = upgradeClientID;\n+\n+// This requires some more investigation on how to do it properly while\n+// requests are on the fly, and post finalize features one by one.\n+// Until that is done, monitoring is not really doing anything meaningful\n+// but this is a tradoff we can take for the first iteration either if needed,\n+// as the finalization of the first few features should not take that long.\n+// Follow up JIRA is in HDDS-4286\n+//    String threadName = \"OzoneManager-Upgrade-Finalizer\";\n+//    ExecutorService executor =\n+//        Executors.newSingleThreadExecutor(r -> new Thread(threadName));\n+//    executor.submit(new Worker(om));\n+    new Worker(om).call();\n+    return STARTING_MSG;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU0ODc5NQ=="}, "originalCommit": {"oid": "2d8186c9072fe1025875541c713bbddd57d8499b"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4946, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}