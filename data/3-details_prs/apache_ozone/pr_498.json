{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3NjEyMjk3", "number": 498, "title": "HDDS-2940. mkdir : create key table entries for intermediate directories in the path", "bodyText": "What changes were proposed in this pull request?\nfor MKDIR operation - add separate directory entry in OM key table for each directory that appears in the path passed to mkdir.\nWhat is the link to the Apache JIRA\nhttps://issues.apache.org/jira/browse/HDDS-2940\nHow was this patch tested?\nunit tests.\nTestOzoneFileInterfaces#testDirectory is modified to assert that prefix directories get created.", "createdAt": "2020-01-27T17:25:49Z", "url": "https://github.com/apache/ozone/pull/498", "merged": true, "mergeCommit": {"oid": "28f2629748af42c286fc7b1c40b49ca21dc7bb55"}, "closed": true, "closedAt": "2020-02-27T04:25:11Z", "author": {"login": "supratimdeka"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_BLMCgFqTM0OTkxMDI0Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcITNYGgFqTM2NTQwMTYyNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5OTEwMjQ2", "url": "https://github.com/apache/ozone/pull/498#pullrequestreview-349910246", "createdAt": "2020-01-29T07:42:45Z", "commit": {"oid": "f5866a0796bd2339f5dd95abf94e4976357d1760"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNzo0Mjo0NlrOFi_DHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNzo1NDowNlrOFi_R4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIyODg5NA==", "bodyText": "There seems to be no usage for this method.", "url": "https://github.com/apache/ozone/pull/498#discussion_r372228894", "createdAt": "2020-01-29T07:42:46Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileRequest.java", "diffHunk": "@@ -84,6 +92,70 @@ public static OMDirectoryResult verifyFilesInPath(\n     return OMDirectoryResult.NONE;\n   }\n \n+  /**\n+   * generate the object id from the transaction id.\n+   * @param id\n+   * @return object id\n+   */\n+  public static long getObjIdFromTxId(long id) {\n+    return id << TRANSACTION_ID_SHIFT;\n+  }\n+\n+  /**\n+   * Return list of missing parent directories in the given path.\n+   * @param omMetadataManager\n+   * @param volumeName\n+   * @param bucketName\n+   * @param keyPath\n+   * @return List of keys representing non-existent parent dirs\n+   * @throws IOException\n+   */\n+  public static List<String> getMissingParents(\n+      @Nonnull OMMetadataManager omMetadataManager,\n+      @Nonnull String volumeName,\n+      @Nonnull String bucketName,\n+      @Nonnull Path keyPath) throws IOException {\n+\n+    List<String> missing = new ArrayList<>();\n+\n+    while (keyPath != null) {\n+      String pathName = keyPath.toString();\n+\n+      String dbKeyName = omMetadataManager.getOzoneKey(volumeName,\n+          bucketName, pathName);\n+      String dbDirKeyName = omMetadataManager.getOzoneDirKey(volumeName,\n+          bucketName, pathName);\n+\n+      if (omMetadataManager.getKeyTable().isExist(dbKeyName)) {\n+        // Found a file in the given path.\n+        String errorMsg = \"File \" + dbKeyName + \" exists with same name as \" +\n+            \" directory in path : \" + pathName;\n+        throw new IOException(errorMsg);\n+      } else if (omMetadataManager.getKeyTable().isExist(dbDirKeyName)) {\n+        // Found a directory in the given path. Higher parents must exist.\n+        break;\n+      } else {\n+        missing.add(pathName);\n+      }\n+      keyPath = keyPath.getParent();\n+    }\n+\n+    return missing;\n+  }\n+\n+  private static OmKeyInfo getKeyInfo(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5866a0796bd2339f5dd95abf94e4976357d1760"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIzMDcyNQ==", "bodyText": "Do we need to worry about this assumption not being true in clusters already deployed?", "url": "https://github.com/apache/ozone/pull/498#discussion_r372230725", "createdAt": "2020-01-29T07:48:18Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileRequest.java", "diffHunk": "@@ -84,6 +92,70 @@ public static OMDirectoryResult verifyFilesInPath(\n     return OMDirectoryResult.NONE;\n   }\n \n+  /**\n+   * generate the object id from the transaction id.\n+   * @param id\n+   * @return object id\n+   */\n+  public static long getObjIdFromTxId(long id) {\n+    return id << TRANSACTION_ID_SHIFT;\n+  }\n+\n+  /**\n+   * Return list of missing parent directories in the given path.\n+   * @param omMetadataManager\n+   * @param volumeName\n+   * @param bucketName\n+   * @param keyPath\n+   * @return List of keys representing non-existent parent dirs\n+   * @throws IOException\n+   */\n+  public static List<String> getMissingParents(\n+      @Nonnull OMMetadataManager omMetadataManager,\n+      @Nonnull String volumeName,\n+      @Nonnull String bucketName,\n+      @Nonnull Path keyPath) throws IOException {\n+\n+    List<String> missing = new ArrayList<>();\n+\n+    while (keyPath != null) {\n+      String pathName = keyPath.toString();\n+\n+      String dbKeyName = omMetadataManager.getOzoneKey(volumeName,\n+          bucketName, pathName);\n+      String dbDirKeyName = omMetadataManager.getOzoneDirKey(volumeName,\n+          bucketName, pathName);\n+\n+      if (omMetadataManager.getKeyTable().isExist(dbKeyName)) {\n+        // Found a file in the given path.\n+        String errorMsg = \"File \" + dbKeyName + \" exists with same name as \" +\n+            \" directory in path : \" + pathName;\n+        throw new IOException(errorMsg);\n+      } else if (omMetadataManager.getKeyTable().isExist(dbDirKeyName)) {\n+        // Found a directory in the given path. Higher parents must exist.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5866a0796bd2339f5dd95abf94e4976357d1760"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIzMjY3NQ==", "bodyText": "I believe this can be moved up to after the \"verifyFilesInPath\" call. Also, should we repeat the check for presence of intermediate directory path in keyTable in getMissingParents() again?", "url": "https://github.com/apache/ozone/pull/498#discussion_r372232675", "createdAt": "2020-01-29T07:54:06Z", "author": {"login": "avijayanhwx"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMDirectoryCreateRequest.java", "diffHunk": "@@ -126,31 +129,41 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n     boolean acquiredLock = false;\n     IOException exception = null;\n     OMClientResponse omClientResponse = null;\n+    List<OmKeyInfo> missingParentInfos = new ArrayList<>();\n+\n     try {\n       // check Acl\n       checkKeyAcls(ozoneManager, volumeName, bucketName, keyName,\n           IAccessAuthorizer.ACLType.CREATE, OzoneObj.ResourceType.KEY);\n \n       // Check if this is the root of the filesystem.\n       if (keyName.length() == 0) {\n-        return new OMDirectoryCreateResponse(null,\n+        return new OMDirectoryCreateResponse(null, null,\n             omResponse.setCreateDirectoryResponse(\n-                CreateDirectoryResponse.newBuilder()).build());\n+                CreateDirectoryResponse.newBuilder()).build(), false);\n       }\n       // acquire lock\n       acquiredLock = omMetadataManager.getLock().acquireWriteLock(BUCKET_LOCK,\n           volumeName, bucketName);\n \n       validateBucketAndVolume(omMetadataManager, volumeName, bucketName);\n \n+      Path keyPath = Paths.get(keyName);\n+\n       // Need to check if any files exist in the given path, if they exist we\n       // cannot create a directory with the given key.\n       OMFileRequest.OMDirectoryResult omDirectoryResult =\n           OMFileRequest.verifyFilesInPath(omMetadataManager,\n-          volumeName, bucketName, keyName, Paths.get(keyName));\n+          volumeName, bucketName, keyName, keyPath);\n+\n+      List<String> missingParents = OMFileRequest.getMissingParents(\n+          omMetadataManager, volumeName, bucketName, keyPath.getParent());\n \n       OmBucketInfo omBucketInfo = omMetadataManager.getBucketTable().get(\n           omMetadataManager.getBucketKey(volumeName, bucketName));\n+      long baseObjId = OMFileRequest.getObjIdFromTxId(transactionLogIndex);\n+      long objectCount = 1;\n+\n       OmKeyInfo dirKeyInfo = null;\n       if (omDirectoryResult == FILE_EXISTS ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5866a0796bd2339f5dd95abf94e4976357d1760"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMjI5ODYw", "url": "https://github.com/apache/ozone/pull/498#pullrequestreview-353229860", "createdAt": "2020-02-04T19:10:55Z", "commit": {"oid": "3bdd258e9214d96f249fadb27d41757fb18ccca4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxOToxMDo1NVrOFlgEiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxOToyMjo0M1rOFlgctw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg2NzA4MQ==", "bodyText": "I think we can combine the two functions to avoid doing DB reads twice. We could probably change OMDirectoryResult structure to include the result + missing dirs.", "url": "https://github.com/apache/ozone/pull/498#discussion_r374867081", "createdAt": "2020-02-04T19:10:55Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMDirectoryCreateRequest.java", "diffHunk": "@@ -126,31 +129,41 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n     boolean acquiredLock = false;\n     IOException exception = null;\n     OMClientResponse omClientResponse = null;\n+    List<OmKeyInfo> missingParentInfos = new ArrayList<>();\n+\n     try {\n       // check Acl\n       checkKeyAcls(ozoneManager, volumeName, bucketName, keyName,\n           IAccessAuthorizer.ACLType.CREATE, OzoneObj.ResourceType.KEY);\n \n       // Check if this is the root of the filesystem.\n       if (keyName.length() == 0) {\n-        return new OMDirectoryCreateResponse(null,\n+        return new OMDirectoryCreateResponse(null, null,\n             omResponse.setCreateDirectoryResponse(\n-                CreateDirectoryResponse.newBuilder()).build());\n+                CreateDirectoryResponse.newBuilder()).build(), false);\n       }\n       // acquire lock\n       acquiredLock = omMetadataManager.getLock().acquireWriteLock(BUCKET_LOCK,\n           volumeName, bucketName);\n \n       validateBucketAndVolume(omMetadataManager, volumeName, bucketName);\n \n+      Path keyPath = Paths.get(keyName);\n+\n       // Need to check if any files exist in the given path, if they exist we\n       // cannot create a directory with the given key.\n       OMFileRequest.OMDirectoryResult omDirectoryResult =\n           OMFileRequest.verifyFilesInPath(omMetadataManager,\n-          volumeName, bucketName, keyName, Paths.get(keyName));\n+          volumeName, bucketName, keyName, keyPath);\n+\n+      List<String> missingParents = OMFileRequest.getMissingParents(\n+          omMetadataManager, volumeName, bucketName, keyPath.getParent());\n \n       OmBucketInfo omBucketInfo = omMetadataManager.getBucketTable().get(\n           omMetadataManager.getBucketKey(volumeName, bucketName));\n+      long baseObjId = OMFileRequest.getObjIdFromTxId(transactionLogIndex);\n+      long objectCount = 1;\n+\n       OmKeyInfo dirKeyInfo = null;\n       if (omDirectoryResult == FILE_EXISTS ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIzMjY3NQ=="}, "originalCommit": {"oid": "f5866a0796bd2339f5dd95abf94e4976357d1760"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg2OTk1Mg==", "bodyText": "How are we calculating the objectID here? Is this to ensure that the objectIDs are unique?\nI am not sure what the effects would be as we set the transactionID as the objectID everywhere else.", "url": "https://github.com/apache/ozone/pull/498#discussion_r374869952", "createdAt": "2020-02-04T19:16:22Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMDirectoryCreateRequest.java", "diffHunk": "@@ -159,8 +172,24 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n             FILE_ALREADY_EXISTS);\n       } else if (omDirectoryResult == DIRECTORY_EXISTS_IN_GIVENPATH ||\n           omDirectoryResult == NONE) {\n-        dirKeyInfo = createDirectoryKeyInfo(ozoneManager, omBucketInfo,\n-            volumeName, bucketName, keyName, keyArgs, transactionLogIndex);\n+        dirKeyInfo = createDirectoryKeyInfo(ozoneManager, keyName, keyArgs,\n+            baseObjId, transactionLogIndex);\n+\n+        for (String missingKey : missingParents) {\n+          LOG.debug(\"missing parent {}\", missingKey);\n+          // what about keyArgs for parent directories? TODO\n+          OmKeyInfo parentKeyInfo = createDirectoryKeyInfoNoACL(ozoneManager,\n+              missingKey, keyArgs, baseObjId + objectCount,\n+              transactionLogIndex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bdd258e9214d96f249fadb27d41757fb18ccca4"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg3MTc2MA==", "bodyText": "Let's not set the updateID here as it will be set later.", "url": "https://github.com/apache/ozone/pull/498#discussion_r374871760", "createdAt": "2020-02-04T19:19:48Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMDirectoryCreateRequest.java", "diffHunk": "@@ -228,10 +289,8 @@ private OmKeyInfo createDirectoryKeyInfo(OzoneManager ozoneManager,\n         .setReplicationType(HddsProtos.ReplicationType.RATIS)\n         .setReplicationFactor(HddsProtos.ReplicationFactor.ONE)\n         .setFileEncryptionInfo(encryptionInfo.orNull())\n-        .setAcls(OzoneAclUtil.fromProtobuf(keyArgs.getAclsList()))\n-        .setObjectID(transactionLogIndex)\n-        .setUpdateID(transactionLogIndex)\n-        .build();\n+        .setObjectID(objectId)\n+        .setUpdateID(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bdd258e9214d96f249fadb27d41757fb18ccca4"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg3MzI3MQ==", "bodyText": "We can avoid passing the createPrefix param and use parentKeyInfos != null check only instead.", "url": "https://github.com/apache/ozone/pull/498#discussion_r374873271", "createdAt": "2020-02-04T19:22:43Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/file/OMDirectoryCreateResponse.java", "diffHunk": "@@ -39,11 +40,17 @@\n   public static final Logger LOG =\n       LoggerFactory.getLogger(OMDirectoryCreateResponse.class);\n   private OmKeyInfo dirKeyInfo;\n+  private List<OmKeyInfo> parentKeyInfos;\n+  private boolean createPrefix;\n \n   public OMDirectoryCreateResponse(@Nullable OmKeyInfo dirKeyInfo,\n-      @Nonnull OMResponse omResponse) {\n+      @Nullable List<OmKeyInfo> parentKeyInfos,\n+      @Nonnull OMResponse omResponse,\n+      boolean createPrefix) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bdd258e9214d96f249fadb27d41757fb18ccca4"}, "originalPosition": 19}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9a494b4b02af5817486cdb0a640beef73f574974", "author": {"user": null}, "url": "https://github.com/apache/ozone/commit/9a494b4b02af5817486cdb0a640beef73f574974", "committedDate": "2020-02-11T11:39:47Z", "message": "addressed review comments. fixed failure in acceptance test"}, "afterCommit": {"oid": "0bac317c67690bda80150c0e4973f1df0030f9dc", "author": {"user": null}, "url": "https://github.com/apache/ozone/commit/0bac317c67690bda80150c0e4973f1df0030f9dc", "committedDate": "2020-02-11T13:35:36Z", "message": "addressed review comments. fixed failure in acceptance test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MTUyNDQ2", "url": "https://github.com/apache/ozone/pull/498#pullrequestreview-359152446", "createdAt": "2020-02-14T18:59:08Z", "commit": {"oid": "ea63c4254013dcfa00566d28dbf6ef9b8ed99201"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxODo1OTowOFrOFqAhDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxOToyOTowNlrOFqBTnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5Mjk3NQ==", "bodyText": "We already computed getObjIdRangeFromTxId() in the calling function while computing baseObjId (line 180). Can we avoid calling it again here?", "url": "https://github.com/apache/ozone/pull/498#discussion_r379592975", "createdAt": "2020-02-14T18:59:08Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMDirectoryCreateRequest.java", "diffHunk": "@@ -229,12 +243,69 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n           auditMap, exception, userInfo));\n     }\n \n+    logResult(createDirectoryRequest, keyArgs, omMetrics, result, trxnLogIndex,\n+        exception);\n+\n+    return omClientResponse;\n+  }\n+\n+  private List<OmKeyInfo> getAllParentInfo(OzoneManager ozoneManager,\n+      KeyArgs keyArgs, List<String> missingParents, long trxnLogIndex)\n+      throws OMException, IOException {\n+    OMMetadataManager omMetadataManager = ozoneManager.getMetadataManager();\n+    List<OmKeyInfo> missingParentInfos = new ArrayList<>();\n+\n+    ImmutablePair<Long, Long> objIdRange = OMFileRequest\n+        .getObjIdRangeFromTxId(trxnLogIndex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea63c4254013dcfa00566d28dbf6ef9b8ed99201"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5MzE2MQ==", "bodyText": "We can move this inside the second if else condition.", "url": "https://github.com/apache/ozone/pull/498#discussion_r379593161", "createdAt": "2020-02-14T18:59:35Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMDirectoryCreateRequest.java", "diffHunk": "@@ -161,14 +167,18 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n \n       validateBucketAndVolume(omMetadataManager, volumeName, bucketName);\n \n+      Path keyPath = Paths.get(keyName);\n+\n       // Need to check if any files exist in the given path, if they exist we\n       // cannot create a directory with the given key.\n+      OMFileRequest.OMPathInfo omPathInfo =\n+          OMFileRequest.verifyFilesInPath(omMetadataManager, volumeName,\n+              bucketName, keyName, keyPath);\n       OMFileRequest.OMDirectoryResult omDirectoryResult =\n-          OMFileRequest.verifyFilesInPath(omMetadataManager,\n-          volumeName, bucketName, keyName, Paths.get(keyName));\n+          omPathInfo.getDirectoryResult();\n+      List<String> missingParents = omPathInfo.getMissingParents();\n+      long baseObjId = OMFileRequest.getObjIDFromTxId(trxnLogIndex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea63c4254013dcfa00566d28dbf6ef9b8ed99201"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5NDM1Mg==", "bodyText": "Can we update this debug log message to indicate that the missing parent directory is being created/ added to KeyTable?", "url": "https://github.com/apache/ozone/pull/498#discussion_r379594352", "createdAt": "2020-02-14T19:02:25Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMDirectoryCreateRequest.java", "diffHunk": "@@ -229,12 +243,69 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n           auditMap, exception, userInfo));\n     }\n \n+    logResult(createDirectoryRequest, keyArgs, omMetrics, result, trxnLogIndex,\n+        exception);\n+\n+    return omClientResponse;\n+  }\n+\n+  private List<OmKeyInfo> getAllParentInfo(OzoneManager ozoneManager,\n+      KeyArgs keyArgs, List<String> missingParents, long trxnLogIndex)\n+      throws OMException, IOException {\n+    OMMetadataManager omMetadataManager = ozoneManager.getMetadataManager();\n+    List<OmKeyInfo> missingParentInfos = new ArrayList<>();\n+\n+    ImmutablePair<Long, Long> objIdRange = OMFileRequest\n+        .getObjIdRangeFromTxId(trxnLogIndex);\n+    long baseObjId = objIdRange.getLeft();\n+    long maxObjId = objIdRange.getRight();\n+    long maxLevels = maxObjId - baseObjId;\n+    long objectCount = 1; // baseObjID is used by the leaf directory\n+\n+    String volumeName = keyArgs.getVolumeName();\n+    String bucketName = keyArgs.getBucketName();\n+    String keyName = keyArgs.getKeyName();\n+\n+    for (String missingKey : missingParents) {\n+      long nextObjId = baseObjId + objectCount;\n+      if (nextObjId > maxObjId) {\n+        throw new OMException(\"Too many directories in path. Exceeds limit of \"\n+            + maxLevels + \". Unable to create directory: \" + keyName\n+            + \" in volume/bucket: \" + volumeName + \"/\" + bucketName,\n+            INVALID_KEY_NAME);\n+      }\n+\n+      LOG.debug(\"missing parent {}\", missingKey);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea63c4254013dcfa00566d28dbf6ef9b8ed99201"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5OTM5NA==", "bodyText": "We use this function multiple times (more than getObjIdRangeFromTxId()). Wouldn't it be better to directly execute shift operation here instead of calling getObjIdRangeFromTxId()?", "url": "https://github.com/apache/ozone/pull/498#discussion_r379599394", "createdAt": "2020-02-14T19:14:04Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileRequest.java", "diffHunk": "@@ -64,24 +72,79 @@ public static OMDirectoryResult verifyFilesInPath(\n         // Found a file in the given path.\n         // Check if this is actual file or a file in the given path\n         if (dbKeyName.equals(fileNameFromDetails)) {\n-          return OMDirectoryResult.FILE_EXISTS;\n+          result = OMDirectoryResult.FILE_EXISTS;\n         } else {\n-          return OMDirectoryResult.FILE_EXISTS_IN_GIVENPATH;\n+          result = OMDirectoryResult.FILE_EXISTS_IN_GIVENPATH;\n         }\n       } else if (omMetadataManager.getKeyTable().isExist(dbDirKeyName)) {\n         // Found a directory in the given path.\n         // Check if this is actual directory or a directory in the given path\n         if (dbDirKeyName.equals(dirNameFromDetails)) {\n-          return OMDirectoryResult.DIRECTORY_EXISTS;\n+          result = OMDirectoryResult.DIRECTORY_EXISTS;\n         } else {\n-          return OMDirectoryResult.DIRECTORY_EXISTS_IN_GIVENPATH;\n+          result = OMDirectoryResult.DIRECTORY_EXISTS_IN_GIVENPATH;\n+        }\n+      } else {\n+        if (!dbDirKeyName.equals(dirNameFromDetails)) {\n+          missing.add(keyPath.toString());\n         }\n       }\n+\n+      if (result != OMDirectoryResult.NONE) {\n+        return new OMPathInfo(missing, result);\n+      }\n       keyPath = keyPath.getParent();\n     }\n \n     // Found no files/ directories in the given path.\n-    return OMDirectoryResult.NONE;\n+    return new OMPathInfo(missing, OMDirectoryResult.NONE);\n+  }\n+\n+  /**\n+   * Get the valid base object id given the transaction id.\n+   * @param id of the transaction\n+   * @return base object id allocated against the transaction\n+   */\n+  public static long getObjIDFromTxId(long id) {\n+    return getObjIdRangeFromTxId(id).getLeft();\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea63c4254013dcfa00566d28dbf6ef9b8ed99201"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwMjQ4NQ==", "bodyText": "Double check of status.isDirectory()", "url": "https://github.com/apache/ozone/pull/498#discussion_r379602485", "createdAt": "2020-02-14T19:21:19Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/fs/ozone/TestOzoneFileInterfaces.java", "diffHunk": "@@ -340,4 +385,30 @@ private Path createPath(String relativePath) {\n       return new Path(relativePath);\n     }\n   }\n+\n+  /**\n+   * verify that a directory exists and is initialized correctly.\n+   * @param path of the directory\n+   * @return null indicates FILE_NOT_FOUND, else the FileStatus\n+   * @throws IOException\n+   */\n+  private FileStatus getDirectoryStat(Path path) throws IOException {\n+\n+    FileStatus status = null;\n+\n+    try {\n+      status = fs.getFileStatus(path);\n+    } catch (FileNotFoundException e) {\n+      return null;\n+    }\n+    assertTrue(\"The created path is not directory.\", status.isDirectory());\n+\n+    assertTrue(status.isDirectory());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea63c4254013dcfa00566d28dbf6ef9b8ed99201"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwNTkxOQ==", "bodyText": "This case would never be reached in this test suit as createPrefix config is true by default and we are not overriding it.", "url": "https://github.com/apache/ozone/pull/498#discussion_r379605919", "createdAt": "2020-02-14T19:29:06Z", "author": {"login": "hanishakoneru"}, "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/fs/ozone/TestOzoneFileInterfaces.java", "diffHunk": "@@ -217,27 +219,70 @@ private void verifyOwnerGroup(FileStatus fileStatus) {\n \n   @Test\n   public void testDirectory() throws IOException {\n-    String dirPath = RandomStringUtils.randomAlphanumeric(5);\n-    Path path = createPath(\"/\" + dirPath);\n-    assertTrue(\"Makedirs returned with false for the path \" + path,\n-        fs.mkdirs(path));\n-\n-    FileStatus status = fs.getFileStatus(path);\n-    assertTrue(\"The created path is not directory.\", status.isDirectory());\n-\n-    assertTrue(status.isDirectory());\n-    assertEquals(FsPermission.getDirDefault(), status.getPermission());\n-    verifyOwnerGroup(status);\n+    String leafName = RandomStringUtils.randomAlphanumeric(5);\n+    OMMetadataManager metadataManager = cluster.getOzoneManager()\n+        .getMetadataManager();\n+\n+    String lev1dir = \"abc\";\n+    Path lev1path = createPath(\"/\" + lev1dir);\n+    String lev1key = metadataManager.getOzoneDirKey(volumeName, bucketName,\n+        o3fs.pathToKey(lev1path));\n+    String lev2dir = \"def\";\n+    Path lev2path = createPath(\"/\" + lev1dir + \"/\" + lev2dir);\n+    String lev2key = metadataManager.getOzoneDirKey(volumeName, bucketName,\n+        o3fs.pathToKey(lev2path));\n+\n+    FileStatus rootChild;\n+    FileStatus rootstatus;\n+    FileStatus leafstatus;\n+\n+    Path leaf = createPath(\"/\" + lev1dir + \"/\" + lev2dir + \"/\" + leafName);\n+    String leafKey = metadataManager.getOzoneDirKey(volumeName, bucketName,\n+        o3fs.pathToKey(leaf));\n+\n+    // verify prefix directories and the leaf, do not already exist\n+    assertTrue(metadataManager.getKeyTable().get(lev1key) == null);\n+    assertTrue(metadataManager.getKeyTable().get(lev2key) == null);\n+    assertTrue(metadataManager.getKeyTable().get(leafKey) == null);\n+\n+    assertTrue(\"Makedirs returned with false for the path \" + leaf,\n+        fs.mkdirs(leaf));\n+\n+    // verify the leaf directory got created.\n+    leafstatus = getDirectoryStat(leaf);\n+    assertTrue(leafstatus != null);\n+\n+    if (cluster.getOzoneManager().createPrefixEntries()) {\n+      FileStatus lev1status;\n+      FileStatus lev2status;\n+\n+      // verify prefix directories got created when creating the leaf directory.\n+      String kn = metadataManager.getKeyTable().get(lev2key).getKeyName();\n+      assertTrue(kn.equals(\"abc/def/\"));\n+      assertTrue(metadataManager\n+          .getKeyTable()\n+          .get(lev1key)\n+          .getKeyName().equals(\"abc/\"));\n+      assertTrue(metadataManager\n+          .getKeyTable()\n+          .get(lev2key)\n+          .getKeyName().equals(\"abc/def/\"));\n+      lev1status = getDirectoryStat(lev1path);\n+      lev2status = getDirectoryStat(lev2path);\n+      assertTrue((lev1status != null) && (lev2status != null));\n+      rootChild = lev1status;\n+    } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea63c4254013dcfa00566d28dbf6ef9b8ed99201"}, "originalPosition": 83}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4af5705a6ff66e38d7db3232c747b72bd98d1979", "author": {"user": null}, "url": "https://github.com/apache/ozone/commit/4af5705a6ff66e38d7db3232c747b72bd98d1979", "committedDate": "2020-02-15T06:32:51Z", "message": "review comments."}, "afterCommit": {"oid": "27b89a56216ef493c9b4695474dd37c9864a301f", "author": {"user": null}, "url": "https://github.com/apache/ozone/commit/27b89a56216ef493c9b4695474dd37c9864a301f", "committedDate": "2020-02-19T03:39:08Z", "message": "review comments."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "27b89a56216ef493c9b4695474dd37c9864a301f", "author": {"user": null}, "url": "https://github.com/apache/ozone/commit/27b89a56216ef493c9b4695474dd37c9864a301f", "committedDate": "2020-02-19T03:39:08Z", "message": "review comments."}, "afterCommit": {"oid": "f81d929e8e9bbf133ffc7142abec092d63c98517", "author": {"user": null}, "url": "https://github.com/apache/ozone/commit/f81d929e8e9bbf133ffc7142abec092d63c98517", "committedDate": "2020-02-20T16:02:39Z", "message": "undo findbugs related code movement in OzoneManager to fix acceptance failure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18bf1e4429c9bca13861aeb6989ae8e5e37af967", "author": {"user": null}, "url": "https://github.com/apache/ozone/commit/18bf1e4429c9bca13861aeb6989ae8e5e37af967", "committedDate": "2020-02-26T16:47:16Z", "message": "HDDS-2940. mkdir : create key table entries for intermediate directories in the path."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db16e8893920d709752512833d3b62c91d366a5e", "author": {"user": null}, "url": "https://github.com/apache/ozone/commit/db16e8893920d709752512833d3b62c91d366a5e", "committedDate": "2020-02-26T16:47:16Z", "message": "findbugs and checkstyle issues, review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc6954dbd4d01a922a5b7d60f17ea2e1b06e9d42", "author": {"user": null}, "url": "https://github.com/apache/ozone/commit/dc6954dbd4d01a922a5b7d60f17ea2e1b06e9d42", "committedDate": "2020-02-26T16:47:16Z", "message": "findbugs null ptr. object id during key create"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "953122cc6e9b1a85f2149adae22fda1be4475945", "author": {"user": null}, "url": "https://github.com/apache/ozone/commit/953122cc6e9b1a85f2149adae22fda1be4475945", "committedDate": "2020-02-26T16:47:16Z", "message": "addressed review comments. fixed failure in acceptance test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c560f9c77d6958f3a8c9533d69e62077953b9f4", "author": {"user": null}, "url": "https://github.com/apache/ozone/commit/7c560f9c77d6958f3a8c9533d69e62077953b9f4", "committedDate": "2020-02-26T16:47:16Z", "message": "fixed checkstyle, findbugs and unit test fails"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62c0713d73f50ae9fa29416d2e244f2b40548754", "author": {"user": null}, "url": "https://github.com/apache/ozone/commit/62c0713d73f50ae9fa29416d2e244f2b40548754", "committedDate": "2020-02-26T16:47:16Z", "message": "fixed unit test failure for Volume create, excluded internal config param from ozone-default"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d61d7dbee348b8b1d2e18f8c3309c08b15d7403b", "author": {"user": null}, "url": "https://github.com/apache/ozone/commit/d61d7dbee348b8b1d2e18f8c3309c08b15d7403b", "committedDate": "2020-02-26T16:47:16Z", "message": "checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aae01d8316584699fac0fc9ef8d8284ae5791d4e", "author": {"user": null}, "url": "https://github.com/apache/ozone/commit/aae01d8316584699fac0fc9ef8d8284ae5791d4e", "committedDate": "2020-02-26T16:47:16Z", "message": "addressed review comments. test checks key table directly."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a82e703590d8e2a3df9c840ba389691450b67e3e", "author": {"user": null}, "url": "https://github.com/apache/ozone/commit/a82e703590d8e2a3df9c840ba389691450b67e3e", "committedDate": "2020-02-26T16:47:16Z", "message": "review comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56200628a433ccd60d6e7d6dbb314b235a9219c6", "author": {"user": null}, "url": "https://github.com/apache/ozone/commit/56200628a433ccd60d6e7d6dbb314b235a9219c6", "committedDate": "2020-02-26T16:47:16Z", "message": "undo findbugs related code movement in OzoneManager to fix acceptance failure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2532570603dcf852e8ed20a3ac4a40d9ead13cb", "author": {"user": null}, "url": "https://github.com/apache/ozone/commit/f2532570603dcf852e8ed20a3ac4a40d9ead13cb", "committedDate": "2020-02-26T16:47:16Z", "message": "fixed acceptance failure, default ACL issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec1ec28d7733f7cb76df8be8d37a11b74a630302", "author": {"user": null}, "url": "https://github.com/apache/ozone/commit/ec1ec28d7733f7cb76df8be8d37a11b74a630302", "committedDate": "2020-02-26T17:04:53Z", "message": "checkstyle and findbugs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ea6b4aa524cd68c16f62a8ee4a873853429ad396", "author": {"user": null}, "url": "https://github.com/apache/ozone/commit/ea6b4aa524cd68c16f62a8ee4a873853429ad396", "committedDate": "2020-02-26T16:40:14Z", "message": "fixed acceptance failure, default ACL issue"}, "afterCommit": {"oid": "ec1ec28d7733f7cb76df8be8d37a11b74a630302", "author": {"user": null}, "url": "https://github.com/apache/ozone/commit/ec1ec28d7733f7cb76df8be8d37a11b74a630302", "committedDate": "2020-02-26T17:04:53Z", "message": "checkstyle and findbugs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NDAxNjI0", "url": "https://github.com/apache/ozone/pull/498#pullrequestreview-365401624", "createdAt": "2020-02-27T04:00:17Z", "commit": {"oid": "ec1ec28d7733f7cb76df8be8d37a11b74a630302"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3771, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}