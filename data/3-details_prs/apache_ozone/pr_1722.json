{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyMTY4ODY3", "number": 1722, "title": "HDDS-4600. SCM HA Config Phase 1: Use SCMNodeDetails as the entry to initialize SCM except for Ratis servers", "bodyText": "What changes were proposed in this pull request?\nStart to use SCMNodeDetails as the entry to retrieve address configs for servers (except Ratis server). Currently will load default config for servers.\nDesign doc: https://docs.google.com/document/d/1Q_ofDnvYYUGMQfZqdiUs5BMGQAy0YDuaM5AYuG8Ub6o/edit?usp=sharing\nWhat is the link to the Apache JIRA\nhttps://issues.apache.org/jira/browse/HDDS-4600\nHow was this patch tested?\nUT", "createdAt": "2020-12-17T22:20:45Z", "url": "https://github.com/apache/ozone/pull/1722", "merged": true, "mergeCommit": {"oid": "d402f217dd9a34a2d7824c5a60c3d0762b6c3b48"}, "closed": true, "closedAt": "2021-02-09T07:27:48Z", "author": {"login": "amaliujia"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdnofAUgFqTU1NTkyNjkwNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABd4VfKHAFqTU4NjIwMjA0Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1OTI2OTA2", "url": "https://github.com/apache/ozone/pull/1722#pullrequestreview-555926906", "createdAt": "2020-12-19T08:30:20Z", "commit": {"oid": "2c4c2dbdd2a99f61307dea3793cd89d5f529fddd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwODozMDoyMVrOII6Etg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwODozMDoyMVrOII6Etg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMDk5OA==", "bodyText": "Currently SCMNodeDetails will always be built from default configuration to pass existing UT.\nThe HA configuration is left to be used by MiniOzoneHACluster.", "url": "https://github.com/apache/ozone/pull/1722#discussion_r546210998", "createdAt": "2020-12-19T08:30:21Z", "author": {"login": "amaliujia"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMNodeDetails.java", "diffHunk": "@@ -173,9 +261,145 @@ public static SCMNodeDetails initStandAlone(\n     SCMNodeDetails scmNodeDetails = new SCMNodeDetails.Builder()\n         .setRatisPort(ratisPort)\n         .setRpcAddress(rpcAddress)\n-        .setSCMNodeId(localSCMNodeId)\n-        .setSCMServiceId(localSCMServiceId)\n+        .setDatanodeProtocolServerAddress(\n+            HddsServerUtil.getScmDataNodeBindAddress(conf))\n+        .setDatanodeAddressKey(OZONE_SCM_DATANODE_ADDRESS_KEY)\n+        .setBlockProtocolServerAddress(\n+            HddsServerUtil.getScmBlockClientBindAddress(conf))\n+        .setBlockProtocolServerAddressKey(\n+            ScmConfigKeys.OZONE_SCM_BLOCK_CLIENT_ADDRESS_KEY)\n+        .setClientProtocolServerAddress(\n+            HddsServerUtil.getScmClientBindAddress(conf))\n+        .setClientProtocolServerAddressKey(\n+            ScmConfigKeys.OZONE_SCM_CLIENT_ADDRESS_KEY)\n         .build();\n     return scmNodeDetails;\n   }\n+\n+  public static SCMNodeDetails loadSCMHAConfig(\n+      OzoneConfiguration conf) throws IOException {\n+    SCMNodeDetails.Builder builder = new Builder();\n+\n+    String localScmServiceId = null;\n+    String localScmNodeId = null;\n+\n+    Collection<String> scmServiceIds;\n+\n+    localScmServiceId = conf.getTrimmed(\n+        ScmConfigKeys.OZONE_SCM_INTERNAL_SERVICE_ID);\n+\n+    LOG.info(\"ServiceID for StorageContainerManager is {}\", localScmServiceId);\n+\n+    if (localScmServiceId == null) {\n+      // There is no internal scm service id is being set, fall back to ozone\n+      // .scm.service.ids.\n+      LOG.info(\"{} is not defined, falling back to {} to find serviceID for \"\n+              + \"StorageContainerManager if it is HA enabled cluster\",\n+          OZONE_SCM_INTERNAL_SERVICE_ID, OZONE_SCM_SERVICE_IDS_KEY);\n+      scmServiceIds = conf.getTrimmedStringCollection(\n+          OZONE_SCM_SERVICE_IDS_KEY);\n+    } else {\n+      LOG.info(\"ServiceID for StorageContainerManager is {}\",\n+          localScmServiceId);\n+      builder.setSCMServiceId(localScmServiceId);\n+      scmServiceIds = Collections.singleton(localScmServiceId);\n+    }\n+\n+    localScmNodeId = conf.get(ScmConfigKeys.OZONE_SCM_NODE_ID_KEY);\n+    boolean isScmHAConfigSet = false;\n+    for (String serviceId : scmServiceIds) {\n+      Collection<String> scmNodeIds = ScmUtils.getSCMNodeIds(conf, serviceId);\n+\n+      if (scmNodeIds.size() == 0) {\n+        throw new IllegalArgumentException(\n+            String.format(\"Configuration does not have any value set for %s \" +\n+            \"for the service %s. List of OM Node ID's should be specified \" +\n+            \"for an OM service\", ScmConfigKeys.OZONE_SCM_NODES_KEY, serviceId));\n+      }\n+      // TODO: load Ratis peers configuration\n+      isScmHAConfigSet = true;\n+    }\n+\n+    if (!isScmHAConfigSet) {\n+      // If HA config is not set properly, fall back to default configuration\n+      return loadDefaultConfig(conf);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c4c2dbdd2a99f61307dea3793cd89d5f529fddd"}, "originalPosition": 290}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2NzI2MTU1", "url": "https://github.com/apache/ozone/pull/1722#pullrequestreview-556726155", "createdAt": "2020-12-21T23:26:58Z", "commit": {"oid": "2c4c2dbdd2a99f61307dea3793cd89d5f529fddd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMzoyNjo1OFrOIJpKgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMzoyNjo1OFrOIJpKgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk4MjUzMQ==", "bodyText": "I haven't written test case for this. Want to wait for some feedback before I continue improving this PR.", "url": "https://github.com/apache/ozone/pull/1722#discussion_r546982531", "createdAt": "2020-12-21T23:26:58Z", "author": {"login": "amaliujia"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMNodeDetails.java", "diffHunk": "@@ -173,9 +261,145 @@ public static SCMNodeDetails initStandAlone(\n     SCMNodeDetails scmNodeDetails = new SCMNodeDetails.Builder()\n         .setRatisPort(ratisPort)\n         .setRpcAddress(rpcAddress)\n-        .setSCMNodeId(localSCMNodeId)\n-        .setSCMServiceId(localSCMServiceId)\n+        .setDatanodeProtocolServerAddress(\n+            HddsServerUtil.getScmDataNodeBindAddress(conf))\n+        .setDatanodeAddressKey(OZONE_SCM_DATANODE_ADDRESS_KEY)\n+        .setBlockProtocolServerAddress(\n+            HddsServerUtil.getScmBlockClientBindAddress(conf))\n+        .setBlockProtocolServerAddressKey(\n+            ScmConfigKeys.OZONE_SCM_BLOCK_CLIENT_ADDRESS_KEY)\n+        .setClientProtocolServerAddress(\n+            HddsServerUtil.getScmClientBindAddress(conf))\n+        .setClientProtocolServerAddressKey(\n+            ScmConfigKeys.OZONE_SCM_CLIENT_ADDRESS_KEY)\n         .build();\n     return scmNodeDetails;\n   }\n+\n+  public static SCMNodeDetails loadSCMHAConfig(\n+      OzoneConfiguration conf) throws IOException {\n+    SCMNodeDetails.Builder builder = new Builder();\n+\n+    String localScmServiceId = null;\n+    String localScmNodeId = null;\n+\n+    Collection<String> scmServiceIds;\n+\n+    localScmServiceId = conf.getTrimmed(\n+        ScmConfigKeys.OZONE_SCM_INTERNAL_SERVICE_ID);\n+\n+    LOG.info(\"ServiceID for StorageContainerManager is {}\", localScmServiceId);\n+\n+    if (localScmServiceId == null) {\n+      // There is no internal scm service id is being set, fall back to ozone\n+      // .scm.service.ids.\n+      LOG.info(\"{} is not defined, falling back to {} to find serviceID for \"\n+              + \"StorageContainerManager if it is HA enabled cluster\",\n+          OZONE_SCM_INTERNAL_SERVICE_ID, OZONE_SCM_SERVICE_IDS_KEY);\n+      scmServiceIds = conf.getTrimmedStringCollection(\n+          OZONE_SCM_SERVICE_IDS_KEY);\n+    } else {\n+      LOG.info(\"ServiceID for StorageContainerManager is {}\",\n+          localScmServiceId);\n+      builder.setSCMServiceId(localScmServiceId);\n+      scmServiceIds = Collections.singleton(localScmServiceId);\n+    }\n+\n+    localScmNodeId = conf.get(ScmConfigKeys.OZONE_SCM_NODE_ID_KEY);\n+    boolean isScmHAConfigSet = false;\n+    for (String serviceId : scmServiceIds) {\n+      Collection<String> scmNodeIds = ScmUtils.getSCMNodeIds(conf, serviceId);\n+\n+      if (scmNodeIds.size() == 0) {\n+        throw new IllegalArgumentException(\n+            String.format(\"Configuration does not have any value set for %s \" +\n+            \"for the service %s. List of OM Node ID's should be specified \" +\n+            \"for an OM service\", ScmConfigKeys.OZONE_SCM_NODES_KEY, serviceId));\n+      }\n+      // TODO: load Ratis peers configuration\n+      isScmHAConfigSet = true;\n+    }\n+\n+    if (!isScmHAConfigSet) {\n+      // If HA config is not set properly, fall back to default configuration\n+      return loadDefaultConfig(conf);\n+    }\n+\n+    builder\n+        .setBlockProtocolServerAddress(getScmBlockProtocolServerAddress(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c4c2dbdd2a99f61307dea3793cd89d5f529fddd"}, "originalPosition": 294}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2c4c2dbdd2a99f61307dea3793cd89d5f529fddd", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/ozone/commit/2c4c2dbdd2a99f61307dea3793cd89d5f529fddd", "committedDate": "2020-12-18T04:56:23Z", "message": "trigger new CI check"}, "afterCommit": {"oid": "721047cb8eb2c876817e143514b0660de0122e3e", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/ozone/commit/721047cb8eb2c876817e143514b0660de0122e3e", "committedDate": "2021-01-27T05:27:16Z", "message": "trigger new CI check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "721047cb8eb2c876817e143514b0660de0122e3e", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/ozone/commit/721047cb8eb2c876817e143514b0660de0122e3e", "committedDate": "2021-01-27T05:27:16Z", "message": "trigger new CI check"}, "afterCommit": {"oid": "e0e8af4d34b89ebed514e5a1071a4038623e626f", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/ozone/commit/e0e8af4d34b89ebed514e5a1071a4038623e626f", "committedDate": "2021-01-27T05:38:30Z", "message": "HDDS-4600. Use OM style Configuration to initialize SCM HA"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e0e8af4d34b89ebed514e5a1071a4038623e626f", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/ozone/commit/e0e8af4d34b89ebed514e5a1071a4038623e626f", "committedDate": "2021-01-27T05:38:30Z", "message": "HDDS-4600. Use OM style Configuration to initialize SCM HA"}, "afterCommit": {"oid": "db37de6d992fde1f7b0000d56e415f8be27a14ed", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/ozone/commit/db37de6d992fde1f7b0000d56e415f8be27a14ed", "committedDate": "2021-02-02T21:29:53Z", "message": "HDDS-4600. Add OM style Configuration to initialize SCM HA"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg0MDIwMTQy", "url": "https://github.com/apache/ozone/pull/1722#pullrequestreview-584020142", "createdAt": "2021-02-05T04:49:09Z", "commit": {"oid": "fa96d5b04f6bea2a34071effe789c071ef984125"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQwNDo0OTowOVrOIgR5FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQwNDo0OTowOVrOIgR5FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDcxODQ4NA==", "bodyText": "It is wired to me that my local checkstyle contains when there is no version in here.", "url": "https://github.com/apache/ozone/pull/1722#discussion_r570718484", "createdAt": "2021-02-05T04:49:09Z", "author": {"login": "amaliujia"}, "path": "hadoop-hdds/server-scm/pom.xml", "diffHunk": "@@ -48,6 +48,11 @@ https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n       <groupId>org.apache.hadoop</groupId>\n       <artifactId>hadoop-hdds-client</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apache.hadoop</groupId>\n+      <artifactId>hadoop-ozone-common</artifactId>\n+      <version>1.1.0-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa96d5b04f6bea2a34071effe789c071ef984125"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg0MjE4Mjcx", "url": "https://github.com/apache/ozone/pull/1722#pullrequestreview-584218271", "createdAt": "2021-02-05T10:40:40Z", "commit": {"oid": "231021c96d2b56ce3e61b1f680e656417e2a5da6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxMDo0MDo0MFrOIgbj6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxMDo0NToxOVrOIgbtpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDg3NjkwNg==", "bodyText": "Can we move this to NodeDetails class itself?", "url": "https://github.com/apache/ozone/pull/1722#discussion_r570876906", "createdAt": "2021-02-05T10:40:40Z", "author": {"login": "bshashikant"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ha/SCMNodeDetails.java", "diffHunk": "@@ -17,59 +17,61 @@\n \n package org.apache.hadoop.hdds.scm.ha;\n \n-import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n-import org.apache.hadoop.hdds.scm.ScmConfigKeys;\n import org.apache.hadoop.net.NetUtils;\n+import org.apache.hadoop.ozone.ha.NodeDetails;\n+import org.apache.ratis.protocol.RaftGroup;\n+import org.apache.ratis.protocol.RaftPeerId;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import java.io.IOException;\n-import java.net.InetAddress;\n import java.net.InetSocketAddress;\n \n-import static org.apache.hadoop.hdds.scm.ScmConfigKeys.OZONE_SCM_INTERNAL_SERVICE_ID;\n-import static org.apache.hadoop.hdds.scm.ScmConfigKeys.OZONE_SCM_SERVICE_IDS_KEY;\n-\n /**\n  * Construct SCM node details.\n  */\n-public final class SCMNodeDetails {\n-  private String scmServiceId;\n-  private String scmNodeId;\n-  private InetSocketAddress rpcAddress;\n-  private int rpcPort;\n-  private int ratisPort;\n-  private String httpAddress;\n-  private String httpsAddress;\n+public final class SCMNodeDetails extends NodeDetails {\n+  private InetSocketAddress blockProtocolServerAddress;\n+  private String blockProtocolServerAddressKey;\n+  private InetSocketAddress clientProtocolServerAddress;\n+  private String clientProtocolServerAddressKey;\n+  private InetSocketAddress datanodeProtocolServerAddress;\n+  private String datanodeAddressKey;\n \n   public static final Logger LOG =\n       LoggerFactory.getLogger(SCMNodeDetails.class);\n \n   /**\n    * Constructs SCMNodeDetails object.\n    */\n+  @SuppressWarnings(\"checkstyle:ParameterNumber\")\n   private SCMNodeDetails(String serviceId, String nodeId,\n-                        InetSocketAddress rpcAddr, int rpcPort, int ratisPort,\n-                        String httpAddress, String httpsAddress) {\n-    this.scmServiceId = serviceId;\n-    this.scmNodeId = nodeId;\n-    this.rpcAddress = rpcAddr;\n-    this.rpcPort = rpcPort;\n-    this.ratisPort = ratisPort;\n-    this.httpAddress = httpAddress;\n-    this.httpsAddress = httpsAddress;\n+      InetSocketAddress rpcAddr, int ratisPort, String httpAddress,\n+      String httpsAddress, InetSocketAddress blockProtocolServerAddress,\n+      InetSocketAddress clientProtocolServerAddress,\n+      InetSocketAddress datanodeProtocolServerAddress,\n+      RaftGroup group, RaftPeerId selfPeerId, String datanodeAddressKey,\n+      String blockProtocolServerAddressKey,\n+      String clientProtocolServerAddressAddressKey) {\n+    super(serviceId, nodeId, rpcAddr, ratisPort,\n+        httpAddress, httpsAddress);\n+    this.blockProtocolServerAddress = blockProtocolServerAddress;\n+    this.clientProtocolServerAddress = clientProtocolServerAddress;\n+    this.datanodeProtocolServerAddress = datanodeProtocolServerAddress;\n+    this.datanodeAddressKey = datanodeAddressKey;\n+    this.blockProtocolServerAddressKey = blockProtocolServerAddressKey;\n+    this.clientProtocolServerAddressKey = clientProtocolServerAddressAddressKey;\n   }\n \n   @Override\n   public String toString() {\n+    // TODO: add new fields to toString", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "231021c96d2b56ce3e61b1f680e656417e2a5da6"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDg3OTM5Nw==", "bodyText": "These functions can be moved to a utility and used by both OM and SCM as required. Nothing seems specific ti SCM here.", "url": "https://github.com/apache/ozone/pull/1722#discussion_r570879397", "createdAt": "2021-02-05T10:45:19Z", "author": {"login": "bshashikant"}, "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/ScmUtils.java", "diffHunk": "@@ -60,4 +71,111 @@ public static File createSCMDir(String dirPath) {\n     }\n     return dirFile;\n   }\n+\n+  public static Collection<String> getSCMNodeIds(ConfigurationSource conf,\n+      String scmServiceId) {\n+    String key = addSuffix(ScmConfigKeys.OZONE_SCM_NODES_KEY, scmServiceId);\n+    return conf.getTrimmedStringCollection(key);\n+  }\n+\n+  public static InetSocketAddress getScmBlockProtocolServerAddress(\n+      OzoneConfiguration conf, String localScmServiceId, String nodeId) {\n+    String bindHostKey = ScmUtils.addKeySuffixes(\n+        ScmConfigKeys.OZONE_SCM_BLOCK_CLIENT_BIND_HOST_KEY,\n+        localScmServiceId, nodeId);\n+    final Optional<String> host = getHostNameFromConfigKeys(conf, bindHostKey);\n+\n+    String addressKey = ScmUtils.addKeySuffixes(\n+        ScmConfigKeys.OZONE_SCM_BLOCK_CLIENT_ADDRESS_KEY,\n+        localScmServiceId, nodeId);\n+    final OptionalInt port = getPortNumberFromConfigKeys(conf, addressKey);\n+\n+    return NetUtils.createSocketAddr(\n+        host.orElse(\n+            ScmConfigKeys.OZONE_SCM_BLOCK_CLIENT_BIND_HOST_DEFAULT) + \":\" +\n+            port.orElse(ScmConfigKeys.OZONE_SCM_BLOCK_CLIENT_PORT_DEFAULT));\n+  }\n+\n+  public static String getScmBlockProtocolServerAddressKey(\n+      String serviceId, String nodeId) {\n+    return ScmUtils.addKeySuffixes(\n+        ScmConfigKeys.OZONE_SCM_BLOCK_CLIENT_ADDRESS_KEY,\n+        serviceId, nodeId);\n+  }\n+\n+  public static InetSocketAddress getClientProtocolServerAddress(\n+      OzoneConfiguration conf, String localScmServiceId, String nodeId) {\n+    String bindHostKey = ScmUtils.addKeySuffixes(\n+        ScmConfigKeys.OZONE_SCM_CLIENT_BIND_HOST_KEY,\n+        localScmServiceId, nodeId);\n+\n+    final String host = getHostNameFromConfigKeys(conf, bindHostKey)\n+        .orElse(ScmConfigKeys.OZONE_SCM_CLIENT_BIND_HOST_DEFAULT);\n+\n+    String addressKey = ScmUtils.addKeySuffixes(\n+        ScmConfigKeys.OZONE_SCM_CLIENT_ADDRESS_KEY,\n+        localScmServiceId, nodeId);\n+\n+    final int port = getPortNumberFromConfigKeys(conf, addressKey)\n+        .orElse(ScmConfigKeys.OZONE_SCM_CLIENT_PORT_DEFAULT);\n+\n+    return NetUtils.createSocketAddr(host + \":\" + port);\n+  }\n+\n+  public static String getClientProtocolServerAddressKey(\n+      String serviceId, String nodeId) {\n+    return ScmUtils.addKeySuffixes(\n+        ScmConfigKeys.OZONE_SCM_CLIENT_ADDRESS_KEY,\n+        serviceId, nodeId);\n+  }\n+\n+  public static InetSocketAddress getScmDataNodeBindAddress(\n+      ConfigurationSource conf, String localScmServiceId, String nodeId) {\n+    String bindHostKey = ScmUtils.addKeySuffixes(\n+        ScmConfigKeys.OZONE_SCM_DATANODE_BIND_HOST_KEY,\n+        localScmServiceId, nodeId\n+    );\n+    final Optional<String> host = getHostNameFromConfigKeys(conf, bindHostKey);\n+    String addressKey = ScmUtils.addKeySuffixes(\n+        ScmConfigKeys.OZONE_SCM_DATANODE_ADDRESS_KEY,\n+        localScmServiceId, nodeId\n+    );\n+    final OptionalInt port = getPortNumberFromConfigKeys(conf, addressKey);\n+\n+    return NetUtils.createSocketAddr(\n+        host.orElse(ScmConfigKeys.OZONE_SCM_DATANODE_BIND_HOST_DEFAULT) + \":\" +\n+            port.orElse(ScmConfigKeys.OZONE_SCM_DATANODE_PORT_DEFAULT));\n+  }\n+\n+  public static String getScmDataNodeBindAddressKey(\n+      String serviceId, String nodeId) {\n+    return ScmUtils.addKeySuffixes(\n+        ScmConfigKeys.OZONE_SCM_DATANODE_ADDRESS_KEY,\n+        serviceId, nodeId);\n+  }\n+\n+  private static String addSuffix(String key, String suffix) {\n+    if (suffix == null || suffix.isEmpty()) {\n+      return key;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "231021c96d2b56ce3e61b1f680e656417e2a5da6"}, "originalPosition": 116}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "231021c96d2b56ce3e61b1f680e656417e2a5da6", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/ozone/commit/231021c96d2b56ce3e61b1f680e656417e2a5da6", "committedDate": "2021-02-05T06:49:39Z", "message": "fixup! remove comments"}, "afterCommit": {"oid": "bbcadaa4bf7ab888d8a6c18c357d92b4e45d250b", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/ozone/commit/bbcadaa4bf7ab888d8a6c18c357d92b4e45d250b", "committedDate": "2021-02-06T07:31:08Z", "message": "fixup! address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b9580a6bbf0cf98f974c20cbc9b56662ff7c6c3", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/ozone/commit/1b9580a6bbf0cf98f974c20cbc9b56662ff7c6c3", "committedDate": "2021-02-08T21:19:44Z", "message": "HDDS-4600. Add OM style Configuration to initialize SCM HA"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8624b312042379052efa9249f8c820922fe6bab", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/ozone/commit/a8624b312042379052efa9249f8c820922fe6bab", "committedDate": "2021-02-08T21:19:44Z", "message": "refacotering"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c352cf71493c3eb1c6988e1a0c607e288f3c1003", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/ozone/commit/c352cf71493c3eb1c6988e1a0c607e288f3c1003", "committedDate": "2021-02-08T21:19:44Z", "message": "fixup! remove comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de0e4bf37d705ab351eef7293e57a467d9cfa837", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/ozone/commit/de0e4bf37d705ab351eef7293e57a467d9cfa837", "committedDate": "2021-02-08T21:19:44Z", "message": "fixup! remove comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7dcca87e40f420b316ca3a5b80b3874213286333", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/ozone/commit/7dcca87e40f420b316ca3a5b80b3874213286333", "committedDate": "2021-02-08T21:19:44Z", "message": "fixup! address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66a749ed98a61d948574cfdcb7b592d271383f3b", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/ozone/commit/66a749ed98a61d948574cfdcb7b592d271383f3b", "committedDate": "2021-02-08T21:19:44Z", "message": "fixup! fix pom"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bf3d9fa5a20f125116ddc92df153cf3e917be51", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/ozone/commit/2bf3d9fa5a20f125116ddc92df153cf3e917be51", "committedDate": "2021-02-08T21:19:44Z", "message": "fxiup! fix compile"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aa66b1eae2e9657e0a91c5c7638468a82274bc38", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/ozone/commit/aa66b1eae2e9657e0a91c5c7638468a82274bc38", "committedDate": "2021-02-06T21:20:38Z", "message": "fxiup! fix compile"}, "afterCommit": {"oid": "2bf3d9fa5a20f125116ddc92df153cf3e917be51", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/ozone/commit/2bf3d9fa5a20f125116ddc92df153cf3e917be51", "committedDate": "2021-02-08T21:19:44Z", "message": "fxiup! fix compile"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80464dac9b3ab601834e3109fd2848452709f38d", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/ozone/commit/80464dac9b3ab601834e3109fd2848452709f38d", "committedDate": "2021-02-08T23:38:02Z", "message": "fixup! fix tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg2MjAyMDQy", "url": "https://github.com/apache/ozone/pull/1722#pullrequestreview-586202042", "createdAt": "2021-02-09T05:56:30Z", "commit": {"oid": "80464dac9b3ab601834e3109fd2848452709f38d"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQwNTo1NjozMFrOIiFghQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQwNTo1NjozMFrOIiFghQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjYxMjc0MQ==", "bodyText": "is there any specific reason to maintain rpc port specifically in OMNodeDetails? I guess, it can be common for both SCM and OM and we can maintain it in NodeDetails itself.", "url": "https://github.com/apache/ozone/pull/1722#discussion_r572612741", "createdAt": "2021-02-09T05:56:30Z", "author": {"login": "bshashikant"}, "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ha/OMNodeDetails.java", "diffHunk": "@@ -31,43 +30,36 @@\n /**\n  * This class stores OM node details.\n  */\n-public final class OMNodeDetails {\n-  private String omServiceId;\n-  private String omNodeId;\n-  private InetSocketAddress rpcAddress;\n+public final class OMNodeDetails extends NodeDetails {\n   private int rpcPort;\n-  private int ratisPort;\n-  private String httpAddress;\n-  private String httpsAddress;\n \n   /**\n    * Constructs OMNodeDetails object.\n    */\n   private OMNodeDetails(String serviceId, String nodeId,\n       InetSocketAddress rpcAddr, int rpcPort, int ratisPort,\n       String httpAddress, String httpsAddress) {\n-    this.omServiceId = serviceId;\n-    this.omNodeId = nodeId;\n-    this.rpcAddress = rpcAddr;\n+    super(serviceId, nodeId, rpcAddr, ratisPort, httpAddress, httpsAddress);\n     this.rpcPort = rpcPort;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80464dac9b3ab601834e3109fd2848452709f38d"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1880, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}