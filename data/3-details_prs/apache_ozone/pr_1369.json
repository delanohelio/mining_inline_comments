{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2NzM0ODY0", "number": 1369, "title": "HDDS-4104. Provide a way to get the default value and key of java-based-configuration easily", "bodyText": "What changes were proposed in this pull request?\nProvide a way to get the default value and key of java-based-configuration easily.\nWhat is the link to the Apache JIRA\nHDDS-4104\nHow was this patch tested?\nThis PR with the related unit tests.", "createdAt": "2020-09-01T00:37:52Z", "url": "https://github.com/apache/ozone/pull/1369", "merged": true, "mergeCommit": {"oid": "079ee7fc2a223e1251b16b9c42004aa2a27bf0f4"}, "closed": true, "closedAt": "2020-09-17T09:25:03Z", "author": {"login": "maobaolong"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdEcawdAH2gAyNDc2NzM0ODY0OjFmYzAwYTNlNjMwYzJjMmQxNjBmYTY0NTlmNTVmMTllODVmYTMyN2M=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdFWV0aAH2gAyNDc2NzM0ODY0OmRjMjEwZjVlNzJlZmFmNWU1MzNkODk5MmI1Mzk3OTAxZGUyNGFmNDY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1fc00a3e630c2c2d160fa6459f55f19e85fa327c", "author": {"user": {"login": "maobaolong", "name": "maobaolong"}}, "url": "https://github.com/apache/ozone/commit/1fc00a3e630c2c2d160fa6459f55f19e85fa327c", "committedDate": "2020-09-01T00:39:30Z", "message": "HDDS-4104. Provide a way to get the default value and key of java-based-configuration easily"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5NTMzNjk4", "url": "https://github.com/apache/ozone/pull/1369#pullrequestreview-479533698", "createdAt": "2020-09-01T08:55:21Z", "commit": {"oid": "1fc00a3e630c2c2d160fa6459f55f19e85fa327c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwODo1ODowOFrOHKszbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOToxMDoyN1rOHKtPuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4MTg3MA==", "bodyText": "Can you please also add test cases for:\n\n\"field from parent class\" (eg. ConfigurationExample.class, \"secure\"),\n\"non-existent field\" (eg. ConfigurationExample.class, \"no-such-field\"), and\n\"field without @Config annotation\" (eg. ConfigFileAppender.class, \"document\")?", "url": "https://github.com/apache/ozone/pull/1369#discussion_r480981870", "createdAt": "2020-09-01T08:58:08Z", "author": {"login": "adoroszlai"}, "path": "hadoop-hdds/config/src/test/java/org/apache/hadoop/hdds/conf/TestConfigurationReflectionUtil.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hdds.conf;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Test the configuration reflection utility class.\n+ */\n+public class TestConfigurationReflectionUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fc00a3e630c2c2d160fa6459f55f19e85fa327c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4NDI0Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Assert.assertTrue(actualKey.isPresent());\n          \n          \n            \n                Assert.assertTrue(actualDefaultValue.isPresent());", "url": "https://github.com/apache/ozone/pull/1369#discussion_r480984246", "createdAt": "2020-09-01T09:02:03Z", "author": {"login": "adoroszlai"}, "path": "hadoop-hdds/config/src/test/java/org/apache/hadoop/hdds/conf/TestConfigurationReflectionUtil.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hdds.conf;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Test the configuration reflection utility class.\n+ */\n+public class TestConfigurationReflectionUtil {\n+\n+  @Test\n+  public void testClassWithConfigGroup() {\n+    Optional<ConfigType> actualType =\n+        ConfigurationReflectionUtil.getType(\n+            ConfigurationExample.class, \"waitTime\");\n+    Assert.assertTrue(actualType.isPresent());\n+    Assert.assertEquals(ConfigType.TIME, actualType.get());\n+\n+    Optional<String> actualKey =\n+        ConfigurationReflectionUtil.getKey(\n+        ConfigurationExample.class, \"waitTime\");\n+    Assert.assertTrue(actualKey.isPresent());\n+    Assert.assertEquals(\"ozone.scm.client.wait\", actualKey.get());\n+\n+    Optional<String> actualDefaultValue =\n+        ConfigurationReflectionUtil.getDefaultValue(\n+            ConfigurationExample.class, \"waitTime\");\n+    Assert.assertTrue(actualKey.isPresent());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fc00a3e630c2c2d160fa6459f55f19e85fa327c"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4NDMyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Assert.assertTrue(actualKey.isPresent());\n          \n          \n            \n                Assert.assertTrue(actualDefaultValue.isPresent());", "url": "https://github.com/apache/ozone/pull/1369#discussion_r480984328", "createdAt": "2020-09-01T09:02:11Z", "author": {"login": "adoroszlai"}, "path": "hadoop-hdds/config/src/test/java/org/apache/hadoop/hdds/conf/TestConfigurationReflectionUtil.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hdds.conf;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Test the configuration reflection utility class.\n+ */\n+public class TestConfigurationReflectionUtil {\n+\n+  @Test\n+  public void testClassWithConfigGroup() {\n+    Optional<ConfigType> actualType =\n+        ConfigurationReflectionUtil.getType(\n+            ConfigurationExample.class, \"waitTime\");\n+    Assert.assertTrue(actualType.isPresent());\n+    Assert.assertEquals(ConfigType.TIME, actualType.get());\n+\n+    Optional<String> actualKey =\n+        ConfigurationReflectionUtil.getKey(\n+        ConfigurationExample.class, \"waitTime\");\n+    Assert.assertTrue(actualKey.isPresent());\n+    Assert.assertEquals(\"ozone.scm.client.wait\", actualKey.get());\n+\n+    Optional<String> actualDefaultValue =\n+        ConfigurationReflectionUtil.getDefaultValue(\n+            ConfigurationExample.class, \"waitTime\");\n+    Assert.assertTrue(actualKey.isPresent());\n+    Assert.assertEquals(\"30m\", actualDefaultValue.get());\n+  }\n+\n+  @Test\n+  public void testClassWithoutConfigGroup() {\n+    Optional<ConfigType> actualType =\n+        ConfigurationReflectionUtil.getType(\n+            ConfigurationExampleGrandParent.class, \"number\");\n+    Assert.assertTrue(actualType.isPresent());\n+    Assert.assertEquals(ConfigType.AUTO, actualType.get());\n+\n+    Optional<String> actualKey =\n+        ConfigurationReflectionUtil.getKey(\n+            ConfigurationExampleGrandParent.class, \"number\");\n+    Assert.assertTrue(actualKey.isPresent());\n+    Assert.assertEquals(\"number\", actualKey.get());\n+\n+    Optional<String> actualDefaultValue =\n+        ConfigurationReflectionUtil.getDefaultValue(\n+            ConfigurationExampleGrandParent.class, \"number\");\n+    Assert.assertTrue(actualKey.isPresent());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fc00a3e630c2c2d160fa6459f55f19e85fa327c"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4OTExNQ==", "bodyText": "findFieldConfigAnnotationByName could return Optional<Config> instead of Config or null:\n        .findFirst()\n        .map(field -> field.getAnnotation(Config.class));\nThis would let the other new methods (getType, etc.) to be simplified to:\n    return findFieldConfigAnnotationByName(configClass, fieldName)\n        .map(Config::type);", "url": "https://github.com/apache/ozone/pull/1369#discussion_r480989115", "createdAt": "2020-09-01T09:10:27Z", "author": {"login": "adoroszlai"}, "path": "hadoop-hdds/config/src/main/java/org/apache/hadoop/hdds/conf/ConfigurationReflectionUtil.java", "diffHunk": "@@ -240,4 +242,52 @@ private static ConfigType detectConfigType(Class<?> parameterType,\n       }\n     }\n   }\n+\n+  public static Optional<String> getDefaultValue(Class<?> configClass,\n+      String fieldName) {\n+    Config annotation = findFieldConfigAnnotationByName(configClass,\n+        fieldName);\n+    if (annotation != null) {\n+      return Optional.of(annotation.defaultValue());\n+    }\n+    return Optional.empty();\n+  }\n+\n+  public static Optional<String> getKey(Class<?> configClass,\n+      String fieldName) {\n+    ConfigGroup configGroup =\n+        configClass.getAnnotation(ConfigGroup.class);\n+\n+    Config annotation = findFieldConfigAnnotationByName(configClass,\n+        fieldName);\n+    if (annotation != null) {\n+      String key = annotation.key();\n+      if (configGroup != null) {\n+        key = configGroup.prefix() + \".\" + annotation.key();\n+      }\n+      return Optional.of(key);\n+    }\n+    return Optional.empty();\n+  }\n+\n+  public static Optional<ConfigType> getType(Class<?> configClass,\n+      String fieldName) {\n+    Config config = findFieldConfigAnnotationByName(configClass,\n+        fieldName);\n+    if (config != null) {\n+      return Optional.of(config.type());\n+    }\n+    return Optional.empty();\n+  }\n+\n+  private static Config findFieldConfigAnnotationByName(Class<?> configClass,\n+      String fieldName) {\n+    Optional<Field> field = Stream.of(configClass.getDeclaredFields())\n+        .filter(f -> f.getName().equals(fieldName))\n+        .findFirst();\n+    if (field.isPresent()) {\n+      return field.get().getAnnotation(Config.class);\n+    }\n+    return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fc00a3e630c2c2d160fa6459f55f19e85fa327c"}, "originalPosition": 59}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "747c92510b5052dfdec0559c5977d785d6eb6dc1", "author": {"user": {"login": "maobaolong", "name": "maobaolong"}}, "url": "https://github.com/apache/ozone/commit/747c92510b5052dfdec0559c5977d785d6eb6dc1", "committedDate": "2020-09-02T07:42:04Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Doroszlai, Attila <6454655+adoroszlai@users.noreply.github.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2387bf08153d0fa2da8bc6baa068453d75bff3c8", "author": {"user": {"login": "maobaolong", "name": "maobaolong"}}, "url": "https://github.com/apache/ozone/commit/2387bf08153d0fa2da8bc6baa068453d75bff3c8", "committedDate": "2020-09-02T12:12:23Z", "message": "add tests."}, "afterCommit": {"oid": "ee96c86333c7f0795c83d9366011ff57930c96ca", "author": {"user": {"login": "maobaolong", "name": "maobaolong"}}, "url": "https://github.com/apache/ozone/commit/ee96c86333c7f0795c83d9366011ff57930c96ca", "committedDate": "2020-09-02T16:05:45Z", "message": "add tests."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ee96c86333c7f0795c83d9366011ff57930c96ca", "author": {"user": {"login": "maobaolong", "name": "maobaolong"}}, "url": "https://github.com/apache/ozone/commit/ee96c86333c7f0795c83d9366011ff57930c96ca", "committedDate": "2020-09-02T16:05:45Z", "message": "add tests."}, "afterCommit": {"oid": "ac87b28abb9f093d09e2808c14446790c6cd8251", "author": {"user": {"login": "maobaolong", "name": "maobaolong"}}, "url": "https://github.com/apache/ozone/commit/ac87b28abb9f093d09e2808c14446790c6cd8251", "committedDate": "2020-09-02T16:12:53Z", "message": "add tests."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ac87b28abb9f093d09e2808c14446790c6cd8251", "author": {"user": {"login": "maobaolong", "name": "maobaolong"}}, "url": "https://github.com/apache/ozone/commit/ac87b28abb9f093d09e2808c14446790c6cd8251", "committedDate": "2020-09-02T16:12:53Z", "message": "add tests."}, "afterCommit": {"oid": "957cb5f48564ee512d91f32724bfed6db91221d1", "author": {"user": {"login": "maobaolong", "name": "maobaolong"}}, "url": "https://github.com/apache/ozone/commit/957cb5f48564ee512d91f32724bfed6db91221d1", "committedDate": "2020-09-02T16:23:40Z", "message": "add tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "957cb5f48564ee512d91f32724bfed6db91221d1", "author": {"user": {"login": "maobaolong", "name": "maobaolong"}}, "url": "https://github.com/apache/ozone/commit/957cb5f48564ee512d91f32724bfed6db91221d1", "committedDate": "2020-09-02T16:23:40Z", "message": "add tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67c37ebfaf77aef946752b517086d1451ab7c8cd", "author": {"user": {"login": "maobaolong", "name": "maobaolong"}}, "url": "https://github.com/apache/ozone/commit/67c37ebfaf77aef946752b517086d1451ab7c8cd", "committedDate": "2020-09-02T16:34:52Z", "message": "Fix style"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMDI0MDQ2", "url": "https://github.com/apache/ozone/pull/1369#pullrequestreview-481024046", "createdAt": "2020-09-02T17:03:55Z", "commit": {"oid": "67c37ebfaf77aef946752b517086d1451ab7c8cd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNzowMzo1NVrOHL4unQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNzowMzo1NVrOHL4unQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIyNTgyMQ==", "bodyText": "I think this is unintended change in this PR.", "url": "https://github.com/apache/ozone/pull/1369#discussion_r482225821", "createdAt": "2020-09-02T17:03:55Z", "author": {"login": "adoroszlai"}, "path": "hadoop-ozone/dev-support/intellij/ozone-site.xml", "diffHunk": "@@ -59,12 +59,12 @@\n     <name>hdds.prometheus.endpoint.enabled</name>\n     <value>true</value>\n   </property>\n-  <property>\n-    <name>ozone.recon.address</name>\n-    <value>localhost:9891</value>\n-  </property>\n-  <property>\n-    <name>ozone.recon.db.dir</name>\n-    <value>/tmp/recon</value>\n-  </property>\n+<!--  <property>-->\n+<!--    <name>ozone.recon.address</name>-->\n+<!--    <value>localhost:9891</value>-->\n+<!--  </property>-->\n+<!--  <property>-->\n+<!--    <name>ozone.recon.db.dir</name>-->\n+<!--    <value>/tmp/recon</value>-->\n+<!--  </property>-->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67c37ebfaf77aef946752b517086d1451ab7c8cd"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e409d54ec852aea4399a12626f0c99fbc3a5e36f", "author": {"user": {"login": "maobaolong", "name": "maobaolong"}}, "url": "https://github.com/apache/ozone/commit/e409d54ec852aea4399a12626f0c99fbc3a5e36f", "committedDate": "2020-09-02T23:34:52Z", "message": "revert ozone-site.xml and rename testcase."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNzU4MjMw", "url": "https://github.com/apache/ozone/pull/1369#pullrequestreview-481758230", "createdAt": "2020-09-03T11:47:15Z", "commit": {"oid": "e409d54ec852aea4399a12626f0c99fbc3a5e36f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNzYyOTI3", "url": "https://github.com/apache/ozone/pull/1369#pullrequestreview-481762927", "createdAt": "2020-09-03T11:54:24Z", "commit": {"oid": "e409d54ec852aea4399a12626f0c99fbc3a5e36f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMTo1NDoyNFrOHMjHKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMTo1NDoyNFrOHMjHKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkyMDIzMw==", "bodyText": "The following change makes this method safe to invoke with Object.class directly (current code produces NPE).  It may be unlikely that someone does this, so I think it's OK to commit as is.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (!theClass.getSuperclass().equals(Object.class)) {\n          \n          \n            \n                    theClass = theClass.getSuperclass();\n          \n          \n            \n                  } else {\n          \n          \n            \n                    theClass = null;\n          \n          \n            \n                  }\n          \n          \n            \n                  theClass = theClass.getSuperclass();\n          \n          \n            \n                  if (Object.class.equals(theClass)) {\n          \n          \n            \n                    theClass = null;\n          \n          \n            \n                  }", "url": "https://github.com/apache/ozone/pull/1369#discussion_r482920233", "createdAt": "2020-09-03T11:54:24Z", "author": {"login": "adoroszlai"}, "path": "hadoop-hdds/config/src/main/java/org/apache/hadoop/hdds/conf/ConfigurationReflectionUtil.java", "diffHunk": "@@ -240,4 +242,49 @@ private static ConfigType detectConfigType(Class<?> parameterType,\n       }\n     }\n   }\n+\n+  public static Optional<String> getDefaultValue(Class<?> configClass,\n+      String fieldName) {\n+    return findFieldConfigAnnotationByName(configClass, fieldName)\n+        .map(Config::defaultValue);\n+  }\n+\n+  public static Optional<String> getKey(Class<?> configClass,\n+      String fieldName) {\n+    ConfigGroup configGroup =\n+        configClass.getAnnotation(ConfigGroup.class);\n+\n+    return findFieldConfigAnnotationByName(configClass,\n+        fieldName).map(\n+            config -> configGroup == null ? config.key()\n+                : configGroup.prefix() + \".\" + config.key());\n+  }\n+\n+  public static Optional<ConfigType> getType(Class<?> configClass,\n+      String fieldName) {\n+    return findFieldConfigAnnotationByName(configClass, fieldName)\n+        .map(Config::type);\n+  }\n+\n+  private static Optional<Config> findFieldConfigAnnotationByName(\n+      final Class<?> configClass, String fieldName) {\n+    Class<?> theClass = configClass;\n+    while (theClass != null) {\n+      Optional<Config> config = Stream.of(theClass.getDeclaredFields())\n+          .filter(f -> f.getName().equals(fieldName))\n+          .findFirst()\n+          .map(f -> f.getAnnotation(Config.class));\n+\n+      if (config.isPresent()) {\n+        return config;\n+      }\n+\n+      if (!theClass.getSuperclass().equals(Object.class)) {\n+        theClass = theClass.getSuperclass();\n+      } else {\n+        theClass = null;\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e409d54ec852aea4399a12626f0c99fbc3a5e36f"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a497618d21b7bd95540be4c644d91c327cc82d85", "author": {"user": {"login": "maobaolong", "name": "maobaolong"}}, "url": "https://github.com/apache/ozone/commit/a497618d21b7bd95540be4c644d91c327cc82d85", "committedDate": "2020-09-03T15:59:16Z", "message": "Update hadoop-hdds/config/src/main/java/org/apache/hadoop/hdds/conf/ConfigurationReflectionUtil.java\n\nCo-authored-by: Doroszlai, Attila <6454655+adoroszlai@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc210f5e72efaf5e533d8992b5397901de24af46", "author": {"user": {"login": "adoroszlai", "name": "Doroszlai, Attila"}}, "url": "https://github.com/apache/ozone/commit/dc210f5e72efaf5e533d8992b5397901de24af46", "committedDate": "2020-09-03T20:08:36Z", "message": "trigger new CI check"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2807, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}