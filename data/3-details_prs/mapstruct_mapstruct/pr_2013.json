{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5ODgwMzMz", "number": 2013, "title": "#1308 Switch to JUnit Jupiter and do not use Toolchains for the integration tests", "bodyText": "The CI should be setup to run on different Java versions, for which the integration tests are going to be run\nTravis is currently running Java 8, 11, 13 and EA.\nI'll update to GitHub Actions eventually as well\nFixes #1308", "createdAt": "2020-02-01T10:01:33Z", "url": "https://github.com/mapstruct/mapstruct/pull/2013", "merged": true, "mergeCommit": {"oid": "02a113b2d405fa2e0ecf17aa5bea6a326776ca9a"}, "closed": true, "closedAt": "2020-02-03T20:56:49Z", "author": {"login": "filiphr"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcAUj18AFqTM1MTg4NzEzMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcAdTI3AFqTM1MTk2MTAxNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxODg3MTMz", "url": "https://github.com/mapstruct/mapstruct/pull/2013#pullrequestreview-351887133", "createdAt": "2020-02-01T14:35:13Z", "commit": {"oid": "ee95b2ac54b1ce614037cb8afb440a52713d6c0a"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxNDozNToxM1rOFkd6IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQwODo1NToxMVrOFkgxiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc4MzA3Mg==", "bodyText": "is this really the author?", "url": "https://github.com/mapstruct/mapstruct/pull/2013#discussion_r373783072", "createdAt": "2020-02-01T14:35:13Z", "author": {"login": "sjaakd"}, "path": "integrationtest/src/test/java/org/mapstruct/itest/tests/FullFeatureCompilationExclusionCliEnhancer.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright MapStruct Authors.\n+ *\n+ * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.mapstruct.itest.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.condition.JRE;\n+import org.mapstruct.itest.testutil.extension.ProcessorTest;\n+\n+/**\n+ * Adds explicit exclusions of test mappers that are known or expected to not work with specific compilers.\n+ *\n+ * @author Andreas Gudian", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee95b2ac54b1ce614037cb8afb440a52713d6c0a"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgyOTc2NQ==", "bodyText": "did you investigate this?", "url": "https://github.com/mapstruct/mapstruct/pull/2013#discussion_r373829765", "createdAt": "2020-02-02T08:50:53Z", "author": {"login": "sjaakd"}, "path": "integrationtest/src/test/java/org/mapstruct/itest/tests/FullFeatureCompilationExclusionCliEnhancer.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright MapStruct Authors.\n+ *\n+ * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.mapstruct.itest.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.condition.JRE;\n+import org.mapstruct.itest.testutil.extension.ProcessorTest;\n+\n+/**\n+ * Adds explicit exclusions of test mappers that are known or expected to not work with specific compilers.\n+ *\n+ * @author Andreas Gudian\n+ */\n+public final class FullFeatureCompilationExclusionCliEnhancer implements ProcessorTest.CommandLineEnhancer {\n+    @Override\n+    public Collection<String> getAdditionalCommandLineArguments(ProcessorTest.ProcessorType processorType,\n+        JRE currentJreVersion) {\n+        List<String> additionalExcludes = new ArrayList<>();\n+\n+        // SPI not working correctly here.. (not picked up)\n+        additionalExcludes.add( \"org/mapstruct/ap/test/bugs/_1596/*.java\" );\n+        additionalExcludes.add( \"org/mapstruct/ap/test/bugs/_1801/*.java\" );\n+\n+        switch ( currentJreVersion ) {\n+            case JAVA_9:\n+                // TODO find out why this fails:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee95b2ac54b1ce614037cb8afb440a52713d6c0a"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgyOTkwNw==", "bodyText": "should we fix this in a later phase? Make an issue? I guess we rely heavily on SPI.. I guess somewhere the META_INF is not on the classpath.", "url": "https://github.com/mapstruct/mapstruct/pull/2013#discussion_r373829907", "createdAt": "2020-02-02T08:52:37Z", "author": {"login": "sjaakd"}, "path": "integrationtest/src/test/java/org/mapstruct/itest/tests/FullFeatureCompilationExclusionCliEnhancer.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright MapStruct Authors.\n+ *\n+ * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.mapstruct.itest.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.condition.JRE;\n+import org.mapstruct.itest.testutil.extension.ProcessorTest;\n+\n+/**\n+ * Adds explicit exclusions of test mappers that are known or expected to not work with specific compilers.\n+ *\n+ * @author Andreas Gudian\n+ */\n+public final class FullFeatureCompilationExclusionCliEnhancer implements ProcessorTest.CommandLineEnhancer {\n+    @Override\n+    public Collection<String> getAdditionalCommandLineArguments(ProcessorTest.ProcessorType processorType,\n+        JRE currentJreVersion) {\n+        List<String> additionalExcludes = new ArrayList<>();\n+\n+        // SPI not working correctly here.. (not picked up)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee95b2ac54b1ce614037cb8afb440a52713d6c0a"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMDAwOQ==", "bodyText": "cool, I guess this is the trick that allows you to scrap a lot of plumbing..", "url": "https://github.com/mapstruct/mapstruct/pull/2013#discussion_r373830009", "createdAt": "2020-02-02T08:54:40Z", "author": {"login": "sjaakd"}, "path": "integrationtest/src/test/java/org/mapstruct/itest/tests/GradleIncrementalCompilationTest.java", "diffHunk": "@@ -24,40 +18,40 @@\n import org.gradle.testkit.runner.BuildResult;\n import org.gradle.testkit.runner.GradleRunner;\n import org.gradle.testkit.runner.TaskOutcome;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.TemporaryFolder;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.condition.DisabledForJreRange;\n+import org.junit.jupiter.api.condition.JRE;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n import org.junit.runners.Parameterized.Parameters;\n \n+import static org.gradle.testkit.runner.TaskOutcome.SUCCESS;\n+import static org.gradle.testkit.runner.TaskOutcome.UP_TO_DATE;\n+import static org.hamcrest.core.StringContains.containsString;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThat;\n+\n /**\n  * <p>This is supposed to be run from the mapstruct root project folder.\n  * Otherwise, use <code>-Dmapstruct_root=path_to_project</code>.\n  */\n-@RunWith( Parameterized.class )\n+@DisabledForJreRange(min = JRE.JAVA_11)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee95b2ac54b1ce614037cb8afb440a52713d6c0a"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMDAyNw==", "bodyText": "cool feature..", "url": "https://github.com/mapstruct/mapstruct/pull/2013#discussion_r373830027", "createdAt": "2020-02-02T08:55:11Z", "author": {"login": "sjaakd"}, "path": "integrationtest/src/test/java/org/mapstruct/itest/tests/GradleIncrementalCompilationTest.java", "diffHunk": "@@ -81,49 +75,62 @@ private void assertRecompiled(BuildResult result, int recompiledCount) {\n         assertCompileOutcome( result, recompiledCount > 0 ? SUCCESS : UP_TO_DATE );\n         assertThat(\n             result.getOutput(),\n-            containsString( String.format( \"Incremental compilation of %d classes completed\", recompiledCount ) ) );\n+            containsString( String.format( \"Incremental compilation of %d classes completed\", recompiledCount ) )\n+        );\n     }\n \n     private List<String> buildCompileArgs() {\n         // Make Gradle use the temporary build folder by overriding the buildDir property\n-        String buildDirPropertyArg = \"-PbuildDir=\" + testBuildDir.getRoot().getAbsolutePath();\n+        String buildDirPropertyArg = \"-PbuildDir=\" + testBuildDir.getAbsolutePath();\n \n         // Inject the path to the folder containing the mapstruct-processor JAR\n         String jarDirectoryArg = \"-PmapstructRootPath=\" + rootPath.toString();\n         return Arrays.asList( compileTaskName, buildDirPropertyArg, jarDirectoryArg );\n     }\n \n-    @BeforeClass\n+    @BeforeAll\n     public static void setupClass() throws Exception {\n         rootPath = Paths.get( System.getProperty( \"mapstruct_root\", \".\" ) ).toAbsolutePath();\n     }\n \n-    @Before\n-    public void setup() throws IOException {\n+    public void setup(String gradleVersion) throws IOException {\n+        if ( !testBuildDir.exists() ) {\n+            testBuildDir.mkdirs();\n+        }\n+\n+        if ( !testProjectDir.exists() ) {\n+            testProjectDir.mkdirs();\n+        }\n         // Copy test project files to the temp dir\n         Path gradleProjectPath = rootPath.resolve( projectDir );\n-        FileUtils.copyDirectory( gradleProjectPath.toFile(), testProjectDir.getRoot() );\n+        FileUtils.copyDirectory( gradleProjectPath.toFile(), testProjectDir );\n         compileArgs = buildCompileArgs();\n-        sourceDirectory = new File( testProjectDir.getRoot(), \"src/main/java\" );\n-        runner = GradleRunner.create().withGradleVersion( gradleVersion ).withProjectDir( testProjectDir.getRoot() );\n+        sourceDirectory = new File( testProjectDir, \"src/main/java\" );\n+        runner = GradleRunner.create().withGradleVersion( gradleVersion ).withProjectDir( testProjectDir );\n     }\n \n-    @Test\n-    public void testBuildSucceeds() throws IOException {\n+    @ParameterizedTest\n+    @MethodSource(\"gradleVersions\")\n+    public void testBuildSucceeds(String gradleVersion) throws IOException {\n+        setup( gradleVersion );\n         // Make sure the test build setup actually compiles\n         BuildResult buildResult = getRunner().build();\n         assertCompileOutcome( buildResult, SUCCESS );\n     }\n \n-    @Test\n-    public void testUpToDate() throws IOException {\n+    @ParameterizedTest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee95b2ac54b1ce614037cb8afb440a52713d6c0a"}, "originalPosition": 131}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ee95b2ac54b1ce614037cb8afb440a52713d6c0a", "author": {"user": {"login": "filiphr", "name": "Filip Hrisafov"}}, "url": "https://github.com/mapstruct/mapstruct/commit/ee95b2ac54b1ce614037cb8afb440a52713d6c0a", "committedDate": "2020-02-01T09:49:24Z", "message": "#1308 Switch to JUnit Jupiter and do not use Toolchains for the integration tests\n\nThe CI should be setup to run on different Java versions, for which the integration tests are going to be run"}, "afterCommit": {"oid": "49413d4fc46f8f0f734a342b26a6fae5116ae6ed", "author": {"user": {"login": "filiphr", "name": "Filip Hrisafov"}}, "url": "https://github.com/mapstruct/mapstruct/commit/49413d4fc46f8f0f734a342b26a6fae5116ae6ed", "committedDate": "2020-02-02T13:57:34Z", "message": "Remove toolchains and not needed mapstruct artifact id property"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f8bcf44c190915404946039340baed53b325fb8", "author": {"user": {"login": "filiphr", "name": "Filip Hrisafov"}}, "url": "https://github.com/mapstruct/mapstruct/commit/2f8bcf44c190915404946039340baed53b325fb8", "committedDate": "2020-02-02T13:57:34Z", "message": "#1308 Switch to JUnit Jupiter and do not use Toolchains for the integration tests\n\nThe CI should be setup to run on different Java versions, for which the integration tests are going to be run"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49413d4fc46f8f0f734a342b26a6fae5116ae6ed", "author": {"user": {"login": "filiphr", "name": "Filip Hrisafov"}}, "url": "https://github.com/mapstruct/mapstruct/commit/49413d4fc46f8f0f734a342b26a6fae5116ae6ed", "committedDate": "2020-02-02T13:57:34Z", "message": "Remove toolchains and not needed mapstruct artifact id property"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxOTYxMDE1", "url": "https://github.com/mapstruct/mapstruct/pull/2013#pullrequestreview-351961015", "createdAt": "2020-02-02T19:14:14Z", "commit": {"oid": "49413d4fc46f8f0f734a342b26a6fae5116ae6ed"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4507, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}