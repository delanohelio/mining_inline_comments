{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYxNzk0NDU5", "number": 2173, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxMDoxMTozM1rOEd9dNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxMDoxOToxNFrOEd9fCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODUxMDYxOnYy", "diffSide": "RIGHT", "path": "processor/src/main/java/org/mapstruct/ap/internal/model/ValueMappingMethod.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxMDoxMTozM1rOHJaiQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxMDoxNTo0OFrOHJajig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYzMzk4Ng==", "bodyText": "I know it is not part of this solution.. but I'm not happy with those methods coming from @BeanMapping.. I think they should be provided by @EnumMapping", "url": "https://github.com/mapstruct/mapstruct/pull/2173#discussion_r479633986", "createdAt": "2020-08-29T10:11:33Z", "author": {"login": "sjaakd"}, "path": "processor/src/main/java/org/mapstruct/ap/internal/model/ValueMappingMethod.java", "diffHunk": "@@ -485,16 +500,28 @@ String getValue(ValueMappingOptions valueMapping) {\n     }\n \n     private ValueMappingMethod(Method method, List<MappingEntry> enumMappings, String nullTarget, String defaultTarget,\n-        boolean throwIllegalArgumentException, List<LifecycleCallbackMethodReference> beforeMappingMethods,\n+        Type defaultException,\n+        List<LifecycleCallbackMethodReference> beforeMappingMethods,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55847378f80e7f1ebb20df5c8fcbc90e2b5691fe"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYzNDMxNA==", "bodyText": "the selectors are coming from BeanMapping indeed. I think that this is a good think for the 2.0 API overhauling. perhaps the qualifiers should go in their own annotation for this.", "url": "https://github.com/mapstruct/mapstruct/pull/2173#discussion_r479634314", "createdAt": "2020-08-29T10:15:48Z", "author": {"login": "filiphr"}, "path": "processor/src/main/java/org/mapstruct/ap/internal/model/ValueMappingMethod.java", "diffHunk": "@@ -485,16 +500,28 @@ String getValue(ValueMappingOptions valueMapping) {\n     }\n \n     private ValueMappingMethod(Method method, List<MappingEntry> enumMappings, String nullTarget, String defaultTarget,\n-        boolean throwIllegalArgumentException, List<LifecycleCallbackMethodReference> beforeMappingMethods,\n+        Type defaultException,\n+        List<LifecycleCallbackMethodReference> beforeMappingMethods,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYzMzk4Ng=="}, "originalCommit": {"oid": "55847378f80e7f1ebb20df5c8fcbc90e2b5691fe"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODUxMzg4OnYy", "diffSide": "RIGHT", "path": "processor/src/test/resources/fixtures/org/mapstruct/ap/test/value/exception/CustomDefaultExceptionDefinedInMapperConfigImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxMDoxNjozNlrOHJajzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxMDoyODoxNFrOHJanUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYzNDM4Mw==", "bodyText": "when you throw a checked exception.. shouldn't we check whether the method signature has defined such exception in the throws clause or do we leave this up to the compiler?", "url": "https://github.com/mapstruct/mapstruct/pull/2173#discussion_r479634383", "createdAt": "2020-08-29T10:16:36Z", "author": {"login": "sjaakd"}, "path": "processor/src/test/resources/fixtures/org/mapstruct/ap/test/value/exception/CustomDefaultExceptionDefinedInMapperConfigImpl.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright MapStruct Authors.\n+ *\n+ * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.mapstruct.ap.test.value.exception;\n+\n+import javax.annotation.Generated;\n+import org.mapstruct.ap.test.value.CustomIllegalArgumentException;\n+import org.mapstruct.ap.test.value.ExternalOrderType;\n+import org.mapstruct.ap.test.value.OrderType;\n+\n+@Generated(\n+    value = \"org.mapstruct.ap.MappingProcessor\",\n+    date = \"2020-08-29T09:36:57+0200\",\n+    comments = \"version: , compiler: javac, environment: Java 11.0.2 (AdoptOpenJDK)\"\n+)\n+public class CustomDefaultExceptionDefinedInMapperConfigImpl implements CustomDefaultExceptionDefinedInMapperConfig {\n+\n+    @Override\n+    public ExternalOrderType withAnyUnmapped(OrderType orderType) {\n+        if ( orderType == null ) {\n+            return null;\n+        }\n+\n+        ExternalOrderType externalOrderType;\n+\n+        switch ( orderType ) {\n+            default: externalOrderType = ExternalOrderType.DEFAULT;\n+        }\n+\n+        return externalOrderType;\n+    }\n+\n+    @Override\n+    public ExternalOrderType withAnyRemaining(OrderType orderType) {\n+        if ( orderType == null ) {\n+            return null;\n+        }\n+\n+        ExternalOrderType externalOrderType;\n+\n+        switch ( orderType ) {\n+            case RETAIL: externalOrderType = ExternalOrderType.RETAIL;\n+            break;\n+            case B2B: externalOrderType = ExternalOrderType.B2B;\n+            break;\n+            default: externalOrderType = ExternalOrderType.DEFAULT;\n+        }\n+\n+        return externalOrderType;\n+    }\n+\n+    @Override\n+    public ExternalOrderType onlyWithMappings(OrderType orderType) {\n+        if ( orderType == null ) {\n+            return null;\n+        }\n+\n+        ExternalOrderType externalOrderType;\n+\n+        switch ( orderType ) {\n+            case EXTRA: externalOrderType = ExternalOrderType.SPECIAL;\n+            break;\n+            case STANDARD: externalOrderType = ExternalOrderType.DEFAULT;\n+            break;\n+            case NORMAL: externalOrderType = ExternalOrderType.DEFAULT;\n+            break;\n+            case RETAIL: externalOrderType = ExternalOrderType.RETAIL;\n+            break;\n+            case B2B: externalOrderType = ExternalOrderType.B2B;\n+            break;\n+            default: throw new CustomIllegalArgumentException( \"Unexpected enum constant: \" + orderType );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55847378f80e7f1ebb20df5c8fcbc90e2b5691fe"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYzNTI4Mg==", "bodyText": "I say we leave it to the compiler. In the end you as a user defines the exception that you want to throw, so it is entirely in your hands.", "url": "https://github.com/mapstruct/mapstruct/pull/2173#discussion_r479635282", "createdAt": "2020-08-29T10:28:14Z", "author": {"login": "filiphr"}, "path": "processor/src/test/resources/fixtures/org/mapstruct/ap/test/value/exception/CustomDefaultExceptionDefinedInMapperConfigImpl.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright MapStruct Authors.\n+ *\n+ * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.mapstruct.ap.test.value.exception;\n+\n+import javax.annotation.Generated;\n+import org.mapstruct.ap.test.value.CustomIllegalArgumentException;\n+import org.mapstruct.ap.test.value.ExternalOrderType;\n+import org.mapstruct.ap.test.value.OrderType;\n+\n+@Generated(\n+    value = \"org.mapstruct.ap.MappingProcessor\",\n+    date = \"2020-08-29T09:36:57+0200\",\n+    comments = \"version: , compiler: javac, environment: Java 11.0.2 (AdoptOpenJDK)\"\n+)\n+public class CustomDefaultExceptionDefinedInMapperConfigImpl implements CustomDefaultExceptionDefinedInMapperConfig {\n+\n+    @Override\n+    public ExternalOrderType withAnyUnmapped(OrderType orderType) {\n+        if ( orderType == null ) {\n+            return null;\n+        }\n+\n+        ExternalOrderType externalOrderType;\n+\n+        switch ( orderType ) {\n+            default: externalOrderType = ExternalOrderType.DEFAULT;\n+        }\n+\n+        return externalOrderType;\n+    }\n+\n+    @Override\n+    public ExternalOrderType withAnyRemaining(OrderType orderType) {\n+        if ( orderType == null ) {\n+            return null;\n+        }\n+\n+        ExternalOrderType externalOrderType;\n+\n+        switch ( orderType ) {\n+            case RETAIL: externalOrderType = ExternalOrderType.RETAIL;\n+            break;\n+            case B2B: externalOrderType = ExternalOrderType.B2B;\n+            break;\n+            default: externalOrderType = ExternalOrderType.DEFAULT;\n+        }\n+\n+        return externalOrderType;\n+    }\n+\n+    @Override\n+    public ExternalOrderType onlyWithMappings(OrderType orderType) {\n+        if ( orderType == null ) {\n+            return null;\n+        }\n+\n+        ExternalOrderType externalOrderType;\n+\n+        switch ( orderType ) {\n+            case EXTRA: externalOrderType = ExternalOrderType.SPECIAL;\n+            break;\n+            case STANDARD: externalOrderType = ExternalOrderType.DEFAULT;\n+            break;\n+            case NORMAL: externalOrderType = ExternalOrderType.DEFAULT;\n+            break;\n+            case RETAIL: externalOrderType = ExternalOrderType.RETAIL;\n+            break;\n+            case B2B: externalOrderType = ExternalOrderType.B2B;\n+            break;\n+            default: throw new CustomIllegalArgumentException( \"Unexpected enum constant: \" + orderType );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYzNDM4Mw=="}, "originalCommit": {"oid": "55847378f80e7f1ebb20df5c8fcbc90e2b5691fe"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODUxNTMxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mapstruct/EnumMapping.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxMDoxOToxNFrOHJakdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxMDozMjoxOFrOHJaokg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYzNDU0OQ==", "bodyText": "we probably should mention that:\n\nThe exception should have an empty constructor\nThe exception (when checked) should be added to the method signature.", "url": "https://github.com/mapstruct/mapstruct/pull/2173#discussion_r479634549", "createdAt": "2020-08-29T10:19:14Z", "author": {"login": "sjaakd"}, "path": "core/src/main/java/org/mapstruct/EnumMapping.java", "diffHunk": "@@ -111,13 +111,22 @@\n      *\n      * @return the name transformation strategy\n      */\n-    String nameTransformationStrategy();\n+    String nameTransformationStrategy() default \"\";\n \n     /**\n      * The configuration that should be passed on the appropriate name transformation strategy.\n      * e.g. a suffix that should be applied to the source enum when doing name based mapping.\n      *\n      * @return the configuration to use\n      */\n-    String configuration();\n+    String configuration() default \"\";\n+\n+    /**\n+     * Exception that should be thrown by the generated code if no mapping matches.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55847378f80e7f1ebb20df5c8fcbc90e2b5691fe"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYzNTMwMw==", "bodyText": "I'll add that.", "url": "https://github.com/mapstruct/mapstruct/pull/2173#discussion_r479635303", "createdAt": "2020-08-29T10:28:32Z", "author": {"login": "filiphr"}, "path": "core/src/main/java/org/mapstruct/EnumMapping.java", "diffHunk": "@@ -111,13 +111,22 @@\n      *\n      * @return the name transformation strategy\n      */\n-    String nameTransformationStrategy();\n+    String nameTransformationStrategy() default \"\";\n \n     /**\n      * The configuration that should be passed on the appropriate name transformation strategy.\n      * e.g. a suffix that should be applied to the source enum when doing name based mapping.\n      *\n      * @return the configuration to use\n      */\n-    String configuration();\n+    String configuration() default \"\";\n+\n+    /**\n+     * Exception that should be thrown by the generated code if no mapping matches.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYzNDU0OQ=="}, "originalCommit": {"oid": "55847378f80e7f1ebb20df5c8fcbc90e2b5691fe"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYzNTYwMg==", "bodyText": "great.. After that, you could merge the PR..", "url": "https://github.com/mapstruct/mapstruct/pull/2173#discussion_r479635602", "createdAt": "2020-08-29T10:32:18Z", "author": {"login": "sjaakd"}, "path": "core/src/main/java/org/mapstruct/EnumMapping.java", "diffHunk": "@@ -111,13 +111,22 @@\n      *\n      * @return the name transformation strategy\n      */\n-    String nameTransformationStrategy();\n+    String nameTransformationStrategy() default \"\";\n \n     /**\n      * The configuration that should be passed on the appropriate name transformation strategy.\n      * e.g. a suffix that should be applied to the source enum when doing name based mapping.\n      *\n      * @return the configuration to use\n      */\n-    String configuration();\n+    String configuration() default \"\";\n+\n+    /**\n+     * Exception that should be thrown by the generated code if no mapping matches.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYzNDU0OQ=="}, "originalCommit": {"oid": "55847378f80e7f1ebb20df5c8fcbc90e2b5691fe"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4234, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}