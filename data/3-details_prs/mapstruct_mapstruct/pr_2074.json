{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1Njg3Njkx", "number": 2074, "title": "Mapping using target constructor", "bodyText": "Fixes #73.\nIt would be good to get some feedback on it.\n\nHave I missed some test cases?\nIs the generated code acceptable?\nIs the disambiguation for constructors acceptable?", "createdAt": "2020-04-19T15:56:42Z", "url": "https://github.com/mapstruct/mapstruct/pull/2074", "merged": true, "mergeCommit": {"oid": "2b2299a730f9b8f6ee48cef3b8c84d7e7604039c"}, "closed": true, "closedAt": "2020-04-26T10:44:43Z", "author": {"login": "filiphr"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZ4qSsAFqTM5NzU4MjIxNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcbX2RaABqjMyNzI3Nzc4NTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NTgyMjE1", "url": "https://github.com/mapstruct/mapstruct/pull/2074#pullrequestreview-397582215", "createdAt": "2020-04-21T18:49:42Z", "commit": {"oid": "8b1559ef73bf230d18096a7174cf140dd778438f"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxODo0OTo0MlrOGJTUNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxOTowOToxNFrOGJUGlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQwNjgzOQ==", "bodyText": "skip the also", "url": "https://github.com/mapstruct/mapstruct/pull/2074#discussion_r412406839", "createdAt": "2020-04-21T18:49:42Z", "author": {"login": "sjaakd"}, "path": "documentation/src/main/asciidoc/chapter-3-defining-a-mapper.asciidoc", "diffHunk": "@@ -528,3 +528,72 @@ Otherwise, you would need to write a custom `BuilderProvider`\n ====\n In case you want to disable using builders then you can use the `NoOpBuilderProvider` by creating a `org.mapstruct.ap.spi.BuilderProvider` file in the `META-INF/services` directory with `org.mapstruct.ap.spi.NoOpBuilderProvider` as it's content.\n ====\n+\n+[[mapping-with-constructors]]\n+=== Using Constructors\n+\n+MapStruct also support using constructors for mapping target types.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1559ef73bf230d18096a7174cf140dd778438f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQwNzU4NQ==", "bodyText": "annoated", "url": "https://github.com/mapstruct/mapstruct/pull/2074#discussion_r412407585", "createdAt": "2020-04-21T18:50:45Z", "author": {"login": "sjaakd"}, "path": "documentation/src/main/asciidoc/chapter-3-defining-a-mapper.asciidoc", "diffHunk": "@@ -528,3 +528,72 @@ Otherwise, you would need to write a custom `BuilderProvider`\n ====\n In case you want to disable using builders then you can use the `NoOpBuilderProvider` by creating a `org.mapstruct.ap.spi.BuilderProvider` file in the `META-INF/services` directory with `org.mapstruct.ap.spi.NoOpBuilderProvider` as it's content.\n ====\n+\n+[[mapping-with-constructors]]\n+=== Using Constructors\n+\n+MapStruct also support using constructors for mapping target types.\n+When doing a mapping MapStruct checks if there is a builder for the type being mapped.\n+If there is no builder, then MapStruct looks for a single accessible constructor.\n+WHen there are multiple constructors then the following is done to pick one that should be used:\n+\n+* If a parameterless constructor exists then it would be used to construct the object and the others would be ignored\n+* If there are multiple constructors then the one annotated with annotation named `@Default` (from any package) would be used\n+\n+\n+When using a constructor then the names of the parameters of the constructor would be used as the target properties.\n+If the constructor is annoated with an annotation named `@ConstructorProperties` (from any package) then this would be used to get the names of the parameters.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1559ef73bf230d18096a7174cf140dd778438f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQwODg0Mw==", "bodyText": "Many time the user does not have control over the objects. Take for instance lombok, but also XJC generated classes. How would we handle those? What about name based mapping?", "url": "https://github.com/mapstruct/mapstruct/pull/2074#discussion_r412408843", "createdAt": "2020-04-21T18:52:39Z", "author": {"login": "sjaakd"}, "path": "documentation/src/main/asciidoc/chapter-3-defining-a-mapper.asciidoc", "diffHunk": "@@ -528,3 +528,72 @@ Otherwise, you would need to write a custom `BuilderProvider`\n ====\n In case you want to disable using builders then you can use the `NoOpBuilderProvider` by creating a `org.mapstruct.ap.spi.BuilderProvider` file in the `META-INF/services` directory with `org.mapstruct.ap.spi.NoOpBuilderProvider` as it's content.\n ====\n+\n+[[mapping-with-constructors]]\n+=== Using Constructors\n+\n+MapStruct also support using constructors for mapping target types.\n+When doing a mapping MapStruct checks if there is a builder for the type being mapped.\n+If there is no builder, then MapStruct looks for a single accessible constructor.\n+WHen there are multiple constructors then the following is done to pick one that should be used:\n+\n+* If a parameterless constructor exists then it would be used to construct the object and the others would be ignored\n+* If there are multiple constructors then the one annotated with annotation named `@Default` (from any package) would be used\n+\n+\n+When using a constructor then the names of the parameters of the constructor would be used as the target properties.\n+If the constructor is annoated with an annotation named `@ConstructorProperties` (from any package) then this would be used to get the names of the parameters.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQwNzU4NQ=="}, "originalCommit": {"oid": "8b1559ef73bf230d18096a7174cf140dd778438f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQwOTYyMw==", "bodyText": "What about String name  and String surname?", "url": "https://github.com/mapstruct/mapstruct/pull/2074#discussion_r412409623", "createdAt": "2020-04-21T18:53:48Z", "author": {"login": "sjaakd"}, "path": "documentation/src/main/asciidoc/chapter-3-defining-a-mapper.asciidoc", "diffHunk": "@@ -528,3 +528,72 @@ Otherwise, you would need to write a custom `BuilderProvider`\n ====\n In case you want to disable using builders then you can use the `NoOpBuilderProvider` by creating a `org.mapstruct.ap.spi.BuilderProvider` file in the `META-INF/services` directory with `org.mapstruct.ap.spi.NoOpBuilderProvider` as it's content.\n ====\n+\n+[[mapping-with-constructors]]\n+=== Using Constructors\n+\n+MapStruct also support using constructors for mapping target types.\n+When doing a mapping MapStruct checks if there is a builder for the type being mapped.\n+If there is no builder, then MapStruct looks for a single accessible constructor.\n+WHen there are multiple constructors then the following is done to pick one that should be used:\n+\n+* If a parameterless constructor exists then it would be used to construct the object and the others would be ignored\n+* If there are multiple constructors then the one annotated with annotation named `@Default` (from any package) would be used\n+\n+\n+When using a constructor then the names of the parameters of the constructor would be used as the target properties.\n+If the constructor is annoated with an annotation named `@ConstructorProperties` (from any package) then this would be used to get the names of the parameters.\n+\n+\n+.Person with constructor parameters\n+====\n+[source, java, linenums]\n+[subs=\"verbatim,attributes\"]\n+----\n+public class Person {\n+\n+    private final String name;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1559ef73bf230d18096a7174cf140dd778438f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQxMDUxMQ==", "bodyText": "I think we should have an opt-out for this functionality.. Lets do this from the start :).", "url": "https://github.com/mapstruct/mapstruct/pull/2074#discussion_r412410511", "createdAt": "2020-04-21T18:55:07Z", "author": {"login": "sjaakd"}, "path": "documentation/src/main/asciidoc/chapter-3-defining-a-mapper.asciidoc", "diffHunk": "@@ -528,3 +528,72 @@ Otherwise, you would need to write a custom `BuilderProvider`\n ====\n In case you want to disable using builders then you can use the `NoOpBuilderProvider` by creating a `org.mapstruct.ap.spi.BuilderProvider` file in the `META-INF/services` directory with `org.mapstruct.ap.spi.NoOpBuilderProvider` as it's content.\n ====\n+\n+[[mapping-with-constructors]]\n+=== Using Constructors\n+\n+MapStruct also support using constructors for mapping target types.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQwNjgzOQ=="}, "originalCommit": {"oid": "8b1559ef73bf230d18096a7174cf140dd778438f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQxMTUyNQ==", "bodyText": "targetAccessorType.isFieldAssignment() etc..", "url": "https://github.com/mapstruct/mapstruct/pull/2074#discussion_r412411525", "createdAt": "2020-04-21T18:56:40Z", "author": {"login": "sjaakd"}, "path": "processor/src/main/java/org/mapstruct/ap/internal/model/CollectionAssignmentBuilder.java", "diffHunk": "@@ -130,7 +130,8 @@ public Assignment build() {\n         CollectionMappingStrategyGem cms = method.getOptions().getMapper().getCollectionMappingStrategy();\n         boolean targetImmutable = cms == CollectionMappingStrategyGem.TARGET_IMMUTABLE || targetReadAccessor == null;\n \n-        if ( targetAccessorType == AccessorType.SETTER || targetAccessorType == AccessorType.FIELD ) {\n+        if ( targetAccessorType == AccessorType.SETTER || targetAccessorType == AccessorType.FIELD ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1559ef73bf230d18096a7174cf140dd778438f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQxODMwMQ==", "bodyText": "hmm. do I spot a piece of autobiography", "url": "https://github.com/mapstruct/mapstruct/pull/2074#discussion_r412418301", "createdAt": "2020-04-21T19:06:59Z", "author": {"login": "sjaakd"}, "path": "processor/src/test/java/org/mapstruct/ap/test/constructor/constructorproperties/SimpleConstructorPropertiesTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright MapStruct Authors.\n+ *\n+ * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.mapstruct.ap.test.constructor.constructorproperties;\n+\n+import java.util.Arrays;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mapstruct.ap.test.constructor.ConstructorProperties;\n+import org.mapstruct.ap.test.constructor.PersonDto;\n+import org.mapstruct.ap.testutil.WithClasses;\n+import org.mapstruct.ap.testutil.runner.AnnotationProcessorTestRunner;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+/**\n+ * @author Filip Hrisafov\n+ */\n+@WithClasses({\n+    ConstructorProperties.class,\n+    PersonWithConstructorProperties.class,\n+    PersonDto.class,\n+    SimpleConstructorPropertiesMapper.class\n+})\n+@RunWith(AnnotationProcessorTestRunner.class)\n+public class SimpleConstructorPropertiesTest {\n+\n+    @Test\n+    public void mapDefault() {\n+        PersonDto source = new PersonDto();\n+        source.setName( \"Bob\" );\n+        source.setAge( 30 );\n+        source.setJob( \"Software Engineer\" );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1559ef73bf230d18096a7174cf140dd778438f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQxOTczMg==", "bodyText": "are you sure?", "url": "https://github.com/mapstruct/mapstruct/pull/2074#discussion_r412419732", "createdAt": "2020-04-21T19:09:14Z", "author": {"login": "sjaakd"}, "path": "processor/src/test/java/org/mapstruct/ap/test/constructor/nestedsource/_target/AdderUsageObserver.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright MapStruct Authors.\n+ *\n+ * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.mapstruct.ap.test.constructor.nestedsource._target;\n+\n+/**\n+ * @author Sjaak Derksen", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1559ef73bf230d18096a7174cf140dd778438f"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMzkzMDk2", "url": "https://github.com/mapstruct/mapstruct/pull/2074#pullrequestreview-400393096", "createdAt": "2020-04-25T13:19:59Z", "commit": {"oid": "97810a9f9ca70a3d21bb83d32c24b6061cf13ca4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMzoxOTo1OVrOGL1XKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMzoyNDoyMFrOGL1aJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA2MTgwMA==", "bodyText": "I would be a bit more verbose .. the others  == other constructors", "url": "https://github.com/mapstruct/mapstruct/pull/2074#discussion_r415061800", "createdAt": "2020-04-25T13:19:59Z", "author": {"login": "sjaakd"}, "path": "documentation/src/main/asciidoc/chapter-3-defining-a-mapper.asciidoc", "diffHunk": "@@ -532,17 +532,22 @@ In case you want to disable using builders then you can use the `NoOpBuilderProv\n [[mapping-with-constructors]]\n === Using Constructors\n \n-MapStruct also support using constructors for mapping target types.\n+MapStruct supports using constructors for mapping target types.\n When doing a mapping MapStruct checks if there is a builder for the type being mapped.\n If there is no builder, then MapStruct looks for a single accessible constructor.\n-WHen there are multiple constructors then the following is done to pick one that should be used:\n+When there are multiple constructors then the following is done to pick the one which should be used:\n \n-* If a parameterless constructor exists then it would be used to construct the object and the others would be ignored\n-* If there are multiple constructors then the one annotated with annotation named `@Default` (from any package) would be used\n+* If a parameterless constructor exists then it would be used to construct the object, and the others will be ignored", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97810a9f9ca70a3d21bb83d32c24b6061cf13ca4"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA2MTk0Nw==", "bodyText": "used and matched to the target property names", "url": "https://github.com/mapstruct/mapstruct/pull/2074#discussion_r415061947", "createdAt": "2020-04-25T13:20:39Z", "author": {"login": "sjaakd"}, "path": "documentation/src/main/asciidoc/chapter-3-defining-a-mapper.asciidoc", "diffHunk": "@@ -532,17 +532,22 @@ In case you want to disable using builders then you can use the `NoOpBuilderProv\n [[mapping-with-constructors]]\n === Using Constructors\n \n-MapStruct also support using constructors for mapping target types.\n+MapStruct supports using constructors for mapping target types.\n When doing a mapping MapStruct checks if there is a builder for the type being mapped.\n If there is no builder, then MapStruct looks for a single accessible constructor.\n-WHen there are multiple constructors then the following is done to pick one that should be used:\n+When there are multiple constructors then the following is done to pick the one which should be used:\n \n-* If a parameterless constructor exists then it would be used to construct the object and the others would be ignored\n-* If there are multiple constructors then the one annotated with annotation named `@Default` (from any package) would be used\n+* If a parameterless constructor exists then it would be used to construct the object, and the others will be ignored\n+* If there are multiple constructors then the one annotated with annotation named `@Default` (from any package) will be used\n \n+When using a constructor then the names of the parameters of the constructor will be used as the target properties.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97810a9f9ca70a3d21bb83d32c24b6061cf13ca4"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA2MjE0NQ==", "bodyText": "this = this annotation", "url": "https://github.com/mapstruct/mapstruct/pull/2074#discussion_r415062145", "createdAt": "2020-04-25T13:21:28Z", "author": {"login": "sjaakd"}, "path": "documentation/src/main/asciidoc/chapter-3-defining-a-mapper.asciidoc", "diffHunk": "@@ -532,17 +532,22 @@ In case you want to disable using builders then you can use the `NoOpBuilderProv\n [[mapping-with-constructors]]\n === Using Constructors\n \n-MapStruct also support using constructors for mapping target types.\n+MapStruct supports using constructors for mapping target types.\n When doing a mapping MapStruct checks if there is a builder for the type being mapped.\n If there is no builder, then MapStruct looks for a single accessible constructor.\n-WHen there are multiple constructors then the following is done to pick one that should be used:\n+When there are multiple constructors then the following is done to pick the one which should be used:\n \n-* If a parameterless constructor exists then it would be used to construct the object and the others would be ignored\n-* If there are multiple constructors then the one annotated with annotation named `@Default` (from any package) would be used\n+* If a parameterless constructor exists then it would be used to construct the object, and the others will be ignored\n+* If there are multiple constructors then the one annotated with annotation named `@Default` (from any package) will be used\n \n+When using a constructor then the names of the parameters of the constructor will be used as the target properties.\n+When the constructor has an annotation named `@ConstructorProperties` (from any package) then this will be used to get the names of the parameters.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97810a9f9ca70a3d21bb83d32c24b6061cf13ca4"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA2MjU2Ng==", "bodyText": "..\nWhen an object factory method or a method annotated with @ObjectFactory exist, it will take precedence over any constructor defined in the target.", "url": "https://github.com/mapstruct/mapstruct/pull/2074#discussion_r415062566", "createdAt": "2020-04-25T13:24:20Z", "author": {"login": "sjaakd"}, "path": "documentation/src/main/asciidoc/chapter-3-defining-a-mapper.asciidoc", "diffHunk": "@@ -532,17 +532,22 @@ In case you want to disable using builders then you can use the `NoOpBuilderProv\n [[mapping-with-constructors]]\n === Using Constructors\n \n-MapStruct also support using constructors for mapping target types.\n+MapStruct supports using constructors for mapping target types.\n When doing a mapping MapStruct checks if there is a builder for the type being mapped.\n If there is no builder, then MapStruct looks for a single accessible constructor.\n-WHen there are multiple constructors then the following is done to pick one that should be used:\n+When there are multiple constructors then the following is done to pick the one which should be used:\n \n-* If a parameterless constructor exists then it would be used to construct the object and the others would be ignored\n-* If there are multiple constructors then the one annotated with annotation named `@Default` (from any package) would be used\n+* If a parameterless constructor exists then it would be used to construct the object, and the others will be ignored\n+* If there are multiple constructors then the one annotated with annotation named `@Default` (from any package) will be used\n \n+When using a constructor then the names of the parameters of the constructor will be used as the target properties.\n+When the constructor has an annotation named `@ConstructorProperties` (from any package) then this will be used to get the names of the parameters.\n \n-When using a constructor then the names of the parameters of the constructor would be used as the target properties.\n-If the constructor is annoated with an annotation named `@ConstructorProperties` (from any package) then this would be used to get the names of the parameters.\n+[NOTE]\n+====\n+When an `@ObjectFactory` exists for a given target then that will have a precedence.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97810a9f9ca70a3d21bb83d32c24b6061cf13ca4"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNDAxNDc4", "url": "https://github.com/mapstruct/mapstruct/pull/2074#pullrequestreview-400401478", "createdAt": "2020-04-25T15:02:37Z", "commit": {"oid": "f3413a166a1aaf0e580e9b5bad477d72d865ced5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ba1fcf9d9126a2d133d7e1d71de82877e91ca59", "author": {"user": {"login": "filiphr", "name": "Filip Hrisafov"}}, "url": "https://github.com/mapstruct/mapstruct/commit/5ba1fcf9d9126a2d133d7e1d71de82877e91ca59", "committedDate": "2020-04-26T10:04:32Z", "message": "Accessor#getSimpleName should return a String"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7bd5ca57ffad48b2eeaecbaf64277551b7dd58c5", "author": {"user": {"login": "filiphr", "name": "Filip Hrisafov"}}, "url": "https://github.com/mapstruct/mapstruct/commit/7bd5ca57ffad48b2eeaecbaf64277551b7dd58c5", "committedDate": "2020-04-26T10:08:57Z", "message": "#73 Add support for using constructor arguments when instantiating mapping targets\n\nBy default the constructor argument names are used to extract the target properties.\nIf a constructor is annotated with an annotation named `@ConstructorProperties` (from any package) then it would be used to extract the target properties.\n\nIf a mapping target has a parameterless empty constructor it would be used to instantiate the target.\nWhen there are multiple constructors then an annotation named `@Default` (from any package) can be used to mark a constructor that should be used by default when instantiating the target.\n\nSupports mapping into Java 14 Records and Kotlin data classes out of the box"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "999e9cd55db6d1ba2eba67f6da276c7e38cf6f4d", "author": {"user": {"login": "filiphr", "name": "Filip Hrisafov"}}, "url": "https://github.com/mapstruct/mapstruct/commit/999e9cd55db6d1ba2eba67f6da276c7e38cf6f4d", "committedDate": "2020-04-26T09:38:08Z", "message": "Fix kotlin data tests (needs a forked JVM for the maven verifier)"}, "afterCommit": {"oid": "7bd5ca57ffad48b2eeaecbaf64277551b7dd58c5", "author": {"user": {"login": "filiphr", "name": "Filip Hrisafov"}}, "url": "https://github.com/mapstruct/mapstruct/commit/7bd5ca57ffad48b2eeaecbaf64277551b7dd58c5", "committedDate": "2020-04-26T10:08:57Z", "message": "#73 Add support for using constructor arguments when instantiating mapping targets\n\nBy default the constructor argument names are used to extract the target properties.\nIf a constructor is annotated with an annotation named `@ConstructorProperties` (from any package) then it would be used to extract the target properties.\n\nIf a mapping target has a parameterless empty constructor it would be used to instantiate the target.\nWhen there are multiple constructors then an annotation named `@Default` (from any package) can be used to mark a constructor that should be used by default when instantiating the target.\n\nSupports mapping into Java 14 Records and Kotlin data classes out of the box"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4521, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}