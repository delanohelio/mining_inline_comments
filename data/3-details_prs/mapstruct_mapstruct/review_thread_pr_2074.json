{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1Njg3Njkx", "number": 2074, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxODo0OTo0MlrOD0YhYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMzoyNDoyMFrOD2HY9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MjU0MzA1OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/chapter-3-defining-a-mapper.asciidoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxODo0OTo0MlrOGJTUNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxODo1NTowN1rOGJTijw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQwNjgzOQ==", "bodyText": "skip the also", "url": "https://github.com/mapstruct/mapstruct/pull/2074#discussion_r412406839", "createdAt": "2020-04-21T18:49:42Z", "author": {"login": "sjaakd"}, "path": "documentation/src/main/asciidoc/chapter-3-defining-a-mapper.asciidoc", "diffHunk": "@@ -528,3 +528,72 @@ Otherwise, you would need to write a custom `BuilderProvider`\n ====\n In case you want to disable using builders then you can use the `NoOpBuilderProvider` by creating a `org.mapstruct.ap.spi.BuilderProvider` file in the `META-INF/services` directory with `org.mapstruct.ap.spi.NoOpBuilderProvider` as it's content.\n ====\n+\n+[[mapping-with-constructors]]\n+=== Using Constructors\n+\n+MapStruct also support using constructors for mapping target types.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1559ef73bf230d18096a7174cf140dd778438f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQxMDUxMQ==", "bodyText": "I think we should have an opt-out for this functionality.. Lets do this from the start :).", "url": "https://github.com/mapstruct/mapstruct/pull/2074#discussion_r412410511", "createdAt": "2020-04-21T18:55:07Z", "author": {"login": "sjaakd"}, "path": "documentation/src/main/asciidoc/chapter-3-defining-a-mapper.asciidoc", "diffHunk": "@@ -528,3 +528,72 @@ Otherwise, you would need to write a custom `BuilderProvider`\n ====\n In case you want to disable using builders then you can use the `NoOpBuilderProvider` by creating a `org.mapstruct.ap.spi.BuilderProvider` file in the `META-INF/services` directory with `org.mapstruct.ap.spi.NoOpBuilderProvider` as it's content.\n ====\n+\n+[[mapping-with-constructors]]\n+=== Using Constructors\n+\n+MapStruct also support using constructors for mapping target types.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQwNjgzOQ=="}, "originalCommit": {"oid": "8b1559ef73bf230d18096a7174cf140dd778438f"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MjU0Nzc0OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/chapter-3-defining-a-mapper.asciidoc", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxODo1MDo0NVrOGJTXIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxNDoxMDoyN1rOGL148g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQwNzU4NQ==", "bodyText": "annoated", "url": "https://github.com/mapstruct/mapstruct/pull/2074#discussion_r412407585", "createdAt": "2020-04-21T18:50:45Z", "author": {"login": "sjaakd"}, "path": "documentation/src/main/asciidoc/chapter-3-defining-a-mapper.asciidoc", "diffHunk": "@@ -528,3 +528,72 @@ Otherwise, you would need to write a custom `BuilderProvider`\n ====\n In case you want to disable using builders then you can use the `NoOpBuilderProvider` by creating a `org.mapstruct.ap.spi.BuilderProvider` file in the `META-INF/services` directory with `org.mapstruct.ap.spi.NoOpBuilderProvider` as it's content.\n ====\n+\n+[[mapping-with-constructors]]\n+=== Using Constructors\n+\n+MapStruct also support using constructors for mapping target types.\n+When doing a mapping MapStruct checks if there is a builder for the type being mapped.\n+If there is no builder, then MapStruct looks for a single accessible constructor.\n+WHen there are multiple constructors then the following is done to pick one that should be used:\n+\n+* If a parameterless constructor exists then it would be used to construct the object and the others would be ignored\n+* If there are multiple constructors then the one annotated with annotation named `@Default` (from any package) would be used\n+\n+\n+When using a constructor then the names of the parameters of the constructor would be used as the target properties.\n+If the constructor is annoated with an annotation named `@ConstructorProperties` (from any package) then this would be used to get the names of the parameters.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1559ef73bf230d18096a7174cf140dd778438f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQwODg0Mw==", "bodyText": "Many time the user does not have control over the objects. Take for instance lombok, but also XJC generated classes. How would we handle those? What about name based mapping?", "url": "https://github.com/mapstruct/mapstruct/pull/2074#discussion_r412408843", "createdAt": "2020-04-21T18:52:39Z", "author": {"login": "sjaakd"}, "path": "documentation/src/main/asciidoc/chapter-3-defining-a-mapper.asciidoc", "diffHunk": "@@ -528,3 +528,72 @@ Otherwise, you would need to write a custom `BuilderProvider`\n ====\n In case you want to disable using builders then you can use the `NoOpBuilderProvider` by creating a `org.mapstruct.ap.spi.BuilderProvider` file in the `META-INF/services` directory with `org.mapstruct.ap.spi.NoOpBuilderProvider` as it's content.\n ====\n+\n+[[mapping-with-constructors]]\n+=== Using Constructors\n+\n+MapStruct also support using constructors for mapping target types.\n+When doing a mapping MapStruct checks if there is a builder for the type being mapped.\n+If there is no builder, then MapStruct looks for a single accessible constructor.\n+WHen there are multiple constructors then the following is done to pick one that should be used:\n+\n+* If a parameterless constructor exists then it would be used to construct the object and the others would be ignored\n+* If there are multiple constructors then the one annotated with annotation named `@Default` (from any package) would be used\n+\n+\n+When using a constructor then the names of the parameters of the constructor would be used as the target properties.\n+If the constructor is annoated with an annotation named `@ConstructorProperties` (from any package) then this would be used to get the names of the parameters.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQwNzU4NQ=="}, "originalCommit": {"oid": "8b1559ef73bf230d18096a7174cf140dd778438f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5NTc3Nw==", "bodyText": "How would a name based mapping look like? There is no name for the constructor, they are all the same \ud83d\ude04. However, if there is a public empty constructor then it would use that one", "url": "https://github.com/mapstruct/mapstruct/pull/2074#discussion_r413995777", "createdAt": "2020-04-23T17:41:45Z", "author": {"login": "filiphr"}, "path": "documentation/src/main/asciidoc/chapter-3-defining-a-mapper.asciidoc", "diffHunk": "@@ -528,3 +528,72 @@ Otherwise, you would need to write a custom `BuilderProvider`\n ====\n In case you want to disable using builders then you can use the `NoOpBuilderProvider` by creating a `org.mapstruct.ap.spi.BuilderProvider` file in the `META-INF/services` directory with `org.mapstruct.ap.spi.NoOpBuilderProvider` as it's content.\n ====\n+\n+[[mapping-with-constructors]]\n+=== Using Constructors\n+\n+MapStruct also support using constructors for mapping target types.\n+When doing a mapping MapStruct checks if there is a builder for the type being mapped.\n+If there is no builder, then MapStruct looks for a single accessible constructor.\n+WHen there are multiple constructors then the following is done to pick one that should be used:\n+\n+* If a parameterless constructor exists then it would be used to construct the object and the others would be ignored\n+* If there are multiple constructors then the one annotated with annotation named `@Default` (from any package) would be used\n+\n+\n+When using a constructor then the names of the parameters of the constructor would be used as the target properties.\n+If the constructor is annoated with an annotation named `@ConstructorProperties` (from any package) then this would be used to get the names of the parameters.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQwNzU4NQ=="}, "originalCommit": {"oid": "8b1559ef73bf230d18096a7174cf140dd778438f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk5ODg5OA==", "bodyText": "Wel. I was thinking: you made an annotation @ConstructorProperties? Perhaps we could have a (optional) property in @BeanMapping#targetConstructorProperties. When present it acts as a substitute for the one on the target.\nThinking more about it.. What happens we apply @ConstructorProperties to more than one constructor? Should we allow such case: then how should we handle it? Or should we return an error?", "url": "https://github.com/mapstruct/mapstruct/pull/2074#discussion_r414998898", "createdAt": "2020-04-25T06:53:24Z", "author": {"login": "sjaakd"}, "path": "documentation/src/main/asciidoc/chapter-3-defining-a-mapper.asciidoc", "diffHunk": "@@ -528,3 +528,72 @@ Otherwise, you would need to write a custom `BuilderProvider`\n ====\n In case you want to disable using builders then you can use the `NoOpBuilderProvider` by creating a `org.mapstruct.ap.spi.BuilderProvider` file in the `META-INF/services` directory with `org.mapstruct.ap.spi.NoOpBuilderProvider` as it's content.\n ====\n+\n+[[mapping-with-constructors]]\n+=== Using Constructors\n+\n+MapStruct also support using constructors for mapping target types.\n+When doing a mapping MapStruct checks if there is a builder for the type being mapped.\n+If there is no builder, then MapStruct looks for a single accessible constructor.\n+WHen there are multiple constructors then the following is done to pick one that should be used:\n+\n+* If a parameterless constructor exists then it would be used to construct the object and the others would be ignored\n+* If there are multiple constructors then the one annotated with annotation named `@Default` (from any package) would be used\n+\n+\n+When using a constructor then the names of the parameters of the constructor would be used as the target properties.\n+If the constructor is annoated with an annotation named `@ConstructorProperties` (from any package) then this would be used to get the names of the parameters.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQwNzU4NQ=="}, "originalCommit": {"oid": "8b1559ef73bf230d18096a7174cf140dd778438f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1NDY5MQ==", "bodyText": "I didn't make @ConstructorProperties. Users can either use java.beans.ConstructorProperties (I think that kotlin data classes use this, Lombok as well). Or they can create their own named like that.\n@ConstructorProperties is only used to get the names for the properties. Usually if you don't compile with --parameters the constructor parameters get renamed to var1, var2, etc in the byte code. The annotation is there to be able to distinguish the names of the parameters.\nIf we find more than one applicable constructor (and there is no default empty constructor) then we look for one annotated with an annotation named @Default or we emit a compile error.", "url": "https://github.com/mapstruct/mapstruct/pull/2074#discussion_r415054691", "createdAt": "2020-04-25T12:38:45Z", "author": {"login": "filiphr"}, "path": "documentation/src/main/asciidoc/chapter-3-defining-a-mapper.asciidoc", "diffHunk": "@@ -528,3 +528,72 @@ Otherwise, you would need to write a custom `BuilderProvider`\n ====\n In case you want to disable using builders then you can use the `NoOpBuilderProvider` by creating a `org.mapstruct.ap.spi.BuilderProvider` file in the `META-INF/services` directory with `org.mapstruct.ap.spi.NoOpBuilderProvider` as it's content.\n ====\n+\n+[[mapping-with-constructors]]\n+=== Using Constructors\n+\n+MapStruct also support using constructors for mapping target types.\n+When doing a mapping MapStruct checks if there is a builder for the type being mapped.\n+If there is no builder, then MapStruct looks for a single accessible constructor.\n+WHen there are multiple constructors then the following is done to pick one that should be used:\n+\n+* If a parameterless constructor exists then it would be used to construct the object and the others would be ignored\n+* If there are multiple constructors then the one annotated with annotation named `@Default` (from any package) would be used\n+\n+\n+When using a constructor then the names of the parameters of the constructor would be used as the target properties.\n+If the constructor is annoated with an annotation named `@ConstructorProperties` (from any package) then this would be used to get the names of the parameters.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQwNzU4NQ=="}, "originalCommit": {"oid": "8b1559ef73bf230d18096a7174cf140dd778438f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1NTgzMA==", "bodyText": "I realise that (now). But what about the idea of using the targetConstructorProperties?", "url": "https://github.com/mapstruct/mapstruct/pull/2074#discussion_r415055830", "createdAt": "2020-04-25T12:45:33Z", "author": {"login": "sjaakd"}, "path": "documentation/src/main/asciidoc/chapter-3-defining-a-mapper.asciidoc", "diffHunk": "@@ -528,3 +528,72 @@ Otherwise, you would need to write a custom `BuilderProvider`\n ====\n In case you want to disable using builders then you can use the `NoOpBuilderProvider` by creating a `org.mapstruct.ap.spi.BuilderProvider` file in the `META-INF/services` directory with `org.mapstruct.ap.spi.NoOpBuilderProvider` as it's content.\n ====\n+\n+[[mapping-with-constructors]]\n+=== Using Constructors\n+\n+MapStruct also support using constructors for mapping target types.\n+When doing a mapping MapStruct checks if there is a builder for the type being mapped.\n+If there is no builder, then MapStruct looks for a single accessible constructor.\n+WHen there are multiple constructors then the following is done to pick one that should be used:\n+\n+* If a parameterless constructor exists then it would be used to construct the object and the others would be ignored\n+* If there are multiple constructors then the one annotated with annotation named `@Default` (from any package) would be used\n+\n+\n+When using a constructor then the names of the parameters of the constructor would be used as the target properties.\n+If the constructor is annoated with an annotation named `@ConstructorProperties` (from any package) then this would be used to get the names of the parameters.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQwNzU4NQ=="}, "originalCommit": {"oid": "8b1559ef73bf230d18096a7174cf140dd778438f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA2NDAzMQ==", "bodyText": "You mean to add something on the @BeanMapping?", "url": "https://github.com/mapstruct/mapstruct/pull/2074#discussion_r415064031", "createdAt": "2020-04-25T13:33:18Z", "author": {"login": "filiphr"}, "path": "documentation/src/main/asciidoc/chapter-3-defining-a-mapper.asciidoc", "diffHunk": "@@ -528,3 +528,72 @@ Otherwise, you would need to write a custom `BuilderProvider`\n ====\n In case you want to disable using builders then you can use the `NoOpBuilderProvider` by creating a `org.mapstruct.ap.spi.BuilderProvider` file in the `META-INF/services` directory with `org.mapstruct.ap.spi.NoOpBuilderProvider` as it's content.\n ====\n+\n+[[mapping-with-constructors]]\n+=== Using Constructors\n+\n+MapStruct also support using constructors for mapping target types.\n+When doing a mapping MapStruct checks if there is a builder for the type being mapped.\n+If there is no builder, then MapStruct looks for a single accessible constructor.\n+WHen there are multiple constructors then the following is done to pick one that should be used:\n+\n+* If a parameterless constructor exists then it would be used to construct the object and the others would be ignored\n+* If there are multiple constructors then the one annotated with annotation named `@Default` (from any package) would be used\n+\n+\n+When using a constructor then the names of the parameters of the constructor would be used as the target properties.\n+If the constructor is annoated with an annotation named `@ConstructorProperties` (from any package) then this would be used to get the names of the parameters.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQwNzU4NQ=="}, "originalCommit": {"oid": "8b1559ef73bf230d18096a7174cf140dd778438f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA2NDE5NA==", "bodyText": "exactly..", "url": "https://github.com/mapstruct/mapstruct/pull/2074#discussion_r415064194", "createdAt": "2020-04-25T13:34:15Z", "author": {"login": "sjaakd"}, "path": "documentation/src/main/asciidoc/chapter-3-defining-a-mapper.asciidoc", "diffHunk": "@@ -528,3 +528,72 @@ Otherwise, you would need to write a custom `BuilderProvider`\n ====\n In case you want to disable using builders then you can use the `NoOpBuilderProvider` by creating a `org.mapstruct.ap.spi.BuilderProvider` file in the `META-INF/services` directory with `org.mapstruct.ap.spi.NoOpBuilderProvider` as it's content.\n ====\n+\n+[[mapping-with-constructors]]\n+=== Using Constructors\n+\n+MapStruct also support using constructors for mapping target types.\n+When doing a mapping MapStruct checks if there is a builder for the type being mapped.\n+If there is no builder, then MapStruct looks for a single accessible constructor.\n+WHen there are multiple constructors then the following is done to pick one that should be used:\n+\n+* If a parameterless constructor exists then it would be used to construct the object and the others would be ignored\n+* If there are multiple constructors then the one annotated with annotation named `@Default` (from any package) would be used\n+\n+\n+When using a constructor then the names of the parameters of the constructor would be used as the target properties.\n+If the constructor is annoated with an annotation named `@ConstructorProperties` (from any package) then this would be used to get the names of the parameters.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQwNzU4NQ=="}, "originalCommit": {"oid": "8b1559ef73bf230d18096a7174cf140dd778438f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA3MDQ1MA==", "bodyText": "I think I understand what you mean.  If we have the following class:\npublic class Person {\n\n\n    public Person(String name) {\n        // initialize\n    }\n\n    public Person(String name, String surname) {\n        // initialize\n    }\n}\n\nYou would expect to resolve the multiple constructor by using\n@BeanMapping(targetConstructorProperties = { \"name\", \"surname\" }\n\nI would suggest that we do this separately. Perhaps even wait for some feedback on the entire feature in the initial release, before doing something.", "url": "https://github.com/mapstruct/mapstruct/pull/2074#discussion_r415070450", "createdAt": "2020-04-25T14:10:27Z", "author": {"login": "filiphr"}, "path": "documentation/src/main/asciidoc/chapter-3-defining-a-mapper.asciidoc", "diffHunk": "@@ -528,3 +528,72 @@ Otherwise, you would need to write a custom `BuilderProvider`\n ====\n In case you want to disable using builders then you can use the `NoOpBuilderProvider` by creating a `org.mapstruct.ap.spi.BuilderProvider` file in the `META-INF/services` directory with `org.mapstruct.ap.spi.NoOpBuilderProvider` as it's content.\n ====\n+\n+[[mapping-with-constructors]]\n+=== Using Constructors\n+\n+MapStruct also support using constructors for mapping target types.\n+When doing a mapping MapStruct checks if there is a builder for the type being mapped.\n+If there is no builder, then MapStruct looks for a single accessible constructor.\n+WHen there are multiple constructors then the following is done to pick one that should be used:\n+\n+* If a parameterless constructor exists then it would be used to construct the object and the others would be ignored\n+* If there are multiple constructors then the one annotated with annotation named `@Default` (from any package) would be used\n+\n+\n+When using a constructor then the names of the parameters of the constructor would be used as the target properties.\n+If the constructor is annoated with an annotation named `@ConstructorProperties` (from any package) then this would be used to get the names of the parameters.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQwNzU4NQ=="}, "originalCommit": {"oid": "8b1559ef73bf230d18096a7174cf140dd778438f"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MjU2MTIzOnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/chapter-3-defining-a-mapper.asciidoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxODo1Mzo0OFrOGJTfFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNzo0MTo1OFrOGK0Tjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQwOTYyMw==", "bodyText": "What about String name  and String surname?", "url": "https://github.com/mapstruct/mapstruct/pull/2074#discussion_r412409623", "createdAt": "2020-04-21T18:53:48Z", "author": {"login": "sjaakd"}, "path": "documentation/src/main/asciidoc/chapter-3-defining-a-mapper.asciidoc", "diffHunk": "@@ -528,3 +528,72 @@ Otherwise, you would need to write a custom `BuilderProvider`\n ====\n In case you want to disable using builders then you can use the `NoOpBuilderProvider` by creating a `org.mapstruct.ap.spi.BuilderProvider` file in the `META-INF/services` directory with `org.mapstruct.ap.spi.NoOpBuilderProvider` as it's content.\n ====\n+\n+[[mapping-with-constructors]]\n+=== Using Constructors\n+\n+MapStruct also support using constructors for mapping target types.\n+When doing a mapping MapStruct checks if there is a builder for the type being mapped.\n+If there is no builder, then MapStruct looks for a single accessible constructor.\n+WHen there are multiple constructors then the following is done to pick one that should be used:\n+\n+* If a parameterless constructor exists then it would be used to construct the object and the others would be ignored\n+* If there are multiple constructors then the one annotated with annotation named `@Default` (from any package) would be used\n+\n+\n+When using a constructor then the names of the parameters of the constructor would be used as the target properties.\n+If the constructor is annoated with an annotation named `@ConstructorProperties` (from any package) then this would be used to get the names of the parameters.\n+\n+\n+.Person with constructor parameters\n+====\n+[source, java, linenums]\n+[subs=\"verbatim,attributes\"]\n+----\n+public class Person {\n+\n+    private final String name;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1559ef73bf230d18096a7174cf140dd778438f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5NTkxOA==", "bodyText": "Yup will add that as well.", "url": "https://github.com/mapstruct/mapstruct/pull/2074#discussion_r413995918", "createdAt": "2020-04-23T17:41:58Z", "author": {"login": "filiphr"}, "path": "documentation/src/main/asciidoc/chapter-3-defining-a-mapper.asciidoc", "diffHunk": "@@ -528,3 +528,72 @@ Otherwise, you would need to write a custom `BuilderProvider`\n ====\n In case you want to disable using builders then you can use the `NoOpBuilderProvider` by creating a `org.mapstruct.ap.spi.BuilderProvider` file in the `META-INF/services` directory with `org.mapstruct.ap.spi.NoOpBuilderProvider` as it's content.\n ====\n+\n+[[mapping-with-constructors]]\n+=== Using Constructors\n+\n+MapStruct also support using constructors for mapping target types.\n+When doing a mapping MapStruct checks if there is a builder for the type being mapped.\n+If there is no builder, then MapStruct looks for a single accessible constructor.\n+WHen there are multiple constructors then the following is done to pick one that should be used:\n+\n+* If a parameterless constructor exists then it would be used to construct the object and the others would be ignored\n+* If there are multiple constructors then the one annotated with annotation named `@Default` (from any package) would be used\n+\n+\n+When using a constructor then the names of the parameters of the constructor would be used as the target properties.\n+If the constructor is annoated with an annotation named `@ConstructorProperties` (from any package) then this would be used to get the names of the parameters.\n+\n+\n+.Person with constructor parameters\n+====\n+[source, java, linenums]\n+[subs=\"verbatim,attributes\"]\n+----\n+public class Person {\n+\n+    private final String name;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQwOTYyMw=="}, "originalCommit": {"oid": "8b1559ef73bf230d18096a7174cf140dd778438f"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MjU3MzkyOnYy", "diffSide": "RIGHT", "path": "processor/src/main/java/org/mapstruct/ap/internal/model/CollectionAssignmentBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxODo1Njo0MFrOGJTmhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNzo0MjoxMlrOGK0UQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQxMTUyNQ==", "bodyText": "targetAccessorType.isFieldAssignment() etc..", "url": "https://github.com/mapstruct/mapstruct/pull/2074#discussion_r412411525", "createdAt": "2020-04-21T18:56:40Z", "author": {"login": "sjaakd"}, "path": "processor/src/main/java/org/mapstruct/ap/internal/model/CollectionAssignmentBuilder.java", "diffHunk": "@@ -130,7 +130,8 @@ public Assignment build() {\n         CollectionMappingStrategyGem cms = method.getOptions().getMapper().getCollectionMappingStrategy();\n         boolean targetImmutable = cms == CollectionMappingStrategyGem.TARGET_IMMUTABLE || targetReadAccessor == null;\n \n-        if ( targetAccessorType == AccessorType.SETTER || targetAccessorType == AccessorType.FIELD ) {\n+        if ( targetAccessorType == AccessorType.SETTER || targetAccessorType == AccessorType.FIELD ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1559ef73bf230d18096a7174cf140dd778438f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5NjA5OA==", "bodyText": "You are correct, will adapt", "url": "https://github.com/mapstruct/mapstruct/pull/2074#discussion_r413996098", "createdAt": "2020-04-23T17:42:12Z", "author": {"login": "filiphr"}, "path": "processor/src/main/java/org/mapstruct/ap/internal/model/CollectionAssignmentBuilder.java", "diffHunk": "@@ -130,7 +130,8 @@ public Assignment build() {\n         CollectionMappingStrategyGem cms = method.getOptions().getMapper().getCollectionMappingStrategy();\n         boolean targetImmutable = cms == CollectionMappingStrategyGem.TARGET_IMMUTABLE || targetReadAccessor == null;\n \n-        if ( targetAccessorType == AccessorType.SETTER || targetAccessorType == AccessorType.FIELD ) {\n+        if ( targetAccessorType == AccessorType.SETTER || targetAccessorType == AccessorType.FIELD ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQxMTUyNQ=="}, "originalCommit": {"oid": "8b1559ef73bf230d18096a7174cf140dd778438f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MjYxODY1OnYy", "diffSide": "RIGHT", "path": "processor/src/test/java/org/mapstruct/ap/test/constructor/constructorproperties/SimpleConstructorPropertiesTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxOTowNjo1OVrOGJUA_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMjo1MDowNVrOGL1DAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQxODMwMQ==", "bodyText": "hmm. do I spot a piece of autobiography", "url": "https://github.com/mapstruct/mapstruct/pull/2074#discussion_r412418301", "createdAt": "2020-04-21T19:06:59Z", "author": {"login": "sjaakd"}, "path": "processor/src/test/java/org/mapstruct/ap/test/constructor/constructorproperties/SimpleConstructorPropertiesTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright MapStruct Authors.\n+ *\n+ * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.mapstruct.ap.test.constructor.constructorproperties;\n+\n+import java.util.Arrays;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mapstruct.ap.test.constructor.ConstructorProperties;\n+import org.mapstruct.ap.test.constructor.PersonDto;\n+import org.mapstruct.ap.testutil.WithClasses;\n+import org.mapstruct.ap.testutil.runner.AnnotationProcessorTestRunner;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+/**\n+ * @author Filip Hrisafov\n+ */\n+@WithClasses({\n+    ConstructorProperties.class,\n+    PersonWithConstructorProperties.class,\n+    PersonDto.class,\n+    SimpleConstructorPropertiesMapper.class\n+})\n+@RunWith(AnnotationProcessorTestRunner.class)\n+public class SimpleConstructorPropertiesTest {\n+\n+    @Test\n+    public void mapDefault() {\n+        PersonDto source = new PersonDto();\n+        source.setName( \"Bob\" );\n+        source.setAge( 30 );\n+        source.setJob( \"Software Engineer\" );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1559ef73bf230d18096a7174cf140dd778438f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1NjY0Mg==", "bodyText": "\ud83d\ude04. Just realized that", "url": "https://github.com/mapstruct/mapstruct/pull/2074#discussion_r415056642", "createdAt": "2020-04-25T12:50:05Z", "author": {"login": "filiphr"}, "path": "processor/src/test/java/org/mapstruct/ap/test/constructor/constructorproperties/SimpleConstructorPropertiesTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright MapStruct Authors.\n+ *\n+ * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.mapstruct.ap.test.constructor.constructorproperties;\n+\n+import java.util.Arrays;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mapstruct.ap.test.constructor.ConstructorProperties;\n+import org.mapstruct.ap.test.constructor.PersonDto;\n+import org.mapstruct.ap.testutil.WithClasses;\n+import org.mapstruct.ap.testutil.runner.AnnotationProcessorTestRunner;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+/**\n+ * @author Filip Hrisafov\n+ */\n+@WithClasses({\n+    ConstructorProperties.class,\n+    PersonWithConstructorProperties.class,\n+    PersonDto.class,\n+    SimpleConstructorPropertiesMapper.class\n+})\n+@RunWith(AnnotationProcessorTestRunner.class)\n+public class SimpleConstructorPropertiesTest {\n+\n+    @Test\n+    public void mapDefault() {\n+        PersonDto source = new PersonDto();\n+        source.setName( \"Bob\" );\n+        source.setAge( 30 );\n+        source.setJob( \"Software Engineer\" );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQxODMwMQ=="}, "originalCommit": {"oid": "8b1559ef73bf230d18096a7174cf140dd778438f"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MjYyNzgwOnYy", "diffSide": "RIGHT", "path": "processor/src/test/java/org/mapstruct/ap/test/constructor/nestedsource/_target/AdderUsageObserver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxOTowOToxNFrOGJUGlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNzo0Mjo0N1rOGK0VxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQxOTczMg==", "bodyText": "are you sure?", "url": "https://github.com/mapstruct/mapstruct/pull/2074#discussion_r412419732", "createdAt": "2020-04-21T19:09:14Z", "author": {"login": "sjaakd"}, "path": "processor/src/test/java/org/mapstruct/ap/test/constructor/nestedsource/_target/AdderUsageObserver.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright MapStruct Authors.\n+ *\n+ * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.mapstruct.ap.test.constructor.nestedsource._target;\n+\n+/**\n+ * @author Sjaak Derksen", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1559ef73bf230d18096a7174cf140dd778438f"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5NjQ4NQ==", "bodyText": "Yes (although I need to delete this one it is not used). I copied a lot of classes that you created for other things so I kept the name \ud83d\ude04", "url": "https://github.com/mapstruct/mapstruct/pull/2074#discussion_r413996485", "createdAt": "2020-04-23T17:42:47Z", "author": {"login": "filiphr"}, "path": "processor/src/test/java/org/mapstruct/ap/test/constructor/nestedsource/_target/AdderUsageObserver.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright MapStruct Authors.\n+ *\n+ * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.mapstruct.ap.test.constructor.nestedsource._target;\n+\n+/**\n+ * @author Sjaak Derksen", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQxOTczMg=="}, "originalCommit": {"oid": "8b1559ef73bf230d18096a7174cf140dd778438f"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MDcwMDc3OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/chapter-3-defining-a-mapper.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMzoxOTo1OVrOGL1XKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMzoxOTo1OVrOGL1XKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA2MTgwMA==", "bodyText": "I would be a bit more verbose .. the others  == other constructors", "url": "https://github.com/mapstruct/mapstruct/pull/2074#discussion_r415061800", "createdAt": "2020-04-25T13:19:59Z", "author": {"login": "sjaakd"}, "path": "documentation/src/main/asciidoc/chapter-3-defining-a-mapper.asciidoc", "diffHunk": "@@ -532,17 +532,22 @@ In case you want to disable using builders then you can use the `NoOpBuilderProv\n [[mapping-with-constructors]]\n === Using Constructors\n \n-MapStruct also support using constructors for mapping target types.\n+MapStruct supports using constructors for mapping target types.\n When doing a mapping MapStruct checks if there is a builder for the type being mapped.\n If there is no builder, then MapStruct looks for a single accessible constructor.\n-WHen there are multiple constructors then the following is done to pick one that should be used:\n+When there are multiple constructors then the following is done to pick the one which should be used:\n \n-* If a parameterless constructor exists then it would be used to construct the object and the others would be ignored\n-* If there are multiple constructors then the one annotated with annotation named `@Default` (from any package) would be used\n+* If a parameterless constructor exists then it would be used to construct the object, and the others will be ignored", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97810a9f9ca70a3d21bb83d32c24b6061cf13ca4"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MDcwMjEzOnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/chapter-3-defining-a-mapper.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMzoyMDozOVrOGL1Xuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMzoyMDozOVrOGL1Xuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA2MTk0Nw==", "bodyText": "used and matched to the target property names", "url": "https://github.com/mapstruct/mapstruct/pull/2074#discussion_r415061947", "createdAt": "2020-04-25T13:20:39Z", "author": {"login": "sjaakd"}, "path": "documentation/src/main/asciidoc/chapter-3-defining-a-mapper.asciidoc", "diffHunk": "@@ -532,17 +532,22 @@ In case you want to disable using builders then you can use the `NoOpBuilderProv\n [[mapping-with-constructors]]\n === Using Constructors\n \n-MapStruct also support using constructors for mapping target types.\n+MapStruct supports using constructors for mapping target types.\n When doing a mapping MapStruct checks if there is a builder for the type being mapped.\n If there is no builder, then MapStruct looks for a single accessible constructor.\n-WHen there are multiple constructors then the following is done to pick one that should be used:\n+When there are multiple constructors then the following is done to pick the one which should be used:\n \n-* If a parameterless constructor exists then it would be used to construct the object and the others would be ignored\n-* If there are multiple constructors then the one annotated with annotation named `@Default` (from any package) would be used\n+* If a parameterless constructor exists then it would be used to construct the object, and the others will be ignored\n+* If there are multiple constructors then the one annotated with annotation named `@Default` (from any package) will be used\n \n+When using a constructor then the names of the parameters of the constructor will be used as the target properties.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97810a9f9ca70a3d21bb83d32c24b6061cf13ca4"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MDcwMzkyOnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/chapter-3-defining-a-mapper.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMzoyMToyOFrOGL1YgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMzoyMToyOFrOGL1YgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA2MjE0NQ==", "bodyText": "this = this annotation", "url": "https://github.com/mapstruct/mapstruct/pull/2074#discussion_r415062145", "createdAt": "2020-04-25T13:21:28Z", "author": {"login": "sjaakd"}, "path": "documentation/src/main/asciidoc/chapter-3-defining-a-mapper.asciidoc", "diffHunk": "@@ -532,17 +532,22 @@ In case you want to disable using builders then you can use the `NoOpBuilderProv\n [[mapping-with-constructors]]\n === Using Constructors\n \n-MapStruct also support using constructors for mapping target types.\n+MapStruct supports using constructors for mapping target types.\n When doing a mapping MapStruct checks if there is a builder for the type being mapped.\n If there is no builder, then MapStruct looks for a single accessible constructor.\n-WHen there are multiple constructors then the following is done to pick one that should be used:\n+When there are multiple constructors then the following is done to pick the one which should be used:\n \n-* If a parameterless constructor exists then it would be used to construct the object and the others would be ignored\n-* If there are multiple constructors then the one annotated with annotation named `@Default` (from any package) would be used\n+* If a parameterless constructor exists then it would be used to construct the object, and the others will be ignored\n+* If there are multiple constructors then the one annotated with annotation named `@Default` (from any package) will be used\n \n+When using a constructor then the names of the parameters of the constructor will be used as the target properties.\n+When the constructor has an annotation named `@ConstructorProperties` (from any package) then this will be used to get the names of the parameters.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97810a9f9ca70a3d21bb83d32c24b6061cf13ca4"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MDcwNzczOnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/chapter-3-defining-a-mapper.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMzoyNDoyMFrOGL1aJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMzoyNDoyMFrOGL1aJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA2MjU2Ng==", "bodyText": "..\nWhen an object factory method or a method annotated with @ObjectFactory exist, it will take precedence over any constructor defined in the target.", "url": "https://github.com/mapstruct/mapstruct/pull/2074#discussion_r415062566", "createdAt": "2020-04-25T13:24:20Z", "author": {"login": "sjaakd"}, "path": "documentation/src/main/asciidoc/chapter-3-defining-a-mapper.asciidoc", "diffHunk": "@@ -532,17 +532,22 @@ In case you want to disable using builders then you can use the `NoOpBuilderProv\n [[mapping-with-constructors]]\n === Using Constructors\n \n-MapStruct also support using constructors for mapping target types.\n+MapStruct supports using constructors for mapping target types.\n When doing a mapping MapStruct checks if there is a builder for the type being mapped.\n If there is no builder, then MapStruct looks for a single accessible constructor.\n-WHen there are multiple constructors then the following is done to pick one that should be used:\n+When there are multiple constructors then the following is done to pick the one which should be used:\n \n-* If a parameterless constructor exists then it would be used to construct the object and the others would be ignored\n-* If there are multiple constructors then the one annotated with annotation named `@Default` (from any package) would be used\n+* If a parameterless constructor exists then it would be used to construct the object, and the others will be ignored\n+* If there are multiple constructors then the one annotated with annotation named `@Default` (from any package) will be used\n \n+When using a constructor then the names of the parameters of the constructor will be used as the target properties.\n+When the constructor has an annotation named `@ConstructorProperties` (from any package) then this will be used to get the names of the parameters.\n \n-When using a constructor then the names of the parameters of the constructor would be used as the target properties.\n-If the constructor is annoated with an annotation named `@ConstructorProperties` (from any package) then this would be used to get the names of the parameters.\n+[NOTE]\n+====\n+When an `@ObjectFactory` exists for a given target then that will have a precedence.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97810a9f9ca70a3d21bb83d32c24b6061cf13ca4"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4207, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}