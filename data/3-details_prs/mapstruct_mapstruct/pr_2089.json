{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyNTc3NzM1", "number": 2089, "title": "Add EnumTransformationStrategy SPI ", "bodyText": "Add a new custom EnumTransformationStrategy SPI which can be used for providing custom way of name based mapping for enums.\nWith this it would be possible to achieve what is needed in #796, #1220, #1789.\nDocumentation is still missing, but if we agree on the SPI then I can add that as well.\n@seime would appreciate your feedback on this as well", "createdAt": "2020-05-03T09:57:44Z", "url": "https://github.com/mapstruct/mapstruct/pull/2089", "merged": true, "mergeCommit": {"oid": "7b5a54971f9b9695a88b9d95dd9eadec42da5a19"}, "closed": true, "closedAt": "2020-05-18T05:17:31Z", "author": {"login": "filiphr"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcdny7wgH2gAyNDEyNTc3NzM1OjBlZTg2Yzc1YTJkZjE5NjhjMWY2YTA1MDAzOWZiMTk2YzRhNzcxODc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcd8whFgFqTQwNDg1OTM5OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0ee86c75a2df1968c1f6a050039fb196c4a77187", "author": {"user": {"login": "filiphr", "name": "Filip Hrisafov"}}, "url": "https://github.com/mapstruct/mapstruct/commit/0ee86c75a2df1968c1f6a050039fb196c4a77187", "committedDate": "2020-05-03T09:51:49Z", "message": "Spike EnumTransformationStrategy"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NjExNzAw", "url": "https://github.com/mapstruct/mapstruct/pull/2089#pullrequestreview-404611700", "createdAt": "2020-05-03T12:07:04Z", "commit": {"oid": "0ee86c75a2df1968c1f6a050039fb196c4a77187"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxMjowNzowNFrOGPrepw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxMjoxMTo1OFrOGPrg8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA5NDE4Mw==", "bodyText": "Maybe a different name then type? As far as I understood this has to be the same value than nameTransformStrategy in the new EnumMapping annotation?", "url": "https://github.com/mapstruct/mapstruct/pull/2089#discussion_r419094183", "createdAt": "2020-05-03T12:07:04Z", "author": {"login": "chris922"}, "path": "processor/src/main/java/org/mapstruct/ap/spi/SuffixEnumTransformationStrategy.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright MapStruct Authors.\n+ *\n+ * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.mapstruct.ap.spi;\n+\n+/**\n+ * @author Filip Hrisafov\n+ */\n+public class SuffixEnumTransformationStrategy implements EnumTransformationStrategy {\n+\n+    @Override\n+    public String getType() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ee86c75a2df1968c1f6a050039fb196c4a77187"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA5NDQ0Mw==", "bodyText": "What are the reasons to have a new annotation and not reusing ValueMapping? Isn't ValueMapping also meant for enumerations?", "url": "https://github.com/mapstruct/mapstruct/pull/2089#discussion_r419094443", "createdAt": "2020-05-03T12:09:20Z", "author": {"login": "chris922"}, "path": "core/src/main/java/org/mapstruct/EnumMapping.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright MapStruct Authors.\n+ *\n+ * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.mapstruct;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * @author Filip Hrisafov\n+ */\n+@Target(ElementType.METHOD)\n+@Retention(RetentionPolicy.CLASS)\n+public @interface EnumMapping {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ee86c75a2df1968c1f6a050039fb196c4a77187"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA5NDUwOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                String nameTransformStrategy();\n          \n          \n            \n                String nameTransformationStrategy();\n          \n      \n    \n    \n  \n\n?", "url": "https://github.com/mapstruct/mapstruct/pull/2089#discussion_r419094509", "createdAt": "2020-05-03T12:09:46Z", "author": {"login": "chris922"}, "path": "core/src/main/java/org/mapstruct/EnumMapping.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright MapStruct Authors.\n+ *\n+ * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.mapstruct;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * @author Filip Hrisafov\n+ */\n+@Target(ElementType.METHOD)\n+@Retention(RetentionPolicy.CLASS)\n+public @interface EnumMapping {\n+\n+    String nameTransformStrategy();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ee86c75a2df1968c1f6a050039fb196c4a77187"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA5NDc3MQ==", "bodyText": "Null check required or could it never be null when build is called? The initializeEnumTransformationStrategy that will be called after this if-clause includes a null check", "url": "https://github.com/mapstruct/mapstruct/pull/2089#discussion_r419094771", "createdAt": "2020-05-03T12:11:58Z", "author": {"login": "chris922"}, "path": "processor/src/main/java/org/mapstruct/ap/internal/model/ValueMappingMethod.java", "diffHunk": "@@ -61,7 +67,18 @@ public Builder valueMappings(List<ValueMappingOptions> valueMappings) {\n             return this;\n         }\n \n-        public ValueMappingMethod build( ) {\n+        public Builder enumMapping(EnumMappingOptions enumMapping) {\n+            this.enumMapping = enumMapping;\n+            return this;\n+        }\n+\n+        public ValueMappingMethod build() {\n+\n+            if ( !enumMapping.isValid() ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ee86c75a2df1968c1f6a050039fb196c4a77187"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "117dacb831d4b3681f26cfd1c7a724dedf3501b3", "author": {"user": {"login": "filiphr", "name": "Filip Hrisafov"}}, "url": "https://github.com/mapstruct/mapstruct/commit/117dacb831d4b3681f26cfd1c7a724dedf3501b3", "committedDate": "2020-05-03T17:27:34Z", "message": "Apply review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "659fe28b79a550058a209ca12aff5c41c82e2794", "author": {"user": {"login": "filiphr", "name": "Filip Hrisafov"}}, "url": "https://github.com/mapstruct/mapstruct/commit/659fe28b79a550058a209ca12aff5c41c82e2794", "committedDate": "2020-05-03T17:44:12Z", "message": "Add documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bacc9f02135d34a2b79d1431e80bc9921f0b258a", "author": {"user": {"login": "filiphr", "name": "Filip Hrisafov"}}, "url": "https://github.com/mapstruct/mapstruct/commit/bacc9f02135d34a2b79d1431e80bc9921f0b258a", "committedDate": "2020-05-03T17:49:53Z", "message": "Fix typo in javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d619fd4be5f87ef9e58e76e0ed240a06a3964d2", "author": {"user": {"login": "filiphr", "name": "Filip Hrisafov"}}, "url": "https://github.com/mapstruct/mapstruct/commit/1d619fd4be5f87ef9e58e76e0ed240a06a3964d2", "committedDate": "2020-05-03T17:53:01Z", "message": "Use getStrategyName instead of getType"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a0d7decc3d027beb036b9b7dfe57df003a7591a", "author": {"user": {"login": "filiphr", "name": "Filip Hrisafov"}}, "url": "https://github.com/mapstruct/mapstruct/commit/5a0d7decc3d027beb036b9b7dfe57df003a7591a", "committedDate": "2020-05-03T18:04:00Z", "message": "Fix checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NjQzNzA2", "url": "https://github.com/mapstruct/mapstruct/pull/2089#pullrequestreview-404643706", "createdAt": "2020-05-03T18:12:57Z", "commit": {"oid": "5a0d7decc3d027beb036b9b7dfe57df003a7591a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0ODU5Mzk4", "url": "https://github.com/mapstruct/mapstruct/pull/2089#pullrequestreview-404859398", "createdAt": "2020-05-04T10:12:42Z", "commit": {"oid": "5a0d7decc3d027beb036b9b7dfe57df003a7591a"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMDoxMjo0MlrOGP6M6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMDoxNDozMFrOGP6QXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTMzNTQwMw==", "bodyText": "is this the inverse? What happens with inverse mappings?", "url": "https://github.com/mapstruct/mapstruct/pull/2089#discussion_r419335403", "createdAt": "2020-05-04T10:12:42Z", "author": {"login": "sjaakd"}, "path": "documentation/src/main/asciidoc/chapter-8-mapping-values.asciidoc", "diffHunk": "@@ -159,3 +159,106 @@ MapStruct supports enum to a String mapping along the same lines as is described\n 2. Similarity: `<ANY_UNMAPPED`> stops after handling defined mapping and proceeds to the switch/default clause value.\n 3. Similarity: `<ANY_REMAINING>` will create a mapping for each target enum constant and proceed to the switch/default clause value.\n 4. Difference: A switch/default value needs to be provided to have a determined outcome (enum has a limited set of values, `String` has unlimited options). Failing to specify `<ANY_REMAINING>` or `<ANY_UNMAPPED`> will result in a warning.\n+\n+=== Custom name transformation\n+\n+When no `@ValueMapping`(s) are defined then each constant from the source enum is mapped to a constant with the same name in the target enum type.\n+However, there are cases where the source enum needs to be transformed before doing the mapping.\n+E.g. a suffix needs to be applied to map from the source into the target enum.\n+\n+.Enum types\n+====\n+[source, java, linenums]\n+[subs=\"verbatim,attributes\"]\n+----\n+public enum CheeseType {\n+\n+    BRIE,\n+    ROQUEFORT\n+}\n+\n+public enum CheeseTypeSuffixed {\n+\n+    BRIE_TYPE,\n+    ROQUEFORT_TYPE\n+}\n+----\n+====\n+\n+.Enum mapping method with custom name transformation strategy\n+====\n+[source, java, linenums]\n+[subs=\"verbatim,attributes\"]\n+----\n+@Mapper\n+public interface CheeseMapper {\n+\n+    CheeseMapper INSTANCE = Mappers.getMapper( CheeseMapper.class );\n+\n+    @EnumMapping(nameTransformationStrategy = \"suffix\", configuration = \"_TYPE\")\n+    CheeseTypeSuffixed map(CheeseType cheese);\n+\n+    @InheritInverseConfiguration\n+    CheeseType map(CheeseTypeSuffix cheese);\n+}\n+----\n+====\n+\n+.Enum mapping method with custom name transformation strategy result\n+====\n+[source, java, linenums]\n+[subs=\"verbatim,attributes\"]\n+----\n+// GENERATED CODE\n+public class CheeseSuffixMapperImpl implements CheeseSuffixMapper {\n+\n+    @Override\n+    public CheeseTypeSuffixed map(CheeseType cheese) {\n+        if ( cheese == null ) {\n+            return null;\n+        }\n+\n+        CheeseTypeSuffixed cheeseTypeSuffixed;\n+\n+        switch ( cheese ) {\n+            case BRIE: cheeseTypeSuffixed = CheeseTypeSuffixed.BRIE_TYPE;\n+            break;\n+            case ROQUEFORT: cheeseTypeSuffixed = CheeseTypeSuffixed.ROQUEFORT_TYPE;\n+            break;\n+            default: throw new IllegalArgumentException( \"Unexpected enum constant: \" + cheese );\n+        }\n+\n+        return cheeseTypeSuffixed;\n+    }\n+\n+    @Override\n+    public CheeseType map(CheeseTypeSuffixed cheese) {\n+        if ( cheese == null ) {\n+            return null;\n+        }\n+\n+        CheeseType cheeseType;\n+\n+        switch ( cheese ) {\n+            case BRIE_TYPE: cheeseType = CheeseType.BRIE;\n+            break;\n+            case ROQUEFORT_TYPE: cheeseType = CheeseType.ROQUEFORT;\n+            break;\n+            default: throw new IllegalArgumentException( \"Unexpected enum constant: \" + cheese );\n+        }\n+\n+        return cheeseType;\n+    }\n+}\n+----\n+====\n+\n+MapStruct provides the following out of the box enum name transformation strategies:\n+\n+* _suffix_ - Applies a suffix on the source enum\n+* _stripSuffix_ - Strips a suffix from the source enum", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a0d7decc3d027beb036b9b7dfe57df003a7591a"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTMzNjI4NA==", "bodyText": "ah.. here it is..", "url": "https://github.com/mapstruct/mapstruct/pull/2089#discussion_r419336284", "createdAt": "2020-05-04T10:14:30Z", "author": {"login": "sjaakd"}, "path": "processor/src/main/java/org/mapstruct/ap/internal/model/source/EnumMappingOptions.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright MapStruct Authors.\n+ *\n+ * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.mapstruct.ap.internal.model.source;\n+\n+import java.util.Map;\n+import javax.lang.model.element.ExecutableElement;\n+\n+import org.mapstruct.ap.internal.gem.EnumMappingGem;\n+import org.mapstruct.ap.internal.util.FormattingMessager;\n+import org.mapstruct.ap.internal.util.Strings;\n+import org.mapstruct.ap.spi.EnumTransformationStrategy;\n+\n+import static org.mapstruct.ap.internal.util.Message.ENUMMAPPING_INCORRECT_TRANSFORMATION_STRATEGY;\n+\n+/**\n+ * @author Filip Hrisafov\n+ */\n+public class EnumMappingOptions extends DelegatingOptions {\n+\n+    private final EnumMappingGem enumMapping;\n+    private final boolean inverse;\n+    private final boolean valid;\n+\n+    private EnumMappingOptions(EnumMappingGem enumMapping, boolean inverse, boolean valid, DelegatingOptions next) {\n+        super( next );\n+        this.enumMapping = enumMapping;\n+        this.inverse = inverse;\n+        this.valid = valid;\n+    }\n+\n+    @Override\n+    public boolean hasAnnotation() {\n+        return enumMapping != null;\n+    }\n+\n+    public boolean isValid() {\n+        return valid;\n+    }\n+\n+    public String getNameTransformationStrategy() {\n+        return enumMapping.nameTransformationStrategy().get();\n+    }\n+\n+    public String getNameTransformationConfiguration() {\n+        return enumMapping.configuration().get();\n+    }\n+\n+    public boolean isInverse() {\n+        return inverse;\n+    }\n+\n+    public EnumMappingOptions inverse() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a0d7decc3d027beb036b9b7dfe57df003a7591a"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4527, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}