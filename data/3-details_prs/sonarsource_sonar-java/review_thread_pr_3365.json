{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1Mzg5NTA2", "number": 3365, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwOTowNjoyOVrOFJeZcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxNDozMTozOFrOFKGMGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NDc5NTM4OnYy", "diffSide": "RIGHT", "path": "java-checks-test-sources/src/main/java/checks/DateTimeFormatterMismatch.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwOTowNjoyOVrOIL02JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwOTowNjoyOVrOIL02JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI3MTA3Ng==", "bodyText": "For completeness, we could add 2 tests for ofPattern: one where the argument is not a string literal, and another where the pattern does not contain any of the character we're looking for", "url": "https://github.com/SonarSource/sonar-java/pull/3365#discussion_r549271076", "createdAt": "2020-12-28T09:06:29Z", "author": {"login": "christophe-zurn-sonarsource"}, "path": "java-checks-test-sources/src/main/java/checks/DateTimeFormatterMismatch.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package checks;\n+\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeFormatterBuilder;\n+import java.time.temporal.ChronoField;\n+import java.time.temporal.WeekFields;\n+import java.util.Locale;\n+\n+public class DateTimeFormatterMismatch {\n+  public void createUsingPatterns() {\n+    DateTimeFormatter.ofPattern(\"Y-ww\"); // Compliant\n+    DateTimeFormatter.ofPattern(\"YY-ww\"); // Compliant", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eea7ccc802d7c40291044097a5927a4cf2baa8f"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NDgwMjM0OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/DateTimeFormatterMismatchCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwOTowOTo0M1rOIL06Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwOTowOTo0M1rOIL06Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI3MjA3MQ==", "bodyText": "RSPEC message in that case is Change this year format to use ChronoField.YEAR instead. Is there a reason why the message here is different ? I think the message from RSPEC makes more sense following the primary and secondary locations that we want to highlight", "url": "https://github.com/SonarSource/sonar-java/pull/3365#discussion_r549272071", "createdAt": "2020-12-28T09:09:43Z", "author": {"login": "christophe-zurn-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/DateTimeFormatterMismatchCheck.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.LiteralTree;\n+import org.sonar.plugins.java.api.tree.MemberSelectExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5917\")\n+public class DateTimeFormatterMismatchCheck extends IssuableSubscriptionVisitor {\n+  private static final MethodMatchers OF_PATTERN_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.format.DateTimeFormatter\")\n+    .names(\"ofPattern\")\n+    .addParametersMatcher(\"java.lang.String\")\n+    .addParametersMatcher(\"java.lang.String\", \"java.util.Locale\")\n+    .build();\n+\n+  private static final MethodMatchers APPEND_VALUE_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.format.DateTimeFormatterBuilder\")\n+    .names(\"appendValue\")\n+    .addParametersMatcher(\"java.time.temporal.TemporalField\", \"int\")\n+    .build();\n+\n+  private static final MethodMatchers DATE_TIME_FORMATTER_BUILDER = MethodMatchers.create()\n+    .ofTypes(\"java.time.format.DateTimeFormatterBuilder\")\n+    .names(\"toFormatter\")\n+    .addParametersMatcher()\n+    .build();\n+\n+  private static final Pattern WEEK_PATTERN = Pattern.compile(\".*ww{1,2}.*\");\n+  private static final Pattern YEAR_OF_ERA_PATTERN = Pattern.compile(\".*[uy]+.*\");\n+\n+  private static final String CHANGE_WEEK_FORMAT_MESSAGE = \"Change this week format to use the week of week-based year instead.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eea7ccc802d7c40291044097a5927a4cf2baa8f"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NDg0MTg3OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/DateTimeFormatterMismatchCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwOToyNjozOFrOIL1Pmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwOToyNjozOFrOIL1Pmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI3NzU5NQ==", "bodyText": "Why do we want to check the last expression type here ? We could also try to catch the following cases:\nDateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();\nreturn builder.appendValue(WeekFields.ISO.weekBasedYear(), 4) // Noncompliant\n      .appendLiteral('-')\n      .appendValue(ChronoField.ALIGNED_WEEK_OF_YEAR, 2)\n      .toFormatter();", "url": "https://github.com/SonarSource/sonar-java/pull/3365#discussion_r549277595", "createdAt": "2020-12-28T09:26:38Z", "author": {"login": "christophe-zurn-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/DateTimeFormatterMismatchCheck.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.LiteralTree;\n+import org.sonar.plugins.java.api.tree.MemberSelectExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5917\")\n+public class DateTimeFormatterMismatchCheck extends IssuableSubscriptionVisitor {\n+  private static final MethodMatchers OF_PATTERN_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.format.DateTimeFormatter\")\n+    .names(\"ofPattern\")\n+    .addParametersMatcher(\"java.lang.String\")\n+    .addParametersMatcher(\"java.lang.String\", \"java.util.Locale\")\n+    .build();\n+\n+  private static final MethodMatchers APPEND_VALUE_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.format.DateTimeFormatterBuilder\")\n+    .names(\"appendValue\")\n+    .addParametersMatcher(\"java.time.temporal.TemporalField\", \"int\")\n+    .build();\n+\n+  private static final MethodMatchers DATE_TIME_FORMATTER_BUILDER = MethodMatchers.create()\n+    .ofTypes(\"java.time.format.DateTimeFormatterBuilder\")\n+    .names(\"toFormatter\")\n+    .addParametersMatcher()\n+    .build();\n+\n+  private static final Pattern WEEK_PATTERN = Pattern.compile(\".*ww{1,2}.*\");\n+  private static final Pattern YEAR_OF_ERA_PATTERN = Pattern.compile(\".*[uy]+.*\");\n+\n+  private static final String CHANGE_WEEK_FORMAT_MESSAGE = \"Change this week format to use the week of week-based year instead.\";\n+  private static final String CHANGE_YEAR_FORMAT_MESSAGE = \"Change this year format to use the week-based year instead.\";\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.METHOD_INVOCATION);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    MethodInvocationTree invocation = (MethodInvocationTree) tree;\n+    if (OF_PATTERN_MATCHER.matches(invocation)) {\n+      visitPattern(invocation);\n+    } else if (DATE_TIME_FORMATTER_BUILDER.matches(invocation)) {\n+      visitBuildChain(invocation);\n+    }\n+  }\n+\n+  private void visitPattern(MethodInvocationTree invocation) {\n+    Arguments arguments = invocation.arguments();\n+    ExpressionTree argument = arguments.get(0);\n+    if (argument.is(Tree.Kind.STRING_LITERAL)) {\n+      String pattern = ((LiteralTree) argument).value();\n+      if (WEEK_PATTERN.matcher(pattern).matches() && YEAR_OF_ERA_PATTERN.matcher(pattern).matches()) {\n+        reportIssue(invocation, CHANGE_YEAR_FORMAT_MESSAGE);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Walking back through an invocation chain from a call to DateTimeFormatterBuilder.toFormatter looking for calls to appendValue.\n+   * If conflicting week and year settings are detected, an issue is reported\n+   * @param invocation A call to DateTimeFormatterBuilder.toFormatter\n+   */\n+  private void visitBuildChain(MethodInvocationTree invocation) {\n+    boolean usesWeekBasedYear = false;\n+    boolean usesWeekOfWeekBasedYear = false;\n+    Tree wanderer = invocation.methodSelect();\n+    while (wanderer != null && wanderer.is(Tree.Kind.MEMBER_SELECT)) {\n+      ExpressionTree expression = ((MemberSelectExpressionTree) wanderer).expression();\n+      if (!expression.is(Tree.Kind.METHOD_INVOCATION)) {\n+        break;\n+      }\n+      MethodInvocationTree mit = (MethodInvocationTree) expression;\n+      if (APPEND_VALUE_MATCHER.matches(mit)) {\n+        usesWeekBasedYear |= isWeekBasedYearUsed(mit);\n+        usesWeekOfWeekBasedYear |= isWeekOfWeekBasedYearUsed(mit);\n+      }\n+      wanderer = mit.methodSelect();\n+    }\n+    if (wanderer == null) {\n+      return;\n+    }\n+    ExpressionTree lastExpression = ((MemberSelectExpressionTree) wanderer).expression();\n+    if (!lastExpression.is(Tree.Kind.NEW_CLASS)) {\n+      return;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eea7ccc802d7c40291044097a5927a4cf2baa8f"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NDg0ODEzOnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/DateTimeFormatterMismatchCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwOToyOTozNlrOIL1TGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwOToyOTozNlrOIL1TGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI3ODQ5MQ==", "bodyText": "From the RSPEC, I believe the tree we want to report the issue on is not the toFormatter method invocation, but the appendValue on which we have the year, with secondary location being the appendValue invocation on which the weeks are appended.", "url": "https://github.com/SonarSource/sonar-java/pull/3365#discussion_r549278491", "createdAt": "2020-12-28T09:29:36Z", "author": {"login": "christophe-zurn-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/DateTimeFormatterMismatchCheck.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.LiteralTree;\n+import org.sonar.plugins.java.api.tree.MemberSelectExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5917\")\n+public class DateTimeFormatterMismatchCheck extends IssuableSubscriptionVisitor {\n+  private static final MethodMatchers OF_PATTERN_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.format.DateTimeFormatter\")\n+    .names(\"ofPattern\")\n+    .addParametersMatcher(\"java.lang.String\")\n+    .addParametersMatcher(\"java.lang.String\", \"java.util.Locale\")\n+    .build();\n+\n+  private static final MethodMatchers APPEND_VALUE_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.format.DateTimeFormatterBuilder\")\n+    .names(\"appendValue\")\n+    .addParametersMatcher(\"java.time.temporal.TemporalField\", \"int\")\n+    .build();\n+\n+  private static final MethodMatchers DATE_TIME_FORMATTER_BUILDER = MethodMatchers.create()\n+    .ofTypes(\"java.time.format.DateTimeFormatterBuilder\")\n+    .names(\"toFormatter\")\n+    .addParametersMatcher()\n+    .build();\n+\n+  private static final Pattern WEEK_PATTERN = Pattern.compile(\".*ww{1,2}.*\");\n+  private static final Pattern YEAR_OF_ERA_PATTERN = Pattern.compile(\".*[uy]+.*\");\n+\n+  private static final String CHANGE_WEEK_FORMAT_MESSAGE = \"Change this week format to use the week of week-based year instead.\";\n+  private static final String CHANGE_YEAR_FORMAT_MESSAGE = \"Change this year format to use the week-based year instead.\";\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.METHOD_INVOCATION);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    MethodInvocationTree invocation = (MethodInvocationTree) tree;\n+    if (OF_PATTERN_MATCHER.matches(invocation)) {\n+      visitPattern(invocation);\n+    } else if (DATE_TIME_FORMATTER_BUILDER.matches(invocation)) {\n+      visitBuildChain(invocation);\n+    }\n+  }\n+\n+  private void visitPattern(MethodInvocationTree invocation) {\n+    Arguments arguments = invocation.arguments();\n+    ExpressionTree argument = arguments.get(0);\n+    if (argument.is(Tree.Kind.STRING_LITERAL)) {\n+      String pattern = ((LiteralTree) argument).value();\n+      if (WEEK_PATTERN.matcher(pattern).matches() && YEAR_OF_ERA_PATTERN.matcher(pattern).matches()) {\n+        reportIssue(invocation, CHANGE_YEAR_FORMAT_MESSAGE);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Walking back through an invocation chain from a call to DateTimeFormatterBuilder.toFormatter looking for calls to appendValue.\n+   * If conflicting week and year settings are detected, an issue is reported\n+   * @param invocation A call to DateTimeFormatterBuilder.toFormatter\n+   */\n+  private void visitBuildChain(MethodInvocationTree invocation) {\n+    boolean usesWeekBasedYear = false;\n+    boolean usesWeekOfWeekBasedYear = false;\n+    Tree wanderer = invocation.methodSelect();\n+    while (wanderer != null && wanderer.is(Tree.Kind.MEMBER_SELECT)) {\n+      ExpressionTree expression = ((MemberSelectExpressionTree) wanderer).expression();\n+      if (!expression.is(Tree.Kind.METHOD_INVOCATION)) {\n+        break;\n+      }\n+      MethodInvocationTree mit = (MethodInvocationTree) expression;\n+      if (APPEND_VALUE_MATCHER.matches(mit)) {\n+        usesWeekBasedYear |= isWeekBasedYearUsed(mit);\n+        usesWeekOfWeekBasedYear |= isWeekOfWeekBasedYearUsed(mit);\n+      }\n+      wanderer = mit.methodSelect();\n+    }\n+    if (wanderer == null) {\n+      return;\n+    }\n+    ExpressionTree lastExpression = ((MemberSelectExpressionTree) wanderer).expression();\n+    if (!lastExpression.is(Tree.Kind.NEW_CLASS)) {\n+      return;\n+    }\n+    if (usesWeekBasedYear && !usesWeekOfWeekBasedYear) {\n+      reportIssue(invocation, CHANGE_WEEK_FORMAT_MESSAGE);\n+    } else if (!usesWeekBasedYear && usesWeekOfWeekBasedYear) {\n+      reportIssue(invocation, CHANGE_YEAR_FORMAT_MESSAGE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eea7ccc802d7c40291044097a5927a4cf2baa8f"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NDg1OTQwOnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/DateTimeFormatterMismatchCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwOTozNDo1OVrOIL1ZNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwOTozNDo1OVrOIL1ZNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI4MDA1NQ==", "bodyText": "I think we can remove the wanderer != null check here: methodSelect() is not annotated as nullable, so it is assumed never to be null", "url": "https://github.com/SonarSource/sonar-java/pull/3365#discussion_r549280055", "createdAt": "2020-12-28T09:34:59Z", "author": {"login": "christophe-zurn-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/DateTimeFormatterMismatchCheck.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.LiteralTree;\n+import org.sonar.plugins.java.api.tree.MemberSelectExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5917\")\n+public class DateTimeFormatterMismatchCheck extends IssuableSubscriptionVisitor {\n+  private static final MethodMatchers OF_PATTERN_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.format.DateTimeFormatter\")\n+    .names(\"ofPattern\")\n+    .addParametersMatcher(\"java.lang.String\")\n+    .addParametersMatcher(\"java.lang.String\", \"java.util.Locale\")\n+    .build();\n+\n+  private static final MethodMatchers APPEND_VALUE_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.format.DateTimeFormatterBuilder\")\n+    .names(\"appendValue\")\n+    .addParametersMatcher(\"java.time.temporal.TemporalField\", \"int\")\n+    .build();\n+\n+  private static final MethodMatchers DATE_TIME_FORMATTER_BUILDER = MethodMatchers.create()\n+    .ofTypes(\"java.time.format.DateTimeFormatterBuilder\")\n+    .names(\"toFormatter\")\n+    .addParametersMatcher()\n+    .build();\n+\n+  private static final Pattern WEEK_PATTERN = Pattern.compile(\".*ww{1,2}.*\");\n+  private static final Pattern YEAR_OF_ERA_PATTERN = Pattern.compile(\".*[uy]+.*\");\n+\n+  private static final String CHANGE_WEEK_FORMAT_MESSAGE = \"Change this week format to use the week of week-based year instead.\";\n+  private static final String CHANGE_YEAR_FORMAT_MESSAGE = \"Change this year format to use the week-based year instead.\";\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.METHOD_INVOCATION);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    MethodInvocationTree invocation = (MethodInvocationTree) tree;\n+    if (OF_PATTERN_MATCHER.matches(invocation)) {\n+      visitPattern(invocation);\n+    } else if (DATE_TIME_FORMATTER_BUILDER.matches(invocation)) {\n+      visitBuildChain(invocation);\n+    }\n+  }\n+\n+  private void visitPattern(MethodInvocationTree invocation) {\n+    Arguments arguments = invocation.arguments();\n+    ExpressionTree argument = arguments.get(0);\n+    if (argument.is(Tree.Kind.STRING_LITERAL)) {\n+      String pattern = ((LiteralTree) argument).value();\n+      if (WEEK_PATTERN.matcher(pattern).matches() && YEAR_OF_ERA_PATTERN.matcher(pattern).matches()) {\n+        reportIssue(invocation, CHANGE_YEAR_FORMAT_MESSAGE);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Walking back through an invocation chain from a call to DateTimeFormatterBuilder.toFormatter looking for calls to appendValue.\n+   * If conflicting week and year settings are detected, an issue is reported\n+   * @param invocation A call to DateTimeFormatterBuilder.toFormatter\n+   */\n+  private void visitBuildChain(MethodInvocationTree invocation) {\n+    boolean usesWeekBasedYear = false;\n+    boolean usesWeekOfWeekBasedYear = false;\n+    Tree wanderer = invocation.methodSelect();\n+    while (wanderer != null && wanderer.is(Tree.Kind.MEMBER_SELECT)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eea7ccc802d7c40291044097a5927a4cf2baa8f"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NDg3MzEzOnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/DateTimeFormatterMismatchCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwOTo0MToxNFrOIL1gog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwOTo0MToxNFrOIL1gog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI4MTk1NA==", "bodyText": "With these checks, we will currenlty raise FP in the following 2 cases:\n    new DateTimeFormatterBuilder() // Noncompliant - FP\n      .appendValue(WeekFields.ISO.weekBasedYear(), 4)\n      .toFormatter();\n\n    new DateTimeFormatterBuilder() // Noncompliant - FP\n      .appendValue(WeekFields.ISO.weekOfWeekBasedYear(), 2)\n      .toFormatter();\n\nWe should only take into account cases where the year and week are explicitely set to mismatching format", "url": "https://github.com/SonarSource/sonar-java/pull/3365#discussion_r549281954", "createdAt": "2020-12-28T09:41:14Z", "author": {"login": "christophe-zurn-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/DateTimeFormatterMismatchCheck.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.LiteralTree;\n+import org.sonar.plugins.java.api.tree.MemberSelectExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5917\")\n+public class DateTimeFormatterMismatchCheck extends IssuableSubscriptionVisitor {\n+  private static final MethodMatchers OF_PATTERN_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.format.DateTimeFormatter\")\n+    .names(\"ofPattern\")\n+    .addParametersMatcher(\"java.lang.String\")\n+    .addParametersMatcher(\"java.lang.String\", \"java.util.Locale\")\n+    .build();\n+\n+  private static final MethodMatchers APPEND_VALUE_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.format.DateTimeFormatterBuilder\")\n+    .names(\"appendValue\")\n+    .addParametersMatcher(\"java.time.temporal.TemporalField\", \"int\")\n+    .build();\n+\n+  private static final MethodMatchers DATE_TIME_FORMATTER_BUILDER = MethodMatchers.create()\n+    .ofTypes(\"java.time.format.DateTimeFormatterBuilder\")\n+    .names(\"toFormatter\")\n+    .addParametersMatcher()\n+    .build();\n+\n+  private static final Pattern WEEK_PATTERN = Pattern.compile(\".*ww{1,2}.*\");\n+  private static final Pattern YEAR_OF_ERA_PATTERN = Pattern.compile(\".*[uy]+.*\");\n+\n+  private static final String CHANGE_WEEK_FORMAT_MESSAGE = \"Change this week format to use the week of week-based year instead.\";\n+  private static final String CHANGE_YEAR_FORMAT_MESSAGE = \"Change this year format to use the week-based year instead.\";\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.METHOD_INVOCATION);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    MethodInvocationTree invocation = (MethodInvocationTree) tree;\n+    if (OF_PATTERN_MATCHER.matches(invocation)) {\n+      visitPattern(invocation);\n+    } else if (DATE_TIME_FORMATTER_BUILDER.matches(invocation)) {\n+      visitBuildChain(invocation);\n+    }\n+  }\n+\n+  private void visitPattern(MethodInvocationTree invocation) {\n+    Arguments arguments = invocation.arguments();\n+    ExpressionTree argument = arguments.get(0);\n+    if (argument.is(Tree.Kind.STRING_LITERAL)) {\n+      String pattern = ((LiteralTree) argument).value();\n+      if (WEEK_PATTERN.matcher(pattern).matches() && YEAR_OF_ERA_PATTERN.matcher(pattern).matches()) {\n+        reportIssue(invocation, CHANGE_YEAR_FORMAT_MESSAGE);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Walking back through an invocation chain from a call to DateTimeFormatterBuilder.toFormatter looking for calls to appendValue.\n+   * If conflicting week and year settings are detected, an issue is reported\n+   * @param invocation A call to DateTimeFormatterBuilder.toFormatter\n+   */\n+  private void visitBuildChain(MethodInvocationTree invocation) {\n+    boolean usesWeekBasedYear = false;\n+    boolean usesWeekOfWeekBasedYear = false;\n+    Tree wanderer = invocation.methodSelect();\n+    while (wanderer != null && wanderer.is(Tree.Kind.MEMBER_SELECT)) {\n+      ExpressionTree expression = ((MemberSelectExpressionTree) wanderer).expression();\n+      if (!expression.is(Tree.Kind.METHOD_INVOCATION)) {\n+        break;\n+      }\n+      MethodInvocationTree mit = (MethodInvocationTree) expression;\n+      if (APPEND_VALUE_MATCHER.matches(mit)) {\n+        usesWeekBasedYear |= isWeekBasedYearUsed(mit);\n+        usesWeekOfWeekBasedYear |= isWeekOfWeekBasedYearUsed(mit);\n+      }\n+      wanderer = mit.methodSelect();\n+    }\n+    if (wanderer == null) {\n+      return;\n+    }\n+    ExpressionTree lastExpression = ((MemberSelectExpressionTree) wanderer).expression();\n+    if (!lastExpression.is(Tree.Kind.NEW_CLASS)) {\n+      return;\n+    }\n+    if (usesWeekBasedYear && !usesWeekOfWeekBasedYear) {\n+      reportIssue(invocation, CHANGE_WEEK_FORMAT_MESSAGE);\n+    } else if (!usesWeekBasedYear && usesWeekOfWeekBasedYear) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eea7ccc802d7c40291044097a5927a4cf2baa8f"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NDg3NjgzOnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/DateTimeFormatterMismatchCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwOTo0MzoxM1rOIL1i1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwOTo0MzoxM1rOIL1i1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI4MjUxOQ==", "bodyText": "We could use MethodMatchers for checking these invocations", "url": "https://github.com/SonarSource/sonar-java/pull/3365#discussion_r549282519", "createdAt": "2020-12-28T09:43:13Z", "author": {"login": "christophe-zurn-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/DateTimeFormatterMismatchCheck.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.LiteralTree;\n+import org.sonar.plugins.java.api.tree.MemberSelectExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5917\")\n+public class DateTimeFormatterMismatchCheck extends IssuableSubscriptionVisitor {\n+  private static final MethodMatchers OF_PATTERN_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.format.DateTimeFormatter\")\n+    .names(\"ofPattern\")\n+    .addParametersMatcher(\"java.lang.String\")\n+    .addParametersMatcher(\"java.lang.String\", \"java.util.Locale\")\n+    .build();\n+\n+  private static final MethodMatchers APPEND_VALUE_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.format.DateTimeFormatterBuilder\")\n+    .names(\"appendValue\")\n+    .addParametersMatcher(\"java.time.temporal.TemporalField\", \"int\")\n+    .build();\n+\n+  private static final MethodMatchers DATE_TIME_FORMATTER_BUILDER = MethodMatchers.create()\n+    .ofTypes(\"java.time.format.DateTimeFormatterBuilder\")\n+    .names(\"toFormatter\")\n+    .addParametersMatcher()\n+    .build();\n+\n+  private static final Pattern WEEK_PATTERN = Pattern.compile(\".*ww{1,2}.*\");\n+  private static final Pattern YEAR_OF_ERA_PATTERN = Pattern.compile(\".*[uy]+.*\");\n+\n+  private static final String CHANGE_WEEK_FORMAT_MESSAGE = \"Change this week format to use the week of week-based year instead.\";\n+  private static final String CHANGE_YEAR_FORMAT_MESSAGE = \"Change this year format to use the week-based year instead.\";\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.METHOD_INVOCATION);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    MethodInvocationTree invocation = (MethodInvocationTree) tree;\n+    if (OF_PATTERN_MATCHER.matches(invocation)) {\n+      visitPattern(invocation);\n+    } else if (DATE_TIME_FORMATTER_BUILDER.matches(invocation)) {\n+      visitBuildChain(invocation);\n+    }\n+  }\n+\n+  private void visitPattern(MethodInvocationTree invocation) {\n+    Arguments arguments = invocation.arguments();\n+    ExpressionTree argument = arguments.get(0);\n+    if (argument.is(Tree.Kind.STRING_LITERAL)) {\n+      String pattern = ((LiteralTree) argument).value();\n+      if (WEEK_PATTERN.matcher(pattern).matches() && YEAR_OF_ERA_PATTERN.matcher(pattern).matches()) {\n+        reportIssue(invocation, CHANGE_YEAR_FORMAT_MESSAGE);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Walking back through an invocation chain from a call to DateTimeFormatterBuilder.toFormatter looking for calls to appendValue.\n+   * If conflicting week and year settings are detected, an issue is reported\n+   * @param invocation A call to DateTimeFormatterBuilder.toFormatter\n+   */\n+  private void visitBuildChain(MethodInvocationTree invocation) {\n+    boolean usesWeekBasedYear = false;\n+    boolean usesWeekOfWeekBasedYear = false;\n+    Tree wanderer = invocation.methodSelect();\n+    while (wanderer != null && wanderer.is(Tree.Kind.MEMBER_SELECT)) {\n+      ExpressionTree expression = ((MemberSelectExpressionTree) wanderer).expression();\n+      if (!expression.is(Tree.Kind.METHOD_INVOCATION)) {\n+        break;\n+      }\n+      MethodInvocationTree mit = (MethodInvocationTree) expression;\n+      if (APPEND_VALUE_MATCHER.matches(mit)) {\n+        usesWeekBasedYear |= isWeekBasedYearUsed(mit);\n+        usesWeekOfWeekBasedYear |= isWeekOfWeekBasedYearUsed(mit);\n+      }\n+      wanderer = mit.methodSelect();\n+    }\n+    if (wanderer == null) {\n+      return;\n+    }\n+    ExpressionTree lastExpression = ((MemberSelectExpressionTree) wanderer).expression();\n+    if (!lastExpression.is(Tree.Kind.NEW_CLASS)) {\n+      return;\n+    }\n+    if (usesWeekBasedYear && !usesWeekOfWeekBasedYear) {\n+      reportIssue(invocation, CHANGE_WEEK_FORMAT_MESSAGE);\n+    } else if (!usesWeekBasedYear && usesWeekOfWeekBasedYear) {\n+      reportIssue(invocation, CHANGE_YEAR_FORMAT_MESSAGE);\n+    }\n+  }\n+\n+  private static boolean isWeekBasedYearUsed(MethodInvocationTree invocation) {\n+    Arguments arguments = invocation.arguments();\n+    ExpressionTree argument = arguments.get(0);\n+    if (argument.is(Tree.Kind.METHOD_INVOCATION)) {\n+      MethodInvocationTree call = (MethodInvocationTree) argument;\n+      Symbol symbol = call.symbol();\n+      return symbol.name().equals(\"weekBasedYear\");\n+    }\n+    return false;\n+  }\n+\n+  private static boolean isWeekOfWeekBasedYearUsed(MethodInvocationTree invocation) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eea7ccc802d7c40291044097a5927a4cf2baa8f"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MDMyMTk0OnYy", "diffSide": "RIGHT", "path": "java-checks-test-sources/src/main/java/checks/DateTimeFormatterMismatch.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwOTowNToyOFrOIMk6sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwOTowNToyOFrOIMk6sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDA1ODY3NQ==", "bodyText": "For completeness, we could add an additional test case to document that we do not consider consecutive calls, which is ok:\nDateTimeFormatterBuilder builder2 = new DateTimeFormatterBuilder();\nbuilder2.appendValue(ChronoField.YEAR, 4); // FN - consecutive calls on builders are not taken into account\nbuilder2.appendLiteral('-');\nbuilder2.appendValue(WeekFields.ISO.weekOfWeekBasedYear(), 2);\nbuilder2.toFormatter();", "url": "https://github.com/SonarSource/sonar-java/pull/3365#discussion_r550058675", "createdAt": "2020-12-30T09:05:28Z", "author": {"login": "christophe-zurn-sonarsource"}, "path": "java-checks-test-sources/src/main/java/checks/DateTimeFormatterMismatch.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package checks;\n+\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeFormatterBuilder;\n+import java.time.temporal.ChronoField;\n+import java.time.temporal.WeekFields;\n+import java.util.Locale;\n+\n+public class DateTimeFormatterMismatch {\n+  private static final String COMPLIANT_PATTERN = \"Y-ww\";\n+  private static final String NON_COMPLIANT_PATTERN = \"y-ww\";\n+  private static final String IRRELEVANT_PATTERN = \"m\";\n+  private static final String NON_INITIALIZED_PATTERN = null;\n+  private String compliantAndNonFinalPattern = \"Y-ww\";\n+  private String nonCompliantAndNonFinalPattern = \"y-ww\";\n+\n+  public void createUsingPatterns() {\n+    DateTimeFormatter.ofPattern(COMPLIANT_PATTERN); // Compliant\n+    DateTimeFormatter.ofPattern(IRRELEVANT_PATTERN); // Compliant\n+    DateTimeFormatter.ofPattern(NON_INITIALIZED_PATTERN); // Compliant\n+    DateTimeFormatter.ofPattern(compliantAndNonFinalPattern); // Compliant\n+    DateTimeFormatter.ofPattern(nonCompliantAndNonFinalPattern); // Compliant FN\n+    DateTimeFormatter.ofPattern(\"Y-ww\"); // Compliant\n+    DateTimeFormatter.ofPattern(\"YY-ww\"); // Compliant\n+    DateTimeFormatter.ofPattern(\"YYY-ww\"); // Compliant\n+    DateTimeFormatter.ofPattern(\"YYYY-ww\"); // Compliant\n+    DateTimeFormatter.ofPattern(COMPLIANT_PATTERN, Locale.ENGLISH); // Compliant\n+    DateTimeFormatter.ofPattern(IRRELEVANT_PATTERN, Locale.ENGLISH); // Compliant\n+    DateTimeFormatter.ofPattern(NON_INITIALIZED_PATTERN, Locale.ENGLISH); // Compliant\n+    DateTimeFormatter.ofPattern(\"Y-ww\", Locale.ENGLISH); // Compliant\n+    DateTimeFormatter.ofPattern(\"YY-ww\", Locale.ENGLISH); // Compliant\n+    DateTimeFormatter.ofPattern(\"YYY-ww\", Locale.ENGLISH); // Compliant\n+    DateTimeFormatter.ofPattern(\"YYYY-ww\", Locale.ENGLISH); // Compliant\n+\n+\n+    //The bad stuff\n+    DateTimeFormatter.ofPattern(NON_COMPLIANT_PATTERN); // Noncompliant\n+    DateTimeFormatter.ofPattern(\"y-ww\"); // Noncompliant\n+    DateTimeFormatter.ofPattern(\"yy-ww\"); // Noncompliant\n+    DateTimeFormatter.ofPattern(\"yyy-ww\"); // Noncompliant\n+    DateTimeFormatter.ofPattern(\"yyyy-ww\"); // Noncompliant\n+    DateTimeFormatter.ofPattern(NON_COMPLIANT_PATTERN, Locale.ENGLISH); // Noncompliant\n+    DateTimeFormatter.ofPattern(\"y-ww\", Locale.ENGLISH); // Noncompliant\n+    DateTimeFormatter.ofPattern(\"yy-ww\", Locale.ENGLISH); // Noncompliant\n+    DateTimeFormatter.ofPattern(\"yyy-ww\", Locale.ENGLISH); // Noncompliant\n+    DateTimeFormatter.ofPattern(\"yyyy-ww\", Locale.ENGLISH); // Noncompliant\n+\n+\n+    DateTimeFormatter.ofPattern(\"w\"); // Compliant\n+    DateTimeFormatter.ofPattern(\"ww\"); // Compliant\n+    DateTimeFormatter.ofPattern(\"w\", Locale.ENGLISH); // Compliant\n+    DateTimeFormatter.ofPattern(\"ww\", Locale.ENGLISH); // Compliant\n+\n+\n+    DateTimeFormatter.ofPattern(\"u-ww\"); // Noncompliant\n+    DateTimeFormatter.ofPattern(\"uu-ww\"); // Noncompliant\n+    DateTimeFormatter.ofPattern(\"uuuu-ww\"); // Noncompliant\n+    DateTimeFormatter.ofPattern(\"u-ww\", Locale.ENGLISH); // Noncompliant\n+    DateTimeFormatter.ofPattern(\"uu-ww\", Locale.ENGLISH); // Noncompliant\n+    DateTimeFormatter.ofPattern(\"uuuu-ww\", Locale.ENGLISH); // Noncompliant\n+  }\n+\n+  public void createUsingBuilder() {\n+    new DateTimeFormatterBuilder()\n+      .appendValue(ChronoField.YEAR, 4) // Noncompliant [[sc=20;ec=36;secondary=+2]] {{Change this year format to use the week-based year instead.}}\n+      .appendLiteral('-')\n+      .appendValue(WeekFields.ISO.weekOfWeekBasedYear(), 2)\n+      .toFormatter();\n+\n+    new DateTimeFormatterBuilder()\n+      .appendValue(WeekFields.ISO.weekBasedYear(), 4) // Noncompliant [[sc=20;ec=50;secondary=+2]] {{Change this year format to use ChronoField.YEAR instead.}}\n+      .appendLiteral('-')\n+      .appendValue(ChronoField.ALIGNED_WEEK_OF_YEAR, 2)\n+      .toFormatter();\n+\n+    new DateTimeFormatterBuilder() // Compliant\n+      .appendValue(WeekFields.ISO.weekBasedYear(), 4)\n+      .appendLiteral('-')\n+      .appendValue(WeekFields.ISO.weekOfWeekBasedYear(), 2)\n+      .toFormatter();\n+\n+    new DateTimeFormatterBuilder() // Compliant\n+      .appendValue(ChronoField.YEAR, 4)\n+      .appendLiteral('-')\n+      .appendValue(ChronoField.ALIGNED_WEEK_OF_YEAR, 2)\n+      .toFormatter();\n+\n+    DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder()\n+      .appendValue(ChronoField.YEAR, 4) // Noncompliant [[sc=20;ec=36]]\n+      .appendLiteral('-')\n+      .appendValue(WeekFields.ISO.weekOfWeekBasedYear(), 2);\n+\n+    builder.toFormatter();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4092ae818831caedf0adc208832d47e8111f864a"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MDQxNTczOnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/DateTimeFormatterMismatchCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwOToyNTo1MFrOIMl29A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwOToyNTo1MFrOIMl29A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDA3NDEwMA==", "bodyText": "For clarity, I suggest to replace this with addWithoutParametersMatcher:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                .addParametersMatcher()\n          \n          \n            \n                .addWithoutParametersMatcher()", "url": "https://github.com/SonarSource/sonar-java/pull/3365#discussion_r550074100", "createdAt": "2020-12-30T09:25:50Z", "author": {"login": "christophe-zurn-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/DateTimeFormatterMismatchCheck.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.BaseTreeVisitor;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.LiteralTree;\n+import org.sonar.plugins.java.api.tree.MemberSelectExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+import org.sonar.plugins.java.api.tree.VariableTree;\n+\n+@Rule(key = \"S5917\")\n+public class DateTimeFormatterMismatchCheck extends IssuableSubscriptionVisitor {\n+  private static final MethodMatchers OF_PATTERN_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.format.DateTimeFormatter\")\n+    .names(\"ofPattern\")\n+    .addParametersMatcher(\"java.lang.String\")\n+    .addParametersMatcher(\"java.lang.String\", \"java.util.Locale\")\n+    .build();\n+\n+  private static final MethodMatchers APPEND_VALUE_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.format.DateTimeFormatterBuilder\")\n+    .names(\"appendValue\")\n+    .addParametersMatcher(\"java.time.temporal.TemporalField\", \"int\")\n+    .build();\n+\n+  private static final MethodMatchers WEEK_BASED_YEAR_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.temporal.WeekFields\")\n+    .names(\"weekBasedYear\")\n+    .addParametersMatcher()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4092ae818831caedf0adc208832d47e8111f864a"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MDQxNjQ0OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/DateTimeFormatterMismatchCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwOToyNTo1NlrOIMl3Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwOToyNTo1NlrOIMl3Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDA3NDE5MA==", "bodyText": "For clarity, I suggest to replace this with addWithoutParametersMatcher:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                .addParametersMatcher()\n          \n          \n            \n                .addWithoutParametersMatcher()", "url": "https://github.com/SonarSource/sonar-java/pull/3365#discussion_r550074190", "createdAt": "2020-12-30T09:25:56Z", "author": {"login": "christophe-zurn-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/DateTimeFormatterMismatchCheck.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.BaseTreeVisitor;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.LiteralTree;\n+import org.sonar.plugins.java.api.tree.MemberSelectExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+import org.sonar.plugins.java.api.tree.VariableTree;\n+\n+@Rule(key = \"S5917\")\n+public class DateTimeFormatterMismatchCheck extends IssuableSubscriptionVisitor {\n+  private static final MethodMatchers OF_PATTERN_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.format.DateTimeFormatter\")\n+    .names(\"ofPattern\")\n+    .addParametersMatcher(\"java.lang.String\")\n+    .addParametersMatcher(\"java.lang.String\", \"java.util.Locale\")\n+    .build();\n+\n+  private static final MethodMatchers APPEND_VALUE_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.format.DateTimeFormatterBuilder\")\n+    .names(\"appendValue\")\n+    .addParametersMatcher(\"java.time.temporal.TemporalField\", \"int\")\n+    .build();\n+\n+  private static final MethodMatchers WEEK_BASED_YEAR_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.temporal.WeekFields\")\n+    .names(\"weekBasedYear\")\n+    .addParametersMatcher()\n+    .build();\n+\n+  private static final MethodMatchers WEEK_OF_WEEK_BASED_YEAR_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.temporal.WeekFields\")\n+    .names(\"weekOfWeekBasedYear\")\n+    .addParametersMatcher()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4092ae818831caedf0adc208832d47e8111f864a"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MDQyMjI0OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/DateTimeFormatterMismatchCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwOToyNjo1N1rOIMl63Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwOToyNjo1N1rOIMl63Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDA3NTEwMQ==", "bodyText": "We can make this inner class private", "url": "https://github.com/SonarSource/sonar-java/pull/3365#discussion_r550075101", "createdAt": "2020-12-30T09:26:57Z", "author": {"login": "christophe-zurn-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/DateTimeFormatterMismatchCheck.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.BaseTreeVisitor;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.LiteralTree;\n+import org.sonar.plugins.java.api.tree.MemberSelectExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+import org.sonar.plugins.java.api.tree.VariableTree;\n+\n+@Rule(key = \"S5917\")\n+public class DateTimeFormatterMismatchCheck extends IssuableSubscriptionVisitor {\n+  private static final MethodMatchers OF_PATTERN_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.format.DateTimeFormatter\")\n+    .names(\"ofPattern\")\n+    .addParametersMatcher(\"java.lang.String\")\n+    .addParametersMatcher(\"java.lang.String\", \"java.util.Locale\")\n+    .build();\n+\n+  private static final MethodMatchers APPEND_VALUE_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.format.DateTimeFormatterBuilder\")\n+    .names(\"appendValue\")\n+    .addParametersMatcher(\"java.time.temporal.TemporalField\", \"int\")\n+    .build();\n+\n+  private static final MethodMatchers WEEK_BASED_YEAR_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.temporal.WeekFields\")\n+    .names(\"weekBasedYear\")\n+    .addParametersMatcher()\n+    .build();\n+\n+  private static final MethodMatchers WEEK_OF_WEEK_BASED_YEAR_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.temporal.WeekFields\")\n+    .names(\"weekOfWeekBasedYear\")\n+    .addParametersMatcher()\n+    .build();\n+\n+  private static final Pattern WEEK_PATTERN = Pattern.compile(\".*ww{1,2}.*\");\n+  private static final Pattern YEAR_OF_ERA_PATTERN = Pattern.compile(\".*[uy]+.*\");\n+\n+  private static final String CHANGE_YEAR_FORMAT_WEEK_BASED_MESSAGE = \"Change this year format to use the week-based year instead.\";\n+  private static final String CHANGE_YEAR_FORMAT_TO_CHRONOFIELD_MESSAGE = \"Change this year format to use ChronoField.YEAR instead.\";\n+  private static final String SECONDARY_LOCATION_MESSAGE = \"\";\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.METHOD_INVOCATION);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    MethodInvocationTree invocation = (MethodInvocationTree) tree;\n+    if (OF_PATTERN_MATCHER.matches(invocation)) {\n+      visitPattern(invocation);\n+    } else if (APPEND_VALUE_MATCHER.matches(invocation)) {\n+      ChainVisitor visitor = new ChainVisitor();\n+      invocation.accept(visitor);\n+      if (!visitor.usesWeek || !visitor.usesYear) {\n+        return;\n+      }\n+      if (visitor.usesWeekBasedYear && !visitor.usesWeekOfWeekBasedYear) {\n+        reportIssue(visitor.primary, CHANGE_YEAR_FORMAT_TO_CHRONOFIELD_MESSAGE, visitor.locations, null);\n+      } else if (!visitor.usesWeekBasedYear && visitor.usesWeekOfWeekBasedYear) {\n+        reportIssue(visitor.primary, CHANGE_YEAR_FORMAT_WEEK_BASED_MESSAGE, visitor.locations, null);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * We currently only check formatters initialized with a String literal or the value of a final variable.\n+   */\n+  private void visitPattern(MethodInvocationTree invocation) {\n+    Arguments arguments = invocation.arguments();\n+    ExpressionTree argument = arguments.get(0);\n+    if (argument.is(Tree.Kind.STRING_LITERAL)) {\n+      String pattern = ((LiteralTree) argument).value();\n+      if (isInfringingPattern(pattern)) {\n+        reportIssue(invocation, CHANGE_YEAR_FORMAT_WEEK_BASED_MESSAGE);\n+      }\n+    } else if (argument.is(Tree.Kind.IDENTIFIER)) {\n+      IdentifierTree identifier = (IdentifierTree) argument;\n+      Symbol symbol = identifier.symbol();\n+      if (!symbol.isFinal()) {\n+        return;\n+      }\n+      Tree declaration = symbol.declaration();\n+      if (declaration == null || !declaration.is(Tree.Kind.VARIABLE)) {\n+        return;\n+      }\n+      VariableTree variable = (VariableTree) declaration;\n+      ExpressionTree initializer = variable.initializer();\n+      if (initializer == null || !initializer.is(Tree.Kind.STRING_LITERAL)) {\n+        return;\n+      }\n+      String pattern = ((LiteralTree) initializer).value();\n+      if (isInfringingPattern(pattern)) {\n+        reportIssue(invocation, CHANGE_YEAR_FORMAT_WEEK_BASED_MESSAGE);\n+      }\n+    }\n+  }\n+\n+  private static boolean isInfringingPattern(String pattern) {\n+    return WEEK_PATTERN.matcher(pattern).matches() && YEAR_OF_ERA_PATTERN.matcher(pattern).matches();\n+  }\n+\n+  public static boolean refersToWeek(ExpressionTree argument) {\n+    return isChronoFieldWeek(argument) || isWeekOfWeekBasedYearUsed(argument);\n+  }\n+\n+  private static boolean isWeekOfWeekBasedYearUsed(ExpressionTree argument) {\n+    if (argument.is(Tree.Kind.METHOD_INVOCATION)) {\n+      MethodInvocationTree call = (MethodInvocationTree) argument;\n+      return WEEK_OF_WEEK_BASED_YEAR_MATCHER.matches(call);\n+    }\n+    return false;\n+  }\n+\n+  public static boolean isChronoFieldWeek(ExpressionTree argument) {\n+    if (argument.is(Tree.Kind.MEMBER_SELECT)) {\n+      MemberSelectExpressionTree select = (MemberSelectExpressionTree) argument;\n+      IdentifierTree identifier = select.identifier();\n+      return identifier.name().equals(\"ALIGNED_WEEK_OF_YEAR\");\n+    }\n+    return false;\n+  }\n+\n+  public static boolean refersToYear(ExpressionTree argument) {\n+    return isChronoFieldYear(argument) || isWeekBasedYearUsed(argument);\n+  }\n+\n+  private static boolean isWeekBasedYearUsed(ExpressionTree argument) {\n+    if (argument.is(Tree.Kind.METHOD_INVOCATION)) {\n+      MethodInvocationTree call = (MethodInvocationTree) argument;\n+      return WEEK_BASED_YEAR_MATCHER.matches(call);\n+    }\n+    return false;\n+  }\n+\n+  public static boolean isChronoFieldYear(ExpressionTree argument) {\n+    if (argument.is(Tree.Kind.MEMBER_SELECT)) {\n+      MemberSelectExpressionTree select = (MemberSelectExpressionTree) argument;\n+      IdentifierTree identifier = select.identifier();\n+      return identifier.name().equals(\"YEAR\");\n+    }\n+    return false;\n+  }\n+\n+  static class ChainVisitor extends BaseTreeVisitor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4092ae818831caedf0adc208832d47e8111f864a"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MDQzNjY4OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/DateTimeFormatterMismatchCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwOToyOTo1NVrOIMmEaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwOToyOTo1NVrOIMmEaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDA3NzU0Nw==", "bodyText": "You can make all these public static methods private, they are not needed to be public, and they can all be moved inside the inner ChainVisitor class", "url": "https://github.com/SonarSource/sonar-java/pull/3365#discussion_r550077547", "createdAt": "2020-12-30T09:29:55Z", "author": {"login": "christophe-zurn-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/DateTimeFormatterMismatchCheck.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.BaseTreeVisitor;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.LiteralTree;\n+import org.sonar.plugins.java.api.tree.MemberSelectExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+import org.sonar.plugins.java.api.tree.VariableTree;\n+\n+@Rule(key = \"S5917\")\n+public class DateTimeFormatterMismatchCheck extends IssuableSubscriptionVisitor {\n+  private static final MethodMatchers OF_PATTERN_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.format.DateTimeFormatter\")\n+    .names(\"ofPattern\")\n+    .addParametersMatcher(\"java.lang.String\")\n+    .addParametersMatcher(\"java.lang.String\", \"java.util.Locale\")\n+    .build();\n+\n+  private static final MethodMatchers APPEND_VALUE_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.format.DateTimeFormatterBuilder\")\n+    .names(\"appendValue\")\n+    .addParametersMatcher(\"java.time.temporal.TemporalField\", \"int\")\n+    .build();\n+\n+  private static final MethodMatchers WEEK_BASED_YEAR_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.temporal.WeekFields\")\n+    .names(\"weekBasedYear\")\n+    .addParametersMatcher()\n+    .build();\n+\n+  private static final MethodMatchers WEEK_OF_WEEK_BASED_YEAR_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.temporal.WeekFields\")\n+    .names(\"weekOfWeekBasedYear\")\n+    .addParametersMatcher()\n+    .build();\n+\n+  private static final Pattern WEEK_PATTERN = Pattern.compile(\".*ww{1,2}.*\");\n+  private static final Pattern YEAR_OF_ERA_PATTERN = Pattern.compile(\".*[uy]+.*\");\n+\n+  private static final String CHANGE_YEAR_FORMAT_WEEK_BASED_MESSAGE = \"Change this year format to use the week-based year instead.\";\n+  private static final String CHANGE_YEAR_FORMAT_TO_CHRONOFIELD_MESSAGE = \"Change this year format to use ChronoField.YEAR instead.\";\n+  private static final String SECONDARY_LOCATION_MESSAGE = \"\";\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.METHOD_INVOCATION);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    MethodInvocationTree invocation = (MethodInvocationTree) tree;\n+    if (OF_PATTERN_MATCHER.matches(invocation)) {\n+      visitPattern(invocation);\n+    } else if (APPEND_VALUE_MATCHER.matches(invocation)) {\n+      ChainVisitor visitor = new ChainVisitor();\n+      invocation.accept(visitor);\n+      if (!visitor.usesWeek || !visitor.usesYear) {\n+        return;\n+      }\n+      if (visitor.usesWeekBasedYear && !visitor.usesWeekOfWeekBasedYear) {\n+        reportIssue(visitor.primary, CHANGE_YEAR_FORMAT_TO_CHRONOFIELD_MESSAGE, visitor.locations, null);\n+      } else if (!visitor.usesWeekBasedYear && visitor.usesWeekOfWeekBasedYear) {\n+        reportIssue(visitor.primary, CHANGE_YEAR_FORMAT_WEEK_BASED_MESSAGE, visitor.locations, null);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * We currently only check formatters initialized with a String literal or the value of a final variable.\n+   */\n+  private void visitPattern(MethodInvocationTree invocation) {\n+    Arguments arguments = invocation.arguments();\n+    ExpressionTree argument = arguments.get(0);\n+    if (argument.is(Tree.Kind.STRING_LITERAL)) {\n+      String pattern = ((LiteralTree) argument).value();\n+      if (isInfringingPattern(pattern)) {\n+        reportIssue(invocation, CHANGE_YEAR_FORMAT_WEEK_BASED_MESSAGE);\n+      }\n+    } else if (argument.is(Tree.Kind.IDENTIFIER)) {\n+      IdentifierTree identifier = (IdentifierTree) argument;\n+      Symbol symbol = identifier.symbol();\n+      if (!symbol.isFinal()) {\n+        return;\n+      }\n+      Tree declaration = symbol.declaration();\n+      if (declaration == null || !declaration.is(Tree.Kind.VARIABLE)) {\n+        return;\n+      }\n+      VariableTree variable = (VariableTree) declaration;\n+      ExpressionTree initializer = variable.initializer();\n+      if (initializer == null || !initializer.is(Tree.Kind.STRING_LITERAL)) {\n+        return;\n+      }\n+      String pattern = ((LiteralTree) initializer).value();\n+      if (isInfringingPattern(pattern)) {\n+        reportIssue(invocation, CHANGE_YEAR_FORMAT_WEEK_BASED_MESSAGE);\n+      }\n+    }\n+  }\n+\n+  private static boolean isInfringingPattern(String pattern) {\n+    return WEEK_PATTERN.matcher(pattern).matches() && YEAR_OF_ERA_PATTERN.matcher(pattern).matches();\n+  }\n+\n+  public static boolean refersToWeek(ExpressionTree argument) {\n+    return isChronoFieldWeek(argument) || isWeekOfWeekBasedYearUsed(argument);\n+  }\n+\n+  private static boolean isWeekOfWeekBasedYearUsed(ExpressionTree argument) {\n+    if (argument.is(Tree.Kind.METHOD_INVOCATION)) {\n+      MethodInvocationTree call = (MethodInvocationTree) argument;\n+      return WEEK_OF_WEEK_BASED_YEAR_MATCHER.matches(call);\n+    }\n+    return false;\n+  }\n+\n+  public static boolean isChronoFieldWeek(ExpressionTree argument) {\n+    if (argument.is(Tree.Kind.MEMBER_SELECT)) {\n+      MemberSelectExpressionTree select = (MemberSelectExpressionTree) argument;\n+      IdentifierTree identifier = select.identifier();\n+      return identifier.name().equals(\"ALIGNED_WEEK_OF_YEAR\");\n+    }\n+    return false;\n+  }\n+\n+  public static boolean refersToYear(ExpressionTree argument) {\n+    return isChronoFieldYear(argument) || isWeekBasedYearUsed(argument);\n+  }\n+\n+  private static boolean isWeekBasedYearUsed(ExpressionTree argument) {\n+    if (argument.is(Tree.Kind.METHOD_INVOCATION)) {\n+      MethodInvocationTree call = (MethodInvocationTree) argument;\n+      return WEEK_BASED_YEAR_MATCHER.matches(call);\n+    }\n+    return false;\n+  }\n+\n+  public static boolean isChronoFieldYear(ExpressionTree argument) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4092ae818831caedf0adc208832d47e8111f864a"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MDQ2MDA1OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/DateTimeFormatterMismatchCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwOTozNDo0NFrOIMmTrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMjowNjowOFrOIMr0vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDA4MTQ1NA==", "bodyText": "Can we reverse the condition on this if here and not use a break as this is not necessary anymore", "url": "https://github.com/SonarSource/sonar-java/pull/3365#discussion_r550081454", "createdAt": "2020-12-30T09:34:44Z", "author": {"login": "christophe-zurn-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/DateTimeFormatterMismatchCheck.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.BaseTreeVisitor;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.LiteralTree;\n+import org.sonar.plugins.java.api.tree.MemberSelectExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+import org.sonar.plugins.java.api.tree.VariableTree;\n+\n+@Rule(key = \"S5917\")\n+public class DateTimeFormatterMismatchCheck extends IssuableSubscriptionVisitor {\n+  private static final MethodMatchers OF_PATTERN_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.format.DateTimeFormatter\")\n+    .names(\"ofPattern\")\n+    .addParametersMatcher(\"java.lang.String\")\n+    .addParametersMatcher(\"java.lang.String\", \"java.util.Locale\")\n+    .build();\n+\n+  private static final MethodMatchers APPEND_VALUE_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.format.DateTimeFormatterBuilder\")\n+    .names(\"appendValue\")\n+    .addParametersMatcher(\"java.time.temporal.TemporalField\", \"int\")\n+    .build();\n+\n+  private static final MethodMatchers WEEK_BASED_YEAR_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.temporal.WeekFields\")\n+    .names(\"weekBasedYear\")\n+    .addParametersMatcher()\n+    .build();\n+\n+  private static final MethodMatchers WEEK_OF_WEEK_BASED_YEAR_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.temporal.WeekFields\")\n+    .names(\"weekOfWeekBasedYear\")\n+    .addParametersMatcher()\n+    .build();\n+\n+  private static final Pattern WEEK_PATTERN = Pattern.compile(\".*ww{1,2}.*\");\n+  private static final Pattern YEAR_OF_ERA_PATTERN = Pattern.compile(\".*[uy]+.*\");\n+\n+  private static final String CHANGE_YEAR_FORMAT_WEEK_BASED_MESSAGE = \"Change this year format to use the week-based year instead.\";\n+  private static final String CHANGE_YEAR_FORMAT_TO_CHRONOFIELD_MESSAGE = \"Change this year format to use ChronoField.YEAR instead.\";\n+  private static final String SECONDARY_LOCATION_MESSAGE = \"\";\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.METHOD_INVOCATION);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    MethodInvocationTree invocation = (MethodInvocationTree) tree;\n+    if (OF_PATTERN_MATCHER.matches(invocation)) {\n+      visitPattern(invocation);\n+    } else if (APPEND_VALUE_MATCHER.matches(invocation)) {\n+      ChainVisitor visitor = new ChainVisitor();\n+      invocation.accept(visitor);\n+      if (!visitor.usesWeek || !visitor.usesYear) {\n+        return;\n+      }\n+      if (visitor.usesWeekBasedYear && !visitor.usesWeekOfWeekBasedYear) {\n+        reportIssue(visitor.primary, CHANGE_YEAR_FORMAT_TO_CHRONOFIELD_MESSAGE, visitor.locations, null);\n+      } else if (!visitor.usesWeekBasedYear && visitor.usesWeekOfWeekBasedYear) {\n+        reportIssue(visitor.primary, CHANGE_YEAR_FORMAT_WEEK_BASED_MESSAGE, visitor.locations, null);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * We currently only check formatters initialized with a String literal or the value of a final variable.\n+   */\n+  private void visitPattern(MethodInvocationTree invocation) {\n+    Arguments arguments = invocation.arguments();\n+    ExpressionTree argument = arguments.get(0);\n+    if (argument.is(Tree.Kind.STRING_LITERAL)) {\n+      String pattern = ((LiteralTree) argument).value();\n+      if (isInfringingPattern(pattern)) {\n+        reportIssue(invocation, CHANGE_YEAR_FORMAT_WEEK_BASED_MESSAGE);\n+      }\n+    } else if (argument.is(Tree.Kind.IDENTIFIER)) {\n+      IdentifierTree identifier = (IdentifierTree) argument;\n+      Symbol symbol = identifier.symbol();\n+      if (!symbol.isFinal()) {\n+        return;\n+      }\n+      Tree declaration = symbol.declaration();\n+      if (declaration == null || !declaration.is(Tree.Kind.VARIABLE)) {\n+        return;\n+      }\n+      VariableTree variable = (VariableTree) declaration;\n+      ExpressionTree initializer = variable.initializer();\n+      if (initializer == null || !initializer.is(Tree.Kind.STRING_LITERAL)) {\n+        return;\n+      }\n+      String pattern = ((LiteralTree) initializer).value();\n+      if (isInfringingPattern(pattern)) {\n+        reportIssue(invocation, CHANGE_YEAR_FORMAT_WEEK_BASED_MESSAGE);\n+      }\n+    }\n+  }\n+\n+  private static boolean isInfringingPattern(String pattern) {\n+    return WEEK_PATTERN.matcher(pattern).matches() && YEAR_OF_ERA_PATTERN.matcher(pattern).matches();\n+  }\n+\n+  public static boolean refersToWeek(ExpressionTree argument) {\n+    return isChronoFieldWeek(argument) || isWeekOfWeekBasedYearUsed(argument);\n+  }\n+\n+  private static boolean isWeekOfWeekBasedYearUsed(ExpressionTree argument) {\n+    if (argument.is(Tree.Kind.METHOD_INVOCATION)) {\n+      MethodInvocationTree call = (MethodInvocationTree) argument;\n+      return WEEK_OF_WEEK_BASED_YEAR_MATCHER.matches(call);\n+    }\n+    return false;\n+  }\n+\n+  public static boolean isChronoFieldWeek(ExpressionTree argument) {\n+    if (argument.is(Tree.Kind.MEMBER_SELECT)) {\n+      MemberSelectExpressionTree select = (MemberSelectExpressionTree) argument;\n+      IdentifierTree identifier = select.identifier();\n+      return identifier.name().equals(\"ALIGNED_WEEK_OF_YEAR\");\n+    }\n+    return false;\n+  }\n+\n+  public static boolean refersToYear(ExpressionTree argument) {\n+    return isChronoFieldYear(argument) || isWeekBasedYearUsed(argument);\n+  }\n+\n+  private static boolean isWeekBasedYearUsed(ExpressionTree argument) {\n+    if (argument.is(Tree.Kind.METHOD_INVOCATION)) {\n+      MethodInvocationTree call = (MethodInvocationTree) argument;\n+      return WEEK_BASED_YEAR_MATCHER.matches(call);\n+    }\n+    return false;\n+  }\n+\n+  public static boolean isChronoFieldYear(ExpressionTree argument) {\n+    if (argument.is(Tree.Kind.MEMBER_SELECT)) {\n+      MemberSelectExpressionTree select = (MemberSelectExpressionTree) argument;\n+      IdentifierTree identifier = select.identifier();\n+      return identifier.name().equals(\"YEAR\");\n+    }\n+    return false;\n+  }\n+\n+  static class ChainVisitor extends BaseTreeVisitor {\n+    private boolean usesWeek = false;\n+    private boolean usesWeekOfWeekBasedYear = false;\n+    private boolean usesYear = false;\n+    private boolean usesWeekBasedYear = false;\n+    private final List<JavaFileScannerContext.Location> locations = new ArrayList<>();\n+    private ExpressionTree primary = null;\n+\n+    @Override\n+    public void visitMethodInvocation(MethodInvocationTree callToAppendValue) {\n+      inspectCall(callToAppendValue);\n+      ExpressionTree wanderer = callToAppendValue.methodSelect();\n+      while (wanderer.is(Tree.Kind.MEMBER_SELECT)) {\n+        ExpressionTree expression = ((MemberSelectExpressionTree) wanderer).expression();\n+        if (!expression.is(Tree.Kind.METHOD_INVOCATION)) {\n+          break;\n+        }\n+        MethodInvocationTree mit = (MethodInvocationTree) expression;\n+        inspectCall(mit);\n+        wanderer = mit.methodSelect();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4092ae818831caedf0adc208832d47e8111f864a"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE3MTgzNw==", "bodyText": "The test can only be moved higher in the while loop condition because the code we will either need to exit the loop or try to access method select on an object that does not support it.", "url": "https://github.com/SonarSource/sonar-java/pull/3365#discussion_r550171837", "createdAt": "2020-12-30T12:06:08Z", "author": {"login": "dorian-burihabwa-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/DateTimeFormatterMismatchCheck.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.BaseTreeVisitor;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.LiteralTree;\n+import org.sonar.plugins.java.api.tree.MemberSelectExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+import org.sonar.plugins.java.api.tree.VariableTree;\n+\n+@Rule(key = \"S5917\")\n+public class DateTimeFormatterMismatchCheck extends IssuableSubscriptionVisitor {\n+  private static final MethodMatchers OF_PATTERN_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.format.DateTimeFormatter\")\n+    .names(\"ofPattern\")\n+    .addParametersMatcher(\"java.lang.String\")\n+    .addParametersMatcher(\"java.lang.String\", \"java.util.Locale\")\n+    .build();\n+\n+  private static final MethodMatchers APPEND_VALUE_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.format.DateTimeFormatterBuilder\")\n+    .names(\"appendValue\")\n+    .addParametersMatcher(\"java.time.temporal.TemporalField\", \"int\")\n+    .build();\n+\n+  private static final MethodMatchers WEEK_BASED_YEAR_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.temporal.WeekFields\")\n+    .names(\"weekBasedYear\")\n+    .addParametersMatcher()\n+    .build();\n+\n+  private static final MethodMatchers WEEK_OF_WEEK_BASED_YEAR_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.temporal.WeekFields\")\n+    .names(\"weekOfWeekBasedYear\")\n+    .addParametersMatcher()\n+    .build();\n+\n+  private static final Pattern WEEK_PATTERN = Pattern.compile(\".*ww{1,2}.*\");\n+  private static final Pattern YEAR_OF_ERA_PATTERN = Pattern.compile(\".*[uy]+.*\");\n+\n+  private static final String CHANGE_YEAR_FORMAT_WEEK_BASED_MESSAGE = \"Change this year format to use the week-based year instead.\";\n+  private static final String CHANGE_YEAR_FORMAT_TO_CHRONOFIELD_MESSAGE = \"Change this year format to use ChronoField.YEAR instead.\";\n+  private static final String SECONDARY_LOCATION_MESSAGE = \"\";\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.METHOD_INVOCATION);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    MethodInvocationTree invocation = (MethodInvocationTree) tree;\n+    if (OF_PATTERN_MATCHER.matches(invocation)) {\n+      visitPattern(invocation);\n+    } else if (APPEND_VALUE_MATCHER.matches(invocation)) {\n+      ChainVisitor visitor = new ChainVisitor();\n+      invocation.accept(visitor);\n+      if (!visitor.usesWeek || !visitor.usesYear) {\n+        return;\n+      }\n+      if (visitor.usesWeekBasedYear && !visitor.usesWeekOfWeekBasedYear) {\n+        reportIssue(visitor.primary, CHANGE_YEAR_FORMAT_TO_CHRONOFIELD_MESSAGE, visitor.locations, null);\n+      } else if (!visitor.usesWeekBasedYear && visitor.usesWeekOfWeekBasedYear) {\n+        reportIssue(visitor.primary, CHANGE_YEAR_FORMAT_WEEK_BASED_MESSAGE, visitor.locations, null);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * We currently only check formatters initialized with a String literal or the value of a final variable.\n+   */\n+  private void visitPattern(MethodInvocationTree invocation) {\n+    Arguments arguments = invocation.arguments();\n+    ExpressionTree argument = arguments.get(0);\n+    if (argument.is(Tree.Kind.STRING_LITERAL)) {\n+      String pattern = ((LiteralTree) argument).value();\n+      if (isInfringingPattern(pattern)) {\n+        reportIssue(invocation, CHANGE_YEAR_FORMAT_WEEK_BASED_MESSAGE);\n+      }\n+    } else if (argument.is(Tree.Kind.IDENTIFIER)) {\n+      IdentifierTree identifier = (IdentifierTree) argument;\n+      Symbol symbol = identifier.symbol();\n+      if (!symbol.isFinal()) {\n+        return;\n+      }\n+      Tree declaration = symbol.declaration();\n+      if (declaration == null || !declaration.is(Tree.Kind.VARIABLE)) {\n+        return;\n+      }\n+      VariableTree variable = (VariableTree) declaration;\n+      ExpressionTree initializer = variable.initializer();\n+      if (initializer == null || !initializer.is(Tree.Kind.STRING_LITERAL)) {\n+        return;\n+      }\n+      String pattern = ((LiteralTree) initializer).value();\n+      if (isInfringingPattern(pattern)) {\n+        reportIssue(invocation, CHANGE_YEAR_FORMAT_WEEK_BASED_MESSAGE);\n+      }\n+    }\n+  }\n+\n+  private static boolean isInfringingPattern(String pattern) {\n+    return WEEK_PATTERN.matcher(pattern).matches() && YEAR_OF_ERA_PATTERN.matcher(pattern).matches();\n+  }\n+\n+  public static boolean refersToWeek(ExpressionTree argument) {\n+    return isChronoFieldWeek(argument) || isWeekOfWeekBasedYearUsed(argument);\n+  }\n+\n+  private static boolean isWeekOfWeekBasedYearUsed(ExpressionTree argument) {\n+    if (argument.is(Tree.Kind.METHOD_INVOCATION)) {\n+      MethodInvocationTree call = (MethodInvocationTree) argument;\n+      return WEEK_OF_WEEK_BASED_YEAR_MATCHER.matches(call);\n+    }\n+    return false;\n+  }\n+\n+  public static boolean isChronoFieldWeek(ExpressionTree argument) {\n+    if (argument.is(Tree.Kind.MEMBER_SELECT)) {\n+      MemberSelectExpressionTree select = (MemberSelectExpressionTree) argument;\n+      IdentifierTree identifier = select.identifier();\n+      return identifier.name().equals(\"ALIGNED_WEEK_OF_YEAR\");\n+    }\n+    return false;\n+  }\n+\n+  public static boolean refersToYear(ExpressionTree argument) {\n+    return isChronoFieldYear(argument) || isWeekBasedYearUsed(argument);\n+  }\n+\n+  private static boolean isWeekBasedYearUsed(ExpressionTree argument) {\n+    if (argument.is(Tree.Kind.METHOD_INVOCATION)) {\n+      MethodInvocationTree call = (MethodInvocationTree) argument;\n+      return WEEK_BASED_YEAR_MATCHER.matches(call);\n+    }\n+    return false;\n+  }\n+\n+  public static boolean isChronoFieldYear(ExpressionTree argument) {\n+    if (argument.is(Tree.Kind.MEMBER_SELECT)) {\n+      MemberSelectExpressionTree select = (MemberSelectExpressionTree) argument;\n+      IdentifierTree identifier = select.identifier();\n+      return identifier.name().equals(\"YEAR\");\n+    }\n+    return false;\n+  }\n+\n+  static class ChainVisitor extends BaseTreeVisitor {\n+    private boolean usesWeek = false;\n+    private boolean usesWeekOfWeekBasedYear = false;\n+    private boolean usesYear = false;\n+    private boolean usesWeekBasedYear = false;\n+    private final List<JavaFileScannerContext.Location> locations = new ArrayList<>();\n+    private ExpressionTree primary = null;\n+\n+    @Override\n+    public void visitMethodInvocation(MethodInvocationTree callToAppendValue) {\n+      inspectCall(callToAppendValue);\n+      ExpressionTree wanderer = callToAppendValue.methodSelect();\n+      while (wanderer.is(Tree.Kind.MEMBER_SELECT)) {\n+        ExpressionTree expression = ((MemberSelectExpressionTree) wanderer).expression();\n+        if (!expression.is(Tree.Kind.METHOD_INVOCATION)) {\n+          break;\n+        }\n+        MethodInvocationTree mit = (MethodInvocationTree) expression;\n+        inspectCall(mit);\n+        wanderer = mit.methodSelect();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDA4MTQ1NA=="}, "originalCommit": {"oid": "4092ae818831caedf0adc208832d47e8111f864a"}, "originalPosition": 197}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MDQ4MDk4OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/DateTimeFormatterMismatchCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwOTozODo1NlrOIMmgyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwOTozODo1NlrOIMmgyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDA4NDgxMA==", "bodyText": "I believe it would be easier to read if we had less if/return statements by adding an helper method to retrieve the string value: ex: getStringLiteralValue", "url": "https://github.com/SonarSource/sonar-java/pull/3365#discussion_r550084810", "createdAt": "2020-12-30T09:38:56Z", "author": {"login": "christophe-zurn-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/DateTimeFormatterMismatchCheck.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.BaseTreeVisitor;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.LiteralTree;\n+import org.sonar.plugins.java.api.tree.MemberSelectExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+import org.sonar.plugins.java.api.tree.VariableTree;\n+\n+@Rule(key = \"S5917\")\n+public class DateTimeFormatterMismatchCheck extends IssuableSubscriptionVisitor {\n+  private static final MethodMatchers OF_PATTERN_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.format.DateTimeFormatter\")\n+    .names(\"ofPattern\")\n+    .addParametersMatcher(\"java.lang.String\")\n+    .addParametersMatcher(\"java.lang.String\", \"java.util.Locale\")\n+    .build();\n+\n+  private static final MethodMatchers APPEND_VALUE_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.format.DateTimeFormatterBuilder\")\n+    .names(\"appendValue\")\n+    .addParametersMatcher(\"java.time.temporal.TemporalField\", \"int\")\n+    .build();\n+\n+  private static final MethodMatchers WEEK_BASED_YEAR_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.temporal.WeekFields\")\n+    .names(\"weekBasedYear\")\n+    .addParametersMatcher()\n+    .build();\n+\n+  private static final MethodMatchers WEEK_OF_WEEK_BASED_YEAR_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.temporal.WeekFields\")\n+    .names(\"weekOfWeekBasedYear\")\n+    .addParametersMatcher()\n+    .build();\n+\n+  private static final Pattern WEEK_PATTERN = Pattern.compile(\".*ww{1,2}.*\");\n+  private static final Pattern YEAR_OF_ERA_PATTERN = Pattern.compile(\".*[uy]+.*\");\n+\n+  private static final String CHANGE_YEAR_FORMAT_WEEK_BASED_MESSAGE = \"Change this year format to use the week-based year instead.\";\n+  private static final String CHANGE_YEAR_FORMAT_TO_CHRONOFIELD_MESSAGE = \"Change this year format to use ChronoField.YEAR instead.\";\n+  private static final String SECONDARY_LOCATION_MESSAGE = \"\";\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.METHOD_INVOCATION);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    MethodInvocationTree invocation = (MethodInvocationTree) tree;\n+    if (OF_PATTERN_MATCHER.matches(invocation)) {\n+      visitPattern(invocation);\n+    } else if (APPEND_VALUE_MATCHER.matches(invocation)) {\n+      ChainVisitor visitor = new ChainVisitor();\n+      invocation.accept(visitor);\n+      if (!visitor.usesWeek || !visitor.usesYear) {\n+        return;\n+      }\n+      if (visitor.usesWeekBasedYear && !visitor.usesWeekOfWeekBasedYear) {\n+        reportIssue(visitor.primary, CHANGE_YEAR_FORMAT_TO_CHRONOFIELD_MESSAGE, visitor.locations, null);\n+      } else if (!visitor.usesWeekBasedYear && visitor.usesWeekOfWeekBasedYear) {\n+        reportIssue(visitor.primary, CHANGE_YEAR_FORMAT_WEEK_BASED_MESSAGE, visitor.locations, null);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * We currently only check formatters initialized with a String literal or the value of a final variable.\n+   */\n+  private void visitPattern(MethodInvocationTree invocation) {\n+    Arguments arguments = invocation.arguments();\n+    ExpressionTree argument = arguments.get(0);\n+    if (argument.is(Tree.Kind.STRING_LITERAL)) {\n+      String pattern = ((LiteralTree) argument).value();\n+      if (isInfringingPattern(pattern)) {\n+        reportIssue(invocation, CHANGE_YEAR_FORMAT_WEEK_BASED_MESSAGE);\n+      }\n+    } else if (argument.is(Tree.Kind.IDENTIFIER)) {\n+      IdentifierTree identifier = (IdentifierTree) argument;\n+      Symbol symbol = identifier.symbol();\n+      if (!symbol.isFinal()) {\n+        return;\n+      }\n+      Tree declaration = symbol.declaration();\n+      if (declaration == null || !declaration.is(Tree.Kind.VARIABLE)) {\n+        return;\n+      }\n+      VariableTree variable = (VariableTree) declaration;\n+      ExpressionTree initializer = variable.initializer();\n+      if (initializer == null || !initializer.is(Tree.Kind.STRING_LITERAL)) {\n+        return;\n+      }\n+      String pattern = ((LiteralTree) initializer).value();\n+      if (isInfringingPattern(pattern)) {\n+        reportIssue(invocation, CHANGE_YEAR_FORMAT_WEEK_BASED_MESSAGE);\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4092ae818831caedf0adc208832d47e8111f864a"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MDQ5NjMxOnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/DateTimeFormatterMismatchCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwOTo0MjoyMFrOIMmrFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwOTo0MjoyMFrOIMmrFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDA4NzQ0Nw==", "bodyText": "This is personal, and you can leave it as is if you prefer, but I'd find it slightly clearer it we renamed this class. Ex ChainedInvocationVisitor", "url": "https://github.com/SonarSource/sonar-java/pull/3365#discussion_r550087447", "createdAt": "2020-12-30T09:42:20Z", "author": {"login": "christophe-zurn-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/DateTimeFormatterMismatchCheck.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.BaseTreeVisitor;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.LiteralTree;\n+import org.sonar.plugins.java.api.tree.MemberSelectExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+import org.sonar.plugins.java.api.tree.VariableTree;\n+\n+@Rule(key = \"S5917\")\n+public class DateTimeFormatterMismatchCheck extends IssuableSubscriptionVisitor {\n+  private static final MethodMatchers OF_PATTERN_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.format.DateTimeFormatter\")\n+    .names(\"ofPattern\")\n+    .addParametersMatcher(\"java.lang.String\")\n+    .addParametersMatcher(\"java.lang.String\", \"java.util.Locale\")\n+    .build();\n+\n+  private static final MethodMatchers APPEND_VALUE_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.format.DateTimeFormatterBuilder\")\n+    .names(\"appendValue\")\n+    .addParametersMatcher(\"java.time.temporal.TemporalField\", \"int\")\n+    .build();\n+\n+  private static final MethodMatchers WEEK_BASED_YEAR_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.temporal.WeekFields\")\n+    .names(\"weekBasedYear\")\n+    .addParametersMatcher()\n+    .build();\n+\n+  private static final MethodMatchers WEEK_OF_WEEK_BASED_YEAR_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.temporal.WeekFields\")\n+    .names(\"weekOfWeekBasedYear\")\n+    .addParametersMatcher()\n+    .build();\n+\n+  private static final Pattern WEEK_PATTERN = Pattern.compile(\".*ww{1,2}.*\");\n+  private static final Pattern YEAR_OF_ERA_PATTERN = Pattern.compile(\".*[uy]+.*\");\n+\n+  private static final String CHANGE_YEAR_FORMAT_WEEK_BASED_MESSAGE = \"Change this year format to use the week-based year instead.\";\n+  private static final String CHANGE_YEAR_FORMAT_TO_CHRONOFIELD_MESSAGE = \"Change this year format to use ChronoField.YEAR instead.\";\n+  private static final String SECONDARY_LOCATION_MESSAGE = \"\";\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.METHOD_INVOCATION);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    MethodInvocationTree invocation = (MethodInvocationTree) tree;\n+    if (OF_PATTERN_MATCHER.matches(invocation)) {\n+      visitPattern(invocation);\n+    } else if (APPEND_VALUE_MATCHER.matches(invocation)) {\n+      ChainVisitor visitor = new ChainVisitor();\n+      invocation.accept(visitor);\n+      if (!visitor.usesWeek || !visitor.usesYear) {\n+        return;\n+      }\n+      if (visitor.usesWeekBasedYear && !visitor.usesWeekOfWeekBasedYear) {\n+        reportIssue(visitor.primary, CHANGE_YEAR_FORMAT_TO_CHRONOFIELD_MESSAGE, visitor.locations, null);\n+      } else if (!visitor.usesWeekBasedYear && visitor.usesWeekOfWeekBasedYear) {\n+        reportIssue(visitor.primary, CHANGE_YEAR_FORMAT_WEEK_BASED_MESSAGE, visitor.locations, null);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * We currently only check formatters initialized with a String literal or the value of a final variable.\n+   */\n+  private void visitPattern(MethodInvocationTree invocation) {\n+    Arguments arguments = invocation.arguments();\n+    ExpressionTree argument = arguments.get(0);\n+    if (argument.is(Tree.Kind.STRING_LITERAL)) {\n+      String pattern = ((LiteralTree) argument).value();\n+      if (isInfringingPattern(pattern)) {\n+        reportIssue(invocation, CHANGE_YEAR_FORMAT_WEEK_BASED_MESSAGE);\n+      }\n+    } else if (argument.is(Tree.Kind.IDENTIFIER)) {\n+      IdentifierTree identifier = (IdentifierTree) argument;\n+      Symbol symbol = identifier.symbol();\n+      if (!symbol.isFinal()) {\n+        return;\n+      }\n+      Tree declaration = symbol.declaration();\n+      if (declaration == null || !declaration.is(Tree.Kind.VARIABLE)) {\n+        return;\n+      }\n+      VariableTree variable = (VariableTree) declaration;\n+      ExpressionTree initializer = variable.initializer();\n+      if (initializer == null || !initializer.is(Tree.Kind.STRING_LITERAL)) {\n+        return;\n+      }\n+      String pattern = ((LiteralTree) initializer).value();\n+      if (isInfringingPattern(pattern)) {\n+        reportIssue(invocation, CHANGE_YEAR_FORMAT_WEEK_BASED_MESSAGE);\n+      }\n+    }\n+  }\n+\n+  private static boolean isInfringingPattern(String pattern) {\n+    return WEEK_PATTERN.matcher(pattern).matches() && YEAR_OF_ERA_PATTERN.matcher(pattern).matches();\n+  }\n+\n+  public static boolean refersToWeek(ExpressionTree argument) {\n+    return isChronoFieldWeek(argument) || isWeekOfWeekBasedYearUsed(argument);\n+  }\n+\n+  private static boolean isWeekOfWeekBasedYearUsed(ExpressionTree argument) {\n+    if (argument.is(Tree.Kind.METHOD_INVOCATION)) {\n+      MethodInvocationTree call = (MethodInvocationTree) argument;\n+      return WEEK_OF_WEEK_BASED_YEAR_MATCHER.matches(call);\n+    }\n+    return false;\n+  }\n+\n+  public static boolean isChronoFieldWeek(ExpressionTree argument) {\n+    if (argument.is(Tree.Kind.MEMBER_SELECT)) {\n+      MemberSelectExpressionTree select = (MemberSelectExpressionTree) argument;\n+      IdentifierTree identifier = select.identifier();\n+      return identifier.name().equals(\"ALIGNED_WEEK_OF_YEAR\");\n+    }\n+    return false;\n+  }\n+\n+  public static boolean refersToYear(ExpressionTree argument) {\n+    return isChronoFieldYear(argument) || isWeekBasedYearUsed(argument);\n+  }\n+\n+  private static boolean isWeekBasedYearUsed(ExpressionTree argument) {\n+    if (argument.is(Tree.Kind.METHOD_INVOCATION)) {\n+      MethodInvocationTree call = (MethodInvocationTree) argument;\n+      return WEEK_BASED_YEAR_MATCHER.matches(call);\n+    }\n+    return false;\n+  }\n+\n+  public static boolean isChronoFieldYear(ExpressionTree argument) {\n+    if (argument.is(Tree.Kind.MEMBER_SELECT)) {\n+      MemberSelectExpressionTree select = (MemberSelectExpressionTree) argument;\n+      IdentifierTree identifier = select.identifier();\n+      return identifier.name().equals(\"YEAR\");\n+    }\n+    return false;\n+  }\n+\n+  static class ChainVisitor extends BaseTreeVisitor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4092ae818831caedf0adc208832d47e8111f864a"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MTI5Mjk4OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/DateTimeFormatterMismatchCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxNDoyMjoyMFrOIMuNdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxNDoyMjoyMFrOIMuNdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIxMDkzMg==", "bodyText": "We should add the Nullable annotation to the Tree declaration parameter", "url": "https://github.com/SonarSource/sonar-java/pull/3365#discussion_r550210932", "createdAt": "2020-12-30T14:22:20Z", "author": {"login": "christophe-zurn-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/DateTimeFormatterMismatchCheck.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.BaseTreeVisitor;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.LiteralTree;\n+import org.sonar.plugins.java.api.tree.MemberSelectExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+import org.sonar.plugins.java.api.tree.VariableTree;\n+\n+@Rule(key = \"S5917\")\n+public class DateTimeFormatterMismatchCheck extends IssuableSubscriptionVisitor {\n+  private static final MethodMatchers OF_PATTERN_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.format.DateTimeFormatter\")\n+    .names(\"ofPattern\")\n+    .addParametersMatcher(\"java.lang.String\")\n+    .addParametersMatcher(\"java.lang.String\", \"java.util.Locale\")\n+    .build();\n+\n+  private static final MethodMatchers APPEND_VALUE_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.format.DateTimeFormatterBuilder\")\n+    .names(\"appendValue\")\n+    .addParametersMatcher(\"java.time.temporal.TemporalField\", \"int\")\n+    .build();\n+\n+  private static final MethodMatchers WEEK_BASED_YEAR_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.temporal.WeekFields\")\n+    .names(\"weekBasedYear\")\n+    .addWithoutParametersMatcher()\n+    .build();\n+\n+  private static final MethodMatchers WEEK_OF_WEEK_BASED_YEAR_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.temporal.WeekFields\")\n+    .names(\"weekOfWeekBasedYear\")\n+    .addWithoutParametersMatcher()\n+    .build();\n+\n+  private static final Pattern WEEK_PATTERN = Pattern.compile(\".*ww{1,2}.*\");\n+  private static final Pattern YEAR_OF_ERA_PATTERN = Pattern.compile(\".*[uy]+.*\");\n+\n+  private static final String CHANGE_YEAR_FORMAT_WEEK_BASED_MESSAGE = \"Change this year format to use the week-based year instead.\";\n+  private static final String CHANGE_YEAR_FORMAT_TO_CHRONOFIELD_MESSAGE = \"Change this year format to use ChronoField.YEAR instead.\";\n+  private static final String SECONDARY_LOCATION_MESSAGE = \"\";\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.METHOD_INVOCATION);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    MethodInvocationTree invocation = (MethodInvocationTree) tree;\n+    if (OF_PATTERN_MATCHER.matches(invocation)) {\n+      visitPattern(invocation);\n+    } else if (APPEND_VALUE_MATCHER.matches(invocation)) {\n+      ChainedInvocationVisitor visitor = new ChainedInvocationVisitor();\n+      invocation.accept(visitor);\n+      if (!visitor.usesWeek || !visitor.usesYear) {\n+        return;\n+      }\n+      if (visitor.usesWeekBasedYear && !visitor.usesWeekOfWeekBasedYear) {\n+        reportIssue(visitor.primary, CHANGE_YEAR_FORMAT_TO_CHRONOFIELD_MESSAGE, visitor.locations, null);\n+      } else if (!visitor.usesWeekBasedYear && visitor.usesWeekOfWeekBasedYear) {\n+        reportIssue(visitor.primary, CHANGE_YEAR_FORMAT_WEEK_BASED_MESSAGE, visitor.locations, null);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * We currently only check formatters initialized with a String literal or the value of a final variable.\n+   */\n+  private void visitPattern(MethodInvocationTree invocation) {\n+    Arguments arguments = invocation.arguments();\n+    ExpressionTree argument = arguments.get(0);\n+    if (argument.is(Tree.Kind.STRING_LITERAL)) {\n+      String pattern = ((LiteralTree) argument).value();\n+      if (isInfringingPattern(pattern)) {\n+        reportIssue(invocation, CHANGE_YEAR_FORMAT_WEEK_BASED_MESSAGE);\n+      }\n+    } else if (argument.is(Tree.Kind.IDENTIFIER)) {\n+      IdentifierTree identifier = (IdentifierTree) argument;\n+      Symbol symbol = identifier.symbol();\n+      if (!symbol.isFinal()) {\n+        return;\n+      }\n+      Tree declaration = symbol.declaration();\n+      Optional<String> pattern = getStringLiteralValue(declaration);\n+      if (pattern.isPresent() && isInfringingPattern(pattern.get())) {\n+        reportIssue(invocation, CHANGE_YEAR_FORMAT_WEEK_BASED_MESSAGE);\n+      }\n+    }\n+  }\n+\n+  private static Optional<String> getStringLiteralValue(Tree declaration) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e5880dfaaf407e40c570f8916ac17c9abaa31b2"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MTMxNDA1OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/DateTimeFormatterMismatchCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxNDozMToyMlrOIMuY_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxNDozMToyMlrOIMuY_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIxMzg4Nw==", "bodyText": "For safety, we could also check the experssion underlying type:\nreturn select.symbolType().is(\"java.time.temporal.ChronoField\") && identifier.name().equals(\"ALIGNED_WEEK_OF_YEAR\");", "url": "https://github.com/SonarSource/sonar-java/pull/3365#discussion_r550213887", "createdAt": "2020-12-30T14:31:22Z", "author": {"login": "christophe-zurn-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/DateTimeFormatterMismatchCheck.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.BaseTreeVisitor;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.LiteralTree;\n+import org.sonar.plugins.java.api.tree.MemberSelectExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+import org.sonar.plugins.java.api.tree.VariableTree;\n+\n+@Rule(key = \"S5917\")\n+public class DateTimeFormatterMismatchCheck extends IssuableSubscriptionVisitor {\n+  private static final MethodMatchers OF_PATTERN_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.format.DateTimeFormatter\")\n+    .names(\"ofPattern\")\n+    .addParametersMatcher(\"java.lang.String\")\n+    .addParametersMatcher(\"java.lang.String\", \"java.util.Locale\")\n+    .build();\n+\n+  private static final MethodMatchers APPEND_VALUE_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.format.DateTimeFormatterBuilder\")\n+    .names(\"appendValue\")\n+    .addParametersMatcher(\"java.time.temporal.TemporalField\", \"int\")\n+    .build();\n+\n+  private static final MethodMatchers WEEK_BASED_YEAR_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.temporal.WeekFields\")\n+    .names(\"weekBasedYear\")\n+    .addWithoutParametersMatcher()\n+    .build();\n+\n+  private static final MethodMatchers WEEK_OF_WEEK_BASED_YEAR_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.temporal.WeekFields\")\n+    .names(\"weekOfWeekBasedYear\")\n+    .addWithoutParametersMatcher()\n+    .build();\n+\n+  private static final Pattern WEEK_PATTERN = Pattern.compile(\".*ww{1,2}.*\");\n+  private static final Pattern YEAR_OF_ERA_PATTERN = Pattern.compile(\".*[uy]+.*\");\n+\n+  private static final String CHANGE_YEAR_FORMAT_WEEK_BASED_MESSAGE = \"Change this year format to use the week-based year instead.\";\n+  private static final String CHANGE_YEAR_FORMAT_TO_CHRONOFIELD_MESSAGE = \"Change this year format to use ChronoField.YEAR instead.\";\n+  private static final String SECONDARY_LOCATION_MESSAGE = \"\";\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.METHOD_INVOCATION);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    MethodInvocationTree invocation = (MethodInvocationTree) tree;\n+    if (OF_PATTERN_MATCHER.matches(invocation)) {\n+      visitPattern(invocation);\n+    } else if (APPEND_VALUE_MATCHER.matches(invocation)) {\n+      ChainedInvocationVisitor visitor = new ChainedInvocationVisitor();\n+      invocation.accept(visitor);\n+      if (!visitor.usesWeek || !visitor.usesYear) {\n+        return;\n+      }\n+      if (visitor.usesWeekBasedYear && !visitor.usesWeekOfWeekBasedYear) {\n+        reportIssue(visitor.primary, CHANGE_YEAR_FORMAT_TO_CHRONOFIELD_MESSAGE, visitor.locations, null);\n+      } else if (!visitor.usesWeekBasedYear && visitor.usesWeekOfWeekBasedYear) {\n+        reportIssue(visitor.primary, CHANGE_YEAR_FORMAT_WEEK_BASED_MESSAGE, visitor.locations, null);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * We currently only check formatters initialized with a String literal or the value of a final variable.\n+   */\n+  private void visitPattern(MethodInvocationTree invocation) {\n+    Arguments arguments = invocation.arguments();\n+    ExpressionTree argument = arguments.get(0);\n+    if (argument.is(Tree.Kind.STRING_LITERAL)) {\n+      String pattern = ((LiteralTree) argument).value();\n+      if (isInfringingPattern(pattern)) {\n+        reportIssue(invocation, CHANGE_YEAR_FORMAT_WEEK_BASED_MESSAGE);\n+      }\n+    } else if (argument.is(Tree.Kind.IDENTIFIER)) {\n+      IdentifierTree identifier = (IdentifierTree) argument;\n+      Symbol symbol = identifier.symbol();\n+      if (!symbol.isFinal()) {\n+        return;\n+      }\n+      Tree declaration = symbol.declaration();\n+      Optional<String> pattern = getStringLiteralValue(declaration);\n+      if (pattern.isPresent() && isInfringingPattern(pattern.get())) {\n+        reportIssue(invocation, CHANGE_YEAR_FORMAT_WEEK_BASED_MESSAGE);\n+      }\n+    }\n+  }\n+\n+  private static Optional<String> getStringLiteralValue(Tree declaration) {\n+    if (declaration == null || !declaration.is(Tree.Kind.VARIABLE)) {\n+      return Optional.empty();\n+    }\n+    VariableTree variable = (VariableTree) declaration;\n+    ExpressionTree initializer = variable.initializer();\n+    if (initializer == null || !initializer.is(Tree.Kind.STRING_LITERAL)) {\n+      return Optional.empty();\n+    }\n+    return Optional.of(((LiteralTree) initializer).value());\n+  }\n+\n+  private static boolean isInfringingPattern(String pattern) {\n+    return WEEK_PATTERN.matcher(pattern).matches() && YEAR_OF_ERA_PATTERN.matcher(pattern).matches();\n+  }\n+\n+  private static boolean refersToWeek(ExpressionTree argument) {\n+    return isChronoFieldWeek(argument) || isWeekOfWeekBasedYearUsed(argument);\n+  }\n+\n+  private static boolean isWeekOfWeekBasedYearUsed(ExpressionTree argument) {\n+    if (argument.is(Tree.Kind.METHOD_INVOCATION)) {\n+      MethodInvocationTree call = (MethodInvocationTree) argument;\n+      return WEEK_OF_WEEK_BASED_YEAR_MATCHER.matches(call);\n+    }\n+    return false;\n+  }\n+\n+  private static boolean isChronoFieldWeek(ExpressionTree argument) {\n+    if (argument.is(Tree.Kind.MEMBER_SELECT)) {\n+      MemberSelectExpressionTree select = (MemberSelectExpressionTree) argument;\n+      IdentifierTree identifier = select.identifier();\n+      return identifier.name().equals(\"ALIGNED_WEEK_OF_YEAR\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e5880dfaaf407e40c570f8916ac17c9abaa31b2"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MTMxNDgzOnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/DateTimeFormatterMismatchCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxNDozMTozOFrOIMuZcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxNDozMTozOFrOIMuZcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIxNDAwMQ==", "bodyText": "Same here:\nreturn select.symbolType().is(\"java.time.temporal.ChronoField\") && identifier.name().equals(\"YEAR\");", "url": "https://github.com/SonarSource/sonar-java/pull/3365#discussion_r550214001", "createdAt": "2020-12-30T14:31:38Z", "author": {"login": "christophe-zurn-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/DateTimeFormatterMismatchCheck.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.BaseTreeVisitor;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.LiteralTree;\n+import org.sonar.plugins.java.api.tree.MemberSelectExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+import org.sonar.plugins.java.api.tree.VariableTree;\n+\n+@Rule(key = \"S5917\")\n+public class DateTimeFormatterMismatchCheck extends IssuableSubscriptionVisitor {\n+  private static final MethodMatchers OF_PATTERN_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.format.DateTimeFormatter\")\n+    .names(\"ofPattern\")\n+    .addParametersMatcher(\"java.lang.String\")\n+    .addParametersMatcher(\"java.lang.String\", \"java.util.Locale\")\n+    .build();\n+\n+  private static final MethodMatchers APPEND_VALUE_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.format.DateTimeFormatterBuilder\")\n+    .names(\"appendValue\")\n+    .addParametersMatcher(\"java.time.temporal.TemporalField\", \"int\")\n+    .build();\n+\n+  private static final MethodMatchers WEEK_BASED_YEAR_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.temporal.WeekFields\")\n+    .names(\"weekBasedYear\")\n+    .addWithoutParametersMatcher()\n+    .build();\n+\n+  private static final MethodMatchers WEEK_OF_WEEK_BASED_YEAR_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.time.temporal.WeekFields\")\n+    .names(\"weekOfWeekBasedYear\")\n+    .addWithoutParametersMatcher()\n+    .build();\n+\n+  private static final Pattern WEEK_PATTERN = Pattern.compile(\".*ww{1,2}.*\");\n+  private static final Pattern YEAR_OF_ERA_PATTERN = Pattern.compile(\".*[uy]+.*\");\n+\n+  private static final String CHANGE_YEAR_FORMAT_WEEK_BASED_MESSAGE = \"Change this year format to use the week-based year instead.\";\n+  private static final String CHANGE_YEAR_FORMAT_TO_CHRONOFIELD_MESSAGE = \"Change this year format to use ChronoField.YEAR instead.\";\n+  private static final String SECONDARY_LOCATION_MESSAGE = \"\";\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.METHOD_INVOCATION);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    MethodInvocationTree invocation = (MethodInvocationTree) tree;\n+    if (OF_PATTERN_MATCHER.matches(invocation)) {\n+      visitPattern(invocation);\n+    } else if (APPEND_VALUE_MATCHER.matches(invocation)) {\n+      ChainedInvocationVisitor visitor = new ChainedInvocationVisitor();\n+      invocation.accept(visitor);\n+      if (!visitor.usesWeek || !visitor.usesYear) {\n+        return;\n+      }\n+      if (visitor.usesWeekBasedYear && !visitor.usesWeekOfWeekBasedYear) {\n+        reportIssue(visitor.primary, CHANGE_YEAR_FORMAT_TO_CHRONOFIELD_MESSAGE, visitor.locations, null);\n+      } else if (!visitor.usesWeekBasedYear && visitor.usesWeekOfWeekBasedYear) {\n+        reportIssue(visitor.primary, CHANGE_YEAR_FORMAT_WEEK_BASED_MESSAGE, visitor.locations, null);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * We currently only check formatters initialized with a String literal or the value of a final variable.\n+   */\n+  private void visitPattern(MethodInvocationTree invocation) {\n+    Arguments arguments = invocation.arguments();\n+    ExpressionTree argument = arguments.get(0);\n+    if (argument.is(Tree.Kind.STRING_LITERAL)) {\n+      String pattern = ((LiteralTree) argument).value();\n+      if (isInfringingPattern(pattern)) {\n+        reportIssue(invocation, CHANGE_YEAR_FORMAT_WEEK_BASED_MESSAGE);\n+      }\n+    } else if (argument.is(Tree.Kind.IDENTIFIER)) {\n+      IdentifierTree identifier = (IdentifierTree) argument;\n+      Symbol symbol = identifier.symbol();\n+      if (!symbol.isFinal()) {\n+        return;\n+      }\n+      Tree declaration = symbol.declaration();\n+      Optional<String> pattern = getStringLiteralValue(declaration);\n+      if (pattern.isPresent() && isInfringingPattern(pattern.get())) {\n+        reportIssue(invocation, CHANGE_YEAR_FORMAT_WEEK_BASED_MESSAGE);\n+      }\n+    }\n+  }\n+\n+  private static Optional<String> getStringLiteralValue(Tree declaration) {\n+    if (declaration == null || !declaration.is(Tree.Kind.VARIABLE)) {\n+      return Optional.empty();\n+    }\n+    VariableTree variable = (VariableTree) declaration;\n+    ExpressionTree initializer = variable.initializer();\n+    if (initializer == null || !initializer.is(Tree.Kind.STRING_LITERAL)) {\n+      return Optional.empty();\n+    }\n+    return Optional.of(((LiteralTree) initializer).value());\n+  }\n+\n+  private static boolean isInfringingPattern(String pattern) {\n+    return WEEK_PATTERN.matcher(pattern).matches() && YEAR_OF_ERA_PATTERN.matcher(pattern).matches();\n+  }\n+\n+  private static boolean refersToWeek(ExpressionTree argument) {\n+    return isChronoFieldWeek(argument) || isWeekOfWeekBasedYearUsed(argument);\n+  }\n+\n+  private static boolean isWeekOfWeekBasedYearUsed(ExpressionTree argument) {\n+    if (argument.is(Tree.Kind.METHOD_INVOCATION)) {\n+      MethodInvocationTree call = (MethodInvocationTree) argument;\n+      return WEEK_OF_WEEK_BASED_YEAR_MATCHER.matches(call);\n+    }\n+    return false;\n+  }\n+\n+  private static boolean isChronoFieldWeek(ExpressionTree argument) {\n+    if (argument.is(Tree.Kind.MEMBER_SELECT)) {\n+      MemberSelectExpressionTree select = (MemberSelectExpressionTree) argument;\n+      IdentifierTree identifier = select.identifier();\n+      return identifier.name().equals(\"ALIGNED_WEEK_OF_YEAR\");\n+    }\n+    return false;\n+  }\n+\n+  private static boolean refersToYear(ExpressionTree argument) {\n+    return isChronoFieldYear(argument) || isWeekBasedYearUsed(argument);\n+  }\n+\n+  private static boolean isWeekBasedYearUsed(ExpressionTree argument) {\n+    if (argument.is(Tree.Kind.METHOD_INVOCATION)) {\n+      MethodInvocationTree call = (MethodInvocationTree) argument;\n+      return WEEK_BASED_YEAR_MATCHER.matches(call);\n+    }\n+    return false;\n+  }\n+\n+  private static boolean isChronoFieldYear(ExpressionTree argument) {\n+    if (argument.is(Tree.Kind.MEMBER_SELECT)) {\n+      MemberSelectExpressionTree select = (MemberSelectExpressionTree) argument;\n+      IdentifierTree identifier = select.identifier();\n+      return identifier.name().equals(\"YEAR\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e5880dfaaf407e40c570f8916ac17c9abaa31b2"}, "originalPosition": 178}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3754, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}