{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxMDUwNzUz", "number": 2881, "title": "SONARJAVA-2941 RSPEC-3740 Generic types shouldn't be used raw", "bodyText": "", "createdAt": "2020-03-19T14:53:11Z", "url": "https://github.com/SonarSource/sonar-java/pull/2881", "merged": true, "mergeCommit": {"oid": "e7e67bc6c8a1c0220a137f7d5ad6bfee43d7a73f"}, "closed": true, "closedAt": "2020-03-24T14:34:46Z", "author": {"login": "m-g-sonar"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcPeRv2gFqTM3ODM4MTk4MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQz3TVAFqTM4MDM2OTk0Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MzgxOTgw", "url": "https://github.com/SonarSource/sonar-java/pull/2881#pullrequestreview-378381980", "createdAt": "2020-03-20T10:48:24Z", "commit": {"oid": "b852a82e3e3a95f11a0ec862b63b294cc229b316"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMDo0ODoyNFrOF5O-bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMDo0ODoyNFrOF5O-bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU1ODUwOQ==", "bodyText": "It would be nice to add a test with nested generics. E.g. of FN: Metric is a raw generic but there's a false-negative in implements Function<Metric, String> here:\nhttps://github.com/SonarSource/ruling_java/blob/7f4b47c9f013c5997f138ddc6e4f916cc7763476/sonarqube-6.5/server/sonar-server/src/main/java/org/sonar/server/computation/task/projectanalysis/step/LoadMeasureComputersStep.java#L153\nIt would be great to add test cases with method parameters. And to support exclusions of issues on return type and parameters of overridden methods (methodSymbol.overriddenSymbol() != null, I'm not sure we need to check @Override annotations). Like this false-positive:\nhttps://github.com/SonarSource/ruling_java/blob/7f4b47c9f013c5997f138ddc6e4f916cc7763476/sonarqube-6.5/server/sonar-server/src/main/java/org/sonar/server/issue/IssuesFinderSort.java#L88", "url": "https://github.com/SonarSource/sonar-java/pull/2881#discussion_r395558509", "createdAt": "2020-03-20T10:48:24Z", "author": {"login": "alban-auzeill"}, "path": "java-checks-test-sources/src/main/java/checks/RawTypeCheck.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package checks;\n+\n+import java.util.Optional;\n+\n+public class RawTypeCheck {\n+\n+  void foo() {\n+    GenericClass v; // Noncompliant [[sc=5;ec=17]] {{Provide the parametrized type for this generic.}}\n+    v = new GenericClass(); // Noncompliant [[sc=13;ec=25]] {{Provide the parametrized type for this generic.}}\n+    v = new RawTypeCheck.GenericClass(); // Noncompliant [[sc=26;ec=38]]\n+\n+    v = new GenericClass<>(); // Compliant\n+    v = new GenericClass<String>(); // Compliant\n+\n+    RawTypeCheck t;\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    Optional o2; // Noncompliant - should be handled by SONARJAVA-2410 and filtered out\n+    Optional<String> o1 = Optional.empty(); // Compliant\n+  }\n+\n+  GenericClass bar() { return null; } // Noncompliant\n+\n+  static class GenericClass<T> { }\n+  interface GenericInterface<T> { }\n+\n+  static class InnerClass1 extends GenericClass { } // Noncompliant [[sc=36;ec=48]] {{Provide the parametrized type for this generic.}}\n+  static class InnerClass2 implements GenericInterface { } // Noncompliant [[sc=39;ec=55]] {{Provide the parametrized type for this generic.}}\n+  enum InnerEnum implements GenericInterface { } // Noncompliant [[sc=29;ec=45]]\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b852a82e3e3a95f11a0ec862b63b294cc229b316"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8cd7c25a743ce01657b02d2da9fd1c5f4c4e6463", "author": {"user": {"login": "m-g-sonar", "name": "Michael Gumowski"}}, "url": "https://github.com/SonarSource/sonar-java/commit/8cd7c25a743ce01657b02d2da9fd1c5f4c4e6463", "committedDate": "2020-03-24T09:41:33Z", "message": "SONARJAVA-2941 RSPEC-3740 Generic types shouldn't be used raw"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6300cb5f5af5fc720e2c47f1c1793d246a7c837f", "author": {"user": {"login": "m-g-sonar", "name": "Michael Gumowski"}}, "url": "https://github.com/SonarSource/sonar-java/commit/6300cb5f5af5fc720e2c47f1c1793d246a7c837f", "committedDate": "2020-03-24T09:41:33Z", "message": "SONARJAVA-2941 Add results of the ruling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8457c9e6a74b0c2553841ea6cf9ebe03a155cc91", "author": {"user": {"login": "m-g-sonar", "name": "Michael Gumowski"}}, "url": "https://github.com/SonarSource/sonar-java/commit/8457c9e6a74b0c2553841ea6cf9ebe03a155cc91", "committedDate": "2020-03-24T09:41:34Z", "message": "Handle feedback from review"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b852a82e3e3a95f11a0ec862b63b294cc229b316", "author": {"user": {"login": "m-g-sonar", "name": "Michael Gumowski"}}, "url": "https://github.com/SonarSource/sonar-java/commit/b852a82e3e3a95f11a0ec862b63b294cc229b316", "committedDate": "2020-03-19T14:35:32Z", "message": "SONARJAVA-2941 Add results of the ruling"}, "afterCommit": {"oid": "8457c9e6a74b0c2553841ea6cf9ebe03a155cc91", "author": {"user": {"login": "m-g-sonar", "name": "Michael Gumowski"}}, "url": "https://github.com/SonarSource/sonar-java/commit/8457c9e6a74b0c2553841ea6cf9ebe03a155cc91", "committedDate": "2020-03-24T09:41:34Z", "message": "Handle feedback from review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMzY5OTQ3", "url": "https://github.com/SonarSource/sonar-java/pull/2881#pullrequestreview-380369947", "createdAt": "2020-03-24T14:34:27Z", "commit": {"oid": "8457c9e6a74b0c2553841ea6cf9ebe03a155cc91"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1762, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}