{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0Njg4MjYx", "number": 3017, "title": "SONARJAVA-3417 Rule S5850: Alternatives in regular expressions ...", "bodyText": "", "createdAt": "2020-06-15T17:58:16Z", "url": "https://github.com/SonarSource/sonar-java/pull/3017", "merged": true, "mergeCommit": {"oid": "a230de88b010bb953c5b56dc8c301189cb1b749e"}, "closed": true, "closedAt": "2020-06-17T12:50:00Z", "author": {"login": "sebastian-hungerecker-sonarsource"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcr1OGsABqjM0NDg5NjkwNzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcsHr_UABqjM0NTMwMjUwMjc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e9f4557e1da9f45724e633a203a3df86e2e100ba", "author": {"user": {"login": "sebastian-hungerecker-sonarsource", "name": "Sebastian Hungerecker"}}, "url": "https://github.com/SonarSource/sonar-java/commit/e9f4557e1da9f45724e633a203a3df86e2e100ba", "committedDate": "2020-06-16T13:09:48Z", "message": "Fix exception on empty sequences\n\nAlso add the ability to still find anchors preceded by a flag-setting\ngroup (e.g. `(?i)^a|b|c$`)."}, "afterCommit": {"oid": "fff2929bdf7f1131b3f9827a6b0dbb564d008ca5", "author": {"user": {"login": "sebastian-hungerecker-sonarsource", "name": "Sebastian Hungerecker"}}, "url": "https://github.com/SonarSource/sonar-java/commit/fff2929bdf7f1131b3f9827a6b0dbb564d008ca5", "committedDate": "2020-06-16T13:24:26Z", "message": "Fix exception on empty sequences\n\nAlso add the ability to still find anchors preceded by a flag-setting\ngroup (e.g. `(?i)^a|b|c$`)."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMTQ3ODgz", "url": "https://github.com/SonarSource/sonar-java/pull/3017#pullrequestreview-432147883", "createdAt": "2020-06-17T07:54:35Z", "commit": {"oid": "fff2929bdf7f1131b3f9827a6b0dbb564d008ca5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNzo1NDozNVrOGk6BUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNzo1NDozNVrOGk6BUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM1MjUyOA==", "bodyText": "I feel that we should also check here that the boundary type is the one expected, and I would add:\nBoundaryTree boundary = items.get(index).is(RegexTree.Kind.BOUNDARY)\nreturn (position == Position.BEGINNING && boundary.type() == BoundaryTree.Type.LINE_START) \n  || (position == Position.END && boundary.type() == BoundaryTree.Type.LINE_END);\n\nOtherwise, I fear that we might report FPs on regex such as:\n\"\\bTest|assert\\b\"\n\nWhich I believe are valid cases.", "url": "https://github.com/SonarSource/sonar-java/pull/3017#discussion_r441352528", "createdAt": "2020-06-17T07:54:35Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/regex/AnchorPrecedenceCheck.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.regex;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.sonar.check.Rule;\n+import org.sonar.java.regex.RegexParseResult;\n+import org.sonar.java.regex.ast.DisjunctionTree;\n+import org.sonar.java.regex.ast.NonCapturingGroupTree;\n+import org.sonar.java.regex.ast.RegexBaseVisitor;\n+import org.sonar.java.regex.ast.RegexTree;\n+import org.sonar.java.regex.ast.SequenceTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+\n+@Rule(key = \"S5850\")\n+public class AnchorPrecedenceCheck extends AbstractRegexCheck {\n+\n+  @Override\n+  public void checkRegex(RegexParseResult regexForLiterals, MethodInvocationTree mit) {\n+    if (!regexForLiterals.hasSyntaxErrors()) {\n+      new Visitor().visit(regexForLiterals.getResult());\n+    }\n+  }\n+\n+  private enum Position {\n+    BEGINNING, END\n+  }\n+\n+  private class Visitor extends RegexBaseVisitor {\n+    @Override\n+    public void visitDisjunction(DisjunctionTree tree) {\n+      RegexTree first = tree.getAlternatives().get(0);\n+      RegexTree last = tree.getAlternatives().get(tree.getAlternatives().size() - 1);\n+      if (isAnchored(first, Position.BEGINNING) || isAnchored(last, Position.END)) {\n+        reportIssue(tree, \"Group the alternatives together to get the intended precedence.\", null, Collections.emptyList());\n+      }\n+      super.visitDisjunction(tree);\n+    }\n+\n+    private boolean isAnchored(RegexTree tree, Position position) {\n+      if (!tree.is(RegexTree.Kind.SEQUENCE)) {\n+        return false;\n+      }\n+      SequenceTree sequence = (SequenceTree) tree;\n+      List<RegexTree> items = sequence.getItems().stream()\n+        .filter(item -> !isFlagSetter(item))\n+        .collect(Collectors.toList());\n+      if (items.isEmpty()) {\n+        return false;\n+      }\n+      int index = position == Position.BEGINNING ? 0 : (items.size() - 1);\n+      return items.get(index).is(RegexTree.Kind.BOUNDARY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fff2929bdf7f1131b3f9827a6b0dbb564d008ca5"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7df06235291d388aa8b0d4c9a284a5a8c8138ee", "author": {"user": {"login": "sebastian-hungerecker-sonarsource", "name": "Sebastian Hungerecker"}}, "url": "https://github.com/SonarSource/sonar-java/commit/a7df06235291d388aa8b0d4c9a284a5a8c8138ee", "committedDate": "2020-06-17T10:55:44Z", "message": "SONARJAVA-3417 Rule S5850: Alternatives in regular expressions ...\n\n... should be grouped when used with anchors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f959f95000bfb173e97ba327e073a73db69b4f40", "author": {"user": {"login": "sebastian-hungerecker-sonarsource", "name": "Sebastian Hungerecker"}}, "url": "https://github.com/SonarSource/sonar-java/commit/f959f95000bfb173e97ba327e073a73db69b4f40", "committedDate": "2020-06-17T10:55:44Z", "message": "Fix exception on empty sequences\n\nAlso add the ability to still find anchors preceded by a flag-setting\ngroup (e.g. `(?i)^a|b|c$`)."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f925c0dc68b1360db93f91341a584266972d9f18", "author": {"user": {"login": "sebastian-hungerecker-sonarsource", "name": "Sebastian Hungerecker"}}, "url": "https://github.com/SonarSource/sonar-java/commit/f925c0dc68b1360db93f91341a584266972d9f18", "committedDate": "2020-06-17T10:55:44Z", "message": "Make all compliant examples from the description pass without issues"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b1c55dc9e8365c1a667dd69bc8b056c6413e966e", "author": {"user": {"login": "sebastian-hungerecker-sonarsource", "name": "Sebastian Hungerecker"}}, "url": "https://github.com/SonarSource/sonar-java/commit/b1c55dc9e8365c1a667dd69bc8b056c6413e966e", "committedDate": "2020-06-17T10:50:20Z", "message": "Make all compliant examples from the description pass without issues"}, "afterCommit": {"oid": "f925c0dc68b1360db93f91341a584266972d9f18", "author": {"user": {"login": "sebastian-hungerecker-sonarsource", "name": "Sebastian Hungerecker"}}, "url": "https://github.com/SonarSource/sonar-java/commit/f925c0dc68b1360db93f91341a584266972d9f18", "committedDate": "2020-06-17T10:55:44Z", "message": "Make all compliant examples from the description pass without issues"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1726, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}