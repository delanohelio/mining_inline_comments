{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5NjU3NzM4", "number": 2780, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwOToyMjowOFrODckG-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwOTo1MzoxN1rODckuQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjc4MzI4OnYy", "diffSide": "RIGHT", "path": "java-checks/src/test/files/checks/security/CryptographicKeySizeCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwOToyMjowOFrOFkqvPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwOToyMjowOFrOFkqvPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5MzI3Nw==", "bodyText": "Lower case algorithm seems to be valid, the rule should not be sensible to the case.\ne.g.: KeyPairGenerator.getInstance(\"rsa\");\nLet's only have upper case names in algorithmKeySizeMap and look for upper case names.", "url": "https://github.com/SonarSource/sonar-java/pull/2780#discussion_r373993277", "createdAt": "2020-02-03T09:22:08Z", "author": {"login": "alban-auzeill"}, "path": "java-checks/src/test/files/checks/security/CryptographicKeySizeCheck.java", "diffHunk": "@@ -0,0 +1,181 @@\n+import java.security.KeyPairGenerator;\n+import javax.crypto.KeyGenerator;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.InvalidAlgorithmParameterException;\n+import java.security.spec.ECGenParameterSpec;\n+import java.security.SecureRandom;\n+\n+class RSA {\n+  public void key_variable() throws NoSuchAlgorithmException {\n+    KeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"RSA\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebbd80decf372b05cbd6ad9f36c911823e97b226"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjgyNzkxOnYy", "diffSide": "RIGHT", "path": "java-checks/src/test/files/checks/security/CryptographicKeySizeCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwOTozNjozOFrOFkrJgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwOTozNjozOFrOFkrJgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAwMDAwMQ==", "bodyText": "ERROR CryptographicKeySizeCheck.java:28: Unhandled exception type NoSuchAlgorithmException", "url": "https://github.com/SonarSource/sonar-java/pull/2780#discussion_r374000001", "createdAt": "2020-02-03T09:36:38Z", "author": {"login": "alban-auzeill"}, "path": "java-checks/src/test/files/checks/security/CryptographicKeySizeCheck.java", "diffHunk": "@@ -0,0 +1,181 @@\n+import java.security.KeyPairGenerator;\n+import javax.crypto.KeyGenerator;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.InvalidAlgorithmParameterException;\n+import java.security.spec.ECGenParameterSpec;\n+import java.security.SecureRandom;\n+\n+class RSA {\n+  public void key_variable() throws NoSuchAlgorithmException {\n+    KeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"RSA\");\n+    keyGen.initialize(1024); // Noncompliant [[sc=5;ec=28]]  {{Use a key length of at least 2048 bits for RSA cipher algorithm.}}\n+  }\n+\n+  public void key_variable_compliant() throws NoSuchAlgorithmException {\n+    KeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"RSA\");\n+    keyGen.initialize(2048); // Compliant\n+  }\n+\n+  public void report_twice() throws NoSuchAlgorithmException {\n+    KeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"RSA\");\n+    keyGen.initialize(1024); // Noncompliant\n+    keyGen.initialize(1023); // Noncompliant\n+  }\n+}\n+\n+interface I {\n+  Runnable r = () -> {\n+    KeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"RSA\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebbd80decf372b05cbd6ad9f36c911823e97b226"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjg1OTEyOnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/security/CryptographicKeySizeCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwOTo0NjowOVrOFkrbqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwOTo0NjowOVrOFkrbqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAwNDY0OA==", "bodyText": "I would add ^ at the beginning of the pattern to find something that starts with. (and LiteralUtils.trimQuotes(literalTree.value()) below)", "url": "https://github.com/SonarSource/sonar-java/pull/2780#discussion_r374004648", "createdAt": "2020-02-03T09:46:09Z", "author": {"login": "alban-auzeill"}, "path": "java-checks/src/main/java/org/sonar/java/checks/security/CryptographicKeySizeCheck.java", "diffHunk": "@@ -23,29 +23,38 @@\n import java.util.Arrays;\n import java.util.List;\n import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n import org.sonar.check.Rule;\n import org.sonar.java.checks.helpers.ExpressionsHelper;\n import org.sonar.java.checks.methods.AbstractMethodDetection;\n import org.sonar.java.matcher.MethodMatcher;\n import org.sonar.java.model.ExpressionUtils;\n import org.sonar.java.model.LiteralUtils;\n import org.sonar.plugins.java.api.tree.BaseTreeVisitor;\n+import org.sonar.plugins.java.api.tree.LiteralTree;\n import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n import org.sonar.plugins.java.api.tree.MethodTree;\n+import org.sonar.plugins.java.api.tree.NewClassTree;\n \n @Rule(key = \"S4426\")\n public class CryptographicKeySizeCheck extends AbstractMethodDetection {\n \n   private static final String KEY_PAIR_GENERATOR = \"java.security.KeyPairGenerator\";\n   private static final String KEY_GENERATOR = \"javax.crypto.KeyGenerator\";\n+  private static final String EC_GEN_PARAMETER_SPEC = \"java.security.spec.ECGenParameterSpec\";\n   private static final String GET_INSTANCE_METHOD = \"getInstance\";\n   private static final String STRING = \"java.lang.String\";\n \n+  private static final int EC_MIN_KEY = 224;\n+  private static final Pattern EC_KEY_PATTERN = Pattern.compile(\"(secp|prime|sect|c2tnb)(\\\\d+)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebbd80decf372b05cbd6ad9f36c911823e97b226"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjg4MTI3OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/security/CryptographicKeySizeCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwOTo1MjozNVrOFkrozg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwOTo1MjozNVrOFkrozg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAwODAxNA==", "bodyText": "The 3 MethodMatchers above should be static", "url": "https://github.com/SonarSource/sonar-java/pull/2780#discussion_r374008014", "createdAt": "2020-02-03T09:52:35Z", "author": {"login": "alban-auzeill"}, "path": "java-checks/src/main/java/org/sonar/java/checks/security/CryptographicKeySizeCheck.java", "diffHunk": "@@ -66,19 +83,25 @@ public MethodVisitor(String getInstanceArg) {\n       this.algorithm = getInstanceArg;\n     }\n \n-    private final Map<String, Integer> algorithmKeySizeMap = ImmutableMap.of(\"Blowfish\", 128, \"RSA\", 2048);\n+    private final Map<String, Integer> algorithmKeySizeMap = ImmutableMap.of(\n+      \"RSA\", 2048,\n+      \"DH\", 2048,\n+      \"DiffieHellman\", 2048,\n+      \"DSA\", 2048,\n+      \"AES\", 128);\n \n     private final MethodMatcher keyGenInit = MethodMatcher.create().typeDefinition(KEY_GENERATOR).name(\"init\").addParameter(\"int\");\n     private final MethodMatcher keyPairGenInitialize = MethodMatcher.create().typeDefinition(KEY_PAIR_GENERATOR).name(\"initialize\").addParameter(\"int\");\n+    private final MethodMatcher keyPairGenInitializeWithSource = keyPairGenInitialize.copy().addParameter(\"java.security.SecureRandom\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebbd80decf372b05cbd6ad9f36c911823e97b226"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjg4Mzg0OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/security/CryptographicKeySizeCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwOTo1MzoxN1rOFkrqPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwOTo1MzoxN1rOFkrqPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAwODM4Mw==", "bodyText": "This map should be static and declared above the constructor.", "url": "https://github.com/SonarSource/sonar-java/pull/2780#discussion_r374008383", "createdAt": "2020-02-03T09:53:17Z", "author": {"login": "alban-auzeill"}, "path": "java-checks/src/main/java/org/sonar/java/checks/security/CryptographicKeySizeCheck.java", "diffHunk": "@@ -66,19 +83,25 @@ public MethodVisitor(String getInstanceArg) {\n       this.algorithm = getInstanceArg;\n     }\n \n-    private final Map<String, Integer> algorithmKeySizeMap = ImmutableMap.of(\"Blowfish\", 128, \"RSA\", 2048);\n+    private final Map<String, Integer> algorithmKeySizeMap = ImmutableMap.of(\n+      \"RSA\", 2048,\n+      \"DH\", 2048,\n+      \"DiffieHellman\", 2048,\n+      \"DSA\", 2048,\n+      \"AES\", 128);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebbd80decf372b05cbd6ad9f36c911823e97b226"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4146, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}