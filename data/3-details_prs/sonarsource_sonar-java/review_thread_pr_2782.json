{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwMzQ1OTAx", "number": 2782, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOTozNToyNlrODc6TfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOTo0Njo0N1rODc6iIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjQxOTgwOnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/StrongCipherAlgorithmCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOTozNToyNlrOFlNbdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOTozNToyNlrOFlNbdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU2MTY1Mg==", "bodyText": "In this check, we did something similar and we used ExpressionsHelper.getConstantValueAsString.  We may want to use it to be consistent.\nIt would also avoid to trim the quotes at line 74.", "url": "https://github.com/SonarSource/sonar-java/pull/2782#discussion_r374561652", "createdAt": "2020-02-04T09:35:26Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/StrongCipherAlgorithmCheck.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.helpers.JavaPropertiesHelper;\n+import org.sonar.java.checks.methods.AbstractMethodDetection;\n+import org.sonar.java.matcher.MethodMatcher;\n+import org.sonar.java.model.LiteralUtils;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.LiteralTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.NewClassTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5547\")\n+public class StrongCipherAlgorithmCheck extends AbstractMethodDetection {\n+\n+  private static final String MESSAGE = \"Use a strong cipher algorithm.\";\n+\n+  private static final Set<String> VULNERABLE_ALGORITHMS = Stream.of(\"DES\", \"DESede\", \"RC2\", \"RC4\", \"Blowfish\")\n+    .map(name -> name.toUpperCase(Locale.ROOT)).collect(Collectors.toSet());\n+\n+  @Override\n+  protected List<MethodMatcher> getMethodInvocationMatchers() {\n+    return Arrays.asList(\n+      MethodMatcher.create().typeDefinition(\"javax.crypto.Cipher\").name(\"getInstance\").withAnyParameters(),\n+      MethodMatcher.create().typeDefinition(\"javax.crypto.NullCipher\").name(\"<init>\").withAnyParameters());\n+  }\n+\n+  @Override\n+  protected void onConstructorFound(NewClassTree newClassTree) {\n+    reportIssue(newClassTree.identifier(), MESSAGE);\n+  }\n+\n+  @Override\n+  protected void onMethodInvocationFound(MethodInvocationTree mit) {\n+    ExpressionTree firstArg = mit.arguments().get(0);\n+    ExpressionTree value = getValueOrPropertyDefaultValue(firstArg);\n+    if (value.is(Tree.Kind.STRING_LITERAL)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0381e22a1c33f268d08b9d2d7e69e50615ae70c5"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjQ0OTM2OnYy", "diffSide": "RIGHT", "path": "java-checks/src/test/files/checks/StrongCipherAlgorithmCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOTo0NDozNVrOFlNtaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOTo0NDozNVrOFlNtaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU2NjI0OA==", "bodyText": "I think it's better to remove the assignments for clarity.", "url": "https://github.com/SonarSource/sonar-java/pull/2782#discussion_r374566248", "createdAt": "2020-02-04T09:44:35Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks/src/test/files/checks/StrongCipherAlgorithmCheck.java", "diffHunk": "@@ -0,0 +1,99 @@\n+import javax.crypto.Cipher;\n+import javax.crypto.NullCipher;\n+import javax.crypto.NoSuchPaddingException;\n+import java.security.NoSuchAlgorithmException;\n+\n+class MyCipher extends Cipher {\n+  public MyCipher() {\n+    super(null, null, \"\");\n+  }\n+}\n+\n+class A {\n+  void foo() throws NoSuchAlgorithmException, NoSuchPaddingException {\n+    Cipher c;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0381e22a1c33f268d08b9d2d7e69e50615ae70c5"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjQ1NzI4OnYy", "diffSide": "RIGHT", "path": "java-checks/src/test/files/checks/StrongCipherAlgorithmCheck.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOTo0Njo0N1rOFlNyJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMTowOTowOFrOFlQTjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU2NzQ2Mg==", "bodyText": "What is this call?", "url": "https://github.com/SonarSource/sonar-java/pull/2782#discussion_r374567462", "createdAt": "2020-02-04T09:46:47Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks/src/test/files/checks/StrongCipherAlgorithmCheck.java", "diffHunk": "@@ -0,0 +1,99 @@\n+import javax.crypto.Cipher;\n+import javax.crypto.NullCipher;\n+import javax.crypto.NoSuchPaddingException;\n+import java.security.NoSuchAlgorithmException;\n+\n+class MyCipher extends Cipher {\n+  public MyCipher() {\n+    super(null, null, \"\");\n+  }\n+}\n+\n+class A {\n+  void foo() throws NoSuchAlgorithmException, NoSuchPaddingException {\n+    Cipher c;\n+    c = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\"); // Noncompliant [[sc=28;ec=53]] {{Use a strong cipher algorithm.}}\n+    c = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");// Noncompliant\n+    c = Cipher.getInstance(\"RC2/ECB/PKCS5Padding\"); // Noncompliant\n+    c = Cipher.getInstance(\"AES/GCM/NoPadding\");//Compliant\n+    c = new NullCipher(); // Noncompliant [[sc=13;ec=23]] {{Use a strong cipher algorithm.}}\n+    c = new javax.crypto.NullCipher(); // Noncompliant\n+    c = new MyCipher();\n+\n+    // DES\n+    c = Cipher.getInstance(\"DES\"); // Noncompliant\n+    c = Cipher.getInstance(\"DES/ECB\"); // Noncompliant\n+    c = Cipher.getInstance(\"DES/ECB/PKCS5Padding\"); // Noncompliant\n+    c = Cipher.getInstance(\"DES/GCM\"); // Noncompliant\n+    c = Cipher.getInstance(\"DES/GCM/NoPadding\"); // Noncompliant\n+    c = Cipher.getInstance(\"DES/GCM/PKCS5Padding\"); // Noncompliant\n+\n+    // 3DES\n+    c = Cipher.getInstance(\"DESede\"); // Noncompliant\n+    c = Cipher.getInstance(\"DESede/ECB\"); // Noncompliant\n+    c = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\"); // Noncompliant\n+    c = Cipher.getInstance(\"DESede/GCM\"); // Noncompliant\n+    c = Cipher.getInstance(\"DESede/GCM/NoPadding\"); // Noncompliant\n+    c = Cipher.getInstance(\"DESede/GCM/PKCS5Padding\"); // Noncompliant\n+\n+    // RC2\n+    c = Cipher.getInstance(\"RC2\"); // Noncompliant\n+    c = Cipher.getInstance(\"RC2/ECB\"); // Noncompliant\n+    c = Cipher.getInstance(\"RC2/ECB/PKCS5Padding\"); // Noncompliant\n+    c = Cipher.getInstance(\"RC2/GCM\"); // Noncompliant\n+    c = Cipher.getInstance(\"RC2/GCM/NoPadding\"); // Noncompliant\n+    c = Cipher.getInstance(\"RC2/GCM/PKCS5Padding\"); // Noncompliant\n+\n+    // RC4\n+    c = Cipher.getInstance(\"RC4\"); // Noncompliant\n+    c = Cipher.getInstance(\"RC4/ECB\"); // Noncompliant\n+    c = Cipher.getInstance(\"RC4/ECB/PKCS5Padding\"); // Noncompliant\n+    c = Cipher.getInstance(\"RC4/GCM\"); // Noncompliant\n+    c = Cipher.getInstance(\"RC4/GCM/NoPadding\"); // Noncompliant\n+    c = Cipher.getInstance(\"RC4/GCM/PKCS5Padding\"); // Noncompliant\n+\n+    // Blowfish\n+    c = Cipher.getInstance(\"Blowfish\"); // Noncompliant\n+    c = Cipher.getInstance(\"Blowfish/ECB\"); // Noncompliant\n+    c = Cipher.getInstance(\"Blowfish/ECB/PKCS5Padding\"); // Noncompliant\n+    c = Cipher.getInstance(\"Blowfish/GCM\"); // Noncompliant\n+    c = Cipher.getInstance(\"Blowfish/GCM/NoPadding\"); // Noncompliant\n+    c = Cipher.getInstance(\"Blowfish/GCM/PKCS5Padding\"); // Noncompliant\n+\n+    c = Cipher.getInstance(\"AES/GCM/NoPadding\"); // Compliant\n+\n+    c.getBlockSize();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0381e22a1c33f268d08b9d2d7e69e50615ae70c5"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYwODc4MA==", "bodyText": "it was to remove:\nWARNING StrongCipherAlgorithmCheck.java:70: The value of the local variable c is not used\nBut I will apply your above proposal, remove Cipher c;", "url": "https://github.com/SonarSource/sonar-java/pull/2782#discussion_r374608780", "createdAt": "2020-02-04T11:09:08Z", "author": {"login": "alban-auzeill"}, "path": "java-checks/src/test/files/checks/StrongCipherAlgorithmCheck.java", "diffHunk": "@@ -0,0 +1,99 @@\n+import javax.crypto.Cipher;\n+import javax.crypto.NullCipher;\n+import javax.crypto.NoSuchPaddingException;\n+import java.security.NoSuchAlgorithmException;\n+\n+class MyCipher extends Cipher {\n+  public MyCipher() {\n+    super(null, null, \"\");\n+  }\n+}\n+\n+class A {\n+  void foo() throws NoSuchAlgorithmException, NoSuchPaddingException {\n+    Cipher c;\n+    c = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\"); // Noncompliant [[sc=28;ec=53]] {{Use a strong cipher algorithm.}}\n+    c = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");// Noncompliant\n+    c = Cipher.getInstance(\"RC2/ECB/PKCS5Padding\"); // Noncompliant\n+    c = Cipher.getInstance(\"AES/GCM/NoPadding\");//Compliant\n+    c = new NullCipher(); // Noncompliant [[sc=13;ec=23]] {{Use a strong cipher algorithm.}}\n+    c = new javax.crypto.NullCipher(); // Noncompliant\n+    c = new MyCipher();\n+\n+    // DES\n+    c = Cipher.getInstance(\"DES\"); // Noncompliant\n+    c = Cipher.getInstance(\"DES/ECB\"); // Noncompliant\n+    c = Cipher.getInstance(\"DES/ECB/PKCS5Padding\"); // Noncompliant\n+    c = Cipher.getInstance(\"DES/GCM\"); // Noncompliant\n+    c = Cipher.getInstance(\"DES/GCM/NoPadding\"); // Noncompliant\n+    c = Cipher.getInstance(\"DES/GCM/PKCS5Padding\"); // Noncompliant\n+\n+    // 3DES\n+    c = Cipher.getInstance(\"DESede\"); // Noncompliant\n+    c = Cipher.getInstance(\"DESede/ECB\"); // Noncompliant\n+    c = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\"); // Noncompliant\n+    c = Cipher.getInstance(\"DESede/GCM\"); // Noncompliant\n+    c = Cipher.getInstance(\"DESede/GCM/NoPadding\"); // Noncompliant\n+    c = Cipher.getInstance(\"DESede/GCM/PKCS5Padding\"); // Noncompliant\n+\n+    // RC2\n+    c = Cipher.getInstance(\"RC2\"); // Noncompliant\n+    c = Cipher.getInstance(\"RC2/ECB\"); // Noncompliant\n+    c = Cipher.getInstance(\"RC2/ECB/PKCS5Padding\"); // Noncompliant\n+    c = Cipher.getInstance(\"RC2/GCM\"); // Noncompliant\n+    c = Cipher.getInstance(\"RC2/GCM/NoPadding\"); // Noncompliant\n+    c = Cipher.getInstance(\"RC2/GCM/PKCS5Padding\"); // Noncompliant\n+\n+    // RC4\n+    c = Cipher.getInstance(\"RC4\"); // Noncompliant\n+    c = Cipher.getInstance(\"RC4/ECB\"); // Noncompliant\n+    c = Cipher.getInstance(\"RC4/ECB/PKCS5Padding\"); // Noncompliant\n+    c = Cipher.getInstance(\"RC4/GCM\"); // Noncompliant\n+    c = Cipher.getInstance(\"RC4/GCM/NoPadding\"); // Noncompliant\n+    c = Cipher.getInstance(\"RC4/GCM/PKCS5Padding\"); // Noncompliant\n+\n+    // Blowfish\n+    c = Cipher.getInstance(\"Blowfish\"); // Noncompliant\n+    c = Cipher.getInstance(\"Blowfish/ECB\"); // Noncompliant\n+    c = Cipher.getInstance(\"Blowfish/ECB/PKCS5Padding\"); // Noncompliant\n+    c = Cipher.getInstance(\"Blowfish/GCM\"); // Noncompliant\n+    c = Cipher.getInstance(\"Blowfish/GCM/NoPadding\"); // Noncompliant\n+    c = Cipher.getInstance(\"Blowfish/GCM/PKCS5Padding\"); // Noncompliant\n+\n+    c = Cipher.getInstance(\"AES/GCM/NoPadding\"); // Compliant\n+\n+    c.getBlockSize();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU2NzQ2Mg=="}, "originalCommit": {"oid": "0381e22a1c33f268d08b9d2d7e69e50615ae70c5"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4152, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}