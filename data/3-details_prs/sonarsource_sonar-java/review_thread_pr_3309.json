{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwMzYxNTUw", "number": 3309, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNTowOTo0MlrOE_qixA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNToyMjozMlrOE_q7aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MTkyNzcyOnYy", "diffSide": "RIGHT", "path": "its/ruling/src/test/resources/eclipse-jetty/java-S3824.json", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNTowOTo0MlrOH9fimg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzoxNjoyOFrOH9lmdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI0MTk0Ng==", "bodyText": "I'm a bit surprised that we are not catching the exact same pattern a few lines above (lines 120 and 125). I feel it's due to the fact that we are using constants as MemberSelectExpressionTree, which should be exactly the same.\nCan you check that if the problem is on the SE engine side (the way we associate constants with SVs) or if it comes from the rule itself?\nIf it comes from the SE engine, then we need a ticket.", "url": "https://github.com/SonarSource/sonar-java/pull/3309#discussion_r534241946", "createdAt": "2020-12-02T15:09:42Z", "author": {"login": "m-g-sonar"}, "path": "its/ruling/src/test/resources/eclipse-jetty/java-S3824.json", "diffHunk": "@@ -1,4 +1,7 @@\n {\n+'org.eclipse.jetty:jetty-project:jetty-jmx/src/main/java/org/eclipse/jetty/jmx/ConnectorServer.java':[\n+127,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea2736b195440d0a090defd8d12d09f0b76f0734"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI4Mjg5NA==", "bodyText": "I checked and we do not report this issues because SV associated with key is different in containsKey and in put, despite it's actually the same constant. Also true for Enums and reproduces with Map.get()\nIt seems to come from engine :( Will create a ticket.", "url": "https://github.com/SonarSource/sonar-java/pull/3309#discussion_r534282894", "createdAt": "2020-12-02T16:00:13Z", "author": {"login": "margarita-nedzelska-sonarsource"}, "path": "its/ruling/src/test/resources/eclipse-jetty/java-S3824.json", "diffHunk": "@@ -1,4 +1,7 @@\n {\n+'org.eclipse.jetty:jetty-project:jetty-jmx/src/main/java/org/eclipse/jetty/jmx/ConnectorServer.java':[\n+127,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI0MTk0Ng=="}, "originalCommit": {"oid": "ea2736b195440d0a090defd8d12d09f0b76f0734"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM0MTIzNg==", "bodyText": "Created a ticket https://jira.sonarsource.com/browse/SONARJAVA-3626", "url": "https://github.com/SonarSource/sonar-java/pull/3309#discussion_r534341236", "createdAt": "2020-12-02T17:16:28Z", "author": {"login": "margarita-nedzelska-sonarsource"}, "path": "its/ruling/src/test/resources/eclipse-jetty/java-S3824.json", "diffHunk": "@@ -1,4 +1,7 @@\n {\n+'org.eclipse.jetty:jetty-project:jetty-jmx/src/main/java/org/eclipse/jetty/jmx/ConnectorServer.java':[\n+127,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI0MTk0Ng=="}, "originalCommit": {"oid": "ea2736b195440d0a090defd8d12d09f0b76f0734"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MTkzODI0OnYy", "diffSide": "RIGHT", "path": "its/ruling/src/test/resources/sonar-server/java-S3824.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNToxMTo0OVrOH9fpEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNToxMTo0OVrOH9fpEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI0MzYwMA==", "bodyText": "very nice findings!", "url": "https://github.com/SonarSource/sonar-java/pull/3309#discussion_r534243600", "createdAt": "2020-12-02T15:11:49Z", "author": {"login": "m-g-sonar"}, "path": "its/ruling/src/test/resources/sonar-server/java-S3824.json", "diffHunk": "@@ -11,10 +15,20 @@\n 'org.sonarsource.sonarqube:sonar-server:src/main/java/org/sonar/server/issue/notification/NewIssuesStatistics.java':[\n 53,\n ],\n+'org.sonarsource.sonarqube:sonar-server:src/main/java/org/sonar/server/issue/ws/SearchAction.java':[\n+408,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea2736b195440d0a090defd8d12d09f0b76f0734"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MTk1MzM2OnYy", "diffSide": "RIGHT", "path": "java-checks-test-sources/src/main/java/symbolicexecution/checks/MapComputeIfAbsentOrPresentCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNToxNTowNVrOH9fymg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNToxNTowNVrOH9fymg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI0NjA0Mg==", "bodyText": "unused import", "url": "https://github.com/SonarSource/sonar-java/pull/3309#discussion_r534246042", "createdAt": "2020-12-02T15:15:05Z", "author": {"login": "m-g-sonar"}, "path": "java-checks-test-sources/src/main/java/symbolicexecution/checks/MapComputeIfAbsentOrPresentCheck.java", "diffHunk": "@@ -1,11 +1,14 @@\n+package symbolicexecution.checks;\n+\n import com.google.common.base.Preconditions;\n \n import javax.annotation.CheckForNull;\n \n import java.util.Map;\n import java.util.Objects;\n+import org.elasticsearch.common.MacAddressProvider;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea2736b195440d0a090defd8d12d09f0b76f0734"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MTk4MjQzOnYy", "diffSide": "RIGHT", "path": "java-frontend/src/main/java/org/sonar/java/se/checks/MapComputeIfAbsentOrPresentCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNToyMDo1M1rOH9gErA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNToyMDo1M1rOH9gErA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI1MDY2OA==", "bodyText": "Love this part! pretty nice job!", "url": "https://github.com/SonarSource/sonar-java/pull/3309#discussion_r534250668", "createdAt": "2020-12-02T15:20:53Z", "author": {"login": "m-g-sonar"}, "path": "java-frontend/src/main/java/org/sonar/java/se/checks/MapComputeIfAbsentOrPresentCheck.java", "diffHunk": "@@ -153,60 +184,99 @@ public void checkEndOfExecution(CheckerContext context) {\n     checkIssues.stream().filter(checkIssue -> checkIssue.isOnlyPossibleIssueForReportTree(checkIssues)).forEach(issue -> issue.report(context, check));\n   }\n \n-  private static class CheckIssue {\n+  private abstract static class CheckIssue {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea2736b195440d0a090defd8d12d09f0b76f0734"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MTk5MDgwOnYy", "diffSide": "RIGHT", "path": "java-frontend/src/main/java/org/sonar/java/se/checks/MapComputeIfAbsentOrPresentCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNToyMjozMlrOH9gJ6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNToyMjozMlrOH9gJ6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI1MjAxMA==", "bodyText": "From how it is implemented, getIfStatementParent(mit) can be pretty costly (it potentially explore the whole AST), and we are going to make such calls for each map.containsKey() or map.get().\nWhat about precomputing them or coaching them to avoid having to reexplore the AST for all these invocations?", "url": "https://github.com/SonarSource/sonar-java/pull/3309#discussion_r534252010", "createdAt": "2020-12-02T15:22:32Z", "author": {"login": "m-g-sonar"}, "path": "java-frontend/src/main/java/org/sonar/java/se/checks/MapComputeIfAbsentOrPresentCheck.java", "diffHunk": "@@ -126,15 +151,21 @@ private static boolean isMethodInvocationThrowingCheckedException(ExpressionTree\n   }\n \n   private static boolean isInsideIfStatementWithNullCheckWithoutElse(MethodInvocationTree mit) {\n+    return getIfStatementParent(mit).map(ifStatementTree -> ifStatementTree.elseStatement() == null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea2736b195440d0a090defd8d12d09f0b76f0734"}, "originalPosition": 111}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3691, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}