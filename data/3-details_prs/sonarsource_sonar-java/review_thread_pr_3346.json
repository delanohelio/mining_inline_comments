{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2MDQxMTgy", "number": 3346, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNzo1Njo0M1rOFD3EPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNTozMTo1OFrOFFCsmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NTkyMjU1OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/NullReturnedOnComputeIfPresentOrAbsentCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNzo1Njo0M1rOIDtGew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNzo1Njo0M1rOIDtGew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc1NTU3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static final String PRIMARY_MESSAGE = \"Use \\\"Map.containsKey(key)\\\" followed by \\\"Map.put(key, null)\\\" to add null values.\";\n          \n          \n            \n              privvate static final String PRIMARY_MESSAGE = \"Use \\\"Map.containsKey(key)\\\" followed by \\\"Map.put(key, null)\\\" to add null values.\";", "url": "https://github.com/SonarSource/sonar-java/pull/3346#discussion_r540755579", "createdAt": "2020-12-11T07:56:43Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/NullReturnedOnComputeIfPresentOrAbsentCheck.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.methods.AbstractMethodDetection;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.LambdaExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S6104\")\n+public class NullReturnedOnComputeIfPresentOrAbsentCheck extends AbstractMethodDetection {\n+  public static final String PRIMARY_MESSAGE = \"Use \\\"Map.containsKey(key)\\\" followed by \\\"Map.put(key, null)\\\" to add null values.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52543908c0ea5ee3718419763c580a3a8f55c03d"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NTkyMzQ5OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/NullReturnedOnComputeIfPresentOrAbsentCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNzo1Njo1OFrOIDtG9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNzo1Njo1OFrOIDtG9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc1NTcwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static final String SECONDARY_MESSAGE = \"null literal in the arguments\";\n          \n          \n            \n              privvate static final String SECONDARY_MESSAGE = \"null literal in the arguments\";", "url": "https://github.com/SonarSource/sonar-java/pull/3346#discussion_r540755702", "createdAt": "2020-12-11T07:56:58Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/NullReturnedOnComputeIfPresentOrAbsentCheck.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.methods.AbstractMethodDetection;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.LambdaExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S6104\")\n+public class NullReturnedOnComputeIfPresentOrAbsentCheck extends AbstractMethodDetection {\n+  public static final String PRIMARY_MESSAGE = \"Use \\\"Map.containsKey(key)\\\" followed by \\\"Map.put(key, null)\\\" to add null values.\";\n+  public static final String SECONDARY_MESSAGE = \"null literal in the arguments\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52543908c0ea5ee3718419763c580a3a8f55c03d"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NTkzNDYyOnYy", "diffSide": "RIGHT", "path": "java-checks-test-sources/src/main/java/checks/NullReturnedOnComputeIfPresentOrAbsent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwODowMDoxOVrOIDtNNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwODowMDoxOVrOIDtNNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc1NzMwMg==", "bodyText": "Let's put these two methods at the end, in order to respect the convention we have on the main code, and let the interesting code actually testing stuff at the beginning.", "url": "https://github.com/SonarSource/sonar-java/pull/3346#discussion_r540757302", "createdAt": "2020-12-11T08:00:19Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks-test-sources/src/main/java/checks/NullReturnedOnComputeIfPresentOrAbsent.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package checks;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+public class NullReturnedOnComputeIfPresentOrAbsent {\n+\n+  public static String presentLambda(String k, String v) {\n+    return null;\n+  }\n+\n+  public static String absentLambda(String k) {\n+    return null;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52543908c0ea5ee3718419763c580a3a8f55c03d"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NTk2NDM2OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/NullReturnedOnComputeIfPresentOrAbsentCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwODowODozN1rOIDtdVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwODowODozN1rOIDtdVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc2MTQyOA==", "bodyText": "Just to clarify, by default, AbstractMethodDetection visits the three nodes Tree.Kind.METHOD_INVOCATION, Tree.Kind.NEW_CLASS, Tree.Kind.METHOD_REFERENCE, so if you don't add this method, the check would still work fine.\nThat being said, we are only looking for METHOD_INVOCATION, so overriding this method here sounds like a nice optimization.\nMaybe this deserves a small comment?", "url": "https://github.com/SonarSource/sonar-java/pull/3346#discussion_r540761428", "createdAt": "2020-12-11T08:08:37Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/NullReturnedOnComputeIfPresentOrAbsentCheck.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.methods.AbstractMethodDetection;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.LambdaExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S6104\")\n+public class NullReturnedOnComputeIfPresentOrAbsentCheck extends AbstractMethodDetection {\n+  public static final String PRIMARY_MESSAGE = \"Use \\\"Map.containsKey(key)\\\" followed by \\\"Map.put(key, null)\\\" to add null values.\";\n+  public static final String SECONDARY_MESSAGE = \"null literal in the arguments\";\n+  private static final MethodMatchers COMPUTE_IF = MethodMatchers\n+    .create()\n+    .ofTypes(\"java.util.Map\")\n+    .names(\"computeIfPresent\", \"computeIfAbsent\")\n+    .addParametersMatcher(MethodMatchers.ANY, MethodMatchers.ANY)\n+    .build();\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.METHOD_INVOCATION);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52543908c0ea5ee3718419763c580a3a8f55c03d"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NTk4MTk5OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/NullReturnedOnComputeIfPresentOrAbsentCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwODoxMjo1NVrOIDtmjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwODoxMjo1NVrOIDtmjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc2Mzc5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                getNullReturn(arguments.get(1))\n          \n          \n            \n                  .ifPresent(body -> reportIssue(ExpressionUtils.methodName(invocation),\n          \n          \n            \n                getNullReturn(arguments.get(1)).ifPresent(body -> \n          \n          \n            \n                   reportIssue(ExpressionUtils.methodName(invocation),\n          \n      \n    \n    \n  \n\nWe are usually following this formatting instead.", "url": "https://github.com/SonarSource/sonar-java/pull/3346#discussion_r540763791", "createdAt": "2020-12-11T08:12:55Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/NullReturnedOnComputeIfPresentOrAbsentCheck.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.methods.AbstractMethodDetection;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.LambdaExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S6104\")\n+public class NullReturnedOnComputeIfPresentOrAbsentCheck extends AbstractMethodDetection {\n+  public static final String PRIMARY_MESSAGE = \"Use \\\"Map.containsKey(key)\\\" followed by \\\"Map.put(key, null)\\\" to add null values.\";\n+  public static final String SECONDARY_MESSAGE = \"null literal in the arguments\";\n+  private static final MethodMatchers COMPUTE_IF = MethodMatchers\n+    .create()\n+    .ofTypes(\"java.util.Map\")\n+    .names(\"computeIfPresent\", \"computeIfAbsent\")\n+    .addParametersMatcher(MethodMatchers.ANY, MethodMatchers.ANY)\n+    .build();\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.METHOD_INVOCATION);\n+  }\n+\n+  @Override\n+  public void onMethodInvocationFound(MethodInvocationTree invocation) {\n+    Arguments arguments = invocation.arguments();\n+    getNullReturn(arguments.get(1))\n+      .ifPresent(body -> reportIssue(ExpressionUtils.methodName(invocation),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52543908c0ea5ee3718419763c580a3a8f55c03d"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NjAwMTA0OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/NullReturnedOnComputeIfPresentOrAbsentCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwODoxODowN1rOIDtxVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwODoxODowN1rOIDtxVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc2NjU0OA==", "bodyText": "I would not add a new line for this method call and put it next to the type, the same way you would do for stream for example:\nlist.stream()\n  .map(...)\n  .collect(...)", "url": "https://github.com/SonarSource/sonar-java/pull/3346#discussion_r540766548", "createdAt": "2020-12-11T08:18:07Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/NullReturnedOnComputeIfPresentOrAbsentCheck.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.methods.AbstractMethodDetection;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.LambdaExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S6104\")\n+public class NullReturnedOnComputeIfPresentOrAbsentCheck extends AbstractMethodDetection {\n+  public static final String PRIMARY_MESSAGE = \"Use \\\"Map.containsKey(key)\\\" followed by \\\"Map.put(key, null)\\\" to add null values.\";\n+  public static final String SECONDARY_MESSAGE = \"null literal in the arguments\";\n+  private static final MethodMatchers COMPUTE_IF = MethodMatchers\n+    .create()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52543908c0ea5ee3718419763c580a3a8f55c03d"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NjAxNDc1OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/NullReturnedOnComputeIfPresentOrAbsentCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwODoyMTo0OFrOIDt5HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwODoyMTo0OFrOIDt5HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc2ODU0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static Optional<Tree> getNullReturn(Tree tree) {\n          \n          \n            \n              private static Optional<Tree> getNullReturn(Tree tree) {", "url": "https://github.com/SonarSource/sonar-java/pull/3346#discussion_r540768541", "createdAt": "2020-12-11T08:21:48Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/NullReturnedOnComputeIfPresentOrAbsentCheck.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.methods.AbstractMethodDetection;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.LambdaExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S6104\")\n+public class NullReturnedOnComputeIfPresentOrAbsentCheck extends AbstractMethodDetection {\n+  public static final String PRIMARY_MESSAGE = \"Use \\\"Map.containsKey(key)\\\" followed by \\\"Map.put(key, null)\\\" to add null values.\";\n+  public static final String SECONDARY_MESSAGE = \"null literal in the arguments\";\n+  private static final MethodMatchers COMPUTE_IF = MethodMatchers\n+    .create()\n+    .ofTypes(\"java.util.Map\")\n+    .names(\"computeIfPresent\", \"computeIfAbsent\")\n+    .addParametersMatcher(MethodMatchers.ANY, MethodMatchers.ANY)\n+    .build();\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.METHOD_INVOCATION);\n+  }\n+\n+  @Override\n+  public void onMethodInvocationFound(MethodInvocationTree invocation) {\n+    Arguments arguments = invocation.arguments();\n+    getNullReturn(arguments.get(1))\n+      .ifPresent(body -> reportIssue(ExpressionUtils.methodName(invocation),\n+        PRIMARY_MESSAGE,\n+        Collections.singletonList(new JavaFileScannerContext.Location(SECONDARY_MESSAGE, body)),\n+        null));\n+  }\n+\n+  @Override\n+  protected MethodMatchers getMethodInvocationMatchers() {\n+    return COMPUTE_IF;\n+  }\n+\n+  public static Optional<Tree> getNullReturn(Tree tree) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52543908c0ea5ee3718419763c580a3a8f55c03d"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NjAyMjg3OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/NullReturnedOnComputeIfPresentOrAbsentCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwODoyNDowMFrOIDt9uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwODoyNDowMFrOIDt9uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc2OTcyMA==", "bodyText": "I would rather put this method above onMethodInvocationFound so that when reading the code from top to bottom, we know what kind of MethodInvocationTree will be received by onMethodInvocationFound.", "url": "https://github.com/SonarSource/sonar-java/pull/3346#discussion_r540769720", "createdAt": "2020-12-11T08:24:00Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/NullReturnedOnComputeIfPresentOrAbsentCheck.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.methods.AbstractMethodDetection;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.LambdaExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S6104\")\n+public class NullReturnedOnComputeIfPresentOrAbsentCheck extends AbstractMethodDetection {\n+  public static final String PRIMARY_MESSAGE = \"Use \\\"Map.containsKey(key)\\\" followed by \\\"Map.put(key, null)\\\" to add null values.\";\n+  public static final String SECONDARY_MESSAGE = \"null literal in the arguments\";\n+  private static final MethodMatchers COMPUTE_IF = MethodMatchers\n+    .create()\n+    .ofTypes(\"java.util.Map\")\n+    .names(\"computeIfPresent\", \"computeIfAbsent\")\n+    .addParametersMatcher(MethodMatchers.ANY, MethodMatchers.ANY)\n+    .build();\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.METHOD_INVOCATION);\n+  }\n+\n+  @Override\n+  public void onMethodInvocationFound(MethodInvocationTree invocation) {\n+    Arguments arguments = invocation.arguments();\n+    getNullReturn(arguments.get(1))\n+      .ifPresent(body -> reportIssue(ExpressionUtils.methodName(invocation),\n+        PRIMARY_MESSAGE,\n+        Collections.singletonList(new JavaFileScannerContext.Location(SECONDARY_MESSAGE, body)),\n+        null));\n+  }\n+\n+  @Override\n+  protected MethodMatchers getMethodInvocationMatchers() {\n+    return COMPUTE_IF;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52543908c0ea5ee3718419763c580a3a8f55c03d"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NjAzNjU1OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/NullReturnedOnComputeIfPresentOrAbsentCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwODoyNzoyOVrOIDuFeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwODoyNzoyOVrOIDuFeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc3MTcwNg==", "bodyText": "Maybe getNullReturnInLambda would better describe what it is actually doing.", "url": "https://github.com/SonarSource/sonar-java/pull/3346#discussion_r540771706", "createdAt": "2020-12-11T08:27:29Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/NullReturnedOnComputeIfPresentOrAbsentCheck.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.methods.AbstractMethodDetection;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.LambdaExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S6104\")\n+public class NullReturnedOnComputeIfPresentOrAbsentCheck extends AbstractMethodDetection {\n+  public static final String PRIMARY_MESSAGE = \"Use \\\"Map.containsKey(key)\\\" followed by \\\"Map.put(key, null)\\\" to add null values.\";\n+  public static final String SECONDARY_MESSAGE = \"null literal in the arguments\";\n+  private static final MethodMatchers COMPUTE_IF = MethodMatchers\n+    .create()\n+    .ofTypes(\"java.util.Map\")\n+    .names(\"computeIfPresent\", \"computeIfAbsent\")\n+    .addParametersMatcher(MethodMatchers.ANY, MethodMatchers.ANY)\n+    .build();\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.METHOD_INVOCATION);\n+  }\n+\n+  @Override\n+  public void onMethodInvocationFound(MethodInvocationTree invocation) {\n+    Arguments arguments = invocation.arguments();\n+    getNullReturn(arguments.get(1))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52543908c0ea5ee3718419763c580a3a8f55c03d"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NjA0OTI2OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/NullReturnedOnComputeIfPresentOrAbsentCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwODozMDoyOVrOIDuMnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwODozMDoyOVrOIDuMnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc3MzUzMw==", "bodyText": "body as the name of the lambda parameter sounds strange, I have no indication that this will actually always be a null literal. We should rename it to reflect what it really is.", "url": "https://github.com/SonarSource/sonar-java/pull/3346#discussion_r540773533", "createdAt": "2020-12-11T08:30:29Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/NullReturnedOnComputeIfPresentOrAbsentCheck.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.methods.AbstractMethodDetection;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.LambdaExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S6104\")\n+public class NullReturnedOnComputeIfPresentOrAbsentCheck extends AbstractMethodDetection {\n+  public static final String PRIMARY_MESSAGE = \"Use \\\"Map.containsKey(key)\\\" followed by \\\"Map.put(key, null)\\\" to add null values.\";\n+  public static final String SECONDARY_MESSAGE = \"null literal in the arguments\";\n+  private static final MethodMatchers COMPUTE_IF = MethodMatchers\n+    .create()\n+    .ofTypes(\"java.util.Map\")\n+    .names(\"computeIfPresent\", \"computeIfAbsent\")\n+    .addParametersMatcher(MethodMatchers.ANY, MethodMatchers.ANY)\n+    .build();\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.METHOD_INVOCATION);\n+  }\n+\n+  @Override\n+  public void onMethodInvocationFound(MethodInvocationTree invocation) {\n+    Arguments arguments = invocation.arguments();\n+    getNullReturn(arguments.get(1))\n+      .ifPresent(body -> reportIssue(ExpressionUtils.methodName(invocation),\n+        PRIMARY_MESSAGE,\n+        Collections.singletonList(new JavaFileScannerContext.Location(SECONDARY_MESSAGE, body)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52543908c0ea5ee3718419763c580a3a8f55c03d"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NjE5MDI2OnYy", "diffSide": "RIGHT", "path": "java-checks/src/test/java/org/sonar/java/checks/NullReturnedOnComputeIfPresentOrAbsentCheckTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwOTowNjoyM1rOIDvdeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwOTowNjoyM1rOIDvdeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc5NDIzMw==", "bodyText": "Same here idea as the comment in the main code, you don't need to separate the method call from the type.", "url": "https://github.com/SonarSource/sonar-java/pull/3346#discussion_r540794233", "createdAt": "2020-12-11T09:06:23Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks/src/test/java/org/sonar/java/checks/NullReturnedOnComputeIfPresentOrAbsentCheckTest.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import org.junit.jupiter.api.Test;\n+import org.sonar.java.checks.verifier.JavaCheckVerifier;\n+\n+import static org.sonar.java.CheckTestUtils.testSourcesPath;\n+\n+class NullReturnedOnComputeIfPresentOrAbsentCheckTest {\n+  @Test\n+  void test() {\n+    JavaCheckVerifier\n+      .newVerifier()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52543908c0ea5ee3718419763c580a3a8f55c03d"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NjIwMDE5OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/resources/org/sonar/l10n/java/rules/java/S6104_java.html", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwOTowODo0OFrOIDvjOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwOTowODo0OFrOIDvjOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc5NTcwNg==", "bodyText": "This is a bug in ruleapi, this should be an HTML list.\nThis is due to the fact that a space is sometimes inserted automatically before the * in the rspec. I updated the description to fix it, you can re-generate the description.", "url": "https://github.com/SonarSource/sonar-java/pull/3346#discussion_r540795706", "createdAt": "2020-12-11T09:08:48Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks/src/main/resources/org/sonar/l10n/java/rules/java/S6104_java.html", "diffHunk": "@@ -0,0 +1,25 @@\n+<p>Map <a\n+href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Map.html#computeIfAbsent-K-java.util.function.Function-\">computeIfAbsent</a>&nbsp;and <a\n+href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Map.html#computeIfPresent-K-java.util.function.BiFunction-\">computeIfPresent</a> methods are\n+convenient to avoid the cumbersome process to check if a key exists or not, followed by the addition of the entry. However, when the function used to\n+compute the value returns <code>null</code>, the entry <code>key-&gt;null</code> will not be added to the Map. Furthermore, in the case of\n+<code>computeIfPresent</code>, if the key is present the entry will be removed. These methods should therefore not be used to conditionally add an\n+entry with a null value. The traditional way should be used instead.</p>\n+<p>This rule raises an issue when <code>computeIfAbsent</code> or <code>computeIfPresent</code> is used with a lambda always returning null.</p>\n+<h2>Noncompliant Code Example</h2>\n+<pre>\n+map.computeIfAbsent(key, k -&gt; null); // Noncompliant,  te map will not contain an entry key-&gt;null.\n+map.computeIfPresent(key, (k, oldValue) -&gt; null); // Noncompliant\n+</pre>\n+<h2>Compliant Solution</h2>\n+<pre>\n+if (!map.containsKey(key)) {\n+    map.put(key, null);\n+}\n+if (map.containsKey(key)) {\n+    map.put(key, null);\n+}\n+</pre>\n+<h2>See also</h2>\n+<p> * {rule:squid:S3824} - \"Map.get\" and value test should be replaced with single method call</p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52543908c0ea5ee3718419763c580a3a8f55c03d"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODMxMzg0OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/NullReturnedOnComputeIfPresentOrAbsentCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNTozMTo1OFrOIFWJ3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNTozMTo1OFrOIFWJ3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ3Njc2NQ==", "bodyText": "This annotation should go after the javadoc.", "url": "https://github.com/SonarSource/sonar-java/pull/3346#discussion_r542476765", "createdAt": "2020-12-14T15:31:58Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/NullReturnedOnComputeIfPresentOrAbsentCheck.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.methods.AbstractMethodDetection;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.LambdaExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S6104\")\n+public class NullReturnedOnComputeIfPresentOrAbsentCheck extends AbstractMethodDetection {\n+  private static final String PRIMARY_MESSAGE = \"Use \\\"Map.containsKey(key)\\\" followed by \\\"Map.put(key, null)\\\" to add null values.\";\n+  private static final String SECONDARY_MESSAGE = \"null literal in the arguments\";\n+  private static final MethodMatchers COMPUTE_IF = MethodMatchers.create()\n+    .ofTypes(\"java.util.Map\")\n+    .names(\"computeIfPresent\", \"computeIfAbsent\")\n+    .addParametersMatcher(MethodMatchers.ANY, MethodMatchers.ANY)\n+    .build();\n+\n+  @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1756c7e77c692c7bb47950b62ee4b16ca94e93b"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3721, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}