{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1OTg0NTA1", "number": 3345, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNToxMDo1NlrOFDhtcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNToxOToyNFrOFDh_XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjQyMzU1OnYy", "diffSide": "LEFT", "path": "java-frontend/src/main/java/org/sonar/java/ast/parser/ListTreeImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNToxMDo1NlrOIDOCOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjowMzowOVrOIDQr2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI0NjU4Ng==", "bodyText": "so cool we can drop the AbstractIterator!", "url": "https://github.com/SonarSource/sonar-java/pull/3345#discussion_r540246586", "createdAt": "2020-12-10T15:10:56Z", "author": {"login": "m-g-sonar"}, "path": "java-frontend/src/main/java/org/sonar/java/ast/parser/ListTreeImpl.java", "diffHunk": "@@ -67,45 +64,8 @@ public Kind kind() {\n   }\n \n   @Override\n-  public Iterable<Tree> children() {\n-    return new InterleaveIterable(list, separators);\n-  }\n-\n-  private class InterleaveIterable implements Iterable<Tree> {\n-\n-    private final List<Iterator<? extends Tree>> iterators;\n-\n-    public InterleaveIterable(List<T> list, List<SyntaxToken> separators) {\n-      iterators = Arrays.asList(list.iterator(), separators.iterator());\n-    }\n-\n-    @Override\n-    public Iterator<Tree> iterator() {\n-      return new InterleaveIterator<>(iterators);\n-    }\n-  }\n-\n-  private static class InterleaveIterator<E> extends AbstractIterator<E> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51bb88051a86fcdb14ece046280fa2a9598c5fcb"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI5MDAxMA==", "bodyText": "I guess this class (fully covered btw :) ) lived for a couple of hours", "url": "https://github.com/SonarSource/sonar-java/pull/3345#discussion_r540290010", "createdAt": "2020-12-10T16:03:09Z", "author": {"login": "margarita-nedzelska-sonarsource"}, "path": "java-frontend/src/main/java/org/sonar/java/ast/parser/ListTreeImpl.java", "diffHunk": "@@ -67,45 +64,8 @@ public Kind kind() {\n   }\n \n   @Override\n-  public Iterable<Tree> children() {\n-    return new InterleaveIterable(list, separators);\n-  }\n-\n-  private class InterleaveIterable implements Iterable<Tree> {\n-\n-    private final List<Iterator<? extends Tree>> iterators;\n-\n-    public InterleaveIterable(List<T> list, List<SyntaxToken> separators) {\n-      iterators = Arrays.asList(list.iterator(), separators.iterator());\n-    }\n-\n-    @Override\n-    public Iterator<Tree> iterator() {\n-      return new InterleaveIterator<>(iterators);\n-    }\n-  }\n-\n-  private static class InterleaveIterator<E> extends AbstractIterator<E> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI0NjU4Ng=="}, "originalCommit": {"oid": "51bb88051a86fcdb14ece046280fa2a9598c5fcb"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjQ2NDUyOnYy", "diffSide": "RIGHT", "path": "java-frontend/src/main/java/org/sonar/java/model/JavaTree.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNToxODoyNlrOIDObLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNToxODoyNlrOIDObLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI1Mjk3Mw==", "bodyText": "So we cab probably change next line to:\nchildren = children().stream()\n  .filter(Objects::nonNull)\n  .collect(Collectors.toList());", "url": "https://github.com/SonarSource/sonar-java/pull/3345#discussion_r540252973", "createdAt": "2020-12-10T15:18:26Z", "author": {"login": "m-g-sonar"}, "path": "java-frontend/src/main/java/org/sonar/java/model/JavaTree.java", "diffHunk": "@@ -129,7 +129,7 @@ public void setParent(Tree parent) {\n    *\n    * @throws java.lang.UnsupportedOperationException if {@link #isLeaf()} returns {@code true}\n    */\n-  protected abstract Iterable<Tree> children();\n+  protected abstract List<Tree> children();\n \n   public List<Tree> getChildren() {\n     if(children == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51bb88051a86fcdb14ece046280fa2a9598c5fcb"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjQ2OTQxOnYy", "diffSide": "RIGHT", "path": "java-frontend/src/main/java/org/sonar/java/model/JavaTree.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNToxOToyNFrOIDOeNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNToxOToyNFrOIDOeNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI1Mzc0OA==", "bodyText": "There are some unit tests that add the result of this method into another list to do assertions. It worth modifying them to simplify a bit.", "url": "https://github.com/SonarSource/sonar-java/pull/3345#discussion_r540253748", "createdAt": "2020-12-10T15:19:24Z", "author": {"login": "m-g-sonar"}, "path": "java-frontend/src/main/java/org/sonar/java/model/JavaTree.java", "diffHunk": "@@ -129,7 +129,7 @@ public void setParent(Tree parent) {\n    *\n    * @throws java.lang.UnsupportedOperationException if {@link #isLeaf()} returns {@code true}\n    */\n-  protected abstract Iterable<Tree> children();\n+  protected abstract List<Tree> children();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51bb88051a86fcdb14ece046280fa2a9598c5fcb"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3716, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}