{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5NDMxOTgz", "number": 2922, "title": "SONARJAVA-3359 Rule S5783: Tested checked exception should be expected from one single call", "bodyText": "", "createdAt": "2020-04-27T11:17:10Z", "url": "https://github.com/SonarSource/sonar-java/pull/2922", "merged": true, "mergeCommit": {"oid": "4e69ad29fefcc90b42ceec19c14510114a87640b"}, "closed": true, "closedAt": "2020-05-01T09:40:02Z", "author": {"login": "quentin-jaquier-sonarsource"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcbtc_jABqjMyNzUyNzI5MTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcc96PTgBqjMyOTI2NTE2MTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9f41a7bf6be816e6bcbdce7ee12ddc7e477aeb91", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/9f41a7bf6be816e6bcbdce7ee12ddc7e477aeb91", "committedDate": "2020-04-27T11:15:56Z", "message": "SONARJAVA-3359 Rule S5783: Tested checked exception should be expected from one single call"}, "afterCommit": {"oid": "25c2cc4c194bdf92a1106ca2a0f4b74ed0db18c7", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/25c2cc4c194bdf92a1106ca2a0f4b74ed0db18c7", "committedDate": "2020-04-27T11:19:06Z", "message": "SONARJAVA-3359 Rule S5783: Tested checked exception should be expected from one single call"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "25c2cc4c194bdf92a1106ca2a0f4b74ed0db18c7", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/25c2cc4c194bdf92a1106ca2a0f4b74ed0db18c7", "committedDate": "2020-04-27T11:19:06Z", "message": "SONARJAVA-3359 Rule S5783: Tested checked exception should be expected from one single call"}, "afterCommit": {"oid": "344fff438c1e626e1cf1e50ad8872d0e2b5a1ddc", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/344fff438c1e626e1cf1e50ad8872d0e2b5a1ddc", "committedDate": "2020-04-27T11:41:48Z", "message": "SONARJAVA-3359 Rule S5783: Tested checked exception should be expected from one single call"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "344fff438c1e626e1cf1e50ad8872d0e2b5a1ddc", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/344fff438c1e626e1cf1e50ad8872d0e2b5a1ddc", "committedDate": "2020-04-27T11:41:48Z", "message": "SONARJAVA-3359 Rule S5783: Tested checked exception should be expected from one single call"}, "afterCommit": {"oid": "99d76d5f7d1af209fe1bb81151ccf9b06906b9dc", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/99d76d5f7d1af209fe1bb81151ccf9b06906b9dc", "committedDate": "2020-04-27T12:19:12Z", "message": "SONARJAVA-3359 Rule S5783: Tested checked exception should be expected from one single call"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNDgyMjMx", "url": "https://github.com/SonarSource/sonar-java/pull/2922#pullrequestreview-402482231", "createdAt": "2020-04-29T09:00:02Z", "commit": {"oid": "99d76d5f7d1af209fe1bb81151ccf9b06906b9dc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwOTowMDowMlrOGN12hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwOTowMDowMlrOGN12hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE2Njk4MA==", "bodyText": "JUnit4 also supports assertions with messages - unfortunately as first parameter, different to JUnit5 (e.g. https://junit.org/junit4/javadoc/latest/src-html/org/junit/Assert.html#line.998). By relying on the exception type to be in position 0 and the executable in position 1, I'd argue it could come to FNs when a developer uses that JUnit4 assertion. Do we want to support that case as well?", "url": "https://github.com/SonarSource/sonar-java/pull/2922#discussion_r417166980", "createdAt": "2020-04-29T09:00:02Z", "author": {"login": "johann-beleites-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/OneExpectedCheckExceptionCheck.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.sonar.check.Rule;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.semantic.Type;\n+import org.sonar.plugins.java.api.tree.BaseTreeVisitor;\n+import org.sonar.plugins.java.api.tree.ClassTree;\n+import org.sonar.plugins.java.api.tree.ExpressionStatementTree;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.LambdaExpressionTree;\n+import org.sonar.plugins.java.api.tree.MemberSelectExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.StatementTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+import org.sonar.plugins.java.api.tree.TryStatementTree;\n+\n+@Rule(key = \"S5783\")\n+public class OneExpectedCheckExceptionCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final MethodMatchers ASSERT_THROWS_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"org.junit.Assert\", \"org.junit.jupiter.api.Assertions\")\n+    .names(\"assertThrows\")\n+    .withAnyParameters()\n+    .build();\n+\n+  private static final MethodMatchers JUNIT_FAIL_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"org.junit.Assert\", \"org.junit.jupiter.api.Assertions\")\n+    .names(\"fail\")\n+    .withAnyParameters()\n+    .build();\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Arrays.asList(Tree.Kind.TRY_STATEMENT, Tree.Kind.METHOD_INVOCATION);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    if (!hasSemantic()) {\n+      return;\n+    }\n+\n+    if (tree.is(Tree.Kind.METHOD_INVOCATION)) {\n+      MethodInvocationTree mit = (MethodInvocationTree) tree;\n+      if (mit.arguments().size() >= 2 && ASSERT_THROWS_MATCHER.matches(mit)) {\n+        Optional<IdentifierTree> expectedException = getExpectedException(mit.arguments().get(0));\n+        ExpressionTree executable = mit.arguments().get(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99d76d5f7d1af209fe1bb81151ccf9b06906b9dc"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNDY3ODgw", "url": "https://github.com/SonarSource/sonar-java/pull/2922#pullrequestreview-403467880", "createdAt": "2020-04-30T12:24:10Z", "commit": {"oid": "ee2d5b62453a75adccb7add4ee96dbd3adbe0849"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMjoyNDoxMFrOGOm2vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMjo0NTo0MlrOGOnlug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk2OTg1NQ==", "bodyText": "I think the title is still cumbersome.\nWhat about \"Only one method invocation is expected when testing checked exceptions\"", "url": "https://github.com/SonarSource/sonar-java/pull/2922#discussion_r417969855", "createdAt": "2020-04-30T12:24:10Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/resources/org/sonar/l10n/java/rules/java/S5783_java.json", "diffHunk": "@@ -0,0 +1,13 @@\n+{\n+  \"title\": \"Tested checked exception should be expected from one single call\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee2d5b62453a75adccb7add4ee96dbd3adbe0849"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk3NzAxNw==", "bodyText": "i would rewrite this part slightly differently:\nif (!executable.is(Tree.Kind.LAMBDA_EXPRESSION)) {\n  return;\n}\ngetExpectedException(expectedType)\n  .ifPresent(exception -> reportMultipleCallThrowingExceptionInTree(exception.symbolType(), ((LambdaExpressionTree) executable).body(), exception));", "url": "https://github.com/SonarSource/sonar-java/pull/2922#discussion_r417977017", "createdAt": "2020-04-30T12:37:01Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/OneExpectedCheckExceptionCheck.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.sonar.check.Rule;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.semantic.Type;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.BaseTreeVisitor;\n+import org.sonar.plugins.java.api.tree.ClassTree;\n+import org.sonar.plugins.java.api.tree.ExpressionStatementTree;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.LambdaExpressionTree;\n+import org.sonar.plugins.java.api.tree.MemberSelectExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.StatementTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+import org.sonar.plugins.java.api.tree.TryStatementTree;\n+\n+@Rule(key = \"S5783\")\n+public class OneExpectedCheckExceptionCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final String JUNIT4_ASSERT = \"org.junit.Assert\";\n+\n+  private static final MethodMatchers JUNIT4_ASSERT_THROWS_WITH_MESSAGE = MethodMatchers.create()\n+    .ofTypes(JUNIT4_ASSERT)\n+    .names(\"assertThrows\")\n+    .addParametersMatcher(\"java.lang.String\", MethodMatchers.ANY, MethodMatchers.ANY)\n+    .build();\n+\n+  private static final MethodMatchers ALL_ASSERT_THROWS_MATCHER = MethodMatchers.create()\n+    .ofTypes(JUNIT4_ASSERT, \"org.junit.jupiter.api.Assertions\")\n+    .names(\"assertThrows\")\n+    .withAnyParameters()\n+    .build();\n+\n+  private static final MethodMatchers JUNIT_FAIL_MATCHER = MethodMatchers.create()\n+    .ofTypes(JUNIT4_ASSERT, \"org.junit.jupiter.api.Assertions\")\n+    .names(\"fail\")\n+    .withAnyParameters()\n+    .build();\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Arrays.asList(Tree.Kind.TRY_STATEMENT, Tree.Kind.METHOD_INVOCATION);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    if (!hasSemantic()) {\n+      return;\n+    }\n+\n+    if (tree.is(Tree.Kind.METHOD_INVOCATION)) {\n+      MethodInvocationTree mit = (MethodInvocationTree) tree;\n+      Arguments arguments = mit.arguments();\n+      if (JUNIT4_ASSERT_THROWS_WITH_MESSAGE.matches(mit)) {\n+        processAssertThrowsArguments(arguments.get(1), arguments.get(2));\n+      } else if (arguments.size() >= 2 && ALL_ASSERT_THROWS_MATCHER.matches(mit)) {\n+        processAssertThrowsArguments(arguments.get(0), arguments.get(1));\n+      }\n+    } else {\n+      TryStatementTree tryStatementTree = (TryStatementTree) tree;\n+      if (isTryCatchIdiom(tryStatementTree)) {\n+        tryStatementTree.catches().forEach(c ->\n+          reportMultipleCallThrowingExceptionInTree(c.parameter().type().symbolType(), tryStatementTree.block(), c.parameter().type())\n+        );\n+      }\n+    }\n+  }\n+\n+  private void processAssertThrowsArguments(ExpressionTree expectedType, ExpressionTree executable) {\n+    Optional<IdentifierTree> expectedException = getExpectedException(expectedType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee2d5b62453a75adccb7add4ee96dbd3adbe0849"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk3ODU0Ng==", "bodyText": "I don't see the point of the first parameter. It seems to me that reportLocation is a TypeTree, so you could just rely on it and extract the type within this method!\nprivate void reportMultipleCallThrowingExceptionInTree(Tree tree, TypeTree exception) {\n\nI would also rename \"tree\" by \"treeToVisit\" to make it clear", "url": "https://github.com/SonarSource/sonar-java/pull/2922#discussion_r417978546", "createdAt": "2020-04-30T12:39:48Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/OneExpectedCheckExceptionCheck.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.sonar.check.Rule;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.semantic.Type;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.BaseTreeVisitor;\n+import org.sonar.plugins.java.api.tree.ClassTree;\n+import org.sonar.plugins.java.api.tree.ExpressionStatementTree;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.LambdaExpressionTree;\n+import org.sonar.plugins.java.api.tree.MemberSelectExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.StatementTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+import org.sonar.plugins.java.api.tree.TryStatementTree;\n+\n+@Rule(key = \"S5783\")\n+public class OneExpectedCheckExceptionCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final String JUNIT4_ASSERT = \"org.junit.Assert\";\n+\n+  private static final MethodMatchers JUNIT4_ASSERT_THROWS_WITH_MESSAGE = MethodMatchers.create()\n+    .ofTypes(JUNIT4_ASSERT)\n+    .names(\"assertThrows\")\n+    .addParametersMatcher(\"java.lang.String\", MethodMatchers.ANY, MethodMatchers.ANY)\n+    .build();\n+\n+  private static final MethodMatchers ALL_ASSERT_THROWS_MATCHER = MethodMatchers.create()\n+    .ofTypes(JUNIT4_ASSERT, \"org.junit.jupiter.api.Assertions\")\n+    .names(\"assertThrows\")\n+    .withAnyParameters()\n+    .build();\n+\n+  private static final MethodMatchers JUNIT_FAIL_MATCHER = MethodMatchers.create()\n+    .ofTypes(JUNIT4_ASSERT, \"org.junit.jupiter.api.Assertions\")\n+    .names(\"fail\")\n+    .withAnyParameters()\n+    .build();\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Arrays.asList(Tree.Kind.TRY_STATEMENT, Tree.Kind.METHOD_INVOCATION);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    if (!hasSemantic()) {\n+      return;\n+    }\n+\n+    if (tree.is(Tree.Kind.METHOD_INVOCATION)) {\n+      MethodInvocationTree mit = (MethodInvocationTree) tree;\n+      Arguments arguments = mit.arguments();\n+      if (JUNIT4_ASSERT_THROWS_WITH_MESSAGE.matches(mit)) {\n+        processAssertThrowsArguments(arguments.get(1), arguments.get(2));\n+      } else if (arguments.size() >= 2 && ALL_ASSERT_THROWS_MATCHER.matches(mit)) {\n+        processAssertThrowsArguments(arguments.get(0), arguments.get(1));\n+      }\n+    } else {\n+      TryStatementTree tryStatementTree = (TryStatementTree) tree;\n+      if (isTryCatchIdiom(tryStatementTree)) {\n+        tryStatementTree.catches().forEach(c ->\n+          reportMultipleCallThrowingExceptionInTree(c.parameter().type().symbolType(), tryStatementTree.block(), c.parameter().type())\n+        );\n+      }\n+    }\n+  }\n+\n+  private void processAssertThrowsArguments(ExpressionTree expectedType, ExpressionTree executable) {\n+    Optional<IdentifierTree> expectedException = getExpectedException(expectedType);\n+    if (expectedException.isPresent() && executable.is(Tree.Kind.LAMBDA_EXPRESSION)) {\n+      IdentifierTree expectedIdentifier = expectedException.get();\n+      reportMultipleCallThrowingExceptionInTree(expectedIdentifier.symbolType(), ((LambdaExpressionTree) executable).body(), expectedIdentifier);\n+    }\n+  }\n+\n+  private static Optional<IdentifierTree> getExpectedException(ExpressionTree expectedType) {\n+    if (expectedType.is(Tree.Kind.MEMBER_SELECT)) {\n+      MemberSelectExpressionTree memberSelect = ((MemberSelectExpressionTree) expectedType);\n+      ExpressionTree expression = memberSelect.expression();\n+      if (\"class\".equals(memberSelect.identifier().name()) && expression.is(Tree.Kind.IDENTIFIER)) {\n+        return Optional.of((IdentifierTree) expression);\n+      }\n+    }\n+    return Optional.empty();\n+  }\n+\n+  private static boolean isTryCatchIdiom(TryStatementTree tree) {\n+    List<StatementTree> statementTrees = tree.block().body();\n+    if (!statementTrees.isEmpty()) {\n+      StatementTree lastElement = statementTrees.get(statementTrees.size() - 1);\n+      if (lastElement.is(Tree.Kind.EXPRESSION_STATEMENT)) {\n+        ExpressionTree expressionTree = ((ExpressionStatementTree) lastElement).expression();\n+        if (expressionTree.is(Tree.Kind.METHOD_INVOCATION)) {\n+          return JUNIT_FAIL_MATCHER.matches((MethodInvocationTree) expressionTree);\n+        }\n+      }\n+    }\n+    return false;\n+  }\n+\n+  private void reportMultipleCallThrowingExceptionInTree(Type expectedException, Tree tree, Tree reportLocation) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee2d5b62453a75adccb7add4ee96dbd3adbe0849"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk3ODc5Mg==", "bodyText": "commented code?", "url": "https://github.com/SonarSource/sonar-java/pull/2922#discussion_r417978792", "createdAt": "2020-04-30T12:40:12Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/OneExpectedCheckExceptionCheck.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.sonar.check.Rule;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.semantic.Type;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.BaseTreeVisitor;\n+import org.sonar.plugins.java.api.tree.ClassTree;\n+import org.sonar.plugins.java.api.tree.ExpressionStatementTree;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.LambdaExpressionTree;\n+import org.sonar.plugins.java.api.tree.MemberSelectExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.StatementTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+import org.sonar.plugins.java.api.tree.TryStatementTree;\n+\n+@Rule(key = \"S5783\")\n+public class OneExpectedCheckExceptionCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final String JUNIT4_ASSERT = \"org.junit.Assert\";\n+\n+  private static final MethodMatchers JUNIT4_ASSERT_THROWS_WITH_MESSAGE = MethodMatchers.create()\n+    .ofTypes(JUNIT4_ASSERT)\n+    .names(\"assertThrows\")\n+    .addParametersMatcher(\"java.lang.String\", MethodMatchers.ANY, MethodMatchers.ANY)\n+    .build();\n+\n+  private static final MethodMatchers ALL_ASSERT_THROWS_MATCHER = MethodMatchers.create()\n+    .ofTypes(JUNIT4_ASSERT, \"org.junit.jupiter.api.Assertions\")\n+    .names(\"assertThrows\")\n+    .withAnyParameters()\n+    .build();\n+\n+  private static final MethodMatchers JUNIT_FAIL_MATCHER = MethodMatchers.create()\n+    .ofTypes(JUNIT4_ASSERT, \"org.junit.jupiter.api.Assertions\")\n+    .names(\"fail\")\n+    .withAnyParameters()\n+    .build();\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Arrays.asList(Tree.Kind.TRY_STATEMENT, Tree.Kind.METHOD_INVOCATION);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    if (!hasSemantic()) {\n+      return;\n+    }\n+\n+    if (tree.is(Tree.Kind.METHOD_INVOCATION)) {\n+      MethodInvocationTree mit = (MethodInvocationTree) tree;\n+      Arguments arguments = mit.arguments();\n+      if (JUNIT4_ASSERT_THROWS_WITH_MESSAGE.matches(mit)) {\n+        processAssertThrowsArguments(arguments.get(1), arguments.get(2));\n+      } else if (arguments.size() >= 2 && ALL_ASSERT_THROWS_MATCHER.matches(mit)) {\n+        processAssertThrowsArguments(arguments.get(0), arguments.get(1));\n+      }\n+    } else {\n+      TryStatementTree tryStatementTree = (TryStatementTree) tree;\n+      if (isTryCatchIdiom(tryStatementTree)) {\n+        tryStatementTree.catches().forEach(c ->\n+          reportMultipleCallThrowingExceptionInTree(c.parameter().type().symbolType(), tryStatementTree.block(), c.parameter().type())\n+        );\n+      }\n+    }\n+  }\n+\n+  private void processAssertThrowsArguments(ExpressionTree expectedType, ExpressionTree executable) {\n+    Optional<IdentifierTree> expectedException = getExpectedException(expectedType);\n+    if (expectedException.isPresent() && executable.is(Tree.Kind.LAMBDA_EXPRESSION)) {\n+      IdentifierTree expectedIdentifier = expectedException.get();\n+      reportMultipleCallThrowingExceptionInTree(expectedIdentifier.symbolType(), ((LambdaExpressionTree) executable).body(), expectedIdentifier);\n+    }\n+  }\n+\n+  private static Optional<IdentifierTree> getExpectedException(ExpressionTree expectedType) {\n+    if (expectedType.is(Tree.Kind.MEMBER_SELECT)) {\n+      MemberSelectExpressionTree memberSelect = ((MemberSelectExpressionTree) expectedType);\n+      ExpressionTree expression = memberSelect.expression();\n+      if (\"class\".equals(memberSelect.identifier().name()) && expression.is(Tree.Kind.IDENTIFIER)) {\n+        return Optional.of((IdentifierTree) expression);\n+      }\n+    }\n+    return Optional.empty();\n+  }\n+\n+  private static boolean isTryCatchIdiom(TryStatementTree tree) {\n+    List<StatementTree> statementTrees = tree.block().body();\n+    if (!statementTrees.isEmpty()) {\n+      StatementTree lastElement = statementTrees.get(statementTrees.size() - 1);\n+      if (lastElement.is(Tree.Kind.EXPRESSION_STATEMENT)) {\n+        ExpressionTree expressionTree = ((ExpressionStatementTree) lastElement).expression();\n+        if (expressionTree.is(Tree.Kind.METHOD_INVOCATION)) {\n+          return JUNIT_FAIL_MATCHER.matches((MethodInvocationTree) expressionTree);\n+        }\n+      }\n+    }\n+    return false;\n+  }\n+\n+  private void reportMultipleCallThrowingExceptionInTree(Type expectedException, Tree tree, Tree reportLocation) {\n+    MethodInvocationThrowing visitor = new MethodInvocationThrowing(expectedException); //m.symbolType().isSubtypeOf(expectedType)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee2d5b62453a75adccb7add4ee96dbd3adbe0849"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk3OTc2Nw==", "bodyText": "what about visiting newClasses as well? you can perfectly call constructors as well, which can define checkedExceptions:\nnew MyObjectThrowingException(methodThrowingException());", "url": "https://github.com/SonarSource/sonar-java/pull/2922#discussion_r417979767", "createdAt": "2020-04-30T12:41:53Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/OneExpectedCheckExceptionCheck.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.sonar.check.Rule;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.semantic.Type;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.BaseTreeVisitor;\n+import org.sonar.plugins.java.api.tree.ClassTree;\n+import org.sonar.plugins.java.api.tree.ExpressionStatementTree;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.LambdaExpressionTree;\n+import org.sonar.plugins.java.api.tree.MemberSelectExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.StatementTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+import org.sonar.plugins.java.api.tree.TryStatementTree;\n+\n+@Rule(key = \"S5783\")\n+public class OneExpectedCheckExceptionCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final String JUNIT4_ASSERT = \"org.junit.Assert\";\n+\n+  private static final MethodMatchers JUNIT4_ASSERT_THROWS_WITH_MESSAGE = MethodMatchers.create()\n+    .ofTypes(JUNIT4_ASSERT)\n+    .names(\"assertThrows\")\n+    .addParametersMatcher(\"java.lang.String\", MethodMatchers.ANY, MethodMatchers.ANY)\n+    .build();\n+\n+  private static final MethodMatchers ALL_ASSERT_THROWS_MATCHER = MethodMatchers.create()\n+    .ofTypes(JUNIT4_ASSERT, \"org.junit.jupiter.api.Assertions\")\n+    .names(\"assertThrows\")\n+    .withAnyParameters()\n+    .build();\n+\n+  private static final MethodMatchers JUNIT_FAIL_MATCHER = MethodMatchers.create()\n+    .ofTypes(JUNIT4_ASSERT, \"org.junit.jupiter.api.Assertions\")\n+    .names(\"fail\")\n+    .withAnyParameters()\n+    .build();\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Arrays.asList(Tree.Kind.TRY_STATEMENT, Tree.Kind.METHOD_INVOCATION);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    if (!hasSemantic()) {\n+      return;\n+    }\n+\n+    if (tree.is(Tree.Kind.METHOD_INVOCATION)) {\n+      MethodInvocationTree mit = (MethodInvocationTree) tree;\n+      Arguments arguments = mit.arguments();\n+      if (JUNIT4_ASSERT_THROWS_WITH_MESSAGE.matches(mit)) {\n+        processAssertThrowsArguments(arguments.get(1), arguments.get(2));\n+      } else if (arguments.size() >= 2 && ALL_ASSERT_THROWS_MATCHER.matches(mit)) {\n+        processAssertThrowsArguments(arguments.get(0), arguments.get(1));\n+      }\n+    } else {\n+      TryStatementTree tryStatementTree = (TryStatementTree) tree;\n+      if (isTryCatchIdiom(tryStatementTree)) {\n+        tryStatementTree.catches().forEach(c ->\n+          reportMultipleCallThrowingExceptionInTree(c.parameter().type().symbolType(), tryStatementTree.block(), c.parameter().type())\n+        );\n+      }\n+    }\n+  }\n+\n+  private void processAssertThrowsArguments(ExpressionTree expectedType, ExpressionTree executable) {\n+    Optional<IdentifierTree> expectedException = getExpectedException(expectedType);\n+    if (expectedException.isPresent() && executable.is(Tree.Kind.LAMBDA_EXPRESSION)) {\n+      IdentifierTree expectedIdentifier = expectedException.get();\n+      reportMultipleCallThrowingExceptionInTree(expectedIdentifier.symbolType(), ((LambdaExpressionTree) executable).body(), expectedIdentifier);\n+    }\n+  }\n+\n+  private static Optional<IdentifierTree> getExpectedException(ExpressionTree expectedType) {\n+    if (expectedType.is(Tree.Kind.MEMBER_SELECT)) {\n+      MemberSelectExpressionTree memberSelect = ((MemberSelectExpressionTree) expectedType);\n+      ExpressionTree expression = memberSelect.expression();\n+      if (\"class\".equals(memberSelect.identifier().name()) && expression.is(Tree.Kind.IDENTIFIER)) {\n+        return Optional.of((IdentifierTree) expression);\n+      }\n+    }\n+    return Optional.empty();\n+  }\n+\n+  private static boolean isTryCatchIdiom(TryStatementTree tree) {\n+    List<StatementTree> statementTrees = tree.block().body();\n+    if (!statementTrees.isEmpty()) {\n+      StatementTree lastElement = statementTrees.get(statementTrees.size() - 1);\n+      if (lastElement.is(Tree.Kind.EXPRESSION_STATEMENT)) {\n+        ExpressionTree expressionTree = ((ExpressionStatementTree) lastElement).expression();\n+        if (expressionTree.is(Tree.Kind.METHOD_INVOCATION)) {\n+          return JUNIT_FAIL_MATCHER.matches((MethodInvocationTree) expressionTree);\n+        }\n+      }\n+    }\n+    return false;\n+  }\n+\n+  private void reportMultipleCallThrowingExceptionInTree(Type expectedException, Tree tree, Tree reportLocation) {\n+    MethodInvocationThrowing visitor = new MethodInvocationThrowing(expectedException); //m.symbolType().isSubtypeOf(expectedType)\n+    tree.accept(visitor);\n+    List<MethodInvocationTree> methodInvocationTrees = visitor.methodInvocationTrees;\n+    if (methodInvocationTrees.size() > 1) {\n+      reportIssue(reportLocation,\n+        \"The tested checked exception can be raised from multiples call, it is unclear what is really tested.\",\n+        secondaryLocations(methodInvocationTrees),\n+        null);\n+    }\n+  }\n+\n+  private static List<JavaFileScannerContext.Location> secondaryLocations(List<MethodInvocationTree> methodInvocationTrees) {\n+    return methodInvocationTrees.stream()\n+      .map(ExpressionUtils::methodName)\n+      .map(expr -> new JavaFileScannerContext.Location(\"Method call\", expr))\n+      .collect(Collectors.toList());\n+  }\n+\n+  private static class MethodInvocationThrowing extends BaseTreeVisitor {\n+    List<MethodInvocationTree> methodInvocationTrees = new ArrayList<>();\n+    private final Type expectedException;\n+\n+    MethodInvocationThrowing(Type expectedException) {\n+      this.expectedException = expectedException;\n+    }\n+\n+    @Override\n+    public void visitMethodInvocation(MethodInvocationTree mit) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee2d5b62453a75adccb7add4ee96dbd3adbe0849"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk4MDg0OA==", "bodyText": "isTryCatchFail idiom is rather vague", "url": "https://github.com/SonarSource/sonar-java/pull/2922#discussion_r417980848", "createdAt": "2020-04-30T12:43:48Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/OneExpectedCheckExceptionCheck.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.sonar.check.Rule;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.semantic.Type;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.BaseTreeVisitor;\n+import org.sonar.plugins.java.api.tree.ClassTree;\n+import org.sonar.plugins.java.api.tree.ExpressionStatementTree;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.LambdaExpressionTree;\n+import org.sonar.plugins.java.api.tree.MemberSelectExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.StatementTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+import org.sonar.plugins.java.api.tree.TryStatementTree;\n+\n+@Rule(key = \"S5783\")\n+public class OneExpectedCheckExceptionCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final String JUNIT4_ASSERT = \"org.junit.Assert\";\n+\n+  private static final MethodMatchers JUNIT4_ASSERT_THROWS_WITH_MESSAGE = MethodMatchers.create()\n+    .ofTypes(JUNIT4_ASSERT)\n+    .names(\"assertThrows\")\n+    .addParametersMatcher(\"java.lang.String\", MethodMatchers.ANY, MethodMatchers.ANY)\n+    .build();\n+\n+  private static final MethodMatchers ALL_ASSERT_THROWS_MATCHER = MethodMatchers.create()\n+    .ofTypes(JUNIT4_ASSERT, \"org.junit.jupiter.api.Assertions\")\n+    .names(\"assertThrows\")\n+    .withAnyParameters()\n+    .build();\n+\n+  private static final MethodMatchers JUNIT_FAIL_MATCHER = MethodMatchers.create()\n+    .ofTypes(JUNIT4_ASSERT, \"org.junit.jupiter.api.Assertions\")\n+    .names(\"fail\")\n+    .withAnyParameters()\n+    .build();\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Arrays.asList(Tree.Kind.TRY_STATEMENT, Tree.Kind.METHOD_INVOCATION);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    if (!hasSemantic()) {\n+      return;\n+    }\n+\n+    if (tree.is(Tree.Kind.METHOD_INVOCATION)) {\n+      MethodInvocationTree mit = (MethodInvocationTree) tree;\n+      Arguments arguments = mit.arguments();\n+      if (JUNIT4_ASSERT_THROWS_WITH_MESSAGE.matches(mit)) {\n+        processAssertThrowsArguments(arguments.get(1), arguments.get(2));\n+      } else if (arguments.size() >= 2 && ALL_ASSERT_THROWS_MATCHER.matches(mit)) {\n+        processAssertThrowsArguments(arguments.get(0), arguments.get(1));\n+      }\n+    } else {\n+      TryStatementTree tryStatementTree = (TryStatementTree) tree;\n+      if (isTryCatchIdiom(tryStatementTree)) {\n+        tryStatementTree.catches().forEach(c ->\n+          reportMultipleCallThrowingExceptionInTree(c.parameter().type().symbolType(), tryStatementTree.block(), c.parameter().type())\n+        );\n+      }\n+    }\n+  }\n+\n+  private void processAssertThrowsArguments(ExpressionTree expectedType, ExpressionTree executable) {\n+    Optional<IdentifierTree> expectedException = getExpectedException(expectedType);\n+    if (expectedException.isPresent() && executable.is(Tree.Kind.LAMBDA_EXPRESSION)) {\n+      IdentifierTree expectedIdentifier = expectedException.get();\n+      reportMultipleCallThrowingExceptionInTree(expectedIdentifier.symbolType(), ((LambdaExpressionTree) executable).body(), expectedIdentifier);\n+    }\n+  }\n+\n+  private static Optional<IdentifierTree> getExpectedException(ExpressionTree expectedType) {\n+    if (expectedType.is(Tree.Kind.MEMBER_SELECT)) {\n+      MemberSelectExpressionTree memberSelect = ((MemberSelectExpressionTree) expectedType);\n+      ExpressionTree expression = memberSelect.expression();\n+      if (\"class\".equals(memberSelect.identifier().name()) && expression.is(Tree.Kind.IDENTIFIER)) {\n+        return Optional.of((IdentifierTree) expression);\n+      }\n+    }\n+    return Optional.empty();\n+  }\n+\n+  private static boolean isTryCatchIdiom(TryStatementTree tree) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee2d5b62453a75adccb7add4ee96dbd3adbe0849"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk4MTg4Mg==", "bodyText": "I don't really like that you are going to visit the try-block multiple times, once for each catches exception. What about collecting them first and then triggering a visit a single time?", "url": "https://github.com/SonarSource/sonar-java/pull/2922#discussion_r417981882", "createdAt": "2020-04-30T12:45:42Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/OneExpectedCheckExceptionCheck.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.sonar.check.Rule;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.semantic.Type;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.BaseTreeVisitor;\n+import org.sonar.plugins.java.api.tree.ClassTree;\n+import org.sonar.plugins.java.api.tree.ExpressionStatementTree;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.LambdaExpressionTree;\n+import org.sonar.plugins.java.api.tree.MemberSelectExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.StatementTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+import org.sonar.plugins.java.api.tree.TryStatementTree;\n+\n+@Rule(key = \"S5783\")\n+public class OneExpectedCheckExceptionCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final String JUNIT4_ASSERT = \"org.junit.Assert\";\n+\n+  private static final MethodMatchers JUNIT4_ASSERT_THROWS_WITH_MESSAGE = MethodMatchers.create()\n+    .ofTypes(JUNIT4_ASSERT)\n+    .names(\"assertThrows\")\n+    .addParametersMatcher(\"java.lang.String\", MethodMatchers.ANY, MethodMatchers.ANY)\n+    .build();\n+\n+  private static final MethodMatchers ALL_ASSERT_THROWS_MATCHER = MethodMatchers.create()\n+    .ofTypes(JUNIT4_ASSERT, \"org.junit.jupiter.api.Assertions\")\n+    .names(\"assertThrows\")\n+    .withAnyParameters()\n+    .build();\n+\n+  private static final MethodMatchers JUNIT_FAIL_MATCHER = MethodMatchers.create()\n+    .ofTypes(JUNIT4_ASSERT, \"org.junit.jupiter.api.Assertions\")\n+    .names(\"fail\")\n+    .withAnyParameters()\n+    .build();\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Arrays.asList(Tree.Kind.TRY_STATEMENT, Tree.Kind.METHOD_INVOCATION);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    if (!hasSemantic()) {\n+      return;\n+    }\n+\n+    if (tree.is(Tree.Kind.METHOD_INVOCATION)) {\n+      MethodInvocationTree mit = (MethodInvocationTree) tree;\n+      Arguments arguments = mit.arguments();\n+      if (JUNIT4_ASSERT_THROWS_WITH_MESSAGE.matches(mit)) {\n+        processAssertThrowsArguments(arguments.get(1), arguments.get(2));\n+      } else if (arguments.size() >= 2 && ALL_ASSERT_THROWS_MATCHER.matches(mit)) {\n+        processAssertThrowsArguments(arguments.get(0), arguments.get(1));\n+      }\n+    } else {\n+      TryStatementTree tryStatementTree = (TryStatementTree) tree;\n+      if (isTryCatchIdiom(tryStatementTree)) {\n+        tryStatementTree.catches().forEach(c ->\n+          reportMultipleCallThrowingExceptionInTree(c.parameter().type().symbolType(), tryStatementTree.block(), c.parameter().type())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee2d5b62453a75adccb7add4ee96dbd3adbe0849"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MDY0ODcy", "url": "https://github.com/SonarSource/sonar-java/pull/2922#pullrequestreview-404064872", "createdAt": "2020-05-01T08:19:16Z", "commit": {"oid": "91735f7d1bd482b48d753e9269a83885f8f9478c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwODoxOToxNlrOGPEq0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwODoxOToxNlrOGPEq0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ1ODMyMw==", "bodyText": "to be honest, I'm not sure this is still required in checks. From what I remember, we don't have situations anymore where semantic is not available.", "url": "https://github.com/SonarSource/sonar-java/pull/2922#discussion_r418458323", "createdAt": "2020-05-01T08:19:16Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/OneExpectedCheckExceptionCheck.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.sonar.check.Rule;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.semantic.Type;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.BaseTreeVisitor;\n+import org.sonar.plugins.java.api.tree.ClassTree;\n+import org.sonar.plugins.java.api.tree.ExpressionStatementTree;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.LambdaExpressionTree;\n+import org.sonar.plugins.java.api.tree.MemberSelectExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.NewClassTree;\n+import org.sonar.plugins.java.api.tree.StatementTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+import org.sonar.plugins.java.api.tree.TryStatementTree;\n+\n+@Rule(key = \"S5783\")\n+public class OneExpectedCheckExceptionCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final String JUNIT4_ASSERT = \"org.junit.Assert\";\n+\n+  private static final MethodMatchers JUNIT4_ASSERT_THROWS_WITH_MESSAGE = MethodMatchers.create()\n+    .ofTypes(JUNIT4_ASSERT)\n+    .names(\"assertThrows\")\n+    .addParametersMatcher(\"java.lang.String\", MethodMatchers.ANY, MethodMatchers.ANY)\n+    .build();\n+\n+  private static final MethodMatchers ALL_ASSERT_THROWS_MATCHER = MethodMatchers.create()\n+    .ofTypes(JUNIT4_ASSERT, \"org.junit.jupiter.api.Assertions\")\n+    .names(\"assertThrows\")\n+    .withAnyParameters()\n+    .build();\n+\n+  private static final MethodMatchers JUNIT_FAIL_MATCHER = MethodMatchers.create()\n+    .ofTypes(JUNIT4_ASSERT, \"org.junit.jupiter.api.Assertions\")\n+    .names(\"fail\")\n+    .withAnyParameters()\n+    .build();\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Arrays.asList(Tree.Kind.TRY_STATEMENT, Tree.Kind.METHOD_INVOCATION);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    if (!hasSemantic()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91735f7d1bd482b48d753e9269a83885f8f9478c"}, "originalPosition": 79}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "556ff42f52bde788eecfb742ecaa18668f58d374", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/556ff42f52bde788eecfb742ecaa18668f58d374", "committedDate": "2020-05-01T09:03:31Z", "message": "SONARJAVA-3359 Rule S5783: Tested checked exception should be expected from one single call"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "268bf91d5ff97074a9437898f4529fc58a1bc0bb", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/268bf91d5ff97074a9437898f4529fc58a1bc0bb", "committedDate": "2020-05-01T09:03:31Z", "message": "Correctly support assertThrows from JUnit 4"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb59a649db5501830455bcec5cc3fb39eab7ae42", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/fb59a649db5501830455bcec5cc3fb39eab7ae42", "committedDate": "2020-05-01T09:03:31Z", "message": "Check argument size"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "772cc8011d53fe3412c4a9b8957ae069c794c7fb", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/772cc8011d53fe3412c4a9b8957ae069c794c7fb", "committedDate": "2020-05-01T09:03:32Z", "message": "Quick fixes from review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9663499c3bf3034d73a0ca5fee054dc9cb2127a", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/e9663499c3bf3034d73a0ca5fee054dc9cb2127a", "committedDate": "2020-05-01T09:03:32Z", "message": "Support NewClassTree"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd35e59b14980e164f1711f51ee13ce79abdf5cc", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/dd35e59b14980e164f1711f51ee13ce79abdf5cc", "committedDate": "2020-05-01T09:03:32Z", "message": "Change issue location and message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f656d546774ab37ba897b4900ebf10a18451bc0e", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/f656d546774ab37ba897b4900ebf10a18451bc0e", "committedDate": "2020-05-01T09:03:32Z", "message": "Report only checked exceptions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f810e37fbab92e6b7aa646b93f89699765944cbe", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/f810e37fbab92e6b7aa646b93f89699765944cbe", "committedDate": "2020-05-01T09:03:32Z", "message": "Don't check for semantic"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "91735f7d1bd482b48d753e9269a83885f8f9478c", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/91735f7d1bd482b48d753e9269a83885f8f9478c", "committedDate": "2020-04-30T15:46:22Z", "message": "Report only checked exceptions"}, "afterCommit": {"oid": "f810e37fbab92e6b7aa646b93f89699765944cbe", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/f810e37fbab92e6b7aa646b93f89699765944cbe", "committedDate": "2020-05-01T09:03:32Z", "message": "Don't check for semantic"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1788, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}