{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5NTUzNzI5", "number": 3351, "title": "SONARJAVA-3570 S5411: Relax rule against boxed booleans whose first usage is a null check", "bodyText": "", "createdAt": "2020-12-14T15:11:24Z", "url": "https://github.com/SonarSource/sonar-java/pull/3351", "merged": true, "mergeCommit": {"oid": "adcb8e3047a86da155568dada9b59c038fc362bf"}, "closed": true, "closedAt": "2020-12-16T13:53:38Z", "author": {"login": "dorian-burihabwa-sonarsource"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmHhIigBqjQxMDk4NzkyNDA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmvTUmAFqTU1MzcwNDc0Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0bec4e986a9f27a2e2116a1a017cb7b3cca68237", "author": {"user": {"login": "dorian-burihabwa-sonarsource", "name": "Dorian Burihabwa"}}, "url": "https://github.com/SonarSource/sonar-java/commit/0bec4e986a9f27a2e2116a1a017cb7b3cca68237", "committedDate": "2020-12-14T14:45:50Z", "message": "SONARJAVA-3570 S5411: Relax rule against boxed booleans whose first\nusage is a null check"}, "afterCommit": {"oid": "ee42f436b58ce3196bf72f3ae03aadd33b79e716", "author": {"user": {"login": "dorian-burihabwa-sonarsource", "name": "Dorian Burihabwa"}}, "url": "https://github.com/SonarSource/sonar-java/commit/ee42f436b58ce3196bf72f3ae03aadd33b79e716", "committedDate": "2020-12-14T15:31:30Z", "message": "SONARJAVA-3570 S5411: Relax rule against boxed booleans whose first usage is a null check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ee42f436b58ce3196bf72f3ae03aadd33b79e716", "author": {"user": {"login": "dorian-burihabwa-sonarsource", "name": "Dorian Burihabwa"}}, "url": "https://github.com/SonarSource/sonar-java/commit/ee42f436b58ce3196bf72f3ae03aadd33b79e716", "committedDate": "2020-12-14T15:31:30Z", "message": "SONARJAVA-3570 S5411: Relax rule against boxed booleans whose first usage is a null check"}, "afterCommit": {"oid": "8b51cb43804841a7fd32aa713ff69b41926266af", "author": {"user": {"login": "dorian-burihabwa-sonarsource", "name": "Dorian Burihabwa"}}, "url": "https://github.com/SonarSource/sonar-java/commit/8b51cb43804841a7fd32aa713ff69b41926266af", "committedDate": "2020-12-14T17:52:35Z", "message": "SONARJAVA-3570 S5411: Update ruling tests with relaxed rules"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyMjY1MzE2", "url": "https://github.com/SonarSource/sonar-java/pull/3351#pullrequestreview-552265316", "createdAt": "2020-12-15T09:38:20Z", "commit": {"oid": "8b51cb43804841a7fd32aa713ff69b41926266af"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwOTozODoyMFrOIGBnbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMDoyNTozNlrOIGDs8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE4ODg0Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (usages.size() > 1) {\n          \n          \n            \n                  if (!usages.isEmpty()) {", "url": "https://github.com/SonarSource/sonar-java/pull/3351#discussion_r543188846", "createdAt": "2020-12-15T09:38:20Z", "author": {"login": "margarita-nedzelska-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/BoxedBooleanExpressionsCheck.java", "diffHunk": "@@ -110,12 +113,31 @@ public void visitConditionalExpression(ConditionalExpressionTree tree) {\n   private boolean isSafeBooleanExpression(ExpressionTree tree) {\n     ExpressionTree boxedBoolean = findBoxedBoolean(tree);\n     if (boxedBoolean != null) {\n+      // The rule is relaxed if the first usage of the variable is a test against nullness.\n+      // A more thorough approach would require tracing all possible paths to lookup the test using symbolic execution.\n+      if (isFirstUsageANullCheck(boxedBoolean)) {\n+        return true;\n+      }\n       context.reportIssue(this, boxedBoolean, \"Use the primitive boolean expression here.\");\n       return false;\n     }\n     return true;\n   }\n \n+  private static boolean isFirstUsageANullCheck(ExpressionTree boxedBoolean) {\n+    if (boxedBoolean.is(Kind.IDENTIFIER)) {\n+      IdentifierTree identifier = (IdentifierTree) boxedBoolean;\n+      List<IdentifierTree> usages = identifier.symbol().usages();\n+      if (usages.size() > 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b51cb43804841a7fd32aa713ff69b41926266af"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIxODE2NQ==", "bodyText": "I think this code should not be compliant, cause it's producing NPE", "url": "https://github.com/SonarSource/sonar-java/pull/3351#discussion_r543218165", "createdAt": "2020-12-15T10:18:59Z", "author": {"login": "margarita-nedzelska-sonarsource"}, "path": "java-checks-test-sources/src/main/java/checks/BoxedBooleanExpressionsCheck.java", "diffHunk": "@@ -341,4 +341,72 @@ Boolean False() {\n \n   Object foo() { return new Object(); }\n   Object bar() { return new Object(); }\n+\n+  void forStatementCheckedBeforeUseIsCompliant() {\n+    Boolean checkedBeforeUse = getCustomNonNull();\n+    if (checkedBeforeUse != null) {\n+      for (; checkedBeforeUse; )  {} // Compliant because the variable is checked before use\n+    }\n+\n+    Boolean checkedBeforeUse2 = getCustomNonNull();\n+    if (checkedBeforeUse2 == null) {\n+      for (; checkedBeforeUse2; )  {} // Compliant because the variable is checked before use", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b51cb43804841a7fd32aa713ff69b41926266af"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIxODQzNw==", "bodyText": "I think this code should not be compliant, cause it's producing NPE", "url": "https://github.com/SonarSource/sonar-java/pull/3351#discussion_r543218437", "createdAt": "2020-12-15T10:19:20Z", "author": {"login": "margarita-nedzelska-sonarsource"}, "path": "java-checks-test-sources/src/main/java/checks/BoxedBooleanExpressionsCheck.java", "diffHunk": "@@ -341,4 +341,72 @@ Boolean False() {\n \n   Object foo() { return new Object(); }\n   Object bar() { return new Object(); }\n+\n+  void forStatementCheckedBeforeUseIsCompliant() {\n+    Boolean checkedBeforeUse = getCustomNonNull();\n+    if (checkedBeforeUse != null) {\n+      for (; checkedBeforeUse; )  {} // Compliant because the variable is checked before use\n+    }\n+\n+    Boolean checkedBeforeUse2 = getCustomNonNull();\n+    if (checkedBeforeUse2 == null) {\n+      for (; checkedBeforeUse2; )  {} // Compliant because the variable is checked before use\n+    }\n+  }\n+\n+  void whileStatementCheckedBeforeUseIsCompliant() {\n+    Boolean checkedBeforeUse = getCustomNonNull();\n+    if (checkedBeforeUse != null) {\n+      while (checkedBeforeUse)  {} // Compliant because the variable is checked before use\n+    }\n+    Boolean checkedBeforeUse2 = getCustomNonNull();\n+    if (checkedBeforeUse2 == null) {\n+      while (checkedBeforeUse2)  {} // Compliant because the variable is checked before use", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b51cb43804841a7fd32aa713ff69b41926266af"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIyMDkxMQ==", "bodyText": "I think you don't need to use getCustomNonNull(), but sth like customNullable because the main reason to use @nonnull annotations is to get rid of null checks. And I think the cases with annotation are already covered.", "url": "https://github.com/SonarSource/sonar-java/pull/3351#discussion_r543220911", "createdAt": "2020-12-15T10:22:45Z", "author": {"login": "margarita-nedzelska-sonarsource"}, "path": "java-checks-test-sources/src/main/java/checks/BoxedBooleanExpressionsCheck.java", "diffHunk": "@@ -341,4 +341,72 @@ Boolean False() {\n \n   Object foo() { return new Object(); }\n   Object bar() { return new Object(); }\n+\n+  void forStatementCheckedBeforeUseIsCompliant() {\n+    Boolean checkedBeforeUse = getCustomNonNull();\n+    if (checkedBeforeUse != null) {\n+      for (; checkedBeforeUse; )  {} // Compliant because the variable is checked before use\n+    }\n+\n+    Boolean checkedBeforeUse2 = getCustomNonNull();\n+    if (checkedBeforeUse2 == null) {\n+      for (; checkedBeforeUse2; )  {} // Compliant because the variable is checked before use\n+    }\n+  }\n+\n+  void whileStatementCheckedBeforeUseIsCompliant() {\n+    Boolean checkedBeforeUse = getCustomNonNull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b51cb43804841a7fd32aa713ff69b41926266af"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIyMzAyNA==", "bodyText": "I will also suggest adding more test cases:\n\n\nwhere condition is in else branch\n\n\nwhere there are other usages of checked variable\n\n\nwhen the tested variable is actually null\n\n\netc.", "url": "https://github.com/SonarSource/sonar-java/pull/3351#discussion_r543223024", "createdAt": "2020-12-15T10:25:36Z", "author": {"login": "margarita-nedzelska-sonarsource"}, "path": "java-checks-test-sources/src/main/java/checks/BoxedBooleanExpressionsCheck.java", "diffHunk": "@@ -341,4 +341,72 @@ Boolean False() {\n \n   Object foo() { return new Object(); }\n   Object bar() { return new Object(); }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b51cb43804841a7fd32aa713ff69b41926266af"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d31efc3f5be969324c242d81d54685448efa2d89", "author": {"user": {"login": "dorian-burihabwa-sonarsource", "name": "Dorian Burihabwa"}}, "url": "https://github.com/SonarSource/sonar-java/commit/d31efc3f5be969324c242d81d54685448efa2d89", "committedDate": "2020-12-15T14:53:05Z", "message": "SONARJAVA-3570 S5411: Relax rule against boxed booleans whose first usage is a null check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08e140bca87ada7a105c43b2c8d1901310ad18bc", "author": {"user": {"login": "dorian-burihabwa-sonarsource", "name": "Dorian Burihabwa"}}, "url": "https://github.com/SonarSource/sonar-java/commit/08e140bca87ada7a105c43b2c8d1901310ad18bc", "committedDate": "2020-12-15T14:53:05Z", "message": "SONARJAVA-3570 S5411: Update ruling tests with relaxed rules"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5a629cd482bfbd5fd45f2a45ff5b2313c5e538a", "author": {"user": {"login": "dorian-burihabwa-sonarsource", "name": "Dorian Burihabwa"}}, "url": "https://github.com/SonarSource/sonar-java/commit/a5a629cd482bfbd5fd45f2a45ff5b2313c5e538a", "committedDate": "2020-12-15T14:53:05Z", "message": "SONARJAVA-3570 Pull request fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9d2cec921c83adc07fde576da70036cf3d611f8", "author": {"user": {"login": "dorian-burihabwa-sonarsource", "name": "Dorian Burihabwa"}}, "url": "https://github.com/SonarSource/sonar-java/commit/a9d2cec921c83adc07fde576da70036cf3d611f8", "committedDate": "2020-12-16T11:46:34Z", "message": "SONARJAVA-3570 S5411: Add more test cases and document false negatives"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8b51cb43804841a7fd32aa713ff69b41926266af", "author": {"user": {"login": "dorian-burihabwa-sonarsource", "name": "Dorian Burihabwa"}}, "url": "https://github.com/SonarSource/sonar-java/commit/8b51cb43804841a7fd32aa713ff69b41926266af", "committedDate": "2020-12-14T17:52:35Z", "message": "SONARJAVA-3570 S5411: Update ruling tests with relaxed rules"}, "afterCommit": {"oid": "a9d2cec921c83adc07fde576da70036cf3d611f8", "author": {"user": {"login": "dorian-burihabwa-sonarsource", "name": "Dorian Burihabwa"}}, "url": "https://github.com/SonarSource/sonar-java/commit/a9d2cec921c83adc07fde576da70036cf3d611f8", "committedDate": "2020-12-16T11:46:34Z", "message": "SONARJAVA-3570 S5411: Add more test cases and document false negatives"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNzA0NzQz", "url": "https://github.com/SonarSource/sonar-java/pull/3351#pullrequestreview-553704743", "createdAt": "2020-12-16T13:53:00Z", "commit": {"oid": "a9d2cec921c83adc07fde576da70036cf3d611f8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1867, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}