{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0NzUxNDUx", "number": 3135, "title": "SONARJAVA-3069 Adapt SE engine to Switch Expressions", "bodyText": "Fix CFG generation for switch expressions.\nThe generated CFG for switch expressions previously included the\nswitch expression twice, once as a terminator (as it should be) and\nonce as an expression in the block that used the result of the switch\nexpression. This would make the switch expression the top of the stack\ninstead of the result and once the user popped the switch expression,\nthe result of the switch expression would be left on the stack when\nthe stack should either be empty or contain the results of other\nsubexpressions.\nWith the CFG fixed, switch expressions should now be handled properly\nwith no need to change the symbolic execution engine itself.", "createdAt": "2020-08-07T18:26:09Z", "url": "https://github.com/SonarSource/sonar-java/pull/3135", "merged": true, "mergeCommit": {"oid": "761df80e7a3b7a637978b9df4764a294dce73586"}, "closed": true, "closedAt": "2020-08-25T14:08:04Z", "author": {"login": "sebastian-hungerecker-sonarsource"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc8osnCABqjM2MzQyODc3MDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdCEZHMAH2gAyNDY0NzUxNDUxOmRkZDhlNDUyZWYxMmI0MGQ3ZDZiZWM5M2I1NTY5MGQ3YThjMmU4YmQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "691eaec1d4d6f406b0037708b64f57b7957684dc", "author": {"user": {"login": "sebastian-hungerecker-sonarsource", "name": "Sebastian Hungerecker"}}, "url": "https://github.com/SonarSource/sonar-java/commit/691eaec1d4d6f406b0037708b64f57b7957684dc", "committedDate": "2020-08-07T18:11:46Z", "message": "SONARJAVA-3069 Fix CFG generation for switch expressions\n\nThe generated CFG for switch expressions previously included the\nswitch expression twice, once as a terminator (as it should be) and\nonce as an expression in the block that used the result of the switch\nexpression. This would make the switch expression the top of the stack\ninstead of the result and once the user popped the switch expression,\nthe result of the switch expression would be left on the stack when\nthe stack should either be empty or contain the results of other\nsubexpressions.\n\nWith the CFG fixed, switch expressions should now be handled properly\nwith no need to change the symbolic execution engine itself."}, "afterCommit": {"oid": "f64e6a06959910b2410b06216ba76b99b4f14a13", "author": {"user": {"login": "sebastian-hungerecker-sonarsource", "name": "Sebastian Hungerecker"}}, "url": "https://github.com/SonarSource/sonar-java/commit/f64e6a06959910b2410b06216ba76b99b4f14a13", "committedDate": "2020-08-07T18:26:12Z", "message": "Fix CFG generation for switch expressions\n\nThe generated CFG for switch expressions previously included the\nswitch expression twice, once as a terminator (as it should be) and\nonce as an expression in the block that used the result of the switch\nexpression. This would make the switch expression the top of the stack\ninstead of the result and once the user popped the switch expression,\nthe result of the switch expression would be left on the stack when\nthe stack should either be empty or contain the results of other\nsubexpressions.\n\nWith the CFG fixed, switch expressions should now be handled properly\nwith no need to change the symbolic execution engine itself."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f64e6a06959910b2410b06216ba76b99b4f14a13", "author": {"user": {"login": "sebastian-hungerecker-sonarsource", "name": "Sebastian Hungerecker"}}, "url": "https://github.com/SonarSource/sonar-java/commit/f64e6a06959910b2410b06216ba76b99b4f14a13", "committedDate": "2020-08-07T18:26:12Z", "message": "Fix CFG generation for switch expressions\n\nThe generated CFG for switch expressions previously included the\nswitch expression twice, once as a terminator (as it should be) and\nonce as an expression in the block that used the result of the switch\nexpression. This would make the switch expression the top of the stack\ninstead of the result and once the user popped the switch expression,\nthe result of the switch expression would be left on the stack when\nthe stack should either be empty or contain the results of other\nsubexpressions.\n\nWith the CFG fixed, switch expressions should now be handled properly\nwith no need to change the symbolic execution engine itself."}, "afterCommit": {"oid": "52d1f750ce5c243d236a905dd1acdc74ccce685b", "author": {"user": {"login": "sebastian-hungerecker-sonarsource", "name": "Sebastian Hungerecker"}}, "url": "https://github.com/SonarSource/sonar-java/commit/52d1f750ce5c243d236a905dd1acdc74ccce685b", "committedDate": "2020-08-13T15:22:17Z", "message": "Track values through switch statements"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "52d1f750ce5c243d236a905dd1acdc74ccce685b", "author": {"user": {"login": "sebastian-hungerecker-sonarsource", "name": "Sebastian Hungerecker"}}, "url": "https://github.com/SonarSource/sonar-java/commit/52d1f750ce5c243d236a905dd1acdc74ccce685b", "committedDate": "2020-08-13T15:22:17Z", "message": "Track values through switch statements"}, "afterCommit": {"oid": "09b4e0e23684d48b4dbd158cc1a6e4a2ede8b135", "author": {"user": {"login": "sebastian-hungerecker-sonarsource", "name": "Sebastian Hungerecker"}}, "url": "https://github.com/SonarSource/sonar-java/commit/09b4e0e23684d48b4dbd158cc1a6e4a2ede8b135", "committedDate": "2020-08-13T15:41:06Z", "message": "Track values through switch statements"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "09b4e0e23684d48b4dbd158cc1a6e4a2ede8b135", "author": {"user": {"login": "sebastian-hungerecker-sonarsource", "name": "Sebastian Hungerecker"}}, "url": "https://github.com/SonarSource/sonar-java/commit/09b4e0e23684d48b4dbd158cc1a6e4a2ede8b135", "committedDate": "2020-08-13T15:41:06Z", "message": "Track values through switch statements"}, "afterCommit": {"oid": "ee70212250619473a5cdca2e1962b08b9f4c5b34", "author": {"user": {"login": "sebastian-hungerecker-sonarsource", "name": "Sebastian Hungerecker"}}, "url": "https://github.com/SonarSource/sonar-java/commit/ee70212250619473a5cdca2e1962b08b9f4c5b34", "committedDate": "2020-08-13T15:50:52Z", "message": "Track values through switch statements"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ee70212250619473a5cdca2e1962b08b9f4c5b34", "author": {"user": {"login": "sebastian-hungerecker-sonarsource", "name": "Sebastian Hungerecker"}}, "url": "https://github.com/SonarSource/sonar-java/commit/ee70212250619473a5cdca2e1962b08b9f4c5b34", "committedDate": "2020-08-13T15:50:52Z", "message": "Track values through switch statements"}, "afterCommit": {"oid": "6854260d3c575d620bf53953af0b18f93f378dec", "author": {"user": {"login": "sebastian-hungerecker-sonarsource", "name": "Sebastian Hungerecker"}}, "url": "https://github.com/SonarSource/sonar-java/commit/6854260d3c575d620bf53953af0b18f93f378dec", "committedDate": "2020-08-13T17:03:09Z", "message": "Track values through switch statements"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6854260d3c575d620bf53953af0b18f93f378dec", "author": {"user": {"login": "sebastian-hungerecker-sonarsource", "name": "Sebastian Hungerecker"}}, "url": "https://github.com/SonarSource/sonar-java/commit/6854260d3c575d620bf53953af0b18f93f378dec", "committedDate": "2020-08-13T17:03:09Z", "message": "Track values through switch statements"}, "afterCommit": {"oid": "32c5706bfc9b357a4f4171c8590b30c28e4f49d5", "author": {"user": {"login": "sebastian-hungerecker-sonarsource", "name": "Sebastian Hungerecker"}}, "url": "https://github.com/SonarSource/sonar-java/commit/32c5706bfc9b357a4f4171c8590b30c28e4f49d5", "committedDate": "2020-08-14T10:18:46Z", "message": "Track values through switch statements"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3NDc1MjU1", "url": "https://github.com/SonarSource/sonar-java/pull/3135#pullrequestreview-467475255", "createdAt": "2020-08-14T10:32:54Z", "commit": {"oid": "32c5706bfc9b357a4f4171c8590b30c28e4f49d5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMDozMjo1NVrOHAv3Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMDozMjo1NVrOHAv3Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU0NjI1MQ==", "bodyText": "Is this always true or just in the case of boolean constraints? If not, under which conditions would SymbolicValue.setConstraint return a list of multiple items? And if so, why doesn't it return an option instead of a list?", "url": "https://github.com/SonarSource/sonar-java/pull/3135#discussion_r470546251", "createdAt": "2020-08-14T10:32:55Z", "author": {"login": "sebastian-hungerecker-sonarsource"}, "path": "java-frontend/src/main/java/org/sonar/java/se/ExplodedGraphWalker.java", "diffHunk": "@@ -502,6 +512,59 @@ private static ExpressionTree cleanupCondition(ExpressionTree condition) {\n     return cleanedUpCondition;\n   }\n \n+  private void handleSwitch(CFG.Block programPosition, List<CaseGroupTree> caseGroups) {\n+    ProgramState.Pop poppedSwitchValue = programState.unstackValue(1);\n+    ProgramState.SymbolicValueSymbol switchValue = poppedSwitchValue.valuesAndSymbols.get(0);\n+    ProgramState state = poppedSwitchValue.state;\n+\n+    Map<CaseGroupTree, List<ProgramState.SymbolicValueSymbol>> caseValues = new HashMap<>();\n+    for (CaseGroupTree caseGroup : caseGroups) {\n+      int numberOfCaseValues = caseGroup.labels()\n+        .stream()\n+        .map(CaseLabelTree::expressions)\n+        .mapToInt(List::size)\n+        .sum();\n+      ProgramState.Pop poppedCaseValues = state.unstackValue(numberOfCaseValues);\n+      state = poppedCaseValues.state;\n+      caseValues.put(caseGroup, poppedCaseValues.valuesAndSymbols);\n+    }\n+\n+    ProgramState elseState = state;\n+    // The block that will be taken when all case-conditions are false. This will either be the default-block or, if no\n+    // default block exists, the block after the switch statement.\n+    CFG.Block elseBlock = null;\n+    for (CFG.Block successor : programPosition.successors()) {\n+      CaseGroupTree caseGroup = successor.caseGroup();\n+      if (caseGroup == null || !caseValues.containsKey(caseGroup)) {\n+        assert(elseBlock == null);\n+        elseBlock = successor;\n+        continue;\n+      }\n+\n+      for (ProgramState.SymbolicValueSymbol caseValue : caseValues.get(caseGroup)) {\n+        SymbolicValue equality = constraintManager.createEquality(switchValue, caseValue);\n+        ProgramState ps = setConstraint(state, equality, BooleanConstraint.TRUE);\n+        enqueue(new ProgramPoint(successor), ps, node.exitPath);\n+        elseState = setConstraint(elseState, equality, BooleanConstraint.FALSE);\n+      }\n+      if (successor.isDefaultBlock()) {\n+        assert(elseBlock == null);\n+        elseBlock = successor;\n+      }\n+    }\n+    assert(elseBlock != null);\n+    enqueue(new ProgramPoint(elseBlock), elseState, node.exitPath);\n+  }\n+\n+  private static ProgramState setConstraint(ProgramState state, SymbolicValue condition, BooleanConstraint constraint) {\n+    List<ProgramState> states = condition.setConstraint(state, constraint);\n+    if (states.isEmpty()) {\n+      return state;\n+    }\n+    assert(states.size() == 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32c5706bfc9b357a4f4171c8590b30c28e4f49d5"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3NDc4MDE0", "url": "https://github.com/SonarSource/sonar-java/pull/3135#pullrequestreview-467478014", "createdAt": "2020-08-14T10:38:18Z", "commit": {"oid": "32c5706bfc9b357a4f4171c8590b30c28e4f49d5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMDozODoxOFrOHAv_8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMDozODoxOFrOHAv_8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU0ODQ2Ng==", "bodyText": "I'm a bit unsure about this method because I'm generally a bit unsure about what SymbolicValue.setConstraint does (compared to ProgramState.addConstraint). From the code it looks like it adds the constraint unless it's already there, but that doesn't explain why it failed to properly add the constraints when I used ProgramState.addConstraint instead of this method.", "url": "https://github.com/SonarSource/sonar-java/pull/3135#discussion_r470548466", "createdAt": "2020-08-14T10:38:18Z", "author": {"login": "sebastian-hungerecker-sonarsource"}, "path": "java-frontend/src/main/java/org/sonar/java/se/ExplodedGraphWalker.java", "diffHunk": "@@ -502,6 +512,59 @@ private static ExpressionTree cleanupCondition(ExpressionTree condition) {\n     return cleanedUpCondition;\n   }\n \n+  private void handleSwitch(CFG.Block programPosition, List<CaseGroupTree> caseGroups) {\n+    ProgramState.Pop poppedSwitchValue = programState.unstackValue(1);\n+    ProgramState.SymbolicValueSymbol switchValue = poppedSwitchValue.valuesAndSymbols.get(0);\n+    ProgramState state = poppedSwitchValue.state;\n+\n+    Map<CaseGroupTree, List<ProgramState.SymbolicValueSymbol>> caseValues = new HashMap<>();\n+    for (CaseGroupTree caseGroup : caseGroups) {\n+      int numberOfCaseValues = caseGroup.labels()\n+        .stream()\n+        .map(CaseLabelTree::expressions)\n+        .mapToInt(List::size)\n+        .sum();\n+      ProgramState.Pop poppedCaseValues = state.unstackValue(numberOfCaseValues);\n+      state = poppedCaseValues.state;\n+      caseValues.put(caseGroup, poppedCaseValues.valuesAndSymbols);\n+    }\n+\n+    ProgramState elseState = state;\n+    // The block that will be taken when all case-conditions are false. This will either be the default-block or, if no\n+    // default block exists, the block after the switch statement.\n+    CFG.Block elseBlock = null;\n+    for (CFG.Block successor : programPosition.successors()) {\n+      CaseGroupTree caseGroup = successor.caseGroup();\n+      if (caseGroup == null || !caseValues.containsKey(caseGroup)) {\n+        assert(elseBlock == null);\n+        elseBlock = successor;\n+        continue;\n+      }\n+\n+      for (ProgramState.SymbolicValueSymbol caseValue : caseValues.get(caseGroup)) {\n+        SymbolicValue equality = constraintManager.createEquality(switchValue, caseValue);\n+        ProgramState ps = setConstraint(state, equality, BooleanConstraint.TRUE);\n+        enqueue(new ProgramPoint(successor), ps, node.exitPath);\n+        elseState = setConstraint(elseState, equality, BooleanConstraint.FALSE);\n+      }\n+      if (successor.isDefaultBlock()) {\n+        assert(elseBlock == null);\n+        elseBlock = successor;\n+      }\n+    }\n+    assert(elseBlock != null);\n+    enqueue(new ProgramPoint(elseBlock), elseState, node.exitPath);\n+  }\n+\n+  private static ProgramState setConstraint(ProgramState state, SymbolicValue condition, BooleanConstraint constraint) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32c5706bfc9b357a4f4171c8590b30c28e4f49d5"}, "originalPosition": 88}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "32c5706bfc9b357a4f4171c8590b30c28e4f49d5", "author": {"user": {"login": "sebastian-hungerecker-sonarsource", "name": "Sebastian Hungerecker"}}, "url": "https://github.com/SonarSource/sonar-java/commit/32c5706bfc9b357a4f4171c8590b30c28e4f49d5", "committedDate": "2020-08-14T10:18:46Z", "message": "Track values through switch statements"}, "afterCommit": {"oid": "db7af7ee0cf4008089c3fa961f3c0d3fb1249e7a", "author": {"user": {"login": "sebastian-hungerecker-sonarsource", "name": "Sebastian Hungerecker"}}, "url": "https://github.com/SonarSource/sonar-java/commit/db7af7ee0cf4008089c3fa961f3c0d3fb1249e7a", "committedDate": "2020-08-14T13:19:30Z", "message": "Track values through switch statements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6da93bac149186c3b6602a964ea294d621b04fe9", "author": {"user": {"login": "sebastian-hungerecker-sonarsource", "name": "Sebastian Hungerecker"}}, "url": "https://github.com/SonarSource/sonar-java/commit/6da93bac149186c3b6602a964ea294d621b04fe9", "committedDate": "2020-08-24T09:14:57Z", "message": "Fix CFG generation for switch expressions\n\nThe generated CFG for switch expressions previously included the\nswitch expression twice, once as a terminator (as it should be) and\nonce as an expression in the block that used the result of the switch\nexpression. This would make the switch expression the top of the stack\ninstead of the result and once the user popped the switch expression,\nthe result of the switch expression would be left on the stack when\nthe stack should either be empty or contain the results of other\nsubexpressions."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "db7af7ee0cf4008089c3fa961f3c0d3fb1249e7a", "author": {"user": {"login": "sebastian-hungerecker-sonarsource", "name": "Sebastian Hungerecker"}}, "url": "https://github.com/SonarSource/sonar-java/commit/db7af7ee0cf4008089c3fa961f3c0d3fb1249e7a", "committedDate": "2020-08-14T13:19:30Z", "message": "Track values through switch statements"}, "afterCommit": {"oid": "167d86b267bcd03ac384dc7a7247725d40b8e016", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/167d86b267bcd03ac384dc7a7247725d40b8e016", "committedDate": "2020-08-24T09:15:54Z", "message": "Change order of switch stack consumption in ExplodedGraphWalker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acf7292b012744e2b443ea0c17f619e8f30f8551", "author": {"user": {"login": "sebastian-hungerecker-sonarsource", "name": "Sebastian Hungerecker"}}, "url": "https://github.com/SonarSource/sonar-java/commit/acf7292b012744e2b443ea0c17f619e8f30f8551", "committedDate": "2020-08-24T11:40:45Z", "message": "Track values through switch statements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10eda88a51fd18adaa2d5030c493e8f421eeced0", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/10eda88a51fd18adaa2d5030c493e8f421eeced0", "committedDate": "2020-08-24T11:40:45Z", "message": "Fix order of switch elements addition in block"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e3aa82da5068608c41ff3c9585585e18cd60973", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/3e3aa82da5068608c41ff3c9585585e18cd60973", "committedDate": "2020-08-24T11:40:45Z", "message": "Change order of switch stack consumption in ExplodedGraphWalker"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "167d86b267bcd03ac384dc7a7247725d40b8e016", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/167d86b267bcd03ac384dc7a7247725d40b8e016", "committedDate": "2020-08-24T09:15:54Z", "message": "Change order of switch stack consumption in ExplodedGraphWalker"}, "afterCommit": {"oid": "3e3aa82da5068608c41ff3c9585585e18cd60973", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/3e3aa82da5068608c41ff3c9585585e18cd60973", "committedDate": "2020-08-24T11:40:45Z", "message": "Change order of switch stack consumption in ExplodedGraphWalker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ddd8e452ef12b40d7d6bec93b55690d7a8c2e8bd", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/ddd8e452ef12b40d7d6bec93b55690d7a8c2e8bd", "committedDate": "2020-08-24T15:32:08Z", "message": "Use Preconditions instead of asserts and fix code smells"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1677, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}