{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxNDU4OTI2", "number": 2794, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMzozMjoyMVrODdrqFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMzozMjoyMVrODdrqFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNDUwNTgwOnYy", "diffSide": "RIGHT", "path": "java-checks/src/test/files/checks/RandomFloatToIntCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMzozMjoyMVrOFmbFTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMzozMjoyMVrOFmbFTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgzMzkzNQ==", "bodyText": "RandomUtils has only static methods, the rule should test RandomUtils.nextDouble() (same problem from line 42 to 46)", "url": "https://github.com/SonarSource/sonar-java/pull/2794#discussion_r375833935", "createdAt": "2020-02-06T13:32:21Z", "author": {"login": "alban-auzeill"}, "path": "java-checks/src/test/files/checks/RandomFloatToIntCheck.java", "diffHunk": "@@ -1,17 +1,58 @@\n import java.util.Random;\n import java.lang.Math;\n+import java.util.concurrent.ThreadLocalRandom;\n+import org.apache.commons.lang.math.JVMRandom;\n+import org.apache.commons.lang.math.RandomUtils;\n \n class A {\n-\n+  //java.util.Random\n   Random r = new Random();\n-  int rand = (int) r.nextDouble() * 50;  // Noncompliant {{Use \"java.util.Random.nextInt()\" instead.}}\n-  int rand2 = (int) r.nextDouble() * 50;  // Noncompliant\n-  int rand3 = (int) Math.random() * 50;  // Noncompliant\n-  float rand4 = (float)r.nextFloat();\n-  int rand5 = (int) new Foo() {\n-    void foo() {\n+  int rand = (int) r.nextDouble() * 50;  // Noncompliant {{Use \"nextInt()\" instead.}}\n+  int rand2 = (int) r.nextFloat() * 50;  // Noncompliant\n+  float rand3 = (float)r.nextFloat();\n+  int rand4 = (int) r.nextInt() * 50;\n+  int rand5 = (int)r.nextFloat(); // Noncompliant; will always be 0;\n+\n+  // java.lang.Math\n+  int rand6 = (int) Math.random() * 50;  // Noncompliant {{Use \"java.util.Random.nextInt()\" instead.}}\n+  int rand7 = (int) new Foo() {\n+    int foo() {\n       int a = (int) Math.random() * 50;   // Noncompliant\n+      return a;\n     }\n-  };\n-  int rand6 = (int) r.nextInt() * 50;\n-}\n\\ No newline at end of file\n+  }.foo();\n+\n+  // java.util.concurrent.ThreadLocalRandom\n+  int rand8 = (int) ThreadLocalRandom.current().nextDouble() * 50;  // Noncompliant {{Use \"nextInt()\" instead.}}\n+  int rand9 = (int) ThreadLocalRandom.current().nextDouble(1.0) * 50;  // Noncompliant\n+  int rand10 = (int) ThreadLocalRandom.current().nextDouble(1.0, 2.0) * 50;  // Noncompliant\n+\n+  // org.apache.commons.lang.math.JVMRandom\n+\n+  JVMRandom jvmRandom = new JVMRandom();\n+  int rand11 = (int) jvmRandom.nextDouble() * 50;  // Noncompliant {{Use \"nextInt()\" instead.}}\n+  int rand12 = (int) jvmRandom.nextFloat() * 50;  // Noncompliant\n+  float rand13 = (float)jvmRandom.nextFloat();\n+  int rand14 = (int) jvmRandom.nextInt() * 50;\n+  int rand15 = (int)jvmRandom.nextFloat(); // Noncompliant; will always be 0;\n+\n+  // org.apache.commons.lang.math.RandomUtils\n+\n+  RandomUtils randomUtils = new RandomUtils();\n+  int rand16 = (int) randomUtils.nextDouble() * 50;  // Noncompliant {{Use \"nextInt()\" instead.}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ed4c9189815c68dce3725c2cbee5ad69ccb0f7c"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4167, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}