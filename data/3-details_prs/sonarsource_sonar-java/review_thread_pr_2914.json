{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3MjI2OTMw", "number": 2914, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNzoxNjowN1rOD1oTKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwODozNzowMlrOD1qS0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTYxMzg0OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/AssertionInTryCatchCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNzoxNjowN1rOGLJ6PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNzoxNjowN1rOGLJ6PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM0OTg4NA==", "bodyText": "The visitor should stay in the same method body and not analyze nested methods or lambdas.\nThe following code can raise a false-positive: Runnable r = () -> fail();\nSame for class A { void f() {fail();} } and class A { Void f = fail(); }", "url": "https://github.com/SonarSource/sonar-java/pull/2914#discussion_r414349884", "createdAt": "2020-04-24T07:16:07Z", "author": {"login": "alban-auzeill"}, "path": "java-checks/src/main/java/org/sonar/java/checks/AssertionInTryCatchCheck.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import org.sonar.check.Rule;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.semantic.Type;\n+import org.sonar.plugins.java.api.tree.BaseTreeVisitor;\n+import org.sonar.plugins.java.api.tree.CatchTree;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+import org.sonar.plugins.java.api.tree.TryStatementTree;\n+import org.sonar.plugins.java.api.tree.VariableTree;\n+\n+@Rule(key = \"S5779\")\n+public class AssertionInTryCatchCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final MethodMatchers JUNIT_ASSERT_METHOD_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"org.junit.Assert\", \"org.junit.jupiter.api.Assertions\")\n+    .name(name -> \"fail\".equals(name) || name.startsWith(\"assert\"))\n+    .withAnyParameters()\n+    .build();\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.TRY_STATEMENT);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    TryStatementTree tryStatementTree = (TryStatementTree) tree;\n+    getUnusedCatchAssertionErrorParameter(tryStatementTree.catches()).ifPresent(catchTree ->\n+      tryStatementTree.block().accept(new TryBodyVisitor(catchTree))\n+    );\n+  }\n+\n+  private static Optional<VariableTree> getUnusedCatchAssertionErrorParameter(List<CatchTree> catches) {\n+    return catches.stream()\n+      .map(CatchTree::parameter)\n+      .filter(param -> {\n+        Type symbolType = param.type().symbolType();\n+        return param.symbol().usages().isEmpty() &&\n+          (symbolType.isSubtypeOf(\"java.lang.AssertionError\")\n+            || symbolType.is(\"java.lang.Error\")\n+            || symbolType.is(\"java.lang.Throwable\"));\n+      }).findFirst();\n+  }\n+\n+  private class TryBodyVisitor extends BaseTreeVisitor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8790c662b6e334accc50c1fa9b91d74a74b6c7b2"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTk0MDY2OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/AssertionInTryCatchCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwODozNzowMlrOGLM3pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwODozNzowMlrOGLM3pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM5ODM3NQ==", "bodyText": "thrown by fail() it's not always fail()", "url": "https://github.com/SonarSource/sonar-java/pull/2914#discussion_r414398375", "createdAt": "2020-04-24T08:37:02Z", "author": {"login": "alban-auzeill"}, "path": "java-checks/src/main/java/org/sonar/java/checks/AssertionInTryCatchCheck.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import org.sonar.check.Rule;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.semantic.Type;\n+import org.sonar.plugins.java.api.tree.BaseTreeVisitor;\n+import org.sonar.plugins.java.api.tree.CatchTree;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+import org.sonar.plugins.java.api.tree.TryStatementTree;\n+import org.sonar.plugins.java.api.tree.VariableTree;\n+\n+@Rule(key = \"S5779\")\n+public class AssertionInTryCatchCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final MethodMatchers JUNIT_ASSERT_METHOD_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"org.junit.Assert\", \"org.junit.jupiter.api.Assertions\")\n+    .name(name -> \"fail\".equals(name) || name.startsWith(\"assert\"))\n+    .withAnyParameters()\n+    .build();\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.TRY_STATEMENT);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    TryStatementTree tryStatementTree = (TryStatementTree) tree;\n+    getUnusedCatchAssertionErrorParameter(tryStatementTree.catches()).ifPresent(catchTree ->\n+      tryStatementTree.block().accept(new TryBodyVisitor(catchTree))\n+    );\n+  }\n+\n+  private static Optional<VariableTree> getUnusedCatchAssertionErrorParameter(List<CatchTree> catches) {\n+    return catches.stream()\n+      .map(CatchTree::parameter)\n+      .filter(param -> {\n+        Type symbolType = param.type().symbolType();\n+        return param.symbol().usages().isEmpty() &&\n+          (symbolType.isSubtypeOf(\"java.lang.AssertionError\")\n+            || symbolType.is(\"java.lang.Error\")\n+            || symbolType.is(\"java.lang.Throwable\"));\n+      }).findFirst();\n+  }\n+\n+  private class TryBodyVisitor extends BaseTreeVisitor {\n+    private final List<JavaFileScannerContext.Location> secondaryLocation;\n+\n+    public TryBodyVisitor(VariableTree catchTree) {\n+      this.secondaryLocation = Collections.singletonList(new JavaFileScannerContext.Location(\n+        \"This parameter will catch the AssertionError thrown by fail()\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8790c662b6e334accc50c1fa9b91d74a74b6c7b2"}, "originalPosition": 78}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4112, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}