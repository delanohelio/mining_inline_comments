{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2NzEwNzMx", "number": 3178, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwODozMTo0N1rOEje4rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwODozMTo0N1rOEje4rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NjQxNjQ3OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/tests/TestsStabilityCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwODozMTo0N1rOHR2yhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwODozMTo0N1rOHR2yhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ4NTUwOA==", "bodyText": "Can be replaced by\n.filter(annotationTree -> annotationTree.symbolType().is(ANNOTATION))", "url": "https://github.com/SonarSource/sonar-java/pull/3178#discussion_r488485508", "createdAt": "2020-09-15T08:31:47Z", "author": {"login": "alban-auzeill"}, "path": "java-checks/src/main/java/org/sonar/java/checks/tests/TestsStabilityCheck.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.tests;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.tree.AnnotationTree;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.AssignmentExpressionTree;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.MethodTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5973\")\n+public class TestsStabilityCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final String ANNOTATION = \"org.testng.annotations.Test\";\n+  private static final String SUCCESS_PERCENTAGE_NAME = \"successPercentage\";\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Arrays.asList(Tree.Kind.METHOD, Tree.Kind.CONSTRUCTOR);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    MethodTree methodTree = (MethodTree) tree;\n+\n+    List<AnnotationTree> annotations = methodTree.modifiers().annotations();\n+    Optional<Arguments> arguments = annotations.stream()\n+      .filter(annotationTree -> annotationTree.symbolType().fullyQualifiedName().equals(ANNOTATION))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db54b4ea96b07e7173bfeb8cc41fa662538b0e8"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3889, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}