{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMDUyODYx", "number": 2856, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNTozODozNFrODleMPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTowOToyNVrODluZRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjE4NTU2OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/security/VerifiedServerHostnamesCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNTozODozNFrOFyYhYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNTozODozNFrOFyYhYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM3NDg4MQ==", "bodyText": "This test condition leads to FP if we are bad at resolving the variable symbol. I would prefer to replace isInvocationOnVariable by something like isInvocationOnTheGivenVariableButReturnTrueIfYourAreUnsureAboutOnWhatThisMethodIsInvoked \ud83d\ude09", "url": "https://github.com/SonarSource/sonar-java/pull/2856#discussion_r388374881", "createdAt": "2020-03-05T15:38:34Z", "author": {"login": "alban-auzeill"}, "path": "java-checks/src/main/java/org/sonar/java/checks/security/VerifiedServerHostnamesCheck.java", "diffHunk": "@@ -179,15 +192,20 @@ private static boolean isNotFalse(ExpressionTree expression) {\n \n   private static class MethodBodyApacheVisitor extends BaseTreeVisitor {\n     private boolean isSecured = false;\n+    private Symbol variable;\n \n     private static final MethodMatcher SET_SSL_CHECK_SERVER_ID = MethodMatcher.create()\n       .typeDefinition(APACHE_EMAIL)\n       .name(\"setSSLCheckServerIdentity\")\n       .addParameter(\"boolean\");\n \n+    MethodBodyApacheVisitor(Symbol variable) {\n+      this.variable = variable;\n+    }\n+\n     @Override\n     public void visitMethodInvocation(MethodInvocationTree mit) {\n-      if (SET_SSL_CHECK_SERVER_ID.matches(mit) && isNotFalse(mit.arguments().get(0))) {\n+      if (isInvocationOnVariable(mit, variable) && SET_SSL_CHECK_SERVER_ID.matches(mit) && isNotFalse(mit.arguments().get(0))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ad780795d9044a1b3c2321c3bf8fbccc646d595"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODg0MDM3OnYy", "diffSide": "RIGHT", "path": "java-frontend/src/main/java/org/sonar/java/model/ExpressionUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTowOToyNVrOFyxphQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTowOToyNVrOFyxphQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4NjU2NQ==", "bodyText": "We could reduce the cognitive complexity by 1 using:\n  public static boolean isInvocationOnVariable(MethodInvocationTree mit, @Nullable Symbol variable, boolean defaultReturn) {\n    ExpressionTree methodSelect = mit.methodSelect();\n    if (variable != null && methodSelect.is(Tree.Kind.MEMBER_SELECT)) {\n      return extractIdentifierSymbol(((MemberSelectExpressionTree) methodSelect).expression())\n        .map(variable::equals)\n        .orElse(defaultReturn);\n    }\n    return defaultReturn;\n  }\n\nor\n  public static boolean isInvocationOnVariable(MethodInvocationTree mit, @Nullable Symbol variable, boolean defaultReturn) {\n    ExpressionTree methodSelect = mit.methodSelect();\n    if (variable == null || !methodSelect.is(Tree.Kind.MEMBER_SELECT)) {\n      return defaultReturn;\n    }\n    return extractIdentifierSymbol(((MemberSelectExpressionTree) methodSelect).expression())\n      .map(variable::equals)\n      .orElse(defaultReturn);\n  }", "url": "https://github.com/SonarSource/sonar-java/pull/2856#discussion_r388786565", "createdAt": "2020-03-06T09:09:25Z", "author": {"login": "alban-auzeill"}, "path": "java-frontend/src/main/java/org/sonar/java/model/ExpressionUtils.java", "diffHunk": "@@ -114,10 +115,21 @@ public static IdentifierTree extractIdentifier(AssignmentExpressionTree tree) {\n     return extractIdentifier(tree).map(IdentifierTree::symbol);\n   }\n \n-  public static boolean isInvocationOnVariable(MethodInvocationTree mit, Symbol variable) {\n+  /**\n+   * Return whether we are sure that the method invocation is on a given variable.\n+   *\n+   * If unsure (variable is null, or we can not extract an identifier from the method invocation),\n+   * return a default value\n+   */\n+  public static boolean isInvocationOnVariable(MethodInvocationTree mit, @Nullable Symbol variable, boolean defaultReturn) {\n     ExpressionTree methodSelect = mit.methodSelect();\n-    return methodSelect.is(Tree.Kind.MEMBER_SELECT)\n-      && extractIdentifierSymbol(((MemberSelectExpressionTree) methodSelect).expression()).filter(s -> s.equals(variable)).isPresent();\n+    if (variable != null && methodSelect.is(Tree.Kind.MEMBER_SELECT)) {\n+      Optional<Symbol> extractedSymbol = extractIdentifierSymbol(((MemberSelectExpressionTree) methodSelect).expression());\n+      if (extractedSymbol.isPresent()) {\n+        return extractedSymbol.get().equals(variable);\n+      }\n+    }\n+    return defaultReturn;\n   }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0083cb65f1c087caadb803d695e20e54b30686a"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4070, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}