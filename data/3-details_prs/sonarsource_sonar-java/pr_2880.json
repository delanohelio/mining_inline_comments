{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwMTIwNTEw", "number": 2880, "title": "SONARJAVA-3310 Provide source maps for generated files", "bodyText": "", "createdAt": "2020-03-17T22:58:22Z", "url": "https://github.com/SonarSource/sonar-java/pull/2880", "merged": true, "mergeCommit": {"oid": "2218994371abc7b75c360f00ee02365c062c1e2a"}, "closed": true, "closedAt": "2020-03-24T08:15:10Z", "author": {"login": "saberduck"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcOrKpRABqjMxMzkzOTQwODA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQubyHgFqTM4MDA3ODQzMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c193727524e65dc0c96fe6b11a92a5ba8252260b", "author": {"user": {"login": "saberduck", "name": "Tibor Blenessy"}}, "url": "https://github.com/SonarSource/sonar-java/commit/c193727524e65dc0c96fe6b11a92a5ba8252260b", "committedDate": "2020-03-17T22:57:29Z", "message": "SONARJAVA-3310 Provide source maps for generated files"}, "afterCommit": {"oid": "96ab88d321952bf581fbf062fe6c26fb981fbdbc", "author": {"user": {"login": "saberduck", "name": "Tibor Blenessy"}}, "url": "https://github.com/SonarSource/sonar-java/commit/96ab88d321952bf581fbf062fe6c26fb981fbdbc", "committedDate": "2020-03-17T23:18:23Z", "message": "SONARJAVA-3310 Provide source maps for generated files"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6650e6e905ecf82c4085be4a391529ce6821f1ae", "author": {"user": {"login": "saberduck", "name": "Tibor Blenessy"}}, "url": "https://github.com/SonarSource/sonar-java/commit/6650e6e905ecf82c4085be4a391529ce6821f1ae", "committedDate": "2020-03-18T11:00:54Z", "message": "more tests"}, "afterCommit": {"oid": "3b95013bcf75686be2ed470cd3af657ba366bd6e", "author": {"user": {"login": "saberduck", "name": "Tibor Blenessy"}}, "url": "https://github.com/SonarSource/sonar-java/commit/3b95013bcf75686be2ed470cd3af657ba366bd6e", "committedDate": "2020-03-18T16:44:22Z", "message": "more tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3b95013bcf75686be2ed470cd3af657ba366bd6e", "author": {"user": {"login": "saberduck", "name": "Tibor Blenessy"}}, "url": "https://github.com/SonarSource/sonar-java/commit/3b95013bcf75686be2ed470cd3af657ba366bd6e", "committedDate": "2020-03-18T16:44:22Z", "message": "more tests"}, "afterCommit": {"oid": "31eaee57538c83d2e6e156e07ebdf29feec2492f", "author": {"user": {"login": "saberduck", "name": "Tibor Blenessy"}}, "url": "https://github.com/SonarSource/sonar-java/commit/31eaee57538c83d2e6e156e07ebdf29feec2492f", "committedDate": "2020-03-18T20:26:37Z", "message": "more tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "31eaee57538c83d2e6e156e07ebdf29feec2492f", "author": {"user": {"login": "saberduck", "name": "Tibor Blenessy"}}, "url": "https://github.com/SonarSource/sonar-java/commit/31eaee57538c83d2e6e156e07ebdf29feec2492f", "committedDate": "2020-03-18T20:26:37Z", "message": "more tests"}, "afterCommit": {"oid": "852d0ff446f68afed1997ab388fc35e56147a780", "author": {"user": {"login": "saberduck", "name": "Tibor Blenessy"}}, "url": "https://github.com/SonarSource/sonar-java/commit/852d0ff446f68afed1997ab388fc35e56147a780", "committedDate": "2020-03-18T22:34:02Z", "message": "more tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "71e562879d0904028edf4c92c1ab148aec85b027", "author": {"user": {"login": "saberduck", "name": "Tibor Blenessy"}}, "url": "https://github.com/SonarSource/sonar-java/commit/71e562879d0904028edf4c92c1ab148aec85b027", "committedDate": "2020-03-18T23:05:04Z", "message": "fix test"}, "afterCommit": {"oid": "1c18985e790d4ae10c3342bd183b47df32b23aa1", "author": {"user": {"login": "saberduck", "name": "Tibor Blenessy"}}, "url": "https://github.com/SonarSource/sonar-java/commit/1c18985e790d4ae10c3342bd183b47df32b23aa1", "committedDate": "2020-03-19T08:28:30Z", "message": "SONARJAVA-3310 Provide source maps for generated files"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1c18985e790d4ae10c3342bd183b47df32b23aa1", "author": {"user": {"login": "saberduck", "name": "Tibor Blenessy"}}, "url": "https://github.com/SonarSource/sonar-java/commit/1c18985e790d4ae10c3342bd183b47df32b23aa1", "committedDate": "2020-03-19T08:28:30Z", "message": "SONARJAVA-3310 Provide source maps for generated files"}, "afterCommit": {"oid": "1d348e3779676e5c54900ae86614eff9d9bec74a", "author": {"user": {"login": "saberduck", "name": "Tibor Blenessy"}}, "url": "https://github.com/SonarSource/sonar-java/commit/1d348e3779676e5c54900ae86614eff9d9bec74a", "committedDate": "2020-03-19T08:52:03Z", "message": "SONARJAVA-3310 Provide source maps for generated files"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7f3d2687cf6c7d5f2fbf06ce5f34dea833a7e8f8", "author": {"user": {"login": "saberduck", "name": "Tibor Blenessy"}}, "url": "https://github.com/SonarSource/sonar-java/commit/7f3d2687cf6c7d5f2fbf06ce5f34dea833a7e8f8", "committedDate": "2020-03-19T10:42:35Z", "message": "SONARJAVA-3310 Skip Jasper execution when there are no files"}, "afterCommit": {"oid": "4f16e667a61b6ffc3cecc9ee4cd63f480cc662de", "author": {"user": {"login": "saberduck", "name": "Tibor Blenessy"}}, "url": "https://github.com/SonarSource/sonar-java/commit/4f16e667a61b6ffc3cecc9ee4cd63f480cc662de", "committedDate": "2020-03-20T14:22:13Z", "message": "SONARJAVA-3310 Provide source maps for generated files"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4f16e667a61b6ffc3cecc9ee4cd63f480cc662de", "author": {"user": {"login": "saberduck", "name": "Tibor Blenessy"}}, "url": "https://github.com/SonarSource/sonar-java/commit/4f16e667a61b6ffc3cecc9ee4cd63f480cc662de", "committedDate": "2020-03-20T14:22:13Z", "message": "SONARJAVA-3310 Provide source maps for generated files"}, "afterCommit": {"oid": "85a0941a71788d26bd1fd1d9f90fb3a0fe6b0f9a", "author": {"user": {"login": "saberduck", "name": "Tibor Blenessy"}}, "url": "https://github.com/SonarSource/sonar-java/commit/85a0941a71788d26bd1fd1d9f90fb3a0fe6b0f9a", "committedDate": "2020-03-23T08:05:49Z", "message": "Add -webapp parameter to Jasper"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NDg3OTg1", "url": "https://github.com/SonarSource/sonar-java/pull/2880#pullrequestreview-379487985", "createdAt": "2020-03-23T14:34:45Z", "commit": {"oid": "85a0941a71788d26bd1fd1d9f90fb3a0fe6b0f9a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDozNDo0NVrOF6IOrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjowNDoxOFrOF6MeDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ5NjU1OA==", "bodyText": "Why not rely on Optional, rather than introducing another method which could lead to NPEs?", "url": "https://github.com/SonarSource/sonar-java/pull/2880#discussion_r396496558", "createdAt": "2020-03-23T14:34:45Z", "author": {"login": "m-g-sonar"}, "path": "java-frontend/src/main/java/org/sonar/plugins/java/api/JavaFileScannerContext.java", "diffHunk": "@@ -225,4 +225,14 @@ public int hashCode() {\n       return Objects.hash(msg, syntaxNode);\n     }\n   }\n+\n+  /**\n+   * Return JSR 45 source map for current input file\n+   * @return source map or {@code null} if there is no source map available\n+   */\n+  @Nullable\n+  default SourceMap sourceMap() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85a0941a71788d26bd1fd1d9f90fb3a0fe6b0f9a"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ5OTUzOA==", "bodyText": "if this can throws a runtime exception, are we going to be able to recover from it?\nIt seems to me that it's not the case and it will interrupt the whole process, ultimately interrupting the analysis.\nAre you sure it is working according to our failfast policy? I can't see a test recovering from it, only some test checking the thrown exception.", "url": "https://github.com/SonarSource/sonar-java/pull/2880#discussion_r396499538", "createdAt": "2020-03-23T14:38:45Z", "author": {"login": "m-g-sonar"}, "path": "java-frontend/src/main/java/org/sonar/java/model/GeneratedFile.java", "diffHunk": "@@ -27,24 +28,131 @@\n import java.nio.charset.StandardCharsets;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n import javax.annotation.CheckForNull;\n+import javax.annotation.Nullable;\n import org.sonar.api.batch.fs.InputFile;\n import org.sonar.api.batch.fs.TextPointer;\n import org.sonar.api.batch.fs.TextRange;\n+import org.sonar.plugins.java.api.SourceMap;\n+import org.sonar.plugins.java.api.SourceMap.Location;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+import static java.lang.Math.max;\n+import static java.lang.Math.min;\n \n public class GeneratedFile implements InputFile {\n \n   private final Path path;\n \n-  private final InputFile source;\n+  private final List<SmapFile> smapFiles = new ArrayList<>();\n+\n+  private SourceMap sourceMap;\n \n-  public GeneratedFile(Path path, InputFile source) {\n+  public GeneratedFile(Path path) {\n     this.path = path;\n-    this.source = source;\n   }\n \n-  public InputFile getSource() {\n-    return source;\n+  public SourceMap sourceMap() {\n+    if (sourceMap == null) {\n+      sourceMap = new SourceMapImpl();\n+    }\n+    return sourceMap;\n+  }\n+\n+  public void addSmap(SmapFile smap) {\n+    if (!smap.getGeneratedFile().equals(path)) {\n+      throw new IllegalStateException(\"Invalid smap \" + smap + \" for this generated file \" + path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85a0941a71788d26bd1fd1d9f90fb3a0fe6b0f9a"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUwNzk3NQ==", "bodyText": "I'm really not a big fan of double-nesting lambdas. I strongly feel it does not help debugging either.\nWould it be possible to just rewrite the first one in a more traditional foreach loop : for(SmapFile sm : smapFiles) { ... } and maybe extract the second big block into a dedicated method?", "url": "https://github.com/SonarSource/sonar-java/pull/2880#discussion_r396507975", "createdAt": "2020-03-23T14:49:50Z", "author": {"login": "m-g-sonar"}, "path": "java-frontend/src/main/java/org/sonar/java/model/GeneratedFile.java", "diffHunk": "@@ -27,24 +28,131 @@\n import java.nio.charset.StandardCharsets;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n import javax.annotation.CheckForNull;\n+import javax.annotation.Nullable;\n import org.sonar.api.batch.fs.InputFile;\n import org.sonar.api.batch.fs.TextPointer;\n import org.sonar.api.batch.fs.TextRange;\n+import org.sonar.plugins.java.api.SourceMap;\n+import org.sonar.plugins.java.api.SourceMap.Location;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+import static java.lang.Math.max;\n+import static java.lang.Math.min;\n \n public class GeneratedFile implements InputFile {\n \n   private final Path path;\n \n-  private final InputFile source;\n+  private final List<SmapFile> smapFiles = new ArrayList<>();\n+\n+  private SourceMap sourceMap;\n \n-  public GeneratedFile(Path path, InputFile source) {\n+  public GeneratedFile(Path path) {\n     this.path = path;\n-    this.source = source;\n   }\n \n-  public InputFile getSource() {\n-    return source;\n+  public SourceMap sourceMap() {\n+    if (sourceMap == null) {\n+      sourceMap = new SourceMapImpl();\n+    }\n+    return sourceMap;\n+  }\n+\n+  public void addSmap(SmapFile smap) {\n+    if (!smap.getGeneratedFile().equals(path)) {\n+      throw new IllegalStateException(\"Invalid smap \" + smap + \" for this generated file \" + path);\n+    }\n+    smapFiles.add(smap);\n+  }\n+\n+  class SourceMapImpl implements SourceMap {\n+\n+    final Map<Integer, Location> lines = new HashMap<>();\n+\n+    private SourceMapImpl() {\n+      smapFiles.forEach(sm -> sm.getLineSection().forEach(lineInfo -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85a0941a71788d26bd1fd1d9f90fb3a0fe6b0f9a"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU2NjAyOQ==", "bodyText": "What about using Optional here as well?", "url": "https://github.com/SonarSource/sonar-java/pull/2880#discussion_r396566029", "createdAt": "2020-03-23T16:04:18Z", "author": {"login": "m-g-sonar"}, "path": "java-frontend/src/main/java/org/sonar/plugins/java/api/SourceMap.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.plugins.java.api;\n+\n+import com.google.common.annotations.Beta;\n+import java.nio.file.Path;\n+import javax.annotation.Nullable;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+/**\n+ * Represents source map between generated Java code and JSP file\n+ */\n+@Beta\n+public interface SourceMap {\n+\n+  /**\n+   * Return location in JSP file corresponding to the AST node\n+   *\n+   * @return location in JSP file or null\n+   */\n+  @Nullable\n+  Location sourceMapLocationFor(Tree tree);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85a0941a71788d26bd1fd1d9f90fb3a0fe6b0f9a"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dcc21b5746c13b0584d1acf69d6df525662dab04", "author": {"user": {"login": "saberduck", "name": "Tibor Blenessy"}}, "url": "https://github.com/SonarSource/sonar-java/commit/dcc21b5746c13b0584d1acf69d6df525662dab04", "committedDate": "2020-03-23T17:05:53Z", "message": "SONARJAVA-3310 Provide source maps for generated files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dec67506bb8a3836ecf2c0ec2635d06ae68a7e98", "author": {"user": {"login": "saberduck", "name": "Tibor Blenessy"}}, "url": "https://github.com/SonarSource/sonar-java/commit/dec67506bb8a3836ecf2c0ec2635d06ae68a7e98", "committedDate": "2020-03-23T17:05:53Z", "message": "Add -webapp parameter to Jasper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c966b672354c92859bfd0a744d2942ee0abc63bc", "author": {"user": {"login": "saberduck", "name": "Tibor Blenessy"}}, "url": "https://github.com/SonarSource/sonar-java/commit/c966b672354c92859bfd0a744d2942ee0abc63bc", "committedDate": "2020-03-23T17:05:53Z", "message": "feedback from review"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "85a0941a71788d26bd1fd1d9f90fb3a0fe6b0f9a", "author": {"user": {"login": "saberduck", "name": "Tibor Blenessy"}}, "url": "https://github.com/SonarSource/sonar-java/commit/85a0941a71788d26bd1fd1d9f90fb3a0fe6b0f9a", "committedDate": "2020-03-23T08:05:49Z", "message": "Add -webapp parameter to Jasper"}, "afterCommit": {"oid": "c966b672354c92859bfd0a744d2942ee0abc63bc", "author": {"user": {"login": "saberduck", "name": "Tibor Blenessy"}}, "url": "https://github.com/SonarSource/sonar-java/commit/c966b672354c92859bfd0a744d2942ee0abc63bc", "committedDate": "2020-03-23T17:05:53Z", "message": "feedback from review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMDc4NDMx", "url": "https://github.com/SonarSource/sonar-java/pull/2880#pullrequestreview-380078431", "createdAt": "2020-03-24T08:14:51Z", "commit": {"oid": "c966b672354c92859bfd0a744d2942ee0abc63bc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1760, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}