{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2OTI2MTgw", "number": 3348, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMjozNzoxMFrOFE9iGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMjo1NTozN1rOFE9-2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNzQ2Nzc5OnYy", "diffSide": "RIGHT", "path": "java-frontend/src/main/java/org/sonar/java/model/SyntacticEquivalence.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMjozNzoxMFrOIFOc8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMjozNzoxMFrOIFOc8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM1MDU3OA==", "bodyText": "What about \"overwritten/overridden\"\nand\n\"to force the equivalence check result\"", "url": "https://github.com/SonarSource/sonar-java/pull/3348#discussion_r542350578", "createdAt": "2020-12-14T12:37:10Z", "author": {"login": "margarita-nedzelska-sonarsource"}, "path": "java-frontend/src/main/java/org/sonar/java/model/SyntacticEquivalence.java", "diffHunk": "@@ -62,27 +65,27 @@ public static boolean areEquivalent(List<? extends Tree> leftList, List<? extend\n    * @return true, if nodes are syntactically equivalent\n    */\n   public static boolean areEquivalent(@Nullable Tree leftNode, @Nullable Tree rightNode) {\n-    return areEquivalent(leftNode, rightNode, (t1, t2) -> false);\n+    return areEquivalent(leftNode, rightNode, (t1, t2) -> false, true);\n   }\n \n   /**\n    * @return true, if nodes are syntactically equivalent\n-   * Use permissiveEquivalence to force the equivalence of two nodes\n+   * Use \"overwriteEquivalence\" to force the equivalence or not of two nodes. When it returns true, the method will return \"equivalenceValue\".", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5dca1970c4889054f029291594d58d62f2a531e"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNzU0MTM2OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/CombineCatchCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMjo1NTozN1rOIFPHGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMjo1NTozN1rOIFPHGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM2MTM2OQ==", "bodyText": "Could this be a part of general equivalence check? To my mind, we can't say that 2 blocks are equivalent, if they're look the same but referencing different methods (in general, not only for this rule)\nThis change might also influence other rules, so need to check.", "url": "https://github.com/SonarSource/sonar-java/pull/3348#discussion_r542361369", "createdAt": "2020-12-14T12:55:37Z", "author": {"login": "margarita-nedzelska-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/CombineCatchCheck.java", "diffHunk": "@@ -55,6 +58,33 @@ public void visitNode(Tree tree) {\n     }\n   }\n \n+  private static boolean areNotSameMethodCalls(JavaTree leftNode, JavaTree rightNode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5dca1970c4889054f029291594d58d62f2a531e"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3724, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}