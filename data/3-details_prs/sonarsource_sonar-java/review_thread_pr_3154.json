{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczODg5NDQ2", "number": 3154, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMzoxMjowMVrOEckWLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMzozNDowN1rOEck8kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MzkxMDg2OnYy", "diffSide": "RIGHT", "path": "java-checks-test-sources/src/main/java/symbolicexecution/checks/ParameterNullnessCheck.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMzoxMjowMVrOHHLXng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMzo0MDo0MlrOHHMnIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI4ODM1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Preconditions.checkNotNull(null); // Compliant - a way to be sure it will be not null\n          \n          \n            \n                Preconditions.checkNotNull(o); // Compliant - a way to be sure it will be not null", "url": "https://github.com/SonarSource/sonar-java/pull/3154#discussion_r477288350", "createdAt": "2020-08-26T13:12:01Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks-test-sources/src/main/java/symbolicexecution/checks/ParameterNullnessCheck.java", "diffHunk": "@@ -29,9 +30,10 @@ void foo(Object o) { // flow@foo [[order=2]] {{Method 'foo' declaration.}}\n     C c2 = new C(o, // Noncompliant [[sc=16;ec=17;flows=A]] {{Annotate the parameter with @javax.annotation.Nullable in constructor declaration, or make sure that null can not be passed as argument.}}\n       null); // flow@A [[order=1]] {{Argument can be null.}}\n     B b = new B();\n+  }\n \n-    Preconditions.checkNotNull( // Noncompliant [[sc=19;ec=31;flows=checkNotNull]] \n-      null); // flow@checkNotNull [[order=1]] {{Argument can be null.}}\n+  void qix(@Nullable Object o) {\n+    Preconditions.checkNotNull(null); // Compliant - a way to be sure it will be not null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cedbee12ea7722e6b11a055b0b32405c0796978"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMwODcwNA==", "bodyText": "nice catch.", "url": "https://github.com/SonarSource/sonar-java/pull/3154#discussion_r477308704", "createdAt": "2020-08-26T13:40:42Z", "author": {"login": "m-g-sonar"}, "path": "java-checks-test-sources/src/main/java/symbolicexecution/checks/ParameterNullnessCheck.java", "diffHunk": "@@ -29,9 +30,10 @@ void foo(Object o) { // flow@foo [[order=2]] {{Method 'foo' declaration.}}\n     C c2 = new C(o, // Noncompliant [[sc=16;ec=17;flows=A]] {{Annotate the parameter with @javax.annotation.Nullable in constructor declaration, or make sure that null can not be passed as argument.}}\n       null); // flow@A [[order=1]] {{Argument can be null.}}\n     B b = new B();\n+  }\n \n-    Preconditions.checkNotNull( // Noncompliant [[sc=19;ec=31;flows=checkNotNull]] \n-      null); // flow@checkNotNull [[order=1]] {{Argument can be null.}}\n+  void qix(@Nullable Object o) {\n+    Preconditions.checkNotNull(null); // Compliant - a way to be sure it will be not null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI4ODM1MA=="}, "originalCommit": {"oid": "2cedbee12ea7722e6b11a055b0b32405c0796978"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NDAwOTEyOnYy", "diffSide": "RIGHT", "path": "its/ruling/src/test/resources/sonar-server/java-S4165.json", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMzozNDowN1rOHHMUvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMzozODo1MlrOHHMhkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMwMzk5OQ==", "bodyText": "For the record, the different issues additions/deletion in this PR (like these ones) correspond to issues removed in #3140.", "url": "https://github.com/SonarSource/sonar-java/pull/3154#discussion_r477303999", "createdAt": "2020-08-26T13:34:07Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "its/ruling/src/test/resources/sonar-server/java-S4165.json", "diffHunk": "@@ -1,4 +1,11 @@\n {\n+'org.sonarsource.sonarqube:sonar-server:src/main/java/org/sonar/server/es/textsearch/ComponentTextSearchQueryFactory.java':[\n+177,\n+178,\n+179,\n+180,\n+181,\n+],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83946a9be619d7b6da9cb237ac3c4a9632c6073f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMwNzI4Mw==", "bodyText": "Yep, I have seen that -_-", "url": "https://github.com/SonarSource/sonar-java/pull/3154#discussion_r477307283", "createdAt": "2020-08-26T13:38:52Z", "author": {"login": "m-g-sonar"}, "path": "its/ruling/src/test/resources/sonar-server/java-S4165.json", "diffHunk": "@@ -1,4 +1,11 @@\n {\n+'org.sonarsource.sonarqube:sonar-server:src/main/java/org/sonar/server/es/textsearch/ComponentTextSearchQueryFactory.java':[\n+177,\n+178,\n+179,\n+180,\n+181,\n+],", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMwMzk5OQ=="}, "originalCommit": {"oid": "83946a9be619d7b6da9cb237ac3c4a9632c6073f"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3871, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}