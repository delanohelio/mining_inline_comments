{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4NjY1MTk2", "number": 3054, "title": "SONARJAVA-3416 Rule S5846: Empty lines should not be tested with regex MULTILINE flag", "bodyText": "", "createdAt": "2020-06-23T15:55:37Z", "url": "https://github.com/SonarSource/sonar-java/pull/3054", "merged": true, "mergeCommit": {"oid": "09fa63669cfda73118c340f8412f128f23f4802d"}, "closed": true, "closedAt": "2020-06-30T07:46:29Z", "author": {"login": "quentin-jaquier-sonarsource"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcuHtDwgBqjM0NzM2OTU5MTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwBpvwgFqTQzOTE4MjM3NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c7e4ab0633bbc115545bf130f04f285a2bf3676a", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/c7e4ab0633bbc115545bf130f04f285a2bf3676a", "committedDate": "2020-06-23T15:48:07Z", "message": "SONARJAVA-3416 support String replaceX"}, "afterCommit": {"oid": "2b7a132e29fdcd1755e3733c9483accf166dac4e", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/2b7a132e29fdcd1755e3733c9483accf166dac4e", "committedDate": "2020-06-23T16:02:57Z", "message": "SONARJAVA-3416 support String replaceX"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2NzY1OTUz", "url": "https://github.com/SonarSource/sonar-java/pull/3054#pullrequestreview-436765953", "createdAt": "2020-06-24T15:33:01Z", "commit": {"oid": "2b7a132e29fdcd1755e3733c9483accf166dac4e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTozMzowMVrOGoXsbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjoxOToyNlrOGoZkTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk4NDQzMA==", "bodyText": "This misses cases where the flag is set slightly differently (e.g. (?m:^$)) or other flags are set (e.g. (?mi)^$).", "url": "https://github.com/SonarSource/sonar-java/pull/3054#discussion_r444984430", "createdAt": "2020-06-24T15:33:01Z", "author": {"login": "sebastian-hungerecker-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/regex/EmptyLineRegexCheck.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.regex;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.helpers.MethodTreeUtils;\n+import org.sonar.java.model.LiteralUtils;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.LiteralTree;\n+import org.sonar.plugins.java.api.tree.MemberSelectExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.ParenthesizedTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+import org.sonar.plugins.java.api.tree.VariableTree;\n+\n+@Rule(key = \"S5846\")\n+public class EmptyLineRegexCheck extends IssuableSubscriptionVisitor {\n+  private static final String MESSAGE = \"Remove MULTILINE mode or change the regex.\";\n+\n+  private static final String JAVA_LANG_STRING = \"java.lang.String\";\n+  private static final String JAVA_UTIL_PATTERN = \"java.util.regex.Pattern\";\n+\n+  private static final String EMPTY_LINE_REGEX = \"^$\";\n+  private static final String EMPTY_LINE_MULTILINE_REGEX = \"(?m)^$\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b7a132e29fdcd1755e3733c9483accf166dac4e"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAxMzA0NQ==", "bodyText": "This won't correctly identify the flag if multiple flags are used (Pattern.compile(bla, Pattern.MULTILINE | Patter.COMMENT). As it turns out, this is currently broken anyway, but I'm about to submit a PR that makes AbstractRegexCheck correctly handle ORed flags like that.", "url": "https://github.com/SonarSource/sonar-java/pull/3054#discussion_r445013045", "createdAt": "2020-06-24T16:16:09Z", "author": {"login": "sebastian-hungerecker-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/regex/EmptyLineRegexCheck.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.regex;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.helpers.MethodTreeUtils;\n+import org.sonar.java.model.LiteralUtils;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.LiteralTree;\n+import org.sonar.plugins.java.api.tree.MemberSelectExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.ParenthesizedTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+import org.sonar.plugins.java.api.tree.VariableTree;\n+\n+@Rule(key = \"S5846\")\n+public class EmptyLineRegexCheck extends IssuableSubscriptionVisitor {\n+  private static final String MESSAGE = \"Remove MULTILINE mode or change the regex.\";\n+\n+  private static final String JAVA_LANG_STRING = \"java.lang.String\";\n+  private static final String JAVA_UTIL_PATTERN = \"java.util.regex.Pattern\";\n+\n+  private static final String EMPTY_LINE_REGEX = \"^$\";\n+  private static final String EMPTY_LINE_MULTILINE_REGEX = \"(?m)^$\";\n+\n+  private static final MethodMatchers STRING_REPLACE = MethodMatchers.create()\n+    .ofTypes(JAVA_LANG_STRING)\n+    .names(\"replaceAll\", \"replaceFirst\")\n+    .addParametersMatcher(JAVA_LANG_STRING, JAVA_LANG_STRING)\n+    .build();\n+\n+  private static final MethodMatchers PATTERN_COMPILE = MethodMatchers.create()\n+    .ofTypes(JAVA_UTIL_PATTERN)\n+    .names(\"compile\")\n+    .addParametersMatcher(JAVA_LANG_STRING)\n+    .addParametersMatcher(JAVA_LANG_STRING, \"int\")\n+    .build();\n+\n+  private static final MethodMatchers PATTERN_MATCHER = MethodMatchers.create()\n+    .ofTypes(JAVA_UTIL_PATTERN)\n+    .names(\"matcher\")\n+    .addParametersMatcher(\"java.lang.CharSequence\")\n+    .build();\n+\n+  private static final MethodMatchers PATTERN_FIND = MethodMatchers.create()\n+    .ofTypes(\"java.util.regex.Matcher\")\n+    .names(\"find\")\n+    .addWithoutParametersMatcher()\n+    .build();\n+\n+  private static final MethodMatchers STRING_IS_EMPTY = MethodMatchers.create()\n+    .ofTypes(JAVA_LANG_STRING)\n+    .names(\"isEmpty\")\n+    .addWithoutParametersMatcher()\n+    .build();\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.METHOD_INVOCATION);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    MethodInvocationTree mit = (MethodInvocationTree) tree;\n+    if (PATTERN_COMPILE.matches(mit)) {\n+      checkPatternCompile(mit);\n+    } else if (STRING_REPLACE.matches(mit)) {\n+      checkStringReplace(mit);\n+    }\n+  }\n+\n+  private void checkPatternCompile(MethodInvocationTree mit) {\n+    ExpressionTree firstArgument = mit.arguments().get(0);\n+\n+    if (isEmptyLineMultilineRegex(firstArgument)) {\n+      reportIfUsedOnEmpty(mit, firstArgument);\n+    } else if (mit.arguments().size() == 2) {\n+      ExpressionTree secondArgument = mit.arguments().get(1);\n+      if (isEmptyLineRegex(firstArgument) && isMultilineFlag(secondArgument)) {\n+        reportIfUsedOnEmpty(mit, secondArgument);\n+      }\n+    }\n+  }\n+\n+  private void checkStringReplace(MethodInvocationTree mit) {\n+    ExpressionTree firstArgument = mit.arguments().get(0);\n+    ExpressionTree methodSelect = mit.methodSelect();\n+    if (isEmptyLineMultilineRegex(firstArgument)\n+    && methodSelect.is(Tree.Kind.MEMBER_SELECT)\n+    && canBeEmpty(((MemberSelectExpressionTree) methodSelect).expression())) {\n+      reportIssue(firstArgument, MESSAGE);\n+    }\n+  }\n+\n+  private static boolean isEmptyLineMultilineRegex(ExpressionTree regexArgument) {\n+    return regexArgument.asConstant(String.class).filter(EMPTY_LINE_MULTILINE_REGEX::equals).isPresent();\n+  }\n+\n+  private static boolean isEmptyLineRegex(ExpressionTree regexArgument) {\n+    return regexArgument.asConstant(String.class).filter(EMPTY_LINE_REGEX::equals).isPresent();\n+  }\n+\n+  private static boolean isMultilineFlag(ExpressionTree flag) {\n+    if (flag.is(Tree.Kind.MEMBER_SELECT)) {\n+      MemberSelectExpressionTree memberSelect = (MemberSelectExpressionTree) flag;\n+      return memberSelect.expression().symbolType().isSubtypeOf(JAVA_UTIL_PATTERN)\n+        && \"MULTILINE\".equals(memberSelect.identifier().name());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b7a132e29fdcd1755e3733c9483accf166dac4e"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAxNTExOQ==", "bodyText": "Comparing strings like this also won't correctly handle the (?x) or Pattern.COMMENT flag that makes whitespace and comments be ignored inside the regex (i.e. something like Pattern.compile(\"(?mx)  ^    $\") or Pattern.compile(\" ^    $\", Pattern.MULTILINE | Pattern.COMMENT). Going through the RegexParser will take care of ignoring whitespace and comments when that flag is set.", "url": "https://github.com/SonarSource/sonar-java/pull/3054#discussion_r445015119", "createdAt": "2020-06-24T16:19:26Z", "author": {"login": "sebastian-hungerecker-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/regex/EmptyLineRegexCheck.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.regex;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.helpers.MethodTreeUtils;\n+import org.sonar.java.model.LiteralUtils;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.LiteralTree;\n+import org.sonar.plugins.java.api.tree.MemberSelectExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.ParenthesizedTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+import org.sonar.plugins.java.api.tree.VariableTree;\n+\n+@Rule(key = \"S5846\")\n+public class EmptyLineRegexCheck extends IssuableSubscriptionVisitor {\n+  private static final String MESSAGE = \"Remove MULTILINE mode or change the regex.\";\n+\n+  private static final String JAVA_LANG_STRING = \"java.lang.String\";\n+  private static final String JAVA_UTIL_PATTERN = \"java.util.regex.Pattern\";\n+\n+  private static final String EMPTY_LINE_REGEX = \"^$\";\n+  private static final String EMPTY_LINE_MULTILINE_REGEX = \"(?m)^$\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk4NDQzMA=="}, "originalCommit": {"oid": "2b7a132e29fdcd1755e3733c9483accf166dac4e"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad47e145c53e86fa6f7692a47d3c350d541e44b3", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/ad47e145c53e86fa6f7692a47d3c350d541e44b3", "committedDate": "2020-06-25T07:54:16Z", "message": "SONARJAVA-3416 Rule S5846: Empty lines should not be tested with regex MULTILINE flag"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cac029aa06f2afd4c24db38a06e3a35481bfefff", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/cac029aa06f2afd4c24db38a06e3a35481bfefff", "committedDate": "2020-06-25T07:54:16Z", "message": "SONARJAVA-3416 support String replaceX"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2b7a132e29fdcd1755e3733c9483accf166dac4e", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/2b7a132e29fdcd1755e3733c9483accf166dac4e", "committedDate": "2020-06-23T16:02:57Z", "message": "SONARJAVA-3416 support String replaceX"}, "afterCommit": {"oid": "4c47cc882cab807c656db00aadc03f7f6d9ab45e", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/4c47cc882cab807c656db00aadc03f7f6d9ab45e", "committedDate": "2020-06-26T14:05:52Z", "message": "Use regex parser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db996dd66acd85989bc6586c063b7111c9b8af64", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/db996dd66acd85989bc6586c063b7111c9b8af64", "committedDate": "2020-06-26T14:20:28Z", "message": "Use regex parser"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4c47cc882cab807c656db00aadc03f7f6d9ab45e", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/4c47cc882cab807c656db00aadc03f7f6d9ab45e", "committedDate": "2020-06-26T14:05:52Z", "message": "Use regex parser"}, "afterCommit": {"oid": "db996dd66acd85989bc6586c063b7111c9b8af64", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/db996dd66acd85989bc6586c063b7111c9b8af64", "committedDate": "2020-06-26T14:20:28Z", "message": "Use regex parser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c75e2a97c031750af90b2b08a41e4917ed56924", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/5c75e2a97c031750af90b2b08a41e4917ed56924", "committedDate": "2020-06-29T14:03:45Z", "message": "Correctly support groups"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5MTgyMzc0", "url": "https://github.com/SonarSource/sonar-java/pull/3054#pullrequestreview-439182374", "createdAt": "2020-06-29T14:09:57Z", "commit": {"oid": "5c75e2a97c031750af90b2b08a41e4917ed56924"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1640, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}