{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0NjUzMjk3", "number": 2891, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwOTo1ODozMVrODr_w8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNzoxOToxOFrODsKJfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDYwMDgxOnYy", "diffSide": "RIGHT", "path": "java-frontend/src/main/java/org/sonar/plugins/java/api/semantic/Type.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwOTo1ODozMVrOF8qSrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwOTo1ODozMVrOF8qSrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE1MTc4OQ==", "bodyText": "@since missing here and in other places.", "url": "https://github.com/SonarSource/sonar-java/pull/2891#discussion_r399151789", "createdAt": "2020-03-27T09:58:31Z", "author": {"login": "Godin"}, "path": "java-frontend/src/main/java/org/sonar/plugins/java/api/semantic/Type.java", "diffHunk": "@@ -169,7 +171,25 @@\n      * @return type of an element.\n      */\n     Type elementType();\n-\n   }\n \n+  /**\n+   * Check if the current type is a parameterized type or not.\n+   * A parameterized type can be casted to a {@link ParameterizedType}\n+   *\n+   * @return true in case of Generic and Parameterized types", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "134b1bd1465474ad4560c7bc19339d93924b0469"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDYwNDA1OnYy", "diffSide": "RIGHT", "path": "java-frontend/src/main/java/org/sonar/plugins/java/api/semantic/Type.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwOTo1OToyMlrOF8qUqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwOTo1OToyMlrOF8qUqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE1MjI5OA==", "bodyText": "As discussed - let's get rid of addition of a new interface.", "url": "https://github.com/SonarSource/sonar-java/pull/2891#discussion_r399152298", "createdAt": "2020-03-27T09:59:22Z", "author": {"login": "Godin"}, "path": "java-frontend/src/main/java/org/sonar/plugins/java/api/semantic/Type.java", "diffHunk": "@@ -169,7 +171,25 @@\n      * @return type of an element.\n      */\n     Type elementType();\n-\n   }\n \n+  /**\n+   * Check if the current type is a parameterized type or not.\n+   * A parameterized type can be casted to a {@link ParameterizedType}\n+   *\n+   * @return true in case of Generic and Parameterized types\n+   */\n+  boolean isParameterized();\n+\n+  /**\n+   * Type expressing parameterized type\n+   */\n+  interface ParameterizedType extends Type {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "134b1bd1465474ad4560c7bc19339d93924b0469"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDYyNjcxOnYy", "diffSide": "RIGHT", "path": "java-frontend/src/main/java/org/sonar/java/model/JType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMDowNjoyOFrOF8qjYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMDowNjoyOFrOF8qjYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE1NjA2Ng==", "bodyText": "Let's add a comment like in JSymbol\n/**\n * Cache for {@link #typeArguments()}.\n **/", "url": "https://github.com/SonarSource/sonar-java/pull/2891#discussion_r399156066", "createdAt": "2020-03-27T10:06:28Z", "author": {"login": "Godin"}, "path": "java-frontend/src/main/java/org/sonar/java/model/JType.java", "diffHunk": "@@ -25,14 +25,16 @@\n \n import javax.annotation.Nullable;\n import java.util.Arrays;\n+import java.util.List;\n import java.util.Objects;\n \n-final class JType implements Type, Type.ArrayType {\n+final class JType implements Type, Type.ArrayType, Type.ParameterizedType {\n \n   final JSema sema;\n   final ITypeBinding typeBinding;\n \n   private final String fullyQualifiedName;\n+  private List<Type> typeArguments;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "134b1bd1465474ad4560c7bc19339d93924b0469"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDYzMTQyOnYy", "diffSide": "RIGHT", "path": "java-frontend/src/main/java/org/sonar/java/model/JType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMDowNzo1MVrOF8qmYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMDowNzo1MVrOF8qmYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE1NjgzMg==", "bodyText": "Let's extract the body of if into a method convertTypeArguments.", "url": "https://github.com/SonarSource/sonar-java/pull/2891#discussion_r399156832", "createdAt": "2020-03-27T10:07:51Z", "author": {"login": "Godin"}, "path": "java-frontend/src/main/java/org/sonar/java/model/JType.java", "diffHunk": "@@ -224,4 +226,24 @@ private static boolean isParameterizedOrGeneric(ITypeBinding typeBinding) {\n     return typeBinding.isParameterizedType() || typeBinding.isGenericType();\n   }\n \n+  @Override\n+  public boolean isParameterized() {\n+    return typeBinding.isParameterizedType()\n+      // when diamond operator is not fully resolved by ECJ, there is 0 typeArguments, while ECJ\n+      // knows it is a Parameterized Type\n+      && typeBinding.getTypeArguments().length > 0;\n+  }\n+\n+  @Override\n+  public List<Type> typeArguments() {\n+    if (typeArguments == null) {\n+      ITypeBinding[] typeArgs = typeBinding.getTypeArguments();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "134b1bd1465474ad4560c7bc19339d93924b0469"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDcwNzEzOnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/CollectionInappropriateCallsCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMDoyODo0MlrOF8rUWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMDoyODo0MlrOF8rUWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE2ODYwMw==", "bodyText": "Removal of Type.ParameterizedType allows removal of this method.", "url": "https://github.com/SonarSource/sonar-java/pull/2891#discussion_r399168603", "createdAt": "2020-03-27T10:28:42Z", "author": {"login": "Godin"}, "path": "java-checks/src/main/java/org/sonar/java/checks/CollectionInappropriateCallsCheck.java", "diffHunk": "@@ -121,14 +121,21 @@ private static String message(Type actualMethodType, Type checkedMethodType, Typ\n   }\n \n   private static String typeNameWithParameters(Type type) {\n-    if (JUtils.isParametrized(type)) {\n-      return type.name() + JUtils.typeArguments(type).stream()\n+    if (type.isParameterized()) {\n+      return type.name() + ((Type.ParameterizedType) type).typeArguments().stream()\n         .map(Type::name)\n         .collect(Collectors.joining(\", \", \"<\", \">\"));\n     }\n     return type.name();\n   }\n \n+  private static List<Type> typeArguments(Type type) {\n+    if (type.isParameterized()) {\n+      return ((Type.ParameterizedType) type).typeArguments();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "134b1bd1465474ad4560c7bc19339d93924b0469"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjI4ODUyOnYy", "diffSide": "RIGHT", "path": "java-frontend/src/main/java/org/sonar/plugins/java/api/semantic/Type.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNzoxNToyNlrOF86ooA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNzoxNToyNlrOF86ooA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQxOTU1Mg==", "bodyText": "ParameterizedType was removed \ud83d\ude09", "url": "https://github.com/SonarSource/sonar-java/pull/2891#discussion_r399419552", "createdAt": "2020-03-27T17:15:26Z", "author": {"login": "Godin"}, "path": "java-frontend/src/main/java/org/sonar/plugins/java/api/semantic/Type.java", "diffHunk": "@@ -159,6 +161,25 @@\n    */\n   Type erasure();\n \n+  /**\n+   * Check if the current type is a parameterized type or not.\n+   * A parameterized type can be casted to a {@link ParameterizedType}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae9d3cc04891bf87e592d9bafd0e28911c1b9620"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjMwMjA0OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/CollectionInappropriateCallsCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNzoxOToxOFrOF86xUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNzoxOToxOFrOF86xUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQyMTc3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static Type getTypeArgumentAt(Type parametrizedType, int parametrizedTypeIndex) {\n          \n          \n            \n              private static Type getTypeArgumentAt(Type type, int index) {", "url": "https://github.com/SonarSource/sonar-java/pull/2891#discussion_r399421778", "createdAt": "2020-03-27T17:19:18Z", "author": {"login": "Godin"}, "path": "java-checks/src/main/java/org/sonar/java/checks/CollectionInappropriateCallsCheck.java", "diffHunk": "@@ -145,8 +145,8 @@ private static Type getMethodOwnerType(MethodInvocationTree mit) {\n   }\n \n   private static Type getTypeArgumentAt(Type parametrizedType, int parametrizedTypeIndex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae9d3cc04891bf87e592d9bafd0e28911c1b9620"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4099, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}