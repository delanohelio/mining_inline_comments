{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwMjIzMDEx", "number": 2925, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODoxODoxMFrOD3hfGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMjowOTozMVrOD4A8Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTQ2OTA0OnYy", "diffSide": "RIGHT", "path": "java-frontend/src/main/java/org/sonar/java/model/GeneratedFile.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODoxODoxMFrOGN0ZDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMDo0ODo0MlrOGOQaHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0MzA1Mw==", "bodyText": "We can maybe avoid looking up the same lineFileId for every line by having just a check of the difference of lineInfo.lineFileId with the previous one as in most cases (if not all) we should not have a difference.", "url": "https://github.com/SonarSource/sonar-java/pull/2925#discussion_r417143053", "createdAt": "2020-04-29T08:18:10Z", "author": {"login": "benzonico"}, "path": "java-frontend/src/main/java/org/sonar/java/model/GeneratedFile.java", "diffHunk": "@@ -80,21 +81,26 @@ public void addSmap(SmapFile smap) {\n \n     final Map<Integer, Location> lines = new HashMap<>();\n \n-    private SourceMapImpl() {\n+    private SourceMapImpl(Function<Path, Optional<InputFile>> fileResolver) {\n       for (SmapFile sm : smapFiles) {\n         for (SmapFile.LineInfo lineInfo : sm.getLineSection()) {\n-          for (int i = 0; i < lineInfo.repeatCount; i++) {\n-            int inputLine = lineInfo.inputStartLine + i;\n-            Path inputFile = sm.getUriRoot().resolve(sm.getFileSection().get(lineInfo.lineFileId).sourcePath);\n-            LocationImpl location = new LocationImpl(inputFile, inputLine, inputLine);\n-            int outputStart = lineInfo.outputStartLine + (i * lineInfo.outputLineIncrement);\n-            int outputEnd = lineInfo.outputStartLine + ((i + 1) * lineInfo.outputLineIncrement) - 1;\n-            // when outputLineIncrement == 0, end will be less than start (looks like bug in spec)\n-            outputEnd = max(outputStart, outputEnd);\n-            for (int j = outputStart; j <= outputEnd; j++) {\n-              lines.merge(j, location, LocationImpl::mergeLocations);\n-            }\n-          }\n+          Path sourcePath = sm.getUriRoot().resolve(sm.getFileSection().get(lineInfo.lineFileId).sourcePath);\n+          Optional<InputFile> inputFile = fileResolver.apply(sourcePath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdfe88681b44952fbf82001829597db91e2dd8fd"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYwMjA3OQ==", "bodyText": "in fact I had a look into Jasper code and it seems that 1 JSP always maps to single Java file, so this was unnecessary. I removed the change and simplified this code.", "url": "https://github.com/SonarSource/sonar-java/pull/2925#discussion_r417602079", "createdAt": "2020-04-29T20:48:42Z", "author": {"login": "saberduck"}, "path": "java-frontend/src/main/java/org/sonar/java/model/GeneratedFile.java", "diffHunk": "@@ -80,21 +81,26 @@ public void addSmap(SmapFile smap) {\n \n     final Map<Integer, Location> lines = new HashMap<>();\n \n-    private SourceMapImpl() {\n+    private SourceMapImpl(Function<Path, Optional<InputFile>> fileResolver) {\n       for (SmapFile sm : smapFiles) {\n         for (SmapFile.LineInfo lineInfo : sm.getLineSection()) {\n-          for (int i = 0; i < lineInfo.repeatCount; i++) {\n-            int inputLine = lineInfo.inputStartLine + i;\n-            Path inputFile = sm.getUriRoot().resolve(sm.getFileSection().get(lineInfo.lineFileId).sourcePath);\n-            LocationImpl location = new LocationImpl(inputFile, inputLine, inputLine);\n-            int outputStart = lineInfo.outputStartLine + (i * lineInfo.outputLineIncrement);\n-            int outputEnd = lineInfo.outputStartLine + ((i + 1) * lineInfo.outputLineIncrement) - 1;\n-            // when outputLineIncrement == 0, end will be less than start (looks like bug in spec)\n-            outputEnd = max(outputStart, outputEnd);\n-            for (int j = outputStart; j <= outputEnd; j++) {\n-              lines.merge(j, location, LocationImpl::mergeLocations);\n-            }\n-          }\n+          Path sourcePath = sm.getUriRoot().resolve(sm.getFileSection().get(lineInfo.lineFileId).sourcePath);\n+          Optional<InputFile> inputFile = fileResolver.apply(sourcePath);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0MzA1Mw=="}, "originalCommit": {"oid": "cdfe88681b44952fbf82001829597db91e2dd8fd"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMDYyMjQzOnYy", "diffSide": "RIGHT", "path": "java-frontend/src/main/java/org/sonar/java/model/GeneratedFile.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMjowOTozMVrOGOmYAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMjowOTozMVrOGOmYAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk2MTk4NQ==", "bodyText": "This should not be annotated with @Nullable. This can not happen in production, only in tests.", "url": "https://github.com/SonarSource/sonar-java/pull/2925#discussion_r417961985", "createdAt": "2020-04-30T12:09:31Z", "author": {"login": "m-g-sonar"}, "path": "java-frontend/src/main/java/org/sonar/java/model/GeneratedFile.java", "diffHunk": "@@ -48,17 +47,17 @@\n \n public class GeneratedFile implements InputFile {\n \n-  private static final Logger LOG = Loggers.get(GeneratedFile.class);\n-\n   private final Path path;\n \n   @VisibleForTesting\n   final List<SmapFile> smapFiles = new ArrayList<>();\n+  private final InputFile jspSourceFile;\n \n   private SourceMap sourceMap;\n \n-  public GeneratedFile(Path path) {\n+  public GeneratedFile(Path path, @Nullable InputFile jspSourceFile) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9daf8b82ee4493c60218c2d249a664384c39aa9d"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4125, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}