{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxOTIxMTU5", "number": 3359, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNTo1ODowOVrOFGx3lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNjowNDoyMVrOFHP0cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNjUyODIxOnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/SynchronizationOnStringOrBoxedCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNTo1ODowOVrOIH8gAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNTo1ODowOVrOIH8gAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIwMjE3Ng==", "bodyText": "The idea is to check that the expression used in synchronized() is either call to List.of() Set.of()... or variable/field initialized with these methods.\nAs far as copmpile-time type is List it's impossible to check wether it's ListN, SetN or MapN in Runtime.", "url": "https://github.com/SonarSource/sonar-java/pull/3359#discussion_r545202176", "createdAt": "2020-12-17T15:58:09Z", "author": {"login": "margarita-nedzelska-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/SynchronizationOnStringOrBoxedCheck.java", "diffHunk": "@@ -52,17 +89,29 @@\n   @Override\n   public void visitNode(Tree tree) {\n     SynchronizedStatementTree syncStatement = (SynchronizedStatementTree) tree;\n-    Type expressionType = syncStatement.expression().symbolType();\n-    if (expressionType.isPrimitive() || isForbiddenType(expressionType)) {\n-      reportIssue(syncStatement.expression(), \"Synchronize on a new \\\"Object\\\" instead.\");\n+    ExpressionTree expression = syncStatement.expression();\n+    Type expressionType = expression.symbolType();\n+    if (expressionType.isPrimitive() || isForbiddenType(expressionType) || isInitializedWithImmutable(expression)) {\n+      reportIssue(expression, \"Synchronize on a new \\\"Object\\\" instead.\");\n     }\n   }\n \n   private static boolean isForbiddenType(Type expressionType) {\n-    for (String forbiddenType : FORBIDDEN_TYPES) {\n-      if (expressionType.is(forbiddenType)) {\n-        return true;\n-      }\n+    return FORBIDDEN_TYPES.contains(expressionType.fullyQualifiedName()) \n+      || FORBIDDEN_SUBTYPES.stream().anyMatch(expressionType::isSubtypeOf);\n+  }\n+  \n+  private static boolean isInitializedWithImmutable(ExpressionTree tree) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "728bf36d2b228c77c1e3012f9a9389c94c13b70b"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTQyNjA2OnYy", "diffSide": "LEFT", "path": "java-checks/src/main/resources/org/sonar/l10n/java/rules/java/S1860_java.html", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNjowMTo0MlrOIIo5qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNjowMTo0MlrOIIo5qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkyOTY0MA==", "bodyText": "Why removing the part about Boolean, it was making a good example, and does not prevent to have the rest", "url": "https://github.com/SonarSource/sonar-java/pull/3359#discussion_r545929640", "createdAt": "2020-12-18T16:01:42Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/resources/org/sonar/l10n/java/rules/java/S1860_java.html", "diffHunk": "@@ -1,13 +1,23 @@\n <p>Objects which are pooled and potentially reused should not be used for synchronization. If they are, it can cause unrelated threads to deadlock\n with unhelpful stacktraces. Specifically, <code>String</code> literals, and boxed primitives such as Integers should not be used as lock objects\n-because they are pooled and reused. The story is even worse for <code>Boolean</code> objects, because there are only two instances of", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "728bf36d2b228c77c1e3012f9a9389c94c13b70b"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTQzNTM4OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/resources/org/sonar/l10n/java/rules/java/S1860_java.html", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNjowNDoyMVrOIIo_Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNjowNDoyMVrOIIo_Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkzMTA5MA==", "bodyText": "I feel it would be valuable to mention JEP-390 in the description, or in the See section.", "url": "https://github.com/SonarSource/sonar-java/pull/3359#discussion_r545931090", "createdAt": "2020-12-18T16:04:21Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/resources/org/sonar/l10n/java/rules/java/S1860_java.html", "diffHunk": "@@ -1,13 +1,23 @@\n <p>Objects which are pooled and potentially reused should not be used for synchronization. If they are, it can cause unrelated threads to deadlock\n with unhelpful stacktraces. Specifically, <code>String</code> literals, and boxed primitives such as Integers should not be used as lock objects\n-because they are pooled and reused. The story is even worse for <code>Boolean</code> objects, because there are only two instances of\n-<code>Boolean</code>, <code>Boolean.TRUE</code> and <code>Boolean.FALSE</code> and every class that uses a Boolean will be referring to one of the\n-two.</p>\n+because they are pooled and reused.</p>\n+<p>Here is the list of types which shouldn't be used for synchronization:</p>\n+<ul>\n+  <li> The primitive wrapper classes in java.lang; </li>\n+  <li> The class java.lang.Runtime.Version; </li>\n+  <li> The \"optional\" classes in java.util: Optional, OptionalInt, OptionalLong, and OptionalDouble; </li>\n+  <li> Many classes in the java.time API: Instant, LocalDate, LocalTime, LocalDateTime, ZonedDateTime, ZoneId, OffsetTime, OffsetDateTime, ZoneOffset,\n+  Duration, Period, Year, YearMonth, and MonthDay, and, in java.time.chrono: MinguoDate, HijrahDate, JapaneseDate, and ThaiBuddhistDate; </li>\n+  <li> The interface java.lang.ProcessHandle and its implementation classes; </li>\n+  <li> The implementation classes of the collection factories in java.util: List.of, List.copyOf, Set.of, Set.copyOf, Map.of, Map.copyOf,\n+  Map.ofEntries, and Map.entry. </li>\n+</ul>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "728bf36d2b228c77c1e3012f9a9389c94c13b70b"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3744, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}