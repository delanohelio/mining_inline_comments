{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxODMzNDQ5", "number": 3277, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMDowNjozM1rOE58SkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMzo0MToyM1rOE6BVAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MTkyMDgxOnYy", "diffSide": "RIGHT", "path": "java-checks-test-sources/src/main/java/checks/regex/ImpossibleBoundariesCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMDowNjozM1rOH0taDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMDowNjozM1rOH0taDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAzMTk0OA==", "bodyText": "Added these two test cases", "url": "https://github.com/SonarSource/sonar-java/pull/3277#discussion_r525031948", "createdAt": "2020-11-17T10:06:33Z", "author": {"login": "sebastian-hungerecker-sonarsource"}, "path": "java-checks-test-sources/src/main/java/checks/regex/ImpossibleBoundariesCheck.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package checks.regex;\n+\n+public class ImpossibleBoundariesCheck {\n+\n+  void noncompliant(String str) {\n+    // Noncompliant@+1 [[sc=18;ec=19]] {{Remove or replace this boundary that will never match because it appears before mandatory input.}}\n+    str.matches(\"$[a-z]^\"); // Noncompliant [[sc=24;ec=25]] {{Remove or replace this boundary that will never match because it appears after mandatory input.}}\n+    str.matches(\"$[a-z]\"); // Noncompliant [[sc=18;ec=19]] {{Remove or replace this boundary that will never match because it appears before mandatory input.}}\n+    str.matches(\"$(abc)\"); // Noncompliant [[sc=18;ec=19]]\n+    str.matches(\"[a-z]^\"); // Noncompliant [[sc=23;ec=24]]\n+    str.matches(\"\\\\Z[a-z]\"); // Noncompliant [[sc=18;ec=21]]\n+    str.matches(\"\\\\z[a-z]\"); // Noncompliant [[sc=18;ec=21]]\n+    str.matches(\"[a-z]\\\\A\"); // Noncompliant [[sc=23;ec=26]]\n+    str.matches(\"($)a\"); // Noncompliant [[sc=19;ec=20]]\n+    str.matches(\"a$|$a\"); // Noncompliant [[sc=21;ec=22]]\n+    str.matches(\"^a|a^\"); // Noncompliant [[sc=22;ec=23]]\n+    str.matches(\"a(b|^)\"); // Noncompliant [[sc=22;ec=23]]\n+    str.matches(\"(?=abc^)\"); // Noncompliant [[sc=24;ec=25]]\n+    str.matches(\"abc(?=^abc)\"); // Noncompliant [[sc=24;ec=25]]\n+    str.matches(\"abc(?<=$abc)\"); // Noncompliant [[sc=25;ec=26]]\n+    str.matches(\"abc(?<=abc$)def\"); // Noncompliant [[sc=28;ec=29]]\n+    str.matches(\"(?:abc(X|^))*Y?\"); // Noncompliant [[sc=27;ec=28]]\n+  }\n+\n+  void compliant(String str) {\n+    str.matches(\"^[a-z]$\");\n+    str.matches(\"^$\");\n+    str.matches(\"^(?i)$\");\n+    str.matches(\"^$(?i)\");\n+    str.matches(\"^abc$|^def$\");\n+    str.matches(\"(?i)^abc$\");\n+    str.matches(\"()^abc$\");\n+    str.matches(\"^abc$()\");\n+    str.matches(\"^abc$\\\\b\");\n+    str.matches(\"(?=abc)^abc$\");\n+    str.matches(\"(?=^abc$)abc\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "706e7e240eba90c1757f64ade20b2c9dd66f5108"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MTkyNzE0OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/helpers/RegexTreeHelper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMDowODowOFrOH0td_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMDowODowOFrOH0td_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAzMjk1OQ==", "bodyText": "Removed backtracking edges from the list of traversable edges and added the ||-exception instead, as well as the comment above.", "url": "https://github.com/SonarSource/sonar-java/pull/3277#discussion_r525032959", "createdAt": "2020-11-17T10:08:08Z", "author": {"login": "sebastian-hungerecker-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/helpers/RegexTreeHelper.java", "diffHunk": "@@ -74,4 +79,29 @@ private static void addCurrentGrapheme(List<RegexCheck.RegexIssueLocation> resul\n     }\n   }\n \n+  public static boolean canReachWithoutConsumingInput(AutomatonState start, AutomatonState goal) {\n+    return canReachWithoutConsumingInput(start, goal, new HashSet<>());\n+  }\n+\n+  private static boolean canReachWithoutConsumingInput(AutomatonState start, AutomatonState goal, Set<AutomatonState> visited) {\n+    if (start == goal) {\n+      return true;\n+    }\n+    if (visited.contains(start)) {\n+      return false;\n+    }\n+    visited.add(start);\n+    for (AutomatonState successor : start.successors()) {\n+      // We don't generally consider elements behind backtracking edges to be 0-input reachable because what comes\n+      // after the edge won't directly follow what's before the edge. However, we do consider the end-of-lookahead\n+      // state itself reachable (but not any state behind it), so that we can check whether the end of the lookahead\n+      // can be reached without input from a given place within the lookahead.\n+      if ((successor.incomingTransitionType() == EPSILON && canReachWithoutConsumingInput(successor, goal, visited))\n+        || (successor instanceof EndOfLookaroundState && successor == goal)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "706e7e240eba90c1757f64ade20b2c9dd66f5108"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MTkyOTYzOnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/regex/ImpossibleBoundariesCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMDowODo0N1rOH0tffg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMDowODo0N1rOH0tffg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAzMzM0Mg==", "bodyText": "visitLookAround is new.", "url": "https://github.com/SonarSource/sonar-java/pull/3277#discussion_r525033342", "createdAt": "2020-11-17T10:08:47Z", "author": {"login": "sebastian-hungerecker-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/regex/ImpossibleBoundariesCheck.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.regex;\n+\n+import java.util.Collections;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.helpers.RegexTreeHelper;\n+import org.sonar.java.regex.RegexParseResult;\n+import org.sonar.java.regex.ast.AutomatonState;\n+import org.sonar.java.regex.ast.BoundaryTree;\n+import org.sonar.java.regex.ast.LookAroundTree;\n+import org.sonar.java.regex.ast.RegexBaseVisitor;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+\n+@Rule(key = \"S5996\")\n+public class ImpossibleBoundariesCheck extends AbstractRegexCheck {\n+\n+  private static final String MESSAGE = \"Remove or replace this boundary that will never match because it appears %s mandatory input.\";\n+\n+  @Override\n+  public void checkRegex(RegexParseResult regexForLiterals, MethodInvocationTree mit) {\n+    new ImpossibleBoundaryFinder().visit(regexForLiterals);\n+  }\n+\n+  private class ImpossibleBoundaryFinder extends RegexBaseVisitor {\n+\n+    private AutomatonState start;\n+    private AutomatonState end;\n+\n+    @Override\n+    public void visit(RegexParseResult regexParseResult) {\n+      start = regexParseResult.getStartState();\n+      end = regexParseResult.getFinalState();\n+      super.visit(regexParseResult);\n+    }\n+\n+    @Override\n+    public void visitLookAround(LookAroundTree tree) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "706e7e240eba90c1757f64ade20b2c9dd66f5108"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5Mjc0NjI1OnYy", "diffSide": "RIGHT", "path": "java-checks-test-sources/src/main/java/checks/regex/ImpossibleBoundariesCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMzo0MToyM1rOH01Rkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMzo0MToyM1rOH01Rkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE2MDg1MQ==", "bodyText": "We should add:\n// FP we raises an issue below because the usage of $ in the middle of a regex is suspicious and redundant\nstr.matches(\"(?m)^1$\\n2\"); // Noncompliant", "url": "https://github.com/SonarSource/sonar-java/pull/3277#discussion_r525160851", "createdAt": "2020-11-17T13:41:23Z", "author": {"login": "alban-auzeill"}, "path": "java-checks-test-sources/src/main/java/checks/regex/ImpossibleBoundariesCheck.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package checks.regex;\n+\n+public class ImpossibleBoundariesCheck {\n+\n+  void noncompliant(String str) {\n+    // Noncompliant@+1 [[sc=18;ec=19]] {{Remove or replace this boundary that will never match because it appears before mandatory input.}}\n+    str.matches(\"$[a-z]^\"); // Noncompliant [[sc=24;ec=25]] {{Remove or replace this boundary that will never match because it appears after mandatory input.}}\n+    str.matches(\"$[a-z]\"); // Noncompliant [[sc=18;ec=19]] {{Remove or replace this boundary that will never match because it appears before mandatory input.}}\n+    str.matches(\"$(abc)\"); // Noncompliant [[sc=18;ec=19]]\n+    str.matches(\"[a-z]^\"); // Noncompliant [[sc=23;ec=24]]\n+    str.matches(\"\\\\Z[a-z]\"); // Noncompliant [[sc=18;ec=21]]\n+    str.matches(\"\\\\z[a-z]\"); // Noncompliant [[sc=18;ec=21]]\n+    str.matches(\"[a-z]\\\\A\"); // Noncompliant [[sc=23;ec=26]]\n+    str.matches(\"($)a\"); // Noncompliant [[sc=19;ec=20]]\n+    str.matches(\"a$|$a\"); // Noncompliant [[sc=21;ec=22]]\n+    str.matches(\"^a|a^\"); // Noncompliant [[sc=22;ec=23]]\n+    str.matches(\"a(b|^)\"); // Noncompliant [[sc=22;ec=23]]\n+    str.matches(\"(?=abc^)\"); // Noncompliant [[sc=24;ec=25]]\n+    str.matches(\"abc(?=^abc)\"); // Noncompliant [[sc=24;ec=25]]\n+    str.matches(\"abc(?<=$abc)\"); // Noncompliant [[sc=25;ec=26]]\n+    str.matches(\"abc(?<=abc$)def\"); // Noncompliant [[sc=28;ec=29]]\n+    str.matches(\"(?:abc(X|^))*Y?\"); // Noncompliant [[sc=27;ec=28]]\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a37abcbb704648b5ec1e79070c85436b4e7f6342"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3820, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}