{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzMjYxNzA3", "number": 2967, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODozODo0M1rOD__azA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODo1MTo0N1rOD__tqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDI1OTMyOnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/tests/AssertionsWithoutMessageCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODozODo0NFrOGa_Lzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODozODo0NFrOGa_Lzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk1MTM3NQ==", "bodyText": "You can merge these two matchers.", "url": "https://github.com/SonarSource/sonar-java/pull/2967#discussion_r430951375", "createdAt": "2020-05-27T08:38:44Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/tests/AssertionsWithoutMessageCheck.java", "diffHunk": "@@ -51,33 +62,48 @@\n   @Override\n   protected MethodMatchers getMethodInvocationMatchers() {\n     return MethodMatchers.or(\n-      MethodMatchers.create().ofTypes(\"org.junit.jupiter.api.Assertions\").name(name -> name.startsWith(ASSERT) || name.equals(\"fail\")).withAnyParameters().build(),\n-      MethodMatchers.create().ofTypes(\"org.junit.Assert\").name(name -> name.startsWith(ASSERT) || name.equals(\"fail\")).withAnyParameters().build(),\n-      MethodMatchers.create().ofTypes(\"junit.framework.Assert\").name(name -> name.startsWith(ASSERT) || name.startsWith(\"fail\")).withAnyParameters().build(),\n-      MethodMatchers.create().ofTypes(\"org.fest.assertions.Fail\").name(name -> name.startsWith(\"fail\")).withAnyParameters().build(),\n-      MethodMatchers.create().ofSubTypes(GENERIC_ASSERT).anyName().withAnyParameters().build()\n+      MethodMatchers.create()\n+        .ofTypes(\"org.junit.jupiter.api.Assertions\", \"org.junit.Assert\", \"junit.framework.Assert\", \"org.fest.assertions.Fail\",\n+          \"org.assertj.core.api.Fail\")\n+        .name(name -> name.startsWith(ASSERT) || name.equals(\"fail\")).withAnyParameters().build(),\n+      MethodMatchers.create().ofSubTypes(FEST_GENERIC_ASSERT).anyName().withAnyParameters().build(),\n+      MethodMatchers.create().ofSubTypes(ASSERTJ_ABSTRACT_ASSERT).anyName().withAnyParameters().build()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea982d7b86ec7a98ec82f0203b5b07644756462b"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDMwNzYxOnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/tests/AssertionsWithoutMessageCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODo1MTo0N1rOGa_quQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODo1MTo0N1rOGa_quQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk1OTI4OQ==", "bodyText": "I feel we can find a better name for the parameter, to clearly show that it will match message methods.", "url": "https://github.com/SonarSource/sonar-java/pull/2967#discussion_r430959289", "createdAt": "2020-05-27T08:51:47Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/tests/AssertionsWithoutMessageCheck.java", "diffHunk": "@@ -128,19 +166,21 @@ private static boolean isAssertWithTwoParams(MethodInvocationTree mit) {\n   }\n \n   private static boolean isString(ExpressionTree expressionTree) {\n-    return expressionTree.symbolType().is(\"java.lang.String\");\n+    return expressionTree.symbolType().is(JAVA_LANG_STRING);\n   }\n \n-  private static class FestVisitor extends BaseTreeVisitor {\n+  private static class FestLikeVisitor extends BaseTreeVisitor {\n     boolean useDescription = false;\n+    private final MethodMatchers methodMatchers;\n+\n+    public FestLikeVisitor(MethodMatchers methodMatchers) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea982d7b86ec7a98ec82f0203b5b07644756462b"}, "originalPosition": 127}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4000, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}