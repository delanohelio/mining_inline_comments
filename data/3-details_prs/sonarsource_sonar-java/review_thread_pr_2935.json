{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzMzM2NTg4", "number": 2935, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMDoyMzozNlrOD5V1UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMDoyMzozNlrOD5V1UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDUzMTM2OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/AbstractJUnit5NotCompliantModifierChecker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMDoyMzozNlrOGQjMug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMzo0MjoyNVrOGQp_xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAwNzA5OA==", "bodyText": "Do we have some standardized way of constructing strings? I've previously seen a lot of String.format as well - is that choice up to personal preference?", "url": "https://github.com/SonarSource/sonar-java/pull/2935#discussion_r420007098", "createdAt": "2020-05-05T10:23:36Z", "author": {"login": "johann-beleites-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/AbstractJUnit5NotCompliantModifierChecker.java", "diffHunk": "@@ -55,18 +51,18 @@ public void visitNode(Tree tree) {\n       .filter(UnitTestUtils::hasJUnit5TestAnnotation)\n       .collect(Collectors.toList());\n \n-    testMethods.stream().map(MethodTree::modifiers).forEach(this::raiseIssueOnPresentAccessModifiers);\n+    testMethods.stream().map(MethodTree::modifiers).forEach(this::raiseIssueOnNotCompliantModifiers);\n \n     if (!testMethods.isEmpty()) {\n-      raiseIssueOnPresentAccessModifiers(classTree.modifiers());\n+      raiseIssueOnNotCompliantModifiers(classTree.modifiers());\n     }\n   }\n \n-  private void raiseIssueOnPresentAccessModifiers(ModifiersTree modifierTree) {\n+  private void raiseIssueOnNotCompliantModifiers(ModifiersTree modifierTree) {\n     modifierTree.modifiers().stream()\n-      .filter(modifierKeyword -> NON_COMPLIANT_MODIFIERS.contains(modifierKeyword.modifier()))\n-      .map(modifierKeywordTree -> (Tree) modifierKeywordTree)\n+      .filter(modifier -> isNotCompliant(modifier.modifier()))\n       .findFirst()\n-      .ifPresent(modifierKeyword -> reportIssue(modifierKeyword, \"Remove this access modifier\"));\n+      .ifPresent(modifier -> reportIssue(modifier, \"Remove this '\" + modifier.keyword().text() + \"' modifier.\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52acc6725c0733b6123267a02bdf27f7453aba87"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDExODQ2OQ==", "bodyText": "I didn't see any standard between + and String.format in our checks. A quick grep report 170 reportIssue with a + and 105 String.format. Personally, I use String.format when I want to share the message at several locations or because I want a specific format like %04X.", "url": "https://github.com/SonarSource/sonar-java/pull/2935#discussion_r420118469", "createdAt": "2020-05-05T13:42:25Z", "author": {"login": "alban-auzeill"}, "path": "java-checks/src/main/java/org/sonar/java/checks/AbstractJUnit5NotCompliantModifierChecker.java", "diffHunk": "@@ -55,18 +51,18 @@ public void visitNode(Tree tree) {\n       .filter(UnitTestUtils::hasJUnit5TestAnnotation)\n       .collect(Collectors.toList());\n \n-    testMethods.stream().map(MethodTree::modifiers).forEach(this::raiseIssueOnPresentAccessModifiers);\n+    testMethods.stream().map(MethodTree::modifiers).forEach(this::raiseIssueOnNotCompliantModifiers);\n \n     if (!testMethods.isEmpty()) {\n-      raiseIssueOnPresentAccessModifiers(classTree.modifiers());\n+      raiseIssueOnNotCompliantModifiers(classTree.modifiers());\n     }\n   }\n \n-  private void raiseIssueOnPresentAccessModifiers(ModifiersTree modifierTree) {\n+  private void raiseIssueOnNotCompliantModifiers(ModifiersTree modifierTree) {\n     modifierTree.modifiers().stream()\n-      .filter(modifierKeyword -> NON_COMPLIANT_MODIFIERS.contains(modifierKeyword.modifier()))\n-      .map(modifierKeywordTree -> (Tree) modifierKeywordTree)\n+      .filter(modifier -> isNotCompliant(modifier.modifier()))\n       .findFirst()\n-      .ifPresent(modifierKeyword -> reportIssue(modifierKeyword, \"Remove this access modifier\"));\n+      .ifPresent(modifier -> reportIssue(modifier, \"Remove this '\" + modifier.keyword().text() + \"' modifier.\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAwNzA5OA=="}, "originalCommit": {"oid": "52acc6725c0733b6123267a02bdf27f7453aba87"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4137, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}