{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyODc1NzA4", "number": 3215, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNToxOTo0NFrOEoIygA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNDo0NjowMFrOEolkjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTIyNDk2OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/security/UserEnumerationCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNToxOTo0NFrOHZDajA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNToxOTo0NFrOHZDajA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAzMjM5Ng==", "bodyText": "Why not making it private static final. I feel this is a constant. (same comment for the next one as well)", "url": "https://github.com/SonarSource/sonar-java/pull/3215#discussion_r496032396", "createdAt": "2020-09-28T15:19:44Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/security/UserEnumerationCheck.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.security;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.LiteralTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.NewClassTree;\n+import org.sonar.plugins.java.api.tree.ThrowStatementTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5804\")\n+public class UserEnumerationCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final String MESSAGE = \"Make sure allowing user enumeration is safe here.\";\n+  private static final String ABSTRACT_USER_DETAILS_AUTHENTICATION_PROVIDER = \"org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider\";\n+  private static final String USER_DETAILS_SERVICE = \"org.springframework.security.core.userdetails.UserDetailsService\";\n+  private static final String USERNAME_NOT_FOUND_EXCEPTION = \"org.springframework.security.core.userdetails.UsernameNotFoundException\";\n+  private static final String HIDE_USER_NOT_FOUND_EXCEPTIONS = \"setHideUserNotFoundExceptions\";\n+  private static final String LOAD_USER_BY_USERNAME = \"loadUserByUsername\";\n+  private static final String BOOLEAN = \"boolean\";\n+  private static final String STRING = \"java.lang.String\";\n+  private static final String THROWABLE = \"java.lang.Throwable\";\n+\n+  private final MethodMatchers setHideUserMatcher = MethodMatchers.create()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67587fb6e2cb869b483f03adde1de03c07fb4d80"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTI2MjY2OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/security/UserEnumerationCheck.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNToyNTowNVrOHZDxyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNTo1NTozN1rOHZFErg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAzODM0Nw==", "bodyText": "The tree includes the new keyword. I feel we can be slightly more precise and report on the expression only.\nI also wonder if we want to handle cases where we do not really own the exception, such as:\ntry { \n doSomethingThrowingUsernameNotFoundException();\n} catch (UsernameNotFoundException e) {\n  if (/* whatever test */) {\n    doSomething();\n  } else {\n   throw e; // would report here\n  }\n\n}", "url": "https://github.com/SonarSource/sonar-java/pull/3215#discussion_r496038347", "createdAt": "2020-09-28T15:25:05Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/security/UserEnumerationCheck.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.security;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.LiteralTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.NewClassTree;\n+import org.sonar.plugins.java.api.tree.ThrowStatementTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5804\")\n+public class UserEnumerationCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final String MESSAGE = \"Make sure allowing user enumeration is safe here.\";\n+  private static final String ABSTRACT_USER_DETAILS_AUTHENTICATION_PROVIDER = \"org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider\";\n+  private static final String USER_DETAILS_SERVICE = \"org.springframework.security.core.userdetails.UserDetailsService\";\n+  private static final String USERNAME_NOT_FOUND_EXCEPTION = \"org.springframework.security.core.userdetails.UsernameNotFoundException\";\n+  private static final String HIDE_USER_NOT_FOUND_EXCEPTIONS = \"setHideUserNotFoundExceptions\";\n+  private static final String LOAD_USER_BY_USERNAME = \"loadUserByUsername\";\n+  private static final String BOOLEAN = \"boolean\";\n+  private static final String STRING = \"java.lang.String\";\n+  private static final String THROWABLE = \"java.lang.Throwable\";\n+\n+  private final MethodMatchers setHideUserMatcher = MethodMatchers.create()\n+    .ofSubTypes(ABSTRACT_USER_DETAILS_AUTHENTICATION_PROVIDER)\n+    .names(HIDE_USER_NOT_FOUND_EXCEPTIONS)\n+    .addParametersMatcher(BOOLEAN)\n+    .build();\n+\n+  private final MethodMatchers loadUserMatcher = MethodMatchers.create()\n+    .ofSubTypes(USER_DETAILS_SERVICE)\n+    .names(LOAD_USER_BY_USERNAME)\n+    .addParametersMatcher(STRING)\n+    .build();\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Arrays.asList(Tree.Kind.METHOD_INVOCATION, Tree.Kind.THROW_STATEMENT);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    if (tree.is(Tree.Kind.THROW_STATEMENT)) {\n+      checkThrowUsernameNotFoundException(((ThrowStatementTree) tree));\n+      return;\n+    }\n+\n+    MethodInvocationTree methodInvocationTree = (MethodInvocationTree) tree;\n+    Arguments arguments = methodInvocationTree.arguments();\n+    if (arguments.isEmpty()){\n+      return;\n+    }\n+    ExpressionTree expression = arguments.get(0);\n+\n+    checkHiddenUserNotFoundException(methodInvocationTree, expression);\n+\n+    checkLoadUserArgUsedInExceptions(methodInvocationTree, expression);\n+  }\n+\n+  private void checkLoadUserArgUsedInExceptions(MethodInvocationTree methodInvocationTree, ExpressionTree expression) {\n+    if (loadUserMatcher.matches(methodInvocationTree) && expression.is(Tree.Kind.IDENTIFIER)) {\n+      IdentifierTree identifierTree = (IdentifierTree) expression;\n+      identifierTree.symbol().usages()\n+        .stream().filter(UserEnumerationCheck::checkParentIsThrowable)\n+        .forEach(value -> reportIssue(value, MESSAGE));\n+    }\n+  }\n+\n+  private void checkHiddenUserNotFoundException(MethodInvocationTree methodInvocationTree, ExpressionTree expression) {\n+    if (setHideUserMatcher.matches(methodInvocationTree) && isFalseLiteral(expression)) {\n+      reportIssue(methodInvocationTree, MESSAGE);\n+    }\n+  }\n+\n+  private void checkThrowUsernameNotFoundException(ThrowStatementTree tree) {\n+    if (tree.expression().symbolType().is(USERNAME_NOT_FOUND_EXCEPTION)) {\n+      reportIssue(tree, MESSAGE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67587fb6e2cb869b483f03adde1de03c07fb4d80"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA1OTU2Ng==", "bodyText": "I checked this case and it reports the issue if we're catching UsernameNotFoundException and throwing it again. To my mind, we should report here because from the code it's obvious that we will throw UsernameNotFoundException, which is tricky.", "url": "https://github.com/SonarSource/sonar-java/pull/3215#discussion_r496059566", "createdAt": "2020-09-28T15:55:37Z", "author": {"login": "margarita-nedzelska-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/security/UserEnumerationCheck.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.security;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.LiteralTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.NewClassTree;\n+import org.sonar.plugins.java.api.tree.ThrowStatementTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5804\")\n+public class UserEnumerationCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final String MESSAGE = \"Make sure allowing user enumeration is safe here.\";\n+  private static final String ABSTRACT_USER_DETAILS_AUTHENTICATION_PROVIDER = \"org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider\";\n+  private static final String USER_DETAILS_SERVICE = \"org.springframework.security.core.userdetails.UserDetailsService\";\n+  private static final String USERNAME_NOT_FOUND_EXCEPTION = \"org.springframework.security.core.userdetails.UsernameNotFoundException\";\n+  private static final String HIDE_USER_NOT_FOUND_EXCEPTIONS = \"setHideUserNotFoundExceptions\";\n+  private static final String LOAD_USER_BY_USERNAME = \"loadUserByUsername\";\n+  private static final String BOOLEAN = \"boolean\";\n+  private static final String STRING = \"java.lang.String\";\n+  private static final String THROWABLE = \"java.lang.Throwable\";\n+\n+  private final MethodMatchers setHideUserMatcher = MethodMatchers.create()\n+    .ofSubTypes(ABSTRACT_USER_DETAILS_AUTHENTICATION_PROVIDER)\n+    .names(HIDE_USER_NOT_FOUND_EXCEPTIONS)\n+    .addParametersMatcher(BOOLEAN)\n+    .build();\n+\n+  private final MethodMatchers loadUserMatcher = MethodMatchers.create()\n+    .ofSubTypes(USER_DETAILS_SERVICE)\n+    .names(LOAD_USER_BY_USERNAME)\n+    .addParametersMatcher(STRING)\n+    .build();\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Arrays.asList(Tree.Kind.METHOD_INVOCATION, Tree.Kind.THROW_STATEMENT);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    if (tree.is(Tree.Kind.THROW_STATEMENT)) {\n+      checkThrowUsernameNotFoundException(((ThrowStatementTree) tree));\n+      return;\n+    }\n+\n+    MethodInvocationTree methodInvocationTree = (MethodInvocationTree) tree;\n+    Arguments arguments = methodInvocationTree.arguments();\n+    if (arguments.isEmpty()){\n+      return;\n+    }\n+    ExpressionTree expression = arguments.get(0);\n+\n+    checkHiddenUserNotFoundException(methodInvocationTree, expression);\n+\n+    checkLoadUserArgUsedInExceptions(methodInvocationTree, expression);\n+  }\n+\n+  private void checkLoadUserArgUsedInExceptions(MethodInvocationTree methodInvocationTree, ExpressionTree expression) {\n+    if (loadUserMatcher.matches(methodInvocationTree) && expression.is(Tree.Kind.IDENTIFIER)) {\n+      IdentifierTree identifierTree = (IdentifierTree) expression;\n+      identifierTree.symbol().usages()\n+        .stream().filter(UserEnumerationCheck::checkParentIsThrowable)\n+        .forEach(value -> reportIssue(value, MESSAGE));\n+    }\n+  }\n+\n+  private void checkHiddenUserNotFoundException(MethodInvocationTree methodInvocationTree, ExpressionTree expression) {\n+    if (setHideUserMatcher.matches(methodInvocationTree) && isFalseLiteral(expression)) {\n+      reportIssue(methodInvocationTree, MESSAGE);\n+    }\n+  }\n+\n+  private void checkThrowUsernameNotFoundException(ThrowStatementTree tree) {\n+    if (tree.expression().symbolType().is(USERNAME_NOT_FOUND_EXCEPTION)) {\n+      reportIssue(tree, MESSAGE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAzODM0Nw=="}, "originalCommit": {"oid": "67587fb6e2cb869b483f03adde1de03c07fb4d80"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTI2OTQ1OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/security/UserEnumerationCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNToyNjozMlrOHZD2DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNToyNjozMlrOHZD2DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAzOTQzNg==", "bodyText": "According to the rule description, it should be authorized to throw such an exception if we are within the body of the loadUserByUsername method. I don't see check over this case, and it would therefore report FPs.", "url": "https://github.com/SonarSource/sonar-java/pull/3215#discussion_r496039436", "createdAt": "2020-09-28T15:26:32Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/security/UserEnumerationCheck.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.security;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.LiteralTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.NewClassTree;\n+import org.sonar.plugins.java.api.tree.ThrowStatementTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5804\")\n+public class UserEnumerationCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final String MESSAGE = \"Make sure allowing user enumeration is safe here.\";\n+  private static final String ABSTRACT_USER_DETAILS_AUTHENTICATION_PROVIDER = \"org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider\";\n+  private static final String USER_DETAILS_SERVICE = \"org.springframework.security.core.userdetails.UserDetailsService\";\n+  private static final String USERNAME_NOT_FOUND_EXCEPTION = \"org.springframework.security.core.userdetails.UsernameNotFoundException\";\n+  private static final String HIDE_USER_NOT_FOUND_EXCEPTIONS = \"setHideUserNotFoundExceptions\";\n+  private static final String LOAD_USER_BY_USERNAME = \"loadUserByUsername\";\n+  private static final String BOOLEAN = \"boolean\";\n+  private static final String STRING = \"java.lang.String\";\n+  private static final String THROWABLE = \"java.lang.Throwable\";\n+\n+  private final MethodMatchers setHideUserMatcher = MethodMatchers.create()\n+    .ofSubTypes(ABSTRACT_USER_DETAILS_AUTHENTICATION_PROVIDER)\n+    .names(HIDE_USER_NOT_FOUND_EXCEPTIONS)\n+    .addParametersMatcher(BOOLEAN)\n+    .build();\n+\n+  private final MethodMatchers loadUserMatcher = MethodMatchers.create()\n+    .ofSubTypes(USER_DETAILS_SERVICE)\n+    .names(LOAD_USER_BY_USERNAME)\n+    .addParametersMatcher(STRING)\n+    .build();\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Arrays.asList(Tree.Kind.METHOD_INVOCATION, Tree.Kind.THROW_STATEMENT);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    if (tree.is(Tree.Kind.THROW_STATEMENT)) {\n+      checkThrowUsernameNotFoundException(((ThrowStatementTree) tree));\n+      return;\n+    }\n+\n+    MethodInvocationTree methodInvocationTree = (MethodInvocationTree) tree;\n+    Arguments arguments = methodInvocationTree.arguments();\n+    if (arguments.isEmpty()){\n+      return;\n+    }\n+    ExpressionTree expression = arguments.get(0);\n+\n+    checkHiddenUserNotFoundException(methodInvocationTree, expression);\n+\n+    checkLoadUserArgUsedInExceptions(methodInvocationTree, expression);\n+  }\n+\n+  private void checkLoadUserArgUsedInExceptions(MethodInvocationTree methodInvocationTree, ExpressionTree expression) {\n+    if (loadUserMatcher.matches(methodInvocationTree) && expression.is(Tree.Kind.IDENTIFIER)) {\n+      IdentifierTree identifierTree = (IdentifierTree) expression;\n+      identifierTree.symbol().usages()\n+        .stream().filter(UserEnumerationCheck::checkParentIsThrowable)\n+        .forEach(value -> reportIssue(value, MESSAGE));\n+    }\n+  }\n+\n+  private void checkHiddenUserNotFoundException(MethodInvocationTree methodInvocationTree, ExpressionTree expression) {\n+    if (setHideUserMatcher.matches(methodInvocationTree) && isFalseLiteral(expression)) {\n+      reportIssue(methodInvocationTree, MESSAGE);\n+    }\n+  }\n+\n+  private void checkThrowUsernameNotFoundException(ThrowStatementTree tree) {\n+    if (tree.expression().symbolType().is(USERNAME_NOT_FOUND_EXCEPTION)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67587fb6e2cb869b483f03adde1de03c07fb4d80"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTI4NjA3OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/security/UserEnumerationCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNTozMDoxNlrOHZEA4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNTozMDoxNlrOHZEA4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA0MjIwOA==", "bodyText": "this can be simplified a bit to:\nif (current.is(Tree.Kind.NEW_CLASS) \n  && ((NewClassTree) current).symbolType().isSubtypeOf(THROWABLE)) {\n  return true;\n}", "url": "https://github.com/SonarSource/sonar-java/pull/3215#discussion_r496042208", "createdAt": "2020-09-28T15:30:16Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/security/UserEnumerationCheck.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.security;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.LiteralTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.NewClassTree;\n+import org.sonar.plugins.java.api.tree.ThrowStatementTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5804\")\n+public class UserEnumerationCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final String MESSAGE = \"Make sure allowing user enumeration is safe here.\";\n+  private static final String ABSTRACT_USER_DETAILS_AUTHENTICATION_PROVIDER = \"org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider\";\n+  private static final String USER_DETAILS_SERVICE = \"org.springframework.security.core.userdetails.UserDetailsService\";\n+  private static final String USERNAME_NOT_FOUND_EXCEPTION = \"org.springframework.security.core.userdetails.UsernameNotFoundException\";\n+  private static final String HIDE_USER_NOT_FOUND_EXCEPTIONS = \"setHideUserNotFoundExceptions\";\n+  private static final String LOAD_USER_BY_USERNAME = \"loadUserByUsername\";\n+  private static final String BOOLEAN = \"boolean\";\n+  private static final String STRING = \"java.lang.String\";\n+  private static final String THROWABLE = \"java.lang.Throwable\";\n+\n+  private final MethodMatchers setHideUserMatcher = MethodMatchers.create()\n+    .ofSubTypes(ABSTRACT_USER_DETAILS_AUTHENTICATION_PROVIDER)\n+    .names(HIDE_USER_NOT_FOUND_EXCEPTIONS)\n+    .addParametersMatcher(BOOLEAN)\n+    .build();\n+\n+  private final MethodMatchers loadUserMatcher = MethodMatchers.create()\n+    .ofSubTypes(USER_DETAILS_SERVICE)\n+    .names(LOAD_USER_BY_USERNAME)\n+    .addParametersMatcher(STRING)\n+    .build();\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Arrays.asList(Tree.Kind.METHOD_INVOCATION, Tree.Kind.THROW_STATEMENT);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    if (tree.is(Tree.Kind.THROW_STATEMENT)) {\n+      checkThrowUsernameNotFoundException(((ThrowStatementTree) tree));\n+      return;\n+    }\n+\n+    MethodInvocationTree methodInvocationTree = (MethodInvocationTree) tree;\n+    Arguments arguments = methodInvocationTree.arguments();\n+    if (arguments.isEmpty()){\n+      return;\n+    }\n+    ExpressionTree expression = arguments.get(0);\n+\n+    checkHiddenUserNotFoundException(methodInvocationTree, expression);\n+\n+    checkLoadUserArgUsedInExceptions(methodInvocationTree, expression);\n+  }\n+\n+  private void checkLoadUserArgUsedInExceptions(MethodInvocationTree methodInvocationTree, ExpressionTree expression) {\n+    if (loadUserMatcher.matches(methodInvocationTree) && expression.is(Tree.Kind.IDENTIFIER)) {\n+      IdentifierTree identifierTree = (IdentifierTree) expression;\n+      identifierTree.symbol().usages()\n+        .stream().filter(UserEnumerationCheck::checkParentIsThrowable)\n+        .forEach(value -> reportIssue(value, MESSAGE));\n+    }\n+  }\n+\n+  private void checkHiddenUserNotFoundException(MethodInvocationTree methodInvocationTree, ExpressionTree expression) {\n+    if (setHideUserMatcher.matches(methodInvocationTree) && isFalseLiteral(expression)) {\n+      reportIssue(methodInvocationTree, MESSAGE);\n+    }\n+  }\n+\n+  private void checkThrowUsernameNotFoundException(ThrowStatementTree tree) {\n+    if (tree.expression().symbolType().is(USERNAME_NOT_FOUND_EXCEPTION)) {\n+      reportIssue(tree, MESSAGE);\n+    }\n+  }\n+\n+  private static boolean isFalseLiteral(ExpressionTree expression) {\n+    return expression.is(Tree.Kind.BOOLEAN_LITERAL) && !Boolean.parseBoolean(((LiteralTree) expression).value());\n+  }\n+\n+  private static boolean checkParentIsThrowable(Tree tree) {\n+    Tree current = tree.parent();\n+    while (current instanceof ExpressionTree || current instanceof Arguments) {\n+      if (current.is(Tree.Kind.NEW_CLASS)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67587fb6e2cb869b483f03adde1de03c07fb4d80"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTI5NjMyOnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/security/UserEnumerationCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNTozMjozOFrOHZEHQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNTozMjozOFrOHZEHQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA0Mzg0Mw==", "bodyText": "What about using LiteralUtils.isFalse(tree) here?\nI also feel that we might be missing cases of constants, such as:\ndaoauth.setHideUserNotFoundExceptions(MY_CONSTANT);\n\nFrom an expressionTree, you can probably call asConstant(Boolean.class), and it might work.", "url": "https://github.com/SonarSource/sonar-java/pull/3215#discussion_r496043843", "createdAt": "2020-09-28T15:32:38Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/security/UserEnumerationCheck.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.security;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.LiteralTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.NewClassTree;\n+import org.sonar.plugins.java.api.tree.ThrowStatementTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5804\")\n+public class UserEnumerationCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final String MESSAGE = \"Make sure allowing user enumeration is safe here.\";\n+  private static final String ABSTRACT_USER_DETAILS_AUTHENTICATION_PROVIDER = \"org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider\";\n+  private static final String USER_DETAILS_SERVICE = \"org.springframework.security.core.userdetails.UserDetailsService\";\n+  private static final String USERNAME_NOT_FOUND_EXCEPTION = \"org.springframework.security.core.userdetails.UsernameNotFoundException\";\n+  private static final String HIDE_USER_NOT_FOUND_EXCEPTIONS = \"setHideUserNotFoundExceptions\";\n+  private static final String LOAD_USER_BY_USERNAME = \"loadUserByUsername\";\n+  private static final String BOOLEAN = \"boolean\";\n+  private static final String STRING = \"java.lang.String\";\n+  private static final String THROWABLE = \"java.lang.Throwable\";\n+\n+  private final MethodMatchers setHideUserMatcher = MethodMatchers.create()\n+    .ofSubTypes(ABSTRACT_USER_DETAILS_AUTHENTICATION_PROVIDER)\n+    .names(HIDE_USER_NOT_FOUND_EXCEPTIONS)\n+    .addParametersMatcher(BOOLEAN)\n+    .build();\n+\n+  private final MethodMatchers loadUserMatcher = MethodMatchers.create()\n+    .ofSubTypes(USER_DETAILS_SERVICE)\n+    .names(LOAD_USER_BY_USERNAME)\n+    .addParametersMatcher(STRING)\n+    .build();\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Arrays.asList(Tree.Kind.METHOD_INVOCATION, Tree.Kind.THROW_STATEMENT);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    if (tree.is(Tree.Kind.THROW_STATEMENT)) {\n+      checkThrowUsernameNotFoundException(((ThrowStatementTree) tree));\n+      return;\n+    }\n+\n+    MethodInvocationTree methodInvocationTree = (MethodInvocationTree) tree;\n+    Arguments arguments = methodInvocationTree.arguments();\n+    if (arguments.isEmpty()){\n+      return;\n+    }\n+    ExpressionTree expression = arguments.get(0);\n+\n+    checkHiddenUserNotFoundException(methodInvocationTree, expression);\n+\n+    checkLoadUserArgUsedInExceptions(methodInvocationTree, expression);\n+  }\n+\n+  private void checkLoadUserArgUsedInExceptions(MethodInvocationTree methodInvocationTree, ExpressionTree expression) {\n+    if (loadUserMatcher.matches(methodInvocationTree) && expression.is(Tree.Kind.IDENTIFIER)) {\n+      IdentifierTree identifierTree = (IdentifierTree) expression;\n+      identifierTree.symbol().usages()\n+        .stream().filter(UserEnumerationCheck::checkParentIsThrowable)\n+        .forEach(value -> reportIssue(value, MESSAGE));\n+    }\n+  }\n+\n+  private void checkHiddenUserNotFoundException(MethodInvocationTree methodInvocationTree, ExpressionTree expression) {\n+    if (setHideUserMatcher.matches(methodInvocationTree) && isFalseLiteral(expression)) {\n+      reportIssue(methodInvocationTree, MESSAGE);\n+    }\n+  }\n+\n+  private void checkThrowUsernameNotFoundException(ThrowStatementTree tree) {\n+    if (tree.expression().symbolType().is(USERNAME_NOT_FOUND_EXCEPTION)) {\n+      reportIssue(tree, MESSAGE);\n+    }\n+  }\n+\n+  private static boolean isFalseLiteral(ExpressionTree expression) {\n+    return expression.is(Tree.Kind.BOOLEAN_LITERAL) && !Boolean.parseBoolean(((LiteralTree) expression).value());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67587fb6e2cb869b483f03adde1de03c07fb4d80"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTI5Nzk2OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/security/UserEnumerationCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNTozMjo1NVrOHZEIMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNTozMjo1NVrOHZEIMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA0NDA4Mw==", "bodyText": "no need of extra space here.", "url": "https://github.com/SonarSource/sonar-java/pull/3215#discussion_r496044083", "createdAt": "2020-09-28T15:32:55Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/security/UserEnumerationCheck.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.security;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.LiteralTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.NewClassTree;\n+import org.sonar.plugins.java.api.tree.ThrowStatementTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5804\")\n+public class UserEnumerationCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final String MESSAGE = \"Make sure allowing user enumeration is safe here.\";\n+  private static final String ABSTRACT_USER_DETAILS_AUTHENTICATION_PROVIDER = \"org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider\";\n+  private static final String USER_DETAILS_SERVICE = \"org.springframework.security.core.userdetails.UserDetailsService\";\n+  private static final String USERNAME_NOT_FOUND_EXCEPTION = \"org.springframework.security.core.userdetails.UsernameNotFoundException\";\n+  private static final String HIDE_USER_NOT_FOUND_EXCEPTIONS = \"setHideUserNotFoundExceptions\";\n+  private static final String LOAD_USER_BY_USERNAME = \"loadUserByUsername\";\n+  private static final String BOOLEAN = \"boolean\";\n+  private static final String STRING = \"java.lang.String\";\n+  private static final String THROWABLE = \"java.lang.Throwable\";\n+\n+  private final MethodMatchers setHideUserMatcher = MethodMatchers.create()\n+    .ofSubTypes(ABSTRACT_USER_DETAILS_AUTHENTICATION_PROVIDER)\n+    .names(HIDE_USER_NOT_FOUND_EXCEPTIONS)\n+    .addParametersMatcher(BOOLEAN)\n+    .build();\n+\n+  private final MethodMatchers loadUserMatcher = MethodMatchers.create()\n+    .ofSubTypes(USER_DETAILS_SERVICE)\n+    .names(LOAD_USER_BY_USERNAME)\n+    .addParametersMatcher(STRING)\n+    .build();\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Arrays.asList(Tree.Kind.METHOD_INVOCATION, Tree.Kind.THROW_STATEMENT);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    if (tree.is(Tree.Kind.THROW_STATEMENT)) {\n+      checkThrowUsernameNotFoundException(((ThrowStatementTree) tree));\n+      return;\n+    }\n+\n+    MethodInvocationTree methodInvocationTree = (MethodInvocationTree) tree;\n+    Arguments arguments = methodInvocationTree.arguments();\n+    if (arguments.isEmpty()){\n+      return;\n+    }\n+    ExpressionTree expression = arguments.get(0);\n+\n+    checkHiddenUserNotFoundException(methodInvocationTree, expression);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67587fb6e2cb869b483f03adde1de03c07fb4d80"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTI5OTA1OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/security/UserEnumerationCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNTozMzoxMFrOHZEI4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNTozMzoxMFrOHZEI4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA0NDI1OA==", "bodyText": "why not calling it simply firstArgument ?", "url": "https://github.com/SonarSource/sonar-java/pull/3215#discussion_r496044258", "createdAt": "2020-09-28T15:33:10Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/security/UserEnumerationCheck.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.security;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.LiteralTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.NewClassTree;\n+import org.sonar.plugins.java.api.tree.ThrowStatementTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5804\")\n+public class UserEnumerationCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final String MESSAGE = \"Make sure allowing user enumeration is safe here.\";\n+  private static final String ABSTRACT_USER_DETAILS_AUTHENTICATION_PROVIDER = \"org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider\";\n+  private static final String USER_DETAILS_SERVICE = \"org.springframework.security.core.userdetails.UserDetailsService\";\n+  private static final String USERNAME_NOT_FOUND_EXCEPTION = \"org.springframework.security.core.userdetails.UsernameNotFoundException\";\n+  private static final String HIDE_USER_NOT_FOUND_EXCEPTIONS = \"setHideUserNotFoundExceptions\";\n+  private static final String LOAD_USER_BY_USERNAME = \"loadUserByUsername\";\n+  private static final String BOOLEAN = \"boolean\";\n+  private static final String STRING = \"java.lang.String\";\n+  private static final String THROWABLE = \"java.lang.Throwable\";\n+\n+  private final MethodMatchers setHideUserMatcher = MethodMatchers.create()\n+    .ofSubTypes(ABSTRACT_USER_DETAILS_AUTHENTICATION_PROVIDER)\n+    .names(HIDE_USER_NOT_FOUND_EXCEPTIONS)\n+    .addParametersMatcher(BOOLEAN)\n+    .build();\n+\n+  private final MethodMatchers loadUserMatcher = MethodMatchers.create()\n+    .ofSubTypes(USER_DETAILS_SERVICE)\n+    .names(LOAD_USER_BY_USERNAME)\n+    .addParametersMatcher(STRING)\n+    .build();\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Arrays.asList(Tree.Kind.METHOD_INVOCATION, Tree.Kind.THROW_STATEMENT);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    if (tree.is(Tree.Kind.THROW_STATEMENT)) {\n+      checkThrowUsernameNotFoundException(((ThrowStatementTree) tree));\n+      return;\n+    }\n+\n+    MethodInvocationTree methodInvocationTree = (MethodInvocationTree) tree;\n+    Arguments arguments = methodInvocationTree.arguments();\n+    if (arguments.isEmpty()){\n+      return;\n+    }\n+    ExpressionTree expression = arguments.get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67587fb6e2cb869b483f03adde1de03c07fb4d80"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODI2MjkzOnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/security/UserEnumerationCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwODoxNDo0M1rOHZgqig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwODoxNDo0M1rOHZgqig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUxMTYyNg==", "bodyText": "I'm a bit surprised not having a code smell here, I would have expected an issue to be raised by java:S115 on constants not using upper case names, as convention. Could you fix it?", "url": "https://github.com/SonarSource/sonar-java/pull/3215#discussion_r496511626", "createdAt": "2020-09-29T08:14:43Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/security/UserEnumerationCheck.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.security;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.BlockTree;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.MethodTree;\n+import org.sonar.plugins.java.api.tree.NewClassTree;\n+import org.sonar.plugins.java.api.tree.ThrowStatementTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5804\")\n+public class UserEnumerationCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final String MESSAGE = \"Make sure allowing user enumeration is safe here.\";\n+  private static final String ABSTRACT_USER_DETAILS_AUTHENTICATION_PROVIDER = \"org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider\";\n+  private static final String USER_DETAILS_SERVICE = \"org.springframework.security.core.userdetails.UserDetailsService\";\n+  private static final String USERNAME_NOT_FOUND_EXCEPTION = \"org.springframework.security.core.userdetails.UsernameNotFoundException\";\n+  private static final String HIDE_USER_NOT_FOUND_EXCEPTIONS = \"setHideUserNotFoundExceptions\";\n+  private static final String LOAD_USER_BY_USERNAME = \"loadUserByUsername\";\n+  private static final String BOOLEAN = \"boolean\";\n+  private static final String STRING = \"java.lang.String\";\n+  private static final String THROWABLE = \"java.lang.Throwable\";\n+\n+  private static final MethodMatchers setHideUserMatcher = MethodMatchers.create()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99e077310f27466fab1379e4965b7781d66dc42a"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODI4ODgzOnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/security/UserEnumerationCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwODoxODozOVrOHZg7iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwODoxODozOVrOHZg7iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUxNTk3OQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/SonarSource/sonar-java/pull/3215#discussion_r496515979", "createdAt": "2020-09-29T08:18:39Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/security/UserEnumerationCheck.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.security;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.BlockTree;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.MethodTree;\n+import org.sonar.plugins.java.api.tree.NewClassTree;\n+import org.sonar.plugins.java.api.tree.ThrowStatementTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5804\")\n+public class UserEnumerationCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final String MESSAGE = \"Make sure allowing user enumeration is safe here.\";\n+  private static final String ABSTRACT_USER_DETAILS_AUTHENTICATION_PROVIDER = \"org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider\";\n+  private static final String USER_DETAILS_SERVICE = \"org.springframework.security.core.userdetails.UserDetailsService\";\n+  private static final String USERNAME_NOT_FOUND_EXCEPTION = \"org.springframework.security.core.userdetails.UsernameNotFoundException\";\n+  private static final String HIDE_USER_NOT_FOUND_EXCEPTIONS = \"setHideUserNotFoundExceptions\";\n+  private static final String LOAD_USER_BY_USERNAME = \"loadUserByUsername\";\n+  private static final String BOOLEAN = \"boolean\";\n+  private static final String STRING = \"java.lang.String\";\n+  private static final String THROWABLE = \"java.lang.Throwable\";\n+\n+  private static final MethodMatchers setHideUserMatcher = MethodMatchers.create()\n+    .ofSubTypes(ABSTRACT_USER_DETAILS_AUTHENTICATION_PROVIDER)\n+    .names(HIDE_USER_NOT_FOUND_EXCEPTIONS)\n+    .addParametersMatcher(BOOLEAN)\n+    .build();\n+\n+  private static final MethodMatchers loadUserMatcher = MethodMatchers.create()\n+    .ofSubTypes(USER_DETAILS_SERVICE)\n+    .names(LOAD_USER_BY_USERNAME)\n+    .addParametersMatcher(STRING)\n+    .build();\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Arrays.asList(Tree.Kind.METHOD_INVOCATION, Tree.Kind.THROW_STATEMENT);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    if (tree.is(Tree.Kind.THROW_STATEMENT)) {\n+      checkThrowUsernameNotFoundException(((ThrowStatementTree) tree));\n+      return;\n+    }\n+\n+    MethodInvocationTree methodInvocationTree = (MethodInvocationTree) tree;\n+    Arguments arguments = methodInvocationTree.arguments();\n+    if (arguments.isEmpty()){\n+      return;\n+    }\n+    ExpressionTree firstArgument = arguments.get(0);\n+\n+    checkHiddenUserNotFoundException(methodInvocationTree, firstArgument);\n+    checkLoadUserArgUsedInExceptions(methodInvocationTree, firstArgument);\n+  }\n+\n+  private void checkLoadUserArgUsedInExceptions(MethodInvocationTree methodInvocationTree, ExpressionTree expression) {\n+    if (loadUserMatcher.matches(methodInvocationTree) && expression.is(Tree.Kind.IDENTIFIER)) {\n+      IdentifierTree identifierTree = (IdentifierTree) expression;\n+      identifierTree.symbol().usages()\n+        .stream().filter(UserEnumerationCheck::checkParentIsThrowable)\n+        .forEach(value -> reportIssue(value, MESSAGE));\n+    }\n+  }\n+\n+  private void checkHiddenUserNotFoundException(MethodInvocationTree methodInvocationTree, ExpressionTree expression) {\n+    if (setHideUserMatcher.matches(methodInvocationTree) && !expression.asConstant(Boolean.class).orElse(true)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99e077310f27466fab1379e4965b7781d66dc42a"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODM1NTY3OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/security/UserEnumerationCheck.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwODoyOTowMlrOHZhnzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDoxNToxMVrOHZmORQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUyNzMwOA==", "bodyText": "I feel this condition is not enough, or will not report only on very trivial case. If I write something like the following, there is going to be 2 FPs:\n public static class MyUserDetailsService4 implements UserDetailsService {\n    @Override\n    public MyUserDetails loadUserByUsername(String s) throws UsernameNotFoundException {\n      if (s.equals(\"yolo\"))\n        throw new UsernameNotFoundException(\"\"); // Compliant\n\n      switch(s) {\n        case \"admin\":\n          throw new UsernameNotFoundException(\"\"); // Compliant\n        case \"batman\":\n          break;\n      }\n      return null;\n    }\n  }\n\nIn order to handle this case, I would use a stack of methodTree I'm entering, and just checking the top of the stack is NOT the loadUserByUsername method.\nFor the other parent loop, I can see it will anyway stop fast. For this one, it will stop too early, and making it more general will trigger the loop until the parent is null which we want to avoid.", "url": "https://github.com/SonarSource/sonar-java/pull/3215#discussion_r496527308", "createdAt": "2020-09-29T08:29:02Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/security/UserEnumerationCheck.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.security;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.BlockTree;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.MethodTree;\n+import org.sonar.plugins.java.api.tree.NewClassTree;\n+import org.sonar.plugins.java.api.tree.ThrowStatementTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5804\")\n+public class UserEnumerationCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final String MESSAGE = \"Make sure allowing user enumeration is safe here.\";\n+  private static final String ABSTRACT_USER_DETAILS_AUTHENTICATION_PROVIDER = \"org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider\";\n+  private static final String USER_DETAILS_SERVICE = \"org.springframework.security.core.userdetails.UserDetailsService\";\n+  private static final String USERNAME_NOT_FOUND_EXCEPTION = \"org.springframework.security.core.userdetails.UsernameNotFoundException\";\n+  private static final String HIDE_USER_NOT_FOUND_EXCEPTIONS = \"setHideUserNotFoundExceptions\";\n+  private static final String LOAD_USER_BY_USERNAME = \"loadUserByUsername\";\n+  private static final String BOOLEAN = \"boolean\";\n+  private static final String STRING = \"java.lang.String\";\n+  private static final String THROWABLE = \"java.lang.Throwable\";\n+\n+  private static final MethodMatchers setHideUserMatcher = MethodMatchers.create()\n+    .ofSubTypes(ABSTRACT_USER_DETAILS_AUTHENTICATION_PROVIDER)\n+    .names(HIDE_USER_NOT_FOUND_EXCEPTIONS)\n+    .addParametersMatcher(BOOLEAN)\n+    .build();\n+\n+  private static final MethodMatchers loadUserMatcher = MethodMatchers.create()\n+    .ofSubTypes(USER_DETAILS_SERVICE)\n+    .names(LOAD_USER_BY_USERNAME)\n+    .addParametersMatcher(STRING)\n+    .build();\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Arrays.asList(Tree.Kind.METHOD_INVOCATION, Tree.Kind.THROW_STATEMENT);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    if (tree.is(Tree.Kind.THROW_STATEMENT)) {\n+      checkThrowUsernameNotFoundException(((ThrowStatementTree) tree));\n+      return;\n+    }\n+\n+    MethodInvocationTree methodInvocationTree = (MethodInvocationTree) tree;\n+    Arguments arguments = methodInvocationTree.arguments();\n+    if (arguments.isEmpty()){\n+      return;\n+    }\n+    ExpressionTree firstArgument = arguments.get(0);\n+\n+    checkHiddenUserNotFoundException(methodInvocationTree, firstArgument);\n+    checkLoadUserArgUsedInExceptions(methodInvocationTree, firstArgument);\n+  }\n+\n+  private void checkLoadUserArgUsedInExceptions(MethodInvocationTree methodInvocationTree, ExpressionTree expression) {\n+    if (loadUserMatcher.matches(methodInvocationTree) && expression.is(Tree.Kind.IDENTIFIER)) {\n+      IdentifierTree identifierTree = (IdentifierTree) expression;\n+      identifierTree.symbol().usages()\n+        .stream().filter(UserEnumerationCheck::checkParentIsThrowable)\n+        .forEach(value -> reportIssue(value, MESSAGE));\n+    }\n+  }\n+\n+  private void checkHiddenUserNotFoundException(MethodInvocationTree methodInvocationTree, ExpressionTree expression) {\n+    if (setHideUserMatcher.matches(methodInvocationTree) && !expression.asConstant(Boolean.class).orElse(true)) {\n+      reportIssue(methodInvocationTree, MESSAGE);\n+    }\n+  }\n+\n+  private void checkThrowUsernameNotFoundException(ThrowStatementTree tree) {\n+    if (tree.expression().symbolType().is(USERNAME_NOT_FOUND_EXCEPTION) && !isInsideLoadUserByUserName(tree)) {\n+      reportIssue(tree.expression(), MESSAGE);\n+    }\n+  }\n+\n+  private static boolean checkParentIsThrowable(Tree tree) {\n+    Tree current = tree.parent();\n+    while (current instanceof ExpressionTree || current instanceof Arguments) {\n+      if (current.is(Tree.Kind.NEW_CLASS) && ((NewClassTree) current).symbolType().isSubtypeOf(THROWABLE)) {\n+        return true;\n+      }\n+      current = current.parent();\n+    }\n+    return false;\n+  }\n+\n+  private static boolean isInsideLoadUserByUserName(Tree tree) {\n+    Tree current = tree.parent();\n+    while (current instanceof BlockTree || current instanceof MethodTree) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99e077310f27466fab1379e4965b7781d66dc42a"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYwMjY5Mw==", "bodyText": "I have a small question here.\nFirstly, I refactored it to additional method visitor. So it checked each method which wasn't loadUserByUsername and reported an issue each time an exception UserNotFoundException was found.\nThen I realized that this way we're going to check all methods in class. And a chance to meet this exception is quite low. I suppose It's better to check exact throw statement if it is in scope of the loadUserByUsername method. The only solution that came to my mind will be :\nprivate static boolean isInsideLoadUserByUserName(Tree tree) {\n    Tree current = tree.parent();\n    while (current != null) {\n        if (current.is(Tree.Kind.METHOD) && LOAD_USER_MATCHER.matches(((MethodTree) current))) {\n            return true;\n        }\n        current = current.parent();\n    }\n    return false;\n}\n\nIs it ok or am I missing something?", "url": "https://github.com/SonarSource/sonar-java/pull/3215#discussion_r496602693", "createdAt": "2020-09-29T10:15:11Z", "author": {"login": "margarita-nedzelska-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/security/UserEnumerationCheck.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.security;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.BlockTree;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.MethodTree;\n+import org.sonar.plugins.java.api.tree.NewClassTree;\n+import org.sonar.plugins.java.api.tree.ThrowStatementTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5804\")\n+public class UserEnumerationCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final String MESSAGE = \"Make sure allowing user enumeration is safe here.\";\n+  private static final String ABSTRACT_USER_DETAILS_AUTHENTICATION_PROVIDER = \"org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider\";\n+  private static final String USER_DETAILS_SERVICE = \"org.springframework.security.core.userdetails.UserDetailsService\";\n+  private static final String USERNAME_NOT_FOUND_EXCEPTION = \"org.springframework.security.core.userdetails.UsernameNotFoundException\";\n+  private static final String HIDE_USER_NOT_FOUND_EXCEPTIONS = \"setHideUserNotFoundExceptions\";\n+  private static final String LOAD_USER_BY_USERNAME = \"loadUserByUsername\";\n+  private static final String BOOLEAN = \"boolean\";\n+  private static final String STRING = \"java.lang.String\";\n+  private static final String THROWABLE = \"java.lang.Throwable\";\n+\n+  private static final MethodMatchers setHideUserMatcher = MethodMatchers.create()\n+    .ofSubTypes(ABSTRACT_USER_DETAILS_AUTHENTICATION_PROVIDER)\n+    .names(HIDE_USER_NOT_FOUND_EXCEPTIONS)\n+    .addParametersMatcher(BOOLEAN)\n+    .build();\n+\n+  private static final MethodMatchers loadUserMatcher = MethodMatchers.create()\n+    .ofSubTypes(USER_DETAILS_SERVICE)\n+    .names(LOAD_USER_BY_USERNAME)\n+    .addParametersMatcher(STRING)\n+    .build();\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Arrays.asList(Tree.Kind.METHOD_INVOCATION, Tree.Kind.THROW_STATEMENT);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    if (tree.is(Tree.Kind.THROW_STATEMENT)) {\n+      checkThrowUsernameNotFoundException(((ThrowStatementTree) tree));\n+      return;\n+    }\n+\n+    MethodInvocationTree methodInvocationTree = (MethodInvocationTree) tree;\n+    Arguments arguments = methodInvocationTree.arguments();\n+    if (arguments.isEmpty()){\n+      return;\n+    }\n+    ExpressionTree firstArgument = arguments.get(0);\n+\n+    checkHiddenUserNotFoundException(methodInvocationTree, firstArgument);\n+    checkLoadUserArgUsedInExceptions(methodInvocationTree, firstArgument);\n+  }\n+\n+  private void checkLoadUserArgUsedInExceptions(MethodInvocationTree methodInvocationTree, ExpressionTree expression) {\n+    if (loadUserMatcher.matches(methodInvocationTree) && expression.is(Tree.Kind.IDENTIFIER)) {\n+      IdentifierTree identifierTree = (IdentifierTree) expression;\n+      identifierTree.symbol().usages()\n+        .stream().filter(UserEnumerationCheck::checkParentIsThrowable)\n+        .forEach(value -> reportIssue(value, MESSAGE));\n+    }\n+  }\n+\n+  private void checkHiddenUserNotFoundException(MethodInvocationTree methodInvocationTree, ExpressionTree expression) {\n+    if (setHideUserMatcher.matches(methodInvocationTree) && !expression.asConstant(Boolean.class).orElse(true)) {\n+      reportIssue(methodInvocationTree, MESSAGE);\n+    }\n+  }\n+\n+  private void checkThrowUsernameNotFoundException(ThrowStatementTree tree) {\n+    if (tree.expression().symbolType().is(USERNAME_NOT_FOUND_EXCEPTION) && !isInsideLoadUserByUserName(tree)) {\n+      reportIssue(tree.expression(), MESSAGE);\n+    }\n+  }\n+\n+  private static boolean checkParentIsThrowable(Tree tree) {\n+    Tree current = tree.parent();\n+    while (current instanceof ExpressionTree || current instanceof Arguments) {\n+      if (current.is(Tree.Kind.NEW_CLASS) && ((NewClassTree) current).symbolType().isSubtypeOf(THROWABLE)) {\n+        return true;\n+      }\n+      current = current.parent();\n+    }\n+    return false;\n+  }\n+\n+  private static boolean isInsideLoadUserByUserName(Tree tree) {\n+    Tree current = tree.parent();\n+    while (current instanceof BlockTree || current instanceof MethodTree) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUyNzMwOA=="}, "originalCommit": {"oid": "99e077310f27466fab1379e4965b7781d66dc42a"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTk0MDYxOnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/security/UserEnumerationCheck.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNDo0NjowMFrOHZw88A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNToxNDo1N1rOHZyXTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc3ODQ4MA==", "bodyText": "I think I would also clear the stack when entering file, just to be sure that if the rules crash on one file (the analyzer will recover), we start over from a clear state on next file.", "url": "https://github.com/SonarSource/sonar-java/pull/3215#discussion_r496778480", "createdAt": "2020-09-29T14:46:00Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/security/UserEnumerationCheck.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.security;\n+\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.Deque;\n+import java.util.List;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.MethodTree;\n+import org.sonar.plugins.java.api.tree.NewClassTree;\n+import org.sonar.plugins.java.api.tree.ThrowStatementTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5804\")\n+public class UserEnumerationCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final String MESSAGE = \"Make sure allowing user enumeration is safe here.\";\n+  private static final String ABSTRACT_USER_DETAILS_AUTHENTICATION_PROVIDER = \"org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider\";\n+  private static final String USER_DETAILS_SERVICE = \"org.springframework.security.core.userdetails.UserDetailsService\";\n+  private static final String USERNAME_NOT_FOUND_EXCEPTION = \"org.springframework.security.core.userdetails.UsernameNotFoundException\";\n+  private static final String HIDE_USER_NOT_FOUND_EXCEPTIONS = \"setHideUserNotFoundExceptions\";\n+  private static final String LOAD_USER_BY_USERNAME = \"loadUserByUsername\";\n+  private static final String BOOLEAN = \"boolean\";\n+  private static final String STRING = \"java.lang.String\";\n+  private static final String THROWABLE = \"java.lang.Throwable\";\n+  private static final Deque<MethodTree> STACK = new ArrayDeque<>();\n+\n+  private static final MethodMatchers SET_HIDE_USER_MATCHER = MethodMatchers.create()\n+    .ofSubTypes(ABSTRACT_USER_DETAILS_AUTHENTICATION_PROVIDER)\n+    .names(HIDE_USER_NOT_FOUND_EXCEPTIONS)\n+    .addParametersMatcher(BOOLEAN)\n+    .build();\n+\n+  private static final MethodMatchers LOAD_USER_MATCHER = MethodMatchers.create()\n+    .ofSubTypes(USER_DETAILS_SERVICE)\n+    .names(LOAD_USER_BY_USERNAME)\n+    .addParametersMatcher(STRING)\n+    .build();\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Arrays.asList(Tree.Kind.METHOD_INVOCATION, Tree.Kind.THROW_STATEMENT, Tree.Kind.METHOD);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    if (tree.is(Tree.Kind.METHOD)) {\n+      STACK.push(((MethodTree) tree));\n+      return;\n+    }\n+\n+    if (tree.is(Tree.Kind.THROW_STATEMENT)) {\n+      ThrowStatementTree throwStatementTree = (ThrowStatementTree) tree;\n+      if (throwStatementTree.expression().symbolType().is(USERNAME_NOT_FOUND_EXCEPTION) && !isInsideLoadUserByUserName()) {\n+        reportIssue(throwStatementTree.expression(), MESSAGE);\n+      }\n+      return;\n+    }\n+\n+    MethodInvocationTree methodInvocationTree = (MethodInvocationTree) tree;\n+    Arguments arguments = methodInvocationTree.arguments();\n+    if (arguments.isEmpty()) {\n+      return;\n+    }\n+    ExpressionTree firstArgument = arguments.get(0);\n+\n+    checkHiddenUserNotFoundException(methodInvocationTree, firstArgument);\n+    checkLoadUserArgUsedInExceptions(methodInvocationTree, firstArgument);\n+  }\n+\n+  @Override\n+  public void leaveNode(Tree tree) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e356dc951a8f394960859b4708767da5feb5ee1e"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc4MzU5MQ==", "bodyText": "is it better to do in scanFile() at the beginning or in leaveFile() at the end?", "url": "https://github.com/SonarSource/sonar-java/pull/3215#discussion_r496783591", "createdAt": "2020-09-29T14:52:08Z", "author": {"login": "margarita-nedzelska-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/security/UserEnumerationCheck.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.security;\n+\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.Deque;\n+import java.util.List;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.MethodTree;\n+import org.sonar.plugins.java.api.tree.NewClassTree;\n+import org.sonar.plugins.java.api.tree.ThrowStatementTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5804\")\n+public class UserEnumerationCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final String MESSAGE = \"Make sure allowing user enumeration is safe here.\";\n+  private static final String ABSTRACT_USER_DETAILS_AUTHENTICATION_PROVIDER = \"org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider\";\n+  private static final String USER_DETAILS_SERVICE = \"org.springframework.security.core.userdetails.UserDetailsService\";\n+  private static final String USERNAME_NOT_FOUND_EXCEPTION = \"org.springframework.security.core.userdetails.UsernameNotFoundException\";\n+  private static final String HIDE_USER_NOT_FOUND_EXCEPTIONS = \"setHideUserNotFoundExceptions\";\n+  private static final String LOAD_USER_BY_USERNAME = \"loadUserByUsername\";\n+  private static final String BOOLEAN = \"boolean\";\n+  private static final String STRING = \"java.lang.String\";\n+  private static final String THROWABLE = \"java.lang.Throwable\";\n+  private static final Deque<MethodTree> STACK = new ArrayDeque<>();\n+\n+  private static final MethodMatchers SET_HIDE_USER_MATCHER = MethodMatchers.create()\n+    .ofSubTypes(ABSTRACT_USER_DETAILS_AUTHENTICATION_PROVIDER)\n+    .names(HIDE_USER_NOT_FOUND_EXCEPTIONS)\n+    .addParametersMatcher(BOOLEAN)\n+    .build();\n+\n+  private static final MethodMatchers LOAD_USER_MATCHER = MethodMatchers.create()\n+    .ofSubTypes(USER_DETAILS_SERVICE)\n+    .names(LOAD_USER_BY_USERNAME)\n+    .addParametersMatcher(STRING)\n+    .build();\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Arrays.asList(Tree.Kind.METHOD_INVOCATION, Tree.Kind.THROW_STATEMENT, Tree.Kind.METHOD);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    if (tree.is(Tree.Kind.METHOD)) {\n+      STACK.push(((MethodTree) tree));\n+      return;\n+    }\n+\n+    if (tree.is(Tree.Kind.THROW_STATEMENT)) {\n+      ThrowStatementTree throwStatementTree = (ThrowStatementTree) tree;\n+      if (throwStatementTree.expression().symbolType().is(USERNAME_NOT_FOUND_EXCEPTION) && !isInsideLoadUserByUserName()) {\n+        reportIssue(throwStatementTree.expression(), MESSAGE);\n+      }\n+      return;\n+    }\n+\n+    MethodInvocationTree methodInvocationTree = (MethodInvocationTree) tree;\n+    Arguments arguments = methodInvocationTree.arguments();\n+    if (arguments.isEmpty()) {\n+      return;\n+    }\n+    ExpressionTree firstArgument = arguments.get(0);\n+\n+    checkHiddenUserNotFoundException(methodInvocationTree, firstArgument);\n+    checkLoadUserArgUsedInExceptions(methodInvocationTree, firstArgument);\n+  }\n+\n+  @Override\n+  public void leaveNode(Tree tree) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc3ODQ4MA=="}, "originalCommit": {"oid": "e356dc951a8f394960859b4708767da5feb5ee1e"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgwMTYxNQ==", "bodyText": "If a rule is stateful, it's mandatory to clean the state when entering the file and it's usually done by overriding:\n  @Override\n  public void setContext(JavaFileScannerContext context) {\n    mystate.clear();\n    super.setContext(context);\n  }\n\nBecause you don't know if an exception previously occurs during the last analyzed file. When an exception occurs, leaveNode is not called, the sate is stale, and a recovery mechanism continues with the next file.\nFinally, you can also keep the cleanup in the leaveNode method, it frees the memory before the next file.", "url": "https://github.com/SonarSource/sonar-java/pull/3215#discussion_r496801615", "createdAt": "2020-09-29T15:14:57Z", "author": {"login": "alban-auzeill"}, "path": "java-checks/src/main/java/org/sonar/java/checks/security/UserEnumerationCheck.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.security;\n+\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.Deque;\n+import java.util.List;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.MethodTree;\n+import org.sonar.plugins.java.api.tree.NewClassTree;\n+import org.sonar.plugins.java.api.tree.ThrowStatementTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5804\")\n+public class UserEnumerationCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final String MESSAGE = \"Make sure allowing user enumeration is safe here.\";\n+  private static final String ABSTRACT_USER_DETAILS_AUTHENTICATION_PROVIDER = \"org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider\";\n+  private static final String USER_DETAILS_SERVICE = \"org.springframework.security.core.userdetails.UserDetailsService\";\n+  private static final String USERNAME_NOT_FOUND_EXCEPTION = \"org.springframework.security.core.userdetails.UsernameNotFoundException\";\n+  private static final String HIDE_USER_NOT_FOUND_EXCEPTIONS = \"setHideUserNotFoundExceptions\";\n+  private static final String LOAD_USER_BY_USERNAME = \"loadUserByUsername\";\n+  private static final String BOOLEAN = \"boolean\";\n+  private static final String STRING = \"java.lang.String\";\n+  private static final String THROWABLE = \"java.lang.Throwable\";\n+  private static final Deque<MethodTree> STACK = new ArrayDeque<>();\n+\n+  private static final MethodMatchers SET_HIDE_USER_MATCHER = MethodMatchers.create()\n+    .ofSubTypes(ABSTRACT_USER_DETAILS_AUTHENTICATION_PROVIDER)\n+    .names(HIDE_USER_NOT_FOUND_EXCEPTIONS)\n+    .addParametersMatcher(BOOLEAN)\n+    .build();\n+\n+  private static final MethodMatchers LOAD_USER_MATCHER = MethodMatchers.create()\n+    .ofSubTypes(USER_DETAILS_SERVICE)\n+    .names(LOAD_USER_BY_USERNAME)\n+    .addParametersMatcher(STRING)\n+    .build();\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Arrays.asList(Tree.Kind.METHOD_INVOCATION, Tree.Kind.THROW_STATEMENT, Tree.Kind.METHOD);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    if (tree.is(Tree.Kind.METHOD)) {\n+      STACK.push(((MethodTree) tree));\n+      return;\n+    }\n+\n+    if (tree.is(Tree.Kind.THROW_STATEMENT)) {\n+      ThrowStatementTree throwStatementTree = (ThrowStatementTree) tree;\n+      if (throwStatementTree.expression().symbolType().is(USERNAME_NOT_FOUND_EXCEPTION) && !isInsideLoadUserByUserName()) {\n+        reportIssue(throwStatementTree.expression(), MESSAGE);\n+      }\n+      return;\n+    }\n+\n+    MethodInvocationTree methodInvocationTree = (MethodInvocationTree) tree;\n+    Arguments arguments = methodInvocationTree.arguments();\n+    if (arguments.isEmpty()) {\n+      return;\n+    }\n+    ExpressionTree firstArgument = arguments.get(0);\n+\n+    checkHiddenUserNotFoundException(methodInvocationTree, firstArgument);\n+    checkLoadUserArgUsedInExceptions(methodInvocationTree, firstArgument);\n+  }\n+\n+  @Override\n+  public void leaveNode(Tree tree) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc3ODQ4MA=="}, "originalCommit": {"oid": "e356dc951a8f394960859b4708767da5feb5ee1e"}, "originalPosition": 96}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3764, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}