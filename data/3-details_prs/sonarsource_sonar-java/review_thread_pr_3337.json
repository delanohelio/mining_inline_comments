{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1MDMzMDg0", "number": 3337, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwODowNzo0NFrOFDV3BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwODowNzo0NFrOFDV3BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MDQ4MTk3OnYy", "diffSide": "RIGHT", "path": "java-frontend/src/main/java/org/sonar/java/SonarComponents.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwODowNzo0NFrOIC8VYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwODowNzo0NFrOIC8VYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk1NjU3OQ==", "bodyText": "It can probably be Collections.emptyList() here", "url": "https://github.com/SonarSource/sonar-java/pull/3337#discussion_r539956579", "createdAt": "2020-12-10T08:07:44Z", "author": {"login": "m-g-sonar"}, "path": "java-frontend/src/main/java/org/sonar/java/SonarComponents.java", "diffHunk": "@@ -114,13 +114,19 @@ public SonarComponents(FileLinesContextFactory fileLinesContextFactory, FileSyst\n       CheckRegistrar.RegistrarContext registrarContext = new CheckRegistrar.RegistrarContext();\n       for (CheckRegistrar checkClassesRegister : checkRegistrars) {\n         checkClassesRegister.register(registrarContext);\n-        Iterable<Class<? extends JavaCheck>> checkClasses = registrarContext.checkClasses();\n-        Iterable<Class<? extends JavaCheck>> testCheckClasses = registrarContext.testCheckClasses();\n-        registerCheckClasses(registrarContext.repositoryKey(), Lists.newArrayList(checkClasses != null ? checkClasses : new ArrayList<>()));\n-        registerTestCheckClasses(registrarContext.repositoryKey(), Lists.newArrayList(testCheckClasses != null ? testCheckClasses : new ArrayList<>()));\n+        List<Class<? extends JavaCheck>> checkClasses = getChecks(registrarContext.checkClasses());\n+        List<Class<? extends JavaCheck>> testCheckClasses = getChecks(registrarContext.testCheckClasses());\n+        registerCheckClasses(registrarContext.repositoryKey(), checkClasses);\n+        registerTestCheckClasses(registrarContext.repositoryKey(), testCheckClasses);\n       }\n     }\n   }\n+  \n+  private static List<Class<? extends JavaCheck>> getChecks(@Nullable Iterable<Class<? extends JavaCheck>> iterable) {\n+    return iterable != null ?\n+      StreamSupport.stream(iterable.spliterator(), false).collect(Collectors.toList()) :\n+      new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55da28903b01b7f9e34e1390ba9cee6b461a917a"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3711, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}