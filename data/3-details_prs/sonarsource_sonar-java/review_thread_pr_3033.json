{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1OTAxNTk1", "number": 3033, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzo1Mzo1MVrOEGdF2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzo1NTozOFrOEGdIUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjAzNTQ2OnYy", "diffSide": "RIGHT", "path": "java-checks-test-sources/src/main/java/checks/regex/UnicodeCaseCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzo1Mzo1MVrOGlQwHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwOToxOTo0MVrOGlm9qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyNDk1OQ==", "bodyText": "be careful, in order to test the location of the issues, you need 2 opening/closing brackets! For instance:  [[sc=37,ec=61]].\nI didn't check the other rule but I might have missed it, and with this PR, the precise location is not tested because of this error.", "url": "https://github.com/SonarSource/sonar-java/pull/3033#discussion_r441724959", "createdAt": "2020-06-17T17:53:51Z", "author": {"login": "m-g-sonar"}, "path": "java-checks-test-sources/src/main/java/checks/regex/UnicodeCaseCheck.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package checks.regex;\n+\n+import java.util.regex.Pattern;\n+\n+public class UnicodeCaseCheck {\n+\n+  void noncompliant(String str) {\n+    Pattern.compile(\"s\u00f6me p\u00e4ttern\", Pattern.CASE_INSENSITIVE); // Noncompliant [sc=37;ec=61] {{Also use \"Pattern.UNICODE_CASE\" to correctly handle non-ASCII letters.}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e232b2cdc884c7e1eb4a9976640202520e00525b"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA4ODg3NA==", "bodyText": "I fixed this and also grepped through the other tests to see whether I made the same mistake elsewhere (I didn't).", "url": "https://github.com/SonarSource/sonar-java/pull/3033#discussion_r442088874", "createdAt": "2020-06-18T09:19:41Z", "author": {"login": "sebastian-hungerecker-sonarsource"}, "path": "java-checks-test-sources/src/main/java/checks/regex/UnicodeCaseCheck.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package checks.regex;\n+\n+import java.util.regex.Pattern;\n+\n+public class UnicodeCaseCheck {\n+\n+  void noncompliant(String str) {\n+    Pattern.compile(\"s\u00f6me p\u00e4ttern\", Pattern.CASE_INSENSITIVE); // Noncompliant [sc=37;ec=61] {{Also use \"Pattern.UNICODE_CASE\" to correctly handle non-ASCII letters.}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyNDk1OQ=="}, "originalCommit": {"oid": "e232b2cdc884c7e1eb4a9976640202520e00525b"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjA0MTc4OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/regex/UnicodeCaseCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzo1NTozOFrOGlQ0Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwOToyMDo0N1rOGlnATw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyNjA0Nw==", "bodyText": "I'm not sure that I saw any test case which would benefit from having a loop here and report multiple issues for a given regex. would it be possible to add a test for it?", "url": "https://github.com/SonarSource/sonar-java/pull/3033#discussion_r441726047", "createdAt": "2020-06-17T17:55:38Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/regex/UnicodeCaseCheck.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.regex;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+import org.sonar.check.Rule;\n+import org.sonar.java.regex.RegexParseResult;\n+import org.sonar.java.regex.ast.JavaCharacter;\n+import org.sonar.java.regex.ast.PlainCharacterTree;\n+import org.sonar.java.regex.ast.RegexBaseVisitor;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+\n+@Rule(key = \"S5866\")\n+public class UnicodeCaseCheck extends AbstractRegexCheck {\n+\n+  private static final String MESSAGE = \"Also use %s to correctly handle non-ASCII letters.\";\n+\n+  @Override\n+  public void checkRegex(RegexParseResult regexForLiterals, MethodInvocationTree mit) {\n+    if (!regexForLiterals.hasSyntaxErrors()) {\n+      Visitor visitor = new Visitor();\n+      visitor.setActiveFlags(getFlags(mit));\n+      visitor.visit(regexForLiterals.getResult());\n+      if (visitor.problematicFlagSetOutsideOfRegex) {\n+        getFlagsTree(mit).ifPresent( flagsTree ->\n+          reportIssue(flagsTree, String.format(MESSAGE, \"\\\"Pattern.UNICODE_CASE\\\"\"))\n+        );\n+      }\n+      for (JavaCharacter flag : visitor.problematicFlags) {\n+        reportIssue(flag, String.format(MESSAGE, \"the \\\"u\\\" flag\"), null, Collections.emptyList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e232b2cdc884c7e1eb4a9976640202520e00525b"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA4OTU1MQ==", "bodyText": "Test case added.", "url": "https://github.com/SonarSource/sonar-java/pull/3033#discussion_r442089551", "createdAt": "2020-06-18T09:20:47Z", "author": {"login": "sebastian-hungerecker-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/regex/UnicodeCaseCheck.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.regex;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+import org.sonar.check.Rule;\n+import org.sonar.java.regex.RegexParseResult;\n+import org.sonar.java.regex.ast.JavaCharacter;\n+import org.sonar.java.regex.ast.PlainCharacterTree;\n+import org.sonar.java.regex.ast.RegexBaseVisitor;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+\n+@Rule(key = \"S5866\")\n+public class UnicodeCaseCheck extends AbstractRegexCheck {\n+\n+  private static final String MESSAGE = \"Also use %s to correctly handle non-ASCII letters.\";\n+\n+  @Override\n+  public void checkRegex(RegexParseResult regexForLiterals, MethodInvocationTree mit) {\n+    if (!regexForLiterals.hasSyntaxErrors()) {\n+      Visitor visitor = new Visitor();\n+      visitor.setActiveFlags(getFlags(mit));\n+      visitor.visit(regexForLiterals.getResult());\n+      if (visitor.problematicFlagSetOutsideOfRegex) {\n+        getFlagsTree(mit).ifPresent( flagsTree ->\n+          reportIssue(flagsTree, String.format(MESSAGE, \"\\\"Pattern.UNICODE_CASE\\\"\"))\n+        );\n+      }\n+      for (JavaCharacter flag : visitor.problematicFlags) {\n+        reportIssue(flag, String.format(MESSAGE, \"the \\\"u\\\" flag\"), null, Collections.emptyList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyNjA0Nw=="}, "originalCommit": {"oid": "e232b2cdc884c7e1eb4a9976640202520e00525b"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4053, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}